// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// CreateNature ;
   8: CALL 10255 0 0
// PrepareArabian ;
  12: CALL 231 0 0
// PrepareAmerican ;
  16: CALL 535 0 0
// PrepareLegion ;
  20: CALL 5425 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 10753 0 0
// end ;
  41: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 09_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 09_
  60: ST_TO_ADDR
// amScriptActive := true ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// legScriptActive := true ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 16
  84: PUSH
  85: LD_INT 14
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: LD_OWVAR 67
 104: ARRAY
 105: ST_TO_ADDR
// spotAmericanBase := false ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// spotArabianBase := false ;
 114: LD_ADDR_EXP 7
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// spotLegion := false ;
 122: LD_ADDR_EXP 10
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// spotByAmerican := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// spotByLegion := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// americanDestroyed := false ;
 146: LD_ADDR_EXP 11
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// legionDestroyed := false ;
 154: LD_ADDR_EXP 12
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasMastodont := false ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasVehicles := false ;
 170: LD_ADDR_EXP 14
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// hasTigers := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// hasApes := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasDrugs := false ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// canFinish := false ;
 202: LD_ADDR_EXP 18
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// gameActive := false ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// omarCanChangeClass := false ;
 218: LD_ADDR_EXP 20
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// end ; end_of_file
 226: LD_VAR 0 1
 230: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp ; begin
 231: LD_INT 0
 233: PPUSH
 234: PPUSH
 235: PPUSH
// uc_side := 2 ;
 236: LD_ADDR_OWVAR 20
 240: PUSH
 241: LD_INT 2
 243: ST_TO_ADDR
// uc_nation := nation_arabian ;
 244: LD_ADDR_OWVAR 21
 248: PUSH
 249: LD_INT 2
 251: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 252: LD_ADDR_EXP 21
 256: PUSH
 257: LD_STRING Heike
 259: PPUSH
 260: LD_EXP 1
 264: NOT
 265: PPUSH
 266: LD_EXP 2
 270: PPUSH
 271: CALL 19149 0 3
 275: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 276: LD_INT 14
 278: PPUSH
 279: LD_INT 3
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 27
 287: PPUSH
 288: LD_INT 100
 290: PPUSH
 291: CALL 23989 0 5
// heikeVehicle := CreateVehicle ;
 295: LD_ADDR_EXP 23
 299: PUSH
 300: CALL_OW 45
 304: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 305: LD_EXP 23
 309: PPUSH
 310: LD_INT 4
 312: PPUSH
 313: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 317: LD_EXP 23
 321: PPUSH
 322: LD_INT 118
 324: PPUSH
 325: LD_INT 37
 327: PPUSH
 328: LD_INT 0
 330: PPUSH
 331: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 335: LD_EXP 21
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 347: LD_EXP 21
 351: PPUSH
 352: LD_EXP 23
 356: PPUSH
 357: CALL_OW 52
// uc_side := 5 ;
 361: LD_ADDR_OWVAR 20
 365: PUSH
 366: LD_INT 5
 368: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 369: LD_ADDR_EXP 22
 373: PUSH
 374: LD_STRING Omar
 376: PPUSH
 377: CALL_OW 25
 381: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 382: LD_INT 14
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 1
 390: PPUSH
 391: LD_INT 27
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 23989 0 5
// omarVehicle := CreateVehicle ;
 401: LD_ADDR_EXP 24
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 411: LD_EXP 24
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 423: LD_ADDR_VAR 0 2
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 5
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 21
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PPUSH
 452: CALL_OW 69
 456: PUSH
 457: FOR_IN
 458: IFFALSE 482
// SetLives ( i , rand ( 300 , 499 ) ) ;
 460: LD_VAR 0 2
 464: PPUSH
 465: LD_INT 300
 467: PPUSH
 468: LD_INT 499
 470: PPUSH
 471: CALL_OW 12
 475: PPUSH
 476: CALL_OW 234
 480: GO 457
 482: POP
 483: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 100 - ( 20 * Difficulty ) ) ;
 484: LD_INT 85
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_INT 100
 497: PUSH
 498: LD_INT 20
 500: PUSH
 501: LD_OWVAR 67
 505: MUL
 506: MINUS
 507: PPUSH
 508: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 10 ) ;
 512: LD_INT 85
 514: PPUSH
 515: CALL_OW 274
 519: PPUSH
 520: LD_INT 2
 522: PPUSH
 523: LD_INT 10
 525: PPUSH
 526: CALL_OW 277
// end ; end_of_file
 530: LD_VAR 0 1
 534: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
 539: PPUSH
 540: PPUSH
 541: PPUSH
 542: PPUSH
 543: PPUSH
 544: PPUSH
// uc_side := 1 ;
 545: LD_ADDR_OWVAR 20
 549: PUSH
 550: LD_INT 1
 552: ST_TO_ADDR
// uc_nation := nation_american ;
 553: LD_ADDR_OWVAR 21
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// amForces := [ ] ;
 561: LD_ADDR_EXP 25
 565: PUSH
 566: EMPTY
 567: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 568: LD_ADDR_EXP 26
 572: PUSH
 573: LD_INT 1
 575: PPUSH
 576: LD_INT 1
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL 19212 0 3
 586: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 587: LD_ADDR_EXP 27
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 1
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: LD_INT 12
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 3
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: LD_INT 2
 618: PUSH
 619: LD_INT 13
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 632: LD_ADDR_EXP 28
 636: PUSH
 637: LD_INT 94
 639: PUSH
 640: LD_INT 132
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// amBuildings := [ ] ;
 647: LD_ADDR_EXP 29
 651: PUSH
 652: EMPTY
 653: ST_TO_ADDR
// amTanks := [ ] ;
 654: LD_ADDR_EXP 30
 658: PUSH
 659: EMPTY
 660: ST_TO_ADDR
// amCargo := 0 ;
 661: LD_ADDR_EXP 32
 665: PUSH
 666: LD_INT 0
 668: ST_TO_ADDR
// amPatrol := [ ] ;
 669: LD_ADDR_EXP 33
 673: PUSH
 674: EMPTY
 675: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 676: LD_ADDR_VAR 0 7
 680: PUSH
 681: LD_INT 77
 683: PUSH
 684: LD_INT 121
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 98
 693: PUSH
 694: LD_INT 145
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: ST_TO_ADDR
// for i in sources do
 705: LD_ADDR_VAR 0 2
 709: PUSH
 710: LD_VAR 0 7
 714: PUSH
 715: FOR_IN
 716: IFFALSE 745
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 718: LD_VAR 0 2
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: CALL_OW 441
 743: GO 715
 745: POP
 746: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 747: LD_INT 2
 749: PPUSH
 750: CALL_OW 274
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_INT 550
 760: PPUSH
 761: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 765: LD_INT 2
 767: PPUSH
 768: CALL_OW 274
 772: PPUSH
 773: LD_INT 2
 775: PPUSH
 776: LD_INT 120
 778: PPUSH
 779: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 783: LD_INT 2
 785: PPUSH
 786: CALL_OW 274
 790: PPUSH
 791: LD_INT 3
 793: PPUSH
 794: LD_INT 30
 796: PPUSH
 797: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 801: LD_ADDR_VAR 0 6
 805: PUSH
 806: LD_INT 6
 808: PUSH
 809: LD_INT 7
 811: PUSH
 812: LD_INT 8
 814: PUSH
 815: LD_INT 9
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: LD_OWVAR 67
 828: ARRAY
 829: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 830: LD_ADDR_EXP 31
 834: PUSH
 835: LD_STRING Brown
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: LD_STRING 
 843: PPUSH
 844: CALL 19149 0 3
 848: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 849: LD_EXP 31
 853: PPUSH
 854: LD_INT 2
 856: PPUSH
 857: CALL_OW 52
// for i := 1 to 4 do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: DOUBLE
 867: LD_INT 1
 869: DEC
 870: ST_TO_ADDR
 871: LD_INT 4
 873: PUSH
 874: FOR_TO
 875: IFFALSE 1399
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
 877: LD_ADDR_VAR 0 3
 881: PUSH
 882: DOUBLE
 883: LD_INT 1
 885: DEC
 886: ST_TO_ADDR
 887: LD_INT 5
 889: PUSH
 890: LD_INT 6
 892: PUSH
 893: LD_INT 8
 895: PUSH
 896: LD_INT 9
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: LD_INT 4
 916: PUSH
 917: LD_INT 5
 919: PUSH
 920: LD_INT 5
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_OWVAR 67
 933: ARRAY
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 5
 940: PUSH
 941: LD_INT 6
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_OWVAR 67
 957: ARRAY
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 3
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 3
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: LD_OWVAR 67
 981: ARRAY
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: PUSH
 989: LD_VAR 0 2
 993: ARRAY
 994: PUSH
 995: FOR_TO
 996: IFFALSE 1395
// begin PrepareHuman ( false , i , skill ) ;
 998: LD_INT 0
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_VAR 0 6
1010: PPUSH
1011: CALL_OW 380
// un := CreateHuman ;
1015: LD_ADDR_VAR 0 5
1019: PUSH
1020: CALL_OW 44
1024: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1025: LD_ADDR_EXP 25
1029: PUSH
1030: LD_EXP 25
1034: PPUSH
1035: LD_VAR 0 5
1039: PPUSH
1040: CALL 56838 0 2
1044: ST_TO_ADDR
// case i of 1 :
1045: LD_VAR 0 2
1049: PUSH
1050: LD_INT 1
1052: DOUBLE
1053: EQUAL
1054: IFTRUE 1058
1056: GO 1127
1058: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1059: LD_ADDR_VAR 0 4
1063: PUSH
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: LD_INT 30
1079: PUSH
1080: LD_INT 32
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: PUSH
1087: LD_INT 30
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 3
1104: PUSH
1105: LD_INT 62
1107: PUSH
1108: EMPTY
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PPUSH
1120: CALL_OW 69
1124: ST_TO_ADDR
1125: GO 1306
1127: LD_INT 2
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1164
1135: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1136: LD_ADDR_VAR 0 4
1140: PUSH
1141: LD_INT 2
1143: PPUSH
1144: LD_INT 3
1146: PUSH
1147: LD_INT 62
1149: PUSH
1150: EMPTY
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 72
1161: ST_TO_ADDR
1162: GO 1306
1164: LD_INT 3
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1246
1172: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1173: LD_ADDR_VAR 0 4
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 2
1190: PUSH
1191: LD_INT 30
1193: PUSH
1194: LD_INT 3
1196: PUSH
1197: EMPTY
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 30
1203: PUSH
1204: LD_INT 36
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 3
1218: PUSH
1219: LD_INT 62
1221: PUSH
1222: EMPTY
1223: LIST
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 69
1238: PPUSH
1239: CALL 52127 0 1
1243: ST_TO_ADDR
1244: GO 1306
1246: LD_INT 4
1248: DOUBLE
1249: EQUAL
1250: IFTRUE 1254
1252: GO 1305
1254: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1255: LD_ADDR_VAR 0 4
1259: PUSH
1260: LD_INT 22
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 30
1272: PUSH
1273: LD_INT 8
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: LD_INT 62
1285: PUSH
1286: EMPTY
1287: LIST
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: PPUSH
1298: CALL_OW 69
1302: ST_TO_ADDR
1303: GO 1306
1305: POP
// if b then
1306: LD_VAR 0 4
1310: IFFALSE 1372
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 50 ) then
1312: LD_VAR 0 4
1316: PUSH
1317: LD_INT 1
1319: ARRAY
1320: PPUSH
1321: CALL_OW 266
1325: PUSH
1326: LD_INT 5
1328: EQUAL
1329: PUSH
1330: LD_INT 50
1332: PPUSH
1333: CALL_OW 13
1337: AND
1338: IFFALSE 1352
// SetClass ( un , class_sniper ) ;
1340: LD_VAR 0 5
1344: PPUSH
1345: LD_INT 5
1347: PPUSH
1348: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1352: LD_VAR 0 5
1356: PPUSH
1357: LD_VAR 0 4
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: CALL_OW 52
// end else
1370: GO 1393
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1372: LD_VAR 0 5
1376: PPUSH
1377: LD_INT 92
1379: PPUSH
1380: LD_INT 137
1382: PPUSH
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 0
1388: PPUSH
1389: CALL_OW 50
// end ;
1393: GO 995
1395: POP
1396: POP
1397: GO 874
1399: POP
1400: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1401: LD_ADDR_VAR 0 8
1405: PUSH
1406: LD_INT 30
1408: PUSH
1409: LD_INT 32
1411: PUSH
1412: LD_INT 36
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1420: LD_ADDR_VAR 0 2
1424: PUSH
1425: DOUBLE
1426: LD_INT 1
1428: DEC
1429: ST_TO_ADDR
1430: LD_VAR 0 8
1434: PUSH
1435: FOR_TO
1436: IFFALSE 1605
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 1
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 2
1456: PUSH
1457: LD_INT 3
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_OWVAR 67
1470: ARRAY
1471: PUSH
1472: FOR_TO
1473: IFFALSE 1601
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1475: LD_INT 0
1477: PPUSH
1478: LD_INT 7
1480: PUSH
1481: LD_INT 8
1483: PUSH
1484: LD_INT 9
1486: PUSH
1487: LD_INT 10
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_OWVAR 67
1500: ARRAY
1501: PPUSH
1502: CALL_OW 381
// un := CreateHuman ;
1506: LD_ADDR_VAR 0 5
1510: PUSH
1511: CALL_OW 44
1515: ST_TO_ADDR
// if j mod 2 = 0 then
1516: LD_VAR 0 3
1520: PUSH
1521: LD_INT 2
1523: MOD
1524: PUSH
1525: LD_INT 0
1527: EQUAL
1528: IFFALSE 1542
// SetClass ( un , class_sniper ) ;
1530: LD_VAR 0 5
1534: PPUSH
1535: LD_INT 5
1537: PPUSH
1538: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1542: LD_ADDR_EXP 33
1546: PUSH
1547: LD_EXP 33
1551: PPUSH
1552: LD_VAR 0 5
1556: PPUSH
1557: CALL 56838 0 2
1561: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1562: LD_VAR 0 5
1566: PPUSH
1567: LD_VAR 0 8
1571: PUSH
1572: LD_VAR 0 2
1576: ARRAY
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: CALL_OW 49
// SetTag ( un , i ) ;
1585: LD_VAR 0 5
1589: PPUSH
1590: LD_VAR 0 2
1594: PPUSH
1595: CALL_OW 109
// end ;
1599: GO 1472
1601: POP
1602: POP
// end ;
1603: GO 1435
1605: POP
1606: POP
// end ;
1607: LD_VAR 0 1
1611: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1612: LD_EXP 3
1616: PUSH
1617: LD_EXP 25
1621: PPUSH
1622: CALL 21251 0 1
1626: AND
1627: IFFALSE 3995
1629: GO 1631
1631: DISABLE
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
1636: PPUSH
1637: PPUSH
1638: PPUSH
1639: PPUSH
1640: PPUSH
1641: PPUSH
1642: PPUSH
1643: PPUSH
1644: PPUSH
1645: PPUSH
1646: PPUSH
1647: PPUSH
1648: PPUSH
1649: PPUSH
1650: PPUSH
1651: PPUSH
// begin enable ;
1652: ENABLE
// side := 1 ;
1653: LD_ADDR_VAR 0 5
1657: PUSH
1658: LD_INT 1
1660: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1661: LD_ADDR_VAR 0 3
1665: PUSH
1666: LD_INT 22
1668: PUSH
1669: LD_VAR 0 5
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 33
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 50
1690: PUSH
1691: EMPTY
1692: LIST
1693: PUSH
1694: LD_INT 3
1696: PUSH
1697: LD_INT 61
1699: PUSH
1700: EMPTY
1701: LIST
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 69
1717: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1718: LD_VAR 0 3
1722: PUSH
1723: LD_INT 22
1725: PUSH
1726: LD_VAR 0 5
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 50
1737: PUSH
1738: EMPTY
1739: LIST
1740: PUSH
1741: LD_INT 30
1743: PUSH
1744: LD_INT 36
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PPUSH
1756: CALL_OW 69
1760: PPUSH
1761: CALL 21251 0 1
1765: AND
1766: IFFALSE 1794
// for i in remote do
1768: LD_ADDR_VAR 0 1
1772: PUSH
1773: LD_VAR 0 3
1777: PUSH
1778: FOR_IN
1779: IFFALSE 1792
// Connect ( i ) ;
1781: LD_VAR 0 1
1785: PPUSH
1786: CALL 27457 0 1
1790: GO 1778
1792: POP
1793: POP
// if amTech then
1794: LD_EXP 26
1798: IFFALSE 1954
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1800: LD_ADDR_VAR 0 6
1804: PUSH
1805: LD_INT 22
1807: PUSH
1808: LD_VAR 0 5
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: LD_INT 50
1819: PUSH
1820: EMPTY
1821: LIST
1822: PUSH
1823: LD_INT 2
1825: PUSH
1826: LD_INT 30
1828: PUSH
1829: LD_INT 6
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 30
1838: PUSH
1839: LD_INT 7
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 30
1848: PUSH
1849: LD_INT 8
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: PPUSH
1867: CALL_OW 69
1871: ST_TO_ADDR
// if lab then
1872: LD_VAR 0 6
1876: IFFALSE 1954
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
1878: LD_VAR 0 6
1882: PUSH
1883: LD_INT 1
1885: ARRAY
1886: PPUSH
1887: CALL_OW 461
1891: PUSH
1892: LD_INT 2
1894: EQUAL
1895: IFFALSE 1954
// begin for i in amTech do
1897: LD_ADDR_VAR 0 1
1901: PUSH
1902: LD_EXP 26
1906: PUSH
1907: FOR_IN
1908: IFFALSE 1952
// if CanBeResearched ( lab [ 1 ] , i ) then
1910: LD_VAR 0 6
1914: PUSH
1915: LD_INT 1
1917: ARRAY
1918: PPUSH
1919: LD_VAR 0 1
1923: PPUSH
1924: CALL_OW 430
1928: IFFALSE 1950
// begin ComResearch ( lab [ 1 ] , i ) ;
1930: LD_VAR 0 6
1934: PUSH
1935: LD_INT 1
1937: ARRAY
1938: PPUSH
1939: LD_VAR 0 1
1943: PPUSH
1944: CALL_OW 124
// break ;
1948: GO 1952
// end ;
1950: GO 1907
1952: POP
1953: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
1954: LD_ADDR_VAR 0 16
1958: PUSH
1959: LD_INT 1
1961: PPUSH
1962: LD_INT 22
1964: PUSH
1965: LD_VAR 0 5
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 30
1976: PUSH
1977: LD_INT 3
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 50
1986: PUSH
1987: EMPTY
1988: LIST
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 70
1999: ST_TO_ADDR
// if fac then
2000: LD_VAR 0 16
2004: IFFALSE 2270
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2006: LD_VAR 0 16
2010: PUSH
2011: LD_INT 1
2013: ARRAY
2014: PPUSH
2015: CALL_OW 461
2019: PUSH
2020: LD_INT 2
2022: EQUAL
2023: IFFALSE 2270
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2025: LD_ADDR_VAR 0 17
2029: PUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 30
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 30
2048: PUSH
2049: LD_INT 33
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: PUSH
2061: LD_INT 35
2063: PUSH
2064: LD_INT 0
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PPUSH
2075: CALL_OW 70
2079: ST_TO_ADDR
// if emptyTowers then
2080: LD_VAR 0 17
2084: IFFALSE 2132
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2086: LD_ADDR_VAR 0 18
2090: PUSH
2091: LD_VAR 0 17
2095: PUSH
2096: LD_INT 1
2098: ARRAY
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: CALL 29496 0 2
2107: ST_TO_ADDR
// if weapon then
2108: LD_VAR 0 18
2112: IFFALSE 2132
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2114: LD_VAR 0 17
2118: PUSH
2119: LD_INT 1
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 18
2127: PPUSH
2128: CALL_OW 148
// end ; if amConstructList then
2132: LD_EXP 27
2136: IFFALSE 2270
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2138: LD_VAR 0 16
2142: PUSH
2143: LD_INT 1
2145: ARRAY
2146: PPUSH
2147: LD_EXP 27
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: LD_EXP 27
2164: PUSH
2165: LD_INT 1
2167: ARRAY
2168: PUSH
2169: LD_INT 2
2171: ARRAY
2172: PPUSH
2173: LD_EXP 27
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PUSH
2182: LD_INT 3
2184: ARRAY
2185: PPUSH
2186: LD_EXP 27
2190: PUSH
2191: LD_INT 1
2193: ARRAY
2194: PUSH
2195: LD_INT 4
2197: ARRAY
2198: PPUSH
2199: CALL_OW 448
2203: IFFALSE 2270
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2205: LD_VAR 0 16
2209: PUSH
2210: LD_INT 1
2212: ARRAY
2213: PPUSH
2214: LD_EXP 27
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PUSH
2223: LD_INT 1
2225: ARRAY
2226: PPUSH
2227: LD_EXP 27
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PUSH
2236: LD_INT 2
2238: ARRAY
2239: PPUSH
2240: LD_EXP 27
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PPUSH
2253: LD_EXP 27
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PUSH
2262: LD_INT 4
2264: ARRAY
2265: PPUSH
2266: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2270: LD_ADDR_VAR 0 2
2274: PUSH
2275: LD_INT 1
2277: PPUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 1000
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 70
2327: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_INT 13
2335: PPUSH
2336: CALL_OW 435
2340: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2341: LD_ADDR_VAR 0 11
2345: PUSH
2346: LD_EXP 25
2350: PPUSH
2351: LD_INT 25
2353: PUSH
2354: LD_INT 4
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 50
2363: PUSH
2364: EMPTY
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PPUSH
2371: CALL_OW 72
2375: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2376: LD_ADDR_VAR 0 6
2380: PUSH
2381: LD_INT 1
2383: PPUSH
2384: LD_INT 2
2386: PUSH
2387: LD_INT 30
2389: PUSH
2390: LD_INT 6
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 30
2399: PUSH
2400: LD_INT 7
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 30
2409: PUSH
2410: LD_INT 8
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: PPUSH
2423: CALL_OW 70
2427: ST_TO_ADDR
// if sci then
2428: LD_VAR 0 11
2432: IFFALSE 2591
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2434: LD_ADDR_VAR 0 13
2438: PUSH
2439: LD_EXP 25
2443: PPUSH
2444: LD_INT 95
2446: PUSH
2447: LD_INT 1
2449: PUSH
2450: EMPTY
2451: LIST
2452: LIST
2453: PUSH
2454: LD_INT 120
2456: PUSH
2457: LD_INT 1
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PPUSH
2468: CALL_OW 72
2472: ST_TO_ADDR
// if hurtUnits then
2473: LD_VAR 0 13
2477: IFFALSE 2538
// begin for i in sci do
2479: LD_ADDR_VAR 0 1
2483: PUSH
2484: LD_VAR 0 11
2488: PUSH
2489: FOR_IN
2490: IFFALSE 2534
// if IsInUnit ( i ) then
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 310
2501: IFFALSE 2514
// ComExitBuilding ( i ) else
2503: LD_VAR 0 1
2507: PPUSH
2508: CALL_OW 122
2512: GO 2532
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2514: LD_VAR 0 1
2518: PPUSH
2519: LD_VAR 0 13
2523: PUSH
2524: LD_INT 1
2526: ARRAY
2527: PPUSH
2528: CALL_OW 128
2532: GO 2489
2534: POP
2535: POP
// end else
2536: GO 2591
// if lab then
2538: LD_VAR 0 6
2542: IFFALSE 2591
// begin for i in sci do
2544: LD_ADDR_VAR 0 1
2548: PUSH
2549: LD_VAR 0 11
2553: PUSH
2554: FOR_IN
2555: IFFALSE 2589
// if not IsInUnit ( i ) then
2557: LD_VAR 0 1
2561: PPUSH
2562: CALL_OW 310
2566: NOT
2567: IFFALSE 2587
// ComEnterUnit ( i , lab [ 1 ] ) ;
2569: LD_VAR 0 1
2573: PPUSH
2574: LD_VAR 0 6
2578: PUSH
2579: LD_INT 1
2581: ARRAY
2582: PPUSH
2583: CALL_OW 120
2587: GO 2554
2589: POP
2590: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2591: LD_ADDR_VAR 0 7
2595: PUSH
2596: LD_EXP 25
2600: PPUSH
2601: LD_INT 25
2603: PUSH
2604: LD_INT 2
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PPUSH
2611: CALL_OW 72
2615: ST_TO_ADDR
// if eng then
2616: LD_VAR 0 7
2620: IFFALSE 3395
// begin for i in eng do
2622: LD_ADDR_VAR 0 1
2626: PUSH
2627: LD_VAR 0 7
2631: PUSH
2632: FOR_IN
2633: IFFALSE 3393
// begin tag := GetTag ( i ) ;
2635: LD_ADDR_VAR 0 8
2639: PUSH
2640: LD_VAR 0 1
2644: PPUSH
2645: CALL_OW 110
2649: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL_OW 256
2659: PUSH
2660: LD_INT 800
2662: LESS
2663: PUSH
2664: LD_VAR 0 8
2668: PUSH
2669: LD_INT 1
2671: NONEQUAL
2672: AND
2673: IFFALSE 2723
// begin SetTag ( i , tHeal ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: LD_EXP 28
2696: PUSH
2697: LD_INT 1
2699: ARRAY
2700: PPUSH
2701: LD_EXP 28
2705: PUSH
2706: LD_INT 2
2708: ARRAY
2709: PPUSH
2710: CALL_OW 111
// AddComHold ( i ) ;
2714: LD_VAR 0 1
2718: PPUSH
2719: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2723: LD_VAR 0 8
2727: PUSH
2728: LD_INT 1
2730: EQUAL
2731: PUSH
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 256
2741: PUSH
2742: LD_INT 1000
2744: EQUAL
2745: AND
2746: IFFALSE 2760
// SetTag ( i , 0 ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_INT 0
2755: PPUSH
2756: CALL_OW 109
// if not tag then
2760: LD_VAR 0 8
2764: NOT
2765: IFFALSE 2933
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2767: LD_ADDR_VAR 0 4
2771: PUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 57
2777: PUSH
2778: EMPTY
2779: LIST
2780: PPUSH
2781: CALL_OW 70
2785: ST_TO_ADDR
// if undone then
2786: LD_VAR 0 4
2790: IFFALSE 2812
// begin ComComplete ( i , undone [ 1 ] ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 1
2804: ARRAY
2805: PPUSH
2806: CALL 27349 0 2
// continue ;
2810: GO 2632
// end ; if cr or tmp or Count ( amBuildings ) then
2812: LD_VAR 0 10
2816: PUSH
2817: LD_VAR 0 2
2821: OR
2822: PUSH
2823: LD_EXP 29
2827: PPUSH
2828: CALL 21251 0 1
2832: OR
2833: IFFALSE 2909
// begin if IsInUnit ( i ) then
2835: LD_VAR 0 1
2839: PPUSH
2840: CALL_OW 310
2844: IFFALSE 2855
// ComExitBuilding ( i ) ;
2846: LD_VAR 0 1
2850: PPUSH
2851: CALL_OW 122
// if tmp then
2855: LD_VAR 0 2
2859: IFFALSE 2875
// SetTag ( i , tRepair ) else
2861: LD_VAR 0 1
2865: PPUSH
2866: LD_INT 3
2868: PPUSH
2869: CALL_OW 109
2873: GO 2907
// if cr then
2875: LD_VAR 0 10
2879: IFFALSE 2895
// SetTag ( i , tCrates ) else
2881: LD_VAR 0 1
2885: PPUSH
2886: LD_INT 2
2888: PPUSH
2889: CALL_OW 109
2893: GO 2907
// SetTag ( i , tBuild ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 5
2902: PPUSH
2903: CALL_OW 109
// end else
2907: GO 2933
// if not IsInUnit ( i ) then
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL_OW 310
2918: NOT
2919: IFFALSE 2933
// ComEnterUnit ( i , amBase ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: CALL_OW 120
// end ; if tag = tRepair then
2933: LD_VAR 0 8
2937: PUSH
2938: LD_INT 3
2940: EQUAL
2941: IFFALSE 3043
// begin if IsInUnit ( i ) then
2943: LD_VAR 0 1
2947: PPUSH
2948: CALL_OW 310
2952: IFFALSE 2965
// begin ComExitBuilding ( i ) ;
2954: LD_VAR 0 1
2958: PPUSH
2959: CALL_OW 122
// continue ;
2963: GO 2632
// end ; if not tmp then
2965: LD_VAR 0 2
2969: NOT
2970: IFFALSE 2986
// begin SetTag ( i , 0 ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 109
// continue ;
2984: GO 2632
// end ; if not HasTask ( i ) then
2986: LD_VAR 0 1
2990: PPUSH
2991: CALL_OW 314
2995: NOT
2996: IFFALSE 3016
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_VAR 0 2
3007: PUSH
3008: LD_INT 1
3010: ARRAY
3011: PPUSH
3012: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3016: LD_VAR 0 1
3020: PPUSH
3021: LD_INT 1
3023: PPUSH
3024: CALL_OW 308
3028: NOT
3029: IFFALSE 3043
// ComMoveToArea ( i , amBaseArea ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 1
3038: PPUSH
3039: CALL_OW 113
// end ; if tag = tBuild then
3043: LD_VAR 0 8
3047: PUSH
3048: LD_INT 5
3050: EQUAL
3051: IFFALSE 3246
// begin if IsInUnit ( i ) then
3053: LD_VAR 0 1
3057: PPUSH
3058: CALL_OW 310
3062: IFFALSE 3075
// begin ComExitBuilding ( i ) ;
3064: LD_VAR 0 1
3068: PPUSH
3069: CALL_OW 122
// continue ;
3073: GO 2632
// end ; if not Count ( amBuildings ) then
3075: LD_EXP 29
3079: PPUSH
3080: CALL 21251 0 1
3084: NOT
3085: IFFALSE 3103
// begin SetTag ( i , 0 ) ;
3087: LD_VAR 0 1
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 109
// continue ;
3099: GO 2632
// end else
3101: GO 3140
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3103: LD_INT 2
3105: PPUSH
3106: LD_EXP 29
3110: PUSH
3111: LD_INT 1
3113: ARRAY
3114: PUSH
3115: LD_INT 1
3117: ARRAY
3118: PPUSH
3119: CALL 10109 0 2
3123: NOT
3124: IFFALSE 3140
// begin SetTag ( i , 0 ) ;
3126: LD_VAR 0 1
3130: PPUSH
3131: LD_INT 0
3133: PPUSH
3134: CALL_OW 109
// continue ;
3138: GO 2632
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3140: LD_ADDR_VAR 0 4
3144: PUSH
3145: LD_INT 1
3147: PPUSH
3148: LD_INT 57
3150: PUSH
3151: EMPTY
3152: LIST
3153: PPUSH
3154: CALL_OW 70
3158: ST_TO_ADDR
// if undone then
3159: LD_VAR 0 4
3163: IFFALSE 3185
// begin ComComplete ( i , undone [ 1 ] ) ;
3165: LD_VAR 0 1
3169: PPUSH
3170: LD_VAR 0 4
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: CALL 27349 0 2
// continue ;
3183: GO 2632
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3185: LD_VAR 0 1
3189: PPUSH
3190: LD_EXP 29
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PUSH
3199: LD_INT 1
3201: ARRAY
3202: PPUSH
3203: LD_EXP 29
3207: PUSH
3208: LD_INT 1
3210: ARRAY
3211: PUSH
3212: LD_INT 2
3214: ARRAY
3215: PPUSH
3216: LD_EXP 29
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PUSH
3225: LD_INT 3
3227: ARRAY
3228: PPUSH
3229: LD_EXP 29
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PUSH
3238: LD_INT 4
3240: ARRAY
3241: PPUSH
3242: CALL_OW 145
// end ; if tag = tCrates then
3246: LD_VAR 0 8
3250: PUSH
3251: LD_INT 2
3253: EQUAL
3254: IFFALSE 3391
// begin if IsInUnit ( i ) then
3256: LD_VAR 0 1
3260: PPUSH
3261: CALL_OW 310
3265: IFFALSE 3278
// begin ComExitBuilding ( i ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 122
// continue ;
3276: GO 2632
// end ; if not cr then
3278: LD_VAR 0 10
3282: NOT
3283: IFFALSE 3299
// begin SetTag ( i , 0 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 109
// continue ;
3297: GO 2632
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3299: LD_VAR 0 1
3303: PPUSH
3304: CALL_OW 314
3308: NOT
3309: PUSH
3310: LD_INT 81
3312: PUSH
3313: LD_VAR 0 5
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 92
3324: PUSH
3325: LD_VAR 0 10
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PUSH
3334: LD_VAR 0 10
3338: PUSH
3339: LD_INT 2
3341: ARRAY
3342: PUSH
3343: LD_INT 12
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: NOT
3361: AND
3362: IFFALSE 3391
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_VAR 0 10
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 10
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: CALL_OW 117
// end ; end ;
3391: GO 2632
3393: POP
3394: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3395: LD_ADDR_VAR 0 12
3399: PUSH
3400: LD_EXP 25
3404: PPUSH
3405: LD_INT 2
3407: PUSH
3408: LD_INT 25
3410: PUSH
3411: LD_INT 1
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: LD_INT 25
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 50
3435: PUSH
3436: EMPTY
3437: LIST
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: PUSH
3448: LD_EXP 31
3452: UNION
3453: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3454: LD_ADDR_VAR 0 14
3458: PUSH
3459: LD_INT 1
3461: PPUSH
3462: LD_INT 81
3464: PUSH
3465: LD_VAR 0 5
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 70
3478: ST_TO_ADDR
// if sol then
3479: LD_VAR 0 12
3483: IFFALSE 3995
// begin if enemyInBase then
3485: LD_VAR 0 14
3489: IFFALSE 3634
// begin for i in sol do
3491: LD_ADDR_VAR 0 1
3495: PUSH
3496: LD_VAR 0 12
3500: PUSH
3501: FOR_IN
3502: IFFALSE 3630
// begin tw := IsInUnit ( i ) ;
3504: LD_ADDR_VAR 0 9
3508: PUSH
3509: LD_VAR 0 1
3513: PPUSH
3514: CALL_OW 310
3518: ST_TO_ADDR
// if tw then
3519: LD_VAR 0 9
3523: IFFALSE 3604
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3525: LD_VAR 0 9
3529: PUSH
3530: LD_INT 22
3532: PUSH
3533: LD_VAR 0 5
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 101
3544: PUSH
3545: LD_INT 2
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 2
3554: PUSH
3555: LD_INT 30
3557: PUSH
3558: LD_INT 32
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 30
3567: PUSH
3568: LD_INT 31
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 69
3589: IN
3590: NOT
3591: IFFALSE 3602
// ComExitBuilding ( i ) ;
3593: LD_VAR 0 1
3597: PPUSH
3598: CALL_OW 122
// end else
3602: GO 3628
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_VAR 0 14
3613: PPUSH
3614: LD_VAR 0 1
3618: PPUSH
3619: CALL_OW 74
3623: PPUSH
3624: CALL_OW 115
// end ;
3628: GO 3501
3630: POP
3631: POP
// end else
3632: GO 3995
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3634: LD_ADDR_VAR 0 15
3638: PUSH
3639: LD_INT 1
3641: PPUSH
3642: LD_INT 3
3644: PUSH
3645: LD_INT 62
3647: PUSH
3648: EMPTY
3649: LIST
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 2
3657: PUSH
3658: LD_INT 30
3660: PUSH
3661: LD_INT 32
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 30
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 5
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: LD_INT 30
3690: PUSH
3691: LD_INT 31
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PPUSH
3709: CALL_OW 70
3713: ST_TO_ADDR
// if empty then
3714: LD_VAR 0 15
3718: IFFALSE 3735
// empty := ReverseArray ( empty ) ;
3720: LD_ADDR_VAR 0 15
3724: PUSH
3725: LD_VAR 0 15
3729: PPUSH
3730: CALL 52127 0 1
3734: ST_TO_ADDR
// for i in sol do
3735: LD_ADDR_VAR 0 1
3739: PUSH
3740: LD_VAR 0 12
3744: PUSH
3745: FOR_IN
3746: IFFALSE 3993
// begin tag := GetTag ( i ) ;
3748: LD_ADDR_VAR 0 8
3752: PUSH
3753: LD_VAR 0 1
3757: PPUSH
3758: CALL_OW 110
3762: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3763: LD_VAR 0 1
3767: PPUSH
3768: CALL_OW 256
3772: PUSH
3773: LD_INT 1000
3775: LESS
3776: PUSH
3777: LD_VAR 0 8
3781: PUSH
3782: LD_INT 1
3784: NONEQUAL
3785: AND
3786: IFFALSE 3838
// begin SetTag ( i , tHeal ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3800: LD_VAR 0 1
3804: PPUSH
3805: LD_EXP 28
3809: PUSH
3810: LD_INT 1
3812: ARRAY
3813: PPUSH
3814: LD_EXP 28
3818: PUSH
3819: LD_INT 2
3821: ARRAY
3822: PPUSH
3823: CALL_OW 111
// AddComHold ( i ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: CALL_OW 200
// continue ;
3836: GO 3745
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 256
3847: PUSH
3848: LD_INT 1000
3850: EQUAL
3851: PUSH
3852: LD_VAR 0 8
3856: PUSH
3857: LD_INT 1
3859: EQUAL
3860: AND
3861: IFFALSE 3877
// begin SetTag ( i , 0 ) ;
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 109
// continue ;
3875: GO 3745
// end ; if HasTask ( i ) then
3877: LD_VAR 0 1
3881: PPUSH
3882: CALL_OW 314
3886: IFFALSE 3890
// continue ;
3888: GO 3745
// if not IsInUnit ( i ) and not tag and empty then
3890: LD_VAR 0 1
3894: PPUSH
3895: CALL_OW 310
3899: NOT
3900: PUSH
3901: LD_VAR 0 8
3905: NOT
3906: AND
3907: PUSH
3908: LD_VAR 0 15
3912: AND
3913: IFFALSE 3991
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
3915: LD_VAR 0 1
3919: PPUSH
3920: LD_VAR 0 15
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: PPUSH
3929: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
3933: LD_VAR 0 15
3937: PUSH
3938: LD_INT 1
3940: ARRAY
3941: PPUSH
3942: CALL_OW 266
3946: PUSH
3947: LD_INT 5
3949: EQUAL
3950: PUSH
3951: LD_INT 50
3953: PPUSH
3954: CALL_OW 13
3958: AND
3959: IFFALSE 3973
// AddComChangeProfession ( i , class_sniper ) ;
3961: LD_VAR 0 1
3965: PPUSH
3966: LD_INT 5
3968: PPUSH
3969: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
3973: LD_ADDR_VAR 0 15
3977: PUSH
3978: LD_VAR 0 15
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: CALL_OW 3
3990: ST_TO_ADDR
// end ; end ;
3991: GO 3745
3993: POP
3994: POP
// end ; end ; end ;
3995: PPOPN 18
3997: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
3998: LD_EXP 32
4002: PPUSH
4003: CALL_OW 302
4007: PUSH
4008: LD_EXP 3
4012: AND
4013: IFFALSE 4295
4015: GO 4017
4017: DISABLE
4018: LD_INT 0
4020: PPUSH
4021: PPUSH
// begin enable ;
4022: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4023: LD_ADDR_VAR 0 2
4027: PUSH
4028: LD_INT 1
4030: PPUSH
4031: LD_INT 81
4033: PUSH
4034: LD_INT 1
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: LD_INT 50
4043: PUSH
4044: EMPTY
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PPUSH
4051: CALL_OW 70
4055: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4056: LD_ADDR_VAR 0 1
4060: PUSH
4061: LD_INT 17
4063: PPUSH
4064: CALL_OW 435
4068: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4069: LD_EXP 32
4073: PPUSH
4074: CALL_OW 261
4078: PUSH
4079: LD_INT 10
4081: LESS
4082: PUSH
4083: LD_INT 2
4085: PPUSH
4086: LD_EXP 32
4090: PPUSH
4091: CALL_OW 292
4095: NOT
4096: AND
4097: PUSH
4098: LD_EXP 32
4102: PPUSH
4103: CALL_OW 262
4107: PUSH
4108: LD_INT 1
4110: EQUAL
4111: AND
4112: IFFALSE 4126
// SetFuel ( amCargo , 100 ) ;
4114: LD_EXP 32
4118: PPUSH
4119: LD_INT 100
4121: PPUSH
4122: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4126: LD_EXP 32
4130: PPUSH
4131: CALL_OW 314
4135: NOT
4136: PUSH
4137: LD_EXP 32
4141: PPUSH
4142: LD_INT 1
4144: PPUSH
4145: CALL_OW 289
4149: PUSH
4150: LD_INT 100
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 2
4159: NOT
4160: AND
4161: IFFALSE 4227
// begin if cr then
4163: LD_VAR 0 1
4167: IFFALSE 4198
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4169: LD_EXP 32
4173: PPUSH
4174: LD_VAR 0 1
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: LD_VAR 0 1
4187: PUSH
4188: LD_INT 2
4190: ARRAY
4191: PPUSH
4192: CALL_OW 117
4196: GO 4225
// if not IsInArea ( amCargo , cratesWestArea ) then
4198: LD_EXP 32
4202: PPUSH
4203: LD_INT 17
4205: PPUSH
4206: CALL_OW 308
4210: NOT
4211: IFFALSE 4225
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4213: LD_EXP 32
4217: PPUSH
4218: LD_INT 17
4220: PPUSH
4221: CALL_OW 113
// exit ;
4225: GO 4295
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4227: LD_VAR 0 2
4231: PUSH
4232: LD_EXP 32
4236: PPUSH
4237: LD_INT 1
4239: PPUSH
4240: CALL_OW 308
4244: NOT
4245: AND
4246: IFFALSE 4265
// ComMoveXY ( amCargo , 93 , 137 ) else
4248: LD_EXP 32
4252: PPUSH
4253: LD_INT 93
4255: PPUSH
4256: LD_INT 137
4258: PPUSH
4259: CALL_OW 111
4263: GO 4295
// if GetCargo ( amCargo , mat_cans ) = 100 then
4265: LD_EXP 32
4269: PPUSH
4270: LD_INT 1
4272: PPUSH
4273: CALL_OW 289
4277: PUSH
4278: LD_INT 100
4280: EQUAL
4281: IFFALSE 4295
// ComGive ( amCargo , amBase ) ;
4283: LD_EXP 32
4287: PPUSH
4288: LD_INT 2
4290: PPUSH
4291: CALL_OW 161
// end ;
4295: PPOPN 2
4297: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4298: LD_EXP 3
4302: PUSH
4303: LD_INT 22
4305: PUSH
4306: LD_INT 1
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: LD_INT 60
4318: PUSH
4319: EMPTY
4320: LIST
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 50
4328: PUSH
4329: EMPTY
4330: LIST
4331: PUSH
4332: LD_INT 34
4334: PUSH
4335: LD_INT 13
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PPUSH
4348: CALL_OW 69
4352: AND
4353: PUSH
4354: LD_INT 22
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: LD_INT 24
4369: PUSH
4370: LD_INT 1000
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 21
4383: PUSH
4384: LD_INT 3
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: AND
4401: IFFALSE 4634
4403: GO 4405
4405: DISABLE
4406: LD_INT 0
4408: PPUSH
4409: PPUSH
4410: PPUSH
// begin enable ;
4411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4412: LD_ADDR_VAR 0 2
4416: PUSH
4417: LD_INT 22
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: LD_INT 24
4432: PUSH
4433: LD_INT 1000
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 21
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: LIST
4458: PPUSH
4459: CALL_OW 69
4463: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4464: LD_ADDR_VAR 0 3
4468: PUSH
4469: LD_INT 22
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: LD_INT 3
4481: PUSH
4482: LD_INT 24
4484: PUSH
4485: LD_INT 600
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PPUSH
4511: CALL_OW 69
4515: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4516: LD_ADDR_VAR 0 1
4520: PUSH
4521: LD_INT 22
4523: PUSH
4524: LD_INT 1
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 3
4533: PUSH
4534: LD_INT 60
4536: PUSH
4537: EMPTY
4538: LIST
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 50
4546: PUSH
4547: EMPTY
4548: LIST
4549: PUSH
4550: LD_INT 34
4552: PUSH
4553: LD_INT 13
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PPUSH
4566: CALL_OW 69
4570: PUSH
4571: FOR_IN
4572: IFFALSE 4632
// begin if tmp2 then
4574: LD_VAR 0 3
4578: IFFALSE 4606
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_VAR 0 3
4589: PPUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 74
4599: PPUSH
4600: CALL_OW 130
4604: GO 4630
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4606: LD_VAR 0 1
4610: PPUSH
4611: LD_VAR 0 2
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 74
4625: PPUSH
4626: CALL_OW 130
// end ;
4630: GO 4571
4632: POP
4633: POP
// end ;
4634: PPOPN 3
4636: END
// every 0 0$2 trigger amPatrol and gameActive do var i , j , points , x , y , tag , enemy ;
4637: LD_EXP 33
4641: PUSH
4642: LD_EXP 19
4646: AND
4647: IFFALSE 4972
4649: GO 4651
4651: DISABLE
4652: LD_INT 0
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
// begin enable ;
4661: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: LD_INT 30
4669: PUSH
4670: LD_INT 31
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 32
4679: PUSH
4680: LD_INT 33
4682: PUSH
4683: LD_INT 34
4685: PUSH
4686: LD_INT 35
4688: PUSH
4689: LD_INT 33
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 36
4701: PUSH
4702: LD_INT 37
4704: PUSH
4705: LD_INT 38
4707: PUSH
4708: LD_INT 39
4710: PUSH
4711: LD_INT 40
4713: PUSH
4714: LD_INT 41
4716: PUSH
4717: LD_INT 42
4719: PUSH
4720: LD_INT 43
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: ST_TO_ADDR
// for i in amPatrol do
4738: LD_ADDR_VAR 0 1
4742: PUSH
4743: LD_EXP 33
4747: PUSH
4748: FOR_IN
4749: IFFALSE 4970
// begin if See ( 2 , i ) then
4751: LD_INT 2
4753: PPUSH
4754: LD_VAR 0 1
4758: PPUSH
4759: CALL_OW 292
4763: IFFALSE 4866
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4765: LD_ADDR_VAR 0 7
4769: PUSH
4770: LD_INT 22
4772: PUSH
4773: LD_INT 2
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PPUSH
4780: CALL_OW 69
4784: PPUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: CALL_OW 74
4794: ST_TO_ADDR
// if enemy then
4795: LD_VAR 0 7
4799: IFFALSE 4866
// begin x := GetX ( enemy ) ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_VAR 0 7
4810: PPUSH
4811: CALL_OW 250
4815: ST_TO_ADDR
// y := GetY ( enemy ) ;
4816: LD_ADDR_VAR 0 5
4820: PUSH
4821: LD_VAR 0 7
4825: PPUSH
4826: CALL_OW 251
4830: ST_TO_ADDR
// if ValidHex ( x , y ) then
4831: LD_VAR 0 4
4835: PPUSH
4836: LD_VAR 0 5
4840: PPUSH
4841: CALL_OW 488
4845: IFFALSE 4866
// ComAgressiveMove ( i , x , y ) ;
4847: LD_VAR 0 1
4851: PPUSH
4852: LD_VAR 0 4
4856: PPUSH
4857: LD_VAR 0 5
4861: PPUSH
4862: CALL_OW 114
// end ; end ; if HasTask ( i ) then
4866: LD_VAR 0 1
4870: PPUSH
4871: CALL_OW 314
4875: IFFALSE 4879
// continue ;
4877: GO 4748
// tag := GetTag ( i ) ;
4879: LD_ADDR_VAR 0 6
4883: PUSH
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 110
4893: ST_TO_ADDR
// for j := 1 to points [ tag ] do
4894: LD_ADDR_VAR 0 2
4898: PUSH
4899: DOUBLE
4900: LD_INT 1
4902: DEC
4903: ST_TO_ADDR
4904: LD_VAR 0 3
4908: PUSH
4909: LD_VAR 0 6
4913: ARRAY
4914: PUSH
4915: FOR_TO
4916: IFFALSE 4966
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
4918: LD_VAR 0 1
4922: PPUSH
4923: LD_VAR 0 3
4927: PUSH
4928: LD_VAR 0 6
4932: ARRAY
4933: PUSH
4934: LD_VAR 0 2
4938: ARRAY
4939: PPUSH
4940: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 175
4951: PPUSH
4952: LD_INT 385
4954: PPUSH
4955: CALL_OW 12
4959: PPUSH
4960: CALL_OW 202
// end ;
4964: GO 4915
4966: POP
4967: POP
// end ;
4968: GO 4748
4970: POP
4971: POP
// end ;
4972: PPOPN 7
4974: END
// every 6 6$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican do var i , parts , part ;
4975: LD_EXP 30
4979: PPUSH
4980: CALL 21251 0 1
4984: PUSH
4985: LD_INT 5
4987: LESS
4988: PUSH
4989: LD_EXP 3
4993: AND
4994: PUSH
4995: LD_EXP 8
4999: AND
5000: IFFALSE 5194
5002: GO 5004
5004: DISABLE
5005: LD_INT 0
5007: PPUSH
5008: PPUSH
5009: PPUSH
// begin enable ;
5010: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: LD_INT 9
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 4
5028: PUSH
5029: LD_INT 9
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 6
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 3
5048: PUSH
5049: LD_INT 5
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: LD_INT 4
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PUSH
5066: LD_INT 1
5068: PUSH
5069: LD_INT 2
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
5084: LD_ADDR_VAR 0 1
5088: PUSH
5089: DOUBLE
5090: LD_INT 1
5092: DEC
5093: ST_TO_ADDR
5094: LD_INT 4
5096: PUSH
5097: LD_INT 5
5099: PUSH
5100: LD_INT 6
5102: PUSH
5103: LD_INT 6
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: LD_OWVAR 67
5116: ARRAY
5117: PUSH
5118: FOR_TO
5119: IFFALSE 5192
// begin part := parts [ rand ( 1 , parts ) ] ;
5121: LD_ADDR_VAR 0 3
5125: PUSH
5126: LD_VAR 0 2
5130: PUSH
5131: LD_INT 1
5133: PPUSH
5134: LD_VAR 0 2
5138: PPUSH
5139: CALL_OW 12
5143: ARRAY
5144: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5145: LD_ADDR_EXP 27
5149: PUSH
5150: LD_EXP 27
5154: PPUSH
5155: LD_VAR 0 3
5159: PUSH
5160: LD_INT 1
5162: ARRAY
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: LD_INT 2
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PPUSH
5185: CALL 56838 0 2
5189: ST_TO_ADDR
5190: GO 5118
5192: POP
5193: POP
// end ;
5194: PPOPN 3
5196: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) do var i , tmp , tmp2 ;
5197: LD_EXP 11
5201: NOT
5202: PUSH
5203: LD_EXP 30
5207: PPUSH
5208: CALL 21251 0 1
5212: AND
5213: IFFALSE 5422
5215: GO 5217
5217: DISABLE
5218: LD_INT 0
5220: PPUSH
5221: PPUSH
5222: PPUSH
// begin enable ;
5223: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5224: LD_ADDR_VAR 0 2
5228: PUSH
5229: LD_EXP 30
5233: PPUSH
5234: LD_INT 61
5236: PUSH
5237: EMPTY
5238: LIST
5239: PUSH
5240: LD_INT 50
5242: PUSH
5243: EMPTY
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PPUSH
5250: CALL_OW 72
5254: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5255: LD_ADDR_EXP 30
5259: PUSH
5260: LD_EXP 30
5264: PUSH
5265: LD_VAR 0 2
5269: DIFF
5270: ST_TO_ADDR
// if not tmp then
5271: LD_VAR 0 2
5275: NOT
5276: IFFALSE 5280
// exit ;
5278: GO 5422
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5280: LD_ADDR_VAR 0 3
5284: PUSH
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 34
5292: PUSH
5293: LD_INT 2
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 72
5304: ST_TO_ADDR
// if tmp2 then
5305: LD_VAR 0 3
5309: IFFALSE 5326
// ComMoveXY ( tmp2 , 241 , 99 ) ;
5311: LD_VAR 0 3
5315: PPUSH
5316: LD_INT 241
5318: PPUSH
5319: LD_INT 99
5321: PPUSH
5322: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5326: LD_INT 35
5328: PPUSH
5329: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5333: LD_ADDR_VAR 0 2
5337: PUSH
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_INT 50
5345: PUSH
5346: EMPTY
5347: LIST
5348: PPUSH
5349: CALL_OW 72
5353: ST_TO_ADDR
// for i in tmp do
5354: LD_ADDR_VAR 0 1
5358: PUSH
5359: LD_VAR 0 2
5363: PUSH
5364: FOR_IN
5365: IFFALSE 5413
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5367: LD_VAR 0 1
5371: PPUSH
5372: LD_INT 187
5374: PUSH
5375: LD_INT 114
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: LD_INT 203
5384: PUSH
5385: LD_INT 113
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 218
5394: PUSH
5395: LD_INT 108
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL 59442 0 2
5411: GO 5364
5413: POP
5414: POP
// until not tmp ;
5415: LD_VAR 0 2
5419: NOT
5420: IFFALSE 5326
// end ; end_of_file
5422: PPOPN 3
5424: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
// uc_side := 8 ;
5434: LD_ADDR_OWVAR 20
5438: PUSH
5439: LD_INT 8
5441: ST_TO_ADDR
// uc_nation := nation_arabian ;
5442: LD_ADDR_OWVAR 21
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
// legForces := [ ] ;
5450: LD_ADDR_EXP 35
5454: PUSH
5455: EMPTY
5456: ST_TO_ADDR
// legEForces := [ ] ;
5457: LD_ADDR_EXP 36
5461: PUSH
5462: EMPTY
5463: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5464: LD_ADDR_EXP 37
5468: PUSH
5469: LD_INT 8
5471: PPUSH
5472: LD_INT 2
5474: PPUSH
5475: LD_INT 1
5477: PPUSH
5478: CALL 19212 0 3
5482: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5483: LD_ADDR_EXP 38
5487: PUSH
5488: LD_INT 13
5490: PUSH
5491: LD_INT 1
5493: PUSH
5494: LD_INT 2
5496: PUSH
5497: LD_INT 32
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: PUSH
5506: EMPTY
5507: LIST
5508: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5509: LD_ADDR_EXP 39
5513: PUSH
5514: LD_INT 195
5516: PUSH
5517: LD_INT 15
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: ST_TO_ADDR
// legBuildings := [ ] ;
5524: LD_ADDR_EXP 40
5528: PUSH
5529: EMPTY
5530: ST_TO_ADDR
// legTanks := [ ] ;
5531: LD_ADDR_EXP 41
5535: PUSH
5536: EMPTY
5537: ST_TO_ADDR
// legCargo := 0 ;
5538: LD_ADDR_EXP 42
5542: PUSH
5543: LD_INT 0
5545: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5546: LD_ADDR_VAR 0 7
5550: PUSH
5551: LD_INT 219
5553: PUSH
5554: LD_INT 31
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 166
5563: PUSH
5564: LD_INT 31
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: ST_TO_ADDR
// for i in sources do
5575: LD_ADDR_VAR 0 2
5579: PUSH
5580: LD_VAR 0 7
5584: PUSH
5585: FOR_IN
5586: IFFALSE 5615
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
5588: LD_VAR 0 2
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_VAR 0 2
5601: PUSH
5602: LD_INT 2
5604: ARRAY
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 441
5613: GO 5585
5615: POP
5616: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
5617: LD_INT 38
5619: PPUSH
5620: CALL_OW 274
5624: PPUSH
5625: LD_INT 1
5627: PPUSH
5628: LD_INT 650
5630: PPUSH
5631: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
5635: LD_INT 38
5637: PPUSH
5638: CALL_OW 274
5642: PPUSH
5643: LD_INT 2
5645: PPUSH
5646: LD_INT 120
5648: PPUSH
5649: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
5653: LD_INT 38
5655: PPUSH
5656: CALL_OW 274
5660: PPUSH
5661: LD_INT 3
5663: PPUSH
5664: LD_INT 50
5666: PPUSH
5667: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5671: LD_ADDR_VAR 0 6
5675: PUSH
5676: LD_INT 6
5678: PUSH
5679: LD_INT 7
5681: PUSH
5682: LD_INT 8
5684: PUSH
5685: LD_INT 9
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: PUSH
5694: LD_OWVAR 67
5698: ARRAY
5699: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
5700: LD_ADDR_EXP 34
5704: PUSH
5705: LD_STRING Farmer
5707: PPUSH
5708: LD_INT 0
5710: PPUSH
5711: LD_STRING 
5713: PPUSH
5714: CALL 19149 0 3
5718: ST_TO_ADDR
// for i := 1 to 4 do
5719: LD_ADDR_VAR 0 2
5723: PUSH
5724: DOUBLE
5725: LD_INT 1
5727: DEC
5728: ST_TO_ADDR
5729: LD_INT 4
5731: PUSH
5732: FOR_TO
5733: IFFALSE 6250
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
5735: LD_ADDR_VAR 0 3
5739: PUSH
5740: DOUBLE
5741: LD_INT 1
5743: DEC
5744: ST_TO_ADDR
5745: LD_INT 7
5747: PUSH
5748: LD_INT 8
5750: PUSH
5751: LD_INT 9
5753: PUSH
5754: LD_INT 11
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: PUSH
5763: LD_OWVAR 67
5767: ARRAY
5768: PUSH
5769: LD_INT 3
5771: PUSH
5772: LD_INT 4
5774: PUSH
5775: LD_INT 5
5777: PUSH
5778: LD_INT 5
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: PUSH
5787: LD_OWVAR 67
5791: ARRAY
5792: PUSH
5793: LD_INT 3
5795: PUSH
5796: LD_INT 2
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: LD_OWVAR 67
5818: ARRAY
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: FOR_TO
5833: IFFALSE 6246
// begin PrepareHuman ( false , i , skill ) ;
5835: LD_INT 0
5837: PPUSH
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 6
5847: PPUSH
5848: CALL_OW 380
// un := CreateHuman ;
5852: LD_ADDR_VAR 0 5
5856: PUSH
5857: CALL_OW 44
5861: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
5862: LD_ADDR_EXP 35
5866: PUSH
5867: LD_EXP 35
5871: PPUSH
5872: LD_VAR 0 5
5876: PPUSH
5877: CALL 56838 0 2
5881: ST_TO_ADDR
// case i of 1 :
5882: LD_VAR 0 2
5886: PUSH
5887: LD_INT 1
5889: DOUBLE
5890: EQUAL
5891: IFTRUE 5895
5893: GO 5964
5895: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
5896: LD_ADDR_VAR 0 4
5900: PUSH
5901: LD_INT 22
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 30
5916: PUSH
5917: LD_INT 32
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 30
5926: PUSH
5927: LD_INT 5
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: LD_INT 62
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: PPUSH
5957: CALL_OW 69
5961: ST_TO_ADDR
5962: GO 6143
5964: LD_INT 2
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6001
5972: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
5973: LD_ADDR_VAR 0 4
5977: PUSH
5978: LD_INT 38
5980: PPUSH
5981: LD_INT 3
5983: PUSH
5984: LD_INT 62
5986: PUSH
5987: EMPTY
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PPUSH
5994: CALL_OW 72
5998: ST_TO_ADDR
5999: GO 6143
6001: LD_INT 3
6003: DOUBLE
6004: EQUAL
6005: IFTRUE 6009
6007: GO 6083
6009: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6010: LD_ADDR_VAR 0 4
6014: PUSH
6015: LD_INT 22
6017: PUSH
6018: LD_INT 8
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: LD_INT 2
6027: PUSH
6028: LD_INT 30
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 30
6040: PUSH
6041: LD_INT 36
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 62
6058: PUSH
6059: EMPTY
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PPUSH
6071: CALL_OW 69
6075: PPUSH
6076: CALL 52127 0 1
6080: ST_TO_ADDR
6081: GO 6143
6083: LD_INT 4
6085: DOUBLE
6086: EQUAL
6087: IFTRUE 6091
6089: GO 6142
6091: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6092: LD_ADDR_VAR 0 4
6096: PUSH
6097: LD_INT 22
6099: PUSH
6100: LD_INT 8
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 30
6109: PUSH
6110: LD_INT 8
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: LD_INT 62
6122: PUSH
6123: EMPTY
6124: LIST
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: PPUSH
6135: CALL_OW 69
6139: ST_TO_ADDR
6140: GO 6143
6142: POP
// if b then
6143: LD_VAR 0 4
6147: IFFALSE 6223
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6149: LD_VAR 0 4
6153: PUSH
6154: LD_INT 1
6156: ARRAY
6157: PPUSH
6158: CALL_OW 266
6162: PUSH
6163: LD_INT 5
6165: EQUAL
6166: IFFALSE 6203
// if Prob ( 50 ) then
6168: LD_INT 50
6170: PPUSH
6171: CALL_OW 13
6175: IFFALSE 6191
// SetClass ( un , class_mortar ) else
6177: LD_VAR 0 5
6181: PPUSH
6182: LD_INT 8
6184: PPUSH
6185: CALL_OW 336
6189: GO 6203
// SetClass ( un , class_sniper ) ;
6191: LD_VAR 0 5
6195: PPUSH
6196: LD_INT 5
6198: PPUSH
6199: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6203: LD_VAR 0 5
6207: PPUSH
6208: LD_VAR 0 4
6212: PUSH
6213: LD_INT 1
6215: ARRAY
6216: PPUSH
6217: CALL_OW 52
// end else
6221: GO 6244
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6223: LD_VAR 0 5
6227: PPUSH
6228: LD_INT 188
6230: PPUSH
6231: LD_INT 21
6233: PPUSH
6234: LD_INT 4
6236: PPUSH
6237: LD_INT 0
6239: PPUSH
6240: CALL_OW 50
// end ;
6244: GO 5832
6246: POP
6247: POP
6248: GO 5732
6250: POP
6251: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6252: LD_ADDR_VAR 0 4
6256: PUSH
6257: LD_INT 22
6259: PUSH
6260: LD_INT 8
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: LD_INT 30
6272: PUSH
6273: LD_INT 32
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 30
6282: PUSH
6283: LD_INT 5
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: LD_INT 62
6300: PUSH
6301: EMPTY
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 69
6317: ST_TO_ADDR
// if b then
6318: LD_VAR 0 4
6322: IFFALSE 6389
// begin for i in b do
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: LD_VAR 0 4
6333: PUSH
6334: FOR_IN
6335: IFFALSE 6387
// begin PrepareApemanSoldier ( ) ;
6337: CALL 52961 0 0
// un := CreateHuman ;
6341: LD_ADDR_VAR 0 5
6345: PUSH
6346: CALL_OW 44
6350: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6351: LD_ADDR_EXP 35
6355: PUSH
6356: LD_EXP 35
6360: PPUSH
6361: LD_VAR 0 5
6365: PPUSH
6366: CALL 56838 0 2
6370: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6371: LD_VAR 0 5
6375: PPUSH
6376: LD_VAR 0 2
6380: PPUSH
6381: CALL_OW 52
// end ;
6385: GO 6334
6387: POP
6388: POP
// end ; for i := 1 to 2 do
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: DOUBLE
6395: LD_INT 1
6397: DEC
6398: ST_TO_ADDR
6399: LD_INT 2
6401: PUSH
6402: FOR_TO
6403: IFFALSE 6530
// begin uc_nation := nation_arabian ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 2
6412: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6413: LD_INT 13
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: LD_INT 31
6424: PPUSH
6425: LD_INT 100
6427: PPUSH
6428: CALL 23989 0 5
// un := CreateVehicle ;
6432: LD_ADDR_VAR 0 5
6436: PUSH
6437: CALL_OW 45
6441: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6442: LD_VAR 0 5
6446: PPUSH
6447: LD_INT 0
6449: PPUSH
6450: LD_INT 5
6452: PPUSH
6453: CALL_OW 12
6457: PPUSH
6458: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 199
6469: PPUSH
6470: LD_INT 24
6472: PPUSH
6473: LD_INT 4
6475: PPUSH
6476: LD_INT 0
6478: PPUSH
6479: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6483: LD_INT 0
6485: PPUSH
6486: LD_INT 8
6488: PUSH
6489: LD_INT 9
6491: PUSH
6492: LD_INT 10
6494: PUSH
6495: LD_INT 10
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: PUSH
6504: LD_OWVAR 67
6508: ARRAY
6509: PPUSH
6510: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6514: CALL_OW 44
6518: PPUSH
6519: LD_VAR 0 5
6523: PPUSH
6524: CALL_OW 52
// end ;
6528: GO 6402
6530: POP
6531: POP
// end ;
6532: LD_VAR 0 1
6536: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6537: LD_EXP 4
6541: PUSH
6542: LD_EXP 35
6546: PPUSH
6547: CALL 21251 0 1
6551: AND
6552: IFFALSE 8925
6554: GO 6556
6556: DISABLE
6557: LD_INT 0
6559: PPUSH
6560: PPUSH
6561: PPUSH
6562: PPUSH
6563: PPUSH
6564: PPUSH
6565: PPUSH
6566: PPUSH
6567: PPUSH
6568: PPUSH
6569: PPUSH
6570: PPUSH
6571: PPUSH
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
// begin enable ;
6577: ENABLE
// side := 8 ;
6578: LD_ADDR_VAR 0 5
6582: PUSH
6583: LD_INT 8
6585: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6586: LD_ADDR_VAR 0 3
6590: PUSH
6591: LD_INT 22
6593: PUSH
6594: LD_VAR 0 5
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 33
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PUSH
6619: LD_INT 3
6621: PUSH
6622: LD_INT 61
6624: PUSH
6625: EMPTY
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
6643: LD_VAR 0 3
6647: PUSH
6648: LD_INT 22
6650: PUSH
6651: LD_VAR 0 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 50
6662: PUSH
6663: EMPTY
6664: LIST
6665: PUSH
6666: LD_INT 34
6668: PUSH
6669: LD_INT 31
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: PPUSH
6681: CALL_OW 69
6685: PPUSH
6686: CALL 21251 0 1
6690: AND
6691: IFFALSE 6719
// for i in remote do
6693: LD_ADDR_VAR 0 1
6697: PUSH
6698: LD_VAR 0 3
6702: PUSH
6703: FOR_IN
6704: IFFALSE 6717
// Connect ( i ) ;
6706: LD_VAR 0 1
6710: PPUSH
6711: CALL 27457 0 1
6715: GO 6703
6717: POP
6718: POP
// if legTech then
6719: LD_EXP 37
6723: IFFALSE 6879
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6725: LD_ADDR_VAR 0 6
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_VAR 0 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 50
6744: PUSH
6745: EMPTY
6746: LIST
6747: PUSH
6748: LD_INT 2
6750: PUSH
6751: LD_INT 30
6753: PUSH
6754: LD_INT 6
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 30
6763: PUSH
6764: LD_INT 7
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 30
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: PPUSH
6792: CALL_OW 69
6796: ST_TO_ADDR
// if lab then
6797: LD_VAR 0 6
6801: IFFALSE 6879
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6803: LD_VAR 0 6
6807: PUSH
6808: LD_INT 1
6810: ARRAY
6811: PPUSH
6812: CALL_OW 461
6816: PUSH
6817: LD_INT 2
6819: EQUAL
6820: IFFALSE 6879
// begin for i in legTech do
6822: LD_ADDR_VAR 0 1
6826: PUSH
6827: LD_EXP 37
6831: PUSH
6832: FOR_IN
6833: IFFALSE 6877
// if CanBeResearched ( lab [ 1 ] , i ) then
6835: LD_VAR 0 6
6839: PUSH
6840: LD_INT 1
6842: ARRAY
6843: PPUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 430
6853: IFFALSE 6875
// begin ComResearch ( lab [ 1 ] , i ) ;
6855: LD_VAR 0 6
6859: PUSH
6860: LD_INT 1
6862: ARRAY
6863: PPUSH
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL_OW 124
// break ;
6873: GO 6877
// end ;
6875: GO 6832
6877: POP
6878: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
6879: LD_ADDR_VAR 0 16
6883: PUSH
6884: LD_INT 2
6886: PPUSH
6887: LD_INT 22
6889: PUSH
6890: LD_VAR 0 5
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 30
6901: PUSH
6902: LD_INT 3
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 50
6911: PUSH
6912: EMPTY
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 70
6924: ST_TO_ADDR
// if fac then
6925: LD_VAR 0 16
6929: IFFALSE 7195
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
6931: LD_VAR 0 16
6935: PUSH
6936: LD_INT 1
6938: ARRAY
6939: PPUSH
6940: CALL_OW 461
6944: PUSH
6945: LD_INT 2
6947: EQUAL
6948: IFFALSE 7195
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
6950: LD_ADDR_VAR 0 17
6954: PUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PUSH
6961: LD_INT 30
6963: PUSH
6964: LD_INT 32
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 33
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 35
6988: PUSH
6989: LD_INT 0
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 70
7004: ST_TO_ADDR
// if emptyTowers then
7005: LD_VAR 0 17
7009: IFFALSE 7057
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7011: LD_ADDR_VAR 0 18
7015: PUSH
7016: LD_VAR 0 17
7020: PUSH
7021: LD_INT 1
7023: ARRAY
7024: PPUSH
7025: LD_INT 2
7027: PPUSH
7028: CALL 29496 0 2
7032: ST_TO_ADDR
// if weapon then
7033: LD_VAR 0 18
7037: IFFALSE 7057
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7039: LD_VAR 0 17
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PPUSH
7048: LD_VAR 0 18
7052: PPUSH
7053: CALL_OW 148
// end ; if legConstructList then
7057: LD_EXP 38
7061: IFFALSE 7195
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7063: LD_VAR 0 16
7067: PUSH
7068: LD_INT 1
7070: ARRAY
7071: PPUSH
7072: LD_EXP 38
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PUSH
7081: LD_INT 1
7083: ARRAY
7084: PPUSH
7085: LD_EXP 38
7089: PUSH
7090: LD_INT 1
7092: ARRAY
7093: PUSH
7094: LD_INT 2
7096: ARRAY
7097: PPUSH
7098: LD_EXP 38
7102: PUSH
7103: LD_INT 1
7105: ARRAY
7106: PUSH
7107: LD_INT 3
7109: ARRAY
7110: PPUSH
7111: LD_EXP 38
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PUSH
7120: LD_INT 4
7122: ARRAY
7123: PPUSH
7124: CALL_OW 448
7128: IFFALSE 7195
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7130: LD_VAR 0 16
7134: PUSH
7135: LD_INT 1
7137: ARRAY
7138: PPUSH
7139: LD_EXP 38
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: PUSH
7148: LD_INT 1
7150: ARRAY
7151: PPUSH
7152: LD_EXP 38
7156: PUSH
7157: LD_INT 1
7159: ARRAY
7160: PUSH
7161: LD_INT 2
7163: ARRAY
7164: PPUSH
7165: LD_EXP 38
7169: PUSH
7170: LD_INT 1
7172: ARRAY
7173: PUSH
7174: LD_INT 3
7176: ARRAY
7177: PPUSH
7178: LD_EXP 38
7182: PUSH
7183: LD_INT 1
7185: ARRAY
7186: PUSH
7187: LD_INT 4
7189: ARRAY
7190: PPUSH
7191: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7195: LD_ADDR_VAR 0 2
7199: PUSH
7200: LD_INT 2
7202: PPUSH
7203: LD_INT 21
7205: PUSH
7206: LD_INT 3
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 3
7215: PUSH
7216: LD_INT 57
7218: PUSH
7219: EMPTY
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 3
7228: PUSH
7229: LD_INT 24
7231: PUSH
7232: LD_INT 1000
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: LIST
7247: PPUSH
7248: CALL_OW 70
7252: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7253: LD_ADDR_VAR 0 10
7257: PUSH
7258: LD_INT 14
7260: PPUSH
7261: CALL_OW 435
7265: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7266: LD_ADDR_VAR 0 11
7270: PUSH
7271: LD_EXP 35
7275: PPUSH
7276: LD_INT 25
7278: PUSH
7279: LD_INT 4
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: LD_INT 50
7288: PUSH
7289: EMPTY
7290: LIST
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PPUSH
7296: CALL_OW 72
7300: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7301: LD_ADDR_VAR 0 6
7305: PUSH
7306: LD_INT 2
7308: PPUSH
7309: LD_INT 2
7311: PUSH
7312: LD_INT 30
7314: PUSH
7315: LD_INT 6
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 30
7324: PUSH
7325: LD_INT 7
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 30
7334: PUSH
7335: LD_INT 8
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: ST_TO_ADDR
// if sci then
7353: LD_VAR 0 11
7357: IFFALSE 7516
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7359: LD_ADDR_VAR 0 13
7363: PUSH
7364: LD_EXP 35
7368: PPUSH
7369: LD_INT 95
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 120
7381: PUSH
7382: LD_INT 1
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 72
7397: ST_TO_ADDR
// if hurtUnits then
7398: LD_VAR 0 13
7402: IFFALSE 7463
// begin for i in sci do
7404: LD_ADDR_VAR 0 1
7408: PUSH
7409: LD_VAR 0 11
7413: PUSH
7414: FOR_IN
7415: IFFALSE 7459
// if IsInUnit ( i ) then
7417: LD_VAR 0 1
7421: PPUSH
7422: CALL_OW 310
7426: IFFALSE 7439
// ComExitBuilding ( i ) else
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 122
7437: GO 7457
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7439: LD_VAR 0 1
7443: PPUSH
7444: LD_VAR 0 13
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PPUSH
7453: CALL_OW 128
7457: GO 7414
7459: POP
7460: POP
// end else
7461: GO 7516
// if lab then
7463: LD_VAR 0 6
7467: IFFALSE 7516
// begin for i in sci do
7469: LD_ADDR_VAR 0 1
7473: PUSH
7474: LD_VAR 0 11
7478: PUSH
7479: FOR_IN
7480: IFFALSE 7514
// if not IsInUnit ( i ) then
7482: LD_VAR 0 1
7486: PPUSH
7487: CALL_OW 310
7491: NOT
7492: IFFALSE 7512
// ComEnterUnit ( i , lab [ 1 ] ) ;
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_VAR 0 6
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: PPUSH
7508: CALL_OW 120
7512: GO 7479
7514: POP
7515: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
7516: LD_ADDR_VAR 0 7
7520: PUSH
7521: LD_EXP 35
7525: PPUSH
7526: LD_INT 25
7528: PUSH
7529: LD_INT 2
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PPUSH
7536: CALL_OW 72
7540: ST_TO_ADDR
// if eng then
7541: LD_VAR 0 7
7545: IFFALSE 8320
// begin for i in eng do
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 7
7556: PUSH
7557: FOR_IN
7558: IFFALSE 8318
// begin tag := GetTag ( i ) ;
7560: LD_ADDR_VAR 0 8
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 110
7574: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 256
7584: PUSH
7585: LD_INT 800
7587: LESS
7588: PUSH
7589: LD_VAR 0 8
7593: PUSH
7594: LD_INT 1
7596: NONEQUAL
7597: AND
7598: IFFALSE 7648
// begin SetTag ( i , tHeal ) ;
7600: LD_VAR 0 1
7604: PPUSH
7605: LD_INT 1
7607: PPUSH
7608: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_EXP 39
7621: PUSH
7622: LD_INT 1
7624: ARRAY
7625: PPUSH
7626: LD_EXP 39
7630: PUSH
7631: LD_INT 2
7633: ARRAY
7634: PPUSH
7635: CALL_OW 111
// AddComHold ( i ) ;
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7648: LD_VAR 0 8
7652: PUSH
7653: LD_INT 1
7655: EQUAL
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 256
7666: PUSH
7667: LD_INT 1000
7669: EQUAL
7670: AND
7671: IFFALSE 7685
// SetTag ( i , 0 ) ;
7673: LD_VAR 0 1
7677: PPUSH
7678: LD_INT 0
7680: PPUSH
7681: CALL_OW 109
// if not tag then
7685: LD_VAR 0 8
7689: NOT
7690: IFFALSE 7858
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
7692: LD_ADDR_VAR 0 4
7696: PUSH
7697: LD_INT 2
7699: PPUSH
7700: LD_INT 57
7702: PUSH
7703: EMPTY
7704: LIST
7705: PPUSH
7706: CALL_OW 70
7710: ST_TO_ADDR
// if undone then
7711: LD_VAR 0 4
7715: IFFALSE 7737
// begin ComComplete ( i , undone [ 1 ] ) ;
7717: LD_VAR 0 1
7721: PPUSH
7722: LD_VAR 0 4
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: PPUSH
7731: CALL 27349 0 2
// continue ;
7735: GO 7557
// end ; if cr or tmp or Count ( legBuildings ) then
7737: LD_VAR 0 10
7741: PUSH
7742: LD_VAR 0 2
7746: OR
7747: PUSH
7748: LD_EXP 40
7752: PPUSH
7753: CALL 21251 0 1
7757: OR
7758: IFFALSE 7834
// begin if IsInUnit ( i ) then
7760: LD_VAR 0 1
7764: PPUSH
7765: CALL_OW 310
7769: IFFALSE 7780
// ComExitBuilding ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 122
// if tmp then
7780: LD_VAR 0 2
7784: IFFALSE 7800
// SetTag ( i , tRepair ) else
7786: LD_VAR 0 1
7790: PPUSH
7791: LD_INT 3
7793: PPUSH
7794: CALL_OW 109
7798: GO 7832
// if cr then
7800: LD_VAR 0 10
7804: IFFALSE 7820
// SetTag ( i , tCrates ) else
7806: LD_VAR 0 1
7810: PPUSH
7811: LD_INT 2
7813: PPUSH
7814: CALL_OW 109
7818: GO 7832
// SetTag ( i , tBuild ) ;
7820: LD_VAR 0 1
7824: PPUSH
7825: LD_INT 5
7827: PPUSH
7828: CALL_OW 109
// end else
7832: GO 7858
// if not IsInUnit ( i ) then
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 310
7843: NOT
7844: IFFALSE 7858
// ComEnterUnit ( i , legBase ) ;
7846: LD_VAR 0 1
7850: PPUSH
7851: LD_INT 38
7853: PPUSH
7854: CALL_OW 120
// end ; if tag = tRepair then
7858: LD_VAR 0 8
7862: PUSH
7863: LD_INT 3
7865: EQUAL
7866: IFFALSE 7968
// begin if IsInUnit ( i ) then
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 310
7877: IFFALSE 7890
// begin ComExitBuilding ( i ) ;
7879: LD_VAR 0 1
7883: PPUSH
7884: CALL_OW 122
// continue ;
7888: GO 7557
// end ; if not tmp then
7890: LD_VAR 0 2
7894: NOT
7895: IFFALSE 7911
// begin SetTag ( i , 0 ) ;
7897: LD_VAR 0 1
7901: PPUSH
7902: LD_INT 0
7904: PPUSH
7905: CALL_OW 109
// continue ;
7909: GO 7557
// end ; if not HasTask ( i ) then
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 314
7920: NOT
7921: IFFALSE 7941
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
7923: LD_VAR 0 1
7927: PPUSH
7928: LD_VAR 0 2
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
7941: LD_VAR 0 1
7945: PPUSH
7946: LD_INT 2
7948: PPUSH
7949: CALL_OW 308
7953: NOT
7954: IFFALSE 7968
// ComMoveToArea ( i , legBaseArea ) ;
7956: LD_VAR 0 1
7960: PPUSH
7961: LD_INT 2
7963: PPUSH
7964: CALL_OW 113
// end ; if tag = tBuild then
7968: LD_VAR 0 8
7972: PUSH
7973: LD_INT 5
7975: EQUAL
7976: IFFALSE 8171
// begin if IsInUnit ( i ) then
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 310
7987: IFFALSE 8000
// begin ComExitBuilding ( i ) ;
7989: LD_VAR 0 1
7993: PPUSH
7994: CALL_OW 122
// continue ;
7998: GO 7557
// end ; if not Count ( legBuildings ) then
8000: LD_EXP 40
8004: PPUSH
8005: CALL 21251 0 1
8009: NOT
8010: IFFALSE 8028
// begin SetTag ( i , 0 ) ;
8012: LD_VAR 0 1
8016: PPUSH
8017: LD_INT 0
8019: PPUSH
8020: CALL_OW 109
// continue ;
8024: GO 7557
// end else
8026: GO 8065
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8028: LD_INT 38
8030: PPUSH
8031: LD_EXP 40
8035: PUSH
8036: LD_INT 1
8038: ARRAY
8039: PUSH
8040: LD_INT 1
8042: ARRAY
8043: PPUSH
8044: CALL 10109 0 2
8048: NOT
8049: IFFALSE 8065
// begin SetTag ( i , 0 ) ;
8051: LD_VAR 0 1
8055: PPUSH
8056: LD_INT 0
8058: PPUSH
8059: CALL_OW 109
// continue ;
8063: GO 7557
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8065: LD_ADDR_VAR 0 4
8069: PUSH
8070: LD_INT 2
8072: PPUSH
8073: LD_INT 57
8075: PUSH
8076: EMPTY
8077: LIST
8078: PPUSH
8079: CALL_OW 70
8083: ST_TO_ADDR
// if undone then
8084: LD_VAR 0 4
8088: IFFALSE 8110
// begin ComComplete ( i , undone [ 1 ] ) ;
8090: LD_VAR 0 1
8094: PPUSH
8095: LD_VAR 0 4
8099: PUSH
8100: LD_INT 1
8102: ARRAY
8103: PPUSH
8104: CALL 27349 0 2
// continue ;
8108: GO 7557
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8110: LD_VAR 0 1
8114: PPUSH
8115: LD_EXP 40
8119: PUSH
8120: LD_INT 1
8122: ARRAY
8123: PUSH
8124: LD_INT 1
8126: ARRAY
8127: PPUSH
8128: LD_EXP 40
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: PUSH
8137: LD_INT 2
8139: ARRAY
8140: PPUSH
8141: LD_EXP 40
8145: PUSH
8146: LD_INT 1
8148: ARRAY
8149: PUSH
8150: LD_INT 3
8152: ARRAY
8153: PPUSH
8154: LD_EXP 40
8158: PUSH
8159: LD_INT 1
8161: ARRAY
8162: PUSH
8163: LD_INT 4
8165: ARRAY
8166: PPUSH
8167: CALL_OW 145
// end ; if tag = tCrates then
8171: LD_VAR 0 8
8175: PUSH
8176: LD_INT 2
8178: EQUAL
8179: IFFALSE 8316
// begin if IsInUnit ( i ) then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 310
8190: IFFALSE 8203
// begin ComExitBuilding ( i ) ;
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 122
// continue ;
8201: GO 7557
// end ; if not cr then
8203: LD_VAR 0 10
8207: NOT
8208: IFFALSE 8224
// begin SetTag ( i , 0 ) ;
8210: LD_VAR 0 1
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 109
// continue ;
8222: GO 7557
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 314
8233: NOT
8234: PUSH
8235: LD_INT 81
8237: PUSH
8238: LD_VAR 0 5
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 92
8249: PUSH
8250: LD_VAR 0 10
8254: PUSH
8255: LD_INT 1
8257: ARRAY
8258: PUSH
8259: LD_VAR 0 10
8263: PUSH
8264: LD_INT 2
8266: ARRAY
8267: PUSH
8268: LD_INT 12
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PPUSH
8281: CALL_OW 69
8285: NOT
8286: AND
8287: IFFALSE 8316
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8289: LD_VAR 0 1
8293: PPUSH
8294: LD_VAR 0 10
8298: PUSH
8299: LD_INT 1
8301: ARRAY
8302: PPUSH
8303: LD_VAR 0 10
8307: PUSH
8308: LD_INT 2
8310: ARRAY
8311: PPUSH
8312: CALL_OW 117
// end ; end ;
8316: GO 7557
8318: POP
8319: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8320: LD_ADDR_VAR 0 12
8324: PUSH
8325: LD_EXP 35
8329: PPUSH
8330: LD_INT 2
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 5
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 8
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: LD_INT 50
8371: PUSH
8372: EMPTY
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 72
8383: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8384: LD_ADDR_VAR 0 14
8388: PUSH
8389: LD_INT 2
8391: PPUSH
8392: LD_INT 81
8394: PUSH
8395: LD_VAR 0 5
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 70
8408: ST_TO_ADDR
// if sol then
8409: LD_VAR 0 12
8413: IFFALSE 8925
// begin if enemyInBase then
8415: LD_VAR 0 14
8419: IFFALSE 8564
// begin for i in sol do
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: LD_VAR 0 12
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8560
// begin tw := IsInUnit ( i ) ;
8434: LD_ADDR_VAR 0 9
8438: PUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: CALL_OW 310
8448: ST_TO_ADDR
// if tw then
8449: LD_VAR 0 9
8453: IFFALSE 8534
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8455: LD_VAR 0 9
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_VAR 0 5
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 101
8474: PUSH
8475: LD_INT 2
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 2
8484: PUSH
8485: LD_INT 30
8487: PUSH
8488: LD_INT 32
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 30
8497: PUSH
8498: LD_INT 31
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 69
8519: IN
8520: NOT
8521: IFFALSE 8532
// ComExitBuilding ( i ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: CALL_OW 122
// end else
8532: GO 8558
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
8534: LD_VAR 0 1
8538: PPUSH
8539: LD_VAR 0 14
8543: PPUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: CALL_OW 74
8553: PPUSH
8554: CALL_OW 115
// end ;
8558: GO 8431
8560: POP
8561: POP
// end else
8562: GO 8925
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8564: LD_ADDR_VAR 0 15
8568: PUSH
8569: LD_INT 2
8571: PPUSH
8572: LD_INT 3
8574: PUSH
8575: LD_INT 62
8577: PUSH
8578: EMPTY
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 2
8587: PUSH
8588: LD_INT 30
8590: PUSH
8591: LD_INT 32
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 30
8600: PUSH
8601: LD_INT 4
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 30
8610: PUSH
8611: LD_INT 5
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 30
8620: PUSH
8621: LD_INT 31
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PPUSH
8639: CALL_OW 70
8643: ST_TO_ADDR
// if empty then
8644: LD_VAR 0 15
8648: IFFALSE 8665
// empty := ReverseArray ( empty ) ;
8650: LD_ADDR_VAR 0 15
8654: PUSH
8655: LD_VAR 0 15
8659: PPUSH
8660: CALL 52127 0 1
8664: ST_TO_ADDR
// for i in sol do
8665: LD_ADDR_VAR 0 1
8669: PUSH
8670: LD_VAR 0 12
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8923
// begin tag := GetTag ( i ) ;
8678: LD_ADDR_VAR 0 8
8682: PUSH
8683: LD_VAR 0 1
8687: PPUSH
8688: CALL_OW 110
8692: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8693: LD_VAR 0 1
8697: PPUSH
8698: CALL_OW 256
8702: PUSH
8703: LD_INT 1000
8705: LESS
8706: PUSH
8707: LD_VAR 0 8
8711: PUSH
8712: LD_INT 1
8714: NONEQUAL
8715: AND
8716: IFFALSE 8768
// begin SetTag ( i , tHeal ) ;
8718: LD_VAR 0 1
8722: PPUSH
8723: LD_INT 1
8725: PPUSH
8726: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8730: LD_VAR 0 1
8734: PPUSH
8735: LD_EXP 39
8739: PUSH
8740: LD_INT 1
8742: ARRAY
8743: PPUSH
8744: LD_EXP 39
8748: PUSH
8749: LD_INT 2
8751: ARRAY
8752: PPUSH
8753: CALL_OW 111
// AddComHold ( i ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 200
// continue ;
8766: GO 8675
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 256
8777: PUSH
8778: LD_INT 1000
8780: EQUAL
8781: PUSH
8782: LD_VAR 0 8
8786: PUSH
8787: LD_INT 1
8789: EQUAL
8790: AND
8791: IFFALSE 8807
// begin SetTag ( i , 0 ) ;
8793: LD_VAR 0 1
8797: PPUSH
8798: LD_INT 0
8800: PPUSH
8801: CALL_OW 109
// continue ;
8805: GO 8675
// end ; if HasTask ( i ) then
8807: LD_VAR 0 1
8811: PPUSH
8812: CALL_OW 314
8816: IFFALSE 8820
// continue ;
8818: GO 8675
// if not IsInUnit ( i ) and not tag and empty then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 310
8829: NOT
8830: PUSH
8831: LD_VAR 0 8
8835: NOT
8836: AND
8837: PUSH
8838: LD_VAR 0 15
8842: AND
8843: IFFALSE 8921
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8845: LD_VAR 0 1
8849: PPUSH
8850: LD_VAR 0 15
8854: PUSH
8855: LD_INT 1
8857: ARRAY
8858: PPUSH
8859: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
8863: LD_VAR 0 15
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: CALL_OW 266
8876: PUSH
8877: LD_INT 5
8879: EQUAL
8880: PUSH
8881: LD_INT 50
8883: PPUSH
8884: CALL_OW 13
8888: AND
8889: IFFALSE 8903
// AddComChangeProfession ( i , class_mortar ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: LD_INT 8
8898: PPUSH
8899: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
8903: LD_ADDR_VAR 0 15
8907: PUSH
8908: LD_VAR 0 15
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: CALL_OW 3
8920: ST_TO_ADDR
// end ; end ;
8921: GO 8675
8923: POP
8924: POP
// end ; end ; end ;
8925: PPOPN 18
8927: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive do var cr , enemyInArea ;
8928: LD_EXP 42
8932: PPUSH
8933: CALL_OW 302
8937: PUSH
8938: LD_EXP 4
8942: AND
8943: IFFALSE 9225
8945: GO 8947
8947: DISABLE
8948: LD_INT 0
8950: PPUSH
8951: PPUSH
// begin enable ;
8952: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
8953: LD_ADDR_VAR 0 2
8957: PUSH
8958: LD_INT 2
8960: PPUSH
8961: LD_INT 81
8963: PUSH
8964: LD_INT 8
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 50
8973: PUSH
8974: EMPTY
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PPUSH
8981: CALL_OW 70
8985: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: LD_INT 16
8993: PPUSH
8994: CALL_OW 435
8998: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
8999: LD_EXP 42
9003: PPUSH
9004: CALL_OW 261
9008: PUSH
9009: LD_INT 10
9011: LESS
9012: PUSH
9013: LD_INT 2
9015: PPUSH
9016: LD_EXP 42
9020: PPUSH
9021: CALL_OW 292
9025: NOT
9026: AND
9027: PUSH
9028: LD_EXP 42
9032: PPUSH
9033: CALL_OW 262
9037: PUSH
9038: LD_INT 1
9040: EQUAL
9041: AND
9042: IFFALSE 9056
// SetFuel ( legCargo , 100 ) ;
9044: LD_EXP 42
9048: PPUSH
9049: LD_INT 100
9051: PPUSH
9052: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9056: LD_EXP 42
9060: PPUSH
9061: CALL_OW 314
9065: NOT
9066: PUSH
9067: LD_EXP 42
9071: PPUSH
9072: LD_INT 1
9074: PPUSH
9075: CALL_OW 289
9079: PUSH
9080: LD_INT 100
9082: LESS
9083: AND
9084: PUSH
9085: LD_VAR 0 2
9089: NOT
9090: AND
9091: IFFALSE 9157
// begin if cr then
9093: LD_VAR 0 1
9097: IFFALSE 9128
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9099: LD_EXP 42
9103: PPUSH
9104: LD_VAR 0 1
9108: PUSH
9109: LD_INT 1
9111: ARRAY
9112: PPUSH
9113: LD_VAR 0 1
9117: PUSH
9118: LD_INT 2
9120: ARRAY
9121: PPUSH
9122: CALL_OW 117
9126: GO 9155
// if not IsInArea ( legCargo , cratesNorthArea ) then
9128: LD_EXP 42
9132: PPUSH
9133: LD_INT 16
9135: PPUSH
9136: CALL_OW 308
9140: NOT
9141: IFFALSE 9155
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9143: LD_EXP 42
9147: PPUSH
9148: LD_INT 16
9150: PPUSH
9151: CALL_OW 113
// exit ;
9155: GO 9225
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9157: LD_VAR 0 2
9161: PUSH
9162: LD_EXP 42
9166: PPUSH
9167: LD_INT 2
9169: PPUSH
9170: CALL_OW 308
9174: NOT
9175: AND
9176: IFFALSE 9195
// ComMoveXY ( legCargo , 194 , 17 ) else
9178: LD_EXP 42
9182: PPUSH
9183: LD_INT 194
9185: PPUSH
9186: LD_INT 17
9188: PPUSH
9189: CALL_OW 111
9193: GO 9225
// if GetCargo ( legCargo , mat_cans ) = 100 then
9195: LD_EXP 42
9199: PPUSH
9200: LD_INT 1
9202: PPUSH
9203: CALL_OW 289
9207: PUSH
9208: LD_INT 100
9210: EQUAL
9211: IFFALSE 9225
// ComGive ( legCargo , legBase ) ;
9213: LD_EXP 42
9217: PPUSH
9218: LD_INT 38
9220: PPUSH
9221: CALL_OW 161
// end ;
9225: PPOPN 2
9227: END
// every 8 8$00 trigger Count ( legTanks ) < 5 and legScriptActive and spotByLegion do var i , parts , part ;
9228: LD_EXP 41
9232: PPUSH
9233: CALL 21251 0 1
9237: PUSH
9238: LD_INT 5
9240: LESS
9241: PUSH
9242: LD_EXP 4
9246: AND
9247: PUSH
9248: LD_EXP 9
9252: AND
9253: IFFALSE 9447
9255: GO 9257
9257: DISABLE
9258: LD_INT 0
9260: PPUSH
9261: PPUSH
9262: PPUSH
// begin enable ;
9263: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9264: LD_ADDR_VAR 0 2
9268: PUSH
9269: LD_INT 13
9271: PUSH
9272: LD_INT 28
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 13
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 13
9291: PUSH
9292: LD_INT 26
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 14
9301: PUSH
9302: LD_INT 26
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 14
9311: PUSH
9312: LD_INT 28
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 14
9321: PUSH
9322: LD_INT 25
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
9337: LD_ADDR_VAR 0 1
9341: PUSH
9342: DOUBLE
9343: LD_INT 1
9345: DEC
9346: ST_TO_ADDR
9347: LD_INT 4
9349: PUSH
9350: LD_INT 5
9352: PUSH
9353: LD_INT 6
9355: PUSH
9356: LD_INT 6
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PUSH
9365: LD_OWVAR 67
9369: ARRAY
9370: PUSH
9371: FOR_TO
9372: IFFALSE 9445
// begin part := parts [ rand ( 1 , parts ) ] ;
9374: LD_ADDR_VAR 0 3
9378: PUSH
9379: LD_VAR 0 2
9383: PUSH
9384: LD_INT 1
9386: PPUSH
9387: LD_VAR 0 2
9391: PPUSH
9392: CALL_OW 12
9396: ARRAY
9397: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
9398: LD_ADDR_EXP 38
9402: PUSH
9403: LD_EXP 38
9407: PPUSH
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 1
9415: ARRAY
9416: PUSH
9417: LD_INT 1
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_VAR 0 3
9427: PUSH
9428: LD_INT 2
9430: ARRAY
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL 56838 0 2
9442: ST_TO_ADDR
9443: GO 9371
9445: POP
9446: POP
// end ;
9447: PPOPN 3
9449: END
// every 20 20$00 trigger not legionDestroyed and tick <= 60 60$00 do
9450: LD_EXP 12
9454: NOT
9455: PUSH
9456: LD_OWVAR 1
9460: PUSH
9461: LD_INT 126000
9463: LESSEQUAL
9464: AND
9465: IFFALSE 9504
9467: GO 9469
9469: DISABLE
// begin enable ;
9470: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
9471: LD_ADDR_EXP 38
9475: PUSH
9476: LD_EXP 38
9480: PPUSH
9481: LD_INT 14
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: LD_INT 1
9489: PUSH
9490: LD_INT 27
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL 56838 0 2
9503: ST_TO_ADDR
// end ;
9504: END
// every 0 0$1 trigger legTanks do var i , mech , enemy ;
9505: LD_EXP 41
9509: IFFALSE 10106
9511: GO 9513
9513: DISABLE
9514: LD_INT 0
9516: PPUSH
9517: PPUSH
9518: PPUSH
// begin enable ;
9519: ENABLE
// if not legTanks then
9520: LD_EXP 41
9524: NOT
9525: IFFALSE 9529
// exit ;
9527: GO 10106
// for i in legTanks do
9529: LD_ADDR_VAR 0 1
9533: PUSH
9534: LD_EXP 41
9538: PUSH
9539: FOR_IN
9540: IFFALSE 10104
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
9542: LD_VAR 0 1
9546: PPUSH
9547: CALL_OW 302
9551: NOT
9552: PUSH
9553: LD_VAR 0 1
9557: PPUSH
9558: CALL_OW 255
9562: PUSH
9563: LD_INT 8
9565: NONEQUAL
9566: OR
9567: IFFALSE 9587
// begin legTanks := legTanks diff i ;
9569: LD_ADDR_EXP 41
9573: PUSH
9574: LD_EXP 41
9578: PUSH
9579: LD_VAR 0 1
9583: DIFF
9584: ST_TO_ADDR
// continue ;
9585: GO 9539
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
9587: LD_VAR 0 1
9591: PPUSH
9592: CALL_OW 110
9596: NOT
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: CALL_OW 263
9607: PUSH
9608: LD_INT 2
9610: EQUAL
9611: AND
9612: IFFALSE 9626
// SetTag ( i , tAttack ) ;
9614: LD_VAR 0 1
9618: PPUSH
9619: LD_INT 10
9621: PPUSH
9622: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
9626: LD_VAR 0 1
9630: PPUSH
9631: CALL_OW 110
9635: NOT
9636: PUSH
9637: LD_VAR 0 1
9641: PPUSH
9642: CALL_OW 110
9646: PUSH
9647: LD_INT 0
9649: EQUAL
9650: OR
9651: IFFALSE 9781
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9653: LD_VAR 0 1
9657: PPUSH
9658: CALL_OW 261
9662: PUSH
9663: LD_INT 50
9665: LESS
9666: PUSH
9667: LD_VAR 0 1
9671: PPUSH
9672: CALL_OW 262
9676: PUSH
9677: LD_INT 1
9679: EQUAL
9680: AND
9681: IFFALSE 9740
// begin ComMoveXY ( i , 189 , 19 ) ;
9683: LD_VAR 0 1
9687: PPUSH
9688: LD_INT 189
9690: PPUSH
9691: LD_INT 19
9693: PPUSH
9694: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9698: LD_INT 35
9700: PPUSH
9701: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
9705: LD_VAR 0 1
9709: PPUSH
9710: LD_INT 189
9712: PPUSH
9713: LD_INT 19
9715: PPUSH
9716: CALL_OW 297
9720: PUSH
9721: LD_INT 4
9723: LESS
9724: IFFALSE 9698
// SetFuel ( i , 100 ) ;
9726: LD_VAR 0 1
9730: PPUSH
9731: LD_INT 100
9733: PPUSH
9734: CALL_OW 240
// end else
9738: GO 9781
// if not IsInArea ( i , legParkingArea ) then
9740: LD_VAR 0 1
9744: PPUSH
9745: LD_INT 15
9747: PPUSH
9748: CALL_OW 308
9752: NOT
9753: IFFALSE 9769
// ComMoveToArea ( i , legParkingArea ) else
9755: LD_VAR 0 1
9759: PPUSH
9760: LD_INT 15
9762: PPUSH
9763: CALL_OW 113
9767: GO 9781
// SetTag ( i , tParking ) ;
9769: LD_VAR 0 1
9773: PPUSH
9774: LD_INT 9
9776: PPUSH
9777: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9781: LD_VAR 0 1
9785: PPUSH
9786: CALL_OW 110
9790: PUSH
9791: LD_INT 9
9793: EQUAL
9794: IFFALSE 9924
// begin if GetLives ( i ) < 650 then
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 256
9805: PUSH
9806: LD_INT 650
9808: LESS
9809: IFFALSE 9901
// begin if not IsDrivenBy ( i ) then
9811: LD_VAR 0 1
9815: PPUSH
9816: CALL_OW 311
9820: NOT
9821: IFFALSE 9825
// continue ;
9823: GO 9539
// mech := IsDrivenBy ( i ) ;
9825: LD_ADDR_VAR 0 2
9829: PUSH
9830: LD_VAR 0 1
9834: PPUSH
9835: CALL_OW 311
9839: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9840: LD_VAR 0 2
9844: PPUSH
9845: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9849: LD_VAR 0 2
9853: PPUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9863: LD_INT 35
9865: PPUSH
9866: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 256
9879: PUSH
9880: LD_INT 1000
9882: EQUAL
9883: IFFALSE 9863
// ComEnterUnit ( mech , i ) ;
9885: LD_VAR 0 2
9889: PPUSH
9890: LD_VAR 0 1
9894: PPUSH
9895: CALL_OW 120
// end else
9899: GO 9924
// if IsDrivenBy ( i ) then
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 311
9910: IFFALSE 9924
// SetTag ( i , tAttack ) ;
9912: LD_VAR 0 1
9916: PPUSH
9917: LD_INT 10
9919: PPUSH
9920: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9924: LD_VAR 0 1
9928: PPUSH
9929: CALL_OW 110
9933: PUSH
9934: LD_INT 10
9936: EQUAL
9937: IFFALSE 10102
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
9939: LD_ADDR_VAR 0 3
9943: PUSH
9944: LD_INT 2
9946: PPUSH
9947: LD_INT 81
9949: PUSH
9950: LD_INT 8
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PPUSH
9957: CALL_OW 70
9961: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
9962: LD_VAR 0 1
9966: PPUSH
9967: CALL_OW 256
9971: PUSH
9972: LD_INT 650
9974: LESS
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 263
9985: PUSH
9986: LD_INT 1
9988: EQUAL
9989: AND
9990: IFFALSE 10015
// begin ComStop ( i ) ;
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 141
// SetTag ( i , 0 ) ;
10001: LD_VAR 0 1
10005: PPUSH
10006: LD_INT 0
10008: PPUSH
10009: CALL_OW 109
// continue ;
10013: GO 9539
// end ; if enemy then
10015: LD_VAR 0 3
10019: IFFALSE 10059
// begin if not HasTask ( i ) then
10021: LD_VAR 0 1
10025: PPUSH
10026: CALL_OW 314
10030: NOT
10031: IFFALSE 10057
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10033: LD_VAR 0 1
10037: PPUSH
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_VAR 0 1
10047: PPUSH
10048: CALL_OW 74
10052: PPUSH
10053: CALL 60910 0 2
// end else
10057: GO 10102
// if legTanks >= 4 then
10059: LD_EXP 41
10063: PUSH
10064: LD_INT 4
10066: GREATEREQUAL
10067: IFFALSE 10102
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10069: LD_VAR 0 1
10073: PPUSH
10074: LD_INT 200
10076: PUSH
10077: LD_INT 48
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: LD_INT 210
10086: PUSH
10087: LD_INT 74
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL 59442 0 2
// end ; end ;
10102: GO 9539
10104: POP
10105: POP
// end ; end_of_file
10106: PPOPN 3
10108: END
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
10109: LD_INT 0
10111: PPUSH
10112: PPUSH
10113: PPUSH
// if btype = b_depot then
10114: LD_VAR 0 2
10118: PUSH
10119: LD_INT 0
10121: EQUAL
10122: IFFALSE 10134
// begin result := true ;
10124: LD_ADDR_VAR 0 3
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// exit ;
10132: GO 10250
// end ; pom := GetBase ( depot ) ;
10134: LD_ADDR_VAR 0 4
10138: PUSH
10139: LD_VAR 0 1
10143: PPUSH
10144: CALL_OW 274
10148: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
10149: LD_ADDR_VAR 0 5
10153: PUSH
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_VAR 0 1
10163: PPUSH
10164: CALL_OW 248
10168: PPUSH
10169: CALL_OW 450
10173: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
10174: LD_ADDR_VAR 0 3
10178: PUSH
10179: LD_VAR 0 4
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: CALL_OW 275
10191: PUSH
10192: LD_VAR 0 5
10196: PUSH
10197: LD_INT 1
10199: ARRAY
10200: GREATEREQUAL
10201: PUSH
10202: LD_VAR 0 4
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: CALL_OW 275
10214: PUSH
10215: LD_VAR 0 5
10219: PUSH
10220: LD_INT 2
10222: ARRAY
10223: GREATEREQUAL
10224: AND
10225: PUSH
10226: LD_VAR 0 4
10230: PPUSH
10231: LD_INT 3
10233: PPUSH
10234: CALL_OW 275
10238: PUSH
10239: LD_VAR 0 5
10243: PUSH
10244: LD_INT 3
10246: ARRAY
10247: GREATEREQUAL
10248: AND
10249: ST_TO_ADDR
// end ;
10250: LD_VAR 0 3
10254: RET
// export function CreateNature ; var i , areas , amount ; begin
10255: LD_INT 0
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// PrepareTiger ( 0 ) ;
10261: LD_INT 0
10263: PPUSH
10264: CALL 53227 0 1
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
10268: LD_ADDR_VAR 0 2
10272: PUSH
10273: DOUBLE
10274: LD_INT 1
10276: DEC
10277: ST_TO_ADDR
10278: LD_INT 3
10280: PUSH
10281: LD_INT 4
10283: PUSH
10284: LD_INT 5
10286: PUSH
10287: LD_INT 6
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: PUSH
10296: LD_OWVAR 67
10300: ARRAY
10301: PUSH
10302: FOR_TO
10303: IFFALSE 10322
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10305: CALL_OW 44
10309: PPUSH
10310: LD_INT 7
10312: PPUSH
10313: LD_INT 0
10315: PPUSH
10316: CALL_OW 49
10320: GO 10302
10322: POP
10323: POP
// PrepareBird ;
10324: CALL 53408 0 0
// for i := 1 to 3 do
10328: LD_ADDR_VAR 0 2
10332: PUSH
10333: DOUBLE
10334: LD_INT 1
10336: DEC
10337: ST_TO_ADDR
10338: LD_INT 3
10340: PUSH
10341: FOR_TO
10342: IFFALSE 10361
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10344: CALL_OW 44
10348: PPUSH
10349: LD_INT 7
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL_OW 49
10359: GO 10341
10361: POP
10362: POP
// PrepareHorse ;
10363: CALL 53448 0 0
// for i := 1 to 3 do
10367: LD_ADDR_VAR 0 2
10371: PUSH
10372: DOUBLE
10373: LD_INT 1
10375: DEC
10376: ST_TO_ADDR
10377: LD_INT 3
10379: PUSH
10380: FOR_TO
10381: IFFALSE 10400
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10383: CALL_OW 44
10387: PPUSH
10388: LD_INT 7
10390: PPUSH
10391: LD_INT 0
10393: PPUSH
10394: CALL_OW 49
10398: GO 10380
10400: POP
10401: POP
// PrepareFrog ;
10402: CALL 53328 0 0
// for i := 1 to 3 do
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: DOUBLE
10412: LD_INT 1
10414: DEC
10415: ST_TO_ADDR
10416: LD_INT 3
10418: PUSH
10419: FOR_TO
10420: IFFALSE 10439
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
10422: CALL_OW 44
10426: PPUSH
10427: LD_INT 8
10429: PPUSH
10430: LD_INT 0
10432: PPUSH
10433: CALL_OW 49
10437: GO 10419
10439: POP
10440: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
10441: LD_ADDR_VAR 0 4
10445: PUSH
10446: LD_INT 3
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: LD_OWVAR 67
10468: ARRAY
10469: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
10470: LD_ADDR_VAR 0 3
10474: PUSH
10475: LD_INT 18
10477: PUSH
10478: LD_INT 19
10480: PUSH
10481: LD_INT 20
10483: PUSH
10484: LD_INT 21
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: ST_TO_ADDR
// PrepareMastodont ;
10493: CALL 53488 0 0
// for i := 1 to amount do
10497: LD_ADDR_VAR 0 2
10501: PUSH
10502: DOUBLE
10503: LD_INT 1
10505: DEC
10506: ST_TO_ADDR
10507: LD_VAR 0 4
10511: PUSH
10512: FOR_TO
10513: IFFALSE 10550
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
10515: CALL_OW 45
10519: PPUSH
10520: LD_VAR 0 3
10524: PUSH
10525: LD_VAR 0 2
10529: PUSH
10530: LD_INT 1
10532: MINUS
10533: PUSH
10534: LD_OWVAR 67
10538: PLUS
10539: ARRAY
10540: PPUSH
10541: LD_INT 0
10543: PPUSH
10544: CALL_OW 49
10548: GO 10512
10550: POP
10551: POP
// PrepareApeman ( 0 ) ;
10552: LD_INT 0
10554: PPUSH
10555: CALL 53119 0 1
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
10559: LD_ADDR_VAR 0 2
10563: PUSH
10564: DOUBLE
10565: LD_INT 1
10567: DEC
10568: ST_TO_ADDR
10569: LD_INT 9
10571: PUSH
10572: LD_INT 7
10574: PUSH
10575: LD_INT 6
10577: PUSH
10578: LD_INT 5
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: LD_OWVAR 67
10591: ARRAY
10592: PUSH
10593: FOR_TO
10594: IFFALSE 10613
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
10596: CALL_OW 44
10600: PPUSH
10601: LD_INT 6
10603: PPUSH
10604: LD_INT 0
10606: PPUSH
10607: CALL_OW 49
10611: GO 10593
10613: POP
10614: POP
// for i := 1 to 3 do
10615: LD_ADDR_VAR 0 2
10619: PUSH
10620: DOUBLE
10621: LD_INT 1
10623: DEC
10624: ST_TO_ADDR
10625: LD_INT 3
10627: PUSH
10628: FOR_TO
10629: IFFALSE 10654
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 6 , false ) ;
10631: CALL_OW 44
10635: PPUSH
10636: LD_INT 274
10638: PPUSH
10639: LD_INT 133
10641: PPUSH
10642: LD_INT 6
10644: PPUSH
10645: LD_INT 0
10647: PPUSH
10648: CALL_OW 50
10652: GO 10628
10654: POP
10655: POP
// end ;
10656: LD_VAR 0 1
10660: RET
// export function AreInArea ( units , area ) ; var i ; begin
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
// result := false ;
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_INT 0
10672: ST_TO_ADDR
// if not units then
10673: LD_VAR 0 1
10677: NOT
10678: IFFALSE 10682
// exit ;
10680: GO 10748
// for i in units do
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_VAR 0 1
10691: PUSH
10692: FOR_IN
10693: IFFALSE 10746
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
10695: LD_VAR 0 4
10699: PPUSH
10700: LD_VAR 0 2
10704: PPUSH
10705: CALL_OW 308
10709: PUSH
10710: LD_VAR 0 4
10714: PPUSH
10715: CALL_OW 310
10719: PPUSH
10720: LD_VAR 0 2
10724: PPUSH
10725: CALL_OW 308
10729: OR
10730: IFFALSE 10744
// begin result := true ;
10732: LD_ADDR_VAR 0 3
10736: PUSH
10737: LD_INT 1
10739: ST_TO_ADDR
// exit ;
10740: POP
10741: POP
10742: GO 10748
// end ;
10744: GO 10692
10746: POP
10747: POP
// end ; end_of_file
10748: LD_VAR 0 3
10752: RET
// export function Action ; var i , mech , veh , amTroops ; begin
10753: LD_INT 0
10755: PPUSH
10756: PPUSH
10757: PPUSH
10758: PPUSH
10759: PPUSH
// InGameOn ;
10760: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
10764: LD_INT 84
10766: PPUSH
10767: LD_INT 28
10769: PPUSH
10770: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
10774: LD_INT 2
10776: PPUSH
10777: LD_INT 9
10779: PPUSH
10780: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
10784: LD_EXP 21
10788: PPUSH
10789: LD_INT 90
10791: PPUSH
10792: LD_INT 30
10794: PPUSH
10795: CALL_OW 111
// uc_side := 1 ;
10799: LD_ADDR_OWVAR 20
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// uc_nation := nation_american ;
10807: LD_ADDR_OWVAR 21
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
10815: LD_INT 3
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: LD_INT 1
10823: PPUSH
10824: LD_INT 9
10826: PPUSH
10827: LD_INT 66
10829: PPUSH
10830: CALL 23989 0 5
// veh := CreateVehicle ;
10834: LD_ADDR_VAR 0 4
10838: PUSH
10839: CALL_OW 45
10843: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
10844: LD_VAR 0 4
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
10856: LD_VAR 0 4
10860: PPUSH
10861: LD_INT 80
10863: PPUSH
10864: LD_INT 27
10866: PPUSH
10867: LD_INT 0
10869: PPUSH
10870: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
10874: LD_INT 1
10876: PPUSH
10877: LD_INT 8
10879: PPUSH
10880: CALL_OW 383
// mech := CreateHuman ;
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: CALL_OW 44
10893: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_VAR 0 4
10903: PPUSH
10904: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
10908: LD_INT 35
10910: PPUSH
10911: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
10915: LD_INT 90
10917: PPUSH
10918: LD_INT 30
10920: PPUSH
10921: CALL_OW 428
10925: IFFALSE 10908
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
10927: LD_INT 80
10929: PPUSH
10930: LD_INT 27
10932: PPUSH
10933: LD_INT 2
10935: PPUSH
10936: LD_INT 6
10938: NEG
10939: PPUSH
10940: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
10944: LD_INT 80
10946: PPUSH
10947: LD_INT 27
10949: PPUSH
10950: CALL_OW 86
// DialogueOn ;
10954: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
10958: LD_EXP 21
10962: PPUSH
10963: LD_STRING DH-Start-1
10965: PPUSH
10966: CALL_OW 88
// DialogueOff ;
10970: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
10974: LD_EXP 21
10978: PPUSH
10979: LD_VAR 0 4
10983: PPUSH
10984: CALL_OW 115
// wait ( 0 0$1 ) ;
10988: LD_INT 35
10990: PPUSH
10991: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
10995: LD_EXP 21
10999: PPUSH
11000: CALL_OW 310
11004: PPUSH
11005: LD_INT 200
11007: PPUSH
11008: CALL_OW 234
// wait ( 0 0$0.3 ) ;
11012: LD_INT 10
11014: PPUSH
11015: CALL_OW 67
// DialogueOn ;
11019: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
11023: LD_EXP 21
11027: PPUSH
11028: LD_STRING DH-Start-2
11030: PPUSH
11031: CALL_OW 88
// DialogueOff ;
11035: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11039: LD_EXP 21
11043: PPUSH
11044: LD_VAR 0 4
11048: PPUSH
11049: CALL_OW 115
// wait ( 0 0$0.2 ) ;
11053: LD_INT 7
11055: PPUSH
11056: CALL_OW 67
// ComCrawl ( Heike ) ;
11060: LD_EXP 21
11064: PPUSH
11065: CALL_OW 137
// wait ( 0 0$3 ) ;
11069: LD_INT 105
11071: PPUSH
11072: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
11076: LD_EXP 24
11080: PPUSH
11081: LD_INT 82
11083: PPUSH
11084: LD_INT 43
11086: PPUSH
11087: LD_INT 0
11089: PPUSH
11090: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
11094: LD_EXP 22
11098: PPUSH
11099: LD_EXP 24
11103: PPUSH
11104: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
11108: LD_EXP 22
11112: PPUSH
11113: LD_INT 79
11115: PPUSH
11116: LD_INT 32
11118: PPUSH
11119: CALL_OW 111
// wait ( 0 0$1 ) ;
11123: LD_INT 35
11125: PPUSH
11126: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
11130: LD_INT 5
11132: PPUSH
11133: LD_INT 2
11135: PPUSH
11136: CALL_OW 343
// wait ( 0 0$3 ) ;
11140: LD_INT 105
11142: PPUSH
11143: CALL_OW 67
// SetLives ( veh , 200 ) ;
11147: LD_VAR 0 4
11151: PPUSH
11152: LD_INT 200
11154: PPUSH
11155: CALL_OW 234
// wait ( 0 0$1 ) ;
11159: LD_INT 35
11161: PPUSH
11162: CALL_OW 67
// SetLives ( mech , 10 ) ;
11166: LD_VAR 0 3
11170: PPUSH
11171: LD_INT 10
11173: PPUSH
11174: CALL_OW 234
// wait ( 0 0$2 ) ;
11178: LD_INT 70
11180: PPUSH
11181: CALL_OW 67
// ComWalk ( Heike ) ;
11185: LD_EXP 21
11189: PPUSH
11190: CALL_OW 138
// wait ( 1 ) ;
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
11201: LD_EXP 21
11205: PPUSH
11206: LD_INT 81
11208: PPUSH
11209: LD_INT 25
11211: PPUSH
11212: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
11216: LD_EXP 21
11220: PPUSH
11221: LD_INT 72
11223: PPUSH
11224: LD_INT 25
11226: PPUSH
11227: CALL_OW 171
// wait ( 0 0$3 ) ;
11231: LD_INT 105
11233: PPUSH
11234: CALL_OW 67
// ComExitVehicle ( Omar ) ;
11238: LD_EXP 22
11242: PPUSH
11243: CALL_OW 121
// wait ( 1 ) ;
11247: LD_INT 1
11249: PPUSH
11250: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
11254: LD_EXP 22
11258: PPUSH
11259: LD_INT 77
11261: PPUSH
11262: LD_INT 28
11264: PPUSH
11265: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
11269: LD_EXP 22
11273: PPUSH
11274: LD_EXP 21
11278: PPUSH
11279: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
11283: LD_EXP 22
11287: PPUSH
11288: LD_STRING DO-Start-3
11290: PPUSH
11291: CALL_OW 88
// repeat wait ( 3 ) ;
11295: LD_INT 3
11297: PPUSH
11298: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
11302: LD_EXP 21
11306: PPUSH
11307: LD_INT 72
11309: PPUSH
11310: LD_INT 25
11312: PPUSH
11313: CALL_OW 307
11317: IFFALSE 11295
// ComHold ( Heike ) ;
11319: LD_EXP 21
11323: PPUSH
11324: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
11328: LD_EXP 22
11332: PPUSH
11333: LD_EXP 21
11337: PPUSH
11338: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
11342: LD_EXP 21
11346: PPUSH
11347: LD_EXP 22
11351: PPUSH
11352: CALL_OW 112
// wait ( 0 0$1 ) ;
11356: LD_INT 35
11358: PPUSH
11359: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
11363: LD_EXP 21
11367: PPUSH
11368: LD_EXP 22
11372: PPUSH
11373: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
11377: LD_EXP 21
11381: PPUSH
11382: LD_STRING DH-Start-4
11384: PPUSH
11385: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
11389: LD_EXP 22
11393: PPUSH
11394: LD_STRING DO-Start-5
11396: PPUSH
11397: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
11401: LD_EXP 21
11405: PPUSH
11406: LD_STRING DH-Start-6
11408: PPUSH
11409: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
11413: LD_EXP 22
11417: PPUSH
11418: LD_STRING DO-Start-7
11420: PPUSH
11421: CALL_OW 88
// if Query ( QOmar ) = 2 then
11425: LD_STRING QOmar
11427: PPUSH
11428: CALL_OW 97
11432: PUSH
11433: LD_INT 2
11435: EQUAL
11436: IFFALSE 11724
// begin Say ( Heike , DH-QuestionN-1 ) ;
11438: LD_EXP 21
11442: PPUSH
11443: LD_STRING DH-QuestionN-1
11445: PPUSH
11446: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
11450: LD_EXP 21
11454: PPUSH
11455: LD_INT 58
11457: PPUSH
11458: LD_INT 27
11460: PPUSH
11461: CALL_OW 111
// wait ( 0 0$2 ) ;
11465: LD_INT 70
11467: PPUSH
11468: CALL_OW 67
// ChangeSideFog ( 5 , 5 ) ;
11472: LD_INT 5
11474: PPUSH
11475: LD_INT 5
11477: PPUSH
11478: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
11482: LD_INT 80
11484: PPUSH
11485: LD_INT 27
11487: PPUSH
11488: LD_INT 2
11490: PPUSH
11491: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
11495: LD_INT 58
11497: PPUSH
11498: LD_INT 27
11500: PPUSH
11501: CALL_OW 84
// repeat wait ( 3 ) ;
11505: LD_INT 3
11507: PPUSH
11508: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
11512: LD_EXP 21
11516: PPUSH
11517: LD_INT 88
11519: PPUSH
11520: LD_INT 27
11522: PPUSH
11523: CALL_OW 297
11527: IFFALSE 11505
// uc_side := 1 ;
11529: LD_ADDR_OWVAR 20
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// uc_nation := nation_american ;
11537: LD_ADDR_OWVAR 21
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// amTroops := [ ] ;
11545: LD_ADDR_VAR 0 5
11549: PUSH
11550: EMPTY
11551: ST_TO_ADDR
// for i := 1 to 3 do
11552: LD_ADDR_VAR 0 2
11556: PUSH
11557: DOUBLE
11558: LD_INT 1
11560: DEC
11561: ST_TO_ADDR
11562: LD_INT 3
11564: PUSH
11565: FOR_TO
11566: IFFALSE 11659
// begin PrepareSoldier ( false , 10 ) ;
11568: LD_INT 0
11570: PPUSH
11571: LD_INT 10
11573: PPUSH
11574: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
11578: LD_ADDR_VAR 0 5
11582: PUSH
11583: LD_VAR 0 5
11587: PPUSH
11588: CALL_OW 44
11592: PPUSH
11593: CALL 56838 0 2
11597: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
11598: LD_VAR 0 5
11602: PUSH
11603: LD_VAR 0 2
11607: ARRAY
11608: PPUSH
11609: LD_INT 2
11611: PPUSH
11612: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
11616: LD_VAR 0 5
11620: PUSH
11621: LD_VAR 0 2
11625: ARRAY
11626: PPUSH
11627: LD_INT 10
11629: PPUSH
11630: LD_INT 0
11632: PPUSH
11633: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
11637: LD_VAR 0 5
11641: PUSH
11642: LD_VAR 0 2
11646: ARRAY
11647: PPUSH
11648: LD_EXP 21
11652: PPUSH
11653: CALL_OW 115
// end ;
11657: GO 11565
11659: POP
11660: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
11661: LD_EXP 21
11665: PPUSH
11666: LD_VAR 0 5
11670: PUSH
11671: LD_INT 1
11673: ARRAY
11674: PPUSH
11675: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
11679: LD_INT 35
11681: PPUSH
11682: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
11686: LD_EXP 21
11690: PPUSH
11691: CALL_OW 301
11695: PUSH
11696: LD_EXP 21
11700: PPUSH
11701: CALL_OW 303
11705: OR
11706: IFFALSE 11679
// wait ( 0 0$2 ) ;
11708: LD_INT 70
11710: PPUSH
11711: CALL_OW 67
// YouLost ( Heike ) ;
11715: LD_STRING Heike
11717: PPUSH
11718: CALL_OW 104
// exit ;
11722: GO 12598
// end ; Say ( Heike , DH-QuestionY-1 ) ;
11724: LD_EXP 21
11728: PPUSH
11729: LD_STRING DH-QuestionY-1
11731: PPUSH
11732: CALL_OW 88
// wait ( 0 0$0.3 ) ;
11736: LD_INT 10
11738: PPUSH
11739: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
11743: LD_EXP 22
11747: PPUSH
11748: LD_STRING DO-Story-1
11750: PPUSH
11751: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
11755: LD_EXP 22
11759: PPUSH
11760: LD_STRING DO-Story-2
11762: PPUSH
11763: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
11767: LD_EXP 22
11771: PPUSH
11772: LD_STRING DO-Story-3
11774: PPUSH
11775: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
11779: LD_EXP 22
11783: PPUSH
11784: LD_STRING DO-Story-4
11786: PPUSH
11787: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
11791: LD_EXP 21
11795: PPUSH
11796: LD_STRING DH-Story-5
11798: PPUSH
11799: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
11803: LD_EXP 22
11807: PPUSH
11808: LD_STRING DO-Story-6
11810: PPUSH
11811: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
11815: LD_EXP 22
11819: PPUSH
11820: LD_STRING DO-Story-7
11822: PPUSH
11823: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
11827: LD_EXP 21
11831: PPUSH
11832: LD_INT 82
11834: PPUSH
11835: LD_INT 44
11837: PPUSH
11838: CALL_OW 111
// AddComHold ( Heike ) ;
11842: LD_EXP 21
11846: PPUSH
11847: CALL_OW 200
// wait ( 0 0$4 ) ;
11851: LD_INT 140
11853: PPUSH
11854: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
11858: LD_EXP 22
11862: PPUSH
11863: LD_INT 82
11865: PPUSH
11866: LD_INT 41
11868: PPUSH
11869: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
11873: LD_EXP 22
11877: PPUSH
11878: LD_EXP 21
11882: PPUSH
11883: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
11887: LD_INT 35
11889: PPUSH
11890: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
11894: LD_EXP 21
11898: PPUSH
11899: LD_INT 82
11901: PPUSH
11902: LD_INT 44
11904: PPUSH
11905: CALL_OW 307
11909: IFFALSE 11887
// ComTurnXY ( Heike , 81 , 47 ) ;
11911: LD_EXP 21
11915: PPUSH
11916: LD_INT 81
11918: PPUSH
11919: LD_INT 47
11921: PPUSH
11922: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
11926: LD_EXP 21
11930: PPUSH
11931: LD_STRING DH-Story-8
11933: PPUSH
11934: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
11938: LD_EXP 22
11942: PPUSH
11943: LD_STRING DO-Story-9
11945: PPUSH
11946: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
11950: LD_EXP 22
11954: PPUSH
11955: LD_STRING DO-Story-10
11957: PPUSH
11958: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
11962: LD_EXP 21
11966: PPUSH
11967: LD_EXP 22
11971: PPUSH
11972: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
11976: LD_EXP 21
11980: PPUSH
11981: LD_STRING DH-Story-11
11983: PPUSH
11984: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
11988: LD_EXP 22
11992: PPUSH
11993: LD_EXP 21
11997: PPUSH
11998: CALL_OW 112
// wait ( 0 0$0.3 ) ;
12002: LD_INT 10
12004: PPUSH
12005: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12009: LD_EXP 22
12013: PPUSH
12014: LD_EXP 21
12018: PPUSH
12019: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
12023: LD_EXP 22
12027: PPUSH
12028: LD_STRING DO-Story-12
12030: PPUSH
12031: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
12035: LD_EXP 21
12039: PPUSH
12040: LD_STRING DH-Story-13
12042: PPUSH
12043: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
12047: LD_EXP 22
12051: PPUSH
12052: LD_STRING DO-Story-14
12054: PPUSH
12055: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
12059: LD_EXP 22
12063: PPUSH
12064: LD_STRING DO-Story-15
12066: PPUSH
12067: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
12071: LD_INT 84
12073: PPUSH
12074: LD_INT 48
12076: PPUSH
12077: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
12081: LD_EXP 21
12085: PPUSH
12086: LD_INT 84
12088: PPUSH
12089: LD_INT 48
12091: PPUSH
12092: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
12096: LD_EXP 21
12100: PPUSH
12101: LD_INT 84
12103: PPUSH
12104: LD_INT 49
12106: PPUSH
12107: CALL_OW 178
// wait ( 0 0$1 ) ;
12111: LD_INT 35
12113: PPUSH
12114: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
12118: LD_EXP 22
12122: PPUSH
12123: LD_EXP 21
12127: PPUSH
12128: CALL_OW 112
// wait ( 0 0$1 ) ;
12132: LD_INT 35
12134: PPUSH
12135: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12139: LD_EXP 22
12143: PPUSH
12144: LD_EXP 21
12148: PPUSH
12149: CALL_OW 119
// wait ( 0 0$0.3 ) ;
12153: LD_INT 10
12155: PPUSH
12156: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
12160: LD_EXP 22
12164: PPUSH
12165: LD_STRING DO-Story-16
12167: PPUSH
12168: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
12172: LD_STRING QOmar2
12174: PPUSH
12175: CALL_OW 97
12179: PUSH
12180: LD_INT 2
12182: EQUAL
12183: IFFALSE 12478
// begin ComMoveXY ( Heike , 79 , 57 ) ;
12185: LD_EXP 21
12189: PPUSH
12190: LD_INT 79
12192: PPUSH
12193: LD_INT 57
12195: PPUSH
12196: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
12200: LD_EXP 21
12204: PPUSH
12205: LD_INT 68
12207: PPUSH
12208: LD_INT 53
12210: PPUSH
12211: CALL_OW 171
// wait ( 0 0$2 ) ;
12215: LD_INT 70
12217: PPUSH
12218: CALL_OW 67
// ChangeSideFog ( 5 , 5 ) ;
12222: LD_INT 5
12224: PPUSH
12225: LD_INT 5
12227: PPUSH
12228: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
12232: LD_INT 80
12234: PPUSH
12235: LD_INT 27
12237: PPUSH
12238: LD_INT 2
12240: PPUSH
12241: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
12245: LD_INT 68
12247: PPUSH
12248: LD_INT 53
12250: PPUSH
12251: CALL_OW 84
// repeat wait ( 3 ) ;
12255: LD_INT 3
12257: PPUSH
12258: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
12262: LD_EXP 21
12266: PPUSH
12267: LD_INT 68
12269: PPUSH
12270: LD_INT 53
12272: PPUSH
12273: CALL_OW 297
12277: PUSH
12278: LD_INT 6
12280: LESS
12281: IFFALSE 12255
// uc_side := 1 ;
12283: LD_ADDR_OWVAR 20
12287: PUSH
12288: LD_INT 1
12290: ST_TO_ADDR
// uc_nation := nation_american ;
12291: LD_ADDR_OWVAR 21
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// amTroops := [ ] ;
12299: LD_ADDR_VAR 0 5
12303: PUSH
12304: EMPTY
12305: ST_TO_ADDR
// for i := 1 to 3 do
12306: LD_ADDR_VAR 0 2
12310: PUSH
12311: DOUBLE
12312: LD_INT 1
12314: DEC
12315: ST_TO_ADDR
12316: LD_INT 3
12318: PUSH
12319: FOR_TO
12320: IFFALSE 12413
// begin PrepareSoldier ( false , 10 ) ;
12322: LD_INT 0
12324: PPUSH
12325: LD_INT 10
12327: PPUSH
12328: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12332: LD_ADDR_VAR 0 5
12336: PUSH
12337: LD_VAR 0 5
12341: PPUSH
12342: CALL_OW 44
12346: PPUSH
12347: CALL 56838 0 2
12351: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12352: LD_VAR 0 5
12356: PUSH
12357: LD_VAR 0 2
12361: ARRAY
12362: PPUSH
12363: LD_INT 2
12365: PPUSH
12366: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
12370: LD_VAR 0 5
12374: PUSH
12375: LD_VAR 0 2
12379: ARRAY
12380: PPUSH
12381: LD_INT 11
12383: PPUSH
12384: LD_INT 0
12386: PPUSH
12387: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12391: LD_VAR 0 5
12395: PUSH
12396: LD_VAR 0 2
12400: ARRAY
12401: PPUSH
12402: LD_EXP 21
12406: PPUSH
12407: CALL_OW 115
// end ;
12411: GO 12319
12413: POP
12414: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12415: LD_EXP 21
12419: PPUSH
12420: LD_VAR 0 5
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12433: LD_INT 35
12435: PPUSH
12436: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12440: LD_EXP 21
12444: PPUSH
12445: CALL_OW 301
12449: PUSH
12450: LD_EXP 21
12454: PPUSH
12455: CALL_OW 303
12459: OR
12460: IFFALSE 12433
// wait ( 0 0$2 ) ;
12462: LD_INT 70
12464: PPUSH
12465: CALL_OW 67
// YouLost ( Heike ) ;
12469: LD_STRING Heike
12471: PPUSH
12472: CALL_OW 104
// exit ;
12476: GO 12598
// end ; Say ( Omar , DO-Objective-1 ) ;
12478: LD_EXP 22
12482: PPUSH
12483: LD_STRING DO-Objective-1
12485: PPUSH
12486: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
12490: LD_EXP 21
12494: PPUSH
12495: LD_EXP 22
12499: PPUSH
12500: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
12504: LD_EXP 21
12508: PPUSH
12509: LD_STRING DH-Objective-2
12511: PPUSH
12512: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
12516: LD_EXP 22
12520: PPUSH
12521: LD_STRING DO-Objective-3
12523: PPUSH
12524: CALL_OW 88
// ChangeSideFog ( 5 , 5 ) ;
12528: LD_INT 5
12530: PPUSH
12531: LD_INT 5
12533: PPUSH
12534: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
12538: LD_INT 80
12540: PPUSH
12541: LD_INT 27
12543: PPUSH
12544: LD_INT 2
12546: PPUSH
12547: CALL_OW 331
// SetSide ( Omar , 2 ) ;
12551: LD_EXP 22
12555: PPUSH
12556: LD_INT 2
12558: PPUSH
12559: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
12563: LD_EXP 24
12567: PPUSH
12568: LD_INT 2
12570: PPUSH
12571: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
12575: LD_STRING O1
12577: PPUSH
12578: CALL_OW 337
// InGameOff ;
12582: CALL_OW 9
// gameActive := true ;
12586: LD_ADDR_EXP 19
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// SaveForQuickRestart ;
12594: CALL_OW 22
// end ;
12598: LD_VAR 0 1
12602: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
12603: LD_EXP 19
12607: PUSH
12608: LD_EXP 7
12612: NOT
12613: AND
12614: PUSH
12615: LD_INT 4
12617: PPUSH
12618: LD_INT 22
12620: PUSH
12621: LD_INT 2
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PPUSH
12628: CALL_OW 70
12632: AND
12633: IFFALSE 12784
12635: GO 12637
12637: DISABLE
12638: LD_INT 0
12640: PPUSH
// begin spotArabianBase := true ;
12641: LD_ADDR_EXP 7
12645: PUSH
12646: LD_INT 1
12648: ST_TO_ADDR
// DialogueOn ;
12649: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
12653: LD_INT 232
12655: PPUSH
12656: LD_INT 101
12658: PPUSH
12659: LD_INT 2
12661: PPUSH
12662: LD_INT 22
12664: NEG
12665: PPUSH
12666: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
12670: LD_INT 232
12672: PPUSH
12673: LD_INT 101
12675: PPUSH
12676: LD_INT 2
12678: PPUSH
12679: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
12683: LD_INT 232
12685: PPUSH
12686: LD_INT 101
12688: PPUSH
12689: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
12693: LD_ADDR_VAR 0 1
12697: PUSH
12698: LD_INT 4
12700: PPUSH
12701: LD_INT 22
12703: PUSH
12704: LD_INT 5
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PPUSH
12711: CALL_OW 70
12715: PUSH
12716: FOR_IN
12717: IFFALSE 12733
// SetSide ( i , 2 ) ;
12719: LD_VAR 0 1
12723: PPUSH
12724: LD_INT 2
12726: PPUSH
12727: CALL_OW 235
12731: GO 12716
12733: POP
12734: POP
// if not spotAmericanBase then
12735: LD_EXP 6
12739: NOT
12740: IFFALSE 12756
// Say ( Omar , DO-ArBase-1a ) else
12742: LD_EXP 22
12746: PPUSH
12747: LD_STRING DO-ArBase-1a
12749: PPUSH
12750: CALL_OW 88
12754: GO 12768
// Say ( Omar , DO-ArBase-1b ) ;
12756: LD_EXP 22
12760: PPUSH
12761: LD_STRING DO-ArBase-1b
12763: PPUSH
12764: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
12768: LD_EXP 21
12772: PPUSH
12773: LD_STRING DH-ArBase-2
12775: PPUSH
12776: CALL_OW 88
// DialogueOff ;
12780: CALL_OW 7
// end ;
12784: PPOPN 1
12786: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
12787: LD_EXP 19
12791: PUSH
12792: LD_INT 87
12794: PPUSH
12795: CALL_OW 306
12799: PUSH
12800: LD_INT 87
12802: PPUSH
12803: CALL_OW 313
12807: OR
12808: AND
12809: PUSH
12810: LD_EXP 21
12814: PPUSH
12815: CALL_OW 302
12819: AND
12820: PUSH
12821: LD_EXP 22
12825: PPUSH
12826: CALL_OW 302
12830: AND
12831: IFFALSE 12965
12833: GO 12835
12835: DISABLE
// begin DialogueOn ;
12836: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
12840: LD_EXP 21
12844: PPUSH
12845: LD_STRING DH-Fac-1
12847: PPUSH
12848: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
12852: LD_EXP 22
12856: PPUSH
12857: LD_STRING DOm-Fac-2
12859: PPUSH
12860: CALL_OW 88
// if TestCharacters ( 09_Markov ) then
12864: LD_STRING 09_Markov
12866: PPUSH
12867: CALL_OW 28
12871: IFFALSE 12887
// Say ( Heike , DH-Fac-3a ) else
12873: LD_EXP 21
12877: PPUSH
12878: LD_STRING DH-Fac-3a
12880: PPUSH
12881: CALL_OW 88
12885: GO 12954
// if TestCharacters ( 09_Olaf ) then
12887: LD_STRING 09_Olaf
12889: PPUSH
12890: CALL_OW 28
12894: IFFALSE 12910
// Say ( Heike , DH-Fac-3b ) else
12896: LD_EXP 21
12900: PPUSH
12901: LD_STRING DH-Fac-3b
12903: PPUSH
12904: CALL_OW 88
12908: GO 12954
// if GetSkill ( Heike , skill_mechanical ) > 5 then
12910: LD_EXP 21
12914: PPUSH
12915: LD_INT 3
12917: PPUSH
12918: CALL_OW 259
12922: PUSH
12923: LD_INT 5
12925: GREATER
12926: IFFALSE 12942
// Say ( Heike , DH-Fac-3c ) else
12928: LD_EXP 21
12932: PPUSH
12933: LD_STRING DH-Fac-3c
12935: PPUSH
12936: CALL_OW 88
12940: GO 12954
// Say ( Heike , DH-Fac-3d ) ;
12942: LD_EXP 21
12946: PPUSH
12947: LD_STRING DH-Fac-3d
12949: PPUSH
12950: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
12954: LD_STRING ARemote
12956: PPUSH
12957: CALL_OW 337
// DialogueOff ;
12961: CALL_OW 7
// end ;
12965: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
12966: LD_EXP 19
12970: PUSH
12971: LD_INT 89
12973: PPUSH
12974: CALL_OW 306
12978: PUSH
12979: LD_INT 89
12981: PPUSH
12982: CALL_OW 313
12986: OR
12987: AND
12988: PUSH
12989: LD_EXP 21
12993: PPUSH
12994: CALL_OW 302
12998: AND
12999: PUSH
13000: LD_EXP 22
13004: PPUSH
13005: CALL_OW 302
13009: AND
13010: IFFALSE 13238
13012: GO 13014
13014: DISABLE
// begin DialogueOn ;
13015: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
13019: LD_EXP 21
13023: PPUSH
13024: LD_STRING DH-Lab-1
13026: PPUSH
13027: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
13031: LD_EXP 22
13035: PPUSH
13036: LD_STRING DOm-Lab-2
13038: PPUSH
13039: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
13043: LD_STRING 09_Aviradze
13045: PPUSH
13046: CALL_OW 28
13050: IFFALSE 13105
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
13052: LD_INT 1
13054: PPUSH
13055: LD_INT 2
13057: PPUSH
13058: LD_INT 2
13060: PPUSH
13061: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
13065: LD_INT 2
13067: PPUSH
13068: LD_INT 2
13070: PPUSH
13071: LD_INT 2
13073: PPUSH
13074: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
13078: LD_INT 11
13080: PPUSH
13081: LD_INT 2
13083: PPUSH
13084: LD_INT 2
13086: PPUSH
13087: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
13091: LD_EXP 21
13095: PPUSH
13096: LD_STRING DH-Lab-4a
13098: PPUSH
13099: CALL_OW 88
// end else
13103: GO 13117
// Say ( Heike , DH-Lab-4b ) ;
13105: LD_EXP 21
13109: PPUSH
13110: LD_STRING DH-Lab-4b
13112: PPUSH
13113: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
13117: LD_STRING 05_DrugsTested
13119: PPUSH
13120: LD_EXP 1
13124: PPUSH
13125: CALL_OW 30
13129: IFFALSE 13156
// begin Say ( Heike , DH-Lab-5a ) ;
13131: LD_EXP 21
13135: PPUSH
13136: LD_STRING DH-Lab-5a
13138: PPUSH
13139: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
13143: LD_INT 5
13145: PPUSH
13146: LD_INT 2
13148: PPUSH
13149: LD_INT 2
13151: PPUSH
13152: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
13156: LD_STRING 09_ApeBrain
13158: PPUSH
13159: LD_EXP 1
13163: PPUSH
13164: CALL_OW 30
13168: IFFALSE 13207
// begin Say ( Heike , DH-Lab-6a ) ;
13170: LD_EXP 21
13174: PPUSH
13175: LD_STRING DH-Lab-6a
13177: PPUSH
13178: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
13182: LD_EXP 22
13186: PPUSH
13187: LD_STRING DOm-Lab-7a
13189: PPUSH
13190: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_researched ) ;
13194: LD_INT 4
13196: PPUSH
13197: LD_INT 2
13199: PPUSH
13200: LD_INT 2
13202: PPUSH
13203: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
13207: LD_STRING 09_ApeNeural
13209: PPUSH
13210: LD_EXP 1
13214: PPUSH
13215: CALL_OW 30
13219: IFFALSE 13234
// begin SetTech ( tech_apeNeural , 2 , state_researched ) ;
13221: LD_INT 3
13223: PPUSH
13224: LD_INT 2
13226: PPUSH
13227: LD_INT 2
13229: PPUSH
13230: CALL_OW 322
// end ; DialogueOff ;
13234: CALL_OW 7
// end ;
13238: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
13239: LD_EXP 19
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 25
13256: PUSH
13257: LD_INT 12
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PPUSH
13268: CALL_OW 69
13272: AND
13273: IFFALSE 13308
13275: GO 13277
13277: DISABLE
// begin if IsOk ( Heike ) then
13278: LD_EXP 21
13282: PPUSH
13283: CALL_OW 302
13287: IFFALSE 13301
// Say ( Heike , DH-Ape-1 ) ;
13289: LD_EXP 21
13293: PPUSH
13294: LD_STRING DH-Ape-1
13296: PPUSH
13297: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
13301: LD_STRING AApes
13303: PPUSH
13304: CALL_OW 337
// end ;
13308: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
13309: LD_EXP 19
13313: PUSH
13314: LD_INT 22
13316: PUSH
13317: LD_INT 2
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 25
13326: PUSH
13327: LD_INT 15
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PPUSH
13338: CALL_OW 69
13342: PUSH
13343: LD_INT 5
13345: GREATEREQUAL
13346: AND
13347: IFFALSE 13449
13349: GO 13351
13351: DISABLE
// begin hasApes := true ;
13352: LD_ADDR_EXP 16
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
13360: LD_STRING AApesOut
13362: PPUSH
13363: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
13367: LD_EXP 21
13371: PPUSH
13372: CALL_OW 302
13376: NOT
13377: PUSH
13378: LD_EXP 22
13382: PPUSH
13383: CALL_OW 302
13387: NOT
13388: OR
13389: IFFALSE 13393
// exit ;
13391: GO 13449
// DialogueOn ;
13393: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
13397: LD_EXP 21
13401: PPUSH
13402: LD_STRING DH-ApeArmy-1
13404: PPUSH
13405: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
13409: LD_EXP 22
13413: PPUSH
13414: LD_STRING DOm-ApeArmy-2
13416: PPUSH
13417: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING DH-ApeArmy-3
13428: PPUSH
13429: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
13433: LD_EXP 22
13437: PPUSH
13438: LD_STRING DOm-ApeArmy-4
13440: PPUSH
13441: CALL_OW 88
// DialogueOff ;
13445: CALL_OW 7
// end ;
13449: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
13450: LD_EXP 19
13454: PUSH
13455: LD_INT 5
13457: PPUSH
13458: LD_INT 2
13460: PPUSH
13461: CALL_OW 321
13465: PUSH
13466: LD_INT 2
13468: EQUAL
13469: AND
13470: IFFALSE 13506
13472: GO 13474
13474: DISABLE
// begin hasDrugs := true ;
13475: LD_ADDR_EXP 17
13479: PUSH
13480: LD_INT 1
13482: ST_TO_ADDR
// if IsOk ( Heike ) then
13483: LD_EXP 21
13487: PPUSH
13488: CALL_OW 302
13492: IFFALSE 13506
// Say ( Heike , DH-Stim-1 ) ;
13494: LD_EXP 21
13498: PPUSH
13499: LD_STRING DH-Stim-1
13501: PPUSH
13502: CALL_OW 88
// end ;
13506: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
13507: LD_EXP 19
13511: PUSH
13512: LD_INT 22
13514: PUSH
13515: LD_INT 2
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 25
13524: PUSH
13525: LD_INT 17
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PPUSH
13536: CALL_OW 69
13540: AND
13541: IFFALSE 13558
13543: GO 13545
13545: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
13546: LD_EXP 21
13550: PPUSH
13551: LD_STRING DH-Kamikadze-1
13553: PPUSH
13554: CALL_OW 88
13558: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
13559: LD_EXP 19
13563: PUSH
13564: LD_INT 22
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 31
13576: PUSH
13577: LD_INT 31
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: AND
13593: PUSH
13594: LD_EXP 22
13598: PPUSH
13599: CALL_OW 302
13603: AND
13604: PUSH
13605: LD_EXP 21
13609: PPUSH
13610: CALL_OW 302
13614: AND
13615: IFFALSE 13700
13617: GO 13619
13619: DISABLE
// begin InGameOn ;
13620: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
13624: LD_EXP 22
13628: PPUSH
13629: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
13633: LD_EXP 21
13637: PPUSH
13638: LD_STRING DH-Mastodont-1
13640: PPUSH
13641: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
13645: LD_EXP 22
13649: PPUSH
13650: LD_STRING DOm-Mastodont-2
13652: PPUSH
13653: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
13657: LD_EXP 21
13661: PPUSH
13662: LD_STRING DH-Mastodont-3
13664: PPUSH
13665: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
13669: LD_EXP 22
13673: PPUSH
13674: LD_STRING DOm-Mastodont-4
13676: PPUSH
13677: CALL_OW 88
// hasMastodont := true ;
13681: LD_ADDR_EXP 13
13685: PUSH
13686: LD_INT 1
13688: ST_TO_ADDR
// InGameOff ;
13689: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
13693: LD_STRING ACH_MASTODONTTAME
13695: PPUSH
13696: CALL_OW 543
// end ;
13700: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_tiger ] ] ) do
13701: LD_EXP 19
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 25
13718: PUSH
13719: LD_INT 14
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: AND
13735: IFFALSE 13747
13737: GO 13739
13739: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
13740: LD_STRING ACH_TIGERTAME
13742: PPUSH
13743: CALL_OW 543
13747: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_tiger ] ] ) > 1 do
13748: LD_EXP 19
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 14
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: PUSH
13782: LD_INT 1
13784: GREATER
13785: AND
13786: IFFALSE 13890
13788: GO 13790
13790: DISABLE
// begin hasTigers := true ;
13791: LD_ADDR_EXP 15
13795: PUSH
13796: LD_INT 1
13798: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
13799: LD_EXP 22
13803: PPUSH
13804: CALL_OW 302
13808: NOT
13809: PUSH
13810: LD_EXP 21
13814: PPUSH
13815: CALL_OW 302
13819: NOT
13820: OR
13821: IFFALSE 13825
// exit ;
13823: GO 13890
// CenterNowOnUnits ( Omar ) ;
13825: LD_EXP 22
13829: PPUSH
13830: CALL_OW 87
// DialogueOn ;
13834: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
13838: LD_EXP 22
13842: PPUSH
13843: LD_STRING DOm-Tiger-1
13845: PPUSH
13846: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
13850: LD_EXP 21
13854: PPUSH
13855: LD_STRING DH-Tiger-2
13857: PPUSH
13858: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
13862: LD_EXP 22
13866: PPUSH
13867: LD_STRING DOm-Tiger-3
13869: PPUSH
13870: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
13874: LD_EXP 21
13878: PPUSH
13879: LD_STRING DH-Tiger-4
13881: PPUSH
13882: CALL_OW 88
// DialogueOff ;
13886: CALL_OW 7
// end ;
13890: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
13891: LD_EXP 19
13895: PUSH
13896: LD_INT 22
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 50
13908: PUSH
13909: EMPTY
13910: LIST
13911: PUSH
13912: LD_INT 33
13914: PUSH
13915: LD_INT 2
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: PPUSH
13927: CALL_OW 69
13931: PUSH
13932: LD_INT 3
13934: GREATEREQUAL
13935: AND
13936: IFFALSE 13979
13938: GO 13940
13940: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
13941: LD_STRING ARemoteOut
13943: PPUSH
13944: CALL_OW 337
// hasVehicles := true ;
13948: LD_ADDR_EXP 14
13952: PUSH
13953: LD_INT 1
13955: ST_TO_ADDR
// if IsOk ( Heike ) then
13956: LD_EXP 21
13960: PPUSH
13961: CALL_OW 302
13965: IFFALSE 13979
// Say ( Heike , DH-Mechanic-1 ) ;
13967: LD_EXP 21
13971: PPUSH
13972: LD_STRING DH-Mechanic-1
13974: PPUSH
13975: CALL_OW 88
// end ;
13979: END
// every 0 0$1 trigger gameActive and FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) do
13980: LD_EXP 19
13984: PUSH
13985: LD_INT 29
13987: PPUSH
13988: LD_INT 22
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 70
14002: AND
14003: IFFALSE 14016
14005: GO 14007
14007: DISABLE
// spotAmericanBase := true ;
14008: LD_ADDR_EXP 6
14012: PUSH
14013: LD_INT 1
14015: ST_TO_ADDR
14016: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
14017: LD_EXP 19
14021: PUSH
14022: LD_EXP 6
14026: AND
14027: PUSH
14028: LD_EXP 22
14032: PPUSH
14033: CALL_OW 302
14037: AND
14038: PUSH
14039: LD_EXP 21
14043: PPUSH
14044: CALL_OW 302
14048: AND
14049: IFFALSE 14289
14051: GO 14053
14053: DISABLE
// begin DialogueOn ;
14054: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
14058: LD_INT 92
14060: PPUSH
14061: LD_INT 129
14063: PPUSH
14064: LD_INT 2
14066: PPUSH
14067: LD_INT 22
14069: NEG
14070: PPUSH
14071: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
14075: LD_INT 92
14077: PPUSH
14078: LD_INT 129
14080: PPUSH
14081: LD_INT 2
14083: PPUSH
14084: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
14088: LD_INT 92
14090: PPUSH
14091: LD_INT 129
14093: PPUSH
14094: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
14098: LD_INT 10
14100: PPUSH
14101: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
14105: LD_EXP 22
14109: PPUSH
14110: LD_STRING DO-AmBase-1
14112: PPUSH
14113: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
14117: LD_EXP 21
14121: PPUSH
14122: LD_STRING DH-AmBase-2
14124: PPUSH
14125: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
14129: LD_EXP 22
14133: PPUSH
14134: LD_STRING DO-AmBase-3
14136: PPUSH
14137: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
14141: LD_EXP 21
14145: PPUSH
14146: LD_STRING DH-AmBase-4
14148: PPUSH
14149: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
14153: LD_EXP 22
14157: PPUSH
14158: LD_STRING DO-AmBase-5
14160: PPUSH
14161: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
14165: LD_EXP 21
14169: PPUSH
14170: LD_STRING DH-AmBase-6
14172: PPUSH
14173: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
14177: LD_EXP 22
14181: PPUSH
14182: LD_STRING DO-AmBase-7
14184: PPUSH
14185: CALL_OW 88
// if not spotArabianBase then
14189: LD_EXP 7
14193: NOT
14194: IFFALSE 14210
// begin Say ( Omar , DO-AmBase-8a ) ;
14196: LD_EXP 22
14200: PPUSH
14201: LD_STRING DO-AmBase-8a
14203: PPUSH
14204: CALL_OW 88
// end else
14208: GO 14222
// begin Say ( Omar , DO-AmBase-8b ) ;
14210: LD_EXP 22
14214: PPUSH
14215: LD_STRING DO-AmBase-8b
14217: PPUSH
14218: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
14222: LD_EXP 21
14226: PPUSH
14227: CALL_OW 310
14231: IFFALSE 14249
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
14233: LD_EXP 21
14237: PPUSH
14238: CALL_OW 310
14242: PPUSH
14243: CALL_OW 87
14247: GO 14258
// CenterNowOnUnits ( Heike ) ;
14249: LD_EXP 21
14253: PPUSH
14254: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
14258: LD_EXP 21
14262: PPUSH
14263: LD_STRING DH-AmBase-9
14265: PPUSH
14266: CALL_OW 88
// DialogueOff ;
14270: CALL_OW 7
// spotByAmerican := true ;
14274: LD_ADDR_EXP 8
14278: PUSH
14279: LD_INT 1
14281: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
14282: LD_STRING O2
14284: PPUSH
14285: CALL_OW 337
// end ;
14289: END
// function TalkAboutLegion ; begin
14290: LD_INT 0
14292: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
14293: LD_EXP 21
14297: PPUSH
14298: LD_STRING DH-Legion-1
14300: PPUSH
14301: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
14305: LD_EXP 22
14309: PPUSH
14310: LD_STRING DOm-Legion-2
14312: PPUSH
14313: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
14317: LD_EXP 21
14321: PPUSH
14322: LD_STRING DH-Legion-3
14324: PPUSH
14325: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
14329: LD_EXP 22
14333: PPUSH
14334: LD_STRING DOm-Legion-4
14336: PPUSH
14337: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
14341: LD_EXP 21
14345: PPUSH
14346: LD_STRING DH-Legion-5
14348: PPUSH
14349: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
14353: LD_EXP 22
14357: PPUSH
14358: LD_STRING DOm-Legion-6
14360: PPUSH
14361: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
14365: LD_EXP 21
14369: PPUSH
14370: LD_STRING DH-Legion-7
14372: PPUSH
14373: CALL_OW 88
// end ;
14377: LD_VAR 0 1
14381: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
14382: LD_EXP 19
14386: PUSH
14387: LD_EXP 21
14391: PUSH
14392: LD_EXP 22
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PPUSH
14401: LD_INT 22
14403: PPUSH
14404: CALL 10661 0 2
14408: AND
14409: PUSH
14410: LD_EXP 9
14414: NOT
14415: AND
14416: PUSH
14417: LD_EXP 10
14421: NOT
14422: AND
14423: IFFALSE 14930
14425: GO 14427
14427: DISABLE
14428: LD_INT 0
14430: PPUSH
14431: PPUSH
14432: PPUSH
// begin uc_side := 8 ;
14433: LD_ADDR_OWVAR 20
14437: PUSH
14438: LD_INT 8
14440: ST_TO_ADDR
// uc_nation := nation_american ;
14441: LD_ADDR_OWVAR 21
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
14449: LD_INT 3
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: LD_INT 1
14457: PPUSH
14458: LD_INT 9
14460: PPUSH
14461: LD_INT 90
14463: PPUSH
14464: CALL 23989 0 5
// veh := CreateVehicle ;
14468: LD_ADDR_VAR 0 3
14472: PUSH
14473: CALL_OW 45
14477: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
14478: LD_ADDR_EXP 41
14482: PUSH
14483: LD_EXP 41
14487: PPUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: CALL 56838 0 2
14497: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
14498: LD_VAR 0 3
14502: PPUSH
14503: LD_INT 2
14505: PPUSH
14506: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 126
14517: PPUSH
14518: LD_INT 18
14520: PPUSH
14521: LD_INT 0
14523: PPUSH
14524: CALL_OW 48
// uc_nation := nation_arabian ;
14528: LD_ADDR_OWVAR 21
14532: PUSH
14533: LD_INT 2
14535: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
14536: LD_INT 0
14538: PPUSH
14539: LD_INT 6
14541: PUSH
14542: LD_INT 7
14544: PUSH
14545: LD_INT 8
14547: PUSH
14548: LD_INT 9
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: LD_OWVAR 67
14561: ARRAY
14562: PPUSH
14563: CALL_OW 383
// un := CreateHuman ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: CALL_OW 44
14576: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
14577: LD_ADDR_EXP 36
14581: PUSH
14582: LD_EXP 36
14586: PPUSH
14587: LD_VAR 0 2
14591: PPUSH
14592: CALL 56838 0 2
14596: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14597: LD_VAR 0 2
14601: PPUSH
14602: LD_VAR 0 3
14606: PPUSH
14607: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
14611: LD_INT 0
14613: PPUSH
14614: LD_INT 6
14616: PUSH
14617: LD_INT 7
14619: PUSH
14620: LD_INT 8
14622: PUSH
14623: LD_INT 9
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: PUSH
14632: LD_OWVAR 67
14636: ARRAY
14637: PPUSH
14638: CALL_OW 381
// for i := 1 to 3 do
14642: LD_ADDR_VAR 0 1
14646: PUSH
14647: DOUBLE
14648: LD_INT 1
14650: DEC
14651: ST_TO_ADDR
14652: LD_INT 3
14654: PUSH
14655: FOR_TO
14656: IFFALSE 14745
// begin un := CreateHuman ;
14658: LD_ADDR_VAR 0 2
14662: PUSH
14663: CALL_OW 44
14667: ST_TO_ADDR
// if i = 1 then
14668: LD_VAR 0 1
14672: PUSH
14673: LD_INT 1
14675: EQUAL
14676: IFFALSE 14690
// SetClass ( un , class_sniper ) ;
14678: LD_VAR 0 2
14682: PPUSH
14683: LD_INT 5
14685: PPUSH
14686: CALL_OW 336
// legEForces := Join ( legEForces , un ) ;
14690: LD_ADDR_EXP 36
14694: PUSH
14695: LD_EXP 36
14699: PPUSH
14700: LD_VAR 0 2
14704: PPUSH
14705: CALL 56838 0 2
14709: ST_TO_ADDR
// SetDir ( un , 2 ) ;
14710: LD_VAR 0 2
14714: PPUSH
14715: LD_INT 2
14717: PPUSH
14718: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
14722: LD_VAR 0 2
14726: PPUSH
14727: LD_INT 126
14729: PPUSH
14730: LD_INT 18
14732: PPUSH
14733: LD_INT 4
14735: PPUSH
14736: LD_INT 0
14738: PPUSH
14739: CALL_OW 50
// end ;
14743: GO 14655
14745: POP
14746: POP
// wait ( 0 0$01 ) ;
14747: LD_INT 35
14749: PPUSH
14750: CALL_OW 67
// DialogueOn ;
14754: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
14758: LD_INT 126
14760: PPUSH
14761: LD_INT 18
14763: PPUSH
14764: LD_INT 2
14766: PPUSH
14767: LD_INT 16
14769: NEG
14770: PPUSH
14771: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
14775: LD_INT 126
14777: PPUSH
14778: LD_INT 18
14780: PPUSH
14781: CALL_OW 86
// TalkAboutLegion ;
14785: CALL 14290 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
14789: LD_INT 126
14791: PPUSH
14792: LD_INT 18
14794: PPUSH
14795: LD_INT 2
14797: PPUSH
14798: CALL_OW 331
// DialogueOff ;
14802: CALL_OW 7
// spotLegion := true ;
14806: LD_ADDR_EXP 10
14810: PUSH
14811: LD_INT 1
14813: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
14814: LD_EXP 36
14818: PPUSH
14819: LD_INT 164
14821: PPUSH
14822: LD_INT 47
14824: PPUSH
14825: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
14829: LD_EXP 36
14833: PPUSH
14834: LD_INT 179
14836: PPUSH
14837: LD_INT 20
14839: PPUSH
14840: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
14844: LD_INT 35
14846: PPUSH
14847: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
14851: LD_EXP 36
14855: PPUSH
14856: LD_INT 60
14858: PUSH
14859: EMPTY
14860: LIST
14861: PPUSH
14862: CALL_OW 72
14866: NOT
14867: PUSH
14868: LD_EXP 36
14872: PPUSH
14873: LD_INT 50
14875: PUSH
14876: EMPTY
14877: LIST
14878: PPUSH
14879: CALL_OW 72
14883: NOT
14884: OR
14885: IFFALSE 14844
// if not UnitFilter ( legEForces , [ f_ok ] ) then
14887: LD_EXP 36
14891: PPUSH
14892: LD_INT 50
14894: PUSH
14895: EMPTY
14896: LIST
14897: PPUSH
14898: CALL_OW 72
14902: NOT
14903: IFFALSE 14907
// exit ;
14905: GO 14930
// legForces := legForces union legEForces ;
14907: LD_ADDR_EXP 35
14911: PUSH
14912: LD_EXP 35
14916: PUSH
14917: LD_EXP 36
14921: UNION
14922: ST_TO_ADDR
// legEForces := [ ] ;
14923: LD_ADDR_EXP 36
14927: PUSH
14928: EMPTY
14929: ST_TO_ADDR
// end ;
14930: PPOPN 3
14932: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
14933: LD_EXP 19
14937: PUSH
14938: LD_EXP 21
14942: PUSH
14943: LD_EXP 22
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: LD_INT 23
14954: PPUSH
14955: CALL 10661 0 2
14959: AND
14960: PUSH
14961: LD_EXP 9
14965: NOT
14966: AND
14967: PUSH
14968: LD_EXP 10
14972: NOT
14973: AND
14974: IFFALSE 15481
14976: GO 14978
14978: DISABLE
14979: LD_INT 0
14981: PPUSH
14982: PPUSH
14983: PPUSH
// begin uc_side := 8 ;
14984: LD_ADDR_OWVAR 20
14988: PUSH
14989: LD_INT 8
14991: ST_TO_ADDR
// uc_nation := nation_american ;
14992: LD_ADDR_OWVAR 21
14996: PUSH
14997: LD_INT 1
14999: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15000: LD_INT 3
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: LD_INT 9
15011: PPUSH
15012: LD_INT 90
15014: PPUSH
15015: CALL 23989 0 5
// veh := CreateVehicle ;
15019: LD_ADDR_VAR 0 3
15023: PUSH
15024: CALL_OW 45
15028: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15029: LD_ADDR_EXP 41
15033: PUSH
15034: LD_EXP 41
15038: PPUSH
15039: LD_VAR 0 3
15043: PPUSH
15044: CALL 56838 0 2
15048: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
15049: LD_VAR 0 3
15053: PPUSH
15054: LD_INT 3
15056: PPUSH
15057: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_INT 224
15068: PPUSH
15069: LD_INT 57
15071: PPUSH
15072: LD_INT 0
15074: PPUSH
15075: CALL_OW 48
// uc_nation := nation_arabian ;
15079: LD_ADDR_OWVAR 21
15083: PUSH
15084: LD_INT 2
15086: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15087: LD_INT 0
15089: PPUSH
15090: LD_INT 6
15092: PUSH
15093: LD_INT 7
15095: PUSH
15096: LD_INT 8
15098: PUSH
15099: LD_INT 9
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: PUSH
15108: LD_OWVAR 67
15112: ARRAY
15113: PPUSH
15114: CALL_OW 383
// un := CreateHuman ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: CALL_OW 44
15127: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15128: LD_ADDR_EXP 36
15132: PUSH
15133: LD_EXP 36
15137: PPUSH
15138: LD_VAR 0 2
15142: PPUSH
15143: CALL 56838 0 2
15147: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15148: LD_VAR 0 2
15152: PPUSH
15153: LD_VAR 0 3
15157: PPUSH
15158: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15162: LD_INT 0
15164: PPUSH
15165: LD_INT 6
15167: PUSH
15168: LD_INT 7
15170: PUSH
15171: LD_INT 8
15173: PUSH
15174: LD_INT 9
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: PUSH
15183: LD_OWVAR 67
15187: ARRAY
15188: PPUSH
15189: CALL_OW 381
// for i := 1 to 3 do
15193: LD_ADDR_VAR 0 1
15197: PUSH
15198: DOUBLE
15199: LD_INT 1
15201: DEC
15202: ST_TO_ADDR
15203: LD_INT 3
15205: PUSH
15206: FOR_TO
15207: IFFALSE 15296
// begin un := CreateHuman ;
15209: LD_ADDR_VAR 0 2
15213: PUSH
15214: CALL_OW 44
15218: ST_TO_ADDR
// if i = 1 then
15219: LD_VAR 0 1
15223: PUSH
15224: LD_INT 1
15226: EQUAL
15227: IFFALSE 15241
// SetClass ( un , class_sniper ) ;
15229: LD_VAR 0 2
15233: PPUSH
15234: LD_INT 5
15236: PPUSH
15237: CALL_OW 336
// legEForces := Join ( legEForces , un ) ;
15241: LD_ADDR_EXP 36
15245: PUSH
15246: LD_EXP 36
15250: PPUSH
15251: LD_VAR 0 2
15255: PPUSH
15256: CALL 56838 0 2
15260: ST_TO_ADDR
// SetDir ( un , 3 ) ;
15261: LD_VAR 0 2
15265: PPUSH
15266: LD_INT 3
15268: PPUSH
15269: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
15273: LD_VAR 0 2
15277: PPUSH
15278: LD_INT 224
15280: PPUSH
15281: LD_INT 57
15283: PPUSH
15284: LD_INT 4
15286: PPUSH
15287: LD_INT 0
15289: PPUSH
15290: CALL_OW 50
// end ;
15294: GO 15206
15296: POP
15297: POP
// wait ( 0 0$01 ) ;
15298: LD_INT 35
15300: PPUSH
15301: CALL_OW 67
// DialogueOn ;
15305: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
15309: LD_INT 224
15311: PPUSH
15312: LD_INT 57
15314: PPUSH
15315: LD_INT 2
15317: PPUSH
15318: LD_INT 16
15320: NEG
15321: PPUSH
15322: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
15326: LD_INT 224
15328: PPUSH
15329: LD_INT 57
15331: PPUSH
15332: CALL_OW 86
// TalkAboutLegion ;
15336: CALL 14290 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
15340: LD_INT 224
15342: PPUSH
15343: LD_INT 57
15345: PPUSH
15346: LD_INT 2
15348: PPUSH
15349: CALL_OW 331
// DialogueOff ;
15353: CALL_OW 7
// spotLegion := true ;
15357: LD_ADDR_EXP 10
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
15365: LD_EXP 36
15369: PPUSH
15370: LD_INT 164
15372: PPUSH
15373: LD_INT 47
15375: PPUSH
15376: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
15380: LD_EXP 36
15384: PPUSH
15385: LD_INT 179
15387: PPUSH
15388: LD_INT 20
15390: PPUSH
15391: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
15395: LD_INT 35
15397: PPUSH
15398: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
15402: LD_EXP 36
15406: PPUSH
15407: LD_INT 60
15409: PUSH
15410: EMPTY
15411: LIST
15412: PPUSH
15413: CALL_OW 72
15417: NOT
15418: PUSH
15419: LD_EXP 36
15423: PPUSH
15424: LD_INT 50
15426: PUSH
15427: EMPTY
15428: LIST
15429: PPUSH
15430: CALL_OW 72
15434: NOT
15435: OR
15436: IFFALSE 15395
// if not UnitFilter ( legEForces , [ f_ok ] ) then
15438: LD_EXP 36
15442: PPUSH
15443: LD_INT 50
15445: PUSH
15446: EMPTY
15447: LIST
15448: PPUSH
15449: CALL_OW 72
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 15481
// legForces := legForces union legEForces ;
15458: LD_ADDR_EXP 35
15462: PUSH
15463: LD_EXP 35
15467: PUSH
15468: LD_EXP 36
15472: UNION
15473: ST_TO_ADDR
// legEForces := [ ] ;
15474: LD_ADDR_EXP 36
15478: PUSH
15479: EMPTY
15480: ST_TO_ADDR
// end ;
15481: PPOPN 3
15483: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) ) and IsOk ( Heike ) and IsOk ( Omar ) and not spotByLegion do
15484: LD_EXP 19
15488: PUSH
15489: LD_INT 8
15491: PPUSH
15492: LD_EXP 22
15496: PPUSH
15497: CALL_OW 292
15501: PUSH
15502: LD_INT 8
15504: PPUSH
15505: LD_EXP 21
15509: PPUSH
15510: CALL_OW 292
15514: OR
15515: AND
15516: PUSH
15517: LD_EXP 21
15521: PPUSH
15522: CALL_OW 302
15526: AND
15527: PUSH
15528: LD_EXP 22
15532: PPUSH
15533: CALL_OW 302
15537: AND
15538: PUSH
15539: LD_EXP 9
15543: NOT
15544: AND
15545: IFFALSE 15686
15547: GO 15549
15549: DISABLE
// begin DialogueOn ;
15550: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
15554: LD_EXP 34
15558: PPUSH
15559: LD_STRING DF-Spot-1
15561: PPUSH
15562: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
15566: LD_EXP 21
15570: PPUSH
15571: LD_STRING DH-Spot-2
15573: PPUSH
15574: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
15578: LD_EXP 34
15582: PPUSH
15583: LD_STRING DF-Spot-3
15585: PPUSH
15586: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
15590: LD_EXP 21
15594: PPUSH
15595: LD_STRING DH-Spot-4
15597: PPUSH
15598: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
15602: LD_EXP 22
15606: PPUSH
15607: LD_STRING DOm-Spot-5
15609: PPUSH
15610: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
15614: LD_EXP 34
15618: PPUSH
15619: LD_STRING DF-Spot-6
15621: PPUSH
15622: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
15626: LD_EXP 34
15630: PPUSH
15631: LD_STRING DF-Spot-7
15633: PPUSH
15634: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
15638: LD_EXP 34
15642: PPUSH
15643: LD_STRING DF-Spot-8
15645: PPUSH
15646: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
15650: LD_EXP 21
15654: PPUSH
15655: LD_STRING DH-Spot-9
15657: PPUSH
15658: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
15662: LD_EXP 34
15666: PPUSH
15667: LD_STRING DF-Spot-10
15669: PPUSH
15670: CALL_OW 94
// DialogueOff ;
15674: CALL_OW 7
// spotByLegion := true ;
15678: LD_ADDR_EXP 9
15682: PUSH
15683: LD_INT 1
15685: ST_TO_ADDR
// end ;
15686: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
15687: LD_EXP 19
15691: PUSH
15692: LD_EXP 9
15696: PUSH
15697: LD_EXP 10
15701: OR
15702: AND
15703: IFFALSE 15715
15705: GO 15707
15707: DISABLE
// ChangeMissionObjectives ( O3 ) ;
15708: LD_STRING O3
15710: PPUSH
15711: CALL_OW 337
15715: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
15716: LD_EXP 19
15720: PUSH
15721: LD_INT 22
15723: PUSH
15724: LD_INT 8
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 21
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 50
15743: PUSH
15744: EMPTY
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: PPUSH
15752: CALL_OW 69
15756: PUSH
15757: LD_INT 0
15759: EQUAL
15760: AND
15761: IFFALSE 15845
15763: GO 15765
15765: DISABLE
// begin legScriptActive := false ;
15766: LD_ADDR_EXP 4
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
// legionDestroyed := true ;
15774: LD_ADDR_EXP 12
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// DialogueOn ;
15782: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
15786: LD_EXP 34
15790: PPUSH
15791: LD_STRING DF-LegDes-1
15793: PPUSH
15794: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
15798: LD_EXP 21
15802: PPUSH
15803: LD_STRING DH-LegDes-2
15805: PPUSH
15806: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
15810: LD_EXP 34
15814: PPUSH
15815: LD_STRING DF-LegDes-3
15817: PPUSH
15818: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
15822: LD_EXP 21
15826: PPUSH
15827: LD_STRING DH-LegDes-4
15829: PPUSH
15830: CALL_OW 88
// DialogueOff ;
15834: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
15838: LD_STRING O5
15840: PPUSH
15841: CALL_OW 337
// end ;
15845: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
15846: LD_EXP 19
15850: PUSH
15851: LD_EXP 25
15855: PPUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 50
15868: PUSH
15869: EMPTY
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 72
15880: PUSH
15881: LD_INT 6
15883: LESS
15884: AND
15885: IFFALSE 16116
15887: GO 15889
15889: DISABLE
15890: LD_INT 0
15892: PPUSH
15893: PPUSH
// begin amScriptActive := false ;
15894: LD_ADDR_EXP 3
15898: PUSH
15899: LD_INT 0
15901: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
15902: LD_ADDR_VAR 0 2
15906: PUSH
15907: LD_EXP 25
15911: PPUSH
15912: LD_INT 21
15914: PUSH
15915: LD_INT 1
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 50
15924: PUSH
15925: EMPTY
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 72
15936: ST_TO_ADDR
// for i in tmp do
15937: LD_ADDR_VAR 0 1
15941: PUSH
15942: LD_VAR 0 2
15946: PUSH
15947: FOR_IN
15948: IFFALSE 15976
// begin ComExit ( i ) ;
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL 57236 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
15959: LD_VAR 0 1
15963: PPUSH
15964: LD_INT 63
15966: PPUSH
15967: LD_INT 124
15969: PPUSH
15970: CALL_OW 171
// end ;
15974: GO 15947
15976: POP
15977: POP
// wait ( 0 0$2 ) ;
15978: LD_INT 70
15980: PPUSH
15981: CALL_OW 67
// americanDestroyed := true ;
15985: LD_ADDR_EXP 11
15989: PUSH
15990: LD_INT 1
15992: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15993: LD_INT 35
15995: PPUSH
15996: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16000: LD_ADDR_VAR 0 2
16004: PUSH
16005: LD_EXP 25
16009: PPUSH
16010: LD_INT 21
16012: PUSH
16013: LD_INT 1
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 50
16022: PUSH
16023: EMPTY
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PPUSH
16030: CALL_OW 72
16034: ST_TO_ADDR
// for i in tmp do
16035: LD_ADDR_VAR 0 1
16039: PUSH
16040: LD_VAR 0 2
16044: PUSH
16045: FOR_IN
16046: IFFALSE 16107
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
16048: LD_VAR 0 1
16052: PPUSH
16053: LD_INT 63
16055: PPUSH
16056: LD_INT 124
16058: PPUSH
16059: CALL_OW 307
16063: PUSH
16064: LD_VAR 0 1
16068: PPUSH
16069: LD_INT 25
16071: PPUSH
16072: CALL_OW 308
16076: OR
16077: IFFALSE 16090
// RemoveUnit ( i ) else
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 64
16088: GO 16105
// ComMoveXY ( i , 63 , 124 ) ;
16090: LD_VAR 0 1
16094: PPUSH
16095: LD_INT 63
16097: PPUSH
16098: LD_INT 124
16100: PPUSH
16101: CALL_OW 111
// end ;
16105: GO 16045
16107: POP
16108: POP
// until not tmp ;
16109: LD_VAR 0 2
16113: NOT
16114: IFFALSE 15993
// end ;
16116: PPOPN 2
16118: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
16119: LD_EXP 19
16123: PUSH
16124: LD_EXP 11
16128: AND
16129: PUSH
16130: LD_EXP 21
16134: PPUSH
16135: CALL_OW 302
16139: AND
16140: PUSH
16141: LD_EXP 22
16145: PPUSH
16146: CALL_OW 302
16150: AND
16151: IFFALSE 16641
16153: GO 16155
16155: DISABLE
16156: LD_INT 0
16158: PPUSH
16159: PPUSH
16160: PPUSH
// begin DialogueOn ;
16161: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
16165: LD_EXP 21
16169: PPUSH
16170: LD_STRING DH-Victory-1
16172: PPUSH
16173: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
16177: LD_EXP 22
16181: PPUSH
16182: LD_STRING DOm-Victory-2
16184: PPUSH
16185: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
16189: LD_EXP 22
16193: PPUSH
16194: LD_STRING DOm-Victory-3
16196: PPUSH
16197: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
16201: LD_EXP 21
16205: PPUSH
16206: LD_STRING DH-Victory-4
16208: PPUSH
16209: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
16213: LD_EXP 22
16217: PPUSH
16218: LD_STRING DOm-Victory-5
16220: PPUSH
16221: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
16225: LD_EXP 22
16229: PPUSH
16230: LD_STRING DOm-Victory-6
16232: PPUSH
16233: CALL_OW 88
// DialogueOff ;
16237: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
16241: LD_STRING O4
16243: PPUSH
16244: CALL_OW 337
// canFinish := true ;
16248: LD_ADDR_EXP 18
16252: PUSH
16253: LD_INT 1
16255: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
16256: LD_INT 24
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 424
// if not legionDestroyed then
16266: LD_EXP 12
16270: NOT
16271: IFFALSE 16641
// begin uc_nation := nation_arabian ;
16273: LD_ADDR_OWVAR 21
16277: PUSH
16278: LD_INT 2
16280: ST_TO_ADDR
// uc_side := 8 ;
16281: LD_ADDR_OWVAR 20
16285: PUSH
16286: LD_INT 8
16288: ST_TO_ADDR
// for i := 1 to 4 do
16289: LD_ADDR_VAR 0 1
16293: PUSH
16294: DOUBLE
16295: LD_INT 1
16297: DEC
16298: ST_TO_ADDR
16299: LD_INT 4
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16384
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16305: LD_INT 0
16307: PPUSH
16308: LD_INT 8
16310: PUSH
16311: LD_INT 9
16313: PUSH
16314: LD_INT 10
16316: PUSH
16317: LD_INT 10
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: PUSH
16326: LD_OWVAR 67
16330: ARRAY
16331: PPUSH
16332: CALL_OW 381
// un := CreateHuman ;
16336: LD_ADDR_VAR 0 2
16340: PUSH
16341: CALL_OW 44
16345: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16346: LD_VAR 0 2
16350: PPUSH
16351: LD_INT 3
16353: PPUSH
16354: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
16358: LD_VAR 0 2
16362: PPUSH
16363: LD_INT 26
16365: PPUSH
16366: LD_INT 0
16368: PPUSH
16369: CALL_OW 49
// ComCrawl ( un ) ;
16373: LD_VAR 0 2
16377: PPUSH
16378: CALL_OW 137
// end ;
16382: GO 16302
16384: POP
16385: POP
// for i := 1 to 3 do
16386: LD_ADDR_VAR 0 1
16390: PUSH
16391: DOUBLE
16392: LD_INT 1
16394: DEC
16395: ST_TO_ADDR
16396: LD_INT 3
16398: PUSH
16399: FOR_TO
16400: IFFALSE 16484
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16402: LD_INT 0
16404: PPUSH
16405: LD_INT 8
16407: PUSH
16408: LD_INT 9
16410: PUSH
16411: LD_INT 10
16413: PUSH
16414: LD_INT 10
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: PUSH
16423: LD_OWVAR 67
16427: ARRAY
16428: PPUSH
16429: CALL_OW 381
// un := CreateHuman ;
16433: LD_ADDR_VAR 0 2
16437: PUSH
16438: CALL_OW 44
16442: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
16443: LD_VAR 0 2
16447: PPUSH
16448: LD_INT 8
16450: PPUSH
16451: CALL_OW 336
// SetDir ( un , 3 ) ;
16455: LD_VAR 0 2
16459: PPUSH
16460: LD_INT 3
16462: PPUSH
16463: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
16467: LD_VAR 0 2
16471: PPUSH
16472: LD_INT 26
16474: PPUSH
16475: LD_INT 0
16477: PPUSH
16478: CALL_OW 49
// end ;
16482: GO 16399
16484: POP
16485: POP
// for i := 1 to 2 do
16486: LD_ADDR_VAR 0 1
16490: PUSH
16491: DOUBLE
16492: LD_INT 1
16494: DEC
16495: ST_TO_ADDR
16496: LD_INT 2
16498: PUSH
16499: FOR_TO
16500: IFFALSE 16639
// begin uc_side := 8 ;
16502: LD_ADDR_OWVAR 20
16506: PUSH
16507: LD_INT 8
16509: ST_TO_ADDR
// uc_nation := nation_american ;
16510: LD_ADDR_OWVAR 21
16514: PUSH
16515: LD_INT 1
16517: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16518: LD_INT 4
16520: PPUSH
16521: LD_INT 1
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: LD_INT 9
16529: PPUSH
16530: LD_INT 90
16532: PPUSH
16533: CALL 23989 0 5
// veh := CreateVehicle ;
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: CALL_OW 45
16546: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16547: LD_VAR 0 3
16551: PPUSH
16552: LD_INT 3
16554: PPUSH
16555: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
16559: LD_VAR 0 3
16563: PPUSH
16564: LD_INT 27
16566: PPUSH
16567: LD_INT 0
16569: PPUSH
16570: CALL_OW 49
// uc_nation := nation_arabian ;
16574: LD_ADDR_OWVAR 21
16578: PUSH
16579: LD_INT 2
16581: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 8
16587: PUSH
16588: LD_INT 9
16590: PUSH
16591: LD_INT 10
16593: PUSH
16594: LD_INT 10
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: LD_OWVAR 67
16607: ARRAY
16608: PPUSH
16609: CALL_OW 383
// un := CreateHuman ;
16613: LD_ADDR_VAR 0 2
16617: PUSH
16618: CALL_OW 44
16622: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16623: LD_VAR 0 2
16627: PPUSH
16628: LD_VAR 0 3
16632: PPUSH
16633: CALL_OW 52
// end ;
16637: GO 16499
16639: POP
16640: POP
// end ; end ;
16641: PPOPN 3
16643: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
16644: LD_EXP 19
16648: PUSH
16649: LD_EXP 18
16653: AND
16654: PUSH
16655: LD_EXP 22
16659: PUSH
16660: EMPTY
16661: LIST
16662: PPUSH
16663: LD_INT 24
16665: PPUSH
16666: CALL 10661 0 2
16670: AND
16671: PUSH
16672: LD_EXP 21
16676: PUSH
16677: EMPTY
16678: LIST
16679: PPUSH
16680: LD_INT 24
16682: PPUSH
16683: CALL 10661 0 2
16687: AND
16688: IFFALSE 16867
16690: GO 16692
16692: DISABLE
// begin if tick <= 50 50$00 then
16693: LD_OWVAR 1
16697: PUSH
16698: LD_INT 105000
16700: LESSEQUAL
16701: IFFALSE 16710
// SetAchievement ( ACH_HSPEED_10 ) ;
16703: LD_STRING ACH_HSPEED_10
16705: PPUSH
16706: CALL_OW 543
// if legionDestroyed then
16710: LD_EXP 12
16714: IFFALSE 16728
// AddMedal ( med1 , 1 ) else
16716: LD_STRING med1
16718: PPUSH
16719: LD_INT 1
16721: PPUSH
16722: CALL_OW 101
16726: GO 16739
// AddMedal ( med1 , - 1 ) ;
16728: LD_STRING med1
16730: PPUSH
16731: LD_INT 1
16733: NEG
16734: PPUSH
16735: CALL_OW 101
// if tick <= [ 70 70$00 , 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
16739: LD_OWVAR 1
16743: PUSH
16744: LD_INT 147000
16746: PUSH
16747: LD_INT 126000
16749: PUSH
16750: LD_INT 105000
16752: PUSH
16753: LD_INT 94500
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: PUSH
16762: LD_OWVAR 67
16766: ARRAY
16767: LESSEQUAL
16768: IFFALSE 16782
// AddMedal ( med2 , 1 ) else
16770: LD_STRING med2
16772: PPUSH
16773: LD_INT 1
16775: PPUSH
16776: CALL_OW 101
16780: GO 16793
// AddMedal ( med2 , - 1 ) ;
16782: LD_STRING med2
16784: PPUSH
16785: LD_INT 1
16787: NEG
16788: PPUSH
16789: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasApes + hasDrugs >= 3 then
16793: LD_EXP 16
16797: PUSH
16798: LD_EXP 14
16802: PLUS
16803: PUSH
16804: LD_EXP 15
16808: PLUS
16809: PUSH
16810: LD_EXP 13
16814: PLUS
16815: PUSH
16816: LD_EXP 16
16820: PLUS
16821: PUSH
16822: LD_EXP 17
16826: PLUS
16827: PUSH
16828: LD_INT 3
16830: GREATEREQUAL
16831: IFFALSE 16845
// AddMedal ( med3 , 1 ) else
16833: LD_STRING med3
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 101
16843: GO 16856
// AddMedal ( med3 , - 1 ) ;
16845: LD_STRING med3
16847: PPUSH
16848: LD_INT 1
16850: NEG
16851: PPUSH
16852: CALL_OW 101
// GiveMedals ( MAIN ) ;
16856: LD_STRING MAIN
16858: PPUSH
16859: CALL_OW 102
// YouWin ;
16863: CALL_OW 103
// end ; end_of_file
16867: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL 77084 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
16877: LD_EXP 5
16881: PUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 255
16891: PUSH
16892: LD_INT 2
16894: EQUAL
16895: AND
16896: PUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL_OW 263
16906: PUSH
16907: LD_INT 5
16909: EQUAL
16910: PUSH
16911: LD_VAR 0 1
16915: PPUSH
16916: CALL_OW 257
16920: PUSH
16921: LD_INT 12
16923: PUSH
16924: LD_INT 15
16926: PUSH
16927: LD_INT 16
16929: PUSH
16930: LD_INT 17
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: IN
16939: OR
16940: AND
16941: IFFALSE 17011
// begin apeAmount := Dec ( apeAmount ) ;
16943: LD_ADDR_EXP 5
16947: PUSH
16948: LD_EXP 5
16952: PPUSH
16953: CALL 58221 0 1
16957: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
16958: LD_INT 35
16960: PPUSH
16961: LD_INT 2100
16963: PPUSH
16964: CALL_OW 12
16968: PPUSH
16969: CALL_OW 67
// uc_side := 0 ;
16973: LD_ADDR_OWVAR 20
16977: PUSH
16978: LD_INT 0
16980: ST_TO_ADDR
// uc_nation := nation_nature ;
16981: LD_ADDR_OWVAR 21
16985: PUSH
16986: LD_INT 0
16988: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
16989: LD_INT 0
16991: PPUSH
16992: CALL 53119 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
16996: CALL_OW 44
17000: PPUSH
17001: LD_INT 6
17003: PPUSH
17004: LD_INT 0
17006: PPUSH
17007: CALL_OW 49
// end ; if unit = Heike then
17011: LD_VAR 0 1
17015: PUSH
17016: LD_EXP 21
17020: EQUAL
17021: IFFALSE 17030
// YouLost ( Heike ) ;
17023: LD_STRING Heike
17025: PPUSH
17026: CALL_OW 104
// if unit = Omar then
17030: LD_VAR 0 1
17034: PUSH
17035: LD_EXP 22
17039: EQUAL
17040: IFFALSE 17049
// YouLost ( Omar ) ;
17042: LD_STRING Omar
17044: PPUSH
17045: CALL_OW 104
// if unit in amForces then
17049: LD_VAR 0 1
17053: PUSH
17054: LD_EXP 25
17058: IN
17059: IFFALSE 17077
// amForces := amForces diff unit ;
17061: LD_ADDR_EXP 25
17065: PUSH
17066: LD_EXP 25
17070: PUSH
17071: LD_VAR 0 1
17075: DIFF
17076: ST_TO_ADDR
// if unit in amTanks then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_EXP 30
17086: IN
17087: IFFALSE 17105
// amTanks := amTanks diff unit ;
17089: LD_ADDR_EXP 30
17093: PUSH
17094: LD_EXP 30
17098: PUSH
17099: LD_VAR 0 1
17103: DIFF
17104: ST_TO_ADDR
// if unit in amPatrol then
17105: LD_VAR 0 1
17109: PUSH
17110: LD_EXP 33
17114: IN
17115: IFFALSE 17133
// amPatrol := amPatrol diff unit ;
17117: LD_ADDR_EXP 33
17121: PUSH
17122: LD_EXP 33
17126: PUSH
17127: LD_VAR 0 1
17131: DIFF
17132: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 266
17142: PUSH
17143: LD_INT 32
17145: PUSH
17146: LD_INT 33
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: IN
17153: PUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 255
17163: PUSH
17164: LD_INT 1
17166: EQUAL
17167: AND
17168: IFFALSE 17231
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
17170: LD_ADDR_EXP 29
17174: PUSH
17175: LD_EXP 29
17179: PPUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: CALL_OW 266
17189: PUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 250
17199: PUSH
17200: LD_VAR 0 1
17204: PPUSH
17205: CALL_OW 251
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 254
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: PPUSH
17226: CALL 56838 0 2
17230: ST_TO_ADDR
// if unit in legForces then
17231: LD_VAR 0 1
17235: PUSH
17236: LD_EXP 35
17240: IN
17241: IFFALSE 17259
// legForces := legForces diff unit ;
17243: LD_ADDR_EXP 35
17247: PUSH
17248: LD_EXP 35
17252: PUSH
17253: LD_VAR 0 1
17257: DIFF
17258: ST_TO_ADDR
// if unit in legTanks then
17259: LD_VAR 0 1
17263: PUSH
17264: LD_EXP 41
17268: IN
17269: IFFALSE 17287
// legTanks := legTanks diff unit ;
17271: LD_ADDR_EXP 41
17275: PUSH
17276: LD_EXP 41
17280: PUSH
17281: LD_VAR 0 1
17285: DIFF
17286: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL_OW 266
17296: PUSH
17297: LD_INT 32
17299: PUSH
17300: LD_INT 33
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: IN
17307: PUSH
17308: LD_VAR 0 1
17312: PPUSH
17313: CALL_OW 255
17317: PUSH
17318: LD_INT 8
17320: EQUAL
17321: AND
17322: IFFALSE 17385
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
17324: LD_ADDR_EXP 40
17328: PUSH
17329: LD_EXP 40
17333: PPUSH
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 266
17343: PUSH
17344: LD_VAR 0 1
17348: PPUSH
17349: CALL_OW 250
17353: PUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 251
17363: PUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 254
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PPUSH
17380: CALL 56838 0 2
17384: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 264
17394: PUSH
17395: LD_INT 13
17397: EQUAL
17398: PUSH
17399: LD_VAR 0 1
17403: PPUSH
17404: CALL_OW 255
17408: PUSH
17409: LD_INT 1
17411: EQUAL
17412: AND
17413: IFFALSE 17448
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
17415: LD_ADDR_EXP 27
17419: PUSH
17420: LD_EXP 27
17424: PPUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: LD_INT 2
17433: PUSH
17434: LD_INT 13
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PPUSH
17443: CALL 56838 0 2
17447: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 264
17457: PUSH
17458: LD_INT 88
17460: EQUAL
17461: PUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 255
17471: PUSH
17472: LD_INT 8
17474: EQUAL
17475: AND
17476: IFFALSE 17511
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
17478: LD_ADDR_EXP 38
17482: PUSH
17483: LD_EXP 38
17487: PPUSH
17488: LD_INT 13
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 88
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PPUSH
17506: CALL 56838 0 2
17510: ST_TO_ADDR
// if unit = amCargo then
17511: LD_VAR 0 1
17515: PUSH
17516: LD_EXP 32
17520: EQUAL
17521: IFFALSE 17564
// begin amCargo := 0 ;
17523: LD_ADDR_EXP 32
17527: PUSH
17528: LD_INT 0
17530: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
17531: LD_ADDR_EXP 27
17535: PUSH
17536: LD_EXP 27
17540: PPUSH
17541: LD_INT 2
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 12
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL 56838 0 2
17563: ST_TO_ADDR
// end ; if unit = legCargo then
17564: LD_VAR 0 1
17568: PUSH
17569: LD_EXP 42
17573: EQUAL
17574: IFFALSE 17617
// begin legCargo := 0 ;
17576: LD_ADDR_EXP 42
17580: PUSH
17581: LD_INT 0
17583: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
17584: LD_ADDR_EXP 38
17588: PUSH
17589: LD_EXP 38
17593: PPUSH
17594: LD_INT 13
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: LD_INT 32
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: PPUSH
17612: CALL 56838 0 2
17616: ST_TO_ADDR
// end ; end ;
17617: PPOPN 1
17619: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
17620: LD_VAR 0 2
17624: PUSH
17625: LD_INT 3
17627: PUSH
17628: LD_INT 22
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 25
17644: PUSH
17645: LD_INT 3
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: IN
17661: PUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 266
17671: PUSH
17672: LD_INT 3
17674: EQUAL
17675: AND
17676: PUSH
17677: LD_VAR 0 2
17681: PPUSH
17682: CALL_OW 256
17686: PUSH
17687: LD_INT 1000
17689: LESS
17690: AND
17691: IFFALSE 17717
// begin SetTag ( un , 0 ) ;
17693: LD_VAR 0 2
17697: PPUSH
17698: LD_INT 0
17700: PPUSH
17701: CALL_OW 109
// SetLives ( un , 1000 ) ;
17705: LD_VAR 0 2
17709: PPUSH
17710: LD_INT 1000
17712: PPUSH
17713: CALL_OW 234
// end ; end ;
17717: PPOPN 2
17719: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
17720: LD_INT 0
17722: PPUSH
17723: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
17724: LD_VAR 0 1
17728: PPUSH
17729: LD_VAR 0 2
17733: PPUSH
17734: CALL 77204 0 2
// side := GetSide ( fac ) ;
17738: LD_ADDR_VAR 0 3
17742: PUSH
17743: LD_VAR 0 2
17747: PPUSH
17748: CALL_OW 255
17752: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
17753: LD_ADDR_VAR 0 4
17757: PUSH
17758: LD_VAR 0 1
17762: PPUSH
17763: CALL_OW 264
17767: ST_TO_ADDR
// if side = 1 then
17768: LD_VAR 0 3
17772: PUSH
17773: LD_INT 1
17775: EQUAL
17776: IFFALSE 17885
// begin amConstructList := Delete ( amConstructList , 1 ) ;
17778: LD_ADDR_EXP 27
17782: PUSH
17783: LD_EXP 27
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: CALL_OW 3
17795: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
17796: LD_VAR 0 4
17800: PUSH
17801: LD_INT 12
17803: EQUAL
17804: PUSH
17805: LD_EXP 32
17809: NOT
17810: AND
17811: IFFALSE 17823
// amCargo := veh ;
17813: LD_ADDR_EXP 32
17817: PUSH
17818: LD_VAR 0 1
17822: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
17823: LD_VAR 0 4
17827: PUSH
17828: LD_INT 12
17830: PUSH
17831: LD_INT 13
17833: PUSH
17834: LD_INT 14
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: IN
17842: IFFALSE 17846
// exit ;
17844: GO 17998
// amTanks := Join ( amTanks , veh ) ;
17846: LD_ADDR_EXP 30
17850: PUSH
17851: LD_EXP 30
17855: PPUSH
17856: LD_VAR 0 1
17860: PPUSH
17861: CALL 56838 0 2
17865: ST_TO_ADDR
// wait ( 0 0$01 ) ;
17866: LD_INT 35
17868: PPUSH
17869: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
17873: LD_VAR 0 1
17877: PPUSH
17878: LD_INT 12
17880: PPUSH
17881: CALL_OW 173
// end ; if side = 8 then
17885: LD_VAR 0 3
17889: PUSH
17890: LD_INT 8
17892: EQUAL
17893: IFFALSE 17998
// begin legConstructList := Delete ( legConstructList , 1 ) ;
17895: LD_ADDR_EXP 38
17899: PUSH
17900: LD_EXP 38
17904: PPUSH
17905: LD_INT 1
17907: PPUSH
17908: CALL_OW 3
17912: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
17913: LD_VAR 0 4
17917: PUSH
17918: LD_INT 32
17920: EQUAL
17921: PUSH
17922: LD_EXP 42
17926: NOT
17927: AND
17928: IFFALSE 17940
// legCargo := veh ;
17930: LD_ADDR_EXP 42
17934: PUSH
17935: LD_VAR 0 1
17939: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
17940: LD_VAR 0 4
17944: PUSH
17945: LD_INT 32
17947: PUSH
17948: LD_INT 88
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: IN
17955: IFFALSE 17959
// exit ;
17957: GO 17998
// legTanks := Join ( legTanks , veh ) ;
17959: LD_ADDR_EXP 41
17963: PUSH
17964: LD_EXP 41
17968: PPUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL 56838 0 2
17978: ST_TO_ADDR
// wait ( 0 0$01 ) ;
17979: LD_INT 35
17981: PPUSH
17982: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_INT 15
17993: PPUSH
17994: CALL_OW 173
// end ; end ;
17998: PPOPN 4
18000: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
18001: LD_INT 0
18003: PPUSH
18004: PPUSH
18005: PPUSH
// begin side := GetSide ( driver ) ;
18006: LD_ADDR_VAR 0 7
18010: PUSH
18011: LD_VAR 0 1
18015: PPUSH
18016: CALL_OW 255
18020: ST_TO_ADDR
// if side = 1 and driver in amForces then
18021: LD_VAR 0 7
18025: PUSH
18026: LD_INT 1
18028: EQUAL
18029: PUSH
18030: LD_VAR 0 1
18034: PUSH
18035: LD_EXP 25
18039: IN
18040: AND
18041: IFFALSE 18253
// begin ComMoveToArea ( driver , amBaseArea ) ;
18043: LD_VAR 0 1
18047: PPUSH
18048: LD_INT 1
18050: PPUSH
18051: CALL_OW 113
// SetTag ( driver , tMech ) ;
18055: LD_VAR 0 1
18059: PPUSH
18060: LD_INT 7
18062: PPUSH
18063: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
18067: LD_ADDR_VAR 0 6
18071: PUSH
18072: LD_INT 1
18074: PPUSH
18075: LD_INT 22
18077: PUSH
18078: LD_VAR 0 7
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 30
18089: PUSH
18090: LD_INT 3
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 50
18099: PUSH
18100: EMPTY
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: PPUSH
18108: CALL_OW 70
18112: ST_TO_ADDR
// if fac then
18113: LD_VAR 0 6
18117: IFFALSE 18139
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
18119: LD_VAR 0 1
18123: PPUSH
18124: LD_VAR 0 6
18128: PUSH
18129: LD_INT 1
18131: ARRAY
18132: PPUSH
18133: CALL_OW 180
// exit ;
18137: GO 18473
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
18139: LD_ADDR_VAR 0 5
18143: PUSH
18144: LD_INT 1
18146: PPUSH
18147: LD_INT 22
18149: PUSH
18150: LD_VAR 0 7
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 30
18164: PUSH
18165: LD_INT 4
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 30
18174: PUSH
18175: LD_INT 5
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 3
18189: PUSH
18190: LD_INT 62
18192: PUSH
18193: EMPTY
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 50
18202: PUSH
18203: EMPTY
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: PPUSH
18212: CALL_OW 70
18216: ST_TO_ADDR
// if arm then
18217: LD_VAR 0 5
18221: IFFALSE 18253
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
18223: LD_VAR 0 1
18227: PPUSH
18228: LD_VAR 0 5
18232: PUSH
18233: LD_INT 1
18235: ARRAY
18236: PPUSH
18237: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
18241: LD_VAR 0 1
18245: PPUSH
18246: LD_INT 1
18248: PPUSH
18249: CALL_OW 183
// end ; end ; if side = 8 then
18253: LD_VAR 0 7
18257: PUSH
18258: LD_INT 8
18260: EQUAL
18261: IFFALSE 18473
// begin ComMoveToArea ( driver , legBaseArea ) ;
18263: LD_VAR 0 1
18267: PPUSH
18268: LD_INT 2
18270: PPUSH
18271: CALL_OW 113
// SetTag ( driver , tMech ) ;
18275: LD_VAR 0 1
18279: PPUSH
18280: LD_INT 7
18282: PPUSH
18283: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
18287: LD_ADDR_VAR 0 6
18291: PUSH
18292: LD_INT 2
18294: PPUSH
18295: LD_INT 22
18297: PUSH
18298: LD_VAR 0 7
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 30
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 50
18319: PUSH
18320: EMPTY
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 70
18332: ST_TO_ADDR
// if fac then
18333: LD_VAR 0 6
18337: IFFALSE 18359
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
18339: LD_VAR 0 1
18343: PPUSH
18344: LD_VAR 0 6
18348: PUSH
18349: LD_INT 1
18351: ARRAY
18352: PPUSH
18353: CALL_OW 180
// exit ;
18357: GO 18473
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
18359: LD_ADDR_VAR 0 5
18363: PUSH
18364: LD_INT 2
18366: PPUSH
18367: LD_INT 22
18369: PUSH
18370: LD_VAR 0 7
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 4
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 30
18394: PUSH
18395: LD_INT 5
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 3
18409: PUSH
18410: LD_INT 62
18412: PUSH
18413: EMPTY
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 50
18422: PUSH
18423: EMPTY
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: PPUSH
18432: CALL_OW 70
18436: ST_TO_ADDR
// if arm then
18437: LD_VAR 0 5
18441: IFFALSE 18473
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
18443: LD_VAR 0 1
18447: PPUSH
18448: LD_VAR 0 5
18452: PUSH
18453: LD_INT 1
18455: ARRAY
18456: PPUSH
18457: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 1
18468: PPUSH
18469: CALL_OW 183
// end ; end ; end ;
18473: PPOPN 7
18475: END
// on BuildingComplete ( b ) do var side , type ;
18476: LD_INT 0
18478: PPUSH
18479: PPUSH
// begin side := GetSide ( b ) ;
18480: LD_ADDR_VAR 0 2
18484: PUSH
18485: LD_VAR 0 1
18489: PPUSH
18490: CALL_OW 255
18494: ST_TO_ADDR
// type := GetBType ( b ) ;
18495: LD_ADDR_VAR 0 3
18499: PUSH
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 266
18509: ST_TO_ADDR
// if side = 1 then
18510: LD_VAR 0 2
18514: PUSH
18515: LD_INT 1
18517: EQUAL
18518: IFFALSE 18568
// begin amBuildings := Delete ( amBuildings , 1 ) ;
18520: LD_ADDR_EXP 29
18524: PUSH
18525: LD_EXP 29
18529: PPUSH
18530: LD_INT 1
18532: PPUSH
18533: CALL_OW 3
18537: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
18538: LD_VAR 0 3
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 4
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: IN
18557: IFFALSE 18568
// ComUpgrade ( b ) ;
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 146
// end ; end ;
18568: PPOPN 3
18570: END
// on ResearchComplete ( tech , lab ) do var side ;
18571: LD_INT 0
18573: PPUSH
// begin side := GetSide ( lab ) ;
18574: LD_ADDR_VAR 0 3
18578: PUSH
18579: LD_VAR 0 2
18583: PPUSH
18584: CALL_OW 255
18588: ST_TO_ADDR
// if side = 1 then
18589: LD_VAR 0 3
18593: PUSH
18594: LD_INT 1
18596: EQUAL
18597: IFFALSE 18615
// amTech := amTech diff tech ;
18599: LD_ADDR_EXP 26
18603: PUSH
18604: LD_EXP 26
18608: PUSH
18609: LD_VAR 0 1
18613: DIFF
18614: ST_TO_ADDR
// end ;
18615: PPOPN 3
18617: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL 77188 0 1
// end ;
18627: PPOPN 1
18629: END
// on SailEvent ( event ) do begin case event of end ;
18630: LD_VAR 0 1
18634: PUSH
18635: POP
// end ;
18636: PPOPN 1
18638: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
18639: LD_EXP 19
18643: NOT
18644: IFFALSE 18648
// exit ;
18646: GO 18746
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
18648: LD_EXP 8
18652: NOT
18653: PUSH
18654: LD_VAR 0 1
18658: PUSH
18659: LD_INT 2
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: IN
18669: AND
18670: PUSH
18671: LD_VAR 0 2
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: IN
18686: AND
18687: IFFALSE 18697
// spotByAmerican := true ;
18689: LD_ADDR_EXP 8
18693: PUSH
18694: LD_INT 1
18696: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
18697: LD_EXP 9
18701: NOT
18702: PUSH
18703: LD_VAR 0 1
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 8
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: IN
18718: AND
18719: PUSH
18720: LD_VAR 0 2
18724: PUSH
18725: LD_INT 8
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: IN
18735: AND
18736: IFFALSE 18746
// spotByLegion := true ;
18738: LD_ADDR_EXP 9
18742: PUSH
18743: LD_INT 1
18745: ST_TO_ADDR
// end ; end_of_file
18746: PPOPN 2
18748: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
18749: LD_EXP 7
18753: IFFALSE 18860
18755: GO 18757
18757: DISABLE
18758: LD_INT 0
18760: PPUSH
18761: PPUSH
// begin enable ;
18762: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
18763: LD_INT 35
18765: PPUSH
18766: LD_INT 385
18768: PPUSH
18769: CALL_OW 12
18773: PPUSH
18774: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
18778: LD_ADDR_VAR 0 2
18782: PUSH
18783: LD_INT 16
18785: PUSH
18786: LD_INT 17
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
18793: LD_ADDR_VAR 0 1
18797: PUSH
18798: LD_VAR 0 2
18802: PUSH
18803: LD_INT 1
18805: PPUSH
18806: LD_VAR 0 2
18810: PPUSH
18811: CALL 21251 0 1
18815: PPUSH
18816: CALL_OW 12
18820: ARRAY
18821: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 435
18831: PUSH
18832: LD_INT 8
18834: LESS
18835: IFFALSE 18860
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
18837: LD_INT 1
18839: PPUSH
18840: LD_INT 5
18842: PPUSH
18843: CALL_OW 12
18847: PPUSH
18848: LD_VAR 0 1
18852: PPUSH
18853: LD_INT 1
18855: PPUSH
18856: CALL_OW 55
// end ;
18860: PPOPN 2
18862: END
// every 0 0$20 trigger tick < [ 7 7$00 , 6 6$00 , 5 5$00 , 4 4$30 ] [ Difficulty ] and spotArabianBase do
18863: LD_OWVAR 1
18867: PUSH
18868: LD_INT 14700
18870: PUSH
18871: LD_INT 12600
18873: PUSH
18874: LD_INT 10500
18876: PUSH
18877: LD_INT 9450
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: LD_OWVAR 67
18890: ARRAY
18891: LESS
18892: PUSH
18893: LD_EXP 7
18897: AND
18898: IFFALSE 18931
18900: GO 18902
18902: DISABLE
// begin enable ;
18903: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
18904: LD_INT 1
18906: PPUSH
18907: LD_INT 5
18909: PPUSH
18910: CALL_OW 12
18914: PPUSH
18915: LD_INT 218
18917: PPUSH
18918: LD_INT 92
18920: PPUSH
18921: LD_INT 11
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 56
// end ;
18931: END
// every 0 0$55 trigger IsOk ( amBase ) do
18932: LD_INT 2
18934: PPUSH
18935: CALL_OW 302
18939: IFFALSE 18979
18941: GO 18943
18943: DISABLE
// begin enable ;
18944: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
18945: LD_INT 13
18947: PPUSH
18948: CALL_OW 435
18952: PUSH
18953: LD_INT 3
18955: LESS
18956: IFFALSE 18979
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
18958: LD_INT 1
18960: PPUSH
18961: LD_INT 5
18963: PPUSH
18964: CALL_OW 12
18968: PPUSH
18969: LD_INT 13
18971: PPUSH
18972: LD_INT 1
18974: PPUSH
18975: CALL_OW 55
// end ;
18979: END
// every 1 1$05 trigger IsOk ( legBase ) do
18980: LD_INT 38
18982: PPUSH
18983: CALL_OW 302
18987: IFFALSE 19027
18989: GO 18991
18991: DISABLE
// begin enable ;
18992: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
18993: LD_INT 14
18995: PPUSH
18996: CALL_OW 435
19000: PUSH
19001: LD_INT 3
19003: LESS
19004: IFFALSE 19027
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 5
19011: PPUSH
19012: CALL_OW 12
19016: PPUSH
19017: LD_INT 14
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: CALL_OW 55
// end ; end_of_file
19027: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
19028: LD_EXP 19
19032: PUSH
19033: LD_EXP 22
19037: PPUSH
19038: CALL_OW 257
19042: PUSH
19043: LD_INT 11
19045: NONEQUAL
19046: AND
19047: PUSH
19048: LD_EXP 7
19052: AND
19053: PUSH
19054: LD_INT 85
19056: PPUSH
19057: CALL_OW 302
19061: AND
19062: IFFALSE 19082
19064: GO 19066
19066: DISABLE
// begin Query ( QSheik ) ;
19067: LD_STRING QSheik
19069: PPUSH
19070: CALL_OW 97
// omarCanChangeClass := true ;
19074: LD_ADDR_EXP 20
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// end ;
19082: END
// every 0 0$2 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
19083: LD_EXP 20
19087: PUSH
19088: LD_EXP 22
19092: PPUSH
19093: CALL_OW 257
19097: PUSH
19098: LD_INT 11
19100: NONEQUAL
19101: AND
19102: PUSH
19103: LD_EXP 22
19107: PPUSH
19108: CALL_OW 310
19112: PUSH
19113: LD_INT 85
19115: EQUAL
19116: AND
19117: IFFALSE 19148
19119: GO 19121
19121: DISABLE
// begin enable ;
19122: ENABLE
// if Query ( QChangeClass ) = 1 then
19123: LD_STRING QChangeClass
19125: PPUSH
19126: CALL_OW 97
19130: PUSH
19131: LD_INT 1
19133: EQUAL
19134: IFFALSE 19148
// SetClass ( Omar , class_desert_warior ) ;
19136: LD_EXP 22
19140: PPUSH
19141: LD_INT 11
19143: PPUSH
19144: CALL_OW 336
// end ; end_of_file
19148: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19149: LD_INT 0
19151: PPUSH
19152: PPUSH
// if exist_mode then
19153: LD_VAR 0 2
19157: IFFALSE 19182
// unit := CreateCharacter ( prefix & ident ) else
19159: LD_ADDR_VAR 0 5
19163: PUSH
19164: LD_VAR 0 3
19168: PUSH
19169: LD_VAR 0 1
19173: STR
19174: PPUSH
19175: CALL_OW 34
19179: ST_TO_ADDR
19180: GO 19197
// unit := NewCharacter ( ident ) ;
19182: LD_ADDR_VAR 0 5
19186: PUSH
19187: LD_VAR 0 1
19191: PPUSH
19192: CALL_OW 25
19196: ST_TO_ADDR
// result := unit ;
19197: LD_ADDR_VAR 0 4
19201: PUSH
19202: LD_VAR 0 5
19206: ST_TO_ADDR
// end ;
19207: LD_VAR 0 4
19211: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19212: LD_INT 0
19214: PPUSH
19215: PPUSH
// if not side or not nation then
19216: LD_VAR 0 1
19220: NOT
19221: PUSH
19222: LD_VAR 0 2
19226: NOT
19227: OR
19228: IFFALSE 19232
// exit ;
19230: GO 20000
// case nation of nation_american :
19232: LD_VAR 0 2
19236: PUSH
19237: LD_INT 1
19239: DOUBLE
19240: EQUAL
19241: IFTRUE 19245
19243: GO 19459
19245: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19246: LD_ADDR_VAR 0 4
19250: PUSH
19251: LD_INT 35
19253: PUSH
19254: LD_INT 45
19256: PUSH
19257: LD_INT 46
19259: PUSH
19260: LD_INT 47
19262: PUSH
19263: LD_INT 82
19265: PUSH
19266: LD_INT 83
19268: PUSH
19269: LD_INT 84
19271: PUSH
19272: LD_INT 85
19274: PUSH
19275: LD_INT 86
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 6
19286: PUSH
19287: LD_INT 15
19289: PUSH
19290: LD_INT 16
19292: PUSH
19293: LD_INT 7
19295: PUSH
19296: LD_INT 12
19298: PUSH
19299: LD_INT 13
19301: PUSH
19302: LD_INT 10
19304: PUSH
19305: LD_INT 14
19307: PUSH
19308: LD_INT 20
19310: PUSH
19311: LD_INT 21
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: LD_INT 25
19319: PUSH
19320: LD_INT 32
19322: PUSH
19323: LD_INT 27
19325: PUSH
19326: LD_INT 36
19328: PUSH
19329: LD_INT 69
19331: PUSH
19332: LD_INT 39
19334: PUSH
19335: LD_INT 34
19337: PUSH
19338: LD_INT 40
19340: PUSH
19341: LD_INT 48
19343: PUSH
19344: LD_INT 49
19346: PUSH
19347: LD_INT 50
19349: PUSH
19350: LD_INT 51
19352: PUSH
19353: LD_INT 52
19355: PUSH
19356: LD_INT 53
19358: PUSH
19359: LD_INT 54
19361: PUSH
19362: LD_INT 55
19364: PUSH
19365: LD_INT 56
19367: PUSH
19368: LD_INT 57
19370: PUSH
19371: LD_INT 58
19373: PUSH
19374: LD_INT 59
19376: PUSH
19377: LD_INT 60
19379: PUSH
19380: LD_INT 61
19382: PUSH
19383: LD_INT 62
19385: PUSH
19386: LD_INT 80
19388: PUSH
19389: LD_INT 82
19391: PUSH
19392: LD_INT 83
19394: PUSH
19395: LD_INT 84
19397: PUSH
19398: LD_INT 85
19400: PUSH
19401: LD_INT 86
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: ST_TO_ADDR
19457: GO 19924
19459: LD_INT 2
19461: DOUBLE
19462: EQUAL
19463: IFTRUE 19467
19465: GO 19693
19467: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: LD_INT 35
19475: PUSH
19476: LD_INT 45
19478: PUSH
19479: LD_INT 46
19481: PUSH
19482: LD_INT 47
19484: PUSH
19485: LD_INT 82
19487: PUSH
19488: LD_INT 83
19490: PUSH
19491: LD_INT 84
19493: PUSH
19494: LD_INT 85
19496: PUSH
19497: LD_INT 87
19499: PUSH
19500: LD_INT 70
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 11
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 4
19514: PUSH
19515: LD_INT 5
19517: PUSH
19518: LD_INT 6
19520: PUSH
19521: LD_INT 15
19523: PUSH
19524: LD_INT 18
19526: PUSH
19527: LD_INT 7
19529: PUSH
19530: LD_INT 17
19532: PUSH
19533: LD_INT 8
19535: PUSH
19536: LD_INT 20
19538: PUSH
19539: LD_INT 21
19541: PUSH
19542: LD_INT 22
19544: PUSH
19545: LD_INT 72
19547: PUSH
19548: LD_INT 26
19550: PUSH
19551: LD_INT 69
19553: PUSH
19554: LD_INT 39
19556: PUSH
19557: LD_INT 40
19559: PUSH
19560: LD_INT 41
19562: PUSH
19563: LD_INT 42
19565: PUSH
19566: LD_INT 43
19568: PUSH
19569: LD_INT 48
19571: PUSH
19572: LD_INT 49
19574: PUSH
19575: LD_INT 50
19577: PUSH
19578: LD_INT 51
19580: PUSH
19581: LD_INT 52
19583: PUSH
19584: LD_INT 53
19586: PUSH
19587: LD_INT 54
19589: PUSH
19590: LD_INT 55
19592: PUSH
19593: LD_INT 56
19595: PUSH
19596: LD_INT 60
19598: PUSH
19599: LD_INT 61
19601: PUSH
19602: LD_INT 62
19604: PUSH
19605: LD_INT 66
19607: PUSH
19608: LD_INT 67
19610: PUSH
19611: LD_INT 68
19613: PUSH
19614: LD_INT 81
19616: PUSH
19617: LD_INT 82
19619: PUSH
19620: LD_INT 83
19622: PUSH
19623: LD_INT 84
19625: PUSH
19626: LD_INT 85
19628: PUSH
19629: LD_INT 87
19631: PUSH
19632: LD_INT 88
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: ST_TO_ADDR
19691: GO 19924
19693: LD_INT 3
19695: DOUBLE
19696: EQUAL
19697: IFTRUE 19701
19699: GO 19923
19701: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19702: LD_ADDR_VAR 0 4
19706: PUSH
19707: LD_INT 46
19709: PUSH
19710: LD_INT 47
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: LD_INT 82
19721: PUSH
19722: LD_INT 83
19724: PUSH
19725: LD_INT 84
19727: PUSH
19728: LD_INT 85
19730: PUSH
19731: LD_INT 86
19733: PUSH
19734: LD_INT 11
19736: PUSH
19737: LD_INT 9
19739: PUSH
19740: LD_INT 20
19742: PUSH
19743: LD_INT 19
19745: PUSH
19746: LD_INT 21
19748: PUSH
19749: LD_INT 24
19751: PUSH
19752: LD_INT 22
19754: PUSH
19755: LD_INT 25
19757: PUSH
19758: LD_INT 28
19760: PUSH
19761: LD_INT 29
19763: PUSH
19764: LD_INT 30
19766: PUSH
19767: LD_INT 31
19769: PUSH
19770: LD_INT 37
19772: PUSH
19773: LD_INT 38
19775: PUSH
19776: LD_INT 32
19778: PUSH
19779: LD_INT 27
19781: PUSH
19782: LD_INT 33
19784: PUSH
19785: LD_INT 69
19787: PUSH
19788: LD_INT 39
19790: PUSH
19791: LD_INT 34
19793: PUSH
19794: LD_INT 40
19796: PUSH
19797: LD_INT 71
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 44
19805: PUSH
19806: LD_INT 48
19808: PUSH
19809: LD_INT 49
19811: PUSH
19812: LD_INT 50
19814: PUSH
19815: LD_INT 51
19817: PUSH
19818: LD_INT 52
19820: PUSH
19821: LD_INT 53
19823: PUSH
19824: LD_INT 54
19826: PUSH
19827: LD_INT 55
19829: PUSH
19830: LD_INT 56
19832: PUSH
19833: LD_INT 57
19835: PUSH
19836: LD_INT 58
19838: PUSH
19839: LD_INT 59
19841: PUSH
19842: LD_INT 63
19844: PUSH
19845: LD_INT 64
19847: PUSH
19848: LD_INT 65
19850: PUSH
19851: LD_INT 82
19853: PUSH
19854: LD_INT 83
19856: PUSH
19857: LD_INT 84
19859: PUSH
19860: LD_INT 85
19862: PUSH
19863: LD_INT 86
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: ST_TO_ADDR
19921: GO 19924
19923: POP
// if state > - 1 and state < 3 then
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: GREATER
19933: PUSH
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 3
19941: LESS
19942: AND
19943: IFFALSE 20000
// for i in result do
19945: LD_ADDR_VAR 0 5
19949: PUSH
19950: LD_VAR 0 4
19954: PUSH
19955: FOR_IN
19956: IFFALSE 19998
// if GetTech ( i , side ) <> state then
19958: LD_VAR 0 5
19962: PPUSH
19963: LD_VAR 0 1
19967: PPUSH
19968: CALL_OW 321
19972: PUSH
19973: LD_VAR 0 3
19977: NONEQUAL
19978: IFFALSE 19996
// result := result diff i ;
19980: LD_ADDR_VAR 0 4
19984: PUSH
19985: LD_VAR 0 4
19989: PUSH
19990: LD_VAR 0 5
19994: DIFF
19995: ST_TO_ADDR
19996: GO 19955
19998: POP
19999: POP
// end ;
20000: LD_VAR 0 4
20004: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20005: LD_INT 0
20007: PPUSH
20008: PPUSH
20009: PPUSH
// result := true ;
20010: LD_ADDR_VAR 0 3
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20018: LD_ADDR_VAR 0 5
20022: PUSH
20023: LD_VAR 0 2
20027: PPUSH
20028: CALL_OW 480
20032: ST_TO_ADDR
// if not tmp then
20033: LD_VAR 0 5
20037: NOT
20038: IFFALSE 20042
// exit ;
20040: GO 20091
// for i in tmp do
20042: LD_ADDR_VAR 0 4
20046: PUSH
20047: LD_VAR 0 5
20051: PUSH
20052: FOR_IN
20053: IFFALSE 20089
// if GetTech ( i , side ) <> state_researched then
20055: LD_VAR 0 4
20059: PPUSH
20060: LD_VAR 0 1
20064: PPUSH
20065: CALL_OW 321
20069: PUSH
20070: LD_INT 2
20072: NONEQUAL
20073: IFFALSE 20087
// begin result := false ;
20075: LD_ADDR_VAR 0 3
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// exit ;
20083: POP
20084: POP
20085: GO 20091
// end ;
20087: GO 20052
20089: POP
20090: POP
// end ;
20091: LD_VAR 0 3
20095: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20096: LD_INT 0
20098: PPUSH
20099: PPUSH
20100: PPUSH
20101: PPUSH
20102: PPUSH
20103: PPUSH
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
20109: PPUSH
20110: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20111: LD_VAR 0 1
20115: NOT
20116: PUSH
20117: LD_VAR 0 1
20121: PPUSH
20122: CALL_OW 257
20126: PUSH
20127: LD_INT 9
20129: NONEQUAL
20130: OR
20131: IFFALSE 20135
// exit ;
20133: GO 20708
// side := GetSide ( unit ) ;
20135: LD_ADDR_VAR 0 9
20139: PUSH
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 255
20149: ST_TO_ADDR
// tech_space := tech_spacanom ;
20150: LD_ADDR_VAR 0 12
20154: PUSH
20155: LD_INT 29
20157: ST_TO_ADDR
// tech_time := tech_taurad ;
20158: LD_ADDR_VAR 0 13
20162: PUSH
20163: LD_INT 28
20165: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20166: LD_ADDR_VAR 0 11
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 310
20180: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20181: LD_VAR 0 11
20185: PPUSH
20186: CALL_OW 247
20190: PUSH
20191: LD_INT 2
20193: EQUAL
20194: IFFALSE 20198
// exit ;
20196: GO 20708
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20198: LD_ADDR_VAR 0 8
20202: PUSH
20203: LD_INT 81
20205: PUSH
20206: LD_VAR 0 9
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: LD_INT 21
20220: PUSH
20221: LD_INT 3
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: ST_TO_ADDR
// if not tmp then
20241: LD_VAR 0 8
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20708
// if in_unit then
20250: LD_VAR 0 11
20254: IFFALSE 20278
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20256: LD_ADDR_VAR 0 10
20260: PUSH
20261: LD_VAR 0 8
20265: PPUSH
20266: LD_VAR 0 11
20270: PPUSH
20271: CALL_OW 74
20275: ST_TO_ADDR
20276: GO 20298
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20278: LD_ADDR_VAR 0 10
20282: PUSH
20283: LD_VAR 0 8
20287: PPUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 74
20297: ST_TO_ADDR
// if not enemy then
20298: LD_VAR 0 10
20302: NOT
20303: IFFALSE 20307
// exit ;
20305: GO 20708
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20307: LD_VAR 0 11
20311: PUSH
20312: LD_VAR 0 11
20316: PPUSH
20317: LD_VAR 0 10
20321: PPUSH
20322: CALL_OW 296
20326: PUSH
20327: LD_INT 13
20329: GREATER
20330: AND
20331: PUSH
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_VAR 0 10
20341: PPUSH
20342: CALL_OW 296
20346: PUSH
20347: LD_INT 12
20349: GREATER
20350: OR
20351: IFFALSE 20355
// exit ;
20353: GO 20708
// missile := [ 1 ] ;
20355: LD_ADDR_VAR 0 14
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20366: LD_VAR 0 9
20370: PPUSH
20371: LD_VAR 0 12
20375: PPUSH
20376: CALL_OW 325
20380: IFFALSE 20409
// missile := Replace ( missile , missile + 1 , 2 ) ;
20382: LD_ADDR_VAR 0 14
20386: PUSH
20387: LD_VAR 0 14
20391: PPUSH
20392: LD_VAR 0 14
20396: PUSH
20397: LD_INT 1
20399: PLUS
20400: PPUSH
20401: LD_INT 2
20403: PPUSH
20404: CALL_OW 1
20408: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20409: LD_VAR 0 9
20413: PPUSH
20414: LD_VAR 0 13
20418: PPUSH
20419: CALL_OW 325
20423: PUSH
20424: LD_VAR 0 10
20428: PPUSH
20429: CALL_OW 255
20433: PPUSH
20434: LD_VAR 0 13
20438: PPUSH
20439: CALL_OW 325
20443: NOT
20444: AND
20445: IFFALSE 20474
// missile := Replace ( missile , missile + 1 , 3 ) ;
20447: LD_ADDR_VAR 0 14
20451: PUSH
20452: LD_VAR 0 14
20456: PPUSH
20457: LD_VAR 0 14
20461: PUSH
20462: LD_INT 1
20464: PLUS
20465: PPUSH
20466: LD_INT 3
20468: PPUSH
20469: CALL_OW 1
20473: ST_TO_ADDR
// if missile < 2 then
20474: LD_VAR 0 14
20478: PUSH
20479: LD_INT 2
20481: LESS
20482: IFFALSE 20486
// exit ;
20484: GO 20708
// x := GetX ( enemy ) ;
20486: LD_ADDR_VAR 0 4
20490: PUSH
20491: LD_VAR 0 10
20495: PPUSH
20496: CALL_OW 250
20500: ST_TO_ADDR
// y := GetY ( enemy ) ;
20501: LD_ADDR_VAR 0 5
20505: PUSH
20506: LD_VAR 0 10
20510: PPUSH
20511: CALL_OW 251
20515: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20516: LD_ADDR_VAR 0 6
20520: PUSH
20521: LD_VAR 0 4
20525: PUSH
20526: LD_INT 1
20528: NEG
20529: PPUSH
20530: LD_INT 1
20532: PPUSH
20533: CALL_OW 12
20537: PLUS
20538: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20539: LD_ADDR_VAR 0 7
20543: PUSH
20544: LD_VAR 0 5
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PPUSH
20553: LD_INT 1
20555: PPUSH
20556: CALL_OW 12
20560: PLUS
20561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20562: LD_VAR 0 6
20566: PPUSH
20567: LD_VAR 0 7
20571: PPUSH
20572: CALL_OW 488
20576: NOT
20577: IFFALSE 20599
// begin _x := x ;
20579: LD_ADDR_VAR 0 6
20583: PUSH
20584: LD_VAR 0 4
20588: ST_TO_ADDR
// _y := y ;
20589: LD_ADDR_VAR 0 7
20593: PUSH
20594: LD_VAR 0 5
20598: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: LD_INT 1
20606: PPUSH
20607: LD_VAR 0 14
20611: PPUSH
20612: CALL_OW 12
20616: ST_TO_ADDR
// case i of 1 :
20617: LD_VAR 0 3
20621: PUSH
20622: LD_INT 1
20624: DOUBLE
20625: EQUAL
20626: IFTRUE 20630
20628: GO 20647
20630: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20631: LD_VAR 0 1
20635: PPUSH
20636: LD_VAR 0 10
20640: PPUSH
20641: CALL_OW 115
20645: GO 20708
20647: LD_INT 2
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20677
20655: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20656: LD_VAR 0 1
20660: PPUSH
20661: LD_VAR 0 6
20665: PPUSH
20666: LD_VAR 0 7
20670: PPUSH
20671: CALL_OW 153
20675: GO 20708
20677: LD_INT 3
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20707
20685: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20686: LD_VAR 0 1
20690: PPUSH
20691: LD_VAR 0 6
20695: PPUSH
20696: LD_VAR 0 7
20700: PPUSH
20701: CALL_OW 154
20705: GO 20708
20707: POP
// end ;
20708: LD_VAR 0 2
20712: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20713: LD_INT 0
20715: PPUSH
20716: PPUSH
20717: PPUSH
20718: PPUSH
20719: PPUSH
20720: PPUSH
// if not unit or not building then
20721: LD_VAR 0 1
20725: NOT
20726: PUSH
20727: LD_VAR 0 2
20731: NOT
20732: OR
20733: IFFALSE 20737
// exit ;
20735: GO 20895
// x := GetX ( building ) ;
20737: LD_ADDR_VAR 0 5
20741: PUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: CALL_OW 250
20751: ST_TO_ADDR
// y := GetY ( building ) ;
20752: LD_ADDR_VAR 0 6
20756: PUSH
20757: LD_VAR 0 2
20761: PPUSH
20762: CALL_OW 251
20766: ST_TO_ADDR
// for i = 0 to 5 do
20767: LD_ADDR_VAR 0 4
20771: PUSH
20772: DOUBLE
20773: LD_INT 0
20775: DEC
20776: ST_TO_ADDR
20777: LD_INT 5
20779: PUSH
20780: FOR_TO
20781: IFFALSE 20893
// begin _x := ShiftX ( x , i , 3 ) ;
20783: LD_ADDR_VAR 0 7
20787: PUSH
20788: LD_VAR 0 5
20792: PPUSH
20793: LD_VAR 0 4
20797: PPUSH
20798: LD_INT 3
20800: PPUSH
20801: CALL_OW 272
20805: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20806: LD_ADDR_VAR 0 8
20810: PUSH
20811: LD_VAR 0 6
20815: PPUSH
20816: LD_VAR 0 4
20820: PPUSH
20821: LD_INT 3
20823: PPUSH
20824: CALL_OW 273
20828: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20829: LD_VAR 0 7
20833: PPUSH
20834: LD_VAR 0 8
20838: PPUSH
20839: CALL_OW 488
20843: NOT
20844: IFFALSE 20848
// continue ;
20846: GO 20780
// if HexInfo ( _x , _y ) = 0 then
20848: LD_VAR 0 7
20852: PPUSH
20853: LD_VAR 0 8
20857: PPUSH
20858: CALL_OW 428
20862: PUSH
20863: LD_INT 0
20865: EQUAL
20866: IFFALSE 20891
// begin ComMoveXY ( unit , _x , _y ) ;
20868: LD_VAR 0 1
20872: PPUSH
20873: LD_VAR 0 7
20877: PPUSH
20878: LD_VAR 0 8
20882: PPUSH
20883: CALL_OW 111
// exit ;
20887: POP
20888: POP
20889: GO 20895
// end ; end ;
20891: GO 20780
20893: POP
20894: POP
// end ;
20895: LD_VAR 0 3
20899: RET
// export function ScanBase ( side , base_area ) ; begin
20900: LD_INT 0
20902: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20903: LD_ADDR_VAR 0 3
20907: PUSH
20908: LD_VAR 0 2
20912: PPUSH
20913: LD_INT 81
20915: PUSH
20916: LD_VAR 0 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PPUSH
20925: CALL_OW 70
20929: ST_TO_ADDR
// end ;
20930: LD_VAR 0 3
20934: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
20935: LD_INT 0
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
// result := false ;
20941: LD_ADDR_VAR 0 2
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// side := GetSide ( unit ) ;
20949: LD_ADDR_VAR 0 3
20953: PUSH
20954: LD_VAR 0 1
20958: PPUSH
20959: CALL_OW 255
20963: ST_TO_ADDR
// nat := GetNation ( unit ) ;
20964: LD_ADDR_VAR 0 4
20968: PUSH
20969: LD_VAR 0 1
20973: PPUSH
20974: CALL_OW 248
20978: ST_TO_ADDR
// case nat of 1 :
20979: LD_VAR 0 4
20983: PUSH
20984: LD_INT 1
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21003
20992: POP
// tech := tech_lassight ; 2 :
20993: LD_ADDR_VAR 0 5
20997: PUSH
20998: LD_INT 12
21000: ST_TO_ADDR
21001: GO 21042
21003: LD_INT 2
21005: DOUBLE
21006: EQUAL
21007: IFTRUE 21011
21009: GO 21022
21011: POP
// tech := tech_mortar ; 3 :
21012: LD_ADDR_VAR 0 5
21016: PUSH
21017: LD_INT 41
21019: ST_TO_ADDR
21020: GO 21042
21022: LD_INT 3
21024: DOUBLE
21025: EQUAL
21026: IFTRUE 21030
21028: GO 21041
21030: POP
// tech := tech_bazooka ; end ;
21031: LD_ADDR_VAR 0 5
21035: PUSH
21036: LD_INT 44
21038: ST_TO_ADDR
21039: GO 21042
21041: POP
// if Researched ( side , tech ) then
21042: LD_VAR 0 3
21046: PPUSH
21047: LD_VAR 0 5
21051: PPUSH
21052: CALL_OW 325
21056: IFFALSE 21083
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21058: LD_ADDR_VAR 0 2
21062: PUSH
21063: LD_INT 5
21065: PUSH
21066: LD_INT 8
21068: PUSH
21069: LD_INT 9
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: PUSH
21077: LD_VAR 0 4
21081: ARRAY
21082: ST_TO_ADDR
// end ;
21083: LD_VAR 0 2
21087: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21088: LD_INT 0
21090: PPUSH
21091: PPUSH
21092: PPUSH
// if not mines then
21093: LD_VAR 0 2
21097: NOT
21098: IFFALSE 21102
// exit ;
21100: GO 21246
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21102: LD_ADDR_VAR 0 5
21106: PUSH
21107: LD_INT 81
21109: PUSH
21110: LD_VAR 0 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: LD_INT 21
21124: PUSH
21125: LD_INT 3
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PPUSH
21140: CALL_OW 69
21144: ST_TO_ADDR
// for i in mines do
21145: LD_ADDR_VAR 0 4
21149: PUSH
21150: LD_VAR 0 2
21154: PUSH
21155: FOR_IN
21156: IFFALSE 21244
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21158: LD_VAR 0 4
21162: PUSH
21163: LD_INT 1
21165: ARRAY
21166: PPUSH
21167: LD_VAR 0 4
21171: PUSH
21172: LD_INT 2
21174: ARRAY
21175: PPUSH
21176: CALL_OW 458
21180: NOT
21181: IFFALSE 21185
// continue ;
21183: GO 21155
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21185: LD_VAR 0 4
21189: PUSH
21190: LD_INT 1
21192: ARRAY
21193: PPUSH
21194: LD_VAR 0 4
21198: PUSH
21199: LD_INT 2
21201: ARRAY
21202: PPUSH
21203: CALL_OW 428
21207: PUSH
21208: LD_VAR 0 5
21212: IN
21213: IFFALSE 21242
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21215: LD_VAR 0 4
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PPUSH
21224: LD_VAR 0 4
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 1
21237: PPUSH
21238: CALL_OW 456
// end ;
21242: GO 21155
21244: POP
21245: POP
// end ;
21246: LD_VAR 0 3
21250: RET
// export function Count ( array ) ; begin
21251: LD_INT 0
21253: PPUSH
// result := array + 0 ;
21254: LD_ADDR_VAR 0 2
21258: PUSH
21259: LD_VAR 0 1
21263: PUSH
21264: LD_INT 0
21266: PLUS
21267: ST_TO_ADDR
// end ;
21268: LD_VAR 0 2
21272: RET
// export function IsEmpty ( building ) ; begin
21273: LD_INT 0
21275: PPUSH
// if not building then
21276: LD_VAR 0 1
21280: NOT
21281: IFFALSE 21285
// exit ;
21283: GO 21328
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21285: LD_ADDR_VAR 0 2
21289: PUSH
21290: LD_VAR 0 1
21294: PUSH
21295: LD_INT 22
21297: PUSH
21298: LD_VAR 0 1
21302: PPUSH
21303: CALL_OW 255
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 58
21314: PUSH
21315: EMPTY
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PPUSH
21322: CALL_OW 69
21326: IN
21327: ST_TO_ADDR
// end ;
21328: LD_VAR 0 2
21332: RET
// export function IsNotFull ( building ) ; var places ; begin
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
// if not building then
21337: LD_VAR 0 1
21341: NOT
21342: IFFALSE 21346
// exit ;
21344: GO 21374
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
21346: LD_ADDR_VAR 0 2
21350: PUSH
21351: LD_VAR 0 1
21355: PPUSH
21356: LD_INT 3
21358: PUSH
21359: LD_INT 62
21361: PUSH
21362: EMPTY
21363: LIST
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL_OW 72
21373: ST_TO_ADDR
// end ;
21374: LD_VAR 0 2
21378: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21379: LD_INT 0
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
// tmp := [ ] ;
21385: LD_ADDR_VAR 0 3
21389: PUSH
21390: EMPTY
21391: ST_TO_ADDR
// list := [ ] ;
21392: LD_ADDR_VAR 0 5
21396: PUSH
21397: EMPTY
21398: ST_TO_ADDR
// for i = 16 to 25 do
21399: LD_ADDR_VAR 0 4
21403: PUSH
21404: DOUBLE
21405: LD_INT 16
21407: DEC
21408: ST_TO_ADDR
21409: LD_INT 25
21411: PUSH
21412: FOR_TO
21413: IFFALSE 21486
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_INT 22
21427: PUSH
21428: LD_VAR 0 1
21432: PPUSH
21433: CALL_OW 255
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 91
21444: PUSH
21445: LD_VAR 0 1
21449: PUSH
21450: LD_INT 6
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 30
21460: PUSH
21461: LD_VAR 0 4
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: PPUSH
21478: CALL_OW 69
21482: ADD
21483: ST_TO_ADDR
21484: GO 21412
21486: POP
21487: POP
// for i = 1 to tmp do
21488: LD_ADDR_VAR 0 4
21492: PUSH
21493: DOUBLE
21494: LD_INT 1
21496: DEC
21497: ST_TO_ADDR
21498: LD_VAR 0 3
21502: PUSH
21503: FOR_TO
21504: IFFALSE 21592
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21506: LD_ADDR_VAR 0 5
21510: PUSH
21511: LD_VAR 0 5
21515: PUSH
21516: LD_VAR 0 3
21520: PUSH
21521: LD_VAR 0 4
21525: ARRAY
21526: PPUSH
21527: CALL_OW 266
21531: PUSH
21532: LD_VAR 0 3
21536: PUSH
21537: LD_VAR 0 4
21541: ARRAY
21542: PPUSH
21543: CALL_OW 250
21547: PUSH
21548: LD_VAR 0 3
21552: PUSH
21553: LD_VAR 0 4
21557: ARRAY
21558: PPUSH
21559: CALL_OW 251
21563: PUSH
21564: LD_VAR 0 3
21568: PUSH
21569: LD_VAR 0 4
21573: ARRAY
21574: PPUSH
21575: CALL_OW 254
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: ADD
21589: ST_TO_ADDR
21590: GO 21503
21592: POP
21593: POP
// result := list ;
21594: LD_ADDR_VAR 0 2
21598: PUSH
21599: LD_VAR 0 5
21603: ST_TO_ADDR
// end ;
21604: LD_VAR 0 2
21608: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21609: LD_INT 0
21611: PPUSH
21612: PPUSH
21613: PPUSH
21614: PPUSH
21615: PPUSH
21616: PPUSH
21617: PPUSH
// if not factory then
21618: LD_VAR 0 1
21622: NOT
21623: IFFALSE 21627
// exit ;
21625: GO 22220
// if control = control_apeman then
21627: LD_VAR 0 4
21631: PUSH
21632: LD_INT 5
21634: EQUAL
21635: IFFALSE 21744
// begin tmp := UnitsInside ( factory ) ;
21637: LD_ADDR_VAR 0 8
21641: PUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 313
21651: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21652: LD_VAR 0 8
21656: PPUSH
21657: LD_INT 25
21659: PUSH
21660: LD_INT 12
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 72
21671: NOT
21672: IFFALSE 21682
// control := control_manual ;
21674: LD_ADDR_VAR 0 4
21678: PUSH
21679: LD_INT 1
21681: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21682: LD_ADDR_VAR 0 8
21686: PUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL 21379 0 1
21696: ST_TO_ADDR
// if tmp then
21697: LD_VAR 0 8
21701: IFFALSE 21744
// begin for i in tmp do
21703: LD_ADDR_VAR 0 7
21707: PUSH
21708: LD_VAR 0 8
21712: PUSH
21713: FOR_IN
21714: IFFALSE 21742
// if i [ 1 ] = b_ext_radio then
21716: LD_VAR 0 7
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: PUSH
21725: LD_INT 22
21727: EQUAL
21728: IFFALSE 21740
// begin control := control_remote ;
21730: LD_ADDR_VAR 0 4
21734: PUSH
21735: LD_INT 2
21737: ST_TO_ADDR
// break ;
21738: GO 21742
// end ;
21740: GO 21713
21742: POP
21743: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21744: LD_VAR 0 1
21748: PPUSH
21749: LD_VAR 0 2
21753: PPUSH
21754: LD_VAR 0 3
21758: PPUSH
21759: LD_VAR 0 4
21763: PPUSH
21764: LD_VAR 0 5
21768: PPUSH
21769: CALL_OW 448
21773: IFFALSE 21808
// begin result := [ chassis , engine , control , weapon ] ;
21775: LD_ADDR_VAR 0 6
21779: PUSH
21780: LD_VAR 0 2
21784: PUSH
21785: LD_VAR 0 3
21789: PUSH
21790: LD_VAR 0 4
21794: PUSH
21795: LD_VAR 0 5
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: ST_TO_ADDR
// exit ;
21806: GO 22220
// end ; _chassis := AvailableChassisList ( factory ) ;
21808: LD_ADDR_VAR 0 9
21812: PUSH
21813: LD_VAR 0 1
21817: PPUSH
21818: CALL_OW 475
21822: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21823: LD_ADDR_VAR 0 11
21827: PUSH
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 476
21837: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21838: LD_ADDR_VAR 0 12
21842: PUSH
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL_OW 477
21852: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21853: LD_ADDR_VAR 0 10
21857: PUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 478
21867: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21868: LD_VAR 0 9
21872: NOT
21873: PUSH
21874: LD_VAR 0 11
21878: NOT
21879: OR
21880: PUSH
21881: LD_VAR 0 12
21885: NOT
21886: OR
21887: PUSH
21888: LD_VAR 0 10
21892: NOT
21893: OR
21894: IFFALSE 21929
// begin result := [ chassis , engine , control , weapon ] ;
21896: LD_ADDR_VAR 0 6
21900: PUSH
21901: LD_VAR 0 2
21905: PUSH
21906: LD_VAR 0 3
21910: PUSH
21911: LD_VAR 0 4
21915: PUSH
21916: LD_VAR 0 5
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: ST_TO_ADDR
// exit ;
21927: GO 22220
// end ; if not chassis in _chassis then
21929: LD_VAR 0 2
21933: PUSH
21934: LD_VAR 0 9
21938: IN
21939: NOT
21940: IFFALSE 21966
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
21942: LD_ADDR_VAR 0 2
21946: PUSH
21947: LD_VAR 0 9
21951: PUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_VAR 0 9
21959: PPUSH
21960: CALL_OW 12
21964: ARRAY
21965: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
21966: LD_VAR 0 2
21970: PPUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: CALL 22225 0 2
21980: NOT
21981: IFFALSE 22040
// repeat engine := _engine [ 1 ] ;
21983: LD_ADDR_VAR 0 3
21987: PUSH
21988: LD_VAR 0 11
21992: PUSH
21993: LD_INT 1
21995: ARRAY
21996: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
21997: LD_ADDR_VAR 0 11
22001: PUSH
22002: LD_VAR 0 11
22006: PPUSH
22007: LD_INT 1
22009: PPUSH
22010: CALL_OW 3
22014: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22015: LD_VAR 0 2
22019: PPUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: CALL 22225 0 2
22029: PUSH
22030: LD_VAR 0 11
22034: PUSH
22035: EMPTY
22036: EQUAL
22037: OR
22038: IFFALSE 21983
// if not control in _control then
22040: LD_VAR 0 4
22044: PUSH
22045: LD_VAR 0 12
22049: IN
22050: NOT
22051: IFFALSE 22077
// control := _control [ rand ( 1 , _control ) ] ;
22053: LD_ADDR_VAR 0 4
22057: PUSH
22058: LD_VAR 0 12
22062: PUSH
22063: LD_INT 1
22065: PPUSH
22066: LD_VAR 0 12
22070: PPUSH
22071: CALL_OW 12
22075: ARRAY
22076: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22077: LD_VAR 0 2
22081: PPUSH
22082: LD_VAR 0 5
22086: PPUSH
22087: CALL 22445 0 2
22091: NOT
22092: IFFALSE 22151
// repeat weapon := _weapon [ 1 ] ;
22094: LD_ADDR_VAR 0 5
22098: PUSH
22099: LD_VAR 0 10
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22108: LD_ADDR_VAR 0 10
22112: PUSH
22113: LD_VAR 0 10
22117: PPUSH
22118: LD_INT 1
22120: PPUSH
22121: CALL_OW 3
22125: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22126: LD_VAR 0 2
22130: PPUSH
22131: LD_VAR 0 5
22135: PPUSH
22136: CALL 22445 0 2
22140: PUSH
22141: LD_VAR 0 10
22145: PUSH
22146: EMPTY
22147: EQUAL
22148: OR
22149: IFFALSE 22094
// result := [ ] ;
22151: LD_ADDR_VAR 0 6
22155: PUSH
22156: EMPTY
22157: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22158: LD_VAR 0 1
22162: PPUSH
22163: LD_VAR 0 2
22167: PPUSH
22168: LD_VAR 0 3
22172: PPUSH
22173: LD_VAR 0 4
22177: PPUSH
22178: LD_VAR 0 5
22182: PPUSH
22183: CALL_OW 448
22187: IFFALSE 22220
// result := [ chassis , engine , control , weapon ] ;
22189: LD_ADDR_VAR 0 6
22193: PUSH
22194: LD_VAR 0 2
22198: PUSH
22199: LD_VAR 0 3
22203: PUSH
22204: LD_VAR 0 4
22208: PUSH
22209: LD_VAR 0 5
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: ST_TO_ADDR
// end ;
22220: LD_VAR 0 6
22224: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22225: LD_INT 0
22227: PPUSH
// if not chassis or not engine then
22228: LD_VAR 0 1
22232: NOT
22233: PUSH
22234: LD_VAR 0 2
22238: NOT
22239: OR
22240: IFFALSE 22244
// exit ;
22242: GO 22440
// case engine of engine_solar :
22244: LD_VAR 0 2
22248: PUSH
22249: LD_INT 2
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22295
22257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22258: LD_ADDR_VAR 0 3
22262: PUSH
22263: LD_INT 11
22265: PUSH
22266: LD_INT 12
22268: PUSH
22269: LD_INT 13
22271: PUSH
22272: LD_INT 14
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: ST_TO_ADDR
22293: GO 22424
22295: LD_INT 1
22297: DOUBLE
22298: EQUAL
22299: IFTRUE 22303
22301: GO 22365
22303: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22304: LD_ADDR_VAR 0 3
22308: PUSH
22309: LD_INT 11
22311: PUSH
22312: LD_INT 12
22314: PUSH
22315: LD_INT 13
22317: PUSH
22318: LD_INT 14
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: LD_INT 4
22332: PUSH
22333: LD_INT 5
22335: PUSH
22336: LD_INT 21
22338: PUSH
22339: LD_INT 23
22341: PUSH
22342: LD_INT 22
22344: PUSH
22345: LD_INT 24
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: ST_TO_ADDR
22363: GO 22424
22365: LD_INT 3
22367: DOUBLE
22368: EQUAL
22369: IFTRUE 22373
22371: GO 22423
22373: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22374: LD_ADDR_VAR 0 3
22378: PUSH
22379: LD_INT 13
22381: PUSH
22382: LD_INT 14
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: LD_INT 4
22393: PUSH
22394: LD_INT 5
22396: PUSH
22397: LD_INT 21
22399: PUSH
22400: LD_INT 22
22402: PUSH
22403: LD_INT 23
22405: PUSH
22406: LD_INT 24
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: ST_TO_ADDR
22421: GO 22424
22423: POP
// result := ( chassis in result ) ;
22424: LD_ADDR_VAR 0 3
22428: PUSH
22429: LD_VAR 0 1
22433: PUSH
22434: LD_VAR 0 3
22438: IN
22439: ST_TO_ADDR
// end ;
22440: LD_VAR 0 3
22444: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22445: LD_INT 0
22447: PPUSH
// if not chassis or not weapon then
22448: LD_VAR 0 1
22452: NOT
22453: PUSH
22454: LD_VAR 0 2
22458: NOT
22459: OR
22460: IFFALSE 22464
// exit ;
22462: GO 23524
// case weapon of us_machine_gun :
22464: LD_VAR 0 2
22468: PUSH
22469: LD_INT 2
22471: DOUBLE
22472: EQUAL
22473: IFTRUE 22477
22475: GO 22507
22477: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22478: LD_ADDR_VAR 0 3
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 3
22491: PUSH
22492: LD_INT 4
22494: PUSH
22495: LD_INT 5
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: ST_TO_ADDR
22505: GO 23508
22507: LD_INT 3
22509: DOUBLE
22510: EQUAL
22511: IFTRUE 22515
22513: GO 22545
22515: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22516: LD_ADDR_VAR 0 3
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: LD_INT 3
22529: PUSH
22530: LD_INT 4
22532: PUSH
22533: LD_INT 5
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: ST_TO_ADDR
22543: GO 23508
22545: LD_INT 11
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22583
22553: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22554: LD_ADDR_VAR 0 3
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: LD_INT 4
22570: PUSH
22571: LD_INT 5
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: ST_TO_ADDR
22581: GO 23508
22583: LD_INT 4
22585: DOUBLE
22586: EQUAL
22587: IFTRUE 22591
22589: GO 22617
22591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22592: LD_ADDR_VAR 0 3
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 3
22602: PUSH
22603: LD_INT 4
22605: PUSH
22606: LD_INT 5
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: ST_TO_ADDR
22615: GO 23508
22617: LD_INT 5
22619: DOUBLE
22620: EQUAL
22621: IFTRUE 22625
22623: GO 22651
22625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22626: LD_ADDR_VAR 0 3
22630: PUSH
22631: LD_INT 2
22633: PUSH
22634: LD_INT 3
22636: PUSH
22637: LD_INT 4
22639: PUSH
22640: LD_INT 5
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: ST_TO_ADDR
22649: GO 23508
22651: LD_INT 9
22653: DOUBLE
22654: EQUAL
22655: IFTRUE 22659
22657: GO 22685
22659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22660: LD_ADDR_VAR 0 3
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: LD_INT 3
22670: PUSH
22671: LD_INT 4
22673: PUSH
22674: LD_INT 5
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: ST_TO_ADDR
22683: GO 23508
22685: LD_INT 7
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22693
22691: GO 22719
22693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22694: LD_ADDR_VAR 0 3
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 3
22704: PUSH
22705: LD_INT 4
22707: PUSH
22708: LD_INT 5
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: ST_TO_ADDR
22717: GO 23508
22719: LD_INT 12
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22727
22725: GO 22753
22727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22728: LD_ADDR_VAR 0 3
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: LD_INT 4
22741: PUSH
22742: LD_INT 5
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: ST_TO_ADDR
22751: GO 23508
22753: LD_INT 13
22755: DOUBLE
22756: EQUAL
22757: IFTRUE 22761
22759: GO 22787
22761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22762: LD_ADDR_VAR 0 3
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: LD_INT 4
22775: PUSH
22776: LD_INT 5
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: ST_TO_ADDR
22785: GO 23508
22787: LD_INT 14
22789: DOUBLE
22790: EQUAL
22791: IFTRUE 22795
22793: GO 22813
22795: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22796: LD_ADDR_VAR 0 3
22800: PUSH
22801: LD_INT 4
22803: PUSH
22804: LD_INT 5
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: ST_TO_ADDR
22811: GO 23508
22813: LD_INT 6
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22839
22821: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22822: LD_ADDR_VAR 0 3
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: ST_TO_ADDR
22837: GO 23508
22839: LD_INT 10
22841: DOUBLE
22842: EQUAL
22843: IFTRUE 22847
22845: GO 22865
22847: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22848: LD_ADDR_VAR 0 3
22852: PUSH
22853: LD_INT 4
22855: PUSH
22856: LD_INT 5
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: ST_TO_ADDR
22863: GO 23508
22865: LD_INT 22
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22899
22873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22874: LD_ADDR_VAR 0 3
22878: PUSH
22879: LD_INT 11
22881: PUSH
22882: LD_INT 12
22884: PUSH
22885: LD_INT 13
22887: PUSH
22888: LD_INT 14
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: ST_TO_ADDR
22897: GO 23508
22899: LD_INT 23
22901: DOUBLE
22902: EQUAL
22903: IFTRUE 22907
22905: GO 22933
22907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
22908: LD_ADDR_VAR 0 3
22912: PUSH
22913: LD_INT 11
22915: PUSH
22916: LD_INT 12
22918: PUSH
22919: LD_INT 13
22921: PUSH
22922: LD_INT 14
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
22931: GO 23508
22933: LD_INT 24
22935: DOUBLE
22936: EQUAL
22937: IFTRUE 22941
22939: GO 22967
22941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
22942: LD_ADDR_VAR 0 3
22946: PUSH
22947: LD_INT 11
22949: PUSH
22950: LD_INT 12
22952: PUSH
22953: LD_INT 13
22955: PUSH
22956: LD_INT 14
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
22965: GO 23508
22967: LD_INT 30
22969: DOUBLE
22970: EQUAL
22971: IFTRUE 22975
22973: GO 23001
22975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
22976: LD_ADDR_VAR 0 3
22980: PUSH
22981: LD_INT 11
22983: PUSH
22984: LD_INT 12
22986: PUSH
22987: LD_INT 13
22989: PUSH
22990: LD_INT 14
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: ST_TO_ADDR
22999: GO 23508
23001: LD_INT 25
23003: DOUBLE
23004: EQUAL
23005: IFTRUE 23009
23007: GO 23027
23009: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: LD_INT 13
23017: PUSH
23018: LD_INT 14
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: ST_TO_ADDR
23025: GO 23508
23027: LD_INT 27
23029: DOUBLE
23030: EQUAL
23031: IFTRUE 23035
23033: GO 23053
23035: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23036: LD_ADDR_VAR 0 3
23040: PUSH
23041: LD_INT 13
23043: PUSH
23044: LD_INT 14
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: ST_TO_ADDR
23051: GO 23508
23053: LD_INT 92
23055: DOUBLE
23056: EQUAL
23057: IFTRUE 23061
23059: GO 23087
23061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23062: LD_ADDR_VAR 0 3
23066: PUSH
23067: LD_INT 11
23069: PUSH
23070: LD_INT 12
23072: PUSH
23073: LD_INT 13
23075: PUSH
23076: LD_INT 14
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: ST_TO_ADDR
23085: GO 23508
23087: LD_INT 28
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 23113
23095: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23096: LD_ADDR_VAR 0 3
23100: PUSH
23101: LD_INT 13
23103: PUSH
23104: LD_INT 14
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: ST_TO_ADDR
23111: GO 23508
23113: LD_INT 29
23115: DOUBLE
23116: EQUAL
23117: IFTRUE 23121
23119: GO 23139
23121: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23122: LD_ADDR_VAR 0 3
23126: PUSH
23127: LD_INT 13
23129: PUSH
23130: LD_INT 14
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: ST_TO_ADDR
23137: GO 23508
23139: LD_INT 31
23141: DOUBLE
23142: EQUAL
23143: IFTRUE 23147
23145: GO 23165
23147: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23148: LD_ADDR_VAR 0 3
23152: PUSH
23153: LD_INT 13
23155: PUSH
23156: LD_INT 14
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: ST_TO_ADDR
23163: GO 23508
23165: LD_INT 26
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23191
23173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23174: LD_ADDR_VAR 0 3
23178: PUSH
23179: LD_INT 13
23181: PUSH
23182: LD_INT 14
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: ST_TO_ADDR
23189: GO 23508
23191: LD_INT 42
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23225
23199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_INT 21
23207: PUSH
23208: LD_INT 22
23210: PUSH
23211: LD_INT 23
23213: PUSH
23214: LD_INT 24
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: ST_TO_ADDR
23223: GO 23508
23225: LD_INT 43
23227: DOUBLE
23228: EQUAL
23229: IFTRUE 23233
23231: GO 23259
23233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 21
23241: PUSH
23242: LD_INT 22
23244: PUSH
23245: LD_INT 23
23247: PUSH
23248: LD_INT 24
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: ST_TO_ADDR
23257: GO 23508
23259: LD_INT 44
23261: DOUBLE
23262: EQUAL
23263: IFTRUE 23267
23265: GO 23293
23267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23268: LD_ADDR_VAR 0 3
23272: PUSH
23273: LD_INT 21
23275: PUSH
23276: LD_INT 22
23278: PUSH
23279: LD_INT 23
23281: PUSH
23282: LD_INT 24
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: ST_TO_ADDR
23291: GO 23508
23293: LD_INT 45
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23327
23301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23302: LD_ADDR_VAR 0 3
23306: PUSH
23307: LD_INT 21
23309: PUSH
23310: LD_INT 22
23312: PUSH
23313: LD_INT 23
23315: PUSH
23316: LD_INT 24
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: ST_TO_ADDR
23325: GO 23508
23327: LD_INT 49
23329: DOUBLE
23330: EQUAL
23331: IFTRUE 23335
23333: GO 23361
23335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23336: LD_ADDR_VAR 0 3
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 22
23346: PUSH
23347: LD_INT 23
23349: PUSH
23350: LD_INT 24
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: ST_TO_ADDR
23359: GO 23508
23361: LD_INT 51
23363: DOUBLE
23364: EQUAL
23365: IFTRUE 23369
23367: GO 23395
23369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23370: LD_ADDR_VAR 0 3
23374: PUSH
23375: LD_INT 21
23377: PUSH
23378: LD_INT 22
23380: PUSH
23381: LD_INT 23
23383: PUSH
23384: LD_INT 24
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: ST_TO_ADDR
23393: GO 23508
23395: LD_INT 52
23397: DOUBLE
23398: EQUAL
23399: IFTRUE 23403
23401: GO 23429
23403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_INT 21
23411: PUSH
23412: LD_INT 22
23414: PUSH
23415: LD_INT 23
23417: PUSH
23418: LD_INT 24
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: ST_TO_ADDR
23427: GO 23508
23429: LD_INT 53
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23455
23437: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_INT 23
23445: PUSH
23446: LD_INT 24
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: ST_TO_ADDR
23453: GO 23508
23455: LD_INT 46
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23481
23463: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23464: LD_ADDR_VAR 0 3
23468: PUSH
23469: LD_INT 23
23471: PUSH
23472: LD_INT 24
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: ST_TO_ADDR
23479: GO 23508
23481: LD_INT 47
23483: DOUBLE
23484: EQUAL
23485: IFTRUE 23489
23487: GO 23507
23489: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23490: LD_ADDR_VAR 0 3
23494: PUSH
23495: LD_INT 23
23497: PUSH
23498: LD_INT 24
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: ST_TO_ADDR
23505: GO 23508
23507: POP
// result := ( chassis in result ) ;
23508: LD_ADDR_VAR 0 3
23512: PUSH
23513: LD_VAR 0 1
23517: PUSH
23518: LD_VAR 0 3
23522: IN
23523: ST_TO_ADDR
// end ;
23524: LD_VAR 0 3
23528: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23529: LD_INT 0
23531: PPUSH
23532: PPUSH
23533: PPUSH
23534: PPUSH
23535: PPUSH
23536: PPUSH
23537: PPUSH
// result := array ;
23538: LD_ADDR_VAR 0 5
23542: PUSH
23543: LD_VAR 0 1
23547: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23548: LD_VAR 0 1
23552: NOT
23553: PUSH
23554: LD_VAR 0 2
23558: NOT
23559: OR
23560: PUSH
23561: LD_VAR 0 3
23565: NOT
23566: OR
23567: PUSH
23568: LD_VAR 0 2
23572: PUSH
23573: LD_VAR 0 1
23577: GREATER
23578: OR
23579: PUSH
23580: LD_VAR 0 3
23584: PUSH
23585: LD_VAR 0 1
23589: GREATER
23590: OR
23591: IFFALSE 23595
// exit ;
23593: GO 23891
// if direction then
23595: LD_VAR 0 4
23599: IFFALSE 23663
// begin d := 1 ;
23601: LD_ADDR_VAR 0 9
23605: PUSH
23606: LD_INT 1
23608: ST_TO_ADDR
// if i_from > i_to then
23609: LD_VAR 0 2
23613: PUSH
23614: LD_VAR 0 3
23618: GREATER
23619: IFFALSE 23645
// length := ( array - i_from ) + i_to else
23621: LD_ADDR_VAR 0 11
23625: PUSH
23626: LD_VAR 0 1
23630: PUSH
23631: LD_VAR 0 2
23635: MINUS
23636: PUSH
23637: LD_VAR 0 3
23641: PLUS
23642: ST_TO_ADDR
23643: GO 23661
// length := i_to - i_from ;
23645: LD_ADDR_VAR 0 11
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: LD_VAR 0 2
23659: MINUS
23660: ST_TO_ADDR
// end else
23661: GO 23724
// begin d := - 1 ;
23663: LD_ADDR_VAR 0 9
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: ST_TO_ADDR
// if i_from > i_to then
23672: LD_VAR 0 2
23676: PUSH
23677: LD_VAR 0 3
23681: GREATER
23682: IFFALSE 23702
// length := i_from - i_to else
23684: LD_ADDR_VAR 0 11
23688: PUSH
23689: LD_VAR 0 2
23693: PUSH
23694: LD_VAR 0 3
23698: MINUS
23699: ST_TO_ADDR
23700: GO 23724
// length := ( array - i_to ) + i_from ;
23702: LD_ADDR_VAR 0 11
23706: PUSH
23707: LD_VAR 0 1
23711: PUSH
23712: LD_VAR 0 3
23716: MINUS
23717: PUSH
23718: LD_VAR 0 2
23722: PLUS
23723: ST_TO_ADDR
// end ; if not length then
23724: LD_VAR 0 11
23728: NOT
23729: IFFALSE 23733
// exit ;
23731: GO 23891
// tmp := array ;
23733: LD_ADDR_VAR 0 10
23737: PUSH
23738: LD_VAR 0 1
23742: ST_TO_ADDR
// for i = 1 to length do
23743: LD_ADDR_VAR 0 6
23747: PUSH
23748: DOUBLE
23749: LD_INT 1
23751: DEC
23752: ST_TO_ADDR
23753: LD_VAR 0 11
23757: PUSH
23758: FOR_TO
23759: IFFALSE 23879
// begin for j = 1 to array do
23761: LD_ADDR_VAR 0 7
23765: PUSH
23766: DOUBLE
23767: LD_INT 1
23769: DEC
23770: ST_TO_ADDR
23771: LD_VAR 0 1
23775: PUSH
23776: FOR_TO
23777: IFFALSE 23865
// begin k := j + d ;
23779: LD_ADDR_VAR 0 8
23783: PUSH
23784: LD_VAR 0 7
23788: PUSH
23789: LD_VAR 0 9
23793: PLUS
23794: ST_TO_ADDR
// if k > array then
23795: LD_VAR 0 8
23799: PUSH
23800: LD_VAR 0 1
23804: GREATER
23805: IFFALSE 23815
// k := 1 ;
23807: LD_ADDR_VAR 0 8
23811: PUSH
23812: LD_INT 1
23814: ST_TO_ADDR
// if not k then
23815: LD_VAR 0 8
23819: NOT
23820: IFFALSE 23832
// k := array ;
23822: LD_ADDR_VAR 0 8
23826: PUSH
23827: LD_VAR 0 1
23831: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23832: LD_ADDR_VAR 0 10
23836: PUSH
23837: LD_VAR 0 10
23841: PPUSH
23842: LD_VAR 0 8
23846: PPUSH
23847: LD_VAR 0 1
23851: PUSH
23852: LD_VAR 0 7
23856: ARRAY
23857: PPUSH
23858: CALL_OW 1
23862: ST_TO_ADDR
// end ;
23863: GO 23776
23865: POP
23866: POP
// array := tmp ;
23867: LD_ADDR_VAR 0 1
23871: PUSH
23872: LD_VAR 0 10
23876: ST_TO_ADDR
// end ;
23877: GO 23758
23879: POP
23880: POP
// result := array ;
23881: LD_ADDR_VAR 0 5
23885: PUSH
23886: LD_VAR 0 1
23890: ST_TO_ADDR
// end ;
23891: LD_VAR 0 5
23895: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23896: LD_INT 0
23898: PPUSH
23899: PPUSH
// result := 0 ;
23900: LD_ADDR_VAR 0 3
23904: PUSH
23905: LD_INT 0
23907: ST_TO_ADDR
// if not array or not value in array then
23908: LD_VAR 0 1
23912: NOT
23913: PUSH
23914: LD_VAR 0 2
23918: PUSH
23919: LD_VAR 0 1
23923: IN
23924: NOT
23925: OR
23926: IFFALSE 23930
// exit ;
23928: GO 23984
// for i = 1 to array do
23930: LD_ADDR_VAR 0 4
23934: PUSH
23935: DOUBLE
23936: LD_INT 1
23938: DEC
23939: ST_TO_ADDR
23940: LD_VAR 0 1
23944: PUSH
23945: FOR_TO
23946: IFFALSE 23982
// if value = array [ i ] then
23948: LD_VAR 0 2
23952: PUSH
23953: LD_VAR 0 1
23957: PUSH
23958: LD_VAR 0 4
23962: ARRAY
23963: EQUAL
23964: IFFALSE 23980
// begin result := i ;
23966: LD_ADDR_VAR 0 3
23970: PUSH
23971: LD_VAR 0 4
23975: ST_TO_ADDR
// exit ;
23976: POP
23977: POP
23978: GO 23984
// end ;
23980: GO 23945
23982: POP
23983: POP
// end ;
23984: LD_VAR 0 3
23988: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
23989: LD_INT 0
23991: PPUSH
// vc_chassis := chassis ;
23992: LD_ADDR_OWVAR 37
23996: PUSH
23997: LD_VAR 0 1
24001: ST_TO_ADDR
// vc_engine := engine ;
24002: LD_ADDR_OWVAR 39
24006: PUSH
24007: LD_VAR 0 2
24011: ST_TO_ADDR
// vc_control := control ;
24012: LD_ADDR_OWVAR 38
24016: PUSH
24017: LD_VAR 0 3
24021: ST_TO_ADDR
// vc_weapon := weapon ;
24022: LD_ADDR_OWVAR 40
24026: PUSH
24027: LD_VAR 0 4
24031: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24032: LD_ADDR_OWVAR 41
24036: PUSH
24037: LD_VAR 0 5
24041: ST_TO_ADDR
// end ;
24042: LD_VAR 0 6
24046: RET
// export function WantPlant ( unit ) ; var task ; begin
24047: LD_INT 0
24049: PPUSH
24050: PPUSH
// result := false ;
24051: LD_ADDR_VAR 0 2
24055: PUSH
24056: LD_INT 0
24058: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 437
24073: ST_TO_ADDR
// if task then
24074: LD_VAR 0 3
24078: IFFALSE 24106
// if task [ 1 ] [ 1 ] = p then
24080: LD_VAR 0 3
24084: PUSH
24085: LD_INT 1
24087: ARRAY
24088: PUSH
24089: LD_INT 1
24091: ARRAY
24092: PUSH
24093: LD_STRING p
24095: EQUAL
24096: IFFALSE 24106
// result := true ;
24098: LD_ADDR_VAR 0 2
24102: PUSH
24103: LD_INT 1
24105: ST_TO_ADDR
// end ;
24106: LD_VAR 0 2
24110: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24111: LD_INT 0
24113: PPUSH
24114: PPUSH
24115: PPUSH
24116: PPUSH
// if pos < 1 then
24117: LD_VAR 0 2
24121: PUSH
24122: LD_INT 1
24124: LESS
24125: IFFALSE 24129
// exit ;
24127: GO 24432
// if pos = 1 then
24129: LD_VAR 0 2
24133: PUSH
24134: LD_INT 1
24136: EQUAL
24137: IFFALSE 24170
// result := Replace ( arr , pos [ 1 ] , value ) else
24139: LD_ADDR_VAR 0 4
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: LD_VAR 0 2
24153: PUSH
24154: LD_INT 1
24156: ARRAY
24157: PPUSH
24158: LD_VAR 0 3
24162: PPUSH
24163: CALL_OW 1
24167: ST_TO_ADDR
24168: GO 24432
// begin tmp := arr ;
24170: LD_ADDR_VAR 0 6
24174: PUSH
24175: LD_VAR 0 1
24179: ST_TO_ADDR
// s_arr := [ tmp ] ;
24180: LD_ADDR_VAR 0 7
24184: PUSH
24185: LD_VAR 0 6
24189: PUSH
24190: EMPTY
24191: LIST
24192: ST_TO_ADDR
// for i = 1 to pos - 1 do
24193: LD_ADDR_VAR 0 5
24197: PUSH
24198: DOUBLE
24199: LD_INT 1
24201: DEC
24202: ST_TO_ADDR
24203: LD_VAR 0 2
24207: PUSH
24208: LD_INT 1
24210: MINUS
24211: PUSH
24212: FOR_TO
24213: IFFALSE 24258
// begin tmp := tmp [ pos [ i ] ] ;
24215: LD_ADDR_VAR 0 6
24219: PUSH
24220: LD_VAR 0 6
24224: PUSH
24225: LD_VAR 0 2
24229: PUSH
24230: LD_VAR 0 5
24234: ARRAY
24235: ARRAY
24236: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24237: LD_ADDR_VAR 0 7
24241: PUSH
24242: LD_VAR 0 7
24246: PUSH
24247: LD_VAR 0 6
24251: PUSH
24252: EMPTY
24253: LIST
24254: ADD
24255: ST_TO_ADDR
// end ;
24256: GO 24212
24258: POP
24259: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24260: LD_ADDR_VAR 0 6
24264: PUSH
24265: LD_VAR 0 6
24269: PPUSH
24270: LD_VAR 0 2
24274: PUSH
24275: LD_VAR 0 2
24279: ARRAY
24280: PPUSH
24281: LD_VAR 0 3
24285: PPUSH
24286: CALL_OW 1
24290: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24291: LD_ADDR_VAR 0 7
24295: PUSH
24296: LD_VAR 0 7
24300: PPUSH
24301: LD_VAR 0 7
24305: PPUSH
24306: LD_VAR 0 6
24310: PPUSH
24311: CALL_OW 1
24315: ST_TO_ADDR
// for i = s_arr downto 2 do
24316: LD_ADDR_VAR 0 5
24320: PUSH
24321: DOUBLE
24322: LD_VAR 0 7
24326: INC
24327: ST_TO_ADDR
24328: LD_INT 2
24330: PUSH
24331: FOR_DOWNTO
24332: IFFALSE 24416
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24334: LD_ADDR_VAR 0 6
24338: PUSH
24339: LD_VAR 0 7
24343: PUSH
24344: LD_VAR 0 5
24348: PUSH
24349: LD_INT 1
24351: MINUS
24352: ARRAY
24353: PPUSH
24354: LD_VAR 0 2
24358: PUSH
24359: LD_VAR 0 5
24363: PUSH
24364: LD_INT 1
24366: MINUS
24367: ARRAY
24368: PPUSH
24369: LD_VAR 0 7
24373: PUSH
24374: LD_VAR 0 5
24378: ARRAY
24379: PPUSH
24380: CALL_OW 1
24384: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24385: LD_ADDR_VAR 0 7
24389: PUSH
24390: LD_VAR 0 7
24394: PPUSH
24395: LD_VAR 0 5
24399: PUSH
24400: LD_INT 1
24402: MINUS
24403: PPUSH
24404: LD_VAR 0 6
24408: PPUSH
24409: CALL_OW 1
24413: ST_TO_ADDR
// end ;
24414: GO 24331
24416: POP
24417: POP
// result := s_arr [ 1 ] ;
24418: LD_ADDR_VAR 0 4
24422: PUSH
24423: LD_VAR 0 7
24427: PUSH
24428: LD_INT 1
24430: ARRAY
24431: ST_TO_ADDR
// end ; end ;
24432: LD_VAR 0 4
24436: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24437: LD_INT 0
24439: PPUSH
24440: PPUSH
// if not list then
24441: LD_VAR 0 1
24445: NOT
24446: IFFALSE 24450
// exit ;
24448: GO 24541
// i := list [ pos1 ] ;
24450: LD_ADDR_VAR 0 5
24454: PUSH
24455: LD_VAR 0 1
24459: PUSH
24460: LD_VAR 0 2
24464: ARRAY
24465: ST_TO_ADDR
// if not i then
24466: LD_VAR 0 5
24470: NOT
24471: IFFALSE 24475
// exit ;
24473: GO 24541
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24475: LD_ADDR_VAR 0 1
24479: PUSH
24480: LD_VAR 0 1
24484: PPUSH
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_VAR 0 1
24494: PUSH
24495: LD_VAR 0 3
24499: ARRAY
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24506: LD_ADDR_VAR 0 1
24510: PUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: LD_VAR 0 3
24520: PPUSH
24521: LD_VAR 0 5
24525: PPUSH
24526: CALL_OW 1
24530: ST_TO_ADDR
// result := list ;
24531: LD_ADDR_VAR 0 4
24535: PUSH
24536: LD_VAR 0 1
24540: ST_TO_ADDR
// end ;
24541: LD_VAR 0 4
24545: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24546: LD_INT 0
24548: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24549: LD_ADDR_VAR 0 5
24553: PUSH
24554: LD_VAR 0 1
24558: PPUSH
24559: CALL_OW 250
24563: PPUSH
24564: LD_VAR 0 1
24568: PPUSH
24569: CALL_OW 251
24573: PPUSH
24574: LD_VAR 0 2
24578: PPUSH
24579: LD_VAR 0 3
24583: PPUSH
24584: LD_VAR 0 4
24588: PPUSH
24589: CALL 24967 0 5
24593: ST_TO_ADDR
// end ;
24594: LD_VAR 0 5
24598: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
24599: LD_INT 0
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
// if not list or not unit then
24605: LD_VAR 0 2
24609: NOT
24610: PUSH
24611: LD_VAR 0 1
24615: NOT
24616: OR
24617: IFFALSE 24621
// exit ;
24619: GO 24962
// result := [ ] ;
24621: LD_ADDR_VAR 0 5
24625: PUSH
24626: EMPTY
24627: ST_TO_ADDR
// for i in list do
24628: LD_ADDR_VAR 0 6
24632: PUSH
24633: LD_VAR 0 2
24637: PUSH
24638: FOR_IN
24639: IFFALSE 24857
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
24641: LD_ADDR_VAR 0 8
24645: PUSH
24646: LD_VAR 0 1
24650: PPUSH
24651: LD_VAR 0 6
24655: PUSH
24656: LD_INT 1
24658: ARRAY
24659: PPUSH
24660: LD_VAR 0 6
24664: PUSH
24665: LD_INT 2
24667: ARRAY
24668: PPUSH
24669: CALL_OW 297
24673: ST_TO_ADDR
// if not Count ( result ) then
24674: LD_VAR 0 5
24678: PPUSH
24679: CALL 21251 0 1
24683: NOT
24684: IFFALSE 24717
// begin result := Join ( result , [ i , tmp ] ) ;
24686: LD_ADDR_VAR 0 5
24690: PUSH
24691: LD_VAR 0 5
24695: PPUSH
24696: LD_VAR 0 6
24700: PUSH
24701: LD_VAR 0 8
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PPUSH
24710: CALL 56838 0 2
24714: ST_TO_ADDR
// continue ;
24715: GO 24638
// end ; if result [ result ] [ 2 ] <= tmp then
24717: LD_VAR 0 5
24721: PUSH
24722: LD_VAR 0 5
24726: ARRAY
24727: PUSH
24728: LD_INT 2
24730: ARRAY
24731: PUSH
24732: LD_VAR 0 8
24736: LESSEQUAL
24737: IFFALSE 24770
// result := Join ( result , [ i , tmp ] ) else
24739: LD_ADDR_VAR 0 5
24743: PUSH
24744: LD_VAR 0 5
24748: PPUSH
24749: LD_VAR 0 6
24753: PUSH
24754: LD_VAR 0 8
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PPUSH
24763: CALL 56838 0 2
24767: ST_TO_ADDR
24768: GO 24855
// begin for j := 1 to Count ( result ) do
24770: LD_ADDR_VAR 0 7
24774: PUSH
24775: DOUBLE
24776: LD_INT 1
24778: DEC
24779: ST_TO_ADDR
24780: LD_VAR 0 5
24784: PPUSH
24785: CALL 21251 0 1
24789: PUSH
24790: FOR_TO
24791: IFFALSE 24853
// begin if tmp < result [ j ] [ 2 ] then
24793: LD_VAR 0 8
24797: PUSH
24798: LD_VAR 0 5
24802: PUSH
24803: LD_VAR 0 7
24807: ARRAY
24808: PUSH
24809: LD_INT 2
24811: ARRAY
24812: LESS
24813: IFFALSE 24851
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24815: LD_ADDR_VAR 0 5
24819: PUSH
24820: LD_VAR 0 5
24824: PPUSH
24825: LD_VAR 0 7
24829: PPUSH
24830: LD_VAR 0 6
24834: PUSH
24835: LD_VAR 0 8
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PPUSH
24844: CALL_OW 2
24848: ST_TO_ADDR
// break ;
24849: GO 24853
// end ; end ;
24851: GO 24790
24853: POP
24854: POP
// end ; end ;
24855: GO 24638
24857: POP
24858: POP
// if result and not asc then
24859: LD_VAR 0 5
24863: PUSH
24864: LD_VAR 0 3
24868: NOT
24869: AND
24870: IFFALSE 24887
// result := ReverseArray ( result ) ;
24872: LD_ADDR_VAR 0 5
24876: PUSH
24877: LD_VAR 0 5
24881: PPUSH
24882: CALL 52127 0 1
24886: ST_TO_ADDR
// tmp := [ ] ;
24887: LD_ADDR_VAR 0 8
24891: PUSH
24892: EMPTY
24893: ST_TO_ADDR
// if mode then
24894: LD_VAR 0 4
24898: IFFALSE 24962
// begin for i := 1 to result do
24900: LD_ADDR_VAR 0 6
24904: PUSH
24905: DOUBLE
24906: LD_INT 1
24908: DEC
24909: ST_TO_ADDR
24910: LD_VAR 0 5
24914: PUSH
24915: FOR_TO
24916: IFFALSE 24950
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
24918: LD_ADDR_VAR 0 8
24922: PUSH
24923: LD_VAR 0 8
24927: PPUSH
24928: LD_VAR 0 5
24932: PUSH
24933: LD_VAR 0 6
24937: ARRAY
24938: PUSH
24939: LD_INT 1
24941: ARRAY
24942: PPUSH
24943: CALL 56838 0 2
24947: ST_TO_ADDR
24948: GO 24915
24950: POP
24951: POP
// result := tmp ;
24952: LD_ADDR_VAR 0 5
24956: PUSH
24957: LD_VAR 0 8
24961: ST_TO_ADDR
// end ; end ;
24962: LD_VAR 0 5
24966: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24967: LD_INT 0
24969: PPUSH
24970: PPUSH
24971: PPUSH
24972: PPUSH
// if not list then
24973: LD_VAR 0 3
24977: NOT
24978: IFFALSE 24982
// exit ;
24980: GO 25370
// result := [ ] ;
24982: LD_ADDR_VAR 0 6
24986: PUSH
24987: EMPTY
24988: ST_TO_ADDR
// for i in list do
24989: LD_ADDR_VAR 0 7
24993: PUSH
24994: LD_VAR 0 3
24998: PUSH
24999: FOR_IN
25000: IFFALSE 25202
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25002: LD_ADDR_VAR 0 9
25006: PUSH
25007: LD_VAR 0 7
25011: PPUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: LD_VAR 0 2
25021: PPUSH
25022: CALL_OW 297
25026: ST_TO_ADDR
// if not result then
25027: LD_VAR 0 6
25031: NOT
25032: IFFALSE 25058
// result := [ [ i , tmp ] ] else
25034: LD_ADDR_VAR 0 6
25038: PUSH
25039: LD_VAR 0 7
25043: PUSH
25044: LD_VAR 0 9
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: EMPTY
25054: LIST
25055: ST_TO_ADDR
25056: GO 25200
// begin if result [ result ] [ 2 ] < tmp then
25058: LD_VAR 0 6
25062: PUSH
25063: LD_VAR 0 6
25067: ARRAY
25068: PUSH
25069: LD_INT 2
25071: ARRAY
25072: PUSH
25073: LD_VAR 0 9
25077: LESS
25078: IFFALSE 25120
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25080: LD_ADDR_VAR 0 6
25084: PUSH
25085: LD_VAR 0 6
25089: PPUSH
25090: LD_VAR 0 6
25094: PUSH
25095: LD_INT 1
25097: PLUS
25098: PPUSH
25099: LD_VAR 0 7
25103: PUSH
25104: LD_VAR 0 9
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PPUSH
25113: CALL_OW 2
25117: ST_TO_ADDR
25118: GO 25200
// for j = 1 to result do
25120: LD_ADDR_VAR 0 8
25124: PUSH
25125: DOUBLE
25126: LD_INT 1
25128: DEC
25129: ST_TO_ADDR
25130: LD_VAR 0 6
25134: PUSH
25135: FOR_TO
25136: IFFALSE 25198
// begin if tmp < result [ j ] [ 2 ] then
25138: LD_VAR 0 9
25142: PUSH
25143: LD_VAR 0 6
25147: PUSH
25148: LD_VAR 0 8
25152: ARRAY
25153: PUSH
25154: LD_INT 2
25156: ARRAY
25157: LESS
25158: IFFALSE 25196
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25160: LD_ADDR_VAR 0 6
25164: PUSH
25165: LD_VAR 0 6
25169: PPUSH
25170: LD_VAR 0 8
25174: PPUSH
25175: LD_VAR 0 7
25179: PUSH
25180: LD_VAR 0 9
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 2
25193: ST_TO_ADDR
// break ;
25194: GO 25198
// end ; end ;
25196: GO 25135
25198: POP
25199: POP
// end ; end ;
25200: GO 24999
25202: POP
25203: POP
// if result and not asc then
25204: LD_VAR 0 6
25208: PUSH
25209: LD_VAR 0 4
25213: NOT
25214: AND
25215: IFFALSE 25290
// begin tmp := result ;
25217: LD_ADDR_VAR 0 9
25221: PUSH
25222: LD_VAR 0 6
25226: ST_TO_ADDR
// for i = tmp downto 1 do
25227: LD_ADDR_VAR 0 7
25231: PUSH
25232: DOUBLE
25233: LD_VAR 0 9
25237: INC
25238: ST_TO_ADDR
25239: LD_INT 1
25241: PUSH
25242: FOR_DOWNTO
25243: IFFALSE 25288
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25245: LD_ADDR_VAR 0 6
25249: PUSH
25250: LD_VAR 0 6
25254: PPUSH
25255: LD_VAR 0 9
25259: PUSH
25260: LD_VAR 0 7
25264: MINUS
25265: PUSH
25266: LD_INT 1
25268: PLUS
25269: PPUSH
25270: LD_VAR 0 9
25274: PUSH
25275: LD_VAR 0 7
25279: ARRAY
25280: PPUSH
25281: CALL_OW 1
25285: ST_TO_ADDR
25286: GO 25242
25288: POP
25289: POP
// end ; tmp := [ ] ;
25290: LD_ADDR_VAR 0 9
25294: PUSH
25295: EMPTY
25296: ST_TO_ADDR
// if mode then
25297: LD_VAR 0 5
25301: IFFALSE 25370
// begin for i = 1 to result do
25303: LD_ADDR_VAR 0 7
25307: PUSH
25308: DOUBLE
25309: LD_INT 1
25311: DEC
25312: ST_TO_ADDR
25313: LD_VAR 0 6
25317: PUSH
25318: FOR_TO
25319: IFFALSE 25358
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25321: LD_ADDR_VAR 0 9
25325: PUSH
25326: LD_VAR 0 9
25330: PPUSH
25331: LD_VAR 0 7
25335: PPUSH
25336: LD_VAR 0 6
25340: PUSH
25341: LD_VAR 0 7
25345: ARRAY
25346: PUSH
25347: LD_INT 1
25349: ARRAY
25350: PPUSH
25351: CALL_OW 1
25355: ST_TO_ADDR
25356: GO 25318
25358: POP
25359: POP
// result := tmp ;
25360: LD_ADDR_VAR 0 6
25364: PUSH
25365: LD_VAR 0 9
25369: ST_TO_ADDR
// end ; end ;
25370: LD_VAR 0 6
25374: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25375: LD_INT 0
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25383: LD_ADDR_VAR 0 5
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: ST_TO_ADDR
// if not x or not y then
25405: LD_VAR 0 2
25409: NOT
25410: PUSH
25411: LD_VAR 0 3
25415: NOT
25416: OR
25417: IFFALSE 25421
// exit ;
25419: GO 27071
// if not range then
25421: LD_VAR 0 4
25425: NOT
25426: IFFALSE 25436
// range := 10 ;
25428: LD_ADDR_VAR 0 4
25432: PUSH
25433: LD_INT 10
25435: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25436: LD_ADDR_VAR 0 8
25440: PUSH
25441: LD_INT 81
25443: PUSH
25444: LD_VAR 0 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 92
25455: PUSH
25456: LD_VAR 0 2
25460: PUSH
25461: LD_VAR 0 3
25465: PUSH
25466: LD_VAR 0 4
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 3
25479: PUSH
25480: LD_INT 21
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL_OW 69
25503: ST_TO_ADDR
// if not tmp then
25504: LD_VAR 0 8
25508: NOT
25509: IFFALSE 25513
// exit ;
25511: GO 27071
// for i in tmp do
25513: LD_ADDR_VAR 0 6
25517: PUSH
25518: LD_VAR 0 8
25522: PUSH
25523: FOR_IN
25524: IFFALSE 27046
// begin points := [ 0 , 0 , 0 ] ;
25526: LD_ADDR_VAR 0 9
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: ST_TO_ADDR
// bpoints := 1 ;
25545: LD_ADDR_VAR 0 10
25549: PUSH
25550: LD_INT 1
25552: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25553: LD_VAR 0 6
25557: PPUSH
25558: CALL_OW 247
25562: PUSH
25563: LD_INT 1
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 26149
25571: POP
// begin if GetClass ( i ) = 1 then
25572: LD_VAR 0 6
25576: PPUSH
25577: CALL_OW 257
25581: PUSH
25582: LD_INT 1
25584: EQUAL
25585: IFFALSE 25606
// points := [ 10 , 5 , 3 ] ;
25587: LD_ADDR_VAR 0 9
25591: PUSH
25592: LD_INT 10
25594: PUSH
25595: LD_INT 5
25597: PUSH
25598: LD_INT 3
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25606: LD_VAR 0 6
25610: PPUSH
25611: CALL_OW 257
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: LD_INT 3
25621: PUSH
25622: LD_INT 4
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: IN
25630: IFFALSE 25651
// points := [ 3 , 2 , 1 ] ;
25632: LD_ADDR_VAR 0 9
25636: PUSH
25637: LD_INT 3
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25651: LD_VAR 0 6
25655: PPUSH
25656: CALL_OW 257
25660: PUSH
25661: LD_INT 5
25663: EQUAL
25664: IFFALSE 25685
// points := [ 130 , 5 , 2 ] ;
25666: LD_ADDR_VAR 0 9
25670: PUSH
25671: LD_INT 130
25673: PUSH
25674: LD_INT 5
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25685: LD_VAR 0 6
25689: PPUSH
25690: CALL_OW 257
25694: PUSH
25695: LD_INT 8
25697: EQUAL
25698: IFFALSE 25719
// points := [ 35 , 35 , 30 ] ;
25700: LD_ADDR_VAR 0 9
25704: PUSH
25705: LD_INT 35
25707: PUSH
25708: LD_INT 35
25710: PUSH
25711: LD_INT 30
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25719: LD_VAR 0 6
25723: PPUSH
25724: CALL_OW 257
25728: PUSH
25729: LD_INT 9
25731: EQUAL
25732: IFFALSE 25753
// points := [ 20 , 55 , 40 ] ;
25734: LD_ADDR_VAR 0 9
25738: PUSH
25739: LD_INT 20
25741: PUSH
25742: LD_INT 55
25744: PUSH
25745: LD_INT 40
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25753: LD_VAR 0 6
25757: PPUSH
25758: CALL_OW 257
25762: PUSH
25763: LD_INT 12
25765: PUSH
25766: LD_INT 16
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: IN
25773: IFFALSE 25794
// points := [ 5 , 3 , 2 ] ;
25775: LD_ADDR_VAR 0 9
25779: PUSH
25780: LD_INT 5
25782: PUSH
25783: LD_INT 3
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: LIST
25793: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25794: LD_VAR 0 6
25798: PPUSH
25799: CALL_OW 257
25803: PUSH
25804: LD_INT 17
25806: EQUAL
25807: IFFALSE 25828
// points := [ 100 , 50 , 75 ] ;
25809: LD_ADDR_VAR 0 9
25813: PUSH
25814: LD_INT 100
25816: PUSH
25817: LD_INT 50
25819: PUSH
25820: LD_INT 75
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25828: LD_VAR 0 6
25832: PPUSH
25833: CALL_OW 257
25837: PUSH
25838: LD_INT 15
25840: EQUAL
25841: IFFALSE 25862
// points := [ 10 , 5 , 3 ] ;
25843: LD_ADDR_VAR 0 9
25847: PUSH
25848: LD_INT 10
25850: PUSH
25851: LD_INT 5
25853: PUSH
25854: LD_INT 3
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25862: LD_VAR 0 6
25866: PPUSH
25867: CALL_OW 257
25871: PUSH
25872: LD_INT 14
25874: EQUAL
25875: IFFALSE 25896
// points := [ 10 , 0 , 0 ] ;
25877: LD_ADDR_VAR 0 9
25881: PUSH
25882: LD_INT 10
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25896: LD_VAR 0 6
25900: PPUSH
25901: CALL_OW 257
25905: PUSH
25906: LD_INT 11
25908: EQUAL
25909: IFFALSE 25930
// points := [ 30 , 10 , 5 ] ;
25911: LD_ADDR_VAR 0 9
25915: PUSH
25916: LD_INT 30
25918: PUSH
25919: LD_INT 10
25921: PUSH
25922: LD_INT 5
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25930: LD_VAR 0 1
25934: PPUSH
25935: LD_INT 5
25937: PPUSH
25938: CALL_OW 321
25942: PUSH
25943: LD_INT 2
25945: EQUAL
25946: IFFALSE 25963
// bpoints := bpoints * 1.8 ;
25948: LD_ADDR_VAR 0 10
25952: PUSH
25953: LD_VAR 0 10
25957: PUSH
25958: LD_REAL  1.80000000000000E+0000
25961: MUL
25962: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25963: LD_VAR 0 6
25967: PPUSH
25968: CALL_OW 257
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 2
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: LD_INT 4
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: IN
25991: PUSH
25992: LD_VAR 0 1
25996: PPUSH
25997: LD_INT 51
25999: PPUSH
26000: CALL_OW 321
26004: PUSH
26005: LD_INT 2
26007: EQUAL
26008: AND
26009: IFFALSE 26026
// bpoints := bpoints * 1.2 ;
26011: LD_ADDR_VAR 0 10
26015: PUSH
26016: LD_VAR 0 10
26020: PUSH
26021: LD_REAL  1.20000000000000E+0000
26024: MUL
26025: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26026: LD_VAR 0 6
26030: PPUSH
26031: CALL_OW 257
26035: PUSH
26036: LD_INT 5
26038: PUSH
26039: LD_INT 7
26041: PUSH
26042: LD_INT 9
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: LIST
26049: IN
26050: PUSH
26051: LD_VAR 0 1
26055: PPUSH
26056: LD_INT 52
26058: PPUSH
26059: CALL_OW 321
26063: PUSH
26064: LD_INT 2
26066: EQUAL
26067: AND
26068: IFFALSE 26085
// bpoints := bpoints * 1.5 ;
26070: LD_ADDR_VAR 0 10
26074: PUSH
26075: LD_VAR 0 10
26079: PUSH
26080: LD_REAL  1.50000000000000E+0000
26083: MUL
26084: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_INT 66
26092: PPUSH
26093: CALL_OW 321
26097: PUSH
26098: LD_INT 2
26100: EQUAL
26101: IFFALSE 26118
// bpoints := bpoints * 1.1 ;
26103: LD_ADDR_VAR 0 10
26107: PUSH
26108: LD_VAR 0 10
26112: PUSH
26113: LD_REAL  1.10000000000000E+0000
26116: MUL
26117: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26118: LD_ADDR_VAR 0 10
26122: PUSH
26123: LD_VAR 0 10
26127: PUSH
26128: LD_VAR 0 6
26132: PPUSH
26133: LD_INT 1
26135: PPUSH
26136: CALL_OW 259
26140: PUSH
26141: LD_REAL  1.15000000000000E+0000
26144: MUL
26145: MUL
26146: ST_TO_ADDR
// end ; unit_vehicle :
26147: GO 26975
26149: LD_INT 2
26151: DOUBLE
26152: EQUAL
26153: IFTRUE 26157
26155: GO 26963
26157: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26158: LD_VAR 0 6
26162: PPUSH
26163: CALL_OW 264
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: LD_INT 42
26173: PUSH
26174: LD_INT 24
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: IN
26182: IFFALSE 26203
// points := [ 25 , 5 , 3 ] ;
26184: LD_ADDR_VAR 0 9
26188: PUSH
26189: LD_INT 25
26191: PUSH
26192: LD_INT 5
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26203: LD_VAR 0 6
26207: PPUSH
26208: CALL_OW 264
26212: PUSH
26213: LD_INT 4
26215: PUSH
26216: LD_INT 43
26218: PUSH
26219: LD_INT 25
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: IN
26227: IFFALSE 26248
// points := [ 40 , 15 , 5 ] ;
26229: LD_ADDR_VAR 0 9
26233: PUSH
26234: LD_INT 40
26236: PUSH
26237: LD_INT 15
26239: PUSH
26240: LD_INT 5
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26248: LD_VAR 0 6
26252: PPUSH
26253: CALL_OW 264
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: LD_INT 23
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: IN
26268: IFFALSE 26289
// points := [ 7 , 25 , 8 ] ;
26270: LD_ADDR_VAR 0 9
26274: PUSH
26275: LD_INT 7
26277: PUSH
26278: LD_INT 25
26280: PUSH
26281: LD_INT 8
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: LIST
26288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26289: LD_VAR 0 6
26293: PPUSH
26294: CALL_OW 264
26298: PUSH
26299: LD_INT 5
26301: PUSH
26302: LD_INT 27
26304: PUSH
26305: LD_INT 44
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: LIST
26312: IN
26313: IFFALSE 26334
// points := [ 14 , 50 , 16 ] ;
26315: LD_ADDR_VAR 0 9
26319: PUSH
26320: LD_INT 14
26322: PUSH
26323: LD_INT 50
26325: PUSH
26326: LD_INT 16
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26334: LD_VAR 0 6
26338: PPUSH
26339: CALL_OW 264
26343: PUSH
26344: LD_INT 6
26346: PUSH
26347: LD_INT 46
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: IN
26354: IFFALSE 26375
// points := [ 32 , 120 , 70 ] ;
26356: LD_ADDR_VAR 0 9
26360: PUSH
26361: LD_INT 32
26363: PUSH
26364: LD_INT 120
26366: PUSH
26367: LD_INT 70
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26375: LD_VAR 0 6
26379: PPUSH
26380: CALL_OW 264
26384: PUSH
26385: LD_INT 7
26387: PUSH
26388: LD_INT 28
26390: PUSH
26391: LD_INT 45
26393: PUSH
26394: LD_INT 92
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: IN
26403: IFFALSE 26424
// points := [ 35 , 20 , 45 ] ;
26405: LD_ADDR_VAR 0 9
26409: PUSH
26410: LD_INT 35
26412: PUSH
26413: LD_INT 20
26415: PUSH
26416: LD_INT 45
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26424: LD_VAR 0 6
26428: PPUSH
26429: CALL_OW 264
26433: PUSH
26434: LD_INT 47
26436: PUSH
26437: EMPTY
26438: LIST
26439: IN
26440: IFFALSE 26461
// points := [ 67 , 45 , 75 ] ;
26442: LD_ADDR_VAR 0 9
26446: PUSH
26447: LD_INT 67
26449: PUSH
26450: LD_INT 45
26452: PUSH
26453: LD_INT 75
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26461: LD_VAR 0 6
26465: PPUSH
26466: CALL_OW 264
26470: PUSH
26471: LD_INT 26
26473: PUSH
26474: EMPTY
26475: LIST
26476: IN
26477: IFFALSE 26498
// points := [ 120 , 30 , 80 ] ;
26479: LD_ADDR_VAR 0 9
26483: PUSH
26484: LD_INT 120
26486: PUSH
26487: LD_INT 30
26489: PUSH
26490: LD_INT 80
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26498: LD_VAR 0 6
26502: PPUSH
26503: CALL_OW 264
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: EMPTY
26512: LIST
26513: IN
26514: IFFALSE 26535
// points := [ 40 , 1 , 1 ] ;
26516: LD_ADDR_VAR 0 9
26520: PUSH
26521: LD_INT 40
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26535: LD_VAR 0 6
26539: PPUSH
26540: CALL_OW 264
26544: PUSH
26545: LD_INT 29
26547: PUSH
26548: EMPTY
26549: LIST
26550: IN
26551: IFFALSE 26572
// points := [ 70 , 200 , 400 ] ;
26553: LD_ADDR_VAR 0 9
26557: PUSH
26558: LD_INT 70
26560: PUSH
26561: LD_INT 200
26563: PUSH
26564: LD_INT 400
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26572: LD_VAR 0 6
26576: PPUSH
26577: CALL_OW 264
26581: PUSH
26582: LD_INT 14
26584: PUSH
26585: LD_INT 53
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: IN
26592: IFFALSE 26613
// points := [ 40 , 10 , 20 ] ;
26594: LD_ADDR_VAR 0 9
26598: PUSH
26599: LD_INT 40
26601: PUSH
26602: LD_INT 10
26604: PUSH
26605: LD_INT 20
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26613: LD_VAR 0 6
26617: PPUSH
26618: CALL_OW 264
26622: PUSH
26623: LD_INT 9
26625: PUSH
26626: EMPTY
26627: LIST
26628: IN
26629: IFFALSE 26650
// points := [ 5 , 70 , 20 ] ;
26631: LD_ADDR_VAR 0 9
26635: PUSH
26636: LD_INT 5
26638: PUSH
26639: LD_INT 70
26641: PUSH
26642: LD_INT 20
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26650: LD_VAR 0 6
26654: PPUSH
26655: CALL_OW 264
26659: PUSH
26660: LD_INT 10
26662: PUSH
26663: EMPTY
26664: LIST
26665: IN
26666: IFFALSE 26687
// points := [ 35 , 110 , 70 ] ;
26668: LD_ADDR_VAR 0 9
26672: PUSH
26673: LD_INT 35
26675: PUSH
26676: LD_INT 110
26678: PUSH
26679: LD_INT 70
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26687: LD_VAR 0 6
26691: PPUSH
26692: CALL_OW 265
26696: PUSH
26697: LD_INT 25
26699: EQUAL
26700: IFFALSE 26721
// points := [ 80 , 65 , 100 ] ;
26702: LD_ADDR_VAR 0 9
26706: PUSH
26707: LD_INT 80
26709: PUSH
26710: LD_INT 65
26712: PUSH
26713: LD_INT 100
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26721: LD_VAR 0 6
26725: PPUSH
26726: CALL_OW 263
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: IFFALSE 26769
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26736: LD_ADDR_VAR 0 10
26740: PUSH
26741: LD_VAR 0 10
26745: PUSH
26746: LD_VAR 0 6
26750: PPUSH
26751: CALL_OW 311
26755: PPUSH
26756: LD_INT 3
26758: PPUSH
26759: CALL_OW 259
26763: PUSH
26764: LD_INT 4
26766: MUL
26767: MUL
26768: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26769: LD_VAR 0 6
26773: PPUSH
26774: CALL_OW 263
26778: PUSH
26779: LD_INT 2
26781: EQUAL
26782: IFFALSE 26833
// begin j := IsControledBy ( i ) ;
26784: LD_ADDR_VAR 0 7
26788: PUSH
26789: LD_VAR 0 6
26793: PPUSH
26794: CALL_OW 312
26798: ST_TO_ADDR
// if j then
26799: LD_VAR 0 7
26803: IFFALSE 26833
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26805: LD_ADDR_VAR 0 10
26809: PUSH
26810: LD_VAR 0 10
26814: PUSH
26815: LD_VAR 0 7
26819: PPUSH
26820: LD_INT 3
26822: PPUSH
26823: CALL_OW 259
26827: PUSH
26828: LD_INT 3
26830: MUL
26831: MUL
26832: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26833: LD_VAR 0 6
26837: PPUSH
26838: CALL_OW 264
26842: PUSH
26843: LD_INT 5
26845: PUSH
26846: LD_INT 6
26848: PUSH
26849: LD_INT 46
26851: PUSH
26852: LD_INT 44
26854: PUSH
26855: LD_INT 47
26857: PUSH
26858: LD_INT 45
26860: PUSH
26861: LD_INT 28
26863: PUSH
26864: LD_INT 7
26866: PUSH
26867: LD_INT 27
26869: PUSH
26870: LD_INT 29
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: IN
26885: PUSH
26886: LD_VAR 0 1
26890: PPUSH
26891: LD_INT 52
26893: PPUSH
26894: CALL_OW 321
26898: PUSH
26899: LD_INT 2
26901: EQUAL
26902: AND
26903: IFFALSE 26920
// bpoints := bpoints * 1.2 ;
26905: LD_ADDR_VAR 0 10
26909: PUSH
26910: LD_VAR 0 10
26914: PUSH
26915: LD_REAL  1.20000000000000E+0000
26918: MUL
26919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26920: LD_VAR 0 6
26924: PPUSH
26925: CALL_OW 264
26929: PUSH
26930: LD_INT 6
26932: PUSH
26933: LD_INT 46
26935: PUSH
26936: LD_INT 47
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: LIST
26943: IN
26944: IFFALSE 26961
// bpoints := bpoints * 1.2 ;
26946: LD_ADDR_VAR 0 10
26950: PUSH
26951: LD_VAR 0 10
26955: PUSH
26956: LD_REAL  1.20000000000000E+0000
26959: MUL
26960: ST_TO_ADDR
// end ; unit_building :
26961: GO 26975
26963: LD_INT 3
26965: DOUBLE
26966: EQUAL
26967: IFTRUE 26971
26969: GO 26974
26971: POP
// ; end ;
26972: GO 26975
26974: POP
// for j = 1 to 3 do
26975: LD_ADDR_VAR 0 7
26979: PUSH
26980: DOUBLE
26981: LD_INT 1
26983: DEC
26984: ST_TO_ADDR
26985: LD_INT 3
26987: PUSH
26988: FOR_TO
26989: IFFALSE 27042
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26991: LD_ADDR_VAR 0 5
26995: PUSH
26996: LD_VAR 0 5
27000: PPUSH
27001: LD_VAR 0 7
27005: PPUSH
27006: LD_VAR 0 5
27010: PUSH
27011: LD_VAR 0 7
27015: ARRAY
27016: PUSH
27017: LD_VAR 0 9
27021: PUSH
27022: LD_VAR 0 7
27026: ARRAY
27027: PUSH
27028: LD_VAR 0 10
27032: MUL
27033: PLUS
27034: PPUSH
27035: CALL_OW 1
27039: ST_TO_ADDR
27040: GO 26988
27042: POP
27043: POP
// end ;
27044: GO 25523
27046: POP
27047: POP
// result := Replace ( result , 4 , tmp ) ;
27048: LD_ADDR_VAR 0 5
27052: PUSH
27053: LD_VAR 0 5
27057: PPUSH
27058: LD_INT 4
27060: PPUSH
27061: LD_VAR 0 8
27065: PPUSH
27066: CALL_OW 1
27070: ST_TO_ADDR
// end ;
27071: LD_VAR 0 5
27075: RET
// export function DangerAtRange ( unit , range ) ; begin
27076: LD_INT 0
27078: PPUSH
// if not unit then
27079: LD_VAR 0 1
27083: NOT
27084: IFFALSE 27088
// exit ;
27086: GO 27133
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27088: LD_ADDR_VAR 0 3
27092: PUSH
27093: LD_VAR 0 1
27097: PPUSH
27098: CALL_OW 255
27102: PPUSH
27103: LD_VAR 0 1
27107: PPUSH
27108: CALL_OW 250
27112: PPUSH
27113: LD_VAR 0 1
27117: PPUSH
27118: CALL_OW 251
27122: PPUSH
27123: LD_VAR 0 2
27127: PPUSH
27128: CALL 25375 0 4
27132: ST_TO_ADDR
// end ;
27133: LD_VAR 0 3
27137: RET
// export function DangerInArea ( side , area ) ; begin
27138: LD_INT 0
27140: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27141: LD_ADDR_VAR 0 3
27145: PUSH
27146: LD_VAR 0 2
27150: PPUSH
27151: LD_INT 81
27153: PUSH
27154: LD_VAR 0 1
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PPUSH
27163: CALL_OW 70
27167: ST_TO_ADDR
// end ;
27168: LD_VAR 0 3
27172: RET
// export function IsExtension ( b ) ; begin
27173: LD_INT 0
27175: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_VAR 0 1
27185: PUSH
27186: LD_INT 23
27188: PUSH
27189: LD_INT 20
27191: PUSH
27192: LD_INT 22
27194: PUSH
27195: LD_INT 17
27197: PUSH
27198: LD_INT 24
27200: PUSH
27201: LD_INT 21
27203: PUSH
27204: LD_INT 19
27206: PUSH
27207: LD_INT 16
27209: PUSH
27210: LD_INT 25
27212: PUSH
27213: LD_INT 18
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: IN
27228: ST_TO_ADDR
// end ;
27229: LD_VAR 0 2
27233: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
// result := [ ] ;
27239: LD_ADDR_VAR 0 4
27243: PUSH
27244: EMPTY
27245: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27246: LD_ADDR_VAR 0 5
27250: PUSH
27251: LD_VAR 0 2
27255: PPUSH
27256: LD_INT 21
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL_OW 70
27270: ST_TO_ADDR
// if not tmp then
27271: LD_VAR 0 5
27275: NOT
27276: IFFALSE 27280
// exit ;
27278: GO 27344
// if checkLink then
27280: LD_VAR 0 3
27284: IFFALSE 27334
// begin for i in tmp do
27286: LD_ADDR_VAR 0 6
27290: PUSH
27291: LD_VAR 0 5
27295: PUSH
27296: FOR_IN
27297: IFFALSE 27332
// if GetBase ( i ) <> base then
27299: LD_VAR 0 6
27303: PPUSH
27304: CALL_OW 274
27308: PUSH
27309: LD_VAR 0 1
27313: NONEQUAL
27314: IFFALSE 27330
// ComLinkToBase ( base , i ) ;
27316: LD_VAR 0 1
27320: PPUSH
27321: LD_VAR 0 6
27325: PPUSH
27326: CALL_OW 169
27330: GO 27296
27332: POP
27333: POP
// end ; result := tmp ;
27334: LD_ADDR_VAR 0 4
27338: PUSH
27339: LD_VAR 0 5
27343: ST_TO_ADDR
// end ;
27344: LD_VAR 0 4
27348: RET
// export function ComComplete ( units , b ) ; var i ; begin
27349: LD_INT 0
27351: PPUSH
27352: PPUSH
// if not units then
27353: LD_VAR 0 1
27357: NOT
27358: IFFALSE 27362
// exit ;
27360: GO 27452
// for i in units do
27362: LD_ADDR_VAR 0 4
27366: PUSH
27367: LD_VAR 0 1
27371: PUSH
27372: FOR_IN
27373: IFFALSE 27450
// if BuildingStatus ( b ) = bs_build then
27375: LD_VAR 0 2
27379: PPUSH
27380: CALL_OW 461
27384: PUSH
27385: LD_INT 1
27387: EQUAL
27388: IFFALSE 27448
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27390: LD_VAR 0 4
27394: PPUSH
27395: LD_STRING h
27397: PUSH
27398: LD_VAR 0 2
27402: PPUSH
27403: CALL_OW 250
27407: PUSH
27408: LD_VAR 0 2
27412: PPUSH
27413: CALL_OW 251
27417: PUSH
27418: LD_VAR 0 2
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: PPUSH
27444: CALL_OW 446
27448: GO 27372
27450: POP
27451: POP
// end ;
27452: LD_VAR 0 3
27456: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27457: LD_INT 0
27459: PPUSH
27460: PPUSH
27461: PPUSH
27462: PPUSH
27463: PPUSH
27464: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27465: LD_VAR 0 1
27469: NOT
27470: PUSH
27471: LD_VAR 0 1
27475: PPUSH
27476: CALL_OW 263
27480: PUSH
27481: LD_INT 2
27483: NONEQUAL
27484: OR
27485: IFFALSE 27489
// exit ;
27487: GO 27805
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27489: LD_ADDR_VAR 0 6
27493: PUSH
27494: LD_INT 22
27496: PUSH
27497: LD_VAR 0 1
27501: PPUSH
27502: CALL_OW 255
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: LD_INT 30
27516: PUSH
27517: LD_INT 36
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 34
27526: PUSH
27527: LD_INT 31
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: LIST
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PPUSH
27543: CALL_OW 69
27547: ST_TO_ADDR
// if not tmp then
27548: LD_VAR 0 6
27552: NOT
27553: IFFALSE 27557
// exit ;
27555: GO 27805
// result := [ ] ;
27557: LD_ADDR_VAR 0 2
27561: PUSH
27562: EMPTY
27563: ST_TO_ADDR
// for i in tmp do
27564: LD_ADDR_VAR 0 3
27568: PUSH
27569: LD_VAR 0 6
27573: PUSH
27574: FOR_IN
27575: IFFALSE 27646
// begin t := UnitsInside ( i ) ;
27577: LD_ADDR_VAR 0 4
27581: PUSH
27582: LD_VAR 0 3
27586: PPUSH
27587: CALL_OW 313
27591: ST_TO_ADDR
// if t then
27592: LD_VAR 0 4
27596: IFFALSE 27644
// for j in t do
27598: LD_ADDR_VAR 0 7
27602: PUSH
27603: LD_VAR 0 4
27607: PUSH
27608: FOR_IN
27609: IFFALSE 27642
// result := Replace ( result , result + 1 , j ) ;
27611: LD_ADDR_VAR 0 2
27615: PUSH
27616: LD_VAR 0 2
27620: PPUSH
27621: LD_VAR 0 2
27625: PUSH
27626: LD_INT 1
27628: PLUS
27629: PPUSH
27630: LD_VAR 0 7
27634: PPUSH
27635: CALL_OW 1
27639: ST_TO_ADDR
27640: GO 27608
27642: POP
27643: POP
// end ;
27644: GO 27574
27646: POP
27647: POP
// if not result then
27648: LD_VAR 0 2
27652: NOT
27653: IFFALSE 27657
// exit ;
27655: GO 27805
// mech := result [ 1 ] ;
27657: LD_ADDR_VAR 0 5
27661: PUSH
27662: LD_VAR 0 2
27666: PUSH
27667: LD_INT 1
27669: ARRAY
27670: ST_TO_ADDR
// if result > 1 then
27671: LD_VAR 0 2
27675: PUSH
27676: LD_INT 1
27678: GREATER
27679: IFFALSE 27791
// begin for i = 2 to result do
27681: LD_ADDR_VAR 0 3
27685: PUSH
27686: DOUBLE
27687: LD_INT 2
27689: DEC
27690: ST_TO_ADDR
27691: LD_VAR 0 2
27695: PUSH
27696: FOR_TO
27697: IFFALSE 27789
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27699: LD_ADDR_VAR 0 4
27703: PUSH
27704: LD_VAR 0 2
27708: PUSH
27709: LD_VAR 0 3
27713: ARRAY
27714: PPUSH
27715: LD_INT 3
27717: PPUSH
27718: CALL_OW 259
27722: PUSH
27723: LD_VAR 0 2
27727: PUSH
27728: LD_VAR 0 3
27732: ARRAY
27733: PPUSH
27734: CALL_OW 432
27738: MINUS
27739: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27740: LD_VAR 0 4
27744: PUSH
27745: LD_VAR 0 5
27749: PPUSH
27750: LD_INT 3
27752: PPUSH
27753: CALL_OW 259
27757: PUSH
27758: LD_VAR 0 5
27762: PPUSH
27763: CALL_OW 432
27767: MINUS
27768: GREATEREQUAL
27769: IFFALSE 27787
// mech := result [ i ] ;
27771: LD_ADDR_VAR 0 5
27775: PUSH
27776: LD_VAR 0 2
27780: PUSH
27781: LD_VAR 0 3
27785: ARRAY
27786: ST_TO_ADDR
// end ;
27787: GO 27696
27789: POP
27790: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27791: LD_VAR 0 1
27795: PPUSH
27796: LD_VAR 0 5
27800: PPUSH
27801: CALL_OW 135
// end ;
27805: LD_VAR 0 2
27809: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27810: LD_INT 0
27812: PPUSH
27813: PPUSH
27814: PPUSH
27815: PPUSH
27816: PPUSH
27817: PPUSH
27818: PPUSH
27819: PPUSH
27820: PPUSH
27821: PPUSH
27822: PPUSH
27823: PPUSH
27824: PPUSH
// result := [ ] ;
27825: LD_ADDR_VAR 0 7
27829: PUSH
27830: EMPTY
27831: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27832: LD_VAR 0 1
27836: PPUSH
27837: CALL_OW 266
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: IN
27852: NOT
27853: IFFALSE 27857
// exit ;
27855: GO 29491
// if name then
27857: LD_VAR 0 3
27861: IFFALSE 27877
// SetBName ( base_dep , name ) ;
27863: LD_VAR 0 1
27867: PPUSH
27868: LD_VAR 0 3
27872: PPUSH
27873: CALL_OW 500
// base := GetBase ( base_dep ) ;
27877: LD_ADDR_VAR 0 15
27881: PUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL_OW 274
27891: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27892: LD_ADDR_VAR 0 16
27896: PUSH
27897: LD_VAR 0 1
27901: PPUSH
27902: CALL_OW 255
27906: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27907: LD_ADDR_VAR 0 17
27911: PUSH
27912: LD_VAR 0 1
27916: PPUSH
27917: CALL_OW 248
27921: ST_TO_ADDR
// if sources then
27922: LD_VAR 0 5
27926: IFFALSE 27973
// for i = 1 to 3 do
27928: LD_ADDR_VAR 0 8
27932: PUSH
27933: DOUBLE
27934: LD_INT 1
27936: DEC
27937: ST_TO_ADDR
27938: LD_INT 3
27940: PUSH
27941: FOR_TO
27942: IFFALSE 27971
// AddResourceType ( base , i , sources [ i ] ) ;
27944: LD_VAR 0 15
27948: PPUSH
27949: LD_VAR 0 8
27953: PPUSH
27954: LD_VAR 0 5
27958: PUSH
27959: LD_VAR 0 8
27963: ARRAY
27964: PPUSH
27965: CALL_OW 276
27969: GO 27941
27971: POP
27972: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27973: LD_ADDR_VAR 0 18
27977: PUSH
27978: LD_VAR 0 15
27982: PPUSH
27983: LD_VAR 0 2
27987: PPUSH
27988: LD_INT 1
27990: PPUSH
27991: CALL 27234 0 3
27995: ST_TO_ADDR
// InitHc ;
27996: CALL_OW 19
// InitUc ;
28000: CALL_OW 18
// uc_side := side ;
28004: LD_ADDR_OWVAR 20
28008: PUSH
28009: LD_VAR 0 16
28013: ST_TO_ADDR
// uc_nation := nation ;
28014: LD_ADDR_OWVAR 21
28018: PUSH
28019: LD_VAR 0 17
28023: ST_TO_ADDR
// if buildings then
28024: LD_VAR 0 18
28028: IFFALSE 29350
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28030: LD_ADDR_VAR 0 19
28034: PUSH
28035: LD_VAR 0 18
28039: PPUSH
28040: LD_INT 2
28042: PUSH
28043: LD_INT 30
28045: PUSH
28046: LD_INT 29
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 30
28055: PUSH
28056: LD_INT 30
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 72
28072: ST_TO_ADDR
// if tmp then
28073: LD_VAR 0 19
28077: IFFALSE 28125
// for i in tmp do
28079: LD_ADDR_VAR 0 8
28083: PUSH
28084: LD_VAR 0 19
28088: PUSH
28089: FOR_IN
28090: IFFALSE 28123
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28092: LD_VAR 0 8
28096: PPUSH
28097: CALL_OW 250
28101: PPUSH
28102: LD_VAR 0 8
28106: PPUSH
28107: CALL_OW 251
28111: PPUSH
28112: LD_VAR 0 16
28116: PPUSH
28117: CALL_OW 441
28121: GO 28089
28123: POP
28124: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28125: LD_VAR 0 18
28129: PPUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 30
28135: PUSH
28136: LD_INT 32
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 30
28145: PUSH
28146: LD_INT 33
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: PPUSH
28158: CALL_OW 72
28162: IFFALSE 28250
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28164: LD_ADDR_VAR 0 8
28168: PUSH
28169: LD_VAR 0 18
28173: PPUSH
28174: LD_INT 2
28176: PUSH
28177: LD_INT 30
28179: PUSH
28180: LD_INT 32
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 30
28189: PUSH
28190: LD_INT 33
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: PPUSH
28202: CALL_OW 72
28206: PUSH
28207: FOR_IN
28208: IFFALSE 28248
// begin if not GetBWeapon ( i ) then
28210: LD_VAR 0 8
28214: PPUSH
28215: CALL_OW 269
28219: NOT
28220: IFFALSE 28246
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28222: LD_VAR 0 8
28226: PPUSH
28227: LD_VAR 0 8
28231: PPUSH
28232: LD_VAR 0 2
28236: PPUSH
28237: CALL 29496 0 2
28241: PPUSH
28242: CALL_OW 431
// end ;
28246: GO 28207
28248: POP
28249: POP
// end ; for i = 1 to personel do
28250: LD_ADDR_VAR 0 8
28254: PUSH
28255: DOUBLE
28256: LD_INT 1
28258: DEC
28259: ST_TO_ADDR
28260: LD_VAR 0 6
28264: PUSH
28265: FOR_TO
28266: IFFALSE 29330
// begin if i > 4 then
28268: LD_VAR 0 8
28272: PUSH
28273: LD_INT 4
28275: GREATER
28276: IFFALSE 28280
// break ;
28278: GO 29330
// case i of 1 :
28280: LD_VAR 0 8
28284: PUSH
28285: LD_INT 1
28287: DOUBLE
28288: EQUAL
28289: IFTRUE 28293
28291: GO 28373
28293: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28294: LD_ADDR_VAR 0 12
28298: PUSH
28299: LD_VAR 0 18
28303: PPUSH
28304: LD_INT 22
28306: PUSH
28307: LD_VAR 0 16
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 58
28318: PUSH
28319: EMPTY
28320: LIST
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: LD_INT 30
28327: PUSH
28328: LD_INT 32
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 30
28337: PUSH
28338: LD_INT 4
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 30
28347: PUSH
28348: LD_INT 5
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: PPUSH
28366: CALL_OW 72
28370: ST_TO_ADDR
28371: GO 28595
28373: LD_INT 2
28375: DOUBLE
28376: EQUAL
28377: IFTRUE 28381
28379: GO 28443
28381: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28382: LD_ADDR_VAR 0 12
28386: PUSH
28387: LD_VAR 0 18
28391: PPUSH
28392: LD_INT 22
28394: PUSH
28395: LD_VAR 0 16
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: LD_INT 30
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 30
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 72
28440: ST_TO_ADDR
28441: GO 28595
28443: LD_INT 3
28445: DOUBLE
28446: EQUAL
28447: IFTRUE 28451
28449: GO 28513
28451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28452: LD_ADDR_VAR 0 12
28456: PUSH
28457: LD_VAR 0 18
28461: PPUSH
28462: LD_INT 22
28464: PUSH
28465: LD_VAR 0 16
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: LD_INT 30
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 30
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: LIST
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PPUSH
28506: CALL_OW 72
28510: ST_TO_ADDR
28511: GO 28595
28513: LD_INT 4
28515: DOUBLE
28516: EQUAL
28517: IFTRUE 28521
28519: GO 28594
28521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28522: LD_ADDR_VAR 0 12
28526: PUSH
28527: LD_VAR 0 18
28531: PPUSH
28532: LD_INT 22
28534: PUSH
28535: LD_VAR 0 16
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: LD_INT 30
28549: PUSH
28550: LD_INT 6
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 30
28559: PUSH
28560: LD_INT 7
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 30
28569: PUSH
28570: LD_INT 8
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PPUSH
28587: CALL_OW 72
28591: ST_TO_ADDR
28592: GO 28595
28594: POP
// if i = 1 then
28595: LD_VAR 0 8
28599: PUSH
28600: LD_INT 1
28602: EQUAL
28603: IFFALSE 28714
// begin tmp := [ ] ;
28605: LD_ADDR_VAR 0 19
28609: PUSH
28610: EMPTY
28611: ST_TO_ADDR
// for j in f do
28612: LD_ADDR_VAR 0 9
28616: PUSH
28617: LD_VAR 0 12
28621: PUSH
28622: FOR_IN
28623: IFFALSE 28696
// if GetBType ( j ) = b_bunker then
28625: LD_VAR 0 9
28629: PPUSH
28630: CALL_OW 266
28634: PUSH
28635: LD_INT 32
28637: EQUAL
28638: IFFALSE 28665
// tmp := Insert ( tmp , 1 , j ) else
28640: LD_ADDR_VAR 0 19
28644: PUSH
28645: LD_VAR 0 19
28649: PPUSH
28650: LD_INT 1
28652: PPUSH
28653: LD_VAR 0 9
28657: PPUSH
28658: CALL_OW 2
28662: ST_TO_ADDR
28663: GO 28694
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28665: LD_ADDR_VAR 0 19
28669: PUSH
28670: LD_VAR 0 19
28674: PPUSH
28675: LD_VAR 0 19
28679: PUSH
28680: LD_INT 1
28682: PLUS
28683: PPUSH
28684: LD_VAR 0 9
28688: PPUSH
28689: CALL_OW 2
28693: ST_TO_ADDR
28694: GO 28622
28696: POP
28697: POP
// if tmp then
28698: LD_VAR 0 19
28702: IFFALSE 28714
// f := tmp ;
28704: LD_ADDR_VAR 0 12
28708: PUSH
28709: LD_VAR 0 19
28713: ST_TO_ADDR
// end ; x := personel [ i ] ;
28714: LD_ADDR_VAR 0 13
28718: PUSH
28719: LD_VAR 0 6
28723: PUSH
28724: LD_VAR 0 8
28728: ARRAY
28729: ST_TO_ADDR
// if x = - 1 then
28730: LD_VAR 0 13
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: EQUAL
28739: IFFALSE 28948
// begin for j in f do
28741: LD_ADDR_VAR 0 9
28745: PUSH
28746: LD_VAR 0 12
28750: PUSH
28751: FOR_IN
28752: IFFALSE 28944
// repeat InitHc ;
28754: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28758: LD_VAR 0 9
28762: PPUSH
28763: CALL_OW 266
28767: PUSH
28768: LD_INT 5
28770: EQUAL
28771: IFFALSE 28841
// begin if UnitsInside ( j ) < 3 then
28773: LD_VAR 0 9
28777: PPUSH
28778: CALL_OW 313
28782: PUSH
28783: LD_INT 3
28785: LESS
28786: IFFALSE 28822
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28788: LD_INT 0
28790: PPUSH
28791: LD_INT 5
28793: PUSH
28794: LD_INT 8
28796: PUSH
28797: LD_INT 9
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: PUSH
28805: LD_VAR 0 17
28809: ARRAY
28810: PPUSH
28811: LD_VAR 0 4
28815: PPUSH
28816: CALL_OW 380
28820: GO 28839
// PrepareHuman ( false , i , skill ) ;
28822: LD_INT 0
28824: PPUSH
28825: LD_VAR 0 8
28829: PPUSH
28830: LD_VAR 0 4
28834: PPUSH
28835: CALL_OW 380
// end else
28839: GO 28858
// PrepareHuman ( false , i , skill ) ;
28841: LD_INT 0
28843: PPUSH
28844: LD_VAR 0 8
28848: PPUSH
28849: LD_VAR 0 4
28853: PPUSH
28854: CALL_OW 380
// un := CreateHuman ;
28858: LD_ADDR_VAR 0 14
28862: PUSH
28863: CALL_OW 44
28867: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28868: LD_ADDR_VAR 0 7
28872: PUSH
28873: LD_VAR 0 7
28877: PPUSH
28878: LD_INT 1
28880: PPUSH
28881: LD_VAR 0 14
28885: PPUSH
28886: CALL_OW 2
28890: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28891: LD_VAR 0 14
28895: PPUSH
28896: LD_VAR 0 9
28900: PPUSH
28901: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28905: LD_VAR 0 9
28909: PPUSH
28910: CALL_OW 313
28914: PUSH
28915: LD_INT 6
28917: EQUAL
28918: PUSH
28919: LD_VAR 0 9
28923: PPUSH
28924: CALL_OW 266
28928: PUSH
28929: LD_INT 32
28931: PUSH
28932: LD_INT 31
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: IN
28939: OR
28940: IFFALSE 28754
28942: GO 28751
28944: POP
28945: POP
// end else
28946: GO 29328
// for j = 1 to x do
28948: LD_ADDR_VAR 0 9
28952: PUSH
28953: DOUBLE
28954: LD_INT 1
28956: DEC
28957: ST_TO_ADDR
28958: LD_VAR 0 13
28962: PUSH
28963: FOR_TO
28964: IFFALSE 29326
// begin InitHc ;
28966: CALL_OW 19
// if not f then
28970: LD_VAR 0 12
28974: NOT
28975: IFFALSE 29064
// begin PrepareHuman ( false , i , skill ) ;
28977: LD_INT 0
28979: PPUSH
28980: LD_VAR 0 8
28984: PPUSH
28985: LD_VAR 0 4
28989: PPUSH
28990: CALL_OW 380
// un := CreateHuman ;
28994: LD_ADDR_VAR 0 14
28998: PUSH
28999: CALL_OW 44
29003: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29004: LD_ADDR_VAR 0 7
29008: PUSH
29009: LD_VAR 0 7
29013: PPUSH
29014: LD_INT 1
29016: PPUSH
29017: LD_VAR 0 14
29021: PPUSH
29022: CALL_OW 2
29026: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29027: LD_VAR 0 14
29031: PPUSH
29032: LD_VAR 0 1
29036: PPUSH
29037: CALL_OW 250
29041: PPUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 251
29051: PPUSH
29052: LD_INT 10
29054: PPUSH
29055: LD_INT 0
29057: PPUSH
29058: CALL_OW 50
// continue ;
29062: GO 28963
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29064: LD_VAR 0 12
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: PPUSH
29073: CALL_OW 313
29077: PUSH
29078: LD_VAR 0 12
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: CALL_OW 266
29091: PUSH
29092: LD_INT 32
29094: PUSH
29095: LD_INT 31
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: IN
29102: AND
29103: PUSH
29104: LD_VAR 0 12
29108: PUSH
29109: LD_INT 1
29111: ARRAY
29112: PPUSH
29113: CALL_OW 313
29117: PUSH
29118: LD_INT 6
29120: EQUAL
29121: OR
29122: IFFALSE 29142
// f := Delete ( f , 1 ) ;
29124: LD_ADDR_VAR 0 12
29128: PUSH
29129: LD_VAR 0 12
29133: PPUSH
29134: LD_INT 1
29136: PPUSH
29137: CALL_OW 3
29141: ST_TO_ADDR
// if not f then
29142: LD_VAR 0 12
29146: NOT
29147: IFFALSE 29165
// begin x := x + 2 ;
29149: LD_ADDR_VAR 0 13
29153: PUSH
29154: LD_VAR 0 13
29158: PUSH
29159: LD_INT 2
29161: PLUS
29162: ST_TO_ADDR
// continue ;
29163: GO 28963
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29165: LD_VAR 0 12
29169: PUSH
29170: LD_INT 1
29172: ARRAY
29173: PPUSH
29174: CALL_OW 266
29178: PUSH
29179: LD_INT 5
29181: EQUAL
29182: IFFALSE 29256
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29184: LD_VAR 0 12
29188: PUSH
29189: LD_INT 1
29191: ARRAY
29192: PPUSH
29193: CALL_OW 313
29197: PUSH
29198: LD_INT 3
29200: LESS
29201: IFFALSE 29237
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29203: LD_INT 0
29205: PPUSH
29206: LD_INT 5
29208: PUSH
29209: LD_INT 8
29211: PUSH
29212: LD_INT 9
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: PUSH
29220: LD_VAR 0 17
29224: ARRAY
29225: PPUSH
29226: LD_VAR 0 4
29230: PPUSH
29231: CALL_OW 380
29235: GO 29254
// PrepareHuman ( false , i , skill ) ;
29237: LD_INT 0
29239: PPUSH
29240: LD_VAR 0 8
29244: PPUSH
29245: LD_VAR 0 4
29249: PPUSH
29250: CALL_OW 380
// end else
29254: GO 29273
// PrepareHuman ( false , i , skill ) ;
29256: LD_INT 0
29258: PPUSH
29259: LD_VAR 0 8
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: CALL_OW 380
// un := CreateHuman ;
29273: LD_ADDR_VAR 0 14
29277: PUSH
29278: CALL_OW 44
29282: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29283: LD_ADDR_VAR 0 7
29287: PUSH
29288: LD_VAR 0 7
29292: PPUSH
29293: LD_INT 1
29295: PPUSH
29296: LD_VAR 0 14
29300: PPUSH
29301: CALL_OW 2
29305: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29306: LD_VAR 0 14
29310: PPUSH
29311: LD_VAR 0 12
29315: PUSH
29316: LD_INT 1
29318: ARRAY
29319: PPUSH
29320: CALL_OW 52
// end ;
29324: GO 28963
29326: POP
29327: POP
// end ;
29328: GO 28265
29330: POP
29331: POP
// result := result ^ buildings ;
29332: LD_ADDR_VAR 0 7
29336: PUSH
29337: LD_VAR 0 7
29341: PUSH
29342: LD_VAR 0 18
29346: ADD
29347: ST_TO_ADDR
// end else
29348: GO 29491
// begin for i = 1 to personel do
29350: LD_ADDR_VAR 0 8
29354: PUSH
29355: DOUBLE
29356: LD_INT 1
29358: DEC
29359: ST_TO_ADDR
29360: LD_VAR 0 6
29364: PUSH
29365: FOR_TO
29366: IFFALSE 29489
// begin if i > 4 then
29368: LD_VAR 0 8
29372: PUSH
29373: LD_INT 4
29375: GREATER
29376: IFFALSE 29380
// break ;
29378: GO 29489
// x := personel [ i ] ;
29380: LD_ADDR_VAR 0 13
29384: PUSH
29385: LD_VAR 0 6
29389: PUSH
29390: LD_VAR 0 8
29394: ARRAY
29395: ST_TO_ADDR
// if x = - 1 then
29396: LD_VAR 0 13
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: EQUAL
29405: IFFALSE 29409
// continue ;
29407: GO 29365
// PrepareHuman ( false , i , skill ) ;
29409: LD_INT 0
29411: PPUSH
29412: LD_VAR 0 8
29416: PPUSH
29417: LD_VAR 0 4
29421: PPUSH
29422: CALL_OW 380
// un := CreateHuman ;
29426: LD_ADDR_VAR 0 14
29430: PUSH
29431: CALL_OW 44
29435: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29436: LD_VAR 0 14
29440: PPUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 250
29450: PPUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 251
29460: PPUSH
29461: LD_INT 10
29463: PPUSH
29464: LD_INT 0
29466: PPUSH
29467: CALL_OW 50
// result := result ^ un ;
29471: LD_ADDR_VAR 0 7
29475: PUSH
29476: LD_VAR 0 7
29480: PUSH
29481: LD_VAR 0 14
29485: ADD
29486: ST_TO_ADDR
// end ;
29487: GO 29365
29489: POP
29490: POP
// end ; end ;
29491: LD_VAR 0 7
29495: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29496: LD_INT 0
29498: PPUSH
29499: PPUSH
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
29513: PPUSH
// result := false ;
29514: LD_ADDR_VAR 0 3
29518: PUSH
29519: LD_INT 0
29521: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29522: LD_VAR 0 1
29526: NOT
29527: PUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 266
29537: PUSH
29538: LD_INT 32
29540: PUSH
29541: LD_INT 33
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: IN
29548: NOT
29549: OR
29550: IFFALSE 29554
// exit ;
29552: GO 30663
// nat := GetNation ( tower ) ;
29554: LD_ADDR_VAR 0 12
29558: PUSH
29559: LD_VAR 0 1
29563: PPUSH
29564: CALL_OW 248
29568: ST_TO_ADDR
// side := GetSide ( tower ) ;
29569: LD_ADDR_VAR 0 16
29573: PUSH
29574: LD_VAR 0 1
29578: PPUSH
29579: CALL_OW 255
29583: ST_TO_ADDR
// x := GetX ( tower ) ;
29584: LD_ADDR_VAR 0 10
29588: PUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 250
29598: ST_TO_ADDR
// y := GetY ( tower ) ;
29599: LD_ADDR_VAR 0 11
29603: PUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 251
29613: ST_TO_ADDR
// if not x or not y then
29614: LD_VAR 0 10
29618: NOT
29619: PUSH
29620: LD_VAR 0 11
29624: NOT
29625: OR
29626: IFFALSE 29630
// exit ;
29628: GO 30663
// weapon := 0 ;
29630: LD_ADDR_VAR 0 18
29634: PUSH
29635: LD_INT 0
29637: ST_TO_ADDR
// fac_list := [ ] ;
29638: LD_ADDR_VAR 0 17
29642: PUSH
29643: EMPTY
29644: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29645: LD_ADDR_VAR 0 6
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: CALL_OW 274
29659: PPUSH
29660: LD_VAR 0 2
29664: PPUSH
29665: LD_INT 0
29667: PPUSH
29668: CALL 27234 0 3
29672: PPUSH
29673: LD_INT 30
29675: PUSH
29676: LD_INT 3
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 72
29687: ST_TO_ADDR
// if not factories then
29688: LD_VAR 0 6
29692: NOT
29693: IFFALSE 29697
// exit ;
29695: GO 30663
// for i in factories do
29697: LD_ADDR_VAR 0 8
29701: PUSH
29702: LD_VAR 0 6
29706: PUSH
29707: FOR_IN
29708: IFFALSE 29733
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29710: LD_ADDR_VAR 0 17
29714: PUSH
29715: LD_VAR 0 17
29719: PUSH
29720: LD_VAR 0 8
29724: PPUSH
29725: CALL_OW 478
29729: UNION
29730: ST_TO_ADDR
29731: GO 29707
29733: POP
29734: POP
// if not fac_list then
29735: LD_VAR 0 17
29739: NOT
29740: IFFALSE 29744
// exit ;
29742: GO 30663
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29744: LD_ADDR_VAR 0 5
29748: PUSH
29749: LD_INT 4
29751: PUSH
29752: LD_INT 5
29754: PUSH
29755: LD_INT 9
29757: PUSH
29758: LD_INT 10
29760: PUSH
29761: LD_INT 6
29763: PUSH
29764: LD_INT 7
29766: PUSH
29767: LD_INT 11
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 27
29781: PUSH
29782: LD_INT 28
29784: PUSH
29785: LD_INT 26
29787: PUSH
29788: LD_INT 30
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 43
29799: PUSH
29800: LD_INT 44
29802: PUSH
29803: LD_INT 46
29805: PUSH
29806: LD_INT 45
29808: PUSH
29809: LD_INT 47
29811: PUSH
29812: LD_INT 49
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: PUSH
29828: LD_VAR 0 12
29832: ARRAY
29833: ST_TO_ADDR
// list := list isect fac_list ;
29834: LD_ADDR_VAR 0 5
29838: PUSH
29839: LD_VAR 0 5
29843: PUSH
29844: LD_VAR 0 17
29848: ISECT
29849: ST_TO_ADDR
// if not list then
29850: LD_VAR 0 5
29854: NOT
29855: IFFALSE 29859
// exit ;
29857: GO 30663
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29859: LD_VAR 0 12
29863: PUSH
29864: LD_INT 3
29866: EQUAL
29867: PUSH
29868: LD_INT 49
29870: PUSH
29871: LD_VAR 0 5
29875: IN
29876: AND
29877: PUSH
29878: LD_INT 31
29880: PPUSH
29881: LD_VAR 0 16
29885: PPUSH
29886: CALL_OW 321
29890: PUSH
29891: LD_INT 2
29893: EQUAL
29894: AND
29895: IFFALSE 29955
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29897: LD_INT 22
29899: PUSH
29900: LD_VAR 0 16
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 35
29911: PUSH
29912: LD_INT 49
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 91
29921: PUSH
29922: LD_VAR 0 1
29926: PUSH
29927: LD_INT 10
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: NOT
29945: IFFALSE 29955
// weapon := ru_time_lapser ;
29947: LD_ADDR_VAR 0 18
29951: PUSH
29952: LD_INT 49
29954: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29955: LD_VAR 0 12
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: IN
29970: PUSH
29971: LD_INT 11
29973: PUSH
29974: LD_VAR 0 5
29978: IN
29979: PUSH
29980: LD_INT 30
29982: PUSH
29983: LD_VAR 0 5
29987: IN
29988: OR
29989: AND
29990: PUSH
29991: LD_INT 6
29993: PPUSH
29994: LD_VAR 0 16
29998: PPUSH
29999: CALL_OW 321
30003: PUSH
30004: LD_INT 2
30006: EQUAL
30007: AND
30008: IFFALSE 30173
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30010: LD_INT 22
30012: PUSH
30013: LD_VAR 0 16
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: LD_INT 35
30027: PUSH
30028: LD_INT 11
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 35
30037: PUSH
30038: LD_INT 30
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 91
30052: PUSH
30053: LD_VAR 0 1
30057: PUSH
30058: LD_INT 18
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: PPUSH
30071: CALL_OW 69
30075: NOT
30076: PUSH
30077: LD_INT 22
30079: PUSH
30080: LD_VAR 0 16
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 30
30094: PUSH
30095: LD_INT 32
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 30
30104: PUSH
30105: LD_INT 33
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 91
30119: PUSH
30120: LD_VAR 0 1
30124: PUSH
30125: LD_INT 12
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: PPUSH
30141: CALL_OW 69
30145: PUSH
30146: LD_INT 2
30148: GREATER
30149: AND
30150: IFFALSE 30173
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30152: LD_ADDR_VAR 0 18
30156: PUSH
30157: LD_INT 11
30159: PUSH
30160: LD_INT 30
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_VAR 0 12
30171: ARRAY
30172: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30173: LD_VAR 0 18
30177: NOT
30178: PUSH
30179: LD_INT 40
30181: PPUSH
30182: LD_VAR 0 16
30186: PPUSH
30187: CALL_OW 321
30191: PUSH
30192: LD_INT 2
30194: EQUAL
30195: AND
30196: PUSH
30197: LD_INT 7
30199: PUSH
30200: LD_VAR 0 5
30204: IN
30205: PUSH
30206: LD_INT 28
30208: PUSH
30209: LD_VAR 0 5
30213: IN
30214: OR
30215: PUSH
30216: LD_INT 45
30218: PUSH
30219: LD_VAR 0 5
30223: IN
30224: OR
30225: AND
30226: IFFALSE 30480
// begin hex := GetHexInfo ( x , y ) ;
30228: LD_ADDR_VAR 0 4
30232: PUSH
30233: LD_VAR 0 10
30237: PPUSH
30238: LD_VAR 0 11
30242: PPUSH
30243: CALL_OW 546
30247: ST_TO_ADDR
// if hex [ 1 ] then
30248: LD_VAR 0 4
30252: PUSH
30253: LD_INT 1
30255: ARRAY
30256: IFFALSE 30260
// exit ;
30258: GO 30663
// height := hex [ 2 ] ;
30260: LD_ADDR_VAR 0 15
30264: PUSH
30265: LD_VAR 0 4
30269: PUSH
30270: LD_INT 2
30272: ARRAY
30273: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30274: LD_ADDR_VAR 0 14
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 3
30287: PUSH
30288: LD_INT 5
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: ST_TO_ADDR
// for i in tmp do
30297: LD_ADDR_VAR 0 8
30301: PUSH
30302: LD_VAR 0 14
30306: PUSH
30307: FOR_IN
30308: IFFALSE 30478
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30310: LD_ADDR_VAR 0 9
30314: PUSH
30315: LD_VAR 0 10
30319: PPUSH
30320: LD_VAR 0 8
30324: PPUSH
30325: LD_INT 5
30327: PPUSH
30328: CALL_OW 272
30332: PUSH
30333: LD_VAR 0 11
30337: PPUSH
30338: LD_VAR 0 8
30342: PPUSH
30343: LD_INT 5
30345: PPUSH
30346: CALL_OW 273
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30355: LD_VAR 0 9
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: PPUSH
30364: LD_VAR 0 9
30368: PUSH
30369: LD_INT 2
30371: ARRAY
30372: PPUSH
30373: CALL_OW 488
30377: IFFALSE 30476
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30379: LD_ADDR_VAR 0 4
30383: PUSH
30384: LD_VAR 0 9
30388: PUSH
30389: LD_INT 1
30391: ARRAY
30392: PPUSH
30393: LD_VAR 0 9
30397: PUSH
30398: LD_INT 2
30400: ARRAY
30401: PPUSH
30402: CALL_OW 546
30406: ST_TO_ADDR
// if hex [ 1 ] then
30407: LD_VAR 0 4
30411: PUSH
30412: LD_INT 1
30414: ARRAY
30415: IFFALSE 30419
// continue ;
30417: GO 30307
// h := hex [ 2 ] ;
30419: LD_ADDR_VAR 0 13
30423: PUSH
30424: LD_VAR 0 4
30428: PUSH
30429: LD_INT 2
30431: ARRAY
30432: ST_TO_ADDR
// if h + 7 < height then
30433: LD_VAR 0 13
30437: PUSH
30438: LD_INT 7
30440: PLUS
30441: PUSH
30442: LD_VAR 0 15
30446: LESS
30447: IFFALSE 30476
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30449: LD_ADDR_VAR 0 18
30453: PUSH
30454: LD_INT 7
30456: PUSH
30457: LD_INT 28
30459: PUSH
30460: LD_INT 45
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: PUSH
30468: LD_VAR 0 12
30472: ARRAY
30473: ST_TO_ADDR
// break ;
30474: GO 30478
// end ; end ; end ;
30476: GO 30307
30478: POP
30479: POP
// end ; if not weapon then
30480: LD_VAR 0 18
30484: NOT
30485: IFFALSE 30545
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30487: LD_ADDR_VAR 0 5
30491: PUSH
30492: LD_VAR 0 5
30496: PUSH
30497: LD_INT 11
30499: PUSH
30500: LD_INT 30
30502: PUSH
30503: LD_INT 49
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: DIFF
30511: ST_TO_ADDR
// if not list then
30512: LD_VAR 0 5
30516: NOT
30517: IFFALSE 30521
// exit ;
30519: GO 30663
// weapon := list [ rand ( 1 , list ) ] ;
30521: LD_ADDR_VAR 0 18
30525: PUSH
30526: LD_VAR 0 5
30530: PUSH
30531: LD_INT 1
30533: PPUSH
30534: LD_VAR 0 5
30538: PPUSH
30539: CALL_OW 12
30543: ARRAY
30544: ST_TO_ADDR
// end ; if weapon then
30545: LD_VAR 0 18
30549: IFFALSE 30663
// begin tmp := CostOfWeapon ( weapon ) ;
30551: LD_ADDR_VAR 0 14
30555: PUSH
30556: LD_VAR 0 18
30560: PPUSH
30561: CALL_OW 451
30565: ST_TO_ADDR
// j := GetBase ( tower ) ;
30566: LD_ADDR_VAR 0 9
30570: PUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 274
30580: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30581: LD_VAR 0 9
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 275
30593: PUSH
30594: LD_VAR 0 14
30598: PUSH
30599: LD_INT 1
30601: ARRAY
30602: GREATEREQUAL
30603: PUSH
30604: LD_VAR 0 9
30608: PPUSH
30609: LD_INT 2
30611: PPUSH
30612: CALL_OW 275
30616: PUSH
30617: LD_VAR 0 14
30621: PUSH
30622: LD_INT 2
30624: ARRAY
30625: GREATEREQUAL
30626: AND
30627: PUSH
30628: LD_VAR 0 9
30632: PPUSH
30633: LD_INT 3
30635: PPUSH
30636: CALL_OW 275
30640: PUSH
30641: LD_VAR 0 14
30645: PUSH
30646: LD_INT 3
30648: ARRAY
30649: GREATEREQUAL
30650: AND
30651: IFFALSE 30663
// result := weapon ;
30653: LD_ADDR_VAR 0 3
30657: PUSH
30658: LD_VAR 0 18
30662: ST_TO_ADDR
// end ; end ;
30663: LD_VAR 0 3
30667: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30668: LD_INT 0
30670: PPUSH
30671: PPUSH
// result := true ;
30672: LD_ADDR_VAR 0 3
30676: PUSH
30677: LD_INT 1
30679: ST_TO_ADDR
// if array1 = array2 then
30680: LD_VAR 0 1
30684: PUSH
30685: LD_VAR 0 2
30689: EQUAL
30690: IFFALSE 30750
// begin for i = 1 to array1 do
30692: LD_ADDR_VAR 0 4
30696: PUSH
30697: DOUBLE
30698: LD_INT 1
30700: DEC
30701: ST_TO_ADDR
30702: LD_VAR 0 1
30706: PUSH
30707: FOR_TO
30708: IFFALSE 30746
// if array1 [ i ] <> array2 [ i ] then
30710: LD_VAR 0 1
30714: PUSH
30715: LD_VAR 0 4
30719: ARRAY
30720: PUSH
30721: LD_VAR 0 2
30725: PUSH
30726: LD_VAR 0 4
30730: ARRAY
30731: NONEQUAL
30732: IFFALSE 30744
// begin result := false ;
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_INT 0
30741: ST_TO_ADDR
// break ;
30742: GO 30746
// end ;
30744: GO 30707
30746: POP
30747: POP
// end else
30748: GO 30758
// result := false ;
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: LD_INT 0
30757: ST_TO_ADDR
// end ;
30758: LD_VAR 0 3
30762: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30763: LD_INT 0
30765: PPUSH
30766: PPUSH
// if not array1 or not array2 then
30767: LD_VAR 0 1
30771: NOT
30772: PUSH
30773: LD_VAR 0 2
30777: NOT
30778: OR
30779: IFFALSE 30783
// exit ;
30781: GO 30847
// result := true ;
30783: LD_ADDR_VAR 0 3
30787: PUSH
30788: LD_INT 1
30790: ST_TO_ADDR
// for i = 1 to array1 do
30791: LD_ADDR_VAR 0 4
30795: PUSH
30796: DOUBLE
30797: LD_INT 1
30799: DEC
30800: ST_TO_ADDR
30801: LD_VAR 0 1
30805: PUSH
30806: FOR_TO
30807: IFFALSE 30845
// if array1 [ i ] <> array2 [ i ] then
30809: LD_VAR 0 1
30813: PUSH
30814: LD_VAR 0 4
30818: ARRAY
30819: PUSH
30820: LD_VAR 0 2
30824: PUSH
30825: LD_VAR 0 4
30829: ARRAY
30830: NONEQUAL
30831: IFFALSE 30843
// begin result := false ;
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_INT 0
30840: ST_TO_ADDR
// break ;
30841: GO 30845
// end ;
30843: GO 30806
30845: POP
30846: POP
// end ;
30847: LD_VAR 0 3
30851: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
30856: PPUSH
// pom := GetBase ( fac ) ;
30857: LD_ADDR_VAR 0 5
30861: PUSH
30862: LD_VAR 0 1
30866: PPUSH
30867: CALL_OW 274
30871: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30872: LD_ADDR_VAR 0 4
30876: PUSH
30877: LD_VAR 0 2
30881: PUSH
30882: LD_INT 1
30884: ARRAY
30885: PPUSH
30886: LD_VAR 0 2
30890: PUSH
30891: LD_INT 2
30893: ARRAY
30894: PPUSH
30895: LD_VAR 0 2
30899: PUSH
30900: LD_INT 3
30902: ARRAY
30903: PPUSH
30904: LD_VAR 0 2
30908: PUSH
30909: LD_INT 4
30911: ARRAY
30912: PPUSH
30913: CALL_OW 449
30917: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_VAR 0 5
30927: PPUSH
30928: LD_INT 1
30930: PPUSH
30931: CALL_OW 275
30935: PUSH
30936: LD_VAR 0 4
30940: PUSH
30941: LD_INT 1
30943: ARRAY
30944: GREATEREQUAL
30945: PUSH
30946: LD_VAR 0 5
30950: PPUSH
30951: LD_INT 2
30953: PPUSH
30954: CALL_OW 275
30958: PUSH
30959: LD_VAR 0 4
30963: PUSH
30964: LD_INT 2
30966: ARRAY
30967: GREATEREQUAL
30968: AND
30969: PUSH
30970: LD_VAR 0 5
30974: PPUSH
30975: LD_INT 3
30977: PPUSH
30978: CALL_OW 275
30982: PUSH
30983: LD_VAR 0 4
30987: PUSH
30988: LD_INT 3
30990: ARRAY
30991: GREATEREQUAL
30992: AND
30993: ST_TO_ADDR
// end ;
30994: LD_VAR 0 3
30998: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30999: LD_INT 0
31001: PPUSH
31002: PPUSH
31003: PPUSH
31004: PPUSH
// pom := GetBase ( building ) ;
31005: LD_ADDR_VAR 0 3
31009: PUSH
31010: LD_VAR 0 1
31014: PPUSH
31015: CALL_OW 274
31019: ST_TO_ADDR
// if not pom then
31020: LD_VAR 0 3
31024: NOT
31025: IFFALSE 31029
// exit ;
31027: GO 31199
// btype := GetBType ( building ) ;
31029: LD_ADDR_VAR 0 5
31033: PUSH
31034: LD_VAR 0 1
31038: PPUSH
31039: CALL_OW 266
31043: ST_TO_ADDR
// if btype = b_armoury then
31044: LD_VAR 0 5
31048: PUSH
31049: LD_INT 4
31051: EQUAL
31052: IFFALSE 31062
// btype := b_barracks ;
31054: LD_ADDR_VAR 0 5
31058: PUSH
31059: LD_INT 5
31061: ST_TO_ADDR
// if btype = b_depot then
31062: LD_VAR 0 5
31066: PUSH
31067: LD_INT 0
31069: EQUAL
31070: IFFALSE 31080
// btype := b_warehouse ;
31072: LD_ADDR_VAR 0 5
31076: PUSH
31077: LD_INT 1
31079: ST_TO_ADDR
// if btype = b_workshop then
31080: LD_VAR 0 5
31084: PUSH
31085: LD_INT 2
31087: EQUAL
31088: IFFALSE 31098
// btype := b_factory ;
31090: LD_ADDR_VAR 0 5
31094: PUSH
31095: LD_INT 3
31097: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31098: LD_ADDR_VAR 0 4
31102: PUSH
31103: LD_VAR 0 5
31107: PPUSH
31108: LD_VAR 0 1
31112: PPUSH
31113: CALL_OW 248
31117: PPUSH
31118: CALL_OW 450
31122: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31123: LD_ADDR_VAR 0 2
31127: PUSH
31128: LD_VAR 0 3
31132: PPUSH
31133: LD_INT 1
31135: PPUSH
31136: CALL_OW 275
31140: PUSH
31141: LD_VAR 0 4
31145: PUSH
31146: LD_INT 1
31148: ARRAY
31149: GREATEREQUAL
31150: PUSH
31151: LD_VAR 0 3
31155: PPUSH
31156: LD_INT 2
31158: PPUSH
31159: CALL_OW 275
31163: PUSH
31164: LD_VAR 0 4
31168: PUSH
31169: LD_INT 2
31171: ARRAY
31172: GREATEREQUAL
31173: AND
31174: PUSH
31175: LD_VAR 0 3
31179: PPUSH
31180: LD_INT 3
31182: PPUSH
31183: CALL_OW 275
31187: PUSH
31188: LD_VAR 0 4
31192: PUSH
31193: LD_INT 3
31195: ARRAY
31196: GREATEREQUAL
31197: AND
31198: ST_TO_ADDR
// end ;
31199: LD_VAR 0 2
31203: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31204: LD_INT 0
31206: PPUSH
31207: PPUSH
31208: PPUSH
// pom := GetBase ( building ) ;
31209: LD_ADDR_VAR 0 4
31213: PUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL_OW 274
31223: ST_TO_ADDR
// if not pom then
31224: LD_VAR 0 4
31228: NOT
31229: IFFALSE 31233
// exit ;
31231: GO 31334
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31233: LD_ADDR_VAR 0 5
31237: PUSH
31238: LD_VAR 0 2
31242: PPUSH
31243: LD_VAR 0 1
31247: PPUSH
31248: CALL_OW 248
31252: PPUSH
31253: CALL_OW 450
31257: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31258: LD_ADDR_VAR 0 3
31262: PUSH
31263: LD_VAR 0 4
31267: PPUSH
31268: LD_INT 1
31270: PPUSH
31271: CALL_OW 275
31275: PUSH
31276: LD_VAR 0 5
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: GREATEREQUAL
31285: PUSH
31286: LD_VAR 0 4
31290: PPUSH
31291: LD_INT 2
31293: PPUSH
31294: CALL_OW 275
31298: PUSH
31299: LD_VAR 0 5
31303: PUSH
31304: LD_INT 2
31306: ARRAY
31307: GREATEREQUAL
31308: AND
31309: PUSH
31310: LD_VAR 0 4
31314: PPUSH
31315: LD_INT 3
31317: PPUSH
31318: CALL_OW 275
31322: PUSH
31323: LD_VAR 0 5
31327: PUSH
31328: LD_INT 3
31330: ARRAY
31331: GREATEREQUAL
31332: AND
31333: ST_TO_ADDR
// end ;
31334: LD_VAR 0 3
31338: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31339: LD_INT 0
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
// result := false ;
31352: LD_ADDR_VAR 0 8
31356: PUSH
31357: LD_INT 0
31359: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31360: LD_VAR 0 5
31364: NOT
31365: PUSH
31366: LD_VAR 0 1
31370: NOT
31371: OR
31372: PUSH
31373: LD_VAR 0 2
31377: NOT
31378: OR
31379: PUSH
31380: LD_VAR 0 3
31384: NOT
31385: OR
31386: IFFALSE 31390
// exit ;
31388: GO 32204
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31390: LD_ADDR_VAR 0 14
31394: PUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: LD_VAR 0 2
31404: PPUSH
31405: LD_VAR 0 3
31409: PPUSH
31410: LD_VAR 0 4
31414: PPUSH
31415: LD_VAR 0 5
31419: PUSH
31420: LD_INT 1
31422: ARRAY
31423: PPUSH
31424: CALL_OW 248
31428: PPUSH
31429: LD_INT 0
31431: PPUSH
31432: CALL 33457 0 6
31436: ST_TO_ADDR
// if not hexes then
31437: LD_VAR 0 14
31441: NOT
31442: IFFALSE 31446
// exit ;
31444: GO 32204
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31446: LD_ADDR_VAR 0 17
31450: PUSH
31451: LD_VAR 0 5
31455: PPUSH
31456: LD_INT 22
31458: PUSH
31459: LD_VAR 0 13
31463: PPUSH
31464: CALL_OW 255
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: LD_INT 30
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 30
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PPUSH
31505: CALL_OW 72
31509: ST_TO_ADDR
// for i = 1 to hexes do
31510: LD_ADDR_VAR 0 9
31514: PUSH
31515: DOUBLE
31516: LD_INT 1
31518: DEC
31519: ST_TO_ADDR
31520: LD_VAR 0 14
31524: PUSH
31525: FOR_TO
31526: IFFALSE 32202
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31528: LD_ADDR_VAR 0 13
31532: PUSH
31533: LD_VAR 0 14
31537: PUSH
31538: LD_VAR 0 9
31542: ARRAY
31543: PUSH
31544: LD_INT 1
31546: ARRAY
31547: PPUSH
31548: LD_VAR 0 14
31552: PUSH
31553: LD_VAR 0 9
31557: ARRAY
31558: PUSH
31559: LD_INT 2
31561: ARRAY
31562: PPUSH
31563: CALL_OW 428
31567: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31568: LD_VAR 0 14
31572: PUSH
31573: LD_VAR 0 9
31577: ARRAY
31578: PUSH
31579: LD_INT 1
31581: ARRAY
31582: PPUSH
31583: LD_VAR 0 14
31587: PUSH
31588: LD_VAR 0 9
31592: ARRAY
31593: PUSH
31594: LD_INT 2
31596: ARRAY
31597: PPUSH
31598: CALL_OW 351
31602: PUSH
31603: LD_VAR 0 14
31607: PUSH
31608: LD_VAR 0 9
31612: ARRAY
31613: PUSH
31614: LD_INT 1
31616: ARRAY
31617: PPUSH
31618: LD_VAR 0 14
31622: PUSH
31623: LD_VAR 0 9
31627: ARRAY
31628: PUSH
31629: LD_INT 2
31631: ARRAY
31632: PPUSH
31633: CALL_OW 488
31637: NOT
31638: OR
31639: PUSH
31640: LD_VAR 0 13
31644: PPUSH
31645: CALL_OW 247
31649: PUSH
31650: LD_INT 3
31652: EQUAL
31653: OR
31654: IFFALSE 31660
// exit ;
31656: POP
31657: POP
31658: GO 32204
// if not tmp then
31660: LD_VAR 0 13
31664: NOT
31665: IFFALSE 31669
// continue ;
31667: GO 31525
// result := true ;
31669: LD_ADDR_VAR 0 8
31673: PUSH
31674: LD_INT 1
31676: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31677: LD_VAR 0 6
31681: PUSH
31682: LD_VAR 0 13
31686: PPUSH
31687: CALL_OW 247
31691: PUSH
31692: LD_INT 2
31694: EQUAL
31695: AND
31696: PUSH
31697: LD_VAR 0 13
31701: PPUSH
31702: CALL_OW 263
31706: PUSH
31707: LD_INT 1
31709: EQUAL
31710: AND
31711: IFFALSE 31875
// begin if IsDrivenBy ( tmp ) then
31713: LD_VAR 0 13
31717: PPUSH
31718: CALL_OW 311
31722: IFFALSE 31726
// continue ;
31724: GO 31525
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31726: LD_VAR 0 6
31730: PPUSH
31731: LD_INT 3
31733: PUSH
31734: LD_INT 60
31736: PUSH
31737: EMPTY
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 55
31749: PUSH
31750: EMPTY
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PPUSH
31761: CALL_OW 72
31765: IFFALSE 31873
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31767: LD_ADDR_VAR 0 18
31771: PUSH
31772: LD_VAR 0 6
31776: PPUSH
31777: LD_INT 3
31779: PUSH
31780: LD_INT 60
31782: PUSH
31783: EMPTY
31784: LIST
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: LD_INT 55
31795: PUSH
31796: EMPTY
31797: LIST
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PPUSH
31807: CALL_OW 72
31811: PUSH
31812: LD_INT 1
31814: ARRAY
31815: ST_TO_ADDR
// if IsInUnit ( driver ) then
31816: LD_VAR 0 18
31820: PPUSH
31821: CALL_OW 310
31825: IFFALSE 31836
// ComExit ( driver ) ;
31827: LD_VAR 0 18
31831: PPUSH
31832: CALL 57236 0 1
// AddComEnterUnit ( driver , tmp ) ;
31836: LD_VAR 0 18
31840: PPUSH
31841: LD_VAR 0 13
31845: PPUSH
31846: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31850: LD_VAR 0 18
31854: PPUSH
31855: LD_VAR 0 7
31859: PPUSH
31860: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31864: LD_VAR 0 18
31868: PPUSH
31869: CALL_OW 181
// end ; continue ;
31873: GO 31525
// end ; if not cleaners or not tmp in cleaners then
31875: LD_VAR 0 6
31879: NOT
31880: PUSH
31881: LD_VAR 0 13
31885: PUSH
31886: LD_VAR 0 6
31890: IN
31891: NOT
31892: OR
31893: IFFALSE 32200
// begin if dep then
31895: LD_VAR 0 17
31899: IFFALSE 32035
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31901: LD_ADDR_VAR 0 16
31905: PUSH
31906: LD_VAR 0 17
31910: PUSH
31911: LD_INT 1
31913: ARRAY
31914: PPUSH
31915: CALL_OW 250
31919: PPUSH
31920: LD_VAR 0 17
31924: PUSH
31925: LD_INT 1
31927: ARRAY
31928: PPUSH
31929: CALL_OW 254
31933: PPUSH
31934: LD_INT 5
31936: PPUSH
31937: CALL_OW 272
31941: PUSH
31942: LD_VAR 0 17
31946: PUSH
31947: LD_INT 1
31949: ARRAY
31950: PPUSH
31951: CALL_OW 251
31955: PPUSH
31956: LD_VAR 0 17
31960: PUSH
31961: LD_INT 1
31963: ARRAY
31964: PPUSH
31965: CALL_OW 254
31969: PPUSH
31970: LD_INT 5
31972: PPUSH
31973: CALL_OW 273
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31982: LD_VAR 0 16
31986: PUSH
31987: LD_INT 1
31989: ARRAY
31990: PPUSH
31991: LD_VAR 0 16
31995: PUSH
31996: LD_INT 2
31998: ARRAY
31999: PPUSH
32000: CALL_OW 488
32004: IFFALSE 32035
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32006: LD_VAR 0 13
32010: PPUSH
32011: LD_VAR 0 16
32015: PUSH
32016: LD_INT 1
32018: ARRAY
32019: PPUSH
32020: LD_VAR 0 16
32024: PUSH
32025: LD_INT 2
32027: ARRAY
32028: PPUSH
32029: CALL_OW 111
// continue ;
32033: GO 31525
// end ; end ; r := GetDir ( tmp ) ;
32035: LD_ADDR_VAR 0 15
32039: PUSH
32040: LD_VAR 0 13
32044: PPUSH
32045: CALL_OW 254
32049: ST_TO_ADDR
// if r = 5 then
32050: LD_VAR 0 15
32054: PUSH
32055: LD_INT 5
32057: EQUAL
32058: IFFALSE 32068
// r := 0 ;
32060: LD_ADDR_VAR 0 15
32064: PUSH
32065: LD_INT 0
32067: ST_TO_ADDR
// for j = r to 5 do
32068: LD_ADDR_VAR 0 10
32072: PUSH
32073: DOUBLE
32074: LD_VAR 0 15
32078: DEC
32079: ST_TO_ADDR
32080: LD_INT 5
32082: PUSH
32083: FOR_TO
32084: IFFALSE 32198
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32086: LD_ADDR_VAR 0 11
32090: PUSH
32091: LD_VAR 0 13
32095: PPUSH
32096: CALL_OW 250
32100: PPUSH
32101: LD_VAR 0 10
32105: PPUSH
32106: LD_INT 2
32108: PPUSH
32109: CALL_OW 272
32113: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32114: LD_ADDR_VAR 0 12
32118: PUSH
32119: LD_VAR 0 13
32123: PPUSH
32124: CALL_OW 251
32128: PPUSH
32129: LD_VAR 0 10
32133: PPUSH
32134: LD_INT 2
32136: PPUSH
32137: CALL_OW 273
32141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32142: LD_VAR 0 11
32146: PPUSH
32147: LD_VAR 0 12
32151: PPUSH
32152: CALL_OW 488
32156: PUSH
32157: LD_VAR 0 11
32161: PPUSH
32162: LD_VAR 0 12
32166: PPUSH
32167: CALL_OW 428
32171: NOT
32172: AND
32173: IFFALSE 32196
// begin ComMoveXY ( tmp , _x , _y ) ;
32175: LD_VAR 0 13
32179: PPUSH
32180: LD_VAR 0 11
32184: PPUSH
32185: LD_VAR 0 12
32189: PPUSH
32190: CALL_OW 111
// break ;
32194: GO 32198
// end ; end ;
32196: GO 32083
32198: POP
32199: POP
// end ; end ;
32200: GO 31525
32202: POP
32203: POP
// end ;
32204: LD_VAR 0 8
32208: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32209: LD_INT 0
32211: PPUSH
// result := true ;
32212: LD_ADDR_VAR 0 3
32216: PUSH
32217: LD_INT 1
32219: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32220: LD_VAR 0 2
32224: PUSH
32225: LD_INT 24
32227: DOUBLE
32228: EQUAL
32229: IFTRUE 32239
32231: LD_INT 33
32233: DOUBLE
32234: EQUAL
32235: IFTRUE 32239
32237: GO 32264
32239: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32240: LD_ADDR_VAR 0 3
32244: PUSH
32245: LD_INT 32
32247: PPUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 321
32257: PUSH
32258: LD_INT 2
32260: EQUAL
32261: ST_TO_ADDR
32262: GO 32580
32264: LD_INT 20
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32297
32272: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32273: LD_ADDR_VAR 0 3
32277: PUSH
32278: LD_INT 6
32280: PPUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: CALL_OW 321
32290: PUSH
32291: LD_INT 2
32293: EQUAL
32294: ST_TO_ADDR
32295: GO 32580
32297: LD_INT 22
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32311
32303: LD_INT 36
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32336
32311: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32312: LD_ADDR_VAR 0 3
32316: PUSH
32317: LD_INT 15
32319: PPUSH
32320: LD_VAR 0 1
32324: PPUSH
32325: CALL_OW 321
32329: PUSH
32330: LD_INT 2
32332: EQUAL
32333: ST_TO_ADDR
32334: GO 32580
32336: LD_INT 30
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32344
32342: GO 32369
32344: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: LD_INT 20
32352: PPUSH
32353: LD_VAR 0 1
32357: PPUSH
32358: CALL_OW 321
32362: PUSH
32363: LD_INT 2
32365: EQUAL
32366: ST_TO_ADDR
32367: GO 32580
32369: LD_INT 28
32371: DOUBLE
32372: EQUAL
32373: IFTRUE 32383
32375: LD_INT 21
32377: DOUBLE
32378: EQUAL
32379: IFTRUE 32383
32381: GO 32408
32383: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_INT 21
32391: PPUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 321
32401: PUSH
32402: LD_INT 2
32404: EQUAL
32405: ST_TO_ADDR
32406: GO 32580
32408: LD_INT 16
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32441
32416: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_INT 84
32424: PPUSH
32425: LD_VAR 0 1
32429: PPUSH
32430: CALL_OW 321
32434: PUSH
32435: LD_INT 2
32437: EQUAL
32438: ST_TO_ADDR
32439: GO 32580
32441: LD_INT 19
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32455
32447: LD_INT 23
32449: DOUBLE
32450: EQUAL
32451: IFTRUE 32455
32453: GO 32480
32455: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32456: LD_ADDR_VAR 0 3
32460: PUSH
32461: LD_INT 83
32463: PPUSH
32464: LD_VAR 0 1
32468: PPUSH
32469: CALL_OW 321
32473: PUSH
32474: LD_INT 2
32476: EQUAL
32477: ST_TO_ADDR
32478: GO 32580
32480: LD_INT 17
32482: DOUBLE
32483: EQUAL
32484: IFTRUE 32488
32486: GO 32513
32488: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32489: LD_ADDR_VAR 0 3
32493: PUSH
32494: LD_INT 39
32496: PPUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 321
32506: PUSH
32507: LD_INT 2
32509: EQUAL
32510: ST_TO_ADDR
32511: GO 32580
32513: LD_INT 18
32515: DOUBLE
32516: EQUAL
32517: IFTRUE 32521
32519: GO 32546
32521: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32522: LD_ADDR_VAR 0 3
32526: PUSH
32527: LD_INT 40
32529: PPUSH
32530: LD_VAR 0 1
32534: PPUSH
32535: CALL_OW 321
32539: PUSH
32540: LD_INT 2
32542: EQUAL
32543: ST_TO_ADDR
32544: GO 32580
32546: LD_INT 27
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32579
32554: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 35
32562: PPUSH
32563: LD_VAR 0 1
32567: PPUSH
32568: CALL_OW 321
32572: PUSH
32573: LD_INT 2
32575: EQUAL
32576: ST_TO_ADDR
32577: GO 32580
32579: POP
// end ;
32580: LD_VAR 0 3
32584: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32585: LD_INT 0
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
// result := false ;
32598: LD_ADDR_VAR 0 6
32602: PUSH
32603: LD_INT 0
32605: ST_TO_ADDR
// if btype = b_depot then
32606: LD_VAR 0 2
32610: PUSH
32611: LD_INT 0
32613: EQUAL
32614: IFFALSE 32626
// begin result := true ;
32616: LD_ADDR_VAR 0 6
32620: PUSH
32621: LD_INT 1
32623: ST_TO_ADDR
// exit ;
32624: GO 33452
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32626: LD_VAR 0 1
32630: NOT
32631: PUSH
32632: LD_VAR 0 1
32636: PPUSH
32637: CALL_OW 266
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: IN
32652: NOT
32653: OR
32654: PUSH
32655: LD_VAR 0 2
32659: NOT
32660: OR
32661: PUSH
32662: LD_VAR 0 5
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 4
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: IN
32693: NOT
32694: OR
32695: PUSH
32696: LD_VAR 0 3
32700: PPUSH
32701: LD_VAR 0 4
32705: PPUSH
32706: CALL_OW 488
32710: NOT
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33452
// side := GetSide ( depot ) ;
32716: LD_ADDR_VAR 0 9
32720: PUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: CALL_OW 255
32730: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32731: LD_VAR 0 9
32735: PPUSH
32736: LD_VAR 0 2
32740: PPUSH
32741: CALL 32209 0 2
32745: NOT
32746: IFFALSE 32750
// exit ;
32748: GO 33452
// pom := GetBase ( depot ) ;
32750: LD_ADDR_VAR 0 10
32754: PUSH
32755: LD_VAR 0 1
32759: PPUSH
32760: CALL_OW 274
32764: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32765: LD_ADDR_VAR 0 11
32769: PUSH
32770: LD_VAR 0 2
32774: PPUSH
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 248
32784: PPUSH
32785: CALL_OW 450
32789: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32790: LD_VAR 0 10
32794: PPUSH
32795: LD_INT 1
32797: PPUSH
32798: CALL_OW 275
32802: PUSH
32803: LD_VAR 0 11
32807: PUSH
32808: LD_INT 1
32810: ARRAY
32811: GREATEREQUAL
32812: PUSH
32813: LD_VAR 0 10
32817: PPUSH
32818: LD_INT 2
32820: PPUSH
32821: CALL_OW 275
32825: PUSH
32826: LD_VAR 0 11
32830: PUSH
32831: LD_INT 2
32833: ARRAY
32834: GREATEREQUAL
32835: AND
32836: PUSH
32837: LD_VAR 0 10
32841: PPUSH
32842: LD_INT 3
32844: PPUSH
32845: CALL_OW 275
32849: PUSH
32850: LD_VAR 0 11
32854: PUSH
32855: LD_INT 3
32857: ARRAY
32858: GREATEREQUAL
32859: AND
32860: NOT
32861: IFFALSE 32865
// exit ;
32863: GO 33452
// if GetBType ( depot ) = b_depot then
32865: LD_VAR 0 1
32869: PPUSH
32870: CALL_OW 266
32874: PUSH
32875: LD_INT 0
32877: EQUAL
32878: IFFALSE 32890
// dist := 28 else
32880: LD_ADDR_VAR 0 14
32884: PUSH
32885: LD_INT 28
32887: ST_TO_ADDR
32888: GO 32898
// dist := 36 ;
32890: LD_ADDR_VAR 0 14
32894: PUSH
32895: LD_INT 36
32897: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32898: LD_VAR 0 1
32902: PPUSH
32903: LD_VAR 0 3
32907: PPUSH
32908: LD_VAR 0 4
32912: PPUSH
32913: CALL_OW 297
32917: PUSH
32918: LD_VAR 0 14
32922: GREATER
32923: IFFALSE 32927
// exit ;
32925: GO 33452
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32927: LD_ADDR_VAR 0 12
32931: PUSH
32932: LD_VAR 0 2
32936: PPUSH
32937: LD_VAR 0 3
32941: PPUSH
32942: LD_VAR 0 4
32946: PPUSH
32947: LD_VAR 0 5
32951: PPUSH
32952: LD_VAR 0 1
32956: PPUSH
32957: CALL_OW 248
32961: PPUSH
32962: LD_INT 0
32964: PPUSH
32965: CALL 33457 0 6
32969: ST_TO_ADDR
// if not hexes then
32970: LD_VAR 0 12
32974: NOT
32975: IFFALSE 32979
// exit ;
32977: GO 33452
// hex := GetHexInfo ( x , y ) ;
32979: LD_ADDR_VAR 0 15
32983: PUSH
32984: LD_VAR 0 3
32988: PPUSH
32989: LD_VAR 0 4
32993: PPUSH
32994: CALL_OW 546
32998: ST_TO_ADDR
// if hex [ 1 ] then
32999: LD_VAR 0 15
33003: PUSH
33004: LD_INT 1
33006: ARRAY
33007: IFFALSE 33011
// exit ;
33009: GO 33452
// height := hex [ 2 ] ;
33011: LD_ADDR_VAR 0 13
33015: PUSH
33016: LD_VAR 0 15
33020: PUSH
33021: LD_INT 2
33023: ARRAY
33024: ST_TO_ADDR
// for i = 1 to hexes do
33025: LD_ADDR_VAR 0 7
33029: PUSH
33030: DOUBLE
33031: LD_INT 1
33033: DEC
33034: ST_TO_ADDR
33035: LD_VAR 0 12
33039: PUSH
33040: FOR_TO
33041: IFFALSE 33371
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33043: LD_VAR 0 12
33047: PUSH
33048: LD_VAR 0 7
33052: ARRAY
33053: PUSH
33054: LD_INT 1
33056: ARRAY
33057: PPUSH
33058: LD_VAR 0 12
33062: PUSH
33063: LD_VAR 0 7
33067: ARRAY
33068: PUSH
33069: LD_INT 2
33071: ARRAY
33072: PPUSH
33073: CALL_OW 488
33077: NOT
33078: PUSH
33079: LD_VAR 0 12
33083: PUSH
33084: LD_VAR 0 7
33088: ARRAY
33089: PUSH
33090: LD_INT 1
33092: ARRAY
33093: PPUSH
33094: LD_VAR 0 12
33098: PUSH
33099: LD_VAR 0 7
33103: ARRAY
33104: PUSH
33105: LD_INT 2
33107: ARRAY
33108: PPUSH
33109: CALL_OW 428
33113: PUSH
33114: LD_INT 0
33116: GREATER
33117: OR
33118: PUSH
33119: LD_VAR 0 12
33123: PUSH
33124: LD_VAR 0 7
33128: ARRAY
33129: PUSH
33130: LD_INT 1
33132: ARRAY
33133: PPUSH
33134: LD_VAR 0 12
33138: PUSH
33139: LD_VAR 0 7
33143: ARRAY
33144: PUSH
33145: LD_INT 2
33147: ARRAY
33148: PPUSH
33149: CALL_OW 351
33153: OR
33154: IFFALSE 33160
// exit ;
33156: POP
33157: POP
33158: GO 33452
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33160: LD_ADDR_VAR 0 8
33164: PUSH
33165: LD_VAR 0 12
33169: PUSH
33170: LD_VAR 0 7
33174: ARRAY
33175: PUSH
33176: LD_INT 1
33178: ARRAY
33179: PPUSH
33180: LD_VAR 0 12
33184: PUSH
33185: LD_VAR 0 7
33189: ARRAY
33190: PUSH
33191: LD_INT 2
33193: ARRAY
33194: PPUSH
33195: CALL_OW 546
33199: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33200: LD_VAR 0 8
33204: PUSH
33205: LD_INT 1
33207: ARRAY
33208: PUSH
33209: LD_VAR 0 8
33213: PUSH
33214: LD_INT 2
33216: ARRAY
33217: PUSH
33218: LD_VAR 0 13
33222: PUSH
33223: LD_INT 2
33225: PLUS
33226: GREATER
33227: OR
33228: PUSH
33229: LD_VAR 0 8
33233: PUSH
33234: LD_INT 2
33236: ARRAY
33237: PUSH
33238: LD_VAR 0 13
33242: PUSH
33243: LD_INT 2
33245: MINUS
33246: LESS
33247: OR
33248: PUSH
33249: LD_VAR 0 8
33253: PUSH
33254: LD_INT 3
33256: ARRAY
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 8
33263: PUSH
33264: LD_INT 9
33266: PUSH
33267: LD_INT 10
33269: PUSH
33270: LD_INT 11
33272: PUSH
33273: LD_INT 12
33275: PUSH
33276: LD_INT 13
33278: PUSH
33279: LD_INT 16
33281: PUSH
33282: LD_INT 17
33284: PUSH
33285: LD_INT 18
33287: PUSH
33288: LD_INT 19
33290: PUSH
33291: LD_INT 20
33293: PUSH
33294: LD_INT 21
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: IN
33312: NOT
33313: OR
33314: PUSH
33315: LD_VAR 0 8
33319: PUSH
33320: LD_INT 5
33322: ARRAY
33323: NOT
33324: OR
33325: PUSH
33326: LD_VAR 0 8
33330: PUSH
33331: LD_INT 6
33333: ARRAY
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 7
33343: PUSH
33344: LD_INT 9
33346: PUSH
33347: LD_INT 10
33349: PUSH
33350: LD_INT 11
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: IN
33361: NOT
33362: OR
33363: IFFALSE 33369
// exit ;
33365: POP
33366: POP
33367: GO 33452
// end ;
33369: GO 33040
33371: POP
33372: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33373: LD_VAR 0 9
33377: PPUSH
33378: LD_VAR 0 3
33382: PPUSH
33383: LD_VAR 0 4
33387: PPUSH
33388: LD_INT 20
33390: PPUSH
33391: CALL 25375 0 4
33395: PUSH
33396: LD_INT 4
33398: ARRAY
33399: IFFALSE 33403
// exit ;
33401: GO 33452
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33403: LD_VAR 0 2
33407: PUSH
33408: LD_INT 29
33410: PUSH
33411: LD_INT 30
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: IN
33418: PUSH
33419: LD_VAR 0 3
33423: PPUSH
33424: LD_VAR 0 4
33428: PPUSH
33429: LD_VAR 0 9
33433: PPUSH
33434: CALL_OW 440
33438: NOT
33439: AND
33440: IFFALSE 33444
// exit ;
33442: GO 33452
// result := true ;
33444: LD_ADDR_VAR 0 6
33448: PUSH
33449: LD_INT 1
33451: ST_TO_ADDR
// end ;
33452: LD_VAR 0 6
33456: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
33475: PPUSH
33476: PPUSH
33477: PPUSH
33478: PPUSH
33479: PPUSH
33480: PPUSH
33481: PPUSH
33482: PPUSH
33483: PPUSH
33484: PPUSH
33485: PPUSH
33486: PPUSH
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
33496: PPUSH
33497: PPUSH
33498: PPUSH
33499: PPUSH
33500: PPUSH
33501: PPUSH
33502: PPUSH
33503: PPUSH
33504: PPUSH
33505: PPUSH
33506: PPUSH
33507: PPUSH
33508: PPUSH
33509: PPUSH
33510: PPUSH
33511: PPUSH
33512: PPUSH
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
// result = [ ] ;
33517: LD_ADDR_VAR 0 7
33521: PUSH
33522: EMPTY
33523: ST_TO_ADDR
// temp_list = [ ] ;
33524: LD_ADDR_VAR 0 9
33528: PUSH
33529: EMPTY
33530: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33531: LD_VAR 0 4
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: LD_INT 4
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: IN
33562: NOT
33563: PUSH
33564: LD_VAR 0 1
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: IN
33579: PUSH
33580: LD_VAR 0 5
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 3
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: IN
33599: NOT
33600: AND
33601: OR
33602: IFFALSE 33606
// exit ;
33604: GO 51997
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33606: LD_VAR 0 1
33610: PUSH
33611: LD_INT 6
33613: PUSH
33614: LD_INT 7
33616: PUSH
33617: LD_INT 8
33619: PUSH
33620: LD_INT 13
33622: PUSH
33623: LD_INT 12
33625: PUSH
33626: LD_INT 15
33628: PUSH
33629: LD_INT 11
33631: PUSH
33632: LD_INT 14
33634: PUSH
33635: LD_INT 10
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: IN
33649: IFFALSE 33659
// btype = b_lab ;
33651: LD_ADDR_VAR 0 1
33655: PUSH
33656: LD_INT 6
33658: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33659: LD_VAR 0 6
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: LD_INT 1
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: IN
33678: NOT
33679: PUSH
33680: LD_VAR 0 1
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: LD_INT 6
33699: PUSH
33700: LD_INT 36
33702: PUSH
33703: LD_INT 4
33705: PUSH
33706: LD_INT 5
33708: PUSH
33709: LD_INT 31
33711: PUSH
33712: LD_INT 32
33714: PUSH
33715: LD_INT 33
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: IN
33731: NOT
33732: PUSH
33733: LD_VAR 0 6
33737: PUSH
33738: LD_INT 1
33740: EQUAL
33741: AND
33742: OR
33743: PUSH
33744: LD_VAR 0 1
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: IN
33759: NOT
33760: PUSH
33761: LD_VAR 0 6
33765: PUSH
33766: LD_INT 2
33768: EQUAL
33769: AND
33770: OR
33771: IFFALSE 33781
// mode = 0 ;
33773: LD_ADDR_VAR 0 6
33777: PUSH
33778: LD_INT 0
33780: ST_TO_ADDR
// case mode of 0 :
33781: LD_VAR 0 6
33785: PUSH
33786: LD_INT 0
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 45247
33794: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33795: LD_ADDR_VAR 0 11
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 1
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 3
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 2
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33988: LD_ADDR_VAR 0 12
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: NEG
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: NEG
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34184: LD_ADDR_VAR 0 13
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 2
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: LD_INT 2
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: LD_INT 3
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 3
34343: NEG
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 3
34355: NEG
34356: PUSH
34357: LD_INT 3
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34383: LD_ADDR_VAR 0 14
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 2
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: LD_INT 3
34533: NEG
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 3
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 2
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34579: LD_ADDR_VAR 0 15
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 2
34702: NEG
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34772: LD_ADDR_VAR 0 16
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 3
34929: PUSH
34930: LD_INT 3
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34965: LD_ADDR_VAR 0 17
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: LD_INT 2
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35195: LD_ADDR_VAR 0 18
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: NEG
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 2
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35425: LD_ADDR_VAR 0 19
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35655: LD_ADDR_VAR 0 20
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: NEG
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35885: LD_ADDR_VAR 0 21
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36115: LD_ADDR_VAR 0 22
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: LD_INT 2
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 2
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: NEG
36315: PUSH
36316: LD_INT 2
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36345: LD_ADDR_VAR 0 23
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: LD_INT 2
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: LD_INT 2
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 2
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: NEG
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: NEG
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: LD_INT 2
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 3
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 3
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36625: LD_ADDR_VAR 0 24
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 2
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: NEG
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 2
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36901: LD_ADDR_VAR 0 25
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: LD_INT 2
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: LD_INT 2
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 3
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 2
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 3
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37175: LD_ADDR_VAR 0 26
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37451: LD_ADDR_VAR 0 27
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 2
37627: NEG
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: NEG
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 2
37650: NEG
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 3
37696: NEG
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37731: LD_ADDR_VAR 0 28
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: LD_INT 3
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: LD_INT 3
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 3
37966: NEG
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: NEG
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38013: LD_ADDR_VAR 0 29
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 3
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 3
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38292: LD_ADDR_VAR 0 30
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 3
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 3
38535: NEG
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38570: LD_ADDR_VAR 0 31
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 2
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: LD_INT 2
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: LD_INT 3
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: NEG
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38848: LD_ADDR_VAR 0 32
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: LD_INT 2
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 3
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: LD_INT 3
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 3
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39126: LD_ADDR_VAR 0 33
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: NEG
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: NEG
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 3
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 3
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 3
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 3
39370: NEG
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39405: LD_ADDR_VAR 0 34
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: NEG
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 3
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 3
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 3
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 3
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39685: LD_ADDR_VAR 0 35
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39797: LD_ADDR_VAR 0 36
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39909: LD_ADDR_VAR 0 37
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40021: LD_ADDR_VAR 0 38
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40133: LD_ADDR_VAR 0 39
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40245: LD_ADDR_VAR 0 40
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40357: LD_ADDR_VAR 0 41
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 3
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: LD_INT 3
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 3
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 3
40631: NEG
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 3
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 3
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 3
40666: NEG
40667: PUSH
40668: LD_INT 3
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40707: LD_ADDR_VAR 0 42
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: LD_INT 3
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 3
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 3
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 3
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 3
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 3
41004: NEG
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 3
41016: NEG
41017: PUSH
41018: LD_INT 3
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41057: LD_ADDR_VAR 0 43
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 2
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 3
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 3
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 3
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 3
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 3
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41405: LD_ADDR_VAR 0 44
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: NEG
41596: PUSH
41597: LD_INT 3
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: LD_INT 3
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 3
41679: NEG
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 3
41702: NEG
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: LD_INT 3
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41755: LD_ADDR_VAR 0 45
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 3
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 3
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 3
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 3
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 3
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: NEG
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: LD_INT 3
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42105: LD_ADDR_VAR 0 46
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 3
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 3
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 3
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 3
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 3
42401: NEG
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42453: LD_ADDR_VAR 0 47
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42604: LD_ADDR_VAR 0 48
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42751: LD_ADDR_VAR 0 49
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42895: LD_ADDR_VAR 0 50
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43039: LD_ADDR_VAR 0 51
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43186: LD_ADDR_VAR 0 52
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43337: LD_ADDR_VAR 0 53
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43567: LD_ADDR_VAR 0 54
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43797: LD_ADDR_VAR 0 55
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44027: LD_ADDR_VAR 0 56
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44257: LD_ADDR_VAR 0 57
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44487: LD_ADDR_VAR 0 58
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44717: LD_ADDR_VAR 0 59
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44805: LD_ADDR_VAR 0 60
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44893: LD_ADDR_VAR 0 61
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44981: LD_ADDR_VAR 0 62
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45069: LD_ADDR_VAR 0 63
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45157: LD_ADDR_VAR 0 64
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: ST_TO_ADDR
// end ; 1 :
45245: GO 51142
45247: LD_INT 1
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 47878
45255: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45256: LD_ADDR_VAR 0 11
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 3
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: LIST
45299: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45300: LD_ADDR_VAR 0 12
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 3
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45341: LD_ADDR_VAR 0 13
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45381: LD_ADDR_VAR 0 14
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 3
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45422: LD_ADDR_VAR 0 15
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 3
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45466: LD_ADDR_VAR 0 16
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 3
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 3
45497: NEG
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45512: LD_ADDR_VAR 0 17
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 3
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45556: LD_ADDR_VAR 0 18
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45597: LD_ADDR_VAR 0 19
45601: PUSH
45602: LD_INT 3
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 3
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45637: LD_ADDR_VAR 0 20
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45678: LD_ADDR_VAR 0 21
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45722: LD_ADDR_VAR 0 22
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 3
45741: NEG
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 3
45753: NEG
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45768: LD_ADDR_VAR 0 23
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 4
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 3
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45812: LD_ADDR_VAR 0 24
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 4
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45853: LD_ADDR_VAR 0 25
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: LD_INT 3
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 4
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 3
45880: PUSH
45881: LD_INT 4
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45893: LD_ADDR_VAR 0 26
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 3
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 4
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45934: LD_ADDR_VAR 0 27
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 4
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45978: LD_ADDR_VAR 0 28
45982: PUSH
45983: LD_INT 3
45985: NEG
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: LD_INT 4
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 4
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46024: LD_ADDR_VAR 0 29
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 4
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 4
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 5
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 5
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 4
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 6
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 6
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 5
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46179: LD_ADDR_VAR 0 30
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 4
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 4
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 5
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 5
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 5
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 6
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 6
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46322: LD_ADDR_VAR 0 31
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 3
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 3
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 4
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 4
46369: PUSH
46370: LD_INT 4
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: LD_INT 4
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 5
46389: PUSH
46390: LD_INT 4
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 5
46399: PUSH
46400: LD_INT 5
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 4
46409: PUSH
46410: LD_INT 5
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 6
46419: PUSH
46420: LD_INT 5
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 6
46429: PUSH
46430: LD_INT 6
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 5
46439: PUSH
46440: LD_INT 6
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46461: LD_ADDR_VAR 0 32
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 3
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 4
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 4
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 5
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 5
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 4
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 6
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 6
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 5
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46604: LD_ADDR_VAR 0 33
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 4
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 4
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 5
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 5
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 5
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 6
46724: NEG
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 6
46735: NEG
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46759: LD_ADDR_VAR 0 34
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 3
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: NEG
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: LD_INT 4
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 4
46814: NEG
46815: PUSH
46816: LD_INT 3
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 4
46826: NEG
46827: PUSH
46828: LD_INT 4
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 4
46838: NEG
46839: PUSH
46840: LD_INT 5
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 5
46850: NEG
46851: PUSH
46852: LD_INT 4
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 5
46862: NEG
46863: PUSH
46864: LD_INT 5
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 5
46874: NEG
46875: PUSH
46876: LD_INT 6
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 6
46886: NEG
46887: PUSH
46888: LD_INT 5
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 6
46898: NEG
46899: PUSH
46900: LD_INT 6
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46922: LD_ADDR_VAR 0 41
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46966: LD_ADDR_VAR 0 42
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47007: LD_ADDR_VAR 0 43
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47047: LD_ADDR_VAR 0 44
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47088: LD_ADDR_VAR 0 45
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47132: LD_ADDR_VAR 0 46
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47178: LD_ADDR_VAR 0 47
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: LD_INT 3
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 3
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47211: LD_ADDR_VAR 0 48
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47242: LD_ADDR_VAR 0 49
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47271: LD_ADDR_VAR 0 50
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 3
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 3
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47300: LD_ADDR_VAR 0 51
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47331: LD_ADDR_VAR 0 52
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47364: LD_ADDR_VAR 0 53
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47408: LD_ADDR_VAR 0 54
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47449: LD_ADDR_VAR 0 55
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 3
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: LIST
47488: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47489: LD_ADDR_VAR 0 56
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47530: LD_ADDR_VAR 0 57
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47574: LD_ADDR_VAR 0 58
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 3
47605: NEG
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47620: LD_ADDR_VAR 0 59
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47664: LD_ADDR_VAR 0 60
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47705: LD_ADDR_VAR 0 61
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47745: LD_ADDR_VAR 0 62
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47786: LD_ADDR_VAR 0 63
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47830: LD_ADDR_VAR 0 64
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// end ; 2 :
47876: GO 51142
47878: LD_INT 2
47880: DOUBLE
47881: EQUAL
47882: IFTRUE 47886
47884: GO 51141
47886: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47887: LD_ADDR_VAR 0 29
47891: PUSH
47892: LD_INT 4
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 4
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 5
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 5
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 4
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 3
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 5
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 4
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 4
48017: PUSH
48018: LD_INT 4
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: LD_INT 4
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 4
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: LD_INT 4
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 4
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 4
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 5
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 5
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 4
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 5
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 3
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 4
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 4
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 4
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 4
48272: NEG
48273: PUSH
48274: LD_INT 4
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 4
48284: NEG
48285: PUSH
48286: LD_INT 5
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: LD_INT 4
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 4
48320: NEG
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 5
48332: NEG
48333: PUSH
48334: LD_INT 4
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 5
48344: NEG
48345: PUSH
48346: LD_INT 5
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: LD_INT 5
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 5
48368: NEG
48369: PUSH
48370: LD_INT 3
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48425: LD_ADDR_VAR 0 30
48429: PUSH
48430: LD_INT 4
48432: PUSH
48433: LD_INT 4
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 4
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 5
48452: PUSH
48453: LD_INT 4
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 5
48462: PUSH
48463: LD_INT 5
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 4
48472: PUSH
48473: LD_INT 5
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: LD_INT 4
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 5
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: LD_INT 5
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 4
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 4
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 4
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 4
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 4
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 4
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 5
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 5
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 5
48694: NEG
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: NEG
48718: PUSH
48719: LD_INT 3
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: LD_INT 4
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 4
48777: NEG
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 4
48789: NEG
48790: PUSH
48791: LD_INT 4
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 4
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 4
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 4
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 5
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 4
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 4
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 5
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 3
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 5
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48972: LD_ADDR_VAR 0 31
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 4
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 4
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 5
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 5
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 4
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 5
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 4
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 4
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 4
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 4
49174: NEG
49175: PUSH
49176: LD_INT 4
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 4
49186: NEG
49187: PUSH
49188: LD_INT 5
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: LD_INT 4
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: NEG
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 4
49222: NEG
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 5
49234: NEG
49235: PUSH
49236: LD_INT 4
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 5
49246: NEG
49247: PUSH
49248: LD_INT 5
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: LD_INT 5
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 5
49270: NEG
49271: PUSH
49272: LD_INT 3
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 3
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 4
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 4
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 4
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 4
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 4
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 5
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 5
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 4
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 3
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 5
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49522: LD_ADDR_VAR 0 32
49526: PUSH
49527: LD_INT 4
49529: NEG
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 4
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 4
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 5
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 5
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 5
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: LD_INT 4
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 4
49691: NEG
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 4
49703: NEG
49704: PUSH
49705: LD_INT 4
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 4
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 4
49727: NEG
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 4
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 5
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 4
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 4
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 5
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 5
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 4
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 4
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 4
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 5
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 5
49964: PUSH
49965: LD_INT 5
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: LD_INT 5
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 4
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 5
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 5
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50069: LD_ADDR_VAR 0 33
50073: PUSH
50074: LD_INT 4
50076: NEG
50077: PUSH
50078: LD_INT 4
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 4
50088: NEG
50089: PUSH
50090: LD_INT 5
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: LD_INT 4
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: LD_INT 3
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 4
50124: NEG
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 5
50136: NEG
50137: PUSH
50138: LD_INT 4
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 5
50148: NEG
50149: PUSH
50150: LD_INT 5
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: LD_INT 5
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 5
50172: NEG
50173: PUSH
50174: LD_INT 3
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 4
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 3
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 3
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 4
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 4
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 4
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 4
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 5
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 5
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 4
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 5
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 4
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 4
50409: PUSH
50410: LD_INT 4
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: LD_INT 4
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 4
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: LD_INT 4
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 4
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 4
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 5
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 5
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 4
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 5
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50607: LD_ADDR_VAR 0 34
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 4
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 5
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 4
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 3
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 3
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 4
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 5
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: LD_INT 5
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 4
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 4
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 4
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 4
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 4
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 5
50829: PUSH
50830: LD_INT 4
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 5
50839: PUSH
50840: LD_INT 5
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 4
50849: PUSH
50850: LD_INT 5
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: LD_INT 4
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 5
50879: PUSH
50880: LD_INT 3
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: LD_INT 5
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 4
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 4
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 4
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 4
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 4
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 4
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 5
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 5
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 5
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: ST_TO_ADDR
// end ; end ;
51139: GO 51142
51141: POP
// case btype of b_depot , b_warehouse :
51142: LD_VAR 0 1
51146: PUSH
51147: LD_INT 0
51149: DOUBLE
51150: EQUAL
51151: IFTRUE 51161
51153: LD_INT 1
51155: DOUBLE
51156: EQUAL
51157: IFTRUE 51161
51159: GO 51362
51161: POP
// case nation of nation_american :
51162: LD_VAR 0 5
51166: PUSH
51167: LD_INT 1
51169: DOUBLE
51170: EQUAL
51171: IFTRUE 51175
51173: GO 51231
51175: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51176: LD_ADDR_VAR 0 9
51180: PUSH
51181: LD_VAR 0 11
51185: PUSH
51186: LD_VAR 0 12
51190: PUSH
51191: LD_VAR 0 13
51195: PUSH
51196: LD_VAR 0 14
51200: PUSH
51201: LD_VAR 0 15
51205: PUSH
51206: LD_VAR 0 16
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: PUSH
51219: LD_VAR 0 4
51223: PUSH
51224: LD_INT 1
51226: PLUS
51227: ARRAY
51228: ST_TO_ADDR
51229: GO 51360
51231: LD_INT 2
51233: DOUBLE
51234: EQUAL
51235: IFTRUE 51239
51237: GO 51295
51239: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51240: LD_ADDR_VAR 0 9
51244: PUSH
51245: LD_VAR 0 17
51249: PUSH
51250: LD_VAR 0 18
51254: PUSH
51255: LD_VAR 0 19
51259: PUSH
51260: LD_VAR 0 20
51264: PUSH
51265: LD_VAR 0 21
51269: PUSH
51270: LD_VAR 0 22
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: PUSH
51283: LD_VAR 0 4
51287: PUSH
51288: LD_INT 1
51290: PLUS
51291: ARRAY
51292: ST_TO_ADDR
51293: GO 51360
51295: LD_INT 3
51297: DOUBLE
51298: EQUAL
51299: IFTRUE 51303
51301: GO 51359
51303: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51304: LD_ADDR_VAR 0 9
51308: PUSH
51309: LD_VAR 0 23
51313: PUSH
51314: LD_VAR 0 24
51318: PUSH
51319: LD_VAR 0 25
51323: PUSH
51324: LD_VAR 0 26
51328: PUSH
51329: LD_VAR 0 27
51333: PUSH
51334: LD_VAR 0 28
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: PUSH
51347: LD_VAR 0 4
51351: PUSH
51352: LD_INT 1
51354: PLUS
51355: ARRAY
51356: ST_TO_ADDR
51357: GO 51360
51359: POP
51360: GO 51915
51362: LD_INT 2
51364: DOUBLE
51365: EQUAL
51366: IFTRUE 51376
51368: LD_INT 3
51370: DOUBLE
51371: EQUAL
51372: IFTRUE 51376
51374: GO 51432
51376: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51377: LD_ADDR_VAR 0 9
51381: PUSH
51382: LD_VAR 0 29
51386: PUSH
51387: LD_VAR 0 30
51391: PUSH
51392: LD_VAR 0 31
51396: PUSH
51397: LD_VAR 0 32
51401: PUSH
51402: LD_VAR 0 33
51406: PUSH
51407: LD_VAR 0 34
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: LD_VAR 0 4
51424: PUSH
51425: LD_INT 1
51427: PLUS
51428: ARRAY
51429: ST_TO_ADDR
51430: GO 51915
51432: LD_INT 16
51434: DOUBLE
51435: EQUAL
51436: IFTRUE 51494
51438: LD_INT 17
51440: DOUBLE
51441: EQUAL
51442: IFTRUE 51494
51444: LD_INT 18
51446: DOUBLE
51447: EQUAL
51448: IFTRUE 51494
51450: LD_INT 19
51452: DOUBLE
51453: EQUAL
51454: IFTRUE 51494
51456: LD_INT 22
51458: DOUBLE
51459: EQUAL
51460: IFTRUE 51494
51462: LD_INT 20
51464: DOUBLE
51465: EQUAL
51466: IFTRUE 51494
51468: LD_INT 21
51470: DOUBLE
51471: EQUAL
51472: IFTRUE 51494
51474: LD_INT 23
51476: DOUBLE
51477: EQUAL
51478: IFTRUE 51494
51480: LD_INT 24
51482: DOUBLE
51483: EQUAL
51484: IFTRUE 51494
51486: LD_INT 25
51488: DOUBLE
51489: EQUAL
51490: IFTRUE 51494
51492: GO 51550
51494: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51495: LD_ADDR_VAR 0 9
51499: PUSH
51500: LD_VAR 0 35
51504: PUSH
51505: LD_VAR 0 36
51509: PUSH
51510: LD_VAR 0 37
51514: PUSH
51515: LD_VAR 0 38
51519: PUSH
51520: LD_VAR 0 39
51524: PUSH
51525: LD_VAR 0 40
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: PUSH
51538: LD_VAR 0 4
51542: PUSH
51543: LD_INT 1
51545: PLUS
51546: ARRAY
51547: ST_TO_ADDR
51548: GO 51915
51550: LD_INT 6
51552: DOUBLE
51553: EQUAL
51554: IFTRUE 51606
51556: LD_INT 7
51558: DOUBLE
51559: EQUAL
51560: IFTRUE 51606
51562: LD_INT 8
51564: DOUBLE
51565: EQUAL
51566: IFTRUE 51606
51568: LD_INT 13
51570: DOUBLE
51571: EQUAL
51572: IFTRUE 51606
51574: LD_INT 12
51576: DOUBLE
51577: EQUAL
51578: IFTRUE 51606
51580: LD_INT 15
51582: DOUBLE
51583: EQUAL
51584: IFTRUE 51606
51586: LD_INT 11
51588: DOUBLE
51589: EQUAL
51590: IFTRUE 51606
51592: LD_INT 14
51594: DOUBLE
51595: EQUAL
51596: IFTRUE 51606
51598: LD_INT 10
51600: DOUBLE
51601: EQUAL
51602: IFTRUE 51606
51604: GO 51662
51606: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51607: LD_ADDR_VAR 0 9
51611: PUSH
51612: LD_VAR 0 41
51616: PUSH
51617: LD_VAR 0 42
51621: PUSH
51622: LD_VAR 0 43
51626: PUSH
51627: LD_VAR 0 44
51631: PUSH
51632: LD_VAR 0 45
51636: PUSH
51637: LD_VAR 0 46
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: PUSH
51650: LD_VAR 0 4
51654: PUSH
51655: LD_INT 1
51657: PLUS
51658: ARRAY
51659: ST_TO_ADDR
51660: GO 51915
51662: LD_INT 36
51664: DOUBLE
51665: EQUAL
51666: IFTRUE 51670
51668: GO 51726
51670: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51671: LD_ADDR_VAR 0 9
51675: PUSH
51676: LD_VAR 0 47
51680: PUSH
51681: LD_VAR 0 48
51685: PUSH
51686: LD_VAR 0 49
51690: PUSH
51691: LD_VAR 0 50
51695: PUSH
51696: LD_VAR 0 51
51700: PUSH
51701: LD_VAR 0 52
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: PUSH
51714: LD_VAR 0 4
51718: PUSH
51719: LD_INT 1
51721: PLUS
51722: ARRAY
51723: ST_TO_ADDR
51724: GO 51915
51726: LD_INT 4
51728: DOUBLE
51729: EQUAL
51730: IFTRUE 51752
51732: LD_INT 5
51734: DOUBLE
51735: EQUAL
51736: IFTRUE 51752
51738: LD_INT 34
51740: DOUBLE
51741: EQUAL
51742: IFTRUE 51752
51744: LD_INT 37
51746: DOUBLE
51747: EQUAL
51748: IFTRUE 51752
51750: GO 51808
51752: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51753: LD_ADDR_VAR 0 9
51757: PUSH
51758: LD_VAR 0 53
51762: PUSH
51763: LD_VAR 0 54
51767: PUSH
51768: LD_VAR 0 55
51772: PUSH
51773: LD_VAR 0 56
51777: PUSH
51778: LD_VAR 0 57
51782: PUSH
51783: LD_VAR 0 58
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: PUSH
51796: LD_VAR 0 4
51800: PUSH
51801: LD_INT 1
51803: PLUS
51804: ARRAY
51805: ST_TO_ADDR
51806: GO 51915
51808: LD_INT 31
51810: DOUBLE
51811: EQUAL
51812: IFTRUE 51858
51814: LD_INT 32
51816: DOUBLE
51817: EQUAL
51818: IFTRUE 51858
51820: LD_INT 33
51822: DOUBLE
51823: EQUAL
51824: IFTRUE 51858
51826: LD_INT 27
51828: DOUBLE
51829: EQUAL
51830: IFTRUE 51858
51832: LD_INT 26
51834: DOUBLE
51835: EQUAL
51836: IFTRUE 51858
51838: LD_INT 28
51840: DOUBLE
51841: EQUAL
51842: IFTRUE 51858
51844: LD_INT 29
51846: DOUBLE
51847: EQUAL
51848: IFTRUE 51858
51850: LD_INT 30
51852: DOUBLE
51853: EQUAL
51854: IFTRUE 51858
51856: GO 51914
51858: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51859: LD_ADDR_VAR 0 9
51863: PUSH
51864: LD_VAR 0 59
51868: PUSH
51869: LD_VAR 0 60
51873: PUSH
51874: LD_VAR 0 61
51878: PUSH
51879: LD_VAR 0 62
51883: PUSH
51884: LD_VAR 0 63
51888: PUSH
51889: LD_VAR 0 64
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: PUSH
51902: LD_VAR 0 4
51906: PUSH
51907: LD_INT 1
51909: PLUS
51910: ARRAY
51911: ST_TO_ADDR
51912: GO 51915
51914: POP
// temp_list2 = [ ] ;
51915: LD_ADDR_VAR 0 10
51919: PUSH
51920: EMPTY
51921: ST_TO_ADDR
// for i in temp_list do
51922: LD_ADDR_VAR 0 8
51926: PUSH
51927: LD_VAR 0 9
51931: PUSH
51932: FOR_IN
51933: IFFALSE 51985
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51935: LD_ADDR_VAR 0 10
51939: PUSH
51940: LD_VAR 0 10
51944: PUSH
51945: LD_VAR 0 8
51949: PUSH
51950: LD_INT 1
51952: ARRAY
51953: PUSH
51954: LD_VAR 0 2
51958: PLUS
51959: PUSH
51960: LD_VAR 0 8
51964: PUSH
51965: LD_INT 2
51967: ARRAY
51968: PUSH
51969: LD_VAR 0 3
51973: PLUS
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: EMPTY
51980: LIST
51981: ADD
51982: ST_TO_ADDR
51983: GO 51932
51985: POP
51986: POP
// result = temp_list2 ;
51987: LD_ADDR_VAR 0 7
51991: PUSH
51992: LD_VAR 0 10
51996: ST_TO_ADDR
// end ;
51997: LD_VAR 0 7
52001: RET
// export function EnemyInRange ( unit , dist ) ; begin
52002: LD_INT 0
52004: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52005: LD_ADDR_VAR 0 3
52009: PUSH
52010: LD_VAR 0 1
52014: PPUSH
52015: CALL_OW 255
52019: PPUSH
52020: LD_VAR 0 1
52024: PPUSH
52025: CALL_OW 250
52029: PPUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 251
52039: PPUSH
52040: LD_VAR 0 2
52044: PPUSH
52045: CALL 25375 0 4
52049: PUSH
52050: LD_INT 4
52052: ARRAY
52053: ST_TO_ADDR
// end ;
52054: LD_VAR 0 3
52058: RET
// export function PlayerSeeMe ( unit ) ; begin
52059: LD_INT 0
52061: PPUSH
// result := See ( your_side , unit ) ;
52062: LD_ADDR_VAR 0 2
52066: PUSH
52067: LD_OWVAR 2
52071: PPUSH
52072: LD_VAR 0 1
52076: PPUSH
52077: CALL_OW 292
52081: ST_TO_ADDR
// end ;
52082: LD_VAR 0 2
52086: RET
// export function ReverseDir ( unit ) ; begin
52087: LD_INT 0
52089: PPUSH
// if not unit then
52090: LD_VAR 0 1
52094: NOT
52095: IFFALSE 52099
// exit ;
52097: GO 52122
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52099: LD_ADDR_VAR 0 2
52103: PUSH
52104: LD_VAR 0 1
52108: PPUSH
52109: CALL_OW 254
52113: PUSH
52114: LD_INT 3
52116: PLUS
52117: PUSH
52118: LD_INT 6
52120: MOD
52121: ST_TO_ADDR
// end ;
52122: LD_VAR 0 2
52126: RET
// export function ReverseArray ( array ) ; var i ; begin
52127: LD_INT 0
52129: PPUSH
52130: PPUSH
// if not array then
52131: LD_VAR 0 1
52135: NOT
52136: IFFALSE 52140
// exit ;
52138: GO 52195
// result := [ ] ;
52140: LD_ADDR_VAR 0 2
52144: PUSH
52145: EMPTY
52146: ST_TO_ADDR
// for i := array downto 1 do
52147: LD_ADDR_VAR 0 3
52151: PUSH
52152: DOUBLE
52153: LD_VAR 0 1
52157: INC
52158: ST_TO_ADDR
52159: LD_INT 1
52161: PUSH
52162: FOR_DOWNTO
52163: IFFALSE 52193
// result := Join ( result , array [ i ] ) ;
52165: LD_ADDR_VAR 0 2
52169: PUSH
52170: LD_VAR 0 2
52174: PPUSH
52175: LD_VAR 0 1
52179: PUSH
52180: LD_VAR 0 3
52184: ARRAY
52185: PPUSH
52186: CALL 56838 0 2
52190: ST_TO_ADDR
52191: GO 52162
52193: POP
52194: POP
// end ;
52195: LD_VAR 0 2
52199: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
52200: LD_INT 0
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
// if not unit or not hexes then
52208: LD_VAR 0 1
52212: NOT
52213: PUSH
52214: LD_VAR 0 2
52218: NOT
52219: OR
52220: IFFALSE 52224
// exit ;
52222: GO 52347
// dist := 9999 ;
52224: LD_ADDR_VAR 0 5
52228: PUSH
52229: LD_INT 9999
52231: ST_TO_ADDR
// for i = 1 to hexes do
52232: LD_ADDR_VAR 0 4
52236: PUSH
52237: DOUBLE
52238: LD_INT 1
52240: DEC
52241: ST_TO_ADDR
52242: LD_VAR 0 2
52246: PUSH
52247: FOR_TO
52248: IFFALSE 52335
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52250: LD_ADDR_VAR 0 6
52254: PUSH
52255: LD_VAR 0 1
52259: PPUSH
52260: LD_VAR 0 2
52264: PUSH
52265: LD_VAR 0 4
52269: ARRAY
52270: PUSH
52271: LD_INT 1
52273: ARRAY
52274: PPUSH
52275: LD_VAR 0 2
52279: PUSH
52280: LD_VAR 0 4
52284: ARRAY
52285: PUSH
52286: LD_INT 2
52288: ARRAY
52289: PPUSH
52290: CALL_OW 297
52294: ST_TO_ADDR
// if tdist < dist then
52295: LD_VAR 0 6
52299: PUSH
52300: LD_VAR 0 5
52304: LESS
52305: IFFALSE 52333
// begin hex := hexes [ i ] ;
52307: LD_ADDR_VAR 0 8
52311: PUSH
52312: LD_VAR 0 2
52316: PUSH
52317: LD_VAR 0 4
52321: ARRAY
52322: ST_TO_ADDR
// dist := tdist ;
52323: LD_ADDR_VAR 0 5
52327: PUSH
52328: LD_VAR 0 6
52332: ST_TO_ADDR
// end ; end ;
52333: GO 52247
52335: POP
52336: POP
// result := hex ;
52337: LD_ADDR_VAR 0 3
52341: PUSH
52342: LD_VAR 0 8
52346: ST_TO_ADDR
// end ;
52347: LD_VAR 0 3
52351: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52352: LD_INT 0
52354: PPUSH
52355: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52356: LD_VAR 0 1
52360: NOT
52361: PUSH
52362: LD_VAR 0 1
52366: PUSH
52367: LD_INT 21
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 23
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PPUSH
52391: CALL_OW 69
52395: IN
52396: NOT
52397: OR
52398: IFFALSE 52402
// exit ;
52400: GO 52449
// for i = 1 to 3 do
52402: LD_ADDR_VAR 0 3
52406: PUSH
52407: DOUBLE
52408: LD_INT 1
52410: DEC
52411: ST_TO_ADDR
52412: LD_INT 3
52414: PUSH
52415: FOR_TO
52416: IFFALSE 52447
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52418: LD_VAR 0 1
52422: PPUSH
52423: CALL_OW 250
52427: PPUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: CALL_OW 251
52437: PPUSH
52438: LD_INT 1
52440: PPUSH
52441: CALL_OW 453
52445: GO 52415
52447: POP
52448: POP
// end ;
52449: LD_VAR 0 2
52453: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52454: LD_INT 0
52456: PPUSH
52457: PPUSH
52458: PPUSH
52459: PPUSH
52460: PPUSH
52461: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52462: LD_VAR 0 1
52466: NOT
52467: PUSH
52468: LD_VAR 0 2
52472: NOT
52473: OR
52474: PUSH
52475: LD_VAR 0 1
52479: PPUSH
52480: CALL_OW 314
52484: OR
52485: IFFALSE 52489
// exit ;
52487: GO 52956
// if GetLives ( i ) < 250 then
52489: LD_VAR 0 4
52493: PPUSH
52494: CALL_OW 256
52498: PUSH
52499: LD_INT 250
52501: LESS
52502: IFFALSE 52515
// begin ComAutodestruct ( i ) ;
52504: LD_VAR 0 4
52508: PPUSH
52509: CALL 52352 0 1
// exit ;
52513: GO 52956
// end ; x := GetX ( enemy_unit ) ;
52515: LD_ADDR_VAR 0 7
52519: PUSH
52520: LD_VAR 0 2
52524: PPUSH
52525: CALL_OW 250
52529: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52530: LD_ADDR_VAR 0 8
52534: PUSH
52535: LD_VAR 0 2
52539: PPUSH
52540: CALL_OW 251
52544: ST_TO_ADDR
// if not x or not y then
52545: LD_VAR 0 7
52549: NOT
52550: PUSH
52551: LD_VAR 0 8
52555: NOT
52556: OR
52557: IFFALSE 52561
// exit ;
52559: GO 52956
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52561: LD_ADDR_VAR 0 6
52565: PUSH
52566: LD_VAR 0 7
52570: PPUSH
52571: LD_INT 0
52573: PPUSH
52574: LD_INT 4
52576: PPUSH
52577: CALL_OW 272
52581: PUSH
52582: LD_VAR 0 8
52586: PPUSH
52587: LD_INT 0
52589: PPUSH
52590: LD_INT 4
52592: PPUSH
52593: CALL_OW 273
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_VAR 0 7
52606: PPUSH
52607: LD_INT 1
52609: PPUSH
52610: LD_INT 4
52612: PPUSH
52613: CALL_OW 272
52617: PUSH
52618: LD_VAR 0 8
52622: PPUSH
52623: LD_INT 1
52625: PPUSH
52626: LD_INT 4
52628: PPUSH
52629: CALL_OW 273
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_VAR 0 7
52642: PPUSH
52643: LD_INT 2
52645: PPUSH
52646: LD_INT 4
52648: PPUSH
52649: CALL_OW 272
52653: PUSH
52654: LD_VAR 0 8
52658: PPUSH
52659: LD_INT 2
52661: PPUSH
52662: LD_INT 4
52664: PPUSH
52665: CALL_OW 273
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_VAR 0 7
52678: PPUSH
52679: LD_INT 3
52681: PPUSH
52682: LD_INT 4
52684: PPUSH
52685: CALL_OW 272
52689: PUSH
52690: LD_VAR 0 8
52694: PPUSH
52695: LD_INT 3
52697: PPUSH
52698: LD_INT 4
52700: PPUSH
52701: CALL_OW 273
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_VAR 0 7
52714: PPUSH
52715: LD_INT 4
52717: PPUSH
52718: LD_INT 4
52720: PPUSH
52721: CALL_OW 272
52725: PUSH
52726: LD_VAR 0 8
52730: PPUSH
52731: LD_INT 4
52733: PPUSH
52734: LD_INT 4
52736: PPUSH
52737: CALL_OW 273
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_VAR 0 7
52750: PPUSH
52751: LD_INT 5
52753: PPUSH
52754: LD_INT 4
52756: PPUSH
52757: CALL_OW 272
52761: PUSH
52762: LD_VAR 0 8
52766: PPUSH
52767: LD_INT 5
52769: PPUSH
52770: LD_INT 4
52772: PPUSH
52773: CALL_OW 273
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: ST_TO_ADDR
// for i = tmp downto 1 do
52790: LD_ADDR_VAR 0 4
52794: PUSH
52795: DOUBLE
52796: LD_VAR 0 6
52800: INC
52801: ST_TO_ADDR
52802: LD_INT 1
52804: PUSH
52805: FOR_DOWNTO
52806: IFFALSE 52907
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52808: LD_VAR 0 6
52812: PUSH
52813: LD_VAR 0 4
52817: ARRAY
52818: PUSH
52819: LD_INT 1
52821: ARRAY
52822: PPUSH
52823: LD_VAR 0 6
52827: PUSH
52828: LD_VAR 0 4
52832: ARRAY
52833: PUSH
52834: LD_INT 2
52836: ARRAY
52837: PPUSH
52838: CALL_OW 488
52842: NOT
52843: PUSH
52844: LD_VAR 0 6
52848: PUSH
52849: LD_VAR 0 4
52853: ARRAY
52854: PUSH
52855: LD_INT 1
52857: ARRAY
52858: PPUSH
52859: LD_VAR 0 6
52863: PUSH
52864: LD_VAR 0 4
52868: ARRAY
52869: PUSH
52870: LD_INT 2
52872: ARRAY
52873: PPUSH
52874: CALL_OW 428
52878: PUSH
52879: LD_INT 0
52881: NONEQUAL
52882: OR
52883: IFFALSE 52905
// tmp := Delete ( tmp , i ) ;
52885: LD_ADDR_VAR 0 6
52889: PUSH
52890: LD_VAR 0 6
52894: PPUSH
52895: LD_VAR 0 4
52899: PPUSH
52900: CALL_OW 3
52904: ST_TO_ADDR
52905: GO 52805
52907: POP
52908: POP
// j := GetClosestHex ( unit , tmp ) ;
52909: LD_ADDR_VAR 0 5
52913: PUSH
52914: LD_VAR 0 1
52918: PPUSH
52919: LD_VAR 0 6
52923: PPUSH
52924: CALL 52200 0 2
52928: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52929: LD_VAR 0 1
52933: PPUSH
52934: LD_VAR 0 5
52938: PUSH
52939: LD_INT 1
52941: ARRAY
52942: PPUSH
52943: LD_VAR 0 5
52947: PUSH
52948: LD_INT 2
52950: ARRAY
52951: PPUSH
52952: CALL_OW 111
// end ;
52956: LD_VAR 0 3
52960: RET
// export function PrepareApemanSoldier ( ) ; begin
52961: LD_INT 0
52963: PPUSH
// uc_nation := 0 ;
52964: LD_ADDR_OWVAR 21
52968: PUSH
52969: LD_INT 0
52971: ST_TO_ADDR
// hc_sex := sex_male ;
52972: LD_ADDR_OWVAR 27
52976: PUSH
52977: LD_INT 1
52979: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
52980: LD_ADDR_OWVAR 28
52984: PUSH
52985: LD_INT 15
52987: ST_TO_ADDR
// hc_gallery :=  ;
52988: LD_ADDR_OWVAR 33
52992: PUSH
52993: LD_STRING 
52995: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
52996: LD_ADDR_OWVAR 31
53000: PUSH
53001: LD_INT 0
53003: PPUSH
53004: LD_INT 3
53006: PPUSH
53007: CALL_OW 12
53011: PUSH
53012: LD_INT 0
53014: PPUSH
53015: LD_INT 3
53017: PPUSH
53018: CALL_OW 12
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: ST_TO_ADDR
// end ;
53035: LD_VAR 0 1
53039: RET
// export function PrepareApemanEngineer ( ) ; begin
53040: LD_INT 0
53042: PPUSH
// uc_nation := 0 ;
53043: LD_ADDR_OWVAR 21
53047: PUSH
53048: LD_INT 0
53050: ST_TO_ADDR
// hc_sex := sex_male ;
53051: LD_ADDR_OWVAR 27
53055: PUSH
53056: LD_INT 1
53058: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53059: LD_ADDR_OWVAR 28
53063: PUSH
53064: LD_INT 16
53066: ST_TO_ADDR
// hc_gallery :=  ;
53067: LD_ADDR_OWVAR 33
53071: PUSH
53072: LD_STRING 
53074: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53075: LD_ADDR_OWVAR 31
53079: PUSH
53080: LD_INT 0
53082: PPUSH
53083: LD_INT 3
53085: PPUSH
53086: CALL_OW 12
53090: PUSH
53091: LD_INT 0
53093: PPUSH
53094: LD_INT 3
53096: PPUSH
53097: CALL_OW 12
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: ST_TO_ADDR
// end ;
53114: LD_VAR 0 1
53118: RET
// export function PrepareApeman ( agressivity ) ; begin
53119: LD_INT 0
53121: PPUSH
// uc_side := 0 ;
53122: LD_ADDR_OWVAR 20
53126: PUSH
53127: LD_INT 0
53129: ST_TO_ADDR
// uc_nation := 0 ;
53130: LD_ADDR_OWVAR 21
53134: PUSH
53135: LD_INT 0
53137: ST_TO_ADDR
// hc_sex := sex_male ;
53138: LD_ADDR_OWVAR 27
53142: PUSH
53143: LD_INT 1
53145: ST_TO_ADDR
// hc_class := class_apeman ;
53146: LD_ADDR_OWVAR 28
53150: PUSH
53151: LD_INT 12
53153: ST_TO_ADDR
// hc_gallery :=  ;
53154: LD_ADDR_OWVAR 33
53158: PUSH
53159: LD_STRING 
53161: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53162: LD_ADDR_OWVAR 35
53166: PUSH
53167: LD_VAR 0 1
53171: NEG
53172: PPUSH
53173: LD_VAR 0 1
53177: PPUSH
53178: CALL_OW 12
53182: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53183: LD_ADDR_OWVAR 31
53187: PUSH
53188: LD_INT 0
53190: PPUSH
53191: LD_INT 3
53193: PPUSH
53194: CALL_OW 12
53198: PUSH
53199: LD_INT 0
53201: PPUSH
53202: LD_INT 3
53204: PPUSH
53205: CALL_OW 12
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
// end ;
53222: LD_VAR 0 2
53226: RET
// export function PrepareTiger ( agressivity ) ; begin
53227: LD_INT 0
53229: PPUSH
// uc_side := 0 ;
53230: LD_ADDR_OWVAR 20
53234: PUSH
53235: LD_INT 0
53237: ST_TO_ADDR
// uc_nation := 0 ;
53238: LD_ADDR_OWVAR 21
53242: PUSH
53243: LD_INT 0
53245: ST_TO_ADDR
// hc_class := class_tiger ;
53246: LD_ADDR_OWVAR 28
53250: PUSH
53251: LD_INT 14
53253: ST_TO_ADDR
// hc_gallery :=  ;
53254: LD_ADDR_OWVAR 33
53258: PUSH
53259: LD_STRING 
53261: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53262: LD_ADDR_OWVAR 35
53266: PUSH
53267: LD_VAR 0 1
53271: NEG
53272: PPUSH
53273: LD_VAR 0 1
53277: PPUSH
53278: CALL_OW 12
53282: ST_TO_ADDR
// end ;
53283: LD_VAR 0 2
53287: RET
// export function PrepareEnchidna ( ) ; begin
53288: LD_INT 0
53290: PPUSH
// uc_side := 0 ;
53291: LD_ADDR_OWVAR 20
53295: PUSH
53296: LD_INT 0
53298: ST_TO_ADDR
// uc_nation := 0 ;
53299: LD_ADDR_OWVAR 21
53303: PUSH
53304: LD_INT 0
53306: ST_TO_ADDR
// hc_class := class_baggie ;
53307: LD_ADDR_OWVAR 28
53311: PUSH
53312: LD_INT 13
53314: ST_TO_ADDR
// hc_gallery :=  ;
53315: LD_ADDR_OWVAR 33
53319: PUSH
53320: LD_STRING 
53322: ST_TO_ADDR
// end ;
53323: LD_VAR 0 1
53327: RET
// export function PrepareFrog ( ) ; begin
53328: LD_INT 0
53330: PPUSH
// uc_side := 0 ;
53331: LD_ADDR_OWVAR 20
53335: PUSH
53336: LD_INT 0
53338: ST_TO_ADDR
// uc_nation := 0 ;
53339: LD_ADDR_OWVAR 21
53343: PUSH
53344: LD_INT 0
53346: ST_TO_ADDR
// hc_class := class_frog ;
53347: LD_ADDR_OWVAR 28
53351: PUSH
53352: LD_INT 19
53354: ST_TO_ADDR
// hc_gallery :=  ;
53355: LD_ADDR_OWVAR 33
53359: PUSH
53360: LD_STRING 
53362: ST_TO_ADDR
// end ;
53363: LD_VAR 0 1
53367: RET
// export function PrepareFish ( ) ; begin
53368: LD_INT 0
53370: PPUSH
// uc_side := 0 ;
53371: LD_ADDR_OWVAR 20
53375: PUSH
53376: LD_INT 0
53378: ST_TO_ADDR
// uc_nation := 0 ;
53379: LD_ADDR_OWVAR 21
53383: PUSH
53384: LD_INT 0
53386: ST_TO_ADDR
// hc_class := class_fish ;
53387: LD_ADDR_OWVAR 28
53391: PUSH
53392: LD_INT 20
53394: ST_TO_ADDR
// hc_gallery :=  ;
53395: LD_ADDR_OWVAR 33
53399: PUSH
53400: LD_STRING 
53402: ST_TO_ADDR
// end ;
53403: LD_VAR 0 1
53407: RET
// export function PrepareBird ( ) ; begin
53408: LD_INT 0
53410: PPUSH
// uc_side := 0 ;
53411: LD_ADDR_OWVAR 20
53415: PUSH
53416: LD_INT 0
53418: ST_TO_ADDR
// uc_nation := 0 ;
53419: LD_ADDR_OWVAR 21
53423: PUSH
53424: LD_INT 0
53426: ST_TO_ADDR
// hc_class := class_phororhacos ;
53427: LD_ADDR_OWVAR 28
53431: PUSH
53432: LD_INT 18
53434: ST_TO_ADDR
// hc_gallery :=  ;
53435: LD_ADDR_OWVAR 33
53439: PUSH
53440: LD_STRING 
53442: ST_TO_ADDR
// end ;
53443: LD_VAR 0 1
53447: RET
// export function PrepareHorse ( ) ; begin
53448: LD_INT 0
53450: PPUSH
// uc_side := 0 ;
53451: LD_ADDR_OWVAR 20
53455: PUSH
53456: LD_INT 0
53458: ST_TO_ADDR
// uc_nation := 0 ;
53459: LD_ADDR_OWVAR 21
53463: PUSH
53464: LD_INT 0
53466: ST_TO_ADDR
// hc_class := class_horse ;
53467: LD_ADDR_OWVAR 28
53471: PUSH
53472: LD_INT 21
53474: ST_TO_ADDR
// hc_gallery :=  ;
53475: LD_ADDR_OWVAR 33
53479: PUSH
53480: LD_STRING 
53482: ST_TO_ADDR
// end ;
53483: LD_VAR 0 1
53487: RET
// export function PrepareMastodont ( ) ; begin
53488: LD_INT 0
53490: PPUSH
// uc_side := 0 ;
53491: LD_ADDR_OWVAR 20
53495: PUSH
53496: LD_INT 0
53498: ST_TO_ADDR
// uc_nation := 0 ;
53499: LD_ADDR_OWVAR 21
53503: PUSH
53504: LD_INT 0
53506: ST_TO_ADDR
// vc_chassis := class_mastodont ;
53507: LD_ADDR_OWVAR 37
53511: PUSH
53512: LD_INT 31
53514: ST_TO_ADDR
// vc_control := control_rider ;
53515: LD_ADDR_OWVAR 38
53519: PUSH
53520: LD_INT 4
53522: ST_TO_ADDR
// end ;
53523: LD_VAR 0 1
53527: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53528: LD_INT 0
53530: PPUSH
53531: PPUSH
53532: PPUSH
// uc_side = 0 ;
53533: LD_ADDR_OWVAR 20
53537: PUSH
53538: LD_INT 0
53540: ST_TO_ADDR
// uc_nation = 0 ;
53541: LD_ADDR_OWVAR 21
53545: PUSH
53546: LD_INT 0
53548: ST_TO_ADDR
// InitHc_All ( ) ;
53549: CALL_OW 584
// InitVc ;
53553: CALL_OW 20
// if mastodonts then
53557: LD_VAR 0 6
53561: IFFALSE 53628
// for i = 1 to mastodonts do
53563: LD_ADDR_VAR 0 11
53567: PUSH
53568: DOUBLE
53569: LD_INT 1
53571: DEC
53572: ST_TO_ADDR
53573: LD_VAR 0 6
53577: PUSH
53578: FOR_TO
53579: IFFALSE 53626
// begin vc_chassis := 31 ;
53581: LD_ADDR_OWVAR 37
53585: PUSH
53586: LD_INT 31
53588: ST_TO_ADDR
// vc_control := control_rider ;
53589: LD_ADDR_OWVAR 38
53593: PUSH
53594: LD_INT 4
53596: ST_TO_ADDR
// animal := CreateVehicle ;
53597: LD_ADDR_VAR 0 12
53601: PUSH
53602: CALL_OW 45
53606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53607: LD_VAR 0 12
53611: PPUSH
53612: LD_VAR 0 8
53616: PPUSH
53617: LD_INT 0
53619: PPUSH
53620: CALL 55756 0 3
// end ;
53624: GO 53578
53626: POP
53627: POP
// if horses then
53628: LD_VAR 0 5
53632: IFFALSE 53699
// for i = 1 to horses do
53634: LD_ADDR_VAR 0 11
53638: PUSH
53639: DOUBLE
53640: LD_INT 1
53642: DEC
53643: ST_TO_ADDR
53644: LD_VAR 0 5
53648: PUSH
53649: FOR_TO
53650: IFFALSE 53697
// begin hc_class := 21 ;
53652: LD_ADDR_OWVAR 28
53656: PUSH
53657: LD_INT 21
53659: ST_TO_ADDR
// hc_gallery :=  ;
53660: LD_ADDR_OWVAR 33
53664: PUSH
53665: LD_STRING 
53667: ST_TO_ADDR
// animal := CreateHuman ;
53668: LD_ADDR_VAR 0 12
53672: PUSH
53673: CALL_OW 44
53677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53678: LD_VAR 0 12
53682: PPUSH
53683: LD_VAR 0 8
53687: PPUSH
53688: LD_INT 0
53690: PPUSH
53691: CALL 55756 0 3
// end ;
53695: GO 53649
53697: POP
53698: POP
// if birds then
53699: LD_VAR 0 1
53703: IFFALSE 53770
// for i = 1 to birds do
53705: LD_ADDR_VAR 0 11
53709: PUSH
53710: DOUBLE
53711: LD_INT 1
53713: DEC
53714: ST_TO_ADDR
53715: LD_VAR 0 1
53719: PUSH
53720: FOR_TO
53721: IFFALSE 53768
// begin hc_class := 18 ;
53723: LD_ADDR_OWVAR 28
53727: PUSH
53728: LD_INT 18
53730: ST_TO_ADDR
// hc_gallery =  ;
53731: LD_ADDR_OWVAR 33
53735: PUSH
53736: LD_STRING 
53738: ST_TO_ADDR
// animal := CreateHuman ;
53739: LD_ADDR_VAR 0 12
53743: PUSH
53744: CALL_OW 44
53748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53749: LD_VAR 0 12
53753: PPUSH
53754: LD_VAR 0 8
53758: PPUSH
53759: LD_INT 0
53761: PPUSH
53762: CALL 55756 0 3
// end ;
53766: GO 53720
53768: POP
53769: POP
// if tigers then
53770: LD_VAR 0 2
53774: IFFALSE 53858
// for i = 1 to tigers do
53776: LD_ADDR_VAR 0 11
53780: PUSH
53781: DOUBLE
53782: LD_INT 1
53784: DEC
53785: ST_TO_ADDR
53786: LD_VAR 0 2
53790: PUSH
53791: FOR_TO
53792: IFFALSE 53856
// begin hc_class = class_tiger ;
53794: LD_ADDR_OWVAR 28
53798: PUSH
53799: LD_INT 14
53801: ST_TO_ADDR
// hc_gallery =  ;
53802: LD_ADDR_OWVAR 33
53806: PUSH
53807: LD_STRING 
53809: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53810: LD_ADDR_OWVAR 35
53814: PUSH
53815: LD_INT 7
53817: NEG
53818: PPUSH
53819: LD_INT 7
53821: PPUSH
53822: CALL_OW 12
53826: ST_TO_ADDR
// animal := CreateHuman ;
53827: LD_ADDR_VAR 0 12
53831: PUSH
53832: CALL_OW 44
53836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53837: LD_VAR 0 12
53841: PPUSH
53842: LD_VAR 0 8
53846: PPUSH
53847: LD_INT 0
53849: PPUSH
53850: CALL 55756 0 3
// end ;
53854: GO 53791
53856: POP
53857: POP
// if apemans then
53858: LD_VAR 0 3
53862: IFFALSE 53985
// for i = 1 to apemans do
53864: LD_ADDR_VAR 0 11
53868: PUSH
53869: DOUBLE
53870: LD_INT 1
53872: DEC
53873: ST_TO_ADDR
53874: LD_VAR 0 3
53878: PUSH
53879: FOR_TO
53880: IFFALSE 53983
// begin hc_class = class_apeman ;
53882: LD_ADDR_OWVAR 28
53886: PUSH
53887: LD_INT 12
53889: ST_TO_ADDR
// hc_gallery =  ;
53890: LD_ADDR_OWVAR 33
53894: PUSH
53895: LD_STRING 
53897: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53898: LD_ADDR_OWVAR 35
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PPUSH
53907: LD_INT 2
53909: PPUSH
53910: CALL_OW 12
53914: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53915: LD_ADDR_OWVAR 31
53919: PUSH
53920: LD_INT 1
53922: PPUSH
53923: LD_INT 3
53925: PPUSH
53926: CALL_OW 12
53930: PUSH
53931: LD_INT 1
53933: PPUSH
53934: LD_INT 3
53936: PPUSH
53937: CALL_OW 12
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: ST_TO_ADDR
// animal := CreateHuman ;
53954: LD_ADDR_VAR 0 12
53958: PUSH
53959: CALL_OW 44
53963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53964: LD_VAR 0 12
53968: PPUSH
53969: LD_VAR 0 8
53973: PPUSH
53974: LD_INT 0
53976: PPUSH
53977: CALL 55756 0 3
// end ;
53981: GO 53879
53983: POP
53984: POP
// if enchidnas then
53985: LD_VAR 0 4
53989: IFFALSE 54056
// for i = 1 to enchidnas do
53991: LD_ADDR_VAR 0 11
53995: PUSH
53996: DOUBLE
53997: LD_INT 1
53999: DEC
54000: ST_TO_ADDR
54001: LD_VAR 0 4
54005: PUSH
54006: FOR_TO
54007: IFFALSE 54054
// begin hc_class = 13 ;
54009: LD_ADDR_OWVAR 28
54013: PUSH
54014: LD_INT 13
54016: ST_TO_ADDR
// hc_gallery =  ;
54017: LD_ADDR_OWVAR 33
54021: PUSH
54022: LD_STRING 
54024: ST_TO_ADDR
// animal := CreateHuman ;
54025: LD_ADDR_VAR 0 12
54029: PUSH
54030: CALL_OW 44
54034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54035: LD_VAR 0 12
54039: PPUSH
54040: LD_VAR 0 8
54044: PPUSH
54045: LD_INT 0
54047: PPUSH
54048: CALL 55756 0 3
// end ;
54052: GO 54006
54054: POP
54055: POP
// if fishes then
54056: LD_VAR 0 7
54060: IFFALSE 54127
// for i = 1 to fishes do
54062: LD_ADDR_VAR 0 11
54066: PUSH
54067: DOUBLE
54068: LD_INT 1
54070: DEC
54071: ST_TO_ADDR
54072: LD_VAR 0 7
54076: PUSH
54077: FOR_TO
54078: IFFALSE 54125
// begin hc_class = 20 ;
54080: LD_ADDR_OWVAR 28
54084: PUSH
54085: LD_INT 20
54087: ST_TO_ADDR
// hc_gallery =  ;
54088: LD_ADDR_OWVAR 33
54092: PUSH
54093: LD_STRING 
54095: ST_TO_ADDR
// animal := CreateHuman ;
54096: LD_ADDR_VAR 0 12
54100: PUSH
54101: CALL_OW 44
54105: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54106: LD_VAR 0 12
54110: PPUSH
54111: LD_VAR 0 9
54115: PPUSH
54116: LD_INT 0
54118: PPUSH
54119: CALL 55756 0 3
// end ;
54123: GO 54077
54125: POP
54126: POP
// end ;
54127: LD_VAR 0 10
54131: RET
// export function WantHeal ( sci , unit ) ; begin
54132: LD_INT 0
54134: PPUSH
// if GetTaskList ( sci ) > 0 then
54135: LD_VAR 0 1
54139: PPUSH
54140: CALL_OW 437
54144: PUSH
54145: LD_INT 0
54147: GREATER
54148: IFFALSE 54218
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54150: LD_VAR 0 1
54154: PPUSH
54155: CALL_OW 437
54159: PUSH
54160: LD_INT 1
54162: ARRAY
54163: PUSH
54164: LD_INT 1
54166: ARRAY
54167: PUSH
54168: LD_STRING l
54170: EQUAL
54171: PUSH
54172: LD_VAR 0 1
54176: PPUSH
54177: CALL_OW 437
54181: PUSH
54182: LD_INT 1
54184: ARRAY
54185: PUSH
54186: LD_INT 4
54188: ARRAY
54189: PUSH
54190: LD_VAR 0 2
54194: EQUAL
54195: AND
54196: IFFALSE 54208
// result := true else
54198: LD_ADDR_VAR 0 3
54202: PUSH
54203: LD_INT 1
54205: ST_TO_ADDR
54206: GO 54216
// result := false ;
54208: LD_ADDR_VAR 0 3
54212: PUSH
54213: LD_INT 0
54215: ST_TO_ADDR
// end else
54216: GO 54226
// result := false ;
54218: LD_ADDR_VAR 0 3
54222: PUSH
54223: LD_INT 0
54225: ST_TO_ADDR
// end ;
54226: LD_VAR 0 3
54230: RET
// export function HealTarget ( sci ) ; begin
54231: LD_INT 0
54233: PPUSH
// if not sci then
54234: LD_VAR 0 1
54238: NOT
54239: IFFALSE 54243
// exit ;
54241: GO 54308
// result := 0 ;
54243: LD_ADDR_VAR 0 2
54247: PUSH
54248: LD_INT 0
54250: ST_TO_ADDR
// if GetTaskList ( sci ) then
54251: LD_VAR 0 1
54255: PPUSH
54256: CALL_OW 437
54260: IFFALSE 54308
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54262: LD_VAR 0 1
54266: PPUSH
54267: CALL_OW 437
54271: PUSH
54272: LD_INT 1
54274: ARRAY
54275: PUSH
54276: LD_INT 1
54278: ARRAY
54279: PUSH
54280: LD_STRING l
54282: EQUAL
54283: IFFALSE 54308
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54285: LD_ADDR_VAR 0 2
54289: PUSH
54290: LD_VAR 0 1
54294: PPUSH
54295: CALL_OW 437
54299: PUSH
54300: LD_INT 1
54302: ARRAY
54303: PUSH
54304: LD_INT 4
54306: ARRAY
54307: ST_TO_ADDR
// end ;
54308: LD_VAR 0 2
54312: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54313: LD_INT 0
54315: PPUSH
54316: PPUSH
54317: PPUSH
54318: PPUSH
// if not base_units then
54319: LD_VAR 0 1
54323: NOT
54324: IFFALSE 54328
// exit ;
54326: GO 54415
// result := false ;
54328: LD_ADDR_VAR 0 2
54332: PUSH
54333: LD_INT 0
54335: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54336: LD_ADDR_VAR 0 5
54340: PUSH
54341: LD_VAR 0 1
54345: PPUSH
54346: LD_INT 21
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PPUSH
54356: CALL_OW 72
54360: ST_TO_ADDR
// if not tmp then
54361: LD_VAR 0 5
54365: NOT
54366: IFFALSE 54370
// exit ;
54368: GO 54415
// for i in tmp do
54370: LD_ADDR_VAR 0 3
54374: PUSH
54375: LD_VAR 0 5
54379: PUSH
54380: FOR_IN
54381: IFFALSE 54413
// begin result := EnemyInRange ( i , 22 ) ;
54383: LD_ADDR_VAR 0 2
54387: PUSH
54388: LD_VAR 0 3
54392: PPUSH
54393: LD_INT 22
54395: PPUSH
54396: CALL 52002 0 2
54400: ST_TO_ADDR
// if result then
54401: LD_VAR 0 2
54405: IFFALSE 54411
// exit ;
54407: POP
54408: POP
54409: GO 54415
// end ;
54411: GO 54380
54413: POP
54414: POP
// end ;
54415: LD_VAR 0 2
54419: RET
// export function FilterByTag ( units , tag ) ; begin
54420: LD_INT 0
54422: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
54423: LD_ADDR_VAR 0 3
54427: PUSH
54428: LD_VAR 0 1
54432: PPUSH
54433: LD_INT 120
54435: PUSH
54436: LD_VAR 0 2
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PPUSH
54445: CALL_OW 72
54449: ST_TO_ADDR
// end ;
54450: LD_VAR 0 3
54454: RET
// export function IsDriver ( un ) ; begin
54455: LD_INT 0
54457: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54458: LD_ADDR_VAR 0 2
54462: PUSH
54463: LD_VAR 0 1
54467: PUSH
54468: LD_INT 55
54470: PUSH
54471: EMPTY
54472: LIST
54473: PPUSH
54474: CALL_OW 69
54478: IN
54479: ST_TO_ADDR
// end ;
54480: LD_VAR 0 2
54484: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54485: LD_INT 0
54487: PPUSH
54488: PPUSH
// list := [ ] ;
54489: LD_ADDR_VAR 0 5
54493: PUSH
54494: EMPTY
54495: ST_TO_ADDR
// case d of 0 :
54496: LD_VAR 0 3
54500: PUSH
54501: LD_INT 0
54503: DOUBLE
54504: EQUAL
54505: IFTRUE 54509
54507: GO 54642
54509: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54510: LD_ADDR_VAR 0 5
54514: PUSH
54515: LD_VAR 0 1
54519: PUSH
54520: LD_INT 4
54522: MINUS
54523: PUSH
54524: LD_VAR 0 2
54528: PUSH
54529: LD_INT 4
54531: MINUS
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: PUSH
54541: LD_VAR 0 1
54545: PUSH
54546: LD_INT 3
54548: MINUS
54549: PUSH
54550: LD_VAR 0 2
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: PUSH
54563: LD_VAR 0 1
54567: PUSH
54568: LD_INT 4
54570: PLUS
54571: PUSH
54572: LD_VAR 0 2
54576: PUSH
54577: LD_INT 4
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: PUSH
54585: LD_VAR 0 1
54589: PUSH
54590: LD_INT 3
54592: PLUS
54593: PUSH
54594: LD_VAR 0 2
54598: PUSH
54599: LD_INT 3
54601: PLUS
54602: PUSH
54603: LD_INT 5
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: PUSH
54611: LD_VAR 0 1
54615: PUSH
54616: LD_VAR 0 2
54620: PUSH
54621: LD_INT 4
54623: PLUS
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// end ; 1 :
54640: GO 55340
54642: LD_INT 1
54644: DOUBLE
54645: EQUAL
54646: IFTRUE 54650
54648: GO 54783
54650: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54651: LD_ADDR_VAR 0 5
54655: PUSH
54656: LD_VAR 0 1
54660: PUSH
54661: LD_VAR 0 2
54665: PUSH
54666: LD_INT 4
54668: MINUS
54669: PUSH
54670: LD_INT 3
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: PUSH
54678: LD_VAR 0 1
54682: PUSH
54683: LD_INT 3
54685: MINUS
54686: PUSH
54687: LD_VAR 0 2
54691: PUSH
54692: LD_INT 3
54694: MINUS
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: PUSH
54704: LD_VAR 0 1
54708: PUSH
54709: LD_INT 4
54711: MINUS
54712: PUSH
54713: LD_VAR 0 2
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: LIST
54725: PUSH
54726: LD_VAR 0 1
54730: PUSH
54731: LD_VAR 0 2
54735: PUSH
54736: LD_INT 3
54738: PLUS
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: LIST
54747: PUSH
54748: LD_VAR 0 1
54752: PUSH
54753: LD_INT 4
54755: PLUS
54756: PUSH
54757: LD_VAR 0 2
54761: PUSH
54762: LD_INT 4
54764: PLUS
54765: PUSH
54766: LD_INT 5
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// end ; 2 :
54781: GO 55340
54783: LD_INT 2
54785: DOUBLE
54786: EQUAL
54787: IFTRUE 54791
54789: GO 54920
54791: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54792: LD_ADDR_VAR 0 5
54796: PUSH
54797: LD_VAR 0 1
54801: PUSH
54802: LD_VAR 0 2
54806: PUSH
54807: LD_INT 3
54809: MINUS
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: PUSH
54819: LD_VAR 0 1
54823: PUSH
54824: LD_INT 4
54826: PLUS
54827: PUSH
54828: LD_VAR 0 2
54832: PUSH
54833: LD_INT 4
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: LIST
54840: PUSH
54841: LD_VAR 0 1
54845: PUSH
54846: LD_VAR 0 2
54850: PUSH
54851: LD_INT 4
54853: PLUS
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: PUSH
54863: LD_VAR 0 1
54867: PUSH
54868: LD_INT 3
54870: MINUS
54871: PUSH
54872: LD_VAR 0 2
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: PUSH
54885: LD_VAR 0 1
54889: PUSH
54890: LD_INT 4
54892: MINUS
54893: PUSH
54894: LD_VAR 0 2
54898: PUSH
54899: LD_INT 4
54901: MINUS
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: ST_TO_ADDR
// end ; 3 :
54918: GO 55340
54920: LD_INT 3
54922: DOUBLE
54923: EQUAL
54924: IFTRUE 54928
54926: GO 55061
54928: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54929: LD_ADDR_VAR 0 5
54933: PUSH
54934: LD_VAR 0 1
54938: PUSH
54939: LD_INT 3
54941: PLUS
54942: PUSH
54943: LD_VAR 0 2
54947: PUSH
54948: LD_INT 4
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: PUSH
54956: LD_VAR 0 1
54960: PUSH
54961: LD_INT 4
54963: PLUS
54964: PUSH
54965: LD_VAR 0 2
54969: PUSH
54970: LD_INT 4
54972: PLUS
54973: PUSH
54974: LD_INT 5
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: PUSH
54982: LD_VAR 0 1
54986: PUSH
54987: LD_INT 4
54989: MINUS
54990: PUSH
54991: LD_VAR 0 2
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: LIST
55003: PUSH
55004: LD_VAR 0 1
55008: PUSH
55009: LD_VAR 0 2
55013: PUSH
55014: LD_INT 4
55016: MINUS
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: PUSH
55026: LD_VAR 0 1
55030: PUSH
55031: LD_INT 3
55033: MINUS
55034: PUSH
55035: LD_VAR 0 2
55039: PUSH
55040: LD_INT 3
55042: MINUS
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// end ; 4 :
55059: GO 55340
55061: LD_INT 4
55063: DOUBLE
55064: EQUAL
55065: IFTRUE 55069
55067: GO 55202
55069: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55070: LD_ADDR_VAR 0 5
55074: PUSH
55075: LD_VAR 0 1
55079: PUSH
55080: LD_VAR 0 2
55084: PUSH
55085: LD_INT 4
55087: PLUS
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: LIST
55096: PUSH
55097: LD_VAR 0 1
55101: PUSH
55102: LD_INT 3
55104: PLUS
55105: PUSH
55106: LD_VAR 0 2
55110: PUSH
55111: LD_INT 3
55113: PLUS
55114: PUSH
55115: LD_INT 5
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: PUSH
55123: LD_VAR 0 1
55127: PUSH
55128: LD_INT 4
55130: PLUS
55131: PUSH
55132: LD_VAR 0 2
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: LIST
55144: PUSH
55145: LD_VAR 0 1
55149: PUSH
55150: LD_VAR 0 2
55154: PUSH
55155: LD_INT 3
55157: MINUS
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: PUSH
55167: LD_VAR 0 1
55171: PUSH
55172: LD_INT 4
55174: MINUS
55175: PUSH
55176: LD_VAR 0 2
55180: PUSH
55181: LD_INT 4
55183: MINUS
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: ST_TO_ADDR
// end ; 5 :
55200: GO 55340
55202: LD_INT 5
55204: DOUBLE
55205: EQUAL
55206: IFTRUE 55210
55208: GO 55339
55210: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55211: LD_ADDR_VAR 0 5
55215: PUSH
55216: LD_VAR 0 1
55220: PUSH
55221: LD_INT 4
55223: MINUS
55224: PUSH
55225: LD_VAR 0 2
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: PUSH
55238: LD_VAR 0 1
55242: PUSH
55243: LD_VAR 0 2
55247: PUSH
55248: LD_INT 4
55250: MINUS
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: LIST
55259: PUSH
55260: LD_VAR 0 1
55264: PUSH
55265: LD_INT 4
55267: PLUS
55268: PUSH
55269: LD_VAR 0 2
55273: PUSH
55274: LD_INT 4
55276: PLUS
55277: PUSH
55278: LD_INT 5
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: PUSH
55286: LD_VAR 0 1
55290: PUSH
55291: LD_INT 3
55293: PLUS
55294: PUSH
55295: LD_VAR 0 2
55299: PUSH
55300: LD_INT 4
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: PUSH
55308: LD_VAR 0 1
55312: PUSH
55313: LD_VAR 0 2
55317: PUSH
55318: LD_INT 3
55320: PLUS
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// end ; end ;
55337: GO 55340
55339: POP
// result := list ;
55340: LD_ADDR_VAR 0 4
55344: PUSH
55345: LD_VAR 0 5
55349: ST_TO_ADDR
// end ;
55350: LD_VAR 0 4
55354: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55355: LD_INT 0
55357: PPUSH
55358: PPUSH
55359: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55360: LD_VAR 0 1
55364: NOT
55365: PUSH
55366: LD_VAR 0 2
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 4
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: IN
55389: NOT
55390: OR
55391: IFFALSE 55395
// exit ;
55393: GO 55478
// tmp := [ ] ;
55395: LD_ADDR_VAR 0 5
55399: PUSH
55400: EMPTY
55401: ST_TO_ADDR
// for i in units do
55402: LD_ADDR_VAR 0 4
55406: PUSH
55407: LD_VAR 0 1
55411: PUSH
55412: FOR_IN
55413: IFFALSE 55447
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
55415: LD_ADDR_VAR 0 5
55419: PUSH
55420: LD_VAR 0 5
55424: PPUSH
55425: LD_VAR 0 4
55429: PPUSH
55430: LD_VAR 0 2
55434: PPUSH
55435: CALL_OW 259
55439: PPUSH
55440: CALL 56838 0 2
55444: ST_TO_ADDR
55445: GO 55412
55447: POP
55448: POP
// if not tmp then
55449: LD_VAR 0 5
55453: NOT
55454: IFFALSE 55458
// exit ;
55456: GO 55478
// result := SortListByListDesc ( units , tmp ) ;
55458: LD_ADDR_VAR 0 3
55462: PUSH
55463: LD_VAR 0 1
55467: PPUSH
55468: LD_VAR 0 5
55472: PPUSH
55473: CALL_OW 77
55477: ST_TO_ADDR
// end ;
55478: LD_VAR 0 3
55482: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55483: LD_INT 0
55485: PPUSH
55486: PPUSH
55487: PPUSH
// result := false ;
55488: LD_ADDR_VAR 0 3
55492: PUSH
55493: LD_INT 0
55495: ST_TO_ADDR
// if not building then
55496: LD_VAR 0 2
55500: NOT
55501: IFFALSE 55505
// exit ;
55503: GO 55643
// x := GetX ( building ) ;
55505: LD_ADDR_VAR 0 4
55509: PUSH
55510: LD_VAR 0 2
55514: PPUSH
55515: CALL_OW 250
55519: ST_TO_ADDR
// y := GetY ( building ) ;
55520: LD_ADDR_VAR 0 5
55524: PUSH
55525: LD_VAR 0 2
55529: PPUSH
55530: CALL_OW 251
55534: ST_TO_ADDR
// if not x or not y then
55535: LD_VAR 0 4
55539: NOT
55540: PUSH
55541: LD_VAR 0 5
55545: NOT
55546: OR
55547: IFFALSE 55551
// exit ;
55549: GO 55643
// if GetTaskList ( unit ) then
55551: LD_VAR 0 1
55555: PPUSH
55556: CALL_OW 437
55560: IFFALSE 55643
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55562: LD_STRING e
55564: PUSH
55565: LD_VAR 0 1
55569: PPUSH
55570: CALL_OW 437
55574: PUSH
55575: LD_INT 1
55577: ARRAY
55578: PUSH
55579: LD_INT 1
55581: ARRAY
55582: EQUAL
55583: PUSH
55584: LD_VAR 0 4
55588: PUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: CALL_OW 437
55598: PUSH
55599: LD_INT 1
55601: ARRAY
55602: PUSH
55603: LD_INT 2
55605: ARRAY
55606: EQUAL
55607: AND
55608: PUSH
55609: LD_VAR 0 5
55613: PUSH
55614: LD_VAR 0 1
55618: PPUSH
55619: CALL_OW 437
55623: PUSH
55624: LD_INT 1
55626: ARRAY
55627: PUSH
55628: LD_INT 3
55630: ARRAY
55631: EQUAL
55632: AND
55633: IFFALSE 55643
// result := true end ;
55635: LD_ADDR_VAR 0 3
55639: PUSH
55640: LD_INT 1
55642: ST_TO_ADDR
// end ;
55643: LD_VAR 0 3
55647: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55648: LD_INT 0
55650: PPUSH
// result := false ;
55651: LD_ADDR_VAR 0 4
55655: PUSH
55656: LD_INT 0
55658: ST_TO_ADDR
// if GetTaskList ( unit ) then
55659: LD_VAR 0 1
55663: PPUSH
55664: CALL_OW 437
55668: IFFALSE 55751
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55670: LD_STRING M
55672: PUSH
55673: LD_VAR 0 1
55677: PPUSH
55678: CALL_OW 437
55682: PUSH
55683: LD_INT 1
55685: ARRAY
55686: PUSH
55687: LD_INT 1
55689: ARRAY
55690: EQUAL
55691: PUSH
55692: LD_VAR 0 2
55696: PUSH
55697: LD_VAR 0 1
55701: PPUSH
55702: CALL_OW 437
55706: PUSH
55707: LD_INT 1
55709: ARRAY
55710: PUSH
55711: LD_INT 2
55713: ARRAY
55714: EQUAL
55715: AND
55716: PUSH
55717: LD_VAR 0 3
55721: PUSH
55722: LD_VAR 0 1
55726: PPUSH
55727: CALL_OW 437
55731: PUSH
55732: LD_INT 1
55734: ARRAY
55735: PUSH
55736: LD_INT 3
55738: ARRAY
55739: EQUAL
55740: AND
55741: IFFALSE 55751
// result := true ;
55743: LD_ADDR_VAR 0 4
55747: PUSH
55748: LD_INT 1
55750: ST_TO_ADDR
// end ; end ;
55751: LD_VAR 0 4
55755: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55756: LD_INT 0
55758: PPUSH
55759: PPUSH
55760: PPUSH
55761: PPUSH
// if not unit or not area then
55762: LD_VAR 0 1
55766: NOT
55767: PUSH
55768: LD_VAR 0 2
55772: NOT
55773: OR
55774: IFFALSE 55778
// exit ;
55776: GO 55941
// tmp := AreaToList ( area , i ) ;
55778: LD_ADDR_VAR 0 6
55782: PUSH
55783: LD_VAR 0 2
55787: PPUSH
55788: LD_VAR 0 5
55792: PPUSH
55793: CALL_OW 517
55797: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55798: LD_ADDR_VAR 0 5
55802: PUSH
55803: DOUBLE
55804: LD_INT 1
55806: DEC
55807: ST_TO_ADDR
55808: LD_VAR 0 6
55812: PUSH
55813: LD_INT 1
55815: ARRAY
55816: PUSH
55817: FOR_TO
55818: IFFALSE 55939
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55820: LD_ADDR_VAR 0 7
55824: PUSH
55825: LD_VAR 0 6
55829: PUSH
55830: LD_INT 1
55832: ARRAY
55833: PUSH
55834: LD_VAR 0 5
55838: ARRAY
55839: PUSH
55840: LD_VAR 0 6
55844: PUSH
55845: LD_INT 2
55847: ARRAY
55848: PUSH
55849: LD_VAR 0 5
55853: ARRAY
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
55859: LD_INT 92
55861: PUSH
55862: LD_VAR 0 7
55866: PUSH
55867: LD_INT 1
55869: ARRAY
55870: PUSH
55871: LD_VAR 0 7
55875: PUSH
55876: LD_INT 2
55878: ARRAY
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: PPUSH
55889: CALL_OW 69
55893: PUSH
55894: LD_INT 0
55896: EQUAL
55897: IFFALSE 55937
// begin PlaceUnitArea ( unit , area , mode ) ;
55899: LD_VAR 0 1
55903: PPUSH
55904: LD_VAR 0 2
55908: PPUSH
55909: LD_VAR 0 3
55913: PPUSH
55914: CALL_OW 49
// result := IsPlaced ( unit ) ;
55918: LD_ADDR_VAR 0 4
55922: PUSH
55923: LD_VAR 0 1
55927: PPUSH
55928: CALL_OW 305
55932: ST_TO_ADDR
// exit ;
55933: POP
55934: POP
55935: GO 55941
// end ; end ;
55937: GO 55817
55939: POP
55940: POP
// end ;
55941: LD_VAR 0 4
55945: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55946: LD_INT 0
55948: PPUSH
55949: PPUSH
55950: PPUSH
// if not side or side > 8 then
55951: LD_VAR 0 1
55955: NOT
55956: PUSH
55957: LD_VAR 0 1
55961: PUSH
55962: LD_INT 8
55964: GREATER
55965: OR
55966: IFFALSE 55970
// exit ;
55968: GO 56157
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55970: LD_ADDR_VAR 0 4
55974: PUSH
55975: LD_INT 22
55977: PUSH
55978: LD_VAR 0 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 21
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PPUSH
56001: CALL_OW 69
56005: ST_TO_ADDR
// if not tmp then
56006: LD_VAR 0 4
56010: NOT
56011: IFFALSE 56015
// exit ;
56013: GO 56157
// enable_addtolog := true ;
56015: LD_ADDR_OWVAR 81
56019: PUSH
56020: LD_INT 1
56022: ST_TO_ADDR
// AddToLog ( [ ) ;
56023: LD_STRING [
56025: PPUSH
56026: CALL_OW 561
// for i in tmp do
56030: LD_ADDR_VAR 0 3
56034: PUSH
56035: LD_VAR 0 4
56039: PUSH
56040: FOR_IN
56041: IFFALSE 56148
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56043: LD_STRING [
56045: PUSH
56046: LD_VAR 0 3
56050: PPUSH
56051: CALL_OW 266
56055: STR
56056: PUSH
56057: LD_STRING , 
56059: STR
56060: PUSH
56061: LD_VAR 0 3
56065: PPUSH
56066: CALL_OW 250
56070: STR
56071: PUSH
56072: LD_STRING , 
56074: STR
56075: PUSH
56076: LD_VAR 0 3
56080: PPUSH
56081: CALL_OW 251
56085: STR
56086: PUSH
56087: LD_STRING , 
56089: STR
56090: PUSH
56091: LD_VAR 0 3
56095: PPUSH
56096: CALL_OW 254
56100: STR
56101: PUSH
56102: LD_STRING , 
56104: STR
56105: PUSH
56106: LD_VAR 0 3
56110: PPUSH
56111: LD_INT 1
56113: PPUSH
56114: CALL_OW 268
56118: STR
56119: PUSH
56120: LD_STRING , 
56122: STR
56123: PUSH
56124: LD_VAR 0 3
56128: PPUSH
56129: LD_INT 2
56131: PPUSH
56132: CALL_OW 268
56136: STR
56137: PUSH
56138: LD_STRING ],
56140: STR
56141: PPUSH
56142: CALL_OW 561
// end ;
56146: GO 56040
56148: POP
56149: POP
// AddToLog ( ]; ) ;
56150: LD_STRING ];
56152: PPUSH
56153: CALL_OW 561
// end ;
56157: LD_VAR 0 2
56161: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56162: LD_INT 0
56164: PPUSH
56165: PPUSH
56166: PPUSH
56167: PPUSH
56168: PPUSH
// if not area or not rate or not max then
56169: LD_VAR 0 1
56173: NOT
56174: PUSH
56175: LD_VAR 0 2
56179: NOT
56180: OR
56181: PUSH
56182: LD_VAR 0 4
56186: NOT
56187: OR
56188: IFFALSE 56192
// exit ;
56190: GO 56381
// while 1 do
56192: LD_INT 1
56194: IFFALSE 56381
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56196: LD_ADDR_VAR 0 9
56200: PUSH
56201: LD_VAR 0 1
56205: PPUSH
56206: LD_INT 1
56208: PPUSH
56209: CALL_OW 287
56213: PUSH
56214: LD_INT 10
56216: MUL
56217: ST_TO_ADDR
// r := rate / 10 ;
56218: LD_ADDR_VAR 0 7
56222: PUSH
56223: LD_VAR 0 2
56227: PUSH
56228: LD_INT 10
56230: DIVREAL
56231: ST_TO_ADDR
// time := 1 1$00 ;
56232: LD_ADDR_VAR 0 8
56236: PUSH
56237: LD_INT 2100
56239: ST_TO_ADDR
// if amount < min then
56240: LD_VAR 0 9
56244: PUSH
56245: LD_VAR 0 3
56249: LESS
56250: IFFALSE 56268
// r := r * 2 else
56252: LD_ADDR_VAR 0 7
56256: PUSH
56257: LD_VAR 0 7
56261: PUSH
56262: LD_INT 2
56264: MUL
56265: ST_TO_ADDR
56266: GO 56294
// if amount > max then
56268: LD_VAR 0 9
56272: PUSH
56273: LD_VAR 0 4
56277: GREATER
56278: IFFALSE 56294
// r := r / 2 ;
56280: LD_ADDR_VAR 0 7
56284: PUSH
56285: LD_VAR 0 7
56289: PUSH
56290: LD_INT 2
56292: DIVREAL
56293: ST_TO_ADDR
// time := time / r ;
56294: LD_ADDR_VAR 0 8
56298: PUSH
56299: LD_VAR 0 8
56303: PUSH
56304: LD_VAR 0 7
56308: DIVREAL
56309: ST_TO_ADDR
// if time < 0 then
56310: LD_VAR 0 8
56314: PUSH
56315: LD_INT 0
56317: LESS
56318: IFFALSE 56335
// time := time * - 1 ;
56320: LD_ADDR_VAR 0 8
56324: PUSH
56325: LD_VAR 0 8
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: MUL
56334: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
56335: LD_VAR 0 8
56339: PUSH
56340: LD_INT 35
56342: PPUSH
56343: LD_INT 875
56345: PPUSH
56346: CALL_OW 12
56350: PLUS
56351: PPUSH
56352: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56356: LD_INT 1
56358: PPUSH
56359: LD_INT 5
56361: PPUSH
56362: CALL_OW 12
56366: PPUSH
56367: LD_VAR 0 1
56371: PPUSH
56372: LD_INT 1
56374: PPUSH
56375: CALL_OW 55
// end ;
56379: GO 56192
// end ;
56381: LD_VAR 0 5
56385: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56386: LD_INT 0
56388: PPUSH
56389: PPUSH
56390: PPUSH
56391: PPUSH
56392: PPUSH
56393: PPUSH
56394: PPUSH
56395: PPUSH
// if not turrets or not factories then
56396: LD_VAR 0 1
56400: NOT
56401: PUSH
56402: LD_VAR 0 2
56406: NOT
56407: OR
56408: IFFALSE 56412
// exit ;
56410: GO 56719
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56412: LD_ADDR_VAR 0 10
56416: PUSH
56417: LD_INT 5
56419: PUSH
56420: LD_INT 6
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 4
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 5
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 24
56454: PUSH
56455: LD_INT 25
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 23
56464: PUSH
56465: LD_INT 27
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 42
56478: PUSH
56479: LD_INT 43
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 44
56488: PUSH
56489: LD_INT 46
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 45
56498: PUSH
56499: LD_INT 47
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: ST_TO_ADDR
// result := [ ] ;
56516: LD_ADDR_VAR 0 3
56520: PUSH
56521: EMPTY
56522: ST_TO_ADDR
// for i in turrets do
56523: LD_ADDR_VAR 0 4
56527: PUSH
56528: LD_VAR 0 1
56532: PUSH
56533: FOR_IN
56534: IFFALSE 56717
// begin nat := GetNation ( i ) ;
56536: LD_ADDR_VAR 0 7
56540: PUSH
56541: LD_VAR 0 4
56545: PPUSH
56546: CALL_OW 248
56550: ST_TO_ADDR
// weapon := 0 ;
56551: LD_ADDR_VAR 0 8
56555: PUSH
56556: LD_INT 0
56558: ST_TO_ADDR
// if not nat then
56559: LD_VAR 0 7
56563: NOT
56564: IFFALSE 56568
// continue ;
56566: GO 56533
// for j in list [ nat ] do
56568: LD_ADDR_VAR 0 5
56572: PUSH
56573: LD_VAR 0 10
56577: PUSH
56578: LD_VAR 0 7
56582: ARRAY
56583: PUSH
56584: FOR_IN
56585: IFFALSE 56626
// if GetBWeapon ( i ) = j [ 1 ] then
56587: LD_VAR 0 4
56591: PPUSH
56592: CALL_OW 269
56596: PUSH
56597: LD_VAR 0 5
56601: PUSH
56602: LD_INT 1
56604: ARRAY
56605: EQUAL
56606: IFFALSE 56624
// begin weapon := j [ 2 ] ;
56608: LD_ADDR_VAR 0 8
56612: PUSH
56613: LD_VAR 0 5
56617: PUSH
56618: LD_INT 2
56620: ARRAY
56621: ST_TO_ADDR
// break ;
56622: GO 56626
// end ;
56624: GO 56584
56626: POP
56627: POP
// if not weapon then
56628: LD_VAR 0 8
56632: NOT
56633: IFFALSE 56637
// continue ;
56635: GO 56533
// for k in factories do
56637: LD_ADDR_VAR 0 6
56641: PUSH
56642: LD_VAR 0 2
56646: PUSH
56647: FOR_IN
56648: IFFALSE 56713
// begin weapons := AvailableWeaponList ( k ) ;
56650: LD_ADDR_VAR 0 9
56654: PUSH
56655: LD_VAR 0 6
56659: PPUSH
56660: CALL_OW 478
56664: ST_TO_ADDR
// if not weapons then
56665: LD_VAR 0 9
56669: NOT
56670: IFFALSE 56674
// continue ;
56672: GO 56647
// if weapon in weapons then
56674: LD_VAR 0 8
56678: PUSH
56679: LD_VAR 0 9
56683: IN
56684: IFFALSE 56711
// begin result := [ i , weapon ] ;
56686: LD_ADDR_VAR 0 3
56690: PUSH
56691: LD_VAR 0 4
56695: PUSH
56696: LD_VAR 0 8
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: ST_TO_ADDR
// exit ;
56705: POP
56706: POP
56707: POP
56708: POP
56709: GO 56719
// end ; end ;
56711: GO 56647
56713: POP
56714: POP
// end ;
56715: GO 56533
56717: POP
56718: POP
// end ;
56719: LD_VAR 0 3
56723: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56724: LD_INT 0
56726: PPUSH
// if not side or side > 8 then
56727: LD_VAR 0 3
56731: NOT
56732: PUSH
56733: LD_VAR 0 3
56737: PUSH
56738: LD_INT 8
56740: GREATER
56741: OR
56742: IFFALSE 56746
// exit ;
56744: GO 56805
// if not range then
56746: LD_VAR 0 4
56750: NOT
56751: IFFALSE 56762
// range := - 12 ;
56753: LD_ADDR_VAR 0 4
56757: PUSH
56758: LD_INT 12
56760: NEG
56761: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56762: LD_VAR 0 1
56766: PPUSH
56767: LD_VAR 0 2
56771: PPUSH
56772: LD_VAR 0 3
56776: PPUSH
56777: LD_VAR 0 4
56781: PPUSH
56782: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56786: LD_VAR 0 1
56790: PPUSH
56791: LD_VAR 0 2
56795: PPUSH
56796: LD_VAR 0 3
56800: PPUSH
56801: CALL_OW 331
// end ;
56805: LD_VAR 0 5
56809: RET
// export function Video ( mode ) ; begin
56810: LD_INT 0
56812: PPUSH
// ingame_video = mode ;
56813: LD_ADDR_OWVAR 52
56817: PUSH
56818: LD_VAR 0 1
56822: ST_TO_ADDR
// interface_hidden = mode ;
56823: LD_ADDR_OWVAR 54
56827: PUSH
56828: LD_VAR 0 1
56832: ST_TO_ADDR
// end ;
56833: LD_VAR 0 2
56837: RET
// export function Join ( array , element ) ; begin
56838: LD_INT 0
56840: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56841: LD_ADDR_VAR 0 3
56845: PUSH
56846: LD_VAR 0 1
56850: PPUSH
56851: LD_VAR 0 1
56855: PUSH
56856: LD_INT 1
56858: PLUS
56859: PPUSH
56860: LD_VAR 0 2
56864: PPUSH
56865: CALL_OW 1
56869: ST_TO_ADDR
// end ;
56870: LD_VAR 0 3
56874: RET
// export function JoinUnion ( array , element ) ; begin
56875: LD_INT 0
56877: PPUSH
// result := array union element ;
56878: LD_ADDR_VAR 0 3
56882: PUSH
56883: LD_VAR 0 1
56887: PUSH
56888: LD_VAR 0 2
56892: UNION
56893: ST_TO_ADDR
// end ;
56894: LD_VAR 0 3
56898: RET
// export function GetBehemoths ( side ) ; begin
56899: LD_INT 0
56901: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
56902: LD_ADDR_VAR 0 2
56906: PUSH
56907: LD_INT 22
56909: PUSH
56910: LD_VAR 0 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 31
56921: PUSH
56922: LD_INT 25
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PPUSH
56933: CALL_OW 69
56937: ST_TO_ADDR
// end ;
56938: LD_VAR 0 2
56942: RET
// export function Shuffle ( array ) ; var i , index ; begin
56943: LD_INT 0
56945: PPUSH
56946: PPUSH
56947: PPUSH
// result := [ ] ;
56948: LD_ADDR_VAR 0 2
56952: PUSH
56953: EMPTY
56954: ST_TO_ADDR
// if not array then
56955: LD_VAR 0 1
56959: NOT
56960: IFFALSE 56964
// exit ;
56962: GO 57063
// Randomize ;
56964: CALL_OW 10
// for i = array downto 1 do
56968: LD_ADDR_VAR 0 3
56972: PUSH
56973: DOUBLE
56974: LD_VAR 0 1
56978: INC
56979: ST_TO_ADDR
56980: LD_INT 1
56982: PUSH
56983: FOR_DOWNTO
56984: IFFALSE 57061
// begin index := rand ( 1 , array ) ;
56986: LD_ADDR_VAR 0 4
56990: PUSH
56991: LD_INT 1
56993: PPUSH
56994: LD_VAR 0 1
56998: PPUSH
56999: CALL_OW 12
57003: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57004: LD_ADDR_VAR 0 2
57008: PUSH
57009: LD_VAR 0 2
57013: PPUSH
57014: LD_VAR 0 2
57018: PUSH
57019: LD_INT 1
57021: PLUS
57022: PPUSH
57023: LD_VAR 0 1
57027: PUSH
57028: LD_VAR 0 4
57032: ARRAY
57033: PPUSH
57034: CALL_OW 2
57038: ST_TO_ADDR
// array := Delete ( array , index ) ;
57039: LD_ADDR_VAR 0 1
57043: PUSH
57044: LD_VAR 0 1
57048: PPUSH
57049: LD_VAR 0 4
57053: PPUSH
57054: CALL_OW 3
57058: ST_TO_ADDR
// end ;
57059: GO 56983
57061: POP
57062: POP
// end ;
57063: LD_VAR 0 2
57067: RET
// export function GetBaseMaterials ( base ) ; begin
57068: LD_INT 0
57070: PPUSH
// result := [ 0 , 0 , 0 ] ;
57071: LD_ADDR_VAR 0 2
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// if not base then
57090: LD_VAR 0 1
57094: NOT
57095: IFFALSE 57099
// exit ;
57097: GO 57148
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57099: LD_ADDR_VAR 0 2
57103: PUSH
57104: LD_VAR 0 1
57108: PPUSH
57109: LD_INT 1
57111: PPUSH
57112: CALL_OW 275
57116: PUSH
57117: LD_VAR 0 1
57121: PPUSH
57122: LD_INT 2
57124: PPUSH
57125: CALL_OW 275
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: LD_INT 3
57137: PPUSH
57138: CALL_OW 275
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: ST_TO_ADDR
// end ;
57148: LD_VAR 0 2
57152: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57153: LD_INT 0
57155: PPUSH
57156: PPUSH
// result := array ;
57157: LD_ADDR_VAR 0 3
57161: PUSH
57162: LD_VAR 0 1
57166: ST_TO_ADDR
// if size >= result then
57167: LD_VAR 0 2
57171: PUSH
57172: LD_VAR 0 3
57176: GREATEREQUAL
57177: IFFALSE 57181
// exit ;
57179: GO 57231
// if size then
57181: LD_VAR 0 2
57185: IFFALSE 57231
// for i := array downto size do
57187: LD_ADDR_VAR 0 4
57191: PUSH
57192: DOUBLE
57193: LD_VAR 0 1
57197: INC
57198: ST_TO_ADDR
57199: LD_VAR 0 2
57203: PUSH
57204: FOR_DOWNTO
57205: IFFALSE 57229
// result := Delete ( result , result ) ;
57207: LD_ADDR_VAR 0 3
57211: PUSH
57212: LD_VAR 0 3
57216: PPUSH
57217: LD_VAR 0 3
57221: PPUSH
57222: CALL_OW 3
57226: ST_TO_ADDR
57227: GO 57204
57229: POP
57230: POP
// end ;
57231: LD_VAR 0 3
57235: RET
// export function ComExit ( unit ) ; var tmp ; begin
57236: LD_INT 0
57238: PPUSH
57239: PPUSH
// if not IsInUnit ( unit ) then
57240: LD_VAR 0 1
57244: PPUSH
57245: CALL_OW 310
57249: NOT
57250: IFFALSE 57254
// exit ;
57252: GO 57314
// tmp := IsInUnit ( unit ) ;
57254: LD_ADDR_VAR 0 3
57258: PUSH
57259: LD_VAR 0 1
57263: PPUSH
57264: CALL_OW 310
57268: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57269: LD_VAR 0 3
57273: PPUSH
57274: CALL_OW 247
57278: PUSH
57279: LD_INT 2
57281: EQUAL
57282: IFFALSE 57295
// ComExitVehicle ( unit ) else
57284: LD_VAR 0 1
57288: PPUSH
57289: CALL_OW 121
57293: GO 57304
// ComExitBuilding ( unit ) ;
57295: LD_VAR 0 1
57299: PPUSH
57300: CALL_OW 122
// result := tmp ;
57304: LD_ADDR_VAR 0 2
57308: PUSH
57309: LD_VAR 0 3
57313: ST_TO_ADDR
// end ;
57314: LD_VAR 0 2
57318: RET
// export function ComExitAll ( units ) ; var i ; begin
57319: LD_INT 0
57321: PPUSH
57322: PPUSH
// if not units then
57323: LD_VAR 0 1
57327: NOT
57328: IFFALSE 57332
// exit ;
57330: GO 57358
// for i in units do
57332: LD_ADDR_VAR 0 3
57336: PUSH
57337: LD_VAR 0 1
57341: PUSH
57342: FOR_IN
57343: IFFALSE 57356
// ComExit ( i ) ;
57345: LD_VAR 0 3
57349: PPUSH
57350: CALL 57236 0 1
57354: GO 57342
57356: POP
57357: POP
// end ;
57358: LD_VAR 0 2
57362: RET
// export function ResetHc ; begin
57363: LD_INT 0
57365: PPUSH
// InitHc ;
57366: CALL_OW 19
// hc_importance := 0 ;
57370: LD_ADDR_OWVAR 32
57374: PUSH
57375: LD_INT 0
57377: ST_TO_ADDR
// end ;
57378: LD_VAR 0 1
57382: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57383: LD_INT 0
57385: PPUSH
57386: PPUSH
57387: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57388: LD_ADDR_VAR 0 6
57392: PUSH
57393: LD_VAR 0 1
57397: PUSH
57398: LD_VAR 0 3
57402: PLUS
57403: PUSH
57404: LD_INT 2
57406: DIV
57407: ST_TO_ADDR
// if _x < 0 then
57408: LD_VAR 0 6
57412: PUSH
57413: LD_INT 0
57415: LESS
57416: IFFALSE 57433
// _x := _x * - 1 ;
57418: LD_ADDR_VAR 0 6
57422: PUSH
57423: LD_VAR 0 6
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: MUL
57432: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57433: LD_ADDR_VAR 0 7
57437: PUSH
57438: LD_VAR 0 2
57442: PUSH
57443: LD_VAR 0 4
57447: PLUS
57448: PUSH
57449: LD_INT 2
57451: DIV
57452: ST_TO_ADDR
// if _y < 0 then
57453: LD_VAR 0 7
57457: PUSH
57458: LD_INT 0
57460: LESS
57461: IFFALSE 57478
// _y := _y * - 1 ;
57463: LD_ADDR_VAR 0 7
57467: PUSH
57468: LD_VAR 0 7
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: MUL
57477: ST_TO_ADDR
// result := [ _x , _y ] ;
57478: LD_ADDR_VAR 0 5
57482: PUSH
57483: LD_VAR 0 6
57487: PUSH
57488: LD_VAR 0 7
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// end ;
57497: LD_VAR 0 5
57501: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57502: LD_INT 0
57504: PPUSH
57505: PPUSH
57506: PPUSH
57507: PPUSH
// task := GetTaskList ( unit ) ;
57508: LD_ADDR_VAR 0 7
57512: PUSH
57513: LD_VAR 0 1
57517: PPUSH
57518: CALL_OW 437
57522: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57523: LD_VAR 0 7
57527: NOT
57528: PUSH
57529: LD_VAR 0 1
57533: PPUSH
57534: LD_VAR 0 2
57538: PPUSH
57539: CALL_OW 308
57543: NOT
57544: AND
57545: IFFALSE 57549
// exit ;
57547: GO 57667
// if IsInArea ( unit , area ) then
57549: LD_VAR 0 1
57553: PPUSH
57554: LD_VAR 0 2
57558: PPUSH
57559: CALL_OW 308
57563: IFFALSE 57581
// begin ComMoveToArea ( unit , goAway ) ;
57565: LD_VAR 0 1
57569: PPUSH
57570: LD_VAR 0 3
57574: PPUSH
57575: CALL_OW 113
// exit ;
57579: GO 57667
// end ; if task [ 1 ] [ 1 ] <> M then
57581: LD_VAR 0 7
57585: PUSH
57586: LD_INT 1
57588: ARRAY
57589: PUSH
57590: LD_INT 1
57592: ARRAY
57593: PUSH
57594: LD_STRING M
57596: NONEQUAL
57597: IFFALSE 57601
// exit ;
57599: GO 57667
// x := task [ 1 ] [ 2 ] ;
57601: LD_ADDR_VAR 0 5
57605: PUSH
57606: LD_VAR 0 7
57610: PUSH
57611: LD_INT 1
57613: ARRAY
57614: PUSH
57615: LD_INT 2
57617: ARRAY
57618: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57619: LD_ADDR_VAR 0 6
57623: PUSH
57624: LD_VAR 0 7
57628: PUSH
57629: LD_INT 1
57631: ARRAY
57632: PUSH
57633: LD_INT 3
57635: ARRAY
57636: ST_TO_ADDR
// if InArea ( x , y , area ) then
57637: LD_VAR 0 5
57641: PPUSH
57642: LD_VAR 0 6
57646: PPUSH
57647: LD_VAR 0 2
57651: PPUSH
57652: CALL_OW 309
57656: IFFALSE 57667
// ComStop ( unit ) ;
57658: LD_VAR 0 1
57662: PPUSH
57663: CALL_OW 141
// end ;
57667: LD_VAR 0 4
57671: RET
// export function Abs ( value ) ; begin
57672: LD_INT 0
57674: PPUSH
// result := value ;
57675: LD_ADDR_VAR 0 2
57679: PUSH
57680: LD_VAR 0 1
57684: ST_TO_ADDR
// if value < 0 then
57685: LD_VAR 0 1
57689: PUSH
57690: LD_INT 0
57692: LESS
57693: IFFALSE 57710
// result := value * - 1 ;
57695: LD_ADDR_VAR 0 2
57699: PUSH
57700: LD_VAR 0 1
57704: PUSH
57705: LD_INT 1
57707: NEG
57708: MUL
57709: ST_TO_ADDR
// end ;
57710: LD_VAR 0 2
57714: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57715: LD_INT 0
57717: PPUSH
57718: PPUSH
57719: PPUSH
57720: PPUSH
57721: PPUSH
57722: PPUSH
57723: PPUSH
57724: PPUSH
// if not unit or not building then
57725: LD_VAR 0 1
57729: NOT
57730: PUSH
57731: LD_VAR 0 2
57735: NOT
57736: OR
57737: IFFALSE 57741
// exit ;
57739: GO 57967
// x := GetX ( building ) ;
57741: LD_ADDR_VAR 0 4
57745: PUSH
57746: LD_VAR 0 2
57750: PPUSH
57751: CALL_OW 250
57755: ST_TO_ADDR
// y := GetY ( building ) ;
57756: LD_ADDR_VAR 0 6
57760: PUSH
57761: LD_VAR 0 2
57765: PPUSH
57766: CALL_OW 251
57770: ST_TO_ADDR
// d := GetDir ( building ) ;
57771: LD_ADDR_VAR 0 8
57775: PUSH
57776: LD_VAR 0 2
57780: PPUSH
57781: CALL_OW 254
57785: ST_TO_ADDR
// r := 4 ;
57786: LD_ADDR_VAR 0 9
57790: PUSH
57791: LD_INT 4
57793: ST_TO_ADDR
// for i := 1 to 5 do
57794: LD_ADDR_VAR 0 10
57798: PUSH
57799: DOUBLE
57800: LD_INT 1
57802: DEC
57803: ST_TO_ADDR
57804: LD_INT 5
57806: PUSH
57807: FOR_TO
57808: IFFALSE 57965
// begin _x := ShiftX ( x , d , r + i ) ;
57810: LD_ADDR_VAR 0 5
57814: PUSH
57815: LD_VAR 0 4
57819: PPUSH
57820: LD_VAR 0 8
57824: PPUSH
57825: LD_VAR 0 9
57829: PUSH
57830: LD_VAR 0 10
57834: PLUS
57835: PPUSH
57836: CALL_OW 272
57840: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57841: LD_ADDR_VAR 0 7
57845: PUSH
57846: LD_VAR 0 6
57850: PPUSH
57851: LD_VAR 0 8
57855: PPUSH
57856: LD_VAR 0 9
57860: PUSH
57861: LD_VAR 0 10
57865: PLUS
57866: PPUSH
57867: CALL_OW 273
57871: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57872: LD_VAR 0 5
57876: PPUSH
57877: LD_VAR 0 7
57881: PPUSH
57882: CALL_OW 488
57886: PUSH
57887: LD_VAR 0 5
57891: PPUSH
57892: LD_VAR 0 7
57896: PPUSH
57897: CALL_OW 428
57901: PPUSH
57902: CALL_OW 247
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: IN
57917: NOT
57918: AND
57919: IFFALSE 57963
// begin ComMoveXY ( unit , _x , _y ) ;
57921: LD_VAR 0 1
57925: PPUSH
57926: LD_VAR 0 5
57930: PPUSH
57931: LD_VAR 0 7
57935: PPUSH
57936: CALL_OW 111
// result := [ _x , _y ] ;
57940: LD_ADDR_VAR 0 3
57944: PUSH
57945: LD_VAR 0 5
57949: PUSH
57950: LD_VAR 0 7
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: ST_TO_ADDR
// exit ;
57959: POP
57960: POP
57961: GO 57967
// end ; end ;
57963: GO 57807
57965: POP
57966: POP
// end ;
57967: LD_VAR 0 3
57971: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57972: LD_INT 0
57974: PPUSH
57975: PPUSH
57976: PPUSH
// result := 0 ;
57977: LD_ADDR_VAR 0 3
57981: PUSH
57982: LD_INT 0
57984: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57985: LD_VAR 0 1
57989: PUSH
57990: LD_INT 0
57992: LESS
57993: PUSH
57994: LD_VAR 0 1
57998: PUSH
57999: LD_INT 8
58001: GREATER
58002: OR
58003: PUSH
58004: LD_VAR 0 2
58008: PUSH
58009: LD_INT 0
58011: LESS
58012: OR
58013: PUSH
58014: LD_VAR 0 2
58018: PUSH
58019: LD_INT 8
58021: GREATER
58022: OR
58023: IFFALSE 58027
// exit ;
58025: GO 58102
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58027: LD_ADDR_VAR 0 4
58031: PUSH
58032: LD_INT 22
58034: PUSH
58035: LD_VAR 0 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PPUSH
58044: CALL_OW 69
58048: PUSH
58049: FOR_IN
58050: IFFALSE 58100
// begin un := UnitShoot ( i ) ;
58052: LD_ADDR_VAR 0 5
58056: PUSH
58057: LD_VAR 0 4
58061: PPUSH
58062: CALL_OW 504
58066: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58067: LD_VAR 0 5
58071: PPUSH
58072: CALL_OW 255
58076: PUSH
58077: LD_VAR 0 1
58081: EQUAL
58082: IFFALSE 58098
// begin result := un ;
58084: LD_ADDR_VAR 0 3
58088: PUSH
58089: LD_VAR 0 5
58093: ST_TO_ADDR
// exit ;
58094: POP
58095: POP
58096: GO 58102
// end ; end ;
58098: GO 58049
58100: POP
58101: POP
// end ;
58102: LD_VAR 0 3
58106: RET
// export function GetCargoBay ( units ) ; begin
58107: LD_INT 0
58109: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58110: LD_ADDR_VAR 0 2
58114: PUSH
58115: LD_VAR 0 1
58119: PPUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 34
58125: PUSH
58126: LD_INT 12
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 34
58135: PUSH
58136: LD_INT 51
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 34
58145: PUSH
58146: LD_INT 32
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 34
58155: PUSH
58156: LD_INT 89
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: PPUSH
58170: CALL_OW 72
58174: ST_TO_ADDR
// end ;
58175: LD_VAR 0 2
58179: RET
// export function Negate ( value ) ; begin
58180: LD_INT 0
58182: PPUSH
// result := not value ;
58183: LD_ADDR_VAR 0 2
58187: PUSH
58188: LD_VAR 0 1
58192: NOT
58193: ST_TO_ADDR
// end ;
58194: LD_VAR 0 2
58198: RET
// export function Inc ( value ) ; begin
58199: LD_INT 0
58201: PPUSH
// result := value + 1 ;
58202: LD_ADDR_VAR 0 2
58206: PUSH
58207: LD_VAR 0 1
58211: PUSH
58212: LD_INT 1
58214: PLUS
58215: ST_TO_ADDR
// end ;
58216: LD_VAR 0 2
58220: RET
// export function Dec ( value ) ; begin
58221: LD_INT 0
58223: PPUSH
// result := value - 1 ;
58224: LD_ADDR_VAR 0 2
58228: PUSH
58229: LD_VAR 0 1
58233: PUSH
58234: LD_INT 1
58236: MINUS
58237: ST_TO_ADDR
// end ;
58238: LD_VAR 0 2
58242: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58243: LD_INT 0
58245: PPUSH
58246: PPUSH
58247: PPUSH
58248: PPUSH
58249: PPUSH
58250: PPUSH
58251: PPUSH
58252: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58253: LD_VAR 0 1
58257: PPUSH
58258: LD_VAR 0 2
58262: PPUSH
58263: CALL_OW 488
58267: NOT
58268: PUSH
58269: LD_VAR 0 3
58273: PPUSH
58274: LD_VAR 0 4
58278: PPUSH
58279: CALL_OW 488
58283: NOT
58284: OR
58285: IFFALSE 58298
// begin result := - 1 ;
58287: LD_ADDR_VAR 0 5
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: ST_TO_ADDR
// exit ;
58296: GO 58533
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58298: LD_ADDR_VAR 0 12
58302: PUSH
58303: LD_VAR 0 1
58307: PPUSH
58308: LD_VAR 0 2
58312: PPUSH
58313: LD_VAR 0 3
58317: PPUSH
58318: LD_VAR 0 4
58322: PPUSH
58323: CALL 57383 0 4
58327: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58328: LD_ADDR_VAR 0 11
58332: PUSH
58333: LD_VAR 0 1
58337: PPUSH
58338: LD_VAR 0 2
58342: PPUSH
58343: LD_VAR 0 12
58347: PUSH
58348: LD_INT 1
58350: ARRAY
58351: PPUSH
58352: LD_VAR 0 12
58356: PUSH
58357: LD_INT 2
58359: ARRAY
58360: PPUSH
58361: CALL_OW 298
58365: ST_TO_ADDR
// distance := 9999 ;
58366: LD_ADDR_VAR 0 10
58370: PUSH
58371: LD_INT 9999
58373: ST_TO_ADDR
// for i := 0 to 5 do
58374: LD_ADDR_VAR 0 6
58378: PUSH
58379: DOUBLE
58380: LD_INT 0
58382: DEC
58383: ST_TO_ADDR
58384: LD_INT 5
58386: PUSH
58387: FOR_TO
58388: IFFALSE 58531
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58390: LD_ADDR_VAR 0 7
58394: PUSH
58395: LD_VAR 0 1
58399: PPUSH
58400: LD_VAR 0 6
58404: PPUSH
58405: LD_VAR 0 11
58409: PPUSH
58410: CALL_OW 272
58414: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58415: LD_ADDR_VAR 0 8
58419: PUSH
58420: LD_VAR 0 2
58424: PPUSH
58425: LD_VAR 0 6
58429: PPUSH
58430: LD_VAR 0 11
58434: PPUSH
58435: CALL_OW 273
58439: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58440: LD_VAR 0 7
58444: PPUSH
58445: LD_VAR 0 8
58449: PPUSH
58450: CALL_OW 488
58454: NOT
58455: IFFALSE 58459
// continue ;
58457: GO 58387
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
58459: LD_ADDR_VAR 0 9
58463: PUSH
58464: LD_VAR 0 12
58468: PUSH
58469: LD_INT 1
58471: ARRAY
58472: PPUSH
58473: LD_VAR 0 12
58477: PUSH
58478: LD_INT 2
58480: ARRAY
58481: PPUSH
58482: LD_VAR 0 7
58486: PPUSH
58487: LD_VAR 0 8
58491: PPUSH
58492: CALL_OW 298
58496: ST_TO_ADDR
// if tmp < distance then
58497: LD_VAR 0 9
58501: PUSH
58502: LD_VAR 0 10
58506: LESS
58507: IFFALSE 58529
// begin result := i ;
58509: LD_ADDR_VAR 0 5
58513: PUSH
58514: LD_VAR 0 6
58518: ST_TO_ADDR
// distance := tmp ;
58519: LD_ADDR_VAR 0 10
58523: PUSH
58524: LD_VAR 0 9
58528: ST_TO_ADDR
// end ; end ;
58529: GO 58387
58531: POP
58532: POP
// end ;
58533: LD_VAR 0 5
58537: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58538: LD_INT 0
58540: PPUSH
58541: PPUSH
// if not driver or not IsInUnit ( driver ) then
58542: LD_VAR 0 1
58546: NOT
58547: PUSH
58548: LD_VAR 0 1
58552: PPUSH
58553: CALL_OW 310
58557: NOT
58558: OR
58559: IFFALSE 58563
// exit ;
58561: GO 58653
// vehicle := IsInUnit ( driver ) ;
58563: LD_ADDR_VAR 0 3
58567: PUSH
58568: LD_VAR 0 1
58572: PPUSH
58573: CALL_OW 310
58577: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58578: LD_VAR 0 1
58582: PPUSH
58583: LD_STRING \
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: PUSH
58613: LD_STRING E
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_VAR 0 3
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PPUSH
58649: CALL_OW 446
// end ;
58653: LD_VAR 0 2
58657: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58658: LD_INT 0
58660: PPUSH
58661: PPUSH
// if not driver or not IsInUnit ( driver ) then
58662: LD_VAR 0 1
58666: NOT
58667: PUSH
58668: LD_VAR 0 1
58672: PPUSH
58673: CALL_OW 310
58677: NOT
58678: OR
58679: IFFALSE 58683
// exit ;
58681: GO 58773
// vehicle := IsInUnit ( driver ) ;
58683: LD_ADDR_VAR 0 3
58687: PUSH
58688: LD_VAR 0 1
58692: PPUSH
58693: CALL_OW 310
58697: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58698: LD_VAR 0 1
58702: PPUSH
58703: LD_STRING \
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: PUSH
58733: LD_STRING E
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_VAR 0 3
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PPUSH
58769: CALL_OW 447
// end ;
58773: LD_VAR 0 2
58777: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58778: LD_INT 0
58780: PPUSH
58781: PPUSH
58782: PPUSH
// tmp := [ ] ;
58783: LD_ADDR_VAR 0 5
58787: PUSH
58788: EMPTY
58789: ST_TO_ADDR
// for i in units do
58790: LD_ADDR_VAR 0 4
58794: PUSH
58795: LD_VAR 0 1
58799: PUSH
58800: FOR_IN
58801: IFFALSE 58839
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58803: LD_ADDR_VAR 0 5
58807: PUSH
58808: LD_VAR 0 5
58812: PPUSH
58813: LD_VAR 0 5
58817: PUSH
58818: LD_INT 1
58820: PLUS
58821: PPUSH
58822: LD_VAR 0 4
58826: PPUSH
58827: CALL_OW 256
58831: PPUSH
58832: CALL_OW 2
58836: ST_TO_ADDR
58837: GO 58800
58839: POP
58840: POP
// if not tmp then
58841: LD_VAR 0 5
58845: NOT
58846: IFFALSE 58850
// exit ;
58848: GO 58898
// if asc then
58850: LD_VAR 0 2
58854: IFFALSE 58878
// result := SortListByListAsc ( units , tmp ) else
58856: LD_ADDR_VAR 0 3
58860: PUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: LD_VAR 0 5
58870: PPUSH
58871: CALL_OW 76
58875: ST_TO_ADDR
58876: GO 58898
// result := SortListByListDesc ( units , tmp ) ;
58878: LD_ADDR_VAR 0 3
58882: PUSH
58883: LD_VAR 0 1
58887: PPUSH
58888: LD_VAR 0 5
58892: PPUSH
58893: CALL_OW 77
58897: ST_TO_ADDR
// end ;
58898: LD_VAR 0 3
58902: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58903: LD_INT 0
58905: PPUSH
58906: PPUSH
// task := GetTaskList ( mech ) ;
58907: LD_ADDR_VAR 0 4
58911: PUSH
58912: LD_VAR 0 1
58916: PPUSH
58917: CALL_OW 437
58921: ST_TO_ADDR
// if not task then
58922: LD_VAR 0 4
58926: NOT
58927: IFFALSE 58931
// exit ;
58929: GO 58973
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58931: LD_ADDR_VAR 0 3
58935: PUSH
58936: LD_VAR 0 4
58940: PUSH
58941: LD_INT 1
58943: ARRAY
58944: PUSH
58945: LD_INT 1
58947: ARRAY
58948: PUSH
58949: LD_STRING r
58951: EQUAL
58952: PUSH
58953: LD_VAR 0 4
58957: PUSH
58958: LD_INT 1
58960: ARRAY
58961: PUSH
58962: LD_INT 4
58964: ARRAY
58965: PUSH
58966: LD_VAR 0 2
58970: EQUAL
58971: AND
58972: ST_TO_ADDR
// end ;
58973: LD_VAR 0 3
58977: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58978: LD_INT 0
58980: PPUSH
// SetDir ( unit , d ) ;
58981: LD_VAR 0 1
58985: PPUSH
58986: LD_VAR 0 4
58990: PPUSH
58991: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58995: LD_VAR 0 1
58999: PPUSH
59000: LD_VAR 0 2
59004: PPUSH
59005: LD_VAR 0 3
59009: PPUSH
59010: LD_VAR 0 5
59014: PPUSH
59015: CALL_OW 48
// end ;
59019: LD_VAR 0 6
59023: RET
// export function ToNaturalNumber ( number ) ; begin
59024: LD_INT 0
59026: PPUSH
// result := number div 1 ;
59027: LD_ADDR_VAR 0 2
59031: PUSH
59032: LD_VAR 0 1
59036: PUSH
59037: LD_INT 1
59039: DIV
59040: ST_TO_ADDR
// if number < 0 then
59041: LD_VAR 0 1
59045: PUSH
59046: LD_INT 0
59048: LESS
59049: IFFALSE 59059
// result := 0 ;
59051: LD_ADDR_VAR 0 2
59055: PUSH
59056: LD_INT 0
59058: ST_TO_ADDR
// end ;
59059: LD_VAR 0 2
59063: RET
// export function SortByClass ( units , class ) ; var un ; begin
59064: LD_INT 0
59066: PPUSH
59067: PPUSH
// if not units or not class then
59068: LD_VAR 0 1
59072: NOT
59073: PUSH
59074: LD_VAR 0 2
59078: NOT
59079: OR
59080: IFFALSE 59084
// exit ;
59082: GO 59179
// result := [ ] ;
59084: LD_ADDR_VAR 0 3
59088: PUSH
59089: EMPTY
59090: ST_TO_ADDR
// for un in units do
59091: LD_ADDR_VAR 0 4
59095: PUSH
59096: LD_VAR 0 1
59100: PUSH
59101: FOR_IN
59102: IFFALSE 59177
// if GetClass ( un ) = class then
59104: LD_VAR 0 4
59108: PPUSH
59109: CALL_OW 257
59113: PUSH
59114: LD_VAR 0 2
59118: EQUAL
59119: IFFALSE 59146
// result := Insert ( result , 1 , un ) else
59121: LD_ADDR_VAR 0 3
59125: PUSH
59126: LD_VAR 0 3
59130: PPUSH
59131: LD_INT 1
59133: PPUSH
59134: LD_VAR 0 4
59138: PPUSH
59139: CALL_OW 2
59143: ST_TO_ADDR
59144: GO 59175
// result := Replace ( result , result + 1 , un ) ;
59146: LD_ADDR_VAR 0 3
59150: PUSH
59151: LD_VAR 0 3
59155: PPUSH
59156: LD_VAR 0 3
59160: PUSH
59161: LD_INT 1
59163: PLUS
59164: PPUSH
59165: LD_VAR 0 4
59169: PPUSH
59170: CALL_OW 1
59174: ST_TO_ADDR
59175: GO 59101
59177: POP
59178: POP
// end ;
59179: LD_VAR 0 3
59183: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59184: LD_INT 0
59186: PPUSH
59187: PPUSH
59188: PPUSH
59189: PPUSH
59190: PPUSH
59191: PPUSH
59192: PPUSH
// result := [ ] ;
59193: LD_ADDR_VAR 0 4
59197: PUSH
59198: EMPTY
59199: ST_TO_ADDR
// if x - r < 0 then
59200: LD_VAR 0 1
59204: PUSH
59205: LD_VAR 0 3
59209: MINUS
59210: PUSH
59211: LD_INT 0
59213: LESS
59214: IFFALSE 59226
// min_x := 0 else
59216: LD_ADDR_VAR 0 8
59220: PUSH
59221: LD_INT 0
59223: ST_TO_ADDR
59224: GO 59242
// min_x := x - r ;
59226: LD_ADDR_VAR 0 8
59230: PUSH
59231: LD_VAR 0 1
59235: PUSH
59236: LD_VAR 0 3
59240: MINUS
59241: ST_TO_ADDR
// if y - r < 0 then
59242: LD_VAR 0 2
59246: PUSH
59247: LD_VAR 0 3
59251: MINUS
59252: PUSH
59253: LD_INT 0
59255: LESS
59256: IFFALSE 59268
// min_y := 0 else
59258: LD_ADDR_VAR 0 7
59262: PUSH
59263: LD_INT 0
59265: ST_TO_ADDR
59266: GO 59284
// min_y := y - r ;
59268: LD_ADDR_VAR 0 7
59272: PUSH
59273: LD_VAR 0 2
59277: PUSH
59278: LD_VAR 0 3
59282: MINUS
59283: ST_TO_ADDR
// max_x := x + r ;
59284: LD_ADDR_VAR 0 9
59288: PUSH
59289: LD_VAR 0 1
59293: PUSH
59294: LD_VAR 0 3
59298: PLUS
59299: ST_TO_ADDR
// max_y := y + r ;
59300: LD_ADDR_VAR 0 10
59304: PUSH
59305: LD_VAR 0 2
59309: PUSH
59310: LD_VAR 0 3
59314: PLUS
59315: ST_TO_ADDR
// for _x = min_x to max_x do
59316: LD_ADDR_VAR 0 5
59320: PUSH
59321: DOUBLE
59322: LD_VAR 0 8
59326: DEC
59327: ST_TO_ADDR
59328: LD_VAR 0 9
59332: PUSH
59333: FOR_TO
59334: IFFALSE 59435
// for _y = min_y to max_y do
59336: LD_ADDR_VAR 0 6
59340: PUSH
59341: DOUBLE
59342: LD_VAR 0 7
59346: DEC
59347: ST_TO_ADDR
59348: LD_VAR 0 10
59352: PUSH
59353: FOR_TO
59354: IFFALSE 59431
// begin if not ValidHex ( _x , _y ) then
59356: LD_VAR 0 5
59360: PPUSH
59361: LD_VAR 0 6
59365: PPUSH
59366: CALL_OW 488
59370: NOT
59371: IFFALSE 59375
// continue ;
59373: GO 59353
// if GetResourceTypeXY ( _x , _y ) then
59375: LD_VAR 0 5
59379: PPUSH
59380: LD_VAR 0 6
59384: PPUSH
59385: CALL_OW 283
59389: IFFALSE 59429
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59391: LD_ADDR_VAR 0 4
59395: PUSH
59396: LD_VAR 0 4
59400: PPUSH
59401: LD_VAR 0 4
59405: PUSH
59406: LD_INT 1
59408: PLUS
59409: PPUSH
59410: LD_VAR 0 5
59414: PUSH
59415: LD_VAR 0 6
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PPUSH
59424: CALL_OW 1
59428: ST_TO_ADDR
// end ;
59429: GO 59353
59431: POP
59432: POP
59433: GO 59333
59435: POP
59436: POP
// end ;
59437: LD_VAR 0 4
59441: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
59442: LD_INT 0
59444: PPUSH
59445: PPUSH
59446: PPUSH
59447: PPUSH
59448: PPUSH
59449: PPUSH
59450: PPUSH
59451: PPUSH
// if not units then
59452: LD_VAR 0 1
59456: NOT
59457: IFFALSE 59461
// exit ;
59459: GO 59985
// result := UnitFilter ( units , [ f_ok ] ) ;
59461: LD_ADDR_VAR 0 3
59465: PUSH
59466: LD_VAR 0 1
59470: PPUSH
59471: LD_INT 50
59473: PUSH
59474: EMPTY
59475: LIST
59476: PPUSH
59477: CALL_OW 72
59481: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59482: LD_ADDR_VAR 0 8
59486: PUSH
59487: LD_VAR 0 1
59491: PUSH
59492: LD_INT 1
59494: ARRAY
59495: PPUSH
59496: CALL_OW 255
59500: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
59501: LD_ADDR_VAR 0 10
59505: PUSH
59506: LD_INT 29
59508: PUSH
59509: LD_INT 91
59511: PUSH
59512: LD_INT 49
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: LIST
59519: ST_TO_ADDR
// if not result then
59520: LD_VAR 0 3
59524: NOT
59525: IFFALSE 59529
// exit ;
59527: GO 59985
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59529: LD_ADDR_VAR 0 5
59533: PUSH
59534: LD_INT 81
59536: PUSH
59537: LD_VAR 0 8
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PPUSH
59546: CALL_OW 69
59550: ST_TO_ADDR
// for i in result do
59551: LD_ADDR_VAR 0 4
59555: PUSH
59556: LD_VAR 0 3
59560: PUSH
59561: FOR_IN
59562: IFFALSE 59983
// begin tag := GetTag ( i ) + 1 ;
59564: LD_ADDR_VAR 0 9
59568: PUSH
59569: LD_VAR 0 4
59573: PPUSH
59574: CALL_OW 110
59578: PUSH
59579: LD_INT 1
59581: PLUS
59582: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59583: LD_ADDR_VAR 0 7
59587: PUSH
59588: LD_VAR 0 4
59592: PPUSH
59593: CALL_OW 250
59597: PPUSH
59598: LD_VAR 0 4
59602: PPUSH
59603: CALL_OW 251
59607: PPUSH
59608: LD_INT 6
59610: PPUSH
59611: CALL 59184 0 3
59615: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
59616: LD_VAR 0 4
59620: PPUSH
59621: CALL_OW 247
59625: PUSH
59626: LD_INT 2
59628: EQUAL
59629: PUSH
59630: LD_VAR 0 7
59634: AND
59635: PUSH
59636: LD_VAR 0 4
59640: PPUSH
59641: CALL_OW 264
59645: PUSH
59646: LD_VAR 0 10
59650: IN
59651: NOT
59652: AND
59653: IFFALSE 59692
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59655: LD_VAR 0 4
59659: PPUSH
59660: LD_VAR 0 7
59664: PUSH
59665: LD_INT 1
59667: ARRAY
59668: PUSH
59669: LD_INT 1
59671: ARRAY
59672: PPUSH
59673: LD_VAR 0 7
59677: PUSH
59678: LD_INT 1
59680: ARRAY
59681: PUSH
59682: LD_INT 2
59684: ARRAY
59685: PPUSH
59686: CALL_OW 116
59690: GO 59981
// if path > tag then
59692: LD_VAR 0 2
59696: PUSH
59697: LD_VAR 0 9
59701: GREATER
59702: IFFALSE 59910
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
59704: LD_ADDR_VAR 0 6
59708: PUSH
59709: LD_VAR 0 5
59713: PPUSH
59714: LD_INT 91
59716: PUSH
59717: LD_VAR 0 4
59721: PUSH
59722: LD_INT 8
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: LIST
59729: PPUSH
59730: CALL_OW 72
59734: ST_TO_ADDR
// if nearEnemy then
59735: LD_VAR 0 6
59739: IFFALSE 59808
// begin if GetWeapon ( i ) = ru_time_lapser then
59741: LD_VAR 0 4
59745: PPUSH
59746: CALL_OW 264
59750: PUSH
59751: LD_INT 49
59753: EQUAL
59754: IFFALSE 59782
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
59756: LD_VAR 0 4
59760: PPUSH
59761: LD_VAR 0 6
59765: PPUSH
59766: LD_VAR 0 4
59770: PPUSH
59771: CALL_OW 74
59775: PPUSH
59776: CALL_OW 112
59780: GO 59806
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
59782: LD_VAR 0 4
59786: PPUSH
59787: LD_VAR 0 6
59791: PPUSH
59792: LD_VAR 0 4
59796: PPUSH
59797: CALL_OW 74
59801: PPUSH
59802: CALL 60910 0 2
// end else
59806: GO 59908
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59808: LD_VAR 0 4
59812: PPUSH
59813: LD_VAR 0 2
59817: PUSH
59818: LD_VAR 0 9
59822: ARRAY
59823: PUSH
59824: LD_INT 1
59826: ARRAY
59827: PPUSH
59828: LD_VAR 0 2
59832: PUSH
59833: LD_VAR 0 9
59837: ARRAY
59838: PUSH
59839: LD_INT 2
59841: ARRAY
59842: PPUSH
59843: CALL_OW 297
59847: PUSH
59848: LD_INT 6
59850: GREATER
59851: IFFALSE 59894
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59853: LD_VAR 0 4
59857: PPUSH
59858: LD_VAR 0 2
59862: PUSH
59863: LD_VAR 0 9
59867: ARRAY
59868: PUSH
59869: LD_INT 1
59871: ARRAY
59872: PPUSH
59873: LD_VAR 0 2
59877: PUSH
59878: LD_VAR 0 9
59882: ARRAY
59883: PUSH
59884: LD_INT 2
59886: ARRAY
59887: PPUSH
59888: CALL_OW 114
59892: GO 59908
// SetTag ( i , tag ) ;
59894: LD_VAR 0 4
59898: PPUSH
59899: LD_VAR 0 9
59903: PPUSH
59904: CALL_OW 109
// end else
59908: GO 59981
// if enemy then
59910: LD_VAR 0 5
59914: IFFALSE 59981
// begin if GetWeapon ( i ) = ru_time_lapser then
59916: LD_VAR 0 4
59920: PPUSH
59921: CALL_OW 264
59925: PUSH
59926: LD_INT 49
59928: EQUAL
59929: IFFALSE 59957
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59931: LD_VAR 0 4
59935: PPUSH
59936: LD_VAR 0 5
59940: PPUSH
59941: LD_VAR 0 4
59945: PPUSH
59946: CALL_OW 74
59950: PPUSH
59951: CALL_OW 112
59955: GO 59981
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59957: LD_VAR 0 4
59961: PPUSH
59962: LD_VAR 0 5
59966: PPUSH
59967: LD_VAR 0 4
59971: PPUSH
59972: CALL_OW 74
59976: PPUSH
59977: CALL 60910 0 2
// end ; end ;
59981: GO 59561
59983: POP
59984: POP
// end ;
59985: LD_VAR 0 3
59989: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59990: LD_INT 0
59992: PPUSH
59993: PPUSH
59994: PPUSH
// if not unit or IsInUnit ( unit ) then
59995: LD_VAR 0 1
59999: NOT
60000: PUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: CALL_OW 310
60010: OR
60011: IFFALSE 60015
// exit ;
60013: GO 60106
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60015: LD_ADDR_VAR 0 4
60019: PUSH
60020: LD_VAR 0 1
60024: PPUSH
60025: CALL_OW 250
60029: PPUSH
60030: LD_VAR 0 2
60034: PPUSH
60035: LD_INT 1
60037: PPUSH
60038: CALL_OW 272
60042: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60043: LD_ADDR_VAR 0 5
60047: PUSH
60048: LD_VAR 0 1
60052: PPUSH
60053: CALL_OW 251
60057: PPUSH
60058: LD_VAR 0 2
60062: PPUSH
60063: LD_INT 1
60065: PPUSH
60066: CALL_OW 273
60070: ST_TO_ADDR
// if ValidHex ( x , y ) then
60071: LD_VAR 0 4
60075: PPUSH
60076: LD_VAR 0 5
60080: PPUSH
60081: CALL_OW 488
60085: IFFALSE 60106
// ComTurnXY ( unit , x , y ) ;
60087: LD_VAR 0 1
60091: PPUSH
60092: LD_VAR 0 4
60096: PPUSH
60097: LD_VAR 0 5
60101: PPUSH
60102: CALL_OW 118
// end ;
60106: LD_VAR 0 3
60110: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60111: LD_INT 0
60113: PPUSH
60114: PPUSH
// result := false ;
60115: LD_ADDR_VAR 0 3
60119: PUSH
60120: LD_INT 0
60122: ST_TO_ADDR
// if not units then
60123: LD_VAR 0 2
60127: NOT
60128: IFFALSE 60132
// exit ;
60130: GO 60177
// for i in units do
60132: LD_ADDR_VAR 0 4
60136: PUSH
60137: LD_VAR 0 2
60141: PUSH
60142: FOR_IN
60143: IFFALSE 60175
// if See ( side , i ) then
60145: LD_VAR 0 1
60149: PPUSH
60150: LD_VAR 0 4
60154: PPUSH
60155: CALL_OW 292
60159: IFFALSE 60173
// begin result := true ;
60161: LD_ADDR_VAR 0 3
60165: PUSH
60166: LD_INT 1
60168: ST_TO_ADDR
// exit ;
60169: POP
60170: POP
60171: GO 60177
// end ;
60173: GO 60142
60175: POP
60176: POP
// end ;
60177: LD_VAR 0 3
60181: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60182: LD_INT 0
60184: PPUSH
60185: PPUSH
60186: PPUSH
60187: PPUSH
// if not unit or not points then
60188: LD_VAR 0 1
60192: NOT
60193: PUSH
60194: LD_VAR 0 2
60198: NOT
60199: OR
60200: IFFALSE 60204
// exit ;
60202: GO 60294
// dist := 99999 ;
60204: LD_ADDR_VAR 0 5
60208: PUSH
60209: LD_INT 99999
60211: ST_TO_ADDR
// for i in points do
60212: LD_ADDR_VAR 0 4
60216: PUSH
60217: LD_VAR 0 2
60221: PUSH
60222: FOR_IN
60223: IFFALSE 60292
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60225: LD_ADDR_VAR 0 6
60229: PUSH
60230: LD_VAR 0 1
60234: PPUSH
60235: LD_VAR 0 4
60239: PUSH
60240: LD_INT 1
60242: ARRAY
60243: PPUSH
60244: LD_VAR 0 4
60248: PUSH
60249: LD_INT 2
60251: ARRAY
60252: PPUSH
60253: CALL_OW 297
60257: ST_TO_ADDR
// if tmpDist < dist then
60258: LD_VAR 0 6
60262: PUSH
60263: LD_VAR 0 5
60267: LESS
60268: IFFALSE 60290
// begin result := i ;
60270: LD_ADDR_VAR 0 3
60274: PUSH
60275: LD_VAR 0 4
60279: ST_TO_ADDR
// dist := tmpDist ;
60280: LD_ADDR_VAR 0 5
60284: PUSH
60285: LD_VAR 0 6
60289: ST_TO_ADDR
// end ; end ;
60290: GO 60222
60292: POP
60293: POP
// end ;
60294: LD_VAR 0 3
60298: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
60299: LD_INT 0
60301: PPUSH
// uc_side := side ;
60302: LD_ADDR_OWVAR 20
60306: PUSH
60307: LD_VAR 0 1
60311: ST_TO_ADDR
// uc_nation := 3 ;
60312: LD_ADDR_OWVAR 21
60316: PUSH
60317: LD_INT 3
60319: ST_TO_ADDR
// vc_chassis := 25 ;
60320: LD_ADDR_OWVAR 37
60324: PUSH
60325: LD_INT 25
60327: ST_TO_ADDR
// vc_engine := engine_siberite ;
60328: LD_ADDR_OWVAR 39
60332: PUSH
60333: LD_INT 3
60335: ST_TO_ADDR
// vc_control := control_computer ;
60336: LD_ADDR_OWVAR 38
60340: PUSH
60341: LD_INT 3
60343: ST_TO_ADDR
// vc_weapon := 59 ;
60344: LD_ADDR_OWVAR 40
60348: PUSH
60349: LD_INT 59
60351: ST_TO_ADDR
// result := CreateVehicle ;
60352: LD_ADDR_VAR 0 5
60356: PUSH
60357: CALL_OW 45
60361: ST_TO_ADDR
// SetDir ( result , d ) ;
60362: LD_VAR 0 5
60366: PPUSH
60367: LD_VAR 0 4
60371: PPUSH
60372: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
60376: LD_VAR 0 5
60380: PPUSH
60381: LD_VAR 0 2
60385: PPUSH
60386: LD_VAR 0 3
60390: PPUSH
60391: LD_INT 0
60393: PPUSH
60394: CALL_OW 48
// end ;
60398: LD_VAR 0 5
60402: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
60403: LD_INT 0
60405: PPUSH
60406: PPUSH
60407: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
60408: LD_ADDR_VAR 0 2
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
60431: LD_VAR 0 1
60435: NOT
60436: PUSH
60437: LD_VAR 0 1
60441: PPUSH
60442: CALL_OW 264
60446: PUSH
60447: LD_INT 12
60449: PUSH
60450: LD_INT 51
60452: PUSH
60453: LD_INT 32
60455: PUSH
60456: LD_INT 89
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: IN
60465: NOT
60466: OR
60467: IFFALSE 60471
// exit ;
60469: GO 60569
// for i := 1 to 3 do
60471: LD_ADDR_VAR 0 3
60475: PUSH
60476: DOUBLE
60477: LD_INT 1
60479: DEC
60480: ST_TO_ADDR
60481: LD_INT 3
60483: PUSH
60484: FOR_TO
60485: IFFALSE 60567
// begin tmp := GetCargo ( cargo , i ) ;
60487: LD_ADDR_VAR 0 4
60491: PUSH
60492: LD_VAR 0 1
60496: PPUSH
60497: LD_VAR 0 3
60501: PPUSH
60502: CALL_OW 289
60506: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
60507: LD_ADDR_VAR 0 2
60511: PUSH
60512: LD_VAR 0 2
60516: PPUSH
60517: LD_VAR 0 3
60521: PPUSH
60522: LD_VAR 0 4
60526: PPUSH
60527: CALL_OW 1
60531: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
60532: LD_ADDR_VAR 0 2
60536: PUSH
60537: LD_VAR 0 2
60541: PPUSH
60542: LD_INT 4
60544: PPUSH
60545: LD_VAR 0 2
60549: PUSH
60550: LD_INT 4
60552: ARRAY
60553: PUSH
60554: LD_VAR 0 4
60558: PLUS
60559: PPUSH
60560: CALL_OW 1
60564: ST_TO_ADDR
// end ;
60565: GO 60484
60567: POP
60568: POP
// end ;
60569: LD_VAR 0 2
60573: RET
// export function Length ( array ) ; begin
60574: LD_INT 0
60576: PPUSH
// result := array + 0 ;
60577: LD_ADDR_VAR 0 2
60581: PUSH
60582: LD_VAR 0 1
60586: PUSH
60587: LD_INT 0
60589: PLUS
60590: ST_TO_ADDR
// end ;
60591: LD_VAR 0 2
60595: RET
// export function PrepareArray ( array ) ; begin
60596: LD_INT 0
60598: PPUSH
// result := array diff 0 ;
60599: LD_ADDR_VAR 0 2
60603: PUSH
60604: LD_VAR 0 1
60608: PUSH
60609: LD_INT 0
60611: DIFF
60612: ST_TO_ADDR
// if not result [ 1 ] then
60613: LD_VAR 0 2
60617: PUSH
60618: LD_INT 1
60620: ARRAY
60621: NOT
60622: IFFALSE 60642
// result := Delete ( result , 1 ) ;
60624: LD_ADDR_VAR 0 2
60628: PUSH
60629: LD_VAR 0 2
60633: PPUSH
60634: LD_INT 1
60636: PPUSH
60637: CALL_OW 3
60641: ST_TO_ADDR
// end ;
60642: LD_VAR 0 2
60646: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
60647: LD_INT 0
60649: PPUSH
60650: PPUSH
60651: PPUSH
60652: PPUSH
// sibRocketRange := 25 ;
60653: LD_ADDR_VAR 0 6
60657: PUSH
60658: LD_INT 25
60660: ST_TO_ADDR
// result := false ;
60661: LD_ADDR_VAR 0 4
60665: PUSH
60666: LD_INT 0
60668: ST_TO_ADDR
// for i := 0 to 5 do
60669: LD_ADDR_VAR 0 5
60673: PUSH
60674: DOUBLE
60675: LD_INT 0
60677: DEC
60678: ST_TO_ADDR
60679: LD_INT 5
60681: PUSH
60682: FOR_TO
60683: IFFALSE 60750
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
60685: LD_VAR 0 1
60689: PPUSH
60690: LD_VAR 0 5
60694: PPUSH
60695: LD_VAR 0 6
60699: PPUSH
60700: CALL_OW 272
60704: PPUSH
60705: LD_VAR 0 2
60709: PPUSH
60710: LD_VAR 0 5
60714: PPUSH
60715: LD_VAR 0 6
60719: PPUSH
60720: CALL_OW 273
60724: PPUSH
60725: LD_VAR 0 3
60729: PPUSH
60730: CALL_OW 309
60734: IFFALSE 60748
// begin result := true ;
60736: LD_ADDR_VAR 0 4
60740: PUSH
60741: LD_INT 1
60743: ST_TO_ADDR
// exit ;
60744: POP
60745: POP
60746: GO 60752
// end ;
60748: GO 60682
60750: POP
60751: POP
// end ;
60752: LD_VAR 0 4
60756: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
60757: LD_INT 0
60759: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
60760: LD_VAR 0 1
60764: PPUSH
60765: LD_VAR 0 2
60769: PPUSH
60770: LD_INT 0
60772: PPUSH
60773: LD_INT 0
60775: PPUSH
60776: LD_INT 1
60778: PPUSH
60779: LD_INT 0
60781: PPUSH
60782: CALL_OW 587
// end ;
60786: LD_VAR 0 3
60790: RET
// export function CenterOnNow ( unit ) ; begin
60791: LD_INT 0
60793: PPUSH
// result := IsInUnit ( unit ) ;
60794: LD_ADDR_VAR 0 2
60798: PUSH
60799: LD_VAR 0 1
60803: PPUSH
60804: CALL_OW 310
60808: ST_TO_ADDR
// if not result then
60809: LD_VAR 0 2
60813: NOT
60814: IFFALSE 60826
// result := unit ;
60816: LD_ADDR_VAR 0 2
60820: PUSH
60821: LD_VAR 0 1
60825: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
60826: LD_VAR 0 1
60830: PPUSH
60831: CALL_OW 87
// end ;
60835: LD_VAR 0 2
60839: RET
// export function ComMoveHex ( unit , hex ) ; begin
60840: LD_INT 0
60842: PPUSH
// if not hex then
60843: LD_VAR 0 2
60847: NOT
60848: IFFALSE 60852
// exit ;
60850: GO 60905
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
60852: LD_VAR 0 2
60856: PUSH
60857: LD_INT 1
60859: ARRAY
60860: PPUSH
60861: LD_VAR 0 2
60865: PUSH
60866: LD_INT 2
60868: ARRAY
60869: PPUSH
60870: CALL_OW 428
60874: IFFALSE 60878
// exit ;
60876: GO 60905
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
60878: LD_VAR 0 1
60882: PPUSH
60883: LD_VAR 0 2
60887: PUSH
60888: LD_INT 1
60890: ARRAY
60891: PPUSH
60892: LD_VAR 0 2
60896: PUSH
60897: LD_INT 2
60899: ARRAY
60900: PPUSH
60901: CALL_OW 111
// end ;
60905: LD_VAR 0 3
60909: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
60910: LD_INT 0
60912: PPUSH
60913: PPUSH
60914: PPUSH
// if not unit or not enemy then
60915: LD_VAR 0 1
60919: NOT
60920: PUSH
60921: LD_VAR 0 2
60925: NOT
60926: OR
60927: IFFALSE 60931
// exit ;
60929: GO 61055
// x := GetX ( enemy ) ;
60931: LD_ADDR_VAR 0 4
60935: PUSH
60936: LD_VAR 0 2
60940: PPUSH
60941: CALL_OW 250
60945: ST_TO_ADDR
// y := GetY ( enemy ) ;
60946: LD_ADDR_VAR 0 5
60950: PUSH
60951: LD_VAR 0 2
60955: PPUSH
60956: CALL_OW 251
60960: ST_TO_ADDR
// if ValidHex ( x , y ) then
60961: LD_VAR 0 4
60965: PPUSH
60966: LD_VAR 0 5
60970: PPUSH
60971: CALL_OW 488
60975: IFFALSE 61055
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
60977: LD_VAR 0 2
60981: PPUSH
60982: CALL_OW 247
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: IN
60997: PUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: CALL_OW 255
61007: PPUSH
61008: LD_VAR 0 2
61012: PPUSH
61013: CALL_OW 292
61017: AND
61018: IFFALSE 61036
// ComAttackUnit ( unit , enemy ) else
61020: LD_VAR 0 1
61024: PPUSH
61025: LD_VAR 0 2
61029: PPUSH
61030: CALL_OW 115
61034: GO 61055
// ComAgressiveMove ( unit , x , y ) ;
61036: LD_VAR 0 1
61040: PPUSH
61041: LD_VAR 0 4
61045: PPUSH
61046: LD_VAR 0 5
61050: PPUSH
61051: CALL_OW 114
// end ; end_of_file end_of_file
61055: LD_VAR 0 3
61059: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61060: LD_VAR 0 1
61064: PPUSH
61065: LD_VAR 0 2
61069: PPUSH
61070: LD_VAR 0 3
61074: PPUSH
61075: LD_VAR 0 4
61079: PPUSH
61080: LD_VAR 0 5
61084: PPUSH
61085: LD_VAR 0 6
61089: PPUSH
61090: CALL 61274 0 6
// end ;
61094: PPOPN 6
61096: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
61097: LD_INT 0
61099: PPUSH
// begin if not units then
61100: LD_VAR 0 1
61104: NOT
61105: IFFALSE 61109
// exit ;
61107: GO 61109
// end ;
61109: PPOPN 7
61111: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
61112: CALL 61178 0 0
// end ; end_of_file
61116: PPOPN 1
61118: END
// export globalGameSaveCounter ; every 0 0$1 do
61119: GO 61121
61121: DISABLE
// begin enable ;
61122: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61123: LD_STRING updateTimer(
61125: PUSH
61126: LD_OWVAR 1
61130: STR
61131: PUSH
61132: LD_STRING );
61134: STR
61135: PPUSH
61136: CALL_OW 559
// end ;
61140: END
// every 0 0$1 do
61141: GO 61143
61143: DISABLE
// begin globalGameSaveCounter := 0 ;
61144: LD_ADDR_EXP 43
61148: PUSH
61149: LD_INT 0
61151: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61152: LD_STRING setGameSaveCounter(0)
61154: PPUSH
61155: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61159: LD_STRING initStreamRollete();
61161: PPUSH
61162: CALL_OW 559
// InitStreamMode ;
61166: CALL 62492 0 0
// DefineStreamItems ( false ) ;
61170: LD_INT 0
61172: PPUSH
61173: CALL 62956 0 1
// end ;
61177: END
// export function SOS_MapStart ( ) ; begin
61178: LD_INT 0
61180: PPUSH
// if streamModeActive then
61181: LD_EXP 44
61185: IFFALSE 61194
// DefineStreamItems ( true ) ;
61187: LD_INT 1
61189: PPUSH
61190: CALL 62956 0 1
// UpdateLuaVariables ( ) ;
61194: CALL 61211 0 0
// UpdateFactoryWaypoints ( ) ;
61198: CALL 75825 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61202: CALL 76082 0 0
// end ;
61206: LD_VAR 0 1
61210: RET
// function UpdateLuaVariables ( ) ; begin
61211: LD_INT 0
61213: PPUSH
// if globalGameSaveCounter then
61214: LD_EXP 43
61218: IFFALSE 61252
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61220: LD_ADDR_EXP 43
61224: PUSH
61225: LD_EXP 43
61229: PPUSH
61230: CALL 58199 0 1
61234: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61235: LD_STRING setGameSaveCounter(
61237: PUSH
61238: LD_EXP 43
61242: STR
61243: PUSH
61244: LD_STRING )
61246: STR
61247: PPUSH
61248: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61252: LD_STRING setGameDifficulty(
61254: PUSH
61255: LD_OWVAR 67
61259: STR
61260: PUSH
61261: LD_STRING )
61263: STR
61264: PPUSH
61265: CALL_OW 559
// end ;
61269: LD_VAR 0 1
61273: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61274: LD_INT 0
61276: PPUSH
// if p2 = stream_mode then
61277: LD_VAR 0 2
61281: PUSH
61282: LD_INT 100
61284: EQUAL
61285: IFFALSE 62288
// begin if not StreamModeActive then
61287: LD_EXP 44
61291: NOT
61292: IFFALSE 61302
// StreamModeActive := true ;
61294: LD_ADDR_EXP 44
61298: PUSH
61299: LD_INT 1
61301: ST_TO_ADDR
// if p3 = 0 then
61302: LD_VAR 0 3
61306: PUSH
61307: LD_INT 0
61309: EQUAL
61310: IFFALSE 61316
// InitStreamMode ;
61312: CALL 62492 0 0
// if p3 = 1 then
61316: LD_VAR 0 3
61320: PUSH
61321: LD_INT 1
61323: EQUAL
61324: IFFALSE 61334
// sRocket := true ;
61326: LD_ADDR_EXP 49
61330: PUSH
61331: LD_INT 1
61333: ST_TO_ADDR
// if p3 = 2 then
61334: LD_VAR 0 3
61338: PUSH
61339: LD_INT 2
61341: EQUAL
61342: IFFALSE 61352
// sSpeed := true ;
61344: LD_ADDR_EXP 48
61348: PUSH
61349: LD_INT 1
61351: ST_TO_ADDR
// if p3 = 3 then
61352: LD_VAR 0 3
61356: PUSH
61357: LD_INT 3
61359: EQUAL
61360: IFFALSE 61370
// sEngine := true ;
61362: LD_ADDR_EXP 50
61366: PUSH
61367: LD_INT 1
61369: ST_TO_ADDR
// if p3 = 4 then
61370: LD_VAR 0 3
61374: PUSH
61375: LD_INT 4
61377: EQUAL
61378: IFFALSE 61388
// sSpec := true ;
61380: LD_ADDR_EXP 47
61384: PUSH
61385: LD_INT 1
61387: ST_TO_ADDR
// if p3 = 5 then
61388: LD_VAR 0 3
61392: PUSH
61393: LD_INT 5
61395: EQUAL
61396: IFFALSE 61406
// sLevel := true ;
61398: LD_ADDR_EXP 51
61402: PUSH
61403: LD_INT 1
61405: ST_TO_ADDR
// if p3 = 6 then
61406: LD_VAR 0 3
61410: PUSH
61411: LD_INT 6
61413: EQUAL
61414: IFFALSE 61424
// sArmoury := true ;
61416: LD_ADDR_EXP 52
61420: PUSH
61421: LD_INT 1
61423: ST_TO_ADDR
// if p3 = 7 then
61424: LD_VAR 0 3
61428: PUSH
61429: LD_INT 7
61431: EQUAL
61432: IFFALSE 61442
// sRadar := true ;
61434: LD_ADDR_EXP 53
61438: PUSH
61439: LD_INT 1
61441: ST_TO_ADDR
// if p3 = 8 then
61442: LD_VAR 0 3
61446: PUSH
61447: LD_INT 8
61449: EQUAL
61450: IFFALSE 61460
// sBunker := true ;
61452: LD_ADDR_EXP 54
61456: PUSH
61457: LD_INT 1
61459: ST_TO_ADDR
// if p3 = 9 then
61460: LD_VAR 0 3
61464: PUSH
61465: LD_INT 9
61467: EQUAL
61468: IFFALSE 61478
// sHack := true ;
61470: LD_ADDR_EXP 55
61474: PUSH
61475: LD_INT 1
61477: ST_TO_ADDR
// if p3 = 10 then
61478: LD_VAR 0 3
61482: PUSH
61483: LD_INT 10
61485: EQUAL
61486: IFFALSE 61496
// sFire := true ;
61488: LD_ADDR_EXP 56
61492: PUSH
61493: LD_INT 1
61495: ST_TO_ADDR
// if p3 = 11 then
61496: LD_VAR 0 3
61500: PUSH
61501: LD_INT 11
61503: EQUAL
61504: IFFALSE 61514
// sRefresh := true ;
61506: LD_ADDR_EXP 57
61510: PUSH
61511: LD_INT 1
61513: ST_TO_ADDR
// if p3 = 12 then
61514: LD_VAR 0 3
61518: PUSH
61519: LD_INT 12
61521: EQUAL
61522: IFFALSE 61532
// sExp := true ;
61524: LD_ADDR_EXP 58
61528: PUSH
61529: LD_INT 1
61531: ST_TO_ADDR
// if p3 = 13 then
61532: LD_VAR 0 3
61536: PUSH
61537: LD_INT 13
61539: EQUAL
61540: IFFALSE 61550
// sDepot := true ;
61542: LD_ADDR_EXP 59
61546: PUSH
61547: LD_INT 1
61549: ST_TO_ADDR
// if p3 = 14 then
61550: LD_VAR 0 3
61554: PUSH
61555: LD_INT 14
61557: EQUAL
61558: IFFALSE 61568
// sFlag := true ;
61560: LD_ADDR_EXP 60
61564: PUSH
61565: LD_INT 1
61567: ST_TO_ADDR
// if p3 = 15 then
61568: LD_VAR 0 3
61572: PUSH
61573: LD_INT 15
61575: EQUAL
61576: IFFALSE 61586
// sKamikadze := true ;
61578: LD_ADDR_EXP 68
61582: PUSH
61583: LD_INT 1
61585: ST_TO_ADDR
// if p3 = 16 then
61586: LD_VAR 0 3
61590: PUSH
61591: LD_INT 16
61593: EQUAL
61594: IFFALSE 61604
// sTroll := true ;
61596: LD_ADDR_EXP 69
61600: PUSH
61601: LD_INT 1
61603: ST_TO_ADDR
// if p3 = 17 then
61604: LD_VAR 0 3
61608: PUSH
61609: LD_INT 17
61611: EQUAL
61612: IFFALSE 61622
// sSlow := true ;
61614: LD_ADDR_EXP 70
61618: PUSH
61619: LD_INT 1
61621: ST_TO_ADDR
// if p3 = 18 then
61622: LD_VAR 0 3
61626: PUSH
61627: LD_INT 18
61629: EQUAL
61630: IFFALSE 61640
// sLack := true ;
61632: LD_ADDR_EXP 71
61636: PUSH
61637: LD_INT 1
61639: ST_TO_ADDR
// if p3 = 19 then
61640: LD_VAR 0 3
61644: PUSH
61645: LD_INT 19
61647: EQUAL
61648: IFFALSE 61658
// sTank := true ;
61650: LD_ADDR_EXP 73
61654: PUSH
61655: LD_INT 1
61657: ST_TO_ADDR
// if p3 = 20 then
61658: LD_VAR 0 3
61662: PUSH
61663: LD_INT 20
61665: EQUAL
61666: IFFALSE 61676
// sRemote := true ;
61668: LD_ADDR_EXP 74
61672: PUSH
61673: LD_INT 1
61675: ST_TO_ADDR
// if p3 = 21 then
61676: LD_VAR 0 3
61680: PUSH
61681: LD_INT 21
61683: EQUAL
61684: IFFALSE 61694
// sPowell := true ;
61686: LD_ADDR_EXP 75
61690: PUSH
61691: LD_INT 1
61693: ST_TO_ADDR
// if p3 = 22 then
61694: LD_VAR 0 3
61698: PUSH
61699: LD_INT 22
61701: EQUAL
61702: IFFALSE 61712
// sTeleport := true ;
61704: LD_ADDR_EXP 78
61708: PUSH
61709: LD_INT 1
61711: ST_TO_ADDR
// if p3 = 23 then
61712: LD_VAR 0 3
61716: PUSH
61717: LD_INT 23
61719: EQUAL
61720: IFFALSE 61730
// sOilTower := true ;
61722: LD_ADDR_EXP 80
61726: PUSH
61727: LD_INT 1
61729: ST_TO_ADDR
// if p3 = 24 then
61730: LD_VAR 0 3
61734: PUSH
61735: LD_INT 24
61737: EQUAL
61738: IFFALSE 61748
// sShovel := true ;
61740: LD_ADDR_EXP 81
61744: PUSH
61745: LD_INT 1
61747: ST_TO_ADDR
// if p3 = 25 then
61748: LD_VAR 0 3
61752: PUSH
61753: LD_INT 25
61755: EQUAL
61756: IFFALSE 61766
// sSheik := true ;
61758: LD_ADDR_EXP 82
61762: PUSH
61763: LD_INT 1
61765: ST_TO_ADDR
// if p3 = 26 then
61766: LD_VAR 0 3
61770: PUSH
61771: LD_INT 26
61773: EQUAL
61774: IFFALSE 61784
// sEarthquake := true ;
61776: LD_ADDR_EXP 84
61780: PUSH
61781: LD_INT 1
61783: ST_TO_ADDR
// if p3 = 27 then
61784: LD_VAR 0 3
61788: PUSH
61789: LD_INT 27
61791: EQUAL
61792: IFFALSE 61802
// sAI := true ;
61794: LD_ADDR_EXP 85
61798: PUSH
61799: LD_INT 1
61801: ST_TO_ADDR
// if p3 = 28 then
61802: LD_VAR 0 3
61806: PUSH
61807: LD_INT 28
61809: EQUAL
61810: IFFALSE 61820
// sCargo := true ;
61812: LD_ADDR_EXP 88
61816: PUSH
61817: LD_INT 1
61819: ST_TO_ADDR
// if p3 = 29 then
61820: LD_VAR 0 3
61824: PUSH
61825: LD_INT 29
61827: EQUAL
61828: IFFALSE 61838
// sDLaser := true ;
61830: LD_ADDR_EXP 89
61834: PUSH
61835: LD_INT 1
61837: ST_TO_ADDR
// if p3 = 30 then
61838: LD_VAR 0 3
61842: PUSH
61843: LD_INT 30
61845: EQUAL
61846: IFFALSE 61856
// sExchange := true ;
61848: LD_ADDR_EXP 90
61852: PUSH
61853: LD_INT 1
61855: ST_TO_ADDR
// if p3 = 31 then
61856: LD_VAR 0 3
61860: PUSH
61861: LD_INT 31
61863: EQUAL
61864: IFFALSE 61874
// sFac := true ;
61866: LD_ADDR_EXP 91
61870: PUSH
61871: LD_INT 1
61873: ST_TO_ADDR
// if p3 = 32 then
61874: LD_VAR 0 3
61878: PUSH
61879: LD_INT 32
61881: EQUAL
61882: IFFALSE 61892
// sPower := true ;
61884: LD_ADDR_EXP 92
61888: PUSH
61889: LD_INT 1
61891: ST_TO_ADDR
// if p3 = 33 then
61892: LD_VAR 0 3
61896: PUSH
61897: LD_INT 33
61899: EQUAL
61900: IFFALSE 61910
// sRandom := true ;
61902: LD_ADDR_EXP 93
61906: PUSH
61907: LD_INT 1
61909: ST_TO_ADDR
// if p3 = 34 then
61910: LD_VAR 0 3
61914: PUSH
61915: LD_INT 34
61917: EQUAL
61918: IFFALSE 61928
// sShield := true ;
61920: LD_ADDR_EXP 94
61924: PUSH
61925: LD_INT 1
61927: ST_TO_ADDR
// if p3 = 35 then
61928: LD_VAR 0 3
61932: PUSH
61933: LD_INT 35
61935: EQUAL
61936: IFFALSE 61946
// sTime := true ;
61938: LD_ADDR_EXP 95
61942: PUSH
61943: LD_INT 1
61945: ST_TO_ADDR
// if p3 = 36 then
61946: LD_VAR 0 3
61950: PUSH
61951: LD_INT 36
61953: EQUAL
61954: IFFALSE 61964
// sTools := true ;
61956: LD_ADDR_EXP 96
61960: PUSH
61961: LD_INT 1
61963: ST_TO_ADDR
// if p3 = 101 then
61964: LD_VAR 0 3
61968: PUSH
61969: LD_INT 101
61971: EQUAL
61972: IFFALSE 61982
// sSold := true ;
61974: LD_ADDR_EXP 61
61978: PUSH
61979: LD_INT 1
61981: ST_TO_ADDR
// if p3 = 102 then
61982: LD_VAR 0 3
61986: PUSH
61987: LD_INT 102
61989: EQUAL
61990: IFFALSE 62000
// sDiff := true ;
61992: LD_ADDR_EXP 62
61996: PUSH
61997: LD_INT 1
61999: ST_TO_ADDR
// if p3 = 103 then
62000: LD_VAR 0 3
62004: PUSH
62005: LD_INT 103
62007: EQUAL
62008: IFFALSE 62018
// sFog := true ;
62010: LD_ADDR_EXP 65
62014: PUSH
62015: LD_INT 1
62017: ST_TO_ADDR
// if p3 = 104 then
62018: LD_VAR 0 3
62022: PUSH
62023: LD_INT 104
62025: EQUAL
62026: IFFALSE 62036
// sReset := true ;
62028: LD_ADDR_EXP 66
62032: PUSH
62033: LD_INT 1
62035: ST_TO_ADDR
// if p3 = 105 then
62036: LD_VAR 0 3
62040: PUSH
62041: LD_INT 105
62043: EQUAL
62044: IFFALSE 62054
// sSun := true ;
62046: LD_ADDR_EXP 67
62050: PUSH
62051: LD_INT 1
62053: ST_TO_ADDR
// if p3 = 106 then
62054: LD_VAR 0 3
62058: PUSH
62059: LD_INT 106
62061: EQUAL
62062: IFFALSE 62072
// sTiger := true ;
62064: LD_ADDR_EXP 63
62068: PUSH
62069: LD_INT 1
62071: ST_TO_ADDR
// if p3 = 107 then
62072: LD_VAR 0 3
62076: PUSH
62077: LD_INT 107
62079: EQUAL
62080: IFFALSE 62090
// sBomb := true ;
62082: LD_ADDR_EXP 64
62086: PUSH
62087: LD_INT 1
62089: ST_TO_ADDR
// if p3 = 108 then
62090: LD_VAR 0 3
62094: PUSH
62095: LD_INT 108
62097: EQUAL
62098: IFFALSE 62108
// sWound := true ;
62100: LD_ADDR_EXP 72
62104: PUSH
62105: LD_INT 1
62107: ST_TO_ADDR
// if p3 = 109 then
62108: LD_VAR 0 3
62112: PUSH
62113: LD_INT 109
62115: EQUAL
62116: IFFALSE 62126
// sBetray := true ;
62118: LD_ADDR_EXP 76
62122: PUSH
62123: LD_INT 1
62125: ST_TO_ADDR
// if p3 = 110 then
62126: LD_VAR 0 3
62130: PUSH
62131: LD_INT 110
62133: EQUAL
62134: IFFALSE 62144
// sContamin := true ;
62136: LD_ADDR_EXP 77
62140: PUSH
62141: LD_INT 1
62143: ST_TO_ADDR
// if p3 = 111 then
62144: LD_VAR 0 3
62148: PUSH
62149: LD_INT 111
62151: EQUAL
62152: IFFALSE 62162
// sOil := true ;
62154: LD_ADDR_EXP 79
62158: PUSH
62159: LD_INT 1
62161: ST_TO_ADDR
// if p3 = 112 then
62162: LD_VAR 0 3
62166: PUSH
62167: LD_INT 112
62169: EQUAL
62170: IFFALSE 62180
// sStu := true ;
62172: LD_ADDR_EXP 83
62176: PUSH
62177: LD_INT 1
62179: ST_TO_ADDR
// if p3 = 113 then
62180: LD_VAR 0 3
62184: PUSH
62185: LD_INT 113
62187: EQUAL
62188: IFFALSE 62198
// sBazooka := true ;
62190: LD_ADDR_EXP 86
62194: PUSH
62195: LD_INT 1
62197: ST_TO_ADDR
// if p3 = 114 then
62198: LD_VAR 0 3
62202: PUSH
62203: LD_INT 114
62205: EQUAL
62206: IFFALSE 62216
// sMortar := true ;
62208: LD_ADDR_EXP 87
62212: PUSH
62213: LD_INT 1
62215: ST_TO_ADDR
// if p3 = 115 then
62216: LD_VAR 0 3
62220: PUSH
62221: LD_INT 115
62223: EQUAL
62224: IFFALSE 62234
// sRanger := true ;
62226: LD_ADDR_EXP 97
62230: PUSH
62231: LD_INT 1
62233: ST_TO_ADDR
// if p3 = 116 then
62234: LD_VAR 0 3
62238: PUSH
62239: LD_INT 116
62241: EQUAL
62242: IFFALSE 62252
// sComputer := true ;
62244: LD_ADDR_EXP 98
62248: PUSH
62249: LD_INT 1
62251: ST_TO_ADDR
// if p3 = 117 then
62252: LD_VAR 0 3
62256: PUSH
62257: LD_INT 117
62259: EQUAL
62260: IFFALSE 62270
// s30 := true ;
62262: LD_ADDR_EXP 99
62266: PUSH
62267: LD_INT 1
62269: ST_TO_ADDR
// if p3 = 118 then
62270: LD_VAR 0 3
62274: PUSH
62275: LD_INT 118
62277: EQUAL
62278: IFFALSE 62288
// s60 := true ;
62280: LD_ADDR_EXP 100
62284: PUSH
62285: LD_INT 1
62287: ST_TO_ADDR
// end ; if p2 = hack_mode then
62288: LD_VAR 0 2
62292: PUSH
62293: LD_INT 101
62295: EQUAL
62296: IFFALSE 62424
// begin case p3 of 1 :
62298: LD_VAR 0 3
62302: PUSH
62303: LD_INT 1
62305: DOUBLE
62306: EQUAL
62307: IFTRUE 62311
62309: GO 62318
62311: POP
// hHackUnlimitedResources ; 2 :
62312: CALL 74571 0 0
62316: GO 62424
62318: LD_INT 2
62320: DOUBLE
62321: EQUAL
62322: IFTRUE 62326
62324: GO 62333
62326: POP
// hHackSetLevel10 ; 3 :
62327: CALL 74704 0 0
62331: GO 62424
62333: LD_INT 3
62335: DOUBLE
62336: EQUAL
62337: IFTRUE 62341
62339: GO 62348
62341: POP
// hHackSetLevel10YourUnits ; 4 :
62342: CALL 74789 0 0
62346: GO 62424
62348: LD_INT 4
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62356
62354: GO 62363
62356: POP
// hHackInvincible ; 5 :
62357: CALL 75237 0 0
62361: GO 62424
62363: LD_INT 5
62365: DOUBLE
62366: EQUAL
62367: IFTRUE 62371
62369: GO 62378
62371: POP
// hHackInvisible ; 6 :
62372: CALL 75348 0 0
62376: GO 62424
62378: LD_INT 6
62380: DOUBLE
62381: EQUAL
62382: IFTRUE 62386
62384: GO 62393
62386: POP
// hHackChangeYourSide ; 7 :
62387: CALL 75405 0 0
62391: GO 62424
62393: LD_INT 7
62395: DOUBLE
62396: EQUAL
62397: IFTRUE 62401
62399: GO 62408
62401: POP
// hHackChangeUnitSide ; 8 :
62402: CALL 75447 0 0
62406: GO 62424
62408: LD_INT 8
62410: DOUBLE
62411: EQUAL
62412: IFTRUE 62416
62414: GO 62423
62416: POP
// hHackFog ; end ;
62417: CALL 75548 0 0
62421: GO 62424
62423: POP
// end ; if p2 = game_save_mode then
62424: LD_VAR 0 2
62428: PUSH
62429: LD_INT 102
62431: EQUAL
62432: IFFALSE 62487
// begin if p3 = 1 then
62434: LD_VAR 0 3
62438: PUSH
62439: LD_INT 1
62441: EQUAL
62442: IFFALSE 62454
// globalGameSaveCounter := p4 ;
62444: LD_ADDR_EXP 43
62448: PUSH
62449: LD_VAR 0 4
62453: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62454: LD_VAR 0 3
62458: PUSH
62459: LD_INT 2
62461: EQUAL
62462: PUSH
62463: LD_EXP 43
62467: AND
62468: IFFALSE 62487
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62470: LD_STRING setGameSaveCounter(
62472: PUSH
62473: LD_EXP 43
62477: STR
62478: PUSH
62479: LD_STRING )
62481: STR
62482: PPUSH
62483: CALL_OW 559
// end ; end ;
62487: LD_VAR 0 7
62491: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62492: LD_INT 0
62494: PPUSH
// streamModeActive := false ;
62495: LD_ADDR_EXP 44
62499: PUSH
62500: LD_INT 0
62502: ST_TO_ADDR
// normalCounter := 36 ;
62503: LD_ADDR_EXP 45
62507: PUSH
62508: LD_INT 36
62510: ST_TO_ADDR
// hardcoreCounter := 18 ;
62511: LD_ADDR_EXP 46
62515: PUSH
62516: LD_INT 18
62518: ST_TO_ADDR
// sRocket := false ;
62519: LD_ADDR_EXP 49
62523: PUSH
62524: LD_INT 0
62526: ST_TO_ADDR
// sSpeed := false ;
62527: LD_ADDR_EXP 48
62531: PUSH
62532: LD_INT 0
62534: ST_TO_ADDR
// sEngine := false ;
62535: LD_ADDR_EXP 50
62539: PUSH
62540: LD_INT 0
62542: ST_TO_ADDR
// sSpec := false ;
62543: LD_ADDR_EXP 47
62547: PUSH
62548: LD_INT 0
62550: ST_TO_ADDR
// sLevel := false ;
62551: LD_ADDR_EXP 51
62555: PUSH
62556: LD_INT 0
62558: ST_TO_ADDR
// sArmoury := false ;
62559: LD_ADDR_EXP 52
62563: PUSH
62564: LD_INT 0
62566: ST_TO_ADDR
// sRadar := false ;
62567: LD_ADDR_EXP 53
62571: PUSH
62572: LD_INT 0
62574: ST_TO_ADDR
// sBunker := false ;
62575: LD_ADDR_EXP 54
62579: PUSH
62580: LD_INT 0
62582: ST_TO_ADDR
// sHack := false ;
62583: LD_ADDR_EXP 55
62587: PUSH
62588: LD_INT 0
62590: ST_TO_ADDR
// sFire := false ;
62591: LD_ADDR_EXP 56
62595: PUSH
62596: LD_INT 0
62598: ST_TO_ADDR
// sRefresh := false ;
62599: LD_ADDR_EXP 57
62603: PUSH
62604: LD_INT 0
62606: ST_TO_ADDR
// sExp := false ;
62607: LD_ADDR_EXP 58
62611: PUSH
62612: LD_INT 0
62614: ST_TO_ADDR
// sDepot := false ;
62615: LD_ADDR_EXP 59
62619: PUSH
62620: LD_INT 0
62622: ST_TO_ADDR
// sFlag := false ;
62623: LD_ADDR_EXP 60
62627: PUSH
62628: LD_INT 0
62630: ST_TO_ADDR
// sKamikadze := false ;
62631: LD_ADDR_EXP 68
62635: PUSH
62636: LD_INT 0
62638: ST_TO_ADDR
// sTroll := false ;
62639: LD_ADDR_EXP 69
62643: PUSH
62644: LD_INT 0
62646: ST_TO_ADDR
// sSlow := false ;
62647: LD_ADDR_EXP 70
62651: PUSH
62652: LD_INT 0
62654: ST_TO_ADDR
// sLack := false ;
62655: LD_ADDR_EXP 71
62659: PUSH
62660: LD_INT 0
62662: ST_TO_ADDR
// sTank := false ;
62663: LD_ADDR_EXP 73
62667: PUSH
62668: LD_INT 0
62670: ST_TO_ADDR
// sRemote := false ;
62671: LD_ADDR_EXP 74
62675: PUSH
62676: LD_INT 0
62678: ST_TO_ADDR
// sPowell := false ;
62679: LD_ADDR_EXP 75
62683: PUSH
62684: LD_INT 0
62686: ST_TO_ADDR
// sTeleport := false ;
62687: LD_ADDR_EXP 78
62691: PUSH
62692: LD_INT 0
62694: ST_TO_ADDR
// sOilTower := false ;
62695: LD_ADDR_EXP 80
62699: PUSH
62700: LD_INT 0
62702: ST_TO_ADDR
// sShovel := false ;
62703: LD_ADDR_EXP 81
62707: PUSH
62708: LD_INT 0
62710: ST_TO_ADDR
// sSheik := false ;
62711: LD_ADDR_EXP 82
62715: PUSH
62716: LD_INT 0
62718: ST_TO_ADDR
// sEarthquake := false ;
62719: LD_ADDR_EXP 84
62723: PUSH
62724: LD_INT 0
62726: ST_TO_ADDR
// sAI := false ;
62727: LD_ADDR_EXP 85
62731: PUSH
62732: LD_INT 0
62734: ST_TO_ADDR
// sCargo := false ;
62735: LD_ADDR_EXP 88
62739: PUSH
62740: LD_INT 0
62742: ST_TO_ADDR
// sDLaser := false ;
62743: LD_ADDR_EXP 89
62747: PUSH
62748: LD_INT 0
62750: ST_TO_ADDR
// sExchange := false ;
62751: LD_ADDR_EXP 90
62755: PUSH
62756: LD_INT 0
62758: ST_TO_ADDR
// sFac := false ;
62759: LD_ADDR_EXP 91
62763: PUSH
62764: LD_INT 0
62766: ST_TO_ADDR
// sPower := false ;
62767: LD_ADDR_EXP 92
62771: PUSH
62772: LD_INT 0
62774: ST_TO_ADDR
// sRandom := false ;
62775: LD_ADDR_EXP 93
62779: PUSH
62780: LD_INT 0
62782: ST_TO_ADDR
// sShield := false ;
62783: LD_ADDR_EXP 94
62787: PUSH
62788: LD_INT 0
62790: ST_TO_ADDR
// sTime := false ;
62791: LD_ADDR_EXP 95
62795: PUSH
62796: LD_INT 0
62798: ST_TO_ADDR
// sTools := false ;
62799: LD_ADDR_EXP 96
62803: PUSH
62804: LD_INT 0
62806: ST_TO_ADDR
// sSold := false ;
62807: LD_ADDR_EXP 61
62811: PUSH
62812: LD_INT 0
62814: ST_TO_ADDR
// sDiff := false ;
62815: LD_ADDR_EXP 62
62819: PUSH
62820: LD_INT 0
62822: ST_TO_ADDR
// sFog := false ;
62823: LD_ADDR_EXP 65
62827: PUSH
62828: LD_INT 0
62830: ST_TO_ADDR
// sReset := false ;
62831: LD_ADDR_EXP 66
62835: PUSH
62836: LD_INT 0
62838: ST_TO_ADDR
// sSun := false ;
62839: LD_ADDR_EXP 67
62843: PUSH
62844: LD_INT 0
62846: ST_TO_ADDR
// sTiger := false ;
62847: LD_ADDR_EXP 63
62851: PUSH
62852: LD_INT 0
62854: ST_TO_ADDR
// sBomb := false ;
62855: LD_ADDR_EXP 64
62859: PUSH
62860: LD_INT 0
62862: ST_TO_ADDR
// sWound := false ;
62863: LD_ADDR_EXP 72
62867: PUSH
62868: LD_INT 0
62870: ST_TO_ADDR
// sBetray := false ;
62871: LD_ADDR_EXP 76
62875: PUSH
62876: LD_INT 0
62878: ST_TO_ADDR
// sContamin := false ;
62879: LD_ADDR_EXP 77
62883: PUSH
62884: LD_INT 0
62886: ST_TO_ADDR
// sOil := false ;
62887: LD_ADDR_EXP 79
62891: PUSH
62892: LD_INT 0
62894: ST_TO_ADDR
// sStu := false ;
62895: LD_ADDR_EXP 83
62899: PUSH
62900: LD_INT 0
62902: ST_TO_ADDR
// sBazooka := false ;
62903: LD_ADDR_EXP 86
62907: PUSH
62908: LD_INT 0
62910: ST_TO_ADDR
// sMortar := false ;
62911: LD_ADDR_EXP 87
62915: PUSH
62916: LD_INT 0
62918: ST_TO_ADDR
// sRanger := false ;
62919: LD_ADDR_EXP 97
62923: PUSH
62924: LD_INT 0
62926: ST_TO_ADDR
// sComputer := false ;
62927: LD_ADDR_EXP 98
62931: PUSH
62932: LD_INT 0
62934: ST_TO_ADDR
// s30 := false ;
62935: LD_ADDR_EXP 99
62939: PUSH
62940: LD_INT 0
62942: ST_TO_ADDR
// s60 := false ;
62943: LD_ADDR_EXP 100
62947: PUSH
62948: LD_INT 0
62950: ST_TO_ADDR
// end ;
62951: LD_VAR 0 1
62955: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62956: LD_INT 0
62958: PPUSH
62959: PPUSH
62960: PPUSH
62961: PPUSH
62962: PPUSH
62963: PPUSH
62964: PPUSH
// result := [ ] ;
62965: LD_ADDR_VAR 0 2
62969: PUSH
62970: EMPTY
62971: ST_TO_ADDR
// if campaign_id = 1 then
62972: LD_OWVAR 69
62976: PUSH
62977: LD_INT 1
62979: EQUAL
62980: IFFALSE 66146
// begin case mission_number of 1 :
62982: LD_OWVAR 70
62986: PUSH
62987: LD_INT 1
62989: DOUBLE
62990: EQUAL
62991: IFTRUE 62995
62993: GO 63071
62995: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62996: LD_ADDR_VAR 0 2
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: LD_INT 4
63006: PUSH
63007: LD_INT 11
63009: PUSH
63010: LD_INT 12
63012: PUSH
63013: LD_INT 15
63015: PUSH
63016: LD_INT 16
63018: PUSH
63019: LD_INT 22
63021: PUSH
63022: LD_INT 23
63024: PUSH
63025: LD_INT 26
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 101
63041: PUSH
63042: LD_INT 102
63044: PUSH
63045: LD_INT 106
63047: PUSH
63048: LD_INT 116
63050: PUSH
63051: LD_INT 117
63053: PUSH
63054: LD_INT 118
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: ST_TO_ADDR
63069: GO 66144
63071: LD_INT 2
63073: DOUBLE
63074: EQUAL
63075: IFTRUE 63079
63077: GO 63163
63079: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63080: LD_ADDR_VAR 0 2
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: LD_INT 4
63090: PUSH
63091: LD_INT 11
63093: PUSH
63094: LD_INT 12
63096: PUSH
63097: LD_INT 15
63099: PUSH
63100: LD_INT 16
63102: PUSH
63103: LD_INT 22
63105: PUSH
63106: LD_INT 23
63108: PUSH
63109: LD_INT 26
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 101
63125: PUSH
63126: LD_INT 102
63128: PUSH
63129: LD_INT 105
63131: PUSH
63132: LD_INT 106
63134: PUSH
63135: LD_INT 108
63137: PUSH
63138: LD_INT 116
63140: PUSH
63141: LD_INT 117
63143: PUSH
63144: LD_INT 118
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: ST_TO_ADDR
63161: GO 66144
63163: LD_INT 3
63165: DOUBLE
63166: EQUAL
63167: IFTRUE 63171
63169: GO 63259
63171: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63172: LD_ADDR_VAR 0 2
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: LD_INT 4
63182: PUSH
63183: LD_INT 5
63185: PUSH
63186: LD_INT 11
63188: PUSH
63189: LD_INT 12
63191: PUSH
63192: LD_INT 15
63194: PUSH
63195: LD_INT 16
63197: PUSH
63198: LD_INT 22
63200: PUSH
63201: LD_INT 26
63203: PUSH
63204: LD_INT 36
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 101
63221: PUSH
63222: LD_INT 102
63224: PUSH
63225: LD_INT 105
63227: PUSH
63228: LD_INT 106
63230: PUSH
63231: LD_INT 108
63233: PUSH
63234: LD_INT 116
63236: PUSH
63237: LD_INT 117
63239: PUSH
63240: LD_INT 118
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: ST_TO_ADDR
63257: GO 66144
63259: LD_INT 4
63261: DOUBLE
63262: EQUAL
63263: IFTRUE 63267
63265: GO 63363
63267: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63268: LD_ADDR_VAR 0 2
63272: PUSH
63273: LD_INT 2
63275: PUSH
63276: LD_INT 4
63278: PUSH
63279: LD_INT 5
63281: PUSH
63282: LD_INT 8
63284: PUSH
63285: LD_INT 11
63287: PUSH
63288: LD_INT 12
63290: PUSH
63291: LD_INT 15
63293: PUSH
63294: LD_INT 16
63296: PUSH
63297: LD_INT 22
63299: PUSH
63300: LD_INT 23
63302: PUSH
63303: LD_INT 26
63305: PUSH
63306: LD_INT 36
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 101
63325: PUSH
63326: LD_INT 102
63328: PUSH
63329: LD_INT 105
63331: PUSH
63332: LD_INT 106
63334: PUSH
63335: LD_INT 108
63337: PUSH
63338: LD_INT 116
63340: PUSH
63341: LD_INT 117
63343: PUSH
63344: LD_INT 118
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: ST_TO_ADDR
63361: GO 66144
63363: LD_INT 5
63365: DOUBLE
63366: EQUAL
63367: IFTRUE 63371
63369: GO 63483
63371: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63372: LD_ADDR_VAR 0 2
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 4
63382: PUSH
63383: LD_INT 5
63385: PUSH
63386: LD_INT 6
63388: PUSH
63389: LD_INT 8
63391: PUSH
63392: LD_INT 11
63394: PUSH
63395: LD_INT 12
63397: PUSH
63398: LD_INT 15
63400: PUSH
63401: LD_INT 16
63403: PUSH
63404: LD_INT 22
63406: PUSH
63407: LD_INT 23
63409: PUSH
63410: LD_INT 25
63412: PUSH
63413: LD_INT 26
63415: PUSH
63416: LD_INT 36
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 101
63437: PUSH
63438: LD_INT 102
63440: PUSH
63441: LD_INT 105
63443: PUSH
63444: LD_INT 106
63446: PUSH
63447: LD_INT 108
63449: PUSH
63450: LD_INT 109
63452: PUSH
63453: LD_INT 112
63455: PUSH
63456: LD_INT 116
63458: PUSH
63459: LD_INT 117
63461: PUSH
63462: LD_INT 118
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: ST_TO_ADDR
63481: GO 66144
63483: LD_INT 6
63485: DOUBLE
63486: EQUAL
63487: IFTRUE 63491
63489: GO 63623
63491: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63492: LD_ADDR_VAR 0 2
63496: PUSH
63497: LD_INT 2
63499: PUSH
63500: LD_INT 4
63502: PUSH
63503: LD_INT 5
63505: PUSH
63506: LD_INT 6
63508: PUSH
63509: LD_INT 8
63511: PUSH
63512: LD_INT 11
63514: PUSH
63515: LD_INT 12
63517: PUSH
63518: LD_INT 15
63520: PUSH
63521: LD_INT 16
63523: PUSH
63524: LD_INT 20
63526: PUSH
63527: LD_INT 21
63529: PUSH
63530: LD_INT 22
63532: PUSH
63533: LD_INT 23
63535: PUSH
63536: LD_INT 25
63538: PUSH
63539: LD_INT 26
63541: PUSH
63542: LD_INT 30
63544: PUSH
63545: LD_INT 31
63547: PUSH
63548: LD_INT 32
63550: PUSH
63551: LD_INT 36
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 101
63577: PUSH
63578: LD_INT 102
63580: PUSH
63581: LD_INT 105
63583: PUSH
63584: LD_INT 106
63586: PUSH
63587: LD_INT 108
63589: PUSH
63590: LD_INT 109
63592: PUSH
63593: LD_INT 112
63595: PUSH
63596: LD_INT 116
63598: PUSH
63599: LD_INT 117
63601: PUSH
63602: LD_INT 118
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: ST_TO_ADDR
63621: GO 66144
63623: LD_INT 7
63625: DOUBLE
63626: EQUAL
63627: IFTRUE 63631
63629: GO 63743
63631: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63632: LD_ADDR_VAR 0 2
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: LD_INT 4
63642: PUSH
63643: LD_INT 5
63645: PUSH
63646: LD_INT 7
63648: PUSH
63649: LD_INT 11
63651: PUSH
63652: LD_INT 12
63654: PUSH
63655: LD_INT 15
63657: PUSH
63658: LD_INT 16
63660: PUSH
63661: LD_INT 20
63663: PUSH
63664: LD_INT 21
63666: PUSH
63667: LD_INT 22
63669: PUSH
63670: LD_INT 23
63672: PUSH
63673: LD_INT 25
63675: PUSH
63676: LD_INT 26
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 101
63697: PUSH
63698: LD_INT 102
63700: PUSH
63701: LD_INT 103
63703: PUSH
63704: LD_INT 105
63706: PUSH
63707: LD_INT 106
63709: PUSH
63710: LD_INT 108
63712: PUSH
63713: LD_INT 112
63715: PUSH
63716: LD_INT 116
63718: PUSH
63719: LD_INT 117
63721: PUSH
63722: LD_INT 118
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: ST_TO_ADDR
63741: GO 66144
63743: LD_INT 8
63745: DOUBLE
63746: EQUAL
63747: IFTRUE 63751
63749: GO 63891
63751: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63752: LD_ADDR_VAR 0 2
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: LD_INT 4
63762: PUSH
63763: LD_INT 5
63765: PUSH
63766: LD_INT 6
63768: PUSH
63769: LD_INT 7
63771: PUSH
63772: LD_INT 8
63774: PUSH
63775: LD_INT 11
63777: PUSH
63778: LD_INT 12
63780: PUSH
63781: LD_INT 15
63783: PUSH
63784: LD_INT 16
63786: PUSH
63787: LD_INT 20
63789: PUSH
63790: LD_INT 21
63792: PUSH
63793: LD_INT 22
63795: PUSH
63796: LD_INT 23
63798: PUSH
63799: LD_INT 25
63801: PUSH
63802: LD_INT 26
63804: PUSH
63805: LD_INT 30
63807: PUSH
63808: LD_INT 31
63810: PUSH
63811: LD_INT 32
63813: PUSH
63814: LD_INT 36
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 101
63841: PUSH
63842: LD_INT 102
63844: PUSH
63845: LD_INT 103
63847: PUSH
63848: LD_INT 105
63850: PUSH
63851: LD_INT 106
63853: PUSH
63854: LD_INT 108
63856: PUSH
63857: LD_INT 109
63859: PUSH
63860: LD_INT 112
63862: PUSH
63863: LD_INT 116
63865: PUSH
63866: LD_INT 117
63868: PUSH
63869: LD_INT 118
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: ST_TO_ADDR
63889: GO 66144
63891: LD_INT 9
63893: DOUBLE
63894: EQUAL
63895: IFTRUE 63899
63897: GO 64047
63899: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63900: LD_ADDR_VAR 0 2
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: LD_INT 4
63910: PUSH
63911: LD_INT 5
63913: PUSH
63914: LD_INT 6
63916: PUSH
63917: LD_INT 7
63919: PUSH
63920: LD_INT 8
63922: PUSH
63923: LD_INT 11
63925: PUSH
63926: LD_INT 12
63928: PUSH
63929: LD_INT 15
63931: PUSH
63932: LD_INT 16
63934: PUSH
63935: LD_INT 20
63937: PUSH
63938: LD_INT 21
63940: PUSH
63941: LD_INT 22
63943: PUSH
63944: LD_INT 23
63946: PUSH
63947: LD_INT 25
63949: PUSH
63950: LD_INT 26
63952: PUSH
63953: LD_INT 28
63955: PUSH
63956: LD_INT 30
63958: PUSH
63959: LD_INT 31
63961: PUSH
63962: LD_INT 32
63964: PUSH
63965: LD_INT 36
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 101
63993: PUSH
63994: LD_INT 102
63996: PUSH
63997: LD_INT 103
63999: PUSH
64000: LD_INT 105
64002: PUSH
64003: LD_INT 106
64005: PUSH
64006: LD_INT 108
64008: PUSH
64009: LD_INT 109
64011: PUSH
64012: LD_INT 112
64014: PUSH
64015: LD_INT 114
64017: PUSH
64018: LD_INT 116
64020: PUSH
64021: LD_INT 117
64023: PUSH
64024: LD_INT 118
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: ST_TO_ADDR
64045: GO 66144
64047: LD_INT 10
64049: DOUBLE
64050: EQUAL
64051: IFTRUE 64055
64053: GO 64251
64055: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64056: LD_ADDR_VAR 0 2
64060: PUSH
64061: LD_INT 2
64063: PUSH
64064: LD_INT 4
64066: PUSH
64067: LD_INT 5
64069: PUSH
64070: LD_INT 6
64072: PUSH
64073: LD_INT 7
64075: PUSH
64076: LD_INT 8
64078: PUSH
64079: LD_INT 9
64081: PUSH
64082: LD_INT 10
64084: PUSH
64085: LD_INT 11
64087: PUSH
64088: LD_INT 12
64090: PUSH
64091: LD_INT 13
64093: PUSH
64094: LD_INT 14
64096: PUSH
64097: LD_INT 15
64099: PUSH
64100: LD_INT 16
64102: PUSH
64103: LD_INT 17
64105: PUSH
64106: LD_INT 18
64108: PUSH
64109: LD_INT 19
64111: PUSH
64112: LD_INT 20
64114: PUSH
64115: LD_INT 21
64117: PUSH
64118: LD_INT 22
64120: PUSH
64121: LD_INT 23
64123: PUSH
64124: LD_INT 24
64126: PUSH
64127: LD_INT 25
64129: PUSH
64130: LD_INT 26
64132: PUSH
64133: LD_INT 28
64135: PUSH
64136: LD_INT 30
64138: PUSH
64139: LD_INT 31
64141: PUSH
64142: LD_INT 32
64144: PUSH
64145: LD_INT 36
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 101
64181: PUSH
64182: LD_INT 102
64184: PUSH
64185: LD_INT 103
64187: PUSH
64188: LD_INT 104
64190: PUSH
64191: LD_INT 105
64193: PUSH
64194: LD_INT 106
64196: PUSH
64197: LD_INT 107
64199: PUSH
64200: LD_INT 108
64202: PUSH
64203: LD_INT 109
64205: PUSH
64206: LD_INT 110
64208: PUSH
64209: LD_INT 111
64211: PUSH
64212: LD_INT 112
64214: PUSH
64215: LD_INT 114
64217: PUSH
64218: LD_INT 116
64220: PUSH
64221: LD_INT 117
64223: PUSH
64224: LD_INT 118
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: ST_TO_ADDR
64249: GO 66144
64251: LD_INT 11
64253: DOUBLE
64254: EQUAL
64255: IFTRUE 64259
64257: GO 64463
64259: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64260: LD_ADDR_VAR 0 2
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: LD_INT 3
64270: PUSH
64271: LD_INT 4
64273: PUSH
64274: LD_INT 5
64276: PUSH
64277: LD_INT 6
64279: PUSH
64280: LD_INT 7
64282: PUSH
64283: LD_INT 8
64285: PUSH
64286: LD_INT 9
64288: PUSH
64289: LD_INT 10
64291: PUSH
64292: LD_INT 11
64294: PUSH
64295: LD_INT 12
64297: PUSH
64298: LD_INT 13
64300: PUSH
64301: LD_INT 14
64303: PUSH
64304: LD_INT 15
64306: PUSH
64307: LD_INT 16
64309: PUSH
64310: LD_INT 17
64312: PUSH
64313: LD_INT 18
64315: PUSH
64316: LD_INT 19
64318: PUSH
64319: LD_INT 20
64321: PUSH
64322: LD_INT 21
64324: PUSH
64325: LD_INT 22
64327: PUSH
64328: LD_INT 23
64330: PUSH
64331: LD_INT 24
64333: PUSH
64334: LD_INT 25
64336: PUSH
64337: LD_INT 26
64339: PUSH
64340: LD_INT 28
64342: PUSH
64343: LD_INT 30
64345: PUSH
64346: LD_INT 31
64348: PUSH
64349: LD_INT 32
64351: PUSH
64352: LD_INT 34
64354: PUSH
64355: LD_INT 36
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 101
64393: PUSH
64394: LD_INT 102
64396: PUSH
64397: LD_INT 103
64399: PUSH
64400: LD_INT 104
64402: PUSH
64403: LD_INT 105
64405: PUSH
64406: LD_INT 106
64408: PUSH
64409: LD_INT 107
64411: PUSH
64412: LD_INT 108
64414: PUSH
64415: LD_INT 109
64417: PUSH
64418: LD_INT 110
64420: PUSH
64421: LD_INT 111
64423: PUSH
64424: LD_INT 112
64426: PUSH
64427: LD_INT 114
64429: PUSH
64430: LD_INT 116
64432: PUSH
64433: LD_INT 117
64435: PUSH
64436: LD_INT 118
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: ST_TO_ADDR
64461: GO 66144
64463: LD_INT 12
64465: DOUBLE
64466: EQUAL
64467: IFTRUE 64471
64469: GO 64691
64471: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64472: LD_ADDR_VAR 0 2
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: LD_INT 3
64485: PUSH
64486: LD_INT 4
64488: PUSH
64489: LD_INT 5
64491: PUSH
64492: LD_INT 6
64494: PUSH
64495: LD_INT 7
64497: PUSH
64498: LD_INT 8
64500: PUSH
64501: LD_INT 9
64503: PUSH
64504: LD_INT 10
64506: PUSH
64507: LD_INT 11
64509: PUSH
64510: LD_INT 12
64512: PUSH
64513: LD_INT 13
64515: PUSH
64516: LD_INT 14
64518: PUSH
64519: LD_INT 15
64521: PUSH
64522: LD_INT 16
64524: PUSH
64525: LD_INT 17
64527: PUSH
64528: LD_INT 18
64530: PUSH
64531: LD_INT 19
64533: PUSH
64534: LD_INT 20
64536: PUSH
64537: LD_INT 21
64539: PUSH
64540: LD_INT 22
64542: PUSH
64543: LD_INT 23
64545: PUSH
64546: LD_INT 24
64548: PUSH
64549: LD_INT 25
64551: PUSH
64552: LD_INT 26
64554: PUSH
64555: LD_INT 27
64557: PUSH
64558: LD_INT 28
64560: PUSH
64561: LD_INT 30
64563: PUSH
64564: LD_INT 31
64566: PUSH
64567: LD_INT 32
64569: PUSH
64570: LD_INT 33
64572: PUSH
64573: LD_INT 34
64575: PUSH
64576: LD_INT 36
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 101
64617: PUSH
64618: LD_INT 102
64620: PUSH
64621: LD_INT 103
64623: PUSH
64624: LD_INT 104
64626: PUSH
64627: LD_INT 105
64629: PUSH
64630: LD_INT 106
64632: PUSH
64633: LD_INT 107
64635: PUSH
64636: LD_INT 108
64638: PUSH
64639: LD_INT 109
64641: PUSH
64642: LD_INT 110
64644: PUSH
64645: LD_INT 111
64647: PUSH
64648: LD_INT 112
64650: PUSH
64651: LD_INT 113
64653: PUSH
64654: LD_INT 114
64656: PUSH
64657: LD_INT 116
64659: PUSH
64660: LD_INT 117
64662: PUSH
64663: LD_INT 118
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: ST_TO_ADDR
64689: GO 66144
64691: LD_INT 13
64693: DOUBLE
64694: EQUAL
64695: IFTRUE 64699
64697: GO 64907
64699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64700: LD_ADDR_VAR 0 2
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: LD_INT 3
64713: PUSH
64714: LD_INT 4
64716: PUSH
64717: LD_INT 5
64719: PUSH
64720: LD_INT 8
64722: PUSH
64723: LD_INT 9
64725: PUSH
64726: LD_INT 10
64728: PUSH
64729: LD_INT 11
64731: PUSH
64732: LD_INT 12
64734: PUSH
64735: LD_INT 14
64737: PUSH
64738: LD_INT 15
64740: PUSH
64741: LD_INT 16
64743: PUSH
64744: LD_INT 17
64746: PUSH
64747: LD_INT 18
64749: PUSH
64750: LD_INT 19
64752: PUSH
64753: LD_INT 20
64755: PUSH
64756: LD_INT 21
64758: PUSH
64759: LD_INT 22
64761: PUSH
64762: LD_INT 23
64764: PUSH
64765: LD_INT 24
64767: PUSH
64768: LD_INT 25
64770: PUSH
64771: LD_INT 26
64773: PUSH
64774: LD_INT 27
64776: PUSH
64777: LD_INT 28
64779: PUSH
64780: LD_INT 30
64782: PUSH
64783: LD_INT 31
64785: PUSH
64786: LD_INT 32
64788: PUSH
64789: LD_INT 33
64791: PUSH
64792: LD_INT 34
64794: PUSH
64795: LD_INT 36
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 101
64833: PUSH
64834: LD_INT 102
64836: PUSH
64837: LD_INT 103
64839: PUSH
64840: LD_INT 104
64842: PUSH
64843: LD_INT 105
64845: PUSH
64846: LD_INT 106
64848: PUSH
64849: LD_INT 107
64851: PUSH
64852: LD_INT 108
64854: PUSH
64855: LD_INT 109
64857: PUSH
64858: LD_INT 110
64860: PUSH
64861: LD_INT 111
64863: PUSH
64864: LD_INT 112
64866: PUSH
64867: LD_INT 113
64869: PUSH
64870: LD_INT 114
64872: PUSH
64873: LD_INT 116
64875: PUSH
64876: LD_INT 117
64878: PUSH
64879: LD_INT 118
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: ST_TO_ADDR
64905: GO 66144
64907: LD_INT 14
64909: DOUBLE
64910: EQUAL
64911: IFTRUE 64915
64913: GO 65139
64915: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64916: LD_ADDR_VAR 0 2
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: LD_INT 4
64932: PUSH
64933: LD_INT 5
64935: PUSH
64936: LD_INT 6
64938: PUSH
64939: LD_INT 7
64941: PUSH
64942: LD_INT 8
64944: PUSH
64945: LD_INT 9
64947: PUSH
64948: LD_INT 10
64950: PUSH
64951: LD_INT 11
64953: PUSH
64954: LD_INT 12
64956: PUSH
64957: LD_INT 13
64959: PUSH
64960: LD_INT 14
64962: PUSH
64963: LD_INT 15
64965: PUSH
64966: LD_INT 16
64968: PUSH
64969: LD_INT 17
64971: PUSH
64972: LD_INT 18
64974: PUSH
64975: LD_INT 19
64977: PUSH
64978: LD_INT 20
64980: PUSH
64981: LD_INT 21
64983: PUSH
64984: LD_INT 22
64986: PUSH
64987: LD_INT 23
64989: PUSH
64990: LD_INT 24
64992: PUSH
64993: LD_INT 25
64995: PUSH
64996: LD_INT 26
64998: PUSH
64999: LD_INT 27
65001: PUSH
65002: LD_INT 28
65004: PUSH
65005: LD_INT 29
65007: PUSH
65008: LD_INT 30
65010: PUSH
65011: LD_INT 31
65013: PUSH
65014: LD_INT 32
65016: PUSH
65017: LD_INT 33
65019: PUSH
65020: LD_INT 34
65022: PUSH
65023: LD_INT 36
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 101
65065: PUSH
65066: LD_INT 102
65068: PUSH
65069: LD_INT 103
65071: PUSH
65072: LD_INT 104
65074: PUSH
65075: LD_INT 105
65077: PUSH
65078: LD_INT 106
65080: PUSH
65081: LD_INT 107
65083: PUSH
65084: LD_INT 108
65086: PUSH
65087: LD_INT 109
65089: PUSH
65090: LD_INT 110
65092: PUSH
65093: LD_INT 111
65095: PUSH
65096: LD_INT 112
65098: PUSH
65099: LD_INT 113
65101: PUSH
65102: LD_INT 114
65104: PUSH
65105: LD_INT 116
65107: PUSH
65108: LD_INT 117
65110: PUSH
65111: LD_INT 118
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: ST_TO_ADDR
65137: GO 66144
65139: LD_INT 15
65141: DOUBLE
65142: EQUAL
65143: IFTRUE 65147
65145: GO 65371
65147: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65148: LD_ADDR_VAR 0 2
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: LD_INT 3
65161: PUSH
65162: LD_INT 4
65164: PUSH
65165: LD_INT 5
65167: PUSH
65168: LD_INT 6
65170: PUSH
65171: LD_INT 7
65173: PUSH
65174: LD_INT 8
65176: PUSH
65177: LD_INT 9
65179: PUSH
65180: LD_INT 10
65182: PUSH
65183: LD_INT 11
65185: PUSH
65186: LD_INT 12
65188: PUSH
65189: LD_INT 13
65191: PUSH
65192: LD_INT 14
65194: PUSH
65195: LD_INT 15
65197: PUSH
65198: LD_INT 16
65200: PUSH
65201: LD_INT 17
65203: PUSH
65204: LD_INT 18
65206: PUSH
65207: LD_INT 19
65209: PUSH
65210: LD_INT 20
65212: PUSH
65213: LD_INT 21
65215: PUSH
65216: LD_INT 22
65218: PUSH
65219: LD_INT 23
65221: PUSH
65222: LD_INT 24
65224: PUSH
65225: LD_INT 25
65227: PUSH
65228: LD_INT 26
65230: PUSH
65231: LD_INT 27
65233: PUSH
65234: LD_INT 28
65236: PUSH
65237: LD_INT 29
65239: PUSH
65240: LD_INT 30
65242: PUSH
65243: LD_INT 31
65245: PUSH
65246: LD_INT 32
65248: PUSH
65249: LD_INT 33
65251: PUSH
65252: LD_INT 34
65254: PUSH
65255: LD_INT 36
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 101
65297: PUSH
65298: LD_INT 102
65300: PUSH
65301: LD_INT 103
65303: PUSH
65304: LD_INT 104
65306: PUSH
65307: LD_INT 105
65309: PUSH
65310: LD_INT 106
65312: PUSH
65313: LD_INT 107
65315: PUSH
65316: LD_INT 108
65318: PUSH
65319: LD_INT 109
65321: PUSH
65322: LD_INT 110
65324: PUSH
65325: LD_INT 111
65327: PUSH
65328: LD_INT 112
65330: PUSH
65331: LD_INT 113
65333: PUSH
65334: LD_INT 114
65336: PUSH
65337: LD_INT 116
65339: PUSH
65340: LD_INT 117
65342: PUSH
65343: LD_INT 118
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: ST_TO_ADDR
65369: GO 66144
65371: LD_INT 16
65373: DOUBLE
65374: EQUAL
65375: IFTRUE 65379
65377: GO 65515
65379: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65380: LD_ADDR_VAR 0 2
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: LD_INT 4
65390: PUSH
65391: LD_INT 5
65393: PUSH
65394: LD_INT 7
65396: PUSH
65397: LD_INT 11
65399: PUSH
65400: LD_INT 12
65402: PUSH
65403: LD_INT 15
65405: PUSH
65406: LD_INT 16
65408: PUSH
65409: LD_INT 20
65411: PUSH
65412: LD_INT 21
65414: PUSH
65415: LD_INT 22
65417: PUSH
65418: LD_INT 23
65420: PUSH
65421: LD_INT 25
65423: PUSH
65424: LD_INT 26
65426: PUSH
65427: LD_INT 30
65429: PUSH
65430: LD_INT 31
65432: PUSH
65433: LD_INT 32
65435: PUSH
65436: LD_INT 33
65438: PUSH
65439: LD_INT 34
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 101
65465: PUSH
65466: LD_INT 102
65468: PUSH
65469: LD_INT 103
65471: PUSH
65472: LD_INT 106
65474: PUSH
65475: LD_INT 108
65477: PUSH
65478: LD_INT 112
65480: PUSH
65481: LD_INT 113
65483: PUSH
65484: LD_INT 114
65486: PUSH
65487: LD_INT 116
65489: PUSH
65490: LD_INT 117
65492: PUSH
65493: LD_INT 118
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: ST_TO_ADDR
65513: GO 66144
65515: LD_INT 17
65517: DOUBLE
65518: EQUAL
65519: IFTRUE 65523
65521: GO 65747
65523: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65524: LD_ADDR_VAR 0 2
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: LD_INT 3
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: LD_INT 5
65543: PUSH
65544: LD_INT 6
65546: PUSH
65547: LD_INT 7
65549: PUSH
65550: LD_INT 8
65552: PUSH
65553: LD_INT 9
65555: PUSH
65556: LD_INT 10
65558: PUSH
65559: LD_INT 11
65561: PUSH
65562: LD_INT 12
65564: PUSH
65565: LD_INT 13
65567: PUSH
65568: LD_INT 14
65570: PUSH
65571: LD_INT 15
65573: PUSH
65574: LD_INT 16
65576: PUSH
65577: LD_INT 17
65579: PUSH
65580: LD_INT 18
65582: PUSH
65583: LD_INT 19
65585: PUSH
65586: LD_INT 20
65588: PUSH
65589: LD_INT 21
65591: PUSH
65592: LD_INT 22
65594: PUSH
65595: LD_INT 23
65597: PUSH
65598: LD_INT 24
65600: PUSH
65601: LD_INT 25
65603: PUSH
65604: LD_INT 26
65606: PUSH
65607: LD_INT 27
65609: PUSH
65610: LD_INT 28
65612: PUSH
65613: LD_INT 29
65615: PUSH
65616: LD_INT 30
65618: PUSH
65619: LD_INT 31
65621: PUSH
65622: LD_INT 32
65624: PUSH
65625: LD_INT 33
65627: PUSH
65628: LD_INT 34
65630: PUSH
65631: LD_INT 36
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 101
65673: PUSH
65674: LD_INT 102
65676: PUSH
65677: LD_INT 103
65679: PUSH
65680: LD_INT 104
65682: PUSH
65683: LD_INT 105
65685: PUSH
65686: LD_INT 106
65688: PUSH
65689: LD_INT 107
65691: PUSH
65692: LD_INT 108
65694: PUSH
65695: LD_INT 109
65697: PUSH
65698: LD_INT 110
65700: PUSH
65701: LD_INT 111
65703: PUSH
65704: LD_INT 112
65706: PUSH
65707: LD_INT 113
65709: PUSH
65710: LD_INT 114
65712: PUSH
65713: LD_INT 116
65715: PUSH
65716: LD_INT 117
65718: PUSH
65719: LD_INT 118
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: ST_TO_ADDR
65745: GO 66144
65747: LD_INT 18
65749: DOUBLE
65750: EQUAL
65751: IFTRUE 65755
65753: GO 65903
65755: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65756: LD_ADDR_VAR 0 2
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: LD_INT 4
65766: PUSH
65767: LD_INT 5
65769: PUSH
65770: LD_INT 7
65772: PUSH
65773: LD_INT 11
65775: PUSH
65776: LD_INT 12
65778: PUSH
65779: LD_INT 15
65781: PUSH
65782: LD_INT 16
65784: PUSH
65785: LD_INT 20
65787: PUSH
65788: LD_INT 21
65790: PUSH
65791: LD_INT 22
65793: PUSH
65794: LD_INT 23
65796: PUSH
65797: LD_INT 25
65799: PUSH
65800: LD_INT 26
65802: PUSH
65803: LD_INT 30
65805: PUSH
65806: LD_INT 31
65808: PUSH
65809: LD_INT 32
65811: PUSH
65812: LD_INT 33
65814: PUSH
65815: LD_INT 34
65817: PUSH
65818: LD_INT 35
65820: PUSH
65821: LD_INT 36
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 101
65849: PUSH
65850: LD_INT 102
65852: PUSH
65853: LD_INT 103
65855: PUSH
65856: LD_INT 106
65858: PUSH
65859: LD_INT 108
65861: PUSH
65862: LD_INT 112
65864: PUSH
65865: LD_INT 113
65867: PUSH
65868: LD_INT 114
65870: PUSH
65871: LD_INT 115
65873: PUSH
65874: LD_INT 116
65876: PUSH
65877: LD_INT 117
65879: PUSH
65880: LD_INT 118
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: ST_TO_ADDR
65901: GO 66144
65903: LD_INT 19
65905: DOUBLE
65906: EQUAL
65907: IFTRUE 65911
65909: GO 66143
65911: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65912: LD_ADDR_VAR 0 2
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: LD_INT 2
65922: PUSH
65923: LD_INT 3
65925: PUSH
65926: LD_INT 4
65928: PUSH
65929: LD_INT 5
65931: PUSH
65932: LD_INT 6
65934: PUSH
65935: LD_INT 7
65937: PUSH
65938: LD_INT 8
65940: PUSH
65941: LD_INT 9
65943: PUSH
65944: LD_INT 10
65946: PUSH
65947: LD_INT 11
65949: PUSH
65950: LD_INT 12
65952: PUSH
65953: LD_INT 13
65955: PUSH
65956: LD_INT 14
65958: PUSH
65959: LD_INT 15
65961: PUSH
65962: LD_INT 16
65964: PUSH
65965: LD_INT 17
65967: PUSH
65968: LD_INT 18
65970: PUSH
65971: LD_INT 19
65973: PUSH
65974: LD_INT 20
65976: PUSH
65977: LD_INT 21
65979: PUSH
65980: LD_INT 22
65982: PUSH
65983: LD_INT 23
65985: PUSH
65986: LD_INT 24
65988: PUSH
65989: LD_INT 25
65991: PUSH
65992: LD_INT 26
65994: PUSH
65995: LD_INT 27
65997: PUSH
65998: LD_INT 28
66000: PUSH
66001: LD_INT 29
66003: PUSH
66004: LD_INT 30
66006: PUSH
66007: LD_INT 31
66009: PUSH
66010: LD_INT 32
66012: PUSH
66013: LD_INT 33
66015: PUSH
66016: LD_INT 34
66018: PUSH
66019: LD_INT 35
66021: PUSH
66022: LD_INT 36
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 101
66065: PUSH
66066: LD_INT 102
66068: PUSH
66069: LD_INT 103
66071: PUSH
66072: LD_INT 104
66074: PUSH
66075: LD_INT 105
66077: PUSH
66078: LD_INT 106
66080: PUSH
66081: LD_INT 107
66083: PUSH
66084: LD_INT 108
66086: PUSH
66087: LD_INT 109
66089: PUSH
66090: LD_INT 110
66092: PUSH
66093: LD_INT 111
66095: PUSH
66096: LD_INT 112
66098: PUSH
66099: LD_INT 113
66101: PUSH
66102: LD_INT 114
66104: PUSH
66105: LD_INT 115
66107: PUSH
66108: LD_INT 116
66110: PUSH
66111: LD_INT 117
66113: PUSH
66114: LD_INT 118
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: ST_TO_ADDR
66141: GO 66144
66143: POP
// end else
66144: GO 66375
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66146: LD_ADDR_VAR 0 2
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: LD_INT 2
66156: PUSH
66157: LD_INT 3
66159: PUSH
66160: LD_INT 4
66162: PUSH
66163: LD_INT 5
66165: PUSH
66166: LD_INT 6
66168: PUSH
66169: LD_INT 7
66171: PUSH
66172: LD_INT 8
66174: PUSH
66175: LD_INT 9
66177: PUSH
66178: LD_INT 10
66180: PUSH
66181: LD_INT 11
66183: PUSH
66184: LD_INT 12
66186: PUSH
66187: LD_INT 13
66189: PUSH
66190: LD_INT 14
66192: PUSH
66193: LD_INT 15
66195: PUSH
66196: LD_INT 16
66198: PUSH
66199: LD_INT 17
66201: PUSH
66202: LD_INT 18
66204: PUSH
66205: LD_INT 19
66207: PUSH
66208: LD_INT 20
66210: PUSH
66211: LD_INT 21
66213: PUSH
66214: LD_INT 22
66216: PUSH
66217: LD_INT 23
66219: PUSH
66220: LD_INT 24
66222: PUSH
66223: LD_INT 25
66225: PUSH
66226: LD_INT 26
66228: PUSH
66229: LD_INT 27
66231: PUSH
66232: LD_INT 28
66234: PUSH
66235: LD_INT 29
66237: PUSH
66238: LD_INT 30
66240: PUSH
66241: LD_INT 31
66243: PUSH
66244: LD_INT 32
66246: PUSH
66247: LD_INT 33
66249: PUSH
66250: LD_INT 34
66252: PUSH
66253: LD_INT 35
66255: PUSH
66256: LD_INT 36
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 101
66299: PUSH
66300: LD_INT 102
66302: PUSH
66303: LD_INT 103
66305: PUSH
66306: LD_INT 104
66308: PUSH
66309: LD_INT 105
66311: PUSH
66312: LD_INT 106
66314: PUSH
66315: LD_INT 107
66317: PUSH
66318: LD_INT 108
66320: PUSH
66321: LD_INT 109
66323: PUSH
66324: LD_INT 110
66326: PUSH
66327: LD_INT 111
66329: PUSH
66330: LD_INT 112
66332: PUSH
66333: LD_INT 113
66335: PUSH
66336: LD_INT 114
66338: PUSH
66339: LD_INT 115
66341: PUSH
66342: LD_INT 116
66344: PUSH
66345: LD_INT 117
66347: PUSH
66348: LD_INT 118
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// if result then
66375: LD_VAR 0 2
66379: IFFALSE 67165
// begin normal :=  ;
66381: LD_ADDR_VAR 0 5
66385: PUSH
66386: LD_STRING 
66388: ST_TO_ADDR
// hardcore :=  ;
66389: LD_ADDR_VAR 0 6
66393: PUSH
66394: LD_STRING 
66396: ST_TO_ADDR
// active :=  ;
66397: LD_ADDR_VAR 0 7
66401: PUSH
66402: LD_STRING 
66404: ST_TO_ADDR
// for i = 1 to normalCounter do
66405: LD_ADDR_VAR 0 8
66409: PUSH
66410: DOUBLE
66411: LD_INT 1
66413: DEC
66414: ST_TO_ADDR
66415: LD_EXP 45
66419: PUSH
66420: FOR_TO
66421: IFFALSE 66522
// begin tmp := 0 ;
66423: LD_ADDR_VAR 0 3
66427: PUSH
66428: LD_STRING 0
66430: ST_TO_ADDR
// if result [ 1 ] then
66431: LD_VAR 0 2
66435: PUSH
66436: LD_INT 1
66438: ARRAY
66439: IFFALSE 66504
// if result [ 1 ] [ 1 ] = i then
66441: LD_VAR 0 2
66445: PUSH
66446: LD_INT 1
66448: ARRAY
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: PUSH
66454: LD_VAR 0 8
66458: EQUAL
66459: IFFALSE 66504
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66461: LD_ADDR_VAR 0 2
66465: PUSH
66466: LD_VAR 0 2
66470: PPUSH
66471: LD_INT 1
66473: PPUSH
66474: LD_VAR 0 2
66478: PUSH
66479: LD_INT 1
66481: ARRAY
66482: PPUSH
66483: LD_INT 1
66485: PPUSH
66486: CALL_OW 3
66490: PPUSH
66491: CALL_OW 1
66495: ST_TO_ADDR
// tmp := 1 ;
66496: LD_ADDR_VAR 0 3
66500: PUSH
66501: LD_STRING 1
66503: ST_TO_ADDR
// end ; normal := normal & tmp ;
66504: LD_ADDR_VAR 0 5
66508: PUSH
66509: LD_VAR 0 5
66513: PUSH
66514: LD_VAR 0 3
66518: STR
66519: ST_TO_ADDR
// end ;
66520: GO 66420
66522: POP
66523: POP
// for i = 1 to hardcoreCounter do
66524: LD_ADDR_VAR 0 8
66528: PUSH
66529: DOUBLE
66530: LD_INT 1
66532: DEC
66533: ST_TO_ADDR
66534: LD_EXP 46
66538: PUSH
66539: FOR_TO
66540: IFFALSE 66645
// begin tmp := 0 ;
66542: LD_ADDR_VAR 0 3
66546: PUSH
66547: LD_STRING 0
66549: ST_TO_ADDR
// if result [ 2 ] then
66550: LD_VAR 0 2
66554: PUSH
66555: LD_INT 2
66557: ARRAY
66558: IFFALSE 66627
// if result [ 2 ] [ 1 ] = 100 + i then
66560: LD_VAR 0 2
66564: PUSH
66565: LD_INT 2
66567: ARRAY
66568: PUSH
66569: LD_INT 1
66571: ARRAY
66572: PUSH
66573: LD_INT 100
66575: PUSH
66576: LD_VAR 0 8
66580: PLUS
66581: EQUAL
66582: IFFALSE 66627
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66584: LD_ADDR_VAR 0 2
66588: PUSH
66589: LD_VAR 0 2
66593: PPUSH
66594: LD_INT 2
66596: PPUSH
66597: LD_VAR 0 2
66601: PUSH
66602: LD_INT 2
66604: ARRAY
66605: PPUSH
66606: LD_INT 1
66608: PPUSH
66609: CALL_OW 3
66613: PPUSH
66614: CALL_OW 1
66618: ST_TO_ADDR
// tmp := 1 ;
66619: LD_ADDR_VAR 0 3
66623: PUSH
66624: LD_STRING 1
66626: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66627: LD_ADDR_VAR 0 6
66631: PUSH
66632: LD_VAR 0 6
66636: PUSH
66637: LD_VAR 0 3
66641: STR
66642: ST_TO_ADDR
// end ;
66643: GO 66539
66645: POP
66646: POP
// if isGameLoad then
66647: LD_VAR 0 1
66651: IFFALSE 67126
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66653: LD_ADDR_VAR 0 4
66657: PUSH
66658: LD_EXP 49
66662: PUSH
66663: LD_EXP 48
66667: PUSH
66668: LD_EXP 50
66672: PUSH
66673: LD_EXP 47
66677: PUSH
66678: LD_EXP 51
66682: PUSH
66683: LD_EXP 52
66687: PUSH
66688: LD_EXP 53
66692: PUSH
66693: LD_EXP 54
66697: PUSH
66698: LD_EXP 55
66702: PUSH
66703: LD_EXP 56
66707: PUSH
66708: LD_EXP 57
66712: PUSH
66713: LD_EXP 58
66717: PUSH
66718: LD_EXP 59
66722: PUSH
66723: LD_EXP 60
66727: PUSH
66728: LD_EXP 68
66732: PUSH
66733: LD_EXP 69
66737: PUSH
66738: LD_EXP 70
66742: PUSH
66743: LD_EXP 71
66747: PUSH
66748: LD_EXP 73
66752: PUSH
66753: LD_EXP 74
66757: PUSH
66758: LD_EXP 75
66762: PUSH
66763: LD_EXP 78
66767: PUSH
66768: LD_EXP 80
66772: PUSH
66773: LD_EXP 81
66777: PUSH
66778: LD_EXP 82
66782: PUSH
66783: LD_EXP 84
66787: PUSH
66788: LD_EXP 85
66792: PUSH
66793: LD_EXP 88
66797: PUSH
66798: LD_EXP 89
66802: PUSH
66803: LD_EXP 90
66807: PUSH
66808: LD_EXP 91
66812: PUSH
66813: LD_EXP 92
66817: PUSH
66818: LD_EXP 93
66822: PUSH
66823: LD_EXP 94
66827: PUSH
66828: LD_EXP 95
66832: PUSH
66833: LD_EXP 96
66837: PUSH
66838: LD_EXP 61
66842: PUSH
66843: LD_EXP 62
66847: PUSH
66848: LD_EXP 65
66852: PUSH
66853: LD_EXP 66
66857: PUSH
66858: LD_EXP 67
66862: PUSH
66863: LD_EXP 63
66867: PUSH
66868: LD_EXP 64
66872: PUSH
66873: LD_EXP 72
66877: PUSH
66878: LD_EXP 76
66882: PUSH
66883: LD_EXP 77
66887: PUSH
66888: LD_EXP 79
66892: PUSH
66893: LD_EXP 83
66897: PUSH
66898: LD_EXP 86
66902: PUSH
66903: LD_EXP 87
66907: PUSH
66908: LD_EXP 97
66912: PUSH
66913: LD_EXP 98
66917: PUSH
66918: LD_EXP 99
66922: PUSH
66923: LD_EXP 100
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// tmp :=  ;
66984: LD_ADDR_VAR 0 3
66988: PUSH
66989: LD_STRING 
66991: ST_TO_ADDR
// for i = 1 to normalCounter do
66992: LD_ADDR_VAR 0 8
66996: PUSH
66997: DOUBLE
66998: LD_INT 1
67000: DEC
67001: ST_TO_ADDR
67002: LD_EXP 45
67006: PUSH
67007: FOR_TO
67008: IFFALSE 67044
// begin if flags [ i ] then
67010: LD_VAR 0 4
67014: PUSH
67015: LD_VAR 0 8
67019: ARRAY
67020: IFFALSE 67042
// tmp := tmp & i & ; ;
67022: LD_ADDR_VAR 0 3
67026: PUSH
67027: LD_VAR 0 3
67031: PUSH
67032: LD_VAR 0 8
67036: STR
67037: PUSH
67038: LD_STRING ;
67040: STR
67041: ST_TO_ADDR
// end ;
67042: GO 67007
67044: POP
67045: POP
// for i = 1 to hardcoreCounter do
67046: LD_ADDR_VAR 0 8
67050: PUSH
67051: DOUBLE
67052: LD_INT 1
67054: DEC
67055: ST_TO_ADDR
67056: LD_EXP 46
67060: PUSH
67061: FOR_TO
67062: IFFALSE 67108
// begin if flags [ normalCounter + i ] then
67064: LD_VAR 0 4
67068: PUSH
67069: LD_EXP 45
67073: PUSH
67074: LD_VAR 0 8
67078: PLUS
67079: ARRAY
67080: IFFALSE 67106
// tmp := tmp & ( 100 + i ) & ; ;
67082: LD_ADDR_VAR 0 3
67086: PUSH
67087: LD_VAR 0 3
67091: PUSH
67092: LD_INT 100
67094: PUSH
67095: LD_VAR 0 8
67099: PLUS
67100: STR
67101: PUSH
67102: LD_STRING ;
67104: STR
67105: ST_TO_ADDR
// end ;
67106: GO 67061
67108: POP
67109: POP
// if tmp then
67110: LD_VAR 0 3
67114: IFFALSE 67126
// active := tmp ;
67116: LD_ADDR_VAR 0 7
67120: PUSH
67121: LD_VAR 0 3
67125: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67126: LD_STRING getStreamItemsFromMission("
67128: PUSH
67129: LD_VAR 0 5
67133: STR
67134: PUSH
67135: LD_STRING ","
67137: STR
67138: PUSH
67139: LD_VAR 0 6
67143: STR
67144: PUSH
67145: LD_STRING ","
67147: STR
67148: PUSH
67149: LD_VAR 0 7
67153: STR
67154: PUSH
67155: LD_STRING ")
67157: STR
67158: PPUSH
67159: CALL_OW 559
// end else
67163: GO 67172
// ToLua ( getStreamItemsFromMission("","","") ) ;
67165: LD_STRING getStreamItemsFromMission("","","")
67167: PPUSH
67168: CALL_OW 559
// end ;
67172: LD_VAR 0 2
67176: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67177: LD_EXP 44
67181: PUSH
67182: LD_EXP 49
67186: AND
67187: IFFALSE 67311
67189: GO 67191
67191: DISABLE
67192: LD_INT 0
67194: PPUSH
67195: PPUSH
// begin enable ;
67196: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67197: LD_ADDR_VAR 0 2
67201: PUSH
67202: LD_INT 22
67204: PUSH
67205: LD_OWVAR 2
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 2
67216: PUSH
67217: LD_INT 34
67219: PUSH
67220: LD_INT 7
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 34
67229: PUSH
67230: LD_INT 45
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 34
67239: PUSH
67240: LD_INT 28
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 34
67249: PUSH
67250: LD_INT 47
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PPUSH
67268: CALL_OW 69
67272: ST_TO_ADDR
// if not tmp then
67273: LD_VAR 0 2
67277: NOT
67278: IFFALSE 67282
// exit ;
67280: GO 67311
// for i in tmp do
67282: LD_ADDR_VAR 0 1
67286: PUSH
67287: LD_VAR 0 2
67291: PUSH
67292: FOR_IN
67293: IFFALSE 67309
// begin SetLives ( i , 0 ) ;
67295: LD_VAR 0 1
67299: PPUSH
67300: LD_INT 0
67302: PPUSH
67303: CALL_OW 234
// end ;
67307: GO 67292
67309: POP
67310: POP
// end ;
67311: PPOPN 2
67313: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67314: LD_EXP 44
67318: PUSH
67319: LD_EXP 50
67323: AND
67324: IFFALSE 67408
67326: GO 67328
67328: DISABLE
67329: LD_INT 0
67331: PPUSH
67332: PPUSH
// begin enable ;
67333: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67334: LD_ADDR_VAR 0 2
67338: PUSH
67339: LD_INT 22
67341: PUSH
67342: LD_OWVAR 2
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 32
67353: PUSH
67354: LD_INT 3
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PPUSH
67365: CALL_OW 69
67369: ST_TO_ADDR
// if not tmp then
67370: LD_VAR 0 2
67374: NOT
67375: IFFALSE 67379
// exit ;
67377: GO 67408
// for i in tmp do
67379: LD_ADDR_VAR 0 1
67383: PUSH
67384: LD_VAR 0 2
67388: PUSH
67389: FOR_IN
67390: IFFALSE 67406
// begin SetLives ( i , 0 ) ;
67392: LD_VAR 0 1
67396: PPUSH
67397: LD_INT 0
67399: PPUSH
67400: CALL_OW 234
// end ;
67404: GO 67389
67406: POP
67407: POP
// end ;
67408: PPOPN 2
67410: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67411: LD_EXP 44
67415: PUSH
67416: LD_EXP 47
67420: AND
67421: IFFALSE 67514
67423: GO 67425
67425: DISABLE
67426: LD_INT 0
67428: PPUSH
// begin enable ;
67429: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67430: LD_ADDR_VAR 0 1
67434: PUSH
67435: LD_INT 22
67437: PUSH
67438: LD_OWVAR 2
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 2
67449: PUSH
67450: LD_INT 25
67452: PUSH
67453: LD_INT 5
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 25
67462: PUSH
67463: LD_INT 9
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 25
67472: PUSH
67473: LD_INT 8
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PPUSH
67490: CALL_OW 69
67494: PUSH
67495: FOR_IN
67496: IFFALSE 67512
// begin SetClass ( i , 1 ) ;
67498: LD_VAR 0 1
67502: PPUSH
67503: LD_INT 1
67505: PPUSH
67506: CALL_OW 336
// end ;
67510: GO 67495
67512: POP
67513: POP
// end ;
67514: PPOPN 1
67516: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67517: LD_EXP 44
67521: PUSH
67522: LD_EXP 48
67526: AND
67527: PUSH
67528: LD_OWVAR 65
67532: PUSH
67533: LD_INT 7
67535: LESS
67536: AND
67537: IFFALSE 67551
67539: GO 67541
67541: DISABLE
// begin enable ;
67542: ENABLE
// game_speed := 7 ;
67543: LD_ADDR_OWVAR 65
67547: PUSH
67548: LD_INT 7
67550: ST_TO_ADDR
// end ;
67551: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67552: LD_EXP 44
67556: PUSH
67557: LD_EXP 51
67561: AND
67562: IFFALSE 67764
67564: GO 67566
67566: DISABLE
67567: LD_INT 0
67569: PPUSH
67570: PPUSH
67571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67572: LD_ADDR_VAR 0 3
67576: PUSH
67577: LD_INT 81
67579: PUSH
67580: LD_OWVAR 2
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 21
67591: PUSH
67592: LD_INT 1
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PPUSH
67603: CALL_OW 69
67607: ST_TO_ADDR
// if not tmp then
67608: LD_VAR 0 3
67612: NOT
67613: IFFALSE 67617
// exit ;
67615: GO 67764
// if tmp > 5 then
67617: LD_VAR 0 3
67621: PUSH
67622: LD_INT 5
67624: GREATER
67625: IFFALSE 67637
// k := 5 else
67627: LD_ADDR_VAR 0 2
67631: PUSH
67632: LD_INT 5
67634: ST_TO_ADDR
67635: GO 67647
// k := tmp ;
67637: LD_ADDR_VAR 0 2
67641: PUSH
67642: LD_VAR 0 3
67646: ST_TO_ADDR
// for i := 1 to k do
67647: LD_ADDR_VAR 0 1
67651: PUSH
67652: DOUBLE
67653: LD_INT 1
67655: DEC
67656: ST_TO_ADDR
67657: LD_VAR 0 2
67661: PUSH
67662: FOR_TO
67663: IFFALSE 67762
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67665: LD_VAR 0 3
67669: PUSH
67670: LD_VAR 0 1
67674: ARRAY
67675: PPUSH
67676: LD_VAR 0 1
67680: PUSH
67681: LD_INT 4
67683: MOD
67684: PUSH
67685: LD_INT 1
67687: PLUS
67688: PPUSH
67689: CALL_OW 259
67693: PUSH
67694: LD_INT 10
67696: LESS
67697: IFFALSE 67760
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67699: LD_VAR 0 3
67703: PUSH
67704: LD_VAR 0 1
67708: ARRAY
67709: PPUSH
67710: LD_VAR 0 1
67714: PUSH
67715: LD_INT 4
67717: MOD
67718: PUSH
67719: LD_INT 1
67721: PLUS
67722: PPUSH
67723: LD_VAR 0 3
67727: PUSH
67728: LD_VAR 0 1
67732: ARRAY
67733: PPUSH
67734: LD_VAR 0 1
67738: PUSH
67739: LD_INT 4
67741: MOD
67742: PUSH
67743: LD_INT 1
67745: PLUS
67746: PPUSH
67747: CALL_OW 259
67751: PUSH
67752: LD_INT 1
67754: PLUS
67755: PPUSH
67756: CALL_OW 237
67760: GO 67662
67762: POP
67763: POP
// end ;
67764: PPOPN 3
67766: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67767: LD_EXP 44
67771: PUSH
67772: LD_EXP 52
67776: AND
67777: IFFALSE 67797
67779: GO 67781
67781: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67782: LD_INT 4
67784: PPUSH
67785: LD_OWVAR 2
67789: PPUSH
67790: LD_INT 0
67792: PPUSH
67793: CALL_OW 324
67797: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67798: LD_EXP 44
67802: PUSH
67803: LD_EXP 81
67807: AND
67808: IFFALSE 67828
67810: GO 67812
67812: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67813: LD_INT 19
67815: PPUSH
67816: LD_OWVAR 2
67820: PPUSH
67821: LD_INT 0
67823: PPUSH
67824: CALL_OW 324
67828: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67829: LD_EXP 44
67833: PUSH
67834: LD_EXP 53
67838: AND
67839: IFFALSE 67941
67841: GO 67843
67843: DISABLE
67844: LD_INT 0
67846: PPUSH
67847: PPUSH
// begin enable ;
67848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67849: LD_ADDR_VAR 0 2
67853: PUSH
67854: LD_INT 22
67856: PUSH
67857: LD_OWVAR 2
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 2
67868: PUSH
67869: LD_INT 34
67871: PUSH
67872: LD_INT 11
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 34
67881: PUSH
67882: LD_INT 30
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: LIST
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PPUSH
67898: CALL_OW 69
67902: ST_TO_ADDR
// if not tmp then
67903: LD_VAR 0 2
67907: NOT
67908: IFFALSE 67912
// exit ;
67910: GO 67941
// for i in tmp do
67912: LD_ADDR_VAR 0 1
67916: PUSH
67917: LD_VAR 0 2
67921: PUSH
67922: FOR_IN
67923: IFFALSE 67939
// begin SetLives ( i , 0 ) ;
67925: LD_VAR 0 1
67929: PPUSH
67930: LD_INT 0
67932: PPUSH
67933: CALL_OW 234
// end ;
67937: GO 67922
67939: POP
67940: POP
// end ;
67941: PPOPN 2
67943: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67944: LD_EXP 44
67948: PUSH
67949: LD_EXP 54
67953: AND
67954: IFFALSE 67974
67956: GO 67958
67958: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67959: LD_INT 32
67961: PPUSH
67962: LD_OWVAR 2
67966: PPUSH
67967: LD_INT 0
67969: PPUSH
67970: CALL_OW 324
67974: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67975: LD_EXP 44
67979: PUSH
67980: LD_EXP 55
67984: AND
67985: IFFALSE 68166
67987: GO 67989
67989: DISABLE
67990: LD_INT 0
67992: PPUSH
67993: PPUSH
67994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67995: LD_ADDR_VAR 0 2
67999: PUSH
68000: LD_INT 22
68002: PUSH
68003: LD_OWVAR 2
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 33
68014: PUSH
68015: LD_INT 3
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PPUSH
68026: CALL_OW 69
68030: ST_TO_ADDR
// if not tmp then
68031: LD_VAR 0 2
68035: NOT
68036: IFFALSE 68040
// exit ;
68038: GO 68166
// side := 0 ;
68040: LD_ADDR_VAR 0 3
68044: PUSH
68045: LD_INT 0
68047: ST_TO_ADDR
// for i := 1 to 8 do
68048: LD_ADDR_VAR 0 1
68052: PUSH
68053: DOUBLE
68054: LD_INT 1
68056: DEC
68057: ST_TO_ADDR
68058: LD_INT 8
68060: PUSH
68061: FOR_TO
68062: IFFALSE 68110
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68064: LD_OWVAR 2
68068: PUSH
68069: LD_VAR 0 1
68073: NONEQUAL
68074: PUSH
68075: LD_OWVAR 2
68079: PPUSH
68080: LD_VAR 0 1
68084: PPUSH
68085: CALL_OW 81
68089: PUSH
68090: LD_INT 2
68092: EQUAL
68093: AND
68094: IFFALSE 68108
// begin side := i ;
68096: LD_ADDR_VAR 0 3
68100: PUSH
68101: LD_VAR 0 1
68105: ST_TO_ADDR
// break ;
68106: GO 68110
// end ;
68108: GO 68061
68110: POP
68111: POP
// if not side then
68112: LD_VAR 0 3
68116: NOT
68117: IFFALSE 68121
// exit ;
68119: GO 68166
// for i := 1 to tmp do
68121: LD_ADDR_VAR 0 1
68125: PUSH
68126: DOUBLE
68127: LD_INT 1
68129: DEC
68130: ST_TO_ADDR
68131: LD_VAR 0 2
68135: PUSH
68136: FOR_TO
68137: IFFALSE 68164
// if Prob ( 60 ) then
68139: LD_INT 60
68141: PPUSH
68142: CALL_OW 13
68146: IFFALSE 68162
// SetSide ( i , side ) ;
68148: LD_VAR 0 1
68152: PPUSH
68153: LD_VAR 0 3
68157: PPUSH
68158: CALL_OW 235
68162: GO 68136
68164: POP
68165: POP
// end ;
68166: PPOPN 3
68168: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68169: LD_EXP 44
68173: PUSH
68174: LD_EXP 57
68178: AND
68179: IFFALSE 68298
68181: GO 68183
68183: DISABLE
68184: LD_INT 0
68186: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68187: LD_ADDR_VAR 0 1
68191: PUSH
68192: LD_INT 22
68194: PUSH
68195: LD_OWVAR 2
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 21
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 3
68216: PUSH
68217: LD_INT 23
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: LIST
68235: PPUSH
68236: CALL_OW 69
68240: PUSH
68241: FOR_IN
68242: IFFALSE 68296
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68244: LD_VAR 0 1
68248: PPUSH
68249: CALL_OW 257
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: LD_INT 2
68259: PUSH
68260: LD_INT 3
68262: PUSH
68263: LD_INT 4
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: IN
68272: IFFALSE 68294
// SetClass ( un , rand ( 1 , 4 ) ) ;
68274: LD_VAR 0 1
68278: PPUSH
68279: LD_INT 1
68281: PPUSH
68282: LD_INT 4
68284: PPUSH
68285: CALL_OW 12
68289: PPUSH
68290: CALL_OW 336
68294: GO 68241
68296: POP
68297: POP
// end ;
68298: PPOPN 1
68300: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68301: LD_EXP 44
68305: PUSH
68306: LD_EXP 56
68310: AND
68311: IFFALSE 68390
68313: GO 68315
68315: DISABLE
68316: LD_INT 0
68318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68319: LD_ADDR_VAR 0 1
68323: PUSH
68324: LD_INT 22
68326: PUSH
68327: LD_OWVAR 2
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 21
68338: PUSH
68339: LD_INT 3
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PPUSH
68350: CALL_OW 69
68354: ST_TO_ADDR
// if not tmp then
68355: LD_VAR 0 1
68359: NOT
68360: IFFALSE 68364
// exit ;
68362: GO 68390
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68364: LD_VAR 0 1
68368: PUSH
68369: LD_INT 1
68371: PPUSH
68372: LD_VAR 0 1
68376: PPUSH
68377: CALL_OW 12
68381: ARRAY
68382: PPUSH
68383: LD_INT 100
68385: PPUSH
68386: CALL_OW 234
// end ;
68390: PPOPN 1
68392: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68393: LD_EXP 44
68397: PUSH
68398: LD_EXP 58
68402: AND
68403: IFFALSE 68501
68405: GO 68407
68407: DISABLE
68408: LD_INT 0
68410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68411: LD_ADDR_VAR 0 1
68415: PUSH
68416: LD_INT 22
68418: PUSH
68419: LD_OWVAR 2
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 21
68430: PUSH
68431: LD_INT 1
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PPUSH
68442: CALL_OW 69
68446: ST_TO_ADDR
// if not tmp then
68447: LD_VAR 0 1
68451: NOT
68452: IFFALSE 68456
// exit ;
68454: GO 68501
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68456: LD_VAR 0 1
68460: PUSH
68461: LD_INT 1
68463: PPUSH
68464: LD_VAR 0 1
68468: PPUSH
68469: CALL_OW 12
68473: ARRAY
68474: PPUSH
68475: LD_INT 1
68477: PPUSH
68478: LD_INT 4
68480: PPUSH
68481: CALL_OW 12
68485: PPUSH
68486: LD_INT 3000
68488: PPUSH
68489: LD_INT 9000
68491: PPUSH
68492: CALL_OW 12
68496: PPUSH
68497: CALL_OW 492
// end ;
68501: PPOPN 1
68503: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68504: LD_EXP 44
68508: PUSH
68509: LD_EXP 59
68513: AND
68514: IFFALSE 68534
68516: GO 68518
68518: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68519: LD_INT 1
68521: PPUSH
68522: LD_OWVAR 2
68526: PPUSH
68527: LD_INT 0
68529: PPUSH
68530: CALL_OW 324
68534: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68535: LD_EXP 44
68539: PUSH
68540: LD_EXP 60
68544: AND
68545: IFFALSE 68628
68547: GO 68549
68549: DISABLE
68550: LD_INT 0
68552: PPUSH
68553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68554: LD_ADDR_VAR 0 2
68558: PUSH
68559: LD_INT 22
68561: PUSH
68562: LD_OWVAR 2
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 21
68573: PUSH
68574: LD_INT 3
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PPUSH
68585: CALL_OW 69
68589: ST_TO_ADDR
// if not tmp then
68590: LD_VAR 0 2
68594: NOT
68595: IFFALSE 68599
// exit ;
68597: GO 68628
// for i in tmp do
68599: LD_ADDR_VAR 0 1
68603: PUSH
68604: LD_VAR 0 2
68608: PUSH
68609: FOR_IN
68610: IFFALSE 68626
// SetBLevel ( i , 10 ) ;
68612: LD_VAR 0 1
68616: PPUSH
68617: LD_INT 10
68619: PPUSH
68620: CALL_OW 241
68624: GO 68609
68626: POP
68627: POP
// end ;
68628: PPOPN 2
68630: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68631: LD_EXP 44
68635: PUSH
68636: LD_EXP 61
68640: AND
68641: IFFALSE 68752
68643: GO 68645
68645: DISABLE
68646: LD_INT 0
68648: PPUSH
68649: PPUSH
68650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68651: LD_ADDR_VAR 0 3
68655: PUSH
68656: LD_INT 22
68658: PUSH
68659: LD_OWVAR 2
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 25
68670: PUSH
68671: LD_INT 1
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PPUSH
68682: CALL_OW 69
68686: ST_TO_ADDR
// if not tmp then
68687: LD_VAR 0 3
68691: NOT
68692: IFFALSE 68696
// exit ;
68694: GO 68752
// un := tmp [ rand ( 1 , tmp ) ] ;
68696: LD_ADDR_VAR 0 2
68700: PUSH
68701: LD_VAR 0 3
68705: PUSH
68706: LD_INT 1
68708: PPUSH
68709: LD_VAR 0 3
68713: PPUSH
68714: CALL_OW 12
68718: ARRAY
68719: ST_TO_ADDR
// if Crawls ( un ) then
68720: LD_VAR 0 2
68724: PPUSH
68725: CALL_OW 318
68729: IFFALSE 68740
// ComWalk ( un ) ;
68731: LD_VAR 0 2
68735: PPUSH
68736: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68740: LD_VAR 0 2
68744: PPUSH
68745: LD_INT 5
68747: PPUSH
68748: CALL_OW 336
// end ;
68752: PPOPN 3
68754: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68755: LD_EXP 44
68759: PUSH
68760: LD_EXP 62
68764: AND
68765: PUSH
68766: LD_OWVAR 67
68770: PUSH
68771: LD_INT 4
68773: LESS
68774: AND
68775: IFFALSE 68794
68777: GO 68779
68779: DISABLE
// begin Difficulty := Difficulty + 1 ;
68780: LD_ADDR_OWVAR 67
68784: PUSH
68785: LD_OWVAR 67
68789: PUSH
68790: LD_INT 1
68792: PLUS
68793: ST_TO_ADDR
// end ;
68794: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68795: LD_EXP 44
68799: PUSH
68800: LD_EXP 63
68804: AND
68805: IFFALSE 68908
68807: GO 68809
68809: DISABLE
68810: LD_INT 0
68812: PPUSH
// begin for i := 1 to 5 do
68813: LD_ADDR_VAR 0 1
68817: PUSH
68818: DOUBLE
68819: LD_INT 1
68821: DEC
68822: ST_TO_ADDR
68823: LD_INT 5
68825: PUSH
68826: FOR_TO
68827: IFFALSE 68906
// begin uc_nation := nation_nature ;
68829: LD_ADDR_OWVAR 21
68833: PUSH
68834: LD_INT 0
68836: ST_TO_ADDR
// uc_side := 0 ;
68837: LD_ADDR_OWVAR 20
68841: PUSH
68842: LD_INT 0
68844: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68845: LD_ADDR_OWVAR 29
68849: PUSH
68850: LD_INT 12
68852: PUSH
68853: LD_INT 12
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: ST_TO_ADDR
// hc_agressivity := 20 ;
68860: LD_ADDR_OWVAR 35
68864: PUSH
68865: LD_INT 20
68867: ST_TO_ADDR
// hc_class := class_tiger ;
68868: LD_ADDR_OWVAR 28
68872: PUSH
68873: LD_INT 14
68875: ST_TO_ADDR
// hc_gallery :=  ;
68876: LD_ADDR_OWVAR 33
68880: PUSH
68881: LD_STRING 
68883: ST_TO_ADDR
// hc_name :=  ;
68884: LD_ADDR_OWVAR 26
68888: PUSH
68889: LD_STRING 
68891: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68892: CALL_OW 44
68896: PPUSH
68897: LD_INT 0
68899: PPUSH
68900: CALL_OW 51
// end ;
68904: GO 68826
68906: POP
68907: POP
// end ;
68908: PPOPN 1
68910: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68911: LD_EXP 44
68915: PUSH
68916: LD_EXP 64
68920: AND
68921: IFFALSE 68930
68923: GO 68925
68925: DISABLE
// StreamSibBomb ;
68926: CALL 68931 0 0
68930: END
// export function StreamSibBomb ; var i , x , y ; begin
68931: LD_INT 0
68933: PPUSH
68934: PPUSH
68935: PPUSH
68936: PPUSH
// result := false ;
68937: LD_ADDR_VAR 0 1
68941: PUSH
68942: LD_INT 0
68944: ST_TO_ADDR
// for i := 1 to 16 do
68945: LD_ADDR_VAR 0 2
68949: PUSH
68950: DOUBLE
68951: LD_INT 1
68953: DEC
68954: ST_TO_ADDR
68955: LD_INT 16
68957: PUSH
68958: FOR_TO
68959: IFFALSE 69158
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68961: LD_ADDR_VAR 0 3
68965: PUSH
68966: LD_INT 10
68968: PUSH
68969: LD_INT 20
68971: PUSH
68972: LD_INT 30
68974: PUSH
68975: LD_INT 40
68977: PUSH
68978: LD_INT 50
68980: PUSH
68981: LD_INT 60
68983: PUSH
68984: LD_INT 70
68986: PUSH
68987: LD_INT 80
68989: PUSH
68990: LD_INT 90
68992: PUSH
68993: LD_INT 100
68995: PUSH
68996: LD_INT 110
68998: PUSH
68999: LD_INT 120
69001: PUSH
69002: LD_INT 130
69004: PUSH
69005: LD_INT 140
69007: PUSH
69008: LD_INT 150
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 1
69030: PPUSH
69031: LD_INT 15
69033: PPUSH
69034: CALL_OW 12
69038: ARRAY
69039: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69040: LD_ADDR_VAR 0 4
69044: PUSH
69045: LD_INT 10
69047: PUSH
69048: LD_INT 20
69050: PUSH
69051: LD_INT 30
69053: PUSH
69054: LD_INT 40
69056: PUSH
69057: LD_INT 50
69059: PUSH
69060: LD_INT 60
69062: PUSH
69063: LD_INT 70
69065: PUSH
69066: LD_INT 80
69068: PUSH
69069: LD_INT 90
69071: PUSH
69072: LD_INT 100
69074: PUSH
69075: LD_INT 110
69077: PUSH
69078: LD_INT 120
69080: PUSH
69081: LD_INT 130
69083: PUSH
69084: LD_INT 140
69086: PUSH
69087: LD_INT 150
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 1
69109: PPUSH
69110: LD_INT 15
69112: PPUSH
69113: CALL_OW 12
69117: ARRAY
69118: ST_TO_ADDR
// if ValidHex ( x , y ) then
69119: LD_VAR 0 3
69123: PPUSH
69124: LD_VAR 0 4
69128: PPUSH
69129: CALL_OW 488
69133: IFFALSE 69156
// begin result := [ x , y ] ;
69135: LD_ADDR_VAR 0 1
69139: PUSH
69140: LD_VAR 0 3
69144: PUSH
69145: LD_VAR 0 4
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: ST_TO_ADDR
// break ;
69154: GO 69158
// end ; end ;
69156: GO 68958
69158: POP
69159: POP
// if result then
69160: LD_VAR 0 1
69164: IFFALSE 69224
// begin ToLua ( playSibBomb() ) ;
69166: LD_STRING playSibBomb()
69168: PPUSH
69169: CALL_OW 559
// wait ( 0 0$14 ) ;
69173: LD_INT 490
69175: PPUSH
69176: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69180: LD_VAR 0 1
69184: PUSH
69185: LD_INT 1
69187: ARRAY
69188: PPUSH
69189: LD_VAR 0 1
69193: PUSH
69194: LD_INT 2
69196: ARRAY
69197: PPUSH
69198: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69202: LD_VAR 0 1
69206: PUSH
69207: LD_INT 1
69209: ARRAY
69210: PPUSH
69211: LD_VAR 0 1
69215: PUSH
69216: LD_INT 2
69218: ARRAY
69219: PPUSH
69220: CALL_OW 429
// end ; end ;
69224: LD_VAR 0 1
69228: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69229: LD_EXP 44
69233: PUSH
69234: LD_EXP 66
69238: AND
69239: IFFALSE 69251
69241: GO 69243
69243: DISABLE
// YouLost (  ) ;
69244: LD_STRING 
69246: PPUSH
69247: CALL_OW 104
69251: END
// every 0 0$1 trigger StreamModeActive and sFog do
69252: LD_EXP 44
69256: PUSH
69257: LD_EXP 65
69261: AND
69262: IFFALSE 69276
69264: GO 69266
69266: DISABLE
// FogOff ( your_side ) ;
69267: LD_OWVAR 2
69271: PPUSH
69272: CALL_OW 344
69276: END
// every 0 0$1 trigger StreamModeActive and sSun do
69277: LD_EXP 44
69281: PUSH
69282: LD_EXP 67
69286: AND
69287: IFFALSE 69315
69289: GO 69291
69291: DISABLE
// begin solar_recharge_percent := 0 ;
69292: LD_ADDR_OWVAR 79
69296: PUSH
69297: LD_INT 0
69299: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69300: LD_INT 10500
69302: PPUSH
69303: CALL_OW 67
// solar_recharge_percent := 100 ;
69307: LD_ADDR_OWVAR 79
69311: PUSH
69312: LD_INT 100
69314: ST_TO_ADDR
// end ;
69315: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69316: LD_EXP 44
69320: PUSH
69321: LD_EXP 68
69325: AND
69326: IFFALSE 69565
69328: GO 69330
69330: DISABLE
69331: LD_INT 0
69333: PPUSH
69334: PPUSH
69335: PPUSH
// begin tmp := [ ] ;
69336: LD_ADDR_VAR 0 3
69340: PUSH
69341: EMPTY
69342: ST_TO_ADDR
// for i := 1 to 6 do
69343: LD_ADDR_VAR 0 1
69347: PUSH
69348: DOUBLE
69349: LD_INT 1
69351: DEC
69352: ST_TO_ADDR
69353: LD_INT 6
69355: PUSH
69356: FOR_TO
69357: IFFALSE 69462
// begin uc_nation := nation_nature ;
69359: LD_ADDR_OWVAR 21
69363: PUSH
69364: LD_INT 0
69366: ST_TO_ADDR
// uc_side := 0 ;
69367: LD_ADDR_OWVAR 20
69371: PUSH
69372: LD_INT 0
69374: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69375: LD_ADDR_OWVAR 29
69379: PUSH
69380: LD_INT 12
69382: PUSH
69383: LD_INT 12
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: ST_TO_ADDR
// hc_agressivity := 20 ;
69390: LD_ADDR_OWVAR 35
69394: PUSH
69395: LD_INT 20
69397: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69398: LD_ADDR_OWVAR 28
69402: PUSH
69403: LD_INT 17
69405: ST_TO_ADDR
// hc_gallery :=  ;
69406: LD_ADDR_OWVAR 33
69410: PUSH
69411: LD_STRING 
69413: ST_TO_ADDR
// hc_name :=  ;
69414: LD_ADDR_OWVAR 26
69418: PUSH
69419: LD_STRING 
69421: ST_TO_ADDR
// un := CreateHuman ;
69422: LD_ADDR_VAR 0 2
69426: PUSH
69427: CALL_OW 44
69431: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69432: LD_VAR 0 2
69436: PPUSH
69437: LD_INT 1
69439: PPUSH
69440: CALL_OW 51
// tmp := tmp ^ un ;
69444: LD_ADDR_VAR 0 3
69448: PUSH
69449: LD_VAR 0 3
69453: PUSH
69454: LD_VAR 0 2
69458: ADD
69459: ST_TO_ADDR
// end ;
69460: GO 69356
69462: POP
69463: POP
// repeat wait ( 0 0$1 ) ;
69464: LD_INT 35
69466: PPUSH
69467: CALL_OW 67
// for un in tmp do
69471: LD_ADDR_VAR 0 2
69475: PUSH
69476: LD_VAR 0 3
69480: PUSH
69481: FOR_IN
69482: IFFALSE 69556
// begin if IsDead ( un ) then
69484: LD_VAR 0 2
69488: PPUSH
69489: CALL_OW 301
69493: IFFALSE 69513
// begin tmp := tmp diff un ;
69495: LD_ADDR_VAR 0 3
69499: PUSH
69500: LD_VAR 0 3
69504: PUSH
69505: LD_VAR 0 2
69509: DIFF
69510: ST_TO_ADDR
// continue ;
69511: GO 69481
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69513: LD_VAR 0 2
69517: PPUSH
69518: LD_INT 3
69520: PUSH
69521: LD_INT 22
69523: PUSH
69524: LD_INT 0
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PPUSH
69535: CALL_OW 69
69539: PPUSH
69540: LD_VAR 0 2
69544: PPUSH
69545: CALL_OW 74
69549: PPUSH
69550: CALL_OW 115
// end ;
69554: GO 69481
69556: POP
69557: POP
// until not tmp ;
69558: LD_VAR 0 3
69562: NOT
69563: IFFALSE 69464
// end ;
69565: PPOPN 3
69567: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69568: LD_EXP 44
69572: PUSH
69573: LD_EXP 69
69577: AND
69578: IFFALSE 69632
69580: GO 69582
69582: DISABLE
// begin ToLua ( displayTroll(); ) ;
69583: LD_STRING displayTroll();
69585: PPUSH
69586: CALL_OW 559
// wait ( 3 3$00 ) ;
69590: LD_INT 6300
69592: PPUSH
69593: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69597: LD_STRING hideTroll();
69599: PPUSH
69600: CALL_OW 559
// wait ( 1 1$00 ) ;
69604: LD_INT 2100
69606: PPUSH
69607: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69611: LD_STRING displayTroll();
69613: PPUSH
69614: CALL_OW 559
// wait ( 1 1$00 ) ;
69618: LD_INT 2100
69620: PPUSH
69621: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69625: LD_STRING hideTroll();
69627: PPUSH
69628: CALL_OW 559
// end ;
69632: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69633: LD_EXP 44
69637: PUSH
69638: LD_EXP 70
69642: AND
69643: IFFALSE 69706
69645: GO 69647
69647: DISABLE
69648: LD_INT 0
69650: PPUSH
// begin p := 0 ;
69651: LD_ADDR_VAR 0 1
69655: PUSH
69656: LD_INT 0
69658: ST_TO_ADDR
// repeat game_speed := 1 ;
69659: LD_ADDR_OWVAR 65
69663: PUSH
69664: LD_INT 1
69666: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69667: LD_INT 35
69669: PPUSH
69670: CALL_OW 67
// p := p + 1 ;
69674: LD_ADDR_VAR 0 1
69678: PUSH
69679: LD_VAR 0 1
69683: PUSH
69684: LD_INT 1
69686: PLUS
69687: ST_TO_ADDR
// until p >= 60 ;
69688: LD_VAR 0 1
69692: PUSH
69693: LD_INT 60
69695: GREATEREQUAL
69696: IFFALSE 69659
// game_speed := 4 ;
69698: LD_ADDR_OWVAR 65
69702: PUSH
69703: LD_INT 4
69705: ST_TO_ADDR
// end ;
69706: PPOPN 1
69708: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69709: LD_EXP 44
69713: PUSH
69714: LD_EXP 71
69718: AND
69719: IFFALSE 69865
69721: GO 69723
69723: DISABLE
69724: LD_INT 0
69726: PPUSH
69727: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69728: LD_ADDR_VAR 0 1
69732: PUSH
69733: LD_INT 22
69735: PUSH
69736: LD_OWVAR 2
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 2
69747: PUSH
69748: LD_INT 30
69750: PUSH
69751: LD_INT 0
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 30
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: LIST
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PPUSH
69777: CALL_OW 69
69781: ST_TO_ADDR
// if not depot then
69782: LD_VAR 0 1
69786: NOT
69787: IFFALSE 69791
// exit ;
69789: GO 69865
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69791: LD_ADDR_VAR 0 2
69795: PUSH
69796: LD_VAR 0 1
69800: PUSH
69801: LD_INT 1
69803: PPUSH
69804: LD_VAR 0 1
69808: PPUSH
69809: CALL_OW 12
69813: ARRAY
69814: PPUSH
69815: CALL_OW 274
69819: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69820: LD_VAR 0 2
69824: PPUSH
69825: LD_INT 1
69827: PPUSH
69828: LD_INT 0
69830: PPUSH
69831: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69835: LD_VAR 0 2
69839: PPUSH
69840: LD_INT 2
69842: PPUSH
69843: LD_INT 0
69845: PPUSH
69846: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69850: LD_VAR 0 2
69854: PPUSH
69855: LD_INT 3
69857: PPUSH
69858: LD_INT 0
69860: PPUSH
69861: CALL_OW 277
// end ;
69865: PPOPN 2
69867: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69868: LD_EXP 44
69872: PUSH
69873: LD_EXP 72
69877: AND
69878: IFFALSE 69975
69880: GO 69882
69882: DISABLE
69883: LD_INT 0
69885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69886: LD_ADDR_VAR 0 1
69890: PUSH
69891: LD_INT 22
69893: PUSH
69894: LD_OWVAR 2
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 21
69905: PUSH
69906: LD_INT 1
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 3
69915: PUSH
69916: LD_INT 23
69918: PUSH
69919: LD_INT 0
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: LIST
69934: PPUSH
69935: CALL_OW 69
69939: ST_TO_ADDR
// if not tmp then
69940: LD_VAR 0 1
69944: NOT
69945: IFFALSE 69949
// exit ;
69947: GO 69975
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69949: LD_VAR 0 1
69953: PUSH
69954: LD_INT 1
69956: PPUSH
69957: LD_VAR 0 1
69961: PPUSH
69962: CALL_OW 12
69966: ARRAY
69967: PPUSH
69968: LD_INT 200
69970: PPUSH
69971: CALL_OW 234
// end ;
69975: PPOPN 1
69977: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69978: LD_EXP 44
69982: PUSH
69983: LD_EXP 73
69987: AND
69988: IFFALSE 70067
69990: GO 69992
69992: DISABLE
69993: LD_INT 0
69995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69996: LD_ADDR_VAR 0 1
70000: PUSH
70001: LD_INT 22
70003: PUSH
70004: LD_OWVAR 2
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 21
70015: PUSH
70016: LD_INT 2
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PPUSH
70027: CALL_OW 69
70031: ST_TO_ADDR
// if not tmp then
70032: LD_VAR 0 1
70036: NOT
70037: IFFALSE 70041
// exit ;
70039: GO 70067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70041: LD_VAR 0 1
70045: PUSH
70046: LD_INT 1
70048: PPUSH
70049: LD_VAR 0 1
70053: PPUSH
70054: CALL_OW 12
70058: ARRAY
70059: PPUSH
70060: LD_INT 60
70062: PPUSH
70063: CALL_OW 234
// end ;
70067: PPOPN 1
70069: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70070: LD_EXP 44
70074: PUSH
70075: LD_EXP 74
70079: AND
70080: IFFALSE 70179
70082: GO 70084
70084: DISABLE
70085: LD_INT 0
70087: PPUSH
70088: PPUSH
// begin enable ;
70089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70090: LD_ADDR_VAR 0 1
70094: PUSH
70095: LD_INT 22
70097: PUSH
70098: LD_OWVAR 2
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 61
70109: PUSH
70110: EMPTY
70111: LIST
70112: PUSH
70113: LD_INT 33
70115: PUSH
70116: LD_INT 2
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: LIST
70127: PPUSH
70128: CALL_OW 69
70132: ST_TO_ADDR
// if not tmp then
70133: LD_VAR 0 1
70137: NOT
70138: IFFALSE 70142
// exit ;
70140: GO 70179
// for i in tmp do
70142: LD_ADDR_VAR 0 2
70146: PUSH
70147: LD_VAR 0 1
70151: PUSH
70152: FOR_IN
70153: IFFALSE 70177
// if IsControledBy ( i ) then
70155: LD_VAR 0 2
70159: PPUSH
70160: CALL_OW 312
70164: IFFALSE 70175
// ComUnlink ( i ) ;
70166: LD_VAR 0 2
70170: PPUSH
70171: CALL_OW 136
70175: GO 70152
70177: POP
70178: POP
// end ;
70179: PPOPN 2
70181: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70182: LD_EXP 44
70186: PUSH
70187: LD_EXP 75
70191: AND
70192: IFFALSE 70332
70194: GO 70196
70196: DISABLE
70197: LD_INT 0
70199: PPUSH
70200: PPUSH
// begin ToLua ( displayPowell(); ) ;
70201: LD_STRING displayPowell();
70203: PPUSH
70204: CALL_OW 559
// uc_side := 0 ;
70208: LD_ADDR_OWVAR 20
70212: PUSH
70213: LD_INT 0
70215: ST_TO_ADDR
// uc_nation := 2 ;
70216: LD_ADDR_OWVAR 21
70220: PUSH
70221: LD_INT 2
70223: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70224: LD_ADDR_OWVAR 37
70228: PUSH
70229: LD_INT 14
70231: ST_TO_ADDR
// vc_engine := engine_siberite ;
70232: LD_ADDR_OWVAR 39
70236: PUSH
70237: LD_INT 3
70239: ST_TO_ADDR
// vc_control := control_apeman ;
70240: LD_ADDR_OWVAR 38
70244: PUSH
70245: LD_INT 5
70247: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70248: LD_ADDR_OWVAR 40
70252: PUSH
70253: LD_INT 29
70255: ST_TO_ADDR
// un := CreateVehicle ;
70256: LD_ADDR_VAR 0 2
70260: PUSH
70261: CALL_OW 45
70265: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70266: LD_VAR 0 2
70270: PPUSH
70271: LD_INT 1
70273: PPUSH
70274: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70278: LD_INT 35
70280: PPUSH
70281: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70285: LD_VAR 0 2
70289: PPUSH
70290: LD_INT 22
70292: PUSH
70293: LD_OWVAR 2
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PPUSH
70302: CALL_OW 69
70306: PPUSH
70307: LD_VAR 0 2
70311: PPUSH
70312: CALL_OW 74
70316: PPUSH
70317: CALL_OW 115
// until IsDead ( un ) ;
70321: LD_VAR 0 2
70325: PPUSH
70326: CALL_OW 301
70330: IFFALSE 70278
// end ;
70332: PPOPN 2
70334: END
// every 0 0$1 trigger StreamModeActive and sStu do
70335: LD_EXP 44
70339: PUSH
70340: LD_EXP 83
70344: AND
70345: IFFALSE 70361
70347: GO 70349
70349: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70350: LD_STRING displayStucuk();
70352: PPUSH
70353: CALL_OW 559
// ResetFog ;
70357: CALL_OW 335
// end ;
70361: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70362: LD_EXP 44
70366: PUSH
70367: LD_EXP 76
70371: AND
70372: IFFALSE 70513
70374: GO 70376
70376: DISABLE
70377: LD_INT 0
70379: PPUSH
70380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70381: LD_ADDR_VAR 0 2
70385: PUSH
70386: LD_INT 22
70388: PUSH
70389: LD_OWVAR 2
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 21
70400: PUSH
70401: LD_INT 1
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PPUSH
70412: CALL_OW 69
70416: ST_TO_ADDR
// if not tmp then
70417: LD_VAR 0 2
70421: NOT
70422: IFFALSE 70426
// exit ;
70424: GO 70513
// un := tmp [ rand ( 1 , tmp ) ] ;
70426: LD_ADDR_VAR 0 1
70430: PUSH
70431: LD_VAR 0 2
70435: PUSH
70436: LD_INT 1
70438: PPUSH
70439: LD_VAR 0 2
70443: PPUSH
70444: CALL_OW 12
70448: ARRAY
70449: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70450: LD_VAR 0 1
70454: PPUSH
70455: LD_INT 0
70457: PPUSH
70458: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70462: LD_VAR 0 1
70466: PPUSH
70467: LD_OWVAR 3
70471: PUSH
70472: LD_VAR 0 1
70476: DIFF
70477: PPUSH
70478: LD_VAR 0 1
70482: PPUSH
70483: CALL_OW 74
70487: PPUSH
70488: CALL_OW 115
// wait ( 0 0$20 ) ;
70492: LD_INT 700
70494: PPUSH
70495: CALL_OW 67
// SetSide ( un , your_side ) ;
70499: LD_VAR 0 1
70503: PPUSH
70504: LD_OWVAR 2
70508: PPUSH
70509: CALL_OW 235
// end ;
70513: PPOPN 2
70515: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70516: LD_EXP 44
70520: PUSH
70521: LD_EXP 77
70525: AND
70526: IFFALSE 70632
70528: GO 70530
70530: DISABLE
70531: LD_INT 0
70533: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70534: LD_ADDR_VAR 0 1
70538: PUSH
70539: LD_INT 22
70541: PUSH
70542: LD_OWVAR 2
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 2
70553: PUSH
70554: LD_INT 30
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 30
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: LIST
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PPUSH
70583: CALL_OW 69
70587: ST_TO_ADDR
// if not depot then
70588: LD_VAR 0 1
70592: NOT
70593: IFFALSE 70597
// exit ;
70595: GO 70632
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70597: LD_VAR 0 1
70601: PUSH
70602: LD_INT 1
70604: ARRAY
70605: PPUSH
70606: CALL_OW 250
70610: PPUSH
70611: LD_VAR 0 1
70615: PUSH
70616: LD_INT 1
70618: ARRAY
70619: PPUSH
70620: CALL_OW 251
70624: PPUSH
70625: LD_INT 70
70627: PPUSH
70628: CALL_OW 495
// end ;
70632: PPOPN 1
70634: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70635: LD_EXP 44
70639: PUSH
70640: LD_EXP 78
70644: AND
70645: IFFALSE 70856
70647: GO 70649
70649: DISABLE
70650: LD_INT 0
70652: PPUSH
70653: PPUSH
70654: PPUSH
70655: PPUSH
70656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70657: LD_ADDR_VAR 0 5
70661: PUSH
70662: LD_INT 22
70664: PUSH
70665: LD_OWVAR 2
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 21
70676: PUSH
70677: LD_INT 1
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PPUSH
70688: CALL_OW 69
70692: ST_TO_ADDR
// if not tmp then
70693: LD_VAR 0 5
70697: NOT
70698: IFFALSE 70702
// exit ;
70700: GO 70856
// for i in tmp do
70702: LD_ADDR_VAR 0 1
70706: PUSH
70707: LD_VAR 0 5
70711: PUSH
70712: FOR_IN
70713: IFFALSE 70854
// begin d := rand ( 0 , 5 ) ;
70715: LD_ADDR_VAR 0 4
70719: PUSH
70720: LD_INT 0
70722: PPUSH
70723: LD_INT 5
70725: PPUSH
70726: CALL_OW 12
70730: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70731: LD_ADDR_VAR 0 2
70735: PUSH
70736: LD_VAR 0 1
70740: PPUSH
70741: CALL_OW 250
70745: PPUSH
70746: LD_VAR 0 4
70750: PPUSH
70751: LD_INT 3
70753: PPUSH
70754: LD_INT 12
70756: PPUSH
70757: CALL_OW 12
70761: PPUSH
70762: CALL_OW 272
70766: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70767: LD_ADDR_VAR 0 3
70771: PUSH
70772: LD_VAR 0 1
70776: PPUSH
70777: CALL_OW 251
70781: PPUSH
70782: LD_VAR 0 4
70786: PPUSH
70787: LD_INT 3
70789: PPUSH
70790: LD_INT 12
70792: PPUSH
70793: CALL_OW 12
70797: PPUSH
70798: CALL_OW 273
70802: ST_TO_ADDR
// if ValidHex ( x , y ) then
70803: LD_VAR 0 2
70807: PPUSH
70808: LD_VAR 0 3
70812: PPUSH
70813: CALL_OW 488
70817: IFFALSE 70852
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70819: LD_VAR 0 1
70823: PPUSH
70824: LD_VAR 0 2
70828: PPUSH
70829: LD_VAR 0 3
70833: PPUSH
70834: LD_INT 3
70836: PPUSH
70837: LD_INT 6
70839: PPUSH
70840: CALL_OW 12
70844: PPUSH
70845: LD_INT 1
70847: PPUSH
70848: CALL_OW 483
// end ;
70852: GO 70712
70854: POP
70855: POP
// end ;
70856: PPOPN 5
70858: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70859: LD_EXP 44
70863: PUSH
70864: LD_EXP 79
70868: AND
70869: IFFALSE 70963
70871: GO 70873
70873: DISABLE
70874: LD_INT 0
70876: PPUSH
70877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70878: LD_ADDR_VAR 0 2
70882: PUSH
70883: LD_INT 22
70885: PUSH
70886: LD_OWVAR 2
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 32
70897: PUSH
70898: LD_INT 1
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PUSH
70905: LD_INT 21
70907: PUSH
70908: LD_INT 2
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: LIST
70919: PPUSH
70920: CALL_OW 69
70924: ST_TO_ADDR
// if not tmp then
70925: LD_VAR 0 2
70929: NOT
70930: IFFALSE 70934
// exit ;
70932: GO 70963
// for i in tmp do
70934: LD_ADDR_VAR 0 1
70938: PUSH
70939: LD_VAR 0 2
70943: PUSH
70944: FOR_IN
70945: IFFALSE 70961
// SetFuel ( i , 0 ) ;
70947: LD_VAR 0 1
70951: PPUSH
70952: LD_INT 0
70954: PPUSH
70955: CALL_OW 240
70959: GO 70944
70961: POP
70962: POP
// end ;
70963: PPOPN 2
70965: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70966: LD_EXP 44
70970: PUSH
70971: LD_EXP 80
70975: AND
70976: IFFALSE 71042
70978: GO 70980
70980: DISABLE
70981: LD_INT 0
70983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70984: LD_ADDR_VAR 0 1
70988: PUSH
70989: LD_INT 22
70991: PUSH
70992: LD_OWVAR 2
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 30
71003: PUSH
71004: LD_INT 29
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PPUSH
71015: CALL_OW 69
71019: ST_TO_ADDR
// if not tmp then
71020: LD_VAR 0 1
71024: NOT
71025: IFFALSE 71029
// exit ;
71027: GO 71042
// DestroyUnit ( tmp [ 1 ] ) ;
71029: LD_VAR 0 1
71033: PUSH
71034: LD_INT 1
71036: ARRAY
71037: PPUSH
71038: CALL_OW 65
// end ;
71042: PPOPN 1
71044: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71045: LD_EXP 44
71049: PUSH
71050: LD_EXP 82
71054: AND
71055: IFFALSE 71184
71057: GO 71059
71059: DISABLE
71060: LD_INT 0
71062: PPUSH
// begin uc_side := 0 ;
71063: LD_ADDR_OWVAR 20
71067: PUSH
71068: LD_INT 0
71070: ST_TO_ADDR
// uc_nation := nation_arabian ;
71071: LD_ADDR_OWVAR 21
71075: PUSH
71076: LD_INT 2
71078: ST_TO_ADDR
// hc_gallery :=  ;
71079: LD_ADDR_OWVAR 33
71083: PUSH
71084: LD_STRING 
71086: ST_TO_ADDR
// hc_name :=  ;
71087: LD_ADDR_OWVAR 26
71091: PUSH
71092: LD_STRING 
71094: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71095: LD_INT 1
71097: PPUSH
71098: LD_INT 11
71100: PPUSH
71101: LD_INT 10
71103: PPUSH
71104: CALL_OW 380
// un := CreateHuman ;
71108: LD_ADDR_VAR 0 1
71112: PUSH
71113: CALL_OW 44
71117: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71118: LD_VAR 0 1
71122: PPUSH
71123: LD_INT 1
71125: PPUSH
71126: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71130: LD_INT 35
71132: PPUSH
71133: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71137: LD_VAR 0 1
71141: PPUSH
71142: LD_INT 22
71144: PUSH
71145: LD_OWVAR 2
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PPUSH
71154: CALL_OW 69
71158: PPUSH
71159: LD_VAR 0 1
71163: PPUSH
71164: CALL_OW 74
71168: PPUSH
71169: CALL_OW 115
// until IsDead ( un ) ;
71173: LD_VAR 0 1
71177: PPUSH
71178: CALL_OW 301
71182: IFFALSE 71130
// end ;
71184: PPOPN 1
71186: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71187: LD_EXP 44
71191: PUSH
71192: LD_EXP 84
71196: AND
71197: IFFALSE 71209
71199: GO 71201
71201: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71202: LD_STRING earthquake(getX(game), 0, 32)
71204: PPUSH
71205: CALL_OW 559
71209: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71210: LD_EXP 44
71214: PUSH
71215: LD_EXP 85
71219: AND
71220: IFFALSE 71311
71222: GO 71224
71224: DISABLE
71225: LD_INT 0
71227: PPUSH
// begin enable ;
71228: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71229: LD_ADDR_VAR 0 1
71233: PUSH
71234: LD_INT 22
71236: PUSH
71237: LD_OWVAR 2
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 21
71248: PUSH
71249: LD_INT 2
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 33
71258: PUSH
71259: LD_INT 3
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: PPUSH
71271: CALL_OW 69
71275: ST_TO_ADDR
// if not tmp then
71276: LD_VAR 0 1
71280: NOT
71281: IFFALSE 71285
// exit ;
71283: GO 71311
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71285: LD_VAR 0 1
71289: PUSH
71290: LD_INT 1
71292: PPUSH
71293: LD_VAR 0 1
71297: PPUSH
71298: CALL_OW 12
71302: ARRAY
71303: PPUSH
71304: LD_INT 1
71306: PPUSH
71307: CALL_OW 234
// end ;
71311: PPOPN 1
71313: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71314: LD_EXP 44
71318: PUSH
71319: LD_EXP 86
71323: AND
71324: IFFALSE 71465
71326: GO 71328
71328: DISABLE
71329: LD_INT 0
71331: PPUSH
71332: PPUSH
71333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71334: LD_ADDR_VAR 0 3
71338: PUSH
71339: LD_INT 22
71341: PUSH
71342: LD_OWVAR 2
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 25
71353: PUSH
71354: LD_INT 1
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PPUSH
71365: CALL_OW 69
71369: ST_TO_ADDR
// if not tmp then
71370: LD_VAR 0 3
71374: NOT
71375: IFFALSE 71379
// exit ;
71377: GO 71465
// un := tmp [ rand ( 1 , tmp ) ] ;
71379: LD_ADDR_VAR 0 2
71383: PUSH
71384: LD_VAR 0 3
71388: PUSH
71389: LD_INT 1
71391: PPUSH
71392: LD_VAR 0 3
71396: PPUSH
71397: CALL_OW 12
71401: ARRAY
71402: ST_TO_ADDR
// if Crawls ( un ) then
71403: LD_VAR 0 2
71407: PPUSH
71408: CALL_OW 318
71412: IFFALSE 71423
// ComWalk ( un ) ;
71414: LD_VAR 0 2
71418: PPUSH
71419: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71423: LD_VAR 0 2
71427: PPUSH
71428: LD_INT 9
71430: PPUSH
71431: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71435: LD_INT 28
71437: PPUSH
71438: LD_OWVAR 2
71442: PPUSH
71443: LD_INT 2
71445: PPUSH
71446: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71450: LD_INT 29
71452: PPUSH
71453: LD_OWVAR 2
71457: PPUSH
71458: LD_INT 2
71460: PPUSH
71461: CALL_OW 322
// end ;
71465: PPOPN 3
71467: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71468: LD_EXP 44
71472: PUSH
71473: LD_EXP 87
71477: AND
71478: IFFALSE 71589
71480: GO 71482
71482: DISABLE
71483: LD_INT 0
71485: PPUSH
71486: PPUSH
71487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71488: LD_ADDR_VAR 0 3
71492: PUSH
71493: LD_INT 22
71495: PUSH
71496: LD_OWVAR 2
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 25
71507: PUSH
71508: LD_INT 1
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PPUSH
71519: CALL_OW 69
71523: ST_TO_ADDR
// if not tmp then
71524: LD_VAR 0 3
71528: NOT
71529: IFFALSE 71533
// exit ;
71531: GO 71589
// un := tmp [ rand ( 1 , tmp ) ] ;
71533: LD_ADDR_VAR 0 2
71537: PUSH
71538: LD_VAR 0 3
71542: PUSH
71543: LD_INT 1
71545: PPUSH
71546: LD_VAR 0 3
71550: PPUSH
71551: CALL_OW 12
71555: ARRAY
71556: ST_TO_ADDR
// if Crawls ( un ) then
71557: LD_VAR 0 2
71561: PPUSH
71562: CALL_OW 318
71566: IFFALSE 71577
// ComWalk ( un ) ;
71568: LD_VAR 0 2
71572: PPUSH
71573: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71577: LD_VAR 0 2
71581: PPUSH
71582: LD_INT 8
71584: PPUSH
71585: CALL_OW 336
// end ;
71589: PPOPN 3
71591: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71592: LD_EXP 44
71596: PUSH
71597: LD_EXP 88
71601: AND
71602: IFFALSE 71746
71604: GO 71606
71606: DISABLE
71607: LD_INT 0
71609: PPUSH
71610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71611: LD_ADDR_VAR 0 2
71615: PUSH
71616: LD_INT 22
71618: PUSH
71619: LD_OWVAR 2
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 21
71630: PUSH
71631: LD_INT 2
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 2
71640: PUSH
71641: LD_INT 34
71643: PUSH
71644: LD_INT 12
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 34
71653: PUSH
71654: LD_INT 51
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 34
71663: PUSH
71664: LD_INT 32
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: LIST
71681: PPUSH
71682: CALL_OW 69
71686: ST_TO_ADDR
// if not tmp then
71687: LD_VAR 0 2
71691: NOT
71692: IFFALSE 71696
// exit ;
71694: GO 71746
// for i in tmp do
71696: LD_ADDR_VAR 0 1
71700: PUSH
71701: LD_VAR 0 2
71705: PUSH
71706: FOR_IN
71707: IFFALSE 71744
// if GetCargo ( i , mat_artifact ) = 0 then
71709: LD_VAR 0 1
71713: PPUSH
71714: LD_INT 4
71716: PPUSH
71717: CALL_OW 289
71721: PUSH
71722: LD_INT 0
71724: EQUAL
71725: IFFALSE 71742
// SetCargo ( i , mat_siberit , 100 ) ;
71727: LD_VAR 0 1
71731: PPUSH
71732: LD_INT 3
71734: PPUSH
71735: LD_INT 100
71737: PPUSH
71738: CALL_OW 290
71742: GO 71706
71744: POP
71745: POP
// end ;
71746: PPOPN 2
71748: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71749: LD_EXP 44
71753: PUSH
71754: LD_EXP 89
71758: AND
71759: IFFALSE 71942
71761: GO 71763
71763: DISABLE
71764: LD_INT 0
71766: PPUSH
71767: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71768: LD_ADDR_VAR 0 2
71772: PUSH
71773: LD_INT 22
71775: PUSH
71776: LD_OWVAR 2
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PPUSH
71785: CALL_OW 69
71789: ST_TO_ADDR
// if not tmp then
71790: LD_VAR 0 2
71794: NOT
71795: IFFALSE 71799
// exit ;
71797: GO 71942
// for i := 1 to 2 do
71799: LD_ADDR_VAR 0 1
71803: PUSH
71804: DOUBLE
71805: LD_INT 1
71807: DEC
71808: ST_TO_ADDR
71809: LD_INT 2
71811: PUSH
71812: FOR_TO
71813: IFFALSE 71940
// begin uc_side := your_side ;
71815: LD_ADDR_OWVAR 20
71819: PUSH
71820: LD_OWVAR 2
71824: ST_TO_ADDR
// uc_nation := nation_american ;
71825: LD_ADDR_OWVAR 21
71829: PUSH
71830: LD_INT 1
71832: ST_TO_ADDR
// vc_chassis := us_morphling ;
71833: LD_ADDR_OWVAR 37
71837: PUSH
71838: LD_INT 5
71840: ST_TO_ADDR
// vc_engine := engine_siberite ;
71841: LD_ADDR_OWVAR 39
71845: PUSH
71846: LD_INT 3
71848: ST_TO_ADDR
// vc_control := control_computer ;
71849: LD_ADDR_OWVAR 38
71853: PUSH
71854: LD_INT 3
71856: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71857: LD_ADDR_OWVAR 40
71861: PUSH
71862: LD_INT 10
71864: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71865: LD_VAR 0 2
71869: PUSH
71870: LD_INT 1
71872: ARRAY
71873: PPUSH
71874: CALL_OW 310
71878: NOT
71879: IFFALSE 71926
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71881: CALL_OW 45
71885: PPUSH
71886: LD_VAR 0 2
71890: PUSH
71891: LD_INT 1
71893: ARRAY
71894: PPUSH
71895: CALL_OW 250
71899: PPUSH
71900: LD_VAR 0 2
71904: PUSH
71905: LD_INT 1
71907: ARRAY
71908: PPUSH
71909: CALL_OW 251
71913: PPUSH
71914: LD_INT 12
71916: PPUSH
71917: LD_INT 1
71919: PPUSH
71920: CALL_OW 50
71924: GO 71938
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71926: CALL_OW 45
71930: PPUSH
71931: LD_INT 1
71933: PPUSH
71934: CALL_OW 51
// end ;
71938: GO 71812
71940: POP
71941: POP
// end ;
71942: PPOPN 2
71944: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71945: LD_EXP 44
71949: PUSH
71950: LD_EXP 90
71954: AND
71955: IFFALSE 72177
71957: GO 71959
71959: DISABLE
71960: LD_INT 0
71962: PPUSH
71963: PPUSH
71964: PPUSH
71965: PPUSH
71966: PPUSH
71967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71968: LD_ADDR_VAR 0 6
71972: PUSH
71973: LD_INT 22
71975: PUSH
71976: LD_OWVAR 2
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 21
71987: PUSH
71988: LD_INT 1
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: LD_INT 23
72000: PUSH
72001: LD_INT 0
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: LIST
72016: PPUSH
72017: CALL_OW 69
72021: ST_TO_ADDR
// if not tmp then
72022: LD_VAR 0 6
72026: NOT
72027: IFFALSE 72031
// exit ;
72029: GO 72177
// s1 := rand ( 1 , 4 ) ;
72031: LD_ADDR_VAR 0 2
72035: PUSH
72036: LD_INT 1
72038: PPUSH
72039: LD_INT 4
72041: PPUSH
72042: CALL_OW 12
72046: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72047: LD_ADDR_VAR 0 4
72051: PUSH
72052: LD_VAR 0 6
72056: PUSH
72057: LD_INT 1
72059: ARRAY
72060: PPUSH
72061: LD_VAR 0 2
72065: PPUSH
72066: CALL_OW 259
72070: ST_TO_ADDR
// if s1 = 1 then
72071: LD_VAR 0 2
72075: PUSH
72076: LD_INT 1
72078: EQUAL
72079: IFFALSE 72099
// s2 := rand ( 2 , 4 ) else
72081: LD_ADDR_VAR 0 3
72085: PUSH
72086: LD_INT 2
72088: PPUSH
72089: LD_INT 4
72091: PPUSH
72092: CALL_OW 12
72096: ST_TO_ADDR
72097: GO 72107
// s2 := 1 ;
72099: LD_ADDR_VAR 0 3
72103: PUSH
72104: LD_INT 1
72106: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72107: LD_ADDR_VAR 0 5
72111: PUSH
72112: LD_VAR 0 6
72116: PUSH
72117: LD_INT 1
72119: ARRAY
72120: PPUSH
72121: LD_VAR 0 3
72125: PPUSH
72126: CALL_OW 259
72130: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72131: LD_VAR 0 6
72135: PUSH
72136: LD_INT 1
72138: ARRAY
72139: PPUSH
72140: LD_VAR 0 2
72144: PPUSH
72145: LD_VAR 0 5
72149: PPUSH
72150: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72154: LD_VAR 0 6
72158: PUSH
72159: LD_INT 1
72161: ARRAY
72162: PPUSH
72163: LD_VAR 0 3
72167: PPUSH
72168: LD_VAR 0 4
72172: PPUSH
72173: CALL_OW 237
// end ;
72177: PPOPN 6
72179: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72180: LD_EXP 44
72184: PUSH
72185: LD_EXP 91
72189: AND
72190: IFFALSE 72269
72192: GO 72194
72194: DISABLE
72195: LD_INT 0
72197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72198: LD_ADDR_VAR 0 1
72202: PUSH
72203: LD_INT 22
72205: PUSH
72206: LD_OWVAR 2
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 30
72217: PUSH
72218: LD_INT 3
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PPUSH
72229: CALL_OW 69
72233: ST_TO_ADDR
// if not tmp then
72234: LD_VAR 0 1
72238: NOT
72239: IFFALSE 72243
// exit ;
72241: GO 72269
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72243: LD_VAR 0 1
72247: PUSH
72248: LD_INT 1
72250: PPUSH
72251: LD_VAR 0 1
72255: PPUSH
72256: CALL_OW 12
72260: ARRAY
72261: PPUSH
72262: LD_INT 1
72264: PPUSH
72265: CALL_OW 234
// end ;
72269: PPOPN 1
72271: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72272: LD_EXP 44
72276: PUSH
72277: LD_EXP 92
72281: AND
72282: IFFALSE 72394
72284: GO 72286
72286: DISABLE
72287: LD_INT 0
72289: PPUSH
72290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72291: LD_ADDR_VAR 0 2
72295: PUSH
72296: LD_INT 22
72298: PUSH
72299: LD_OWVAR 2
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 2
72310: PUSH
72311: LD_INT 30
72313: PUSH
72314: LD_INT 27
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 30
72323: PUSH
72324: LD_INT 26
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 30
72333: PUSH
72334: LD_INT 28
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PPUSH
72351: CALL_OW 69
72355: ST_TO_ADDR
// if not tmp then
72356: LD_VAR 0 2
72360: NOT
72361: IFFALSE 72365
// exit ;
72363: GO 72394
// for i in tmp do
72365: LD_ADDR_VAR 0 1
72369: PUSH
72370: LD_VAR 0 2
72374: PUSH
72375: FOR_IN
72376: IFFALSE 72392
// SetLives ( i , 1 ) ;
72378: LD_VAR 0 1
72382: PPUSH
72383: LD_INT 1
72385: PPUSH
72386: CALL_OW 234
72390: GO 72375
72392: POP
72393: POP
// end ;
72394: PPOPN 2
72396: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72397: LD_EXP 44
72401: PUSH
72402: LD_EXP 93
72406: AND
72407: IFFALSE 72694
72409: GO 72411
72411: DISABLE
72412: LD_INT 0
72414: PPUSH
72415: PPUSH
72416: PPUSH
// begin i := rand ( 1 , 7 ) ;
72417: LD_ADDR_VAR 0 1
72421: PUSH
72422: LD_INT 1
72424: PPUSH
72425: LD_INT 7
72427: PPUSH
72428: CALL_OW 12
72432: ST_TO_ADDR
// case i of 1 :
72433: LD_VAR 0 1
72437: PUSH
72438: LD_INT 1
72440: DOUBLE
72441: EQUAL
72442: IFTRUE 72446
72444: GO 72456
72446: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72447: LD_STRING earthquake(getX(game), 0, 32)
72449: PPUSH
72450: CALL_OW 559
72454: GO 72694
72456: LD_INT 2
72458: DOUBLE
72459: EQUAL
72460: IFTRUE 72464
72462: GO 72478
72464: POP
// begin ToLua ( displayStucuk(); ) ;
72465: LD_STRING displayStucuk();
72467: PPUSH
72468: CALL_OW 559
// ResetFog ;
72472: CALL_OW 335
// end ; 3 :
72476: GO 72694
72478: LD_INT 3
72480: DOUBLE
72481: EQUAL
72482: IFTRUE 72486
72484: GO 72590
72486: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72487: LD_ADDR_VAR 0 2
72491: PUSH
72492: LD_INT 22
72494: PUSH
72495: LD_OWVAR 2
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 25
72506: PUSH
72507: LD_INT 1
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PPUSH
72518: CALL_OW 69
72522: ST_TO_ADDR
// if not tmp then
72523: LD_VAR 0 2
72527: NOT
72528: IFFALSE 72532
// exit ;
72530: GO 72694
// un := tmp [ rand ( 1 , tmp ) ] ;
72532: LD_ADDR_VAR 0 3
72536: PUSH
72537: LD_VAR 0 2
72541: PUSH
72542: LD_INT 1
72544: PPUSH
72545: LD_VAR 0 2
72549: PPUSH
72550: CALL_OW 12
72554: ARRAY
72555: ST_TO_ADDR
// if Crawls ( un ) then
72556: LD_VAR 0 3
72560: PPUSH
72561: CALL_OW 318
72565: IFFALSE 72576
// ComWalk ( un ) ;
72567: LD_VAR 0 3
72571: PPUSH
72572: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72576: LD_VAR 0 3
72580: PPUSH
72581: LD_INT 8
72583: PPUSH
72584: CALL_OW 336
// end ; 4 :
72588: GO 72694
72590: LD_INT 4
72592: DOUBLE
72593: EQUAL
72594: IFTRUE 72598
72596: GO 72672
72598: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72599: LD_ADDR_VAR 0 2
72603: PUSH
72604: LD_INT 22
72606: PUSH
72607: LD_OWVAR 2
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 30
72618: PUSH
72619: LD_INT 29
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PPUSH
72630: CALL_OW 69
72634: ST_TO_ADDR
// if not tmp then
72635: LD_VAR 0 2
72639: NOT
72640: IFFALSE 72644
// exit ;
72642: GO 72694
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72644: LD_VAR 0 2
72648: PUSH
72649: LD_INT 1
72651: ARRAY
72652: PPUSH
72653: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72657: LD_VAR 0 2
72661: PUSH
72662: LD_INT 1
72664: ARRAY
72665: PPUSH
72666: CALL_OW 65
// end ; 5 .. 7 :
72670: GO 72694
72672: LD_INT 5
72674: DOUBLE
72675: GREATEREQUAL
72676: IFFALSE 72684
72678: LD_INT 7
72680: DOUBLE
72681: LESSEQUAL
72682: IFTRUE 72686
72684: GO 72693
72686: POP
// StreamSibBomb ; end ;
72687: CALL 68931 0 0
72691: GO 72694
72693: POP
// end ;
72694: PPOPN 3
72696: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72697: LD_EXP 44
72701: PUSH
72702: LD_EXP 94
72706: AND
72707: IFFALSE 72863
72709: GO 72711
72711: DISABLE
72712: LD_INT 0
72714: PPUSH
72715: PPUSH
72716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72717: LD_ADDR_VAR 0 2
72721: PUSH
72722: LD_INT 81
72724: PUSH
72725: LD_OWVAR 2
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 2
72736: PUSH
72737: LD_INT 21
72739: PUSH
72740: LD_INT 1
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 21
72749: PUSH
72750: LD_INT 2
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: LIST
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PPUSH
72766: CALL_OW 69
72770: ST_TO_ADDR
// if not tmp then
72771: LD_VAR 0 2
72775: NOT
72776: IFFALSE 72780
// exit ;
72778: GO 72863
// p := 0 ;
72780: LD_ADDR_VAR 0 3
72784: PUSH
72785: LD_INT 0
72787: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72788: LD_INT 35
72790: PPUSH
72791: CALL_OW 67
// p := p + 1 ;
72795: LD_ADDR_VAR 0 3
72799: PUSH
72800: LD_VAR 0 3
72804: PUSH
72805: LD_INT 1
72807: PLUS
72808: ST_TO_ADDR
// for i in tmp do
72809: LD_ADDR_VAR 0 1
72813: PUSH
72814: LD_VAR 0 2
72818: PUSH
72819: FOR_IN
72820: IFFALSE 72851
// if GetLives ( i ) < 1000 then
72822: LD_VAR 0 1
72826: PPUSH
72827: CALL_OW 256
72831: PUSH
72832: LD_INT 1000
72834: LESS
72835: IFFALSE 72849
// SetLives ( i , 1000 ) ;
72837: LD_VAR 0 1
72841: PPUSH
72842: LD_INT 1000
72844: PPUSH
72845: CALL_OW 234
72849: GO 72819
72851: POP
72852: POP
// until p > 20 ;
72853: LD_VAR 0 3
72857: PUSH
72858: LD_INT 20
72860: GREATER
72861: IFFALSE 72788
// end ;
72863: PPOPN 3
72865: END
// every 0 0$1 trigger StreamModeActive and sTime do
72866: LD_EXP 44
72870: PUSH
72871: LD_EXP 95
72875: AND
72876: IFFALSE 72911
72878: GO 72880
72880: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72881: LD_INT 28
72883: PPUSH
72884: LD_OWVAR 2
72888: PPUSH
72889: LD_INT 2
72891: PPUSH
72892: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72896: LD_INT 30
72898: PPUSH
72899: LD_OWVAR 2
72903: PPUSH
72904: LD_INT 2
72906: PPUSH
72907: CALL_OW 322
// end ;
72911: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72912: LD_EXP 44
72916: PUSH
72917: LD_EXP 96
72921: AND
72922: IFFALSE 73043
72924: GO 72926
72926: DISABLE
72927: LD_INT 0
72929: PPUSH
72930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72931: LD_ADDR_VAR 0 2
72935: PUSH
72936: LD_INT 22
72938: PUSH
72939: LD_OWVAR 2
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 21
72950: PUSH
72951: LD_INT 1
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 3
72960: PUSH
72961: LD_INT 23
72963: PUSH
72964: LD_INT 0
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: LIST
72979: PPUSH
72980: CALL_OW 69
72984: ST_TO_ADDR
// if not tmp then
72985: LD_VAR 0 2
72989: NOT
72990: IFFALSE 72994
// exit ;
72992: GO 73043
// for i in tmp do
72994: LD_ADDR_VAR 0 1
72998: PUSH
72999: LD_VAR 0 2
73003: PUSH
73004: FOR_IN
73005: IFFALSE 73041
// begin if Crawls ( i ) then
73007: LD_VAR 0 1
73011: PPUSH
73012: CALL_OW 318
73016: IFFALSE 73027
// ComWalk ( i ) ;
73018: LD_VAR 0 1
73022: PPUSH
73023: CALL_OW 138
// SetClass ( i , 2 ) ;
73027: LD_VAR 0 1
73031: PPUSH
73032: LD_INT 2
73034: PPUSH
73035: CALL_OW 336
// end ;
73039: GO 73004
73041: POP
73042: POP
// end ;
73043: PPOPN 2
73045: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73046: LD_EXP 44
73050: PUSH
73051: LD_EXP 97
73055: AND
73056: IFFALSE 73344
73058: GO 73060
73060: DISABLE
73061: LD_INT 0
73063: PPUSH
73064: PPUSH
73065: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73066: LD_OWVAR 2
73070: PPUSH
73071: LD_INT 9
73073: PPUSH
73074: LD_INT 1
73076: PPUSH
73077: LD_INT 1
73079: PPUSH
73080: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73084: LD_INT 9
73086: PPUSH
73087: LD_OWVAR 2
73091: PPUSH
73092: CALL_OW 343
// uc_side := 9 ;
73096: LD_ADDR_OWVAR 20
73100: PUSH
73101: LD_INT 9
73103: ST_TO_ADDR
// uc_nation := 2 ;
73104: LD_ADDR_OWVAR 21
73108: PUSH
73109: LD_INT 2
73111: ST_TO_ADDR
// hc_name := Dark Warrior ;
73112: LD_ADDR_OWVAR 26
73116: PUSH
73117: LD_STRING Dark Warrior
73119: ST_TO_ADDR
// hc_gallery :=  ;
73120: LD_ADDR_OWVAR 33
73124: PUSH
73125: LD_STRING 
73127: ST_TO_ADDR
// hc_noskilllimit := true ;
73128: LD_ADDR_OWVAR 76
73132: PUSH
73133: LD_INT 1
73135: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73136: LD_ADDR_OWVAR 31
73140: PUSH
73141: LD_INT 30
73143: PUSH
73144: LD_INT 30
73146: PUSH
73147: LD_INT 30
73149: PUSH
73150: LD_INT 30
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: ST_TO_ADDR
// un := CreateHuman ;
73159: LD_ADDR_VAR 0 3
73163: PUSH
73164: CALL_OW 44
73168: ST_TO_ADDR
// hc_noskilllimit := false ;
73169: LD_ADDR_OWVAR 76
73173: PUSH
73174: LD_INT 0
73176: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73177: LD_VAR 0 3
73181: PPUSH
73182: LD_INT 1
73184: PPUSH
73185: CALL_OW 51
// ToLua ( playRanger() ) ;
73189: LD_STRING playRanger()
73191: PPUSH
73192: CALL_OW 559
// p := 0 ;
73196: LD_ADDR_VAR 0 2
73200: PUSH
73201: LD_INT 0
73203: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73204: LD_INT 35
73206: PPUSH
73207: CALL_OW 67
// p := p + 1 ;
73211: LD_ADDR_VAR 0 2
73215: PUSH
73216: LD_VAR 0 2
73220: PUSH
73221: LD_INT 1
73223: PLUS
73224: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73225: LD_VAR 0 3
73229: PPUSH
73230: CALL_OW 256
73234: PUSH
73235: LD_INT 1000
73237: LESS
73238: IFFALSE 73252
// SetLives ( un , 1000 ) ;
73240: LD_VAR 0 3
73244: PPUSH
73245: LD_INT 1000
73247: PPUSH
73248: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73252: LD_VAR 0 3
73256: PPUSH
73257: LD_INT 81
73259: PUSH
73260: LD_OWVAR 2
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 91
73271: PUSH
73272: LD_VAR 0 3
73276: PUSH
73277: LD_INT 30
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: LIST
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PPUSH
73289: CALL_OW 69
73293: PPUSH
73294: LD_VAR 0 3
73298: PPUSH
73299: CALL_OW 74
73303: PPUSH
73304: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73308: LD_VAR 0 2
73312: PUSH
73313: LD_INT 80
73315: GREATER
73316: PUSH
73317: LD_VAR 0 3
73321: PPUSH
73322: CALL_OW 301
73326: OR
73327: IFFALSE 73204
// if un then
73329: LD_VAR 0 3
73333: IFFALSE 73344
// RemoveUnit ( un ) ;
73335: LD_VAR 0 3
73339: PPUSH
73340: CALL_OW 64
// end ;
73344: PPOPN 3
73346: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73347: LD_EXP 98
73351: IFFALSE 73467
73353: GO 73355
73355: DISABLE
73356: LD_INT 0
73358: PPUSH
73359: PPUSH
73360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73361: LD_ADDR_VAR 0 2
73365: PUSH
73366: LD_INT 81
73368: PUSH
73369: LD_OWVAR 2
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 21
73380: PUSH
73381: LD_INT 1
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PPUSH
73392: CALL_OW 69
73396: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73397: LD_STRING playComputer()
73399: PPUSH
73400: CALL_OW 559
// if not tmp then
73404: LD_VAR 0 2
73408: NOT
73409: IFFALSE 73413
// exit ;
73411: GO 73467
// for i in tmp do
73413: LD_ADDR_VAR 0 1
73417: PUSH
73418: LD_VAR 0 2
73422: PUSH
73423: FOR_IN
73424: IFFALSE 73465
// for j := 1 to 4 do
73426: LD_ADDR_VAR 0 3
73430: PUSH
73431: DOUBLE
73432: LD_INT 1
73434: DEC
73435: ST_TO_ADDR
73436: LD_INT 4
73438: PUSH
73439: FOR_TO
73440: IFFALSE 73461
// SetSkill ( i , j , 10 ) ;
73442: LD_VAR 0 1
73446: PPUSH
73447: LD_VAR 0 3
73451: PPUSH
73452: LD_INT 10
73454: PPUSH
73455: CALL_OW 237
73459: GO 73439
73461: POP
73462: POP
73463: GO 73423
73465: POP
73466: POP
// end ;
73467: PPOPN 3
73469: END
// every 0 0$1 trigger s30 do var i , tmp ;
73470: LD_EXP 99
73474: IFFALSE 73543
73476: GO 73478
73478: DISABLE
73479: LD_INT 0
73481: PPUSH
73482: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73483: LD_ADDR_VAR 0 2
73487: PUSH
73488: LD_INT 22
73490: PUSH
73491: LD_OWVAR 2
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PPUSH
73500: CALL_OW 69
73504: ST_TO_ADDR
// if not tmp then
73505: LD_VAR 0 2
73509: NOT
73510: IFFALSE 73514
// exit ;
73512: GO 73543
// for i in tmp do
73514: LD_ADDR_VAR 0 1
73518: PUSH
73519: LD_VAR 0 2
73523: PUSH
73524: FOR_IN
73525: IFFALSE 73541
// SetLives ( i , 300 ) ;
73527: LD_VAR 0 1
73531: PPUSH
73532: LD_INT 300
73534: PPUSH
73535: CALL_OW 234
73539: GO 73524
73541: POP
73542: POP
// end ;
73543: PPOPN 2
73545: END
// every 0 0$1 trigger s60 do var i , tmp ;
73546: LD_EXP 100
73550: IFFALSE 73619
73552: GO 73554
73554: DISABLE
73555: LD_INT 0
73557: PPUSH
73558: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73559: LD_ADDR_VAR 0 2
73563: PUSH
73564: LD_INT 22
73566: PUSH
73567: LD_OWVAR 2
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PPUSH
73576: CALL_OW 69
73580: ST_TO_ADDR
// if not tmp then
73581: LD_VAR 0 2
73585: NOT
73586: IFFALSE 73590
// exit ;
73588: GO 73619
// for i in tmp do
73590: LD_ADDR_VAR 0 1
73594: PUSH
73595: LD_VAR 0 2
73599: PUSH
73600: FOR_IN
73601: IFFALSE 73617
// SetLives ( i , 600 ) ;
73603: LD_VAR 0 1
73607: PPUSH
73608: LD_INT 600
73610: PPUSH
73611: CALL_OW 234
73615: GO 73600
73617: POP
73618: POP
// end ;
73619: PPOPN 2
73621: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73622: LD_INT 0
73624: PPUSH
// case cmd of 301 :
73625: LD_VAR 0 1
73629: PUSH
73630: LD_INT 301
73632: DOUBLE
73633: EQUAL
73634: IFTRUE 73638
73636: GO 73670
73638: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73639: LD_VAR 0 6
73643: PPUSH
73644: LD_VAR 0 7
73648: PPUSH
73649: LD_VAR 0 8
73653: PPUSH
73654: LD_VAR 0 4
73658: PPUSH
73659: LD_VAR 0 5
73663: PPUSH
73664: CALL 74879 0 5
73668: GO 73791
73670: LD_INT 302
73672: DOUBLE
73673: EQUAL
73674: IFTRUE 73678
73676: GO 73715
73678: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73679: LD_VAR 0 6
73683: PPUSH
73684: LD_VAR 0 7
73688: PPUSH
73689: LD_VAR 0 8
73693: PPUSH
73694: LD_VAR 0 9
73698: PPUSH
73699: LD_VAR 0 4
73703: PPUSH
73704: LD_VAR 0 5
73708: PPUSH
73709: CALL 74970 0 6
73713: GO 73791
73715: LD_INT 303
73717: DOUBLE
73718: EQUAL
73719: IFTRUE 73723
73721: GO 73760
73723: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73724: LD_VAR 0 6
73728: PPUSH
73729: LD_VAR 0 7
73733: PPUSH
73734: LD_VAR 0 8
73738: PPUSH
73739: LD_VAR 0 9
73743: PPUSH
73744: LD_VAR 0 4
73748: PPUSH
73749: LD_VAR 0 5
73753: PPUSH
73754: CALL 73796 0 6
73758: GO 73791
73760: LD_INT 304
73762: DOUBLE
73763: EQUAL
73764: IFTRUE 73768
73766: GO 73790
73768: POP
// hHackTeleport ( unit , x , y ) ; end ;
73769: LD_VAR 0 2
73773: PPUSH
73774: LD_VAR 0 4
73778: PPUSH
73779: LD_VAR 0 5
73783: PPUSH
73784: CALL 75563 0 3
73788: GO 73791
73790: POP
// end ;
73791: LD_VAR 0 12
73795: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73796: LD_INT 0
73798: PPUSH
73799: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73800: LD_VAR 0 1
73804: PUSH
73805: LD_INT 1
73807: LESS
73808: PUSH
73809: LD_VAR 0 1
73813: PUSH
73814: LD_INT 3
73816: GREATER
73817: OR
73818: PUSH
73819: LD_VAR 0 5
73823: PPUSH
73824: LD_VAR 0 6
73828: PPUSH
73829: CALL_OW 428
73833: OR
73834: IFFALSE 73838
// exit ;
73836: GO 74566
// uc_side := your_side ;
73838: LD_ADDR_OWVAR 20
73842: PUSH
73843: LD_OWVAR 2
73847: ST_TO_ADDR
// uc_nation := nation ;
73848: LD_ADDR_OWVAR 21
73852: PUSH
73853: LD_VAR 0 1
73857: ST_TO_ADDR
// bc_level = 1 ;
73858: LD_ADDR_OWVAR 43
73862: PUSH
73863: LD_INT 1
73865: ST_TO_ADDR
// case btype of 1 :
73866: LD_VAR 0 2
73870: PUSH
73871: LD_INT 1
73873: DOUBLE
73874: EQUAL
73875: IFTRUE 73879
73877: GO 73890
73879: POP
// bc_type := b_depot ; 2 :
73880: LD_ADDR_OWVAR 42
73884: PUSH
73885: LD_INT 0
73887: ST_TO_ADDR
73888: GO 74510
73890: LD_INT 2
73892: DOUBLE
73893: EQUAL
73894: IFTRUE 73898
73896: GO 73909
73898: POP
// bc_type := b_warehouse ; 3 :
73899: LD_ADDR_OWVAR 42
73903: PUSH
73904: LD_INT 1
73906: ST_TO_ADDR
73907: GO 74510
73909: LD_INT 3
73911: DOUBLE
73912: EQUAL
73913: IFTRUE 73917
73915: GO 73928
73917: POP
// bc_type := b_lab ; 4 .. 9 :
73918: LD_ADDR_OWVAR 42
73922: PUSH
73923: LD_INT 6
73925: ST_TO_ADDR
73926: GO 74510
73928: LD_INT 4
73930: DOUBLE
73931: GREATEREQUAL
73932: IFFALSE 73940
73934: LD_INT 9
73936: DOUBLE
73937: LESSEQUAL
73938: IFTRUE 73942
73940: GO 74002
73942: POP
// begin bc_type := b_lab_half ;
73943: LD_ADDR_OWVAR 42
73947: PUSH
73948: LD_INT 7
73950: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73951: LD_ADDR_OWVAR 44
73955: PUSH
73956: LD_INT 10
73958: PUSH
73959: LD_INT 11
73961: PUSH
73962: LD_INT 12
73964: PUSH
73965: LD_INT 15
73967: PUSH
73968: LD_INT 14
73970: PUSH
73971: LD_INT 13
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: PUSH
73982: LD_VAR 0 2
73986: PUSH
73987: LD_INT 3
73989: MINUS
73990: ARRAY
73991: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
73992: LD_ADDR_OWVAR 45
73996: PUSH
73997: LD_INT 9
73999: ST_TO_ADDR
// end ; 10 .. 13 :
74000: GO 74510
74002: LD_INT 10
74004: DOUBLE
74005: GREATEREQUAL
74006: IFFALSE 74014
74008: LD_INT 13
74010: DOUBLE
74011: LESSEQUAL
74012: IFTRUE 74016
74014: GO 74093
74016: POP
// begin bc_type := b_lab_full ;
74017: LD_ADDR_OWVAR 42
74021: PUSH
74022: LD_INT 8
74024: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74025: LD_ADDR_OWVAR 44
74029: PUSH
74030: LD_INT 10
74032: PUSH
74033: LD_INT 12
74035: PUSH
74036: LD_INT 14
74038: PUSH
74039: LD_INT 13
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: LIST
74046: LIST
74047: PUSH
74048: LD_VAR 0 2
74052: PUSH
74053: LD_INT 9
74055: MINUS
74056: ARRAY
74057: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74058: LD_ADDR_OWVAR 45
74062: PUSH
74063: LD_INT 11
74065: PUSH
74066: LD_INT 15
74068: PUSH
74069: LD_INT 12
74071: PUSH
74072: LD_INT 15
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: PUSH
74081: LD_VAR 0 2
74085: PUSH
74086: LD_INT 9
74088: MINUS
74089: ARRAY
74090: ST_TO_ADDR
// end ; 14 :
74091: GO 74510
74093: LD_INT 14
74095: DOUBLE
74096: EQUAL
74097: IFTRUE 74101
74099: GO 74112
74101: POP
// bc_type := b_workshop ; 15 :
74102: LD_ADDR_OWVAR 42
74106: PUSH
74107: LD_INT 2
74109: ST_TO_ADDR
74110: GO 74510
74112: LD_INT 15
74114: DOUBLE
74115: EQUAL
74116: IFTRUE 74120
74118: GO 74131
74120: POP
// bc_type := b_factory ; 16 :
74121: LD_ADDR_OWVAR 42
74125: PUSH
74126: LD_INT 3
74128: ST_TO_ADDR
74129: GO 74510
74131: LD_INT 16
74133: DOUBLE
74134: EQUAL
74135: IFTRUE 74139
74137: GO 74150
74139: POP
// bc_type := b_ext_gun ; 17 :
74140: LD_ADDR_OWVAR 42
74144: PUSH
74145: LD_INT 17
74147: ST_TO_ADDR
74148: GO 74510
74150: LD_INT 17
74152: DOUBLE
74153: EQUAL
74154: IFTRUE 74158
74156: GO 74186
74158: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74159: LD_ADDR_OWVAR 42
74163: PUSH
74164: LD_INT 19
74166: PUSH
74167: LD_INT 23
74169: PUSH
74170: LD_INT 19
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: LIST
74177: PUSH
74178: LD_VAR 0 1
74182: ARRAY
74183: ST_TO_ADDR
74184: GO 74510
74186: LD_INT 18
74188: DOUBLE
74189: EQUAL
74190: IFTRUE 74194
74192: GO 74205
74194: POP
// bc_type := b_ext_radar ; 19 :
74195: LD_ADDR_OWVAR 42
74199: PUSH
74200: LD_INT 20
74202: ST_TO_ADDR
74203: GO 74510
74205: LD_INT 19
74207: DOUBLE
74208: EQUAL
74209: IFTRUE 74213
74211: GO 74224
74213: POP
// bc_type := b_ext_radio ; 20 :
74214: LD_ADDR_OWVAR 42
74218: PUSH
74219: LD_INT 22
74221: ST_TO_ADDR
74222: GO 74510
74224: LD_INT 20
74226: DOUBLE
74227: EQUAL
74228: IFTRUE 74232
74230: GO 74243
74232: POP
// bc_type := b_ext_siberium ; 21 :
74233: LD_ADDR_OWVAR 42
74237: PUSH
74238: LD_INT 21
74240: ST_TO_ADDR
74241: GO 74510
74243: LD_INT 21
74245: DOUBLE
74246: EQUAL
74247: IFTRUE 74251
74249: GO 74262
74251: POP
// bc_type := b_ext_computer ; 22 :
74252: LD_ADDR_OWVAR 42
74256: PUSH
74257: LD_INT 24
74259: ST_TO_ADDR
74260: GO 74510
74262: LD_INT 22
74264: DOUBLE
74265: EQUAL
74266: IFTRUE 74270
74268: GO 74281
74270: POP
// bc_type := b_ext_track ; 23 :
74271: LD_ADDR_OWVAR 42
74275: PUSH
74276: LD_INT 16
74278: ST_TO_ADDR
74279: GO 74510
74281: LD_INT 23
74283: DOUBLE
74284: EQUAL
74285: IFTRUE 74289
74287: GO 74300
74289: POP
// bc_type := b_ext_laser ; 24 :
74290: LD_ADDR_OWVAR 42
74294: PUSH
74295: LD_INT 25
74297: ST_TO_ADDR
74298: GO 74510
74300: LD_INT 24
74302: DOUBLE
74303: EQUAL
74304: IFTRUE 74308
74306: GO 74319
74308: POP
// bc_type := b_control_tower ; 25 :
74309: LD_ADDR_OWVAR 42
74313: PUSH
74314: LD_INT 36
74316: ST_TO_ADDR
74317: GO 74510
74319: LD_INT 25
74321: DOUBLE
74322: EQUAL
74323: IFTRUE 74327
74325: GO 74338
74327: POP
// bc_type := b_breastwork ; 26 :
74328: LD_ADDR_OWVAR 42
74332: PUSH
74333: LD_INT 31
74335: ST_TO_ADDR
74336: GO 74510
74338: LD_INT 26
74340: DOUBLE
74341: EQUAL
74342: IFTRUE 74346
74344: GO 74357
74346: POP
// bc_type := b_bunker ; 27 :
74347: LD_ADDR_OWVAR 42
74351: PUSH
74352: LD_INT 32
74354: ST_TO_ADDR
74355: GO 74510
74357: LD_INT 27
74359: DOUBLE
74360: EQUAL
74361: IFTRUE 74365
74363: GO 74376
74365: POP
// bc_type := b_turret ; 28 :
74366: LD_ADDR_OWVAR 42
74370: PUSH
74371: LD_INT 33
74373: ST_TO_ADDR
74374: GO 74510
74376: LD_INT 28
74378: DOUBLE
74379: EQUAL
74380: IFTRUE 74384
74382: GO 74395
74384: POP
// bc_type := b_armoury ; 29 :
74385: LD_ADDR_OWVAR 42
74389: PUSH
74390: LD_INT 4
74392: ST_TO_ADDR
74393: GO 74510
74395: LD_INT 29
74397: DOUBLE
74398: EQUAL
74399: IFTRUE 74403
74401: GO 74414
74403: POP
// bc_type := b_barracks ; 30 :
74404: LD_ADDR_OWVAR 42
74408: PUSH
74409: LD_INT 5
74411: ST_TO_ADDR
74412: GO 74510
74414: LD_INT 30
74416: DOUBLE
74417: EQUAL
74418: IFTRUE 74422
74420: GO 74433
74422: POP
// bc_type := b_solar_power ; 31 :
74423: LD_ADDR_OWVAR 42
74427: PUSH
74428: LD_INT 27
74430: ST_TO_ADDR
74431: GO 74510
74433: LD_INT 31
74435: DOUBLE
74436: EQUAL
74437: IFTRUE 74441
74439: GO 74452
74441: POP
// bc_type := b_oil_power ; 32 :
74442: LD_ADDR_OWVAR 42
74446: PUSH
74447: LD_INT 26
74449: ST_TO_ADDR
74450: GO 74510
74452: LD_INT 32
74454: DOUBLE
74455: EQUAL
74456: IFTRUE 74460
74458: GO 74471
74460: POP
// bc_type := b_siberite_power ; 33 :
74461: LD_ADDR_OWVAR 42
74465: PUSH
74466: LD_INT 28
74468: ST_TO_ADDR
74469: GO 74510
74471: LD_INT 33
74473: DOUBLE
74474: EQUAL
74475: IFTRUE 74479
74477: GO 74490
74479: POP
// bc_type := b_oil_mine ; 34 :
74480: LD_ADDR_OWVAR 42
74484: PUSH
74485: LD_INT 29
74487: ST_TO_ADDR
74488: GO 74510
74490: LD_INT 34
74492: DOUBLE
74493: EQUAL
74494: IFTRUE 74498
74496: GO 74509
74498: POP
// bc_type := b_siberite_mine ; end ;
74499: LD_ADDR_OWVAR 42
74503: PUSH
74504: LD_INT 30
74506: ST_TO_ADDR
74507: GO 74510
74509: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74510: LD_ADDR_VAR 0 8
74514: PUSH
74515: LD_VAR 0 5
74519: PPUSH
74520: LD_VAR 0 6
74524: PPUSH
74525: LD_VAR 0 3
74529: PPUSH
74530: CALL_OW 47
74534: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74535: LD_OWVAR 42
74539: PUSH
74540: LD_INT 32
74542: PUSH
74543: LD_INT 33
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: IN
74550: IFFALSE 74566
// PlaceWeaponTurret ( b , weapon ) ;
74552: LD_VAR 0 8
74556: PPUSH
74557: LD_VAR 0 4
74561: PPUSH
74562: CALL_OW 431
// end ;
74566: LD_VAR 0 7
74570: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74571: LD_INT 0
74573: PPUSH
74574: PPUSH
74575: PPUSH
74576: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74577: LD_ADDR_VAR 0 4
74581: PUSH
74582: LD_INT 22
74584: PUSH
74585: LD_OWVAR 2
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: LD_INT 2
74596: PUSH
74597: LD_INT 30
74599: PUSH
74600: LD_INT 0
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 30
74609: PUSH
74610: LD_INT 1
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: LIST
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PPUSH
74626: CALL_OW 69
74630: ST_TO_ADDR
// if not tmp then
74631: LD_VAR 0 4
74635: NOT
74636: IFFALSE 74640
// exit ;
74638: GO 74699
// for i in tmp do
74640: LD_ADDR_VAR 0 2
74644: PUSH
74645: LD_VAR 0 4
74649: PUSH
74650: FOR_IN
74651: IFFALSE 74697
// for j = 1 to 3 do
74653: LD_ADDR_VAR 0 3
74657: PUSH
74658: DOUBLE
74659: LD_INT 1
74661: DEC
74662: ST_TO_ADDR
74663: LD_INT 3
74665: PUSH
74666: FOR_TO
74667: IFFALSE 74693
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74669: LD_VAR 0 2
74673: PPUSH
74674: CALL_OW 274
74678: PPUSH
74679: LD_VAR 0 3
74683: PPUSH
74684: LD_INT 99999
74686: PPUSH
74687: CALL_OW 277
74691: GO 74666
74693: POP
74694: POP
74695: GO 74650
74697: POP
74698: POP
// end ;
74699: LD_VAR 0 1
74703: RET
// export function hHackSetLevel10 ; var i , j ; begin
74704: LD_INT 0
74706: PPUSH
74707: PPUSH
74708: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74709: LD_ADDR_VAR 0 2
74713: PUSH
74714: LD_INT 21
74716: PUSH
74717: LD_INT 1
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PPUSH
74724: CALL_OW 69
74728: PUSH
74729: FOR_IN
74730: IFFALSE 74782
// if IsSelected ( i ) then
74732: LD_VAR 0 2
74736: PPUSH
74737: CALL_OW 306
74741: IFFALSE 74780
// begin for j := 1 to 4 do
74743: LD_ADDR_VAR 0 3
74747: PUSH
74748: DOUBLE
74749: LD_INT 1
74751: DEC
74752: ST_TO_ADDR
74753: LD_INT 4
74755: PUSH
74756: FOR_TO
74757: IFFALSE 74778
// SetSkill ( i , j , 10 ) ;
74759: LD_VAR 0 2
74763: PPUSH
74764: LD_VAR 0 3
74768: PPUSH
74769: LD_INT 10
74771: PPUSH
74772: CALL_OW 237
74776: GO 74756
74778: POP
74779: POP
// end ;
74780: GO 74729
74782: POP
74783: POP
// end ;
74784: LD_VAR 0 1
74788: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74789: LD_INT 0
74791: PPUSH
74792: PPUSH
74793: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74794: LD_ADDR_VAR 0 2
74798: PUSH
74799: LD_INT 22
74801: PUSH
74802: LD_OWVAR 2
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: PUSH
74811: LD_INT 21
74813: PUSH
74814: LD_INT 1
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: PPUSH
74825: CALL_OW 69
74829: PUSH
74830: FOR_IN
74831: IFFALSE 74872
// begin for j := 1 to 4 do
74833: LD_ADDR_VAR 0 3
74837: PUSH
74838: DOUBLE
74839: LD_INT 1
74841: DEC
74842: ST_TO_ADDR
74843: LD_INT 4
74845: PUSH
74846: FOR_TO
74847: IFFALSE 74868
// SetSkill ( i , j , 10 ) ;
74849: LD_VAR 0 2
74853: PPUSH
74854: LD_VAR 0 3
74858: PPUSH
74859: LD_INT 10
74861: PPUSH
74862: CALL_OW 237
74866: GO 74846
74868: POP
74869: POP
// end ;
74870: GO 74830
74872: POP
74873: POP
// end ;
74874: LD_VAR 0 1
74878: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74879: LD_INT 0
74881: PPUSH
// uc_side := your_side ;
74882: LD_ADDR_OWVAR 20
74886: PUSH
74887: LD_OWVAR 2
74891: ST_TO_ADDR
// uc_nation := nation ;
74892: LD_ADDR_OWVAR 21
74896: PUSH
74897: LD_VAR 0 1
74901: ST_TO_ADDR
// InitHc ;
74902: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74906: LD_INT 0
74908: PPUSH
74909: LD_VAR 0 2
74913: PPUSH
74914: LD_VAR 0 3
74918: PPUSH
74919: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74923: LD_VAR 0 4
74927: PPUSH
74928: LD_VAR 0 5
74932: PPUSH
74933: CALL_OW 428
74937: PUSH
74938: LD_INT 0
74940: EQUAL
74941: IFFALSE 74965
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74943: CALL_OW 44
74947: PPUSH
74948: LD_VAR 0 4
74952: PPUSH
74953: LD_VAR 0 5
74957: PPUSH
74958: LD_INT 1
74960: PPUSH
74961: CALL_OW 48
// end ;
74965: LD_VAR 0 6
74969: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74970: LD_INT 0
74972: PPUSH
74973: PPUSH
// uc_side := your_side ;
74974: LD_ADDR_OWVAR 20
74978: PUSH
74979: LD_OWVAR 2
74983: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74984: LD_VAR 0 1
74988: PUSH
74989: LD_INT 1
74991: PUSH
74992: LD_INT 2
74994: PUSH
74995: LD_INT 3
74997: PUSH
74998: LD_INT 4
75000: PUSH
75001: LD_INT 5
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: IN
75011: IFFALSE 75023
// uc_nation := nation_american else
75013: LD_ADDR_OWVAR 21
75017: PUSH
75018: LD_INT 1
75020: ST_TO_ADDR
75021: GO 75066
// if chassis in [ 11 , 12 , 13 , 14 ] then
75023: LD_VAR 0 1
75027: PUSH
75028: LD_INT 11
75030: PUSH
75031: LD_INT 12
75033: PUSH
75034: LD_INT 13
75036: PUSH
75037: LD_INT 14
75039: PUSH
75040: EMPTY
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: IN
75046: IFFALSE 75058
// uc_nation := nation_arabian else
75048: LD_ADDR_OWVAR 21
75052: PUSH
75053: LD_INT 2
75055: ST_TO_ADDR
75056: GO 75066
// uc_nation := nation_russian ;
75058: LD_ADDR_OWVAR 21
75062: PUSH
75063: LD_INT 3
75065: ST_TO_ADDR
// vc_chassis := chassis ;
75066: LD_ADDR_OWVAR 37
75070: PUSH
75071: LD_VAR 0 1
75075: ST_TO_ADDR
// vc_engine := engine ;
75076: LD_ADDR_OWVAR 39
75080: PUSH
75081: LD_VAR 0 2
75085: ST_TO_ADDR
// vc_control := control ;
75086: LD_ADDR_OWVAR 38
75090: PUSH
75091: LD_VAR 0 3
75095: ST_TO_ADDR
// vc_weapon := weapon ;
75096: LD_ADDR_OWVAR 40
75100: PUSH
75101: LD_VAR 0 4
75105: ST_TO_ADDR
// un := CreateVehicle ;
75106: LD_ADDR_VAR 0 8
75110: PUSH
75111: CALL_OW 45
75115: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75116: LD_VAR 0 8
75120: PPUSH
75121: LD_INT 0
75123: PPUSH
75124: LD_INT 5
75126: PPUSH
75127: CALL_OW 12
75131: PPUSH
75132: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75136: LD_VAR 0 8
75140: PPUSH
75141: LD_VAR 0 5
75145: PPUSH
75146: LD_VAR 0 6
75150: PPUSH
75151: LD_INT 1
75153: PPUSH
75154: CALL_OW 48
// end ;
75158: LD_VAR 0 7
75162: RET
// export hInvincible ; every 1 do
75163: GO 75165
75165: DISABLE
// hInvincible := [ ] ;
75166: LD_ADDR_EXP 101
75170: PUSH
75171: EMPTY
75172: ST_TO_ADDR
75173: END
// every 10 do var i ;
75174: GO 75176
75176: DISABLE
75177: LD_INT 0
75179: PPUSH
// begin enable ;
75180: ENABLE
// if not hInvincible then
75181: LD_EXP 101
75185: NOT
75186: IFFALSE 75190
// exit ;
75188: GO 75234
// for i in hInvincible do
75190: LD_ADDR_VAR 0 1
75194: PUSH
75195: LD_EXP 101
75199: PUSH
75200: FOR_IN
75201: IFFALSE 75232
// if GetLives ( i ) < 1000 then
75203: LD_VAR 0 1
75207: PPUSH
75208: CALL_OW 256
75212: PUSH
75213: LD_INT 1000
75215: LESS
75216: IFFALSE 75230
// SetLives ( i , 1000 ) ;
75218: LD_VAR 0 1
75222: PPUSH
75223: LD_INT 1000
75225: PPUSH
75226: CALL_OW 234
75230: GO 75200
75232: POP
75233: POP
// end ;
75234: PPOPN 1
75236: END
// export function hHackInvincible ; var i ; begin
75237: LD_INT 0
75239: PPUSH
75240: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75241: LD_ADDR_VAR 0 2
75245: PUSH
75246: LD_INT 2
75248: PUSH
75249: LD_INT 21
75251: PUSH
75252: LD_INT 1
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: PUSH
75259: LD_INT 21
75261: PUSH
75262: LD_INT 2
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: LIST
75273: PPUSH
75274: CALL_OW 69
75278: PUSH
75279: FOR_IN
75280: IFFALSE 75341
// if IsSelected ( i ) then
75282: LD_VAR 0 2
75286: PPUSH
75287: CALL_OW 306
75291: IFFALSE 75339
// begin if i in hInvincible then
75293: LD_VAR 0 2
75297: PUSH
75298: LD_EXP 101
75302: IN
75303: IFFALSE 75323
// hInvincible := hInvincible diff i else
75305: LD_ADDR_EXP 101
75309: PUSH
75310: LD_EXP 101
75314: PUSH
75315: LD_VAR 0 2
75319: DIFF
75320: ST_TO_ADDR
75321: GO 75339
// hInvincible := hInvincible union i ;
75323: LD_ADDR_EXP 101
75327: PUSH
75328: LD_EXP 101
75332: PUSH
75333: LD_VAR 0 2
75337: UNION
75338: ST_TO_ADDR
// end ;
75339: GO 75279
75341: POP
75342: POP
// end ;
75343: LD_VAR 0 1
75347: RET
// export function hHackInvisible ; var i , j ; begin
75348: LD_INT 0
75350: PPUSH
75351: PPUSH
75352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75353: LD_ADDR_VAR 0 2
75357: PUSH
75358: LD_INT 21
75360: PUSH
75361: LD_INT 1
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PPUSH
75368: CALL_OW 69
75372: PUSH
75373: FOR_IN
75374: IFFALSE 75398
// if IsSelected ( i ) then
75376: LD_VAR 0 2
75380: PPUSH
75381: CALL_OW 306
75385: IFFALSE 75396
// ComForceInvisible ( i ) ;
75387: LD_VAR 0 2
75391: PPUSH
75392: CALL_OW 496
75396: GO 75373
75398: POP
75399: POP
// end ;
75400: LD_VAR 0 1
75404: RET
// export function hHackChangeYourSide ; begin
75405: LD_INT 0
75407: PPUSH
// if your_side = 8 then
75408: LD_OWVAR 2
75412: PUSH
75413: LD_INT 8
75415: EQUAL
75416: IFFALSE 75428
// your_side := 0 else
75418: LD_ADDR_OWVAR 2
75422: PUSH
75423: LD_INT 0
75425: ST_TO_ADDR
75426: GO 75442
// your_side := your_side + 1 ;
75428: LD_ADDR_OWVAR 2
75432: PUSH
75433: LD_OWVAR 2
75437: PUSH
75438: LD_INT 1
75440: PLUS
75441: ST_TO_ADDR
// end ;
75442: LD_VAR 0 1
75446: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75447: LD_INT 0
75449: PPUSH
75450: PPUSH
75451: PPUSH
// for i in all_units do
75452: LD_ADDR_VAR 0 2
75456: PUSH
75457: LD_OWVAR 3
75461: PUSH
75462: FOR_IN
75463: IFFALSE 75541
// if IsSelected ( i ) then
75465: LD_VAR 0 2
75469: PPUSH
75470: CALL_OW 306
75474: IFFALSE 75539
// begin j := GetSide ( i ) ;
75476: LD_ADDR_VAR 0 3
75480: PUSH
75481: LD_VAR 0 2
75485: PPUSH
75486: CALL_OW 255
75490: ST_TO_ADDR
// if j = 8 then
75491: LD_VAR 0 3
75495: PUSH
75496: LD_INT 8
75498: EQUAL
75499: IFFALSE 75511
// j := 0 else
75501: LD_ADDR_VAR 0 3
75505: PUSH
75506: LD_INT 0
75508: ST_TO_ADDR
75509: GO 75525
// j := j + 1 ;
75511: LD_ADDR_VAR 0 3
75515: PUSH
75516: LD_VAR 0 3
75520: PUSH
75521: LD_INT 1
75523: PLUS
75524: ST_TO_ADDR
// SetSide ( i , j ) ;
75525: LD_VAR 0 2
75529: PPUSH
75530: LD_VAR 0 3
75534: PPUSH
75535: CALL_OW 235
// end ;
75539: GO 75462
75541: POP
75542: POP
// end ;
75543: LD_VAR 0 1
75547: RET
// export function hHackFog ; begin
75548: LD_INT 0
75550: PPUSH
// FogOff ( true ) ;
75551: LD_INT 1
75553: PPUSH
75554: CALL_OW 344
// end ;
75558: LD_VAR 0 1
75562: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75563: LD_INT 0
75565: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75566: LD_VAR 0 1
75570: PPUSH
75571: LD_VAR 0 2
75575: PPUSH
75576: LD_VAR 0 3
75580: PPUSH
75581: LD_INT 1
75583: PPUSH
75584: LD_INT 1
75586: PPUSH
75587: CALL_OW 483
// CenterOnXY ( x , y ) ;
75591: LD_VAR 0 2
75595: PPUSH
75596: LD_VAR 0 3
75600: PPUSH
75601: CALL_OW 84
// end ;
75605: LD_VAR 0 4
75609: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75610: LD_INT 0
75612: PPUSH
75613: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75614: LD_VAR 0 1
75618: NOT
75619: PUSH
75620: LD_VAR 0 2
75624: PPUSH
75625: LD_VAR 0 3
75629: PPUSH
75630: CALL_OW 488
75634: NOT
75635: OR
75636: PUSH
75637: LD_VAR 0 1
75641: PPUSH
75642: CALL_OW 266
75646: PUSH
75647: LD_INT 3
75649: NONEQUAL
75650: PUSH
75651: LD_VAR 0 1
75655: PPUSH
75656: CALL_OW 247
75660: PUSH
75661: LD_INT 1
75663: EQUAL
75664: NOT
75665: AND
75666: OR
75667: IFFALSE 75671
// exit ;
75669: GO 75820
// if GetType ( factory ) = unit_human then
75671: LD_VAR 0 1
75675: PPUSH
75676: CALL_OW 247
75680: PUSH
75681: LD_INT 1
75683: EQUAL
75684: IFFALSE 75701
// factory := IsInUnit ( factory ) ;
75686: LD_ADDR_VAR 0 1
75690: PUSH
75691: LD_VAR 0 1
75695: PPUSH
75696: CALL_OW 310
75700: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75701: LD_VAR 0 1
75705: PPUSH
75706: CALL_OW 266
75710: PUSH
75711: LD_INT 3
75713: NONEQUAL
75714: IFFALSE 75718
// exit ;
75716: GO 75820
// if HexInfo ( x , y ) = factory then
75718: LD_VAR 0 2
75722: PPUSH
75723: LD_VAR 0 3
75727: PPUSH
75728: CALL_OW 428
75732: PUSH
75733: LD_VAR 0 1
75737: EQUAL
75738: IFFALSE 75765
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75740: LD_ADDR_EXP 102
75744: PUSH
75745: LD_EXP 102
75749: PPUSH
75750: LD_VAR 0 1
75754: PPUSH
75755: LD_INT 0
75757: PPUSH
75758: CALL_OW 1
75762: ST_TO_ADDR
75763: GO 75816
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75765: LD_ADDR_EXP 102
75769: PUSH
75770: LD_EXP 102
75774: PPUSH
75775: LD_VAR 0 1
75779: PPUSH
75780: LD_VAR 0 1
75784: PPUSH
75785: CALL_OW 255
75789: PUSH
75790: LD_VAR 0 1
75794: PUSH
75795: LD_VAR 0 2
75799: PUSH
75800: LD_VAR 0 3
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: PPUSH
75811: CALL_OW 1
75815: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75816: CALL 75825 0 0
// end ;
75820: LD_VAR 0 4
75824: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75825: LD_INT 0
75827: PPUSH
75828: PPUSH
75829: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75830: LD_STRING resetFactoryWaypoint();
75832: PPUSH
75833: CALL_OW 559
// if factoryWaypoints then
75837: LD_EXP 102
75841: IFFALSE 75967
// begin list := PrepareArray ( factoryWaypoints ) ;
75843: LD_ADDR_VAR 0 3
75847: PUSH
75848: LD_EXP 102
75852: PPUSH
75853: CALL 60596 0 1
75857: ST_TO_ADDR
// for i := 1 to list do
75858: LD_ADDR_VAR 0 2
75862: PUSH
75863: DOUBLE
75864: LD_INT 1
75866: DEC
75867: ST_TO_ADDR
75868: LD_VAR 0 3
75872: PUSH
75873: FOR_TO
75874: IFFALSE 75965
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75876: LD_STRING setFactoryWaypointXY(
75878: PUSH
75879: LD_VAR 0 3
75883: PUSH
75884: LD_VAR 0 2
75888: ARRAY
75889: PUSH
75890: LD_INT 1
75892: ARRAY
75893: STR
75894: PUSH
75895: LD_STRING ,
75897: STR
75898: PUSH
75899: LD_VAR 0 3
75903: PUSH
75904: LD_VAR 0 2
75908: ARRAY
75909: PUSH
75910: LD_INT 2
75912: ARRAY
75913: STR
75914: PUSH
75915: LD_STRING ,
75917: STR
75918: PUSH
75919: LD_VAR 0 3
75923: PUSH
75924: LD_VAR 0 2
75928: ARRAY
75929: PUSH
75930: LD_INT 3
75932: ARRAY
75933: STR
75934: PUSH
75935: LD_STRING ,
75937: STR
75938: PUSH
75939: LD_VAR 0 3
75943: PUSH
75944: LD_VAR 0 2
75948: ARRAY
75949: PUSH
75950: LD_INT 4
75952: ARRAY
75953: STR
75954: PUSH
75955: LD_STRING )
75957: STR
75958: PPUSH
75959: CALL_OW 559
75963: GO 75873
75965: POP
75966: POP
// end ; end ;
75967: LD_VAR 0 1
75971: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
75972: LD_INT 0
75974: PPUSH
// if HexInfo ( x , y ) = warehouse then
75975: LD_VAR 0 2
75979: PPUSH
75980: LD_VAR 0 3
75984: PPUSH
75985: CALL_OW 428
75989: PUSH
75990: LD_VAR 0 1
75994: EQUAL
75995: IFFALSE 76022
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
75997: LD_ADDR_EXP 103
76001: PUSH
76002: LD_EXP 103
76006: PPUSH
76007: LD_VAR 0 1
76011: PPUSH
76012: LD_INT 0
76014: PPUSH
76015: CALL_OW 1
76019: ST_TO_ADDR
76020: GO 76073
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76022: LD_ADDR_EXP 103
76026: PUSH
76027: LD_EXP 103
76031: PPUSH
76032: LD_VAR 0 1
76036: PPUSH
76037: LD_VAR 0 1
76041: PPUSH
76042: CALL_OW 255
76046: PUSH
76047: LD_VAR 0 1
76051: PUSH
76052: LD_VAR 0 2
76056: PUSH
76057: LD_VAR 0 3
76061: PUSH
76062: EMPTY
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: PPUSH
76068: CALL_OW 1
76072: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76073: CALL 76082 0 0
// end ;
76077: LD_VAR 0 4
76081: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76082: LD_INT 0
76084: PPUSH
76085: PPUSH
76086: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76087: LD_STRING resetWarehouseGatheringPoints();
76089: PPUSH
76090: CALL_OW 559
// if warehouseGatheringPoints then
76094: LD_EXP 103
76098: IFFALSE 76224
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76100: LD_ADDR_VAR 0 3
76104: PUSH
76105: LD_EXP 103
76109: PPUSH
76110: CALL 60596 0 1
76114: ST_TO_ADDR
// for i := 1 to list do
76115: LD_ADDR_VAR 0 2
76119: PUSH
76120: DOUBLE
76121: LD_INT 1
76123: DEC
76124: ST_TO_ADDR
76125: LD_VAR 0 3
76129: PUSH
76130: FOR_TO
76131: IFFALSE 76222
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76133: LD_STRING setWarehouseGatheringPointXY(
76135: PUSH
76136: LD_VAR 0 3
76140: PUSH
76141: LD_VAR 0 2
76145: ARRAY
76146: PUSH
76147: LD_INT 1
76149: ARRAY
76150: STR
76151: PUSH
76152: LD_STRING ,
76154: STR
76155: PUSH
76156: LD_VAR 0 3
76160: PUSH
76161: LD_VAR 0 2
76165: ARRAY
76166: PUSH
76167: LD_INT 2
76169: ARRAY
76170: STR
76171: PUSH
76172: LD_STRING ,
76174: STR
76175: PUSH
76176: LD_VAR 0 3
76180: PUSH
76181: LD_VAR 0 2
76185: ARRAY
76186: PUSH
76187: LD_INT 3
76189: ARRAY
76190: STR
76191: PUSH
76192: LD_STRING ,
76194: STR
76195: PUSH
76196: LD_VAR 0 3
76200: PUSH
76201: LD_VAR 0 2
76205: ARRAY
76206: PUSH
76207: LD_INT 4
76209: ARRAY
76210: STR
76211: PUSH
76212: LD_STRING )
76214: STR
76215: PPUSH
76216: CALL_OW 559
76220: GO 76130
76222: POP
76223: POP
// end ; end ;
76224: LD_VAR 0 1
76228: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76229: LD_EXP 103
76233: IFFALSE 76918
76235: GO 76237
76237: DISABLE
76238: LD_INT 0
76240: PPUSH
76241: PPUSH
76242: PPUSH
76243: PPUSH
76244: PPUSH
76245: PPUSH
76246: PPUSH
76247: PPUSH
76248: PPUSH
// begin enable ;
76249: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76250: LD_ADDR_VAR 0 3
76254: PUSH
76255: LD_EXP 103
76259: PPUSH
76260: CALL 60596 0 1
76264: ST_TO_ADDR
// if not list then
76265: LD_VAR 0 3
76269: NOT
76270: IFFALSE 76274
// exit ;
76272: GO 76918
// for i := 1 to list do
76274: LD_ADDR_VAR 0 1
76278: PUSH
76279: DOUBLE
76280: LD_INT 1
76282: DEC
76283: ST_TO_ADDR
76284: LD_VAR 0 3
76288: PUSH
76289: FOR_TO
76290: IFFALSE 76916
// begin depot := list [ i ] [ 2 ] ;
76292: LD_ADDR_VAR 0 8
76296: PUSH
76297: LD_VAR 0 3
76301: PUSH
76302: LD_VAR 0 1
76306: ARRAY
76307: PUSH
76308: LD_INT 2
76310: ARRAY
76311: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76312: LD_ADDR_VAR 0 5
76316: PUSH
76317: LD_VAR 0 3
76321: PUSH
76322: LD_VAR 0 1
76326: ARRAY
76327: PUSH
76328: LD_INT 1
76330: ARRAY
76331: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76332: LD_VAR 0 8
76336: PPUSH
76337: CALL_OW 301
76341: PUSH
76342: LD_VAR 0 5
76346: PUSH
76347: LD_VAR 0 8
76351: PPUSH
76352: CALL_OW 255
76356: NONEQUAL
76357: OR
76358: IFFALSE 76387
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76360: LD_ADDR_EXP 103
76364: PUSH
76365: LD_EXP 103
76369: PPUSH
76370: LD_VAR 0 8
76374: PPUSH
76375: LD_INT 0
76377: PPUSH
76378: CALL_OW 1
76382: ST_TO_ADDR
// exit ;
76383: POP
76384: POP
76385: GO 76918
// end ; x := list [ i ] [ 3 ] ;
76387: LD_ADDR_VAR 0 6
76391: PUSH
76392: LD_VAR 0 3
76396: PUSH
76397: LD_VAR 0 1
76401: ARRAY
76402: PUSH
76403: LD_INT 3
76405: ARRAY
76406: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76407: LD_ADDR_VAR 0 7
76411: PUSH
76412: LD_VAR 0 3
76416: PUSH
76417: LD_VAR 0 1
76421: ARRAY
76422: PUSH
76423: LD_INT 4
76425: ARRAY
76426: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76427: LD_ADDR_VAR 0 9
76431: PUSH
76432: LD_VAR 0 6
76436: PPUSH
76437: LD_VAR 0 7
76441: PPUSH
76442: LD_INT 16
76444: PPUSH
76445: CALL 59184 0 3
76449: ST_TO_ADDR
// if not cratesNearbyPoint then
76450: LD_VAR 0 9
76454: NOT
76455: IFFALSE 76461
// exit ;
76457: POP
76458: POP
76459: GO 76918
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76461: LD_ADDR_VAR 0 4
76465: PUSH
76466: LD_INT 22
76468: PUSH
76469: LD_VAR 0 5
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: LD_INT 3
76480: PUSH
76481: LD_INT 60
76483: PUSH
76484: EMPTY
76485: LIST
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: PUSH
76491: LD_INT 91
76493: PUSH
76494: LD_VAR 0 8
76498: PUSH
76499: LD_INT 6
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: LIST
76506: PUSH
76507: LD_INT 2
76509: PUSH
76510: LD_INT 25
76512: PUSH
76513: LD_INT 2
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 25
76522: PUSH
76523: LD_INT 16
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: LIST
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: PPUSH
76541: CALL_OW 69
76545: PUSH
76546: LD_VAR 0 8
76550: PPUSH
76551: CALL_OW 313
76555: PPUSH
76556: LD_INT 3
76558: PUSH
76559: LD_INT 60
76561: PUSH
76562: EMPTY
76563: LIST
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PUSH
76569: LD_INT 2
76571: PUSH
76572: LD_INT 25
76574: PUSH
76575: LD_INT 2
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 25
76584: PUSH
76585: LD_INT 16
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: LIST
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PPUSH
76601: CALL_OW 72
76605: UNION
76606: ST_TO_ADDR
// if tmp then
76607: LD_VAR 0 4
76611: IFFALSE 76691
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76613: LD_ADDR_VAR 0 4
76617: PUSH
76618: LD_VAR 0 4
76622: PPUSH
76623: LD_INT 3
76625: PPUSH
76626: CALL 57153 0 2
76630: ST_TO_ADDR
// for j in tmp do
76631: LD_ADDR_VAR 0 2
76635: PUSH
76636: LD_VAR 0 4
76640: PUSH
76641: FOR_IN
76642: IFFALSE 76685
// begin if IsInUnit ( j ) then
76644: LD_VAR 0 2
76648: PPUSH
76649: CALL_OW 310
76653: IFFALSE 76664
// ComExit ( j ) ;
76655: LD_VAR 0 2
76659: PPUSH
76660: CALL 57236 0 1
// AddComCollect ( j , x , y ) ;
76664: LD_VAR 0 2
76668: PPUSH
76669: LD_VAR 0 6
76673: PPUSH
76674: LD_VAR 0 7
76678: PPUSH
76679: CALL_OW 177
// end ;
76683: GO 76641
76685: POP
76686: POP
// exit ;
76687: POP
76688: POP
76689: GO 76918
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76691: LD_ADDR_VAR 0 4
76695: PUSH
76696: LD_INT 22
76698: PUSH
76699: LD_VAR 0 5
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: LD_INT 91
76710: PUSH
76711: LD_VAR 0 8
76715: PUSH
76716: LD_INT 8
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: LIST
76723: PUSH
76724: LD_INT 2
76726: PUSH
76727: LD_INT 34
76729: PUSH
76730: LD_INT 12
76732: PUSH
76733: EMPTY
76734: LIST
76735: LIST
76736: PUSH
76737: LD_INT 34
76739: PUSH
76740: LD_INT 51
76742: PUSH
76743: EMPTY
76744: LIST
76745: LIST
76746: PUSH
76747: LD_INT 34
76749: PUSH
76750: LD_INT 32
76752: PUSH
76753: EMPTY
76754: LIST
76755: LIST
76756: PUSH
76757: LD_INT 34
76759: PUSH
76760: LD_INT 89
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: LIST
76778: PPUSH
76779: CALL_OW 69
76783: ST_TO_ADDR
// if tmp then
76784: LD_VAR 0 4
76788: IFFALSE 76914
// begin for j in tmp do
76790: LD_ADDR_VAR 0 2
76794: PUSH
76795: LD_VAR 0 4
76799: PUSH
76800: FOR_IN
76801: IFFALSE 76912
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76803: LD_VAR 0 2
76807: PPUSH
76808: CALL_OW 262
76812: PUSH
76813: LD_INT 3
76815: EQUAL
76816: PUSH
76817: LD_VAR 0 2
76821: PPUSH
76822: CALL_OW 261
76826: PUSH
76827: LD_INT 20
76829: GREATER
76830: OR
76831: PUSH
76832: LD_VAR 0 2
76836: PPUSH
76837: CALL_OW 314
76841: NOT
76842: AND
76843: PUSH
76844: LD_VAR 0 2
76848: PPUSH
76849: CALL_OW 263
76853: PUSH
76854: LD_INT 1
76856: NONEQUAL
76857: PUSH
76858: LD_VAR 0 2
76862: PPUSH
76863: CALL_OW 311
76867: OR
76868: AND
76869: IFFALSE 76910
// begin ComCollect ( j , x , y ) ;
76871: LD_VAR 0 2
76875: PPUSH
76876: LD_VAR 0 6
76880: PPUSH
76881: LD_VAR 0 7
76885: PPUSH
76886: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76890: LD_VAR 0 2
76894: PPUSH
76895: LD_VAR 0 8
76899: PPUSH
76900: CALL_OW 172
// exit ;
76904: POP
76905: POP
76906: POP
76907: POP
76908: GO 76918
// end ;
76910: GO 76800
76912: POP
76913: POP
// end ; end ;
76914: GO 76289
76916: POP
76917: POP
// end ; end_of_file
76918: PPOPN 9
76920: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76921: LD_VAR 0 1
76925: PUSH
76926: LD_INT 200
76928: DOUBLE
76929: GREATEREQUAL
76930: IFFALSE 76938
76932: LD_INT 299
76934: DOUBLE
76935: LESSEQUAL
76936: IFTRUE 76940
76938: GO 76972
76940: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76941: LD_VAR 0 1
76945: PPUSH
76946: LD_VAR 0 2
76950: PPUSH
76951: LD_VAR 0 3
76955: PPUSH
76956: LD_VAR 0 4
76960: PPUSH
76961: LD_VAR 0 5
76965: PPUSH
76966: CALL 77460 0 5
76970: GO 77049
76972: LD_INT 300
76974: DOUBLE
76975: GREATEREQUAL
76976: IFFALSE 76984
76978: LD_INT 399
76980: DOUBLE
76981: LESSEQUAL
76982: IFTRUE 76986
76984: GO 77048
76986: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76987: LD_VAR 0 1
76991: PPUSH
76992: LD_VAR 0 2
76996: PPUSH
76997: LD_VAR 0 3
77001: PPUSH
77002: LD_VAR 0 4
77006: PPUSH
77007: LD_VAR 0 5
77011: PPUSH
77012: LD_VAR 0 6
77016: PPUSH
77017: LD_VAR 0 7
77021: PPUSH
77022: LD_VAR 0 8
77026: PPUSH
77027: LD_VAR 0 9
77031: PPUSH
77032: LD_VAR 0 10
77036: PPUSH
77037: LD_VAR 0 11
77041: PPUSH
77042: CALL 73622 0 11
77046: GO 77049
77048: POP
// end ;
77049: PPOPN 11
77051: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77052: LD_VAR 0 1
77056: PPUSH
77057: LD_VAR 0 2
77061: PPUSH
77062: LD_VAR 0 3
77066: PPUSH
77067: LD_VAR 0 4
77071: PPUSH
77072: LD_VAR 0 5
77076: PPUSH
77077: CALL 77196 0 5
// end ; end_of_file
77081: PPOPN 5
77083: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
77084: LD_INT 0
77086: PPUSH
77087: PPUSH
77088: PPUSH
77089: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
77090: LD_VAR 0 1
77094: PPUSH
77095: CALL_OW 264
77099: PUSH
77100: LD_INT 91
77102: EQUAL
77103: IFFALSE 77175
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77105: LD_INT 68
77107: PPUSH
77108: LD_VAR 0 1
77112: PPUSH
77113: CALL_OW 255
77117: PPUSH
77118: CALL_OW 321
77122: PUSH
77123: LD_INT 2
77125: EQUAL
77126: IFFALSE 77138
// eff := 70 else
77128: LD_ADDR_VAR 0 4
77132: PUSH
77133: LD_INT 70
77135: ST_TO_ADDR
77136: GO 77146
// eff := 30 ;
77138: LD_ADDR_VAR 0 4
77142: PUSH
77143: LD_INT 30
77145: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77146: LD_VAR 0 1
77150: PPUSH
77151: CALL_OW 250
77155: PPUSH
77156: LD_VAR 0 1
77160: PPUSH
77161: CALL_OW 251
77165: PPUSH
77166: LD_VAR 0 4
77170: PPUSH
77171: CALL_OW 495
// end ; end ;
77175: LD_VAR 0 2
77179: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77180: LD_INT 0
77182: PPUSH
// end ;
77183: LD_VAR 0 4
77187: RET
// export function SOS_Command ( cmd ) ; begin
77188: LD_INT 0
77190: PPUSH
// end ;
77191: LD_VAR 0 2
77195: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77196: LD_INT 0
77198: PPUSH
// end ;
77199: LD_VAR 0 6
77203: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
77204: LD_INT 0
77206: PPUSH
77207: PPUSH
// if not vehicle or not factory then
77208: LD_VAR 0 1
77212: NOT
77213: PUSH
77214: LD_VAR 0 2
77218: NOT
77219: OR
77220: IFFALSE 77224
// exit ;
77222: GO 77455
// if factoryWaypoints >= factory then
77224: LD_EXP 102
77228: PUSH
77229: LD_VAR 0 2
77233: GREATEREQUAL
77234: IFFALSE 77455
// if factoryWaypoints [ factory ] then
77236: LD_EXP 102
77240: PUSH
77241: LD_VAR 0 2
77245: ARRAY
77246: IFFALSE 77455
// begin if GetControl ( vehicle ) = control_manual then
77248: LD_VAR 0 1
77252: PPUSH
77253: CALL_OW 263
77257: PUSH
77258: LD_INT 1
77260: EQUAL
77261: IFFALSE 77342
// begin driver := IsDrivenBy ( vehicle ) ;
77263: LD_ADDR_VAR 0 4
77267: PUSH
77268: LD_VAR 0 1
77272: PPUSH
77273: CALL_OW 311
77277: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77278: LD_VAR 0 4
77282: PPUSH
77283: LD_EXP 102
77287: PUSH
77288: LD_VAR 0 2
77292: ARRAY
77293: PUSH
77294: LD_INT 3
77296: ARRAY
77297: PPUSH
77298: LD_EXP 102
77302: PUSH
77303: LD_VAR 0 2
77307: ARRAY
77308: PUSH
77309: LD_INT 4
77311: ARRAY
77312: PPUSH
77313: CALL_OW 171
// AddComExitVehicle ( driver ) ;
77317: LD_VAR 0 4
77321: PPUSH
77322: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
77326: LD_VAR 0 4
77330: PPUSH
77331: LD_VAR 0 2
77335: PPUSH
77336: CALL_OW 180
// end else
77340: GO 77455
// if GetControl ( vehicle ) = control_remote then
77342: LD_VAR 0 1
77346: PPUSH
77347: CALL_OW 263
77351: PUSH
77352: LD_INT 2
77354: EQUAL
77355: IFFALSE 77416
// begin wait ( 0 0$2 ) ;
77357: LD_INT 70
77359: PPUSH
77360: CALL_OW 67
// if Connect ( vehicle ) then
77364: LD_VAR 0 1
77368: PPUSH
77369: CALL 27457 0 1
77373: IFFALSE 77414
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77375: LD_VAR 0 1
77379: PPUSH
77380: LD_EXP 102
77384: PUSH
77385: LD_VAR 0 2
77389: ARRAY
77390: PUSH
77391: LD_INT 3
77393: ARRAY
77394: PPUSH
77395: LD_EXP 102
77399: PUSH
77400: LD_VAR 0 2
77404: ARRAY
77405: PUSH
77406: LD_INT 4
77408: ARRAY
77409: PPUSH
77410: CALL_OW 171
// end else
77414: GO 77455
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77416: LD_VAR 0 1
77420: PPUSH
77421: LD_EXP 102
77425: PUSH
77426: LD_VAR 0 2
77430: ARRAY
77431: PUSH
77432: LD_INT 3
77434: ARRAY
77435: PPUSH
77436: LD_EXP 102
77440: PUSH
77441: LD_VAR 0 2
77445: ARRAY
77446: PUSH
77447: LD_INT 4
77449: ARRAY
77450: PPUSH
77451: CALL_OW 171
// end ; end ;
77455: LD_VAR 0 3
77459: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77460: LD_INT 0
77462: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77463: LD_VAR 0 1
77467: PUSH
77468: LD_INT 250
77470: EQUAL
77471: PUSH
77472: LD_VAR 0 2
77476: PPUSH
77477: CALL_OW 264
77481: PUSH
77482: LD_INT 81
77484: EQUAL
77485: AND
77486: IFFALSE 77507
// MinerPlaceMine ( unit , x , y ) ;
77488: LD_VAR 0 2
77492: PPUSH
77493: LD_VAR 0 4
77497: PPUSH
77498: LD_VAR 0 5
77502: PPUSH
77503: CALL 80331 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77507: LD_VAR 0 1
77511: PUSH
77512: LD_INT 251
77514: EQUAL
77515: PUSH
77516: LD_VAR 0 2
77520: PPUSH
77521: CALL_OW 264
77525: PUSH
77526: LD_INT 81
77528: EQUAL
77529: AND
77530: IFFALSE 77551
// MinerDetonateMine ( unit , x , y ) ;
77532: LD_VAR 0 2
77536: PPUSH
77537: LD_VAR 0 4
77541: PPUSH
77542: LD_VAR 0 5
77546: PPUSH
77547: CALL 80606 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77551: LD_VAR 0 1
77555: PUSH
77556: LD_INT 252
77558: EQUAL
77559: PUSH
77560: LD_VAR 0 2
77564: PPUSH
77565: CALL_OW 264
77569: PUSH
77570: LD_INT 81
77572: EQUAL
77573: AND
77574: IFFALSE 77595
// MinerCreateMinefield ( unit , x , y ) ;
77576: LD_VAR 0 2
77580: PPUSH
77581: LD_VAR 0 4
77585: PPUSH
77586: LD_VAR 0 5
77590: PPUSH
77591: CALL 81023 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77595: LD_VAR 0 1
77599: PUSH
77600: LD_INT 253
77602: EQUAL
77603: PUSH
77604: LD_VAR 0 2
77608: PPUSH
77609: CALL_OW 257
77613: PUSH
77614: LD_INT 5
77616: EQUAL
77617: AND
77618: IFFALSE 77639
// ComBinocular ( unit , x , y ) ;
77620: LD_VAR 0 2
77624: PPUSH
77625: LD_VAR 0 4
77629: PPUSH
77630: LD_VAR 0 5
77634: PPUSH
77635: CALL 81392 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77639: LD_VAR 0 1
77643: PUSH
77644: LD_INT 254
77646: EQUAL
77647: PUSH
77648: LD_VAR 0 2
77652: PPUSH
77653: CALL_OW 264
77657: PUSH
77658: LD_INT 99
77660: EQUAL
77661: AND
77662: PUSH
77663: LD_VAR 0 3
77667: PPUSH
77668: CALL_OW 263
77672: PUSH
77673: LD_INT 3
77675: EQUAL
77676: AND
77677: IFFALSE 77693
// HackDestroyVehicle ( unit , selectedUnit ) ;
77679: LD_VAR 0 2
77683: PPUSH
77684: LD_VAR 0 3
77688: PPUSH
77689: CALL 79695 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77693: LD_VAR 0 1
77697: PUSH
77698: LD_INT 255
77700: EQUAL
77701: PUSH
77702: LD_VAR 0 2
77706: PPUSH
77707: CALL_OW 264
77711: PUSH
77712: LD_INT 14
77714: PUSH
77715: LD_INT 53
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: IN
77722: AND
77723: PUSH
77724: LD_VAR 0 4
77728: PPUSH
77729: LD_VAR 0 5
77733: PPUSH
77734: CALL_OW 488
77738: AND
77739: IFFALSE 77763
// CutTreeXYR ( unit , x , y , 12 ) ;
77741: LD_VAR 0 2
77745: PPUSH
77746: LD_VAR 0 4
77750: PPUSH
77751: LD_VAR 0 5
77755: PPUSH
77756: LD_INT 12
77758: PPUSH
77759: CALL 77858 0 4
// if cmd = 256 then
77763: LD_VAR 0 1
77767: PUSH
77768: LD_INT 256
77770: EQUAL
77771: IFFALSE 77792
// SetFactoryWaypoint ( unit , x , y ) ;
77773: LD_VAR 0 2
77777: PPUSH
77778: LD_VAR 0 4
77782: PPUSH
77783: LD_VAR 0 5
77787: PPUSH
77788: CALL 75610 0 3
// if cmd = 257 then
77792: LD_VAR 0 1
77796: PUSH
77797: LD_INT 257
77799: EQUAL
77800: IFFALSE 77821
// SetWarehouseGatheringPoint ( unit , x , y ) ;
77802: LD_VAR 0 2
77806: PPUSH
77807: LD_VAR 0 4
77811: PPUSH
77812: LD_VAR 0 5
77816: PPUSH
77817: CALL 75972 0 3
// if cmd = 258 then
77821: LD_VAR 0 1
77825: PUSH
77826: LD_INT 258
77828: EQUAL
77829: IFFALSE 77853
// BurnTreeXYR ( unit , x , y , 8 ) ;
77831: LD_VAR 0 2
77835: PPUSH
77836: LD_VAR 0 4
77840: PPUSH
77841: LD_VAR 0 5
77845: PPUSH
77846: LD_INT 8
77848: PPUSH
77849: CALL 78252 0 4
// end ;
77853: LD_VAR 0 6
77857: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77858: LD_INT 0
77860: PPUSH
77861: PPUSH
77862: PPUSH
77863: PPUSH
77864: PPUSH
77865: PPUSH
77866: PPUSH
77867: PPUSH
77868: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
77869: LD_VAR 0 1
77873: PPUSH
77874: CALL_OW 302
77878: NOT
77879: PUSH
77880: LD_VAR 0 2
77884: PPUSH
77885: LD_VAR 0 3
77889: PPUSH
77890: CALL_OW 488
77894: NOT
77895: OR
77896: PUSH
77897: LD_VAR 0 4
77901: NOT
77902: OR
77903: IFFALSE 77907
// exit ;
77905: GO 78247
// list := [ ] ;
77907: LD_ADDR_VAR 0 13
77911: PUSH
77912: EMPTY
77913: ST_TO_ADDR
// if x - r < 0 then
77914: LD_VAR 0 2
77918: PUSH
77919: LD_VAR 0 4
77923: MINUS
77924: PUSH
77925: LD_INT 0
77927: LESS
77928: IFFALSE 77940
// min_x := 0 else
77930: LD_ADDR_VAR 0 7
77934: PUSH
77935: LD_INT 0
77937: ST_TO_ADDR
77938: GO 77956
// min_x := x - r ;
77940: LD_ADDR_VAR 0 7
77944: PUSH
77945: LD_VAR 0 2
77949: PUSH
77950: LD_VAR 0 4
77954: MINUS
77955: ST_TO_ADDR
// if y - r < 0 then
77956: LD_VAR 0 3
77960: PUSH
77961: LD_VAR 0 4
77965: MINUS
77966: PUSH
77967: LD_INT 0
77969: LESS
77970: IFFALSE 77982
// min_y := 0 else
77972: LD_ADDR_VAR 0 8
77976: PUSH
77977: LD_INT 0
77979: ST_TO_ADDR
77980: GO 77998
// min_y := y - r ;
77982: LD_ADDR_VAR 0 8
77986: PUSH
77987: LD_VAR 0 3
77991: PUSH
77992: LD_VAR 0 4
77996: MINUS
77997: ST_TO_ADDR
// max_x := x + r ;
77998: LD_ADDR_VAR 0 9
78002: PUSH
78003: LD_VAR 0 2
78007: PUSH
78008: LD_VAR 0 4
78012: PLUS
78013: ST_TO_ADDR
// max_y := y + r ;
78014: LD_ADDR_VAR 0 10
78018: PUSH
78019: LD_VAR 0 3
78023: PUSH
78024: LD_VAR 0 4
78028: PLUS
78029: ST_TO_ADDR
// for _x = min_x to max_x do
78030: LD_ADDR_VAR 0 11
78034: PUSH
78035: DOUBLE
78036: LD_VAR 0 7
78040: DEC
78041: ST_TO_ADDR
78042: LD_VAR 0 9
78046: PUSH
78047: FOR_TO
78048: IFFALSE 78165
// for _y = min_y to max_y do
78050: LD_ADDR_VAR 0 12
78054: PUSH
78055: DOUBLE
78056: LD_VAR 0 8
78060: DEC
78061: ST_TO_ADDR
78062: LD_VAR 0 10
78066: PUSH
78067: FOR_TO
78068: IFFALSE 78161
// begin if not ValidHex ( _x , _y ) then
78070: LD_VAR 0 11
78074: PPUSH
78075: LD_VAR 0 12
78079: PPUSH
78080: CALL_OW 488
78084: NOT
78085: IFFALSE 78089
// continue ;
78087: GO 78067
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78089: LD_VAR 0 11
78093: PPUSH
78094: LD_VAR 0 12
78098: PPUSH
78099: CALL_OW 351
78103: PUSH
78104: LD_VAR 0 11
78108: PPUSH
78109: LD_VAR 0 12
78113: PPUSH
78114: CALL_OW 554
78118: AND
78119: IFFALSE 78159
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78121: LD_ADDR_VAR 0 13
78125: PUSH
78126: LD_VAR 0 13
78130: PPUSH
78131: LD_VAR 0 13
78135: PUSH
78136: LD_INT 1
78138: PLUS
78139: PPUSH
78140: LD_VAR 0 11
78144: PUSH
78145: LD_VAR 0 12
78149: PUSH
78150: EMPTY
78151: LIST
78152: LIST
78153: PPUSH
78154: CALL_OW 2
78158: ST_TO_ADDR
// end ;
78159: GO 78067
78161: POP
78162: POP
78163: GO 78047
78165: POP
78166: POP
// if not list then
78167: LD_VAR 0 13
78171: NOT
78172: IFFALSE 78176
// exit ;
78174: GO 78247
// for i in list do
78176: LD_ADDR_VAR 0 6
78180: PUSH
78181: LD_VAR 0 13
78185: PUSH
78186: FOR_IN
78187: IFFALSE 78245
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
78189: LD_VAR 0 1
78193: PPUSH
78194: LD_STRING M
78196: PUSH
78197: LD_VAR 0 6
78201: PUSH
78202: LD_INT 1
78204: ARRAY
78205: PUSH
78206: LD_VAR 0 6
78210: PUSH
78211: LD_INT 2
78213: ARRAY
78214: PUSH
78215: LD_INT 0
78217: PUSH
78218: LD_INT 0
78220: PUSH
78221: LD_INT 0
78223: PUSH
78224: LD_INT 0
78226: PUSH
78227: EMPTY
78228: LIST
78229: LIST
78230: LIST
78231: LIST
78232: LIST
78233: LIST
78234: LIST
78235: PUSH
78236: EMPTY
78237: LIST
78238: PPUSH
78239: CALL_OW 447
78243: GO 78186
78245: POP
78246: POP
// end ;
78247: LD_VAR 0 5
78251: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78252: LD_INT 0
78254: PPUSH
78255: PPUSH
78256: PPUSH
78257: PPUSH
78258: PPUSH
78259: PPUSH
78260: PPUSH
78261: PPUSH
78262: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
78263: LD_VAR 0 1
78267: PPUSH
78268: CALL_OW 302
78272: NOT
78273: PUSH
78274: LD_VAR 0 2
78278: PPUSH
78279: LD_VAR 0 3
78283: PPUSH
78284: CALL_OW 488
78288: NOT
78289: OR
78290: PUSH
78291: LD_VAR 0 4
78295: NOT
78296: OR
78297: IFFALSE 78301
// exit ;
78299: GO 78649
// list := [ ] ;
78301: LD_ADDR_VAR 0 13
78305: PUSH
78306: EMPTY
78307: ST_TO_ADDR
// if x - r < 0 then
78308: LD_VAR 0 2
78312: PUSH
78313: LD_VAR 0 4
78317: MINUS
78318: PUSH
78319: LD_INT 0
78321: LESS
78322: IFFALSE 78334
// min_x := 0 else
78324: LD_ADDR_VAR 0 7
78328: PUSH
78329: LD_INT 0
78331: ST_TO_ADDR
78332: GO 78350
// min_x := x - r ;
78334: LD_ADDR_VAR 0 7
78338: PUSH
78339: LD_VAR 0 2
78343: PUSH
78344: LD_VAR 0 4
78348: MINUS
78349: ST_TO_ADDR
// if y - r < 0 then
78350: LD_VAR 0 3
78354: PUSH
78355: LD_VAR 0 4
78359: MINUS
78360: PUSH
78361: LD_INT 0
78363: LESS
78364: IFFALSE 78376
// min_y := 0 else
78366: LD_ADDR_VAR 0 8
78370: PUSH
78371: LD_INT 0
78373: ST_TO_ADDR
78374: GO 78392
// min_y := y - r ;
78376: LD_ADDR_VAR 0 8
78380: PUSH
78381: LD_VAR 0 3
78385: PUSH
78386: LD_VAR 0 4
78390: MINUS
78391: ST_TO_ADDR
// max_x := x + r ;
78392: LD_ADDR_VAR 0 9
78396: PUSH
78397: LD_VAR 0 2
78401: PUSH
78402: LD_VAR 0 4
78406: PLUS
78407: ST_TO_ADDR
// max_y := y + r ;
78408: LD_ADDR_VAR 0 10
78412: PUSH
78413: LD_VAR 0 3
78417: PUSH
78418: LD_VAR 0 4
78422: PLUS
78423: ST_TO_ADDR
// for _x = min_x to max_x do
78424: LD_ADDR_VAR 0 11
78428: PUSH
78429: DOUBLE
78430: LD_VAR 0 7
78434: DEC
78435: ST_TO_ADDR
78436: LD_VAR 0 9
78440: PUSH
78441: FOR_TO
78442: IFFALSE 78559
// for _y = min_y to max_y do
78444: LD_ADDR_VAR 0 12
78448: PUSH
78449: DOUBLE
78450: LD_VAR 0 8
78454: DEC
78455: ST_TO_ADDR
78456: LD_VAR 0 10
78460: PUSH
78461: FOR_TO
78462: IFFALSE 78555
// begin if not ValidHex ( _x , _y ) then
78464: LD_VAR 0 11
78468: PPUSH
78469: LD_VAR 0 12
78473: PPUSH
78474: CALL_OW 488
78478: NOT
78479: IFFALSE 78483
// continue ;
78481: GO 78461
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78483: LD_VAR 0 11
78487: PPUSH
78488: LD_VAR 0 12
78492: PPUSH
78493: CALL_OW 351
78497: PUSH
78498: LD_VAR 0 11
78502: PPUSH
78503: LD_VAR 0 12
78507: PPUSH
78508: CALL_OW 554
78512: AND
78513: IFFALSE 78553
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78515: LD_ADDR_VAR 0 13
78519: PUSH
78520: LD_VAR 0 13
78524: PPUSH
78525: LD_VAR 0 13
78529: PUSH
78530: LD_INT 1
78532: PLUS
78533: PPUSH
78534: LD_VAR 0 11
78538: PUSH
78539: LD_VAR 0 12
78543: PUSH
78544: EMPTY
78545: LIST
78546: LIST
78547: PPUSH
78548: CALL_OW 2
78552: ST_TO_ADDR
// end ;
78553: GO 78461
78555: POP
78556: POP
78557: GO 78441
78559: POP
78560: POP
// if not list then
78561: LD_VAR 0 13
78565: NOT
78566: IFFALSE 78570
// exit ;
78568: GO 78649
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
78570: LD_ADDR_VAR 0 13
78574: PUSH
78575: LD_VAR 0 1
78579: PPUSH
78580: LD_VAR 0 13
78584: PPUSH
78585: LD_INT 1
78587: PPUSH
78588: LD_INT 1
78590: PPUSH
78591: CALL 24599 0 4
78595: ST_TO_ADDR
// ComStop ( flame ) ;
78596: LD_VAR 0 1
78600: PPUSH
78601: CALL_OW 141
// for i in list do
78605: LD_ADDR_VAR 0 6
78609: PUSH
78610: LD_VAR 0 13
78614: PUSH
78615: FOR_IN
78616: IFFALSE 78647
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
78618: LD_VAR 0 1
78622: PPUSH
78623: LD_VAR 0 6
78627: PUSH
78628: LD_INT 1
78630: ARRAY
78631: PPUSH
78632: LD_VAR 0 6
78636: PUSH
78637: LD_INT 2
78639: ARRAY
78640: PPUSH
78641: CALL_OW 176
78645: GO 78615
78647: POP
78648: POP
// end ;
78649: LD_VAR 0 5
78653: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78654: LD_EXP 105
78658: NOT
78659: IFFALSE 78709
78661: GO 78663
78663: DISABLE
// begin initHack := true ;
78664: LD_ADDR_EXP 105
78668: PUSH
78669: LD_INT 1
78671: ST_TO_ADDR
// hackTanks := [ ] ;
78672: LD_ADDR_EXP 106
78676: PUSH
78677: EMPTY
78678: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78679: LD_ADDR_EXP 107
78683: PUSH
78684: EMPTY
78685: ST_TO_ADDR
// hackLimit := 3 ;
78686: LD_ADDR_EXP 108
78690: PUSH
78691: LD_INT 3
78693: ST_TO_ADDR
// hackDist := 12 ;
78694: LD_ADDR_EXP 109
78698: PUSH
78699: LD_INT 12
78701: ST_TO_ADDR
// hackCounter := [ ] ;
78702: LD_ADDR_EXP 110
78706: PUSH
78707: EMPTY
78708: ST_TO_ADDR
// end ;
78709: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78710: LD_EXP 105
78714: PUSH
78715: LD_INT 34
78717: PUSH
78718: LD_INT 99
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: PPUSH
78725: CALL_OW 69
78729: AND
78730: IFFALSE 78983
78732: GO 78734
78734: DISABLE
78735: LD_INT 0
78737: PPUSH
78738: PPUSH
// begin enable ;
78739: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78740: LD_ADDR_VAR 0 1
78744: PUSH
78745: LD_INT 34
78747: PUSH
78748: LD_INT 99
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: PPUSH
78755: CALL_OW 69
78759: PUSH
78760: FOR_IN
78761: IFFALSE 78981
// begin if not i in hackTanks then
78763: LD_VAR 0 1
78767: PUSH
78768: LD_EXP 106
78772: IN
78773: NOT
78774: IFFALSE 78857
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78776: LD_ADDR_EXP 106
78780: PUSH
78781: LD_EXP 106
78785: PPUSH
78786: LD_EXP 106
78790: PUSH
78791: LD_INT 1
78793: PLUS
78794: PPUSH
78795: LD_VAR 0 1
78799: PPUSH
78800: CALL_OW 1
78804: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78805: LD_ADDR_EXP 107
78809: PUSH
78810: LD_EXP 107
78814: PPUSH
78815: LD_EXP 107
78819: PUSH
78820: LD_INT 1
78822: PLUS
78823: PPUSH
78824: EMPTY
78825: PPUSH
78826: CALL_OW 1
78830: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78831: LD_ADDR_EXP 110
78835: PUSH
78836: LD_EXP 110
78840: PPUSH
78841: LD_EXP 110
78845: PUSH
78846: LD_INT 1
78848: PLUS
78849: PPUSH
78850: EMPTY
78851: PPUSH
78852: CALL_OW 1
78856: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78857: LD_VAR 0 1
78861: PPUSH
78862: CALL_OW 302
78866: NOT
78867: IFFALSE 78880
// begin HackUnlinkAll ( i ) ;
78869: LD_VAR 0 1
78873: PPUSH
78874: CALL 78986 0 1
// continue ;
78878: GO 78760
// end ; HackCheckCapturedStatus ( i ) ;
78880: LD_VAR 0 1
78884: PPUSH
78885: CALL 79429 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78889: LD_ADDR_VAR 0 2
78893: PUSH
78894: LD_INT 81
78896: PUSH
78897: LD_VAR 0 1
78901: PPUSH
78902: CALL_OW 255
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: PUSH
78911: LD_INT 33
78913: PUSH
78914: LD_INT 3
78916: PUSH
78917: EMPTY
78918: LIST
78919: LIST
78920: PUSH
78921: LD_INT 91
78923: PUSH
78924: LD_VAR 0 1
78928: PUSH
78929: LD_EXP 109
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: LIST
78938: PUSH
78939: LD_INT 50
78941: PUSH
78942: EMPTY
78943: LIST
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: PPUSH
78951: CALL_OW 69
78955: ST_TO_ADDR
// if not tmp then
78956: LD_VAR 0 2
78960: NOT
78961: IFFALSE 78965
// continue ;
78963: GO 78760
// HackLink ( i , tmp ) ;
78965: LD_VAR 0 1
78969: PPUSH
78970: LD_VAR 0 2
78974: PPUSH
78975: CALL 79122 0 2
// end ;
78979: GO 78760
78981: POP
78982: POP
// end ;
78983: PPOPN 2
78985: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78986: LD_INT 0
78988: PPUSH
78989: PPUSH
78990: PPUSH
// if not hack in hackTanks then
78991: LD_VAR 0 1
78995: PUSH
78996: LD_EXP 106
79000: IN
79001: NOT
79002: IFFALSE 79006
// exit ;
79004: GO 79117
// index := GetElementIndex ( hackTanks , hack ) ;
79006: LD_ADDR_VAR 0 4
79010: PUSH
79011: LD_EXP 106
79015: PPUSH
79016: LD_VAR 0 1
79020: PPUSH
79021: CALL 23896 0 2
79025: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79026: LD_EXP 107
79030: PUSH
79031: LD_VAR 0 4
79035: ARRAY
79036: IFFALSE 79117
// begin for i in hackTanksCaptured [ index ] do
79038: LD_ADDR_VAR 0 3
79042: PUSH
79043: LD_EXP 107
79047: PUSH
79048: LD_VAR 0 4
79052: ARRAY
79053: PUSH
79054: FOR_IN
79055: IFFALSE 79081
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79057: LD_VAR 0 3
79061: PUSH
79062: LD_INT 1
79064: ARRAY
79065: PPUSH
79066: LD_VAR 0 3
79070: PUSH
79071: LD_INT 2
79073: ARRAY
79074: PPUSH
79075: CALL_OW 235
79079: GO 79054
79081: POP
79082: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79083: LD_ADDR_EXP 107
79087: PUSH
79088: LD_EXP 107
79092: PPUSH
79093: LD_VAR 0 4
79097: PPUSH
79098: EMPTY
79099: PPUSH
79100: CALL_OW 1
79104: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79105: LD_VAR 0 1
79109: PPUSH
79110: LD_INT 0
79112: PPUSH
79113: CALL_OW 505
// end ; end ;
79117: LD_VAR 0 2
79121: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79122: LD_INT 0
79124: PPUSH
79125: PPUSH
79126: PPUSH
// if not hack in hackTanks or not vehicles then
79127: LD_VAR 0 1
79131: PUSH
79132: LD_EXP 106
79136: IN
79137: NOT
79138: PUSH
79139: LD_VAR 0 2
79143: NOT
79144: OR
79145: IFFALSE 79149
// exit ;
79147: GO 79424
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79149: LD_ADDR_VAR 0 2
79153: PUSH
79154: LD_VAR 0 1
79158: PPUSH
79159: LD_VAR 0 2
79163: PPUSH
79164: LD_INT 1
79166: PPUSH
79167: LD_INT 1
79169: PPUSH
79170: CALL 24546 0 4
79174: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79175: LD_ADDR_VAR 0 5
79179: PUSH
79180: LD_EXP 106
79184: PPUSH
79185: LD_VAR 0 1
79189: PPUSH
79190: CALL 23896 0 2
79194: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79195: LD_EXP 107
79199: PUSH
79200: LD_VAR 0 5
79204: ARRAY
79205: PUSH
79206: LD_EXP 108
79210: LESS
79211: IFFALSE 79400
// begin for i := 1 to vehicles do
79213: LD_ADDR_VAR 0 4
79217: PUSH
79218: DOUBLE
79219: LD_INT 1
79221: DEC
79222: ST_TO_ADDR
79223: LD_VAR 0 2
79227: PUSH
79228: FOR_TO
79229: IFFALSE 79398
// begin if hackTanksCaptured [ index ] = hackLimit then
79231: LD_EXP 107
79235: PUSH
79236: LD_VAR 0 5
79240: ARRAY
79241: PUSH
79242: LD_EXP 108
79246: EQUAL
79247: IFFALSE 79251
// break ;
79249: GO 79398
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79251: LD_ADDR_EXP 110
79255: PUSH
79256: LD_EXP 110
79260: PPUSH
79261: LD_VAR 0 5
79265: PPUSH
79266: LD_EXP 110
79270: PUSH
79271: LD_VAR 0 5
79275: ARRAY
79276: PUSH
79277: LD_INT 1
79279: PLUS
79280: PPUSH
79281: CALL_OW 1
79285: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79286: LD_ADDR_EXP 107
79290: PUSH
79291: LD_EXP 107
79295: PPUSH
79296: LD_VAR 0 5
79300: PUSH
79301: LD_EXP 107
79305: PUSH
79306: LD_VAR 0 5
79310: ARRAY
79311: PUSH
79312: LD_INT 1
79314: PLUS
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: PPUSH
79320: LD_VAR 0 2
79324: PUSH
79325: LD_VAR 0 4
79329: ARRAY
79330: PUSH
79331: LD_VAR 0 2
79335: PUSH
79336: LD_VAR 0 4
79340: ARRAY
79341: PPUSH
79342: CALL_OW 255
79346: PUSH
79347: EMPTY
79348: LIST
79349: LIST
79350: PPUSH
79351: CALL 24111 0 3
79355: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79356: LD_VAR 0 2
79360: PUSH
79361: LD_VAR 0 4
79365: ARRAY
79366: PPUSH
79367: LD_VAR 0 1
79371: PPUSH
79372: CALL_OW 255
79376: PPUSH
79377: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79381: LD_VAR 0 2
79385: PUSH
79386: LD_VAR 0 4
79390: ARRAY
79391: PPUSH
79392: CALL_OW 141
// end ;
79396: GO 79228
79398: POP
79399: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79400: LD_VAR 0 1
79404: PPUSH
79405: LD_EXP 107
79409: PUSH
79410: LD_VAR 0 5
79414: ARRAY
79415: PUSH
79416: LD_INT 0
79418: PLUS
79419: PPUSH
79420: CALL_OW 505
// end ;
79424: LD_VAR 0 3
79428: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79429: LD_INT 0
79431: PPUSH
79432: PPUSH
79433: PPUSH
79434: PPUSH
// if not hack in hackTanks then
79435: LD_VAR 0 1
79439: PUSH
79440: LD_EXP 106
79444: IN
79445: NOT
79446: IFFALSE 79450
// exit ;
79448: GO 79690
// index := GetElementIndex ( hackTanks , hack ) ;
79450: LD_ADDR_VAR 0 4
79454: PUSH
79455: LD_EXP 106
79459: PPUSH
79460: LD_VAR 0 1
79464: PPUSH
79465: CALL 23896 0 2
79469: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79470: LD_ADDR_VAR 0 3
79474: PUSH
79475: DOUBLE
79476: LD_EXP 107
79480: PUSH
79481: LD_VAR 0 4
79485: ARRAY
79486: INC
79487: ST_TO_ADDR
79488: LD_INT 1
79490: PUSH
79491: FOR_DOWNTO
79492: IFFALSE 79664
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79494: LD_ADDR_VAR 0 5
79498: PUSH
79499: LD_EXP 107
79503: PUSH
79504: LD_VAR 0 4
79508: ARRAY
79509: PUSH
79510: LD_VAR 0 3
79514: ARRAY
79515: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79516: LD_VAR 0 5
79520: PUSH
79521: LD_INT 1
79523: ARRAY
79524: PPUSH
79525: CALL_OW 302
79529: NOT
79530: PUSH
79531: LD_VAR 0 5
79535: PUSH
79536: LD_INT 1
79538: ARRAY
79539: PPUSH
79540: CALL_OW 255
79544: PUSH
79545: LD_VAR 0 1
79549: PPUSH
79550: CALL_OW 255
79554: NONEQUAL
79555: OR
79556: IFFALSE 79662
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79558: LD_VAR 0 5
79562: PUSH
79563: LD_INT 1
79565: ARRAY
79566: PPUSH
79567: CALL_OW 305
79571: PUSH
79572: LD_VAR 0 5
79576: PUSH
79577: LD_INT 1
79579: ARRAY
79580: PPUSH
79581: CALL_OW 255
79585: PUSH
79586: LD_VAR 0 1
79590: PPUSH
79591: CALL_OW 255
79595: EQUAL
79596: AND
79597: IFFALSE 79621
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79599: LD_VAR 0 5
79603: PUSH
79604: LD_INT 1
79606: ARRAY
79607: PPUSH
79608: LD_VAR 0 5
79612: PUSH
79613: LD_INT 2
79615: ARRAY
79616: PPUSH
79617: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79621: LD_ADDR_EXP 107
79625: PUSH
79626: LD_EXP 107
79630: PPUSH
79631: LD_VAR 0 4
79635: PPUSH
79636: LD_EXP 107
79640: PUSH
79641: LD_VAR 0 4
79645: ARRAY
79646: PPUSH
79647: LD_VAR 0 3
79651: PPUSH
79652: CALL_OW 3
79656: PPUSH
79657: CALL_OW 1
79661: ST_TO_ADDR
// end ; end ;
79662: GO 79491
79664: POP
79665: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79666: LD_VAR 0 1
79670: PPUSH
79671: LD_EXP 107
79675: PUSH
79676: LD_VAR 0 4
79680: ARRAY
79681: PUSH
79682: LD_INT 0
79684: PLUS
79685: PPUSH
79686: CALL_OW 505
// end ;
79690: LD_VAR 0 2
79694: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79695: LD_INT 0
79697: PPUSH
79698: PPUSH
79699: PPUSH
79700: PPUSH
// if not hack in hackTanks then
79701: LD_VAR 0 1
79705: PUSH
79706: LD_EXP 106
79710: IN
79711: NOT
79712: IFFALSE 79716
// exit ;
79714: GO 79801
// index := GetElementIndex ( hackTanks , hack ) ;
79716: LD_ADDR_VAR 0 5
79720: PUSH
79721: LD_EXP 106
79725: PPUSH
79726: LD_VAR 0 1
79730: PPUSH
79731: CALL 23896 0 2
79735: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79736: LD_ADDR_VAR 0 4
79740: PUSH
79741: DOUBLE
79742: LD_INT 1
79744: DEC
79745: ST_TO_ADDR
79746: LD_EXP 107
79750: PUSH
79751: LD_VAR 0 5
79755: ARRAY
79756: PUSH
79757: FOR_TO
79758: IFFALSE 79799
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79760: LD_EXP 107
79764: PUSH
79765: LD_VAR 0 5
79769: ARRAY
79770: PUSH
79771: LD_VAR 0 4
79775: ARRAY
79776: PUSH
79777: LD_INT 1
79779: ARRAY
79780: PUSH
79781: LD_VAR 0 2
79785: EQUAL
79786: IFFALSE 79797
// KillUnit ( vehicle ) ;
79788: LD_VAR 0 2
79792: PPUSH
79793: CALL_OW 66
79797: GO 79757
79799: POP
79800: POP
// end ;
79801: LD_VAR 0 3
79805: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79806: LD_EXP 111
79810: NOT
79811: IFFALSE 79846
79813: GO 79815
79815: DISABLE
// begin initMiner := true ;
79816: LD_ADDR_EXP 111
79820: PUSH
79821: LD_INT 1
79823: ST_TO_ADDR
// minersList := [ ] ;
79824: LD_ADDR_EXP 112
79828: PUSH
79829: EMPTY
79830: ST_TO_ADDR
// minerMinesList := [ ] ;
79831: LD_ADDR_EXP 113
79835: PUSH
79836: EMPTY
79837: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79838: LD_ADDR_EXP 114
79842: PUSH
79843: LD_INT 5
79845: ST_TO_ADDR
// end ;
79846: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79847: LD_EXP 111
79851: PUSH
79852: LD_INT 34
79854: PUSH
79855: LD_INT 81
79857: PUSH
79858: EMPTY
79859: LIST
79860: LIST
79861: PPUSH
79862: CALL_OW 69
79866: AND
79867: IFFALSE 80328
79869: GO 79871
79871: DISABLE
79872: LD_INT 0
79874: PPUSH
79875: PPUSH
79876: PPUSH
79877: PPUSH
// begin enable ;
79878: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79879: LD_ADDR_VAR 0 1
79883: PUSH
79884: LD_INT 34
79886: PUSH
79887: LD_INT 81
79889: PUSH
79890: EMPTY
79891: LIST
79892: LIST
79893: PPUSH
79894: CALL_OW 69
79898: PUSH
79899: FOR_IN
79900: IFFALSE 79972
// begin if not i in minersList then
79902: LD_VAR 0 1
79906: PUSH
79907: LD_EXP 112
79911: IN
79912: NOT
79913: IFFALSE 79970
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79915: LD_ADDR_EXP 112
79919: PUSH
79920: LD_EXP 112
79924: PPUSH
79925: LD_EXP 112
79929: PUSH
79930: LD_INT 1
79932: PLUS
79933: PPUSH
79934: LD_VAR 0 1
79938: PPUSH
79939: CALL_OW 1
79943: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79944: LD_ADDR_EXP 113
79948: PUSH
79949: LD_EXP 113
79953: PPUSH
79954: LD_EXP 113
79958: PUSH
79959: LD_INT 1
79961: PLUS
79962: PPUSH
79963: EMPTY
79964: PPUSH
79965: CALL_OW 1
79969: ST_TO_ADDR
// end end ;
79970: GO 79899
79972: POP
79973: POP
// for i := minerMinesList downto 1 do
79974: LD_ADDR_VAR 0 1
79978: PUSH
79979: DOUBLE
79980: LD_EXP 113
79984: INC
79985: ST_TO_ADDR
79986: LD_INT 1
79988: PUSH
79989: FOR_DOWNTO
79990: IFFALSE 80326
// begin if IsLive ( minersList [ i ] ) then
79992: LD_EXP 112
79996: PUSH
79997: LD_VAR 0 1
80001: ARRAY
80002: PPUSH
80003: CALL_OW 300
80007: IFFALSE 80035
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
80009: LD_EXP 112
80013: PUSH
80014: LD_VAR 0 1
80018: ARRAY
80019: PPUSH
80020: LD_EXP 113
80024: PUSH
80025: LD_VAR 0 1
80029: ARRAY
80030: PPUSH
80031: CALL_OW 505
// if not minerMinesList [ i ] then
80035: LD_EXP 113
80039: PUSH
80040: LD_VAR 0 1
80044: ARRAY
80045: NOT
80046: IFFALSE 80050
// continue ;
80048: GO 79989
// for j := minerMinesList [ i ] downto 1 do
80050: LD_ADDR_VAR 0 2
80054: PUSH
80055: DOUBLE
80056: LD_EXP 113
80060: PUSH
80061: LD_VAR 0 1
80065: ARRAY
80066: INC
80067: ST_TO_ADDR
80068: LD_INT 1
80070: PUSH
80071: FOR_DOWNTO
80072: IFFALSE 80322
// begin side := GetSide ( minersList [ i ] ) ;
80074: LD_ADDR_VAR 0 3
80078: PUSH
80079: LD_EXP 112
80083: PUSH
80084: LD_VAR 0 1
80088: ARRAY
80089: PPUSH
80090: CALL_OW 255
80094: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
80095: LD_ADDR_VAR 0 4
80099: PUSH
80100: LD_EXP 113
80104: PUSH
80105: LD_VAR 0 1
80109: ARRAY
80110: PUSH
80111: LD_VAR 0 2
80115: ARRAY
80116: PUSH
80117: LD_INT 1
80119: ARRAY
80120: PPUSH
80121: LD_EXP 113
80125: PUSH
80126: LD_VAR 0 1
80130: ARRAY
80131: PUSH
80132: LD_VAR 0 2
80136: ARRAY
80137: PUSH
80138: LD_INT 2
80140: ARRAY
80141: PPUSH
80142: CALL_OW 428
80146: ST_TO_ADDR
// if not tmp then
80147: LD_VAR 0 4
80151: NOT
80152: IFFALSE 80156
// continue ;
80154: GO 80071
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80156: LD_VAR 0 4
80160: PUSH
80161: LD_INT 81
80163: PUSH
80164: LD_VAR 0 3
80168: PUSH
80169: EMPTY
80170: LIST
80171: LIST
80172: PPUSH
80173: CALL_OW 69
80177: IN
80178: PUSH
80179: LD_EXP 113
80183: PUSH
80184: LD_VAR 0 1
80188: ARRAY
80189: PUSH
80190: LD_VAR 0 2
80194: ARRAY
80195: PUSH
80196: LD_INT 1
80198: ARRAY
80199: PPUSH
80200: LD_EXP 113
80204: PUSH
80205: LD_VAR 0 1
80209: ARRAY
80210: PUSH
80211: LD_VAR 0 2
80215: ARRAY
80216: PUSH
80217: LD_INT 2
80219: ARRAY
80220: PPUSH
80221: CALL_OW 458
80225: AND
80226: IFFALSE 80320
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
80228: LD_EXP 113
80232: PUSH
80233: LD_VAR 0 1
80237: ARRAY
80238: PUSH
80239: LD_VAR 0 2
80243: ARRAY
80244: PUSH
80245: LD_INT 1
80247: ARRAY
80248: PPUSH
80249: LD_EXP 113
80253: PUSH
80254: LD_VAR 0 1
80258: ARRAY
80259: PUSH
80260: LD_VAR 0 2
80264: ARRAY
80265: PUSH
80266: LD_INT 2
80268: ARRAY
80269: PPUSH
80270: LD_VAR 0 3
80274: PPUSH
80275: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
80279: LD_ADDR_EXP 113
80283: PUSH
80284: LD_EXP 113
80288: PPUSH
80289: LD_VAR 0 1
80293: PPUSH
80294: LD_EXP 113
80298: PUSH
80299: LD_VAR 0 1
80303: ARRAY
80304: PPUSH
80305: LD_VAR 0 2
80309: PPUSH
80310: CALL_OW 3
80314: PPUSH
80315: CALL_OW 1
80319: ST_TO_ADDR
// end ; end ;
80320: GO 80071
80322: POP
80323: POP
// end ;
80324: GO 79989
80326: POP
80327: POP
// end ;
80328: PPOPN 4
80330: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
80331: LD_INT 0
80333: PPUSH
80334: PPUSH
// result := false ;
80335: LD_ADDR_VAR 0 4
80339: PUSH
80340: LD_INT 0
80342: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
80343: LD_VAR 0 1
80347: PPUSH
80348: CALL_OW 264
80352: PUSH
80353: LD_INT 81
80355: EQUAL
80356: NOT
80357: IFFALSE 80361
// exit ;
80359: GO 80601
// index := GetElementIndex ( minersList , unit ) ;
80361: LD_ADDR_VAR 0 5
80365: PUSH
80366: LD_EXP 112
80370: PPUSH
80371: LD_VAR 0 1
80375: PPUSH
80376: CALL 23896 0 2
80380: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
80381: LD_EXP 113
80385: PUSH
80386: LD_VAR 0 5
80390: ARRAY
80391: PUSH
80392: LD_EXP 114
80396: GREATEREQUAL
80397: IFFALSE 80401
// exit ;
80399: GO 80601
// ComMoveXY ( unit , x , y ) ;
80401: LD_VAR 0 1
80405: PPUSH
80406: LD_VAR 0 2
80410: PPUSH
80411: LD_VAR 0 3
80415: PPUSH
80416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80420: LD_INT 35
80422: PPUSH
80423: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
80427: LD_VAR 0 1
80431: PPUSH
80432: LD_VAR 0 2
80436: PPUSH
80437: LD_VAR 0 3
80441: PPUSH
80442: CALL 55648 0 3
80446: NOT
80447: PUSH
80448: LD_VAR 0 1
80452: PPUSH
80453: CALL_OW 314
80457: AND
80458: IFFALSE 80462
// exit ;
80460: GO 80601
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
80462: LD_VAR 0 2
80466: PPUSH
80467: LD_VAR 0 3
80471: PPUSH
80472: CALL_OW 428
80476: PUSH
80477: LD_VAR 0 1
80481: EQUAL
80482: PUSH
80483: LD_VAR 0 1
80487: PPUSH
80488: CALL_OW 314
80492: NOT
80493: AND
80494: IFFALSE 80420
// PlaySoundXY ( x , y , PlantMine ) ;
80496: LD_VAR 0 2
80500: PPUSH
80501: LD_VAR 0 3
80505: PPUSH
80506: LD_STRING PlantMine
80508: PPUSH
80509: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
80513: LD_VAR 0 2
80517: PPUSH
80518: LD_VAR 0 3
80522: PPUSH
80523: LD_VAR 0 1
80527: PPUSH
80528: CALL_OW 255
80532: PPUSH
80533: LD_INT 0
80535: PPUSH
80536: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80540: LD_ADDR_EXP 113
80544: PUSH
80545: LD_EXP 113
80549: PPUSH
80550: LD_VAR 0 5
80554: PUSH
80555: LD_EXP 113
80559: PUSH
80560: LD_VAR 0 5
80564: ARRAY
80565: PUSH
80566: LD_INT 1
80568: PLUS
80569: PUSH
80570: EMPTY
80571: LIST
80572: LIST
80573: PPUSH
80574: LD_VAR 0 2
80578: PUSH
80579: LD_VAR 0 3
80583: PUSH
80584: EMPTY
80585: LIST
80586: LIST
80587: PPUSH
80588: CALL 24111 0 3
80592: ST_TO_ADDR
// result := true ;
80593: LD_ADDR_VAR 0 4
80597: PUSH
80598: LD_INT 1
80600: ST_TO_ADDR
// end ;
80601: LD_VAR 0 4
80605: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80606: LD_INT 0
80608: PPUSH
80609: PPUSH
80610: PPUSH
// if not unit in minersList then
80611: LD_VAR 0 1
80615: PUSH
80616: LD_EXP 112
80620: IN
80621: NOT
80622: IFFALSE 80626
// exit ;
80624: GO 81018
// index := GetElementIndex ( minersList , unit ) ;
80626: LD_ADDR_VAR 0 6
80630: PUSH
80631: LD_EXP 112
80635: PPUSH
80636: LD_VAR 0 1
80640: PPUSH
80641: CALL 23896 0 2
80645: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80646: LD_ADDR_VAR 0 5
80650: PUSH
80651: DOUBLE
80652: LD_EXP 113
80656: PUSH
80657: LD_VAR 0 6
80661: ARRAY
80662: INC
80663: ST_TO_ADDR
80664: LD_INT 1
80666: PUSH
80667: FOR_DOWNTO
80668: IFFALSE 80829
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80670: LD_EXP 113
80674: PUSH
80675: LD_VAR 0 6
80679: ARRAY
80680: PUSH
80681: LD_VAR 0 5
80685: ARRAY
80686: PUSH
80687: LD_INT 1
80689: ARRAY
80690: PUSH
80691: LD_VAR 0 2
80695: EQUAL
80696: PUSH
80697: LD_EXP 113
80701: PUSH
80702: LD_VAR 0 6
80706: ARRAY
80707: PUSH
80708: LD_VAR 0 5
80712: ARRAY
80713: PUSH
80714: LD_INT 2
80716: ARRAY
80717: PUSH
80718: LD_VAR 0 3
80722: EQUAL
80723: AND
80724: IFFALSE 80827
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80726: LD_EXP 113
80730: PUSH
80731: LD_VAR 0 6
80735: ARRAY
80736: PUSH
80737: LD_VAR 0 5
80741: ARRAY
80742: PUSH
80743: LD_INT 1
80745: ARRAY
80746: PPUSH
80747: LD_EXP 113
80751: PUSH
80752: LD_VAR 0 6
80756: ARRAY
80757: PUSH
80758: LD_VAR 0 5
80762: ARRAY
80763: PUSH
80764: LD_INT 2
80766: ARRAY
80767: PPUSH
80768: LD_VAR 0 1
80772: PPUSH
80773: CALL_OW 255
80777: PPUSH
80778: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80782: LD_ADDR_EXP 113
80786: PUSH
80787: LD_EXP 113
80791: PPUSH
80792: LD_VAR 0 6
80796: PPUSH
80797: LD_EXP 113
80801: PUSH
80802: LD_VAR 0 6
80806: ARRAY
80807: PPUSH
80808: LD_VAR 0 5
80812: PPUSH
80813: CALL_OW 3
80817: PPUSH
80818: CALL_OW 1
80822: ST_TO_ADDR
// exit ;
80823: POP
80824: POP
80825: GO 81018
// end ; end ;
80827: GO 80667
80829: POP
80830: POP
// for i := minerMinesList [ index ] downto 1 do
80831: LD_ADDR_VAR 0 5
80835: PUSH
80836: DOUBLE
80837: LD_EXP 113
80841: PUSH
80842: LD_VAR 0 6
80846: ARRAY
80847: INC
80848: ST_TO_ADDR
80849: LD_INT 1
80851: PUSH
80852: FOR_DOWNTO
80853: IFFALSE 81016
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80855: LD_EXP 113
80859: PUSH
80860: LD_VAR 0 6
80864: ARRAY
80865: PUSH
80866: LD_VAR 0 5
80870: ARRAY
80871: PUSH
80872: LD_INT 1
80874: ARRAY
80875: PPUSH
80876: LD_EXP 113
80880: PUSH
80881: LD_VAR 0 6
80885: ARRAY
80886: PUSH
80887: LD_VAR 0 5
80891: ARRAY
80892: PUSH
80893: LD_INT 2
80895: ARRAY
80896: PPUSH
80897: LD_VAR 0 2
80901: PPUSH
80902: LD_VAR 0 3
80906: PPUSH
80907: CALL_OW 298
80911: PUSH
80912: LD_INT 6
80914: LESS
80915: IFFALSE 81014
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80917: LD_EXP 113
80921: PUSH
80922: LD_VAR 0 6
80926: ARRAY
80927: PUSH
80928: LD_VAR 0 5
80932: ARRAY
80933: PUSH
80934: LD_INT 1
80936: ARRAY
80937: PPUSH
80938: LD_EXP 113
80942: PUSH
80943: LD_VAR 0 6
80947: ARRAY
80948: PUSH
80949: LD_VAR 0 5
80953: ARRAY
80954: PUSH
80955: LD_INT 2
80957: ARRAY
80958: PPUSH
80959: LD_VAR 0 1
80963: PPUSH
80964: CALL_OW 255
80968: PPUSH
80969: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80973: LD_ADDR_EXP 113
80977: PUSH
80978: LD_EXP 113
80982: PPUSH
80983: LD_VAR 0 6
80987: PPUSH
80988: LD_EXP 113
80992: PUSH
80993: LD_VAR 0 6
80997: ARRAY
80998: PPUSH
80999: LD_VAR 0 5
81003: PPUSH
81004: CALL_OW 3
81008: PPUSH
81009: CALL_OW 1
81013: ST_TO_ADDR
// end ; end ;
81014: GO 80852
81016: POP
81017: POP
// end ;
81018: LD_VAR 0 4
81022: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
81023: LD_INT 0
81025: PPUSH
81026: PPUSH
81027: PPUSH
81028: PPUSH
81029: PPUSH
81030: PPUSH
81031: PPUSH
81032: PPUSH
81033: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
81034: LD_VAR 0 1
81038: PPUSH
81039: CALL_OW 264
81043: PUSH
81044: LD_INT 81
81046: EQUAL
81047: NOT
81048: PUSH
81049: LD_VAR 0 1
81053: PUSH
81054: LD_EXP 112
81058: IN
81059: NOT
81060: OR
81061: IFFALSE 81065
// exit ;
81063: GO 81387
// index := GetElementIndex ( minersList , unit ) ;
81065: LD_ADDR_VAR 0 6
81069: PUSH
81070: LD_EXP 112
81074: PPUSH
81075: LD_VAR 0 1
81079: PPUSH
81080: CALL 23896 0 2
81084: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
81085: LD_ADDR_VAR 0 8
81089: PUSH
81090: LD_EXP 114
81094: PUSH
81095: LD_EXP 113
81099: PUSH
81100: LD_VAR 0 6
81104: ARRAY
81105: MINUS
81106: ST_TO_ADDR
// if not minesFreeAmount then
81107: LD_VAR 0 8
81111: NOT
81112: IFFALSE 81116
// exit ;
81114: GO 81387
// tmp := [ ] ;
81116: LD_ADDR_VAR 0 7
81120: PUSH
81121: EMPTY
81122: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
81123: LD_ADDR_VAR 0 5
81127: PUSH
81128: DOUBLE
81129: LD_INT 1
81131: DEC
81132: ST_TO_ADDR
81133: LD_VAR 0 8
81137: PUSH
81138: FOR_TO
81139: IFFALSE 81334
// begin _d := rand ( 0 , 5 ) ;
81141: LD_ADDR_VAR 0 11
81145: PUSH
81146: LD_INT 0
81148: PPUSH
81149: LD_INT 5
81151: PPUSH
81152: CALL_OW 12
81156: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81157: LD_ADDR_VAR 0 12
81161: PUSH
81162: LD_INT 2
81164: PPUSH
81165: LD_INT 6
81167: PPUSH
81168: CALL_OW 12
81172: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81173: LD_ADDR_VAR 0 9
81177: PUSH
81178: LD_VAR 0 2
81182: PPUSH
81183: LD_VAR 0 11
81187: PPUSH
81188: LD_VAR 0 12
81192: PPUSH
81193: CALL_OW 272
81197: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81198: LD_ADDR_VAR 0 10
81202: PUSH
81203: LD_VAR 0 3
81207: PPUSH
81208: LD_VAR 0 11
81212: PPUSH
81213: LD_VAR 0 12
81217: PPUSH
81218: CALL_OW 273
81222: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
81223: LD_VAR 0 9
81227: PPUSH
81228: LD_VAR 0 10
81232: PPUSH
81233: CALL_OW 488
81237: PUSH
81238: LD_VAR 0 9
81242: PUSH
81243: LD_VAR 0 10
81247: PUSH
81248: EMPTY
81249: LIST
81250: LIST
81251: PUSH
81252: LD_VAR 0 7
81256: IN
81257: NOT
81258: AND
81259: PUSH
81260: LD_VAR 0 9
81264: PPUSH
81265: LD_VAR 0 10
81269: PPUSH
81270: CALL_OW 458
81274: NOT
81275: AND
81276: IFFALSE 81318
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
81278: LD_ADDR_VAR 0 7
81282: PUSH
81283: LD_VAR 0 7
81287: PPUSH
81288: LD_VAR 0 7
81292: PUSH
81293: LD_INT 1
81295: PLUS
81296: PPUSH
81297: LD_VAR 0 9
81301: PUSH
81302: LD_VAR 0 10
81306: PUSH
81307: EMPTY
81308: LIST
81309: LIST
81310: PPUSH
81311: CALL_OW 1
81315: ST_TO_ADDR
81316: GO 81332
// i := i - 1 ;
81318: LD_ADDR_VAR 0 5
81322: PUSH
81323: LD_VAR 0 5
81327: PUSH
81328: LD_INT 1
81330: MINUS
81331: ST_TO_ADDR
// end ;
81332: GO 81138
81334: POP
81335: POP
// for i in tmp do
81336: LD_ADDR_VAR 0 5
81340: PUSH
81341: LD_VAR 0 7
81345: PUSH
81346: FOR_IN
81347: IFFALSE 81385
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
81349: LD_VAR 0 1
81353: PPUSH
81354: LD_VAR 0 5
81358: PUSH
81359: LD_INT 1
81361: ARRAY
81362: PPUSH
81363: LD_VAR 0 5
81367: PUSH
81368: LD_INT 2
81370: ARRAY
81371: PPUSH
81372: CALL 80331 0 3
81376: NOT
81377: IFFALSE 81383
// exit ;
81379: POP
81380: POP
81381: GO 81387
81383: GO 81346
81385: POP
81386: POP
// end ;
81387: LD_VAR 0 4
81391: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
81392: LD_INT 0
81394: PPUSH
81395: PPUSH
81396: PPUSH
81397: PPUSH
81398: PPUSH
81399: PPUSH
81400: PPUSH
// if not GetClass ( unit ) = class_sniper then
81401: LD_VAR 0 1
81405: PPUSH
81406: CALL_OW 257
81410: PUSH
81411: LD_INT 5
81413: EQUAL
81414: NOT
81415: IFFALSE 81419
// exit ;
81417: GO 81807
// dist := 8 ;
81419: LD_ADDR_VAR 0 5
81423: PUSH
81424: LD_INT 8
81426: ST_TO_ADDR
// viewRange := 12 ;
81427: LD_ADDR_VAR 0 7
81431: PUSH
81432: LD_INT 12
81434: ST_TO_ADDR
// side := GetSide ( unit ) ;
81435: LD_ADDR_VAR 0 6
81439: PUSH
81440: LD_VAR 0 1
81444: PPUSH
81445: CALL_OW 255
81449: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
81450: LD_INT 61
81452: PPUSH
81453: LD_VAR 0 6
81457: PPUSH
81458: CALL_OW 321
81462: PUSH
81463: LD_INT 2
81465: EQUAL
81466: IFFALSE 81476
// viewRange := 16 ;
81468: LD_ADDR_VAR 0 7
81472: PUSH
81473: LD_INT 16
81475: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
81476: LD_VAR 0 1
81480: PPUSH
81481: LD_VAR 0 2
81485: PPUSH
81486: LD_VAR 0 3
81490: PPUSH
81491: CALL_OW 297
81495: PUSH
81496: LD_VAR 0 5
81500: GREATER
81501: IFFALSE 81580
// begin ComMoveXY ( unit , x , y ) ;
81503: LD_VAR 0 1
81507: PPUSH
81508: LD_VAR 0 2
81512: PPUSH
81513: LD_VAR 0 3
81517: PPUSH
81518: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81522: LD_INT 35
81524: PPUSH
81525: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
81529: LD_VAR 0 1
81533: PPUSH
81534: LD_VAR 0 2
81538: PPUSH
81539: LD_VAR 0 3
81543: PPUSH
81544: CALL 55648 0 3
81548: NOT
81549: IFFALSE 81553
// exit ;
81551: GO 81807
// until GetDistUnitXY ( unit , x , y ) < dist ;
81553: LD_VAR 0 1
81557: PPUSH
81558: LD_VAR 0 2
81562: PPUSH
81563: LD_VAR 0 3
81567: PPUSH
81568: CALL_OW 297
81572: PUSH
81573: LD_VAR 0 5
81577: LESS
81578: IFFALSE 81522
// end ; ComTurnXY ( unit , x , y ) ;
81580: LD_VAR 0 1
81584: PPUSH
81585: LD_VAR 0 2
81589: PPUSH
81590: LD_VAR 0 3
81594: PPUSH
81595: CALL_OW 118
// wait ( 5 ) ;
81599: LD_INT 5
81601: PPUSH
81602: CALL_OW 67
// _d := GetDir ( unit ) ;
81606: LD_ADDR_VAR 0 10
81610: PUSH
81611: LD_VAR 0 1
81615: PPUSH
81616: CALL_OW 254
81620: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
81621: LD_ADDR_VAR 0 8
81625: PUSH
81626: LD_VAR 0 1
81630: PPUSH
81631: CALL_OW 250
81635: PPUSH
81636: LD_VAR 0 10
81640: PPUSH
81641: LD_VAR 0 5
81645: PPUSH
81646: CALL_OW 272
81650: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
81651: LD_ADDR_VAR 0 9
81655: PUSH
81656: LD_VAR 0 1
81660: PPUSH
81661: CALL_OW 251
81665: PPUSH
81666: LD_VAR 0 10
81670: PPUSH
81671: LD_VAR 0 5
81675: PPUSH
81676: CALL_OW 273
81680: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81681: LD_VAR 0 8
81685: PPUSH
81686: LD_VAR 0 9
81690: PPUSH
81691: CALL_OW 488
81695: NOT
81696: IFFALSE 81700
// exit ;
81698: GO 81807
// ComAnimCustom ( unit , 1 ) ;
81700: LD_VAR 0 1
81704: PPUSH
81705: LD_INT 1
81707: PPUSH
81708: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81712: LD_VAR 0 8
81716: PPUSH
81717: LD_VAR 0 9
81721: PPUSH
81722: LD_VAR 0 6
81726: PPUSH
81727: LD_VAR 0 7
81731: PPUSH
81732: CALL_OW 330
// repeat wait ( 1 ) ;
81736: LD_INT 1
81738: PPUSH
81739: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
81743: LD_VAR 0 1
81747: PPUSH
81748: CALL_OW 316
81752: PUSH
81753: LD_VAR 0 1
81757: PPUSH
81758: CALL_OW 314
81762: OR
81763: PUSH
81764: LD_VAR 0 1
81768: PPUSH
81769: CALL_OW 302
81773: NOT
81774: OR
81775: PUSH
81776: LD_VAR 0 1
81780: PPUSH
81781: CALL_OW 301
81785: OR
81786: IFFALSE 81736
// RemoveSeeing ( _x , _y , side ) ;
81788: LD_VAR 0 8
81792: PPUSH
81793: LD_VAR 0 9
81797: PPUSH
81798: LD_VAR 0 6
81802: PPUSH
81803: CALL_OW 331
// end ;
81807: LD_VAR 0 4
81811: RET
