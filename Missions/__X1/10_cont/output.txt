// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// CreateNature ;
   8: CALL 11352 0 0
// PrepareArabian ;
  12: CALL 247 0 0
// PrepareAmerican ;
  16: CALL 682 0 0
// PrepareLegion ;
  20: CALL 5902 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 11958 0 0
// end ;
  41: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter , americanWave ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 09_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 09_
  60: ST_TO_ADDR
// amScriptActive := true ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// legScriptActive := true ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 16
  84: PUSH
  85: LD_INT 14
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: LD_OWVAR 67
 104: ARRAY
 105: ST_TO_ADDR
// spotAmericanBase := false ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// spotArabianBase := false ;
 114: LD_ADDR_EXP 7
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// spotLegion := false ;
 122: LD_ADDR_EXP 10
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// spotByAmerican := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// spotByLegion := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// americanDestroyed := false ;
 146: LD_ADDR_EXP 11
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// legionDestroyed := false ;
 154: LD_ADDR_EXP 12
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasMastodont := false ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasVehicles := false ;
 170: LD_ADDR_EXP 14
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// hasTigers := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// hasApes := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasDrugs := false ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// canFinish := false ;
 202: LD_ADDR_EXP 18
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// gameActive := false ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// omarCanChangeClass := false ;
 218: LD_ADDR_EXP 20
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// tigerCounter := 0 ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// americanWave := 0 ;
 234: LD_ADDR_EXP 22
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// end ; end_of_file
 242: LD_VAR 0 1
 246: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 247: LD_INT 0
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
// uc_side := 2 ;
 253: LD_ADDR_OWVAR 20
 257: PUSH
 258: LD_INT 2
 260: ST_TO_ADDR
// uc_nation := nation_arabian ;
 261: LD_ADDR_OWVAR 21
 265: PUSH
 266: LD_INT 2
 268: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_STRING Heike
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_EXP 2
 287: PPUSH
 288: CALL 21152 0 3
 292: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 293: LD_INT 14
 295: PPUSH
 296: LD_INT 3
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 27
 304: PPUSH
 305: LD_INT 100
 307: PPUSH
 308: CALL 26138 0 5
// heikeVehicle := CreateVehicle ;
 312: LD_ADDR_EXP 25
 316: PUSH
 317: CALL_OW 45
 321: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 322: LD_EXP 25
 326: PPUSH
 327: LD_INT 4
 329: PPUSH
 330: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 334: LD_EXP 25
 338: PPUSH
 339: LD_INT 118
 341: PPUSH
 342: LD_INT 37
 344: PPUSH
 345: LD_INT 0
 347: PPUSH
 348: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 352: LD_EXP 23
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 364: LD_EXP 23
 368: PPUSH
 369: LD_EXP 25
 373: PPUSH
 374: CALL_OW 52
// uc_side := 5 ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_INT 5
 385: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 386: LD_ADDR_EXP 24
 390: PUSH
 391: LD_STRING Omar
 393: PPUSH
 394: CALL_OW 25
 398: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 399: LD_INT 14
 401: PPUSH
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 27
 410: PPUSH
 411: LD_INT 100
 413: PPUSH
 414: CALL 26138 0 5
// omarVehicle := CreateVehicle ;
 418: LD_ADDR_EXP 26
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 428: LD_EXP 26
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 440: LD_ADDR_VAR 0 2
 444: PUSH
 445: LD_INT 22
 447: PUSH
 448: LD_INT 5
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 21
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: PUSH
 474: FOR_IN
 475: IFFALSE 499
// SetLives ( i , rand ( 300 , 499 ) ) ;
 477: LD_VAR 0 2
 481: PPUSH
 482: LD_INT 300
 484: PPUSH
 485: LD_INT 499
 487: PPUSH
 488: CALL_OW 12
 492: PPUSH
 493: CALL_OW 234
 497: GO 474
 499: POP
 500: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 501: LD_INT 85
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 200
 514: PUSH
 515: LD_INT 20
 517: PUSH
 518: LD_OWVAR 67
 522: MUL
 523: MINUS
 524: PPUSH
 525: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 529: LD_INT 85
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 20
 542: PPUSH
 543: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 547: LD_INT 14
 549: PPUSH
 550: LD_INT 3
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: LD_INT 32
 558: PPUSH
 559: LD_INT 100
 561: PPUSH
 562: CALL 26138 0 5
// veh := CreateVehicle ;
 566: LD_ADDR_VAR 0 4
 570: PUSH
 571: CALL_OW 45
 575: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 576: LD_VAR 0 4
 580: PPUSH
 581: LD_INT 4
 583: PPUSH
 584: CALL_OW 233
// SetLives ( veh , 420 ) ;
 588: LD_VAR 0 4
 592: PPUSH
 593: LD_INT 420
 595: PPUSH
 596: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 600: LD_VAR 0 4
 604: PPUSH
 605: LD_INT 193
 607: PPUSH
 608: LD_INT 133
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 618: LD_INT 14
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: LD_INT 26
 629: PPUSH
 630: LD_INT 11
 632: PPUSH
 633: CALL 26138 0 5
// veh := CreateVehicle ;
 637: LD_ADDR_VAR 0 4
 641: PUSH
 642: CALL_OW 45
 646: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 647: LD_VAR 0 4
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 659: LD_VAR 0 4
 663: PPUSH
 664: LD_INT 261
 666: PPUSH
 667: LD_INT 115
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 48
// end ; end_of_file
 677: LD_VAR 0 1
 681: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 682: LD_INT 0
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// uc_side := 1 ;
 692: LD_ADDR_OWVAR 20
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// uc_nation := nation_american ;
 700: LD_ADDR_OWVAR 21
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// amForces := [ ] ;
 708: LD_ADDR_EXP 27
 712: PUSH
 713: EMPTY
 714: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 715: LD_ADDR_EXP 28
 719: PUSH
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 1
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: CALL 21299 0 3
 733: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 734: LD_ADDR_EXP 29
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 12
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 13
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 779: LD_ADDR_EXP 30
 783: PUSH
 784: LD_INT 94
 786: PUSH
 787: LD_INT 132
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// amBuildings := [ ] ;
 794: LD_ADDR_EXP 31
 798: PUSH
 799: EMPTY
 800: ST_TO_ADDR
// amTanks := [ ] ;
 801: LD_ADDR_EXP 32
 805: PUSH
 806: EMPTY
 807: ST_TO_ADDR
// amCargo := 0 ;
 808: LD_ADDR_EXP 34
 812: PUSH
 813: LD_INT 0
 815: ST_TO_ADDR
// amPatrol := [ ] ;
 816: LD_ADDR_EXP 35
 820: PUSH
 821: EMPTY
 822: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 823: LD_ADDR_VAR 0 7
 827: PUSH
 828: LD_INT 77
 830: PUSH
 831: LD_INT 121
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 98
 840: PUSH
 841: LD_INT 145
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// for i in sources do
 852: LD_ADDR_VAR 0 2
 856: PUSH
 857: LD_VAR 0 7
 861: PUSH
 862: FOR_IN
 863: IFFALSE 892
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 865: LD_VAR 0 2
 869: PUSH
 870: LD_INT 1
 872: ARRAY
 873: PPUSH
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: CALL_OW 441
 890: GO 862
 892: POP
 893: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 894: LD_INT 2
 896: PPUSH
 897: CALL_OW 274
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 550
 907: PPUSH
 908: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 274
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 120
 925: PPUSH
 926: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 274
 937: PPUSH
 938: LD_INT 3
 940: PPUSH
 941: LD_INT 30
 943: PPUSH
 944: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 948: LD_ADDR_VAR 0 6
 952: PUSH
 953: LD_INT 6
 955: PUSH
 956: LD_INT 7
 958: PUSH
 959: LD_INT 8
 961: PUSH
 962: LD_INT 9
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_OWVAR 67
 975: ARRAY
 976: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 977: LD_ADDR_EXP 33
 981: PUSH
 982: LD_STRING Brown
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: LD_STRING 
 990: PPUSH
 991: CALL 21152 0 3
 995: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 996: LD_EXP 33
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: CALL_OW 52
// for i := 1 to 4 do
1008: LD_ADDR_VAR 0 2
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_INT 4
1020: PUSH
1021: FOR_TO
1022: IFFALSE 1548
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1024: LD_ADDR_VAR 0 3
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 6
1036: PUSH
1037: LD_INT 7
1039: PUSH
1040: LD_INT 8
1042: PUSH
1043: LD_INT 9
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_OWVAR 67
1056: ARRAY
1057: PUSH
1058: LD_INT 3
1060: PUSH
1061: LD_INT 4
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 5
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_OWVAR 67
1080: ARRAY
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: LD_INT 5
1087: PUSH
1088: LD_INT 6
1090: PUSH
1091: LD_INT 7
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_OWVAR 67
1104: ARRAY
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 3
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_OWVAR 67
1128: ARRAY
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: LD_VAR 0 2
1140: ARRAY
1141: PUSH
1142: FOR_TO
1143: IFFALSE 1544
// begin PrepareHuman ( false , i , skill ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_VAR 0 6
1157: PPUSH
1158: CALL_OW 380
// un := CreateHuman ;
1162: LD_ADDR_VAR 0 5
1166: PUSH
1167: CALL_OW 44
1171: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1172: LD_ADDR_EXP 27
1176: PUSH
1177: LD_EXP 27
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL 59308 0 2
1191: ST_TO_ADDR
// case i of 1 :
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 1
1199: DOUBLE
1200: EQUAL
1201: IFTRUE 1205
1203: GO 1274
1205: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: LD_INT 30
1226: PUSH
1227: LD_INT 32
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 3
1251: PUSH
1252: LD_INT 62
1254: PUSH
1255: EMPTY
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PPUSH
1267: CALL_OW 69
1271: ST_TO_ADDR
1272: GO 1453
1274: LD_INT 2
1276: DOUBLE
1277: EQUAL
1278: IFTRUE 1282
1280: GO 1311
1282: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1283: LD_ADDR_VAR 0 4
1287: PUSH
1288: LD_INT 2
1290: PPUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 62
1296: PUSH
1297: EMPTY
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PPUSH
1304: CALL_OW 72
1308: ST_TO_ADDR
1309: GO 1453
1311: LD_INT 3
1313: DOUBLE
1314: EQUAL
1315: IFTRUE 1319
1317: GO 1393
1319: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1320: LD_ADDR_VAR 0 4
1324: PUSH
1325: LD_INT 22
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: LD_INT 2
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 3
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 30
1350: PUSH
1351: LD_INT 36
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 3
1365: PUSH
1366: LD_INT 62
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: PPUSH
1381: CALL_OW 69
1385: PPUSH
1386: CALL 54398 0 1
1390: ST_TO_ADDR
1391: GO 1453
1393: LD_INT 4
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1452
1401: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 30
1419: PUSH
1420: LD_INT 8
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 3
1429: PUSH
1430: LD_INT 62
1432: PUSH
1433: EMPTY
1434: LIST
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: PPUSH
1445: CALL_OW 69
1449: ST_TO_ADDR
1450: GO 1453
1452: POP
// if b then
1453: LD_VAR 0 4
1457: IFFALSE 1521
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1459: LD_VAR 0 4
1463: PUSH
1464: LD_INT 1
1466: ARRAY
1467: PPUSH
1468: CALL_OW 266
1472: PUSH
1473: LD_INT 5
1475: EQUAL
1476: IFFALSE 1487
1478: PUSH
1479: LD_INT 60
1481: PPUSH
1482: CALL_OW 13
1486: AND
1487: IFFALSE 1501
// SetClass ( un , class_sniper ) ;
1489: LD_VAR 0 5
1493: PPUSH
1494: LD_INT 5
1496: PPUSH
1497: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1501: LD_VAR 0 5
1505: PPUSH
1506: LD_VAR 0 4
1510: PUSH
1511: LD_INT 1
1513: ARRAY
1514: PPUSH
1515: CALL_OW 52
// end else
1519: GO 1542
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1521: LD_VAR 0 5
1525: PPUSH
1526: LD_INT 92
1528: PPUSH
1529: LD_INT 137
1531: PPUSH
1532: LD_INT 4
1534: PPUSH
1535: LD_INT 0
1537: PPUSH
1538: CALL_OW 50
// end ;
1542: GO 1142
1544: POP
1545: POP
1546: GO 1021
1548: POP
1549: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1550: LD_ADDR_VAR 0 8
1554: PUSH
1555: LD_INT 30
1557: PUSH
1558: LD_INT 32
1560: PUSH
1561: LD_INT 36
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1569: LD_ADDR_VAR 0 2
1573: PUSH
1574: DOUBLE
1575: LD_INT 1
1577: DEC
1578: ST_TO_ADDR
1579: LD_VAR 0 8
1583: PUSH
1584: FOR_TO
1585: IFFALSE 1754
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: DOUBLE
1593: LD_INT 1
1595: DEC
1596: ST_TO_ADDR
1597: LD_INT 1
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 2
1605: PUSH
1606: LD_INT 3
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_OWVAR 67
1619: ARRAY
1620: PUSH
1621: FOR_TO
1622: IFFALSE 1750
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1624: LD_INT 0
1626: PPUSH
1627: LD_INT 7
1629: PUSH
1630: LD_INT 8
1632: PUSH
1633: LD_INT 9
1635: PUSH
1636: LD_INT 10
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 381
// un := CreateHuman ;
1655: LD_ADDR_VAR 0 5
1659: PUSH
1660: CALL_OW 44
1664: ST_TO_ADDR
// if j mod 2 = 0 then
1665: LD_VAR 0 3
1669: PUSH
1670: LD_INT 2
1672: MOD
1673: PUSH
1674: LD_INT 0
1676: EQUAL
1677: IFFALSE 1691
// SetClass ( un , class_sniper ) ;
1679: LD_VAR 0 5
1683: PPUSH
1684: LD_INT 5
1686: PPUSH
1687: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1691: LD_ADDR_EXP 35
1695: PUSH
1696: LD_EXP 35
1700: PPUSH
1701: LD_VAR 0 5
1705: PPUSH
1706: CALL 59308 0 2
1710: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1711: LD_VAR 0 5
1715: PPUSH
1716: LD_VAR 0 8
1720: PUSH
1721: LD_VAR 0 2
1725: ARRAY
1726: PPUSH
1727: LD_INT 0
1729: PPUSH
1730: CALL_OW 49
// SetTag ( un , i ) ;
1734: LD_VAR 0 5
1738: PPUSH
1739: LD_VAR 0 2
1743: PPUSH
1744: CALL_OW 109
// end ;
1748: GO 1621
1750: POP
1751: POP
// end ;
1752: GO 1584
1754: POP
1755: POP
// end ;
1756: LD_VAR 0 1
1760: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1761: LD_EXP 3
1765: IFFALSE 1778
1767: PUSH
1768: LD_EXP 27
1772: PPUSH
1773: CALL 23376 0 1
1777: AND
1778: IFFALSE 4209
1780: GO 1782
1782: DISABLE
1783: LD_INT 0
1785: PPUSH
1786: PPUSH
1787: PPUSH
1788: PPUSH
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
1802: PPUSH
// begin enable ;
1803: ENABLE
// side := 1 ;
1804: LD_ADDR_VAR 0 5
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1812: LD_ADDR_VAR 0 3
1816: PUSH
1817: LD_INT 22
1819: PUSH
1820: LD_VAR 0 5
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 33
1831: PUSH
1832: LD_INT 2
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 50
1841: PUSH
1842: EMPTY
1843: LIST
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: LD_INT 61
1850: PUSH
1851: EMPTY
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1869: LD_VAR 0 3
1873: IFFALSE 1919
1875: PUSH
1876: LD_INT 22
1878: PUSH
1879: LD_VAR 0 5
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 50
1890: PUSH
1891: EMPTY
1892: LIST
1893: PUSH
1894: LD_INT 30
1896: PUSH
1897: LD_INT 36
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PPUSH
1909: CALL_OW 69
1913: PPUSH
1914: CALL 23376 0 1
1918: AND
1919: IFFALSE 1947
// for i in remote do
1921: LD_ADDR_VAR 0 1
1925: PUSH
1926: LD_VAR 0 3
1930: PUSH
1931: FOR_IN
1932: IFFALSE 1945
// Connect ( i ) ;
1934: LD_VAR 0 1
1938: PPUSH
1939: CALL 29620 0 1
1943: GO 1931
1945: POP
1946: POP
// if amTech then
1947: LD_EXP 28
1951: IFFALSE 2107
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1953: LD_ADDR_VAR 0 6
1957: PUSH
1958: LD_INT 22
1960: PUSH
1961: LD_VAR 0 5
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 50
1972: PUSH
1973: EMPTY
1974: LIST
1975: PUSH
1976: LD_INT 2
1978: PUSH
1979: LD_INT 30
1981: PUSH
1982: LD_INT 6
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 30
1991: PUSH
1992: LD_INT 7
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 30
2001: PUSH
2002: LD_INT 8
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: PPUSH
2020: CALL_OW 69
2024: ST_TO_ADDR
// if lab then
2025: LD_VAR 0 6
2029: IFFALSE 2107
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2031: LD_VAR 0 6
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: PPUSH
2040: CALL_OW 461
2044: PUSH
2045: LD_INT 2
2047: EQUAL
2048: IFFALSE 2107
// begin for i in amTech do
2050: LD_ADDR_VAR 0 1
2054: PUSH
2055: LD_EXP 28
2059: PUSH
2060: FOR_IN
2061: IFFALSE 2105
// if CanBeResearched ( lab [ 1 ] , i ) then
2063: LD_VAR 0 6
2067: PUSH
2068: LD_INT 1
2070: ARRAY
2071: PPUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: CALL_OW 430
2081: IFFALSE 2103
// begin ComResearch ( lab [ 1 ] , i ) ;
2083: LD_VAR 0 6
2087: PUSH
2088: LD_INT 1
2090: ARRAY
2091: PPUSH
2092: LD_VAR 0 1
2096: PPUSH
2097: CALL_OW 124
// break ;
2101: GO 2105
// end ;
2103: GO 2060
2105: POP
2106: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2107: LD_ADDR_VAR 0 16
2111: PUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_INT 22
2117: PUSH
2118: LD_VAR 0 5
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: LD_INT 50
2139: PUSH
2140: EMPTY
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PPUSH
2148: CALL_OW 70
2152: ST_TO_ADDR
// if fac then
2153: LD_VAR 0 16
2157: IFFALSE 2423
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2159: LD_VAR 0 16
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 461
2172: PUSH
2173: LD_INT 2
2175: EQUAL
2176: IFFALSE 2423
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2178: LD_ADDR_VAR 0 17
2182: PUSH
2183: LD_INT 1
2185: PPUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 30
2191: PUSH
2192: LD_INT 32
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 30
2201: PUSH
2202: LD_INT 33
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 35
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PPUSH
2228: CALL_OW 70
2232: ST_TO_ADDR
// if emptyTowers then
2233: LD_VAR 0 17
2237: IFFALSE 2285
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2239: LD_ADDR_VAR 0 18
2243: PUSH
2244: LD_VAR 0 17
2248: PUSH
2249: LD_INT 1
2251: ARRAY
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 31667 0 2
2260: ST_TO_ADDR
// if weapon then
2261: LD_VAR 0 18
2265: IFFALSE 2285
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2267: LD_VAR 0 17
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 18
2280: PPUSH
2281: CALL_OW 148
// end ; if amConstructList then
2285: LD_EXP 29
2289: IFFALSE 2423
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2291: LD_VAR 0 16
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PPUSH
2300: LD_EXP 29
2304: PUSH
2305: LD_INT 1
2307: ARRAY
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: PPUSH
2313: LD_EXP 29
2317: PUSH
2318: LD_INT 1
2320: ARRAY
2321: PUSH
2322: LD_INT 2
2324: ARRAY
2325: PPUSH
2326: LD_EXP 29
2330: PUSH
2331: LD_INT 1
2333: ARRAY
2334: PUSH
2335: LD_INT 3
2337: ARRAY
2338: PPUSH
2339: LD_EXP 29
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PUSH
2348: LD_INT 4
2350: ARRAY
2351: PPUSH
2352: CALL_OW 448
2356: IFFALSE 2423
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2358: LD_VAR 0 16
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: LD_EXP 29
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PUSH
2376: LD_INT 1
2378: ARRAY
2379: PPUSH
2380: LD_EXP 29
2384: PUSH
2385: LD_INT 1
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: LD_EXP 29
2397: PUSH
2398: LD_INT 1
2400: ARRAY
2401: PUSH
2402: LD_INT 3
2404: ARRAY
2405: PPUSH
2406: LD_EXP 29
2410: PUSH
2411: LD_INT 1
2413: ARRAY
2414: PUSH
2415: LD_INT 4
2417: ARRAY
2418: PPUSH
2419: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 21
2433: PUSH
2434: LD_INT 3
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 3
2443: PUSH
2444: LD_INT 57
2446: PUSH
2447: EMPTY
2448: LIST
2449: PUSH
2450: EMPTY
2451: LIST
2452: LIST
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 24
2459: PUSH
2460: LD_INT 1000
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 70
2480: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 13
2488: PPUSH
2489: CALL_OW 435
2493: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2494: LD_ADDR_VAR 0 11
2498: PUSH
2499: LD_EXP 27
2503: PPUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 4
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 50
2516: PUSH
2517: EMPTY
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 72
2528: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2529: LD_ADDR_VAR 0 6
2533: PUSH
2534: LD_INT 1
2536: PPUSH
2537: LD_INT 2
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 6
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 30
2552: PUSH
2553: LD_INT 7
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 30
2562: PUSH
2563: LD_INT 8
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 70
2580: ST_TO_ADDR
// if sci then
2581: LD_VAR 0 11
2585: IFFALSE 2744
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2587: LD_ADDR_VAR 0 13
2591: PUSH
2592: LD_EXP 27
2596: PPUSH
2597: LD_INT 95
2599: PUSH
2600: LD_INT 1
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PUSH
2607: LD_INT 120
2609: PUSH
2610: LD_INT 1
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 72
2625: ST_TO_ADDR
// if hurtUnits then
2626: LD_VAR 0 13
2630: IFFALSE 2691
// begin for i in sci do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: LD_VAR 0 11
2641: PUSH
2642: FOR_IN
2643: IFFALSE 2687
// if IsInUnit ( i ) then
2645: LD_VAR 0 1
2649: PPUSH
2650: CALL_OW 310
2654: IFFALSE 2667
// ComExitBuilding ( i ) else
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 122
2665: GO 2685
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2667: LD_VAR 0 1
2671: PPUSH
2672: LD_VAR 0 13
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PPUSH
2681: CALL_OW 128
2685: GO 2642
2687: POP
2688: POP
// end else
2689: GO 2744
// if lab then
2691: LD_VAR 0 6
2695: IFFALSE 2744
// begin for i in sci do
2697: LD_ADDR_VAR 0 1
2701: PUSH
2702: LD_VAR 0 11
2706: PUSH
2707: FOR_IN
2708: IFFALSE 2742
// if not IsInUnit ( i ) then
2710: LD_VAR 0 1
2714: PPUSH
2715: CALL_OW 310
2719: NOT
2720: IFFALSE 2740
// ComEnterUnit ( i , lab [ 1 ] ) ;
2722: LD_VAR 0 1
2726: PPUSH
2727: LD_VAR 0 6
2731: PUSH
2732: LD_INT 1
2734: ARRAY
2735: PPUSH
2736: CALL_OW 120
2740: GO 2707
2742: POP
2743: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2744: LD_ADDR_VAR 0 7
2748: PUSH
2749: LD_EXP 27
2753: PPUSH
2754: LD_INT 25
2756: PUSH
2757: LD_INT 2
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PPUSH
2764: CALL_OW 72
2768: ST_TO_ADDR
// if eng then
2769: LD_VAR 0 7
2773: IFFALSE 3558
// begin for i in eng do
2775: LD_ADDR_VAR 0 1
2779: PUSH
2780: LD_VAR 0 7
2784: PUSH
2785: FOR_IN
2786: IFFALSE 3556
// begin tag := GetTag ( i ) ;
2788: LD_ADDR_VAR 0 8
2792: PUSH
2793: LD_VAR 0 1
2797: PPUSH
2798: CALL_OW 110
2802: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2803: LD_VAR 0 1
2807: PPUSH
2808: CALL_OW 256
2812: PUSH
2813: LD_INT 800
2815: LESS
2816: IFFALSE 2828
2818: PUSH
2819: LD_VAR 0 8
2823: PUSH
2824: LD_INT 1
2826: NONEQUAL
2827: AND
2828: IFFALSE 2878
// begin SetTag ( i , tHeal ) ;
2830: LD_VAR 0 1
2834: PPUSH
2835: LD_INT 1
2837: PPUSH
2838: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: LD_EXP 30
2851: PUSH
2852: LD_INT 1
2854: ARRAY
2855: PPUSH
2856: LD_EXP 30
2860: PUSH
2861: LD_INT 2
2863: ARRAY
2864: PPUSH
2865: CALL_OW 111
// AddComHold ( i ) ;
2869: LD_VAR 0 1
2873: PPUSH
2874: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2878: LD_VAR 0 8
2882: PUSH
2883: LD_INT 1
2885: EQUAL
2886: IFFALSE 2903
2888: PUSH
2889: LD_VAR 0 1
2893: PPUSH
2894: CALL_OW 256
2898: PUSH
2899: LD_INT 1000
2901: EQUAL
2902: AND
2903: IFFALSE 2917
// SetTag ( i , 0 ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 0
2912: PPUSH
2913: CALL_OW 109
// if not tag then
2917: LD_VAR 0 8
2921: NOT
2922: IFFALSE 3094
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2924: LD_ADDR_VAR 0 4
2928: PUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_INT 57
2934: PUSH
2935: EMPTY
2936: LIST
2937: PPUSH
2938: CALL_OW 70
2942: ST_TO_ADDR
// if undone then
2943: LD_VAR 0 4
2947: IFFALSE 2969
// begin ComComplete ( i , undone [ 1 ] ) ;
2949: LD_VAR 0 1
2953: PPUSH
2954: LD_VAR 0 4
2958: PUSH
2959: LD_INT 1
2961: ARRAY
2962: PPUSH
2963: CALL 29512 0 2
// continue ;
2967: GO 2785
// end ; if cr or tmp or Count ( amBuildings ) then
2969: LD_VAR 0 10
2973: IFTRUE 2981
2975: PUSH
2976: LD_VAR 0 2
2980: OR
2981: IFTRUE 2994
2983: PUSH
2984: LD_EXP 31
2988: PPUSH
2989: CALL 23376 0 1
2993: OR
2994: IFFALSE 3070
// begin if IsInUnit ( i ) then
2996: LD_VAR 0 1
3000: PPUSH
3001: CALL_OW 310
3005: IFFALSE 3016
// ComExitBuilding ( i ) ;
3007: LD_VAR 0 1
3011: PPUSH
3012: CALL_OW 122
// if tmp then
3016: LD_VAR 0 2
3020: IFFALSE 3036
// SetTag ( i , tRepair ) else
3022: LD_VAR 0 1
3026: PPUSH
3027: LD_INT 3
3029: PPUSH
3030: CALL_OW 109
3034: GO 3068
// if cr then
3036: LD_VAR 0 10
3040: IFFALSE 3056
// SetTag ( i , tCrates ) else
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 2
3049: PPUSH
3050: CALL_OW 109
3054: GO 3068
// SetTag ( i , tBuild ) ;
3056: LD_VAR 0 1
3060: PPUSH
3061: LD_INT 5
3063: PPUSH
3064: CALL_OW 109
// end else
3068: GO 3094
// if not IsInUnit ( i ) then
3070: LD_VAR 0 1
3074: PPUSH
3075: CALL_OW 310
3079: NOT
3080: IFFALSE 3094
// ComEnterUnit ( i , amBase ) ;
3082: LD_VAR 0 1
3086: PPUSH
3087: LD_INT 2
3089: PPUSH
3090: CALL_OW 120
// end ; if tag = tRepair then
3094: LD_VAR 0 8
3098: PUSH
3099: LD_INT 3
3101: EQUAL
3102: IFFALSE 3204
// begin if IsInUnit ( i ) then
3104: LD_VAR 0 1
3108: PPUSH
3109: CALL_OW 310
3113: IFFALSE 3126
// begin ComExitBuilding ( i ) ;
3115: LD_VAR 0 1
3119: PPUSH
3120: CALL_OW 122
// continue ;
3124: GO 2785
// end ; if not tmp then
3126: LD_VAR 0 2
3130: NOT
3131: IFFALSE 3147
// begin SetTag ( i , 0 ) ;
3133: LD_VAR 0 1
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 109
// continue ;
3145: GO 2785
// end ; if not HasTask ( i ) then
3147: LD_VAR 0 1
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: IFFALSE 3177
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3159: LD_VAR 0 1
3163: PPUSH
3164: LD_VAR 0 2
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PPUSH
3173: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3177: LD_VAR 0 1
3181: PPUSH
3182: LD_INT 1
3184: PPUSH
3185: CALL_OW 308
3189: NOT
3190: IFFALSE 3204
// ComMoveToArea ( i , amBaseArea ) ;
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: CALL_OW 113
// end ; if tag = tBuild then
3204: LD_VAR 0 8
3208: PUSH
3209: LD_INT 5
3211: EQUAL
3212: IFFALSE 3407
// begin if IsInUnit ( i ) then
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 310
3223: IFFALSE 3236
// begin ComExitBuilding ( i ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 122
// continue ;
3234: GO 2785
// end ; if not Count ( amBuildings ) then
3236: LD_EXP 31
3240: PPUSH
3241: CALL 23376 0 1
3245: NOT
3246: IFFALSE 3264
// begin SetTag ( i , 0 ) ;
3248: LD_VAR 0 1
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 109
// continue ;
3260: GO 2785
// end else
3262: GO 3301
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3264: LD_INT 2
3266: PPUSH
3267: LD_EXP 31
3271: PUSH
3272: LD_INT 1
3274: ARRAY
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: PPUSH
3280: CALL 63403 0 2
3284: NOT
3285: IFFALSE 3301
// begin SetTag ( i , 0 ) ;
3287: LD_VAR 0 1
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 109
// continue ;
3299: GO 2785
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3301: LD_ADDR_VAR 0 4
3305: PUSH
3306: LD_INT 1
3308: PPUSH
3309: LD_INT 57
3311: PUSH
3312: EMPTY
3313: LIST
3314: PPUSH
3315: CALL_OW 70
3319: ST_TO_ADDR
// if undone then
3320: LD_VAR 0 4
3324: IFFALSE 3346
// begin ComComplete ( i , undone [ 1 ] ) ;
3326: LD_VAR 0 1
3330: PPUSH
3331: LD_VAR 0 4
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: CALL 29512 0 2
// continue ;
3344: GO 2785
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3346: LD_VAR 0 1
3350: PPUSH
3351: LD_EXP 31
3355: PUSH
3356: LD_INT 1
3358: ARRAY
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: PPUSH
3364: LD_EXP 31
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PUSH
3373: LD_INT 2
3375: ARRAY
3376: PPUSH
3377: LD_EXP 31
3381: PUSH
3382: LD_INT 1
3384: ARRAY
3385: PUSH
3386: LD_INT 3
3388: ARRAY
3389: PPUSH
3390: LD_EXP 31
3394: PUSH
3395: LD_INT 1
3397: ARRAY
3398: PUSH
3399: LD_INT 4
3401: ARRAY
3402: PPUSH
3403: CALL_OW 145
// end ; if tag = tCrates then
3407: LD_VAR 0 8
3411: PUSH
3412: LD_INT 2
3414: EQUAL
3415: IFFALSE 3554
// begin if IsInUnit ( i ) then
3417: LD_VAR 0 1
3421: PPUSH
3422: CALL_OW 310
3426: IFFALSE 3439
// begin ComExitBuilding ( i ) ;
3428: LD_VAR 0 1
3432: PPUSH
3433: CALL_OW 122
// continue ;
3437: GO 2785
// end ; if not cr then
3439: LD_VAR 0 10
3443: NOT
3444: IFFALSE 3460
// begin SetTag ( i , 0 ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: LD_INT 0
3453: PPUSH
3454: CALL_OW 109
// continue ;
3458: GO 2785
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3460: LD_VAR 0 1
3464: PPUSH
3465: CALL_OW 314
3469: NOT
3470: IFFALSE 3525
3472: PUSH
3473: LD_INT 81
3475: PUSH
3476: LD_VAR 0 5
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 92
3487: PUSH
3488: LD_VAR 0 10
3492: PUSH
3493: LD_INT 1
3495: ARRAY
3496: PUSH
3497: LD_VAR 0 10
3501: PUSH
3502: LD_INT 2
3504: ARRAY
3505: PUSH
3506: LD_INT 12
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 69
3523: NOT
3524: AND
3525: IFFALSE 3554
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3527: LD_VAR 0 1
3531: PPUSH
3532: LD_VAR 0 10
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: PPUSH
3541: LD_VAR 0 10
3545: PUSH
3546: LD_INT 2
3548: ARRAY
3549: PPUSH
3550: CALL_OW 117
// end ; end ;
3554: GO 2785
3556: POP
3557: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3558: LD_ADDR_VAR 0 12
3562: PUSH
3563: LD_EXP 27
3567: PPUSH
3568: LD_INT 2
3570: PUSH
3571: LD_INT 25
3573: PUSH
3574: LD_INT 1
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 25
3583: PUSH
3584: LD_INT 5
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 50
3598: PUSH
3599: EMPTY
3600: LIST
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PPUSH
3606: CALL_OW 72
3610: PUSH
3611: LD_EXP 33
3615: UNION
3616: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3617: LD_ADDR_VAR 0 14
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 81
3627: PUSH
3628: LD_VAR 0 5
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: ST_TO_ADDR
// if sol then
3642: LD_VAR 0 12
3646: IFFALSE 4209
// begin if enemyInBase then
3648: LD_VAR 0 14
3652: IFFALSE 3797
// begin for i in sol do
3654: LD_ADDR_VAR 0 1
3658: PUSH
3659: LD_VAR 0 12
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3793
// begin tw := IsInUnit ( i ) ;
3667: LD_ADDR_VAR 0 9
3671: PUSH
3672: LD_VAR 0 1
3676: PPUSH
3677: CALL_OW 310
3681: ST_TO_ADDR
// if tw then
3682: LD_VAR 0 9
3686: IFFALSE 3767
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3688: LD_VAR 0 9
3692: PUSH
3693: LD_INT 22
3695: PUSH
3696: LD_VAR 0 5
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 101
3707: PUSH
3708: LD_INT 2
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: LD_INT 30
3720: PUSH
3721: LD_INT 32
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 30
3730: PUSH
3731: LD_INT 31
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: PPUSH
3748: CALL_OW 69
3752: IN
3753: NOT
3754: IFFALSE 3765
// ComExitBuilding ( i ) ;
3756: LD_VAR 0 1
3760: PPUSH
3761: CALL_OW 122
// end else
3765: GO 3791
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3767: LD_VAR 0 1
3771: PPUSH
3772: LD_VAR 0 14
3776: PPUSH
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 74
3786: PPUSH
3787: CALL_OW 115
// end ;
3791: GO 3664
3793: POP
3794: POP
// end else
3795: GO 4209
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3797: LD_ADDR_VAR 0 15
3801: PUSH
3802: LD_INT 1
3804: PPUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 62
3810: PUSH
3811: EMPTY
3812: LIST
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: LD_INT 30
3823: PUSH
3824: LD_INT 32
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: LD_INT 30
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PUSH
3841: LD_INT 30
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: PUSH
3851: LD_INT 30
3853: PUSH
3854: LD_INT 31
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PPUSH
3872: CALL_OW 70
3876: ST_TO_ADDR
// if empty then
3877: LD_VAR 0 15
3881: IFFALSE 3898
// empty := ReverseArray ( empty ) ;
3883: LD_ADDR_VAR 0 15
3887: PUSH
3888: LD_VAR 0 15
3892: PPUSH
3893: CALL 54398 0 1
3897: ST_TO_ADDR
// for i in sol do
3898: LD_ADDR_VAR 0 1
3902: PUSH
3903: LD_VAR 0 12
3907: PUSH
3908: FOR_IN
3909: IFFALSE 4207
// begin tag := GetTag ( i ) ;
3911: LD_ADDR_VAR 0 8
3915: PUSH
3916: LD_VAR 0 1
3920: PPUSH
3921: CALL_OW 110
3925: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3926: LD_VAR 0 1
3930: PPUSH
3931: CALL_OW 256
3935: PUSH
3936: LD_INT 1000
3938: LESS
3939: IFFALSE 3951
3941: PUSH
3942: LD_VAR 0 8
3946: PUSH
3947: LD_INT 1
3949: NONEQUAL
3950: AND
3951: IFFALSE 4003
// begin SetTag ( i , tHeal ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_EXP 30
3974: PUSH
3975: LD_INT 1
3977: ARRAY
3978: PPUSH
3979: LD_EXP 30
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: CALL_OW 111
// AddComHold ( i ) ;
3992: LD_VAR 0 1
3996: PPUSH
3997: CALL_OW 200
// continue ;
4001: GO 3908
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 256
4012: PUSH
4013: LD_INT 1000
4015: EQUAL
4016: IFFALSE 4028
4018: PUSH
4019: LD_VAR 0 8
4023: PUSH
4024: LD_INT 1
4026: EQUAL
4027: AND
4028: IFFALSE 4044
// begin SetTag ( i , 0 ) ;
4030: LD_VAR 0 1
4034: PPUSH
4035: LD_INT 0
4037: PPUSH
4038: CALL_OW 109
// continue ;
4042: GO 3908
// end ; if not IsInArea ( i , amBaseArea ) and not IsInUnit ( i ) then
4044: LD_VAR 0 1
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: CALL_OW 308
4056: NOT
4057: IFFALSE 4071
4059: PUSH
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 310
4069: NOT
4070: AND
4071: IFFALSE 4085
// ComMoveToArea ( i , amBaseArea ) ;
4073: LD_VAR 0 1
4077: PPUSH
4078: LD_INT 1
4080: PPUSH
4081: CALL_OW 113
// if HasTask ( i ) then
4085: LD_VAR 0 1
4089: PPUSH
4090: CALL_OW 314
4094: IFFALSE 4098
// continue ;
4096: GO 3908
// if not IsInUnit ( i ) and not tag and empty then
4098: LD_VAR 0 1
4102: PPUSH
4103: CALL_OW 310
4107: NOT
4108: IFFALSE 4117
4110: PUSH
4111: LD_VAR 0 8
4115: NOT
4116: AND
4117: IFFALSE 4125
4119: PUSH
4120: LD_VAR 0 15
4124: AND
4125: IFFALSE 4205
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4127: LD_VAR 0 1
4131: PPUSH
4132: LD_VAR 0 15
4136: PUSH
4137: LD_INT 1
4139: ARRAY
4140: PPUSH
4141: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4145: LD_VAR 0 15
4149: PUSH
4150: LD_INT 1
4152: ARRAY
4153: PPUSH
4154: CALL_OW 266
4158: PUSH
4159: LD_INT 5
4161: EQUAL
4162: IFFALSE 4173
4164: PUSH
4165: LD_INT 50
4167: PPUSH
4168: CALL_OW 13
4172: AND
4173: IFFALSE 4187
// AddComChangeProfession ( i , class_sniper ) ;
4175: LD_VAR 0 1
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4187: LD_ADDR_VAR 0 15
4191: PUSH
4192: LD_VAR 0 15
4196: PPUSH
4197: LD_INT 1
4199: PPUSH
4200: CALL_OW 3
4204: ST_TO_ADDR
// end ; end ;
4205: GO 3908
4207: POP
4208: POP
// end ; end ; end ;
4209: PPOPN 18
4211: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4212: LD_EXP 34
4216: PPUSH
4217: CALL_OW 302
4221: IFFALSE 4229
4223: PUSH
4224: LD_EXP 3
4228: AND
4229: IFFALSE 4521
4231: GO 4233
4233: DISABLE
4234: LD_INT 0
4236: PPUSH
4237: PPUSH
// begin enable ;
4238: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4239: LD_ADDR_VAR 0 2
4243: PUSH
4244: LD_INT 1
4246: PPUSH
4247: LD_INT 81
4249: PUSH
4250: LD_INT 1
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 50
4259: PUSH
4260: EMPTY
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 70
4271: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4272: LD_ADDR_VAR 0 1
4276: PUSH
4277: LD_INT 17
4279: PPUSH
4280: CALL_OW 435
4284: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4285: LD_EXP 34
4289: PPUSH
4290: CALL_OW 261
4294: PUSH
4295: LD_INT 10
4297: LESS
4298: IFFALSE 4315
4300: PUSH
4301: LD_INT 2
4303: PPUSH
4304: LD_EXP 34
4308: PPUSH
4309: CALL_OW 292
4313: NOT
4314: AND
4315: IFFALSE 4332
4317: PUSH
4318: LD_EXP 34
4322: PPUSH
4323: CALL_OW 262
4327: PUSH
4328: LD_INT 1
4330: EQUAL
4331: AND
4332: IFFALSE 4346
// SetFuel ( amCargo , 100 ) ;
4334: LD_EXP 34
4338: PPUSH
4339: LD_INT 100
4341: PPUSH
4342: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4346: LD_EXP 34
4350: PPUSH
4351: CALL_OW 314
4355: NOT
4356: IFFALSE 4376
4358: PUSH
4359: LD_EXP 34
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 289
4371: PUSH
4372: LD_INT 100
4374: LESS
4375: AND
4376: IFFALSE 4385
4378: PUSH
4379: LD_VAR 0 2
4383: NOT
4384: AND
4385: IFFALSE 4451
// begin if cr then
4387: LD_VAR 0 1
4391: IFFALSE 4422
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4393: LD_EXP 34
4397: PPUSH
4398: LD_VAR 0 1
4402: PUSH
4403: LD_INT 1
4405: ARRAY
4406: PPUSH
4407: LD_VAR 0 1
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 117
4420: GO 4449
// if not IsInArea ( amCargo , cratesWestArea ) then
4422: LD_EXP 34
4426: PPUSH
4427: LD_INT 17
4429: PPUSH
4430: CALL_OW 308
4434: NOT
4435: IFFALSE 4449
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4437: LD_EXP 34
4441: PPUSH
4442: LD_INT 17
4444: PPUSH
4445: CALL_OW 113
// exit ;
4449: GO 4521
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4451: LD_VAR 0 2
4455: IFFALSE 4472
4457: PUSH
4458: LD_EXP 34
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: CALL_OW 308
4470: NOT
4471: AND
4472: IFFALSE 4491
// ComMoveXY ( amCargo , 93 , 137 ) else
4474: LD_EXP 34
4478: PPUSH
4479: LD_INT 93
4481: PPUSH
4482: LD_INT 137
4484: PPUSH
4485: CALL_OW 111
4489: GO 4521
// if GetCargo ( amCargo , mat_cans ) = 100 then
4491: LD_EXP 34
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: CALL_OW 289
4503: PUSH
4504: LD_INT 100
4506: EQUAL
4507: IFFALSE 4521
// ComGive ( amCargo , amBase ) ;
4509: LD_EXP 34
4513: PPUSH
4514: LD_INT 2
4516: PPUSH
4517: CALL_OW 161
// end ;
4521: PPOPN 2
4523: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4524: LD_EXP 3
4528: IFFALSE 4581
4530: PUSH
4531: LD_INT 22
4533: PUSH
4534: LD_INT 1
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 3
4543: PUSH
4544: LD_INT 60
4546: PUSH
4547: EMPTY
4548: LIST
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 50
4556: PUSH
4557: EMPTY
4558: LIST
4559: PUSH
4560: LD_INT 34
4562: PUSH
4563: LD_INT 13
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: AND
4581: IFFALSE 4631
4583: PUSH
4584: LD_INT 22
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: LD_INT 24
4599: PUSH
4600: LD_INT 1000
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 69
4630: AND
4631: IFFALSE 4864
4633: GO 4635
4635: DISABLE
4636: LD_INT 0
4638: PPUSH
4639: PPUSH
4640: PPUSH
// begin enable ;
4641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 24
4662: PUSH
4663: LD_INT 1000
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 69
4693: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4694: LD_ADDR_VAR 0 3
4698: PUSH
4699: LD_INT 22
4701: PUSH
4702: LD_INT 1
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_INT 3
4711: PUSH
4712: LD_INT 24
4714: PUSH
4715: LD_INT 600
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 21
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 69
4745: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4746: LD_ADDR_VAR 0 1
4750: PUSH
4751: LD_INT 22
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 60
4766: PUSH
4767: EMPTY
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 50
4776: PUSH
4777: EMPTY
4778: LIST
4779: PUSH
4780: LD_INT 34
4782: PUSH
4783: LD_INT 13
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 69
4800: PUSH
4801: FOR_IN
4802: IFFALSE 4862
// begin if tmp2 then
4804: LD_VAR 0 3
4808: IFFALSE 4836
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4810: LD_VAR 0 1
4814: PPUSH
4815: LD_VAR 0 3
4819: PPUSH
4820: LD_VAR 0 1
4824: PPUSH
4825: CALL_OW 74
4829: PPUSH
4830: CALL_OW 130
4834: GO 4860
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_VAR 0 2
4845: PPUSH
4846: LD_VAR 0 1
4850: PPUSH
4851: CALL_OW 74
4855: PPUSH
4856: CALL_OW 130
// end ;
4860: GO 4801
4862: POP
4863: POP
// end ;
4864: PPOPN 3
4866: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4867: LD_EXP 35
4871: IFFALSE 4879
4873: PUSH
4874: LD_EXP 19
4878: AND
4879: IFFALSE 4888
4881: PUSH
4882: LD_EXP 11
4886: NOT
4887: AND
4888: IFFALSE 5213
4890: GO 4892
4892: DISABLE
4893: LD_INT 0
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
4899: PPUSH
4900: PPUSH
4901: PPUSH
// begin enable ;
4902: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: LD_INT 30
4910: PUSH
4911: LD_INT 31
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 32
4920: PUSH
4921: LD_INT 33
4923: PUSH
4924: LD_INT 34
4926: PUSH
4927: LD_INT 35
4929: PUSH
4930: LD_INT 33
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 36
4942: PUSH
4943: LD_INT 37
4945: PUSH
4946: LD_INT 38
4948: PUSH
4949: LD_INT 39
4951: PUSH
4952: LD_INT 40
4954: PUSH
4955: LD_INT 41
4957: PUSH
4958: LD_INT 42
4960: PUSH
4961: LD_INT 43
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// for i in amPatrol do
4979: LD_ADDR_VAR 0 1
4983: PUSH
4984: LD_EXP 35
4988: PUSH
4989: FOR_IN
4990: IFFALSE 5211
// begin if See ( 2 , i ) then
4992: LD_INT 2
4994: PPUSH
4995: LD_VAR 0 1
4999: PPUSH
5000: CALL_OW 292
5004: IFFALSE 5107
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
5006: LD_ADDR_VAR 0 7
5010: PUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PPUSH
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 74
5035: ST_TO_ADDR
// if enemy then
5036: LD_VAR 0 7
5040: IFFALSE 5107
// begin x := GetX ( enemy ) ;
5042: LD_ADDR_VAR 0 4
5046: PUSH
5047: LD_VAR 0 7
5051: PPUSH
5052: CALL_OW 250
5056: ST_TO_ADDR
// y := GetY ( enemy ) ;
5057: LD_ADDR_VAR 0 5
5061: PUSH
5062: LD_VAR 0 7
5066: PPUSH
5067: CALL_OW 251
5071: ST_TO_ADDR
// if ValidHex ( x , y ) then
5072: LD_VAR 0 4
5076: PPUSH
5077: LD_VAR 0 5
5081: PPUSH
5082: CALL_OW 488
5086: IFFALSE 5107
// ComAgressiveMove ( i , x , y ) ;
5088: LD_VAR 0 1
5092: PPUSH
5093: LD_VAR 0 4
5097: PPUSH
5098: LD_VAR 0 5
5102: PPUSH
5103: CALL_OW 114
// end ; end ; if HasTask ( i ) then
5107: LD_VAR 0 1
5111: PPUSH
5112: CALL_OW 314
5116: IFFALSE 5120
// continue ;
5118: GO 4989
// tag := GetTag ( i ) ;
5120: LD_ADDR_VAR 0 6
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 110
5134: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5135: LD_ADDR_VAR 0 2
5139: PUSH
5140: DOUBLE
5141: LD_INT 1
5143: DEC
5144: ST_TO_ADDR
5145: LD_VAR 0 3
5149: PUSH
5150: LD_VAR 0 6
5154: ARRAY
5155: PUSH
5156: FOR_TO
5157: IFFALSE 5207
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5159: LD_VAR 0 1
5163: PPUSH
5164: LD_VAR 0 3
5168: PUSH
5169: LD_VAR 0 6
5173: ARRAY
5174: PUSH
5175: LD_VAR 0 2
5179: ARRAY
5180: PPUSH
5181: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5185: LD_VAR 0 1
5189: PPUSH
5190: LD_INT 175
5192: PPUSH
5193: LD_INT 385
5195: PPUSH
5196: CALL_OW 12
5200: PPUSH
5201: CALL_OW 202
// end ;
5205: GO 5156
5207: POP
5208: POP
// end ;
5209: GO 4989
5211: POP
5212: POP
// end ;
5213: PPOPN 7
5215: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5216: LD_EXP 32
5220: PPUSH
5221: CALL 23376 0 1
5225: PUSH
5226: LD_INT 5
5228: LESS
5229: IFFALSE 5237
5231: PUSH
5232: LD_EXP 3
5236: AND
5237: IFFALSE 5245
5239: PUSH
5240: LD_EXP 8
5244: AND
5245: IFFALSE 5253
5247: PUSH
5248: LD_EXP 7
5252: AND
5253: IFFALSE 5513
5255: GO 5257
5257: DISABLE
5258: LD_INT 0
5260: PPUSH
5261: PPUSH
5262: PPUSH
// begin enable ;
5263: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5264: LD_ADDR_VAR 0 2
5268: PUSH
5269: LD_INT 3
5271: PUSH
5272: LD_INT 9
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: LD_INT 4
5281: PUSH
5282: LD_INT 9
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 4
5291: PUSH
5292: LD_INT 6
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 3
5301: PUSH
5302: LD_INT 5
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 2
5311: PUSH
5312: LD_INT 4
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: LD_INT 2
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: ST_TO_ADDR
// if americanWave > [ 5 , 6 , 7 , 8 ] [ Difficulty ] then
5337: LD_EXP 22
5341: PUSH
5342: LD_INT 5
5344: PUSH
5345: LD_INT 6
5347: PUSH
5348: LD_INT 7
5350: PUSH
5351: LD_INT 8
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: PUSH
5360: LD_OWVAR 67
5364: ARRAY
5365: GREATER
5366: IFFALSE 5397
// americanWave := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5368: LD_ADDR_EXP 22
5372: PUSH
5373: LD_INT 5
5375: PUSH
5376: LD_INT 6
5378: PUSH
5379: LD_INT 7
5381: PUSH
5382: LD_INT 8
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: LD_OWVAR 67
5395: ARRAY
5396: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + americanWave do
5397: LD_ADDR_VAR 0 1
5401: PUSH
5402: DOUBLE
5403: LD_INT 1
5405: DEC
5406: ST_TO_ADDR
5407: LD_INT 3
5409: PUSH
5410: LD_INT 4
5412: PUSH
5413: LD_INT 5
5415: PUSH
5416: LD_INT 6
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: LD_OWVAR 67
5429: ARRAY
5430: PUSH
5431: LD_EXP 22
5435: PLUS
5436: PUSH
5437: FOR_TO
5438: IFFALSE 5511
// begin part := parts [ rand ( 1 , parts ) ] ;
5440: LD_ADDR_VAR 0 3
5444: PUSH
5445: LD_VAR 0 2
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_VAR 0 2
5457: PPUSH
5458: CALL_OW 12
5462: ARRAY
5463: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5464: LD_ADDR_EXP 29
5468: PUSH
5469: LD_EXP 29
5473: PPUSH
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PUSH
5483: LD_INT 1
5485: PUSH
5486: LD_INT 2
5488: PUSH
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PPUSH
5504: CALL 59308 0 2
5508: ST_TO_ADDR
5509: GO 5437
5511: POP
5512: POP
// end ;
5513: PPOPN 3
5515: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5516: LD_EXP 11
5520: NOT
5521: IFFALSE 5534
5523: PUSH
5524: LD_EXP 32
5528: PPUSH
5529: CALL 23376 0 1
5533: AND
5534: IFFALSE 5542
5536: PUSH
5537: LD_EXP 8
5541: AND
5542: IFFALSE 5550
5544: PUSH
5545: LD_EXP 7
5549: AND
5550: IFFALSE 5899
5552: GO 5554
5554: DISABLE
5555: LD_INT 0
5557: PPUSH
5558: PPUSH
5559: PPUSH
// begin enable ;
5560: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_EXP 32
5570: PPUSH
5571: LD_INT 61
5573: PUSH
5574: EMPTY
5575: LIST
5576: PUSH
5577: LD_INT 50
5579: PUSH
5580: EMPTY
5581: LIST
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PPUSH
5587: CALL_OW 72
5591: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5592: LD_ADDR_EXP 32
5596: PUSH
5597: LD_EXP 32
5601: PUSH
5602: LD_VAR 0 2
5606: DIFF
5607: ST_TO_ADDR
// if not tmp then
5608: LD_VAR 0 2
5612: NOT
5613: IFFALSE 5617
// exit ;
5615: GO 5899
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_VAR 0 2
5626: PPUSH
5627: LD_INT 34
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 72
5641: ST_TO_ADDR
// if tmp2 then
5642: LD_VAR 0 3
5646: IFFALSE 5664
// tmp := tmp diff tmp2 ;
5648: LD_ADDR_VAR 0 2
5652: PUSH
5653: LD_VAR 0 2
5657: PUSH
5658: LD_VAR 0 3
5662: DIFF
5663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5671: LD_ADDR_VAR 0 2
5675: PUSH
5676: LD_VAR 0 2
5680: PPUSH
5681: LD_INT 50
5683: PUSH
5684: EMPTY
5685: LIST
5686: PPUSH
5687: CALL_OW 72
5691: ST_TO_ADDR
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5751
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5705: LD_VAR 0 1
5709: PPUSH
5710: LD_INT 187
5712: PUSH
5713: LD_INT 114
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 203
5722: PUSH
5723: LD_INT 113
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 218
5732: PUSH
5733: LD_INT 108
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL 62074 0 2
5749: GO 5702
5751: POP
5752: POP
// tmp2 := UnitFilter ( tmp2 , [ f_ok ] ) ;
5753: LD_ADDR_VAR 0 3
5757: PUSH
5758: LD_VAR 0 3
5762: PPUSH
5763: LD_INT 50
5765: PUSH
5766: EMPTY
5767: LIST
5768: PPUSH
5769: CALL_OW 72
5773: ST_TO_ADDR
// for i in tmp2 do
5774: LD_ADDR_VAR 0 1
5778: PUSH
5779: LD_VAR 0 3
5783: PUSH
5784: FOR_IN
5785: IFFALSE 5875
// if GetDistUnitXY ( i , 242 , 105 ) > 12 then
5787: LD_VAR 0 1
5791: PPUSH
5792: LD_INT 242
5794: PPUSH
5795: LD_INT 105
5797: PPUSH
5798: CALL_OW 297
5802: PUSH
5803: LD_INT 12
5805: GREATER
5806: IFFALSE 5825
// ComMoveXY ( i , 242 , 105 ) else
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 242
5815: PPUSH
5816: LD_INT 105
5818: PPUSH
5819: CALL_OW 111
5823: GO 5873
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_type , unit_human ] ] ) , i ) ) ;
5825: LD_VAR 0 1
5829: PPUSH
5830: LD_INT 81
5832: PUSH
5833: LD_INT 1
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 21
5842: PUSH
5843: LD_INT 1
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 69
5858: PPUSH
5859: LD_VAR 0 1
5863: PPUSH
5864: CALL_OW 74
5868: PPUSH
5869: CALL_OW 115
5873: GO 5784
5875: POP
5876: POP
// until not tmp ;
5877: LD_VAR 0 2
5881: NOT
5882: IFFALSE 5664
// americanWave := Inc ( americanWave ) ;
5884: LD_ADDR_EXP 22
5888: PUSH
5889: LD_EXP 22
5893: PPUSH
5894: CALL 60681 0 1
5898: ST_TO_ADDR
// end ; end_of_file
5899: PPOPN 3
5901: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5902: LD_INT 0
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
// uc_side := 8 ;
5911: LD_ADDR_OWVAR 20
5915: PUSH
5916: LD_INT 8
5918: ST_TO_ADDR
// uc_nation := nation_arabian ;
5919: LD_ADDR_OWVAR 21
5923: PUSH
5924: LD_INT 2
5926: ST_TO_ADDR
// legForces := [ ] ;
5927: LD_ADDR_EXP 37
5931: PUSH
5932: EMPTY
5933: ST_TO_ADDR
// legEForces := [ ] ;
5934: LD_ADDR_EXP 38
5938: PUSH
5939: EMPTY
5940: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5941: LD_ADDR_EXP 39
5945: PUSH
5946: LD_INT 8
5948: PPUSH
5949: LD_INT 2
5951: PPUSH
5952: LD_INT 1
5954: PPUSH
5955: CALL 21299 0 3
5959: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5960: LD_ADDR_EXP 40
5964: PUSH
5965: LD_INT 13
5967: PUSH
5968: LD_INT 1
5970: PUSH
5971: LD_INT 2
5973: PUSH
5974: LD_INT 32
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: PUSH
5983: EMPTY
5984: LIST
5985: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5986: LD_ADDR_EXP 41
5990: PUSH
5991: LD_INT 195
5993: PUSH
5994: LD_INT 15
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: ST_TO_ADDR
// legBuildings := [ ] ;
6001: LD_ADDR_EXP 42
6005: PUSH
6006: EMPTY
6007: ST_TO_ADDR
// legTanks := [ ] ;
6008: LD_ADDR_EXP 43
6012: PUSH
6013: EMPTY
6014: ST_TO_ADDR
// legRTanks := [ ] ;
6015: LD_ADDR_EXP 44
6019: PUSH
6020: EMPTY
6021: ST_TO_ADDR
// legCargo := 0 ;
6022: LD_ADDR_EXP 45
6026: PUSH
6027: LD_INT 0
6029: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
6030: LD_ADDR_VAR 0 7
6034: PUSH
6035: LD_INT 219
6037: PUSH
6038: LD_INT 31
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 166
6047: PUSH
6048: LD_INT 31
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: ST_TO_ADDR
// for i in sources do
6059: LD_ADDR_VAR 0 2
6063: PUSH
6064: LD_VAR 0 7
6068: PUSH
6069: FOR_IN
6070: IFFALSE 6099
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 8 ) ;
6072: LD_VAR 0 2
6076: PUSH
6077: LD_INT 1
6079: ARRAY
6080: PPUSH
6081: LD_VAR 0 2
6085: PUSH
6086: LD_INT 2
6088: ARRAY
6089: PPUSH
6090: LD_INT 8
6092: PPUSH
6093: CALL_OW 441
6097: GO 6069
6099: POP
6100: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
6101: LD_INT 38
6103: PPUSH
6104: CALL_OW 274
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: LD_INT 650
6114: PPUSH
6115: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
6119: LD_INT 38
6121: PPUSH
6122: CALL_OW 274
6126: PPUSH
6127: LD_INT 2
6129: PPUSH
6130: LD_INT 120
6132: PPUSH
6133: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
6137: LD_INT 38
6139: PPUSH
6140: CALL_OW 274
6144: PPUSH
6145: LD_INT 3
6147: PPUSH
6148: LD_INT 50
6150: PPUSH
6151: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
6155: LD_ADDR_VAR 0 6
6159: PUSH
6160: LD_INT 6
6162: PUSH
6163: LD_INT 7
6165: PUSH
6166: LD_INT 8
6168: PUSH
6169: LD_INT 9
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: LD_OWVAR 67
6182: ARRAY
6183: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
6184: LD_ADDR_EXP 36
6188: PUSH
6189: LD_STRING Farmer
6191: PPUSH
6192: LD_INT 0
6194: PPUSH
6195: LD_STRING 
6197: PPUSH
6198: CALL 21152 0 3
6202: ST_TO_ADDR
// for i := 1 to 4 do
6203: LD_ADDR_VAR 0 2
6207: PUSH
6208: DOUBLE
6209: LD_INT 1
6211: DEC
6212: ST_TO_ADDR
6213: LD_INT 4
6215: PUSH
6216: FOR_TO
6217: IFFALSE 6734
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
6219: LD_ADDR_VAR 0 3
6223: PUSH
6224: DOUBLE
6225: LD_INT 1
6227: DEC
6228: ST_TO_ADDR
6229: LD_INT 7
6231: PUSH
6232: LD_INT 8
6234: PUSH
6235: LD_INT 9
6237: PUSH
6238: LD_INT 11
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_OWVAR 67
6251: ARRAY
6252: PUSH
6253: LD_INT 3
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: LD_INT 5
6261: PUSH
6262: LD_INT 5
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_OWVAR 67
6275: ARRAY
6276: PUSH
6277: LD_INT 3
6279: PUSH
6280: LD_INT 2
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_OWVAR 67
6302: ARRAY
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PUSH
6310: LD_VAR 0 2
6314: ARRAY
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6730
// begin PrepareHuman ( false , i , skill ) ;
6319: LD_INT 0
6321: PPUSH
6322: LD_VAR 0 2
6326: PPUSH
6327: LD_VAR 0 6
6331: PPUSH
6332: CALL_OW 380
// un := CreateHuman ;
6336: LD_ADDR_VAR 0 5
6340: PUSH
6341: CALL_OW 44
6345: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6346: LD_ADDR_EXP 37
6350: PUSH
6351: LD_EXP 37
6355: PPUSH
6356: LD_VAR 0 5
6360: PPUSH
6361: CALL 59308 0 2
6365: ST_TO_ADDR
// case i of 1 :
6366: LD_VAR 0 2
6370: PUSH
6371: LD_INT 1
6373: DOUBLE
6374: EQUAL
6375: IFTRUE 6379
6377: GO 6448
6379: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6380: LD_ADDR_VAR 0 4
6384: PUSH
6385: LD_INT 22
6387: PUSH
6388: LD_INT 8
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 30
6400: PUSH
6401: LD_INT 32
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: LD_INT 30
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 3
6425: PUSH
6426: LD_INT 62
6428: PUSH
6429: EMPTY
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL_OW 69
6445: ST_TO_ADDR
6446: GO 6627
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6485
6456: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_INT 38
6464: PPUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 62
6470: PUSH
6471: EMPTY
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PPUSH
6478: CALL_OW 72
6482: ST_TO_ADDR
6483: GO 6627
6485: LD_INT 3
6487: DOUBLE
6488: EQUAL
6489: IFTRUE 6493
6491: GO 6567
6493: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6494: LD_ADDR_VAR 0 4
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_INT 8
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 2
6511: PUSH
6512: LD_INT 30
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: LD_INT 30
6524: PUSH
6525: LD_INT 36
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 3
6539: PUSH
6540: LD_INT 62
6542: PUSH
6543: EMPTY
6544: LIST
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: PPUSH
6555: CALL_OW 69
6559: PPUSH
6560: CALL 54398 0 1
6564: ST_TO_ADDR
6565: GO 6627
6567: LD_INT 4
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6575
6573: GO 6626
6575: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6576: LD_ADDR_VAR 0 4
6580: PUSH
6581: LD_INT 22
6583: PUSH
6584: LD_INT 8
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 30
6593: PUSH
6594: LD_INT 8
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 3
6603: PUSH
6604: LD_INT 62
6606: PUSH
6607: EMPTY
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PPUSH
6619: CALL_OW 69
6623: ST_TO_ADDR
6624: GO 6627
6626: POP
// if b then
6627: LD_VAR 0 4
6631: IFFALSE 6707
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6633: LD_VAR 0 4
6637: PUSH
6638: LD_INT 1
6640: ARRAY
6641: PPUSH
6642: CALL_OW 266
6646: PUSH
6647: LD_INT 5
6649: EQUAL
6650: IFFALSE 6687
// if Prob ( 50 ) then
6652: LD_INT 50
6654: PPUSH
6655: CALL_OW 13
6659: IFFALSE 6675
// SetClass ( un , class_mortar ) else
6661: LD_VAR 0 5
6665: PPUSH
6666: LD_INT 8
6668: PPUSH
6669: CALL_OW 336
6673: GO 6687
// SetClass ( un , class_sniper ) ;
6675: LD_VAR 0 5
6679: PPUSH
6680: LD_INT 5
6682: PPUSH
6683: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6687: LD_VAR 0 5
6691: PPUSH
6692: LD_VAR 0 4
6696: PUSH
6697: LD_INT 1
6699: ARRAY
6700: PPUSH
6701: CALL_OW 52
// end else
6705: GO 6728
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6707: LD_VAR 0 5
6711: PPUSH
6712: LD_INT 188
6714: PPUSH
6715: LD_INT 21
6717: PPUSH
6718: LD_INT 4
6720: PPUSH
6721: LD_INT 0
6723: PPUSH
6724: CALL_OW 50
// end ;
6728: GO 6316
6730: POP
6731: POP
6732: GO 6216
6734: POP
6735: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6736: LD_ADDR_VAR 0 4
6740: PUSH
6741: LD_INT 22
6743: PUSH
6744: LD_INT 8
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 2
6753: PUSH
6754: LD_INT 30
6756: PUSH
6757: LD_INT 32
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 30
6766: PUSH
6767: LD_INT 5
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: LD_INT 62
6784: PUSH
6785: EMPTY
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: ST_TO_ADDR
// if b then
6802: LD_VAR 0 4
6806: IFFALSE 6873
// begin for i in b do
6808: LD_ADDR_VAR 0 2
6812: PUSH
6813: LD_VAR 0 4
6817: PUSH
6818: FOR_IN
6819: IFFALSE 6871
// begin PrepareApemanSoldier ( ) ;
6821: CALL 55231 0 0
// un := CreateHuman ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: CALL_OW 44
6834: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6835: LD_ADDR_EXP 37
6839: PUSH
6840: LD_EXP 37
6844: PPUSH
6845: LD_VAR 0 5
6849: PPUSH
6850: CALL 59308 0 2
6854: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6855: LD_VAR 0 5
6859: PPUSH
6860: LD_VAR 0 2
6864: PPUSH
6865: CALL_OW 52
// end ;
6869: GO 6818
6871: POP
6872: POP
// end ; for i := 1 to 2 do
6873: LD_ADDR_VAR 0 2
6877: PUSH
6878: DOUBLE
6879: LD_INT 1
6881: DEC
6882: ST_TO_ADDR
6883: LD_INT 2
6885: PUSH
6886: FOR_TO
6887: IFFALSE 7014
// begin uc_nation := nation_arabian ;
6889: LD_ADDR_OWVAR 21
6893: PUSH
6894: LD_INT 2
6896: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6897: LD_INT 13
6899: PPUSH
6900: LD_INT 2
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: LD_INT 31
6908: PPUSH
6909: LD_INT 100
6911: PPUSH
6912: CALL 26138 0 5
// un := CreateVehicle ;
6916: LD_ADDR_VAR 0 5
6920: PUSH
6921: CALL_OW 45
6925: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6926: LD_VAR 0 5
6930: PPUSH
6931: LD_INT 0
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6946: LD_VAR 0 5
6950: PPUSH
6951: LD_INT 199
6953: PPUSH
6954: LD_INT 24
6956: PPUSH
6957: LD_INT 4
6959: PPUSH
6960: LD_INT 0
6962: PPUSH
6963: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6967: LD_INT 0
6969: PPUSH
6970: LD_INT 8
6972: PUSH
6973: LD_INT 9
6975: PUSH
6976: LD_INT 10
6978: PUSH
6979: LD_INT 10
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_OWVAR 67
6992: ARRAY
6993: PPUSH
6994: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6998: CALL_OW 44
7002: PPUSH
7003: LD_VAR 0 5
7007: PPUSH
7008: CALL_OW 52
// end ;
7012: GO 6886
7014: POP
7015: POP
// end ;
7016: LD_VAR 0 1
7020: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , mech , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
7021: LD_EXP 4
7025: IFFALSE 7038
7027: PUSH
7028: LD_EXP 37
7032: PPUSH
7033: CALL 23376 0 1
7037: AND
7038: IFFALSE 9587
7040: GO 7042
7042: DISABLE
7043: LD_INT 0
7045: PPUSH
7046: PPUSH
7047: PPUSH
7048: PPUSH
7049: PPUSH
7050: PPUSH
7051: PPUSH
7052: PPUSH
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
7058: PPUSH
7059: PPUSH
7060: PPUSH
7061: PPUSH
7062: PPUSH
7063: PPUSH
// begin enable ;
7064: ENABLE
// side := 8 ;
7065: LD_ADDR_VAR 0 5
7069: PUSH
7070: LD_INT 8
7072: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
7073: LD_ADDR_VAR 0 3
7077: PUSH
7078: LD_INT 22
7080: PUSH
7081: LD_VAR 0 5
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 33
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 50
7102: PUSH
7103: EMPTY
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 61
7111: PUSH
7112: EMPTY
7113: LIST
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
7130: LD_VAR 0 3
7134: IFFALSE 7180
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_VAR 0 5
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 50
7151: PUSH
7152: EMPTY
7153: LIST
7154: PUSH
7155: LD_INT 34
7157: PUSH
7158: LD_INT 31
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: PPUSH
7170: CALL_OW 69
7174: PPUSH
7175: CALL 23376 0 1
7179: AND
7180: IFFALSE 7208
// for i in remote do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_VAR 0 3
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7206
// Connect ( i ) ;
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL 29620 0 1
7204: GO 7192
7206: POP
7207: POP
// if legTech then
7208: LD_EXP 39
7212: IFFALSE 7368
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7214: LD_ADDR_VAR 0 6
7218: PUSH
7219: LD_INT 22
7221: PUSH
7222: LD_VAR 0 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 50
7233: PUSH
7234: EMPTY
7235: LIST
7236: PUSH
7237: LD_INT 2
7239: PUSH
7240: LD_INT 30
7242: PUSH
7243: LD_INT 6
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 30
7252: PUSH
7253: LD_INT 7
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 30
7262: PUSH
7263: LD_INT 8
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 69
7285: ST_TO_ADDR
// if lab then
7286: LD_VAR 0 6
7290: IFFALSE 7368
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7292: LD_VAR 0 6
7296: PUSH
7297: LD_INT 1
7299: ARRAY
7300: PPUSH
7301: CALL_OW 461
7305: PUSH
7306: LD_INT 2
7308: EQUAL
7309: IFFALSE 7368
// begin for i in legTech do
7311: LD_ADDR_VAR 0 1
7315: PUSH
7316: LD_EXP 39
7320: PUSH
7321: FOR_IN
7322: IFFALSE 7366
// if CanBeResearched ( lab [ 1 ] , i ) then
7324: LD_VAR 0 6
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PPUSH
7333: LD_VAR 0 1
7337: PPUSH
7338: CALL_OW 430
7342: IFFALSE 7364
// begin ComResearch ( lab [ 1 ] , i ) ;
7344: LD_VAR 0 6
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 124
// break ;
7362: GO 7366
// end ;
7364: GO 7321
7366: POP
7367: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7368: LD_ADDR_VAR 0 17
7372: PUSH
7373: LD_INT 2
7375: PPUSH
7376: LD_INT 22
7378: PUSH
7379: LD_VAR 0 5
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 30
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 50
7400: PUSH
7401: EMPTY
7402: LIST
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 70
7413: ST_TO_ADDR
// if fac then
7414: LD_VAR 0 17
7418: IFFALSE 7796
// begin mech := UnitFilter ( legForces , [ [ f_tag , tMech ] , [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) ;
7420: LD_ADDR_VAR 0 12
7424: PUSH
7425: LD_EXP 37
7429: PPUSH
7430: LD_INT 120
7432: PUSH
7433: LD_INT 7
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 25
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 3
7452: PUSH
7453: LD_INT 54
7455: PUSH
7456: EMPTY
7457: LIST
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: LD_INT 55
7468: PUSH
7469: EMPTY
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PPUSH
7482: CALL_OW 72
7486: ST_TO_ADDR
// if mech and UnitsInside ( fac [ 1 ] ) < 6 then
7487: LD_VAR 0 12
7491: IFFALSE 7512
7493: PUSH
7494: LD_VAR 0 17
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: CALL_OW 313
7507: PUSH
7508: LD_INT 6
7510: LESS
7511: AND
7512: IFFALSE 7532
// ComEnterUnit ( mech , fac [ 1 ] ) ;
7514: LD_VAR 0 12
7518: PPUSH
7519: LD_VAR 0 17
7523: PUSH
7524: LD_INT 1
7526: ARRAY
7527: PPUSH
7528: CALL_OW 120
// if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7532: LD_VAR 0 17
7536: PUSH
7537: LD_INT 1
7539: ARRAY
7540: PPUSH
7541: CALL_OW 461
7545: PUSH
7546: LD_INT 2
7548: EQUAL
7549: IFFALSE 7796
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7551: LD_ADDR_VAR 0 18
7555: PUSH
7556: LD_INT 2
7558: PPUSH
7559: LD_INT 2
7561: PUSH
7562: LD_INT 30
7564: PUSH
7565: LD_INT 32
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 33
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 35
7589: PUSH
7590: LD_INT 0
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 70
7605: ST_TO_ADDR
// if emptyTowers then
7606: LD_VAR 0 18
7610: IFFALSE 7658
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7612: LD_ADDR_VAR 0 19
7616: PUSH
7617: LD_VAR 0 18
7621: PUSH
7622: LD_INT 1
7624: ARRAY
7625: PPUSH
7626: LD_INT 2
7628: PPUSH
7629: CALL 31667 0 2
7633: ST_TO_ADDR
// if weapon then
7634: LD_VAR 0 19
7638: IFFALSE 7658
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7640: LD_VAR 0 18
7644: PUSH
7645: LD_INT 1
7647: ARRAY
7648: PPUSH
7649: LD_VAR 0 19
7653: PPUSH
7654: CALL_OW 148
// end ; if legConstructList then
7658: LD_EXP 40
7662: IFFALSE 7796
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7664: LD_VAR 0 17
7668: PUSH
7669: LD_INT 1
7671: ARRAY
7672: PPUSH
7673: LD_EXP 40
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PUSH
7682: LD_INT 1
7684: ARRAY
7685: PPUSH
7686: LD_EXP 40
7690: PUSH
7691: LD_INT 1
7693: ARRAY
7694: PUSH
7695: LD_INT 2
7697: ARRAY
7698: PPUSH
7699: LD_EXP 40
7703: PUSH
7704: LD_INT 1
7706: ARRAY
7707: PUSH
7708: LD_INT 3
7710: ARRAY
7711: PPUSH
7712: LD_EXP 40
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PUSH
7721: LD_INT 4
7723: ARRAY
7724: PPUSH
7725: CALL_OW 448
7729: IFFALSE 7796
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7731: LD_VAR 0 17
7735: PUSH
7736: LD_INT 1
7738: ARRAY
7739: PPUSH
7740: LD_EXP 40
7744: PUSH
7745: LD_INT 1
7747: ARRAY
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: LD_EXP 40
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PPUSH
7766: LD_EXP 40
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PUSH
7775: LD_INT 3
7777: ARRAY
7778: PPUSH
7779: LD_EXP 40
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PUSH
7788: LD_INT 4
7790: ARRAY
7791: PPUSH
7792: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7796: LD_ADDR_VAR 0 2
7800: PUSH
7801: LD_INT 2
7803: PPUSH
7804: LD_INT 21
7806: PUSH
7807: LD_INT 3
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 3
7816: PUSH
7817: LD_INT 57
7819: PUSH
7820: EMPTY
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: LD_INT 24
7832: PUSH
7833: LD_INT 1000
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: PPUSH
7849: CALL_OW 70
7853: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7854: LD_ADDR_VAR 0 10
7858: PUSH
7859: LD_INT 14
7861: PPUSH
7862: CALL_OW 435
7866: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7867: LD_ADDR_VAR 0 11
7871: PUSH
7872: LD_EXP 37
7876: PPUSH
7877: LD_INT 25
7879: PUSH
7880: LD_INT 4
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 50
7889: PUSH
7890: EMPTY
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PPUSH
7897: CALL_OW 72
7901: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7902: LD_ADDR_VAR 0 6
7906: PUSH
7907: LD_INT 2
7909: PPUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 30
7915: PUSH
7916: LD_INT 6
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 30
7925: PUSH
7926: LD_INT 7
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 30
7935: PUSH
7936: LD_INT 8
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 70
7953: ST_TO_ADDR
// if sci then
7954: LD_VAR 0 11
7958: IFFALSE 8117
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7960: LD_ADDR_VAR 0 14
7964: PUSH
7965: LD_EXP 37
7969: PPUSH
7970: LD_INT 95
7972: PUSH
7973: LD_INT 2
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 120
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 72
7998: ST_TO_ADDR
// if hurtUnits then
7999: LD_VAR 0 14
8003: IFFALSE 8064
// begin for i in sci do
8005: LD_ADDR_VAR 0 1
8009: PUSH
8010: LD_VAR 0 11
8014: PUSH
8015: FOR_IN
8016: IFFALSE 8060
// if IsInUnit ( i ) then
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 310
8027: IFFALSE 8040
// ComExitBuilding ( i ) else
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 122
8038: GO 8058
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8040: LD_VAR 0 1
8044: PPUSH
8045: LD_VAR 0 14
8049: PUSH
8050: LD_INT 1
8052: ARRAY
8053: PPUSH
8054: CALL_OW 128
8058: GO 8015
8060: POP
8061: POP
// end else
8062: GO 8117
// if lab then
8064: LD_VAR 0 6
8068: IFFALSE 8117
// begin for i in sci do
8070: LD_ADDR_VAR 0 1
8074: PUSH
8075: LD_VAR 0 11
8079: PUSH
8080: FOR_IN
8081: IFFALSE 8115
// if not IsInUnit ( i ) then
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 310
8092: NOT
8093: IFFALSE 8113
// ComEnterUnit ( i , lab [ 1 ] ) ;
8095: LD_VAR 0 1
8099: PPUSH
8100: LD_VAR 0 6
8104: PUSH
8105: LD_INT 1
8107: ARRAY
8108: PPUSH
8109: CALL_OW 120
8113: GO 8080
8115: POP
8116: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
8117: LD_ADDR_VAR 0 7
8121: PUSH
8122: LD_EXP 37
8126: PPUSH
8127: LD_INT 25
8129: PUSH
8130: LD_INT 2
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 72
8141: ST_TO_ADDR
// if eng then
8142: LD_VAR 0 7
8146: IFFALSE 8931
// begin for i in eng do
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_VAR 0 7
8157: PUSH
8158: FOR_IN
8159: IFFALSE 8929
// begin tag := GetTag ( i ) ;
8161: LD_ADDR_VAR 0 8
8165: PUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 110
8175: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 256
8185: PUSH
8186: LD_INT 800
8188: LESS
8189: IFFALSE 8201
8191: PUSH
8192: LD_VAR 0 8
8196: PUSH
8197: LD_INT 1
8199: NONEQUAL
8200: AND
8201: IFFALSE 8251
// begin SetTag ( i , tHeal ) ;
8203: LD_VAR 0 1
8207: PPUSH
8208: LD_INT 1
8210: PPUSH
8211: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8215: LD_VAR 0 1
8219: PPUSH
8220: LD_EXP 41
8224: PUSH
8225: LD_INT 1
8227: ARRAY
8228: PPUSH
8229: LD_EXP 41
8233: PUSH
8234: LD_INT 2
8236: ARRAY
8237: PPUSH
8238: CALL_OW 111
// AddComHold ( i ) ;
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8251: LD_VAR 0 8
8255: PUSH
8256: LD_INT 1
8258: EQUAL
8259: IFFALSE 8276
8261: PUSH
8262: LD_VAR 0 1
8266: PPUSH
8267: CALL_OW 256
8271: PUSH
8272: LD_INT 1000
8274: EQUAL
8275: AND
8276: IFFALSE 8290
// SetTag ( i , 0 ) ;
8278: LD_VAR 0 1
8282: PPUSH
8283: LD_INT 0
8285: PPUSH
8286: CALL_OW 109
// if not tag then
8290: LD_VAR 0 8
8294: NOT
8295: IFFALSE 8467
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8297: LD_ADDR_VAR 0 4
8301: PUSH
8302: LD_INT 2
8304: PPUSH
8305: LD_INT 57
8307: PUSH
8308: EMPTY
8309: LIST
8310: PPUSH
8311: CALL_OW 70
8315: ST_TO_ADDR
// if undone then
8316: LD_VAR 0 4
8320: IFFALSE 8342
// begin ComComplete ( i , undone [ 1 ] ) ;
8322: LD_VAR 0 1
8326: PPUSH
8327: LD_VAR 0 4
8331: PUSH
8332: LD_INT 1
8334: ARRAY
8335: PPUSH
8336: CALL 29512 0 2
// continue ;
8340: GO 8158
// end ; if cr or tmp or Count ( legBuildings ) then
8342: LD_VAR 0 10
8346: IFTRUE 8354
8348: PUSH
8349: LD_VAR 0 2
8353: OR
8354: IFTRUE 8367
8356: PUSH
8357: LD_EXP 42
8361: PPUSH
8362: CALL 23376 0 1
8366: OR
8367: IFFALSE 8443
// begin if IsInUnit ( i ) then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 310
8378: IFFALSE 8389
// ComExitBuilding ( i ) ;
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 122
// if tmp then
8389: LD_VAR 0 2
8393: IFFALSE 8409
// SetTag ( i , tRepair ) else
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_INT 3
8402: PPUSH
8403: CALL_OW 109
8407: GO 8441
// if cr then
8409: LD_VAR 0 10
8413: IFFALSE 8429
// SetTag ( i , tCrates ) else
8415: LD_VAR 0 1
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: CALL_OW 109
8427: GO 8441
// SetTag ( i , tBuild ) ;
8429: LD_VAR 0 1
8433: PPUSH
8434: LD_INT 5
8436: PPUSH
8437: CALL_OW 109
// end else
8441: GO 8467
// if not IsInUnit ( i ) then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 310
8452: NOT
8453: IFFALSE 8467
// ComEnterUnit ( i , legBase ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_INT 38
8462: PPUSH
8463: CALL_OW 120
// end ; if tag = tRepair then
8467: LD_VAR 0 8
8471: PUSH
8472: LD_INT 3
8474: EQUAL
8475: IFFALSE 8577
// begin if IsInUnit ( i ) then
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 310
8486: IFFALSE 8499
// begin ComExitBuilding ( i ) ;
8488: LD_VAR 0 1
8492: PPUSH
8493: CALL_OW 122
// continue ;
8497: GO 8158
// end ; if not tmp then
8499: LD_VAR 0 2
8503: NOT
8504: IFFALSE 8520
// begin SetTag ( i , 0 ) ;
8506: LD_VAR 0 1
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 109
// continue ;
8518: GO 8158
// end ; if not HasTask ( i ) then
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL_OW 314
8529: NOT
8530: IFFALSE 8550
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_VAR 0 2
8541: PUSH
8542: LD_INT 1
8544: ARRAY
8545: PPUSH
8546: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8550: LD_VAR 0 1
8554: PPUSH
8555: LD_INT 2
8557: PPUSH
8558: CALL_OW 308
8562: NOT
8563: IFFALSE 8577
// ComMoveToArea ( i , legBaseArea ) ;
8565: LD_VAR 0 1
8569: PPUSH
8570: LD_INT 2
8572: PPUSH
8573: CALL_OW 113
// end ; if tag = tBuild then
8577: LD_VAR 0 8
8581: PUSH
8582: LD_INT 5
8584: EQUAL
8585: IFFALSE 8780
// begin if IsInUnit ( i ) then
8587: LD_VAR 0 1
8591: PPUSH
8592: CALL_OW 310
8596: IFFALSE 8609
// begin ComExitBuilding ( i ) ;
8598: LD_VAR 0 1
8602: PPUSH
8603: CALL_OW 122
// continue ;
8607: GO 8158
// end ; if not Count ( legBuildings ) then
8609: LD_EXP 42
8613: PPUSH
8614: CALL 23376 0 1
8618: NOT
8619: IFFALSE 8637
// begin SetTag ( i , 0 ) ;
8621: LD_VAR 0 1
8625: PPUSH
8626: LD_INT 0
8628: PPUSH
8629: CALL_OW 109
// continue ;
8633: GO 8158
// end else
8635: GO 8674
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8637: LD_INT 38
8639: PPUSH
8640: LD_EXP 42
8644: PUSH
8645: LD_INT 1
8647: ARRAY
8648: PUSH
8649: LD_INT 1
8651: ARRAY
8652: PPUSH
8653: CALL 63403 0 2
8657: NOT
8658: IFFALSE 8674
// begin SetTag ( i , 0 ) ;
8660: LD_VAR 0 1
8664: PPUSH
8665: LD_INT 0
8667: PPUSH
8668: CALL_OW 109
// continue ;
8672: GO 8158
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8674: LD_ADDR_VAR 0 4
8678: PUSH
8679: LD_INT 2
8681: PPUSH
8682: LD_INT 57
8684: PUSH
8685: EMPTY
8686: LIST
8687: PPUSH
8688: CALL_OW 70
8692: ST_TO_ADDR
// if undone then
8693: LD_VAR 0 4
8697: IFFALSE 8719
// begin ComComplete ( i , undone [ 1 ] ) ;
8699: LD_VAR 0 1
8703: PPUSH
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 1
8711: ARRAY
8712: PPUSH
8713: CALL 29512 0 2
// continue ;
8717: GO 8158
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8719: LD_VAR 0 1
8723: PPUSH
8724: LD_EXP 42
8728: PUSH
8729: LD_INT 1
8731: ARRAY
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_EXP 42
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PUSH
8746: LD_INT 2
8748: ARRAY
8749: PPUSH
8750: LD_EXP 42
8754: PUSH
8755: LD_INT 1
8757: ARRAY
8758: PUSH
8759: LD_INT 3
8761: ARRAY
8762: PPUSH
8763: LD_EXP 42
8767: PUSH
8768: LD_INT 1
8770: ARRAY
8771: PUSH
8772: LD_INT 4
8774: ARRAY
8775: PPUSH
8776: CALL_OW 145
// end ; if tag = tCrates then
8780: LD_VAR 0 8
8784: PUSH
8785: LD_INT 2
8787: EQUAL
8788: IFFALSE 8927
// begin if IsInUnit ( i ) then
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 310
8799: IFFALSE 8812
// begin ComExitBuilding ( i ) ;
8801: LD_VAR 0 1
8805: PPUSH
8806: CALL_OW 122
// continue ;
8810: GO 8158
// end ; if not cr then
8812: LD_VAR 0 10
8816: NOT
8817: IFFALSE 8833
// begin SetTag ( i , 0 ) ;
8819: LD_VAR 0 1
8823: PPUSH
8824: LD_INT 0
8826: PPUSH
8827: CALL_OW 109
// continue ;
8831: GO 8158
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8833: LD_VAR 0 1
8837: PPUSH
8838: CALL_OW 314
8842: NOT
8843: IFFALSE 8898
8845: PUSH
8846: LD_INT 81
8848: PUSH
8849: LD_VAR 0 5
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: LD_INT 92
8860: PUSH
8861: LD_VAR 0 10
8865: PUSH
8866: LD_INT 1
8868: ARRAY
8869: PUSH
8870: LD_VAR 0 10
8874: PUSH
8875: LD_INT 2
8877: ARRAY
8878: PUSH
8879: LD_INT 12
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PPUSH
8892: CALL_OW 69
8896: NOT
8897: AND
8898: IFFALSE 8927
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8900: LD_VAR 0 1
8904: PPUSH
8905: LD_VAR 0 10
8909: PUSH
8910: LD_INT 1
8912: ARRAY
8913: PPUSH
8914: LD_VAR 0 10
8918: PUSH
8919: LD_INT 2
8921: ARRAY
8922: PPUSH
8923: CALL_OW 117
// end ; end ;
8927: GO 8158
8929: POP
8930: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8931: LD_ADDR_VAR 0 13
8935: PUSH
8936: LD_EXP 37
8940: PPUSH
8941: LD_INT 2
8943: PUSH
8944: LD_INT 25
8946: PUSH
8947: LD_INT 1
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 25
8956: PUSH
8957: LD_INT 5
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 25
8966: PUSH
8967: LD_INT 8
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 50
8982: PUSH
8983: EMPTY
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 72
8994: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8995: LD_ADDR_VAR 0 15
8999: PUSH
9000: LD_INT 2
9002: PPUSH
9003: LD_INT 81
9005: PUSH
9006: LD_VAR 0 5
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PPUSH
9015: CALL_OW 70
9019: ST_TO_ADDR
// if sol then
9020: LD_VAR 0 13
9024: IFFALSE 9587
// begin if enemyInBase then
9026: LD_VAR 0 15
9030: IFFALSE 9175
// begin for i in sol do
9032: LD_ADDR_VAR 0 1
9036: PUSH
9037: LD_VAR 0 13
9041: PUSH
9042: FOR_IN
9043: IFFALSE 9171
// begin tw := IsInUnit ( i ) ;
9045: LD_ADDR_VAR 0 9
9049: PUSH
9050: LD_VAR 0 1
9054: PPUSH
9055: CALL_OW 310
9059: ST_TO_ADDR
// if tw then
9060: LD_VAR 0 9
9064: IFFALSE 9145
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9066: LD_VAR 0 9
9070: PUSH
9071: LD_INT 22
9073: PUSH
9074: LD_VAR 0 5
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 101
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 30
9098: PUSH
9099: LD_INT 32
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 30
9108: PUSH
9109: LD_INT 31
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 69
9130: IN
9131: NOT
9132: IFFALSE 9143
// ComExitBuilding ( i ) ;
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 122
// end else
9143: GO 9169
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
9145: LD_VAR 0 1
9149: PPUSH
9150: LD_VAR 0 15
9154: PPUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 74
9164: PPUSH
9165: CALL_OW 115
// end ;
9169: GO 9042
9171: POP
9172: POP
// end else
9173: GO 9587
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9175: LD_ADDR_VAR 0 16
9179: PUSH
9180: LD_INT 2
9182: PPUSH
9183: LD_INT 3
9185: PUSH
9186: LD_INT 62
9188: PUSH
9189: EMPTY
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 30
9211: PUSH
9212: LD_INT 4
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PUSH
9219: LD_INT 30
9221: PUSH
9222: LD_INT 5
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 30
9231: PUSH
9232: LD_INT 31
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 70
9254: ST_TO_ADDR
// if empty then
9255: LD_VAR 0 16
9259: IFFALSE 9276
// empty := ReverseArray ( empty ) ;
9261: LD_ADDR_VAR 0 16
9265: PUSH
9266: LD_VAR 0 16
9270: PPUSH
9271: CALL 54398 0 1
9275: ST_TO_ADDR
// for i in sol do
9276: LD_ADDR_VAR 0 1
9280: PUSH
9281: LD_VAR 0 13
9285: PUSH
9286: FOR_IN
9287: IFFALSE 9585
// begin tag := GetTag ( i ) ;
9289: LD_ADDR_VAR 0 8
9293: PUSH
9294: LD_VAR 0 1
9298: PPUSH
9299: CALL_OW 110
9303: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 256
9313: PUSH
9314: LD_INT 1000
9316: LESS
9317: IFFALSE 9329
9319: PUSH
9320: LD_VAR 0 8
9324: PUSH
9325: LD_INT 1
9327: NONEQUAL
9328: AND
9329: IFFALSE 9381
// begin SetTag ( i , tHeal ) ;
9331: LD_VAR 0 1
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
9343: LD_VAR 0 1
9347: PPUSH
9348: LD_EXP 41
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PPUSH
9357: LD_EXP 41
9361: PUSH
9362: LD_INT 2
9364: ARRAY
9365: PPUSH
9366: CALL_OW 111
// AddComHold ( i ) ;
9370: LD_VAR 0 1
9374: PPUSH
9375: CALL_OW 200
// continue ;
9379: GO 9286
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 256
9390: PUSH
9391: LD_INT 1000
9393: EQUAL
9394: IFFALSE 9406
9396: PUSH
9397: LD_VAR 0 8
9401: PUSH
9402: LD_INT 1
9404: EQUAL
9405: AND
9406: IFFALSE 9422
// begin SetTag ( i , 0 ) ;
9408: LD_VAR 0 1
9412: PPUSH
9413: LD_INT 0
9415: PPUSH
9416: CALL_OW 109
// continue ;
9420: GO 9286
// end ; if not IsInArea ( i , legBaseArea ) and not IsInUnit ( i ) then
9422: LD_VAR 0 1
9426: PPUSH
9427: LD_INT 2
9429: PPUSH
9430: CALL_OW 308
9434: NOT
9435: IFFALSE 9449
9437: PUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 310
9447: NOT
9448: AND
9449: IFFALSE 9463
// ComMoveToArea ( i , legBaseArea ) ;
9451: LD_VAR 0 1
9455: PPUSH
9456: LD_INT 2
9458: PPUSH
9459: CALL_OW 113
// if HasTask ( i ) then
9463: LD_VAR 0 1
9467: PPUSH
9468: CALL_OW 314
9472: IFFALSE 9476
// continue ;
9474: GO 9286
// if not IsInUnit ( i ) and not tag and empty then
9476: LD_VAR 0 1
9480: PPUSH
9481: CALL_OW 310
9485: NOT
9486: IFFALSE 9495
9488: PUSH
9489: LD_VAR 0 8
9493: NOT
9494: AND
9495: IFFALSE 9503
9497: PUSH
9498: LD_VAR 0 16
9502: AND
9503: IFFALSE 9583
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9505: LD_VAR 0 1
9509: PPUSH
9510: LD_VAR 0 16
9514: PUSH
9515: LD_INT 1
9517: ARRAY
9518: PPUSH
9519: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9523: LD_VAR 0 16
9527: PUSH
9528: LD_INT 1
9530: ARRAY
9531: PPUSH
9532: CALL_OW 266
9536: PUSH
9537: LD_INT 5
9539: EQUAL
9540: IFFALSE 9551
9542: PUSH
9543: LD_INT 50
9545: PPUSH
9546: CALL_OW 13
9550: AND
9551: IFFALSE 9565
// AddComChangeProfession ( i , class_mortar ) ;
9553: LD_VAR 0 1
9557: PPUSH
9558: LD_INT 8
9560: PPUSH
9561: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9565: LD_ADDR_VAR 0 16
9569: PUSH
9570: LD_VAR 0 16
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 3
9582: ST_TO_ADDR
// end ; end ;
9583: GO 9286
9585: POP
9586: POP
// end ; end ; end ;
9587: PPOPN 19
9589: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9590: LD_EXP 45
9594: PPUSH
9595: CALL_OW 302
9599: IFFALSE 9607
9601: PUSH
9602: LD_EXP 4
9606: AND
9607: IFFALSE 9615
9609: PUSH
9610: LD_EXP 9
9614: AND
9615: IFFALSE 9907
9617: GO 9619
9619: DISABLE
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
// begin enable ;
9624: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: LD_INT 2
9632: PPUSH
9633: LD_INT 81
9635: PUSH
9636: LD_INT 8
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 50
9645: PUSH
9646: EMPTY
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: CALL_OW 70
9657: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9658: LD_ADDR_VAR 0 1
9662: PUSH
9663: LD_INT 16
9665: PPUSH
9666: CALL_OW 435
9670: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9671: LD_EXP 45
9675: PPUSH
9676: CALL_OW 261
9680: PUSH
9681: LD_INT 10
9683: LESS
9684: IFFALSE 9701
9686: PUSH
9687: LD_INT 2
9689: PPUSH
9690: LD_EXP 45
9694: PPUSH
9695: CALL_OW 292
9699: NOT
9700: AND
9701: IFFALSE 9718
9703: PUSH
9704: LD_EXP 45
9708: PPUSH
9709: CALL_OW 262
9713: PUSH
9714: LD_INT 1
9716: EQUAL
9717: AND
9718: IFFALSE 9732
// SetFuel ( legCargo , 100 ) ;
9720: LD_EXP 45
9724: PPUSH
9725: LD_INT 100
9727: PPUSH
9728: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9732: LD_EXP 45
9736: PPUSH
9737: CALL_OW 314
9741: NOT
9742: IFFALSE 9762
9744: PUSH
9745: LD_EXP 45
9749: PPUSH
9750: LD_INT 1
9752: PPUSH
9753: CALL_OW 289
9757: PUSH
9758: LD_INT 100
9760: LESS
9761: AND
9762: IFFALSE 9771
9764: PUSH
9765: LD_VAR 0 2
9769: NOT
9770: AND
9771: IFFALSE 9837
// begin if cr then
9773: LD_VAR 0 1
9777: IFFALSE 9808
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9779: LD_EXP 45
9783: PPUSH
9784: LD_VAR 0 1
9788: PUSH
9789: LD_INT 1
9791: ARRAY
9792: PPUSH
9793: LD_VAR 0 1
9797: PUSH
9798: LD_INT 2
9800: ARRAY
9801: PPUSH
9802: CALL_OW 117
9806: GO 9835
// if not IsInArea ( legCargo , cratesNorthArea ) then
9808: LD_EXP 45
9812: PPUSH
9813: LD_INT 16
9815: PPUSH
9816: CALL_OW 308
9820: NOT
9821: IFFALSE 9835
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9823: LD_EXP 45
9827: PPUSH
9828: LD_INT 16
9830: PPUSH
9831: CALL_OW 113
// exit ;
9835: GO 9907
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9837: LD_VAR 0 2
9841: IFFALSE 9858
9843: PUSH
9844: LD_EXP 45
9848: PPUSH
9849: LD_INT 2
9851: PPUSH
9852: CALL_OW 308
9856: NOT
9857: AND
9858: IFFALSE 9877
// ComMoveXY ( legCargo , 194 , 17 ) else
9860: LD_EXP 45
9864: PPUSH
9865: LD_INT 194
9867: PPUSH
9868: LD_INT 17
9870: PPUSH
9871: CALL_OW 111
9875: GO 9907
// if GetCargo ( legCargo , mat_cans ) = 100 then
9877: LD_EXP 45
9881: PPUSH
9882: LD_INT 1
9884: PPUSH
9885: CALL_OW 289
9889: PUSH
9890: LD_INT 100
9892: EQUAL
9893: IFFALSE 9907
// ComGive ( legCargo , legBase ) ;
9895: LD_EXP 45
9899: PPUSH
9900: LD_INT 38
9902: PPUSH
9903: CALL_OW 161
// end ;
9907: PPOPN 2
9909: END
// every 6 6$00 trigger Count ( UnitFilter ( legRTanks , [ f_ok ] ) ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part , level ;
9910: LD_EXP 44
9914: PPUSH
9915: LD_INT 50
9917: PUSH
9918: EMPTY
9919: LIST
9920: PPUSH
9921: CALL_OW 72
9925: PPUSH
9926: CALL 23376 0 1
9930: PUSH
9931: LD_INT 5
9933: LESS
9934: IFFALSE 9942
9936: PUSH
9937: LD_EXP 4
9941: AND
9942: IFFALSE 9950
9944: PUSH
9945: LD_EXP 9
9949: AND
9950: IFFALSE 9958
9952: PUSH
9953: LD_EXP 7
9957: AND
9958: IFFALSE 10162
9960: GO 9962
9962: DISABLE
9963: LD_INT 0
9965: PPUSH
9966: PPUSH
9967: PPUSH
9968: PPUSH
// begin enable ;
9969: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9970: LD_ADDR_VAR 0 2
9974: PUSH
9975: LD_INT 13
9977: PUSH
9978: LD_INT 28
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 13
9987: PUSH
9988: LD_INT 27
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 13
9997: PUSH
9998: LD_INT 26
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 14
10007: PUSH
10008: LD_INT 28
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 14
10017: PUSH
10018: LD_INT 25
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: ST_TO_ADDR
// level := tick div 60 60$00 ;
10032: LD_ADDR_VAR 0 4
10036: PUSH
10037: LD_OWVAR 1
10041: PUSH
10042: LD_INT 126000
10044: DIV
10045: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] + level do
10046: LD_ADDR_VAR 0 1
10050: PUSH
10051: DOUBLE
10052: LD_INT 1
10054: DEC
10055: ST_TO_ADDR
10056: LD_INT 3
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 4
10064: PUSH
10065: LD_INT 4
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: PUSH
10074: LD_OWVAR 67
10078: ARRAY
10079: PUSH
10080: LD_VAR 0 4
10084: PLUS
10085: PUSH
10086: FOR_TO
10087: IFFALSE 10160
// begin part := parts [ rand ( 1 , parts ) ] ;
10089: LD_ADDR_VAR 0 3
10093: PUSH
10094: LD_VAR 0 2
10098: PUSH
10099: LD_INT 1
10101: PPUSH
10102: LD_VAR 0 2
10106: PPUSH
10107: CALL_OW 12
10111: ARRAY
10112: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
10113: LD_ADDR_EXP 40
10117: PUSH
10118: LD_EXP 40
10122: PPUSH
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 1
10130: ARRAY
10131: PUSH
10132: LD_INT 1
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_VAR 0 3
10142: PUSH
10143: LD_INT 2
10145: ARRAY
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL 59308 0 2
10157: ST_TO_ADDR
10158: GO 10086
10160: POP
10161: POP
// end ;
10162: PPOPN 4
10164: END
// every 20 20$00 trigger not legionDestroyed and tick <= 80 80$00 do
10165: LD_EXP 12
10169: NOT
10170: IFFALSE 10182
10172: PUSH
10173: LD_OWVAR 1
10177: PUSH
10178: LD_INT 168000
10180: LESSEQUAL
10181: AND
10182: IFFALSE 10221
10184: GO 10186
10186: DISABLE
// begin enable ;
10187: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
10188: LD_ADDR_EXP 40
10192: PUSH
10193: LD_EXP 40
10197: PPUSH
10198: LD_INT 14
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: LD_INT 1
10206: PUSH
10207: LD_INT 27
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL 59308 0 2
10220: ST_TO_ADDR
// end ;
10221: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
10222: LD_EXP 43
10226: IFFALSE 10234
10228: PUSH
10229: LD_EXP 9
10233: AND
10234: IFFALSE 10242
10236: PUSH
10237: LD_EXP 7
10241: AND
10242: IFFALSE 10845
10244: GO 10246
10246: DISABLE
10247: LD_INT 0
10249: PPUSH
10250: PPUSH
10251: PPUSH
// begin enable ;
10252: ENABLE
// if not legTanks then
10253: LD_EXP 43
10257: NOT
10258: IFFALSE 10262
// exit ;
10260: GO 10845
// for i in legTanks do
10262: LD_ADDR_VAR 0 1
10266: PUSH
10267: LD_EXP 43
10271: PUSH
10272: FOR_IN
10273: IFFALSE 10843
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
10275: LD_VAR 0 1
10279: PPUSH
10280: CALL_OW 302
10284: NOT
10285: IFTRUE 10302
10287: PUSH
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 255
10297: PUSH
10298: LD_INT 8
10300: NONEQUAL
10301: OR
10302: IFFALSE 10322
// begin legTanks := legTanks diff i ;
10304: LD_ADDR_EXP 43
10308: PUSH
10309: LD_EXP 43
10313: PUSH
10314: LD_VAR 0 1
10318: DIFF
10319: ST_TO_ADDR
// continue ;
10320: GO 10272
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL_OW 110
10331: NOT
10332: IFFALSE 10349
10334: PUSH
10335: LD_VAR 0 1
10339: PPUSH
10340: CALL_OW 263
10344: PUSH
10345: LD_INT 2
10347: EQUAL
10348: AND
10349: IFFALSE 10363
// SetTag ( i , tAttack ) ;
10351: LD_VAR 0 1
10355: PPUSH
10356: LD_INT 10
10358: PPUSH
10359: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
10363: LD_VAR 0 1
10367: PPUSH
10368: CALL_OW 110
10372: NOT
10373: IFTRUE 10390
10375: PUSH
10376: LD_VAR 0 1
10380: PPUSH
10381: CALL_OW 110
10385: PUSH
10386: LD_INT 0
10388: EQUAL
10389: OR
10390: IFFALSE 10522
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
10392: LD_VAR 0 1
10396: PPUSH
10397: CALL_OW 261
10401: PUSH
10402: LD_INT 50
10404: LESS
10405: IFFALSE 10422
10407: PUSH
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 262
10417: PUSH
10418: LD_INT 1
10420: EQUAL
10421: AND
10422: IFFALSE 10481
// begin ComMoveXY ( i , 189 , 19 ) ;
10424: LD_VAR 0 1
10428: PPUSH
10429: LD_INT 189
10431: PPUSH
10432: LD_INT 19
10434: PPUSH
10435: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
10446: LD_VAR 0 1
10450: PPUSH
10451: LD_INT 189
10453: PPUSH
10454: LD_INT 19
10456: PPUSH
10457: CALL_OW 297
10461: PUSH
10462: LD_INT 4
10464: LESS
10465: IFFALSE 10439
// SetFuel ( i , 100 ) ;
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 100
10474: PPUSH
10475: CALL_OW 240
// end else
10479: GO 10522
// if not IsInArea ( i , legParkingArea ) then
10481: LD_VAR 0 1
10485: PPUSH
10486: LD_INT 15
10488: PPUSH
10489: CALL_OW 308
10493: NOT
10494: IFFALSE 10510
// ComMoveToArea ( i , legParkingArea ) else
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_INT 15
10503: PPUSH
10504: CALL_OW 113
10508: GO 10522
// SetTag ( i , tParking ) ;
10510: LD_VAR 0 1
10514: PPUSH
10515: LD_INT 9
10517: PPUSH
10518: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 110
10531: PUSH
10532: LD_INT 9
10534: EQUAL
10535: IFFALSE 10665
// begin if GetLives ( i ) < 650 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 256
10546: PUSH
10547: LD_INT 650
10549: LESS
10550: IFFALSE 10642
// begin if not IsDrivenBy ( i ) then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 311
10561: NOT
10562: IFFALSE 10566
// continue ;
10564: GO 10272
// mech := IsDrivenBy ( i ) ;
10566: LD_ADDR_VAR 0 2
10570: PUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL_OW 311
10580: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10581: LD_VAR 0 2
10585: PPUSH
10586: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10590: LD_VAR 0 2
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10604: LD_INT 35
10606: PPUSH
10607: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 256
10620: PUSH
10621: LD_INT 1000
10623: EQUAL
10624: IFFALSE 10604
// ComEnterUnit ( mech , i ) ;
10626: LD_VAR 0 2
10630: PPUSH
10631: LD_VAR 0 1
10635: PPUSH
10636: CALL_OW 120
// end else
10640: GO 10665
// if IsDrivenBy ( i ) then
10642: LD_VAR 0 1
10646: PPUSH
10647: CALL_OW 311
10651: IFFALSE 10665
// SetTag ( i , tAttack ) ;
10653: LD_VAR 0 1
10657: PPUSH
10658: LD_INT 10
10660: PPUSH
10661: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10665: LD_VAR 0 1
10669: PPUSH
10670: CALL_OW 110
10674: PUSH
10675: LD_INT 10
10677: EQUAL
10678: IFFALSE 10841
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: LD_INT 2
10687: PPUSH
10688: LD_INT 81
10690: PUSH
10691: LD_INT 8
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PPUSH
10698: CALL_OW 70
10702: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 256
10712: PUSH
10713: LD_INT 650
10715: LESS
10716: IFFALSE 10733
10718: PUSH
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 263
10728: PUSH
10729: LD_INT 1
10731: EQUAL
10732: AND
10733: IFFALSE 10758
// begin ComStop ( i ) ;
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 141
// SetTag ( i , 0 ) ;
10744: LD_VAR 0 1
10748: PPUSH
10749: LD_INT 0
10751: PPUSH
10752: CALL_OW 109
// continue ;
10756: GO 10272
// end ; if enemy then
10758: LD_VAR 0 3
10762: IFFALSE 10802
// begin if not HasTask ( i ) then
10764: LD_VAR 0 1
10768: PPUSH
10769: CALL_OW 314
10773: NOT
10774: IFFALSE 10800
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_VAR 0 3
10785: PPUSH
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 74
10795: PPUSH
10796: CALL 63706 0 2
// end else
10800: GO 10841
// if legTanks then
10802: LD_EXP 43
10806: IFFALSE 10841
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10808: LD_VAR 0 1
10812: PPUSH
10813: LD_INT 200
10815: PUSH
10816: LD_INT 48
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 210
10825: PUSH
10826: LD_INT 74
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PPUSH
10837: CALL 62074 0 2
// end ; end ;
10841: GO 10272
10843: POP
10844: POP
// end ;
10845: PPOPN 3
10847: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10848: LD_EXP 12
10852: NOT
10853: IFFALSE 10866
10855: PUSH
10856: LD_EXP 44
10860: PPUSH
10861: CALL 23376 0 1
10865: AND
10866: IFFALSE 10874
10868: PUSH
10869: LD_EXP 9
10873: AND
10874: IFFALSE 10882
10876: PUSH
10877: LD_EXP 7
10881: AND
10882: IFFALSE 11080
10884: GO 10886
10886: DISABLE
10887: LD_INT 0
10889: PPUSH
10890: PPUSH
10891: PPUSH
// begin enable ;
10892: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10893: LD_ADDR_VAR 0 2
10897: PUSH
10898: LD_EXP 44
10902: PPUSH
10903: LD_INT 61
10905: PUSH
10906: EMPTY
10907: LIST
10908: PUSH
10909: LD_INT 50
10911: PUSH
10912: EMPTY
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PPUSH
10919: CALL_OW 72
10923: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10924: LD_ADDR_EXP 44
10928: PUSH
10929: LD_EXP 44
10933: PUSH
10934: LD_VAR 0 2
10938: DIFF
10939: ST_TO_ADDR
// if not tmp then
10940: LD_VAR 0 2
10944: NOT
10945: IFFALSE 10949
// exit ;
10947: GO 11080
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10949: LD_ADDR_VAR 0 3
10953: PUSH
10954: LD_VAR 0 2
10958: PPUSH
10959: LD_INT 34
10961: PUSH
10962: LD_INT 24
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PPUSH
10969: CALL_OW 72
10973: ST_TO_ADDR
// if tmp2 then
10974: LD_VAR 0 3
10978: IFFALSE 10995
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10980: LD_VAR 0 3
10984: PPUSH
10985: LD_INT 241
10987: PPUSH
10988: LD_INT 99
10990: PPUSH
10991: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10995: LD_INT 35
10997: PPUSH
10998: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: LD_VAR 0 2
11011: PPUSH
11012: LD_INT 50
11014: PUSH
11015: EMPTY
11016: LIST
11017: PPUSH
11018: CALL_OW 72
11022: ST_TO_ADDR
// for i in tmp do
11023: LD_ADDR_VAR 0 1
11027: PUSH
11028: LD_VAR 0 2
11032: PUSH
11033: FOR_IN
11034: IFFALSE 11071
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
11036: LD_VAR 0 1
11040: PPUSH
11041: LD_INT 200
11043: PUSH
11044: LD_INT 48
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 210
11053: PUSH
11054: LD_INT 74
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL 62074 0 2
11069: GO 11033
11071: POP
11072: POP
// until not tmp ;
11073: LD_VAR 0 2
11077: NOT
11078: IFFALSE 10995
// end ;
11080: PPOPN 3
11082: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
11083: LD_EXP 9
11087: NOT
11088: IFFALSE 11349
11090: GO 11092
11092: DISABLE
11093: LD_INT 0
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
// begin uc_side := 8 ;
11099: LD_ADDR_OWVAR 20
11103: PUSH
11104: LD_INT 8
11106: ST_TO_ADDR
// uc_nation := nation_arabian ;
11107: LD_ADDR_OWVAR 21
11111: PUSH
11112: LD_INT 2
11114: ST_TO_ADDR
// for i := 1 to 3 do
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: DOUBLE
11121: LD_INT 1
11123: DEC
11124: ST_TO_ADDR
11125: LD_INT 3
11127: PUSH
11128: FOR_TO
11129: IFFALSE 11264
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
11131: LD_INT 14
11133: PPUSH
11134: LD_INT 3
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: LD_INT 27
11142: PUSH
11143: LD_INT 25
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_VAR 0 1
11154: PUSH
11155: LD_INT 2
11157: MOD
11158: PUSH
11159: LD_INT 1
11161: PLUS
11162: ARRAY
11163: PPUSH
11164: LD_INT 100
11166: PPUSH
11167: CALL 26138 0 5
// veh := CreateVehicle ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: CALL_OW 45
11180: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11181: LD_VAR 0 3
11185: PPUSH
11186: LD_INT 5
11188: PPUSH
11189: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 44
11200: PPUSH
11201: LD_INT 0
11203: PPUSH
11204: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
11208: LD_INT 0
11210: PPUSH
11211: LD_INT 6
11213: PPUSH
11214: CALL_OW 383
// un := CreateHuman ;
11218: LD_ADDR_VAR 0 2
11222: PUSH
11223: CALL_OW 44
11227: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11228: LD_VAR 0 2
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
11242: LD_ADDR_VAR 0 4
11246: PUSH
11247: LD_VAR 0 4
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL 59308 0 2
11261: ST_TO_ADDR
// end ;
11262: GO 11128
11264: POP
11265: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
11266: LD_VAR 0 4
11270: PPUSH
11271: LD_INT 219
11273: PPUSH
11274: LD_INT 110
11276: PPUSH
11277: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
11281: LD_VAR 0 4
11285: PPUSH
11286: LD_INT 220
11288: PPUSH
11289: LD_INT 94
11291: PPUSH
11292: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
11296: LD_VAR 0 4
11300: PPUSH
11301: LD_INT 209
11303: PPUSH
11304: LD_INT 66
11306: PPUSH
11307: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
11311: LD_VAR 0 4
11315: PPUSH
11316: LD_INT 189
11318: PPUSH
11319: LD_INT 22
11321: PPUSH
11322: CALL_OW 171
// wait ( 0 0$10 ) ;
11326: LD_INT 350
11328: PPUSH
11329: CALL_OW 67
// legTanks := legTanks union tmp ;
11333: LD_ADDR_EXP 43
11337: PUSH
11338: LD_EXP 43
11342: PUSH
11343: LD_VAR 0 4
11347: UNION
11348: ST_TO_ADDR
// end ; end_of_file
11349: PPOPN 4
11351: END
// export function CreateNature ; var i , areas , amount ; begin
11352: LD_INT 0
11354: PPUSH
11355: PPUSH
11356: PPUSH
11357: PPUSH
// PrepareTiger ( 0 ) ;
11358: LD_INT 0
11360: PPUSH
11361: CALL 55586 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: DOUBLE
11371: LD_INT 1
11373: DEC
11374: ST_TO_ADDR
11375: LD_INT 10
11377: PUSH
11378: LD_INT 8
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: LD_INT 5
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: LD_OWVAR 67
11397: ARRAY
11398: PUSH
11399: FOR_TO
11400: IFFALSE 11419
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11402: CALL_OW 44
11406: PPUSH
11407: LD_INT 7
11409: PPUSH
11410: LD_INT 0
11412: PPUSH
11413: CALL_OW 49
11417: GO 11399
11419: POP
11420: POP
// PrepareBird ;
11421: CALL 55815 0 0
// for i := 1 to 3 do
11425: LD_ADDR_VAR 0 2
11429: PUSH
11430: DOUBLE
11431: LD_INT 1
11433: DEC
11434: ST_TO_ADDR
11435: LD_INT 3
11437: PUSH
11438: FOR_TO
11439: IFFALSE 11458
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11441: CALL_OW 44
11445: PPUSH
11446: LD_INT 7
11448: PPUSH
11449: LD_INT 0
11451: PPUSH
11452: CALL_OW 49
11456: GO 11438
11458: POP
11459: POP
// PrepareHorse ;
11460: CALL 55867 0 0
// for i := 1 to 3 do
11464: LD_ADDR_VAR 0 2
11468: PUSH
11469: DOUBLE
11470: LD_INT 1
11472: DEC
11473: ST_TO_ADDR
11474: LD_INT 3
11476: PUSH
11477: FOR_TO
11478: IFFALSE 11497
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11480: CALL_OW 44
11484: PPUSH
11485: LD_INT 7
11487: PPUSH
11488: LD_INT 0
11490: PPUSH
11491: CALL_OW 49
11495: GO 11477
11497: POP
11498: POP
// PrepareFrog ;
11499: CALL 55711 0 0
// for i := 1 to 3 do
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: DOUBLE
11509: LD_INT 1
11511: DEC
11512: ST_TO_ADDR
11513: LD_INT 3
11515: PUSH
11516: FOR_TO
11517: IFFALSE 11536
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11519: CALL_OW 44
11523: PPUSH
11524: LD_INT 8
11526: PPUSH
11527: LD_INT 0
11529: PPUSH
11530: CALL_OW 49
11534: GO 11516
11536: POP
11537: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11538: LD_ADDR_VAR 0 4
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_OWVAR 67
11565: ARRAY
11566: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11567: LD_ADDR_VAR 0 3
11571: PUSH
11572: LD_INT 18
11574: PUSH
11575: LD_INT 19
11577: PUSH
11578: LD_INT 20
11580: PUSH
11581: LD_INT 21
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: ST_TO_ADDR
// PrepareMastodont ;
11590: CALL 55919 0 0
// for i := 1 to amount do
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: DOUBLE
11600: LD_INT 1
11602: DEC
11603: ST_TO_ADDR
11604: LD_VAR 0 4
11608: PUSH
11609: FOR_TO
11610: IFFALSE 11647
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11612: CALL_OW 45
11616: PPUSH
11617: LD_VAR 0 3
11621: PUSH
11622: LD_VAR 0 2
11626: PUSH
11627: LD_INT 1
11629: MINUS
11630: PUSH
11631: LD_OWVAR 67
11635: PLUS
11636: ARRAY
11637: PPUSH
11638: LD_INT 0
11640: PPUSH
11641: CALL_OW 49
11645: GO 11609
11647: POP
11648: POP
// PrepareApeman ( 0 ) ;
11649: LD_INT 0
11651: PPUSH
11652: CALL 55435 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11656: LD_ADDR_OWVAR 31
11660: PUSH
11661: LD_INT 4
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: LD_INT 0
11669: PUSH
11670: LD_INT 0
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11679: LD_ADDR_VAR 0 2
11683: PUSH
11684: DOUBLE
11685: LD_INT 1
11687: DEC
11688: ST_TO_ADDR
11689: LD_INT 9
11691: PUSH
11692: LD_INT 7
11694: PUSH
11695: LD_INT 6
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: PUSH
11707: LD_OWVAR 67
11711: ARRAY
11712: PUSH
11713: FOR_TO
11714: IFFALSE 11733
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11716: CALL_OW 44
11720: PPUSH
11721: LD_INT 6
11723: PPUSH
11724: LD_INT 0
11726: PPUSH
11727: CALL_OW 49
11731: GO 11713
11733: POP
11734: POP
// for i := 1 to [ 8 , 7 , 6 , 5 ] [ Difficulty ] do
11735: LD_ADDR_VAR 0 2
11739: PUSH
11740: DOUBLE
11741: LD_INT 1
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 8
11747: PUSH
11748: LD_INT 7
11750: PUSH
11751: LD_INT 6
11753: PUSH
11754: LD_INT 5
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_OWVAR 67
11767: ARRAY
11768: PUSH
11769: FOR_TO
11770: IFFALSE 11795
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 8 , false ) ;
11772: CALL_OW 44
11776: PPUSH
11777: LD_INT 274
11779: PPUSH
11780: LD_INT 133
11782: PPUSH
11783: LD_INT 8
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL_OW 50
11793: GO 11769
11795: POP
11796: POP
// for i := 1 to [ 6 , 5 , 4 , 4 ] [ Difficulty ] do
11797: LD_ADDR_VAR 0 2
11801: PUSH
11802: DOUBLE
11803: LD_INT 1
11805: DEC
11806: ST_TO_ADDR
11807: LD_INT 6
11809: PUSH
11810: LD_INT 5
11812: PUSH
11813: LD_INT 4
11815: PUSH
11816: LD_INT 4
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: PUSH
11825: LD_OWVAR 67
11829: ARRAY
11830: PUSH
11831: FOR_TO
11832: IFFALSE 11857
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 8 , false ) ;
11834: CALL_OW 44
11838: PPUSH
11839: LD_INT 208
11841: PPUSH
11842: LD_INT 142
11844: PPUSH
11845: LD_INT 8
11847: PPUSH
11848: LD_INT 0
11850: PPUSH
11851: CALL_OW 50
11855: GO 11831
11857: POP
11858: POP
// end ;
11859: LD_VAR 0 1
11863: RET
// export function AreInArea ( units , area ) ; var i ; begin
11864: LD_INT 0
11866: PPUSH
11867: PPUSH
// result := false ;
11868: LD_ADDR_VAR 0 3
11872: PUSH
11873: LD_INT 0
11875: ST_TO_ADDR
// if not units then
11876: LD_VAR 0 1
11880: NOT
11881: IFFALSE 11885
// exit ;
11883: GO 11953
// for i in units do
11885: LD_ADDR_VAR 0 4
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: FOR_IN
11896: IFFALSE 11951
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11898: LD_VAR 0 4
11902: PPUSH
11903: LD_VAR 0 2
11907: PPUSH
11908: CALL_OW 308
11912: IFTRUE 11935
11914: PUSH
11915: LD_VAR 0 4
11919: PPUSH
11920: CALL_OW 310
11924: PPUSH
11925: LD_VAR 0 2
11929: PPUSH
11930: CALL_OW 308
11934: OR
11935: IFFALSE 11949
// begin result := true ;
11937: LD_ADDR_VAR 0 3
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// exit ;
11945: POP
11946: POP
11947: GO 11953
// end ;
11949: GO 11895
11951: POP
11952: POP
// end ; end_of_file
11953: LD_VAR 0 3
11957: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11958: LD_INT 0
11960: PPUSH
11961: PPUSH
11962: PPUSH
11963: PPUSH
11964: PPUSH
// SaveForQuickRestart ;
11965: CALL_OW 22
// InGameOn ;
11969: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11973: LD_INT 84
11975: PPUSH
11976: LD_INT 28
11978: PPUSH
11979: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11983: LD_INT 2
11985: PPUSH
11986: LD_INT 9
11988: PPUSH
11989: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11993: LD_EXP 23
11997: PPUSH
11998: LD_INT 90
12000: PPUSH
12001: LD_INT 30
12003: PPUSH
12004: CALL_OW 111
// uc_side := 1 ;
12008: LD_ADDR_OWVAR 20
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// uc_nation := nation_american ;
12016: LD_ADDR_OWVAR 21
12020: PUSH
12021: LD_INT 1
12023: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
12024: LD_INT 3
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: LD_INT 9
12035: PPUSH
12036: LD_INT 66
12038: PPUSH
12039: CALL 26138 0 5
// veh := CreateVehicle ;
12043: LD_ADDR_VAR 0 4
12047: PUSH
12048: CALL_OW 45
12052: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12053: LD_VAR 0 4
12057: PPUSH
12058: LD_INT 1
12060: PPUSH
12061: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
12065: LD_VAR 0 4
12069: PPUSH
12070: LD_INT 80
12072: PPUSH
12073: LD_INT 27
12075: PPUSH
12076: LD_INT 0
12078: PPUSH
12079: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
12083: LD_INT 1
12085: PPUSH
12086: LD_INT 8
12088: PPUSH
12089: CALL_OW 383
// mech := CreateHuman ;
12093: LD_ADDR_VAR 0 3
12097: PUSH
12098: CALL_OW 44
12102: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_VAR 0 4
12112: PPUSH
12113: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
12117: LD_INT 35
12119: PPUSH
12120: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
12124: LD_INT 90
12126: PPUSH
12127: LD_INT 30
12129: PPUSH
12130: CALL_OW 428
12134: IFFALSE 12117
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
12136: LD_INT 80
12138: PPUSH
12139: LD_INT 27
12141: PPUSH
12142: LD_INT 2
12144: PPUSH
12145: LD_INT 6
12147: NEG
12148: PPUSH
12149: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
12153: LD_INT 80
12155: PPUSH
12156: LD_INT 27
12158: PPUSH
12159: CALL_OW 86
// DialogueOn ;
12163: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
12167: LD_EXP 23
12171: PPUSH
12172: LD_STRING DH-Start-1
12174: PPUSH
12175: CALL_OW 88
// DialogueOff ;
12179: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12183: LD_EXP 23
12187: PPUSH
12188: LD_VAR 0 4
12192: PPUSH
12193: CALL_OW 115
// wait ( 0 0$1 ) ;
12197: LD_INT 35
12199: PPUSH
12200: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
12204: LD_EXP 23
12208: PPUSH
12209: CALL_OW 310
12213: PPUSH
12214: LD_INT 200
12216: PPUSH
12217: CALL_OW 234
// wait ( 0 0$0.3 ) ;
12221: LD_INT 10
12223: PPUSH
12224: CALL_OW 67
// DialogueOn ;
12228: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
12232: LD_EXP 23
12236: PPUSH
12237: LD_STRING DH-Start-2
12239: PPUSH
12240: CALL_OW 88
// DialogueOff ;
12244: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12248: LD_EXP 23
12252: PPUSH
12253: LD_VAR 0 4
12257: PPUSH
12258: CALL_OW 115
// wait ( 0 0$0.2 ) ;
12262: LD_INT 7
12264: PPUSH
12265: CALL_OW 67
// ComCrawl ( Heike ) ;
12269: LD_EXP 23
12273: PPUSH
12274: CALL_OW 137
// wait ( 0 0$3 ) ;
12278: LD_INT 105
12280: PPUSH
12281: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
12285: LD_EXP 26
12289: PPUSH
12290: LD_INT 82
12292: PPUSH
12293: LD_INT 43
12295: PPUSH
12296: LD_INT 0
12298: PPUSH
12299: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
12303: LD_EXP 24
12307: PPUSH
12308: LD_EXP 26
12312: PPUSH
12313: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
12317: LD_EXP 24
12321: PPUSH
12322: LD_INT 79
12324: PPUSH
12325: LD_INT 32
12327: PPUSH
12328: CALL_OW 111
// wait ( 0 0$1 ) ;
12332: LD_INT 35
12334: PPUSH
12335: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
12339: LD_INT 79
12341: PPUSH
12342: LD_INT 32
12344: PPUSH
12345: LD_INT 2
12347: PPUSH
12348: LD_INT 8
12350: NEG
12351: PPUSH
12352: CALL_OW 330
// wait ( 0 0$3 ) ;
12356: LD_INT 105
12358: PPUSH
12359: CALL_OW 67
// SetLives ( veh , 200 ) ;
12363: LD_VAR 0 4
12367: PPUSH
12368: LD_INT 200
12370: PPUSH
12371: CALL_OW 234
// wait ( 0 0$1 ) ;
12375: LD_INT 35
12377: PPUSH
12378: CALL_OW 67
// SetLives ( mech , 10 ) ;
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 10
12389: PPUSH
12390: CALL_OW 234
// wait ( 0 0$2 ) ;
12394: LD_INT 70
12396: PPUSH
12397: CALL_OW 67
// ComWalk ( Heike ) ;
12401: LD_EXP 23
12405: PPUSH
12406: CALL_OW 138
// wait ( 1 ) ;
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
12417: LD_EXP 23
12421: PPUSH
12422: LD_INT 81
12424: PPUSH
12425: LD_INT 25
12427: PPUSH
12428: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
12432: LD_EXP 23
12436: PPUSH
12437: LD_INT 72
12439: PPUSH
12440: LD_INT 25
12442: PPUSH
12443: CALL_OW 171
// wait ( 0 0$3 ) ;
12447: LD_INT 105
12449: PPUSH
12450: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12454: LD_EXP 24
12458: PPUSH
12459: CALL_OW 121
// wait ( 1 ) ;
12463: LD_INT 1
12465: PPUSH
12466: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12470: LD_EXP 24
12474: PPUSH
12475: LD_INT 77
12477: PPUSH
12478: LD_INT 28
12480: PPUSH
12481: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12485: LD_EXP 24
12489: PPUSH
12490: LD_EXP 23
12494: PPUSH
12495: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12499: LD_EXP 24
12503: PPUSH
12504: LD_STRING DO-Start-3
12506: PPUSH
12507: CALL_OW 88
// repeat wait ( 3 ) ;
12511: LD_INT 3
12513: PPUSH
12514: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12518: LD_EXP 23
12522: PPUSH
12523: LD_INT 72
12525: PPUSH
12526: LD_INT 25
12528: PPUSH
12529: CALL_OW 307
12533: IFFALSE 12511
// ComHold ( Heike ) ;
12535: LD_EXP 23
12539: PPUSH
12540: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12544: LD_EXP 24
12548: PPUSH
12549: LD_EXP 23
12553: PPUSH
12554: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12558: LD_EXP 23
12562: PPUSH
12563: LD_EXP 24
12567: PPUSH
12568: CALL_OW 112
// wait ( 0 0$1 ) ;
12572: LD_INT 35
12574: PPUSH
12575: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12579: LD_EXP 23
12583: PPUSH
12584: LD_EXP 24
12588: PPUSH
12589: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12593: LD_EXP 23
12597: PPUSH
12598: LD_STRING DH-Start-4
12600: PPUSH
12601: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12605: LD_EXP 24
12609: PPUSH
12610: LD_STRING DO-Start-5
12612: PPUSH
12613: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12617: LD_EXP 23
12621: PPUSH
12622: LD_STRING DH-Start-6
12624: PPUSH
12625: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12629: LD_EXP 24
12633: PPUSH
12634: LD_STRING DO-Start-7
12636: PPUSH
12637: CALL_OW 88
// if Query ( QOmar ) = 2 then
12641: LD_STRING QOmar
12643: PPUSH
12644: CALL_OW 97
12648: PUSH
12649: LD_INT 2
12651: EQUAL
12652: IFFALSE 12959
// begin Say ( Heike , DH-QuestionN-1 ) ;
12654: LD_EXP 23
12658: PPUSH
12659: LD_STRING DH-QuestionN-1
12661: PPUSH
12662: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12666: LD_EXP 23
12670: PPUSH
12671: LD_INT 58
12673: PPUSH
12674: LD_INT 27
12676: PPUSH
12677: CALL_OW 111
// wait ( 0 0$2 ) ;
12681: LD_INT 70
12683: PPUSH
12684: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12688: LD_EXP 24
12692: PPUSH
12693: LD_EXP 26
12697: PPUSH
12698: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12702: LD_INT 79
12704: PPUSH
12705: LD_INT 32
12707: PPUSH
12708: LD_INT 2
12710: PPUSH
12711: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12715: LD_INT 80
12717: PPUSH
12718: LD_INT 27
12720: PPUSH
12721: LD_INT 2
12723: PPUSH
12724: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12728: LD_INT 58
12730: PPUSH
12731: LD_INT 27
12733: PPUSH
12734: CALL_OW 84
// repeat wait ( 3 ) ;
12738: LD_INT 3
12740: PPUSH
12741: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12745: LD_EXP 23
12749: PPUSH
12750: LD_INT 88
12752: PPUSH
12753: LD_INT 27
12755: PPUSH
12756: CALL_OW 297
12760: IFFALSE 12738
// uc_side := 1 ;
12762: LD_ADDR_OWVAR 20
12766: PUSH
12767: LD_INT 1
12769: ST_TO_ADDR
// uc_nation := nation_american ;
12770: LD_ADDR_OWVAR 21
12774: PUSH
12775: LD_INT 1
12777: ST_TO_ADDR
// amTroops := [ ] ;
12778: LD_ADDR_VAR 0 5
12782: PUSH
12783: EMPTY
12784: ST_TO_ADDR
// for i := 1 to 3 do
12785: LD_ADDR_VAR 0 2
12789: PUSH
12790: DOUBLE
12791: LD_INT 1
12793: DEC
12794: ST_TO_ADDR
12795: LD_INT 3
12797: PUSH
12798: FOR_TO
12799: IFFALSE 12892
// begin PrepareSoldier ( false , 10 ) ;
12801: LD_INT 0
12803: PPUSH
12804: LD_INT 10
12806: PPUSH
12807: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12811: LD_ADDR_VAR 0 5
12815: PUSH
12816: LD_VAR 0 5
12820: PPUSH
12821: CALL_OW 44
12825: PPUSH
12826: CALL 59308 0 2
12830: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12831: LD_VAR 0 5
12835: PUSH
12836: LD_VAR 0 2
12840: ARRAY
12841: PPUSH
12842: LD_INT 2
12844: PPUSH
12845: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12849: LD_VAR 0 5
12853: PUSH
12854: LD_VAR 0 2
12858: ARRAY
12859: PPUSH
12860: LD_INT 10
12862: PPUSH
12863: LD_INT 0
12865: PPUSH
12866: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12870: LD_VAR 0 5
12874: PUSH
12875: LD_VAR 0 2
12879: ARRAY
12880: PPUSH
12881: LD_EXP 23
12885: PPUSH
12886: CALL_OW 115
// end ;
12890: GO 12798
12892: POP
12893: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12894: LD_EXP 23
12898: PPUSH
12899: LD_VAR 0 5
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: PPUSH
12908: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12912: LD_INT 35
12914: PPUSH
12915: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12919: LD_EXP 23
12923: PPUSH
12924: CALL_OW 301
12928: IFTRUE 12941
12930: PUSH
12931: LD_EXP 23
12935: PPUSH
12936: CALL_OW 303
12940: OR
12941: IFFALSE 12912
// wait ( 0 0$2 ) ;
12943: LD_INT 70
12945: PPUSH
12946: CALL_OW 67
// YouLost ( Heike ) ;
12950: LD_STRING Heike
12952: PPUSH
12953: CALL_OW 104
// exit ;
12957: GO 13881
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12959: LD_EXP 23
12963: PPUSH
12964: LD_STRING DH-QuestionY-1
12966: PPUSH
12967: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12971: LD_INT 10
12973: PPUSH
12974: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12978: LD_EXP 24
12982: PPUSH
12983: LD_STRING DO-Story-1
12985: PPUSH
12986: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12990: LD_EXP 24
12994: PPUSH
12995: LD_STRING DO-Story-2
12997: PPUSH
12998: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
13002: LD_EXP 24
13006: PPUSH
13007: LD_STRING DO-Story-3
13009: PPUSH
13010: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
13014: LD_EXP 24
13018: PPUSH
13019: LD_STRING DO-Story-4
13021: PPUSH
13022: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
13026: LD_EXP 23
13030: PPUSH
13031: LD_STRING DH-Story-5
13033: PPUSH
13034: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
13038: LD_EXP 24
13042: PPUSH
13043: LD_STRING DO-Story-6
13045: PPUSH
13046: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
13050: LD_EXP 24
13054: PPUSH
13055: LD_STRING DO-Story-7
13057: PPUSH
13058: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
13062: LD_EXP 23
13066: PPUSH
13067: LD_INT 82
13069: PPUSH
13070: LD_INT 44
13072: PPUSH
13073: CALL_OW 111
// AddComHold ( Heike ) ;
13077: LD_EXP 23
13081: PPUSH
13082: CALL_OW 200
// wait ( 0 0$4 ) ;
13086: LD_INT 140
13088: PPUSH
13089: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
13093: LD_EXP 24
13097: PPUSH
13098: LD_INT 82
13100: PPUSH
13101: LD_INT 41
13103: PPUSH
13104: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
13108: LD_EXP 24
13112: PPUSH
13113: LD_EXP 23
13117: PPUSH
13118: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
13122: LD_INT 35
13124: PPUSH
13125: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
13129: LD_EXP 23
13133: PPUSH
13134: LD_INT 82
13136: PPUSH
13137: LD_INT 44
13139: PPUSH
13140: CALL_OW 307
13144: IFFALSE 13122
// ComTurnXY ( Heike , 81 , 47 ) ;
13146: LD_EXP 23
13150: PPUSH
13151: LD_INT 81
13153: PPUSH
13154: LD_INT 47
13156: PPUSH
13157: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
13161: LD_EXP 23
13165: PPUSH
13166: LD_STRING DH-Story-8
13168: PPUSH
13169: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
13173: LD_EXP 24
13177: PPUSH
13178: LD_STRING DO-Story-9
13180: PPUSH
13181: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
13185: LD_EXP 24
13189: PPUSH
13190: LD_STRING DO-Story-10
13192: PPUSH
13193: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13197: LD_EXP 23
13201: PPUSH
13202: LD_EXP 24
13206: PPUSH
13207: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
13211: LD_EXP 23
13215: PPUSH
13216: LD_STRING DH-Story-11
13218: PPUSH
13219: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
13223: LD_EXP 24
13227: PPUSH
13228: LD_EXP 23
13232: PPUSH
13233: CALL_OW 112
// wait ( 0 0$0.3 ) ;
13237: LD_INT 10
13239: PPUSH
13240: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13244: LD_EXP 24
13248: PPUSH
13249: LD_EXP 23
13253: PPUSH
13254: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
13258: LD_EXP 24
13262: PPUSH
13263: LD_STRING DO-Story-12
13265: PPUSH
13266: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
13270: LD_EXP 23
13274: PPUSH
13275: LD_STRING DH-Story-13
13277: PPUSH
13278: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
13282: LD_EXP 24
13286: PPUSH
13287: LD_STRING DO-Story-14
13289: PPUSH
13290: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
13294: LD_EXP 24
13298: PPUSH
13299: LD_STRING DO-Story-15
13301: PPUSH
13302: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
13306: LD_INT 84
13308: PPUSH
13309: LD_INT 48
13311: PPUSH
13312: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
13316: LD_EXP 23
13320: PPUSH
13321: LD_INT 84
13323: PPUSH
13324: LD_INT 48
13326: PPUSH
13327: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
13331: LD_EXP 23
13335: PPUSH
13336: LD_INT 84
13338: PPUSH
13339: LD_INT 49
13341: PPUSH
13342: CALL_OW 178
// wait ( 0 0$1 ) ;
13346: LD_INT 35
13348: PPUSH
13349: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
13353: LD_EXP 24
13357: PPUSH
13358: LD_EXP 23
13362: PPUSH
13363: CALL_OW 112
// wait ( 0 0$1 ) ;
13367: LD_INT 35
13369: PPUSH
13370: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13374: LD_EXP 24
13378: PPUSH
13379: LD_EXP 23
13383: PPUSH
13384: CALL_OW 119
// wait ( 0 0$0.3 ) ;
13388: LD_INT 10
13390: PPUSH
13391: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
13395: LD_EXP 24
13399: PPUSH
13400: LD_STRING DO-Story-16
13402: PPUSH
13403: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
13407: LD_STRING QOmar2
13409: PPUSH
13410: CALL_OW 97
13414: PUSH
13415: LD_INT 2
13417: EQUAL
13418: IFFALSE 13758
// begin ComTurnUnit ( Heike , Omar ) ;
13420: LD_EXP 23
13424: PPUSH
13425: LD_EXP 24
13429: PPUSH
13430: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
13434: LD_EXP 23
13438: PPUSH
13439: LD_STRING DH-QuestionN-1
13441: PPUSH
13442: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
13446: LD_EXP 23
13450: PPUSH
13451: LD_INT 79
13453: PPUSH
13454: LD_INT 57
13456: PPUSH
13457: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13461: LD_EXP 23
13465: PPUSH
13466: LD_INT 68
13468: PPUSH
13469: LD_INT 53
13471: PPUSH
13472: CALL_OW 171
// wait ( 0 0$2 ) ;
13476: LD_INT 70
13478: PPUSH
13479: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13483: LD_EXP 24
13487: PPUSH
13488: LD_EXP 26
13492: PPUSH
13493: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13497: LD_INT 79
13499: PPUSH
13500: LD_INT 32
13502: PPUSH
13503: LD_INT 2
13505: PPUSH
13506: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13510: LD_INT 80
13512: PPUSH
13513: LD_INT 27
13515: PPUSH
13516: LD_INT 2
13518: PPUSH
13519: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13523: LD_INT 68
13525: PPUSH
13526: LD_INT 53
13528: PPUSH
13529: CALL_OW 84
// repeat wait ( 3 ) ;
13533: LD_INT 3
13535: PPUSH
13536: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13540: LD_EXP 23
13544: PPUSH
13545: LD_INT 68
13547: PPUSH
13548: LD_INT 53
13550: PPUSH
13551: CALL_OW 297
13555: PUSH
13556: LD_INT 6
13558: LESS
13559: IFFALSE 13533
// uc_side := 1 ;
13561: LD_ADDR_OWVAR 20
13565: PUSH
13566: LD_INT 1
13568: ST_TO_ADDR
// uc_nation := nation_american ;
13569: LD_ADDR_OWVAR 21
13573: PUSH
13574: LD_INT 1
13576: ST_TO_ADDR
// amTroops := [ ] ;
13577: LD_ADDR_VAR 0 5
13581: PUSH
13582: EMPTY
13583: ST_TO_ADDR
// for i := 1 to 3 do
13584: LD_ADDR_VAR 0 2
13588: PUSH
13589: DOUBLE
13590: LD_INT 1
13592: DEC
13593: ST_TO_ADDR
13594: LD_INT 3
13596: PUSH
13597: FOR_TO
13598: IFFALSE 13691
// begin PrepareSoldier ( false , 10 ) ;
13600: LD_INT 0
13602: PPUSH
13603: LD_INT 10
13605: PPUSH
13606: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13610: LD_ADDR_VAR 0 5
13614: PUSH
13615: LD_VAR 0 5
13619: PPUSH
13620: CALL_OW 44
13624: PPUSH
13625: CALL 59308 0 2
13629: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13630: LD_VAR 0 5
13634: PUSH
13635: LD_VAR 0 2
13639: ARRAY
13640: PPUSH
13641: LD_INT 2
13643: PPUSH
13644: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13648: LD_VAR 0 5
13652: PUSH
13653: LD_VAR 0 2
13657: ARRAY
13658: PPUSH
13659: LD_INT 11
13661: PPUSH
13662: LD_INT 0
13664: PPUSH
13665: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13669: LD_VAR 0 5
13673: PUSH
13674: LD_VAR 0 2
13678: ARRAY
13679: PPUSH
13680: LD_EXP 23
13684: PPUSH
13685: CALL_OW 115
// end ;
13689: GO 13597
13691: POP
13692: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13693: LD_EXP 23
13697: PPUSH
13698: LD_VAR 0 5
13702: PUSH
13703: LD_INT 1
13705: ARRAY
13706: PPUSH
13707: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13711: LD_INT 35
13713: PPUSH
13714: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13718: LD_EXP 23
13722: PPUSH
13723: CALL_OW 301
13727: IFTRUE 13740
13729: PUSH
13730: LD_EXP 23
13734: PPUSH
13735: CALL_OW 303
13739: OR
13740: IFFALSE 13711
// wait ( 0 0$2 ) ;
13742: LD_INT 70
13744: PPUSH
13745: CALL_OW 67
// YouLost ( Heike ) ;
13749: LD_STRING Heike
13751: PPUSH
13752: CALL_OW 104
// exit ;
13756: GO 13881
// end ; Say ( Omar , DO-Objective-1 ) ;
13758: LD_EXP 24
13762: PPUSH
13763: LD_STRING DO-Objective-1
13765: PPUSH
13766: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13770: LD_EXP 23
13774: PPUSH
13775: LD_EXP 24
13779: PPUSH
13780: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13784: LD_EXP 23
13788: PPUSH
13789: LD_STRING DH-Objective-2
13791: PPUSH
13792: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13796: LD_EXP 24
13800: PPUSH
13801: LD_STRING DO-Objective-3
13803: PPUSH
13804: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13808: LD_INT 79
13810: PPUSH
13811: LD_INT 32
13813: PPUSH
13814: LD_INT 2
13816: PPUSH
13817: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13821: LD_INT 80
13823: PPUSH
13824: LD_INT 27
13826: PPUSH
13827: LD_INT 2
13829: PPUSH
13830: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13834: LD_EXP 24
13838: PPUSH
13839: LD_INT 2
13841: PPUSH
13842: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13846: LD_EXP 26
13850: PPUSH
13851: LD_INT 2
13853: PPUSH
13854: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13858: LD_STRING O1
13860: PPUSH
13861: CALL_OW 337
// InGameOff ;
13865: CALL_OW 9
// gameActive := true ;
13869: LD_ADDR_EXP 19
13873: PUSH
13874: LD_INT 1
13876: ST_TO_ADDR
// SaveForQuickRestart ;
13877: CALL_OW 22
// end ;
13881: LD_VAR 0 1
13885: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13886: LD_EXP 19
13890: IFFALSE 13899
13892: PUSH
13893: LD_EXP 7
13897: NOT
13898: AND
13899: IFFALSE 13920
13901: PUSH
13902: LD_INT 4
13904: PPUSH
13905: LD_INT 22
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 70
13919: AND
13920: IFFALSE 14071
13922: GO 13924
13924: DISABLE
13925: LD_INT 0
13927: PPUSH
// begin spotArabianBase := true ;
13928: LD_ADDR_EXP 7
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// DialogueOn ;
13936: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13940: LD_INT 232
13942: PPUSH
13943: LD_INT 101
13945: PPUSH
13946: LD_INT 2
13948: PPUSH
13949: LD_INT 22
13951: NEG
13952: PPUSH
13953: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13957: LD_INT 232
13959: PPUSH
13960: LD_INT 101
13962: PPUSH
13963: LD_INT 2
13965: PPUSH
13966: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13970: LD_INT 232
13972: PPUSH
13973: LD_INT 101
13975: PPUSH
13976: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13980: LD_ADDR_VAR 0 1
13984: PUSH
13985: LD_INT 4
13987: PPUSH
13988: LD_INT 22
13990: PUSH
13991: LD_INT 5
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 70
14002: PUSH
14003: FOR_IN
14004: IFFALSE 14020
// SetSide ( i , 2 ) ;
14006: LD_VAR 0 1
14010: PPUSH
14011: LD_INT 2
14013: PPUSH
14014: CALL_OW 235
14018: GO 14003
14020: POP
14021: POP
// if not spotAmericanBase then
14022: LD_EXP 6
14026: NOT
14027: IFFALSE 14043
// Say ( Omar , DO-ArBase-1a ) else
14029: LD_EXP 24
14033: PPUSH
14034: LD_STRING DO-ArBase-1a
14036: PPUSH
14037: CALL_OW 88
14041: GO 14055
// Say ( Omar , DO-ArBase-1b ) ;
14043: LD_EXP 24
14047: PPUSH
14048: LD_STRING DO-ArBase-1b
14050: PPUSH
14051: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
14055: LD_EXP 23
14059: PPUSH
14060: LD_STRING DH-ArBase-2
14062: PPUSH
14063: CALL_OW 88
// DialogueOff ;
14067: CALL_OW 7
// end ;
14071: PPOPN 1
14073: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14074: LD_EXP 19
14078: IFFALSE 14100
14080: PUSH
14081: LD_INT 87
14083: PPUSH
14084: CALL_OW 306
14088: IFTRUE 14099
14090: PUSH
14091: LD_INT 87
14093: PPUSH
14094: CALL_OW 313
14098: OR
14099: AND
14100: IFFALSE 14113
14102: PUSH
14103: LD_EXP 23
14107: PPUSH
14108: CALL_OW 302
14112: AND
14113: IFFALSE 14126
14115: PUSH
14116: LD_EXP 24
14120: PPUSH
14121: CALL_OW 302
14125: AND
14126: IFFALSE 14470
14128: GO 14130
14130: DISABLE
// begin DialogueOn ;
14131: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
14135: LD_EXP 23
14139: PPUSH
14140: LD_STRING DH-Fac-1
14142: PPUSH
14143: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
14147: LD_EXP 24
14151: PPUSH
14152: LD_STRING DOm-Fac-2
14154: PPUSH
14155: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
14159: LD_STRING 03_CargoRecycled
14161: PPUSH
14162: LD_INT 0
14164: PPUSH
14165: CALL_OW 30
14169: IFFALSE 14184
// SetTech ( tech_cargo , 2 , state_researched ) ;
14171: LD_INT 83
14173: PPUSH
14174: LD_INT 2
14176: PPUSH
14177: LD_INT 2
14179: PPUSH
14180: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
14184: LD_STRING 09_Markov
14186: PPUSH
14187: CALL_OW 28
14191: IFFALSE 14306
// begin Say ( Heike , DH-Fac-3a ) ;
14193: LD_EXP 23
14197: PPUSH
14198: LD_STRING DH-Fac-3a
14200: PPUSH
14201: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
14205: LD_INT 69
14207: PPUSH
14208: LD_INT 2
14210: PPUSH
14211: LD_INT 2
14213: PPUSH
14214: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
14218: LD_INT 39
14220: PPUSH
14221: LD_INT 2
14223: PPUSH
14224: LD_INT 2
14226: PPUSH
14227: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
14231: LD_INT 6
14233: PPUSH
14234: LD_INT 2
14236: PPUSH
14237: LD_INT 2
14239: PPUSH
14240: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14244: LD_INT 15
14246: PPUSH
14247: LD_INT 2
14249: PPUSH
14250: LD_INT 2
14252: PPUSH
14253: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14257: LD_EXP 23
14261: PPUSH
14262: LD_INT 3
14264: PPUSH
14265: CALL_OW 259
14269: PUSH
14270: LD_INT 10
14272: LESS
14273: IFFALSE 14304
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14275: LD_EXP 23
14279: PPUSH
14280: LD_INT 3
14282: PPUSH
14283: LD_EXP 23
14287: PPUSH
14288: LD_INT 3
14290: PPUSH
14291: CALL_OW 259
14295: PUSH
14296: LD_INT 1
14298: PLUS
14299: PPUSH
14300: CALL_OW 237
// end else
14304: GO 14459
// if TestCharacters ( 09_Olaf ) then
14306: LD_STRING 09_Olaf
14308: PPUSH
14309: CALL_OW 28
14313: IFFALSE 14402
// begin Say ( Heike , DH-Fac-3b ) ;
14315: LD_EXP 23
14319: PPUSH
14320: LD_STRING DH-Fac-3b
14322: PPUSH
14323: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14327: LD_INT 6
14329: PPUSH
14330: LD_INT 2
14332: PPUSH
14333: LD_INT 2
14335: PPUSH
14336: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14340: LD_INT 15
14342: PPUSH
14343: LD_INT 2
14345: PPUSH
14346: LD_INT 2
14348: PPUSH
14349: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14353: LD_EXP 23
14357: PPUSH
14358: LD_INT 3
14360: PPUSH
14361: CALL_OW 259
14365: PUSH
14366: LD_INT 10
14368: LESS
14369: IFFALSE 14400
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14371: LD_EXP 23
14375: PPUSH
14376: LD_INT 3
14378: PPUSH
14379: LD_EXP 23
14383: PPUSH
14384: LD_INT 3
14386: PPUSH
14387: CALL_OW 259
14391: PUSH
14392: LD_INT 1
14394: PLUS
14395: PPUSH
14396: CALL_OW 237
// end else
14400: GO 14459
// if GetSkill ( Heike , skill_mechanical ) > 5 then
14402: LD_EXP 23
14406: PPUSH
14407: LD_INT 3
14409: PPUSH
14410: CALL_OW 259
14414: PUSH
14415: LD_INT 5
14417: GREATER
14418: IFFALSE 14447
// begin Say ( Heike , DH-Fac-3c ) ;
14420: LD_EXP 23
14424: PPUSH
14425: LD_STRING DH-Fac-3c
14427: PPUSH
14428: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14432: LD_INT 6
14434: PPUSH
14435: LD_INT 2
14437: PPUSH
14438: LD_INT 2
14440: PPUSH
14441: CALL_OW 322
// end else
14445: GO 14459
// Say ( Heike , DH-Fac-3d ) ;
14447: LD_EXP 23
14451: PPUSH
14452: LD_STRING DH-Fac-3d
14454: PPUSH
14455: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
14459: LD_STRING ARemote
14461: PPUSH
14462: CALL_OW 337
// DialogueOff ;
14466: CALL_OW 7
// end ;
14470: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14471: LD_EXP 19
14475: IFFALSE 14497
14477: PUSH
14478: LD_INT 89
14480: PPUSH
14481: CALL_OW 306
14485: IFTRUE 14496
14487: PUSH
14488: LD_INT 89
14490: PPUSH
14491: CALL_OW 313
14495: OR
14496: AND
14497: IFFALSE 14510
14499: PUSH
14500: LD_EXP 23
14504: PPUSH
14505: CALL_OW 302
14509: AND
14510: IFFALSE 14523
14512: PUSH
14513: LD_EXP 24
14517: PPUSH
14518: CALL_OW 302
14522: AND
14523: IFFALSE 14751
14525: GO 14527
14527: DISABLE
// begin DialogueOn ;
14528: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14532: LD_EXP 23
14536: PPUSH
14537: LD_STRING DH-Lab-1
14539: PPUSH
14540: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14544: LD_EXP 24
14548: PPUSH
14549: LD_STRING DOm-Lab-2
14551: PPUSH
14552: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14556: LD_STRING 09_Aviradze
14558: PPUSH
14559: CALL_OW 28
14563: IFFALSE 14618
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14565: LD_INT 1
14567: PPUSH
14568: LD_INT 2
14570: PPUSH
14571: LD_INT 2
14573: PPUSH
14574: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14578: LD_INT 2
14580: PPUSH
14581: LD_INT 2
14583: PPUSH
14584: LD_INT 2
14586: PPUSH
14587: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14591: LD_INT 11
14593: PPUSH
14594: LD_INT 2
14596: PPUSH
14597: LD_INT 2
14599: PPUSH
14600: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14604: LD_EXP 23
14608: PPUSH
14609: LD_STRING DH-Lab-4a
14611: PPUSH
14612: CALL_OW 88
// end else
14616: GO 14630
// Say ( Heike , DH-Lab-4b ) ;
14618: LD_EXP 23
14622: PPUSH
14623: LD_STRING DH-Lab-4b
14625: PPUSH
14626: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14630: LD_STRING 05_DrugsTested
14632: PPUSH
14633: LD_EXP 1
14637: PPUSH
14638: CALL_OW 30
14642: IFFALSE 14669
// begin Say ( Heike , DH-Lab-5a ) ;
14644: LD_EXP 23
14648: PPUSH
14649: LD_STRING DH-Lab-5a
14651: PPUSH
14652: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14656: LD_INT 5
14658: PPUSH
14659: LD_INT 2
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14669: LD_STRING 09_ApeBrain
14671: PPUSH
14672: LD_EXP 1
14676: PPUSH
14677: CALL_OW 30
14681: IFFALSE 14720
// begin Say ( Heike , DH-Lab-6a ) ;
14683: LD_EXP 23
14687: PPUSH
14688: LD_STRING DH-Lab-6a
14690: PPUSH
14691: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14695: LD_EXP 24
14699: PPUSH
14700: LD_STRING DOm-Lab-7a
14702: PPUSH
14703: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14707: LD_INT 4
14709: PPUSH
14710: LD_INT 2
14712: PPUSH
14713: LD_INT 1
14715: PPUSH
14716: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14720: LD_STRING 09_ApeNeural
14722: PPUSH
14723: LD_EXP 1
14727: PPUSH
14728: CALL_OW 30
14732: IFFALSE 14747
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14734: LD_INT 3
14736: PPUSH
14737: LD_INT 2
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 322
// end ; DialogueOff ;
14747: CALL_OW 7
// end ;
14751: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14752: LD_EXP 19
14756: IFFALSE 14788
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_INT 2
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 25
14771: PUSH
14772: LD_INT 12
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: AND
14788: IFFALSE 14823
14790: GO 14792
14792: DISABLE
// begin if IsOk ( Heike ) then
14793: LD_EXP 23
14797: PPUSH
14798: CALL_OW 302
14802: IFFALSE 14816
// Say ( Heike , DH-Ape-1 ) ;
14804: LD_EXP 23
14808: PPUSH
14809: LD_STRING DH-Ape-1
14811: PPUSH
14812: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14816: LD_STRING AApes
14818: PPUSH
14819: CALL_OW 337
// end ;
14823: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14824: LD_EXP 19
14828: IFFALSE 14864
14830: PUSH
14831: LD_INT 22
14833: PUSH
14834: LD_INT 2
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 25
14843: PUSH
14844: LD_INT 15
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: PUSH
14860: LD_INT 5
14862: GREATEREQUAL
14863: AND
14864: IFFALSE 14968
14866: GO 14868
14868: DISABLE
// begin hasApes := true ;
14869: LD_ADDR_EXP 16
14873: PUSH
14874: LD_INT 1
14876: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14877: LD_STRING AApesOut
14879: PPUSH
14880: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14884: LD_EXP 23
14888: PPUSH
14889: CALL_OW 302
14893: NOT
14894: IFTRUE 14908
14896: PUSH
14897: LD_EXP 24
14901: PPUSH
14902: CALL_OW 302
14906: NOT
14907: OR
14908: IFFALSE 14912
// exit ;
14910: GO 14968
// DialogueOn ;
14912: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14916: LD_EXP 23
14920: PPUSH
14921: LD_STRING DH-ApeArmy-1
14923: PPUSH
14924: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14928: LD_EXP 24
14932: PPUSH
14933: LD_STRING DOm-ApeArmy-2
14935: PPUSH
14936: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14940: LD_EXP 23
14944: PPUSH
14945: LD_STRING DH-ApeArmy-3
14947: PPUSH
14948: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14952: LD_EXP 24
14956: PPUSH
14957: LD_STRING DOm-ApeArmy-4
14959: PPUSH
14960: CALL_OW 88
// DialogueOff ;
14964: CALL_OW 7
// end ;
14968: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14969: LD_EXP 19
14973: IFFALSE 14991
14975: PUSH
14976: LD_INT 5
14978: PPUSH
14979: LD_INT 2
14981: PPUSH
14982: CALL_OW 321
14986: PUSH
14987: LD_INT 2
14989: EQUAL
14990: AND
14991: IFFALSE 15027
14993: GO 14995
14995: DISABLE
// begin hasDrugs := true ;
14996: LD_ADDR_EXP 17
15000: PUSH
15001: LD_INT 1
15003: ST_TO_ADDR
// if IsOk ( Heike ) then
15004: LD_EXP 23
15008: PPUSH
15009: CALL_OW 302
15013: IFFALSE 15027
// Say ( Heike , DH-Stim-1 ) ;
15015: LD_EXP 23
15019: PPUSH
15020: LD_STRING DH-Stim-1
15022: PPUSH
15023: CALL_OW 88
// end ;
15027: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
15028: LD_EXP 19
15032: IFFALSE 15064
15034: PUSH
15035: LD_INT 22
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 25
15047: PUSH
15048: LD_INT 17
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: AND
15064: IFFALSE 15081
15066: GO 15068
15068: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
15069: LD_EXP 23
15073: PPUSH
15074: LD_STRING DH-Kamikadze-1
15076: PPUSH
15077: CALL_OW 88
15081: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
15082: LD_EXP 19
15086: IFFALSE 15118
15088: PUSH
15089: LD_INT 22
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 31
15101: PUSH
15102: LD_INT 31
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: AND
15118: IFFALSE 15131
15120: PUSH
15121: LD_EXP 24
15125: PPUSH
15126: CALL_OW 302
15130: AND
15131: IFFALSE 15144
15133: PUSH
15134: LD_EXP 23
15138: PPUSH
15139: CALL_OW 302
15143: AND
15144: IFFALSE 15229
15146: GO 15148
15148: DISABLE
// begin InGameOn ;
15149: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
15153: LD_EXP 24
15157: PPUSH
15158: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
15162: LD_EXP 23
15166: PPUSH
15167: LD_STRING DH-Mastodont-1
15169: PPUSH
15170: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
15174: LD_EXP 24
15178: PPUSH
15179: LD_STRING DOm-Mastodont-2
15181: PPUSH
15182: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
15186: LD_EXP 23
15190: PPUSH
15191: LD_STRING DH-Mastodont-3
15193: PPUSH
15194: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
15198: LD_EXP 24
15202: PPUSH
15203: LD_STRING DOm-Mastodont-4
15205: PPUSH
15206: CALL_OW 88
// hasMastodont := true ;
15210: LD_ADDR_EXP 13
15214: PUSH
15215: LD_INT 1
15217: ST_TO_ADDR
// InGameOff ;
15218: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
15222: LD_STRING ACH_MASTODONTTAME
15224: PPUSH
15225: CALL_OW 543
// end ;
15229: END
// every 0 0$1 trigger gameActive and tigerCounter do
15230: LD_EXP 19
15234: IFFALSE 15242
15236: PUSH
15237: LD_EXP 21
15241: AND
15242: IFFALSE 15254
15244: GO 15246
15246: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
15247: LD_STRING ACH_TIGERTAME
15249: PPUSH
15250: CALL_OW 543
15254: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
15255: LD_EXP 19
15259: IFFALSE 15271
15261: PUSH
15262: LD_EXP 21
15266: PUSH
15267: LD_INT 1
15269: GREATER
15270: AND
15271: IFFALSE 15377
15273: GO 15275
15275: DISABLE
// begin hasTigers := true ;
15276: LD_ADDR_EXP 15
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
15284: LD_EXP 24
15288: PPUSH
15289: CALL_OW 302
15293: NOT
15294: IFTRUE 15308
15296: PUSH
15297: LD_EXP 23
15301: PPUSH
15302: CALL_OW 302
15306: NOT
15307: OR
15308: IFFALSE 15312
// exit ;
15310: GO 15377
// CenterNowOnUnits ( Omar ) ;
15312: LD_EXP 24
15316: PPUSH
15317: CALL_OW 87
// DialogueOn ;
15321: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
15325: LD_EXP 24
15329: PPUSH
15330: LD_STRING DOm-Tiger-1
15332: PPUSH
15333: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
15337: LD_EXP 23
15341: PPUSH
15342: LD_STRING DH-Tiger-2
15344: PPUSH
15345: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
15349: LD_EXP 24
15353: PPUSH
15354: LD_STRING DOm-Tiger-3
15356: PPUSH
15357: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
15361: LD_EXP 23
15365: PPUSH
15366: LD_STRING DH-Tiger-4
15368: PPUSH
15369: CALL_OW 88
// DialogueOff ;
15373: CALL_OW 7
// end ;
15377: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
15378: LD_EXP 19
15382: IFFALSE 15425
15384: PUSH
15385: LD_INT 22
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 50
15397: PUSH
15398: EMPTY
15399: LIST
15400: PUSH
15401: LD_INT 33
15403: PUSH
15404: LD_INT 2
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: PPUSH
15416: CALL_OW 69
15420: PUSH
15421: LD_INT 3
15423: GREATEREQUAL
15424: AND
15425: IFFALSE 15468
15427: GO 15429
15429: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
15430: LD_STRING ARemoteOut
15432: PPUSH
15433: CALL_OW 337
// hasVehicles := true ;
15437: LD_ADDR_EXP 14
15441: PUSH
15442: LD_INT 1
15444: ST_TO_ADDR
// if IsOk ( Heike ) then
15445: LD_EXP 23
15449: PPUSH
15450: CALL_OW 302
15454: IFFALSE 15468
// Say ( Heike , DH-Mechanic-1 ) ;
15456: LD_EXP 23
15460: PPUSH
15461: LD_STRING DH-Mechanic-1
15463: PPUSH
15464: CALL_OW 88
// end ;
15468: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( 2 , amBaseArea ) ) do
15469: LD_EXP 19
15473: IFFALSE 15508
15475: PUSH
15476: LD_INT 29
15478: PPUSH
15479: LD_INT 22
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 70
15493: IFTRUE 15507
15495: PUSH
15496: LD_INT 2
15498: PPUSH
15499: LD_INT 1
15501: PPUSH
15502: CALL_OW 294
15506: OR
15507: AND
15508: IFFALSE 15521
15510: GO 15512
15512: DISABLE
// spotAmericanBase := true ;
15513: LD_ADDR_EXP 6
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
15521: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15522: LD_EXP 19
15526: IFFALSE 15534
15528: PUSH
15529: LD_EXP 6
15533: AND
15534: IFFALSE 15547
15536: PUSH
15537: LD_EXP 24
15541: PPUSH
15542: CALL_OW 302
15546: AND
15547: IFFALSE 15560
15549: PUSH
15550: LD_EXP 23
15554: PPUSH
15555: CALL_OW 302
15559: AND
15560: IFFALSE 15800
15562: GO 15564
15564: DISABLE
// begin DialogueOn ;
15565: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15569: LD_INT 92
15571: PPUSH
15572: LD_INT 129
15574: PPUSH
15575: LD_INT 2
15577: PPUSH
15578: LD_INT 22
15580: NEG
15581: PPUSH
15582: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15586: LD_INT 92
15588: PPUSH
15589: LD_INT 129
15591: PPUSH
15592: LD_INT 2
15594: PPUSH
15595: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15599: LD_INT 92
15601: PPUSH
15602: LD_INT 129
15604: PPUSH
15605: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15609: LD_INT 10
15611: PPUSH
15612: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15616: LD_EXP 24
15620: PPUSH
15621: LD_STRING DO-AmBase-1
15623: PPUSH
15624: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15628: LD_EXP 23
15632: PPUSH
15633: LD_STRING DH-AmBase-2
15635: PPUSH
15636: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15640: LD_EXP 24
15644: PPUSH
15645: LD_STRING DO-AmBase-3
15647: PPUSH
15648: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15652: LD_EXP 23
15656: PPUSH
15657: LD_STRING DH-AmBase-4
15659: PPUSH
15660: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15664: LD_EXP 24
15668: PPUSH
15669: LD_STRING DO-AmBase-5
15671: PPUSH
15672: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15676: LD_EXP 23
15680: PPUSH
15681: LD_STRING DH-AmBase-6
15683: PPUSH
15684: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15688: LD_EXP 24
15692: PPUSH
15693: LD_STRING DO-AmBase-7
15695: PPUSH
15696: CALL_OW 88
// if not spotArabianBase then
15700: LD_EXP 7
15704: NOT
15705: IFFALSE 15721
// begin Say ( Omar , DO-AmBase-8a ) ;
15707: LD_EXP 24
15711: PPUSH
15712: LD_STRING DO-AmBase-8a
15714: PPUSH
15715: CALL_OW 88
// end else
15719: GO 15733
// begin Say ( Omar , DO-AmBase-8b ) ;
15721: LD_EXP 24
15725: PPUSH
15726: LD_STRING DO-AmBase-8b
15728: PPUSH
15729: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15733: LD_EXP 23
15737: PPUSH
15738: CALL_OW 310
15742: IFFALSE 15760
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15744: LD_EXP 23
15748: PPUSH
15749: CALL_OW 310
15753: PPUSH
15754: CALL_OW 87
15758: GO 15769
// CenterNowOnUnits ( Heike ) ;
15760: LD_EXP 23
15764: PPUSH
15765: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15769: LD_EXP 23
15773: PPUSH
15774: LD_STRING DH-AmBase-9
15776: PPUSH
15777: CALL_OW 88
// DialogueOff ;
15781: CALL_OW 7
// spotByAmerican := true ;
15785: LD_ADDR_EXP 8
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15793: LD_STRING O2
15795: PPUSH
15796: CALL_OW 337
// end ;
15800: END
// function TalkAboutLegion ; begin
15801: LD_INT 0
15803: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15804: LD_EXP 23
15808: PPUSH
15809: LD_STRING DH-Legion-1
15811: PPUSH
15812: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15816: LD_EXP 24
15820: PPUSH
15821: LD_STRING DOm-Legion-2
15823: PPUSH
15824: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15828: LD_EXP 23
15832: PPUSH
15833: LD_STRING DH-Legion-3
15835: PPUSH
15836: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15840: LD_EXP 24
15844: PPUSH
15845: LD_STRING DOm-Legion-4
15847: PPUSH
15848: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15852: LD_EXP 23
15856: PPUSH
15857: LD_STRING DH-Legion-5
15859: PPUSH
15860: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15864: LD_EXP 24
15868: PPUSH
15869: LD_STRING DOm-Legion-6
15871: PPUSH
15872: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15876: LD_EXP 23
15880: PPUSH
15881: LD_STRING DH-Legion-7
15883: PPUSH
15884: CALL_OW 88
// end ;
15888: LD_VAR 0 1
15892: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15893: LD_EXP 19
15897: IFFALSE 15922
15899: PUSH
15900: LD_EXP 23
15904: PUSH
15905: LD_EXP 24
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: LD_INT 22
15916: PPUSH
15917: CALL 11864 0 2
15921: AND
15922: IFFALSE 15931
15924: PUSH
15925: LD_EXP 9
15929: NOT
15930: AND
15931: IFFALSE 15940
15933: PUSH
15934: LD_EXP 10
15938: NOT
15939: AND
15940: IFFALSE 16427
15942: GO 15944
15944: DISABLE
15945: LD_INT 0
15947: PPUSH
15948: PPUSH
15949: PPUSH
// begin uc_side := 8 ;
15950: LD_ADDR_OWVAR 20
15954: PUSH
15955: LD_INT 8
15957: ST_TO_ADDR
// uc_nation := nation_american ;
15958: LD_ADDR_OWVAR 21
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15966: LD_INT 3
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: LD_INT 9
15977: PPUSH
15978: LD_INT 90
15980: PPUSH
15981: CALL 26138 0 5
// veh := CreateVehicle ;
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: CALL_OW 45
15994: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15995: LD_ADDR_EXP 43
15999: PUSH
16000: LD_EXP 43
16004: PPUSH
16005: LD_VAR 0 3
16009: PPUSH
16010: CALL 59308 0 2
16014: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
16015: LD_VAR 0 3
16019: PPUSH
16020: LD_INT 2
16022: PPUSH
16023: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
16027: LD_VAR 0 3
16031: PPUSH
16032: LD_INT 126
16034: PPUSH
16035: LD_INT 18
16037: PPUSH
16038: LD_INT 0
16040: PPUSH
16041: CALL_OW 48
// uc_nation := nation_arabian ;
16045: LD_ADDR_OWVAR 21
16049: PUSH
16050: LD_INT 2
16052: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16053: LD_INT 0
16055: PPUSH
16056: LD_INT 6
16058: PUSH
16059: LD_INT 7
16061: PUSH
16062: LD_INT 8
16064: PUSH
16065: LD_INT 9
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: PUSH
16074: LD_OWVAR 67
16078: ARRAY
16079: PPUSH
16080: CALL_OW 383
// un := CreateHuman ;
16084: LD_ADDR_VAR 0 2
16088: PUSH
16089: CALL_OW 44
16093: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16094: LD_ADDR_EXP 38
16098: PUSH
16099: LD_EXP 38
16103: PPUSH
16104: LD_VAR 0 2
16108: PPUSH
16109: CALL 59308 0 2
16113: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16114: LD_VAR 0 2
16118: PPUSH
16119: LD_VAR 0 3
16123: PPUSH
16124: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16128: LD_INT 0
16130: PPUSH
16131: LD_INT 6
16133: PUSH
16134: LD_INT 7
16136: PUSH
16137: LD_INT 8
16139: PUSH
16140: LD_INT 9
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: PUSH
16149: LD_OWVAR 67
16153: ARRAY
16154: PPUSH
16155: CALL_OW 381
// for i := 1 to 3 do
16159: LD_ADDR_VAR 0 1
16163: PUSH
16164: DOUBLE
16165: LD_INT 1
16167: DEC
16168: ST_TO_ADDR
16169: LD_INT 3
16171: PUSH
16172: FOR_TO
16173: IFFALSE 16240
// begin un := CreateHuman ;
16175: LD_ADDR_VAR 0 2
16179: PUSH
16180: CALL_OW 44
16184: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16185: LD_ADDR_EXP 38
16189: PUSH
16190: LD_EXP 38
16194: PPUSH
16195: LD_VAR 0 2
16199: PPUSH
16200: CALL 59308 0 2
16204: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16205: LD_VAR 0 2
16209: PPUSH
16210: LD_INT 2
16212: PPUSH
16213: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
16217: LD_VAR 0 2
16221: PPUSH
16222: LD_INT 126
16224: PPUSH
16225: LD_INT 18
16227: PPUSH
16228: LD_INT 4
16230: PPUSH
16231: LD_INT 0
16233: PPUSH
16234: CALL_OW 50
// end ;
16238: GO 16172
16240: POP
16241: POP
// wait ( 0 0$01 ) ;
16242: LD_INT 35
16244: PPUSH
16245: CALL_OW 67
// DialogueOn ;
16249: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
16253: LD_INT 126
16255: PPUSH
16256: LD_INT 18
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: LD_INT 16
16264: NEG
16265: PPUSH
16266: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
16270: LD_INT 126
16272: PPUSH
16273: LD_INT 18
16275: PPUSH
16276: CALL_OW 86
// TalkAboutLegion ;
16280: CALL 15801 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
16284: LD_INT 126
16286: PPUSH
16287: LD_INT 18
16289: PPUSH
16290: LD_INT 2
16292: PPUSH
16293: CALL_OW 331
// DialogueOff ;
16297: CALL_OW 7
// spotLegion := true ;
16301: LD_ADDR_EXP 10
16305: PUSH
16306: LD_INT 1
16308: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16309: LD_EXP 38
16313: PPUSH
16314: LD_INT 164
16316: PPUSH
16317: LD_INT 47
16319: PPUSH
16320: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16324: LD_EXP 38
16328: PPUSH
16329: LD_INT 179
16331: PPUSH
16332: LD_INT 20
16334: PPUSH
16335: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16339: LD_INT 35
16341: PPUSH
16342: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16346: LD_EXP 38
16350: PPUSH
16351: LD_INT 60
16353: PUSH
16354: EMPTY
16355: LIST
16356: PPUSH
16357: CALL_OW 72
16361: NOT
16362: IFTRUE 16382
16364: PUSH
16365: LD_EXP 38
16369: PPUSH
16370: LD_INT 50
16372: PUSH
16373: EMPTY
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: NOT
16381: OR
16382: IFFALSE 16339
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16384: LD_EXP 38
16388: PPUSH
16389: LD_INT 50
16391: PUSH
16392: EMPTY
16393: LIST
16394: PPUSH
16395: CALL_OW 72
16399: NOT
16400: IFFALSE 16404
// exit ;
16402: GO 16427
// legForces := legForces union legEForces ;
16404: LD_ADDR_EXP 37
16408: PUSH
16409: LD_EXP 37
16413: PUSH
16414: LD_EXP 38
16418: UNION
16419: ST_TO_ADDR
// legEForces := [ ] ;
16420: LD_ADDR_EXP 38
16424: PUSH
16425: EMPTY
16426: ST_TO_ADDR
// end ;
16427: PPOPN 3
16429: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
16430: LD_EXP 19
16434: IFFALSE 16459
16436: PUSH
16437: LD_EXP 23
16441: PUSH
16442: LD_EXP 24
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PPUSH
16451: LD_INT 23
16453: PPUSH
16454: CALL 11864 0 2
16458: AND
16459: IFFALSE 16468
16461: PUSH
16462: LD_EXP 9
16466: NOT
16467: AND
16468: IFFALSE 16477
16470: PUSH
16471: LD_EXP 10
16475: NOT
16476: AND
16477: IFFALSE 16964
16479: GO 16481
16481: DISABLE
16482: LD_INT 0
16484: PPUSH
16485: PPUSH
16486: PPUSH
// begin uc_side := 8 ;
16487: LD_ADDR_OWVAR 20
16491: PUSH
16492: LD_INT 8
16494: ST_TO_ADDR
// uc_nation := nation_american ;
16495: LD_ADDR_OWVAR 21
16499: PUSH
16500: LD_INT 1
16502: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16503: LD_INT 3
16505: PPUSH
16506: LD_INT 1
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: LD_INT 9
16514: PPUSH
16515: LD_INT 90
16517: PPUSH
16518: CALL 26138 0 5
// veh := CreateVehicle ;
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: CALL_OW 45
16531: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16532: LD_ADDR_EXP 43
16536: PUSH
16537: LD_EXP 43
16541: PPUSH
16542: LD_VAR 0 3
16546: PPUSH
16547: CALL 59308 0 2
16551: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16552: LD_VAR 0 3
16556: PPUSH
16557: LD_INT 3
16559: PPUSH
16560: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 224
16571: PPUSH
16572: LD_INT 57
16574: PPUSH
16575: LD_INT 0
16577: PPUSH
16578: CALL_OW 48
// uc_nation := nation_arabian ;
16582: LD_ADDR_OWVAR 21
16586: PUSH
16587: LD_INT 2
16589: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16590: LD_INT 0
16592: PPUSH
16593: LD_INT 6
16595: PUSH
16596: LD_INT 7
16598: PUSH
16599: LD_INT 8
16601: PUSH
16602: LD_INT 9
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: PUSH
16611: LD_OWVAR 67
16615: ARRAY
16616: PPUSH
16617: CALL_OW 383
// un := CreateHuman ;
16621: LD_ADDR_VAR 0 2
16625: PUSH
16626: CALL_OW 44
16630: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16631: LD_ADDR_EXP 38
16635: PUSH
16636: LD_EXP 38
16640: PPUSH
16641: LD_VAR 0 2
16645: PPUSH
16646: CALL 59308 0 2
16650: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16651: LD_VAR 0 2
16655: PPUSH
16656: LD_VAR 0 3
16660: PPUSH
16661: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16665: LD_INT 0
16667: PPUSH
16668: LD_INT 6
16670: PUSH
16671: LD_INT 7
16673: PUSH
16674: LD_INT 8
16676: PUSH
16677: LD_INT 9
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: PUSH
16686: LD_OWVAR 67
16690: ARRAY
16691: PPUSH
16692: CALL_OW 381
// for i := 1 to 3 do
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: DOUBLE
16702: LD_INT 1
16704: DEC
16705: ST_TO_ADDR
16706: LD_INT 3
16708: PUSH
16709: FOR_TO
16710: IFFALSE 16777
// begin un := CreateHuman ;
16712: LD_ADDR_VAR 0 2
16716: PUSH
16717: CALL_OW 44
16721: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16722: LD_ADDR_EXP 38
16726: PUSH
16727: LD_EXP 38
16731: PPUSH
16732: LD_VAR 0 2
16736: PPUSH
16737: CALL 59308 0 2
16741: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16754: LD_VAR 0 2
16758: PPUSH
16759: LD_INT 224
16761: PPUSH
16762: LD_INT 57
16764: PPUSH
16765: LD_INT 4
16767: PPUSH
16768: LD_INT 0
16770: PPUSH
16771: CALL_OW 50
// end ;
16775: GO 16709
16777: POP
16778: POP
// wait ( 0 0$01 ) ;
16779: LD_INT 35
16781: PPUSH
16782: CALL_OW 67
// DialogueOn ;
16786: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16790: LD_INT 224
16792: PPUSH
16793: LD_INT 57
16795: PPUSH
16796: LD_INT 2
16798: PPUSH
16799: LD_INT 16
16801: NEG
16802: PPUSH
16803: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16807: LD_INT 224
16809: PPUSH
16810: LD_INT 57
16812: PPUSH
16813: CALL_OW 86
// TalkAboutLegion ;
16817: CALL 15801 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16821: LD_INT 224
16823: PPUSH
16824: LD_INT 57
16826: PPUSH
16827: LD_INT 2
16829: PPUSH
16830: CALL_OW 331
// DialogueOff ;
16834: CALL_OW 7
// spotLegion := true ;
16838: LD_ADDR_EXP 10
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16846: LD_EXP 38
16850: PPUSH
16851: LD_INT 164
16853: PPUSH
16854: LD_INT 47
16856: PPUSH
16857: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16861: LD_EXP 38
16865: PPUSH
16866: LD_INT 179
16868: PPUSH
16869: LD_INT 20
16871: PPUSH
16872: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16876: LD_INT 35
16878: PPUSH
16879: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16883: LD_EXP 38
16887: PPUSH
16888: LD_INT 60
16890: PUSH
16891: EMPTY
16892: LIST
16893: PPUSH
16894: CALL_OW 72
16898: NOT
16899: IFTRUE 16919
16901: PUSH
16902: LD_EXP 38
16906: PPUSH
16907: LD_INT 50
16909: PUSH
16910: EMPTY
16911: LIST
16912: PPUSH
16913: CALL_OW 72
16917: NOT
16918: OR
16919: IFFALSE 16876
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16921: LD_EXP 38
16925: PPUSH
16926: LD_INT 50
16928: PUSH
16929: EMPTY
16930: LIST
16931: PPUSH
16932: CALL_OW 72
16936: NOT
16937: IFFALSE 16941
// exit ;
16939: GO 16964
// legForces := legForces union legEForces ;
16941: LD_ADDR_EXP 37
16945: PUSH
16946: LD_EXP 37
16950: PUSH
16951: LD_EXP 38
16955: UNION
16956: ST_TO_ADDR
// legEForces := [ ] ;
16957: LD_ADDR_EXP 38
16961: PUSH
16962: EMPTY
16963: ST_TO_ADDR
// end ;
16964: PPOPN 3
16966: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16967: LD_EXP 19
16971: IFFALSE 17011
16973: PUSH
16974: LD_INT 8
16976: PPUSH
16977: LD_EXP 24
16981: PPUSH
16982: CALL_OW 292
16986: IFTRUE 17002
16988: PUSH
16989: LD_INT 8
16991: PPUSH
16992: LD_EXP 23
16996: PPUSH
16997: CALL_OW 292
17001: OR
17002: IFTRUE 17010
17004: PUSH
17005: LD_EXP 9
17009: OR
17010: AND
17011: IFFALSE 17024
17013: PUSH
17014: LD_EXP 23
17018: PPUSH
17019: CALL_OW 302
17023: AND
17024: IFFALSE 17037
17026: PUSH
17027: LD_EXP 24
17031: PPUSH
17032: CALL_OW 302
17036: AND
17037: IFFALSE 17178
17039: GO 17041
17041: DISABLE
// begin DialogueOn ;
17042: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
17046: LD_EXP 36
17050: PPUSH
17051: LD_STRING DF-Spot-1
17053: PPUSH
17054: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
17058: LD_EXP 23
17062: PPUSH
17063: LD_STRING DH-Spot-2
17065: PPUSH
17066: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
17070: LD_EXP 36
17074: PPUSH
17075: LD_STRING DF-Spot-3
17077: PPUSH
17078: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
17082: LD_EXP 23
17086: PPUSH
17087: LD_STRING DH-Spot-4
17089: PPUSH
17090: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
17094: LD_EXP 24
17098: PPUSH
17099: LD_STRING DOm-Spot-5
17101: PPUSH
17102: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
17106: LD_EXP 36
17110: PPUSH
17111: LD_STRING DF-Spot-6
17113: PPUSH
17114: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
17118: LD_EXP 36
17122: PPUSH
17123: LD_STRING DF-Spot-7
17125: PPUSH
17126: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
17130: LD_EXP 36
17134: PPUSH
17135: LD_STRING DF-Spot-8
17137: PPUSH
17138: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
17142: LD_EXP 23
17146: PPUSH
17147: LD_STRING DH-Spot-9
17149: PPUSH
17150: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
17154: LD_EXP 36
17158: PPUSH
17159: LD_STRING DF-Spot-10
17161: PPUSH
17162: CALL_OW 94
// DialogueOff ;
17166: CALL_OW 7
// spotByLegion := true ;
17170: LD_ADDR_EXP 9
17174: PUSH
17175: LD_INT 1
17177: ST_TO_ADDR
// end ;
17178: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
17179: LD_EXP 19
17183: IFFALSE 17199
17185: PUSH
17186: LD_EXP 9
17190: IFTRUE 17198
17192: PUSH
17193: LD_EXP 10
17197: OR
17198: AND
17199: IFFALSE 17211
17201: GO 17203
17203: DISABLE
// ChangeMissionObjectives ( O3 ) ;
17204: LD_STRING O3
17206: PPUSH
17207: CALL_OW 337
17211: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
17212: LD_EXP 19
17216: IFFALSE 17259
17218: PUSH
17219: LD_INT 22
17221: PUSH
17222: LD_INT 8
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 21
17231: PUSH
17232: LD_INT 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 50
17241: PUSH
17242: EMPTY
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: PPUSH
17250: CALL_OW 69
17254: PUSH
17255: LD_INT 0
17257: EQUAL
17258: AND
17259: IFFALSE 17357
17261: GO 17263
17263: DISABLE
// begin legScriptActive := false ;
17264: LD_ADDR_EXP 4
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// if not americanDestroyed then
17272: LD_EXP 11
17276: NOT
17277: IFFALSE 17286
// SetAchievement ( ACH_REVANGE ) ;
17279: LD_STRING ACH_REVANGE
17281: PPUSH
17282: CALL_OW 543
// legionDestroyed := true ;
17286: LD_ADDR_EXP 12
17290: PUSH
17291: LD_INT 1
17293: ST_TO_ADDR
// DialogueOn ;
17294: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
17298: LD_EXP 36
17302: PPUSH
17303: LD_STRING DF-LegDes-1
17305: PPUSH
17306: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
17310: LD_EXP 23
17314: PPUSH
17315: LD_STRING DH-LegDes-2
17317: PPUSH
17318: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
17322: LD_EXP 36
17326: PPUSH
17327: LD_STRING DF-LegDes-3
17329: PPUSH
17330: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
17334: LD_EXP 23
17338: PPUSH
17339: LD_STRING DH-LegDes-4
17341: PPUSH
17342: CALL_OW 88
// DialogueOff ;
17346: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
17350: LD_STRING O5
17352: PPUSH
17353: CALL_OW 337
// end ;
17357: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
17358: LD_EXP 19
17362: IFFALSE 17399
17364: PUSH
17365: LD_EXP 27
17369: PPUSH
17370: LD_INT 21
17372: PUSH
17373: LD_INT 1
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 50
17382: PUSH
17383: EMPTY
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PPUSH
17390: CALL_OW 72
17394: PUSH
17395: LD_INT 6
17397: LESS
17398: AND
17399: IFFALSE 17649
17401: GO 17403
17403: DISABLE
17404: LD_INT 0
17406: PPUSH
17407: PPUSH
// begin amScriptActive := false ;
17408: LD_ADDR_EXP 3
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
17416: LD_ADDR_VAR 0 2
17420: PUSH
17421: LD_EXP 27
17425: PPUSH
17426: LD_INT 21
17428: PUSH
17429: LD_INT 1
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 50
17438: PUSH
17439: EMPTY
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PPUSH
17446: CALL_OW 72
17450: ST_TO_ADDR
// for i in tmp do
17451: LD_ADDR_VAR 0 1
17455: PUSH
17456: LD_VAR 0 2
17460: PUSH
17461: FOR_IN
17462: IFFALSE 17490
// begin ComExit ( i ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL 59706 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_INT 63
17480: PPUSH
17481: LD_INT 124
17483: PPUSH
17484: CALL_OW 171
// end ;
17488: GO 17461
17490: POP
17491: POP
// wait ( 0 0$2 ) ;
17492: LD_INT 70
17494: PPUSH
17495: CALL_OW 67
// americanDestroyed := true ;
17499: LD_ADDR_EXP 11
17503: PUSH
17504: LD_INT 1
17506: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17507: LD_INT 35
17509: PPUSH
17510: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_EXP 27
17523: PPUSH
17524: LD_INT 21
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 50
17536: PUSH
17537: EMPTY
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 72
17548: PUSH
17549: LD_EXP 35
17553: PPUSH
17554: LD_INT 50
17556: PUSH
17557: EMPTY
17558: LIST
17559: PPUSH
17560: CALL_OW 72
17564: UNION
17565: ST_TO_ADDR
// for i in tmp do
17566: LD_ADDR_VAR 0 1
17570: PUSH
17571: LD_VAR 0 2
17575: PUSH
17576: FOR_IN
17577: IFFALSE 17640
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 63
17586: PPUSH
17587: LD_INT 124
17589: PPUSH
17590: CALL_OW 307
17594: IFTRUE 17610
17596: PUSH
17597: LD_VAR 0 1
17601: PPUSH
17602: LD_INT 25
17604: PPUSH
17605: CALL_OW 308
17609: OR
17610: IFFALSE 17623
// RemoveUnit ( i ) else
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 64
17621: GO 17638
// ComMoveXY ( i , 63 , 124 ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: LD_INT 63
17630: PPUSH
17631: LD_INT 124
17633: PPUSH
17634: CALL_OW 111
// end ;
17638: GO 17576
17640: POP
17641: POP
// until not tmp ;
17642: LD_VAR 0 2
17646: NOT
17647: IFFALSE 17507
// end ;
17649: PPOPN 2
17651: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17652: LD_EXP 19
17656: IFFALSE 17664
17658: PUSH
17659: LD_EXP 11
17663: AND
17664: IFFALSE 17677
17666: PUSH
17667: LD_EXP 23
17671: PPUSH
17672: CALL_OW 302
17676: AND
17677: IFFALSE 17690
17679: PUSH
17680: LD_EXP 24
17684: PPUSH
17685: CALL_OW 302
17689: AND
17690: IFFALSE 18180
17692: GO 17694
17694: DISABLE
17695: LD_INT 0
17697: PPUSH
17698: PPUSH
17699: PPUSH
// begin DialogueOn ;
17700: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17704: LD_EXP 23
17708: PPUSH
17709: LD_STRING DH-Victory-1
17711: PPUSH
17712: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17716: LD_EXP 24
17720: PPUSH
17721: LD_STRING DOm-Victory-2
17723: PPUSH
17724: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17728: LD_EXP 24
17732: PPUSH
17733: LD_STRING DOm-Victory-3
17735: PPUSH
17736: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17740: LD_EXP 23
17744: PPUSH
17745: LD_STRING DH-Victory-4
17747: PPUSH
17748: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17752: LD_EXP 24
17756: PPUSH
17757: LD_STRING DOm-Victory-5
17759: PPUSH
17760: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17764: LD_EXP 24
17768: PPUSH
17769: LD_STRING DOm-Victory-6
17771: PPUSH
17772: CALL_OW 88
// DialogueOff ;
17776: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17780: LD_STRING O4
17782: PPUSH
17783: CALL_OW 337
// canFinish := true ;
17787: LD_ADDR_EXP 18
17791: PUSH
17792: LD_INT 1
17794: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17795: LD_INT 24
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: CALL_OW 424
// if not legionDestroyed then
17805: LD_EXP 12
17809: NOT
17810: IFFALSE 18180
// begin uc_nation := nation_arabian ;
17812: LD_ADDR_OWVAR 21
17816: PUSH
17817: LD_INT 2
17819: ST_TO_ADDR
// uc_side := 8 ;
17820: LD_ADDR_OWVAR 20
17824: PUSH
17825: LD_INT 8
17827: ST_TO_ADDR
// for i := 1 to 4 do
17828: LD_ADDR_VAR 0 1
17832: PUSH
17833: DOUBLE
17834: LD_INT 1
17836: DEC
17837: ST_TO_ADDR
17838: LD_INT 4
17840: PUSH
17841: FOR_TO
17842: IFFALSE 17923
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17844: LD_INT 0
17846: PPUSH
17847: LD_INT 8
17849: PUSH
17850: LD_INT 9
17852: PUSH
17853: LD_INT 10
17855: PUSH
17856: LD_INT 10
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: PUSH
17865: LD_OWVAR 67
17869: ARRAY
17870: PPUSH
17871: CALL_OW 381
// un := CreateHuman ;
17875: LD_ADDR_VAR 0 2
17879: PUSH
17880: CALL_OW 44
17884: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17885: LD_VAR 0 2
17889: PPUSH
17890: LD_INT 3
17892: PPUSH
17893: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17897: LD_VAR 0 2
17901: PPUSH
17902: LD_INT 26
17904: PPUSH
17905: LD_INT 0
17907: PPUSH
17908: CALL_OW 49
// ComCrawl ( un ) ;
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 137
// end ;
17921: GO 17841
17923: POP
17924: POP
// for i := 1 to 3 do
17925: LD_ADDR_VAR 0 1
17929: PUSH
17930: DOUBLE
17931: LD_INT 1
17933: DEC
17934: ST_TO_ADDR
17935: LD_INT 3
17937: PUSH
17938: FOR_TO
17939: IFFALSE 18023
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17941: LD_INT 0
17943: PPUSH
17944: LD_INT 8
17946: PUSH
17947: LD_INT 9
17949: PUSH
17950: LD_INT 10
17952: PUSH
17953: LD_INT 10
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: PUSH
17962: LD_OWVAR 67
17966: ARRAY
17967: PPUSH
17968: CALL_OW 381
// un := CreateHuman ;
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: CALL_OW 44
17981: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17982: LD_VAR 0 2
17986: PPUSH
17987: LD_INT 8
17989: PPUSH
17990: CALL_OW 336
// SetDir ( un , 3 ) ;
17994: LD_VAR 0 2
17998: PPUSH
17999: LD_INT 3
18001: PPUSH
18002: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
18006: LD_VAR 0 2
18010: PPUSH
18011: LD_INT 26
18013: PPUSH
18014: LD_INT 0
18016: PPUSH
18017: CALL_OW 49
// end ;
18021: GO 17938
18023: POP
18024: POP
// for i := 1 to 2 do
18025: LD_ADDR_VAR 0 1
18029: PUSH
18030: DOUBLE
18031: LD_INT 1
18033: DEC
18034: ST_TO_ADDR
18035: LD_INT 2
18037: PUSH
18038: FOR_TO
18039: IFFALSE 18178
// begin uc_side := 8 ;
18041: LD_ADDR_OWVAR 20
18045: PUSH
18046: LD_INT 8
18048: ST_TO_ADDR
// uc_nation := nation_american ;
18049: LD_ADDR_OWVAR 21
18053: PUSH
18054: LD_INT 1
18056: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
18057: LD_INT 4
18059: PPUSH
18060: LD_INT 1
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: LD_INT 9
18068: PPUSH
18069: LD_INT 90
18071: PPUSH
18072: CALL 26138 0 5
// veh := CreateVehicle ;
18076: LD_ADDR_VAR 0 3
18080: PUSH
18081: CALL_OW 45
18085: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_INT 3
18093: PPUSH
18094: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
18098: LD_VAR 0 3
18102: PPUSH
18103: LD_INT 27
18105: PPUSH
18106: LD_INT 0
18108: PPUSH
18109: CALL_OW 49
// uc_nation := nation_arabian ;
18113: LD_ADDR_OWVAR 21
18117: PUSH
18118: LD_INT 2
18120: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
18121: LD_INT 0
18123: PPUSH
18124: LD_INT 8
18126: PUSH
18127: LD_INT 9
18129: PUSH
18130: LD_INT 10
18132: PUSH
18133: LD_INT 10
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: PUSH
18142: LD_OWVAR 67
18146: ARRAY
18147: PPUSH
18148: CALL_OW 383
// un := CreateHuman ;
18152: LD_ADDR_VAR 0 2
18156: PUSH
18157: CALL_OW 44
18161: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18162: LD_VAR 0 2
18166: PPUSH
18167: LD_VAR 0 3
18171: PPUSH
18172: CALL_OW 52
// end ;
18176: GO 18038
18178: POP
18179: POP
// end ; end ;
18180: PPOPN 3
18182: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
18183: LD_EXP 19
18187: IFFALSE 18195
18189: PUSH
18190: LD_EXP 18
18194: AND
18195: IFFALSE 18214
18197: PUSH
18198: LD_EXP 24
18202: PUSH
18203: EMPTY
18204: LIST
18205: PPUSH
18206: LD_INT 24
18208: PPUSH
18209: CALL 11864 0 2
18213: AND
18214: IFFALSE 18233
18216: PUSH
18217: LD_EXP 23
18221: PUSH
18222: EMPTY
18223: LIST
18224: PPUSH
18225: LD_INT 24
18227: PPUSH
18228: CALL 11864 0 2
18232: AND
18233: IFFALSE 18406
18235: GO 18237
18237: DISABLE
// begin if tick <= 50 50$00 then
18238: LD_OWVAR 1
18242: PUSH
18243: LD_INT 105000
18245: LESSEQUAL
18246: IFFALSE 18255
// SetAchievement ( ACH_HSPEED_10 ) ;
18248: LD_STRING ACH_HSPEED_10
18250: PPUSH
18251: CALL_OW 543
// if legionDestroyed then
18255: LD_EXP 12
18259: IFFALSE 18273
// AddMedal ( med1 , 1 ) else
18261: LD_STRING med1
18263: PPUSH
18264: LD_INT 1
18266: PPUSH
18267: CALL_OW 101
18271: GO 18284
// AddMedal ( med1 , - 1 ) ;
18273: LD_STRING med1
18275: PPUSH
18276: LD_INT 1
18278: NEG
18279: PPUSH
18280: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
18284: LD_OWVAR 1
18288: PUSH
18289: LD_INT 189000
18291: PUSH
18292: LD_INT 168000
18294: PUSH
18295: LD_INT 147000
18297: PUSH
18298: LD_INT 126000
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: PUSH
18307: LD_OWVAR 67
18311: ARRAY
18312: LESSEQUAL
18313: IFFALSE 18327
// AddMedal ( med2 , 1 ) else
18315: LD_STRING med2
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 101
18325: GO 18338
// AddMedal ( med2 , - 1 ) ;
18327: LD_STRING med2
18329: PPUSH
18330: LD_INT 1
18332: NEG
18333: PPUSH
18334: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasDrugs >= 3 then
18338: LD_EXP 16
18342: PUSH
18343: LD_EXP 14
18347: PLUS
18348: PUSH
18349: LD_EXP 15
18353: PLUS
18354: PUSH
18355: LD_EXP 13
18359: PLUS
18360: PUSH
18361: LD_EXP 17
18365: PLUS
18366: PUSH
18367: LD_INT 3
18369: GREATEREQUAL
18370: IFFALSE 18384
// AddMedal ( med3 , 1 ) else
18372: LD_STRING med3
18374: PPUSH
18375: LD_INT 1
18377: PPUSH
18378: CALL_OW 101
18382: GO 18395
// AddMedal ( med3 , - 1 ) ;
18384: LD_STRING med3
18386: PPUSH
18387: LD_INT 1
18389: NEG
18390: PPUSH
18391: CALL_OW 101
// GiveMedals ( MAIN ) ;
18395: LD_STRING MAIN
18397: PPUSH
18398: CALL_OW 102
// YouWin ;
18402: CALL_OW 103
// end ; end_of_file
18406: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL 80997 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
18416: LD_EXP 5
18420: IFFALSE 18437
18422: PUSH
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 255
18432: PUSH
18433: LD_INT 2
18435: EQUAL
18436: AND
18437: IFFALSE 18486
18439: PUSH
18440: LD_VAR 0 1
18444: PPUSH
18445: CALL_OW 263
18449: PUSH
18450: LD_INT 5
18452: EQUAL
18453: IFTRUE 18485
18455: PUSH
18456: LD_VAR 0 1
18460: PPUSH
18461: CALL_OW 257
18465: PUSH
18466: LD_INT 12
18468: PUSH
18469: LD_INT 15
18471: PUSH
18472: LD_INT 16
18474: PUSH
18475: LD_INT 17
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: IN
18484: OR
18485: AND
18486: IFFALSE 18556
// begin apeAmount := Dec ( apeAmount ) ;
18488: LD_ADDR_EXP 5
18492: PUSH
18493: LD_EXP 5
18497: PPUSH
18498: CALL 60703 0 1
18502: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
18503: LD_INT 35
18505: PPUSH
18506: LD_INT 2100
18508: PPUSH
18509: CALL_OW 12
18513: PPUSH
18514: CALL_OW 67
// uc_side := 0 ;
18518: LD_ADDR_OWVAR 20
18522: PUSH
18523: LD_INT 0
18525: ST_TO_ADDR
// uc_nation := nation_nature ;
18526: LD_ADDR_OWVAR 21
18530: PUSH
18531: LD_INT 0
18533: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
18534: LD_INT 0
18536: PPUSH
18537: CALL 55435 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
18541: CALL_OW 44
18545: PPUSH
18546: LD_INT 6
18548: PPUSH
18549: LD_INT 0
18551: PPUSH
18552: CALL_OW 49
// end ; if unit = Heike then
18556: LD_VAR 0 1
18560: PUSH
18561: LD_EXP 23
18565: EQUAL
18566: IFFALSE 18575
// YouLost ( Heike ) ;
18568: LD_STRING Heike
18570: PPUSH
18571: CALL_OW 104
// if unit = Omar then
18575: LD_VAR 0 1
18579: PUSH
18580: LD_EXP 24
18584: EQUAL
18585: IFFALSE 18594
// YouLost ( Omar ) ;
18587: LD_STRING Omar
18589: PPUSH
18590: CALL_OW 104
// if unit in amForces then
18594: LD_VAR 0 1
18598: PUSH
18599: LD_EXP 27
18603: IN
18604: IFFALSE 18622
// amForces := amForces diff unit ;
18606: LD_ADDR_EXP 27
18610: PUSH
18611: LD_EXP 27
18615: PUSH
18616: LD_VAR 0 1
18620: DIFF
18621: ST_TO_ADDR
// if unit in amTanks then
18622: LD_VAR 0 1
18626: PUSH
18627: LD_EXP 32
18631: IN
18632: IFFALSE 18650
// amTanks := amTanks diff unit ;
18634: LD_ADDR_EXP 32
18638: PUSH
18639: LD_EXP 32
18643: PUSH
18644: LD_VAR 0 1
18648: DIFF
18649: ST_TO_ADDR
// if unit in amPatrol then
18650: LD_VAR 0 1
18654: PUSH
18655: LD_EXP 35
18659: IN
18660: IFFALSE 18678
// amPatrol := amPatrol diff unit ;
18662: LD_ADDR_EXP 35
18666: PUSH
18667: LD_EXP 35
18671: PUSH
18672: LD_VAR 0 1
18676: DIFF
18677: ST_TO_ADDR
// if GetSide ( unit ) = 1 then
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 255
18687: PUSH
18688: LD_INT 1
18690: EQUAL
18691: IFFALSE 18845
// begin if GetBType ( unit ) in [ b_bunker , b_turret ] then
18693: LD_VAR 0 1
18697: PPUSH
18698: CALL_OW 266
18702: PUSH
18703: LD_INT 32
18705: PUSH
18706: LD_INT 33
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: IN
18713: IFFALSE 18769
// amBuildings := Join ( amBuildings , [ b_turret , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18715: LD_ADDR_EXP 31
18719: PUSH
18720: LD_EXP 31
18724: PPUSH
18725: LD_INT 33
18727: PUSH
18728: LD_VAR 0 1
18732: PPUSH
18733: CALL_OW 250
18737: PUSH
18738: LD_VAR 0 1
18742: PPUSH
18743: CALL_OW 251
18747: PUSH
18748: LD_VAR 0 1
18752: PPUSH
18753: CALL_OW 254
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL 59308 0 2
18768: ST_TO_ADDR
// if GetBType ( unit ) in [ b_armoury , b_barracks ] then
18769: LD_VAR 0 1
18773: PPUSH
18774: CALL_OW 266
18778: PUSH
18779: LD_INT 4
18781: PUSH
18782: LD_INT 5
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: IN
18789: IFFALSE 18845
// amBuildings := Join ( amBuildings , [ b_armoury , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18791: LD_ADDR_EXP 31
18795: PUSH
18796: LD_EXP 31
18800: PPUSH
18801: LD_INT 4
18803: PUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 250
18813: PUSH
18814: LD_VAR 0 1
18818: PPUSH
18819: CALL_OW 251
18823: PUSH
18824: LD_VAR 0 1
18828: PPUSH
18829: CALL_OW 254
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: PPUSH
18840: CALL 59308 0 2
18844: ST_TO_ADDR
// end ; if unit in legForces then
18845: LD_VAR 0 1
18849: PUSH
18850: LD_EXP 37
18854: IN
18855: IFFALSE 18873
// legForces := legForces diff unit ;
18857: LD_ADDR_EXP 37
18861: PUSH
18862: LD_EXP 37
18866: PUSH
18867: LD_VAR 0 1
18871: DIFF
18872: ST_TO_ADDR
// if unit in legTanks then
18873: LD_VAR 0 1
18877: PUSH
18878: LD_EXP 43
18882: IN
18883: IFFALSE 18901
// legTanks := legTanks diff unit ;
18885: LD_ADDR_EXP 43
18889: PUSH
18890: LD_EXP 43
18894: PUSH
18895: LD_VAR 0 1
18899: DIFF
18900: ST_TO_ADDR
// if unit in legRTanks then
18901: LD_VAR 0 1
18905: PUSH
18906: LD_EXP 44
18910: IN
18911: IFFALSE 18929
// legRTanks := legRTanks diff unit ;
18913: LD_ADDR_EXP 44
18917: PUSH
18918: LD_EXP 44
18922: PUSH
18923: LD_VAR 0 1
18927: DIFF
18928: ST_TO_ADDR
// if GetSide ( unit ) = 8 then
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL_OW 255
18938: PUSH
18939: LD_INT 8
18941: EQUAL
18942: IFFALSE 19103
// begin if GetBType ( unit ) in [ b_bunker , b_turret ] then
18944: LD_VAR 0 1
18948: PPUSH
18949: CALL_OW 266
18953: PUSH
18954: LD_INT 32
18956: PUSH
18957: LD_INT 33
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: IN
18964: IFFALSE 19027
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18966: LD_ADDR_EXP 42
18970: PUSH
18971: LD_EXP 42
18975: PPUSH
18976: LD_VAR 0 1
18980: PPUSH
18981: CALL_OW 266
18985: PUSH
18986: LD_VAR 0 1
18990: PPUSH
18991: CALL_OW 250
18995: PUSH
18996: LD_VAR 0 1
19000: PPUSH
19001: CALL_OW 251
19005: PUSH
19006: LD_VAR 0 1
19010: PPUSH
19011: CALL_OW 254
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL 59308 0 2
19026: ST_TO_ADDR
// if GetBType ( unit ) in [ b_armoury , b_barracks ] then
19027: LD_VAR 0 1
19031: PPUSH
19032: CALL_OW 266
19036: PUSH
19037: LD_INT 4
19039: PUSH
19040: LD_INT 5
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: IN
19047: IFFALSE 19103
// legBuildings := Join ( legBuildings , [ b_armoury , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
19049: LD_ADDR_EXP 42
19053: PUSH
19054: LD_EXP 42
19058: PPUSH
19059: LD_INT 4
19061: PUSH
19062: LD_VAR 0 1
19066: PPUSH
19067: CALL_OW 250
19071: PUSH
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 251
19081: PUSH
19082: LD_VAR 0 1
19086: PPUSH
19087: CALL_OW 254
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: PPUSH
19098: CALL 59308 0 2
19102: ST_TO_ADDR
// end ; if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
19103: LD_VAR 0 1
19107: PPUSH
19108: CALL_OW 264
19112: PUSH
19113: LD_INT 13
19115: EQUAL
19116: IFFALSE 19133
19118: PUSH
19119: LD_VAR 0 1
19123: PPUSH
19124: CALL_OW 255
19128: PUSH
19129: LD_INT 1
19131: EQUAL
19132: AND
19133: IFFALSE 19168
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
19135: LD_ADDR_EXP 29
19139: PUSH
19140: LD_EXP 29
19144: PPUSH
19145: LD_INT 2
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 13
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: PPUSH
19163: CALL 59308 0 2
19167: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
19168: LD_VAR 0 1
19172: PPUSH
19173: CALL_OW 264
19177: PUSH
19178: LD_INT 88
19180: EQUAL
19181: IFFALSE 19198
19183: PUSH
19184: LD_VAR 0 1
19188: PPUSH
19189: CALL_OW 255
19193: PUSH
19194: LD_INT 8
19196: EQUAL
19197: AND
19198: IFFALSE 19233
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
19200: LD_ADDR_EXP 40
19204: PUSH
19205: LD_EXP 40
19209: PPUSH
19210: LD_INT 13
19212: PUSH
19213: LD_INT 1
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: LD_INT 88
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: PPUSH
19228: CALL 59308 0 2
19232: ST_TO_ADDR
// if unit = amCargo then
19233: LD_VAR 0 1
19237: PUSH
19238: LD_EXP 34
19242: EQUAL
19243: IFFALSE 19286
// begin amCargo := 0 ;
19245: LD_ADDR_EXP 34
19249: PUSH
19250: LD_INT 0
19252: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
19253: LD_ADDR_EXP 29
19257: PUSH
19258: LD_EXP 29
19262: PPUSH
19263: LD_INT 2
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: LD_INT 12
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: PPUSH
19281: CALL 59308 0 2
19285: ST_TO_ADDR
// end ; if unit = legCargo then
19286: LD_VAR 0 1
19290: PUSH
19291: LD_EXP 45
19295: EQUAL
19296: IFFALSE 19339
// begin legCargo := 0 ;
19298: LD_ADDR_EXP 45
19302: PUSH
19303: LD_INT 0
19305: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
19306: LD_ADDR_EXP 40
19310: PUSH
19311: LD_EXP 40
19315: PPUSH
19316: LD_INT 13
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: LD_INT 2
19324: PUSH
19325: LD_INT 32
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: PPUSH
19334: CALL 59308 0 2
19338: ST_TO_ADDR
// end ; end ;
19339: PPOPN 1
19341: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
19342: LD_ADDR_EXP 21
19346: PUSH
19347: LD_EXP 21
19351: PPUSH
19352: CALL 60681 0 1
19356: ST_TO_ADDR
// end ;
19357: PPOPN 2
19359: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
19360: LD_VAR 0 2
19364: PUSH
19365: LD_INT 3
19367: PUSH
19368: LD_INT 22
19370: PUSH
19371: LD_INT 2
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 25
19384: PUSH
19385: LD_INT 3
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PPUSH
19396: CALL_OW 69
19400: IN
19401: IFFALSE 19418
19403: PUSH
19404: LD_VAR 0 1
19408: PPUSH
19409: CALL_OW 266
19413: PUSH
19414: LD_INT 3
19416: EQUAL
19417: AND
19418: IFFALSE 19435
19420: PUSH
19421: LD_VAR 0 2
19425: PPUSH
19426: CALL_OW 256
19430: PUSH
19431: LD_INT 1000
19433: LESS
19434: AND
19435: IFFALSE 19461
// begin SetTag ( un , 0 ) ;
19437: LD_VAR 0 2
19441: PPUSH
19442: LD_INT 0
19444: PPUSH
19445: CALL_OW 109
// SetLives ( un , 1000 ) ;
19449: LD_VAR 0 2
19453: PPUSH
19454: LD_INT 1000
19456: PPUSH
19457: CALL_OW 234
// end ; end ;
19461: PPOPN 2
19463: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
19464: LD_INT 0
19466: PPUSH
19467: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_VAR 0 2
19477: PPUSH
19478: CALL 81055 0 2
// side := GetSide ( fac ) ;
19482: LD_ADDR_VAR 0 3
19486: PUSH
19487: LD_VAR 0 2
19491: PPUSH
19492: CALL_OW 255
19496: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
19497: LD_ADDR_VAR 0 4
19501: PUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 264
19511: ST_TO_ADDR
// if side = 1 then
19512: LD_VAR 0 3
19516: PUSH
19517: LD_INT 1
19519: EQUAL
19520: IFFALSE 19631
// begin amConstructList := Delete ( amConstructList , 1 ) ;
19522: LD_ADDR_EXP 29
19526: PUSH
19527: LD_EXP 29
19531: PPUSH
19532: LD_INT 1
19534: PPUSH
19535: CALL_OW 3
19539: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
19540: LD_VAR 0 4
19544: PUSH
19545: LD_INT 12
19547: EQUAL
19548: IFFALSE 19557
19550: PUSH
19551: LD_EXP 34
19555: NOT
19556: AND
19557: IFFALSE 19569
// amCargo := veh ;
19559: LD_ADDR_EXP 34
19563: PUSH
19564: LD_VAR 0 1
19568: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
19569: LD_VAR 0 4
19573: PUSH
19574: LD_INT 12
19576: PUSH
19577: LD_INT 13
19579: PUSH
19580: LD_INT 14
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: IN
19588: IFFALSE 19592
// exit ;
19590: GO 19783
// amTanks := Join ( amTanks , veh ) ;
19592: LD_ADDR_EXP 32
19596: PUSH
19597: LD_EXP 32
19601: PPUSH
19602: LD_VAR 0 1
19606: PPUSH
19607: CALL 59308 0 2
19611: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19612: LD_INT 35
19614: PPUSH
19615: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
19619: LD_VAR 0 1
19623: PPUSH
19624: LD_INT 12
19626: PPUSH
19627: CALL_OW 173
// end ; if side = 8 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 8
19638: EQUAL
19639: IFFALSE 19783
// begin legConstructList := Delete ( legConstructList , 1 ) ;
19641: LD_ADDR_EXP 40
19645: PUSH
19646: LD_EXP 40
19650: PPUSH
19651: LD_INT 1
19653: PPUSH
19654: CALL_OW 3
19658: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
19659: LD_VAR 0 4
19663: PUSH
19664: LD_INT 32
19666: EQUAL
19667: IFFALSE 19676
19669: PUSH
19670: LD_EXP 45
19674: NOT
19675: AND
19676: IFFALSE 19688
// legCargo := veh ;
19678: LD_ADDR_EXP 45
19682: PUSH
19683: LD_VAR 0 1
19687: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
19688: LD_VAR 0 4
19692: PUSH
19693: LD_INT 32
19695: PUSH
19696: LD_INT 88
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: IN
19703: IFFALSE 19707
// exit ;
19705: GO 19783
// if GetControl ( veh ) = control_manual then
19707: LD_VAR 0 1
19711: PPUSH
19712: CALL_OW 263
19716: PUSH
19717: LD_INT 1
19719: EQUAL
19720: IFFALSE 19744
// legTanks := Join ( legTanks , veh ) else
19722: LD_ADDR_EXP 43
19726: PUSH
19727: LD_EXP 43
19731: PPUSH
19732: LD_VAR 0 1
19736: PPUSH
19737: CALL 59308 0 2
19741: ST_TO_ADDR
19742: GO 19764
// legRTanks := Join ( legRTanks , veh ) ;
19744: LD_ADDR_EXP 44
19748: PUSH
19749: LD_EXP 44
19753: PPUSH
19754: LD_VAR 0 1
19758: PPUSH
19759: CALL 59308 0 2
19763: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19764: LD_INT 35
19766: PPUSH
19767: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19771: LD_VAR 0 1
19775: PPUSH
19776: LD_INT 15
19778: PPUSH
19779: CALL_OW 173
// end ; end ;
19783: PPOPN 4
19785: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19786: LD_INT 0
19788: PPUSH
19789: PPUSH
19790: PPUSH
// begin side := GetSide ( driver ) ;
19791: LD_ADDR_VAR 0 7
19795: PUSH
19796: LD_VAR 0 1
19800: PPUSH
19801: CALL_OW 255
19805: ST_TO_ADDR
// if side = 1 and driver in amForces then
19806: LD_VAR 0 7
19810: PUSH
19811: LD_INT 1
19813: EQUAL
19814: IFFALSE 19828
19816: PUSH
19817: LD_VAR 0 1
19821: PUSH
19822: LD_EXP 27
19826: IN
19827: AND
19828: IFFALSE 20040
// begin ComMoveToArea ( driver , amBaseArea ) ;
19830: LD_VAR 0 1
19834: PPUSH
19835: LD_INT 1
19837: PPUSH
19838: CALL_OW 113
// SetTag ( driver , tMech ) ;
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_INT 7
19849: PPUSH
19850: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19854: LD_ADDR_VAR 0 6
19858: PUSH
19859: LD_INT 1
19861: PPUSH
19862: LD_INT 22
19864: PUSH
19865: LD_VAR 0 7
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 30
19876: PUSH
19877: LD_INT 3
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 50
19886: PUSH
19887: EMPTY
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: PPUSH
19895: CALL_OW 70
19899: ST_TO_ADDR
// if fac then
19900: LD_VAR 0 6
19904: IFFALSE 19926
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19906: LD_VAR 0 1
19910: PPUSH
19911: LD_VAR 0 6
19915: PUSH
19916: LD_INT 1
19918: ARRAY
19919: PPUSH
19920: CALL_OW 180
// exit ;
19924: GO 20293
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19926: LD_ADDR_VAR 0 5
19930: PUSH
19931: LD_INT 1
19933: PPUSH
19934: LD_INT 22
19936: PUSH
19937: LD_VAR 0 7
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: LD_INT 30
19951: PUSH
19952: LD_INT 4
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 30
19961: PUSH
19962: LD_INT 5
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 3
19976: PUSH
19977: LD_INT 62
19979: PUSH
19980: EMPTY
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 50
19989: PUSH
19990: EMPTY
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: PPUSH
19999: CALL_OW 70
20003: ST_TO_ADDR
// if arm then
20004: LD_VAR 0 5
20008: IFFALSE 20040
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
20010: LD_VAR 0 1
20014: PPUSH
20015: LD_VAR 0 5
20019: PUSH
20020: LD_INT 1
20022: ARRAY
20023: PPUSH
20024: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
20028: LD_VAR 0 1
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: CALL_OW 183
// end ; end ; if side = 8 then
20040: LD_VAR 0 7
20044: PUSH
20045: LD_INT 8
20047: EQUAL
20048: IFFALSE 20293
// begin ComMoveToArea ( driver , legBaseArea ) ;
20050: LD_VAR 0 1
20054: PPUSH
20055: LD_INT 2
20057: PPUSH
20058: CALL_OW 113
// if not driver in legForces then
20062: LD_VAR 0 1
20066: PUSH
20067: LD_EXP 37
20071: IN
20072: NOT
20073: IFFALSE 20095
// legForces := Join ( legForces , driver ) ;
20075: LD_ADDR_EXP 37
20079: PUSH
20080: LD_EXP 37
20084: PPUSH
20085: LD_VAR 0 1
20089: PPUSH
20090: CALL 59308 0 2
20094: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 7
20102: PPUSH
20103: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
20107: LD_ADDR_VAR 0 6
20111: PUSH
20112: LD_INT 2
20114: PPUSH
20115: LD_INT 22
20117: PUSH
20118: LD_VAR 0 7
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 30
20129: PUSH
20130: LD_INT 3
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 50
20139: PUSH
20140: EMPTY
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 70
20152: ST_TO_ADDR
// if fac then
20153: LD_VAR 0 6
20157: IFFALSE 20179
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
20159: LD_VAR 0 1
20163: PPUSH
20164: LD_VAR 0 6
20168: PUSH
20169: LD_INT 1
20171: ARRAY
20172: PPUSH
20173: CALL_OW 180
// exit ;
20177: GO 20293
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
20179: LD_ADDR_VAR 0 5
20183: PUSH
20184: LD_INT 2
20186: PPUSH
20187: LD_INT 22
20189: PUSH
20190: LD_VAR 0 7
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 30
20204: PUSH
20205: LD_INT 4
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 30
20214: PUSH
20215: LD_INT 5
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 3
20229: PUSH
20230: LD_INT 62
20232: PUSH
20233: EMPTY
20234: LIST
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 50
20242: PUSH
20243: EMPTY
20244: LIST
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 70
20256: ST_TO_ADDR
// if arm then
20257: LD_VAR 0 5
20261: IFFALSE 20293
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_VAR 0 5
20272: PUSH
20273: LD_INT 1
20275: ARRAY
20276: PPUSH
20277: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
20281: LD_VAR 0 1
20285: PPUSH
20286: LD_INT 1
20288: PPUSH
20289: CALL_OW 183
// end ; end ; end ;
20293: PPOPN 7
20295: END
// on BuildingComplete ( b ) do var side , type ;
20296: LD_INT 0
20298: PPUSH
20299: PPUSH
// begin side := GetSide ( b ) ;
20300: LD_ADDR_VAR 0 2
20304: PUSH
20305: LD_VAR 0 1
20309: PPUSH
20310: CALL_OW 255
20314: ST_TO_ADDR
// type := GetBType ( b ) ;
20315: LD_ADDR_VAR 0 3
20319: PUSH
20320: LD_VAR 0 1
20324: PPUSH
20325: CALL_OW 266
20329: ST_TO_ADDR
// if side = 1 then
20330: LD_VAR 0 2
20334: PUSH
20335: LD_INT 1
20337: EQUAL
20338: IFFALSE 20388
// begin amBuildings := Delete ( amBuildings , 1 ) ;
20340: LD_ADDR_EXP 31
20344: PUSH
20345: LD_EXP 31
20349: PPUSH
20350: LD_INT 1
20352: PPUSH
20353: CALL_OW 3
20357: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: LD_INT 4
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: IN
20377: IFFALSE 20388
// ComUpgrade ( b ) ;
20379: LD_VAR 0 1
20383: PPUSH
20384: CALL_OW 146
// end ; if side = 8 then
20388: LD_VAR 0 2
20392: PUSH
20393: LD_INT 8
20395: EQUAL
20396: IFFALSE 20446
// begin legBuildings := Delete ( legBuildings , 1 ) ;
20398: LD_ADDR_EXP 42
20402: PUSH
20403: LD_EXP 42
20407: PPUSH
20408: LD_INT 1
20410: PPUSH
20411: CALL_OW 3
20415: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
20416: LD_VAR 0 3
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: LD_INT 4
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: IN
20435: IFFALSE 20446
// ComUpgrade ( b ) ;
20437: LD_VAR 0 1
20441: PPUSH
20442: CALL_OW 146
// end ; end ;
20446: PPOPN 3
20448: END
// on ResearchComplete ( tech , lab ) do var side ;
20449: LD_INT 0
20451: PPUSH
// begin side := GetSide ( lab ) ;
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: LD_VAR 0 2
20461: PPUSH
20462: CALL_OW 255
20466: ST_TO_ADDR
// if side = 1 then
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 1
20474: EQUAL
20475: IFFALSE 20493
// amTech := amTech diff tech ;
20477: LD_ADDR_EXP 28
20481: PUSH
20482: LD_EXP 28
20486: PUSH
20487: LD_VAR 0 1
20491: DIFF
20492: ST_TO_ADDR
// end ;
20493: PPOPN 3
20495: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
20496: LD_VAR 0 1
20500: PPUSH
20501: CALL 81039 0 1
// end ;
20505: PPOPN 1
20507: END
// on SailEvent ( event ) do begin case event of end ;
20508: LD_VAR 0 1
20512: PUSH
20513: POP
// end ;
20514: PPOPN 1
20516: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
20517: LD_EXP 19
20521: NOT
20522: IFFALSE 20526
// exit ;
20524: GO 20632
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
20526: LD_EXP 8
20530: NOT
20531: IFFALSE 20550
20533: PUSH
20534: LD_VAR 0 1
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: IN
20549: AND
20550: IFFALSE 20569
20552: PUSH
20553: LD_VAR 0 2
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: IN
20568: AND
20569: IFFALSE 20579
// spotByAmerican := true ;
20571: LD_ADDR_EXP 8
20575: PUSH
20576: LD_INT 1
20578: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
20579: LD_EXP 9
20583: NOT
20584: IFFALSE 20603
20586: PUSH
20587: LD_VAR 0 1
20591: PUSH
20592: LD_INT 2
20594: PUSH
20595: LD_INT 8
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: IN
20602: AND
20603: IFFALSE 20622
20605: PUSH
20606: LD_VAR 0 2
20610: PUSH
20611: LD_INT 8
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: IN
20621: AND
20622: IFFALSE 20632
// spotByLegion := true ;
20624: LD_ADDR_EXP 9
20628: PUSH
20629: LD_INT 1
20631: ST_TO_ADDR
// end ; end_of_file
20632: PPOPN 2
20634: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
20635: LD_EXP 7
20639: IFFALSE 20746
20641: GO 20643
20643: DISABLE
20644: LD_INT 0
20646: PPUSH
20647: PPUSH
// begin enable ;
20648: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
20649: LD_INT 35
20651: PPUSH
20652: LD_INT 385
20654: PPUSH
20655: CALL_OW 12
20659: PPUSH
20660: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
20664: LD_ADDR_VAR 0 2
20668: PUSH
20669: LD_INT 16
20671: PUSH
20672: LD_INT 17
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
20679: LD_ADDR_VAR 0 1
20683: PUSH
20684: LD_VAR 0 2
20688: PUSH
20689: LD_INT 1
20691: PPUSH
20692: LD_VAR 0 2
20696: PPUSH
20697: CALL 23376 0 1
20701: PPUSH
20702: CALL_OW 12
20706: ARRAY
20707: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
20708: LD_VAR 0 1
20712: PPUSH
20713: CALL_OW 435
20717: PUSH
20718: LD_INT 4
20720: LESS
20721: IFFALSE 20746
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
20723: LD_INT 1
20725: PPUSH
20726: LD_INT 5
20728: PPUSH
20729: CALL_OW 12
20733: PPUSH
20734: LD_VAR 0 1
20738: PPUSH
20739: LD_INT 1
20741: PPUSH
20742: CALL_OW 55
// end ;
20746: PPOPN 2
20748: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
20749: LD_OWVAR 1
20753: PUSH
20754: LD_INT 10500
20756: PUSH
20757: LD_INT 8400
20759: PUSH
20760: LD_INT 6300
20762: PUSH
20763: LD_INT 5250
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: PUSH
20772: LD_OWVAR 67
20776: ARRAY
20777: LESS
20778: IFFALSE 20786
20780: PUSH
20781: LD_EXP 7
20785: AND
20786: IFFALSE 20819
20788: GO 20790
20790: DISABLE
// begin enable ;
20791: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20792: LD_INT 1
20794: PPUSH
20795: LD_INT 5
20797: PPUSH
20798: CALL_OW 12
20802: PPUSH
20803: LD_INT 218
20805: PPUSH
20806: LD_INT 92
20808: PPUSH
20809: LD_INT 11
20811: PPUSH
20812: LD_INT 1
20814: PPUSH
20815: CALL_OW 56
// end ;
20819: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
20820: LD_OWVAR 1
20824: PUSH
20825: LD_INT 12600
20827: PUSH
20828: LD_INT 10500
20830: PUSH
20831: LD_INT 8400
20833: PUSH
20834: LD_INT 7350
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: PUSH
20843: LD_OWVAR 67
20847: ARRAY
20848: GREATER
20849: IFFALSE 20857
20851: PUSH
20852: LD_EXP 7
20856: AND
20857: IFFALSE 20924
20859: GO 20861
20861: DISABLE
// begin enable ;
20862: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) and GetListOfCratesInArea ( arBaseArea ) < 12 then
20863: LD_INT 100
20865: PUSH
20866: LD_INT 10
20868: PUSH
20869: LD_OWVAR 67
20873: MUL
20874: MINUS
20875: PPUSH
20876: CALL_OW 13
20880: IFFALSE 20895
20882: PUSH
20883: LD_INT 4
20885: PPUSH
20886: CALL_OW 435
20890: PUSH
20891: LD_INT 12
20893: LESS
20894: AND
20895: IFFALSE 20924
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20897: LD_INT 1
20899: PPUSH
20900: LD_INT 5
20902: PPUSH
20903: CALL_OW 12
20907: PPUSH
20908: LD_INT 218
20910: PPUSH
20911: LD_INT 92
20913: PPUSH
20914: LD_INT 11
20916: PPUSH
20917: LD_INT 1
20919: PPUSH
20920: CALL_OW 56
// end ;
20924: END
// every 0 0$55 trigger IsOk ( amBase ) do
20925: LD_INT 2
20927: PPUSH
20928: CALL_OW 302
20932: IFFALSE 20972
20934: GO 20936
20936: DISABLE
// begin enable ;
20937: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20938: LD_INT 13
20940: PPUSH
20941: CALL_OW 435
20945: PUSH
20946: LD_INT 3
20948: LESS
20949: IFFALSE 20972
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20951: LD_INT 1
20953: PPUSH
20954: LD_INT 5
20956: PPUSH
20957: CALL_OW 12
20961: PPUSH
20962: LD_INT 13
20964: PPUSH
20965: LD_INT 1
20967: PPUSH
20968: CALL_OW 55
// end ;
20972: END
// every 1 1$05 trigger IsOk ( legBase ) do
20973: LD_INT 38
20975: PPUSH
20976: CALL_OW 302
20980: IFFALSE 21020
20982: GO 20984
20984: DISABLE
// begin enable ;
20985: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20986: LD_INT 14
20988: PPUSH
20989: CALL_OW 435
20993: PUSH
20994: LD_INT 3
20996: LESS
20997: IFFALSE 21020
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20999: LD_INT 1
21001: PPUSH
21002: LD_INT 5
21004: PPUSH
21005: CALL_OW 12
21009: PPUSH
21010: LD_INT 14
21012: PPUSH
21013: LD_INT 1
21015: PPUSH
21016: CALL_OW 55
// end ; end_of_file
21020: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
21021: LD_EXP 19
21025: IFFALSE 21042
21027: PUSH
21028: LD_EXP 24
21032: PPUSH
21033: CALL_OW 257
21037: PUSH
21038: LD_INT 11
21040: NONEQUAL
21041: AND
21042: IFFALSE 21050
21044: PUSH
21045: LD_EXP 7
21049: AND
21050: IFFALSE 21061
21052: PUSH
21053: LD_INT 85
21055: PPUSH
21056: CALL_OW 302
21060: AND
21061: IFFALSE 21081
21063: GO 21065
21065: DISABLE
// begin Query ( QSheik ) ;
21066: LD_STRING QSheik
21068: PPUSH
21069: CALL_OW 97
// omarCanChangeClass := true ;
21073: LD_ADDR_EXP 20
21077: PUSH
21078: LD_INT 1
21080: ST_TO_ADDR
// end ;
21081: END
// every 0 0$3 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
21082: LD_EXP 20
21086: IFFALSE 21103
21088: PUSH
21089: LD_EXP 24
21093: PPUSH
21094: CALL_OW 257
21098: PUSH
21099: LD_INT 11
21101: NONEQUAL
21102: AND
21103: IFFALSE 21120
21105: PUSH
21106: LD_EXP 24
21110: PPUSH
21111: CALL_OW 310
21115: PUSH
21116: LD_INT 85
21118: EQUAL
21119: AND
21120: IFFALSE 21151
21122: GO 21124
21124: DISABLE
// begin enable ;
21125: ENABLE
// if Query ( QChangeClass ) = 1 then
21126: LD_STRING QChangeClass
21128: PPUSH
21129: CALL_OW 97
21133: PUSH
21134: LD_INT 1
21136: EQUAL
21137: IFFALSE 21151
// SetClass ( Omar , class_desert_warior ) ;
21139: LD_EXP 24
21143: PPUSH
21144: LD_INT 11
21146: PPUSH
21147: CALL_OW 336
// end ; end_of_file
21151: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
// if exist_mode then
21156: LD_VAR 0 2
21160: IFFALSE 21206
// begin unit := CreateCharacter ( prefix & ident ) ;
21162: LD_ADDR_VAR 0 5
21166: PUSH
21167: LD_VAR 0 3
21171: PUSH
21172: LD_VAR 0 1
21176: STR
21177: PPUSH
21178: CALL_OW 34
21182: ST_TO_ADDR
// if unit then
21183: LD_VAR 0 5
21187: IFFALSE 21204
// DeleteCharacters ( prefix & ident ) ;
21189: LD_VAR 0 3
21193: PUSH
21194: LD_VAR 0 1
21198: STR
21199: PPUSH
21200: CALL_OW 40
// end else
21204: GO 21221
// unit := NewCharacter ( ident ) ;
21206: LD_ADDR_VAR 0 5
21210: PUSH
21211: LD_VAR 0 1
21215: PPUSH
21216: CALL_OW 25
21220: ST_TO_ADDR
// result := unit ;
21221: LD_ADDR_VAR 0 4
21225: PUSH
21226: LD_VAR 0 5
21230: ST_TO_ADDR
// end ;
21231: LD_VAR 0 4
21235: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
21236: LD_INT 0
21238: PPUSH
21239: PPUSH
// if exist_mode then
21240: LD_VAR 0 2
21244: IFFALSE 21269
// unit := CreateCharacter ( prefix & ident ) else
21246: LD_ADDR_VAR 0 5
21250: PUSH
21251: LD_VAR 0 3
21255: PUSH
21256: LD_VAR 0 1
21260: STR
21261: PPUSH
21262: CALL_OW 34
21266: ST_TO_ADDR
21267: GO 21284
// unit := NewCharacter ( ident ) ;
21269: LD_ADDR_VAR 0 5
21273: PUSH
21274: LD_VAR 0 1
21278: PPUSH
21279: CALL_OW 25
21283: ST_TO_ADDR
// result := unit ;
21284: LD_ADDR_VAR 0 4
21288: PUSH
21289: LD_VAR 0 5
21293: ST_TO_ADDR
// end ;
21294: LD_VAR 0 4
21298: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
// if not side or not nation then
21303: LD_VAR 0 1
21307: NOT
21308: IFTRUE 21317
21310: PUSH
21311: LD_VAR 0 2
21315: NOT
21316: OR
21317: IFFALSE 21321
// exit ;
21319: GO 22115
// case nation of nation_american :
21321: LD_VAR 0 2
21325: PUSH
21326: LD_INT 1
21328: DOUBLE
21329: EQUAL
21330: IFTRUE 21334
21332: GO 21556
21334: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
21335: LD_ADDR_VAR 0 4
21339: PUSH
21340: LD_INT 35
21342: PUSH
21343: LD_INT 45
21345: PUSH
21346: LD_INT 46
21348: PUSH
21349: LD_INT 47
21351: PUSH
21352: LD_INT 82
21354: PUSH
21355: LD_INT 83
21357: PUSH
21358: LD_INT 84
21360: PUSH
21361: LD_INT 85
21363: PUSH
21364: LD_INT 86
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: LD_INT 2
21372: PUSH
21373: LD_INT 6
21375: PUSH
21376: LD_INT 15
21378: PUSH
21379: LD_INT 16
21381: PUSH
21382: LD_INT 7
21384: PUSH
21385: LD_INT 12
21387: PUSH
21388: LD_INT 13
21390: PUSH
21391: LD_INT 10
21393: PUSH
21394: LD_INT 14
21396: PUSH
21397: LD_INT 20
21399: PUSH
21400: LD_INT 21
21402: PUSH
21403: LD_INT 22
21405: PUSH
21406: LD_INT 25
21408: PUSH
21409: LD_INT 32
21411: PUSH
21412: LD_INT 27
21414: PUSH
21415: LD_INT 36
21417: PUSH
21418: LD_INT 69
21420: PUSH
21421: LD_INT 39
21423: PUSH
21424: LD_INT 34
21426: PUSH
21427: LD_INT 40
21429: PUSH
21430: LD_INT 48
21432: PUSH
21433: LD_INT 49
21435: PUSH
21436: LD_INT 50
21438: PUSH
21439: LD_INT 51
21441: PUSH
21442: LD_INT 52
21444: PUSH
21445: LD_INT 53
21447: PUSH
21448: LD_INT 54
21450: PUSH
21451: LD_INT 55
21453: PUSH
21454: LD_INT 56
21456: PUSH
21457: LD_INT 57
21459: PUSH
21460: LD_INT 58
21462: PUSH
21463: LD_INT 59
21465: PUSH
21466: LD_INT 60
21468: PUSH
21469: LD_INT 61
21471: PUSH
21472: LD_INT 62
21474: PUSH
21475: LD_INT 80
21477: PUSH
21478: LD_INT 82
21480: PUSH
21481: LD_INT 83
21483: PUSH
21484: LD_INT 84
21486: PUSH
21487: LD_INT 85
21489: PUSH
21490: LD_INT 86
21492: PUSH
21493: LD_INT 90
21495: PUSH
21496: LD_INT 93
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: ST_TO_ADDR
21554: GO 22037
21556: LD_INT 2
21558: DOUBLE
21559: EQUAL
21560: IFTRUE 21564
21562: GO 21798
21564: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
21565: LD_ADDR_VAR 0 4
21569: PUSH
21570: LD_INT 35
21572: PUSH
21573: LD_INT 45
21575: PUSH
21576: LD_INT 46
21578: PUSH
21579: LD_INT 47
21581: PUSH
21582: LD_INT 82
21584: PUSH
21585: LD_INT 83
21587: PUSH
21588: LD_INT 84
21590: PUSH
21591: LD_INT 85
21593: PUSH
21594: LD_INT 87
21596: PUSH
21597: LD_INT 70
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: LD_INT 11
21605: PUSH
21606: LD_INT 3
21608: PUSH
21609: LD_INT 4
21611: PUSH
21612: LD_INT 5
21614: PUSH
21615: LD_INT 6
21617: PUSH
21618: LD_INT 15
21620: PUSH
21621: LD_INT 18
21623: PUSH
21624: LD_INT 7
21626: PUSH
21627: LD_INT 17
21629: PUSH
21630: LD_INT 8
21632: PUSH
21633: LD_INT 20
21635: PUSH
21636: LD_INT 21
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_INT 72
21644: PUSH
21645: LD_INT 26
21647: PUSH
21648: LD_INT 69
21650: PUSH
21651: LD_INT 39
21653: PUSH
21654: LD_INT 40
21656: PUSH
21657: LD_INT 41
21659: PUSH
21660: LD_INT 42
21662: PUSH
21663: LD_INT 43
21665: PUSH
21666: LD_INT 48
21668: PUSH
21669: LD_INT 49
21671: PUSH
21672: LD_INT 50
21674: PUSH
21675: LD_INT 51
21677: PUSH
21678: LD_INT 52
21680: PUSH
21681: LD_INT 53
21683: PUSH
21684: LD_INT 54
21686: PUSH
21687: LD_INT 55
21689: PUSH
21690: LD_INT 56
21692: PUSH
21693: LD_INT 60
21695: PUSH
21696: LD_INT 61
21698: PUSH
21699: LD_INT 62
21701: PUSH
21702: LD_INT 66
21704: PUSH
21705: LD_INT 67
21707: PUSH
21708: LD_INT 68
21710: PUSH
21711: LD_INT 81
21713: PUSH
21714: LD_INT 82
21716: PUSH
21717: LD_INT 83
21719: PUSH
21720: LD_INT 84
21722: PUSH
21723: LD_INT 85
21725: PUSH
21726: LD_INT 87
21728: PUSH
21729: LD_INT 88
21731: PUSH
21732: LD_INT 92
21734: PUSH
21735: LD_INT 94
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: ST_TO_ADDR
21796: GO 22037
21798: LD_INT 3
21800: DOUBLE
21801: EQUAL
21802: IFTRUE 21806
21804: GO 22036
21806: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
21807: LD_ADDR_VAR 0 4
21811: PUSH
21812: LD_INT 46
21814: PUSH
21815: LD_INT 47
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 82
21826: PUSH
21827: LD_INT 83
21829: PUSH
21830: LD_INT 84
21832: PUSH
21833: LD_INT 85
21835: PUSH
21836: LD_INT 86
21838: PUSH
21839: LD_INT 11
21841: PUSH
21842: LD_INT 9
21844: PUSH
21845: LD_INT 20
21847: PUSH
21848: LD_INT 19
21850: PUSH
21851: LD_INT 21
21853: PUSH
21854: LD_INT 24
21856: PUSH
21857: LD_INT 22
21859: PUSH
21860: LD_INT 25
21862: PUSH
21863: LD_INT 28
21865: PUSH
21866: LD_INT 29
21868: PUSH
21869: LD_INT 30
21871: PUSH
21872: LD_INT 31
21874: PUSH
21875: LD_INT 37
21877: PUSH
21878: LD_INT 38
21880: PUSH
21881: LD_INT 32
21883: PUSH
21884: LD_INT 27
21886: PUSH
21887: LD_INT 33
21889: PUSH
21890: LD_INT 69
21892: PUSH
21893: LD_INT 39
21895: PUSH
21896: LD_INT 34
21898: PUSH
21899: LD_INT 40
21901: PUSH
21902: LD_INT 71
21904: PUSH
21905: LD_INT 23
21907: PUSH
21908: LD_INT 44
21910: PUSH
21911: LD_INT 48
21913: PUSH
21914: LD_INT 49
21916: PUSH
21917: LD_INT 50
21919: PUSH
21920: LD_INT 51
21922: PUSH
21923: LD_INT 52
21925: PUSH
21926: LD_INT 53
21928: PUSH
21929: LD_INT 54
21931: PUSH
21932: LD_INT 55
21934: PUSH
21935: LD_INT 56
21937: PUSH
21938: LD_INT 57
21940: PUSH
21941: LD_INT 58
21943: PUSH
21944: LD_INT 59
21946: PUSH
21947: LD_INT 63
21949: PUSH
21950: LD_INT 64
21952: PUSH
21953: LD_INT 65
21955: PUSH
21956: LD_INT 82
21958: PUSH
21959: LD_INT 83
21961: PUSH
21962: LD_INT 84
21964: PUSH
21965: LD_INT 85
21967: PUSH
21968: LD_INT 86
21970: PUSH
21971: LD_INT 89
21973: PUSH
21974: LD_INT 91
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: ST_TO_ADDR
22034: GO 22037
22036: POP
// if state > - 1 and state < 3 then
22037: LD_VAR 0 3
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: GREATER
22046: IFFALSE 22058
22048: PUSH
22049: LD_VAR 0 3
22053: PUSH
22054: LD_INT 3
22056: LESS
22057: AND
22058: IFFALSE 22115
// for i in result do
22060: LD_ADDR_VAR 0 5
22064: PUSH
22065: LD_VAR 0 4
22069: PUSH
22070: FOR_IN
22071: IFFALSE 22113
// if GetTech ( i , side ) <> state then
22073: LD_VAR 0 5
22077: PPUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 321
22087: PUSH
22088: LD_VAR 0 3
22092: NONEQUAL
22093: IFFALSE 22111
// result := result diff i ;
22095: LD_ADDR_VAR 0 4
22099: PUSH
22100: LD_VAR 0 4
22104: PUSH
22105: LD_VAR 0 5
22109: DIFF
22110: ST_TO_ADDR
22111: GO 22070
22113: POP
22114: POP
// end ;
22115: LD_VAR 0 4
22119: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22120: LD_INT 0
22122: PPUSH
22123: PPUSH
22124: PPUSH
// result := true ;
22125: LD_ADDR_VAR 0 3
22129: PUSH
22130: LD_INT 1
22132: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22133: LD_ADDR_VAR 0 5
22137: PUSH
22138: LD_VAR 0 2
22142: PPUSH
22143: CALL_OW 480
22147: ST_TO_ADDR
// if not tmp then
22148: LD_VAR 0 5
22152: NOT
22153: IFFALSE 22157
// exit ;
22155: GO 22206
// for i in tmp do
22157: LD_ADDR_VAR 0 4
22161: PUSH
22162: LD_VAR 0 5
22166: PUSH
22167: FOR_IN
22168: IFFALSE 22204
// if GetTech ( i , side ) <> state_researched then
22170: LD_VAR 0 4
22174: PPUSH
22175: LD_VAR 0 1
22179: PPUSH
22180: CALL_OW 321
22184: PUSH
22185: LD_INT 2
22187: NONEQUAL
22188: IFFALSE 22202
// begin result := false ;
22190: LD_ADDR_VAR 0 3
22194: PUSH
22195: LD_INT 0
22197: ST_TO_ADDR
// exit ;
22198: POP
22199: POP
22200: GO 22206
// end ;
22202: GO 22167
22204: POP
22205: POP
// end ;
22206: LD_VAR 0 3
22210: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22211: LD_INT 0
22213: PPUSH
22214: PPUSH
22215: PPUSH
22216: PPUSH
22217: PPUSH
22218: PPUSH
22219: PPUSH
22220: PPUSH
22221: PPUSH
22222: PPUSH
22223: PPUSH
22224: PPUSH
22225: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22226: LD_VAR 0 1
22230: NOT
22231: IFTRUE 22248
22233: PUSH
22234: LD_VAR 0 1
22238: PPUSH
22239: CALL_OW 257
22243: PUSH
22244: LD_INT 9
22246: NONEQUAL
22247: OR
22248: IFFALSE 22252
// exit ;
22250: GO 22831
// side := GetSide ( unit ) ;
22252: LD_ADDR_VAR 0 9
22256: PUSH
22257: LD_VAR 0 1
22261: PPUSH
22262: CALL_OW 255
22266: ST_TO_ADDR
// tech_space := tech_spacanom ;
22267: LD_ADDR_VAR 0 12
22271: PUSH
22272: LD_INT 29
22274: ST_TO_ADDR
// tech_time := tech_taurad ;
22275: LD_ADDR_VAR 0 13
22279: PUSH
22280: LD_INT 28
22282: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22283: LD_ADDR_VAR 0 11
22287: PUSH
22288: LD_VAR 0 1
22292: PPUSH
22293: CALL_OW 310
22297: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22298: LD_VAR 0 11
22302: PPUSH
22303: CALL_OW 247
22307: PUSH
22308: LD_INT 2
22310: EQUAL
22311: IFFALSE 22315
// exit ;
22313: GO 22831
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22315: LD_ADDR_VAR 0 8
22319: PUSH
22320: LD_INT 81
22322: PUSH
22323: LD_VAR 0 9
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: LD_INT 21
22337: PUSH
22338: LD_INT 3
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PPUSH
22353: CALL_OW 69
22357: ST_TO_ADDR
// if not tmp then
22358: LD_VAR 0 8
22362: NOT
22363: IFFALSE 22367
// exit ;
22365: GO 22831
// if in_unit then
22367: LD_VAR 0 11
22371: IFFALSE 22395
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22373: LD_ADDR_VAR 0 10
22377: PUSH
22378: LD_VAR 0 8
22382: PPUSH
22383: LD_VAR 0 11
22387: PPUSH
22388: CALL_OW 74
22392: ST_TO_ADDR
22393: GO 22415
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22395: LD_ADDR_VAR 0 10
22399: PUSH
22400: LD_VAR 0 8
22404: PPUSH
22405: LD_VAR 0 1
22409: PPUSH
22410: CALL_OW 74
22414: ST_TO_ADDR
// if not enemy then
22415: LD_VAR 0 10
22419: NOT
22420: IFFALSE 22424
// exit ;
22422: GO 22831
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22424: LD_VAR 0 11
22428: IFFALSE 22450
22430: PUSH
22431: LD_VAR 0 11
22435: PPUSH
22436: LD_VAR 0 10
22440: PPUSH
22441: CALL_OW 296
22445: PUSH
22446: LD_INT 13
22448: GREATER
22449: AND
22450: IFTRUE 22472
22452: PUSH
22453: LD_VAR 0 1
22457: PPUSH
22458: LD_VAR 0 10
22462: PPUSH
22463: CALL_OW 296
22467: PUSH
22468: LD_INT 12
22470: GREATER
22471: OR
22472: IFFALSE 22476
// exit ;
22474: GO 22831
// missile := [ 1 ] ;
22476: LD_ADDR_VAR 0 14
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: EMPTY
22485: LIST
22486: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22487: LD_VAR 0 9
22491: PPUSH
22492: LD_VAR 0 12
22496: PPUSH
22497: CALL_OW 325
22501: IFFALSE 22530
// missile := Replace ( missile , missile + 1 , 2 ) ;
22503: LD_ADDR_VAR 0 14
22507: PUSH
22508: LD_VAR 0 14
22512: PPUSH
22513: LD_VAR 0 14
22517: PUSH
22518: LD_INT 1
22520: PLUS
22521: PPUSH
22522: LD_INT 2
22524: PPUSH
22525: CALL_OW 1
22529: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22530: LD_VAR 0 9
22534: PPUSH
22535: LD_VAR 0 13
22539: PPUSH
22540: CALL_OW 325
22544: IFFALSE 22568
22546: PUSH
22547: LD_VAR 0 10
22551: PPUSH
22552: CALL_OW 255
22556: PPUSH
22557: LD_VAR 0 13
22561: PPUSH
22562: CALL_OW 325
22566: NOT
22567: AND
22568: IFFALSE 22597
// missile := Replace ( missile , missile + 1 , 3 ) ;
22570: LD_ADDR_VAR 0 14
22574: PUSH
22575: LD_VAR 0 14
22579: PPUSH
22580: LD_VAR 0 14
22584: PUSH
22585: LD_INT 1
22587: PLUS
22588: PPUSH
22589: LD_INT 3
22591: PPUSH
22592: CALL_OW 1
22596: ST_TO_ADDR
// if missile < 2 then
22597: LD_VAR 0 14
22601: PUSH
22602: LD_INT 2
22604: LESS
22605: IFFALSE 22609
// exit ;
22607: GO 22831
// x := GetX ( enemy ) ;
22609: LD_ADDR_VAR 0 4
22613: PUSH
22614: LD_VAR 0 10
22618: PPUSH
22619: CALL_OW 250
22623: ST_TO_ADDR
// y := GetY ( enemy ) ;
22624: LD_ADDR_VAR 0 5
22628: PUSH
22629: LD_VAR 0 10
22633: PPUSH
22634: CALL_OW 251
22638: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22639: LD_ADDR_VAR 0 6
22643: PUSH
22644: LD_VAR 0 4
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: CALL_OW 12
22660: PLUS
22661: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22662: LD_ADDR_VAR 0 7
22666: PUSH
22667: LD_VAR 0 5
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PPUSH
22676: LD_INT 1
22678: PPUSH
22679: CALL_OW 12
22683: PLUS
22684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22685: LD_VAR 0 6
22689: PPUSH
22690: LD_VAR 0 7
22694: PPUSH
22695: CALL_OW 488
22699: NOT
22700: IFFALSE 22722
// begin _x := x ;
22702: LD_ADDR_VAR 0 6
22706: PUSH
22707: LD_VAR 0 4
22711: ST_TO_ADDR
// _y := y ;
22712: LD_ADDR_VAR 0 7
22716: PUSH
22717: LD_VAR 0 5
22721: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22722: LD_ADDR_VAR 0 3
22726: PUSH
22727: LD_INT 1
22729: PPUSH
22730: LD_VAR 0 14
22734: PPUSH
22735: CALL_OW 12
22739: ST_TO_ADDR
// case i of 1 :
22740: LD_VAR 0 3
22744: PUSH
22745: LD_INT 1
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22770
22753: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22754: LD_VAR 0 1
22758: PPUSH
22759: LD_VAR 0 10
22763: PPUSH
22764: CALL_OW 115
22768: GO 22831
22770: LD_INT 2
22772: DOUBLE
22773: EQUAL
22774: IFTRUE 22778
22776: GO 22800
22778: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22779: LD_VAR 0 1
22783: PPUSH
22784: LD_VAR 0 6
22788: PPUSH
22789: LD_VAR 0 7
22793: PPUSH
22794: CALL_OW 153
22798: GO 22831
22800: LD_INT 3
22802: DOUBLE
22803: EQUAL
22804: IFTRUE 22808
22806: GO 22830
22808: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22809: LD_VAR 0 1
22813: PPUSH
22814: LD_VAR 0 6
22818: PPUSH
22819: LD_VAR 0 7
22823: PPUSH
22824: CALL_OW 154
22828: GO 22831
22830: POP
// end ;
22831: LD_VAR 0 2
22835: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22836: LD_INT 0
22838: PPUSH
22839: PPUSH
22840: PPUSH
22841: PPUSH
22842: PPUSH
22843: PPUSH
// if not unit or not building then
22844: LD_VAR 0 1
22848: NOT
22849: IFTRUE 22858
22851: PUSH
22852: LD_VAR 0 2
22856: NOT
22857: OR
22858: IFFALSE 22862
// exit ;
22860: GO 23020
// x := GetX ( building ) ;
22862: LD_ADDR_VAR 0 5
22866: PUSH
22867: LD_VAR 0 2
22871: PPUSH
22872: CALL_OW 250
22876: ST_TO_ADDR
// y := GetY ( building ) ;
22877: LD_ADDR_VAR 0 6
22881: PUSH
22882: LD_VAR 0 2
22886: PPUSH
22887: CALL_OW 251
22891: ST_TO_ADDR
// for i := 0 to 5 do
22892: LD_ADDR_VAR 0 4
22896: PUSH
22897: DOUBLE
22898: LD_INT 0
22900: DEC
22901: ST_TO_ADDR
22902: LD_INT 5
22904: PUSH
22905: FOR_TO
22906: IFFALSE 23018
// begin _x := ShiftX ( x , i , 3 ) ;
22908: LD_ADDR_VAR 0 7
22912: PUSH
22913: LD_VAR 0 5
22917: PPUSH
22918: LD_VAR 0 4
22922: PPUSH
22923: LD_INT 3
22925: PPUSH
22926: CALL_OW 272
22930: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22931: LD_ADDR_VAR 0 8
22935: PUSH
22936: LD_VAR 0 6
22940: PPUSH
22941: LD_VAR 0 4
22945: PPUSH
22946: LD_INT 3
22948: PPUSH
22949: CALL_OW 273
22953: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22954: LD_VAR 0 7
22958: PPUSH
22959: LD_VAR 0 8
22963: PPUSH
22964: CALL_OW 488
22968: NOT
22969: IFFALSE 22973
// continue ;
22971: GO 22905
// if HexInfo ( _x , _y ) = 0 then
22973: LD_VAR 0 7
22977: PPUSH
22978: LD_VAR 0 8
22982: PPUSH
22983: CALL_OW 428
22987: PUSH
22988: LD_INT 0
22990: EQUAL
22991: IFFALSE 23016
// begin ComMoveXY ( unit , _x , _y ) ;
22993: LD_VAR 0 1
22997: PPUSH
22998: LD_VAR 0 7
23002: PPUSH
23003: LD_VAR 0 8
23007: PPUSH
23008: CALL_OW 111
// exit ;
23012: POP
23013: POP
23014: GO 23020
// end ; end ;
23016: GO 22905
23018: POP
23019: POP
// end ;
23020: LD_VAR 0 3
23024: RET
// export function ScanBase ( side , base_area ) ; begin
23025: LD_INT 0
23027: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23028: LD_ADDR_VAR 0 3
23032: PUSH
23033: LD_VAR 0 2
23037: PPUSH
23038: LD_INT 81
23040: PUSH
23041: LD_VAR 0 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PPUSH
23050: CALL_OW 70
23054: ST_TO_ADDR
// end ;
23055: LD_VAR 0 3
23059: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23060: LD_INT 0
23062: PPUSH
23063: PPUSH
23064: PPUSH
23065: PPUSH
// result := false ;
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_INT 0
23073: ST_TO_ADDR
// side := GetSide ( unit ) ;
23074: LD_ADDR_VAR 0 3
23078: PUSH
23079: LD_VAR 0 1
23083: PPUSH
23084: CALL_OW 255
23088: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23089: LD_ADDR_VAR 0 4
23093: PUSH
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL_OW 248
23103: ST_TO_ADDR
// case nat of 1 :
23104: LD_VAR 0 4
23108: PUSH
23109: LD_INT 1
23111: DOUBLE
23112: EQUAL
23113: IFTRUE 23117
23115: GO 23128
23117: POP
// tech := tech_lassight ; 2 :
23118: LD_ADDR_VAR 0 5
23122: PUSH
23123: LD_INT 12
23125: ST_TO_ADDR
23126: GO 23167
23128: LD_INT 2
23130: DOUBLE
23131: EQUAL
23132: IFTRUE 23136
23134: GO 23147
23136: POP
// tech := tech_mortar ; 3 :
23137: LD_ADDR_VAR 0 5
23141: PUSH
23142: LD_INT 41
23144: ST_TO_ADDR
23145: GO 23167
23147: LD_INT 3
23149: DOUBLE
23150: EQUAL
23151: IFTRUE 23155
23153: GO 23166
23155: POP
// tech := tech_bazooka ; end ;
23156: LD_ADDR_VAR 0 5
23160: PUSH
23161: LD_INT 44
23163: ST_TO_ADDR
23164: GO 23167
23166: POP
// if Researched ( side , tech ) then
23167: LD_VAR 0 3
23171: PPUSH
23172: LD_VAR 0 5
23176: PPUSH
23177: CALL_OW 325
23181: IFFALSE 23208
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23183: LD_ADDR_VAR 0 2
23187: PUSH
23188: LD_INT 5
23190: PUSH
23191: LD_INT 8
23193: PUSH
23194: LD_INT 9
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: PUSH
23202: LD_VAR 0 4
23206: ARRAY
23207: ST_TO_ADDR
// end ;
23208: LD_VAR 0 2
23212: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23213: LD_INT 0
23215: PPUSH
23216: PPUSH
23217: PPUSH
// if not mines then
23218: LD_VAR 0 2
23222: NOT
23223: IFFALSE 23227
// exit ;
23225: GO 23371
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23227: LD_ADDR_VAR 0 5
23231: PUSH
23232: LD_INT 81
23234: PUSH
23235: LD_VAR 0 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: LD_INT 21
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PPUSH
23265: CALL_OW 69
23269: ST_TO_ADDR
// for i in mines do
23270: LD_ADDR_VAR 0 4
23274: PUSH
23275: LD_VAR 0 2
23279: PUSH
23280: FOR_IN
23281: IFFALSE 23369
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23283: LD_VAR 0 4
23287: PUSH
23288: LD_INT 1
23290: ARRAY
23291: PPUSH
23292: LD_VAR 0 4
23296: PUSH
23297: LD_INT 2
23299: ARRAY
23300: PPUSH
23301: CALL_OW 458
23305: NOT
23306: IFFALSE 23310
// continue ;
23308: GO 23280
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23310: LD_VAR 0 4
23314: PUSH
23315: LD_INT 1
23317: ARRAY
23318: PPUSH
23319: LD_VAR 0 4
23323: PUSH
23324: LD_INT 2
23326: ARRAY
23327: PPUSH
23328: CALL_OW 428
23332: PUSH
23333: LD_VAR 0 5
23337: IN
23338: IFFALSE 23367
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23340: LD_VAR 0 4
23344: PUSH
23345: LD_INT 1
23347: ARRAY
23348: PPUSH
23349: LD_VAR 0 4
23353: PUSH
23354: LD_INT 2
23356: ARRAY
23357: PPUSH
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 456
// end ;
23367: GO 23280
23369: POP
23370: POP
// end ;
23371: LD_VAR 0 3
23375: RET
// export function Count ( array ) ; begin
23376: LD_INT 0
23378: PPUSH
// result := array + 0 ;
23379: LD_ADDR_VAR 0 2
23383: PUSH
23384: LD_VAR 0 1
23388: PUSH
23389: LD_INT 0
23391: PLUS
23392: ST_TO_ADDR
// end ;
23393: LD_VAR 0 2
23397: RET
// export function IsEmpty ( building ) ; begin
23398: LD_INT 0
23400: PPUSH
// if not building then
23401: LD_VAR 0 1
23405: NOT
23406: IFFALSE 23410
// exit ;
23408: GO 23453
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23410: LD_ADDR_VAR 0 2
23414: PUSH
23415: LD_VAR 0 1
23419: PUSH
23420: LD_INT 22
23422: PUSH
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 255
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 58
23439: PUSH
23440: EMPTY
23441: LIST
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PPUSH
23447: CALL_OW 69
23451: IN
23452: ST_TO_ADDR
// end ;
23453: LD_VAR 0 2
23457: RET
// export function IsNotFull ( building ) ; var places ; begin
23458: LD_INT 0
23460: PPUSH
23461: PPUSH
// if not building then
23462: LD_VAR 0 1
23466: NOT
23467: IFFALSE 23471
// exit ;
23469: GO 23499
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23471: LD_ADDR_VAR 0 2
23475: PUSH
23476: LD_VAR 0 1
23480: PPUSH
23481: LD_INT 3
23483: PUSH
23484: LD_INT 62
23486: PUSH
23487: EMPTY
23488: LIST
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PPUSH
23494: CALL_OW 72
23498: ST_TO_ADDR
// end ;
23499: LD_VAR 0 2
23503: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23504: LD_INT 0
23506: PPUSH
23507: PPUSH
23508: PPUSH
23509: PPUSH
// tmp := [ ] ;
23510: LD_ADDR_VAR 0 3
23514: PUSH
23515: EMPTY
23516: ST_TO_ADDR
// list := [ ] ;
23517: LD_ADDR_VAR 0 5
23521: PUSH
23522: EMPTY
23523: ST_TO_ADDR
// for i = 16 to 25 do
23524: LD_ADDR_VAR 0 4
23528: PUSH
23529: DOUBLE
23530: LD_INT 16
23532: DEC
23533: ST_TO_ADDR
23534: LD_INT 25
23536: PUSH
23537: FOR_TO
23538: IFFALSE 23611
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23540: LD_ADDR_VAR 0 3
23544: PUSH
23545: LD_VAR 0 3
23549: PUSH
23550: LD_INT 22
23552: PUSH
23553: LD_VAR 0 1
23557: PPUSH
23558: CALL_OW 255
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 91
23569: PUSH
23570: LD_VAR 0 1
23574: PUSH
23575: LD_INT 6
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 30
23585: PUSH
23586: LD_VAR 0 4
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: PUSH
23600: EMPTY
23601: LIST
23602: PPUSH
23603: CALL_OW 69
23607: ADD
23608: ST_TO_ADDR
23609: GO 23537
23611: POP
23612: POP
// for i = 1 to tmp do
23613: LD_ADDR_VAR 0 4
23617: PUSH
23618: DOUBLE
23619: LD_INT 1
23621: DEC
23622: ST_TO_ADDR
23623: LD_VAR 0 3
23627: PUSH
23628: FOR_TO
23629: IFFALSE 23717
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23631: LD_ADDR_VAR 0 5
23635: PUSH
23636: LD_VAR 0 5
23640: PUSH
23641: LD_VAR 0 3
23645: PUSH
23646: LD_VAR 0 4
23650: ARRAY
23651: PPUSH
23652: CALL_OW 266
23656: PUSH
23657: LD_VAR 0 3
23661: PUSH
23662: LD_VAR 0 4
23666: ARRAY
23667: PPUSH
23668: CALL_OW 250
23672: PUSH
23673: LD_VAR 0 3
23677: PUSH
23678: LD_VAR 0 4
23682: ARRAY
23683: PPUSH
23684: CALL_OW 251
23688: PUSH
23689: LD_VAR 0 3
23693: PUSH
23694: LD_VAR 0 4
23698: ARRAY
23699: PPUSH
23700: CALL_OW 254
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: PUSH
23711: EMPTY
23712: LIST
23713: ADD
23714: ST_TO_ADDR
23715: GO 23628
23717: POP
23718: POP
// result := list ;
23719: LD_ADDR_VAR 0 2
23723: PUSH
23724: LD_VAR 0 5
23728: ST_TO_ADDR
// end ;
23729: LD_VAR 0 2
23733: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23734: LD_INT 0
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
23742: PPUSH
// if not factory then
23743: LD_VAR 0 1
23747: NOT
23748: IFFALSE 23752
// exit ;
23750: GO 24355
// if control = control_apeman then
23752: LD_VAR 0 4
23756: PUSH
23757: LD_INT 5
23759: EQUAL
23760: IFFALSE 23869
// begin tmp := UnitsInside ( factory ) ;
23762: LD_ADDR_VAR 0 8
23766: PUSH
23767: LD_VAR 0 1
23771: PPUSH
23772: CALL_OW 313
23776: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23777: LD_VAR 0 8
23781: PPUSH
23782: LD_INT 25
23784: PUSH
23785: LD_INT 12
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PPUSH
23792: CALL_OW 72
23796: NOT
23797: IFFALSE 23807
// control := control_manual ;
23799: LD_ADDR_VAR 0 4
23803: PUSH
23804: LD_INT 1
23806: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23807: LD_ADDR_VAR 0 8
23811: PUSH
23812: LD_VAR 0 1
23816: PPUSH
23817: CALL 23504 0 1
23821: ST_TO_ADDR
// if tmp then
23822: LD_VAR 0 8
23826: IFFALSE 23869
// begin for i in tmp do
23828: LD_ADDR_VAR 0 7
23832: PUSH
23833: LD_VAR 0 8
23837: PUSH
23838: FOR_IN
23839: IFFALSE 23867
// if i [ 1 ] = b_ext_radio then
23841: LD_VAR 0 7
23845: PUSH
23846: LD_INT 1
23848: ARRAY
23849: PUSH
23850: LD_INT 22
23852: EQUAL
23853: IFFALSE 23865
// begin control := control_remote ;
23855: LD_ADDR_VAR 0 4
23859: PUSH
23860: LD_INT 2
23862: ST_TO_ADDR
// break ;
23863: GO 23867
// end ;
23865: GO 23838
23867: POP
23868: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23869: LD_VAR 0 1
23873: PPUSH
23874: LD_VAR 0 2
23878: PPUSH
23879: LD_VAR 0 3
23883: PPUSH
23884: LD_VAR 0 4
23888: PPUSH
23889: LD_VAR 0 5
23893: PPUSH
23894: CALL_OW 448
23898: IFFALSE 23933
// begin result := [ chassis , engine , control , weapon ] ;
23900: LD_ADDR_VAR 0 6
23904: PUSH
23905: LD_VAR 0 2
23909: PUSH
23910: LD_VAR 0 3
23914: PUSH
23915: LD_VAR 0 4
23919: PUSH
23920: LD_VAR 0 5
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: ST_TO_ADDR
// exit ;
23931: GO 24355
// end ; _chassis := AvailableChassisList ( factory ) ;
23933: LD_ADDR_VAR 0 9
23937: PUSH
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL_OW 475
23947: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23948: LD_ADDR_VAR 0 11
23952: PUSH
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL_OW 476
23962: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23963: LD_ADDR_VAR 0 12
23967: PUSH
23968: LD_VAR 0 1
23972: PPUSH
23973: CALL_OW 477
23977: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23978: LD_ADDR_VAR 0 10
23982: PUSH
23983: LD_VAR 0 1
23987: PPUSH
23988: CALL_OW 478
23992: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23993: LD_VAR 0 9
23997: NOT
23998: IFTRUE 24007
24000: PUSH
24001: LD_VAR 0 11
24005: NOT
24006: OR
24007: IFTRUE 24016
24009: PUSH
24010: LD_VAR 0 12
24014: NOT
24015: OR
24016: IFTRUE 24025
24018: PUSH
24019: LD_VAR 0 10
24023: NOT
24024: OR
24025: IFFALSE 24060
// begin result := [ chassis , engine , control , weapon ] ;
24027: LD_ADDR_VAR 0 6
24031: PUSH
24032: LD_VAR 0 2
24036: PUSH
24037: LD_VAR 0 3
24041: PUSH
24042: LD_VAR 0 4
24046: PUSH
24047: LD_VAR 0 5
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: ST_TO_ADDR
// exit ;
24058: GO 24355
// end ; if not chassis in _chassis then
24060: LD_VAR 0 2
24064: PUSH
24065: LD_VAR 0 9
24069: IN
24070: NOT
24071: IFFALSE 24097
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24073: LD_ADDR_VAR 0 2
24077: PUSH
24078: LD_VAR 0 9
24082: PUSH
24083: LD_INT 1
24085: PPUSH
24086: LD_VAR 0 9
24090: PPUSH
24091: CALL_OW 12
24095: ARRAY
24096: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24097: LD_VAR 0 2
24101: PPUSH
24102: LD_VAR 0 3
24106: PPUSH
24107: CALL 24360 0 2
24111: NOT
24112: IFFALSE 24173
// repeat engine := _engine [ 1 ] ;
24114: LD_ADDR_VAR 0 3
24118: PUSH
24119: LD_VAR 0 11
24123: PUSH
24124: LD_INT 1
24126: ARRAY
24127: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24128: LD_ADDR_VAR 0 11
24132: PUSH
24133: LD_VAR 0 11
24137: PPUSH
24138: LD_INT 1
24140: PPUSH
24141: CALL_OW 3
24145: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24146: LD_VAR 0 2
24150: PPUSH
24151: LD_VAR 0 3
24155: PPUSH
24156: CALL 24360 0 2
24160: IFTRUE 24171
24162: PUSH
24163: LD_VAR 0 11
24167: PUSH
24168: EMPTY
24169: EQUAL
24170: OR
24171: IFFALSE 24114
// if not control in _control then
24173: LD_VAR 0 4
24177: PUSH
24178: LD_VAR 0 12
24182: IN
24183: NOT
24184: IFFALSE 24210
// control := _control [ rand ( 1 , _control ) ] ;
24186: LD_ADDR_VAR 0 4
24190: PUSH
24191: LD_VAR 0 12
24195: PUSH
24196: LD_INT 1
24198: PPUSH
24199: LD_VAR 0 12
24203: PPUSH
24204: CALL_OW 12
24208: ARRAY
24209: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24210: LD_VAR 0 2
24214: PPUSH
24215: LD_VAR 0 5
24219: PPUSH
24220: CALL 24582 0 2
24224: NOT
24225: IFFALSE 24286
// repeat weapon := _weapon [ 1 ] ;
24227: LD_ADDR_VAR 0 5
24231: PUSH
24232: LD_VAR 0 10
24236: PUSH
24237: LD_INT 1
24239: ARRAY
24240: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24241: LD_ADDR_VAR 0 10
24245: PUSH
24246: LD_VAR 0 10
24250: PPUSH
24251: LD_INT 1
24253: PPUSH
24254: CALL_OW 3
24258: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24259: LD_VAR 0 2
24263: PPUSH
24264: LD_VAR 0 5
24268: PPUSH
24269: CALL 24582 0 2
24273: IFTRUE 24284
24275: PUSH
24276: LD_VAR 0 10
24280: PUSH
24281: EMPTY
24282: EQUAL
24283: OR
24284: IFFALSE 24227
// result := [ ] ;
24286: LD_ADDR_VAR 0 6
24290: PUSH
24291: EMPTY
24292: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24293: LD_VAR 0 1
24297: PPUSH
24298: LD_VAR 0 2
24302: PPUSH
24303: LD_VAR 0 3
24307: PPUSH
24308: LD_VAR 0 4
24312: PPUSH
24313: LD_VAR 0 5
24317: PPUSH
24318: CALL_OW 448
24322: IFFALSE 24355
// result := [ chassis , engine , control , weapon ] ;
24324: LD_ADDR_VAR 0 6
24328: PUSH
24329: LD_VAR 0 2
24333: PUSH
24334: LD_VAR 0 3
24338: PUSH
24339: LD_VAR 0 4
24343: PUSH
24344: LD_VAR 0 5
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: ST_TO_ADDR
// end ;
24355: LD_VAR 0 6
24359: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24360: LD_INT 0
24362: PPUSH
// if not chassis or not engine then
24363: LD_VAR 0 1
24367: NOT
24368: IFTRUE 24377
24370: PUSH
24371: LD_VAR 0 2
24375: NOT
24376: OR
24377: IFFALSE 24381
// exit ;
24379: GO 24577
// case engine of engine_solar :
24381: LD_VAR 0 2
24385: PUSH
24386: LD_INT 2
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24432
24394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24395: LD_ADDR_VAR 0 3
24399: PUSH
24400: LD_INT 11
24402: PUSH
24403: LD_INT 12
24405: PUSH
24406: LD_INT 13
24408: PUSH
24409: LD_INT 14
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: ST_TO_ADDR
24430: GO 24561
24432: LD_INT 1
24434: DOUBLE
24435: EQUAL
24436: IFTRUE 24440
24438: GO 24502
24440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24441: LD_ADDR_VAR 0 3
24445: PUSH
24446: LD_INT 11
24448: PUSH
24449: LD_INT 12
24451: PUSH
24452: LD_INT 13
24454: PUSH
24455: LD_INT 14
24457: PUSH
24458: LD_INT 1
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: LD_INT 3
24466: PUSH
24467: LD_INT 4
24469: PUSH
24470: LD_INT 5
24472: PUSH
24473: LD_INT 21
24475: PUSH
24476: LD_INT 23
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_INT 24
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: ST_TO_ADDR
24500: GO 24561
24502: LD_INT 3
24504: DOUBLE
24505: EQUAL
24506: IFTRUE 24510
24508: GO 24560
24510: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24511: LD_ADDR_VAR 0 3
24515: PUSH
24516: LD_INT 13
24518: PUSH
24519: LD_INT 14
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: LD_INT 4
24530: PUSH
24531: LD_INT 5
24533: PUSH
24534: LD_INT 21
24536: PUSH
24537: LD_INT 22
24539: PUSH
24540: LD_INT 23
24542: PUSH
24543: LD_INT 24
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: ST_TO_ADDR
24558: GO 24561
24560: POP
// result := ( chassis in result ) ;
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: LD_VAR 0 1
24570: PUSH
24571: LD_VAR 0 3
24575: IN
24576: ST_TO_ADDR
// end ;
24577: LD_VAR 0 3
24581: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24582: LD_INT 0
24584: PPUSH
// if not chassis or not weapon then
24585: LD_VAR 0 1
24589: NOT
24590: IFTRUE 24599
24592: PUSH
24593: LD_VAR 0 2
24597: NOT
24598: OR
24599: IFFALSE 24603
// exit ;
24601: GO 25663
// case weapon of us_machine_gun :
24603: LD_VAR 0 2
24607: PUSH
24608: LD_INT 2
24610: DOUBLE
24611: EQUAL
24612: IFTRUE 24616
24614: GO 24646
24616: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24617: LD_ADDR_VAR 0 3
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: LD_INT 2
24627: PUSH
24628: LD_INT 3
24630: PUSH
24631: LD_INT 4
24633: PUSH
24634: LD_INT 5
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: ST_TO_ADDR
24644: GO 25647
24646: LD_INT 3
24648: DOUBLE
24649: EQUAL
24650: IFTRUE 24654
24652: GO 24684
24654: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24655: LD_ADDR_VAR 0 3
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: LD_INT 2
24665: PUSH
24666: LD_INT 3
24668: PUSH
24669: LD_INT 4
24671: PUSH
24672: LD_INT 5
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: ST_TO_ADDR
24682: GO 25647
24684: LD_INT 11
24686: DOUBLE
24687: EQUAL
24688: IFTRUE 24692
24690: GO 24722
24692: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24693: LD_ADDR_VAR 0 3
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 3
24706: PUSH
24707: LD_INT 4
24709: PUSH
24710: LD_INT 5
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: ST_TO_ADDR
24720: GO 25647
24722: LD_INT 4
24724: DOUBLE
24725: EQUAL
24726: IFTRUE 24730
24728: GO 24756
24730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24731: LD_ADDR_VAR 0 3
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 3
24741: PUSH
24742: LD_INT 4
24744: PUSH
24745: LD_INT 5
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: ST_TO_ADDR
24754: GO 25647
24756: LD_INT 5
24758: DOUBLE
24759: EQUAL
24760: IFTRUE 24764
24762: GO 24790
24764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24765: LD_ADDR_VAR 0 3
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: LD_INT 3
24775: PUSH
24776: LD_INT 4
24778: PUSH
24779: LD_INT 5
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: ST_TO_ADDR
24788: GO 25647
24790: LD_INT 9
24792: DOUBLE
24793: EQUAL
24794: IFTRUE 24798
24796: GO 24824
24798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24799: LD_ADDR_VAR 0 3
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: LD_INT 3
24809: PUSH
24810: LD_INT 4
24812: PUSH
24813: LD_INT 5
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: ST_TO_ADDR
24822: GO 25647
24824: LD_INT 7
24826: DOUBLE
24827: EQUAL
24828: IFTRUE 24832
24830: GO 24858
24832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24833: LD_ADDR_VAR 0 3
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: LD_INT 4
24846: PUSH
24847: LD_INT 5
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: ST_TO_ADDR
24856: GO 25647
24858: LD_INT 12
24860: DOUBLE
24861: EQUAL
24862: IFTRUE 24866
24864: GO 24892
24866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24867: LD_ADDR_VAR 0 3
24871: PUSH
24872: LD_INT 2
24874: PUSH
24875: LD_INT 3
24877: PUSH
24878: LD_INT 4
24880: PUSH
24881: LD_INT 5
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: ST_TO_ADDR
24890: GO 25647
24892: LD_INT 13
24894: DOUBLE
24895: EQUAL
24896: IFTRUE 24900
24898: GO 24926
24900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: LD_INT 3
24911: PUSH
24912: LD_INT 4
24914: PUSH
24915: LD_INT 5
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: ST_TO_ADDR
24924: GO 25647
24926: LD_INT 14
24928: DOUBLE
24929: EQUAL
24930: IFTRUE 24934
24932: GO 24952
24934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24935: LD_ADDR_VAR 0 3
24939: PUSH
24940: LD_INT 4
24942: PUSH
24943: LD_INT 5
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: ST_TO_ADDR
24950: GO 25647
24952: LD_INT 6
24954: DOUBLE
24955: EQUAL
24956: IFTRUE 24960
24958: GO 24978
24960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24961: LD_ADDR_VAR 0 3
24965: PUSH
24966: LD_INT 4
24968: PUSH
24969: LD_INT 5
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: ST_TO_ADDR
24976: GO 25647
24978: LD_INT 10
24980: DOUBLE
24981: EQUAL
24982: IFTRUE 24986
24984: GO 25004
24986: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_INT 4
24994: PUSH
24995: LD_INT 5
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: ST_TO_ADDR
25002: GO 25647
25004: LD_INT 22
25006: DOUBLE
25007: EQUAL
25008: IFTRUE 25012
25010: GO 25038
25012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25013: LD_ADDR_VAR 0 3
25017: PUSH
25018: LD_INT 11
25020: PUSH
25021: LD_INT 12
25023: PUSH
25024: LD_INT 13
25026: PUSH
25027: LD_INT 14
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: ST_TO_ADDR
25036: GO 25647
25038: LD_INT 23
25040: DOUBLE
25041: EQUAL
25042: IFTRUE 25046
25044: GO 25072
25046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_INT 11
25054: PUSH
25055: LD_INT 12
25057: PUSH
25058: LD_INT 13
25060: PUSH
25061: LD_INT 14
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: ST_TO_ADDR
25070: GO 25647
25072: LD_INT 24
25074: DOUBLE
25075: EQUAL
25076: IFTRUE 25080
25078: GO 25106
25080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25081: LD_ADDR_VAR 0 3
25085: PUSH
25086: LD_INT 11
25088: PUSH
25089: LD_INT 12
25091: PUSH
25092: LD_INT 13
25094: PUSH
25095: LD_INT 14
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: ST_TO_ADDR
25104: GO 25647
25106: LD_INT 30
25108: DOUBLE
25109: EQUAL
25110: IFTRUE 25114
25112: GO 25140
25114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_INT 11
25122: PUSH
25123: LD_INT 12
25125: PUSH
25126: LD_INT 13
25128: PUSH
25129: LD_INT 14
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: ST_TO_ADDR
25138: GO 25647
25140: LD_INT 25
25142: DOUBLE
25143: EQUAL
25144: IFTRUE 25148
25146: GO 25166
25148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_INT 13
25156: PUSH
25157: LD_INT 14
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: ST_TO_ADDR
25164: GO 25647
25166: LD_INT 27
25168: DOUBLE
25169: EQUAL
25170: IFTRUE 25174
25172: GO 25192
25174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_INT 13
25182: PUSH
25183: LD_INT 14
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: ST_TO_ADDR
25190: GO 25647
25192: LD_INT 92
25194: DOUBLE
25195: EQUAL
25196: IFTRUE 25200
25198: GO 25226
25200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25201: LD_ADDR_VAR 0 3
25205: PUSH
25206: LD_INT 11
25208: PUSH
25209: LD_INT 12
25211: PUSH
25212: LD_INT 13
25214: PUSH
25215: LD_INT 14
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: ST_TO_ADDR
25224: GO 25647
25226: LD_INT 28
25228: DOUBLE
25229: EQUAL
25230: IFTRUE 25234
25232: GO 25252
25234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_INT 13
25242: PUSH
25243: LD_INT 14
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: ST_TO_ADDR
25250: GO 25647
25252: LD_INT 29
25254: DOUBLE
25255: EQUAL
25256: IFTRUE 25260
25258: GO 25278
25260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: LD_INT 13
25268: PUSH
25269: LD_INT 14
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: ST_TO_ADDR
25276: GO 25647
25278: LD_INT 31
25280: DOUBLE
25281: EQUAL
25282: IFTRUE 25286
25284: GO 25304
25286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25287: LD_ADDR_VAR 0 3
25291: PUSH
25292: LD_INT 13
25294: PUSH
25295: LD_INT 14
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: ST_TO_ADDR
25302: GO 25647
25304: LD_INT 26
25306: DOUBLE
25307: EQUAL
25308: IFTRUE 25312
25310: GO 25330
25312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25313: LD_ADDR_VAR 0 3
25317: PUSH
25318: LD_INT 13
25320: PUSH
25321: LD_INT 14
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: ST_TO_ADDR
25328: GO 25647
25330: LD_INT 42
25332: DOUBLE
25333: EQUAL
25334: IFTRUE 25338
25336: GO 25364
25338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25339: LD_ADDR_VAR 0 3
25343: PUSH
25344: LD_INT 21
25346: PUSH
25347: LD_INT 22
25349: PUSH
25350: LD_INT 23
25352: PUSH
25353: LD_INT 24
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: ST_TO_ADDR
25362: GO 25647
25364: LD_INT 43
25366: DOUBLE
25367: EQUAL
25368: IFTRUE 25372
25370: GO 25398
25372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25373: LD_ADDR_VAR 0 3
25377: PUSH
25378: LD_INT 21
25380: PUSH
25381: LD_INT 22
25383: PUSH
25384: LD_INT 23
25386: PUSH
25387: LD_INT 24
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: ST_TO_ADDR
25396: GO 25647
25398: LD_INT 44
25400: DOUBLE
25401: EQUAL
25402: IFTRUE 25406
25404: GO 25432
25406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25407: LD_ADDR_VAR 0 3
25411: PUSH
25412: LD_INT 21
25414: PUSH
25415: LD_INT 22
25417: PUSH
25418: LD_INT 23
25420: PUSH
25421: LD_INT 24
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: ST_TO_ADDR
25430: GO 25647
25432: LD_INT 45
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25466
25440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25441: LD_ADDR_VAR 0 3
25445: PUSH
25446: LD_INT 21
25448: PUSH
25449: LD_INT 22
25451: PUSH
25452: LD_INT 23
25454: PUSH
25455: LD_INT 24
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: ST_TO_ADDR
25464: GO 25647
25466: LD_INT 49
25468: DOUBLE
25469: EQUAL
25470: IFTRUE 25474
25472: GO 25500
25474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25475: LD_ADDR_VAR 0 3
25479: PUSH
25480: LD_INT 21
25482: PUSH
25483: LD_INT 22
25485: PUSH
25486: LD_INT 23
25488: PUSH
25489: LD_INT 24
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: ST_TO_ADDR
25498: GO 25647
25500: LD_INT 51
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25534
25508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25509: LD_ADDR_VAR 0 3
25513: PUSH
25514: LD_INT 21
25516: PUSH
25517: LD_INT 22
25519: PUSH
25520: LD_INT 23
25522: PUSH
25523: LD_INT 24
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
25532: GO 25647
25534: LD_INT 52
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25542
25540: GO 25568
25542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_INT 21
25550: PUSH
25551: LD_INT 22
25553: PUSH
25554: LD_INT 23
25556: PUSH
25557: LD_INT 24
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
25566: GO 25647
25568: LD_INT 53
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25594
25576: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_INT 23
25584: PUSH
25585: LD_INT 24
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: ST_TO_ADDR
25592: GO 25647
25594: LD_INT 46
25596: DOUBLE
25597: EQUAL
25598: IFTRUE 25602
25600: GO 25620
25602: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25603: LD_ADDR_VAR 0 3
25607: PUSH
25608: LD_INT 23
25610: PUSH
25611: LD_INT 24
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: ST_TO_ADDR
25618: GO 25647
25620: LD_INT 47
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25628
25626: GO 25646
25628: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25629: LD_ADDR_VAR 0 3
25633: PUSH
25634: LD_INT 23
25636: PUSH
25637: LD_INT 24
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: ST_TO_ADDR
25644: GO 25647
25646: POP
// result := ( chassis in result ) ;
25647: LD_ADDR_VAR 0 3
25651: PUSH
25652: LD_VAR 0 1
25656: PUSH
25657: LD_VAR 0 3
25661: IN
25662: ST_TO_ADDR
// end ;
25663: LD_VAR 0 3
25667: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25668: LD_INT 0
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
25675: PPUSH
25676: PPUSH
// result := array ;
25677: LD_ADDR_VAR 0 5
25681: PUSH
25682: LD_VAR 0 1
25686: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25687: LD_VAR 0 1
25691: NOT
25692: IFTRUE 25701
25694: PUSH
25695: LD_VAR 0 2
25699: NOT
25700: OR
25701: IFTRUE 25710
25703: PUSH
25704: LD_VAR 0 3
25708: NOT
25709: OR
25710: IFTRUE 25724
25712: PUSH
25713: LD_VAR 0 2
25717: PUSH
25718: LD_VAR 0 1
25722: GREATER
25723: OR
25724: IFTRUE 25738
25726: PUSH
25727: LD_VAR 0 3
25731: PUSH
25732: LD_VAR 0 1
25736: GREATER
25737: OR
25738: IFFALSE 25742
// exit ;
25740: GO 26038
// if direction then
25742: LD_VAR 0 4
25746: IFFALSE 25810
// begin d := 1 ;
25748: LD_ADDR_VAR 0 9
25752: PUSH
25753: LD_INT 1
25755: ST_TO_ADDR
// if i_from > i_to then
25756: LD_VAR 0 2
25760: PUSH
25761: LD_VAR 0 3
25765: GREATER
25766: IFFALSE 25792
// length := ( array - i_from ) + i_to else
25768: LD_ADDR_VAR 0 11
25772: PUSH
25773: LD_VAR 0 1
25777: PUSH
25778: LD_VAR 0 2
25782: MINUS
25783: PUSH
25784: LD_VAR 0 3
25788: PLUS
25789: ST_TO_ADDR
25790: GO 25808
// length := i_to - i_from ;
25792: LD_ADDR_VAR 0 11
25796: PUSH
25797: LD_VAR 0 3
25801: PUSH
25802: LD_VAR 0 2
25806: MINUS
25807: ST_TO_ADDR
// end else
25808: GO 25871
// begin d := - 1 ;
25810: LD_ADDR_VAR 0 9
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: ST_TO_ADDR
// if i_from > i_to then
25819: LD_VAR 0 2
25823: PUSH
25824: LD_VAR 0 3
25828: GREATER
25829: IFFALSE 25849
// length := i_from - i_to else
25831: LD_ADDR_VAR 0 11
25835: PUSH
25836: LD_VAR 0 2
25840: PUSH
25841: LD_VAR 0 3
25845: MINUS
25846: ST_TO_ADDR
25847: GO 25871
// length := ( array - i_to ) + i_from ;
25849: LD_ADDR_VAR 0 11
25853: PUSH
25854: LD_VAR 0 1
25858: PUSH
25859: LD_VAR 0 3
25863: MINUS
25864: PUSH
25865: LD_VAR 0 2
25869: PLUS
25870: ST_TO_ADDR
// end ; if not length then
25871: LD_VAR 0 11
25875: NOT
25876: IFFALSE 25880
// exit ;
25878: GO 26038
// tmp := array ;
25880: LD_ADDR_VAR 0 10
25884: PUSH
25885: LD_VAR 0 1
25889: ST_TO_ADDR
// for i = 1 to length do
25890: LD_ADDR_VAR 0 6
25894: PUSH
25895: DOUBLE
25896: LD_INT 1
25898: DEC
25899: ST_TO_ADDR
25900: LD_VAR 0 11
25904: PUSH
25905: FOR_TO
25906: IFFALSE 26026
// begin for j = 1 to array do
25908: LD_ADDR_VAR 0 7
25912: PUSH
25913: DOUBLE
25914: LD_INT 1
25916: DEC
25917: ST_TO_ADDR
25918: LD_VAR 0 1
25922: PUSH
25923: FOR_TO
25924: IFFALSE 26012
// begin k := j + d ;
25926: LD_ADDR_VAR 0 8
25930: PUSH
25931: LD_VAR 0 7
25935: PUSH
25936: LD_VAR 0 9
25940: PLUS
25941: ST_TO_ADDR
// if k > array then
25942: LD_VAR 0 8
25946: PUSH
25947: LD_VAR 0 1
25951: GREATER
25952: IFFALSE 25962
// k := 1 ;
25954: LD_ADDR_VAR 0 8
25958: PUSH
25959: LD_INT 1
25961: ST_TO_ADDR
// if not k then
25962: LD_VAR 0 8
25966: NOT
25967: IFFALSE 25979
// k := array ;
25969: LD_ADDR_VAR 0 8
25973: PUSH
25974: LD_VAR 0 1
25978: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25979: LD_ADDR_VAR 0 10
25983: PUSH
25984: LD_VAR 0 10
25988: PPUSH
25989: LD_VAR 0 8
25993: PPUSH
25994: LD_VAR 0 1
25998: PUSH
25999: LD_VAR 0 7
26003: ARRAY
26004: PPUSH
26005: CALL_OW 1
26009: ST_TO_ADDR
// end ;
26010: GO 25923
26012: POP
26013: POP
// array := tmp ;
26014: LD_ADDR_VAR 0 1
26018: PUSH
26019: LD_VAR 0 10
26023: ST_TO_ADDR
// end ;
26024: GO 25905
26026: POP
26027: POP
// result := array ;
26028: LD_ADDR_VAR 0 5
26032: PUSH
26033: LD_VAR 0 1
26037: ST_TO_ADDR
// end ;
26038: LD_VAR 0 5
26042: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26043: LD_INT 0
26045: PPUSH
26046: PPUSH
// result := 0 ;
26047: LD_ADDR_VAR 0 3
26051: PUSH
26052: LD_INT 0
26054: ST_TO_ADDR
// if not array or not value in array then
26055: LD_VAR 0 1
26059: NOT
26060: IFTRUE 26075
26062: PUSH
26063: LD_VAR 0 2
26067: PUSH
26068: LD_VAR 0 1
26072: IN
26073: NOT
26074: OR
26075: IFFALSE 26079
// exit ;
26077: GO 26133
// for i = 1 to array do
26079: LD_ADDR_VAR 0 4
26083: PUSH
26084: DOUBLE
26085: LD_INT 1
26087: DEC
26088: ST_TO_ADDR
26089: LD_VAR 0 1
26093: PUSH
26094: FOR_TO
26095: IFFALSE 26131
// if value = array [ i ] then
26097: LD_VAR 0 2
26101: PUSH
26102: LD_VAR 0 1
26106: PUSH
26107: LD_VAR 0 4
26111: ARRAY
26112: EQUAL
26113: IFFALSE 26129
// begin result := i ;
26115: LD_ADDR_VAR 0 3
26119: PUSH
26120: LD_VAR 0 4
26124: ST_TO_ADDR
// exit ;
26125: POP
26126: POP
26127: GO 26133
// end ;
26129: GO 26094
26131: POP
26132: POP
// end ;
26133: LD_VAR 0 3
26137: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26138: LD_INT 0
26140: PPUSH
// vc_chassis := chassis ;
26141: LD_ADDR_OWVAR 37
26145: PUSH
26146: LD_VAR 0 1
26150: ST_TO_ADDR
// vc_engine := engine ;
26151: LD_ADDR_OWVAR 39
26155: PUSH
26156: LD_VAR 0 2
26160: ST_TO_ADDR
// vc_control := control ;
26161: LD_ADDR_OWVAR 38
26165: PUSH
26166: LD_VAR 0 3
26170: ST_TO_ADDR
// vc_weapon := weapon ;
26171: LD_ADDR_OWVAR 40
26175: PUSH
26176: LD_VAR 0 4
26180: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26181: LD_ADDR_OWVAR 41
26185: PUSH
26186: LD_VAR 0 5
26190: ST_TO_ADDR
// end ;
26191: LD_VAR 0 6
26195: RET
// export function WantPlant ( unit ) ; var task ; begin
26196: LD_INT 0
26198: PPUSH
26199: PPUSH
// result := false ;
26200: LD_ADDR_VAR 0 2
26204: PUSH
26205: LD_INT 0
26207: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_VAR 0 1
26217: PPUSH
26218: CALL_OW 437
26222: ST_TO_ADDR
// if task then
26223: LD_VAR 0 3
26227: IFFALSE 26255
// if task [ 1 ] [ 1 ] = p then
26229: LD_VAR 0 3
26233: PUSH
26234: LD_INT 1
26236: ARRAY
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: PUSH
26242: LD_STRING p
26244: EQUAL
26245: IFFALSE 26255
// result := true ;
26247: LD_ADDR_VAR 0 2
26251: PUSH
26252: LD_INT 1
26254: ST_TO_ADDR
// end ;
26255: LD_VAR 0 2
26259: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26260: LD_INT 0
26262: PPUSH
26263: PPUSH
26264: PPUSH
26265: PPUSH
// if pos < 1 then
26266: LD_VAR 0 2
26270: PUSH
26271: LD_INT 1
26273: LESS
26274: IFFALSE 26278
// exit ;
26276: GO 26581
// if pos = 1 then
26278: LD_VAR 0 2
26282: PUSH
26283: LD_INT 1
26285: EQUAL
26286: IFFALSE 26319
// result := Replace ( arr , pos [ 1 ] , value ) else
26288: LD_ADDR_VAR 0 4
26292: PUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: LD_VAR 0 2
26302: PUSH
26303: LD_INT 1
26305: ARRAY
26306: PPUSH
26307: LD_VAR 0 3
26311: PPUSH
26312: CALL_OW 1
26316: ST_TO_ADDR
26317: GO 26581
// begin tmp := arr ;
26319: LD_ADDR_VAR 0 6
26323: PUSH
26324: LD_VAR 0 1
26328: ST_TO_ADDR
// s_arr := [ tmp ] ;
26329: LD_ADDR_VAR 0 7
26333: PUSH
26334: LD_VAR 0 6
26338: PUSH
26339: EMPTY
26340: LIST
26341: ST_TO_ADDR
// for i = 1 to pos - 1 do
26342: LD_ADDR_VAR 0 5
26346: PUSH
26347: DOUBLE
26348: LD_INT 1
26350: DEC
26351: ST_TO_ADDR
26352: LD_VAR 0 2
26356: PUSH
26357: LD_INT 1
26359: MINUS
26360: PUSH
26361: FOR_TO
26362: IFFALSE 26407
// begin tmp := tmp [ pos [ i ] ] ;
26364: LD_ADDR_VAR 0 6
26368: PUSH
26369: LD_VAR 0 6
26373: PUSH
26374: LD_VAR 0 2
26378: PUSH
26379: LD_VAR 0 5
26383: ARRAY
26384: ARRAY
26385: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26386: LD_ADDR_VAR 0 7
26390: PUSH
26391: LD_VAR 0 7
26395: PUSH
26396: LD_VAR 0 6
26400: PUSH
26401: EMPTY
26402: LIST
26403: ADD
26404: ST_TO_ADDR
// end ;
26405: GO 26361
26407: POP
26408: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26409: LD_ADDR_VAR 0 6
26413: PUSH
26414: LD_VAR 0 6
26418: PPUSH
26419: LD_VAR 0 2
26423: PUSH
26424: LD_VAR 0 2
26428: ARRAY
26429: PPUSH
26430: LD_VAR 0 3
26434: PPUSH
26435: CALL_OW 1
26439: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26440: LD_ADDR_VAR 0 7
26444: PUSH
26445: LD_VAR 0 7
26449: PPUSH
26450: LD_VAR 0 7
26454: PPUSH
26455: LD_VAR 0 6
26459: PPUSH
26460: CALL_OW 1
26464: ST_TO_ADDR
// for i = s_arr downto 2 do
26465: LD_ADDR_VAR 0 5
26469: PUSH
26470: DOUBLE
26471: LD_VAR 0 7
26475: INC
26476: ST_TO_ADDR
26477: LD_INT 2
26479: PUSH
26480: FOR_DOWNTO
26481: IFFALSE 26565
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26483: LD_ADDR_VAR 0 6
26487: PUSH
26488: LD_VAR 0 7
26492: PUSH
26493: LD_VAR 0 5
26497: PUSH
26498: LD_INT 1
26500: MINUS
26501: ARRAY
26502: PPUSH
26503: LD_VAR 0 2
26507: PUSH
26508: LD_VAR 0 5
26512: PUSH
26513: LD_INT 1
26515: MINUS
26516: ARRAY
26517: PPUSH
26518: LD_VAR 0 7
26522: PUSH
26523: LD_VAR 0 5
26527: ARRAY
26528: PPUSH
26529: CALL_OW 1
26533: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26534: LD_ADDR_VAR 0 7
26538: PUSH
26539: LD_VAR 0 7
26543: PPUSH
26544: LD_VAR 0 5
26548: PUSH
26549: LD_INT 1
26551: MINUS
26552: PPUSH
26553: LD_VAR 0 6
26557: PPUSH
26558: CALL_OW 1
26562: ST_TO_ADDR
// end ;
26563: GO 26480
26565: POP
26566: POP
// result := s_arr [ 1 ] ;
26567: LD_ADDR_VAR 0 4
26571: PUSH
26572: LD_VAR 0 7
26576: PUSH
26577: LD_INT 1
26579: ARRAY
26580: ST_TO_ADDR
// end ; end ;
26581: LD_VAR 0 4
26585: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26586: LD_INT 0
26588: PPUSH
26589: PPUSH
// if not list then
26590: LD_VAR 0 1
26594: NOT
26595: IFFALSE 26599
// exit ;
26597: GO 26690
// i := list [ pos1 ] ;
26599: LD_ADDR_VAR 0 5
26603: PUSH
26604: LD_VAR 0 1
26608: PUSH
26609: LD_VAR 0 2
26613: ARRAY
26614: ST_TO_ADDR
// if not i then
26615: LD_VAR 0 5
26619: NOT
26620: IFFALSE 26624
// exit ;
26622: GO 26690
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26624: LD_ADDR_VAR 0 1
26628: PUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: LD_VAR 0 2
26638: PPUSH
26639: LD_VAR 0 1
26643: PUSH
26644: LD_VAR 0 3
26648: ARRAY
26649: PPUSH
26650: CALL_OW 1
26654: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26655: LD_ADDR_VAR 0 1
26659: PUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: LD_VAR 0 3
26669: PPUSH
26670: LD_VAR 0 5
26674: PPUSH
26675: CALL_OW 1
26679: ST_TO_ADDR
// result := list ;
26680: LD_ADDR_VAR 0 4
26684: PUSH
26685: LD_VAR 0 1
26689: ST_TO_ADDR
// end ;
26690: LD_VAR 0 4
26694: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26695: LD_INT 0
26697: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26698: LD_ADDR_VAR 0 5
26702: PUSH
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 250
26712: PPUSH
26713: LD_VAR 0 1
26717: PPUSH
26718: CALL_OW 251
26722: PPUSH
26723: LD_VAR 0 2
26727: PPUSH
26728: LD_VAR 0 3
26732: PPUSH
26733: LD_VAR 0 4
26737: PPUSH
26738: CALL 27120 0 5
26742: ST_TO_ADDR
// end ;
26743: LD_VAR 0 5
26747: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26748: LD_INT 0
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
// if not list or not unit then
26754: LD_VAR 0 2
26758: NOT
26759: IFTRUE 26768
26761: PUSH
26762: LD_VAR 0 1
26766: NOT
26767: OR
26768: IFFALSE 26772
// exit ;
26770: GO 27115
// result := [ ] ;
26772: LD_ADDR_VAR 0 5
26776: PUSH
26777: EMPTY
26778: ST_TO_ADDR
// for i in list do
26779: LD_ADDR_VAR 0 6
26783: PUSH
26784: LD_VAR 0 2
26788: PUSH
26789: FOR_IN
26790: IFFALSE 27008
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26792: LD_ADDR_VAR 0 8
26796: PUSH
26797: LD_VAR 0 1
26801: PPUSH
26802: LD_VAR 0 6
26806: PUSH
26807: LD_INT 1
26809: ARRAY
26810: PPUSH
26811: LD_VAR 0 6
26815: PUSH
26816: LD_INT 2
26818: ARRAY
26819: PPUSH
26820: CALL_OW 297
26824: ST_TO_ADDR
// if not Count ( result ) then
26825: LD_VAR 0 5
26829: PPUSH
26830: CALL 23376 0 1
26834: NOT
26835: IFFALSE 26868
// begin result := Join ( result , [ i , tmp ] ) ;
26837: LD_ADDR_VAR 0 5
26841: PUSH
26842: LD_VAR 0 5
26846: PPUSH
26847: LD_VAR 0 6
26851: PUSH
26852: LD_VAR 0 8
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PPUSH
26861: CALL 59308 0 2
26865: ST_TO_ADDR
// continue ;
26866: GO 26789
// end ; if result [ result ] [ 2 ] <= tmp then
26868: LD_VAR 0 5
26872: PUSH
26873: LD_VAR 0 5
26877: ARRAY
26878: PUSH
26879: LD_INT 2
26881: ARRAY
26882: PUSH
26883: LD_VAR 0 8
26887: LESSEQUAL
26888: IFFALSE 26921
// result := Join ( result , [ i , tmp ] ) else
26890: LD_ADDR_VAR 0 5
26894: PUSH
26895: LD_VAR 0 5
26899: PPUSH
26900: LD_VAR 0 6
26904: PUSH
26905: LD_VAR 0 8
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PPUSH
26914: CALL 59308 0 2
26918: ST_TO_ADDR
26919: GO 27006
// begin for j := 1 to Count ( result ) do
26921: LD_ADDR_VAR 0 7
26925: PUSH
26926: DOUBLE
26927: LD_INT 1
26929: DEC
26930: ST_TO_ADDR
26931: LD_VAR 0 5
26935: PPUSH
26936: CALL 23376 0 1
26940: PUSH
26941: FOR_TO
26942: IFFALSE 27004
// begin if tmp < result [ j ] [ 2 ] then
26944: LD_VAR 0 8
26948: PUSH
26949: LD_VAR 0 5
26953: PUSH
26954: LD_VAR 0 7
26958: ARRAY
26959: PUSH
26960: LD_INT 2
26962: ARRAY
26963: LESS
26964: IFFALSE 27002
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26966: LD_ADDR_VAR 0 5
26970: PUSH
26971: LD_VAR 0 5
26975: PPUSH
26976: LD_VAR 0 7
26980: PPUSH
26981: LD_VAR 0 6
26985: PUSH
26986: LD_VAR 0 8
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PPUSH
26995: CALL_OW 2
26999: ST_TO_ADDR
// break ;
27000: GO 27004
// end ; end ;
27002: GO 26941
27004: POP
27005: POP
// end ; end ;
27006: GO 26789
27008: POP
27009: POP
// if result and not asc then
27010: LD_VAR 0 5
27014: IFFALSE 27023
27016: PUSH
27017: LD_VAR 0 3
27021: NOT
27022: AND
27023: IFFALSE 27040
// result := ReverseArray ( result ) ;
27025: LD_ADDR_VAR 0 5
27029: PUSH
27030: LD_VAR 0 5
27034: PPUSH
27035: CALL 54398 0 1
27039: ST_TO_ADDR
// tmp := [ ] ;
27040: LD_ADDR_VAR 0 8
27044: PUSH
27045: EMPTY
27046: ST_TO_ADDR
// if mode then
27047: LD_VAR 0 4
27051: IFFALSE 27115
// begin for i := 1 to result do
27053: LD_ADDR_VAR 0 6
27057: PUSH
27058: DOUBLE
27059: LD_INT 1
27061: DEC
27062: ST_TO_ADDR
27063: LD_VAR 0 5
27067: PUSH
27068: FOR_TO
27069: IFFALSE 27103
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27071: LD_ADDR_VAR 0 8
27075: PUSH
27076: LD_VAR 0 8
27080: PPUSH
27081: LD_VAR 0 5
27085: PUSH
27086: LD_VAR 0 6
27090: ARRAY
27091: PUSH
27092: LD_INT 1
27094: ARRAY
27095: PPUSH
27096: CALL 59308 0 2
27100: ST_TO_ADDR
27101: GO 27068
27103: POP
27104: POP
// result := tmp ;
27105: LD_ADDR_VAR 0 5
27109: PUSH
27110: LD_VAR 0 8
27114: ST_TO_ADDR
// end ; end ;
27115: LD_VAR 0 5
27119: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27120: LD_INT 0
27122: PPUSH
27123: PPUSH
27124: PPUSH
27125: PPUSH
// if not list then
27126: LD_VAR 0 3
27130: NOT
27131: IFFALSE 27135
// exit ;
27133: GO 27525
// result := [ ] ;
27135: LD_ADDR_VAR 0 6
27139: PUSH
27140: EMPTY
27141: ST_TO_ADDR
// for i in list do
27142: LD_ADDR_VAR 0 7
27146: PUSH
27147: LD_VAR 0 3
27151: PUSH
27152: FOR_IN
27153: IFFALSE 27355
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27155: LD_ADDR_VAR 0 9
27159: PUSH
27160: LD_VAR 0 7
27164: PPUSH
27165: LD_VAR 0 1
27169: PPUSH
27170: LD_VAR 0 2
27174: PPUSH
27175: CALL_OW 297
27179: ST_TO_ADDR
// if not result then
27180: LD_VAR 0 6
27184: NOT
27185: IFFALSE 27211
// result := [ [ i , tmp ] ] else
27187: LD_ADDR_VAR 0 6
27191: PUSH
27192: LD_VAR 0 7
27196: PUSH
27197: LD_VAR 0 9
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: EMPTY
27207: LIST
27208: ST_TO_ADDR
27209: GO 27353
// begin if result [ result ] [ 2 ] <= tmp then
27211: LD_VAR 0 6
27215: PUSH
27216: LD_VAR 0 6
27220: ARRAY
27221: PUSH
27222: LD_INT 2
27224: ARRAY
27225: PUSH
27226: LD_VAR 0 9
27230: LESSEQUAL
27231: IFFALSE 27273
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27233: LD_ADDR_VAR 0 6
27237: PUSH
27238: LD_VAR 0 6
27242: PPUSH
27243: LD_VAR 0 6
27247: PUSH
27248: LD_INT 1
27250: PLUS
27251: PPUSH
27252: LD_VAR 0 7
27256: PUSH
27257: LD_VAR 0 9
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL_OW 2
27270: ST_TO_ADDR
27271: GO 27353
// for j := 1 to result do
27273: LD_ADDR_VAR 0 8
27277: PUSH
27278: DOUBLE
27279: LD_INT 1
27281: DEC
27282: ST_TO_ADDR
27283: LD_VAR 0 6
27287: PUSH
27288: FOR_TO
27289: IFFALSE 27351
// begin if tmp < result [ j ] [ 2 ] then
27291: LD_VAR 0 9
27295: PUSH
27296: LD_VAR 0 6
27300: PUSH
27301: LD_VAR 0 8
27305: ARRAY
27306: PUSH
27307: LD_INT 2
27309: ARRAY
27310: LESS
27311: IFFALSE 27349
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27313: LD_ADDR_VAR 0 6
27317: PUSH
27318: LD_VAR 0 6
27322: PPUSH
27323: LD_VAR 0 8
27327: PPUSH
27328: LD_VAR 0 7
27332: PUSH
27333: LD_VAR 0 9
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PPUSH
27342: CALL_OW 2
27346: ST_TO_ADDR
// break ;
27347: GO 27351
// end ; end ;
27349: GO 27288
27351: POP
27352: POP
// end ; end ;
27353: GO 27152
27355: POP
27356: POP
// if result and not asc then
27357: LD_VAR 0 6
27361: IFFALSE 27370
27363: PUSH
27364: LD_VAR 0 4
27368: NOT
27369: AND
27370: IFFALSE 27445
// begin tmp := result ;
27372: LD_ADDR_VAR 0 9
27376: PUSH
27377: LD_VAR 0 6
27381: ST_TO_ADDR
// for i = tmp downto 1 do
27382: LD_ADDR_VAR 0 7
27386: PUSH
27387: DOUBLE
27388: LD_VAR 0 9
27392: INC
27393: ST_TO_ADDR
27394: LD_INT 1
27396: PUSH
27397: FOR_DOWNTO
27398: IFFALSE 27443
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27400: LD_ADDR_VAR 0 6
27404: PUSH
27405: LD_VAR 0 6
27409: PPUSH
27410: LD_VAR 0 9
27414: PUSH
27415: LD_VAR 0 7
27419: MINUS
27420: PUSH
27421: LD_INT 1
27423: PLUS
27424: PPUSH
27425: LD_VAR 0 9
27429: PUSH
27430: LD_VAR 0 7
27434: ARRAY
27435: PPUSH
27436: CALL_OW 1
27440: ST_TO_ADDR
27441: GO 27397
27443: POP
27444: POP
// end ; tmp := [ ] ;
27445: LD_ADDR_VAR 0 9
27449: PUSH
27450: EMPTY
27451: ST_TO_ADDR
// if mode then
27452: LD_VAR 0 5
27456: IFFALSE 27525
// begin for i = 1 to result do
27458: LD_ADDR_VAR 0 7
27462: PUSH
27463: DOUBLE
27464: LD_INT 1
27466: DEC
27467: ST_TO_ADDR
27468: LD_VAR 0 6
27472: PUSH
27473: FOR_TO
27474: IFFALSE 27513
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27476: LD_ADDR_VAR 0 9
27480: PUSH
27481: LD_VAR 0 9
27485: PPUSH
27486: LD_VAR 0 7
27490: PPUSH
27491: LD_VAR 0 6
27495: PUSH
27496: LD_VAR 0 7
27500: ARRAY
27501: PUSH
27502: LD_INT 1
27504: ARRAY
27505: PPUSH
27506: CALL_OW 1
27510: ST_TO_ADDR
27511: GO 27473
27513: POP
27514: POP
// result := tmp ;
27515: LD_ADDR_VAR 0 6
27519: PUSH
27520: LD_VAR 0 9
27524: ST_TO_ADDR
// end ; end ;
27525: LD_VAR 0 6
27529: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27530: LD_INT 0
27532: PPUSH
27533: PPUSH
27534: PPUSH
27535: PPUSH
27536: PPUSH
27537: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27538: LD_ADDR_VAR 0 5
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: ST_TO_ADDR
// if not x or not y then
27560: LD_VAR 0 2
27564: NOT
27565: IFTRUE 27574
27567: PUSH
27568: LD_VAR 0 3
27572: NOT
27573: OR
27574: IFFALSE 27578
// exit ;
27576: GO 29234
// if not range then
27578: LD_VAR 0 4
27582: NOT
27583: IFFALSE 27593
// range := 10 ;
27585: LD_ADDR_VAR 0 4
27589: PUSH
27590: LD_INT 10
27592: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27593: LD_ADDR_VAR 0 8
27597: PUSH
27598: LD_INT 81
27600: PUSH
27601: LD_VAR 0 1
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 92
27612: PUSH
27613: LD_VAR 0 2
27617: PUSH
27618: LD_VAR 0 3
27622: PUSH
27623: LD_VAR 0 4
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 3
27636: PUSH
27637: LD_INT 21
27639: PUSH
27640: LD_INT 3
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: PPUSH
27656: CALL_OW 69
27660: ST_TO_ADDR
// if not tmp then
27661: LD_VAR 0 8
27665: NOT
27666: IFFALSE 27670
// exit ;
27668: GO 29234
// for i in tmp do
27670: LD_ADDR_VAR 0 6
27674: PUSH
27675: LD_VAR 0 8
27679: PUSH
27680: FOR_IN
27681: IFFALSE 29209
// begin points := [ 0 , 0 , 0 ] ;
27683: LD_ADDR_VAR 0 9
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: ST_TO_ADDR
// bpoints := 1 ;
27702: LD_ADDR_VAR 0 10
27706: PUSH
27707: LD_INT 1
27709: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27710: LD_VAR 0 6
27714: PPUSH
27715: CALL_OW 247
27719: PUSH
27720: LD_INT 1
27722: DOUBLE
27723: EQUAL
27724: IFTRUE 27728
27726: GO 28310
27728: POP
// begin if GetClass ( i ) = 1 then
27729: LD_VAR 0 6
27733: PPUSH
27734: CALL_OW 257
27738: PUSH
27739: LD_INT 1
27741: EQUAL
27742: IFFALSE 27763
// points := [ 10 , 5 , 3 ] ;
27744: LD_ADDR_VAR 0 9
27748: PUSH
27749: LD_INT 10
27751: PUSH
27752: LD_INT 5
27754: PUSH
27755: LD_INT 3
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: LIST
27762: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27763: LD_VAR 0 6
27767: PPUSH
27768: CALL_OW 257
27772: PUSH
27773: LD_INT 2
27775: PUSH
27776: LD_INT 3
27778: PUSH
27779: LD_INT 4
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: IN
27787: IFFALSE 27808
// points := [ 3 , 2 , 1 ] ;
27789: LD_ADDR_VAR 0 9
27793: PUSH
27794: LD_INT 3
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27808: LD_VAR 0 6
27812: PPUSH
27813: CALL_OW 257
27817: PUSH
27818: LD_INT 5
27820: EQUAL
27821: IFFALSE 27842
// points := [ 130 , 5 , 2 ] ;
27823: LD_ADDR_VAR 0 9
27827: PUSH
27828: LD_INT 130
27830: PUSH
27831: LD_INT 5
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27842: LD_VAR 0 6
27846: PPUSH
27847: CALL_OW 257
27851: PUSH
27852: LD_INT 8
27854: EQUAL
27855: IFFALSE 27876
// points := [ 35 , 35 , 30 ] ;
27857: LD_ADDR_VAR 0 9
27861: PUSH
27862: LD_INT 35
27864: PUSH
27865: LD_INT 35
27867: PUSH
27868: LD_INT 30
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27876: LD_VAR 0 6
27880: PPUSH
27881: CALL_OW 257
27885: PUSH
27886: LD_INT 9
27888: EQUAL
27889: IFFALSE 27910
// points := [ 20 , 55 , 40 ] ;
27891: LD_ADDR_VAR 0 9
27895: PUSH
27896: LD_INT 20
27898: PUSH
27899: LD_INT 55
27901: PUSH
27902: LD_INT 40
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: LIST
27909: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27910: LD_VAR 0 6
27914: PPUSH
27915: CALL_OW 257
27919: PUSH
27920: LD_INT 12
27922: PUSH
27923: LD_INT 16
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: IN
27930: IFFALSE 27951
// points := [ 5 , 3 , 2 ] ;
27932: LD_ADDR_VAR 0 9
27936: PUSH
27937: LD_INT 5
27939: PUSH
27940: LD_INT 3
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27951: LD_VAR 0 6
27955: PPUSH
27956: CALL_OW 257
27960: PUSH
27961: LD_INT 17
27963: EQUAL
27964: IFFALSE 27985
// points := [ 100 , 50 , 75 ] ;
27966: LD_ADDR_VAR 0 9
27970: PUSH
27971: LD_INT 100
27973: PUSH
27974: LD_INT 50
27976: PUSH
27977: LD_INT 75
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27985: LD_VAR 0 6
27989: PPUSH
27990: CALL_OW 257
27994: PUSH
27995: LD_INT 15
27997: EQUAL
27998: IFFALSE 28019
// points := [ 10 , 5 , 3 ] ;
28000: LD_ADDR_VAR 0 9
28004: PUSH
28005: LD_INT 10
28007: PUSH
28008: LD_INT 5
28010: PUSH
28011: LD_INT 3
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: LIST
28018: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28019: LD_VAR 0 6
28023: PPUSH
28024: CALL_OW 257
28028: PUSH
28029: LD_INT 14
28031: EQUAL
28032: IFFALSE 28053
// points := [ 10 , 0 , 0 ] ;
28034: LD_ADDR_VAR 0 9
28038: PUSH
28039: LD_INT 10
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28053: LD_VAR 0 6
28057: PPUSH
28058: CALL_OW 257
28062: PUSH
28063: LD_INT 11
28065: EQUAL
28066: IFFALSE 28087
// points := [ 30 , 10 , 5 ] ;
28068: LD_ADDR_VAR 0 9
28072: PUSH
28073: LD_INT 30
28075: PUSH
28076: LD_INT 10
28078: PUSH
28079: LD_INT 5
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28087: LD_VAR 0 1
28091: PPUSH
28092: LD_INT 5
28094: PPUSH
28095: CALL_OW 321
28099: PUSH
28100: LD_INT 2
28102: EQUAL
28103: IFFALSE 28120
// bpoints := bpoints * 1.8 ;
28105: LD_ADDR_VAR 0 10
28109: PUSH
28110: LD_VAR 0 10
28114: PUSH
28115: LD_REAL  1.80000000000000E+0000
28118: MUL
28119: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28120: LD_VAR 0 6
28124: PPUSH
28125: CALL_OW 257
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: LD_INT 3
28138: PUSH
28139: LD_INT 4
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: IN
28148: IFFALSE 28168
28150: PUSH
28151: LD_VAR 0 1
28155: PPUSH
28156: LD_INT 51
28158: PPUSH
28159: CALL_OW 321
28163: PUSH
28164: LD_INT 2
28166: EQUAL
28167: AND
28168: IFFALSE 28185
// bpoints := bpoints * 1.2 ;
28170: LD_ADDR_VAR 0 10
28174: PUSH
28175: LD_VAR 0 10
28179: PUSH
28180: LD_REAL  1.20000000000000E+0000
28183: MUL
28184: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28185: LD_VAR 0 6
28189: PPUSH
28190: CALL_OW 257
28194: PUSH
28195: LD_INT 5
28197: PUSH
28198: LD_INT 7
28200: PUSH
28201: LD_INT 9
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: IN
28209: IFFALSE 28229
28211: PUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: LD_INT 52
28219: PPUSH
28220: CALL_OW 321
28224: PUSH
28225: LD_INT 2
28227: EQUAL
28228: AND
28229: IFFALSE 28246
// bpoints := bpoints * 1.5 ;
28231: LD_ADDR_VAR 0 10
28235: PUSH
28236: LD_VAR 0 10
28240: PUSH
28241: LD_REAL  1.50000000000000E+0000
28244: MUL
28245: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28246: LD_VAR 0 1
28250: PPUSH
28251: LD_INT 66
28253: PPUSH
28254: CALL_OW 321
28258: PUSH
28259: LD_INT 2
28261: EQUAL
28262: IFFALSE 28279
// bpoints := bpoints * 1.1 ;
28264: LD_ADDR_VAR 0 10
28268: PUSH
28269: LD_VAR 0 10
28273: PUSH
28274: LD_REAL  1.10000000000000E+0000
28277: MUL
28278: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28279: LD_ADDR_VAR 0 10
28283: PUSH
28284: LD_VAR 0 10
28288: PUSH
28289: LD_VAR 0 6
28293: PPUSH
28294: LD_INT 1
28296: PPUSH
28297: CALL_OW 259
28301: PUSH
28302: LD_REAL  1.15000000000000E+0000
28305: MUL
28306: MUL
28307: ST_TO_ADDR
// end ; unit_vehicle :
28308: GO 29138
28310: LD_INT 2
28312: DOUBLE
28313: EQUAL
28314: IFTRUE 28318
28316: GO 29126
28318: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28319: LD_VAR 0 6
28323: PPUSH
28324: CALL_OW 264
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 42
28334: PUSH
28335: LD_INT 24
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: IN
28343: IFFALSE 28364
// points := [ 25 , 5 , 3 ] ;
28345: LD_ADDR_VAR 0 9
28349: PUSH
28350: LD_INT 25
28352: PUSH
28353: LD_INT 5
28355: PUSH
28356: LD_INT 3
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28364: LD_VAR 0 6
28368: PPUSH
28369: CALL_OW 264
28373: PUSH
28374: LD_INT 4
28376: PUSH
28377: LD_INT 43
28379: PUSH
28380: LD_INT 25
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: IN
28388: IFFALSE 28409
// points := [ 40 , 15 , 5 ] ;
28390: LD_ADDR_VAR 0 9
28394: PUSH
28395: LD_INT 40
28397: PUSH
28398: LD_INT 15
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28409: LD_VAR 0 6
28413: PPUSH
28414: CALL_OW 264
28418: PUSH
28419: LD_INT 3
28421: PUSH
28422: LD_INT 23
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: IN
28429: IFFALSE 28450
// points := [ 7 , 25 , 8 ] ;
28431: LD_ADDR_VAR 0 9
28435: PUSH
28436: LD_INT 7
28438: PUSH
28439: LD_INT 25
28441: PUSH
28442: LD_INT 8
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28450: LD_VAR 0 6
28454: PPUSH
28455: CALL_OW 264
28459: PUSH
28460: LD_INT 5
28462: PUSH
28463: LD_INT 27
28465: PUSH
28466: LD_INT 44
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: IN
28474: IFFALSE 28495
// points := [ 14 , 50 , 16 ] ;
28476: LD_ADDR_VAR 0 9
28480: PUSH
28481: LD_INT 14
28483: PUSH
28484: LD_INT 50
28486: PUSH
28487: LD_INT 16
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28495: LD_VAR 0 6
28499: PPUSH
28500: CALL_OW 264
28504: PUSH
28505: LD_INT 6
28507: PUSH
28508: LD_INT 46
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: IN
28515: IFFALSE 28536
// points := [ 32 , 120 , 70 ] ;
28517: LD_ADDR_VAR 0 9
28521: PUSH
28522: LD_INT 32
28524: PUSH
28525: LD_INT 120
28527: PUSH
28528: LD_INT 70
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: LIST
28535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28536: LD_VAR 0 6
28540: PPUSH
28541: CALL_OW 264
28545: PUSH
28546: LD_INT 7
28548: PUSH
28549: LD_INT 28
28551: PUSH
28552: LD_INT 45
28554: PUSH
28555: LD_INT 92
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: IN
28564: IFFALSE 28585
// points := [ 35 , 20 , 45 ] ;
28566: LD_ADDR_VAR 0 9
28570: PUSH
28571: LD_INT 35
28573: PUSH
28574: LD_INT 20
28576: PUSH
28577: LD_INT 45
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: LIST
28584: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28585: LD_VAR 0 6
28589: PPUSH
28590: CALL_OW 264
28594: PUSH
28595: LD_INT 47
28597: PUSH
28598: EMPTY
28599: LIST
28600: IN
28601: IFFALSE 28622
// points := [ 67 , 45 , 75 ] ;
28603: LD_ADDR_VAR 0 9
28607: PUSH
28608: LD_INT 67
28610: PUSH
28611: LD_INT 45
28613: PUSH
28614: LD_INT 75
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28622: LD_VAR 0 6
28626: PPUSH
28627: CALL_OW 264
28631: PUSH
28632: LD_INT 26
28634: PUSH
28635: EMPTY
28636: LIST
28637: IN
28638: IFFALSE 28659
// points := [ 120 , 30 , 80 ] ;
28640: LD_ADDR_VAR 0 9
28644: PUSH
28645: LD_INT 120
28647: PUSH
28648: LD_INT 30
28650: PUSH
28651: LD_INT 80
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28659: LD_VAR 0 6
28663: PPUSH
28664: CALL_OW 264
28668: PUSH
28669: LD_INT 22
28671: PUSH
28672: EMPTY
28673: LIST
28674: IN
28675: IFFALSE 28696
// points := [ 40 , 1 , 1 ] ;
28677: LD_ADDR_VAR 0 9
28681: PUSH
28682: LD_INT 40
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28696: LD_VAR 0 6
28700: PPUSH
28701: CALL_OW 264
28705: PUSH
28706: LD_INT 29
28708: PUSH
28709: EMPTY
28710: LIST
28711: IN
28712: IFFALSE 28733
// points := [ 70 , 200 , 400 ] ;
28714: LD_ADDR_VAR 0 9
28718: PUSH
28719: LD_INT 70
28721: PUSH
28722: LD_INT 200
28724: PUSH
28725: LD_INT 400
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28733: LD_VAR 0 6
28737: PPUSH
28738: CALL_OW 264
28742: PUSH
28743: LD_INT 14
28745: PUSH
28746: LD_INT 53
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: IN
28753: IFFALSE 28774
// points := [ 40 , 10 , 20 ] ;
28755: LD_ADDR_VAR 0 9
28759: PUSH
28760: LD_INT 40
28762: PUSH
28763: LD_INT 10
28765: PUSH
28766: LD_INT 20
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28774: LD_VAR 0 6
28778: PPUSH
28779: CALL_OW 264
28783: PUSH
28784: LD_INT 9
28786: PUSH
28787: EMPTY
28788: LIST
28789: IN
28790: IFFALSE 28811
// points := [ 5 , 70 , 20 ] ;
28792: LD_ADDR_VAR 0 9
28796: PUSH
28797: LD_INT 5
28799: PUSH
28800: LD_INT 70
28802: PUSH
28803: LD_INT 20
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: LIST
28810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28811: LD_VAR 0 6
28815: PPUSH
28816: CALL_OW 264
28820: PUSH
28821: LD_INT 10
28823: PUSH
28824: EMPTY
28825: LIST
28826: IN
28827: IFFALSE 28848
// points := [ 35 , 110 , 70 ] ;
28829: LD_ADDR_VAR 0 9
28833: PUSH
28834: LD_INT 35
28836: PUSH
28837: LD_INT 110
28839: PUSH
28840: LD_INT 70
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28848: LD_VAR 0 6
28852: PPUSH
28853: CALL_OW 265
28857: PUSH
28858: LD_INT 25
28860: EQUAL
28861: IFFALSE 28882
// points := [ 80 , 65 , 100 ] ;
28863: LD_ADDR_VAR 0 9
28867: PUSH
28868: LD_INT 80
28870: PUSH
28871: LD_INT 65
28873: PUSH
28874: LD_INT 100
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28882: LD_VAR 0 6
28886: PPUSH
28887: CALL_OW 263
28891: PUSH
28892: LD_INT 1
28894: EQUAL
28895: IFFALSE 28930
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28897: LD_ADDR_VAR 0 10
28901: PUSH
28902: LD_VAR 0 10
28906: PUSH
28907: LD_VAR 0 6
28911: PPUSH
28912: CALL_OW 311
28916: PPUSH
28917: LD_INT 3
28919: PPUSH
28920: CALL_OW 259
28924: PUSH
28925: LD_INT 4
28927: MUL
28928: MUL
28929: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28930: LD_VAR 0 6
28934: PPUSH
28935: CALL_OW 263
28939: PUSH
28940: LD_INT 2
28942: EQUAL
28943: IFFALSE 28994
// begin j := IsControledBy ( i ) ;
28945: LD_ADDR_VAR 0 7
28949: PUSH
28950: LD_VAR 0 6
28954: PPUSH
28955: CALL_OW 312
28959: ST_TO_ADDR
// if j then
28960: LD_VAR 0 7
28964: IFFALSE 28994
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28966: LD_ADDR_VAR 0 10
28970: PUSH
28971: LD_VAR 0 10
28975: PUSH
28976: LD_VAR 0 7
28980: PPUSH
28981: LD_INT 3
28983: PPUSH
28984: CALL_OW 259
28988: PUSH
28989: LD_INT 3
28991: MUL
28992: MUL
28993: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28994: LD_VAR 0 6
28998: PPUSH
28999: CALL_OW 264
29003: PUSH
29004: LD_INT 5
29006: PUSH
29007: LD_INT 6
29009: PUSH
29010: LD_INT 46
29012: PUSH
29013: LD_INT 44
29015: PUSH
29016: LD_INT 47
29018: PUSH
29019: LD_INT 45
29021: PUSH
29022: LD_INT 28
29024: PUSH
29025: LD_INT 7
29027: PUSH
29028: LD_INT 27
29030: PUSH
29031: LD_INT 29
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: IN
29046: IFFALSE 29066
29048: PUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: LD_INT 52
29056: PPUSH
29057: CALL_OW 321
29061: PUSH
29062: LD_INT 2
29064: EQUAL
29065: AND
29066: IFFALSE 29083
// bpoints := bpoints * 1.2 ;
29068: LD_ADDR_VAR 0 10
29072: PUSH
29073: LD_VAR 0 10
29077: PUSH
29078: LD_REAL  1.20000000000000E+0000
29081: MUL
29082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29083: LD_VAR 0 6
29087: PPUSH
29088: CALL_OW 264
29092: PUSH
29093: LD_INT 6
29095: PUSH
29096: LD_INT 46
29098: PUSH
29099: LD_INT 47
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: IN
29107: IFFALSE 29124
// bpoints := bpoints * 1.2 ;
29109: LD_ADDR_VAR 0 10
29113: PUSH
29114: LD_VAR 0 10
29118: PUSH
29119: LD_REAL  1.20000000000000E+0000
29122: MUL
29123: ST_TO_ADDR
// end ; unit_building :
29124: GO 29138
29126: LD_INT 3
29128: DOUBLE
29129: EQUAL
29130: IFTRUE 29134
29132: GO 29137
29134: POP
// ; end ;
29135: GO 29138
29137: POP
// for j = 1 to 3 do
29138: LD_ADDR_VAR 0 7
29142: PUSH
29143: DOUBLE
29144: LD_INT 1
29146: DEC
29147: ST_TO_ADDR
29148: LD_INT 3
29150: PUSH
29151: FOR_TO
29152: IFFALSE 29205
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29154: LD_ADDR_VAR 0 5
29158: PUSH
29159: LD_VAR 0 5
29163: PPUSH
29164: LD_VAR 0 7
29168: PPUSH
29169: LD_VAR 0 5
29173: PUSH
29174: LD_VAR 0 7
29178: ARRAY
29179: PUSH
29180: LD_VAR 0 9
29184: PUSH
29185: LD_VAR 0 7
29189: ARRAY
29190: PUSH
29191: LD_VAR 0 10
29195: MUL
29196: PLUS
29197: PPUSH
29198: CALL_OW 1
29202: ST_TO_ADDR
29203: GO 29151
29205: POP
29206: POP
// end ;
29207: GO 27680
29209: POP
29210: POP
// result := Replace ( result , 4 , tmp ) ;
29211: LD_ADDR_VAR 0 5
29215: PUSH
29216: LD_VAR 0 5
29220: PPUSH
29221: LD_INT 4
29223: PPUSH
29224: LD_VAR 0 8
29228: PPUSH
29229: CALL_OW 1
29233: ST_TO_ADDR
// end ;
29234: LD_VAR 0 5
29238: RET
// export function DangerAtRange ( unit , range ) ; begin
29239: LD_INT 0
29241: PPUSH
// if not unit then
29242: LD_VAR 0 1
29246: NOT
29247: IFFALSE 29251
// exit ;
29249: GO 29296
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29251: LD_ADDR_VAR 0 3
29255: PUSH
29256: LD_VAR 0 1
29260: PPUSH
29261: CALL_OW 255
29265: PPUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL_OW 250
29275: PPUSH
29276: LD_VAR 0 1
29280: PPUSH
29281: CALL_OW 251
29285: PPUSH
29286: LD_VAR 0 2
29290: PPUSH
29291: CALL 27530 0 4
29295: ST_TO_ADDR
// end ;
29296: LD_VAR 0 3
29300: RET
// export function DangerInArea ( side , area ) ; begin
29301: LD_INT 0
29303: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_VAR 0 2
29313: PPUSH
29314: LD_INT 81
29316: PUSH
29317: LD_VAR 0 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PPUSH
29326: CALL_OW 70
29330: ST_TO_ADDR
// end ;
29331: LD_VAR 0 3
29335: RET
// export function IsExtension ( b ) ; begin
29336: LD_INT 0
29338: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29339: LD_ADDR_VAR 0 2
29343: PUSH
29344: LD_VAR 0 1
29348: PUSH
29349: LD_INT 23
29351: PUSH
29352: LD_INT 20
29354: PUSH
29355: LD_INT 22
29357: PUSH
29358: LD_INT 17
29360: PUSH
29361: LD_INT 24
29363: PUSH
29364: LD_INT 21
29366: PUSH
29367: LD_INT 19
29369: PUSH
29370: LD_INT 16
29372: PUSH
29373: LD_INT 25
29375: PUSH
29376: LD_INT 18
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: IN
29391: ST_TO_ADDR
// end ;
29392: LD_VAR 0 2
29396: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
29401: PPUSH
// result := [ ] ;
29402: LD_ADDR_VAR 0 4
29406: PUSH
29407: EMPTY
29408: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29409: LD_ADDR_VAR 0 5
29413: PUSH
29414: LD_VAR 0 2
29418: PPUSH
29419: LD_INT 21
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PPUSH
29429: CALL_OW 70
29433: ST_TO_ADDR
// if not tmp then
29434: LD_VAR 0 5
29438: NOT
29439: IFFALSE 29443
// exit ;
29441: GO 29507
// if checkLink then
29443: LD_VAR 0 3
29447: IFFALSE 29497
// begin for i in tmp do
29449: LD_ADDR_VAR 0 6
29453: PUSH
29454: LD_VAR 0 5
29458: PUSH
29459: FOR_IN
29460: IFFALSE 29495
// if GetBase ( i ) <> base then
29462: LD_VAR 0 6
29466: PPUSH
29467: CALL_OW 274
29471: PUSH
29472: LD_VAR 0 1
29476: NONEQUAL
29477: IFFALSE 29493
// ComLinkToBase ( base , i ) ;
29479: LD_VAR 0 1
29483: PPUSH
29484: LD_VAR 0 6
29488: PPUSH
29489: CALL_OW 169
29493: GO 29459
29495: POP
29496: POP
// end ; result := tmp ;
29497: LD_ADDR_VAR 0 4
29501: PUSH
29502: LD_VAR 0 5
29506: ST_TO_ADDR
// end ;
29507: LD_VAR 0 4
29511: RET
// export function ComComplete ( units , b ) ; var i ; begin
29512: LD_INT 0
29514: PPUSH
29515: PPUSH
// if not units then
29516: LD_VAR 0 1
29520: NOT
29521: IFFALSE 29525
// exit ;
29523: GO 29615
// for i in units do
29525: LD_ADDR_VAR 0 4
29529: PUSH
29530: LD_VAR 0 1
29534: PUSH
29535: FOR_IN
29536: IFFALSE 29613
// if BuildingStatus ( b ) = bs_build then
29538: LD_VAR 0 2
29542: PPUSH
29543: CALL_OW 461
29547: PUSH
29548: LD_INT 1
29550: EQUAL
29551: IFFALSE 29611
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29553: LD_VAR 0 4
29557: PPUSH
29558: LD_STRING h
29560: PUSH
29561: LD_VAR 0 2
29565: PPUSH
29566: CALL_OW 250
29570: PUSH
29571: LD_VAR 0 2
29575: PPUSH
29576: CALL_OW 251
29580: PUSH
29581: LD_VAR 0 2
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: PPUSH
29607: CALL_OW 446
29611: GO 29535
29613: POP
29614: POP
// end ;
29615: LD_VAR 0 3
29619: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29620: LD_INT 0
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29628: LD_VAR 0 1
29632: NOT
29633: IFTRUE 29650
29635: PUSH
29636: LD_VAR 0 1
29640: PPUSH
29641: CALL_OW 263
29645: PUSH
29646: LD_INT 2
29648: NONEQUAL
29649: OR
29650: IFFALSE 29654
// exit ;
29652: GO 29970
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29654: LD_ADDR_VAR 0 6
29658: PUSH
29659: LD_INT 22
29661: PUSH
29662: LD_VAR 0 1
29666: PPUSH
29667: CALL_OW 255
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 2
29678: PUSH
29679: LD_INT 30
29681: PUSH
29682: LD_INT 36
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 34
29691: PUSH
29692: LD_INT 31
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: LIST
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PPUSH
29708: CALL_OW 69
29712: ST_TO_ADDR
// if not tmp then
29713: LD_VAR 0 6
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 29970
// result := [ ] ;
29722: LD_ADDR_VAR 0 2
29726: PUSH
29727: EMPTY
29728: ST_TO_ADDR
// for i in tmp do
29729: LD_ADDR_VAR 0 3
29733: PUSH
29734: LD_VAR 0 6
29738: PUSH
29739: FOR_IN
29740: IFFALSE 29811
// begin t := UnitsInside ( i ) ;
29742: LD_ADDR_VAR 0 4
29746: PUSH
29747: LD_VAR 0 3
29751: PPUSH
29752: CALL_OW 313
29756: ST_TO_ADDR
// if t then
29757: LD_VAR 0 4
29761: IFFALSE 29809
// for j in t do
29763: LD_ADDR_VAR 0 7
29767: PUSH
29768: LD_VAR 0 4
29772: PUSH
29773: FOR_IN
29774: IFFALSE 29807
// result := Replace ( result , result + 1 , j ) ;
29776: LD_ADDR_VAR 0 2
29780: PUSH
29781: LD_VAR 0 2
29785: PPUSH
29786: LD_VAR 0 2
29790: PUSH
29791: LD_INT 1
29793: PLUS
29794: PPUSH
29795: LD_VAR 0 7
29799: PPUSH
29800: CALL_OW 1
29804: ST_TO_ADDR
29805: GO 29773
29807: POP
29808: POP
// end ;
29809: GO 29739
29811: POP
29812: POP
// if not result then
29813: LD_VAR 0 2
29817: NOT
29818: IFFALSE 29822
// exit ;
29820: GO 29970
// mech := result [ 1 ] ;
29822: LD_ADDR_VAR 0 5
29826: PUSH
29827: LD_VAR 0 2
29831: PUSH
29832: LD_INT 1
29834: ARRAY
29835: ST_TO_ADDR
// if result > 1 then
29836: LD_VAR 0 2
29840: PUSH
29841: LD_INT 1
29843: GREATER
29844: IFFALSE 29956
// begin for i = 2 to result do
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: DOUBLE
29852: LD_INT 2
29854: DEC
29855: ST_TO_ADDR
29856: LD_VAR 0 2
29860: PUSH
29861: FOR_TO
29862: IFFALSE 29954
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29864: LD_ADDR_VAR 0 4
29868: PUSH
29869: LD_VAR 0 2
29873: PUSH
29874: LD_VAR 0 3
29878: ARRAY
29879: PPUSH
29880: LD_INT 3
29882: PPUSH
29883: CALL_OW 259
29887: PUSH
29888: LD_VAR 0 2
29892: PUSH
29893: LD_VAR 0 3
29897: ARRAY
29898: PPUSH
29899: CALL_OW 432
29903: MINUS
29904: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29905: LD_VAR 0 4
29909: PUSH
29910: LD_VAR 0 5
29914: PPUSH
29915: LD_INT 3
29917: PPUSH
29918: CALL_OW 259
29922: PUSH
29923: LD_VAR 0 5
29927: PPUSH
29928: CALL_OW 432
29932: MINUS
29933: GREATEREQUAL
29934: IFFALSE 29952
// mech := result [ i ] ;
29936: LD_ADDR_VAR 0 5
29940: PUSH
29941: LD_VAR 0 2
29945: PUSH
29946: LD_VAR 0 3
29950: ARRAY
29951: ST_TO_ADDR
// end ;
29952: GO 29861
29954: POP
29955: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29956: LD_VAR 0 1
29960: PPUSH
29961: LD_VAR 0 5
29965: PPUSH
29966: CALL_OW 135
// end ;
29970: LD_VAR 0 2
29974: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29975: LD_INT 0
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
29987: PPUSH
29988: PPUSH
29989: PPUSH
// result := [ ] ;
29990: LD_ADDR_VAR 0 7
29994: PUSH
29995: EMPTY
29996: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 266
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: IN
30017: NOT
30018: IFFALSE 30022
// exit ;
30020: GO 31662
// if name then
30022: LD_VAR 0 3
30026: IFFALSE 30042
// SetBName ( base_dep , name ) ;
30028: LD_VAR 0 1
30032: PPUSH
30033: LD_VAR 0 3
30037: PPUSH
30038: CALL_OW 500
// base := GetBase ( base_dep ) ;
30042: LD_ADDR_VAR 0 15
30046: PUSH
30047: LD_VAR 0 1
30051: PPUSH
30052: CALL_OW 274
30056: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30057: LD_ADDR_VAR 0 16
30061: PUSH
30062: LD_VAR 0 1
30066: PPUSH
30067: CALL_OW 255
30071: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30072: LD_ADDR_VAR 0 17
30076: PUSH
30077: LD_VAR 0 1
30081: PPUSH
30082: CALL_OW 248
30086: ST_TO_ADDR
// if sources then
30087: LD_VAR 0 5
30091: IFFALSE 30138
// for i = 1 to 3 do
30093: LD_ADDR_VAR 0 8
30097: PUSH
30098: DOUBLE
30099: LD_INT 1
30101: DEC
30102: ST_TO_ADDR
30103: LD_INT 3
30105: PUSH
30106: FOR_TO
30107: IFFALSE 30136
// AddResourceType ( base , i , sources [ i ] ) ;
30109: LD_VAR 0 15
30113: PPUSH
30114: LD_VAR 0 8
30118: PPUSH
30119: LD_VAR 0 5
30123: PUSH
30124: LD_VAR 0 8
30128: ARRAY
30129: PPUSH
30130: CALL_OW 276
30134: GO 30106
30136: POP
30137: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30138: LD_ADDR_VAR 0 18
30142: PUSH
30143: LD_VAR 0 15
30147: PPUSH
30148: LD_VAR 0 2
30152: PPUSH
30153: LD_INT 1
30155: PPUSH
30156: CALL 29397 0 3
30160: ST_TO_ADDR
// InitHc ;
30161: CALL_OW 19
// InitUc ;
30165: CALL_OW 18
// uc_side := side ;
30169: LD_ADDR_OWVAR 20
30173: PUSH
30174: LD_VAR 0 16
30178: ST_TO_ADDR
// uc_nation := nation ;
30179: LD_ADDR_OWVAR 21
30183: PUSH
30184: LD_VAR 0 17
30188: ST_TO_ADDR
// if buildings then
30189: LD_VAR 0 18
30193: IFFALSE 31521
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30195: LD_ADDR_VAR 0 19
30199: PUSH
30200: LD_VAR 0 18
30204: PPUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 30
30210: PUSH
30211: LD_INT 29
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 30
30220: PUSH
30221: LD_INT 30
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: PPUSH
30233: CALL_OW 72
30237: ST_TO_ADDR
// if tmp then
30238: LD_VAR 0 19
30242: IFFALSE 30290
// for i in tmp do
30244: LD_ADDR_VAR 0 8
30248: PUSH
30249: LD_VAR 0 19
30253: PUSH
30254: FOR_IN
30255: IFFALSE 30288
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30257: LD_VAR 0 8
30261: PPUSH
30262: CALL_OW 250
30266: PPUSH
30267: LD_VAR 0 8
30271: PPUSH
30272: CALL_OW 251
30276: PPUSH
30277: LD_VAR 0 16
30281: PPUSH
30282: CALL_OW 441
30286: GO 30254
30288: POP
30289: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30290: LD_VAR 0 18
30294: PPUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 32
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 30
30310: PUSH
30311: LD_INT 33
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: PPUSH
30323: CALL_OW 72
30327: IFFALSE 30415
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30329: LD_ADDR_VAR 0 8
30333: PUSH
30334: LD_VAR 0 18
30338: PPUSH
30339: LD_INT 2
30341: PUSH
30342: LD_INT 30
30344: PUSH
30345: LD_INT 32
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 30
30354: PUSH
30355: LD_INT 33
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: LIST
30366: PPUSH
30367: CALL_OW 72
30371: PUSH
30372: FOR_IN
30373: IFFALSE 30413
// begin if not GetBWeapon ( i ) then
30375: LD_VAR 0 8
30379: PPUSH
30380: CALL_OW 269
30384: NOT
30385: IFFALSE 30411
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30387: LD_VAR 0 8
30391: PPUSH
30392: LD_VAR 0 8
30396: PPUSH
30397: LD_VAR 0 2
30401: PPUSH
30402: CALL 31667 0 2
30406: PPUSH
30407: CALL_OW 431
// end ;
30411: GO 30372
30413: POP
30414: POP
// end ; for i = 1 to personel do
30415: LD_ADDR_VAR 0 8
30419: PUSH
30420: DOUBLE
30421: LD_INT 1
30423: DEC
30424: ST_TO_ADDR
30425: LD_VAR 0 6
30429: PUSH
30430: FOR_TO
30431: IFFALSE 31501
// begin if i > 4 then
30433: LD_VAR 0 8
30437: PUSH
30438: LD_INT 4
30440: GREATER
30441: IFFALSE 30445
// break ;
30443: GO 31501
// case i of 1 :
30445: LD_VAR 0 8
30449: PUSH
30450: LD_INT 1
30452: DOUBLE
30453: EQUAL
30454: IFTRUE 30458
30456: GO 30538
30458: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30459: LD_ADDR_VAR 0 12
30463: PUSH
30464: LD_VAR 0 18
30468: PPUSH
30469: LD_INT 22
30471: PUSH
30472: LD_VAR 0 16
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 58
30483: PUSH
30484: EMPTY
30485: LIST
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: LD_INT 30
30492: PUSH
30493: LD_INT 32
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 30
30502: PUSH
30503: LD_INT 4
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 30
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: PPUSH
30531: CALL_OW 72
30535: ST_TO_ADDR
30536: GO 30760
30538: LD_INT 2
30540: DOUBLE
30541: EQUAL
30542: IFTRUE 30546
30544: GO 30608
30546: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30547: LD_ADDR_VAR 0 12
30551: PUSH
30552: LD_VAR 0 18
30556: PPUSH
30557: LD_INT 22
30559: PUSH
30560: LD_VAR 0 16
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: LD_INT 30
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 30
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PPUSH
30601: CALL_OW 72
30605: ST_TO_ADDR
30606: GO 30760
30608: LD_INT 3
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30678
30616: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30617: LD_ADDR_VAR 0 12
30621: PUSH
30622: LD_VAR 0 18
30626: PPUSH
30627: LD_INT 22
30629: PUSH
30630: LD_VAR 0 16
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: LD_INT 30
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 30
30654: PUSH
30655: LD_INT 3
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PPUSH
30671: CALL_OW 72
30675: ST_TO_ADDR
30676: GO 30760
30678: LD_INT 4
30680: DOUBLE
30681: EQUAL
30682: IFTRUE 30686
30684: GO 30759
30686: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30687: LD_ADDR_VAR 0 12
30691: PUSH
30692: LD_VAR 0 18
30696: PPUSH
30697: LD_INT 22
30699: PUSH
30700: LD_VAR 0 16
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 2
30711: PUSH
30712: LD_INT 30
30714: PUSH
30715: LD_INT 6
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 30
30724: PUSH
30725: LD_INT 7
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 30
30734: PUSH
30735: LD_INT 8
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PPUSH
30752: CALL_OW 72
30756: ST_TO_ADDR
30757: GO 30760
30759: POP
// if i = 1 then
30760: LD_VAR 0 8
30764: PUSH
30765: LD_INT 1
30767: EQUAL
30768: IFFALSE 30879
// begin tmp := [ ] ;
30770: LD_ADDR_VAR 0 19
30774: PUSH
30775: EMPTY
30776: ST_TO_ADDR
// for j in f do
30777: LD_ADDR_VAR 0 9
30781: PUSH
30782: LD_VAR 0 12
30786: PUSH
30787: FOR_IN
30788: IFFALSE 30861
// if GetBType ( j ) = b_bunker then
30790: LD_VAR 0 9
30794: PPUSH
30795: CALL_OW 266
30799: PUSH
30800: LD_INT 32
30802: EQUAL
30803: IFFALSE 30830
// tmp := Insert ( tmp , 1 , j ) else
30805: LD_ADDR_VAR 0 19
30809: PUSH
30810: LD_VAR 0 19
30814: PPUSH
30815: LD_INT 1
30817: PPUSH
30818: LD_VAR 0 9
30822: PPUSH
30823: CALL_OW 2
30827: ST_TO_ADDR
30828: GO 30859
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30830: LD_ADDR_VAR 0 19
30834: PUSH
30835: LD_VAR 0 19
30839: PPUSH
30840: LD_VAR 0 19
30844: PUSH
30845: LD_INT 1
30847: PLUS
30848: PPUSH
30849: LD_VAR 0 9
30853: PPUSH
30854: CALL_OW 2
30858: ST_TO_ADDR
30859: GO 30787
30861: POP
30862: POP
// if tmp then
30863: LD_VAR 0 19
30867: IFFALSE 30879
// f := tmp ;
30869: LD_ADDR_VAR 0 12
30873: PUSH
30874: LD_VAR 0 19
30878: ST_TO_ADDR
// end ; x := personel [ i ] ;
30879: LD_ADDR_VAR 0 13
30883: PUSH
30884: LD_VAR 0 6
30888: PUSH
30889: LD_VAR 0 8
30893: ARRAY
30894: ST_TO_ADDR
// if x = - 1 then
30895: LD_VAR 0 13
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: EQUAL
30904: IFFALSE 31115
// begin for j in f do
30906: LD_ADDR_VAR 0 9
30910: PUSH
30911: LD_VAR 0 12
30915: PUSH
30916: FOR_IN
30917: IFFALSE 31111
// repeat InitHc ;
30919: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30923: LD_VAR 0 9
30927: PPUSH
30928: CALL_OW 266
30932: PUSH
30933: LD_INT 5
30935: EQUAL
30936: IFFALSE 31006
// begin if UnitsInside ( j ) < 3 then
30938: LD_VAR 0 9
30942: PPUSH
30943: CALL_OW 313
30947: PUSH
30948: LD_INT 3
30950: LESS
30951: IFFALSE 30987
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30953: LD_INT 0
30955: PPUSH
30956: LD_INT 5
30958: PUSH
30959: LD_INT 8
30961: PUSH
30962: LD_INT 9
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: LIST
30969: PUSH
30970: LD_VAR 0 17
30974: ARRAY
30975: PPUSH
30976: LD_VAR 0 4
30980: PPUSH
30981: CALL_OW 380
30985: GO 31004
// PrepareHuman ( false , i , skill ) ;
30987: LD_INT 0
30989: PPUSH
30990: LD_VAR 0 8
30994: PPUSH
30995: LD_VAR 0 4
30999: PPUSH
31000: CALL_OW 380
// end else
31004: GO 31023
// PrepareHuman ( false , i , skill ) ;
31006: LD_INT 0
31008: PPUSH
31009: LD_VAR 0 8
31013: PPUSH
31014: LD_VAR 0 4
31018: PPUSH
31019: CALL_OW 380
// un := CreateHuman ;
31023: LD_ADDR_VAR 0 14
31027: PUSH
31028: CALL_OW 44
31032: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31033: LD_ADDR_VAR 0 7
31037: PUSH
31038: LD_VAR 0 7
31042: PPUSH
31043: LD_INT 1
31045: PPUSH
31046: LD_VAR 0 14
31050: PPUSH
31051: CALL_OW 2
31055: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31056: LD_VAR 0 14
31060: PPUSH
31061: LD_VAR 0 9
31065: PPUSH
31066: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31070: LD_VAR 0 9
31074: PPUSH
31075: CALL_OW 313
31079: PUSH
31080: LD_INT 6
31082: EQUAL
31083: IFTRUE 31107
31085: PUSH
31086: LD_VAR 0 9
31090: PPUSH
31091: CALL_OW 266
31095: PUSH
31096: LD_INT 32
31098: PUSH
31099: LD_INT 31
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: IN
31106: OR
31107: IFFALSE 30919
31109: GO 30916
31111: POP
31112: POP
// end else
31113: GO 31499
// for j = 1 to x do
31115: LD_ADDR_VAR 0 9
31119: PUSH
31120: DOUBLE
31121: LD_INT 1
31123: DEC
31124: ST_TO_ADDR
31125: LD_VAR 0 13
31129: PUSH
31130: FOR_TO
31131: IFFALSE 31497
// begin InitHc ;
31133: CALL_OW 19
// if not f then
31137: LD_VAR 0 12
31141: NOT
31142: IFFALSE 31231
// begin PrepareHuman ( false , i , skill ) ;
31144: LD_INT 0
31146: PPUSH
31147: LD_VAR 0 8
31151: PPUSH
31152: LD_VAR 0 4
31156: PPUSH
31157: CALL_OW 380
// un := CreateHuman ;
31161: LD_ADDR_VAR 0 14
31165: PUSH
31166: CALL_OW 44
31170: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31171: LD_ADDR_VAR 0 7
31175: PUSH
31176: LD_VAR 0 7
31180: PPUSH
31181: LD_INT 1
31183: PPUSH
31184: LD_VAR 0 14
31188: PPUSH
31189: CALL_OW 2
31193: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31194: LD_VAR 0 14
31198: PPUSH
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 250
31208: PPUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 251
31218: PPUSH
31219: LD_INT 10
31221: PPUSH
31222: LD_INT 0
31224: PPUSH
31225: CALL_OW 50
// continue ;
31229: GO 31130
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31231: LD_VAR 0 12
31235: PUSH
31236: LD_INT 1
31238: ARRAY
31239: PPUSH
31240: CALL_OW 313
31244: IFFALSE 31272
31246: PUSH
31247: LD_VAR 0 12
31251: PUSH
31252: LD_INT 1
31254: ARRAY
31255: PPUSH
31256: CALL_OW 266
31260: PUSH
31261: LD_INT 32
31263: PUSH
31264: LD_INT 31
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: IN
31271: AND
31272: IFTRUE 31293
31274: PUSH
31275: LD_VAR 0 12
31279: PUSH
31280: LD_INT 1
31282: ARRAY
31283: PPUSH
31284: CALL_OW 313
31288: PUSH
31289: LD_INT 6
31291: EQUAL
31292: OR
31293: IFFALSE 31313
// f := Delete ( f , 1 ) ;
31295: LD_ADDR_VAR 0 12
31299: PUSH
31300: LD_VAR 0 12
31304: PPUSH
31305: LD_INT 1
31307: PPUSH
31308: CALL_OW 3
31312: ST_TO_ADDR
// if not f then
31313: LD_VAR 0 12
31317: NOT
31318: IFFALSE 31336
// begin x := x + 2 ;
31320: LD_ADDR_VAR 0 13
31324: PUSH
31325: LD_VAR 0 13
31329: PUSH
31330: LD_INT 2
31332: PLUS
31333: ST_TO_ADDR
// continue ;
31334: GO 31130
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31336: LD_VAR 0 12
31340: PUSH
31341: LD_INT 1
31343: ARRAY
31344: PPUSH
31345: CALL_OW 266
31349: PUSH
31350: LD_INT 5
31352: EQUAL
31353: IFFALSE 31427
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31355: LD_VAR 0 12
31359: PUSH
31360: LD_INT 1
31362: ARRAY
31363: PPUSH
31364: CALL_OW 313
31368: PUSH
31369: LD_INT 3
31371: LESS
31372: IFFALSE 31408
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31374: LD_INT 0
31376: PPUSH
31377: LD_INT 5
31379: PUSH
31380: LD_INT 8
31382: PUSH
31383: LD_INT 9
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: PUSH
31391: LD_VAR 0 17
31395: ARRAY
31396: PPUSH
31397: LD_VAR 0 4
31401: PPUSH
31402: CALL_OW 380
31406: GO 31425
// PrepareHuman ( false , i , skill ) ;
31408: LD_INT 0
31410: PPUSH
31411: LD_VAR 0 8
31415: PPUSH
31416: LD_VAR 0 4
31420: PPUSH
31421: CALL_OW 380
// end else
31425: GO 31444
// PrepareHuman ( false , i , skill ) ;
31427: LD_INT 0
31429: PPUSH
31430: LD_VAR 0 8
31434: PPUSH
31435: LD_VAR 0 4
31439: PPUSH
31440: CALL_OW 380
// un := CreateHuman ;
31444: LD_ADDR_VAR 0 14
31448: PUSH
31449: CALL_OW 44
31453: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31454: LD_ADDR_VAR 0 7
31458: PUSH
31459: LD_VAR 0 7
31463: PPUSH
31464: LD_INT 1
31466: PPUSH
31467: LD_VAR 0 14
31471: PPUSH
31472: CALL_OW 2
31476: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31477: LD_VAR 0 14
31481: PPUSH
31482: LD_VAR 0 12
31486: PUSH
31487: LD_INT 1
31489: ARRAY
31490: PPUSH
31491: CALL_OW 52
// end ;
31495: GO 31130
31497: POP
31498: POP
// end ;
31499: GO 30430
31501: POP
31502: POP
// result := result ^ buildings ;
31503: LD_ADDR_VAR 0 7
31507: PUSH
31508: LD_VAR 0 7
31512: PUSH
31513: LD_VAR 0 18
31517: ADD
31518: ST_TO_ADDR
// end else
31519: GO 31662
// begin for i = 1 to personel do
31521: LD_ADDR_VAR 0 8
31525: PUSH
31526: DOUBLE
31527: LD_INT 1
31529: DEC
31530: ST_TO_ADDR
31531: LD_VAR 0 6
31535: PUSH
31536: FOR_TO
31537: IFFALSE 31660
// begin if i > 4 then
31539: LD_VAR 0 8
31543: PUSH
31544: LD_INT 4
31546: GREATER
31547: IFFALSE 31551
// break ;
31549: GO 31660
// x := personel [ i ] ;
31551: LD_ADDR_VAR 0 13
31555: PUSH
31556: LD_VAR 0 6
31560: PUSH
31561: LD_VAR 0 8
31565: ARRAY
31566: ST_TO_ADDR
// if x = - 1 then
31567: LD_VAR 0 13
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: EQUAL
31576: IFFALSE 31580
// continue ;
31578: GO 31536
// PrepareHuman ( false , i , skill ) ;
31580: LD_INT 0
31582: PPUSH
31583: LD_VAR 0 8
31587: PPUSH
31588: LD_VAR 0 4
31592: PPUSH
31593: CALL_OW 380
// un := CreateHuman ;
31597: LD_ADDR_VAR 0 14
31601: PUSH
31602: CALL_OW 44
31606: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31607: LD_VAR 0 14
31611: PPUSH
31612: LD_VAR 0 1
31616: PPUSH
31617: CALL_OW 250
31621: PPUSH
31622: LD_VAR 0 1
31626: PPUSH
31627: CALL_OW 251
31631: PPUSH
31632: LD_INT 10
31634: PPUSH
31635: LD_INT 0
31637: PPUSH
31638: CALL_OW 50
// result := result ^ un ;
31642: LD_ADDR_VAR 0 7
31646: PUSH
31647: LD_VAR 0 7
31651: PUSH
31652: LD_VAR 0 14
31656: ADD
31657: ST_TO_ADDR
// end ;
31658: GO 31536
31660: POP
31661: POP
// end ; end ;
31662: LD_VAR 0 7
31666: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31667: LD_INT 0
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
31682: PPUSH
31683: PPUSH
31684: PPUSH
// result := false ;
31685: LD_ADDR_VAR 0 3
31689: PUSH
31690: LD_INT 0
31692: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31693: LD_VAR 0 1
31697: NOT
31698: IFTRUE 31723
31700: PUSH
31701: LD_VAR 0 1
31705: PPUSH
31706: CALL_OW 266
31710: PUSH
31711: LD_INT 32
31713: PUSH
31714: LD_INT 33
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: IN
31721: NOT
31722: OR
31723: IFFALSE 31727
// exit ;
31725: GO 32862
// nat := GetNation ( tower ) ;
31727: LD_ADDR_VAR 0 12
31731: PUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL_OW 248
31741: ST_TO_ADDR
// side := GetSide ( tower ) ;
31742: LD_ADDR_VAR 0 16
31746: PUSH
31747: LD_VAR 0 1
31751: PPUSH
31752: CALL_OW 255
31756: ST_TO_ADDR
// x := GetX ( tower ) ;
31757: LD_ADDR_VAR 0 10
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: CALL_OW 250
31771: ST_TO_ADDR
// y := GetY ( tower ) ;
31772: LD_ADDR_VAR 0 11
31776: PUSH
31777: LD_VAR 0 1
31781: PPUSH
31782: CALL_OW 251
31786: ST_TO_ADDR
// if not x or not y then
31787: LD_VAR 0 10
31791: NOT
31792: IFTRUE 31801
31794: PUSH
31795: LD_VAR 0 11
31799: NOT
31800: OR
31801: IFFALSE 31805
// exit ;
31803: GO 32862
// weapon := 0 ;
31805: LD_ADDR_VAR 0 18
31809: PUSH
31810: LD_INT 0
31812: ST_TO_ADDR
// fac_list := [ ] ;
31813: LD_ADDR_VAR 0 17
31817: PUSH
31818: EMPTY
31819: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31820: LD_ADDR_VAR 0 6
31824: PUSH
31825: LD_VAR 0 1
31829: PPUSH
31830: CALL_OW 274
31834: PPUSH
31835: LD_VAR 0 2
31839: PPUSH
31840: LD_INT 0
31842: PPUSH
31843: CALL 29397 0 3
31847: PPUSH
31848: LD_INT 30
31850: PUSH
31851: LD_INT 3
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PPUSH
31858: CALL_OW 72
31862: ST_TO_ADDR
// if not factories then
31863: LD_VAR 0 6
31867: NOT
31868: IFFALSE 31872
// exit ;
31870: GO 32862
// for i in factories do
31872: LD_ADDR_VAR 0 8
31876: PUSH
31877: LD_VAR 0 6
31881: PUSH
31882: FOR_IN
31883: IFFALSE 31908
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31885: LD_ADDR_VAR 0 17
31889: PUSH
31890: LD_VAR 0 17
31894: PUSH
31895: LD_VAR 0 8
31899: PPUSH
31900: CALL_OW 478
31904: UNION
31905: ST_TO_ADDR
31906: GO 31882
31908: POP
31909: POP
// if not fac_list then
31910: LD_VAR 0 17
31914: NOT
31915: IFFALSE 31919
// exit ;
31917: GO 32862
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_INT 4
31926: PUSH
31927: LD_INT 5
31929: PUSH
31930: LD_INT 9
31932: PUSH
31933: LD_INT 10
31935: PUSH
31936: LD_INT 6
31938: PUSH
31939: LD_INT 7
31941: PUSH
31942: LD_INT 11
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 27
31956: PUSH
31957: LD_INT 28
31959: PUSH
31960: LD_INT 26
31962: PUSH
31963: LD_INT 30
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 43
31974: PUSH
31975: LD_INT 44
31977: PUSH
31978: LD_INT 46
31980: PUSH
31981: LD_INT 45
31983: PUSH
31984: LD_INT 47
31986: PUSH
31987: LD_INT 49
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: PUSH
32003: LD_VAR 0 12
32007: ARRAY
32008: ST_TO_ADDR
// list := list isect fac_list ;
32009: LD_ADDR_VAR 0 5
32013: PUSH
32014: LD_VAR 0 5
32018: PUSH
32019: LD_VAR 0 17
32023: ISECT
32024: ST_TO_ADDR
// if not list then
32025: LD_VAR 0 5
32029: NOT
32030: IFFALSE 32034
// exit ;
32032: GO 32862
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32034: LD_VAR 0 12
32038: PUSH
32039: LD_INT 3
32041: EQUAL
32042: IFFALSE 32054
32044: PUSH
32045: LD_INT 49
32047: PUSH
32048: LD_VAR 0 5
32052: IN
32053: AND
32054: IFFALSE 32074
32056: PUSH
32057: LD_INT 31
32059: PPUSH
32060: LD_VAR 0 16
32064: PPUSH
32065: CALL_OW 321
32069: PUSH
32070: LD_INT 2
32072: EQUAL
32073: AND
32074: IFFALSE 32134
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32076: LD_INT 22
32078: PUSH
32079: LD_VAR 0 16
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 35
32090: PUSH
32091: LD_INT 49
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 91
32100: PUSH
32101: LD_VAR 0 1
32105: PUSH
32106: LD_INT 10
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: LIST
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: PPUSH
32119: CALL_OW 69
32123: NOT
32124: IFFALSE 32134
// weapon := ru_time_lapser ;
32126: LD_ADDR_VAR 0 18
32130: PUSH
32131: LD_INT 49
32133: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32134: LD_VAR 0 12
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: IN
32149: IFFALSE 32173
32151: PUSH
32152: LD_INT 11
32154: PUSH
32155: LD_VAR 0 5
32159: IN
32160: IFTRUE 32172
32162: PUSH
32163: LD_INT 30
32165: PUSH
32166: LD_VAR 0 5
32170: IN
32171: OR
32172: AND
32173: IFFALSE 32193
32175: PUSH
32176: LD_INT 6
32178: PPUSH
32179: LD_VAR 0 16
32183: PPUSH
32184: CALL_OW 321
32188: PUSH
32189: LD_INT 2
32191: EQUAL
32192: AND
32193: IFFALSE 32360
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32195: LD_INT 22
32197: PUSH
32198: LD_VAR 0 16
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 35
32212: PUSH
32213: LD_INT 11
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 35
32222: PUSH
32223: LD_INT 30
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 91
32237: PUSH
32238: LD_VAR 0 1
32242: PUSH
32243: LD_INT 18
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: PPUSH
32256: CALL_OW 69
32260: NOT
32261: IFFALSE 32337
32263: PUSH
32264: LD_INT 22
32266: PUSH
32267: LD_VAR 0 16
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 2
32278: PUSH
32279: LD_INT 30
32281: PUSH
32282: LD_INT 32
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 30
32291: PUSH
32292: LD_INT 33
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 91
32306: PUSH
32307: LD_VAR 0 1
32311: PUSH
32312: LD_INT 12
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: LIST
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: PPUSH
32328: CALL_OW 69
32332: PUSH
32333: LD_INT 2
32335: GREATER
32336: AND
32337: IFFALSE 32360
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32339: LD_ADDR_VAR 0 18
32343: PUSH
32344: LD_INT 11
32346: PUSH
32347: LD_INT 30
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_VAR 0 12
32358: ARRAY
32359: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32360: LD_VAR 0 18
32364: NOT
32365: IFFALSE 32385
32367: PUSH
32368: LD_INT 40
32370: PPUSH
32371: LD_VAR 0 16
32375: PPUSH
32376: CALL_OW 321
32380: PUSH
32381: LD_INT 2
32383: EQUAL
32384: AND
32385: IFFALSE 32421
32387: PUSH
32388: LD_INT 7
32390: PUSH
32391: LD_VAR 0 5
32395: IN
32396: IFTRUE 32408
32398: PUSH
32399: LD_INT 28
32401: PUSH
32402: LD_VAR 0 5
32406: IN
32407: OR
32408: IFTRUE 32420
32410: PUSH
32411: LD_INT 45
32413: PUSH
32414: LD_VAR 0 5
32418: IN
32419: OR
32420: AND
32421: IFFALSE 32675
// begin hex := GetHexInfo ( x , y ) ;
32423: LD_ADDR_VAR 0 4
32427: PUSH
32428: LD_VAR 0 10
32432: PPUSH
32433: LD_VAR 0 11
32437: PPUSH
32438: CALL_OW 546
32442: ST_TO_ADDR
// if hex [ 1 ] then
32443: LD_VAR 0 4
32447: PUSH
32448: LD_INT 1
32450: ARRAY
32451: IFFALSE 32455
// exit ;
32453: GO 32862
// height := hex [ 2 ] ;
32455: LD_ADDR_VAR 0 15
32459: PUSH
32460: LD_VAR 0 4
32464: PUSH
32465: LD_INT 2
32467: ARRAY
32468: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32469: LD_ADDR_VAR 0 14
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: LD_INT 5
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: ST_TO_ADDR
// for i in tmp do
32492: LD_ADDR_VAR 0 8
32496: PUSH
32497: LD_VAR 0 14
32501: PUSH
32502: FOR_IN
32503: IFFALSE 32673
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32505: LD_ADDR_VAR 0 9
32509: PUSH
32510: LD_VAR 0 10
32514: PPUSH
32515: LD_VAR 0 8
32519: PPUSH
32520: LD_INT 5
32522: PPUSH
32523: CALL_OW 272
32527: PUSH
32528: LD_VAR 0 11
32532: PPUSH
32533: LD_VAR 0 8
32537: PPUSH
32538: LD_INT 5
32540: PPUSH
32541: CALL_OW 273
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32550: LD_VAR 0 9
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: PPUSH
32559: LD_VAR 0 9
32563: PUSH
32564: LD_INT 2
32566: ARRAY
32567: PPUSH
32568: CALL_OW 488
32572: IFFALSE 32671
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32574: LD_ADDR_VAR 0 4
32578: PUSH
32579: LD_VAR 0 9
32583: PUSH
32584: LD_INT 1
32586: ARRAY
32587: PPUSH
32588: LD_VAR 0 9
32592: PUSH
32593: LD_INT 2
32595: ARRAY
32596: PPUSH
32597: CALL_OW 546
32601: ST_TO_ADDR
// if hex [ 1 ] then
32602: LD_VAR 0 4
32606: PUSH
32607: LD_INT 1
32609: ARRAY
32610: IFFALSE 32614
// continue ;
32612: GO 32502
// h := hex [ 2 ] ;
32614: LD_ADDR_VAR 0 13
32618: PUSH
32619: LD_VAR 0 4
32623: PUSH
32624: LD_INT 2
32626: ARRAY
32627: ST_TO_ADDR
// if h + 7 < height then
32628: LD_VAR 0 13
32632: PUSH
32633: LD_INT 7
32635: PLUS
32636: PUSH
32637: LD_VAR 0 15
32641: LESS
32642: IFFALSE 32671
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32644: LD_ADDR_VAR 0 18
32648: PUSH
32649: LD_INT 7
32651: PUSH
32652: LD_INT 28
32654: PUSH
32655: LD_INT 45
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: PUSH
32663: LD_VAR 0 12
32667: ARRAY
32668: ST_TO_ADDR
// break ;
32669: GO 32673
// end ; end ; end ;
32671: GO 32502
32673: POP
32674: POP
// end ; if not weapon then
32675: LD_VAR 0 18
32679: NOT
32680: IFFALSE 32740
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32682: LD_ADDR_VAR 0 5
32686: PUSH
32687: LD_VAR 0 5
32691: PUSH
32692: LD_INT 11
32694: PUSH
32695: LD_INT 30
32697: PUSH
32698: LD_INT 49
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: DIFF
32706: ST_TO_ADDR
// if not list then
32707: LD_VAR 0 5
32711: NOT
32712: IFFALSE 32716
// exit ;
32714: GO 32862
// weapon := list [ rand ( 1 , list ) ] ;
32716: LD_ADDR_VAR 0 18
32720: PUSH
32721: LD_VAR 0 5
32725: PUSH
32726: LD_INT 1
32728: PPUSH
32729: LD_VAR 0 5
32733: PPUSH
32734: CALL_OW 12
32738: ARRAY
32739: ST_TO_ADDR
// end ; if weapon then
32740: LD_VAR 0 18
32744: IFFALSE 32862
// begin tmp := CostOfWeapon ( weapon ) ;
32746: LD_ADDR_VAR 0 14
32750: PUSH
32751: LD_VAR 0 18
32755: PPUSH
32756: CALL_OW 451
32760: ST_TO_ADDR
// j := GetBase ( tower ) ;
32761: LD_ADDR_VAR 0 9
32765: PUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL_OW 274
32775: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32776: LD_VAR 0 9
32780: PPUSH
32781: LD_INT 1
32783: PPUSH
32784: CALL_OW 275
32788: PUSH
32789: LD_VAR 0 14
32793: PUSH
32794: LD_INT 1
32796: ARRAY
32797: GREATEREQUAL
32798: IFFALSE 32824
32800: PUSH
32801: LD_VAR 0 9
32805: PPUSH
32806: LD_INT 2
32808: PPUSH
32809: CALL_OW 275
32813: PUSH
32814: LD_VAR 0 14
32818: PUSH
32819: LD_INT 2
32821: ARRAY
32822: GREATEREQUAL
32823: AND
32824: IFFALSE 32850
32826: PUSH
32827: LD_VAR 0 9
32831: PPUSH
32832: LD_INT 3
32834: PPUSH
32835: CALL_OW 275
32839: PUSH
32840: LD_VAR 0 14
32844: PUSH
32845: LD_INT 3
32847: ARRAY
32848: GREATEREQUAL
32849: AND
32850: IFFALSE 32862
// result := weapon ;
32852: LD_ADDR_VAR 0 3
32856: PUSH
32857: LD_VAR 0 18
32861: ST_TO_ADDR
// end ; end ;
32862: LD_VAR 0 3
32866: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32867: LD_INT 0
32869: PPUSH
32870: PPUSH
// result := true ;
32871: LD_ADDR_VAR 0 3
32875: PUSH
32876: LD_INT 1
32878: ST_TO_ADDR
// if array1 = array2 then
32879: LD_VAR 0 1
32883: PUSH
32884: LD_VAR 0 2
32888: EQUAL
32889: IFFALSE 32949
// begin for i = 1 to array1 do
32891: LD_ADDR_VAR 0 4
32895: PUSH
32896: DOUBLE
32897: LD_INT 1
32899: DEC
32900: ST_TO_ADDR
32901: LD_VAR 0 1
32905: PUSH
32906: FOR_TO
32907: IFFALSE 32945
// if array1 [ i ] <> array2 [ i ] then
32909: LD_VAR 0 1
32913: PUSH
32914: LD_VAR 0 4
32918: ARRAY
32919: PUSH
32920: LD_VAR 0 2
32924: PUSH
32925: LD_VAR 0 4
32929: ARRAY
32930: NONEQUAL
32931: IFFALSE 32943
// begin result := false ;
32933: LD_ADDR_VAR 0 3
32937: PUSH
32938: LD_INT 0
32940: ST_TO_ADDR
// break ;
32941: GO 32945
// end ;
32943: GO 32906
32945: POP
32946: POP
// end else
32947: GO 32957
// result := false ;
32949: LD_ADDR_VAR 0 3
32953: PUSH
32954: LD_INT 0
32956: ST_TO_ADDR
// end ;
32957: LD_VAR 0 3
32961: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32962: LD_INT 0
32964: PPUSH
32965: PPUSH
// if not array1 or not array2 then
32966: LD_VAR 0 1
32970: NOT
32971: IFTRUE 32980
32973: PUSH
32974: LD_VAR 0 2
32978: NOT
32979: OR
32980: IFFALSE 32984
// exit ;
32982: GO 33048
// result := true ;
32984: LD_ADDR_VAR 0 3
32988: PUSH
32989: LD_INT 1
32991: ST_TO_ADDR
// for i = 1 to array1 do
32992: LD_ADDR_VAR 0 4
32996: PUSH
32997: DOUBLE
32998: LD_INT 1
33000: DEC
33001: ST_TO_ADDR
33002: LD_VAR 0 1
33006: PUSH
33007: FOR_TO
33008: IFFALSE 33046
// if array1 [ i ] <> array2 [ i ] then
33010: LD_VAR 0 1
33014: PUSH
33015: LD_VAR 0 4
33019: ARRAY
33020: PUSH
33021: LD_VAR 0 2
33025: PUSH
33026: LD_VAR 0 4
33030: ARRAY
33031: NONEQUAL
33032: IFFALSE 33044
// begin result := false ;
33034: LD_ADDR_VAR 0 3
33038: PUSH
33039: LD_INT 0
33041: ST_TO_ADDR
// break ;
33042: GO 33046
// end ;
33044: GO 33007
33046: POP
33047: POP
// end ;
33048: LD_VAR 0 3
33052: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33053: LD_INT 0
33055: PPUSH
33056: PPUSH
33057: PPUSH
// pom := GetBase ( fac ) ;
33058: LD_ADDR_VAR 0 5
33062: PUSH
33063: LD_VAR 0 1
33067: PPUSH
33068: CALL_OW 274
33072: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33073: LD_ADDR_VAR 0 4
33077: PUSH
33078: LD_VAR 0 2
33082: PUSH
33083: LD_INT 1
33085: ARRAY
33086: PPUSH
33087: LD_VAR 0 2
33091: PUSH
33092: LD_INT 2
33094: ARRAY
33095: PPUSH
33096: LD_VAR 0 2
33100: PUSH
33101: LD_INT 3
33103: ARRAY
33104: PPUSH
33105: LD_VAR 0 2
33109: PUSH
33110: LD_INT 4
33112: ARRAY
33113: PPUSH
33114: CALL_OW 449
33118: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33119: LD_ADDR_VAR 0 3
33123: PUSH
33124: LD_VAR 0 5
33128: PPUSH
33129: LD_INT 1
33131: PPUSH
33132: CALL_OW 275
33136: PUSH
33137: LD_VAR 0 4
33141: PUSH
33142: LD_INT 1
33144: ARRAY
33145: GREATEREQUAL
33146: IFFALSE 33172
33148: PUSH
33149: LD_VAR 0 5
33153: PPUSH
33154: LD_INT 2
33156: PPUSH
33157: CALL_OW 275
33161: PUSH
33162: LD_VAR 0 4
33166: PUSH
33167: LD_INT 2
33169: ARRAY
33170: GREATEREQUAL
33171: AND
33172: IFFALSE 33198
33174: PUSH
33175: LD_VAR 0 5
33179: PPUSH
33180: LD_INT 3
33182: PPUSH
33183: CALL_OW 275
33187: PUSH
33188: LD_VAR 0 4
33192: PUSH
33193: LD_INT 3
33195: ARRAY
33196: GREATEREQUAL
33197: AND
33198: ST_TO_ADDR
// end ;
33199: LD_VAR 0 3
33203: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33204: LD_INT 0
33206: PPUSH
33207: PPUSH
33208: PPUSH
33209: PPUSH
// pom := GetBase ( building ) ;
33210: LD_ADDR_VAR 0 3
33214: PUSH
33215: LD_VAR 0 1
33219: PPUSH
33220: CALL_OW 274
33224: ST_TO_ADDR
// if not pom then
33225: LD_VAR 0 3
33229: NOT
33230: IFFALSE 33234
// exit ;
33232: GO 33408
// btype := GetBType ( building ) ;
33234: LD_ADDR_VAR 0 5
33238: PUSH
33239: LD_VAR 0 1
33243: PPUSH
33244: CALL_OW 266
33248: ST_TO_ADDR
// if btype = b_armoury then
33249: LD_VAR 0 5
33253: PUSH
33254: LD_INT 4
33256: EQUAL
33257: IFFALSE 33267
// btype := b_barracks ;
33259: LD_ADDR_VAR 0 5
33263: PUSH
33264: LD_INT 5
33266: ST_TO_ADDR
// if btype = b_depot then
33267: LD_VAR 0 5
33271: PUSH
33272: LD_INT 0
33274: EQUAL
33275: IFFALSE 33285
// btype := b_warehouse ;
33277: LD_ADDR_VAR 0 5
33281: PUSH
33282: LD_INT 1
33284: ST_TO_ADDR
// if btype = b_workshop then
33285: LD_VAR 0 5
33289: PUSH
33290: LD_INT 2
33292: EQUAL
33293: IFFALSE 33303
// btype := b_factory ;
33295: LD_ADDR_VAR 0 5
33299: PUSH
33300: LD_INT 3
33302: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33303: LD_ADDR_VAR 0 4
33307: PUSH
33308: LD_VAR 0 5
33312: PPUSH
33313: LD_VAR 0 1
33317: PPUSH
33318: CALL_OW 248
33322: PPUSH
33323: CALL_OW 450
33327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33328: LD_ADDR_VAR 0 2
33332: PUSH
33333: LD_VAR 0 3
33337: PPUSH
33338: LD_INT 1
33340: PPUSH
33341: CALL_OW 275
33345: PUSH
33346: LD_VAR 0 4
33350: PUSH
33351: LD_INT 1
33353: ARRAY
33354: GREATEREQUAL
33355: IFFALSE 33381
33357: PUSH
33358: LD_VAR 0 3
33362: PPUSH
33363: LD_INT 2
33365: PPUSH
33366: CALL_OW 275
33370: PUSH
33371: LD_VAR 0 4
33375: PUSH
33376: LD_INT 2
33378: ARRAY
33379: GREATEREQUAL
33380: AND
33381: IFFALSE 33407
33383: PUSH
33384: LD_VAR 0 3
33388: PPUSH
33389: LD_INT 3
33391: PPUSH
33392: CALL_OW 275
33396: PUSH
33397: LD_VAR 0 4
33401: PUSH
33402: LD_INT 3
33404: ARRAY
33405: GREATEREQUAL
33406: AND
33407: ST_TO_ADDR
// end ;
33408: LD_VAR 0 2
33412: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33413: LD_INT 0
33415: PPUSH
33416: PPUSH
33417: PPUSH
// pom := GetBase ( building ) ;
33418: LD_ADDR_VAR 0 4
33422: PUSH
33423: LD_VAR 0 1
33427: PPUSH
33428: CALL_OW 274
33432: ST_TO_ADDR
// if not pom then
33433: LD_VAR 0 4
33437: NOT
33438: IFFALSE 33442
// exit ;
33440: GO 33547
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33442: LD_ADDR_VAR 0 5
33446: PUSH
33447: LD_VAR 0 2
33451: PPUSH
33452: LD_VAR 0 1
33456: PPUSH
33457: CALL_OW 248
33461: PPUSH
33462: CALL_OW 450
33466: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_VAR 0 4
33476: PPUSH
33477: LD_INT 1
33479: PPUSH
33480: CALL_OW 275
33484: PUSH
33485: LD_VAR 0 5
33489: PUSH
33490: LD_INT 1
33492: ARRAY
33493: GREATEREQUAL
33494: IFFALSE 33520
33496: PUSH
33497: LD_VAR 0 4
33501: PPUSH
33502: LD_INT 2
33504: PPUSH
33505: CALL_OW 275
33509: PUSH
33510: LD_VAR 0 5
33514: PUSH
33515: LD_INT 2
33517: ARRAY
33518: GREATEREQUAL
33519: AND
33520: IFFALSE 33546
33522: PUSH
33523: LD_VAR 0 4
33527: PPUSH
33528: LD_INT 3
33530: PPUSH
33531: CALL_OW 275
33535: PUSH
33536: LD_VAR 0 5
33540: PUSH
33541: LD_INT 3
33543: ARRAY
33544: GREATEREQUAL
33545: AND
33546: ST_TO_ADDR
// end ;
33547: LD_VAR 0 3
33551: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33552: LD_INT 0
33554: PPUSH
33555: PPUSH
33556: PPUSH
33557: PPUSH
33558: PPUSH
33559: PPUSH
33560: PPUSH
33561: PPUSH
33562: PPUSH
33563: PPUSH
33564: PPUSH
// result := false ;
33565: LD_ADDR_VAR 0 8
33569: PUSH
33570: LD_INT 0
33572: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33573: LD_VAR 0 5
33577: NOT
33578: IFTRUE 33587
33580: PUSH
33581: LD_VAR 0 1
33585: NOT
33586: OR
33587: IFTRUE 33596
33589: PUSH
33590: LD_VAR 0 2
33594: NOT
33595: OR
33596: IFTRUE 33605
33598: PUSH
33599: LD_VAR 0 3
33603: NOT
33604: OR
33605: IFFALSE 33609
// exit ;
33607: GO 34435
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33609: LD_ADDR_VAR 0 14
33613: PUSH
33614: LD_VAR 0 1
33618: PPUSH
33619: LD_VAR 0 2
33623: PPUSH
33624: LD_VAR 0 3
33628: PPUSH
33629: LD_VAR 0 4
33633: PPUSH
33634: LD_VAR 0 5
33638: PUSH
33639: LD_INT 1
33641: ARRAY
33642: PPUSH
33643: CALL_OW 248
33647: PPUSH
33648: LD_INT 0
33650: PPUSH
33651: CALL 35716 0 6
33655: ST_TO_ADDR
// if not hexes then
33656: LD_VAR 0 14
33660: NOT
33661: IFFALSE 33665
// exit ;
33663: GO 34435
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33665: LD_ADDR_VAR 0 17
33669: PUSH
33670: LD_VAR 0 5
33674: PPUSH
33675: LD_INT 22
33677: PUSH
33678: LD_VAR 0 13
33682: PPUSH
33683: CALL_OW 255
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: LD_INT 30
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 30
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: LIST
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PPUSH
33724: CALL_OW 72
33728: ST_TO_ADDR
// for i = 1 to hexes do
33729: LD_ADDR_VAR 0 9
33733: PUSH
33734: DOUBLE
33735: LD_INT 1
33737: DEC
33738: ST_TO_ADDR
33739: LD_VAR 0 14
33743: PUSH
33744: FOR_TO
33745: IFFALSE 34433
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33747: LD_ADDR_VAR 0 13
33751: PUSH
33752: LD_VAR 0 14
33756: PUSH
33757: LD_VAR 0 9
33761: ARRAY
33762: PUSH
33763: LD_INT 1
33765: ARRAY
33766: PPUSH
33767: LD_VAR 0 14
33771: PUSH
33772: LD_VAR 0 9
33776: ARRAY
33777: PUSH
33778: LD_INT 2
33780: ARRAY
33781: PPUSH
33782: CALL_OW 428
33786: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33787: LD_VAR 0 14
33791: PUSH
33792: LD_VAR 0 9
33796: ARRAY
33797: PUSH
33798: LD_INT 1
33800: ARRAY
33801: PPUSH
33802: LD_VAR 0 14
33806: PUSH
33807: LD_VAR 0 9
33811: ARRAY
33812: PUSH
33813: LD_INT 2
33815: ARRAY
33816: PPUSH
33817: CALL_OW 351
33821: IFTRUE 33860
33823: PUSH
33824: LD_VAR 0 14
33828: PUSH
33829: LD_VAR 0 9
33833: ARRAY
33834: PUSH
33835: LD_INT 1
33837: ARRAY
33838: PPUSH
33839: LD_VAR 0 14
33843: PUSH
33844: LD_VAR 0 9
33848: ARRAY
33849: PUSH
33850: LD_INT 2
33852: ARRAY
33853: PPUSH
33854: CALL_OW 488
33858: NOT
33859: OR
33860: IFTRUE 33877
33862: PUSH
33863: LD_VAR 0 13
33867: PPUSH
33868: CALL_OW 247
33872: PUSH
33873: LD_INT 3
33875: EQUAL
33876: OR
33877: IFFALSE 33883
// exit ;
33879: POP
33880: POP
33881: GO 34435
// if not tmp then
33883: LD_VAR 0 13
33887: NOT
33888: IFFALSE 33892
// continue ;
33890: GO 33744
// result := true ;
33892: LD_ADDR_VAR 0 8
33896: PUSH
33897: LD_INT 1
33899: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33900: LD_VAR 0 6
33904: IFFALSE 33921
33906: PUSH
33907: LD_VAR 0 13
33911: PPUSH
33912: CALL_OW 247
33916: PUSH
33917: LD_INT 2
33919: EQUAL
33920: AND
33921: IFFALSE 33938
33923: PUSH
33924: LD_VAR 0 13
33928: PPUSH
33929: CALL_OW 263
33933: PUSH
33934: LD_INT 1
33936: EQUAL
33937: AND
33938: IFFALSE 34102
// begin if IsDrivenBy ( tmp ) then
33940: LD_VAR 0 13
33944: PPUSH
33945: CALL_OW 311
33949: IFFALSE 33953
// continue ;
33951: GO 33744
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33953: LD_VAR 0 6
33957: PPUSH
33958: LD_INT 3
33960: PUSH
33961: LD_INT 60
33963: PUSH
33964: EMPTY
33965: LIST
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 55
33976: PUSH
33977: EMPTY
33978: LIST
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PPUSH
33988: CALL_OW 72
33992: IFFALSE 34100
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33994: LD_ADDR_VAR 0 18
33998: PUSH
33999: LD_VAR 0 6
34003: PPUSH
34004: LD_INT 3
34006: PUSH
34007: LD_INT 60
34009: PUSH
34010: EMPTY
34011: LIST
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 3
34019: PUSH
34020: LD_INT 55
34022: PUSH
34023: EMPTY
34024: LIST
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PPUSH
34034: CALL_OW 72
34038: PUSH
34039: LD_INT 1
34041: ARRAY
34042: ST_TO_ADDR
// if IsInUnit ( driver ) then
34043: LD_VAR 0 18
34047: PPUSH
34048: CALL_OW 310
34052: IFFALSE 34063
// ComExit ( driver ) ;
34054: LD_VAR 0 18
34058: PPUSH
34059: CALL 59706 0 1
// AddComEnterUnit ( driver , tmp ) ;
34063: LD_VAR 0 18
34067: PPUSH
34068: LD_VAR 0 13
34072: PPUSH
34073: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34077: LD_VAR 0 18
34081: PPUSH
34082: LD_VAR 0 7
34086: PPUSH
34087: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34091: LD_VAR 0 18
34095: PPUSH
34096: CALL_OW 181
// end ; continue ;
34100: GO 33744
// end ; if not cleaners or not tmp in cleaners then
34102: LD_VAR 0 6
34106: NOT
34107: IFTRUE 34122
34109: PUSH
34110: LD_VAR 0 13
34114: PUSH
34115: LD_VAR 0 6
34119: IN
34120: NOT
34121: OR
34122: IFFALSE 34431
// begin if dep then
34124: LD_VAR 0 17
34128: IFFALSE 34264
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34130: LD_ADDR_VAR 0 16
34134: PUSH
34135: LD_VAR 0 17
34139: PUSH
34140: LD_INT 1
34142: ARRAY
34143: PPUSH
34144: CALL_OW 250
34148: PPUSH
34149: LD_VAR 0 17
34153: PUSH
34154: LD_INT 1
34156: ARRAY
34157: PPUSH
34158: CALL_OW 254
34162: PPUSH
34163: LD_INT 5
34165: PPUSH
34166: CALL_OW 272
34170: PUSH
34171: LD_VAR 0 17
34175: PUSH
34176: LD_INT 1
34178: ARRAY
34179: PPUSH
34180: CALL_OW 251
34184: PPUSH
34185: LD_VAR 0 17
34189: PUSH
34190: LD_INT 1
34192: ARRAY
34193: PPUSH
34194: CALL_OW 254
34198: PPUSH
34199: LD_INT 5
34201: PPUSH
34202: CALL_OW 273
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34211: LD_VAR 0 16
34215: PUSH
34216: LD_INT 1
34218: ARRAY
34219: PPUSH
34220: LD_VAR 0 16
34224: PUSH
34225: LD_INT 2
34227: ARRAY
34228: PPUSH
34229: CALL_OW 488
34233: IFFALSE 34264
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34235: LD_VAR 0 13
34239: PPUSH
34240: LD_VAR 0 16
34244: PUSH
34245: LD_INT 1
34247: ARRAY
34248: PPUSH
34249: LD_VAR 0 16
34253: PUSH
34254: LD_INT 2
34256: ARRAY
34257: PPUSH
34258: CALL_OW 111
// continue ;
34262: GO 33744
// end ; end ; r := GetDir ( tmp ) ;
34264: LD_ADDR_VAR 0 15
34268: PUSH
34269: LD_VAR 0 13
34273: PPUSH
34274: CALL_OW 254
34278: ST_TO_ADDR
// if r = 5 then
34279: LD_VAR 0 15
34283: PUSH
34284: LD_INT 5
34286: EQUAL
34287: IFFALSE 34297
// r := 0 ;
34289: LD_ADDR_VAR 0 15
34293: PUSH
34294: LD_INT 0
34296: ST_TO_ADDR
// for j = r to 5 do
34297: LD_ADDR_VAR 0 10
34301: PUSH
34302: DOUBLE
34303: LD_VAR 0 15
34307: DEC
34308: ST_TO_ADDR
34309: LD_INT 5
34311: PUSH
34312: FOR_TO
34313: IFFALSE 34429
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34315: LD_ADDR_VAR 0 11
34319: PUSH
34320: LD_VAR 0 13
34324: PPUSH
34325: CALL_OW 250
34329: PPUSH
34330: LD_VAR 0 10
34334: PPUSH
34335: LD_INT 2
34337: PPUSH
34338: CALL_OW 272
34342: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34343: LD_ADDR_VAR 0 12
34347: PUSH
34348: LD_VAR 0 13
34352: PPUSH
34353: CALL_OW 251
34357: PPUSH
34358: LD_VAR 0 10
34362: PPUSH
34363: LD_INT 2
34365: PPUSH
34366: CALL_OW 273
34370: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34371: LD_VAR 0 11
34375: PPUSH
34376: LD_VAR 0 12
34380: PPUSH
34381: CALL_OW 488
34385: IFFALSE 34404
34387: PUSH
34388: LD_VAR 0 11
34392: PPUSH
34393: LD_VAR 0 12
34397: PPUSH
34398: CALL_OW 428
34402: NOT
34403: AND
34404: IFFALSE 34427
// begin ComMoveXY ( tmp , _x , _y ) ;
34406: LD_VAR 0 13
34410: PPUSH
34411: LD_VAR 0 11
34415: PPUSH
34416: LD_VAR 0 12
34420: PPUSH
34421: CALL_OW 111
// break ;
34425: GO 34429
// end ; end ;
34427: GO 34312
34429: POP
34430: POP
// end ; end ;
34431: GO 33744
34433: POP
34434: POP
// end ;
34435: LD_VAR 0 8
34439: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34440: LD_INT 0
34442: PPUSH
// result := true ;
34443: LD_ADDR_VAR 0 3
34447: PUSH
34448: LD_INT 1
34450: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34451: LD_VAR 0 2
34455: PUSH
34456: LD_INT 24
34458: DOUBLE
34459: EQUAL
34460: IFTRUE 34470
34462: LD_INT 33
34464: DOUBLE
34465: EQUAL
34466: IFTRUE 34470
34468: GO 34495
34470: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_INT 32
34478: PPUSH
34479: LD_VAR 0 1
34483: PPUSH
34484: CALL_OW 321
34488: PUSH
34489: LD_INT 2
34491: EQUAL
34492: ST_TO_ADDR
34493: GO 34811
34495: LD_INT 20
34497: DOUBLE
34498: EQUAL
34499: IFTRUE 34503
34501: GO 34528
34503: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34504: LD_ADDR_VAR 0 3
34508: PUSH
34509: LD_INT 6
34511: PPUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL_OW 321
34521: PUSH
34522: LD_INT 2
34524: EQUAL
34525: ST_TO_ADDR
34526: GO 34811
34528: LD_INT 22
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34542
34534: LD_INT 36
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34542
34540: GO 34567
34542: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34543: LD_ADDR_VAR 0 3
34547: PUSH
34548: LD_INT 15
34550: PPUSH
34551: LD_VAR 0 1
34555: PPUSH
34556: CALL_OW 321
34560: PUSH
34561: LD_INT 2
34563: EQUAL
34564: ST_TO_ADDR
34565: GO 34811
34567: LD_INT 30
34569: DOUBLE
34570: EQUAL
34571: IFTRUE 34575
34573: GO 34600
34575: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34576: LD_ADDR_VAR 0 3
34580: PUSH
34581: LD_INT 20
34583: PPUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: CALL_OW 321
34593: PUSH
34594: LD_INT 2
34596: EQUAL
34597: ST_TO_ADDR
34598: GO 34811
34600: LD_INT 28
34602: DOUBLE
34603: EQUAL
34604: IFTRUE 34614
34606: LD_INT 21
34608: DOUBLE
34609: EQUAL
34610: IFTRUE 34614
34612: GO 34639
34614: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34615: LD_ADDR_VAR 0 3
34619: PUSH
34620: LD_INT 21
34622: PPUSH
34623: LD_VAR 0 1
34627: PPUSH
34628: CALL_OW 321
34632: PUSH
34633: LD_INT 2
34635: EQUAL
34636: ST_TO_ADDR
34637: GO 34811
34639: LD_INT 16
34641: DOUBLE
34642: EQUAL
34643: IFTRUE 34647
34645: GO 34672
34647: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34648: LD_ADDR_VAR 0 3
34652: PUSH
34653: LD_INT 84
34655: PPUSH
34656: LD_VAR 0 1
34660: PPUSH
34661: CALL_OW 321
34665: PUSH
34666: LD_INT 2
34668: EQUAL
34669: ST_TO_ADDR
34670: GO 34811
34672: LD_INT 19
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34686
34678: LD_INT 23
34680: DOUBLE
34681: EQUAL
34682: IFTRUE 34686
34684: GO 34711
34686: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34687: LD_ADDR_VAR 0 3
34691: PUSH
34692: LD_INT 83
34694: PPUSH
34695: LD_VAR 0 1
34699: PPUSH
34700: CALL_OW 321
34704: PUSH
34705: LD_INT 2
34707: EQUAL
34708: ST_TO_ADDR
34709: GO 34811
34711: LD_INT 17
34713: DOUBLE
34714: EQUAL
34715: IFTRUE 34719
34717: GO 34744
34719: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34720: LD_ADDR_VAR 0 3
34724: PUSH
34725: LD_INT 39
34727: PPUSH
34728: LD_VAR 0 1
34732: PPUSH
34733: CALL_OW 321
34737: PUSH
34738: LD_INT 2
34740: EQUAL
34741: ST_TO_ADDR
34742: GO 34811
34744: LD_INT 18
34746: DOUBLE
34747: EQUAL
34748: IFTRUE 34752
34750: GO 34777
34752: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34753: LD_ADDR_VAR 0 3
34757: PUSH
34758: LD_INT 40
34760: PPUSH
34761: LD_VAR 0 1
34765: PPUSH
34766: CALL_OW 321
34770: PUSH
34771: LD_INT 2
34773: EQUAL
34774: ST_TO_ADDR
34775: GO 34811
34777: LD_INT 27
34779: DOUBLE
34780: EQUAL
34781: IFTRUE 34785
34783: GO 34810
34785: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34786: LD_ADDR_VAR 0 3
34790: PUSH
34791: LD_INT 35
34793: PPUSH
34794: LD_VAR 0 1
34798: PPUSH
34799: CALL_OW 321
34803: PUSH
34804: LD_INT 2
34806: EQUAL
34807: ST_TO_ADDR
34808: GO 34811
34810: POP
// end ;
34811: LD_VAR 0 3
34815: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34816: LD_INT 0
34818: PPUSH
34819: PPUSH
34820: PPUSH
34821: PPUSH
34822: PPUSH
34823: PPUSH
34824: PPUSH
34825: PPUSH
34826: PPUSH
34827: PPUSH
34828: PPUSH
// result := false ;
34829: LD_ADDR_VAR 0 6
34833: PUSH
34834: LD_INT 0
34836: ST_TO_ADDR
// if btype = b_depot then
34837: LD_VAR 0 2
34841: PUSH
34842: LD_INT 0
34844: EQUAL
34845: IFFALSE 34857
// begin result := true ;
34847: LD_ADDR_VAR 0 6
34851: PUSH
34852: LD_INT 1
34854: ST_TO_ADDR
// exit ;
34855: GO 35711
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34857: LD_VAR 0 1
34861: NOT
34862: IFTRUE 34887
34864: PUSH
34865: LD_VAR 0 1
34869: PPUSH
34870: CALL_OW 266
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: IN
34885: NOT
34886: OR
34887: IFTRUE 34896
34889: PUSH
34890: LD_VAR 0 2
34894: NOT
34895: OR
34896: IFTRUE 34932
34898: PUSH
34899: LD_VAR 0 5
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 2
34912: PUSH
34913: LD_INT 3
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: LD_INT 5
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: IN
34930: NOT
34931: OR
34932: IFTRUE 34951
34934: PUSH
34935: LD_VAR 0 3
34939: PPUSH
34940: LD_VAR 0 4
34944: PPUSH
34945: CALL_OW 488
34949: NOT
34950: OR
34951: IFFALSE 34955
// exit ;
34953: GO 35711
// side := GetSide ( depot ) ;
34955: LD_ADDR_VAR 0 9
34959: PUSH
34960: LD_VAR 0 1
34964: PPUSH
34965: CALL_OW 255
34969: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34970: LD_VAR 0 9
34974: PPUSH
34975: LD_VAR 0 2
34979: PPUSH
34980: CALL 34440 0 2
34984: NOT
34985: IFFALSE 34989
// exit ;
34987: GO 35711
// pom := GetBase ( depot ) ;
34989: LD_ADDR_VAR 0 10
34993: PUSH
34994: LD_VAR 0 1
34998: PPUSH
34999: CALL_OW 274
35003: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35004: LD_ADDR_VAR 0 11
35008: PUSH
35009: LD_VAR 0 2
35013: PPUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 248
35023: PPUSH
35024: CALL_OW 450
35028: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35029: LD_VAR 0 10
35033: PPUSH
35034: LD_INT 1
35036: PPUSH
35037: CALL_OW 275
35041: PUSH
35042: LD_VAR 0 11
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: GREATEREQUAL
35051: IFFALSE 35077
35053: PUSH
35054: LD_VAR 0 10
35058: PPUSH
35059: LD_INT 2
35061: PPUSH
35062: CALL_OW 275
35066: PUSH
35067: LD_VAR 0 11
35071: PUSH
35072: LD_INT 2
35074: ARRAY
35075: GREATEREQUAL
35076: AND
35077: IFFALSE 35103
35079: PUSH
35080: LD_VAR 0 10
35084: PPUSH
35085: LD_INT 3
35087: PPUSH
35088: CALL_OW 275
35092: PUSH
35093: LD_VAR 0 11
35097: PUSH
35098: LD_INT 3
35100: ARRAY
35101: GREATEREQUAL
35102: AND
35103: NOT
35104: IFFALSE 35108
// exit ;
35106: GO 35711
// if GetBType ( depot ) = b_depot then
35108: LD_VAR 0 1
35112: PPUSH
35113: CALL_OW 266
35117: PUSH
35118: LD_INT 0
35120: EQUAL
35121: IFFALSE 35133
// dist := 28 else
35123: LD_ADDR_VAR 0 14
35127: PUSH
35128: LD_INT 28
35130: ST_TO_ADDR
35131: GO 35141
// dist := 36 ;
35133: LD_ADDR_VAR 0 14
35137: PUSH
35138: LD_INT 36
35140: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35141: LD_VAR 0 1
35145: PPUSH
35146: LD_VAR 0 3
35150: PPUSH
35151: LD_VAR 0 4
35155: PPUSH
35156: CALL_OW 297
35160: PUSH
35161: LD_VAR 0 14
35165: GREATER
35166: IFFALSE 35170
// exit ;
35168: GO 35711
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35170: LD_ADDR_VAR 0 12
35174: PUSH
35175: LD_VAR 0 2
35179: PPUSH
35180: LD_VAR 0 3
35184: PPUSH
35185: LD_VAR 0 4
35189: PPUSH
35190: LD_VAR 0 5
35194: PPUSH
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL_OW 248
35204: PPUSH
35205: LD_INT 0
35207: PPUSH
35208: CALL 35716 0 6
35212: ST_TO_ADDR
// if not hexes then
35213: LD_VAR 0 12
35217: NOT
35218: IFFALSE 35222
// exit ;
35220: GO 35711
// hex := GetHexInfo ( x , y ) ;
35222: LD_ADDR_VAR 0 15
35226: PUSH
35227: LD_VAR 0 3
35231: PPUSH
35232: LD_VAR 0 4
35236: PPUSH
35237: CALL_OW 546
35241: ST_TO_ADDR
// if hex [ 1 ] then
35242: LD_VAR 0 15
35246: PUSH
35247: LD_INT 1
35249: ARRAY
35250: IFFALSE 35254
// exit ;
35252: GO 35711
// height := hex [ 2 ] ;
35254: LD_ADDR_VAR 0 13
35258: PUSH
35259: LD_VAR 0 15
35263: PUSH
35264: LD_INT 2
35266: ARRAY
35267: ST_TO_ADDR
// for i = 1 to hexes do
35268: LD_ADDR_VAR 0 7
35272: PUSH
35273: DOUBLE
35274: LD_INT 1
35276: DEC
35277: ST_TO_ADDR
35278: LD_VAR 0 12
35282: PUSH
35283: FOR_TO
35284: IFFALSE 35628
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35286: LD_VAR 0 12
35290: PUSH
35291: LD_VAR 0 7
35295: ARRAY
35296: PUSH
35297: LD_INT 1
35299: ARRAY
35300: PPUSH
35301: LD_VAR 0 12
35305: PUSH
35306: LD_VAR 0 7
35310: ARRAY
35311: PUSH
35312: LD_INT 2
35314: ARRAY
35315: PPUSH
35316: CALL_OW 488
35320: NOT
35321: IFTRUE 35363
35323: PUSH
35324: LD_VAR 0 12
35328: PUSH
35329: LD_VAR 0 7
35333: ARRAY
35334: PUSH
35335: LD_INT 1
35337: ARRAY
35338: PPUSH
35339: LD_VAR 0 12
35343: PUSH
35344: LD_VAR 0 7
35348: ARRAY
35349: PUSH
35350: LD_INT 2
35352: ARRAY
35353: PPUSH
35354: CALL_OW 428
35358: PUSH
35359: LD_INT 0
35361: GREATER
35362: OR
35363: IFTRUE 35401
35365: PUSH
35366: LD_VAR 0 12
35370: PUSH
35371: LD_VAR 0 7
35375: ARRAY
35376: PUSH
35377: LD_INT 1
35379: ARRAY
35380: PPUSH
35381: LD_VAR 0 12
35385: PUSH
35386: LD_VAR 0 7
35390: ARRAY
35391: PUSH
35392: LD_INT 2
35394: ARRAY
35395: PPUSH
35396: CALL_OW 351
35400: OR
35401: IFFALSE 35407
// exit ;
35403: POP
35404: POP
35405: GO 35711
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35407: LD_ADDR_VAR 0 8
35411: PUSH
35412: LD_VAR 0 12
35416: PUSH
35417: LD_VAR 0 7
35421: ARRAY
35422: PUSH
35423: LD_INT 1
35425: ARRAY
35426: PPUSH
35427: LD_VAR 0 12
35431: PUSH
35432: LD_VAR 0 7
35436: ARRAY
35437: PUSH
35438: LD_INT 2
35440: ARRAY
35441: PPUSH
35442: CALL_OW 546
35446: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35447: LD_VAR 0 8
35451: PUSH
35452: LD_INT 1
35454: ARRAY
35455: IFTRUE 35477
35457: PUSH
35458: LD_VAR 0 8
35462: PUSH
35463: LD_INT 2
35465: ARRAY
35466: PUSH
35467: LD_VAR 0 13
35471: PUSH
35472: LD_INT 2
35474: PLUS
35475: GREATER
35476: OR
35477: IFTRUE 35499
35479: PUSH
35480: LD_VAR 0 8
35484: PUSH
35485: LD_INT 2
35487: ARRAY
35488: PUSH
35489: LD_VAR 0 13
35493: PUSH
35494: LD_INT 2
35496: MINUS
35497: LESS
35498: OR
35499: IFTRUE 35567
35501: PUSH
35502: LD_VAR 0 8
35506: PUSH
35507: LD_INT 3
35509: ARRAY
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 8
35516: PUSH
35517: LD_INT 9
35519: PUSH
35520: LD_INT 10
35522: PUSH
35523: LD_INT 11
35525: PUSH
35526: LD_INT 12
35528: PUSH
35529: LD_INT 13
35531: PUSH
35532: LD_INT 16
35534: PUSH
35535: LD_INT 17
35537: PUSH
35538: LD_INT 18
35540: PUSH
35541: LD_INT 19
35543: PUSH
35544: LD_INT 20
35546: PUSH
35547: LD_INT 21
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: IN
35565: NOT
35566: OR
35567: IFTRUE 35580
35569: PUSH
35570: LD_VAR 0 8
35574: PUSH
35575: LD_INT 5
35577: ARRAY
35578: NOT
35579: OR
35580: IFTRUE 35620
35582: PUSH
35583: LD_VAR 0 8
35587: PUSH
35588: LD_INT 6
35590: ARRAY
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 7
35600: PUSH
35601: LD_INT 9
35603: PUSH
35604: LD_INT 10
35606: PUSH
35607: LD_INT 11
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: IN
35618: NOT
35619: OR
35620: IFFALSE 35626
// exit ;
35622: POP
35623: POP
35624: GO 35711
// end ;
35626: GO 35283
35628: POP
35629: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35630: LD_VAR 0 9
35634: PPUSH
35635: LD_VAR 0 3
35639: PPUSH
35640: LD_VAR 0 4
35644: PPUSH
35645: LD_INT 20
35647: PPUSH
35648: CALL 27530 0 4
35652: PUSH
35653: LD_INT 4
35655: ARRAY
35656: IFFALSE 35660
// exit ;
35658: GO 35711
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35660: LD_VAR 0 2
35664: PUSH
35665: LD_INT 29
35667: PUSH
35668: LD_INT 30
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: IN
35675: IFFALSE 35699
35677: PUSH
35678: LD_VAR 0 3
35682: PPUSH
35683: LD_VAR 0 4
35687: PPUSH
35688: LD_VAR 0 9
35692: PPUSH
35693: CALL_OW 440
35697: NOT
35698: AND
35699: IFFALSE 35703
// exit ;
35701: GO 35711
// result := true ;
35703: LD_ADDR_VAR 0 6
35707: PUSH
35708: LD_INT 1
35710: ST_TO_ADDR
// end ;
35711: LD_VAR 0 6
35715: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35716: LD_INT 0
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
35729: PPUSH
35730: PPUSH
35731: PPUSH
35732: PPUSH
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
35753: PPUSH
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
35765: PPUSH
35766: PPUSH
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
35771: PPUSH
35772: PPUSH
35773: PPUSH
35774: PPUSH
35775: PPUSH
// result = [ ] ;
35776: LD_ADDR_VAR 0 7
35780: PUSH
35781: EMPTY
35782: ST_TO_ADDR
// temp_list = [ ] ;
35783: LD_ADDR_VAR 0 9
35787: PUSH
35788: EMPTY
35789: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35790: LD_VAR 0 4
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 3
35806: PUSH
35807: LD_INT 4
35809: PUSH
35810: LD_INT 5
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: IN
35821: NOT
35822: IFTRUE 35865
35824: PUSH
35825: LD_VAR 0 1
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: IN
35840: IFFALSE 35864
35842: PUSH
35843: LD_VAR 0 5
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: IN
35862: NOT
35863: AND
35864: OR
35865: IFFALSE 35869
// exit ;
35867: GO 54268
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35869: LD_VAR 0 1
35873: PUSH
35874: LD_INT 6
35876: PUSH
35877: LD_INT 7
35879: PUSH
35880: LD_INT 8
35882: PUSH
35883: LD_INT 13
35885: PUSH
35886: LD_INT 12
35888: PUSH
35889: LD_INT 15
35891: PUSH
35892: LD_INT 11
35894: PUSH
35895: LD_INT 14
35897: PUSH
35898: LD_INT 10
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: IN
35912: IFFALSE 35922
// btype = b_lab ;
35914: LD_ADDR_VAR 0 1
35918: PUSH
35919: LD_INT 6
35921: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35922: LD_VAR 0 6
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: IN
35941: NOT
35942: IFTRUE 36010
35944: PUSH
35945: LD_VAR 0 1
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: LD_INT 3
35961: PUSH
35962: LD_INT 6
35964: PUSH
35965: LD_INT 36
35967: PUSH
35968: LD_INT 4
35970: PUSH
35971: LD_INT 5
35973: PUSH
35974: LD_INT 31
35976: PUSH
35977: LD_INT 32
35979: PUSH
35980: LD_INT 33
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: IN
35996: NOT
35997: IFFALSE 36009
35999: PUSH
36000: LD_VAR 0 6
36004: PUSH
36005: LD_INT 1
36007: EQUAL
36008: AND
36009: OR
36010: IFTRUE 36042
36012: PUSH
36013: LD_VAR 0 1
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 3
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: IN
36028: NOT
36029: IFFALSE 36041
36031: PUSH
36032: LD_VAR 0 6
36036: PUSH
36037: LD_INT 2
36039: EQUAL
36040: AND
36041: OR
36042: IFFALSE 36052
// mode = 0 ;
36044: LD_ADDR_VAR 0 6
36048: PUSH
36049: LD_INT 0
36051: ST_TO_ADDR
// case mode of 0 :
36052: LD_VAR 0 6
36056: PUSH
36057: LD_INT 0
36059: DOUBLE
36060: EQUAL
36061: IFTRUE 36065
36063: GO 47518
36065: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36066: LD_ADDR_VAR 0 11
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 3
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 3
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36259: LD_ADDR_VAR 0 12
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 3
36416: NEG
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 3
36427: NEG
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36455: LD_ADDR_VAR 0 13
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: NEG
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: NEG
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 3
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: NEG
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 3
36626: NEG
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36654: LD_ADDR_VAR 0 14
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: LD_INT 3
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 3
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 2
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36850: LD_ADDR_VAR 0 15
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 2
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 2
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 3
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 3
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37043: LD_ADDR_VAR 0 16
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 2
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: LD_INT 2
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 2
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 3
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 3
37200: PUSH
37201: LD_INT 3
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: LD_INT 3
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37236: LD_ADDR_VAR 0 17
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: LD_INT 2
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 2
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 2
37435: NEG
37436: PUSH
37437: LD_INT 2
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37466: LD_ADDR_VAR 0 18
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37696: LD_ADDR_VAR 0 19
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37926: LD_ADDR_VAR 0 20
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: NEG
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38156: LD_ADDR_VAR 0 21
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 2
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 2
38343: NEG
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38386: LD_ADDR_VAR 0 22
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: NEG
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38616: LD_ADDR_VAR 0 23
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 1
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 1
38674: NEG
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 2
38751: PUSH
38752: LD_INT 2
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: LD_INT 3
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: LD_INT 3
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38896: LD_ADDR_VAR 0 24
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: NEG
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 3
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39172: LD_ADDR_VAR 0 25
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 2
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 2
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 2
39371: NEG
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: PUSH
39384: LD_INT 1
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 3
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: LD_INT 3
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39446: LD_ADDR_VAR 0 26
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 2
39622: NEG
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: LD_INT 3
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 3
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39722: LD_ADDR_VAR 0 27
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 3
39955: NEG
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 3
39967: NEG
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40002: LD_ADDR_VAR 0 28
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 2
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: NEG
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: LD_INT 3
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 3
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 3
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 3
40249: NEG
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40284: LD_ADDR_VAR 0 29
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: LD_INT 2
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: LD_INT 3
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: LD_INT 3
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 3
40528: NEG
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40563: LD_ADDR_VAR 0 30
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: LD_INT 3
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 3
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 3
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40841: LD_ADDR_VAR 0 31
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 3
41084: NEG
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41119: LD_ADDR_VAR 0 32
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 2
41296: NEG
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 3
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 3
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 3
41362: NEG
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41397: LD_ADDR_VAR 0 33
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: LD_INT 3
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: LD_INT 3
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 3
41641: NEG
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41676: LD_ADDR_VAR 0 34
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 1
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 3
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41956: LD_ADDR_VAR 0 35
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42068: LD_ADDR_VAR 0 36
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 2
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42180: LD_ADDR_VAR 0 37
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42292: LD_ADDR_VAR 0 38
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42404: LD_ADDR_VAR 0 39
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42516: LD_ADDR_VAR 0 40
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42628: LD_ADDR_VAR 0 41
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: NEG
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: LD_INT 3
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 3
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 3
42902: NEG
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 3
42913: NEG
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 3
42925: NEG
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 3
42937: NEG
42938: PUSH
42939: LD_INT 3
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42978: LD_ADDR_VAR 0 42
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: NEG
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 3
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 3
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 2
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 3
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: LD_INT 3
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 3
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: NEG
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 3
43287: NEG
43288: PUSH
43289: LD_INT 3
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43328: LD_ADDR_VAR 0 43
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 3
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 3
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 3
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 3
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 3
43635: NEG
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43676: LD_ADDR_VAR 0 44
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: LD_INT 3
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: PUSH
43920: LD_INT 3
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 3
43950: NEG
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 3
43961: NEG
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 3
43973: NEG
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: LD_INT 3
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44026: LD_ADDR_VAR 0 45
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 2
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 2
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: LD_INT 3
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: LD_INT 3
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 3
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 2
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 3
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 3
44323: NEG
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 3
44335: NEG
44336: PUSH
44337: LD_INT 3
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44376: LD_ADDR_VAR 0 46
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 2
44542: NEG
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 3
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 3
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 3
44672: NEG
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 3
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44724: LD_ADDR_VAR 0 47
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44875: LD_ADDR_VAR 0 48
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45022: LD_ADDR_VAR 0 49
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45166: LD_ADDR_VAR 0 50
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45310: LD_ADDR_VAR 0 51
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45457: LD_ADDR_VAR 0 52
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45608: LD_ADDR_VAR 0 53
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: LD_INT 1
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45838: LD_ADDR_VAR 0 54
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46068: LD_ADDR_VAR 0 55
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: LD_INT 1
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: NEG
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46298: LD_ADDR_VAR 0 56
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46528: LD_ADDR_VAR 0 57
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46758: LD_ADDR_VAR 0 58
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46988: LD_ADDR_VAR 0 59
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47076: LD_ADDR_VAR 0 60
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47164: LD_ADDR_VAR 0 61
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47252: LD_ADDR_VAR 0 62
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47340: LD_ADDR_VAR 0 63
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47428: LD_ADDR_VAR 0 64
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// end ; 1 :
47516: GO 53413
47518: LD_INT 1
47520: DOUBLE
47521: EQUAL
47522: IFTRUE 47526
47524: GO 50149
47526: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47527: LD_ADDR_VAR 0 11
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 3
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 2
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47571: LD_ADDR_VAR 0 12
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: LIST
47611: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47612: LD_ADDR_VAR 0 13
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: LD_INT 3
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 3
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47652: LD_ADDR_VAR 0 14
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 3
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47693: LD_ADDR_VAR 0 15
47697: PUSH
47698: LD_INT 2
47700: NEG
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47737: LD_ADDR_VAR 0 16
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 3
47756: NEG
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47783: LD_ADDR_VAR 0 17
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47827: LD_ADDR_VAR 0 18
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 3
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47868: LD_ADDR_VAR 0 19
47872: PUSH
47873: LD_INT 3
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47908: LD_ADDR_VAR 0 20
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 3
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47949: LD_ADDR_VAR 0 21
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: NEG
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47993: LD_ADDR_VAR 0 22
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 3
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 3
48024: NEG
48025: PUSH
48026: LD_INT 3
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48039: LD_ADDR_VAR 0 23
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 3
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 4
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48083: LD_ADDR_VAR 0 24
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 4
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: LIST
48123: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48124: LD_ADDR_VAR 0 25
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 4
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: PUSH
48152: LD_INT 4
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: LIST
48163: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48164: LD_ADDR_VAR 0 26
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 4
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48205: LD_ADDR_VAR 0 27
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 4
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48249: LD_ADDR_VAR 0 28
48253: PUSH
48254: LD_INT 3
48256: NEG
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 3
48268: NEG
48269: PUSH
48270: LD_INT 4
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 4
48280: NEG
48281: PUSH
48282: LD_INT 3
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48295: LD_ADDR_VAR 0 29
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 3
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 4
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 4
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 3
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 5
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 5
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 4
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 6
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 6
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 5
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48450: LD_ADDR_VAR 0 30
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 3
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 3
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 4
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 4
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 4
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 5
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 5
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 5
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 6
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 6
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48593: LD_ADDR_VAR 0 31
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 2
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 3
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 4
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 4
48640: PUSH
48641: LD_INT 4
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 3
48650: PUSH
48651: LD_INT 4
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 5
48660: PUSH
48661: LD_INT 4
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 5
48670: PUSH
48671: LD_INT 5
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 4
48680: PUSH
48681: LD_INT 5
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 6
48690: PUSH
48691: LD_INT 5
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 6
48700: PUSH
48701: LD_INT 6
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 5
48710: PUSH
48711: LD_INT 6
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48732: LD_ADDR_VAR 0 32
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 4
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 4
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 5
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 5
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 4
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 6
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 6
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 5
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48875: LD_ADDR_VAR 0 33
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 3
48893: NEG
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 4
48927: NEG
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 4
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 4
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 5
48961: NEG
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 5
48972: NEG
48973: PUSH
48974: LD_INT 1
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 5
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 6
48995: NEG
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 6
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49030: LD_ADDR_VAR 0 34
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 3
49049: NEG
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: NEG
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: LD_INT 4
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 4
49085: NEG
49086: PUSH
49087: LD_INT 3
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 4
49097: NEG
49098: PUSH
49099: LD_INT 4
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 4
49109: NEG
49110: PUSH
49111: LD_INT 5
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 5
49121: NEG
49122: PUSH
49123: LD_INT 4
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 5
49133: NEG
49134: PUSH
49135: LD_INT 5
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 5
49145: NEG
49146: PUSH
49147: LD_INT 6
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 6
49157: NEG
49158: PUSH
49159: LD_INT 5
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 6
49169: NEG
49170: PUSH
49171: LD_INT 6
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49193: LD_ADDR_VAR 0 41
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49237: LD_ADDR_VAR 0 42
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49278: LD_ADDR_VAR 0 43
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49318: LD_ADDR_VAR 0 44
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: LIST
49358: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49359: LD_ADDR_VAR 0 45
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49403: LD_ADDR_VAR 0 46
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 3
49434: NEG
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49449: LD_ADDR_VAR 0 47
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: LD_INT 3
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49482: LD_ADDR_VAR 0 48
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49513: LD_ADDR_VAR 0 49
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 3
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49542: LD_ADDR_VAR 0 50
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 1
49559: PUSH
49560: LD_INT 3
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49571: LD_ADDR_VAR 0 51
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49602: LD_ADDR_VAR 0 52
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 3
49621: NEG
49622: PUSH
49623: LD_INT 2
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49635: LD_ADDR_VAR 0 53
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 3
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49679: LD_ADDR_VAR 0 54
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 3
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49720: LD_ADDR_VAR 0 55
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 3
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49760: LD_ADDR_VAR 0 56
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 3
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 3
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49801: LD_ADDR_VAR 0 57
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49845: LD_ADDR_VAR 0 58
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 3
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 3
49876: NEG
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49891: LD_ADDR_VAR 0 59
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49935: LD_ADDR_VAR 0 60
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: LD_INT 1
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49976: LD_ADDR_VAR 0 61
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50016: LD_ADDR_VAR 0 62
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50057: LD_ADDR_VAR 0 63
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50101: LD_ADDR_VAR 0 64
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: LIST
50146: ST_TO_ADDR
// end ; 2 :
50147: GO 53413
50149: LD_INT 2
50151: DOUBLE
50152: EQUAL
50153: IFTRUE 50157
50155: GO 53412
50157: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50158: LD_ADDR_VAR 0 29
50162: PUSH
50163: LD_INT 4
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 4
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 5
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 5
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 4
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 3
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 5
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 3
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 4
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 4
50288: PUSH
50289: LD_INT 4
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: LD_INT 4
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: LD_INT 3
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 4
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 4
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 4
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 4
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 5
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 5
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 5
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 3
50441: NEG
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 4
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 4
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 4
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 4
50543: NEG
50544: PUSH
50545: LD_INT 4
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 4
50555: NEG
50556: PUSH
50557: LD_INT 5
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 3
50567: NEG
50568: PUSH
50569: LD_INT 4
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 3
50579: NEG
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 4
50591: NEG
50592: PUSH
50593: LD_INT 3
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 5
50603: NEG
50604: PUSH
50605: LD_INT 4
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 5
50615: NEG
50616: PUSH
50617: LD_INT 5
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: LD_INT 5
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 5
50639: NEG
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50696: LD_ADDR_VAR 0 30
50700: PUSH
50701: LD_INT 4
50703: PUSH
50704: LD_INT 4
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 4
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 5
50723: PUSH
50724: LD_INT 4
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 5
50733: PUSH
50734: LD_INT 5
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 4
50743: PUSH
50744: LD_INT 5
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: PUSH
50754: LD_INT 4
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 5
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: LD_INT 5
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: LD_INT 3
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 4
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 4
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 4
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 4
50886: NEG
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 4
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 4
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 5
50942: NEG
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 5
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 5
50965: NEG
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: LD_INT 4
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 4
51048: NEG
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 4
51060: NEG
51061: PUSH
51062: LD_INT 4
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: LD_INT 4
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 4
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 4
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 5
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 4
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 3
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 3
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 4
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 5
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 5
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51243: LD_ADDR_VAR 0 31
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 4
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: PUSH
51281: LD_INT 5
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 5
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 4
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 5
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: LD_INT 3
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: NEG
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 4
51399: NEG
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 4
51410: NEG
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 4
51422: NEG
51423: PUSH
51424: LD_INT 2
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 4
51445: NEG
51446: PUSH
51447: LD_INT 4
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 4
51457: NEG
51458: PUSH
51459: LD_INT 5
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: LD_INT 4
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 4
51493: NEG
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 5
51505: NEG
51506: PUSH
51507: LD_INT 4
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 5
51517: NEG
51518: PUSH
51519: LD_INT 5
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 3
51529: NEG
51530: PUSH
51531: LD_INT 5
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 5
51541: NEG
51542: PUSH
51543: LD_INT 3
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 3
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 4
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 3
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 4
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: LD_INT 4
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 4
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 4
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 5
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 5
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 4
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 5
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51793: LD_ADDR_VAR 0 32
51797: PUSH
51798: LD_INT 4
51800: NEG
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 4
51811: NEG
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 3
51834: NEG
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 4
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 5
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 5
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 5
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: NEG
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: NEG
51903: PUSH
51904: LD_INT 3
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: LD_INT 4
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: NEG
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 4
51962: NEG
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 4
51974: NEG
51975: PUSH
51976: LD_INT 4
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: LD_INT 4
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 4
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 4
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: LD_INT 5
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 4
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 3
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 3
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 4
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 5
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 3
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 5
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 3
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 4
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 4
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: LD_INT 4
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 4
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 5
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 5
52235: PUSH
52236: LD_INT 5
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 4
52245: PUSH
52246: LD_INT 5
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: LD_INT 4
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 5
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: LD_INT 5
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52340: LD_ADDR_VAR 0 33
52344: PUSH
52345: LD_INT 4
52347: NEG
52348: PUSH
52349: LD_INT 4
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 4
52359: NEG
52360: PUSH
52361: LD_INT 5
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: LD_INT 4
52375: NEG
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 4
52395: NEG
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 5
52407: NEG
52408: PUSH
52409: LD_INT 4
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 5
52419: NEG
52420: PUSH
52421: LD_INT 5
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 3
52431: NEG
52432: PUSH
52433: LD_INT 5
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 5
52443: NEG
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: LD_INT 4
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 4
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 4
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 4
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 4
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 5
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 5
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 4
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 3
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 5
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 4
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 4
52680: PUSH
52681: LD_INT 4
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 4
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: LD_INT 4
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 4
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: PUSH
52761: LD_INT 4
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 5
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 5
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 4
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 5
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 3
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52878: LD_ADDR_VAR 0 34
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 4
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 5
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: PUSH
52908: LD_INT 4
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 3
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 4
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 5
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: LD_INT 3
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 5
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 4
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 4
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 4
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 4
53080: PUSH
53081: LD_INT 4
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 4
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 5
53100: PUSH
53101: LD_INT 4
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 5
53110: PUSH
53111: LD_INT 5
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 4
53120: PUSH
53121: LD_INT 5
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 5
53150: PUSH
53151: LD_INT 3
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 5
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: LD_INT 2
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 4
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 4
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: LD_INT 4
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 4
53263: NEG
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 4
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 3
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 4
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 5
53319: NEG
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 5
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 5
53342: NEG
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: ST_TO_ADDR
// end ; end ;
53410: GO 53413
53412: POP
// case btype of b_depot , b_warehouse :
53413: LD_VAR 0 1
53417: PUSH
53418: LD_INT 0
53420: DOUBLE
53421: EQUAL
53422: IFTRUE 53432
53424: LD_INT 1
53426: DOUBLE
53427: EQUAL
53428: IFTRUE 53432
53430: GO 53633
53432: POP
// case nation of nation_american :
53433: LD_VAR 0 5
53437: PUSH
53438: LD_INT 1
53440: DOUBLE
53441: EQUAL
53442: IFTRUE 53446
53444: GO 53502
53446: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53447: LD_ADDR_VAR 0 9
53451: PUSH
53452: LD_VAR 0 11
53456: PUSH
53457: LD_VAR 0 12
53461: PUSH
53462: LD_VAR 0 13
53466: PUSH
53467: LD_VAR 0 14
53471: PUSH
53472: LD_VAR 0 15
53476: PUSH
53477: LD_VAR 0 16
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: PUSH
53490: LD_VAR 0 4
53494: PUSH
53495: LD_INT 1
53497: PLUS
53498: ARRAY
53499: ST_TO_ADDR
53500: GO 53631
53502: LD_INT 2
53504: DOUBLE
53505: EQUAL
53506: IFTRUE 53510
53508: GO 53566
53510: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53511: LD_ADDR_VAR 0 9
53515: PUSH
53516: LD_VAR 0 17
53520: PUSH
53521: LD_VAR 0 18
53525: PUSH
53526: LD_VAR 0 19
53530: PUSH
53531: LD_VAR 0 20
53535: PUSH
53536: LD_VAR 0 21
53540: PUSH
53541: LD_VAR 0 22
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: PUSH
53554: LD_VAR 0 4
53558: PUSH
53559: LD_INT 1
53561: PLUS
53562: ARRAY
53563: ST_TO_ADDR
53564: GO 53631
53566: LD_INT 3
53568: DOUBLE
53569: EQUAL
53570: IFTRUE 53574
53572: GO 53630
53574: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53575: LD_ADDR_VAR 0 9
53579: PUSH
53580: LD_VAR 0 23
53584: PUSH
53585: LD_VAR 0 24
53589: PUSH
53590: LD_VAR 0 25
53594: PUSH
53595: LD_VAR 0 26
53599: PUSH
53600: LD_VAR 0 27
53604: PUSH
53605: LD_VAR 0 28
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: PUSH
53618: LD_VAR 0 4
53622: PUSH
53623: LD_INT 1
53625: PLUS
53626: ARRAY
53627: ST_TO_ADDR
53628: GO 53631
53630: POP
53631: GO 54186
53633: LD_INT 2
53635: DOUBLE
53636: EQUAL
53637: IFTRUE 53647
53639: LD_INT 3
53641: DOUBLE
53642: EQUAL
53643: IFTRUE 53647
53645: GO 53703
53647: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53648: LD_ADDR_VAR 0 9
53652: PUSH
53653: LD_VAR 0 29
53657: PUSH
53658: LD_VAR 0 30
53662: PUSH
53663: LD_VAR 0 31
53667: PUSH
53668: LD_VAR 0 32
53672: PUSH
53673: LD_VAR 0 33
53677: PUSH
53678: LD_VAR 0 34
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: PUSH
53691: LD_VAR 0 4
53695: PUSH
53696: LD_INT 1
53698: PLUS
53699: ARRAY
53700: ST_TO_ADDR
53701: GO 54186
53703: LD_INT 16
53705: DOUBLE
53706: EQUAL
53707: IFTRUE 53765
53709: LD_INT 17
53711: DOUBLE
53712: EQUAL
53713: IFTRUE 53765
53715: LD_INT 18
53717: DOUBLE
53718: EQUAL
53719: IFTRUE 53765
53721: LD_INT 19
53723: DOUBLE
53724: EQUAL
53725: IFTRUE 53765
53727: LD_INT 22
53729: DOUBLE
53730: EQUAL
53731: IFTRUE 53765
53733: LD_INT 20
53735: DOUBLE
53736: EQUAL
53737: IFTRUE 53765
53739: LD_INT 21
53741: DOUBLE
53742: EQUAL
53743: IFTRUE 53765
53745: LD_INT 23
53747: DOUBLE
53748: EQUAL
53749: IFTRUE 53765
53751: LD_INT 24
53753: DOUBLE
53754: EQUAL
53755: IFTRUE 53765
53757: LD_INT 25
53759: DOUBLE
53760: EQUAL
53761: IFTRUE 53765
53763: GO 53821
53765: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53766: LD_ADDR_VAR 0 9
53770: PUSH
53771: LD_VAR 0 35
53775: PUSH
53776: LD_VAR 0 36
53780: PUSH
53781: LD_VAR 0 37
53785: PUSH
53786: LD_VAR 0 38
53790: PUSH
53791: LD_VAR 0 39
53795: PUSH
53796: LD_VAR 0 40
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: PUSH
53809: LD_VAR 0 4
53813: PUSH
53814: LD_INT 1
53816: PLUS
53817: ARRAY
53818: ST_TO_ADDR
53819: GO 54186
53821: LD_INT 6
53823: DOUBLE
53824: EQUAL
53825: IFTRUE 53877
53827: LD_INT 7
53829: DOUBLE
53830: EQUAL
53831: IFTRUE 53877
53833: LD_INT 8
53835: DOUBLE
53836: EQUAL
53837: IFTRUE 53877
53839: LD_INT 13
53841: DOUBLE
53842: EQUAL
53843: IFTRUE 53877
53845: LD_INT 12
53847: DOUBLE
53848: EQUAL
53849: IFTRUE 53877
53851: LD_INT 15
53853: DOUBLE
53854: EQUAL
53855: IFTRUE 53877
53857: LD_INT 11
53859: DOUBLE
53860: EQUAL
53861: IFTRUE 53877
53863: LD_INT 14
53865: DOUBLE
53866: EQUAL
53867: IFTRUE 53877
53869: LD_INT 10
53871: DOUBLE
53872: EQUAL
53873: IFTRUE 53877
53875: GO 53933
53877: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53878: LD_ADDR_VAR 0 9
53882: PUSH
53883: LD_VAR 0 41
53887: PUSH
53888: LD_VAR 0 42
53892: PUSH
53893: LD_VAR 0 43
53897: PUSH
53898: LD_VAR 0 44
53902: PUSH
53903: LD_VAR 0 45
53907: PUSH
53908: LD_VAR 0 46
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: PUSH
53921: LD_VAR 0 4
53925: PUSH
53926: LD_INT 1
53928: PLUS
53929: ARRAY
53930: ST_TO_ADDR
53931: GO 54186
53933: LD_INT 36
53935: DOUBLE
53936: EQUAL
53937: IFTRUE 53941
53939: GO 53997
53941: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53942: LD_ADDR_VAR 0 9
53946: PUSH
53947: LD_VAR 0 47
53951: PUSH
53952: LD_VAR 0 48
53956: PUSH
53957: LD_VAR 0 49
53961: PUSH
53962: LD_VAR 0 50
53966: PUSH
53967: LD_VAR 0 51
53971: PUSH
53972: LD_VAR 0 52
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: PUSH
53985: LD_VAR 0 4
53989: PUSH
53990: LD_INT 1
53992: PLUS
53993: ARRAY
53994: ST_TO_ADDR
53995: GO 54186
53997: LD_INT 4
53999: DOUBLE
54000: EQUAL
54001: IFTRUE 54023
54003: LD_INT 5
54005: DOUBLE
54006: EQUAL
54007: IFTRUE 54023
54009: LD_INT 34
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54023
54015: LD_INT 37
54017: DOUBLE
54018: EQUAL
54019: IFTRUE 54023
54021: GO 54079
54023: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54024: LD_ADDR_VAR 0 9
54028: PUSH
54029: LD_VAR 0 53
54033: PUSH
54034: LD_VAR 0 54
54038: PUSH
54039: LD_VAR 0 55
54043: PUSH
54044: LD_VAR 0 56
54048: PUSH
54049: LD_VAR 0 57
54053: PUSH
54054: LD_VAR 0 58
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: PUSH
54067: LD_VAR 0 4
54071: PUSH
54072: LD_INT 1
54074: PLUS
54075: ARRAY
54076: ST_TO_ADDR
54077: GO 54186
54079: LD_INT 31
54081: DOUBLE
54082: EQUAL
54083: IFTRUE 54129
54085: LD_INT 32
54087: DOUBLE
54088: EQUAL
54089: IFTRUE 54129
54091: LD_INT 33
54093: DOUBLE
54094: EQUAL
54095: IFTRUE 54129
54097: LD_INT 27
54099: DOUBLE
54100: EQUAL
54101: IFTRUE 54129
54103: LD_INT 26
54105: DOUBLE
54106: EQUAL
54107: IFTRUE 54129
54109: LD_INT 28
54111: DOUBLE
54112: EQUAL
54113: IFTRUE 54129
54115: LD_INT 29
54117: DOUBLE
54118: EQUAL
54119: IFTRUE 54129
54121: LD_INT 30
54123: DOUBLE
54124: EQUAL
54125: IFTRUE 54129
54127: GO 54185
54129: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54130: LD_ADDR_VAR 0 9
54134: PUSH
54135: LD_VAR 0 59
54139: PUSH
54140: LD_VAR 0 60
54144: PUSH
54145: LD_VAR 0 61
54149: PUSH
54150: LD_VAR 0 62
54154: PUSH
54155: LD_VAR 0 63
54159: PUSH
54160: LD_VAR 0 64
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: PUSH
54173: LD_VAR 0 4
54177: PUSH
54178: LD_INT 1
54180: PLUS
54181: ARRAY
54182: ST_TO_ADDR
54183: GO 54186
54185: POP
// temp_list2 = [ ] ;
54186: LD_ADDR_VAR 0 10
54190: PUSH
54191: EMPTY
54192: ST_TO_ADDR
// for i in temp_list do
54193: LD_ADDR_VAR 0 8
54197: PUSH
54198: LD_VAR 0 9
54202: PUSH
54203: FOR_IN
54204: IFFALSE 54256
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54206: LD_ADDR_VAR 0 10
54210: PUSH
54211: LD_VAR 0 10
54215: PUSH
54216: LD_VAR 0 8
54220: PUSH
54221: LD_INT 1
54223: ARRAY
54224: PUSH
54225: LD_VAR 0 2
54229: PLUS
54230: PUSH
54231: LD_VAR 0 8
54235: PUSH
54236: LD_INT 2
54238: ARRAY
54239: PUSH
54240: LD_VAR 0 3
54244: PLUS
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: ADD
54253: ST_TO_ADDR
54254: GO 54203
54256: POP
54257: POP
// result = temp_list2 ;
54258: LD_ADDR_VAR 0 7
54262: PUSH
54263: LD_VAR 0 10
54267: ST_TO_ADDR
// end ;
54268: LD_VAR 0 7
54272: RET
// export function EnemyInRange ( unit , dist ) ; begin
54273: LD_INT 0
54275: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54276: LD_ADDR_VAR 0 3
54280: PUSH
54281: LD_VAR 0 1
54285: PPUSH
54286: CALL_OW 255
54290: PPUSH
54291: LD_VAR 0 1
54295: PPUSH
54296: CALL_OW 250
54300: PPUSH
54301: LD_VAR 0 1
54305: PPUSH
54306: CALL_OW 251
54310: PPUSH
54311: LD_VAR 0 2
54315: PPUSH
54316: CALL 27530 0 4
54320: PUSH
54321: LD_INT 4
54323: ARRAY
54324: ST_TO_ADDR
// end ;
54325: LD_VAR 0 3
54329: RET
// export function PlayerSeeMe ( unit ) ; begin
54330: LD_INT 0
54332: PPUSH
// result := See ( your_side , unit ) ;
54333: LD_ADDR_VAR 0 2
54337: PUSH
54338: LD_OWVAR 2
54342: PPUSH
54343: LD_VAR 0 1
54347: PPUSH
54348: CALL_OW 292
54352: ST_TO_ADDR
// end ;
54353: LD_VAR 0 2
54357: RET
// export function ReverseDir ( unit ) ; begin
54358: LD_INT 0
54360: PPUSH
// if not unit then
54361: LD_VAR 0 1
54365: NOT
54366: IFFALSE 54370
// exit ;
54368: GO 54393
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54370: LD_ADDR_VAR 0 2
54374: PUSH
54375: LD_VAR 0 1
54379: PPUSH
54380: CALL_OW 254
54384: PUSH
54385: LD_INT 3
54387: PLUS
54388: PUSH
54389: LD_INT 6
54391: MOD
54392: ST_TO_ADDR
// end ;
54393: LD_VAR 0 2
54397: RET
// export function ReverseArray ( array ) ; var i ; begin
54398: LD_INT 0
54400: PPUSH
54401: PPUSH
// if not array then
54402: LD_VAR 0 1
54406: NOT
54407: IFFALSE 54411
// exit ;
54409: GO 54466
// result := [ ] ;
54411: LD_ADDR_VAR 0 2
54415: PUSH
54416: EMPTY
54417: ST_TO_ADDR
// for i := array downto 1 do
54418: LD_ADDR_VAR 0 3
54422: PUSH
54423: DOUBLE
54424: LD_VAR 0 1
54428: INC
54429: ST_TO_ADDR
54430: LD_INT 1
54432: PUSH
54433: FOR_DOWNTO
54434: IFFALSE 54464
// result := Join ( result , array [ i ] ) ;
54436: LD_ADDR_VAR 0 2
54440: PUSH
54441: LD_VAR 0 2
54445: PPUSH
54446: LD_VAR 0 1
54450: PUSH
54451: LD_VAR 0 3
54455: ARRAY
54456: PPUSH
54457: CALL 59308 0 2
54461: ST_TO_ADDR
54462: GO 54433
54464: POP
54465: POP
// end ;
54466: LD_VAR 0 2
54470: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54471: LD_INT 0
54473: PPUSH
54474: PPUSH
54475: PPUSH
54476: PPUSH
54477: PPUSH
54478: PPUSH
// if not unit or not hexes then
54479: LD_VAR 0 1
54483: NOT
54484: IFTRUE 54493
54486: PUSH
54487: LD_VAR 0 2
54491: NOT
54492: OR
54493: IFFALSE 54497
// exit ;
54495: GO 54620
// dist := 9999 ;
54497: LD_ADDR_VAR 0 5
54501: PUSH
54502: LD_INT 9999
54504: ST_TO_ADDR
// for i = 1 to hexes do
54505: LD_ADDR_VAR 0 4
54509: PUSH
54510: DOUBLE
54511: LD_INT 1
54513: DEC
54514: ST_TO_ADDR
54515: LD_VAR 0 2
54519: PUSH
54520: FOR_TO
54521: IFFALSE 54608
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54523: LD_ADDR_VAR 0 6
54527: PUSH
54528: LD_VAR 0 1
54532: PPUSH
54533: LD_VAR 0 2
54537: PUSH
54538: LD_VAR 0 4
54542: ARRAY
54543: PUSH
54544: LD_INT 1
54546: ARRAY
54547: PPUSH
54548: LD_VAR 0 2
54552: PUSH
54553: LD_VAR 0 4
54557: ARRAY
54558: PUSH
54559: LD_INT 2
54561: ARRAY
54562: PPUSH
54563: CALL_OW 297
54567: ST_TO_ADDR
// if tdist < dist then
54568: LD_VAR 0 6
54572: PUSH
54573: LD_VAR 0 5
54577: LESS
54578: IFFALSE 54606
// begin hex := hexes [ i ] ;
54580: LD_ADDR_VAR 0 8
54584: PUSH
54585: LD_VAR 0 2
54589: PUSH
54590: LD_VAR 0 4
54594: ARRAY
54595: ST_TO_ADDR
// dist := tdist ;
54596: LD_ADDR_VAR 0 5
54600: PUSH
54601: LD_VAR 0 6
54605: ST_TO_ADDR
// end ; end ;
54606: GO 54520
54608: POP
54609: POP
// result := hex ;
54610: LD_ADDR_VAR 0 3
54614: PUSH
54615: LD_VAR 0 8
54619: ST_TO_ADDR
// end ;
54620: LD_VAR 0 3
54624: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54625: LD_INT 0
54627: PPUSH
54628: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54629: LD_VAR 0 1
54633: NOT
54634: IFTRUE 54673
54636: PUSH
54637: LD_VAR 0 1
54641: PUSH
54642: LD_INT 21
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 23
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PPUSH
54666: CALL_OW 69
54670: IN
54671: NOT
54672: OR
54673: IFFALSE 54677
// exit ;
54675: GO 54724
// for i = 1 to 3 do
54677: LD_ADDR_VAR 0 3
54681: PUSH
54682: DOUBLE
54683: LD_INT 1
54685: DEC
54686: ST_TO_ADDR
54687: LD_INT 3
54689: PUSH
54690: FOR_TO
54691: IFFALSE 54722
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54693: LD_VAR 0 1
54697: PPUSH
54698: CALL_OW 250
54702: PPUSH
54703: LD_VAR 0 1
54707: PPUSH
54708: CALL_OW 251
54712: PPUSH
54713: LD_INT 1
54715: PPUSH
54716: CALL_OW 453
54720: GO 54690
54722: POP
54723: POP
// end ;
54724: LD_VAR 0 2
54728: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54729: LD_INT 0
54731: PPUSH
54732: PPUSH
54733: PPUSH
54734: PPUSH
54735: PPUSH
54736: PPUSH
// if not unit or not enemy_unit then
54737: LD_VAR 0 1
54741: NOT
54742: IFTRUE 54751
54744: PUSH
54745: LD_VAR 0 2
54749: NOT
54750: OR
54751: IFFALSE 54755
// exit ;
54753: GO 55226
// if GetLives ( i ) < 250 then
54755: LD_VAR 0 4
54759: PPUSH
54760: CALL_OW 256
54764: PUSH
54765: LD_INT 250
54767: LESS
54768: IFFALSE 54781
// begin ComAutodestruct ( i ) ;
54770: LD_VAR 0 4
54774: PPUSH
54775: CALL 54625 0 1
// exit ;
54779: GO 55226
// end ; x := GetX ( enemy_unit ) ;
54781: LD_ADDR_VAR 0 7
54785: PUSH
54786: LD_VAR 0 2
54790: PPUSH
54791: CALL_OW 250
54795: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54796: LD_ADDR_VAR 0 8
54800: PUSH
54801: LD_VAR 0 2
54805: PPUSH
54806: CALL_OW 251
54810: ST_TO_ADDR
// if not x or not y then
54811: LD_VAR 0 7
54815: NOT
54816: IFTRUE 54825
54818: PUSH
54819: LD_VAR 0 8
54823: NOT
54824: OR
54825: IFFALSE 54829
// exit ;
54827: GO 55226
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54829: LD_ADDR_VAR 0 6
54833: PUSH
54834: LD_VAR 0 7
54838: PPUSH
54839: LD_INT 0
54841: PPUSH
54842: LD_INT 4
54844: PPUSH
54845: CALL_OW 272
54849: PUSH
54850: LD_VAR 0 8
54854: PPUSH
54855: LD_INT 0
54857: PPUSH
54858: LD_INT 4
54860: PPUSH
54861: CALL_OW 273
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_VAR 0 7
54874: PPUSH
54875: LD_INT 1
54877: PPUSH
54878: LD_INT 4
54880: PPUSH
54881: CALL_OW 272
54885: PUSH
54886: LD_VAR 0 8
54890: PPUSH
54891: LD_INT 1
54893: PPUSH
54894: LD_INT 4
54896: PPUSH
54897: CALL_OW 273
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_VAR 0 7
54910: PPUSH
54911: LD_INT 2
54913: PPUSH
54914: LD_INT 4
54916: PPUSH
54917: CALL_OW 272
54921: PUSH
54922: LD_VAR 0 8
54926: PPUSH
54927: LD_INT 2
54929: PPUSH
54930: LD_INT 4
54932: PPUSH
54933: CALL_OW 273
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_VAR 0 7
54946: PPUSH
54947: LD_INT 3
54949: PPUSH
54950: LD_INT 4
54952: PPUSH
54953: CALL_OW 272
54957: PUSH
54958: LD_VAR 0 8
54962: PPUSH
54963: LD_INT 3
54965: PPUSH
54966: LD_INT 4
54968: PPUSH
54969: CALL_OW 273
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_VAR 0 7
54982: PPUSH
54983: LD_INT 4
54985: PPUSH
54986: LD_INT 4
54988: PPUSH
54989: CALL_OW 272
54993: PUSH
54994: LD_VAR 0 8
54998: PPUSH
54999: LD_INT 4
55001: PPUSH
55002: LD_INT 4
55004: PPUSH
55005: CALL_OW 273
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_VAR 0 7
55018: PPUSH
55019: LD_INT 5
55021: PPUSH
55022: LD_INT 4
55024: PPUSH
55025: CALL_OW 272
55029: PUSH
55030: LD_VAR 0 8
55034: PPUSH
55035: LD_INT 5
55037: PPUSH
55038: LD_INT 4
55040: PPUSH
55041: CALL_OW 273
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: ST_TO_ADDR
// for i = tmp downto 1 do
55058: LD_ADDR_VAR 0 4
55062: PUSH
55063: DOUBLE
55064: LD_VAR 0 6
55068: INC
55069: ST_TO_ADDR
55070: LD_INT 1
55072: PUSH
55073: FOR_DOWNTO
55074: IFFALSE 55177
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55076: LD_VAR 0 6
55080: PUSH
55081: LD_VAR 0 4
55085: ARRAY
55086: PUSH
55087: LD_INT 1
55089: ARRAY
55090: PPUSH
55091: LD_VAR 0 6
55095: PUSH
55096: LD_VAR 0 4
55100: ARRAY
55101: PUSH
55102: LD_INT 2
55104: ARRAY
55105: PPUSH
55106: CALL_OW 488
55110: NOT
55111: IFTRUE 55153
55113: PUSH
55114: LD_VAR 0 6
55118: PUSH
55119: LD_VAR 0 4
55123: ARRAY
55124: PUSH
55125: LD_INT 1
55127: ARRAY
55128: PPUSH
55129: LD_VAR 0 6
55133: PUSH
55134: LD_VAR 0 4
55138: ARRAY
55139: PUSH
55140: LD_INT 2
55142: ARRAY
55143: PPUSH
55144: CALL_OW 428
55148: PUSH
55149: LD_INT 0
55151: NONEQUAL
55152: OR
55153: IFFALSE 55175
// tmp := Delete ( tmp , i ) ;
55155: LD_ADDR_VAR 0 6
55159: PUSH
55160: LD_VAR 0 6
55164: PPUSH
55165: LD_VAR 0 4
55169: PPUSH
55170: CALL_OW 3
55174: ST_TO_ADDR
55175: GO 55073
55177: POP
55178: POP
// j := GetClosestHex ( unit , tmp ) ;
55179: LD_ADDR_VAR 0 5
55183: PUSH
55184: LD_VAR 0 1
55188: PPUSH
55189: LD_VAR 0 6
55193: PPUSH
55194: CALL 54471 0 2
55198: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55199: LD_VAR 0 1
55203: PPUSH
55204: LD_VAR 0 5
55208: PUSH
55209: LD_INT 1
55211: ARRAY
55212: PPUSH
55213: LD_VAR 0 5
55217: PUSH
55218: LD_INT 2
55220: ARRAY
55221: PPUSH
55222: CALL_OW 111
// end ;
55226: LD_VAR 0 3
55230: RET
// export function PrepareApemanSoldier ( ) ; begin
55231: LD_INT 0
55233: PPUSH
// uc_nation := 0 ;
55234: LD_ADDR_OWVAR 21
55238: PUSH
55239: LD_INT 0
55241: ST_TO_ADDR
// hc_sex := sex_male ;
55242: LD_ADDR_OWVAR 27
55246: PUSH
55247: LD_INT 1
55249: ST_TO_ADDR
// hc_name :=  ;
55250: LD_ADDR_OWVAR 26
55254: PUSH
55255: LD_STRING 
55257: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55258: LD_ADDR_OWVAR 28
55262: PUSH
55263: LD_INT 15
55265: ST_TO_ADDR
// hc_gallery :=  ;
55266: LD_ADDR_OWVAR 33
55270: PUSH
55271: LD_STRING 
55273: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55274: LD_ADDR_OWVAR 31
55278: PUSH
55279: LD_INT 0
55281: PPUSH
55282: LD_INT 3
55284: PPUSH
55285: CALL_OW 12
55289: PUSH
55290: LD_INT 0
55292: PPUSH
55293: LD_INT 3
55295: PPUSH
55296: CALL_OW 12
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55313: LD_ADDR_OWVAR 29
55317: PUSH
55318: LD_INT 12
55320: PUSH
55321: LD_INT 12
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: ST_TO_ADDR
// end ;
55328: LD_VAR 0 1
55332: RET
// export function PrepareApemanEngineer ( ) ; begin
55333: LD_INT 0
55335: PPUSH
// uc_nation := 0 ;
55336: LD_ADDR_OWVAR 21
55340: PUSH
55341: LD_INT 0
55343: ST_TO_ADDR
// hc_sex := sex_male ;
55344: LD_ADDR_OWVAR 27
55348: PUSH
55349: LD_INT 1
55351: ST_TO_ADDR
// hc_name :=  ;
55352: LD_ADDR_OWVAR 26
55356: PUSH
55357: LD_STRING 
55359: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55360: LD_ADDR_OWVAR 28
55364: PUSH
55365: LD_INT 16
55367: ST_TO_ADDR
// hc_gallery :=  ;
55368: LD_ADDR_OWVAR 33
55372: PUSH
55373: LD_STRING 
55375: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55376: LD_ADDR_OWVAR 31
55380: PUSH
55381: LD_INT 0
55383: PPUSH
55384: LD_INT 3
55386: PPUSH
55387: CALL_OW 12
55391: PUSH
55392: LD_INT 0
55394: PPUSH
55395: LD_INT 3
55397: PPUSH
55398: CALL_OW 12
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55415: LD_ADDR_OWVAR 29
55419: PUSH
55420: LD_INT 12
55422: PUSH
55423: LD_INT 12
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: ST_TO_ADDR
// end ;
55430: LD_VAR 0 1
55434: RET
// export function PrepareApeman ( agressivity ) ; begin
55435: LD_INT 0
55437: PPUSH
// uc_side := 0 ;
55438: LD_ADDR_OWVAR 20
55442: PUSH
55443: LD_INT 0
55445: ST_TO_ADDR
// uc_nation := 0 ;
55446: LD_ADDR_OWVAR 21
55450: PUSH
55451: LD_INT 0
55453: ST_TO_ADDR
// hc_sex := sex_male ;
55454: LD_ADDR_OWVAR 27
55458: PUSH
55459: LD_INT 1
55461: ST_TO_ADDR
// hc_class := class_apeman ;
55462: LD_ADDR_OWVAR 28
55466: PUSH
55467: LD_INT 12
55469: ST_TO_ADDR
// hc_gallery :=  ;
55470: LD_ADDR_OWVAR 33
55474: PUSH
55475: LD_STRING 
55477: ST_TO_ADDR
// hc_name :=  ;
55478: LD_ADDR_OWVAR 26
55482: PUSH
55483: LD_STRING 
55485: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55486: LD_ADDR_OWVAR 29
55490: PUSH
55491: LD_INT 12
55493: PUSH
55494: LD_INT 12
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: ST_TO_ADDR
// if agressivity = 0 then
55501: LD_VAR 0 1
55505: PUSH
55506: LD_INT 0
55508: EQUAL
55509: IFFALSE 55521
// hc_agressivity := 0 else
55511: LD_ADDR_OWVAR 35
55515: PUSH
55516: LD_INT 0
55518: ST_TO_ADDR
55519: GO 55542
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55521: LD_ADDR_OWVAR 35
55525: PUSH
55526: LD_VAR 0 1
55530: NEG
55531: PPUSH
55532: LD_VAR 0 1
55536: PPUSH
55537: CALL_OW 12
55541: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55542: LD_ADDR_OWVAR 31
55546: PUSH
55547: LD_INT 0
55549: PPUSH
55550: LD_INT 3
55552: PPUSH
55553: CALL_OW 12
55557: PUSH
55558: LD_INT 0
55560: PPUSH
55561: LD_INT 3
55563: PPUSH
55564: CALL_OW 12
55568: PUSH
55569: LD_INT 0
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: ST_TO_ADDR
// end ;
55581: LD_VAR 0 2
55585: RET
// export function PrepareTiger ( agressivity ) ; begin
55586: LD_INT 0
55588: PPUSH
// uc_side := 0 ;
55589: LD_ADDR_OWVAR 20
55593: PUSH
55594: LD_INT 0
55596: ST_TO_ADDR
// uc_nation := 0 ;
55597: LD_ADDR_OWVAR 21
55601: PUSH
55602: LD_INT 0
55604: ST_TO_ADDR
// InitHc ;
55605: CALL_OW 19
// hc_class := class_tiger ;
55609: LD_ADDR_OWVAR 28
55613: PUSH
55614: LD_INT 14
55616: ST_TO_ADDR
// hc_gallery :=  ;
55617: LD_ADDR_OWVAR 33
55621: PUSH
55622: LD_STRING 
55624: ST_TO_ADDR
// hc_name :=  ;
55625: LD_ADDR_OWVAR 26
55629: PUSH
55630: LD_STRING 
55632: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55633: LD_ADDR_OWVAR 35
55637: PUSH
55638: LD_VAR 0 1
55642: NEG
55643: PPUSH
55644: LD_VAR 0 1
55648: PPUSH
55649: CALL_OW 12
55653: ST_TO_ADDR
// end ;
55654: LD_VAR 0 2
55658: RET
// export function PrepareEnchidna ( ) ; begin
55659: LD_INT 0
55661: PPUSH
// uc_side := 0 ;
55662: LD_ADDR_OWVAR 20
55666: PUSH
55667: LD_INT 0
55669: ST_TO_ADDR
// uc_nation := 0 ;
55670: LD_ADDR_OWVAR 21
55674: PUSH
55675: LD_INT 0
55677: ST_TO_ADDR
// InitHc ;
55678: CALL_OW 19
// hc_class := class_baggie ;
55682: LD_ADDR_OWVAR 28
55686: PUSH
55687: LD_INT 13
55689: ST_TO_ADDR
// hc_gallery :=  ;
55690: LD_ADDR_OWVAR 33
55694: PUSH
55695: LD_STRING 
55697: ST_TO_ADDR
// hc_name :=  ;
55698: LD_ADDR_OWVAR 26
55702: PUSH
55703: LD_STRING 
55705: ST_TO_ADDR
// end ;
55706: LD_VAR 0 1
55710: RET
// export function PrepareFrog ( ) ; begin
55711: LD_INT 0
55713: PPUSH
// uc_side := 0 ;
55714: LD_ADDR_OWVAR 20
55718: PUSH
55719: LD_INT 0
55721: ST_TO_ADDR
// uc_nation := 0 ;
55722: LD_ADDR_OWVAR 21
55726: PUSH
55727: LD_INT 0
55729: ST_TO_ADDR
// InitHc ;
55730: CALL_OW 19
// hc_class := class_frog ;
55734: LD_ADDR_OWVAR 28
55738: PUSH
55739: LD_INT 19
55741: ST_TO_ADDR
// hc_gallery :=  ;
55742: LD_ADDR_OWVAR 33
55746: PUSH
55747: LD_STRING 
55749: ST_TO_ADDR
// hc_name :=  ;
55750: LD_ADDR_OWVAR 26
55754: PUSH
55755: LD_STRING 
55757: ST_TO_ADDR
// end ;
55758: LD_VAR 0 1
55762: RET
// export function PrepareFish ( ) ; begin
55763: LD_INT 0
55765: PPUSH
// uc_side := 0 ;
55766: LD_ADDR_OWVAR 20
55770: PUSH
55771: LD_INT 0
55773: ST_TO_ADDR
// uc_nation := 0 ;
55774: LD_ADDR_OWVAR 21
55778: PUSH
55779: LD_INT 0
55781: ST_TO_ADDR
// InitHc ;
55782: CALL_OW 19
// hc_class := class_fish ;
55786: LD_ADDR_OWVAR 28
55790: PUSH
55791: LD_INT 20
55793: ST_TO_ADDR
// hc_gallery :=  ;
55794: LD_ADDR_OWVAR 33
55798: PUSH
55799: LD_STRING 
55801: ST_TO_ADDR
// hc_name :=  ;
55802: LD_ADDR_OWVAR 26
55806: PUSH
55807: LD_STRING 
55809: ST_TO_ADDR
// end ;
55810: LD_VAR 0 1
55814: RET
// export function PrepareBird ( ) ; begin
55815: LD_INT 0
55817: PPUSH
// uc_side := 0 ;
55818: LD_ADDR_OWVAR 20
55822: PUSH
55823: LD_INT 0
55825: ST_TO_ADDR
// uc_nation := 0 ;
55826: LD_ADDR_OWVAR 21
55830: PUSH
55831: LD_INT 0
55833: ST_TO_ADDR
// InitHc ;
55834: CALL_OW 19
// hc_class := class_phororhacos ;
55838: LD_ADDR_OWVAR 28
55842: PUSH
55843: LD_INT 18
55845: ST_TO_ADDR
// hc_gallery :=  ;
55846: LD_ADDR_OWVAR 33
55850: PUSH
55851: LD_STRING 
55853: ST_TO_ADDR
// hc_name :=  ;
55854: LD_ADDR_OWVAR 26
55858: PUSH
55859: LD_STRING 
55861: ST_TO_ADDR
// end ;
55862: LD_VAR 0 1
55866: RET
// export function PrepareHorse ( ) ; begin
55867: LD_INT 0
55869: PPUSH
// uc_side := 0 ;
55870: LD_ADDR_OWVAR 20
55874: PUSH
55875: LD_INT 0
55877: ST_TO_ADDR
// uc_nation := 0 ;
55878: LD_ADDR_OWVAR 21
55882: PUSH
55883: LD_INT 0
55885: ST_TO_ADDR
// InitHc ;
55886: CALL_OW 19
// hc_class := class_horse ;
55890: LD_ADDR_OWVAR 28
55894: PUSH
55895: LD_INT 21
55897: ST_TO_ADDR
// hc_gallery :=  ;
55898: LD_ADDR_OWVAR 33
55902: PUSH
55903: LD_STRING 
55905: ST_TO_ADDR
// hc_name :=  ;
55906: LD_ADDR_OWVAR 26
55910: PUSH
55911: LD_STRING 
55913: ST_TO_ADDR
// end ;
55914: LD_VAR 0 1
55918: RET
// export function PrepareMastodont ( ) ; begin
55919: LD_INT 0
55921: PPUSH
// uc_side := 0 ;
55922: LD_ADDR_OWVAR 20
55926: PUSH
55927: LD_INT 0
55929: ST_TO_ADDR
// uc_nation := 0 ;
55930: LD_ADDR_OWVAR 21
55934: PUSH
55935: LD_INT 0
55937: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55938: LD_ADDR_OWVAR 37
55942: PUSH
55943: LD_INT 31
55945: ST_TO_ADDR
// vc_control := control_rider ;
55946: LD_ADDR_OWVAR 38
55950: PUSH
55951: LD_INT 4
55953: ST_TO_ADDR
// end ;
55954: LD_VAR 0 1
55958: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55959: LD_INT 0
55961: PPUSH
55962: PPUSH
55963: PPUSH
// uc_side = 0 ;
55964: LD_ADDR_OWVAR 20
55968: PUSH
55969: LD_INT 0
55971: ST_TO_ADDR
// uc_nation = 0 ;
55972: LD_ADDR_OWVAR 21
55976: PUSH
55977: LD_INT 0
55979: ST_TO_ADDR
// InitHc_All ( ) ;
55980: CALL_OW 584
// InitVc ;
55984: CALL_OW 20
// if mastodonts then
55988: LD_VAR 0 6
55992: IFFALSE 56059
// for i = 1 to mastodonts do
55994: LD_ADDR_VAR 0 11
55998: PUSH
55999: DOUBLE
56000: LD_INT 1
56002: DEC
56003: ST_TO_ADDR
56004: LD_VAR 0 6
56008: PUSH
56009: FOR_TO
56010: IFFALSE 56057
// begin vc_chassis := 31 ;
56012: LD_ADDR_OWVAR 37
56016: PUSH
56017: LD_INT 31
56019: ST_TO_ADDR
// vc_control := control_rider ;
56020: LD_ADDR_OWVAR 38
56024: PUSH
56025: LD_INT 4
56027: ST_TO_ADDR
// animal := CreateVehicle ;
56028: LD_ADDR_VAR 0 12
56032: PUSH
56033: CALL_OW 45
56037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56038: LD_VAR 0 12
56042: PPUSH
56043: LD_VAR 0 8
56047: PPUSH
56048: LD_INT 0
56050: PPUSH
56051: CALL 58201 0 3
// end ;
56055: GO 56009
56057: POP
56058: POP
// if horses then
56059: LD_VAR 0 5
56063: IFFALSE 56130
// for i = 1 to horses do
56065: LD_ADDR_VAR 0 11
56069: PUSH
56070: DOUBLE
56071: LD_INT 1
56073: DEC
56074: ST_TO_ADDR
56075: LD_VAR 0 5
56079: PUSH
56080: FOR_TO
56081: IFFALSE 56128
// begin hc_class := 21 ;
56083: LD_ADDR_OWVAR 28
56087: PUSH
56088: LD_INT 21
56090: ST_TO_ADDR
// hc_gallery :=  ;
56091: LD_ADDR_OWVAR 33
56095: PUSH
56096: LD_STRING 
56098: ST_TO_ADDR
// animal := CreateHuman ;
56099: LD_ADDR_VAR 0 12
56103: PUSH
56104: CALL_OW 44
56108: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56109: LD_VAR 0 12
56113: PPUSH
56114: LD_VAR 0 8
56118: PPUSH
56119: LD_INT 0
56121: PPUSH
56122: CALL 58201 0 3
// end ;
56126: GO 56080
56128: POP
56129: POP
// if birds then
56130: LD_VAR 0 1
56134: IFFALSE 56201
// for i = 1 to birds do
56136: LD_ADDR_VAR 0 11
56140: PUSH
56141: DOUBLE
56142: LD_INT 1
56144: DEC
56145: ST_TO_ADDR
56146: LD_VAR 0 1
56150: PUSH
56151: FOR_TO
56152: IFFALSE 56199
// begin hc_class := 18 ;
56154: LD_ADDR_OWVAR 28
56158: PUSH
56159: LD_INT 18
56161: ST_TO_ADDR
// hc_gallery =  ;
56162: LD_ADDR_OWVAR 33
56166: PUSH
56167: LD_STRING 
56169: ST_TO_ADDR
// animal := CreateHuman ;
56170: LD_ADDR_VAR 0 12
56174: PUSH
56175: CALL_OW 44
56179: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56180: LD_VAR 0 12
56184: PPUSH
56185: LD_VAR 0 8
56189: PPUSH
56190: LD_INT 0
56192: PPUSH
56193: CALL 58201 0 3
// end ;
56197: GO 56151
56199: POP
56200: POP
// if tigers then
56201: LD_VAR 0 2
56205: IFFALSE 56289
// for i = 1 to tigers do
56207: LD_ADDR_VAR 0 11
56211: PUSH
56212: DOUBLE
56213: LD_INT 1
56215: DEC
56216: ST_TO_ADDR
56217: LD_VAR 0 2
56221: PUSH
56222: FOR_TO
56223: IFFALSE 56287
// begin hc_class = class_tiger ;
56225: LD_ADDR_OWVAR 28
56229: PUSH
56230: LD_INT 14
56232: ST_TO_ADDR
// hc_gallery =  ;
56233: LD_ADDR_OWVAR 33
56237: PUSH
56238: LD_STRING 
56240: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56241: LD_ADDR_OWVAR 35
56245: PUSH
56246: LD_INT 7
56248: NEG
56249: PPUSH
56250: LD_INT 7
56252: PPUSH
56253: CALL_OW 12
56257: ST_TO_ADDR
// animal := CreateHuman ;
56258: LD_ADDR_VAR 0 12
56262: PUSH
56263: CALL_OW 44
56267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56268: LD_VAR 0 12
56272: PPUSH
56273: LD_VAR 0 8
56277: PPUSH
56278: LD_INT 0
56280: PPUSH
56281: CALL 58201 0 3
// end ;
56285: GO 56222
56287: POP
56288: POP
// if apemans then
56289: LD_VAR 0 3
56293: IFFALSE 56416
// for i = 1 to apemans do
56295: LD_ADDR_VAR 0 11
56299: PUSH
56300: DOUBLE
56301: LD_INT 1
56303: DEC
56304: ST_TO_ADDR
56305: LD_VAR 0 3
56309: PUSH
56310: FOR_TO
56311: IFFALSE 56414
// begin hc_class = class_apeman ;
56313: LD_ADDR_OWVAR 28
56317: PUSH
56318: LD_INT 12
56320: ST_TO_ADDR
// hc_gallery =  ;
56321: LD_ADDR_OWVAR 33
56325: PUSH
56326: LD_STRING 
56328: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56329: LD_ADDR_OWVAR 35
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PPUSH
56338: LD_INT 2
56340: PPUSH
56341: CALL_OW 12
56345: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56346: LD_ADDR_OWVAR 31
56350: PUSH
56351: LD_INT 1
56353: PPUSH
56354: LD_INT 3
56356: PPUSH
56357: CALL_OW 12
56361: PUSH
56362: LD_INT 1
56364: PPUSH
56365: LD_INT 3
56367: PPUSH
56368: CALL_OW 12
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: ST_TO_ADDR
// animal := CreateHuman ;
56385: LD_ADDR_VAR 0 12
56389: PUSH
56390: CALL_OW 44
56394: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56395: LD_VAR 0 12
56399: PPUSH
56400: LD_VAR 0 8
56404: PPUSH
56405: LD_INT 0
56407: PPUSH
56408: CALL 58201 0 3
// end ;
56412: GO 56310
56414: POP
56415: POP
// if enchidnas then
56416: LD_VAR 0 4
56420: IFFALSE 56487
// for i = 1 to enchidnas do
56422: LD_ADDR_VAR 0 11
56426: PUSH
56427: DOUBLE
56428: LD_INT 1
56430: DEC
56431: ST_TO_ADDR
56432: LD_VAR 0 4
56436: PUSH
56437: FOR_TO
56438: IFFALSE 56485
// begin hc_class = 13 ;
56440: LD_ADDR_OWVAR 28
56444: PUSH
56445: LD_INT 13
56447: ST_TO_ADDR
// hc_gallery =  ;
56448: LD_ADDR_OWVAR 33
56452: PUSH
56453: LD_STRING 
56455: ST_TO_ADDR
// animal := CreateHuman ;
56456: LD_ADDR_VAR 0 12
56460: PUSH
56461: CALL_OW 44
56465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56466: LD_VAR 0 12
56470: PPUSH
56471: LD_VAR 0 8
56475: PPUSH
56476: LD_INT 0
56478: PPUSH
56479: CALL 58201 0 3
// end ;
56483: GO 56437
56485: POP
56486: POP
// if fishes then
56487: LD_VAR 0 7
56491: IFFALSE 56558
// for i = 1 to fishes do
56493: LD_ADDR_VAR 0 11
56497: PUSH
56498: DOUBLE
56499: LD_INT 1
56501: DEC
56502: ST_TO_ADDR
56503: LD_VAR 0 7
56507: PUSH
56508: FOR_TO
56509: IFFALSE 56556
// begin hc_class = 20 ;
56511: LD_ADDR_OWVAR 28
56515: PUSH
56516: LD_INT 20
56518: ST_TO_ADDR
// hc_gallery =  ;
56519: LD_ADDR_OWVAR 33
56523: PUSH
56524: LD_STRING 
56526: ST_TO_ADDR
// animal := CreateHuman ;
56527: LD_ADDR_VAR 0 12
56531: PUSH
56532: CALL_OW 44
56536: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56537: LD_VAR 0 12
56541: PPUSH
56542: LD_VAR 0 9
56546: PPUSH
56547: LD_INT 0
56549: PPUSH
56550: CALL 58201 0 3
// end ;
56554: GO 56508
56556: POP
56557: POP
// end ;
56558: LD_VAR 0 10
56562: RET
// export function WantHeal ( sci , unit ) ; begin
56563: LD_INT 0
56565: PPUSH
// if GetTaskList ( sci ) > 0 then
56566: LD_VAR 0 1
56570: PPUSH
56571: CALL_OW 437
56575: PUSH
56576: LD_INT 0
56578: GREATER
56579: IFFALSE 56651
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56581: LD_VAR 0 1
56585: PPUSH
56586: CALL_OW 437
56590: PUSH
56591: LD_INT 1
56593: ARRAY
56594: PUSH
56595: LD_INT 1
56597: ARRAY
56598: PUSH
56599: LD_STRING l
56601: EQUAL
56602: IFFALSE 56629
56604: PUSH
56605: LD_VAR 0 1
56609: PPUSH
56610: CALL_OW 437
56614: PUSH
56615: LD_INT 1
56617: ARRAY
56618: PUSH
56619: LD_INT 4
56621: ARRAY
56622: PUSH
56623: LD_VAR 0 2
56627: EQUAL
56628: AND
56629: IFFALSE 56641
// result := true else
56631: LD_ADDR_VAR 0 3
56635: PUSH
56636: LD_INT 1
56638: ST_TO_ADDR
56639: GO 56649
// result := false ;
56641: LD_ADDR_VAR 0 3
56645: PUSH
56646: LD_INT 0
56648: ST_TO_ADDR
// end else
56649: GO 56659
// result := false ;
56651: LD_ADDR_VAR 0 3
56655: PUSH
56656: LD_INT 0
56658: ST_TO_ADDR
// end ;
56659: LD_VAR 0 3
56663: RET
// export function HealTarget ( sci ) ; begin
56664: LD_INT 0
56666: PPUSH
// if not sci then
56667: LD_VAR 0 1
56671: NOT
56672: IFFALSE 56676
// exit ;
56674: GO 56741
// result := 0 ;
56676: LD_ADDR_VAR 0 2
56680: PUSH
56681: LD_INT 0
56683: ST_TO_ADDR
// if GetTaskList ( sci ) then
56684: LD_VAR 0 1
56688: PPUSH
56689: CALL_OW 437
56693: IFFALSE 56741
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56695: LD_VAR 0 1
56699: PPUSH
56700: CALL_OW 437
56704: PUSH
56705: LD_INT 1
56707: ARRAY
56708: PUSH
56709: LD_INT 1
56711: ARRAY
56712: PUSH
56713: LD_STRING l
56715: EQUAL
56716: IFFALSE 56741
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56718: LD_ADDR_VAR 0 2
56722: PUSH
56723: LD_VAR 0 1
56727: PPUSH
56728: CALL_OW 437
56732: PUSH
56733: LD_INT 1
56735: ARRAY
56736: PUSH
56737: LD_INT 4
56739: ARRAY
56740: ST_TO_ADDR
// end ;
56741: LD_VAR 0 2
56745: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56746: LD_INT 0
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
// if not base_units then
56752: LD_VAR 0 1
56756: NOT
56757: IFFALSE 56761
// exit ;
56759: GO 56848
// result := false ;
56761: LD_ADDR_VAR 0 2
56765: PUSH
56766: LD_INT 0
56768: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56769: LD_ADDR_VAR 0 5
56773: PUSH
56774: LD_VAR 0 1
56778: PPUSH
56779: LD_INT 21
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PPUSH
56789: CALL_OW 72
56793: ST_TO_ADDR
// if not tmp then
56794: LD_VAR 0 5
56798: NOT
56799: IFFALSE 56803
// exit ;
56801: GO 56848
// for i in tmp do
56803: LD_ADDR_VAR 0 3
56807: PUSH
56808: LD_VAR 0 5
56812: PUSH
56813: FOR_IN
56814: IFFALSE 56846
// begin result := EnemyInRange ( i , 22 ) ;
56816: LD_ADDR_VAR 0 2
56820: PUSH
56821: LD_VAR 0 3
56825: PPUSH
56826: LD_INT 22
56828: PPUSH
56829: CALL 54273 0 2
56833: ST_TO_ADDR
// if result then
56834: LD_VAR 0 2
56838: IFFALSE 56844
// exit ;
56840: POP
56841: POP
56842: GO 56848
// end ;
56844: GO 56813
56846: POP
56847: POP
// end ;
56848: LD_VAR 0 2
56852: RET
// export function FilterByTag ( units , tag ) ; begin
56853: LD_INT 0
56855: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56856: LD_ADDR_VAR 0 3
56860: PUSH
56861: LD_VAR 0 1
56865: PPUSH
56866: LD_INT 120
56868: PUSH
56869: LD_VAR 0 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PPUSH
56878: CALL_OW 72
56882: ST_TO_ADDR
// end ;
56883: LD_VAR 0 3
56887: RET
// export function IsDriver ( un ) ; begin
56888: LD_INT 0
56890: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56891: LD_ADDR_VAR 0 2
56895: PUSH
56896: LD_VAR 0 1
56900: PUSH
56901: LD_INT 55
56903: PUSH
56904: EMPTY
56905: LIST
56906: PPUSH
56907: CALL_OW 69
56911: IN
56912: ST_TO_ADDR
// end ;
56913: LD_VAR 0 2
56917: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56918: LD_INT 0
56920: PPUSH
56921: PPUSH
// list := [ ] ;
56922: LD_ADDR_VAR 0 5
56926: PUSH
56927: EMPTY
56928: ST_TO_ADDR
// case d of 0 :
56929: LD_VAR 0 3
56933: PUSH
56934: LD_INT 0
56936: DOUBLE
56937: EQUAL
56938: IFTRUE 56942
56940: GO 57075
56942: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56943: LD_ADDR_VAR 0 5
56947: PUSH
56948: LD_VAR 0 1
56952: PUSH
56953: LD_INT 4
56955: MINUS
56956: PUSH
56957: LD_VAR 0 2
56961: PUSH
56962: LD_INT 4
56964: MINUS
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: PUSH
56974: LD_VAR 0 1
56978: PUSH
56979: LD_INT 3
56981: MINUS
56982: PUSH
56983: LD_VAR 0 2
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: PUSH
56996: LD_VAR 0 1
57000: PUSH
57001: LD_INT 4
57003: PLUS
57004: PUSH
57005: LD_VAR 0 2
57009: PUSH
57010: LD_INT 4
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: LIST
57017: PUSH
57018: LD_VAR 0 1
57022: PUSH
57023: LD_INT 3
57025: PLUS
57026: PUSH
57027: LD_VAR 0 2
57031: PUSH
57032: LD_INT 3
57034: PLUS
57035: PUSH
57036: LD_INT 5
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: PUSH
57044: LD_VAR 0 1
57048: PUSH
57049: LD_VAR 0 2
57053: PUSH
57054: LD_INT 4
57056: PLUS
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: ST_TO_ADDR
// end ; 1 :
57073: GO 57773
57075: LD_INT 1
57077: DOUBLE
57078: EQUAL
57079: IFTRUE 57083
57081: GO 57216
57083: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57084: LD_ADDR_VAR 0 5
57088: PUSH
57089: LD_VAR 0 1
57093: PUSH
57094: LD_VAR 0 2
57098: PUSH
57099: LD_INT 4
57101: MINUS
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: PUSH
57111: LD_VAR 0 1
57115: PUSH
57116: LD_INT 3
57118: MINUS
57119: PUSH
57120: LD_VAR 0 2
57124: PUSH
57125: LD_INT 3
57127: MINUS
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: PUSH
57137: LD_VAR 0 1
57141: PUSH
57142: LD_INT 4
57144: MINUS
57145: PUSH
57146: LD_VAR 0 2
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: LIST
57158: PUSH
57159: LD_VAR 0 1
57163: PUSH
57164: LD_VAR 0 2
57168: PUSH
57169: LD_INT 3
57171: PLUS
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: LIST
57180: PUSH
57181: LD_VAR 0 1
57185: PUSH
57186: LD_INT 4
57188: PLUS
57189: PUSH
57190: LD_VAR 0 2
57194: PUSH
57195: LD_INT 4
57197: PLUS
57198: PUSH
57199: LD_INT 5
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// end ; 2 :
57214: GO 57773
57216: LD_INT 2
57218: DOUBLE
57219: EQUAL
57220: IFTRUE 57224
57222: GO 57353
57224: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57225: LD_ADDR_VAR 0 5
57229: PUSH
57230: LD_VAR 0 1
57234: PUSH
57235: LD_VAR 0 2
57239: PUSH
57240: LD_INT 3
57242: MINUS
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: PUSH
57252: LD_VAR 0 1
57256: PUSH
57257: LD_INT 4
57259: PLUS
57260: PUSH
57261: LD_VAR 0 2
57265: PUSH
57266: LD_INT 4
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: PUSH
57274: LD_VAR 0 1
57278: PUSH
57279: LD_VAR 0 2
57283: PUSH
57284: LD_INT 4
57286: PLUS
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: LIST
57295: PUSH
57296: LD_VAR 0 1
57300: PUSH
57301: LD_INT 3
57303: MINUS
57304: PUSH
57305: LD_VAR 0 2
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: LIST
57317: PUSH
57318: LD_VAR 0 1
57322: PUSH
57323: LD_INT 4
57325: MINUS
57326: PUSH
57327: LD_VAR 0 2
57331: PUSH
57332: LD_INT 4
57334: MINUS
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: LIST
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// end ; 3 :
57351: GO 57773
57353: LD_INT 3
57355: DOUBLE
57356: EQUAL
57357: IFTRUE 57361
57359: GO 57494
57361: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57362: LD_ADDR_VAR 0 5
57366: PUSH
57367: LD_VAR 0 1
57371: PUSH
57372: LD_INT 3
57374: PLUS
57375: PUSH
57376: LD_VAR 0 2
57380: PUSH
57381: LD_INT 4
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: LIST
57388: PUSH
57389: LD_VAR 0 1
57393: PUSH
57394: LD_INT 4
57396: PLUS
57397: PUSH
57398: LD_VAR 0 2
57402: PUSH
57403: LD_INT 4
57405: PLUS
57406: PUSH
57407: LD_INT 5
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: LIST
57414: PUSH
57415: LD_VAR 0 1
57419: PUSH
57420: LD_INT 4
57422: MINUS
57423: PUSH
57424: LD_VAR 0 2
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: LIST
57436: PUSH
57437: LD_VAR 0 1
57441: PUSH
57442: LD_VAR 0 2
57446: PUSH
57447: LD_INT 4
57449: MINUS
57450: PUSH
57451: LD_INT 3
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: PUSH
57459: LD_VAR 0 1
57463: PUSH
57464: LD_INT 3
57466: MINUS
57467: PUSH
57468: LD_VAR 0 2
57472: PUSH
57473: LD_INT 3
57475: MINUS
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: ST_TO_ADDR
// end ; 4 :
57492: GO 57773
57494: LD_INT 4
57496: DOUBLE
57497: EQUAL
57498: IFTRUE 57502
57500: GO 57635
57502: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57503: LD_ADDR_VAR 0 5
57507: PUSH
57508: LD_VAR 0 1
57512: PUSH
57513: LD_VAR 0 2
57517: PUSH
57518: LD_INT 4
57520: PLUS
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: PUSH
57530: LD_VAR 0 1
57534: PUSH
57535: LD_INT 3
57537: PLUS
57538: PUSH
57539: LD_VAR 0 2
57543: PUSH
57544: LD_INT 3
57546: PLUS
57547: PUSH
57548: LD_INT 5
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: PUSH
57556: LD_VAR 0 1
57560: PUSH
57561: LD_INT 4
57563: PLUS
57564: PUSH
57565: LD_VAR 0 2
57569: PUSH
57570: LD_INT 4
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: PUSH
57578: LD_VAR 0 1
57582: PUSH
57583: LD_VAR 0 2
57587: PUSH
57588: LD_INT 3
57590: MINUS
57591: PUSH
57592: LD_INT 3
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: LIST
57599: PUSH
57600: LD_VAR 0 1
57604: PUSH
57605: LD_INT 4
57607: MINUS
57608: PUSH
57609: LD_VAR 0 2
57613: PUSH
57614: LD_INT 4
57616: MINUS
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: LIST
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: ST_TO_ADDR
// end ; 5 :
57633: GO 57773
57635: LD_INT 5
57637: DOUBLE
57638: EQUAL
57639: IFTRUE 57643
57641: GO 57772
57643: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57644: LD_ADDR_VAR 0 5
57648: PUSH
57649: LD_VAR 0 1
57653: PUSH
57654: LD_INT 4
57656: MINUS
57657: PUSH
57658: LD_VAR 0 2
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: LIST
57670: PUSH
57671: LD_VAR 0 1
57675: PUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_INT 4
57683: MINUS
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: LIST
57692: PUSH
57693: LD_VAR 0 1
57697: PUSH
57698: LD_INT 4
57700: PLUS
57701: PUSH
57702: LD_VAR 0 2
57706: PUSH
57707: LD_INT 4
57709: PLUS
57710: PUSH
57711: LD_INT 5
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: PUSH
57719: LD_VAR 0 1
57723: PUSH
57724: LD_INT 3
57726: PLUS
57727: PUSH
57728: LD_VAR 0 2
57732: PUSH
57733: LD_INT 4
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: PUSH
57741: LD_VAR 0 1
57745: PUSH
57746: LD_VAR 0 2
57750: PUSH
57751: LD_INT 3
57753: PLUS
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: ST_TO_ADDR
// end ; end ;
57770: GO 57773
57772: POP
// result := list ;
57773: LD_ADDR_VAR 0 4
57777: PUSH
57778: LD_VAR 0 5
57782: ST_TO_ADDR
// end ;
57783: LD_VAR 0 4
57787: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57788: LD_INT 0
57790: PPUSH
57791: PPUSH
57792: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57793: LD_VAR 0 1
57797: NOT
57798: IFTRUE 57826
57800: PUSH
57801: LD_VAR 0 2
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: LD_INT 2
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: LD_INT 4
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: IN
57824: NOT
57825: OR
57826: IFFALSE 57830
// exit ;
57828: GO 57913
// tmp := [ ] ;
57830: LD_ADDR_VAR 0 5
57834: PUSH
57835: EMPTY
57836: ST_TO_ADDR
// for i in units do
57837: LD_ADDR_VAR 0 4
57841: PUSH
57842: LD_VAR 0 1
57846: PUSH
57847: FOR_IN
57848: IFFALSE 57882
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57850: LD_ADDR_VAR 0 5
57854: PUSH
57855: LD_VAR 0 5
57859: PPUSH
57860: LD_VAR 0 4
57864: PPUSH
57865: LD_VAR 0 2
57869: PPUSH
57870: CALL_OW 259
57874: PPUSH
57875: CALL 59308 0 2
57879: ST_TO_ADDR
57880: GO 57847
57882: POP
57883: POP
// if not tmp then
57884: LD_VAR 0 5
57888: NOT
57889: IFFALSE 57893
// exit ;
57891: GO 57913
// result := SortListByListDesc ( units , tmp ) ;
57893: LD_ADDR_VAR 0 3
57897: PUSH
57898: LD_VAR 0 1
57902: PPUSH
57903: LD_VAR 0 5
57907: PPUSH
57908: CALL_OW 77
57912: ST_TO_ADDR
// end ;
57913: LD_VAR 0 3
57917: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57918: LD_INT 0
57920: PPUSH
57921: PPUSH
57922: PPUSH
// result := false ;
57923: LD_ADDR_VAR 0 3
57927: PUSH
57928: LD_INT 0
57930: ST_TO_ADDR
// if not building then
57931: LD_VAR 0 2
57935: NOT
57936: IFFALSE 57940
// exit ;
57938: GO 58084
// x := GetX ( building ) ;
57940: LD_ADDR_VAR 0 4
57944: PUSH
57945: LD_VAR 0 2
57949: PPUSH
57950: CALL_OW 250
57954: ST_TO_ADDR
// y := GetY ( building ) ;
57955: LD_ADDR_VAR 0 5
57959: PUSH
57960: LD_VAR 0 2
57964: PPUSH
57965: CALL_OW 251
57969: ST_TO_ADDR
// if not x or not y then
57970: LD_VAR 0 4
57974: NOT
57975: IFTRUE 57984
57977: PUSH
57978: LD_VAR 0 5
57982: NOT
57983: OR
57984: IFFALSE 57988
// exit ;
57986: GO 58084
// if GetTaskList ( unit ) then
57988: LD_VAR 0 1
57992: PPUSH
57993: CALL_OW 437
57997: IFFALSE 58084
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57999: LD_STRING e
58001: PUSH
58002: LD_VAR 0 1
58006: PPUSH
58007: CALL_OW 437
58011: PUSH
58012: LD_INT 1
58014: ARRAY
58015: PUSH
58016: LD_INT 1
58018: ARRAY
58019: EQUAL
58020: IFFALSE 58047
58022: PUSH
58023: LD_VAR 0 4
58027: PUSH
58028: LD_VAR 0 1
58032: PPUSH
58033: CALL_OW 437
58037: PUSH
58038: LD_INT 1
58040: ARRAY
58041: PUSH
58042: LD_INT 2
58044: ARRAY
58045: EQUAL
58046: AND
58047: IFFALSE 58074
58049: PUSH
58050: LD_VAR 0 5
58054: PUSH
58055: LD_VAR 0 1
58059: PPUSH
58060: CALL_OW 437
58064: PUSH
58065: LD_INT 1
58067: ARRAY
58068: PUSH
58069: LD_INT 3
58071: ARRAY
58072: EQUAL
58073: AND
58074: IFFALSE 58084
// result := true end ;
58076: LD_ADDR_VAR 0 3
58080: PUSH
58081: LD_INT 1
58083: ST_TO_ADDR
// end ;
58084: LD_VAR 0 3
58088: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58089: LD_INT 0
58091: PPUSH
// result := false ;
58092: LD_ADDR_VAR 0 4
58096: PUSH
58097: LD_INT 0
58099: ST_TO_ADDR
// if GetTaskList ( unit ) then
58100: LD_VAR 0 1
58104: PPUSH
58105: CALL_OW 437
58109: IFFALSE 58196
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58111: LD_STRING M
58113: PUSH
58114: LD_VAR 0 1
58118: PPUSH
58119: CALL_OW 437
58123: PUSH
58124: LD_INT 1
58126: ARRAY
58127: PUSH
58128: LD_INT 1
58130: ARRAY
58131: EQUAL
58132: IFFALSE 58159
58134: PUSH
58135: LD_VAR 0 2
58139: PUSH
58140: LD_VAR 0 1
58144: PPUSH
58145: CALL_OW 437
58149: PUSH
58150: LD_INT 1
58152: ARRAY
58153: PUSH
58154: LD_INT 2
58156: ARRAY
58157: EQUAL
58158: AND
58159: IFFALSE 58186
58161: PUSH
58162: LD_VAR 0 3
58166: PUSH
58167: LD_VAR 0 1
58171: PPUSH
58172: CALL_OW 437
58176: PUSH
58177: LD_INT 1
58179: ARRAY
58180: PUSH
58181: LD_INT 3
58183: ARRAY
58184: EQUAL
58185: AND
58186: IFFALSE 58196
// result := true ;
58188: LD_ADDR_VAR 0 4
58192: PUSH
58193: LD_INT 1
58195: ST_TO_ADDR
// end ; end ;
58196: LD_VAR 0 4
58200: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58201: LD_INT 0
58203: PPUSH
58204: PPUSH
58205: PPUSH
58206: PPUSH
// if not unit or not area then
58207: LD_VAR 0 1
58211: NOT
58212: IFTRUE 58221
58214: PUSH
58215: LD_VAR 0 2
58219: NOT
58220: OR
58221: IFFALSE 58225
// exit ;
58223: GO 58401
// tmp := AreaToList ( area , i ) ;
58225: LD_ADDR_VAR 0 6
58229: PUSH
58230: LD_VAR 0 2
58234: PPUSH
58235: LD_VAR 0 5
58239: PPUSH
58240: CALL_OW 517
58244: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58245: LD_ADDR_VAR 0 5
58249: PUSH
58250: DOUBLE
58251: LD_INT 1
58253: DEC
58254: ST_TO_ADDR
58255: LD_VAR 0 6
58259: PUSH
58260: LD_INT 1
58262: ARRAY
58263: PUSH
58264: FOR_TO
58265: IFFALSE 58399
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58267: LD_ADDR_VAR 0 7
58271: PUSH
58272: LD_VAR 0 6
58276: PUSH
58277: LD_INT 1
58279: ARRAY
58280: PUSH
58281: LD_VAR 0 5
58285: ARRAY
58286: PUSH
58287: LD_VAR 0 6
58291: PUSH
58292: LD_INT 2
58294: ARRAY
58295: PUSH
58296: LD_VAR 0 5
58300: ARRAY
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58306: LD_INT 92
58308: PUSH
58309: LD_VAR 0 7
58313: PUSH
58314: LD_INT 1
58316: ARRAY
58317: PUSH
58318: LD_VAR 0 7
58322: PUSH
58323: LD_INT 2
58325: ARRAY
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: PPUSH
58336: CALL_OW 69
58340: PUSH
58341: LD_INT 0
58343: EQUAL
58344: IFFALSE 58397
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58346: LD_VAR 0 1
58350: PPUSH
58351: LD_VAR 0 7
58355: PUSH
58356: LD_INT 1
58358: ARRAY
58359: PPUSH
58360: LD_VAR 0 7
58364: PUSH
58365: LD_INT 2
58367: ARRAY
58368: PPUSH
58369: LD_VAR 0 3
58373: PPUSH
58374: CALL_OW 48
// result := IsPlaced ( unit ) ;
58378: LD_ADDR_VAR 0 4
58382: PUSH
58383: LD_VAR 0 1
58387: PPUSH
58388: CALL_OW 305
58392: ST_TO_ADDR
// exit ;
58393: POP
58394: POP
58395: GO 58401
// end ; end ;
58397: GO 58264
58399: POP
58400: POP
// end ;
58401: LD_VAR 0 4
58405: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58406: LD_INT 0
58408: PPUSH
58409: PPUSH
58410: PPUSH
// if not side or side > 8 then
58411: LD_VAR 0 1
58415: NOT
58416: IFTRUE 58428
58418: PUSH
58419: LD_VAR 0 1
58423: PUSH
58424: LD_INT 8
58426: GREATER
58427: OR
58428: IFFALSE 58432
// exit ;
58430: GO 58619
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58432: LD_ADDR_VAR 0 4
58436: PUSH
58437: LD_INT 22
58439: PUSH
58440: LD_VAR 0 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 21
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PPUSH
58463: CALL_OW 69
58467: ST_TO_ADDR
// if not tmp then
58468: LD_VAR 0 4
58472: NOT
58473: IFFALSE 58477
// exit ;
58475: GO 58619
// enable_addtolog := true ;
58477: LD_ADDR_OWVAR 81
58481: PUSH
58482: LD_INT 1
58484: ST_TO_ADDR
// AddToLog ( [ ) ;
58485: LD_STRING [
58487: PPUSH
58488: CALL_OW 561
// for i in tmp do
58492: LD_ADDR_VAR 0 3
58496: PUSH
58497: LD_VAR 0 4
58501: PUSH
58502: FOR_IN
58503: IFFALSE 58610
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58505: LD_STRING [
58507: PUSH
58508: LD_VAR 0 3
58512: PPUSH
58513: CALL_OW 266
58517: STR
58518: PUSH
58519: LD_STRING , 
58521: STR
58522: PUSH
58523: LD_VAR 0 3
58527: PPUSH
58528: CALL_OW 250
58532: STR
58533: PUSH
58534: LD_STRING , 
58536: STR
58537: PUSH
58538: LD_VAR 0 3
58542: PPUSH
58543: CALL_OW 251
58547: STR
58548: PUSH
58549: LD_STRING , 
58551: STR
58552: PUSH
58553: LD_VAR 0 3
58557: PPUSH
58558: CALL_OW 254
58562: STR
58563: PUSH
58564: LD_STRING , 
58566: STR
58567: PUSH
58568: LD_VAR 0 3
58572: PPUSH
58573: LD_INT 1
58575: PPUSH
58576: CALL_OW 268
58580: STR
58581: PUSH
58582: LD_STRING , 
58584: STR
58585: PUSH
58586: LD_VAR 0 3
58590: PPUSH
58591: LD_INT 2
58593: PPUSH
58594: CALL_OW 268
58598: STR
58599: PUSH
58600: LD_STRING ],
58602: STR
58603: PPUSH
58604: CALL_OW 561
// end ;
58608: GO 58502
58610: POP
58611: POP
// AddToLog ( ]; ) ;
58612: LD_STRING ];
58614: PPUSH
58615: CALL_OW 561
// end ;
58619: LD_VAR 0 2
58623: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58624: LD_INT 0
58626: PPUSH
58627: PPUSH
58628: PPUSH
58629: PPUSH
58630: PPUSH
// if not area or not rate or not max then
58631: LD_VAR 0 1
58635: NOT
58636: IFTRUE 58645
58638: PUSH
58639: LD_VAR 0 2
58643: NOT
58644: OR
58645: IFTRUE 58654
58647: PUSH
58648: LD_VAR 0 4
58652: NOT
58653: OR
58654: IFFALSE 58658
// exit ;
58656: GO 58847
// while 1 do
58658: LD_INT 1
58660: IFFALSE 58847
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58662: LD_ADDR_VAR 0 9
58666: PUSH
58667: LD_VAR 0 1
58671: PPUSH
58672: LD_INT 1
58674: PPUSH
58675: CALL_OW 287
58679: PUSH
58680: LD_INT 10
58682: MUL
58683: ST_TO_ADDR
// r := rate / 10 ;
58684: LD_ADDR_VAR 0 7
58688: PUSH
58689: LD_VAR 0 2
58693: PUSH
58694: LD_INT 10
58696: DIVREAL
58697: ST_TO_ADDR
// time := 1 1$00 ;
58698: LD_ADDR_VAR 0 8
58702: PUSH
58703: LD_INT 2100
58705: ST_TO_ADDR
// if amount < min then
58706: LD_VAR 0 9
58710: PUSH
58711: LD_VAR 0 3
58715: LESS
58716: IFFALSE 58734
// r := r * 2 else
58718: LD_ADDR_VAR 0 7
58722: PUSH
58723: LD_VAR 0 7
58727: PUSH
58728: LD_INT 2
58730: MUL
58731: ST_TO_ADDR
58732: GO 58760
// if amount > max then
58734: LD_VAR 0 9
58738: PUSH
58739: LD_VAR 0 4
58743: GREATER
58744: IFFALSE 58760
// r := r / 2 ;
58746: LD_ADDR_VAR 0 7
58750: PUSH
58751: LD_VAR 0 7
58755: PUSH
58756: LD_INT 2
58758: DIVREAL
58759: ST_TO_ADDR
// time := time / r ;
58760: LD_ADDR_VAR 0 8
58764: PUSH
58765: LD_VAR 0 8
58769: PUSH
58770: LD_VAR 0 7
58774: DIVREAL
58775: ST_TO_ADDR
// if time < 0 then
58776: LD_VAR 0 8
58780: PUSH
58781: LD_INT 0
58783: LESS
58784: IFFALSE 58801
// time := time * - 1 ;
58786: LD_ADDR_VAR 0 8
58790: PUSH
58791: LD_VAR 0 8
58795: PUSH
58796: LD_INT 1
58798: NEG
58799: MUL
58800: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58801: LD_VAR 0 8
58805: PUSH
58806: LD_INT 35
58808: PPUSH
58809: LD_INT 875
58811: PPUSH
58812: CALL_OW 12
58816: PLUS
58817: PPUSH
58818: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58822: LD_INT 1
58824: PPUSH
58825: LD_INT 5
58827: PPUSH
58828: CALL_OW 12
58832: PPUSH
58833: LD_VAR 0 1
58837: PPUSH
58838: LD_INT 1
58840: PPUSH
58841: CALL_OW 55
// end ;
58845: GO 58658
// end ;
58847: LD_VAR 0 5
58851: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58852: LD_INT 0
58854: PPUSH
58855: PPUSH
58856: PPUSH
58857: PPUSH
58858: PPUSH
58859: PPUSH
58860: PPUSH
58861: PPUSH
// if not turrets or not factories then
58862: LD_VAR 0 1
58866: NOT
58867: IFTRUE 58876
58869: PUSH
58870: LD_VAR 0 2
58874: NOT
58875: OR
58876: IFFALSE 58880
// exit ;
58878: GO 59187
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58880: LD_ADDR_VAR 0 10
58884: PUSH
58885: LD_INT 5
58887: PUSH
58888: LD_INT 6
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: LD_INT 4
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: LD_INT 5
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 24
58922: PUSH
58923: LD_INT 25
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 23
58932: PUSH
58933: LD_INT 27
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 42
58946: PUSH
58947: LD_INT 43
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 44
58956: PUSH
58957: LD_INT 46
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 45
58966: PUSH
58967: LD_INT 47
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// result := [ ] ;
58984: LD_ADDR_VAR 0 3
58988: PUSH
58989: EMPTY
58990: ST_TO_ADDR
// for i in turrets do
58991: LD_ADDR_VAR 0 4
58995: PUSH
58996: LD_VAR 0 1
59000: PUSH
59001: FOR_IN
59002: IFFALSE 59185
// begin nat := GetNation ( i ) ;
59004: LD_ADDR_VAR 0 7
59008: PUSH
59009: LD_VAR 0 4
59013: PPUSH
59014: CALL_OW 248
59018: ST_TO_ADDR
// weapon := 0 ;
59019: LD_ADDR_VAR 0 8
59023: PUSH
59024: LD_INT 0
59026: ST_TO_ADDR
// if not nat then
59027: LD_VAR 0 7
59031: NOT
59032: IFFALSE 59036
// continue ;
59034: GO 59001
// for j in list [ nat ] do
59036: LD_ADDR_VAR 0 5
59040: PUSH
59041: LD_VAR 0 10
59045: PUSH
59046: LD_VAR 0 7
59050: ARRAY
59051: PUSH
59052: FOR_IN
59053: IFFALSE 59094
// if GetBWeapon ( i ) = j [ 1 ] then
59055: LD_VAR 0 4
59059: PPUSH
59060: CALL_OW 269
59064: PUSH
59065: LD_VAR 0 5
59069: PUSH
59070: LD_INT 1
59072: ARRAY
59073: EQUAL
59074: IFFALSE 59092
// begin weapon := j [ 2 ] ;
59076: LD_ADDR_VAR 0 8
59080: PUSH
59081: LD_VAR 0 5
59085: PUSH
59086: LD_INT 2
59088: ARRAY
59089: ST_TO_ADDR
// break ;
59090: GO 59094
// end ;
59092: GO 59052
59094: POP
59095: POP
// if not weapon then
59096: LD_VAR 0 8
59100: NOT
59101: IFFALSE 59105
// continue ;
59103: GO 59001
// for k in factories do
59105: LD_ADDR_VAR 0 6
59109: PUSH
59110: LD_VAR 0 2
59114: PUSH
59115: FOR_IN
59116: IFFALSE 59181
// begin weapons := AvailableWeaponList ( k ) ;
59118: LD_ADDR_VAR 0 9
59122: PUSH
59123: LD_VAR 0 6
59127: PPUSH
59128: CALL_OW 478
59132: ST_TO_ADDR
// if not weapons then
59133: LD_VAR 0 9
59137: NOT
59138: IFFALSE 59142
// continue ;
59140: GO 59115
// if weapon in weapons then
59142: LD_VAR 0 8
59146: PUSH
59147: LD_VAR 0 9
59151: IN
59152: IFFALSE 59179
// begin result := [ i , weapon ] ;
59154: LD_ADDR_VAR 0 3
59158: PUSH
59159: LD_VAR 0 4
59163: PUSH
59164: LD_VAR 0 8
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: ST_TO_ADDR
// exit ;
59173: POP
59174: POP
59175: POP
59176: POP
59177: GO 59187
// end ; end ;
59179: GO 59115
59181: POP
59182: POP
// end ;
59183: GO 59001
59185: POP
59186: POP
// end ;
59187: LD_VAR 0 3
59191: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59192: LD_INT 0
59194: PPUSH
// if not side or side > 8 then
59195: LD_VAR 0 3
59199: NOT
59200: IFTRUE 59212
59202: PUSH
59203: LD_VAR 0 3
59207: PUSH
59208: LD_INT 8
59210: GREATER
59211: OR
59212: IFFALSE 59216
// exit ;
59214: GO 59275
// if not range then
59216: LD_VAR 0 4
59220: NOT
59221: IFFALSE 59232
// range := - 12 ;
59223: LD_ADDR_VAR 0 4
59227: PUSH
59228: LD_INT 12
59230: NEG
59231: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59232: LD_VAR 0 1
59236: PPUSH
59237: LD_VAR 0 2
59241: PPUSH
59242: LD_VAR 0 3
59246: PPUSH
59247: LD_VAR 0 4
59251: PPUSH
59252: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59256: LD_VAR 0 1
59260: PPUSH
59261: LD_VAR 0 2
59265: PPUSH
59266: LD_VAR 0 3
59270: PPUSH
59271: CALL_OW 331
// end ;
59275: LD_VAR 0 5
59279: RET
// export function Video ( mode ) ; begin
59280: LD_INT 0
59282: PPUSH
// ingame_video = mode ;
59283: LD_ADDR_OWVAR 52
59287: PUSH
59288: LD_VAR 0 1
59292: ST_TO_ADDR
// interface_hidden = mode ;
59293: LD_ADDR_OWVAR 54
59297: PUSH
59298: LD_VAR 0 1
59302: ST_TO_ADDR
// end ;
59303: LD_VAR 0 2
59307: RET
// export function Join ( array , element ) ; begin
59308: LD_INT 0
59310: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59311: LD_ADDR_VAR 0 3
59315: PUSH
59316: LD_VAR 0 1
59320: PPUSH
59321: LD_VAR 0 1
59325: PUSH
59326: LD_INT 1
59328: PLUS
59329: PPUSH
59330: LD_VAR 0 2
59334: PPUSH
59335: CALL_OW 1
59339: ST_TO_ADDR
// end ;
59340: LD_VAR 0 3
59344: RET
// export function JoinUnion ( array , element ) ; begin
59345: LD_INT 0
59347: PPUSH
// result := array union element ;
59348: LD_ADDR_VAR 0 3
59352: PUSH
59353: LD_VAR 0 1
59357: PUSH
59358: LD_VAR 0 2
59362: UNION
59363: ST_TO_ADDR
// end ;
59364: LD_VAR 0 3
59368: RET
// export function GetBehemoths ( side ) ; begin
59369: LD_INT 0
59371: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59372: LD_ADDR_VAR 0 2
59376: PUSH
59377: LD_INT 22
59379: PUSH
59380: LD_VAR 0 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 31
59391: PUSH
59392: LD_INT 25
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PPUSH
59403: CALL_OW 69
59407: ST_TO_ADDR
// end ;
59408: LD_VAR 0 2
59412: RET
// export function Shuffle ( array ) ; var i , index ; begin
59413: LD_INT 0
59415: PPUSH
59416: PPUSH
59417: PPUSH
// result := [ ] ;
59418: LD_ADDR_VAR 0 2
59422: PUSH
59423: EMPTY
59424: ST_TO_ADDR
// if not array then
59425: LD_VAR 0 1
59429: NOT
59430: IFFALSE 59434
// exit ;
59432: GO 59533
// Randomize ;
59434: CALL_OW 10
// for i = array downto 1 do
59438: LD_ADDR_VAR 0 3
59442: PUSH
59443: DOUBLE
59444: LD_VAR 0 1
59448: INC
59449: ST_TO_ADDR
59450: LD_INT 1
59452: PUSH
59453: FOR_DOWNTO
59454: IFFALSE 59531
// begin index := rand ( 1 , array ) ;
59456: LD_ADDR_VAR 0 4
59460: PUSH
59461: LD_INT 1
59463: PPUSH
59464: LD_VAR 0 1
59468: PPUSH
59469: CALL_OW 12
59473: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59474: LD_ADDR_VAR 0 2
59478: PUSH
59479: LD_VAR 0 2
59483: PPUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_INT 1
59491: PLUS
59492: PPUSH
59493: LD_VAR 0 1
59497: PUSH
59498: LD_VAR 0 4
59502: ARRAY
59503: PPUSH
59504: CALL_OW 2
59508: ST_TO_ADDR
// array := Delete ( array , index ) ;
59509: LD_ADDR_VAR 0 1
59513: PUSH
59514: LD_VAR 0 1
59518: PPUSH
59519: LD_VAR 0 4
59523: PPUSH
59524: CALL_OW 3
59528: ST_TO_ADDR
// end ;
59529: GO 59453
59531: POP
59532: POP
// end ;
59533: LD_VAR 0 2
59537: RET
// export function GetBaseMaterials ( base ) ; begin
59538: LD_INT 0
59540: PPUSH
// result := [ 0 , 0 , 0 ] ;
59541: LD_ADDR_VAR 0 2
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: ST_TO_ADDR
// if not base then
59560: LD_VAR 0 1
59564: NOT
59565: IFFALSE 59569
// exit ;
59567: GO 59618
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59569: LD_ADDR_VAR 0 2
59573: PUSH
59574: LD_VAR 0 1
59578: PPUSH
59579: LD_INT 1
59581: PPUSH
59582: CALL_OW 275
59586: PUSH
59587: LD_VAR 0 1
59591: PPUSH
59592: LD_INT 2
59594: PPUSH
59595: CALL_OW 275
59599: PUSH
59600: LD_VAR 0 1
59604: PPUSH
59605: LD_INT 3
59607: PPUSH
59608: CALL_OW 275
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: ST_TO_ADDR
// end ;
59618: LD_VAR 0 2
59622: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59623: LD_INT 0
59625: PPUSH
59626: PPUSH
// result := array ;
59627: LD_ADDR_VAR 0 3
59631: PUSH
59632: LD_VAR 0 1
59636: ST_TO_ADDR
// if size >= result then
59637: LD_VAR 0 2
59641: PUSH
59642: LD_VAR 0 3
59646: GREATEREQUAL
59647: IFFALSE 59651
// exit ;
59649: GO 59701
// if size then
59651: LD_VAR 0 2
59655: IFFALSE 59701
// for i := array downto size do
59657: LD_ADDR_VAR 0 4
59661: PUSH
59662: DOUBLE
59663: LD_VAR 0 1
59667: INC
59668: ST_TO_ADDR
59669: LD_VAR 0 2
59673: PUSH
59674: FOR_DOWNTO
59675: IFFALSE 59699
// result := Delete ( result , result ) ;
59677: LD_ADDR_VAR 0 3
59681: PUSH
59682: LD_VAR 0 3
59686: PPUSH
59687: LD_VAR 0 3
59691: PPUSH
59692: CALL_OW 3
59696: ST_TO_ADDR
59697: GO 59674
59699: POP
59700: POP
// end ;
59701: LD_VAR 0 3
59705: RET
// export function ComExit ( unit ) ; var tmp ; begin
59706: LD_INT 0
59708: PPUSH
59709: PPUSH
// if not IsInUnit ( unit ) then
59710: LD_VAR 0 1
59714: PPUSH
59715: CALL_OW 310
59719: NOT
59720: IFFALSE 59724
// exit ;
59722: GO 59784
// tmp := IsInUnit ( unit ) ;
59724: LD_ADDR_VAR 0 3
59728: PUSH
59729: LD_VAR 0 1
59733: PPUSH
59734: CALL_OW 310
59738: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59739: LD_VAR 0 3
59743: PPUSH
59744: CALL_OW 247
59748: PUSH
59749: LD_INT 2
59751: EQUAL
59752: IFFALSE 59765
// ComExitVehicle ( unit ) else
59754: LD_VAR 0 1
59758: PPUSH
59759: CALL_OW 121
59763: GO 59774
// ComExitBuilding ( unit ) ;
59765: LD_VAR 0 1
59769: PPUSH
59770: CALL_OW 122
// result := tmp ;
59774: LD_ADDR_VAR 0 2
59778: PUSH
59779: LD_VAR 0 3
59783: ST_TO_ADDR
// end ;
59784: LD_VAR 0 2
59788: RET
// export function ComExitAll ( units ) ; var i ; begin
59789: LD_INT 0
59791: PPUSH
59792: PPUSH
// if not units then
59793: LD_VAR 0 1
59797: NOT
59798: IFFALSE 59802
// exit ;
59800: GO 59828
// for i in units do
59802: LD_ADDR_VAR 0 3
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: FOR_IN
59813: IFFALSE 59826
// ComExit ( i ) ;
59815: LD_VAR 0 3
59819: PPUSH
59820: CALL 59706 0 1
59824: GO 59812
59826: POP
59827: POP
// end ;
59828: LD_VAR 0 2
59832: RET
// export function ResetHc ; begin
59833: LD_INT 0
59835: PPUSH
// InitHc ;
59836: CALL_OW 19
// hc_importance := 0 ;
59840: LD_ADDR_OWVAR 32
59844: PUSH
59845: LD_INT 0
59847: ST_TO_ADDR
// end ;
59848: LD_VAR 0 1
59852: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59853: LD_INT 0
59855: PPUSH
59856: PPUSH
59857: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59858: LD_ADDR_VAR 0 6
59862: PUSH
59863: LD_VAR 0 1
59867: PUSH
59868: LD_VAR 0 3
59872: PLUS
59873: PUSH
59874: LD_INT 2
59876: DIV
59877: ST_TO_ADDR
// if _x < 0 then
59878: LD_VAR 0 6
59882: PUSH
59883: LD_INT 0
59885: LESS
59886: IFFALSE 59903
// _x := _x * - 1 ;
59888: LD_ADDR_VAR 0 6
59892: PUSH
59893: LD_VAR 0 6
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: MUL
59902: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59903: LD_ADDR_VAR 0 7
59907: PUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_VAR 0 4
59917: PLUS
59918: PUSH
59919: LD_INT 2
59921: DIV
59922: ST_TO_ADDR
// if _y < 0 then
59923: LD_VAR 0 7
59927: PUSH
59928: LD_INT 0
59930: LESS
59931: IFFALSE 59948
// _y := _y * - 1 ;
59933: LD_ADDR_VAR 0 7
59937: PUSH
59938: LD_VAR 0 7
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: MUL
59947: ST_TO_ADDR
// result := [ _x , _y ] ;
59948: LD_ADDR_VAR 0 5
59952: PUSH
59953: LD_VAR 0 6
59957: PUSH
59958: LD_VAR 0 7
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: ST_TO_ADDR
// end ;
59967: LD_VAR 0 5
59971: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59972: LD_INT 0
59974: PPUSH
59975: PPUSH
59976: PPUSH
59977: PPUSH
// task := GetTaskList ( unit ) ;
59978: LD_ADDR_VAR 0 7
59982: PUSH
59983: LD_VAR 0 1
59987: PPUSH
59988: CALL_OW 437
59992: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59993: LD_VAR 0 7
59997: NOT
59998: IFFALSE 60017
60000: PUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: LD_VAR 0 2
60010: PPUSH
60011: CALL_OW 308
60015: NOT
60016: AND
60017: IFFALSE 60021
// exit ;
60019: GO 60139
// if IsInArea ( unit , area ) then
60021: LD_VAR 0 1
60025: PPUSH
60026: LD_VAR 0 2
60030: PPUSH
60031: CALL_OW 308
60035: IFFALSE 60053
// begin ComMoveToArea ( unit , goAway ) ;
60037: LD_VAR 0 1
60041: PPUSH
60042: LD_VAR 0 3
60046: PPUSH
60047: CALL_OW 113
// exit ;
60051: GO 60139
// end ; if task [ 1 ] [ 1 ] <> M then
60053: LD_VAR 0 7
60057: PUSH
60058: LD_INT 1
60060: ARRAY
60061: PUSH
60062: LD_INT 1
60064: ARRAY
60065: PUSH
60066: LD_STRING M
60068: NONEQUAL
60069: IFFALSE 60073
// exit ;
60071: GO 60139
// x := task [ 1 ] [ 2 ] ;
60073: LD_ADDR_VAR 0 5
60077: PUSH
60078: LD_VAR 0 7
60082: PUSH
60083: LD_INT 1
60085: ARRAY
60086: PUSH
60087: LD_INT 2
60089: ARRAY
60090: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60091: LD_ADDR_VAR 0 6
60095: PUSH
60096: LD_VAR 0 7
60100: PUSH
60101: LD_INT 1
60103: ARRAY
60104: PUSH
60105: LD_INT 3
60107: ARRAY
60108: ST_TO_ADDR
// if InArea ( x , y , area ) then
60109: LD_VAR 0 5
60113: PPUSH
60114: LD_VAR 0 6
60118: PPUSH
60119: LD_VAR 0 2
60123: PPUSH
60124: CALL_OW 309
60128: IFFALSE 60139
// ComStop ( unit ) ;
60130: LD_VAR 0 1
60134: PPUSH
60135: CALL_OW 141
// end ;
60139: LD_VAR 0 4
60143: RET
// export function Abs ( value ) ; begin
60144: LD_INT 0
60146: PPUSH
// result := value ;
60147: LD_ADDR_VAR 0 2
60151: PUSH
60152: LD_VAR 0 1
60156: ST_TO_ADDR
// if value < 0 then
60157: LD_VAR 0 1
60161: PUSH
60162: LD_INT 0
60164: LESS
60165: IFFALSE 60182
// result := value * - 1 ;
60167: LD_ADDR_VAR 0 2
60171: PUSH
60172: LD_VAR 0 1
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: MUL
60181: ST_TO_ADDR
// end ;
60182: LD_VAR 0 2
60186: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60187: LD_INT 0
60189: PPUSH
60190: PPUSH
60191: PPUSH
60192: PPUSH
60193: PPUSH
60194: PPUSH
60195: PPUSH
60196: PPUSH
// if not unit or not building then
60197: LD_VAR 0 1
60201: NOT
60202: IFTRUE 60211
60204: PUSH
60205: LD_VAR 0 2
60209: NOT
60210: OR
60211: IFFALSE 60215
// exit ;
60213: GO 60443
// x := GetX ( building ) ;
60215: LD_ADDR_VAR 0 4
60219: PUSH
60220: LD_VAR 0 2
60224: PPUSH
60225: CALL_OW 250
60229: ST_TO_ADDR
// y := GetY ( building ) ;
60230: LD_ADDR_VAR 0 6
60234: PUSH
60235: LD_VAR 0 2
60239: PPUSH
60240: CALL_OW 251
60244: ST_TO_ADDR
// d := GetDir ( building ) ;
60245: LD_ADDR_VAR 0 8
60249: PUSH
60250: LD_VAR 0 2
60254: PPUSH
60255: CALL_OW 254
60259: ST_TO_ADDR
// r := 4 ;
60260: LD_ADDR_VAR 0 9
60264: PUSH
60265: LD_INT 4
60267: ST_TO_ADDR
// for i := 1 to 5 do
60268: LD_ADDR_VAR 0 10
60272: PUSH
60273: DOUBLE
60274: LD_INT 1
60276: DEC
60277: ST_TO_ADDR
60278: LD_INT 5
60280: PUSH
60281: FOR_TO
60282: IFFALSE 60441
// begin _x := ShiftX ( x , d , r + i ) ;
60284: LD_ADDR_VAR 0 5
60288: PUSH
60289: LD_VAR 0 4
60293: PPUSH
60294: LD_VAR 0 8
60298: PPUSH
60299: LD_VAR 0 9
60303: PUSH
60304: LD_VAR 0 10
60308: PLUS
60309: PPUSH
60310: CALL_OW 272
60314: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60315: LD_ADDR_VAR 0 7
60319: PUSH
60320: LD_VAR 0 6
60324: PPUSH
60325: LD_VAR 0 8
60329: PPUSH
60330: LD_VAR 0 9
60334: PUSH
60335: LD_VAR 0 10
60339: PLUS
60340: PPUSH
60341: CALL_OW 273
60345: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60346: LD_VAR 0 5
60350: PPUSH
60351: LD_VAR 0 7
60355: PPUSH
60356: CALL_OW 488
60360: IFFALSE 60395
60362: PUSH
60363: LD_VAR 0 5
60367: PPUSH
60368: LD_VAR 0 7
60372: PPUSH
60373: CALL_OW 428
60377: PPUSH
60378: CALL_OW 247
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 2
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: IN
60393: NOT
60394: AND
60395: IFFALSE 60439
// begin ComMoveXY ( unit , _x , _y ) ;
60397: LD_VAR 0 1
60401: PPUSH
60402: LD_VAR 0 5
60406: PPUSH
60407: LD_VAR 0 7
60411: PPUSH
60412: CALL_OW 111
// result := [ _x , _y ] ;
60416: LD_ADDR_VAR 0 3
60420: PUSH
60421: LD_VAR 0 5
60425: PUSH
60426: LD_VAR 0 7
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: ST_TO_ADDR
// exit ;
60435: POP
60436: POP
60437: GO 60443
// end ; end ;
60439: GO 60281
60441: POP
60442: POP
// end ;
60443: LD_VAR 0 3
60447: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60448: LD_INT 0
60450: PPUSH
60451: PPUSH
60452: PPUSH
// result := 0 ;
60453: LD_ADDR_VAR 0 3
60457: PUSH
60458: LD_INT 0
60460: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60461: LD_VAR 0 1
60465: PUSH
60466: LD_INT 0
60468: LESS
60469: IFTRUE 60481
60471: PUSH
60472: LD_VAR 0 1
60476: PUSH
60477: LD_INT 8
60479: GREATER
60480: OR
60481: IFTRUE 60493
60483: PUSH
60484: LD_VAR 0 2
60488: PUSH
60489: LD_INT 0
60491: LESS
60492: OR
60493: IFTRUE 60505
60495: PUSH
60496: LD_VAR 0 2
60500: PUSH
60501: LD_INT 8
60503: GREATER
60504: OR
60505: IFFALSE 60509
// exit ;
60507: GO 60584
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60509: LD_ADDR_VAR 0 4
60513: PUSH
60514: LD_INT 22
60516: PUSH
60517: LD_VAR 0 2
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PPUSH
60526: CALL_OW 69
60530: PUSH
60531: FOR_IN
60532: IFFALSE 60582
// begin un := UnitShoot ( i ) ;
60534: LD_ADDR_VAR 0 5
60538: PUSH
60539: LD_VAR 0 4
60543: PPUSH
60544: CALL_OW 504
60548: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60549: LD_VAR 0 5
60553: PPUSH
60554: CALL_OW 255
60558: PUSH
60559: LD_VAR 0 1
60563: EQUAL
60564: IFFALSE 60580
// begin result := un ;
60566: LD_ADDR_VAR 0 3
60570: PUSH
60571: LD_VAR 0 5
60575: ST_TO_ADDR
// exit ;
60576: POP
60577: POP
60578: GO 60584
// end ; end ;
60580: GO 60531
60582: POP
60583: POP
// end ;
60584: LD_VAR 0 3
60588: RET
// export function GetCargoBay ( units ) ; begin
60589: LD_INT 0
60591: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60592: LD_ADDR_VAR 0 2
60596: PUSH
60597: LD_VAR 0 1
60601: PPUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 34
60607: PUSH
60608: LD_INT 12
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 34
60617: PUSH
60618: LD_INT 51
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 34
60627: PUSH
60628: LD_INT 32
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 34
60637: PUSH
60638: LD_INT 89
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: PPUSH
60652: CALL_OW 72
60656: ST_TO_ADDR
// end ;
60657: LD_VAR 0 2
60661: RET
// export function Negate ( value ) ; begin
60662: LD_INT 0
60664: PPUSH
// result := not value ;
60665: LD_ADDR_VAR 0 2
60669: PUSH
60670: LD_VAR 0 1
60674: NOT
60675: ST_TO_ADDR
// end ;
60676: LD_VAR 0 2
60680: RET
// export function Inc ( value ) ; begin
60681: LD_INT 0
60683: PPUSH
// result := value + 1 ;
60684: LD_ADDR_VAR 0 2
60688: PUSH
60689: LD_VAR 0 1
60693: PUSH
60694: LD_INT 1
60696: PLUS
60697: ST_TO_ADDR
// end ;
60698: LD_VAR 0 2
60702: RET
// export function Dec ( value ) ; begin
60703: LD_INT 0
60705: PPUSH
// result := value - 1 ;
60706: LD_ADDR_VAR 0 2
60710: PUSH
60711: LD_VAR 0 1
60715: PUSH
60716: LD_INT 1
60718: MINUS
60719: ST_TO_ADDR
// end ;
60720: LD_VAR 0 2
60724: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60725: LD_INT 0
60727: PPUSH
60728: PPUSH
60729: PPUSH
60730: PPUSH
60731: PPUSH
60732: PPUSH
60733: PPUSH
60734: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60735: LD_VAR 0 1
60739: PPUSH
60740: LD_VAR 0 2
60744: PPUSH
60745: CALL_OW 488
60749: NOT
60750: IFTRUE 60769
60752: PUSH
60753: LD_VAR 0 3
60757: PPUSH
60758: LD_VAR 0 4
60762: PPUSH
60763: CALL_OW 488
60767: NOT
60768: OR
60769: IFFALSE 60782
// begin result := - 1 ;
60771: LD_ADDR_VAR 0 5
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: ST_TO_ADDR
// exit ;
60780: GO 61017
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60782: LD_ADDR_VAR 0 12
60786: PUSH
60787: LD_VAR 0 1
60791: PPUSH
60792: LD_VAR 0 2
60796: PPUSH
60797: LD_VAR 0 3
60801: PPUSH
60802: LD_VAR 0 4
60806: PPUSH
60807: CALL 59853 0 4
60811: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60812: LD_ADDR_VAR 0 11
60816: PUSH
60817: LD_VAR 0 1
60821: PPUSH
60822: LD_VAR 0 2
60826: PPUSH
60827: LD_VAR 0 12
60831: PUSH
60832: LD_INT 1
60834: ARRAY
60835: PPUSH
60836: LD_VAR 0 12
60840: PUSH
60841: LD_INT 2
60843: ARRAY
60844: PPUSH
60845: CALL_OW 298
60849: ST_TO_ADDR
// distance := 9999 ;
60850: LD_ADDR_VAR 0 10
60854: PUSH
60855: LD_INT 9999
60857: ST_TO_ADDR
// for i := 0 to 5 do
60858: LD_ADDR_VAR 0 6
60862: PUSH
60863: DOUBLE
60864: LD_INT 0
60866: DEC
60867: ST_TO_ADDR
60868: LD_INT 5
60870: PUSH
60871: FOR_TO
60872: IFFALSE 61015
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60874: LD_ADDR_VAR 0 7
60878: PUSH
60879: LD_VAR 0 1
60883: PPUSH
60884: LD_VAR 0 6
60888: PPUSH
60889: LD_VAR 0 11
60893: PPUSH
60894: CALL_OW 272
60898: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60899: LD_ADDR_VAR 0 8
60903: PUSH
60904: LD_VAR 0 2
60908: PPUSH
60909: LD_VAR 0 6
60913: PPUSH
60914: LD_VAR 0 11
60918: PPUSH
60919: CALL_OW 273
60923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60924: LD_VAR 0 7
60928: PPUSH
60929: LD_VAR 0 8
60933: PPUSH
60934: CALL_OW 488
60938: NOT
60939: IFFALSE 60943
// continue ;
60941: GO 60871
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60943: LD_ADDR_VAR 0 9
60947: PUSH
60948: LD_VAR 0 12
60952: PUSH
60953: LD_INT 1
60955: ARRAY
60956: PPUSH
60957: LD_VAR 0 12
60961: PUSH
60962: LD_INT 2
60964: ARRAY
60965: PPUSH
60966: LD_VAR 0 7
60970: PPUSH
60971: LD_VAR 0 8
60975: PPUSH
60976: CALL_OW 298
60980: ST_TO_ADDR
// if tmp < distance then
60981: LD_VAR 0 9
60985: PUSH
60986: LD_VAR 0 10
60990: LESS
60991: IFFALSE 61013
// begin result := i ;
60993: LD_ADDR_VAR 0 5
60997: PUSH
60998: LD_VAR 0 6
61002: ST_TO_ADDR
// distance := tmp ;
61003: LD_ADDR_VAR 0 10
61007: PUSH
61008: LD_VAR 0 9
61012: ST_TO_ADDR
// end ; end ;
61013: GO 60871
61015: POP
61016: POP
// end ;
61017: LD_VAR 0 5
61021: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61022: LD_INT 0
61024: PPUSH
61025: PPUSH
// if not driver or not IsInUnit ( driver ) then
61026: LD_VAR 0 1
61030: NOT
61031: IFTRUE 61045
61033: PUSH
61034: LD_VAR 0 1
61038: PPUSH
61039: CALL_OW 310
61043: NOT
61044: OR
61045: IFFALSE 61049
// exit ;
61047: GO 61139
// vehicle := IsInUnit ( driver ) ;
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_VAR 0 1
61058: PPUSH
61059: CALL_OW 310
61063: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61064: LD_VAR 0 1
61068: PPUSH
61069: LD_STRING \
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 0
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: PUSH
61099: LD_STRING E
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_VAR 0 3
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PPUSH
61135: CALL_OW 446
// end ;
61139: LD_VAR 0 2
61143: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61144: LD_INT 0
61146: PPUSH
61147: PPUSH
// if not driver or not IsInUnit ( driver ) then
61148: LD_VAR 0 1
61152: NOT
61153: IFTRUE 61167
61155: PUSH
61156: LD_VAR 0 1
61160: PPUSH
61161: CALL_OW 310
61165: NOT
61166: OR
61167: IFFALSE 61171
// exit ;
61169: GO 61261
// vehicle := IsInUnit ( driver ) ;
61171: LD_ADDR_VAR 0 3
61175: PUSH
61176: LD_VAR 0 1
61180: PPUSH
61181: CALL_OW 310
61185: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61186: LD_VAR 0 1
61190: PPUSH
61191: LD_STRING \
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: PUSH
61221: LD_STRING E
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_INT 0
61229: PUSH
61230: LD_VAR 0 3
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PPUSH
61257: CALL_OW 447
// end ;
61261: LD_VAR 0 2
61265: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
61270: PPUSH
// tmp := [ ] ;
61271: LD_ADDR_VAR 0 5
61275: PUSH
61276: EMPTY
61277: ST_TO_ADDR
// for i in units do
61278: LD_ADDR_VAR 0 4
61282: PUSH
61283: LD_VAR 0 1
61287: PUSH
61288: FOR_IN
61289: IFFALSE 61327
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61291: LD_ADDR_VAR 0 5
61295: PUSH
61296: LD_VAR 0 5
61300: PPUSH
61301: LD_VAR 0 5
61305: PUSH
61306: LD_INT 1
61308: PLUS
61309: PPUSH
61310: LD_VAR 0 4
61314: PPUSH
61315: CALL_OW 256
61319: PPUSH
61320: CALL_OW 2
61324: ST_TO_ADDR
61325: GO 61288
61327: POP
61328: POP
// if not tmp then
61329: LD_VAR 0 5
61333: NOT
61334: IFFALSE 61338
// exit ;
61336: GO 61386
// if asc then
61338: LD_VAR 0 2
61342: IFFALSE 61366
// result := SortListByListAsc ( units , tmp ) else
61344: LD_ADDR_VAR 0 3
61348: PUSH
61349: LD_VAR 0 1
61353: PPUSH
61354: LD_VAR 0 5
61358: PPUSH
61359: CALL_OW 76
61363: ST_TO_ADDR
61364: GO 61386
// result := SortListByListDesc ( units , tmp ) ;
61366: LD_ADDR_VAR 0 3
61370: PUSH
61371: LD_VAR 0 1
61375: PPUSH
61376: LD_VAR 0 5
61380: PPUSH
61381: CALL_OW 77
61385: ST_TO_ADDR
// end ;
61386: LD_VAR 0 3
61390: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61391: LD_INT 0
61393: PPUSH
61394: PPUSH
// task := GetTaskList ( mech ) ;
61395: LD_ADDR_VAR 0 4
61399: PUSH
61400: LD_VAR 0 1
61404: PPUSH
61405: CALL_OW 437
61409: ST_TO_ADDR
// if not task then
61410: LD_VAR 0 4
61414: NOT
61415: IFFALSE 61419
// exit ;
61417: GO 61463
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61419: LD_ADDR_VAR 0 3
61423: PUSH
61424: LD_VAR 0 4
61428: PUSH
61429: LD_INT 1
61431: ARRAY
61432: PUSH
61433: LD_INT 1
61435: ARRAY
61436: PUSH
61437: LD_STRING r
61439: EQUAL
61440: IFFALSE 61462
61442: PUSH
61443: LD_VAR 0 4
61447: PUSH
61448: LD_INT 1
61450: ARRAY
61451: PUSH
61452: LD_INT 4
61454: ARRAY
61455: PUSH
61456: LD_VAR 0 2
61460: EQUAL
61461: AND
61462: ST_TO_ADDR
// end ;
61463: LD_VAR 0 3
61467: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61468: LD_INT 0
61470: PPUSH
// SetDir ( unit , d ) ;
61471: LD_VAR 0 1
61475: PPUSH
61476: LD_VAR 0 4
61480: PPUSH
61481: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
61485: LD_ADDR_VAR 0 6
61489: PUSH
61490: LD_VAR 0 1
61494: PPUSH
61495: LD_VAR 0 2
61499: PPUSH
61500: LD_VAR 0 3
61504: PPUSH
61505: LD_VAR 0 5
61509: PPUSH
61510: CALL_OW 48
61514: ST_TO_ADDR
// end ;
61515: LD_VAR 0 6
61519: RET
// export function ToNaturalNumber ( number ) ; begin
61520: LD_INT 0
61522: PPUSH
// result := number div 1 ;
61523: LD_ADDR_VAR 0 2
61527: PUSH
61528: LD_VAR 0 1
61532: PUSH
61533: LD_INT 1
61535: DIV
61536: ST_TO_ADDR
// if number < 0 then
61537: LD_VAR 0 1
61541: PUSH
61542: LD_INT 0
61544: LESS
61545: IFFALSE 61555
// result := 0 ;
61547: LD_ADDR_VAR 0 2
61551: PUSH
61552: LD_INT 0
61554: ST_TO_ADDR
// end ;
61555: LD_VAR 0 2
61559: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
61560: LD_INT 0
61562: PPUSH
61563: PPUSH
61564: PPUSH
// if not buildings then
61565: LD_VAR 0 1
61569: NOT
61570: IFFALSE 61574
// exit ;
61572: GO 61689
// tmp := [ ] ;
61574: LD_ADDR_VAR 0 5
61578: PUSH
61579: EMPTY
61580: ST_TO_ADDR
// for b in buildings do
61581: LD_ADDR_VAR 0 4
61585: PUSH
61586: LD_VAR 0 1
61590: PUSH
61591: FOR_IN
61592: IFFALSE 61630
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
61594: LD_ADDR_VAR 0 5
61598: PUSH
61599: LD_VAR 0 5
61603: PPUSH
61604: LD_VAR 0 5
61608: PUSH
61609: LD_INT 1
61611: PLUS
61612: PPUSH
61613: LD_VAR 0 4
61617: PPUSH
61618: CALL_OW 266
61622: PPUSH
61623: CALL_OW 1
61627: ST_TO_ADDR
61628: GO 61591
61630: POP
61631: POP
// if not tmp then
61632: LD_VAR 0 5
61636: NOT
61637: IFFALSE 61641
// exit ;
61639: GO 61689
// if asc then
61641: LD_VAR 0 2
61645: IFFALSE 61669
// result := SortListByListAsc ( buildings , tmp ) else
61647: LD_ADDR_VAR 0 3
61651: PUSH
61652: LD_VAR 0 1
61656: PPUSH
61657: LD_VAR 0 5
61661: PPUSH
61662: CALL_OW 76
61666: ST_TO_ADDR
61667: GO 61689
// result := SortListByListDesc ( buildings , tmp ) ;
61669: LD_ADDR_VAR 0 3
61673: PUSH
61674: LD_VAR 0 1
61678: PPUSH
61679: LD_VAR 0 5
61683: PPUSH
61684: CALL_OW 77
61688: ST_TO_ADDR
// end ;
61689: LD_VAR 0 3
61693: RET
// export function SortByClass ( units , class ) ; var un ; begin
61694: LD_INT 0
61696: PPUSH
61697: PPUSH
// if not units or not class then
61698: LD_VAR 0 1
61702: NOT
61703: IFTRUE 61712
61705: PUSH
61706: LD_VAR 0 2
61710: NOT
61711: OR
61712: IFFALSE 61716
// exit ;
61714: GO 61811
// result := [ ] ;
61716: LD_ADDR_VAR 0 3
61720: PUSH
61721: EMPTY
61722: ST_TO_ADDR
// for un in units do
61723: LD_ADDR_VAR 0 4
61727: PUSH
61728: LD_VAR 0 1
61732: PUSH
61733: FOR_IN
61734: IFFALSE 61809
// if GetClass ( un ) = class then
61736: LD_VAR 0 4
61740: PPUSH
61741: CALL_OW 257
61745: PUSH
61746: LD_VAR 0 2
61750: EQUAL
61751: IFFALSE 61778
// result := Insert ( result , 1 , un ) else
61753: LD_ADDR_VAR 0 3
61757: PUSH
61758: LD_VAR 0 3
61762: PPUSH
61763: LD_INT 1
61765: PPUSH
61766: LD_VAR 0 4
61770: PPUSH
61771: CALL_OW 2
61775: ST_TO_ADDR
61776: GO 61807
// result := Replace ( result , result + 1 , un ) ;
61778: LD_ADDR_VAR 0 3
61782: PUSH
61783: LD_VAR 0 3
61787: PPUSH
61788: LD_VAR 0 3
61792: PUSH
61793: LD_INT 1
61795: PLUS
61796: PPUSH
61797: LD_VAR 0 4
61801: PPUSH
61802: CALL_OW 1
61806: ST_TO_ADDR
61807: GO 61733
61809: POP
61810: POP
// end ;
61811: LD_VAR 0 3
61815: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61816: LD_INT 0
61818: PPUSH
61819: PPUSH
61820: PPUSH
61821: PPUSH
61822: PPUSH
61823: PPUSH
61824: PPUSH
// result := [ ] ;
61825: LD_ADDR_VAR 0 4
61829: PUSH
61830: EMPTY
61831: ST_TO_ADDR
// if x - r < 0 then
61832: LD_VAR 0 1
61836: PUSH
61837: LD_VAR 0 3
61841: MINUS
61842: PUSH
61843: LD_INT 0
61845: LESS
61846: IFFALSE 61858
// min_x := 0 else
61848: LD_ADDR_VAR 0 8
61852: PUSH
61853: LD_INT 0
61855: ST_TO_ADDR
61856: GO 61874
// min_x := x - r ;
61858: LD_ADDR_VAR 0 8
61862: PUSH
61863: LD_VAR 0 1
61867: PUSH
61868: LD_VAR 0 3
61872: MINUS
61873: ST_TO_ADDR
// if y - r < 0 then
61874: LD_VAR 0 2
61878: PUSH
61879: LD_VAR 0 3
61883: MINUS
61884: PUSH
61885: LD_INT 0
61887: LESS
61888: IFFALSE 61900
// min_y := 0 else
61890: LD_ADDR_VAR 0 7
61894: PUSH
61895: LD_INT 0
61897: ST_TO_ADDR
61898: GO 61916
// min_y := y - r ;
61900: LD_ADDR_VAR 0 7
61904: PUSH
61905: LD_VAR 0 2
61909: PUSH
61910: LD_VAR 0 3
61914: MINUS
61915: ST_TO_ADDR
// max_x := x + r ;
61916: LD_ADDR_VAR 0 9
61920: PUSH
61921: LD_VAR 0 1
61925: PUSH
61926: LD_VAR 0 3
61930: PLUS
61931: ST_TO_ADDR
// max_y := y + r ;
61932: LD_ADDR_VAR 0 10
61936: PUSH
61937: LD_VAR 0 2
61941: PUSH
61942: LD_VAR 0 3
61946: PLUS
61947: ST_TO_ADDR
// for _x = min_x to max_x do
61948: LD_ADDR_VAR 0 5
61952: PUSH
61953: DOUBLE
61954: LD_VAR 0 8
61958: DEC
61959: ST_TO_ADDR
61960: LD_VAR 0 9
61964: PUSH
61965: FOR_TO
61966: IFFALSE 62067
// for _y = min_y to max_y do
61968: LD_ADDR_VAR 0 6
61972: PUSH
61973: DOUBLE
61974: LD_VAR 0 7
61978: DEC
61979: ST_TO_ADDR
61980: LD_VAR 0 10
61984: PUSH
61985: FOR_TO
61986: IFFALSE 62063
// begin if not ValidHex ( _x , _y ) then
61988: LD_VAR 0 5
61992: PPUSH
61993: LD_VAR 0 6
61997: PPUSH
61998: CALL_OW 488
62002: NOT
62003: IFFALSE 62007
// continue ;
62005: GO 61985
// if GetResourceTypeXY ( _x , _y ) then
62007: LD_VAR 0 5
62011: PPUSH
62012: LD_VAR 0 6
62016: PPUSH
62017: CALL_OW 283
62021: IFFALSE 62061
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62023: LD_ADDR_VAR 0 4
62027: PUSH
62028: LD_VAR 0 4
62032: PPUSH
62033: LD_VAR 0 4
62037: PUSH
62038: LD_INT 1
62040: PLUS
62041: PPUSH
62042: LD_VAR 0 5
62046: PUSH
62047: LD_VAR 0 6
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PPUSH
62056: CALL_OW 1
62060: ST_TO_ADDR
// end ;
62061: GO 61985
62063: POP
62064: POP
62065: GO 61965
62067: POP
62068: POP
// end ;
62069: LD_VAR 0 4
62073: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62074: LD_INT 0
62076: PPUSH
62077: PPUSH
62078: PPUSH
62079: PPUSH
62080: PPUSH
62081: PPUSH
62082: PPUSH
62083: PPUSH
// if not units then
62084: LD_VAR 0 1
62088: NOT
62089: IFFALSE 62093
// exit ;
62091: GO 62625
// result := UnitFilter ( units , [ f_ok ] ) ;
62093: LD_ADDR_VAR 0 3
62097: PUSH
62098: LD_VAR 0 1
62102: PPUSH
62103: LD_INT 50
62105: PUSH
62106: EMPTY
62107: LIST
62108: PPUSH
62109: CALL_OW 72
62113: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62114: LD_ADDR_VAR 0 8
62118: PUSH
62119: LD_VAR 0 1
62123: PUSH
62124: LD_INT 1
62126: ARRAY
62127: PPUSH
62128: CALL_OW 255
62132: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62133: LD_ADDR_VAR 0 10
62137: PUSH
62138: LD_INT 29
62140: PUSH
62141: LD_INT 91
62143: PUSH
62144: LD_INT 49
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: LIST
62151: ST_TO_ADDR
// if not result then
62152: LD_VAR 0 3
62156: NOT
62157: IFFALSE 62161
// exit ;
62159: GO 62625
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62161: LD_ADDR_VAR 0 5
62165: PUSH
62166: LD_INT 81
62168: PUSH
62169: LD_VAR 0 8
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PPUSH
62178: CALL_OW 69
62182: ST_TO_ADDR
// for i in result do
62183: LD_ADDR_VAR 0 4
62187: PUSH
62188: LD_VAR 0 3
62192: PUSH
62193: FOR_IN
62194: IFFALSE 62623
// begin tag := GetTag ( i ) + 1 ;
62196: LD_ADDR_VAR 0 9
62200: PUSH
62201: LD_VAR 0 4
62205: PPUSH
62206: CALL_OW 110
62210: PUSH
62211: LD_INT 1
62213: PLUS
62214: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
62215: LD_ADDR_VAR 0 7
62219: PUSH
62220: LD_VAR 0 4
62224: PPUSH
62225: CALL_OW 250
62229: PPUSH
62230: LD_VAR 0 4
62234: PPUSH
62235: CALL_OW 251
62239: PPUSH
62240: LD_INT 4
62242: PPUSH
62243: CALL 61816 0 3
62247: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
62248: LD_VAR 0 4
62252: PPUSH
62253: CALL_OW 247
62257: PUSH
62258: LD_INT 2
62260: EQUAL
62261: IFFALSE 62273
62263: PUSH
62264: LD_VAR 0 7
62268: PUSH
62269: LD_INT 2
62271: GREATER
62272: AND
62273: IFFALSE 62293
62275: PUSH
62276: LD_VAR 0 4
62280: PPUSH
62281: CALL_OW 264
62285: PUSH
62286: LD_VAR 0 10
62290: IN
62291: NOT
62292: AND
62293: IFFALSE 62332
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62295: LD_VAR 0 4
62299: PPUSH
62300: LD_VAR 0 7
62304: PUSH
62305: LD_INT 1
62307: ARRAY
62308: PUSH
62309: LD_INT 1
62311: ARRAY
62312: PPUSH
62313: LD_VAR 0 7
62317: PUSH
62318: LD_INT 1
62320: ARRAY
62321: PUSH
62322: LD_INT 2
62324: ARRAY
62325: PPUSH
62326: CALL_OW 116
62330: GO 62621
// if path > tag then
62332: LD_VAR 0 2
62336: PUSH
62337: LD_VAR 0 9
62341: GREATER
62342: IFFALSE 62550
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62344: LD_ADDR_VAR 0 6
62348: PUSH
62349: LD_VAR 0 5
62353: PPUSH
62354: LD_INT 91
62356: PUSH
62357: LD_VAR 0 4
62361: PUSH
62362: LD_INT 8
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: PPUSH
62370: CALL_OW 72
62374: ST_TO_ADDR
// if nearEnemy then
62375: LD_VAR 0 6
62379: IFFALSE 62448
// begin if GetWeapon ( i ) = ru_time_lapser then
62381: LD_VAR 0 4
62385: PPUSH
62386: CALL_OW 264
62390: PUSH
62391: LD_INT 49
62393: EQUAL
62394: IFFALSE 62422
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62396: LD_VAR 0 4
62400: PPUSH
62401: LD_VAR 0 6
62405: PPUSH
62406: LD_VAR 0 4
62410: PPUSH
62411: CALL_OW 74
62415: PPUSH
62416: CALL_OW 112
62420: GO 62446
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62422: LD_VAR 0 4
62426: PPUSH
62427: LD_VAR 0 6
62431: PPUSH
62432: LD_VAR 0 4
62436: PPUSH
62437: CALL_OW 74
62441: PPUSH
62442: CALL 63706 0 2
// end else
62446: GO 62548
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62448: LD_VAR 0 4
62452: PPUSH
62453: LD_VAR 0 2
62457: PUSH
62458: LD_VAR 0 9
62462: ARRAY
62463: PUSH
62464: LD_INT 1
62466: ARRAY
62467: PPUSH
62468: LD_VAR 0 2
62472: PUSH
62473: LD_VAR 0 9
62477: ARRAY
62478: PUSH
62479: LD_INT 2
62481: ARRAY
62482: PPUSH
62483: CALL_OW 297
62487: PUSH
62488: LD_INT 6
62490: GREATER
62491: IFFALSE 62534
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62493: LD_VAR 0 4
62497: PPUSH
62498: LD_VAR 0 2
62502: PUSH
62503: LD_VAR 0 9
62507: ARRAY
62508: PUSH
62509: LD_INT 1
62511: ARRAY
62512: PPUSH
62513: LD_VAR 0 2
62517: PUSH
62518: LD_VAR 0 9
62522: ARRAY
62523: PUSH
62524: LD_INT 2
62526: ARRAY
62527: PPUSH
62528: CALL_OW 114
62532: GO 62548
// SetTag ( i , tag ) ;
62534: LD_VAR 0 4
62538: PPUSH
62539: LD_VAR 0 9
62543: PPUSH
62544: CALL_OW 109
// end else
62548: GO 62621
// if enemy then
62550: LD_VAR 0 5
62554: IFFALSE 62621
// begin if GetWeapon ( i ) = ru_time_lapser then
62556: LD_VAR 0 4
62560: PPUSH
62561: CALL_OW 264
62565: PUSH
62566: LD_INT 49
62568: EQUAL
62569: IFFALSE 62597
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62571: LD_VAR 0 4
62575: PPUSH
62576: LD_VAR 0 5
62580: PPUSH
62581: LD_VAR 0 4
62585: PPUSH
62586: CALL_OW 74
62590: PPUSH
62591: CALL_OW 112
62595: GO 62621
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62597: LD_VAR 0 4
62601: PPUSH
62602: LD_VAR 0 5
62606: PPUSH
62607: LD_VAR 0 4
62611: PPUSH
62612: CALL_OW 74
62616: PPUSH
62617: CALL 63706 0 2
// end ; end ;
62621: GO 62193
62623: POP
62624: POP
// end ;
62625: LD_VAR 0 3
62629: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62630: LD_INT 0
62632: PPUSH
62633: PPUSH
62634: PPUSH
// if not unit or IsInUnit ( unit ) then
62635: LD_VAR 0 1
62639: NOT
62640: IFTRUE 62653
62642: PUSH
62643: LD_VAR 0 1
62647: PPUSH
62648: CALL_OW 310
62652: OR
62653: IFFALSE 62657
// exit ;
62655: GO 62748
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62657: LD_ADDR_VAR 0 4
62661: PUSH
62662: LD_VAR 0 1
62666: PPUSH
62667: CALL_OW 250
62671: PPUSH
62672: LD_VAR 0 2
62676: PPUSH
62677: LD_INT 1
62679: PPUSH
62680: CALL_OW 272
62684: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62685: LD_ADDR_VAR 0 5
62689: PUSH
62690: LD_VAR 0 1
62694: PPUSH
62695: CALL_OW 251
62699: PPUSH
62700: LD_VAR 0 2
62704: PPUSH
62705: LD_INT 1
62707: PPUSH
62708: CALL_OW 273
62712: ST_TO_ADDR
// if ValidHex ( x , y ) then
62713: LD_VAR 0 4
62717: PPUSH
62718: LD_VAR 0 5
62722: PPUSH
62723: CALL_OW 488
62727: IFFALSE 62748
// ComTurnXY ( unit , x , y ) ;
62729: LD_VAR 0 1
62733: PPUSH
62734: LD_VAR 0 4
62738: PPUSH
62739: LD_VAR 0 5
62743: PPUSH
62744: CALL_OW 118
// end ;
62748: LD_VAR 0 3
62752: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62753: LD_INT 0
62755: PPUSH
62756: PPUSH
// result := false ;
62757: LD_ADDR_VAR 0 3
62761: PUSH
62762: LD_INT 0
62764: ST_TO_ADDR
// if not units then
62765: LD_VAR 0 2
62769: NOT
62770: IFFALSE 62774
// exit ;
62772: GO 62819
// for i in units do
62774: LD_ADDR_VAR 0 4
62778: PUSH
62779: LD_VAR 0 2
62783: PUSH
62784: FOR_IN
62785: IFFALSE 62817
// if See ( side , i ) then
62787: LD_VAR 0 1
62791: PPUSH
62792: LD_VAR 0 4
62796: PPUSH
62797: CALL_OW 292
62801: IFFALSE 62815
// begin result := true ;
62803: LD_ADDR_VAR 0 3
62807: PUSH
62808: LD_INT 1
62810: ST_TO_ADDR
// exit ;
62811: POP
62812: POP
62813: GO 62819
// end ;
62815: GO 62784
62817: POP
62818: POP
// end ;
62819: LD_VAR 0 3
62823: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62824: LD_INT 0
62826: PPUSH
62827: PPUSH
62828: PPUSH
62829: PPUSH
// if not unit or not points then
62830: LD_VAR 0 1
62834: NOT
62835: IFTRUE 62844
62837: PUSH
62838: LD_VAR 0 2
62842: NOT
62843: OR
62844: IFFALSE 62848
// exit ;
62846: GO 62938
// dist := 99999 ;
62848: LD_ADDR_VAR 0 5
62852: PUSH
62853: LD_INT 99999
62855: ST_TO_ADDR
// for i in points do
62856: LD_ADDR_VAR 0 4
62860: PUSH
62861: LD_VAR 0 2
62865: PUSH
62866: FOR_IN
62867: IFFALSE 62936
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62869: LD_ADDR_VAR 0 6
62873: PUSH
62874: LD_VAR 0 1
62878: PPUSH
62879: LD_VAR 0 4
62883: PUSH
62884: LD_INT 1
62886: ARRAY
62887: PPUSH
62888: LD_VAR 0 4
62892: PUSH
62893: LD_INT 2
62895: ARRAY
62896: PPUSH
62897: CALL_OW 297
62901: ST_TO_ADDR
// if tmpDist < dist then
62902: LD_VAR 0 6
62906: PUSH
62907: LD_VAR 0 5
62911: LESS
62912: IFFALSE 62934
// begin result := i ;
62914: LD_ADDR_VAR 0 3
62918: PUSH
62919: LD_VAR 0 4
62923: ST_TO_ADDR
// dist := tmpDist ;
62924: LD_ADDR_VAR 0 5
62928: PUSH
62929: LD_VAR 0 6
62933: ST_TO_ADDR
// end ; end ;
62934: GO 62866
62936: POP
62937: POP
// end ;
62938: LD_VAR 0 3
62942: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62943: LD_INT 0
62945: PPUSH
// uc_side := side ;
62946: LD_ADDR_OWVAR 20
62950: PUSH
62951: LD_VAR 0 1
62955: ST_TO_ADDR
// uc_nation := 3 ;
62956: LD_ADDR_OWVAR 21
62960: PUSH
62961: LD_INT 3
62963: ST_TO_ADDR
// vc_chassis := 25 ;
62964: LD_ADDR_OWVAR 37
62968: PUSH
62969: LD_INT 25
62971: ST_TO_ADDR
// vc_engine := engine_siberite ;
62972: LD_ADDR_OWVAR 39
62976: PUSH
62977: LD_INT 3
62979: ST_TO_ADDR
// vc_control := control_computer ;
62980: LD_ADDR_OWVAR 38
62984: PUSH
62985: LD_INT 3
62987: ST_TO_ADDR
// vc_weapon := 59 ;
62988: LD_ADDR_OWVAR 40
62992: PUSH
62993: LD_INT 59
62995: ST_TO_ADDR
// result := CreateVehicle ;
62996: LD_ADDR_VAR 0 5
63000: PUSH
63001: CALL_OW 45
63005: ST_TO_ADDR
// SetDir ( result , d ) ;
63006: LD_VAR 0 5
63010: PPUSH
63011: LD_VAR 0 4
63015: PPUSH
63016: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63020: LD_VAR 0 5
63024: PPUSH
63025: LD_VAR 0 2
63029: PPUSH
63030: LD_VAR 0 3
63034: PPUSH
63035: LD_INT 0
63037: PPUSH
63038: CALL_OW 48
// end ;
63042: LD_VAR 0 5
63046: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63047: LD_INT 0
63049: PPUSH
63050: PPUSH
63051: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63052: LD_ADDR_VAR 0 2
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63075: LD_VAR 0 1
63079: NOT
63080: IFTRUE 63113
63082: PUSH
63083: LD_VAR 0 1
63087: PPUSH
63088: CALL_OW 264
63092: PUSH
63093: LD_INT 12
63095: PUSH
63096: LD_INT 51
63098: PUSH
63099: LD_INT 32
63101: PUSH
63102: LD_INT 89
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: IN
63111: NOT
63112: OR
63113: IFFALSE 63117
// exit ;
63115: GO 63215
// for i := 1 to 3 do
63117: LD_ADDR_VAR 0 3
63121: PUSH
63122: DOUBLE
63123: LD_INT 1
63125: DEC
63126: ST_TO_ADDR
63127: LD_INT 3
63129: PUSH
63130: FOR_TO
63131: IFFALSE 63213
// begin tmp := GetCargo ( cargo , i ) ;
63133: LD_ADDR_VAR 0 4
63137: PUSH
63138: LD_VAR 0 1
63142: PPUSH
63143: LD_VAR 0 3
63147: PPUSH
63148: CALL_OW 289
63152: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63153: LD_ADDR_VAR 0 2
63157: PUSH
63158: LD_VAR 0 2
63162: PPUSH
63163: LD_VAR 0 3
63167: PPUSH
63168: LD_VAR 0 4
63172: PPUSH
63173: CALL_OW 1
63177: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63178: LD_ADDR_VAR 0 2
63182: PUSH
63183: LD_VAR 0 2
63187: PPUSH
63188: LD_INT 4
63190: PPUSH
63191: LD_VAR 0 2
63195: PUSH
63196: LD_INT 4
63198: ARRAY
63199: PUSH
63200: LD_VAR 0 4
63204: PLUS
63205: PPUSH
63206: CALL_OW 1
63210: ST_TO_ADDR
// end ;
63211: GO 63130
63213: POP
63214: POP
// end ;
63215: LD_VAR 0 2
63219: RET
// export function Length ( array ) ; begin
63220: LD_INT 0
63222: PPUSH
// result := array + 0 ;
63223: LD_ADDR_VAR 0 2
63227: PUSH
63228: LD_VAR 0 1
63232: PUSH
63233: LD_INT 0
63235: PLUS
63236: ST_TO_ADDR
// end ;
63237: LD_VAR 0 2
63241: RET
// export function PrepareArray ( array ) ; begin
63242: LD_INT 0
63244: PPUSH
// result := array diff 0 ;
63245: LD_ADDR_VAR 0 2
63249: PUSH
63250: LD_VAR 0 1
63254: PUSH
63255: LD_INT 0
63257: DIFF
63258: ST_TO_ADDR
// if not result [ 1 ] then
63259: LD_VAR 0 2
63263: PUSH
63264: LD_INT 1
63266: ARRAY
63267: NOT
63268: IFFALSE 63288
// result := Delete ( result , 1 ) ;
63270: LD_ADDR_VAR 0 2
63274: PUSH
63275: LD_VAR 0 2
63279: PPUSH
63280: LD_INT 1
63282: PPUSH
63283: CALL_OW 3
63287: ST_TO_ADDR
// end ;
63288: LD_VAR 0 2
63292: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63293: LD_INT 0
63295: PPUSH
63296: PPUSH
63297: PPUSH
63298: PPUSH
// sibRocketRange := 25 ;
63299: LD_ADDR_VAR 0 6
63303: PUSH
63304: LD_INT 25
63306: ST_TO_ADDR
// result := false ;
63307: LD_ADDR_VAR 0 4
63311: PUSH
63312: LD_INT 0
63314: ST_TO_ADDR
// for i := 0 to 5 do
63315: LD_ADDR_VAR 0 5
63319: PUSH
63320: DOUBLE
63321: LD_INT 0
63323: DEC
63324: ST_TO_ADDR
63325: LD_INT 5
63327: PUSH
63328: FOR_TO
63329: IFFALSE 63396
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63331: LD_VAR 0 1
63335: PPUSH
63336: LD_VAR 0 5
63340: PPUSH
63341: LD_VAR 0 6
63345: PPUSH
63346: CALL_OW 272
63350: PPUSH
63351: LD_VAR 0 2
63355: PPUSH
63356: LD_VAR 0 5
63360: PPUSH
63361: LD_VAR 0 6
63365: PPUSH
63366: CALL_OW 273
63370: PPUSH
63371: LD_VAR 0 3
63375: PPUSH
63376: CALL_OW 309
63380: IFFALSE 63394
// begin result := true ;
63382: LD_ADDR_VAR 0 4
63386: PUSH
63387: LD_INT 1
63389: ST_TO_ADDR
// exit ;
63390: POP
63391: POP
63392: GO 63398
// end ;
63394: GO 63328
63396: POP
63397: POP
// end ;
63398: LD_VAR 0 4
63402: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
63403: LD_INT 0
63405: PPUSH
63406: PPUSH
63407: PPUSH
// if btype = b_depot then
63408: LD_VAR 0 2
63412: PUSH
63413: LD_INT 0
63415: EQUAL
63416: IFFALSE 63428
// begin result := true ;
63418: LD_ADDR_VAR 0 3
63422: PUSH
63423: LD_INT 1
63425: ST_TO_ADDR
// exit ;
63426: GO 63548
// end ; pom := GetBase ( depot ) ;
63428: LD_ADDR_VAR 0 4
63432: PUSH
63433: LD_VAR 0 1
63437: PPUSH
63438: CALL_OW 274
63442: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63443: LD_ADDR_VAR 0 5
63447: PUSH
63448: LD_VAR 0 2
63452: PPUSH
63453: LD_VAR 0 1
63457: PPUSH
63458: CALL_OW 248
63462: PPUSH
63463: CALL_OW 450
63467: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
63468: LD_ADDR_VAR 0 3
63472: PUSH
63473: LD_VAR 0 4
63477: PPUSH
63478: LD_INT 1
63480: PPUSH
63481: CALL_OW 275
63485: PUSH
63486: LD_VAR 0 5
63490: PUSH
63491: LD_INT 1
63493: ARRAY
63494: GREATEREQUAL
63495: IFFALSE 63521
63497: PUSH
63498: LD_VAR 0 4
63502: PPUSH
63503: LD_INT 2
63505: PPUSH
63506: CALL_OW 275
63510: PUSH
63511: LD_VAR 0 5
63515: PUSH
63516: LD_INT 2
63518: ARRAY
63519: GREATEREQUAL
63520: AND
63521: IFFALSE 63547
63523: PUSH
63524: LD_VAR 0 4
63528: PPUSH
63529: LD_INT 3
63531: PPUSH
63532: CALL_OW 275
63536: PUSH
63537: LD_VAR 0 5
63541: PUSH
63542: LD_INT 3
63544: ARRAY
63545: GREATEREQUAL
63546: AND
63547: ST_TO_ADDR
// end ;
63548: LD_VAR 0 3
63552: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63553: LD_INT 0
63555: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63556: LD_VAR 0 1
63560: PPUSH
63561: LD_VAR 0 2
63565: PPUSH
63566: LD_INT 0
63568: PPUSH
63569: LD_INT 0
63571: PPUSH
63572: LD_INT 1
63574: PPUSH
63575: LD_INT 0
63577: PPUSH
63578: CALL_OW 587
// end ;
63582: LD_VAR 0 3
63586: RET
// export function CenterOnNow ( unit ) ; begin
63587: LD_INT 0
63589: PPUSH
// result := IsInUnit ( unit ) ;
63590: LD_ADDR_VAR 0 2
63594: PUSH
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 310
63604: ST_TO_ADDR
// if not result then
63605: LD_VAR 0 2
63609: NOT
63610: IFFALSE 63622
// result := unit ;
63612: LD_ADDR_VAR 0 2
63616: PUSH
63617: LD_VAR 0 1
63621: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63622: LD_VAR 0 1
63626: PPUSH
63627: CALL_OW 87
// end ;
63631: LD_VAR 0 2
63635: RET
// export function ComMoveHex ( unit , hex ) ; begin
63636: LD_INT 0
63638: PPUSH
// if not hex then
63639: LD_VAR 0 2
63643: NOT
63644: IFFALSE 63648
// exit ;
63646: GO 63701
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63648: LD_VAR 0 2
63652: PUSH
63653: LD_INT 1
63655: ARRAY
63656: PPUSH
63657: LD_VAR 0 2
63661: PUSH
63662: LD_INT 2
63664: ARRAY
63665: PPUSH
63666: CALL_OW 428
63670: IFFALSE 63674
// exit ;
63672: GO 63701
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63674: LD_VAR 0 1
63678: PPUSH
63679: LD_VAR 0 2
63683: PUSH
63684: LD_INT 1
63686: ARRAY
63687: PPUSH
63688: LD_VAR 0 2
63692: PUSH
63693: LD_INT 2
63695: ARRAY
63696: PPUSH
63697: CALL_OW 111
// end ;
63701: LD_VAR 0 3
63705: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63706: LD_INT 0
63708: PPUSH
63709: PPUSH
63710: PPUSH
// if not unit or not enemy then
63711: LD_VAR 0 1
63715: NOT
63716: IFTRUE 63725
63718: PUSH
63719: LD_VAR 0 2
63723: NOT
63724: OR
63725: IFFALSE 63729
// exit ;
63727: GO 63855
// x := GetX ( enemy ) ;
63729: LD_ADDR_VAR 0 4
63733: PUSH
63734: LD_VAR 0 2
63738: PPUSH
63739: CALL_OW 250
63743: ST_TO_ADDR
// y := GetY ( enemy ) ;
63744: LD_ADDR_VAR 0 5
63748: PUSH
63749: LD_VAR 0 2
63753: PPUSH
63754: CALL_OW 251
63758: ST_TO_ADDR
// if ValidHex ( x , y ) then
63759: LD_VAR 0 4
63763: PPUSH
63764: LD_VAR 0 5
63768: PPUSH
63769: CALL_OW 488
63773: IFFALSE 63855
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63775: LD_VAR 0 2
63779: PPUSH
63780: CALL_OW 247
63784: PUSH
63785: LD_INT 3
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: IN
63795: IFTRUE 63818
63797: PUSH
63798: LD_VAR 0 1
63802: PPUSH
63803: CALL_OW 255
63807: PPUSH
63808: LD_VAR 0 2
63812: PPUSH
63813: CALL_OW 292
63817: OR
63818: IFFALSE 63836
// ComAttackUnit ( unit , enemy ) else
63820: LD_VAR 0 1
63824: PPUSH
63825: LD_VAR 0 2
63829: PPUSH
63830: CALL_OW 115
63834: GO 63855
// ComAgressiveMove ( unit , x , y ) ;
63836: LD_VAR 0 1
63840: PPUSH
63841: LD_VAR 0 4
63845: PPUSH
63846: LD_VAR 0 5
63850: PPUSH
63851: CALL_OW 114
// end ;
63855: LD_VAR 0 3
63859: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63860: LD_INT 0
63862: PPUSH
63863: PPUSH
63864: PPUSH
// list := AreaToList ( area , 0 ) ;
63865: LD_ADDR_VAR 0 5
63869: PUSH
63870: LD_VAR 0 1
63874: PPUSH
63875: LD_INT 0
63877: PPUSH
63878: CALL_OW 517
63882: ST_TO_ADDR
// if not list then
63883: LD_VAR 0 5
63887: NOT
63888: IFFALSE 63892
// exit ;
63890: GO 64022
// if all then
63892: LD_VAR 0 2
63896: IFFALSE 63984
// begin for i := 1 to list [ 1 ] do
63898: LD_ADDR_VAR 0 4
63902: PUSH
63903: DOUBLE
63904: LD_INT 1
63906: DEC
63907: ST_TO_ADDR
63908: LD_VAR 0 5
63912: PUSH
63913: LD_INT 1
63915: ARRAY
63916: PUSH
63917: FOR_TO
63918: IFFALSE 63980
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63920: LD_ADDR_VAR 0 3
63924: PUSH
63925: LD_VAR 0 3
63929: PPUSH
63930: LD_VAR 0 3
63934: PUSH
63935: LD_INT 1
63937: PLUS
63938: PPUSH
63939: LD_VAR 0 5
63943: PUSH
63944: LD_INT 1
63946: ARRAY
63947: PUSH
63948: LD_VAR 0 4
63952: ARRAY
63953: PUSH
63954: LD_VAR 0 5
63958: PUSH
63959: LD_INT 2
63961: ARRAY
63962: PUSH
63963: LD_VAR 0 4
63967: ARRAY
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PPUSH
63973: CALL_OW 1
63977: ST_TO_ADDR
63978: GO 63917
63980: POP
63981: POP
// exit ;
63982: GO 64022
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63984: LD_ADDR_VAR 0 3
63988: PUSH
63989: LD_VAR 0 5
63993: PUSH
63994: LD_INT 1
63996: ARRAY
63997: PUSH
63998: LD_INT 1
64000: ARRAY
64001: PUSH
64002: LD_VAR 0 5
64006: PUSH
64007: LD_INT 2
64009: ARRAY
64010: PUSH
64011: LD_INT 1
64013: ARRAY
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: EMPTY
64020: LIST
64021: ST_TO_ADDR
// end ;
64022: LD_VAR 0 3
64026: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64027: LD_INT 0
64029: PPUSH
64030: PPUSH
// list := AreaToList ( area , 0 ) ;
64031: LD_ADDR_VAR 0 4
64035: PUSH
64036: LD_VAR 0 1
64040: PPUSH
64041: LD_INT 0
64043: PPUSH
64044: CALL_OW 517
64048: ST_TO_ADDR
// if not list then
64049: LD_VAR 0 4
64053: NOT
64054: IFFALSE 64058
// exit ;
64056: GO 64099
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64058: LD_ADDR_VAR 0 3
64062: PUSH
64063: LD_VAR 0 4
64067: PUSH
64068: LD_INT 1
64070: ARRAY
64071: PUSH
64072: LD_INT 1
64074: ARRAY
64075: PUSH
64076: LD_VAR 0 4
64080: PUSH
64081: LD_INT 2
64083: ARRAY
64084: PUSH
64085: LD_INT 1
64087: ARRAY
64088: PUSH
64089: LD_VAR 0 2
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: LIST
64098: ST_TO_ADDR
// end ;
64099: LD_VAR 0 3
64103: RET
// export function First ( array ) ; begin
64104: LD_INT 0
64106: PPUSH
// if not array then
64107: LD_VAR 0 1
64111: NOT
64112: IFFALSE 64116
// exit ;
64114: GO 64130
// result := array [ 1 ] ;
64116: LD_ADDR_VAR 0 2
64120: PUSH
64121: LD_VAR 0 1
64125: PUSH
64126: LD_INT 1
64128: ARRAY
64129: ST_TO_ADDR
// end ;
64130: LD_VAR 0 2
64134: RET
// export function Last ( array ) ; begin
64135: LD_INT 0
64137: PPUSH
// if not array then
64138: LD_VAR 0 1
64142: NOT
64143: IFFALSE 64147
// exit ;
64145: GO 64163
// result := array [ array ] ;
64147: LD_ADDR_VAR 0 2
64151: PUSH
64152: LD_VAR 0 1
64156: PUSH
64157: LD_VAR 0 1
64161: ARRAY
64162: ST_TO_ADDR
// end ;
64163: LD_VAR 0 2
64167: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
64168: LD_INT 0
64170: PPUSH
64171: PPUSH
// result := [ ] ;
64172: LD_ADDR_VAR 0 5
64176: PUSH
64177: EMPTY
64178: ST_TO_ADDR
// if not array then
64179: LD_VAR 0 1
64183: NOT
64184: IFFALSE 64188
// exit ;
64186: GO 64300
// for i := 1 to array do
64188: LD_ADDR_VAR 0 6
64192: PUSH
64193: DOUBLE
64194: LD_INT 1
64196: DEC
64197: ST_TO_ADDR
64198: LD_VAR 0 1
64202: PUSH
64203: FOR_TO
64204: IFFALSE 64298
// if array [ i ] [ index ] = value then
64206: LD_VAR 0 1
64210: PUSH
64211: LD_VAR 0 6
64215: ARRAY
64216: PUSH
64217: LD_VAR 0 2
64221: ARRAY
64222: PUSH
64223: LD_VAR 0 3
64227: EQUAL
64228: IFFALSE 64296
// begin if indexColumn then
64230: LD_VAR 0 4
64234: IFFALSE 64270
// result := Join ( result , array [ i ] [ indexColumn ] ) else
64236: LD_ADDR_VAR 0 5
64240: PUSH
64241: LD_VAR 0 5
64245: PPUSH
64246: LD_VAR 0 1
64250: PUSH
64251: LD_VAR 0 6
64255: ARRAY
64256: PUSH
64257: LD_VAR 0 4
64261: ARRAY
64262: PPUSH
64263: CALL 59308 0 2
64267: ST_TO_ADDR
64268: GO 64296
// result := Join ( result , array [ i ] ) ;
64270: LD_ADDR_VAR 0 5
64274: PUSH
64275: LD_VAR 0 5
64279: PPUSH
64280: LD_VAR 0 1
64284: PUSH
64285: LD_VAR 0 6
64289: ARRAY
64290: PPUSH
64291: CALL 59308 0 2
64295: ST_TO_ADDR
// end ;
64296: GO 64203
64298: POP
64299: POP
// end ;
64300: LD_VAR 0 5
64304: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64305: LD_INT 0
64307: PPUSH
// if not vehicles or not parkingPoint then
64308: LD_VAR 0 1
64312: NOT
64313: IFTRUE 64322
64315: PUSH
64316: LD_VAR 0 2
64320: NOT
64321: OR
64322: IFFALSE 64326
// exit ;
64324: GO 64424
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64326: LD_ADDR_VAR 0 1
64330: PUSH
64331: LD_VAR 0 1
64335: PPUSH
64336: LD_INT 50
64338: PUSH
64339: EMPTY
64340: LIST
64341: PUSH
64342: LD_INT 3
64344: PUSH
64345: LD_INT 92
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 1
64355: ARRAY
64356: PUSH
64357: LD_VAR 0 2
64361: PUSH
64362: LD_INT 2
64364: ARRAY
64365: PUSH
64366: LD_INT 8
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PPUSH
64383: CALL_OW 72
64387: ST_TO_ADDR
// if not vehicles then
64388: LD_VAR 0 1
64392: NOT
64393: IFFALSE 64397
// exit ;
64395: GO 64424
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
64397: LD_VAR 0 1
64401: PPUSH
64402: LD_VAR 0 2
64406: PUSH
64407: LD_INT 1
64409: ARRAY
64410: PPUSH
64411: LD_VAR 0 2
64415: PUSH
64416: LD_INT 2
64418: ARRAY
64419: PPUSH
64420: CALL_OW 111
// end ;
64424: LD_VAR 0 3
64428: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
64429: LD_INT 0
64431: PPUSH
64432: PPUSH
64433: PPUSH
// if not side or not area then
64434: LD_VAR 0 1
64438: NOT
64439: IFTRUE 64448
64441: PUSH
64442: LD_VAR 0 2
64446: NOT
64447: OR
64448: IFFALSE 64452
// exit ;
64450: GO 64571
// tmp := AreaToList ( area , 0 ) ;
64452: LD_ADDR_VAR 0 5
64456: PUSH
64457: LD_VAR 0 2
64461: PPUSH
64462: LD_INT 0
64464: PPUSH
64465: CALL_OW 517
64469: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64470: LD_ADDR_VAR 0 4
64474: PUSH
64475: DOUBLE
64476: LD_INT 1
64478: DEC
64479: ST_TO_ADDR
64480: LD_VAR 0 5
64484: PUSH
64485: LD_INT 1
64487: ARRAY
64488: PUSH
64489: FOR_TO
64490: IFFALSE 64569
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
64492: LD_VAR 0 5
64496: PUSH
64497: LD_INT 1
64499: ARRAY
64500: PUSH
64501: LD_VAR 0 4
64505: ARRAY
64506: PPUSH
64507: LD_VAR 0 5
64511: PUSH
64512: LD_INT 2
64514: ARRAY
64515: PUSH
64516: LD_VAR 0 4
64520: ARRAY
64521: PPUSH
64522: CALL_OW 351
64526: IFFALSE 64567
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
64528: LD_VAR 0 5
64532: PUSH
64533: LD_INT 1
64535: ARRAY
64536: PUSH
64537: LD_VAR 0 4
64541: ARRAY
64542: PPUSH
64543: LD_VAR 0 5
64547: PUSH
64548: LD_INT 2
64550: ARRAY
64551: PUSH
64552: LD_VAR 0 4
64556: ARRAY
64557: PPUSH
64558: LD_VAR 0 1
64562: PPUSH
64563: CALL_OW 244
// end ;
64567: GO 64489
64569: POP
64570: POP
// end ;
64571: LD_VAR 0 3
64575: RET
// export function UniqueArray ( array ) ; var i ; begin
64576: LD_INT 0
64578: PPUSH
64579: PPUSH
// result := [ ] ;
64580: LD_ADDR_VAR 0 2
64584: PUSH
64585: EMPTY
64586: ST_TO_ADDR
// if not array then
64587: LD_VAR 0 1
64591: NOT
64592: IFFALSE 64596
// exit ;
64594: GO 64657
// for i := 1 to array do
64596: LD_ADDR_VAR 0 3
64600: PUSH
64601: DOUBLE
64602: LD_INT 1
64604: DEC
64605: ST_TO_ADDR
64606: LD_VAR 0 1
64610: PUSH
64611: FOR_TO
64612: IFFALSE 64655
// if not array [ i ] in result then
64614: LD_VAR 0 1
64618: PUSH
64619: LD_VAR 0 3
64623: ARRAY
64624: PUSH
64625: LD_VAR 0 2
64629: IN
64630: NOT
64631: IFFALSE 64653
// result := Join ( result , i ) ;
64633: LD_ADDR_VAR 0 2
64637: PUSH
64638: LD_VAR 0 2
64642: PPUSH
64643: LD_VAR 0 3
64647: PPUSH
64648: CALL 59308 0 2
64652: ST_TO_ADDR
64653: GO 64611
64655: POP
64656: POP
// end ; end_of_file end_of_file
64657: LD_VAR 0 2
64661: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64662: LD_VAR 0 1
64666: PPUSH
64667: LD_VAR 0 2
64671: PPUSH
64672: LD_VAR 0 3
64676: PPUSH
64677: LD_VAR 0 4
64681: PPUSH
64682: LD_VAR 0 5
64686: PPUSH
64687: LD_VAR 0 6
64691: PPUSH
64692: CALL 64927 0 6
// end ;
64696: PPOPN 6
64698: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64699: LD_INT 0
64701: PPUSH
// begin if not units then
64702: LD_VAR 0 1
64706: NOT
64707: IFFALSE 64711
// exit ;
64709: GO 64745
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
64711: LD_VAR 0 1
64715: PPUSH
64716: LD_VAR 0 2
64720: PPUSH
64721: LD_VAR 0 3
64725: PPUSH
64726: LD_VAR 0 4
64730: PPUSH
64731: LD_VAR 0 5
64735: PPUSH
64736: LD_VAR 0 6
64740: PPUSH
64741: CALL 87173 0 6
// end ;
64745: PPOPN 7
64747: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64748: CALL 64814 0 0
// end ; end_of_file
64752: PPOPN 1
64754: END
// export globalGameSaveCounter ; every 0 0$1 do
64755: GO 64757
64757: DISABLE
// begin enable ;
64758: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64759: LD_STRING updateTimer(
64761: PUSH
64762: LD_OWVAR 1
64766: STR
64767: PUSH
64768: LD_STRING );
64770: STR
64771: PPUSH
64772: CALL_OW 559
// end ;
64776: END
// every 0 0$1 do
64777: GO 64779
64779: DISABLE
// begin globalGameSaveCounter := 0 ;
64780: LD_ADDR_EXP 46
64784: PUSH
64785: LD_INT 0
64787: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64788: LD_STRING setGameSaveCounter(0)
64790: PPUSH
64791: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64795: LD_STRING initStreamRollete();
64797: PPUSH
64798: CALL_OW 559
// InitStreamMode ;
64802: CALL 66147 0 0
// DefineStreamItems ( false ) ;
64806: LD_INT 0
64808: PPUSH
64809: CALL 66611 0 1
// end ;
64813: END
// export function SOS_MapStart ( ) ; begin
64814: LD_INT 0
64816: PPUSH
// if streamModeActive then
64817: LD_EXP 47
64821: IFFALSE 64830
// DefineStreamItems ( true ) ;
64823: LD_INT 1
64825: PPUSH
64826: CALL 66611 0 1
// UpdateLuaVariables ( ) ;
64830: CALL 64847 0 0
// UpdateFactoryWaypoints ( ) ;
64834: CALL 79733 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64838: CALL 79985 0 0
// end ;
64842: LD_VAR 0 1
64846: RET
// function UpdateLuaVariables ( ) ; begin
64847: LD_INT 0
64849: PPUSH
// if globalGameSaveCounter then
64850: LD_EXP 46
64854: IFFALSE 64888
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64856: LD_ADDR_EXP 46
64860: PUSH
64861: LD_EXP 46
64865: PPUSH
64866: CALL 60681 0 1
64870: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64871: LD_STRING setGameSaveCounter(
64873: PUSH
64874: LD_EXP 46
64878: STR
64879: PUSH
64880: LD_STRING )
64882: STR
64883: PPUSH
64884: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64888: LD_STRING setGameDifficulty(
64890: PUSH
64891: LD_OWVAR 67
64895: STR
64896: PUSH
64897: LD_STRING )
64899: STR
64900: PPUSH
64901: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64905: LD_STRING displayDifficulty(
64907: PUSH
64908: LD_OWVAR 67
64912: STR
64913: PUSH
64914: LD_STRING )
64916: STR
64917: PPUSH
64918: CALL_OW 559
// end ;
64922: LD_VAR 0 1
64926: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64927: LD_INT 0
64929: PPUSH
// if p2 = stream_mode then
64930: LD_VAR 0 2
64934: PUSH
64935: LD_INT 100
64937: EQUAL
64938: IFFALSE 65941
// begin if not StreamModeActive then
64940: LD_EXP 47
64944: NOT
64945: IFFALSE 64955
// StreamModeActive := true ;
64947: LD_ADDR_EXP 47
64951: PUSH
64952: LD_INT 1
64954: ST_TO_ADDR
// if p3 = 0 then
64955: LD_VAR 0 3
64959: PUSH
64960: LD_INT 0
64962: EQUAL
64963: IFFALSE 64969
// InitStreamMode ;
64965: CALL 66147 0 0
// if p3 = 1 then
64969: LD_VAR 0 3
64973: PUSH
64974: LD_INT 1
64976: EQUAL
64977: IFFALSE 64987
// sRocket := true ;
64979: LD_ADDR_EXP 52
64983: PUSH
64984: LD_INT 1
64986: ST_TO_ADDR
// if p3 = 2 then
64987: LD_VAR 0 3
64991: PUSH
64992: LD_INT 2
64994: EQUAL
64995: IFFALSE 65005
// sSpeed := true ;
64997: LD_ADDR_EXP 51
65001: PUSH
65002: LD_INT 1
65004: ST_TO_ADDR
// if p3 = 3 then
65005: LD_VAR 0 3
65009: PUSH
65010: LD_INT 3
65012: EQUAL
65013: IFFALSE 65023
// sEngine := true ;
65015: LD_ADDR_EXP 53
65019: PUSH
65020: LD_INT 1
65022: ST_TO_ADDR
// if p3 = 4 then
65023: LD_VAR 0 3
65027: PUSH
65028: LD_INT 4
65030: EQUAL
65031: IFFALSE 65041
// sSpec := true ;
65033: LD_ADDR_EXP 50
65037: PUSH
65038: LD_INT 1
65040: ST_TO_ADDR
// if p3 = 5 then
65041: LD_VAR 0 3
65045: PUSH
65046: LD_INT 5
65048: EQUAL
65049: IFFALSE 65059
// sLevel := true ;
65051: LD_ADDR_EXP 54
65055: PUSH
65056: LD_INT 1
65058: ST_TO_ADDR
// if p3 = 6 then
65059: LD_VAR 0 3
65063: PUSH
65064: LD_INT 6
65066: EQUAL
65067: IFFALSE 65077
// sArmoury := true ;
65069: LD_ADDR_EXP 55
65073: PUSH
65074: LD_INT 1
65076: ST_TO_ADDR
// if p3 = 7 then
65077: LD_VAR 0 3
65081: PUSH
65082: LD_INT 7
65084: EQUAL
65085: IFFALSE 65095
// sRadar := true ;
65087: LD_ADDR_EXP 56
65091: PUSH
65092: LD_INT 1
65094: ST_TO_ADDR
// if p3 = 8 then
65095: LD_VAR 0 3
65099: PUSH
65100: LD_INT 8
65102: EQUAL
65103: IFFALSE 65113
// sBunker := true ;
65105: LD_ADDR_EXP 57
65109: PUSH
65110: LD_INT 1
65112: ST_TO_ADDR
// if p3 = 9 then
65113: LD_VAR 0 3
65117: PUSH
65118: LD_INT 9
65120: EQUAL
65121: IFFALSE 65131
// sHack := true ;
65123: LD_ADDR_EXP 58
65127: PUSH
65128: LD_INT 1
65130: ST_TO_ADDR
// if p3 = 10 then
65131: LD_VAR 0 3
65135: PUSH
65136: LD_INT 10
65138: EQUAL
65139: IFFALSE 65149
// sFire := true ;
65141: LD_ADDR_EXP 59
65145: PUSH
65146: LD_INT 1
65148: ST_TO_ADDR
// if p3 = 11 then
65149: LD_VAR 0 3
65153: PUSH
65154: LD_INT 11
65156: EQUAL
65157: IFFALSE 65167
// sRefresh := true ;
65159: LD_ADDR_EXP 60
65163: PUSH
65164: LD_INT 1
65166: ST_TO_ADDR
// if p3 = 12 then
65167: LD_VAR 0 3
65171: PUSH
65172: LD_INT 12
65174: EQUAL
65175: IFFALSE 65185
// sExp := true ;
65177: LD_ADDR_EXP 61
65181: PUSH
65182: LD_INT 1
65184: ST_TO_ADDR
// if p3 = 13 then
65185: LD_VAR 0 3
65189: PUSH
65190: LD_INT 13
65192: EQUAL
65193: IFFALSE 65203
// sDepot := true ;
65195: LD_ADDR_EXP 62
65199: PUSH
65200: LD_INT 1
65202: ST_TO_ADDR
// if p3 = 14 then
65203: LD_VAR 0 3
65207: PUSH
65208: LD_INT 14
65210: EQUAL
65211: IFFALSE 65221
// sFlag := true ;
65213: LD_ADDR_EXP 63
65217: PUSH
65218: LD_INT 1
65220: ST_TO_ADDR
// if p3 = 15 then
65221: LD_VAR 0 3
65225: PUSH
65226: LD_INT 15
65228: EQUAL
65229: IFFALSE 65239
// sKamikadze := true ;
65231: LD_ADDR_EXP 71
65235: PUSH
65236: LD_INT 1
65238: ST_TO_ADDR
// if p3 = 16 then
65239: LD_VAR 0 3
65243: PUSH
65244: LD_INT 16
65246: EQUAL
65247: IFFALSE 65257
// sTroll := true ;
65249: LD_ADDR_EXP 72
65253: PUSH
65254: LD_INT 1
65256: ST_TO_ADDR
// if p3 = 17 then
65257: LD_VAR 0 3
65261: PUSH
65262: LD_INT 17
65264: EQUAL
65265: IFFALSE 65275
// sSlow := true ;
65267: LD_ADDR_EXP 73
65271: PUSH
65272: LD_INT 1
65274: ST_TO_ADDR
// if p3 = 18 then
65275: LD_VAR 0 3
65279: PUSH
65280: LD_INT 18
65282: EQUAL
65283: IFFALSE 65293
// sLack := true ;
65285: LD_ADDR_EXP 74
65289: PUSH
65290: LD_INT 1
65292: ST_TO_ADDR
// if p3 = 19 then
65293: LD_VAR 0 3
65297: PUSH
65298: LD_INT 19
65300: EQUAL
65301: IFFALSE 65311
// sTank := true ;
65303: LD_ADDR_EXP 76
65307: PUSH
65308: LD_INT 1
65310: ST_TO_ADDR
// if p3 = 20 then
65311: LD_VAR 0 3
65315: PUSH
65316: LD_INT 20
65318: EQUAL
65319: IFFALSE 65329
// sRemote := true ;
65321: LD_ADDR_EXP 77
65325: PUSH
65326: LD_INT 1
65328: ST_TO_ADDR
// if p3 = 21 then
65329: LD_VAR 0 3
65333: PUSH
65334: LD_INT 21
65336: EQUAL
65337: IFFALSE 65347
// sPowell := true ;
65339: LD_ADDR_EXP 78
65343: PUSH
65344: LD_INT 1
65346: ST_TO_ADDR
// if p3 = 22 then
65347: LD_VAR 0 3
65351: PUSH
65352: LD_INT 22
65354: EQUAL
65355: IFFALSE 65365
// sTeleport := true ;
65357: LD_ADDR_EXP 81
65361: PUSH
65362: LD_INT 1
65364: ST_TO_ADDR
// if p3 = 23 then
65365: LD_VAR 0 3
65369: PUSH
65370: LD_INT 23
65372: EQUAL
65373: IFFALSE 65383
// sOilTower := true ;
65375: LD_ADDR_EXP 83
65379: PUSH
65380: LD_INT 1
65382: ST_TO_ADDR
// if p3 = 24 then
65383: LD_VAR 0 3
65387: PUSH
65388: LD_INT 24
65390: EQUAL
65391: IFFALSE 65401
// sShovel := true ;
65393: LD_ADDR_EXP 84
65397: PUSH
65398: LD_INT 1
65400: ST_TO_ADDR
// if p3 = 25 then
65401: LD_VAR 0 3
65405: PUSH
65406: LD_INT 25
65408: EQUAL
65409: IFFALSE 65419
// sSheik := true ;
65411: LD_ADDR_EXP 85
65415: PUSH
65416: LD_INT 1
65418: ST_TO_ADDR
// if p3 = 26 then
65419: LD_VAR 0 3
65423: PUSH
65424: LD_INT 26
65426: EQUAL
65427: IFFALSE 65437
// sEarthquake := true ;
65429: LD_ADDR_EXP 87
65433: PUSH
65434: LD_INT 1
65436: ST_TO_ADDR
// if p3 = 27 then
65437: LD_VAR 0 3
65441: PUSH
65442: LD_INT 27
65444: EQUAL
65445: IFFALSE 65455
// sAI := true ;
65447: LD_ADDR_EXP 88
65451: PUSH
65452: LD_INT 1
65454: ST_TO_ADDR
// if p3 = 28 then
65455: LD_VAR 0 3
65459: PUSH
65460: LD_INT 28
65462: EQUAL
65463: IFFALSE 65473
// sCargo := true ;
65465: LD_ADDR_EXP 91
65469: PUSH
65470: LD_INT 1
65472: ST_TO_ADDR
// if p3 = 29 then
65473: LD_VAR 0 3
65477: PUSH
65478: LD_INT 29
65480: EQUAL
65481: IFFALSE 65491
// sDLaser := true ;
65483: LD_ADDR_EXP 92
65487: PUSH
65488: LD_INT 1
65490: ST_TO_ADDR
// if p3 = 30 then
65491: LD_VAR 0 3
65495: PUSH
65496: LD_INT 30
65498: EQUAL
65499: IFFALSE 65509
// sExchange := true ;
65501: LD_ADDR_EXP 93
65505: PUSH
65506: LD_INT 1
65508: ST_TO_ADDR
// if p3 = 31 then
65509: LD_VAR 0 3
65513: PUSH
65514: LD_INT 31
65516: EQUAL
65517: IFFALSE 65527
// sFac := true ;
65519: LD_ADDR_EXP 94
65523: PUSH
65524: LD_INT 1
65526: ST_TO_ADDR
// if p3 = 32 then
65527: LD_VAR 0 3
65531: PUSH
65532: LD_INT 32
65534: EQUAL
65535: IFFALSE 65545
// sPower := true ;
65537: LD_ADDR_EXP 95
65541: PUSH
65542: LD_INT 1
65544: ST_TO_ADDR
// if p3 = 33 then
65545: LD_VAR 0 3
65549: PUSH
65550: LD_INT 33
65552: EQUAL
65553: IFFALSE 65563
// sRandom := true ;
65555: LD_ADDR_EXP 96
65559: PUSH
65560: LD_INT 1
65562: ST_TO_ADDR
// if p3 = 34 then
65563: LD_VAR 0 3
65567: PUSH
65568: LD_INT 34
65570: EQUAL
65571: IFFALSE 65581
// sShield := true ;
65573: LD_ADDR_EXP 97
65577: PUSH
65578: LD_INT 1
65580: ST_TO_ADDR
// if p3 = 35 then
65581: LD_VAR 0 3
65585: PUSH
65586: LD_INT 35
65588: EQUAL
65589: IFFALSE 65599
// sTime := true ;
65591: LD_ADDR_EXP 98
65595: PUSH
65596: LD_INT 1
65598: ST_TO_ADDR
// if p3 = 36 then
65599: LD_VAR 0 3
65603: PUSH
65604: LD_INT 36
65606: EQUAL
65607: IFFALSE 65617
// sTools := true ;
65609: LD_ADDR_EXP 99
65613: PUSH
65614: LD_INT 1
65616: ST_TO_ADDR
// if p3 = 101 then
65617: LD_VAR 0 3
65621: PUSH
65622: LD_INT 101
65624: EQUAL
65625: IFFALSE 65635
// sSold := true ;
65627: LD_ADDR_EXP 64
65631: PUSH
65632: LD_INT 1
65634: ST_TO_ADDR
// if p3 = 102 then
65635: LD_VAR 0 3
65639: PUSH
65640: LD_INT 102
65642: EQUAL
65643: IFFALSE 65653
// sDiff := true ;
65645: LD_ADDR_EXP 65
65649: PUSH
65650: LD_INT 1
65652: ST_TO_ADDR
// if p3 = 103 then
65653: LD_VAR 0 3
65657: PUSH
65658: LD_INT 103
65660: EQUAL
65661: IFFALSE 65671
// sFog := true ;
65663: LD_ADDR_EXP 68
65667: PUSH
65668: LD_INT 1
65670: ST_TO_ADDR
// if p3 = 104 then
65671: LD_VAR 0 3
65675: PUSH
65676: LD_INT 104
65678: EQUAL
65679: IFFALSE 65689
// sReset := true ;
65681: LD_ADDR_EXP 69
65685: PUSH
65686: LD_INT 1
65688: ST_TO_ADDR
// if p3 = 105 then
65689: LD_VAR 0 3
65693: PUSH
65694: LD_INT 105
65696: EQUAL
65697: IFFALSE 65707
// sSun := true ;
65699: LD_ADDR_EXP 70
65703: PUSH
65704: LD_INT 1
65706: ST_TO_ADDR
// if p3 = 106 then
65707: LD_VAR 0 3
65711: PUSH
65712: LD_INT 106
65714: EQUAL
65715: IFFALSE 65725
// sTiger := true ;
65717: LD_ADDR_EXP 66
65721: PUSH
65722: LD_INT 1
65724: ST_TO_ADDR
// if p3 = 107 then
65725: LD_VAR 0 3
65729: PUSH
65730: LD_INT 107
65732: EQUAL
65733: IFFALSE 65743
// sBomb := true ;
65735: LD_ADDR_EXP 67
65739: PUSH
65740: LD_INT 1
65742: ST_TO_ADDR
// if p3 = 108 then
65743: LD_VAR 0 3
65747: PUSH
65748: LD_INT 108
65750: EQUAL
65751: IFFALSE 65761
// sWound := true ;
65753: LD_ADDR_EXP 75
65757: PUSH
65758: LD_INT 1
65760: ST_TO_ADDR
// if p3 = 109 then
65761: LD_VAR 0 3
65765: PUSH
65766: LD_INT 109
65768: EQUAL
65769: IFFALSE 65779
// sBetray := true ;
65771: LD_ADDR_EXP 79
65775: PUSH
65776: LD_INT 1
65778: ST_TO_ADDR
// if p3 = 110 then
65779: LD_VAR 0 3
65783: PUSH
65784: LD_INT 110
65786: EQUAL
65787: IFFALSE 65797
// sContamin := true ;
65789: LD_ADDR_EXP 80
65793: PUSH
65794: LD_INT 1
65796: ST_TO_ADDR
// if p3 = 111 then
65797: LD_VAR 0 3
65801: PUSH
65802: LD_INT 111
65804: EQUAL
65805: IFFALSE 65815
// sOil := true ;
65807: LD_ADDR_EXP 82
65811: PUSH
65812: LD_INT 1
65814: ST_TO_ADDR
// if p3 = 112 then
65815: LD_VAR 0 3
65819: PUSH
65820: LD_INT 112
65822: EQUAL
65823: IFFALSE 65833
// sStu := true ;
65825: LD_ADDR_EXP 86
65829: PUSH
65830: LD_INT 1
65832: ST_TO_ADDR
// if p3 = 113 then
65833: LD_VAR 0 3
65837: PUSH
65838: LD_INT 113
65840: EQUAL
65841: IFFALSE 65851
// sBazooka := true ;
65843: LD_ADDR_EXP 89
65847: PUSH
65848: LD_INT 1
65850: ST_TO_ADDR
// if p3 = 114 then
65851: LD_VAR 0 3
65855: PUSH
65856: LD_INT 114
65858: EQUAL
65859: IFFALSE 65869
// sMortar := true ;
65861: LD_ADDR_EXP 90
65865: PUSH
65866: LD_INT 1
65868: ST_TO_ADDR
// if p3 = 115 then
65869: LD_VAR 0 3
65873: PUSH
65874: LD_INT 115
65876: EQUAL
65877: IFFALSE 65887
// sRanger := true ;
65879: LD_ADDR_EXP 100
65883: PUSH
65884: LD_INT 1
65886: ST_TO_ADDR
// if p3 = 116 then
65887: LD_VAR 0 3
65891: PUSH
65892: LD_INT 116
65894: EQUAL
65895: IFFALSE 65905
// sComputer := true ;
65897: LD_ADDR_EXP 101
65901: PUSH
65902: LD_INT 1
65904: ST_TO_ADDR
// if p3 = 117 then
65905: LD_VAR 0 3
65909: PUSH
65910: LD_INT 117
65912: EQUAL
65913: IFFALSE 65923
// s30 := true ;
65915: LD_ADDR_EXP 102
65919: PUSH
65920: LD_INT 1
65922: ST_TO_ADDR
// if p3 = 118 then
65923: LD_VAR 0 3
65927: PUSH
65928: LD_INT 118
65930: EQUAL
65931: IFFALSE 65941
// s60 := true ;
65933: LD_ADDR_EXP 103
65937: PUSH
65938: LD_INT 1
65940: ST_TO_ADDR
// end ; if p2 = hack_mode then
65941: LD_VAR 0 2
65945: PUSH
65946: LD_INT 101
65948: EQUAL
65949: IFFALSE 66077
// begin case p3 of 1 :
65951: LD_VAR 0 3
65955: PUSH
65956: LD_INT 1
65958: DOUBLE
65959: EQUAL
65960: IFTRUE 65964
65962: GO 65971
65964: POP
// hHackUnlimitedResources ; 2 :
65965: CALL 78340 0 0
65969: GO 66077
65971: LD_INT 2
65973: DOUBLE
65974: EQUAL
65975: IFTRUE 65979
65977: GO 65986
65979: POP
// hHackSetLevel10 ; 3 :
65980: CALL 78473 0 0
65984: GO 66077
65986: LD_INT 3
65988: DOUBLE
65989: EQUAL
65990: IFTRUE 65994
65992: GO 66001
65994: POP
// hHackSetLevel10YourUnits ; 4 :
65995: CALL 78558 0 0
65999: GO 66077
66001: LD_INT 4
66003: DOUBLE
66004: EQUAL
66005: IFTRUE 66009
66007: GO 66016
66009: POP
// hHackInvincible ; 5 :
66010: CALL 79006 0 0
66014: GO 66077
66016: LD_INT 5
66018: DOUBLE
66019: EQUAL
66020: IFTRUE 66024
66022: GO 66031
66024: POP
// hHackInvisible ; 6 :
66025: CALL 79117 0 0
66029: GO 66077
66031: LD_INT 6
66033: DOUBLE
66034: EQUAL
66035: IFTRUE 66039
66037: GO 66046
66039: POP
// hHackChangeYourSide ; 7 :
66040: CALL 79174 0 0
66044: GO 66077
66046: LD_INT 7
66048: DOUBLE
66049: EQUAL
66050: IFTRUE 66054
66052: GO 66061
66054: POP
// hHackChangeUnitSide ; 8 :
66055: CALL 79216 0 0
66059: GO 66077
66061: LD_INT 8
66063: DOUBLE
66064: EQUAL
66065: IFTRUE 66069
66067: GO 66076
66069: POP
// hHackFog ; end ;
66070: CALL 79317 0 0
66074: GO 66077
66076: POP
// end ; if p2 = game_save_mode then
66077: LD_VAR 0 2
66081: PUSH
66082: LD_INT 102
66084: EQUAL
66085: IFFALSE 66142
// begin if p3 = 1 then
66087: LD_VAR 0 3
66091: PUSH
66092: LD_INT 1
66094: EQUAL
66095: IFFALSE 66107
// globalGameSaveCounter := p4 ;
66097: LD_ADDR_EXP 46
66101: PUSH
66102: LD_VAR 0 4
66106: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
66107: LD_VAR 0 3
66111: PUSH
66112: LD_INT 2
66114: EQUAL
66115: IFFALSE 66123
66117: PUSH
66118: LD_EXP 46
66122: AND
66123: IFFALSE 66142
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
66125: LD_STRING setGameSaveCounter(
66127: PUSH
66128: LD_EXP 46
66132: STR
66133: PUSH
66134: LD_STRING )
66136: STR
66137: PPUSH
66138: CALL_OW 559
// end ; end ;
66142: LD_VAR 0 7
66146: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
66147: LD_INT 0
66149: PPUSH
// streamModeActive := false ;
66150: LD_ADDR_EXP 47
66154: PUSH
66155: LD_INT 0
66157: ST_TO_ADDR
// normalCounter := 36 ;
66158: LD_ADDR_EXP 48
66162: PUSH
66163: LD_INT 36
66165: ST_TO_ADDR
// hardcoreCounter := 18 ;
66166: LD_ADDR_EXP 49
66170: PUSH
66171: LD_INT 18
66173: ST_TO_ADDR
// sRocket := false ;
66174: LD_ADDR_EXP 52
66178: PUSH
66179: LD_INT 0
66181: ST_TO_ADDR
// sSpeed := false ;
66182: LD_ADDR_EXP 51
66186: PUSH
66187: LD_INT 0
66189: ST_TO_ADDR
// sEngine := false ;
66190: LD_ADDR_EXP 53
66194: PUSH
66195: LD_INT 0
66197: ST_TO_ADDR
// sSpec := false ;
66198: LD_ADDR_EXP 50
66202: PUSH
66203: LD_INT 0
66205: ST_TO_ADDR
// sLevel := false ;
66206: LD_ADDR_EXP 54
66210: PUSH
66211: LD_INT 0
66213: ST_TO_ADDR
// sArmoury := false ;
66214: LD_ADDR_EXP 55
66218: PUSH
66219: LD_INT 0
66221: ST_TO_ADDR
// sRadar := false ;
66222: LD_ADDR_EXP 56
66226: PUSH
66227: LD_INT 0
66229: ST_TO_ADDR
// sBunker := false ;
66230: LD_ADDR_EXP 57
66234: PUSH
66235: LD_INT 0
66237: ST_TO_ADDR
// sHack := false ;
66238: LD_ADDR_EXP 58
66242: PUSH
66243: LD_INT 0
66245: ST_TO_ADDR
// sFire := false ;
66246: LD_ADDR_EXP 59
66250: PUSH
66251: LD_INT 0
66253: ST_TO_ADDR
// sRefresh := false ;
66254: LD_ADDR_EXP 60
66258: PUSH
66259: LD_INT 0
66261: ST_TO_ADDR
// sExp := false ;
66262: LD_ADDR_EXP 61
66266: PUSH
66267: LD_INT 0
66269: ST_TO_ADDR
// sDepot := false ;
66270: LD_ADDR_EXP 62
66274: PUSH
66275: LD_INT 0
66277: ST_TO_ADDR
// sFlag := false ;
66278: LD_ADDR_EXP 63
66282: PUSH
66283: LD_INT 0
66285: ST_TO_ADDR
// sKamikadze := false ;
66286: LD_ADDR_EXP 71
66290: PUSH
66291: LD_INT 0
66293: ST_TO_ADDR
// sTroll := false ;
66294: LD_ADDR_EXP 72
66298: PUSH
66299: LD_INT 0
66301: ST_TO_ADDR
// sSlow := false ;
66302: LD_ADDR_EXP 73
66306: PUSH
66307: LD_INT 0
66309: ST_TO_ADDR
// sLack := false ;
66310: LD_ADDR_EXP 74
66314: PUSH
66315: LD_INT 0
66317: ST_TO_ADDR
// sTank := false ;
66318: LD_ADDR_EXP 76
66322: PUSH
66323: LD_INT 0
66325: ST_TO_ADDR
// sRemote := false ;
66326: LD_ADDR_EXP 77
66330: PUSH
66331: LD_INT 0
66333: ST_TO_ADDR
// sPowell := false ;
66334: LD_ADDR_EXP 78
66338: PUSH
66339: LD_INT 0
66341: ST_TO_ADDR
// sTeleport := false ;
66342: LD_ADDR_EXP 81
66346: PUSH
66347: LD_INT 0
66349: ST_TO_ADDR
// sOilTower := false ;
66350: LD_ADDR_EXP 83
66354: PUSH
66355: LD_INT 0
66357: ST_TO_ADDR
// sShovel := false ;
66358: LD_ADDR_EXP 84
66362: PUSH
66363: LD_INT 0
66365: ST_TO_ADDR
// sSheik := false ;
66366: LD_ADDR_EXP 85
66370: PUSH
66371: LD_INT 0
66373: ST_TO_ADDR
// sEarthquake := false ;
66374: LD_ADDR_EXP 87
66378: PUSH
66379: LD_INT 0
66381: ST_TO_ADDR
// sAI := false ;
66382: LD_ADDR_EXP 88
66386: PUSH
66387: LD_INT 0
66389: ST_TO_ADDR
// sCargo := false ;
66390: LD_ADDR_EXP 91
66394: PUSH
66395: LD_INT 0
66397: ST_TO_ADDR
// sDLaser := false ;
66398: LD_ADDR_EXP 92
66402: PUSH
66403: LD_INT 0
66405: ST_TO_ADDR
// sExchange := false ;
66406: LD_ADDR_EXP 93
66410: PUSH
66411: LD_INT 0
66413: ST_TO_ADDR
// sFac := false ;
66414: LD_ADDR_EXP 94
66418: PUSH
66419: LD_INT 0
66421: ST_TO_ADDR
// sPower := false ;
66422: LD_ADDR_EXP 95
66426: PUSH
66427: LD_INT 0
66429: ST_TO_ADDR
// sRandom := false ;
66430: LD_ADDR_EXP 96
66434: PUSH
66435: LD_INT 0
66437: ST_TO_ADDR
// sShield := false ;
66438: LD_ADDR_EXP 97
66442: PUSH
66443: LD_INT 0
66445: ST_TO_ADDR
// sTime := false ;
66446: LD_ADDR_EXP 98
66450: PUSH
66451: LD_INT 0
66453: ST_TO_ADDR
// sTools := false ;
66454: LD_ADDR_EXP 99
66458: PUSH
66459: LD_INT 0
66461: ST_TO_ADDR
// sSold := false ;
66462: LD_ADDR_EXP 64
66466: PUSH
66467: LD_INT 0
66469: ST_TO_ADDR
// sDiff := false ;
66470: LD_ADDR_EXP 65
66474: PUSH
66475: LD_INT 0
66477: ST_TO_ADDR
// sFog := false ;
66478: LD_ADDR_EXP 68
66482: PUSH
66483: LD_INT 0
66485: ST_TO_ADDR
// sReset := false ;
66486: LD_ADDR_EXP 69
66490: PUSH
66491: LD_INT 0
66493: ST_TO_ADDR
// sSun := false ;
66494: LD_ADDR_EXP 70
66498: PUSH
66499: LD_INT 0
66501: ST_TO_ADDR
// sTiger := false ;
66502: LD_ADDR_EXP 66
66506: PUSH
66507: LD_INT 0
66509: ST_TO_ADDR
// sBomb := false ;
66510: LD_ADDR_EXP 67
66514: PUSH
66515: LD_INT 0
66517: ST_TO_ADDR
// sWound := false ;
66518: LD_ADDR_EXP 75
66522: PUSH
66523: LD_INT 0
66525: ST_TO_ADDR
// sBetray := false ;
66526: LD_ADDR_EXP 79
66530: PUSH
66531: LD_INT 0
66533: ST_TO_ADDR
// sContamin := false ;
66534: LD_ADDR_EXP 80
66538: PUSH
66539: LD_INT 0
66541: ST_TO_ADDR
// sOil := false ;
66542: LD_ADDR_EXP 82
66546: PUSH
66547: LD_INT 0
66549: ST_TO_ADDR
// sStu := false ;
66550: LD_ADDR_EXP 86
66554: PUSH
66555: LD_INT 0
66557: ST_TO_ADDR
// sBazooka := false ;
66558: LD_ADDR_EXP 89
66562: PUSH
66563: LD_INT 0
66565: ST_TO_ADDR
// sMortar := false ;
66566: LD_ADDR_EXP 90
66570: PUSH
66571: LD_INT 0
66573: ST_TO_ADDR
// sRanger := false ;
66574: LD_ADDR_EXP 100
66578: PUSH
66579: LD_INT 0
66581: ST_TO_ADDR
// sComputer := false ;
66582: LD_ADDR_EXP 101
66586: PUSH
66587: LD_INT 0
66589: ST_TO_ADDR
// s30 := false ;
66590: LD_ADDR_EXP 102
66594: PUSH
66595: LD_INT 0
66597: ST_TO_ADDR
// s60 := false ;
66598: LD_ADDR_EXP 103
66602: PUSH
66603: LD_INT 0
66605: ST_TO_ADDR
// end ;
66606: LD_VAR 0 1
66610: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66611: LD_INT 0
66613: PPUSH
66614: PPUSH
66615: PPUSH
66616: PPUSH
66617: PPUSH
66618: PPUSH
66619: PPUSH
// result := [ ] ;
66620: LD_ADDR_VAR 0 2
66624: PUSH
66625: EMPTY
66626: ST_TO_ADDR
// if campaign_id = 1 then
66627: LD_OWVAR 69
66631: PUSH
66632: LD_INT 1
66634: EQUAL
66635: IFFALSE 69801
// begin case mission_number of 1 :
66637: LD_OWVAR 70
66641: PUSH
66642: LD_INT 1
66644: DOUBLE
66645: EQUAL
66646: IFTRUE 66650
66648: GO 66726
66650: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66651: LD_ADDR_VAR 0 2
66655: PUSH
66656: LD_INT 2
66658: PUSH
66659: LD_INT 4
66661: PUSH
66662: LD_INT 11
66664: PUSH
66665: LD_INT 12
66667: PUSH
66668: LD_INT 15
66670: PUSH
66671: LD_INT 16
66673: PUSH
66674: LD_INT 22
66676: PUSH
66677: LD_INT 23
66679: PUSH
66680: LD_INT 26
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 101
66696: PUSH
66697: LD_INT 102
66699: PUSH
66700: LD_INT 106
66702: PUSH
66703: LD_INT 116
66705: PUSH
66706: LD_INT 117
66708: PUSH
66709: LD_INT 118
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: ST_TO_ADDR
66724: GO 69799
66726: LD_INT 2
66728: DOUBLE
66729: EQUAL
66730: IFTRUE 66734
66732: GO 66818
66734: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66735: LD_ADDR_VAR 0 2
66739: PUSH
66740: LD_INT 2
66742: PUSH
66743: LD_INT 4
66745: PUSH
66746: LD_INT 11
66748: PUSH
66749: LD_INT 12
66751: PUSH
66752: LD_INT 15
66754: PUSH
66755: LD_INT 16
66757: PUSH
66758: LD_INT 22
66760: PUSH
66761: LD_INT 23
66763: PUSH
66764: LD_INT 26
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 101
66780: PUSH
66781: LD_INT 102
66783: PUSH
66784: LD_INT 105
66786: PUSH
66787: LD_INT 106
66789: PUSH
66790: LD_INT 108
66792: PUSH
66793: LD_INT 116
66795: PUSH
66796: LD_INT 117
66798: PUSH
66799: LD_INT 118
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: ST_TO_ADDR
66816: GO 69799
66818: LD_INT 3
66820: DOUBLE
66821: EQUAL
66822: IFTRUE 66826
66824: GO 66914
66826: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66827: LD_ADDR_VAR 0 2
66831: PUSH
66832: LD_INT 2
66834: PUSH
66835: LD_INT 4
66837: PUSH
66838: LD_INT 5
66840: PUSH
66841: LD_INT 11
66843: PUSH
66844: LD_INT 12
66846: PUSH
66847: LD_INT 15
66849: PUSH
66850: LD_INT 16
66852: PUSH
66853: LD_INT 22
66855: PUSH
66856: LD_INT 26
66858: PUSH
66859: LD_INT 36
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 101
66876: PUSH
66877: LD_INT 102
66879: PUSH
66880: LD_INT 105
66882: PUSH
66883: LD_INT 106
66885: PUSH
66886: LD_INT 108
66888: PUSH
66889: LD_INT 116
66891: PUSH
66892: LD_INT 117
66894: PUSH
66895: LD_INT 118
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: ST_TO_ADDR
66912: GO 69799
66914: LD_INT 4
66916: DOUBLE
66917: EQUAL
66918: IFTRUE 66922
66920: GO 67018
66922: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
66923: LD_ADDR_VAR 0 2
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: LD_INT 4
66933: PUSH
66934: LD_INT 5
66936: PUSH
66937: LD_INT 8
66939: PUSH
66940: LD_INT 11
66942: PUSH
66943: LD_INT 12
66945: PUSH
66946: LD_INT 15
66948: PUSH
66949: LD_INT 16
66951: PUSH
66952: LD_INT 22
66954: PUSH
66955: LD_INT 23
66957: PUSH
66958: LD_INT 26
66960: PUSH
66961: LD_INT 36
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 101
66980: PUSH
66981: LD_INT 102
66983: PUSH
66984: LD_INT 105
66986: PUSH
66987: LD_INT 106
66989: PUSH
66990: LD_INT 108
66992: PUSH
66993: LD_INT 116
66995: PUSH
66996: LD_INT 117
66998: PUSH
66999: LD_INT 118
67001: PUSH
67002: EMPTY
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: ST_TO_ADDR
67016: GO 69799
67018: LD_INT 5
67020: DOUBLE
67021: EQUAL
67022: IFTRUE 67026
67024: GO 67138
67026: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
67027: LD_ADDR_VAR 0 2
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: LD_INT 4
67037: PUSH
67038: LD_INT 5
67040: PUSH
67041: LD_INT 6
67043: PUSH
67044: LD_INT 8
67046: PUSH
67047: LD_INT 11
67049: PUSH
67050: LD_INT 12
67052: PUSH
67053: LD_INT 15
67055: PUSH
67056: LD_INT 16
67058: PUSH
67059: LD_INT 22
67061: PUSH
67062: LD_INT 23
67064: PUSH
67065: LD_INT 25
67067: PUSH
67068: LD_INT 26
67070: PUSH
67071: LD_INT 36
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 101
67092: PUSH
67093: LD_INT 102
67095: PUSH
67096: LD_INT 105
67098: PUSH
67099: LD_INT 106
67101: PUSH
67102: LD_INT 108
67104: PUSH
67105: LD_INT 109
67107: PUSH
67108: LD_INT 112
67110: PUSH
67111: LD_INT 116
67113: PUSH
67114: LD_INT 117
67116: PUSH
67117: LD_INT 118
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: ST_TO_ADDR
67136: GO 69799
67138: LD_INT 6
67140: DOUBLE
67141: EQUAL
67142: IFTRUE 67146
67144: GO 67278
67146: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
67147: LD_ADDR_VAR 0 2
67151: PUSH
67152: LD_INT 2
67154: PUSH
67155: LD_INT 4
67157: PUSH
67158: LD_INT 5
67160: PUSH
67161: LD_INT 6
67163: PUSH
67164: LD_INT 8
67166: PUSH
67167: LD_INT 11
67169: PUSH
67170: LD_INT 12
67172: PUSH
67173: LD_INT 15
67175: PUSH
67176: LD_INT 16
67178: PUSH
67179: LD_INT 20
67181: PUSH
67182: LD_INT 21
67184: PUSH
67185: LD_INT 22
67187: PUSH
67188: LD_INT 23
67190: PUSH
67191: LD_INT 25
67193: PUSH
67194: LD_INT 26
67196: PUSH
67197: LD_INT 30
67199: PUSH
67200: LD_INT 31
67202: PUSH
67203: LD_INT 32
67205: PUSH
67206: LD_INT 36
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 101
67232: PUSH
67233: LD_INT 102
67235: PUSH
67236: LD_INT 105
67238: PUSH
67239: LD_INT 106
67241: PUSH
67242: LD_INT 108
67244: PUSH
67245: LD_INT 109
67247: PUSH
67248: LD_INT 112
67250: PUSH
67251: LD_INT 116
67253: PUSH
67254: LD_INT 117
67256: PUSH
67257: LD_INT 118
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: ST_TO_ADDR
67276: GO 69799
67278: LD_INT 7
67280: DOUBLE
67281: EQUAL
67282: IFTRUE 67286
67284: GO 67398
67286: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
67287: LD_ADDR_VAR 0 2
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 4
67297: PUSH
67298: LD_INT 5
67300: PUSH
67301: LD_INT 7
67303: PUSH
67304: LD_INT 11
67306: PUSH
67307: LD_INT 12
67309: PUSH
67310: LD_INT 15
67312: PUSH
67313: LD_INT 16
67315: PUSH
67316: LD_INT 20
67318: PUSH
67319: LD_INT 21
67321: PUSH
67322: LD_INT 22
67324: PUSH
67325: LD_INT 23
67327: PUSH
67328: LD_INT 25
67330: PUSH
67331: LD_INT 26
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 101
67352: PUSH
67353: LD_INT 102
67355: PUSH
67356: LD_INT 103
67358: PUSH
67359: LD_INT 105
67361: PUSH
67362: LD_INT 106
67364: PUSH
67365: LD_INT 108
67367: PUSH
67368: LD_INT 112
67370: PUSH
67371: LD_INT 116
67373: PUSH
67374: LD_INT 117
67376: PUSH
67377: LD_INT 118
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: ST_TO_ADDR
67396: GO 69799
67398: LD_INT 8
67400: DOUBLE
67401: EQUAL
67402: IFTRUE 67406
67404: GO 67546
67406: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
67407: LD_ADDR_VAR 0 2
67411: PUSH
67412: LD_INT 2
67414: PUSH
67415: LD_INT 4
67417: PUSH
67418: LD_INT 5
67420: PUSH
67421: LD_INT 6
67423: PUSH
67424: LD_INT 7
67426: PUSH
67427: LD_INT 8
67429: PUSH
67430: LD_INT 11
67432: PUSH
67433: LD_INT 12
67435: PUSH
67436: LD_INT 15
67438: PUSH
67439: LD_INT 16
67441: PUSH
67442: LD_INT 20
67444: PUSH
67445: LD_INT 21
67447: PUSH
67448: LD_INT 22
67450: PUSH
67451: LD_INT 23
67453: PUSH
67454: LD_INT 25
67456: PUSH
67457: LD_INT 26
67459: PUSH
67460: LD_INT 30
67462: PUSH
67463: LD_INT 31
67465: PUSH
67466: LD_INT 32
67468: PUSH
67469: LD_INT 36
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 101
67496: PUSH
67497: LD_INT 102
67499: PUSH
67500: LD_INT 103
67502: PUSH
67503: LD_INT 105
67505: PUSH
67506: LD_INT 106
67508: PUSH
67509: LD_INT 108
67511: PUSH
67512: LD_INT 109
67514: PUSH
67515: LD_INT 112
67517: PUSH
67518: LD_INT 116
67520: PUSH
67521: LD_INT 117
67523: PUSH
67524: LD_INT 118
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: ST_TO_ADDR
67544: GO 69799
67546: LD_INT 9
67548: DOUBLE
67549: EQUAL
67550: IFTRUE 67554
67552: GO 67702
67554: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
67555: LD_ADDR_VAR 0 2
67559: PUSH
67560: LD_INT 2
67562: PUSH
67563: LD_INT 4
67565: PUSH
67566: LD_INT 5
67568: PUSH
67569: LD_INT 6
67571: PUSH
67572: LD_INT 7
67574: PUSH
67575: LD_INT 8
67577: PUSH
67578: LD_INT 11
67580: PUSH
67581: LD_INT 12
67583: PUSH
67584: LD_INT 15
67586: PUSH
67587: LD_INT 16
67589: PUSH
67590: LD_INT 20
67592: PUSH
67593: LD_INT 21
67595: PUSH
67596: LD_INT 22
67598: PUSH
67599: LD_INT 23
67601: PUSH
67602: LD_INT 25
67604: PUSH
67605: LD_INT 26
67607: PUSH
67608: LD_INT 28
67610: PUSH
67611: LD_INT 30
67613: PUSH
67614: LD_INT 31
67616: PUSH
67617: LD_INT 32
67619: PUSH
67620: LD_INT 36
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 101
67648: PUSH
67649: LD_INT 102
67651: PUSH
67652: LD_INT 103
67654: PUSH
67655: LD_INT 105
67657: PUSH
67658: LD_INT 106
67660: PUSH
67661: LD_INT 108
67663: PUSH
67664: LD_INT 109
67666: PUSH
67667: LD_INT 112
67669: PUSH
67670: LD_INT 114
67672: PUSH
67673: LD_INT 116
67675: PUSH
67676: LD_INT 117
67678: PUSH
67679: LD_INT 118
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: ST_TO_ADDR
67700: GO 69799
67702: LD_INT 10
67704: DOUBLE
67705: EQUAL
67706: IFTRUE 67710
67708: GO 67906
67710: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67711: LD_ADDR_VAR 0 2
67715: PUSH
67716: LD_INT 2
67718: PUSH
67719: LD_INT 4
67721: PUSH
67722: LD_INT 5
67724: PUSH
67725: LD_INT 6
67727: PUSH
67728: LD_INT 7
67730: PUSH
67731: LD_INT 8
67733: PUSH
67734: LD_INT 9
67736: PUSH
67737: LD_INT 10
67739: PUSH
67740: LD_INT 11
67742: PUSH
67743: LD_INT 12
67745: PUSH
67746: LD_INT 13
67748: PUSH
67749: LD_INT 14
67751: PUSH
67752: LD_INT 15
67754: PUSH
67755: LD_INT 16
67757: PUSH
67758: LD_INT 17
67760: PUSH
67761: LD_INT 18
67763: PUSH
67764: LD_INT 19
67766: PUSH
67767: LD_INT 20
67769: PUSH
67770: LD_INT 21
67772: PUSH
67773: LD_INT 22
67775: PUSH
67776: LD_INT 23
67778: PUSH
67779: LD_INT 24
67781: PUSH
67782: LD_INT 25
67784: PUSH
67785: LD_INT 26
67787: PUSH
67788: LD_INT 28
67790: PUSH
67791: LD_INT 30
67793: PUSH
67794: LD_INT 31
67796: PUSH
67797: LD_INT 32
67799: PUSH
67800: LD_INT 36
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 101
67836: PUSH
67837: LD_INT 102
67839: PUSH
67840: LD_INT 103
67842: PUSH
67843: LD_INT 104
67845: PUSH
67846: LD_INT 105
67848: PUSH
67849: LD_INT 106
67851: PUSH
67852: LD_INT 107
67854: PUSH
67855: LD_INT 108
67857: PUSH
67858: LD_INT 109
67860: PUSH
67861: LD_INT 110
67863: PUSH
67864: LD_INT 111
67866: PUSH
67867: LD_INT 112
67869: PUSH
67870: LD_INT 114
67872: PUSH
67873: LD_INT 116
67875: PUSH
67876: LD_INT 117
67878: PUSH
67879: LD_INT 118
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: ST_TO_ADDR
67904: GO 69799
67906: LD_INT 11
67908: DOUBLE
67909: EQUAL
67910: IFTRUE 67914
67912: GO 68118
67914: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
67915: LD_ADDR_VAR 0 2
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: LD_INT 3
67925: PUSH
67926: LD_INT 4
67928: PUSH
67929: LD_INT 5
67931: PUSH
67932: LD_INT 6
67934: PUSH
67935: LD_INT 7
67937: PUSH
67938: LD_INT 8
67940: PUSH
67941: LD_INT 9
67943: PUSH
67944: LD_INT 10
67946: PUSH
67947: LD_INT 11
67949: PUSH
67950: LD_INT 12
67952: PUSH
67953: LD_INT 13
67955: PUSH
67956: LD_INT 14
67958: PUSH
67959: LD_INT 15
67961: PUSH
67962: LD_INT 16
67964: PUSH
67965: LD_INT 17
67967: PUSH
67968: LD_INT 18
67970: PUSH
67971: LD_INT 19
67973: PUSH
67974: LD_INT 20
67976: PUSH
67977: LD_INT 21
67979: PUSH
67980: LD_INT 22
67982: PUSH
67983: LD_INT 23
67985: PUSH
67986: LD_INT 24
67988: PUSH
67989: LD_INT 25
67991: PUSH
67992: LD_INT 26
67994: PUSH
67995: LD_INT 28
67997: PUSH
67998: LD_INT 30
68000: PUSH
68001: LD_INT 31
68003: PUSH
68004: LD_INT 32
68006: PUSH
68007: LD_INT 34
68009: PUSH
68010: LD_INT 36
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 101
68048: PUSH
68049: LD_INT 102
68051: PUSH
68052: LD_INT 103
68054: PUSH
68055: LD_INT 104
68057: PUSH
68058: LD_INT 105
68060: PUSH
68061: LD_INT 106
68063: PUSH
68064: LD_INT 107
68066: PUSH
68067: LD_INT 108
68069: PUSH
68070: LD_INT 109
68072: PUSH
68073: LD_INT 110
68075: PUSH
68076: LD_INT 111
68078: PUSH
68079: LD_INT 112
68081: PUSH
68082: LD_INT 114
68084: PUSH
68085: LD_INT 116
68087: PUSH
68088: LD_INT 117
68090: PUSH
68091: LD_INT 118
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: ST_TO_ADDR
68116: GO 69799
68118: LD_INT 12
68120: DOUBLE
68121: EQUAL
68122: IFTRUE 68126
68124: GO 68346
68126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
68127: LD_ADDR_VAR 0 2
68131: PUSH
68132: LD_INT 1
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: LD_INT 4
68143: PUSH
68144: LD_INT 5
68146: PUSH
68147: LD_INT 6
68149: PUSH
68150: LD_INT 7
68152: PUSH
68153: LD_INT 8
68155: PUSH
68156: LD_INT 9
68158: PUSH
68159: LD_INT 10
68161: PUSH
68162: LD_INT 11
68164: PUSH
68165: LD_INT 12
68167: PUSH
68168: LD_INT 13
68170: PUSH
68171: LD_INT 14
68173: PUSH
68174: LD_INT 15
68176: PUSH
68177: LD_INT 16
68179: PUSH
68180: LD_INT 17
68182: PUSH
68183: LD_INT 18
68185: PUSH
68186: LD_INT 19
68188: PUSH
68189: LD_INT 20
68191: PUSH
68192: LD_INT 21
68194: PUSH
68195: LD_INT 22
68197: PUSH
68198: LD_INT 23
68200: PUSH
68201: LD_INT 24
68203: PUSH
68204: LD_INT 25
68206: PUSH
68207: LD_INT 26
68209: PUSH
68210: LD_INT 27
68212: PUSH
68213: LD_INT 28
68215: PUSH
68216: LD_INT 30
68218: PUSH
68219: LD_INT 31
68221: PUSH
68222: LD_INT 32
68224: PUSH
68225: LD_INT 33
68227: PUSH
68228: LD_INT 34
68230: PUSH
68231: LD_INT 36
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 101
68272: PUSH
68273: LD_INT 102
68275: PUSH
68276: LD_INT 103
68278: PUSH
68279: LD_INT 104
68281: PUSH
68282: LD_INT 105
68284: PUSH
68285: LD_INT 106
68287: PUSH
68288: LD_INT 107
68290: PUSH
68291: LD_INT 108
68293: PUSH
68294: LD_INT 109
68296: PUSH
68297: LD_INT 110
68299: PUSH
68300: LD_INT 111
68302: PUSH
68303: LD_INT 112
68305: PUSH
68306: LD_INT 113
68308: PUSH
68309: LD_INT 114
68311: PUSH
68312: LD_INT 116
68314: PUSH
68315: LD_INT 117
68317: PUSH
68318: LD_INT 118
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: ST_TO_ADDR
68344: GO 69799
68346: LD_INT 13
68348: DOUBLE
68349: EQUAL
68350: IFTRUE 68354
68352: GO 68562
68354: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
68355: LD_ADDR_VAR 0 2
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: LD_INT 2
68365: PUSH
68366: LD_INT 3
68368: PUSH
68369: LD_INT 4
68371: PUSH
68372: LD_INT 5
68374: PUSH
68375: LD_INT 8
68377: PUSH
68378: LD_INT 9
68380: PUSH
68381: LD_INT 10
68383: PUSH
68384: LD_INT 11
68386: PUSH
68387: LD_INT 12
68389: PUSH
68390: LD_INT 14
68392: PUSH
68393: LD_INT 15
68395: PUSH
68396: LD_INT 16
68398: PUSH
68399: LD_INT 17
68401: PUSH
68402: LD_INT 18
68404: PUSH
68405: LD_INT 19
68407: PUSH
68408: LD_INT 20
68410: PUSH
68411: LD_INT 21
68413: PUSH
68414: LD_INT 22
68416: PUSH
68417: LD_INT 23
68419: PUSH
68420: LD_INT 24
68422: PUSH
68423: LD_INT 25
68425: PUSH
68426: LD_INT 26
68428: PUSH
68429: LD_INT 27
68431: PUSH
68432: LD_INT 28
68434: PUSH
68435: LD_INT 30
68437: PUSH
68438: LD_INT 31
68440: PUSH
68441: LD_INT 32
68443: PUSH
68444: LD_INT 33
68446: PUSH
68447: LD_INT 34
68449: PUSH
68450: LD_INT 36
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 101
68488: PUSH
68489: LD_INT 102
68491: PUSH
68492: LD_INT 103
68494: PUSH
68495: LD_INT 104
68497: PUSH
68498: LD_INT 105
68500: PUSH
68501: LD_INT 106
68503: PUSH
68504: LD_INT 107
68506: PUSH
68507: LD_INT 108
68509: PUSH
68510: LD_INT 109
68512: PUSH
68513: LD_INT 110
68515: PUSH
68516: LD_INT 111
68518: PUSH
68519: LD_INT 112
68521: PUSH
68522: LD_INT 113
68524: PUSH
68525: LD_INT 114
68527: PUSH
68528: LD_INT 116
68530: PUSH
68531: LD_INT 117
68533: PUSH
68534: LD_INT 118
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: ST_TO_ADDR
68560: GO 69799
68562: LD_INT 14
68564: DOUBLE
68565: EQUAL
68566: IFTRUE 68570
68568: GO 68794
68570: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
68571: LD_ADDR_VAR 0 2
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: LD_INT 3
68584: PUSH
68585: LD_INT 4
68587: PUSH
68588: LD_INT 5
68590: PUSH
68591: LD_INT 6
68593: PUSH
68594: LD_INT 7
68596: PUSH
68597: LD_INT 8
68599: PUSH
68600: LD_INT 9
68602: PUSH
68603: LD_INT 10
68605: PUSH
68606: LD_INT 11
68608: PUSH
68609: LD_INT 12
68611: PUSH
68612: LD_INT 13
68614: PUSH
68615: LD_INT 14
68617: PUSH
68618: LD_INT 15
68620: PUSH
68621: LD_INT 16
68623: PUSH
68624: LD_INT 17
68626: PUSH
68627: LD_INT 18
68629: PUSH
68630: LD_INT 19
68632: PUSH
68633: LD_INT 20
68635: PUSH
68636: LD_INT 21
68638: PUSH
68639: LD_INT 22
68641: PUSH
68642: LD_INT 23
68644: PUSH
68645: LD_INT 24
68647: PUSH
68648: LD_INT 25
68650: PUSH
68651: LD_INT 26
68653: PUSH
68654: LD_INT 27
68656: PUSH
68657: LD_INT 28
68659: PUSH
68660: LD_INT 29
68662: PUSH
68663: LD_INT 30
68665: PUSH
68666: LD_INT 31
68668: PUSH
68669: LD_INT 32
68671: PUSH
68672: LD_INT 33
68674: PUSH
68675: LD_INT 34
68677: PUSH
68678: LD_INT 36
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 101
68720: PUSH
68721: LD_INT 102
68723: PUSH
68724: LD_INT 103
68726: PUSH
68727: LD_INT 104
68729: PUSH
68730: LD_INT 105
68732: PUSH
68733: LD_INT 106
68735: PUSH
68736: LD_INT 107
68738: PUSH
68739: LD_INT 108
68741: PUSH
68742: LD_INT 109
68744: PUSH
68745: LD_INT 110
68747: PUSH
68748: LD_INT 111
68750: PUSH
68751: LD_INT 112
68753: PUSH
68754: LD_INT 113
68756: PUSH
68757: LD_INT 114
68759: PUSH
68760: LD_INT 116
68762: PUSH
68763: LD_INT 117
68765: PUSH
68766: LD_INT 118
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: ST_TO_ADDR
68792: GO 69799
68794: LD_INT 15
68796: DOUBLE
68797: EQUAL
68798: IFTRUE 68802
68800: GO 69026
68802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68803: LD_ADDR_VAR 0 2
68807: PUSH
68808: LD_INT 1
68810: PUSH
68811: LD_INT 2
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: LD_INT 4
68819: PUSH
68820: LD_INT 5
68822: PUSH
68823: LD_INT 6
68825: PUSH
68826: LD_INT 7
68828: PUSH
68829: LD_INT 8
68831: PUSH
68832: LD_INT 9
68834: PUSH
68835: LD_INT 10
68837: PUSH
68838: LD_INT 11
68840: PUSH
68841: LD_INT 12
68843: PUSH
68844: LD_INT 13
68846: PUSH
68847: LD_INT 14
68849: PUSH
68850: LD_INT 15
68852: PUSH
68853: LD_INT 16
68855: PUSH
68856: LD_INT 17
68858: PUSH
68859: LD_INT 18
68861: PUSH
68862: LD_INT 19
68864: PUSH
68865: LD_INT 20
68867: PUSH
68868: LD_INT 21
68870: PUSH
68871: LD_INT 22
68873: PUSH
68874: LD_INT 23
68876: PUSH
68877: LD_INT 24
68879: PUSH
68880: LD_INT 25
68882: PUSH
68883: LD_INT 26
68885: PUSH
68886: LD_INT 27
68888: PUSH
68889: LD_INT 28
68891: PUSH
68892: LD_INT 29
68894: PUSH
68895: LD_INT 30
68897: PUSH
68898: LD_INT 31
68900: PUSH
68901: LD_INT 32
68903: PUSH
68904: LD_INT 33
68906: PUSH
68907: LD_INT 34
68909: PUSH
68910: LD_INT 36
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 101
68952: PUSH
68953: LD_INT 102
68955: PUSH
68956: LD_INT 103
68958: PUSH
68959: LD_INT 104
68961: PUSH
68962: LD_INT 105
68964: PUSH
68965: LD_INT 106
68967: PUSH
68968: LD_INT 107
68970: PUSH
68971: LD_INT 108
68973: PUSH
68974: LD_INT 109
68976: PUSH
68977: LD_INT 110
68979: PUSH
68980: LD_INT 111
68982: PUSH
68983: LD_INT 112
68985: PUSH
68986: LD_INT 113
68988: PUSH
68989: LD_INT 114
68991: PUSH
68992: LD_INT 116
68994: PUSH
68995: LD_INT 117
68997: PUSH
68998: LD_INT 118
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: ST_TO_ADDR
69024: GO 69799
69026: LD_INT 16
69028: DOUBLE
69029: EQUAL
69030: IFTRUE 69034
69032: GO 69170
69034: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
69035: LD_ADDR_VAR 0 2
69039: PUSH
69040: LD_INT 2
69042: PUSH
69043: LD_INT 4
69045: PUSH
69046: LD_INT 5
69048: PUSH
69049: LD_INT 7
69051: PUSH
69052: LD_INT 11
69054: PUSH
69055: LD_INT 12
69057: PUSH
69058: LD_INT 15
69060: PUSH
69061: LD_INT 16
69063: PUSH
69064: LD_INT 20
69066: PUSH
69067: LD_INT 21
69069: PUSH
69070: LD_INT 22
69072: PUSH
69073: LD_INT 23
69075: PUSH
69076: LD_INT 25
69078: PUSH
69079: LD_INT 26
69081: PUSH
69082: LD_INT 30
69084: PUSH
69085: LD_INT 31
69087: PUSH
69088: LD_INT 32
69090: PUSH
69091: LD_INT 33
69093: PUSH
69094: LD_INT 34
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 101
69120: PUSH
69121: LD_INT 102
69123: PUSH
69124: LD_INT 103
69126: PUSH
69127: LD_INT 106
69129: PUSH
69130: LD_INT 108
69132: PUSH
69133: LD_INT 112
69135: PUSH
69136: LD_INT 113
69138: PUSH
69139: LD_INT 114
69141: PUSH
69142: LD_INT 116
69144: PUSH
69145: LD_INT 117
69147: PUSH
69148: LD_INT 118
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: ST_TO_ADDR
69168: GO 69799
69170: LD_INT 17
69172: DOUBLE
69173: EQUAL
69174: IFTRUE 69178
69176: GO 69402
69178: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
69179: LD_ADDR_VAR 0 2
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: LD_INT 2
69189: PUSH
69190: LD_INT 3
69192: PUSH
69193: LD_INT 4
69195: PUSH
69196: LD_INT 5
69198: PUSH
69199: LD_INT 6
69201: PUSH
69202: LD_INT 7
69204: PUSH
69205: LD_INT 8
69207: PUSH
69208: LD_INT 9
69210: PUSH
69211: LD_INT 10
69213: PUSH
69214: LD_INT 11
69216: PUSH
69217: LD_INT 12
69219: PUSH
69220: LD_INT 13
69222: PUSH
69223: LD_INT 14
69225: PUSH
69226: LD_INT 15
69228: PUSH
69229: LD_INT 16
69231: PUSH
69232: LD_INT 17
69234: PUSH
69235: LD_INT 18
69237: PUSH
69238: LD_INT 19
69240: PUSH
69241: LD_INT 20
69243: PUSH
69244: LD_INT 21
69246: PUSH
69247: LD_INT 22
69249: PUSH
69250: LD_INT 23
69252: PUSH
69253: LD_INT 24
69255: PUSH
69256: LD_INT 25
69258: PUSH
69259: LD_INT 26
69261: PUSH
69262: LD_INT 27
69264: PUSH
69265: LD_INT 28
69267: PUSH
69268: LD_INT 29
69270: PUSH
69271: LD_INT 30
69273: PUSH
69274: LD_INT 31
69276: PUSH
69277: LD_INT 32
69279: PUSH
69280: LD_INT 33
69282: PUSH
69283: LD_INT 34
69285: PUSH
69286: LD_INT 36
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 101
69328: PUSH
69329: LD_INT 102
69331: PUSH
69332: LD_INT 103
69334: PUSH
69335: LD_INT 104
69337: PUSH
69338: LD_INT 105
69340: PUSH
69341: LD_INT 106
69343: PUSH
69344: LD_INT 107
69346: PUSH
69347: LD_INT 108
69349: PUSH
69350: LD_INT 109
69352: PUSH
69353: LD_INT 110
69355: PUSH
69356: LD_INT 111
69358: PUSH
69359: LD_INT 112
69361: PUSH
69362: LD_INT 113
69364: PUSH
69365: LD_INT 114
69367: PUSH
69368: LD_INT 116
69370: PUSH
69371: LD_INT 117
69373: PUSH
69374: LD_INT 118
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: ST_TO_ADDR
69400: GO 69799
69402: LD_INT 18
69404: DOUBLE
69405: EQUAL
69406: IFTRUE 69410
69408: GO 69558
69410: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
69411: LD_ADDR_VAR 0 2
69415: PUSH
69416: LD_INT 2
69418: PUSH
69419: LD_INT 4
69421: PUSH
69422: LD_INT 5
69424: PUSH
69425: LD_INT 7
69427: PUSH
69428: LD_INT 11
69430: PUSH
69431: LD_INT 12
69433: PUSH
69434: LD_INT 15
69436: PUSH
69437: LD_INT 16
69439: PUSH
69440: LD_INT 20
69442: PUSH
69443: LD_INT 21
69445: PUSH
69446: LD_INT 22
69448: PUSH
69449: LD_INT 23
69451: PUSH
69452: LD_INT 25
69454: PUSH
69455: LD_INT 26
69457: PUSH
69458: LD_INT 30
69460: PUSH
69461: LD_INT 31
69463: PUSH
69464: LD_INT 32
69466: PUSH
69467: LD_INT 33
69469: PUSH
69470: LD_INT 34
69472: PUSH
69473: LD_INT 35
69475: PUSH
69476: LD_INT 36
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 101
69504: PUSH
69505: LD_INT 102
69507: PUSH
69508: LD_INT 103
69510: PUSH
69511: LD_INT 106
69513: PUSH
69514: LD_INT 108
69516: PUSH
69517: LD_INT 112
69519: PUSH
69520: LD_INT 113
69522: PUSH
69523: LD_INT 114
69525: PUSH
69526: LD_INT 115
69528: PUSH
69529: LD_INT 116
69531: PUSH
69532: LD_INT 117
69534: PUSH
69535: LD_INT 118
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: ST_TO_ADDR
69556: GO 69799
69558: LD_INT 19
69560: DOUBLE
69561: EQUAL
69562: IFTRUE 69566
69564: GO 69798
69566: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
69567: LD_ADDR_VAR 0 2
69571: PUSH
69572: LD_INT 1
69574: PUSH
69575: LD_INT 2
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: LD_INT 4
69583: PUSH
69584: LD_INT 5
69586: PUSH
69587: LD_INT 6
69589: PUSH
69590: LD_INT 7
69592: PUSH
69593: LD_INT 8
69595: PUSH
69596: LD_INT 9
69598: PUSH
69599: LD_INT 10
69601: PUSH
69602: LD_INT 11
69604: PUSH
69605: LD_INT 12
69607: PUSH
69608: LD_INT 13
69610: PUSH
69611: LD_INT 14
69613: PUSH
69614: LD_INT 15
69616: PUSH
69617: LD_INT 16
69619: PUSH
69620: LD_INT 17
69622: PUSH
69623: LD_INT 18
69625: PUSH
69626: LD_INT 19
69628: PUSH
69629: LD_INT 20
69631: PUSH
69632: LD_INT 21
69634: PUSH
69635: LD_INT 22
69637: PUSH
69638: LD_INT 23
69640: PUSH
69641: LD_INT 24
69643: PUSH
69644: LD_INT 25
69646: PUSH
69647: LD_INT 26
69649: PUSH
69650: LD_INT 27
69652: PUSH
69653: LD_INT 28
69655: PUSH
69656: LD_INT 29
69658: PUSH
69659: LD_INT 30
69661: PUSH
69662: LD_INT 31
69664: PUSH
69665: LD_INT 32
69667: PUSH
69668: LD_INT 33
69670: PUSH
69671: LD_INT 34
69673: PUSH
69674: LD_INT 35
69676: PUSH
69677: LD_INT 36
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 101
69720: PUSH
69721: LD_INT 102
69723: PUSH
69724: LD_INT 103
69726: PUSH
69727: LD_INT 104
69729: PUSH
69730: LD_INT 105
69732: PUSH
69733: LD_INT 106
69735: PUSH
69736: LD_INT 107
69738: PUSH
69739: LD_INT 108
69741: PUSH
69742: LD_INT 109
69744: PUSH
69745: LD_INT 110
69747: PUSH
69748: LD_INT 111
69750: PUSH
69751: LD_INT 112
69753: PUSH
69754: LD_INT 113
69756: PUSH
69757: LD_INT 114
69759: PUSH
69760: LD_INT 115
69762: PUSH
69763: LD_INT 116
69765: PUSH
69766: LD_INT 117
69768: PUSH
69769: LD_INT 118
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: ST_TO_ADDR
69796: GO 69799
69798: POP
// end else
69799: GO 70030
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69801: LD_ADDR_VAR 0 2
69805: PUSH
69806: LD_INT 1
69808: PUSH
69809: LD_INT 2
69811: PUSH
69812: LD_INT 3
69814: PUSH
69815: LD_INT 4
69817: PUSH
69818: LD_INT 5
69820: PUSH
69821: LD_INT 6
69823: PUSH
69824: LD_INT 7
69826: PUSH
69827: LD_INT 8
69829: PUSH
69830: LD_INT 9
69832: PUSH
69833: LD_INT 10
69835: PUSH
69836: LD_INT 11
69838: PUSH
69839: LD_INT 12
69841: PUSH
69842: LD_INT 13
69844: PUSH
69845: LD_INT 14
69847: PUSH
69848: LD_INT 15
69850: PUSH
69851: LD_INT 16
69853: PUSH
69854: LD_INT 17
69856: PUSH
69857: LD_INT 18
69859: PUSH
69860: LD_INT 19
69862: PUSH
69863: LD_INT 20
69865: PUSH
69866: LD_INT 21
69868: PUSH
69869: LD_INT 22
69871: PUSH
69872: LD_INT 23
69874: PUSH
69875: LD_INT 24
69877: PUSH
69878: LD_INT 25
69880: PUSH
69881: LD_INT 26
69883: PUSH
69884: LD_INT 27
69886: PUSH
69887: LD_INT 28
69889: PUSH
69890: LD_INT 29
69892: PUSH
69893: LD_INT 30
69895: PUSH
69896: LD_INT 31
69898: PUSH
69899: LD_INT 32
69901: PUSH
69902: LD_INT 33
69904: PUSH
69905: LD_INT 34
69907: PUSH
69908: LD_INT 35
69910: PUSH
69911: LD_INT 36
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 101
69954: PUSH
69955: LD_INT 102
69957: PUSH
69958: LD_INT 103
69960: PUSH
69961: LD_INT 104
69963: PUSH
69964: LD_INT 105
69966: PUSH
69967: LD_INT 106
69969: PUSH
69970: LD_INT 107
69972: PUSH
69973: LD_INT 108
69975: PUSH
69976: LD_INT 109
69978: PUSH
69979: LD_INT 110
69981: PUSH
69982: LD_INT 111
69984: PUSH
69985: LD_INT 112
69987: PUSH
69988: LD_INT 113
69990: PUSH
69991: LD_INT 114
69993: PUSH
69994: LD_INT 115
69996: PUSH
69997: LD_INT 116
69999: PUSH
70000: LD_INT 117
70002: PUSH
70003: LD_INT 118
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: ST_TO_ADDR
// if result then
70030: LD_VAR 0 2
70034: IFFALSE 70820
// begin normal :=  ;
70036: LD_ADDR_VAR 0 5
70040: PUSH
70041: LD_STRING 
70043: ST_TO_ADDR
// hardcore :=  ;
70044: LD_ADDR_VAR 0 6
70048: PUSH
70049: LD_STRING 
70051: ST_TO_ADDR
// active :=  ;
70052: LD_ADDR_VAR 0 7
70056: PUSH
70057: LD_STRING 
70059: ST_TO_ADDR
// for i = 1 to normalCounter do
70060: LD_ADDR_VAR 0 8
70064: PUSH
70065: DOUBLE
70066: LD_INT 1
70068: DEC
70069: ST_TO_ADDR
70070: LD_EXP 48
70074: PUSH
70075: FOR_TO
70076: IFFALSE 70177
// begin tmp := 0 ;
70078: LD_ADDR_VAR 0 3
70082: PUSH
70083: LD_STRING 0
70085: ST_TO_ADDR
// if result [ 1 ] then
70086: LD_VAR 0 2
70090: PUSH
70091: LD_INT 1
70093: ARRAY
70094: IFFALSE 70159
// if result [ 1 ] [ 1 ] = i then
70096: LD_VAR 0 2
70100: PUSH
70101: LD_INT 1
70103: ARRAY
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PUSH
70109: LD_VAR 0 8
70113: EQUAL
70114: IFFALSE 70159
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
70116: LD_ADDR_VAR 0 2
70120: PUSH
70121: LD_VAR 0 2
70125: PPUSH
70126: LD_INT 1
70128: PPUSH
70129: LD_VAR 0 2
70133: PUSH
70134: LD_INT 1
70136: ARRAY
70137: PPUSH
70138: LD_INT 1
70140: PPUSH
70141: CALL_OW 3
70145: PPUSH
70146: CALL_OW 1
70150: ST_TO_ADDR
// tmp := 1 ;
70151: LD_ADDR_VAR 0 3
70155: PUSH
70156: LD_STRING 1
70158: ST_TO_ADDR
// end ; normal := normal & tmp ;
70159: LD_ADDR_VAR 0 5
70163: PUSH
70164: LD_VAR 0 5
70168: PUSH
70169: LD_VAR 0 3
70173: STR
70174: ST_TO_ADDR
// end ;
70175: GO 70075
70177: POP
70178: POP
// for i = 1 to hardcoreCounter do
70179: LD_ADDR_VAR 0 8
70183: PUSH
70184: DOUBLE
70185: LD_INT 1
70187: DEC
70188: ST_TO_ADDR
70189: LD_EXP 49
70193: PUSH
70194: FOR_TO
70195: IFFALSE 70300
// begin tmp := 0 ;
70197: LD_ADDR_VAR 0 3
70201: PUSH
70202: LD_STRING 0
70204: ST_TO_ADDR
// if result [ 2 ] then
70205: LD_VAR 0 2
70209: PUSH
70210: LD_INT 2
70212: ARRAY
70213: IFFALSE 70282
// if result [ 2 ] [ 1 ] = 100 + i then
70215: LD_VAR 0 2
70219: PUSH
70220: LD_INT 2
70222: ARRAY
70223: PUSH
70224: LD_INT 1
70226: ARRAY
70227: PUSH
70228: LD_INT 100
70230: PUSH
70231: LD_VAR 0 8
70235: PLUS
70236: EQUAL
70237: IFFALSE 70282
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
70239: LD_ADDR_VAR 0 2
70243: PUSH
70244: LD_VAR 0 2
70248: PPUSH
70249: LD_INT 2
70251: PPUSH
70252: LD_VAR 0 2
70256: PUSH
70257: LD_INT 2
70259: ARRAY
70260: PPUSH
70261: LD_INT 1
70263: PPUSH
70264: CALL_OW 3
70268: PPUSH
70269: CALL_OW 1
70273: ST_TO_ADDR
// tmp := 1 ;
70274: LD_ADDR_VAR 0 3
70278: PUSH
70279: LD_STRING 1
70281: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
70282: LD_ADDR_VAR 0 6
70286: PUSH
70287: LD_VAR 0 6
70291: PUSH
70292: LD_VAR 0 3
70296: STR
70297: ST_TO_ADDR
// end ;
70298: GO 70194
70300: POP
70301: POP
// if isGameLoad then
70302: LD_VAR 0 1
70306: IFFALSE 70781
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
70308: LD_ADDR_VAR 0 4
70312: PUSH
70313: LD_EXP 52
70317: PUSH
70318: LD_EXP 51
70322: PUSH
70323: LD_EXP 53
70327: PUSH
70328: LD_EXP 50
70332: PUSH
70333: LD_EXP 54
70337: PUSH
70338: LD_EXP 55
70342: PUSH
70343: LD_EXP 56
70347: PUSH
70348: LD_EXP 57
70352: PUSH
70353: LD_EXP 58
70357: PUSH
70358: LD_EXP 59
70362: PUSH
70363: LD_EXP 60
70367: PUSH
70368: LD_EXP 61
70372: PUSH
70373: LD_EXP 62
70377: PUSH
70378: LD_EXP 63
70382: PUSH
70383: LD_EXP 71
70387: PUSH
70388: LD_EXP 72
70392: PUSH
70393: LD_EXP 73
70397: PUSH
70398: LD_EXP 74
70402: PUSH
70403: LD_EXP 76
70407: PUSH
70408: LD_EXP 77
70412: PUSH
70413: LD_EXP 78
70417: PUSH
70418: LD_EXP 81
70422: PUSH
70423: LD_EXP 83
70427: PUSH
70428: LD_EXP 84
70432: PUSH
70433: LD_EXP 85
70437: PUSH
70438: LD_EXP 87
70442: PUSH
70443: LD_EXP 88
70447: PUSH
70448: LD_EXP 91
70452: PUSH
70453: LD_EXP 92
70457: PUSH
70458: LD_EXP 93
70462: PUSH
70463: LD_EXP 94
70467: PUSH
70468: LD_EXP 95
70472: PUSH
70473: LD_EXP 96
70477: PUSH
70478: LD_EXP 97
70482: PUSH
70483: LD_EXP 98
70487: PUSH
70488: LD_EXP 99
70492: PUSH
70493: LD_EXP 64
70497: PUSH
70498: LD_EXP 65
70502: PUSH
70503: LD_EXP 68
70507: PUSH
70508: LD_EXP 69
70512: PUSH
70513: LD_EXP 70
70517: PUSH
70518: LD_EXP 66
70522: PUSH
70523: LD_EXP 67
70527: PUSH
70528: LD_EXP 75
70532: PUSH
70533: LD_EXP 79
70537: PUSH
70538: LD_EXP 80
70542: PUSH
70543: LD_EXP 82
70547: PUSH
70548: LD_EXP 86
70552: PUSH
70553: LD_EXP 89
70557: PUSH
70558: LD_EXP 90
70562: PUSH
70563: LD_EXP 100
70567: PUSH
70568: LD_EXP 101
70572: PUSH
70573: LD_EXP 102
70577: PUSH
70578: LD_EXP 103
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: ST_TO_ADDR
// tmp :=  ;
70639: LD_ADDR_VAR 0 3
70643: PUSH
70644: LD_STRING 
70646: ST_TO_ADDR
// for i = 1 to normalCounter do
70647: LD_ADDR_VAR 0 8
70651: PUSH
70652: DOUBLE
70653: LD_INT 1
70655: DEC
70656: ST_TO_ADDR
70657: LD_EXP 48
70661: PUSH
70662: FOR_TO
70663: IFFALSE 70699
// begin if flags [ i ] then
70665: LD_VAR 0 4
70669: PUSH
70670: LD_VAR 0 8
70674: ARRAY
70675: IFFALSE 70697
// tmp := tmp & i & ; ;
70677: LD_ADDR_VAR 0 3
70681: PUSH
70682: LD_VAR 0 3
70686: PUSH
70687: LD_VAR 0 8
70691: STR
70692: PUSH
70693: LD_STRING ;
70695: STR
70696: ST_TO_ADDR
// end ;
70697: GO 70662
70699: POP
70700: POP
// for i = 1 to hardcoreCounter do
70701: LD_ADDR_VAR 0 8
70705: PUSH
70706: DOUBLE
70707: LD_INT 1
70709: DEC
70710: ST_TO_ADDR
70711: LD_EXP 49
70715: PUSH
70716: FOR_TO
70717: IFFALSE 70763
// begin if flags [ normalCounter + i ] then
70719: LD_VAR 0 4
70723: PUSH
70724: LD_EXP 48
70728: PUSH
70729: LD_VAR 0 8
70733: PLUS
70734: ARRAY
70735: IFFALSE 70761
// tmp := tmp & ( 100 + i ) & ; ;
70737: LD_ADDR_VAR 0 3
70741: PUSH
70742: LD_VAR 0 3
70746: PUSH
70747: LD_INT 100
70749: PUSH
70750: LD_VAR 0 8
70754: PLUS
70755: STR
70756: PUSH
70757: LD_STRING ;
70759: STR
70760: ST_TO_ADDR
// end ;
70761: GO 70716
70763: POP
70764: POP
// if tmp then
70765: LD_VAR 0 3
70769: IFFALSE 70781
// active := tmp ;
70771: LD_ADDR_VAR 0 7
70775: PUSH
70776: LD_VAR 0 3
70780: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70781: LD_STRING getStreamItemsFromMission("
70783: PUSH
70784: LD_VAR 0 5
70788: STR
70789: PUSH
70790: LD_STRING ","
70792: STR
70793: PUSH
70794: LD_VAR 0 6
70798: STR
70799: PUSH
70800: LD_STRING ","
70802: STR
70803: PUSH
70804: LD_VAR 0 7
70808: STR
70809: PUSH
70810: LD_STRING ")
70812: STR
70813: PPUSH
70814: CALL_OW 559
// end else
70818: GO 70827
// ToLua ( getStreamItemsFromMission("","","") ) ;
70820: LD_STRING getStreamItemsFromMission("","","")
70822: PPUSH
70823: CALL_OW 559
// end ;
70827: LD_VAR 0 2
70831: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70832: LD_EXP 47
70836: IFFALSE 70844
70838: PUSH
70839: LD_EXP 52
70843: AND
70844: IFFALSE 70968
70846: GO 70848
70848: DISABLE
70849: LD_INT 0
70851: PPUSH
70852: PPUSH
// begin enable ;
70853: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70854: LD_ADDR_VAR 0 2
70858: PUSH
70859: LD_INT 22
70861: PUSH
70862: LD_OWVAR 2
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 2
70873: PUSH
70874: LD_INT 34
70876: PUSH
70877: LD_INT 7
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 34
70886: PUSH
70887: LD_INT 45
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 34
70896: PUSH
70897: LD_INT 28
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 34
70906: PUSH
70907: LD_INT 47
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PPUSH
70925: CALL_OW 69
70929: ST_TO_ADDR
// if not tmp then
70930: LD_VAR 0 2
70934: NOT
70935: IFFALSE 70939
// exit ;
70937: GO 70968
// for i in tmp do
70939: LD_ADDR_VAR 0 1
70943: PUSH
70944: LD_VAR 0 2
70948: PUSH
70949: FOR_IN
70950: IFFALSE 70966
// begin SetLives ( i , 0 ) ;
70952: LD_VAR 0 1
70956: PPUSH
70957: LD_INT 0
70959: PPUSH
70960: CALL_OW 234
// end ;
70964: GO 70949
70966: POP
70967: POP
// end ;
70968: PPOPN 2
70970: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70971: LD_EXP 47
70975: IFFALSE 70983
70977: PUSH
70978: LD_EXP 53
70982: AND
70983: IFFALSE 71067
70985: GO 70987
70987: DISABLE
70988: LD_INT 0
70990: PPUSH
70991: PPUSH
// begin enable ;
70992: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70993: LD_ADDR_VAR 0 2
70997: PUSH
70998: LD_INT 22
71000: PUSH
71001: LD_OWVAR 2
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 32
71012: PUSH
71013: LD_INT 3
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PPUSH
71024: CALL_OW 69
71028: ST_TO_ADDR
// if not tmp then
71029: LD_VAR 0 2
71033: NOT
71034: IFFALSE 71038
// exit ;
71036: GO 71067
// for i in tmp do
71038: LD_ADDR_VAR 0 1
71042: PUSH
71043: LD_VAR 0 2
71047: PUSH
71048: FOR_IN
71049: IFFALSE 71065
// begin SetLives ( i , 0 ) ;
71051: LD_VAR 0 1
71055: PPUSH
71056: LD_INT 0
71058: PPUSH
71059: CALL_OW 234
// end ;
71063: GO 71048
71065: POP
71066: POP
// end ;
71067: PPOPN 2
71069: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
71070: LD_EXP 47
71074: IFFALSE 71082
71076: PUSH
71077: LD_EXP 50
71081: AND
71082: IFFALSE 71175
71084: GO 71086
71086: DISABLE
71087: LD_INT 0
71089: PPUSH
// begin enable ;
71090: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
71091: LD_ADDR_VAR 0 1
71095: PUSH
71096: LD_INT 22
71098: PUSH
71099: LD_OWVAR 2
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 2
71110: PUSH
71111: LD_INT 25
71113: PUSH
71114: LD_INT 5
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 25
71123: PUSH
71124: LD_INT 9
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 25
71133: PUSH
71134: LD_INT 8
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PPUSH
71151: CALL_OW 69
71155: PUSH
71156: FOR_IN
71157: IFFALSE 71173
// begin SetClass ( i , 1 ) ;
71159: LD_VAR 0 1
71163: PPUSH
71164: LD_INT 1
71166: PPUSH
71167: CALL_OW 336
// end ;
71171: GO 71156
71173: POP
71174: POP
// end ;
71175: PPOPN 1
71177: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
71178: LD_EXP 47
71182: IFFALSE 71190
71184: PUSH
71185: LD_EXP 51
71189: AND
71190: IFFALSE 71202
71192: PUSH
71193: LD_OWVAR 65
71197: PUSH
71198: LD_INT 7
71200: LESS
71201: AND
71202: IFFALSE 71216
71204: GO 71206
71206: DISABLE
// begin enable ;
71207: ENABLE
// game_speed := 7 ;
71208: LD_ADDR_OWVAR 65
71212: PUSH
71213: LD_INT 7
71215: ST_TO_ADDR
// end ;
71216: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
71217: LD_EXP 47
71221: IFFALSE 71229
71223: PUSH
71224: LD_EXP 54
71228: AND
71229: IFFALSE 71431
71231: GO 71233
71233: DISABLE
71234: LD_INT 0
71236: PPUSH
71237: PPUSH
71238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71239: LD_ADDR_VAR 0 3
71243: PUSH
71244: LD_INT 81
71246: PUSH
71247: LD_OWVAR 2
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 21
71258: PUSH
71259: LD_INT 1
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PPUSH
71270: CALL_OW 69
71274: ST_TO_ADDR
// if not tmp then
71275: LD_VAR 0 3
71279: NOT
71280: IFFALSE 71284
// exit ;
71282: GO 71431
// if tmp > 5 then
71284: LD_VAR 0 3
71288: PUSH
71289: LD_INT 5
71291: GREATER
71292: IFFALSE 71304
// k := 5 else
71294: LD_ADDR_VAR 0 2
71298: PUSH
71299: LD_INT 5
71301: ST_TO_ADDR
71302: GO 71314
// k := tmp ;
71304: LD_ADDR_VAR 0 2
71308: PUSH
71309: LD_VAR 0 3
71313: ST_TO_ADDR
// for i := 1 to k do
71314: LD_ADDR_VAR 0 1
71318: PUSH
71319: DOUBLE
71320: LD_INT 1
71322: DEC
71323: ST_TO_ADDR
71324: LD_VAR 0 2
71328: PUSH
71329: FOR_TO
71330: IFFALSE 71429
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
71332: LD_VAR 0 3
71336: PUSH
71337: LD_VAR 0 1
71341: ARRAY
71342: PPUSH
71343: LD_VAR 0 1
71347: PUSH
71348: LD_INT 4
71350: MOD
71351: PUSH
71352: LD_INT 1
71354: PLUS
71355: PPUSH
71356: CALL_OW 259
71360: PUSH
71361: LD_INT 10
71363: LESS
71364: IFFALSE 71427
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
71366: LD_VAR 0 3
71370: PUSH
71371: LD_VAR 0 1
71375: ARRAY
71376: PPUSH
71377: LD_VAR 0 1
71381: PUSH
71382: LD_INT 4
71384: MOD
71385: PUSH
71386: LD_INT 1
71388: PLUS
71389: PPUSH
71390: LD_VAR 0 3
71394: PUSH
71395: LD_VAR 0 1
71399: ARRAY
71400: PPUSH
71401: LD_VAR 0 1
71405: PUSH
71406: LD_INT 4
71408: MOD
71409: PUSH
71410: LD_INT 1
71412: PLUS
71413: PPUSH
71414: CALL_OW 259
71418: PUSH
71419: LD_INT 1
71421: PLUS
71422: PPUSH
71423: CALL_OW 237
71427: GO 71329
71429: POP
71430: POP
// end ;
71431: PPOPN 3
71433: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
71434: LD_EXP 47
71438: IFFALSE 71446
71440: PUSH
71441: LD_EXP 55
71445: AND
71446: IFFALSE 71466
71448: GO 71450
71450: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
71451: LD_INT 4
71453: PPUSH
71454: LD_OWVAR 2
71458: PPUSH
71459: LD_INT 0
71461: PPUSH
71462: CALL_OW 324
71466: END
// every 0 0$1 trigger StreamModeActive and sShovel do
71467: LD_EXP 47
71471: IFFALSE 71479
71473: PUSH
71474: LD_EXP 84
71478: AND
71479: IFFALSE 71499
71481: GO 71483
71483: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
71484: LD_INT 19
71486: PPUSH
71487: LD_OWVAR 2
71491: PPUSH
71492: LD_INT 0
71494: PPUSH
71495: CALL_OW 324
71499: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
71500: LD_EXP 47
71504: IFFALSE 71512
71506: PUSH
71507: LD_EXP 56
71511: AND
71512: IFFALSE 71614
71514: GO 71516
71516: DISABLE
71517: LD_INT 0
71519: PPUSH
71520: PPUSH
// begin enable ;
71521: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
71522: LD_ADDR_VAR 0 2
71526: PUSH
71527: LD_INT 22
71529: PUSH
71530: LD_OWVAR 2
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 2
71541: PUSH
71542: LD_INT 34
71544: PUSH
71545: LD_INT 11
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 34
71554: PUSH
71555: LD_INT 30
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: LIST
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PPUSH
71571: CALL_OW 69
71575: ST_TO_ADDR
// if not tmp then
71576: LD_VAR 0 2
71580: NOT
71581: IFFALSE 71585
// exit ;
71583: GO 71614
// for i in tmp do
71585: LD_ADDR_VAR 0 1
71589: PUSH
71590: LD_VAR 0 2
71594: PUSH
71595: FOR_IN
71596: IFFALSE 71612
// begin SetLives ( i , 0 ) ;
71598: LD_VAR 0 1
71602: PPUSH
71603: LD_INT 0
71605: PPUSH
71606: CALL_OW 234
// end ;
71610: GO 71595
71612: POP
71613: POP
// end ;
71614: PPOPN 2
71616: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71617: LD_EXP 47
71621: IFFALSE 71629
71623: PUSH
71624: LD_EXP 57
71628: AND
71629: IFFALSE 71649
71631: GO 71633
71633: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71634: LD_INT 32
71636: PPUSH
71637: LD_OWVAR 2
71641: PPUSH
71642: LD_INT 0
71644: PPUSH
71645: CALL_OW 324
71649: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71650: LD_EXP 47
71654: IFFALSE 71662
71656: PUSH
71657: LD_EXP 58
71661: AND
71662: IFFALSE 71845
71664: GO 71666
71666: DISABLE
71667: LD_INT 0
71669: PPUSH
71670: PPUSH
71671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71672: LD_ADDR_VAR 0 2
71676: PUSH
71677: LD_INT 22
71679: PUSH
71680: LD_OWVAR 2
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 33
71691: PUSH
71692: LD_INT 3
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PPUSH
71703: CALL_OW 69
71707: ST_TO_ADDR
// if not tmp then
71708: LD_VAR 0 2
71712: NOT
71713: IFFALSE 71717
// exit ;
71715: GO 71845
// side := 0 ;
71717: LD_ADDR_VAR 0 3
71721: PUSH
71722: LD_INT 0
71724: ST_TO_ADDR
// for i := 1 to 8 do
71725: LD_ADDR_VAR 0 1
71729: PUSH
71730: DOUBLE
71731: LD_INT 1
71733: DEC
71734: ST_TO_ADDR
71735: LD_INT 8
71737: PUSH
71738: FOR_TO
71739: IFFALSE 71789
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71741: LD_OWVAR 2
71745: PUSH
71746: LD_VAR 0 1
71750: NONEQUAL
71751: IFFALSE 71773
71753: PUSH
71754: LD_OWVAR 2
71758: PPUSH
71759: LD_VAR 0 1
71763: PPUSH
71764: CALL_OW 81
71768: PUSH
71769: LD_INT 2
71771: EQUAL
71772: AND
71773: IFFALSE 71787
// begin side := i ;
71775: LD_ADDR_VAR 0 3
71779: PUSH
71780: LD_VAR 0 1
71784: ST_TO_ADDR
// break ;
71785: GO 71789
// end ;
71787: GO 71738
71789: POP
71790: POP
// if not side then
71791: LD_VAR 0 3
71795: NOT
71796: IFFALSE 71800
// exit ;
71798: GO 71845
// for i := 1 to tmp do
71800: LD_ADDR_VAR 0 1
71804: PUSH
71805: DOUBLE
71806: LD_INT 1
71808: DEC
71809: ST_TO_ADDR
71810: LD_VAR 0 2
71814: PUSH
71815: FOR_TO
71816: IFFALSE 71843
// if Prob ( 60 ) then
71818: LD_INT 60
71820: PPUSH
71821: CALL_OW 13
71825: IFFALSE 71841
// SetSide ( i , side ) ;
71827: LD_VAR 0 1
71831: PPUSH
71832: LD_VAR 0 3
71836: PPUSH
71837: CALL_OW 235
71841: GO 71815
71843: POP
71844: POP
// end ;
71845: PPOPN 3
71847: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71848: LD_EXP 47
71852: IFFALSE 71860
71854: PUSH
71855: LD_EXP 60
71859: AND
71860: IFFALSE 71979
71862: GO 71864
71864: DISABLE
71865: LD_INT 0
71867: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71868: LD_ADDR_VAR 0 1
71872: PUSH
71873: LD_INT 22
71875: PUSH
71876: LD_OWVAR 2
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 21
71887: PUSH
71888: LD_INT 1
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 3
71897: PUSH
71898: LD_INT 23
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: LIST
71916: PPUSH
71917: CALL_OW 69
71921: PUSH
71922: FOR_IN
71923: IFFALSE 71977
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71925: LD_VAR 0 1
71929: PPUSH
71930: CALL_OW 257
71934: PUSH
71935: LD_INT 1
71937: PUSH
71938: LD_INT 2
71940: PUSH
71941: LD_INT 3
71943: PUSH
71944: LD_INT 4
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: IN
71953: IFFALSE 71975
// SetClass ( un , rand ( 1 , 4 ) ) ;
71955: LD_VAR 0 1
71959: PPUSH
71960: LD_INT 1
71962: PPUSH
71963: LD_INT 4
71965: PPUSH
71966: CALL_OW 12
71970: PPUSH
71971: CALL_OW 336
71975: GO 71922
71977: POP
71978: POP
// end ;
71979: PPOPN 1
71981: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71982: LD_EXP 47
71986: IFFALSE 71994
71988: PUSH
71989: LD_EXP 59
71993: AND
71994: IFFALSE 72073
71996: GO 71998
71998: DISABLE
71999: LD_INT 0
72001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72002: LD_ADDR_VAR 0 1
72006: PUSH
72007: LD_INT 22
72009: PUSH
72010: LD_OWVAR 2
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 21
72021: PUSH
72022: LD_INT 3
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PPUSH
72033: CALL_OW 69
72037: ST_TO_ADDR
// if not tmp then
72038: LD_VAR 0 1
72042: NOT
72043: IFFALSE 72047
// exit ;
72045: GO 72073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
72047: LD_VAR 0 1
72051: PUSH
72052: LD_INT 1
72054: PPUSH
72055: LD_VAR 0 1
72059: PPUSH
72060: CALL_OW 12
72064: ARRAY
72065: PPUSH
72066: LD_INT 100
72068: PPUSH
72069: CALL_OW 234
// end ;
72073: PPOPN 1
72075: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
72076: LD_EXP 47
72080: IFFALSE 72088
72082: PUSH
72083: LD_EXP 61
72087: AND
72088: IFFALSE 72186
72090: GO 72092
72092: DISABLE
72093: LD_INT 0
72095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72096: LD_ADDR_VAR 0 1
72100: PUSH
72101: LD_INT 22
72103: PUSH
72104: LD_OWVAR 2
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PUSH
72113: LD_INT 21
72115: PUSH
72116: LD_INT 1
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PPUSH
72127: CALL_OW 69
72131: ST_TO_ADDR
// if not tmp then
72132: LD_VAR 0 1
72136: NOT
72137: IFFALSE 72141
// exit ;
72139: GO 72186
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
72141: LD_VAR 0 1
72145: PUSH
72146: LD_INT 1
72148: PPUSH
72149: LD_VAR 0 1
72153: PPUSH
72154: CALL_OW 12
72158: ARRAY
72159: PPUSH
72160: LD_INT 1
72162: PPUSH
72163: LD_INT 4
72165: PPUSH
72166: CALL_OW 12
72170: PPUSH
72171: LD_INT 3000
72173: PPUSH
72174: LD_INT 9000
72176: PPUSH
72177: CALL_OW 12
72181: PPUSH
72182: CALL_OW 492
// end ;
72186: PPOPN 1
72188: END
// every 0 0$1 trigger StreamModeActive and sDepot do
72189: LD_EXP 47
72193: IFFALSE 72201
72195: PUSH
72196: LD_EXP 62
72200: AND
72201: IFFALSE 72221
72203: GO 72205
72205: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
72206: LD_INT 1
72208: PPUSH
72209: LD_OWVAR 2
72213: PPUSH
72214: LD_INT 0
72216: PPUSH
72217: CALL_OW 324
72221: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
72222: LD_EXP 47
72226: IFFALSE 72234
72228: PUSH
72229: LD_EXP 63
72233: AND
72234: IFFALSE 72317
72236: GO 72238
72238: DISABLE
72239: LD_INT 0
72241: PPUSH
72242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72243: LD_ADDR_VAR 0 2
72247: PUSH
72248: LD_INT 22
72250: PUSH
72251: LD_OWVAR 2
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 21
72262: PUSH
72263: LD_INT 3
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PPUSH
72274: CALL_OW 69
72278: ST_TO_ADDR
// if not tmp then
72279: LD_VAR 0 2
72283: NOT
72284: IFFALSE 72288
// exit ;
72286: GO 72317
// for i in tmp do
72288: LD_ADDR_VAR 0 1
72292: PUSH
72293: LD_VAR 0 2
72297: PUSH
72298: FOR_IN
72299: IFFALSE 72315
// SetBLevel ( i , 10 ) ;
72301: LD_VAR 0 1
72305: PPUSH
72306: LD_INT 10
72308: PPUSH
72309: CALL_OW 241
72313: GO 72298
72315: POP
72316: POP
// end ;
72317: PPOPN 2
72319: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
72320: LD_EXP 47
72324: IFFALSE 72332
72326: PUSH
72327: LD_EXP 64
72331: AND
72332: IFFALSE 72443
72334: GO 72336
72336: DISABLE
72337: LD_INT 0
72339: PPUSH
72340: PPUSH
72341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72342: LD_ADDR_VAR 0 3
72346: PUSH
72347: LD_INT 22
72349: PUSH
72350: LD_OWVAR 2
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 25
72361: PUSH
72362: LD_INT 1
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PPUSH
72373: CALL_OW 69
72377: ST_TO_ADDR
// if not tmp then
72378: LD_VAR 0 3
72382: NOT
72383: IFFALSE 72387
// exit ;
72385: GO 72443
// un := tmp [ rand ( 1 , tmp ) ] ;
72387: LD_ADDR_VAR 0 2
72391: PUSH
72392: LD_VAR 0 3
72396: PUSH
72397: LD_INT 1
72399: PPUSH
72400: LD_VAR 0 3
72404: PPUSH
72405: CALL_OW 12
72409: ARRAY
72410: ST_TO_ADDR
// if Crawls ( un ) then
72411: LD_VAR 0 2
72415: PPUSH
72416: CALL_OW 318
72420: IFFALSE 72431
// ComWalk ( un ) ;
72422: LD_VAR 0 2
72426: PPUSH
72427: CALL_OW 138
// SetClass ( un , class_sniper ) ;
72431: LD_VAR 0 2
72435: PPUSH
72436: LD_INT 5
72438: PPUSH
72439: CALL_OW 336
// end ;
72443: PPOPN 3
72445: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
72446: LD_EXP 47
72450: IFFALSE 72458
72452: PUSH
72453: LD_EXP 65
72457: AND
72458: IFFALSE 72470
72460: PUSH
72461: LD_OWVAR 67
72465: PUSH
72466: LD_INT 4
72468: LESS
72469: AND
72470: IFFALSE 72489
72472: GO 72474
72474: DISABLE
// begin Difficulty := Difficulty + 1 ;
72475: LD_ADDR_OWVAR 67
72479: PUSH
72480: LD_OWVAR 67
72484: PUSH
72485: LD_INT 1
72487: PLUS
72488: ST_TO_ADDR
// end ;
72489: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
72490: LD_EXP 47
72494: IFFALSE 72502
72496: PUSH
72497: LD_EXP 66
72501: AND
72502: IFFALSE 72605
72504: GO 72506
72506: DISABLE
72507: LD_INT 0
72509: PPUSH
// begin for i := 1 to 5 do
72510: LD_ADDR_VAR 0 1
72514: PUSH
72515: DOUBLE
72516: LD_INT 1
72518: DEC
72519: ST_TO_ADDR
72520: LD_INT 5
72522: PUSH
72523: FOR_TO
72524: IFFALSE 72603
// begin uc_nation := nation_nature ;
72526: LD_ADDR_OWVAR 21
72530: PUSH
72531: LD_INT 0
72533: ST_TO_ADDR
// uc_side := 0 ;
72534: LD_ADDR_OWVAR 20
72538: PUSH
72539: LD_INT 0
72541: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72542: LD_ADDR_OWVAR 29
72546: PUSH
72547: LD_INT 12
72549: PUSH
72550: LD_INT 12
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: ST_TO_ADDR
// hc_agressivity := 20 ;
72557: LD_ADDR_OWVAR 35
72561: PUSH
72562: LD_INT 20
72564: ST_TO_ADDR
// hc_class := class_tiger ;
72565: LD_ADDR_OWVAR 28
72569: PUSH
72570: LD_INT 14
72572: ST_TO_ADDR
// hc_gallery :=  ;
72573: LD_ADDR_OWVAR 33
72577: PUSH
72578: LD_STRING 
72580: ST_TO_ADDR
// hc_name :=  ;
72581: LD_ADDR_OWVAR 26
72585: PUSH
72586: LD_STRING 
72588: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
72589: CALL_OW 44
72593: PPUSH
72594: LD_INT 0
72596: PPUSH
72597: CALL_OW 51
// end ;
72601: GO 72523
72603: POP
72604: POP
// end ;
72605: PPOPN 1
72607: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72608: LD_EXP 47
72612: IFFALSE 72620
72614: PUSH
72615: LD_EXP 67
72619: AND
72620: IFFALSE 72629
72622: GO 72624
72624: DISABLE
// StreamSibBomb ;
72625: CALL 72630 0 0
72629: END
// export function StreamSibBomb ; var i , x , y ; begin
72630: LD_INT 0
72632: PPUSH
72633: PPUSH
72634: PPUSH
72635: PPUSH
// result := false ;
72636: LD_ADDR_VAR 0 1
72640: PUSH
72641: LD_INT 0
72643: ST_TO_ADDR
// for i := 1 to 16 do
72644: LD_ADDR_VAR 0 2
72648: PUSH
72649: DOUBLE
72650: LD_INT 1
72652: DEC
72653: ST_TO_ADDR
72654: LD_INT 16
72656: PUSH
72657: FOR_TO
72658: IFFALSE 72857
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72660: LD_ADDR_VAR 0 3
72664: PUSH
72665: LD_INT 10
72667: PUSH
72668: LD_INT 20
72670: PUSH
72671: LD_INT 30
72673: PUSH
72674: LD_INT 40
72676: PUSH
72677: LD_INT 50
72679: PUSH
72680: LD_INT 60
72682: PUSH
72683: LD_INT 70
72685: PUSH
72686: LD_INT 80
72688: PUSH
72689: LD_INT 90
72691: PUSH
72692: LD_INT 100
72694: PUSH
72695: LD_INT 110
72697: PUSH
72698: LD_INT 120
72700: PUSH
72701: LD_INT 130
72703: PUSH
72704: LD_INT 140
72706: PUSH
72707: LD_INT 150
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 1
72729: PPUSH
72730: LD_INT 15
72732: PPUSH
72733: CALL_OW 12
72737: ARRAY
72738: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72739: LD_ADDR_VAR 0 4
72743: PUSH
72744: LD_INT 10
72746: PUSH
72747: LD_INT 20
72749: PUSH
72750: LD_INT 30
72752: PUSH
72753: LD_INT 40
72755: PUSH
72756: LD_INT 50
72758: PUSH
72759: LD_INT 60
72761: PUSH
72762: LD_INT 70
72764: PUSH
72765: LD_INT 80
72767: PUSH
72768: LD_INT 90
72770: PUSH
72771: LD_INT 100
72773: PUSH
72774: LD_INT 110
72776: PUSH
72777: LD_INT 120
72779: PUSH
72780: LD_INT 130
72782: PUSH
72783: LD_INT 140
72785: PUSH
72786: LD_INT 150
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 1
72808: PPUSH
72809: LD_INT 15
72811: PPUSH
72812: CALL_OW 12
72816: ARRAY
72817: ST_TO_ADDR
// if ValidHex ( x , y ) then
72818: LD_VAR 0 3
72822: PPUSH
72823: LD_VAR 0 4
72827: PPUSH
72828: CALL_OW 488
72832: IFFALSE 72855
// begin result := [ x , y ] ;
72834: LD_ADDR_VAR 0 1
72838: PUSH
72839: LD_VAR 0 3
72843: PUSH
72844: LD_VAR 0 4
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: ST_TO_ADDR
// break ;
72853: GO 72857
// end ; end ;
72855: GO 72657
72857: POP
72858: POP
// if result then
72859: LD_VAR 0 1
72863: IFFALSE 72923
// begin ToLua ( playSibBomb() ) ;
72865: LD_STRING playSibBomb()
72867: PPUSH
72868: CALL_OW 559
// wait ( 0 0$14 ) ;
72872: LD_INT 490
72874: PPUSH
72875: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72879: LD_VAR 0 1
72883: PUSH
72884: LD_INT 1
72886: ARRAY
72887: PPUSH
72888: LD_VAR 0 1
72892: PUSH
72893: LD_INT 2
72895: ARRAY
72896: PPUSH
72897: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72901: LD_VAR 0 1
72905: PUSH
72906: LD_INT 1
72908: ARRAY
72909: PPUSH
72910: LD_VAR 0 1
72914: PUSH
72915: LD_INT 2
72917: ARRAY
72918: PPUSH
72919: CALL_OW 429
// end ; end ;
72923: LD_VAR 0 1
72927: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72928: LD_EXP 47
72932: IFFALSE 72940
72934: PUSH
72935: LD_EXP 69
72939: AND
72940: IFFALSE 72952
72942: GO 72944
72944: DISABLE
// YouLost (  ) ;
72945: LD_STRING 
72947: PPUSH
72948: CALL_OW 104
72952: END
// every 0 0$1 trigger StreamModeActive and sFog do
72953: LD_EXP 47
72957: IFFALSE 72965
72959: PUSH
72960: LD_EXP 68
72964: AND
72965: IFFALSE 72979
72967: GO 72969
72969: DISABLE
// FogOff ( your_side ) ;
72970: LD_OWVAR 2
72974: PPUSH
72975: CALL_OW 344
72979: END
// every 0 0$1 trigger StreamModeActive and sSun do
72980: LD_EXP 47
72984: IFFALSE 72992
72986: PUSH
72987: LD_EXP 70
72991: AND
72992: IFFALSE 73020
72994: GO 72996
72996: DISABLE
// begin solar_recharge_percent := 0 ;
72997: LD_ADDR_OWVAR 79
73001: PUSH
73002: LD_INT 0
73004: ST_TO_ADDR
// wait ( 5 5$00 ) ;
73005: LD_INT 10500
73007: PPUSH
73008: CALL_OW 67
// solar_recharge_percent := 100 ;
73012: LD_ADDR_OWVAR 79
73016: PUSH
73017: LD_INT 100
73019: ST_TO_ADDR
// end ;
73020: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
73021: LD_EXP 47
73025: IFFALSE 73033
73027: PUSH
73028: LD_EXP 71
73032: AND
73033: IFFALSE 73272
73035: GO 73037
73037: DISABLE
73038: LD_INT 0
73040: PPUSH
73041: PPUSH
73042: PPUSH
// begin tmp := [ ] ;
73043: LD_ADDR_VAR 0 3
73047: PUSH
73048: EMPTY
73049: ST_TO_ADDR
// for i := 1 to 6 do
73050: LD_ADDR_VAR 0 1
73054: PUSH
73055: DOUBLE
73056: LD_INT 1
73058: DEC
73059: ST_TO_ADDR
73060: LD_INT 6
73062: PUSH
73063: FOR_TO
73064: IFFALSE 73169
// begin uc_nation := nation_nature ;
73066: LD_ADDR_OWVAR 21
73070: PUSH
73071: LD_INT 0
73073: ST_TO_ADDR
// uc_side := 0 ;
73074: LD_ADDR_OWVAR 20
73078: PUSH
73079: LD_INT 0
73081: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73082: LD_ADDR_OWVAR 29
73086: PUSH
73087: LD_INT 12
73089: PUSH
73090: LD_INT 12
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: ST_TO_ADDR
// hc_agressivity := 20 ;
73097: LD_ADDR_OWVAR 35
73101: PUSH
73102: LD_INT 20
73104: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
73105: LD_ADDR_OWVAR 28
73109: PUSH
73110: LD_INT 17
73112: ST_TO_ADDR
// hc_gallery :=  ;
73113: LD_ADDR_OWVAR 33
73117: PUSH
73118: LD_STRING 
73120: ST_TO_ADDR
// hc_name :=  ;
73121: LD_ADDR_OWVAR 26
73125: PUSH
73126: LD_STRING 
73128: ST_TO_ADDR
// un := CreateHuman ;
73129: LD_ADDR_VAR 0 2
73133: PUSH
73134: CALL_OW 44
73138: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
73139: LD_VAR 0 2
73143: PPUSH
73144: LD_INT 1
73146: PPUSH
73147: CALL_OW 51
// tmp := tmp ^ un ;
73151: LD_ADDR_VAR 0 3
73155: PUSH
73156: LD_VAR 0 3
73160: PUSH
73161: LD_VAR 0 2
73165: ADD
73166: ST_TO_ADDR
// end ;
73167: GO 73063
73169: POP
73170: POP
// repeat wait ( 0 0$1 ) ;
73171: LD_INT 35
73173: PPUSH
73174: CALL_OW 67
// for un in tmp do
73178: LD_ADDR_VAR 0 2
73182: PUSH
73183: LD_VAR 0 3
73187: PUSH
73188: FOR_IN
73189: IFFALSE 73263
// begin if IsDead ( un ) then
73191: LD_VAR 0 2
73195: PPUSH
73196: CALL_OW 301
73200: IFFALSE 73220
// begin tmp := tmp diff un ;
73202: LD_ADDR_VAR 0 3
73206: PUSH
73207: LD_VAR 0 3
73211: PUSH
73212: LD_VAR 0 2
73216: DIFF
73217: ST_TO_ADDR
// continue ;
73218: GO 73188
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
73220: LD_VAR 0 2
73224: PPUSH
73225: LD_INT 3
73227: PUSH
73228: LD_INT 22
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PPUSH
73242: CALL_OW 69
73246: PPUSH
73247: LD_VAR 0 2
73251: PPUSH
73252: CALL_OW 74
73256: PPUSH
73257: CALL_OW 115
// end ;
73261: GO 73188
73263: POP
73264: POP
// until not tmp ;
73265: LD_VAR 0 3
73269: NOT
73270: IFFALSE 73171
// end ;
73272: PPOPN 3
73274: END
// every 0 0$1 trigger StreamModeActive and sTroll do
73275: LD_EXP 47
73279: IFFALSE 73287
73281: PUSH
73282: LD_EXP 72
73286: AND
73287: IFFALSE 73341
73289: GO 73291
73291: DISABLE
// begin ToLua ( displayTroll(); ) ;
73292: LD_STRING displayTroll();
73294: PPUSH
73295: CALL_OW 559
// wait ( 3 3$00 ) ;
73299: LD_INT 6300
73301: PPUSH
73302: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73306: LD_STRING hideTroll();
73308: PPUSH
73309: CALL_OW 559
// wait ( 1 1$00 ) ;
73313: LD_INT 2100
73315: PPUSH
73316: CALL_OW 67
// ToLua ( displayTroll(); ) ;
73320: LD_STRING displayTroll();
73322: PPUSH
73323: CALL_OW 559
// wait ( 1 1$00 ) ;
73327: LD_INT 2100
73329: PPUSH
73330: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73334: LD_STRING hideTroll();
73336: PPUSH
73337: CALL_OW 559
// end ;
73341: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
73342: LD_EXP 47
73346: IFFALSE 73354
73348: PUSH
73349: LD_EXP 73
73353: AND
73354: IFFALSE 73417
73356: GO 73358
73358: DISABLE
73359: LD_INT 0
73361: PPUSH
// begin p := 0 ;
73362: LD_ADDR_VAR 0 1
73366: PUSH
73367: LD_INT 0
73369: ST_TO_ADDR
// repeat game_speed := 1 ;
73370: LD_ADDR_OWVAR 65
73374: PUSH
73375: LD_INT 1
73377: ST_TO_ADDR
// wait ( 0 0$1 ) ;
73378: LD_INT 35
73380: PPUSH
73381: CALL_OW 67
// p := p + 1 ;
73385: LD_ADDR_VAR 0 1
73389: PUSH
73390: LD_VAR 0 1
73394: PUSH
73395: LD_INT 1
73397: PLUS
73398: ST_TO_ADDR
// until p >= 60 ;
73399: LD_VAR 0 1
73403: PUSH
73404: LD_INT 60
73406: GREATEREQUAL
73407: IFFALSE 73370
// game_speed := 4 ;
73409: LD_ADDR_OWVAR 65
73413: PUSH
73414: LD_INT 4
73416: ST_TO_ADDR
// end ;
73417: PPOPN 1
73419: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
73420: LD_EXP 47
73424: IFFALSE 73432
73426: PUSH
73427: LD_EXP 74
73431: AND
73432: IFFALSE 73578
73434: GO 73436
73436: DISABLE
73437: LD_INT 0
73439: PPUSH
73440: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73441: LD_ADDR_VAR 0 1
73445: PUSH
73446: LD_INT 22
73448: PUSH
73449: LD_OWVAR 2
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 2
73460: PUSH
73461: LD_INT 30
73463: PUSH
73464: LD_INT 0
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 30
73473: PUSH
73474: LD_INT 1
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: LIST
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: PPUSH
73490: CALL_OW 69
73494: ST_TO_ADDR
// if not depot then
73495: LD_VAR 0 1
73499: NOT
73500: IFFALSE 73504
// exit ;
73502: GO 73578
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
73504: LD_ADDR_VAR 0 2
73508: PUSH
73509: LD_VAR 0 1
73513: PUSH
73514: LD_INT 1
73516: PPUSH
73517: LD_VAR 0 1
73521: PPUSH
73522: CALL_OW 12
73526: ARRAY
73527: PPUSH
73528: CALL_OW 274
73532: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
73533: LD_VAR 0 2
73537: PPUSH
73538: LD_INT 1
73540: PPUSH
73541: LD_INT 0
73543: PPUSH
73544: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
73548: LD_VAR 0 2
73552: PPUSH
73553: LD_INT 2
73555: PPUSH
73556: LD_INT 0
73558: PPUSH
73559: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
73563: LD_VAR 0 2
73567: PPUSH
73568: LD_INT 3
73570: PPUSH
73571: LD_INT 0
73573: PPUSH
73574: CALL_OW 277
// end ;
73578: PPOPN 2
73580: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
73581: LD_EXP 47
73585: IFFALSE 73593
73587: PUSH
73588: LD_EXP 75
73592: AND
73593: IFFALSE 73690
73595: GO 73597
73597: DISABLE
73598: LD_INT 0
73600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73601: LD_ADDR_VAR 0 1
73605: PUSH
73606: LD_INT 22
73608: PUSH
73609: LD_OWVAR 2
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: LD_INT 21
73620: PUSH
73621: LD_INT 1
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 3
73630: PUSH
73631: LD_INT 23
73633: PUSH
73634: LD_INT 0
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: LIST
73649: PPUSH
73650: CALL_OW 69
73654: ST_TO_ADDR
// if not tmp then
73655: LD_VAR 0 1
73659: NOT
73660: IFFALSE 73664
// exit ;
73662: GO 73690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73664: LD_VAR 0 1
73668: PUSH
73669: LD_INT 1
73671: PPUSH
73672: LD_VAR 0 1
73676: PPUSH
73677: CALL_OW 12
73681: ARRAY
73682: PPUSH
73683: LD_INT 200
73685: PPUSH
73686: CALL_OW 234
// end ;
73690: PPOPN 1
73692: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73693: LD_EXP 47
73697: IFFALSE 73705
73699: PUSH
73700: LD_EXP 76
73704: AND
73705: IFFALSE 73784
73707: GO 73709
73709: DISABLE
73710: LD_INT 0
73712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73713: LD_ADDR_VAR 0 1
73717: PUSH
73718: LD_INT 22
73720: PUSH
73721: LD_OWVAR 2
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: PUSH
73730: LD_INT 21
73732: PUSH
73733: LD_INT 2
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PPUSH
73744: CALL_OW 69
73748: ST_TO_ADDR
// if not tmp then
73749: LD_VAR 0 1
73753: NOT
73754: IFFALSE 73758
// exit ;
73756: GO 73784
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73758: LD_VAR 0 1
73762: PUSH
73763: LD_INT 1
73765: PPUSH
73766: LD_VAR 0 1
73770: PPUSH
73771: CALL_OW 12
73775: ARRAY
73776: PPUSH
73777: LD_INT 60
73779: PPUSH
73780: CALL_OW 234
// end ;
73784: PPOPN 1
73786: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73787: LD_EXP 47
73791: IFFALSE 73799
73793: PUSH
73794: LD_EXP 77
73798: AND
73799: IFFALSE 73898
73801: GO 73803
73803: DISABLE
73804: LD_INT 0
73806: PPUSH
73807: PPUSH
// begin enable ;
73808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73809: LD_ADDR_VAR 0 1
73813: PUSH
73814: LD_INT 22
73816: PUSH
73817: LD_OWVAR 2
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 61
73828: PUSH
73829: EMPTY
73830: LIST
73831: PUSH
73832: LD_INT 33
73834: PUSH
73835: LD_INT 2
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: LIST
73846: PPUSH
73847: CALL_OW 69
73851: ST_TO_ADDR
// if not tmp then
73852: LD_VAR 0 1
73856: NOT
73857: IFFALSE 73861
// exit ;
73859: GO 73898
// for i in tmp do
73861: LD_ADDR_VAR 0 2
73865: PUSH
73866: LD_VAR 0 1
73870: PUSH
73871: FOR_IN
73872: IFFALSE 73896
// if IsControledBy ( i ) then
73874: LD_VAR 0 2
73878: PPUSH
73879: CALL_OW 312
73883: IFFALSE 73894
// ComUnlink ( i ) ;
73885: LD_VAR 0 2
73889: PPUSH
73890: CALL_OW 136
73894: GO 73871
73896: POP
73897: POP
// end ;
73898: PPOPN 2
73900: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73901: LD_EXP 47
73905: IFFALSE 73913
73907: PUSH
73908: LD_EXP 78
73912: AND
73913: IFFALSE 74053
73915: GO 73917
73917: DISABLE
73918: LD_INT 0
73920: PPUSH
73921: PPUSH
// begin ToLua ( displayPowell(); ) ;
73922: LD_STRING displayPowell();
73924: PPUSH
73925: CALL_OW 559
// uc_side := 0 ;
73929: LD_ADDR_OWVAR 20
73933: PUSH
73934: LD_INT 0
73936: ST_TO_ADDR
// uc_nation := 2 ;
73937: LD_ADDR_OWVAR 21
73941: PUSH
73942: LD_INT 2
73944: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73945: LD_ADDR_OWVAR 37
73949: PUSH
73950: LD_INT 14
73952: ST_TO_ADDR
// vc_engine := engine_siberite ;
73953: LD_ADDR_OWVAR 39
73957: PUSH
73958: LD_INT 3
73960: ST_TO_ADDR
// vc_control := control_apeman ;
73961: LD_ADDR_OWVAR 38
73965: PUSH
73966: LD_INT 5
73968: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73969: LD_ADDR_OWVAR 40
73973: PUSH
73974: LD_INT 29
73976: ST_TO_ADDR
// un := CreateVehicle ;
73977: LD_ADDR_VAR 0 2
73981: PUSH
73982: CALL_OW 45
73986: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73987: LD_VAR 0 2
73991: PPUSH
73992: LD_INT 1
73994: PPUSH
73995: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73999: LD_INT 35
74001: PPUSH
74002: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74006: LD_VAR 0 2
74010: PPUSH
74011: LD_INT 22
74013: PUSH
74014: LD_OWVAR 2
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PPUSH
74023: CALL_OW 69
74027: PPUSH
74028: LD_VAR 0 2
74032: PPUSH
74033: CALL_OW 74
74037: PPUSH
74038: CALL_OW 115
// until IsDead ( un ) ;
74042: LD_VAR 0 2
74046: PPUSH
74047: CALL_OW 301
74051: IFFALSE 73999
// end ;
74053: PPOPN 2
74055: END
// every 0 0$1 trigger StreamModeActive and sStu do
74056: LD_EXP 47
74060: IFFALSE 74068
74062: PUSH
74063: LD_EXP 86
74067: AND
74068: IFFALSE 74084
74070: GO 74072
74072: DISABLE
// begin ToLua ( displayStucuk(); ) ;
74073: LD_STRING displayStucuk();
74075: PPUSH
74076: CALL_OW 559
// ResetFog ;
74080: CALL_OW 335
// end ;
74084: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
74085: LD_EXP 47
74089: IFFALSE 74097
74091: PUSH
74092: LD_EXP 79
74096: AND
74097: IFFALSE 74238
74099: GO 74101
74101: DISABLE
74102: LD_INT 0
74104: PPUSH
74105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74106: LD_ADDR_VAR 0 2
74110: PUSH
74111: LD_INT 22
74113: PUSH
74114: LD_OWVAR 2
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 21
74125: PUSH
74126: LD_INT 1
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PPUSH
74137: CALL_OW 69
74141: ST_TO_ADDR
// if not tmp then
74142: LD_VAR 0 2
74146: NOT
74147: IFFALSE 74151
// exit ;
74149: GO 74238
// un := tmp [ rand ( 1 , tmp ) ] ;
74151: LD_ADDR_VAR 0 1
74155: PUSH
74156: LD_VAR 0 2
74160: PUSH
74161: LD_INT 1
74163: PPUSH
74164: LD_VAR 0 2
74168: PPUSH
74169: CALL_OW 12
74173: ARRAY
74174: ST_TO_ADDR
// SetSide ( un , 0 ) ;
74175: LD_VAR 0 1
74179: PPUSH
74180: LD_INT 0
74182: PPUSH
74183: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
74187: LD_VAR 0 1
74191: PPUSH
74192: LD_OWVAR 3
74196: PUSH
74197: LD_VAR 0 1
74201: DIFF
74202: PPUSH
74203: LD_VAR 0 1
74207: PPUSH
74208: CALL_OW 74
74212: PPUSH
74213: CALL_OW 115
// wait ( 0 0$20 ) ;
74217: LD_INT 700
74219: PPUSH
74220: CALL_OW 67
// SetSide ( un , your_side ) ;
74224: LD_VAR 0 1
74228: PPUSH
74229: LD_OWVAR 2
74233: PPUSH
74234: CALL_OW 235
// end ;
74238: PPOPN 2
74240: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
74241: LD_EXP 47
74245: IFFALSE 74253
74247: PUSH
74248: LD_EXP 80
74252: AND
74253: IFFALSE 74359
74255: GO 74257
74257: DISABLE
74258: LD_INT 0
74260: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74261: LD_ADDR_VAR 0 1
74265: PUSH
74266: LD_INT 22
74268: PUSH
74269: LD_OWVAR 2
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 2
74280: PUSH
74281: LD_INT 30
74283: PUSH
74284: LD_INT 0
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_INT 30
74293: PUSH
74294: LD_INT 1
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: LIST
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PPUSH
74310: CALL_OW 69
74314: ST_TO_ADDR
// if not depot then
74315: LD_VAR 0 1
74319: NOT
74320: IFFALSE 74324
// exit ;
74322: GO 74359
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
74324: LD_VAR 0 1
74328: PUSH
74329: LD_INT 1
74331: ARRAY
74332: PPUSH
74333: CALL_OW 250
74337: PPUSH
74338: LD_VAR 0 1
74342: PUSH
74343: LD_INT 1
74345: ARRAY
74346: PPUSH
74347: CALL_OW 251
74351: PPUSH
74352: LD_INT 70
74354: PPUSH
74355: CALL_OW 495
// end ;
74359: PPOPN 1
74361: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
74362: LD_EXP 47
74366: IFFALSE 74374
74368: PUSH
74369: LD_EXP 81
74373: AND
74374: IFFALSE 74585
74376: GO 74378
74378: DISABLE
74379: LD_INT 0
74381: PPUSH
74382: PPUSH
74383: PPUSH
74384: PPUSH
74385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74386: LD_ADDR_VAR 0 5
74390: PUSH
74391: LD_INT 22
74393: PUSH
74394: LD_OWVAR 2
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 21
74405: PUSH
74406: LD_INT 1
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: EMPTY
74414: LIST
74415: LIST
74416: PPUSH
74417: CALL_OW 69
74421: ST_TO_ADDR
// if not tmp then
74422: LD_VAR 0 5
74426: NOT
74427: IFFALSE 74431
// exit ;
74429: GO 74585
// for i in tmp do
74431: LD_ADDR_VAR 0 1
74435: PUSH
74436: LD_VAR 0 5
74440: PUSH
74441: FOR_IN
74442: IFFALSE 74583
// begin d := rand ( 0 , 5 ) ;
74444: LD_ADDR_VAR 0 4
74448: PUSH
74449: LD_INT 0
74451: PPUSH
74452: LD_INT 5
74454: PPUSH
74455: CALL_OW 12
74459: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
74460: LD_ADDR_VAR 0 2
74464: PUSH
74465: LD_VAR 0 1
74469: PPUSH
74470: CALL_OW 250
74474: PPUSH
74475: LD_VAR 0 4
74479: PPUSH
74480: LD_INT 3
74482: PPUSH
74483: LD_INT 12
74485: PPUSH
74486: CALL_OW 12
74490: PPUSH
74491: CALL_OW 272
74495: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
74496: LD_ADDR_VAR 0 3
74500: PUSH
74501: LD_VAR 0 1
74505: PPUSH
74506: CALL_OW 251
74510: PPUSH
74511: LD_VAR 0 4
74515: PPUSH
74516: LD_INT 3
74518: PPUSH
74519: LD_INT 12
74521: PPUSH
74522: CALL_OW 12
74526: PPUSH
74527: CALL_OW 273
74531: ST_TO_ADDR
// if ValidHex ( x , y ) then
74532: LD_VAR 0 2
74536: PPUSH
74537: LD_VAR 0 3
74541: PPUSH
74542: CALL_OW 488
74546: IFFALSE 74581
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
74548: LD_VAR 0 1
74552: PPUSH
74553: LD_VAR 0 2
74557: PPUSH
74558: LD_VAR 0 3
74562: PPUSH
74563: LD_INT 3
74565: PPUSH
74566: LD_INT 6
74568: PPUSH
74569: CALL_OW 12
74573: PPUSH
74574: LD_INT 1
74576: PPUSH
74577: CALL_OW 483
// end ;
74581: GO 74441
74583: POP
74584: POP
// end ;
74585: PPOPN 5
74587: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
74588: LD_EXP 47
74592: IFFALSE 74600
74594: PUSH
74595: LD_EXP 82
74599: AND
74600: IFFALSE 74694
74602: GO 74604
74604: DISABLE
74605: LD_INT 0
74607: PPUSH
74608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
74609: LD_ADDR_VAR 0 2
74613: PUSH
74614: LD_INT 22
74616: PUSH
74617: LD_OWVAR 2
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_INT 32
74628: PUSH
74629: LD_INT 1
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: LD_INT 21
74638: PUSH
74639: LD_INT 2
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: LIST
74650: PPUSH
74651: CALL_OW 69
74655: ST_TO_ADDR
// if not tmp then
74656: LD_VAR 0 2
74660: NOT
74661: IFFALSE 74665
// exit ;
74663: GO 74694
// for i in tmp do
74665: LD_ADDR_VAR 0 1
74669: PUSH
74670: LD_VAR 0 2
74674: PUSH
74675: FOR_IN
74676: IFFALSE 74692
// SetFuel ( i , 0 ) ;
74678: LD_VAR 0 1
74682: PPUSH
74683: LD_INT 0
74685: PPUSH
74686: CALL_OW 240
74690: GO 74675
74692: POP
74693: POP
// end ;
74694: PPOPN 2
74696: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74697: LD_EXP 47
74701: IFFALSE 74709
74703: PUSH
74704: LD_EXP 83
74708: AND
74709: IFFALSE 74775
74711: GO 74713
74713: DISABLE
74714: LD_INT 0
74716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74717: LD_ADDR_VAR 0 1
74721: PUSH
74722: LD_INT 22
74724: PUSH
74725: LD_OWVAR 2
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 30
74736: PUSH
74737: LD_INT 29
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PPUSH
74748: CALL_OW 69
74752: ST_TO_ADDR
// if not tmp then
74753: LD_VAR 0 1
74757: NOT
74758: IFFALSE 74762
// exit ;
74760: GO 74775
// DestroyUnit ( tmp [ 1 ] ) ;
74762: LD_VAR 0 1
74766: PUSH
74767: LD_INT 1
74769: ARRAY
74770: PPUSH
74771: CALL_OW 65
// end ;
74775: PPOPN 1
74777: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74778: LD_EXP 47
74782: IFFALSE 74790
74784: PUSH
74785: LD_EXP 85
74789: AND
74790: IFFALSE 74919
74792: GO 74794
74794: DISABLE
74795: LD_INT 0
74797: PPUSH
// begin uc_side := 0 ;
74798: LD_ADDR_OWVAR 20
74802: PUSH
74803: LD_INT 0
74805: ST_TO_ADDR
// uc_nation := nation_arabian ;
74806: LD_ADDR_OWVAR 21
74810: PUSH
74811: LD_INT 2
74813: ST_TO_ADDR
// hc_gallery :=  ;
74814: LD_ADDR_OWVAR 33
74818: PUSH
74819: LD_STRING 
74821: ST_TO_ADDR
// hc_name :=  ;
74822: LD_ADDR_OWVAR 26
74826: PUSH
74827: LD_STRING 
74829: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74830: LD_INT 1
74832: PPUSH
74833: LD_INT 11
74835: PPUSH
74836: LD_INT 10
74838: PPUSH
74839: CALL_OW 380
// un := CreateHuman ;
74843: LD_ADDR_VAR 0 1
74847: PUSH
74848: CALL_OW 44
74852: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74853: LD_VAR 0 1
74857: PPUSH
74858: LD_INT 1
74860: PPUSH
74861: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74865: LD_INT 35
74867: PPUSH
74868: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74872: LD_VAR 0 1
74876: PPUSH
74877: LD_INT 22
74879: PUSH
74880: LD_OWVAR 2
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PPUSH
74889: CALL_OW 69
74893: PPUSH
74894: LD_VAR 0 1
74898: PPUSH
74899: CALL_OW 74
74903: PPUSH
74904: CALL_OW 115
// until IsDead ( un ) ;
74908: LD_VAR 0 1
74912: PPUSH
74913: CALL_OW 301
74917: IFFALSE 74865
// end ;
74919: PPOPN 1
74921: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74922: LD_EXP 47
74926: IFFALSE 74934
74928: PUSH
74929: LD_EXP 87
74933: AND
74934: IFFALSE 74946
74936: GO 74938
74938: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74939: LD_STRING earthquake(getX(game), 0, 32)
74941: PPUSH
74942: CALL_OW 559
74946: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74947: LD_EXP 47
74951: IFFALSE 74959
74953: PUSH
74954: LD_EXP 88
74958: AND
74959: IFFALSE 75050
74961: GO 74963
74963: DISABLE
74964: LD_INT 0
74966: PPUSH
// begin enable ;
74967: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74968: LD_ADDR_VAR 0 1
74972: PUSH
74973: LD_INT 22
74975: PUSH
74976: LD_OWVAR 2
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 21
74987: PUSH
74988: LD_INT 2
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 33
74997: PUSH
74998: LD_INT 3
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: EMPTY
75006: LIST
75007: LIST
75008: LIST
75009: PPUSH
75010: CALL_OW 69
75014: ST_TO_ADDR
// if not tmp then
75015: LD_VAR 0 1
75019: NOT
75020: IFFALSE 75024
// exit ;
75022: GO 75050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75024: LD_VAR 0 1
75028: PUSH
75029: LD_INT 1
75031: PPUSH
75032: LD_VAR 0 1
75036: PPUSH
75037: CALL_OW 12
75041: ARRAY
75042: PPUSH
75043: LD_INT 1
75045: PPUSH
75046: CALL_OW 234
// end ;
75050: PPOPN 1
75052: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
75053: LD_EXP 47
75057: IFFALSE 75065
75059: PUSH
75060: LD_EXP 89
75064: AND
75065: IFFALSE 75206
75067: GO 75069
75069: DISABLE
75070: LD_INT 0
75072: PPUSH
75073: PPUSH
75074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75075: LD_ADDR_VAR 0 3
75079: PUSH
75080: LD_INT 22
75082: PUSH
75083: LD_OWVAR 2
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: PUSH
75092: LD_INT 25
75094: PUSH
75095: LD_INT 1
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PPUSH
75106: CALL_OW 69
75110: ST_TO_ADDR
// if not tmp then
75111: LD_VAR 0 3
75115: NOT
75116: IFFALSE 75120
// exit ;
75118: GO 75206
// un := tmp [ rand ( 1 , tmp ) ] ;
75120: LD_ADDR_VAR 0 2
75124: PUSH
75125: LD_VAR 0 3
75129: PUSH
75130: LD_INT 1
75132: PPUSH
75133: LD_VAR 0 3
75137: PPUSH
75138: CALL_OW 12
75142: ARRAY
75143: ST_TO_ADDR
// if Crawls ( un ) then
75144: LD_VAR 0 2
75148: PPUSH
75149: CALL_OW 318
75153: IFFALSE 75164
// ComWalk ( un ) ;
75155: LD_VAR 0 2
75159: PPUSH
75160: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
75164: LD_VAR 0 2
75168: PPUSH
75169: LD_INT 9
75171: PPUSH
75172: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
75176: LD_INT 28
75178: PPUSH
75179: LD_OWVAR 2
75183: PPUSH
75184: LD_INT 2
75186: PPUSH
75187: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
75191: LD_INT 29
75193: PPUSH
75194: LD_OWVAR 2
75198: PPUSH
75199: LD_INT 2
75201: PPUSH
75202: CALL_OW 322
// end ;
75206: PPOPN 3
75208: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
75209: LD_EXP 47
75213: IFFALSE 75221
75215: PUSH
75216: LD_EXP 90
75220: AND
75221: IFFALSE 75332
75223: GO 75225
75225: DISABLE
75226: LD_INT 0
75228: PPUSH
75229: PPUSH
75230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75231: LD_ADDR_VAR 0 3
75235: PUSH
75236: LD_INT 22
75238: PUSH
75239: LD_OWVAR 2
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: PUSH
75248: LD_INT 25
75250: PUSH
75251: LD_INT 1
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PPUSH
75262: CALL_OW 69
75266: ST_TO_ADDR
// if not tmp then
75267: LD_VAR 0 3
75271: NOT
75272: IFFALSE 75276
// exit ;
75274: GO 75332
// un := tmp [ rand ( 1 , tmp ) ] ;
75276: LD_ADDR_VAR 0 2
75280: PUSH
75281: LD_VAR 0 3
75285: PUSH
75286: LD_INT 1
75288: PPUSH
75289: LD_VAR 0 3
75293: PPUSH
75294: CALL_OW 12
75298: ARRAY
75299: ST_TO_ADDR
// if Crawls ( un ) then
75300: LD_VAR 0 2
75304: PPUSH
75305: CALL_OW 318
75309: IFFALSE 75320
// ComWalk ( un ) ;
75311: LD_VAR 0 2
75315: PPUSH
75316: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75320: LD_VAR 0 2
75324: PPUSH
75325: LD_INT 8
75327: PPUSH
75328: CALL_OW 336
// end ;
75332: PPOPN 3
75334: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
75335: LD_EXP 47
75339: IFFALSE 75347
75341: PUSH
75342: LD_EXP 91
75346: AND
75347: IFFALSE 75491
75349: GO 75351
75351: DISABLE
75352: LD_INT 0
75354: PPUSH
75355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
75356: LD_ADDR_VAR 0 2
75360: PUSH
75361: LD_INT 22
75363: PUSH
75364: LD_OWVAR 2
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: PUSH
75373: LD_INT 21
75375: PUSH
75376: LD_INT 2
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: PUSH
75383: LD_INT 2
75385: PUSH
75386: LD_INT 34
75388: PUSH
75389: LD_INT 12
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: LD_INT 34
75398: PUSH
75399: LD_INT 51
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 34
75408: PUSH
75409: LD_INT 32
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: LIST
75426: PPUSH
75427: CALL_OW 69
75431: ST_TO_ADDR
// if not tmp then
75432: LD_VAR 0 2
75436: NOT
75437: IFFALSE 75441
// exit ;
75439: GO 75491
// for i in tmp do
75441: LD_ADDR_VAR 0 1
75445: PUSH
75446: LD_VAR 0 2
75450: PUSH
75451: FOR_IN
75452: IFFALSE 75489
// if GetCargo ( i , mat_artifact ) = 0 then
75454: LD_VAR 0 1
75458: PPUSH
75459: LD_INT 4
75461: PPUSH
75462: CALL_OW 289
75466: PUSH
75467: LD_INT 0
75469: EQUAL
75470: IFFALSE 75487
// SetCargo ( i , mat_siberit , 100 ) ;
75472: LD_VAR 0 1
75476: PPUSH
75477: LD_INT 3
75479: PPUSH
75480: LD_INT 100
75482: PPUSH
75483: CALL_OW 290
75487: GO 75451
75489: POP
75490: POP
// end ;
75491: PPOPN 2
75493: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
75494: LD_EXP 47
75498: IFFALSE 75506
75500: PUSH
75501: LD_EXP 92
75505: AND
75506: IFFALSE 75689
75508: GO 75510
75510: DISABLE
75511: LD_INT 0
75513: PPUSH
75514: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75515: LD_ADDR_VAR 0 2
75519: PUSH
75520: LD_INT 22
75522: PUSH
75523: LD_OWVAR 2
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PPUSH
75532: CALL_OW 69
75536: ST_TO_ADDR
// if not tmp then
75537: LD_VAR 0 2
75541: NOT
75542: IFFALSE 75546
// exit ;
75544: GO 75689
// for i := 1 to 2 do
75546: LD_ADDR_VAR 0 1
75550: PUSH
75551: DOUBLE
75552: LD_INT 1
75554: DEC
75555: ST_TO_ADDR
75556: LD_INT 2
75558: PUSH
75559: FOR_TO
75560: IFFALSE 75687
// begin uc_side := your_side ;
75562: LD_ADDR_OWVAR 20
75566: PUSH
75567: LD_OWVAR 2
75571: ST_TO_ADDR
// uc_nation := nation_american ;
75572: LD_ADDR_OWVAR 21
75576: PUSH
75577: LD_INT 1
75579: ST_TO_ADDR
// vc_chassis := us_morphling ;
75580: LD_ADDR_OWVAR 37
75584: PUSH
75585: LD_INT 5
75587: ST_TO_ADDR
// vc_engine := engine_siberite ;
75588: LD_ADDR_OWVAR 39
75592: PUSH
75593: LD_INT 3
75595: ST_TO_ADDR
// vc_control := control_computer ;
75596: LD_ADDR_OWVAR 38
75600: PUSH
75601: LD_INT 3
75603: ST_TO_ADDR
// vc_weapon := us_double_laser ;
75604: LD_ADDR_OWVAR 40
75608: PUSH
75609: LD_INT 10
75611: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
75612: LD_VAR 0 2
75616: PUSH
75617: LD_INT 1
75619: ARRAY
75620: PPUSH
75621: CALL_OW 310
75625: NOT
75626: IFFALSE 75673
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
75628: CALL_OW 45
75632: PPUSH
75633: LD_VAR 0 2
75637: PUSH
75638: LD_INT 1
75640: ARRAY
75641: PPUSH
75642: CALL_OW 250
75646: PPUSH
75647: LD_VAR 0 2
75651: PUSH
75652: LD_INT 1
75654: ARRAY
75655: PPUSH
75656: CALL_OW 251
75660: PPUSH
75661: LD_INT 12
75663: PPUSH
75664: LD_INT 1
75666: PPUSH
75667: CALL_OW 50
75671: GO 75685
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75673: CALL_OW 45
75677: PPUSH
75678: LD_INT 1
75680: PPUSH
75681: CALL_OW 51
// end ;
75685: GO 75559
75687: POP
75688: POP
// end ;
75689: PPOPN 2
75691: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75692: LD_EXP 47
75696: IFFALSE 75704
75698: PUSH
75699: LD_EXP 93
75703: AND
75704: IFFALSE 75926
75706: GO 75708
75708: DISABLE
75709: LD_INT 0
75711: PPUSH
75712: PPUSH
75713: PPUSH
75714: PPUSH
75715: PPUSH
75716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75717: LD_ADDR_VAR 0 6
75721: PUSH
75722: LD_INT 22
75724: PUSH
75725: LD_OWVAR 2
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: LD_INT 21
75736: PUSH
75737: LD_INT 1
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: LD_INT 3
75746: PUSH
75747: LD_INT 23
75749: PUSH
75750: LD_INT 0
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: LIST
75765: PPUSH
75766: CALL_OW 69
75770: ST_TO_ADDR
// if not tmp then
75771: LD_VAR 0 6
75775: NOT
75776: IFFALSE 75780
// exit ;
75778: GO 75926
// s1 := rand ( 1 , 4 ) ;
75780: LD_ADDR_VAR 0 2
75784: PUSH
75785: LD_INT 1
75787: PPUSH
75788: LD_INT 4
75790: PPUSH
75791: CALL_OW 12
75795: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75796: LD_ADDR_VAR 0 4
75800: PUSH
75801: LD_VAR 0 6
75805: PUSH
75806: LD_INT 1
75808: ARRAY
75809: PPUSH
75810: LD_VAR 0 2
75814: PPUSH
75815: CALL_OW 259
75819: ST_TO_ADDR
// if s1 = 1 then
75820: LD_VAR 0 2
75824: PUSH
75825: LD_INT 1
75827: EQUAL
75828: IFFALSE 75848
// s2 := rand ( 2 , 4 ) else
75830: LD_ADDR_VAR 0 3
75834: PUSH
75835: LD_INT 2
75837: PPUSH
75838: LD_INT 4
75840: PPUSH
75841: CALL_OW 12
75845: ST_TO_ADDR
75846: GO 75856
// s2 := 1 ;
75848: LD_ADDR_VAR 0 3
75852: PUSH
75853: LD_INT 1
75855: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75856: LD_ADDR_VAR 0 5
75860: PUSH
75861: LD_VAR 0 6
75865: PUSH
75866: LD_INT 1
75868: ARRAY
75869: PPUSH
75870: LD_VAR 0 3
75874: PPUSH
75875: CALL_OW 259
75879: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75880: LD_VAR 0 6
75884: PUSH
75885: LD_INT 1
75887: ARRAY
75888: PPUSH
75889: LD_VAR 0 2
75893: PPUSH
75894: LD_VAR 0 5
75898: PPUSH
75899: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75903: LD_VAR 0 6
75907: PUSH
75908: LD_INT 1
75910: ARRAY
75911: PPUSH
75912: LD_VAR 0 3
75916: PPUSH
75917: LD_VAR 0 4
75921: PPUSH
75922: CALL_OW 237
// end ;
75926: PPOPN 6
75928: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75929: LD_EXP 47
75933: IFFALSE 75941
75935: PUSH
75936: LD_EXP 94
75940: AND
75941: IFFALSE 76020
75943: GO 75945
75945: DISABLE
75946: LD_INT 0
75948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75949: LD_ADDR_VAR 0 1
75953: PUSH
75954: LD_INT 22
75956: PUSH
75957: LD_OWVAR 2
75961: PUSH
75962: EMPTY
75963: LIST
75964: LIST
75965: PUSH
75966: LD_INT 30
75968: PUSH
75969: LD_INT 3
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: PPUSH
75980: CALL_OW 69
75984: ST_TO_ADDR
// if not tmp then
75985: LD_VAR 0 1
75989: NOT
75990: IFFALSE 75994
// exit ;
75992: GO 76020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75994: LD_VAR 0 1
75998: PUSH
75999: LD_INT 1
76001: PPUSH
76002: LD_VAR 0 1
76006: PPUSH
76007: CALL_OW 12
76011: ARRAY
76012: PPUSH
76013: LD_INT 1
76015: PPUSH
76016: CALL_OW 234
// end ;
76020: PPOPN 1
76022: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
76023: LD_EXP 47
76027: IFFALSE 76035
76029: PUSH
76030: LD_EXP 95
76034: AND
76035: IFFALSE 76147
76037: GO 76039
76039: DISABLE
76040: LD_INT 0
76042: PPUSH
76043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
76044: LD_ADDR_VAR 0 2
76048: PUSH
76049: LD_INT 22
76051: PUSH
76052: LD_OWVAR 2
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 2
76063: PUSH
76064: LD_INT 30
76066: PUSH
76067: LD_INT 27
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: PUSH
76074: LD_INT 30
76076: PUSH
76077: LD_INT 26
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: PUSH
76084: LD_INT 30
76086: PUSH
76087: LD_INT 28
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PPUSH
76104: CALL_OW 69
76108: ST_TO_ADDR
// if not tmp then
76109: LD_VAR 0 2
76113: NOT
76114: IFFALSE 76118
// exit ;
76116: GO 76147
// for i in tmp do
76118: LD_ADDR_VAR 0 1
76122: PUSH
76123: LD_VAR 0 2
76127: PUSH
76128: FOR_IN
76129: IFFALSE 76145
// SetLives ( i , 1 ) ;
76131: LD_VAR 0 1
76135: PPUSH
76136: LD_INT 1
76138: PPUSH
76139: CALL_OW 234
76143: GO 76128
76145: POP
76146: POP
// end ;
76147: PPOPN 2
76149: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
76150: LD_EXP 47
76154: IFFALSE 76162
76156: PUSH
76157: LD_EXP 96
76161: AND
76162: IFFALSE 76449
76164: GO 76166
76166: DISABLE
76167: LD_INT 0
76169: PPUSH
76170: PPUSH
76171: PPUSH
// begin i := rand ( 1 , 7 ) ;
76172: LD_ADDR_VAR 0 1
76176: PUSH
76177: LD_INT 1
76179: PPUSH
76180: LD_INT 7
76182: PPUSH
76183: CALL_OW 12
76187: ST_TO_ADDR
// case i of 1 :
76188: LD_VAR 0 1
76192: PUSH
76193: LD_INT 1
76195: DOUBLE
76196: EQUAL
76197: IFTRUE 76201
76199: GO 76211
76201: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
76202: LD_STRING earthquake(getX(game), 0, 32)
76204: PPUSH
76205: CALL_OW 559
76209: GO 76449
76211: LD_INT 2
76213: DOUBLE
76214: EQUAL
76215: IFTRUE 76219
76217: GO 76233
76219: POP
// begin ToLua ( displayStucuk(); ) ;
76220: LD_STRING displayStucuk();
76222: PPUSH
76223: CALL_OW 559
// ResetFog ;
76227: CALL_OW 335
// end ; 3 :
76231: GO 76449
76233: LD_INT 3
76235: DOUBLE
76236: EQUAL
76237: IFTRUE 76241
76239: GO 76345
76241: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76242: LD_ADDR_VAR 0 2
76246: PUSH
76247: LD_INT 22
76249: PUSH
76250: LD_OWVAR 2
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PUSH
76259: LD_INT 25
76261: PUSH
76262: LD_INT 1
76264: PUSH
76265: EMPTY
76266: LIST
76267: LIST
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: PPUSH
76273: CALL_OW 69
76277: ST_TO_ADDR
// if not tmp then
76278: LD_VAR 0 2
76282: NOT
76283: IFFALSE 76287
// exit ;
76285: GO 76449
// un := tmp [ rand ( 1 , tmp ) ] ;
76287: LD_ADDR_VAR 0 3
76291: PUSH
76292: LD_VAR 0 2
76296: PUSH
76297: LD_INT 1
76299: PPUSH
76300: LD_VAR 0 2
76304: PPUSH
76305: CALL_OW 12
76309: ARRAY
76310: ST_TO_ADDR
// if Crawls ( un ) then
76311: LD_VAR 0 3
76315: PPUSH
76316: CALL_OW 318
76320: IFFALSE 76331
// ComWalk ( un ) ;
76322: LD_VAR 0 3
76326: PPUSH
76327: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76331: LD_VAR 0 3
76335: PPUSH
76336: LD_INT 8
76338: PPUSH
76339: CALL_OW 336
// end ; 4 :
76343: GO 76449
76345: LD_INT 4
76347: DOUBLE
76348: EQUAL
76349: IFTRUE 76353
76351: GO 76427
76353: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76354: LD_ADDR_VAR 0 2
76358: PUSH
76359: LD_INT 22
76361: PUSH
76362: LD_OWVAR 2
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: PUSH
76371: LD_INT 30
76373: PUSH
76374: LD_INT 29
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PPUSH
76385: CALL_OW 69
76389: ST_TO_ADDR
// if not tmp then
76390: LD_VAR 0 2
76394: NOT
76395: IFFALSE 76399
// exit ;
76397: GO 76449
// CenterNowOnUnits ( tmp [ 1 ] ) ;
76399: LD_VAR 0 2
76403: PUSH
76404: LD_INT 1
76406: ARRAY
76407: PPUSH
76408: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
76412: LD_VAR 0 2
76416: PUSH
76417: LD_INT 1
76419: ARRAY
76420: PPUSH
76421: CALL_OW 65
// end ; 5 .. 7 :
76425: GO 76449
76427: LD_INT 5
76429: DOUBLE
76430: GREATEREQUAL
76431: IFFALSE 76439
76433: LD_INT 7
76435: DOUBLE
76436: LESSEQUAL
76437: IFTRUE 76441
76439: GO 76448
76441: POP
// StreamSibBomb ; end ;
76442: CALL 72630 0 0
76446: GO 76449
76448: POP
// end ;
76449: PPOPN 3
76451: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
76452: LD_EXP 47
76456: IFFALSE 76464
76458: PUSH
76459: LD_EXP 97
76463: AND
76464: IFFALSE 76620
76466: GO 76468
76468: DISABLE
76469: LD_INT 0
76471: PPUSH
76472: PPUSH
76473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
76474: LD_ADDR_VAR 0 2
76478: PUSH
76479: LD_INT 81
76481: PUSH
76482: LD_OWVAR 2
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: PUSH
76491: LD_INT 2
76493: PUSH
76494: LD_INT 21
76496: PUSH
76497: LD_INT 1
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 21
76506: PUSH
76507: LD_INT 2
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: LIST
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: PPUSH
76523: CALL_OW 69
76527: ST_TO_ADDR
// if not tmp then
76528: LD_VAR 0 2
76532: NOT
76533: IFFALSE 76537
// exit ;
76535: GO 76620
// p := 0 ;
76537: LD_ADDR_VAR 0 3
76541: PUSH
76542: LD_INT 0
76544: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76545: LD_INT 35
76547: PPUSH
76548: CALL_OW 67
// p := p + 1 ;
76552: LD_ADDR_VAR 0 3
76556: PUSH
76557: LD_VAR 0 3
76561: PUSH
76562: LD_INT 1
76564: PLUS
76565: ST_TO_ADDR
// for i in tmp do
76566: LD_ADDR_VAR 0 1
76570: PUSH
76571: LD_VAR 0 2
76575: PUSH
76576: FOR_IN
76577: IFFALSE 76608
// if GetLives ( i ) < 1000 then
76579: LD_VAR 0 1
76583: PPUSH
76584: CALL_OW 256
76588: PUSH
76589: LD_INT 1000
76591: LESS
76592: IFFALSE 76606
// SetLives ( i , 1000 ) ;
76594: LD_VAR 0 1
76598: PPUSH
76599: LD_INT 1000
76601: PPUSH
76602: CALL_OW 234
76606: GO 76576
76608: POP
76609: POP
// until p > 20 ;
76610: LD_VAR 0 3
76614: PUSH
76615: LD_INT 20
76617: GREATER
76618: IFFALSE 76545
// end ;
76620: PPOPN 3
76622: END
// every 0 0$1 trigger StreamModeActive and sTime do
76623: LD_EXP 47
76627: IFFALSE 76635
76629: PUSH
76630: LD_EXP 98
76634: AND
76635: IFFALSE 76670
76637: GO 76639
76639: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
76640: LD_INT 28
76642: PPUSH
76643: LD_OWVAR 2
76647: PPUSH
76648: LD_INT 2
76650: PPUSH
76651: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76655: LD_INT 30
76657: PPUSH
76658: LD_OWVAR 2
76662: PPUSH
76663: LD_INT 2
76665: PPUSH
76666: CALL_OW 322
// end ;
76670: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76671: LD_EXP 47
76675: IFFALSE 76683
76677: PUSH
76678: LD_EXP 99
76682: AND
76683: IFFALSE 76804
76685: GO 76687
76687: DISABLE
76688: LD_INT 0
76690: PPUSH
76691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76692: LD_ADDR_VAR 0 2
76696: PUSH
76697: LD_INT 22
76699: PUSH
76700: LD_OWVAR 2
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PUSH
76709: LD_INT 21
76711: PUSH
76712: LD_INT 1
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: PUSH
76719: LD_INT 3
76721: PUSH
76722: LD_INT 23
76724: PUSH
76725: LD_INT 0
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: LIST
76740: PPUSH
76741: CALL_OW 69
76745: ST_TO_ADDR
// if not tmp then
76746: LD_VAR 0 2
76750: NOT
76751: IFFALSE 76755
// exit ;
76753: GO 76804
// for i in tmp do
76755: LD_ADDR_VAR 0 1
76759: PUSH
76760: LD_VAR 0 2
76764: PUSH
76765: FOR_IN
76766: IFFALSE 76802
// begin if Crawls ( i ) then
76768: LD_VAR 0 1
76772: PPUSH
76773: CALL_OW 318
76777: IFFALSE 76788
// ComWalk ( i ) ;
76779: LD_VAR 0 1
76783: PPUSH
76784: CALL_OW 138
// SetClass ( i , 2 ) ;
76788: LD_VAR 0 1
76792: PPUSH
76793: LD_INT 2
76795: PPUSH
76796: CALL_OW 336
// end ;
76800: GO 76765
76802: POP
76803: POP
// end ;
76804: PPOPN 2
76806: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76807: LD_EXP 47
76811: IFFALSE 76819
76813: PUSH
76814: LD_EXP 100
76818: AND
76819: IFFALSE 77109
76821: GO 76823
76823: DISABLE
76824: LD_INT 0
76826: PPUSH
76827: PPUSH
76828: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76829: LD_OWVAR 2
76833: PPUSH
76834: LD_INT 9
76836: PPUSH
76837: LD_INT 1
76839: PPUSH
76840: LD_INT 1
76842: PPUSH
76843: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76847: LD_INT 9
76849: PPUSH
76850: LD_OWVAR 2
76854: PPUSH
76855: CALL_OW 343
// uc_side := 9 ;
76859: LD_ADDR_OWVAR 20
76863: PUSH
76864: LD_INT 9
76866: ST_TO_ADDR
// uc_nation := 2 ;
76867: LD_ADDR_OWVAR 21
76871: PUSH
76872: LD_INT 2
76874: ST_TO_ADDR
// hc_name := Dark Warrior ;
76875: LD_ADDR_OWVAR 26
76879: PUSH
76880: LD_STRING Dark Warrior
76882: ST_TO_ADDR
// hc_gallery :=  ;
76883: LD_ADDR_OWVAR 33
76887: PUSH
76888: LD_STRING 
76890: ST_TO_ADDR
// hc_noskilllimit := true ;
76891: LD_ADDR_OWVAR 76
76895: PUSH
76896: LD_INT 1
76898: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76899: LD_ADDR_OWVAR 31
76903: PUSH
76904: LD_INT 30
76906: PUSH
76907: LD_INT 30
76909: PUSH
76910: LD_INT 30
76912: PUSH
76913: LD_INT 30
76915: PUSH
76916: EMPTY
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: ST_TO_ADDR
// un := CreateHuman ;
76922: LD_ADDR_VAR 0 3
76926: PUSH
76927: CALL_OW 44
76931: ST_TO_ADDR
// hc_noskilllimit := false ;
76932: LD_ADDR_OWVAR 76
76936: PUSH
76937: LD_INT 0
76939: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76940: LD_VAR 0 3
76944: PPUSH
76945: LD_INT 1
76947: PPUSH
76948: CALL_OW 51
// ToLua ( playRanger() ) ;
76952: LD_STRING playRanger()
76954: PPUSH
76955: CALL_OW 559
// p := 0 ;
76959: LD_ADDR_VAR 0 2
76963: PUSH
76964: LD_INT 0
76966: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76967: LD_INT 35
76969: PPUSH
76970: CALL_OW 67
// p := p + 1 ;
76974: LD_ADDR_VAR 0 2
76978: PUSH
76979: LD_VAR 0 2
76983: PUSH
76984: LD_INT 1
76986: PLUS
76987: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76988: LD_VAR 0 3
76992: PPUSH
76993: CALL_OW 256
76997: PUSH
76998: LD_INT 1000
77000: LESS
77001: IFFALSE 77015
// SetLives ( un , 1000 ) ;
77003: LD_VAR 0 3
77007: PPUSH
77008: LD_INT 1000
77010: PPUSH
77011: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
77015: LD_VAR 0 3
77019: PPUSH
77020: LD_INT 81
77022: PUSH
77023: LD_OWVAR 2
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: PUSH
77032: LD_INT 91
77034: PUSH
77035: LD_VAR 0 3
77039: PUSH
77040: LD_INT 30
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: LIST
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PPUSH
77052: CALL_OW 69
77056: PPUSH
77057: LD_VAR 0 3
77061: PPUSH
77062: CALL_OW 74
77066: PPUSH
77067: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
77071: LD_VAR 0 2
77075: PUSH
77076: LD_INT 80
77078: GREATER
77079: IFTRUE 77092
77081: PUSH
77082: LD_VAR 0 3
77086: PPUSH
77087: CALL_OW 301
77091: OR
77092: IFFALSE 76967
// if un then
77094: LD_VAR 0 3
77098: IFFALSE 77109
// RemoveUnit ( un ) ;
77100: LD_VAR 0 3
77104: PPUSH
77105: CALL_OW 64
// end ;
77109: PPOPN 3
77111: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
77112: LD_EXP 101
77116: IFFALSE 77232
77118: GO 77120
77120: DISABLE
77121: LD_INT 0
77123: PPUSH
77124: PPUSH
77125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77126: LD_ADDR_VAR 0 2
77130: PUSH
77131: LD_INT 81
77133: PUSH
77134: LD_OWVAR 2
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 21
77145: PUSH
77146: LD_INT 1
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: PUSH
77153: EMPTY
77154: LIST
77155: LIST
77156: PPUSH
77157: CALL_OW 69
77161: ST_TO_ADDR
// ToLua ( playComputer() ) ;
77162: LD_STRING playComputer()
77164: PPUSH
77165: CALL_OW 559
// if not tmp then
77169: LD_VAR 0 2
77173: NOT
77174: IFFALSE 77178
// exit ;
77176: GO 77232
// for i in tmp do
77178: LD_ADDR_VAR 0 1
77182: PUSH
77183: LD_VAR 0 2
77187: PUSH
77188: FOR_IN
77189: IFFALSE 77230
// for j := 1 to 4 do
77191: LD_ADDR_VAR 0 3
77195: PUSH
77196: DOUBLE
77197: LD_INT 1
77199: DEC
77200: ST_TO_ADDR
77201: LD_INT 4
77203: PUSH
77204: FOR_TO
77205: IFFALSE 77226
// SetSkill ( i , j , 10 ) ;
77207: LD_VAR 0 1
77211: PPUSH
77212: LD_VAR 0 3
77216: PPUSH
77217: LD_INT 10
77219: PPUSH
77220: CALL_OW 237
77224: GO 77204
77226: POP
77227: POP
77228: GO 77188
77230: POP
77231: POP
// end ;
77232: PPOPN 3
77234: END
// every 0 0$1 trigger s30 do var i , tmp ;
77235: LD_EXP 102
77239: IFFALSE 77308
77241: GO 77243
77243: DISABLE
77244: LD_INT 0
77246: PPUSH
77247: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77248: LD_ADDR_VAR 0 2
77252: PUSH
77253: LD_INT 22
77255: PUSH
77256: LD_OWVAR 2
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PPUSH
77265: CALL_OW 69
77269: ST_TO_ADDR
// if not tmp then
77270: LD_VAR 0 2
77274: NOT
77275: IFFALSE 77279
// exit ;
77277: GO 77308
// for i in tmp do
77279: LD_ADDR_VAR 0 1
77283: PUSH
77284: LD_VAR 0 2
77288: PUSH
77289: FOR_IN
77290: IFFALSE 77306
// SetLives ( i , 300 ) ;
77292: LD_VAR 0 1
77296: PPUSH
77297: LD_INT 300
77299: PPUSH
77300: CALL_OW 234
77304: GO 77289
77306: POP
77307: POP
// end ;
77308: PPOPN 2
77310: END
// every 0 0$1 trigger s60 do var i , tmp ;
77311: LD_EXP 103
77315: IFFALSE 77384
77317: GO 77319
77319: DISABLE
77320: LD_INT 0
77322: PPUSH
77323: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77324: LD_ADDR_VAR 0 2
77328: PUSH
77329: LD_INT 22
77331: PUSH
77332: LD_OWVAR 2
77336: PUSH
77337: EMPTY
77338: LIST
77339: LIST
77340: PPUSH
77341: CALL_OW 69
77345: ST_TO_ADDR
// if not tmp then
77346: LD_VAR 0 2
77350: NOT
77351: IFFALSE 77355
// exit ;
77353: GO 77384
// for i in tmp do
77355: LD_ADDR_VAR 0 1
77359: PUSH
77360: LD_VAR 0 2
77364: PUSH
77365: FOR_IN
77366: IFFALSE 77382
// SetLives ( i , 600 ) ;
77368: LD_VAR 0 1
77372: PPUSH
77373: LD_INT 600
77375: PPUSH
77376: CALL_OW 234
77380: GO 77365
77382: POP
77383: POP
// end ;
77384: PPOPN 2
77386: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
77387: LD_INT 0
77389: PPUSH
// case cmd of 301 :
77390: LD_VAR 0 1
77394: PUSH
77395: LD_INT 301
77397: DOUBLE
77398: EQUAL
77399: IFTRUE 77403
77401: GO 77435
77403: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
77404: LD_VAR 0 6
77408: PPUSH
77409: LD_VAR 0 7
77413: PPUSH
77414: LD_VAR 0 8
77418: PPUSH
77419: LD_VAR 0 4
77423: PPUSH
77424: LD_VAR 0 5
77428: PPUSH
77429: CALL 78648 0 5
77433: GO 77556
77435: LD_INT 302
77437: DOUBLE
77438: EQUAL
77439: IFTRUE 77443
77441: GO 77480
77443: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
77444: LD_VAR 0 6
77448: PPUSH
77449: LD_VAR 0 7
77453: PPUSH
77454: LD_VAR 0 8
77458: PPUSH
77459: LD_VAR 0 9
77463: PPUSH
77464: LD_VAR 0 4
77468: PPUSH
77469: LD_VAR 0 5
77473: PPUSH
77474: CALL 78739 0 6
77478: GO 77556
77480: LD_INT 303
77482: DOUBLE
77483: EQUAL
77484: IFTRUE 77488
77486: GO 77525
77488: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
77489: LD_VAR 0 6
77493: PPUSH
77494: LD_VAR 0 7
77498: PPUSH
77499: LD_VAR 0 8
77503: PPUSH
77504: LD_VAR 0 9
77508: PPUSH
77509: LD_VAR 0 4
77513: PPUSH
77514: LD_VAR 0 5
77518: PPUSH
77519: CALL 77561 0 6
77523: GO 77556
77525: LD_INT 304
77527: DOUBLE
77528: EQUAL
77529: IFTRUE 77533
77531: GO 77555
77533: POP
// hHackTeleport ( unit , x , y ) ; end ;
77534: LD_VAR 0 2
77538: PPUSH
77539: LD_VAR 0 4
77543: PPUSH
77544: LD_VAR 0 5
77548: PPUSH
77549: CALL 79332 0 3
77553: GO 77556
77555: POP
// end ;
77556: LD_VAR 0 12
77560: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
77561: LD_INT 0
77563: PPUSH
77564: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
77565: LD_VAR 0 1
77569: PUSH
77570: LD_INT 1
77572: LESS
77573: IFTRUE 77585
77575: PUSH
77576: LD_VAR 0 1
77580: PUSH
77581: LD_INT 3
77583: GREATER
77584: OR
77585: IFTRUE 77603
77587: PUSH
77588: LD_VAR 0 5
77592: PPUSH
77593: LD_VAR 0 6
77597: PPUSH
77598: CALL_OW 428
77602: OR
77603: IFFALSE 77607
// exit ;
77605: GO 78335
// uc_side := your_side ;
77607: LD_ADDR_OWVAR 20
77611: PUSH
77612: LD_OWVAR 2
77616: ST_TO_ADDR
// uc_nation := nation ;
77617: LD_ADDR_OWVAR 21
77621: PUSH
77622: LD_VAR 0 1
77626: ST_TO_ADDR
// bc_level = 1 ;
77627: LD_ADDR_OWVAR 43
77631: PUSH
77632: LD_INT 1
77634: ST_TO_ADDR
// case btype of 1 :
77635: LD_VAR 0 2
77639: PUSH
77640: LD_INT 1
77642: DOUBLE
77643: EQUAL
77644: IFTRUE 77648
77646: GO 77659
77648: POP
// bc_type := b_depot ; 2 :
77649: LD_ADDR_OWVAR 42
77653: PUSH
77654: LD_INT 0
77656: ST_TO_ADDR
77657: GO 78279
77659: LD_INT 2
77661: DOUBLE
77662: EQUAL
77663: IFTRUE 77667
77665: GO 77678
77667: POP
// bc_type := b_warehouse ; 3 :
77668: LD_ADDR_OWVAR 42
77672: PUSH
77673: LD_INT 1
77675: ST_TO_ADDR
77676: GO 78279
77678: LD_INT 3
77680: DOUBLE
77681: EQUAL
77682: IFTRUE 77686
77684: GO 77697
77686: POP
// bc_type := b_lab ; 4 .. 9 :
77687: LD_ADDR_OWVAR 42
77691: PUSH
77692: LD_INT 6
77694: ST_TO_ADDR
77695: GO 78279
77697: LD_INT 4
77699: DOUBLE
77700: GREATEREQUAL
77701: IFFALSE 77709
77703: LD_INT 9
77705: DOUBLE
77706: LESSEQUAL
77707: IFTRUE 77711
77709: GO 77771
77711: POP
// begin bc_type := b_lab_half ;
77712: LD_ADDR_OWVAR 42
77716: PUSH
77717: LD_INT 7
77719: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77720: LD_ADDR_OWVAR 44
77724: PUSH
77725: LD_INT 10
77727: PUSH
77728: LD_INT 11
77730: PUSH
77731: LD_INT 12
77733: PUSH
77734: LD_INT 15
77736: PUSH
77737: LD_INT 14
77739: PUSH
77740: LD_INT 13
77742: PUSH
77743: EMPTY
77744: LIST
77745: LIST
77746: LIST
77747: LIST
77748: LIST
77749: LIST
77750: PUSH
77751: LD_VAR 0 2
77755: PUSH
77756: LD_INT 3
77758: MINUS
77759: ARRAY
77760: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77761: LD_ADDR_OWVAR 45
77765: PUSH
77766: LD_INT 9
77768: ST_TO_ADDR
// end ; 10 .. 13 :
77769: GO 78279
77771: LD_INT 10
77773: DOUBLE
77774: GREATEREQUAL
77775: IFFALSE 77783
77777: LD_INT 13
77779: DOUBLE
77780: LESSEQUAL
77781: IFTRUE 77785
77783: GO 77862
77785: POP
// begin bc_type := b_lab_full ;
77786: LD_ADDR_OWVAR 42
77790: PUSH
77791: LD_INT 8
77793: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77794: LD_ADDR_OWVAR 44
77798: PUSH
77799: LD_INT 10
77801: PUSH
77802: LD_INT 12
77804: PUSH
77805: LD_INT 14
77807: PUSH
77808: LD_INT 13
77810: PUSH
77811: EMPTY
77812: LIST
77813: LIST
77814: LIST
77815: LIST
77816: PUSH
77817: LD_VAR 0 2
77821: PUSH
77822: LD_INT 9
77824: MINUS
77825: ARRAY
77826: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77827: LD_ADDR_OWVAR 45
77831: PUSH
77832: LD_INT 11
77834: PUSH
77835: LD_INT 15
77837: PUSH
77838: LD_INT 12
77840: PUSH
77841: LD_INT 15
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: PUSH
77850: LD_VAR 0 2
77854: PUSH
77855: LD_INT 9
77857: MINUS
77858: ARRAY
77859: ST_TO_ADDR
// end ; 14 :
77860: GO 78279
77862: LD_INT 14
77864: DOUBLE
77865: EQUAL
77866: IFTRUE 77870
77868: GO 77881
77870: POP
// bc_type := b_workshop ; 15 :
77871: LD_ADDR_OWVAR 42
77875: PUSH
77876: LD_INT 2
77878: ST_TO_ADDR
77879: GO 78279
77881: LD_INT 15
77883: DOUBLE
77884: EQUAL
77885: IFTRUE 77889
77887: GO 77900
77889: POP
// bc_type := b_factory ; 16 :
77890: LD_ADDR_OWVAR 42
77894: PUSH
77895: LD_INT 3
77897: ST_TO_ADDR
77898: GO 78279
77900: LD_INT 16
77902: DOUBLE
77903: EQUAL
77904: IFTRUE 77908
77906: GO 77919
77908: POP
// bc_type := b_ext_gun ; 17 :
77909: LD_ADDR_OWVAR 42
77913: PUSH
77914: LD_INT 17
77916: ST_TO_ADDR
77917: GO 78279
77919: LD_INT 17
77921: DOUBLE
77922: EQUAL
77923: IFTRUE 77927
77925: GO 77955
77927: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77928: LD_ADDR_OWVAR 42
77932: PUSH
77933: LD_INT 19
77935: PUSH
77936: LD_INT 23
77938: PUSH
77939: LD_INT 19
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: LIST
77946: PUSH
77947: LD_VAR 0 1
77951: ARRAY
77952: ST_TO_ADDR
77953: GO 78279
77955: LD_INT 18
77957: DOUBLE
77958: EQUAL
77959: IFTRUE 77963
77961: GO 77974
77963: POP
// bc_type := b_ext_radar ; 19 :
77964: LD_ADDR_OWVAR 42
77968: PUSH
77969: LD_INT 20
77971: ST_TO_ADDR
77972: GO 78279
77974: LD_INT 19
77976: DOUBLE
77977: EQUAL
77978: IFTRUE 77982
77980: GO 77993
77982: POP
// bc_type := b_ext_radio ; 20 :
77983: LD_ADDR_OWVAR 42
77987: PUSH
77988: LD_INT 22
77990: ST_TO_ADDR
77991: GO 78279
77993: LD_INT 20
77995: DOUBLE
77996: EQUAL
77997: IFTRUE 78001
77999: GO 78012
78001: POP
// bc_type := b_ext_siberium ; 21 :
78002: LD_ADDR_OWVAR 42
78006: PUSH
78007: LD_INT 21
78009: ST_TO_ADDR
78010: GO 78279
78012: LD_INT 21
78014: DOUBLE
78015: EQUAL
78016: IFTRUE 78020
78018: GO 78031
78020: POP
// bc_type := b_ext_computer ; 22 :
78021: LD_ADDR_OWVAR 42
78025: PUSH
78026: LD_INT 24
78028: ST_TO_ADDR
78029: GO 78279
78031: LD_INT 22
78033: DOUBLE
78034: EQUAL
78035: IFTRUE 78039
78037: GO 78050
78039: POP
// bc_type := b_ext_track ; 23 :
78040: LD_ADDR_OWVAR 42
78044: PUSH
78045: LD_INT 16
78047: ST_TO_ADDR
78048: GO 78279
78050: LD_INT 23
78052: DOUBLE
78053: EQUAL
78054: IFTRUE 78058
78056: GO 78069
78058: POP
// bc_type := b_ext_laser ; 24 :
78059: LD_ADDR_OWVAR 42
78063: PUSH
78064: LD_INT 25
78066: ST_TO_ADDR
78067: GO 78279
78069: LD_INT 24
78071: DOUBLE
78072: EQUAL
78073: IFTRUE 78077
78075: GO 78088
78077: POP
// bc_type := b_control_tower ; 25 :
78078: LD_ADDR_OWVAR 42
78082: PUSH
78083: LD_INT 36
78085: ST_TO_ADDR
78086: GO 78279
78088: LD_INT 25
78090: DOUBLE
78091: EQUAL
78092: IFTRUE 78096
78094: GO 78107
78096: POP
// bc_type := b_breastwork ; 26 :
78097: LD_ADDR_OWVAR 42
78101: PUSH
78102: LD_INT 31
78104: ST_TO_ADDR
78105: GO 78279
78107: LD_INT 26
78109: DOUBLE
78110: EQUAL
78111: IFTRUE 78115
78113: GO 78126
78115: POP
// bc_type := b_bunker ; 27 :
78116: LD_ADDR_OWVAR 42
78120: PUSH
78121: LD_INT 32
78123: ST_TO_ADDR
78124: GO 78279
78126: LD_INT 27
78128: DOUBLE
78129: EQUAL
78130: IFTRUE 78134
78132: GO 78145
78134: POP
// bc_type := b_turret ; 28 :
78135: LD_ADDR_OWVAR 42
78139: PUSH
78140: LD_INT 33
78142: ST_TO_ADDR
78143: GO 78279
78145: LD_INT 28
78147: DOUBLE
78148: EQUAL
78149: IFTRUE 78153
78151: GO 78164
78153: POP
// bc_type := b_armoury ; 29 :
78154: LD_ADDR_OWVAR 42
78158: PUSH
78159: LD_INT 4
78161: ST_TO_ADDR
78162: GO 78279
78164: LD_INT 29
78166: DOUBLE
78167: EQUAL
78168: IFTRUE 78172
78170: GO 78183
78172: POP
// bc_type := b_barracks ; 30 :
78173: LD_ADDR_OWVAR 42
78177: PUSH
78178: LD_INT 5
78180: ST_TO_ADDR
78181: GO 78279
78183: LD_INT 30
78185: DOUBLE
78186: EQUAL
78187: IFTRUE 78191
78189: GO 78202
78191: POP
// bc_type := b_solar_power ; 31 :
78192: LD_ADDR_OWVAR 42
78196: PUSH
78197: LD_INT 27
78199: ST_TO_ADDR
78200: GO 78279
78202: LD_INT 31
78204: DOUBLE
78205: EQUAL
78206: IFTRUE 78210
78208: GO 78221
78210: POP
// bc_type := b_oil_power ; 32 :
78211: LD_ADDR_OWVAR 42
78215: PUSH
78216: LD_INT 26
78218: ST_TO_ADDR
78219: GO 78279
78221: LD_INT 32
78223: DOUBLE
78224: EQUAL
78225: IFTRUE 78229
78227: GO 78240
78229: POP
// bc_type := b_siberite_power ; 33 :
78230: LD_ADDR_OWVAR 42
78234: PUSH
78235: LD_INT 28
78237: ST_TO_ADDR
78238: GO 78279
78240: LD_INT 33
78242: DOUBLE
78243: EQUAL
78244: IFTRUE 78248
78246: GO 78259
78248: POP
// bc_type := b_oil_mine ; 34 :
78249: LD_ADDR_OWVAR 42
78253: PUSH
78254: LD_INT 29
78256: ST_TO_ADDR
78257: GO 78279
78259: LD_INT 34
78261: DOUBLE
78262: EQUAL
78263: IFTRUE 78267
78265: GO 78278
78267: POP
// bc_type := b_siberite_mine ; end ;
78268: LD_ADDR_OWVAR 42
78272: PUSH
78273: LD_INT 30
78275: ST_TO_ADDR
78276: GO 78279
78278: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
78279: LD_ADDR_VAR 0 8
78283: PUSH
78284: LD_VAR 0 5
78288: PPUSH
78289: LD_VAR 0 6
78293: PPUSH
78294: LD_VAR 0 3
78298: PPUSH
78299: CALL_OW 47
78303: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
78304: LD_OWVAR 42
78308: PUSH
78309: LD_INT 32
78311: PUSH
78312: LD_INT 33
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: IN
78319: IFFALSE 78335
// PlaceWeaponTurret ( b , weapon ) ;
78321: LD_VAR 0 8
78325: PPUSH
78326: LD_VAR 0 4
78330: PPUSH
78331: CALL_OW 431
// end ;
78335: LD_VAR 0 7
78339: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
78340: LD_INT 0
78342: PPUSH
78343: PPUSH
78344: PPUSH
78345: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78346: LD_ADDR_VAR 0 4
78350: PUSH
78351: LD_INT 22
78353: PUSH
78354: LD_OWVAR 2
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: PUSH
78363: LD_INT 2
78365: PUSH
78366: LD_INT 30
78368: PUSH
78369: LD_INT 0
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 30
78378: PUSH
78379: LD_INT 1
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: EMPTY
78387: LIST
78388: LIST
78389: LIST
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: PPUSH
78395: CALL_OW 69
78399: ST_TO_ADDR
// if not tmp then
78400: LD_VAR 0 4
78404: NOT
78405: IFFALSE 78409
// exit ;
78407: GO 78468
// for i in tmp do
78409: LD_ADDR_VAR 0 2
78413: PUSH
78414: LD_VAR 0 4
78418: PUSH
78419: FOR_IN
78420: IFFALSE 78466
// for j = 1 to 3 do
78422: LD_ADDR_VAR 0 3
78426: PUSH
78427: DOUBLE
78428: LD_INT 1
78430: DEC
78431: ST_TO_ADDR
78432: LD_INT 3
78434: PUSH
78435: FOR_TO
78436: IFFALSE 78462
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
78438: LD_VAR 0 2
78442: PPUSH
78443: CALL_OW 274
78447: PPUSH
78448: LD_VAR 0 3
78452: PPUSH
78453: LD_INT 99999
78455: PPUSH
78456: CALL_OW 277
78460: GO 78435
78462: POP
78463: POP
78464: GO 78419
78466: POP
78467: POP
// end ;
78468: LD_VAR 0 1
78472: RET
// export function hHackSetLevel10 ; var i , j ; begin
78473: LD_INT 0
78475: PPUSH
78476: PPUSH
78477: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78478: LD_ADDR_VAR 0 2
78482: PUSH
78483: LD_INT 21
78485: PUSH
78486: LD_INT 1
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PPUSH
78493: CALL_OW 69
78497: PUSH
78498: FOR_IN
78499: IFFALSE 78551
// if IsSelected ( i ) then
78501: LD_VAR 0 2
78505: PPUSH
78506: CALL_OW 306
78510: IFFALSE 78549
// begin for j := 1 to 4 do
78512: LD_ADDR_VAR 0 3
78516: PUSH
78517: DOUBLE
78518: LD_INT 1
78520: DEC
78521: ST_TO_ADDR
78522: LD_INT 4
78524: PUSH
78525: FOR_TO
78526: IFFALSE 78547
// SetSkill ( i , j , 10 ) ;
78528: LD_VAR 0 2
78532: PPUSH
78533: LD_VAR 0 3
78537: PPUSH
78538: LD_INT 10
78540: PPUSH
78541: CALL_OW 237
78545: GO 78525
78547: POP
78548: POP
// end ;
78549: GO 78498
78551: POP
78552: POP
// end ;
78553: LD_VAR 0 1
78557: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
78558: LD_INT 0
78560: PPUSH
78561: PPUSH
78562: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78563: LD_ADDR_VAR 0 2
78567: PUSH
78568: LD_INT 22
78570: PUSH
78571: LD_OWVAR 2
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: LD_INT 21
78582: PUSH
78583: LD_INT 1
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PPUSH
78594: CALL_OW 69
78598: PUSH
78599: FOR_IN
78600: IFFALSE 78641
// begin for j := 1 to 4 do
78602: LD_ADDR_VAR 0 3
78606: PUSH
78607: DOUBLE
78608: LD_INT 1
78610: DEC
78611: ST_TO_ADDR
78612: LD_INT 4
78614: PUSH
78615: FOR_TO
78616: IFFALSE 78637
// SetSkill ( i , j , 10 ) ;
78618: LD_VAR 0 2
78622: PPUSH
78623: LD_VAR 0 3
78627: PPUSH
78628: LD_INT 10
78630: PPUSH
78631: CALL_OW 237
78635: GO 78615
78637: POP
78638: POP
// end ;
78639: GO 78599
78641: POP
78642: POP
// end ;
78643: LD_VAR 0 1
78647: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
78648: LD_INT 0
78650: PPUSH
// uc_side := your_side ;
78651: LD_ADDR_OWVAR 20
78655: PUSH
78656: LD_OWVAR 2
78660: ST_TO_ADDR
// uc_nation := nation ;
78661: LD_ADDR_OWVAR 21
78665: PUSH
78666: LD_VAR 0 1
78670: ST_TO_ADDR
// InitHc ;
78671: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78675: LD_INT 0
78677: PPUSH
78678: LD_VAR 0 2
78682: PPUSH
78683: LD_VAR 0 3
78687: PPUSH
78688: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78692: LD_VAR 0 4
78696: PPUSH
78697: LD_VAR 0 5
78701: PPUSH
78702: CALL_OW 428
78706: PUSH
78707: LD_INT 0
78709: EQUAL
78710: IFFALSE 78734
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78712: CALL_OW 44
78716: PPUSH
78717: LD_VAR 0 4
78721: PPUSH
78722: LD_VAR 0 5
78726: PPUSH
78727: LD_INT 1
78729: PPUSH
78730: CALL_OW 48
// end ;
78734: LD_VAR 0 6
78738: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78739: LD_INT 0
78741: PPUSH
78742: PPUSH
// uc_side := your_side ;
78743: LD_ADDR_OWVAR 20
78747: PUSH
78748: LD_OWVAR 2
78752: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78753: LD_VAR 0 1
78757: PUSH
78758: LD_INT 1
78760: PUSH
78761: LD_INT 2
78763: PUSH
78764: LD_INT 3
78766: PUSH
78767: LD_INT 4
78769: PUSH
78770: LD_INT 5
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: IN
78780: IFFALSE 78792
// uc_nation := nation_american else
78782: LD_ADDR_OWVAR 21
78786: PUSH
78787: LD_INT 1
78789: ST_TO_ADDR
78790: GO 78835
// if chassis in [ 11 , 12 , 13 , 14 ] then
78792: LD_VAR 0 1
78796: PUSH
78797: LD_INT 11
78799: PUSH
78800: LD_INT 12
78802: PUSH
78803: LD_INT 13
78805: PUSH
78806: LD_INT 14
78808: PUSH
78809: EMPTY
78810: LIST
78811: LIST
78812: LIST
78813: LIST
78814: IN
78815: IFFALSE 78827
// uc_nation := nation_arabian else
78817: LD_ADDR_OWVAR 21
78821: PUSH
78822: LD_INT 2
78824: ST_TO_ADDR
78825: GO 78835
// uc_nation := nation_russian ;
78827: LD_ADDR_OWVAR 21
78831: PUSH
78832: LD_INT 3
78834: ST_TO_ADDR
// vc_chassis := chassis ;
78835: LD_ADDR_OWVAR 37
78839: PUSH
78840: LD_VAR 0 1
78844: ST_TO_ADDR
// vc_engine := engine ;
78845: LD_ADDR_OWVAR 39
78849: PUSH
78850: LD_VAR 0 2
78854: ST_TO_ADDR
// vc_control := control ;
78855: LD_ADDR_OWVAR 38
78859: PUSH
78860: LD_VAR 0 3
78864: ST_TO_ADDR
// vc_weapon := weapon ;
78865: LD_ADDR_OWVAR 40
78869: PUSH
78870: LD_VAR 0 4
78874: ST_TO_ADDR
// un := CreateVehicle ;
78875: LD_ADDR_VAR 0 8
78879: PUSH
78880: CALL_OW 45
78884: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78885: LD_VAR 0 8
78889: PPUSH
78890: LD_INT 0
78892: PPUSH
78893: LD_INT 5
78895: PPUSH
78896: CALL_OW 12
78900: PPUSH
78901: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78905: LD_VAR 0 8
78909: PPUSH
78910: LD_VAR 0 5
78914: PPUSH
78915: LD_VAR 0 6
78919: PPUSH
78920: LD_INT 1
78922: PPUSH
78923: CALL_OW 48
// end ;
78927: LD_VAR 0 7
78931: RET
// export hInvincible ; every 1 do
78932: GO 78934
78934: DISABLE
// hInvincible := [ ] ;
78935: LD_ADDR_EXP 104
78939: PUSH
78940: EMPTY
78941: ST_TO_ADDR
78942: END
// every 10 do var i ;
78943: GO 78945
78945: DISABLE
78946: LD_INT 0
78948: PPUSH
// begin enable ;
78949: ENABLE
// if not hInvincible then
78950: LD_EXP 104
78954: NOT
78955: IFFALSE 78959
// exit ;
78957: GO 79003
// for i in hInvincible do
78959: LD_ADDR_VAR 0 1
78963: PUSH
78964: LD_EXP 104
78968: PUSH
78969: FOR_IN
78970: IFFALSE 79001
// if GetLives ( i ) < 1000 then
78972: LD_VAR 0 1
78976: PPUSH
78977: CALL_OW 256
78981: PUSH
78982: LD_INT 1000
78984: LESS
78985: IFFALSE 78999
// SetLives ( i , 1000 ) ;
78987: LD_VAR 0 1
78991: PPUSH
78992: LD_INT 1000
78994: PPUSH
78995: CALL_OW 234
78999: GO 78969
79001: POP
79002: POP
// end ;
79003: PPOPN 1
79005: END
// export function hHackInvincible ; var i ; begin
79006: LD_INT 0
79008: PPUSH
79009: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
79010: LD_ADDR_VAR 0 2
79014: PUSH
79015: LD_INT 2
79017: PUSH
79018: LD_INT 21
79020: PUSH
79021: LD_INT 1
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: PUSH
79028: LD_INT 21
79030: PUSH
79031: LD_INT 2
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: LIST
79042: PPUSH
79043: CALL_OW 69
79047: PUSH
79048: FOR_IN
79049: IFFALSE 79110
// if IsSelected ( i ) then
79051: LD_VAR 0 2
79055: PPUSH
79056: CALL_OW 306
79060: IFFALSE 79108
// begin if i in hInvincible then
79062: LD_VAR 0 2
79066: PUSH
79067: LD_EXP 104
79071: IN
79072: IFFALSE 79092
// hInvincible := hInvincible diff i else
79074: LD_ADDR_EXP 104
79078: PUSH
79079: LD_EXP 104
79083: PUSH
79084: LD_VAR 0 2
79088: DIFF
79089: ST_TO_ADDR
79090: GO 79108
// hInvincible := hInvincible union i ;
79092: LD_ADDR_EXP 104
79096: PUSH
79097: LD_EXP 104
79101: PUSH
79102: LD_VAR 0 2
79106: UNION
79107: ST_TO_ADDR
// end ;
79108: GO 79048
79110: POP
79111: POP
// end ;
79112: LD_VAR 0 1
79116: RET
// export function hHackInvisible ; var i , j ; begin
79117: LD_INT 0
79119: PPUSH
79120: PPUSH
79121: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79122: LD_ADDR_VAR 0 2
79126: PUSH
79127: LD_INT 21
79129: PUSH
79130: LD_INT 1
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PPUSH
79137: CALL_OW 69
79141: PUSH
79142: FOR_IN
79143: IFFALSE 79167
// if IsSelected ( i ) then
79145: LD_VAR 0 2
79149: PPUSH
79150: CALL_OW 306
79154: IFFALSE 79165
// ComForceInvisible ( i ) ;
79156: LD_VAR 0 2
79160: PPUSH
79161: CALL_OW 496
79165: GO 79142
79167: POP
79168: POP
// end ;
79169: LD_VAR 0 1
79173: RET
// export function hHackChangeYourSide ; begin
79174: LD_INT 0
79176: PPUSH
// if your_side = 8 then
79177: LD_OWVAR 2
79181: PUSH
79182: LD_INT 8
79184: EQUAL
79185: IFFALSE 79197
// your_side := 0 else
79187: LD_ADDR_OWVAR 2
79191: PUSH
79192: LD_INT 0
79194: ST_TO_ADDR
79195: GO 79211
// your_side := your_side + 1 ;
79197: LD_ADDR_OWVAR 2
79201: PUSH
79202: LD_OWVAR 2
79206: PUSH
79207: LD_INT 1
79209: PLUS
79210: ST_TO_ADDR
// end ;
79211: LD_VAR 0 1
79215: RET
// export function hHackChangeUnitSide ; var i , j ; begin
79216: LD_INT 0
79218: PPUSH
79219: PPUSH
79220: PPUSH
// for i in all_units do
79221: LD_ADDR_VAR 0 2
79225: PUSH
79226: LD_OWVAR 3
79230: PUSH
79231: FOR_IN
79232: IFFALSE 79310
// if IsSelected ( i ) then
79234: LD_VAR 0 2
79238: PPUSH
79239: CALL_OW 306
79243: IFFALSE 79308
// begin j := GetSide ( i ) ;
79245: LD_ADDR_VAR 0 3
79249: PUSH
79250: LD_VAR 0 2
79254: PPUSH
79255: CALL_OW 255
79259: ST_TO_ADDR
// if j = 8 then
79260: LD_VAR 0 3
79264: PUSH
79265: LD_INT 8
79267: EQUAL
79268: IFFALSE 79280
// j := 0 else
79270: LD_ADDR_VAR 0 3
79274: PUSH
79275: LD_INT 0
79277: ST_TO_ADDR
79278: GO 79294
// j := j + 1 ;
79280: LD_ADDR_VAR 0 3
79284: PUSH
79285: LD_VAR 0 3
79289: PUSH
79290: LD_INT 1
79292: PLUS
79293: ST_TO_ADDR
// SetSide ( i , j ) ;
79294: LD_VAR 0 2
79298: PPUSH
79299: LD_VAR 0 3
79303: PPUSH
79304: CALL_OW 235
// end ;
79308: GO 79231
79310: POP
79311: POP
// end ;
79312: LD_VAR 0 1
79316: RET
// export function hHackFog ; begin
79317: LD_INT 0
79319: PPUSH
// FogOff ( true ) ;
79320: LD_INT 1
79322: PPUSH
79323: CALL_OW 344
// end ;
79327: LD_VAR 0 1
79331: RET
// export function hHackTeleport ( unit , x , y ) ; begin
79332: LD_INT 0
79334: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
79335: LD_VAR 0 1
79339: PPUSH
79340: LD_VAR 0 2
79344: PPUSH
79345: LD_VAR 0 3
79349: PPUSH
79350: LD_INT 1
79352: PPUSH
79353: LD_INT 1
79355: PPUSH
79356: CALL_OW 483
// CenterOnXY ( x , y ) ;
79360: LD_VAR 0 2
79364: PPUSH
79365: LD_VAR 0 3
79369: PPUSH
79370: CALL_OW 84
// end ;
79374: LD_VAR 0 4
79378: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
79379: LD_INT 0
79381: PPUSH
79382: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
79383: LD_VAR 0 1
79387: NOT
79388: IFTRUE 79407
79390: PUSH
79391: LD_VAR 0 2
79395: PPUSH
79396: LD_VAR 0 3
79400: PPUSH
79401: CALL_OW 488
79405: NOT
79406: OR
79407: IFTRUE 79442
79409: PUSH
79410: LD_VAR 0 1
79414: PPUSH
79415: CALL_OW 266
79419: PUSH
79420: LD_INT 3
79422: NONEQUAL
79423: IFFALSE 79441
79425: PUSH
79426: LD_VAR 0 1
79430: PPUSH
79431: CALL_OW 247
79435: PUSH
79436: LD_INT 1
79438: EQUAL
79439: NOT
79440: AND
79441: OR
79442: IFFALSE 79446
// exit ;
79444: GO 79728
// if GetType ( factory ) = unit_human then
79446: LD_VAR 0 1
79450: PPUSH
79451: CALL_OW 247
79455: PUSH
79456: LD_INT 1
79458: EQUAL
79459: IFFALSE 79476
// factory := IsInUnit ( factory ) ;
79461: LD_ADDR_VAR 0 1
79465: PUSH
79466: LD_VAR 0 1
79470: PPUSH
79471: CALL_OW 310
79475: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
79476: LD_VAR 0 1
79480: PPUSH
79481: CALL_OW 266
79485: PUSH
79486: LD_INT 3
79488: NONEQUAL
79489: IFFALSE 79493
// exit ;
79491: GO 79728
// for i := 1 to Count ( factoryWaypoints ) do
79493: LD_ADDR_VAR 0 5
79497: PUSH
79498: DOUBLE
79499: LD_INT 1
79501: DEC
79502: ST_TO_ADDR
79503: LD_EXP 105
79507: PPUSH
79508: CALL 23376 0 1
79512: PUSH
79513: FOR_TO
79514: IFFALSE 79676
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
79516: LD_VAR 0 2
79520: PPUSH
79521: LD_VAR 0 3
79525: PPUSH
79526: CALL_OW 428
79530: PUSH
79531: LD_EXP 105
79535: PUSH
79536: LD_VAR 0 5
79540: ARRAY
79541: PUSH
79542: LD_INT 2
79544: ARRAY
79545: EQUAL
79546: IFFALSE 79578
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
79548: LD_ADDR_EXP 105
79552: PUSH
79553: LD_EXP 105
79557: PPUSH
79558: LD_VAR 0 5
79562: PPUSH
79563: CALL_OW 3
79567: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79568: CALL 79733 0 0
// exit ;
79572: POP
79573: POP
79574: GO 79728
// end else
79576: GO 79674
// if factory = factoryWaypoints [ i ] [ 2 ] then
79578: LD_VAR 0 1
79582: PUSH
79583: LD_EXP 105
79587: PUSH
79588: LD_VAR 0 5
79592: ARRAY
79593: PUSH
79594: LD_INT 2
79596: ARRAY
79597: EQUAL
79598: IFFALSE 79674
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
79600: LD_ADDR_EXP 105
79604: PUSH
79605: LD_EXP 105
79609: PPUSH
79610: LD_VAR 0 5
79614: PPUSH
79615: CALL_OW 3
79619: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
79620: LD_ADDR_EXP 105
79624: PUSH
79625: LD_EXP 105
79629: PPUSH
79630: LD_VAR 0 1
79634: PPUSH
79635: CALL_OW 255
79639: PUSH
79640: LD_VAR 0 1
79644: PUSH
79645: LD_VAR 0 2
79649: PUSH
79650: LD_VAR 0 3
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: LIST
79659: LIST
79660: PPUSH
79661: CALL 59308 0 2
79665: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79666: CALL 79733 0 0
// exit ;
79670: POP
79671: POP
79672: GO 79728
// end ; end ;
79674: GO 79513
79676: POP
79677: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
79678: LD_ADDR_EXP 105
79682: PUSH
79683: LD_EXP 105
79687: PPUSH
79688: LD_VAR 0 1
79692: PPUSH
79693: CALL_OW 255
79697: PUSH
79698: LD_VAR 0 1
79702: PUSH
79703: LD_VAR 0 2
79707: PUSH
79708: LD_VAR 0 3
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: PPUSH
79719: CALL 59308 0 2
79723: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79724: CALL 79733 0 0
// end ;
79728: LD_VAR 0 4
79732: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
79733: LD_INT 0
79735: PPUSH
79736: PPUSH
79737: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
79738: LD_STRING resetFactoryWaypoint();
79740: PPUSH
79741: CALL_OW 559
// if factoryWaypoints then
79745: LD_EXP 105
79749: IFFALSE 79870
// begin list := factoryWaypoints ;
79751: LD_ADDR_VAR 0 3
79755: PUSH
79756: LD_EXP 105
79760: ST_TO_ADDR
// for i := 1 to list do
79761: LD_ADDR_VAR 0 2
79765: PUSH
79766: DOUBLE
79767: LD_INT 1
79769: DEC
79770: ST_TO_ADDR
79771: LD_VAR 0 3
79775: PUSH
79776: FOR_TO
79777: IFFALSE 79868
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79779: LD_STRING setFactoryWaypointXY(
79781: PUSH
79782: LD_VAR 0 3
79786: PUSH
79787: LD_VAR 0 2
79791: ARRAY
79792: PUSH
79793: LD_INT 1
79795: ARRAY
79796: STR
79797: PUSH
79798: LD_STRING ,
79800: STR
79801: PUSH
79802: LD_VAR 0 3
79806: PUSH
79807: LD_VAR 0 2
79811: ARRAY
79812: PUSH
79813: LD_INT 2
79815: ARRAY
79816: STR
79817: PUSH
79818: LD_STRING ,
79820: STR
79821: PUSH
79822: LD_VAR 0 3
79826: PUSH
79827: LD_VAR 0 2
79831: ARRAY
79832: PUSH
79833: LD_INT 3
79835: ARRAY
79836: STR
79837: PUSH
79838: LD_STRING ,
79840: STR
79841: PUSH
79842: LD_VAR 0 3
79846: PUSH
79847: LD_VAR 0 2
79851: ARRAY
79852: PUSH
79853: LD_INT 4
79855: ARRAY
79856: STR
79857: PUSH
79858: LD_STRING )
79860: STR
79861: PPUSH
79862: CALL_OW 559
79866: GO 79776
79868: POP
79869: POP
// end ; end ;
79870: LD_VAR 0 1
79874: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
79875: LD_INT 0
79877: PPUSH
// if HexInfo ( x , y ) = warehouse then
79878: LD_VAR 0 2
79882: PPUSH
79883: LD_VAR 0 3
79887: PPUSH
79888: CALL_OW 428
79892: PUSH
79893: LD_VAR 0 1
79897: EQUAL
79898: IFFALSE 79925
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
79900: LD_ADDR_EXP 107
79904: PUSH
79905: LD_EXP 107
79909: PPUSH
79910: LD_VAR 0 1
79914: PPUSH
79915: LD_INT 0
79917: PPUSH
79918: CALL_OW 1
79922: ST_TO_ADDR
79923: GO 79976
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
79925: LD_ADDR_EXP 107
79929: PUSH
79930: LD_EXP 107
79934: PPUSH
79935: LD_VAR 0 1
79939: PPUSH
79940: LD_VAR 0 1
79944: PPUSH
79945: CALL_OW 255
79949: PUSH
79950: LD_VAR 0 1
79954: PUSH
79955: LD_VAR 0 2
79959: PUSH
79960: LD_VAR 0 3
79964: PUSH
79965: EMPTY
79966: LIST
79967: LIST
79968: LIST
79969: LIST
79970: PPUSH
79971: CALL_OW 1
79975: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
79976: CALL 79985 0 0
// end ;
79980: LD_VAR 0 4
79984: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
79985: LD_INT 0
79987: PPUSH
79988: PPUSH
79989: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
79990: LD_STRING resetWarehouseGatheringPoints();
79992: PPUSH
79993: CALL_OW 559
// if warehouseGatheringPoints then
79997: LD_EXP 107
80001: IFFALSE 80127
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
80003: LD_ADDR_VAR 0 3
80007: PUSH
80008: LD_EXP 107
80012: PPUSH
80013: CALL 63242 0 1
80017: ST_TO_ADDR
// for i := 1 to list do
80018: LD_ADDR_VAR 0 2
80022: PUSH
80023: DOUBLE
80024: LD_INT 1
80026: DEC
80027: ST_TO_ADDR
80028: LD_VAR 0 3
80032: PUSH
80033: FOR_TO
80034: IFFALSE 80125
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
80036: LD_STRING setWarehouseGatheringPointXY(
80038: PUSH
80039: LD_VAR 0 3
80043: PUSH
80044: LD_VAR 0 2
80048: ARRAY
80049: PUSH
80050: LD_INT 1
80052: ARRAY
80053: STR
80054: PUSH
80055: LD_STRING ,
80057: STR
80058: PUSH
80059: LD_VAR 0 3
80063: PUSH
80064: LD_VAR 0 2
80068: ARRAY
80069: PUSH
80070: LD_INT 2
80072: ARRAY
80073: STR
80074: PUSH
80075: LD_STRING ,
80077: STR
80078: PUSH
80079: LD_VAR 0 3
80083: PUSH
80084: LD_VAR 0 2
80088: ARRAY
80089: PUSH
80090: LD_INT 3
80092: ARRAY
80093: STR
80094: PUSH
80095: LD_STRING ,
80097: STR
80098: PUSH
80099: LD_VAR 0 3
80103: PUSH
80104: LD_VAR 0 2
80108: ARRAY
80109: PUSH
80110: LD_INT 4
80112: ARRAY
80113: STR
80114: PUSH
80115: LD_STRING )
80117: STR
80118: PPUSH
80119: CALL_OW 559
80123: GO 80033
80125: POP
80126: POP
// end ; end ;
80127: LD_VAR 0 1
80131: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
80132: LD_EXP 107
80136: IFFALSE 80831
80138: GO 80140
80140: DISABLE
80141: LD_INT 0
80143: PPUSH
80144: PPUSH
80145: PPUSH
80146: PPUSH
80147: PPUSH
80148: PPUSH
80149: PPUSH
80150: PPUSH
80151: PPUSH
// begin enable ;
80152: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
80153: LD_ADDR_VAR 0 3
80157: PUSH
80158: LD_EXP 107
80162: PPUSH
80163: CALL 63242 0 1
80167: ST_TO_ADDR
// if not list then
80168: LD_VAR 0 3
80172: NOT
80173: IFFALSE 80177
// exit ;
80175: GO 80831
// for i := 1 to list do
80177: LD_ADDR_VAR 0 1
80181: PUSH
80182: DOUBLE
80183: LD_INT 1
80185: DEC
80186: ST_TO_ADDR
80187: LD_VAR 0 3
80191: PUSH
80192: FOR_TO
80193: IFFALSE 80829
// begin depot := list [ i ] [ 2 ] ;
80195: LD_ADDR_VAR 0 8
80199: PUSH
80200: LD_VAR 0 3
80204: PUSH
80205: LD_VAR 0 1
80209: ARRAY
80210: PUSH
80211: LD_INT 2
80213: ARRAY
80214: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
80215: LD_ADDR_VAR 0 5
80219: PUSH
80220: LD_VAR 0 3
80224: PUSH
80225: LD_VAR 0 1
80229: ARRAY
80230: PUSH
80231: LD_INT 1
80233: ARRAY
80234: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
80235: LD_VAR 0 8
80239: PPUSH
80240: CALL_OW 301
80244: IFTRUE 80263
80246: PUSH
80247: LD_VAR 0 5
80251: PUSH
80252: LD_VAR 0 8
80256: PPUSH
80257: CALL_OW 255
80261: NONEQUAL
80262: OR
80263: IFFALSE 80292
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
80265: LD_ADDR_EXP 107
80269: PUSH
80270: LD_EXP 107
80274: PPUSH
80275: LD_VAR 0 8
80279: PPUSH
80280: LD_INT 0
80282: PPUSH
80283: CALL_OW 1
80287: ST_TO_ADDR
// exit ;
80288: POP
80289: POP
80290: GO 80831
// end ; x := list [ i ] [ 3 ] ;
80292: LD_ADDR_VAR 0 6
80296: PUSH
80297: LD_VAR 0 3
80301: PUSH
80302: LD_VAR 0 1
80306: ARRAY
80307: PUSH
80308: LD_INT 3
80310: ARRAY
80311: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
80312: LD_ADDR_VAR 0 7
80316: PUSH
80317: LD_VAR 0 3
80321: PUSH
80322: LD_VAR 0 1
80326: ARRAY
80327: PUSH
80328: LD_INT 4
80330: ARRAY
80331: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
80332: LD_ADDR_VAR 0 9
80336: PUSH
80337: LD_VAR 0 6
80341: PPUSH
80342: LD_VAR 0 7
80346: PPUSH
80347: LD_INT 16
80349: PPUSH
80350: CALL 61816 0 3
80354: ST_TO_ADDR
// if not cratesNearbyPoint then
80355: LD_VAR 0 9
80359: NOT
80360: IFFALSE 80366
// exit ;
80362: POP
80363: POP
80364: GO 80831
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
80366: LD_ADDR_VAR 0 4
80370: PUSH
80371: LD_INT 22
80373: PUSH
80374: LD_VAR 0 5
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: LD_INT 3
80385: PUSH
80386: LD_INT 60
80388: PUSH
80389: EMPTY
80390: LIST
80391: PUSH
80392: EMPTY
80393: LIST
80394: LIST
80395: PUSH
80396: LD_INT 91
80398: PUSH
80399: LD_VAR 0 8
80403: PUSH
80404: LD_INT 6
80406: PUSH
80407: EMPTY
80408: LIST
80409: LIST
80410: LIST
80411: PUSH
80412: LD_INT 2
80414: PUSH
80415: LD_INT 25
80417: PUSH
80418: LD_INT 2
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PUSH
80425: LD_INT 25
80427: PUSH
80428: LD_INT 16
80430: PUSH
80431: EMPTY
80432: LIST
80433: LIST
80434: PUSH
80435: EMPTY
80436: LIST
80437: LIST
80438: LIST
80439: PUSH
80440: EMPTY
80441: LIST
80442: LIST
80443: LIST
80444: LIST
80445: PPUSH
80446: CALL_OW 69
80450: PUSH
80451: LD_VAR 0 8
80455: PPUSH
80456: CALL_OW 313
80460: PPUSH
80461: LD_INT 3
80463: PUSH
80464: LD_INT 60
80466: PUSH
80467: EMPTY
80468: LIST
80469: PUSH
80470: EMPTY
80471: LIST
80472: LIST
80473: PUSH
80474: LD_INT 2
80476: PUSH
80477: LD_INT 25
80479: PUSH
80480: LD_INT 2
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: PUSH
80487: LD_INT 25
80489: PUSH
80490: LD_INT 16
80492: PUSH
80493: EMPTY
80494: LIST
80495: LIST
80496: PUSH
80497: EMPTY
80498: LIST
80499: LIST
80500: LIST
80501: PUSH
80502: EMPTY
80503: LIST
80504: LIST
80505: PPUSH
80506: CALL_OW 72
80510: UNION
80511: ST_TO_ADDR
// if tmp then
80512: LD_VAR 0 4
80516: IFFALSE 80596
// begin tmp := ShrinkArray ( tmp , 3 ) ;
80518: LD_ADDR_VAR 0 4
80522: PUSH
80523: LD_VAR 0 4
80527: PPUSH
80528: LD_INT 3
80530: PPUSH
80531: CALL 59623 0 2
80535: ST_TO_ADDR
// for j in tmp do
80536: LD_ADDR_VAR 0 2
80540: PUSH
80541: LD_VAR 0 4
80545: PUSH
80546: FOR_IN
80547: IFFALSE 80590
// begin if IsInUnit ( j ) then
80549: LD_VAR 0 2
80553: PPUSH
80554: CALL_OW 310
80558: IFFALSE 80569
// ComExit ( j ) ;
80560: LD_VAR 0 2
80564: PPUSH
80565: CALL 59706 0 1
// AddComCollect ( j , x , y ) ;
80569: LD_VAR 0 2
80573: PPUSH
80574: LD_VAR 0 6
80578: PPUSH
80579: LD_VAR 0 7
80583: PPUSH
80584: CALL_OW 177
// end ;
80588: GO 80546
80590: POP
80591: POP
// exit ;
80592: POP
80593: POP
80594: GO 80831
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
80596: LD_ADDR_VAR 0 4
80600: PUSH
80601: LD_INT 22
80603: PUSH
80604: LD_VAR 0 5
80608: PUSH
80609: EMPTY
80610: LIST
80611: LIST
80612: PUSH
80613: LD_INT 91
80615: PUSH
80616: LD_VAR 0 8
80620: PUSH
80621: LD_INT 8
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: LIST
80628: PUSH
80629: LD_INT 2
80631: PUSH
80632: LD_INT 34
80634: PUSH
80635: LD_INT 12
80637: PUSH
80638: EMPTY
80639: LIST
80640: LIST
80641: PUSH
80642: LD_INT 34
80644: PUSH
80645: LD_INT 51
80647: PUSH
80648: EMPTY
80649: LIST
80650: LIST
80651: PUSH
80652: LD_INT 34
80654: PUSH
80655: LD_INT 32
80657: PUSH
80658: EMPTY
80659: LIST
80660: LIST
80661: PUSH
80662: LD_INT 34
80664: PUSH
80665: LD_INT 89
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: LIST
80676: LIST
80677: LIST
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: LIST
80683: PPUSH
80684: CALL_OW 69
80688: ST_TO_ADDR
// if tmp then
80689: LD_VAR 0 4
80693: IFFALSE 80827
// begin for j in tmp do
80695: LD_ADDR_VAR 0 2
80699: PUSH
80700: LD_VAR 0 4
80704: PUSH
80705: FOR_IN
80706: IFFALSE 80825
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
80708: LD_VAR 0 2
80712: PPUSH
80713: CALL_OW 262
80717: PUSH
80718: LD_INT 3
80720: EQUAL
80721: IFTRUE 80738
80723: PUSH
80724: LD_VAR 0 2
80728: PPUSH
80729: CALL_OW 261
80733: PUSH
80734: LD_INT 20
80736: GREATER
80737: OR
80738: IFFALSE 80752
80740: PUSH
80741: LD_VAR 0 2
80745: PPUSH
80746: CALL_OW 314
80750: NOT
80751: AND
80752: IFFALSE 80782
80754: PUSH
80755: LD_VAR 0 2
80759: PPUSH
80760: CALL_OW 263
80764: PUSH
80765: LD_INT 1
80767: NONEQUAL
80768: IFTRUE 80781
80770: PUSH
80771: LD_VAR 0 2
80775: PPUSH
80776: CALL_OW 311
80780: OR
80781: AND
80782: IFFALSE 80823
// begin ComCollect ( j , x , y ) ;
80784: LD_VAR 0 2
80788: PPUSH
80789: LD_VAR 0 6
80793: PPUSH
80794: LD_VAR 0 7
80798: PPUSH
80799: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
80803: LD_VAR 0 2
80807: PPUSH
80808: LD_VAR 0 8
80812: PPUSH
80813: CALL_OW 172
// exit ;
80817: POP
80818: POP
80819: POP
80820: POP
80821: GO 80831
// end ;
80823: GO 80705
80825: POP
80826: POP
// end ; end ;
80827: GO 80192
80829: POP
80830: POP
// end ; end_of_file
80831: PPOPN 9
80833: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80834: LD_VAR 0 1
80838: PUSH
80839: LD_INT 200
80841: DOUBLE
80842: GREATEREQUAL
80843: IFFALSE 80851
80845: LD_INT 299
80847: DOUBLE
80848: LESSEQUAL
80849: IFTRUE 80853
80851: GO 80885
80853: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80854: LD_VAR 0 1
80858: PPUSH
80859: LD_VAR 0 2
80863: PPUSH
80864: LD_VAR 0 3
80868: PPUSH
80869: LD_VAR 0 4
80873: PPUSH
80874: LD_VAR 0 5
80878: PPUSH
80879: CALL 81666 0 5
80883: GO 80962
80885: LD_INT 300
80887: DOUBLE
80888: GREATEREQUAL
80889: IFFALSE 80897
80891: LD_INT 399
80893: DOUBLE
80894: LESSEQUAL
80895: IFTRUE 80899
80897: GO 80961
80899: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80900: LD_VAR 0 1
80904: PPUSH
80905: LD_VAR 0 2
80909: PPUSH
80910: LD_VAR 0 3
80914: PPUSH
80915: LD_VAR 0 4
80919: PPUSH
80920: LD_VAR 0 5
80924: PPUSH
80925: LD_VAR 0 6
80929: PPUSH
80930: LD_VAR 0 7
80934: PPUSH
80935: LD_VAR 0 8
80939: PPUSH
80940: LD_VAR 0 9
80944: PPUSH
80945: LD_VAR 0 10
80949: PPUSH
80950: LD_VAR 0 11
80954: PPUSH
80955: CALL 77387 0 11
80959: GO 80962
80961: POP
// end ;
80962: PPOPN 11
80964: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80965: LD_VAR 0 1
80969: PPUSH
80970: LD_VAR 0 2
80974: PPUSH
80975: LD_VAR 0 3
80979: PPUSH
80980: LD_VAR 0 4
80984: PPUSH
80985: LD_VAR 0 5
80989: PPUSH
80990: CALL 81047 0 5
// end ; end_of_file
80994: PPOPN 5
80996: END
// export function SOS_UnitDestroyed ( un ) ; begin
80997: LD_INT 0
80999: PPUSH
// ComRadiation ( un ) ;
81000: LD_VAR 0 1
81004: PPUSH
81005: CALL 82086 0 1
// end ;
81009: LD_VAR 0 2
81013: RET
// export function SOS_UnitKamikazed ( un ) ; begin
81014: LD_INT 0
81016: PPUSH
// ComRadiation ( un ) ;
81017: LD_VAR 0 1
81021: PPUSH
81022: CALL 82086 0 1
// end ;
81026: LD_VAR 0 2
81030: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
81031: LD_INT 0
81033: PPUSH
// end ;
81034: LD_VAR 0 4
81038: RET
// export function SOS_Command ( cmd ) ; begin
81039: LD_INT 0
81041: PPUSH
// end ;
81042: LD_VAR 0 2
81046: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
81047: LD_INT 0
81049: PPUSH
// end ;
81050: LD_VAR 0 6
81054: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
81055: LD_INT 0
81057: PPUSH
81058: PPUSH
81059: PPUSH
81060: PPUSH
// if not vehicle or not factory then
81061: LD_VAR 0 1
81065: NOT
81066: IFTRUE 81075
81068: PUSH
81069: LD_VAR 0 2
81073: NOT
81074: OR
81075: IFFALSE 81079
// exit ;
81077: GO 81661
// if not factoryWaypoints then
81079: LD_EXP 105
81083: NOT
81084: IFFALSE 81088
// exit ;
81086: GO 81661
// for i := 1 to Count ( factoryWaypoints ) do
81088: LD_ADDR_VAR 0 4
81092: PUSH
81093: DOUBLE
81094: LD_INT 1
81096: DEC
81097: ST_TO_ADDR
81098: LD_EXP 105
81102: PPUSH
81103: CALL 23376 0 1
81107: PUSH
81108: FOR_TO
81109: IFFALSE 81659
// if factoryWaypoints [ i ] [ 2 ] = factory then
81111: LD_EXP 105
81115: PUSH
81116: LD_VAR 0 4
81120: ARRAY
81121: PUSH
81122: LD_INT 2
81124: ARRAY
81125: PUSH
81126: LD_VAR 0 2
81130: EQUAL
81131: IFFALSE 81657
// begin if GetControl ( vehicle ) = control_manual then
81133: LD_VAR 0 1
81137: PPUSH
81138: CALL_OW 263
81142: PUSH
81143: LD_INT 1
81145: EQUAL
81146: IFFALSE 81510
// begin driver := IsDrivenBy ( vehicle ) ;
81148: LD_ADDR_VAR 0 5
81152: PUSH
81153: LD_VAR 0 1
81157: PPUSH
81158: CALL_OW 311
81162: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
81163: LD_VAR 0 5
81167: PUSH
81168: LD_EXP 106
81172: IN
81173: IFTRUE 81187
81175: PUSH
81176: LD_VAR 0 1
81180: PUSH
81181: LD_EXP 106
81185: IN
81186: OR
81187: IFFALSE 81193
// exit ;
81189: POP
81190: POP
81191: GO 81661
// if not HasTask ( driver ) then
81193: LD_VAR 0 5
81197: PPUSH
81198: CALL_OW 314
81202: NOT
81203: IFFALSE 81508
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
81205: LD_ADDR_EXP 106
81209: PUSH
81210: LD_EXP 106
81214: PPUSH
81215: LD_VAR 0 5
81219: PPUSH
81220: CALL 59308 0 2
81224: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
81225: LD_ADDR_EXP 106
81229: PUSH
81230: LD_EXP 106
81234: PPUSH
81235: LD_VAR 0 1
81239: PPUSH
81240: CALL 59308 0 2
81244: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
81245: LD_ADDR_VAR 0 6
81249: PUSH
81250: LD_EXP 105
81254: PUSH
81255: LD_VAR 0 4
81259: ARRAY
81260: PUSH
81261: LD_INT 3
81263: ARRAY
81264: PPUSH
81265: LD_EXP 105
81269: PUSH
81270: LD_VAR 0 4
81274: ARRAY
81275: PUSH
81276: LD_INT 4
81278: ARRAY
81279: PPUSH
81280: CALL_OW 428
81284: ST_TO_ADDR
// if hex then
81285: LD_VAR 0 6
81289: IFFALSE 81307
// ComMoveUnit ( driver , hex ) else
81291: LD_VAR 0 5
81295: PPUSH
81296: LD_VAR 0 6
81300: PPUSH
81301: CALL_OW 112
81305: GO 81391
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
81307: LD_VAR 0 1
81311: PPUSH
81312: LD_EXP 105
81316: PUSH
81317: LD_VAR 0 4
81321: ARRAY
81322: PUSH
81323: LD_INT 3
81325: ARRAY
81326: PPUSH
81327: LD_EXP 105
81331: PUSH
81332: LD_VAR 0 4
81336: ARRAY
81337: PUSH
81338: LD_INT 4
81340: ARRAY
81341: PPUSH
81342: CALL_OW 297
81346: PUSH
81347: LD_INT 0
81349: GREATER
81350: IFFALSE 81391
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
81352: LD_VAR 0 5
81356: PPUSH
81357: LD_EXP 105
81361: PUSH
81362: LD_VAR 0 4
81366: ARRAY
81367: PUSH
81368: LD_INT 3
81370: ARRAY
81371: PPUSH
81372: LD_EXP 105
81376: PUSH
81377: LD_VAR 0 4
81381: ARRAY
81382: PUSH
81383: LD_INT 4
81385: ARRAY
81386: PPUSH
81387: CALL_OW 111
// AddComExitVehicle ( driver ) ;
81391: LD_VAR 0 5
81395: PPUSH
81396: CALL_OW 181
// if Multiplayer then
81400: LD_OWVAR 4
81404: IFFALSE 81453
// begin repeat wait ( 10 ) ;
81406: LD_INT 10
81408: PPUSH
81409: CALL_OW 67
// until not IsInUnit ( driver ) ;
81413: LD_VAR 0 5
81417: PPUSH
81418: CALL_OW 310
81422: NOT
81423: IFFALSE 81406
// if not HasTask ( driver ) then
81425: LD_VAR 0 5
81429: PPUSH
81430: CALL_OW 314
81434: NOT
81435: IFFALSE 81451
// ComEnterUnit ( driver , factory ) ;
81437: LD_VAR 0 5
81441: PPUSH
81442: LD_VAR 0 2
81446: PPUSH
81447: CALL_OW 120
// end else
81451: GO 81467
// AddComEnterUnit ( driver , factory ) ;
81453: LD_VAR 0 5
81457: PPUSH
81458: LD_VAR 0 2
81462: PPUSH
81463: CALL_OW 180
// wait ( 0 0$1 ) ;
81467: LD_INT 35
81469: PPUSH
81470: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
81474: LD_ADDR_EXP 106
81478: PUSH
81479: LD_EXP 106
81483: PUSH
81484: LD_VAR 0 5
81488: DIFF
81489: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
81490: LD_ADDR_EXP 106
81494: PUSH
81495: LD_EXP 106
81499: PUSH
81500: LD_VAR 0 1
81504: DIFF
81505: ST_TO_ADDR
// break ;
81506: GO 81659
// end ; end else
81508: GO 81657
// if GetControl ( vehicle ) = control_remote then
81510: LD_VAR 0 1
81514: PPUSH
81515: CALL_OW 263
81519: PUSH
81520: LD_INT 2
81522: EQUAL
81523: IFFALSE 81609
// begin wait ( 0 0$2 ) ;
81525: LD_INT 70
81527: PPUSH
81528: CALL_OW 67
// repeat wait ( 10 ) ;
81532: LD_INT 10
81534: PPUSH
81535: CALL_OW 67
// Connect ( vehicle ) ;
81539: LD_VAR 0 1
81543: PPUSH
81544: CALL 29620 0 1
// until IsControledBy ( vehicle ) ;
81548: LD_VAR 0 1
81552: PPUSH
81553: CALL_OW 312
81557: IFFALSE 81532
// wait ( 10 ) ;
81559: LD_INT 10
81561: PPUSH
81562: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
81566: LD_VAR 0 1
81570: PPUSH
81571: LD_EXP 105
81575: PUSH
81576: LD_VAR 0 4
81580: ARRAY
81581: PUSH
81582: LD_INT 3
81584: ARRAY
81585: PPUSH
81586: LD_EXP 105
81590: PUSH
81591: LD_VAR 0 4
81595: ARRAY
81596: PUSH
81597: LD_INT 4
81599: ARRAY
81600: PPUSH
81601: CALL_OW 111
// break ;
81605: GO 81659
// end else
81607: GO 81657
// begin wait ( 0 0$3 ) ;
81609: LD_INT 105
81611: PPUSH
81612: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
81616: LD_VAR 0 1
81620: PPUSH
81621: LD_EXP 105
81625: PUSH
81626: LD_VAR 0 4
81630: ARRAY
81631: PUSH
81632: LD_INT 3
81634: ARRAY
81635: PPUSH
81636: LD_EXP 105
81640: PUSH
81641: LD_VAR 0 4
81645: ARRAY
81646: PUSH
81647: LD_INT 4
81649: ARRAY
81650: PPUSH
81651: CALL_OW 111
// break ;
81655: GO 81659
// end ; end ;
81657: GO 81108
81659: POP
81660: POP
// end ;
81661: LD_VAR 0 3
81665: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
81666: LD_INT 0
81668: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
81669: LD_VAR 0 1
81673: PUSH
81674: LD_INT 250
81676: EQUAL
81677: IFFALSE 81694
81679: PUSH
81680: LD_VAR 0 2
81684: PPUSH
81685: CALL_OW 264
81689: PUSH
81690: LD_INT 81
81692: EQUAL
81693: AND
81694: IFFALSE 81715
// MinerPlaceMine ( unit , x , y ) ;
81696: LD_VAR 0 2
81700: PPUSH
81701: LD_VAR 0 4
81705: PPUSH
81706: LD_VAR 0 5
81710: PPUSH
81711: CALL 84847 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
81715: LD_VAR 0 1
81719: PUSH
81720: LD_INT 251
81722: EQUAL
81723: IFFALSE 81740
81725: PUSH
81726: LD_VAR 0 2
81730: PPUSH
81731: CALL_OW 264
81735: PUSH
81736: LD_INT 81
81738: EQUAL
81739: AND
81740: IFFALSE 81761
// MinerDetonateMine ( unit , x , y ) ;
81742: LD_VAR 0 2
81746: PPUSH
81747: LD_VAR 0 4
81751: PPUSH
81752: LD_VAR 0 5
81756: PPUSH
81757: CALL 85126 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
81761: LD_VAR 0 1
81765: PUSH
81766: LD_INT 252
81768: EQUAL
81769: IFFALSE 81786
81771: PUSH
81772: LD_VAR 0 2
81776: PPUSH
81777: CALL_OW 264
81781: PUSH
81782: LD_INT 81
81784: EQUAL
81785: AND
81786: IFFALSE 81807
// MinerCreateMinefield ( unit , x , y ) ;
81788: LD_VAR 0 2
81792: PPUSH
81793: LD_VAR 0 4
81797: PPUSH
81798: LD_VAR 0 5
81802: PPUSH
81803: CALL 85545 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
81807: LD_VAR 0 1
81811: PUSH
81812: LD_INT 253
81814: EQUAL
81815: IFFALSE 81832
81817: PUSH
81818: LD_VAR 0 2
81822: PPUSH
81823: CALL_OW 257
81827: PUSH
81828: LD_INT 5
81830: EQUAL
81831: AND
81832: IFFALSE 81853
// ComBinocular ( unit , x , y ) ;
81834: LD_VAR 0 2
81838: PPUSH
81839: LD_VAR 0 4
81843: PPUSH
81844: LD_VAR 0 5
81848: PPUSH
81849: CALL 85920 0 3
// if selectedUnit then
81853: LD_VAR 0 3
81857: IFFALSE 81917
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
81859: LD_VAR 0 1
81863: PUSH
81864: LD_INT 254
81866: EQUAL
81867: IFFALSE 81884
81869: PUSH
81870: LD_VAR 0 2
81874: PPUSH
81875: CALL_OW 264
81879: PUSH
81880: LD_INT 99
81882: EQUAL
81883: AND
81884: IFFALSE 81901
81886: PUSH
81887: LD_VAR 0 3
81891: PPUSH
81892: CALL_OW 263
81896: PUSH
81897: LD_INT 3
81899: EQUAL
81900: AND
81901: IFFALSE 81917
// HackDestroyVehicle ( unit , selectedUnit ) ;
81903: LD_VAR 0 2
81907: PPUSH
81908: LD_VAR 0 3
81912: PPUSH
81913: CALL 84207 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
81917: LD_VAR 0 1
81921: PUSH
81922: LD_INT 255
81924: EQUAL
81925: IFFALSE 81949
81927: PUSH
81928: LD_VAR 0 2
81932: PPUSH
81933: CALL_OW 264
81937: PUSH
81938: LD_INT 14
81940: PUSH
81941: LD_INT 53
81943: PUSH
81944: EMPTY
81945: LIST
81946: LIST
81947: IN
81948: AND
81949: IFFALSE 81967
81951: PUSH
81952: LD_VAR 0 4
81956: PPUSH
81957: LD_VAR 0 5
81961: PPUSH
81962: CALL_OW 488
81966: AND
81967: IFFALSE 81991
// CutTreeXYR ( unit , x , y , 12 ) ;
81969: LD_VAR 0 2
81973: PPUSH
81974: LD_VAR 0 4
81978: PPUSH
81979: LD_VAR 0 5
81983: PPUSH
81984: LD_INT 12
81986: PPUSH
81987: CALL 82182 0 4
// if cmd = 256 then
81991: LD_VAR 0 1
81995: PUSH
81996: LD_INT 256
81998: EQUAL
81999: IFFALSE 82020
// SetFactoryWaypoint ( unit , x , y ) ;
82001: LD_VAR 0 2
82005: PPUSH
82006: LD_VAR 0 4
82010: PPUSH
82011: LD_VAR 0 5
82015: PPUSH
82016: CALL 79379 0 3
// if cmd = 257 then
82020: LD_VAR 0 1
82024: PUSH
82025: LD_INT 257
82027: EQUAL
82028: IFFALSE 82049
// SetWarehouseGatheringPoint ( unit , x , y ) ;
82030: LD_VAR 0 2
82034: PPUSH
82035: LD_VAR 0 4
82039: PPUSH
82040: LD_VAR 0 5
82044: PPUSH
82045: CALL 79875 0 3
// if cmd = 258 then
82049: LD_VAR 0 1
82053: PUSH
82054: LD_INT 258
82056: EQUAL
82057: IFFALSE 82081
// BurnTreeXYR ( unit , x , y , 8 ) ;
82059: LD_VAR 0 2
82063: PPUSH
82064: LD_VAR 0 4
82068: PPUSH
82069: LD_VAR 0 5
82073: PPUSH
82074: LD_INT 8
82076: PPUSH
82077: CALL 82582 0 4
// end ;
82081: LD_VAR 0 6
82085: RET
// export function ComRadiation ( un ) ; var eff ; begin
82086: LD_INT 0
82088: PPUSH
82089: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
82090: LD_VAR 0 1
82094: PPUSH
82095: CALL_OW 264
82099: PUSH
82100: LD_INT 91
82102: NONEQUAL
82103: IFFALSE 82107
// exit ;
82105: GO 82177
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82107: LD_INT 68
82109: PPUSH
82110: LD_VAR 0 1
82114: PPUSH
82115: CALL_OW 255
82119: PPUSH
82120: CALL_OW 321
82124: PUSH
82125: LD_INT 2
82127: EQUAL
82128: IFFALSE 82140
// eff := 50 else
82130: LD_ADDR_VAR 0 3
82134: PUSH
82135: LD_INT 50
82137: ST_TO_ADDR
82138: GO 82148
// eff := 25 ;
82140: LD_ADDR_VAR 0 3
82144: PUSH
82145: LD_INT 25
82147: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82148: LD_VAR 0 1
82152: PPUSH
82153: CALL_OW 250
82157: PPUSH
82158: LD_VAR 0 1
82162: PPUSH
82163: CALL_OW 251
82167: PPUSH
82168: LD_VAR 0 3
82172: PPUSH
82173: CALL_OW 495
// end ;
82177: LD_VAR 0 2
82181: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
82182: LD_INT 0
82184: PPUSH
82185: PPUSH
82186: PPUSH
82187: PPUSH
82188: PPUSH
82189: PPUSH
82190: PPUSH
82191: PPUSH
82192: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
82193: LD_VAR 0 1
82197: PPUSH
82198: CALL_OW 302
82202: NOT
82203: IFTRUE 82222
82205: PUSH
82206: LD_VAR 0 2
82210: PPUSH
82211: LD_VAR 0 3
82215: PPUSH
82216: CALL_OW 488
82220: NOT
82221: OR
82222: IFTRUE 82231
82224: PUSH
82225: LD_VAR 0 4
82229: NOT
82230: OR
82231: IFFALSE 82235
// exit ;
82233: GO 82577
// list := [ ] ;
82235: LD_ADDR_VAR 0 13
82239: PUSH
82240: EMPTY
82241: ST_TO_ADDR
// if x - r < 0 then
82242: LD_VAR 0 2
82246: PUSH
82247: LD_VAR 0 4
82251: MINUS
82252: PUSH
82253: LD_INT 0
82255: LESS
82256: IFFALSE 82268
// min_x := 0 else
82258: LD_ADDR_VAR 0 7
82262: PUSH
82263: LD_INT 0
82265: ST_TO_ADDR
82266: GO 82284
// min_x := x - r ;
82268: LD_ADDR_VAR 0 7
82272: PUSH
82273: LD_VAR 0 2
82277: PUSH
82278: LD_VAR 0 4
82282: MINUS
82283: ST_TO_ADDR
// if y - r < 0 then
82284: LD_VAR 0 3
82288: PUSH
82289: LD_VAR 0 4
82293: MINUS
82294: PUSH
82295: LD_INT 0
82297: LESS
82298: IFFALSE 82310
// min_y := 0 else
82300: LD_ADDR_VAR 0 8
82304: PUSH
82305: LD_INT 0
82307: ST_TO_ADDR
82308: GO 82326
// min_y := y - r ;
82310: LD_ADDR_VAR 0 8
82314: PUSH
82315: LD_VAR 0 3
82319: PUSH
82320: LD_VAR 0 4
82324: MINUS
82325: ST_TO_ADDR
// max_x := x + r ;
82326: LD_ADDR_VAR 0 9
82330: PUSH
82331: LD_VAR 0 2
82335: PUSH
82336: LD_VAR 0 4
82340: PLUS
82341: ST_TO_ADDR
// max_y := y + r ;
82342: LD_ADDR_VAR 0 10
82346: PUSH
82347: LD_VAR 0 3
82351: PUSH
82352: LD_VAR 0 4
82356: PLUS
82357: ST_TO_ADDR
// for _x = min_x to max_x do
82358: LD_ADDR_VAR 0 11
82362: PUSH
82363: DOUBLE
82364: LD_VAR 0 7
82368: DEC
82369: ST_TO_ADDR
82370: LD_VAR 0 9
82374: PUSH
82375: FOR_TO
82376: IFFALSE 82495
// for _y = min_y to max_y do
82378: LD_ADDR_VAR 0 12
82382: PUSH
82383: DOUBLE
82384: LD_VAR 0 8
82388: DEC
82389: ST_TO_ADDR
82390: LD_VAR 0 10
82394: PUSH
82395: FOR_TO
82396: IFFALSE 82491
// begin if not ValidHex ( _x , _y ) then
82398: LD_VAR 0 11
82402: PPUSH
82403: LD_VAR 0 12
82407: PPUSH
82408: CALL_OW 488
82412: NOT
82413: IFFALSE 82417
// continue ;
82415: GO 82395
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
82417: LD_VAR 0 11
82421: PPUSH
82422: LD_VAR 0 12
82426: PPUSH
82427: CALL_OW 351
82431: IFFALSE 82449
82433: PUSH
82434: LD_VAR 0 11
82438: PPUSH
82439: LD_VAR 0 12
82443: PPUSH
82444: CALL_OW 554
82448: AND
82449: IFFALSE 82489
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
82451: LD_ADDR_VAR 0 13
82455: PUSH
82456: LD_VAR 0 13
82460: PPUSH
82461: LD_VAR 0 13
82465: PUSH
82466: LD_INT 1
82468: PLUS
82469: PPUSH
82470: LD_VAR 0 11
82474: PUSH
82475: LD_VAR 0 12
82479: PUSH
82480: EMPTY
82481: LIST
82482: LIST
82483: PPUSH
82484: CALL_OW 2
82488: ST_TO_ADDR
// end ;
82489: GO 82395
82491: POP
82492: POP
82493: GO 82375
82495: POP
82496: POP
// if not list then
82497: LD_VAR 0 13
82501: NOT
82502: IFFALSE 82506
// exit ;
82504: GO 82577
// for i in list do
82506: LD_ADDR_VAR 0 6
82510: PUSH
82511: LD_VAR 0 13
82515: PUSH
82516: FOR_IN
82517: IFFALSE 82575
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
82519: LD_VAR 0 1
82523: PPUSH
82524: LD_STRING M
82526: PUSH
82527: LD_VAR 0 6
82531: PUSH
82532: LD_INT 1
82534: ARRAY
82535: PUSH
82536: LD_VAR 0 6
82540: PUSH
82541: LD_INT 2
82543: ARRAY
82544: PUSH
82545: LD_INT 0
82547: PUSH
82548: LD_INT 0
82550: PUSH
82551: LD_INT 0
82553: PUSH
82554: LD_INT 0
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: LIST
82561: LIST
82562: LIST
82563: LIST
82564: LIST
82565: PUSH
82566: EMPTY
82567: LIST
82568: PPUSH
82569: CALL_OW 447
82573: GO 82516
82575: POP
82576: POP
// end ;
82577: LD_VAR 0 5
82581: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
82582: LD_INT 0
82584: PPUSH
82585: PPUSH
82586: PPUSH
82587: PPUSH
82588: PPUSH
82589: PPUSH
82590: PPUSH
82591: PPUSH
82592: PPUSH
82593: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
82594: LD_VAR 0 1
82598: PPUSH
82599: CALL_OW 302
82603: NOT
82604: IFTRUE 82623
82606: PUSH
82607: LD_VAR 0 2
82611: PPUSH
82612: LD_VAR 0 3
82616: PPUSH
82617: CALL_OW 488
82621: NOT
82622: OR
82623: IFTRUE 82632
82625: PUSH
82626: LD_VAR 0 4
82630: NOT
82631: OR
82632: IFFALSE 82636
// exit ;
82634: GO 83153
// list := [ ] ;
82636: LD_ADDR_VAR 0 13
82640: PUSH
82641: EMPTY
82642: ST_TO_ADDR
// if x - r < 0 then
82643: LD_VAR 0 2
82647: PUSH
82648: LD_VAR 0 4
82652: MINUS
82653: PUSH
82654: LD_INT 0
82656: LESS
82657: IFFALSE 82669
// min_x := 0 else
82659: LD_ADDR_VAR 0 7
82663: PUSH
82664: LD_INT 0
82666: ST_TO_ADDR
82667: GO 82685
// min_x := x - r ;
82669: LD_ADDR_VAR 0 7
82673: PUSH
82674: LD_VAR 0 2
82678: PUSH
82679: LD_VAR 0 4
82683: MINUS
82684: ST_TO_ADDR
// if y - r < 0 then
82685: LD_VAR 0 3
82689: PUSH
82690: LD_VAR 0 4
82694: MINUS
82695: PUSH
82696: LD_INT 0
82698: LESS
82699: IFFALSE 82711
// min_y := 0 else
82701: LD_ADDR_VAR 0 8
82705: PUSH
82706: LD_INT 0
82708: ST_TO_ADDR
82709: GO 82727
// min_y := y - r ;
82711: LD_ADDR_VAR 0 8
82715: PUSH
82716: LD_VAR 0 3
82720: PUSH
82721: LD_VAR 0 4
82725: MINUS
82726: ST_TO_ADDR
// max_x := x + r ;
82727: LD_ADDR_VAR 0 9
82731: PUSH
82732: LD_VAR 0 2
82736: PUSH
82737: LD_VAR 0 4
82741: PLUS
82742: ST_TO_ADDR
// max_y := y + r ;
82743: LD_ADDR_VAR 0 10
82747: PUSH
82748: LD_VAR 0 3
82752: PUSH
82753: LD_VAR 0 4
82757: PLUS
82758: ST_TO_ADDR
// for _x = min_x to max_x do
82759: LD_ADDR_VAR 0 11
82763: PUSH
82764: DOUBLE
82765: LD_VAR 0 7
82769: DEC
82770: ST_TO_ADDR
82771: LD_VAR 0 9
82775: PUSH
82776: FOR_TO
82777: IFFALSE 82896
// for _y = min_y to max_y do
82779: LD_ADDR_VAR 0 12
82783: PUSH
82784: DOUBLE
82785: LD_VAR 0 8
82789: DEC
82790: ST_TO_ADDR
82791: LD_VAR 0 10
82795: PUSH
82796: FOR_TO
82797: IFFALSE 82892
// begin if not ValidHex ( _x , _y ) then
82799: LD_VAR 0 11
82803: PPUSH
82804: LD_VAR 0 12
82808: PPUSH
82809: CALL_OW 488
82813: NOT
82814: IFFALSE 82818
// continue ;
82816: GO 82796
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
82818: LD_VAR 0 11
82822: PPUSH
82823: LD_VAR 0 12
82827: PPUSH
82828: CALL_OW 351
82832: IFFALSE 82850
82834: PUSH
82835: LD_VAR 0 11
82839: PPUSH
82840: LD_VAR 0 12
82844: PPUSH
82845: CALL_OW 554
82849: AND
82850: IFFALSE 82890
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
82852: LD_ADDR_VAR 0 13
82856: PUSH
82857: LD_VAR 0 13
82861: PPUSH
82862: LD_VAR 0 13
82866: PUSH
82867: LD_INT 1
82869: PLUS
82870: PPUSH
82871: LD_VAR 0 11
82875: PUSH
82876: LD_VAR 0 12
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: PPUSH
82885: CALL_OW 2
82889: ST_TO_ADDR
// end ;
82890: GO 82796
82892: POP
82893: POP
82894: GO 82776
82896: POP
82897: POP
// if not list then
82898: LD_VAR 0 13
82902: NOT
82903: IFFALSE 82907
// exit ;
82905: GO 83153
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
82907: LD_ADDR_VAR 0 13
82911: PUSH
82912: LD_VAR 0 1
82916: PPUSH
82917: LD_VAR 0 13
82921: PPUSH
82922: LD_INT 1
82924: PPUSH
82925: LD_INT 1
82927: PPUSH
82928: CALL 26748 0 4
82932: ST_TO_ADDR
// ComStop ( flame ) ;
82933: LD_VAR 0 1
82937: PPUSH
82938: CALL_OW 141
// for i in list do
82942: LD_ADDR_VAR 0 6
82946: PUSH
82947: LD_VAR 0 13
82951: PUSH
82952: FOR_IN
82953: IFFALSE 82984
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
82955: LD_VAR 0 1
82959: PPUSH
82960: LD_VAR 0 6
82964: PUSH
82965: LD_INT 1
82967: ARRAY
82968: PPUSH
82969: LD_VAR 0 6
82973: PUSH
82974: LD_INT 2
82976: ARRAY
82977: PPUSH
82978: CALL_OW 176
82982: GO 82952
82984: POP
82985: POP
// repeat wait ( 0 0$1 ) ;
82986: LD_INT 35
82988: PPUSH
82989: CALL_OW 67
// task := GetTaskList ( flame ) ;
82993: LD_ADDR_VAR 0 14
82997: PUSH
82998: LD_VAR 0 1
83002: PPUSH
83003: CALL_OW 437
83007: ST_TO_ADDR
// if not task then
83008: LD_VAR 0 14
83012: NOT
83013: IFFALSE 83017
// exit ;
83015: GO 83153
// if task [ 1 ] [ 1 ] <> | then
83017: LD_VAR 0 14
83021: PUSH
83022: LD_INT 1
83024: ARRAY
83025: PUSH
83026: LD_INT 1
83028: ARRAY
83029: PUSH
83030: LD_STRING |
83032: NONEQUAL
83033: IFFALSE 83037
// exit ;
83035: GO 83153
// _x := task [ 1 ] [ 2 ] ;
83037: LD_ADDR_VAR 0 11
83041: PUSH
83042: LD_VAR 0 14
83046: PUSH
83047: LD_INT 1
83049: ARRAY
83050: PUSH
83051: LD_INT 2
83053: ARRAY
83054: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
83055: LD_ADDR_VAR 0 12
83059: PUSH
83060: LD_VAR 0 14
83064: PUSH
83065: LD_INT 1
83067: ARRAY
83068: PUSH
83069: LD_INT 3
83071: ARRAY
83072: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
83073: LD_VAR 0 11
83077: PPUSH
83078: LD_VAR 0 12
83082: PPUSH
83083: CALL_OW 351
83087: NOT
83088: IFTRUE 83107
83090: PUSH
83091: LD_VAR 0 11
83095: PPUSH
83096: LD_VAR 0 12
83100: PPUSH
83101: CALL_OW 554
83105: NOT
83106: OR
83107: IFFALSE 83141
// begin task := Delete ( task , 1 ) ;
83109: LD_ADDR_VAR 0 14
83113: PUSH
83114: LD_VAR 0 14
83118: PPUSH
83119: LD_INT 1
83121: PPUSH
83122: CALL_OW 3
83126: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
83127: LD_VAR 0 1
83131: PPUSH
83132: LD_VAR 0 14
83136: PPUSH
83137: CALL_OW 446
// end ; until not HasTask ( flame ) ;
83141: LD_VAR 0 1
83145: PPUSH
83146: CALL_OW 314
83150: NOT
83151: IFFALSE 82986
// end ;
83153: LD_VAR 0 5
83157: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
83158: LD_EXP 109
83162: NOT
83163: IFFALSE 83213
83165: GO 83167
83167: DISABLE
// begin initHack := true ;
83168: LD_ADDR_EXP 109
83172: PUSH
83173: LD_INT 1
83175: ST_TO_ADDR
// hackTanks := [ ] ;
83176: LD_ADDR_EXP 110
83180: PUSH
83181: EMPTY
83182: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
83183: LD_ADDR_EXP 111
83187: PUSH
83188: EMPTY
83189: ST_TO_ADDR
// hackLimit := 3 ;
83190: LD_ADDR_EXP 112
83194: PUSH
83195: LD_INT 3
83197: ST_TO_ADDR
// hackDist := 12 ;
83198: LD_ADDR_EXP 113
83202: PUSH
83203: LD_INT 12
83205: ST_TO_ADDR
// hackCounter := [ ] ;
83206: LD_ADDR_EXP 114
83210: PUSH
83211: EMPTY
83212: ST_TO_ADDR
// end ;
83213: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
83214: LD_EXP 109
83218: IFFALSE 83236
83220: PUSH
83221: LD_INT 34
83223: PUSH
83224: LD_INT 99
83226: PUSH
83227: EMPTY
83228: LIST
83229: LIST
83230: PPUSH
83231: CALL_OW 69
83235: AND
83236: IFFALSE 83489
83238: GO 83240
83240: DISABLE
83241: LD_INT 0
83243: PPUSH
83244: PPUSH
// begin enable ;
83245: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
83246: LD_ADDR_VAR 0 1
83250: PUSH
83251: LD_INT 34
83253: PUSH
83254: LD_INT 99
83256: PUSH
83257: EMPTY
83258: LIST
83259: LIST
83260: PPUSH
83261: CALL_OW 69
83265: PUSH
83266: FOR_IN
83267: IFFALSE 83487
// begin if not i in hackTanks then
83269: LD_VAR 0 1
83273: PUSH
83274: LD_EXP 110
83278: IN
83279: NOT
83280: IFFALSE 83363
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
83282: LD_ADDR_EXP 110
83286: PUSH
83287: LD_EXP 110
83291: PPUSH
83292: LD_EXP 110
83296: PUSH
83297: LD_INT 1
83299: PLUS
83300: PPUSH
83301: LD_VAR 0 1
83305: PPUSH
83306: CALL_OW 1
83310: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
83311: LD_ADDR_EXP 111
83315: PUSH
83316: LD_EXP 111
83320: PPUSH
83321: LD_EXP 111
83325: PUSH
83326: LD_INT 1
83328: PLUS
83329: PPUSH
83330: EMPTY
83331: PPUSH
83332: CALL_OW 1
83336: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
83337: LD_ADDR_EXP 114
83341: PUSH
83342: LD_EXP 114
83346: PPUSH
83347: LD_EXP 114
83351: PUSH
83352: LD_INT 1
83354: PLUS
83355: PPUSH
83356: EMPTY
83357: PPUSH
83358: CALL_OW 1
83362: ST_TO_ADDR
// end ; if not IsOk ( i ) then
83363: LD_VAR 0 1
83367: PPUSH
83368: CALL_OW 302
83372: NOT
83373: IFFALSE 83386
// begin HackUnlinkAll ( i ) ;
83375: LD_VAR 0 1
83379: PPUSH
83380: CALL 83492 0 1
// continue ;
83384: GO 83266
// end ; HackCheckCapturedStatus ( i ) ;
83386: LD_VAR 0 1
83390: PPUSH
83391: CALL 83937 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
83395: LD_ADDR_VAR 0 2
83399: PUSH
83400: LD_INT 81
83402: PUSH
83403: LD_VAR 0 1
83407: PPUSH
83408: CALL_OW 255
83412: PUSH
83413: EMPTY
83414: LIST
83415: LIST
83416: PUSH
83417: LD_INT 33
83419: PUSH
83420: LD_INT 3
83422: PUSH
83423: EMPTY
83424: LIST
83425: LIST
83426: PUSH
83427: LD_INT 91
83429: PUSH
83430: LD_VAR 0 1
83434: PUSH
83435: LD_EXP 113
83439: PUSH
83440: EMPTY
83441: LIST
83442: LIST
83443: LIST
83444: PUSH
83445: LD_INT 50
83447: PUSH
83448: EMPTY
83449: LIST
83450: PUSH
83451: EMPTY
83452: LIST
83453: LIST
83454: LIST
83455: LIST
83456: PPUSH
83457: CALL_OW 69
83461: ST_TO_ADDR
// if not tmp then
83462: LD_VAR 0 2
83466: NOT
83467: IFFALSE 83471
// continue ;
83469: GO 83266
// HackLink ( i , tmp ) ;
83471: LD_VAR 0 1
83475: PPUSH
83476: LD_VAR 0 2
83480: PPUSH
83481: CALL 83628 0 2
// end ;
83485: GO 83266
83487: POP
83488: POP
// end ;
83489: PPOPN 2
83491: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
83492: LD_INT 0
83494: PPUSH
83495: PPUSH
83496: PPUSH
// if not hack in hackTanks then
83497: LD_VAR 0 1
83501: PUSH
83502: LD_EXP 110
83506: IN
83507: NOT
83508: IFFALSE 83512
// exit ;
83510: GO 83623
// index := GetElementIndex ( hackTanks , hack ) ;
83512: LD_ADDR_VAR 0 4
83516: PUSH
83517: LD_EXP 110
83521: PPUSH
83522: LD_VAR 0 1
83526: PPUSH
83527: CALL 26043 0 2
83531: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
83532: LD_EXP 111
83536: PUSH
83537: LD_VAR 0 4
83541: ARRAY
83542: IFFALSE 83623
// begin for i in hackTanksCaptured [ index ] do
83544: LD_ADDR_VAR 0 3
83548: PUSH
83549: LD_EXP 111
83553: PUSH
83554: LD_VAR 0 4
83558: ARRAY
83559: PUSH
83560: FOR_IN
83561: IFFALSE 83587
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
83563: LD_VAR 0 3
83567: PUSH
83568: LD_INT 1
83570: ARRAY
83571: PPUSH
83572: LD_VAR 0 3
83576: PUSH
83577: LD_INT 2
83579: ARRAY
83580: PPUSH
83581: CALL_OW 235
83585: GO 83560
83587: POP
83588: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
83589: LD_ADDR_EXP 111
83593: PUSH
83594: LD_EXP 111
83598: PPUSH
83599: LD_VAR 0 4
83603: PPUSH
83604: EMPTY
83605: PPUSH
83606: CALL_OW 1
83610: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
83611: LD_VAR 0 1
83615: PPUSH
83616: LD_INT 0
83618: PPUSH
83619: CALL_OW 505
// end ; end ;
83623: LD_VAR 0 2
83627: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
83628: LD_INT 0
83630: PPUSH
83631: PPUSH
83632: PPUSH
// if not hack in hackTanks or not vehicles then
83633: LD_VAR 0 1
83637: PUSH
83638: LD_EXP 110
83642: IN
83643: NOT
83644: IFTRUE 83653
83646: PUSH
83647: LD_VAR 0 2
83651: NOT
83652: OR
83653: IFFALSE 83657
// exit ;
83655: GO 83932
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
83657: LD_ADDR_VAR 0 2
83661: PUSH
83662: LD_VAR 0 1
83666: PPUSH
83667: LD_VAR 0 2
83671: PPUSH
83672: LD_INT 1
83674: PPUSH
83675: LD_INT 1
83677: PPUSH
83678: CALL 26695 0 4
83682: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
83683: LD_ADDR_VAR 0 5
83687: PUSH
83688: LD_EXP 110
83692: PPUSH
83693: LD_VAR 0 1
83697: PPUSH
83698: CALL 26043 0 2
83702: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
83703: LD_EXP 111
83707: PUSH
83708: LD_VAR 0 5
83712: ARRAY
83713: PUSH
83714: LD_EXP 112
83718: LESS
83719: IFFALSE 83908
// begin for i := 1 to vehicles do
83721: LD_ADDR_VAR 0 4
83725: PUSH
83726: DOUBLE
83727: LD_INT 1
83729: DEC
83730: ST_TO_ADDR
83731: LD_VAR 0 2
83735: PUSH
83736: FOR_TO
83737: IFFALSE 83906
// begin if hackTanksCaptured [ index ] = hackLimit then
83739: LD_EXP 111
83743: PUSH
83744: LD_VAR 0 5
83748: ARRAY
83749: PUSH
83750: LD_EXP 112
83754: EQUAL
83755: IFFALSE 83759
// break ;
83757: GO 83906
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
83759: LD_ADDR_EXP 114
83763: PUSH
83764: LD_EXP 114
83768: PPUSH
83769: LD_VAR 0 5
83773: PPUSH
83774: LD_EXP 114
83778: PUSH
83779: LD_VAR 0 5
83783: ARRAY
83784: PUSH
83785: LD_INT 1
83787: PLUS
83788: PPUSH
83789: CALL_OW 1
83793: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
83794: LD_ADDR_EXP 111
83798: PUSH
83799: LD_EXP 111
83803: PPUSH
83804: LD_VAR 0 5
83808: PUSH
83809: LD_EXP 111
83813: PUSH
83814: LD_VAR 0 5
83818: ARRAY
83819: PUSH
83820: LD_INT 1
83822: PLUS
83823: PUSH
83824: EMPTY
83825: LIST
83826: LIST
83827: PPUSH
83828: LD_VAR 0 2
83832: PUSH
83833: LD_VAR 0 4
83837: ARRAY
83838: PUSH
83839: LD_VAR 0 2
83843: PUSH
83844: LD_VAR 0 4
83848: ARRAY
83849: PPUSH
83850: CALL_OW 255
83854: PUSH
83855: EMPTY
83856: LIST
83857: LIST
83858: PPUSH
83859: CALL 26260 0 3
83863: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
83864: LD_VAR 0 2
83868: PUSH
83869: LD_VAR 0 4
83873: ARRAY
83874: PPUSH
83875: LD_VAR 0 1
83879: PPUSH
83880: CALL_OW 255
83884: PPUSH
83885: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
83889: LD_VAR 0 2
83893: PUSH
83894: LD_VAR 0 4
83898: ARRAY
83899: PPUSH
83900: CALL_OW 141
// end ;
83904: GO 83736
83906: POP
83907: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
83908: LD_VAR 0 1
83912: PPUSH
83913: LD_EXP 111
83917: PUSH
83918: LD_VAR 0 5
83922: ARRAY
83923: PUSH
83924: LD_INT 0
83926: PLUS
83927: PPUSH
83928: CALL_OW 505
// end ;
83932: LD_VAR 0 3
83936: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
83937: LD_INT 0
83939: PPUSH
83940: PPUSH
83941: PPUSH
83942: PPUSH
// if not hack in hackTanks then
83943: LD_VAR 0 1
83947: PUSH
83948: LD_EXP 110
83952: IN
83953: NOT
83954: IFFALSE 83958
// exit ;
83956: GO 84202
// index := GetElementIndex ( hackTanks , hack ) ;
83958: LD_ADDR_VAR 0 4
83962: PUSH
83963: LD_EXP 110
83967: PPUSH
83968: LD_VAR 0 1
83972: PPUSH
83973: CALL 26043 0 2
83977: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
83978: LD_ADDR_VAR 0 3
83982: PUSH
83983: DOUBLE
83984: LD_EXP 111
83988: PUSH
83989: LD_VAR 0 4
83993: ARRAY
83994: INC
83995: ST_TO_ADDR
83996: LD_INT 1
83998: PUSH
83999: FOR_DOWNTO
84000: IFFALSE 84176
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84002: LD_ADDR_VAR 0 5
84006: PUSH
84007: LD_EXP 111
84011: PUSH
84012: LD_VAR 0 4
84016: ARRAY
84017: PUSH
84018: LD_VAR 0 3
84022: ARRAY
84023: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84024: LD_VAR 0 5
84028: PUSH
84029: LD_INT 1
84031: ARRAY
84032: PPUSH
84033: CALL_OW 302
84037: NOT
84038: IFTRUE 84066
84040: PUSH
84041: LD_VAR 0 5
84045: PUSH
84046: LD_INT 1
84048: ARRAY
84049: PPUSH
84050: CALL_OW 255
84054: PUSH
84055: LD_VAR 0 1
84059: PPUSH
84060: CALL_OW 255
84064: NONEQUAL
84065: OR
84066: IFFALSE 84174
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84068: LD_VAR 0 5
84072: PUSH
84073: LD_INT 1
84075: ARRAY
84076: PPUSH
84077: CALL_OW 305
84081: IFFALSE 84109
84083: PUSH
84084: LD_VAR 0 5
84088: PUSH
84089: LD_INT 1
84091: ARRAY
84092: PPUSH
84093: CALL_OW 255
84097: PUSH
84098: LD_VAR 0 1
84102: PPUSH
84103: CALL_OW 255
84107: EQUAL
84108: AND
84109: IFFALSE 84133
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84111: LD_VAR 0 5
84115: PUSH
84116: LD_INT 1
84118: ARRAY
84119: PPUSH
84120: LD_VAR 0 5
84124: PUSH
84125: LD_INT 2
84127: ARRAY
84128: PPUSH
84129: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84133: LD_ADDR_EXP 111
84137: PUSH
84138: LD_EXP 111
84142: PPUSH
84143: LD_VAR 0 4
84147: PPUSH
84148: LD_EXP 111
84152: PUSH
84153: LD_VAR 0 4
84157: ARRAY
84158: PPUSH
84159: LD_VAR 0 3
84163: PPUSH
84164: CALL_OW 3
84168: PPUSH
84169: CALL_OW 1
84173: ST_TO_ADDR
// end ; end ;
84174: GO 83999
84176: POP
84177: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84178: LD_VAR 0 1
84182: PPUSH
84183: LD_EXP 111
84187: PUSH
84188: LD_VAR 0 4
84192: ARRAY
84193: PUSH
84194: LD_INT 0
84196: PLUS
84197: PPUSH
84198: CALL_OW 505
// end ;
84202: LD_VAR 0 2
84206: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
84207: LD_INT 0
84209: PPUSH
84210: PPUSH
84211: PPUSH
84212: PPUSH
// if not hack in hackTanks then
84213: LD_VAR 0 1
84217: PUSH
84218: LD_EXP 110
84222: IN
84223: NOT
84224: IFFALSE 84228
// exit ;
84226: GO 84313
// index := GetElementIndex ( hackTanks , hack ) ;
84228: LD_ADDR_VAR 0 5
84232: PUSH
84233: LD_EXP 110
84237: PPUSH
84238: LD_VAR 0 1
84242: PPUSH
84243: CALL 26043 0 2
84247: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
84248: LD_ADDR_VAR 0 4
84252: PUSH
84253: DOUBLE
84254: LD_INT 1
84256: DEC
84257: ST_TO_ADDR
84258: LD_EXP 111
84262: PUSH
84263: LD_VAR 0 5
84267: ARRAY
84268: PUSH
84269: FOR_TO
84270: IFFALSE 84311
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
84272: LD_EXP 111
84276: PUSH
84277: LD_VAR 0 5
84281: ARRAY
84282: PUSH
84283: LD_VAR 0 4
84287: ARRAY
84288: PUSH
84289: LD_INT 1
84291: ARRAY
84292: PUSH
84293: LD_VAR 0 2
84297: EQUAL
84298: IFFALSE 84309
// KillUnit ( vehicle ) ;
84300: LD_VAR 0 2
84304: PPUSH
84305: CALL_OW 66
84309: GO 84269
84311: POP
84312: POP
// end ;
84313: LD_VAR 0 3
84317: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
84318: LD_EXP 115
84322: NOT
84323: IFFALSE 84358
84325: GO 84327
84327: DISABLE
// begin initMiner := true ;
84328: LD_ADDR_EXP 115
84332: PUSH
84333: LD_INT 1
84335: ST_TO_ADDR
// minersList := [ ] ;
84336: LD_ADDR_EXP 116
84340: PUSH
84341: EMPTY
84342: ST_TO_ADDR
// minerMinesList := [ ] ;
84343: LD_ADDR_EXP 117
84347: PUSH
84348: EMPTY
84349: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
84350: LD_ADDR_EXP 118
84354: PUSH
84355: LD_INT 5
84357: ST_TO_ADDR
// end ;
84358: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
84359: LD_EXP 115
84363: IFFALSE 84381
84365: PUSH
84366: LD_INT 34
84368: PUSH
84369: LD_INT 81
84371: PUSH
84372: EMPTY
84373: LIST
84374: LIST
84375: PPUSH
84376: CALL_OW 69
84380: AND
84381: IFFALSE 84844
84383: GO 84385
84385: DISABLE
84386: LD_INT 0
84388: PPUSH
84389: PPUSH
84390: PPUSH
84391: PPUSH
// begin enable ;
84392: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
84393: LD_ADDR_VAR 0 1
84397: PUSH
84398: LD_INT 34
84400: PUSH
84401: LD_INT 81
84403: PUSH
84404: EMPTY
84405: LIST
84406: LIST
84407: PPUSH
84408: CALL_OW 69
84412: PUSH
84413: FOR_IN
84414: IFFALSE 84486
// begin if not i in minersList then
84416: LD_VAR 0 1
84420: PUSH
84421: LD_EXP 116
84425: IN
84426: NOT
84427: IFFALSE 84484
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
84429: LD_ADDR_EXP 116
84433: PUSH
84434: LD_EXP 116
84438: PPUSH
84439: LD_EXP 116
84443: PUSH
84444: LD_INT 1
84446: PLUS
84447: PPUSH
84448: LD_VAR 0 1
84452: PPUSH
84453: CALL_OW 1
84457: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
84458: LD_ADDR_EXP 117
84462: PUSH
84463: LD_EXP 117
84467: PPUSH
84468: LD_EXP 117
84472: PUSH
84473: LD_INT 1
84475: PLUS
84476: PPUSH
84477: EMPTY
84478: PPUSH
84479: CALL_OW 1
84483: ST_TO_ADDR
// end end ;
84484: GO 84413
84486: POP
84487: POP
// for i := minerMinesList downto 1 do
84488: LD_ADDR_VAR 0 1
84492: PUSH
84493: DOUBLE
84494: LD_EXP 117
84498: INC
84499: ST_TO_ADDR
84500: LD_INT 1
84502: PUSH
84503: FOR_DOWNTO
84504: IFFALSE 84842
// begin if IsLive ( minersList [ i ] ) then
84506: LD_EXP 116
84510: PUSH
84511: LD_VAR 0 1
84515: ARRAY
84516: PPUSH
84517: CALL_OW 300
84521: IFFALSE 84549
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
84523: LD_EXP 116
84527: PUSH
84528: LD_VAR 0 1
84532: ARRAY
84533: PPUSH
84534: LD_EXP 117
84538: PUSH
84539: LD_VAR 0 1
84543: ARRAY
84544: PPUSH
84545: CALL_OW 505
// if not minerMinesList [ i ] then
84549: LD_EXP 117
84553: PUSH
84554: LD_VAR 0 1
84558: ARRAY
84559: NOT
84560: IFFALSE 84564
// continue ;
84562: GO 84503
// for j := minerMinesList [ i ] downto 1 do
84564: LD_ADDR_VAR 0 2
84568: PUSH
84569: DOUBLE
84570: LD_EXP 117
84574: PUSH
84575: LD_VAR 0 1
84579: ARRAY
84580: INC
84581: ST_TO_ADDR
84582: LD_INT 1
84584: PUSH
84585: FOR_DOWNTO
84586: IFFALSE 84838
// begin side := GetSide ( minersList [ i ] ) ;
84588: LD_ADDR_VAR 0 3
84592: PUSH
84593: LD_EXP 116
84597: PUSH
84598: LD_VAR 0 1
84602: ARRAY
84603: PPUSH
84604: CALL_OW 255
84608: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
84609: LD_ADDR_VAR 0 4
84613: PUSH
84614: LD_EXP 117
84618: PUSH
84619: LD_VAR 0 1
84623: ARRAY
84624: PUSH
84625: LD_VAR 0 2
84629: ARRAY
84630: PUSH
84631: LD_INT 1
84633: ARRAY
84634: PPUSH
84635: LD_EXP 117
84639: PUSH
84640: LD_VAR 0 1
84644: ARRAY
84645: PUSH
84646: LD_VAR 0 2
84650: ARRAY
84651: PUSH
84652: LD_INT 2
84654: ARRAY
84655: PPUSH
84656: CALL_OW 428
84660: ST_TO_ADDR
// if not tmp then
84661: LD_VAR 0 4
84665: NOT
84666: IFFALSE 84670
// continue ;
84668: GO 84585
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
84670: LD_VAR 0 4
84674: PUSH
84675: LD_INT 81
84677: PUSH
84678: LD_VAR 0 3
84682: PUSH
84683: EMPTY
84684: LIST
84685: LIST
84686: PPUSH
84687: CALL_OW 69
84691: IN
84692: IFFALSE 84742
84694: PUSH
84695: LD_EXP 117
84699: PUSH
84700: LD_VAR 0 1
84704: ARRAY
84705: PUSH
84706: LD_VAR 0 2
84710: ARRAY
84711: PUSH
84712: LD_INT 1
84714: ARRAY
84715: PPUSH
84716: LD_EXP 117
84720: PUSH
84721: LD_VAR 0 1
84725: ARRAY
84726: PUSH
84727: LD_VAR 0 2
84731: ARRAY
84732: PUSH
84733: LD_INT 2
84735: ARRAY
84736: PPUSH
84737: CALL_OW 458
84741: AND
84742: IFFALSE 84836
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
84744: LD_EXP 117
84748: PUSH
84749: LD_VAR 0 1
84753: ARRAY
84754: PUSH
84755: LD_VAR 0 2
84759: ARRAY
84760: PUSH
84761: LD_INT 1
84763: ARRAY
84764: PPUSH
84765: LD_EXP 117
84769: PUSH
84770: LD_VAR 0 1
84774: ARRAY
84775: PUSH
84776: LD_VAR 0 2
84780: ARRAY
84781: PUSH
84782: LD_INT 2
84784: ARRAY
84785: PPUSH
84786: LD_VAR 0 3
84790: PPUSH
84791: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
84795: LD_ADDR_EXP 117
84799: PUSH
84800: LD_EXP 117
84804: PPUSH
84805: LD_VAR 0 1
84809: PPUSH
84810: LD_EXP 117
84814: PUSH
84815: LD_VAR 0 1
84819: ARRAY
84820: PPUSH
84821: LD_VAR 0 2
84825: PPUSH
84826: CALL_OW 3
84830: PPUSH
84831: CALL_OW 1
84835: ST_TO_ADDR
// end ; end ;
84836: GO 84585
84838: POP
84839: POP
// end ;
84840: GO 84503
84842: POP
84843: POP
// end ;
84844: PPOPN 4
84846: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
84847: LD_INT 0
84849: PPUSH
84850: PPUSH
// result := false ;
84851: LD_ADDR_VAR 0 4
84855: PUSH
84856: LD_INT 0
84858: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
84859: LD_VAR 0 1
84863: PPUSH
84864: CALL_OW 264
84868: PUSH
84869: LD_INT 81
84871: EQUAL
84872: NOT
84873: IFFALSE 84877
// exit ;
84875: GO 85121
// index := GetElementIndex ( minersList , unit ) ;
84877: LD_ADDR_VAR 0 5
84881: PUSH
84882: LD_EXP 116
84886: PPUSH
84887: LD_VAR 0 1
84891: PPUSH
84892: CALL 26043 0 2
84896: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
84897: LD_EXP 117
84901: PUSH
84902: LD_VAR 0 5
84906: ARRAY
84907: PUSH
84908: LD_EXP 118
84912: GREATEREQUAL
84913: IFFALSE 84917
// exit ;
84915: GO 85121
// ComMoveXY ( unit , x , y ) ;
84917: LD_VAR 0 1
84921: PPUSH
84922: LD_VAR 0 2
84926: PPUSH
84927: LD_VAR 0 3
84931: PPUSH
84932: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84936: LD_INT 35
84938: PPUSH
84939: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
84943: LD_VAR 0 1
84947: PPUSH
84948: LD_VAR 0 2
84952: PPUSH
84953: LD_VAR 0 3
84957: PPUSH
84958: CALL 58089 0 3
84962: NOT
84963: IFFALSE 84976
84965: PUSH
84966: LD_VAR 0 1
84970: PPUSH
84971: CALL_OW 314
84975: AND
84976: IFFALSE 84980
// exit ;
84978: GO 85121
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
84980: LD_VAR 0 2
84984: PPUSH
84985: LD_VAR 0 3
84989: PPUSH
84990: CALL_OW 428
84994: PUSH
84995: LD_VAR 0 1
84999: EQUAL
85000: IFFALSE 85014
85002: PUSH
85003: LD_VAR 0 1
85007: PPUSH
85008: CALL_OW 314
85012: NOT
85013: AND
85014: IFFALSE 84936
// PlaySoundXY ( x , y , PlantMine ) ;
85016: LD_VAR 0 2
85020: PPUSH
85021: LD_VAR 0 3
85025: PPUSH
85026: LD_STRING PlantMine
85028: PPUSH
85029: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85033: LD_VAR 0 2
85037: PPUSH
85038: LD_VAR 0 3
85042: PPUSH
85043: LD_VAR 0 1
85047: PPUSH
85048: CALL_OW 255
85052: PPUSH
85053: LD_INT 0
85055: PPUSH
85056: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85060: LD_ADDR_EXP 117
85064: PUSH
85065: LD_EXP 117
85069: PPUSH
85070: LD_VAR 0 5
85074: PUSH
85075: LD_EXP 117
85079: PUSH
85080: LD_VAR 0 5
85084: ARRAY
85085: PUSH
85086: LD_INT 1
85088: PLUS
85089: PUSH
85090: EMPTY
85091: LIST
85092: LIST
85093: PPUSH
85094: LD_VAR 0 2
85098: PUSH
85099: LD_VAR 0 3
85103: PUSH
85104: EMPTY
85105: LIST
85106: LIST
85107: PPUSH
85108: CALL 26260 0 3
85112: ST_TO_ADDR
// result := true ;
85113: LD_ADDR_VAR 0 4
85117: PUSH
85118: LD_INT 1
85120: ST_TO_ADDR
// end ;
85121: LD_VAR 0 4
85125: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85126: LD_INT 0
85128: PPUSH
85129: PPUSH
85130: PPUSH
// if not unit in minersList then
85131: LD_VAR 0 1
85135: PUSH
85136: LD_EXP 116
85140: IN
85141: NOT
85142: IFFALSE 85146
// exit ;
85144: GO 85540
// index := GetElementIndex ( minersList , unit ) ;
85146: LD_ADDR_VAR 0 6
85150: PUSH
85151: LD_EXP 116
85155: PPUSH
85156: LD_VAR 0 1
85160: PPUSH
85161: CALL 26043 0 2
85165: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
85166: LD_ADDR_VAR 0 5
85170: PUSH
85171: DOUBLE
85172: LD_EXP 117
85176: PUSH
85177: LD_VAR 0 6
85181: ARRAY
85182: INC
85183: ST_TO_ADDR
85184: LD_INT 1
85186: PUSH
85187: FOR_DOWNTO
85188: IFFALSE 85351
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
85190: LD_EXP 117
85194: PUSH
85195: LD_VAR 0 6
85199: ARRAY
85200: PUSH
85201: LD_VAR 0 5
85205: ARRAY
85206: PUSH
85207: LD_INT 1
85209: ARRAY
85210: PUSH
85211: LD_VAR 0 2
85215: EQUAL
85216: IFFALSE 85246
85218: PUSH
85219: LD_EXP 117
85223: PUSH
85224: LD_VAR 0 6
85228: ARRAY
85229: PUSH
85230: LD_VAR 0 5
85234: ARRAY
85235: PUSH
85236: LD_INT 2
85238: ARRAY
85239: PUSH
85240: LD_VAR 0 3
85244: EQUAL
85245: AND
85246: IFFALSE 85349
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85248: LD_EXP 117
85252: PUSH
85253: LD_VAR 0 6
85257: ARRAY
85258: PUSH
85259: LD_VAR 0 5
85263: ARRAY
85264: PUSH
85265: LD_INT 1
85267: ARRAY
85268: PPUSH
85269: LD_EXP 117
85273: PUSH
85274: LD_VAR 0 6
85278: ARRAY
85279: PUSH
85280: LD_VAR 0 5
85284: ARRAY
85285: PUSH
85286: LD_INT 2
85288: ARRAY
85289: PPUSH
85290: LD_VAR 0 1
85294: PPUSH
85295: CALL_OW 255
85299: PPUSH
85300: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85304: LD_ADDR_EXP 117
85308: PUSH
85309: LD_EXP 117
85313: PPUSH
85314: LD_VAR 0 6
85318: PPUSH
85319: LD_EXP 117
85323: PUSH
85324: LD_VAR 0 6
85328: ARRAY
85329: PPUSH
85330: LD_VAR 0 5
85334: PPUSH
85335: CALL_OW 3
85339: PPUSH
85340: CALL_OW 1
85344: ST_TO_ADDR
// exit ;
85345: POP
85346: POP
85347: GO 85540
// end ; end ;
85349: GO 85187
85351: POP
85352: POP
// for i := minerMinesList [ index ] downto 1 do
85353: LD_ADDR_VAR 0 5
85357: PUSH
85358: DOUBLE
85359: LD_EXP 117
85363: PUSH
85364: LD_VAR 0 6
85368: ARRAY
85369: INC
85370: ST_TO_ADDR
85371: LD_INT 1
85373: PUSH
85374: FOR_DOWNTO
85375: IFFALSE 85538
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
85377: LD_EXP 117
85381: PUSH
85382: LD_VAR 0 6
85386: ARRAY
85387: PUSH
85388: LD_VAR 0 5
85392: ARRAY
85393: PUSH
85394: LD_INT 1
85396: ARRAY
85397: PPUSH
85398: LD_EXP 117
85402: PUSH
85403: LD_VAR 0 6
85407: ARRAY
85408: PUSH
85409: LD_VAR 0 5
85413: ARRAY
85414: PUSH
85415: LD_INT 2
85417: ARRAY
85418: PPUSH
85419: LD_VAR 0 2
85423: PPUSH
85424: LD_VAR 0 3
85428: PPUSH
85429: CALL_OW 298
85433: PUSH
85434: LD_INT 6
85436: LESS
85437: IFFALSE 85536
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85439: LD_EXP 117
85443: PUSH
85444: LD_VAR 0 6
85448: ARRAY
85449: PUSH
85450: LD_VAR 0 5
85454: ARRAY
85455: PUSH
85456: LD_INT 1
85458: ARRAY
85459: PPUSH
85460: LD_EXP 117
85464: PUSH
85465: LD_VAR 0 6
85469: ARRAY
85470: PUSH
85471: LD_VAR 0 5
85475: ARRAY
85476: PUSH
85477: LD_INT 2
85479: ARRAY
85480: PPUSH
85481: LD_VAR 0 1
85485: PPUSH
85486: CALL_OW 255
85490: PPUSH
85491: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85495: LD_ADDR_EXP 117
85499: PUSH
85500: LD_EXP 117
85504: PPUSH
85505: LD_VAR 0 6
85509: PPUSH
85510: LD_EXP 117
85514: PUSH
85515: LD_VAR 0 6
85519: ARRAY
85520: PPUSH
85521: LD_VAR 0 5
85525: PPUSH
85526: CALL_OW 3
85530: PPUSH
85531: CALL_OW 1
85535: ST_TO_ADDR
// end ; end ;
85536: GO 85374
85538: POP
85539: POP
// end ;
85540: LD_VAR 0 4
85544: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
85545: LD_INT 0
85547: PPUSH
85548: PPUSH
85549: PPUSH
85550: PPUSH
85551: PPUSH
85552: PPUSH
85553: PPUSH
85554: PPUSH
85555: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
85556: LD_VAR 0 1
85560: PPUSH
85561: CALL_OW 264
85565: PUSH
85566: LD_INT 81
85568: EQUAL
85569: NOT
85570: IFTRUE 85585
85572: PUSH
85573: LD_VAR 0 1
85577: PUSH
85578: LD_EXP 116
85582: IN
85583: NOT
85584: OR
85585: IFFALSE 85589
// exit ;
85587: GO 85915
// index := GetElementIndex ( minersList , unit ) ;
85589: LD_ADDR_VAR 0 6
85593: PUSH
85594: LD_EXP 116
85598: PPUSH
85599: LD_VAR 0 1
85603: PPUSH
85604: CALL 26043 0 2
85608: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
85609: LD_ADDR_VAR 0 8
85613: PUSH
85614: LD_EXP 118
85618: PUSH
85619: LD_EXP 117
85623: PUSH
85624: LD_VAR 0 6
85628: ARRAY
85629: MINUS
85630: ST_TO_ADDR
// if not minesFreeAmount then
85631: LD_VAR 0 8
85635: NOT
85636: IFFALSE 85640
// exit ;
85638: GO 85915
// tmp := [ ] ;
85640: LD_ADDR_VAR 0 7
85644: PUSH
85645: EMPTY
85646: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
85647: LD_ADDR_VAR 0 5
85651: PUSH
85652: DOUBLE
85653: LD_INT 1
85655: DEC
85656: ST_TO_ADDR
85657: LD_VAR 0 8
85661: PUSH
85662: FOR_TO
85663: IFFALSE 85862
// begin _d := rand ( 0 , 5 ) ;
85665: LD_ADDR_VAR 0 11
85669: PUSH
85670: LD_INT 0
85672: PPUSH
85673: LD_INT 5
85675: PPUSH
85676: CALL_OW 12
85680: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
85681: LD_ADDR_VAR 0 12
85685: PUSH
85686: LD_INT 2
85688: PPUSH
85689: LD_INT 6
85691: PPUSH
85692: CALL_OW 12
85696: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
85697: LD_ADDR_VAR 0 9
85701: PUSH
85702: LD_VAR 0 2
85706: PPUSH
85707: LD_VAR 0 11
85711: PPUSH
85712: LD_VAR 0 12
85716: PPUSH
85717: CALL_OW 272
85721: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
85722: LD_ADDR_VAR 0 10
85726: PUSH
85727: LD_VAR 0 3
85731: PPUSH
85732: LD_VAR 0 11
85736: PPUSH
85737: LD_VAR 0 12
85741: PPUSH
85742: CALL_OW 273
85746: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
85747: LD_VAR 0 9
85751: PPUSH
85752: LD_VAR 0 10
85756: PPUSH
85757: CALL_OW 488
85761: IFFALSE 85785
85763: PUSH
85764: LD_VAR 0 9
85768: PUSH
85769: LD_VAR 0 10
85773: PUSH
85774: EMPTY
85775: LIST
85776: LIST
85777: PUSH
85778: LD_VAR 0 7
85782: IN
85783: NOT
85784: AND
85785: IFFALSE 85804
85787: PUSH
85788: LD_VAR 0 9
85792: PPUSH
85793: LD_VAR 0 10
85797: PPUSH
85798: CALL_OW 458
85802: NOT
85803: AND
85804: IFFALSE 85846
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
85806: LD_ADDR_VAR 0 7
85810: PUSH
85811: LD_VAR 0 7
85815: PPUSH
85816: LD_VAR 0 7
85820: PUSH
85821: LD_INT 1
85823: PLUS
85824: PPUSH
85825: LD_VAR 0 9
85829: PUSH
85830: LD_VAR 0 10
85834: PUSH
85835: EMPTY
85836: LIST
85837: LIST
85838: PPUSH
85839: CALL_OW 1
85843: ST_TO_ADDR
85844: GO 85860
// i := i - 1 ;
85846: LD_ADDR_VAR 0 5
85850: PUSH
85851: LD_VAR 0 5
85855: PUSH
85856: LD_INT 1
85858: MINUS
85859: ST_TO_ADDR
// end ;
85860: GO 85662
85862: POP
85863: POP
// for i in tmp do
85864: LD_ADDR_VAR 0 5
85868: PUSH
85869: LD_VAR 0 7
85873: PUSH
85874: FOR_IN
85875: IFFALSE 85913
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
85877: LD_VAR 0 1
85881: PPUSH
85882: LD_VAR 0 5
85886: PUSH
85887: LD_INT 1
85889: ARRAY
85890: PPUSH
85891: LD_VAR 0 5
85895: PUSH
85896: LD_INT 2
85898: ARRAY
85899: PPUSH
85900: CALL 84847 0 3
85904: NOT
85905: IFFALSE 85911
// exit ;
85907: POP
85908: POP
85909: GO 85915
85911: GO 85874
85913: POP
85914: POP
// end ;
85915: LD_VAR 0 4
85919: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
85920: LD_INT 0
85922: PPUSH
85923: PPUSH
85924: PPUSH
85925: PPUSH
85926: PPUSH
85927: PPUSH
85928: PPUSH
85929: PPUSH
85930: PPUSH
// if GetClass ( unit ) <> class_sniper then
85931: LD_VAR 0 1
85935: PPUSH
85936: CALL_OW 257
85940: PUSH
85941: LD_INT 5
85943: NONEQUAL
85944: IFFALSE 85948
// exit ;
85946: GO 86418
// dist := 8 ;
85948: LD_ADDR_VAR 0 5
85952: PUSH
85953: LD_INT 8
85955: ST_TO_ADDR
// viewRange := 12 ;
85956: LD_ADDR_VAR 0 8
85960: PUSH
85961: LD_INT 12
85963: ST_TO_ADDR
// side := GetSide ( unit ) ;
85964: LD_ADDR_VAR 0 6
85968: PUSH
85969: LD_VAR 0 1
85973: PPUSH
85974: CALL_OW 255
85978: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
85979: LD_INT 61
85981: PPUSH
85982: LD_VAR 0 6
85986: PPUSH
85987: CALL_OW 321
85991: PUSH
85992: LD_INT 2
85994: EQUAL
85995: IFFALSE 86005
// viewRange := 16 ;
85997: LD_ADDR_VAR 0 8
86001: PUSH
86002: LD_INT 16
86004: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86005: LD_VAR 0 1
86009: PPUSH
86010: LD_VAR 0 2
86014: PPUSH
86015: LD_VAR 0 3
86019: PPUSH
86020: CALL_OW 297
86024: PUSH
86025: LD_VAR 0 5
86029: GREATER
86030: IFFALSE 86109
// begin ComMoveXY ( unit , x , y ) ;
86032: LD_VAR 0 1
86036: PPUSH
86037: LD_VAR 0 2
86041: PPUSH
86042: LD_VAR 0 3
86046: PPUSH
86047: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86051: LD_INT 35
86053: PPUSH
86054: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86058: LD_VAR 0 1
86062: PPUSH
86063: LD_VAR 0 2
86067: PPUSH
86068: LD_VAR 0 3
86072: PPUSH
86073: CALL 58089 0 3
86077: NOT
86078: IFFALSE 86082
// exit ;
86080: GO 86418
// until GetDistUnitXY ( unit , x , y ) < dist ;
86082: LD_VAR 0 1
86086: PPUSH
86087: LD_VAR 0 2
86091: PPUSH
86092: LD_VAR 0 3
86096: PPUSH
86097: CALL_OW 297
86101: PUSH
86102: LD_VAR 0 5
86106: LESS
86107: IFFALSE 86051
// end ; ComTurnXY ( unit , x , y ) ;
86109: LD_VAR 0 1
86113: PPUSH
86114: LD_VAR 0 2
86118: PPUSH
86119: LD_VAR 0 3
86123: PPUSH
86124: CALL_OW 118
// repeat if Multiplayer then
86128: LD_OWVAR 4
86132: IFFALSE 86143
// wait ( 35 ) else
86134: LD_INT 35
86136: PPUSH
86137: CALL_OW 67
86141: GO 86150
// wait ( 5 ) ;
86143: LD_INT 5
86145: PPUSH
86146: CALL_OW 67
// _d := GetDir ( unit ) ;
86150: LD_ADDR_VAR 0 11
86154: PUSH
86155: LD_VAR 0 1
86159: PPUSH
86160: CALL_OW 254
86164: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
86165: LD_ADDR_VAR 0 7
86169: PUSH
86170: LD_VAR 0 1
86174: PPUSH
86175: CALL_OW 250
86179: PPUSH
86180: LD_VAR 0 1
86184: PPUSH
86185: CALL_OW 251
86189: PPUSH
86190: LD_VAR 0 2
86194: PPUSH
86195: LD_VAR 0 3
86199: PPUSH
86200: CALL 60725 0 4
86204: ST_TO_ADDR
// until dir = _d ;
86205: LD_VAR 0 7
86209: PUSH
86210: LD_VAR 0 11
86214: EQUAL
86215: IFFALSE 86128
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
86217: LD_ADDR_VAR 0 9
86221: PUSH
86222: LD_VAR 0 1
86226: PPUSH
86227: CALL_OW 250
86231: PPUSH
86232: LD_VAR 0 7
86236: PPUSH
86237: LD_VAR 0 5
86241: PPUSH
86242: CALL_OW 272
86246: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
86247: LD_ADDR_VAR 0 10
86251: PUSH
86252: LD_VAR 0 1
86256: PPUSH
86257: CALL_OW 251
86261: PPUSH
86262: LD_VAR 0 7
86266: PPUSH
86267: LD_VAR 0 5
86271: PPUSH
86272: CALL_OW 273
86276: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
86277: LD_VAR 0 9
86281: PPUSH
86282: LD_VAR 0 10
86286: PPUSH
86287: CALL_OW 488
86291: NOT
86292: IFFALSE 86296
// exit ;
86294: GO 86418
// ComAnimCustom ( unit , 1 ) ;
86296: LD_VAR 0 1
86300: PPUSH
86301: LD_INT 1
86303: PPUSH
86304: CALL_OW 592
// p := 0 ;
86308: LD_ADDR_VAR 0 12
86312: PUSH
86313: LD_INT 0
86315: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
86316: LD_VAR 0 9
86320: PPUSH
86321: LD_VAR 0 10
86325: PPUSH
86326: LD_VAR 0 6
86330: PPUSH
86331: LD_VAR 0 8
86335: PPUSH
86336: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
86340: LD_INT 35
86342: PPUSH
86343: CALL_OW 67
// p := Inc ( p ) ;
86347: LD_ADDR_VAR 0 12
86351: PUSH
86352: LD_VAR 0 12
86356: PPUSH
86357: CALL 60681 0 1
86361: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
86362: LD_VAR 0 12
86366: PUSH
86367: LD_INT 3
86369: EQUAL
86370: IFTRUE 86384
86372: PUSH
86373: LD_VAR 0 1
86377: PPUSH
86378: CALL_OW 302
86382: NOT
86383: OR
86384: IFTRUE 86397
86386: PUSH
86387: LD_VAR 0 1
86391: PPUSH
86392: CALL_OW 301
86396: OR
86397: IFFALSE 86340
// RemoveSeeing ( _x , _y , side ) ;
86399: LD_VAR 0 9
86403: PPUSH
86404: LD_VAR 0 10
86408: PPUSH
86409: LD_VAR 0 6
86413: PPUSH
86414: CALL_OW 331
// end ;
86418: LD_VAR 0 4
86422: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
86423: LD_INT 0
86425: PPUSH
86426: PPUSH
86427: PPUSH
86428: PPUSH
86429: PPUSH
86430: PPUSH
86431: PPUSH
86432: PPUSH
86433: PPUSH
86434: PPUSH
86435: PPUSH
// if not unit then
86436: LD_VAR 0 1
86440: NOT
86441: IFFALSE 86445
// exit ;
86443: GO 86716
// side := GetSide ( unit ) ;
86445: LD_ADDR_VAR 0 3
86449: PUSH
86450: LD_VAR 0 1
86454: PPUSH
86455: CALL_OW 255
86459: ST_TO_ADDR
// x := GetX ( unit ) ;
86460: LD_ADDR_VAR 0 5
86464: PUSH
86465: LD_VAR 0 1
86469: PPUSH
86470: CALL_OW 250
86474: ST_TO_ADDR
// y := GetY ( unit ) ;
86475: LD_ADDR_VAR 0 6
86479: PUSH
86480: LD_VAR 0 1
86484: PPUSH
86485: CALL_OW 251
86489: ST_TO_ADDR
// r := 8 ;
86490: LD_ADDR_VAR 0 4
86494: PUSH
86495: LD_INT 8
86497: ST_TO_ADDR
// if x - r < 0 then
86498: LD_VAR 0 5
86502: PUSH
86503: LD_VAR 0 4
86507: MINUS
86508: PUSH
86509: LD_INT 0
86511: LESS
86512: IFFALSE 86524
// min_x := 0 else
86514: LD_ADDR_VAR 0 7
86518: PUSH
86519: LD_INT 0
86521: ST_TO_ADDR
86522: GO 86540
// min_x := x - r ;
86524: LD_ADDR_VAR 0 7
86528: PUSH
86529: LD_VAR 0 5
86533: PUSH
86534: LD_VAR 0 4
86538: MINUS
86539: ST_TO_ADDR
// if y - r < 0 then
86540: LD_VAR 0 6
86544: PUSH
86545: LD_VAR 0 4
86549: MINUS
86550: PUSH
86551: LD_INT 0
86553: LESS
86554: IFFALSE 86566
// min_y := 0 else
86556: LD_ADDR_VAR 0 8
86560: PUSH
86561: LD_INT 0
86563: ST_TO_ADDR
86564: GO 86582
// min_y := y - r ;
86566: LD_ADDR_VAR 0 8
86570: PUSH
86571: LD_VAR 0 6
86575: PUSH
86576: LD_VAR 0 4
86580: MINUS
86581: ST_TO_ADDR
// max_x := x + r ;
86582: LD_ADDR_VAR 0 9
86586: PUSH
86587: LD_VAR 0 5
86591: PUSH
86592: LD_VAR 0 4
86596: PLUS
86597: ST_TO_ADDR
// max_y := y + r ;
86598: LD_ADDR_VAR 0 10
86602: PUSH
86603: LD_VAR 0 6
86607: PUSH
86608: LD_VAR 0 4
86612: PLUS
86613: ST_TO_ADDR
// for _x = min_x to max_x do
86614: LD_ADDR_VAR 0 11
86618: PUSH
86619: DOUBLE
86620: LD_VAR 0 7
86624: DEC
86625: ST_TO_ADDR
86626: LD_VAR 0 9
86630: PUSH
86631: FOR_TO
86632: IFFALSE 86714
// for _y = min_y to max_y do
86634: LD_ADDR_VAR 0 12
86638: PUSH
86639: DOUBLE
86640: LD_VAR 0 8
86644: DEC
86645: ST_TO_ADDR
86646: LD_VAR 0 10
86650: PUSH
86651: FOR_TO
86652: IFFALSE 86710
// begin if not ValidHex ( _x , _y ) then
86654: LD_VAR 0 11
86658: PPUSH
86659: LD_VAR 0 12
86663: PPUSH
86664: CALL_OW 488
86668: NOT
86669: IFFALSE 86673
// continue ;
86671: GO 86651
// if MineAtPos ( _x , _y ) then
86673: LD_VAR 0 11
86677: PPUSH
86678: LD_VAR 0 12
86682: PPUSH
86683: CALL_OW 458
86687: IFFALSE 86708
// ViewMineAtPos ( _x , _y , side ) ;
86689: LD_VAR 0 11
86693: PPUSH
86694: LD_VAR 0 12
86698: PPUSH
86699: LD_VAR 0 3
86703: PPUSH
86704: CALL_OW 457
// end ;
86708: GO 86651
86710: POP
86711: POP
86712: GO 86631
86714: POP
86715: POP
// end ;
86716: LD_VAR 0 2
86720: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
86721: LD_INT 0
86723: PPUSH
86724: PPUSH
86725: PPUSH
86726: PPUSH
86727: PPUSH
86728: PPUSH
// if not units then
86729: LD_VAR 0 1
86733: NOT
86734: IFFALSE 86738
// exit ;
86736: GO 87168
// scaners := [ ] ;
86738: LD_ADDR_VAR 0 6
86742: PUSH
86743: EMPTY
86744: ST_TO_ADDR
// for i in units do
86745: LD_ADDR_VAR 0 3
86749: PUSH
86750: LD_VAR 0 1
86754: PUSH
86755: FOR_IN
86756: IFFALSE 86913
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
86758: LD_VAR 0 3
86762: PPUSH
86763: CALL_OW 264
86767: PUSH
86768: LD_INT 11
86770: NONEQUAL
86771: IFTRUE 86785
86773: PUSH
86774: LD_VAR 0 3
86778: PPUSH
86779: CALL_OW 302
86783: NOT
86784: OR
86785: IFTRUE 86802
86787: PUSH
86788: LD_VAR 0 3
86792: PPUSH
86793: CALL_OW 110
86797: PUSH
86798: LD_INT 502
86800: EQUAL
86801: OR
86802: IFFALSE 86806
// continue ;
86804: GO 86755
// ComStop ( i ) ;
86806: LD_VAR 0 3
86810: PPUSH
86811: CALL_OW 141
// x := GetX ( i ) ;
86815: LD_ADDR_VAR 0 4
86819: PUSH
86820: LD_VAR 0 3
86824: PPUSH
86825: CALL_OW 250
86829: ST_TO_ADDR
// y := GetY ( i ) ;
86830: LD_ADDR_VAR 0 5
86834: PUSH
86835: LD_VAR 0 3
86839: PPUSH
86840: CALL_OW 251
86844: ST_TO_ADDR
// if GetSide ( i ) = your_side then
86845: LD_VAR 0 3
86849: PPUSH
86850: CALL_OW 255
86854: PUSH
86855: LD_OWVAR 2
86859: EQUAL
86860: IFFALSE 86879
// PlaySoundXY ( x , y , mineDetector ) ;
86862: LD_VAR 0 4
86866: PPUSH
86867: LD_VAR 0 5
86871: PPUSH
86872: LD_STRING mineDetector
86874: PPUSH
86875: CALL_OW 366
// scaners := Join ( scaners , i ) ;
86879: LD_ADDR_VAR 0 6
86883: PUSH
86884: LD_VAR 0 6
86888: PPUSH
86889: LD_VAR 0 3
86893: PPUSH
86894: CALL 59308 0 2
86898: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
86899: LD_VAR 0 3
86903: PPUSH
86904: LD_INT 502
86906: PPUSH
86907: CALL_OW 109
// end ;
86911: GO 86755
86913: POP
86914: POP
// if not scaners then
86915: LD_VAR 0 6
86919: NOT
86920: IFFALSE 86924
// exit ;
86922: GO 87168
// wait ( 3 ) ;
86924: LD_INT 3
86926: PPUSH
86927: CALL_OW 67
// timer := 6 ;
86931: LD_ADDR_VAR 0 7
86935: PUSH
86936: LD_INT 6
86938: ST_TO_ADDR
// repeat for i in scaners do
86939: LD_ADDR_VAR 0 3
86943: PUSH
86944: LD_VAR 0 6
86948: PUSH
86949: FOR_IN
86950: IFFALSE 87066
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
86952: LD_VAR 0 3
86956: PPUSH
86957: CALL_OW 302
86961: NOT
86962: IFTRUE 86975
86964: PUSH
86965: LD_VAR 0 3
86969: PPUSH
86970: CALL_OW 314
86974: OR
86975: IFTRUE 87006
86977: PUSH
86978: LD_VAR 0 3
86982: PPUSH
86983: CALL_OW 263
86987: PUSH
86988: LD_INT 1
86990: EQUAL
86991: IFFALSE 87005
86993: PUSH
86994: LD_VAR 0 3
86998: PPUSH
86999: CALL_OW 311
87003: NOT
87004: AND
87005: OR
87006: IFFALSE 87050
// begin SetUnitDisplayNumber ( i , 0 ) ;
87008: LD_VAR 0 3
87012: PPUSH
87013: LD_INT 0
87015: PPUSH
87016: CALL_OW 505
// SetTag ( i , 0 ) ;
87020: LD_VAR 0 3
87024: PPUSH
87025: LD_INT 0
87027: PPUSH
87028: CALL_OW 109
// scaners := scaners diff i ;
87032: LD_ADDR_VAR 0 6
87036: PUSH
87037: LD_VAR 0 6
87041: PUSH
87042: LD_VAR 0 3
87046: DIFF
87047: ST_TO_ADDR
// continue ;
87048: GO 86949
// end ; SetUnitDisplayNumber ( i , timer ) ;
87050: LD_VAR 0 3
87054: PPUSH
87055: LD_VAR 0 7
87059: PPUSH
87060: CALL_OW 505
// end ;
87064: GO 86949
87066: POP
87067: POP
// if not scaners then
87068: LD_VAR 0 6
87072: NOT
87073: IFFALSE 87077
// exit ;
87075: GO 87168
// timer := Dec ( timer ) ;
87077: LD_ADDR_VAR 0 7
87081: PUSH
87082: LD_VAR 0 7
87086: PPUSH
87087: CALL 60703 0 1
87091: ST_TO_ADDR
// wait ( 0 0$1 ) ;
87092: LD_INT 35
87094: PPUSH
87095: CALL_OW 67
// until timer = 0 ;
87099: LD_VAR 0 7
87103: PUSH
87104: LD_INT 0
87106: EQUAL
87107: IFFALSE 86939
// if not scaners then
87109: LD_VAR 0 6
87113: NOT
87114: IFFALSE 87118
// exit ;
87116: GO 87168
// for i in scaners do
87118: LD_ADDR_VAR 0 3
87122: PUSH
87123: LD_VAR 0 6
87127: PUSH
87128: FOR_IN
87129: IFFALSE 87166
// begin SetUnitDisplayNumber ( i , 0 ) ;
87131: LD_VAR 0 3
87135: PPUSH
87136: LD_INT 0
87138: PPUSH
87139: CALL_OW 505
// SetTag ( i , 0 ) ;
87143: LD_VAR 0 3
87147: PPUSH
87148: LD_INT 0
87150: PPUSH
87151: CALL_OW 109
// RevealDetectorMine ( i ) ;
87155: LD_VAR 0 3
87159: PPUSH
87160: CALL 86423 0 1
// end ;
87164: GO 87128
87166: POP
87167: POP
// end ;
87168: LD_VAR 0 2
87172: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
87173: LD_INT 0
87175: PPUSH
// if p1 = mine_detector_mode then
87176: LD_VAR 0 2
87180: PUSH
87181: LD_INT 103
87183: EQUAL
87184: IFFALSE 87195
// DetectMine ( units ) ;
87186: LD_VAR 0 1
87190: PPUSH
87191: CALL 86721 0 1
// end ;
87195: LD_VAR 0 7
87199: RET
