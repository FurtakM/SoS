// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 26 0 0
// PrepareArabian ;
   8: CALL 50 0 0
// if debug then
  12: LD_EXP 1
  16: IFFALSE 25
// FogOff ( 2 ) ;
  18: LD_INT 2
  20: PPUSH
  21: CALL_OW 344
// end ;
  25: END
// export debug , prefix ; function Init ; begin
  26: LD_INT 0
  28: PPUSH
// debug := true ;
  29: LD_ADDR_EXP 1
  33: PUSH
  34: LD_INT 1
  36: ST_TO_ADDR
// prefix := 09_ ;
  37: LD_ADDR_EXP 2
  41: PUSH
  42: LD_STRING 09_
  44: ST_TO_ADDR
// end ; end_of_file
  45: LD_VAR 0 1
  49: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp ; begin
  50: LD_INT 0
  52: PPUSH
  53: PPUSH
  54: PPUSH
// uc_side := 2 ;
  55: LD_ADDR_OWVAR 20
  59: PUSH
  60: LD_INT 2
  62: ST_TO_ADDR
// uc_nation := nation_arabian ;
  63: LD_ADDR_OWVAR 21
  67: PUSH
  68: LD_INT 2
  70: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING Heike
  78: PPUSH
  79: LD_EXP 1
  83: NOT
  84: PPUSH
  85: LD_EXP 2
  89: PPUSH
  90: CALL 2089 0 3
  94: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
  95: LD_INT 14
  97: PPUSH
  98: LD_INT 3
 100: PPUSH
 101: LD_INT 1
 103: PPUSH
 104: LD_INT 27
 106: PPUSH
 107: LD_INT 100
 109: PPUSH
 110: CALL 6929 0 5
// heikeVehicle := CreateVehicle ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: CALL_OW 45
 123: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 124: LD_EXP 5
 128: PPUSH
 129: LD_INT 4
 131: PPUSH
 132: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 136: LD_EXP 5
 140: PPUSH
 141: LD_INT 118
 143: PPUSH
 144: LD_INT 37
 146: PPUSH
 147: LD_INT 0
 149: PPUSH
 150: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 154: LD_EXP 3
 158: PPUSH
 159: LD_INT 1
 161: PPUSH
 162: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 166: LD_EXP 3
 170: PPUSH
 171: LD_EXP 5
 175: PPUSH
 176: CALL_OW 52
// uc_side := 5 ;
 180: LD_ADDR_OWVAR 20
 184: PUSH
 185: LD_INT 5
 187: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 188: LD_ADDR_EXP 4
 192: PUSH
 193: LD_STRING Omar
 195: PPUSH
 196: CALL_OW 25
 200: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 201: LD_INT 14
 203: PPUSH
 204: LD_INT 3
 206: PPUSH
 207: LD_INT 1
 209: PPUSH
 210: LD_INT 27
 212: PPUSH
 213: LD_INT 100
 215: PPUSH
 216: CALL 6929 0 5
// omarVehicle := CreateVehicle ;
 220: LD_ADDR_EXP 6
 224: PUSH
 225: CALL_OW 45
 229: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 230: LD_EXP 6
 234: PPUSH
 235: LD_INT 0
 237: PPUSH
 238: CALL_OW 233
// end ; end_of_file end_of_file end_of_file end_of_file
 242: LD_VAR 0 1
 246: RET
// export function Action ; var i , mech , veh , amTroops ; begin
 247: LD_INT 0
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
 253: PPUSH
// InGameOn ;
 254: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
 258: LD_INT 84
 260: PPUSH
 261: LD_INT 28
 263: PPUSH
 264: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
 268: LD_INT 2
 270: PPUSH
 271: LD_INT 9
 273: PPUSH
 274: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
 278: LD_EXP 3
 282: PPUSH
 283: LD_INT 90
 285: PPUSH
 286: LD_INT 30
 288: PPUSH
 289: CALL_OW 111
// uc_side := 1 ;
 293: LD_ADDR_OWVAR 20
 297: PUSH
 298: LD_INT 1
 300: ST_TO_ADDR
// uc_nation := nation_american ;
 301: LD_ADDR_OWVAR 21
 305: PUSH
 306: LD_INT 1
 308: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
 309: LD_INT 3
 311: PPUSH
 312: LD_INT 1
 314: PPUSH
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 9
 320: PPUSH
 321: LD_INT 66
 323: PPUSH
 324: CALL 6929 0 5
// veh := CreateVehicle ;
 328: LD_ADDR_VAR 0 4
 332: PUSH
 333: CALL_OW 45
 337: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 338: LD_VAR 0 4
 342: PPUSH
 343: LD_INT 1
 345: PPUSH
 346: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
 350: LD_VAR 0 4
 354: PPUSH
 355: LD_INT 80
 357: PPUSH
 358: LD_INT 27
 360: PPUSH
 361: LD_INT 0
 363: PPUSH
 364: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
 368: LD_INT 1
 370: PPUSH
 371: LD_INT 8
 373: PPUSH
 374: CALL_OW 383
// mech := CreateHuman ;
 378: LD_ADDR_VAR 0 3
 382: PUSH
 383: CALL_OW 44
 387: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
 388: LD_VAR 0 3
 392: PPUSH
 393: LD_VAR 0 4
 397: PPUSH
 398: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
 402: LD_INT 35
 404: PPUSH
 405: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
 409: LD_INT 90
 411: PPUSH
 412: LD_INT 30
 414: PPUSH
 415: CALL_OW 428
 419: IFFALSE 402
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
 421: LD_INT 80
 423: PPUSH
 424: LD_INT 27
 426: PPUSH
 427: LD_INT 2
 429: PPUSH
 430: LD_INT 6
 432: NEG
 433: PPUSH
 434: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
 438: LD_INT 80
 440: PPUSH
 441: LD_INT 27
 443: PPUSH
 444: CALL_OW 86
// DialogueOn ;
 448: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
 452: LD_EXP 3
 456: PPUSH
 457: LD_STRING DH-Start-1
 459: PPUSH
 460: CALL_OW 88
// DialogueOff ;
 464: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
 468: LD_EXP 3
 472: PPUSH
 473: LD_VAR 0 4
 477: PPUSH
 478: CALL_OW 115
// wait ( 0 0$1 ) ;
 482: LD_INT 35
 484: PPUSH
 485: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
 489: LD_EXP 3
 493: PPUSH
 494: CALL_OW 310
 498: PPUSH
 499: LD_INT 200
 501: PPUSH
 502: CALL_OW 234
// wait ( 0 0$0.3 ) ;
 506: LD_INT 10
 508: PPUSH
 509: CALL_OW 67
// DialogueOn ;
 513: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
 517: LD_EXP 3
 521: PPUSH
 522: LD_STRING DH-Start-2
 524: PPUSH
 525: CALL_OW 88
// DialogueOff ;
 529: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
 533: LD_EXP 3
 537: PPUSH
 538: LD_VAR 0 4
 542: PPUSH
 543: CALL_OW 115
// wait ( 0 0$0.2 ) ;
 547: LD_INT 7
 549: PPUSH
 550: CALL_OW 67
// ComCrawl ( Heike ) ;
 554: LD_EXP 3
 558: PPUSH
 559: CALL_OW 137
// wait ( 0 0$3 ) ;
 563: LD_INT 105
 565: PPUSH
 566: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
 570: LD_EXP 6
 574: PPUSH
 575: LD_INT 82
 577: PPUSH
 578: LD_INT 43
 580: PPUSH
 581: LD_INT 0
 583: PPUSH
 584: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
 588: LD_EXP 4
 592: PPUSH
 593: LD_EXP 6
 597: PPUSH
 598: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
 602: LD_EXP 4
 606: PPUSH
 607: LD_INT 79
 609: PPUSH
 610: LD_INT 32
 612: PPUSH
 613: CALL_OW 111
// wait ( 0 0$1 ) ;
 617: LD_INT 35
 619: PPUSH
 620: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
 624: LD_INT 5
 626: PPUSH
 627: LD_INT 2
 629: PPUSH
 630: CALL_OW 343
// wait ( 0 0$3 ) ;
 634: LD_INT 105
 636: PPUSH
 637: CALL_OW 67
// SetLives ( veh , 200 ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_INT 200
 648: PPUSH
 649: CALL_OW 234
// wait ( 0 0$1 ) ;
 653: LD_INT 35
 655: PPUSH
 656: CALL_OW 67
// SetLives ( mech , 10 ) ;
 660: LD_VAR 0 3
 664: PPUSH
 665: LD_INT 10
 667: PPUSH
 668: CALL_OW 234
// wait ( 0 0$2 ) ;
 672: LD_INT 70
 674: PPUSH
 675: CALL_OW 67
// ComWalk ( Heike ) ;
 679: LD_EXP 3
 683: PPUSH
 684: CALL_OW 138
// wait ( 1 ) ;
 688: LD_INT 1
 690: PPUSH
 691: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
 695: LD_EXP 3
 699: PPUSH
 700: LD_INT 81
 702: PPUSH
 703: LD_INT 25
 705: PPUSH
 706: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
 710: LD_EXP 3
 714: PPUSH
 715: LD_INT 72
 717: PPUSH
 718: LD_INT 25
 720: PPUSH
 721: CALL_OW 171
// wait ( 0 0$3 ) ;
 725: LD_INT 105
 727: PPUSH
 728: CALL_OW 67
// ComExitVehicle ( Omar ) ;
 732: LD_EXP 4
 736: PPUSH
 737: CALL_OW 121
// wait ( 1 ) ;
 741: LD_INT 1
 743: PPUSH
 744: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
 748: LD_EXP 4
 752: PPUSH
 753: LD_INT 77
 755: PPUSH
 756: LD_INT 28
 758: PPUSH
 759: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
 763: LD_EXP 4
 767: PPUSH
 768: LD_EXP 3
 772: PPUSH
 773: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
 777: LD_EXP 4
 781: PPUSH
 782: LD_STRING DO-Start-3
 784: PPUSH
 785: CALL_OW 88
// repeat wait ( 3 ) ;
 789: LD_INT 3
 791: PPUSH
 792: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
 796: LD_EXP 3
 800: PPUSH
 801: LD_INT 72
 803: PPUSH
 804: LD_INT 25
 806: PPUSH
 807: CALL_OW 307
 811: IFFALSE 789
// ComHold ( Heike ) ;
 813: LD_EXP 3
 817: PPUSH
 818: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
 822: LD_EXP 4
 826: PPUSH
 827: LD_EXP 3
 831: PPUSH
 832: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
 836: LD_EXP 3
 840: PPUSH
 841: LD_EXP 4
 845: PPUSH
 846: CALL_OW 112
// wait ( 0 0$1 ) ;
 850: LD_INT 35
 852: PPUSH
 853: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
 857: LD_EXP 3
 861: PPUSH
 862: LD_EXP 4
 866: PPUSH
 867: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
 871: LD_EXP 3
 875: PPUSH
 876: LD_STRING DH-Start-4
 878: PPUSH
 879: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
 883: LD_EXP 4
 887: PPUSH
 888: LD_STRING DO-Start-5
 890: PPUSH
 891: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
 895: LD_EXP 3
 899: PPUSH
 900: LD_STRING DH-Start-6
 902: PPUSH
 903: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
 907: LD_EXP 4
 911: PPUSH
 912: LD_STRING DO-Start-7
 914: PPUSH
 915: CALL_OW 88
// if Query ( QOmar ) = 2 then
 919: LD_STRING QOmar
 921: PPUSH
 922: CALL_OW 97
 926: PUSH
 927: LD_INT 2
 929: EQUAL
 930: IFFALSE 1218
// begin Say ( Heike , DH-QuestionN-1 ) ;
 932: LD_EXP 3
 936: PPUSH
 937: LD_STRING DH-QuestionN-1
 939: PPUSH
 940: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
 944: LD_EXP 3
 948: PPUSH
 949: LD_INT 58
 951: PPUSH
 952: LD_INT 27
 954: PPUSH
 955: CALL_OW 111
// wait ( 0 0$2 ) ;
 959: LD_INT 70
 961: PPUSH
 962: CALL_OW 67
// ChangeSideFog ( 5 , 5 ) ;
 966: LD_INT 5
 968: PPUSH
 969: LD_INT 5
 971: PPUSH
 972: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
 976: LD_INT 80
 978: PPUSH
 979: LD_INT 27
 981: PPUSH
 982: LD_INT 2
 984: PPUSH
 985: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
 989: LD_INT 58
 991: PPUSH
 992: LD_INT 27
 994: PPUSH
 995: CALL_OW 84
// repeat wait ( 3 ) ;
 999: LD_INT 3
1001: PPUSH
1002: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
1006: LD_EXP 3
1010: PPUSH
1011: LD_INT 88
1013: PPUSH
1014: LD_INT 27
1016: PPUSH
1017: CALL_OW 297
1021: IFFALSE 999
// uc_side := 1 ;
1023: LD_ADDR_OWVAR 20
1027: PUSH
1028: LD_INT 1
1030: ST_TO_ADDR
// uc_nation := nation_american ;
1031: LD_ADDR_OWVAR 21
1035: PUSH
1036: LD_INT 1
1038: ST_TO_ADDR
// amTroops := [ ] ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: EMPTY
1045: ST_TO_ADDR
// for i := 1 to 3 do
1046: LD_ADDR_VAR 0 2
1050: PUSH
1051: DOUBLE
1052: LD_INT 1
1054: DEC
1055: ST_TO_ADDR
1056: LD_INT 3
1058: PUSH
1059: FOR_TO
1060: IFFALSE 1153
// begin PrepareSoldier ( false , 10 ) ;
1062: LD_INT 0
1064: PPUSH
1065: LD_INT 10
1067: PPUSH
1068: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
1072: LD_ADDR_VAR 0 5
1076: PUSH
1077: LD_VAR 0 5
1081: PPUSH
1082: CALL_OW 44
1086: PPUSH
1087: CALL 39410 0 2
1091: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
1092: LD_VAR 0 5
1096: PUSH
1097: LD_VAR 0 2
1101: ARRAY
1102: PPUSH
1103: LD_INT 2
1105: PPUSH
1106: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
1110: LD_VAR 0 5
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PPUSH
1121: LD_INT 10
1123: PPUSH
1124: LD_INT 0
1126: PPUSH
1127: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
1131: LD_VAR 0 5
1135: PUSH
1136: LD_VAR 0 2
1140: ARRAY
1141: PPUSH
1142: LD_EXP 3
1146: PPUSH
1147: CALL_OW 115
// end ;
1151: GO 1059
1153: POP
1154: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
1155: LD_EXP 3
1159: PPUSH
1160: LD_VAR 0 5
1164: PUSH
1165: LD_INT 1
1167: ARRAY
1168: PPUSH
1169: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
1173: LD_INT 35
1175: PPUSH
1176: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
1180: LD_EXP 3
1184: PPUSH
1185: CALL_OW 301
1189: PUSH
1190: LD_EXP 3
1194: PPUSH
1195: CALL_OW 303
1199: OR
1200: IFFALSE 1173
// wait ( 0 0$2 ) ;
1202: LD_INT 70
1204: PPUSH
1205: CALL_OW 67
// YouLost ( Heike ) ;
1209: LD_STRING Heike
1211: PPUSH
1212: CALL_OW 104
// exit ;
1216: GO 2084
// end ; Say ( Heike , DH-QuestionY-1 ) ;
1218: LD_EXP 3
1222: PPUSH
1223: LD_STRING DH-QuestionY-1
1225: PPUSH
1226: CALL_OW 88
// wait ( 0 0$0.3 ) ;
1230: LD_INT 10
1232: PPUSH
1233: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
1237: LD_EXP 4
1241: PPUSH
1242: LD_STRING DO-Story-1
1244: PPUSH
1245: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
1249: LD_EXP 4
1253: PPUSH
1254: LD_STRING DO-Story-2
1256: PPUSH
1257: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
1261: LD_EXP 4
1265: PPUSH
1266: LD_STRING DO-Story-3
1268: PPUSH
1269: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
1273: LD_EXP 4
1277: PPUSH
1278: LD_STRING DO-Story-4
1280: PPUSH
1281: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
1285: LD_EXP 3
1289: PPUSH
1290: LD_STRING DH-Story-5
1292: PPUSH
1293: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
1297: LD_EXP 4
1301: PPUSH
1302: LD_STRING DO-Story-6
1304: PPUSH
1305: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
1309: LD_EXP 4
1313: PPUSH
1314: LD_STRING DO-Story-7
1316: PPUSH
1317: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
1321: LD_EXP 3
1325: PPUSH
1326: LD_INT 82
1328: PPUSH
1329: LD_INT 44
1331: PPUSH
1332: CALL_OW 111
// AddComHold ( Heike ) ;
1336: LD_EXP 3
1340: PPUSH
1341: CALL_OW 200
// wait ( 0 0$4 ) ;
1345: LD_INT 140
1347: PPUSH
1348: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
1352: LD_EXP 4
1356: PPUSH
1357: LD_INT 82
1359: PPUSH
1360: LD_INT 41
1362: PPUSH
1363: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
1367: LD_EXP 4
1371: PPUSH
1372: LD_EXP 3
1376: PPUSH
1377: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
1381: LD_INT 35
1383: PPUSH
1384: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
1388: LD_EXP 3
1392: PPUSH
1393: LD_INT 82
1395: PPUSH
1396: LD_INT 44
1398: PPUSH
1399: CALL_OW 307
1403: IFFALSE 1381
// ComTurnXY ( Heike , 81 , 47 ) ;
1405: LD_EXP 3
1409: PPUSH
1410: LD_INT 81
1412: PPUSH
1413: LD_INT 47
1415: PPUSH
1416: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
1420: LD_EXP 3
1424: PPUSH
1425: LD_STRING DH-Story-8
1427: PPUSH
1428: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
1432: LD_EXP 4
1436: PPUSH
1437: LD_STRING DO-Story-9
1439: PPUSH
1440: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
1444: LD_EXP 4
1448: PPUSH
1449: LD_STRING DO-Story-10
1451: PPUSH
1452: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
1456: LD_EXP 3
1460: PPUSH
1461: LD_EXP 4
1465: PPUSH
1466: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
1470: LD_EXP 3
1474: PPUSH
1475: LD_STRING DH-Story-11
1477: PPUSH
1478: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
1482: LD_EXP 4
1486: PPUSH
1487: LD_EXP 3
1491: PPUSH
1492: CALL_OW 112
// wait ( 0 0$0.3 ) ;
1496: LD_INT 10
1498: PPUSH
1499: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
1503: LD_EXP 4
1507: PPUSH
1508: LD_EXP 3
1512: PPUSH
1513: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
1517: LD_EXP 4
1521: PPUSH
1522: LD_STRING DO-Story-12
1524: PPUSH
1525: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
1529: LD_EXP 3
1533: PPUSH
1534: LD_STRING DH-Story-13
1536: PPUSH
1537: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
1541: LD_EXP 4
1545: PPUSH
1546: LD_STRING DO-Story-14
1548: PPUSH
1549: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
1553: LD_EXP 4
1557: PPUSH
1558: LD_STRING DO-Story-15
1560: PPUSH
1561: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
1565: LD_INT 84
1567: PPUSH
1568: LD_INT 48
1570: PPUSH
1571: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
1575: LD_EXP 3
1579: PPUSH
1580: LD_INT 84
1582: PPUSH
1583: LD_INT 48
1585: PPUSH
1586: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
1590: LD_EXP 3
1594: PPUSH
1595: LD_INT 84
1597: PPUSH
1598: LD_INT 49
1600: PPUSH
1601: CALL_OW 178
// wait ( 0 0$1 ) ;
1605: LD_INT 35
1607: PPUSH
1608: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
1612: LD_EXP 4
1616: PPUSH
1617: LD_EXP 3
1621: PPUSH
1622: CALL_OW 112
// wait ( 0 0$1 ) ;
1626: LD_INT 35
1628: PPUSH
1629: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
1633: LD_EXP 4
1637: PPUSH
1638: LD_EXP 3
1642: PPUSH
1643: CALL_OW 119
// wait ( 0 0$0.3 ) ;
1647: LD_INT 10
1649: PPUSH
1650: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
1654: LD_EXP 4
1658: PPUSH
1659: LD_STRING DO-Story-16
1661: PPUSH
1662: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
1666: LD_STRING QOmar2
1668: PPUSH
1669: CALL_OW 97
1673: PUSH
1674: LD_INT 2
1676: EQUAL
1677: IFFALSE 1972
// begin ComMoveXY ( Heike , 79 , 57 ) ;
1679: LD_EXP 3
1683: PPUSH
1684: LD_INT 79
1686: PPUSH
1687: LD_INT 57
1689: PPUSH
1690: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
1694: LD_EXP 3
1698: PPUSH
1699: LD_INT 68
1701: PPUSH
1702: LD_INT 53
1704: PPUSH
1705: CALL_OW 171
// wait ( 0 0$2 ) ;
1709: LD_INT 70
1711: PPUSH
1712: CALL_OW 67
// ChangeSideFog ( 5 , 5 ) ;
1716: LD_INT 5
1718: PPUSH
1719: LD_INT 5
1721: PPUSH
1722: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
1726: LD_INT 80
1728: PPUSH
1729: LD_INT 27
1731: PPUSH
1732: LD_INT 2
1734: PPUSH
1735: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
1739: LD_INT 68
1741: PPUSH
1742: LD_INT 53
1744: PPUSH
1745: CALL_OW 84
// repeat wait ( 3 ) ;
1749: LD_INT 3
1751: PPUSH
1752: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
1756: LD_EXP 3
1760: PPUSH
1761: LD_INT 68
1763: PPUSH
1764: LD_INT 53
1766: PPUSH
1767: CALL_OW 297
1771: PUSH
1772: LD_INT 6
1774: LESS
1775: IFFALSE 1749
// uc_side := 1 ;
1777: LD_ADDR_OWVAR 20
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// uc_nation := nation_american ;
1785: LD_ADDR_OWVAR 21
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// amTroops := [ ] ;
1793: LD_ADDR_VAR 0 5
1797: PUSH
1798: EMPTY
1799: ST_TO_ADDR
// for i := 1 to 3 do
1800: LD_ADDR_VAR 0 2
1804: PUSH
1805: DOUBLE
1806: LD_INT 1
1808: DEC
1809: ST_TO_ADDR
1810: LD_INT 3
1812: PUSH
1813: FOR_TO
1814: IFFALSE 1907
// begin PrepareSoldier ( false , 10 ) ;
1816: LD_INT 0
1818: PPUSH
1819: LD_INT 10
1821: PPUSH
1822: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: LD_VAR 0 5
1835: PPUSH
1836: CALL_OW 44
1840: PPUSH
1841: CALL 39410 0 2
1845: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
1846: LD_VAR 0 5
1850: PUSH
1851: LD_VAR 0 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 2
1859: PPUSH
1860: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
1864: LD_VAR 0 5
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PPUSH
1875: LD_INT 11
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
1885: LD_VAR 0 5
1889: PUSH
1890: LD_VAR 0 2
1894: ARRAY
1895: PPUSH
1896: LD_EXP 3
1900: PPUSH
1901: CALL_OW 115
// end ;
1905: GO 1813
1907: POP
1908: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
1909: LD_EXP 3
1913: PPUSH
1914: LD_VAR 0 5
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
1927: LD_INT 35
1929: PPUSH
1930: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
1934: LD_EXP 3
1938: PPUSH
1939: CALL_OW 301
1943: PUSH
1944: LD_EXP 3
1948: PPUSH
1949: CALL_OW 303
1953: OR
1954: IFFALSE 1927
// wait ( 0 0$2 ) ;
1956: LD_INT 70
1958: PPUSH
1959: CALL_OW 67
// YouLost ( Heike ) ;
1963: LD_STRING Heike
1965: PPUSH
1966: CALL_OW 104
// exit ;
1970: GO 2084
// end ; Say ( Omar , DO-Objective-1 ) ;
1972: LD_EXP 4
1976: PPUSH
1977: LD_STRING DO-Objective-1
1979: PPUSH
1980: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
1984: LD_EXP 3
1988: PPUSH
1989: LD_EXP 4
1993: PPUSH
1994: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
1998: LD_EXP 3
2002: PPUSH
2003: LD_STRING DH-Objective-2
2005: PPUSH
2006: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
2010: LD_EXP 4
2014: PPUSH
2015: LD_STRING DO-Objective-3
2017: PPUSH
2018: CALL_OW 88
// ChangeSideFog ( 5 , 5 ) ;
2022: LD_INT 5
2024: PPUSH
2025: LD_INT 5
2027: PPUSH
2028: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
2032: LD_INT 80
2034: PPUSH
2035: LD_INT 27
2037: PPUSH
2038: LD_INT 2
2040: PPUSH
2041: CALL_OW 331
// SetSide ( Omar , 2 ) ;
2045: LD_EXP 4
2049: PPUSH
2050: LD_INT 2
2052: PPUSH
2053: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
2057: LD_EXP 6
2061: PPUSH
2062: LD_INT 2
2064: PPUSH
2065: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
2069: LD_STRING O1
2071: PPUSH
2072: CALL_OW 337
// InGameOff ;
2076: CALL_OW 9
// SaveForQuickRestart ;
2080: CALL_OW 22
// end ; end_of_file
2084: LD_VAR 0 1
2088: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2089: LD_INT 0
2091: PPUSH
2092: PPUSH
// if exist_mode then
2093: LD_VAR 0 2
2097: IFFALSE 2122
// unit := CreateCharacter ( prefix & ident ) else
2099: LD_ADDR_VAR 0 5
2103: PUSH
2104: LD_VAR 0 3
2108: PUSH
2109: LD_VAR 0 1
2113: STR
2114: PPUSH
2115: CALL_OW 34
2119: ST_TO_ADDR
2120: GO 2137
// unit := NewCharacter ( ident ) ;
2122: LD_ADDR_VAR 0 5
2126: PUSH
2127: LD_VAR 0 1
2131: PPUSH
2132: CALL_OW 25
2136: ST_TO_ADDR
// result := unit ;
2137: LD_ADDR_VAR 0 4
2141: PUSH
2142: LD_VAR 0 5
2146: ST_TO_ADDR
// end ;
2147: LD_VAR 0 4
2151: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2152: LD_INT 0
2154: PPUSH
2155: PPUSH
// if not side or not nation then
2156: LD_VAR 0 1
2160: NOT
2161: PUSH
2162: LD_VAR 0 2
2166: NOT
2167: OR
2168: IFFALSE 2172
// exit ;
2170: GO 2940
// case nation of nation_american :
2172: LD_VAR 0 2
2176: PUSH
2177: LD_INT 1
2179: DOUBLE
2180: EQUAL
2181: IFTRUE 2185
2183: GO 2399
2185: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 35
2193: PUSH
2194: LD_INT 45
2196: PUSH
2197: LD_INT 46
2199: PUSH
2200: LD_INT 47
2202: PUSH
2203: LD_INT 82
2205: PUSH
2206: LD_INT 83
2208: PUSH
2209: LD_INT 84
2211: PUSH
2212: LD_INT 85
2214: PUSH
2215: LD_INT 86
2217: PUSH
2218: LD_INT 1
2220: PUSH
2221: LD_INT 2
2223: PUSH
2224: LD_INT 6
2226: PUSH
2227: LD_INT 15
2229: PUSH
2230: LD_INT 16
2232: PUSH
2233: LD_INT 7
2235: PUSH
2236: LD_INT 12
2238: PUSH
2239: LD_INT 13
2241: PUSH
2242: LD_INT 10
2244: PUSH
2245: LD_INT 14
2247: PUSH
2248: LD_INT 20
2250: PUSH
2251: LD_INT 21
2253: PUSH
2254: LD_INT 22
2256: PUSH
2257: LD_INT 25
2259: PUSH
2260: LD_INT 32
2262: PUSH
2263: LD_INT 27
2265: PUSH
2266: LD_INT 36
2268: PUSH
2269: LD_INT 69
2271: PUSH
2272: LD_INT 39
2274: PUSH
2275: LD_INT 34
2277: PUSH
2278: LD_INT 40
2280: PUSH
2281: LD_INT 48
2283: PUSH
2284: LD_INT 49
2286: PUSH
2287: LD_INT 50
2289: PUSH
2290: LD_INT 51
2292: PUSH
2293: LD_INT 52
2295: PUSH
2296: LD_INT 53
2298: PUSH
2299: LD_INT 54
2301: PUSH
2302: LD_INT 55
2304: PUSH
2305: LD_INT 56
2307: PUSH
2308: LD_INT 57
2310: PUSH
2311: LD_INT 58
2313: PUSH
2314: LD_INT 59
2316: PUSH
2317: LD_INT 60
2319: PUSH
2320: LD_INT 61
2322: PUSH
2323: LD_INT 62
2325: PUSH
2326: LD_INT 80
2328: PUSH
2329: LD_INT 82
2331: PUSH
2332: LD_INT 83
2334: PUSH
2335: LD_INT 84
2337: PUSH
2338: LD_INT 85
2340: PUSH
2341: LD_INT 86
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: ST_TO_ADDR
2397: GO 2864
2399: LD_INT 2
2401: DOUBLE
2402: EQUAL
2403: IFTRUE 2407
2405: GO 2633
2407: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2408: LD_ADDR_VAR 0 4
2412: PUSH
2413: LD_INT 35
2415: PUSH
2416: LD_INT 45
2418: PUSH
2419: LD_INT 46
2421: PUSH
2422: LD_INT 47
2424: PUSH
2425: LD_INT 82
2427: PUSH
2428: LD_INT 83
2430: PUSH
2431: LD_INT 84
2433: PUSH
2434: LD_INT 85
2436: PUSH
2437: LD_INT 87
2439: PUSH
2440: LD_INT 70
2442: PUSH
2443: LD_INT 1
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: LD_INT 4
2454: PUSH
2455: LD_INT 5
2457: PUSH
2458: LD_INT 6
2460: PUSH
2461: LD_INT 15
2463: PUSH
2464: LD_INT 18
2466: PUSH
2467: LD_INT 7
2469: PUSH
2470: LD_INT 17
2472: PUSH
2473: LD_INT 8
2475: PUSH
2476: LD_INT 20
2478: PUSH
2479: LD_INT 21
2481: PUSH
2482: LD_INT 22
2484: PUSH
2485: LD_INT 72
2487: PUSH
2488: LD_INT 26
2490: PUSH
2491: LD_INT 69
2493: PUSH
2494: LD_INT 39
2496: PUSH
2497: LD_INT 40
2499: PUSH
2500: LD_INT 41
2502: PUSH
2503: LD_INT 42
2505: PUSH
2506: LD_INT 43
2508: PUSH
2509: LD_INT 48
2511: PUSH
2512: LD_INT 49
2514: PUSH
2515: LD_INT 50
2517: PUSH
2518: LD_INT 51
2520: PUSH
2521: LD_INT 52
2523: PUSH
2524: LD_INT 53
2526: PUSH
2527: LD_INT 54
2529: PUSH
2530: LD_INT 55
2532: PUSH
2533: LD_INT 56
2535: PUSH
2536: LD_INT 60
2538: PUSH
2539: LD_INT 61
2541: PUSH
2542: LD_INT 62
2544: PUSH
2545: LD_INT 66
2547: PUSH
2548: LD_INT 67
2550: PUSH
2551: LD_INT 68
2553: PUSH
2554: LD_INT 81
2556: PUSH
2557: LD_INT 82
2559: PUSH
2560: LD_INT 83
2562: PUSH
2563: LD_INT 84
2565: PUSH
2566: LD_INT 85
2568: PUSH
2569: LD_INT 87
2571: PUSH
2572: LD_INT 88
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: ST_TO_ADDR
2631: GO 2864
2633: LD_INT 3
2635: DOUBLE
2636: EQUAL
2637: IFTRUE 2641
2639: GO 2863
2641: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2642: LD_ADDR_VAR 0 4
2646: PUSH
2647: LD_INT 46
2649: PUSH
2650: LD_INT 47
2652: PUSH
2653: LD_INT 1
2655: PUSH
2656: LD_INT 2
2658: PUSH
2659: LD_INT 82
2661: PUSH
2662: LD_INT 83
2664: PUSH
2665: LD_INT 84
2667: PUSH
2668: LD_INT 85
2670: PUSH
2671: LD_INT 86
2673: PUSH
2674: LD_INT 11
2676: PUSH
2677: LD_INT 9
2679: PUSH
2680: LD_INT 20
2682: PUSH
2683: LD_INT 19
2685: PUSH
2686: LD_INT 21
2688: PUSH
2689: LD_INT 24
2691: PUSH
2692: LD_INT 22
2694: PUSH
2695: LD_INT 25
2697: PUSH
2698: LD_INT 28
2700: PUSH
2701: LD_INT 29
2703: PUSH
2704: LD_INT 30
2706: PUSH
2707: LD_INT 31
2709: PUSH
2710: LD_INT 37
2712: PUSH
2713: LD_INT 38
2715: PUSH
2716: LD_INT 32
2718: PUSH
2719: LD_INT 27
2721: PUSH
2722: LD_INT 33
2724: PUSH
2725: LD_INT 69
2727: PUSH
2728: LD_INT 39
2730: PUSH
2731: LD_INT 34
2733: PUSH
2734: LD_INT 40
2736: PUSH
2737: LD_INT 71
2739: PUSH
2740: LD_INT 23
2742: PUSH
2743: LD_INT 44
2745: PUSH
2746: LD_INT 48
2748: PUSH
2749: LD_INT 49
2751: PUSH
2752: LD_INT 50
2754: PUSH
2755: LD_INT 51
2757: PUSH
2758: LD_INT 52
2760: PUSH
2761: LD_INT 53
2763: PUSH
2764: LD_INT 54
2766: PUSH
2767: LD_INT 55
2769: PUSH
2770: LD_INT 56
2772: PUSH
2773: LD_INT 57
2775: PUSH
2776: LD_INT 58
2778: PUSH
2779: LD_INT 59
2781: PUSH
2782: LD_INT 63
2784: PUSH
2785: LD_INT 64
2787: PUSH
2788: LD_INT 65
2790: PUSH
2791: LD_INT 82
2793: PUSH
2794: LD_INT 83
2796: PUSH
2797: LD_INT 84
2799: PUSH
2800: LD_INT 85
2802: PUSH
2803: LD_INT 86
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: ST_TO_ADDR
2861: GO 2864
2863: POP
// if state > - 1 and state < 3 then
2864: LD_VAR 0 3
2868: PUSH
2869: LD_INT 1
2871: NEG
2872: GREATER
2873: PUSH
2874: LD_VAR 0 3
2878: PUSH
2879: LD_INT 3
2881: LESS
2882: AND
2883: IFFALSE 2940
// for i in result do
2885: LD_ADDR_VAR 0 5
2889: PUSH
2890: LD_VAR 0 4
2894: PUSH
2895: FOR_IN
2896: IFFALSE 2938
// if GetTech ( i , side ) <> state then
2898: LD_VAR 0 5
2902: PPUSH
2903: LD_VAR 0 1
2907: PPUSH
2908: CALL_OW 321
2912: PUSH
2913: LD_VAR 0 3
2917: NONEQUAL
2918: IFFALSE 2936
// result := result diff i ;
2920: LD_ADDR_VAR 0 4
2924: PUSH
2925: LD_VAR 0 4
2929: PUSH
2930: LD_VAR 0 5
2934: DIFF
2935: ST_TO_ADDR
2936: GO 2895
2938: POP
2939: POP
// end ;
2940: LD_VAR 0 4
2944: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
2945: LD_INT 0
2947: PPUSH
2948: PPUSH
2949: PPUSH
// result := true ;
2950: LD_ADDR_VAR 0 3
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
2958: LD_ADDR_VAR 0 5
2962: PUSH
2963: LD_VAR 0 2
2967: PPUSH
2968: CALL_OW 480
2972: ST_TO_ADDR
// if not tmp then
2973: LD_VAR 0 5
2977: NOT
2978: IFFALSE 2982
// exit ;
2980: GO 3031
// for i in tmp do
2982: LD_ADDR_VAR 0 4
2986: PUSH
2987: LD_VAR 0 5
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3029
// if GetTech ( i , side ) <> state_researched then
2995: LD_VAR 0 4
2999: PPUSH
3000: LD_VAR 0 1
3004: PPUSH
3005: CALL_OW 321
3009: PUSH
3010: LD_INT 2
3012: NONEQUAL
3013: IFFALSE 3027
// begin result := false ;
3015: LD_ADDR_VAR 0 3
3019: PUSH
3020: LD_INT 0
3022: ST_TO_ADDR
// exit ;
3023: POP
3024: POP
3025: GO 3031
// end ;
3027: GO 2992
3029: POP
3030: POP
// end ;
3031: LD_VAR 0 3
3035: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3036: LD_INT 0
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3051: LD_VAR 0 1
3055: NOT
3056: PUSH
3057: LD_VAR 0 1
3061: PPUSH
3062: CALL_OW 257
3066: PUSH
3067: LD_INT 9
3069: NONEQUAL
3070: OR
3071: IFFALSE 3075
// exit ;
3073: GO 3648
// side := GetSide ( unit ) ;
3075: LD_ADDR_VAR 0 9
3079: PUSH
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 255
3089: ST_TO_ADDR
// tech_space := tech_spacanom ;
3090: LD_ADDR_VAR 0 12
3094: PUSH
3095: LD_INT 29
3097: ST_TO_ADDR
// tech_time := tech_taurad ;
3098: LD_ADDR_VAR 0 13
3102: PUSH
3103: LD_INT 28
3105: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3106: LD_ADDR_VAR 0 11
3110: PUSH
3111: LD_VAR 0 1
3115: PPUSH
3116: CALL_OW 310
3120: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3121: LD_VAR 0 11
3125: PPUSH
3126: CALL_OW 247
3130: PUSH
3131: LD_INT 2
3133: EQUAL
3134: IFFALSE 3138
// exit ;
3136: GO 3648
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3138: LD_ADDR_VAR 0 8
3142: PUSH
3143: LD_INT 81
3145: PUSH
3146: LD_VAR 0 9
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PUSH
3155: LD_INT 3
3157: PUSH
3158: LD_INT 21
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 69
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 8
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3648
// if in_unit then
3190: LD_VAR 0 11
3194: IFFALSE 3218
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3196: LD_ADDR_VAR 0 10
3200: PUSH
3201: LD_VAR 0 8
3205: PPUSH
3206: LD_VAR 0 11
3210: PPUSH
3211: CALL_OW 74
3215: ST_TO_ADDR
3216: GO 3238
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3218: LD_ADDR_VAR 0 10
3222: PUSH
3223: LD_VAR 0 8
3227: PPUSH
3228: LD_VAR 0 1
3232: PPUSH
3233: CALL_OW 74
3237: ST_TO_ADDR
// if not enemy then
3238: LD_VAR 0 10
3242: NOT
3243: IFFALSE 3247
// exit ;
3245: GO 3648
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3247: LD_VAR 0 11
3251: PUSH
3252: LD_VAR 0 11
3256: PPUSH
3257: LD_VAR 0 10
3261: PPUSH
3262: CALL_OW 296
3266: PUSH
3267: LD_INT 13
3269: GREATER
3270: AND
3271: PUSH
3272: LD_VAR 0 1
3276: PPUSH
3277: LD_VAR 0 10
3281: PPUSH
3282: CALL_OW 296
3286: PUSH
3287: LD_INT 12
3289: GREATER
3290: OR
3291: IFFALSE 3295
// exit ;
3293: GO 3648
// missile := [ 1 ] ;
3295: LD_ADDR_VAR 0 14
3299: PUSH
3300: LD_INT 1
3302: PUSH
3303: EMPTY
3304: LIST
3305: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3306: LD_VAR 0 9
3310: PPUSH
3311: LD_VAR 0 12
3315: PPUSH
3316: CALL_OW 325
3320: IFFALSE 3349
// missile := Replace ( missile , missile + 1 , 2 ) ;
3322: LD_ADDR_VAR 0 14
3326: PUSH
3327: LD_VAR 0 14
3331: PPUSH
3332: LD_VAR 0 14
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL_OW 1
3348: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3349: LD_VAR 0 9
3353: PPUSH
3354: LD_VAR 0 13
3358: PPUSH
3359: CALL_OW 325
3363: PUSH
3364: LD_VAR 0 10
3368: PPUSH
3369: CALL_OW 255
3373: PPUSH
3374: LD_VAR 0 13
3378: PPUSH
3379: CALL_OW 325
3383: NOT
3384: AND
3385: IFFALSE 3414
// missile := Replace ( missile , missile + 1 , 3 ) ;
3387: LD_ADDR_VAR 0 14
3391: PUSH
3392: LD_VAR 0 14
3396: PPUSH
3397: LD_VAR 0 14
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: CALL_OW 1
3413: ST_TO_ADDR
// if missile < 2 then
3414: LD_VAR 0 14
3418: PUSH
3419: LD_INT 2
3421: LESS
3422: IFFALSE 3426
// exit ;
3424: GO 3648
// x := GetX ( enemy ) ;
3426: LD_ADDR_VAR 0 4
3430: PUSH
3431: LD_VAR 0 10
3435: PPUSH
3436: CALL_OW 250
3440: ST_TO_ADDR
// y := GetY ( enemy ) ;
3441: LD_ADDR_VAR 0 5
3445: PUSH
3446: LD_VAR 0 10
3450: PPUSH
3451: CALL_OW 251
3455: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3456: LD_ADDR_VAR 0 6
3460: PUSH
3461: LD_VAR 0 4
3465: PUSH
3466: LD_INT 1
3468: NEG
3469: PPUSH
3470: LD_INT 1
3472: PPUSH
3473: CALL_OW 12
3477: PLUS
3478: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3479: LD_ADDR_VAR 0 7
3483: PUSH
3484: LD_VAR 0 5
3488: PUSH
3489: LD_INT 1
3491: NEG
3492: PPUSH
3493: LD_INT 1
3495: PPUSH
3496: CALL_OW 12
3500: PLUS
3501: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3502: LD_VAR 0 6
3506: PPUSH
3507: LD_VAR 0 7
3511: PPUSH
3512: CALL_OW 488
3516: NOT
3517: IFFALSE 3539
// begin _x := x ;
3519: LD_ADDR_VAR 0 6
3523: PUSH
3524: LD_VAR 0 4
3528: ST_TO_ADDR
// _y := y ;
3529: LD_ADDR_VAR 0 7
3533: PUSH
3534: LD_VAR 0 5
3538: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: LD_INT 1
3546: PPUSH
3547: LD_VAR 0 14
3551: PPUSH
3552: CALL_OW 12
3556: ST_TO_ADDR
// case i of 1 :
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 1
3564: DOUBLE
3565: EQUAL
3566: IFTRUE 3570
3568: GO 3587
3570: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3571: LD_VAR 0 1
3575: PPUSH
3576: LD_VAR 0 10
3580: PPUSH
3581: CALL_OW 115
3585: GO 3648
3587: LD_INT 2
3589: DOUBLE
3590: EQUAL
3591: IFTRUE 3595
3593: GO 3617
3595: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3596: LD_VAR 0 1
3600: PPUSH
3601: LD_VAR 0 6
3605: PPUSH
3606: LD_VAR 0 7
3610: PPUSH
3611: CALL_OW 153
3615: GO 3648
3617: LD_INT 3
3619: DOUBLE
3620: EQUAL
3621: IFTRUE 3625
3623: GO 3647
3625: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3626: LD_VAR 0 1
3630: PPUSH
3631: LD_VAR 0 6
3635: PPUSH
3636: LD_VAR 0 7
3640: PPUSH
3641: CALL_OW 154
3645: GO 3648
3647: POP
// end ;
3648: LD_VAR 0 2
3652: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3653: LD_INT 0
3655: PPUSH
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
// if not unit or not building then
3661: LD_VAR 0 1
3665: NOT
3666: PUSH
3667: LD_VAR 0 2
3671: NOT
3672: OR
3673: IFFALSE 3677
// exit ;
3675: GO 3835
// x := GetX ( building ) ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: LD_VAR 0 2
3686: PPUSH
3687: CALL_OW 250
3691: ST_TO_ADDR
// y := GetY ( building ) ;
3692: LD_ADDR_VAR 0 6
3696: PUSH
3697: LD_VAR 0 2
3701: PPUSH
3702: CALL_OW 251
3706: ST_TO_ADDR
// for i = 0 to 5 do
3707: LD_ADDR_VAR 0 4
3711: PUSH
3712: DOUBLE
3713: LD_INT 0
3715: DEC
3716: ST_TO_ADDR
3717: LD_INT 5
3719: PUSH
3720: FOR_TO
3721: IFFALSE 3833
// begin _x := ShiftX ( x , i , 3 ) ;
3723: LD_ADDR_VAR 0 7
3727: PUSH
3728: LD_VAR 0 5
3732: PPUSH
3733: LD_VAR 0 4
3737: PPUSH
3738: LD_INT 3
3740: PPUSH
3741: CALL_OW 272
3745: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3746: LD_ADDR_VAR 0 8
3750: PUSH
3751: LD_VAR 0 6
3755: PPUSH
3756: LD_VAR 0 4
3760: PPUSH
3761: LD_INT 3
3763: PPUSH
3764: CALL_OW 273
3768: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3769: LD_VAR 0 7
3773: PPUSH
3774: LD_VAR 0 8
3778: PPUSH
3779: CALL_OW 488
3783: NOT
3784: IFFALSE 3788
// continue ;
3786: GO 3720
// if HexInfo ( _x , _y ) = 0 then
3788: LD_VAR 0 7
3792: PPUSH
3793: LD_VAR 0 8
3797: PPUSH
3798: CALL_OW 428
3802: PUSH
3803: LD_INT 0
3805: EQUAL
3806: IFFALSE 3831
// begin ComMoveXY ( unit , _x , _y ) ;
3808: LD_VAR 0 1
3812: PPUSH
3813: LD_VAR 0 7
3817: PPUSH
3818: LD_VAR 0 8
3822: PPUSH
3823: CALL_OW 111
// exit ;
3827: POP
3828: POP
3829: GO 3835
// end ; end ;
3831: GO 3720
3833: POP
3834: POP
// end ;
3835: LD_VAR 0 3
3839: RET
// export function ScanBase ( side , base_area ) ; begin
3840: LD_INT 0
3842: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3843: LD_ADDR_VAR 0 3
3847: PUSH
3848: LD_VAR 0 2
3852: PPUSH
3853: LD_INT 81
3855: PUSH
3856: LD_VAR 0 1
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PPUSH
3865: CALL_OW 70
3869: ST_TO_ADDR
// end ;
3870: LD_VAR 0 3
3874: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3875: LD_INT 0
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
// result := false ;
3881: LD_ADDR_VAR 0 2
3885: PUSH
3886: LD_INT 0
3888: ST_TO_ADDR
// side := GetSide ( unit ) ;
3889: LD_ADDR_VAR 0 3
3893: PUSH
3894: LD_VAR 0 1
3898: PPUSH
3899: CALL_OW 255
3903: ST_TO_ADDR
// nat := GetNation ( unit ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: CALL_OW 248
3918: ST_TO_ADDR
// case nat of 1 :
3919: LD_VAR 0 4
3923: PUSH
3924: LD_INT 1
3926: DOUBLE
3927: EQUAL
3928: IFTRUE 3932
3930: GO 3943
3932: POP
// tech := tech_lassight ; 2 :
3933: LD_ADDR_VAR 0 5
3937: PUSH
3938: LD_INT 12
3940: ST_TO_ADDR
3941: GO 3982
3943: LD_INT 2
3945: DOUBLE
3946: EQUAL
3947: IFTRUE 3951
3949: GO 3962
3951: POP
// tech := tech_mortar ; 3 :
3952: LD_ADDR_VAR 0 5
3956: PUSH
3957: LD_INT 41
3959: ST_TO_ADDR
3960: GO 3982
3962: LD_INT 3
3964: DOUBLE
3965: EQUAL
3966: IFTRUE 3970
3968: GO 3981
3970: POP
// tech := tech_bazooka ; end ;
3971: LD_ADDR_VAR 0 5
3975: PUSH
3976: LD_INT 44
3978: ST_TO_ADDR
3979: GO 3982
3981: POP
// if Researched ( side , tech ) then
3982: LD_VAR 0 3
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: CALL_OW 325
3996: IFFALSE 4023
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
3998: LD_ADDR_VAR 0 2
4002: PUSH
4003: LD_INT 5
4005: PUSH
4006: LD_INT 8
4008: PUSH
4009: LD_INT 9
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: LD_VAR 0 4
4021: ARRAY
4022: ST_TO_ADDR
// end ;
4023: LD_VAR 0 2
4027: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4028: LD_INT 0
4030: PPUSH
4031: PPUSH
4032: PPUSH
// if not mines then
4033: LD_VAR 0 2
4037: NOT
4038: IFFALSE 4042
// exit ;
4040: GO 4186
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4042: LD_ADDR_VAR 0 5
4046: PUSH
4047: LD_INT 81
4049: PUSH
4050: LD_VAR 0 1
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 3
4061: PUSH
4062: LD_INT 21
4064: PUSH
4065: LD_INT 3
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PPUSH
4080: CALL_OW 69
4084: ST_TO_ADDR
// for i in mines do
4085: LD_ADDR_VAR 0 4
4089: PUSH
4090: LD_VAR 0 2
4094: PUSH
4095: FOR_IN
4096: IFFALSE 4184
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4098: LD_VAR 0 4
4102: PUSH
4103: LD_INT 1
4105: ARRAY
4106: PPUSH
4107: LD_VAR 0 4
4111: PUSH
4112: LD_INT 2
4114: ARRAY
4115: PPUSH
4116: CALL_OW 458
4120: NOT
4121: IFFALSE 4125
// continue ;
4123: GO 4095
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4125: LD_VAR 0 4
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PPUSH
4134: LD_VAR 0 4
4138: PUSH
4139: LD_INT 2
4141: ARRAY
4142: PPUSH
4143: CALL_OW 428
4147: PUSH
4148: LD_VAR 0 5
4152: IN
4153: IFFALSE 4182
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4155: LD_VAR 0 4
4159: PUSH
4160: LD_INT 1
4162: ARRAY
4163: PPUSH
4164: LD_VAR 0 4
4168: PUSH
4169: LD_INT 2
4171: ARRAY
4172: PPUSH
4173: LD_VAR 0 1
4177: PPUSH
4178: CALL_OW 456
// end ;
4182: GO 4095
4184: POP
4185: POP
// end ;
4186: LD_VAR 0 3
4190: RET
// export function Count ( array ) ; begin
4191: LD_INT 0
4193: PPUSH
// result := array + 0 ;
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: LD_VAR 0 1
4203: PUSH
4204: LD_INT 0
4206: PLUS
4207: ST_TO_ADDR
// end ;
4208: LD_VAR 0 2
4212: RET
// export function IsEmpty ( building ) ; begin
4213: LD_INT 0
4215: PPUSH
// if not building then
4216: LD_VAR 0 1
4220: NOT
4221: IFFALSE 4225
// exit ;
4223: GO 4268
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4225: LD_ADDR_VAR 0 2
4229: PUSH
4230: LD_VAR 0 1
4234: PUSH
4235: LD_INT 22
4237: PUSH
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 255
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PUSH
4252: LD_INT 58
4254: PUSH
4255: EMPTY
4256: LIST
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PPUSH
4262: CALL_OW 69
4266: IN
4267: ST_TO_ADDR
// end ;
4268: LD_VAR 0 2
4272: RET
// export function IsNotFull ( building ) ; var places ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
// if not building then
4277: LD_VAR 0 1
4281: NOT
4282: IFFALSE 4286
// exit ;
4284: GO 4314
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4286: LD_ADDR_VAR 0 2
4290: PUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: LD_INT 3
4298: PUSH
4299: LD_INT 62
4301: PUSH
4302: EMPTY
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 72
4313: ST_TO_ADDR
// end ;
4314: LD_VAR 0 2
4318: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4319: LD_INT 0
4321: PPUSH
4322: PPUSH
4323: PPUSH
4324: PPUSH
// tmp := [ ] ;
4325: LD_ADDR_VAR 0 3
4329: PUSH
4330: EMPTY
4331: ST_TO_ADDR
// list := [ ] ;
4332: LD_ADDR_VAR 0 5
4336: PUSH
4337: EMPTY
4338: ST_TO_ADDR
// for i = 16 to 25 do
4339: LD_ADDR_VAR 0 4
4343: PUSH
4344: DOUBLE
4345: LD_INT 16
4347: DEC
4348: ST_TO_ADDR
4349: LD_INT 25
4351: PUSH
4352: FOR_TO
4353: IFFALSE 4426
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: LD_VAR 0 3
4364: PUSH
4365: LD_INT 22
4367: PUSH
4368: LD_VAR 0 1
4372: PPUSH
4373: CALL_OW 255
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 91
4384: PUSH
4385: LD_VAR 0 1
4389: PUSH
4390: LD_INT 6
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 30
4400: PUSH
4401: LD_VAR 0 4
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: EMPTY
4416: LIST
4417: PPUSH
4418: CALL_OW 69
4422: ADD
4423: ST_TO_ADDR
4424: GO 4352
4426: POP
4427: POP
// for i = 1 to tmp do
4428: LD_ADDR_VAR 0 4
4432: PUSH
4433: DOUBLE
4434: LD_INT 1
4436: DEC
4437: ST_TO_ADDR
4438: LD_VAR 0 3
4442: PUSH
4443: FOR_TO
4444: IFFALSE 4532
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: LD_VAR 0 5
4455: PUSH
4456: LD_VAR 0 3
4460: PUSH
4461: LD_VAR 0 4
4465: ARRAY
4466: PPUSH
4467: CALL_OW 266
4471: PUSH
4472: LD_VAR 0 3
4476: PUSH
4477: LD_VAR 0 4
4481: ARRAY
4482: PPUSH
4483: CALL_OW 250
4487: PUSH
4488: LD_VAR 0 3
4492: PUSH
4493: LD_VAR 0 4
4497: ARRAY
4498: PPUSH
4499: CALL_OW 251
4503: PUSH
4504: LD_VAR 0 3
4508: PUSH
4509: LD_VAR 0 4
4513: ARRAY
4514: PPUSH
4515: CALL_OW 254
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: EMPTY
4527: LIST
4528: ADD
4529: ST_TO_ADDR
4530: GO 4443
4532: POP
4533: POP
// result := list ;
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: LD_VAR 0 5
4543: ST_TO_ADDR
// end ;
4544: LD_VAR 0 2
4548: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
// if not factory then
4558: LD_VAR 0 1
4562: NOT
4563: IFFALSE 4567
// exit ;
4565: GO 5160
// if control = control_apeman then
4567: LD_VAR 0 4
4571: PUSH
4572: LD_INT 5
4574: EQUAL
4575: IFFALSE 4684
// begin tmp := UnitsInside ( factory ) ;
4577: LD_ADDR_VAR 0 8
4581: PUSH
4582: LD_VAR 0 1
4586: PPUSH
4587: CALL_OW 313
4591: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4592: LD_VAR 0 8
4596: PPUSH
4597: LD_INT 25
4599: PUSH
4600: LD_INT 12
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PPUSH
4607: CALL_OW 72
4611: NOT
4612: IFFALSE 4622
// control := control_manual ;
4614: LD_ADDR_VAR 0 4
4618: PUSH
4619: LD_INT 1
4621: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4622: LD_ADDR_VAR 0 8
4626: PUSH
4627: LD_VAR 0 1
4631: PPUSH
4632: CALL 4319 0 1
4636: ST_TO_ADDR
// if tmp then
4637: LD_VAR 0 8
4641: IFFALSE 4684
// begin for i in tmp do
4643: LD_ADDR_VAR 0 7
4647: PUSH
4648: LD_VAR 0 8
4652: PUSH
4653: FOR_IN
4654: IFFALSE 4682
// if i [ 1 ] = b_ext_radio then
4656: LD_VAR 0 7
4660: PUSH
4661: LD_INT 1
4663: ARRAY
4664: PUSH
4665: LD_INT 22
4667: EQUAL
4668: IFFALSE 4680
// begin control := control_remote ;
4670: LD_ADDR_VAR 0 4
4674: PUSH
4675: LD_INT 2
4677: ST_TO_ADDR
// break ;
4678: GO 4682
// end ;
4680: GO 4653
4682: POP
4683: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4684: LD_VAR 0 1
4688: PPUSH
4689: LD_VAR 0 2
4693: PPUSH
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_VAR 0 4
4703: PPUSH
4704: LD_VAR 0 5
4708: PPUSH
4709: CALL_OW 448
4713: IFFALSE 4748
// begin result := [ chassis , engine , control , weapon ] ;
4715: LD_ADDR_VAR 0 6
4719: PUSH
4720: LD_VAR 0 2
4724: PUSH
4725: LD_VAR 0 3
4729: PUSH
4730: LD_VAR 0 4
4734: PUSH
4735: LD_VAR 0 5
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: ST_TO_ADDR
// exit ;
4746: GO 5160
// end ; _chassis := AvailableChassisList ( factory ) ;
4748: LD_ADDR_VAR 0 9
4752: PUSH
4753: LD_VAR 0 1
4757: PPUSH
4758: CALL_OW 475
4762: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4763: LD_ADDR_VAR 0 11
4767: PUSH
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL_OW 476
4777: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4778: LD_ADDR_VAR 0 12
4782: PUSH
4783: LD_VAR 0 1
4787: PPUSH
4788: CALL_OW 477
4792: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4793: LD_ADDR_VAR 0 10
4797: PUSH
4798: LD_VAR 0 1
4802: PPUSH
4803: CALL_OW 478
4807: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4808: LD_VAR 0 9
4812: NOT
4813: PUSH
4814: LD_VAR 0 11
4818: NOT
4819: OR
4820: PUSH
4821: LD_VAR 0 12
4825: NOT
4826: OR
4827: PUSH
4828: LD_VAR 0 10
4832: NOT
4833: OR
4834: IFFALSE 4869
// begin result := [ chassis , engine , control , weapon ] ;
4836: LD_ADDR_VAR 0 6
4840: PUSH
4841: LD_VAR 0 2
4845: PUSH
4846: LD_VAR 0 3
4850: PUSH
4851: LD_VAR 0 4
4855: PUSH
4856: LD_VAR 0 5
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: ST_TO_ADDR
// exit ;
4867: GO 5160
// end ; if not chassis in _chassis then
4869: LD_VAR 0 2
4873: PUSH
4874: LD_VAR 0 9
4878: IN
4879: NOT
4880: IFFALSE 4906
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4882: LD_ADDR_VAR 0 2
4886: PUSH
4887: LD_VAR 0 9
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_VAR 0 9
4899: PPUSH
4900: CALL_OW 12
4904: ARRAY
4905: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4906: LD_VAR 0 2
4910: PPUSH
4911: LD_VAR 0 3
4915: PPUSH
4916: CALL 5165 0 2
4920: NOT
4921: IFFALSE 4980
// repeat engine := _engine [ 1 ] ;
4923: LD_ADDR_VAR 0 3
4927: PUSH
4928: LD_VAR 0 11
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4937: LD_ADDR_VAR 0 11
4941: PUSH
4942: LD_VAR 0 11
4946: PPUSH
4947: LD_INT 1
4949: PPUSH
4950: CALL_OW 3
4954: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4955: LD_VAR 0 2
4959: PPUSH
4960: LD_VAR 0 3
4964: PPUSH
4965: CALL 5165 0 2
4969: PUSH
4970: LD_VAR 0 11
4974: PUSH
4975: EMPTY
4976: EQUAL
4977: OR
4978: IFFALSE 4923
// if not control in _control then
4980: LD_VAR 0 4
4984: PUSH
4985: LD_VAR 0 12
4989: IN
4990: NOT
4991: IFFALSE 5017
// control := _control [ rand ( 1 , _control ) ] ;
4993: LD_ADDR_VAR 0 4
4997: PUSH
4998: LD_VAR 0 12
5002: PUSH
5003: LD_INT 1
5005: PPUSH
5006: LD_VAR 0 12
5010: PPUSH
5011: CALL_OW 12
5015: ARRAY
5016: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5017: LD_VAR 0 2
5021: PPUSH
5022: LD_VAR 0 5
5026: PPUSH
5027: CALL 5385 0 2
5031: NOT
5032: IFFALSE 5091
// repeat weapon := _weapon [ 1 ] ;
5034: LD_ADDR_VAR 0 5
5038: PUSH
5039: LD_VAR 0 10
5043: PUSH
5044: LD_INT 1
5046: ARRAY
5047: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5048: LD_ADDR_VAR 0 10
5052: PUSH
5053: LD_VAR 0 10
5057: PPUSH
5058: LD_INT 1
5060: PPUSH
5061: CALL_OW 3
5065: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5066: LD_VAR 0 2
5070: PPUSH
5071: LD_VAR 0 5
5075: PPUSH
5076: CALL 5385 0 2
5080: PUSH
5081: LD_VAR 0 10
5085: PUSH
5086: EMPTY
5087: EQUAL
5088: OR
5089: IFFALSE 5034
// result := [ ] ;
5091: LD_ADDR_VAR 0 6
5095: PUSH
5096: EMPTY
5097: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5098: LD_VAR 0 1
5102: PPUSH
5103: LD_VAR 0 2
5107: PPUSH
5108: LD_VAR 0 3
5112: PPUSH
5113: LD_VAR 0 4
5117: PPUSH
5118: LD_VAR 0 5
5122: PPUSH
5123: CALL_OW 448
5127: IFFALSE 5160
// result := [ chassis , engine , control , weapon ] ;
5129: LD_ADDR_VAR 0 6
5133: PUSH
5134: LD_VAR 0 2
5138: PUSH
5139: LD_VAR 0 3
5143: PUSH
5144: LD_VAR 0 4
5148: PUSH
5149: LD_VAR 0 5
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: ST_TO_ADDR
// end ;
5160: LD_VAR 0 6
5164: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5165: LD_INT 0
5167: PPUSH
// if not chassis or not engine then
5168: LD_VAR 0 1
5172: NOT
5173: PUSH
5174: LD_VAR 0 2
5178: NOT
5179: OR
5180: IFFALSE 5184
// exit ;
5182: GO 5380
// case engine of engine_solar :
5184: LD_VAR 0 2
5188: PUSH
5189: LD_INT 2
5191: DOUBLE
5192: EQUAL
5193: IFTRUE 5197
5195: GO 5235
5197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5198: LD_ADDR_VAR 0 3
5202: PUSH
5203: LD_INT 11
5205: PUSH
5206: LD_INT 12
5208: PUSH
5209: LD_INT 13
5211: PUSH
5212: LD_INT 14
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: LD_INT 2
5220: PUSH
5221: LD_INT 3
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: ST_TO_ADDR
5233: GO 5364
5235: LD_INT 1
5237: DOUBLE
5238: EQUAL
5239: IFTRUE 5243
5241: GO 5305
5243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5244: LD_ADDR_VAR 0 3
5248: PUSH
5249: LD_INT 11
5251: PUSH
5252: LD_INT 12
5254: PUSH
5255: LD_INT 13
5257: PUSH
5258: LD_INT 14
5260: PUSH
5261: LD_INT 1
5263: PUSH
5264: LD_INT 2
5266: PUSH
5267: LD_INT 3
5269: PUSH
5270: LD_INT 4
5272: PUSH
5273: LD_INT 5
5275: PUSH
5276: LD_INT 21
5278: PUSH
5279: LD_INT 23
5281: PUSH
5282: LD_INT 22
5284: PUSH
5285: LD_INT 24
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: ST_TO_ADDR
5303: GO 5364
5305: LD_INT 3
5307: DOUBLE
5308: EQUAL
5309: IFTRUE 5313
5311: GO 5363
5313: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5314: LD_ADDR_VAR 0 3
5318: PUSH
5319: LD_INT 13
5321: PUSH
5322: LD_INT 14
5324: PUSH
5325: LD_INT 2
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_INT 4
5333: PUSH
5334: LD_INT 5
5336: PUSH
5337: LD_INT 21
5339: PUSH
5340: LD_INT 22
5342: PUSH
5343: LD_INT 23
5345: PUSH
5346: LD_INT 24
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: ST_TO_ADDR
5361: GO 5364
5363: POP
// result := ( chassis in result ) ;
5364: LD_ADDR_VAR 0 3
5368: PUSH
5369: LD_VAR 0 1
5373: PUSH
5374: LD_VAR 0 3
5378: IN
5379: ST_TO_ADDR
// end ;
5380: LD_VAR 0 3
5384: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5385: LD_INT 0
5387: PPUSH
// if not chassis or not weapon then
5388: LD_VAR 0 1
5392: NOT
5393: PUSH
5394: LD_VAR 0 2
5398: NOT
5399: OR
5400: IFFALSE 5404
// exit ;
5402: GO 6464
// case weapon of us_machine_gun :
5404: LD_VAR 0 2
5408: PUSH
5409: LD_INT 2
5411: DOUBLE
5412: EQUAL
5413: IFTRUE 5417
5415: GO 5447
5417: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5418: LD_ADDR_VAR 0 3
5422: PUSH
5423: LD_INT 1
5425: PUSH
5426: LD_INT 2
5428: PUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: LD_INT 5
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ST_TO_ADDR
5445: GO 6448
5447: LD_INT 3
5449: DOUBLE
5450: EQUAL
5451: IFTRUE 5455
5453: GO 5485
5455: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5456: LD_ADDR_VAR 0 3
5460: PUSH
5461: LD_INT 1
5463: PUSH
5464: LD_INT 2
5466: PUSH
5467: LD_INT 3
5469: PUSH
5470: LD_INT 4
5472: PUSH
5473: LD_INT 5
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: ST_TO_ADDR
5483: GO 6448
5485: LD_INT 11
5487: DOUBLE
5488: EQUAL
5489: IFTRUE 5493
5491: GO 5523
5493: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5494: LD_ADDR_VAR 0 3
5498: PUSH
5499: LD_INT 1
5501: PUSH
5502: LD_INT 2
5504: PUSH
5505: LD_INT 3
5507: PUSH
5508: LD_INT 4
5510: PUSH
5511: LD_INT 5
5513: PUSH
5514: EMPTY
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: ST_TO_ADDR
5521: GO 6448
5523: LD_INT 4
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5557
5531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_INT 2
5539: PUSH
5540: LD_INT 3
5542: PUSH
5543: LD_INT 4
5545: PUSH
5546: LD_INT 5
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: ST_TO_ADDR
5555: GO 6448
5557: LD_INT 5
5559: DOUBLE
5560: EQUAL
5561: IFTRUE 5565
5563: GO 5591
5565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5566: LD_ADDR_VAR 0 3
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: LD_INT 3
5576: PUSH
5577: LD_INT 4
5579: PUSH
5580: LD_INT 5
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: ST_TO_ADDR
5589: GO 6448
5591: LD_INT 9
5593: DOUBLE
5594: EQUAL
5595: IFTRUE 5599
5597: GO 5625
5599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5600: LD_ADDR_VAR 0 3
5604: PUSH
5605: LD_INT 2
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: LD_INT 4
5613: PUSH
5614: LD_INT 5
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: ST_TO_ADDR
5623: GO 6448
5625: LD_INT 7
5627: DOUBLE
5628: EQUAL
5629: IFTRUE 5633
5631: GO 5659
5633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5634: LD_ADDR_VAR 0 3
5638: PUSH
5639: LD_INT 2
5641: PUSH
5642: LD_INT 3
5644: PUSH
5645: LD_INT 4
5647: PUSH
5648: LD_INT 5
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: ST_TO_ADDR
5657: GO 6448
5659: LD_INT 12
5661: DOUBLE
5662: EQUAL
5663: IFTRUE 5667
5665: GO 5693
5667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5668: LD_ADDR_VAR 0 3
5672: PUSH
5673: LD_INT 2
5675: PUSH
5676: LD_INT 3
5678: PUSH
5679: LD_INT 4
5681: PUSH
5682: LD_INT 5
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: ST_TO_ADDR
5691: GO 6448
5693: LD_INT 13
5695: DOUBLE
5696: EQUAL
5697: IFTRUE 5701
5699: GO 5727
5701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5702: LD_ADDR_VAR 0 3
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: LD_INT 3
5712: PUSH
5713: LD_INT 4
5715: PUSH
5716: LD_INT 5
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: ST_TO_ADDR
5725: GO 6448
5727: LD_INT 14
5729: DOUBLE
5730: EQUAL
5731: IFTRUE 5735
5733: GO 5753
5735: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5736: LD_ADDR_VAR 0 3
5740: PUSH
5741: LD_INT 4
5743: PUSH
5744: LD_INT 5
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: ST_TO_ADDR
5751: GO 6448
5753: LD_INT 6
5755: DOUBLE
5756: EQUAL
5757: IFTRUE 5761
5759: GO 5779
5761: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5762: LD_ADDR_VAR 0 3
5766: PUSH
5767: LD_INT 4
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: ST_TO_ADDR
5777: GO 6448
5779: LD_INT 10
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5805
5787: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5788: LD_ADDR_VAR 0 3
5792: PUSH
5793: LD_INT 4
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: ST_TO_ADDR
5803: GO 6448
5805: LD_INT 22
5807: DOUBLE
5808: EQUAL
5809: IFTRUE 5813
5811: GO 5839
5813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5814: LD_ADDR_VAR 0 3
5818: PUSH
5819: LD_INT 11
5821: PUSH
5822: LD_INT 12
5824: PUSH
5825: LD_INT 13
5827: PUSH
5828: LD_INT 14
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: ST_TO_ADDR
5837: GO 6448
5839: LD_INT 23
5841: DOUBLE
5842: EQUAL
5843: IFTRUE 5847
5845: GO 5873
5847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: LD_INT 11
5855: PUSH
5856: LD_INT 12
5858: PUSH
5859: LD_INT 13
5861: PUSH
5862: LD_INT 14
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: ST_TO_ADDR
5871: GO 6448
5873: LD_INT 24
5875: DOUBLE
5876: EQUAL
5877: IFTRUE 5881
5879: GO 5907
5881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5882: LD_ADDR_VAR 0 3
5886: PUSH
5887: LD_INT 11
5889: PUSH
5890: LD_INT 12
5892: PUSH
5893: LD_INT 13
5895: PUSH
5896: LD_INT 14
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: ST_TO_ADDR
5905: GO 6448
5907: LD_INT 30
5909: DOUBLE
5910: EQUAL
5911: IFTRUE 5915
5913: GO 5941
5915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5916: LD_ADDR_VAR 0 3
5920: PUSH
5921: LD_INT 11
5923: PUSH
5924: LD_INT 12
5926: PUSH
5927: LD_INT 13
5929: PUSH
5930: LD_INT 14
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: ST_TO_ADDR
5939: GO 6448
5941: LD_INT 25
5943: DOUBLE
5944: EQUAL
5945: IFTRUE 5949
5947: GO 5967
5949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5950: LD_ADDR_VAR 0 3
5954: PUSH
5955: LD_INT 13
5957: PUSH
5958: LD_INT 14
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: ST_TO_ADDR
5965: GO 6448
5967: LD_INT 27
5969: DOUBLE
5970: EQUAL
5971: IFTRUE 5975
5973: GO 5993
5975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: LD_INT 13
5983: PUSH
5984: LD_INT 14
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: ST_TO_ADDR
5991: GO 6448
5993: LD_INT 92
5995: DOUBLE
5996: EQUAL
5997: IFTRUE 6001
5999: GO 6027
6001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6002: LD_ADDR_VAR 0 3
6006: PUSH
6007: LD_INT 11
6009: PUSH
6010: LD_INT 12
6012: PUSH
6013: LD_INT 13
6015: PUSH
6016: LD_INT 14
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: ST_TO_ADDR
6025: GO 6448
6027: LD_INT 28
6029: DOUBLE
6030: EQUAL
6031: IFTRUE 6035
6033: GO 6053
6035: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6036: LD_ADDR_VAR 0 3
6040: PUSH
6041: LD_INT 13
6043: PUSH
6044: LD_INT 14
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: ST_TO_ADDR
6051: GO 6448
6053: LD_INT 29
6055: DOUBLE
6056: EQUAL
6057: IFTRUE 6061
6059: GO 6079
6061: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6062: LD_ADDR_VAR 0 3
6066: PUSH
6067: LD_INT 13
6069: PUSH
6070: LD_INT 14
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: ST_TO_ADDR
6077: GO 6448
6079: LD_INT 31
6081: DOUBLE
6082: EQUAL
6083: IFTRUE 6087
6085: GO 6105
6087: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6088: LD_ADDR_VAR 0 3
6092: PUSH
6093: LD_INT 13
6095: PUSH
6096: LD_INT 14
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: ST_TO_ADDR
6103: GO 6448
6105: LD_INT 26
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6113
6111: GO 6131
6113: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6114: LD_ADDR_VAR 0 3
6118: PUSH
6119: LD_INT 13
6121: PUSH
6122: LD_INT 14
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: ST_TO_ADDR
6129: GO 6448
6131: LD_INT 42
6133: DOUBLE
6134: EQUAL
6135: IFTRUE 6139
6137: GO 6165
6139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6140: LD_ADDR_VAR 0 3
6144: PUSH
6145: LD_INT 21
6147: PUSH
6148: LD_INT 22
6150: PUSH
6151: LD_INT 23
6153: PUSH
6154: LD_INT 24
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: ST_TO_ADDR
6163: GO 6448
6165: LD_INT 43
6167: DOUBLE
6168: EQUAL
6169: IFTRUE 6173
6171: GO 6199
6173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6174: LD_ADDR_VAR 0 3
6178: PUSH
6179: LD_INT 21
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 23
6187: PUSH
6188: LD_INT 24
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: ST_TO_ADDR
6197: GO 6448
6199: LD_INT 44
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6233
6207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: LD_INT 21
6215: PUSH
6216: LD_INT 22
6218: PUSH
6219: LD_INT 23
6221: PUSH
6222: LD_INT 24
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: ST_TO_ADDR
6231: GO 6448
6233: LD_INT 45
6235: DOUBLE
6236: EQUAL
6237: IFTRUE 6241
6239: GO 6267
6241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6242: LD_ADDR_VAR 0 3
6246: PUSH
6247: LD_INT 21
6249: PUSH
6250: LD_INT 22
6252: PUSH
6253: LD_INT 23
6255: PUSH
6256: LD_INT 24
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: ST_TO_ADDR
6265: GO 6448
6267: LD_INT 49
6269: DOUBLE
6270: EQUAL
6271: IFTRUE 6275
6273: GO 6301
6275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_INT 21
6283: PUSH
6284: LD_INT 22
6286: PUSH
6287: LD_INT 23
6289: PUSH
6290: LD_INT 24
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: ST_TO_ADDR
6299: GO 6448
6301: LD_INT 51
6303: DOUBLE
6304: EQUAL
6305: IFTRUE 6309
6307: GO 6335
6309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: LD_INT 21
6317: PUSH
6318: LD_INT 22
6320: PUSH
6321: LD_INT 23
6323: PUSH
6324: LD_INT 24
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: ST_TO_ADDR
6333: GO 6448
6335: LD_INT 52
6337: DOUBLE
6338: EQUAL
6339: IFTRUE 6343
6341: GO 6369
6343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 22
6354: PUSH
6355: LD_INT 23
6357: PUSH
6358: LD_INT 24
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: ST_TO_ADDR
6367: GO 6448
6369: LD_INT 53
6371: DOUBLE
6372: EQUAL
6373: IFTRUE 6377
6375: GO 6395
6377: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6378: LD_ADDR_VAR 0 3
6382: PUSH
6383: LD_INT 23
6385: PUSH
6386: LD_INT 24
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: ST_TO_ADDR
6393: GO 6448
6395: LD_INT 46
6397: DOUBLE
6398: EQUAL
6399: IFTRUE 6403
6401: GO 6421
6403: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6404: LD_ADDR_VAR 0 3
6408: PUSH
6409: LD_INT 23
6411: PUSH
6412: LD_INT 24
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: ST_TO_ADDR
6419: GO 6448
6421: LD_INT 47
6423: DOUBLE
6424: EQUAL
6425: IFTRUE 6429
6427: GO 6447
6429: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6430: LD_ADDR_VAR 0 3
6434: PUSH
6435: LD_INT 23
6437: PUSH
6438: LD_INT 24
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: ST_TO_ADDR
6445: GO 6448
6447: POP
// result := ( chassis in result ) ;
6448: LD_ADDR_VAR 0 3
6452: PUSH
6453: LD_VAR 0 1
6457: PUSH
6458: LD_VAR 0 3
6462: IN
6463: ST_TO_ADDR
// end ;
6464: LD_VAR 0 3
6468: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6469: LD_INT 0
6471: PPUSH
6472: PPUSH
6473: PPUSH
6474: PPUSH
6475: PPUSH
6476: PPUSH
6477: PPUSH
// result := array ;
6478: LD_ADDR_VAR 0 5
6482: PUSH
6483: LD_VAR 0 1
6487: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6488: LD_VAR 0 1
6492: NOT
6493: PUSH
6494: LD_VAR 0 2
6498: NOT
6499: OR
6500: PUSH
6501: LD_VAR 0 3
6505: NOT
6506: OR
6507: PUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_VAR 0 1
6517: GREATER
6518: OR
6519: PUSH
6520: LD_VAR 0 3
6524: PUSH
6525: LD_VAR 0 1
6529: GREATER
6530: OR
6531: IFFALSE 6535
// exit ;
6533: GO 6831
// if direction then
6535: LD_VAR 0 4
6539: IFFALSE 6603
// begin d := 1 ;
6541: LD_ADDR_VAR 0 9
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// if i_from > i_to then
6549: LD_VAR 0 2
6553: PUSH
6554: LD_VAR 0 3
6558: GREATER
6559: IFFALSE 6585
// length := ( array - i_from ) + i_to else
6561: LD_ADDR_VAR 0 11
6565: PUSH
6566: LD_VAR 0 1
6570: PUSH
6571: LD_VAR 0 2
6575: MINUS
6576: PUSH
6577: LD_VAR 0 3
6581: PLUS
6582: ST_TO_ADDR
6583: GO 6601
// length := i_to - i_from ;
6585: LD_ADDR_VAR 0 11
6589: PUSH
6590: LD_VAR 0 3
6594: PUSH
6595: LD_VAR 0 2
6599: MINUS
6600: ST_TO_ADDR
// end else
6601: GO 6664
// begin d := - 1 ;
6603: LD_ADDR_VAR 0 9
6607: PUSH
6608: LD_INT 1
6610: NEG
6611: ST_TO_ADDR
// if i_from > i_to then
6612: LD_VAR 0 2
6616: PUSH
6617: LD_VAR 0 3
6621: GREATER
6622: IFFALSE 6642
// length := i_from - i_to else
6624: LD_ADDR_VAR 0 11
6628: PUSH
6629: LD_VAR 0 2
6633: PUSH
6634: LD_VAR 0 3
6638: MINUS
6639: ST_TO_ADDR
6640: GO 6664
// length := ( array - i_to ) + i_from ;
6642: LD_ADDR_VAR 0 11
6646: PUSH
6647: LD_VAR 0 1
6651: PUSH
6652: LD_VAR 0 3
6656: MINUS
6657: PUSH
6658: LD_VAR 0 2
6662: PLUS
6663: ST_TO_ADDR
// end ; if not length then
6664: LD_VAR 0 11
6668: NOT
6669: IFFALSE 6673
// exit ;
6671: GO 6831
// tmp := array ;
6673: LD_ADDR_VAR 0 10
6677: PUSH
6678: LD_VAR 0 1
6682: ST_TO_ADDR
// for i = 1 to length do
6683: LD_ADDR_VAR 0 6
6687: PUSH
6688: DOUBLE
6689: LD_INT 1
6691: DEC
6692: ST_TO_ADDR
6693: LD_VAR 0 11
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6819
// begin for j = 1 to array do
6701: LD_ADDR_VAR 0 7
6705: PUSH
6706: DOUBLE
6707: LD_INT 1
6709: DEC
6710: ST_TO_ADDR
6711: LD_VAR 0 1
6715: PUSH
6716: FOR_TO
6717: IFFALSE 6805
// begin k := j + d ;
6719: LD_ADDR_VAR 0 8
6723: PUSH
6724: LD_VAR 0 7
6728: PUSH
6729: LD_VAR 0 9
6733: PLUS
6734: ST_TO_ADDR
// if k > array then
6735: LD_VAR 0 8
6739: PUSH
6740: LD_VAR 0 1
6744: GREATER
6745: IFFALSE 6755
// k := 1 ;
6747: LD_ADDR_VAR 0 8
6751: PUSH
6752: LD_INT 1
6754: ST_TO_ADDR
// if not k then
6755: LD_VAR 0 8
6759: NOT
6760: IFFALSE 6772
// k := array ;
6762: LD_ADDR_VAR 0 8
6766: PUSH
6767: LD_VAR 0 1
6771: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6772: LD_ADDR_VAR 0 10
6776: PUSH
6777: LD_VAR 0 10
6781: PPUSH
6782: LD_VAR 0 8
6786: PPUSH
6787: LD_VAR 0 1
6791: PUSH
6792: LD_VAR 0 7
6796: ARRAY
6797: PPUSH
6798: CALL_OW 1
6802: ST_TO_ADDR
// end ;
6803: GO 6716
6805: POP
6806: POP
// array := tmp ;
6807: LD_ADDR_VAR 0 1
6811: PUSH
6812: LD_VAR 0 10
6816: ST_TO_ADDR
// end ;
6817: GO 6698
6819: POP
6820: POP
// result := array ;
6821: LD_ADDR_VAR 0 5
6825: PUSH
6826: LD_VAR 0 1
6830: ST_TO_ADDR
// end ;
6831: LD_VAR 0 5
6835: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6836: LD_INT 0
6838: PPUSH
6839: PPUSH
// result := 0 ;
6840: LD_ADDR_VAR 0 3
6844: PUSH
6845: LD_INT 0
6847: ST_TO_ADDR
// if not array or not value in array then
6848: LD_VAR 0 1
6852: NOT
6853: PUSH
6854: LD_VAR 0 2
6858: PUSH
6859: LD_VAR 0 1
6863: IN
6864: NOT
6865: OR
6866: IFFALSE 6870
// exit ;
6868: GO 6924
// for i = 1 to array do
6870: LD_ADDR_VAR 0 4
6874: PUSH
6875: DOUBLE
6876: LD_INT 1
6878: DEC
6879: ST_TO_ADDR
6880: LD_VAR 0 1
6884: PUSH
6885: FOR_TO
6886: IFFALSE 6922
// if value = array [ i ] then
6888: LD_VAR 0 2
6892: PUSH
6893: LD_VAR 0 1
6897: PUSH
6898: LD_VAR 0 4
6902: ARRAY
6903: EQUAL
6904: IFFALSE 6920
// begin result := i ;
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_VAR 0 4
6915: ST_TO_ADDR
// exit ;
6916: POP
6917: POP
6918: GO 6924
// end ;
6920: GO 6885
6922: POP
6923: POP
// end ;
6924: LD_VAR 0 3
6928: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6929: LD_INT 0
6931: PPUSH
// vc_chassis := chassis ;
6932: LD_ADDR_OWVAR 37
6936: PUSH
6937: LD_VAR 0 1
6941: ST_TO_ADDR
// vc_engine := engine ;
6942: LD_ADDR_OWVAR 39
6946: PUSH
6947: LD_VAR 0 2
6951: ST_TO_ADDR
// vc_control := control ;
6952: LD_ADDR_OWVAR 38
6956: PUSH
6957: LD_VAR 0 3
6961: ST_TO_ADDR
// vc_weapon := weapon ;
6962: LD_ADDR_OWVAR 40
6966: PUSH
6967: LD_VAR 0 4
6971: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6972: LD_ADDR_OWVAR 41
6976: PUSH
6977: LD_VAR 0 5
6981: ST_TO_ADDR
// end ;
6982: LD_VAR 0 6
6986: RET
// export function WantPlant ( unit ) ; var task ; begin
6987: LD_INT 0
6989: PPUSH
6990: PPUSH
// result := false ;
6991: LD_ADDR_VAR 0 2
6995: PUSH
6996: LD_INT 0
6998: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6999: LD_ADDR_VAR 0 3
7003: PUSH
7004: LD_VAR 0 1
7008: PPUSH
7009: CALL_OW 437
7013: ST_TO_ADDR
// if task then
7014: LD_VAR 0 3
7018: IFFALSE 7046
// if task [ 1 ] [ 1 ] = p then
7020: LD_VAR 0 3
7024: PUSH
7025: LD_INT 1
7027: ARRAY
7028: PUSH
7029: LD_INT 1
7031: ARRAY
7032: PUSH
7033: LD_STRING p
7035: EQUAL
7036: IFFALSE 7046
// result := true ;
7038: LD_ADDR_VAR 0 2
7042: PUSH
7043: LD_INT 1
7045: ST_TO_ADDR
// end ;
7046: LD_VAR 0 2
7050: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7051: LD_INT 0
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
// if pos < 1 then
7057: LD_VAR 0 2
7061: PUSH
7062: LD_INT 1
7064: LESS
7065: IFFALSE 7069
// exit ;
7067: GO 7372
// if pos = 1 then
7069: LD_VAR 0 2
7073: PUSH
7074: LD_INT 1
7076: EQUAL
7077: IFFALSE 7110
// result := Replace ( arr , pos [ 1 ] , value ) else
7079: LD_ADDR_VAR 0 4
7083: PUSH
7084: LD_VAR 0 1
7088: PPUSH
7089: LD_VAR 0 2
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: LD_VAR 0 3
7102: PPUSH
7103: CALL_OW 1
7107: ST_TO_ADDR
7108: GO 7372
// begin tmp := arr ;
7110: LD_ADDR_VAR 0 6
7114: PUSH
7115: LD_VAR 0 1
7119: ST_TO_ADDR
// s_arr := [ tmp ] ;
7120: LD_ADDR_VAR 0 7
7124: PUSH
7125: LD_VAR 0 6
7129: PUSH
7130: EMPTY
7131: LIST
7132: ST_TO_ADDR
// for i = 1 to pos - 1 do
7133: LD_ADDR_VAR 0 5
7137: PUSH
7138: DOUBLE
7139: LD_INT 1
7141: DEC
7142: ST_TO_ADDR
7143: LD_VAR 0 2
7147: PUSH
7148: LD_INT 1
7150: MINUS
7151: PUSH
7152: FOR_TO
7153: IFFALSE 7198
// begin tmp := tmp [ pos [ i ] ] ;
7155: LD_ADDR_VAR 0 6
7159: PUSH
7160: LD_VAR 0 6
7164: PUSH
7165: LD_VAR 0 2
7169: PUSH
7170: LD_VAR 0 5
7174: ARRAY
7175: ARRAY
7176: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7177: LD_ADDR_VAR 0 7
7181: PUSH
7182: LD_VAR 0 7
7186: PUSH
7187: LD_VAR 0 6
7191: PUSH
7192: EMPTY
7193: LIST
7194: ADD
7195: ST_TO_ADDR
// end ;
7196: GO 7152
7198: POP
7199: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7200: LD_ADDR_VAR 0 6
7204: PUSH
7205: LD_VAR 0 6
7209: PPUSH
7210: LD_VAR 0 2
7214: PUSH
7215: LD_VAR 0 2
7219: ARRAY
7220: PPUSH
7221: LD_VAR 0 3
7225: PPUSH
7226: CALL_OW 1
7230: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7231: LD_ADDR_VAR 0 7
7235: PUSH
7236: LD_VAR 0 7
7240: PPUSH
7241: LD_VAR 0 7
7245: PPUSH
7246: LD_VAR 0 6
7250: PPUSH
7251: CALL_OW 1
7255: ST_TO_ADDR
// for i = s_arr downto 2 do
7256: LD_ADDR_VAR 0 5
7260: PUSH
7261: DOUBLE
7262: LD_VAR 0 7
7266: INC
7267: ST_TO_ADDR
7268: LD_INT 2
7270: PUSH
7271: FOR_DOWNTO
7272: IFFALSE 7356
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7274: LD_ADDR_VAR 0 6
7278: PUSH
7279: LD_VAR 0 7
7283: PUSH
7284: LD_VAR 0 5
7288: PUSH
7289: LD_INT 1
7291: MINUS
7292: ARRAY
7293: PPUSH
7294: LD_VAR 0 2
7298: PUSH
7299: LD_VAR 0 5
7303: PUSH
7304: LD_INT 1
7306: MINUS
7307: ARRAY
7308: PPUSH
7309: LD_VAR 0 7
7313: PUSH
7314: LD_VAR 0 5
7318: ARRAY
7319: PPUSH
7320: CALL_OW 1
7324: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7325: LD_ADDR_VAR 0 7
7329: PUSH
7330: LD_VAR 0 7
7334: PPUSH
7335: LD_VAR 0 5
7339: PUSH
7340: LD_INT 1
7342: MINUS
7343: PPUSH
7344: LD_VAR 0 6
7348: PPUSH
7349: CALL_OW 1
7353: ST_TO_ADDR
// end ;
7354: GO 7271
7356: POP
7357: POP
// result := s_arr [ 1 ] ;
7358: LD_ADDR_VAR 0 4
7362: PUSH
7363: LD_VAR 0 7
7367: PUSH
7368: LD_INT 1
7370: ARRAY
7371: ST_TO_ADDR
// end ; end ;
7372: LD_VAR 0 4
7376: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7377: LD_INT 0
7379: PPUSH
7380: PPUSH
// if not list then
7381: LD_VAR 0 1
7385: NOT
7386: IFFALSE 7390
// exit ;
7388: GO 7481
// i := list [ pos1 ] ;
7390: LD_ADDR_VAR 0 5
7394: PUSH
7395: LD_VAR 0 1
7399: PUSH
7400: LD_VAR 0 2
7404: ARRAY
7405: ST_TO_ADDR
// if not i then
7406: LD_VAR 0 5
7410: NOT
7411: IFFALSE 7415
// exit ;
7413: GO 7481
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7415: LD_ADDR_VAR 0 1
7419: PUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: LD_VAR 0 2
7429: PPUSH
7430: LD_VAR 0 1
7434: PUSH
7435: LD_VAR 0 3
7439: ARRAY
7440: PPUSH
7441: CALL_OW 1
7445: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7446: LD_ADDR_VAR 0 1
7450: PUSH
7451: LD_VAR 0 1
7455: PPUSH
7456: LD_VAR 0 3
7460: PPUSH
7461: LD_VAR 0 5
7465: PPUSH
7466: CALL_OW 1
7470: ST_TO_ADDR
// result := list ;
7471: LD_ADDR_VAR 0 4
7475: PUSH
7476: LD_VAR 0 1
7480: ST_TO_ADDR
// end ;
7481: LD_VAR 0 4
7485: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7486: LD_INT 0
7488: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7489: LD_ADDR_VAR 0 5
7493: PUSH
7494: LD_VAR 0 1
7498: PPUSH
7499: CALL_OW 250
7503: PPUSH
7504: LD_VAR 0 1
7508: PPUSH
7509: CALL_OW 251
7513: PPUSH
7514: LD_VAR 0 2
7518: PPUSH
7519: LD_VAR 0 3
7523: PPUSH
7524: LD_VAR 0 4
7528: PPUSH
7529: CALL 7539 0 5
7533: ST_TO_ADDR
// end ;
7534: LD_VAR 0 5
7538: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
// if not list then
7545: LD_VAR 0 3
7549: NOT
7550: IFFALSE 7554
// exit ;
7552: GO 7942
// result := [ ] ;
7554: LD_ADDR_VAR 0 6
7558: PUSH
7559: EMPTY
7560: ST_TO_ADDR
// for i in list do
7561: LD_ADDR_VAR 0 7
7565: PUSH
7566: LD_VAR 0 3
7570: PUSH
7571: FOR_IN
7572: IFFALSE 7774
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7574: LD_ADDR_VAR 0 9
7578: PUSH
7579: LD_VAR 0 7
7583: PPUSH
7584: LD_VAR 0 1
7588: PPUSH
7589: LD_VAR 0 2
7593: PPUSH
7594: CALL_OW 297
7598: ST_TO_ADDR
// if not result then
7599: LD_VAR 0 6
7603: NOT
7604: IFFALSE 7630
// result := [ [ i , tmp ] ] else
7606: LD_ADDR_VAR 0 6
7610: PUSH
7611: LD_VAR 0 7
7615: PUSH
7616: LD_VAR 0 9
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: ST_TO_ADDR
7628: GO 7772
// begin if result [ result ] [ 2 ] < tmp then
7630: LD_VAR 0 6
7634: PUSH
7635: LD_VAR 0 6
7639: ARRAY
7640: PUSH
7641: LD_INT 2
7643: ARRAY
7644: PUSH
7645: LD_VAR 0 9
7649: LESS
7650: IFFALSE 7692
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7652: LD_ADDR_VAR 0 6
7656: PUSH
7657: LD_VAR 0 6
7661: PPUSH
7662: LD_VAR 0 6
7666: PUSH
7667: LD_INT 1
7669: PLUS
7670: PPUSH
7671: LD_VAR 0 7
7675: PUSH
7676: LD_VAR 0 9
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PPUSH
7685: CALL_OW 2
7689: ST_TO_ADDR
7690: GO 7772
// for j = 1 to result do
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: DOUBLE
7698: LD_INT 1
7700: DEC
7701: ST_TO_ADDR
7702: LD_VAR 0 6
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7770
// begin if tmp < result [ j ] [ 2 ] then
7710: LD_VAR 0 9
7714: PUSH
7715: LD_VAR 0 6
7719: PUSH
7720: LD_VAR 0 8
7724: ARRAY
7725: PUSH
7726: LD_INT 2
7728: ARRAY
7729: LESS
7730: IFFALSE 7768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7732: LD_ADDR_VAR 0 6
7736: PUSH
7737: LD_VAR 0 6
7741: PPUSH
7742: LD_VAR 0 8
7746: PPUSH
7747: LD_VAR 0 7
7751: PUSH
7752: LD_VAR 0 9
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PPUSH
7761: CALL_OW 2
7765: ST_TO_ADDR
// break ;
7766: GO 7770
// end ; end ;
7768: GO 7707
7770: POP
7771: POP
// end ; end ;
7772: GO 7571
7774: POP
7775: POP
// if result and not asc then
7776: LD_VAR 0 6
7780: PUSH
7781: LD_VAR 0 4
7785: NOT
7786: AND
7787: IFFALSE 7862
// begin tmp := result ;
7789: LD_ADDR_VAR 0 9
7793: PUSH
7794: LD_VAR 0 6
7798: ST_TO_ADDR
// for i = tmp downto 1 do
7799: LD_ADDR_VAR 0 7
7803: PUSH
7804: DOUBLE
7805: LD_VAR 0 9
7809: INC
7810: ST_TO_ADDR
7811: LD_INT 1
7813: PUSH
7814: FOR_DOWNTO
7815: IFFALSE 7860
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7817: LD_ADDR_VAR 0 6
7821: PUSH
7822: LD_VAR 0 6
7826: PPUSH
7827: LD_VAR 0 9
7831: PUSH
7832: LD_VAR 0 7
7836: MINUS
7837: PUSH
7838: LD_INT 1
7840: PLUS
7841: PPUSH
7842: LD_VAR 0 9
7846: PUSH
7847: LD_VAR 0 7
7851: ARRAY
7852: PPUSH
7853: CALL_OW 1
7857: ST_TO_ADDR
7858: GO 7814
7860: POP
7861: POP
// end ; tmp := [ ] ;
7862: LD_ADDR_VAR 0 9
7866: PUSH
7867: EMPTY
7868: ST_TO_ADDR
// if mode then
7869: LD_VAR 0 5
7873: IFFALSE 7942
// begin for i = 1 to result do
7875: LD_ADDR_VAR 0 7
7879: PUSH
7880: DOUBLE
7881: LD_INT 1
7883: DEC
7884: ST_TO_ADDR
7885: LD_VAR 0 6
7889: PUSH
7890: FOR_TO
7891: IFFALSE 7930
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7893: LD_ADDR_VAR 0 9
7897: PUSH
7898: LD_VAR 0 9
7902: PPUSH
7903: LD_VAR 0 7
7907: PPUSH
7908: LD_VAR 0 6
7912: PUSH
7913: LD_VAR 0 7
7917: ARRAY
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: CALL_OW 1
7927: ST_TO_ADDR
7928: GO 7890
7930: POP
7931: POP
// result := tmp ;
7932: LD_ADDR_VAR 0 6
7936: PUSH
7937: LD_VAR 0 9
7941: ST_TO_ADDR
// end ; end ;
7942: LD_VAR 0 6
7946: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7947: LD_INT 0
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7955: LD_ADDR_VAR 0 5
7959: PUSH
7960: LD_INT 0
7962: PUSH
7963: LD_INT 0
7965: PUSH
7966: LD_INT 0
7968: PUSH
7969: EMPTY
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: ST_TO_ADDR
// if not x or not y then
7977: LD_VAR 0 2
7981: NOT
7982: PUSH
7983: LD_VAR 0 3
7987: NOT
7988: OR
7989: IFFALSE 7993
// exit ;
7991: GO 9643
// if not range then
7993: LD_VAR 0 4
7997: NOT
7998: IFFALSE 8008
// range := 10 ;
8000: LD_ADDR_VAR 0 4
8004: PUSH
8005: LD_INT 10
8007: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 81
8015: PUSH
8016: LD_VAR 0 1
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 92
8027: PUSH
8028: LD_VAR 0 2
8032: PUSH
8033: LD_VAR 0 3
8037: PUSH
8038: LD_VAR 0 4
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 3
8051: PUSH
8052: LD_INT 21
8054: PUSH
8055: LD_INT 3
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: ST_TO_ADDR
// if not tmp then
8076: LD_VAR 0 8
8080: NOT
8081: IFFALSE 8085
// exit ;
8083: GO 9643
// for i in tmp do
8085: LD_ADDR_VAR 0 6
8089: PUSH
8090: LD_VAR 0 8
8094: PUSH
8095: FOR_IN
8096: IFFALSE 9618
// begin points := [ 0 , 0 , 0 ] ;
8098: LD_ADDR_VAR 0 9
8102: PUSH
8103: LD_INT 0
8105: PUSH
8106: LD_INT 0
8108: PUSH
8109: LD_INT 0
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: ST_TO_ADDR
// bpoints := 1 ;
8117: LD_ADDR_VAR 0 10
8121: PUSH
8122: LD_INT 1
8124: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8125: LD_VAR 0 6
8129: PPUSH
8130: CALL_OW 247
8134: PUSH
8135: LD_INT 1
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8721
8143: POP
// begin if GetClass ( i ) = 1 then
8144: LD_VAR 0 6
8148: PPUSH
8149: CALL_OW 257
8153: PUSH
8154: LD_INT 1
8156: EQUAL
8157: IFFALSE 8178
// points := [ 10 , 5 , 3 ] ;
8159: LD_ADDR_VAR 0 9
8163: PUSH
8164: LD_INT 10
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: LD_INT 3
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: LIST
8177: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8178: LD_VAR 0 6
8182: PPUSH
8183: CALL_OW 257
8187: PUSH
8188: LD_INT 2
8190: PUSH
8191: LD_INT 3
8193: PUSH
8194: LD_INT 4
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: IN
8202: IFFALSE 8223
// points := [ 3 , 2 , 1 ] ;
8204: LD_ADDR_VAR 0 9
8208: PUSH
8209: LD_INT 3
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8223: LD_VAR 0 6
8227: PPUSH
8228: CALL_OW 257
8232: PUSH
8233: LD_INT 5
8235: EQUAL
8236: IFFALSE 8257
// points := [ 130 , 5 , 2 ] ;
8238: LD_ADDR_VAR 0 9
8242: PUSH
8243: LD_INT 130
8245: PUSH
8246: LD_INT 5
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8257: LD_VAR 0 6
8261: PPUSH
8262: CALL_OW 257
8266: PUSH
8267: LD_INT 8
8269: EQUAL
8270: IFFALSE 8291
// points := [ 35 , 35 , 30 ] ;
8272: LD_ADDR_VAR 0 9
8276: PUSH
8277: LD_INT 35
8279: PUSH
8280: LD_INT 35
8282: PUSH
8283: LD_INT 30
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8291: LD_VAR 0 6
8295: PPUSH
8296: CALL_OW 257
8300: PUSH
8301: LD_INT 9
8303: EQUAL
8304: IFFALSE 8325
// points := [ 20 , 55 , 40 ] ;
8306: LD_ADDR_VAR 0 9
8310: PUSH
8311: LD_INT 20
8313: PUSH
8314: LD_INT 55
8316: PUSH
8317: LD_INT 40
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: LIST
8324: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8325: LD_VAR 0 6
8329: PPUSH
8330: CALL_OW 257
8334: PUSH
8335: LD_INT 12
8337: PUSH
8338: LD_INT 16
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: IN
8345: IFFALSE 8366
// points := [ 5 , 3 , 2 ] ;
8347: LD_ADDR_VAR 0 9
8351: PUSH
8352: LD_INT 5
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: LD_INT 2
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8366: LD_VAR 0 6
8370: PPUSH
8371: CALL_OW 257
8375: PUSH
8376: LD_INT 17
8378: EQUAL
8379: IFFALSE 8400
// points := [ 100 , 50 , 75 ] ;
8381: LD_ADDR_VAR 0 9
8385: PUSH
8386: LD_INT 100
8388: PUSH
8389: LD_INT 50
8391: PUSH
8392: LD_INT 75
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8400: LD_VAR 0 6
8404: PPUSH
8405: CALL_OW 257
8409: PUSH
8410: LD_INT 15
8412: EQUAL
8413: IFFALSE 8434
// points := [ 10 , 5 , 3 ] ;
8415: LD_ADDR_VAR 0 9
8419: PUSH
8420: LD_INT 10
8422: PUSH
8423: LD_INT 5
8425: PUSH
8426: LD_INT 3
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8434: LD_VAR 0 6
8438: PPUSH
8439: CALL_OW 257
8443: PUSH
8444: LD_INT 14
8446: EQUAL
8447: IFFALSE 8468
// points := [ 10 , 0 , 0 ] ;
8449: LD_ADDR_VAR 0 9
8453: PUSH
8454: LD_INT 10
8456: PUSH
8457: LD_INT 0
8459: PUSH
8460: LD_INT 0
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8468: LD_VAR 0 6
8472: PPUSH
8473: CALL_OW 257
8477: PUSH
8478: LD_INT 11
8480: EQUAL
8481: IFFALSE 8502
// points := [ 30 , 10 , 5 ] ;
8483: LD_ADDR_VAR 0 9
8487: PUSH
8488: LD_INT 30
8490: PUSH
8491: LD_INT 10
8493: PUSH
8494: LD_INT 5
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8502: LD_VAR 0 1
8506: PPUSH
8507: LD_INT 5
8509: PPUSH
8510: CALL_OW 321
8514: PUSH
8515: LD_INT 2
8517: EQUAL
8518: IFFALSE 8535
// bpoints := bpoints * 1.8 ;
8520: LD_ADDR_VAR 0 10
8524: PUSH
8525: LD_VAR 0 10
8529: PUSH
8530: LD_REAL  1.80000000000000E+0000
8533: MUL
8534: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8535: LD_VAR 0 6
8539: PPUSH
8540: CALL_OW 257
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: LD_INT 2
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 4
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: IN
8563: PUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_INT 51
8571: PPUSH
8572: CALL_OW 321
8576: PUSH
8577: LD_INT 2
8579: EQUAL
8580: AND
8581: IFFALSE 8598
// bpoints := bpoints * 1.2 ;
8583: LD_ADDR_VAR 0 10
8587: PUSH
8588: LD_VAR 0 10
8592: PUSH
8593: LD_REAL  1.20000000000000E+0000
8596: MUL
8597: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8598: LD_VAR 0 6
8602: PPUSH
8603: CALL_OW 257
8607: PUSH
8608: LD_INT 5
8610: PUSH
8611: LD_INT 7
8613: PUSH
8614: LD_INT 9
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: IN
8622: PUSH
8623: LD_VAR 0 1
8627: PPUSH
8628: LD_INT 52
8630: PPUSH
8631: CALL_OW 321
8635: PUSH
8636: LD_INT 2
8638: EQUAL
8639: AND
8640: IFFALSE 8657
// bpoints := bpoints * 1.5 ;
8642: LD_ADDR_VAR 0 10
8646: PUSH
8647: LD_VAR 0 10
8651: PUSH
8652: LD_REAL  1.50000000000000E+0000
8655: MUL
8656: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8657: LD_VAR 0 1
8661: PPUSH
8662: LD_INT 66
8664: PPUSH
8665: CALL_OW 321
8669: PUSH
8670: LD_INT 2
8672: EQUAL
8673: IFFALSE 8690
// bpoints := bpoints * 1.1 ;
8675: LD_ADDR_VAR 0 10
8679: PUSH
8680: LD_VAR 0 10
8684: PUSH
8685: LD_REAL  1.10000000000000E+0000
8688: MUL
8689: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8690: LD_ADDR_VAR 0 10
8694: PUSH
8695: LD_VAR 0 10
8699: PUSH
8700: LD_VAR 0 6
8704: PPUSH
8705: LD_INT 1
8707: PPUSH
8708: CALL_OW 259
8712: PUSH
8713: LD_REAL  1.15000000000000E+0000
8716: MUL
8717: MUL
8718: ST_TO_ADDR
// end ; unit_vehicle :
8719: GO 9547
8721: LD_INT 2
8723: DOUBLE
8724: EQUAL
8725: IFTRUE 8729
8727: GO 9535
8729: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8730: LD_VAR 0 6
8734: PPUSH
8735: CALL_OW 264
8739: PUSH
8740: LD_INT 2
8742: PUSH
8743: LD_INT 42
8745: PUSH
8746: LD_INT 24
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: IN
8754: IFFALSE 8775
// points := [ 25 , 5 , 3 ] ;
8756: LD_ADDR_VAR 0 9
8760: PUSH
8761: LD_INT 25
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 3
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8775: LD_VAR 0 6
8779: PPUSH
8780: CALL_OW 264
8784: PUSH
8785: LD_INT 4
8787: PUSH
8788: LD_INT 43
8790: PUSH
8791: LD_INT 25
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: LIST
8798: IN
8799: IFFALSE 8820
// points := [ 40 , 15 , 5 ] ;
8801: LD_ADDR_VAR 0 9
8805: PUSH
8806: LD_INT 40
8808: PUSH
8809: LD_INT 15
8811: PUSH
8812: LD_INT 5
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8820: LD_VAR 0 6
8824: PPUSH
8825: CALL_OW 264
8829: PUSH
8830: LD_INT 3
8832: PUSH
8833: LD_INT 23
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: IN
8840: IFFALSE 8861
// points := [ 7 , 25 , 8 ] ;
8842: LD_ADDR_VAR 0 9
8846: PUSH
8847: LD_INT 7
8849: PUSH
8850: LD_INT 25
8852: PUSH
8853: LD_INT 8
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8861: LD_VAR 0 6
8865: PPUSH
8866: CALL_OW 264
8870: PUSH
8871: LD_INT 5
8873: PUSH
8874: LD_INT 27
8876: PUSH
8877: LD_INT 44
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: IN
8885: IFFALSE 8906
// points := [ 14 , 50 , 16 ] ;
8887: LD_ADDR_VAR 0 9
8891: PUSH
8892: LD_INT 14
8894: PUSH
8895: LD_INT 50
8897: PUSH
8898: LD_INT 16
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8906: LD_VAR 0 6
8910: PPUSH
8911: CALL_OW 264
8915: PUSH
8916: LD_INT 6
8918: PUSH
8919: LD_INT 46
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: IN
8926: IFFALSE 8947
// points := [ 32 , 120 , 70 ] ;
8928: LD_ADDR_VAR 0 9
8932: PUSH
8933: LD_INT 32
8935: PUSH
8936: LD_INT 120
8938: PUSH
8939: LD_INT 70
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8947: LD_VAR 0 6
8951: PPUSH
8952: CALL_OW 264
8956: PUSH
8957: LD_INT 7
8959: PUSH
8960: LD_INT 28
8962: PUSH
8963: LD_INT 45
8965: PUSH
8966: LD_INT 92
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: IN
8975: IFFALSE 8996
// points := [ 35 , 20 , 45 ] ;
8977: LD_ADDR_VAR 0 9
8981: PUSH
8982: LD_INT 35
8984: PUSH
8985: LD_INT 20
8987: PUSH
8988: LD_INT 45
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8996: LD_VAR 0 6
9000: PPUSH
9001: CALL_OW 264
9005: PUSH
9006: LD_INT 47
9008: PUSH
9009: EMPTY
9010: LIST
9011: IN
9012: IFFALSE 9033
// points := [ 67 , 45 , 75 ] ;
9014: LD_ADDR_VAR 0 9
9018: PUSH
9019: LD_INT 67
9021: PUSH
9022: LD_INT 45
9024: PUSH
9025: LD_INT 75
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: LIST
9032: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9033: LD_VAR 0 6
9037: PPUSH
9038: CALL_OW 264
9042: PUSH
9043: LD_INT 26
9045: PUSH
9046: EMPTY
9047: LIST
9048: IN
9049: IFFALSE 9070
// points := [ 120 , 30 , 80 ] ;
9051: LD_ADDR_VAR 0 9
9055: PUSH
9056: LD_INT 120
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 80
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9070: LD_VAR 0 6
9074: PPUSH
9075: CALL_OW 264
9079: PUSH
9080: LD_INT 22
9082: PUSH
9083: EMPTY
9084: LIST
9085: IN
9086: IFFALSE 9107
// points := [ 40 , 1 , 1 ] ;
9088: LD_ADDR_VAR 0 9
9092: PUSH
9093: LD_INT 40
9095: PUSH
9096: LD_INT 1
9098: PUSH
9099: LD_INT 1
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9107: LD_VAR 0 6
9111: PPUSH
9112: CALL_OW 264
9116: PUSH
9117: LD_INT 29
9119: PUSH
9120: EMPTY
9121: LIST
9122: IN
9123: IFFALSE 9144
// points := [ 70 , 200 , 400 ] ;
9125: LD_ADDR_VAR 0 9
9129: PUSH
9130: LD_INT 70
9132: PUSH
9133: LD_INT 200
9135: PUSH
9136: LD_INT 400
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9144: LD_VAR 0 6
9148: PPUSH
9149: CALL_OW 264
9153: PUSH
9154: LD_INT 14
9156: PUSH
9157: LD_INT 53
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: IN
9164: IFFALSE 9185
// points := [ 40 , 10 , 20 ] ;
9166: LD_ADDR_VAR 0 9
9170: PUSH
9171: LD_INT 40
9173: PUSH
9174: LD_INT 10
9176: PUSH
9177: LD_INT 20
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9185: LD_VAR 0 6
9189: PPUSH
9190: CALL_OW 264
9194: PUSH
9195: LD_INT 9
9197: PUSH
9198: EMPTY
9199: LIST
9200: IN
9201: IFFALSE 9222
// points := [ 5 , 70 , 20 ] ;
9203: LD_ADDR_VAR 0 9
9207: PUSH
9208: LD_INT 5
9210: PUSH
9211: LD_INT 70
9213: PUSH
9214: LD_INT 20
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9222: LD_VAR 0 6
9226: PPUSH
9227: CALL_OW 264
9231: PUSH
9232: LD_INT 10
9234: PUSH
9235: EMPTY
9236: LIST
9237: IN
9238: IFFALSE 9259
// points := [ 35 , 110 , 70 ] ;
9240: LD_ADDR_VAR 0 9
9244: PUSH
9245: LD_INT 35
9247: PUSH
9248: LD_INT 110
9250: PUSH
9251: LD_INT 70
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: LIST
9258: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9259: LD_VAR 0 6
9263: PPUSH
9264: CALL_OW 265
9268: PUSH
9269: LD_INT 25
9271: EQUAL
9272: IFFALSE 9293
// points := [ 80 , 65 , 100 ] ;
9274: LD_ADDR_VAR 0 9
9278: PUSH
9279: LD_INT 80
9281: PUSH
9282: LD_INT 65
9284: PUSH
9285: LD_INT 100
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9293: LD_VAR 0 6
9297: PPUSH
9298: CALL_OW 263
9302: PUSH
9303: LD_INT 1
9305: EQUAL
9306: IFFALSE 9341
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9308: LD_ADDR_VAR 0 10
9312: PUSH
9313: LD_VAR 0 10
9317: PUSH
9318: LD_VAR 0 6
9322: PPUSH
9323: CALL_OW 311
9327: PPUSH
9328: LD_INT 3
9330: PPUSH
9331: CALL_OW 259
9335: PUSH
9336: LD_INT 4
9338: MUL
9339: MUL
9340: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9341: LD_VAR 0 6
9345: PPUSH
9346: CALL_OW 263
9350: PUSH
9351: LD_INT 2
9353: EQUAL
9354: IFFALSE 9405
// begin j := IsControledBy ( i ) ;
9356: LD_ADDR_VAR 0 7
9360: PUSH
9361: LD_VAR 0 6
9365: PPUSH
9366: CALL_OW 312
9370: ST_TO_ADDR
// if j then
9371: LD_VAR 0 7
9375: IFFALSE 9405
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9377: LD_ADDR_VAR 0 10
9381: PUSH
9382: LD_VAR 0 10
9386: PUSH
9387: LD_VAR 0 7
9391: PPUSH
9392: LD_INT 3
9394: PPUSH
9395: CALL_OW 259
9399: PUSH
9400: LD_INT 3
9402: MUL
9403: MUL
9404: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9405: LD_VAR 0 6
9409: PPUSH
9410: CALL_OW 264
9414: PUSH
9415: LD_INT 5
9417: PUSH
9418: LD_INT 6
9420: PUSH
9421: LD_INT 46
9423: PUSH
9424: LD_INT 44
9426: PUSH
9427: LD_INT 47
9429: PUSH
9430: LD_INT 45
9432: PUSH
9433: LD_INT 28
9435: PUSH
9436: LD_INT 7
9438: PUSH
9439: LD_INT 27
9441: PUSH
9442: LD_INT 29
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: IN
9457: PUSH
9458: LD_VAR 0 1
9462: PPUSH
9463: LD_INT 52
9465: PPUSH
9466: CALL_OW 321
9470: PUSH
9471: LD_INT 2
9473: EQUAL
9474: AND
9475: IFFALSE 9492
// bpoints := bpoints * 1.2 ;
9477: LD_ADDR_VAR 0 10
9481: PUSH
9482: LD_VAR 0 10
9486: PUSH
9487: LD_REAL  1.20000000000000E+0000
9490: MUL
9491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9492: LD_VAR 0 6
9496: PPUSH
9497: CALL_OW 264
9501: PUSH
9502: LD_INT 6
9504: PUSH
9505: LD_INT 46
9507: PUSH
9508: LD_INT 47
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: IN
9516: IFFALSE 9533
// bpoints := bpoints * 1.2 ;
9518: LD_ADDR_VAR 0 10
9522: PUSH
9523: LD_VAR 0 10
9527: PUSH
9528: LD_REAL  1.20000000000000E+0000
9531: MUL
9532: ST_TO_ADDR
// end ; unit_building :
9533: GO 9547
9535: LD_INT 3
9537: DOUBLE
9538: EQUAL
9539: IFTRUE 9543
9541: GO 9546
9543: POP
// ; end ;
9544: GO 9547
9546: POP
// for j = 1 to 3 do
9547: LD_ADDR_VAR 0 7
9551: PUSH
9552: DOUBLE
9553: LD_INT 1
9555: DEC
9556: ST_TO_ADDR
9557: LD_INT 3
9559: PUSH
9560: FOR_TO
9561: IFFALSE 9614
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9563: LD_ADDR_VAR 0 5
9567: PUSH
9568: LD_VAR 0 5
9572: PPUSH
9573: LD_VAR 0 7
9577: PPUSH
9578: LD_VAR 0 5
9582: PUSH
9583: LD_VAR 0 7
9587: ARRAY
9588: PUSH
9589: LD_VAR 0 9
9593: PUSH
9594: LD_VAR 0 7
9598: ARRAY
9599: PUSH
9600: LD_VAR 0 10
9604: MUL
9605: PLUS
9606: PPUSH
9607: CALL_OW 1
9611: ST_TO_ADDR
9612: GO 9560
9614: POP
9615: POP
// end ;
9616: GO 8095
9618: POP
9619: POP
// result := Replace ( result , 4 , tmp ) ;
9620: LD_ADDR_VAR 0 5
9624: PUSH
9625: LD_VAR 0 5
9629: PPUSH
9630: LD_INT 4
9632: PPUSH
9633: LD_VAR 0 8
9637: PPUSH
9638: CALL_OW 1
9642: ST_TO_ADDR
// end ;
9643: LD_VAR 0 5
9647: RET
// export function DangerAtRange ( unit , range ) ; begin
9648: LD_INT 0
9650: PPUSH
// if not unit then
9651: LD_VAR 0 1
9655: NOT
9656: IFFALSE 9660
// exit ;
9658: GO 9705
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9660: LD_ADDR_VAR 0 3
9664: PUSH
9665: LD_VAR 0 1
9669: PPUSH
9670: CALL_OW 255
9674: PPUSH
9675: LD_VAR 0 1
9679: PPUSH
9680: CALL_OW 250
9684: PPUSH
9685: LD_VAR 0 1
9689: PPUSH
9690: CALL_OW 251
9694: PPUSH
9695: LD_VAR 0 2
9699: PPUSH
9700: CALL 7947 0 4
9704: ST_TO_ADDR
// end ;
9705: LD_VAR 0 3
9709: RET
// export function DangerInArea ( side , area ) ; begin
9710: LD_INT 0
9712: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9713: LD_ADDR_VAR 0 3
9717: PUSH
9718: LD_VAR 0 2
9722: PPUSH
9723: LD_INT 81
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PPUSH
9735: CALL_OW 70
9739: ST_TO_ADDR
// end ;
9740: LD_VAR 0 3
9744: RET
// export function IsExtension ( b ) ; begin
9745: LD_INT 0
9747: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9748: LD_ADDR_VAR 0 2
9752: PUSH
9753: LD_VAR 0 1
9757: PUSH
9758: LD_INT 23
9760: PUSH
9761: LD_INT 20
9763: PUSH
9764: LD_INT 22
9766: PUSH
9767: LD_INT 17
9769: PUSH
9770: LD_INT 24
9772: PUSH
9773: LD_INT 21
9775: PUSH
9776: LD_INT 19
9778: PUSH
9779: LD_INT 16
9781: PUSH
9782: LD_INT 25
9784: PUSH
9785: LD_INT 18
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: IN
9800: ST_TO_ADDR
// end ;
9801: LD_VAR 0 2
9805: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9806: LD_INT 0
9808: PPUSH
9809: PPUSH
9810: PPUSH
// result := [ ] ;
9811: LD_ADDR_VAR 0 4
9815: PUSH
9816: EMPTY
9817: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9818: LD_ADDR_VAR 0 5
9822: PUSH
9823: LD_VAR 0 2
9827: PPUSH
9828: LD_INT 21
9830: PUSH
9831: LD_INT 3
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PPUSH
9838: CALL_OW 70
9842: ST_TO_ADDR
// if not tmp then
9843: LD_VAR 0 5
9847: NOT
9848: IFFALSE 9852
// exit ;
9850: GO 9916
// if checkLink then
9852: LD_VAR 0 3
9856: IFFALSE 9906
// begin for i in tmp do
9858: LD_ADDR_VAR 0 6
9862: PUSH
9863: LD_VAR 0 5
9867: PUSH
9868: FOR_IN
9869: IFFALSE 9904
// if GetBase ( i ) <> base then
9871: LD_VAR 0 6
9875: PPUSH
9876: CALL_OW 274
9880: PUSH
9881: LD_VAR 0 1
9885: NONEQUAL
9886: IFFALSE 9902
// ComLinkToBase ( base , i ) ;
9888: LD_VAR 0 1
9892: PPUSH
9893: LD_VAR 0 6
9897: PPUSH
9898: CALL_OW 169
9902: GO 9868
9904: POP
9905: POP
// end ; result := tmp ;
9906: LD_ADDR_VAR 0 4
9910: PUSH
9911: LD_VAR 0 5
9915: ST_TO_ADDR
// end ;
9916: LD_VAR 0 4
9920: RET
// export function ComComplete ( units , b ) ; var i ; begin
9921: LD_INT 0
9923: PPUSH
9924: PPUSH
// if not units then
9925: LD_VAR 0 1
9929: NOT
9930: IFFALSE 9934
// exit ;
9932: GO 10024
// for i in units do
9934: LD_ADDR_VAR 0 4
9938: PUSH
9939: LD_VAR 0 1
9943: PUSH
9944: FOR_IN
9945: IFFALSE 10022
// if BuildingStatus ( b ) = bs_build then
9947: LD_VAR 0 2
9951: PPUSH
9952: CALL_OW 461
9956: PUSH
9957: LD_INT 1
9959: EQUAL
9960: IFFALSE 10020
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9962: LD_VAR 0 4
9966: PPUSH
9967: LD_STRING h
9969: PUSH
9970: LD_VAR 0 2
9974: PPUSH
9975: CALL_OW 250
9979: PUSH
9980: LD_VAR 0 2
9984: PPUSH
9985: CALL_OW 251
9989: PUSH
9990: LD_VAR 0 2
9994: PUSH
9995: LD_INT 0
9997: PUSH
9998: LD_INT 0
10000: PUSH
10001: LD_INT 0
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: PPUSH
10016: CALL_OW 446
10020: GO 9944
10022: POP
10023: POP
// end ;
10024: LD_VAR 0 3
10028: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10029: LD_INT 0
10031: PPUSH
10032: PPUSH
10033: PPUSH
10034: PPUSH
10035: PPUSH
10036: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10037: LD_VAR 0 1
10041: NOT
10042: PUSH
10043: LD_VAR 0 1
10047: PPUSH
10048: CALL_OW 263
10052: PUSH
10053: LD_INT 2
10055: NONEQUAL
10056: OR
10057: IFFALSE 10061
// exit ;
10059: GO 10377
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10061: LD_ADDR_VAR 0 6
10065: PUSH
10066: LD_INT 22
10068: PUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 255
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 2
10085: PUSH
10086: LD_INT 30
10088: PUSH
10089: LD_INT 36
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 34
10098: PUSH
10099: LD_INT 31
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PPUSH
10115: CALL_OW 69
10119: ST_TO_ADDR
// if not tmp then
10120: LD_VAR 0 6
10124: NOT
10125: IFFALSE 10129
// exit ;
10127: GO 10377
// result := [ ] ;
10129: LD_ADDR_VAR 0 2
10133: PUSH
10134: EMPTY
10135: ST_TO_ADDR
// for i in tmp do
10136: LD_ADDR_VAR 0 3
10140: PUSH
10141: LD_VAR 0 6
10145: PUSH
10146: FOR_IN
10147: IFFALSE 10218
// begin t := UnitsInside ( i ) ;
10149: LD_ADDR_VAR 0 4
10153: PUSH
10154: LD_VAR 0 3
10158: PPUSH
10159: CALL_OW 313
10163: ST_TO_ADDR
// if t then
10164: LD_VAR 0 4
10168: IFFALSE 10216
// for j in t do
10170: LD_ADDR_VAR 0 7
10174: PUSH
10175: LD_VAR 0 4
10179: PUSH
10180: FOR_IN
10181: IFFALSE 10214
// result := Replace ( result , result + 1 , j ) ;
10183: LD_ADDR_VAR 0 2
10187: PUSH
10188: LD_VAR 0 2
10192: PPUSH
10193: LD_VAR 0 2
10197: PUSH
10198: LD_INT 1
10200: PLUS
10201: PPUSH
10202: LD_VAR 0 7
10206: PPUSH
10207: CALL_OW 1
10211: ST_TO_ADDR
10212: GO 10180
10214: POP
10215: POP
// end ;
10216: GO 10146
10218: POP
10219: POP
// if not result then
10220: LD_VAR 0 2
10224: NOT
10225: IFFALSE 10229
// exit ;
10227: GO 10377
// mech := result [ 1 ] ;
10229: LD_ADDR_VAR 0 5
10233: PUSH
10234: LD_VAR 0 2
10238: PUSH
10239: LD_INT 1
10241: ARRAY
10242: ST_TO_ADDR
// if result > 1 then
10243: LD_VAR 0 2
10247: PUSH
10248: LD_INT 1
10250: GREATER
10251: IFFALSE 10363
// begin for i = 2 to result do
10253: LD_ADDR_VAR 0 3
10257: PUSH
10258: DOUBLE
10259: LD_INT 2
10261: DEC
10262: ST_TO_ADDR
10263: LD_VAR 0 2
10267: PUSH
10268: FOR_TO
10269: IFFALSE 10361
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10271: LD_ADDR_VAR 0 4
10275: PUSH
10276: LD_VAR 0 2
10280: PUSH
10281: LD_VAR 0 3
10285: ARRAY
10286: PPUSH
10287: LD_INT 3
10289: PPUSH
10290: CALL_OW 259
10294: PUSH
10295: LD_VAR 0 2
10299: PUSH
10300: LD_VAR 0 3
10304: ARRAY
10305: PPUSH
10306: CALL_OW 432
10310: MINUS
10311: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10312: LD_VAR 0 4
10316: PUSH
10317: LD_VAR 0 5
10321: PPUSH
10322: LD_INT 3
10324: PPUSH
10325: CALL_OW 259
10329: PUSH
10330: LD_VAR 0 5
10334: PPUSH
10335: CALL_OW 432
10339: MINUS
10340: GREATEREQUAL
10341: IFFALSE 10359
// mech := result [ i ] ;
10343: LD_ADDR_VAR 0 5
10347: PUSH
10348: LD_VAR 0 2
10352: PUSH
10353: LD_VAR 0 3
10357: ARRAY
10358: ST_TO_ADDR
// end ;
10359: GO 10268
10361: POP
10362: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10363: LD_VAR 0 1
10367: PPUSH
10368: LD_VAR 0 5
10372: PPUSH
10373: CALL_OW 135
// end ;
10377: LD_VAR 0 2
10381: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10382: LD_INT 0
10384: PPUSH
10385: PPUSH
10386: PPUSH
10387: PPUSH
10388: PPUSH
10389: PPUSH
10390: PPUSH
10391: PPUSH
10392: PPUSH
10393: PPUSH
10394: PPUSH
10395: PPUSH
10396: PPUSH
// result := [ ] ;
10397: LD_ADDR_VAR 0 7
10401: PUSH
10402: EMPTY
10403: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10404: LD_VAR 0 1
10408: PPUSH
10409: CALL_OW 266
10413: PUSH
10414: LD_INT 0
10416: PUSH
10417: LD_INT 1
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: IN
10424: NOT
10425: IFFALSE 10429
// exit ;
10427: GO 12063
// if name then
10429: LD_VAR 0 3
10433: IFFALSE 10449
// SetBName ( base_dep , name ) ;
10435: LD_VAR 0 1
10439: PPUSH
10440: LD_VAR 0 3
10444: PPUSH
10445: CALL_OW 500
// base := GetBase ( base_dep ) ;
10449: LD_ADDR_VAR 0 15
10453: PUSH
10454: LD_VAR 0 1
10458: PPUSH
10459: CALL_OW 274
10463: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10464: LD_ADDR_VAR 0 16
10468: PUSH
10469: LD_VAR 0 1
10473: PPUSH
10474: CALL_OW 255
10478: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10479: LD_ADDR_VAR 0 17
10483: PUSH
10484: LD_VAR 0 1
10488: PPUSH
10489: CALL_OW 248
10493: ST_TO_ADDR
// if sources then
10494: LD_VAR 0 5
10498: IFFALSE 10545
// for i = 1 to 3 do
10500: LD_ADDR_VAR 0 8
10504: PUSH
10505: DOUBLE
10506: LD_INT 1
10508: DEC
10509: ST_TO_ADDR
10510: LD_INT 3
10512: PUSH
10513: FOR_TO
10514: IFFALSE 10543
// AddResourceType ( base , i , sources [ i ] ) ;
10516: LD_VAR 0 15
10520: PPUSH
10521: LD_VAR 0 8
10525: PPUSH
10526: LD_VAR 0 5
10530: PUSH
10531: LD_VAR 0 8
10535: ARRAY
10536: PPUSH
10537: CALL_OW 276
10541: GO 10513
10543: POP
10544: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10545: LD_ADDR_VAR 0 18
10549: PUSH
10550: LD_VAR 0 15
10554: PPUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL 9806 0 3
10567: ST_TO_ADDR
// InitHc ;
10568: CALL_OW 19
// InitUc ;
10572: CALL_OW 18
// uc_side := side ;
10576: LD_ADDR_OWVAR 20
10580: PUSH
10581: LD_VAR 0 16
10585: ST_TO_ADDR
// uc_nation := nation ;
10586: LD_ADDR_OWVAR 21
10590: PUSH
10591: LD_VAR 0 17
10595: ST_TO_ADDR
// if buildings then
10596: LD_VAR 0 18
10600: IFFALSE 11922
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10602: LD_ADDR_VAR 0 19
10606: PUSH
10607: LD_VAR 0 18
10611: PPUSH
10612: LD_INT 2
10614: PUSH
10615: LD_INT 30
10617: PUSH
10618: LD_INT 29
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 30
10627: PUSH
10628: LD_INT 30
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 72
10644: ST_TO_ADDR
// if tmp then
10645: LD_VAR 0 19
10649: IFFALSE 10697
// for i in tmp do
10651: LD_ADDR_VAR 0 8
10655: PUSH
10656: LD_VAR 0 19
10660: PUSH
10661: FOR_IN
10662: IFFALSE 10695
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10664: LD_VAR 0 8
10668: PPUSH
10669: CALL_OW 250
10673: PPUSH
10674: LD_VAR 0 8
10678: PPUSH
10679: CALL_OW 251
10683: PPUSH
10684: LD_VAR 0 16
10688: PPUSH
10689: CALL_OW 441
10693: GO 10661
10695: POP
10696: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10697: LD_VAR 0 18
10701: PPUSH
10702: LD_INT 2
10704: PUSH
10705: LD_INT 30
10707: PUSH
10708: LD_INT 32
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 30
10717: PUSH
10718: LD_INT 33
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: PPUSH
10730: CALL_OW 72
10734: IFFALSE 10822
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10736: LD_ADDR_VAR 0 8
10740: PUSH
10741: LD_VAR 0 18
10745: PPUSH
10746: LD_INT 2
10748: PUSH
10749: LD_INT 30
10751: PUSH
10752: LD_INT 32
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 30
10761: PUSH
10762: LD_INT 33
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: PPUSH
10774: CALL_OW 72
10778: PUSH
10779: FOR_IN
10780: IFFALSE 10820
// begin if not GetBWeapon ( i ) then
10782: LD_VAR 0 8
10786: PPUSH
10787: CALL_OW 269
10791: NOT
10792: IFFALSE 10818
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10794: LD_VAR 0 8
10798: PPUSH
10799: LD_VAR 0 8
10803: PPUSH
10804: LD_VAR 0 2
10808: PPUSH
10809: CALL 12068 0 2
10813: PPUSH
10814: CALL_OW 431
// end ;
10818: GO 10779
10820: POP
10821: POP
// end ; for i = 1 to personel do
10822: LD_ADDR_VAR 0 8
10826: PUSH
10827: DOUBLE
10828: LD_INT 1
10830: DEC
10831: ST_TO_ADDR
10832: LD_VAR 0 6
10836: PUSH
10837: FOR_TO
10838: IFFALSE 11902
// begin if i > 4 then
10840: LD_VAR 0 8
10844: PUSH
10845: LD_INT 4
10847: GREATER
10848: IFFALSE 10852
// break ;
10850: GO 11902
// case i of 1 :
10852: LD_VAR 0 8
10856: PUSH
10857: LD_INT 1
10859: DOUBLE
10860: EQUAL
10861: IFTRUE 10865
10863: GO 10945
10865: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10866: LD_ADDR_VAR 0 12
10870: PUSH
10871: LD_VAR 0 18
10875: PPUSH
10876: LD_INT 22
10878: PUSH
10879: LD_VAR 0 16
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 58
10890: PUSH
10891: EMPTY
10892: LIST
10893: PUSH
10894: LD_INT 2
10896: PUSH
10897: LD_INT 30
10899: PUSH
10900: LD_INT 32
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 30
10909: PUSH
10910: LD_INT 4
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 30
10919: PUSH
10920: LD_INT 5
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: PPUSH
10938: CALL_OW 72
10942: ST_TO_ADDR
10943: GO 11167
10945: LD_INT 2
10947: DOUBLE
10948: EQUAL
10949: IFTRUE 10953
10951: GO 11015
10953: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10954: LD_ADDR_VAR 0 12
10958: PUSH
10959: LD_VAR 0 18
10963: PPUSH
10964: LD_INT 22
10966: PUSH
10967: LD_VAR 0 16
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 2
10978: PUSH
10979: LD_INT 30
10981: PUSH
10982: LD_INT 0
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 30
10991: PUSH
10992: LD_INT 1
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 72
11012: ST_TO_ADDR
11013: GO 11167
11015: LD_INT 3
11017: DOUBLE
11018: EQUAL
11019: IFTRUE 11023
11021: GO 11085
11023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11024: LD_ADDR_VAR 0 12
11028: PUSH
11029: LD_VAR 0 18
11033: PPUSH
11034: LD_INT 22
11036: PUSH
11037: LD_VAR 0 16
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 2
11048: PUSH
11049: LD_INT 30
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 30
11061: PUSH
11062: LD_INT 3
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 72
11082: ST_TO_ADDR
11083: GO 11167
11085: LD_INT 4
11087: DOUBLE
11088: EQUAL
11089: IFTRUE 11093
11091: GO 11166
11093: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11094: LD_ADDR_VAR 0 12
11098: PUSH
11099: LD_VAR 0 18
11103: PPUSH
11104: LD_INT 22
11106: PUSH
11107: LD_VAR 0 16
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 2
11118: PUSH
11119: LD_INT 30
11121: PUSH
11122: LD_INT 6
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 30
11131: PUSH
11132: LD_INT 7
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 30
11141: PUSH
11142: LD_INT 8
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PPUSH
11159: CALL_OW 72
11163: ST_TO_ADDR
11164: GO 11167
11166: POP
// if i = 1 then
11167: LD_VAR 0 8
11171: PUSH
11172: LD_INT 1
11174: EQUAL
11175: IFFALSE 11286
// begin tmp := [ ] ;
11177: LD_ADDR_VAR 0 19
11181: PUSH
11182: EMPTY
11183: ST_TO_ADDR
// for j in f do
11184: LD_ADDR_VAR 0 9
11188: PUSH
11189: LD_VAR 0 12
11193: PUSH
11194: FOR_IN
11195: IFFALSE 11268
// if GetBType ( j ) = b_bunker then
11197: LD_VAR 0 9
11201: PPUSH
11202: CALL_OW 266
11206: PUSH
11207: LD_INT 32
11209: EQUAL
11210: IFFALSE 11237
// tmp := Insert ( tmp , 1 , j ) else
11212: LD_ADDR_VAR 0 19
11216: PUSH
11217: LD_VAR 0 19
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: LD_VAR 0 9
11229: PPUSH
11230: CALL_OW 2
11234: ST_TO_ADDR
11235: GO 11266
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11237: LD_ADDR_VAR 0 19
11241: PUSH
11242: LD_VAR 0 19
11246: PPUSH
11247: LD_VAR 0 19
11251: PUSH
11252: LD_INT 1
11254: PLUS
11255: PPUSH
11256: LD_VAR 0 9
11260: PPUSH
11261: CALL_OW 2
11265: ST_TO_ADDR
11266: GO 11194
11268: POP
11269: POP
// if tmp then
11270: LD_VAR 0 19
11274: IFFALSE 11286
// f := tmp ;
11276: LD_ADDR_VAR 0 12
11280: PUSH
11281: LD_VAR 0 19
11285: ST_TO_ADDR
// end ; x := personel [ i ] ;
11286: LD_ADDR_VAR 0 13
11290: PUSH
11291: LD_VAR 0 6
11295: PUSH
11296: LD_VAR 0 8
11300: ARRAY
11301: ST_TO_ADDR
// if x = - 1 then
11302: LD_VAR 0 13
11306: PUSH
11307: LD_INT 1
11309: NEG
11310: EQUAL
11311: IFFALSE 11520
// begin for j in f do
11313: LD_ADDR_VAR 0 9
11317: PUSH
11318: LD_VAR 0 12
11322: PUSH
11323: FOR_IN
11324: IFFALSE 11516
// repeat InitHc ;
11326: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11330: LD_VAR 0 9
11334: PPUSH
11335: CALL_OW 266
11339: PUSH
11340: LD_INT 5
11342: EQUAL
11343: IFFALSE 11413
// begin if UnitsInside ( j ) < 3 then
11345: LD_VAR 0 9
11349: PPUSH
11350: CALL_OW 313
11354: PUSH
11355: LD_INT 3
11357: LESS
11358: IFFALSE 11394
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11360: LD_INT 0
11362: PPUSH
11363: LD_INT 5
11365: PUSH
11366: LD_INT 8
11368: PUSH
11369: LD_INT 9
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: PUSH
11377: LD_VAR 0 17
11381: ARRAY
11382: PPUSH
11383: LD_VAR 0 4
11387: PPUSH
11388: CALL_OW 380
11392: GO 11411
// PrepareHuman ( false , i , skill ) ;
11394: LD_INT 0
11396: PPUSH
11397: LD_VAR 0 8
11401: PPUSH
11402: LD_VAR 0 4
11406: PPUSH
11407: CALL_OW 380
// end else
11411: GO 11430
// PrepareHuman ( false , i , skill ) ;
11413: LD_INT 0
11415: PPUSH
11416: LD_VAR 0 8
11420: PPUSH
11421: LD_VAR 0 4
11425: PPUSH
11426: CALL_OW 380
// un := CreateHuman ;
11430: LD_ADDR_VAR 0 14
11434: PUSH
11435: CALL_OW 44
11439: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11440: LD_ADDR_VAR 0 7
11444: PUSH
11445: LD_VAR 0 7
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: LD_VAR 0 14
11457: PPUSH
11458: CALL_OW 2
11462: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11463: LD_VAR 0 14
11467: PPUSH
11468: LD_VAR 0 9
11472: PPUSH
11473: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11477: LD_VAR 0 9
11481: PPUSH
11482: CALL_OW 313
11486: PUSH
11487: LD_INT 6
11489: EQUAL
11490: PUSH
11491: LD_VAR 0 9
11495: PPUSH
11496: CALL_OW 266
11500: PUSH
11501: LD_INT 32
11503: PUSH
11504: LD_INT 31
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: IN
11511: OR
11512: IFFALSE 11326
11514: GO 11323
11516: POP
11517: POP
// end else
11518: GO 11900
// for j = 1 to x do
11520: LD_ADDR_VAR 0 9
11524: PUSH
11525: DOUBLE
11526: LD_INT 1
11528: DEC
11529: ST_TO_ADDR
11530: LD_VAR 0 13
11534: PUSH
11535: FOR_TO
11536: IFFALSE 11898
// begin InitHc ;
11538: CALL_OW 19
// if not f then
11542: LD_VAR 0 12
11546: NOT
11547: IFFALSE 11636
// begin PrepareHuman ( false , i , skill ) ;
11549: LD_INT 0
11551: PPUSH
11552: LD_VAR 0 8
11556: PPUSH
11557: LD_VAR 0 4
11561: PPUSH
11562: CALL_OW 380
// un := CreateHuman ;
11566: LD_ADDR_VAR 0 14
11570: PUSH
11571: CALL_OW 44
11575: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11576: LD_ADDR_VAR 0 7
11580: PUSH
11581: LD_VAR 0 7
11585: PPUSH
11586: LD_INT 1
11588: PPUSH
11589: LD_VAR 0 14
11593: PPUSH
11594: CALL_OW 2
11598: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11599: LD_VAR 0 14
11603: PPUSH
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 250
11613: PPUSH
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 251
11623: PPUSH
11624: LD_INT 10
11626: PPUSH
11627: LD_INT 0
11629: PPUSH
11630: CALL_OW 50
// continue ;
11634: GO 11535
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11636: LD_VAR 0 12
11640: PUSH
11641: LD_INT 1
11643: ARRAY
11644: PPUSH
11645: CALL_OW 313
11649: PUSH
11650: LD_VAR 0 12
11654: PUSH
11655: LD_INT 1
11657: ARRAY
11658: PPUSH
11659: CALL_OW 266
11663: PUSH
11664: LD_INT 32
11666: PUSH
11667: LD_INT 31
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: IN
11674: AND
11675: PUSH
11676: LD_VAR 0 12
11680: PUSH
11681: LD_INT 1
11683: ARRAY
11684: PPUSH
11685: CALL_OW 313
11689: PUSH
11690: LD_INT 6
11692: EQUAL
11693: OR
11694: IFFALSE 11714
// f := Delete ( f , 1 ) ;
11696: LD_ADDR_VAR 0 12
11700: PUSH
11701: LD_VAR 0 12
11705: PPUSH
11706: LD_INT 1
11708: PPUSH
11709: CALL_OW 3
11713: ST_TO_ADDR
// if not f then
11714: LD_VAR 0 12
11718: NOT
11719: IFFALSE 11737
// begin x := x + 2 ;
11721: LD_ADDR_VAR 0 13
11725: PUSH
11726: LD_VAR 0 13
11730: PUSH
11731: LD_INT 2
11733: PLUS
11734: ST_TO_ADDR
// continue ;
11735: GO 11535
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11737: LD_VAR 0 12
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: CALL_OW 266
11750: PUSH
11751: LD_INT 5
11753: EQUAL
11754: IFFALSE 11828
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11756: LD_VAR 0 12
11760: PUSH
11761: LD_INT 1
11763: ARRAY
11764: PPUSH
11765: CALL_OW 313
11769: PUSH
11770: LD_INT 3
11772: LESS
11773: IFFALSE 11809
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11775: LD_INT 0
11777: PPUSH
11778: LD_INT 5
11780: PUSH
11781: LD_INT 8
11783: PUSH
11784: LD_INT 9
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: PUSH
11792: LD_VAR 0 17
11796: ARRAY
11797: PPUSH
11798: LD_VAR 0 4
11802: PPUSH
11803: CALL_OW 380
11807: GO 11826
// PrepareHuman ( false , i , skill ) ;
11809: LD_INT 0
11811: PPUSH
11812: LD_VAR 0 8
11816: PPUSH
11817: LD_VAR 0 4
11821: PPUSH
11822: CALL_OW 380
// end else
11826: GO 11845
// PrepareHuman ( false , i , skill ) ;
11828: LD_INT 0
11830: PPUSH
11831: LD_VAR 0 8
11835: PPUSH
11836: LD_VAR 0 4
11840: PPUSH
11841: CALL_OW 380
// un := CreateHuman ;
11845: LD_ADDR_VAR 0 14
11849: PUSH
11850: CALL_OW 44
11854: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11855: LD_ADDR_VAR 0 7
11859: PUSH
11860: LD_VAR 0 7
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: LD_VAR 0 14
11872: PPUSH
11873: CALL_OW 2
11877: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11878: LD_VAR 0 14
11882: PPUSH
11883: LD_VAR 0 12
11887: PUSH
11888: LD_INT 1
11890: ARRAY
11891: PPUSH
11892: CALL_OW 52
// end ;
11896: GO 11535
11898: POP
11899: POP
// end ;
11900: GO 10837
11902: POP
11903: POP
// result := result ^ buildings ;
11904: LD_ADDR_VAR 0 7
11908: PUSH
11909: LD_VAR 0 7
11913: PUSH
11914: LD_VAR 0 18
11918: ADD
11919: ST_TO_ADDR
// end else
11920: GO 12063
// begin for i = 1 to personel do
11922: LD_ADDR_VAR 0 8
11926: PUSH
11927: DOUBLE
11928: LD_INT 1
11930: DEC
11931: ST_TO_ADDR
11932: LD_VAR 0 6
11936: PUSH
11937: FOR_TO
11938: IFFALSE 12061
// begin if i > 4 then
11940: LD_VAR 0 8
11944: PUSH
11945: LD_INT 4
11947: GREATER
11948: IFFALSE 11952
// break ;
11950: GO 12061
// x := personel [ i ] ;
11952: LD_ADDR_VAR 0 13
11956: PUSH
11957: LD_VAR 0 6
11961: PUSH
11962: LD_VAR 0 8
11966: ARRAY
11967: ST_TO_ADDR
// if x = - 1 then
11968: LD_VAR 0 13
11972: PUSH
11973: LD_INT 1
11975: NEG
11976: EQUAL
11977: IFFALSE 11981
// continue ;
11979: GO 11937
// PrepareHuman ( false , i , skill ) ;
11981: LD_INT 0
11983: PPUSH
11984: LD_VAR 0 8
11988: PPUSH
11989: LD_VAR 0 4
11993: PPUSH
11994: CALL_OW 380
// un := CreateHuman ;
11998: LD_ADDR_VAR 0 14
12002: PUSH
12003: CALL_OW 44
12007: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12008: LD_VAR 0 14
12012: PPUSH
12013: LD_VAR 0 1
12017: PPUSH
12018: CALL_OW 250
12022: PPUSH
12023: LD_VAR 0 1
12027: PPUSH
12028: CALL_OW 251
12032: PPUSH
12033: LD_INT 10
12035: PPUSH
12036: LD_INT 0
12038: PPUSH
12039: CALL_OW 50
// result := result ^ un ;
12043: LD_ADDR_VAR 0 7
12047: PUSH
12048: LD_VAR 0 7
12052: PUSH
12053: LD_VAR 0 14
12057: ADD
12058: ST_TO_ADDR
// end ;
12059: GO 11937
12061: POP
12062: POP
// end ; end ;
12063: LD_VAR 0 7
12067: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12068: LD_INT 0
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
12075: PPUSH
12076: PPUSH
12077: PPUSH
12078: PPUSH
12079: PPUSH
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
12085: PPUSH
// result := false ;
12086: LD_ADDR_VAR 0 3
12090: PUSH
12091: LD_INT 0
12093: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12094: LD_VAR 0 1
12098: NOT
12099: PUSH
12100: LD_VAR 0 1
12104: PPUSH
12105: CALL_OW 266
12109: PUSH
12110: LD_INT 32
12112: PUSH
12113: LD_INT 33
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: IN
12120: NOT
12121: OR
12122: IFFALSE 12126
// exit ;
12124: GO 13235
// nat := GetNation ( tower ) ;
12126: LD_ADDR_VAR 0 12
12130: PUSH
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 248
12140: ST_TO_ADDR
// side := GetSide ( tower ) ;
12141: LD_ADDR_VAR 0 16
12145: PUSH
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 255
12155: ST_TO_ADDR
// x := GetX ( tower ) ;
12156: LD_ADDR_VAR 0 10
12160: PUSH
12161: LD_VAR 0 1
12165: PPUSH
12166: CALL_OW 250
12170: ST_TO_ADDR
// y := GetY ( tower ) ;
12171: LD_ADDR_VAR 0 11
12175: PUSH
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 251
12185: ST_TO_ADDR
// if not x or not y then
12186: LD_VAR 0 10
12190: NOT
12191: PUSH
12192: LD_VAR 0 11
12196: NOT
12197: OR
12198: IFFALSE 12202
// exit ;
12200: GO 13235
// weapon := 0 ;
12202: LD_ADDR_VAR 0 18
12206: PUSH
12207: LD_INT 0
12209: ST_TO_ADDR
// fac_list := [ ] ;
12210: LD_ADDR_VAR 0 17
12214: PUSH
12215: EMPTY
12216: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12217: LD_ADDR_VAR 0 6
12221: PUSH
12222: LD_VAR 0 1
12226: PPUSH
12227: CALL_OW 274
12231: PPUSH
12232: LD_VAR 0 2
12236: PPUSH
12237: LD_INT 0
12239: PPUSH
12240: CALL 9806 0 3
12244: PPUSH
12245: LD_INT 30
12247: PUSH
12248: LD_INT 3
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 72
12259: ST_TO_ADDR
// if not factories then
12260: LD_VAR 0 6
12264: NOT
12265: IFFALSE 12269
// exit ;
12267: GO 13235
// for i in factories do
12269: LD_ADDR_VAR 0 8
12273: PUSH
12274: LD_VAR 0 6
12278: PUSH
12279: FOR_IN
12280: IFFALSE 12305
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12282: LD_ADDR_VAR 0 17
12286: PUSH
12287: LD_VAR 0 17
12291: PUSH
12292: LD_VAR 0 8
12296: PPUSH
12297: CALL_OW 478
12301: UNION
12302: ST_TO_ADDR
12303: GO 12279
12305: POP
12306: POP
// if not fac_list then
12307: LD_VAR 0 17
12311: NOT
12312: IFFALSE 12316
// exit ;
12314: GO 13235
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12316: LD_ADDR_VAR 0 5
12320: PUSH
12321: LD_INT 4
12323: PUSH
12324: LD_INT 5
12326: PUSH
12327: LD_INT 9
12329: PUSH
12330: LD_INT 10
12332: PUSH
12333: LD_INT 6
12335: PUSH
12336: LD_INT 7
12338: PUSH
12339: LD_INT 11
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 27
12353: PUSH
12354: LD_INT 28
12356: PUSH
12357: LD_INT 26
12359: PUSH
12360: LD_INT 30
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 43
12371: PUSH
12372: LD_INT 44
12374: PUSH
12375: LD_INT 46
12377: PUSH
12378: LD_INT 45
12380: PUSH
12381: LD_INT 47
12383: PUSH
12384: LD_INT 49
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: LD_VAR 0 12
12404: ARRAY
12405: ST_TO_ADDR
// list := list isect fac_list ;
12406: LD_ADDR_VAR 0 5
12410: PUSH
12411: LD_VAR 0 5
12415: PUSH
12416: LD_VAR 0 17
12420: ISECT
12421: ST_TO_ADDR
// if not list then
12422: LD_VAR 0 5
12426: NOT
12427: IFFALSE 12431
// exit ;
12429: GO 13235
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12431: LD_VAR 0 12
12435: PUSH
12436: LD_INT 3
12438: EQUAL
12439: PUSH
12440: LD_INT 49
12442: PUSH
12443: LD_VAR 0 5
12447: IN
12448: AND
12449: PUSH
12450: LD_INT 31
12452: PPUSH
12453: LD_VAR 0 16
12457: PPUSH
12458: CALL_OW 321
12462: PUSH
12463: LD_INT 2
12465: EQUAL
12466: AND
12467: IFFALSE 12527
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12469: LD_INT 22
12471: PUSH
12472: LD_VAR 0 16
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 35
12483: PUSH
12484: LD_INT 49
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 91
12493: PUSH
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 10
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: PPUSH
12512: CALL_OW 69
12516: NOT
12517: IFFALSE 12527
// weapon := ru_time_lapser ;
12519: LD_ADDR_VAR 0 18
12523: PUSH
12524: LD_INT 49
12526: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12527: LD_VAR 0 12
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: IN
12542: PUSH
12543: LD_INT 11
12545: PUSH
12546: LD_VAR 0 5
12550: IN
12551: PUSH
12552: LD_INT 30
12554: PUSH
12555: LD_VAR 0 5
12559: IN
12560: OR
12561: AND
12562: PUSH
12563: LD_INT 6
12565: PPUSH
12566: LD_VAR 0 16
12570: PPUSH
12571: CALL_OW 321
12575: PUSH
12576: LD_INT 2
12578: EQUAL
12579: AND
12580: IFFALSE 12745
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12582: LD_INT 22
12584: PUSH
12585: LD_VAR 0 16
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 2
12596: PUSH
12597: LD_INT 35
12599: PUSH
12600: LD_INT 11
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 35
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 91
12624: PUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 18
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: LIST
12642: PPUSH
12643: CALL_OW 69
12647: NOT
12648: PUSH
12649: LD_INT 22
12651: PUSH
12652: LD_VAR 0 16
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 2
12663: PUSH
12664: LD_INT 30
12666: PUSH
12667: LD_INT 32
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 30
12676: PUSH
12677: LD_INT 33
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: PUSH
12689: LD_INT 91
12691: PUSH
12692: LD_VAR 0 1
12696: PUSH
12697: LD_INT 12
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: PPUSH
12713: CALL_OW 69
12717: PUSH
12718: LD_INT 2
12720: GREATER
12721: AND
12722: IFFALSE 12745
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12724: LD_ADDR_VAR 0 18
12728: PUSH
12729: LD_INT 11
12731: PUSH
12732: LD_INT 30
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_VAR 0 12
12743: ARRAY
12744: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12745: LD_VAR 0 18
12749: NOT
12750: PUSH
12751: LD_INT 40
12753: PPUSH
12754: LD_VAR 0 16
12758: PPUSH
12759: CALL_OW 321
12763: PUSH
12764: LD_INT 2
12766: EQUAL
12767: AND
12768: PUSH
12769: LD_INT 7
12771: PUSH
12772: LD_VAR 0 5
12776: IN
12777: PUSH
12778: LD_INT 28
12780: PUSH
12781: LD_VAR 0 5
12785: IN
12786: OR
12787: PUSH
12788: LD_INT 45
12790: PUSH
12791: LD_VAR 0 5
12795: IN
12796: OR
12797: AND
12798: IFFALSE 13052
// begin hex := GetHexInfo ( x , y ) ;
12800: LD_ADDR_VAR 0 4
12804: PUSH
12805: LD_VAR 0 10
12809: PPUSH
12810: LD_VAR 0 11
12814: PPUSH
12815: CALL_OW 546
12819: ST_TO_ADDR
// if hex [ 1 ] then
12820: LD_VAR 0 4
12824: PUSH
12825: LD_INT 1
12827: ARRAY
12828: IFFALSE 12832
// exit ;
12830: GO 13235
// height := hex [ 2 ] ;
12832: LD_ADDR_VAR 0 15
12836: PUSH
12837: LD_VAR 0 4
12841: PUSH
12842: LD_INT 2
12844: ARRAY
12845: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12846: LD_ADDR_VAR 0 14
12850: PUSH
12851: LD_INT 0
12853: PUSH
12854: LD_INT 2
12856: PUSH
12857: LD_INT 3
12859: PUSH
12860: LD_INT 5
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: ST_TO_ADDR
// for i in tmp do
12869: LD_ADDR_VAR 0 8
12873: PUSH
12874: LD_VAR 0 14
12878: PUSH
12879: FOR_IN
12880: IFFALSE 13050
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12882: LD_ADDR_VAR 0 9
12886: PUSH
12887: LD_VAR 0 10
12891: PPUSH
12892: LD_VAR 0 8
12896: PPUSH
12897: LD_INT 5
12899: PPUSH
12900: CALL_OW 272
12904: PUSH
12905: LD_VAR 0 11
12909: PPUSH
12910: LD_VAR 0 8
12914: PPUSH
12915: LD_INT 5
12917: PPUSH
12918: CALL_OW 273
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12927: LD_VAR 0 9
12931: PUSH
12932: LD_INT 1
12934: ARRAY
12935: PPUSH
12936: LD_VAR 0 9
12940: PUSH
12941: LD_INT 2
12943: ARRAY
12944: PPUSH
12945: CALL_OW 488
12949: IFFALSE 13048
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: LD_VAR 0 9
12960: PUSH
12961: LD_INT 1
12963: ARRAY
12964: PPUSH
12965: LD_VAR 0 9
12969: PUSH
12970: LD_INT 2
12972: ARRAY
12973: PPUSH
12974: CALL_OW 546
12978: ST_TO_ADDR
// if hex [ 1 ] then
12979: LD_VAR 0 4
12983: PUSH
12984: LD_INT 1
12986: ARRAY
12987: IFFALSE 12991
// continue ;
12989: GO 12879
// h := hex [ 2 ] ;
12991: LD_ADDR_VAR 0 13
12995: PUSH
12996: LD_VAR 0 4
13000: PUSH
13001: LD_INT 2
13003: ARRAY
13004: ST_TO_ADDR
// if h + 7 < height then
13005: LD_VAR 0 13
13009: PUSH
13010: LD_INT 7
13012: PLUS
13013: PUSH
13014: LD_VAR 0 15
13018: LESS
13019: IFFALSE 13048
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13021: LD_ADDR_VAR 0 18
13025: PUSH
13026: LD_INT 7
13028: PUSH
13029: LD_INT 28
13031: PUSH
13032: LD_INT 45
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: LIST
13039: PUSH
13040: LD_VAR 0 12
13044: ARRAY
13045: ST_TO_ADDR
// break ;
13046: GO 13050
// end ; end ; end ;
13048: GO 12879
13050: POP
13051: POP
// end ; if not weapon then
13052: LD_VAR 0 18
13056: NOT
13057: IFFALSE 13117
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13059: LD_ADDR_VAR 0 5
13063: PUSH
13064: LD_VAR 0 5
13068: PUSH
13069: LD_INT 11
13071: PUSH
13072: LD_INT 30
13074: PUSH
13075: LD_INT 49
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: DIFF
13083: ST_TO_ADDR
// if not list then
13084: LD_VAR 0 5
13088: NOT
13089: IFFALSE 13093
// exit ;
13091: GO 13235
// weapon := list [ rand ( 1 , list ) ] ;
13093: LD_ADDR_VAR 0 18
13097: PUSH
13098: LD_VAR 0 5
13102: PUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_VAR 0 5
13110: PPUSH
13111: CALL_OW 12
13115: ARRAY
13116: ST_TO_ADDR
// end ; if weapon then
13117: LD_VAR 0 18
13121: IFFALSE 13235
// begin tmp := CostOfWeapon ( weapon ) ;
13123: LD_ADDR_VAR 0 14
13127: PUSH
13128: LD_VAR 0 18
13132: PPUSH
13133: CALL_OW 451
13137: ST_TO_ADDR
// j := GetBase ( tower ) ;
13138: LD_ADDR_VAR 0 9
13142: PUSH
13143: LD_VAR 0 1
13147: PPUSH
13148: CALL_OW 274
13152: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13153: LD_VAR 0 9
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 275
13165: PUSH
13166: LD_VAR 0 14
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: GREATEREQUAL
13175: PUSH
13176: LD_VAR 0 9
13180: PPUSH
13181: LD_INT 2
13183: PPUSH
13184: CALL_OW 275
13188: PUSH
13189: LD_VAR 0 14
13193: PUSH
13194: LD_INT 2
13196: ARRAY
13197: GREATEREQUAL
13198: AND
13199: PUSH
13200: LD_VAR 0 9
13204: PPUSH
13205: LD_INT 3
13207: PPUSH
13208: CALL_OW 275
13212: PUSH
13213: LD_VAR 0 14
13217: PUSH
13218: LD_INT 3
13220: ARRAY
13221: GREATEREQUAL
13222: AND
13223: IFFALSE 13235
// result := weapon ;
13225: LD_ADDR_VAR 0 3
13229: PUSH
13230: LD_VAR 0 18
13234: ST_TO_ADDR
// end ; end ;
13235: LD_VAR 0 3
13239: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13240: LD_INT 0
13242: PPUSH
13243: PPUSH
// result := true ;
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// if array1 = array2 then
13252: LD_VAR 0 1
13256: PUSH
13257: LD_VAR 0 2
13261: EQUAL
13262: IFFALSE 13322
// begin for i = 1 to array1 do
13264: LD_ADDR_VAR 0 4
13268: PUSH
13269: DOUBLE
13270: LD_INT 1
13272: DEC
13273: ST_TO_ADDR
13274: LD_VAR 0 1
13278: PUSH
13279: FOR_TO
13280: IFFALSE 13318
// if array1 [ i ] <> array2 [ i ] then
13282: LD_VAR 0 1
13286: PUSH
13287: LD_VAR 0 4
13291: ARRAY
13292: PUSH
13293: LD_VAR 0 2
13297: PUSH
13298: LD_VAR 0 4
13302: ARRAY
13303: NONEQUAL
13304: IFFALSE 13316
// begin result := false ;
13306: LD_ADDR_VAR 0 3
13310: PUSH
13311: LD_INT 0
13313: ST_TO_ADDR
// break ;
13314: GO 13318
// end ;
13316: GO 13279
13318: POP
13319: POP
// end else
13320: GO 13330
// result := false ;
13322: LD_ADDR_VAR 0 3
13326: PUSH
13327: LD_INT 0
13329: ST_TO_ADDR
// end ;
13330: LD_VAR 0 3
13334: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13335: LD_INT 0
13337: PPUSH
13338: PPUSH
// if not array1 or not array2 then
13339: LD_VAR 0 1
13343: NOT
13344: PUSH
13345: LD_VAR 0 2
13349: NOT
13350: OR
13351: IFFALSE 13355
// exit ;
13353: GO 13419
// result := true ;
13355: LD_ADDR_VAR 0 3
13359: PUSH
13360: LD_INT 1
13362: ST_TO_ADDR
// for i = 1 to array1 do
13363: LD_ADDR_VAR 0 4
13367: PUSH
13368: DOUBLE
13369: LD_INT 1
13371: DEC
13372: ST_TO_ADDR
13373: LD_VAR 0 1
13377: PUSH
13378: FOR_TO
13379: IFFALSE 13417
// if array1 [ i ] <> array2 [ i ] then
13381: LD_VAR 0 1
13385: PUSH
13386: LD_VAR 0 4
13390: ARRAY
13391: PUSH
13392: LD_VAR 0 2
13396: PUSH
13397: LD_VAR 0 4
13401: ARRAY
13402: NONEQUAL
13403: IFFALSE 13415
// begin result := false ;
13405: LD_ADDR_VAR 0 3
13409: PUSH
13410: LD_INT 0
13412: ST_TO_ADDR
// break ;
13413: GO 13417
// end ;
13415: GO 13378
13417: POP
13418: POP
// end ;
13419: LD_VAR 0 3
13423: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
13428: PPUSH
// pom := GetBase ( fac ) ;
13429: LD_ADDR_VAR 0 5
13433: PUSH
13434: LD_VAR 0 1
13438: PPUSH
13439: CALL_OW 274
13443: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13444: LD_ADDR_VAR 0 4
13448: PUSH
13449: LD_VAR 0 2
13453: PUSH
13454: LD_INT 1
13456: ARRAY
13457: PPUSH
13458: LD_VAR 0 2
13462: PUSH
13463: LD_INT 2
13465: ARRAY
13466: PPUSH
13467: LD_VAR 0 2
13471: PUSH
13472: LD_INT 3
13474: ARRAY
13475: PPUSH
13476: LD_VAR 0 2
13480: PUSH
13481: LD_INT 4
13483: ARRAY
13484: PPUSH
13485: CALL_OW 449
13489: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13490: LD_ADDR_VAR 0 3
13494: PUSH
13495: LD_VAR 0 5
13499: PPUSH
13500: LD_INT 1
13502: PPUSH
13503: CALL_OW 275
13507: PUSH
13508: LD_VAR 0 4
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: GREATEREQUAL
13517: PUSH
13518: LD_VAR 0 5
13522: PPUSH
13523: LD_INT 2
13525: PPUSH
13526: CALL_OW 275
13530: PUSH
13531: LD_VAR 0 4
13535: PUSH
13536: LD_INT 2
13538: ARRAY
13539: GREATEREQUAL
13540: AND
13541: PUSH
13542: LD_VAR 0 5
13546: PPUSH
13547: LD_INT 3
13549: PPUSH
13550: CALL_OW 275
13554: PUSH
13555: LD_VAR 0 4
13559: PUSH
13560: LD_INT 3
13562: ARRAY
13563: GREATEREQUAL
13564: AND
13565: ST_TO_ADDR
// end ;
13566: LD_VAR 0 3
13570: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13571: LD_INT 0
13573: PPUSH
13574: PPUSH
13575: PPUSH
13576: PPUSH
// pom := GetBase ( building ) ;
13577: LD_ADDR_VAR 0 3
13581: PUSH
13582: LD_VAR 0 1
13586: PPUSH
13587: CALL_OW 274
13591: ST_TO_ADDR
// if not pom then
13592: LD_VAR 0 3
13596: NOT
13597: IFFALSE 13601
// exit ;
13599: GO 13771
// btype := GetBType ( building ) ;
13601: LD_ADDR_VAR 0 5
13605: PUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 266
13615: ST_TO_ADDR
// if btype = b_armoury then
13616: LD_VAR 0 5
13620: PUSH
13621: LD_INT 4
13623: EQUAL
13624: IFFALSE 13634
// btype := b_barracks ;
13626: LD_ADDR_VAR 0 5
13630: PUSH
13631: LD_INT 5
13633: ST_TO_ADDR
// if btype = b_depot then
13634: LD_VAR 0 5
13638: PUSH
13639: LD_INT 0
13641: EQUAL
13642: IFFALSE 13652
// btype := b_warehouse ;
13644: LD_ADDR_VAR 0 5
13648: PUSH
13649: LD_INT 1
13651: ST_TO_ADDR
// if btype = b_workshop then
13652: LD_VAR 0 5
13656: PUSH
13657: LD_INT 2
13659: EQUAL
13660: IFFALSE 13670
// btype := b_factory ;
13662: LD_ADDR_VAR 0 5
13666: PUSH
13667: LD_INT 3
13669: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13670: LD_ADDR_VAR 0 4
13674: PUSH
13675: LD_VAR 0 5
13679: PPUSH
13680: LD_VAR 0 1
13684: PPUSH
13685: CALL_OW 248
13689: PPUSH
13690: CALL_OW 450
13694: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13695: LD_ADDR_VAR 0 2
13699: PUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 275
13712: PUSH
13713: LD_VAR 0 4
13717: PUSH
13718: LD_INT 1
13720: ARRAY
13721: GREATEREQUAL
13722: PUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: LD_INT 2
13730: PPUSH
13731: CALL_OW 275
13735: PUSH
13736: LD_VAR 0 4
13740: PUSH
13741: LD_INT 2
13743: ARRAY
13744: GREATEREQUAL
13745: AND
13746: PUSH
13747: LD_VAR 0 3
13751: PPUSH
13752: LD_INT 3
13754: PPUSH
13755: CALL_OW 275
13759: PUSH
13760: LD_VAR 0 4
13764: PUSH
13765: LD_INT 3
13767: ARRAY
13768: GREATEREQUAL
13769: AND
13770: ST_TO_ADDR
// end ;
13771: LD_VAR 0 2
13775: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13776: LD_INT 0
13778: PPUSH
13779: PPUSH
13780: PPUSH
// pom := GetBase ( building ) ;
13781: LD_ADDR_VAR 0 4
13785: PUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 274
13795: ST_TO_ADDR
// if not pom then
13796: LD_VAR 0 4
13800: NOT
13801: IFFALSE 13805
// exit ;
13803: GO 13906
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13805: LD_ADDR_VAR 0 5
13809: PUSH
13810: LD_VAR 0 2
13814: PPUSH
13815: LD_VAR 0 1
13819: PPUSH
13820: CALL_OW 248
13824: PPUSH
13825: CALL_OW 450
13829: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13830: LD_ADDR_VAR 0 3
13834: PUSH
13835: LD_VAR 0 4
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 275
13847: PUSH
13848: LD_VAR 0 5
13852: PUSH
13853: LD_INT 1
13855: ARRAY
13856: GREATEREQUAL
13857: PUSH
13858: LD_VAR 0 4
13862: PPUSH
13863: LD_INT 2
13865: PPUSH
13866: CALL_OW 275
13870: PUSH
13871: LD_VAR 0 5
13875: PUSH
13876: LD_INT 2
13878: ARRAY
13879: GREATEREQUAL
13880: AND
13881: PUSH
13882: LD_VAR 0 4
13886: PPUSH
13887: LD_INT 3
13889: PPUSH
13890: CALL_OW 275
13894: PUSH
13895: LD_VAR 0 5
13899: PUSH
13900: LD_INT 3
13902: ARRAY
13903: GREATEREQUAL
13904: AND
13905: ST_TO_ADDR
// end ;
13906: LD_VAR 0 3
13910: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13911: LD_INT 0
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
13919: PPUSH
13920: PPUSH
13921: PPUSH
13922: PPUSH
13923: PPUSH
// result := false ;
13924: LD_ADDR_VAR 0 8
13928: PUSH
13929: LD_INT 0
13931: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13932: LD_VAR 0 5
13936: NOT
13937: PUSH
13938: LD_VAR 0 1
13942: NOT
13943: OR
13944: PUSH
13945: LD_VAR 0 2
13949: NOT
13950: OR
13951: PUSH
13952: LD_VAR 0 3
13956: NOT
13957: OR
13958: IFFALSE 13962
// exit ;
13960: GO 14776
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13962: LD_ADDR_VAR 0 14
13966: PUSH
13967: LD_VAR 0 1
13971: PPUSH
13972: LD_VAR 0 2
13976: PPUSH
13977: LD_VAR 0 3
13981: PPUSH
13982: LD_VAR 0 4
13986: PPUSH
13987: LD_VAR 0 5
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: CALL_OW 248
14000: PPUSH
14001: LD_INT 0
14003: PPUSH
14004: CALL 16029 0 6
14008: ST_TO_ADDR
// if not hexes then
14009: LD_VAR 0 14
14013: NOT
14014: IFFALSE 14018
// exit ;
14016: GO 14776
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14018: LD_ADDR_VAR 0 17
14022: PUSH
14023: LD_VAR 0 5
14027: PPUSH
14028: LD_INT 22
14030: PUSH
14031: LD_VAR 0 13
14035: PPUSH
14036: CALL_OW 255
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 2
14047: PUSH
14048: LD_INT 30
14050: PUSH
14051: LD_INT 0
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 30
14060: PUSH
14061: LD_INT 1
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 72
14081: ST_TO_ADDR
// for i = 1 to hexes do
14082: LD_ADDR_VAR 0 9
14086: PUSH
14087: DOUBLE
14088: LD_INT 1
14090: DEC
14091: ST_TO_ADDR
14092: LD_VAR 0 14
14096: PUSH
14097: FOR_TO
14098: IFFALSE 14774
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14100: LD_ADDR_VAR 0 13
14104: PUSH
14105: LD_VAR 0 14
14109: PUSH
14110: LD_VAR 0 9
14114: ARRAY
14115: PUSH
14116: LD_INT 1
14118: ARRAY
14119: PPUSH
14120: LD_VAR 0 14
14124: PUSH
14125: LD_VAR 0 9
14129: ARRAY
14130: PUSH
14131: LD_INT 2
14133: ARRAY
14134: PPUSH
14135: CALL_OW 428
14139: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14140: LD_VAR 0 14
14144: PUSH
14145: LD_VAR 0 9
14149: ARRAY
14150: PUSH
14151: LD_INT 1
14153: ARRAY
14154: PPUSH
14155: LD_VAR 0 14
14159: PUSH
14160: LD_VAR 0 9
14164: ARRAY
14165: PUSH
14166: LD_INT 2
14168: ARRAY
14169: PPUSH
14170: CALL_OW 351
14174: PUSH
14175: LD_VAR 0 14
14179: PUSH
14180: LD_VAR 0 9
14184: ARRAY
14185: PUSH
14186: LD_INT 1
14188: ARRAY
14189: PPUSH
14190: LD_VAR 0 14
14194: PUSH
14195: LD_VAR 0 9
14199: ARRAY
14200: PUSH
14201: LD_INT 2
14203: ARRAY
14204: PPUSH
14205: CALL_OW 488
14209: NOT
14210: OR
14211: PUSH
14212: LD_VAR 0 13
14216: PPUSH
14217: CALL_OW 247
14221: PUSH
14222: LD_INT 3
14224: EQUAL
14225: OR
14226: IFFALSE 14232
// exit ;
14228: POP
14229: POP
14230: GO 14776
// if not tmp then
14232: LD_VAR 0 13
14236: NOT
14237: IFFALSE 14241
// continue ;
14239: GO 14097
// result := true ;
14241: LD_ADDR_VAR 0 8
14245: PUSH
14246: LD_INT 1
14248: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14249: LD_VAR 0 6
14253: PUSH
14254: LD_VAR 0 13
14258: PPUSH
14259: CALL_OW 247
14263: PUSH
14264: LD_INT 2
14266: EQUAL
14267: AND
14268: PUSH
14269: LD_VAR 0 13
14273: PPUSH
14274: CALL_OW 263
14278: PUSH
14279: LD_INT 1
14281: EQUAL
14282: AND
14283: IFFALSE 14447
// begin if IsDrivenBy ( tmp ) then
14285: LD_VAR 0 13
14289: PPUSH
14290: CALL_OW 311
14294: IFFALSE 14298
// continue ;
14296: GO 14097
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14298: LD_VAR 0 6
14302: PPUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 60
14308: PUSH
14309: EMPTY
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 3
14318: PUSH
14319: LD_INT 55
14321: PUSH
14322: EMPTY
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PPUSH
14333: CALL_OW 72
14337: IFFALSE 14445
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14339: LD_ADDR_VAR 0 18
14343: PUSH
14344: LD_VAR 0 6
14348: PPUSH
14349: LD_INT 3
14351: PUSH
14352: LD_INT 60
14354: PUSH
14355: EMPTY
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 3
14364: PUSH
14365: LD_INT 55
14367: PUSH
14368: EMPTY
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 72
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: ST_TO_ADDR
// if IsInUnit ( driver ) then
14388: LD_VAR 0 18
14392: PPUSH
14393: CALL_OW 310
14397: IFFALSE 14408
// ComExit ( driver ) ;
14399: LD_VAR 0 18
14403: PPUSH
14404: CALL 39808 0 1
// AddComEnterUnit ( driver , tmp ) ;
14408: LD_VAR 0 18
14412: PPUSH
14413: LD_VAR 0 13
14417: PPUSH
14418: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14422: LD_VAR 0 18
14426: PPUSH
14427: LD_VAR 0 7
14431: PPUSH
14432: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14436: LD_VAR 0 18
14440: PPUSH
14441: CALL_OW 181
// end ; continue ;
14445: GO 14097
// end ; if not cleaners or not tmp in cleaners then
14447: LD_VAR 0 6
14451: NOT
14452: PUSH
14453: LD_VAR 0 13
14457: PUSH
14458: LD_VAR 0 6
14462: IN
14463: NOT
14464: OR
14465: IFFALSE 14772
// begin if dep then
14467: LD_VAR 0 17
14471: IFFALSE 14607
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14473: LD_ADDR_VAR 0 16
14477: PUSH
14478: LD_VAR 0 17
14482: PUSH
14483: LD_INT 1
14485: ARRAY
14486: PPUSH
14487: CALL_OW 250
14491: PPUSH
14492: LD_VAR 0 17
14496: PUSH
14497: LD_INT 1
14499: ARRAY
14500: PPUSH
14501: CALL_OW 254
14505: PPUSH
14506: LD_INT 5
14508: PPUSH
14509: CALL_OW 272
14513: PUSH
14514: LD_VAR 0 17
14518: PUSH
14519: LD_INT 1
14521: ARRAY
14522: PPUSH
14523: CALL_OW 251
14527: PPUSH
14528: LD_VAR 0 17
14532: PUSH
14533: LD_INT 1
14535: ARRAY
14536: PPUSH
14537: CALL_OW 254
14541: PPUSH
14542: LD_INT 5
14544: PPUSH
14545: CALL_OW 273
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14554: LD_VAR 0 16
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PPUSH
14563: LD_VAR 0 16
14567: PUSH
14568: LD_INT 2
14570: ARRAY
14571: PPUSH
14572: CALL_OW 488
14576: IFFALSE 14607
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14578: LD_VAR 0 13
14582: PPUSH
14583: LD_VAR 0 16
14587: PUSH
14588: LD_INT 1
14590: ARRAY
14591: PPUSH
14592: LD_VAR 0 16
14596: PUSH
14597: LD_INT 2
14599: ARRAY
14600: PPUSH
14601: CALL_OW 111
// continue ;
14605: GO 14097
// end ; end ; r := GetDir ( tmp ) ;
14607: LD_ADDR_VAR 0 15
14611: PUSH
14612: LD_VAR 0 13
14616: PPUSH
14617: CALL_OW 254
14621: ST_TO_ADDR
// if r = 5 then
14622: LD_VAR 0 15
14626: PUSH
14627: LD_INT 5
14629: EQUAL
14630: IFFALSE 14640
// r := 0 ;
14632: LD_ADDR_VAR 0 15
14636: PUSH
14637: LD_INT 0
14639: ST_TO_ADDR
// for j = r to 5 do
14640: LD_ADDR_VAR 0 10
14644: PUSH
14645: DOUBLE
14646: LD_VAR 0 15
14650: DEC
14651: ST_TO_ADDR
14652: LD_INT 5
14654: PUSH
14655: FOR_TO
14656: IFFALSE 14770
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14658: LD_ADDR_VAR 0 11
14662: PUSH
14663: LD_VAR 0 13
14667: PPUSH
14668: CALL_OW 250
14672: PPUSH
14673: LD_VAR 0 10
14677: PPUSH
14678: LD_INT 2
14680: PPUSH
14681: CALL_OW 272
14685: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14686: LD_ADDR_VAR 0 12
14690: PUSH
14691: LD_VAR 0 13
14695: PPUSH
14696: CALL_OW 251
14700: PPUSH
14701: LD_VAR 0 10
14705: PPUSH
14706: LD_INT 2
14708: PPUSH
14709: CALL_OW 273
14713: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14714: LD_VAR 0 11
14718: PPUSH
14719: LD_VAR 0 12
14723: PPUSH
14724: CALL_OW 488
14728: PUSH
14729: LD_VAR 0 11
14733: PPUSH
14734: LD_VAR 0 12
14738: PPUSH
14739: CALL_OW 428
14743: NOT
14744: AND
14745: IFFALSE 14768
// begin ComMoveXY ( tmp , _x , _y ) ;
14747: LD_VAR 0 13
14751: PPUSH
14752: LD_VAR 0 11
14756: PPUSH
14757: LD_VAR 0 12
14761: PPUSH
14762: CALL_OW 111
// break ;
14766: GO 14770
// end ; end ;
14768: GO 14655
14770: POP
14771: POP
// end ; end ;
14772: GO 14097
14774: POP
14775: POP
// end ;
14776: LD_VAR 0 8
14780: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14781: LD_INT 0
14783: PPUSH
// result := true ;
14784: LD_ADDR_VAR 0 3
14788: PUSH
14789: LD_INT 1
14791: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14792: LD_VAR 0 2
14796: PUSH
14797: LD_INT 24
14799: DOUBLE
14800: EQUAL
14801: IFTRUE 14811
14803: LD_INT 33
14805: DOUBLE
14806: EQUAL
14807: IFTRUE 14811
14809: GO 14836
14811: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14812: LD_ADDR_VAR 0 3
14816: PUSH
14817: LD_INT 32
14819: PPUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 321
14829: PUSH
14830: LD_INT 2
14832: EQUAL
14833: ST_TO_ADDR
14834: GO 15152
14836: LD_INT 20
14838: DOUBLE
14839: EQUAL
14840: IFTRUE 14844
14842: GO 14869
14844: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14845: LD_ADDR_VAR 0 3
14849: PUSH
14850: LD_INT 6
14852: PPUSH
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 321
14862: PUSH
14863: LD_INT 2
14865: EQUAL
14866: ST_TO_ADDR
14867: GO 15152
14869: LD_INT 22
14871: DOUBLE
14872: EQUAL
14873: IFTRUE 14883
14875: LD_INT 36
14877: DOUBLE
14878: EQUAL
14879: IFTRUE 14883
14881: GO 14908
14883: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14884: LD_ADDR_VAR 0 3
14888: PUSH
14889: LD_INT 15
14891: PPUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 321
14901: PUSH
14902: LD_INT 2
14904: EQUAL
14905: ST_TO_ADDR
14906: GO 15152
14908: LD_INT 30
14910: DOUBLE
14911: EQUAL
14912: IFTRUE 14916
14914: GO 14941
14916: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14917: LD_ADDR_VAR 0 3
14921: PUSH
14922: LD_INT 20
14924: PPUSH
14925: LD_VAR 0 1
14929: PPUSH
14930: CALL_OW 321
14934: PUSH
14935: LD_INT 2
14937: EQUAL
14938: ST_TO_ADDR
14939: GO 15152
14941: LD_INT 28
14943: DOUBLE
14944: EQUAL
14945: IFTRUE 14955
14947: LD_INT 21
14949: DOUBLE
14950: EQUAL
14951: IFTRUE 14955
14953: GO 14980
14955: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14956: LD_ADDR_VAR 0 3
14960: PUSH
14961: LD_INT 21
14963: PPUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 321
14973: PUSH
14974: LD_INT 2
14976: EQUAL
14977: ST_TO_ADDR
14978: GO 15152
14980: LD_INT 16
14982: DOUBLE
14983: EQUAL
14984: IFTRUE 14988
14986: GO 15013
14988: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14989: LD_ADDR_VAR 0 3
14993: PUSH
14994: LD_INT 84
14996: PPUSH
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL_OW 321
15006: PUSH
15007: LD_INT 2
15009: EQUAL
15010: ST_TO_ADDR
15011: GO 15152
15013: LD_INT 19
15015: DOUBLE
15016: EQUAL
15017: IFTRUE 15027
15019: LD_INT 23
15021: DOUBLE
15022: EQUAL
15023: IFTRUE 15027
15025: GO 15052
15027: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_INT 83
15035: PPUSH
15036: LD_VAR 0 1
15040: PPUSH
15041: CALL_OW 321
15045: PUSH
15046: LD_INT 2
15048: EQUAL
15049: ST_TO_ADDR
15050: GO 15152
15052: LD_INT 17
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15085
15060: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15061: LD_ADDR_VAR 0 3
15065: PUSH
15066: LD_INT 39
15068: PPUSH
15069: LD_VAR 0 1
15073: PPUSH
15074: CALL_OW 321
15078: PUSH
15079: LD_INT 2
15081: EQUAL
15082: ST_TO_ADDR
15083: GO 15152
15085: LD_INT 18
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15093
15091: GO 15118
15093: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15094: LD_ADDR_VAR 0 3
15098: PUSH
15099: LD_INT 40
15101: PPUSH
15102: LD_VAR 0 1
15106: PPUSH
15107: CALL_OW 321
15111: PUSH
15112: LD_INT 2
15114: EQUAL
15115: ST_TO_ADDR
15116: GO 15152
15118: LD_INT 27
15120: DOUBLE
15121: EQUAL
15122: IFTRUE 15126
15124: GO 15151
15126: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15127: LD_ADDR_VAR 0 3
15131: PUSH
15132: LD_INT 35
15134: PPUSH
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 321
15144: PUSH
15145: LD_INT 2
15147: EQUAL
15148: ST_TO_ADDR
15149: GO 15152
15151: POP
// end ;
15152: LD_VAR 0 3
15156: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15157: LD_INT 0
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
15169: PPUSH
// result := false ;
15170: LD_ADDR_VAR 0 6
15174: PUSH
15175: LD_INT 0
15177: ST_TO_ADDR
// if btype = b_depot then
15178: LD_VAR 0 2
15182: PUSH
15183: LD_INT 0
15185: EQUAL
15186: IFFALSE 15198
// begin result := true ;
15188: LD_ADDR_VAR 0 6
15192: PUSH
15193: LD_INT 1
15195: ST_TO_ADDR
// exit ;
15196: GO 16024
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15198: LD_VAR 0 1
15202: NOT
15203: PUSH
15204: LD_VAR 0 1
15208: PPUSH
15209: CALL_OW 266
15213: PUSH
15214: LD_INT 0
15216: PUSH
15217: LD_INT 1
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: IN
15224: NOT
15225: OR
15226: PUSH
15227: LD_VAR 0 2
15231: NOT
15232: OR
15233: PUSH
15234: LD_VAR 0 5
15238: PUSH
15239: LD_INT 0
15241: PUSH
15242: LD_INT 1
15244: PUSH
15245: LD_INT 2
15247: PUSH
15248: LD_INT 3
15250: PUSH
15251: LD_INT 4
15253: PUSH
15254: LD_INT 5
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: IN
15265: NOT
15266: OR
15267: PUSH
15268: LD_VAR 0 3
15272: PPUSH
15273: LD_VAR 0 4
15277: PPUSH
15278: CALL_OW 488
15282: NOT
15283: OR
15284: IFFALSE 15288
// exit ;
15286: GO 16024
// side := GetSide ( depot ) ;
15288: LD_ADDR_VAR 0 9
15292: PUSH
15293: LD_VAR 0 1
15297: PPUSH
15298: CALL_OW 255
15302: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15303: LD_VAR 0 9
15307: PPUSH
15308: LD_VAR 0 2
15312: PPUSH
15313: CALL 14781 0 2
15317: NOT
15318: IFFALSE 15322
// exit ;
15320: GO 16024
// pom := GetBase ( depot ) ;
15322: LD_ADDR_VAR 0 10
15326: PUSH
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 274
15336: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15337: LD_ADDR_VAR 0 11
15341: PUSH
15342: LD_VAR 0 2
15346: PPUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: CALL_OW 248
15356: PPUSH
15357: CALL_OW 450
15361: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15362: LD_VAR 0 10
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 275
15374: PUSH
15375: LD_VAR 0 11
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: GREATEREQUAL
15384: PUSH
15385: LD_VAR 0 10
15389: PPUSH
15390: LD_INT 2
15392: PPUSH
15393: CALL_OW 275
15397: PUSH
15398: LD_VAR 0 11
15402: PUSH
15403: LD_INT 2
15405: ARRAY
15406: GREATEREQUAL
15407: AND
15408: PUSH
15409: LD_VAR 0 10
15413: PPUSH
15414: LD_INT 3
15416: PPUSH
15417: CALL_OW 275
15421: PUSH
15422: LD_VAR 0 11
15426: PUSH
15427: LD_INT 3
15429: ARRAY
15430: GREATEREQUAL
15431: AND
15432: NOT
15433: IFFALSE 15437
// exit ;
15435: GO 16024
// if GetBType ( depot ) = b_depot then
15437: LD_VAR 0 1
15441: PPUSH
15442: CALL_OW 266
15446: PUSH
15447: LD_INT 0
15449: EQUAL
15450: IFFALSE 15462
// dist := 28 else
15452: LD_ADDR_VAR 0 14
15456: PUSH
15457: LD_INT 28
15459: ST_TO_ADDR
15460: GO 15470
// dist := 36 ;
15462: LD_ADDR_VAR 0 14
15466: PUSH
15467: LD_INT 36
15469: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15470: LD_VAR 0 1
15474: PPUSH
15475: LD_VAR 0 3
15479: PPUSH
15480: LD_VAR 0 4
15484: PPUSH
15485: CALL_OW 297
15489: PUSH
15490: LD_VAR 0 14
15494: GREATER
15495: IFFALSE 15499
// exit ;
15497: GO 16024
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15499: LD_ADDR_VAR 0 12
15503: PUSH
15504: LD_VAR 0 2
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: LD_VAR 0 4
15518: PPUSH
15519: LD_VAR 0 5
15523: PPUSH
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 248
15533: PPUSH
15534: LD_INT 0
15536: PPUSH
15537: CALL 16029 0 6
15541: ST_TO_ADDR
// if not hexes then
15542: LD_VAR 0 12
15546: NOT
15547: IFFALSE 15551
// exit ;
15549: GO 16024
// hex := GetHexInfo ( x , y ) ;
15551: LD_ADDR_VAR 0 15
15555: PUSH
15556: LD_VAR 0 3
15560: PPUSH
15561: LD_VAR 0 4
15565: PPUSH
15566: CALL_OW 546
15570: ST_TO_ADDR
// if hex [ 1 ] then
15571: LD_VAR 0 15
15575: PUSH
15576: LD_INT 1
15578: ARRAY
15579: IFFALSE 15583
// exit ;
15581: GO 16024
// height := hex [ 2 ] ;
15583: LD_ADDR_VAR 0 13
15587: PUSH
15588: LD_VAR 0 15
15592: PUSH
15593: LD_INT 2
15595: ARRAY
15596: ST_TO_ADDR
// for i = 1 to hexes do
15597: LD_ADDR_VAR 0 7
15601: PUSH
15602: DOUBLE
15603: LD_INT 1
15605: DEC
15606: ST_TO_ADDR
15607: LD_VAR 0 12
15611: PUSH
15612: FOR_TO
15613: IFFALSE 15943
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15615: LD_VAR 0 12
15619: PUSH
15620: LD_VAR 0 7
15624: ARRAY
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PPUSH
15630: LD_VAR 0 12
15634: PUSH
15635: LD_VAR 0 7
15639: ARRAY
15640: PUSH
15641: LD_INT 2
15643: ARRAY
15644: PPUSH
15645: CALL_OW 488
15649: NOT
15650: PUSH
15651: LD_VAR 0 12
15655: PUSH
15656: LD_VAR 0 7
15660: ARRAY
15661: PUSH
15662: LD_INT 1
15664: ARRAY
15665: PPUSH
15666: LD_VAR 0 12
15670: PUSH
15671: LD_VAR 0 7
15675: ARRAY
15676: PUSH
15677: LD_INT 2
15679: ARRAY
15680: PPUSH
15681: CALL_OW 428
15685: PUSH
15686: LD_INT 0
15688: GREATER
15689: OR
15690: PUSH
15691: LD_VAR 0 12
15695: PUSH
15696: LD_VAR 0 7
15700: ARRAY
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_VAR 0 12
15710: PUSH
15711: LD_VAR 0 7
15715: ARRAY
15716: PUSH
15717: LD_INT 2
15719: ARRAY
15720: PPUSH
15721: CALL_OW 351
15725: OR
15726: IFFALSE 15732
// exit ;
15728: POP
15729: POP
15730: GO 16024
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15732: LD_ADDR_VAR 0 8
15736: PUSH
15737: LD_VAR 0 12
15741: PUSH
15742: LD_VAR 0 7
15746: ARRAY
15747: PUSH
15748: LD_INT 1
15750: ARRAY
15751: PPUSH
15752: LD_VAR 0 12
15756: PUSH
15757: LD_VAR 0 7
15761: ARRAY
15762: PUSH
15763: LD_INT 2
15765: ARRAY
15766: PPUSH
15767: CALL_OW 546
15771: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15772: LD_VAR 0 8
15776: PUSH
15777: LD_INT 1
15779: ARRAY
15780: PUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 2
15788: ARRAY
15789: PUSH
15790: LD_VAR 0 13
15794: PUSH
15795: LD_INT 2
15797: PLUS
15798: GREATER
15799: OR
15800: PUSH
15801: LD_VAR 0 8
15805: PUSH
15806: LD_INT 2
15808: ARRAY
15809: PUSH
15810: LD_VAR 0 13
15814: PUSH
15815: LD_INT 2
15817: MINUS
15818: LESS
15819: OR
15820: PUSH
15821: LD_VAR 0 8
15825: PUSH
15826: LD_INT 3
15828: ARRAY
15829: PUSH
15830: LD_INT 0
15832: PUSH
15833: LD_INT 8
15835: PUSH
15836: LD_INT 9
15838: PUSH
15839: LD_INT 10
15841: PUSH
15842: LD_INT 11
15844: PUSH
15845: LD_INT 12
15847: PUSH
15848: LD_INT 13
15850: PUSH
15851: LD_INT 16
15853: PUSH
15854: LD_INT 17
15856: PUSH
15857: LD_INT 18
15859: PUSH
15860: LD_INT 19
15862: PUSH
15863: LD_INT 20
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: IN
15884: NOT
15885: OR
15886: PUSH
15887: LD_VAR 0 8
15891: PUSH
15892: LD_INT 5
15894: ARRAY
15895: NOT
15896: OR
15897: PUSH
15898: LD_VAR 0 8
15902: PUSH
15903: LD_INT 6
15905: ARRAY
15906: PUSH
15907: LD_INT 1
15909: PUSH
15910: LD_INT 2
15912: PUSH
15913: LD_INT 7
15915: PUSH
15916: LD_INT 9
15918: PUSH
15919: LD_INT 10
15921: PUSH
15922: LD_INT 11
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: IN
15933: NOT
15934: OR
15935: IFFALSE 15941
// exit ;
15937: POP
15938: POP
15939: GO 16024
// end ;
15941: GO 15612
15943: POP
15944: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15945: LD_VAR 0 9
15949: PPUSH
15950: LD_VAR 0 3
15954: PPUSH
15955: LD_VAR 0 4
15959: PPUSH
15960: LD_INT 20
15962: PPUSH
15963: CALL 7947 0 4
15967: PUSH
15968: LD_INT 4
15970: ARRAY
15971: IFFALSE 15975
// exit ;
15973: GO 16024
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15975: LD_VAR 0 2
15979: PUSH
15980: LD_INT 29
15982: PUSH
15983: LD_INT 30
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: IN
15990: PUSH
15991: LD_VAR 0 3
15995: PPUSH
15996: LD_VAR 0 4
16000: PPUSH
16001: LD_VAR 0 9
16005: PPUSH
16006: CALL_OW 440
16010: NOT
16011: AND
16012: IFFALSE 16016
// exit ;
16014: GO 16024
// result := true ;
16016: LD_ADDR_VAR 0 6
16020: PUSH
16021: LD_INT 1
16023: ST_TO_ADDR
// end ;
16024: LD_VAR 0 6
16028: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16029: LD_INT 0
16031: PPUSH
16032: PPUSH
16033: PPUSH
16034: PPUSH
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
16065: PPUSH
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
16071: PPUSH
16072: PPUSH
16073: PPUSH
16074: PPUSH
16075: PPUSH
16076: PPUSH
16077: PPUSH
16078: PPUSH
16079: PPUSH
16080: PPUSH
16081: PPUSH
16082: PPUSH
16083: PPUSH
16084: PPUSH
16085: PPUSH
16086: PPUSH
16087: PPUSH
16088: PPUSH
// result = [ ] ;
16089: LD_ADDR_VAR 0 7
16093: PUSH
16094: EMPTY
16095: ST_TO_ADDR
// temp_list = [ ] ;
16096: LD_ADDR_VAR 0 9
16100: PUSH
16101: EMPTY
16102: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16103: LD_VAR 0 4
16107: PUSH
16108: LD_INT 0
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: LD_INT 2
16116: PUSH
16117: LD_INT 3
16119: PUSH
16120: LD_INT 4
16122: PUSH
16123: LD_INT 5
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: IN
16134: NOT
16135: PUSH
16136: LD_VAR 0 1
16140: PUSH
16141: LD_INT 0
16143: PUSH
16144: LD_INT 1
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: IN
16151: PUSH
16152: LD_VAR 0 5
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: LD_INT 2
16162: PUSH
16163: LD_INT 3
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: IN
16171: NOT
16172: AND
16173: OR
16174: IFFALSE 16178
// exit ;
16176: GO 34569
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16178: LD_VAR 0 1
16182: PUSH
16183: LD_INT 6
16185: PUSH
16186: LD_INT 7
16188: PUSH
16189: LD_INT 8
16191: PUSH
16192: LD_INT 13
16194: PUSH
16195: LD_INT 12
16197: PUSH
16198: LD_INT 15
16200: PUSH
16201: LD_INT 11
16203: PUSH
16204: LD_INT 14
16206: PUSH
16207: LD_INT 10
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: IN
16221: IFFALSE 16231
// btype = b_lab ;
16223: LD_ADDR_VAR 0 1
16227: PUSH
16228: LD_INT 6
16230: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16231: LD_VAR 0 6
16235: PUSH
16236: LD_INT 0
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: LD_INT 2
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: IN
16250: NOT
16251: PUSH
16252: LD_VAR 0 1
16256: PUSH
16257: LD_INT 0
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: LD_INT 2
16265: PUSH
16266: LD_INT 3
16268: PUSH
16269: LD_INT 6
16271: PUSH
16272: LD_INT 36
16274: PUSH
16275: LD_INT 4
16277: PUSH
16278: LD_INT 5
16280: PUSH
16281: LD_INT 31
16283: PUSH
16284: LD_INT 32
16286: PUSH
16287: LD_INT 33
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: IN
16303: NOT
16304: PUSH
16305: LD_VAR 0 6
16309: PUSH
16310: LD_INT 1
16312: EQUAL
16313: AND
16314: OR
16315: PUSH
16316: LD_VAR 0 1
16320: PUSH
16321: LD_INT 2
16323: PUSH
16324: LD_INT 3
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: IN
16331: NOT
16332: PUSH
16333: LD_VAR 0 6
16337: PUSH
16338: LD_INT 2
16340: EQUAL
16341: AND
16342: OR
16343: IFFALSE 16353
// mode = 0 ;
16345: LD_ADDR_VAR 0 6
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
// case mode of 0 :
16353: LD_VAR 0 6
16357: PUSH
16358: LD_INT 0
16360: DOUBLE
16361: EQUAL
16362: IFTRUE 16366
16364: GO 27819
16366: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16367: LD_ADDR_VAR 0 11
16371: PUSH
16372: LD_INT 0
16374: PUSH
16375: LD_INT 0
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: LD_INT 1
16387: NEG
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 1
16395: PUSH
16396: LD_INT 0
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: LD_INT 1
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 0
16415: PUSH
16416: LD_INT 1
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 1
16425: NEG
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 1
16436: NEG
16437: PUSH
16438: LD_INT 1
16440: NEG
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 1
16448: NEG
16449: PUSH
16450: LD_INT 2
16452: NEG
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 0
16460: PUSH
16461: LD_INT 2
16463: NEG
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: PUSH
16472: LD_INT 1
16474: NEG
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 1
16482: PUSH
16483: LD_INT 2
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 0
16492: PUSH
16493: LD_INT 2
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 1
16502: NEG
16503: PUSH
16504: LD_INT 1
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: LD_INT 3
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: LD_INT 3
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 1
16533: NEG
16534: PUSH
16535: LD_INT 2
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16560: LD_ADDR_VAR 0 12
16564: PUSH
16565: LD_INT 0
16567: PUSH
16568: LD_INT 0
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: LD_INT 1
16580: NEG
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 1
16588: PUSH
16589: LD_INT 0
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 1
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: LD_INT 1
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 1
16618: NEG
16619: PUSH
16620: LD_INT 0
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 1
16629: NEG
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: LD_INT 1
16644: NEG
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 2
16652: PUSH
16653: LD_INT 0
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 1
16672: NEG
16673: PUSH
16674: LD_INT 1
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 2
16683: NEG
16684: PUSH
16685: LD_INT 0
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 2
16694: NEG
16695: PUSH
16696: LD_INT 1
16698: NEG
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 2
16706: NEG
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 3
16717: NEG
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 3
16728: NEG
16729: PUSH
16730: LD_INT 1
16732: NEG
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16756: LD_ADDR_VAR 0 13
16760: PUSH
16761: LD_INT 0
16763: PUSH
16764: LD_INT 0
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: LD_INT 1
16776: NEG
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 1
16784: PUSH
16785: LD_INT 0
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 0
16804: PUSH
16805: LD_INT 1
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 1
16814: NEG
16815: PUSH
16816: LD_INT 0
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 1
16825: NEG
16826: PUSH
16827: LD_INT 1
16829: NEG
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 1
16837: NEG
16838: PUSH
16839: LD_INT 2
16841: NEG
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 2
16879: NEG
16880: PUSH
16881: LD_INT 1
16883: NEG
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 2
16891: NEG
16892: PUSH
16893: LD_INT 2
16895: NEG
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 2
16903: NEG
16904: PUSH
16905: LD_INT 3
16907: NEG
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 3
16915: NEG
16916: PUSH
16917: LD_INT 2
16919: NEG
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 3
16927: NEG
16928: PUSH
16929: LD_INT 3
16931: NEG
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16955: LD_ADDR_VAR 0 14
16959: PUSH
16960: LD_INT 0
16962: PUSH
16963: LD_INT 0
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 0
16972: PUSH
16973: LD_INT 1
16975: NEG
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: LD_INT 0
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 1
16993: PUSH
16994: LD_INT 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 1
17013: NEG
17014: PUSH
17015: LD_INT 0
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 1
17024: NEG
17025: PUSH
17026: LD_INT 1
17028: NEG
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 1
17036: NEG
17037: PUSH
17038: LD_INT 2
17040: NEG
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 0
17048: PUSH
17049: LD_INT 2
17051: NEG
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 1
17059: PUSH
17060: LD_INT 1
17062: NEG
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 1
17090: NEG
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 1
17101: NEG
17102: PUSH
17103: LD_INT 3
17105: NEG
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: LD_INT 3
17116: NEG
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: PUSH
17125: LD_INT 2
17127: NEG
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17151: LD_ADDR_VAR 0 15
17155: PUSH
17156: LD_INT 0
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 0
17168: PUSH
17169: LD_INT 1
17171: NEG
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 1
17179: PUSH
17180: LD_INT 0
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 1
17209: NEG
17210: PUSH
17211: LD_INT 0
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 1
17220: NEG
17221: PUSH
17222: LD_INT 1
17224: NEG
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 1
17232: PUSH
17233: LD_INT 1
17235: NEG
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 2
17243: PUSH
17244: LD_INT 0
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: LD_INT 1
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: NEG
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 2
17274: NEG
17275: PUSH
17276: LD_INT 0
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 2
17285: NEG
17286: PUSH
17287: LD_INT 1
17289: NEG
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 2
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 3
17308: PUSH
17309: LD_INT 0
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 3
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17344: LD_ADDR_VAR 0 16
17348: PUSH
17349: LD_INT 0
17351: PUSH
17352: LD_INT 0
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: LD_INT 1
17364: NEG
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 0
17392: PUSH
17393: LD_INT 1
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 1
17402: NEG
17403: PUSH
17404: LD_INT 0
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 1
17413: NEG
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 1
17425: NEG
17426: PUSH
17427: LD_INT 2
17429: NEG
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 2
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: LD_INT 2
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 2
17467: NEG
17468: PUSH
17469: LD_INT 1
17471: NEG
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: NEG
17480: PUSH
17481: LD_INT 2
17483: NEG
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 3
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: LD_INT 3
17501: PUSH
17502: LD_INT 3
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: PUSH
17509: LD_INT 2
17511: PUSH
17512: LD_INT 3
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17537: LD_ADDR_VAR 0 17
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: LD_INT 0
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 0
17554: PUSH
17555: LD_INT 1
17557: NEG
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: LD_INT 0
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 1
17575: PUSH
17576: LD_INT 1
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 0
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 1
17606: NEG
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 1
17618: NEG
17619: PUSH
17620: LD_INT 2
17622: NEG
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: LD_INT 2
17633: NEG
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: LD_INT 1
17644: NEG
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 2
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 2
17662: PUSH
17663: LD_INT 1
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 2
17672: PUSH
17673: LD_INT 2
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 0
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 1
17702: NEG
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: NEG
17714: PUSH
17715: LD_INT 0
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 2
17724: NEG
17725: PUSH
17726: LD_INT 1
17728: NEG
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 2
17736: NEG
17737: PUSH
17738: LD_INT 2
17740: NEG
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17767: LD_ADDR_VAR 0 18
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: LD_INT 0
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 0
17784: PUSH
17785: LD_INT 1
17787: NEG
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: LD_INT 0
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: LD_INT 1
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 1
17836: NEG
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: LD_INT 2
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: LD_INT 2
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 2
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 2
17902: PUSH
17903: LD_INT 2
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 0
17922: PUSH
17923: LD_INT 2
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 1
17932: NEG
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 2
17943: NEG
17944: PUSH
17945: LD_INT 0
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 2
17954: NEG
17955: PUSH
17956: LD_INT 1
17958: NEG
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 2
17966: NEG
17967: PUSH
17968: LD_INT 2
17970: NEG
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17997: LD_ADDR_VAR 0 19
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: LD_INT 0
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: LD_INT 1
18017: NEG
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: LD_INT 0
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: LD_INT 1
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 1
18066: NEG
18067: PUSH
18068: LD_INT 1
18070: NEG
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: LD_INT 2
18082: NEG
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 0
18090: PUSH
18091: LD_INT 2
18093: NEG
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 1
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: LD_INT 0
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 2
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 2
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 1
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: LD_INT 2
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 1
18162: NEG
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: NEG
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: NEG
18185: PUSH
18186: LD_INT 1
18188: NEG
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 2
18196: NEG
18197: PUSH
18198: LD_INT 2
18200: NEG
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18227: LD_ADDR_VAR 0 20
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 0
18244: PUSH
18245: LD_INT 1
18247: NEG
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: LD_INT 0
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 0
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: LD_INT 0
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: NEG
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 1
18308: NEG
18309: PUSH
18310: LD_INT 2
18312: NEG
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: LD_INT 2
18323: NEG
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 1
18331: PUSH
18332: LD_INT 1
18334: NEG
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 2
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 2
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: LD_INT 2
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 2
18403: NEG
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: NEG
18415: PUSH
18416: LD_INT 1
18418: NEG
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 2
18426: NEG
18427: PUSH
18428: LD_INT 2
18430: NEG
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18457: LD_ADDR_VAR 0 21
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 0
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: NEG
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 1
18538: NEG
18539: PUSH
18540: LD_INT 2
18542: NEG
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: LD_INT 2
18553: NEG
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: LD_INT 1
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 0
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: LD_INT 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 0
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 2
18633: NEG
18634: PUSH
18635: LD_INT 0
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 2
18644: NEG
18645: PUSH
18646: LD_INT 1
18648: NEG
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 2
18656: NEG
18657: PUSH
18658: LD_INT 2
18660: NEG
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18687: LD_ADDR_VAR 0 22
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 0
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: LD_INT 0
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 0
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 1
18768: NEG
18769: PUSH
18770: LD_INT 2
18772: NEG
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: LD_INT 2
18783: NEG
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 2
18802: PUSH
18803: LD_INT 0
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: LD_INT 2
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 0
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: NEG
18864: PUSH
18865: LD_INT 0
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 2
18874: NEG
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 2
18886: NEG
18887: PUSH
18888: LD_INT 2
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18917: LD_ADDR_VAR 0 23
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: LD_INT 1
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 1
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: NEG
18999: PUSH
19000: LD_INT 2
19002: NEG
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: LD_INT 2
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: LD_INT 1
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: LD_INT 0
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 2
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: PUSH
19063: LD_INT 2
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: NEG
19083: PUSH
19084: LD_INT 1
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 2
19093: NEG
19094: PUSH
19095: LD_INT 0
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 2
19104: NEG
19105: PUSH
19106: LD_INT 1
19108: NEG
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 2
19116: NEG
19117: PUSH
19118: LD_INT 2
19120: NEG
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 2
19128: NEG
19129: PUSH
19130: LD_INT 3
19132: NEG
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: LD_INT 3
19144: NEG
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: LD_INT 2
19155: NEG
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 2
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19197: LD_ADDR_VAR 0 24
19201: PUSH
19202: LD_INT 0
19204: PUSH
19205: LD_INT 0
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 0
19214: PUSH
19215: LD_INT 1
19217: NEG
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: NEG
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: NEG
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: NEG
19279: PUSH
19280: LD_INT 2
19282: NEG
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: LD_INT 2
19293: NEG
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 1
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 1
19362: NEG
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 2
19373: NEG
19374: PUSH
19375: LD_INT 0
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 2
19384: NEG
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 2
19396: NEG
19397: PUSH
19398: LD_INT 2
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 2
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 1
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 3
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 3
19440: PUSH
19441: LD_INT 2
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19473: LD_ADDR_VAR 0 25
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: LD_INT 1
19493: NEG
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: NEG
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: NEG
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 0
19566: PUSH
19567: LD_INT 2
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: LD_INT 1
19580: NEG
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: PUSH
19609: LD_INT 2
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 2
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: NEG
19650: PUSH
19651: LD_INT 0
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: NEG
19661: PUSH
19662: LD_INT 1
19664: NEG
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 2
19672: NEG
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 3
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 3
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: LD_INT 3
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19747: LD_ADDR_VAR 0 26
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: LD_INT 0
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 0
19764: PUSH
19765: LD_INT 1
19767: NEG
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 0
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: LD_INT 1
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: NEG
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: LD_INT 2
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 2
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: NEG
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: NEG
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 2
19946: NEG
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: LD_INT 3
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: LD_INT 3
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 2
19989: NEG
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20023: LD_ADDR_VAR 0 27
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 1
20092: NEG
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: LD_INT 2
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: LD_INT 2
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: LD_INT 2
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 0
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: NEG
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 2
20210: NEG
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 2
20222: NEG
20223: PUSH
20224: LD_INT 2
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 1
20234: NEG
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 2
20245: NEG
20246: PUSH
20247: LD_INT 1
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 3
20256: NEG
20257: PUSH
20258: LD_INT 1
20260: NEG
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 3
20268: NEG
20269: PUSH
20270: LD_INT 2
20272: NEG
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20303: LD_ADDR_VAR 0 28
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 0
20320: PUSH
20321: LD_INT 1
20323: NEG
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 1
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: LD_INT 1
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: LD_INT 2
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: LD_INT 2
20399: NEG
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: LD_INT 2
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: LD_INT 2
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: NEG
20469: PUSH
20470: LD_INT 1
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 2
20479: NEG
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 2
20502: NEG
20503: PUSH
20504: LD_INT 2
20506: NEG
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: LD_INT 3
20518: NEG
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 1
20526: NEG
20527: PUSH
20528: LD_INT 3
20530: NEG
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 3
20538: NEG
20539: PUSH
20540: LD_INT 1
20542: NEG
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 3
20550: NEG
20551: PUSH
20552: LD_INT 2
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20585: LD_ADDR_VAR 0 29
20589: PUSH
20590: LD_INT 0
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 0
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 1
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: LD_INT 0
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: NEG
20655: PUSH
20656: LD_INT 1
20658: NEG
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: LD_INT 2
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: LD_INT 2
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: PUSH
20690: LD_INT 1
20692: NEG
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: LD_INT 0
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: LD_INT 2
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 2
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 2
20751: NEG
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 2
20763: NEG
20764: PUSH
20765: LD_INT 2
20767: NEG
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 2
20775: NEG
20776: PUSH
20777: LD_INT 3
20779: NEG
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 1
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 3
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 3
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 3
20829: NEG
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20864: LD_ADDR_VAR 0 30
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: LD_INT 1
20884: NEG
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 1
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 1
20922: NEG
20923: PUSH
20924: LD_INT 0
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: NEG
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: LD_INT 2
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 0
20957: PUSH
20958: LD_INT 2
20960: NEG
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: LD_INT 0
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 2
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: LD_INT 2
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: NEG
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 2
21030: NEG
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 2
21041: NEG
21042: PUSH
21043: LD_INT 1
21045: NEG
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 3
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: PUSH
21066: LD_INT 2
21068: NEG
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 3
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: LD_INT 3
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 2
21096: NEG
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 3
21107: NEG
21108: PUSH
21109: LD_INT 1
21111: NEG
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21142: LD_ADDR_VAR 0 31
21146: PUSH
21147: LD_INT 0
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: PUSH
21171: LD_INT 0
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 1
21180: PUSH
21181: LD_INT 1
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: LD_INT 1
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: LD_INT 0
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: LD_INT 2
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 1
21238: NEG
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 2
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: LD_INT 2
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 2
21307: NEG
21308: PUSH
21309: LD_INT 1
21311: NEG
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: NEG
21320: PUSH
21321: LD_INT 2
21323: NEG
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: LD_INT 3
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 1
21346: NEG
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 3
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: LD_INT 3
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 3
21385: NEG
21386: PUSH
21387: LD_INT 2
21389: NEG
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21420: LD_ADDR_VAR 0 32
21424: PUSH
21425: LD_INT 0
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: LD_INT 1
21440: NEG
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: LD_INT 1
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: LD_INT 1
21493: NEG
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: LD_INT 2
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: NEG
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 2
21586: NEG
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 2
21597: NEG
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: LD_INT 1
21609: NEG
21610: PUSH
21611: LD_INT 3
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: LD_INT 2
21624: NEG
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 3
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 3
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: NEG
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 3
21663: NEG
21664: PUSH
21665: LD_INT 1
21667: NEG
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21698: LD_ADDR_VAR 0 33
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: LD_INT 0
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: LD_INT 0
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 2
21853: NEG
21854: PUSH
21855: LD_INT 0
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 2
21876: NEG
21877: PUSH
21878: LD_INT 2
21880: NEG
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 2
21888: NEG
21889: PUSH
21890: LD_INT 3
21892: NEG
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 3
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: LD_INT 3
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: NEG
21932: PUSH
21933: LD_INT 2
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 3
21942: NEG
21943: PUSH
21944: LD_INT 2
21946: NEG
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21977: LD_ADDR_VAR 0 34
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: LD_INT 1
21997: NEG
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 1
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 1
22035: NEG
22036: PUSH
22037: LD_INT 0
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 1
22046: NEG
22047: PUSH
22048: LD_INT 1
22050: NEG
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: LD_INT 2
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 0
22070: PUSH
22071: LD_INT 2
22073: NEG
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: LD_INT 1
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 1
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 1
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 1
22122: NEG
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: NEG
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: NEG
22169: PUSH
22170: LD_INT 3
22172: NEG
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 1
22180: PUSH
22181: LD_INT 2
22183: NEG
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 3
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 2
22201: PUSH
22202: LD_INT 3
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 2
22211: NEG
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 3
22222: NEG
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22257: LD_ADDR_VAR 0 35
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: LD_INT 1
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 0
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 1
22315: NEG
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 1
22326: NEG
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: NEG
22349: PUSH
22350: LD_INT 1
22352: NEG
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22369: LD_ADDR_VAR 0 36
22373: PUSH
22374: LD_INT 0
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: LD_INT 0
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: LD_INT 2
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: LD_INT 2
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22481: LD_ADDR_VAR 0 37
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22593: LD_ADDR_VAR 0 38
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 1
22651: NEG
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 2
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 2
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22705: LD_ADDR_VAR 0 39
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: LD_INT 2
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22817: LD_ADDR_VAR 0 40
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22929: LD_ADDR_VAR 0 41
22933: PUSH
22934: LD_INT 0
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: LD_INT 2
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 1
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 2
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 2
23084: NEG
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: LD_INT 1
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: NEG
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 2
23119: NEG
23120: PUSH
23121: LD_INT 3
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 2
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 3
23142: PUSH
23143: LD_INT 0
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 3
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 3
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 3
23172: PUSH
23173: LD_INT 3
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: NEG
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 3
23203: NEG
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 3
23214: NEG
23215: PUSH
23216: LD_INT 1
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 3
23226: NEG
23227: PUSH
23228: LD_INT 2
23230: NEG
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 3
23238: NEG
23239: PUSH
23240: LD_INT 3
23242: NEG
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23279: LD_ADDR_VAR 0 42
23283: PUSH
23284: LD_INT 0
23286: PUSH
23287: LD_INT 0
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: LD_INT 1
23299: NEG
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: LD_INT 1
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 1
23337: NEG
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: LD_INT 2
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: LD_INT 2
23375: NEG
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: LD_INT 2
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 0
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: LD_INT 1
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: NEG
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 2
23457: NEG
23458: PUSH
23459: LD_INT 2
23461: NEG
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 2
23469: NEG
23470: PUSH
23471: LD_INT 3
23473: NEG
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: LD_INT 3
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: LD_INT 3
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 2
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: PUSH
23526: LD_INT 3
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: LD_INT 3
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 3
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 0
23555: PUSH
23556: LD_INT 3
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: NEG
23566: PUSH
23567: LD_INT 2
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 3
23576: NEG
23577: PUSH
23578: LD_INT 2
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 3
23588: NEG
23589: PUSH
23590: LD_INT 3
23592: NEG
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23629: LD_ADDR_VAR 0 43
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 0
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 1
23687: NEG
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: LD_INT 2
23714: NEG
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 2
23725: NEG
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: NEG
23807: PUSH
23808: LD_INT 1
23810: NEG
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: LD_INT 3
23822: NEG
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: LD_INT 3
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: LD_INT 2
23844: NEG
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 3
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 3
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 3
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 0
23893: PUSH
23894: LD_INT 3
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: LD_INT 2
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 2
23914: NEG
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 3
23925: NEG
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: NEG
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23977: LD_ADDR_VAR 0 44
23981: PUSH
23982: LD_INT 0
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 1
23997: NEG
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 1
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: NEG
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: NEG
24059: PUSH
24060: LD_INT 2
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 1
24073: NEG
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 2
24101: PUSH
24102: LD_INT 2
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: NEG
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 2
24143: NEG
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 2
24155: NEG
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 2
24167: NEG
24168: PUSH
24169: LD_INT 3
24171: NEG
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 2
24179: PUSH
24180: LD_INT 1
24182: NEG
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 3
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 3
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 3
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 3
24220: PUSH
24221: LD_INT 3
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 3
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 3
24251: NEG
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 3
24262: NEG
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 3
24274: NEG
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 3
24286: NEG
24287: PUSH
24288: LD_INT 3
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24327: LD_ADDR_VAR 0 45
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: LD_INT 0
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: NEG
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: LD_INT 2
24412: NEG
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 0
24420: PUSH
24421: LD_INT 2
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: LD_INT 1
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 2
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 2
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 2
24493: NEG
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: NEG
24506: PUSH
24507: LD_INT 2
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 2
24517: NEG
24518: PUSH
24519: LD_INT 3
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: LD_INT 3
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 0
24541: PUSH
24542: LD_INT 3
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 2
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 3
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 3
24573: PUSH
24574: LD_INT 3
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: LD_INT 3
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: LD_INT 3
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: LD_INT 3
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: NEG
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 3
24624: NEG
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 3
24636: NEG
24637: PUSH
24638: LD_INT 3
24640: NEG
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24677: LD_ADDR_VAR 0 46
24681: PUSH
24682: LD_INT 0
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: LD_INT 0
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: NEG
24747: PUSH
24748: LD_INT 1
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: NEG
24759: PUSH
24760: LD_INT 2
24762: NEG
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 0
24770: PUSH
24771: LD_INT 2
24773: NEG
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 2
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: NEG
24833: PUSH
24834: LD_INT 1
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 2
24843: NEG
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: LD_INT 1
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: NEG
24867: PUSH
24868: LD_INT 3
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 3
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 2
24892: NEG
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 3
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 3
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 3
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 3
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: NEG
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 3
24973: NEG
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 3
24984: NEG
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25025: LD_ADDR_VAR 0 47
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: NEG
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 2
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25176: LD_ADDR_VAR 0 48
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: LD_INT 2
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: LD_INT 2
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25323: LD_ADDR_VAR 0 49
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25467: LD_ADDR_VAR 0 50
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: NEG
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: LD_INT 1
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 2
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 2
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25611: LD_ADDR_VAR 0 51
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 2
25723: NEG
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25758: LD_ADDR_VAR 0 52
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 1
25827: NEG
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: LD_INT 2
25843: NEG
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: NEG
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 2
25885: NEG
25886: PUSH
25887: LD_INT 2
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25909: LD_ADDR_VAR 0 53
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: LD_INT 2
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 2
26096: NEG
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: LD_INT 2
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26139: LD_ADDR_VAR 0 54
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 2
26224: NEG
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 2
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 2
26326: NEG
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: NEG
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26369: LD_ADDR_VAR 0 55
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: NEG
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: LD_INT 2
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 0
26462: PUSH
26463: LD_INT 2
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 1
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 2
26556: NEG
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: LD_INT 2
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26599: LD_ADDR_VAR 0 56
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: LD_INT 0
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 1
26668: NEG
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: LD_INT 2
26684: NEG
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: LD_INT 2
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 2
26786: NEG
26787: PUSH
26788: LD_INT 1
26790: NEG
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: NEG
26799: PUSH
26800: LD_INT 2
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26829: LD_ADDR_VAR 0 57
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 1
26898: NEG
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: LD_INT 2
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 2
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: NEG
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 2
27016: NEG
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 2
27028: NEG
27029: PUSH
27030: LD_INT 2
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27059: LD_ADDR_VAR 0 58
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: NEG
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: LD_INT 2
27144: NEG
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: LD_INT 2
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: LD_INT 1
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: LD_INT 2
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: LD_INT 2
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 2
27246: NEG
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 2
27258: NEG
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27289: LD_ADDR_VAR 0 59
27293: PUSH
27294: LD_INT 0
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27377: LD_ADDR_VAR 0 60
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 1
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27465: LD_ADDR_VAR 0 61
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27553: LD_ADDR_VAR 0 62
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: LD_INT 1
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27641: LD_ADDR_VAR 0 63
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 0
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: LD_INT 0
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: NEG
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27729: LD_ADDR_VAR 0 64
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: ST_TO_ADDR
// end ; 1 :
27817: GO 33714
27819: LD_INT 1
27821: DOUBLE
27822: EQUAL
27823: IFTRUE 27827
27825: GO 30450
27827: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27828: LD_ADDR_VAR 0 11
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: LD_INT 3
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 3
27850: NEG
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: LIST
27871: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27872: LD_ADDR_VAR 0 12
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 3
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27913: LD_ADDR_VAR 0 13
27917: PUSH
27918: LD_INT 3
27920: PUSH
27921: LD_INT 2
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 3
27930: PUSH
27931: LD_INT 3
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: LIST
27952: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27953: LD_ADDR_VAR 0 14
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: LD_INT 3
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27994: LD_ADDR_VAR 0 15
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 3
28012: NEG
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 3
28023: NEG
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28038: LD_ADDR_VAR 0 16
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: LD_INT 3
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 3
28057: NEG
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 3
28069: NEG
28070: PUSH
28071: LD_INT 3
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28084: LD_ADDR_VAR 0 17
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 3
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 3
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28128: LD_ADDR_VAR 0 18
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 3
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 3
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28169: LD_ADDR_VAR 0 19
28173: PUSH
28174: LD_INT 3
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 3
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 3
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: LIST
28208: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28209: LD_ADDR_VAR 0 20
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: LIST
28249: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28250: LD_ADDR_VAR 0 21
28254: PUSH
28255: LD_INT 2
28257: NEG
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 3
28268: NEG
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 3
28279: NEG
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28294: LD_ADDR_VAR 0 22
28298: PUSH
28299: LD_INT 2
28301: NEG
28302: PUSH
28303: LD_INT 3
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 3
28313: NEG
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 3
28325: NEG
28326: PUSH
28327: LD_INT 3
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28340: LD_ADDR_VAR 0 23
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: LD_INT 3
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: LD_INT 4
28362: NEG
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: LD_INT 3
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28384: LD_ADDR_VAR 0 24
28388: PUSH
28389: LD_INT 3
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 3
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 4
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28425: LD_ADDR_VAR 0 25
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: LD_INT 3
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 4
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 3
28452: PUSH
28453: LD_INT 4
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28465: LD_ADDR_VAR 0 26
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: LD_INT 3
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: PUSH
28483: LD_INT 4
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: LD_INT 3
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28506: LD_ADDR_VAR 0 27
28510: PUSH
28511: LD_INT 3
28513: NEG
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 3
28524: NEG
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 4
28535: NEG
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28550: LD_ADDR_VAR 0 28
28554: PUSH
28555: LD_INT 3
28557: NEG
28558: PUSH
28559: LD_INT 3
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 3
28569: NEG
28570: PUSH
28571: LD_INT 4
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 4
28581: NEG
28582: PUSH
28583: LD_INT 3
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28596: LD_ADDR_VAR 0 29
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: LD_INT 3
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 3
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 2
28629: NEG
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 1
28637: NEG
28638: PUSH
28639: LD_INT 4
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 4
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 3
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 5
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 5
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: LD_INT 4
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: LD_INT 6
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 6
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 5
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28751: LD_ADDR_VAR 0 30
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: LD_INT 1
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 3
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 3
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 3
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 4
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 4
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 4
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 5
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 5
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 5
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 6
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 6
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28894: LD_ADDR_VAR 0 31
28898: PUSH
28899: LD_INT 3
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 3
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 2
28921: PUSH
28922: LD_INT 3
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 4
28931: PUSH
28932: LD_INT 3
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 4
28941: PUSH
28942: LD_INT 4
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 3
28951: PUSH
28952: LD_INT 4
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 5
28961: PUSH
28962: LD_INT 4
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 5
28971: PUSH
28972: LD_INT 5
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 4
28981: PUSH
28982: LD_INT 5
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 6
28991: PUSH
28992: LD_INT 5
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 6
29001: PUSH
29002: LD_INT 6
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 5
29011: PUSH
29012: LD_INT 6
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29033: LD_ADDR_VAR 0 32
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 3
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: LD_INT 3
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: LD_INT 2
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: LD_INT 4
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 4
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 5
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: LD_INT 4
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 6
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 6
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 5
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29176: LD_ADDR_VAR 0 33
29180: PUSH
29181: LD_INT 2
29183: NEG
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 3
29194: NEG
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: NEG
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 3
29217: NEG
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 4
29228: NEG
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 4
29239: NEG
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 4
29251: NEG
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 5
29262: NEG
29263: PUSH
29264: LD_INT 0
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 5
29273: NEG
29274: PUSH
29275: LD_INT 1
29277: NEG
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 5
29285: NEG
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 6
29296: NEG
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 6
29307: NEG
29308: PUSH
29309: LD_INT 1
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29331: LD_ADDR_VAR 0 34
29335: PUSH
29336: LD_INT 2
29338: NEG
29339: PUSH
29340: LD_INT 3
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 3
29350: NEG
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: LD_INT 3
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 3
29374: NEG
29375: PUSH
29376: LD_INT 4
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 4
29386: NEG
29387: PUSH
29388: LD_INT 3
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 4
29398: NEG
29399: PUSH
29400: LD_INT 4
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 4
29410: NEG
29411: PUSH
29412: LD_INT 5
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 5
29422: NEG
29423: PUSH
29424: LD_INT 4
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 5
29434: NEG
29435: PUSH
29436: LD_INT 5
29438: NEG
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 5
29446: NEG
29447: PUSH
29448: LD_INT 6
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 6
29458: NEG
29459: PUSH
29460: LD_INT 5
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 6
29470: NEG
29471: PUSH
29472: LD_INT 6
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29494: LD_ADDR_VAR 0 41
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: LD_INT 3
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29538: LD_ADDR_VAR 0 42
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: LIST
29578: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29579: LD_ADDR_VAR 0 43
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: LD_INT 2
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: LD_INT 3
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29619: LD_ADDR_VAR 0 44
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: LD_INT 3
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 1
29646: NEG
29647: PUSH
29648: LD_INT 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29660: LD_ADDR_VAR 0 45
29664: PUSH
29665: LD_INT 2
29667: NEG
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 2
29678: NEG
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 3
29689: NEG
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29704: LD_ADDR_VAR 0 46
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: LD_INT 2
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: LD_INT 3
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 3
29735: NEG
29736: PUSH
29737: LD_INT 2
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29750: LD_ADDR_VAR 0 47
29754: PUSH
29755: LD_INT 2
29757: NEG
29758: PUSH
29759: LD_INT 3
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: LD_INT 3
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29783: LD_ADDR_VAR 0 48
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 2
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29814: LD_ADDR_VAR 0 49
29818: PUSH
29819: LD_INT 3
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 3
29831: PUSH
29832: LD_INT 2
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29843: LD_ADDR_VAR 0 50
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 3
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29872: LD_ADDR_VAR 0 51
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: LD_INT 2
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29903: LD_ADDR_VAR 0 52
29907: PUSH
29908: LD_INT 3
29910: NEG
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 3
29922: NEG
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29936: LD_ADDR_VAR 0 53
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: LD_INT 3
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 0
29955: PUSH
29956: LD_INT 3
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: LD_INT 2
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29980: LD_ADDR_VAR 0 54
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30021: LD_ADDR_VAR 0 55
30025: PUSH
30026: LD_INT 3
30028: PUSH
30029: LD_INT 2
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 3
30038: PUSH
30039: LD_INT 3
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: LD_INT 3
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30061: LD_ADDR_VAR 0 56
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: LD_INT 3
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 3
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: LIST
30101: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30102: LD_ADDR_VAR 0 57
30106: PUSH
30107: LD_INT 2
30109: NEG
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 3
30120: NEG
30121: PUSH
30122: LD_INT 0
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 3
30131: NEG
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30146: LD_ADDR_VAR 0 58
30150: PUSH
30151: LD_INT 2
30153: NEG
30154: PUSH
30155: LD_INT 3
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 3
30165: NEG
30166: PUSH
30167: LD_INT 2
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 3
30177: NEG
30178: PUSH
30179: LD_INT 3
30181: NEG
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30192: LD_ADDR_VAR 0 59
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: LD_INT 2
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: LD_INT 2
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30236: LD_ADDR_VAR 0 60
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30277: LD_ADDR_VAR 0 61
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: LIST
30316: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30317: LD_ADDR_VAR 0 62
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30358: LD_ADDR_VAR 0 63
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 2
30376: NEG
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 2
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30402: LD_ADDR_VAR 0 64
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: LD_INT 2
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: LD_INT 2
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: ST_TO_ADDR
// end ; 2 :
30448: GO 33714
30450: LD_INT 2
30452: DOUBLE
30453: EQUAL
30454: IFTRUE 30458
30456: GO 33713
30458: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30459: LD_ADDR_VAR 0 29
30463: PUSH
30464: LD_INT 4
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 4
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 5
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 5
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 4
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 3
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: LD_INT 2
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 5
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 3
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 4
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 4
30589: PUSH
30590: LD_INT 4
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: LD_INT 4
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: LD_INT 3
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 2
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 4
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 4
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: LD_INT 4
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: LD_INT 5
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: LD_INT 5
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: LD_INT 4
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: LD_INT 3
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 2
30721: PUSH
30722: LD_INT 5
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 3
30742: NEG
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 3
30753: NEG
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: NEG
30777: PUSH
30778: LD_INT 1
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: NEG
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 4
30798: NEG
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 4
30809: NEG
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 4
30821: NEG
30822: PUSH
30823: LD_INT 2
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 2
30833: NEG
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 4
30844: NEG
30845: PUSH
30846: LD_INT 4
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 4
30856: NEG
30857: PUSH
30858: LD_INT 5
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 3
30868: NEG
30869: PUSH
30870: LD_INT 4
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: LD_INT 3
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 4
30892: NEG
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 5
30904: NEG
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 5
30916: NEG
30917: PUSH
30918: LD_INT 5
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 3
30928: NEG
30929: PUSH
30930: LD_INT 5
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 5
30940: NEG
30941: PUSH
30942: LD_INT 3
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30997: LD_ADDR_VAR 0 30
31001: PUSH
31002: LD_INT 4
31004: PUSH
31005: LD_INT 4
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 4
31014: PUSH
31015: LD_INT 3
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 5
31024: PUSH
31025: LD_INT 4
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 5
31034: PUSH
31035: LD_INT 5
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 4
31044: PUSH
31045: LD_INT 5
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 3
31054: PUSH
31055: LD_INT 4
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: LD_INT 3
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 5
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: LD_INT 5
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: LD_INT 3
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 4
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 4
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 4
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 2
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 4
31187: NEG
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 4
31198: NEG
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 3
31210: NEG
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 3
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 4
31232: NEG
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 5
31243: NEG
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 5
31254: NEG
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 5
31266: NEG
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 3
31278: NEG
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 3
31289: NEG
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 3
31301: NEG
31302: PUSH
31303: LD_INT 4
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 3
31337: NEG
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 4
31349: NEG
31350: PUSH
31351: LD_INT 3
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 4
31361: NEG
31362: PUSH
31363: LD_INT 4
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: LD_INT 4
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 4
31385: NEG
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 4
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: LD_INT 5
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: LD_INT 4
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: LD_INT 3
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: LD_INT 3
31444: NEG
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 4
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 5
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 3
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: LD_INT 5
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31544: LD_ADDR_VAR 0 31
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 4
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: LD_INT 3
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: LD_INT 4
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 1
31581: PUSH
31582: LD_INT 5
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 5
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: LD_INT 4
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: LD_INT 5
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 2
31633: NEG
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 3
31644: NEG
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 3
31655: NEG
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 4
31700: NEG
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 4
31711: NEG
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 4
31723: NEG
31724: PUSH
31725: LD_INT 2
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 4
31746: NEG
31747: PUSH
31748: LD_INT 4
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 4
31758: NEG
31759: PUSH
31760: LD_INT 5
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: LD_INT 4
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 3
31782: NEG
31783: PUSH
31784: LD_INT 3
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: LD_INT 3
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 5
31806: NEG
31807: PUSH
31808: LD_INT 4
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 5
31818: NEG
31819: PUSH
31820: LD_INT 5
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 3
31830: NEG
31831: PUSH
31832: LD_INT 5
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 5
31842: NEG
31843: PUSH
31844: LD_INT 3
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 3
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 4
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 3
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 2
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: NEG
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 4
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 2
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 2
31944: NEG
31945: PUSH
31946: LD_INT 4
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 4
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 4
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 5
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 5
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 4
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 3
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 3
32028: PUSH
32029: LD_INT 2
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 5
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32094: LD_ADDR_VAR 0 32
32098: PUSH
32099: LD_INT 4
32101: NEG
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 4
32112: NEG
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: NEG
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 3
32135: NEG
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 4
32146: NEG
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 5
32157: NEG
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 5
32168: NEG
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 5
32180: NEG
32181: PUSH
32182: LD_INT 2
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: LD_INT 2
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: LD_INT 3
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 3
32215: NEG
32216: PUSH
32217: LD_INT 4
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: LD_INT 3
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 2
32239: NEG
32240: PUSH
32241: LD_INT 2
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 3
32251: NEG
32252: PUSH
32253: LD_INT 2
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 4
32263: NEG
32264: PUSH
32265: LD_INT 3
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 4
32275: NEG
32276: PUSH
32277: LD_INT 4
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: LD_INT 4
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 4
32299: NEG
32300: PUSH
32301: LD_INT 2
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 4
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 0
32322: PUSH
32323: LD_INT 5
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: LD_INT 4
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 3
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: LD_INT 3
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 4
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: LD_INT 5
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: LD_INT 5
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: LD_INT 1
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 4
32434: PUSH
32435: LD_INT 0
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 4
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 4
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: PUSH
32507: LD_INT 4
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 4
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 5
32526: PUSH
32527: LD_INT 4
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 5
32536: PUSH
32537: LD_INT 5
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 4
32546: PUSH
32547: LD_INT 5
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: PUSH
32557: LD_INT 4
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: LD_INT 3
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 5
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 5
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32641: LD_ADDR_VAR 0 33
32645: PUSH
32646: LD_INT 4
32648: NEG
32649: PUSH
32650: LD_INT 4
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 4
32660: NEG
32661: PUSH
32662: LD_INT 5
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 3
32672: NEG
32673: PUSH
32674: LD_INT 4
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: LD_INT 3
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 4
32696: NEG
32697: PUSH
32698: LD_INT 3
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 5
32708: NEG
32709: PUSH
32710: LD_INT 4
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 5
32720: NEG
32721: PUSH
32722: LD_INT 5
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: NEG
32733: PUSH
32734: LD_INT 5
32736: NEG
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 5
32744: NEG
32745: PUSH
32746: LD_INT 3
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 3
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 4
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: LD_INT 3
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: LD_INT 3
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: LD_INT 4
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: LD_INT 4
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 4
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 4
32868: PUSH
32869: LD_INT 1
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 5
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 5
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 4
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: PUSH
32931: LD_INT 2
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 5
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: PUSH
32952: LD_INT 3
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 4
32971: PUSH
32972: LD_INT 3
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 4
32981: PUSH
32982: LD_INT 4
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 3
32991: PUSH
32992: LD_INT 4
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 3
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 4
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 4
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 4
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 3
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: LD_INT 4
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: LD_INT 5
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: LD_INT 5
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: LD_INT 4
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: NEG
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 5
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33179: LD_ADDR_VAR 0 34
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 4
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: LD_INT 5
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: LD_INT 4
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: LD_INT 3
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: LD_INT 3
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: LD_INT 4
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 5
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: LD_INT 3
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: NEG
33277: PUSH
33278: LD_INT 5
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 3
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 4
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 3
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 4
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 4
33381: PUSH
33382: LD_INT 4
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 4
33391: PUSH
33392: LD_INT 3
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 5
33401: PUSH
33402: LD_INT 4
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 5
33411: PUSH
33412: LD_INT 5
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 4
33421: PUSH
33422: LD_INT 5
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: LD_INT 4
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 3
33441: PUSH
33442: LD_INT 3
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 5
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: LD_INT 5
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: LD_INT 4
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 4
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 2
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 4
33564: NEG
33565: PUSH
33566: LD_INT 0
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 4
33575: NEG
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 3
33587: NEG
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 3
33598: NEG
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 4
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 5
33620: NEG
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 5
33631: NEG
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 5
33643: NEG
33644: PUSH
33645: LD_INT 2
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 3
33655: NEG
33656: PUSH
33657: LD_INT 2
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: ST_TO_ADDR
// end ; end ;
33711: GO 33714
33713: POP
// case btype of b_depot , b_warehouse :
33714: LD_VAR 0 1
33718: PUSH
33719: LD_INT 0
33721: DOUBLE
33722: EQUAL
33723: IFTRUE 33733
33725: LD_INT 1
33727: DOUBLE
33728: EQUAL
33729: IFTRUE 33733
33731: GO 33934
33733: POP
// case nation of nation_american :
33734: LD_VAR 0 5
33738: PUSH
33739: LD_INT 1
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33747
33745: GO 33803
33747: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33748: LD_ADDR_VAR 0 9
33752: PUSH
33753: LD_VAR 0 11
33757: PUSH
33758: LD_VAR 0 12
33762: PUSH
33763: LD_VAR 0 13
33767: PUSH
33768: LD_VAR 0 14
33772: PUSH
33773: LD_VAR 0 15
33777: PUSH
33778: LD_VAR 0 16
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: PUSH
33791: LD_VAR 0 4
33795: PUSH
33796: LD_INT 1
33798: PLUS
33799: ARRAY
33800: ST_TO_ADDR
33801: GO 33932
33803: LD_INT 2
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33867
33811: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33812: LD_ADDR_VAR 0 9
33816: PUSH
33817: LD_VAR 0 17
33821: PUSH
33822: LD_VAR 0 18
33826: PUSH
33827: LD_VAR 0 19
33831: PUSH
33832: LD_VAR 0 20
33836: PUSH
33837: LD_VAR 0 21
33841: PUSH
33842: LD_VAR 0 22
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: PUSH
33855: LD_VAR 0 4
33859: PUSH
33860: LD_INT 1
33862: PLUS
33863: ARRAY
33864: ST_TO_ADDR
33865: GO 33932
33867: LD_INT 3
33869: DOUBLE
33870: EQUAL
33871: IFTRUE 33875
33873: GO 33931
33875: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33876: LD_ADDR_VAR 0 9
33880: PUSH
33881: LD_VAR 0 23
33885: PUSH
33886: LD_VAR 0 24
33890: PUSH
33891: LD_VAR 0 25
33895: PUSH
33896: LD_VAR 0 26
33900: PUSH
33901: LD_VAR 0 27
33905: PUSH
33906: LD_VAR 0 28
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: PUSH
33919: LD_VAR 0 4
33923: PUSH
33924: LD_INT 1
33926: PLUS
33927: ARRAY
33928: ST_TO_ADDR
33929: GO 33932
33931: POP
33932: GO 34487
33934: LD_INT 2
33936: DOUBLE
33937: EQUAL
33938: IFTRUE 33948
33940: LD_INT 3
33942: DOUBLE
33943: EQUAL
33944: IFTRUE 33948
33946: GO 34004
33948: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33949: LD_ADDR_VAR 0 9
33953: PUSH
33954: LD_VAR 0 29
33958: PUSH
33959: LD_VAR 0 30
33963: PUSH
33964: LD_VAR 0 31
33968: PUSH
33969: LD_VAR 0 32
33973: PUSH
33974: LD_VAR 0 33
33978: PUSH
33979: LD_VAR 0 34
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: PUSH
33992: LD_VAR 0 4
33996: PUSH
33997: LD_INT 1
33999: PLUS
34000: ARRAY
34001: ST_TO_ADDR
34002: GO 34487
34004: LD_INT 16
34006: DOUBLE
34007: EQUAL
34008: IFTRUE 34066
34010: LD_INT 17
34012: DOUBLE
34013: EQUAL
34014: IFTRUE 34066
34016: LD_INT 18
34018: DOUBLE
34019: EQUAL
34020: IFTRUE 34066
34022: LD_INT 19
34024: DOUBLE
34025: EQUAL
34026: IFTRUE 34066
34028: LD_INT 22
34030: DOUBLE
34031: EQUAL
34032: IFTRUE 34066
34034: LD_INT 20
34036: DOUBLE
34037: EQUAL
34038: IFTRUE 34066
34040: LD_INT 21
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34066
34046: LD_INT 23
34048: DOUBLE
34049: EQUAL
34050: IFTRUE 34066
34052: LD_INT 24
34054: DOUBLE
34055: EQUAL
34056: IFTRUE 34066
34058: LD_INT 25
34060: DOUBLE
34061: EQUAL
34062: IFTRUE 34066
34064: GO 34122
34066: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34067: LD_ADDR_VAR 0 9
34071: PUSH
34072: LD_VAR 0 35
34076: PUSH
34077: LD_VAR 0 36
34081: PUSH
34082: LD_VAR 0 37
34086: PUSH
34087: LD_VAR 0 38
34091: PUSH
34092: LD_VAR 0 39
34096: PUSH
34097: LD_VAR 0 40
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: PUSH
34110: LD_VAR 0 4
34114: PUSH
34115: LD_INT 1
34117: PLUS
34118: ARRAY
34119: ST_TO_ADDR
34120: GO 34487
34122: LD_INT 6
34124: DOUBLE
34125: EQUAL
34126: IFTRUE 34178
34128: LD_INT 7
34130: DOUBLE
34131: EQUAL
34132: IFTRUE 34178
34134: LD_INT 8
34136: DOUBLE
34137: EQUAL
34138: IFTRUE 34178
34140: LD_INT 13
34142: DOUBLE
34143: EQUAL
34144: IFTRUE 34178
34146: LD_INT 12
34148: DOUBLE
34149: EQUAL
34150: IFTRUE 34178
34152: LD_INT 15
34154: DOUBLE
34155: EQUAL
34156: IFTRUE 34178
34158: LD_INT 11
34160: DOUBLE
34161: EQUAL
34162: IFTRUE 34178
34164: LD_INT 14
34166: DOUBLE
34167: EQUAL
34168: IFTRUE 34178
34170: LD_INT 10
34172: DOUBLE
34173: EQUAL
34174: IFTRUE 34178
34176: GO 34234
34178: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34179: LD_ADDR_VAR 0 9
34183: PUSH
34184: LD_VAR 0 41
34188: PUSH
34189: LD_VAR 0 42
34193: PUSH
34194: LD_VAR 0 43
34198: PUSH
34199: LD_VAR 0 44
34203: PUSH
34204: LD_VAR 0 45
34208: PUSH
34209: LD_VAR 0 46
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: PUSH
34222: LD_VAR 0 4
34226: PUSH
34227: LD_INT 1
34229: PLUS
34230: ARRAY
34231: ST_TO_ADDR
34232: GO 34487
34234: LD_INT 36
34236: DOUBLE
34237: EQUAL
34238: IFTRUE 34242
34240: GO 34298
34242: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34243: LD_ADDR_VAR 0 9
34247: PUSH
34248: LD_VAR 0 47
34252: PUSH
34253: LD_VAR 0 48
34257: PUSH
34258: LD_VAR 0 49
34262: PUSH
34263: LD_VAR 0 50
34267: PUSH
34268: LD_VAR 0 51
34272: PUSH
34273: LD_VAR 0 52
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: PUSH
34286: LD_VAR 0 4
34290: PUSH
34291: LD_INT 1
34293: PLUS
34294: ARRAY
34295: ST_TO_ADDR
34296: GO 34487
34298: LD_INT 4
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34324
34304: LD_INT 5
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34324
34310: LD_INT 34
34312: DOUBLE
34313: EQUAL
34314: IFTRUE 34324
34316: LD_INT 37
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34324
34322: GO 34380
34324: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34325: LD_ADDR_VAR 0 9
34329: PUSH
34330: LD_VAR 0 53
34334: PUSH
34335: LD_VAR 0 54
34339: PUSH
34340: LD_VAR 0 55
34344: PUSH
34345: LD_VAR 0 56
34349: PUSH
34350: LD_VAR 0 57
34354: PUSH
34355: LD_VAR 0 58
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: PUSH
34368: LD_VAR 0 4
34372: PUSH
34373: LD_INT 1
34375: PLUS
34376: ARRAY
34377: ST_TO_ADDR
34378: GO 34487
34380: LD_INT 31
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34430
34386: LD_INT 32
34388: DOUBLE
34389: EQUAL
34390: IFTRUE 34430
34392: LD_INT 33
34394: DOUBLE
34395: EQUAL
34396: IFTRUE 34430
34398: LD_INT 27
34400: DOUBLE
34401: EQUAL
34402: IFTRUE 34430
34404: LD_INT 26
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34430
34410: LD_INT 28
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34430
34416: LD_INT 29
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34430
34422: LD_INT 30
34424: DOUBLE
34425: EQUAL
34426: IFTRUE 34430
34428: GO 34486
34430: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34431: LD_ADDR_VAR 0 9
34435: PUSH
34436: LD_VAR 0 59
34440: PUSH
34441: LD_VAR 0 60
34445: PUSH
34446: LD_VAR 0 61
34450: PUSH
34451: LD_VAR 0 62
34455: PUSH
34456: LD_VAR 0 63
34460: PUSH
34461: LD_VAR 0 64
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: PUSH
34474: LD_VAR 0 4
34478: PUSH
34479: LD_INT 1
34481: PLUS
34482: ARRAY
34483: ST_TO_ADDR
34484: GO 34487
34486: POP
// temp_list2 = [ ] ;
34487: LD_ADDR_VAR 0 10
34491: PUSH
34492: EMPTY
34493: ST_TO_ADDR
// for i in temp_list do
34494: LD_ADDR_VAR 0 8
34498: PUSH
34499: LD_VAR 0 9
34503: PUSH
34504: FOR_IN
34505: IFFALSE 34557
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34507: LD_ADDR_VAR 0 10
34511: PUSH
34512: LD_VAR 0 10
34516: PUSH
34517: LD_VAR 0 8
34521: PUSH
34522: LD_INT 1
34524: ARRAY
34525: PUSH
34526: LD_VAR 0 2
34530: PLUS
34531: PUSH
34532: LD_VAR 0 8
34536: PUSH
34537: LD_INT 2
34539: ARRAY
34540: PUSH
34541: LD_VAR 0 3
34545: PLUS
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: EMPTY
34552: LIST
34553: ADD
34554: ST_TO_ADDR
34555: GO 34504
34557: POP
34558: POP
// result = temp_list2 ;
34559: LD_ADDR_VAR 0 7
34563: PUSH
34564: LD_VAR 0 10
34568: ST_TO_ADDR
// end ;
34569: LD_VAR 0 7
34573: RET
// export function EnemyInRange ( unit , dist ) ; begin
34574: LD_INT 0
34576: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34577: LD_ADDR_VAR 0 3
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: CALL_OW 255
34591: PPUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: CALL_OW 250
34601: PPUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 251
34611: PPUSH
34612: LD_VAR 0 2
34616: PPUSH
34617: CALL 7947 0 4
34621: PUSH
34622: LD_INT 4
34624: ARRAY
34625: ST_TO_ADDR
// end ;
34626: LD_VAR 0 3
34630: RET
// export function PlayerSeeMe ( unit ) ; begin
34631: LD_INT 0
34633: PPUSH
// result := See ( your_side , unit ) ;
34634: LD_ADDR_VAR 0 2
34638: PUSH
34639: LD_OWVAR 2
34643: PPUSH
34644: LD_VAR 0 1
34648: PPUSH
34649: CALL_OW 292
34653: ST_TO_ADDR
// end ;
34654: LD_VAR 0 2
34658: RET
// export function ReverseDir ( unit ) ; begin
34659: LD_INT 0
34661: PPUSH
// if not unit then
34662: LD_VAR 0 1
34666: NOT
34667: IFFALSE 34671
// exit ;
34669: GO 34694
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34671: LD_ADDR_VAR 0 2
34675: PUSH
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 254
34685: PUSH
34686: LD_INT 3
34688: PLUS
34689: PUSH
34690: LD_INT 6
34692: MOD
34693: ST_TO_ADDR
// end ;
34694: LD_VAR 0 2
34698: RET
// export function ReverseArray ( array ) ; var i ; begin
34699: LD_INT 0
34701: PPUSH
34702: PPUSH
// if not array then
34703: LD_VAR 0 1
34707: NOT
34708: IFFALSE 34712
// exit ;
34710: GO 34767
// result := [ ] ;
34712: LD_ADDR_VAR 0 2
34716: PUSH
34717: EMPTY
34718: ST_TO_ADDR
// for i := array downto 1 do
34719: LD_ADDR_VAR 0 3
34723: PUSH
34724: DOUBLE
34725: LD_VAR 0 1
34729: INC
34730: ST_TO_ADDR
34731: LD_INT 1
34733: PUSH
34734: FOR_DOWNTO
34735: IFFALSE 34765
// result := Join ( result , array [ i ] ) ;
34737: LD_ADDR_VAR 0 2
34741: PUSH
34742: LD_VAR 0 2
34746: PPUSH
34747: LD_VAR 0 1
34751: PUSH
34752: LD_VAR 0 3
34756: ARRAY
34757: PPUSH
34758: CALL 39410 0 2
34762: ST_TO_ADDR
34763: GO 34734
34765: POP
34766: POP
// end ;
34767: LD_VAR 0 2
34771: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34772: LD_INT 0
34774: PPUSH
34775: PPUSH
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
// if not unit or not hexes then
34780: LD_VAR 0 1
34784: NOT
34785: PUSH
34786: LD_VAR 0 2
34790: NOT
34791: OR
34792: IFFALSE 34796
// exit ;
34794: GO 34919
// dist := 9999 ;
34796: LD_ADDR_VAR 0 5
34800: PUSH
34801: LD_INT 9999
34803: ST_TO_ADDR
// for i = 1 to hexes do
34804: LD_ADDR_VAR 0 4
34808: PUSH
34809: DOUBLE
34810: LD_INT 1
34812: DEC
34813: ST_TO_ADDR
34814: LD_VAR 0 2
34818: PUSH
34819: FOR_TO
34820: IFFALSE 34907
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34822: LD_ADDR_VAR 0 6
34826: PUSH
34827: LD_VAR 0 1
34831: PPUSH
34832: LD_VAR 0 2
34836: PUSH
34837: LD_VAR 0 4
34841: ARRAY
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: PPUSH
34847: LD_VAR 0 2
34851: PUSH
34852: LD_VAR 0 4
34856: ARRAY
34857: PUSH
34858: LD_INT 2
34860: ARRAY
34861: PPUSH
34862: CALL_OW 297
34866: ST_TO_ADDR
// if tdist < dist then
34867: LD_VAR 0 6
34871: PUSH
34872: LD_VAR 0 5
34876: LESS
34877: IFFALSE 34905
// begin hex := hexes [ i ] ;
34879: LD_ADDR_VAR 0 8
34883: PUSH
34884: LD_VAR 0 2
34888: PUSH
34889: LD_VAR 0 4
34893: ARRAY
34894: ST_TO_ADDR
// dist := tdist ;
34895: LD_ADDR_VAR 0 5
34899: PUSH
34900: LD_VAR 0 6
34904: ST_TO_ADDR
// end ; end ;
34905: GO 34819
34907: POP
34908: POP
// result := hex ;
34909: LD_ADDR_VAR 0 3
34913: PUSH
34914: LD_VAR 0 8
34918: ST_TO_ADDR
// end ;
34919: LD_VAR 0 3
34923: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34924: LD_INT 0
34926: PPUSH
34927: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34928: LD_VAR 0 1
34932: NOT
34933: PUSH
34934: LD_VAR 0 1
34938: PUSH
34939: LD_INT 21
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 23
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PPUSH
34963: CALL_OW 69
34967: IN
34968: NOT
34969: OR
34970: IFFALSE 34974
// exit ;
34972: GO 35021
// for i = 1 to 3 do
34974: LD_ADDR_VAR 0 3
34978: PUSH
34979: DOUBLE
34980: LD_INT 1
34982: DEC
34983: ST_TO_ADDR
34984: LD_INT 3
34986: PUSH
34987: FOR_TO
34988: IFFALSE 35019
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL_OW 250
34999: PPUSH
35000: LD_VAR 0 1
35004: PPUSH
35005: CALL_OW 251
35009: PPUSH
35010: LD_INT 1
35012: PPUSH
35013: CALL_OW 453
35017: GO 34987
35019: POP
35020: POP
// end ;
35021: LD_VAR 0 2
35025: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35026: LD_INT 0
35028: PPUSH
35029: PPUSH
35030: PPUSH
35031: PPUSH
35032: PPUSH
35033: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35034: LD_VAR 0 1
35038: NOT
35039: PUSH
35040: LD_VAR 0 2
35044: NOT
35045: OR
35046: PUSH
35047: LD_VAR 0 1
35051: PPUSH
35052: CALL_OW 314
35056: OR
35057: IFFALSE 35061
// exit ;
35059: GO 35528
// if GetLives ( i ) < 250 then
35061: LD_VAR 0 4
35065: PPUSH
35066: CALL_OW 256
35070: PUSH
35071: LD_INT 250
35073: LESS
35074: IFFALSE 35087
// begin ComAutodestruct ( i ) ;
35076: LD_VAR 0 4
35080: PPUSH
35081: CALL 34924 0 1
// exit ;
35085: GO 35528
// end ; x := GetX ( enemy_unit ) ;
35087: LD_ADDR_VAR 0 7
35091: PUSH
35092: LD_VAR 0 2
35096: PPUSH
35097: CALL_OW 250
35101: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35102: LD_ADDR_VAR 0 8
35106: PUSH
35107: LD_VAR 0 2
35111: PPUSH
35112: CALL_OW 251
35116: ST_TO_ADDR
// if not x or not y then
35117: LD_VAR 0 7
35121: NOT
35122: PUSH
35123: LD_VAR 0 8
35127: NOT
35128: OR
35129: IFFALSE 35133
// exit ;
35131: GO 35528
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35133: LD_ADDR_VAR 0 6
35137: PUSH
35138: LD_VAR 0 7
35142: PPUSH
35143: LD_INT 0
35145: PPUSH
35146: LD_INT 4
35148: PPUSH
35149: CALL_OW 272
35153: PUSH
35154: LD_VAR 0 8
35158: PPUSH
35159: LD_INT 0
35161: PPUSH
35162: LD_INT 4
35164: PPUSH
35165: CALL_OW 273
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_VAR 0 7
35178: PPUSH
35179: LD_INT 1
35181: PPUSH
35182: LD_INT 4
35184: PPUSH
35185: CALL_OW 272
35189: PUSH
35190: LD_VAR 0 8
35194: PPUSH
35195: LD_INT 1
35197: PPUSH
35198: LD_INT 4
35200: PPUSH
35201: CALL_OW 273
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_VAR 0 7
35214: PPUSH
35215: LD_INT 2
35217: PPUSH
35218: LD_INT 4
35220: PPUSH
35221: CALL_OW 272
35225: PUSH
35226: LD_VAR 0 8
35230: PPUSH
35231: LD_INT 2
35233: PPUSH
35234: LD_INT 4
35236: PPUSH
35237: CALL_OW 273
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_VAR 0 7
35250: PPUSH
35251: LD_INT 3
35253: PPUSH
35254: LD_INT 4
35256: PPUSH
35257: CALL_OW 272
35261: PUSH
35262: LD_VAR 0 8
35266: PPUSH
35267: LD_INT 3
35269: PPUSH
35270: LD_INT 4
35272: PPUSH
35273: CALL_OW 273
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_VAR 0 7
35286: PPUSH
35287: LD_INT 4
35289: PPUSH
35290: LD_INT 4
35292: PPUSH
35293: CALL_OW 272
35297: PUSH
35298: LD_VAR 0 8
35302: PPUSH
35303: LD_INT 4
35305: PPUSH
35306: LD_INT 4
35308: PPUSH
35309: CALL_OW 273
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_VAR 0 7
35322: PPUSH
35323: LD_INT 5
35325: PPUSH
35326: LD_INT 4
35328: PPUSH
35329: CALL_OW 272
35333: PUSH
35334: LD_VAR 0 8
35338: PPUSH
35339: LD_INT 5
35341: PPUSH
35342: LD_INT 4
35344: PPUSH
35345: CALL_OW 273
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: ST_TO_ADDR
// for i = tmp downto 1 do
35362: LD_ADDR_VAR 0 4
35366: PUSH
35367: DOUBLE
35368: LD_VAR 0 6
35372: INC
35373: ST_TO_ADDR
35374: LD_INT 1
35376: PUSH
35377: FOR_DOWNTO
35378: IFFALSE 35479
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35380: LD_VAR 0 6
35384: PUSH
35385: LD_VAR 0 4
35389: ARRAY
35390: PUSH
35391: LD_INT 1
35393: ARRAY
35394: PPUSH
35395: LD_VAR 0 6
35399: PUSH
35400: LD_VAR 0 4
35404: ARRAY
35405: PUSH
35406: LD_INT 2
35408: ARRAY
35409: PPUSH
35410: CALL_OW 488
35414: NOT
35415: PUSH
35416: LD_VAR 0 6
35420: PUSH
35421: LD_VAR 0 4
35425: ARRAY
35426: PUSH
35427: LD_INT 1
35429: ARRAY
35430: PPUSH
35431: LD_VAR 0 6
35435: PUSH
35436: LD_VAR 0 4
35440: ARRAY
35441: PUSH
35442: LD_INT 2
35444: ARRAY
35445: PPUSH
35446: CALL_OW 428
35450: PUSH
35451: LD_INT 0
35453: NONEQUAL
35454: OR
35455: IFFALSE 35477
// tmp := Delete ( tmp , i ) ;
35457: LD_ADDR_VAR 0 6
35461: PUSH
35462: LD_VAR 0 6
35466: PPUSH
35467: LD_VAR 0 4
35471: PPUSH
35472: CALL_OW 3
35476: ST_TO_ADDR
35477: GO 35377
35479: POP
35480: POP
// j := GetClosestHex ( unit , tmp ) ;
35481: LD_ADDR_VAR 0 5
35485: PUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: LD_VAR 0 6
35495: PPUSH
35496: CALL 34772 0 2
35500: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35501: LD_VAR 0 1
35505: PPUSH
35506: LD_VAR 0 5
35510: PUSH
35511: LD_INT 1
35513: ARRAY
35514: PPUSH
35515: LD_VAR 0 5
35519: PUSH
35520: LD_INT 2
35522: ARRAY
35523: PPUSH
35524: CALL_OW 111
// end ;
35528: LD_VAR 0 3
35532: RET
// export function PrepareApemanSoldier ( ) ; begin
35533: LD_INT 0
35535: PPUSH
// uc_nation := 0 ;
35536: LD_ADDR_OWVAR 21
35540: PUSH
35541: LD_INT 0
35543: ST_TO_ADDR
// hc_sex := sex_male ;
35544: LD_ADDR_OWVAR 27
35548: PUSH
35549: LD_INT 1
35551: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
35552: LD_ADDR_OWVAR 28
35556: PUSH
35557: LD_INT 15
35559: ST_TO_ADDR
// hc_gallery :=  ;
35560: LD_ADDR_OWVAR 33
35564: PUSH
35565: LD_STRING 
35567: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35568: LD_ADDR_OWVAR 31
35572: PUSH
35573: LD_INT 0
35575: PPUSH
35576: LD_INT 3
35578: PPUSH
35579: CALL_OW 12
35583: PUSH
35584: LD_INT 0
35586: PPUSH
35587: LD_INT 3
35589: PPUSH
35590: CALL_OW 12
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// end ;
35607: LD_VAR 0 1
35611: RET
// export function PrepareApemanEngineer ( ) ; begin
35612: LD_INT 0
35614: PPUSH
// uc_nation := 0 ;
35615: LD_ADDR_OWVAR 21
35619: PUSH
35620: LD_INT 0
35622: ST_TO_ADDR
// hc_sex := sex_male ;
35623: LD_ADDR_OWVAR 27
35627: PUSH
35628: LD_INT 1
35630: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35631: LD_ADDR_OWVAR 28
35635: PUSH
35636: LD_INT 16
35638: ST_TO_ADDR
// hc_gallery :=  ;
35639: LD_ADDR_OWVAR 33
35643: PUSH
35644: LD_STRING 
35646: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35647: LD_ADDR_OWVAR 31
35651: PUSH
35652: LD_INT 0
35654: PPUSH
35655: LD_INT 3
35657: PPUSH
35658: CALL_OW 12
35662: PUSH
35663: LD_INT 0
35665: PPUSH
35666: LD_INT 3
35668: PPUSH
35669: CALL_OW 12
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: ST_TO_ADDR
// end ;
35686: LD_VAR 0 1
35690: RET
// export function PrepareApeman ( agressivity ) ; begin
35691: LD_INT 0
35693: PPUSH
// uc_side := 0 ;
35694: LD_ADDR_OWVAR 20
35698: PUSH
35699: LD_INT 0
35701: ST_TO_ADDR
// uc_nation := 0 ;
35702: LD_ADDR_OWVAR 21
35706: PUSH
35707: LD_INT 0
35709: ST_TO_ADDR
// hc_sex := sex_male ;
35710: LD_ADDR_OWVAR 27
35714: PUSH
35715: LD_INT 1
35717: ST_TO_ADDR
// hc_class := class_apeman ;
35718: LD_ADDR_OWVAR 28
35722: PUSH
35723: LD_INT 12
35725: ST_TO_ADDR
// hc_gallery :=  ;
35726: LD_ADDR_OWVAR 33
35730: PUSH
35731: LD_STRING 
35733: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35734: LD_ADDR_OWVAR 35
35738: PUSH
35739: LD_VAR 0 1
35743: NEG
35744: PPUSH
35745: LD_VAR 0 1
35749: PPUSH
35750: CALL_OW 12
35754: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35755: LD_ADDR_OWVAR 31
35759: PUSH
35760: LD_INT 0
35762: PPUSH
35763: LD_INT 3
35765: PPUSH
35766: CALL_OW 12
35770: PUSH
35771: LD_INT 0
35773: PPUSH
35774: LD_INT 3
35776: PPUSH
35777: CALL_OW 12
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: ST_TO_ADDR
// end ;
35794: LD_VAR 0 2
35798: RET
// export function PrepareTiger ( agressivity ) ; begin
35799: LD_INT 0
35801: PPUSH
// uc_side := 0 ;
35802: LD_ADDR_OWVAR 20
35806: PUSH
35807: LD_INT 0
35809: ST_TO_ADDR
// uc_nation := 0 ;
35810: LD_ADDR_OWVAR 21
35814: PUSH
35815: LD_INT 0
35817: ST_TO_ADDR
// hc_class := class_tiger ;
35818: LD_ADDR_OWVAR 28
35822: PUSH
35823: LD_INT 14
35825: ST_TO_ADDR
// hc_gallery :=  ;
35826: LD_ADDR_OWVAR 33
35830: PUSH
35831: LD_STRING 
35833: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35834: LD_ADDR_OWVAR 35
35838: PUSH
35839: LD_VAR 0 1
35843: NEG
35844: PPUSH
35845: LD_VAR 0 1
35849: PPUSH
35850: CALL_OW 12
35854: ST_TO_ADDR
// end ;
35855: LD_VAR 0 2
35859: RET
// export function PrepareEnchidna ( ) ; begin
35860: LD_INT 0
35862: PPUSH
// uc_side := 0 ;
35863: LD_ADDR_OWVAR 20
35867: PUSH
35868: LD_INT 0
35870: ST_TO_ADDR
// uc_nation := 0 ;
35871: LD_ADDR_OWVAR 21
35875: PUSH
35876: LD_INT 0
35878: ST_TO_ADDR
// hc_class := class_baggie ;
35879: LD_ADDR_OWVAR 28
35883: PUSH
35884: LD_INT 13
35886: ST_TO_ADDR
// hc_gallery :=  ;
35887: LD_ADDR_OWVAR 33
35891: PUSH
35892: LD_STRING 
35894: ST_TO_ADDR
// end ;
35895: LD_VAR 0 1
35899: RET
// export function PrepareFrog ( ) ; begin
35900: LD_INT 0
35902: PPUSH
// uc_side := 0 ;
35903: LD_ADDR_OWVAR 20
35907: PUSH
35908: LD_INT 0
35910: ST_TO_ADDR
// uc_nation := 0 ;
35911: LD_ADDR_OWVAR 21
35915: PUSH
35916: LD_INT 0
35918: ST_TO_ADDR
// hc_class := class_frog ;
35919: LD_ADDR_OWVAR 28
35923: PUSH
35924: LD_INT 19
35926: ST_TO_ADDR
// hc_gallery :=  ;
35927: LD_ADDR_OWVAR 33
35931: PUSH
35932: LD_STRING 
35934: ST_TO_ADDR
// end ;
35935: LD_VAR 0 1
35939: RET
// export function PrepareFish ( ) ; begin
35940: LD_INT 0
35942: PPUSH
// uc_side := 0 ;
35943: LD_ADDR_OWVAR 20
35947: PUSH
35948: LD_INT 0
35950: ST_TO_ADDR
// uc_nation := 0 ;
35951: LD_ADDR_OWVAR 21
35955: PUSH
35956: LD_INT 0
35958: ST_TO_ADDR
// hc_class := class_fish ;
35959: LD_ADDR_OWVAR 28
35963: PUSH
35964: LD_INT 20
35966: ST_TO_ADDR
// hc_gallery :=  ;
35967: LD_ADDR_OWVAR 33
35971: PUSH
35972: LD_STRING 
35974: ST_TO_ADDR
// end ;
35975: LD_VAR 0 1
35979: RET
// export function PrepareBird ( ) ; begin
35980: LD_INT 0
35982: PPUSH
// uc_side := 0 ;
35983: LD_ADDR_OWVAR 20
35987: PUSH
35988: LD_INT 0
35990: ST_TO_ADDR
// uc_nation := 0 ;
35991: LD_ADDR_OWVAR 21
35995: PUSH
35996: LD_INT 0
35998: ST_TO_ADDR
// hc_class := class_phororhacos ;
35999: LD_ADDR_OWVAR 28
36003: PUSH
36004: LD_INT 18
36006: ST_TO_ADDR
// hc_gallery :=  ;
36007: LD_ADDR_OWVAR 33
36011: PUSH
36012: LD_STRING 
36014: ST_TO_ADDR
// end ;
36015: LD_VAR 0 1
36019: RET
// export function PrepareHorse ( ) ; begin
36020: LD_INT 0
36022: PPUSH
// uc_side := 0 ;
36023: LD_ADDR_OWVAR 20
36027: PUSH
36028: LD_INT 0
36030: ST_TO_ADDR
// uc_nation := 0 ;
36031: LD_ADDR_OWVAR 21
36035: PUSH
36036: LD_INT 0
36038: ST_TO_ADDR
// hc_class := class_horse ;
36039: LD_ADDR_OWVAR 28
36043: PUSH
36044: LD_INT 21
36046: ST_TO_ADDR
// hc_gallery :=  ;
36047: LD_ADDR_OWVAR 33
36051: PUSH
36052: LD_STRING 
36054: ST_TO_ADDR
// end ;
36055: LD_VAR 0 1
36059: RET
// export function PrepareMastodont ( ) ; begin
36060: LD_INT 0
36062: PPUSH
// uc_side := 0 ;
36063: LD_ADDR_OWVAR 20
36067: PUSH
36068: LD_INT 0
36070: ST_TO_ADDR
// uc_nation := 0 ;
36071: LD_ADDR_OWVAR 21
36075: PUSH
36076: LD_INT 0
36078: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36079: LD_ADDR_OWVAR 37
36083: PUSH
36084: LD_INT 31
36086: ST_TO_ADDR
// vc_control := control_rider ;
36087: LD_ADDR_OWVAR 38
36091: PUSH
36092: LD_INT 4
36094: ST_TO_ADDR
// end ;
36095: LD_VAR 0 1
36099: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36100: LD_INT 0
36102: PPUSH
36103: PPUSH
36104: PPUSH
// uc_side = 0 ;
36105: LD_ADDR_OWVAR 20
36109: PUSH
36110: LD_INT 0
36112: ST_TO_ADDR
// uc_nation = 0 ;
36113: LD_ADDR_OWVAR 21
36117: PUSH
36118: LD_INT 0
36120: ST_TO_ADDR
// InitHc_All ( ) ;
36121: CALL_OW 584
// InitVc ;
36125: CALL_OW 20
// if mastodonts then
36129: LD_VAR 0 6
36133: IFFALSE 36200
// for i = 1 to mastodonts do
36135: LD_ADDR_VAR 0 11
36139: PUSH
36140: DOUBLE
36141: LD_INT 1
36143: DEC
36144: ST_TO_ADDR
36145: LD_VAR 0 6
36149: PUSH
36150: FOR_TO
36151: IFFALSE 36198
// begin vc_chassis := 31 ;
36153: LD_ADDR_OWVAR 37
36157: PUSH
36158: LD_INT 31
36160: ST_TO_ADDR
// vc_control := control_rider ;
36161: LD_ADDR_OWVAR 38
36165: PUSH
36166: LD_INT 4
36168: ST_TO_ADDR
// animal := CreateVehicle ;
36169: LD_ADDR_VAR 0 12
36173: PUSH
36174: CALL_OW 45
36178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36179: LD_VAR 0 12
36183: PPUSH
36184: LD_VAR 0 8
36188: PPUSH
36189: LD_INT 0
36191: PPUSH
36192: CALL 38328 0 3
// end ;
36196: GO 36150
36198: POP
36199: POP
// if horses then
36200: LD_VAR 0 5
36204: IFFALSE 36271
// for i = 1 to horses do
36206: LD_ADDR_VAR 0 11
36210: PUSH
36211: DOUBLE
36212: LD_INT 1
36214: DEC
36215: ST_TO_ADDR
36216: LD_VAR 0 5
36220: PUSH
36221: FOR_TO
36222: IFFALSE 36269
// begin hc_class := 21 ;
36224: LD_ADDR_OWVAR 28
36228: PUSH
36229: LD_INT 21
36231: ST_TO_ADDR
// hc_gallery :=  ;
36232: LD_ADDR_OWVAR 33
36236: PUSH
36237: LD_STRING 
36239: ST_TO_ADDR
// animal := CreateHuman ;
36240: LD_ADDR_VAR 0 12
36244: PUSH
36245: CALL_OW 44
36249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36250: LD_VAR 0 12
36254: PPUSH
36255: LD_VAR 0 8
36259: PPUSH
36260: LD_INT 0
36262: PPUSH
36263: CALL 38328 0 3
// end ;
36267: GO 36221
36269: POP
36270: POP
// if birds then
36271: LD_VAR 0 1
36275: IFFALSE 36342
// for i = 1 to birds do
36277: LD_ADDR_VAR 0 11
36281: PUSH
36282: DOUBLE
36283: LD_INT 1
36285: DEC
36286: ST_TO_ADDR
36287: LD_VAR 0 1
36291: PUSH
36292: FOR_TO
36293: IFFALSE 36340
// begin hc_class := 18 ;
36295: LD_ADDR_OWVAR 28
36299: PUSH
36300: LD_INT 18
36302: ST_TO_ADDR
// hc_gallery =  ;
36303: LD_ADDR_OWVAR 33
36307: PUSH
36308: LD_STRING 
36310: ST_TO_ADDR
// animal := CreateHuman ;
36311: LD_ADDR_VAR 0 12
36315: PUSH
36316: CALL_OW 44
36320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36321: LD_VAR 0 12
36325: PPUSH
36326: LD_VAR 0 8
36330: PPUSH
36331: LD_INT 0
36333: PPUSH
36334: CALL 38328 0 3
// end ;
36338: GO 36292
36340: POP
36341: POP
// if tigers then
36342: LD_VAR 0 2
36346: IFFALSE 36430
// for i = 1 to tigers do
36348: LD_ADDR_VAR 0 11
36352: PUSH
36353: DOUBLE
36354: LD_INT 1
36356: DEC
36357: ST_TO_ADDR
36358: LD_VAR 0 2
36362: PUSH
36363: FOR_TO
36364: IFFALSE 36428
// begin hc_class = class_tiger ;
36366: LD_ADDR_OWVAR 28
36370: PUSH
36371: LD_INT 14
36373: ST_TO_ADDR
// hc_gallery =  ;
36374: LD_ADDR_OWVAR 33
36378: PUSH
36379: LD_STRING 
36381: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36382: LD_ADDR_OWVAR 35
36386: PUSH
36387: LD_INT 7
36389: NEG
36390: PPUSH
36391: LD_INT 7
36393: PPUSH
36394: CALL_OW 12
36398: ST_TO_ADDR
// animal := CreateHuman ;
36399: LD_ADDR_VAR 0 12
36403: PUSH
36404: CALL_OW 44
36408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36409: LD_VAR 0 12
36413: PPUSH
36414: LD_VAR 0 8
36418: PPUSH
36419: LD_INT 0
36421: PPUSH
36422: CALL 38328 0 3
// end ;
36426: GO 36363
36428: POP
36429: POP
// if apemans then
36430: LD_VAR 0 3
36434: IFFALSE 36557
// for i = 1 to apemans do
36436: LD_ADDR_VAR 0 11
36440: PUSH
36441: DOUBLE
36442: LD_INT 1
36444: DEC
36445: ST_TO_ADDR
36446: LD_VAR 0 3
36450: PUSH
36451: FOR_TO
36452: IFFALSE 36555
// begin hc_class = class_apeman ;
36454: LD_ADDR_OWVAR 28
36458: PUSH
36459: LD_INT 12
36461: ST_TO_ADDR
// hc_gallery =  ;
36462: LD_ADDR_OWVAR 33
36466: PUSH
36467: LD_STRING 
36469: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36470: LD_ADDR_OWVAR 35
36474: PUSH
36475: LD_INT 2
36477: NEG
36478: PPUSH
36479: LD_INT 2
36481: PPUSH
36482: CALL_OW 12
36486: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36487: LD_ADDR_OWVAR 31
36491: PUSH
36492: LD_INT 1
36494: PPUSH
36495: LD_INT 3
36497: PPUSH
36498: CALL_OW 12
36502: PUSH
36503: LD_INT 1
36505: PPUSH
36506: LD_INT 3
36508: PPUSH
36509: CALL_OW 12
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// animal := CreateHuman ;
36526: LD_ADDR_VAR 0 12
36530: PUSH
36531: CALL_OW 44
36535: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36536: LD_VAR 0 12
36540: PPUSH
36541: LD_VAR 0 8
36545: PPUSH
36546: LD_INT 0
36548: PPUSH
36549: CALL 38328 0 3
// end ;
36553: GO 36451
36555: POP
36556: POP
// if enchidnas then
36557: LD_VAR 0 4
36561: IFFALSE 36628
// for i = 1 to enchidnas do
36563: LD_ADDR_VAR 0 11
36567: PUSH
36568: DOUBLE
36569: LD_INT 1
36571: DEC
36572: ST_TO_ADDR
36573: LD_VAR 0 4
36577: PUSH
36578: FOR_TO
36579: IFFALSE 36626
// begin hc_class = 13 ;
36581: LD_ADDR_OWVAR 28
36585: PUSH
36586: LD_INT 13
36588: ST_TO_ADDR
// hc_gallery =  ;
36589: LD_ADDR_OWVAR 33
36593: PUSH
36594: LD_STRING 
36596: ST_TO_ADDR
// animal := CreateHuman ;
36597: LD_ADDR_VAR 0 12
36601: PUSH
36602: CALL_OW 44
36606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36607: LD_VAR 0 12
36611: PPUSH
36612: LD_VAR 0 8
36616: PPUSH
36617: LD_INT 0
36619: PPUSH
36620: CALL 38328 0 3
// end ;
36624: GO 36578
36626: POP
36627: POP
// if fishes then
36628: LD_VAR 0 7
36632: IFFALSE 36699
// for i = 1 to fishes do
36634: LD_ADDR_VAR 0 11
36638: PUSH
36639: DOUBLE
36640: LD_INT 1
36642: DEC
36643: ST_TO_ADDR
36644: LD_VAR 0 7
36648: PUSH
36649: FOR_TO
36650: IFFALSE 36697
// begin hc_class = 20 ;
36652: LD_ADDR_OWVAR 28
36656: PUSH
36657: LD_INT 20
36659: ST_TO_ADDR
// hc_gallery =  ;
36660: LD_ADDR_OWVAR 33
36664: PUSH
36665: LD_STRING 
36667: ST_TO_ADDR
// animal := CreateHuman ;
36668: LD_ADDR_VAR 0 12
36672: PUSH
36673: CALL_OW 44
36677: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36678: LD_VAR 0 12
36682: PPUSH
36683: LD_VAR 0 9
36687: PPUSH
36688: LD_INT 0
36690: PPUSH
36691: CALL 38328 0 3
// end ;
36695: GO 36649
36697: POP
36698: POP
// end ;
36699: LD_VAR 0 10
36703: RET
// export function WantHeal ( sci , unit ) ; begin
36704: LD_INT 0
36706: PPUSH
// if GetTaskList ( sci ) > 0 then
36707: LD_VAR 0 1
36711: PPUSH
36712: CALL_OW 437
36716: PUSH
36717: LD_INT 0
36719: GREATER
36720: IFFALSE 36790
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36722: LD_VAR 0 1
36726: PPUSH
36727: CALL_OW 437
36731: PUSH
36732: LD_INT 1
36734: ARRAY
36735: PUSH
36736: LD_INT 1
36738: ARRAY
36739: PUSH
36740: LD_STRING l
36742: EQUAL
36743: PUSH
36744: LD_VAR 0 1
36748: PPUSH
36749: CALL_OW 437
36753: PUSH
36754: LD_INT 1
36756: ARRAY
36757: PUSH
36758: LD_INT 4
36760: ARRAY
36761: PUSH
36762: LD_VAR 0 2
36766: EQUAL
36767: AND
36768: IFFALSE 36780
// result := true else
36770: LD_ADDR_VAR 0 3
36774: PUSH
36775: LD_INT 1
36777: ST_TO_ADDR
36778: GO 36788
// result := false ;
36780: LD_ADDR_VAR 0 3
36784: PUSH
36785: LD_INT 0
36787: ST_TO_ADDR
// end else
36788: GO 36798
// result := false ;
36790: LD_ADDR_VAR 0 3
36794: PUSH
36795: LD_INT 0
36797: ST_TO_ADDR
// end ;
36798: LD_VAR 0 3
36802: RET
// export function HealTarget ( sci ) ; begin
36803: LD_INT 0
36805: PPUSH
// if not sci then
36806: LD_VAR 0 1
36810: NOT
36811: IFFALSE 36815
// exit ;
36813: GO 36880
// result := 0 ;
36815: LD_ADDR_VAR 0 2
36819: PUSH
36820: LD_INT 0
36822: ST_TO_ADDR
// if GetTaskList ( sci ) then
36823: LD_VAR 0 1
36827: PPUSH
36828: CALL_OW 437
36832: IFFALSE 36880
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 437
36843: PUSH
36844: LD_INT 1
36846: ARRAY
36847: PUSH
36848: LD_INT 1
36850: ARRAY
36851: PUSH
36852: LD_STRING l
36854: EQUAL
36855: IFFALSE 36880
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36857: LD_ADDR_VAR 0 2
36861: PUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: CALL_OW 437
36871: PUSH
36872: LD_INT 1
36874: ARRAY
36875: PUSH
36876: LD_INT 4
36878: ARRAY
36879: ST_TO_ADDR
// end ;
36880: LD_VAR 0 2
36884: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36885: LD_INT 0
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
// if not base_units then
36891: LD_VAR 0 1
36895: NOT
36896: IFFALSE 36900
// exit ;
36898: GO 36987
// result := false ;
36900: LD_ADDR_VAR 0 2
36904: PUSH
36905: LD_INT 0
36907: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36908: LD_ADDR_VAR 0 5
36912: PUSH
36913: LD_VAR 0 1
36917: PPUSH
36918: LD_INT 21
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PPUSH
36928: CALL_OW 72
36932: ST_TO_ADDR
// if not tmp then
36933: LD_VAR 0 5
36937: NOT
36938: IFFALSE 36942
// exit ;
36940: GO 36987
// for i in tmp do
36942: LD_ADDR_VAR 0 3
36946: PUSH
36947: LD_VAR 0 5
36951: PUSH
36952: FOR_IN
36953: IFFALSE 36985
// begin result := EnemyInRange ( i , 22 ) ;
36955: LD_ADDR_VAR 0 2
36959: PUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: LD_INT 22
36967: PPUSH
36968: CALL 34574 0 2
36972: ST_TO_ADDR
// if result then
36973: LD_VAR 0 2
36977: IFFALSE 36983
// exit ;
36979: POP
36980: POP
36981: GO 36987
// end ;
36983: GO 36952
36985: POP
36986: POP
// end ;
36987: LD_VAR 0 2
36991: RET
// export function FilterByTag ( units , tag ) ; begin
36992: LD_INT 0
36994: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36995: LD_ADDR_VAR 0 3
36999: PUSH
37000: LD_VAR 0 1
37004: PPUSH
37005: LD_INT 120
37007: PUSH
37008: LD_VAR 0 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PPUSH
37017: CALL_OW 72
37021: ST_TO_ADDR
// end ;
37022: LD_VAR 0 3
37026: RET
// export function IsDriver ( un ) ; begin
37027: LD_INT 0
37029: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37030: LD_ADDR_VAR 0 2
37034: PUSH
37035: LD_VAR 0 1
37039: PUSH
37040: LD_INT 55
37042: PUSH
37043: EMPTY
37044: LIST
37045: PPUSH
37046: CALL_OW 69
37050: IN
37051: ST_TO_ADDR
// end ;
37052: LD_VAR 0 2
37056: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37057: LD_INT 0
37059: PPUSH
37060: PPUSH
// list := [ ] ;
37061: LD_ADDR_VAR 0 5
37065: PUSH
37066: EMPTY
37067: ST_TO_ADDR
// case d of 0 :
37068: LD_VAR 0 3
37072: PUSH
37073: LD_INT 0
37075: DOUBLE
37076: EQUAL
37077: IFTRUE 37081
37079: GO 37214
37081: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37082: LD_ADDR_VAR 0 5
37086: PUSH
37087: LD_VAR 0 1
37091: PUSH
37092: LD_INT 4
37094: MINUS
37095: PUSH
37096: LD_VAR 0 2
37100: PUSH
37101: LD_INT 4
37103: MINUS
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: PUSH
37113: LD_VAR 0 1
37117: PUSH
37118: LD_INT 3
37120: MINUS
37121: PUSH
37122: LD_VAR 0 2
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: PUSH
37135: LD_VAR 0 1
37139: PUSH
37140: LD_INT 4
37142: PLUS
37143: PUSH
37144: LD_VAR 0 2
37148: PUSH
37149: LD_INT 4
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: LIST
37156: PUSH
37157: LD_VAR 0 1
37161: PUSH
37162: LD_INT 3
37164: PLUS
37165: PUSH
37166: LD_VAR 0 2
37170: PUSH
37171: LD_INT 3
37173: PLUS
37174: PUSH
37175: LD_INT 5
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: LIST
37182: PUSH
37183: LD_VAR 0 1
37187: PUSH
37188: LD_VAR 0 2
37192: PUSH
37193: LD_INT 4
37195: PLUS
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: ST_TO_ADDR
// end ; 1 :
37212: GO 37912
37214: LD_INT 1
37216: DOUBLE
37217: EQUAL
37218: IFTRUE 37222
37220: GO 37355
37222: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37223: LD_ADDR_VAR 0 5
37227: PUSH
37228: LD_VAR 0 1
37232: PUSH
37233: LD_VAR 0 2
37237: PUSH
37238: LD_INT 4
37240: MINUS
37241: PUSH
37242: LD_INT 3
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: PUSH
37250: LD_VAR 0 1
37254: PUSH
37255: LD_INT 3
37257: MINUS
37258: PUSH
37259: LD_VAR 0 2
37263: PUSH
37264: LD_INT 3
37266: MINUS
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: PUSH
37276: LD_VAR 0 1
37280: PUSH
37281: LD_INT 4
37283: MINUS
37284: PUSH
37285: LD_VAR 0 2
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: PUSH
37298: LD_VAR 0 1
37302: PUSH
37303: LD_VAR 0 2
37307: PUSH
37308: LD_INT 3
37310: PLUS
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: PUSH
37320: LD_VAR 0 1
37324: PUSH
37325: LD_INT 4
37327: PLUS
37328: PUSH
37329: LD_VAR 0 2
37333: PUSH
37334: LD_INT 4
37336: PLUS
37337: PUSH
37338: LD_INT 5
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
// end ; 2 :
37353: GO 37912
37355: LD_INT 2
37357: DOUBLE
37358: EQUAL
37359: IFTRUE 37363
37361: GO 37492
37363: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37364: LD_ADDR_VAR 0 5
37368: PUSH
37369: LD_VAR 0 1
37373: PUSH
37374: LD_VAR 0 2
37378: PUSH
37379: LD_INT 3
37381: MINUS
37382: PUSH
37383: LD_INT 3
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: PUSH
37391: LD_VAR 0 1
37395: PUSH
37396: LD_INT 4
37398: PLUS
37399: PUSH
37400: LD_VAR 0 2
37404: PUSH
37405: LD_INT 4
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: PUSH
37413: LD_VAR 0 1
37417: PUSH
37418: LD_VAR 0 2
37422: PUSH
37423: LD_INT 4
37425: PLUS
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: PUSH
37435: LD_VAR 0 1
37439: PUSH
37440: LD_INT 3
37442: MINUS
37443: PUSH
37444: LD_VAR 0 2
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: PUSH
37457: LD_VAR 0 1
37461: PUSH
37462: LD_INT 4
37464: MINUS
37465: PUSH
37466: LD_VAR 0 2
37470: PUSH
37471: LD_INT 4
37473: MINUS
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: ST_TO_ADDR
// end ; 3 :
37490: GO 37912
37492: LD_INT 3
37494: DOUBLE
37495: EQUAL
37496: IFTRUE 37500
37498: GO 37633
37500: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37501: LD_ADDR_VAR 0 5
37505: PUSH
37506: LD_VAR 0 1
37510: PUSH
37511: LD_INT 3
37513: PLUS
37514: PUSH
37515: LD_VAR 0 2
37519: PUSH
37520: LD_INT 4
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: PUSH
37528: LD_VAR 0 1
37532: PUSH
37533: LD_INT 4
37535: PLUS
37536: PUSH
37537: LD_VAR 0 2
37541: PUSH
37542: LD_INT 4
37544: PLUS
37545: PUSH
37546: LD_INT 5
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: PUSH
37554: LD_VAR 0 1
37558: PUSH
37559: LD_INT 4
37561: MINUS
37562: PUSH
37563: LD_VAR 0 2
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: PUSH
37576: LD_VAR 0 1
37580: PUSH
37581: LD_VAR 0 2
37585: PUSH
37586: LD_INT 4
37588: MINUS
37589: PUSH
37590: LD_INT 3
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: PUSH
37598: LD_VAR 0 1
37602: PUSH
37603: LD_INT 3
37605: MINUS
37606: PUSH
37607: LD_VAR 0 2
37611: PUSH
37612: LD_INT 3
37614: MINUS
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// end ; 4 :
37631: GO 37912
37633: LD_INT 4
37635: DOUBLE
37636: EQUAL
37637: IFTRUE 37641
37639: GO 37774
37641: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37642: LD_ADDR_VAR 0 5
37646: PUSH
37647: LD_VAR 0 1
37651: PUSH
37652: LD_VAR 0 2
37656: PUSH
37657: LD_INT 4
37659: PLUS
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: PUSH
37669: LD_VAR 0 1
37673: PUSH
37674: LD_INT 3
37676: PLUS
37677: PUSH
37678: LD_VAR 0 2
37682: PUSH
37683: LD_INT 3
37685: PLUS
37686: PUSH
37687: LD_INT 5
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: LIST
37694: PUSH
37695: LD_VAR 0 1
37699: PUSH
37700: LD_INT 4
37702: PLUS
37703: PUSH
37704: LD_VAR 0 2
37708: PUSH
37709: LD_INT 4
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: LIST
37716: PUSH
37717: LD_VAR 0 1
37721: PUSH
37722: LD_VAR 0 2
37726: PUSH
37727: LD_INT 3
37729: MINUS
37730: PUSH
37731: LD_INT 3
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: PUSH
37739: LD_VAR 0 1
37743: PUSH
37744: LD_INT 4
37746: MINUS
37747: PUSH
37748: LD_VAR 0 2
37752: PUSH
37753: LD_INT 4
37755: MINUS
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: ST_TO_ADDR
// end ; 5 :
37772: GO 37912
37774: LD_INT 5
37776: DOUBLE
37777: EQUAL
37778: IFTRUE 37782
37780: GO 37911
37782: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37783: LD_ADDR_VAR 0 5
37787: PUSH
37788: LD_VAR 0 1
37792: PUSH
37793: LD_INT 4
37795: MINUS
37796: PUSH
37797: LD_VAR 0 2
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: PUSH
37810: LD_VAR 0 1
37814: PUSH
37815: LD_VAR 0 2
37819: PUSH
37820: LD_INT 4
37822: MINUS
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: LIST
37831: PUSH
37832: LD_VAR 0 1
37836: PUSH
37837: LD_INT 4
37839: PLUS
37840: PUSH
37841: LD_VAR 0 2
37845: PUSH
37846: LD_INT 4
37848: PLUS
37849: PUSH
37850: LD_INT 5
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: PUSH
37858: LD_VAR 0 1
37862: PUSH
37863: LD_INT 3
37865: PLUS
37866: PUSH
37867: LD_VAR 0 2
37871: PUSH
37872: LD_INT 4
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: PUSH
37880: LD_VAR 0 1
37884: PUSH
37885: LD_VAR 0 2
37889: PUSH
37890: LD_INT 3
37892: PLUS
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: ST_TO_ADDR
// end ; end ;
37909: GO 37912
37911: POP
// result := list ;
37912: LD_ADDR_VAR 0 4
37916: PUSH
37917: LD_VAR 0 5
37921: ST_TO_ADDR
// end ;
37922: LD_VAR 0 4
37926: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37927: LD_INT 0
37929: PPUSH
37930: PPUSH
37931: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37932: LD_VAR 0 1
37936: NOT
37937: PUSH
37938: LD_VAR 0 2
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: LD_INT 3
37951: PUSH
37952: LD_INT 4
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: IN
37961: NOT
37962: OR
37963: IFFALSE 37967
// exit ;
37965: GO 38050
// tmp := [ ] ;
37967: LD_ADDR_VAR 0 5
37971: PUSH
37972: EMPTY
37973: ST_TO_ADDR
// for i in units do
37974: LD_ADDR_VAR 0 4
37978: PUSH
37979: LD_VAR 0 1
37983: PUSH
37984: FOR_IN
37985: IFFALSE 38019
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37987: LD_ADDR_VAR 0 5
37991: PUSH
37992: LD_VAR 0 5
37996: PPUSH
37997: LD_VAR 0 4
38001: PPUSH
38002: LD_VAR 0 2
38006: PPUSH
38007: CALL_OW 259
38011: PPUSH
38012: CALL 39410 0 2
38016: ST_TO_ADDR
38017: GO 37984
38019: POP
38020: POP
// if not tmp then
38021: LD_VAR 0 5
38025: NOT
38026: IFFALSE 38030
// exit ;
38028: GO 38050
// result := SortListByListDesc ( units , tmp ) ;
38030: LD_ADDR_VAR 0 3
38034: PUSH
38035: LD_VAR 0 1
38039: PPUSH
38040: LD_VAR 0 5
38044: PPUSH
38045: CALL_OW 77
38049: ST_TO_ADDR
// end ;
38050: LD_VAR 0 3
38054: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38055: LD_INT 0
38057: PPUSH
38058: PPUSH
38059: PPUSH
// result := false ;
38060: LD_ADDR_VAR 0 3
38064: PUSH
38065: LD_INT 0
38067: ST_TO_ADDR
// if not building then
38068: LD_VAR 0 2
38072: NOT
38073: IFFALSE 38077
// exit ;
38075: GO 38215
// x := GetX ( building ) ;
38077: LD_ADDR_VAR 0 4
38081: PUSH
38082: LD_VAR 0 2
38086: PPUSH
38087: CALL_OW 250
38091: ST_TO_ADDR
// y := GetY ( building ) ;
38092: LD_ADDR_VAR 0 5
38096: PUSH
38097: LD_VAR 0 2
38101: PPUSH
38102: CALL_OW 251
38106: ST_TO_ADDR
// if not x or not y then
38107: LD_VAR 0 4
38111: NOT
38112: PUSH
38113: LD_VAR 0 5
38117: NOT
38118: OR
38119: IFFALSE 38123
// exit ;
38121: GO 38215
// if GetTaskList ( unit ) then
38123: LD_VAR 0 1
38127: PPUSH
38128: CALL_OW 437
38132: IFFALSE 38215
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38134: LD_STRING e
38136: PUSH
38137: LD_VAR 0 1
38141: PPUSH
38142: CALL_OW 437
38146: PUSH
38147: LD_INT 1
38149: ARRAY
38150: PUSH
38151: LD_INT 1
38153: ARRAY
38154: EQUAL
38155: PUSH
38156: LD_VAR 0 4
38160: PUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 437
38170: PUSH
38171: LD_INT 1
38173: ARRAY
38174: PUSH
38175: LD_INT 2
38177: ARRAY
38178: EQUAL
38179: AND
38180: PUSH
38181: LD_VAR 0 5
38185: PUSH
38186: LD_VAR 0 1
38190: PPUSH
38191: CALL_OW 437
38195: PUSH
38196: LD_INT 1
38198: ARRAY
38199: PUSH
38200: LD_INT 3
38202: ARRAY
38203: EQUAL
38204: AND
38205: IFFALSE 38215
// result := true end ;
38207: LD_ADDR_VAR 0 3
38211: PUSH
38212: LD_INT 1
38214: ST_TO_ADDR
// end ;
38215: LD_VAR 0 3
38219: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38220: LD_INT 0
38222: PPUSH
// result := false ;
38223: LD_ADDR_VAR 0 4
38227: PUSH
38228: LD_INT 0
38230: ST_TO_ADDR
// if GetTaskList ( unit ) then
38231: LD_VAR 0 1
38235: PPUSH
38236: CALL_OW 437
38240: IFFALSE 38323
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38242: LD_STRING M
38244: PUSH
38245: LD_VAR 0 1
38249: PPUSH
38250: CALL_OW 437
38254: PUSH
38255: LD_INT 1
38257: ARRAY
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: EQUAL
38263: PUSH
38264: LD_VAR 0 2
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 437
38278: PUSH
38279: LD_INT 1
38281: ARRAY
38282: PUSH
38283: LD_INT 2
38285: ARRAY
38286: EQUAL
38287: AND
38288: PUSH
38289: LD_VAR 0 3
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 437
38303: PUSH
38304: LD_INT 1
38306: ARRAY
38307: PUSH
38308: LD_INT 3
38310: ARRAY
38311: EQUAL
38312: AND
38313: IFFALSE 38323
// result := true ;
38315: LD_ADDR_VAR 0 4
38319: PUSH
38320: LD_INT 1
38322: ST_TO_ADDR
// end ; end ;
38323: LD_VAR 0 4
38327: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38328: LD_INT 0
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
// if not unit or not area then
38334: LD_VAR 0 1
38338: NOT
38339: PUSH
38340: LD_VAR 0 2
38344: NOT
38345: OR
38346: IFFALSE 38350
// exit ;
38348: GO 38513
// tmp := AreaToList ( area , i ) ;
38350: LD_ADDR_VAR 0 6
38354: PUSH
38355: LD_VAR 0 2
38359: PPUSH
38360: LD_VAR 0 5
38364: PPUSH
38365: CALL_OW 517
38369: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38370: LD_ADDR_VAR 0 5
38374: PUSH
38375: DOUBLE
38376: LD_INT 1
38378: DEC
38379: ST_TO_ADDR
38380: LD_VAR 0 6
38384: PUSH
38385: LD_INT 1
38387: ARRAY
38388: PUSH
38389: FOR_TO
38390: IFFALSE 38511
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38392: LD_ADDR_VAR 0 7
38396: PUSH
38397: LD_VAR 0 6
38401: PUSH
38402: LD_INT 1
38404: ARRAY
38405: PUSH
38406: LD_VAR 0 5
38410: ARRAY
38411: PUSH
38412: LD_VAR 0 6
38416: PUSH
38417: LD_INT 2
38419: ARRAY
38420: PUSH
38421: LD_VAR 0 5
38425: ARRAY
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
38431: LD_INT 92
38433: PUSH
38434: LD_VAR 0 7
38438: PUSH
38439: LD_INT 1
38441: ARRAY
38442: PUSH
38443: LD_VAR 0 7
38447: PUSH
38448: LD_INT 2
38450: ARRAY
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: PPUSH
38461: CALL_OW 69
38465: PUSH
38466: LD_INT 0
38468: EQUAL
38469: IFFALSE 38509
// begin PlaceUnitArea ( unit , area , mode ) ;
38471: LD_VAR 0 1
38475: PPUSH
38476: LD_VAR 0 2
38480: PPUSH
38481: LD_VAR 0 3
38485: PPUSH
38486: CALL_OW 49
// result := IsPlaced ( unit ) ;
38490: LD_ADDR_VAR 0 4
38494: PUSH
38495: LD_VAR 0 1
38499: PPUSH
38500: CALL_OW 305
38504: ST_TO_ADDR
// exit ;
38505: POP
38506: POP
38507: GO 38513
// end ; end ;
38509: GO 38389
38511: POP
38512: POP
// end ;
38513: LD_VAR 0 4
38517: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38518: LD_INT 0
38520: PPUSH
38521: PPUSH
38522: PPUSH
// if not side or side > 8 then
38523: LD_VAR 0 1
38527: NOT
38528: PUSH
38529: LD_VAR 0 1
38533: PUSH
38534: LD_INT 8
38536: GREATER
38537: OR
38538: IFFALSE 38542
// exit ;
38540: GO 38729
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38542: LD_ADDR_VAR 0 4
38546: PUSH
38547: LD_INT 22
38549: PUSH
38550: LD_VAR 0 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 21
38561: PUSH
38562: LD_INT 3
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PPUSH
38573: CALL_OW 69
38577: ST_TO_ADDR
// if not tmp then
38578: LD_VAR 0 4
38582: NOT
38583: IFFALSE 38587
// exit ;
38585: GO 38729
// enable_addtolog := true ;
38587: LD_ADDR_OWVAR 81
38591: PUSH
38592: LD_INT 1
38594: ST_TO_ADDR
// AddToLog ( [ ) ;
38595: LD_STRING [
38597: PPUSH
38598: CALL_OW 561
// for i in tmp do
38602: LD_ADDR_VAR 0 3
38606: PUSH
38607: LD_VAR 0 4
38611: PUSH
38612: FOR_IN
38613: IFFALSE 38720
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38615: LD_STRING [
38617: PUSH
38618: LD_VAR 0 3
38622: PPUSH
38623: CALL_OW 266
38627: STR
38628: PUSH
38629: LD_STRING , 
38631: STR
38632: PUSH
38633: LD_VAR 0 3
38637: PPUSH
38638: CALL_OW 250
38642: STR
38643: PUSH
38644: LD_STRING , 
38646: STR
38647: PUSH
38648: LD_VAR 0 3
38652: PPUSH
38653: CALL_OW 251
38657: STR
38658: PUSH
38659: LD_STRING , 
38661: STR
38662: PUSH
38663: LD_VAR 0 3
38667: PPUSH
38668: CALL_OW 254
38672: STR
38673: PUSH
38674: LD_STRING , 
38676: STR
38677: PUSH
38678: LD_VAR 0 3
38682: PPUSH
38683: LD_INT 1
38685: PPUSH
38686: CALL_OW 268
38690: STR
38691: PUSH
38692: LD_STRING , 
38694: STR
38695: PUSH
38696: LD_VAR 0 3
38700: PPUSH
38701: LD_INT 2
38703: PPUSH
38704: CALL_OW 268
38708: STR
38709: PUSH
38710: LD_STRING ],
38712: STR
38713: PPUSH
38714: CALL_OW 561
// end ;
38718: GO 38612
38720: POP
38721: POP
// AddToLog ( ]; ) ;
38722: LD_STRING ];
38724: PPUSH
38725: CALL_OW 561
// end ;
38729: LD_VAR 0 2
38733: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38734: LD_INT 0
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
// if not area or not rate or not max then
38741: LD_VAR 0 1
38745: NOT
38746: PUSH
38747: LD_VAR 0 2
38751: NOT
38752: OR
38753: PUSH
38754: LD_VAR 0 4
38758: NOT
38759: OR
38760: IFFALSE 38764
// exit ;
38762: GO 38953
// while 1 do
38764: LD_INT 1
38766: IFFALSE 38953
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38768: LD_ADDR_VAR 0 9
38772: PUSH
38773: LD_VAR 0 1
38777: PPUSH
38778: LD_INT 1
38780: PPUSH
38781: CALL_OW 287
38785: PUSH
38786: LD_INT 10
38788: MUL
38789: ST_TO_ADDR
// r := rate / 10 ;
38790: LD_ADDR_VAR 0 7
38794: PUSH
38795: LD_VAR 0 2
38799: PUSH
38800: LD_INT 10
38802: DIVREAL
38803: ST_TO_ADDR
// time := 1 1$00 ;
38804: LD_ADDR_VAR 0 8
38808: PUSH
38809: LD_INT 2100
38811: ST_TO_ADDR
// if amount < min then
38812: LD_VAR 0 9
38816: PUSH
38817: LD_VAR 0 3
38821: LESS
38822: IFFALSE 38840
// r := r * 2 else
38824: LD_ADDR_VAR 0 7
38828: PUSH
38829: LD_VAR 0 7
38833: PUSH
38834: LD_INT 2
38836: MUL
38837: ST_TO_ADDR
38838: GO 38866
// if amount > max then
38840: LD_VAR 0 9
38844: PUSH
38845: LD_VAR 0 4
38849: GREATER
38850: IFFALSE 38866
// r := r / 2 ;
38852: LD_ADDR_VAR 0 7
38856: PUSH
38857: LD_VAR 0 7
38861: PUSH
38862: LD_INT 2
38864: DIVREAL
38865: ST_TO_ADDR
// time := time / r ;
38866: LD_ADDR_VAR 0 8
38870: PUSH
38871: LD_VAR 0 8
38875: PUSH
38876: LD_VAR 0 7
38880: DIVREAL
38881: ST_TO_ADDR
// if time < 0 then
38882: LD_VAR 0 8
38886: PUSH
38887: LD_INT 0
38889: LESS
38890: IFFALSE 38907
// time := time * - 1 ;
38892: LD_ADDR_VAR 0 8
38896: PUSH
38897: LD_VAR 0 8
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: MUL
38906: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38907: LD_VAR 0 8
38911: PUSH
38912: LD_INT 35
38914: PPUSH
38915: LD_INT 875
38917: PPUSH
38918: CALL_OW 12
38922: PLUS
38923: PPUSH
38924: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38928: LD_INT 1
38930: PPUSH
38931: LD_INT 5
38933: PPUSH
38934: CALL_OW 12
38938: PPUSH
38939: LD_VAR 0 1
38943: PPUSH
38944: LD_INT 1
38946: PPUSH
38947: CALL_OW 55
// end ;
38951: GO 38764
// end ;
38953: LD_VAR 0 5
38957: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38958: LD_INT 0
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
// if not turrets or not factories then
38968: LD_VAR 0 1
38972: NOT
38973: PUSH
38974: LD_VAR 0 2
38978: NOT
38979: OR
38980: IFFALSE 38984
// exit ;
38982: GO 39291
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38984: LD_ADDR_VAR 0 10
38988: PUSH
38989: LD_INT 5
38991: PUSH
38992: LD_INT 6
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 4
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 3
39011: PUSH
39012: LD_INT 5
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 24
39026: PUSH
39027: LD_INT 25
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 23
39036: PUSH
39037: LD_INT 27
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 42
39050: PUSH
39051: LD_INT 43
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 44
39060: PUSH
39061: LD_INT 46
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 45
39070: PUSH
39071: LD_INT 47
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: ST_TO_ADDR
// result := [ ] ;
39088: LD_ADDR_VAR 0 3
39092: PUSH
39093: EMPTY
39094: ST_TO_ADDR
// for i in turrets do
39095: LD_ADDR_VAR 0 4
39099: PUSH
39100: LD_VAR 0 1
39104: PUSH
39105: FOR_IN
39106: IFFALSE 39289
// begin nat := GetNation ( i ) ;
39108: LD_ADDR_VAR 0 7
39112: PUSH
39113: LD_VAR 0 4
39117: PPUSH
39118: CALL_OW 248
39122: ST_TO_ADDR
// weapon := 0 ;
39123: LD_ADDR_VAR 0 8
39127: PUSH
39128: LD_INT 0
39130: ST_TO_ADDR
// if not nat then
39131: LD_VAR 0 7
39135: NOT
39136: IFFALSE 39140
// continue ;
39138: GO 39105
// for j in list [ nat ] do
39140: LD_ADDR_VAR 0 5
39144: PUSH
39145: LD_VAR 0 10
39149: PUSH
39150: LD_VAR 0 7
39154: ARRAY
39155: PUSH
39156: FOR_IN
39157: IFFALSE 39198
// if GetBWeapon ( i ) = j [ 1 ] then
39159: LD_VAR 0 4
39163: PPUSH
39164: CALL_OW 269
39168: PUSH
39169: LD_VAR 0 5
39173: PUSH
39174: LD_INT 1
39176: ARRAY
39177: EQUAL
39178: IFFALSE 39196
// begin weapon := j [ 2 ] ;
39180: LD_ADDR_VAR 0 8
39184: PUSH
39185: LD_VAR 0 5
39189: PUSH
39190: LD_INT 2
39192: ARRAY
39193: ST_TO_ADDR
// break ;
39194: GO 39198
// end ;
39196: GO 39156
39198: POP
39199: POP
// if not weapon then
39200: LD_VAR 0 8
39204: NOT
39205: IFFALSE 39209
// continue ;
39207: GO 39105
// for k in factories do
39209: LD_ADDR_VAR 0 6
39213: PUSH
39214: LD_VAR 0 2
39218: PUSH
39219: FOR_IN
39220: IFFALSE 39285
// begin weapons := AvailableWeaponList ( k ) ;
39222: LD_ADDR_VAR 0 9
39226: PUSH
39227: LD_VAR 0 6
39231: PPUSH
39232: CALL_OW 478
39236: ST_TO_ADDR
// if not weapons then
39237: LD_VAR 0 9
39241: NOT
39242: IFFALSE 39246
// continue ;
39244: GO 39219
// if weapon in weapons then
39246: LD_VAR 0 8
39250: PUSH
39251: LD_VAR 0 9
39255: IN
39256: IFFALSE 39283
// begin result := [ i , weapon ] ;
39258: LD_ADDR_VAR 0 3
39262: PUSH
39263: LD_VAR 0 4
39267: PUSH
39268: LD_VAR 0 8
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// exit ;
39277: POP
39278: POP
39279: POP
39280: POP
39281: GO 39291
// end ; end ;
39283: GO 39219
39285: POP
39286: POP
// end ;
39287: GO 39105
39289: POP
39290: POP
// end ;
39291: LD_VAR 0 3
39295: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39296: LD_INT 0
39298: PPUSH
// if not side or side > 8 then
39299: LD_VAR 0 3
39303: NOT
39304: PUSH
39305: LD_VAR 0 3
39309: PUSH
39310: LD_INT 8
39312: GREATER
39313: OR
39314: IFFALSE 39318
// exit ;
39316: GO 39377
// if not range then
39318: LD_VAR 0 4
39322: NOT
39323: IFFALSE 39334
// range := - 12 ;
39325: LD_ADDR_VAR 0 4
39329: PUSH
39330: LD_INT 12
39332: NEG
39333: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39334: LD_VAR 0 1
39338: PPUSH
39339: LD_VAR 0 2
39343: PPUSH
39344: LD_VAR 0 3
39348: PPUSH
39349: LD_VAR 0 4
39353: PPUSH
39354: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39358: LD_VAR 0 1
39362: PPUSH
39363: LD_VAR 0 2
39367: PPUSH
39368: LD_VAR 0 3
39372: PPUSH
39373: CALL_OW 331
// end ;
39377: LD_VAR 0 5
39381: RET
// export function Video ( mode ) ; begin
39382: LD_INT 0
39384: PPUSH
// ingame_video = mode ;
39385: LD_ADDR_OWVAR 52
39389: PUSH
39390: LD_VAR 0 1
39394: ST_TO_ADDR
// interface_hidden = mode ;
39395: LD_ADDR_OWVAR 54
39399: PUSH
39400: LD_VAR 0 1
39404: ST_TO_ADDR
// end ;
39405: LD_VAR 0 2
39409: RET
// export function Join ( array , element ) ; begin
39410: LD_INT 0
39412: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39413: LD_ADDR_VAR 0 3
39417: PUSH
39418: LD_VAR 0 1
39422: PPUSH
39423: LD_VAR 0 1
39427: PUSH
39428: LD_INT 1
39430: PLUS
39431: PPUSH
39432: LD_VAR 0 2
39436: PPUSH
39437: CALL_OW 1
39441: ST_TO_ADDR
// end ;
39442: LD_VAR 0 3
39446: RET
// export function JoinUnion ( array , element ) ; begin
39447: LD_INT 0
39449: PPUSH
// result := array union element ;
39450: LD_ADDR_VAR 0 3
39454: PUSH
39455: LD_VAR 0 1
39459: PUSH
39460: LD_VAR 0 2
39464: UNION
39465: ST_TO_ADDR
// end ;
39466: LD_VAR 0 3
39470: RET
// export function GetBehemoths ( side ) ; begin
39471: LD_INT 0
39473: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39474: LD_ADDR_VAR 0 2
39478: PUSH
39479: LD_INT 22
39481: PUSH
39482: LD_VAR 0 1
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 31
39493: PUSH
39494: LD_INT 25
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PPUSH
39505: CALL_OW 69
39509: ST_TO_ADDR
// end ;
39510: LD_VAR 0 2
39514: RET
// export function Shuffle ( array ) ; var i , index ; begin
39515: LD_INT 0
39517: PPUSH
39518: PPUSH
39519: PPUSH
// result := [ ] ;
39520: LD_ADDR_VAR 0 2
39524: PUSH
39525: EMPTY
39526: ST_TO_ADDR
// if not array then
39527: LD_VAR 0 1
39531: NOT
39532: IFFALSE 39536
// exit ;
39534: GO 39635
// Randomize ;
39536: CALL_OW 10
// for i = array downto 1 do
39540: LD_ADDR_VAR 0 3
39544: PUSH
39545: DOUBLE
39546: LD_VAR 0 1
39550: INC
39551: ST_TO_ADDR
39552: LD_INT 1
39554: PUSH
39555: FOR_DOWNTO
39556: IFFALSE 39633
// begin index := rand ( 1 , array ) ;
39558: LD_ADDR_VAR 0 4
39562: PUSH
39563: LD_INT 1
39565: PPUSH
39566: LD_VAR 0 1
39570: PPUSH
39571: CALL_OW 12
39575: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39576: LD_ADDR_VAR 0 2
39580: PUSH
39581: LD_VAR 0 2
39585: PPUSH
39586: LD_VAR 0 2
39590: PUSH
39591: LD_INT 1
39593: PLUS
39594: PPUSH
39595: LD_VAR 0 1
39599: PUSH
39600: LD_VAR 0 4
39604: ARRAY
39605: PPUSH
39606: CALL_OW 2
39610: ST_TO_ADDR
// array := Delete ( array , index ) ;
39611: LD_ADDR_VAR 0 1
39615: PUSH
39616: LD_VAR 0 1
39620: PPUSH
39621: LD_VAR 0 4
39625: PPUSH
39626: CALL_OW 3
39630: ST_TO_ADDR
// end ;
39631: GO 39555
39633: POP
39634: POP
// end ;
39635: LD_VAR 0 2
39639: RET
// export function GetBaseMaterials ( base ) ; begin
39640: LD_INT 0
39642: PPUSH
// result := [ 0 , 0 , 0 ] ;
39643: LD_ADDR_VAR 0 2
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: ST_TO_ADDR
// if not base then
39662: LD_VAR 0 1
39666: NOT
39667: IFFALSE 39671
// exit ;
39669: GO 39720
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39671: LD_ADDR_VAR 0 2
39675: PUSH
39676: LD_VAR 0 1
39680: PPUSH
39681: LD_INT 1
39683: PPUSH
39684: CALL_OW 275
39688: PUSH
39689: LD_VAR 0 1
39693: PPUSH
39694: LD_INT 2
39696: PPUSH
39697: CALL_OW 275
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: LD_INT 3
39709: PPUSH
39710: CALL_OW 275
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: ST_TO_ADDR
// end ;
39720: LD_VAR 0 2
39724: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39725: LD_INT 0
39727: PPUSH
39728: PPUSH
// result := array ;
39729: LD_ADDR_VAR 0 3
39733: PUSH
39734: LD_VAR 0 1
39738: ST_TO_ADDR
// if size >= result then
39739: LD_VAR 0 2
39743: PUSH
39744: LD_VAR 0 3
39748: GREATEREQUAL
39749: IFFALSE 39753
// exit ;
39751: GO 39803
// if size then
39753: LD_VAR 0 2
39757: IFFALSE 39803
// for i := array downto size do
39759: LD_ADDR_VAR 0 4
39763: PUSH
39764: DOUBLE
39765: LD_VAR 0 1
39769: INC
39770: ST_TO_ADDR
39771: LD_VAR 0 2
39775: PUSH
39776: FOR_DOWNTO
39777: IFFALSE 39801
// result := Delete ( result , result ) ;
39779: LD_ADDR_VAR 0 3
39783: PUSH
39784: LD_VAR 0 3
39788: PPUSH
39789: LD_VAR 0 3
39793: PPUSH
39794: CALL_OW 3
39798: ST_TO_ADDR
39799: GO 39776
39801: POP
39802: POP
// end ;
39803: LD_VAR 0 3
39807: RET
// export function ComExit ( unit ) ; var tmp ; begin
39808: LD_INT 0
39810: PPUSH
39811: PPUSH
// if not IsInUnit ( unit ) then
39812: LD_VAR 0 1
39816: PPUSH
39817: CALL_OW 310
39821: NOT
39822: IFFALSE 39826
// exit ;
39824: GO 39886
// tmp := IsInUnit ( unit ) ;
39826: LD_ADDR_VAR 0 3
39830: PUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 310
39840: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39841: LD_VAR 0 3
39845: PPUSH
39846: CALL_OW 247
39850: PUSH
39851: LD_INT 2
39853: EQUAL
39854: IFFALSE 39867
// ComExitVehicle ( unit ) else
39856: LD_VAR 0 1
39860: PPUSH
39861: CALL_OW 121
39865: GO 39876
// ComExitBuilding ( unit ) ;
39867: LD_VAR 0 1
39871: PPUSH
39872: CALL_OW 122
// result := tmp ;
39876: LD_ADDR_VAR 0 2
39880: PUSH
39881: LD_VAR 0 3
39885: ST_TO_ADDR
// end ;
39886: LD_VAR 0 2
39890: RET
// export function ComExitAll ( units ) ; var i ; begin
39891: LD_INT 0
39893: PPUSH
39894: PPUSH
// if not units then
39895: LD_VAR 0 1
39899: NOT
39900: IFFALSE 39904
// exit ;
39902: GO 39930
// for i in units do
39904: LD_ADDR_VAR 0 3
39908: PUSH
39909: LD_VAR 0 1
39913: PUSH
39914: FOR_IN
39915: IFFALSE 39928
// ComExit ( i ) ;
39917: LD_VAR 0 3
39921: PPUSH
39922: CALL 39808 0 1
39926: GO 39914
39928: POP
39929: POP
// end ;
39930: LD_VAR 0 2
39934: RET
// export function ResetHc ; begin
39935: LD_INT 0
39937: PPUSH
// InitHc ;
39938: CALL_OW 19
// hc_importance := 0 ;
39942: LD_ADDR_OWVAR 32
39946: PUSH
39947: LD_INT 0
39949: ST_TO_ADDR
// end ;
39950: LD_VAR 0 1
39954: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39955: LD_INT 0
39957: PPUSH
39958: PPUSH
39959: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39960: LD_ADDR_VAR 0 6
39964: PUSH
39965: LD_VAR 0 1
39969: PUSH
39970: LD_VAR 0 3
39974: PLUS
39975: PUSH
39976: LD_INT 2
39978: DIV
39979: ST_TO_ADDR
// if _x < 0 then
39980: LD_VAR 0 6
39984: PUSH
39985: LD_INT 0
39987: LESS
39988: IFFALSE 40005
// _x := _x * - 1 ;
39990: LD_ADDR_VAR 0 6
39994: PUSH
39995: LD_VAR 0 6
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: MUL
40004: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40005: LD_ADDR_VAR 0 7
40009: PUSH
40010: LD_VAR 0 2
40014: PUSH
40015: LD_VAR 0 4
40019: PLUS
40020: PUSH
40021: LD_INT 2
40023: DIV
40024: ST_TO_ADDR
// if _y < 0 then
40025: LD_VAR 0 7
40029: PUSH
40030: LD_INT 0
40032: LESS
40033: IFFALSE 40050
// _y := _y * - 1 ;
40035: LD_ADDR_VAR 0 7
40039: PUSH
40040: LD_VAR 0 7
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: MUL
40049: ST_TO_ADDR
// result := [ _x , _y ] ;
40050: LD_ADDR_VAR 0 5
40054: PUSH
40055: LD_VAR 0 6
40059: PUSH
40060: LD_VAR 0 7
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: ST_TO_ADDR
// end ;
40069: LD_VAR 0 5
40073: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40074: LD_INT 0
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
// task := GetTaskList ( unit ) ;
40080: LD_ADDR_VAR 0 7
40084: PUSH
40085: LD_VAR 0 1
40089: PPUSH
40090: CALL_OW 437
40094: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40095: LD_VAR 0 7
40099: NOT
40100: PUSH
40101: LD_VAR 0 1
40105: PPUSH
40106: LD_VAR 0 2
40110: PPUSH
40111: CALL_OW 308
40115: NOT
40116: AND
40117: IFFALSE 40121
// exit ;
40119: GO 40239
// if IsInArea ( unit , area ) then
40121: LD_VAR 0 1
40125: PPUSH
40126: LD_VAR 0 2
40130: PPUSH
40131: CALL_OW 308
40135: IFFALSE 40153
// begin ComMoveToArea ( unit , goAway ) ;
40137: LD_VAR 0 1
40141: PPUSH
40142: LD_VAR 0 3
40146: PPUSH
40147: CALL_OW 113
// exit ;
40151: GO 40239
// end ; if task [ 1 ] [ 1 ] <> M then
40153: LD_VAR 0 7
40157: PUSH
40158: LD_INT 1
40160: ARRAY
40161: PUSH
40162: LD_INT 1
40164: ARRAY
40165: PUSH
40166: LD_STRING M
40168: NONEQUAL
40169: IFFALSE 40173
// exit ;
40171: GO 40239
// x := task [ 1 ] [ 2 ] ;
40173: LD_ADDR_VAR 0 5
40177: PUSH
40178: LD_VAR 0 7
40182: PUSH
40183: LD_INT 1
40185: ARRAY
40186: PUSH
40187: LD_INT 2
40189: ARRAY
40190: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40191: LD_ADDR_VAR 0 6
40195: PUSH
40196: LD_VAR 0 7
40200: PUSH
40201: LD_INT 1
40203: ARRAY
40204: PUSH
40205: LD_INT 3
40207: ARRAY
40208: ST_TO_ADDR
// if InArea ( x , y , area ) then
40209: LD_VAR 0 5
40213: PPUSH
40214: LD_VAR 0 6
40218: PPUSH
40219: LD_VAR 0 2
40223: PPUSH
40224: CALL_OW 309
40228: IFFALSE 40239
// ComStop ( unit ) ;
40230: LD_VAR 0 1
40234: PPUSH
40235: CALL_OW 141
// end ;
40239: LD_VAR 0 4
40243: RET
// export function Abs ( value ) ; begin
40244: LD_INT 0
40246: PPUSH
// result := value ;
40247: LD_ADDR_VAR 0 2
40251: PUSH
40252: LD_VAR 0 1
40256: ST_TO_ADDR
// if value < 0 then
40257: LD_VAR 0 1
40261: PUSH
40262: LD_INT 0
40264: LESS
40265: IFFALSE 40282
// result := value * - 1 ;
40267: LD_ADDR_VAR 0 2
40271: PUSH
40272: LD_VAR 0 1
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: MUL
40281: ST_TO_ADDR
// end ;
40282: LD_VAR 0 2
40286: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40287: LD_INT 0
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
40293: PPUSH
40294: PPUSH
40295: PPUSH
40296: PPUSH
// if not unit or not building then
40297: LD_VAR 0 1
40301: NOT
40302: PUSH
40303: LD_VAR 0 2
40307: NOT
40308: OR
40309: IFFALSE 40313
// exit ;
40311: GO 40539
// x := GetX ( building ) ;
40313: LD_ADDR_VAR 0 4
40317: PUSH
40318: LD_VAR 0 2
40322: PPUSH
40323: CALL_OW 250
40327: ST_TO_ADDR
// y := GetY ( building ) ;
40328: LD_ADDR_VAR 0 6
40332: PUSH
40333: LD_VAR 0 2
40337: PPUSH
40338: CALL_OW 251
40342: ST_TO_ADDR
// d := GetDir ( building ) ;
40343: LD_ADDR_VAR 0 8
40347: PUSH
40348: LD_VAR 0 2
40352: PPUSH
40353: CALL_OW 254
40357: ST_TO_ADDR
// r := 4 ;
40358: LD_ADDR_VAR 0 9
40362: PUSH
40363: LD_INT 4
40365: ST_TO_ADDR
// for i := 1 to 5 do
40366: LD_ADDR_VAR 0 10
40370: PUSH
40371: DOUBLE
40372: LD_INT 1
40374: DEC
40375: ST_TO_ADDR
40376: LD_INT 5
40378: PUSH
40379: FOR_TO
40380: IFFALSE 40537
// begin _x := ShiftX ( x , d , r + i ) ;
40382: LD_ADDR_VAR 0 5
40386: PUSH
40387: LD_VAR 0 4
40391: PPUSH
40392: LD_VAR 0 8
40396: PPUSH
40397: LD_VAR 0 9
40401: PUSH
40402: LD_VAR 0 10
40406: PLUS
40407: PPUSH
40408: CALL_OW 272
40412: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40413: LD_ADDR_VAR 0 7
40417: PUSH
40418: LD_VAR 0 6
40422: PPUSH
40423: LD_VAR 0 8
40427: PPUSH
40428: LD_VAR 0 9
40432: PUSH
40433: LD_VAR 0 10
40437: PLUS
40438: PPUSH
40439: CALL_OW 273
40443: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40444: LD_VAR 0 5
40448: PPUSH
40449: LD_VAR 0 7
40453: PPUSH
40454: CALL_OW 488
40458: PUSH
40459: LD_VAR 0 5
40463: PPUSH
40464: LD_VAR 0 7
40468: PPUSH
40469: CALL_OW 428
40473: PPUSH
40474: CALL_OW 247
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: IN
40489: NOT
40490: AND
40491: IFFALSE 40535
// begin ComMoveXY ( unit , _x , _y ) ;
40493: LD_VAR 0 1
40497: PPUSH
40498: LD_VAR 0 5
40502: PPUSH
40503: LD_VAR 0 7
40507: PPUSH
40508: CALL_OW 111
// result := [ _x , _y ] ;
40512: LD_ADDR_VAR 0 3
40516: PUSH
40517: LD_VAR 0 5
40521: PUSH
40522: LD_VAR 0 7
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: ST_TO_ADDR
// exit ;
40531: POP
40532: POP
40533: GO 40539
// end ; end ;
40535: GO 40379
40537: POP
40538: POP
// end ;
40539: LD_VAR 0 3
40543: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40544: LD_INT 0
40546: PPUSH
40547: PPUSH
40548: PPUSH
// result := 0 ;
40549: LD_ADDR_VAR 0 3
40553: PUSH
40554: LD_INT 0
40556: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40557: LD_VAR 0 1
40561: PUSH
40562: LD_INT 0
40564: LESS
40565: PUSH
40566: LD_VAR 0 1
40570: PUSH
40571: LD_INT 8
40573: GREATER
40574: OR
40575: PUSH
40576: LD_VAR 0 2
40580: PUSH
40581: LD_INT 0
40583: LESS
40584: OR
40585: PUSH
40586: LD_VAR 0 2
40590: PUSH
40591: LD_INT 8
40593: GREATER
40594: OR
40595: IFFALSE 40599
// exit ;
40597: GO 40674
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40599: LD_ADDR_VAR 0 4
40603: PUSH
40604: LD_INT 22
40606: PUSH
40607: LD_VAR 0 2
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PPUSH
40616: CALL_OW 69
40620: PUSH
40621: FOR_IN
40622: IFFALSE 40672
// begin un := UnitShoot ( i ) ;
40624: LD_ADDR_VAR 0 5
40628: PUSH
40629: LD_VAR 0 4
40633: PPUSH
40634: CALL_OW 504
40638: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40639: LD_VAR 0 5
40643: PPUSH
40644: CALL_OW 255
40648: PUSH
40649: LD_VAR 0 1
40653: EQUAL
40654: IFFALSE 40670
// begin result := un ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_VAR 0 5
40665: ST_TO_ADDR
// exit ;
40666: POP
40667: POP
40668: GO 40674
// end ; end ;
40670: GO 40621
40672: POP
40673: POP
// end ;
40674: LD_VAR 0 3
40678: RET
// export function GetCargoBay ( units ) ; begin
40679: LD_INT 0
40681: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40682: LD_ADDR_VAR 0 2
40686: PUSH
40687: LD_VAR 0 1
40691: PPUSH
40692: LD_INT 2
40694: PUSH
40695: LD_INT 34
40697: PUSH
40698: LD_INT 12
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 34
40707: PUSH
40708: LD_INT 51
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 34
40717: PUSH
40718: LD_INT 32
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 34
40727: PUSH
40728: LD_INT 89
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: PPUSH
40742: CALL_OW 72
40746: ST_TO_ADDR
// end ;
40747: LD_VAR 0 2
40751: RET
// export function Negate ( value ) ; begin
40752: LD_INT 0
40754: PPUSH
// result := not value ;
40755: LD_ADDR_VAR 0 2
40759: PUSH
40760: LD_VAR 0 1
40764: NOT
40765: ST_TO_ADDR
// end ;
40766: LD_VAR 0 2
40770: RET
// export function Inc ( value ) ; begin
40771: LD_INT 0
40773: PPUSH
// result := value + 1 ;
40774: LD_ADDR_VAR 0 2
40778: PUSH
40779: LD_VAR 0 1
40783: PUSH
40784: LD_INT 1
40786: PLUS
40787: ST_TO_ADDR
// end ;
40788: LD_VAR 0 2
40792: RET
// export function Dec ( value ) ; begin
40793: LD_INT 0
40795: PPUSH
// result := value - 1 ;
40796: LD_ADDR_VAR 0 2
40800: PUSH
40801: LD_VAR 0 1
40805: PUSH
40806: LD_INT 1
40808: MINUS
40809: ST_TO_ADDR
// end ;
40810: LD_VAR 0 2
40814: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40815: LD_INT 0
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40825: LD_VAR 0 1
40829: PPUSH
40830: LD_VAR 0 2
40834: PPUSH
40835: CALL_OW 488
40839: NOT
40840: PUSH
40841: LD_VAR 0 3
40845: PPUSH
40846: LD_VAR 0 4
40850: PPUSH
40851: CALL_OW 488
40855: NOT
40856: OR
40857: IFFALSE 40870
// begin result := - 1 ;
40859: LD_ADDR_VAR 0 5
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: ST_TO_ADDR
// exit ;
40868: GO 41105
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40870: LD_ADDR_VAR 0 12
40874: PUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: LD_VAR 0 2
40884: PPUSH
40885: LD_VAR 0 3
40889: PPUSH
40890: LD_VAR 0 4
40894: PPUSH
40895: CALL 39955 0 4
40899: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40900: LD_ADDR_VAR 0 11
40904: PUSH
40905: LD_VAR 0 1
40909: PPUSH
40910: LD_VAR 0 2
40914: PPUSH
40915: LD_VAR 0 12
40919: PUSH
40920: LD_INT 1
40922: ARRAY
40923: PPUSH
40924: LD_VAR 0 12
40928: PUSH
40929: LD_INT 2
40931: ARRAY
40932: PPUSH
40933: CALL_OW 298
40937: ST_TO_ADDR
// distance := 9999 ;
40938: LD_ADDR_VAR 0 10
40942: PUSH
40943: LD_INT 9999
40945: ST_TO_ADDR
// for i := 0 to 5 do
40946: LD_ADDR_VAR 0 6
40950: PUSH
40951: DOUBLE
40952: LD_INT 0
40954: DEC
40955: ST_TO_ADDR
40956: LD_INT 5
40958: PUSH
40959: FOR_TO
40960: IFFALSE 41103
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40962: LD_ADDR_VAR 0 7
40966: PUSH
40967: LD_VAR 0 1
40971: PPUSH
40972: LD_VAR 0 6
40976: PPUSH
40977: LD_VAR 0 11
40981: PPUSH
40982: CALL_OW 272
40986: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40987: LD_ADDR_VAR 0 8
40991: PUSH
40992: LD_VAR 0 2
40996: PPUSH
40997: LD_VAR 0 6
41001: PPUSH
41002: LD_VAR 0 11
41006: PPUSH
41007: CALL_OW 273
41011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41012: LD_VAR 0 7
41016: PPUSH
41017: LD_VAR 0 8
41021: PPUSH
41022: CALL_OW 488
41026: NOT
41027: IFFALSE 41031
// continue ;
41029: GO 40959
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41031: LD_ADDR_VAR 0 9
41035: PUSH
41036: LD_VAR 0 12
41040: PUSH
41041: LD_INT 1
41043: ARRAY
41044: PPUSH
41045: LD_VAR 0 12
41049: PUSH
41050: LD_INT 2
41052: ARRAY
41053: PPUSH
41054: LD_VAR 0 7
41058: PPUSH
41059: LD_VAR 0 8
41063: PPUSH
41064: CALL_OW 298
41068: ST_TO_ADDR
// if tmp < distance then
41069: LD_VAR 0 9
41073: PUSH
41074: LD_VAR 0 10
41078: LESS
41079: IFFALSE 41101
// begin result := i ;
41081: LD_ADDR_VAR 0 5
41085: PUSH
41086: LD_VAR 0 6
41090: ST_TO_ADDR
// distance := tmp ;
41091: LD_ADDR_VAR 0 10
41095: PUSH
41096: LD_VAR 0 9
41100: ST_TO_ADDR
// end ; end ;
41101: GO 40959
41103: POP
41104: POP
// end ;
41105: LD_VAR 0 5
41109: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41110: LD_INT 0
41112: PPUSH
41113: PPUSH
// if not driver or not IsInUnit ( driver ) then
41114: LD_VAR 0 1
41118: NOT
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: CALL_OW 310
41129: NOT
41130: OR
41131: IFFALSE 41135
// exit ;
41133: GO 41225
// vehicle := IsInUnit ( driver ) ;
41135: LD_ADDR_VAR 0 3
41139: PUSH
41140: LD_VAR 0 1
41144: PPUSH
41145: CALL_OW 310
41149: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41150: LD_VAR 0 1
41154: PPUSH
41155: LD_STRING \
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: PUSH
41185: LD_STRING E
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_VAR 0 3
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PPUSH
41221: CALL_OW 446
// end ;
41225: LD_VAR 0 2
41229: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41230: LD_INT 0
41232: PPUSH
41233: PPUSH
// if not driver or not IsInUnit ( driver ) then
41234: LD_VAR 0 1
41238: NOT
41239: PUSH
41240: LD_VAR 0 1
41244: PPUSH
41245: CALL_OW 310
41249: NOT
41250: OR
41251: IFFALSE 41255
// exit ;
41253: GO 41345
// vehicle := IsInUnit ( driver ) ;
41255: LD_ADDR_VAR 0 3
41259: PUSH
41260: LD_VAR 0 1
41264: PPUSH
41265: CALL_OW 310
41269: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41270: LD_VAR 0 1
41274: PPUSH
41275: LD_STRING \
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: PUSH
41305: LD_STRING E
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_VAR 0 3
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PPUSH
41341: CALL_OW 447
// end ;
41345: LD_VAR 0 2
41349: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
41354: PPUSH
// tmp := [ ] ;
41355: LD_ADDR_VAR 0 5
41359: PUSH
41360: EMPTY
41361: ST_TO_ADDR
// for i in units do
41362: LD_ADDR_VAR 0 4
41366: PUSH
41367: LD_VAR 0 1
41371: PUSH
41372: FOR_IN
41373: IFFALSE 41411
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41375: LD_ADDR_VAR 0 5
41379: PUSH
41380: LD_VAR 0 5
41384: PPUSH
41385: LD_VAR 0 5
41389: PUSH
41390: LD_INT 1
41392: PLUS
41393: PPUSH
41394: LD_VAR 0 4
41398: PPUSH
41399: CALL_OW 256
41403: PPUSH
41404: CALL_OW 2
41408: ST_TO_ADDR
41409: GO 41372
41411: POP
41412: POP
// if not tmp then
41413: LD_VAR 0 5
41417: NOT
41418: IFFALSE 41422
// exit ;
41420: GO 41470
// if asc then
41422: LD_VAR 0 2
41426: IFFALSE 41450
// result := SortListByListAsc ( units , tmp ) else
41428: LD_ADDR_VAR 0 3
41432: PUSH
41433: LD_VAR 0 1
41437: PPUSH
41438: LD_VAR 0 5
41442: PPUSH
41443: CALL_OW 76
41447: ST_TO_ADDR
41448: GO 41470
// result := SortListByListDesc ( units , tmp ) ;
41450: LD_ADDR_VAR 0 3
41454: PUSH
41455: LD_VAR 0 1
41459: PPUSH
41460: LD_VAR 0 5
41464: PPUSH
41465: CALL_OW 77
41469: ST_TO_ADDR
// end ;
41470: LD_VAR 0 3
41474: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41475: LD_INT 0
41477: PPUSH
41478: PPUSH
// task := GetTaskList ( mech ) ;
41479: LD_ADDR_VAR 0 4
41483: PUSH
41484: LD_VAR 0 1
41488: PPUSH
41489: CALL_OW 437
41493: ST_TO_ADDR
// if not task then
41494: LD_VAR 0 4
41498: NOT
41499: IFFALSE 41503
// exit ;
41501: GO 41545
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_VAR 0 4
41512: PUSH
41513: LD_INT 1
41515: ARRAY
41516: PUSH
41517: LD_INT 1
41519: ARRAY
41520: PUSH
41521: LD_STRING r
41523: EQUAL
41524: PUSH
41525: LD_VAR 0 4
41529: PUSH
41530: LD_INT 1
41532: ARRAY
41533: PUSH
41534: LD_INT 4
41536: ARRAY
41537: PUSH
41538: LD_VAR 0 2
41542: EQUAL
41543: AND
41544: ST_TO_ADDR
// end ;
41545: LD_VAR 0 3
41549: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41550: LD_INT 0
41552: PPUSH
// SetDir ( unit , d ) ;
41553: LD_VAR 0 1
41557: PPUSH
41558: LD_VAR 0 4
41562: PPUSH
41563: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41567: LD_VAR 0 1
41571: PPUSH
41572: LD_VAR 0 2
41576: PPUSH
41577: LD_VAR 0 3
41581: PPUSH
41582: LD_VAR 0 5
41586: PPUSH
41587: CALL_OW 48
// end ;
41591: LD_VAR 0 6
41595: RET
// export function ToNaturalNumber ( number ) ; begin
41596: LD_INT 0
41598: PPUSH
// result := number div 1 ;
41599: LD_ADDR_VAR 0 2
41603: PUSH
41604: LD_VAR 0 1
41608: PUSH
41609: LD_INT 1
41611: DIV
41612: ST_TO_ADDR
// if number < 0 then
41613: LD_VAR 0 1
41617: PUSH
41618: LD_INT 0
41620: LESS
41621: IFFALSE 41631
// result := 0 ;
41623: LD_ADDR_VAR 0 2
41627: PUSH
41628: LD_INT 0
41630: ST_TO_ADDR
// end ;
41631: LD_VAR 0 2
41635: RET
// export function SortByClass ( units , class ) ; var un ; begin
41636: LD_INT 0
41638: PPUSH
41639: PPUSH
// if not units or not class then
41640: LD_VAR 0 1
41644: NOT
41645: PUSH
41646: LD_VAR 0 2
41650: NOT
41651: OR
41652: IFFALSE 41656
// exit ;
41654: GO 41751
// result := [ ] ;
41656: LD_ADDR_VAR 0 3
41660: PUSH
41661: EMPTY
41662: ST_TO_ADDR
// for un in units do
41663: LD_ADDR_VAR 0 4
41667: PUSH
41668: LD_VAR 0 1
41672: PUSH
41673: FOR_IN
41674: IFFALSE 41749
// if GetClass ( un ) = class then
41676: LD_VAR 0 4
41680: PPUSH
41681: CALL_OW 257
41685: PUSH
41686: LD_VAR 0 2
41690: EQUAL
41691: IFFALSE 41718
// result := Insert ( result , 1 , un ) else
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_VAR 0 3
41702: PPUSH
41703: LD_INT 1
41705: PPUSH
41706: LD_VAR 0 4
41710: PPUSH
41711: CALL_OW 2
41715: ST_TO_ADDR
41716: GO 41747
// result := Replace ( result , result + 1 , un ) ;
41718: LD_ADDR_VAR 0 3
41722: PUSH
41723: LD_VAR 0 3
41727: PPUSH
41728: LD_VAR 0 3
41732: PUSH
41733: LD_INT 1
41735: PLUS
41736: PPUSH
41737: LD_VAR 0 4
41741: PPUSH
41742: CALL_OW 1
41746: ST_TO_ADDR
41747: GO 41673
41749: POP
41750: POP
// end ;
41751: LD_VAR 0 3
41755: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41756: LD_INT 0
41758: PPUSH
41759: PPUSH
41760: PPUSH
41761: PPUSH
41762: PPUSH
41763: PPUSH
41764: PPUSH
// result := [ ] ;
41765: LD_ADDR_VAR 0 4
41769: PUSH
41770: EMPTY
41771: ST_TO_ADDR
// if x - r < 0 then
41772: LD_VAR 0 1
41776: PUSH
41777: LD_VAR 0 3
41781: MINUS
41782: PUSH
41783: LD_INT 0
41785: LESS
41786: IFFALSE 41798
// min_x := 0 else
41788: LD_ADDR_VAR 0 8
41792: PUSH
41793: LD_INT 0
41795: ST_TO_ADDR
41796: GO 41814
// min_x := x - r ;
41798: LD_ADDR_VAR 0 8
41802: PUSH
41803: LD_VAR 0 1
41807: PUSH
41808: LD_VAR 0 3
41812: MINUS
41813: ST_TO_ADDR
// if y - r < 0 then
41814: LD_VAR 0 2
41818: PUSH
41819: LD_VAR 0 3
41823: MINUS
41824: PUSH
41825: LD_INT 0
41827: LESS
41828: IFFALSE 41840
// min_y := 0 else
41830: LD_ADDR_VAR 0 7
41834: PUSH
41835: LD_INT 0
41837: ST_TO_ADDR
41838: GO 41856
// min_y := y - r ;
41840: LD_ADDR_VAR 0 7
41844: PUSH
41845: LD_VAR 0 2
41849: PUSH
41850: LD_VAR 0 3
41854: MINUS
41855: ST_TO_ADDR
// max_x := x + r ;
41856: LD_ADDR_VAR 0 9
41860: PUSH
41861: LD_VAR 0 1
41865: PUSH
41866: LD_VAR 0 3
41870: PLUS
41871: ST_TO_ADDR
// max_y := y + r ;
41872: LD_ADDR_VAR 0 10
41876: PUSH
41877: LD_VAR 0 2
41881: PUSH
41882: LD_VAR 0 3
41886: PLUS
41887: ST_TO_ADDR
// for _x = min_x to max_x do
41888: LD_ADDR_VAR 0 5
41892: PUSH
41893: DOUBLE
41894: LD_VAR 0 8
41898: DEC
41899: ST_TO_ADDR
41900: LD_VAR 0 9
41904: PUSH
41905: FOR_TO
41906: IFFALSE 42007
// for _y = min_y to max_y do
41908: LD_ADDR_VAR 0 6
41912: PUSH
41913: DOUBLE
41914: LD_VAR 0 7
41918: DEC
41919: ST_TO_ADDR
41920: LD_VAR 0 10
41924: PUSH
41925: FOR_TO
41926: IFFALSE 42003
// begin if not ValidHex ( _x , _y ) then
41928: LD_VAR 0 5
41932: PPUSH
41933: LD_VAR 0 6
41937: PPUSH
41938: CALL_OW 488
41942: NOT
41943: IFFALSE 41947
// continue ;
41945: GO 41925
// if GetResourceTypeXY ( _x , _y ) then
41947: LD_VAR 0 5
41951: PPUSH
41952: LD_VAR 0 6
41956: PPUSH
41957: CALL_OW 283
41961: IFFALSE 42001
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41963: LD_ADDR_VAR 0 4
41967: PUSH
41968: LD_VAR 0 4
41972: PPUSH
41973: LD_VAR 0 4
41977: PUSH
41978: LD_INT 1
41980: PLUS
41981: PPUSH
41982: LD_VAR 0 5
41986: PUSH
41987: LD_VAR 0 6
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PPUSH
41996: CALL_OW 1
42000: ST_TO_ADDR
// end ;
42001: GO 41925
42003: POP
42004: POP
42005: GO 41905
42007: POP
42008: POP
// end ;
42009: LD_VAR 0 4
42013: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42014: LD_INT 0
42016: PPUSH
42017: PPUSH
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
42022: PPUSH
42023: PPUSH
// if not units then
42024: LD_VAR 0 1
42028: NOT
42029: IFFALSE 42033
// exit ;
42031: GO 42557
// result := UnitFilter ( units , [ f_ok ] ) ;
42033: LD_ADDR_VAR 0 3
42037: PUSH
42038: LD_VAR 0 1
42042: PPUSH
42043: LD_INT 50
42045: PUSH
42046: EMPTY
42047: LIST
42048: PPUSH
42049: CALL_OW 72
42053: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42054: LD_ADDR_VAR 0 8
42058: PUSH
42059: LD_VAR 0 1
42063: PUSH
42064: LD_INT 1
42066: ARRAY
42067: PPUSH
42068: CALL_OW 255
42072: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42073: LD_ADDR_VAR 0 10
42077: PUSH
42078: LD_INT 29
42080: PUSH
42081: LD_INT 91
42083: PUSH
42084: LD_INT 49
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
// if not result then
42092: LD_VAR 0 3
42096: NOT
42097: IFFALSE 42101
// exit ;
42099: GO 42557
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42101: LD_ADDR_VAR 0 5
42105: PUSH
42106: LD_INT 81
42108: PUSH
42109: LD_VAR 0 8
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PPUSH
42118: CALL_OW 69
42122: ST_TO_ADDR
// for i in result do
42123: LD_ADDR_VAR 0 4
42127: PUSH
42128: LD_VAR 0 3
42132: PUSH
42133: FOR_IN
42134: IFFALSE 42555
// begin tag := GetTag ( i ) + 1 ;
42136: LD_ADDR_VAR 0 9
42140: PUSH
42141: LD_VAR 0 4
42145: PPUSH
42146: CALL_OW 110
42150: PUSH
42151: LD_INT 1
42153: PLUS
42154: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42155: LD_ADDR_VAR 0 7
42159: PUSH
42160: LD_VAR 0 4
42164: PPUSH
42165: CALL_OW 250
42169: PPUSH
42170: LD_VAR 0 4
42174: PPUSH
42175: CALL_OW 251
42179: PPUSH
42180: LD_INT 6
42182: PPUSH
42183: CALL 41756 0 3
42187: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42188: LD_VAR 0 4
42192: PPUSH
42193: CALL_OW 247
42197: PUSH
42198: LD_INT 2
42200: EQUAL
42201: PUSH
42202: LD_VAR 0 7
42206: AND
42207: PUSH
42208: LD_VAR 0 4
42212: PPUSH
42213: CALL_OW 264
42217: PUSH
42218: LD_VAR 0 10
42222: IN
42223: NOT
42224: AND
42225: IFFALSE 42264
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42227: LD_VAR 0 4
42231: PPUSH
42232: LD_VAR 0 7
42236: PUSH
42237: LD_INT 1
42239: ARRAY
42240: PUSH
42241: LD_INT 1
42243: ARRAY
42244: PPUSH
42245: LD_VAR 0 7
42249: PUSH
42250: LD_INT 1
42252: ARRAY
42253: PUSH
42254: LD_INT 2
42256: ARRAY
42257: PPUSH
42258: CALL_OW 116
42262: GO 42553
// if path > tag then
42264: LD_VAR 0 2
42268: PUSH
42269: LD_VAR 0 9
42273: GREATER
42274: IFFALSE 42482
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42276: LD_ADDR_VAR 0 6
42280: PUSH
42281: LD_VAR 0 5
42285: PPUSH
42286: LD_INT 91
42288: PUSH
42289: LD_VAR 0 4
42293: PUSH
42294: LD_INT 8
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: PPUSH
42302: CALL_OW 72
42306: ST_TO_ADDR
// if nearEnemy then
42307: LD_VAR 0 6
42311: IFFALSE 42380
// begin if GetWeapon ( i ) = ru_time_lapser then
42313: LD_VAR 0 4
42317: PPUSH
42318: CALL_OW 264
42322: PUSH
42323: LD_INT 49
42325: EQUAL
42326: IFFALSE 42354
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42328: LD_VAR 0 4
42332: PPUSH
42333: LD_VAR 0 6
42337: PPUSH
42338: LD_VAR 0 4
42342: PPUSH
42343: CALL_OW 74
42347: PPUSH
42348: CALL_OW 112
42352: GO 42378
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42354: LD_VAR 0 4
42358: PPUSH
42359: LD_VAR 0 6
42363: PPUSH
42364: LD_VAR 0 4
42368: PPUSH
42369: CALL_OW 74
42373: PPUSH
42374: CALL 43482 0 2
// end else
42378: GO 42480
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42380: LD_VAR 0 4
42384: PPUSH
42385: LD_VAR 0 2
42389: PUSH
42390: LD_VAR 0 9
42394: ARRAY
42395: PUSH
42396: LD_INT 1
42398: ARRAY
42399: PPUSH
42400: LD_VAR 0 2
42404: PUSH
42405: LD_VAR 0 9
42409: ARRAY
42410: PUSH
42411: LD_INT 2
42413: ARRAY
42414: PPUSH
42415: CALL_OW 297
42419: PUSH
42420: LD_INT 6
42422: GREATER
42423: IFFALSE 42466
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42425: LD_VAR 0 4
42429: PPUSH
42430: LD_VAR 0 2
42434: PUSH
42435: LD_VAR 0 9
42439: ARRAY
42440: PUSH
42441: LD_INT 1
42443: ARRAY
42444: PPUSH
42445: LD_VAR 0 2
42449: PUSH
42450: LD_VAR 0 9
42454: ARRAY
42455: PUSH
42456: LD_INT 2
42458: ARRAY
42459: PPUSH
42460: CALL_OW 114
42464: GO 42480
// SetTag ( i , tag ) ;
42466: LD_VAR 0 4
42470: PPUSH
42471: LD_VAR 0 9
42475: PPUSH
42476: CALL_OW 109
// end else
42480: GO 42553
// if enemy then
42482: LD_VAR 0 5
42486: IFFALSE 42553
// begin if GetWeapon ( i ) = ru_time_lapser then
42488: LD_VAR 0 4
42492: PPUSH
42493: CALL_OW 264
42497: PUSH
42498: LD_INT 49
42500: EQUAL
42501: IFFALSE 42529
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42503: LD_VAR 0 4
42507: PPUSH
42508: LD_VAR 0 5
42512: PPUSH
42513: LD_VAR 0 4
42517: PPUSH
42518: CALL_OW 74
42522: PPUSH
42523: CALL_OW 112
42527: GO 42553
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42529: LD_VAR 0 4
42533: PPUSH
42534: LD_VAR 0 5
42538: PPUSH
42539: LD_VAR 0 4
42543: PPUSH
42544: CALL_OW 74
42548: PPUSH
42549: CALL 43482 0 2
// end ; end ;
42553: GO 42133
42555: POP
42556: POP
// end ;
42557: LD_VAR 0 3
42561: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42562: LD_INT 0
42564: PPUSH
42565: PPUSH
42566: PPUSH
// if not unit or IsInUnit ( unit ) then
42567: LD_VAR 0 1
42571: NOT
42572: PUSH
42573: LD_VAR 0 1
42577: PPUSH
42578: CALL_OW 310
42582: OR
42583: IFFALSE 42587
// exit ;
42585: GO 42678
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42587: LD_ADDR_VAR 0 4
42591: PUSH
42592: LD_VAR 0 1
42596: PPUSH
42597: CALL_OW 250
42601: PPUSH
42602: LD_VAR 0 2
42606: PPUSH
42607: LD_INT 1
42609: PPUSH
42610: CALL_OW 272
42614: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42615: LD_ADDR_VAR 0 5
42619: PUSH
42620: LD_VAR 0 1
42624: PPUSH
42625: CALL_OW 251
42629: PPUSH
42630: LD_VAR 0 2
42634: PPUSH
42635: LD_INT 1
42637: PPUSH
42638: CALL_OW 273
42642: ST_TO_ADDR
// if ValidHex ( x , y ) then
42643: LD_VAR 0 4
42647: PPUSH
42648: LD_VAR 0 5
42652: PPUSH
42653: CALL_OW 488
42657: IFFALSE 42678
// ComTurnXY ( unit , x , y ) ;
42659: LD_VAR 0 1
42663: PPUSH
42664: LD_VAR 0 4
42668: PPUSH
42669: LD_VAR 0 5
42673: PPUSH
42674: CALL_OW 118
// end ;
42678: LD_VAR 0 3
42682: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42683: LD_INT 0
42685: PPUSH
42686: PPUSH
// result := false ;
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: LD_INT 0
42694: ST_TO_ADDR
// if not units then
42695: LD_VAR 0 2
42699: NOT
42700: IFFALSE 42704
// exit ;
42702: GO 42749
// for i in units do
42704: LD_ADDR_VAR 0 4
42708: PUSH
42709: LD_VAR 0 2
42713: PUSH
42714: FOR_IN
42715: IFFALSE 42747
// if See ( side , i ) then
42717: LD_VAR 0 1
42721: PPUSH
42722: LD_VAR 0 4
42726: PPUSH
42727: CALL_OW 292
42731: IFFALSE 42745
// begin result := true ;
42733: LD_ADDR_VAR 0 3
42737: PUSH
42738: LD_INT 1
42740: ST_TO_ADDR
// exit ;
42741: POP
42742: POP
42743: GO 42749
// end ;
42745: GO 42714
42747: POP
42748: POP
// end ;
42749: LD_VAR 0 3
42753: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42754: LD_INT 0
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
// if not unit or not points then
42760: LD_VAR 0 1
42764: NOT
42765: PUSH
42766: LD_VAR 0 2
42770: NOT
42771: OR
42772: IFFALSE 42776
// exit ;
42774: GO 42866
// dist := 99999 ;
42776: LD_ADDR_VAR 0 5
42780: PUSH
42781: LD_INT 99999
42783: ST_TO_ADDR
// for i in points do
42784: LD_ADDR_VAR 0 4
42788: PUSH
42789: LD_VAR 0 2
42793: PUSH
42794: FOR_IN
42795: IFFALSE 42864
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42797: LD_ADDR_VAR 0 6
42801: PUSH
42802: LD_VAR 0 1
42806: PPUSH
42807: LD_VAR 0 4
42811: PUSH
42812: LD_INT 1
42814: ARRAY
42815: PPUSH
42816: LD_VAR 0 4
42820: PUSH
42821: LD_INT 2
42823: ARRAY
42824: PPUSH
42825: CALL_OW 297
42829: ST_TO_ADDR
// if tmpDist < dist then
42830: LD_VAR 0 6
42834: PUSH
42835: LD_VAR 0 5
42839: LESS
42840: IFFALSE 42862
// begin result := i ;
42842: LD_ADDR_VAR 0 3
42846: PUSH
42847: LD_VAR 0 4
42851: ST_TO_ADDR
// dist := tmpDist ;
42852: LD_ADDR_VAR 0 5
42856: PUSH
42857: LD_VAR 0 6
42861: ST_TO_ADDR
// end ; end ;
42862: GO 42794
42864: POP
42865: POP
// end ;
42866: LD_VAR 0 3
42870: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42871: LD_INT 0
42873: PPUSH
// uc_side := side ;
42874: LD_ADDR_OWVAR 20
42878: PUSH
42879: LD_VAR 0 1
42883: ST_TO_ADDR
// uc_nation := 3 ;
42884: LD_ADDR_OWVAR 21
42888: PUSH
42889: LD_INT 3
42891: ST_TO_ADDR
// vc_chassis := 25 ;
42892: LD_ADDR_OWVAR 37
42896: PUSH
42897: LD_INT 25
42899: ST_TO_ADDR
// vc_engine := engine_siberite ;
42900: LD_ADDR_OWVAR 39
42904: PUSH
42905: LD_INT 3
42907: ST_TO_ADDR
// vc_control := control_computer ;
42908: LD_ADDR_OWVAR 38
42912: PUSH
42913: LD_INT 3
42915: ST_TO_ADDR
// vc_weapon := 59 ;
42916: LD_ADDR_OWVAR 40
42920: PUSH
42921: LD_INT 59
42923: ST_TO_ADDR
// result := CreateVehicle ;
42924: LD_ADDR_VAR 0 5
42928: PUSH
42929: CALL_OW 45
42933: ST_TO_ADDR
// SetDir ( result , d ) ;
42934: LD_VAR 0 5
42938: PPUSH
42939: LD_VAR 0 4
42943: PPUSH
42944: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42948: LD_VAR 0 5
42952: PPUSH
42953: LD_VAR 0 2
42957: PPUSH
42958: LD_VAR 0 3
42962: PPUSH
42963: LD_INT 0
42965: PPUSH
42966: CALL_OW 48
// end ;
42970: LD_VAR 0 5
42974: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42975: LD_INT 0
42977: PPUSH
42978: PPUSH
42979: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42980: LD_ADDR_VAR 0 2
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43003: LD_VAR 0 1
43007: NOT
43008: PUSH
43009: LD_VAR 0 1
43013: PPUSH
43014: CALL_OW 264
43018: PUSH
43019: LD_INT 12
43021: PUSH
43022: LD_INT 51
43024: PUSH
43025: LD_INT 32
43027: PUSH
43028: LD_INT 89
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: IN
43037: NOT
43038: OR
43039: IFFALSE 43043
// exit ;
43041: GO 43141
// for i := 1 to 3 do
43043: LD_ADDR_VAR 0 3
43047: PUSH
43048: DOUBLE
43049: LD_INT 1
43051: DEC
43052: ST_TO_ADDR
43053: LD_INT 3
43055: PUSH
43056: FOR_TO
43057: IFFALSE 43139
// begin tmp := GetCargo ( cargo , i ) ;
43059: LD_ADDR_VAR 0 4
43063: PUSH
43064: LD_VAR 0 1
43068: PPUSH
43069: LD_VAR 0 3
43073: PPUSH
43074: CALL_OW 289
43078: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43079: LD_ADDR_VAR 0 2
43083: PUSH
43084: LD_VAR 0 2
43088: PPUSH
43089: LD_VAR 0 3
43093: PPUSH
43094: LD_VAR 0 4
43098: PPUSH
43099: CALL_OW 1
43103: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43104: LD_ADDR_VAR 0 2
43108: PUSH
43109: LD_VAR 0 2
43113: PPUSH
43114: LD_INT 4
43116: PPUSH
43117: LD_VAR 0 2
43121: PUSH
43122: LD_INT 4
43124: ARRAY
43125: PUSH
43126: LD_VAR 0 4
43130: PLUS
43131: PPUSH
43132: CALL_OW 1
43136: ST_TO_ADDR
// end ;
43137: GO 43056
43139: POP
43140: POP
// end ;
43141: LD_VAR 0 2
43145: RET
// export function Length ( array ) ; begin
43146: LD_INT 0
43148: PPUSH
// result := array + 0 ;
43149: LD_ADDR_VAR 0 2
43153: PUSH
43154: LD_VAR 0 1
43158: PUSH
43159: LD_INT 0
43161: PLUS
43162: ST_TO_ADDR
// end ;
43163: LD_VAR 0 2
43167: RET
// export function PrepareArray ( array ) ; begin
43168: LD_INT 0
43170: PPUSH
// result := array diff 0 ;
43171: LD_ADDR_VAR 0 2
43175: PUSH
43176: LD_VAR 0 1
43180: PUSH
43181: LD_INT 0
43183: DIFF
43184: ST_TO_ADDR
// if not result [ 1 ] then
43185: LD_VAR 0 2
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: NOT
43194: IFFALSE 43214
// result := Delete ( result , 1 ) ;
43196: LD_ADDR_VAR 0 2
43200: PUSH
43201: LD_VAR 0 2
43205: PPUSH
43206: LD_INT 1
43208: PPUSH
43209: CALL_OW 3
43213: ST_TO_ADDR
// end ;
43214: LD_VAR 0 2
43218: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43219: LD_INT 0
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
// sibRocketRange := 25 ;
43225: LD_ADDR_VAR 0 6
43229: PUSH
43230: LD_INT 25
43232: ST_TO_ADDR
// result := false ;
43233: LD_ADDR_VAR 0 4
43237: PUSH
43238: LD_INT 0
43240: ST_TO_ADDR
// for i := 0 to 5 do
43241: LD_ADDR_VAR 0 5
43245: PUSH
43246: DOUBLE
43247: LD_INT 0
43249: DEC
43250: ST_TO_ADDR
43251: LD_INT 5
43253: PUSH
43254: FOR_TO
43255: IFFALSE 43322
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43257: LD_VAR 0 1
43261: PPUSH
43262: LD_VAR 0 5
43266: PPUSH
43267: LD_VAR 0 6
43271: PPUSH
43272: CALL_OW 272
43276: PPUSH
43277: LD_VAR 0 2
43281: PPUSH
43282: LD_VAR 0 5
43286: PPUSH
43287: LD_VAR 0 6
43291: PPUSH
43292: CALL_OW 273
43296: PPUSH
43297: LD_VAR 0 3
43301: PPUSH
43302: CALL_OW 309
43306: IFFALSE 43320
// begin result := true ;
43308: LD_ADDR_VAR 0 4
43312: PUSH
43313: LD_INT 1
43315: ST_TO_ADDR
// exit ;
43316: POP
43317: POP
43318: GO 43324
// end ;
43320: GO 43254
43322: POP
43323: POP
// end ;
43324: LD_VAR 0 4
43328: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43329: LD_INT 0
43331: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43332: LD_VAR 0 1
43336: PPUSH
43337: LD_VAR 0 2
43341: PPUSH
43342: LD_INT 0
43344: PPUSH
43345: LD_INT 0
43347: PPUSH
43348: LD_INT 1
43350: PPUSH
43351: LD_INT 0
43353: PPUSH
43354: CALL_OW 587
// end ;
43358: LD_VAR 0 3
43362: RET
// export function CenterOnNow ( unit ) ; begin
43363: LD_INT 0
43365: PPUSH
// result := IsInUnit ( unit ) ;
43366: LD_ADDR_VAR 0 2
43370: PUSH
43371: LD_VAR 0 1
43375: PPUSH
43376: CALL_OW 310
43380: ST_TO_ADDR
// if not result then
43381: LD_VAR 0 2
43385: NOT
43386: IFFALSE 43398
// result := unit ;
43388: LD_ADDR_VAR 0 2
43392: PUSH
43393: LD_VAR 0 1
43397: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43398: LD_VAR 0 1
43402: PPUSH
43403: CALL_OW 87
// end ;
43407: LD_VAR 0 2
43411: RET
// export function ComMoveHex ( unit , hex ) ; begin
43412: LD_INT 0
43414: PPUSH
// if not hex then
43415: LD_VAR 0 2
43419: NOT
43420: IFFALSE 43424
// exit ;
43422: GO 43477
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43424: LD_VAR 0 2
43428: PUSH
43429: LD_INT 1
43431: ARRAY
43432: PPUSH
43433: LD_VAR 0 2
43437: PUSH
43438: LD_INT 2
43440: ARRAY
43441: PPUSH
43442: CALL_OW 428
43446: IFFALSE 43450
// exit ;
43448: GO 43477
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43450: LD_VAR 0 1
43454: PPUSH
43455: LD_VAR 0 2
43459: PUSH
43460: LD_INT 1
43462: ARRAY
43463: PPUSH
43464: LD_VAR 0 2
43468: PUSH
43469: LD_INT 2
43471: ARRAY
43472: PPUSH
43473: CALL_OW 111
// end ;
43477: LD_VAR 0 3
43481: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43482: LD_INT 0
43484: PPUSH
43485: PPUSH
43486: PPUSH
// if not unit or not enemy then
43487: LD_VAR 0 1
43491: NOT
43492: PUSH
43493: LD_VAR 0 2
43497: NOT
43498: OR
43499: IFFALSE 43503
// exit ;
43501: GO 43627
// x := GetX ( enemy ) ;
43503: LD_ADDR_VAR 0 4
43507: PUSH
43508: LD_VAR 0 2
43512: PPUSH
43513: CALL_OW 250
43517: ST_TO_ADDR
// y := GetY ( enemy ) ;
43518: LD_ADDR_VAR 0 5
43522: PUSH
43523: LD_VAR 0 2
43527: PPUSH
43528: CALL_OW 251
43532: ST_TO_ADDR
// if ValidHex ( x , y ) then
43533: LD_VAR 0 4
43537: PPUSH
43538: LD_VAR 0 5
43542: PPUSH
43543: CALL_OW 488
43547: IFFALSE 43627
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
43549: LD_VAR 0 2
43553: PPUSH
43554: CALL_OW 247
43558: PUSH
43559: LD_INT 3
43561: PUSH
43562: LD_INT 2
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: IN
43569: PUSH
43570: LD_VAR 0 1
43574: PPUSH
43575: CALL_OW 255
43579: PPUSH
43580: LD_VAR 0 2
43584: PPUSH
43585: CALL_OW 292
43589: AND
43590: IFFALSE 43608
// ComAttackUnit ( unit , enemy ) else
43592: LD_VAR 0 1
43596: PPUSH
43597: LD_VAR 0 2
43601: PPUSH
43602: CALL_OW 115
43606: GO 43627
// ComAgressiveMove ( unit , x , y ) ;
43608: LD_VAR 0 1
43612: PPUSH
43613: LD_VAR 0 4
43617: PPUSH
43618: LD_VAR 0 5
43622: PPUSH
43623: CALL_OW 114
// end ; end_of_file end_of_file
43627: LD_VAR 0 3
43631: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
43632: LD_VAR 0 1
43636: PPUSH
43637: LD_VAR 0 2
43641: PPUSH
43642: LD_VAR 0 3
43646: PPUSH
43647: LD_VAR 0 4
43651: PPUSH
43652: LD_VAR 0 5
43656: PPUSH
43657: LD_VAR 0 6
43661: PPUSH
43662: CALL 43846 0 6
// end ;
43666: PPOPN 6
43668: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
43669: LD_INT 0
43671: PPUSH
// begin if not units then
43672: LD_VAR 0 1
43676: NOT
43677: IFFALSE 43681
// exit ;
43679: GO 43681
// end ;
43681: PPOPN 7
43683: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
43684: CALL 43750 0 0
// end ; end_of_file
43688: PPOPN 1
43690: END
// export globalGameSaveCounter ; every 0 0$1 do
43691: GO 43693
43693: DISABLE
// begin enable ;
43694: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
43695: LD_STRING updateTimer(
43697: PUSH
43698: LD_OWVAR 1
43702: STR
43703: PUSH
43704: LD_STRING );
43706: STR
43707: PPUSH
43708: CALL_OW 559
// end ;
43712: END
// every 0 0$1 do
43713: GO 43715
43715: DISABLE
// begin globalGameSaveCounter := 0 ;
43716: LD_ADDR_EXP 7
43720: PUSH
43721: LD_INT 0
43723: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
43724: LD_STRING setGameSaveCounter(0)
43726: PPUSH
43727: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
43731: LD_STRING initStreamRollete();
43733: PPUSH
43734: CALL_OW 559
// InitStreamMode ;
43738: CALL 45064 0 0
// DefineStreamItems ( false ) ;
43742: LD_INT 0
43744: PPUSH
43745: CALL 45528 0 1
// end ;
43749: END
// export function SOS_MapStart ( ) ; begin
43750: LD_INT 0
43752: PPUSH
// if streamModeActive then
43753: LD_EXP 8
43757: IFFALSE 43766
// DefineStreamItems ( true ) ;
43759: LD_INT 1
43761: PPUSH
43762: CALL 45528 0 1
// UpdateLuaVariables ( ) ;
43766: CALL 43783 0 0
// UpdateFactoryWaypoints ( ) ;
43770: CALL 58397 0 0
// UpdateWarehouseGatheringPoints ( ) ;
43774: CALL 58654 0 0
// end ;
43778: LD_VAR 0 1
43782: RET
// function UpdateLuaVariables ( ) ; begin
43783: LD_INT 0
43785: PPUSH
// if globalGameSaveCounter then
43786: LD_EXP 7
43790: IFFALSE 43824
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
43792: LD_ADDR_EXP 7
43796: PUSH
43797: LD_EXP 7
43801: PPUSH
43802: CALL 40771 0 1
43806: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
43807: LD_STRING setGameSaveCounter(
43809: PUSH
43810: LD_EXP 7
43814: STR
43815: PUSH
43816: LD_STRING )
43818: STR
43819: PPUSH
43820: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
43824: LD_STRING setGameDifficulty(
43826: PUSH
43827: LD_OWVAR 67
43831: STR
43832: PUSH
43833: LD_STRING )
43835: STR
43836: PPUSH
43837: CALL_OW 559
// end ;
43841: LD_VAR 0 1
43845: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
43846: LD_INT 0
43848: PPUSH
// if p2 = stream_mode then
43849: LD_VAR 0 2
43853: PUSH
43854: LD_INT 100
43856: EQUAL
43857: IFFALSE 44860
// begin if not StreamModeActive then
43859: LD_EXP 8
43863: NOT
43864: IFFALSE 43874
// StreamModeActive := true ;
43866: LD_ADDR_EXP 8
43870: PUSH
43871: LD_INT 1
43873: ST_TO_ADDR
// if p3 = 0 then
43874: LD_VAR 0 3
43878: PUSH
43879: LD_INT 0
43881: EQUAL
43882: IFFALSE 43888
// InitStreamMode ;
43884: CALL 45064 0 0
// if p3 = 1 then
43888: LD_VAR 0 3
43892: PUSH
43893: LD_INT 1
43895: EQUAL
43896: IFFALSE 43906
// sRocket := true ;
43898: LD_ADDR_EXP 13
43902: PUSH
43903: LD_INT 1
43905: ST_TO_ADDR
// if p3 = 2 then
43906: LD_VAR 0 3
43910: PUSH
43911: LD_INT 2
43913: EQUAL
43914: IFFALSE 43924
// sSpeed := true ;
43916: LD_ADDR_EXP 12
43920: PUSH
43921: LD_INT 1
43923: ST_TO_ADDR
// if p3 = 3 then
43924: LD_VAR 0 3
43928: PUSH
43929: LD_INT 3
43931: EQUAL
43932: IFFALSE 43942
// sEngine := true ;
43934: LD_ADDR_EXP 14
43938: PUSH
43939: LD_INT 1
43941: ST_TO_ADDR
// if p3 = 4 then
43942: LD_VAR 0 3
43946: PUSH
43947: LD_INT 4
43949: EQUAL
43950: IFFALSE 43960
// sSpec := true ;
43952: LD_ADDR_EXP 11
43956: PUSH
43957: LD_INT 1
43959: ST_TO_ADDR
// if p3 = 5 then
43960: LD_VAR 0 3
43964: PUSH
43965: LD_INT 5
43967: EQUAL
43968: IFFALSE 43978
// sLevel := true ;
43970: LD_ADDR_EXP 15
43974: PUSH
43975: LD_INT 1
43977: ST_TO_ADDR
// if p3 = 6 then
43978: LD_VAR 0 3
43982: PUSH
43983: LD_INT 6
43985: EQUAL
43986: IFFALSE 43996
// sArmoury := true ;
43988: LD_ADDR_EXP 16
43992: PUSH
43993: LD_INT 1
43995: ST_TO_ADDR
// if p3 = 7 then
43996: LD_VAR 0 3
44000: PUSH
44001: LD_INT 7
44003: EQUAL
44004: IFFALSE 44014
// sRadar := true ;
44006: LD_ADDR_EXP 17
44010: PUSH
44011: LD_INT 1
44013: ST_TO_ADDR
// if p3 = 8 then
44014: LD_VAR 0 3
44018: PUSH
44019: LD_INT 8
44021: EQUAL
44022: IFFALSE 44032
// sBunker := true ;
44024: LD_ADDR_EXP 18
44028: PUSH
44029: LD_INT 1
44031: ST_TO_ADDR
// if p3 = 9 then
44032: LD_VAR 0 3
44036: PUSH
44037: LD_INT 9
44039: EQUAL
44040: IFFALSE 44050
// sHack := true ;
44042: LD_ADDR_EXP 19
44046: PUSH
44047: LD_INT 1
44049: ST_TO_ADDR
// if p3 = 10 then
44050: LD_VAR 0 3
44054: PUSH
44055: LD_INT 10
44057: EQUAL
44058: IFFALSE 44068
// sFire := true ;
44060: LD_ADDR_EXP 20
44064: PUSH
44065: LD_INT 1
44067: ST_TO_ADDR
// if p3 = 11 then
44068: LD_VAR 0 3
44072: PUSH
44073: LD_INT 11
44075: EQUAL
44076: IFFALSE 44086
// sRefresh := true ;
44078: LD_ADDR_EXP 21
44082: PUSH
44083: LD_INT 1
44085: ST_TO_ADDR
// if p3 = 12 then
44086: LD_VAR 0 3
44090: PUSH
44091: LD_INT 12
44093: EQUAL
44094: IFFALSE 44104
// sExp := true ;
44096: LD_ADDR_EXP 22
44100: PUSH
44101: LD_INT 1
44103: ST_TO_ADDR
// if p3 = 13 then
44104: LD_VAR 0 3
44108: PUSH
44109: LD_INT 13
44111: EQUAL
44112: IFFALSE 44122
// sDepot := true ;
44114: LD_ADDR_EXP 23
44118: PUSH
44119: LD_INT 1
44121: ST_TO_ADDR
// if p3 = 14 then
44122: LD_VAR 0 3
44126: PUSH
44127: LD_INT 14
44129: EQUAL
44130: IFFALSE 44140
// sFlag := true ;
44132: LD_ADDR_EXP 24
44136: PUSH
44137: LD_INT 1
44139: ST_TO_ADDR
// if p3 = 15 then
44140: LD_VAR 0 3
44144: PUSH
44145: LD_INT 15
44147: EQUAL
44148: IFFALSE 44158
// sKamikadze := true ;
44150: LD_ADDR_EXP 32
44154: PUSH
44155: LD_INT 1
44157: ST_TO_ADDR
// if p3 = 16 then
44158: LD_VAR 0 3
44162: PUSH
44163: LD_INT 16
44165: EQUAL
44166: IFFALSE 44176
// sTroll := true ;
44168: LD_ADDR_EXP 33
44172: PUSH
44173: LD_INT 1
44175: ST_TO_ADDR
// if p3 = 17 then
44176: LD_VAR 0 3
44180: PUSH
44181: LD_INT 17
44183: EQUAL
44184: IFFALSE 44194
// sSlow := true ;
44186: LD_ADDR_EXP 34
44190: PUSH
44191: LD_INT 1
44193: ST_TO_ADDR
// if p3 = 18 then
44194: LD_VAR 0 3
44198: PUSH
44199: LD_INT 18
44201: EQUAL
44202: IFFALSE 44212
// sLack := true ;
44204: LD_ADDR_EXP 35
44208: PUSH
44209: LD_INT 1
44211: ST_TO_ADDR
// if p3 = 19 then
44212: LD_VAR 0 3
44216: PUSH
44217: LD_INT 19
44219: EQUAL
44220: IFFALSE 44230
// sTank := true ;
44222: LD_ADDR_EXP 37
44226: PUSH
44227: LD_INT 1
44229: ST_TO_ADDR
// if p3 = 20 then
44230: LD_VAR 0 3
44234: PUSH
44235: LD_INT 20
44237: EQUAL
44238: IFFALSE 44248
// sRemote := true ;
44240: LD_ADDR_EXP 38
44244: PUSH
44245: LD_INT 1
44247: ST_TO_ADDR
// if p3 = 21 then
44248: LD_VAR 0 3
44252: PUSH
44253: LD_INT 21
44255: EQUAL
44256: IFFALSE 44266
// sPowell := true ;
44258: LD_ADDR_EXP 39
44262: PUSH
44263: LD_INT 1
44265: ST_TO_ADDR
// if p3 = 22 then
44266: LD_VAR 0 3
44270: PUSH
44271: LD_INT 22
44273: EQUAL
44274: IFFALSE 44284
// sTeleport := true ;
44276: LD_ADDR_EXP 42
44280: PUSH
44281: LD_INT 1
44283: ST_TO_ADDR
// if p3 = 23 then
44284: LD_VAR 0 3
44288: PUSH
44289: LD_INT 23
44291: EQUAL
44292: IFFALSE 44302
// sOilTower := true ;
44294: LD_ADDR_EXP 44
44298: PUSH
44299: LD_INT 1
44301: ST_TO_ADDR
// if p3 = 24 then
44302: LD_VAR 0 3
44306: PUSH
44307: LD_INT 24
44309: EQUAL
44310: IFFALSE 44320
// sShovel := true ;
44312: LD_ADDR_EXP 45
44316: PUSH
44317: LD_INT 1
44319: ST_TO_ADDR
// if p3 = 25 then
44320: LD_VAR 0 3
44324: PUSH
44325: LD_INT 25
44327: EQUAL
44328: IFFALSE 44338
// sSheik := true ;
44330: LD_ADDR_EXP 46
44334: PUSH
44335: LD_INT 1
44337: ST_TO_ADDR
// if p3 = 26 then
44338: LD_VAR 0 3
44342: PUSH
44343: LD_INT 26
44345: EQUAL
44346: IFFALSE 44356
// sEarthquake := true ;
44348: LD_ADDR_EXP 48
44352: PUSH
44353: LD_INT 1
44355: ST_TO_ADDR
// if p3 = 27 then
44356: LD_VAR 0 3
44360: PUSH
44361: LD_INT 27
44363: EQUAL
44364: IFFALSE 44374
// sAI := true ;
44366: LD_ADDR_EXP 49
44370: PUSH
44371: LD_INT 1
44373: ST_TO_ADDR
// if p3 = 28 then
44374: LD_VAR 0 3
44378: PUSH
44379: LD_INT 28
44381: EQUAL
44382: IFFALSE 44392
// sCargo := true ;
44384: LD_ADDR_EXP 52
44388: PUSH
44389: LD_INT 1
44391: ST_TO_ADDR
// if p3 = 29 then
44392: LD_VAR 0 3
44396: PUSH
44397: LD_INT 29
44399: EQUAL
44400: IFFALSE 44410
// sDLaser := true ;
44402: LD_ADDR_EXP 53
44406: PUSH
44407: LD_INT 1
44409: ST_TO_ADDR
// if p3 = 30 then
44410: LD_VAR 0 3
44414: PUSH
44415: LD_INT 30
44417: EQUAL
44418: IFFALSE 44428
// sExchange := true ;
44420: LD_ADDR_EXP 54
44424: PUSH
44425: LD_INT 1
44427: ST_TO_ADDR
// if p3 = 31 then
44428: LD_VAR 0 3
44432: PUSH
44433: LD_INT 31
44435: EQUAL
44436: IFFALSE 44446
// sFac := true ;
44438: LD_ADDR_EXP 55
44442: PUSH
44443: LD_INT 1
44445: ST_TO_ADDR
// if p3 = 32 then
44446: LD_VAR 0 3
44450: PUSH
44451: LD_INT 32
44453: EQUAL
44454: IFFALSE 44464
// sPower := true ;
44456: LD_ADDR_EXP 56
44460: PUSH
44461: LD_INT 1
44463: ST_TO_ADDR
// if p3 = 33 then
44464: LD_VAR 0 3
44468: PUSH
44469: LD_INT 33
44471: EQUAL
44472: IFFALSE 44482
// sRandom := true ;
44474: LD_ADDR_EXP 57
44478: PUSH
44479: LD_INT 1
44481: ST_TO_ADDR
// if p3 = 34 then
44482: LD_VAR 0 3
44486: PUSH
44487: LD_INT 34
44489: EQUAL
44490: IFFALSE 44500
// sShield := true ;
44492: LD_ADDR_EXP 58
44496: PUSH
44497: LD_INT 1
44499: ST_TO_ADDR
// if p3 = 35 then
44500: LD_VAR 0 3
44504: PUSH
44505: LD_INT 35
44507: EQUAL
44508: IFFALSE 44518
// sTime := true ;
44510: LD_ADDR_EXP 59
44514: PUSH
44515: LD_INT 1
44517: ST_TO_ADDR
// if p3 = 36 then
44518: LD_VAR 0 3
44522: PUSH
44523: LD_INT 36
44525: EQUAL
44526: IFFALSE 44536
// sTools := true ;
44528: LD_ADDR_EXP 60
44532: PUSH
44533: LD_INT 1
44535: ST_TO_ADDR
// if p3 = 101 then
44536: LD_VAR 0 3
44540: PUSH
44541: LD_INT 101
44543: EQUAL
44544: IFFALSE 44554
// sSold := true ;
44546: LD_ADDR_EXP 25
44550: PUSH
44551: LD_INT 1
44553: ST_TO_ADDR
// if p3 = 102 then
44554: LD_VAR 0 3
44558: PUSH
44559: LD_INT 102
44561: EQUAL
44562: IFFALSE 44572
// sDiff := true ;
44564: LD_ADDR_EXP 26
44568: PUSH
44569: LD_INT 1
44571: ST_TO_ADDR
// if p3 = 103 then
44572: LD_VAR 0 3
44576: PUSH
44577: LD_INT 103
44579: EQUAL
44580: IFFALSE 44590
// sFog := true ;
44582: LD_ADDR_EXP 29
44586: PUSH
44587: LD_INT 1
44589: ST_TO_ADDR
// if p3 = 104 then
44590: LD_VAR 0 3
44594: PUSH
44595: LD_INT 104
44597: EQUAL
44598: IFFALSE 44608
// sReset := true ;
44600: LD_ADDR_EXP 30
44604: PUSH
44605: LD_INT 1
44607: ST_TO_ADDR
// if p3 = 105 then
44608: LD_VAR 0 3
44612: PUSH
44613: LD_INT 105
44615: EQUAL
44616: IFFALSE 44626
// sSun := true ;
44618: LD_ADDR_EXP 31
44622: PUSH
44623: LD_INT 1
44625: ST_TO_ADDR
// if p3 = 106 then
44626: LD_VAR 0 3
44630: PUSH
44631: LD_INT 106
44633: EQUAL
44634: IFFALSE 44644
// sTiger := true ;
44636: LD_ADDR_EXP 27
44640: PUSH
44641: LD_INT 1
44643: ST_TO_ADDR
// if p3 = 107 then
44644: LD_VAR 0 3
44648: PUSH
44649: LD_INT 107
44651: EQUAL
44652: IFFALSE 44662
// sBomb := true ;
44654: LD_ADDR_EXP 28
44658: PUSH
44659: LD_INT 1
44661: ST_TO_ADDR
// if p3 = 108 then
44662: LD_VAR 0 3
44666: PUSH
44667: LD_INT 108
44669: EQUAL
44670: IFFALSE 44680
// sWound := true ;
44672: LD_ADDR_EXP 36
44676: PUSH
44677: LD_INT 1
44679: ST_TO_ADDR
// if p3 = 109 then
44680: LD_VAR 0 3
44684: PUSH
44685: LD_INT 109
44687: EQUAL
44688: IFFALSE 44698
// sBetray := true ;
44690: LD_ADDR_EXP 40
44694: PUSH
44695: LD_INT 1
44697: ST_TO_ADDR
// if p3 = 110 then
44698: LD_VAR 0 3
44702: PUSH
44703: LD_INT 110
44705: EQUAL
44706: IFFALSE 44716
// sContamin := true ;
44708: LD_ADDR_EXP 41
44712: PUSH
44713: LD_INT 1
44715: ST_TO_ADDR
// if p3 = 111 then
44716: LD_VAR 0 3
44720: PUSH
44721: LD_INT 111
44723: EQUAL
44724: IFFALSE 44734
// sOil := true ;
44726: LD_ADDR_EXP 43
44730: PUSH
44731: LD_INT 1
44733: ST_TO_ADDR
// if p3 = 112 then
44734: LD_VAR 0 3
44738: PUSH
44739: LD_INT 112
44741: EQUAL
44742: IFFALSE 44752
// sStu := true ;
44744: LD_ADDR_EXP 47
44748: PUSH
44749: LD_INT 1
44751: ST_TO_ADDR
// if p3 = 113 then
44752: LD_VAR 0 3
44756: PUSH
44757: LD_INT 113
44759: EQUAL
44760: IFFALSE 44770
// sBazooka := true ;
44762: LD_ADDR_EXP 50
44766: PUSH
44767: LD_INT 1
44769: ST_TO_ADDR
// if p3 = 114 then
44770: LD_VAR 0 3
44774: PUSH
44775: LD_INT 114
44777: EQUAL
44778: IFFALSE 44788
// sMortar := true ;
44780: LD_ADDR_EXP 51
44784: PUSH
44785: LD_INT 1
44787: ST_TO_ADDR
// if p3 = 115 then
44788: LD_VAR 0 3
44792: PUSH
44793: LD_INT 115
44795: EQUAL
44796: IFFALSE 44806
// sRanger := true ;
44798: LD_ADDR_EXP 61
44802: PUSH
44803: LD_INT 1
44805: ST_TO_ADDR
// if p3 = 116 then
44806: LD_VAR 0 3
44810: PUSH
44811: LD_INT 116
44813: EQUAL
44814: IFFALSE 44824
// sComputer := true ;
44816: LD_ADDR_EXP 62
44820: PUSH
44821: LD_INT 1
44823: ST_TO_ADDR
// if p3 = 117 then
44824: LD_VAR 0 3
44828: PUSH
44829: LD_INT 117
44831: EQUAL
44832: IFFALSE 44842
// s30 := true ;
44834: LD_ADDR_EXP 63
44838: PUSH
44839: LD_INT 1
44841: ST_TO_ADDR
// if p3 = 118 then
44842: LD_VAR 0 3
44846: PUSH
44847: LD_INT 118
44849: EQUAL
44850: IFFALSE 44860
// s60 := true ;
44852: LD_ADDR_EXP 64
44856: PUSH
44857: LD_INT 1
44859: ST_TO_ADDR
// end ; if p2 = hack_mode then
44860: LD_VAR 0 2
44864: PUSH
44865: LD_INT 101
44867: EQUAL
44868: IFFALSE 44996
// begin case p3 of 1 :
44870: LD_VAR 0 3
44874: PUSH
44875: LD_INT 1
44877: DOUBLE
44878: EQUAL
44879: IFTRUE 44883
44881: GO 44890
44883: POP
// hHackUnlimitedResources ; 2 :
44884: CALL 57143 0 0
44888: GO 44996
44890: LD_INT 2
44892: DOUBLE
44893: EQUAL
44894: IFTRUE 44898
44896: GO 44905
44898: POP
// hHackSetLevel10 ; 3 :
44899: CALL 57276 0 0
44903: GO 44996
44905: LD_INT 3
44907: DOUBLE
44908: EQUAL
44909: IFTRUE 44913
44911: GO 44920
44913: POP
// hHackSetLevel10YourUnits ; 4 :
44914: CALL 57361 0 0
44918: GO 44996
44920: LD_INT 4
44922: DOUBLE
44923: EQUAL
44924: IFTRUE 44928
44926: GO 44935
44928: POP
// hHackInvincible ; 5 :
44929: CALL 57809 0 0
44933: GO 44996
44935: LD_INT 5
44937: DOUBLE
44938: EQUAL
44939: IFTRUE 44943
44941: GO 44950
44943: POP
// hHackInvisible ; 6 :
44944: CALL 57920 0 0
44948: GO 44996
44950: LD_INT 6
44952: DOUBLE
44953: EQUAL
44954: IFTRUE 44958
44956: GO 44965
44958: POP
// hHackChangeYourSide ; 7 :
44959: CALL 57977 0 0
44963: GO 44996
44965: LD_INT 7
44967: DOUBLE
44968: EQUAL
44969: IFTRUE 44973
44971: GO 44980
44973: POP
// hHackChangeUnitSide ; 8 :
44974: CALL 58019 0 0
44978: GO 44996
44980: LD_INT 8
44982: DOUBLE
44983: EQUAL
44984: IFTRUE 44988
44986: GO 44995
44988: POP
// hHackFog ; end ;
44989: CALL 58120 0 0
44993: GO 44996
44995: POP
// end ; if p2 = game_save_mode then
44996: LD_VAR 0 2
45000: PUSH
45001: LD_INT 102
45003: EQUAL
45004: IFFALSE 45059
// begin if p3 = 1 then
45006: LD_VAR 0 3
45010: PUSH
45011: LD_INT 1
45013: EQUAL
45014: IFFALSE 45026
// globalGameSaveCounter := p4 ;
45016: LD_ADDR_EXP 7
45020: PUSH
45021: LD_VAR 0 4
45025: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
45026: LD_VAR 0 3
45030: PUSH
45031: LD_INT 2
45033: EQUAL
45034: PUSH
45035: LD_EXP 7
45039: AND
45040: IFFALSE 45059
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
45042: LD_STRING setGameSaveCounter(
45044: PUSH
45045: LD_EXP 7
45049: STR
45050: PUSH
45051: LD_STRING )
45053: STR
45054: PPUSH
45055: CALL_OW 559
// end ; end ;
45059: LD_VAR 0 7
45063: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
45064: LD_INT 0
45066: PPUSH
// streamModeActive := false ;
45067: LD_ADDR_EXP 8
45071: PUSH
45072: LD_INT 0
45074: ST_TO_ADDR
// normalCounter := 36 ;
45075: LD_ADDR_EXP 9
45079: PUSH
45080: LD_INT 36
45082: ST_TO_ADDR
// hardcoreCounter := 18 ;
45083: LD_ADDR_EXP 10
45087: PUSH
45088: LD_INT 18
45090: ST_TO_ADDR
// sRocket := false ;
45091: LD_ADDR_EXP 13
45095: PUSH
45096: LD_INT 0
45098: ST_TO_ADDR
// sSpeed := false ;
45099: LD_ADDR_EXP 12
45103: PUSH
45104: LD_INT 0
45106: ST_TO_ADDR
// sEngine := false ;
45107: LD_ADDR_EXP 14
45111: PUSH
45112: LD_INT 0
45114: ST_TO_ADDR
// sSpec := false ;
45115: LD_ADDR_EXP 11
45119: PUSH
45120: LD_INT 0
45122: ST_TO_ADDR
// sLevel := false ;
45123: LD_ADDR_EXP 15
45127: PUSH
45128: LD_INT 0
45130: ST_TO_ADDR
// sArmoury := false ;
45131: LD_ADDR_EXP 16
45135: PUSH
45136: LD_INT 0
45138: ST_TO_ADDR
// sRadar := false ;
45139: LD_ADDR_EXP 17
45143: PUSH
45144: LD_INT 0
45146: ST_TO_ADDR
// sBunker := false ;
45147: LD_ADDR_EXP 18
45151: PUSH
45152: LD_INT 0
45154: ST_TO_ADDR
// sHack := false ;
45155: LD_ADDR_EXP 19
45159: PUSH
45160: LD_INT 0
45162: ST_TO_ADDR
// sFire := false ;
45163: LD_ADDR_EXP 20
45167: PUSH
45168: LD_INT 0
45170: ST_TO_ADDR
// sRefresh := false ;
45171: LD_ADDR_EXP 21
45175: PUSH
45176: LD_INT 0
45178: ST_TO_ADDR
// sExp := false ;
45179: LD_ADDR_EXP 22
45183: PUSH
45184: LD_INT 0
45186: ST_TO_ADDR
// sDepot := false ;
45187: LD_ADDR_EXP 23
45191: PUSH
45192: LD_INT 0
45194: ST_TO_ADDR
// sFlag := false ;
45195: LD_ADDR_EXP 24
45199: PUSH
45200: LD_INT 0
45202: ST_TO_ADDR
// sKamikadze := false ;
45203: LD_ADDR_EXP 32
45207: PUSH
45208: LD_INT 0
45210: ST_TO_ADDR
// sTroll := false ;
45211: LD_ADDR_EXP 33
45215: PUSH
45216: LD_INT 0
45218: ST_TO_ADDR
// sSlow := false ;
45219: LD_ADDR_EXP 34
45223: PUSH
45224: LD_INT 0
45226: ST_TO_ADDR
// sLack := false ;
45227: LD_ADDR_EXP 35
45231: PUSH
45232: LD_INT 0
45234: ST_TO_ADDR
// sTank := false ;
45235: LD_ADDR_EXP 37
45239: PUSH
45240: LD_INT 0
45242: ST_TO_ADDR
// sRemote := false ;
45243: LD_ADDR_EXP 38
45247: PUSH
45248: LD_INT 0
45250: ST_TO_ADDR
// sPowell := false ;
45251: LD_ADDR_EXP 39
45255: PUSH
45256: LD_INT 0
45258: ST_TO_ADDR
// sTeleport := false ;
45259: LD_ADDR_EXP 42
45263: PUSH
45264: LD_INT 0
45266: ST_TO_ADDR
// sOilTower := false ;
45267: LD_ADDR_EXP 44
45271: PUSH
45272: LD_INT 0
45274: ST_TO_ADDR
// sShovel := false ;
45275: LD_ADDR_EXP 45
45279: PUSH
45280: LD_INT 0
45282: ST_TO_ADDR
// sSheik := false ;
45283: LD_ADDR_EXP 46
45287: PUSH
45288: LD_INT 0
45290: ST_TO_ADDR
// sEarthquake := false ;
45291: LD_ADDR_EXP 48
45295: PUSH
45296: LD_INT 0
45298: ST_TO_ADDR
// sAI := false ;
45299: LD_ADDR_EXP 49
45303: PUSH
45304: LD_INT 0
45306: ST_TO_ADDR
// sCargo := false ;
45307: LD_ADDR_EXP 52
45311: PUSH
45312: LD_INT 0
45314: ST_TO_ADDR
// sDLaser := false ;
45315: LD_ADDR_EXP 53
45319: PUSH
45320: LD_INT 0
45322: ST_TO_ADDR
// sExchange := false ;
45323: LD_ADDR_EXP 54
45327: PUSH
45328: LD_INT 0
45330: ST_TO_ADDR
// sFac := false ;
45331: LD_ADDR_EXP 55
45335: PUSH
45336: LD_INT 0
45338: ST_TO_ADDR
// sPower := false ;
45339: LD_ADDR_EXP 56
45343: PUSH
45344: LD_INT 0
45346: ST_TO_ADDR
// sRandom := false ;
45347: LD_ADDR_EXP 57
45351: PUSH
45352: LD_INT 0
45354: ST_TO_ADDR
// sShield := false ;
45355: LD_ADDR_EXP 58
45359: PUSH
45360: LD_INT 0
45362: ST_TO_ADDR
// sTime := false ;
45363: LD_ADDR_EXP 59
45367: PUSH
45368: LD_INT 0
45370: ST_TO_ADDR
// sTools := false ;
45371: LD_ADDR_EXP 60
45375: PUSH
45376: LD_INT 0
45378: ST_TO_ADDR
// sSold := false ;
45379: LD_ADDR_EXP 25
45383: PUSH
45384: LD_INT 0
45386: ST_TO_ADDR
// sDiff := false ;
45387: LD_ADDR_EXP 26
45391: PUSH
45392: LD_INT 0
45394: ST_TO_ADDR
// sFog := false ;
45395: LD_ADDR_EXP 29
45399: PUSH
45400: LD_INT 0
45402: ST_TO_ADDR
// sReset := false ;
45403: LD_ADDR_EXP 30
45407: PUSH
45408: LD_INT 0
45410: ST_TO_ADDR
// sSun := false ;
45411: LD_ADDR_EXP 31
45415: PUSH
45416: LD_INT 0
45418: ST_TO_ADDR
// sTiger := false ;
45419: LD_ADDR_EXP 27
45423: PUSH
45424: LD_INT 0
45426: ST_TO_ADDR
// sBomb := false ;
45427: LD_ADDR_EXP 28
45431: PUSH
45432: LD_INT 0
45434: ST_TO_ADDR
// sWound := false ;
45435: LD_ADDR_EXP 36
45439: PUSH
45440: LD_INT 0
45442: ST_TO_ADDR
// sBetray := false ;
45443: LD_ADDR_EXP 40
45447: PUSH
45448: LD_INT 0
45450: ST_TO_ADDR
// sContamin := false ;
45451: LD_ADDR_EXP 41
45455: PUSH
45456: LD_INT 0
45458: ST_TO_ADDR
// sOil := false ;
45459: LD_ADDR_EXP 43
45463: PUSH
45464: LD_INT 0
45466: ST_TO_ADDR
// sStu := false ;
45467: LD_ADDR_EXP 47
45471: PUSH
45472: LD_INT 0
45474: ST_TO_ADDR
// sBazooka := false ;
45475: LD_ADDR_EXP 50
45479: PUSH
45480: LD_INT 0
45482: ST_TO_ADDR
// sMortar := false ;
45483: LD_ADDR_EXP 51
45487: PUSH
45488: LD_INT 0
45490: ST_TO_ADDR
// sRanger := false ;
45491: LD_ADDR_EXP 61
45495: PUSH
45496: LD_INT 0
45498: ST_TO_ADDR
// sComputer := false ;
45499: LD_ADDR_EXP 62
45503: PUSH
45504: LD_INT 0
45506: ST_TO_ADDR
// s30 := false ;
45507: LD_ADDR_EXP 63
45511: PUSH
45512: LD_INT 0
45514: ST_TO_ADDR
// s60 := false ;
45515: LD_ADDR_EXP 64
45519: PUSH
45520: LD_INT 0
45522: ST_TO_ADDR
// end ;
45523: LD_VAR 0 1
45527: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
45528: LD_INT 0
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
// result := [ ] ;
45537: LD_ADDR_VAR 0 2
45541: PUSH
45542: EMPTY
45543: ST_TO_ADDR
// if campaign_id = 1 then
45544: LD_OWVAR 69
45548: PUSH
45549: LD_INT 1
45551: EQUAL
45552: IFFALSE 48718
// begin case mission_number of 1 :
45554: LD_OWVAR 70
45558: PUSH
45559: LD_INT 1
45561: DOUBLE
45562: EQUAL
45563: IFTRUE 45567
45565: GO 45643
45567: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
45568: LD_ADDR_VAR 0 2
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 4
45578: PUSH
45579: LD_INT 11
45581: PUSH
45582: LD_INT 12
45584: PUSH
45585: LD_INT 15
45587: PUSH
45588: LD_INT 16
45590: PUSH
45591: LD_INT 22
45593: PUSH
45594: LD_INT 23
45596: PUSH
45597: LD_INT 26
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 101
45613: PUSH
45614: LD_INT 102
45616: PUSH
45617: LD_INT 106
45619: PUSH
45620: LD_INT 116
45622: PUSH
45623: LD_INT 117
45625: PUSH
45626: LD_INT 118
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: ST_TO_ADDR
45641: GO 48716
45643: LD_INT 2
45645: DOUBLE
45646: EQUAL
45647: IFTRUE 45651
45649: GO 45735
45651: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
45652: LD_ADDR_VAR 0 2
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 4
45662: PUSH
45663: LD_INT 11
45665: PUSH
45666: LD_INT 12
45668: PUSH
45669: LD_INT 15
45671: PUSH
45672: LD_INT 16
45674: PUSH
45675: LD_INT 22
45677: PUSH
45678: LD_INT 23
45680: PUSH
45681: LD_INT 26
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 101
45697: PUSH
45698: LD_INT 102
45700: PUSH
45701: LD_INT 105
45703: PUSH
45704: LD_INT 106
45706: PUSH
45707: LD_INT 108
45709: PUSH
45710: LD_INT 116
45712: PUSH
45713: LD_INT 117
45715: PUSH
45716: LD_INT 118
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: ST_TO_ADDR
45733: GO 48716
45735: LD_INT 3
45737: DOUBLE
45738: EQUAL
45739: IFTRUE 45743
45741: GO 45831
45743: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
45744: LD_ADDR_VAR 0 2
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 4
45754: PUSH
45755: LD_INT 5
45757: PUSH
45758: LD_INT 11
45760: PUSH
45761: LD_INT 12
45763: PUSH
45764: LD_INT 15
45766: PUSH
45767: LD_INT 16
45769: PUSH
45770: LD_INT 22
45772: PUSH
45773: LD_INT 26
45775: PUSH
45776: LD_INT 36
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 101
45793: PUSH
45794: LD_INT 102
45796: PUSH
45797: LD_INT 105
45799: PUSH
45800: LD_INT 106
45802: PUSH
45803: LD_INT 108
45805: PUSH
45806: LD_INT 116
45808: PUSH
45809: LD_INT 117
45811: PUSH
45812: LD_INT 118
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: ST_TO_ADDR
45829: GO 48716
45831: LD_INT 4
45833: DOUBLE
45834: EQUAL
45835: IFTRUE 45839
45837: GO 45935
45839: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
45840: LD_ADDR_VAR 0 2
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 4
45850: PUSH
45851: LD_INT 5
45853: PUSH
45854: LD_INT 8
45856: PUSH
45857: LD_INT 11
45859: PUSH
45860: LD_INT 12
45862: PUSH
45863: LD_INT 15
45865: PUSH
45866: LD_INT 16
45868: PUSH
45869: LD_INT 22
45871: PUSH
45872: LD_INT 23
45874: PUSH
45875: LD_INT 26
45877: PUSH
45878: LD_INT 36
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 101
45897: PUSH
45898: LD_INT 102
45900: PUSH
45901: LD_INT 105
45903: PUSH
45904: LD_INT 106
45906: PUSH
45907: LD_INT 108
45909: PUSH
45910: LD_INT 116
45912: PUSH
45913: LD_INT 117
45915: PUSH
45916: LD_INT 118
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: ST_TO_ADDR
45933: GO 48716
45935: LD_INT 5
45937: DOUBLE
45938: EQUAL
45939: IFTRUE 45943
45941: GO 46055
45943: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
45944: LD_ADDR_VAR 0 2
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 4
45954: PUSH
45955: LD_INT 5
45957: PUSH
45958: LD_INT 6
45960: PUSH
45961: LD_INT 8
45963: PUSH
45964: LD_INT 11
45966: PUSH
45967: LD_INT 12
45969: PUSH
45970: LD_INT 15
45972: PUSH
45973: LD_INT 16
45975: PUSH
45976: LD_INT 22
45978: PUSH
45979: LD_INT 23
45981: PUSH
45982: LD_INT 25
45984: PUSH
45985: LD_INT 26
45987: PUSH
45988: LD_INT 36
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 101
46009: PUSH
46010: LD_INT 102
46012: PUSH
46013: LD_INT 105
46015: PUSH
46016: LD_INT 106
46018: PUSH
46019: LD_INT 108
46021: PUSH
46022: LD_INT 109
46024: PUSH
46025: LD_INT 112
46027: PUSH
46028: LD_INT 116
46030: PUSH
46031: LD_INT 117
46033: PUSH
46034: LD_INT 118
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: ST_TO_ADDR
46053: GO 48716
46055: LD_INT 6
46057: DOUBLE
46058: EQUAL
46059: IFTRUE 46063
46061: GO 46195
46063: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
46064: LD_ADDR_VAR 0 2
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: LD_INT 4
46074: PUSH
46075: LD_INT 5
46077: PUSH
46078: LD_INT 6
46080: PUSH
46081: LD_INT 8
46083: PUSH
46084: LD_INT 11
46086: PUSH
46087: LD_INT 12
46089: PUSH
46090: LD_INT 15
46092: PUSH
46093: LD_INT 16
46095: PUSH
46096: LD_INT 20
46098: PUSH
46099: LD_INT 21
46101: PUSH
46102: LD_INT 22
46104: PUSH
46105: LD_INT 23
46107: PUSH
46108: LD_INT 25
46110: PUSH
46111: LD_INT 26
46113: PUSH
46114: LD_INT 30
46116: PUSH
46117: LD_INT 31
46119: PUSH
46120: LD_INT 32
46122: PUSH
46123: LD_INT 36
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 101
46149: PUSH
46150: LD_INT 102
46152: PUSH
46153: LD_INT 105
46155: PUSH
46156: LD_INT 106
46158: PUSH
46159: LD_INT 108
46161: PUSH
46162: LD_INT 109
46164: PUSH
46165: LD_INT 112
46167: PUSH
46168: LD_INT 116
46170: PUSH
46171: LD_INT 117
46173: PUSH
46174: LD_INT 118
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: ST_TO_ADDR
46193: GO 48716
46195: LD_INT 7
46197: DOUBLE
46198: EQUAL
46199: IFTRUE 46203
46201: GO 46315
46203: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
46204: LD_ADDR_VAR 0 2
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: LD_INT 4
46214: PUSH
46215: LD_INT 5
46217: PUSH
46218: LD_INT 7
46220: PUSH
46221: LD_INT 11
46223: PUSH
46224: LD_INT 12
46226: PUSH
46227: LD_INT 15
46229: PUSH
46230: LD_INT 16
46232: PUSH
46233: LD_INT 20
46235: PUSH
46236: LD_INT 21
46238: PUSH
46239: LD_INT 22
46241: PUSH
46242: LD_INT 23
46244: PUSH
46245: LD_INT 25
46247: PUSH
46248: LD_INT 26
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 101
46269: PUSH
46270: LD_INT 102
46272: PUSH
46273: LD_INT 103
46275: PUSH
46276: LD_INT 105
46278: PUSH
46279: LD_INT 106
46281: PUSH
46282: LD_INT 108
46284: PUSH
46285: LD_INT 112
46287: PUSH
46288: LD_INT 116
46290: PUSH
46291: LD_INT 117
46293: PUSH
46294: LD_INT 118
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: ST_TO_ADDR
46313: GO 48716
46315: LD_INT 8
46317: DOUBLE
46318: EQUAL
46319: IFTRUE 46323
46321: GO 46463
46323: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
46324: LD_ADDR_VAR 0 2
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: LD_INT 4
46334: PUSH
46335: LD_INT 5
46337: PUSH
46338: LD_INT 6
46340: PUSH
46341: LD_INT 7
46343: PUSH
46344: LD_INT 8
46346: PUSH
46347: LD_INT 11
46349: PUSH
46350: LD_INT 12
46352: PUSH
46353: LD_INT 15
46355: PUSH
46356: LD_INT 16
46358: PUSH
46359: LD_INT 20
46361: PUSH
46362: LD_INT 21
46364: PUSH
46365: LD_INT 22
46367: PUSH
46368: LD_INT 23
46370: PUSH
46371: LD_INT 25
46373: PUSH
46374: LD_INT 26
46376: PUSH
46377: LD_INT 30
46379: PUSH
46380: LD_INT 31
46382: PUSH
46383: LD_INT 32
46385: PUSH
46386: LD_INT 36
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 101
46413: PUSH
46414: LD_INT 102
46416: PUSH
46417: LD_INT 103
46419: PUSH
46420: LD_INT 105
46422: PUSH
46423: LD_INT 106
46425: PUSH
46426: LD_INT 108
46428: PUSH
46429: LD_INT 109
46431: PUSH
46432: LD_INT 112
46434: PUSH
46435: LD_INT 116
46437: PUSH
46438: LD_INT 117
46440: PUSH
46441: LD_INT 118
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: ST_TO_ADDR
46461: GO 48716
46463: LD_INT 9
46465: DOUBLE
46466: EQUAL
46467: IFTRUE 46471
46469: GO 46619
46471: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
46472: LD_ADDR_VAR 0 2
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 4
46482: PUSH
46483: LD_INT 5
46485: PUSH
46486: LD_INT 6
46488: PUSH
46489: LD_INT 7
46491: PUSH
46492: LD_INT 8
46494: PUSH
46495: LD_INT 11
46497: PUSH
46498: LD_INT 12
46500: PUSH
46501: LD_INT 15
46503: PUSH
46504: LD_INT 16
46506: PUSH
46507: LD_INT 20
46509: PUSH
46510: LD_INT 21
46512: PUSH
46513: LD_INT 22
46515: PUSH
46516: LD_INT 23
46518: PUSH
46519: LD_INT 25
46521: PUSH
46522: LD_INT 26
46524: PUSH
46525: LD_INT 28
46527: PUSH
46528: LD_INT 30
46530: PUSH
46531: LD_INT 31
46533: PUSH
46534: LD_INT 32
46536: PUSH
46537: LD_INT 36
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 101
46565: PUSH
46566: LD_INT 102
46568: PUSH
46569: LD_INT 103
46571: PUSH
46572: LD_INT 105
46574: PUSH
46575: LD_INT 106
46577: PUSH
46578: LD_INT 108
46580: PUSH
46581: LD_INT 109
46583: PUSH
46584: LD_INT 112
46586: PUSH
46587: LD_INT 114
46589: PUSH
46590: LD_INT 116
46592: PUSH
46593: LD_INT 117
46595: PUSH
46596: LD_INT 118
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: ST_TO_ADDR
46617: GO 48716
46619: LD_INT 10
46621: DOUBLE
46622: EQUAL
46623: IFTRUE 46627
46625: GO 46823
46627: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
46628: LD_ADDR_VAR 0 2
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 4
46638: PUSH
46639: LD_INT 5
46641: PUSH
46642: LD_INT 6
46644: PUSH
46645: LD_INT 7
46647: PUSH
46648: LD_INT 8
46650: PUSH
46651: LD_INT 9
46653: PUSH
46654: LD_INT 10
46656: PUSH
46657: LD_INT 11
46659: PUSH
46660: LD_INT 12
46662: PUSH
46663: LD_INT 13
46665: PUSH
46666: LD_INT 14
46668: PUSH
46669: LD_INT 15
46671: PUSH
46672: LD_INT 16
46674: PUSH
46675: LD_INT 17
46677: PUSH
46678: LD_INT 18
46680: PUSH
46681: LD_INT 19
46683: PUSH
46684: LD_INT 20
46686: PUSH
46687: LD_INT 21
46689: PUSH
46690: LD_INT 22
46692: PUSH
46693: LD_INT 23
46695: PUSH
46696: LD_INT 24
46698: PUSH
46699: LD_INT 25
46701: PUSH
46702: LD_INT 26
46704: PUSH
46705: LD_INT 28
46707: PUSH
46708: LD_INT 30
46710: PUSH
46711: LD_INT 31
46713: PUSH
46714: LD_INT 32
46716: PUSH
46717: LD_INT 36
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 101
46753: PUSH
46754: LD_INT 102
46756: PUSH
46757: LD_INT 103
46759: PUSH
46760: LD_INT 104
46762: PUSH
46763: LD_INT 105
46765: PUSH
46766: LD_INT 106
46768: PUSH
46769: LD_INT 107
46771: PUSH
46772: LD_INT 108
46774: PUSH
46775: LD_INT 109
46777: PUSH
46778: LD_INT 110
46780: PUSH
46781: LD_INT 111
46783: PUSH
46784: LD_INT 112
46786: PUSH
46787: LD_INT 114
46789: PUSH
46790: LD_INT 116
46792: PUSH
46793: LD_INT 117
46795: PUSH
46796: LD_INT 118
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: ST_TO_ADDR
46821: GO 48716
46823: LD_INT 11
46825: DOUBLE
46826: EQUAL
46827: IFTRUE 46831
46829: GO 47035
46831: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
46832: LD_ADDR_VAR 0 2
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: LD_INT 4
46845: PUSH
46846: LD_INT 5
46848: PUSH
46849: LD_INT 6
46851: PUSH
46852: LD_INT 7
46854: PUSH
46855: LD_INT 8
46857: PUSH
46858: LD_INT 9
46860: PUSH
46861: LD_INT 10
46863: PUSH
46864: LD_INT 11
46866: PUSH
46867: LD_INT 12
46869: PUSH
46870: LD_INT 13
46872: PUSH
46873: LD_INT 14
46875: PUSH
46876: LD_INT 15
46878: PUSH
46879: LD_INT 16
46881: PUSH
46882: LD_INT 17
46884: PUSH
46885: LD_INT 18
46887: PUSH
46888: LD_INT 19
46890: PUSH
46891: LD_INT 20
46893: PUSH
46894: LD_INT 21
46896: PUSH
46897: LD_INT 22
46899: PUSH
46900: LD_INT 23
46902: PUSH
46903: LD_INT 24
46905: PUSH
46906: LD_INT 25
46908: PUSH
46909: LD_INT 26
46911: PUSH
46912: LD_INT 28
46914: PUSH
46915: LD_INT 30
46917: PUSH
46918: LD_INT 31
46920: PUSH
46921: LD_INT 32
46923: PUSH
46924: LD_INT 34
46926: PUSH
46927: LD_INT 36
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 101
46965: PUSH
46966: LD_INT 102
46968: PUSH
46969: LD_INT 103
46971: PUSH
46972: LD_INT 104
46974: PUSH
46975: LD_INT 105
46977: PUSH
46978: LD_INT 106
46980: PUSH
46981: LD_INT 107
46983: PUSH
46984: LD_INT 108
46986: PUSH
46987: LD_INT 109
46989: PUSH
46990: LD_INT 110
46992: PUSH
46993: LD_INT 111
46995: PUSH
46996: LD_INT 112
46998: PUSH
46999: LD_INT 114
47001: PUSH
47002: LD_INT 116
47004: PUSH
47005: LD_INT 117
47007: PUSH
47008: LD_INT 118
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: ST_TO_ADDR
47033: GO 48716
47035: LD_INT 12
47037: DOUBLE
47038: EQUAL
47039: IFTRUE 47043
47041: GO 47263
47043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
47044: LD_ADDR_VAR 0 2
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: LD_INT 4
47060: PUSH
47061: LD_INT 5
47063: PUSH
47064: LD_INT 6
47066: PUSH
47067: LD_INT 7
47069: PUSH
47070: LD_INT 8
47072: PUSH
47073: LD_INT 9
47075: PUSH
47076: LD_INT 10
47078: PUSH
47079: LD_INT 11
47081: PUSH
47082: LD_INT 12
47084: PUSH
47085: LD_INT 13
47087: PUSH
47088: LD_INT 14
47090: PUSH
47091: LD_INT 15
47093: PUSH
47094: LD_INT 16
47096: PUSH
47097: LD_INT 17
47099: PUSH
47100: LD_INT 18
47102: PUSH
47103: LD_INT 19
47105: PUSH
47106: LD_INT 20
47108: PUSH
47109: LD_INT 21
47111: PUSH
47112: LD_INT 22
47114: PUSH
47115: LD_INT 23
47117: PUSH
47118: LD_INT 24
47120: PUSH
47121: LD_INT 25
47123: PUSH
47124: LD_INT 26
47126: PUSH
47127: LD_INT 27
47129: PUSH
47130: LD_INT 28
47132: PUSH
47133: LD_INT 30
47135: PUSH
47136: LD_INT 31
47138: PUSH
47139: LD_INT 32
47141: PUSH
47142: LD_INT 33
47144: PUSH
47145: LD_INT 34
47147: PUSH
47148: LD_INT 36
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 101
47189: PUSH
47190: LD_INT 102
47192: PUSH
47193: LD_INT 103
47195: PUSH
47196: LD_INT 104
47198: PUSH
47199: LD_INT 105
47201: PUSH
47202: LD_INT 106
47204: PUSH
47205: LD_INT 107
47207: PUSH
47208: LD_INT 108
47210: PUSH
47211: LD_INT 109
47213: PUSH
47214: LD_INT 110
47216: PUSH
47217: LD_INT 111
47219: PUSH
47220: LD_INT 112
47222: PUSH
47223: LD_INT 113
47225: PUSH
47226: LD_INT 114
47228: PUSH
47229: LD_INT 116
47231: PUSH
47232: LD_INT 117
47234: PUSH
47235: LD_INT 118
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: ST_TO_ADDR
47261: GO 48716
47263: LD_INT 13
47265: DOUBLE
47266: EQUAL
47267: IFTRUE 47271
47269: GO 47479
47271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
47272: LD_ADDR_VAR 0 2
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: LD_INT 4
47288: PUSH
47289: LD_INT 5
47291: PUSH
47292: LD_INT 8
47294: PUSH
47295: LD_INT 9
47297: PUSH
47298: LD_INT 10
47300: PUSH
47301: LD_INT 11
47303: PUSH
47304: LD_INT 12
47306: PUSH
47307: LD_INT 14
47309: PUSH
47310: LD_INT 15
47312: PUSH
47313: LD_INT 16
47315: PUSH
47316: LD_INT 17
47318: PUSH
47319: LD_INT 18
47321: PUSH
47322: LD_INT 19
47324: PUSH
47325: LD_INT 20
47327: PUSH
47328: LD_INT 21
47330: PUSH
47331: LD_INT 22
47333: PUSH
47334: LD_INT 23
47336: PUSH
47337: LD_INT 24
47339: PUSH
47340: LD_INT 25
47342: PUSH
47343: LD_INT 26
47345: PUSH
47346: LD_INT 27
47348: PUSH
47349: LD_INT 28
47351: PUSH
47352: LD_INT 30
47354: PUSH
47355: LD_INT 31
47357: PUSH
47358: LD_INT 32
47360: PUSH
47361: LD_INT 33
47363: PUSH
47364: LD_INT 34
47366: PUSH
47367: LD_INT 36
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 101
47405: PUSH
47406: LD_INT 102
47408: PUSH
47409: LD_INT 103
47411: PUSH
47412: LD_INT 104
47414: PUSH
47415: LD_INT 105
47417: PUSH
47418: LD_INT 106
47420: PUSH
47421: LD_INT 107
47423: PUSH
47424: LD_INT 108
47426: PUSH
47427: LD_INT 109
47429: PUSH
47430: LD_INT 110
47432: PUSH
47433: LD_INT 111
47435: PUSH
47436: LD_INT 112
47438: PUSH
47439: LD_INT 113
47441: PUSH
47442: LD_INT 114
47444: PUSH
47445: LD_INT 116
47447: PUSH
47448: LD_INT 117
47450: PUSH
47451: LD_INT 118
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: ST_TO_ADDR
47477: GO 48716
47479: LD_INT 14
47481: DOUBLE
47482: EQUAL
47483: IFTRUE 47487
47485: GO 47711
47487: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
47488: LD_ADDR_VAR 0 2
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: LD_INT 4
47504: PUSH
47505: LD_INT 5
47507: PUSH
47508: LD_INT 6
47510: PUSH
47511: LD_INT 7
47513: PUSH
47514: LD_INT 8
47516: PUSH
47517: LD_INT 9
47519: PUSH
47520: LD_INT 10
47522: PUSH
47523: LD_INT 11
47525: PUSH
47526: LD_INT 12
47528: PUSH
47529: LD_INT 13
47531: PUSH
47532: LD_INT 14
47534: PUSH
47535: LD_INT 15
47537: PUSH
47538: LD_INT 16
47540: PUSH
47541: LD_INT 17
47543: PUSH
47544: LD_INT 18
47546: PUSH
47547: LD_INT 19
47549: PUSH
47550: LD_INT 20
47552: PUSH
47553: LD_INT 21
47555: PUSH
47556: LD_INT 22
47558: PUSH
47559: LD_INT 23
47561: PUSH
47562: LD_INT 24
47564: PUSH
47565: LD_INT 25
47567: PUSH
47568: LD_INT 26
47570: PUSH
47571: LD_INT 27
47573: PUSH
47574: LD_INT 28
47576: PUSH
47577: LD_INT 29
47579: PUSH
47580: LD_INT 30
47582: PUSH
47583: LD_INT 31
47585: PUSH
47586: LD_INT 32
47588: PUSH
47589: LD_INT 33
47591: PUSH
47592: LD_INT 34
47594: PUSH
47595: LD_INT 36
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 101
47637: PUSH
47638: LD_INT 102
47640: PUSH
47641: LD_INT 103
47643: PUSH
47644: LD_INT 104
47646: PUSH
47647: LD_INT 105
47649: PUSH
47650: LD_INT 106
47652: PUSH
47653: LD_INT 107
47655: PUSH
47656: LD_INT 108
47658: PUSH
47659: LD_INT 109
47661: PUSH
47662: LD_INT 110
47664: PUSH
47665: LD_INT 111
47667: PUSH
47668: LD_INT 112
47670: PUSH
47671: LD_INT 113
47673: PUSH
47674: LD_INT 114
47676: PUSH
47677: LD_INT 116
47679: PUSH
47680: LD_INT 117
47682: PUSH
47683: LD_INT 118
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: ST_TO_ADDR
47709: GO 48716
47711: LD_INT 15
47713: DOUBLE
47714: EQUAL
47715: IFTRUE 47719
47717: GO 47943
47719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
47720: LD_ADDR_VAR 0 2
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: LD_INT 4
47736: PUSH
47737: LD_INT 5
47739: PUSH
47740: LD_INT 6
47742: PUSH
47743: LD_INT 7
47745: PUSH
47746: LD_INT 8
47748: PUSH
47749: LD_INT 9
47751: PUSH
47752: LD_INT 10
47754: PUSH
47755: LD_INT 11
47757: PUSH
47758: LD_INT 12
47760: PUSH
47761: LD_INT 13
47763: PUSH
47764: LD_INT 14
47766: PUSH
47767: LD_INT 15
47769: PUSH
47770: LD_INT 16
47772: PUSH
47773: LD_INT 17
47775: PUSH
47776: LD_INT 18
47778: PUSH
47779: LD_INT 19
47781: PUSH
47782: LD_INT 20
47784: PUSH
47785: LD_INT 21
47787: PUSH
47788: LD_INT 22
47790: PUSH
47791: LD_INT 23
47793: PUSH
47794: LD_INT 24
47796: PUSH
47797: LD_INT 25
47799: PUSH
47800: LD_INT 26
47802: PUSH
47803: LD_INT 27
47805: PUSH
47806: LD_INT 28
47808: PUSH
47809: LD_INT 29
47811: PUSH
47812: LD_INT 30
47814: PUSH
47815: LD_INT 31
47817: PUSH
47818: LD_INT 32
47820: PUSH
47821: LD_INT 33
47823: PUSH
47824: LD_INT 34
47826: PUSH
47827: LD_INT 36
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 101
47869: PUSH
47870: LD_INT 102
47872: PUSH
47873: LD_INT 103
47875: PUSH
47876: LD_INT 104
47878: PUSH
47879: LD_INT 105
47881: PUSH
47882: LD_INT 106
47884: PUSH
47885: LD_INT 107
47887: PUSH
47888: LD_INT 108
47890: PUSH
47891: LD_INT 109
47893: PUSH
47894: LD_INT 110
47896: PUSH
47897: LD_INT 111
47899: PUSH
47900: LD_INT 112
47902: PUSH
47903: LD_INT 113
47905: PUSH
47906: LD_INT 114
47908: PUSH
47909: LD_INT 116
47911: PUSH
47912: LD_INT 117
47914: PUSH
47915: LD_INT 118
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: ST_TO_ADDR
47941: GO 48716
47943: LD_INT 16
47945: DOUBLE
47946: EQUAL
47947: IFTRUE 47951
47949: GO 48087
47951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
47952: LD_ADDR_VAR 0 2
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 4
47962: PUSH
47963: LD_INT 5
47965: PUSH
47966: LD_INT 7
47968: PUSH
47969: LD_INT 11
47971: PUSH
47972: LD_INT 12
47974: PUSH
47975: LD_INT 15
47977: PUSH
47978: LD_INT 16
47980: PUSH
47981: LD_INT 20
47983: PUSH
47984: LD_INT 21
47986: PUSH
47987: LD_INT 22
47989: PUSH
47990: LD_INT 23
47992: PUSH
47993: LD_INT 25
47995: PUSH
47996: LD_INT 26
47998: PUSH
47999: LD_INT 30
48001: PUSH
48002: LD_INT 31
48004: PUSH
48005: LD_INT 32
48007: PUSH
48008: LD_INT 33
48010: PUSH
48011: LD_INT 34
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 101
48037: PUSH
48038: LD_INT 102
48040: PUSH
48041: LD_INT 103
48043: PUSH
48044: LD_INT 106
48046: PUSH
48047: LD_INT 108
48049: PUSH
48050: LD_INT 112
48052: PUSH
48053: LD_INT 113
48055: PUSH
48056: LD_INT 114
48058: PUSH
48059: LD_INT 116
48061: PUSH
48062: LD_INT 117
48064: PUSH
48065: LD_INT 118
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: ST_TO_ADDR
48085: GO 48716
48087: LD_INT 17
48089: DOUBLE
48090: EQUAL
48091: IFTRUE 48095
48093: GO 48319
48095: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
48096: LD_ADDR_VAR 0 2
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: LD_INT 3
48109: PUSH
48110: LD_INT 4
48112: PUSH
48113: LD_INT 5
48115: PUSH
48116: LD_INT 6
48118: PUSH
48119: LD_INT 7
48121: PUSH
48122: LD_INT 8
48124: PUSH
48125: LD_INT 9
48127: PUSH
48128: LD_INT 10
48130: PUSH
48131: LD_INT 11
48133: PUSH
48134: LD_INT 12
48136: PUSH
48137: LD_INT 13
48139: PUSH
48140: LD_INT 14
48142: PUSH
48143: LD_INT 15
48145: PUSH
48146: LD_INT 16
48148: PUSH
48149: LD_INT 17
48151: PUSH
48152: LD_INT 18
48154: PUSH
48155: LD_INT 19
48157: PUSH
48158: LD_INT 20
48160: PUSH
48161: LD_INT 21
48163: PUSH
48164: LD_INT 22
48166: PUSH
48167: LD_INT 23
48169: PUSH
48170: LD_INT 24
48172: PUSH
48173: LD_INT 25
48175: PUSH
48176: LD_INT 26
48178: PUSH
48179: LD_INT 27
48181: PUSH
48182: LD_INT 28
48184: PUSH
48185: LD_INT 29
48187: PUSH
48188: LD_INT 30
48190: PUSH
48191: LD_INT 31
48193: PUSH
48194: LD_INT 32
48196: PUSH
48197: LD_INT 33
48199: PUSH
48200: LD_INT 34
48202: PUSH
48203: LD_INT 36
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 101
48245: PUSH
48246: LD_INT 102
48248: PUSH
48249: LD_INT 103
48251: PUSH
48252: LD_INT 104
48254: PUSH
48255: LD_INT 105
48257: PUSH
48258: LD_INT 106
48260: PUSH
48261: LD_INT 107
48263: PUSH
48264: LD_INT 108
48266: PUSH
48267: LD_INT 109
48269: PUSH
48270: LD_INT 110
48272: PUSH
48273: LD_INT 111
48275: PUSH
48276: LD_INT 112
48278: PUSH
48279: LD_INT 113
48281: PUSH
48282: LD_INT 114
48284: PUSH
48285: LD_INT 116
48287: PUSH
48288: LD_INT 117
48290: PUSH
48291: LD_INT 118
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: ST_TO_ADDR
48317: GO 48716
48319: LD_INT 18
48321: DOUBLE
48322: EQUAL
48323: IFTRUE 48327
48325: GO 48475
48327: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
48328: LD_ADDR_VAR 0 2
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 4
48338: PUSH
48339: LD_INT 5
48341: PUSH
48342: LD_INT 7
48344: PUSH
48345: LD_INT 11
48347: PUSH
48348: LD_INT 12
48350: PUSH
48351: LD_INT 15
48353: PUSH
48354: LD_INT 16
48356: PUSH
48357: LD_INT 20
48359: PUSH
48360: LD_INT 21
48362: PUSH
48363: LD_INT 22
48365: PUSH
48366: LD_INT 23
48368: PUSH
48369: LD_INT 25
48371: PUSH
48372: LD_INT 26
48374: PUSH
48375: LD_INT 30
48377: PUSH
48378: LD_INT 31
48380: PUSH
48381: LD_INT 32
48383: PUSH
48384: LD_INT 33
48386: PUSH
48387: LD_INT 34
48389: PUSH
48390: LD_INT 35
48392: PUSH
48393: LD_INT 36
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 101
48421: PUSH
48422: LD_INT 102
48424: PUSH
48425: LD_INT 103
48427: PUSH
48428: LD_INT 106
48430: PUSH
48431: LD_INT 108
48433: PUSH
48434: LD_INT 112
48436: PUSH
48437: LD_INT 113
48439: PUSH
48440: LD_INT 114
48442: PUSH
48443: LD_INT 115
48445: PUSH
48446: LD_INT 116
48448: PUSH
48449: LD_INT 117
48451: PUSH
48452: LD_INT 118
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: ST_TO_ADDR
48473: GO 48716
48475: LD_INT 19
48477: DOUBLE
48478: EQUAL
48479: IFTRUE 48483
48481: GO 48715
48483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
48484: LD_ADDR_VAR 0 2
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: LD_INT 4
48500: PUSH
48501: LD_INT 5
48503: PUSH
48504: LD_INT 6
48506: PUSH
48507: LD_INT 7
48509: PUSH
48510: LD_INT 8
48512: PUSH
48513: LD_INT 9
48515: PUSH
48516: LD_INT 10
48518: PUSH
48519: LD_INT 11
48521: PUSH
48522: LD_INT 12
48524: PUSH
48525: LD_INT 13
48527: PUSH
48528: LD_INT 14
48530: PUSH
48531: LD_INT 15
48533: PUSH
48534: LD_INT 16
48536: PUSH
48537: LD_INT 17
48539: PUSH
48540: LD_INT 18
48542: PUSH
48543: LD_INT 19
48545: PUSH
48546: LD_INT 20
48548: PUSH
48549: LD_INT 21
48551: PUSH
48552: LD_INT 22
48554: PUSH
48555: LD_INT 23
48557: PUSH
48558: LD_INT 24
48560: PUSH
48561: LD_INT 25
48563: PUSH
48564: LD_INT 26
48566: PUSH
48567: LD_INT 27
48569: PUSH
48570: LD_INT 28
48572: PUSH
48573: LD_INT 29
48575: PUSH
48576: LD_INT 30
48578: PUSH
48579: LD_INT 31
48581: PUSH
48582: LD_INT 32
48584: PUSH
48585: LD_INT 33
48587: PUSH
48588: LD_INT 34
48590: PUSH
48591: LD_INT 35
48593: PUSH
48594: LD_INT 36
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 101
48637: PUSH
48638: LD_INT 102
48640: PUSH
48641: LD_INT 103
48643: PUSH
48644: LD_INT 104
48646: PUSH
48647: LD_INT 105
48649: PUSH
48650: LD_INT 106
48652: PUSH
48653: LD_INT 107
48655: PUSH
48656: LD_INT 108
48658: PUSH
48659: LD_INT 109
48661: PUSH
48662: LD_INT 110
48664: PUSH
48665: LD_INT 111
48667: PUSH
48668: LD_INT 112
48670: PUSH
48671: LD_INT 113
48673: PUSH
48674: LD_INT 114
48676: PUSH
48677: LD_INT 115
48679: PUSH
48680: LD_INT 116
48682: PUSH
48683: LD_INT 117
48685: PUSH
48686: LD_INT 118
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: ST_TO_ADDR
48713: GO 48716
48715: POP
// end else
48716: GO 48947
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
48718: LD_ADDR_VAR 0 2
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 2
48728: PUSH
48729: LD_INT 3
48731: PUSH
48732: LD_INT 4
48734: PUSH
48735: LD_INT 5
48737: PUSH
48738: LD_INT 6
48740: PUSH
48741: LD_INT 7
48743: PUSH
48744: LD_INT 8
48746: PUSH
48747: LD_INT 9
48749: PUSH
48750: LD_INT 10
48752: PUSH
48753: LD_INT 11
48755: PUSH
48756: LD_INT 12
48758: PUSH
48759: LD_INT 13
48761: PUSH
48762: LD_INT 14
48764: PUSH
48765: LD_INT 15
48767: PUSH
48768: LD_INT 16
48770: PUSH
48771: LD_INT 17
48773: PUSH
48774: LD_INT 18
48776: PUSH
48777: LD_INT 19
48779: PUSH
48780: LD_INT 20
48782: PUSH
48783: LD_INT 21
48785: PUSH
48786: LD_INT 22
48788: PUSH
48789: LD_INT 23
48791: PUSH
48792: LD_INT 24
48794: PUSH
48795: LD_INT 25
48797: PUSH
48798: LD_INT 26
48800: PUSH
48801: LD_INT 27
48803: PUSH
48804: LD_INT 28
48806: PUSH
48807: LD_INT 29
48809: PUSH
48810: LD_INT 30
48812: PUSH
48813: LD_INT 31
48815: PUSH
48816: LD_INT 32
48818: PUSH
48819: LD_INT 33
48821: PUSH
48822: LD_INT 34
48824: PUSH
48825: LD_INT 35
48827: PUSH
48828: LD_INT 36
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 101
48871: PUSH
48872: LD_INT 102
48874: PUSH
48875: LD_INT 103
48877: PUSH
48878: LD_INT 104
48880: PUSH
48881: LD_INT 105
48883: PUSH
48884: LD_INT 106
48886: PUSH
48887: LD_INT 107
48889: PUSH
48890: LD_INT 108
48892: PUSH
48893: LD_INT 109
48895: PUSH
48896: LD_INT 110
48898: PUSH
48899: LD_INT 111
48901: PUSH
48902: LD_INT 112
48904: PUSH
48905: LD_INT 113
48907: PUSH
48908: LD_INT 114
48910: PUSH
48911: LD_INT 115
48913: PUSH
48914: LD_INT 116
48916: PUSH
48917: LD_INT 117
48919: PUSH
48920: LD_INT 118
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// if result then
48947: LD_VAR 0 2
48951: IFFALSE 49737
// begin normal :=  ;
48953: LD_ADDR_VAR 0 5
48957: PUSH
48958: LD_STRING 
48960: ST_TO_ADDR
// hardcore :=  ;
48961: LD_ADDR_VAR 0 6
48965: PUSH
48966: LD_STRING 
48968: ST_TO_ADDR
// active :=  ;
48969: LD_ADDR_VAR 0 7
48973: PUSH
48974: LD_STRING 
48976: ST_TO_ADDR
// for i = 1 to normalCounter do
48977: LD_ADDR_VAR 0 8
48981: PUSH
48982: DOUBLE
48983: LD_INT 1
48985: DEC
48986: ST_TO_ADDR
48987: LD_EXP 9
48991: PUSH
48992: FOR_TO
48993: IFFALSE 49094
// begin tmp := 0 ;
48995: LD_ADDR_VAR 0 3
48999: PUSH
49000: LD_STRING 0
49002: ST_TO_ADDR
// if result [ 1 ] then
49003: LD_VAR 0 2
49007: PUSH
49008: LD_INT 1
49010: ARRAY
49011: IFFALSE 49076
// if result [ 1 ] [ 1 ] = i then
49013: LD_VAR 0 2
49017: PUSH
49018: LD_INT 1
49020: ARRAY
49021: PUSH
49022: LD_INT 1
49024: ARRAY
49025: PUSH
49026: LD_VAR 0 8
49030: EQUAL
49031: IFFALSE 49076
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
49033: LD_ADDR_VAR 0 2
49037: PUSH
49038: LD_VAR 0 2
49042: PPUSH
49043: LD_INT 1
49045: PPUSH
49046: LD_VAR 0 2
49050: PUSH
49051: LD_INT 1
49053: ARRAY
49054: PPUSH
49055: LD_INT 1
49057: PPUSH
49058: CALL_OW 3
49062: PPUSH
49063: CALL_OW 1
49067: ST_TO_ADDR
// tmp := 1 ;
49068: LD_ADDR_VAR 0 3
49072: PUSH
49073: LD_STRING 1
49075: ST_TO_ADDR
// end ; normal := normal & tmp ;
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: LD_VAR 0 5
49085: PUSH
49086: LD_VAR 0 3
49090: STR
49091: ST_TO_ADDR
// end ;
49092: GO 48992
49094: POP
49095: POP
// for i = 1 to hardcoreCounter do
49096: LD_ADDR_VAR 0 8
49100: PUSH
49101: DOUBLE
49102: LD_INT 1
49104: DEC
49105: ST_TO_ADDR
49106: LD_EXP 10
49110: PUSH
49111: FOR_TO
49112: IFFALSE 49217
// begin tmp := 0 ;
49114: LD_ADDR_VAR 0 3
49118: PUSH
49119: LD_STRING 0
49121: ST_TO_ADDR
// if result [ 2 ] then
49122: LD_VAR 0 2
49126: PUSH
49127: LD_INT 2
49129: ARRAY
49130: IFFALSE 49199
// if result [ 2 ] [ 1 ] = 100 + i then
49132: LD_VAR 0 2
49136: PUSH
49137: LD_INT 2
49139: ARRAY
49140: PUSH
49141: LD_INT 1
49143: ARRAY
49144: PUSH
49145: LD_INT 100
49147: PUSH
49148: LD_VAR 0 8
49152: PLUS
49153: EQUAL
49154: IFFALSE 49199
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
49156: LD_ADDR_VAR 0 2
49160: PUSH
49161: LD_VAR 0 2
49165: PPUSH
49166: LD_INT 2
49168: PPUSH
49169: LD_VAR 0 2
49173: PUSH
49174: LD_INT 2
49176: ARRAY
49177: PPUSH
49178: LD_INT 1
49180: PPUSH
49181: CALL_OW 3
49185: PPUSH
49186: CALL_OW 1
49190: ST_TO_ADDR
// tmp := 1 ;
49191: LD_ADDR_VAR 0 3
49195: PUSH
49196: LD_STRING 1
49198: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
49199: LD_ADDR_VAR 0 6
49203: PUSH
49204: LD_VAR 0 6
49208: PUSH
49209: LD_VAR 0 3
49213: STR
49214: ST_TO_ADDR
// end ;
49215: GO 49111
49217: POP
49218: POP
// if isGameLoad then
49219: LD_VAR 0 1
49223: IFFALSE 49698
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
49225: LD_ADDR_VAR 0 4
49229: PUSH
49230: LD_EXP 13
49234: PUSH
49235: LD_EXP 12
49239: PUSH
49240: LD_EXP 14
49244: PUSH
49245: LD_EXP 11
49249: PUSH
49250: LD_EXP 15
49254: PUSH
49255: LD_EXP 16
49259: PUSH
49260: LD_EXP 17
49264: PUSH
49265: LD_EXP 18
49269: PUSH
49270: LD_EXP 19
49274: PUSH
49275: LD_EXP 20
49279: PUSH
49280: LD_EXP 21
49284: PUSH
49285: LD_EXP 22
49289: PUSH
49290: LD_EXP 23
49294: PUSH
49295: LD_EXP 24
49299: PUSH
49300: LD_EXP 32
49304: PUSH
49305: LD_EXP 33
49309: PUSH
49310: LD_EXP 34
49314: PUSH
49315: LD_EXP 35
49319: PUSH
49320: LD_EXP 37
49324: PUSH
49325: LD_EXP 38
49329: PUSH
49330: LD_EXP 39
49334: PUSH
49335: LD_EXP 42
49339: PUSH
49340: LD_EXP 44
49344: PUSH
49345: LD_EXP 45
49349: PUSH
49350: LD_EXP 46
49354: PUSH
49355: LD_EXP 48
49359: PUSH
49360: LD_EXP 49
49364: PUSH
49365: LD_EXP 52
49369: PUSH
49370: LD_EXP 53
49374: PUSH
49375: LD_EXP 54
49379: PUSH
49380: LD_EXP 55
49384: PUSH
49385: LD_EXP 56
49389: PUSH
49390: LD_EXP 57
49394: PUSH
49395: LD_EXP 58
49399: PUSH
49400: LD_EXP 59
49404: PUSH
49405: LD_EXP 60
49409: PUSH
49410: LD_EXP 25
49414: PUSH
49415: LD_EXP 26
49419: PUSH
49420: LD_EXP 29
49424: PUSH
49425: LD_EXP 30
49429: PUSH
49430: LD_EXP 31
49434: PUSH
49435: LD_EXP 27
49439: PUSH
49440: LD_EXP 28
49444: PUSH
49445: LD_EXP 36
49449: PUSH
49450: LD_EXP 40
49454: PUSH
49455: LD_EXP 41
49459: PUSH
49460: LD_EXP 43
49464: PUSH
49465: LD_EXP 47
49469: PUSH
49470: LD_EXP 50
49474: PUSH
49475: LD_EXP 51
49479: PUSH
49480: LD_EXP 61
49484: PUSH
49485: LD_EXP 62
49489: PUSH
49490: LD_EXP 63
49494: PUSH
49495: LD_EXP 64
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: ST_TO_ADDR
// tmp :=  ;
49556: LD_ADDR_VAR 0 3
49560: PUSH
49561: LD_STRING 
49563: ST_TO_ADDR
// for i = 1 to normalCounter do
49564: LD_ADDR_VAR 0 8
49568: PUSH
49569: DOUBLE
49570: LD_INT 1
49572: DEC
49573: ST_TO_ADDR
49574: LD_EXP 9
49578: PUSH
49579: FOR_TO
49580: IFFALSE 49616
// begin if flags [ i ] then
49582: LD_VAR 0 4
49586: PUSH
49587: LD_VAR 0 8
49591: ARRAY
49592: IFFALSE 49614
// tmp := tmp & i & ; ;
49594: LD_ADDR_VAR 0 3
49598: PUSH
49599: LD_VAR 0 3
49603: PUSH
49604: LD_VAR 0 8
49608: STR
49609: PUSH
49610: LD_STRING ;
49612: STR
49613: ST_TO_ADDR
// end ;
49614: GO 49579
49616: POP
49617: POP
// for i = 1 to hardcoreCounter do
49618: LD_ADDR_VAR 0 8
49622: PUSH
49623: DOUBLE
49624: LD_INT 1
49626: DEC
49627: ST_TO_ADDR
49628: LD_EXP 10
49632: PUSH
49633: FOR_TO
49634: IFFALSE 49680
// begin if flags [ normalCounter + i ] then
49636: LD_VAR 0 4
49640: PUSH
49641: LD_EXP 9
49645: PUSH
49646: LD_VAR 0 8
49650: PLUS
49651: ARRAY
49652: IFFALSE 49678
// tmp := tmp & ( 100 + i ) & ; ;
49654: LD_ADDR_VAR 0 3
49658: PUSH
49659: LD_VAR 0 3
49663: PUSH
49664: LD_INT 100
49666: PUSH
49667: LD_VAR 0 8
49671: PLUS
49672: STR
49673: PUSH
49674: LD_STRING ;
49676: STR
49677: ST_TO_ADDR
// end ;
49678: GO 49633
49680: POP
49681: POP
// if tmp then
49682: LD_VAR 0 3
49686: IFFALSE 49698
// active := tmp ;
49688: LD_ADDR_VAR 0 7
49692: PUSH
49693: LD_VAR 0 3
49697: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
49698: LD_STRING getStreamItemsFromMission("
49700: PUSH
49701: LD_VAR 0 5
49705: STR
49706: PUSH
49707: LD_STRING ","
49709: STR
49710: PUSH
49711: LD_VAR 0 6
49715: STR
49716: PUSH
49717: LD_STRING ","
49719: STR
49720: PUSH
49721: LD_VAR 0 7
49725: STR
49726: PUSH
49727: LD_STRING ")
49729: STR
49730: PPUSH
49731: CALL_OW 559
// end else
49735: GO 49744
// ToLua ( getStreamItemsFromMission("","","") ) ;
49737: LD_STRING getStreamItemsFromMission("","","")
49739: PPUSH
49740: CALL_OW 559
// end ;
49744: LD_VAR 0 2
49748: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
49749: LD_EXP 8
49753: PUSH
49754: LD_EXP 13
49758: AND
49759: IFFALSE 49883
49761: GO 49763
49763: DISABLE
49764: LD_INT 0
49766: PPUSH
49767: PPUSH
// begin enable ;
49768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
49769: LD_ADDR_VAR 0 2
49773: PUSH
49774: LD_INT 22
49776: PUSH
49777: LD_OWVAR 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 34
49791: PUSH
49792: LD_INT 7
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 34
49801: PUSH
49802: LD_INT 45
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 34
49811: PUSH
49812: LD_INT 28
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 34
49821: PUSH
49822: LD_INT 47
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PPUSH
49840: CALL_OW 69
49844: ST_TO_ADDR
// if not tmp then
49845: LD_VAR 0 2
49849: NOT
49850: IFFALSE 49854
// exit ;
49852: GO 49883
// for i in tmp do
49854: LD_ADDR_VAR 0 1
49858: PUSH
49859: LD_VAR 0 2
49863: PUSH
49864: FOR_IN
49865: IFFALSE 49881
// begin SetLives ( i , 0 ) ;
49867: LD_VAR 0 1
49871: PPUSH
49872: LD_INT 0
49874: PPUSH
49875: CALL_OW 234
// end ;
49879: GO 49864
49881: POP
49882: POP
// end ;
49883: PPOPN 2
49885: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
49886: LD_EXP 8
49890: PUSH
49891: LD_EXP 14
49895: AND
49896: IFFALSE 49980
49898: GO 49900
49900: DISABLE
49901: LD_INT 0
49903: PPUSH
49904: PPUSH
// begin enable ;
49905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
49906: LD_ADDR_VAR 0 2
49910: PUSH
49911: LD_INT 22
49913: PUSH
49914: LD_OWVAR 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 32
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PPUSH
49937: CALL_OW 69
49941: ST_TO_ADDR
// if not tmp then
49942: LD_VAR 0 2
49946: NOT
49947: IFFALSE 49951
// exit ;
49949: GO 49980
// for i in tmp do
49951: LD_ADDR_VAR 0 1
49955: PUSH
49956: LD_VAR 0 2
49960: PUSH
49961: FOR_IN
49962: IFFALSE 49978
// begin SetLives ( i , 0 ) ;
49964: LD_VAR 0 1
49968: PPUSH
49969: LD_INT 0
49971: PPUSH
49972: CALL_OW 234
// end ;
49976: GO 49961
49978: POP
49979: POP
// end ;
49980: PPOPN 2
49982: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
49983: LD_EXP 8
49987: PUSH
49988: LD_EXP 11
49992: AND
49993: IFFALSE 50086
49995: GO 49997
49997: DISABLE
49998: LD_INT 0
50000: PPUSH
// begin enable ;
50001: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
50002: LD_ADDR_VAR 0 1
50006: PUSH
50007: LD_INT 22
50009: PUSH
50010: LD_OWVAR 2
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 25
50024: PUSH
50025: LD_INT 5
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 25
50034: PUSH
50035: LD_INT 9
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 25
50044: PUSH
50045: LD_INT 8
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PPUSH
50062: CALL_OW 69
50066: PUSH
50067: FOR_IN
50068: IFFALSE 50084
// begin SetClass ( i , 1 ) ;
50070: LD_VAR 0 1
50074: PPUSH
50075: LD_INT 1
50077: PPUSH
50078: CALL_OW 336
// end ;
50082: GO 50067
50084: POP
50085: POP
// end ;
50086: PPOPN 1
50088: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
50089: LD_EXP 8
50093: PUSH
50094: LD_EXP 12
50098: AND
50099: PUSH
50100: LD_OWVAR 65
50104: PUSH
50105: LD_INT 7
50107: LESS
50108: AND
50109: IFFALSE 50123
50111: GO 50113
50113: DISABLE
// begin enable ;
50114: ENABLE
// game_speed := 7 ;
50115: LD_ADDR_OWVAR 65
50119: PUSH
50120: LD_INT 7
50122: ST_TO_ADDR
// end ;
50123: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
50124: LD_EXP 8
50128: PUSH
50129: LD_EXP 15
50133: AND
50134: IFFALSE 50336
50136: GO 50138
50138: DISABLE
50139: LD_INT 0
50141: PPUSH
50142: PPUSH
50143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
50144: LD_ADDR_VAR 0 3
50148: PUSH
50149: LD_INT 81
50151: PUSH
50152: LD_OWVAR 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 21
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PPUSH
50175: CALL_OW 69
50179: ST_TO_ADDR
// if not tmp then
50180: LD_VAR 0 3
50184: NOT
50185: IFFALSE 50189
// exit ;
50187: GO 50336
// if tmp > 5 then
50189: LD_VAR 0 3
50193: PUSH
50194: LD_INT 5
50196: GREATER
50197: IFFALSE 50209
// k := 5 else
50199: LD_ADDR_VAR 0 2
50203: PUSH
50204: LD_INT 5
50206: ST_TO_ADDR
50207: GO 50219
// k := tmp ;
50209: LD_ADDR_VAR 0 2
50213: PUSH
50214: LD_VAR 0 3
50218: ST_TO_ADDR
// for i := 1 to k do
50219: LD_ADDR_VAR 0 1
50223: PUSH
50224: DOUBLE
50225: LD_INT 1
50227: DEC
50228: ST_TO_ADDR
50229: LD_VAR 0 2
50233: PUSH
50234: FOR_TO
50235: IFFALSE 50334
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
50237: LD_VAR 0 3
50241: PUSH
50242: LD_VAR 0 1
50246: ARRAY
50247: PPUSH
50248: LD_VAR 0 1
50252: PUSH
50253: LD_INT 4
50255: MOD
50256: PUSH
50257: LD_INT 1
50259: PLUS
50260: PPUSH
50261: CALL_OW 259
50265: PUSH
50266: LD_INT 10
50268: LESS
50269: IFFALSE 50332
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
50271: LD_VAR 0 3
50275: PUSH
50276: LD_VAR 0 1
50280: ARRAY
50281: PPUSH
50282: LD_VAR 0 1
50286: PUSH
50287: LD_INT 4
50289: MOD
50290: PUSH
50291: LD_INT 1
50293: PLUS
50294: PPUSH
50295: LD_VAR 0 3
50299: PUSH
50300: LD_VAR 0 1
50304: ARRAY
50305: PPUSH
50306: LD_VAR 0 1
50310: PUSH
50311: LD_INT 4
50313: MOD
50314: PUSH
50315: LD_INT 1
50317: PLUS
50318: PPUSH
50319: CALL_OW 259
50323: PUSH
50324: LD_INT 1
50326: PLUS
50327: PPUSH
50328: CALL_OW 237
50332: GO 50234
50334: POP
50335: POP
// end ;
50336: PPOPN 3
50338: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
50339: LD_EXP 8
50343: PUSH
50344: LD_EXP 16
50348: AND
50349: IFFALSE 50369
50351: GO 50353
50353: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
50354: LD_INT 4
50356: PPUSH
50357: LD_OWVAR 2
50361: PPUSH
50362: LD_INT 0
50364: PPUSH
50365: CALL_OW 324
50369: END
// every 0 0$1 trigger StreamModeActive and sShovel do
50370: LD_EXP 8
50374: PUSH
50375: LD_EXP 45
50379: AND
50380: IFFALSE 50400
50382: GO 50384
50384: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
50385: LD_INT 19
50387: PPUSH
50388: LD_OWVAR 2
50392: PPUSH
50393: LD_INT 0
50395: PPUSH
50396: CALL_OW 324
50400: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
50401: LD_EXP 8
50405: PUSH
50406: LD_EXP 17
50410: AND
50411: IFFALSE 50513
50413: GO 50415
50415: DISABLE
50416: LD_INT 0
50418: PPUSH
50419: PPUSH
// begin enable ;
50420: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
50421: LD_ADDR_VAR 0 2
50425: PUSH
50426: LD_INT 22
50428: PUSH
50429: LD_OWVAR 2
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 34
50443: PUSH
50444: LD_INT 11
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 34
50453: PUSH
50454: LD_INT 30
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PPUSH
50470: CALL_OW 69
50474: ST_TO_ADDR
// if not tmp then
50475: LD_VAR 0 2
50479: NOT
50480: IFFALSE 50484
// exit ;
50482: GO 50513
// for i in tmp do
50484: LD_ADDR_VAR 0 1
50488: PUSH
50489: LD_VAR 0 2
50493: PUSH
50494: FOR_IN
50495: IFFALSE 50511
// begin SetLives ( i , 0 ) ;
50497: LD_VAR 0 1
50501: PPUSH
50502: LD_INT 0
50504: PPUSH
50505: CALL_OW 234
// end ;
50509: GO 50494
50511: POP
50512: POP
// end ;
50513: PPOPN 2
50515: END
// every 0 0$1 trigger StreamModeActive and sBunker do
50516: LD_EXP 8
50520: PUSH
50521: LD_EXP 18
50525: AND
50526: IFFALSE 50546
50528: GO 50530
50530: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
50531: LD_INT 32
50533: PPUSH
50534: LD_OWVAR 2
50538: PPUSH
50539: LD_INT 0
50541: PPUSH
50542: CALL_OW 324
50546: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
50547: LD_EXP 8
50551: PUSH
50552: LD_EXP 19
50556: AND
50557: IFFALSE 50738
50559: GO 50561
50561: DISABLE
50562: LD_INT 0
50564: PPUSH
50565: PPUSH
50566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
50567: LD_ADDR_VAR 0 2
50571: PUSH
50572: LD_INT 22
50574: PUSH
50575: LD_OWVAR 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 33
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PPUSH
50598: CALL_OW 69
50602: ST_TO_ADDR
// if not tmp then
50603: LD_VAR 0 2
50607: NOT
50608: IFFALSE 50612
// exit ;
50610: GO 50738
// side := 0 ;
50612: LD_ADDR_VAR 0 3
50616: PUSH
50617: LD_INT 0
50619: ST_TO_ADDR
// for i := 1 to 8 do
50620: LD_ADDR_VAR 0 1
50624: PUSH
50625: DOUBLE
50626: LD_INT 1
50628: DEC
50629: ST_TO_ADDR
50630: LD_INT 8
50632: PUSH
50633: FOR_TO
50634: IFFALSE 50682
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
50636: LD_OWVAR 2
50640: PUSH
50641: LD_VAR 0 1
50645: NONEQUAL
50646: PUSH
50647: LD_OWVAR 2
50651: PPUSH
50652: LD_VAR 0 1
50656: PPUSH
50657: CALL_OW 81
50661: PUSH
50662: LD_INT 2
50664: EQUAL
50665: AND
50666: IFFALSE 50680
// begin side := i ;
50668: LD_ADDR_VAR 0 3
50672: PUSH
50673: LD_VAR 0 1
50677: ST_TO_ADDR
// break ;
50678: GO 50682
// end ;
50680: GO 50633
50682: POP
50683: POP
// if not side then
50684: LD_VAR 0 3
50688: NOT
50689: IFFALSE 50693
// exit ;
50691: GO 50738
// for i := 1 to tmp do
50693: LD_ADDR_VAR 0 1
50697: PUSH
50698: DOUBLE
50699: LD_INT 1
50701: DEC
50702: ST_TO_ADDR
50703: LD_VAR 0 2
50707: PUSH
50708: FOR_TO
50709: IFFALSE 50736
// if Prob ( 60 ) then
50711: LD_INT 60
50713: PPUSH
50714: CALL_OW 13
50718: IFFALSE 50734
// SetSide ( i , side ) ;
50720: LD_VAR 0 1
50724: PPUSH
50725: LD_VAR 0 3
50729: PPUSH
50730: CALL_OW 235
50734: GO 50708
50736: POP
50737: POP
// end ;
50738: PPOPN 3
50740: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
50741: LD_EXP 8
50745: PUSH
50746: LD_EXP 21
50750: AND
50751: IFFALSE 50870
50753: GO 50755
50755: DISABLE
50756: LD_INT 0
50758: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
50759: LD_ADDR_VAR 0 1
50763: PUSH
50764: LD_INT 22
50766: PUSH
50767: LD_OWVAR 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 21
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: LD_INT 23
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: PPUSH
50808: CALL_OW 69
50812: PUSH
50813: FOR_IN
50814: IFFALSE 50868
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
50816: LD_VAR 0 1
50820: PPUSH
50821: CALL_OW 257
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: LD_INT 4
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: IN
50844: IFFALSE 50866
// SetClass ( un , rand ( 1 , 4 ) ) ;
50846: LD_VAR 0 1
50850: PPUSH
50851: LD_INT 1
50853: PPUSH
50854: LD_INT 4
50856: PPUSH
50857: CALL_OW 12
50861: PPUSH
50862: CALL_OW 336
50866: GO 50813
50868: POP
50869: POP
// end ;
50870: PPOPN 1
50872: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
50873: LD_EXP 8
50877: PUSH
50878: LD_EXP 20
50882: AND
50883: IFFALSE 50962
50885: GO 50887
50887: DISABLE
50888: LD_INT 0
50890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50891: LD_ADDR_VAR 0 1
50895: PUSH
50896: LD_INT 22
50898: PUSH
50899: LD_OWVAR 2
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 21
50910: PUSH
50911: LD_INT 3
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PPUSH
50922: CALL_OW 69
50926: ST_TO_ADDR
// if not tmp then
50927: LD_VAR 0 1
50931: NOT
50932: IFFALSE 50936
// exit ;
50934: GO 50962
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
50936: LD_VAR 0 1
50940: PUSH
50941: LD_INT 1
50943: PPUSH
50944: LD_VAR 0 1
50948: PPUSH
50949: CALL_OW 12
50953: ARRAY
50954: PPUSH
50955: LD_INT 100
50957: PPUSH
50958: CALL_OW 234
// end ;
50962: PPOPN 1
50964: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
50965: LD_EXP 8
50969: PUSH
50970: LD_EXP 22
50974: AND
50975: IFFALSE 51073
50977: GO 50979
50979: DISABLE
50980: LD_INT 0
50982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50983: LD_ADDR_VAR 0 1
50987: PUSH
50988: LD_INT 22
50990: PUSH
50991: LD_OWVAR 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 21
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PPUSH
51014: CALL_OW 69
51018: ST_TO_ADDR
// if not tmp then
51019: LD_VAR 0 1
51023: NOT
51024: IFFALSE 51028
// exit ;
51026: GO 51073
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
51028: LD_VAR 0 1
51032: PUSH
51033: LD_INT 1
51035: PPUSH
51036: LD_VAR 0 1
51040: PPUSH
51041: CALL_OW 12
51045: ARRAY
51046: PPUSH
51047: LD_INT 1
51049: PPUSH
51050: LD_INT 4
51052: PPUSH
51053: CALL_OW 12
51057: PPUSH
51058: LD_INT 3000
51060: PPUSH
51061: LD_INT 9000
51063: PPUSH
51064: CALL_OW 12
51068: PPUSH
51069: CALL_OW 492
// end ;
51073: PPOPN 1
51075: END
// every 0 0$1 trigger StreamModeActive and sDepot do
51076: LD_EXP 8
51080: PUSH
51081: LD_EXP 23
51085: AND
51086: IFFALSE 51106
51088: GO 51090
51090: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
51091: LD_INT 1
51093: PPUSH
51094: LD_OWVAR 2
51098: PPUSH
51099: LD_INT 0
51101: PPUSH
51102: CALL_OW 324
51106: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
51107: LD_EXP 8
51111: PUSH
51112: LD_EXP 24
51116: AND
51117: IFFALSE 51200
51119: GO 51121
51121: DISABLE
51122: LD_INT 0
51124: PPUSH
51125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51126: LD_ADDR_VAR 0 2
51130: PUSH
51131: LD_INT 22
51133: PUSH
51134: LD_OWVAR 2
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 21
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PPUSH
51157: CALL_OW 69
51161: ST_TO_ADDR
// if not tmp then
51162: LD_VAR 0 2
51166: NOT
51167: IFFALSE 51171
// exit ;
51169: GO 51200
// for i in tmp do
51171: LD_ADDR_VAR 0 1
51175: PUSH
51176: LD_VAR 0 2
51180: PUSH
51181: FOR_IN
51182: IFFALSE 51198
// SetBLevel ( i , 10 ) ;
51184: LD_VAR 0 1
51188: PPUSH
51189: LD_INT 10
51191: PPUSH
51192: CALL_OW 241
51196: GO 51181
51198: POP
51199: POP
// end ;
51200: PPOPN 2
51202: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
51203: LD_EXP 8
51207: PUSH
51208: LD_EXP 25
51212: AND
51213: IFFALSE 51324
51215: GO 51217
51217: DISABLE
51218: LD_INT 0
51220: PPUSH
51221: PPUSH
51222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51223: LD_ADDR_VAR 0 3
51227: PUSH
51228: LD_INT 22
51230: PUSH
51231: LD_OWVAR 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 25
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PPUSH
51254: CALL_OW 69
51258: ST_TO_ADDR
// if not tmp then
51259: LD_VAR 0 3
51263: NOT
51264: IFFALSE 51268
// exit ;
51266: GO 51324
// un := tmp [ rand ( 1 , tmp ) ] ;
51268: LD_ADDR_VAR 0 2
51272: PUSH
51273: LD_VAR 0 3
51277: PUSH
51278: LD_INT 1
51280: PPUSH
51281: LD_VAR 0 3
51285: PPUSH
51286: CALL_OW 12
51290: ARRAY
51291: ST_TO_ADDR
// if Crawls ( un ) then
51292: LD_VAR 0 2
51296: PPUSH
51297: CALL_OW 318
51301: IFFALSE 51312
// ComWalk ( un ) ;
51303: LD_VAR 0 2
51307: PPUSH
51308: CALL_OW 138
// SetClass ( un , class_sniper ) ;
51312: LD_VAR 0 2
51316: PPUSH
51317: LD_INT 5
51319: PPUSH
51320: CALL_OW 336
// end ;
51324: PPOPN 3
51326: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
51327: LD_EXP 8
51331: PUSH
51332: LD_EXP 26
51336: AND
51337: PUSH
51338: LD_OWVAR 67
51342: PUSH
51343: LD_INT 4
51345: LESS
51346: AND
51347: IFFALSE 51366
51349: GO 51351
51351: DISABLE
// begin Difficulty := Difficulty + 1 ;
51352: LD_ADDR_OWVAR 67
51356: PUSH
51357: LD_OWVAR 67
51361: PUSH
51362: LD_INT 1
51364: PLUS
51365: ST_TO_ADDR
// end ;
51366: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
51367: LD_EXP 8
51371: PUSH
51372: LD_EXP 27
51376: AND
51377: IFFALSE 51480
51379: GO 51381
51381: DISABLE
51382: LD_INT 0
51384: PPUSH
// begin for i := 1 to 5 do
51385: LD_ADDR_VAR 0 1
51389: PUSH
51390: DOUBLE
51391: LD_INT 1
51393: DEC
51394: ST_TO_ADDR
51395: LD_INT 5
51397: PUSH
51398: FOR_TO
51399: IFFALSE 51478
// begin uc_nation := nation_nature ;
51401: LD_ADDR_OWVAR 21
51405: PUSH
51406: LD_INT 0
51408: ST_TO_ADDR
// uc_side := 0 ;
51409: LD_ADDR_OWVAR 20
51413: PUSH
51414: LD_INT 0
51416: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51417: LD_ADDR_OWVAR 29
51421: PUSH
51422: LD_INT 12
51424: PUSH
51425: LD_INT 12
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: ST_TO_ADDR
// hc_agressivity := 20 ;
51432: LD_ADDR_OWVAR 35
51436: PUSH
51437: LD_INT 20
51439: ST_TO_ADDR
// hc_class := class_tiger ;
51440: LD_ADDR_OWVAR 28
51444: PUSH
51445: LD_INT 14
51447: ST_TO_ADDR
// hc_gallery :=  ;
51448: LD_ADDR_OWVAR 33
51452: PUSH
51453: LD_STRING 
51455: ST_TO_ADDR
// hc_name :=  ;
51456: LD_ADDR_OWVAR 26
51460: PUSH
51461: LD_STRING 
51463: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
51464: CALL_OW 44
51468: PPUSH
51469: LD_INT 0
51471: PPUSH
51472: CALL_OW 51
// end ;
51476: GO 51398
51478: POP
51479: POP
// end ;
51480: PPOPN 1
51482: END
// every 0 0$1 trigger StreamModeActive and sBomb do
51483: LD_EXP 8
51487: PUSH
51488: LD_EXP 28
51492: AND
51493: IFFALSE 51502
51495: GO 51497
51497: DISABLE
// StreamSibBomb ;
51498: CALL 51503 0 0
51502: END
// export function StreamSibBomb ; var i , x , y ; begin
51503: LD_INT 0
51505: PPUSH
51506: PPUSH
51507: PPUSH
51508: PPUSH
// result := false ;
51509: LD_ADDR_VAR 0 1
51513: PUSH
51514: LD_INT 0
51516: ST_TO_ADDR
// for i := 1 to 16 do
51517: LD_ADDR_VAR 0 2
51521: PUSH
51522: DOUBLE
51523: LD_INT 1
51525: DEC
51526: ST_TO_ADDR
51527: LD_INT 16
51529: PUSH
51530: FOR_TO
51531: IFFALSE 51730
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51533: LD_ADDR_VAR 0 3
51537: PUSH
51538: LD_INT 10
51540: PUSH
51541: LD_INT 20
51543: PUSH
51544: LD_INT 30
51546: PUSH
51547: LD_INT 40
51549: PUSH
51550: LD_INT 50
51552: PUSH
51553: LD_INT 60
51555: PUSH
51556: LD_INT 70
51558: PUSH
51559: LD_INT 80
51561: PUSH
51562: LD_INT 90
51564: PUSH
51565: LD_INT 100
51567: PUSH
51568: LD_INT 110
51570: PUSH
51571: LD_INT 120
51573: PUSH
51574: LD_INT 130
51576: PUSH
51577: LD_INT 140
51579: PUSH
51580: LD_INT 150
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PPUSH
51603: LD_INT 15
51605: PPUSH
51606: CALL_OW 12
51610: ARRAY
51611: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51612: LD_ADDR_VAR 0 4
51616: PUSH
51617: LD_INT 10
51619: PUSH
51620: LD_INT 20
51622: PUSH
51623: LD_INT 30
51625: PUSH
51626: LD_INT 40
51628: PUSH
51629: LD_INT 50
51631: PUSH
51632: LD_INT 60
51634: PUSH
51635: LD_INT 70
51637: PUSH
51638: LD_INT 80
51640: PUSH
51641: LD_INT 90
51643: PUSH
51644: LD_INT 100
51646: PUSH
51647: LD_INT 110
51649: PUSH
51650: LD_INT 120
51652: PUSH
51653: LD_INT 130
51655: PUSH
51656: LD_INT 140
51658: PUSH
51659: LD_INT 150
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PPUSH
51682: LD_INT 15
51684: PPUSH
51685: CALL_OW 12
51689: ARRAY
51690: ST_TO_ADDR
// if ValidHex ( x , y ) then
51691: LD_VAR 0 3
51695: PPUSH
51696: LD_VAR 0 4
51700: PPUSH
51701: CALL_OW 488
51705: IFFALSE 51728
// begin result := [ x , y ] ;
51707: LD_ADDR_VAR 0 1
51711: PUSH
51712: LD_VAR 0 3
51716: PUSH
51717: LD_VAR 0 4
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: ST_TO_ADDR
// break ;
51726: GO 51730
// end ; end ;
51728: GO 51530
51730: POP
51731: POP
// if result then
51732: LD_VAR 0 1
51736: IFFALSE 51796
// begin ToLua ( playSibBomb() ) ;
51738: LD_STRING playSibBomb()
51740: PPUSH
51741: CALL_OW 559
// wait ( 0 0$14 ) ;
51745: LD_INT 490
51747: PPUSH
51748: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
51752: LD_VAR 0 1
51756: PUSH
51757: LD_INT 1
51759: ARRAY
51760: PPUSH
51761: LD_VAR 0 1
51765: PUSH
51766: LD_INT 2
51768: ARRAY
51769: PPUSH
51770: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
51774: LD_VAR 0 1
51778: PUSH
51779: LD_INT 1
51781: ARRAY
51782: PPUSH
51783: LD_VAR 0 1
51787: PUSH
51788: LD_INT 2
51790: ARRAY
51791: PPUSH
51792: CALL_OW 429
// end ; end ;
51796: LD_VAR 0 1
51800: RET
// every 0 0$1 trigger StreamModeActive and sReset do
51801: LD_EXP 8
51805: PUSH
51806: LD_EXP 30
51810: AND
51811: IFFALSE 51823
51813: GO 51815
51815: DISABLE
// YouLost (  ) ;
51816: LD_STRING 
51818: PPUSH
51819: CALL_OW 104
51823: END
// every 0 0$1 trigger StreamModeActive and sFog do
51824: LD_EXP 8
51828: PUSH
51829: LD_EXP 29
51833: AND
51834: IFFALSE 51848
51836: GO 51838
51838: DISABLE
// FogOff ( your_side ) ;
51839: LD_OWVAR 2
51843: PPUSH
51844: CALL_OW 344
51848: END
// every 0 0$1 trigger StreamModeActive and sSun do
51849: LD_EXP 8
51853: PUSH
51854: LD_EXP 31
51858: AND
51859: IFFALSE 51887
51861: GO 51863
51863: DISABLE
// begin solar_recharge_percent := 0 ;
51864: LD_ADDR_OWVAR 79
51868: PUSH
51869: LD_INT 0
51871: ST_TO_ADDR
// wait ( 5 5$00 ) ;
51872: LD_INT 10500
51874: PPUSH
51875: CALL_OW 67
// solar_recharge_percent := 100 ;
51879: LD_ADDR_OWVAR 79
51883: PUSH
51884: LD_INT 100
51886: ST_TO_ADDR
// end ;
51887: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
51888: LD_EXP 8
51892: PUSH
51893: LD_EXP 32
51897: AND
51898: IFFALSE 52137
51900: GO 51902
51902: DISABLE
51903: LD_INT 0
51905: PPUSH
51906: PPUSH
51907: PPUSH
// begin tmp := [ ] ;
51908: LD_ADDR_VAR 0 3
51912: PUSH
51913: EMPTY
51914: ST_TO_ADDR
// for i := 1 to 6 do
51915: LD_ADDR_VAR 0 1
51919: PUSH
51920: DOUBLE
51921: LD_INT 1
51923: DEC
51924: ST_TO_ADDR
51925: LD_INT 6
51927: PUSH
51928: FOR_TO
51929: IFFALSE 52034
// begin uc_nation := nation_nature ;
51931: LD_ADDR_OWVAR 21
51935: PUSH
51936: LD_INT 0
51938: ST_TO_ADDR
// uc_side := 0 ;
51939: LD_ADDR_OWVAR 20
51943: PUSH
51944: LD_INT 0
51946: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51947: LD_ADDR_OWVAR 29
51951: PUSH
51952: LD_INT 12
51954: PUSH
51955: LD_INT 12
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// hc_agressivity := 20 ;
51962: LD_ADDR_OWVAR 35
51966: PUSH
51967: LD_INT 20
51969: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
51970: LD_ADDR_OWVAR 28
51974: PUSH
51975: LD_INT 17
51977: ST_TO_ADDR
// hc_gallery :=  ;
51978: LD_ADDR_OWVAR 33
51982: PUSH
51983: LD_STRING 
51985: ST_TO_ADDR
// hc_name :=  ;
51986: LD_ADDR_OWVAR 26
51990: PUSH
51991: LD_STRING 
51993: ST_TO_ADDR
// un := CreateHuman ;
51994: LD_ADDR_VAR 0 2
51998: PUSH
51999: CALL_OW 44
52003: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
52004: LD_VAR 0 2
52008: PPUSH
52009: LD_INT 1
52011: PPUSH
52012: CALL_OW 51
// tmp := tmp ^ un ;
52016: LD_ADDR_VAR 0 3
52020: PUSH
52021: LD_VAR 0 3
52025: PUSH
52026: LD_VAR 0 2
52030: ADD
52031: ST_TO_ADDR
// end ;
52032: GO 51928
52034: POP
52035: POP
// repeat wait ( 0 0$1 ) ;
52036: LD_INT 35
52038: PPUSH
52039: CALL_OW 67
// for un in tmp do
52043: LD_ADDR_VAR 0 2
52047: PUSH
52048: LD_VAR 0 3
52052: PUSH
52053: FOR_IN
52054: IFFALSE 52128
// begin if IsDead ( un ) then
52056: LD_VAR 0 2
52060: PPUSH
52061: CALL_OW 301
52065: IFFALSE 52085
// begin tmp := tmp diff un ;
52067: LD_ADDR_VAR 0 3
52071: PUSH
52072: LD_VAR 0 3
52076: PUSH
52077: LD_VAR 0 2
52081: DIFF
52082: ST_TO_ADDR
// continue ;
52083: GO 52053
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
52085: LD_VAR 0 2
52089: PPUSH
52090: LD_INT 3
52092: PUSH
52093: LD_INT 22
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PPUSH
52107: CALL_OW 69
52111: PPUSH
52112: LD_VAR 0 2
52116: PPUSH
52117: CALL_OW 74
52121: PPUSH
52122: CALL_OW 115
// end ;
52126: GO 52053
52128: POP
52129: POP
// until not tmp ;
52130: LD_VAR 0 3
52134: NOT
52135: IFFALSE 52036
// end ;
52137: PPOPN 3
52139: END
// every 0 0$1 trigger StreamModeActive and sTroll do
52140: LD_EXP 8
52144: PUSH
52145: LD_EXP 33
52149: AND
52150: IFFALSE 52204
52152: GO 52154
52154: DISABLE
// begin ToLua ( displayTroll(); ) ;
52155: LD_STRING displayTroll();
52157: PPUSH
52158: CALL_OW 559
// wait ( 3 3$00 ) ;
52162: LD_INT 6300
52164: PPUSH
52165: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52169: LD_STRING hideTroll();
52171: PPUSH
52172: CALL_OW 559
// wait ( 1 1$00 ) ;
52176: LD_INT 2100
52178: PPUSH
52179: CALL_OW 67
// ToLua ( displayTroll(); ) ;
52183: LD_STRING displayTroll();
52185: PPUSH
52186: CALL_OW 559
// wait ( 1 1$00 ) ;
52190: LD_INT 2100
52192: PPUSH
52193: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52197: LD_STRING hideTroll();
52199: PPUSH
52200: CALL_OW 559
// end ;
52204: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
52205: LD_EXP 8
52209: PUSH
52210: LD_EXP 34
52214: AND
52215: IFFALSE 52278
52217: GO 52219
52219: DISABLE
52220: LD_INT 0
52222: PPUSH
// begin p := 0 ;
52223: LD_ADDR_VAR 0 1
52227: PUSH
52228: LD_INT 0
52230: ST_TO_ADDR
// repeat game_speed := 1 ;
52231: LD_ADDR_OWVAR 65
52235: PUSH
52236: LD_INT 1
52238: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52239: LD_INT 35
52241: PPUSH
52242: CALL_OW 67
// p := p + 1 ;
52246: LD_ADDR_VAR 0 1
52250: PUSH
52251: LD_VAR 0 1
52255: PUSH
52256: LD_INT 1
52258: PLUS
52259: ST_TO_ADDR
// until p >= 60 ;
52260: LD_VAR 0 1
52264: PUSH
52265: LD_INT 60
52267: GREATEREQUAL
52268: IFFALSE 52231
// game_speed := 4 ;
52270: LD_ADDR_OWVAR 65
52274: PUSH
52275: LD_INT 4
52277: ST_TO_ADDR
// end ;
52278: PPOPN 1
52280: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
52281: LD_EXP 8
52285: PUSH
52286: LD_EXP 35
52290: AND
52291: IFFALSE 52437
52293: GO 52295
52295: DISABLE
52296: LD_INT 0
52298: PPUSH
52299: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52300: LD_ADDR_VAR 0 1
52304: PUSH
52305: LD_INT 22
52307: PUSH
52308: LD_OWVAR 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 30
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 30
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PPUSH
52349: CALL_OW 69
52353: ST_TO_ADDR
// if not depot then
52354: LD_VAR 0 1
52358: NOT
52359: IFFALSE 52363
// exit ;
52361: GO 52437
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
52363: LD_ADDR_VAR 0 2
52367: PUSH
52368: LD_VAR 0 1
52372: PUSH
52373: LD_INT 1
52375: PPUSH
52376: LD_VAR 0 1
52380: PPUSH
52381: CALL_OW 12
52385: ARRAY
52386: PPUSH
52387: CALL_OW 274
52391: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
52392: LD_VAR 0 2
52396: PPUSH
52397: LD_INT 1
52399: PPUSH
52400: LD_INT 0
52402: PPUSH
52403: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
52407: LD_VAR 0 2
52411: PPUSH
52412: LD_INT 2
52414: PPUSH
52415: LD_INT 0
52417: PPUSH
52418: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
52422: LD_VAR 0 2
52426: PPUSH
52427: LD_INT 3
52429: PPUSH
52430: LD_INT 0
52432: PPUSH
52433: CALL_OW 277
// end ;
52437: PPOPN 2
52439: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
52440: LD_EXP 8
52444: PUSH
52445: LD_EXP 36
52449: AND
52450: IFFALSE 52547
52452: GO 52454
52454: DISABLE
52455: LD_INT 0
52457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52458: LD_ADDR_VAR 0 1
52462: PUSH
52463: LD_INT 22
52465: PUSH
52466: LD_OWVAR 2
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 21
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: LD_INT 23
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: PPUSH
52507: CALL_OW 69
52511: ST_TO_ADDR
// if not tmp then
52512: LD_VAR 0 1
52516: NOT
52517: IFFALSE 52521
// exit ;
52519: GO 52547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
52521: LD_VAR 0 1
52525: PUSH
52526: LD_INT 1
52528: PPUSH
52529: LD_VAR 0 1
52533: PPUSH
52534: CALL_OW 12
52538: ARRAY
52539: PPUSH
52540: LD_INT 200
52542: PPUSH
52543: CALL_OW 234
// end ;
52547: PPOPN 1
52549: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
52550: LD_EXP 8
52554: PUSH
52555: LD_EXP 37
52559: AND
52560: IFFALSE 52639
52562: GO 52564
52564: DISABLE
52565: LD_INT 0
52567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
52568: LD_ADDR_VAR 0 1
52572: PUSH
52573: LD_INT 22
52575: PUSH
52576: LD_OWVAR 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 21
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PPUSH
52599: CALL_OW 69
52603: ST_TO_ADDR
// if not tmp then
52604: LD_VAR 0 1
52608: NOT
52609: IFFALSE 52613
// exit ;
52611: GO 52639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
52613: LD_VAR 0 1
52617: PUSH
52618: LD_INT 1
52620: PPUSH
52621: LD_VAR 0 1
52625: PPUSH
52626: CALL_OW 12
52630: ARRAY
52631: PPUSH
52632: LD_INT 60
52634: PPUSH
52635: CALL_OW 234
// end ;
52639: PPOPN 1
52641: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
52642: LD_EXP 8
52646: PUSH
52647: LD_EXP 38
52651: AND
52652: IFFALSE 52751
52654: GO 52656
52656: DISABLE
52657: LD_INT 0
52659: PPUSH
52660: PPUSH
// begin enable ;
52661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
52662: LD_ADDR_VAR 0 1
52666: PUSH
52667: LD_INT 22
52669: PUSH
52670: LD_OWVAR 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 61
52681: PUSH
52682: EMPTY
52683: LIST
52684: PUSH
52685: LD_INT 33
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: PPUSH
52700: CALL_OW 69
52704: ST_TO_ADDR
// if not tmp then
52705: LD_VAR 0 1
52709: NOT
52710: IFFALSE 52714
// exit ;
52712: GO 52751
// for i in tmp do
52714: LD_ADDR_VAR 0 2
52718: PUSH
52719: LD_VAR 0 1
52723: PUSH
52724: FOR_IN
52725: IFFALSE 52749
// if IsControledBy ( i ) then
52727: LD_VAR 0 2
52731: PPUSH
52732: CALL_OW 312
52736: IFFALSE 52747
// ComUnlink ( i ) ;
52738: LD_VAR 0 2
52742: PPUSH
52743: CALL_OW 136
52747: GO 52724
52749: POP
52750: POP
// end ;
52751: PPOPN 2
52753: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
52754: LD_EXP 8
52758: PUSH
52759: LD_EXP 39
52763: AND
52764: IFFALSE 52904
52766: GO 52768
52768: DISABLE
52769: LD_INT 0
52771: PPUSH
52772: PPUSH
// begin ToLua ( displayPowell(); ) ;
52773: LD_STRING displayPowell();
52775: PPUSH
52776: CALL_OW 559
// uc_side := 0 ;
52780: LD_ADDR_OWVAR 20
52784: PUSH
52785: LD_INT 0
52787: ST_TO_ADDR
// uc_nation := 2 ;
52788: LD_ADDR_OWVAR 21
52792: PUSH
52793: LD_INT 2
52795: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
52796: LD_ADDR_OWVAR 37
52800: PUSH
52801: LD_INT 14
52803: ST_TO_ADDR
// vc_engine := engine_siberite ;
52804: LD_ADDR_OWVAR 39
52808: PUSH
52809: LD_INT 3
52811: ST_TO_ADDR
// vc_control := control_apeman ;
52812: LD_ADDR_OWVAR 38
52816: PUSH
52817: LD_INT 5
52819: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
52820: LD_ADDR_OWVAR 40
52824: PUSH
52825: LD_INT 29
52827: ST_TO_ADDR
// un := CreateVehicle ;
52828: LD_ADDR_VAR 0 2
52832: PUSH
52833: CALL_OW 45
52837: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52838: LD_VAR 0 2
52842: PPUSH
52843: LD_INT 1
52845: PPUSH
52846: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52850: LD_INT 35
52852: PPUSH
52853: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52857: LD_VAR 0 2
52861: PPUSH
52862: LD_INT 22
52864: PUSH
52865: LD_OWVAR 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PPUSH
52874: CALL_OW 69
52878: PPUSH
52879: LD_VAR 0 2
52883: PPUSH
52884: CALL_OW 74
52888: PPUSH
52889: CALL_OW 115
// until IsDead ( un ) ;
52893: LD_VAR 0 2
52897: PPUSH
52898: CALL_OW 301
52902: IFFALSE 52850
// end ;
52904: PPOPN 2
52906: END
// every 0 0$1 trigger StreamModeActive and sStu do
52907: LD_EXP 8
52911: PUSH
52912: LD_EXP 47
52916: AND
52917: IFFALSE 52933
52919: GO 52921
52921: DISABLE
// begin ToLua ( displayStucuk(); ) ;
52922: LD_STRING displayStucuk();
52924: PPUSH
52925: CALL_OW 559
// ResetFog ;
52929: CALL_OW 335
// end ;
52933: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
52934: LD_EXP 8
52938: PUSH
52939: LD_EXP 40
52943: AND
52944: IFFALSE 53085
52946: GO 52948
52948: DISABLE
52949: LD_INT 0
52951: PPUSH
52952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52953: LD_ADDR_VAR 0 2
52957: PUSH
52958: LD_INT 22
52960: PUSH
52961: LD_OWVAR 2
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 21
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PPUSH
52984: CALL_OW 69
52988: ST_TO_ADDR
// if not tmp then
52989: LD_VAR 0 2
52993: NOT
52994: IFFALSE 52998
// exit ;
52996: GO 53085
// un := tmp [ rand ( 1 , tmp ) ] ;
52998: LD_ADDR_VAR 0 1
53002: PUSH
53003: LD_VAR 0 2
53007: PUSH
53008: LD_INT 1
53010: PPUSH
53011: LD_VAR 0 2
53015: PPUSH
53016: CALL_OW 12
53020: ARRAY
53021: ST_TO_ADDR
// SetSide ( un , 0 ) ;
53022: LD_VAR 0 1
53026: PPUSH
53027: LD_INT 0
53029: PPUSH
53030: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
53034: LD_VAR 0 1
53038: PPUSH
53039: LD_OWVAR 3
53043: PUSH
53044: LD_VAR 0 1
53048: DIFF
53049: PPUSH
53050: LD_VAR 0 1
53054: PPUSH
53055: CALL_OW 74
53059: PPUSH
53060: CALL_OW 115
// wait ( 0 0$20 ) ;
53064: LD_INT 700
53066: PPUSH
53067: CALL_OW 67
// SetSide ( un , your_side ) ;
53071: LD_VAR 0 1
53075: PPUSH
53076: LD_OWVAR 2
53080: PPUSH
53081: CALL_OW 235
// end ;
53085: PPOPN 2
53087: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
53088: LD_EXP 8
53092: PUSH
53093: LD_EXP 41
53097: AND
53098: IFFALSE 53204
53100: GO 53102
53102: DISABLE
53103: LD_INT 0
53105: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53106: LD_ADDR_VAR 0 1
53110: PUSH
53111: LD_INT 22
53113: PUSH
53114: LD_OWVAR 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 30
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 30
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PPUSH
53155: CALL_OW 69
53159: ST_TO_ADDR
// if not depot then
53160: LD_VAR 0 1
53164: NOT
53165: IFFALSE 53169
// exit ;
53167: GO 53204
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
53169: LD_VAR 0 1
53173: PUSH
53174: LD_INT 1
53176: ARRAY
53177: PPUSH
53178: CALL_OW 250
53182: PPUSH
53183: LD_VAR 0 1
53187: PUSH
53188: LD_INT 1
53190: ARRAY
53191: PPUSH
53192: CALL_OW 251
53196: PPUSH
53197: LD_INT 70
53199: PPUSH
53200: CALL_OW 495
// end ;
53204: PPOPN 1
53206: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
53207: LD_EXP 8
53211: PUSH
53212: LD_EXP 42
53216: AND
53217: IFFALSE 53428
53219: GO 53221
53221: DISABLE
53222: LD_INT 0
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53229: LD_ADDR_VAR 0 5
53233: PUSH
53234: LD_INT 22
53236: PUSH
53237: LD_OWVAR 2
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 21
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PPUSH
53260: CALL_OW 69
53264: ST_TO_ADDR
// if not tmp then
53265: LD_VAR 0 5
53269: NOT
53270: IFFALSE 53274
// exit ;
53272: GO 53428
// for i in tmp do
53274: LD_ADDR_VAR 0 1
53278: PUSH
53279: LD_VAR 0 5
53283: PUSH
53284: FOR_IN
53285: IFFALSE 53426
// begin d := rand ( 0 , 5 ) ;
53287: LD_ADDR_VAR 0 4
53291: PUSH
53292: LD_INT 0
53294: PPUSH
53295: LD_INT 5
53297: PPUSH
53298: CALL_OW 12
53302: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
53303: LD_ADDR_VAR 0 2
53307: PUSH
53308: LD_VAR 0 1
53312: PPUSH
53313: CALL_OW 250
53317: PPUSH
53318: LD_VAR 0 4
53322: PPUSH
53323: LD_INT 3
53325: PPUSH
53326: LD_INT 12
53328: PPUSH
53329: CALL_OW 12
53333: PPUSH
53334: CALL_OW 272
53338: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
53339: LD_ADDR_VAR 0 3
53343: PUSH
53344: LD_VAR 0 1
53348: PPUSH
53349: CALL_OW 251
53353: PPUSH
53354: LD_VAR 0 4
53358: PPUSH
53359: LD_INT 3
53361: PPUSH
53362: LD_INT 12
53364: PPUSH
53365: CALL_OW 12
53369: PPUSH
53370: CALL_OW 273
53374: ST_TO_ADDR
// if ValidHex ( x , y ) then
53375: LD_VAR 0 2
53379: PPUSH
53380: LD_VAR 0 3
53384: PPUSH
53385: CALL_OW 488
53389: IFFALSE 53424
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
53391: LD_VAR 0 1
53395: PPUSH
53396: LD_VAR 0 2
53400: PPUSH
53401: LD_VAR 0 3
53405: PPUSH
53406: LD_INT 3
53408: PPUSH
53409: LD_INT 6
53411: PPUSH
53412: CALL_OW 12
53416: PPUSH
53417: LD_INT 1
53419: PPUSH
53420: CALL_OW 483
// end ;
53424: GO 53284
53426: POP
53427: POP
// end ;
53428: PPOPN 5
53430: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
53431: LD_EXP 8
53435: PUSH
53436: LD_EXP 43
53440: AND
53441: IFFALSE 53535
53443: GO 53445
53445: DISABLE
53446: LD_INT 0
53448: PPUSH
53449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
53450: LD_ADDR_VAR 0 2
53454: PUSH
53455: LD_INT 22
53457: PUSH
53458: LD_OWVAR 2
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 32
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 21
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: PPUSH
53492: CALL_OW 69
53496: ST_TO_ADDR
// if not tmp then
53497: LD_VAR 0 2
53501: NOT
53502: IFFALSE 53506
// exit ;
53504: GO 53535
// for i in tmp do
53506: LD_ADDR_VAR 0 1
53510: PUSH
53511: LD_VAR 0 2
53515: PUSH
53516: FOR_IN
53517: IFFALSE 53533
// SetFuel ( i , 0 ) ;
53519: LD_VAR 0 1
53523: PPUSH
53524: LD_INT 0
53526: PPUSH
53527: CALL_OW 240
53531: GO 53516
53533: POP
53534: POP
// end ;
53535: PPOPN 2
53537: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
53538: LD_EXP 8
53542: PUSH
53543: LD_EXP 44
53547: AND
53548: IFFALSE 53614
53550: GO 53552
53552: DISABLE
53553: LD_INT 0
53555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53556: LD_ADDR_VAR 0 1
53560: PUSH
53561: LD_INT 22
53563: PUSH
53564: LD_OWVAR 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 30
53575: PUSH
53576: LD_INT 29
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PPUSH
53587: CALL_OW 69
53591: ST_TO_ADDR
// if not tmp then
53592: LD_VAR 0 1
53596: NOT
53597: IFFALSE 53601
// exit ;
53599: GO 53614
// DestroyUnit ( tmp [ 1 ] ) ;
53601: LD_VAR 0 1
53605: PUSH
53606: LD_INT 1
53608: ARRAY
53609: PPUSH
53610: CALL_OW 65
// end ;
53614: PPOPN 1
53616: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
53617: LD_EXP 8
53621: PUSH
53622: LD_EXP 46
53626: AND
53627: IFFALSE 53756
53629: GO 53631
53631: DISABLE
53632: LD_INT 0
53634: PPUSH
// begin uc_side := 0 ;
53635: LD_ADDR_OWVAR 20
53639: PUSH
53640: LD_INT 0
53642: ST_TO_ADDR
// uc_nation := nation_arabian ;
53643: LD_ADDR_OWVAR 21
53647: PUSH
53648: LD_INT 2
53650: ST_TO_ADDR
// hc_gallery :=  ;
53651: LD_ADDR_OWVAR 33
53655: PUSH
53656: LD_STRING 
53658: ST_TO_ADDR
// hc_name :=  ;
53659: LD_ADDR_OWVAR 26
53663: PUSH
53664: LD_STRING 
53666: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
53667: LD_INT 1
53669: PPUSH
53670: LD_INT 11
53672: PPUSH
53673: LD_INT 10
53675: PPUSH
53676: CALL_OW 380
// un := CreateHuman ;
53680: LD_ADDR_VAR 0 1
53684: PUSH
53685: CALL_OW 44
53689: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53690: LD_VAR 0 1
53694: PPUSH
53695: LD_INT 1
53697: PPUSH
53698: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53702: LD_INT 35
53704: PPUSH
53705: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53709: LD_VAR 0 1
53713: PPUSH
53714: LD_INT 22
53716: PUSH
53717: LD_OWVAR 2
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PPUSH
53726: CALL_OW 69
53730: PPUSH
53731: LD_VAR 0 1
53735: PPUSH
53736: CALL_OW 74
53740: PPUSH
53741: CALL_OW 115
// until IsDead ( un ) ;
53745: LD_VAR 0 1
53749: PPUSH
53750: CALL_OW 301
53754: IFFALSE 53702
// end ;
53756: PPOPN 1
53758: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
53759: LD_EXP 8
53763: PUSH
53764: LD_EXP 48
53768: AND
53769: IFFALSE 53781
53771: GO 53773
53773: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
53774: LD_STRING earthquake(getX(game), 0, 32)
53776: PPUSH
53777: CALL_OW 559
53781: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
53782: LD_EXP 8
53786: PUSH
53787: LD_EXP 49
53791: AND
53792: IFFALSE 53883
53794: GO 53796
53796: DISABLE
53797: LD_INT 0
53799: PPUSH
// begin enable ;
53800: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
53801: LD_ADDR_VAR 0 1
53805: PUSH
53806: LD_INT 22
53808: PUSH
53809: LD_OWVAR 2
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 21
53820: PUSH
53821: LD_INT 2
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 33
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: PPUSH
53843: CALL_OW 69
53847: ST_TO_ADDR
// if not tmp then
53848: LD_VAR 0 1
53852: NOT
53853: IFFALSE 53857
// exit ;
53855: GO 53883
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53857: LD_VAR 0 1
53861: PUSH
53862: LD_INT 1
53864: PPUSH
53865: LD_VAR 0 1
53869: PPUSH
53870: CALL_OW 12
53874: ARRAY
53875: PPUSH
53876: LD_INT 1
53878: PPUSH
53879: CALL_OW 234
// end ;
53883: PPOPN 1
53885: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
53886: LD_EXP 8
53890: PUSH
53891: LD_EXP 50
53895: AND
53896: IFFALSE 54037
53898: GO 53900
53900: DISABLE
53901: LD_INT 0
53903: PPUSH
53904: PPUSH
53905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53906: LD_ADDR_VAR 0 3
53910: PUSH
53911: LD_INT 22
53913: PUSH
53914: LD_OWVAR 2
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 25
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PPUSH
53937: CALL_OW 69
53941: ST_TO_ADDR
// if not tmp then
53942: LD_VAR 0 3
53946: NOT
53947: IFFALSE 53951
// exit ;
53949: GO 54037
// un := tmp [ rand ( 1 , tmp ) ] ;
53951: LD_ADDR_VAR 0 2
53955: PUSH
53956: LD_VAR 0 3
53960: PUSH
53961: LD_INT 1
53963: PPUSH
53964: LD_VAR 0 3
53968: PPUSH
53969: CALL_OW 12
53973: ARRAY
53974: ST_TO_ADDR
// if Crawls ( un ) then
53975: LD_VAR 0 2
53979: PPUSH
53980: CALL_OW 318
53984: IFFALSE 53995
// ComWalk ( un ) ;
53986: LD_VAR 0 2
53990: PPUSH
53991: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
53995: LD_VAR 0 2
53999: PPUSH
54000: LD_INT 9
54002: PPUSH
54003: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
54007: LD_INT 28
54009: PPUSH
54010: LD_OWVAR 2
54014: PPUSH
54015: LD_INT 2
54017: PPUSH
54018: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
54022: LD_INT 29
54024: PPUSH
54025: LD_OWVAR 2
54029: PPUSH
54030: LD_INT 2
54032: PPUSH
54033: CALL_OW 322
// end ;
54037: PPOPN 3
54039: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
54040: LD_EXP 8
54044: PUSH
54045: LD_EXP 51
54049: AND
54050: IFFALSE 54161
54052: GO 54054
54054: DISABLE
54055: LD_INT 0
54057: PPUSH
54058: PPUSH
54059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54060: LD_ADDR_VAR 0 3
54064: PUSH
54065: LD_INT 22
54067: PUSH
54068: LD_OWVAR 2
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 25
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PPUSH
54091: CALL_OW 69
54095: ST_TO_ADDR
// if not tmp then
54096: LD_VAR 0 3
54100: NOT
54101: IFFALSE 54105
// exit ;
54103: GO 54161
// un := tmp [ rand ( 1 , tmp ) ] ;
54105: LD_ADDR_VAR 0 2
54109: PUSH
54110: LD_VAR 0 3
54114: PUSH
54115: LD_INT 1
54117: PPUSH
54118: LD_VAR 0 3
54122: PPUSH
54123: CALL_OW 12
54127: ARRAY
54128: ST_TO_ADDR
// if Crawls ( un ) then
54129: LD_VAR 0 2
54133: PPUSH
54134: CALL_OW 318
54138: IFFALSE 54149
// ComWalk ( un ) ;
54140: LD_VAR 0 2
54144: PPUSH
54145: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54149: LD_VAR 0 2
54153: PPUSH
54154: LD_INT 8
54156: PPUSH
54157: CALL_OW 336
// end ;
54161: PPOPN 3
54163: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
54164: LD_EXP 8
54168: PUSH
54169: LD_EXP 52
54173: AND
54174: IFFALSE 54318
54176: GO 54178
54178: DISABLE
54179: LD_INT 0
54181: PPUSH
54182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
54183: LD_ADDR_VAR 0 2
54187: PUSH
54188: LD_INT 22
54190: PUSH
54191: LD_OWVAR 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 21
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: LD_INT 34
54215: PUSH
54216: LD_INT 12
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 34
54225: PUSH
54226: LD_INT 51
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 34
54235: PUSH
54236: LD_INT 32
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: PPUSH
54254: CALL_OW 69
54258: ST_TO_ADDR
// if not tmp then
54259: LD_VAR 0 2
54263: NOT
54264: IFFALSE 54268
// exit ;
54266: GO 54318
// for i in tmp do
54268: LD_ADDR_VAR 0 1
54272: PUSH
54273: LD_VAR 0 2
54277: PUSH
54278: FOR_IN
54279: IFFALSE 54316
// if GetCargo ( i , mat_artifact ) = 0 then
54281: LD_VAR 0 1
54285: PPUSH
54286: LD_INT 4
54288: PPUSH
54289: CALL_OW 289
54293: PUSH
54294: LD_INT 0
54296: EQUAL
54297: IFFALSE 54314
// SetCargo ( i , mat_siberit , 100 ) ;
54299: LD_VAR 0 1
54303: PPUSH
54304: LD_INT 3
54306: PPUSH
54307: LD_INT 100
54309: PPUSH
54310: CALL_OW 290
54314: GO 54278
54316: POP
54317: POP
// end ;
54318: PPOPN 2
54320: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
54321: LD_EXP 8
54325: PUSH
54326: LD_EXP 53
54330: AND
54331: IFFALSE 54514
54333: GO 54335
54335: DISABLE
54336: LD_INT 0
54338: PPUSH
54339: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54340: LD_ADDR_VAR 0 2
54344: PUSH
54345: LD_INT 22
54347: PUSH
54348: LD_OWVAR 2
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PPUSH
54357: CALL_OW 69
54361: ST_TO_ADDR
// if not tmp then
54362: LD_VAR 0 2
54366: NOT
54367: IFFALSE 54371
// exit ;
54369: GO 54514
// for i := 1 to 2 do
54371: LD_ADDR_VAR 0 1
54375: PUSH
54376: DOUBLE
54377: LD_INT 1
54379: DEC
54380: ST_TO_ADDR
54381: LD_INT 2
54383: PUSH
54384: FOR_TO
54385: IFFALSE 54512
// begin uc_side := your_side ;
54387: LD_ADDR_OWVAR 20
54391: PUSH
54392: LD_OWVAR 2
54396: ST_TO_ADDR
// uc_nation := nation_american ;
54397: LD_ADDR_OWVAR 21
54401: PUSH
54402: LD_INT 1
54404: ST_TO_ADDR
// vc_chassis := us_morphling ;
54405: LD_ADDR_OWVAR 37
54409: PUSH
54410: LD_INT 5
54412: ST_TO_ADDR
// vc_engine := engine_siberite ;
54413: LD_ADDR_OWVAR 39
54417: PUSH
54418: LD_INT 3
54420: ST_TO_ADDR
// vc_control := control_computer ;
54421: LD_ADDR_OWVAR 38
54425: PUSH
54426: LD_INT 3
54428: ST_TO_ADDR
// vc_weapon := us_double_laser ;
54429: LD_ADDR_OWVAR 40
54433: PUSH
54434: LD_INT 10
54436: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
54437: LD_VAR 0 2
54441: PUSH
54442: LD_INT 1
54444: ARRAY
54445: PPUSH
54446: CALL_OW 310
54450: NOT
54451: IFFALSE 54498
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
54453: CALL_OW 45
54457: PPUSH
54458: LD_VAR 0 2
54462: PUSH
54463: LD_INT 1
54465: ARRAY
54466: PPUSH
54467: CALL_OW 250
54471: PPUSH
54472: LD_VAR 0 2
54476: PUSH
54477: LD_INT 1
54479: ARRAY
54480: PPUSH
54481: CALL_OW 251
54485: PPUSH
54486: LD_INT 12
54488: PPUSH
54489: LD_INT 1
54491: PPUSH
54492: CALL_OW 50
54496: GO 54510
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
54498: CALL_OW 45
54502: PPUSH
54503: LD_INT 1
54505: PPUSH
54506: CALL_OW 51
// end ;
54510: GO 54384
54512: POP
54513: POP
// end ;
54514: PPOPN 2
54516: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
54517: LD_EXP 8
54521: PUSH
54522: LD_EXP 54
54526: AND
54527: IFFALSE 54749
54529: GO 54531
54531: DISABLE
54532: LD_INT 0
54534: PPUSH
54535: PPUSH
54536: PPUSH
54537: PPUSH
54538: PPUSH
54539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54540: LD_ADDR_VAR 0 6
54544: PUSH
54545: LD_INT 22
54547: PUSH
54548: LD_OWVAR 2
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 21
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 3
54569: PUSH
54570: LD_INT 23
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: PPUSH
54589: CALL_OW 69
54593: ST_TO_ADDR
// if not tmp then
54594: LD_VAR 0 6
54598: NOT
54599: IFFALSE 54603
// exit ;
54601: GO 54749
// s1 := rand ( 1 , 4 ) ;
54603: LD_ADDR_VAR 0 2
54607: PUSH
54608: LD_INT 1
54610: PPUSH
54611: LD_INT 4
54613: PPUSH
54614: CALL_OW 12
54618: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
54619: LD_ADDR_VAR 0 4
54623: PUSH
54624: LD_VAR 0 6
54628: PUSH
54629: LD_INT 1
54631: ARRAY
54632: PPUSH
54633: LD_VAR 0 2
54637: PPUSH
54638: CALL_OW 259
54642: ST_TO_ADDR
// if s1 = 1 then
54643: LD_VAR 0 2
54647: PUSH
54648: LD_INT 1
54650: EQUAL
54651: IFFALSE 54671
// s2 := rand ( 2 , 4 ) else
54653: LD_ADDR_VAR 0 3
54657: PUSH
54658: LD_INT 2
54660: PPUSH
54661: LD_INT 4
54663: PPUSH
54664: CALL_OW 12
54668: ST_TO_ADDR
54669: GO 54679
// s2 := 1 ;
54671: LD_ADDR_VAR 0 3
54675: PUSH
54676: LD_INT 1
54678: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
54679: LD_ADDR_VAR 0 5
54683: PUSH
54684: LD_VAR 0 6
54688: PUSH
54689: LD_INT 1
54691: ARRAY
54692: PPUSH
54693: LD_VAR 0 3
54697: PPUSH
54698: CALL_OW 259
54702: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
54703: LD_VAR 0 6
54707: PUSH
54708: LD_INT 1
54710: ARRAY
54711: PPUSH
54712: LD_VAR 0 2
54716: PPUSH
54717: LD_VAR 0 5
54721: PPUSH
54722: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
54726: LD_VAR 0 6
54730: PUSH
54731: LD_INT 1
54733: ARRAY
54734: PPUSH
54735: LD_VAR 0 3
54739: PPUSH
54740: LD_VAR 0 4
54744: PPUSH
54745: CALL_OW 237
// end ;
54749: PPOPN 6
54751: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
54752: LD_EXP 8
54756: PUSH
54757: LD_EXP 55
54761: AND
54762: IFFALSE 54841
54764: GO 54766
54766: DISABLE
54767: LD_INT 0
54769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
54770: LD_ADDR_VAR 0 1
54774: PUSH
54775: LD_INT 22
54777: PUSH
54778: LD_OWVAR 2
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 30
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PPUSH
54801: CALL_OW 69
54805: ST_TO_ADDR
// if not tmp then
54806: LD_VAR 0 1
54810: NOT
54811: IFFALSE 54815
// exit ;
54813: GO 54841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54815: LD_VAR 0 1
54819: PUSH
54820: LD_INT 1
54822: PPUSH
54823: LD_VAR 0 1
54827: PPUSH
54828: CALL_OW 12
54832: ARRAY
54833: PPUSH
54834: LD_INT 1
54836: PPUSH
54837: CALL_OW 234
// end ;
54841: PPOPN 1
54843: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
54844: LD_EXP 8
54848: PUSH
54849: LD_EXP 56
54853: AND
54854: IFFALSE 54966
54856: GO 54858
54858: DISABLE
54859: LD_INT 0
54861: PPUSH
54862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
54863: LD_ADDR_VAR 0 2
54867: PUSH
54868: LD_INT 22
54870: PUSH
54871: LD_OWVAR 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: PUSH
54883: LD_INT 30
54885: PUSH
54886: LD_INT 27
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 30
54895: PUSH
54896: LD_INT 26
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 30
54905: PUSH
54906: LD_INT 28
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PPUSH
54923: CALL_OW 69
54927: ST_TO_ADDR
// if not tmp then
54928: LD_VAR 0 2
54932: NOT
54933: IFFALSE 54937
// exit ;
54935: GO 54966
// for i in tmp do
54937: LD_ADDR_VAR 0 1
54941: PUSH
54942: LD_VAR 0 2
54946: PUSH
54947: FOR_IN
54948: IFFALSE 54964
// SetLives ( i , 1 ) ;
54950: LD_VAR 0 1
54954: PPUSH
54955: LD_INT 1
54957: PPUSH
54958: CALL_OW 234
54962: GO 54947
54964: POP
54965: POP
// end ;
54966: PPOPN 2
54968: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
54969: LD_EXP 8
54973: PUSH
54974: LD_EXP 57
54978: AND
54979: IFFALSE 55266
54981: GO 54983
54983: DISABLE
54984: LD_INT 0
54986: PPUSH
54987: PPUSH
54988: PPUSH
// begin i := rand ( 1 , 7 ) ;
54989: LD_ADDR_VAR 0 1
54993: PUSH
54994: LD_INT 1
54996: PPUSH
54997: LD_INT 7
54999: PPUSH
55000: CALL_OW 12
55004: ST_TO_ADDR
// case i of 1 :
55005: LD_VAR 0 1
55009: PUSH
55010: LD_INT 1
55012: DOUBLE
55013: EQUAL
55014: IFTRUE 55018
55016: GO 55028
55018: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
55019: LD_STRING earthquake(getX(game), 0, 32)
55021: PPUSH
55022: CALL_OW 559
55026: GO 55266
55028: LD_INT 2
55030: DOUBLE
55031: EQUAL
55032: IFTRUE 55036
55034: GO 55050
55036: POP
// begin ToLua ( displayStucuk(); ) ;
55037: LD_STRING displayStucuk();
55039: PPUSH
55040: CALL_OW 559
// ResetFog ;
55044: CALL_OW 335
// end ; 3 :
55048: GO 55266
55050: LD_INT 3
55052: DOUBLE
55053: EQUAL
55054: IFTRUE 55058
55056: GO 55162
55058: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55059: LD_ADDR_VAR 0 2
55063: PUSH
55064: LD_INT 22
55066: PUSH
55067: LD_OWVAR 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 25
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PPUSH
55090: CALL_OW 69
55094: ST_TO_ADDR
// if not tmp then
55095: LD_VAR 0 2
55099: NOT
55100: IFFALSE 55104
// exit ;
55102: GO 55266
// un := tmp [ rand ( 1 , tmp ) ] ;
55104: LD_ADDR_VAR 0 3
55108: PUSH
55109: LD_VAR 0 2
55113: PUSH
55114: LD_INT 1
55116: PPUSH
55117: LD_VAR 0 2
55121: PPUSH
55122: CALL_OW 12
55126: ARRAY
55127: ST_TO_ADDR
// if Crawls ( un ) then
55128: LD_VAR 0 3
55132: PPUSH
55133: CALL_OW 318
55137: IFFALSE 55148
// ComWalk ( un ) ;
55139: LD_VAR 0 3
55143: PPUSH
55144: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55148: LD_VAR 0 3
55152: PPUSH
55153: LD_INT 8
55155: PPUSH
55156: CALL_OW 336
// end ; 4 :
55160: GO 55266
55162: LD_INT 4
55164: DOUBLE
55165: EQUAL
55166: IFTRUE 55170
55168: GO 55244
55170: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55171: LD_ADDR_VAR 0 2
55175: PUSH
55176: LD_INT 22
55178: PUSH
55179: LD_OWVAR 2
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 30
55190: PUSH
55191: LD_INT 29
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PPUSH
55202: CALL_OW 69
55206: ST_TO_ADDR
// if not tmp then
55207: LD_VAR 0 2
55211: NOT
55212: IFFALSE 55216
// exit ;
55214: GO 55266
// CenterNowOnUnits ( tmp [ 1 ] ) ;
55216: LD_VAR 0 2
55220: PUSH
55221: LD_INT 1
55223: ARRAY
55224: PPUSH
55225: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
55229: LD_VAR 0 2
55233: PUSH
55234: LD_INT 1
55236: ARRAY
55237: PPUSH
55238: CALL_OW 65
// end ; 5 .. 7 :
55242: GO 55266
55244: LD_INT 5
55246: DOUBLE
55247: GREATEREQUAL
55248: IFFALSE 55256
55250: LD_INT 7
55252: DOUBLE
55253: LESSEQUAL
55254: IFTRUE 55258
55256: GO 55265
55258: POP
// StreamSibBomb ; end ;
55259: CALL 51503 0 0
55263: GO 55266
55265: POP
// end ;
55266: PPOPN 3
55268: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
55269: LD_EXP 8
55273: PUSH
55274: LD_EXP 58
55278: AND
55279: IFFALSE 55435
55281: GO 55283
55283: DISABLE
55284: LD_INT 0
55286: PPUSH
55287: PPUSH
55288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
55289: LD_ADDR_VAR 0 2
55293: PUSH
55294: LD_INT 81
55296: PUSH
55297: LD_OWVAR 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: LD_INT 21
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 21
55321: PUSH
55322: LD_INT 2
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: LIST
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PPUSH
55338: CALL_OW 69
55342: ST_TO_ADDR
// if not tmp then
55343: LD_VAR 0 2
55347: NOT
55348: IFFALSE 55352
// exit ;
55350: GO 55435
// p := 0 ;
55352: LD_ADDR_VAR 0 3
55356: PUSH
55357: LD_INT 0
55359: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55360: LD_INT 35
55362: PPUSH
55363: CALL_OW 67
// p := p + 1 ;
55367: LD_ADDR_VAR 0 3
55371: PUSH
55372: LD_VAR 0 3
55376: PUSH
55377: LD_INT 1
55379: PLUS
55380: ST_TO_ADDR
// for i in tmp do
55381: LD_ADDR_VAR 0 1
55385: PUSH
55386: LD_VAR 0 2
55390: PUSH
55391: FOR_IN
55392: IFFALSE 55423
// if GetLives ( i ) < 1000 then
55394: LD_VAR 0 1
55398: PPUSH
55399: CALL_OW 256
55403: PUSH
55404: LD_INT 1000
55406: LESS
55407: IFFALSE 55421
// SetLives ( i , 1000 ) ;
55409: LD_VAR 0 1
55413: PPUSH
55414: LD_INT 1000
55416: PPUSH
55417: CALL_OW 234
55421: GO 55391
55423: POP
55424: POP
// until p > 20 ;
55425: LD_VAR 0 3
55429: PUSH
55430: LD_INT 20
55432: GREATER
55433: IFFALSE 55360
// end ;
55435: PPOPN 3
55437: END
// every 0 0$1 trigger StreamModeActive and sTime do
55438: LD_EXP 8
55442: PUSH
55443: LD_EXP 59
55447: AND
55448: IFFALSE 55483
55450: GO 55452
55452: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
55453: LD_INT 28
55455: PPUSH
55456: LD_OWVAR 2
55460: PPUSH
55461: LD_INT 2
55463: PPUSH
55464: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
55468: LD_INT 30
55470: PPUSH
55471: LD_OWVAR 2
55475: PPUSH
55476: LD_INT 2
55478: PPUSH
55479: CALL_OW 322
// end ;
55483: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
55484: LD_EXP 8
55488: PUSH
55489: LD_EXP 60
55493: AND
55494: IFFALSE 55615
55496: GO 55498
55498: DISABLE
55499: LD_INT 0
55501: PPUSH
55502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55503: LD_ADDR_VAR 0 2
55507: PUSH
55508: LD_INT 22
55510: PUSH
55511: LD_OWVAR 2
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 21
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 3
55532: PUSH
55533: LD_INT 23
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: LIST
55551: PPUSH
55552: CALL_OW 69
55556: ST_TO_ADDR
// if not tmp then
55557: LD_VAR 0 2
55561: NOT
55562: IFFALSE 55566
// exit ;
55564: GO 55615
// for i in tmp do
55566: LD_ADDR_VAR 0 1
55570: PUSH
55571: LD_VAR 0 2
55575: PUSH
55576: FOR_IN
55577: IFFALSE 55613
// begin if Crawls ( i ) then
55579: LD_VAR 0 1
55583: PPUSH
55584: CALL_OW 318
55588: IFFALSE 55599
// ComWalk ( i ) ;
55590: LD_VAR 0 1
55594: PPUSH
55595: CALL_OW 138
// SetClass ( i , 2 ) ;
55599: LD_VAR 0 1
55603: PPUSH
55604: LD_INT 2
55606: PPUSH
55607: CALL_OW 336
// end ;
55611: GO 55576
55613: POP
55614: POP
// end ;
55615: PPOPN 2
55617: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
55618: LD_EXP 8
55622: PUSH
55623: LD_EXP 61
55627: AND
55628: IFFALSE 55916
55630: GO 55632
55632: DISABLE
55633: LD_INT 0
55635: PPUSH
55636: PPUSH
55637: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
55638: LD_OWVAR 2
55642: PPUSH
55643: LD_INT 9
55645: PPUSH
55646: LD_INT 1
55648: PPUSH
55649: LD_INT 1
55651: PPUSH
55652: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
55656: LD_INT 9
55658: PPUSH
55659: LD_OWVAR 2
55663: PPUSH
55664: CALL_OW 343
// uc_side := 9 ;
55668: LD_ADDR_OWVAR 20
55672: PUSH
55673: LD_INT 9
55675: ST_TO_ADDR
// uc_nation := 2 ;
55676: LD_ADDR_OWVAR 21
55680: PUSH
55681: LD_INT 2
55683: ST_TO_ADDR
// hc_name := Dark Warrior ;
55684: LD_ADDR_OWVAR 26
55688: PUSH
55689: LD_STRING Dark Warrior
55691: ST_TO_ADDR
// hc_gallery :=  ;
55692: LD_ADDR_OWVAR 33
55696: PUSH
55697: LD_STRING 
55699: ST_TO_ADDR
// hc_noskilllimit := true ;
55700: LD_ADDR_OWVAR 76
55704: PUSH
55705: LD_INT 1
55707: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
55708: LD_ADDR_OWVAR 31
55712: PUSH
55713: LD_INT 30
55715: PUSH
55716: LD_INT 30
55718: PUSH
55719: LD_INT 30
55721: PUSH
55722: LD_INT 30
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: ST_TO_ADDR
// un := CreateHuman ;
55731: LD_ADDR_VAR 0 3
55735: PUSH
55736: CALL_OW 44
55740: ST_TO_ADDR
// hc_noskilllimit := false ;
55741: LD_ADDR_OWVAR 76
55745: PUSH
55746: LD_INT 0
55748: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55749: LD_VAR 0 3
55753: PPUSH
55754: LD_INT 1
55756: PPUSH
55757: CALL_OW 51
// ToLua ( playRanger() ) ;
55761: LD_STRING playRanger()
55763: PPUSH
55764: CALL_OW 559
// p := 0 ;
55768: LD_ADDR_VAR 0 2
55772: PUSH
55773: LD_INT 0
55775: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55776: LD_INT 35
55778: PPUSH
55779: CALL_OW 67
// p := p + 1 ;
55783: LD_ADDR_VAR 0 2
55787: PUSH
55788: LD_VAR 0 2
55792: PUSH
55793: LD_INT 1
55795: PLUS
55796: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
55797: LD_VAR 0 3
55801: PPUSH
55802: CALL_OW 256
55806: PUSH
55807: LD_INT 1000
55809: LESS
55810: IFFALSE 55824
// SetLives ( un , 1000 ) ;
55812: LD_VAR 0 3
55816: PPUSH
55817: LD_INT 1000
55819: PPUSH
55820: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
55824: LD_VAR 0 3
55828: PPUSH
55829: LD_INT 81
55831: PUSH
55832: LD_OWVAR 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 91
55843: PUSH
55844: LD_VAR 0 3
55848: PUSH
55849: LD_INT 30
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PPUSH
55861: CALL_OW 69
55865: PPUSH
55866: LD_VAR 0 3
55870: PPUSH
55871: CALL_OW 74
55875: PPUSH
55876: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
55880: LD_VAR 0 2
55884: PUSH
55885: LD_INT 80
55887: GREATER
55888: PUSH
55889: LD_VAR 0 3
55893: PPUSH
55894: CALL_OW 301
55898: OR
55899: IFFALSE 55776
// if un then
55901: LD_VAR 0 3
55905: IFFALSE 55916
// RemoveUnit ( un ) ;
55907: LD_VAR 0 3
55911: PPUSH
55912: CALL_OW 64
// end ;
55916: PPOPN 3
55918: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
55919: LD_EXP 62
55923: IFFALSE 56039
55925: GO 55927
55927: DISABLE
55928: LD_INT 0
55930: PPUSH
55931: PPUSH
55932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55933: LD_ADDR_VAR 0 2
55937: PUSH
55938: LD_INT 81
55940: PUSH
55941: LD_OWVAR 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 21
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PPUSH
55964: CALL_OW 69
55968: ST_TO_ADDR
// ToLua ( playComputer() ) ;
55969: LD_STRING playComputer()
55971: PPUSH
55972: CALL_OW 559
// if not tmp then
55976: LD_VAR 0 2
55980: NOT
55981: IFFALSE 55985
// exit ;
55983: GO 56039
// for i in tmp do
55985: LD_ADDR_VAR 0 1
55989: PUSH
55990: LD_VAR 0 2
55994: PUSH
55995: FOR_IN
55996: IFFALSE 56037
// for j := 1 to 4 do
55998: LD_ADDR_VAR 0 3
56002: PUSH
56003: DOUBLE
56004: LD_INT 1
56006: DEC
56007: ST_TO_ADDR
56008: LD_INT 4
56010: PUSH
56011: FOR_TO
56012: IFFALSE 56033
// SetSkill ( i , j , 10 ) ;
56014: LD_VAR 0 1
56018: PPUSH
56019: LD_VAR 0 3
56023: PPUSH
56024: LD_INT 10
56026: PPUSH
56027: CALL_OW 237
56031: GO 56011
56033: POP
56034: POP
56035: GO 55995
56037: POP
56038: POP
// end ;
56039: PPOPN 3
56041: END
// every 0 0$1 trigger s30 do var i , tmp ;
56042: LD_EXP 63
56046: IFFALSE 56115
56048: GO 56050
56050: DISABLE
56051: LD_INT 0
56053: PPUSH
56054: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56055: LD_ADDR_VAR 0 2
56059: PUSH
56060: LD_INT 22
56062: PUSH
56063: LD_OWVAR 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PPUSH
56072: CALL_OW 69
56076: ST_TO_ADDR
// if not tmp then
56077: LD_VAR 0 2
56081: NOT
56082: IFFALSE 56086
// exit ;
56084: GO 56115
// for i in tmp do
56086: LD_ADDR_VAR 0 1
56090: PUSH
56091: LD_VAR 0 2
56095: PUSH
56096: FOR_IN
56097: IFFALSE 56113
// SetLives ( i , 300 ) ;
56099: LD_VAR 0 1
56103: PPUSH
56104: LD_INT 300
56106: PPUSH
56107: CALL_OW 234
56111: GO 56096
56113: POP
56114: POP
// end ;
56115: PPOPN 2
56117: END
// every 0 0$1 trigger s60 do var i , tmp ;
56118: LD_EXP 64
56122: IFFALSE 56191
56124: GO 56126
56126: DISABLE
56127: LD_INT 0
56129: PPUSH
56130: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56131: LD_ADDR_VAR 0 2
56135: PUSH
56136: LD_INT 22
56138: PUSH
56139: LD_OWVAR 2
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PPUSH
56148: CALL_OW 69
56152: ST_TO_ADDR
// if not tmp then
56153: LD_VAR 0 2
56157: NOT
56158: IFFALSE 56162
// exit ;
56160: GO 56191
// for i in tmp do
56162: LD_ADDR_VAR 0 1
56166: PUSH
56167: LD_VAR 0 2
56171: PUSH
56172: FOR_IN
56173: IFFALSE 56189
// SetLives ( i , 600 ) ;
56175: LD_VAR 0 1
56179: PPUSH
56180: LD_INT 600
56182: PPUSH
56183: CALL_OW 234
56187: GO 56172
56189: POP
56190: POP
// end ;
56191: PPOPN 2
56193: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56194: LD_INT 0
56196: PPUSH
// case cmd of 301 :
56197: LD_VAR 0 1
56201: PUSH
56202: LD_INT 301
56204: DOUBLE
56205: EQUAL
56206: IFTRUE 56210
56208: GO 56242
56210: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
56211: LD_VAR 0 6
56215: PPUSH
56216: LD_VAR 0 7
56220: PPUSH
56221: LD_VAR 0 8
56225: PPUSH
56226: LD_VAR 0 4
56230: PPUSH
56231: LD_VAR 0 5
56235: PPUSH
56236: CALL 57451 0 5
56240: GO 56363
56242: LD_INT 302
56244: DOUBLE
56245: EQUAL
56246: IFTRUE 56250
56248: GO 56287
56250: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
56251: LD_VAR 0 6
56255: PPUSH
56256: LD_VAR 0 7
56260: PPUSH
56261: LD_VAR 0 8
56265: PPUSH
56266: LD_VAR 0 9
56270: PPUSH
56271: LD_VAR 0 4
56275: PPUSH
56276: LD_VAR 0 5
56280: PPUSH
56281: CALL 57542 0 6
56285: GO 56363
56287: LD_INT 303
56289: DOUBLE
56290: EQUAL
56291: IFTRUE 56295
56293: GO 56332
56295: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
56296: LD_VAR 0 6
56300: PPUSH
56301: LD_VAR 0 7
56305: PPUSH
56306: LD_VAR 0 8
56310: PPUSH
56311: LD_VAR 0 9
56315: PPUSH
56316: LD_VAR 0 4
56320: PPUSH
56321: LD_VAR 0 5
56325: PPUSH
56326: CALL 56368 0 6
56330: GO 56363
56332: LD_INT 304
56334: DOUBLE
56335: EQUAL
56336: IFTRUE 56340
56338: GO 56362
56340: POP
// hHackTeleport ( unit , x , y ) ; end ;
56341: LD_VAR 0 2
56345: PPUSH
56346: LD_VAR 0 4
56350: PPUSH
56351: LD_VAR 0 5
56355: PPUSH
56356: CALL 58135 0 3
56360: GO 56363
56362: POP
// end ;
56363: LD_VAR 0 12
56367: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
56368: LD_INT 0
56370: PPUSH
56371: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
56372: LD_VAR 0 1
56376: PUSH
56377: LD_INT 1
56379: LESS
56380: PUSH
56381: LD_VAR 0 1
56385: PUSH
56386: LD_INT 3
56388: GREATER
56389: OR
56390: PUSH
56391: LD_VAR 0 5
56395: PPUSH
56396: LD_VAR 0 6
56400: PPUSH
56401: CALL_OW 428
56405: OR
56406: IFFALSE 56410
// exit ;
56408: GO 57138
// uc_side := your_side ;
56410: LD_ADDR_OWVAR 20
56414: PUSH
56415: LD_OWVAR 2
56419: ST_TO_ADDR
// uc_nation := nation ;
56420: LD_ADDR_OWVAR 21
56424: PUSH
56425: LD_VAR 0 1
56429: ST_TO_ADDR
// bc_level = 1 ;
56430: LD_ADDR_OWVAR 43
56434: PUSH
56435: LD_INT 1
56437: ST_TO_ADDR
// case btype of 1 :
56438: LD_VAR 0 2
56442: PUSH
56443: LD_INT 1
56445: DOUBLE
56446: EQUAL
56447: IFTRUE 56451
56449: GO 56462
56451: POP
// bc_type := b_depot ; 2 :
56452: LD_ADDR_OWVAR 42
56456: PUSH
56457: LD_INT 0
56459: ST_TO_ADDR
56460: GO 57082
56462: LD_INT 2
56464: DOUBLE
56465: EQUAL
56466: IFTRUE 56470
56468: GO 56481
56470: POP
// bc_type := b_warehouse ; 3 :
56471: LD_ADDR_OWVAR 42
56475: PUSH
56476: LD_INT 1
56478: ST_TO_ADDR
56479: GO 57082
56481: LD_INT 3
56483: DOUBLE
56484: EQUAL
56485: IFTRUE 56489
56487: GO 56500
56489: POP
// bc_type := b_lab ; 4 .. 9 :
56490: LD_ADDR_OWVAR 42
56494: PUSH
56495: LD_INT 6
56497: ST_TO_ADDR
56498: GO 57082
56500: LD_INT 4
56502: DOUBLE
56503: GREATEREQUAL
56504: IFFALSE 56512
56506: LD_INT 9
56508: DOUBLE
56509: LESSEQUAL
56510: IFTRUE 56514
56512: GO 56574
56514: POP
// begin bc_type := b_lab_half ;
56515: LD_ADDR_OWVAR 42
56519: PUSH
56520: LD_INT 7
56522: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
56523: LD_ADDR_OWVAR 44
56527: PUSH
56528: LD_INT 10
56530: PUSH
56531: LD_INT 11
56533: PUSH
56534: LD_INT 12
56536: PUSH
56537: LD_INT 15
56539: PUSH
56540: LD_INT 14
56542: PUSH
56543: LD_INT 13
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: PUSH
56554: LD_VAR 0 2
56558: PUSH
56559: LD_INT 3
56561: MINUS
56562: ARRAY
56563: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
56564: LD_ADDR_OWVAR 45
56568: PUSH
56569: LD_INT 9
56571: ST_TO_ADDR
// end ; 10 .. 13 :
56572: GO 57082
56574: LD_INT 10
56576: DOUBLE
56577: GREATEREQUAL
56578: IFFALSE 56586
56580: LD_INT 13
56582: DOUBLE
56583: LESSEQUAL
56584: IFTRUE 56588
56586: GO 56665
56588: POP
// begin bc_type := b_lab_full ;
56589: LD_ADDR_OWVAR 42
56593: PUSH
56594: LD_INT 8
56596: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
56597: LD_ADDR_OWVAR 44
56601: PUSH
56602: LD_INT 10
56604: PUSH
56605: LD_INT 12
56607: PUSH
56608: LD_INT 14
56610: PUSH
56611: LD_INT 13
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: PUSH
56620: LD_VAR 0 2
56624: PUSH
56625: LD_INT 9
56627: MINUS
56628: ARRAY
56629: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
56630: LD_ADDR_OWVAR 45
56634: PUSH
56635: LD_INT 11
56637: PUSH
56638: LD_INT 15
56640: PUSH
56641: LD_INT 12
56643: PUSH
56644: LD_INT 15
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: PUSH
56653: LD_VAR 0 2
56657: PUSH
56658: LD_INT 9
56660: MINUS
56661: ARRAY
56662: ST_TO_ADDR
// end ; 14 :
56663: GO 57082
56665: LD_INT 14
56667: DOUBLE
56668: EQUAL
56669: IFTRUE 56673
56671: GO 56684
56673: POP
// bc_type := b_workshop ; 15 :
56674: LD_ADDR_OWVAR 42
56678: PUSH
56679: LD_INT 2
56681: ST_TO_ADDR
56682: GO 57082
56684: LD_INT 15
56686: DOUBLE
56687: EQUAL
56688: IFTRUE 56692
56690: GO 56703
56692: POP
// bc_type := b_factory ; 16 :
56693: LD_ADDR_OWVAR 42
56697: PUSH
56698: LD_INT 3
56700: ST_TO_ADDR
56701: GO 57082
56703: LD_INT 16
56705: DOUBLE
56706: EQUAL
56707: IFTRUE 56711
56709: GO 56722
56711: POP
// bc_type := b_ext_gun ; 17 :
56712: LD_ADDR_OWVAR 42
56716: PUSH
56717: LD_INT 17
56719: ST_TO_ADDR
56720: GO 57082
56722: LD_INT 17
56724: DOUBLE
56725: EQUAL
56726: IFTRUE 56730
56728: GO 56758
56730: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
56731: LD_ADDR_OWVAR 42
56735: PUSH
56736: LD_INT 19
56738: PUSH
56739: LD_INT 23
56741: PUSH
56742: LD_INT 19
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: PUSH
56750: LD_VAR 0 1
56754: ARRAY
56755: ST_TO_ADDR
56756: GO 57082
56758: LD_INT 18
56760: DOUBLE
56761: EQUAL
56762: IFTRUE 56766
56764: GO 56777
56766: POP
// bc_type := b_ext_radar ; 19 :
56767: LD_ADDR_OWVAR 42
56771: PUSH
56772: LD_INT 20
56774: ST_TO_ADDR
56775: GO 57082
56777: LD_INT 19
56779: DOUBLE
56780: EQUAL
56781: IFTRUE 56785
56783: GO 56796
56785: POP
// bc_type := b_ext_radio ; 20 :
56786: LD_ADDR_OWVAR 42
56790: PUSH
56791: LD_INT 22
56793: ST_TO_ADDR
56794: GO 57082
56796: LD_INT 20
56798: DOUBLE
56799: EQUAL
56800: IFTRUE 56804
56802: GO 56815
56804: POP
// bc_type := b_ext_siberium ; 21 :
56805: LD_ADDR_OWVAR 42
56809: PUSH
56810: LD_INT 21
56812: ST_TO_ADDR
56813: GO 57082
56815: LD_INT 21
56817: DOUBLE
56818: EQUAL
56819: IFTRUE 56823
56821: GO 56834
56823: POP
// bc_type := b_ext_computer ; 22 :
56824: LD_ADDR_OWVAR 42
56828: PUSH
56829: LD_INT 24
56831: ST_TO_ADDR
56832: GO 57082
56834: LD_INT 22
56836: DOUBLE
56837: EQUAL
56838: IFTRUE 56842
56840: GO 56853
56842: POP
// bc_type := b_ext_track ; 23 :
56843: LD_ADDR_OWVAR 42
56847: PUSH
56848: LD_INT 16
56850: ST_TO_ADDR
56851: GO 57082
56853: LD_INT 23
56855: DOUBLE
56856: EQUAL
56857: IFTRUE 56861
56859: GO 56872
56861: POP
// bc_type := b_ext_laser ; 24 :
56862: LD_ADDR_OWVAR 42
56866: PUSH
56867: LD_INT 25
56869: ST_TO_ADDR
56870: GO 57082
56872: LD_INT 24
56874: DOUBLE
56875: EQUAL
56876: IFTRUE 56880
56878: GO 56891
56880: POP
// bc_type := b_control_tower ; 25 :
56881: LD_ADDR_OWVAR 42
56885: PUSH
56886: LD_INT 36
56888: ST_TO_ADDR
56889: GO 57082
56891: LD_INT 25
56893: DOUBLE
56894: EQUAL
56895: IFTRUE 56899
56897: GO 56910
56899: POP
// bc_type := b_breastwork ; 26 :
56900: LD_ADDR_OWVAR 42
56904: PUSH
56905: LD_INT 31
56907: ST_TO_ADDR
56908: GO 57082
56910: LD_INT 26
56912: DOUBLE
56913: EQUAL
56914: IFTRUE 56918
56916: GO 56929
56918: POP
// bc_type := b_bunker ; 27 :
56919: LD_ADDR_OWVAR 42
56923: PUSH
56924: LD_INT 32
56926: ST_TO_ADDR
56927: GO 57082
56929: LD_INT 27
56931: DOUBLE
56932: EQUAL
56933: IFTRUE 56937
56935: GO 56948
56937: POP
// bc_type := b_turret ; 28 :
56938: LD_ADDR_OWVAR 42
56942: PUSH
56943: LD_INT 33
56945: ST_TO_ADDR
56946: GO 57082
56948: LD_INT 28
56950: DOUBLE
56951: EQUAL
56952: IFTRUE 56956
56954: GO 56967
56956: POP
// bc_type := b_armoury ; 29 :
56957: LD_ADDR_OWVAR 42
56961: PUSH
56962: LD_INT 4
56964: ST_TO_ADDR
56965: GO 57082
56967: LD_INT 29
56969: DOUBLE
56970: EQUAL
56971: IFTRUE 56975
56973: GO 56986
56975: POP
// bc_type := b_barracks ; 30 :
56976: LD_ADDR_OWVAR 42
56980: PUSH
56981: LD_INT 5
56983: ST_TO_ADDR
56984: GO 57082
56986: LD_INT 30
56988: DOUBLE
56989: EQUAL
56990: IFTRUE 56994
56992: GO 57005
56994: POP
// bc_type := b_solar_power ; 31 :
56995: LD_ADDR_OWVAR 42
56999: PUSH
57000: LD_INT 27
57002: ST_TO_ADDR
57003: GO 57082
57005: LD_INT 31
57007: DOUBLE
57008: EQUAL
57009: IFTRUE 57013
57011: GO 57024
57013: POP
// bc_type := b_oil_power ; 32 :
57014: LD_ADDR_OWVAR 42
57018: PUSH
57019: LD_INT 26
57021: ST_TO_ADDR
57022: GO 57082
57024: LD_INT 32
57026: DOUBLE
57027: EQUAL
57028: IFTRUE 57032
57030: GO 57043
57032: POP
// bc_type := b_siberite_power ; 33 :
57033: LD_ADDR_OWVAR 42
57037: PUSH
57038: LD_INT 28
57040: ST_TO_ADDR
57041: GO 57082
57043: LD_INT 33
57045: DOUBLE
57046: EQUAL
57047: IFTRUE 57051
57049: GO 57062
57051: POP
// bc_type := b_oil_mine ; 34 :
57052: LD_ADDR_OWVAR 42
57056: PUSH
57057: LD_INT 29
57059: ST_TO_ADDR
57060: GO 57082
57062: LD_INT 34
57064: DOUBLE
57065: EQUAL
57066: IFTRUE 57070
57068: GO 57081
57070: POP
// bc_type := b_siberite_mine ; end ;
57071: LD_ADDR_OWVAR 42
57075: PUSH
57076: LD_INT 30
57078: ST_TO_ADDR
57079: GO 57082
57081: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
57082: LD_ADDR_VAR 0 8
57086: PUSH
57087: LD_VAR 0 5
57091: PPUSH
57092: LD_VAR 0 6
57096: PPUSH
57097: LD_VAR 0 3
57101: PPUSH
57102: CALL_OW 47
57106: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
57107: LD_OWVAR 42
57111: PUSH
57112: LD_INT 32
57114: PUSH
57115: LD_INT 33
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: IN
57122: IFFALSE 57138
// PlaceWeaponTurret ( b , weapon ) ;
57124: LD_VAR 0 8
57128: PPUSH
57129: LD_VAR 0 4
57133: PPUSH
57134: CALL_OW 431
// end ;
57138: LD_VAR 0 7
57142: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
57143: LD_INT 0
57145: PPUSH
57146: PPUSH
57147: PPUSH
57148: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57149: LD_ADDR_VAR 0 4
57153: PUSH
57154: LD_INT 22
57156: PUSH
57157: LD_OWVAR 2
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: LD_INT 30
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 30
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: LIST
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PPUSH
57198: CALL_OW 69
57202: ST_TO_ADDR
// if not tmp then
57203: LD_VAR 0 4
57207: NOT
57208: IFFALSE 57212
// exit ;
57210: GO 57271
// for i in tmp do
57212: LD_ADDR_VAR 0 2
57216: PUSH
57217: LD_VAR 0 4
57221: PUSH
57222: FOR_IN
57223: IFFALSE 57269
// for j = 1 to 3 do
57225: LD_ADDR_VAR 0 3
57229: PUSH
57230: DOUBLE
57231: LD_INT 1
57233: DEC
57234: ST_TO_ADDR
57235: LD_INT 3
57237: PUSH
57238: FOR_TO
57239: IFFALSE 57265
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
57241: LD_VAR 0 2
57245: PPUSH
57246: CALL_OW 274
57250: PPUSH
57251: LD_VAR 0 3
57255: PPUSH
57256: LD_INT 99999
57258: PPUSH
57259: CALL_OW 277
57263: GO 57238
57265: POP
57266: POP
57267: GO 57222
57269: POP
57270: POP
// end ;
57271: LD_VAR 0 1
57275: RET
// export function hHackSetLevel10 ; var i , j ; begin
57276: LD_INT 0
57278: PPUSH
57279: PPUSH
57280: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
57281: LD_ADDR_VAR 0 2
57285: PUSH
57286: LD_INT 21
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PPUSH
57296: CALL_OW 69
57300: PUSH
57301: FOR_IN
57302: IFFALSE 57354
// if IsSelected ( i ) then
57304: LD_VAR 0 2
57308: PPUSH
57309: CALL_OW 306
57313: IFFALSE 57352
// begin for j := 1 to 4 do
57315: LD_ADDR_VAR 0 3
57319: PUSH
57320: DOUBLE
57321: LD_INT 1
57323: DEC
57324: ST_TO_ADDR
57325: LD_INT 4
57327: PUSH
57328: FOR_TO
57329: IFFALSE 57350
// SetSkill ( i , j , 10 ) ;
57331: LD_VAR 0 2
57335: PPUSH
57336: LD_VAR 0 3
57340: PPUSH
57341: LD_INT 10
57343: PPUSH
57344: CALL_OW 237
57348: GO 57328
57350: POP
57351: POP
// end ;
57352: GO 57301
57354: POP
57355: POP
// end ;
57356: LD_VAR 0 1
57360: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
57361: LD_INT 0
57363: PPUSH
57364: PPUSH
57365: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
57366: LD_ADDR_VAR 0 2
57370: PUSH
57371: LD_INT 22
57373: PUSH
57374: LD_OWVAR 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 21
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PPUSH
57397: CALL_OW 69
57401: PUSH
57402: FOR_IN
57403: IFFALSE 57444
// begin for j := 1 to 4 do
57405: LD_ADDR_VAR 0 3
57409: PUSH
57410: DOUBLE
57411: LD_INT 1
57413: DEC
57414: ST_TO_ADDR
57415: LD_INT 4
57417: PUSH
57418: FOR_TO
57419: IFFALSE 57440
// SetSkill ( i , j , 10 ) ;
57421: LD_VAR 0 2
57425: PPUSH
57426: LD_VAR 0 3
57430: PPUSH
57431: LD_INT 10
57433: PPUSH
57434: CALL_OW 237
57438: GO 57418
57440: POP
57441: POP
// end ;
57442: GO 57402
57444: POP
57445: POP
// end ;
57446: LD_VAR 0 1
57450: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
57451: LD_INT 0
57453: PPUSH
// uc_side := your_side ;
57454: LD_ADDR_OWVAR 20
57458: PUSH
57459: LD_OWVAR 2
57463: ST_TO_ADDR
// uc_nation := nation ;
57464: LD_ADDR_OWVAR 21
57468: PUSH
57469: LD_VAR 0 1
57473: ST_TO_ADDR
// InitHc ;
57474: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
57478: LD_INT 0
57480: PPUSH
57481: LD_VAR 0 2
57485: PPUSH
57486: LD_VAR 0 3
57490: PPUSH
57491: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
57495: LD_VAR 0 4
57499: PPUSH
57500: LD_VAR 0 5
57504: PPUSH
57505: CALL_OW 428
57509: PUSH
57510: LD_INT 0
57512: EQUAL
57513: IFFALSE 57537
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
57515: CALL_OW 44
57519: PPUSH
57520: LD_VAR 0 4
57524: PPUSH
57525: LD_VAR 0 5
57529: PPUSH
57530: LD_INT 1
57532: PPUSH
57533: CALL_OW 48
// end ;
57537: LD_VAR 0 6
57541: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
57542: LD_INT 0
57544: PPUSH
57545: PPUSH
// uc_side := your_side ;
57546: LD_ADDR_OWVAR 20
57550: PUSH
57551: LD_OWVAR 2
57555: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
57556: LD_VAR 0 1
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 2
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: LD_INT 4
57572: PUSH
57573: LD_INT 5
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: IN
57583: IFFALSE 57595
// uc_nation := nation_american else
57585: LD_ADDR_OWVAR 21
57589: PUSH
57590: LD_INT 1
57592: ST_TO_ADDR
57593: GO 57638
// if chassis in [ 11 , 12 , 13 , 14 ] then
57595: LD_VAR 0 1
57599: PUSH
57600: LD_INT 11
57602: PUSH
57603: LD_INT 12
57605: PUSH
57606: LD_INT 13
57608: PUSH
57609: LD_INT 14
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: IN
57618: IFFALSE 57630
// uc_nation := nation_arabian else
57620: LD_ADDR_OWVAR 21
57624: PUSH
57625: LD_INT 2
57627: ST_TO_ADDR
57628: GO 57638
// uc_nation := nation_russian ;
57630: LD_ADDR_OWVAR 21
57634: PUSH
57635: LD_INT 3
57637: ST_TO_ADDR
// vc_chassis := chassis ;
57638: LD_ADDR_OWVAR 37
57642: PUSH
57643: LD_VAR 0 1
57647: ST_TO_ADDR
// vc_engine := engine ;
57648: LD_ADDR_OWVAR 39
57652: PUSH
57653: LD_VAR 0 2
57657: ST_TO_ADDR
// vc_control := control ;
57658: LD_ADDR_OWVAR 38
57662: PUSH
57663: LD_VAR 0 3
57667: ST_TO_ADDR
// vc_weapon := weapon ;
57668: LD_ADDR_OWVAR 40
57672: PUSH
57673: LD_VAR 0 4
57677: ST_TO_ADDR
// un := CreateVehicle ;
57678: LD_ADDR_VAR 0 8
57682: PUSH
57683: CALL_OW 45
57687: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
57688: LD_VAR 0 8
57692: PPUSH
57693: LD_INT 0
57695: PPUSH
57696: LD_INT 5
57698: PPUSH
57699: CALL_OW 12
57703: PPUSH
57704: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
57708: LD_VAR 0 8
57712: PPUSH
57713: LD_VAR 0 5
57717: PPUSH
57718: LD_VAR 0 6
57722: PPUSH
57723: LD_INT 1
57725: PPUSH
57726: CALL_OW 48
// end ;
57730: LD_VAR 0 7
57734: RET
// export hInvincible ; every 1 do
57735: GO 57737
57737: DISABLE
// hInvincible := [ ] ;
57738: LD_ADDR_EXP 65
57742: PUSH
57743: EMPTY
57744: ST_TO_ADDR
57745: END
// every 10 do var i ;
57746: GO 57748
57748: DISABLE
57749: LD_INT 0
57751: PPUSH
// begin enable ;
57752: ENABLE
// if not hInvincible then
57753: LD_EXP 65
57757: NOT
57758: IFFALSE 57762
// exit ;
57760: GO 57806
// for i in hInvincible do
57762: LD_ADDR_VAR 0 1
57766: PUSH
57767: LD_EXP 65
57771: PUSH
57772: FOR_IN
57773: IFFALSE 57804
// if GetLives ( i ) < 1000 then
57775: LD_VAR 0 1
57779: PPUSH
57780: CALL_OW 256
57784: PUSH
57785: LD_INT 1000
57787: LESS
57788: IFFALSE 57802
// SetLives ( i , 1000 ) ;
57790: LD_VAR 0 1
57794: PPUSH
57795: LD_INT 1000
57797: PPUSH
57798: CALL_OW 234
57802: GO 57772
57804: POP
57805: POP
// end ;
57806: PPOPN 1
57808: END
// export function hHackInvincible ; var i ; begin
57809: LD_INT 0
57811: PPUSH
57812: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
57813: LD_ADDR_VAR 0 2
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: LD_INT 21
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 21
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: PPUSH
57846: CALL_OW 69
57850: PUSH
57851: FOR_IN
57852: IFFALSE 57913
// if IsSelected ( i ) then
57854: LD_VAR 0 2
57858: PPUSH
57859: CALL_OW 306
57863: IFFALSE 57911
// begin if i in hInvincible then
57865: LD_VAR 0 2
57869: PUSH
57870: LD_EXP 65
57874: IN
57875: IFFALSE 57895
// hInvincible := hInvincible diff i else
57877: LD_ADDR_EXP 65
57881: PUSH
57882: LD_EXP 65
57886: PUSH
57887: LD_VAR 0 2
57891: DIFF
57892: ST_TO_ADDR
57893: GO 57911
// hInvincible := hInvincible union i ;
57895: LD_ADDR_EXP 65
57899: PUSH
57900: LD_EXP 65
57904: PUSH
57905: LD_VAR 0 2
57909: UNION
57910: ST_TO_ADDR
// end ;
57911: GO 57851
57913: POP
57914: POP
// end ;
57915: LD_VAR 0 1
57919: RET
// export function hHackInvisible ; var i , j ; begin
57920: LD_INT 0
57922: PPUSH
57923: PPUSH
57924: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
57925: LD_ADDR_VAR 0 2
57929: PUSH
57930: LD_INT 21
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PPUSH
57940: CALL_OW 69
57944: PUSH
57945: FOR_IN
57946: IFFALSE 57970
// if IsSelected ( i ) then
57948: LD_VAR 0 2
57952: PPUSH
57953: CALL_OW 306
57957: IFFALSE 57968
// ComForceInvisible ( i ) ;
57959: LD_VAR 0 2
57963: PPUSH
57964: CALL_OW 496
57968: GO 57945
57970: POP
57971: POP
// end ;
57972: LD_VAR 0 1
57976: RET
// export function hHackChangeYourSide ; begin
57977: LD_INT 0
57979: PPUSH
// if your_side = 8 then
57980: LD_OWVAR 2
57984: PUSH
57985: LD_INT 8
57987: EQUAL
57988: IFFALSE 58000
// your_side := 0 else
57990: LD_ADDR_OWVAR 2
57994: PUSH
57995: LD_INT 0
57997: ST_TO_ADDR
57998: GO 58014
// your_side := your_side + 1 ;
58000: LD_ADDR_OWVAR 2
58004: PUSH
58005: LD_OWVAR 2
58009: PUSH
58010: LD_INT 1
58012: PLUS
58013: ST_TO_ADDR
// end ;
58014: LD_VAR 0 1
58018: RET
// export function hHackChangeUnitSide ; var i , j ; begin
58019: LD_INT 0
58021: PPUSH
58022: PPUSH
58023: PPUSH
// for i in all_units do
58024: LD_ADDR_VAR 0 2
58028: PUSH
58029: LD_OWVAR 3
58033: PUSH
58034: FOR_IN
58035: IFFALSE 58113
// if IsSelected ( i ) then
58037: LD_VAR 0 2
58041: PPUSH
58042: CALL_OW 306
58046: IFFALSE 58111
// begin j := GetSide ( i ) ;
58048: LD_ADDR_VAR 0 3
58052: PUSH
58053: LD_VAR 0 2
58057: PPUSH
58058: CALL_OW 255
58062: ST_TO_ADDR
// if j = 8 then
58063: LD_VAR 0 3
58067: PUSH
58068: LD_INT 8
58070: EQUAL
58071: IFFALSE 58083
// j := 0 else
58073: LD_ADDR_VAR 0 3
58077: PUSH
58078: LD_INT 0
58080: ST_TO_ADDR
58081: GO 58097
// j := j + 1 ;
58083: LD_ADDR_VAR 0 3
58087: PUSH
58088: LD_VAR 0 3
58092: PUSH
58093: LD_INT 1
58095: PLUS
58096: ST_TO_ADDR
// SetSide ( i , j ) ;
58097: LD_VAR 0 2
58101: PPUSH
58102: LD_VAR 0 3
58106: PPUSH
58107: CALL_OW 235
// end ;
58111: GO 58034
58113: POP
58114: POP
// end ;
58115: LD_VAR 0 1
58119: RET
// export function hHackFog ; begin
58120: LD_INT 0
58122: PPUSH
// FogOff ( true ) ;
58123: LD_INT 1
58125: PPUSH
58126: CALL_OW 344
// end ;
58130: LD_VAR 0 1
58134: RET
// export function hHackTeleport ( unit , x , y ) ; begin
58135: LD_INT 0
58137: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
58138: LD_VAR 0 1
58142: PPUSH
58143: LD_VAR 0 2
58147: PPUSH
58148: LD_VAR 0 3
58152: PPUSH
58153: LD_INT 1
58155: PPUSH
58156: LD_INT 1
58158: PPUSH
58159: CALL_OW 483
// CenterOnXY ( x , y ) ;
58163: LD_VAR 0 2
58167: PPUSH
58168: LD_VAR 0 3
58172: PPUSH
58173: CALL_OW 84
// end ;
58177: LD_VAR 0 4
58181: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
58182: LD_INT 0
58184: PPUSH
58185: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
58186: LD_VAR 0 1
58190: NOT
58191: PUSH
58192: LD_VAR 0 2
58196: PPUSH
58197: LD_VAR 0 3
58201: PPUSH
58202: CALL_OW 488
58206: NOT
58207: OR
58208: PUSH
58209: LD_VAR 0 1
58213: PPUSH
58214: CALL_OW 266
58218: PUSH
58219: LD_INT 3
58221: NONEQUAL
58222: PUSH
58223: LD_VAR 0 1
58227: PPUSH
58228: CALL_OW 247
58232: PUSH
58233: LD_INT 1
58235: EQUAL
58236: NOT
58237: AND
58238: OR
58239: IFFALSE 58243
// exit ;
58241: GO 58392
// if GetType ( factory ) = unit_human then
58243: LD_VAR 0 1
58247: PPUSH
58248: CALL_OW 247
58252: PUSH
58253: LD_INT 1
58255: EQUAL
58256: IFFALSE 58273
// factory := IsInUnit ( factory ) ;
58258: LD_ADDR_VAR 0 1
58262: PUSH
58263: LD_VAR 0 1
58267: PPUSH
58268: CALL_OW 310
58272: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
58273: LD_VAR 0 1
58277: PPUSH
58278: CALL_OW 266
58282: PUSH
58283: LD_INT 3
58285: NONEQUAL
58286: IFFALSE 58290
// exit ;
58288: GO 58392
// if HexInfo ( x , y ) = factory then
58290: LD_VAR 0 2
58294: PPUSH
58295: LD_VAR 0 3
58299: PPUSH
58300: CALL_OW 428
58304: PUSH
58305: LD_VAR 0 1
58309: EQUAL
58310: IFFALSE 58337
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
58312: LD_ADDR_EXP 66
58316: PUSH
58317: LD_EXP 66
58321: PPUSH
58322: LD_VAR 0 1
58326: PPUSH
58327: LD_INT 0
58329: PPUSH
58330: CALL_OW 1
58334: ST_TO_ADDR
58335: GO 58388
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
58337: LD_ADDR_EXP 66
58341: PUSH
58342: LD_EXP 66
58346: PPUSH
58347: LD_VAR 0 1
58351: PPUSH
58352: LD_VAR 0 1
58356: PPUSH
58357: CALL_OW 255
58361: PUSH
58362: LD_VAR 0 1
58366: PUSH
58367: LD_VAR 0 2
58371: PUSH
58372: LD_VAR 0 3
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: PPUSH
58383: CALL_OW 1
58387: ST_TO_ADDR
// UpdateFactoryWaypoints ;
58388: CALL 58397 0 0
// end ;
58392: LD_VAR 0 4
58396: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
58397: LD_INT 0
58399: PPUSH
58400: PPUSH
58401: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
58402: LD_STRING resetFactoryWaypoint();
58404: PPUSH
58405: CALL_OW 559
// if factoryWaypoints then
58409: LD_EXP 66
58413: IFFALSE 58539
// begin list := PrepareArray ( factoryWaypoints ) ;
58415: LD_ADDR_VAR 0 3
58419: PUSH
58420: LD_EXP 66
58424: PPUSH
58425: CALL 43168 0 1
58429: ST_TO_ADDR
// for i := 1 to list do
58430: LD_ADDR_VAR 0 2
58434: PUSH
58435: DOUBLE
58436: LD_INT 1
58438: DEC
58439: ST_TO_ADDR
58440: LD_VAR 0 3
58444: PUSH
58445: FOR_TO
58446: IFFALSE 58537
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
58448: LD_STRING setFactoryWaypointXY(
58450: PUSH
58451: LD_VAR 0 3
58455: PUSH
58456: LD_VAR 0 2
58460: ARRAY
58461: PUSH
58462: LD_INT 1
58464: ARRAY
58465: STR
58466: PUSH
58467: LD_STRING ,
58469: STR
58470: PUSH
58471: LD_VAR 0 3
58475: PUSH
58476: LD_VAR 0 2
58480: ARRAY
58481: PUSH
58482: LD_INT 2
58484: ARRAY
58485: STR
58486: PUSH
58487: LD_STRING ,
58489: STR
58490: PUSH
58491: LD_VAR 0 3
58495: PUSH
58496: LD_VAR 0 2
58500: ARRAY
58501: PUSH
58502: LD_INT 3
58504: ARRAY
58505: STR
58506: PUSH
58507: LD_STRING ,
58509: STR
58510: PUSH
58511: LD_VAR 0 3
58515: PUSH
58516: LD_VAR 0 2
58520: ARRAY
58521: PUSH
58522: LD_INT 4
58524: ARRAY
58525: STR
58526: PUSH
58527: LD_STRING )
58529: STR
58530: PPUSH
58531: CALL_OW 559
58535: GO 58445
58537: POP
58538: POP
// end ; end ;
58539: LD_VAR 0 1
58543: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
58544: LD_INT 0
58546: PPUSH
// if HexInfo ( x , y ) = warehouse then
58547: LD_VAR 0 2
58551: PPUSH
58552: LD_VAR 0 3
58556: PPUSH
58557: CALL_OW 428
58561: PUSH
58562: LD_VAR 0 1
58566: EQUAL
58567: IFFALSE 58594
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
58569: LD_ADDR_EXP 67
58573: PUSH
58574: LD_EXP 67
58578: PPUSH
58579: LD_VAR 0 1
58583: PPUSH
58584: LD_INT 0
58586: PPUSH
58587: CALL_OW 1
58591: ST_TO_ADDR
58592: GO 58645
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
58594: LD_ADDR_EXP 67
58598: PUSH
58599: LD_EXP 67
58603: PPUSH
58604: LD_VAR 0 1
58608: PPUSH
58609: LD_VAR 0 1
58613: PPUSH
58614: CALL_OW 255
58618: PUSH
58619: LD_VAR 0 1
58623: PUSH
58624: LD_VAR 0 2
58628: PUSH
58629: LD_VAR 0 3
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: PPUSH
58640: CALL_OW 1
58644: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
58645: CALL 58654 0 0
// end ;
58649: LD_VAR 0 4
58653: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
58654: LD_INT 0
58656: PPUSH
58657: PPUSH
58658: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
58659: LD_STRING resetWarehouseGatheringPoints();
58661: PPUSH
58662: CALL_OW 559
// if warehouseGatheringPoints then
58666: LD_EXP 67
58670: IFFALSE 58796
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
58672: LD_ADDR_VAR 0 3
58676: PUSH
58677: LD_EXP 67
58681: PPUSH
58682: CALL 43168 0 1
58686: ST_TO_ADDR
// for i := 1 to list do
58687: LD_ADDR_VAR 0 2
58691: PUSH
58692: DOUBLE
58693: LD_INT 1
58695: DEC
58696: ST_TO_ADDR
58697: LD_VAR 0 3
58701: PUSH
58702: FOR_TO
58703: IFFALSE 58794
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
58705: LD_STRING setWarehouseGatheringPointXY(
58707: PUSH
58708: LD_VAR 0 3
58712: PUSH
58713: LD_VAR 0 2
58717: ARRAY
58718: PUSH
58719: LD_INT 1
58721: ARRAY
58722: STR
58723: PUSH
58724: LD_STRING ,
58726: STR
58727: PUSH
58728: LD_VAR 0 3
58732: PUSH
58733: LD_VAR 0 2
58737: ARRAY
58738: PUSH
58739: LD_INT 2
58741: ARRAY
58742: STR
58743: PUSH
58744: LD_STRING ,
58746: STR
58747: PUSH
58748: LD_VAR 0 3
58752: PUSH
58753: LD_VAR 0 2
58757: ARRAY
58758: PUSH
58759: LD_INT 3
58761: ARRAY
58762: STR
58763: PUSH
58764: LD_STRING ,
58766: STR
58767: PUSH
58768: LD_VAR 0 3
58772: PUSH
58773: LD_VAR 0 2
58777: ARRAY
58778: PUSH
58779: LD_INT 4
58781: ARRAY
58782: STR
58783: PUSH
58784: LD_STRING )
58786: STR
58787: PPUSH
58788: CALL_OW 559
58792: GO 58702
58794: POP
58795: POP
// end ; end ;
58796: LD_VAR 0 1
58800: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
58801: LD_EXP 67
58805: IFFALSE 59490
58807: GO 58809
58809: DISABLE
58810: LD_INT 0
58812: PPUSH
58813: PPUSH
58814: PPUSH
58815: PPUSH
58816: PPUSH
58817: PPUSH
58818: PPUSH
58819: PPUSH
58820: PPUSH
// begin enable ;
58821: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
58822: LD_ADDR_VAR 0 3
58826: PUSH
58827: LD_EXP 67
58831: PPUSH
58832: CALL 43168 0 1
58836: ST_TO_ADDR
// if not list then
58837: LD_VAR 0 3
58841: NOT
58842: IFFALSE 58846
// exit ;
58844: GO 59490
// for i := 1 to list do
58846: LD_ADDR_VAR 0 1
58850: PUSH
58851: DOUBLE
58852: LD_INT 1
58854: DEC
58855: ST_TO_ADDR
58856: LD_VAR 0 3
58860: PUSH
58861: FOR_TO
58862: IFFALSE 59488
// begin depot := list [ i ] [ 2 ] ;
58864: LD_ADDR_VAR 0 8
58868: PUSH
58869: LD_VAR 0 3
58873: PUSH
58874: LD_VAR 0 1
58878: ARRAY
58879: PUSH
58880: LD_INT 2
58882: ARRAY
58883: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
58884: LD_ADDR_VAR 0 5
58888: PUSH
58889: LD_VAR 0 3
58893: PUSH
58894: LD_VAR 0 1
58898: ARRAY
58899: PUSH
58900: LD_INT 1
58902: ARRAY
58903: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
58904: LD_VAR 0 8
58908: PPUSH
58909: CALL_OW 301
58913: PUSH
58914: LD_VAR 0 5
58918: PUSH
58919: LD_VAR 0 8
58923: PPUSH
58924: CALL_OW 255
58928: NONEQUAL
58929: OR
58930: IFFALSE 58959
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
58932: LD_ADDR_EXP 67
58936: PUSH
58937: LD_EXP 67
58941: PPUSH
58942: LD_VAR 0 8
58946: PPUSH
58947: LD_INT 0
58949: PPUSH
58950: CALL_OW 1
58954: ST_TO_ADDR
// exit ;
58955: POP
58956: POP
58957: GO 59490
// end ; x := list [ i ] [ 3 ] ;
58959: LD_ADDR_VAR 0 6
58963: PUSH
58964: LD_VAR 0 3
58968: PUSH
58969: LD_VAR 0 1
58973: ARRAY
58974: PUSH
58975: LD_INT 3
58977: ARRAY
58978: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
58979: LD_ADDR_VAR 0 7
58983: PUSH
58984: LD_VAR 0 3
58988: PUSH
58989: LD_VAR 0 1
58993: ARRAY
58994: PUSH
58995: LD_INT 4
58997: ARRAY
58998: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
58999: LD_ADDR_VAR 0 9
59003: PUSH
59004: LD_VAR 0 6
59008: PPUSH
59009: LD_VAR 0 7
59013: PPUSH
59014: LD_INT 16
59016: PPUSH
59017: CALL 41756 0 3
59021: ST_TO_ADDR
// if not cratesNearbyPoint then
59022: LD_VAR 0 9
59026: NOT
59027: IFFALSE 59033
// exit ;
59029: POP
59030: POP
59031: GO 59490
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
59033: LD_ADDR_VAR 0 4
59037: PUSH
59038: LD_INT 22
59040: PUSH
59041: LD_VAR 0 5
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 3
59052: PUSH
59053: LD_INT 60
59055: PUSH
59056: EMPTY
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 91
59065: PUSH
59066: LD_VAR 0 8
59070: PUSH
59071: LD_INT 6
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: LD_INT 25
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 25
59094: PUSH
59095: LD_INT 16
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: PPUSH
59113: CALL_OW 69
59117: PUSH
59118: LD_VAR 0 8
59122: PPUSH
59123: CALL_OW 313
59127: PPUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 60
59133: PUSH
59134: EMPTY
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: LD_INT 25
59146: PUSH
59147: LD_INT 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 25
59156: PUSH
59157: LD_INT 16
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: LIST
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PPUSH
59173: CALL_OW 72
59177: UNION
59178: ST_TO_ADDR
// if tmp then
59179: LD_VAR 0 4
59183: IFFALSE 59263
// begin tmp := ShrinkArray ( tmp , 3 ) ;
59185: LD_ADDR_VAR 0 4
59189: PUSH
59190: LD_VAR 0 4
59194: PPUSH
59195: LD_INT 3
59197: PPUSH
59198: CALL 39725 0 2
59202: ST_TO_ADDR
// for j in tmp do
59203: LD_ADDR_VAR 0 2
59207: PUSH
59208: LD_VAR 0 4
59212: PUSH
59213: FOR_IN
59214: IFFALSE 59257
// begin if IsInUnit ( j ) then
59216: LD_VAR 0 2
59220: PPUSH
59221: CALL_OW 310
59225: IFFALSE 59236
// ComExit ( j ) ;
59227: LD_VAR 0 2
59231: PPUSH
59232: CALL 39808 0 1
// AddComCollect ( j , x , y ) ;
59236: LD_VAR 0 2
59240: PPUSH
59241: LD_VAR 0 6
59245: PPUSH
59246: LD_VAR 0 7
59250: PPUSH
59251: CALL_OW 177
// end ;
59255: GO 59213
59257: POP
59258: POP
// exit ;
59259: POP
59260: POP
59261: GO 59490
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
59263: LD_ADDR_VAR 0 4
59267: PUSH
59268: LD_INT 22
59270: PUSH
59271: LD_VAR 0 5
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 91
59282: PUSH
59283: LD_VAR 0 8
59287: PUSH
59288: LD_INT 8
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 2
59298: PUSH
59299: LD_INT 34
59301: PUSH
59302: LD_INT 12
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 34
59311: PUSH
59312: LD_INT 51
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 34
59321: PUSH
59322: LD_INT 32
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 34
59331: PUSH
59332: LD_INT 89
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: PPUSH
59351: CALL_OW 69
59355: ST_TO_ADDR
// if tmp then
59356: LD_VAR 0 4
59360: IFFALSE 59486
// begin for j in tmp do
59362: LD_ADDR_VAR 0 2
59366: PUSH
59367: LD_VAR 0 4
59371: PUSH
59372: FOR_IN
59373: IFFALSE 59484
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
59375: LD_VAR 0 2
59379: PPUSH
59380: CALL_OW 262
59384: PUSH
59385: LD_INT 3
59387: EQUAL
59388: PUSH
59389: LD_VAR 0 2
59393: PPUSH
59394: CALL_OW 261
59398: PUSH
59399: LD_INT 20
59401: GREATER
59402: OR
59403: PUSH
59404: LD_VAR 0 2
59408: PPUSH
59409: CALL_OW 314
59413: NOT
59414: AND
59415: PUSH
59416: LD_VAR 0 2
59420: PPUSH
59421: CALL_OW 263
59425: PUSH
59426: LD_INT 1
59428: NONEQUAL
59429: PUSH
59430: LD_VAR 0 2
59434: PPUSH
59435: CALL_OW 311
59439: OR
59440: AND
59441: IFFALSE 59482
// begin ComCollect ( j , x , y ) ;
59443: LD_VAR 0 2
59447: PPUSH
59448: LD_VAR 0 6
59452: PPUSH
59453: LD_VAR 0 7
59457: PPUSH
59458: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
59462: LD_VAR 0 2
59466: PPUSH
59467: LD_VAR 0 8
59471: PPUSH
59472: CALL_OW 172
// exit ;
59476: POP
59477: POP
59478: POP
59479: POP
59480: GO 59490
// end ;
59482: GO 59372
59484: POP
59485: POP
// end ; end ;
59486: GO 58861
59488: POP
59489: POP
// end ; end_of_file
59490: PPOPN 9
59492: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59493: LD_VAR 0 1
59497: PUSH
59498: LD_INT 200
59500: DOUBLE
59501: GREATEREQUAL
59502: IFFALSE 59510
59504: LD_INT 299
59506: DOUBLE
59507: LESSEQUAL
59508: IFTRUE 59512
59510: GO 59544
59512: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59513: LD_VAR 0 1
59517: PPUSH
59518: LD_VAR 0 2
59522: PPUSH
59523: LD_VAR 0 3
59527: PPUSH
59528: LD_VAR 0 4
59532: PPUSH
59533: LD_VAR 0 5
59537: PPUSH
59538: CALL 60032 0 5
59542: GO 59621
59544: LD_INT 300
59546: DOUBLE
59547: GREATEREQUAL
59548: IFFALSE 59556
59550: LD_INT 399
59552: DOUBLE
59553: LESSEQUAL
59554: IFTRUE 59558
59556: GO 59620
59558: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59559: LD_VAR 0 1
59563: PPUSH
59564: LD_VAR 0 2
59568: PPUSH
59569: LD_VAR 0 3
59573: PPUSH
59574: LD_VAR 0 4
59578: PPUSH
59579: LD_VAR 0 5
59583: PPUSH
59584: LD_VAR 0 6
59588: PPUSH
59589: LD_VAR 0 7
59593: PPUSH
59594: LD_VAR 0 8
59598: PPUSH
59599: LD_VAR 0 9
59603: PPUSH
59604: LD_VAR 0 10
59608: PPUSH
59609: LD_VAR 0 11
59613: PPUSH
59614: CALL 56194 0 11
59618: GO 59621
59620: POP
// end ;
59621: PPOPN 11
59623: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59624: LD_VAR 0 1
59628: PPUSH
59629: LD_VAR 0 2
59633: PPUSH
59634: LD_VAR 0 3
59638: PPUSH
59639: LD_VAR 0 4
59643: PPUSH
59644: LD_VAR 0 5
59648: PPUSH
59649: CALL 59768 0 5
// end ; end_of_file
59653: PPOPN 5
59655: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59656: LD_INT 0
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59662: LD_VAR 0 1
59666: PPUSH
59667: CALL_OW 264
59671: PUSH
59672: LD_INT 91
59674: EQUAL
59675: IFFALSE 59747
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59677: LD_INT 68
59679: PPUSH
59680: LD_VAR 0 1
59684: PPUSH
59685: CALL_OW 255
59689: PPUSH
59690: CALL_OW 321
59694: PUSH
59695: LD_INT 2
59697: EQUAL
59698: IFFALSE 59710
// eff := 70 else
59700: LD_ADDR_VAR 0 4
59704: PUSH
59705: LD_INT 70
59707: ST_TO_ADDR
59708: GO 59718
// eff := 30 ;
59710: LD_ADDR_VAR 0 4
59714: PUSH
59715: LD_INT 30
59717: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59718: LD_VAR 0 1
59722: PPUSH
59723: CALL_OW 250
59727: PPUSH
59728: LD_VAR 0 1
59732: PPUSH
59733: CALL_OW 251
59737: PPUSH
59738: LD_VAR 0 4
59742: PPUSH
59743: CALL_OW 495
// end ; end ;
59747: LD_VAR 0 2
59751: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59752: LD_INT 0
59754: PPUSH
// end ;
59755: LD_VAR 0 4
59759: RET
// export function SOS_Command ( cmd ) ; begin
59760: LD_INT 0
59762: PPUSH
// end ;
59763: LD_VAR 0 2
59767: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59768: LD_INT 0
59770: PPUSH
// end ;
59771: LD_VAR 0 6
59775: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59776: LD_INT 0
59778: PPUSH
59779: PPUSH
// if not vehicle or not factory then
59780: LD_VAR 0 1
59784: NOT
59785: PUSH
59786: LD_VAR 0 2
59790: NOT
59791: OR
59792: IFFALSE 59796
// exit ;
59794: GO 60027
// if factoryWaypoints >= factory then
59796: LD_EXP 66
59800: PUSH
59801: LD_VAR 0 2
59805: GREATEREQUAL
59806: IFFALSE 60027
// if factoryWaypoints [ factory ] then
59808: LD_EXP 66
59812: PUSH
59813: LD_VAR 0 2
59817: ARRAY
59818: IFFALSE 60027
// begin if GetControl ( vehicle ) = control_manual then
59820: LD_VAR 0 1
59824: PPUSH
59825: CALL_OW 263
59829: PUSH
59830: LD_INT 1
59832: EQUAL
59833: IFFALSE 59914
// begin driver := IsDrivenBy ( vehicle ) ;
59835: LD_ADDR_VAR 0 4
59839: PUSH
59840: LD_VAR 0 1
59844: PPUSH
59845: CALL_OW 311
59849: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59850: LD_VAR 0 4
59854: PPUSH
59855: LD_EXP 66
59859: PUSH
59860: LD_VAR 0 2
59864: ARRAY
59865: PUSH
59866: LD_INT 3
59868: ARRAY
59869: PPUSH
59870: LD_EXP 66
59874: PUSH
59875: LD_VAR 0 2
59879: ARRAY
59880: PUSH
59881: LD_INT 4
59883: ARRAY
59884: PPUSH
59885: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59889: LD_VAR 0 4
59893: PPUSH
59894: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59898: LD_VAR 0 4
59902: PPUSH
59903: LD_VAR 0 2
59907: PPUSH
59908: CALL_OW 180
// end else
59912: GO 60027
// if GetControl ( vehicle ) = control_remote then
59914: LD_VAR 0 1
59918: PPUSH
59919: CALL_OW 263
59923: PUSH
59924: LD_INT 2
59926: EQUAL
59927: IFFALSE 59988
// begin wait ( 0 0$2 ) ;
59929: LD_INT 70
59931: PPUSH
59932: CALL_OW 67
// if Connect ( vehicle ) then
59936: LD_VAR 0 1
59940: PPUSH
59941: CALL 10029 0 1
59945: IFFALSE 59986
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59947: LD_VAR 0 1
59951: PPUSH
59952: LD_EXP 66
59956: PUSH
59957: LD_VAR 0 2
59961: ARRAY
59962: PUSH
59963: LD_INT 3
59965: ARRAY
59966: PPUSH
59967: LD_EXP 66
59971: PUSH
59972: LD_VAR 0 2
59976: ARRAY
59977: PUSH
59978: LD_INT 4
59980: ARRAY
59981: PPUSH
59982: CALL_OW 171
// end else
59986: GO 60027
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59988: LD_VAR 0 1
59992: PPUSH
59993: LD_EXP 66
59997: PUSH
59998: LD_VAR 0 2
60002: ARRAY
60003: PUSH
60004: LD_INT 3
60006: ARRAY
60007: PPUSH
60008: LD_EXP 66
60012: PUSH
60013: LD_VAR 0 2
60017: ARRAY
60018: PUSH
60019: LD_INT 4
60021: ARRAY
60022: PPUSH
60023: CALL_OW 171
// end ; end ;
60027: LD_VAR 0 3
60031: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60032: LD_INT 0
60034: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60035: LD_VAR 0 1
60039: PUSH
60040: LD_INT 250
60042: EQUAL
60043: PUSH
60044: LD_VAR 0 2
60048: PPUSH
60049: CALL_OW 264
60053: PUSH
60054: LD_INT 81
60056: EQUAL
60057: AND
60058: IFFALSE 60079
// MinerPlaceMine ( unit , x , y ) ;
60060: LD_VAR 0 2
60064: PPUSH
60065: LD_VAR 0 4
60069: PPUSH
60070: LD_VAR 0 5
60074: PPUSH
60075: CALL 62464 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60079: LD_VAR 0 1
60083: PUSH
60084: LD_INT 251
60086: EQUAL
60087: PUSH
60088: LD_VAR 0 2
60092: PPUSH
60093: CALL_OW 264
60097: PUSH
60098: LD_INT 81
60100: EQUAL
60101: AND
60102: IFFALSE 60123
// MinerDetonateMine ( unit , x , y ) ;
60104: LD_VAR 0 2
60108: PPUSH
60109: LD_VAR 0 4
60113: PPUSH
60114: LD_VAR 0 5
60118: PPUSH
60119: CALL 62739 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60123: LD_VAR 0 1
60127: PUSH
60128: LD_INT 252
60130: EQUAL
60131: PUSH
60132: LD_VAR 0 2
60136: PPUSH
60137: CALL_OW 264
60141: PUSH
60142: LD_INT 81
60144: EQUAL
60145: AND
60146: IFFALSE 60167
// MinerCreateMinefield ( unit , x , y ) ;
60148: LD_VAR 0 2
60152: PPUSH
60153: LD_VAR 0 4
60157: PPUSH
60158: LD_VAR 0 5
60162: PPUSH
60163: CALL 63156 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60167: LD_VAR 0 1
60171: PUSH
60172: LD_INT 253
60174: EQUAL
60175: PUSH
60176: LD_VAR 0 2
60180: PPUSH
60181: CALL_OW 257
60185: PUSH
60186: LD_INT 5
60188: EQUAL
60189: AND
60190: IFFALSE 60211
// ComBinocular ( unit , x , y ) ;
60192: LD_VAR 0 2
60196: PPUSH
60197: LD_VAR 0 4
60201: PPUSH
60202: LD_VAR 0 5
60206: PPUSH
60207: CALL 63525 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60211: LD_VAR 0 1
60215: PUSH
60216: LD_INT 254
60218: EQUAL
60219: PUSH
60220: LD_VAR 0 2
60224: PPUSH
60225: CALL_OW 264
60229: PUSH
60230: LD_INT 99
60232: EQUAL
60233: AND
60234: PUSH
60235: LD_VAR 0 3
60239: PPUSH
60240: CALL_OW 263
60244: PUSH
60245: LD_INT 3
60247: EQUAL
60248: AND
60249: IFFALSE 60265
// HackDestroyVehicle ( unit , selectedUnit ) ;
60251: LD_VAR 0 2
60255: PPUSH
60256: LD_VAR 0 3
60260: PPUSH
60261: CALL 61828 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60265: LD_VAR 0 1
60269: PUSH
60270: LD_INT 255
60272: EQUAL
60273: PUSH
60274: LD_VAR 0 2
60278: PPUSH
60279: CALL_OW 264
60283: PUSH
60284: LD_INT 14
60286: PUSH
60287: LD_INT 53
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: IN
60294: AND
60295: PUSH
60296: LD_VAR 0 4
60300: PPUSH
60301: LD_VAR 0 5
60305: PPUSH
60306: CALL_OW 488
60310: AND
60311: IFFALSE 60335
// CutTreeXYR ( unit , x , y , 12 ) ;
60313: LD_VAR 0 2
60317: PPUSH
60318: LD_VAR 0 4
60322: PPUSH
60323: LD_VAR 0 5
60327: PPUSH
60328: LD_INT 12
60330: PPUSH
60331: CALL 60398 0 4
// if cmd = 256 then
60335: LD_VAR 0 1
60339: PUSH
60340: LD_INT 256
60342: EQUAL
60343: IFFALSE 60364
// SetFactoryWaypoint ( unit , x , y ) ;
60345: LD_VAR 0 2
60349: PPUSH
60350: LD_VAR 0 4
60354: PPUSH
60355: LD_VAR 0 5
60359: PPUSH
60360: CALL 58182 0 3
// if cmd = 257 then
60364: LD_VAR 0 1
60368: PUSH
60369: LD_INT 257
60371: EQUAL
60372: IFFALSE 60393
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60374: LD_VAR 0 2
60378: PPUSH
60379: LD_VAR 0 4
60383: PPUSH
60384: LD_VAR 0 5
60388: PPUSH
60389: CALL 58544 0 3
// end ;
60393: LD_VAR 0 6
60397: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60398: LD_INT 0
60400: PPUSH
60401: PPUSH
60402: PPUSH
60403: PPUSH
60404: PPUSH
60405: PPUSH
60406: PPUSH
60407: PPUSH
60408: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
60409: LD_VAR 0 1
60413: NOT
60414: PUSH
60415: LD_VAR 0 2
60419: PPUSH
60420: LD_VAR 0 3
60424: PPUSH
60425: CALL_OW 488
60429: NOT
60430: OR
60431: PUSH
60432: LD_VAR 0 4
60436: NOT
60437: OR
60438: IFFALSE 60442
// exit ;
60440: GO 60782
// list := [ ] ;
60442: LD_ADDR_VAR 0 13
60446: PUSH
60447: EMPTY
60448: ST_TO_ADDR
// if x - r < 0 then
60449: LD_VAR 0 2
60453: PUSH
60454: LD_VAR 0 4
60458: MINUS
60459: PUSH
60460: LD_INT 0
60462: LESS
60463: IFFALSE 60475
// min_x := 0 else
60465: LD_ADDR_VAR 0 7
60469: PUSH
60470: LD_INT 0
60472: ST_TO_ADDR
60473: GO 60491
// min_x := x - r ;
60475: LD_ADDR_VAR 0 7
60479: PUSH
60480: LD_VAR 0 2
60484: PUSH
60485: LD_VAR 0 4
60489: MINUS
60490: ST_TO_ADDR
// if y - r < 0 then
60491: LD_VAR 0 3
60495: PUSH
60496: LD_VAR 0 4
60500: MINUS
60501: PUSH
60502: LD_INT 0
60504: LESS
60505: IFFALSE 60517
// min_y := 0 else
60507: LD_ADDR_VAR 0 8
60511: PUSH
60512: LD_INT 0
60514: ST_TO_ADDR
60515: GO 60533
// min_y := y - r ;
60517: LD_ADDR_VAR 0 8
60521: PUSH
60522: LD_VAR 0 3
60526: PUSH
60527: LD_VAR 0 4
60531: MINUS
60532: ST_TO_ADDR
// max_x := x + r ;
60533: LD_ADDR_VAR 0 9
60537: PUSH
60538: LD_VAR 0 2
60542: PUSH
60543: LD_VAR 0 4
60547: PLUS
60548: ST_TO_ADDR
// max_y := y + r ;
60549: LD_ADDR_VAR 0 10
60553: PUSH
60554: LD_VAR 0 3
60558: PUSH
60559: LD_VAR 0 4
60563: PLUS
60564: ST_TO_ADDR
// for _x = min_x to max_x do
60565: LD_ADDR_VAR 0 11
60569: PUSH
60570: DOUBLE
60571: LD_VAR 0 7
60575: DEC
60576: ST_TO_ADDR
60577: LD_VAR 0 9
60581: PUSH
60582: FOR_TO
60583: IFFALSE 60700
// for _y = min_y to max_y do
60585: LD_ADDR_VAR 0 12
60589: PUSH
60590: DOUBLE
60591: LD_VAR 0 8
60595: DEC
60596: ST_TO_ADDR
60597: LD_VAR 0 10
60601: PUSH
60602: FOR_TO
60603: IFFALSE 60696
// begin if not ValidHex ( _x , _y ) then
60605: LD_VAR 0 11
60609: PPUSH
60610: LD_VAR 0 12
60614: PPUSH
60615: CALL_OW 488
60619: NOT
60620: IFFALSE 60624
// continue ;
60622: GO 60602
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60624: LD_VAR 0 11
60628: PPUSH
60629: LD_VAR 0 12
60633: PPUSH
60634: CALL_OW 351
60638: PUSH
60639: LD_VAR 0 11
60643: PPUSH
60644: LD_VAR 0 12
60648: PPUSH
60649: CALL_OW 554
60653: AND
60654: IFFALSE 60694
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60656: LD_ADDR_VAR 0 13
60660: PUSH
60661: LD_VAR 0 13
60665: PPUSH
60666: LD_VAR 0 13
60670: PUSH
60671: LD_INT 1
60673: PLUS
60674: PPUSH
60675: LD_VAR 0 11
60679: PUSH
60680: LD_VAR 0 12
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PPUSH
60689: CALL_OW 2
60693: ST_TO_ADDR
// end ;
60694: GO 60602
60696: POP
60697: POP
60698: GO 60582
60700: POP
60701: POP
// if not list then
60702: LD_VAR 0 13
60706: NOT
60707: IFFALSE 60711
// exit ;
60709: GO 60782
// for i in list do
60711: LD_ADDR_VAR 0 6
60715: PUSH
60716: LD_VAR 0 13
60720: PUSH
60721: FOR_IN
60722: IFFALSE 60780
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60724: LD_VAR 0 1
60728: PPUSH
60729: LD_STRING M
60731: PUSH
60732: LD_VAR 0 6
60736: PUSH
60737: LD_INT 1
60739: ARRAY
60740: PUSH
60741: LD_VAR 0 6
60745: PUSH
60746: LD_INT 2
60748: ARRAY
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: PUSH
60771: EMPTY
60772: LIST
60773: PPUSH
60774: CALL_OW 447
60778: GO 60721
60780: POP
60781: POP
// end ;
60782: LD_VAR 0 5
60786: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60787: LD_EXP 69
60791: NOT
60792: IFFALSE 60842
60794: GO 60796
60796: DISABLE
// begin initHack := true ;
60797: LD_ADDR_EXP 69
60801: PUSH
60802: LD_INT 1
60804: ST_TO_ADDR
// hackTanks := [ ] ;
60805: LD_ADDR_EXP 70
60809: PUSH
60810: EMPTY
60811: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60812: LD_ADDR_EXP 71
60816: PUSH
60817: EMPTY
60818: ST_TO_ADDR
// hackLimit := 3 ;
60819: LD_ADDR_EXP 72
60823: PUSH
60824: LD_INT 3
60826: ST_TO_ADDR
// hackDist := 12 ;
60827: LD_ADDR_EXP 73
60831: PUSH
60832: LD_INT 12
60834: ST_TO_ADDR
// hackCounter := [ ] ;
60835: LD_ADDR_EXP 74
60839: PUSH
60840: EMPTY
60841: ST_TO_ADDR
// end ;
60842: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60843: LD_EXP 69
60847: PUSH
60848: LD_INT 34
60850: PUSH
60851: LD_INT 99
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PPUSH
60858: CALL_OW 69
60862: AND
60863: IFFALSE 61116
60865: GO 60867
60867: DISABLE
60868: LD_INT 0
60870: PPUSH
60871: PPUSH
// begin enable ;
60872: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60873: LD_ADDR_VAR 0 1
60877: PUSH
60878: LD_INT 34
60880: PUSH
60881: LD_INT 99
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PPUSH
60888: CALL_OW 69
60892: PUSH
60893: FOR_IN
60894: IFFALSE 61114
// begin if not i in hackTanks then
60896: LD_VAR 0 1
60900: PUSH
60901: LD_EXP 70
60905: IN
60906: NOT
60907: IFFALSE 60990
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60909: LD_ADDR_EXP 70
60913: PUSH
60914: LD_EXP 70
60918: PPUSH
60919: LD_EXP 70
60923: PUSH
60924: LD_INT 1
60926: PLUS
60927: PPUSH
60928: LD_VAR 0 1
60932: PPUSH
60933: CALL_OW 1
60937: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60938: LD_ADDR_EXP 71
60942: PUSH
60943: LD_EXP 71
60947: PPUSH
60948: LD_EXP 71
60952: PUSH
60953: LD_INT 1
60955: PLUS
60956: PPUSH
60957: EMPTY
60958: PPUSH
60959: CALL_OW 1
60963: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60964: LD_ADDR_EXP 74
60968: PUSH
60969: LD_EXP 74
60973: PPUSH
60974: LD_EXP 74
60978: PUSH
60979: LD_INT 1
60981: PLUS
60982: PPUSH
60983: EMPTY
60984: PPUSH
60985: CALL_OW 1
60989: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60990: LD_VAR 0 1
60994: PPUSH
60995: CALL_OW 302
60999: NOT
61000: IFFALSE 61013
// begin HackUnlinkAll ( i ) ;
61002: LD_VAR 0 1
61006: PPUSH
61007: CALL 61119 0 1
// continue ;
61011: GO 60893
// end ; HackCheckCapturedStatus ( i ) ;
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL 61562 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61022: LD_ADDR_VAR 0 2
61026: PUSH
61027: LD_INT 81
61029: PUSH
61030: LD_VAR 0 1
61034: PPUSH
61035: CALL_OW 255
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 33
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 91
61056: PUSH
61057: LD_VAR 0 1
61061: PUSH
61062: LD_EXP 73
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 50
61074: PUSH
61075: EMPTY
61076: LIST
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: PPUSH
61084: CALL_OW 69
61088: ST_TO_ADDR
// if not tmp then
61089: LD_VAR 0 2
61093: NOT
61094: IFFALSE 61098
// continue ;
61096: GO 60893
// HackLink ( i , tmp ) ;
61098: LD_VAR 0 1
61102: PPUSH
61103: LD_VAR 0 2
61107: PPUSH
61108: CALL 61255 0 2
// end ;
61112: GO 60893
61114: POP
61115: POP
// end ;
61116: PPOPN 2
61118: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61119: LD_INT 0
61121: PPUSH
61122: PPUSH
61123: PPUSH
// if not hack in hackTanks then
61124: LD_VAR 0 1
61128: PUSH
61129: LD_EXP 70
61133: IN
61134: NOT
61135: IFFALSE 61139
// exit ;
61137: GO 61250
// index := GetElementIndex ( hackTanks , hack ) ;
61139: LD_ADDR_VAR 0 4
61143: PUSH
61144: LD_EXP 70
61148: PPUSH
61149: LD_VAR 0 1
61153: PPUSH
61154: CALL 6836 0 2
61158: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61159: LD_EXP 71
61163: PUSH
61164: LD_VAR 0 4
61168: ARRAY
61169: IFFALSE 61250
// begin for i in hackTanksCaptured [ index ] do
61171: LD_ADDR_VAR 0 3
61175: PUSH
61176: LD_EXP 71
61180: PUSH
61181: LD_VAR 0 4
61185: ARRAY
61186: PUSH
61187: FOR_IN
61188: IFFALSE 61214
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61190: LD_VAR 0 3
61194: PUSH
61195: LD_INT 1
61197: ARRAY
61198: PPUSH
61199: LD_VAR 0 3
61203: PUSH
61204: LD_INT 2
61206: ARRAY
61207: PPUSH
61208: CALL_OW 235
61212: GO 61187
61214: POP
61215: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61216: LD_ADDR_EXP 71
61220: PUSH
61221: LD_EXP 71
61225: PPUSH
61226: LD_VAR 0 4
61230: PPUSH
61231: EMPTY
61232: PPUSH
61233: CALL_OW 1
61237: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61238: LD_VAR 0 1
61242: PPUSH
61243: LD_INT 0
61245: PPUSH
61246: CALL_OW 505
// end ; end ;
61250: LD_VAR 0 2
61254: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61255: LD_INT 0
61257: PPUSH
61258: PPUSH
61259: PPUSH
// if not hack in hackTanks or not vehicles then
61260: LD_VAR 0 1
61264: PUSH
61265: LD_EXP 70
61269: IN
61270: NOT
61271: PUSH
61272: LD_VAR 0 2
61276: NOT
61277: OR
61278: IFFALSE 61282
// exit ;
61280: GO 61557
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61282: LD_ADDR_VAR 0 2
61286: PUSH
61287: LD_VAR 0 1
61291: PPUSH
61292: LD_VAR 0 2
61296: PPUSH
61297: LD_INT 1
61299: PPUSH
61300: LD_INT 1
61302: PPUSH
61303: CALL 7486 0 4
61307: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61308: LD_ADDR_VAR 0 5
61312: PUSH
61313: LD_EXP 70
61317: PPUSH
61318: LD_VAR 0 1
61322: PPUSH
61323: CALL 6836 0 2
61327: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61328: LD_EXP 71
61332: PUSH
61333: LD_VAR 0 5
61337: ARRAY
61338: PUSH
61339: LD_EXP 72
61343: LESS
61344: IFFALSE 61533
// begin for i := 1 to vehicles do
61346: LD_ADDR_VAR 0 4
61350: PUSH
61351: DOUBLE
61352: LD_INT 1
61354: DEC
61355: ST_TO_ADDR
61356: LD_VAR 0 2
61360: PUSH
61361: FOR_TO
61362: IFFALSE 61531
// begin if hackTanksCaptured [ index ] = hackLimit then
61364: LD_EXP 71
61368: PUSH
61369: LD_VAR 0 5
61373: ARRAY
61374: PUSH
61375: LD_EXP 72
61379: EQUAL
61380: IFFALSE 61384
// break ;
61382: GO 61531
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61384: LD_ADDR_EXP 74
61388: PUSH
61389: LD_EXP 74
61393: PPUSH
61394: LD_VAR 0 5
61398: PPUSH
61399: LD_EXP 74
61403: PUSH
61404: LD_VAR 0 5
61408: ARRAY
61409: PUSH
61410: LD_INT 1
61412: PLUS
61413: PPUSH
61414: CALL_OW 1
61418: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61419: LD_ADDR_EXP 71
61423: PUSH
61424: LD_EXP 71
61428: PPUSH
61429: LD_VAR 0 5
61433: PUSH
61434: LD_EXP 71
61438: PUSH
61439: LD_VAR 0 5
61443: ARRAY
61444: PUSH
61445: LD_INT 1
61447: PLUS
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PPUSH
61453: LD_VAR 0 2
61457: PUSH
61458: LD_VAR 0 4
61462: ARRAY
61463: PUSH
61464: LD_VAR 0 2
61468: PUSH
61469: LD_VAR 0 4
61473: ARRAY
61474: PPUSH
61475: CALL_OW 255
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PPUSH
61484: CALL 7051 0 3
61488: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61489: LD_VAR 0 2
61493: PUSH
61494: LD_VAR 0 4
61498: ARRAY
61499: PPUSH
61500: LD_VAR 0 1
61504: PPUSH
61505: CALL_OW 255
61509: PPUSH
61510: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61514: LD_VAR 0 2
61518: PUSH
61519: LD_VAR 0 4
61523: ARRAY
61524: PPUSH
61525: CALL_OW 141
// end ;
61529: GO 61361
61531: POP
61532: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61533: LD_VAR 0 1
61537: PPUSH
61538: LD_EXP 71
61542: PUSH
61543: LD_VAR 0 5
61547: ARRAY
61548: PUSH
61549: LD_INT 0
61551: PLUS
61552: PPUSH
61553: CALL_OW 505
// end ;
61557: LD_VAR 0 3
61561: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61562: LD_INT 0
61564: PPUSH
61565: PPUSH
61566: PPUSH
61567: PPUSH
// if not hack in hackTanks then
61568: LD_VAR 0 1
61572: PUSH
61573: LD_EXP 70
61577: IN
61578: NOT
61579: IFFALSE 61583
// exit ;
61581: GO 61823
// index := GetElementIndex ( hackTanks , hack ) ;
61583: LD_ADDR_VAR 0 4
61587: PUSH
61588: LD_EXP 70
61592: PPUSH
61593: LD_VAR 0 1
61597: PPUSH
61598: CALL 6836 0 2
61602: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61603: LD_ADDR_VAR 0 3
61607: PUSH
61608: DOUBLE
61609: LD_EXP 71
61613: PUSH
61614: LD_VAR 0 4
61618: ARRAY
61619: INC
61620: ST_TO_ADDR
61621: LD_INT 1
61623: PUSH
61624: FOR_DOWNTO
61625: IFFALSE 61797
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61627: LD_ADDR_VAR 0 5
61631: PUSH
61632: LD_EXP 71
61636: PUSH
61637: LD_VAR 0 4
61641: ARRAY
61642: PUSH
61643: LD_VAR 0 3
61647: ARRAY
61648: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61649: LD_VAR 0 5
61653: PUSH
61654: LD_INT 1
61656: ARRAY
61657: PPUSH
61658: CALL_OW 302
61662: NOT
61663: PUSH
61664: LD_VAR 0 5
61668: PUSH
61669: LD_INT 1
61671: ARRAY
61672: PPUSH
61673: CALL_OW 255
61677: PUSH
61678: LD_VAR 0 1
61682: PPUSH
61683: CALL_OW 255
61687: NONEQUAL
61688: OR
61689: IFFALSE 61795
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61691: LD_VAR 0 5
61695: PUSH
61696: LD_INT 1
61698: ARRAY
61699: PPUSH
61700: CALL_OW 305
61704: PUSH
61705: LD_VAR 0 5
61709: PUSH
61710: LD_INT 1
61712: ARRAY
61713: PPUSH
61714: CALL_OW 255
61718: PUSH
61719: LD_VAR 0 1
61723: PPUSH
61724: CALL_OW 255
61728: EQUAL
61729: AND
61730: IFFALSE 61754
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61732: LD_VAR 0 5
61736: PUSH
61737: LD_INT 1
61739: ARRAY
61740: PPUSH
61741: LD_VAR 0 5
61745: PUSH
61746: LD_INT 2
61748: ARRAY
61749: PPUSH
61750: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61754: LD_ADDR_EXP 71
61758: PUSH
61759: LD_EXP 71
61763: PPUSH
61764: LD_VAR 0 4
61768: PPUSH
61769: LD_EXP 71
61773: PUSH
61774: LD_VAR 0 4
61778: ARRAY
61779: PPUSH
61780: LD_VAR 0 3
61784: PPUSH
61785: CALL_OW 3
61789: PPUSH
61790: CALL_OW 1
61794: ST_TO_ADDR
// end ; end ;
61795: GO 61624
61797: POP
61798: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61799: LD_VAR 0 1
61803: PPUSH
61804: LD_EXP 71
61808: PUSH
61809: LD_VAR 0 4
61813: ARRAY
61814: PUSH
61815: LD_INT 0
61817: PLUS
61818: PPUSH
61819: CALL_OW 505
// end ;
61823: LD_VAR 0 2
61827: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61828: LD_INT 0
61830: PPUSH
61831: PPUSH
61832: PPUSH
61833: PPUSH
// if not hack in hackTanks then
61834: LD_VAR 0 1
61838: PUSH
61839: LD_EXP 70
61843: IN
61844: NOT
61845: IFFALSE 61849
// exit ;
61847: GO 61934
// index := GetElementIndex ( hackTanks , hack ) ;
61849: LD_ADDR_VAR 0 5
61853: PUSH
61854: LD_EXP 70
61858: PPUSH
61859: LD_VAR 0 1
61863: PPUSH
61864: CALL 6836 0 2
61868: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61869: LD_ADDR_VAR 0 4
61873: PUSH
61874: DOUBLE
61875: LD_INT 1
61877: DEC
61878: ST_TO_ADDR
61879: LD_EXP 71
61883: PUSH
61884: LD_VAR 0 5
61888: ARRAY
61889: PUSH
61890: FOR_TO
61891: IFFALSE 61932
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61893: LD_EXP 71
61897: PUSH
61898: LD_VAR 0 5
61902: ARRAY
61903: PUSH
61904: LD_VAR 0 4
61908: ARRAY
61909: PUSH
61910: LD_INT 1
61912: ARRAY
61913: PUSH
61914: LD_VAR 0 2
61918: EQUAL
61919: IFFALSE 61930
// KillUnit ( vehicle ) ;
61921: LD_VAR 0 2
61925: PPUSH
61926: CALL_OW 66
61930: GO 61890
61932: POP
61933: POP
// end ;
61934: LD_VAR 0 3
61938: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61939: LD_EXP 75
61943: NOT
61944: IFFALSE 61979
61946: GO 61948
61948: DISABLE
// begin initMiner := true ;
61949: LD_ADDR_EXP 75
61953: PUSH
61954: LD_INT 1
61956: ST_TO_ADDR
// minersList := [ ] ;
61957: LD_ADDR_EXP 76
61961: PUSH
61962: EMPTY
61963: ST_TO_ADDR
// minerMinesList := [ ] ;
61964: LD_ADDR_EXP 77
61968: PUSH
61969: EMPTY
61970: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61971: LD_ADDR_EXP 78
61975: PUSH
61976: LD_INT 5
61978: ST_TO_ADDR
// end ;
61979: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61980: LD_EXP 75
61984: PUSH
61985: LD_INT 34
61987: PUSH
61988: LD_INT 81
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PPUSH
61995: CALL_OW 69
61999: AND
62000: IFFALSE 62461
62002: GO 62004
62004: DISABLE
62005: LD_INT 0
62007: PPUSH
62008: PPUSH
62009: PPUSH
62010: PPUSH
// begin enable ;
62011: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62012: LD_ADDR_VAR 0 1
62016: PUSH
62017: LD_INT 34
62019: PUSH
62020: LD_INT 81
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PPUSH
62027: CALL_OW 69
62031: PUSH
62032: FOR_IN
62033: IFFALSE 62105
// begin if not i in minersList then
62035: LD_VAR 0 1
62039: PUSH
62040: LD_EXP 76
62044: IN
62045: NOT
62046: IFFALSE 62103
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62048: LD_ADDR_EXP 76
62052: PUSH
62053: LD_EXP 76
62057: PPUSH
62058: LD_EXP 76
62062: PUSH
62063: LD_INT 1
62065: PLUS
62066: PPUSH
62067: LD_VAR 0 1
62071: PPUSH
62072: CALL_OW 1
62076: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62077: LD_ADDR_EXP 77
62081: PUSH
62082: LD_EXP 77
62086: PPUSH
62087: LD_EXP 77
62091: PUSH
62092: LD_INT 1
62094: PLUS
62095: PPUSH
62096: EMPTY
62097: PPUSH
62098: CALL_OW 1
62102: ST_TO_ADDR
// end end ;
62103: GO 62032
62105: POP
62106: POP
// for i := minerMinesList downto 1 do
62107: LD_ADDR_VAR 0 1
62111: PUSH
62112: DOUBLE
62113: LD_EXP 77
62117: INC
62118: ST_TO_ADDR
62119: LD_INT 1
62121: PUSH
62122: FOR_DOWNTO
62123: IFFALSE 62459
// begin if IsLive ( minersList [ i ] ) then
62125: LD_EXP 76
62129: PUSH
62130: LD_VAR 0 1
62134: ARRAY
62135: PPUSH
62136: CALL_OW 300
62140: IFFALSE 62168
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62142: LD_EXP 76
62146: PUSH
62147: LD_VAR 0 1
62151: ARRAY
62152: PPUSH
62153: LD_EXP 77
62157: PUSH
62158: LD_VAR 0 1
62162: ARRAY
62163: PPUSH
62164: CALL_OW 505
// if not minerMinesList [ i ] then
62168: LD_EXP 77
62172: PUSH
62173: LD_VAR 0 1
62177: ARRAY
62178: NOT
62179: IFFALSE 62183
// continue ;
62181: GO 62122
// for j := minerMinesList [ i ] downto 1 do
62183: LD_ADDR_VAR 0 2
62187: PUSH
62188: DOUBLE
62189: LD_EXP 77
62193: PUSH
62194: LD_VAR 0 1
62198: ARRAY
62199: INC
62200: ST_TO_ADDR
62201: LD_INT 1
62203: PUSH
62204: FOR_DOWNTO
62205: IFFALSE 62455
// begin side := GetSide ( minersList [ i ] ) ;
62207: LD_ADDR_VAR 0 3
62211: PUSH
62212: LD_EXP 76
62216: PUSH
62217: LD_VAR 0 1
62221: ARRAY
62222: PPUSH
62223: CALL_OW 255
62227: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62228: LD_ADDR_VAR 0 4
62232: PUSH
62233: LD_EXP 77
62237: PUSH
62238: LD_VAR 0 1
62242: ARRAY
62243: PUSH
62244: LD_VAR 0 2
62248: ARRAY
62249: PUSH
62250: LD_INT 1
62252: ARRAY
62253: PPUSH
62254: LD_EXP 77
62258: PUSH
62259: LD_VAR 0 1
62263: ARRAY
62264: PUSH
62265: LD_VAR 0 2
62269: ARRAY
62270: PUSH
62271: LD_INT 2
62273: ARRAY
62274: PPUSH
62275: CALL_OW 428
62279: ST_TO_ADDR
// if not tmp then
62280: LD_VAR 0 4
62284: NOT
62285: IFFALSE 62289
// continue ;
62287: GO 62204
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62289: LD_VAR 0 4
62293: PUSH
62294: LD_INT 81
62296: PUSH
62297: LD_VAR 0 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PPUSH
62306: CALL_OW 69
62310: IN
62311: PUSH
62312: LD_EXP 77
62316: PUSH
62317: LD_VAR 0 1
62321: ARRAY
62322: PUSH
62323: LD_VAR 0 2
62327: ARRAY
62328: PUSH
62329: LD_INT 1
62331: ARRAY
62332: PPUSH
62333: LD_EXP 77
62337: PUSH
62338: LD_VAR 0 1
62342: ARRAY
62343: PUSH
62344: LD_VAR 0 2
62348: ARRAY
62349: PUSH
62350: LD_INT 2
62352: ARRAY
62353: PPUSH
62354: CALL_OW 458
62358: AND
62359: IFFALSE 62453
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62361: LD_EXP 77
62365: PUSH
62366: LD_VAR 0 1
62370: ARRAY
62371: PUSH
62372: LD_VAR 0 2
62376: ARRAY
62377: PUSH
62378: LD_INT 1
62380: ARRAY
62381: PPUSH
62382: LD_EXP 77
62386: PUSH
62387: LD_VAR 0 1
62391: ARRAY
62392: PUSH
62393: LD_VAR 0 2
62397: ARRAY
62398: PUSH
62399: LD_INT 2
62401: ARRAY
62402: PPUSH
62403: LD_VAR 0 3
62407: PPUSH
62408: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62412: LD_ADDR_EXP 77
62416: PUSH
62417: LD_EXP 77
62421: PPUSH
62422: LD_VAR 0 1
62426: PPUSH
62427: LD_EXP 77
62431: PUSH
62432: LD_VAR 0 1
62436: ARRAY
62437: PPUSH
62438: LD_VAR 0 2
62442: PPUSH
62443: CALL_OW 3
62447: PPUSH
62448: CALL_OW 1
62452: ST_TO_ADDR
// end ; end ;
62453: GO 62204
62455: POP
62456: POP
// end ;
62457: GO 62122
62459: POP
62460: POP
// end ;
62461: PPOPN 4
62463: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62464: LD_INT 0
62466: PPUSH
62467: PPUSH
// result := false ;
62468: LD_ADDR_VAR 0 4
62472: PUSH
62473: LD_INT 0
62475: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62476: LD_VAR 0 1
62480: PPUSH
62481: CALL_OW 264
62485: PUSH
62486: LD_INT 81
62488: EQUAL
62489: NOT
62490: IFFALSE 62494
// exit ;
62492: GO 62734
// index := GetElementIndex ( minersList , unit ) ;
62494: LD_ADDR_VAR 0 5
62498: PUSH
62499: LD_EXP 76
62503: PPUSH
62504: LD_VAR 0 1
62508: PPUSH
62509: CALL 6836 0 2
62513: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62514: LD_EXP 77
62518: PUSH
62519: LD_VAR 0 5
62523: ARRAY
62524: PUSH
62525: LD_EXP 78
62529: GREATEREQUAL
62530: IFFALSE 62534
// exit ;
62532: GO 62734
// ComMoveXY ( unit , x , y ) ;
62534: LD_VAR 0 1
62538: PPUSH
62539: LD_VAR 0 2
62543: PPUSH
62544: LD_VAR 0 3
62548: PPUSH
62549: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62553: LD_INT 35
62555: PPUSH
62556: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62560: LD_VAR 0 1
62564: PPUSH
62565: LD_VAR 0 2
62569: PPUSH
62570: LD_VAR 0 3
62574: PPUSH
62575: CALL 38220 0 3
62579: NOT
62580: PUSH
62581: LD_VAR 0 1
62585: PPUSH
62586: CALL_OW 314
62590: AND
62591: IFFALSE 62595
// exit ;
62593: GO 62734
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62595: LD_VAR 0 2
62599: PPUSH
62600: LD_VAR 0 3
62604: PPUSH
62605: CALL_OW 428
62609: PUSH
62610: LD_VAR 0 1
62614: EQUAL
62615: PUSH
62616: LD_VAR 0 1
62620: PPUSH
62621: CALL_OW 314
62625: NOT
62626: AND
62627: IFFALSE 62553
// PlaySoundXY ( x , y , PlantMine ) ;
62629: LD_VAR 0 2
62633: PPUSH
62634: LD_VAR 0 3
62638: PPUSH
62639: LD_STRING PlantMine
62641: PPUSH
62642: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62646: LD_VAR 0 2
62650: PPUSH
62651: LD_VAR 0 3
62655: PPUSH
62656: LD_VAR 0 1
62660: PPUSH
62661: CALL_OW 255
62665: PPUSH
62666: LD_INT 0
62668: PPUSH
62669: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62673: LD_ADDR_EXP 77
62677: PUSH
62678: LD_EXP 77
62682: PPUSH
62683: LD_VAR 0 5
62687: PUSH
62688: LD_EXP 77
62692: PUSH
62693: LD_VAR 0 5
62697: ARRAY
62698: PUSH
62699: LD_INT 1
62701: PLUS
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PPUSH
62707: LD_VAR 0 2
62711: PUSH
62712: LD_VAR 0 3
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PPUSH
62721: CALL 7051 0 3
62725: ST_TO_ADDR
// result := true ;
62726: LD_ADDR_VAR 0 4
62730: PUSH
62731: LD_INT 1
62733: ST_TO_ADDR
// end ;
62734: LD_VAR 0 4
62738: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62739: LD_INT 0
62741: PPUSH
62742: PPUSH
62743: PPUSH
// if not unit in minersList then
62744: LD_VAR 0 1
62748: PUSH
62749: LD_EXP 76
62753: IN
62754: NOT
62755: IFFALSE 62759
// exit ;
62757: GO 63151
// index := GetElementIndex ( minersList , unit ) ;
62759: LD_ADDR_VAR 0 6
62763: PUSH
62764: LD_EXP 76
62768: PPUSH
62769: LD_VAR 0 1
62773: PPUSH
62774: CALL 6836 0 2
62778: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62779: LD_ADDR_VAR 0 5
62783: PUSH
62784: DOUBLE
62785: LD_EXP 77
62789: PUSH
62790: LD_VAR 0 6
62794: ARRAY
62795: INC
62796: ST_TO_ADDR
62797: LD_INT 1
62799: PUSH
62800: FOR_DOWNTO
62801: IFFALSE 62962
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62803: LD_EXP 77
62807: PUSH
62808: LD_VAR 0 6
62812: ARRAY
62813: PUSH
62814: LD_VAR 0 5
62818: ARRAY
62819: PUSH
62820: LD_INT 1
62822: ARRAY
62823: PUSH
62824: LD_VAR 0 2
62828: EQUAL
62829: PUSH
62830: LD_EXP 77
62834: PUSH
62835: LD_VAR 0 6
62839: ARRAY
62840: PUSH
62841: LD_VAR 0 5
62845: ARRAY
62846: PUSH
62847: LD_INT 2
62849: ARRAY
62850: PUSH
62851: LD_VAR 0 3
62855: EQUAL
62856: AND
62857: IFFALSE 62960
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62859: LD_EXP 77
62863: PUSH
62864: LD_VAR 0 6
62868: ARRAY
62869: PUSH
62870: LD_VAR 0 5
62874: ARRAY
62875: PUSH
62876: LD_INT 1
62878: ARRAY
62879: PPUSH
62880: LD_EXP 77
62884: PUSH
62885: LD_VAR 0 6
62889: ARRAY
62890: PUSH
62891: LD_VAR 0 5
62895: ARRAY
62896: PUSH
62897: LD_INT 2
62899: ARRAY
62900: PPUSH
62901: LD_VAR 0 1
62905: PPUSH
62906: CALL_OW 255
62910: PPUSH
62911: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62915: LD_ADDR_EXP 77
62919: PUSH
62920: LD_EXP 77
62924: PPUSH
62925: LD_VAR 0 6
62929: PPUSH
62930: LD_EXP 77
62934: PUSH
62935: LD_VAR 0 6
62939: ARRAY
62940: PPUSH
62941: LD_VAR 0 5
62945: PPUSH
62946: CALL_OW 3
62950: PPUSH
62951: CALL_OW 1
62955: ST_TO_ADDR
// exit ;
62956: POP
62957: POP
62958: GO 63151
// end ; end ;
62960: GO 62800
62962: POP
62963: POP
// for i := minerMinesList [ index ] downto 1 do
62964: LD_ADDR_VAR 0 5
62968: PUSH
62969: DOUBLE
62970: LD_EXP 77
62974: PUSH
62975: LD_VAR 0 6
62979: ARRAY
62980: INC
62981: ST_TO_ADDR
62982: LD_INT 1
62984: PUSH
62985: FOR_DOWNTO
62986: IFFALSE 63149
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62988: LD_EXP 77
62992: PUSH
62993: LD_VAR 0 6
62997: ARRAY
62998: PUSH
62999: LD_VAR 0 5
63003: ARRAY
63004: PUSH
63005: LD_INT 1
63007: ARRAY
63008: PPUSH
63009: LD_EXP 77
63013: PUSH
63014: LD_VAR 0 6
63018: ARRAY
63019: PUSH
63020: LD_VAR 0 5
63024: ARRAY
63025: PUSH
63026: LD_INT 2
63028: ARRAY
63029: PPUSH
63030: LD_VAR 0 2
63034: PPUSH
63035: LD_VAR 0 3
63039: PPUSH
63040: CALL_OW 298
63044: PUSH
63045: LD_INT 6
63047: LESS
63048: IFFALSE 63147
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63050: LD_EXP 77
63054: PUSH
63055: LD_VAR 0 6
63059: ARRAY
63060: PUSH
63061: LD_VAR 0 5
63065: ARRAY
63066: PUSH
63067: LD_INT 1
63069: ARRAY
63070: PPUSH
63071: LD_EXP 77
63075: PUSH
63076: LD_VAR 0 6
63080: ARRAY
63081: PUSH
63082: LD_VAR 0 5
63086: ARRAY
63087: PUSH
63088: LD_INT 2
63090: ARRAY
63091: PPUSH
63092: LD_VAR 0 1
63096: PPUSH
63097: CALL_OW 255
63101: PPUSH
63102: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63106: LD_ADDR_EXP 77
63110: PUSH
63111: LD_EXP 77
63115: PPUSH
63116: LD_VAR 0 6
63120: PPUSH
63121: LD_EXP 77
63125: PUSH
63126: LD_VAR 0 6
63130: ARRAY
63131: PPUSH
63132: LD_VAR 0 5
63136: PPUSH
63137: CALL_OW 3
63141: PPUSH
63142: CALL_OW 1
63146: ST_TO_ADDR
// end ; end ;
63147: GO 62985
63149: POP
63150: POP
// end ;
63151: LD_VAR 0 4
63155: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63156: LD_INT 0
63158: PPUSH
63159: PPUSH
63160: PPUSH
63161: PPUSH
63162: PPUSH
63163: PPUSH
63164: PPUSH
63165: PPUSH
63166: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63167: LD_VAR 0 1
63171: PPUSH
63172: CALL_OW 264
63176: PUSH
63177: LD_INT 81
63179: EQUAL
63180: NOT
63181: PUSH
63182: LD_VAR 0 1
63186: PUSH
63187: LD_EXP 76
63191: IN
63192: NOT
63193: OR
63194: IFFALSE 63198
// exit ;
63196: GO 63520
// index := GetElementIndex ( minersList , unit ) ;
63198: LD_ADDR_VAR 0 6
63202: PUSH
63203: LD_EXP 76
63207: PPUSH
63208: LD_VAR 0 1
63212: PPUSH
63213: CALL 6836 0 2
63217: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63218: LD_ADDR_VAR 0 8
63222: PUSH
63223: LD_EXP 78
63227: PUSH
63228: LD_EXP 77
63232: PUSH
63233: LD_VAR 0 6
63237: ARRAY
63238: MINUS
63239: ST_TO_ADDR
// if not minesFreeAmount then
63240: LD_VAR 0 8
63244: NOT
63245: IFFALSE 63249
// exit ;
63247: GO 63520
// tmp := [ ] ;
63249: LD_ADDR_VAR 0 7
63253: PUSH
63254: EMPTY
63255: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63256: LD_ADDR_VAR 0 5
63260: PUSH
63261: DOUBLE
63262: LD_INT 1
63264: DEC
63265: ST_TO_ADDR
63266: LD_VAR 0 8
63270: PUSH
63271: FOR_TO
63272: IFFALSE 63467
// begin _d := rand ( 0 , 5 ) ;
63274: LD_ADDR_VAR 0 11
63278: PUSH
63279: LD_INT 0
63281: PPUSH
63282: LD_INT 5
63284: PPUSH
63285: CALL_OW 12
63289: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63290: LD_ADDR_VAR 0 12
63294: PUSH
63295: LD_INT 2
63297: PPUSH
63298: LD_INT 6
63300: PPUSH
63301: CALL_OW 12
63305: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63306: LD_ADDR_VAR 0 9
63310: PUSH
63311: LD_VAR 0 2
63315: PPUSH
63316: LD_VAR 0 11
63320: PPUSH
63321: LD_VAR 0 12
63325: PPUSH
63326: CALL_OW 272
63330: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63331: LD_ADDR_VAR 0 10
63335: PUSH
63336: LD_VAR 0 3
63340: PPUSH
63341: LD_VAR 0 11
63345: PPUSH
63346: LD_VAR 0 12
63350: PPUSH
63351: CALL_OW 273
63355: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63356: LD_VAR 0 9
63360: PPUSH
63361: LD_VAR 0 10
63365: PPUSH
63366: CALL_OW 488
63370: PUSH
63371: LD_VAR 0 9
63375: PUSH
63376: LD_VAR 0 10
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_VAR 0 7
63389: IN
63390: NOT
63391: AND
63392: PUSH
63393: LD_VAR 0 9
63397: PPUSH
63398: LD_VAR 0 10
63402: PPUSH
63403: CALL_OW 458
63407: NOT
63408: AND
63409: IFFALSE 63451
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63411: LD_ADDR_VAR 0 7
63415: PUSH
63416: LD_VAR 0 7
63420: PPUSH
63421: LD_VAR 0 7
63425: PUSH
63426: LD_INT 1
63428: PLUS
63429: PPUSH
63430: LD_VAR 0 9
63434: PUSH
63435: LD_VAR 0 10
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PPUSH
63444: CALL_OW 1
63448: ST_TO_ADDR
63449: GO 63465
// i := i - 1 ;
63451: LD_ADDR_VAR 0 5
63455: PUSH
63456: LD_VAR 0 5
63460: PUSH
63461: LD_INT 1
63463: MINUS
63464: ST_TO_ADDR
// end ;
63465: GO 63271
63467: POP
63468: POP
// for i in tmp do
63469: LD_ADDR_VAR 0 5
63473: PUSH
63474: LD_VAR 0 7
63478: PUSH
63479: FOR_IN
63480: IFFALSE 63518
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63482: LD_VAR 0 1
63486: PPUSH
63487: LD_VAR 0 5
63491: PUSH
63492: LD_INT 1
63494: ARRAY
63495: PPUSH
63496: LD_VAR 0 5
63500: PUSH
63501: LD_INT 2
63503: ARRAY
63504: PPUSH
63505: CALL 62464 0 3
63509: NOT
63510: IFFALSE 63516
// exit ;
63512: POP
63513: POP
63514: GO 63520
63516: GO 63479
63518: POP
63519: POP
// end ;
63520: LD_VAR 0 4
63524: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63525: LD_INT 0
63527: PPUSH
63528: PPUSH
63529: PPUSH
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
// if not GetClass ( unit ) = class_sniper then
63534: LD_VAR 0 1
63538: PPUSH
63539: CALL_OW 257
63543: PUSH
63544: LD_INT 5
63546: EQUAL
63547: NOT
63548: IFFALSE 63552
// exit ;
63550: GO 63940
// dist := 8 ;
63552: LD_ADDR_VAR 0 5
63556: PUSH
63557: LD_INT 8
63559: ST_TO_ADDR
// viewRange := 12 ;
63560: LD_ADDR_VAR 0 7
63564: PUSH
63565: LD_INT 12
63567: ST_TO_ADDR
// side := GetSide ( unit ) ;
63568: LD_ADDR_VAR 0 6
63572: PUSH
63573: LD_VAR 0 1
63577: PPUSH
63578: CALL_OW 255
63582: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63583: LD_INT 61
63585: PPUSH
63586: LD_VAR 0 6
63590: PPUSH
63591: CALL_OW 321
63595: PUSH
63596: LD_INT 2
63598: EQUAL
63599: IFFALSE 63609
// viewRange := 16 ;
63601: LD_ADDR_VAR 0 7
63605: PUSH
63606: LD_INT 16
63608: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63609: LD_VAR 0 1
63613: PPUSH
63614: LD_VAR 0 2
63618: PPUSH
63619: LD_VAR 0 3
63623: PPUSH
63624: CALL_OW 297
63628: PUSH
63629: LD_VAR 0 5
63633: GREATER
63634: IFFALSE 63713
// begin ComMoveXY ( unit , x , y ) ;
63636: LD_VAR 0 1
63640: PPUSH
63641: LD_VAR 0 2
63645: PPUSH
63646: LD_VAR 0 3
63650: PPUSH
63651: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63655: LD_INT 35
63657: PPUSH
63658: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63662: LD_VAR 0 1
63666: PPUSH
63667: LD_VAR 0 2
63671: PPUSH
63672: LD_VAR 0 3
63676: PPUSH
63677: CALL 38220 0 3
63681: NOT
63682: IFFALSE 63686
// exit ;
63684: GO 63940
// until GetDistUnitXY ( unit , x , y ) < dist ;
63686: LD_VAR 0 1
63690: PPUSH
63691: LD_VAR 0 2
63695: PPUSH
63696: LD_VAR 0 3
63700: PPUSH
63701: CALL_OW 297
63705: PUSH
63706: LD_VAR 0 5
63710: LESS
63711: IFFALSE 63655
// end ; ComTurnXY ( unit , x , y ) ;
63713: LD_VAR 0 1
63717: PPUSH
63718: LD_VAR 0 2
63722: PPUSH
63723: LD_VAR 0 3
63727: PPUSH
63728: CALL_OW 118
// wait ( 5 ) ;
63732: LD_INT 5
63734: PPUSH
63735: CALL_OW 67
// _d := GetDir ( unit ) ;
63739: LD_ADDR_VAR 0 10
63743: PUSH
63744: LD_VAR 0 1
63748: PPUSH
63749: CALL_OW 254
63753: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63754: LD_ADDR_VAR 0 8
63758: PUSH
63759: LD_VAR 0 1
63763: PPUSH
63764: CALL_OW 250
63768: PPUSH
63769: LD_VAR 0 10
63773: PPUSH
63774: LD_VAR 0 5
63778: PPUSH
63779: CALL_OW 272
63783: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
63784: LD_ADDR_VAR 0 9
63788: PUSH
63789: LD_VAR 0 1
63793: PPUSH
63794: CALL_OW 251
63798: PPUSH
63799: LD_VAR 0 10
63803: PPUSH
63804: LD_VAR 0 5
63808: PPUSH
63809: CALL_OW 273
63813: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63814: LD_VAR 0 8
63818: PPUSH
63819: LD_VAR 0 9
63823: PPUSH
63824: CALL_OW 488
63828: NOT
63829: IFFALSE 63833
// exit ;
63831: GO 63940
// ComAnimCustom ( unit , 1 ) ;
63833: LD_VAR 0 1
63837: PPUSH
63838: LD_INT 1
63840: PPUSH
63841: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63845: LD_VAR 0 8
63849: PPUSH
63850: LD_VAR 0 9
63854: PPUSH
63855: LD_VAR 0 6
63859: PPUSH
63860: LD_VAR 0 7
63864: PPUSH
63865: CALL_OW 330
// repeat wait ( 1 ) ;
63869: LD_INT 1
63871: PPUSH
63872: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63876: LD_VAR 0 1
63880: PPUSH
63881: CALL_OW 316
63885: PUSH
63886: LD_VAR 0 1
63890: PPUSH
63891: CALL_OW 314
63895: OR
63896: PUSH
63897: LD_VAR 0 1
63901: PPUSH
63902: CALL_OW 302
63906: NOT
63907: OR
63908: PUSH
63909: LD_VAR 0 1
63913: PPUSH
63914: CALL_OW 301
63918: OR
63919: IFFALSE 63869
// RemoveSeeing ( _x , _y , side ) ;
63921: LD_VAR 0 8
63925: PPUSH
63926: LD_VAR 0 9
63930: PPUSH
63931: LD_VAR 0 6
63935: PPUSH
63936: CALL_OW 331
// end ;
63940: LD_VAR 0 4
63944: RET
