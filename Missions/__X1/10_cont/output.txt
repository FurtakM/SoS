// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// CreateNature ;
   8: CALL 11352 0 0
// PrepareArabian ;
  12: CALL 247 0 0
// PrepareAmerican ;
  16: CALL 682 0 0
// PrepareLegion ;
  20: CALL 5902 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 11958 0 0
// end ;
  41: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter , americanWave ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 09_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 09_
  60: ST_TO_ADDR
// amScriptActive := true ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// legScriptActive := true ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 16
  84: PUSH
  85: LD_INT 14
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: LD_OWVAR 67
 104: ARRAY
 105: ST_TO_ADDR
// spotAmericanBase := false ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// spotArabianBase := false ;
 114: LD_ADDR_EXP 7
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// spotLegion := false ;
 122: LD_ADDR_EXP 10
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// spotByAmerican := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// spotByLegion := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// americanDestroyed := false ;
 146: LD_ADDR_EXP 11
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// legionDestroyed := false ;
 154: LD_ADDR_EXP 12
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasMastodont := false ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasVehicles := false ;
 170: LD_ADDR_EXP 14
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// hasTigers := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// hasApes := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasDrugs := false ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// canFinish := false ;
 202: LD_ADDR_EXP 18
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// gameActive := false ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// omarCanChangeClass := false ;
 218: LD_ADDR_EXP 20
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// tigerCounter := 0 ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// americanWave := 0 ;
 234: LD_ADDR_EXP 22
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// end ; end_of_file
 242: LD_VAR 0 1
 246: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 247: LD_INT 0
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
// uc_side := 2 ;
 253: LD_ADDR_OWVAR 20
 257: PUSH
 258: LD_INT 2
 260: ST_TO_ADDR
// uc_nation := nation_arabian ;
 261: LD_ADDR_OWVAR 21
 265: PUSH
 266: LD_INT 2
 268: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_STRING Heike
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_EXP 2
 287: PPUSH
 288: CALL 21227 0 3
 292: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 293: LD_INT 14
 295: PPUSH
 296: LD_INT 3
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 27
 304: PPUSH
 305: LD_INT 100
 307: PPUSH
 308: CALL 26247 0 5
// heikeVehicle := CreateVehicle ;
 312: LD_ADDR_EXP 25
 316: PUSH
 317: CALL_OW 45
 321: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 322: LD_EXP 25
 326: PPUSH
 327: LD_INT 4
 329: PPUSH
 330: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 334: LD_EXP 25
 338: PPUSH
 339: LD_INT 118
 341: PPUSH
 342: LD_INT 37
 344: PPUSH
 345: LD_INT 0
 347: PPUSH
 348: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 352: LD_EXP 23
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 364: LD_EXP 23
 368: PPUSH
 369: LD_EXP 25
 373: PPUSH
 374: CALL_OW 52
// uc_side := 5 ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_INT 5
 385: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 386: LD_ADDR_EXP 24
 390: PUSH
 391: LD_STRING Omar
 393: PPUSH
 394: CALL_OW 25
 398: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 399: LD_INT 14
 401: PPUSH
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 27
 410: PPUSH
 411: LD_INT 100
 413: PPUSH
 414: CALL 26247 0 5
// omarVehicle := CreateVehicle ;
 418: LD_ADDR_EXP 26
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 428: LD_EXP 26
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 440: LD_ADDR_VAR 0 2
 444: PUSH
 445: LD_INT 22
 447: PUSH
 448: LD_INT 5
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 21
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: PUSH
 474: FOR_IN
 475: IFFALSE 499
// SetLives ( i , rand ( 300 , 499 ) ) ;
 477: LD_VAR 0 2
 481: PPUSH
 482: LD_INT 300
 484: PPUSH
 485: LD_INT 499
 487: PPUSH
 488: CALL_OW 12
 492: PPUSH
 493: CALL_OW 234
 497: GO 474
 499: POP
 500: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 501: LD_INT 85
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 200
 514: PUSH
 515: LD_INT 20
 517: PUSH
 518: LD_OWVAR 67
 522: MUL
 523: MINUS
 524: PPUSH
 525: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 529: LD_INT 85
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 20
 542: PPUSH
 543: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 547: LD_INT 14
 549: PPUSH
 550: LD_INT 3
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: LD_INT 32
 558: PPUSH
 559: LD_INT 100
 561: PPUSH
 562: CALL 26247 0 5
// veh := CreateVehicle ;
 566: LD_ADDR_VAR 0 4
 570: PUSH
 571: CALL_OW 45
 575: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 576: LD_VAR 0 4
 580: PPUSH
 581: LD_INT 4
 583: PPUSH
 584: CALL_OW 233
// SetLives ( veh , 420 ) ;
 588: LD_VAR 0 4
 592: PPUSH
 593: LD_INT 420
 595: PPUSH
 596: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 600: LD_VAR 0 4
 604: PPUSH
 605: LD_INT 193
 607: PPUSH
 608: LD_INT 133
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 618: LD_INT 14
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: LD_INT 26
 629: PPUSH
 630: LD_INT 11
 632: PPUSH
 633: CALL 26247 0 5
// veh := CreateVehicle ;
 637: LD_ADDR_VAR 0 4
 641: PUSH
 642: CALL_OW 45
 646: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 647: LD_VAR 0 4
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 659: LD_VAR 0 4
 663: PPUSH
 664: LD_INT 261
 666: PPUSH
 667: LD_INT 115
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 48
// end ; end_of_file
 677: LD_VAR 0 1
 681: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 682: LD_INT 0
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// uc_side := 1 ;
 692: LD_ADDR_OWVAR 20
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// uc_nation := nation_american ;
 700: LD_ADDR_OWVAR 21
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// amForces := [ ] ;
 708: LD_ADDR_EXP 27
 712: PUSH
 713: EMPTY
 714: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 715: LD_ADDR_EXP 28
 719: PUSH
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 1
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: CALL 21374 0 3
 733: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 734: LD_ADDR_EXP 29
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 12
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 13
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 779: LD_ADDR_EXP 30
 783: PUSH
 784: LD_INT 94
 786: PUSH
 787: LD_INT 132
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// amBuildings := [ ] ;
 794: LD_ADDR_EXP 31
 798: PUSH
 799: EMPTY
 800: ST_TO_ADDR
// amTanks := [ ] ;
 801: LD_ADDR_EXP 32
 805: PUSH
 806: EMPTY
 807: ST_TO_ADDR
// amCargo := 0 ;
 808: LD_ADDR_EXP 34
 812: PUSH
 813: LD_INT 0
 815: ST_TO_ADDR
// amPatrol := [ ] ;
 816: LD_ADDR_EXP 35
 820: PUSH
 821: EMPTY
 822: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 823: LD_ADDR_VAR 0 7
 827: PUSH
 828: LD_INT 77
 830: PUSH
 831: LD_INT 121
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 98
 840: PUSH
 841: LD_INT 145
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// for i in sources do
 852: LD_ADDR_VAR 0 2
 856: PUSH
 857: LD_VAR 0 7
 861: PUSH
 862: FOR_IN
 863: IFFALSE 892
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 865: LD_VAR 0 2
 869: PUSH
 870: LD_INT 1
 872: ARRAY
 873: PPUSH
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: CALL_OW 441
 890: GO 862
 892: POP
 893: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 894: LD_INT 2
 896: PPUSH
 897: CALL_OW 274
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 550
 907: PPUSH
 908: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 274
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 120
 925: PPUSH
 926: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 274
 937: PPUSH
 938: LD_INT 3
 940: PPUSH
 941: LD_INT 30
 943: PPUSH
 944: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 948: LD_ADDR_VAR 0 6
 952: PUSH
 953: LD_INT 6
 955: PUSH
 956: LD_INT 7
 958: PUSH
 959: LD_INT 8
 961: PUSH
 962: LD_INT 9
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_OWVAR 67
 975: ARRAY
 976: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 977: LD_ADDR_EXP 33
 981: PUSH
 982: LD_STRING Brown
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: LD_STRING 
 990: PPUSH
 991: CALL 21227 0 3
 995: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 996: LD_EXP 33
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: CALL_OW 52
// for i := 1 to 4 do
1008: LD_ADDR_VAR 0 2
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_INT 4
1020: PUSH
1021: FOR_TO
1022: IFFALSE 1548
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1024: LD_ADDR_VAR 0 3
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 6
1036: PUSH
1037: LD_INT 7
1039: PUSH
1040: LD_INT 8
1042: PUSH
1043: LD_INT 9
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_OWVAR 67
1056: ARRAY
1057: PUSH
1058: LD_INT 3
1060: PUSH
1061: LD_INT 4
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 5
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_OWVAR 67
1080: ARRAY
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: LD_INT 5
1087: PUSH
1088: LD_INT 6
1090: PUSH
1091: LD_INT 7
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_OWVAR 67
1104: ARRAY
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 3
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_OWVAR 67
1128: ARRAY
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: LD_VAR 0 2
1140: ARRAY
1141: PUSH
1142: FOR_TO
1143: IFFALSE 1544
// begin PrepareHuman ( false , i , skill ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_VAR 0 6
1157: PPUSH
1158: CALL_OW 380
// un := CreateHuman ;
1162: LD_ADDR_VAR 0 5
1166: PUSH
1167: CALL_OW 44
1171: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1172: LD_ADDR_EXP 27
1176: PUSH
1177: LD_EXP 27
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL 59427 0 2
1191: ST_TO_ADDR
// case i of 1 :
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 1
1199: DOUBLE
1200: EQUAL
1201: IFTRUE 1205
1203: GO 1274
1205: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: LD_INT 30
1226: PUSH
1227: LD_INT 32
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 3
1251: PUSH
1252: LD_INT 62
1254: PUSH
1255: EMPTY
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PPUSH
1267: CALL_OW 69
1271: ST_TO_ADDR
1272: GO 1453
1274: LD_INT 2
1276: DOUBLE
1277: EQUAL
1278: IFTRUE 1282
1280: GO 1311
1282: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1283: LD_ADDR_VAR 0 4
1287: PUSH
1288: LD_INT 2
1290: PPUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 62
1296: PUSH
1297: EMPTY
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PPUSH
1304: CALL_OW 72
1308: ST_TO_ADDR
1309: GO 1453
1311: LD_INT 3
1313: DOUBLE
1314: EQUAL
1315: IFTRUE 1319
1317: GO 1393
1319: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1320: LD_ADDR_VAR 0 4
1324: PUSH
1325: LD_INT 22
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: LD_INT 2
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 3
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 30
1350: PUSH
1351: LD_INT 36
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 3
1365: PUSH
1366: LD_INT 62
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: PPUSH
1381: CALL_OW 69
1385: PPUSH
1386: CALL 54507 0 1
1390: ST_TO_ADDR
1391: GO 1453
1393: LD_INT 4
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1452
1401: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 30
1419: PUSH
1420: LD_INT 8
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 3
1429: PUSH
1430: LD_INT 62
1432: PUSH
1433: EMPTY
1434: LIST
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: PPUSH
1445: CALL_OW 69
1449: ST_TO_ADDR
1450: GO 1453
1452: POP
// if b then
1453: LD_VAR 0 4
1457: IFFALSE 1521
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1459: LD_VAR 0 4
1463: PUSH
1464: LD_INT 1
1466: ARRAY
1467: PPUSH
1468: CALL_OW 266
1472: PUSH
1473: LD_INT 5
1475: EQUAL
1476: IFFALSE 1487
1478: PUSH
1479: LD_INT 60
1481: PPUSH
1482: CALL_OW 13
1486: AND
1487: IFFALSE 1501
// SetClass ( un , class_sniper ) ;
1489: LD_VAR 0 5
1493: PPUSH
1494: LD_INT 5
1496: PPUSH
1497: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1501: LD_VAR 0 5
1505: PPUSH
1506: LD_VAR 0 4
1510: PUSH
1511: LD_INT 1
1513: ARRAY
1514: PPUSH
1515: CALL_OW 52
// end else
1519: GO 1542
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1521: LD_VAR 0 5
1525: PPUSH
1526: LD_INT 92
1528: PPUSH
1529: LD_INT 137
1531: PPUSH
1532: LD_INT 4
1534: PPUSH
1535: LD_INT 0
1537: PPUSH
1538: CALL_OW 50
// end ;
1542: GO 1142
1544: POP
1545: POP
1546: GO 1021
1548: POP
1549: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1550: LD_ADDR_VAR 0 8
1554: PUSH
1555: LD_INT 30
1557: PUSH
1558: LD_INT 32
1560: PUSH
1561: LD_INT 36
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1569: LD_ADDR_VAR 0 2
1573: PUSH
1574: DOUBLE
1575: LD_INT 1
1577: DEC
1578: ST_TO_ADDR
1579: LD_VAR 0 8
1583: PUSH
1584: FOR_TO
1585: IFFALSE 1754
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: DOUBLE
1593: LD_INT 1
1595: DEC
1596: ST_TO_ADDR
1597: LD_INT 1
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 2
1605: PUSH
1606: LD_INT 3
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_OWVAR 67
1619: ARRAY
1620: PUSH
1621: FOR_TO
1622: IFFALSE 1750
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1624: LD_INT 0
1626: PPUSH
1627: LD_INT 7
1629: PUSH
1630: LD_INT 8
1632: PUSH
1633: LD_INT 9
1635: PUSH
1636: LD_INT 10
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 381
// un := CreateHuman ;
1655: LD_ADDR_VAR 0 5
1659: PUSH
1660: CALL_OW 44
1664: ST_TO_ADDR
// if j mod 2 = 0 then
1665: LD_VAR 0 3
1669: PUSH
1670: LD_INT 2
1672: MOD
1673: PUSH
1674: LD_INT 0
1676: EQUAL
1677: IFFALSE 1691
// SetClass ( un , class_sniper ) ;
1679: LD_VAR 0 5
1683: PPUSH
1684: LD_INT 5
1686: PPUSH
1687: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1691: LD_ADDR_EXP 35
1695: PUSH
1696: LD_EXP 35
1700: PPUSH
1701: LD_VAR 0 5
1705: PPUSH
1706: CALL 59427 0 2
1710: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1711: LD_VAR 0 5
1715: PPUSH
1716: LD_VAR 0 8
1720: PUSH
1721: LD_VAR 0 2
1725: ARRAY
1726: PPUSH
1727: LD_INT 0
1729: PPUSH
1730: CALL_OW 49
// SetTag ( un , i ) ;
1734: LD_VAR 0 5
1738: PPUSH
1739: LD_VAR 0 2
1743: PPUSH
1744: CALL_OW 109
// end ;
1748: GO 1621
1750: POP
1751: POP
// end ;
1752: GO 1584
1754: POP
1755: POP
// end ;
1756: LD_VAR 0 1
1760: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1761: LD_EXP 3
1765: IFFALSE 1778
1767: PUSH
1768: LD_EXP 27
1772: PPUSH
1773: CALL 23451 0 1
1777: AND
1778: IFFALSE 4209
1780: GO 1782
1782: DISABLE
1783: LD_INT 0
1785: PPUSH
1786: PPUSH
1787: PPUSH
1788: PPUSH
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
1801: PPUSH
1802: PPUSH
// begin enable ;
1803: ENABLE
// side := 1 ;
1804: LD_ADDR_VAR 0 5
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1812: LD_ADDR_VAR 0 3
1816: PUSH
1817: LD_INT 22
1819: PUSH
1820: LD_VAR 0 5
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 33
1831: PUSH
1832: LD_INT 2
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 50
1841: PUSH
1842: EMPTY
1843: LIST
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: LD_INT 61
1850: PUSH
1851: EMPTY
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1869: LD_VAR 0 3
1873: IFFALSE 1919
1875: PUSH
1876: LD_INT 22
1878: PUSH
1879: LD_VAR 0 5
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 50
1890: PUSH
1891: EMPTY
1892: LIST
1893: PUSH
1894: LD_INT 30
1896: PUSH
1897: LD_INT 36
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PPUSH
1909: CALL_OW 69
1913: PPUSH
1914: CALL 23451 0 1
1918: AND
1919: IFFALSE 1947
// for i in remote do
1921: LD_ADDR_VAR 0 1
1925: PUSH
1926: LD_VAR 0 3
1930: PUSH
1931: FOR_IN
1932: IFFALSE 1945
// Connect ( i ) ;
1934: LD_VAR 0 1
1938: PPUSH
1939: CALL 29729 0 1
1943: GO 1931
1945: POP
1946: POP
// if amTech then
1947: LD_EXP 28
1951: IFFALSE 2107
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1953: LD_ADDR_VAR 0 6
1957: PUSH
1958: LD_INT 22
1960: PUSH
1961: LD_VAR 0 5
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 50
1972: PUSH
1973: EMPTY
1974: LIST
1975: PUSH
1976: LD_INT 2
1978: PUSH
1979: LD_INT 30
1981: PUSH
1982: LD_INT 6
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 30
1991: PUSH
1992: LD_INT 7
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 30
2001: PUSH
2002: LD_INT 8
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: PPUSH
2020: CALL_OW 69
2024: ST_TO_ADDR
// if lab then
2025: LD_VAR 0 6
2029: IFFALSE 2107
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2031: LD_VAR 0 6
2035: PUSH
2036: LD_INT 1
2038: ARRAY
2039: PPUSH
2040: CALL_OW 461
2044: PUSH
2045: LD_INT 2
2047: EQUAL
2048: IFFALSE 2107
// begin for i in amTech do
2050: LD_ADDR_VAR 0 1
2054: PUSH
2055: LD_EXP 28
2059: PUSH
2060: FOR_IN
2061: IFFALSE 2105
// if CanBeResearched ( lab [ 1 ] , i ) then
2063: LD_VAR 0 6
2067: PUSH
2068: LD_INT 1
2070: ARRAY
2071: PPUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: CALL_OW 430
2081: IFFALSE 2103
// begin ComResearch ( lab [ 1 ] , i ) ;
2083: LD_VAR 0 6
2087: PUSH
2088: LD_INT 1
2090: ARRAY
2091: PPUSH
2092: LD_VAR 0 1
2096: PPUSH
2097: CALL_OW 124
// break ;
2101: GO 2105
// end ;
2103: GO 2060
2105: POP
2106: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2107: LD_ADDR_VAR 0 16
2111: PUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_INT 22
2117: PUSH
2118: LD_VAR 0 5
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: LD_INT 50
2139: PUSH
2140: EMPTY
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PPUSH
2148: CALL_OW 70
2152: ST_TO_ADDR
// if fac then
2153: LD_VAR 0 16
2157: IFFALSE 2423
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2159: LD_VAR 0 16
2163: PUSH
2164: LD_INT 1
2166: ARRAY
2167: PPUSH
2168: CALL_OW 461
2172: PUSH
2173: LD_INT 2
2175: EQUAL
2176: IFFALSE 2423
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2178: LD_ADDR_VAR 0 17
2182: PUSH
2183: LD_INT 1
2185: PPUSH
2186: LD_INT 2
2188: PUSH
2189: LD_INT 30
2191: PUSH
2192: LD_INT 32
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 30
2201: PUSH
2202: LD_INT 33
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 35
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PPUSH
2228: CALL_OW 70
2232: ST_TO_ADDR
// if emptyTowers then
2233: LD_VAR 0 17
2237: IFFALSE 2285
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2239: LD_ADDR_VAR 0 18
2243: PUSH
2244: LD_VAR 0 17
2248: PUSH
2249: LD_INT 1
2251: ARRAY
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 31776 0 2
2260: ST_TO_ADDR
// if weapon then
2261: LD_VAR 0 18
2265: IFFALSE 2285
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2267: LD_VAR 0 17
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: LD_VAR 0 18
2280: PPUSH
2281: CALL_OW 148
// end ; if amConstructList then
2285: LD_EXP 29
2289: IFFALSE 2423
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2291: LD_VAR 0 16
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PPUSH
2300: LD_EXP 29
2304: PUSH
2305: LD_INT 1
2307: ARRAY
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: PPUSH
2313: LD_EXP 29
2317: PUSH
2318: LD_INT 1
2320: ARRAY
2321: PUSH
2322: LD_INT 2
2324: ARRAY
2325: PPUSH
2326: LD_EXP 29
2330: PUSH
2331: LD_INT 1
2333: ARRAY
2334: PUSH
2335: LD_INT 3
2337: ARRAY
2338: PPUSH
2339: LD_EXP 29
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PUSH
2348: LD_INT 4
2350: ARRAY
2351: PPUSH
2352: CALL_OW 448
2356: IFFALSE 2423
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2358: LD_VAR 0 16
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: LD_EXP 29
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PUSH
2376: LD_INT 1
2378: ARRAY
2379: PPUSH
2380: LD_EXP 29
2384: PUSH
2385: LD_INT 1
2387: ARRAY
2388: PUSH
2389: LD_INT 2
2391: ARRAY
2392: PPUSH
2393: LD_EXP 29
2397: PUSH
2398: LD_INT 1
2400: ARRAY
2401: PUSH
2402: LD_INT 3
2404: ARRAY
2405: PPUSH
2406: LD_EXP 29
2410: PUSH
2411: LD_INT 1
2413: ARRAY
2414: PUSH
2415: LD_INT 4
2417: ARRAY
2418: PPUSH
2419: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: LD_INT 1
2430: PPUSH
2431: LD_INT 21
2433: PUSH
2434: LD_INT 3
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 3
2443: PUSH
2444: LD_INT 57
2446: PUSH
2447: EMPTY
2448: LIST
2449: PUSH
2450: EMPTY
2451: LIST
2452: LIST
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 24
2459: PUSH
2460: LD_INT 1000
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 70
2480: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 13
2488: PPUSH
2489: CALL_OW 435
2493: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2494: LD_ADDR_VAR 0 11
2498: PUSH
2499: LD_EXP 27
2503: PPUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 4
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 50
2516: PUSH
2517: EMPTY
2518: LIST
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PPUSH
2524: CALL_OW 72
2528: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2529: LD_ADDR_VAR 0 6
2533: PUSH
2534: LD_INT 1
2536: PPUSH
2537: LD_INT 2
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 6
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 30
2552: PUSH
2553: LD_INT 7
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 30
2562: PUSH
2563: LD_INT 8
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: PPUSH
2576: CALL_OW 70
2580: ST_TO_ADDR
// if sci then
2581: LD_VAR 0 11
2585: IFFALSE 2744
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2587: LD_ADDR_VAR 0 13
2591: PUSH
2592: LD_EXP 27
2596: PPUSH
2597: LD_INT 95
2599: PUSH
2600: LD_INT 1
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PUSH
2607: LD_INT 120
2609: PUSH
2610: LD_INT 1
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 72
2625: ST_TO_ADDR
// if hurtUnits then
2626: LD_VAR 0 13
2630: IFFALSE 2691
// begin for i in sci do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: LD_VAR 0 11
2641: PUSH
2642: FOR_IN
2643: IFFALSE 2687
// if IsInUnit ( i ) then
2645: LD_VAR 0 1
2649: PPUSH
2650: CALL_OW 310
2654: IFFALSE 2667
// ComExitBuilding ( i ) else
2656: LD_VAR 0 1
2660: PPUSH
2661: CALL_OW 122
2665: GO 2685
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2667: LD_VAR 0 1
2671: PPUSH
2672: LD_VAR 0 13
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PPUSH
2681: CALL_OW 128
2685: GO 2642
2687: POP
2688: POP
// end else
2689: GO 2744
// if lab then
2691: LD_VAR 0 6
2695: IFFALSE 2744
// begin for i in sci do
2697: LD_ADDR_VAR 0 1
2701: PUSH
2702: LD_VAR 0 11
2706: PUSH
2707: FOR_IN
2708: IFFALSE 2742
// if not IsInUnit ( i ) then
2710: LD_VAR 0 1
2714: PPUSH
2715: CALL_OW 310
2719: NOT
2720: IFFALSE 2740
// ComEnterUnit ( i , lab [ 1 ] ) ;
2722: LD_VAR 0 1
2726: PPUSH
2727: LD_VAR 0 6
2731: PUSH
2732: LD_INT 1
2734: ARRAY
2735: PPUSH
2736: CALL_OW 120
2740: GO 2707
2742: POP
2743: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2744: LD_ADDR_VAR 0 7
2748: PUSH
2749: LD_EXP 27
2753: PPUSH
2754: LD_INT 25
2756: PUSH
2757: LD_INT 2
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PPUSH
2764: CALL_OW 72
2768: ST_TO_ADDR
// if eng then
2769: LD_VAR 0 7
2773: IFFALSE 3558
// begin for i in eng do
2775: LD_ADDR_VAR 0 1
2779: PUSH
2780: LD_VAR 0 7
2784: PUSH
2785: FOR_IN
2786: IFFALSE 3556
// begin tag := GetTag ( i ) ;
2788: LD_ADDR_VAR 0 8
2792: PUSH
2793: LD_VAR 0 1
2797: PPUSH
2798: CALL_OW 110
2802: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2803: LD_VAR 0 1
2807: PPUSH
2808: CALL_OW 256
2812: PUSH
2813: LD_INT 800
2815: LESS
2816: IFFALSE 2828
2818: PUSH
2819: LD_VAR 0 8
2823: PUSH
2824: LD_INT 1
2826: NONEQUAL
2827: AND
2828: IFFALSE 2878
// begin SetTag ( i , tHeal ) ;
2830: LD_VAR 0 1
2834: PPUSH
2835: LD_INT 1
2837: PPUSH
2838: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: LD_EXP 30
2851: PUSH
2852: LD_INT 1
2854: ARRAY
2855: PPUSH
2856: LD_EXP 30
2860: PUSH
2861: LD_INT 2
2863: ARRAY
2864: PPUSH
2865: CALL_OW 111
// AddComHold ( i ) ;
2869: LD_VAR 0 1
2873: PPUSH
2874: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2878: LD_VAR 0 8
2882: PUSH
2883: LD_INT 1
2885: EQUAL
2886: IFFALSE 2903
2888: PUSH
2889: LD_VAR 0 1
2893: PPUSH
2894: CALL_OW 256
2898: PUSH
2899: LD_INT 1000
2901: EQUAL
2902: AND
2903: IFFALSE 2917
// SetTag ( i , 0 ) ;
2905: LD_VAR 0 1
2909: PPUSH
2910: LD_INT 0
2912: PPUSH
2913: CALL_OW 109
// if not tag then
2917: LD_VAR 0 8
2921: NOT
2922: IFFALSE 3094
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2924: LD_ADDR_VAR 0 4
2928: PUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_INT 57
2934: PUSH
2935: EMPTY
2936: LIST
2937: PPUSH
2938: CALL_OW 70
2942: ST_TO_ADDR
// if undone then
2943: LD_VAR 0 4
2947: IFFALSE 2969
// begin ComComplete ( i , undone [ 1 ] ) ;
2949: LD_VAR 0 1
2953: PPUSH
2954: LD_VAR 0 4
2958: PUSH
2959: LD_INT 1
2961: ARRAY
2962: PPUSH
2963: CALL 29621 0 2
// continue ;
2967: GO 2785
// end ; if cr or tmp or Count ( amBuildings ) then
2969: LD_VAR 0 10
2973: IFTRUE 2981
2975: PUSH
2976: LD_VAR 0 2
2980: OR
2981: IFTRUE 2994
2983: PUSH
2984: LD_EXP 31
2988: PPUSH
2989: CALL 23451 0 1
2993: OR
2994: IFFALSE 3070
// begin if IsInUnit ( i ) then
2996: LD_VAR 0 1
3000: PPUSH
3001: CALL_OW 310
3005: IFFALSE 3016
// ComExitBuilding ( i ) ;
3007: LD_VAR 0 1
3011: PPUSH
3012: CALL_OW 122
// if tmp then
3016: LD_VAR 0 2
3020: IFFALSE 3036
// SetTag ( i , tRepair ) else
3022: LD_VAR 0 1
3026: PPUSH
3027: LD_INT 3
3029: PPUSH
3030: CALL_OW 109
3034: GO 3068
// if cr then
3036: LD_VAR 0 10
3040: IFFALSE 3056
// SetTag ( i , tCrates ) else
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 2
3049: PPUSH
3050: CALL_OW 109
3054: GO 3068
// SetTag ( i , tBuild ) ;
3056: LD_VAR 0 1
3060: PPUSH
3061: LD_INT 5
3063: PPUSH
3064: CALL_OW 109
// end else
3068: GO 3094
// if not IsInUnit ( i ) then
3070: LD_VAR 0 1
3074: PPUSH
3075: CALL_OW 310
3079: NOT
3080: IFFALSE 3094
// ComEnterUnit ( i , amBase ) ;
3082: LD_VAR 0 1
3086: PPUSH
3087: LD_INT 2
3089: PPUSH
3090: CALL_OW 120
// end ; if tag = tRepair then
3094: LD_VAR 0 8
3098: PUSH
3099: LD_INT 3
3101: EQUAL
3102: IFFALSE 3204
// begin if IsInUnit ( i ) then
3104: LD_VAR 0 1
3108: PPUSH
3109: CALL_OW 310
3113: IFFALSE 3126
// begin ComExitBuilding ( i ) ;
3115: LD_VAR 0 1
3119: PPUSH
3120: CALL_OW 122
// continue ;
3124: GO 2785
// end ; if not tmp then
3126: LD_VAR 0 2
3130: NOT
3131: IFFALSE 3147
// begin SetTag ( i , 0 ) ;
3133: LD_VAR 0 1
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 109
// continue ;
3145: GO 2785
// end ; if not HasTask ( i ) then
3147: LD_VAR 0 1
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: IFFALSE 3177
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3159: LD_VAR 0 1
3163: PPUSH
3164: LD_VAR 0 2
3168: PUSH
3169: LD_INT 1
3171: ARRAY
3172: PPUSH
3173: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3177: LD_VAR 0 1
3181: PPUSH
3182: LD_INT 1
3184: PPUSH
3185: CALL_OW 308
3189: NOT
3190: IFFALSE 3204
// ComMoveToArea ( i , amBaseArea ) ;
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: CALL_OW 113
// end ; if tag = tBuild then
3204: LD_VAR 0 8
3208: PUSH
3209: LD_INT 5
3211: EQUAL
3212: IFFALSE 3407
// begin if IsInUnit ( i ) then
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 310
3223: IFFALSE 3236
// begin ComExitBuilding ( i ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 122
// continue ;
3234: GO 2785
// end ; if not Count ( amBuildings ) then
3236: LD_EXP 31
3240: PPUSH
3241: CALL 23451 0 1
3245: NOT
3246: IFFALSE 3264
// begin SetTag ( i , 0 ) ;
3248: LD_VAR 0 1
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 109
// continue ;
3260: GO 2785
// end else
3262: GO 3301
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3264: LD_INT 2
3266: PPUSH
3267: LD_EXP 31
3271: PUSH
3272: LD_INT 1
3274: ARRAY
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: PPUSH
3280: CALL 63522 0 2
3284: NOT
3285: IFFALSE 3301
// begin SetTag ( i , 0 ) ;
3287: LD_VAR 0 1
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 109
// continue ;
3299: GO 2785
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3301: LD_ADDR_VAR 0 4
3305: PUSH
3306: LD_INT 1
3308: PPUSH
3309: LD_INT 57
3311: PUSH
3312: EMPTY
3313: LIST
3314: PPUSH
3315: CALL_OW 70
3319: ST_TO_ADDR
// if undone then
3320: LD_VAR 0 4
3324: IFFALSE 3346
// begin ComComplete ( i , undone [ 1 ] ) ;
3326: LD_VAR 0 1
3330: PPUSH
3331: LD_VAR 0 4
3335: PUSH
3336: LD_INT 1
3338: ARRAY
3339: PPUSH
3340: CALL 29621 0 2
// continue ;
3344: GO 2785
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3346: LD_VAR 0 1
3350: PPUSH
3351: LD_EXP 31
3355: PUSH
3356: LD_INT 1
3358: ARRAY
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: PPUSH
3364: LD_EXP 31
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PUSH
3373: LD_INT 2
3375: ARRAY
3376: PPUSH
3377: LD_EXP 31
3381: PUSH
3382: LD_INT 1
3384: ARRAY
3385: PUSH
3386: LD_INT 3
3388: ARRAY
3389: PPUSH
3390: LD_EXP 31
3394: PUSH
3395: LD_INT 1
3397: ARRAY
3398: PUSH
3399: LD_INT 4
3401: ARRAY
3402: PPUSH
3403: CALL_OW 145
// end ; if tag = tCrates then
3407: LD_VAR 0 8
3411: PUSH
3412: LD_INT 2
3414: EQUAL
3415: IFFALSE 3554
// begin if IsInUnit ( i ) then
3417: LD_VAR 0 1
3421: PPUSH
3422: CALL_OW 310
3426: IFFALSE 3439
// begin ComExitBuilding ( i ) ;
3428: LD_VAR 0 1
3432: PPUSH
3433: CALL_OW 122
// continue ;
3437: GO 2785
// end ; if not cr then
3439: LD_VAR 0 10
3443: NOT
3444: IFFALSE 3460
// begin SetTag ( i , 0 ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: LD_INT 0
3453: PPUSH
3454: CALL_OW 109
// continue ;
3458: GO 2785
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3460: LD_VAR 0 1
3464: PPUSH
3465: CALL_OW 314
3469: NOT
3470: IFFALSE 3525
3472: PUSH
3473: LD_INT 81
3475: PUSH
3476: LD_VAR 0 5
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 92
3487: PUSH
3488: LD_VAR 0 10
3492: PUSH
3493: LD_INT 1
3495: ARRAY
3496: PUSH
3497: LD_VAR 0 10
3501: PUSH
3502: LD_INT 2
3504: ARRAY
3505: PUSH
3506: LD_INT 12
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 69
3523: NOT
3524: AND
3525: IFFALSE 3554
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3527: LD_VAR 0 1
3531: PPUSH
3532: LD_VAR 0 10
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: PPUSH
3541: LD_VAR 0 10
3545: PUSH
3546: LD_INT 2
3548: ARRAY
3549: PPUSH
3550: CALL_OW 117
// end ; end ;
3554: GO 2785
3556: POP
3557: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3558: LD_ADDR_VAR 0 12
3562: PUSH
3563: LD_EXP 27
3567: PPUSH
3568: LD_INT 2
3570: PUSH
3571: LD_INT 25
3573: PUSH
3574: LD_INT 1
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 25
3583: PUSH
3584: LD_INT 5
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 50
3598: PUSH
3599: EMPTY
3600: LIST
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PPUSH
3606: CALL_OW 72
3610: PUSH
3611: LD_EXP 33
3615: UNION
3616: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3617: LD_ADDR_VAR 0 14
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 81
3627: PUSH
3628: LD_VAR 0 5
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 70
3641: ST_TO_ADDR
// if sol then
3642: LD_VAR 0 12
3646: IFFALSE 4209
// begin if enemyInBase then
3648: LD_VAR 0 14
3652: IFFALSE 3797
// begin for i in sol do
3654: LD_ADDR_VAR 0 1
3658: PUSH
3659: LD_VAR 0 12
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3793
// begin tw := IsInUnit ( i ) ;
3667: LD_ADDR_VAR 0 9
3671: PUSH
3672: LD_VAR 0 1
3676: PPUSH
3677: CALL_OW 310
3681: ST_TO_ADDR
// if tw then
3682: LD_VAR 0 9
3686: IFFALSE 3767
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3688: LD_VAR 0 9
3692: PUSH
3693: LD_INT 22
3695: PUSH
3696: LD_VAR 0 5
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 101
3707: PUSH
3708: LD_INT 2
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 2
3717: PUSH
3718: LD_INT 30
3720: PUSH
3721: LD_INT 32
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 30
3730: PUSH
3731: LD_INT 31
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: PPUSH
3748: CALL_OW 69
3752: IN
3753: NOT
3754: IFFALSE 3765
// ComExitBuilding ( i ) ;
3756: LD_VAR 0 1
3760: PPUSH
3761: CALL_OW 122
// end else
3765: GO 3791
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3767: LD_VAR 0 1
3771: PPUSH
3772: LD_VAR 0 14
3776: PPUSH
3777: LD_VAR 0 1
3781: PPUSH
3782: CALL_OW 74
3786: PPUSH
3787: CALL_OW 115
// end ;
3791: GO 3664
3793: POP
3794: POP
// end else
3795: GO 4209
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3797: LD_ADDR_VAR 0 15
3801: PUSH
3802: LD_INT 1
3804: PPUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 62
3810: PUSH
3811: EMPTY
3812: LIST
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: LD_INT 30
3823: PUSH
3824: LD_INT 32
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: LD_INT 30
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: PUSH
3841: LD_INT 30
3843: PUSH
3844: LD_INT 5
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: PUSH
3851: LD_INT 30
3853: PUSH
3854: LD_INT 31
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: PPUSH
3872: CALL_OW 70
3876: ST_TO_ADDR
// if empty then
3877: LD_VAR 0 15
3881: IFFALSE 3898
// empty := ReverseArray ( empty ) ;
3883: LD_ADDR_VAR 0 15
3887: PUSH
3888: LD_VAR 0 15
3892: PPUSH
3893: CALL 54507 0 1
3897: ST_TO_ADDR
// for i in sol do
3898: LD_ADDR_VAR 0 1
3902: PUSH
3903: LD_VAR 0 12
3907: PUSH
3908: FOR_IN
3909: IFFALSE 4207
// begin tag := GetTag ( i ) ;
3911: LD_ADDR_VAR 0 8
3915: PUSH
3916: LD_VAR 0 1
3920: PPUSH
3921: CALL_OW 110
3925: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3926: LD_VAR 0 1
3930: PPUSH
3931: CALL_OW 256
3935: PUSH
3936: LD_INT 1000
3938: LESS
3939: IFFALSE 3951
3941: PUSH
3942: LD_VAR 0 8
3946: PUSH
3947: LD_INT 1
3949: NONEQUAL
3950: AND
3951: IFFALSE 4003
// begin SetTag ( i , tHeal ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3965: LD_VAR 0 1
3969: PPUSH
3970: LD_EXP 30
3974: PUSH
3975: LD_INT 1
3977: ARRAY
3978: PPUSH
3979: LD_EXP 30
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: CALL_OW 111
// AddComHold ( i ) ;
3992: LD_VAR 0 1
3996: PPUSH
3997: CALL_OW 200
// continue ;
4001: GO 3908
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 256
4012: PUSH
4013: LD_INT 1000
4015: EQUAL
4016: IFFALSE 4028
4018: PUSH
4019: LD_VAR 0 8
4023: PUSH
4024: LD_INT 1
4026: EQUAL
4027: AND
4028: IFFALSE 4044
// begin SetTag ( i , 0 ) ;
4030: LD_VAR 0 1
4034: PPUSH
4035: LD_INT 0
4037: PPUSH
4038: CALL_OW 109
// continue ;
4042: GO 3908
// end ; if not IsInArea ( i , amBaseArea ) and not IsInUnit ( i ) then
4044: LD_VAR 0 1
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: CALL_OW 308
4056: NOT
4057: IFFALSE 4071
4059: PUSH
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 310
4069: NOT
4070: AND
4071: IFFALSE 4085
// ComMoveToArea ( i , amBaseArea ) ;
4073: LD_VAR 0 1
4077: PPUSH
4078: LD_INT 1
4080: PPUSH
4081: CALL_OW 113
// if HasTask ( i ) then
4085: LD_VAR 0 1
4089: PPUSH
4090: CALL_OW 314
4094: IFFALSE 4098
// continue ;
4096: GO 3908
// if not IsInUnit ( i ) and not tag and empty then
4098: LD_VAR 0 1
4102: PPUSH
4103: CALL_OW 310
4107: NOT
4108: IFFALSE 4117
4110: PUSH
4111: LD_VAR 0 8
4115: NOT
4116: AND
4117: IFFALSE 4125
4119: PUSH
4120: LD_VAR 0 15
4124: AND
4125: IFFALSE 4205
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4127: LD_VAR 0 1
4131: PPUSH
4132: LD_VAR 0 15
4136: PUSH
4137: LD_INT 1
4139: ARRAY
4140: PPUSH
4141: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4145: LD_VAR 0 15
4149: PUSH
4150: LD_INT 1
4152: ARRAY
4153: PPUSH
4154: CALL_OW 266
4158: PUSH
4159: LD_INT 5
4161: EQUAL
4162: IFFALSE 4173
4164: PUSH
4165: LD_INT 50
4167: PPUSH
4168: CALL_OW 13
4172: AND
4173: IFFALSE 4187
// AddComChangeProfession ( i , class_sniper ) ;
4175: LD_VAR 0 1
4179: PPUSH
4180: LD_INT 5
4182: PPUSH
4183: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4187: LD_ADDR_VAR 0 15
4191: PUSH
4192: LD_VAR 0 15
4196: PPUSH
4197: LD_INT 1
4199: PPUSH
4200: CALL_OW 3
4204: ST_TO_ADDR
// end ; end ;
4205: GO 3908
4207: POP
4208: POP
// end ; end ; end ;
4209: PPOPN 18
4211: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4212: LD_EXP 34
4216: PPUSH
4217: CALL_OW 302
4221: IFFALSE 4229
4223: PUSH
4224: LD_EXP 3
4228: AND
4229: IFFALSE 4521
4231: GO 4233
4233: DISABLE
4234: LD_INT 0
4236: PPUSH
4237: PPUSH
// begin enable ;
4238: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4239: LD_ADDR_VAR 0 2
4243: PUSH
4244: LD_INT 1
4246: PPUSH
4247: LD_INT 81
4249: PUSH
4250: LD_INT 1
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 50
4259: PUSH
4260: EMPTY
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 70
4271: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4272: LD_ADDR_VAR 0 1
4276: PUSH
4277: LD_INT 17
4279: PPUSH
4280: CALL_OW 435
4284: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4285: LD_EXP 34
4289: PPUSH
4290: CALL_OW 261
4294: PUSH
4295: LD_INT 10
4297: LESS
4298: IFFALSE 4315
4300: PUSH
4301: LD_INT 2
4303: PPUSH
4304: LD_EXP 34
4308: PPUSH
4309: CALL_OW 292
4313: NOT
4314: AND
4315: IFFALSE 4332
4317: PUSH
4318: LD_EXP 34
4322: PPUSH
4323: CALL_OW 262
4327: PUSH
4328: LD_INT 1
4330: EQUAL
4331: AND
4332: IFFALSE 4346
// SetFuel ( amCargo , 100 ) ;
4334: LD_EXP 34
4338: PPUSH
4339: LD_INT 100
4341: PPUSH
4342: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4346: LD_EXP 34
4350: PPUSH
4351: CALL_OW 314
4355: NOT
4356: IFFALSE 4376
4358: PUSH
4359: LD_EXP 34
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 289
4371: PUSH
4372: LD_INT 100
4374: LESS
4375: AND
4376: IFFALSE 4385
4378: PUSH
4379: LD_VAR 0 2
4383: NOT
4384: AND
4385: IFFALSE 4451
// begin if cr then
4387: LD_VAR 0 1
4391: IFFALSE 4422
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4393: LD_EXP 34
4397: PPUSH
4398: LD_VAR 0 1
4402: PUSH
4403: LD_INT 1
4405: ARRAY
4406: PPUSH
4407: LD_VAR 0 1
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 117
4420: GO 4449
// if not IsInArea ( amCargo , cratesWestArea ) then
4422: LD_EXP 34
4426: PPUSH
4427: LD_INT 17
4429: PPUSH
4430: CALL_OW 308
4434: NOT
4435: IFFALSE 4449
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4437: LD_EXP 34
4441: PPUSH
4442: LD_INT 17
4444: PPUSH
4445: CALL_OW 113
// exit ;
4449: GO 4521
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4451: LD_VAR 0 2
4455: IFFALSE 4472
4457: PUSH
4458: LD_EXP 34
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: CALL_OW 308
4470: NOT
4471: AND
4472: IFFALSE 4491
// ComMoveXY ( amCargo , 93 , 137 ) else
4474: LD_EXP 34
4478: PPUSH
4479: LD_INT 93
4481: PPUSH
4482: LD_INT 137
4484: PPUSH
4485: CALL_OW 111
4489: GO 4521
// if GetCargo ( amCargo , mat_cans ) = 100 then
4491: LD_EXP 34
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: CALL_OW 289
4503: PUSH
4504: LD_INT 100
4506: EQUAL
4507: IFFALSE 4521
// ComGive ( amCargo , amBase ) ;
4509: LD_EXP 34
4513: PPUSH
4514: LD_INT 2
4516: PPUSH
4517: CALL_OW 161
// end ;
4521: PPOPN 2
4523: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4524: LD_EXP 3
4528: IFFALSE 4581
4530: PUSH
4531: LD_INT 22
4533: PUSH
4534: LD_INT 1
4536: PUSH
4537: EMPTY
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 3
4543: PUSH
4544: LD_INT 60
4546: PUSH
4547: EMPTY
4548: LIST
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: PUSH
4554: LD_INT 50
4556: PUSH
4557: EMPTY
4558: LIST
4559: PUSH
4560: LD_INT 34
4562: PUSH
4563: LD_INT 13
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: AND
4581: IFFALSE 4631
4583: PUSH
4584: LD_INT 22
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: LD_INT 24
4599: PUSH
4600: LD_INT 1000
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 21
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 69
4630: AND
4631: IFFALSE 4864
4633: GO 4635
4635: DISABLE
4636: LD_INT 0
4638: PPUSH
4639: PPUSH
4640: PPUSH
// begin enable ;
4641: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 24
4662: PUSH
4663: LD_INT 1000
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 3
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 69
4693: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4694: LD_ADDR_VAR 0 3
4698: PUSH
4699: LD_INT 22
4701: PUSH
4702: LD_INT 1
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: PUSH
4709: LD_INT 3
4711: PUSH
4712: LD_INT 24
4714: PUSH
4715: LD_INT 600
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 21
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 69
4745: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4746: LD_ADDR_VAR 0 1
4750: PUSH
4751: LD_INT 22
4753: PUSH
4754: LD_INT 1
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 60
4766: PUSH
4767: EMPTY
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 50
4776: PUSH
4777: EMPTY
4778: LIST
4779: PUSH
4780: LD_INT 34
4782: PUSH
4783: LD_INT 13
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: PPUSH
4796: CALL_OW 69
4800: PUSH
4801: FOR_IN
4802: IFFALSE 4862
// begin if tmp2 then
4804: LD_VAR 0 3
4808: IFFALSE 4836
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4810: LD_VAR 0 1
4814: PPUSH
4815: LD_VAR 0 3
4819: PPUSH
4820: LD_VAR 0 1
4824: PPUSH
4825: CALL_OW 74
4829: PPUSH
4830: CALL_OW 130
4834: GO 4860
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_VAR 0 2
4845: PPUSH
4846: LD_VAR 0 1
4850: PPUSH
4851: CALL_OW 74
4855: PPUSH
4856: CALL_OW 130
// end ;
4860: GO 4801
4862: POP
4863: POP
// end ;
4864: PPOPN 3
4866: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4867: LD_EXP 35
4871: IFFALSE 4879
4873: PUSH
4874: LD_EXP 19
4878: AND
4879: IFFALSE 4888
4881: PUSH
4882: LD_EXP 11
4886: NOT
4887: AND
4888: IFFALSE 5213
4890: GO 4892
4892: DISABLE
4893: LD_INT 0
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
4899: PPUSH
4900: PPUSH
4901: PPUSH
// begin enable ;
4902: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: LD_INT 30
4910: PUSH
4911: LD_INT 31
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 32
4920: PUSH
4921: LD_INT 33
4923: PUSH
4924: LD_INT 34
4926: PUSH
4927: LD_INT 35
4929: PUSH
4930: LD_INT 33
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 36
4942: PUSH
4943: LD_INT 37
4945: PUSH
4946: LD_INT 38
4948: PUSH
4949: LD_INT 39
4951: PUSH
4952: LD_INT 40
4954: PUSH
4955: LD_INT 41
4957: PUSH
4958: LD_INT 42
4960: PUSH
4961: LD_INT 43
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// for i in amPatrol do
4979: LD_ADDR_VAR 0 1
4983: PUSH
4984: LD_EXP 35
4988: PUSH
4989: FOR_IN
4990: IFFALSE 5211
// begin if See ( 2 , i ) then
4992: LD_INT 2
4994: PPUSH
4995: LD_VAR 0 1
4999: PPUSH
5000: CALL_OW 292
5004: IFFALSE 5107
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
5006: LD_ADDR_VAR 0 7
5010: PUSH
5011: LD_INT 22
5013: PUSH
5014: LD_INT 2
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: PPUSH
5026: LD_VAR 0 1
5030: PPUSH
5031: CALL_OW 74
5035: ST_TO_ADDR
// if enemy then
5036: LD_VAR 0 7
5040: IFFALSE 5107
// begin x := GetX ( enemy ) ;
5042: LD_ADDR_VAR 0 4
5046: PUSH
5047: LD_VAR 0 7
5051: PPUSH
5052: CALL_OW 250
5056: ST_TO_ADDR
// y := GetY ( enemy ) ;
5057: LD_ADDR_VAR 0 5
5061: PUSH
5062: LD_VAR 0 7
5066: PPUSH
5067: CALL_OW 251
5071: ST_TO_ADDR
// if ValidHex ( x , y ) then
5072: LD_VAR 0 4
5076: PPUSH
5077: LD_VAR 0 5
5081: PPUSH
5082: CALL_OW 488
5086: IFFALSE 5107
// ComAgressiveMove ( i , x , y ) ;
5088: LD_VAR 0 1
5092: PPUSH
5093: LD_VAR 0 4
5097: PPUSH
5098: LD_VAR 0 5
5102: PPUSH
5103: CALL_OW 114
// end ; end ; if HasTask ( i ) then
5107: LD_VAR 0 1
5111: PPUSH
5112: CALL_OW 314
5116: IFFALSE 5120
// continue ;
5118: GO 4989
// tag := GetTag ( i ) ;
5120: LD_ADDR_VAR 0 6
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 110
5134: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5135: LD_ADDR_VAR 0 2
5139: PUSH
5140: DOUBLE
5141: LD_INT 1
5143: DEC
5144: ST_TO_ADDR
5145: LD_VAR 0 3
5149: PUSH
5150: LD_VAR 0 6
5154: ARRAY
5155: PUSH
5156: FOR_TO
5157: IFFALSE 5207
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5159: LD_VAR 0 1
5163: PPUSH
5164: LD_VAR 0 3
5168: PUSH
5169: LD_VAR 0 6
5173: ARRAY
5174: PUSH
5175: LD_VAR 0 2
5179: ARRAY
5180: PPUSH
5181: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5185: LD_VAR 0 1
5189: PPUSH
5190: LD_INT 175
5192: PPUSH
5193: LD_INT 385
5195: PPUSH
5196: CALL_OW 12
5200: PPUSH
5201: CALL_OW 202
// end ;
5205: GO 5156
5207: POP
5208: POP
// end ;
5209: GO 4989
5211: POP
5212: POP
// end ;
5213: PPOPN 7
5215: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5216: LD_EXP 32
5220: PPUSH
5221: CALL 23451 0 1
5225: PUSH
5226: LD_INT 5
5228: LESS
5229: IFFALSE 5237
5231: PUSH
5232: LD_EXP 3
5236: AND
5237: IFFALSE 5245
5239: PUSH
5240: LD_EXP 8
5244: AND
5245: IFFALSE 5253
5247: PUSH
5248: LD_EXP 7
5252: AND
5253: IFFALSE 5513
5255: GO 5257
5257: DISABLE
5258: LD_INT 0
5260: PPUSH
5261: PPUSH
5262: PPUSH
// begin enable ;
5263: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5264: LD_ADDR_VAR 0 2
5268: PUSH
5269: LD_INT 3
5271: PUSH
5272: LD_INT 9
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: LD_INT 4
5281: PUSH
5282: LD_INT 9
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 4
5291: PUSH
5292: LD_INT 6
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 3
5301: PUSH
5302: LD_INT 5
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 2
5311: PUSH
5312: LD_INT 4
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: LD_INT 2
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: ST_TO_ADDR
// if americanWave > [ 5 , 6 , 7 , 8 ] [ Difficulty ] then
5337: LD_EXP 22
5341: PUSH
5342: LD_INT 5
5344: PUSH
5345: LD_INT 6
5347: PUSH
5348: LD_INT 7
5350: PUSH
5351: LD_INT 8
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: PUSH
5360: LD_OWVAR 67
5364: ARRAY
5365: GREATER
5366: IFFALSE 5397
// americanWave := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5368: LD_ADDR_EXP 22
5372: PUSH
5373: LD_INT 5
5375: PUSH
5376: LD_INT 6
5378: PUSH
5379: LD_INT 7
5381: PUSH
5382: LD_INT 8
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: LD_OWVAR 67
5395: ARRAY
5396: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + americanWave do
5397: LD_ADDR_VAR 0 1
5401: PUSH
5402: DOUBLE
5403: LD_INT 1
5405: DEC
5406: ST_TO_ADDR
5407: LD_INT 3
5409: PUSH
5410: LD_INT 4
5412: PUSH
5413: LD_INT 5
5415: PUSH
5416: LD_INT 6
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: PUSH
5425: LD_OWVAR 67
5429: ARRAY
5430: PUSH
5431: LD_EXP 22
5435: PLUS
5436: PUSH
5437: FOR_TO
5438: IFFALSE 5511
// begin part := parts [ rand ( 1 , parts ) ] ;
5440: LD_ADDR_VAR 0 3
5444: PUSH
5445: LD_VAR 0 2
5449: PUSH
5450: LD_INT 1
5452: PPUSH
5453: LD_VAR 0 2
5457: PPUSH
5458: CALL_OW 12
5462: ARRAY
5463: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5464: LD_ADDR_EXP 29
5468: PUSH
5469: LD_EXP 29
5473: PPUSH
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PUSH
5483: LD_INT 1
5485: PUSH
5486: LD_INT 2
5488: PUSH
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PPUSH
5504: CALL 59427 0 2
5508: ST_TO_ADDR
5509: GO 5437
5511: POP
5512: POP
// end ;
5513: PPOPN 3
5515: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5516: LD_EXP 11
5520: NOT
5521: IFFALSE 5534
5523: PUSH
5524: LD_EXP 32
5528: PPUSH
5529: CALL 23451 0 1
5533: AND
5534: IFFALSE 5542
5536: PUSH
5537: LD_EXP 8
5541: AND
5542: IFFALSE 5550
5544: PUSH
5545: LD_EXP 7
5549: AND
5550: IFFALSE 5899
5552: GO 5554
5554: DISABLE
5555: LD_INT 0
5557: PPUSH
5558: PPUSH
5559: PPUSH
// begin enable ;
5560: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5561: LD_ADDR_VAR 0 2
5565: PUSH
5566: LD_EXP 32
5570: PPUSH
5571: LD_INT 61
5573: PUSH
5574: EMPTY
5575: LIST
5576: PUSH
5577: LD_INT 50
5579: PUSH
5580: EMPTY
5581: LIST
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PPUSH
5587: CALL_OW 72
5591: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5592: LD_ADDR_EXP 32
5596: PUSH
5597: LD_EXP 32
5601: PUSH
5602: LD_VAR 0 2
5606: DIFF
5607: ST_TO_ADDR
// if not tmp then
5608: LD_VAR 0 2
5612: NOT
5613: IFFALSE 5617
// exit ;
5615: GO 5899
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_VAR 0 2
5626: PPUSH
5627: LD_INT 34
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL_OW 72
5641: ST_TO_ADDR
// if tmp2 then
5642: LD_VAR 0 3
5646: IFFALSE 5664
// tmp := tmp diff tmp2 ;
5648: LD_ADDR_VAR 0 2
5652: PUSH
5653: LD_VAR 0 2
5657: PUSH
5658: LD_VAR 0 3
5662: DIFF
5663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5671: LD_ADDR_VAR 0 2
5675: PUSH
5676: LD_VAR 0 2
5680: PPUSH
5681: LD_INT 50
5683: PUSH
5684: EMPTY
5685: LIST
5686: PPUSH
5687: CALL_OW 72
5691: ST_TO_ADDR
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5751
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5705: LD_VAR 0 1
5709: PPUSH
5710: LD_INT 187
5712: PUSH
5713: LD_INT 114
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 203
5722: PUSH
5723: LD_INT 113
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 218
5732: PUSH
5733: LD_INT 108
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL 62193 0 2
5749: GO 5702
5751: POP
5752: POP
// tmp2 := UnitFilter ( tmp2 , [ f_ok ] ) ;
5753: LD_ADDR_VAR 0 3
5757: PUSH
5758: LD_VAR 0 3
5762: PPUSH
5763: LD_INT 50
5765: PUSH
5766: EMPTY
5767: LIST
5768: PPUSH
5769: CALL_OW 72
5773: ST_TO_ADDR
// for i in tmp2 do
5774: LD_ADDR_VAR 0 1
5778: PUSH
5779: LD_VAR 0 3
5783: PUSH
5784: FOR_IN
5785: IFFALSE 5875
// if GetDistUnitXY ( i , 242 , 105 ) > 12 then
5787: LD_VAR 0 1
5791: PPUSH
5792: LD_INT 242
5794: PPUSH
5795: LD_INT 105
5797: PPUSH
5798: CALL_OW 297
5802: PUSH
5803: LD_INT 12
5805: GREATER
5806: IFFALSE 5825
// ComMoveXY ( i , 242 , 105 ) else
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 242
5815: PPUSH
5816: LD_INT 105
5818: PPUSH
5819: CALL_OW 111
5823: GO 5873
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_type , unit_human ] ] ) , i ) ) ;
5825: LD_VAR 0 1
5829: PPUSH
5830: LD_INT 81
5832: PUSH
5833: LD_INT 1
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 21
5842: PUSH
5843: LD_INT 1
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 69
5858: PPUSH
5859: LD_VAR 0 1
5863: PPUSH
5864: CALL_OW 74
5868: PPUSH
5869: CALL_OW 115
5873: GO 5784
5875: POP
5876: POP
// until not tmp ;
5877: LD_VAR 0 2
5881: NOT
5882: IFFALSE 5664
// americanWave := Inc ( americanWave ) ;
5884: LD_ADDR_EXP 22
5888: PUSH
5889: LD_EXP 22
5893: PPUSH
5894: CALL 60800 0 1
5898: ST_TO_ADDR
// end ; end_of_file
5899: PPOPN 3
5901: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5902: LD_INT 0
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
// uc_side := 8 ;
5911: LD_ADDR_OWVAR 20
5915: PUSH
5916: LD_INT 8
5918: ST_TO_ADDR
// uc_nation := nation_arabian ;
5919: LD_ADDR_OWVAR 21
5923: PUSH
5924: LD_INT 2
5926: ST_TO_ADDR
// legForces := [ ] ;
5927: LD_ADDR_EXP 37
5931: PUSH
5932: EMPTY
5933: ST_TO_ADDR
// legEForces := [ ] ;
5934: LD_ADDR_EXP 38
5938: PUSH
5939: EMPTY
5940: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5941: LD_ADDR_EXP 39
5945: PUSH
5946: LD_INT 8
5948: PPUSH
5949: LD_INT 2
5951: PPUSH
5952: LD_INT 1
5954: PPUSH
5955: CALL 21374 0 3
5959: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5960: LD_ADDR_EXP 40
5964: PUSH
5965: LD_INT 13
5967: PUSH
5968: LD_INT 1
5970: PUSH
5971: LD_INT 2
5973: PUSH
5974: LD_INT 32
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: PUSH
5983: EMPTY
5984: LIST
5985: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5986: LD_ADDR_EXP 41
5990: PUSH
5991: LD_INT 195
5993: PUSH
5994: LD_INT 15
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: ST_TO_ADDR
// legBuildings := [ ] ;
6001: LD_ADDR_EXP 42
6005: PUSH
6006: EMPTY
6007: ST_TO_ADDR
// legTanks := [ ] ;
6008: LD_ADDR_EXP 43
6012: PUSH
6013: EMPTY
6014: ST_TO_ADDR
// legRTanks := [ ] ;
6015: LD_ADDR_EXP 44
6019: PUSH
6020: EMPTY
6021: ST_TO_ADDR
// legCargo := 0 ;
6022: LD_ADDR_EXP 45
6026: PUSH
6027: LD_INT 0
6029: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
6030: LD_ADDR_VAR 0 7
6034: PUSH
6035: LD_INT 219
6037: PUSH
6038: LD_INT 31
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 166
6047: PUSH
6048: LD_INT 31
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: ST_TO_ADDR
// for i in sources do
6059: LD_ADDR_VAR 0 2
6063: PUSH
6064: LD_VAR 0 7
6068: PUSH
6069: FOR_IN
6070: IFFALSE 6099
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 8 ) ;
6072: LD_VAR 0 2
6076: PUSH
6077: LD_INT 1
6079: ARRAY
6080: PPUSH
6081: LD_VAR 0 2
6085: PUSH
6086: LD_INT 2
6088: ARRAY
6089: PPUSH
6090: LD_INT 8
6092: PPUSH
6093: CALL_OW 441
6097: GO 6069
6099: POP
6100: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
6101: LD_INT 38
6103: PPUSH
6104: CALL_OW 274
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: LD_INT 650
6114: PPUSH
6115: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
6119: LD_INT 38
6121: PPUSH
6122: CALL_OW 274
6126: PPUSH
6127: LD_INT 2
6129: PPUSH
6130: LD_INT 120
6132: PPUSH
6133: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
6137: LD_INT 38
6139: PPUSH
6140: CALL_OW 274
6144: PPUSH
6145: LD_INT 3
6147: PPUSH
6148: LD_INT 50
6150: PPUSH
6151: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
6155: LD_ADDR_VAR 0 6
6159: PUSH
6160: LD_INT 6
6162: PUSH
6163: LD_INT 7
6165: PUSH
6166: LD_INT 8
6168: PUSH
6169: LD_INT 9
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: LD_OWVAR 67
6182: ARRAY
6183: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
6184: LD_ADDR_EXP 36
6188: PUSH
6189: LD_STRING Farmer
6191: PPUSH
6192: LD_INT 0
6194: PPUSH
6195: LD_STRING 
6197: PPUSH
6198: CALL 21227 0 3
6202: ST_TO_ADDR
// for i := 1 to 4 do
6203: LD_ADDR_VAR 0 2
6207: PUSH
6208: DOUBLE
6209: LD_INT 1
6211: DEC
6212: ST_TO_ADDR
6213: LD_INT 4
6215: PUSH
6216: FOR_TO
6217: IFFALSE 6734
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
6219: LD_ADDR_VAR 0 3
6223: PUSH
6224: DOUBLE
6225: LD_INT 1
6227: DEC
6228: ST_TO_ADDR
6229: LD_INT 7
6231: PUSH
6232: LD_INT 8
6234: PUSH
6235: LD_INT 9
6237: PUSH
6238: LD_INT 11
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_OWVAR 67
6251: ARRAY
6252: PUSH
6253: LD_INT 3
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: LD_INT 5
6261: PUSH
6262: LD_INT 5
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_OWVAR 67
6275: ARRAY
6276: PUSH
6277: LD_INT 3
6279: PUSH
6280: LD_INT 2
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_OWVAR 67
6302: ARRAY
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PUSH
6310: LD_VAR 0 2
6314: ARRAY
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6730
// begin PrepareHuman ( false , i , skill ) ;
6319: LD_INT 0
6321: PPUSH
6322: LD_VAR 0 2
6326: PPUSH
6327: LD_VAR 0 6
6331: PPUSH
6332: CALL_OW 380
// un := CreateHuman ;
6336: LD_ADDR_VAR 0 5
6340: PUSH
6341: CALL_OW 44
6345: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6346: LD_ADDR_EXP 37
6350: PUSH
6351: LD_EXP 37
6355: PPUSH
6356: LD_VAR 0 5
6360: PPUSH
6361: CALL 59427 0 2
6365: ST_TO_ADDR
// case i of 1 :
6366: LD_VAR 0 2
6370: PUSH
6371: LD_INT 1
6373: DOUBLE
6374: EQUAL
6375: IFTRUE 6379
6377: GO 6448
6379: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6380: LD_ADDR_VAR 0 4
6384: PUSH
6385: LD_INT 22
6387: PUSH
6388: LD_INT 8
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 30
6400: PUSH
6401: LD_INT 32
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: LD_INT 30
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 3
6425: PUSH
6426: LD_INT 62
6428: PUSH
6429: EMPTY
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL_OW 69
6445: ST_TO_ADDR
6446: GO 6627
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6485
6456: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6457: LD_ADDR_VAR 0 4
6461: PUSH
6462: LD_INT 38
6464: PPUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 62
6470: PUSH
6471: EMPTY
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PPUSH
6478: CALL_OW 72
6482: ST_TO_ADDR
6483: GO 6627
6485: LD_INT 3
6487: DOUBLE
6488: EQUAL
6489: IFTRUE 6493
6491: GO 6567
6493: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6494: LD_ADDR_VAR 0 4
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_INT 8
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 2
6511: PUSH
6512: LD_INT 30
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: LD_INT 30
6524: PUSH
6525: LD_INT 36
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 3
6539: PUSH
6540: LD_INT 62
6542: PUSH
6543: EMPTY
6544: LIST
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: PPUSH
6555: CALL_OW 69
6559: PPUSH
6560: CALL 54507 0 1
6564: ST_TO_ADDR
6565: GO 6627
6567: LD_INT 4
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6575
6573: GO 6626
6575: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6576: LD_ADDR_VAR 0 4
6580: PUSH
6581: LD_INT 22
6583: PUSH
6584: LD_INT 8
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 30
6593: PUSH
6594: LD_INT 8
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 3
6603: PUSH
6604: LD_INT 62
6606: PUSH
6607: EMPTY
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PPUSH
6619: CALL_OW 69
6623: ST_TO_ADDR
6624: GO 6627
6626: POP
// if b then
6627: LD_VAR 0 4
6631: IFFALSE 6707
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6633: LD_VAR 0 4
6637: PUSH
6638: LD_INT 1
6640: ARRAY
6641: PPUSH
6642: CALL_OW 266
6646: PUSH
6647: LD_INT 5
6649: EQUAL
6650: IFFALSE 6687
// if Prob ( 50 ) then
6652: LD_INT 50
6654: PPUSH
6655: CALL_OW 13
6659: IFFALSE 6675
// SetClass ( un , class_mortar ) else
6661: LD_VAR 0 5
6665: PPUSH
6666: LD_INT 8
6668: PPUSH
6669: CALL_OW 336
6673: GO 6687
// SetClass ( un , class_sniper ) ;
6675: LD_VAR 0 5
6679: PPUSH
6680: LD_INT 5
6682: PPUSH
6683: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6687: LD_VAR 0 5
6691: PPUSH
6692: LD_VAR 0 4
6696: PUSH
6697: LD_INT 1
6699: ARRAY
6700: PPUSH
6701: CALL_OW 52
// end else
6705: GO 6728
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6707: LD_VAR 0 5
6711: PPUSH
6712: LD_INT 188
6714: PPUSH
6715: LD_INT 21
6717: PPUSH
6718: LD_INT 4
6720: PPUSH
6721: LD_INT 0
6723: PPUSH
6724: CALL_OW 50
// end ;
6728: GO 6316
6730: POP
6731: POP
6732: GO 6216
6734: POP
6735: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6736: LD_ADDR_VAR 0 4
6740: PUSH
6741: LD_INT 22
6743: PUSH
6744: LD_INT 8
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 2
6753: PUSH
6754: LD_INT 30
6756: PUSH
6757: LD_INT 32
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 30
6766: PUSH
6767: LD_INT 5
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: LD_INT 62
6784: PUSH
6785: EMPTY
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: ST_TO_ADDR
// if b then
6802: LD_VAR 0 4
6806: IFFALSE 6873
// begin for i in b do
6808: LD_ADDR_VAR 0 2
6812: PUSH
6813: LD_VAR 0 4
6817: PUSH
6818: FOR_IN
6819: IFFALSE 6871
// begin PrepareApemanSoldier ( ) ;
6821: CALL 55350 0 0
// un := CreateHuman ;
6825: LD_ADDR_VAR 0 5
6829: PUSH
6830: CALL_OW 44
6834: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6835: LD_ADDR_EXP 37
6839: PUSH
6840: LD_EXP 37
6844: PPUSH
6845: LD_VAR 0 5
6849: PPUSH
6850: CALL 59427 0 2
6854: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6855: LD_VAR 0 5
6859: PPUSH
6860: LD_VAR 0 2
6864: PPUSH
6865: CALL_OW 52
// end ;
6869: GO 6818
6871: POP
6872: POP
// end ; for i := 1 to 2 do
6873: LD_ADDR_VAR 0 2
6877: PUSH
6878: DOUBLE
6879: LD_INT 1
6881: DEC
6882: ST_TO_ADDR
6883: LD_INT 2
6885: PUSH
6886: FOR_TO
6887: IFFALSE 7014
// begin uc_nation := nation_arabian ;
6889: LD_ADDR_OWVAR 21
6893: PUSH
6894: LD_INT 2
6896: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6897: LD_INT 13
6899: PPUSH
6900: LD_INT 2
6902: PPUSH
6903: LD_INT 1
6905: PPUSH
6906: LD_INT 31
6908: PPUSH
6909: LD_INT 100
6911: PPUSH
6912: CALL 26247 0 5
// un := CreateVehicle ;
6916: LD_ADDR_VAR 0 5
6920: PUSH
6921: CALL_OW 45
6925: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6926: LD_VAR 0 5
6930: PPUSH
6931: LD_INT 0
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6946: LD_VAR 0 5
6950: PPUSH
6951: LD_INT 199
6953: PPUSH
6954: LD_INT 24
6956: PPUSH
6957: LD_INT 4
6959: PPUSH
6960: LD_INT 0
6962: PPUSH
6963: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6967: LD_INT 0
6969: PPUSH
6970: LD_INT 8
6972: PUSH
6973: LD_INT 9
6975: PUSH
6976: LD_INT 10
6978: PUSH
6979: LD_INT 10
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: LD_OWVAR 67
6992: ARRAY
6993: PPUSH
6994: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6998: CALL_OW 44
7002: PPUSH
7003: LD_VAR 0 5
7007: PPUSH
7008: CALL_OW 52
// end ;
7012: GO 6886
7014: POP
7015: POP
// end ;
7016: LD_VAR 0 1
7020: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , mech , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
7021: LD_EXP 4
7025: IFFALSE 7038
7027: PUSH
7028: LD_EXP 37
7032: PPUSH
7033: CALL 23451 0 1
7037: AND
7038: IFFALSE 9587
7040: GO 7042
7042: DISABLE
7043: LD_INT 0
7045: PPUSH
7046: PPUSH
7047: PPUSH
7048: PPUSH
7049: PPUSH
7050: PPUSH
7051: PPUSH
7052: PPUSH
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
7058: PPUSH
7059: PPUSH
7060: PPUSH
7061: PPUSH
7062: PPUSH
7063: PPUSH
// begin enable ;
7064: ENABLE
// side := 8 ;
7065: LD_ADDR_VAR 0 5
7069: PUSH
7070: LD_INT 8
7072: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
7073: LD_ADDR_VAR 0 3
7077: PUSH
7078: LD_INT 22
7080: PUSH
7081: LD_VAR 0 5
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 33
7092: PUSH
7093: LD_INT 2
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 50
7102: PUSH
7103: EMPTY
7104: LIST
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_INT 61
7111: PUSH
7112: EMPTY
7113: LIST
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
7130: LD_VAR 0 3
7134: IFFALSE 7180
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_VAR 0 5
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 50
7151: PUSH
7152: EMPTY
7153: LIST
7154: PUSH
7155: LD_INT 34
7157: PUSH
7158: LD_INT 31
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: PPUSH
7170: CALL_OW 69
7174: PPUSH
7175: CALL 23451 0 1
7179: AND
7180: IFFALSE 7208
// for i in remote do
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_VAR 0 3
7191: PUSH
7192: FOR_IN
7193: IFFALSE 7206
// Connect ( i ) ;
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL 29729 0 1
7204: GO 7192
7206: POP
7207: POP
// if legTech then
7208: LD_EXP 39
7212: IFFALSE 7368
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7214: LD_ADDR_VAR 0 6
7218: PUSH
7219: LD_INT 22
7221: PUSH
7222: LD_VAR 0 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 50
7233: PUSH
7234: EMPTY
7235: LIST
7236: PUSH
7237: LD_INT 2
7239: PUSH
7240: LD_INT 30
7242: PUSH
7243: LD_INT 6
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 30
7252: PUSH
7253: LD_INT 7
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 30
7262: PUSH
7263: LD_INT 8
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 69
7285: ST_TO_ADDR
// if lab then
7286: LD_VAR 0 6
7290: IFFALSE 7368
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7292: LD_VAR 0 6
7296: PUSH
7297: LD_INT 1
7299: ARRAY
7300: PPUSH
7301: CALL_OW 461
7305: PUSH
7306: LD_INT 2
7308: EQUAL
7309: IFFALSE 7368
// begin for i in legTech do
7311: LD_ADDR_VAR 0 1
7315: PUSH
7316: LD_EXP 39
7320: PUSH
7321: FOR_IN
7322: IFFALSE 7366
// if CanBeResearched ( lab [ 1 ] , i ) then
7324: LD_VAR 0 6
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PPUSH
7333: LD_VAR 0 1
7337: PPUSH
7338: CALL_OW 430
7342: IFFALSE 7364
// begin ComResearch ( lab [ 1 ] , i ) ;
7344: LD_VAR 0 6
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 124
// break ;
7362: GO 7366
// end ;
7364: GO 7321
7366: POP
7367: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7368: LD_ADDR_VAR 0 17
7372: PUSH
7373: LD_INT 2
7375: PPUSH
7376: LD_INT 22
7378: PUSH
7379: LD_VAR 0 5
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 30
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 50
7400: PUSH
7401: EMPTY
7402: LIST
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 70
7413: ST_TO_ADDR
// if fac then
7414: LD_VAR 0 17
7418: IFFALSE 7796
// begin mech := UnitFilter ( legForces , [ [ f_tag , tMech ] , [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) ;
7420: LD_ADDR_VAR 0 12
7424: PUSH
7425: LD_EXP 37
7429: PPUSH
7430: LD_INT 120
7432: PUSH
7433: LD_INT 7
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 25
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 3
7452: PUSH
7453: LD_INT 54
7455: PUSH
7456: EMPTY
7457: LIST
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: LD_INT 55
7468: PUSH
7469: EMPTY
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PPUSH
7482: CALL_OW 72
7486: ST_TO_ADDR
// if mech and UnitsInside ( fac [ 1 ] ) < 6 then
7487: LD_VAR 0 12
7491: IFFALSE 7512
7493: PUSH
7494: LD_VAR 0 17
7498: PUSH
7499: LD_INT 1
7501: ARRAY
7502: PPUSH
7503: CALL_OW 313
7507: PUSH
7508: LD_INT 6
7510: LESS
7511: AND
7512: IFFALSE 7532
// ComEnterUnit ( mech , fac [ 1 ] ) ;
7514: LD_VAR 0 12
7518: PPUSH
7519: LD_VAR 0 17
7523: PUSH
7524: LD_INT 1
7526: ARRAY
7527: PPUSH
7528: CALL_OW 120
// if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7532: LD_VAR 0 17
7536: PUSH
7537: LD_INT 1
7539: ARRAY
7540: PPUSH
7541: CALL_OW 461
7545: PUSH
7546: LD_INT 2
7548: EQUAL
7549: IFFALSE 7796
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7551: LD_ADDR_VAR 0 18
7555: PUSH
7556: LD_INT 2
7558: PPUSH
7559: LD_INT 2
7561: PUSH
7562: LD_INT 30
7564: PUSH
7565: LD_INT 32
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 33
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 35
7589: PUSH
7590: LD_INT 0
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 70
7605: ST_TO_ADDR
// if emptyTowers then
7606: LD_VAR 0 18
7610: IFFALSE 7658
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7612: LD_ADDR_VAR 0 19
7616: PUSH
7617: LD_VAR 0 18
7621: PUSH
7622: LD_INT 1
7624: ARRAY
7625: PPUSH
7626: LD_INT 2
7628: PPUSH
7629: CALL 31776 0 2
7633: ST_TO_ADDR
// if weapon then
7634: LD_VAR 0 19
7638: IFFALSE 7658
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7640: LD_VAR 0 18
7644: PUSH
7645: LD_INT 1
7647: ARRAY
7648: PPUSH
7649: LD_VAR 0 19
7653: PPUSH
7654: CALL_OW 148
// end ; if legConstructList then
7658: LD_EXP 40
7662: IFFALSE 7796
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7664: LD_VAR 0 17
7668: PUSH
7669: LD_INT 1
7671: ARRAY
7672: PPUSH
7673: LD_EXP 40
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PUSH
7682: LD_INT 1
7684: ARRAY
7685: PPUSH
7686: LD_EXP 40
7690: PUSH
7691: LD_INT 1
7693: ARRAY
7694: PUSH
7695: LD_INT 2
7697: ARRAY
7698: PPUSH
7699: LD_EXP 40
7703: PUSH
7704: LD_INT 1
7706: ARRAY
7707: PUSH
7708: LD_INT 3
7710: ARRAY
7711: PPUSH
7712: LD_EXP 40
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: PUSH
7721: LD_INT 4
7723: ARRAY
7724: PPUSH
7725: CALL_OW 448
7729: IFFALSE 7796
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7731: LD_VAR 0 17
7735: PUSH
7736: LD_INT 1
7738: ARRAY
7739: PPUSH
7740: LD_EXP 40
7744: PUSH
7745: LD_INT 1
7747: ARRAY
7748: PUSH
7749: LD_INT 1
7751: ARRAY
7752: PPUSH
7753: LD_EXP 40
7757: PUSH
7758: LD_INT 1
7760: ARRAY
7761: PUSH
7762: LD_INT 2
7764: ARRAY
7765: PPUSH
7766: LD_EXP 40
7770: PUSH
7771: LD_INT 1
7773: ARRAY
7774: PUSH
7775: LD_INT 3
7777: ARRAY
7778: PPUSH
7779: LD_EXP 40
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PUSH
7788: LD_INT 4
7790: ARRAY
7791: PPUSH
7792: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7796: LD_ADDR_VAR 0 2
7800: PUSH
7801: LD_INT 2
7803: PPUSH
7804: LD_INT 21
7806: PUSH
7807: LD_INT 3
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 3
7816: PUSH
7817: LD_INT 57
7819: PUSH
7820: EMPTY
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 3
7829: PUSH
7830: LD_INT 24
7832: PUSH
7833: LD_INT 1000
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: PPUSH
7849: CALL_OW 70
7853: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7854: LD_ADDR_VAR 0 10
7858: PUSH
7859: LD_INT 14
7861: PPUSH
7862: CALL_OW 435
7866: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7867: LD_ADDR_VAR 0 11
7871: PUSH
7872: LD_EXP 37
7876: PPUSH
7877: LD_INT 25
7879: PUSH
7880: LD_INT 4
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 50
7889: PUSH
7890: EMPTY
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PPUSH
7897: CALL_OW 72
7901: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7902: LD_ADDR_VAR 0 6
7906: PUSH
7907: LD_INT 2
7909: PPUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 30
7915: PUSH
7916: LD_INT 6
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 30
7925: PUSH
7926: LD_INT 7
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: LD_INT 30
7935: PUSH
7936: LD_INT 8
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 70
7953: ST_TO_ADDR
// if sci then
7954: LD_VAR 0 11
7958: IFFALSE 8117
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7960: LD_ADDR_VAR 0 14
7964: PUSH
7965: LD_EXP 37
7969: PPUSH
7970: LD_INT 95
7972: PUSH
7973: LD_INT 2
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 120
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 72
7998: ST_TO_ADDR
// if hurtUnits then
7999: LD_VAR 0 14
8003: IFFALSE 8064
// begin for i in sci do
8005: LD_ADDR_VAR 0 1
8009: PUSH
8010: LD_VAR 0 11
8014: PUSH
8015: FOR_IN
8016: IFFALSE 8060
// if IsInUnit ( i ) then
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 310
8027: IFFALSE 8040
// ComExitBuilding ( i ) else
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 122
8038: GO 8058
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8040: LD_VAR 0 1
8044: PPUSH
8045: LD_VAR 0 14
8049: PUSH
8050: LD_INT 1
8052: ARRAY
8053: PPUSH
8054: CALL_OW 128
8058: GO 8015
8060: POP
8061: POP
// end else
8062: GO 8117
// if lab then
8064: LD_VAR 0 6
8068: IFFALSE 8117
// begin for i in sci do
8070: LD_ADDR_VAR 0 1
8074: PUSH
8075: LD_VAR 0 11
8079: PUSH
8080: FOR_IN
8081: IFFALSE 8115
// if not IsInUnit ( i ) then
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 310
8092: NOT
8093: IFFALSE 8113
// ComEnterUnit ( i , lab [ 1 ] ) ;
8095: LD_VAR 0 1
8099: PPUSH
8100: LD_VAR 0 6
8104: PUSH
8105: LD_INT 1
8107: ARRAY
8108: PPUSH
8109: CALL_OW 120
8113: GO 8080
8115: POP
8116: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
8117: LD_ADDR_VAR 0 7
8121: PUSH
8122: LD_EXP 37
8126: PPUSH
8127: LD_INT 25
8129: PUSH
8130: LD_INT 2
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 72
8141: ST_TO_ADDR
// if eng then
8142: LD_VAR 0 7
8146: IFFALSE 8931
// begin for i in eng do
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: LD_VAR 0 7
8157: PUSH
8158: FOR_IN
8159: IFFALSE 8929
// begin tag := GetTag ( i ) ;
8161: LD_ADDR_VAR 0 8
8165: PUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 110
8175: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 256
8185: PUSH
8186: LD_INT 800
8188: LESS
8189: IFFALSE 8201
8191: PUSH
8192: LD_VAR 0 8
8196: PUSH
8197: LD_INT 1
8199: NONEQUAL
8200: AND
8201: IFFALSE 8251
// begin SetTag ( i , tHeal ) ;
8203: LD_VAR 0 1
8207: PPUSH
8208: LD_INT 1
8210: PPUSH
8211: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8215: LD_VAR 0 1
8219: PPUSH
8220: LD_EXP 41
8224: PUSH
8225: LD_INT 1
8227: ARRAY
8228: PPUSH
8229: LD_EXP 41
8233: PUSH
8234: LD_INT 2
8236: ARRAY
8237: PPUSH
8238: CALL_OW 111
// AddComHold ( i ) ;
8242: LD_VAR 0 1
8246: PPUSH
8247: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8251: LD_VAR 0 8
8255: PUSH
8256: LD_INT 1
8258: EQUAL
8259: IFFALSE 8276
8261: PUSH
8262: LD_VAR 0 1
8266: PPUSH
8267: CALL_OW 256
8271: PUSH
8272: LD_INT 1000
8274: EQUAL
8275: AND
8276: IFFALSE 8290
// SetTag ( i , 0 ) ;
8278: LD_VAR 0 1
8282: PPUSH
8283: LD_INT 0
8285: PPUSH
8286: CALL_OW 109
// if not tag then
8290: LD_VAR 0 8
8294: NOT
8295: IFFALSE 8467
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8297: LD_ADDR_VAR 0 4
8301: PUSH
8302: LD_INT 2
8304: PPUSH
8305: LD_INT 57
8307: PUSH
8308: EMPTY
8309: LIST
8310: PPUSH
8311: CALL_OW 70
8315: ST_TO_ADDR
// if undone then
8316: LD_VAR 0 4
8320: IFFALSE 8342
// begin ComComplete ( i , undone [ 1 ] ) ;
8322: LD_VAR 0 1
8326: PPUSH
8327: LD_VAR 0 4
8331: PUSH
8332: LD_INT 1
8334: ARRAY
8335: PPUSH
8336: CALL 29621 0 2
// continue ;
8340: GO 8158
// end ; if cr or tmp or Count ( legBuildings ) then
8342: LD_VAR 0 10
8346: IFTRUE 8354
8348: PUSH
8349: LD_VAR 0 2
8353: OR
8354: IFTRUE 8367
8356: PUSH
8357: LD_EXP 42
8361: PPUSH
8362: CALL 23451 0 1
8366: OR
8367: IFFALSE 8443
// begin if IsInUnit ( i ) then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 310
8378: IFFALSE 8389
// ComExitBuilding ( i ) ;
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 122
// if tmp then
8389: LD_VAR 0 2
8393: IFFALSE 8409
// SetTag ( i , tRepair ) else
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_INT 3
8402: PPUSH
8403: CALL_OW 109
8407: GO 8441
// if cr then
8409: LD_VAR 0 10
8413: IFFALSE 8429
// SetTag ( i , tCrates ) else
8415: LD_VAR 0 1
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: CALL_OW 109
8427: GO 8441
// SetTag ( i , tBuild ) ;
8429: LD_VAR 0 1
8433: PPUSH
8434: LD_INT 5
8436: PPUSH
8437: CALL_OW 109
// end else
8441: GO 8467
// if not IsInUnit ( i ) then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 310
8452: NOT
8453: IFFALSE 8467
// ComEnterUnit ( i , legBase ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_INT 38
8462: PPUSH
8463: CALL_OW 120
// end ; if tag = tRepair then
8467: LD_VAR 0 8
8471: PUSH
8472: LD_INT 3
8474: EQUAL
8475: IFFALSE 8577
// begin if IsInUnit ( i ) then
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 310
8486: IFFALSE 8499
// begin ComExitBuilding ( i ) ;
8488: LD_VAR 0 1
8492: PPUSH
8493: CALL_OW 122
// continue ;
8497: GO 8158
// end ; if not tmp then
8499: LD_VAR 0 2
8503: NOT
8504: IFFALSE 8520
// begin SetTag ( i , 0 ) ;
8506: LD_VAR 0 1
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 109
// continue ;
8518: GO 8158
// end ; if not HasTask ( i ) then
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL_OW 314
8529: NOT
8530: IFFALSE 8550
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_VAR 0 2
8541: PUSH
8542: LD_INT 1
8544: ARRAY
8545: PPUSH
8546: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8550: LD_VAR 0 1
8554: PPUSH
8555: LD_INT 2
8557: PPUSH
8558: CALL_OW 308
8562: NOT
8563: IFFALSE 8577
// ComMoveToArea ( i , legBaseArea ) ;
8565: LD_VAR 0 1
8569: PPUSH
8570: LD_INT 2
8572: PPUSH
8573: CALL_OW 113
// end ; if tag = tBuild then
8577: LD_VAR 0 8
8581: PUSH
8582: LD_INT 5
8584: EQUAL
8585: IFFALSE 8780
// begin if IsInUnit ( i ) then
8587: LD_VAR 0 1
8591: PPUSH
8592: CALL_OW 310
8596: IFFALSE 8609
// begin ComExitBuilding ( i ) ;
8598: LD_VAR 0 1
8602: PPUSH
8603: CALL_OW 122
// continue ;
8607: GO 8158
// end ; if not Count ( legBuildings ) then
8609: LD_EXP 42
8613: PPUSH
8614: CALL 23451 0 1
8618: NOT
8619: IFFALSE 8637
// begin SetTag ( i , 0 ) ;
8621: LD_VAR 0 1
8625: PPUSH
8626: LD_INT 0
8628: PPUSH
8629: CALL_OW 109
// continue ;
8633: GO 8158
// end else
8635: GO 8674
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8637: LD_INT 38
8639: PPUSH
8640: LD_EXP 42
8644: PUSH
8645: LD_INT 1
8647: ARRAY
8648: PUSH
8649: LD_INT 1
8651: ARRAY
8652: PPUSH
8653: CALL 63522 0 2
8657: NOT
8658: IFFALSE 8674
// begin SetTag ( i , 0 ) ;
8660: LD_VAR 0 1
8664: PPUSH
8665: LD_INT 0
8667: PPUSH
8668: CALL_OW 109
// continue ;
8672: GO 8158
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8674: LD_ADDR_VAR 0 4
8678: PUSH
8679: LD_INT 2
8681: PPUSH
8682: LD_INT 57
8684: PUSH
8685: EMPTY
8686: LIST
8687: PPUSH
8688: CALL_OW 70
8692: ST_TO_ADDR
// if undone then
8693: LD_VAR 0 4
8697: IFFALSE 8719
// begin ComComplete ( i , undone [ 1 ] ) ;
8699: LD_VAR 0 1
8703: PPUSH
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 1
8711: ARRAY
8712: PPUSH
8713: CALL 29621 0 2
// continue ;
8717: GO 8158
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8719: LD_VAR 0 1
8723: PPUSH
8724: LD_EXP 42
8728: PUSH
8729: LD_INT 1
8731: ARRAY
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_EXP 42
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PUSH
8746: LD_INT 2
8748: ARRAY
8749: PPUSH
8750: LD_EXP 42
8754: PUSH
8755: LD_INT 1
8757: ARRAY
8758: PUSH
8759: LD_INT 3
8761: ARRAY
8762: PPUSH
8763: LD_EXP 42
8767: PUSH
8768: LD_INT 1
8770: ARRAY
8771: PUSH
8772: LD_INT 4
8774: ARRAY
8775: PPUSH
8776: CALL_OW 145
// end ; if tag = tCrates then
8780: LD_VAR 0 8
8784: PUSH
8785: LD_INT 2
8787: EQUAL
8788: IFFALSE 8927
// begin if IsInUnit ( i ) then
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 310
8799: IFFALSE 8812
// begin ComExitBuilding ( i ) ;
8801: LD_VAR 0 1
8805: PPUSH
8806: CALL_OW 122
// continue ;
8810: GO 8158
// end ; if not cr then
8812: LD_VAR 0 10
8816: NOT
8817: IFFALSE 8833
// begin SetTag ( i , 0 ) ;
8819: LD_VAR 0 1
8823: PPUSH
8824: LD_INT 0
8826: PPUSH
8827: CALL_OW 109
// continue ;
8831: GO 8158
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8833: LD_VAR 0 1
8837: PPUSH
8838: CALL_OW 314
8842: NOT
8843: IFFALSE 8898
8845: PUSH
8846: LD_INT 81
8848: PUSH
8849: LD_VAR 0 5
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: LD_INT 92
8860: PUSH
8861: LD_VAR 0 10
8865: PUSH
8866: LD_INT 1
8868: ARRAY
8869: PUSH
8870: LD_VAR 0 10
8874: PUSH
8875: LD_INT 2
8877: ARRAY
8878: PUSH
8879: LD_INT 12
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PPUSH
8892: CALL_OW 69
8896: NOT
8897: AND
8898: IFFALSE 8927
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8900: LD_VAR 0 1
8904: PPUSH
8905: LD_VAR 0 10
8909: PUSH
8910: LD_INT 1
8912: ARRAY
8913: PPUSH
8914: LD_VAR 0 10
8918: PUSH
8919: LD_INT 2
8921: ARRAY
8922: PPUSH
8923: CALL_OW 117
// end ; end ;
8927: GO 8158
8929: POP
8930: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8931: LD_ADDR_VAR 0 13
8935: PUSH
8936: LD_EXP 37
8940: PPUSH
8941: LD_INT 2
8943: PUSH
8944: LD_INT 25
8946: PUSH
8947: LD_INT 1
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 25
8956: PUSH
8957: LD_INT 5
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 25
8966: PUSH
8967: LD_INT 8
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 50
8982: PUSH
8983: EMPTY
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 72
8994: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8995: LD_ADDR_VAR 0 15
8999: PUSH
9000: LD_INT 2
9002: PPUSH
9003: LD_INT 81
9005: PUSH
9006: LD_VAR 0 5
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PPUSH
9015: CALL_OW 70
9019: ST_TO_ADDR
// if sol then
9020: LD_VAR 0 13
9024: IFFALSE 9587
// begin if enemyInBase then
9026: LD_VAR 0 15
9030: IFFALSE 9175
// begin for i in sol do
9032: LD_ADDR_VAR 0 1
9036: PUSH
9037: LD_VAR 0 13
9041: PUSH
9042: FOR_IN
9043: IFFALSE 9171
// begin tw := IsInUnit ( i ) ;
9045: LD_ADDR_VAR 0 9
9049: PUSH
9050: LD_VAR 0 1
9054: PPUSH
9055: CALL_OW 310
9059: ST_TO_ADDR
// if tw then
9060: LD_VAR 0 9
9064: IFFALSE 9145
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9066: LD_VAR 0 9
9070: PUSH
9071: LD_INT 22
9073: PUSH
9074: LD_VAR 0 5
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 101
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 30
9098: PUSH
9099: LD_INT 32
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 30
9108: PUSH
9109: LD_INT 31
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 69
9130: IN
9131: NOT
9132: IFFALSE 9143
// ComExitBuilding ( i ) ;
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 122
// end else
9143: GO 9169
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
9145: LD_VAR 0 1
9149: PPUSH
9150: LD_VAR 0 15
9154: PPUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 74
9164: PPUSH
9165: CALL_OW 115
// end ;
9169: GO 9042
9171: POP
9172: POP
// end else
9173: GO 9587
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9175: LD_ADDR_VAR 0 16
9179: PUSH
9180: LD_INT 2
9182: PPUSH
9183: LD_INT 3
9185: PUSH
9186: LD_INT 62
9188: PUSH
9189: EMPTY
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 30
9211: PUSH
9212: LD_INT 4
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PUSH
9219: LD_INT 30
9221: PUSH
9222: LD_INT 5
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 30
9231: PUSH
9232: LD_INT 31
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 70
9254: ST_TO_ADDR
// if empty then
9255: LD_VAR 0 16
9259: IFFALSE 9276
// empty := ReverseArray ( empty ) ;
9261: LD_ADDR_VAR 0 16
9265: PUSH
9266: LD_VAR 0 16
9270: PPUSH
9271: CALL 54507 0 1
9275: ST_TO_ADDR
// for i in sol do
9276: LD_ADDR_VAR 0 1
9280: PUSH
9281: LD_VAR 0 13
9285: PUSH
9286: FOR_IN
9287: IFFALSE 9585
// begin tag := GetTag ( i ) ;
9289: LD_ADDR_VAR 0 8
9293: PUSH
9294: LD_VAR 0 1
9298: PPUSH
9299: CALL_OW 110
9303: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 256
9313: PUSH
9314: LD_INT 1000
9316: LESS
9317: IFFALSE 9329
9319: PUSH
9320: LD_VAR 0 8
9324: PUSH
9325: LD_INT 1
9327: NONEQUAL
9328: AND
9329: IFFALSE 9381
// begin SetTag ( i , tHeal ) ;
9331: LD_VAR 0 1
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
9343: LD_VAR 0 1
9347: PPUSH
9348: LD_EXP 41
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PPUSH
9357: LD_EXP 41
9361: PUSH
9362: LD_INT 2
9364: ARRAY
9365: PPUSH
9366: CALL_OW 111
// AddComHold ( i ) ;
9370: LD_VAR 0 1
9374: PPUSH
9375: CALL_OW 200
// continue ;
9379: GO 9286
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 256
9390: PUSH
9391: LD_INT 1000
9393: EQUAL
9394: IFFALSE 9406
9396: PUSH
9397: LD_VAR 0 8
9401: PUSH
9402: LD_INT 1
9404: EQUAL
9405: AND
9406: IFFALSE 9422
// begin SetTag ( i , 0 ) ;
9408: LD_VAR 0 1
9412: PPUSH
9413: LD_INT 0
9415: PPUSH
9416: CALL_OW 109
// continue ;
9420: GO 9286
// end ; if not IsInArea ( i , legBaseArea ) and not IsInUnit ( i ) then
9422: LD_VAR 0 1
9426: PPUSH
9427: LD_INT 2
9429: PPUSH
9430: CALL_OW 308
9434: NOT
9435: IFFALSE 9449
9437: PUSH
9438: LD_VAR 0 1
9442: PPUSH
9443: CALL_OW 310
9447: NOT
9448: AND
9449: IFFALSE 9463
// ComMoveToArea ( i , legBaseArea ) ;
9451: LD_VAR 0 1
9455: PPUSH
9456: LD_INT 2
9458: PPUSH
9459: CALL_OW 113
// if HasTask ( i ) then
9463: LD_VAR 0 1
9467: PPUSH
9468: CALL_OW 314
9472: IFFALSE 9476
// continue ;
9474: GO 9286
// if not IsInUnit ( i ) and not tag and empty then
9476: LD_VAR 0 1
9480: PPUSH
9481: CALL_OW 310
9485: NOT
9486: IFFALSE 9495
9488: PUSH
9489: LD_VAR 0 8
9493: NOT
9494: AND
9495: IFFALSE 9503
9497: PUSH
9498: LD_VAR 0 16
9502: AND
9503: IFFALSE 9583
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9505: LD_VAR 0 1
9509: PPUSH
9510: LD_VAR 0 16
9514: PUSH
9515: LD_INT 1
9517: ARRAY
9518: PPUSH
9519: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9523: LD_VAR 0 16
9527: PUSH
9528: LD_INT 1
9530: ARRAY
9531: PPUSH
9532: CALL_OW 266
9536: PUSH
9537: LD_INT 5
9539: EQUAL
9540: IFFALSE 9551
9542: PUSH
9543: LD_INT 50
9545: PPUSH
9546: CALL_OW 13
9550: AND
9551: IFFALSE 9565
// AddComChangeProfession ( i , class_mortar ) ;
9553: LD_VAR 0 1
9557: PPUSH
9558: LD_INT 8
9560: PPUSH
9561: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9565: LD_ADDR_VAR 0 16
9569: PUSH
9570: LD_VAR 0 16
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 3
9582: ST_TO_ADDR
// end ; end ;
9583: GO 9286
9585: POP
9586: POP
// end ; end ; end ;
9587: PPOPN 19
9589: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9590: LD_EXP 45
9594: PPUSH
9595: CALL_OW 302
9599: IFFALSE 9607
9601: PUSH
9602: LD_EXP 4
9606: AND
9607: IFFALSE 9615
9609: PUSH
9610: LD_EXP 9
9614: AND
9615: IFFALSE 9907
9617: GO 9619
9619: DISABLE
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
// begin enable ;
9624: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9625: LD_ADDR_VAR 0 2
9629: PUSH
9630: LD_INT 2
9632: PPUSH
9633: LD_INT 81
9635: PUSH
9636: LD_INT 8
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 50
9645: PUSH
9646: EMPTY
9647: LIST
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: CALL_OW 70
9657: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9658: LD_ADDR_VAR 0 1
9662: PUSH
9663: LD_INT 16
9665: PPUSH
9666: CALL_OW 435
9670: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9671: LD_EXP 45
9675: PPUSH
9676: CALL_OW 261
9680: PUSH
9681: LD_INT 10
9683: LESS
9684: IFFALSE 9701
9686: PUSH
9687: LD_INT 2
9689: PPUSH
9690: LD_EXP 45
9694: PPUSH
9695: CALL_OW 292
9699: NOT
9700: AND
9701: IFFALSE 9718
9703: PUSH
9704: LD_EXP 45
9708: PPUSH
9709: CALL_OW 262
9713: PUSH
9714: LD_INT 1
9716: EQUAL
9717: AND
9718: IFFALSE 9732
// SetFuel ( legCargo , 100 ) ;
9720: LD_EXP 45
9724: PPUSH
9725: LD_INT 100
9727: PPUSH
9728: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9732: LD_EXP 45
9736: PPUSH
9737: CALL_OW 314
9741: NOT
9742: IFFALSE 9762
9744: PUSH
9745: LD_EXP 45
9749: PPUSH
9750: LD_INT 1
9752: PPUSH
9753: CALL_OW 289
9757: PUSH
9758: LD_INT 100
9760: LESS
9761: AND
9762: IFFALSE 9771
9764: PUSH
9765: LD_VAR 0 2
9769: NOT
9770: AND
9771: IFFALSE 9837
// begin if cr then
9773: LD_VAR 0 1
9777: IFFALSE 9808
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9779: LD_EXP 45
9783: PPUSH
9784: LD_VAR 0 1
9788: PUSH
9789: LD_INT 1
9791: ARRAY
9792: PPUSH
9793: LD_VAR 0 1
9797: PUSH
9798: LD_INT 2
9800: ARRAY
9801: PPUSH
9802: CALL_OW 117
9806: GO 9835
// if not IsInArea ( legCargo , cratesNorthArea ) then
9808: LD_EXP 45
9812: PPUSH
9813: LD_INT 16
9815: PPUSH
9816: CALL_OW 308
9820: NOT
9821: IFFALSE 9835
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9823: LD_EXP 45
9827: PPUSH
9828: LD_INT 16
9830: PPUSH
9831: CALL_OW 113
// exit ;
9835: GO 9907
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9837: LD_VAR 0 2
9841: IFFALSE 9858
9843: PUSH
9844: LD_EXP 45
9848: PPUSH
9849: LD_INT 2
9851: PPUSH
9852: CALL_OW 308
9856: NOT
9857: AND
9858: IFFALSE 9877
// ComMoveXY ( legCargo , 194 , 17 ) else
9860: LD_EXP 45
9864: PPUSH
9865: LD_INT 194
9867: PPUSH
9868: LD_INT 17
9870: PPUSH
9871: CALL_OW 111
9875: GO 9907
// if GetCargo ( legCargo , mat_cans ) = 100 then
9877: LD_EXP 45
9881: PPUSH
9882: LD_INT 1
9884: PPUSH
9885: CALL_OW 289
9889: PUSH
9890: LD_INT 100
9892: EQUAL
9893: IFFALSE 9907
// ComGive ( legCargo , legBase ) ;
9895: LD_EXP 45
9899: PPUSH
9900: LD_INT 38
9902: PPUSH
9903: CALL_OW 161
// end ;
9907: PPOPN 2
9909: END
// every 6 6$00 trigger Count ( UnitFilter ( legRTanks , [ f_ok ] ) ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part , level ;
9910: LD_EXP 44
9914: PPUSH
9915: LD_INT 50
9917: PUSH
9918: EMPTY
9919: LIST
9920: PPUSH
9921: CALL_OW 72
9925: PPUSH
9926: CALL 23451 0 1
9930: PUSH
9931: LD_INT 5
9933: LESS
9934: IFFALSE 9942
9936: PUSH
9937: LD_EXP 4
9941: AND
9942: IFFALSE 9950
9944: PUSH
9945: LD_EXP 9
9949: AND
9950: IFFALSE 9958
9952: PUSH
9953: LD_EXP 7
9957: AND
9958: IFFALSE 10162
9960: GO 9962
9962: DISABLE
9963: LD_INT 0
9965: PPUSH
9966: PPUSH
9967: PPUSH
9968: PPUSH
// begin enable ;
9969: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9970: LD_ADDR_VAR 0 2
9974: PUSH
9975: LD_INT 13
9977: PUSH
9978: LD_INT 28
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: LD_INT 13
9987: PUSH
9988: LD_INT 27
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 13
9997: PUSH
9998: LD_INT 26
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 14
10007: PUSH
10008: LD_INT 28
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 14
10017: PUSH
10018: LD_INT 25
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: ST_TO_ADDR
// level := tick div 60 60$00 ;
10032: LD_ADDR_VAR 0 4
10036: PUSH
10037: LD_OWVAR 1
10041: PUSH
10042: LD_INT 126000
10044: DIV
10045: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] + level do
10046: LD_ADDR_VAR 0 1
10050: PUSH
10051: DOUBLE
10052: LD_INT 1
10054: DEC
10055: ST_TO_ADDR
10056: LD_INT 3
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: LD_INT 4
10064: PUSH
10065: LD_INT 4
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: PUSH
10074: LD_OWVAR 67
10078: ARRAY
10079: PUSH
10080: LD_VAR 0 4
10084: PLUS
10085: PUSH
10086: FOR_TO
10087: IFFALSE 10160
// begin part := parts [ rand ( 1 , parts ) ] ;
10089: LD_ADDR_VAR 0 3
10093: PUSH
10094: LD_VAR 0 2
10098: PUSH
10099: LD_INT 1
10101: PPUSH
10102: LD_VAR 0 2
10106: PPUSH
10107: CALL_OW 12
10111: ARRAY
10112: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
10113: LD_ADDR_EXP 40
10117: PUSH
10118: LD_EXP 40
10122: PPUSH
10123: LD_VAR 0 3
10127: PUSH
10128: LD_INT 1
10130: ARRAY
10131: PUSH
10132: LD_INT 1
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_VAR 0 3
10142: PUSH
10143: LD_INT 2
10145: ARRAY
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: PPUSH
10153: CALL 59427 0 2
10157: ST_TO_ADDR
10158: GO 10086
10160: POP
10161: POP
// end ;
10162: PPOPN 4
10164: END
// every 20 20$00 trigger not legionDestroyed and tick <= 80 80$00 do
10165: LD_EXP 12
10169: NOT
10170: IFFALSE 10182
10172: PUSH
10173: LD_OWVAR 1
10177: PUSH
10178: LD_INT 168000
10180: LESSEQUAL
10181: AND
10182: IFFALSE 10221
10184: GO 10186
10186: DISABLE
// begin enable ;
10187: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
10188: LD_ADDR_EXP 40
10192: PUSH
10193: LD_EXP 40
10197: PPUSH
10198: LD_INT 14
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: LD_INT 1
10206: PUSH
10207: LD_INT 27
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL 59427 0 2
10220: ST_TO_ADDR
// end ;
10221: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
10222: LD_EXP 43
10226: IFFALSE 10234
10228: PUSH
10229: LD_EXP 9
10233: AND
10234: IFFALSE 10242
10236: PUSH
10237: LD_EXP 7
10241: AND
10242: IFFALSE 10845
10244: GO 10246
10246: DISABLE
10247: LD_INT 0
10249: PPUSH
10250: PPUSH
10251: PPUSH
// begin enable ;
10252: ENABLE
// if not legTanks then
10253: LD_EXP 43
10257: NOT
10258: IFFALSE 10262
// exit ;
10260: GO 10845
// for i in legTanks do
10262: LD_ADDR_VAR 0 1
10266: PUSH
10267: LD_EXP 43
10271: PUSH
10272: FOR_IN
10273: IFFALSE 10843
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
10275: LD_VAR 0 1
10279: PPUSH
10280: CALL_OW 302
10284: NOT
10285: IFTRUE 10302
10287: PUSH
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 255
10297: PUSH
10298: LD_INT 8
10300: NONEQUAL
10301: OR
10302: IFFALSE 10322
// begin legTanks := legTanks diff i ;
10304: LD_ADDR_EXP 43
10308: PUSH
10309: LD_EXP 43
10313: PUSH
10314: LD_VAR 0 1
10318: DIFF
10319: ST_TO_ADDR
// continue ;
10320: GO 10272
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL_OW 110
10331: NOT
10332: IFFALSE 10349
10334: PUSH
10335: LD_VAR 0 1
10339: PPUSH
10340: CALL_OW 263
10344: PUSH
10345: LD_INT 2
10347: EQUAL
10348: AND
10349: IFFALSE 10363
// SetTag ( i , tAttack ) ;
10351: LD_VAR 0 1
10355: PPUSH
10356: LD_INT 10
10358: PPUSH
10359: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
10363: LD_VAR 0 1
10367: PPUSH
10368: CALL_OW 110
10372: NOT
10373: IFTRUE 10390
10375: PUSH
10376: LD_VAR 0 1
10380: PPUSH
10381: CALL_OW 110
10385: PUSH
10386: LD_INT 0
10388: EQUAL
10389: OR
10390: IFFALSE 10522
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
10392: LD_VAR 0 1
10396: PPUSH
10397: CALL_OW 261
10401: PUSH
10402: LD_INT 50
10404: LESS
10405: IFFALSE 10422
10407: PUSH
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 262
10417: PUSH
10418: LD_INT 1
10420: EQUAL
10421: AND
10422: IFFALSE 10481
// begin ComMoveXY ( i , 189 , 19 ) ;
10424: LD_VAR 0 1
10428: PPUSH
10429: LD_INT 189
10431: PPUSH
10432: LD_INT 19
10434: PPUSH
10435: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10439: LD_INT 35
10441: PPUSH
10442: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
10446: LD_VAR 0 1
10450: PPUSH
10451: LD_INT 189
10453: PPUSH
10454: LD_INT 19
10456: PPUSH
10457: CALL_OW 297
10461: PUSH
10462: LD_INT 4
10464: LESS
10465: IFFALSE 10439
// SetFuel ( i , 100 ) ;
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 100
10474: PPUSH
10475: CALL_OW 240
// end else
10479: GO 10522
// if not IsInArea ( i , legParkingArea ) then
10481: LD_VAR 0 1
10485: PPUSH
10486: LD_INT 15
10488: PPUSH
10489: CALL_OW 308
10493: NOT
10494: IFFALSE 10510
// ComMoveToArea ( i , legParkingArea ) else
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_INT 15
10503: PPUSH
10504: CALL_OW 113
10508: GO 10522
// SetTag ( i , tParking ) ;
10510: LD_VAR 0 1
10514: PPUSH
10515: LD_INT 9
10517: PPUSH
10518: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 110
10531: PUSH
10532: LD_INT 9
10534: EQUAL
10535: IFFALSE 10665
// begin if GetLives ( i ) < 650 then
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 256
10546: PUSH
10547: LD_INT 650
10549: LESS
10550: IFFALSE 10642
// begin if not IsDrivenBy ( i ) then
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 311
10561: NOT
10562: IFFALSE 10566
// continue ;
10564: GO 10272
// mech := IsDrivenBy ( i ) ;
10566: LD_ADDR_VAR 0 2
10570: PUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL_OW 311
10580: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10581: LD_VAR 0 2
10585: PPUSH
10586: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10590: LD_VAR 0 2
10594: PPUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10604: LD_INT 35
10606: PPUSH
10607: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 256
10620: PUSH
10621: LD_INT 1000
10623: EQUAL
10624: IFFALSE 10604
// ComEnterUnit ( mech , i ) ;
10626: LD_VAR 0 2
10630: PPUSH
10631: LD_VAR 0 1
10635: PPUSH
10636: CALL_OW 120
// end else
10640: GO 10665
// if IsDrivenBy ( i ) then
10642: LD_VAR 0 1
10646: PPUSH
10647: CALL_OW 311
10651: IFFALSE 10665
// SetTag ( i , tAttack ) ;
10653: LD_VAR 0 1
10657: PPUSH
10658: LD_INT 10
10660: PPUSH
10661: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10665: LD_VAR 0 1
10669: PPUSH
10670: CALL_OW 110
10674: PUSH
10675: LD_INT 10
10677: EQUAL
10678: IFFALSE 10841
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: LD_INT 2
10687: PPUSH
10688: LD_INT 81
10690: PUSH
10691: LD_INT 8
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PPUSH
10698: CALL_OW 70
10702: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10703: LD_VAR 0 1
10707: PPUSH
10708: CALL_OW 256
10712: PUSH
10713: LD_INT 650
10715: LESS
10716: IFFALSE 10733
10718: PUSH
10719: LD_VAR 0 1
10723: PPUSH
10724: CALL_OW 263
10728: PUSH
10729: LD_INT 1
10731: EQUAL
10732: AND
10733: IFFALSE 10758
// begin ComStop ( i ) ;
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 141
// SetTag ( i , 0 ) ;
10744: LD_VAR 0 1
10748: PPUSH
10749: LD_INT 0
10751: PPUSH
10752: CALL_OW 109
// continue ;
10756: GO 10272
// end ; if enemy then
10758: LD_VAR 0 3
10762: IFFALSE 10802
// begin if not HasTask ( i ) then
10764: LD_VAR 0 1
10768: PPUSH
10769: CALL_OW 314
10773: NOT
10774: IFFALSE 10800
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_VAR 0 3
10785: PPUSH
10786: LD_VAR 0 1
10790: PPUSH
10791: CALL_OW 74
10795: PPUSH
10796: CALL 63825 0 2
// end else
10800: GO 10841
// if legTanks then
10802: LD_EXP 43
10806: IFFALSE 10841
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10808: LD_VAR 0 1
10812: PPUSH
10813: LD_INT 200
10815: PUSH
10816: LD_INT 48
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 210
10825: PUSH
10826: LD_INT 74
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PPUSH
10837: CALL 62193 0 2
// end ; end ;
10841: GO 10272
10843: POP
10844: POP
// end ;
10845: PPOPN 3
10847: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10848: LD_EXP 12
10852: NOT
10853: IFFALSE 10866
10855: PUSH
10856: LD_EXP 44
10860: PPUSH
10861: CALL 23451 0 1
10865: AND
10866: IFFALSE 10874
10868: PUSH
10869: LD_EXP 9
10873: AND
10874: IFFALSE 10882
10876: PUSH
10877: LD_EXP 7
10881: AND
10882: IFFALSE 11080
10884: GO 10886
10886: DISABLE
10887: LD_INT 0
10889: PPUSH
10890: PPUSH
10891: PPUSH
// begin enable ;
10892: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10893: LD_ADDR_VAR 0 2
10897: PUSH
10898: LD_EXP 44
10902: PPUSH
10903: LD_INT 61
10905: PUSH
10906: EMPTY
10907: LIST
10908: PUSH
10909: LD_INT 50
10911: PUSH
10912: EMPTY
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PPUSH
10919: CALL_OW 72
10923: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10924: LD_ADDR_EXP 44
10928: PUSH
10929: LD_EXP 44
10933: PUSH
10934: LD_VAR 0 2
10938: DIFF
10939: ST_TO_ADDR
// if not tmp then
10940: LD_VAR 0 2
10944: NOT
10945: IFFALSE 10949
// exit ;
10947: GO 11080
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10949: LD_ADDR_VAR 0 3
10953: PUSH
10954: LD_VAR 0 2
10958: PPUSH
10959: LD_INT 34
10961: PUSH
10962: LD_INT 24
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PPUSH
10969: CALL_OW 72
10973: ST_TO_ADDR
// if tmp2 then
10974: LD_VAR 0 3
10978: IFFALSE 10995
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10980: LD_VAR 0 3
10984: PPUSH
10985: LD_INT 241
10987: PPUSH
10988: LD_INT 99
10990: PPUSH
10991: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10995: LD_INT 35
10997: PPUSH
10998: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11002: LD_ADDR_VAR 0 2
11006: PUSH
11007: LD_VAR 0 2
11011: PPUSH
11012: LD_INT 50
11014: PUSH
11015: EMPTY
11016: LIST
11017: PPUSH
11018: CALL_OW 72
11022: ST_TO_ADDR
// for i in tmp do
11023: LD_ADDR_VAR 0 1
11027: PUSH
11028: LD_VAR 0 2
11032: PUSH
11033: FOR_IN
11034: IFFALSE 11071
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
11036: LD_VAR 0 1
11040: PPUSH
11041: LD_INT 200
11043: PUSH
11044: LD_INT 48
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 210
11053: PUSH
11054: LD_INT 74
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL 62193 0 2
11069: GO 11033
11071: POP
11072: POP
// until not tmp ;
11073: LD_VAR 0 2
11077: NOT
11078: IFFALSE 10995
// end ;
11080: PPOPN 3
11082: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
11083: LD_EXP 9
11087: NOT
11088: IFFALSE 11349
11090: GO 11092
11092: DISABLE
11093: LD_INT 0
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
// begin uc_side := 8 ;
11099: LD_ADDR_OWVAR 20
11103: PUSH
11104: LD_INT 8
11106: ST_TO_ADDR
// uc_nation := nation_arabian ;
11107: LD_ADDR_OWVAR 21
11111: PUSH
11112: LD_INT 2
11114: ST_TO_ADDR
// for i := 1 to 3 do
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: DOUBLE
11121: LD_INT 1
11123: DEC
11124: ST_TO_ADDR
11125: LD_INT 3
11127: PUSH
11128: FOR_TO
11129: IFFALSE 11264
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
11131: LD_INT 14
11133: PPUSH
11134: LD_INT 3
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: LD_INT 27
11142: PUSH
11143: LD_INT 25
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_VAR 0 1
11154: PUSH
11155: LD_INT 2
11157: MOD
11158: PUSH
11159: LD_INT 1
11161: PLUS
11162: ARRAY
11163: PPUSH
11164: LD_INT 100
11166: PPUSH
11167: CALL 26247 0 5
// veh := CreateVehicle ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: CALL_OW 45
11180: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11181: LD_VAR 0 3
11185: PPUSH
11186: LD_INT 5
11188: PPUSH
11189: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 44
11200: PPUSH
11201: LD_INT 0
11203: PPUSH
11204: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
11208: LD_INT 0
11210: PPUSH
11211: LD_INT 6
11213: PPUSH
11214: CALL_OW 383
// un := CreateHuman ;
11218: LD_ADDR_VAR 0 2
11222: PUSH
11223: CALL_OW 44
11227: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11228: LD_VAR 0 2
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
11242: LD_ADDR_VAR 0 4
11246: PUSH
11247: LD_VAR 0 4
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL 59427 0 2
11261: ST_TO_ADDR
// end ;
11262: GO 11128
11264: POP
11265: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
11266: LD_VAR 0 4
11270: PPUSH
11271: LD_INT 219
11273: PPUSH
11274: LD_INT 110
11276: PPUSH
11277: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
11281: LD_VAR 0 4
11285: PPUSH
11286: LD_INT 220
11288: PPUSH
11289: LD_INT 94
11291: PPUSH
11292: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
11296: LD_VAR 0 4
11300: PPUSH
11301: LD_INT 209
11303: PPUSH
11304: LD_INT 66
11306: PPUSH
11307: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
11311: LD_VAR 0 4
11315: PPUSH
11316: LD_INT 189
11318: PPUSH
11319: LD_INT 22
11321: PPUSH
11322: CALL_OW 171
// wait ( 0 0$10 ) ;
11326: LD_INT 350
11328: PPUSH
11329: CALL_OW 67
// legTanks := legTanks union tmp ;
11333: LD_ADDR_EXP 43
11337: PUSH
11338: LD_EXP 43
11342: PUSH
11343: LD_VAR 0 4
11347: UNION
11348: ST_TO_ADDR
// end ; end_of_file
11349: PPOPN 4
11351: END
// export function CreateNature ; var i , areas , amount ; begin
11352: LD_INT 0
11354: PPUSH
11355: PPUSH
11356: PPUSH
11357: PPUSH
// PrepareTiger ( 0 ) ;
11358: LD_INT 0
11360: PPUSH
11361: CALL 55705 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: DOUBLE
11371: LD_INT 1
11373: DEC
11374: ST_TO_ADDR
11375: LD_INT 10
11377: PUSH
11378: LD_INT 8
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: LD_INT 5
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: LD_OWVAR 67
11397: ARRAY
11398: PUSH
11399: FOR_TO
11400: IFFALSE 11419
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11402: CALL_OW 44
11406: PPUSH
11407: LD_INT 7
11409: PPUSH
11410: LD_INT 0
11412: PPUSH
11413: CALL_OW 49
11417: GO 11399
11419: POP
11420: POP
// PrepareBird ;
11421: CALL 55934 0 0
// for i := 1 to 3 do
11425: LD_ADDR_VAR 0 2
11429: PUSH
11430: DOUBLE
11431: LD_INT 1
11433: DEC
11434: ST_TO_ADDR
11435: LD_INT 3
11437: PUSH
11438: FOR_TO
11439: IFFALSE 11458
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11441: CALL_OW 44
11445: PPUSH
11446: LD_INT 7
11448: PPUSH
11449: LD_INT 0
11451: PPUSH
11452: CALL_OW 49
11456: GO 11438
11458: POP
11459: POP
// PrepareHorse ;
11460: CALL 55986 0 0
// for i := 1 to 3 do
11464: LD_ADDR_VAR 0 2
11468: PUSH
11469: DOUBLE
11470: LD_INT 1
11472: DEC
11473: ST_TO_ADDR
11474: LD_INT 3
11476: PUSH
11477: FOR_TO
11478: IFFALSE 11497
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11480: CALL_OW 44
11484: PPUSH
11485: LD_INT 7
11487: PPUSH
11488: LD_INT 0
11490: PPUSH
11491: CALL_OW 49
11495: GO 11477
11497: POP
11498: POP
// PrepareFrog ;
11499: CALL 55830 0 0
// for i := 1 to 3 do
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: DOUBLE
11509: LD_INT 1
11511: DEC
11512: ST_TO_ADDR
11513: LD_INT 3
11515: PUSH
11516: FOR_TO
11517: IFFALSE 11536
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11519: CALL_OW 44
11523: PPUSH
11524: LD_INT 8
11526: PPUSH
11527: LD_INT 0
11529: PPUSH
11530: CALL_OW 49
11534: GO 11516
11536: POP
11537: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11538: LD_ADDR_VAR 0 4
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_OWVAR 67
11565: ARRAY
11566: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11567: LD_ADDR_VAR 0 3
11571: PUSH
11572: LD_INT 18
11574: PUSH
11575: LD_INT 19
11577: PUSH
11578: LD_INT 20
11580: PUSH
11581: LD_INT 21
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: ST_TO_ADDR
// PrepareMastodont ;
11590: CALL 56038 0 0
// for i := 1 to amount do
11594: LD_ADDR_VAR 0 2
11598: PUSH
11599: DOUBLE
11600: LD_INT 1
11602: DEC
11603: ST_TO_ADDR
11604: LD_VAR 0 4
11608: PUSH
11609: FOR_TO
11610: IFFALSE 11647
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11612: CALL_OW 45
11616: PPUSH
11617: LD_VAR 0 3
11621: PUSH
11622: LD_VAR 0 2
11626: PUSH
11627: LD_INT 1
11629: MINUS
11630: PUSH
11631: LD_OWVAR 67
11635: PLUS
11636: ARRAY
11637: PPUSH
11638: LD_INT 0
11640: PPUSH
11641: CALL_OW 49
11645: GO 11609
11647: POP
11648: POP
// PrepareApeman ( 0 ) ;
11649: LD_INT 0
11651: PPUSH
11652: CALL 55554 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11656: LD_ADDR_OWVAR 31
11660: PUSH
11661: LD_INT 4
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: LD_INT 0
11669: PUSH
11670: LD_INT 0
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11679: LD_ADDR_VAR 0 2
11683: PUSH
11684: DOUBLE
11685: LD_INT 1
11687: DEC
11688: ST_TO_ADDR
11689: LD_INT 9
11691: PUSH
11692: LD_INT 7
11694: PUSH
11695: LD_INT 6
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: PUSH
11707: LD_OWVAR 67
11711: ARRAY
11712: PUSH
11713: FOR_TO
11714: IFFALSE 11733
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11716: CALL_OW 44
11720: PPUSH
11721: LD_INT 6
11723: PPUSH
11724: LD_INT 0
11726: PPUSH
11727: CALL_OW 49
11731: GO 11713
11733: POP
11734: POP
// for i := 1 to [ 8 , 7 , 6 , 5 ] [ Difficulty ] do
11735: LD_ADDR_VAR 0 2
11739: PUSH
11740: DOUBLE
11741: LD_INT 1
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 8
11747: PUSH
11748: LD_INT 7
11750: PUSH
11751: LD_INT 6
11753: PUSH
11754: LD_INT 5
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_OWVAR 67
11767: ARRAY
11768: PUSH
11769: FOR_TO
11770: IFFALSE 11795
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 8 , false ) ;
11772: CALL_OW 44
11776: PPUSH
11777: LD_INT 274
11779: PPUSH
11780: LD_INT 133
11782: PPUSH
11783: LD_INT 8
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL_OW 50
11793: GO 11769
11795: POP
11796: POP
// for i := 1 to [ 6 , 5 , 4 , 4 ] [ Difficulty ] do
11797: LD_ADDR_VAR 0 2
11801: PUSH
11802: DOUBLE
11803: LD_INT 1
11805: DEC
11806: ST_TO_ADDR
11807: LD_INT 6
11809: PUSH
11810: LD_INT 5
11812: PUSH
11813: LD_INT 4
11815: PUSH
11816: LD_INT 4
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: PUSH
11825: LD_OWVAR 67
11829: ARRAY
11830: PUSH
11831: FOR_TO
11832: IFFALSE 11857
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 8 , false ) ;
11834: CALL_OW 44
11838: PPUSH
11839: LD_INT 208
11841: PPUSH
11842: LD_INT 142
11844: PPUSH
11845: LD_INT 8
11847: PPUSH
11848: LD_INT 0
11850: PPUSH
11851: CALL_OW 50
11855: GO 11831
11857: POP
11858: POP
// end ;
11859: LD_VAR 0 1
11863: RET
// export function AreInArea ( units , area ) ; var i ; begin
11864: LD_INT 0
11866: PPUSH
11867: PPUSH
// result := false ;
11868: LD_ADDR_VAR 0 3
11872: PUSH
11873: LD_INT 0
11875: ST_TO_ADDR
// if not units then
11876: LD_VAR 0 1
11880: NOT
11881: IFFALSE 11885
// exit ;
11883: GO 11953
// for i in units do
11885: LD_ADDR_VAR 0 4
11889: PUSH
11890: LD_VAR 0 1
11894: PUSH
11895: FOR_IN
11896: IFFALSE 11951
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11898: LD_VAR 0 4
11902: PPUSH
11903: LD_VAR 0 2
11907: PPUSH
11908: CALL_OW 308
11912: IFTRUE 11935
11914: PUSH
11915: LD_VAR 0 4
11919: PPUSH
11920: CALL_OW 310
11924: PPUSH
11925: LD_VAR 0 2
11929: PPUSH
11930: CALL_OW 308
11934: OR
11935: IFFALSE 11949
// begin result := true ;
11937: LD_ADDR_VAR 0 3
11941: PUSH
11942: LD_INT 1
11944: ST_TO_ADDR
// exit ;
11945: POP
11946: POP
11947: GO 11953
// end ;
11949: GO 11895
11951: POP
11952: POP
// end ; end_of_file
11953: LD_VAR 0 3
11957: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11958: LD_INT 0
11960: PPUSH
11961: PPUSH
11962: PPUSH
11963: PPUSH
11964: PPUSH
// SaveForQuickRestart ;
11965: CALL_OW 22
// InGameOn ;
11969: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11973: LD_INT 84
11975: PPUSH
11976: LD_INT 28
11978: PPUSH
11979: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11983: LD_INT 2
11985: PPUSH
11986: LD_INT 9
11988: PPUSH
11989: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11993: LD_EXP 23
11997: PPUSH
11998: LD_INT 90
12000: PPUSH
12001: LD_INT 30
12003: PPUSH
12004: CALL_OW 111
// uc_side := 1 ;
12008: LD_ADDR_OWVAR 20
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// uc_nation := nation_american ;
12016: LD_ADDR_OWVAR 21
12020: PUSH
12021: LD_INT 1
12023: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
12024: LD_INT 3
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: LD_INT 9
12035: PPUSH
12036: LD_INT 66
12038: PPUSH
12039: CALL 26247 0 5
// veh := CreateVehicle ;
12043: LD_ADDR_VAR 0 4
12047: PUSH
12048: CALL_OW 45
12052: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12053: LD_VAR 0 4
12057: PPUSH
12058: LD_INT 1
12060: PPUSH
12061: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
12065: LD_VAR 0 4
12069: PPUSH
12070: LD_INT 80
12072: PPUSH
12073: LD_INT 27
12075: PPUSH
12076: LD_INT 0
12078: PPUSH
12079: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
12083: LD_INT 1
12085: PPUSH
12086: LD_INT 8
12088: PPUSH
12089: CALL_OW 383
// mech := CreateHuman ;
12093: LD_ADDR_VAR 0 3
12097: PUSH
12098: CALL_OW 44
12102: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_VAR 0 4
12112: PPUSH
12113: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
12117: LD_INT 35
12119: PPUSH
12120: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
12124: LD_INT 90
12126: PPUSH
12127: LD_INT 30
12129: PPUSH
12130: CALL_OW 428
12134: IFFALSE 12117
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
12136: LD_INT 80
12138: PPUSH
12139: LD_INT 27
12141: PPUSH
12142: LD_INT 2
12144: PPUSH
12145: LD_INT 6
12147: NEG
12148: PPUSH
12149: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
12153: LD_INT 80
12155: PPUSH
12156: LD_INT 27
12158: PPUSH
12159: CALL_OW 86
// DialogueOn ;
12163: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
12167: LD_EXP 23
12171: PPUSH
12172: LD_STRING DH-Start-1
12174: PPUSH
12175: CALL_OW 88
// DialogueOff ;
12179: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12183: LD_EXP 23
12187: PPUSH
12188: LD_VAR 0 4
12192: PPUSH
12193: CALL_OW 115
// wait ( 0 0$1 ) ;
12197: LD_INT 35
12199: PPUSH
12200: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
12204: LD_EXP 23
12208: PPUSH
12209: CALL_OW 310
12213: PPUSH
12214: LD_INT 200
12216: PPUSH
12217: CALL_OW 234
// wait ( 0 0$0.3 ) ;
12221: LD_INT 10
12223: PPUSH
12224: CALL_OW 67
// DialogueOn ;
12228: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
12232: LD_EXP 23
12236: PPUSH
12237: LD_STRING DH-Start-2
12239: PPUSH
12240: CALL_OW 88
// DialogueOff ;
12244: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12248: LD_EXP 23
12252: PPUSH
12253: LD_VAR 0 4
12257: PPUSH
12258: CALL_OW 115
// wait ( 0 0$0.2 ) ;
12262: LD_INT 7
12264: PPUSH
12265: CALL_OW 67
// ComCrawl ( Heike ) ;
12269: LD_EXP 23
12273: PPUSH
12274: CALL_OW 137
// wait ( 0 0$3 ) ;
12278: LD_INT 105
12280: PPUSH
12281: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
12285: LD_EXP 26
12289: PPUSH
12290: LD_INT 82
12292: PPUSH
12293: LD_INT 43
12295: PPUSH
12296: LD_INT 0
12298: PPUSH
12299: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
12303: LD_EXP 24
12307: PPUSH
12308: LD_EXP 26
12312: PPUSH
12313: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
12317: LD_EXP 24
12321: PPUSH
12322: LD_INT 79
12324: PPUSH
12325: LD_INT 32
12327: PPUSH
12328: CALL_OW 111
// wait ( 0 0$1 ) ;
12332: LD_INT 35
12334: PPUSH
12335: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
12339: LD_INT 79
12341: PPUSH
12342: LD_INT 32
12344: PPUSH
12345: LD_INT 2
12347: PPUSH
12348: LD_INT 8
12350: NEG
12351: PPUSH
12352: CALL_OW 330
// wait ( 0 0$3 ) ;
12356: LD_INT 105
12358: PPUSH
12359: CALL_OW 67
// SetLives ( veh , 200 ) ;
12363: LD_VAR 0 4
12367: PPUSH
12368: LD_INT 200
12370: PPUSH
12371: CALL_OW 234
// wait ( 0 0$1 ) ;
12375: LD_INT 35
12377: PPUSH
12378: CALL_OW 67
// SetLives ( mech , 10 ) ;
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 10
12389: PPUSH
12390: CALL_OW 234
// wait ( 0 0$2 ) ;
12394: LD_INT 70
12396: PPUSH
12397: CALL_OW 67
// ComWalk ( Heike ) ;
12401: LD_EXP 23
12405: PPUSH
12406: CALL_OW 138
// wait ( 1 ) ;
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
12417: LD_EXP 23
12421: PPUSH
12422: LD_INT 81
12424: PPUSH
12425: LD_INT 25
12427: PPUSH
12428: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
12432: LD_EXP 23
12436: PPUSH
12437: LD_INT 72
12439: PPUSH
12440: LD_INT 25
12442: PPUSH
12443: CALL_OW 171
// wait ( 0 0$3 ) ;
12447: LD_INT 105
12449: PPUSH
12450: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12454: LD_EXP 24
12458: PPUSH
12459: CALL_OW 121
// wait ( 1 ) ;
12463: LD_INT 1
12465: PPUSH
12466: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12470: LD_EXP 24
12474: PPUSH
12475: LD_INT 77
12477: PPUSH
12478: LD_INT 28
12480: PPUSH
12481: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12485: LD_EXP 24
12489: PPUSH
12490: LD_EXP 23
12494: PPUSH
12495: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12499: LD_EXP 24
12503: PPUSH
12504: LD_STRING DO-Start-3
12506: PPUSH
12507: CALL_OW 88
// repeat wait ( 3 ) ;
12511: LD_INT 3
12513: PPUSH
12514: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12518: LD_EXP 23
12522: PPUSH
12523: LD_INT 72
12525: PPUSH
12526: LD_INT 25
12528: PPUSH
12529: CALL_OW 307
12533: IFFALSE 12511
// ComHold ( Heike ) ;
12535: LD_EXP 23
12539: PPUSH
12540: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12544: LD_EXP 24
12548: PPUSH
12549: LD_EXP 23
12553: PPUSH
12554: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12558: LD_EXP 23
12562: PPUSH
12563: LD_EXP 24
12567: PPUSH
12568: CALL_OW 112
// wait ( 0 0$1 ) ;
12572: LD_INT 35
12574: PPUSH
12575: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12579: LD_EXP 23
12583: PPUSH
12584: LD_EXP 24
12588: PPUSH
12589: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12593: LD_EXP 23
12597: PPUSH
12598: LD_STRING DH-Start-4
12600: PPUSH
12601: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12605: LD_EXP 24
12609: PPUSH
12610: LD_STRING DO-Start-5
12612: PPUSH
12613: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12617: LD_EXP 23
12621: PPUSH
12622: LD_STRING DH-Start-6
12624: PPUSH
12625: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12629: LD_EXP 24
12633: PPUSH
12634: LD_STRING DO-Start-7
12636: PPUSH
12637: CALL_OW 88
// if Query ( QOmar ) = 2 then
12641: LD_STRING QOmar
12643: PPUSH
12644: CALL_OW 97
12648: PUSH
12649: LD_INT 2
12651: EQUAL
12652: IFFALSE 12959
// begin Say ( Heike , DH-QuestionN-1 ) ;
12654: LD_EXP 23
12658: PPUSH
12659: LD_STRING DH-QuestionN-1
12661: PPUSH
12662: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12666: LD_EXP 23
12670: PPUSH
12671: LD_INT 58
12673: PPUSH
12674: LD_INT 27
12676: PPUSH
12677: CALL_OW 111
// wait ( 0 0$2 ) ;
12681: LD_INT 70
12683: PPUSH
12684: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12688: LD_EXP 24
12692: PPUSH
12693: LD_EXP 26
12697: PPUSH
12698: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12702: LD_INT 79
12704: PPUSH
12705: LD_INT 32
12707: PPUSH
12708: LD_INT 2
12710: PPUSH
12711: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12715: LD_INT 80
12717: PPUSH
12718: LD_INT 27
12720: PPUSH
12721: LD_INT 2
12723: PPUSH
12724: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12728: LD_INT 58
12730: PPUSH
12731: LD_INT 27
12733: PPUSH
12734: CALL_OW 84
// repeat wait ( 3 ) ;
12738: LD_INT 3
12740: PPUSH
12741: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12745: LD_EXP 23
12749: PPUSH
12750: LD_INT 88
12752: PPUSH
12753: LD_INT 27
12755: PPUSH
12756: CALL_OW 297
12760: IFFALSE 12738
// uc_side := 1 ;
12762: LD_ADDR_OWVAR 20
12766: PUSH
12767: LD_INT 1
12769: ST_TO_ADDR
// uc_nation := nation_american ;
12770: LD_ADDR_OWVAR 21
12774: PUSH
12775: LD_INT 1
12777: ST_TO_ADDR
// amTroops := [ ] ;
12778: LD_ADDR_VAR 0 5
12782: PUSH
12783: EMPTY
12784: ST_TO_ADDR
// for i := 1 to 3 do
12785: LD_ADDR_VAR 0 2
12789: PUSH
12790: DOUBLE
12791: LD_INT 1
12793: DEC
12794: ST_TO_ADDR
12795: LD_INT 3
12797: PUSH
12798: FOR_TO
12799: IFFALSE 12892
// begin PrepareSoldier ( false , 10 ) ;
12801: LD_INT 0
12803: PPUSH
12804: LD_INT 10
12806: PPUSH
12807: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12811: LD_ADDR_VAR 0 5
12815: PUSH
12816: LD_VAR 0 5
12820: PPUSH
12821: CALL_OW 44
12825: PPUSH
12826: CALL 59427 0 2
12830: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12831: LD_VAR 0 5
12835: PUSH
12836: LD_VAR 0 2
12840: ARRAY
12841: PPUSH
12842: LD_INT 2
12844: PPUSH
12845: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12849: LD_VAR 0 5
12853: PUSH
12854: LD_VAR 0 2
12858: ARRAY
12859: PPUSH
12860: LD_INT 10
12862: PPUSH
12863: LD_INT 0
12865: PPUSH
12866: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12870: LD_VAR 0 5
12874: PUSH
12875: LD_VAR 0 2
12879: ARRAY
12880: PPUSH
12881: LD_EXP 23
12885: PPUSH
12886: CALL_OW 115
// end ;
12890: GO 12798
12892: POP
12893: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12894: LD_EXP 23
12898: PPUSH
12899: LD_VAR 0 5
12903: PUSH
12904: LD_INT 1
12906: ARRAY
12907: PPUSH
12908: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12912: LD_INT 35
12914: PPUSH
12915: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12919: LD_EXP 23
12923: PPUSH
12924: CALL_OW 301
12928: IFTRUE 12941
12930: PUSH
12931: LD_EXP 23
12935: PPUSH
12936: CALL_OW 303
12940: OR
12941: IFFALSE 12912
// wait ( 0 0$2 ) ;
12943: LD_INT 70
12945: PPUSH
12946: CALL_OW 67
// YouLost ( Heike ) ;
12950: LD_STRING Heike
12952: PPUSH
12953: CALL_OW 104
// exit ;
12957: GO 13881
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12959: LD_EXP 23
12963: PPUSH
12964: LD_STRING DH-QuestionY-1
12966: PPUSH
12967: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12971: LD_INT 10
12973: PPUSH
12974: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12978: LD_EXP 24
12982: PPUSH
12983: LD_STRING DO-Story-1
12985: PPUSH
12986: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12990: LD_EXP 24
12994: PPUSH
12995: LD_STRING DO-Story-2
12997: PPUSH
12998: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
13002: LD_EXP 24
13006: PPUSH
13007: LD_STRING DO-Story-3
13009: PPUSH
13010: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
13014: LD_EXP 24
13018: PPUSH
13019: LD_STRING DO-Story-4
13021: PPUSH
13022: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
13026: LD_EXP 23
13030: PPUSH
13031: LD_STRING DH-Story-5
13033: PPUSH
13034: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
13038: LD_EXP 24
13042: PPUSH
13043: LD_STRING DO-Story-6
13045: PPUSH
13046: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
13050: LD_EXP 24
13054: PPUSH
13055: LD_STRING DO-Story-7
13057: PPUSH
13058: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
13062: LD_EXP 23
13066: PPUSH
13067: LD_INT 82
13069: PPUSH
13070: LD_INT 44
13072: PPUSH
13073: CALL_OW 111
// AddComHold ( Heike ) ;
13077: LD_EXP 23
13081: PPUSH
13082: CALL_OW 200
// wait ( 0 0$4 ) ;
13086: LD_INT 140
13088: PPUSH
13089: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
13093: LD_EXP 24
13097: PPUSH
13098: LD_INT 82
13100: PPUSH
13101: LD_INT 41
13103: PPUSH
13104: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
13108: LD_EXP 24
13112: PPUSH
13113: LD_EXP 23
13117: PPUSH
13118: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
13122: LD_INT 35
13124: PPUSH
13125: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
13129: LD_EXP 23
13133: PPUSH
13134: LD_INT 82
13136: PPUSH
13137: LD_INT 44
13139: PPUSH
13140: CALL_OW 307
13144: IFFALSE 13122
// ComTurnXY ( Heike , 81 , 47 ) ;
13146: LD_EXP 23
13150: PPUSH
13151: LD_INT 81
13153: PPUSH
13154: LD_INT 47
13156: PPUSH
13157: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
13161: LD_EXP 23
13165: PPUSH
13166: LD_STRING DH-Story-8
13168: PPUSH
13169: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
13173: LD_EXP 24
13177: PPUSH
13178: LD_STRING DO-Story-9
13180: PPUSH
13181: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
13185: LD_EXP 24
13189: PPUSH
13190: LD_STRING DO-Story-10
13192: PPUSH
13193: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13197: LD_EXP 23
13201: PPUSH
13202: LD_EXP 24
13206: PPUSH
13207: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
13211: LD_EXP 23
13215: PPUSH
13216: LD_STRING DH-Story-11
13218: PPUSH
13219: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
13223: LD_EXP 24
13227: PPUSH
13228: LD_EXP 23
13232: PPUSH
13233: CALL_OW 112
// wait ( 0 0$0.3 ) ;
13237: LD_INT 10
13239: PPUSH
13240: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13244: LD_EXP 24
13248: PPUSH
13249: LD_EXP 23
13253: PPUSH
13254: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
13258: LD_EXP 24
13262: PPUSH
13263: LD_STRING DO-Story-12
13265: PPUSH
13266: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
13270: LD_EXP 23
13274: PPUSH
13275: LD_STRING DH-Story-13
13277: PPUSH
13278: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
13282: LD_EXP 24
13286: PPUSH
13287: LD_STRING DO-Story-14
13289: PPUSH
13290: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
13294: LD_EXP 24
13298: PPUSH
13299: LD_STRING DO-Story-15
13301: PPUSH
13302: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
13306: LD_INT 84
13308: PPUSH
13309: LD_INT 48
13311: PPUSH
13312: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
13316: LD_EXP 23
13320: PPUSH
13321: LD_INT 84
13323: PPUSH
13324: LD_INT 48
13326: PPUSH
13327: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
13331: LD_EXP 23
13335: PPUSH
13336: LD_INT 84
13338: PPUSH
13339: LD_INT 49
13341: PPUSH
13342: CALL_OW 178
// wait ( 0 0$1 ) ;
13346: LD_INT 35
13348: PPUSH
13349: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
13353: LD_EXP 24
13357: PPUSH
13358: LD_EXP 23
13362: PPUSH
13363: CALL_OW 112
// wait ( 0 0$1 ) ;
13367: LD_INT 35
13369: PPUSH
13370: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13374: LD_EXP 24
13378: PPUSH
13379: LD_EXP 23
13383: PPUSH
13384: CALL_OW 119
// wait ( 0 0$0.3 ) ;
13388: LD_INT 10
13390: PPUSH
13391: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
13395: LD_EXP 24
13399: PPUSH
13400: LD_STRING DO-Story-16
13402: PPUSH
13403: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
13407: LD_STRING QOmar2
13409: PPUSH
13410: CALL_OW 97
13414: PUSH
13415: LD_INT 2
13417: EQUAL
13418: IFFALSE 13758
// begin ComTurnUnit ( Heike , Omar ) ;
13420: LD_EXP 23
13424: PPUSH
13425: LD_EXP 24
13429: PPUSH
13430: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
13434: LD_EXP 23
13438: PPUSH
13439: LD_STRING DH-QuestionN-1
13441: PPUSH
13442: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
13446: LD_EXP 23
13450: PPUSH
13451: LD_INT 79
13453: PPUSH
13454: LD_INT 57
13456: PPUSH
13457: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13461: LD_EXP 23
13465: PPUSH
13466: LD_INT 68
13468: PPUSH
13469: LD_INT 53
13471: PPUSH
13472: CALL_OW 171
// wait ( 0 0$2 ) ;
13476: LD_INT 70
13478: PPUSH
13479: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13483: LD_EXP 24
13487: PPUSH
13488: LD_EXP 26
13492: PPUSH
13493: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13497: LD_INT 79
13499: PPUSH
13500: LD_INT 32
13502: PPUSH
13503: LD_INT 2
13505: PPUSH
13506: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13510: LD_INT 80
13512: PPUSH
13513: LD_INT 27
13515: PPUSH
13516: LD_INT 2
13518: PPUSH
13519: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13523: LD_INT 68
13525: PPUSH
13526: LD_INT 53
13528: PPUSH
13529: CALL_OW 84
// repeat wait ( 3 ) ;
13533: LD_INT 3
13535: PPUSH
13536: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13540: LD_EXP 23
13544: PPUSH
13545: LD_INT 68
13547: PPUSH
13548: LD_INT 53
13550: PPUSH
13551: CALL_OW 297
13555: PUSH
13556: LD_INT 6
13558: LESS
13559: IFFALSE 13533
// uc_side := 1 ;
13561: LD_ADDR_OWVAR 20
13565: PUSH
13566: LD_INT 1
13568: ST_TO_ADDR
// uc_nation := nation_american ;
13569: LD_ADDR_OWVAR 21
13573: PUSH
13574: LD_INT 1
13576: ST_TO_ADDR
// amTroops := [ ] ;
13577: LD_ADDR_VAR 0 5
13581: PUSH
13582: EMPTY
13583: ST_TO_ADDR
// for i := 1 to 3 do
13584: LD_ADDR_VAR 0 2
13588: PUSH
13589: DOUBLE
13590: LD_INT 1
13592: DEC
13593: ST_TO_ADDR
13594: LD_INT 3
13596: PUSH
13597: FOR_TO
13598: IFFALSE 13691
// begin PrepareSoldier ( false , 10 ) ;
13600: LD_INT 0
13602: PPUSH
13603: LD_INT 10
13605: PPUSH
13606: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13610: LD_ADDR_VAR 0 5
13614: PUSH
13615: LD_VAR 0 5
13619: PPUSH
13620: CALL_OW 44
13624: PPUSH
13625: CALL 59427 0 2
13629: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13630: LD_VAR 0 5
13634: PUSH
13635: LD_VAR 0 2
13639: ARRAY
13640: PPUSH
13641: LD_INT 2
13643: PPUSH
13644: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13648: LD_VAR 0 5
13652: PUSH
13653: LD_VAR 0 2
13657: ARRAY
13658: PPUSH
13659: LD_INT 11
13661: PPUSH
13662: LD_INT 0
13664: PPUSH
13665: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13669: LD_VAR 0 5
13673: PUSH
13674: LD_VAR 0 2
13678: ARRAY
13679: PPUSH
13680: LD_EXP 23
13684: PPUSH
13685: CALL_OW 115
// end ;
13689: GO 13597
13691: POP
13692: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13693: LD_EXP 23
13697: PPUSH
13698: LD_VAR 0 5
13702: PUSH
13703: LD_INT 1
13705: ARRAY
13706: PPUSH
13707: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13711: LD_INT 35
13713: PPUSH
13714: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13718: LD_EXP 23
13722: PPUSH
13723: CALL_OW 301
13727: IFTRUE 13740
13729: PUSH
13730: LD_EXP 23
13734: PPUSH
13735: CALL_OW 303
13739: OR
13740: IFFALSE 13711
// wait ( 0 0$2 ) ;
13742: LD_INT 70
13744: PPUSH
13745: CALL_OW 67
// YouLost ( Heike ) ;
13749: LD_STRING Heike
13751: PPUSH
13752: CALL_OW 104
// exit ;
13756: GO 13881
// end ; Say ( Omar , DO-Objective-1 ) ;
13758: LD_EXP 24
13762: PPUSH
13763: LD_STRING DO-Objective-1
13765: PPUSH
13766: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13770: LD_EXP 23
13774: PPUSH
13775: LD_EXP 24
13779: PPUSH
13780: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13784: LD_EXP 23
13788: PPUSH
13789: LD_STRING DH-Objective-2
13791: PPUSH
13792: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13796: LD_EXP 24
13800: PPUSH
13801: LD_STRING DO-Objective-3
13803: PPUSH
13804: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13808: LD_INT 79
13810: PPUSH
13811: LD_INT 32
13813: PPUSH
13814: LD_INT 2
13816: PPUSH
13817: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13821: LD_INT 80
13823: PPUSH
13824: LD_INT 27
13826: PPUSH
13827: LD_INT 2
13829: PPUSH
13830: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13834: LD_EXP 24
13838: PPUSH
13839: LD_INT 2
13841: PPUSH
13842: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13846: LD_EXP 26
13850: PPUSH
13851: LD_INT 2
13853: PPUSH
13854: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13858: LD_STRING O1
13860: PPUSH
13861: CALL_OW 337
// InGameOff ;
13865: CALL_OW 9
// gameActive := true ;
13869: LD_ADDR_EXP 19
13873: PUSH
13874: LD_INT 1
13876: ST_TO_ADDR
// SaveForQuickRestart ;
13877: CALL_OW 22
// end ;
13881: LD_VAR 0 1
13885: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13886: LD_EXP 19
13890: IFFALSE 13899
13892: PUSH
13893: LD_EXP 7
13897: NOT
13898: AND
13899: IFFALSE 13920
13901: PUSH
13902: LD_INT 4
13904: PPUSH
13905: LD_INT 22
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 70
13919: AND
13920: IFFALSE 14071
13922: GO 13924
13924: DISABLE
13925: LD_INT 0
13927: PPUSH
// begin spotArabianBase := true ;
13928: LD_ADDR_EXP 7
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
// DialogueOn ;
13936: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13940: LD_INT 232
13942: PPUSH
13943: LD_INT 101
13945: PPUSH
13946: LD_INT 2
13948: PPUSH
13949: LD_INT 22
13951: NEG
13952: PPUSH
13953: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13957: LD_INT 232
13959: PPUSH
13960: LD_INT 101
13962: PPUSH
13963: LD_INT 2
13965: PPUSH
13966: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13970: LD_INT 232
13972: PPUSH
13973: LD_INT 101
13975: PPUSH
13976: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13980: LD_ADDR_VAR 0 1
13984: PUSH
13985: LD_INT 4
13987: PPUSH
13988: LD_INT 22
13990: PUSH
13991: LD_INT 5
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 70
14002: PUSH
14003: FOR_IN
14004: IFFALSE 14020
// SetSide ( i , 2 ) ;
14006: LD_VAR 0 1
14010: PPUSH
14011: LD_INT 2
14013: PPUSH
14014: CALL_OW 235
14018: GO 14003
14020: POP
14021: POP
// if not spotAmericanBase then
14022: LD_EXP 6
14026: NOT
14027: IFFALSE 14043
// Say ( Omar , DO-ArBase-1a ) else
14029: LD_EXP 24
14033: PPUSH
14034: LD_STRING DO-ArBase-1a
14036: PPUSH
14037: CALL_OW 88
14041: GO 14055
// Say ( Omar , DO-ArBase-1b ) ;
14043: LD_EXP 24
14047: PPUSH
14048: LD_STRING DO-ArBase-1b
14050: PPUSH
14051: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
14055: LD_EXP 23
14059: PPUSH
14060: LD_STRING DH-ArBase-2
14062: PPUSH
14063: CALL_OW 88
// DialogueOff ;
14067: CALL_OW 7
// end ;
14071: PPOPN 1
14073: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14074: LD_EXP 19
14078: IFFALSE 14100
14080: PUSH
14081: LD_INT 87
14083: PPUSH
14084: CALL_OW 306
14088: IFTRUE 14099
14090: PUSH
14091: LD_INT 87
14093: PPUSH
14094: CALL_OW 313
14098: OR
14099: AND
14100: IFFALSE 14113
14102: PUSH
14103: LD_EXP 23
14107: PPUSH
14108: CALL_OW 302
14112: AND
14113: IFFALSE 14126
14115: PUSH
14116: LD_EXP 24
14120: PPUSH
14121: CALL_OW 302
14125: AND
14126: IFFALSE 14470
14128: GO 14130
14130: DISABLE
// begin DialogueOn ;
14131: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
14135: LD_EXP 23
14139: PPUSH
14140: LD_STRING DH-Fac-1
14142: PPUSH
14143: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
14147: LD_EXP 24
14151: PPUSH
14152: LD_STRING DOm-Fac-2
14154: PPUSH
14155: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
14159: LD_STRING 03_CargoRecycled
14161: PPUSH
14162: LD_INT 0
14164: PPUSH
14165: CALL_OW 30
14169: IFFALSE 14184
// SetTech ( tech_cargo , 2 , state_researched ) ;
14171: LD_INT 83
14173: PPUSH
14174: LD_INT 2
14176: PPUSH
14177: LD_INT 2
14179: PPUSH
14180: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
14184: LD_STRING 09_Markov
14186: PPUSH
14187: CALL_OW 28
14191: IFFALSE 14306
// begin Say ( Heike , DH-Fac-3a ) ;
14193: LD_EXP 23
14197: PPUSH
14198: LD_STRING DH-Fac-3a
14200: PPUSH
14201: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
14205: LD_INT 69
14207: PPUSH
14208: LD_INT 2
14210: PPUSH
14211: LD_INT 2
14213: PPUSH
14214: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
14218: LD_INT 39
14220: PPUSH
14221: LD_INT 2
14223: PPUSH
14224: LD_INT 2
14226: PPUSH
14227: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
14231: LD_INT 6
14233: PPUSH
14234: LD_INT 2
14236: PPUSH
14237: LD_INT 2
14239: PPUSH
14240: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14244: LD_INT 15
14246: PPUSH
14247: LD_INT 2
14249: PPUSH
14250: LD_INT 2
14252: PPUSH
14253: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14257: LD_EXP 23
14261: PPUSH
14262: LD_INT 3
14264: PPUSH
14265: CALL_OW 259
14269: PUSH
14270: LD_INT 10
14272: LESS
14273: IFFALSE 14304
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14275: LD_EXP 23
14279: PPUSH
14280: LD_INT 3
14282: PPUSH
14283: LD_EXP 23
14287: PPUSH
14288: LD_INT 3
14290: PPUSH
14291: CALL_OW 259
14295: PUSH
14296: LD_INT 1
14298: PLUS
14299: PPUSH
14300: CALL_OW 237
// end else
14304: GO 14459
// if TestCharacters ( 09_Olaf ) then
14306: LD_STRING 09_Olaf
14308: PPUSH
14309: CALL_OW 28
14313: IFFALSE 14402
// begin Say ( Heike , DH-Fac-3b ) ;
14315: LD_EXP 23
14319: PPUSH
14320: LD_STRING DH-Fac-3b
14322: PPUSH
14323: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14327: LD_INT 6
14329: PPUSH
14330: LD_INT 2
14332: PPUSH
14333: LD_INT 2
14335: PPUSH
14336: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14340: LD_INT 15
14342: PPUSH
14343: LD_INT 2
14345: PPUSH
14346: LD_INT 2
14348: PPUSH
14349: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14353: LD_EXP 23
14357: PPUSH
14358: LD_INT 3
14360: PPUSH
14361: CALL_OW 259
14365: PUSH
14366: LD_INT 10
14368: LESS
14369: IFFALSE 14400
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14371: LD_EXP 23
14375: PPUSH
14376: LD_INT 3
14378: PPUSH
14379: LD_EXP 23
14383: PPUSH
14384: LD_INT 3
14386: PPUSH
14387: CALL_OW 259
14391: PUSH
14392: LD_INT 1
14394: PLUS
14395: PPUSH
14396: CALL_OW 237
// end else
14400: GO 14459
// if GetSkill ( Heike , skill_mechanical ) > 5 then
14402: LD_EXP 23
14406: PPUSH
14407: LD_INT 3
14409: PPUSH
14410: CALL_OW 259
14414: PUSH
14415: LD_INT 5
14417: GREATER
14418: IFFALSE 14447
// begin Say ( Heike , DH-Fac-3c ) ;
14420: LD_EXP 23
14424: PPUSH
14425: LD_STRING DH-Fac-3c
14427: PPUSH
14428: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14432: LD_INT 6
14434: PPUSH
14435: LD_INT 2
14437: PPUSH
14438: LD_INT 2
14440: PPUSH
14441: CALL_OW 322
// end else
14445: GO 14459
// Say ( Heike , DH-Fac-3d ) ;
14447: LD_EXP 23
14451: PPUSH
14452: LD_STRING DH-Fac-3d
14454: PPUSH
14455: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
14459: LD_STRING ARemote
14461: PPUSH
14462: CALL_OW 337
// DialogueOff ;
14466: CALL_OW 7
// end ;
14470: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14471: LD_EXP 19
14475: IFFALSE 14497
14477: PUSH
14478: LD_INT 89
14480: PPUSH
14481: CALL_OW 306
14485: IFTRUE 14496
14487: PUSH
14488: LD_INT 89
14490: PPUSH
14491: CALL_OW 313
14495: OR
14496: AND
14497: IFFALSE 14510
14499: PUSH
14500: LD_EXP 23
14504: PPUSH
14505: CALL_OW 302
14509: AND
14510: IFFALSE 14523
14512: PUSH
14513: LD_EXP 24
14517: PPUSH
14518: CALL_OW 302
14522: AND
14523: IFFALSE 14751
14525: GO 14527
14527: DISABLE
// begin DialogueOn ;
14528: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14532: LD_EXP 23
14536: PPUSH
14537: LD_STRING DH-Lab-1
14539: PPUSH
14540: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14544: LD_EXP 24
14548: PPUSH
14549: LD_STRING DOm-Lab-2
14551: PPUSH
14552: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14556: LD_STRING 09_Aviradze
14558: PPUSH
14559: CALL_OW 28
14563: IFFALSE 14618
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14565: LD_INT 1
14567: PPUSH
14568: LD_INT 2
14570: PPUSH
14571: LD_INT 2
14573: PPUSH
14574: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14578: LD_INT 2
14580: PPUSH
14581: LD_INT 2
14583: PPUSH
14584: LD_INT 2
14586: PPUSH
14587: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14591: LD_INT 11
14593: PPUSH
14594: LD_INT 2
14596: PPUSH
14597: LD_INT 2
14599: PPUSH
14600: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14604: LD_EXP 23
14608: PPUSH
14609: LD_STRING DH-Lab-4a
14611: PPUSH
14612: CALL_OW 88
// end else
14616: GO 14630
// Say ( Heike , DH-Lab-4b ) ;
14618: LD_EXP 23
14622: PPUSH
14623: LD_STRING DH-Lab-4b
14625: PPUSH
14626: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14630: LD_STRING 05_DrugsTested
14632: PPUSH
14633: LD_EXP 1
14637: PPUSH
14638: CALL_OW 30
14642: IFFALSE 14669
// begin Say ( Heike , DH-Lab-5a ) ;
14644: LD_EXP 23
14648: PPUSH
14649: LD_STRING DH-Lab-5a
14651: PPUSH
14652: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14656: LD_INT 5
14658: PPUSH
14659: LD_INT 2
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14669: LD_STRING 09_ApeBrain
14671: PPUSH
14672: LD_EXP 1
14676: PPUSH
14677: CALL_OW 30
14681: IFFALSE 14720
// begin Say ( Heike , DH-Lab-6a ) ;
14683: LD_EXP 23
14687: PPUSH
14688: LD_STRING DH-Lab-6a
14690: PPUSH
14691: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14695: LD_EXP 24
14699: PPUSH
14700: LD_STRING DOm-Lab-7a
14702: PPUSH
14703: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14707: LD_INT 4
14709: PPUSH
14710: LD_INT 2
14712: PPUSH
14713: LD_INT 1
14715: PPUSH
14716: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14720: LD_STRING 09_ApeNeural
14722: PPUSH
14723: LD_EXP 1
14727: PPUSH
14728: CALL_OW 30
14732: IFFALSE 14747
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14734: LD_INT 3
14736: PPUSH
14737: LD_INT 2
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 322
// end ; DialogueOff ;
14747: CALL_OW 7
// end ;
14751: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14752: LD_EXP 19
14756: IFFALSE 14788
14758: PUSH
14759: LD_INT 22
14761: PUSH
14762: LD_INT 2
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 25
14771: PUSH
14772: LD_INT 12
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: AND
14788: IFFALSE 14823
14790: GO 14792
14792: DISABLE
// begin if IsOk ( Heike ) then
14793: LD_EXP 23
14797: PPUSH
14798: CALL_OW 302
14802: IFFALSE 14816
// Say ( Heike , DH-Ape-1 ) ;
14804: LD_EXP 23
14808: PPUSH
14809: LD_STRING DH-Ape-1
14811: PPUSH
14812: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14816: LD_STRING AApes
14818: PPUSH
14819: CALL_OW 337
// end ;
14823: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14824: LD_EXP 19
14828: IFFALSE 14864
14830: PUSH
14831: LD_INT 22
14833: PUSH
14834: LD_INT 2
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PUSH
14841: LD_INT 25
14843: PUSH
14844: LD_INT 15
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: PUSH
14860: LD_INT 5
14862: GREATEREQUAL
14863: AND
14864: IFFALSE 14968
14866: GO 14868
14868: DISABLE
// begin hasApes := true ;
14869: LD_ADDR_EXP 16
14873: PUSH
14874: LD_INT 1
14876: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14877: LD_STRING AApesOut
14879: PPUSH
14880: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14884: LD_EXP 23
14888: PPUSH
14889: CALL_OW 302
14893: NOT
14894: IFTRUE 14908
14896: PUSH
14897: LD_EXP 24
14901: PPUSH
14902: CALL_OW 302
14906: NOT
14907: OR
14908: IFFALSE 14912
// exit ;
14910: GO 14968
// DialogueOn ;
14912: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14916: LD_EXP 23
14920: PPUSH
14921: LD_STRING DH-ApeArmy-1
14923: PPUSH
14924: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14928: LD_EXP 24
14932: PPUSH
14933: LD_STRING DOm-ApeArmy-2
14935: PPUSH
14936: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14940: LD_EXP 23
14944: PPUSH
14945: LD_STRING DH-ApeArmy-3
14947: PPUSH
14948: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14952: LD_EXP 24
14956: PPUSH
14957: LD_STRING DOm-ApeArmy-4
14959: PPUSH
14960: CALL_OW 88
// DialogueOff ;
14964: CALL_OW 7
// end ;
14968: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14969: LD_EXP 19
14973: IFFALSE 14991
14975: PUSH
14976: LD_INT 5
14978: PPUSH
14979: LD_INT 2
14981: PPUSH
14982: CALL_OW 321
14986: PUSH
14987: LD_INT 2
14989: EQUAL
14990: AND
14991: IFFALSE 15027
14993: GO 14995
14995: DISABLE
// begin hasDrugs := true ;
14996: LD_ADDR_EXP 17
15000: PUSH
15001: LD_INT 1
15003: ST_TO_ADDR
// if IsOk ( Heike ) then
15004: LD_EXP 23
15008: PPUSH
15009: CALL_OW 302
15013: IFFALSE 15027
// Say ( Heike , DH-Stim-1 ) ;
15015: LD_EXP 23
15019: PPUSH
15020: LD_STRING DH-Stim-1
15022: PPUSH
15023: CALL_OW 88
// end ;
15027: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
15028: LD_EXP 19
15032: IFFALSE 15064
15034: PUSH
15035: LD_INT 22
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 25
15047: PUSH
15048: LD_INT 17
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: AND
15064: IFFALSE 15081
15066: GO 15068
15068: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
15069: LD_EXP 23
15073: PPUSH
15074: LD_STRING DH-Kamikadze-1
15076: PPUSH
15077: CALL_OW 88
15081: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
15082: LD_EXP 19
15086: IFFALSE 15118
15088: PUSH
15089: LD_INT 22
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 31
15101: PUSH
15102: LD_INT 31
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: AND
15118: IFFALSE 15131
15120: PUSH
15121: LD_EXP 24
15125: PPUSH
15126: CALL_OW 302
15130: AND
15131: IFFALSE 15144
15133: PUSH
15134: LD_EXP 23
15138: PPUSH
15139: CALL_OW 302
15143: AND
15144: IFFALSE 15229
15146: GO 15148
15148: DISABLE
// begin InGameOn ;
15149: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
15153: LD_EXP 24
15157: PPUSH
15158: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
15162: LD_EXP 23
15166: PPUSH
15167: LD_STRING DH-Mastodont-1
15169: PPUSH
15170: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
15174: LD_EXP 24
15178: PPUSH
15179: LD_STRING DOm-Mastodont-2
15181: PPUSH
15182: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
15186: LD_EXP 23
15190: PPUSH
15191: LD_STRING DH-Mastodont-3
15193: PPUSH
15194: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
15198: LD_EXP 24
15202: PPUSH
15203: LD_STRING DOm-Mastodont-4
15205: PPUSH
15206: CALL_OW 88
// hasMastodont := true ;
15210: LD_ADDR_EXP 13
15214: PUSH
15215: LD_INT 1
15217: ST_TO_ADDR
// InGameOff ;
15218: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
15222: LD_STRING ACH_MASTODONTTAME
15224: PPUSH
15225: CALL_OW 543
// end ;
15229: END
// every 0 0$1 trigger gameActive and tigerCounter do
15230: LD_EXP 19
15234: IFFALSE 15242
15236: PUSH
15237: LD_EXP 21
15241: AND
15242: IFFALSE 15254
15244: GO 15246
15246: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
15247: LD_STRING ACH_TIGERTAME
15249: PPUSH
15250: CALL_OW 543
15254: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
15255: LD_EXP 19
15259: IFFALSE 15271
15261: PUSH
15262: LD_EXP 21
15266: PUSH
15267: LD_INT 1
15269: GREATER
15270: AND
15271: IFFALSE 15377
15273: GO 15275
15275: DISABLE
// begin hasTigers := true ;
15276: LD_ADDR_EXP 15
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
15284: LD_EXP 24
15288: PPUSH
15289: CALL_OW 302
15293: NOT
15294: IFTRUE 15308
15296: PUSH
15297: LD_EXP 23
15301: PPUSH
15302: CALL_OW 302
15306: NOT
15307: OR
15308: IFFALSE 15312
// exit ;
15310: GO 15377
// CenterNowOnUnits ( Omar ) ;
15312: LD_EXP 24
15316: PPUSH
15317: CALL_OW 87
// DialogueOn ;
15321: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
15325: LD_EXP 24
15329: PPUSH
15330: LD_STRING DOm-Tiger-1
15332: PPUSH
15333: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
15337: LD_EXP 23
15341: PPUSH
15342: LD_STRING DH-Tiger-2
15344: PPUSH
15345: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
15349: LD_EXP 24
15353: PPUSH
15354: LD_STRING DOm-Tiger-3
15356: PPUSH
15357: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
15361: LD_EXP 23
15365: PPUSH
15366: LD_STRING DH-Tiger-4
15368: PPUSH
15369: CALL_OW 88
// DialogueOff ;
15373: CALL_OW 7
// end ;
15377: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
15378: LD_EXP 19
15382: IFFALSE 15425
15384: PUSH
15385: LD_INT 22
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 50
15397: PUSH
15398: EMPTY
15399: LIST
15400: PUSH
15401: LD_INT 33
15403: PUSH
15404: LD_INT 2
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: PPUSH
15416: CALL_OW 69
15420: PUSH
15421: LD_INT 3
15423: GREATEREQUAL
15424: AND
15425: IFFALSE 15468
15427: GO 15429
15429: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
15430: LD_STRING ARemoteOut
15432: PPUSH
15433: CALL_OW 337
// hasVehicles := true ;
15437: LD_ADDR_EXP 14
15441: PUSH
15442: LD_INT 1
15444: ST_TO_ADDR
// if IsOk ( Heike ) then
15445: LD_EXP 23
15449: PPUSH
15450: CALL_OW 302
15454: IFFALSE 15468
// Say ( Heike , DH-Mechanic-1 ) ;
15456: LD_EXP 23
15460: PPUSH
15461: LD_STRING DH-Mechanic-1
15463: PPUSH
15464: CALL_OW 88
// end ;
15468: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( 2 , amBaseArea ) ) do
15469: LD_EXP 19
15473: IFFALSE 15508
15475: PUSH
15476: LD_INT 29
15478: PPUSH
15479: LD_INT 22
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 70
15493: IFTRUE 15507
15495: PUSH
15496: LD_INT 2
15498: PPUSH
15499: LD_INT 1
15501: PPUSH
15502: CALL_OW 294
15506: OR
15507: AND
15508: IFFALSE 15521
15510: GO 15512
15512: DISABLE
// spotAmericanBase := true ;
15513: LD_ADDR_EXP 6
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
15521: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15522: LD_EXP 19
15526: IFFALSE 15534
15528: PUSH
15529: LD_EXP 6
15533: AND
15534: IFFALSE 15547
15536: PUSH
15537: LD_EXP 24
15541: PPUSH
15542: CALL_OW 302
15546: AND
15547: IFFALSE 15560
15549: PUSH
15550: LD_EXP 23
15554: PPUSH
15555: CALL_OW 302
15559: AND
15560: IFFALSE 15800
15562: GO 15564
15564: DISABLE
// begin DialogueOn ;
15565: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15569: LD_INT 92
15571: PPUSH
15572: LD_INT 129
15574: PPUSH
15575: LD_INT 2
15577: PPUSH
15578: LD_INT 22
15580: NEG
15581: PPUSH
15582: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15586: LD_INT 92
15588: PPUSH
15589: LD_INT 129
15591: PPUSH
15592: LD_INT 2
15594: PPUSH
15595: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15599: LD_INT 92
15601: PPUSH
15602: LD_INT 129
15604: PPUSH
15605: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15609: LD_INT 10
15611: PPUSH
15612: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15616: LD_EXP 24
15620: PPUSH
15621: LD_STRING DO-AmBase-1
15623: PPUSH
15624: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15628: LD_EXP 23
15632: PPUSH
15633: LD_STRING DH-AmBase-2
15635: PPUSH
15636: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15640: LD_EXP 24
15644: PPUSH
15645: LD_STRING DO-AmBase-3
15647: PPUSH
15648: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15652: LD_EXP 23
15656: PPUSH
15657: LD_STRING DH-AmBase-4
15659: PPUSH
15660: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15664: LD_EXP 24
15668: PPUSH
15669: LD_STRING DO-AmBase-5
15671: PPUSH
15672: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15676: LD_EXP 23
15680: PPUSH
15681: LD_STRING DH-AmBase-6
15683: PPUSH
15684: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15688: LD_EXP 24
15692: PPUSH
15693: LD_STRING DO-AmBase-7
15695: PPUSH
15696: CALL_OW 88
// if not spotArabianBase then
15700: LD_EXP 7
15704: NOT
15705: IFFALSE 15721
// begin Say ( Omar , DO-AmBase-8a ) ;
15707: LD_EXP 24
15711: PPUSH
15712: LD_STRING DO-AmBase-8a
15714: PPUSH
15715: CALL_OW 88
// end else
15719: GO 15733
// begin Say ( Omar , DO-AmBase-8b ) ;
15721: LD_EXP 24
15725: PPUSH
15726: LD_STRING DO-AmBase-8b
15728: PPUSH
15729: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15733: LD_EXP 23
15737: PPUSH
15738: CALL_OW 310
15742: IFFALSE 15760
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15744: LD_EXP 23
15748: PPUSH
15749: CALL_OW 310
15753: PPUSH
15754: CALL_OW 87
15758: GO 15769
// CenterNowOnUnits ( Heike ) ;
15760: LD_EXP 23
15764: PPUSH
15765: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15769: LD_EXP 23
15773: PPUSH
15774: LD_STRING DH-AmBase-9
15776: PPUSH
15777: CALL_OW 88
// DialogueOff ;
15781: CALL_OW 7
// spotByAmerican := true ;
15785: LD_ADDR_EXP 8
15789: PUSH
15790: LD_INT 1
15792: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15793: LD_STRING O2
15795: PPUSH
15796: CALL_OW 337
// end ;
15800: END
// function TalkAboutLegion ; begin
15801: LD_INT 0
15803: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15804: LD_EXP 23
15808: PPUSH
15809: LD_STRING DH-Legion-1
15811: PPUSH
15812: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15816: LD_EXP 24
15820: PPUSH
15821: LD_STRING DOm-Legion-2
15823: PPUSH
15824: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15828: LD_EXP 23
15832: PPUSH
15833: LD_STRING DH-Legion-3
15835: PPUSH
15836: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15840: LD_EXP 24
15844: PPUSH
15845: LD_STRING DOm-Legion-4
15847: PPUSH
15848: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15852: LD_EXP 23
15856: PPUSH
15857: LD_STRING DH-Legion-5
15859: PPUSH
15860: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15864: LD_EXP 24
15868: PPUSH
15869: LD_STRING DOm-Legion-6
15871: PPUSH
15872: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15876: LD_EXP 23
15880: PPUSH
15881: LD_STRING DH-Legion-7
15883: PPUSH
15884: CALL_OW 88
// end ;
15888: LD_VAR 0 1
15892: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15893: LD_EXP 19
15897: IFFALSE 15922
15899: PUSH
15900: LD_EXP 23
15904: PUSH
15905: LD_EXP 24
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: LD_INT 22
15916: PPUSH
15917: CALL 11864 0 2
15921: AND
15922: IFFALSE 15931
15924: PUSH
15925: LD_EXP 9
15929: NOT
15930: AND
15931: IFFALSE 15940
15933: PUSH
15934: LD_EXP 10
15938: NOT
15939: AND
15940: IFFALSE 16427
15942: GO 15944
15944: DISABLE
15945: LD_INT 0
15947: PPUSH
15948: PPUSH
15949: PPUSH
// begin uc_side := 8 ;
15950: LD_ADDR_OWVAR 20
15954: PUSH
15955: LD_INT 8
15957: ST_TO_ADDR
// uc_nation := nation_american ;
15958: LD_ADDR_OWVAR 21
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15966: LD_INT 3
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: LD_INT 9
15977: PPUSH
15978: LD_INT 90
15980: PPUSH
15981: CALL 26247 0 5
// veh := CreateVehicle ;
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: CALL_OW 45
15994: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15995: LD_ADDR_EXP 43
15999: PUSH
16000: LD_EXP 43
16004: PPUSH
16005: LD_VAR 0 3
16009: PPUSH
16010: CALL 59427 0 2
16014: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
16015: LD_VAR 0 3
16019: PPUSH
16020: LD_INT 2
16022: PPUSH
16023: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
16027: LD_VAR 0 3
16031: PPUSH
16032: LD_INT 126
16034: PPUSH
16035: LD_INT 18
16037: PPUSH
16038: LD_INT 0
16040: PPUSH
16041: CALL_OW 48
// uc_nation := nation_arabian ;
16045: LD_ADDR_OWVAR 21
16049: PUSH
16050: LD_INT 2
16052: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16053: LD_INT 0
16055: PPUSH
16056: LD_INT 6
16058: PUSH
16059: LD_INT 7
16061: PUSH
16062: LD_INT 8
16064: PUSH
16065: LD_INT 9
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: PUSH
16074: LD_OWVAR 67
16078: ARRAY
16079: PPUSH
16080: CALL_OW 383
// un := CreateHuman ;
16084: LD_ADDR_VAR 0 2
16088: PUSH
16089: CALL_OW 44
16093: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16094: LD_ADDR_EXP 38
16098: PUSH
16099: LD_EXP 38
16103: PPUSH
16104: LD_VAR 0 2
16108: PPUSH
16109: CALL 59427 0 2
16113: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16114: LD_VAR 0 2
16118: PPUSH
16119: LD_VAR 0 3
16123: PPUSH
16124: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16128: LD_INT 0
16130: PPUSH
16131: LD_INT 6
16133: PUSH
16134: LD_INT 7
16136: PUSH
16137: LD_INT 8
16139: PUSH
16140: LD_INT 9
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: PUSH
16149: LD_OWVAR 67
16153: ARRAY
16154: PPUSH
16155: CALL_OW 381
// for i := 1 to 3 do
16159: LD_ADDR_VAR 0 1
16163: PUSH
16164: DOUBLE
16165: LD_INT 1
16167: DEC
16168: ST_TO_ADDR
16169: LD_INT 3
16171: PUSH
16172: FOR_TO
16173: IFFALSE 16240
// begin un := CreateHuman ;
16175: LD_ADDR_VAR 0 2
16179: PUSH
16180: CALL_OW 44
16184: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16185: LD_ADDR_EXP 38
16189: PUSH
16190: LD_EXP 38
16194: PPUSH
16195: LD_VAR 0 2
16199: PPUSH
16200: CALL 59427 0 2
16204: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16205: LD_VAR 0 2
16209: PPUSH
16210: LD_INT 2
16212: PPUSH
16213: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
16217: LD_VAR 0 2
16221: PPUSH
16222: LD_INT 126
16224: PPUSH
16225: LD_INT 18
16227: PPUSH
16228: LD_INT 4
16230: PPUSH
16231: LD_INT 0
16233: PPUSH
16234: CALL_OW 50
// end ;
16238: GO 16172
16240: POP
16241: POP
// wait ( 0 0$01 ) ;
16242: LD_INT 35
16244: PPUSH
16245: CALL_OW 67
// DialogueOn ;
16249: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
16253: LD_INT 126
16255: PPUSH
16256: LD_INT 18
16258: PPUSH
16259: LD_INT 2
16261: PPUSH
16262: LD_INT 16
16264: NEG
16265: PPUSH
16266: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
16270: LD_INT 126
16272: PPUSH
16273: LD_INT 18
16275: PPUSH
16276: CALL_OW 86
// TalkAboutLegion ;
16280: CALL 15801 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
16284: LD_INT 126
16286: PPUSH
16287: LD_INT 18
16289: PPUSH
16290: LD_INT 2
16292: PPUSH
16293: CALL_OW 331
// DialogueOff ;
16297: CALL_OW 7
// spotLegion := true ;
16301: LD_ADDR_EXP 10
16305: PUSH
16306: LD_INT 1
16308: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16309: LD_EXP 38
16313: PPUSH
16314: LD_INT 164
16316: PPUSH
16317: LD_INT 47
16319: PPUSH
16320: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16324: LD_EXP 38
16328: PPUSH
16329: LD_INT 179
16331: PPUSH
16332: LD_INT 20
16334: PPUSH
16335: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16339: LD_INT 35
16341: PPUSH
16342: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16346: LD_EXP 38
16350: PPUSH
16351: LD_INT 60
16353: PUSH
16354: EMPTY
16355: LIST
16356: PPUSH
16357: CALL_OW 72
16361: NOT
16362: IFTRUE 16382
16364: PUSH
16365: LD_EXP 38
16369: PPUSH
16370: LD_INT 50
16372: PUSH
16373: EMPTY
16374: LIST
16375: PPUSH
16376: CALL_OW 72
16380: NOT
16381: OR
16382: IFFALSE 16339
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16384: LD_EXP 38
16388: PPUSH
16389: LD_INT 50
16391: PUSH
16392: EMPTY
16393: LIST
16394: PPUSH
16395: CALL_OW 72
16399: NOT
16400: IFFALSE 16404
// exit ;
16402: GO 16427
// legForces := legForces union legEForces ;
16404: LD_ADDR_EXP 37
16408: PUSH
16409: LD_EXP 37
16413: PUSH
16414: LD_EXP 38
16418: UNION
16419: ST_TO_ADDR
// legEForces := [ ] ;
16420: LD_ADDR_EXP 38
16424: PUSH
16425: EMPTY
16426: ST_TO_ADDR
// end ;
16427: PPOPN 3
16429: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
16430: LD_EXP 19
16434: IFFALSE 16459
16436: PUSH
16437: LD_EXP 23
16441: PUSH
16442: LD_EXP 24
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PPUSH
16451: LD_INT 23
16453: PPUSH
16454: CALL 11864 0 2
16458: AND
16459: IFFALSE 16468
16461: PUSH
16462: LD_EXP 9
16466: NOT
16467: AND
16468: IFFALSE 16477
16470: PUSH
16471: LD_EXP 10
16475: NOT
16476: AND
16477: IFFALSE 16964
16479: GO 16481
16481: DISABLE
16482: LD_INT 0
16484: PPUSH
16485: PPUSH
16486: PPUSH
// begin uc_side := 8 ;
16487: LD_ADDR_OWVAR 20
16491: PUSH
16492: LD_INT 8
16494: ST_TO_ADDR
// uc_nation := nation_american ;
16495: LD_ADDR_OWVAR 21
16499: PUSH
16500: LD_INT 1
16502: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16503: LD_INT 3
16505: PPUSH
16506: LD_INT 1
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: LD_INT 9
16514: PPUSH
16515: LD_INT 90
16517: PPUSH
16518: CALL 26247 0 5
// veh := CreateVehicle ;
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: CALL_OW 45
16531: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16532: LD_ADDR_EXP 43
16536: PUSH
16537: LD_EXP 43
16541: PPUSH
16542: LD_VAR 0 3
16546: PPUSH
16547: CALL 59427 0 2
16551: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16552: LD_VAR 0 3
16556: PPUSH
16557: LD_INT 3
16559: PPUSH
16560: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 224
16571: PPUSH
16572: LD_INT 57
16574: PPUSH
16575: LD_INT 0
16577: PPUSH
16578: CALL_OW 48
// uc_nation := nation_arabian ;
16582: LD_ADDR_OWVAR 21
16586: PUSH
16587: LD_INT 2
16589: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16590: LD_INT 0
16592: PPUSH
16593: LD_INT 6
16595: PUSH
16596: LD_INT 7
16598: PUSH
16599: LD_INT 8
16601: PUSH
16602: LD_INT 9
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: PUSH
16611: LD_OWVAR 67
16615: ARRAY
16616: PPUSH
16617: CALL_OW 383
// un := CreateHuman ;
16621: LD_ADDR_VAR 0 2
16625: PUSH
16626: CALL_OW 44
16630: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16631: LD_ADDR_EXP 38
16635: PUSH
16636: LD_EXP 38
16640: PPUSH
16641: LD_VAR 0 2
16645: PPUSH
16646: CALL 59427 0 2
16650: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16651: LD_VAR 0 2
16655: PPUSH
16656: LD_VAR 0 3
16660: PPUSH
16661: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16665: LD_INT 0
16667: PPUSH
16668: LD_INT 6
16670: PUSH
16671: LD_INT 7
16673: PUSH
16674: LD_INT 8
16676: PUSH
16677: LD_INT 9
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: PUSH
16686: LD_OWVAR 67
16690: ARRAY
16691: PPUSH
16692: CALL_OW 381
// for i := 1 to 3 do
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: DOUBLE
16702: LD_INT 1
16704: DEC
16705: ST_TO_ADDR
16706: LD_INT 3
16708: PUSH
16709: FOR_TO
16710: IFFALSE 16777
// begin un := CreateHuman ;
16712: LD_ADDR_VAR 0 2
16716: PUSH
16717: CALL_OW 44
16721: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16722: LD_ADDR_EXP 38
16726: PUSH
16727: LD_EXP 38
16731: PPUSH
16732: LD_VAR 0 2
16736: PPUSH
16737: CALL 59427 0 2
16741: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16754: LD_VAR 0 2
16758: PPUSH
16759: LD_INT 224
16761: PPUSH
16762: LD_INT 57
16764: PPUSH
16765: LD_INT 4
16767: PPUSH
16768: LD_INT 0
16770: PPUSH
16771: CALL_OW 50
// end ;
16775: GO 16709
16777: POP
16778: POP
// wait ( 0 0$01 ) ;
16779: LD_INT 35
16781: PPUSH
16782: CALL_OW 67
// DialogueOn ;
16786: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16790: LD_INT 224
16792: PPUSH
16793: LD_INT 57
16795: PPUSH
16796: LD_INT 2
16798: PPUSH
16799: LD_INT 16
16801: NEG
16802: PPUSH
16803: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16807: LD_INT 224
16809: PPUSH
16810: LD_INT 57
16812: PPUSH
16813: CALL_OW 86
// TalkAboutLegion ;
16817: CALL 15801 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16821: LD_INT 224
16823: PPUSH
16824: LD_INT 57
16826: PPUSH
16827: LD_INT 2
16829: PPUSH
16830: CALL_OW 331
// DialogueOff ;
16834: CALL_OW 7
// spotLegion := true ;
16838: LD_ADDR_EXP 10
16842: PUSH
16843: LD_INT 1
16845: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16846: LD_EXP 38
16850: PPUSH
16851: LD_INT 164
16853: PPUSH
16854: LD_INT 47
16856: PPUSH
16857: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16861: LD_EXP 38
16865: PPUSH
16866: LD_INT 179
16868: PPUSH
16869: LD_INT 20
16871: PPUSH
16872: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16876: LD_INT 35
16878: PPUSH
16879: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16883: LD_EXP 38
16887: PPUSH
16888: LD_INT 60
16890: PUSH
16891: EMPTY
16892: LIST
16893: PPUSH
16894: CALL_OW 72
16898: NOT
16899: IFTRUE 16919
16901: PUSH
16902: LD_EXP 38
16906: PPUSH
16907: LD_INT 50
16909: PUSH
16910: EMPTY
16911: LIST
16912: PPUSH
16913: CALL_OW 72
16917: NOT
16918: OR
16919: IFFALSE 16876
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16921: LD_EXP 38
16925: PPUSH
16926: LD_INT 50
16928: PUSH
16929: EMPTY
16930: LIST
16931: PPUSH
16932: CALL_OW 72
16936: NOT
16937: IFFALSE 16941
// exit ;
16939: GO 16964
// legForces := legForces union legEForces ;
16941: LD_ADDR_EXP 37
16945: PUSH
16946: LD_EXP 37
16950: PUSH
16951: LD_EXP 38
16955: UNION
16956: ST_TO_ADDR
// legEForces := [ ] ;
16957: LD_ADDR_EXP 38
16961: PUSH
16962: EMPTY
16963: ST_TO_ADDR
// end ;
16964: PPOPN 3
16966: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16967: LD_EXP 19
16971: IFFALSE 17011
16973: PUSH
16974: LD_INT 8
16976: PPUSH
16977: LD_EXP 24
16981: PPUSH
16982: CALL_OW 292
16986: IFTRUE 17002
16988: PUSH
16989: LD_INT 8
16991: PPUSH
16992: LD_EXP 23
16996: PPUSH
16997: CALL_OW 292
17001: OR
17002: IFTRUE 17010
17004: PUSH
17005: LD_EXP 9
17009: OR
17010: AND
17011: IFFALSE 17024
17013: PUSH
17014: LD_EXP 23
17018: PPUSH
17019: CALL_OW 302
17023: AND
17024: IFFALSE 17037
17026: PUSH
17027: LD_EXP 24
17031: PPUSH
17032: CALL_OW 302
17036: AND
17037: IFFALSE 17178
17039: GO 17041
17041: DISABLE
// begin DialogueOn ;
17042: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
17046: LD_EXP 36
17050: PPUSH
17051: LD_STRING DF-Spot-1
17053: PPUSH
17054: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
17058: LD_EXP 23
17062: PPUSH
17063: LD_STRING DH-Spot-2
17065: PPUSH
17066: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
17070: LD_EXP 36
17074: PPUSH
17075: LD_STRING DF-Spot-3
17077: PPUSH
17078: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
17082: LD_EXP 23
17086: PPUSH
17087: LD_STRING DH-Spot-4
17089: PPUSH
17090: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
17094: LD_EXP 24
17098: PPUSH
17099: LD_STRING DOm-Spot-5
17101: PPUSH
17102: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
17106: LD_EXP 36
17110: PPUSH
17111: LD_STRING DF-Spot-6
17113: PPUSH
17114: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
17118: LD_EXP 36
17122: PPUSH
17123: LD_STRING DF-Spot-7
17125: PPUSH
17126: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
17130: LD_EXP 36
17134: PPUSH
17135: LD_STRING DF-Spot-8
17137: PPUSH
17138: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
17142: LD_EXP 23
17146: PPUSH
17147: LD_STRING DH-Spot-9
17149: PPUSH
17150: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
17154: LD_EXP 36
17158: PPUSH
17159: LD_STRING DF-Spot-10
17161: PPUSH
17162: CALL_OW 94
// DialogueOff ;
17166: CALL_OW 7
// spotByLegion := true ;
17170: LD_ADDR_EXP 9
17174: PUSH
17175: LD_INT 1
17177: ST_TO_ADDR
// end ;
17178: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
17179: LD_EXP 19
17183: IFFALSE 17199
17185: PUSH
17186: LD_EXP 9
17190: IFTRUE 17198
17192: PUSH
17193: LD_EXP 10
17197: OR
17198: AND
17199: IFFALSE 17211
17201: GO 17203
17203: DISABLE
// ChangeMissionObjectives ( O3 ) ;
17204: LD_STRING O3
17206: PPUSH
17207: CALL_OW 337
17211: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
17212: LD_EXP 19
17216: IFFALSE 17259
17218: PUSH
17219: LD_INT 22
17221: PUSH
17222: LD_INT 8
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 21
17231: PUSH
17232: LD_INT 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 50
17241: PUSH
17242: EMPTY
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: PPUSH
17250: CALL_OW 69
17254: PUSH
17255: LD_INT 0
17257: EQUAL
17258: AND
17259: IFFALSE 17357
17261: GO 17263
17263: DISABLE
// begin legScriptActive := false ;
17264: LD_ADDR_EXP 4
17268: PUSH
17269: LD_INT 0
17271: ST_TO_ADDR
// if not americanDestroyed then
17272: LD_EXP 11
17276: NOT
17277: IFFALSE 17286
// SetAchievement ( ACH_REVANGE ) ;
17279: LD_STRING ACH_REVANGE
17281: PPUSH
17282: CALL_OW 543
// legionDestroyed := true ;
17286: LD_ADDR_EXP 12
17290: PUSH
17291: LD_INT 1
17293: ST_TO_ADDR
// DialogueOn ;
17294: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
17298: LD_EXP 36
17302: PPUSH
17303: LD_STRING DF-LegDes-1
17305: PPUSH
17306: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
17310: LD_EXP 23
17314: PPUSH
17315: LD_STRING DH-LegDes-2
17317: PPUSH
17318: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
17322: LD_EXP 36
17326: PPUSH
17327: LD_STRING DF-LegDes-3
17329: PPUSH
17330: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
17334: LD_EXP 23
17338: PPUSH
17339: LD_STRING DH-LegDes-4
17341: PPUSH
17342: CALL_OW 88
// DialogueOff ;
17346: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
17350: LD_STRING O5
17352: PPUSH
17353: CALL_OW 337
// end ;
17357: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
17358: LD_EXP 19
17362: IFFALSE 17399
17364: PUSH
17365: LD_EXP 27
17369: PPUSH
17370: LD_INT 21
17372: PUSH
17373: LD_INT 1
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 50
17382: PUSH
17383: EMPTY
17384: LIST
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PPUSH
17390: CALL_OW 72
17394: PUSH
17395: LD_INT 6
17397: LESS
17398: AND
17399: IFFALSE 17649
17401: GO 17403
17403: DISABLE
17404: LD_INT 0
17406: PPUSH
17407: PPUSH
// begin amScriptActive := false ;
17408: LD_ADDR_EXP 3
17412: PUSH
17413: LD_INT 0
17415: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
17416: LD_ADDR_VAR 0 2
17420: PUSH
17421: LD_EXP 27
17425: PPUSH
17426: LD_INT 21
17428: PUSH
17429: LD_INT 1
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 50
17438: PUSH
17439: EMPTY
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PPUSH
17446: CALL_OW 72
17450: ST_TO_ADDR
// for i in tmp do
17451: LD_ADDR_VAR 0 1
17455: PUSH
17456: LD_VAR 0 2
17460: PUSH
17461: FOR_IN
17462: IFFALSE 17490
// begin ComExit ( i ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL 59825 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_INT 63
17480: PPUSH
17481: LD_INT 124
17483: PPUSH
17484: CALL_OW 171
// end ;
17488: GO 17461
17490: POP
17491: POP
// wait ( 0 0$2 ) ;
17492: LD_INT 70
17494: PPUSH
17495: CALL_OW 67
// americanDestroyed := true ;
17499: LD_ADDR_EXP 11
17503: PUSH
17504: LD_INT 1
17506: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17507: LD_INT 35
17509: PPUSH
17510: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_EXP 27
17523: PPUSH
17524: LD_INT 21
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 50
17536: PUSH
17537: EMPTY
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PPUSH
17544: CALL_OW 72
17548: PUSH
17549: LD_EXP 35
17553: PPUSH
17554: LD_INT 50
17556: PUSH
17557: EMPTY
17558: LIST
17559: PPUSH
17560: CALL_OW 72
17564: UNION
17565: ST_TO_ADDR
// for i in tmp do
17566: LD_ADDR_VAR 0 1
17570: PUSH
17571: LD_VAR 0 2
17575: PUSH
17576: FOR_IN
17577: IFFALSE 17640
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 63
17586: PPUSH
17587: LD_INT 124
17589: PPUSH
17590: CALL_OW 307
17594: IFTRUE 17610
17596: PUSH
17597: LD_VAR 0 1
17601: PPUSH
17602: LD_INT 25
17604: PPUSH
17605: CALL_OW 308
17609: OR
17610: IFFALSE 17623
// RemoveUnit ( i ) else
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 64
17621: GO 17638
// ComMoveXY ( i , 63 , 124 ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: LD_INT 63
17630: PPUSH
17631: LD_INT 124
17633: PPUSH
17634: CALL_OW 111
// end ;
17638: GO 17576
17640: POP
17641: POP
// until not tmp ;
17642: LD_VAR 0 2
17646: NOT
17647: IFFALSE 17507
// end ;
17649: PPOPN 2
17651: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17652: LD_EXP 19
17656: IFFALSE 17664
17658: PUSH
17659: LD_EXP 11
17663: AND
17664: IFFALSE 17677
17666: PUSH
17667: LD_EXP 23
17671: PPUSH
17672: CALL_OW 302
17676: AND
17677: IFFALSE 17690
17679: PUSH
17680: LD_EXP 24
17684: PPUSH
17685: CALL_OW 302
17689: AND
17690: IFFALSE 18180
17692: GO 17694
17694: DISABLE
17695: LD_INT 0
17697: PPUSH
17698: PPUSH
17699: PPUSH
// begin DialogueOn ;
17700: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17704: LD_EXP 23
17708: PPUSH
17709: LD_STRING DH-Victory-1
17711: PPUSH
17712: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17716: LD_EXP 24
17720: PPUSH
17721: LD_STRING DOm-Victory-2
17723: PPUSH
17724: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17728: LD_EXP 24
17732: PPUSH
17733: LD_STRING DOm-Victory-3
17735: PPUSH
17736: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17740: LD_EXP 23
17744: PPUSH
17745: LD_STRING DH-Victory-4
17747: PPUSH
17748: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17752: LD_EXP 24
17756: PPUSH
17757: LD_STRING DOm-Victory-5
17759: PPUSH
17760: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17764: LD_EXP 24
17768: PPUSH
17769: LD_STRING DOm-Victory-6
17771: PPUSH
17772: CALL_OW 88
// DialogueOff ;
17776: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17780: LD_STRING O4
17782: PPUSH
17783: CALL_OW 337
// canFinish := true ;
17787: LD_ADDR_EXP 18
17791: PUSH
17792: LD_INT 1
17794: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17795: LD_INT 24
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: CALL_OW 424
// if not legionDestroyed then
17805: LD_EXP 12
17809: NOT
17810: IFFALSE 18180
// begin uc_nation := nation_arabian ;
17812: LD_ADDR_OWVAR 21
17816: PUSH
17817: LD_INT 2
17819: ST_TO_ADDR
// uc_side := 8 ;
17820: LD_ADDR_OWVAR 20
17824: PUSH
17825: LD_INT 8
17827: ST_TO_ADDR
// for i := 1 to 4 do
17828: LD_ADDR_VAR 0 1
17832: PUSH
17833: DOUBLE
17834: LD_INT 1
17836: DEC
17837: ST_TO_ADDR
17838: LD_INT 4
17840: PUSH
17841: FOR_TO
17842: IFFALSE 17923
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17844: LD_INT 0
17846: PPUSH
17847: LD_INT 8
17849: PUSH
17850: LD_INT 9
17852: PUSH
17853: LD_INT 10
17855: PUSH
17856: LD_INT 10
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: PUSH
17865: LD_OWVAR 67
17869: ARRAY
17870: PPUSH
17871: CALL_OW 381
// un := CreateHuman ;
17875: LD_ADDR_VAR 0 2
17879: PUSH
17880: CALL_OW 44
17884: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17885: LD_VAR 0 2
17889: PPUSH
17890: LD_INT 3
17892: PPUSH
17893: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17897: LD_VAR 0 2
17901: PPUSH
17902: LD_INT 26
17904: PPUSH
17905: LD_INT 0
17907: PPUSH
17908: CALL_OW 49
// ComCrawl ( un ) ;
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 137
// end ;
17921: GO 17841
17923: POP
17924: POP
// for i := 1 to 3 do
17925: LD_ADDR_VAR 0 1
17929: PUSH
17930: DOUBLE
17931: LD_INT 1
17933: DEC
17934: ST_TO_ADDR
17935: LD_INT 3
17937: PUSH
17938: FOR_TO
17939: IFFALSE 18023
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17941: LD_INT 0
17943: PPUSH
17944: LD_INT 8
17946: PUSH
17947: LD_INT 9
17949: PUSH
17950: LD_INT 10
17952: PUSH
17953: LD_INT 10
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: PUSH
17962: LD_OWVAR 67
17966: ARRAY
17967: PPUSH
17968: CALL_OW 381
// un := CreateHuman ;
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: CALL_OW 44
17981: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17982: LD_VAR 0 2
17986: PPUSH
17987: LD_INT 8
17989: PPUSH
17990: CALL_OW 336
// SetDir ( un , 3 ) ;
17994: LD_VAR 0 2
17998: PPUSH
17999: LD_INT 3
18001: PPUSH
18002: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
18006: LD_VAR 0 2
18010: PPUSH
18011: LD_INT 26
18013: PPUSH
18014: LD_INT 0
18016: PPUSH
18017: CALL_OW 49
// end ;
18021: GO 17938
18023: POP
18024: POP
// for i := 1 to 2 do
18025: LD_ADDR_VAR 0 1
18029: PUSH
18030: DOUBLE
18031: LD_INT 1
18033: DEC
18034: ST_TO_ADDR
18035: LD_INT 2
18037: PUSH
18038: FOR_TO
18039: IFFALSE 18178
// begin uc_side := 8 ;
18041: LD_ADDR_OWVAR 20
18045: PUSH
18046: LD_INT 8
18048: ST_TO_ADDR
// uc_nation := nation_american ;
18049: LD_ADDR_OWVAR 21
18053: PUSH
18054: LD_INT 1
18056: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
18057: LD_INT 4
18059: PPUSH
18060: LD_INT 1
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: LD_INT 9
18068: PPUSH
18069: LD_INT 90
18071: PPUSH
18072: CALL 26247 0 5
// veh := CreateVehicle ;
18076: LD_ADDR_VAR 0 3
18080: PUSH
18081: CALL_OW 45
18085: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_INT 3
18093: PPUSH
18094: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
18098: LD_VAR 0 3
18102: PPUSH
18103: LD_INT 27
18105: PPUSH
18106: LD_INT 0
18108: PPUSH
18109: CALL_OW 49
// uc_nation := nation_arabian ;
18113: LD_ADDR_OWVAR 21
18117: PUSH
18118: LD_INT 2
18120: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
18121: LD_INT 0
18123: PPUSH
18124: LD_INT 8
18126: PUSH
18127: LD_INT 9
18129: PUSH
18130: LD_INT 10
18132: PUSH
18133: LD_INT 10
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: PUSH
18142: LD_OWVAR 67
18146: ARRAY
18147: PPUSH
18148: CALL_OW 383
// un := CreateHuman ;
18152: LD_ADDR_VAR 0 2
18156: PUSH
18157: CALL_OW 44
18161: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18162: LD_VAR 0 2
18166: PPUSH
18167: LD_VAR 0 3
18171: PPUSH
18172: CALL_OW 52
// end ;
18176: GO 18038
18178: POP
18179: POP
// end ; end ;
18180: PPOPN 3
18182: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do var m1 , m2 , m3 ;
18183: LD_EXP 19
18187: IFFALSE 18195
18189: PUSH
18190: LD_EXP 18
18194: AND
18195: IFFALSE 18214
18197: PUSH
18198: LD_EXP 24
18202: PUSH
18203: EMPTY
18204: LIST
18205: PPUSH
18206: LD_INT 24
18208: PPUSH
18209: CALL 11864 0 2
18213: AND
18214: IFFALSE 18233
18216: PUSH
18217: LD_EXP 23
18221: PUSH
18222: EMPTY
18223: LIST
18224: PPUSH
18225: LD_INT 24
18227: PPUSH
18228: CALL 11864 0 2
18232: AND
18233: IFFALSE 18479
18235: GO 18237
18237: DISABLE
18238: LD_INT 0
18240: PPUSH
18241: PPUSH
18242: PPUSH
// begin if tick <= 50 50$00 then
18243: LD_OWVAR 1
18247: PUSH
18248: LD_INT 105000
18250: LESSEQUAL
18251: IFFALSE 18260
// SetAchievement ( ACH_HSPEED_10 ) ;
18253: LD_STRING ACH_HSPEED_10
18255: PPUSH
18256: CALL_OW 543
// if legionDestroyed then
18260: LD_EXP 12
18264: IFFALSE 18286
// begin m1 := true ;
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_INT 1
18273: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
18274: LD_STRING med1
18276: PPUSH
18277: LD_INT 1
18279: PPUSH
18280: CALL_OW 101
// end else
18284: GO 18297
// AddMedal ( med1 , - 1 ) ;
18286: LD_STRING med1
18288: PPUSH
18289: LD_INT 1
18291: NEG
18292: PPUSH
18293: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
18297: LD_OWVAR 1
18301: PUSH
18302: LD_INT 189000
18304: PUSH
18305: LD_INT 168000
18307: PUSH
18308: LD_INT 147000
18310: PUSH
18311: LD_INT 126000
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: LD_OWVAR 67
18324: ARRAY
18325: LESSEQUAL
18326: IFFALSE 18348
// begin m2 := true ;
18328: LD_ADDR_VAR 0 2
18332: PUSH
18333: LD_INT 1
18335: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
18336: LD_STRING med2
18338: PPUSH
18339: LD_INT 1
18341: PPUSH
18342: CALL_OW 101
// end else
18346: GO 18359
// AddMedal ( med2 , - 1 ) ;
18348: LD_STRING med2
18350: PPUSH
18351: LD_INT 1
18353: NEG
18354: PPUSH
18355: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasDrugs >= 3 then
18359: LD_EXP 16
18363: PUSH
18364: LD_EXP 14
18368: PLUS
18369: PUSH
18370: LD_EXP 15
18374: PLUS
18375: PUSH
18376: LD_EXP 13
18380: PLUS
18381: PUSH
18382: LD_EXP 17
18386: PLUS
18387: PUSH
18388: LD_INT 3
18390: GREATEREQUAL
18391: IFFALSE 18413
// begin m3 := true ;
18393: LD_ADDR_VAR 0 3
18397: PUSH
18398: LD_INT 1
18400: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
18401: LD_STRING med3
18403: PPUSH
18404: LD_INT 1
18406: PPUSH
18407: CALL_OW 101
// end else
18411: GO 18424
// AddMedal ( med3 , - 1 ) ;
18413: LD_STRING med3
18415: PPUSH
18416: LD_INT 1
18418: NEG
18419: PPUSH
18420: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18424: LD_VAR 0 1
18428: IFFALSE 18436
18430: PUSH
18431: LD_VAR 0 2
18435: AND
18436: IFFALSE 18444
18438: PUSH
18439: LD_VAR 0 3
18443: AND
18444: IFFALSE 18456
18446: PUSH
18447: LD_OWVAR 67
18451: PUSH
18452: LD_INT 3
18454: GREATEREQUAL
18455: AND
18456: IFFALSE 18468
// SetAchievementEX ( ACH_ARES , 10 ) ;
18458: LD_STRING ACH_ARES
18460: PPUSH
18461: LD_INT 10
18463: PPUSH
18464: CALL_OW 564
// GiveMedals ( MAIN ) ;
18468: LD_STRING MAIN
18470: PPUSH
18471: CALL_OW 102
// YouWin ;
18475: CALL_OW 103
// end ; end_of_file
18479: PPOPN 3
18481: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
18482: LD_VAR 0 1
18486: PPUSH
18487: CALL 81123 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
18491: LD_EXP 5
18495: IFFALSE 18512
18497: PUSH
18498: LD_VAR 0 1
18502: PPUSH
18503: CALL_OW 255
18507: PUSH
18508: LD_INT 2
18510: EQUAL
18511: AND
18512: IFFALSE 18561
18514: PUSH
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL_OW 263
18524: PUSH
18525: LD_INT 5
18527: EQUAL
18528: IFTRUE 18560
18530: PUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 257
18540: PUSH
18541: LD_INT 12
18543: PUSH
18544: LD_INT 15
18546: PUSH
18547: LD_INT 16
18549: PUSH
18550: LD_INT 17
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: IN
18559: OR
18560: AND
18561: IFFALSE 18631
// begin apeAmount := Dec ( apeAmount ) ;
18563: LD_ADDR_EXP 5
18567: PUSH
18568: LD_EXP 5
18572: PPUSH
18573: CALL 60822 0 1
18577: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
18578: LD_INT 35
18580: PPUSH
18581: LD_INT 2100
18583: PPUSH
18584: CALL_OW 12
18588: PPUSH
18589: CALL_OW 67
// uc_side := 0 ;
18593: LD_ADDR_OWVAR 20
18597: PUSH
18598: LD_INT 0
18600: ST_TO_ADDR
// uc_nation := nation_nature ;
18601: LD_ADDR_OWVAR 21
18605: PUSH
18606: LD_INT 0
18608: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
18609: LD_INT 0
18611: PPUSH
18612: CALL 55554 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
18616: CALL_OW 44
18620: PPUSH
18621: LD_INT 6
18623: PPUSH
18624: LD_INT 0
18626: PPUSH
18627: CALL_OW 49
// end ; if unit = Heike then
18631: LD_VAR 0 1
18635: PUSH
18636: LD_EXP 23
18640: EQUAL
18641: IFFALSE 18650
// YouLost ( Heike ) ;
18643: LD_STRING Heike
18645: PPUSH
18646: CALL_OW 104
// if unit = Omar then
18650: LD_VAR 0 1
18654: PUSH
18655: LD_EXP 24
18659: EQUAL
18660: IFFALSE 18669
// YouLost ( Omar ) ;
18662: LD_STRING Omar
18664: PPUSH
18665: CALL_OW 104
// if unit in amForces then
18669: LD_VAR 0 1
18673: PUSH
18674: LD_EXP 27
18678: IN
18679: IFFALSE 18697
// amForces := amForces diff unit ;
18681: LD_ADDR_EXP 27
18685: PUSH
18686: LD_EXP 27
18690: PUSH
18691: LD_VAR 0 1
18695: DIFF
18696: ST_TO_ADDR
// if unit in amTanks then
18697: LD_VAR 0 1
18701: PUSH
18702: LD_EXP 32
18706: IN
18707: IFFALSE 18725
// amTanks := amTanks diff unit ;
18709: LD_ADDR_EXP 32
18713: PUSH
18714: LD_EXP 32
18718: PUSH
18719: LD_VAR 0 1
18723: DIFF
18724: ST_TO_ADDR
// if unit in amPatrol then
18725: LD_VAR 0 1
18729: PUSH
18730: LD_EXP 35
18734: IN
18735: IFFALSE 18753
// amPatrol := amPatrol diff unit ;
18737: LD_ADDR_EXP 35
18741: PUSH
18742: LD_EXP 35
18746: PUSH
18747: LD_VAR 0 1
18751: DIFF
18752: ST_TO_ADDR
// if GetSide ( unit ) = 1 then
18753: LD_VAR 0 1
18757: PPUSH
18758: CALL_OW 255
18762: PUSH
18763: LD_INT 1
18765: EQUAL
18766: IFFALSE 18920
// begin if GetBType ( unit ) in [ b_bunker , b_turret ] then
18768: LD_VAR 0 1
18772: PPUSH
18773: CALL_OW 266
18777: PUSH
18778: LD_INT 32
18780: PUSH
18781: LD_INT 33
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: IN
18788: IFFALSE 18844
// amBuildings := Join ( amBuildings , [ b_turret , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18790: LD_ADDR_EXP 31
18794: PUSH
18795: LD_EXP 31
18799: PPUSH
18800: LD_INT 33
18802: PUSH
18803: LD_VAR 0 1
18807: PPUSH
18808: CALL_OW 250
18812: PUSH
18813: LD_VAR 0 1
18817: PPUSH
18818: CALL_OW 251
18822: PUSH
18823: LD_VAR 0 1
18827: PPUSH
18828: CALL_OW 254
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: PPUSH
18839: CALL 59427 0 2
18843: ST_TO_ADDR
// if GetBType ( unit ) in [ b_armoury , b_barracks ] then
18844: LD_VAR 0 1
18848: PPUSH
18849: CALL_OW 266
18853: PUSH
18854: LD_INT 4
18856: PUSH
18857: LD_INT 5
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: IN
18864: IFFALSE 18920
// amBuildings := Join ( amBuildings , [ b_armoury , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18866: LD_ADDR_EXP 31
18870: PUSH
18871: LD_EXP 31
18875: PPUSH
18876: LD_INT 4
18878: PUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: CALL_OW 250
18888: PUSH
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 251
18898: PUSH
18899: LD_VAR 0 1
18903: PPUSH
18904: CALL_OW 254
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: PPUSH
18915: CALL 59427 0 2
18919: ST_TO_ADDR
// end ; if unit in legForces then
18920: LD_VAR 0 1
18924: PUSH
18925: LD_EXP 37
18929: IN
18930: IFFALSE 18948
// legForces := legForces diff unit ;
18932: LD_ADDR_EXP 37
18936: PUSH
18937: LD_EXP 37
18941: PUSH
18942: LD_VAR 0 1
18946: DIFF
18947: ST_TO_ADDR
// if unit in legTanks then
18948: LD_VAR 0 1
18952: PUSH
18953: LD_EXP 43
18957: IN
18958: IFFALSE 18976
// legTanks := legTanks diff unit ;
18960: LD_ADDR_EXP 43
18964: PUSH
18965: LD_EXP 43
18969: PUSH
18970: LD_VAR 0 1
18974: DIFF
18975: ST_TO_ADDR
// if unit in legRTanks then
18976: LD_VAR 0 1
18980: PUSH
18981: LD_EXP 44
18985: IN
18986: IFFALSE 19004
// legRTanks := legRTanks diff unit ;
18988: LD_ADDR_EXP 44
18992: PUSH
18993: LD_EXP 44
18997: PUSH
18998: LD_VAR 0 1
19002: DIFF
19003: ST_TO_ADDR
// if GetSide ( unit ) = 8 then
19004: LD_VAR 0 1
19008: PPUSH
19009: CALL_OW 255
19013: PUSH
19014: LD_INT 8
19016: EQUAL
19017: IFFALSE 19178
// begin if GetBType ( unit ) in [ b_bunker , b_turret ] then
19019: LD_VAR 0 1
19023: PPUSH
19024: CALL_OW 266
19028: PUSH
19029: LD_INT 32
19031: PUSH
19032: LD_INT 33
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: IN
19039: IFFALSE 19102
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
19041: LD_ADDR_EXP 42
19045: PUSH
19046: LD_EXP 42
19050: PPUSH
19051: LD_VAR 0 1
19055: PPUSH
19056: CALL_OW 266
19060: PUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 250
19070: PUSH
19071: LD_VAR 0 1
19075: PPUSH
19076: CALL_OW 251
19080: PUSH
19081: LD_VAR 0 1
19085: PPUSH
19086: CALL_OW 254
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL 59427 0 2
19101: ST_TO_ADDR
// if GetBType ( unit ) in [ b_armoury , b_barracks ] then
19102: LD_VAR 0 1
19106: PPUSH
19107: CALL_OW 266
19111: PUSH
19112: LD_INT 4
19114: PUSH
19115: LD_INT 5
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: IN
19122: IFFALSE 19178
// legBuildings := Join ( legBuildings , [ b_armoury , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
19124: LD_ADDR_EXP 42
19128: PUSH
19129: LD_EXP 42
19133: PPUSH
19134: LD_INT 4
19136: PUSH
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 250
19146: PUSH
19147: LD_VAR 0 1
19151: PPUSH
19152: CALL_OW 251
19156: PUSH
19157: LD_VAR 0 1
19161: PPUSH
19162: CALL_OW 254
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: PPUSH
19173: CALL 59427 0 2
19177: ST_TO_ADDR
// end ; if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
19178: LD_VAR 0 1
19182: PPUSH
19183: CALL_OW 264
19187: PUSH
19188: LD_INT 13
19190: EQUAL
19191: IFFALSE 19208
19193: PUSH
19194: LD_VAR 0 1
19198: PPUSH
19199: CALL_OW 255
19203: PUSH
19204: LD_INT 1
19206: EQUAL
19207: AND
19208: IFFALSE 19243
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
19210: LD_ADDR_EXP 29
19214: PUSH
19215: LD_EXP 29
19219: PPUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 13
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: PPUSH
19238: CALL 59427 0 2
19242: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
19243: LD_VAR 0 1
19247: PPUSH
19248: CALL_OW 264
19252: PUSH
19253: LD_INT 88
19255: EQUAL
19256: IFFALSE 19273
19258: PUSH
19259: LD_VAR 0 1
19263: PPUSH
19264: CALL_OW 255
19268: PUSH
19269: LD_INT 8
19271: EQUAL
19272: AND
19273: IFFALSE 19308
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
19275: LD_ADDR_EXP 40
19279: PUSH
19280: LD_EXP 40
19284: PPUSH
19285: LD_INT 13
19287: PUSH
19288: LD_INT 1
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: LD_INT 88
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: PPUSH
19303: CALL 59427 0 2
19307: ST_TO_ADDR
// if unit = amCargo then
19308: LD_VAR 0 1
19312: PUSH
19313: LD_EXP 34
19317: EQUAL
19318: IFFALSE 19361
// begin amCargo := 0 ;
19320: LD_ADDR_EXP 34
19324: PUSH
19325: LD_INT 0
19327: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
19328: LD_ADDR_EXP 29
19332: PUSH
19333: LD_EXP 29
19337: PPUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: LD_INT 2
19346: PUSH
19347: LD_INT 12
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: PPUSH
19356: CALL 59427 0 2
19360: ST_TO_ADDR
// end ; if unit = legCargo then
19361: LD_VAR 0 1
19365: PUSH
19366: LD_EXP 45
19370: EQUAL
19371: IFFALSE 19414
// begin legCargo := 0 ;
19373: LD_ADDR_EXP 45
19377: PUSH
19378: LD_INT 0
19380: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
19381: LD_ADDR_EXP 40
19385: PUSH
19386: LD_EXP 40
19390: PPUSH
19391: LD_INT 13
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 32
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: PPUSH
19409: CALL 59427 0 2
19413: ST_TO_ADDR
// end ; end ;
19414: PPOPN 1
19416: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
19417: LD_ADDR_EXP 21
19421: PUSH
19422: LD_EXP 21
19426: PPUSH
19427: CALL 60800 0 1
19431: ST_TO_ADDR
// end ;
19432: PPOPN 2
19434: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
19435: LD_VAR 0 2
19439: PUSH
19440: LD_INT 3
19442: PUSH
19443: LD_INT 22
19445: PUSH
19446: LD_INT 2
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 25
19459: PUSH
19460: LD_INT 3
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PPUSH
19471: CALL_OW 69
19475: IN
19476: IFFALSE 19493
19478: PUSH
19479: LD_VAR 0 1
19483: PPUSH
19484: CALL_OW 266
19488: PUSH
19489: LD_INT 3
19491: EQUAL
19492: AND
19493: IFFALSE 19510
19495: PUSH
19496: LD_VAR 0 2
19500: PPUSH
19501: CALL_OW 256
19505: PUSH
19506: LD_INT 1000
19508: LESS
19509: AND
19510: IFFALSE 19536
// begin SetTag ( un , 0 ) ;
19512: LD_VAR 0 2
19516: PPUSH
19517: LD_INT 0
19519: PPUSH
19520: CALL_OW 109
// SetLives ( un , 1000 ) ;
19524: LD_VAR 0 2
19528: PPUSH
19529: LD_INT 1000
19531: PPUSH
19532: CALL_OW 234
// end ; end ;
19536: PPOPN 2
19538: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
19539: LD_INT 0
19541: PPUSH
19542: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
19543: LD_VAR 0 1
19547: PPUSH
19548: LD_VAR 0 2
19552: PPUSH
19553: CALL 81181 0 2
// side := GetSide ( fac ) ;
19557: LD_ADDR_VAR 0 3
19561: PUSH
19562: LD_VAR 0 2
19566: PPUSH
19567: CALL_OW 255
19571: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
19572: LD_ADDR_VAR 0 4
19576: PUSH
19577: LD_VAR 0 1
19581: PPUSH
19582: CALL_OW 264
19586: ST_TO_ADDR
// if side = 1 then
19587: LD_VAR 0 3
19591: PUSH
19592: LD_INT 1
19594: EQUAL
19595: IFFALSE 19706
// begin amConstructList := Delete ( amConstructList , 1 ) ;
19597: LD_ADDR_EXP 29
19601: PUSH
19602: LD_EXP 29
19606: PPUSH
19607: LD_INT 1
19609: PPUSH
19610: CALL_OW 3
19614: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
19615: LD_VAR 0 4
19619: PUSH
19620: LD_INT 12
19622: EQUAL
19623: IFFALSE 19632
19625: PUSH
19626: LD_EXP 34
19630: NOT
19631: AND
19632: IFFALSE 19644
// amCargo := veh ;
19634: LD_ADDR_EXP 34
19638: PUSH
19639: LD_VAR 0 1
19643: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
19644: LD_VAR 0 4
19648: PUSH
19649: LD_INT 12
19651: PUSH
19652: LD_INT 13
19654: PUSH
19655: LD_INT 14
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: IN
19663: IFFALSE 19667
// exit ;
19665: GO 19858
// amTanks := Join ( amTanks , veh ) ;
19667: LD_ADDR_EXP 32
19671: PUSH
19672: LD_EXP 32
19676: PPUSH
19677: LD_VAR 0 1
19681: PPUSH
19682: CALL 59427 0 2
19686: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19687: LD_INT 35
19689: PPUSH
19690: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
19694: LD_VAR 0 1
19698: PPUSH
19699: LD_INT 12
19701: PPUSH
19702: CALL_OW 173
// end ; if side = 8 then
19706: LD_VAR 0 3
19710: PUSH
19711: LD_INT 8
19713: EQUAL
19714: IFFALSE 19858
// begin legConstructList := Delete ( legConstructList , 1 ) ;
19716: LD_ADDR_EXP 40
19720: PUSH
19721: LD_EXP 40
19725: PPUSH
19726: LD_INT 1
19728: PPUSH
19729: CALL_OW 3
19733: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
19734: LD_VAR 0 4
19738: PUSH
19739: LD_INT 32
19741: EQUAL
19742: IFFALSE 19751
19744: PUSH
19745: LD_EXP 45
19749: NOT
19750: AND
19751: IFFALSE 19763
// legCargo := veh ;
19753: LD_ADDR_EXP 45
19757: PUSH
19758: LD_VAR 0 1
19762: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
19763: LD_VAR 0 4
19767: PUSH
19768: LD_INT 32
19770: PUSH
19771: LD_INT 88
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: IN
19778: IFFALSE 19782
// exit ;
19780: GO 19858
// if GetControl ( veh ) = control_manual then
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 263
19791: PUSH
19792: LD_INT 1
19794: EQUAL
19795: IFFALSE 19819
// legTanks := Join ( legTanks , veh ) else
19797: LD_ADDR_EXP 43
19801: PUSH
19802: LD_EXP 43
19806: PPUSH
19807: LD_VAR 0 1
19811: PPUSH
19812: CALL 59427 0 2
19816: ST_TO_ADDR
19817: GO 19839
// legRTanks := Join ( legRTanks , veh ) ;
19819: LD_ADDR_EXP 44
19823: PUSH
19824: LD_EXP 44
19828: PPUSH
19829: LD_VAR 0 1
19833: PPUSH
19834: CALL 59427 0 2
19838: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19839: LD_INT 35
19841: PPUSH
19842: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19846: LD_VAR 0 1
19850: PPUSH
19851: LD_INT 15
19853: PPUSH
19854: CALL_OW 173
// end ; end ;
19858: PPOPN 4
19860: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19861: LD_INT 0
19863: PPUSH
19864: PPUSH
19865: PPUSH
// begin side := GetSide ( driver ) ;
19866: LD_ADDR_VAR 0 7
19870: PUSH
19871: LD_VAR 0 1
19875: PPUSH
19876: CALL_OW 255
19880: ST_TO_ADDR
// if side = 1 and driver in amForces then
19881: LD_VAR 0 7
19885: PUSH
19886: LD_INT 1
19888: EQUAL
19889: IFFALSE 19903
19891: PUSH
19892: LD_VAR 0 1
19896: PUSH
19897: LD_EXP 27
19901: IN
19902: AND
19903: IFFALSE 20115
// begin ComMoveToArea ( driver , amBaseArea ) ;
19905: LD_VAR 0 1
19909: PPUSH
19910: LD_INT 1
19912: PPUSH
19913: CALL_OW 113
// SetTag ( driver , tMech ) ;
19917: LD_VAR 0 1
19921: PPUSH
19922: LD_INT 7
19924: PPUSH
19925: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19929: LD_ADDR_VAR 0 6
19933: PUSH
19934: LD_INT 1
19936: PPUSH
19937: LD_INT 22
19939: PUSH
19940: LD_VAR 0 7
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 30
19951: PUSH
19952: LD_INT 3
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 50
19961: PUSH
19962: EMPTY
19963: LIST
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: LIST
19969: PPUSH
19970: CALL_OW 70
19974: ST_TO_ADDR
// if fac then
19975: LD_VAR 0 6
19979: IFFALSE 20001
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_VAR 0 6
19990: PUSH
19991: LD_INT 1
19993: ARRAY
19994: PPUSH
19995: CALL_OW 180
// exit ;
19999: GO 20368
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
20001: LD_ADDR_VAR 0 5
20005: PUSH
20006: LD_INT 1
20008: PPUSH
20009: LD_INT 22
20011: PUSH
20012: LD_VAR 0 7
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: LD_INT 30
20026: PUSH
20027: LD_INT 4
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 30
20036: PUSH
20037: LD_INT 5
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 3
20051: PUSH
20052: LD_INT 62
20054: PUSH
20055: EMPTY
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 50
20064: PUSH
20065: EMPTY
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: PPUSH
20074: CALL_OW 70
20078: ST_TO_ADDR
// if arm then
20079: LD_VAR 0 5
20083: IFFALSE 20115
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
20085: LD_VAR 0 1
20089: PPUSH
20090: LD_VAR 0 5
20094: PUSH
20095: LD_INT 1
20097: ARRAY
20098: PPUSH
20099: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
20103: LD_VAR 0 1
20107: PPUSH
20108: LD_INT 1
20110: PPUSH
20111: CALL_OW 183
// end ; end ; if side = 8 then
20115: LD_VAR 0 7
20119: PUSH
20120: LD_INT 8
20122: EQUAL
20123: IFFALSE 20368
// begin ComMoveToArea ( driver , legBaseArea ) ;
20125: LD_VAR 0 1
20129: PPUSH
20130: LD_INT 2
20132: PPUSH
20133: CALL_OW 113
// if not driver in legForces then
20137: LD_VAR 0 1
20141: PUSH
20142: LD_EXP 37
20146: IN
20147: NOT
20148: IFFALSE 20170
// legForces := Join ( legForces , driver ) ;
20150: LD_ADDR_EXP 37
20154: PUSH
20155: LD_EXP 37
20159: PPUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL 59427 0 2
20169: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
20170: LD_VAR 0 1
20174: PPUSH
20175: LD_INT 7
20177: PPUSH
20178: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
20182: LD_ADDR_VAR 0 6
20186: PUSH
20187: LD_INT 2
20189: PPUSH
20190: LD_INT 22
20192: PUSH
20193: LD_VAR 0 7
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 30
20204: PUSH
20205: LD_INT 3
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 50
20214: PUSH
20215: EMPTY
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: PPUSH
20223: CALL_OW 70
20227: ST_TO_ADDR
// if fac then
20228: LD_VAR 0 6
20232: IFFALSE 20254
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
20234: LD_VAR 0 1
20238: PPUSH
20239: LD_VAR 0 6
20243: PUSH
20244: LD_INT 1
20246: ARRAY
20247: PPUSH
20248: CALL_OW 180
// exit ;
20252: GO 20368
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
20254: LD_ADDR_VAR 0 5
20258: PUSH
20259: LD_INT 2
20261: PPUSH
20262: LD_INT 22
20264: PUSH
20265: LD_VAR 0 7
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 2
20276: PUSH
20277: LD_INT 30
20279: PUSH
20280: LD_INT 4
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 30
20289: PUSH
20290: LD_INT 5
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 3
20304: PUSH
20305: LD_INT 62
20307: PUSH
20308: EMPTY
20309: LIST
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 50
20317: PUSH
20318: EMPTY
20319: LIST
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: PPUSH
20327: CALL_OW 70
20331: ST_TO_ADDR
// if arm then
20332: LD_VAR 0 5
20336: IFFALSE 20368
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
20338: LD_VAR 0 1
20342: PPUSH
20343: LD_VAR 0 5
20347: PUSH
20348: LD_INT 1
20350: ARRAY
20351: PPUSH
20352: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
20356: LD_VAR 0 1
20360: PPUSH
20361: LD_INT 1
20363: PPUSH
20364: CALL_OW 183
// end ; end ; end ;
20368: PPOPN 7
20370: END
// on BuildingComplete ( b ) do var side , type ;
20371: LD_INT 0
20373: PPUSH
20374: PPUSH
// begin side := GetSide ( b ) ;
20375: LD_ADDR_VAR 0 2
20379: PUSH
20380: LD_VAR 0 1
20384: PPUSH
20385: CALL_OW 255
20389: ST_TO_ADDR
// type := GetBType ( b ) ;
20390: LD_ADDR_VAR 0 3
20394: PUSH
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 266
20404: ST_TO_ADDR
// if side = 1 then
20405: LD_VAR 0 2
20409: PUSH
20410: LD_INT 1
20412: EQUAL
20413: IFFALSE 20463
// begin amBuildings := Delete ( amBuildings , 1 ) ;
20415: LD_ADDR_EXP 31
20419: PUSH
20420: LD_EXP 31
20424: PPUSH
20425: LD_INT 1
20427: PPUSH
20428: CALL_OW 3
20432: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: LD_INT 4
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: IN
20452: IFFALSE 20463
// ComUpgrade ( b ) ;
20454: LD_VAR 0 1
20458: PPUSH
20459: CALL_OW 146
// end ; if side = 8 then
20463: LD_VAR 0 2
20467: PUSH
20468: LD_INT 8
20470: EQUAL
20471: IFFALSE 20521
// begin legBuildings := Delete ( legBuildings , 1 ) ;
20473: LD_ADDR_EXP 42
20477: PUSH
20478: LD_EXP 42
20482: PPUSH
20483: LD_INT 1
20485: PPUSH
20486: CALL_OW 3
20490: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
20491: LD_VAR 0 3
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: LD_INT 4
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: IN
20510: IFFALSE 20521
// ComUpgrade ( b ) ;
20512: LD_VAR 0 1
20516: PPUSH
20517: CALL_OW 146
// end ; end ;
20521: PPOPN 3
20523: END
// on ResearchComplete ( tech , lab ) do var side ;
20524: LD_INT 0
20526: PPUSH
// begin side := GetSide ( lab ) ;
20527: LD_ADDR_VAR 0 3
20531: PUSH
20532: LD_VAR 0 2
20536: PPUSH
20537: CALL_OW 255
20541: ST_TO_ADDR
// if side = 1 then
20542: LD_VAR 0 3
20546: PUSH
20547: LD_INT 1
20549: EQUAL
20550: IFFALSE 20568
// amTech := amTech diff tech ;
20552: LD_ADDR_EXP 28
20556: PUSH
20557: LD_EXP 28
20561: PUSH
20562: LD_VAR 0 1
20566: DIFF
20567: ST_TO_ADDR
// end ;
20568: PPOPN 3
20570: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
20571: LD_VAR 0 1
20575: PPUSH
20576: CALL 81165 0 1
// end ;
20580: PPOPN 1
20582: END
// on SailEvent ( event ) do begin case event of end ;
20583: LD_VAR 0 1
20587: PUSH
20588: POP
// end ;
20589: PPOPN 1
20591: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
20592: LD_EXP 19
20596: NOT
20597: IFFALSE 20601
// exit ;
20599: GO 20707
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
20601: LD_EXP 8
20605: NOT
20606: IFFALSE 20625
20608: PUSH
20609: LD_VAR 0 1
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: IN
20624: AND
20625: IFFALSE 20644
20627: PUSH
20628: LD_VAR 0 2
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: IN
20643: AND
20644: IFFALSE 20654
// spotByAmerican := true ;
20646: LD_ADDR_EXP 8
20650: PUSH
20651: LD_INT 1
20653: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
20654: LD_EXP 9
20658: NOT
20659: IFFALSE 20678
20661: PUSH
20662: LD_VAR 0 1
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: LD_INT 8
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: IN
20677: AND
20678: IFFALSE 20697
20680: PUSH
20681: LD_VAR 0 2
20685: PUSH
20686: LD_INT 8
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: IN
20696: AND
20697: IFFALSE 20707
// spotByLegion := true ;
20699: LD_ADDR_EXP 9
20703: PUSH
20704: LD_INT 1
20706: ST_TO_ADDR
// end ; end_of_file
20707: PPOPN 2
20709: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
20710: LD_EXP 7
20714: IFFALSE 20821
20716: GO 20718
20718: DISABLE
20719: LD_INT 0
20721: PPUSH
20722: PPUSH
// begin enable ;
20723: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
20724: LD_INT 35
20726: PPUSH
20727: LD_INT 385
20729: PPUSH
20730: CALL_OW 12
20734: PPUSH
20735: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
20739: LD_ADDR_VAR 0 2
20743: PUSH
20744: LD_INT 16
20746: PUSH
20747: LD_INT 17
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
20754: LD_ADDR_VAR 0 1
20758: PUSH
20759: LD_VAR 0 2
20763: PUSH
20764: LD_INT 1
20766: PPUSH
20767: LD_VAR 0 2
20771: PPUSH
20772: CALL 23451 0 1
20776: PPUSH
20777: CALL_OW 12
20781: ARRAY
20782: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 435
20792: PUSH
20793: LD_INT 4
20795: LESS
20796: IFFALSE 20821
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
20798: LD_INT 1
20800: PPUSH
20801: LD_INT 5
20803: PPUSH
20804: CALL_OW 12
20808: PPUSH
20809: LD_VAR 0 1
20813: PPUSH
20814: LD_INT 1
20816: PPUSH
20817: CALL_OW 55
// end ;
20821: PPOPN 2
20823: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
20824: LD_OWVAR 1
20828: PUSH
20829: LD_INT 10500
20831: PUSH
20832: LD_INT 8400
20834: PUSH
20835: LD_INT 6300
20837: PUSH
20838: LD_INT 5250
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: PUSH
20847: LD_OWVAR 67
20851: ARRAY
20852: LESS
20853: IFFALSE 20861
20855: PUSH
20856: LD_EXP 7
20860: AND
20861: IFFALSE 20894
20863: GO 20865
20865: DISABLE
// begin enable ;
20866: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20867: LD_INT 1
20869: PPUSH
20870: LD_INT 5
20872: PPUSH
20873: CALL_OW 12
20877: PPUSH
20878: LD_INT 218
20880: PPUSH
20881: LD_INT 92
20883: PPUSH
20884: LD_INT 11
20886: PPUSH
20887: LD_INT 1
20889: PPUSH
20890: CALL_OW 56
// end ;
20894: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
20895: LD_OWVAR 1
20899: PUSH
20900: LD_INT 12600
20902: PUSH
20903: LD_INT 10500
20905: PUSH
20906: LD_INT 8400
20908: PUSH
20909: LD_INT 7350
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: LD_OWVAR 67
20922: ARRAY
20923: GREATER
20924: IFFALSE 20932
20926: PUSH
20927: LD_EXP 7
20931: AND
20932: IFFALSE 20999
20934: GO 20936
20936: DISABLE
// begin enable ;
20937: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) and GetListOfCratesInArea ( arBaseArea ) < 12 then
20938: LD_INT 100
20940: PUSH
20941: LD_INT 10
20943: PUSH
20944: LD_OWVAR 67
20948: MUL
20949: MINUS
20950: PPUSH
20951: CALL_OW 13
20955: IFFALSE 20970
20957: PUSH
20958: LD_INT 4
20960: PPUSH
20961: CALL_OW 435
20965: PUSH
20966: LD_INT 12
20968: LESS
20969: AND
20970: IFFALSE 20999
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20972: LD_INT 1
20974: PPUSH
20975: LD_INT 5
20977: PPUSH
20978: CALL_OW 12
20982: PPUSH
20983: LD_INT 218
20985: PPUSH
20986: LD_INT 92
20988: PPUSH
20989: LD_INT 11
20991: PPUSH
20992: LD_INT 1
20994: PPUSH
20995: CALL_OW 56
// end ;
20999: END
// every 0 0$55 trigger IsOk ( amBase ) do
21000: LD_INT 2
21002: PPUSH
21003: CALL_OW 302
21007: IFFALSE 21047
21009: GO 21011
21011: DISABLE
// begin enable ;
21012: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
21013: LD_INT 13
21015: PPUSH
21016: CALL_OW 435
21020: PUSH
21021: LD_INT 3
21023: LESS
21024: IFFALSE 21047
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
21026: LD_INT 1
21028: PPUSH
21029: LD_INT 5
21031: PPUSH
21032: CALL_OW 12
21036: PPUSH
21037: LD_INT 13
21039: PPUSH
21040: LD_INT 1
21042: PPUSH
21043: CALL_OW 55
// end ;
21047: END
// every 1 1$05 trigger IsOk ( legBase ) do
21048: LD_INT 38
21050: PPUSH
21051: CALL_OW 302
21055: IFFALSE 21095
21057: GO 21059
21059: DISABLE
// begin enable ;
21060: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
21061: LD_INT 14
21063: PPUSH
21064: CALL_OW 435
21068: PUSH
21069: LD_INT 3
21071: LESS
21072: IFFALSE 21095
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
21074: LD_INT 1
21076: PPUSH
21077: LD_INT 5
21079: PPUSH
21080: CALL_OW 12
21084: PPUSH
21085: LD_INT 14
21087: PPUSH
21088: LD_INT 1
21090: PPUSH
21091: CALL_OW 55
// end ; end_of_file
21095: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
21096: LD_EXP 19
21100: IFFALSE 21117
21102: PUSH
21103: LD_EXP 24
21107: PPUSH
21108: CALL_OW 257
21112: PUSH
21113: LD_INT 11
21115: NONEQUAL
21116: AND
21117: IFFALSE 21125
21119: PUSH
21120: LD_EXP 7
21124: AND
21125: IFFALSE 21136
21127: PUSH
21128: LD_INT 85
21130: PPUSH
21131: CALL_OW 302
21135: AND
21136: IFFALSE 21156
21138: GO 21140
21140: DISABLE
// begin Query ( QSheik ) ;
21141: LD_STRING QSheik
21143: PPUSH
21144: CALL_OW 97
// omarCanChangeClass := true ;
21148: LD_ADDR_EXP 20
21152: PUSH
21153: LD_INT 1
21155: ST_TO_ADDR
// end ;
21156: END
// every 0 0$3 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
21157: LD_EXP 20
21161: IFFALSE 21178
21163: PUSH
21164: LD_EXP 24
21168: PPUSH
21169: CALL_OW 257
21173: PUSH
21174: LD_INT 11
21176: NONEQUAL
21177: AND
21178: IFFALSE 21195
21180: PUSH
21181: LD_EXP 24
21185: PPUSH
21186: CALL_OW 310
21190: PUSH
21191: LD_INT 85
21193: EQUAL
21194: AND
21195: IFFALSE 21226
21197: GO 21199
21199: DISABLE
// begin enable ;
21200: ENABLE
// if Query ( QChangeClass ) = 1 then
21201: LD_STRING QChangeClass
21203: PPUSH
21204: CALL_OW 97
21208: PUSH
21209: LD_INT 1
21211: EQUAL
21212: IFFALSE 21226
// SetClass ( Omar , class_desert_warior ) ;
21214: LD_EXP 24
21218: PPUSH
21219: LD_INT 11
21221: PPUSH
21222: CALL_OW 336
// end ; end_of_file
21226: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21227: LD_INT 0
21229: PPUSH
21230: PPUSH
// if exist_mode then
21231: LD_VAR 0 2
21235: IFFALSE 21281
// begin unit := CreateCharacter ( prefix & ident ) ;
21237: LD_ADDR_VAR 0 5
21241: PUSH
21242: LD_VAR 0 3
21246: PUSH
21247: LD_VAR 0 1
21251: STR
21252: PPUSH
21253: CALL_OW 34
21257: ST_TO_ADDR
// if unit then
21258: LD_VAR 0 5
21262: IFFALSE 21279
// DeleteCharacters ( prefix & ident ) ;
21264: LD_VAR 0 3
21268: PUSH
21269: LD_VAR 0 1
21273: STR
21274: PPUSH
21275: CALL_OW 40
// end else
21279: GO 21296
// unit := NewCharacter ( ident ) ;
21281: LD_ADDR_VAR 0 5
21285: PUSH
21286: LD_VAR 0 1
21290: PPUSH
21291: CALL_OW 25
21295: ST_TO_ADDR
// result := unit ;
21296: LD_ADDR_VAR 0 4
21300: PUSH
21301: LD_VAR 0 5
21305: ST_TO_ADDR
// end ;
21306: LD_VAR 0 4
21310: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
21311: LD_INT 0
21313: PPUSH
21314: PPUSH
// if exist_mode then
21315: LD_VAR 0 2
21319: IFFALSE 21344
// unit := CreateCharacter ( prefix & ident ) else
21321: LD_ADDR_VAR 0 5
21325: PUSH
21326: LD_VAR 0 3
21330: PUSH
21331: LD_VAR 0 1
21335: STR
21336: PPUSH
21337: CALL_OW 34
21341: ST_TO_ADDR
21342: GO 21359
// unit := NewCharacter ( ident ) ;
21344: LD_ADDR_VAR 0 5
21348: PUSH
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL_OW 25
21358: ST_TO_ADDR
// result := unit ;
21359: LD_ADDR_VAR 0 4
21363: PUSH
21364: LD_VAR 0 5
21368: ST_TO_ADDR
// end ;
21369: LD_VAR 0 4
21373: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21374: LD_INT 0
21376: PPUSH
21377: PPUSH
// if not side or not nation then
21378: LD_VAR 0 1
21382: NOT
21383: IFTRUE 21392
21385: PUSH
21386: LD_VAR 0 2
21390: NOT
21391: OR
21392: IFFALSE 21396
// exit ;
21394: GO 22190
// case nation of nation_american :
21396: LD_VAR 0 2
21400: PUSH
21401: LD_INT 1
21403: DOUBLE
21404: EQUAL
21405: IFTRUE 21409
21407: GO 21631
21409: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
21410: LD_ADDR_VAR 0 4
21414: PUSH
21415: LD_INT 35
21417: PUSH
21418: LD_INT 45
21420: PUSH
21421: LD_INT 46
21423: PUSH
21424: LD_INT 47
21426: PUSH
21427: LD_INT 82
21429: PUSH
21430: LD_INT 83
21432: PUSH
21433: LD_INT 84
21435: PUSH
21436: LD_INT 85
21438: PUSH
21439: LD_INT 86
21441: PUSH
21442: LD_INT 1
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: LD_INT 6
21450: PUSH
21451: LD_INT 15
21453: PUSH
21454: LD_INT 16
21456: PUSH
21457: LD_INT 7
21459: PUSH
21460: LD_INT 12
21462: PUSH
21463: LD_INT 13
21465: PUSH
21466: LD_INT 10
21468: PUSH
21469: LD_INT 14
21471: PUSH
21472: LD_INT 20
21474: PUSH
21475: LD_INT 21
21477: PUSH
21478: LD_INT 22
21480: PUSH
21481: LD_INT 25
21483: PUSH
21484: LD_INT 32
21486: PUSH
21487: LD_INT 27
21489: PUSH
21490: LD_INT 36
21492: PUSH
21493: LD_INT 69
21495: PUSH
21496: LD_INT 39
21498: PUSH
21499: LD_INT 34
21501: PUSH
21502: LD_INT 40
21504: PUSH
21505: LD_INT 48
21507: PUSH
21508: LD_INT 49
21510: PUSH
21511: LD_INT 50
21513: PUSH
21514: LD_INT 51
21516: PUSH
21517: LD_INT 52
21519: PUSH
21520: LD_INT 53
21522: PUSH
21523: LD_INT 54
21525: PUSH
21526: LD_INT 55
21528: PUSH
21529: LD_INT 56
21531: PUSH
21532: LD_INT 57
21534: PUSH
21535: LD_INT 58
21537: PUSH
21538: LD_INT 59
21540: PUSH
21541: LD_INT 60
21543: PUSH
21544: LD_INT 61
21546: PUSH
21547: LD_INT 62
21549: PUSH
21550: LD_INT 80
21552: PUSH
21553: LD_INT 82
21555: PUSH
21556: LD_INT 83
21558: PUSH
21559: LD_INT 84
21561: PUSH
21562: LD_INT 85
21564: PUSH
21565: LD_INT 86
21567: PUSH
21568: LD_INT 90
21570: PUSH
21571: LD_INT 93
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: ST_TO_ADDR
21629: GO 22112
21631: LD_INT 2
21633: DOUBLE
21634: EQUAL
21635: IFTRUE 21639
21637: GO 21873
21639: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
21640: LD_ADDR_VAR 0 4
21644: PUSH
21645: LD_INT 35
21647: PUSH
21648: LD_INT 45
21650: PUSH
21651: LD_INT 46
21653: PUSH
21654: LD_INT 47
21656: PUSH
21657: LD_INT 82
21659: PUSH
21660: LD_INT 83
21662: PUSH
21663: LD_INT 84
21665: PUSH
21666: LD_INT 85
21668: PUSH
21669: LD_INT 87
21671: PUSH
21672: LD_INT 70
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: LD_INT 11
21680: PUSH
21681: LD_INT 3
21683: PUSH
21684: LD_INT 4
21686: PUSH
21687: LD_INT 5
21689: PUSH
21690: LD_INT 6
21692: PUSH
21693: LD_INT 15
21695: PUSH
21696: LD_INT 18
21698: PUSH
21699: LD_INT 7
21701: PUSH
21702: LD_INT 17
21704: PUSH
21705: LD_INT 8
21707: PUSH
21708: LD_INT 20
21710: PUSH
21711: LD_INT 21
21713: PUSH
21714: LD_INT 22
21716: PUSH
21717: LD_INT 72
21719: PUSH
21720: LD_INT 26
21722: PUSH
21723: LD_INT 69
21725: PUSH
21726: LD_INT 39
21728: PUSH
21729: LD_INT 40
21731: PUSH
21732: LD_INT 41
21734: PUSH
21735: LD_INT 42
21737: PUSH
21738: LD_INT 43
21740: PUSH
21741: LD_INT 48
21743: PUSH
21744: LD_INT 49
21746: PUSH
21747: LD_INT 50
21749: PUSH
21750: LD_INT 51
21752: PUSH
21753: LD_INT 52
21755: PUSH
21756: LD_INT 53
21758: PUSH
21759: LD_INT 54
21761: PUSH
21762: LD_INT 55
21764: PUSH
21765: LD_INT 56
21767: PUSH
21768: LD_INT 60
21770: PUSH
21771: LD_INT 61
21773: PUSH
21774: LD_INT 62
21776: PUSH
21777: LD_INT 66
21779: PUSH
21780: LD_INT 67
21782: PUSH
21783: LD_INT 68
21785: PUSH
21786: LD_INT 81
21788: PUSH
21789: LD_INT 82
21791: PUSH
21792: LD_INT 83
21794: PUSH
21795: LD_INT 84
21797: PUSH
21798: LD_INT 85
21800: PUSH
21801: LD_INT 87
21803: PUSH
21804: LD_INT 88
21806: PUSH
21807: LD_INT 92
21809: PUSH
21810: LD_INT 94
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: ST_TO_ADDR
21871: GO 22112
21873: LD_INT 3
21875: DOUBLE
21876: EQUAL
21877: IFTRUE 21881
21879: GO 22111
21881: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
21882: LD_ADDR_VAR 0 4
21886: PUSH
21887: LD_INT 46
21889: PUSH
21890: LD_INT 47
21892: PUSH
21893: LD_INT 1
21895: PUSH
21896: LD_INT 2
21898: PUSH
21899: LD_INT 82
21901: PUSH
21902: LD_INT 83
21904: PUSH
21905: LD_INT 84
21907: PUSH
21908: LD_INT 85
21910: PUSH
21911: LD_INT 86
21913: PUSH
21914: LD_INT 11
21916: PUSH
21917: LD_INT 9
21919: PUSH
21920: LD_INT 20
21922: PUSH
21923: LD_INT 19
21925: PUSH
21926: LD_INT 21
21928: PUSH
21929: LD_INT 24
21931: PUSH
21932: LD_INT 22
21934: PUSH
21935: LD_INT 25
21937: PUSH
21938: LD_INT 28
21940: PUSH
21941: LD_INT 29
21943: PUSH
21944: LD_INT 30
21946: PUSH
21947: LD_INT 31
21949: PUSH
21950: LD_INT 37
21952: PUSH
21953: LD_INT 38
21955: PUSH
21956: LD_INT 32
21958: PUSH
21959: LD_INT 27
21961: PUSH
21962: LD_INT 33
21964: PUSH
21965: LD_INT 69
21967: PUSH
21968: LD_INT 39
21970: PUSH
21971: LD_INT 34
21973: PUSH
21974: LD_INT 40
21976: PUSH
21977: LD_INT 71
21979: PUSH
21980: LD_INT 23
21982: PUSH
21983: LD_INT 44
21985: PUSH
21986: LD_INT 48
21988: PUSH
21989: LD_INT 49
21991: PUSH
21992: LD_INT 50
21994: PUSH
21995: LD_INT 51
21997: PUSH
21998: LD_INT 52
22000: PUSH
22001: LD_INT 53
22003: PUSH
22004: LD_INT 54
22006: PUSH
22007: LD_INT 55
22009: PUSH
22010: LD_INT 56
22012: PUSH
22013: LD_INT 57
22015: PUSH
22016: LD_INT 58
22018: PUSH
22019: LD_INT 59
22021: PUSH
22022: LD_INT 63
22024: PUSH
22025: LD_INT 64
22027: PUSH
22028: LD_INT 65
22030: PUSH
22031: LD_INT 82
22033: PUSH
22034: LD_INT 83
22036: PUSH
22037: LD_INT 84
22039: PUSH
22040: LD_INT 85
22042: PUSH
22043: LD_INT 86
22045: PUSH
22046: LD_INT 89
22048: PUSH
22049: LD_INT 91
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: ST_TO_ADDR
22109: GO 22112
22111: POP
// if state > - 1 and state < 3 then
22112: LD_VAR 0 3
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: GREATER
22121: IFFALSE 22133
22123: PUSH
22124: LD_VAR 0 3
22128: PUSH
22129: LD_INT 3
22131: LESS
22132: AND
22133: IFFALSE 22190
// for i in result do
22135: LD_ADDR_VAR 0 5
22139: PUSH
22140: LD_VAR 0 4
22144: PUSH
22145: FOR_IN
22146: IFFALSE 22188
// if GetTech ( i , side ) <> state then
22148: LD_VAR 0 5
22152: PPUSH
22153: LD_VAR 0 1
22157: PPUSH
22158: CALL_OW 321
22162: PUSH
22163: LD_VAR 0 3
22167: NONEQUAL
22168: IFFALSE 22186
// result := result diff i ;
22170: LD_ADDR_VAR 0 4
22174: PUSH
22175: LD_VAR 0 4
22179: PUSH
22180: LD_VAR 0 5
22184: DIFF
22185: ST_TO_ADDR
22186: GO 22145
22188: POP
22189: POP
// end ;
22190: LD_VAR 0 4
22194: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22195: LD_INT 0
22197: PPUSH
22198: PPUSH
22199: PPUSH
// result := true ;
22200: LD_ADDR_VAR 0 3
22204: PUSH
22205: LD_INT 1
22207: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22208: LD_ADDR_VAR 0 5
22212: PUSH
22213: LD_VAR 0 2
22217: PPUSH
22218: CALL_OW 480
22222: ST_TO_ADDR
// if not tmp then
22223: LD_VAR 0 5
22227: NOT
22228: IFFALSE 22232
// exit ;
22230: GO 22281
// for i in tmp do
22232: LD_ADDR_VAR 0 4
22236: PUSH
22237: LD_VAR 0 5
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22279
// if GetTech ( i , side ) <> state_researched then
22245: LD_VAR 0 4
22249: PPUSH
22250: LD_VAR 0 1
22254: PPUSH
22255: CALL_OW 321
22259: PUSH
22260: LD_INT 2
22262: NONEQUAL
22263: IFFALSE 22277
// begin result := false ;
22265: LD_ADDR_VAR 0 3
22269: PUSH
22270: LD_INT 0
22272: ST_TO_ADDR
// exit ;
22273: POP
22274: POP
22275: GO 22281
// end ;
22277: GO 22242
22279: POP
22280: POP
// end ;
22281: LD_VAR 0 3
22285: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22286: LD_INT 0
22288: PPUSH
22289: PPUSH
22290: PPUSH
22291: PPUSH
22292: PPUSH
22293: PPUSH
22294: PPUSH
22295: PPUSH
22296: PPUSH
22297: PPUSH
22298: PPUSH
22299: PPUSH
22300: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22301: LD_VAR 0 1
22305: NOT
22306: IFTRUE 22323
22308: PUSH
22309: LD_VAR 0 1
22313: PPUSH
22314: CALL_OW 257
22318: PUSH
22319: LD_INT 9
22321: NONEQUAL
22322: OR
22323: IFFALSE 22327
// exit ;
22325: GO 22906
// side := GetSide ( unit ) ;
22327: LD_ADDR_VAR 0 9
22331: PUSH
22332: LD_VAR 0 1
22336: PPUSH
22337: CALL_OW 255
22341: ST_TO_ADDR
// tech_space := tech_spacanom ;
22342: LD_ADDR_VAR 0 12
22346: PUSH
22347: LD_INT 29
22349: ST_TO_ADDR
// tech_time := tech_taurad ;
22350: LD_ADDR_VAR 0 13
22354: PUSH
22355: LD_INT 28
22357: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22358: LD_ADDR_VAR 0 11
22362: PUSH
22363: LD_VAR 0 1
22367: PPUSH
22368: CALL_OW 310
22372: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22373: LD_VAR 0 11
22377: PPUSH
22378: CALL_OW 247
22382: PUSH
22383: LD_INT 2
22385: EQUAL
22386: IFFALSE 22390
// exit ;
22388: GO 22906
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22390: LD_ADDR_VAR 0 8
22394: PUSH
22395: LD_INT 81
22397: PUSH
22398: LD_VAR 0 9
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 3
22409: PUSH
22410: LD_INT 21
22412: PUSH
22413: LD_INT 3
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PPUSH
22428: CALL_OW 69
22432: ST_TO_ADDR
// if not tmp then
22433: LD_VAR 0 8
22437: NOT
22438: IFFALSE 22442
// exit ;
22440: GO 22906
// if in_unit then
22442: LD_VAR 0 11
22446: IFFALSE 22470
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22448: LD_ADDR_VAR 0 10
22452: PUSH
22453: LD_VAR 0 8
22457: PPUSH
22458: LD_VAR 0 11
22462: PPUSH
22463: CALL_OW 74
22467: ST_TO_ADDR
22468: GO 22490
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22470: LD_ADDR_VAR 0 10
22474: PUSH
22475: LD_VAR 0 8
22479: PPUSH
22480: LD_VAR 0 1
22484: PPUSH
22485: CALL_OW 74
22489: ST_TO_ADDR
// if not enemy then
22490: LD_VAR 0 10
22494: NOT
22495: IFFALSE 22499
// exit ;
22497: GO 22906
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22499: LD_VAR 0 11
22503: IFFALSE 22525
22505: PUSH
22506: LD_VAR 0 11
22510: PPUSH
22511: LD_VAR 0 10
22515: PPUSH
22516: CALL_OW 296
22520: PUSH
22521: LD_INT 13
22523: GREATER
22524: AND
22525: IFTRUE 22547
22527: PUSH
22528: LD_VAR 0 1
22532: PPUSH
22533: LD_VAR 0 10
22537: PPUSH
22538: CALL_OW 296
22542: PUSH
22543: LD_INT 12
22545: GREATER
22546: OR
22547: IFFALSE 22551
// exit ;
22549: GO 22906
// missile := [ 1 ] ;
22551: LD_ADDR_VAR 0 14
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22562: LD_VAR 0 9
22566: PPUSH
22567: LD_VAR 0 12
22571: PPUSH
22572: CALL_OW 325
22576: IFFALSE 22605
// missile := Replace ( missile , missile + 1 , 2 ) ;
22578: LD_ADDR_VAR 0 14
22582: PUSH
22583: LD_VAR 0 14
22587: PPUSH
22588: LD_VAR 0 14
22592: PUSH
22593: LD_INT 1
22595: PLUS
22596: PPUSH
22597: LD_INT 2
22599: PPUSH
22600: CALL_OW 1
22604: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22605: LD_VAR 0 9
22609: PPUSH
22610: LD_VAR 0 13
22614: PPUSH
22615: CALL_OW 325
22619: IFFALSE 22643
22621: PUSH
22622: LD_VAR 0 10
22626: PPUSH
22627: CALL_OW 255
22631: PPUSH
22632: LD_VAR 0 13
22636: PPUSH
22637: CALL_OW 325
22641: NOT
22642: AND
22643: IFFALSE 22672
// missile := Replace ( missile , missile + 1 , 3 ) ;
22645: LD_ADDR_VAR 0 14
22649: PUSH
22650: LD_VAR 0 14
22654: PPUSH
22655: LD_VAR 0 14
22659: PUSH
22660: LD_INT 1
22662: PLUS
22663: PPUSH
22664: LD_INT 3
22666: PPUSH
22667: CALL_OW 1
22671: ST_TO_ADDR
// if missile < 2 then
22672: LD_VAR 0 14
22676: PUSH
22677: LD_INT 2
22679: LESS
22680: IFFALSE 22684
// exit ;
22682: GO 22906
// x := GetX ( enemy ) ;
22684: LD_ADDR_VAR 0 4
22688: PUSH
22689: LD_VAR 0 10
22693: PPUSH
22694: CALL_OW 250
22698: ST_TO_ADDR
// y := GetY ( enemy ) ;
22699: LD_ADDR_VAR 0 5
22703: PUSH
22704: LD_VAR 0 10
22708: PPUSH
22709: CALL_OW 251
22713: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22714: LD_ADDR_VAR 0 6
22718: PUSH
22719: LD_VAR 0 4
22723: PUSH
22724: LD_INT 1
22726: NEG
22727: PPUSH
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 12
22735: PLUS
22736: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22737: LD_ADDR_VAR 0 7
22741: PUSH
22742: LD_VAR 0 5
22746: PUSH
22747: LD_INT 1
22749: NEG
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: CALL_OW 12
22758: PLUS
22759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22760: LD_VAR 0 6
22764: PPUSH
22765: LD_VAR 0 7
22769: PPUSH
22770: CALL_OW 488
22774: NOT
22775: IFFALSE 22797
// begin _x := x ;
22777: LD_ADDR_VAR 0 6
22781: PUSH
22782: LD_VAR 0 4
22786: ST_TO_ADDR
// _y := y ;
22787: LD_ADDR_VAR 0 7
22791: PUSH
22792: LD_VAR 0 5
22796: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22797: LD_ADDR_VAR 0 3
22801: PUSH
22802: LD_INT 1
22804: PPUSH
22805: LD_VAR 0 14
22809: PPUSH
22810: CALL_OW 12
22814: ST_TO_ADDR
// case i of 1 :
22815: LD_VAR 0 3
22819: PUSH
22820: LD_INT 1
22822: DOUBLE
22823: EQUAL
22824: IFTRUE 22828
22826: GO 22845
22828: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22829: LD_VAR 0 1
22833: PPUSH
22834: LD_VAR 0 10
22838: PPUSH
22839: CALL_OW 115
22843: GO 22906
22845: LD_INT 2
22847: DOUBLE
22848: EQUAL
22849: IFTRUE 22853
22851: GO 22875
22853: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22854: LD_VAR 0 1
22858: PPUSH
22859: LD_VAR 0 6
22863: PPUSH
22864: LD_VAR 0 7
22868: PPUSH
22869: CALL_OW 153
22873: GO 22906
22875: LD_INT 3
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22905
22883: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22884: LD_VAR 0 1
22888: PPUSH
22889: LD_VAR 0 6
22893: PPUSH
22894: LD_VAR 0 7
22898: PPUSH
22899: CALL_OW 154
22903: GO 22906
22905: POP
// end ;
22906: LD_VAR 0 2
22910: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22911: LD_INT 0
22913: PPUSH
22914: PPUSH
22915: PPUSH
22916: PPUSH
22917: PPUSH
22918: PPUSH
// if not unit or not building then
22919: LD_VAR 0 1
22923: NOT
22924: IFTRUE 22933
22926: PUSH
22927: LD_VAR 0 2
22931: NOT
22932: OR
22933: IFFALSE 22937
// exit ;
22935: GO 23095
// x := GetX ( building ) ;
22937: LD_ADDR_VAR 0 5
22941: PUSH
22942: LD_VAR 0 2
22946: PPUSH
22947: CALL_OW 250
22951: ST_TO_ADDR
// y := GetY ( building ) ;
22952: LD_ADDR_VAR 0 6
22956: PUSH
22957: LD_VAR 0 2
22961: PPUSH
22962: CALL_OW 251
22966: ST_TO_ADDR
// for i := 0 to 5 do
22967: LD_ADDR_VAR 0 4
22971: PUSH
22972: DOUBLE
22973: LD_INT 0
22975: DEC
22976: ST_TO_ADDR
22977: LD_INT 5
22979: PUSH
22980: FOR_TO
22981: IFFALSE 23093
// begin _x := ShiftX ( x , i , 3 ) ;
22983: LD_ADDR_VAR 0 7
22987: PUSH
22988: LD_VAR 0 5
22992: PPUSH
22993: LD_VAR 0 4
22997: PPUSH
22998: LD_INT 3
23000: PPUSH
23001: CALL_OW 272
23005: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23006: LD_ADDR_VAR 0 8
23010: PUSH
23011: LD_VAR 0 6
23015: PPUSH
23016: LD_VAR 0 4
23020: PPUSH
23021: LD_INT 3
23023: PPUSH
23024: CALL_OW 273
23028: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23029: LD_VAR 0 7
23033: PPUSH
23034: LD_VAR 0 8
23038: PPUSH
23039: CALL_OW 488
23043: NOT
23044: IFFALSE 23048
// continue ;
23046: GO 22980
// if HexInfo ( _x , _y ) = 0 then
23048: LD_VAR 0 7
23052: PPUSH
23053: LD_VAR 0 8
23057: PPUSH
23058: CALL_OW 428
23062: PUSH
23063: LD_INT 0
23065: EQUAL
23066: IFFALSE 23091
// begin ComMoveXY ( unit , _x , _y ) ;
23068: LD_VAR 0 1
23072: PPUSH
23073: LD_VAR 0 7
23077: PPUSH
23078: LD_VAR 0 8
23082: PPUSH
23083: CALL_OW 111
// exit ;
23087: POP
23088: POP
23089: GO 23095
// end ; end ;
23091: GO 22980
23093: POP
23094: POP
// end ;
23095: LD_VAR 0 3
23099: RET
// export function ScanBase ( side , base_area ) ; begin
23100: LD_INT 0
23102: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23103: LD_ADDR_VAR 0 3
23107: PUSH
23108: LD_VAR 0 2
23112: PPUSH
23113: LD_INT 81
23115: PUSH
23116: LD_VAR 0 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 70
23129: ST_TO_ADDR
// end ;
23130: LD_VAR 0 3
23134: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23135: LD_INT 0
23137: PPUSH
23138: PPUSH
23139: PPUSH
23140: PPUSH
// result := false ;
23141: LD_ADDR_VAR 0 2
23145: PUSH
23146: LD_INT 0
23148: ST_TO_ADDR
// side := GetSide ( unit ) ;
23149: LD_ADDR_VAR 0 3
23153: PUSH
23154: LD_VAR 0 1
23158: PPUSH
23159: CALL_OW 255
23163: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23164: LD_ADDR_VAR 0 4
23168: PUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL_OW 248
23178: ST_TO_ADDR
// case nat of 1 :
23179: LD_VAR 0 4
23183: PUSH
23184: LD_INT 1
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23203
23192: POP
// tech := tech_lassight ; 2 :
23193: LD_ADDR_VAR 0 5
23197: PUSH
23198: LD_INT 12
23200: ST_TO_ADDR
23201: GO 23242
23203: LD_INT 2
23205: DOUBLE
23206: EQUAL
23207: IFTRUE 23211
23209: GO 23222
23211: POP
// tech := tech_mortar ; 3 :
23212: LD_ADDR_VAR 0 5
23216: PUSH
23217: LD_INT 41
23219: ST_TO_ADDR
23220: GO 23242
23222: LD_INT 3
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23230
23228: GO 23241
23230: POP
// tech := tech_bazooka ; end ;
23231: LD_ADDR_VAR 0 5
23235: PUSH
23236: LD_INT 44
23238: ST_TO_ADDR
23239: GO 23242
23241: POP
// if Researched ( side , tech ) then
23242: LD_VAR 0 3
23246: PPUSH
23247: LD_VAR 0 5
23251: PPUSH
23252: CALL_OW 325
23256: IFFALSE 23283
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23258: LD_ADDR_VAR 0 2
23262: PUSH
23263: LD_INT 5
23265: PUSH
23266: LD_INT 8
23268: PUSH
23269: LD_INT 9
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: LD_VAR 0 4
23281: ARRAY
23282: ST_TO_ADDR
// end ;
23283: LD_VAR 0 2
23287: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23288: LD_INT 0
23290: PPUSH
23291: PPUSH
23292: PPUSH
// if not mines then
23293: LD_VAR 0 2
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23446
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23302: LD_ADDR_VAR 0 5
23306: PUSH
23307: LD_INT 81
23309: PUSH
23310: LD_VAR 0 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 3
23321: PUSH
23322: LD_INT 21
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PPUSH
23340: CALL_OW 69
23344: ST_TO_ADDR
// for i in mines do
23345: LD_ADDR_VAR 0 4
23349: PUSH
23350: LD_VAR 0 2
23354: PUSH
23355: FOR_IN
23356: IFFALSE 23444
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23358: LD_VAR 0 4
23362: PUSH
23363: LD_INT 1
23365: ARRAY
23366: PPUSH
23367: LD_VAR 0 4
23371: PUSH
23372: LD_INT 2
23374: ARRAY
23375: PPUSH
23376: CALL_OW 458
23380: NOT
23381: IFFALSE 23385
// continue ;
23383: GO 23355
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23385: LD_VAR 0 4
23389: PUSH
23390: LD_INT 1
23392: ARRAY
23393: PPUSH
23394: LD_VAR 0 4
23398: PUSH
23399: LD_INT 2
23401: ARRAY
23402: PPUSH
23403: CALL_OW 428
23407: PUSH
23408: LD_VAR 0 5
23412: IN
23413: IFFALSE 23442
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23415: LD_VAR 0 4
23419: PUSH
23420: LD_INT 1
23422: ARRAY
23423: PPUSH
23424: LD_VAR 0 4
23428: PUSH
23429: LD_INT 2
23431: ARRAY
23432: PPUSH
23433: LD_VAR 0 1
23437: PPUSH
23438: CALL_OW 456
// end ;
23442: GO 23355
23444: POP
23445: POP
// end ;
23446: LD_VAR 0 3
23450: RET
// export function Count ( array ) ; begin
23451: LD_INT 0
23453: PPUSH
// result := array + 0 ;
23454: LD_ADDR_VAR 0 2
23458: PUSH
23459: LD_VAR 0 1
23463: PUSH
23464: LD_INT 0
23466: PLUS
23467: ST_TO_ADDR
// end ;
23468: LD_VAR 0 2
23472: RET
// export function IsEmpty ( building ) ; begin
23473: LD_INT 0
23475: PPUSH
// if not building then
23476: LD_VAR 0 1
23480: NOT
23481: IFFALSE 23485
// exit ;
23483: GO 23528
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23485: LD_ADDR_VAR 0 2
23489: PUSH
23490: LD_VAR 0 1
23494: PUSH
23495: LD_INT 22
23497: PUSH
23498: LD_VAR 0 1
23502: PPUSH
23503: CALL_OW 255
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 58
23514: PUSH
23515: EMPTY
23516: LIST
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PPUSH
23522: CALL_OW 69
23526: IN
23527: ST_TO_ADDR
// end ;
23528: LD_VAR 0 2
23532: RET
// export function IsNotFull ( building ) ; var places ; begin
23533: LD_INT 0
23535: PPUSH
23536: PPUSH
// if not building then
23537: LD_VAR 0 1
23541: NOT
23542: IFFALSE 23546
// exit ;
23544: GO 23574
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23546: LD_ADDR_VAR 0 2
23550: PUSH
23551: LD_VAR 0 1
23555: PPUSH
23556: LD_INT 3
23558: PUSH
23559: LD_INT 62
23561: PUSH
23562: EMPTY
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PPUSH
23569: CALL_OW 72
23573: ST_TO_ADDR
// end ;
23574: LD_VAR 0 2
23578: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23579: LD_INT 0
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
// tmp := [ ] ;
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: EMPTY
23591: ST_TO_ADDR
// list := [ ] ;
23592: LD_ADDR_VAR 0 5
23596: PUSH
23597: EMPTY
23598: ST_TO_ADDR
// for i = 16 to 25 do
23599: LD_ADDR_VAR 0 4
23603: PUSH
23604: DOUBLE
23605: LD_INT 16
23607: DEC
23608: ST_TO_ADDR
23609: LD_INT 25
23611: PUSH
23612: FOR_TO
23613: IFFALSE 23686
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23615: LD_ADDR_VAR 0 3
23619: PUSH
23620: LD_VAR 0 3
23624: PUSH
23625: LD_INT 22
23627: PUSH
23628: LD_VAR 0 1
23632: PPUSH
23633: CALL_OW 255
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 91
23644: PUSH
23645: LD_VAR 0 1
23649: PUSH
23650: LD_INT 6
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 30
23660: PUSH
23661: LD_VAR 0 4
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: PPUSH
23678: CALL_OW 69
23682: ADD
23683: ST_TO_ADDR
23684: GO 23612
23686: POP
23687: POP
// for i = 1 to tmp do
23688: LD_ADDR_VAR 0 4
23692: PUSH
23693: DOUBLE
23694: LD_INT 1
23696: DEC
23697: ST_TO_ADDR
23698: LD_VAR 0 3
23702: PUSH
23703: FOR_TO
23704: IFFALSE 23792
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23706: LD_ADDR_VAR 0 5
23710: PUSH
23711: LD_VAR 0 5
23715: PUSH
23716: LD_VAR 0 3
23720: PUSH
23721: LD_VAR 0 4
23725: ARRAY
23726: PPUSH
23727: CALL_OW 266
23731: PUSH
23732: LD_VAR 0 3
23736: PUSH
23737: LD_VAR 0 4
23741: ARRAY
23742: PPUSH
23743: CALL_OW 250
23747: PUSH
23748: LD_VAR 0 3
23752: PUSH
23753: LD_VAR 0 4
23757: ARRAY
23758: PPUSH
23759: CALL_OW 251
23763: PUSH
23764: LD_VAR 0 3
23768: PUSH
23769: LD_VAR 0 4
23773: ARRAY
23774: PPUSH
23775: CALL_OW 254
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: PUSH
23786: EMPTY
23787: LIST
23788: ADD
23789: ST_TO_ADDR
23790: GO 23703
23792: POP
23793: POP
// result := list ;
23794: LD_ADDR_VAR 0 2
23798: PUSH
23799: LD_VAR 0 5
23803: ST_TO_ADDR
// end ;
23804: LD_VAR 0 2
23808: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23809: LD_INT 0
23811: PPUSH
23812: PPUSH
23813: PPUSH
23814: PPUSH
23815: PPUSH
23816: PPUSH
23817: PPUSH
// if not factory then
23818: LD_VAR 0 1
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 24430
// if control = control_apeman then
23827: LD_VAR 0 4
23831: PUSH
23832: LD_INT 5
23834: EQUAL
23835: IFFALSE 23944
// begin tmp := UnitsInside ( factory ) ;
23837: LD_ADDR_VAR 0 8
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 313
23851: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23852: LD_VAR 0 8
23856: PPUSH
23857: LD_INT 25
23859: PUSH
23860: LD_INT 12
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PPUSH
23867: CALL_OW 72
23871: NOT
23872: IFFALSE 23882
// control := control_manual ;
23874: LD_ADDR_VAR 0 4
23878: PUSH
23879: LD_INT 1
23881: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23882: LD_ADDR_VAR 0 8
23886: PUSH
23887: LD_VAR 0 1
23891: PPUSH
23892: CALL 23579 0 1
23896: ST_TO_ADDR
// if tmp then
23897: LD_VAR 0 8
23901: IFFALSE 23944
// begin for i in tmp do
23903: LD_ADDR_VAR 0 7
23907: PUSH
23908: LD_VAR 0 8
23912: PUSH
23913: FOR_IN
23914: IFFALSE 23942
// if i [ 1 ] = b_ext_radio then
23916: LD_VAR 0 7
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: PUSH
23925: LD_INT 22
23927: EQUAL
23928: IFFALSE 23940
// begin control := control_remote ;
23930: LD_ADDR_VAR 0 4
23934: PUSH
23935: LD_INT 2
23937: ST_TO_ADDR
// break ;
23938: GO 23942
// end ;
23940: GO 23913
23942: POP
23943: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23944: LD_VAR 0 1
23948: PPUSH
23949: LD_VAR 0 2
23953: PPUSH
23954: LD_VAR 0 3
23958: PPUSH
23959: LD_VAR 0 4
23963: PPUSH
23964: LD_VAR 0 5
23968: PPUSH
23969: CALL_OW 448
23973: IFFALSE 24008
// begin result := [ chassis , engine , control , weapon ] ;
23975: LD_ADDR_VAR 0 6
23979: PUSH
23980: LD_VAR 0 2
23984: PUSH
23985: LD_VAR 0 3
23989: PUSH
23990: LD_VAR 0 4
23994: PUSH
23995: LD_VAR 0 5
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: ST_TO_ADDR
// exit ;
24006: GO 24430
// end ; _chassis := AvailableChassisList ( factory ) ;
24008: LD_ADDR_VAR 0 9
24012: PUSH
24013: LD_VAR 0 1
24017: PPUSH
24018: CALL_OW 475
24022: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24023: LD_ADDR_VAR 0 11
24027: PUSH
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 476
24037: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24038: LD_ADDR_VAR 0 12
24042: PUSH
24043: LD_VAR 0 1
24047: PPUSH
24048: CALL_OW 477
24052: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24053: LD_ADDR_VAR 0 10
24057: PUSH
24058: LD_VAR 0 1
24062: PPUSH
24063: CALL_OW 478
24067: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24068: LD_VAR 0 9
24072: NOT
24073: IFTRUE 24082
24075: PUSH
24076: LD_VAR 0 11
24080: NOT
24081: OR
24082: IFTRUE 24091
24084: PUSH
24085: LD_VAR 0 12
24089: NOT
24090: OR
24091: IFTRUE 24100
24093: PUSH
24094: LD_VAR 0 10
24098: NOT
24099: OR
24100: IFFALSE 24135
// begin result := [ chassis , engine , control , weapon ] ;
24102: LD_ADDR_VAR 0 6
24106: PUSH
24107: LD_VAR 0 2
24111: PUSH
24112: LD_VAR 0 3
24116: PUSH
24117: LD_VAR 0 4
24121: PUSH
24122: LD_VAR 0 5
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: ST_TO_ADDR
// exit ;
24133: GO 24430
// end ; if not chassis in _chassis then
24135: LD_VAR 0 2
24139: PUSH
24140: LD_VAR 0 9
24144: IN
24145: NOT
24146: IFFALSE 24172
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24148: LD_ADDR_VAR 0 2
24152: PUSH
24153: LD_VAR 0 9
24157: PUSH
24158: LD_INT 1
24160: PPUSH
24161: LD_VAR 0 9
24165: PPUSH
24166: CALL_OW 12
24170: ARRAY
24171: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_VAR 0 3
24181: PPUSH
24182: CALL 24435 0 2
24186: NOT
24187: IFFALSE 24248
// repeat engine := _engine [ 1 ] ;
24189: LD_ADDR_VAR 0 3
24193: PUSH
24194: LD_VAR 0 11
24198: PUSH
24199: LD_INT 1
24201: ARRAY
24202: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24203: LD_ADDR_VAR 0 11
24207: PUSH
24208: LD_VAR 0 11
24212: PPUSH
24213: LD_INT 1
24215: PPUSH
24216: CALL_OW 3
24220: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24221: LD_VAR 0 2
24225: PPUSH
24226: LD_VAR 0 3
24230: PPUSH
24231: CALL 24435 0 2
24235: IFTRUE 24246
24237: PUSH
24238: LD_VAR 0 11
24242: PUSH
24243: EMPTY
24244: EQUAL
24245: OR
24246: IFFALSE 24189
// if not control in _control then
24248: LD_VAR 0 4
24252: PUSH
24253: LD_VAR 0 12
24257: IN
24258: NOT
24259: IFFALSE 24285
// control := _control [ rand ( 1 , _control ) ] ;
24261: LD_ADDR_VAR 0 4
24265: PUSH
24266: LD_VAR 0 12
24270: PUSH
24271: LD_INT 1
24273: PPUSH
24274: LD_VAR 0 12
24278: PPUSH
24279: CALL_OW 12
24283: ARRAY
24284: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24285: LD_VAR 0 2
24289: PPUSH
24290: LD_VAR 0 5
24294: PPUSH
24295: CALL 24657 0 2
24299: NOT
24300: IFFALSE 24361
// repeat weapon := _weapon [ 1 ] ;
24302: LD_ADDR_VAR 0 5
24306: PUSH
24307: LD_VAR 0 10
24311: PUSH
24312: LD_INT 1
24314: ARRAY
24315: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24316: LD_ADDR_VAR 0 10
24320: PUSH
24321: LD_VAR 0 10
24325: PPUSH
24326: LD_INT 1
24328: PPUSH
24329: CALL_OW 3
24333: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24334: LD_VAR 0 2
24338: PPUSH
24339: LD_VAR 0 5
24343: PPUSH
24344: CALL 24657 0 2
24348: IFTRUE 24359
24350: PUSH
24351: LD_VAR 0 10
24355: PUSH
24356: EMPTY
24357: EQUAL
24358: OR
24359: IFFALSE 24302
// result := [ ] ;
24361: LD_ADDR_VAR 0 6
24365: PUSH
24366: EMPTY
24367: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24368: LD_VAR 0 1
24372: PPUSH
24373: LD_VAR 0 2
24377: PPUSH
24378: LD_VAR 0 3
24382: PPUSH
24383: LD_VAR 0 4
24387: PPUSH
24388: LD_VAR 0 5
24392: PPUSH
24393: CALL_OW 448
24397: IFFALSE 24430
// result := [ chassis , engine , control , weapon ] ;
24399: LD_ADDR_VAR 0 6
24403: PUSH
24404: LD_VAR 0 2
24408: PUSH
24409: LD_VAR 0 3
24413: PUSH
24414: LD_VAR 0 4
24418: PUSH
24419: LD_VAR 0 5
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: ST_TO_ADDR
// end ;
24430: LD_VAR 0 6
24434: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24435: LD_INT 0
24437: PPUSH
// if not chassis or not engine then
24438: LD_VAR 0 1
24442: NOT
24443: IFTRUE 24452
24445: PUSH
24446: LD_VAR 0 2
24450: NOT
24451: OR
24452: IFFALSE 24456
// exit ;
24454: GO 24652
// case engine of engine_solar :
24456: LD_VAR 0 2
24460: PUSH
24461: LD_INT 2
24463: DOUBLE
24464: EQUAL
24465: IFTRUE 24469
24467: GO 24507
24469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24470: LD_ADDR_VAR 0 3
24474: PUSH
24475: LD_INT 11
24477: PUSH
24478: LD_INT 12
24480: PUSH
24481: LD_INT 13
24483: PUSH
24484: LD_INT 14
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 3
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: ST_TO_ADDR
24505: GO 24636
24507: LD_INT 1
24509: DOUBLE
24510: EQUAL
24511: IFTRUE 24515
24513: GO 24577
24515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24516: LD_ADDR_VAR 0 3
24520: PUSH
24521: LD_INT 11
24523: PUSH
24524: LD_INT 12
24526: PUSH
24527: LD_INT 13
24529: PUSH
24530: LD_INT 14
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: LD_INT 3
24541: PUSH
24542: LD_INT 4
24544: PUSH
24545: LD_INT 5
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 23
24553: PUSH
24554: LD_INT 22
24556: PUSH
24557: LD_INT 24
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 24636
24577: LD_INT 3
24579: DOUBLE
24580: EQUAL
24581: IFTRUE 24585
24583: GO 24635
24585: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24586: LD_ADDR_VAR 0 3
24590: PUSH
24591: LD_INT 13
24593: PUSH
24594: LD_INT 14
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 3
24602: PUSH
24603: LD_INT 4
24605: PUSH
24606: LD_INT 5
24608: PUSH
24609: LD_INT 21
24611: PUSH
24612: LD_INT 22
24614: PUSH
24615: LD_INT 23
24617: PUSH
24618: LD_INT 24
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: ST_TO_ADDR
24633: GO 24636
24635: POP
// result := ( chassis in result ) ;
24636: LD_ADDR_VAR 0 3
24640: PUSH
24641: LD_VAR 0 1
24645: PUSH
24646: LD_VAR 0 3
24650: IN
24651: ST_TO_ADDR
// end ;
24652: LD_VAR 0 3
24656: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24657: LD_INT 0
24659: PPUSH
// if not chassis or not weapon then
24660: LD_VAR 0 1
24664: NOT
24665: IFTRUE 24674
24667: PUSH
24668: LD_VAR 0 2
24672: NOT
24673: OR
24674: IFFALSE 24678
// exit ;
24676: GO 25772
// case weapon of us_machine_gun :
24678: LD_VAR 0 2
24682: PUSH
24683: LD_INT 2
24685: DOUBLE
24686: EQUAL
24687: IFTRUE 24691
24689: GO 24721
24691: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24692: LD_ADDR_VAR 0 3
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: LD_INT 3
24705: PUSH
24706: LD_INT 4
24708: PUSH
24709: LD_INT 5
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: ST_TO_ADDR
24719: GO 25756
24721: LD_INT 3
24723: DOUBLE
24724: EQUAL
24725: IFTRUE 24729
24727: GO 24759
24729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: LD_INT 3
24743: PUSH
24744: LD_INT 4
24746: PUSH
24747: LD_INT 5
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: ST_TO_ADDR
24757: GO 25756
24759: LD_INT 11
24761: DOUBLE
24762: EQUAL
24763: IFTRUE 24767
24765: GO 24797
24767: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24768: LD_ADDR_VAR 0 3
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 3
24781: PUSH
24782: LD_INT 4
24784: PUSH
24785: LD_INT 5
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: ST_TO_ADDR
24795: GO 25756
24797: LD_INT 4
24799: DOUBLE
24800: EQUAL
24801: IFTRUE 24805
24803: GO 24831
24805: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24806: LD_ADDR_VAR 0 3
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: LD_INT 4
24819: PUSH
24820: LD_INT 5
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: ST_TO_ADDR
24829: GO 25756
24831: LD_INT 5
24833: DOUBLE
24834: EQUAL
24835: IFTRUE 24839
24837: GO 24865
24839: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24840: LD_ADDR_VAR 0 3
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: LD_INT 3
24850: PUSH
24851: LD_INT 4
24853: PUSH
24854: LD_INT 5
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: ST_TO_ADDR
24863: GO 25756
24865: LD_INT 9
24867: DOUBLE
24868: EQUAL
24869: IFTRUE 24873
24871: GO 24899
24873: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24874: LD_ADDR_VAR 0 3
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: LD_INT 3
24884: PUSH
24885: LD_INT 4
24887: PUSH
24888: LD_INT 5
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: ST_TO_ADDR
24897: GO 25756
24899: LD_INT 7
24901: DOUBLE
24902: EQUAL
24903: IFTRUE 24907
24905: GO 24933
24907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24908: LD_ADDR_VAR 0 3
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: LD_INT 3
24918: PUSH
24919: LD_INT 4
24921: PUSH
24922: LD_INT 5
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: ST_TO_ADDR
24931: GO 25756
24933: LD_INT 12
24935: DOUBLE
24936: EQUAL
24937: IFTRUE 24941
24939: GO 24967
24941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: LD_INT 3
24952: PUSH
24953: LD_INT 4
24955: PUSH
24956: LD_INT 5
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: ST_TO_ADDR
24965: GO 25756
24967: LD_INT 13
24969: DOUBLE
24970: EQUAL
24971: IFTRUE 24975
24973: GO 25001
24975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24976: LD_ADDR_VAR 0 3
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 3
24986: PUSH
24987: LD_INT 4
24989: PUSH
24990: LD_INT 5
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: ST_TO_ADDR
24999: GO 25756
25001: LD_INT 14
25003: DOUBLE
25004: EQUAL
25005: IFTRUE 25009
25007: GO 25027
25009: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25010: LD_ADDR_VAR 0 3
25014: PUSH
25015: LD_INT 4
25017: PUSH
25018: LD_INT 5
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: ST_TO_ADDR
25025: GO 25756
25027: LD_INT 6
25029: DOUBLE
25030: EQUAL
25031: IFTRUE 25035
25033: GO 25053
25035: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25036: LD_ADDR_VAR 0 3
25040: PUSH
25041: LD_INT 4
25043: PUSH
25044: LD_INT 5
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: ST_TO_ADDR
25051: GO 25756
25053: LD_INT 10
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25079
25061: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25062: LD_ADDR_VAR 0 3
25066: PUSH
25067: LD_INT 4
25069: PUSH
25070: LD_INT 5
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: ST_TO_ADDR
25077: GO 25756
25079: LD_INT 22
25081: DOUBLE
25082: EQUAL
25083: IFTRUE 25087
25085: GO 25113
25087: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25088: LD_ADDR_VAR 0 3
25092: PUSH
25093: LD_INT 11
25095: PUSH
25096: LD_INT 12
25098: PUSH
25099: LD_INT 13
25101: PUSH
25102: LD_INT 14
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: ST_TO_ADDR
25111: GO 25756
25113: LD_INT 23
25115: DOUBLE
25116: EQUAL
25117: IFTRUE 25121
25119: GO 25147
25121: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25122: LD_ADDR_VAR 0 3
25126: PUSH
25127: LD_INT 11
25129: PUSH
25130: LD_INT 12
25132: PUSH
25133: LD_INT 13
25135: PUSH
25136: LD_INT 14
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: ST_TO_ADDR
25145: GO 25756
25147: LD_INT 24
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25181
25155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25156: LD_ADDR_VAR 0 3
25160: PUSH
25161: LD_INT 11
25163: PUSH
25164: LD_INT 12
25166: PUSH
25167: LD_INT 13
25169: PUSH
25170: LD_INT 14
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: ST_TO_ADDR
25179: GO 25756
25181: LD_INT 30
25183: DOUBLE
25184: EQUAL
25185: IFTRUE 25189
25187: GO 25215
25189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25190: LD_ADDR_VAR 0 3
25194: PUSH
25195: LD_INT 11
25197: PUSH
25198: LD_INT 12
25200: PUSH
25201: LD_INT 13
25203: PUSH
25204: LD_INT 14
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: ST_TO_ADDR
25213: GO 25756
25215: LD_INT 25
25217: DOUBLE
25218: EQUAL
25219: IFTRUE 25223
25221: GO 25241
25223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_INT 13
25231: PUSH
25232: LD_INT 14
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: ST_TO_ADDR
25239: GO 25756
25241: LD_INT 27
25243: DOUBLE
25244: EQUAL
25245: IFTRUE 25249
25247: GO 25267
25249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25250: LD_ADDR_VAR 0 3
25254: PUSH
25255: LD_INT 13
25257: PUSH
25258: LD_INT 14
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: ST_TO_ADDR
25265: GO 25756
25267: LD_INT 92
25269: DOUBLE
25270: EQUAL
25271: IFTRUE 25275
25273: GO 25301
25275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_INT 11
25283: PUSH
25284: LD_INT 12
25286: PUSH
25287: LD_INT 13
25289: PUSH
25290: LD_INT 14
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: ST_TO_ADDR
25299: GO 25756
25301: LD_INT 28
25303: DOUBLE
25304: EQUAL
25305: IFTRUE 25309
25307: GO 25327
25309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25310: LD_ADDR_VAR 0 3
25314: PUSH
25315: LD_INT 13
25317: PUSH
25318: LD_INT 14
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: ST_TO_ADDR
25325: GO 25756
25327: LD_INT 29
25329: DOUBLE
25330: EQUAL
25331: IFTRUE 25335
25333: GO 25353
25335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25336: LD_ADDR_VAR 0 3
25340: PUSH
25341: LD_INT 13
25343: PUSH
25344: LD_INT 14
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: ST_TO_ADDR
25351: GO 25756
25353: LD_INT 31
25355: DOUBLE
25356: EQUAL
25357: IFTRUE 25361
25359: GO 25379
25361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25362: LD_ADDR_VAR 0 3
25366: PUSH
25367: LD_INT 13
25369: PUSH
25370: LD_INT 14
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: ST_TO_ADDR
25377: GO 25756
25379: LD_INT 26
25381: DOUBLE
25382: EQUAL
25383: IFTRUE 25387
25385: GO 25405
25387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25388: LD_ADDR_VAR 0 3
25392: PUSH
25393: LD_INT 13
25395: PUSH
25396: LD_INT 14
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: ST_TO_ADDR
25403: GO 25756
25405: LD_INT 42
25407: DOUBLE
25408: EQUAL
25409: IFTRUE 25413
25411: GO 25439
25413: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_INT 21
25421: PUSH
25422: LD_INT 22
25424: PUSH
25425: LD_INT 23
25427: PUSH
25428: LD_INT 24
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: ST_TO_ADDR
25437: GO 25756
25439: LD_INT 43
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25473
25447: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_INT 21
25455: PUSH
25456: LD_INT 22
25458: PUSH
25459: LD_INT 23
25461: PUSH
25462: LD_INT 24
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: ST_TO_ADDR
25471: GO 25756
25473: LD_INT 44
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25507
25481: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_INT 21
25489: PUSH
25490: LD_INT 22
25492: PUSH
25493: LD_INT 23
25495: PUSH
25496: LD_INT 24
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: ST_TO_ADDR
25505: GO 25756
25507: LD_INT 45
25509: DOUBLE
25510: EQUAL
25511: IFTRUE 25515
25513: GO 25541
25515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25516: LD_ADDR_VAR 0 3
25520: PUSH
25521: LD_INT 21
25523: PUSH
25524: LD_INT 22
25526: PUSH
25527: LD_INT 23
25529: PUSH
25530: LD_INT 24
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: ST_TO_ADDR
25539: GO 25756
25541: LD_INT 49
25543: DOUBLE
25544: EQUAL
25545: IFTRUE 25549
25547: GO 25575
25549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25550: LD_ADDR_VAR 0 3
25554: PUSH
25555: LD_INT 21
25557: PUSH
25558: LD_INT 22
25560: PUSH
25561: LD_INT 23
25563: PUSH
25564: LD_INT 24
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: ST_TO_ADDR
25573: GO 25756
25575: LD_INT 51
25577: DOUBLE
25578: EQUAL
25579: IFTRUE 25583
25581: GO 25609
25583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25584: LD_ADDR_VAR 0 3
25588: PUSH
25589: LD_INT 21
25591: PUSH
25592: LD_INT 22
25594: PUSH
25595: LD_INT 23
25597: PUSH
25598: LD_INT 24
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: ST_TO_ADDR
25607: GO 25756
25609: LD_INT 52
25611: DOUBLE
25612: EQUAL
25613: IFTRUE 25617
25615: GO 25643
25617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25618: LD_ADDR_VAR 0 3
25622: PUSH
25623: LD_INT 21
25625: PUSH
25626: LD_INT 22
25628: PUSH
25629: LD_INT 23
25631: PUSH
25632: LD_INT 24
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: ST_TO_ADDR
25641: GO 25756
25643: LD_INT 53
25645: DOUBLE
25646: EQUAL
25647: IFTRUE 25651
25649: GO 25669
25651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25652: LD_ADDR_VAR 0 3
25656: PUSH
25657: LD_INT 23
25659: PUSH
25660: LD_INT 24
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: ST_TO_ADDR
25667: GO 25756
25669: LD_INT 46
25671: DOUBLE
25672: EQUAL
25673: IFTRUE 25677
25675: GO 25695
25677: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 23
25685: PUSH
25686: LD_INT 24
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: ST_TO_ADDR
25693: GO 25756
25695: LD_INT 47
25697: DOUBLE
25698: EQUAL
25699: IFTRUE 25703
25701: GO 25721
25703: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
25704: LD_ADDR_VAR 0 3
25708: PUSH
25709: LD_INT 23
25711: PUSH
25712: LD_INT 24
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: ST_TO_ADDR
25719: GO 25756
25721: LD_INT 98
25723: DOUBLE
25724: EQUAL
25725: IFTRUE 25729
25727: GO 25755
25729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25730: LD_ADDR_VAR 0 3
25734: PUSH
25735: LD_INT 21
25737: PUSH
25738: LD_INT 22
25740: PUSH
25741: LD_INT 23
25743: PUSH
25744: LD_INT 24
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: ST_TO_ADDR
25753: GO 25756
25755: POP
// result := ( chassis in result ) ;
25756: LD_ADDR_VAR 0 3
25760: PUSH
25761: LD_VAR 0 1
25765: PUSH
25766: LD_VAR 0 3
25770: IN
25771: ST_TO_ADDR
// end ;
25772: LD_VAR 0 3
25776: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
25783: PPUSH
25784: PPUSH
25785: PPUSH
// result := array ;
25786: LD_ADDR_VAR 0 5
25790: PUSH
25791: LD_VAR 0 1
25795: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25796: LD_VAR 0 1
25800: NOT
25801: IFTRUE 25810
25803: PUSH
25804: LD_VAR 0 2
25808: NOT
25809: OR
25810: IFTRUE 25819
25812: PUSH
25813: LD_VAR 0 3
25817: NOT
25818: OR
25819: IFTRUE 25833
25821: PUSH
25822: LD_VAR 0 2
25826: PUSH
25827: LD_VAR 0 1
25831: GREATER
25832: OR
25833: IFTRUE 25847
25835: PUSH
25836: LD_VAR 0 3
25840: PUSH
25841: LD_VAR 0 1
25845: GREATER
25846: OR
25847: IFFALSE 25851
// exit ;
25849: GO 26147
// if direction then
25851: LD_VAR 0 4
25855: IFFALSE 25919
// begin d := 1 ;
25857: LD_ADDR_VAR 0 9
25861: PUSH
25862: LD_INT 1
25864: ST_TO_ADDR
// if i_from > i_to then
25865: LD_VAR 0 2
25869: PUSH
25870: LD_VAR 0 3
25874: GREATER
25875: IFFALSE 25901
// length := ( array - i_from ) + i_to else
25877: LD_ADDR_VAR 0 11
25881: PUSH
25882: LD_VAR 0 1
25886: PUSH
25887: LD_VAR 0 2
25891: MINUS
25892: PUSH
25893: LD_VAR 0 3
25897: PLUS
25898: ST_TO_ADDR
25899: GO 25917
// length := i_to - i_from ;
25901: LD_ADDR_VAR 0 11
25905: PUSH
25906: LD_VAR 0 3
25910: PUSH
25911: LD_VAR 0 2
25915: MINUS
25916: ST_TO_ADDR
// end else
25917: GO 25980
// begin d := - 1 ;
25919: LD_ADDR_VAR 0 9
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: ST_TO_ADDR
// if i_from > i_to then
25928: LD_VAR 0 2
25932: PUSH
25933: LD_VAR 0 3
25937: GREATER
25938: IFFALSE 25958
// length := i_from - i_to else
25940: LD_ADDR_VAR 0 11
25944: PUSH
25945: LD_VAR 0 2
25949: PUSH
25950: LD_VAR 0 3
25954: MINUS
25955: ST_TO_ADDR
25956: GO 25980
// length := ( array - i_to ) + i_from ;
25958: LD_ADDR_VAR 0 11
25962: PUSH
25963: LD_VAR 0 1
25967: PUSH
25968: LD_VAR 0 3
25972: MINUS
25973: PUSH
25974: LD_VAR 0 2
25978: PLUS
25979: ST_TO_ADDR
// end ; if not length then
25980: LD_VAR 0 11
25984: NOT
25985: IFFALSE 25989
// exit ;
25987: GO 26147
// tmp := array ;
25989: LD_ADDR_VAR 0 10
25993: PUSH
25994: LD_VAR 0 1
25998: ST_TO_ADDR
// for i = 1 to length do
25999: LD_ADDR_VAR 0 6
26003: PUSH
26004: DOUBLE
26005: LD_INT 1
26007: DEC
26008: ST_TO_ADDR
26009: LD_VAR 0 11
26013: PUSH
26014: FOR_TO
26015: IFFALSE 26135
// begin for j = 1 to array do
26017: LD_ADDR_VAR 0 7
26021: PUSH
26022: DOUBLE
26023: LD_INT 1
26025: DEC
26026: ST_TO_ADDR
26027: LD_VAR 0 1
26031: PUSH
26032: FOR_TO
26033: IFFALSE 26121
// begin k := j + d ;
26035: LD_ADDR_VAR 0 8
26039: PUSH
26040: LD_VAR 0 7
26044: PUSH
26045: LD_VAR 0 9
26049: PLUS
26050: ST_TO_ADDR
// if k > array then
26051: LD_VAR 0 8
26055: PUSH
26056: LD_VAR 0 1
26060: GREATER
26061: IFFALSE 26071
// k := 1 ;
26063: LD_ADDR_VAR 0 8
26067: PUSH
26068: LD_INT 1
26070: ST_TO_ADDR
// if not k then
26071: LD_VAR 0 8
26075: NOT
26076: IFFALSE 26088
// k := array ;
26078: LD_ADDR_VAR 0 8
26082: PUSH
26083: LD_VAR 0 1
26087: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26088: LD_ADDR_VAR 0 10
26092: PUSH
26093: LD_VAR 0 10
26097: PPUSH
26098: LD_VAR 0 8
26102: PPUSH
26103: LD_VAR 0 1
26107: PUSH
26108: LD_VAR 0 7
26112: ARRAY
26113: PPUSH
26114: CALL_OW 1
26118: ST_TO_ADDR
// end ;
26119: GO 26032
26121: POP
26122: POP
// array := tmp ;
26123: LD_ADDR_VAR 0 1
26127: PUSH
26128: LD_VAR 0 10
26132: ST_TO_ADDR
// end ;
26133: GO 26014
26135: POP
26136: POP
// result := array ;
26137: LD_ADDR_VAR 0 5
26141: PUSH
26142: LD_VAR 0 1
26146: ST_TO_ADDR
// end ;
26147: LD_VAR 0 5
26151: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26152: LD_INT 0
26154: PPUSH
26155: PPUSH
// result := 0 ;
26156: LD_ADDR_VAR 0 3
26160: PUSH
26161: LD_INT 0
26163: ST_TO_ADDR
// if not array or not value in array then
26164: LD_VAR 0 1
26168: NOT
26169: IFTRUE 26184
26171: PUSH
26172: LD_VAR 0 2
26176: PUSH
26177: LD_VAR 0 1
26181: IN
26182: NOT
26183: OR
26184: IFFALSE 26188
// exit ;
26186: GO 26242
// for i = 1 to array do
26188: LD_ADDR_VAR 0 4
26192: PUSH
26193: DOUBLE
26194: LD_INT 1
26196: DEC
26197: ST_TO_ADDR
26198: LD_VAR 0 1
26202: PUSH
26203: FOR_TO
26204: IFFALSE 26240
// if value = array [ i ] then
26206: LD_VAR 0 2
26210: PUSH
26211: LD_VAR 0 1
26215: PUSH
26216: LD_VAR 0 4
26220: ARRAY
26221: EQUAL
26222: IFFALSE 26238
// begin result := i ;
26224: LD_ADDR_VAR 0 3
26228: PUSH
26229: LD_VAR 0 4
26233: ST_TO_ADDR
// exit ;
26234: POP
26235: POP
26236: GO 26242
// end ;
26238: GO 26203
26240: POP
26241: POP
// end ;
26242: LD_VAR 0 3
26246: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26247: LD_INT 0
26249: PPUSH
// vc_chassis := chassis ;
26250: LD_ADDR_OWVAR 37
26254: PUSH
26255: LD_VAR 0 1
26259: ST_TO_ADDR
// vc_engine := engine ;
26260: LD_ADDR_OWVAR 39
26264: PUSH
26265: LD_VAR 0 2
26269: ST_TO_ADDR
// vc_control := control ;
26270: LD_ADDR_OWVAR 38
26274: PUSH
26275: LD_VAR 0 3
26279: ST_TO_ADDR
// vc_weapon := weapon ;
26280: LD_ADDR_OWVAR 40
26284: PUSH
26285: LD_VAR 0 4
26289: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26290: LD_ADDR_OWVAR 41
26294: PUSH
26295: LD_VAR 0 5
26299: ST_TO_ADDR
// end ;
26300: LD_VAR 0 6
26304: RET
// export function WantPlant ( unit ) ; var task ; begin
26305: LD_INT 0
26307: PPUSH
26308: PPUSH
// result := false ;
26309: LD_ADDR_VAR 0 2
26313: PUSH
26314: LD_INT 0
26316: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26317: LD_ADDR_VAR 0 3
26321: PUSH
26322: LD_VAR 0 1
26326: PPUSH
26327: CALL_OW 437
26331: ST_TO_ADDR
// if task then
26332: LD_VAR 0 3
26336: IFFALSE 26364
// if task [ 1 ] [ 1 ] = p then
26338: LD_VAR 0 3
26342: PUSH
26343: LD_INT 1
26345: ARRAY
26346: PUSH
26347: LD_INT 1
26349: ARRAY
26350: PUSH
26351: LD_STRING p
26353: EQUAL
26354: IFFALSE 26364
// result := true ;
26356: LD_ADDR_VAR 0 2
26360: PUSH
26361: LD_INT 1
26363: ST_TO_ADDR
// end ;
26364: LD_VAR 0 2
26368: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26369: LD_INT 0
26371: PPUSH
26372: PPUSH
26373: PPUSH
26374: PPUSH
// if pos < 1 then
26375: LD_VAR 0 2
26379: PUSH
26380: LD_INT 1
26382: LESS
26383: IFFALSE 26387
// exit ;
26385: GO 26690
// if pos = 1 then
26387: LD_VAR 0 2
26391: PUSH
26392: LD_INT 1
26394: EQUAL
26395: IFFALSE 26428
// result := Replace ( arr , pos [ 1 ] , value ) else
26397: LD_ADDR_VAR 0 4
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: LD_VAR 0 2
26411: PUSH
26412: LD_INT 1
26414: ARRAY
26415: PPUSH
26416: LD_VAR 0 3
26420: PPUSH
26421: CALL_OW 1
26425: ST_TO_ADDR
26426: GO 26690
// begin tmp := arr ;
26428: LD_ADDR_VAR 0 6
26432: PUSH
26433: LD_VAR 0 1
26437: ST_TO_ADDR
// s_arr := [ tmp ] ;
26438: LD_ADDR_VAR 0 7
26442: PUSH
26443: LD_VAR 0 6
26447: PUSH
26448: EMPTY
26449: LIST
26450: ST_TO_ADDR
// for i = 1 to pos - 1 do
26451: LD_ADDR_VAR 0 5
26455: PUSH
26456: DOUBLE
26457: LD_INT 1
26459: DEC
26460: ST_TO_ADDR
26461: LD_VAR 0 2
26465: PUSH
26466: LD_INT 1
26468: MINUS
26469: PUSH
26470: FOR_TO
26471: IFFALSE 26516
// begin tmp := tmp [ pos [ i ] ] ;
26473: LD_ADDR_VAR 0 6
26477: PUSH
26478: LD_VAR 0 6
26482: PUSH
26483: LD_VAR 0 2
26487: PUSH
26488: LD_VAR 0 5
26492: ARRAY
26493: ARRAY
26494: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26495: LD_ADDR_VAR 0 7
26499: PUSH
26500: LD_VAR 0 7
26504: PUSH
26505: LD_VAR 0 6
26509: PUSH
26510: EMPTY
26511: LIST
26512: ADD
26513: ST_TO_ADDR
// end ;
26514: GO 26470
26516: POP
26517: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26518: LD_ADDR_VAR 0 6
26522: PUSH
26523: LD_VAR 0 6
26527: PPUSH
26528: LD_VAR 0 2
26532: PUSH
26533: LD_VAR 0 2
26537: ARRAY
26538: PPUSH
26539: LD_VAR 0 3
26543: PPUSH
26544: CALL_OW 1
26548: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26549: LD_ADDR_VAR 0 7
26553: PUSH
26554: LD_VAR 0 7
26558: PPUSH
26559: LD_VAR 0 7
26563: PPUSH
26564: LD_VAR 0 6
26568: PPUSH
26569: CALL_OW 1
26573: ST_TO_ADDR
// for i = s_arr downto 2 do
26574: LD_ADDR_VAR 0 5
26578: PUSH
26579: DOUBLE
26580: LD_VAR 0 7
26584: INC
26585: ST_TO_ADDR
26586: LD_INT 2
26588: PUSH
26589: FOR_DOWNTO
26590: IFFALSE 26674
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26592: LD_ADDR_VAR 0 6
26596: PUSH
26597: LD_VAR 0 7
26601: PUSH
26602: LD_VAR 0 5
26606: PUSH
26607: LD_INT 1
26609: MINUS
26610: ARRAY
26611: PPUSH
26612: LD_VAR 0 2
26616: PUSH
26617: LD_VAR 0 5
26621: PUSH
26622: LD_INT 1
26624: MINUS
26625: ARRAY
26626: PPUSH
26627: LD_VAR 0 7
26631: PUSH
26632: LD_VAR 0 5
26636: ARRAY
26637: PPUSH
26638: CALL_OW 1
26642: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26643: LD_ADDR_VAR 0 7
26647: PUSH
26648: LD_VAR 0 7
26652: PPUSH
26653: LD_VAR 0 5
26657: PUSH
26658: LD_INT 1
26660: MINUS
26661: PPUSH
26662: LD_VAR 0 6
26666: PPUSH
26667: CALL_OW 1
26671: ST_TO_ADDR
// end ;
26672: GO 26589
26674: POP
26675: POP
// result := s_arr [ 1 ] ;
26676: LD_ADDR_VAR 0 4
26680: PUSH
26681: LD_VAR 0 7
26685: PUSH
26686: LD_INT 1
26688: ARRAY
26689: ST_TO_ADDR
// end ; end ;
26690: LD_VAR 0 4
26694: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26695: LD_INT 0
26697: PPUSH
26698: PPUSH
// if not list then
26699: LD_VAR 0 1
26703: NOT
26704: IFFALSE 26708
// exit ;
26706: GO 26799
// i := list [ pos1 ] ;
26708: LD_ADDR_VAR 0 5
26712: PUSH
26713: LD_VAR 0 1
26717: PUSH
26718: LD_VAR 0 2
26722: ARRAY
26723: ST_TO_ADDR
// if not i then
26724: LD_VAR 0 5
26728: NOT
26729: IFFALSE 26733
// exit ;
26731: GO 26799
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26733: LD_ADDR_VAR 0 1
26737: PUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: LD_VAR 0 2
26747: PPUSH
26748: LD_VAR 0 1
26752: PUSH
26753: LD_VAR 0 3
26757: ARRAY
26758: PPUSH
26759: CALL_OW 1
26763: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26764: LD_ADDR_VAR 0 1
26768: PUSH
26769: LD_VAR 0 1
26773: PPUSH
26774: LD_VAR 0 3
26778: PPUSH
26779: LD_VAR 0 5
26783: PPUSH
26784: CALL_OW 1
26788: ST_TO_ADDR
// result := list ;
26789: LD_ADDR_VAR 0 4
26793: PUSH
26794: LD_VAR 0 1
26798: ST_TO_ADDR
// end ;
26799: LD_VAR 0 4
26803: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26804: LD_INT 0
26806: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26807: LD_ADDR_VAR 0 5
26811: PUSH
26812: LD_VAR 0 1
26816: PPUSH
26817: CALL_OW 250
26821: PPUSH
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 251
26831: PPUSH
26832: LD_VAR 0 2
26836: PPUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: LD_VAR 0 4
26846: PPUSH
26847: CALL 27229 0 5
26851: ST_TO_ADDR
// end ;
26852: LD_VAR 0 5
26856: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26857: LD_INT 0
26859: PPUSH
26860: PPUSH
26861: PPUSH
26862: PPUSH
// if not list or not unit then
26863: LD_VAR 0 2
26867: NOT
26868: IFTRUE 26877
26870: PUSH
26871: LD_VAR 0 1
26875: NOT
26876: OR
26877: IFFALSE 26881
// exit ;
26879: GO 27224
// result := [ ] ;
26881: LD_ADDR_VAR 0 5
26885: PUSH
26886: EMPTY
26887: ST_TO_ADDR
// for i in list do
26888: LD_ADDR_VAR 0 6
26892: PUSH
26893: LD_VAR 0 2
26897: PUSH
26898: FOR_IN
26899: IFFALSE 27117
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26901: LD_ADDR_VAR 0 8
26905: PUSH
26906: LD_VAR 0 1
26910: PPUSH
26911: LD_VAR 0 6
26915: PUSH
26916: LD_INT 1
26918: ARRAY
26919: PPUSH
26920: LD_VAR 0 6
26924: PUSH
26925: LD_INT 2
26927: ARRAY
26928: PPUSH
26929: CALL_OW 297
26933: ST_TO_ADDR
// if not Count ( result ) then
26934: LD_VAR 0 5
26938: PPUSH
26939: CALL 23451 0 1
26943: NOT
26944: IFFALSE 26977
// begin result := Join ( result , [ i , tmp ] ) ;
26946: LD_ADDR_VAR 0 5
26950: PUSH
26951: LD_VAR 0 5
26955: PPUSH
26956: LD_VAR 0 6
26960: PUSH
26961: LD_VAR 0 8
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PPUSH
26970: CALL 59427 0 2
26974: ST_TO_ADDR
// continue ;
26975: GO 26898
// end ; if result [ result ] [ 2 ] <= tmp then
26977: LD_VAR 0 5
26981: PUSH
26982: LD_VAR 0 5
26986: ARRAY
26987: PUSH
26988: LD_INT 2
26990: ARRAY
26991: PUSH
26992: LD_VAR 0 8
26996: LESSEQUAL
26997: IFFALSE 27030
// result := Join ( result , [ i , tmp ] ) else
26999: LD_ADDR_VAR 0 5
27003: PUSH
27004: LD_VAR 0 5
27008: PPUSH
27009: LD_VAR 0 6
27013: PUSH
27014: LD_VAR 0 8
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PPUSH
27023: CALL 59427 0 2
27027: ST_TO_ADDR
27028: GO 27115
// begin for j := 1 to Count ( result ) do
27030: LD_ADDR_VAR 0 7
27034: PUSH
27035: DOUBLE
27036: LD_INT 1
27038: DEC
27039: ST_TO_ADDR
27040: LD_VAR 0 5
27044: PPUSH
27045: CALL 23451 0 1
27049: PUSH
27050: FOR_TO
27051: IFFALSE 27113
// begin if tmp < result [ j ] [ 2 ] then
27053: LD_VAR 0 8
27057: PUSH
27058: LD_VAR 0 5
27062: PUSH
27063: LD_VAR 0 7
27067: ARRAY
27068: PUSH
27069: LD_INT 2
27071: ARRAY
27072: LESS
27073: IFFALSE 27111
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27075: LD_ADDR_VAR 0 5
27079: PUSH
27080: LD_VAR 0 5
27084: PPUSH
27085: LD_VAR 0 7
27089: PPUSH
27090: LD_VAR 0 6
27094: PUSH
27095: LD_VAR 0 8
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 2
27108: ST_TO_ADDR
// break ;
27109: GO 27113
// end ; end ;
27111: GO 27050
27113: POP
27114: POP
// end ; end ;
27115: GO 26898
27117: POP
27118: POP
// if result and not asc then
27119: LD_VAR 0 5
27123: IFFALSE 27132
27125: PUSH
27126: LD_VAR 0 3
27130: NOT
27131: AND
27132: IFFALSE 27149
// result := ReverseArray ( result ) ;
27134: LD_ADDR_VAR 0 5
27138: PUSH
27139: LD_VAR 0 5
27143: PPUSH
27144: CALL 54507 0 1
27148: ST_TO_ADDR
// tmp := [ ] ;
27149: LD_ADDR_VAR 0 8
27153: PUSH
27154: EMPTY
27155: ST_TO_ADDR
// if mode then
27156: LD_VAR 0 4
27160: IFFALSE 27224
// begin for i := 1 to result do
27162: LD_ADDR_VAR 0 6
27166: PUSH
27167: DOUBLE
27168: LD_INT 1
27170: DEC
27171: ST_TO_ADDR
27172: LD_VAR 0 5
27176: PUSH
27177: FOR_TO
27178: IFFALSE 27212
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27180: LD_ADDR_VAR 0 8
27184: PUSH
27185: LD_VAR 0 8
27189: PPUSH
27190: LD_VAR 0 5
27194: PUSH
27195: LD_VAR 0 6
27199: ARRAY
27200: PUSH
27201: LD_INT 1
27203: ARRAY
27204: PPUSH
27205: CALL 59427 0 2
27209: ST_TO_ADDR
27210: GO 27177
27212: POP
27213: POP
// result := tmp ;
27214: LD_ADDR_VAR 0 5
27218: PUSH
27219: LD_VAR 0 8
27223: ST_TO_ADDR
// end ; end ;
27224: LD_VAR 0 5
27228: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
// if not list then
27235: LD_VAR 0 3
27239: NOT
27240: IFFALSE 27244
// exit ;
27242: GO 27634
// result := [ ] ;
27244: LD_ADDR_VAR 0 6
27248: PUSH
27249: EMPTY
27250: ST_TO_ADDR
// for i in list do
27251: LD_ADDR_VAR 0 7
27255: PUSH
27256: LD_VAR 0 3
27260: PUSH
27261: FOR_IN
27262: IFFALSE 27464
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27264: LD_ADDR_VAR 0 9
27268: PUSH
27269: LD_VAR 0 7
27273: PPUSH
27274: LD_VAR 0 1
27278: PPUSH
27279: LD_VAR 0 2
27283: PPUSH
27284: CALL_OW 297
27288: ST_TO_ADDR
// if not result then
27289: LD_VAR 0 6
27293: NOT
27294: IFFALSE 27320
// result := [ [ i , tmp ] ] else
27296: LD_ADDR_VAR 0 6
27300: PUSH
27301: LD_VAR 0 7
27305: PUSH
27306: LD_VAR 0 9
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: ST_TO_ADDR
27318: GO 27462
// begin if result [ result ] [ 2 ] <= tmp then
27320: LD_VAR 0 6
27324: PUSH
27325: LD_VAR 0 6
27329: ARRAY
27330: PUSH
27331: LD_INT 2
27333: ARRAY
27334: PUSH
27335: LD_VAR 0 9
27339: LESSEQUAL
27340: IFFALSE 27382
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27342: LD_ADDR_VAR 0 6
27346: PUSH
27347: LD_VAR 0 6
27351: PPUSH
27352: LD_VAR 0 6
27356: PUSH
27357: LD_INT 1
27359: PLUS
27360: PPUSH
27361: LD_VAR 0 7
27365: PUSH
27366: LD_VAR 0 9
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PPUSH
27375: CALL_OW 2
27379: ST_TO_ADDR
27380: GO 27462
// for j := 1 to result do
27382: LD_ADDR_VAR 0 8
27386: PUSH
27387: DOUBLE
27388: LD_INT 1
27390: DEC
27391: ST_TO_ADDR
27392: LD_VAR 0 6
27396: PUSH
27397: FOR_TO
27398: IFFALSE 27460
// begin if tmp < result [ j ] [ 2 ] then
27400: LD_VAR 0 9
27404: PUSH
27405: LD_VAR 0 6
27409: PUSH
27410: LD_VAR 0 8
27414: ARRAY
27415: PUSH
27416: LD_INT 2
27418: ARRAY
27419: LESS
27420: IFFALSE 27458
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27422: LD_ADDR_VAR 0 6
27426: PUSH
27427: LD_VAR 0 6
27431: PPUSH
27432: LD_VAR 0 8
27436: PPUSH
27437: LD_VAR 0 7
27441: PUSH
27442: LD_VAR 0 9
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 2
27455: ST_TO_ADDR
// break ;
27456: GO 27460
// end ; end ;
27458: GO 27397
27460: POP
27461: POP
// end ; end ;
27462: GO 27261
27464: POP
27465: POP
// if result and not asc then
27466: LD_VAR 0 6
27470: IFFALSE 27479
27472: PUSH
27473: LD_VAR 0 4
27477: NOT
27478: AND
27479: IFFALSE 27554
// begin tmp := result ;
27481: LD_ADDR_VAR 0 9
27485: PUSH
27486: LD_VAR 0 6
27490: ST_TO_ADDR
// for i = tmp downto 1 do
27491: LD_ADDR_VAR 0 7
27495: PUSH
27496: DOUBLE
27497: LD_VAR 0 9
27501: INC
27502: ST_TO_ADDR
27503: LD_INT 1
27505: PUSH
27506: FOR_DOWNTO
27507: IFFALSE 27552
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27509: LD_ADDR_VAR 0 6
27513: PUSH
27514: LD_VAR 0 6
27518: PPUSH
27519: LD_VAR 0 9
27523: PUSH
27524: LD_VAR 0 7
27528: MINUS
27529: PUSH
27530: LD_INT 1
27532: PLUS
27533: PPUSH
27534: LD_VAR 0 9
27538: PUSH
27539: LD_VAR 0 7
27543: ARRAY
27544: PPUSH
27545: CALL_OW 1
27549: ST_TO_ADDR
27550: GO 27506
27552: POP
27553: POP
// end ; tmp := [ ] ;
27554: LD_ADDR_VAR 0 9
27558: PUSH
27559: EMPTY
27560: ST_TO_ADDR
// if mode then
27561: LD_VAR 0 5
27565: IFFALSE 27634
// begin for i = 1 to result do
27567: LD_ADDR_VAR 0 7
27571: PUSH
27572: DOUBLE
27573: LD_INT 1
27575: DEC
27576: ST_TO_ADDR
27577: LD_VAR 0 6
27581: PUSH
27582: FOR_TO
27583: IFFALSE 27622
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27585: LD_ADDR_VAR 0 9
27589: PUSH
27590: LD_VAR 0 9
27594: PPUSH
27595: LD_VAR 0 7
27599: PPUSH
27600: LD_VAR 0 6
27604: PUSH
27605: LD_VAR 0 7
27609: ARRAY
27610: PUSH
27611: LD_INT 1
27613: ARRAY
27614: PPUSH
27615: CALL_OW 1
27619: ST_TO_ADDR
27620: GO 27582
27622: POP
27623: POP
// result := tmp ;
27624: LD_ADDR_VAR 0 6
27628: PUSH
27629: LD_VAR 0 9
27633: ST_TO_ADDR
// end ; end ;
27634: LD_VAR 0 6
27638: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27639: LD_INT 0
27641: PPUSH
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27647: LD_ADDR_VAR 0 5
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: ST_TO_ADDR
// if not x or not y then
27669: LD_VAR 0 2
27673: NOT
27674: IFTRUE 27683
27676: PUSH
27677: LD_VAR 0 3
27681: NOT
27682: OR
27683: IFFALSE 27687
// exit ;
27685: GO 29343
// if not range then
27687: LD_VAR 0 4
27691: NOT
27692: IFFALSE 27702
// range := 10 ;
27694: LD_ADDR_VAR 0 4
27698: PUSH
27699: LD_INT 10
27701: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27702: LD_ADDR_VAR 0 8
27706: PUSH
27707: LD_INT 81
27709: PUSH
27710: LD_VAR 0 1
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 92
27721: PUSH
27722: LD_VAR 0 2
27726: PUSH
27727: LD_VAR 0 3
27731: PUSH
27732: LD_VAR 0 4
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 3
27745: PUSH
27746: LD_INT 21
27748: PUSH
27749: LD_INT 3
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: PPUSH
27765: CALL_OW 69
27769: ST_TO_ADDR
// if not tmp then
27770: LD_VAR 0 8
27774: NOT
27775: IFFALSE 27779
// exit ;
27777: GO 29343
// for i in tmp do
27779: LD_ADDR_VAR 0 6
27783: PUSH
27784: LD_VAR 0 8
27788: PUSH
27789: FOR_IN
27790: IFFALSE 29318
// begin points := [ 0 , 0 , 0 ] ;
27792: LD_ADDR_VAR 0 9
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: LIST
27810: ST_TO_ADDR
// bpoints := 1 ;
27811: LD_ADDR_VAR 0 10
27815: PUSH
27816: LD_INT 1
27818: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27819: LD_VAR 0 6
27823: PPUSH
27824: CALL_OW 247
27828: PUSH
27829: LD_INT 1
27831: DOUBLE
27832: EQUAL
27833: IFTRUE 27837
27835: GO 28419
27837: POP
// begin if GetClass ( i ) = 1 then
27838: LD_VAR 0 6
27842: PPUSH
27843: CALL_OW 257
27847: PUSH
27848: LD_INT 1
27850: EQUAL
27851: IFFALSE 27872
// points := [ 10 , 5 , 3 ] ;
27853: LD_ADDR_VAR 0 9
27857: PUSH
27858: LD_INT 10
27860: PUSH
27861: LD_INT 5
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: LIST
27871: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27872: LD_VAR 0 6
27876: PPUSH
27877: CALL_OW 257
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 3
27887: PUSH
27888: LD_INT 4
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: IN
27896: IFFALSE 27917
// points := [ 3 , 2 , 1 ] ;
27898: LD_ADDR_VAR 0 9
27902: PUSH
27903: LD_INT 3
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27917: LD_VAR 0 6
27921: PPUSH
27922: CALL_OW 257
27926: PUSH
27927: LD_INT 5
27929: EQUAL
27930: IFFALSE 27951
// points := [ 130 , 5 , 2 ] ;
27932: LD_ADDR_VAR 0 9
27936: PUSH
27937: LD_INT 130
27939: PUSH
27940: LD_INT 5
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27951: LD_VAR 0 6
27955: PPUSH
27956: CALL_OW 257
27960: PUSH
27961: LD_INT 8
27963: EQUAL
27964: IFFALSE 27985
// points := [ 35 , 35 , 30 ] ;
27966: LD_ADDR_VAR 0 9
27970: PUSH
27971: LD_INT 35
27973: PUSH
27974: LD_INT 35
27976: PUSH
27977: LD_INT 30
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27985: LD_VAR 0 6
27989: PPUSH
27990: CALL_OW 257
27994: PUSH
27995: LD_INT 9
27997: EQUAL
27998: IFFALSE 28019
// points := [ 20 , 55 , 40 ] ;
28000: LD_ADDR_VAR 0 9
28004: PUSH
28005: LD_INT 20
28007: PUSH
28008: LD_INT 55
28010: PUSH
28011: LD_INT 40
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: LIST
28018: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28019: LD_VAR 0 6
28023: PPUSH
28024: CALL_OW 257
28028: PUSH
28029: LD_INT 12
28031: PUSH
28032: LD_INT 16
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: IN
28039: IFFALSE 28060
// points := [ 5 , 3 , 2 ] ;
28041: LD_ADDR_VAR 0 9
28045: PUSH
28046: LD_INT 5
28048: PUSH
28049: LD_INT 3
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28060: LD_VAR 0 6
28064: PPUSH
28065: CALL_OW 257
28069: PUSH
28070: LD_INT 17
28072: EQUAL
28073: IFFALSE 28094
// points := [ 100 , 50 , 75 ] ;
28075: LD_ADDR_VAR 0 9
28079: PUSH
28080: LD_INT 100
28082: PUSH
28083: LD_INT 50
28085: PUSH
28086: LD_INT 75
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28094: LD_VAR 0 6
28098: PPUSH
28099: CALL_OW 257
28103: PUSH
28104: LD_INT 15
28106: EQUAL
28107: IFFALSE 28128
// points := [ 10 , 5 , 3 ] ;
28109: LD_ADDR_VAR 0 9
28113: PUSH
28114: LD_INT 10
28116: PUSH
28117: LD_INT 5
28119: PUSH
28120: LD_INT 3
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28128: LD_VAR 0 6
28132: PPUSH
28133: CALL_OW 257
28137: PUSH
28138: LD_INT 14
28140: EQUAL
28141: IFFALSE 28162
// points := [ 10 , 0 , 0 ] ;
28143: LD_ADDR_VAR 0 9
28147: PUSH
28148: LD_INT 10
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28162: LD_VAR 0 6
28166: PPUSH
28167: CALL_OW 257
28171: PUSH
28172: LD_INT 11
28174: EQUAL
28175: IFFALSE 28196
// points := [ 30 , 10 , 5 ] ;
28177: LD_ADDR_VAR 0 9
28181: PUSH
28182: LD_INT 30
28184: PUSH
28185: LD_INT 10
28187: PUSH
28188: LD_INT 5
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: LIST
28195: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28196: LD_VAR 0 1
28200: PPUSH
28201: LD_INT 5
28203: PPUSH
28204: CALL_OW 321
28208: PUSH
28209: LD_INT 2
28211: EQUAL
28212: IFFALSE 28229
// bpoints := bpoints * 1.8 ;
28214: LD_ADDR_VAR 0 10
28218: PUSH
28219: LD_VAR 0 10
28223: PUSH
28224: LD_REAL  1.80000000000000E+0000
28227: MUL
28228: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28229: LD_VAR 0 6
28233: PPUSH
28234: CALL_OW 257
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 3
28247: PUSH
28248: LD_INT 4
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: IN
28257: IFFALSE 28277
28259: PUSH
28260: LD_VAR 0 1
28264: PPUSH
28265: LD_INT 51
28267: PPUSH
28268: CALL_OW 321
28272: PUSH
28273: LD_INT 2
28275: EQUAL
28276: AND
28277: IFFALSE 28294
// bpoints := bpoints * 1.2 ;
28279: LD_ADDR_VAR 0 10
28283: PUSH
28284: LD_VAR 0 10
28288: PUSH
28289: LD_REAL  1.20000000000000E+0000
28292: MUL
28293: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28294: LD_VAR 0 6
28298: PPUSH
28299: CALL_OW 257
28303: PUSH
28304: LD_INT 5
28306: PUSH
28307: LD_INT 7
28309: PUSH
28310: LD_INT 9
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: IN
28318: IFFALSE 28338
28320: PUSH
28321: LD_VAR 0 1
28325: PPUSH
28326: LD_INT 52
28328: PPUSH
28329: CALL_OW 321
28333: PUSH
28334: LD_INT 2
28336: EQUAL
28337: AND
28338: IFFALSE 28355
// bpoints := bpoints * 1.5 ;
28340: LD_ADDR_VAR 0 10
28344: PUSH
28345: LD_VAR 0 10
28349: PUSH
28350: LD_REAL  1.50000000000000E+0000
28353: MUL
28354: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28355: LD_VAR 0 1
28359: PPUSH
28360: LD_INT 66
28362: PPUSH
28363: CALL_OW 321
28367: PUSH
28368: LD_INT 2
28370: EQUAL
28371: IFFALSE 28388
// bpoints := bpoints * 1.1 ;
28373: LD_ADDR_VAR 0 10
28377: PUSH
28378: LD_VAR 0 10
28382: PUSH
28383: LD_REAL  1.10000000000000E+0000
28386: MUL
28387: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28388: LD_ADDR_VAR 0 10
28392: PUSH
28393: LD_VAR 0 10
28397: PUSH
28398: LD_VAR 0 6
28402: PPUSH
28403: LD_INT 1
28405: PPUSH
28406: CALL_OW 259
28410: PUSH
28411: LD_REAL  1.15000000000000E+0000
28414: MUL
28415: MUL
28416: ST_TO_ADDR
// end ; unit_vehicle :
28417: GO 29247
28419: LD_INT 2
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 29235
28427: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28428: LD_VAR 0 6
28432: PPUSH
28433: CALL_OW 264
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: LD_INT 42
28443: PUSH
28444: LD_INT 24
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: IN
28452: IFFALSE 28473
// points := [ 25 , 5 , 3 ] ;
28454: LD_ADDR_VAR 0 9
28458: PUSH
28459: LD_INT 25
28461: PUSH
28462: LD_INT 5
28464: PUSH
28465: LD_INT 3
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28473: LD_VAR 0 6
28477: PPUSH
28478: CALL_OW 264
28482: PUSH
28483: LD_INT 4
28485: PUSH
28486: LD_INT 43
28488: PUSH
28489: LD_INT 25
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: IN
28497: IFFALSE 28518
// points := [ 40 , 15 , 5 ] ;
28499: LD_ADDR_VAR 0 9
28503: PUSH
28504: LD_INT 40
28506: PUSH
28507: LD_INT 15
28509: PUSH
28510: LD_INT 5
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: LIST
28517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28518: LD_VAR 0 6
28522: PPUSH
28523: CALL_OW 264
28527: PUSH
28528: LD_INT 3
28530: PUSH
28531: LD_INT 23
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: IN
28538: IFFALSE 28559
// points := [ 7 , 25 , 8 ] ;
28540: LD_ADDR_VAR 0 9
28544: PUSH
28545: LD_INT 7
28547: PUSH
28548: LD_INT 25
28550: PUSH
28551: LD_INT 8
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28559: LD_VAR 0 6
28563: PPUSH
28564: CALL_OW 264
28568: PUSH
28569: LD_INT 5
28571: PUSH
28572: LD_INT 27
28574: PUSH
28575: LD_INT 44
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: IN
28583: IFFALSE 28604
// points := [ 14 , 50 , 16 ] ;
28585: LD_ADDR_VAR 0 9
28589: PUSH
28590: LD_INT 14
28592: PUSH
28593: LD_INT 50
28595: PUSH
28596: LD_INT 16
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28604: LD_VAR 0 6
28608: PPUSH
28609: CALL_OW 264
28613: PUSH
28614: LD_INT 6
28616: PUSH
28617: LD_INT 46
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: IN
28624: IFFALSE 28645
// points := [ 32 , 120 , 70 ] ;
28626: LD_ADDR_VAR 0 9
28630: PUSH
28631: LD_INT 32
28633: PUSH
28634: LD_INT 120
28636: PUSH
28637: LD_INT 70
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28645: LD_VAR 0 6
28649: PPUSH
28650: CALL_OW 264
28654: PUSH
28655: LD_INT 7
28657: PUSH
28658: LD_INT 28
28660: PUSH
28661: LD_INT 45
28663: PUSH
28664: LD_INT 92
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: IN
28673: IFFALSE 28694
// points := [ 35 , 20 , 45 ] ;
28675: LD_ADDR_VAR 0 9
28679: PUSH
28680: LD_INT 35
28682: PUSH
28683: LD_INT 20
28685: PUSH
28686: LD_INT 45
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28694: LD_VAR 0 6
28698: PPUSH
28699: CALL_OW 264
28703: PUSH
28704: LD_INT 47
28706: PUSH
28707: EMPTY
28708: LIST
28709: IN
28710: IFFALSE 28731
// points := [ 67 , 45 , 75 ] ;
28712: LD_ADDR_VAR 0 9
28716: PUSH
28717: LD_INT 67
28719: PUSH
28720: LD_INT 45
28722: PUSH
28723: LD_INT 75
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28731: LD_VAR 0 6
28735: PPUSH
28736: CALL_OW 264
28740: PUSH
28741: LD_INT 26
28743: PUSH
28744: EMPTY
28745: LIST
28746: IN
28747: IFFALSE 28768
// points := [ 120 , 30 , 80 ] ;
28749: LD_ADDR_VAR 0 9
28753: PUSH
28754: LD_INT 120
28756: PUSH
28757: LD_INT 30
28759: PUSH
28760: LD_INT 80
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28768: LD_VAR 0 6
28772: PPUSH
28773: CALL_OW 264
28777: PUSH
28778: LD_INT 22
28780: PUSH
28781: EMPTY
28782: LIST
28783: IN
28784: IFFALSE 28805
// points := [ 40 , 1 , 1 ] ;
28786: LD_ADDR_VAR 0 9
28790: PUSH
28791: LD_INT 40
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28805: LD_VAR 0 6
28809: PPUSH
28810: CALL_OW 264
28814: PUSH
28815: LD_INT 29
28817: PUSH
28818: EMPTY
28819: LIST
28820: IN
28821: IFFALSE 28842
// points := [ 70 , 200 , 400 ] ;
28823: LD_ADDR_VAR 0 9
28827: PUSH
28828: LD_INT 70
28830: PUSH
28831: LD_INT 200
28833: PUSH
28834: LD_INT 400
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28842: LD_VAR 0 6
28846: PPUSH
28847: CALL_OW 264
28851: PUSH
28852: LD_INT 14
28854: PUSH
28855: LD_INT 53
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: IN
28862: IFFALSE 28883
// points := [ 40 , 10 , 20 ] ;
28864: LD_ADDR_VAR 0 9
28868: PUSH
28869: LD_INT 40
28871: PUSH
28872: LD_INT 10
28874: PUSH
28875: LD_INT 20
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: LIST
28882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28883: LD_VAR 0 6
28887: PPUSH
28888: CALL_OW 264
28892: PUSH
28893: LD_INT 9
28895: PUSH
28896: EMPTY
28897: LIST
28898: IN
28899: IFFALSE 28920
// points := [ 5 , 70 , 20 ] ;
28901: LD_ADDR_VAR 0 9
28905: PUSH
28906: LD_INT 5
28908: PUSH
28909: LD_INT 70
28911: PUSH
28912: LD_INT 20
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28920: LD_VAR 0 6
28924: PPUSH
28925: CALL_OW 264
28929: PUSH
28930: LD_INT 10
28932: PUSH
28933: EMPTY
28934: LIST
28935: IN
28936: IFFALSE 28957
// points := [ 35 , 110 , 70 ] ;
28938: LD_ADDR_VAR 0 9
28942: PUSH
28943: LD_INT 35
28945: PUSH
28946: LD_INT 110
28948: PUSH
28949: LD_INT 70
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28957: LD_VAR 0 6
28961: PPUSH
28962: CALL_OW 265
28966: PUSH
28967: LD_INT 25
28969: EQUAL
28970: IFFALSE 28991
// points := [ 80 , 65 , 100 ] ;
28972: LD_ADDR_VAR 0 9
28976: PUSH
28977: LD_INT 80
28979: PUSH
28980: LD_INT 65
28982: PUSH
28983: LD_INT 100
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: LIST
28990: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28991: LD_VAR 0 6
28995: PPUSH
28996: CALL_OW 263
29000: PUSH
29001: LD_INT 1
29003: EQUAL
29004: IFFALSE 29039
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29006: LD_ADDR_VAR 0 10
29010: PUSH
29011: LD_VAR 0 10
29015: PUSH
29016: LD_VAR 0 6
29020: PPUSH
29021: CALL_OW 311
29025: PPUSH
29026: LD_INT 3
29028: PPUSH
29029: CALL_OW 259
29033: PUSH
29034: LD_INT 4
29036: MUL
29037: MUL
29038: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29039: LD_VAR 0 6
29043: PPUSH
29044: CALL_OW 263
29048: PUSH
29049: LD_INT 2
29051: EQUAL
29052: IFFALSE 29103
// begin j := IsControledBy ( i ) ;
29054: LD_ADDR_VAR 0 7
29058: PUSH
29059: LD_VAR 0 6
29063: PPUSH
29064: CALL_OW 312
29068: ST_TO_ADDR
// if j then
29069: LD_VAR 0 7
29073: IFFALSE 29103
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29075: LD_ADDR_VAR 0 10
29079: PUSH
29080: LD_VAR 0 10
29084: PUSH
29085: LD_VAR 0 7
29089: PPUSH
29090: LD_INT 3
29092: PPUSH
29093: CALL_OW 259
29097: PUSH
29098: LD_INT 3
29100: MUL
29101: MUL
29102: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29103: LD_VAR 0 6
29107: PPUSH
29108: CALL_OW 264
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: LD_INT 6
29118: PUSH
29119: LD_INT 46
29121: PUSH
29122: LD_INT 44
29124: PUSH
29125: LD_INT 47
29127: PUSH
29128: LD_INT 45
29130: PUSH
29131: LD_INT 28
29133: PUSH
29134: LD_INT 7
29136: PUSH
29137: LD_INT 27
29139: PUSH
29140: LD_INT 29
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: IN
29155: IFFALSE 29175
29157: PUSH
29158: LD_VAR 0 1
29162: PPUSH
29163: LD_INT 52
29165: PPUSH
29166: CALL_OW 321
29170: PUSH
29171: LD_INT 2
29173: EQUAL
29174: AND
29175: IFFALSE 29192
// bpoints := bpoints * 1.2 ;
29177: LD_ADDR_VAR 0 10
29181: PUSH
29182: LD_VAR 0 10
29186: PUSH
29187: LD_REAL  1.20000000000000E+0000
29190: MUL
29191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29192: LD_VAR 0 6
29196: PPUSH
29197: CALL_OW 264
29201: PUSH
29202: LD_INT 6
29204: PUSH
29205: LD_INT 46
29207: PUSH
29208: LD_INT 47
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: LIST
29215: IN
29216: IFFALSE 29233
// bpoints := bpoints * 1.2 ;
29218: LD_ADDR_VAR 0 10
29222: PUSH
29223: LD_VAR 0 10
29227: PUSH
29228: LD_REAL  1.20000000000000E+0000
29231: MUL
29232: ST_TO_ADDR
// end ; unit_building :
29233: GO 29247
29235: LD_INT 3
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29246
29243: POP
// ; end ;
29244: GO 29247
29246: POP
// for j = 1 to 3 do
29247: LD_ADDR_VAR 0 7
29251: PUSH
29252: DOUBLE
29253: LD_INT 1
29255: DEC
29256: ST_TO_ADDR
29257: LD_INT 3
29259: PUSH
29260: FOR_TO
29261: IFFALSE 29314
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29263: LD_ADDR_VAR 0 5
29267: PUSH
29268: LD_VAR 0 5
29272: PPUSH
29273: LD_VAR 0 7
29277: PPUSH
29278: LD_VAR 0 5
29282: PUSH
29283: LD_VAR 0 7
29287: ARRAY
29288: PUSH
29289: LD_VAR 0 9
29293: PUSH
29294: LD_VAR 0 7
29298: ARRAY
29299: PUSH
29300: LD_VAR 0 10
29304: MUL
29305: PLUS
29306: PPUSH
29307: CALL_OW 1
29311: ST_TO_ADDR
29312: GO 29260
29314: POP
29315: POP
// end ;
29316: GO 27789
29318: POP
29319: POP
// result := Replace ( result , 4 , tmp ) ;
29320: LD_ADDR_VAR 0 5
29324: PUSH
29325: LD_VAR 0 5
29329: PPUSH
29330: LD_INT 4
29332: PPUSH
29333: LD_VAR 0 8
29337: PPUSH
29338: CALL_OW 1
29342: ST_TO_ADDR
// end ;
29343: LD_VAR 0 5
29347: RET
// export function DangerAtRange ( unit , range ) ; begin
29348: LD_INT 0
29350: PPUSH
// if not unit then
29351: LD_VAR 0 1
29355: NOT
29356: IFFALSE 29360
// exit ;
29358: GO 29405
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29360: LD_ADDR_VAR 0 3
29364: PUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 255
29374: PPUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 250
29384: PPUSH
29385: LD_VAR 0 1
29389: PPUSH
29390: CALL_OW 251
29394: PPUSH
29395: LD_VAR 0 2
29399: PPUSH
29400: CALL 27639 0 4
29404: ST_TO_ADDR
// end ;
29405: LD_VAR 0 3
29409: RET
// export function DangerInArea ( side , area ) ; begin
29410: LD_INT 0
29412: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29413: LD_ADDR_VAR 0 3
29417: PUSH
29418: LD_VAR 0 2
29422: PPUSH
29423: LD_INT 81
29425: PUSH
29426: LD_VAR 0 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PPUSH
29435: CALL_OW 70
29439: ST_TO_ADDR
// end ;
29440: LD_VAR 0 3
29444: RET
// export function IsExtension ( b ) ; begin
29445: LD_INT 0
29447: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29448: LD_ADDR_VAR 0 2
29452: PUSH
29453: LD_VAR 0 1
29457: PUSH
29458: LD_INT 23
29460: PUSH
29461: LD_INT 20
29463: PUSH
29464: LD_INT 22
29466: PUSH
29467: LD_INT 17
29469: PUSH
29470: LD_INT 24
29472: PUSH
29473: LD_INT 21
29475: PUSH
29476: LD_INT 19
29478: PUSH
29479: LD_INT 16
29481: PUSH
29482: LD_INT 25
29484: PUSH
29485: LD_INT 18
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: IN
29500: ST_TO_ADDR
// end ;
29501: LD_VAR 0 2
29505: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29506: LD_INT 0
29508: PPUSH
29509: PPUSH
29510: PPUSH
// result := [ ] ;
29511: LD_ADDR_VAR 0 4
29515: PUSH
29516: EMPTY
29517: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29518: LD_ADDR_VAR 0 5
29522: PUSH
29523: LD_VAR 0 2
29527: PPUSH
29528: LD_INT 21
29530: PUSH
29531: LD_INT 3
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PPUSH
29538: CALL_OW 70
29542: ST_TO_ADDR
// if not tmp then
29543: LD_VAR 0 5
29547: NOT
29548: IFFALSE 29552
// exit ;
29550: GO 29616
// if checkLink then
29552: LD_VAR 0 3
29556: IFFALSE 29606
// begin for i in tmp do
29558: LD_ADDR_VAR 0 6
29562: PUSH
29563: LD_VAR 0 5
29567: PUSH
29568: FOR_IN
29569: IFFALSE 29604
// if GetBase ( i ) <> base then
29571: LD_VAR 0 6
29575: PPUSH
29576: CALL_OW 274
29580: PUSH
29581: LD_VAR 0 1
29585: NONEQUAL
29586: IFFALSE 29602
// ComLinkToBase ( base , i ) ;
29588: LD_VAR 0 1
29592: PPUSH
29593: LD_VAR 0 6
29597: PPUSH
29598: CALL_OW 169
29602: GO 29568
29604: POP
29605: POP
// end ; result := tmp ;
29606: LD_ADDR_VAR 0 4
29610: PUSH
29611: LD_VAR 0 5
29615: ST_TO_ADDR
// end ;
29616: LD_VAR 0 4
29620: RET
// export function ComComplete ( units , b ) ; var i ; begin
29621: LD_INT 0
29623: PPUSH
29624: PPUSH
// if not units then
29625: LD_VAR 0 1
29629: NOT
29630: IFFALSE 29634
// exit ;
29632: GO 29724
// for i in units do
29634: LD_ADDR_VAR 0 4
29638: PUSH
29639: LD_VAR 0 1
29643: PUSH
29644: FOR_IN
29645: IFFALSE 29722
// if BuildingStatus ( b ) = bs_build then
29647: LD_VAR 0 2
29651: PPUSH
29652: CALL_OW 461
29656: PUSH
29657: LD_INT 1
29659: EQUAL
29660: IFFALSE 29720
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29662: LD_VAR 0 4
29666: PPUSH
29667: LD_STRING h
29669: PUSH
29670: LD_VAR 0 2
29674: PPUSH
29675: CALL_OW 250
29679: PUSH
29680: LD_VAR 0 2
29684: PPUSH
29685: CALL_OW 251
29689: PUSH
29690: LD_VAR 0 2
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: PUSH
29713: EMPTY
29714: LIST
29715: PPUSH
29716: CALL_OW 446
29720: GO 29644
29722: POP
29723: POP
// end ;
29724: LD_VAR 0 3
29728: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29729: LD_INT 0
29731: PPUSH
29732: PPUSH
29733: PPUSH
29734: PPUSH
29735: PPUSH
29736: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29737: LD_VAR 0 1
29741: NOT
29742: IFTRUE 29759
29744: PUSH
29745: LD_VAR 0 1
29749: PPUSH
29750: CALL_OW 263
29754: PUSH
29755: LD_INT 2
29757: NONEQUAL
29758: OR
29759: IFFALSE 29763
// exit ;
29761: GO 30079
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29763: LD_ADDR_VAR 0 6
29767: PUSH
29768: LD_INT 22
29770: PUSH
29771: LD_VAR 0 1
29775: PPUSH
29776: CALL_OW 255
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 2
29787: PUSH
29788: LD_INT 30
29790: PUSH
29791: LD_INT 36
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 34
29800: PUSH
29801: LD_INT 31
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: ST_TO_ADDR
// if not tmp then
29822: LD_VAR 0 6
29826: NOT
29827: IFFALSE 29831
// exit ;
29829: GO 30079
// result := [ ] ;
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: EMPTY
29837: ST_TO_ADDR
// for i in tmp do
29838: LD_ADDR_VAR 0 3
29842: PUSH
29843: LD_VAR 0 6
29847: PUSH
29848: FOR_IN
29849: IFFALSE 29920
// begin t := UnitsInside ( i ) ;
29851: LD_ADDR_VAR 0 4
29855: PUSH
29856: LD_VAR 0 3
29860: PPUSH
29861: CALL_OW 313
29865: ST_TO_ADDR
// if t then
29866: LD_VAR 0 4
29870: IFFALSE 29918
// for j in t do
29872: LD_ADDR_VAR 0 7
29876: PUSH
29877: LD_VAR 0 4
29881: PUSH
29882: FOR_IN
29883: IFFALSE 29916
// result := Replace ( result , result + 1 , j ) ;
29885: LD_ADDR_VAR 0 2
29889: PUSH
29890: LD_VAR 0 2
29894: PPUSH
29895: LD_VAR 0 2
29899: PUSH
29900: LD_INT 1
29902: PLUS
29903: PPUSH
29904: LD_VAR 0 7
29908: PPUSH
29909: CALL_OW 1
29913: ST_TO_ADDR
29914: GO 29882
29916: POP
29917: POP
// end ;
29918: GO 29848
29920: POP
29921: POP
// if not result then
29922: LD_VAR 0 2
29926: NOT
29927: IFFALSE 29931
// exit ;
29929: GO 30079
// mech := result [ 1 ] ;
29931: LD_ADDR_VAR 0 5
29935: PUSH
29936: LD_VAR 0 2
29940: PUSH
29941: LD_INT 1
29943: ARRAY
29944: ST_TO_ADDR
// if result > 1 then
29945: LD_VAR 0 2
29949: PUSH
29950: LD_INT 1
29952: GREATER
29953: IFFALSE 30065
// begin for i = 2 to result do
29955: LD_ADDR_VAR 0 3
29959: PUSH
29960: DOUBLE
29961: LD_INT 2
29963: DEC
29964: ST_TO_ADDR
29965: LD_VAR 0 2
29969: PUSH
29970: FOR_TO
29971: IFFALSE 30063
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29973: LD_ADDR_VAR 0 4
29977: PUSH
29978: LD_VAR 0 2
29982: PUSH
29983: LD_VAR 0 3
29987: ARRAY
29988: PPUSH
29989: LD_INT 3
29991: PPUSH
29992: CALL_OW 259
29996: PUSH
29997: LD_VAR 0 2
30001: PUSH
30002: LD_VAR 0 3
30006: ARRAY
30007: PPUSH
30008: CALL_OW 432
30012: MINUS
30013: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30014: LD_VAR 0 4
30018: PUSH
30019: LD_VAR 0 5
30023: PPUSH
30024: LD_INT 3
30026: PPUSH
30027: CALL_OW 259
30031: PUSH
30032: LD_VAR 0 5
30036: PPUSH
30037: CALL_OW 432
30041: MINUS
30042: GREATEREQUAL
30043: IFFALSE 30061
// mech := result [ i ] ;
30045: LD_ADDR_VAR 0 5
30049: PUSH
30050: LD_VAR 0 2
30054: PUSH
30055: LD_VAR 0 3
30059: ARRAY
30060: ST_TO_ADDR
// end ;
30061: GO 29970
30063: POP
30064: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30065: LD_VAR 0 1
30069: PPUSH
30070: LD_VAR 0 5
30074: PPUSH
30075: CALL_OW 135
// end ;
30079: LD_VAR 0 2
30083: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30084: LD_INT 0
30086: PPUSH
30087: PPUSH
30088: PPUSH
30089: PPUSH
30090: PPUSH
30091: PPUSH
30092: PPUSH
30093: PPUSH
30094: PPUSH
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
// result := [ ] ;
30099: LD_ADDR_VAR 0 7
30103: PUSH
30104: EMPTY
30105: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30106: LD_VAR 0 1
30110: PPUSH
30111: CALL_OW 266
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: IN
30126: NOT
30127: IFFALSE 30131
// exit ;
30129: GO 31771
// if name then
30131: LD_VAR 0 3
30135: IFFALSE 30151
// SetBName ( base_dep , name ) ;
30137: LD_VAR 0 1
30141: PPUSH
30142: LD_VAR 0 3
30146: PPUSH
30147: CALL_OW 500
// base := GetBase ( base_dep ) ;
30151: LD_ADDR_VAR 0 15
30155: PUSH
30156: LD_VAR 0 1
30160: PPUSH
30161: CALL_OW 274
30165: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30166: LD_ADDR_VAR 0 16
30170: PUSH
30171: LD_VAR 0 1
30175: PPUSH
30176: CALL_OW 255
30180: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30181: LD_ADDR_VAR 0 17
30185: PUSH
30186: LD_VAR 0 1
30190: PPUSH
30191: CALL_OW 248
30195: ST_TO_ADDR
// if sources then
30196: LD_VAR 0 5
30200: IFFALSE 30247
// for i = 1 to 3 do
30202: LD_ADDR_VAR 0 8
30206: PUSH
30207: DOUBLE
30208: LD_INT 1
30210: DEC
30211: ST_TO_ADDR
30212: LD_INT 3
30214: PUSH
30215: FOR_TO
30216: IFFALSE 30245
// AddResourceType ( base , i , sources [ i ] ) ;
30218: LD_VAR 0 15
30222: PPUSH
30223: LD_VAR 0 8
30227: PPUSH
30228: LD_VAR 0 5
30232: PUSH
30233: LD_VAR 0 8
30237: ARRAY
30238: PPUSH
30239: CALL_OW 276
30243: GO 30215
30245: POP
30246: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30247: LD_ADDR_VAR 0 18
30251: PUSH
30252: LD_VAR 0 15
30256: PPUSH
30257: LD_VAR 0 2
30261: PPUSH
30262: LD_INT 1
30264: PPUSH
30265: CALL 29506 0 3
30269: ST_TO_ADDR
// InitHc ;
30270: CALL_OW 19
// InitUc ;
30274: CALL_OW 18
// uc_side := side ;
30278: LD_ADDR_OWVAR 20
30282: PUSH
30283: LD_VAR 0 16
30287: ST_TO_ADDR
// uc_nation := nation ;
30288: LD_ADDR_OWVAR 21
30292: PUSH
30293: LD_VAR 0 17
30297: ST_TO_ADDR
// if buildings then
30298: LD_VAR 0 18
30302: IFFALSE 31630
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30304: LD_ADDR_VAR 0 19
30308: PUSH
30309: LD_VAR 0 18
30313: PPUSH
30314: LD_INT 2
30316: PUSH
30317: LD_INT 30
30319: PUSH
30320: LD_INT 29
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 30
30329: PUSH
30330: LD_INT 30
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: PPUSH
30342: CALL_OW 72
30346: ST_TO_ADDR
// if tmp then
30347: LD_VAR 0 19
30351: IFFALSE 30399
// for i in tmp do
30353: LD_ADDR_VAR 0 8
30357: PUSH
30358: LD_VAR 0 19
30362: PUSH
30363: FOR_IN
30364: IFFALSE 30397
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30366: LD_VAR 0 8
30370: PPUSH
30371: CALL_OW 250
30375: PPUSH
30376: LD_VAR 0 8
30380: PPUSH
30381: CALL_OW 251
30385: PPUSH
30386: LD_VAR 0 16
30390: PPUSH
30391: CALL_OW 441
30395: GO 30363
30397: POP
30398: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30399: LD_VAR 0 18
30403: PPUSH
30404: LD_INT 2
30406: PUSH
30407: LD_INT 30
30409: PUSH
30410: LD_INT 32
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 30
30419: PUSH
30420: LD_INT 33
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: LIST
30431: PPUSH
30432: CALL_OW 72
30436: IFFALSE 30524
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30438: LD_ADDR_VAR 0 8
30442: PUSH
30443: LD_VAR 0 18
30447: PPUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 30
30453: PUSH
30454: LD_INT 32
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 30
30463: PUSH
30464: LD_INT 33
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: LIST
30475: PPUSH
30476: CALL_OW 72
30480: PUSH
30481: FOR_IN
30482: IFFALSE 30522
// begin if not GetBWeapon ( i ) then
30484: LD_VAR 0 8
30488: PPUSH
30489: CALL_OW 269
30493: NOT
30494: IFFALSE 30520
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30496: LD_VAR 0 8
30500: PPUSH
30501: LD_VAR 0 8
30505: PPUSH
30506: LD_VAR 0 2
30510: PPUSH
30511: CALL 31776 0 2
30515: PPUSH
30516: CALL_OW 431
// end ;
30520: GO 30481
30522: POP
30523: POP
// end ; for i = 1 to personel do
30524: LD_ADDR_VAR 0 8
30528: PUSH
30529: DOUBLE
30530: LD_INT 1
30532: DEC
30533: ST_TO_ADDR
30534: LD_VAR 0 6
30538: PUSH
30539: FOR_TO
30540: IFFALSE 31610
// begin if i > 4 then
30542: LD_VAR 0 8
30546: PUSH
30547: LD_INT 4
30549: GREATER
30550: IFFALSE 30554
// break ;
30552: GO 31610
// case i of 1 :
30554: LD_VAR 0 8
30558: PUSH
30559: LD_INT 1
30561: DOUBLE
30562: EQUAL
30563: IFTRUE 30567
30565: GO 30647
30567: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30568: LD_ADDR_VAR 0 12
30572: PUSH
30573: LD_VAR 0 18
30577: PPUSH
30578: LD_INT 22
30580: PUSH
30581: LD_VAR 0 16
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 58
30592: PUSH
30593: EMPTY
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 30
30601: PUSH
30602: LD_INT 32
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 30
30611: PUSH
30612: LD_INT 4
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 30
30621: PUSH
30622: LD_INT 5
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: PPUSH
30640: CALL_OW 72
30644: ST_TO_ADDR
30645: GO 30869
30647: LD_INT 2
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30717
30655: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30656: LD_ADDR_VAR 0 12
30660: PUSH
30661: LD_VAR 0 18
30665: PPUSH
30666: LD_INT 22
30668: PUSH
30669: LD_VAR 0 16
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 30
30683: PUSH
30684: LD_INT 0
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 30
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PPUSH
30710: CALL_OW 72
30714: ST_TO_ADDR
30715: GO 30869
30717: LD_INT 3
30719: DOUBLE
30720: EQUAL
30721: IFTRUE 30725
30723: GO 30787
30725: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30726: LD_ADDR_VAR 0 12
30730: PUSH
30731: LD_VAR 0 18
30735: PPUSH
30736: LD_INT 22
30738: PUSH
30739: LD_VAR 0 16
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 2
30750: PUSH
30751: LD_INT 30
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 30
30763: PUSH
30764: LD_INT 3
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: LIST
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PPUSH
30780: CALL_OW 72
30784: ST_TO_ADDR
30785: GO 30869
30787: LD_INT 4
30789: DOUBLE
30790: EQUAL
30791: IFTRUE 30795
30793: GO 30868
30795: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30796: LD_ADDR_VAR 0 12
30800: PUSH
30801: LD_VAR 0 18
30805: PPUSH
30806: LD_INT 22
30808: PUSH
30809: LD_VAR 0 16
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 30
30823: PUSH
30824: LD_INT 6
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 30
30833: PUSH
30834: LD_INT 7
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 30
30843: PUSH
30844: LD_INT 8
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PPUSH
30861: CALL_OW 72
30865: ST_TO_ADDR
30866: GO 30869
30868: POP
// if i = 1 then
30869: LD_VAR 0 8
30873: PUSH
30874: LD_INT 1
30876: EQUAL
30877: IFFALSE 30988
// begin tmp := [ ] ;
30879: LD_ADDR_VAR 0 19
30883: PUSH
30884: EMPTY
30885: ST_TO_ADDR
// for j in f do
30886: LD_ADDR_VAR 0 9
30890: PUSH
30891: LD_VAR 0 12
30895: PUSH
30896: FOR_IN
30897: IFFALSE 30970
// if GetBType ( j ) = b_bunker then
30899: LD_VAR 0 9
30903: PPUSH
30904: CALL_OW 266
30908: PUSH
30909: LD_INT 32
30911: EQUAL
30912: IFFALSE 30939
// tmp := Insert ( tmp , 1 , j ) else
30914: LD_ADDR_VAR 0 19
30918: PUSH
30919: LD_VAR 0 19
30923: PPUSH
30924: LD_INT 1
30926: PPUSH
30927: LD_VAR 0 9
30931: PPUSH
30932: CALL_OW 2
30936: ST_TO_ADDR
30937: GO 30968
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30939: LD_ADDR_VAR 0 19
30943: PUSH
30944: LD_VAR 0 19
30948: PPUSH
30949: LD_VAR 0 19
30953: PUSH
30954: LD_INT 1
30956: PLUS
30957: PPUSH
30958: LD_VAR 0 9
30962: PPUSH
30963: CALL_OW 2
30967: ST_TO_ADDR
30968: GO 30896
30970: POP
30971: POP
// if tmp then
30972: LD_VAR 0 19
30976: IFFALSE 30988
// f := tmp ;
30978: LD_ADDR_VAR 0 12
30982: PUSH
30983: LD_VAR 0 19
30987: ST_TO_ADDR
// end ; x := personel [ i ] ;
30988: LD_ADDR_VAR 0 13
30992: PUSH
30993: LD_VAR 0 6
30997: PUSH
30998: LD_VAR 0 8
31002: ARRAY
31003: ST_TO_ADDR
// if x = - 1 then
31004: LD_VAR 0 13
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: EQUAL
31013: IFFALSE 31224
// begin for j in f do
31015: LD_ADDR_VAR 0 9
31019: PUSH
31020: LD_VAR 0 12
31024: PUSH
31025: FOR_IN
31026: IFFALSE 31220
// repeat InitHc ;
31028: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31032: LD_VAR 0 9
31036: PPUSH
31037: CALL_OW 266
31041: PUSH
31042: LD_INT 5
31044: EQUAL
31045: IFFALSE 31115
// begin if UnitsInside ( j ) < 3 then
31047: LD_VAR 0 9
31051: PPUSH
31052: CALL_OW 313
31056: PUSH
31057: LD_INT 3
31059: LESS
31060: IFFALSE 31096
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31062: LD_INT 0
31064: PPUSH
31065: LD_INT 5
31067: PUSH
31068: LD_INT 8
31070: PUSH
31071: LD_INT 9
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: PUSH
31079: LD_VAR 0 17
31083: ARRAY
31084: PPUSH
31085: LD_VAR 0 4
31089: PPUSH
31090: CALL_OW 380
31094: GO 31113
// PrepareHuman ( false , i , skill ) ;
31096: LD_INT 0
31098: PPUSH
31099: LD_VAR 0 8
31103: PPUSH
31104: LD_VAR 0 4
31108: PPUSH
31109: CALL_OW 380
// end else
31113: GO 31132
// PrepareHuman ( false , i , skill ) ;
31115: LD_INT 0
31117: PPUSH
31118: LD_VAR 0 8
31122: PPUSH
31123: LD_VAR 0 4
31127: PPUSH
31128: CALL_OW 380
// un := CreateHuman ;
31132: LD_ADDR_VAR 0 14
31136: PUSH
31137: CALL_OW 44
31141: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31142: LD_ADDR_VAR 0 7
31146: PUSH
31147: LD_VAR 0 7
31151: PPUSH
31152: LD_INT 1
31154: PPUSH
31155: LD_VAR 0 14
31159: PPUSH
31160: CALL_OW 2
31164: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31165: LD_VAR 0 14
31169: PPUSH
31170: LD_VAR 0 9
31174: PPUSH
31175: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31179: LD_VAR 0 9
31183: PPUSH
31184: CALL_OW 313
31188: PUSH
31189: LD_INT 6
31191: EQUAL
31192: IFTRUE 31216
31194: PUSH
31195: LD_VAR 0 9
31199: PPUSH
31200: CALL_OW 266
31204: PUSH
31205: LD_INT 32
31207: PUSH
31208: LD_INT 31
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: IN
31215: OR
31216: IFFALSE 31028
31218: GO 31025
31220: POP
31221: POP
// end else
31222: GO 31608
// for j = 1 to x do
31224: LD_ADDR_VAR 0 9
31228: PUSH
31229: DOUBLE
31230: LD_INT 1
31232: DEC
31233: ST_TO_ADDR
31234: LD_VAR 0 13
31238: PUSH
31239: FOR_TO
31240: IFFALSE 31606
// begin InitHc ;
31242: CALL_OW 19
// if not f then
31246: LD_VAR 0 12
31250: NOT
31251: IFFALSE 31340
// begin PrepareHuman ( false , i , skill ) ;
31253: LD_INT 0
31255: PPUSH
31256: LD_VAR 0 8
31260: PPUSH
31261: LD_VAR 0 4
31265: PPUSH
31266: CALL_OW 380
// un := CreateHuman ;
31270: LD_ADDR_VAR 0 14
31274: PUSH
31275: CALL_OW 44
31279: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31280: LD_ADDR_VAR 0 7
31284: PUSH
31285: LD_VAR 0 7
31289: PPUSH
31290: LD_INT 1
31292: PPUSH
31293: LD_VAR 0 14
31297: PPUSH
31298: CALL_OW 2
31302: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31303: LD_VAR 0 14
31307: PPUSH
31308: LD_VAR 0 1
31312: PPUSH
31313: CALL_OW 250
31317: PPUSH
31318: LD_VAR 0 1
31322: PPUSH
31323: CALL_OW 251
31327: PPUSH
31328: LD_INT 10
31330: PPUSH
31331: LD_INT 0
31333: PPUSH
31334: CALL_OW 50
// continue ;
31338: GO 31239
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31340: LD_VAR 0 12
31344: PUSH
31345: LD_INT 1
31347: ARRAY
31348: PPUSH
31349: CALL_OW 313
31353: IFFALSE 31381
31355: PUSH
31356: LD_VAR 0 12
31360: PUSH
31361: LD_INT 1
31363: ARRAY
31364: PPUSH
31365: CALL_OW 266
31369: PUSH
31370: LD_INT 32
31372: PUSH
31373: LD_INT 31
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: IN
31380: AND
31381: IFTRUE 31402
31383: PUSH
31384: LD_VAR 0 12
31388: PUSH
31389: LD_INT 1
31391: ARRAY
31392: PPUSH
31393: CALL_OW 313
31397: PUSH
31398: LD_INT 6
31400: EQUAL
31401: OR
31402: IFFALSE 31422
// f := Delete ( f , 1 ) ;
31404: LD_ADDR_VAR 0 12
31408: PUSH
31409: LD_VAR 0 12
31413: PPUSH
31414: LD_INT 1
31416: PPUSH
31417: CALL_OW 3
31421: ST_TO_ADDR
// if not f then
31422: LD_VAR 0 12
31426: NOT
31427: IFFALSE 31445
// begin x := x + 2 ;
31429: LD_ADDR_VAR 0 13
31433: PUSH
31434: LD_VAR 0 13
31438: PUSH
31439: LD_INT 2
31441: PLUS
31442: ST_TO_ADDR
// continue ;
31443: GO 31239
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31445: LD_VAR 0 12
31449: PUSH
31450: LD_INT 1
31452: ARRAY
31453: PPUSH
31454: CALL_OW 266
31458: PUSH
31459: LD_INT 5
31461: EQUAL
31462: IFFALSE 31536
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31464: LD_VAR 0 12
31468: PUSH
31469: LD_INT 1
31471: ARRAY
31472: PPUSH
31473: CALL_OW 313
31477: PUSH
31478: LD_INT 3
31480: LESS
31481: IFFALSE 31517
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31483: LD_INT 0
31485: PPUSH
31486: LD_INT 5
31488: PUSH
31489: LD_INT 8
31491: PUSH
31492: LD_INT 9
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: PUSH
31500: LD_VAR 0 17
31504: ARRAY
31505: PPUSH
31506: LD_VAR 0 4
31510: PPUSH
31511: CALL_OW 380
31515: GO 31534
// PrepareHuman ( false , i , skill ) ;
31517: LD_INT 0
31519: PPUSH
31520: LD_VAR 0 8
31524: PPUSH
31525: LD_VAR 0 4
31529: PPUSH
31530: CALL_OW 380
// end else
31534: GO 31553
// PrepareHuman ( false , i , skill ) ;
31536: LD_INT 0
31538: PPUSH
31539: LD_VAR 0 8
31543: PPUSH
31544: LD_VAR 0 4
31548: PPUSH
31549: CALL_OW 380
// un := CreateHuman ;
31553: LD_ADDR_VAR 0 14
31557: PUSH
31558: CALL_OW 44
31562: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31563: LD_ADDR_VAR 0 7
31567: PUSH
31568: LD_VAR 0 7
31572: PPUSH
31573: LD_INT 1
31575: PPUSH
31576: LD_VAR 0 14
31580: PPUSH
31581: CALL_OW 2
31585: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31586: LD_VAR 0 14
31590: PPUSH
31591: LD_VAR 0 12
31595: PUSH
31596: LD_INT 1
31598: ARRAY
31599: PPUSH
31600: CALL_OW 52
// end ;
31604: GO 31239
31606: POP
31607: POP
// end ;
31608: GO 30539
31610: POP
31611: POP
// result := result ^ buildings ;
31612: LD_ADDR_VAR 0 7
31616: PUSH
31617: LD_VAR 0 7
31621: PUSH
31622: LD_VAR 0 18
31626: ADD
31627: ST_TO_ADDR
// end else
31628: GO 31771
// begin for i = 1 to personel do
31630: LD_ADDR_VAR 0 8
31634: PUSH
31635: DOUBLE
31636: LD_INT 1
31638: DEC
31639: ST_TO_ADDR
31640: LD_VAR 0 6
31644: PUSH
31645: FOR_TO
31646: IFFALSE 31769
// begin if i > 4 then
31648: LD_VAR 0 8
31652: PUSH
31653: LD_INT 4
31655: GREATER
31656: IFFALSE 31660
// break ;
31658: GO 31769
// x := personel [ i ] ;
31660: LD_ADDR_VAR 0 13
31664: PUSH
31665: LD_VAR 0 6
31669: PUSH
31670: LD_VAR 0 8
31674: ARRAY
31675: ST_TO_ADDR
// if x = - 1 then
31676: LD_VAR 0 13
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: EQUAL
31685: IFFALSE 31689
// continue ;
31687: GO 31645
// PrepareHuman ( false , i , skill ) ;
31689: LD_INT 0
31691: PPUSH
31692: LD_VAR 0 8
31696: PPUSH
31697: LD_VAR 0 4
31701: PPUSH
31702: CALL_OW 380
// un := CreateHuman ;
31706: LD_ADDR_VAR 0 14
31710: PUSH
31711: CALL_OW 44
31715: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31716: LD_VAR 0 14
31720: PPUSH
31721: LD_VAR 0 1
31725: PPUSH
31726: CALL_OW 250
31730: PPUSH
31731: LD_VAR 0 1
31735: PPUSH
31736: CALL_OW 251
31740: PPUSH
31741: LD_INT 10
31743: PPUSH
31744: LD_INT 0
31746: PPUSH
31747: CALL_OW 50
// result := result ^ un ;
31751: LD_ADDR_VAR 0 7
31755: PUSH
31756: LD_VAR 0 7
31760: PUSH
31761: LD_VAR 0 14
31765: ADD
31766: ST_TO_ADDR
// end ;
31767: GO 31645
31769: POP
31770: POP
// end ; end ;
31771: LD_VAR 0 7
31775: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
31792: PPUSH
31793: PPUSH
// result := false ;
31794: LD_ADDR_VAR 0 3
31798: PUSH
31799: LD_INT 0
31801: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31802: LD_VAR 0 1
31806: NOT
31807: IFTRUE 31832
31809: PUSH
31810: LD_VAR 0 1
31814: PPUSH
31815: CALL_OW 266
31819: PUSH
31820: LD_INT 32
31822: PUSH
31823: LD_INT 33
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: IN
31830: NOT
31831: OR
31832: IFFALSE 31836
// exit ;
31834: GO 32971
// nat := GetNation ( tower ) ;
31836: LD_ADDR_VAR 0 12
31840: PUSH
31841: LD_VAR 0 1
31845: PPUSH
31846: CALL_OW 248
31850: ST_TO_ADDR
// side := GetSide ( tower ) ;
31851: LD_ADDR_VAR 0 16
31855: PUSH
31856: LD_VAR 0 1
31860: PPUSH
31861: CALL_OW 255
31865: ST_TO_ADDR
// x := GetX ( tower ) ;
31866: LD_ADDR_VAR 0 10
31870: PUSH
31871: LD_VAR 0 1
31875: PPUSH
31876: CALL_OW 250
31880: ST_TO_ADDR
// y := GetY ( tower ) ;
31881: LD_ADDR_VAR 0 11
31885: PUSH
31886: LD_VAR 0 1
31890: PPUSH
31891: CALL_OW 251
31895: ST_TO_ADDR
// if not x or not y then
31896: LD_VAR 0 10
31900: NOT
31901: IFTRUE 31910
31903: PUSH
31904: LD_VAR 0 11
31908: NOT
31909: OR
31910: IFFALSE 31914
// exit ;
31912: GO 32971
// weapon := 0 ;
31914: LD_ADDR_VAR 0 18
31918: PUSH
31919: LD_INT 0
31921: ST_TO_ADDR
// fac_list := [ ] ;
31922: LD_ADDR_VAR 0 17
31926: PUSH
31927: EMPTY
31928: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31929: LD_ADDR_VAR 0 6
31933: PUSH
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 274
31943: PPUSH
31944: LD_VAR 0 2
31948: PPUSH
31949: LD_INT 0
31951: PPUSH
31952: CALL 29506 0 3
31956: PPUSH
31957: LD_INT 30
31959: PUSH
31960: LD_INT 3
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PPUSH
31967: CALL_OW 72
31971: ST_TO_ADDR
// if not factories then
31972: LD_VAR 0 6
31976: NOT
31977: IFFALSE 31981
// exit ;
31979: GO 32971
// for i in factories do
31981: LD_ADDR_VAR 0 8
31985: PUSH
31986: LD_VAR 0 6
31990: PUSH
31991: FOR_IN
31992: IFFALSE 32017
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31994: LD_ADDR_VAR 0 17
31998: PUSH
31999: LD_VAR 0 17
32003: PUSH
32004: LD_VAR 0 8
32008: PPUSH
32009: CALL_OW 478
32013: UNION
32014: ST_TO_ADDR
32015: GO 31991
32017: POP
32018: POP
// if not fac_list then
32019: LD_VAR 0 17
32023: NOT
32024: IFFALSE 32028
// exit ;
32026: GO 32971
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32028: LD_ADDR_VAR 0 5
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: LD_INT 5
32038: PUSH
32039: LD_INT 9
32041: PUSH
32042: LD_INT 10
32044: PUSH
32045: LD_INT 6
32047: PUSH
32048: LD_INT 7
32050: PUSH
32051: LD_INT 11
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 27
32065: PUSH
32066: LD_INT 28
32068: PUSH
32069: LD_INT 26
32071: PUSH
32072: LD_INT 30
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 43
32083: PUSH
32084: LD_INT 44
32086: PUSH
32087: LD_INT 46
32089: PUSH
32090: LD_INT 45
32092: PUSH
32093: LD_INT 47
32095: PUSH
32096: LD_INT 49
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: LIST
32111: PUSH
32112: LD_VAR 0 12
32116: ARRAY
32117: ST_TO_ADDR
// list := list isect fac_list ;
32118: LD_ADDR_VAR 0 5
32122: PUSH
32123: LD_VAR 0 5
32127: PUSH
32128: LD_VAR 0 17
32132: ISECT
32133: ST_TO_ADDR
// if not list then
32134: LD_VAR 0 5
32138: NOT
32139: IFFALSE 32143
// exit ;
32141: GO 32971
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32143: LD_VAR 0 12
32147: PUSH
32148: LD_INT 3
32150: EQUAL
32151: IFFALSE 32163
32153: PUSH
32154: LD_INT 49
32156: PUSH
32157: LD_VAR 0 5
32161: IN
32162: AND
32163: IFFALSE 32183
32165: PUSH
32166: LD_INT 31
32168: PPUSH
32169: LD_VAR 0 16
32173: PPUSH
32174: CALL_OW 321
32178: PUSH
32179: LD_INT 2
32181: EQUAL
32182: AND
32183: IFFALSE 32243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32185: LD_INT 22
32187: PUSH
32188: LD_VAR 0 16
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 35
32199: PUSH
32200: LD_INT 49
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 91
32209: PUSH
32210: LD_VAR 0 1
32214: PUSH
32215: LD_INT 10
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: LIST
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: LIST
32227: PPUSH
32228: CALL_OW 69
32232: NOT
32233: IFFALSE 32243
// weapon := ru_time_lapser ;
32235: LD_ADDR_VAR 0 18
32239: PUSH
32240: LD_INT 49
32242: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32243: LD_VAR 0 12
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: IN
32258: IFFALSE 32282
32260: PUSH
32261: LD_INT 11
32263: PUSH
32264: LD_VAR 0 5
32268: IN
32269: IFTRUE 32281
32271: PUSH
32272: LD_INT 30
32274: PUSH
32275: LD_VAR 0 5
32279: IN
32280: OR
32281: AND
32282: IFFALSE 32302
32284: PUSH
32285: LD_INT 6
32287: PPUSH
32288: LD_VAR 0 16
32292: PPUSH
32293: CALL_OW 321
32297: PUSH
32298: LD_INT 2
32300: EQUAL
32301: AND
32302: IFFALSE 32469
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32304: LD_INT 22
32306: PUSH
32307: LD_VAR 0 16
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: LD_INT 35
32321: PUSH
32322: LD_INT 11
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 35
32331: PUSH
32332: LD_INT 30
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 91
32346: PUSH
32347: LD_VAR 0 1
32351: PUSH
32352: LD_INT 18
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: PPUSH
32365: CALL_OW 69
32369: NOT
32370: IFFALSE 32446
32372: PUSH
32373: LD_INT 22
32375: PUSH
32376: LD_VAR 0 16
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: LD_INT 30
32390: PUSH
32391: LD_INT 32
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 30
32400: PUSH
32401: LD_INT 33
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 91
32415: PUSH
32416: LD_VAR 0 1
32420: PUSH
32421: LD_INT 12
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: PPUSH
32437: CALL_OW 69
32441: PUSH
32442: LD_INT 2
32444: GREATER
32445: AND
32446: IFFALSE 32469
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32448: LD_ADDR_VAR 0 18
32452: PUSH
32453: LD_INT 11
32455: PUSH
32456: LD_INT 30
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_VAR 0 12
32467: ARRAY
32468: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32469: LD_VAR 0 18
32473: NOT
32474: IFFALSE 32494
32476: PUSH
32477: LD_INT 40
32479: PPUSH
32480: LD_VAR 0 16
32484: PPUSH
32485: CALL_OW 321
32489: PUSH
32490: LD_INT 2
32492: EQUAL
32493: AND
32494: IFFALSE 32530
32496: PUSH
32497: LD_INT 7
32499: PUSH
32500: LD_VAR 0 5
32504: IN
32505: IFTRUE 32517
32507: PUSH
32508: LD_INT 28
32510: PUSH
32511: LD_VAR 0 5
32515: IN
32516: OR
32517: IFTRUE 32529
32519: PUSH
32520: LD_INT 45
32522: PUSH
32523: LD_VAR 0 5
32527: IN
32528: OR
32529: AND
32530: IFFALSE 32784
// begin hex := GetHexInfo ( x , y ) ;
32532: LD_ADDR_VAR 0 4
32536: PUSH
32537: LD_VAR 0 10
32541: PPUSH
32542: LD_VAR 0 11
32546: PPUSH
32547: CALL_OW 546
32551: ST_TO_ADDR
// if hex [ 1 ] then
32552: LD_VAR 0 4
32556: PUSH
32557: LD_INT 1
32559: ARRAY
32560: IFFALSE 32564
// exit ;
32562: GO 32971
// height := hex [ 2 ] ;
32564: LD_ADDR_VAR 0 15
32568: PUSH
32569: LD_VAR 0 4
32573: PUSH
32574: LD_INT 2
32576: ARRAY
32577: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32578: LD_ADDR_VAR 0 14
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: LD_INT 5
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// for i in tmp do
32601: LD_ADDR_VAR 0 8
32605: PUSH
32606: LD_VAR 0 14
32610: PUSH
32611: FOR_IN
32612: IFFALSE 32782
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32614: LD_ADDR_VAR 0 9
32618: PUSH
32619: LD_VAR 0 10
32623: PPUSH
32624: LD_VAR 0 8
32628: PPUSH
32629: LD_INT 5
32631: PPUSH
32632: CALL_OW 272
32636: PUSH
32637: LD_VAR 0 11
32641: PPUSH
32642: LD_VAR 0 8
32646: PPUSH
32647: LD_INT 5
32649: PPUSH
32650: CALL_OW 273
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32659: LD_VAR 0 9
32663: PUSH
32664: LD_INT 1
32666: ARRAY
32667: PPUSH
32668: LD_VAR 0 9
32672: PUSH
32673: LD_INT 2
32675: ARRAY
32676: PPUSH
32677: CALL_OW 488
32681: IFFALSE 32780
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32683: LD_ADDR_VAR 0 4
32687: PUSH
32688: LD_VAR 0 9
32692: PUSH
32693: LD_INT 1
32695: ARRAY
32696: PPUSH
32697: LD_VAR 0 9
32701: PUSH
32702: LD_INT 2
32704: ARRAY
32705: PPUSH
32706: CALL_OW 546
32710: ST_TO_ADDR
// if hex [ 1 ] then
32711: LD_VAR 0 4
32715: PUSH
32716: LD_INT 1
32718: ARRAY
32719: IFFALSE 32723
// continue ;
32721: GO 32611
// h := hex [ 2 ] ;
32723: LD_ADDR_VAR 0 13
32727: PUSH
32728: LD_VAR 0 4
32732: PUSH
32733: LD_INT 2
32735: ARRAY
32736: ST_TO_ADDR
// if h + 7 < height then
32737: LD_VAR 0 13
32741: PUSH
32742: LD_INT 7
32744: PLUS
32745: PUSH
32746: LD_VAR 0 15
32750: LESS
32751: IFFALSE 32780
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32753: LD_ADDR_VAR 0 18
32757: PUSH
32758: LD_INT 7
32760: PUSH
32761: LD_INT 28
32763: PUSH
32764: LD_INT 45
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: PUSH
32772: LD_VAR 0 12
32776: ARRAY
32777: ST_TO_ADDR
// break ;
32778: GO 32782
// end ; end ; end ;
32780: GO 32611
32782: POP
32783: POP
// end ; if not weapon then
32784: LD_VAR 0 18
32788: NOT
32789: IFFALSE 32849
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32791: LD_ADDR_VAR 0 5
32795: PUSH
32796: LD_VAR 0 5
32800: PUSH
32801: LD_INT 11
32803: PUSH
32804: LD_INT 30
32806: PUSH
32807: LD_INT 49
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: LIST
32814: DIFF
32815: ST_TO_ADDR
// if not list then
32816: LD_VAR 0 5
32820: NOT
32821: IFFALSE 32825
// exit ;
32823: GO 32971
// weapon := list [ rand ( 1 , list ) ] ;
32825: LD_ADDR_VAR 0 18
32829: PUSH
32830: LD_VAR 0 5
32834: PUSH
32835: LD_INT 1
32837: PPUSH
32838: LD_VAR 0 5
32842: PPUSH
32843: CALL_OW 12
32847: ARRAY
32848: ST_TO_ADDR
// end ; if weapon then
32849: LD_VAR 0 18
32853: IFFALSE 32971
// begin tmp := CostOfWeapon ( weapon ) ;
32855: LD_ADDR_VAR 0 14
32859: PUSH
32860: LD_VAR 0 18
32864: PPUSH
32865: CALL_OW 451
32869: ST_TO_ADDR
// j := GetBase ( tower ) ;
32870: LD_ADDR_VAR 0 9
32874: PUSH
32875: LD_VAR 0 1
32879: PPUSH
32880: CALL_OW 274
32884: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32885: LD_VAR 0 9
32889: PPUSH
32890: LD_INT 1
32892: PPUSH
32893: CALL_OW 275
32897: PUSH
32898: LD_VAR 0 14
32902: PUSH
32903: LD_INT 1
32905: ARRAY
32906: GREATEREQUAL
32907: IFFALSE 32933
32909: PUSH
32910: LD_VAR 0 9
32914: PPUSH
32915: LD_INT 2
32917: PPUSH
32918: CALL_OW 275
32922: PUSH
32923: LD_VAR 0 14
32927: PUSH
32928: LD_INT 2
32930: ARRAY
32931: GREATEREQUAL
32932: AND
32933: IFFALSE 32959
32935: PUSH
32936: LD_VAR 0 9
32940: PPUSH
32941: LD_INT 3
32943: PPUSH
32944: CALL_OW 275
32948: PUSH
32949: LD_VAR 0 14
32953: PUSH
32954: LD_INT 3
32956: ARRAY
32957: GREATEREQUAL
32958: AND
32959: IFFALSE 32971
// result := weapon ;
32961: LD_ADDR_VAR 0 3
32965: PUSH
32966: LD_VAR 0 18
32970: ST_TO_ADDR
// end ; end ;
32971: LD_VAR 0 3
32975: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
// result := true ;
32980: LD_ADDR_VAR 0 3
32984: PUSH
32985: LD_INT 1
32987: ST_TO_ADDR
// if array1 = array2 then
32988: LD_VAR 0 1
32992: PUSH
32993: LD_VAR 0 2
32997: EQUAL
32998: IFFALSE 33058
// begin for i = 1 to array1 do
33000: LD_ADDR_VAR 0 4
33004: PUSH
33005: DOUBLE
33006: LD_INT 1
33008: DEC
33009: ST_TO_ADDR
33010: LD_VAR 0 1
33014: PUSH
33015: FOR_TO
33016: IFFALSE 33054
// if array1 [ i ] <> array2 [ i ] then
33018: LD_VAR 0 1
33022: PUSH
33023: LD_VAR 0 4
33027: ARRAY
33028: PUSH
33029: LD_VAR 0 2
33033: PUSH
33034: LD_VAR 0 4
33038: ARRAY
33039: NONEQUAL
33040: IFFALSE 33052
// begin result := false ;
33042: LD_ADDR_VAR 0 3
33046: PUSH
33047: LD_INT 0
33049: ST_TO_ADDR
// break ;
33050: GO 33054
// end ;
33052: GO 33015
33054: POP
33055: POP
// end else
33056: GO 33066
// result := false ;
33058: LD_ADDR_VAR 0 3
33062: PUSH
33063: LD_INT 0
33065: ST_TO_ADDR
// end ;
33066: LD_VAR 0 3
33070: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33071: LD_INT 0
33073: PPUSH
33074: PPUSH
// if not array1 or not array2 then
33075: LD_VAR 0 1
33079: NOT
33080: IFTRUE 33089
33082: PUSH
33083: LD_VAR 0 2
33087: NOT
33088: OR
33089: IFFALSE 33093
// exit ;
33091: GO 33157
// result := true ;
33093: LD_ADDR_VAR 0 3
33097: PUSH
33098: LD_INT 1
33100: ST_TO_ADDR
// for i = 1 to array1 do
33101: LD_ADDR_VAR 0 4
33105: PUSH
33106: DOUBLE
33107: LD_INT 1
33109: DEC
33110: ST_TO_ADDR
33111: LD_VAR 0 1
33115: PUSH
33116: FOR_TO
33117: IFFALSE 33155
// if array1 [ i ] <> array2 [ i ] then
33119: LD_VAR 0 1
33123: PUSH
33124: LD_VAR 0 4
33128: ARRAY
33129: PUSH
33130: LD_VAR 0 2
33134: PUSH
33135: LD_VAR 0 4
33139: ARRAY
33140: NONEQUAL
33141: IFFALSE 33153
// begin result := false ;
33143: LD_ADDR_VAR 0 3
33147: PUSH
33148: LD_INT 0
33150: ST_TO_ADDR
// break ;
33151: GO 33155
// end ;
33153: GO 33116
33155: POP
33156: POP
// end ;
33157: LD_VAR 0 3
33161: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33162: LD_INT 0
33164: PPUSH
33165: PPUSH
33166: PPUSH
// pom := GetBase ( fac ) ;
33167: LD_ADDR_VAR 0 5
33171: PUSH
33172: LD_VAR 0 1
33176: PPUSH
33177: CALL_OW 274
33181: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33182: LD_ADDR_VAR 0 4
33186: PUSH
33187: LD_VAR 0 2
33191: PUSH
33192: LD_INT 1
33194: ARRAY
33195: PPUSH
33196: LD_VAR 0 2
33200: PUSH
33201: LD_INT 2
33203: ARRAY
33204: PPUSH
33205: LD_VAR 0 2
33209: PUSH
33210: LD_INT 3
33212: ARRAY
33213: PPUSH
33214: LD_VAR 0 2
33218: PUSH
33219: LD_INT 4
33221: ARRAY
33222: PPUSH
33223: CALL_OW 449
33227: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_VAR 0 5
33237: PPUSH
33238: LD_INT 1
33240: PPUSH
33241: CALL_OW 275
33245: PUSH
33246: LD_VAR 0 4
33250: PUSH
33251: LD_INT 1
33253: ARRAY
33254: GREATEREQUAL
33255: IFFALSE 33281
33257: PUSH
33258: LD_VAR 0 5
33262: PPUSH
33263: LD_INT 2
33265: PPUSH
33266: CALL_OW 275
33270: PUSH
33271: LD_VAR 0 4
33275: PUSH
33276: LD_INT 2
33278: ARRAY
33279: GREATEREQUAL
33280: AND
33281: IFFALSE 33307
33283: PUSH
33284: LD_VAR 0 5
33288: PPUSH
33289: LD_INT 3
33291: PPUSH
33292: CALL_OW 275
33296: PUSH
33297: LD_VAR 0 4
33301: PUSH
33302: LD_INT 3
33304: ARRAY
33305: GREATEREQUAL
33306: AND
33307: ST_TO_ADDR
// end ;
33308: LD_VAR 0 3
33312: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33313: LD_INT 0
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
// pom := GetBase ( building ) ;
33319: LD_ADDR_VAR 0 3
33323: PUSH
33324: LD_VAR 0 1
33328: PPUSH
33329: CALL_OW 274
33333: ST_TO_ADDR
// if not pom then
33334: LD_VAR 0 3
33338: NOT
33339: IFFALSE 33343
// exit ;
33341: GO 33517
// btype := GetBType ( building ) ;
33343: LD_ADDR_VAR 0 5
33347: PUSH
33348: LD_VAR 0 1
33352: PPUSH
33353: CALL_OW 266
33357: ST_TO_ADDR
// if btype = b_armoury then
33358: LD_VAR 0 5
33362: PUSH
33363: LD_INT 4
33365: EQUAL
33366: IFFALSE 33376
// btype := b_barracks ;
33368: LD_ADDR_VAR 0 5
33372: PUSH
33373: LD_INT 5
33375: ST_TO_ADDR
// if btype = b_depot then
33376: LD_VAR 0 5
33380: PUSH
33381: LD_INT 0
33383: EQUAL
33384: IFFALSE 33394
// btype := b_warehouse ;
33386: LD_ADDR_VAR 0 5
33390: PUSH
33391: LD_INT 1
33393: ST_TO_ADDR
// if btype = b_workshop then
33394: LD_VAR 0 5
33398: PUSH
33399: LD_INT 2
33401: EQUAL
33402: IFFALSE 33412
// btype := b_factory ;
33404: LD_ADDR_VAR 0 5
33408: PUSH
33409: LD_INT 3
33411: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33412: LD_ADDR_VAR 0 4
33416: PUSH
33417: LD_VAR 0 5
33421: PPUSH
33422: LD_VAR 0 1
33426: PPUSH
33427: CALL_OW 248
33431: PPUSH
33432: CALL_OW 450
33436: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33437: LD_ADDR_VAR 0 2
33441: PUSH
33442: LD_VAR 0 3
33446: PPUSH
33447: LD_INT 1
33449: PPUSH
33450: CALL_OW 275
33454: PUSH
33455: LD_VAR 0 4
33459: PUSH
33460: LD_INT 1
33462: ARRAY
33463: GREATEREQUAL
33464: IFFALSE 33490
33466: PUSH
33467: LD_VAR 0 3
33471: PPUSH
33472: LD_INT 2
33474: PPUSH
33475: CALL_OW 275
33479: PUSH
33480: LD_VAR 0 4
33484: PUSH
33485: LD_INT 2
33487: ARRAY
33488: GREATEREQUAL
33489: AND
33490: IFFALSE 33516
33492: PUSH
33493: LD_VAR 0 3
33497: PPUSH
33498: LD_INT 3
33500: PPUSH
33501: CALL_OW 275
33505: PUSH
33506: LD_VAR 0 4
33510: PUSH
33511: LD_INT 3
33513: ARRAY
33514: GREATEREQUAL
33515: AND
33516: ST_TO_ADDR
// end ;
33517: LD_VAR 0 2
33521: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33522: LD_INT 0
33524: PPUSH
33525: PPUSH
33526: PPUSH
// pom := GetBase ( building ) ;
33527: LD_ADDR_VAR 0 4
33531: PUSH
33532: LD_VAR 0 1
33536: PPUSH
33537: CALL_OW 274
33541: ST_TO_ADDR
// if not pom then
33542: LD_VAR 0 4
33546: NOT
33547: IFFALSE 33551
// exit ;
33549: GO 33656
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33551: LD_ADDR_VAR 0 5
33555: PUSH
33556: LD_VAR 0 2
33560: PPUSH
33561: LD_VAR 0 1
33565: PPUSH
33566: CALL_OW 248
33570: PPUSH
33571: CALL_OW 450
33575: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33576: LD_ADDR_VAR 0 3
33580: PUSH
33581: LD_VAR 0 4
33585: PPUSH
33586: LD_INT 1
33588: PPUSH
33589: CALL_OW 275
33593: PUSH
33594: LD_VAR 0 5
33598: PUSH
33599: LD_INT 1
33601: ARRAY
33602: GREATEREQUAL
33603: IFFALSE 33629
33605: PUSH
33606: LD_VAR 0 4
33610: PPUSH
33611: LD_INT 2
33613: PPUSH
33614: CALL_OW 275
33618: PUSH
33619: LD_VAR 0 5
33623: PUSH
33624: LD_INT 2
33626: ARRAY
33627: GREATEREQUAL
33628: AND
33629: IFFALSE 33655
33631: PUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: LD_INT 3
33639: PPUSH
33640: CALL_OW 275
33644: PUSH
33645: LD_VAR 0 5
33649: PUSH
33650: LD_INT 3
33652: ARRAY
33653: GREATEREQUAL
33654: AND
33655: ST_TO_ADDR
// end ;
33656: LD_VAR 0 3
33660: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33661: LD_INT 0
33663: PPUSH
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
// result := false ;
33674: LD_ADDR_VAR 0 8
33678: PUSH
33679: LD_INT 0
33681: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33682: LD_VAR 0 5
33686: NOT
33687: IFTRUE 33696
33689: PUSH
33690: LD_VAR 0 1
33694: NOT
33695: OR
33696: IFTRUE 33705
33698: PUSH
33699: LD_VAR 0 2
33703: NOT
33704: OR
33705: IFTRUE 33714
33707: PUSH
33708: LD_VAR 0 3
33712: NOT
33713: OR
33714: IFFALSE 33718
// exit ;
33716: GO 34544
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33718: LD_ADDR_VAR 0 14
33722: PUSH
33723: LD_VAR 0 1
33727: PPUSH
33728: LD_VAR 0 2
33732: PPUSH
33733: LD_VAR 0 3
33737: PPUSH
33738: LD_VAR 0 4
33742: PPUSH
33743: LD_VAR 0 5
33747: PUSH
33748: LD_INT 1
33750: ARRAY
33751: PPUSH
33752: CALL_OW 248
33756: PPUSH
33757: LD_INT 0
33759: PPUSH
33760: CALL 35825 0 6
33764: ST_TO_ADDR
// if not hexes then
33765: LD_VAR 0 14
33769: NOT
33770: IFFALSE 33774
// exit ;
33772: GO 34544
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33774: LD_ADDR_VAR 0 17
33778: PUSH
33779: LD_VAR 0 5
33783: PPUSH
33784: LD_INT 22
33786: PUSH
33787: LD_VAR 0 13
33791: PPUSH
33792: CALL_OW 255
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 30
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 30
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PPUSH
33833: CALL_OW 72
33837: ST_TO_ADDR
// for i = 1 to hexes do
33838: LD_ADDR_VAR 0 9
33842: PUSH
33843: DOUBLE
33844: LD_INT 1
33846: DEC
33847: ST_TO_ADDR
33848: LD_VAR 0 14
33852: PUSH
33853: FOR_TO
33854: IFFALSE 34542
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33856: LD_ADDR_VAR 0 13
33860: PUSH
33861: LD_VAR 0 14
33865: PUSH
33866: LD_VAR 0 9
33870: ARRAY
33871: PUSH
33872: LD_INT 1
33874: ARRAY
33875: PPUSH
33876: LD_VAR 0 14
33880: PUSH
33881: LD_VAR 0 9
33885: ARRAY
33886: PUSH
33887: LD_INT 2
33889: ARRAY
33890: PPUSH
33891: CALL_OW 428
33895: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33896: LD_VAR 0 14
33900: PUSH
33901: LD_VAR 0 9
33905: ARRAY
33906: PUSH
33907: LD_INT 1
33909: ARRAY
33910: PPUSH
33911: LD_VAR 0 14
33915: PUSH
33916: LD_VAR 0 9
33920: ARRAY
33921: PUSH
33922: LD_INT 2
33924: ARRAY
33925: PPUSH
33926: CALL_OW 351
33930: IFTRUE 33969
33932: PUSH
33933: LD_VAR 0 14
33937: PUSH
33938: LD_VAR 0 9
33942: ARRAY
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: PPUSH
33948: LD_VAR 0 14
33952: PUSH
33953: LD_VAR 0 9
33957: ARRAY
33958: PUSH
33959: LD_INT 2
33961: ARRAY
33962: PPUSH
33963: CALL_OW 488
33967: NOT
33968: OR
33969: IFTRUE 33986
33971: PUSH
33972: LD_VAR 0 13
33976: PPUSH
33977: CALL_OW 247
33981: PUSH
33982: LD_INT 3
33984: EQUAL
33985: OR
33986: IFFALSE 33992
// exit ;
33988: POP
33989: POP
33990: GO 34544
// if not tmp then
33992: LD_VAR 0 13
33996: NOT
33997: IFFALSE 34001
// continue ;
33999: GO 33853
// result := true ;
34001: LD_ADDR_VAR 0 8
34005: PUSH
34006: LD_INT 1
34008: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34009: LD_VAR 0 6
34013: IFFALSE 34030
34015: PUSH
34016: LD_VAR 0 13
34020: PPUSH
34021: CALL_OW 247
34025: PUSH
34026: LD_INT 2
34028: EQUAL
34029: AND
34030: IFFALSE 34047
34032: PUSH
34033: LD_VAR 0 13
34037: PPUSH
34038: CALL_OW 263
34042: PUSH
34043: LD_INT 1
34045: EQUAL
34046: AND
34047: IFFALSE 34211
// begin if IsDrivenBy ( tmp ) then
34049: LD_VAR 0 13
34053: PPUSH
34054: CALL_OW 311
34058: IFFALSE 34062
// continue ;
34060: GO 33853
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34062: LD_VAR 0 6
34066: PPUSH
34067: LD_INT 3
34069: PUSH
34070: LD_INT 60
34072: PUSH
34073: EMPTY
34074: LIST
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: LD_INT 55
34085: PUSH
34086: EMPTY
34087: LIST
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PPUSH
34097: CALL_OW 72
34101: IFFALSE 34209
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34103: LD_ADDR_VAR 0 18
34107: PUSH
34108: LD_VAR 0 6
34112: PPUSH
34113: LD_INT 3
34115: PUSH
34116: LD_INT 60
34118: PUSH
34119: EMPTY
34120: LIST
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 3
34128: PUSH
34129: LD_INT 55
34131: PUSH
34132: EMPTY
34133: LIST
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PPUSH
34143: CALL_OW 72
34147: PUSH
34148: LD_INT 1
34150: ARRAY
34151: ST_TO_ADDR
// if IsInUnit ( driver ) then
34152: LD_VAR 0 18
34156: PPUSH
34157: CALL_OW 310
34161: IFFALSE 34172
// ComExit ( driver ) ;
34163: LD_VAR 0 18
34167: PPUSH
34168: CALL 59825 0 1
// AddComEnterUnit ( driver , tmp ) ;
34172: LD_VAR 0 18
34176: PPUSH
34177: LD_VAR 0 13
34181: PPUSH
34182: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34186: LD_VAR 0 18
34190: PPUSH
34191: LD_VAR 0 7
34195: PPUSH
34196: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34200: LD_VAR 0 18
34204: PPUSH
34205: CALL_OW 181
// end ; continue ;
34209: GO 33853
// end ; if not cleaners or not tmp in cleaners then
34211: LD_VAR 0 6
34215: NOT
34216: IFTRUE 34231
34218: PUSH
34219: LD_VAR 0 13
34223: PUSH
34224: LD_VAR 0 6
34228: IN
34229: NOT
34230: OR
34231: IFFALSE 34540
// begin if dep then
34233: LD_VAR 0 17
34237: IFFALSE 34373
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34239: LD_ADDR_VAR 0 16
34243: PUSH
34244: LD_VAR 0 17
34248: PUSH
34249: LD_INT 1
34251: ARRAY
34252: PPUSH
34253: CALL_OW 250
34257: PPUSH
34258: LD_VAR 0 17
34262: PUSH
34263: LD_INT 1
34265: ARRAY
34266: PPUSH
34267: CALL_OW 254
34271: PPUSH
34272: LD_INT 5
34274: PPUSH
34275: CALL_OW 272
34279: PUSH
34280: LD_VAR 0 17
34284: PUSH
34285: LD_INT 1
34287: ARRAY
34288: PPUSH
34289: CALL_OW 251
34293: PPUSH
34294: LD_VAR 0 17
34298: PUSH
34299: LD_INT 1
34301: ARRAY
34302: PPUSH
34303: CALL_OW 254
34307: PPUSH
34308: LD_INT 5
34310: PPUSH
34311: CALL_OW 273
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34320: LD_VAR 0 16
34324: PUSH
34325: LD_INT 1
34327: ARRAY
34328: PPUSH
34329: LD_VAR 0 16
34333: PUSH
34334: LD_INT 2
34336: ARRAY
34337: PPUSH
34338: CALL_OW 488
34342: IFFALSE 34373
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34344: LD_VAR 0 13
34348: PPUSH
34349: LD_VAR 0 16
34353: PUSH
34354: LD_INT 1
34356: ARRAY
34357: PPUSH
34358: LD_VAR 0 16
34362: PUSH
34363: LD_INT 2
34365: ARRAY
34366: PPUSH
34367: CALL_OW 111
// continue ;
34371: GO 33853
// end ; end ; r := GetDir ( tmp ) ;
34373: LD_ADDR_VAR 0 15
34377: PUSH
34378: LD_VAR 0 13
34382: PPUSH
34383: CALL_OW 254
34387: ST_TO_ADDR
// if r = 5 then
34388: LD_VAR 0 15
34392: PUSH
34393: LD_INT 5
34395: EQUAL
34396: IFFALSE 34406
// r := 0 ;
34398: LD_ADDR_VAR 0 15
34402: PUSH
34403: LD_INT 0
34405: ST_TO_ADDR
// for j = r to 5 do
34406: LD_ADDR_VAR 0 10
34410: PUSH
34411: DOUBLE
34412: LD_VAR 0 15
34416: DEC
34417: ST_TO_ADDR
34418: LD_INT 5
34420: PUSH
34421: FOR_TO
34422: IFFALSE 34538
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34424: LD_ADDR_VAR 0 11
34428: PUSH
34429: LD_VAR 0 13
34433: PPUSH
34434: CALL_OW 250
34438: PPUSH
34439: LD_VAR 0 10
34443: PPUSH
34444: LD_INT 2
34446: PPUSH
34447: CALL_OW 272
34451: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34452: LD_ADDR_VAR 0 12
34456: PUSH
34457: LD_VAR 0 13
34461: PPUSH
34462: CALL_OW 251
34466: PPUSH
34467: LD_VAR 0 10
34471: PPUSH
34472: LD_INT 2
34474: PPUSH
34475: CALL_OW 273
34479: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34480: LD_VAR 0 11
34484: PPUSH
34485: LD_VAR 0 12
34489: PPUSH
34490: CALL_OW 488
34494: IFFALSE 34513
34496: PUSH
34497: LD_VAR 0 11
34501: PPUSH
34502: LD_VAR 0 12
34506: PPUSH
34507: CALL_OW 428
34511: NOT
34512: AND
34513: IFFALSE 34536
// begin ComMoveXY ( tmp , _x , _y ) ;
34515: LD_VAR 0 13
34519: PPUSH
34520: LD_VAR 0 11
34524: PPUSH
34525: LD_VAR 0 12
34529: PPUSH
34530: CALL_OW 111
// break ;
34534: GO 34538
// end ; end ;
34536: GO 34421
34538: POP
34539: POP
// end ; end ;
34540: GO 33853
34542: POP
34543: POP
// end ;
34544: LD_VAR 0 8
34548: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34549: LD_INT 0
34551: PPUSH
// result := true ;
34552: LD_ADDR_VAR 0 3
34556: PUSH
34557: LD_INT 1
34559: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34560: LD_VAR 0 2
34564: PUSH
34565: LD_INT 24
34567: DOUBLE
34568: EQUAL
34569: IFTRUE 34579
34571: LD_INT 33
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34579
34577: GO 34604
34579: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34580: LD_ADDR_VAR 0 3
34584: PUSH
34585: LD_INT 32
34587: PPUSH
34588: LD_VAR 0 1
34592: PPUSH
34593: CALL_OW 321
34597: PUSH
34598: LD_INT 2
34600: EQUAL
34601: ST_TO_ADDR
34602: GO 34920
34604: LD_INT 20
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34637
34612: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_INT 6
34620: PPUSH
34621: LD_VAR 0 1
34625: PPUSH
34626: CALL_OW 321
34630: PUSH
34631: LD_INT 2
34633: EQUAL
34634: ST_TO_ADDR
34635: GO 34920
34637: LD_INT 22
34639: DOUBLE
34640: EQUAL
34641: IFTRUE 34651
34643: LD_INT 36
34645: DOUBLE
34646: EQUAL
34647: IFTRUE 34651
34649: GO 34676
34651: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34652: LD_ADDR_VAR 0 3
34656: PUSH
34657: LD_INT 15
34659: PPUSH
34660: LD_VAR 0 1
34664: PPUSH
34665: CALL_OW 321
34669: PUSH
34670: LD_INT 2
34672: EQUAL
34673: ST_TO_ADDR
34674: GO 34920
34676: LD_INT 30
34678: DOUBLE
34679: EQUAL
34680: IFTRUE 34684
34682: GO 34709
34684: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34685: LD_ADDR_VAR 0 3
34689: PUSH
34690: LD_INT 20
34692: PPUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 321
34702: PUSH
34703: LD_INT 2
34705: EQUAL
34706: ST_TO_ADDR
34707: GO 34920
34709: LD_INT 28
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34723
34715: LD_INT 21
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34723
34721: GO 34748
34723: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: LD_INT 21
34731: PPUSH
34732: LD_VAR 0 1
34736: PPUSH
34737: CALL_OW 321
34741: PUSH
34742: LD_INT 2
34744: EQUAL
34745: ST_TO_ADDR
34746: GO 34920
34748: LD_INT 16
34750: DOUBLE
34751: EQUAL
34752: IFTRUE 34756
34754: GO 34781
34756: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34757: LD_ADDR_VAR 0 3
34761: PUSH
34762: LD_INT 84
34764: PPUSH
34765: LD_VAR 0 1
34769: PPUSH
34770: CALL_OW 321
34774: PUSH
34775: LD_INT 2
34777: EQUAL
34778: ST_TO_ADDR
34779: GO 34920
34781: LD_INT 19
34783: DOUBLE
34784: EQUAL
34785: IFTRUE 34795
34787: LD_INT 23
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 34820
34795: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34796: LD_ADDR_VAR 0 3
34800: PUSH
34801: LD_INT 83
34803: PPUSH
34804: LD_VAR 0 1
34808: PPUSH
34809: CALL_OW 321
34813: PUSH
34814: LD_INT 2
34816: EQUAL
34817: ST_TO_ADDR
34818: GO 34920
34820: LD_INT 17
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34828
34826: GO 34853
34828: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34829: LD_ADDR_VAR 0 3
34833: PUSH
34834: LD_INT 39
34836: PPUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 321
34846: PUSH
34847: LD_INT 2
34849: EQUAL
34850: ST_TO_ADDR
34851: GO 34920
34853: LD_INT 18
34855: DOUBLE
34856: EQUAL
34857: IFTRUE 34861
34859: GO 34886
34861: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34862: LD_ADDR_VAR 0 3
34866: PUSH
34867: LD_INT 40
34869: PPUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: CALL_OW 321
34879: PUSH
34880: LD_INT 2
34882: EQUAL
34883: ST_TO_ADDR
34884: GO 34920
34886: LD_INT 27
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34894
34892: GO 34919
34894: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34895: LD_ADDR_VAR 0 3
34899: PUSH
34900: LD_INT 35
34902: PPUSH
34903: LD_VAR 0 1
34907: PPUSH
34908: CALL_OW 321
34912: PUSH
34913: LD_INT 2
34915: EQUAL
34916: ST_TO_ADDR
34917: GO 34920
34919: POP
// end ;
34920: LD_VAR 0 3
34924: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34925: LD_INT 0
34927: PPUSH
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
34932: PPUSH
34933: PPUSH
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
// result := false ;
34938: LD_ADDR_VAR 0 6
34942: PUSH
34943: LD_INT 0
34945: ST_TO_ADDR
// if btype = b_depot then
34946: LD_VAR 0 2
34950: PUSH
34951: LD_INT 0
34953: EQUAL
34954: IFFALSE 34966
// begin result := true ;
34956: LD_ADDR_VAR 0 6
34960: PUSH
34961: LD_INT 1
34963: ST_TO_ADDR
// exit ;
34964: GO 35820
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34966: LD_VAR 0 1
34970: NOT
34971: IFTRUE 34996
34973: PUSH
34974: LD_VAR 0 1
34978: PPUSH
34979: CALL_OW 266
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: IN
34994: NOT
34995: OR
34996: IFTRUE 35005
34998: PUSH
34999: LD_VAR 0 2
35003: NOT
35004: OR
35005: IFTRUE 35041
35007: PUSH
35008: LD_VAR 0 5
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: LD_INT 3
35024: PUSH
35025: LD_INT 4
35027: PUSH
35028: LD_INT 5
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: IN
35039: NOT
35040: OR
35041: IFTRUE 35060
35043: PUSH
35044: LD_VAR 0 3
35048: PPUSH
35049: LD_VAR 0 4
35053: PPUSH
35054: CALL_OW 488
35058: NOT
35059: OR
35060: IFFALSE 35064
// exit ;
35062: GO 35820
// side := GetSide ( depot ) ;
35064: LD_ADDR_VAR 0 9
35068: PUSH
35069: LD_VAR 0 1
35073: PPUSH
35074: CALL_OW 255
35078: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35079: LD_VAR 0 9
35083: PPUSH
35084: LD_VAR 0 2
35088: PPUSH
35089: CALL 34549 0 2
35093: NOT
35094: IFFALSE 35098
// exit ;
35096: GO 35820
// pom := GetBase ( depot ) ;
35098: LD_ADDR_VAR 0 10
35102: PUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL_OW 274
35112: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35113: LD_ADDR_VAR 0 11
35117: PUSH
35118: LD_VAR 0 2
35122: PPUSH
35123: LD_VAR 0 1
35127: PPUSH
35128: CALL_OW 248
35132: PPUSH
35133: CALL_OW 450
35137: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35138: LD_VAR 0 10
35142: PPUSH
35143: LD_INT 1
35145: PPUSH
35146: CALL_OW 275
35150: PUSH
35151: LD_VAR 0 11
35155: PUSH
35156: LD_INT 1
35158: ARRAY
35159: GREATEREQUAL
35160: IFFALSE 35186
35162: PUSH
35163: LD_VAR 0 10
35167: PPUSH
35168: LD_INT 2
35170: PPUSH
35171: CALL_OW 275
35175: PUSH
35176: LD_VAR 0 11
35180: PUSH
35181: LD_INT 2
35183: ARRAY
35184: GREATEREQUAL
35185: AND
35186: IFFALSE 35212
35188: PUSH
35189: LD_VAR 0 10
35193: PPUSH
35194: LD_INT 3
35196: PPUSH
35197: CALL_OW 275
35201: PUSH
35202: LD_VAR 0 11
35206: PUSH
35207: LD_INT 3
35209: ARRAY
35210: GREATEREQUAL
35211: AND
35212: NOT
35213: IFFALSE 35217
// exit ;
35215: GO 35820
// if GetBType ( depot ) = b_depot then
35217: LD_VAR 0 1
35221: PPUSH
35222: CALL_OW 266
35226: PUSH
35227: LD_INT 0
35229: EQUAL
35230: IFFALSE 35242
// dist := 28 else
35232: LD_ADDR_VAR 0 14
35236: PUSH
35237: LD_INT 28
35239: ST_TO_ADDR
35240: GO 35250
// dist := 36 ;
35242: LD_ADDR_VAR 0 14
35246: PUSH
35247: LD_INT 36
35249: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35250: LD_VAR 0 1
35254: PPUSH
35255: LD_VAR 0 3
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: CALL_OW 297
35269: PUSH
35270: LD_VAR 0 14
35274: GREATER
35275: IFFALSE 35279
// exit ;
35277: GO 35820
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35279: LD_ADDR_VAR 0 12
35283: PUSH
35284: LD_VAR 0 2
35288: PPUSH
35289: LD_VAR 0 3
35293: PPUSH
35294: LD_VAR 0 4
35298: PPUSH
35299: LD_VAR 0 5
35303: PPUSH
35304: LD_VAR 0 1
35308: PPUSH
35309: CALL_OW 248
35313: PPUSH
35314: LD_INT 0
35316: PPUSH
35317: CALL 35825 0 6
35321: ST_TO_ADDR
// if not hexes then
35322: LD_VAR 0 12
35326: NOT
35327: IFFALSE 35331
// exit ;
35329: GO 35820
// hex := GetHexInfo ( x , y ) ;
35331: LD_ADDR_VAR 0 15
35335: PUSH
35336: LD_VAR 0 3
35340: PPUSH
35341: LD_VAR 0 4
35345: PPUSH
35346: CALL_OW 546
35350: ST_TO_ADDR
// if hex [ 1 ] then
35351: LD_VAR 0 15
35355: PUSH
35356: LD_INT 1
35358: ARRAY
35359: IFFALSE 35363
// exit ;
35361: GO 35820
// height := hex [ 2 ] ;
35363: LD_ADDR_VAR 0 13
35367: PUSH
35368: LD_VAR 0 15
35372: PUSH
35373: LD_INT 2
35375: ARRAY
35376: ST_TO_ADDR
// for i = 1 to hexes do
35377: LD_ADDR_VAR 0 7
35381: PUSH
35382: DOUBLE
35383: LD_INT 1
35385: DEC
35386: ST_TO_ADDR
35387: LD_VAR 0 12
35391: PUSH
35392: FOR_TO
35393: IFFALSE 35737
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35395: LD_VAR 0 12
35399: PUSH
35400: LD_VAR 0 7
35404: ARRAY
35405: PUSH
35406: LD_INT 1
35408: ARRAY
35409: PPUSH
35410: LD_VAR 0 12
35414: PUSH
35415: LD_VAR 0 7
35419: ARRAY
35420: PUSH
35421: LD_INT 2
35423: ARRAY
35424: PPUSH
35425: CALL_OW 488
35429: NOT
35430: IFTRUE 35472
35432: PUSH
35433: LD_VAR 0 12
35437: PUSH
35438: LD_VAR 0 7
35442: ARRAY
35443: PUSH
35444: LD_INT 1
35446: ARRAY
35447: PPUSH
35448: LD_VAR 0 12
35452: PUSH
35453: LD_VAR 0 7
35457: ARRAY
35458: PUSH
35459: LD_INT 2
35461: ARRAY
35462: PPUSH
35463: CALL_OW 428
35467: PUSH
35468: LD_INT 0
35470: GREATER
35471: OR
35472: IFTRUE 35510
35474: PUSH
35475: LD_VAR 0 12
35479: PUSH
35480: LD_VAR 0 7
35484: ARRAY
35485: PUSH
35486: LD_INT 1
35488: ARRAY
35489: PPUSH
35490: LD_VAR 0 12
35494: PUSH
35495: LD_VAR 0 7
35499: ARRAY
35500: PUSH
35501: LD_INT 2
35503: ARRAY
35504: PPUSH
35505: CALL_OW 351
35509: OR
35510: IFFALSE 35516
// exit ;
35512: POP
35513: POP
35514: GO 35820
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35516: LD_ADDR_VAR 0 8
35520: PUSH
35521: LD_VAR 0 12
35525: PUSH
35526: LD_VAR 0 7
35530: ARRAY
35531: PUSH
35532: LD_INT 1
35534: ARRAY
35535: PPUSH
35536: LD_VAR 0 12
35540: PUSH
35541: LD_VAR 0 7
35545: ARRAY
35546: PUSH
35547: LD_INT 2
35549: ARRAY
35550: PPUSH
35551: CALL_OW 546
35555: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35556: LD_VAR 0 8
35560: PUSH
35561: LD_INT 1
35563: ARRAY
35564: IFTRUE 35586
35566: PUSH
35567: LD_VAR 0 8
35571: PUSH
35572: LD_INT 2
35574: ARRAY
35575: PUSH
35576: LD_VAR 0 13
35580: PUSH
35581: LD_INT 2
35583: PLUS
35584: GREATER
35585: OR
35586: IFTRUE 35608
35588: PUSH
35589: LD_VAR 0 8
35593: PUSH
35594: LD_INT 2
35596: ARRAY
35597: PUSH
35598: LD_VAR 0 13
35602: PUSH
35603: LD_INT 2
35605: MINUS
35606: LESS
35607: OR
35608: IFTRUE 35676
35610: PUSH
35611: LD_VAR 0 8
35615: PUSH
35616: LD_INT 3
35618: ARRAY
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 8
35625: PUSH
35626: LD_INT 9
35628: PUSH
35629: LD_INT 10
35631: PUSH
35632: LD_INT 11
35634: PUSH
35635: LD_INT 12
35637: PUSH
35638: LD_INT 13
35640: PUSH
35641: LD_INT 16
35643: PUSH
35644: LD_INT 17
35646: PUSH
35647: LD_INT 18
35649: PUSH
35650: LD_INT 19
35652: PUSH
35653: LD_INT 20
35655: PUSH
35656: LD_INT 21
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: IN
35674: NOT
35675: OR
35676: IFTRUE 35689
35678: PUSH
35679: LD_VAR 0 8
35683: PUSH
35684: LD_INT 5
35686: ARRAY
35687: NOT
35688: OR
35689: IFTRUE 35729
35691: PUSH
35692: LD_VAR 0 8
35696: PUSH
35697: LD_INT 6
35699: ARRAY
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 7
35709: PUSH
35710: LD_INT 9
35712: PUSH
35713: LD_INT 10
35715: PUSH
35716: LD_INT 11
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: IN
35727: NOT
35728: OR
35729: IFFALSE 35735
// exit ;
35731: POP
35732: POP
35733: GO 35820
// end ;
35735: GO 35392
35737: POP
35738: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35739: LD_VAR 0 9
35743: PPUSH
35744: LD_VAR 0 3
35748: PPUSH
35749: LD_VAR 0 4
35753: PPUSH
35754: LD_INT 20
35756: PPUSH
35757: CALL 27639 0 4
35761: PUSH
35762: LD_INT 4
35764: ARRAY
35765: IFFALSE 35769
// exit ;
35767: GO 35820
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35769: LD_VAR 0 2
35773: PUSH
35774: LD_INT 29
35776: PUSH
35777: LD_INT 30
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: IN
35784: IFFALSE 35808
35786: PUSH
35787: LD_VAR 0 3
35791: PPUSH
35792: LD_VAR 0 4
35796: PPUSH
35797: LD_VAR 0 9
35801: PPUSH
35802: CALL_OW 440
35806: NOT
35807: AND
35808: IFFALSE 35812
// exit ;
35810: GO 35820
// result := true ;
35812: LD_ADDR_VAR 0 6
35816: PUSH
35817: LD_INT 1
35819: ST_TO_ADDR
// end ;
35820: LD_VAR 0 6
35824: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35825: LD_INT 0
35827: PPUSH
35828: PPUSH
35829: PPUSH
35830: PPUSH
35831: PPUSH
35832: PPUSH
35833: PPUSH
35834: PPUSH
35835: PPUSH
35836: PPUSH
35837: PPUSH
35838: PPUSH
35839: PPUSH
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
35851: PPUSH
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
35856: PPUSH
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
35870: PPUSH
35871: PPUSH
35872: PPUSH
35873: PPUSH
35874: PPUSH
35875: PPUSH
35876: PPUSH
35877: PPUSH
35878: PPUSH
35879: PPUSH
35880: PPUSH
35881: PPUSH
35882: PPUSH
35883: PPUSH
35884: PPUSH
// result = [ ] ;
35885: LD_ADDR_VAR 0 7
35889: PUSH
35890: EMPTY
35891: ST_TO_ADDR
// temp_list = [ ] ;
35892: LD_ADDR_VAR 0 9
35896: PUSH
35897: EMPTY
35898: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35899: LD_VAR 0 4
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: LD_INT 4
35918: PUSH
35919: LD_INT 5
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: IN
35930: NOT
35931: IFTRUE 35974
35933: PUSH
35934: LD_VAR 0 1
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: IN
35949: IFFALSE 35973
35951: PUSH
35952: LD_VAR 0 5
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 3
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: IN
35971: NOT
35972: AND
35973: OR
35974: IFFALSE 35978
// exit ;
35976: GO 54377
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35978: LD_VAR 0 1
35982: PUSH
35983: LD_INT 6
35985: PUSH
35986: LD_INT 7
35988: PUSH
35989: LD_INT 8
35991: PUSH
35992: LD_INT 13
35994: PUSH
35995: LD_INT 12
35997: PUSH
35998: LD_INT 15
36000: PUSH
36001: LD_INT 11
36003: PUSH
36004: LD_INT 14
36006: PUSH
36007: LD_INT 10
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: IN
36021: IFFALSE 36031
// btype = b_lab ;
36023: LD_ADDR_VAR 0 1
36027: PUSH
36028: LD_INT 6
36030: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36031: LD_VAR 0 6
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: IN
36050: NOT
36051: IFTRUE 36119
36053: PUSH
36054: LD_VAR 0 1
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: LD_INT 6
36073: PUSH
36074: LD_INT 36
36076: PUSH
36077: LD_INT 4
36079: PUSH
36080: LD_INT 5
36082: PUSH
36083: LD_INT 31
36085: PUSH
36086: LD_INT 32
36088: PUSH
36089: LD_INT 33
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: IN
36105: NOT
36106: IFFALSE 36118
36108: PUSH
36109: LD_VAR 0 6
36113: PUSH
36114: LD_INT 1
36116: EQUAL
36117: AND
36118: OR
36119: IFTRUE 36151
36121: PUSH
36122: LD_VAR 0 1
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: IN
36137: NOT
36138: IFFALSE 36150
36140: PUSH
36141: LD_VAR 0 6
36145: PUSH
36146: LD_INT 2
36148: EQUAL
36149: AND
36150: OR
36151: IFFALSE 36161
// mode = 0 ;
36153: LD_ADDR_VAR 0 6
36157: PUSH
36158: LD_INT 0
36160: ST_TO_ADDR
// case mode of 0 :
36161: LD_VAR 0 6
36165: PUSH
36166: LD_INT 0
36168: DOUBLE
36169: EQUAL
36170: IFTRUE 36174
36172: GO 47627
36174: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36175: LD_ADDR_VAR 0 11
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: NEG
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: LD_INT 2
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 2
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: LD_INT 3
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: LD_INT 3
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36368: LD_ADDR_VAR 0 12
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: LD_INT 1
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 2
36502: NEG
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 3
36525: NEG
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 3
36536: NEG
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36564: LD_ADDR_VAR 0 13
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: NEG
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 3
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 3
36723: NEG
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 3
36735: NEG
36736: PUSH
36737: LD_INT 3
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36763: LD_ADDR_VAR 0 14
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: LD_INT 3
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: LD_INT 3
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: LD_INT 2
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36959: LD_ADDR_VAR 0 15
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: NEG
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 3
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37152: LD_ADDR_VAR 0 16
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 2
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 3
37299: PUSH
37300: LD_INT 2
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 3
37309: PUSH
37310: LD_INT 3
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 3
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37345: LD_ADDR_VAR 0 17
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 2
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: LD_INT 2
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: NEG
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: NEG
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 2
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37575: LD_ADDR_VAR 0 18
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37805: LD_ADDR_VAR 0 19
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 2
37992: NEG
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38035: LD_ADDR_VAR 0 20
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: LD_INT 2
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: NEG
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38265: LD_ADDR_VAR 0 21
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 1
38430: NEG
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38495: LD_ADDR_VAR 0 22
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: LD_INT 2
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38725: LD_ADDR_VAR 0 23
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 2
38821: NEG
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: LD_INT 1
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 2
38936: NEG
38937: PUSH
38938: LD_INT 3
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 3
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 2
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39005: LD_ADDR_VAR 0 24
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: LD_INT 2
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: LD_INT 2
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 2
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 3
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 3
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39281: LD_ADDR_VAR 0 25
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 3
39492: PUSH
39493: LD_INT 1
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 3
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 3
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39555: LD_ADDR_VAR 0 26
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 2
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: NEG
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 3
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 3
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39831: LD_ADDR_VAR 0 27
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 2
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: NEG
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 3
40076: NEG
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40111: LD_ADDR_VAR 0 28
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: LD_INT 3
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: LD_INT 3
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 3
40346: NEG
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 3
40358: NEG
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40393: LD_ADDR_VAR 0 29
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: LD_INT 3
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 3
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 3
40637: NEG
40638: PUSH
40639: LD_INT 2
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40672: LD_ADDR_VAR 0 30
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 3
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 3
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 3
40915: NEG
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40950: LD_ADDR_VAR 0 31
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 2
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 3
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41228: LD_ADDR_VAR 0 32
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 3
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 3
41471: NEG
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41506: LD_ADDR_VAR 0 33
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 3
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 3
41750: NEG
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41785: LD_ADDR_VAR 0 34
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 3
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 3
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42065: LD_ADDR_VAR 0 35
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: LD_INT 1
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42177: LD_ADDR_VAR 0 36
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42289: LD_ADDR_VAR 0 37
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42401: LD_ADDR_VAR 0 38
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42513: LD_ADDR_VAR 0 39
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42625: LD_ADDR_VAR 0 40
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42737: LD_ADDR_VAR 0 41
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: NEG
42928: PUSH
42929: LD_INT 3
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 3
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 3
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 3
42980: PUSH
42981: LD_INT 3
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 3
43011: NEG
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 3
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 3
43034: NEG
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: NEG
43047: PUSH
43048: LD_INT 3
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43087: LD_ADDR_VAR 0 42
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: LD_INT 3
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 3
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 3
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 3
43333: PUSH
43334: LD_INT 3
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 3
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 3
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43437: LD_ADDR_VAR 0 43
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 3
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 3
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: NEG
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 3
43733: NEG
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 3
43744: NEG
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43785: LD_ADDR_VAR 0 44
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 3
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 3
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 3
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 3
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 3
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: LD_INT 3
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 3
44059: NEG
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 3
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 3
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 3
44094: NEG
44095: PUSH
44096: LD_INT 3
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44135: LD_ADDR_VAR 0 45
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 3
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 3
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 3
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: LD_INT 3
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 3
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: LD_INT 3
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 3
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 3
44432: NEG
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: NEG
44445: PUSH
44446: LD_INT 3
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44485: LD_ADDR_VAR 0 46
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 3
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 3
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 3
44781: NEG
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 3
44792: NEG
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44833: LD_ADDR_VAR 0 47
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 2
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44984: LD_ADDR_VAR 0 48
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45131: LD_ADDR_VAR 0 49
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 2
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45275: LD_ADDR_VAR 0 50
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45419: LD_ADDR_VAR 0 51
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: LD_INT 0
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45566: LD_ADDR_VAR 0 52
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45717: LD_ADDR_VAR 0 53
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: NEG
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 2
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45947: LD_ADDR_VAR 0 54
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46177: LD_ADDR_VAR 0 55
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46407: LD_ADDR_VAR 0 56
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46637: LD_ADDR_VAR 0 57
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46867: LD_ADDR_VAR 0 58
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47097: LD_ADDR_VAR 0 59
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47185: LD_ADDR_VAR 0 60
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47273: LD_ADDR_VAR 0 61
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47361: LD_ADDR_VAR 0 62
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47449: LD_ADDR_VAR 0 63
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47537: LD_ADDR_VAR 0 64
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// end ; 1 :
47625: GO 53522
47627: LD_INT 1
47629: DOUBLE
47630: EQUAL
47631: IFTRUE 47635
47633: GO 50258
47635: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47636: LD_ADDR_VAR 0 11
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 3
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 3
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47680: LD_ADDR_VAR 0 12
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 3
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47721: LD_ADDR_VAR 0 13
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47761: LD_ADDR_VAR 0 14
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 3
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: LIST
47801: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47802: LD_ADDR_VAR 0 15
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47846: LD_ADDR_VAR 0 16
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: LD_INT 3
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47892: LD_ADDR_VAR 0 17
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 3
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 3
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: LIST
47935: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47936: LD_ADDR_VAR 0 18
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 3
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47977: LD_ADDR_VAR 0 19
47981: PUSH
47982: LD_INT 3
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: LD_INT 3
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48017: LD_ADDR_VAR 0 20
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 3
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: LIST
48057: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48058: LD_ADDR_VAR 0 21
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48102: LD_ADDR_VAR 0 22
48106: PUSH
48107: LD_INT 2
48109: NEG
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: NEG
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 3
48133: NEG
48134: PUSH
48135: LD_INT 3
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48148: LD_ADDR_VAR 0 23
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 3
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 4
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48192: LD_ADDR_VAR 0 24
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 4
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48233: LD_ADDR_VAR 0 25
48237: PUSH
48238: LD_INT 3
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 4
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: LD_INT 4
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48273: LD_ADDR_VAR 0 26
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: LIST
48313: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48314: LD_ADDR_VAR 0 27
48318: PUSH
48319: LD_INT 3
48321: NEG
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 3
48332: NEG
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 4
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48358: LD_ADDR_VAR 0 28
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 3
48377: NEG
48378: PUSH
48379: LD_INT 4
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 4
48389: NEG
48390: PUSH
48391: LD_INT 3
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48404: LD_ADDR_VAR 0 29
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 3
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 4
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 4
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 5
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 5
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 4
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 6
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 6
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 5
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48559: LD_ADDR_VAR 0 30
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 4
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 4
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 4
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 5
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 5
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 5
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 6
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 6
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48702: LD_ADDR_VAR 0 31
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 3
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 4
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 4
48749: PUSH
48750: LD_INT 4
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: LD_INT 4
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 5
48769: PUSH
48770: LD_INT 4
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 5
48779: PUSH
48780: LD_INT 5
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 4
48789: PUSH
48790: LD_INT 5
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 6
48799: PUSH
48800: LD_INT 5
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 6
48809: PUSH
48810: LD_INT 6
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 5
48819: PUSH
48820: LD_INT 6
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48841: LD_ADDR_VAR 0 32
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 3
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 4
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 4
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 3
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: LD_INT 5
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 5
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: LD_INT 4
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: LD_INT 6
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 6
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 5
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48984: LD_ADDR_VAR 0 33
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: NEG
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 3
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 4
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 4
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 4
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 5
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 5
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 5
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 6
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 6
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49139: LD_ADDR_VAR 0 34
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 3
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 3
49158: NEG
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: LD_INT 3
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: LD_INT 4
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 4
49194: NEG
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 4
49206: NEG
49207: PUSH
49208: LD_INT 4
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 4
49218: NEG
49219: PUSH
49220: LD_INT 5
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 5
49230: NEG
49231: PUSH
49232: LD_INT 4
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 5
49242: NEG
49243: PUSH
49244: LD_INT 5
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 5
49254: NEG
49255: PUSH
49256: LD_INT 6
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 6
49266: NEG
49267: PUSH
49268: LD_INT 5
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 6
49278: NEG
49279: PUSH
49280: LD_INT 6
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49302: LD_ADDR_VAR 0 41
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49346: LD_ADDR_VAR 0 42
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49387: LD_ADDR_VAR 0 43
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49427: LD_ADDR_VAR 0 44
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49468: LD_ADDR_VAR 0 45
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49512: LD_ADDR_VAR 0 46
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49558: LD_ADDR_VAR 0 47
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 3
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49591: LD_ADDR_VAR 0 48
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49622: LD_ADDR_VAR 0 49
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49651: LD_ADDR_VAR 0 50
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 3
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49680: LD_ADDR_VAR 0 51
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 2
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49711: LD_ADDR_VAR 0 52
49715: PUSH
49716: LD_INT 3
49718: NEG
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 3
49730: NEG
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49744: LD_ADDR_VAR 0 53
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 3
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49788: LD_ADDR_VAR 0 54
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 3
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49829: LD_ADDR_VAR 0 55
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: LD_INT 2
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49869: LD_ADDR_VAR 0 56
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49910: LD_ADDR_VAR 0 57
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 3
49928: NEG
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 3
49939: NEG
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: LIST
49953: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49954: LD_ADDR_VAR 0 58
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: NEG
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: LD_INT 3
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50000: LD_ADDR_VAR 0 59
50004: PUSH
50005: LD_INT 1
50007: NEG
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50044: LD_ADDR_VAR 0 60
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50085: LD_ADDR_VAR 0 61
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50125: LD_ADDR_VAR 0 62
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50166: LD_ADDR_VAR 0 63
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50210: LD_ADDR_VAR 0 64
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: ST_TO_ADDR
// end ; 2 :
50256: GO 53522
50258: LD_INT 2
50260: DOUBLE
50261: EQUAL
50262: IFTRUE 50266
50264: GO 53521
50266: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50267: LD_ADDR_VAR 0 29
50271: PUSH
50272: LD_INT 4
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 4
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 5
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 5
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 4
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 5
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 4
50387: PUSH
50388: LD_INT 3
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 4
50397: PUSH
50398: LD_INT 4
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: LD_INT 4
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 4
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 4
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 4
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 3
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 4
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 5
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 5
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 4
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 3
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 5
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 3
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 3
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 4
50606: NEG
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 4
50617: NEG
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 4
50629: NEG
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 4
50652: NEG
50653: PUSH
50654: LD_INT 4
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 4
50664: NEG
50665: PUSH
50666: LD_INT 5
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: NEG
50677: PUSH
50678: LD_INT 4
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 4
50700: NEG
50701: PUSH
50702: LD_INT 3
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 5
50712: NEG
50713: PUSH
50714: LD_INT 4
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 5
50724: NEG
50725: PUSH
50726: LD_INT 5
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: LD_INT 5
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 5
50748: NEG
50749: PUSH
50750: LD_INT 3
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50805: LD_ADDR_VAR 0 30
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: LD_INT 4
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 4
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 5
50832: PUSH
50833: LD_INT 4
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 5
50842: PUSH
50843: LD_INT 5
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 4
50852: PUSH
50853: LD_INT 5
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: LD_INT 4
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 5
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: LD_INT 5
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 3
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 4
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 4
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: LD_INT 4
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 4
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 4
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 5
51051: NEG
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 5
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 5
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: LD_INT 4
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 2
51121: NEG
51122: PUSH
51123: LD_INT 3
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 4
51169: NEG
51170: PUSH
51171: LD_INT 4
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: LD_INT 4
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 4
51208: NEG
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 5
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 4
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: LD_INT 3
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 4
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 5
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: LD_INT 5
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51352: LD_ADDR_VAR 0 31
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 4
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 4
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 5
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 5
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 4
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 5
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 3
51452: NEG
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 4
51508: NEG
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 4
51519: NEG
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 4
51531: NEG
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 4
51554: NEG
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 4
51566: NEG
51567: PUSH
51568: LD_INT 5
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: LD_INT 4
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 3
51590: NEG
51591: PUSH
51592: LD_INT 3
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 4
51602: NEG
51603: PUSH
51604: LD_INT 3
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 5
51614: NEG
51615: PUSH
51616: LD_INT 4
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 5
51626: NEG
51627: PUSH
51628: LD_INT 5
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: LD_INT 5
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 5
51650: NEG
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 4
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 3
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 4
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 4
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 4
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 4
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 5
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 5
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 4
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 5
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51902: LD_ADDR_VAR 0 32
51906: PUSH
51907: LD_INT 4
51909: NEG
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 4
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 3
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 4
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 5
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 5
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 5
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 3
52000: NEG
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: NEG
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: LD_INT 4
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: NEG
52060: PUSH
52061: LD_INT 2
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 4
52071: NEG
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 4
52083: NEG
52084: PUSH
52085: LD_INT 4
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 4
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: LD_INT 4
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 5
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: LD_INT 4
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 3
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 3
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 4
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 5
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 5
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 1
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 4
52242: PUSH
52243: LD_INT 0
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 4
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 4
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 4
52314: PUSH
52315: LD_INT 4
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 4
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 5
52334: PUSH
52335: LD_INT 4
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 5
52344: PUSH
52345: LD_INT 5
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 4
52354: PUSH
52355: LD_INT 5
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: LD_INT 4
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 5
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: LD_INT 5
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52449: LD_ADDR_VAR 0 33
52453: PUSH
52454: LD_INT 4
52456: NEG
52457: PUSH
52458: LD_INT 4
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 4
52468: NEG
52469: PUSH
52470: LD_INT 5
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 4
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 4
52504: NEG
52505: PUSH
52506: LD_INT 3
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 5
52516: NEG
52517: PUSH
52518: LD_INT 4
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 5
52528: NEG
52529: PUSH
52530: LD_INT 5
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: LD_INT 5
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 5
52552: NEG
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 3
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 4
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: LD_INT 4
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: LD_INT 4
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 4
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 5
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 5
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 4
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 5
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 4
52789: PUSH
52790: LD_INT 4
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: LD_INT 4
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 4
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: LD_INT 4
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: LD_INT 4
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 4
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 5
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 5
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 4
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 5
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52987: LD_ADDR_VAR 0 34
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 4
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 5
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: LD_INT 4
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: LD_INT 3
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 4
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 5
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: LD_INT 5
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 3
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 3
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 4
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 4
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 4
53189: PUSH
53190: LD_INT 4
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 4
53199: PUSH
53200: LD_INT 3
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 5
53209: PUSH
53210: LD_INT 4
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 5
53219: PUSH
53220: LD_INT 5
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 4
53229: PUSH
53230: LD_INT 5
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: LD_INT 4
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: LD_INT 3
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 5
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: LD_INT 5
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 4
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 3
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: LD_INT 4
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 4
53372: NEG
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 4
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 4
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 5
53428: NEG
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 5
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 5
53451: NEG
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 3
53463: NEG
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: ST_TO_ADDR
// end ; end ;
53519: GO 53522
53521: POP
// case btype of b_depot , b_warehouse :
53522: LD_VAR 0 1
53526: PUSH
53527: LD_INT 0
53529: DOUBLE
53530: EQUAL
53531: IFTRUE 53541
53533: LD_INT 1
53535: DOUBLE
53536: EQUAL
53537: IFTRUE 53541
53539: GO 53742
53541: POP
// case nation of nation_american :
53542: LD_VAR 0 5
53546: PUSH
53547: LD_INT 1
53549: DOUBLE
53550: EQUAL
53551: IFTRUE 53555
53553: GO 53611
53555: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53556: LD_ADDR_VAR 0 9
53560: PUSH
53561: LD_VAR 0 11
53565: PUSH
53566: LD_VAR 0 12
53570: PUSH
53571: LD_VAR 0 13
53575: PUSH
53576: LD_VAR 0 14
53580: PUSH
53581: LD_VAR 0 15
53585: PUSH
53586: LD_VAR 0 16
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: PUSH
53599: LD_VAR 0 4
53603: PUSH
53604: LD_INT 1
53606: PLUS
53607: ARRAY
53608: ST_TO_ADDR
53609: GO 53740
53611: LD_INT 2
53613: DOUBLE
53614: EQUAL
53615: IFTRUE 53619
53617: GO 53675
53619: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53620: LD_ADDR_VAR 0 9
53624: PUSH
53625: LD_VAR 0 17
53629: PUSH
53630: LD_VAR 0 18
53634: PUSH
53635: LD_VAR 0 19
53639: PUSH
53640: LD_VAR 0 20
53644: PUSH
53645: LD_VAR 0 21
53649: PUSH
53650: LD_VAR 0 22
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: PUSH
53663: LD_VAR 0 4
53667: PUSH
53668: LD_INT 1
53670: PLUS
53671: ARRAY
53672: ST_TO_ADDR
53673: GO 53740
53675: LD_INT 3
53677: DOUBLE
53678: EQUAL
53679: IFTRUE 53683
53681: GO 53739
53683: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53684: LD_ADDR_VAR 0 9
53688: PUSH
53689: LD_VAR 0 23
53693: PUSH
53694: LD_VAR 0 24
53698: PUSH
53699: LD_VAR 0 25
53703: PUSH
53704: LD_VAR 0 26
53708: PUSH
53709: LD_VAR 0 27
53713: PUSH
53714: LD_VAR 0 28
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: PUSH
53727: LD_VAR 0 4
53731: PUSH
53732: LD_INT 1
53734: PLUS
53735: ARRAY
53736: ST_TO_ADDR
53737: GO 53740
53739: POP
53740: GO 54295
53742: LD_INT 2
53744: DOUBLE
53745: EQUAL
53746: IFTRUE 53756
53748: LD_INT 3
53750: DOUBLE
53751: EQUAL
53752: IFTRUE 53756
53754: GO 53812
53756: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53757: LD_ADDR_VAR 0 9
53761: PUSH
53762: LD_VAR 0 29
53766: PUSH
53767: LD_VAR 0 30
53771: PUSH
53772: LD_VAR 0 31
53776: PUSH
53777: LD_VAR 0 32
53781: PUSH
53782: LD_VAR 0 33
53786: PUSH
53787: LD_VAR 0 34
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: PUSH
53800: LD_VAR 0 4
53804: PUSH
53805: LD_INT 1
53807: PLUS
53808: ARRAY
53809: ST_TO_ADDR
53810: GO 54295
53812: LD_INT 16
53814: DOUBLE
53815: EQUAL
53816: IFTRUE 53874
53818: LD_INT 17
53820: DOUBLE
53821: EQUAL
53822: IFTRUE 53874
53824: LD_INT 18
53826: DOUBLE
53827: EQUAL
53828: IFTRUE 53874
53830: LD_INT 19
53832: DOUBLE
53833: EQUAL
53834: IFTRUE 53874
53836: LD_INT 22
53838: DOUBLE
53839: EQUAL
53840: IFTRUE 53874
53842: LD_INT 20
53844: DOUBLE
53845: EQUAL
53846: IFTRUE 53874
53848: LD_INT 21
53850: DOUBLE
53851: EQUAL
53852: IFTRUE 53874
53854: LD_INT 23
53856: DOUBLE
53857: EQUAL
53858: IFTRUE 53874
53860: LD_INT 24
53862: DOUBLE
53863: EQUAL
53864: IFTRUE 53874
53866: LD_INT 25
53868: DOUBLE
53869: EQUAL
53870: IFTRUE 53874
53872: GO 53930
53874: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53875: LD_ADDR_VAR 0 9
53879: PUSH
53880: LD_VAR 0 35
53884: PUSH
53885: LD_VAR 0 36
53889: PUSH
53890: LD_VAR 0 37
53894: PUSH
53895: LD_VAR 0 38
53899: PUSH
53900: LD_VAR 0 39
53904: PUSH
53905: LD_VAR 0 40
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: PUSH
53918: LD_VAR 0 4
53922: PUSH
53923: LD_INT 1
53925: PLUS
53926: ARRAY
53927: ST_TO_ADDR
53928: GO 54295
53930: LD_INT 6
53932: DOUBLE
53933: EQUAL
53934: IFTRUE 53986
53936: LD_INT 7
53938: DOUBLE
53939: EQUAL
53940: IFTRUE 53986
53942: LD_INT 8
53944: DOUBLE
53945: EQUAL
53946: IFTRUE 53986
53948: LD_INT 13
53950: DOUBLE
53951: EQUAL
53952: IFTRUE 53986
53954: LD_INT 12
53956: DOUBLE
53957: EQUAL
53958: IFTRUE 53986
53960: LD_INT 15
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53986
53966: LD_INT 11
53968: DOUBLE
53969: EQUAL
53970: IFTRUE 53986
53972: LD_INT 14
53974: DOUBLE
53975: EQUAL
53976: IFTRUE 53986
53978: LD_INT 10
53980: DOUBLE
53981: EQUAL
53982: IFTRUE 53986
53984: GO 54042
53986: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53987: LD_ADDR_VAR 0 9
53991: PUSH
53992: LD_VAR 0 41
53996: PUSH
53997: LD_VAR 0 42
54001: PUSH
54002: LD_VAR 0 43
54006: PUSH
54007: LD_VAR 0 44
54011: PUSH
54012: LD_VAR 0 45
54016: PUSH
54017: LD_VAR 0 46
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: PUSH
54030: LD_VAR 0 4
54034: PUSH
54035: LD_INT 1
54037: PLUS
54038: ARRAY
54039: ST_TO_ADDR
54040: GO 54295
54042: LD_INT 36
54044: DOUBLE
54045: EQUAL
54046: IFTRUE 54050
54048: GO 54106
54050: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54051: LD_ADDR_VAR 0 9
54055: PUSH
54056: LD_VAR 0 47
54060: PUSH
54061: LD_VAR 0 48
54065: PUSH
54066: LD_VAR 0 49
54070: PUSH
54071: LD_VAR 0 50
54075: PUSH
54076: LD_VAR 0 51
54080: PUSH
54081: LD_VAR 0 52
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: PUSH
54094: LD_VAR 0 4
54098: PUSH
54099: LD_INT 1
54101: PLUS
54102: ARRAY
54103: ST_TO_ADDR
54104: GO 54295
54106: LD_INT 4
54108: DOUBLE
54109: EQUAL
54110: IFTRUE 54132
54112: LD_INT 5
54114: DOUBLE
54115: EQUAL
54116: IFTRUE 54132
54118: LD_INT 34
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54132
54124: LD_INT 37
54126: DOUBLE
54127: EQUAL
54128: IFTRUE 54132
54130: GO 54188
54132: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54133: LD_ADDR_VAR 0 9
54137: PUSH
54138: LD_VAR 0 53
54142: PUSH
54143: LD_VAR 0 54
54147: PUSH
54148: LD_VAR 0 55
54152: PUSH
54153: LD_VAR 0 56
54157: PUSH
54158: LD_VAR 0 57
54162: PUSH
54163: LD_VAR 0 58
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: PUSH
54176: LD_VAR 0 4
54180: PUSH
54181: LD_INT 1
54183: PLUS
54184: ARRAY
54185: ST_TO_ADDR
54186: GO 54295
54188: LD_INT 31
54190: DOUBLE
54191: EQUAL
54192: IFTRUE 54238
54194: LD_INT 32
54196: DOUBLE
54197: EQUAL
54198: IFTRUE 54238
54200: LD_INT 33
54202: DOUBLE
54203: EQUAL
54204: IFTRUE 54238
54206: LD_INT 27
54208: DOUBLE
54209: EQUAL
54210: IFTRUE 54238
54212: LD_INT 26
54214: DOUBLE
54215: EQUAL
54216: IFTRUE 54238
54218: LD_INT 28
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54238
54224: LD_INT 29
54226: DOUBLE
54227: EQUAL
54228: IFTRUE 54238
54230: LD_INT 30
54232: DOUBLE
54233: EQUAL
54234: IFTRUE 54238
54236: GO 54294
54238: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54239: LD_ADDR_VAR 0 9
54243: PUSH
54244: LD_VAR 0 59
54248: PUSH
54249: LD_VAR 0 60
54253: PUSH
54254: LD_VAR 0 61
54258: PUSH
54259: LD_VAR 0 62
54263: PUSH
54264: LD_VAR 0 63
54268: PUSH
54269: LD_VAR 0 64
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: PUSH
54282: LD_VAR 0 4
54286: PUSH
54287: LD_INT 1
54289: PLUS
54290: ARRAY
54291: ST_TO_ADDR
54292: GO 54295
54294: POP
// temp_list2 = [ ] ;
54295: LD_ADDR_VAR 0 10
54299: PUSH
54300: EMPTY
54301: ST_TO_ADDR
// for i in temp_list do
54302: LD_ADDR_VAR 0 8
54306: PUSH
54307: LD_VAR 0 9
54311: PUSH
54312: FOR_IN
54313: IFFALSE 54365
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54315: LD_ADDR_VAR 0 10
54319: PUSH
54320: LD_VAR 0 10
54324: PUSH
54325: LD_VAR 0 8
54329: PUSH
54330: LD_INT 1
54332: ARRAY
54333: PUSH
54334: LD_VAR 0 2
54338: PLUS
54339: PUSH
54340: LD_VAR 0 8
54344: PUSH
54345: LD_INT 2
54347: ARRAY
54348: PUSH
54349: LD_VAR 0 3
54353: PLUS
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: EMPTY
54360: LIST
54361: ADD
54362: ST_TO_ADDR
54363: GO 54312
54365: POP
54366: POP
// result = temp_list2 ;
54367: LD_ADDR_VAR 0 7
54371: PUSH
54372: LD_VAR 0 10
54376: ST_TO_ADDR
// end ;
54377: LD_VAR 0 7
54381: RET
// export function EnemyInRange ( unit , dist ) ; begin
54382: LD_INT 0
54384: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54385: LD_ADDR_VAR 0 3
54389: PUSH
54390: LD_VAR 0 1
54394: PPUSH
54395: CALL_OW 255
54399: PPUSH
54400: LD_VAR 0 1
54404: PPUSH
54405: CALL_OW 250
54409: PPUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 251
54419: PPUSH
54420: LD_VAR 0 2
54424: PPUSH
54425: CALL 27639 0 4
54429: PUSH
54430: LD_INT 4
54432: ARRAY
54433: ST_TO_ADDR
// end ;
54434: LD_VAR 0 3
54438: RET
// export function PlayerSeeMe ( unit ) ; begin
54439: LD_INT 0
54441: PPUSH
// result := See ( your_side , unit ) ;
54442: LD_ADDR_VAR 0 2
54446: PUSH
54447: LD_OWVAR 2
54451: PPUSH
54452: LD_VAR 0 1
54456: PPUSH
54457: CALL_OW 292
54461: ST_TO_ADDR
// end ;
54462: LD_VAR 0 2
54466: RET
// export function ReverseDir ( unit ) ; begin
54467: LD_INT 0
54469: PPUSH
// if not unit then
54470: LD_VAR 0 1
54474: NOT
54475: IFFALSE 54479
// exit ;
54477: GO 54502
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54479: LD_ADDR_VAR 0 2
54483: PUSH
54484: LD_VAR 0 1
54488: PPUSH
54489: CALL_OW 254
54493: PUSH
54494: LD_INT 3
54496: PLUS
54497: PUSH
54498: LD_INT 6
54500: MOD
54501: ST_TO_ADDR
// end ;
54502: LD_VAR 0 2
54506: RET
// export function ReverseArray ( array ) ; var i ; begin
54507: LD_INT 0
54509: PPUSH
54510: PPUSH
// if not array then
54511: LD_VAR 0 1
54515: NOT
54516: IFFALSE 54520
// exit ;
54518: GO 54575
// result := [ ] ;
54520: LD_ADDR_VAR 0 2
54524: PUSH
54525: EMPTY
54526: ST_TO_ADDR
// for i := array downto 1 do
54527: LD_ADDR_VAR 0 3
54531: PUSH
54532: DOUBLE
54533: LD_VAR 0 1
54537: INC
54538: ST_TO_ADDR
54539: LD_INT 1
54541: PUSH
54542: FOR_DOWNTO
54543: IFFALSE 54573
// result := Join ( result , array [ i ] ) ;
54545: LD_ADDR_VAR 0 2
54549: PUSH
54550: LD_VAR 0 2
54554: PPUSH
54555: LD_VAR 0 1
54559: PUSH
54560: LD_VAR 0 3
54564: ARRAY
54565: PPUSH
54566: CALL 59427 0 2
54570: ST_TO_ADDR
54571: GO 54542
54573: POP
54574: POP
// end ;
54575: LD_VAR 0 2
54579: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54580: LD_INT 0
54582: PPUSH
54583: PPUSH
54584: PPUSH
54585: PPUSH
54586: PPUSH
54587: PPUSH
// if not unit or not hexes then
54588: LD_VAR 0 1
54592: NOT
54593: IFTRUE 54602
54595: PUSH
54596: LD_VAR 0 2
54600: NOT
54601: OR
54602: IFFALSE 54606
// exit ;
54604: GO 54729
// dist := 9999 ;
54606: LD_ADDR_VAR 0 5
54610: PUSH
54611: LD_INT 9999
54613: ST_TO_ADDR
// for i = 1 to hexes do
54614: LD_ADDR_VAR 0 4
54618: PUSH
54619: DOUBLE
54620: LD_INT 1
54622: DEC
54623: ST_TO_ADDR
54624: LD_VAR 0 2
54628: PUSH
54629: FOR_TO
54630: IFFALSE 54717
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54632: LD_ADDR_VAR 0 6
54636: PUSH
54637: LD_VAR 0 1
54641: PPUSH
54642: LD_VAR 0 2
54646: PUSH
54647: LD_VAR 0 4
54651: ARRAY
54652: PUSH
54653: LD_INT 1
54655: ARRAY
54656: PPUSH
54657: LD_VAR 0 2
54661: PUSH
54662: LD_VAR 0 4
54666: ARRAY
54667: PUSH
54668: LD_INT 2
54670: ARRAY
54671: PPUSH
54672: CALL_OW 297
54676: ST_TO_ADDR
// if tdist < dist then
54677: LD_VAR 0 6
54681: PUSH
54682: LD_VAR 0 5
54686: LESS
54687: IFFALSE 54715
// begin hex := hexes [ i ] ;
54689: LD_ADDR_VAR 0 8
54693: PUSH
54694: LD_VAR 0 2
54698: PUSH
54699: LD_VAR 0 4
54703: ARRAY
54704: ST_TO_ADDR
// dist := tdist ;
54705: LD_ADDR_VAR 0 5
54709: PUSH
54710: LD_VAR 0 6
54714: ST_TO_ADDR
// end ; end ;
54715: GO 54629
54717: POP
54718: POP
// result := hex ;
54719: LD_ADDR_VAR 0 3
54723: PUSH
54724: LD_VAR 0 8
54728: ST_TO_ADDR
// end ;
54729: LD_VAR 0 3
54733: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54734: LD_INT 0
54736: PPUSH
54737: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54738: LD_VAR 0 1
54742: NOT
54743: IFTRUE 54782
54745: PUSH
54746: LD_VAR 0 1
54750: PUSH
54751: LD_INT 21
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 23
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PPUSH
54775: CALL_OW 69
54779: IN
54780: NOT
54781: OR
54782: IFFALSE 54786
// exit ;
54784: GO 54833
// for i = 1 to 3 do
54786: LD_ADDR_VAR 0 3
54790: PUSH
54791: DOUBLE
54792: LD_INT 1
54794: DEC
54795: ST_TO_ADDR
54796: LD_INT 3
54798: PUSH
54799: FOR_TO
54800: IFFALSE 54831
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54802: LD_VAR 0 1
54806: PPUSH
54807: CALL_OW 250
54811: PPUSH
54812: LD_VAR 0 1
54816: PPUSH
54817: CALL_OW 251
54821: PPUSH
54822: LD_INT 1
54824: PPUSH
54825: CALL_OW 453
54829: GO 54799
54831: POP
54832: POP
// end ;
54833: LD_VAR 0 2
54837: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54838: LD_INT 0
54840: PPUSH
54841: PPUSH
54842: PPUSH
54843: PPUSH
54844: PPUSH
54845: PPUSH
// if not unit or not enemy_unit then
54846: LD_VAR 0 1
54850: NOT
54851: IFTRUE 54860
54853: PUSH
54854: LD_VAR 0 2
54858: NOT
54859: OR
54860: IFFALSE 54864
// exit ;
54862: GO 55345
// if GetLives ( i ) < 250 then
54864: LD_VAR 0 4
54868: PPUSH
54869: CALL_OW 256
54873: PUSH
54874: LD_INT 250
54876: LESS
54877: IFFALSE 54890
// begin ComAutodestruct ( i ) ;
54879: LD_VAR 0 4
54883: PPUSH
54884: CALL 54734 0 1
// exit ;
54888: GO 55345
// end ; x := GetX ( enemy_unit ) ;
54890: LD_ADDR_VAR 0 7
54894: PUSH
54895: LD_VAR 0 2
54899: PPUSH
54900: CALL_OW 250
54904: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54905: LD_ADDR_VAR 0 8
54909: PUSH
54910: LD_VAR 0 2
54914: PPUSH
54915: CALL_OW 251
54919: ST_TO_ADDR
// if not x or not y then
54920: LD_VAR 0 7
54924: NOT
54925: IFTRUE 54934
54927: PUSH
54928: LD_VAR 0 8
54932: NOT
54933: OR
54934: IFFALSE 54938
// exit ;
54936: GO 55345
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54938: LD_ADDR_VAR 0 6
54942: PUSH
54943: LD_VAR 0 7
54947: PPUSH
54948: LD_INT 0
54950: PPUSH
54951: LD_INT 4
54953: PPUSH
54954: CALL_OW 272
54958: PUSH
54959: LD_VAR 0 8
54963: PPUSH
54964: LD_INT 0
54966: PPUSH
54967: LD_INT 4
54969: PPUSH
54970: CALL_OW 273
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_VAR 0 7
54983: PPUSH
54984: LD_INT 1
54986: PPUSH
54987: LD_INT 4
54989: PPUSH
54990: CALL_OW 272
54994: PUSH
54995: LD_VAR 0 8
54999: PPUSH
55000: LD_INT 1
55002: PPUSH
55003: LD_INT 4
55005: PPUSH
55006: CALL_OW 273
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_VAR 0 7
55019: PPUSH
55020: LD_INT 2
55022: PPUSH
55023: LD_INT 4
55025: PPUSH
55026: CALL_OW 272
55030: PUSH
55031: LD_VAR 0 8
55035: PPUSH
55036: LD_INT 2
55038: PPUSH
55039: LD_INT 4
55041: PPUSH
55042: CALL_OW 273
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_VAR 0 7
55055: PPUSH
55056: LD_INT 3
55058: PPUSH
55059: LD_INT 4
55061: PPUSH
55062: CALL_OW 272
55066: PUSH
55067: LD_VAR 0 8
55071: PPUSH
55072: LD_INT 3
55074: PPUSH
55075: LD_INT 4
55077: PPUSH
55078: CALL_OW 273
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_VAR 0 7
55091: PPUSH
55092: LD_INT 4
55094: PPUSH
55095: LD_INT 4
55097: PPUSH
55098: CALL_OW 272
55102: PUSH
55103: LD_VAR 0 8
55107: PPUSH
55108: LD_INT 4
55110: PPUSH
55111: LD_INT 4
55113: PPUSH
55114: CALL_OW 273
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_VAR 0 7
55127: PPUSH
55128: LD_INT 5
55130: PPUSH
55131: LD_INT 4
55133: PPUSH
55134: CALL_OW 272
55138: PUSH
55139: LD_VAR 0 8
55143: PPUSH
55144: LD_INT 5
55146: PPUSH
55147: LD_INT 4
55149: PPUSH
55150: CALL_OW 273
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: ST_TO_ADDR
// for i = tmp downto 1 do
55167: LD_ADDR_VAR 0 4
55171: PUSH
55172: DOUBLE
55173: LD_VAR 0 6
55177: INC
55178: ST_TO_ADDR
55179: LD_INT 1
55181: PUSH
55182: FOR_DOWNTO
55183: IFFALSE 55286
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55185: LD_VAR 0 6
55189: PUSH
55190: LD_VAR 0 4
55194: ARRAY
55195: PUSH
55196: LD_INT 1
55198: ARRAY
55199: PPUSH
55200: LD_VAR 0 6
55204: PUSH
55205: LD_VAR 0 4
55209: ARRAY
55210: PUSH
55211: LD_INT 2
55213: ARRAY
55214: PPUSH
55215: CALL_OW 488
55219: NOT
55220: IFTRUE 55262
55222: PUSH
55223: LD_VAR 0 6
55227: PUSH
55228: LD_VAR 0 4
55232: ARRAY
55233: PUSH
55234: LD_INT 1
55236: ARRAY
55237: PPUSH
55238: LD_VAR 0 6
55242: PUSH
55243: LD_VAR 0 4
55247: ARRAY
55248: PUSH
55249: LD_INT 2
55251: ARRAY
55252: PPUSH
55253: CALL_OW 428
55257: PUSH
55258: LD_INT 0
55260: NONEQUAL
55261: OR
55262: IFFALSE 55284
// tmp := Delete ( tmp , i ) ;
55264: LD_ADDR_VAR 0 6
55268: PUSH
55269: LD_VAR 0 6
55273: PPUSH
55274: LD_VAR 0 4
55278: PPUSH
55279: CALL_OW 3
55283: ST_TO_ADDR
55284: GO 55182
55286: POP
55287: POP
// j := GetClosestHex ( unit , tmp ) ;
55288: LD_ADDR_VAR 0 5
55292: PUSH
55293: LD_VAR 0 1
55297: PPUSH
55298: LD_VAR 0 6
55302: PPUSH
55303: CALL 54580 0 2
55307: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55308: LD_VAR 0 1
55312: PPUSH
55313: LD_VAR 0 5
55317: PUSH
55318: LD_INT 1
55320: ARRAY
55321: PPUSH
55322: LD_VAR 0 5
55326: PUSH
55327: LD_INT 2
55329: ARRAY
55330: PPUSH
55331: CALL_OW 111
// result := j ;
55335: LD_ADDR_VAR 0 3
55339: PUSH
55340: LD_VAR 0 5
55344: ST_TO_ADDR
// end ;
55345: LD_VAR 0 3
55349: RET
// export function PrepareApemanSoldier ( ) ; begin
55350: LD_INT 0
55352: PPUSH
// uc_nation := 0 ;
55353: LD_ADDR_OWVAR 21
55357: PUSH
55358: LD_INT 0
55360: ST_TO_ADDR
// hc_sex := sex_male ;
55361: LD_ADDR_OWVAR 27
55365: PUSH
55366: LD_INT 1
55368: ST_TO_ADDR
// hc_name :=  ;
55369: LD_ADDR_OWVAR 26
55373: PUSH
55374: LD_STRING 
55376: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55377: LD_ADDR_OWVAR 28
55381: PUSH
55382: LD_INT 15
55384: ST_TO_ADDR
// hc_gallery :=  ;
55385: LD_ADDR_OWVAR 33
55389: PUSH
55390: LD_STRING 
55392: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55393: LD_ADDR_OWVAR 31
55397: PUSH
55398: LD_INT 0
55400: PPUSH
55401: LD_INT 3
55403: PPUSH
55404: CALL_OW 12
55408: PUSH
55409: LD_INT 0
55411: PPUSH
55412: LD_INT 3
55414: PPUSH
55415: CALL_OW 12
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
55432: LD_ADDR_OWVAR 29
55436: PUSH
55437: LD_INT 10
55439: PUSH
55440: LD_INT 12
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: ST_TO_ADDR
// end ;
55447: LD_VAR 0 1
55451: RET
// export function PrepareApemanEngineer ( ) ; begin
55452: LD_INT 0
55454: PPUSH
// uc_nation := 0 ;
55455: LD_ADDR_OWVAR 21
55459: PUSH
55460: LD_INT 0
55462: ST_TO_ADDR
// hc_sex := sex_male ;
55463: LD_ADDR_OWVAR 27
55467: PUSH
55468: LD_INT 1
55470: ST_TO_ADDR
// hc_name :=  ;
55471: LD_ADDR_OWVAR 26
55475: PUSH
55476: LD_STRING 
55478: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55479: LD_ADDR_OWVAR 28
55483: PUSH
55484: LD_INT 16
55486: ST_TO_ADDR
// hc_gallery :=  ;
55487: LD_ADDR_OWVAR 33
55491: PUSH
55492: LD_STRING 
55494: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55495: LD_ADDR_OWVAR 31
55499: PUSH
55500: LD_INT 0
55502: PPUSH
55503: LD_INT 3
55505: PPUSH
55506: CALL_OW 12
55510: PUSH
55511: LD_INT 0
55513: PPUSH
55514: LD_INT 3
55516: PPUSH
55517: CALL_OW 12
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
55534: LD_ADDR_OWVAR 29
55538: PUSH
55539: LD_INT 10
55541: PUSH
55542: LD_INT 12
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: ST_TO_ADDR
// end ;
55549: LD_VAR 0 1
55553: RET
// export function PrepareApeman ( agressivity ) ; begin
55554: LD_INT 0
55556: PPUSH
// uc_side := 0 ;
55557: LD_ADDR_OWVAR 20
55561: PUSH
55562: LD_INT 0
55564: ST_TO_ADDR
// uc_nation := 0 ;
55565: LD_ADDR_OWVAR 21
55569: PUSH
55570: LD_INT 0
55572: ST_TO_ADDR
// hc_sex := sex_male ;
55573: LD_ADDR_OWVAR 27
55577: PUSH
55578: LD_INT 1
55580: ST_TO_ADDR
// hc_class := class_apeman ;
55581: LD_ADDR_OWVAR 28
55585: PUSH
55586: LD_INT 12
55588: ST_TO_ADDR
// hc_gallery :=  ;
55589: LD_ADDR_OWVAR 33
55593: PUSH
55594: LD_STRING 
55596: ST_TO_ADDR
// hc_name :=  ;
55597: LD_ADDR_OWVAR 26
55601: PUSH
55602: LD_STRING 
55604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
55605: LD_ADDR_OWVAR 29
55609: PUSH
55610: LD_INT 10
55612: PUSH
55613: LD_INT 12
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// if agressivity = 0 then
55620: LD_VAR 0 1
55624: PUSH
55625: LD_INT 0
55627: EQUAL
55628: IFFALSE 55640
// hc_agressivity := 0 else
55630: LD_ADDR_OWVAR 35
55634: PUSH
55635: LD_INT 0
55637: ST_TO_ADDR
55638: GO 55661
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55640: LD_ADDR_OWVAR 35
55644: PUSH
55645: LD_VAR 0 1
55649: NEG
55650: PPUSH
55651: LD_VAR 0 1
55655: PPUSH
55656: CALL_OW 12
55660: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55661: LD_ADDR_OWVAR 31
55665: PUSH
55666: LD_INT 0
55668: PPUSH
55669: LD_INT 3
55671: PPUSH
55672: CALL_OW 12
55676: PUSH
55677: LD_INT 0
55679: PPUSH
55680: LD_INT 3
55682: PPUSH
55683: CALL_OW 12
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: ST_TO_ADDR
// end ;
55700: LD_VAR 0 2
55704: RET
// export function PrepareTiger ( agressivity ) ; begin
55705: LD_INT 0
55707: PPUSH
// uc_side := 0 ;
55708: LD_ADDR_OWVAR 20
55712: PUSH
55713: LD_INT 0
55715: ST_TO_ADDR
// uc_nation := 0 ;
55716: LD_ADDR_OWVAR 21
55720: PUSH
55721: LD_INT 0
55723: ST_TO_ADDR
// InitHc ;
55724: CALL_OW 19
// hc_class := class_tiger ;
55728: LD_ADDR_OWVAR 28
55732: PUSH
55733: LD_INT 14
55735: ST_TO_ADDR
// hc_gallery :=  ;
55736: LD_ADDR_OWVAR 33
55740: PUSH
55741: LD_STRING 
55743: ST_TO_ADDR
// hc_name :=  ;
55744: LD_ADDR_OWVAR 26
55748: PUSH
55749: LD_STRING 
55751: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55752: LD_ADDR_OWVAR 35
55756: PUSH
55757: LD_VAR 0 1
55761: NEG
55762: PPUSH
55763: LD_VAR 0 1
55767: PPUSH
55768: CALL_OW 12
55772: ST_TO_ADDR
// end ;
55773: LD_VAR 0 2
55777: RET
// export function PrepareEnchidna ( ) ; begin
55778: LD_INT 0
55780: PPUSH
// uc_side := 0 ;
55781: LD_ADDR_OWVAR 20
55785: PUSH
55786: LD_INT 0
55788: ST_TO_ADDR
// uc_nation := 0 ;
55789: LD_ADDR_OWVAR 21
55793: PUSH
55794: LD_INT 0
55796: ST_TO_ADDR
// InitHc ;
55797: CALL_OW 19
// hc_class := class_baggie ;
55801: LD_ADDR_OWVAR 28
55805: PUSH
55806: LD_INT 13
55808: ST_TO_ADDR
// hc_gallery :=  ;
55809: LD_ADDR_OWVAR 33
55813: PUSH
55814: LD_STRING 
55816: ST_TO_ADDR
// hc_name :=  ;
55817: LD_ADDR_OWVAR 26
55821: PUSH
55822: LD_STRING 
55824: ST_TO_ADDR
// end ;
55825: LD_VAR 0 1
55829: RET
// export function PrepareFrog ( ) ; begin
55830: LD_INT 0
55832: PPUSH
// uc_side := 0 ;
55833: LD_ADDR_OWVAR 20
55837: PUSH
55838: LD_INT 0
55840: ST_TO_ADDR
// uc_nation := 0 ;
55841: LD_ADDR_OWVAR 21
55845: PUSH
55846: LD_INT 0
55848: ST_TO_ADDR
// InitHc ;
55849: CALL_OW 19
// hc_class := class_frog ;
55853: LD_ADDR_OWVAR 28
55857: PUSH
55858: LD_INT 19
55860: ST_TO_ADDR
// hc_gallery :=  ;
55861: LD_ADDR_OWVAR 33
55865: PUSH
55866: LD_STRING 
55868: ST_TO_ADDR
// hc_name :=  ;
55869: LD_ADDR_OWVAR 26
55873: PUSH
55874: LD_STRING 
55876: ST_TO_ADDR
// end ;
55877: LD_VAR 0 1
55881: RET
// export function PrepareFish ( ) ; begin
55882: LD_INT 0
55884: PPUSH
// uc_side := 0 ;
55885: LD_ADDR_OWVAR 20
55889: PUSH
55890: LD_INT 0
55892: ST_TO_ADDR
// uc_nation := 0 ;
55893: LD_ADDR_OWVAR 21
55897: PUSH
55898: LD_INT 0
55900: ST_TO_ADDR
// InitHc ;
55901: CALL_OW 19
// hc_class := class_fish ;
55905: LD_ADDR_OWVAR 28
55909: PUSH
55910: LD_INT 20
55912: ST_TO_ADDR
// hc_gallery :=  ;
55913: LD_ADDR_OWVAR 33
55917: PUSH
55918: LD_STRING 
55920: ST_TO_ADDR
// hc_name :=  ;
55921: LD_ADDR_OWVAR 26
55925: PUSH
55926: LD_STRING 
55928: ST_TO_ADDR
// end ;
55929: LD_VAR 0 1
55933: RET
// export function PrepareBird ( ) ; begin
55934: LD_INT 0
55936: PPUSH
// uc_side := 0 ;
55937: LD_ADDR_OWVAR 20
55941: PUSH
55942: LD_INT 0
55944: ST_TO_ADDR
// uc_nation := 0 ;
55945: LD_ADDR_OWVAR 21
55949: PUSH
55950: LD_INT 0
55952: ST_TO_ADDR
// InitHc ;
55953: CALL_OW 19
// hc_class := class_phororhacos ;
55957: LD_ADDR_OWVAR 28
55961: PUSH
55962: LD_INT 18
55964: ST_TO_ADDR
// hc_gallery :=  ;
55965: LD_ADDR_OWVAR 33
55969: PUSH
55970: LD_STRING 
55972: ST_TO_ADDR
// hc_name :=  ;
55973: LD_ADDR_OWVAR 26
55977: PUSH
55978: LD_STRING 
55980: ST_TO_ADDR
// end ;
55981: LD_VAR 0 1
55985: RET
// export function PrepareHorse ( ) ; begin
55986: LD_INT 0
55988: PPUSH
// uc_side := 0 ;
55989: LD_ADDR_OWVAR 20
55993: PUSH
55994: LD_INT 0
55996: ST_TO_ADDR
// uc_nation := 0 ;
55997: LD_ADDR_OWVAR 21
56001: PUSH
56002: LD_INT 0
56004: ST_TO_ADDR
// InitHc ;
56005: CALL_OW 19
// hc_class := class_horse ;
56009: LD_ADDR_OWVAR 28
56013: PUSH
56014: LD_INT 21
56016: ST_TO_ADDR
// hc_gallery :=  ;
56017: LD_ADDR_OWVAR 33
56021: PUSH
56022: LD_STRING 
56024: ST_TO_ADDR
// hc_name :=  ;
56025: LD_ADDR_OWVAR 26
56029: PUSH
56030: LD_STRING 
56032: ST_TO_ADDR
// end ;
56033: LD_VAR 0 1
56037: RET
// export function PrepareMastodont ( ) ; begin
56038: LD_INT 0
56040: PPUSH
// uc_side := 0 ;
56041: LD_ADDR_OWVAR 20
56045: PUSH
56046: LD_INT 0
56048: ST_TO_ADDR
// uc_nation := 0 ;
56049: LD_ADDR_OWVAR 21
56053: PUSH
56054: LD_INT 0
56056: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56057: LD_ADDR_OWVAR 37
56061: PUSH
56062: LD_INT 31
56064: ST_TO_ADDR
// vc_control := control_rider ;
56065: LD_ADDR_OWVAR 38
56069: PUSH
56070: LD_INT 4
56072: ST_TO_ADDR
// end ;
56073: LD_VAR 0 1
56077: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56078: LD_INT 0
56080: PPUSH
56081: PPUSH
56082: PPUSH
// uc_side = 0 ;
56083: LD_ADDR_OWVAR 20
56087: PUSH
56088: LD_INT 0
56090: ST_TO_ADDR
// uc_nation = 0 ;
56091: LD_ADDR_OWVAR 21
56095: PUSH
56096: LD_INT 0
56098: ST_TO_ADDR
// InitHc_All ( ) ;
56099: CALL_OW 584
// InitVc ;
56103: CALL_OW 20
// if mastodonts then
56107: LD_VAR 0 6
56111: IFFALSE 56178
// for i = 1 to mastodonts do
56113: LD_ADDR_VAR 0 11
56117: PUSH
56118: DOUBLE
56119: LD_INT 1
56121: DEC
56122: ST_TO_ADDR
56123: LD_VAR 0 6
56127: PUSH
56128: FOR_TO
56129: IFFALSE 56176
// begin vc_chassis := 31 ;
56131: LD_ADDR_OWVAR 37
56135: PUSH
56136: LD_INT 31
56138: ST_TO_ADDR
// vc_control := control_rider ;
56139: LD_ADDR_OWVAR 38
56143: PUSH
56144: LD_INT 4
56146: ST_TO_ADDR
// animal := CreateVehicle ;
56147: LD_ADDR_VAR 0 12
56151: PUSH
56152: CALL_OW 45
56156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56157: LD_VAR 0 12
56161: PPUSH
56162: LD_VAR 0 8
56166: PPUSH
56167: LD_INT 0
56169: PPUSH
56170: CALL 58320 0 3
// end ;
56174: GO 56128
56176: POP
56177: POP
// if horses then
56178: LD_VAR 0 5
56182: IFFALSE 56249
// for i = 1 to horses do
56184: LD_ADDR_VAR 0 11
56188: PUSH
56189: DOUBLE
56190: LD_INT 1
56192: DEC
56193: ST_TO_ADDR
56194: LD_VAR 0 5
56198: PUSH
56199: FOR_TO
56200: IFFALSE 56247
// begin hc_class := 21 ;
56202: LD_ADDR_OWVAR 28
56206: PUSH
56207: LD_INT 21
56209: ST_TO_ADDR
// hc_gallery :=  ;
56210: LD_ADDR_OWVAR 33
56214: PUSH
56215: LD_STRING 
56217: ST_TO_ADDR
// animal := CreateHuman ;
56218: LD_ADDR_VAR 0 12
56222: PUSH
56223: CALL_OW 44
56227: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56228: LD_VAR 0 12
56232: PPUSH
56233: LD_VAR 0 8
56237: PPUSH
56238: LD_INT 0
56240: PPUSH
56241: CALL 58320 0 3
// end ;
56245: GO 56199
56247: POP
56248: POP
// if birds then
56249: LD_VAR 0 1
56253: IFFALSE 56320
// for i = 1 to birds do
56255: LD_ADDR_VAR 0 11
56259: PUSH
56260: DOUBLE
56261: LD_INT 1
56263: DEC
56264: ST_TO_ADDR
56265: LD_VAR 0 1
56269: PUSH
56270: FOR_TO
56271: IFFALSE 56318
// begin hc_class := 18 ;
56273: LD_ADDR_OWVAR 28
56277: PUSH
56278: LD_INT 18
56280: ST_TO_ADDR
// hc_gallery =  ;
56281: LD_ADDR_OWVAR 33
56285: PUSH
56286: LD_STRING 
56288: ST_TO_ADDR
// animal := CreateHuman ;
56289: LD_ADDR_VAR 0 12
56293: PUSH
56294: CALL_OW 44
56298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56299: LD_VAR 0 12
56303: PPUSH
56304: LD_VAR 0 8
56308: PPUSH
56309: LD_INT 0
56311: PPUSH
56312: CALL 58320 0 3
// end ;
56316: GO 56270
56318: POP
56319: POP
// if tigers then
56320: LD_VAR 0 2
56324: IFFALSE 56408
// for i = 1 to tigers do
56326: LD_ADDR_VAR 0 11
56330: PUSH
56331: DOUBLE
56332: LD_INT 1
56334: DEC
56335: ST_TO_ADDR
56336: LD_VAR 0 2
56340: PUSH
56341: FOR_TO
56342: IFFALSE 56406
// begin hc_class = class_tiger ;
56344: LD_ADDR_OWVAR 28
56348: PUSH
56349: LD_INT 14
56351: ST_TO_ADDR
// hc_gallery =  ;
56352: LD_ADDR_OWVAR 33
56356: PUSH
56357: LD_STRING 
56359: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56360: LD_ADDR_OWVAR 35
56364: PUSH
56365: LD_INT 7
56367: NEG
56368: PPUSH
56369: LD_INT 7
56371: PPUSH
56372: CALL_OW 12
56376: ST_TO_ADDR
// animal := CreateHuman ;
56377: LD_ADDR_VAR 0 12
56381: PUSH
56382: CALL_OW 44
56386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56387: LD_VAR 0 12
56391: PPUSH
56392: LD_VAR 0 8
56396: PPUSH
56397: LD_INT 0
56399: PPUSH
56400: CALL 58320 0 3
// end ;
56404: GO 56341
56406: POP
56407: POP
// if apemans then
56408: LD_VAR 0 3
56412: IFFALSE 56535
// for i = 1 to apemans do
56414: LD_ADDR_VAR 0 11
56418: PUSH
56419: DOUBLE
56420: LD_INT 1
56422: DEC
56423: ST_TO_ADDR
56424: LD_VAR 0 3
56428: PUSH
56429: FOR_TO
56430: IFFALSE 56533
// begin hc_class = class_apeman ;
56432: LD_ADDR_OWVAR 28
56436: PUSH
56437: LD_INT 12
56439: ST_TO_ADDR
// hc_gallery =  ;
56440: LD_ADDR_OWVAR 33
56444: PUSH
56445: LD_STRING 
56447: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56448: LD_ADDR_OWVAR 35
56452: PUSH
56453: LD_INT 2
56455: NEG
56456: PPUSH
56457: LD_INT 2
56459: PPUSH
56460: CALL_OW 12
56464: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56465: LD_ADDR_OWVAR 31
56469: PUSH
56470: LD_INT 1
56472: PPUSH
56473: LD_INT 3
56475: PPUSH
56476: CALL_OW 12
56480: PUSH
56481: LD_INT 1
56483: PPUSH
56484: LD_INT 3
56486: PPUSH
56487: CALL_OW 12
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: ST_TO_ADDR
// animal := CreateHuman ;
56504: LD_ADDR_VAR 0 12
56508: PUSH
56509: CALL_OW 44
56513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56514: LD_VAR 0 12
56518: PPUSH
56519: LD_VAR 0 8
56523: PPUSH
56524: LD_INT 0
56526: PPUSH
56527: CALL 58320 0 3
// end ;
56531: GO 56429
56533: POP
56534: POP
// if enchidnas then
56535: LD_VAR 0 4
56539: IFFALSE 56606
// for i = 1 to enchidnas do
56541: LD_ADDR_VAR 0 11
56545: PUSH
56546: DOUBLE
56547: LD_INT 1
56549: DEC
56550: ST_TO_ADDR
56551: LD_VAR 0 4
56555: PUSH
56556: FOR_TO
56557: IFFALSE 56604
// begin hc_class = 13 ;
56559: LD_ADDR_OWVAR 28
56563: PUSH
56564: LD_INT 13
56566: ST_TO_ADDR
// hc_gallery =  ;
56567: LD_ADDR_OWVAR 33
56571: PUSH
56572: LD_STRING 
56574: ST_TO_ADDR
// animal := CreateHuman ;
56575: LD_ADDR_VAR 0 12
56579: PUSH
56580: CALL_OW 44
56584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56585: LD_VAR 0 12
56589: PPUSH
56590: LD_VAR 0 8
56594: PPUSH
56595: LD_INT 0
56597: PPUSH
56598: CALL 58320 0 3
// end ;
56602: GO 56556
56604: POP
56605: POP
// if fishes then
56606: LD_VAR 0 7
56610: IFFALSE 56677
// for i = 1 to fishes do
56612: LD_ADDR_VAR 0 11
56616: PUSH
56617: DOUBLE
56618: LD_INT 1
56620: DEC
56621: ST_TO_ADDR
56622: LD_VAR 0 7
56626: PUSH
56627: FOR_TO
56628: IFFALSE 56675
// begin hc_class = 20 ;
56630: LD_ADDR_OWVAR 28
56634: PUSH
56635: LD_INT 20
56637: ST_TO_ADDR
// hc_gallery =  ;
56638: LD_ADDR_OWVAR 33
56642: PUSH
56643: LD_STRING 
56645: ST_TO_ADDR
// animal := CreateHuman ;
56646: LD_ADDR_VAR 0 12
56650: PUSH
56651: CALL_OW 44
56655: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56656: LD_VAR 0 12
56660: PPUSH
56661: LD_VAR 0 9
56665: PPUSH
56666: LD_INT 0
56668: PPUSH
56669: CALL 58320 0 3
// end ;
56673: GO 56627
56675: POP
56676: POP
// end ;
56677: LD_VAR 0 10
56681: RET
// export function WantHeal ( sci , unit ) ; begin
56682: LD_INT 0
56684: PPUSH
// if GetTaskList ( sci ) > 0 then
56685: LD_VAR 0 1
56689: PPUSH
56690: CALL_OW 437
56694: PUSH
56695: LD_INT 0
56697: GREATER
56698: IFFALSE 56770
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56700: LD_VAR 0 1
56704: PPUSH
56705: CALL_OW 437
56709: PUSH
56710: LD_INT 1
56712: ARRAY
56713: PUSH
56714: LD_INT 1
56716: ARRAY
56717: PUSH
56718: LD_STRING l
56720: EQUAL
56721: IFFALSE 56748
56723: PUSH
56724: LD_VAR 0 1
56728: PPUSH
56729: CALL_OW 437
56733: PUSH
56734: LD_INT 1
56736: ARRAY
56737: PUSH
56738: LD_INT 4
56740: ARRAY
56741: PUSH
56742: LD_VAR 0 2
56746: EQUAL
56747: AND
56748: IFFALSE 56760
// result := true else
56750: LD_ADDR_VAR 0 3
56754: PUSH
56755: LD_INT 1
56757: ST_TO_ADDR
56758: GO 56768
// result := false ;
56760: LD_ADDR_VAR 0 3
56764: PUSH
56765: LD_INT 0
56767: ST_TO_ADDR
// end else
56768: GO 56778
// result := false ;
56770: LD_ADDR_VAR 0 3
56774: PUSH
56775: LD_INT 0
56777: ST_TO_ADDR
// end ;
56778: LD_VAR 0 3
56782: RET
// export function HealTarget ( sci ) ; begin
56783: LD_INT 0
56785: PPUSH
// if not sci then
56786: LD_VAR 0 1
56790: NOT
56791: IFFALSE 56795
// exit ;
56793: GO 56860
// result := 0 ;
56795: LD_ADDR_VAR 0 2
56799: PUSH
56800: LD_INT 0
56802: ST_TO_ADDR
// if GetTaskList ( sci ) then
56803: LD_VAR 0 1
56807: PPUSH
56808: CALL_OW 437
56812: IFFALSE 56860
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56814: LD_VAR 0 1
56818: PPUSH
56819: CALL_OW 437
56823: PUSH
56824: LD_INT 1
56826: ARRAY
56827: PUSH
56828: LD_INT 1
56830: ARRAY
56831: PUSH
56832: LD_STRING l
56834: EQUAL
56835: IFFALSE 56860
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56837: LD_ADDR_VAR 0 2
56841: PUSH
56842: LD_VAR 0 1
56846: PPUSH
56847: CALL_OW 437
56851: PUSH
56852: LD_INT 1
56854: ARRAY
56855: PUSH
56856: LD_INT 4
56858: ARRAY
56859: ST_TO_ADDR
// end ;
56860: LD_VAR 0 2
56864: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56865: LD_INT 0
56867: PPUSH
56868: PPUSH
56869: PPUSH
56870: PPUSH
// if not base_units then
56871: LD_VAR 0 1
56875: NOT
56876: IFFALSE 56880
// exit ;
56878: GO 56967
// result := false ;
56880: LD_ADDR_VAR 0 2
56884: PUSH
56885: LD_INT 0
56887: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56888: LD_ADDR_VAR 0 5
56892: PUSH
56893: LD_VAR 0 1
56897: PPUSH
56898: LD_INT 21
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PPUSH
56908: CALL_OW 72
56912: ST_TO_ADDR
// if not tmp then
56913: LD_VAR 0 5
56917: NOT
56918: IFFALSE 56922
// exit ;
56920: GO 56967
// for i in tmp do
56922: LD_ADDR_VAR 0 3
56926: PUSH
56927: LD_VAR 0 5
56931: PUSH
56932: FOR_IN
56933: IFFALSE 56965
// begin result := EnemyInRange ( i , 22 ) ;
56935: LD_ADDR_VAR 0 2
56939: PUSH
56940: LD_VAR 0 3
56944: PPUSH
56945: LD_INT 22
56947: PPUSH
56948: CALL 54382 0 2
56952: ST_TO_ADDR
// if result then
56953: LD_VAR 0 2
56957: IFFALSE 56963
// exit ;
56959: POP
56960: POP
56961: GO 56967
// end ;
56963: GO 56932
56965: POP
56966: POP
// end ;
56967: LD_VAR 0 2
56971: RET
// export function FilterByTag ( units , tag ) ; begin
56972: LD_INT 0
56974: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56975: LD_ADDR_VAR 0 3
56979: PUSH
56980: LD_VAR 0 1
56984: PPUSH
56985: LD_INT 120
56987: PUSH
56988: LD_VAR 0 2
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PPUSH
56997: CALL_OW 72
57001: ST_TO_ADDR
// end ;
57002: LD_VAR 0 3
57006: RET
// export function IsDriver ( un ) ; begin
57007: LD_INT 0
57009: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57010: LD_ADDR_VAR 0 2
57014: PUSH
57015: LD_VAR 0 1
57019: PUSH
57020: LD_INT 55
57022: PUSH
57023: EMPTY
57024: LIST
57025: PPUSH
57026: CALL_OW 69
57030: IN
57031: ST_TO_ADDR
// end ;
57032: LD_VAR 0 2
57036: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57037: LD_INT 0
57039: PPUSH
57040: PPUSH
// list := [ ] ;
57041: LD_ADDR_VAR 0 5
57045: PUSH
57046: EMPTY
57047: ST_TO_ADDR
// case d of 0 :
57048: LD_VAR 0 3
57052: PUSH
57053: LD_INT 0
57055: DOUBLE
57056: EQUAL
57057: IFTRUE 57061
57059: GO 57194
57061: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57062: LD_ADDR_VAR 0 5
57066: PUSH
57067: LD_VAR 0 1
57071: PUSH
57072: LD_INT 4
57074: MINUS
57075: PUSH
57076: LD_VAR 0 2
57080: PUSH
57081: LD_INT 4
57083: MINUS
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: PUSH
57093: LD_VAR 0 1
57097: PUSH
57098: LD_INT 3
57100: MINUS
57101: PUSH
57102: LD_VAR 0 2
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: LIST
57114: PUSH
57115: LD_VAR 0 1
57119: PUSH
57120: LD_INT 4
57122: PLUS
57123: PUSH
57124: LD_VAR 0 2
57128: PUSH
57129: LD_INT 4
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: PUSH
57137: LD_VAR 0 1
57141: PUSH
57142: LD_INT 3
57144: PLUS
57145: PUSH
57146: LD_VAR 0 2
57150: PUSH
57151: LD_INT 3
57153: PLUS
57154: PUSH
57155: LD_INT 5
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: PUSH
57163: LD_VAR 0 1
57167: PUSH
57168: LD_VAR 0 2
57172: PUSH
57173: LD_INT 4
57175: PLUS
57176: PUSH
57177: LD_INT 0
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: LIST
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: ST_TO_ADDR
// end ; 1 :
57192: GO 57892
57194: LD_INT 1
57196: DOUBLE
57197: EQUAL
57198: IFTRUE 57202
57200: GO 57335
57202: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57203: LD_ADDR_VAR 0 5
57207: PUSH
57208: LD_VAR 0 1
57212: PUSH
57213: LD_VAR 0 2
57217: PUSH
57218: LD_INT 4
57220: MINUS
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: LIST
57229: PUSH
57230: LD_VAR 0 1
57234: PUSH
57235: LD_INT 3
57237: MINUS
57238: PUSH
57239: LD_VAR 0 2
57243: PUSH
57244: LD_INT 3
57246: MINUS
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: PUSH
57256: LD_VAR 0 1
57260: PUSH
57261: LD_INT 4
57263: MINUS
57264: PUSH
57265: LD_VAR 0 2
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: PUSH
57278: LD_VAR 0 1
57282: PUSH
57283: LD_VAR 0 2
57287: PUSH
57288: LD_INT 3
57290: PLUS
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: PUSH
57300: LD_VAR 0 1
57304: PUSH
57305: LD_INT 4
57307: PLUS
57308: PUSH
57309: LD_VAR 0 2
57313: PUSH
57314: LD_INT 4
57316: PLUS
57317: PUSH
57318: LD_INT 5
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// end ; 2 :
57333: GO 57892
57335: LD_INT 2
57337: DOUBLE
57338: EQUAL
57339: IFTRUE 57343
57341: GO 57472
57343: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57344: LD_ADDR_VAR 0 5
57348: PUSH
57349: LD_VAR 0 1
57353: PUSH
57354: LD_VAR 0 2
57358: PUSH
57359: LD_INT 3
57361: MINUS
57362: PUSH
57363: LD_INT 3
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: PUSH
57371: LD_VAR 0 1
57375: PUSH
57376: LD_INT 4
57378: PLUS
57379: PUSH
57380: LD_VAR 0 2
57384: PUSH
57385: LD_INT 4
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: LIST
57392: PUSH
57393: LD_VAR 0 1
57397: PUSH
57398: LD_VAR 0 2
57402: PUSH
57403: LD_INT 4
57405: PLUS
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: LIST
57414: PUSH
57415: LD_VAR 0 1
57419: PUSH
57420: LD_INT 3
57422: MINUS
57423: PUSH
57424: LD_VAR 0 2
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: LIST
57436: PUSH
57437: LD_VAR 0 1
57441: PUSH
57442: LD_INT 4
57444: MINUS
57445: PUSH
57446: LD_VAR 0 2
57450: PUSH
57451: LD_INT 4
57453: MINUS
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// end ; 3 :
57470: GO 57892
57472: LD_INT 3
57474: DOUBLE
57475: EQUAL
57476: IFTRUE 57480
57478: GO 57613
57480: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57481: LD_ADDR_VAR 0 5
57485: PUSH
57486: LD_VAR 0 1
57490: PUSH
57491: LD_INT 3
57493: PLUS
57494: PUSH
57495: LD_VAR 0 2
57499: PUSH
57500: LD_INT 4
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: PUSH
57508: LD_VAR 0 1
57512: PUSH
57513: LD_INT 4
57515: PLUS
57516: PUSH
57517: LD_VAR 0 2
57521: PUSH
57522: LD_INT 4
57524: PLUS
57525: PUSH
57526: LD_INT 5
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: LIST
57533: PUSH
57534: LD_VAR 0 1
57538: PUSH
57539: LD_INT 4
57541: MINUS
57542: PUSH
57543: LD_VAR 0 2
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: PUSH
57556: LD_VAR 0 1
57560: PUSH
57561: LD_VAR 0 2
57565: PUSH
57566: LD_INT 4
57568: MINUS
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: PUSH
57578: LD_VAR 0 1
57582: PUSH
57583: LD_INT 3
57585: MINUS
57586: PUSH
57587: LD_VAR 0 2
57591: PUSH
57592: LD_INT 3
57594: MINUS
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: LIST
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// end ; 4 :
57611: GO 57892
57613: LD_INT 4
57615: DOUBLE
57616: EQUAL
57617: IFTRUE 57621
57619: GO 57754
57621: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57622: LD_ADDR_VAR 0 5
57626: PUSH
57627: LD_VAR 0 1
57631: PUSH
57632: LD_VAR 0 2
57636: PUSH
57637: LD_INT 4
57639: PLUS
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: LD_VAR 0 1
57653: PUSH
57654: LD_INT 3
57656: PLUS
57657: PUSH
57658: LD_VAR 0 2
57662: PUSH
57663: LD_INT 3
57665: PLUS
57666: PUSH
57667: LD_INT 5
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: LIST
57674: PUSH
57675: LD_VAR 0 1
57679: PUSH
57680: LD_INT 4
57682: PLUS
57683: PUSH
57684: LD_VAR 0 2
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: PUSH
57697: LD_VAR 0 1
57701: PUSH
57702: LD_VAR 0 2
57706: PUSH
57707: LD_INT 3
57709: MINUS
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: LIST
57718: PUSH
57719: LD_VAR 0 1
57723: PUSH
57724: LD_INT 4
57726: MINUS
57727: PUSH
57728: LD_VAR 0 2
57732: PUSH
57733: LD_INT 4
57735: MINUS
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// end ; 5 :
57752: GO 57892
57754: LD_INT 5
57756: DOUBLE
57757: EQUAL
57758: IFTRUE 57762
57760: GO 57891
57762: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57763: LD_ADDR_VAR 0 5
57767: PUSH
57768: LD_VAR 0 1
57772: PUSH
57773: LD_INT 4
57775: MINUS
57776: PUSH
57777: LD_VAR 0 2
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: PUSH
57790: LD_VAR 0 1
57794: PUSH
57795: LD_VAR 0 2
57799: PUSH
57800: LD_INT 4
57802: MINUS
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: LIST
57811: PUSH
57812: LD_VAR 0 1
57816: PUSH
57817: LD_INT 4
57819: PLUS
57820: PUSH
57821: LD_VAR 0 2
57825: PUSH
57826: LD_INT 4
57828: PLUS
57829: PUSH
57830: LD_INT 5
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: LIST
57837: PUSH
57838: LD_VAR 0 1
57842: PUSH
57843: LD_INT 3
57845: PLUS
57846: PUSH
57847: LD_VAR 0 2
57851: PUSH
57852: LD_INT 4
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: LIST
57859: PUSH
57860: LD_VAR 0 1
57864: PUSH
57865: LD_VAR 0 2
57869: PUSH
57870: LD_INT 3
57872: PLUS
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: LIST
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// end ; end ;
57889: GO 57892
57891: POP
// result := list ;
57892: LD_ADDR_VAR 0 4
57896: PUSH
57897: LD_VAR 0 5
57901: ST_TO_ADDR
// end ;
57902: LD_VAR 0 4
57906: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57907: LD_INT 0
57909: PPUSH
57910: PPUSH
57911: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57912: LD_VAR 0 1
57916: NOT
57917: IFTRUE 57945
57919: PUSH
57920: LD_VAR 0 2
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 3
57933: PUSH
57934: LD_INT 4
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: IN
57943: NOT
57944: OR
57945: IFFALSE 57949
// exit ;
57947: GO 58032
// tmp := [ ] ;
57949: LD_ADDR_VAR 0 5
57953: PUSH
57954: EMPTY
57955: ST_TO_ADDR
// for i in units do
57956: LD_ADDR_VAR 0 4
57960: PUSH
57961: LD_VAR 0 1
57965: PUSH
57966: FOR_IN
57967: IFFALSE 58001
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57969: LD_ADDR_VAR 0 5
57973: PUSH
57974: LD_VAR 0 5
57978: PPUSH
57979: LD_VAR 0 4
57983: PPUSH
57984: LD_VAR 0 2
57988: PPUSH
57989: CALL_OW 259
57993: PPUSH
57994: CALL 59427 0 2
57998: ST_TO_ADDR
57999: GO 57966
58001: POP
58002: POP
// if not tmp then
58003: LD_VAR 0 5
58007: NOT
58008: IFFALSE 58012
// exit ;
58010: GO 58032
// result := SortListByListDesc ( units , tmp ) ;
58012: LD_ADDR_VAR 0 3
58016: PUSH
58017: LD_VAR 0 1
58021: PPUSH
58022: LD_VAR 0 5
58026: PPUSH
58027: CALL_OW 77
58031: ST_TO_ADDR
// end ;
58032: LD_VAR 0 3
58036: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58037: LD_INT 0
58039: PPUSH
58040: PPUSH
58041: PPUSH
// result := false ;
58042: LD_ADDR_VAR 0 3
58046: PUSH
58047: LD_INT 0
58049: ST_TO_ADDR
// if not building then
58050: LD_VAR 0 2
58054: NOT
58055: IFFALSE 58059
// exit ;
58057: GO 58203
// x := GetX ( building ) ;
58059: LD_ADDR_VAR 0 4
58063: PUSH
58064: LD_VAR 0 2
58068: PPUSH
58069: CALL_OW 250
58073: ST_TO_ADDR
// y := GetY ( building ) ;
58074: LD_ADDR_VAR 0 5
58078: PUSH
58079: LD_VAR 0 2
58083: PPUSH
58084: CALL_OW 251
58088: ST_TO_ADDR
// if not x or not y then
58089: LD_VAR 0 4
58093: NOT
58094: IFTRUE 58103
58096: PUSH
58097: LD_VAR 0 5
58101: NOT
58102: OR
58103: IFFALSE 58107
// exit ;
58105: GO 58203
// if GetTaskList ( unit ) then
58107: LD_VAR 0 1
58111: PPUSH
58112: CALL_OW 437
58116: IFFALSE 58203
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58118: LD_STRING e
58120: PUSH
58121: LD_VAR 0 1
58125: PPUSH
58126: CALL_OW 437
58130: PUSH
58131: LD_INT 1
58133: ARRAY
58134: PUSH
58135: LD_INT 1
58137: ARRAY
58138: EQUAL
58139: IFFALSE 58166
58141: PUSH
58142: LD_VAR 0 4
58146: PUSH
58147: LD_VAR 0 1
58151: PPUSH
58152: CALL_OW 437
58156: PUSH
58157: LD_INT 1
58159: ARRAY
58160: PUSH
58161: LD_INT 2
58163: ARRAY
58164: EQUAL
58165: AND
58166: IFFALSE 58193
58168: PUSH
58169: LD_VAR 0 5
58173: PUSH
58174: LD_VAR 0 1
58178: PPUSH
58179: CALL_OW 437
58183: PUSH
58184: LD_INT 1
58186: ARRAY
58187: PUSH
58188: LD_INT 3
58190: ARRAY
58191: EQUAL
58192: AND
58193: IFFALSE 58203
// result := true end ;
58195: LD_ADDR_VAR 0 3
58199: PUSH
58200: LD_INT 1
58202: ST_TO_ADDR
// end ;
58203: LD_VAR 0 3
58207: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58208: LD_INT 0
58210: PPUSH
// result := false ;
58211: LD_ADDR_VAR 0 4
58215: PUSH
58216: LD_INT 0
58218: ST_TO_ADDR
// if GetTaskList ( unit ) then
58219: LD_VAR 0 1
58223: PPUSH
58224: CALL_OW 437
58228: IFFALSE 58315
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58230: LD_STRING M
58232: PUSH
58233: LD_VAR 0 1
58237: PPUSH
58238: CALL_OW 437
58242: PUSH
58243: LD_INT 1
58245: ARRAY
58246: PUSH
58247: LD_INT 1
58249: ARRAY
58250: EQUAL
58251: IFFALSE 58278
58253: PUSH
58254: LD_VAR 0 2
58258: PUSH
58259: LD_VAR 0 1
58263: PPUSH
58264: CALL_OW 437
58268: PUSH
58269: LD_INT 1
58271: ARRAY
58272: PUSH
58273: LD_INT 2
58275: ARRAY
58276: EQUAL
58277: AND
58278: IFFALSE 58305
58280: PUSH
58281: LD_VAR 0 3
58285: PUSH
58286: LD_VAR 0 1
58290: PPUSH
58291: CALL_OW 437
58295: PUSH
58296: LD_INT 1
58298: ARRAY
58299: PUSH
58300: LD_INT 3
58302: ARRAY
58303: EQUAL
58304: AND
58305: IFFALSE 58315
// result := true ;
58307: LD_ADDR_VAR 0 4
58311: PUSH
58312: LD_INT 1
58314: ST_TO_ADDR
// end ; end ;
58315: LD_VAR 0 4
58319: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58320: LD_INT 0
58322: PPUSH
58323: PPUSH
58324: PPUSH
58325: PPUSH
// if not unit or not area then
58326: LD_VAR 0 1
58330: NOT
58331: IFTRUE 58340
58333: PUSH
58334: LD_VAR 0 2
58338: NOT
58339: OR
58340: IFFALSE 58344
// exit ;
58342: GO 58520
// tmp := AreaToList ( area , i ) ;
58344: LD_ADDR_VAR 0 6
58348: PUSH
58349: LD_VAR 0 2
58353: PPUSH
58354: LD_VAR 0 5
58358: PPUSH
58359: CALL_OW 517
58363: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58364: LD_ADDR_VAR 0 5
58368: PUSH
58369: DOUBLE
58370: LD_INT 1
58372: DEC
58373: ST_TO_ADDR
58374: LD_VAR 0 6
58378: PUSH
58379: LD_INT 1
58381: ARRAY
58382: PUSH
58383: FOR_TO
58384: IFFALSE 58518
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58386: LD_ADDR_VAR 0 7
58390: PUSH
58391: LD_VAR 0 6
58395: PUSH
58396: LD_INT 1
58398: ARRAY
58399: PUSH
58400: LD_VAR 0 5
58404: ARRAY
58405: PUSH
58406: LD_VAR 0 6
58410: PUSH
58411: LD_INT 2
58413: ARRAY
58414: PUSH
58415: LD_VAR 0 5
58419: ARRAY
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58425: LD_INT 92
58427: PUSH
58428: LD_VAR 0 7
58432: PUSH
58433: LD_INT 1
58435: ARRAY
58436: PUSH
58437: LD_VAR 0 7
58441: PUSH
58442: LD_INT 2
58444: ARRAY
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: PPUSH
58455: CALL_OW 69
58459: PUSH
58460: LD_INT 0
58462: EQUAL
58463: IFFALSE 58516
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58465: LD_VAR 0 1
58469: PPUSH
58470: LD_VAR 0 7
58474: PUSH
58475: LD_INT 1
58477: ARRAY
58478: PPUSH
58479: LD_VAR 0 7
58483: PUSH
58484: LD_INT 2
58486: ARRAY
58487: PPUSH
58488: LD_VAR 0 3
58492: PPUSH
58493: CALL_OW 48
// result := IsPlaced ( unit ) ;
58497: LD_ADDR_VAR 0 4
58501: PUSH
58502: LD_VAR 0 1
58506: PPUSH
58507: CALL_OW 305
58511: ST_TO_ADDR
// exit ;
58512: POP
58513: POP
58514: GO 58520
// end ; end ;
58516: GO 58383
58518: POP
58519: POP
// end ;
58520: LD_VAR 0 4
58524: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58525: LD_INT 0
58527: PPUSH
58528: PPUSH
58529: PPUSH
// if not side or side > 8 then
58530: LD_VAR 0 1
58534: NOT
58535: IFTRUE 58547
58537: PUSH
58538: LD_VAR 0 1
58542: PUSH
58543: LD_INT 8
58545: GREATER
58546: OR
58547: IFFALSE 58551
// exit ;
58549: GO 58738
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58551: LD_ADDR_VAR 0 4
58555: PUSH
58556: LD_INT 22
58558: PUSH
58559: LD_VAR 0 1
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 21
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PPUSH
58582: CALL_OW 69
58586: ST_TO_ADDR
// if not tmp then
58587: LD_VAR 0 4
58591: NOT
58592: IFFALSE 58596
// exit ;
58594: GO 58738
// enable_addtolog := true ;
58596: LD_ADDR_OWVAR 81
58600: PUSH
58601: LD_INT 1
58603: ST_TO_ADDR
// AddToLog ( [ ) ;
58604: LD_STRING [
58606: PPUSH
58607: CALL_OW 561
// for i in tmp do
58611: LD_ADDR_VAR 0 3
58615: PUSH
58616: LD_VAR 0 4
58620: PUSH
58621: FOR_IN
58622: IFFALSE 58729
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58624: LD_STRING [
58626: PUSH
58627: LD_VAR 0 3
58631: PPUSH
58632: CALL_OW 266
58636: STR
58637: PUSH
58638: LD_STRING , 
58640: STR
58641: PUSH
58642: LD_VAR 0 3
58646: PPUSH
58647: CALL_OW 250
58651: STR
58652: PUSH
58653: LD_STRING , 
58655: STR
58656: PUSH
58657: LD_VAR 0 3
58661: PPUSH
58662: CALL_OW 251
58666: STR
58667: PUSH
58668: LD_STRING , 
58670: STR
58671: PUSH
58672: LD_VAR 0 3
58676: PPUSH
58677: CALL_OW 254
58681: STR
58682: PUSH
58683: LD_STRING , 
58685: STR
58686: PUSH
58687: LD_VAR 0 3
58691: PPUSH
58692: LD_INT 1
58694: PPUSH
58695: CALL_OW 268
58699: STR
58700: PUSH
58701: LD_STRING , 
58703: STR
58704: PUSH
58705: LD_VAR 0 3
58709: PPUSH
58710: LD_INT 2
58712: PPUSH
58713: CALL_OW 268
58717: STR
58718: PUSH
58719: LD_STRING ],
58721: STR
58722: PPUSH
58723: CALL_OW 561
// end ;
58727: GO 58621
58729: POP
58730: POP
// AddToLog ( ]; ) ;
58731: LD_STRING ];
58733: PPUSH
58734: CALL_OW 561
// end ;
58738: LD_VAR 0 2
58742: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58743: LD_INT 0
58745: PPUSH
58746: PPUSH
58747: PPUSH
58748: PPUSH
58749: PPUSH
// if not area or not rate or not max then
58750: LD_VAR 0 1
58754: NOT
58755: IFTRUE 58764
58757: PUSH
58758: LD_VAR 0 2
58762: NOT
58763: OR
58764: IFTRUE 58773
58766: PUSH
58767: LD_VAR 0 4
58771: NOT
58772: OR
58773: IFFALSE 58777
// exit ;
58775: GO 58966
// while 1 do
58777: LD_INT 1
58779: IFFALSE 58966
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58781: LD_ADDR_VAR 0 9
58785: PUSH
58786: LD_VAR 0 1
58790: PPUSH
58791: LD_INT 1
58793: PPUSH
58794: CALL_OW 287
58798: PUSH
58799: LD_INT 10
58801: MUL
58802: ST_TO_ADDR
// r := rate / 10 ;
58803: LD_ADDR_VAR 0 7
58807: PUSH
58808: LD_VAR 0 2
58812: PUSH
58813: LD_INT 10
58815: DIVREAL
58816: ST_TO_ADDR
// time := 1 1$00 ;
58817: LD_ADDR_VAR 0 8
58821: PUSH
58822: LD_INT 2100
58824: ST_TO_ADDR
// if amount < min then
58825: LD_VAR 0 9
58829: PUSH
58830: LD_VAR 0 3
58834: LESS
58835: IFFALSE 58853
// r := r * 2 else
58837: LD_ADDR_VAR 0 7
58841: PUSH
58842: LD_VAR 0 7
58846: PUSH
58847: LD_INT 2
58849: MUL
58850: ST_TO_ADDR
58851: GO 58879
// if amount > max then
58853: LD_VAR 0 9
58857: PUSH
58858: LD_VAR 0 4
58862: GREATER
58863: IFFALSE 58879
// r := r / 2 ;
58865: LD_ADDR_VAR 0 7
58869: PUSH
58870: LD_VAR 0 7
58874: PUSH
58875: LD_INT 2
58877: DIVREAL
58878: ST_TO_ADDR
// time := time / r ;
58879: LD_ADDR_VAR 0 8
58883: PUSH
58884: LD_VAR 0 8
58888: PUSH
58889: LD_VAR 0 7
58893: DIVREAL
58894: ST_TO_ADDR
// if time < 0 then
58895: LD_VAR 0 8
58899: PUSH
58900: LD_INT 0
58902: LESS
58903: IFFALSE 58920
// time := time * - 1 ;
58905: LD_ADDR_VAR 0 8
58909: PUSH
58910: LD_VAR 0 8
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: MUL
58919: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58920: LD_VAR 0 8
58924: PUSH
58925: LD_INT 35
58927: PPUSH
58928: LD_INT 875
58930: PPUSH
58931: CALL_OW 12
58935: PLUS
58936: PPUSH
58937: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58941: LD_INT 1
58943: PPUSH
58944: LD_INT 5
58946: PPUSH
58947: CALL_OW 12
58951: PPUSH
58952: LD_VAR 0 1
58956: PPUSH
58957: LD_INT 1
58959: PPUSH
58960: CALL_OW 55
// end ;
58964: GO 58777
// end ;
58966: LD_VAR 0 5
58970: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58971: LD_INT 0
58973: PPUSH
58974: PPUSH
58975: PPUSH
58976: PPUSH
58977: PPUSH
58978: PPUSH
58979: PPUSH
58980: PPUSH
// if not turrets or not factories then
58981: LD_VAR 0 1
58985: NOT
58986: IFTRUE 58995
58988: PUSH
58989: LD_VAR 0 2
58993: NOT
58994: OR
58995: IFFALSE 58999
// exit ;
58997: GO 59306
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58999: LD_ADDR_VAR 0 10
59003: PUSH
59004: LD_INT 5
59006: PUSH
59007: LD_INT 6
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: LD_INT 5
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 24
59041: PUSH
59042: LD_INT 25
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 23
59051: PUSH
59052: LD_INT 27
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 42
59065: PUSH
59066: LD_INT 43
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 44
59075: PUSH
59076: LD_INT 46
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 45
59085: PUSH
59086: LD_INT 47
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: ST_TO_ADDR
// result := [ ] ;
59103: LD_ADDR_VAR 0 3
59107: PUSH
59108: EMPTY
59109: ST_TO_ADDR
// for i in turrets do
59110: LD_ADDR_VAR 0 4
59114: PUSH
59115: LD_VAR 0 1
59119: PUSH
59120: FOR_IN
59121: IFFALSE 59304
// begin nat := GetNation ( i ) ;
59123: LD_ADDR_VAR 0 7
59127: PUSH
59128: LD_VAR 0 4
59132: PPUSH
59133: CALL_OW 248
59137: ST_TO_ADDR
// weapon := 0 ;
59138: LD_ADDR_VAR 0 8
59142: PUSH
59143: LD_INT 0
59145: ST_TO_ADDR
// if not nat then
59146: LD_VAR 0 7
59150: NOT
59151: IFFALSE 59155
// continue ;
59153: GO 59120
// for j in list [ nat ] do
59155: LD_ADDR_VAR 0 5
59159: PUSH
59160: LD_VAR 0 10
59164: PUSH
59165: LD_VAR 0 7
59169: ARRAY
59170: PUSH
59171: FOR_IN
59172: IFFALSE 59213
// if GetBWeapon ( i ) = j [ 1 ] then
59174: LD_VAR 0 4
59178: PPUSH
59179: CALL_OW 269
59183: PUSH
59184: LD_VAR 0 5
59188: PUSH
59189: LD_INT 1
59191: ARRAY
59192: EQUAL
59193: IFFALSE 59211
// begin weapon := j [ 2 ] ;
59195: LD_ADDR_VAR 0 8
59199: PUSH
59200: LD_VAR 0 5
59204: PUSH
59205: LD_INT 2
59207: ARRAY
59208: ST_TO_ADDR
// break ;
59209: GO 59213
// end ;
59211: GO 59171
59213: POP
59214: POP
// if not weapon then
59215: LD_VAR 0 8
59219: NOT
59220: IFFALSE 59224
// continue ;
59222: GO 59120
// for k in factories do
59224: LD_ADDR_VAR 0 6
59228: PUSH
59229: LD_VAR 0 2
59233: PUSH
59234: FOR_IN
59235: IFFALSE 59300
// begin weapons := AvailableWeaponList ( k ) ;
59237: LD_ADDR_VAR 0 9
59241: PUSH
59242: LD_VAR 0 6
59246: PPUSH
59247: CALL_OW 478
59251: ST_TO_ADDR
// if not weapons then
59252: LD_VAR 0 9
59256: NOT
59257: IFFALSE 59261
// continue ;
59259: GO 59234
// if weapon in weapons then
59261: LD_VAR 0 8
59265: PUSH
59266: LD_VAR 0 9
59270: IN
59271: IFFALSE 59298
// begin result := [ i , weapon ] ;
59273: LD_ADDR_VAR 0 3
59277: PUSH
59278: LD_VAR 0 4
59282: PUSH
59283: LD_VAR 0 8
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: ST_TO_ADDR
// exit ;
59292: POP
59293: POP
59294: POP
59295: POP
59296: GO 59306
// end ; end ;
59298: GO 59234
59300: POP
59301: POP
// end ;
59302: GO 59120
59304: POP
59305: POP
// end ;
59306: LD_VAR 0 3
59310: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59311: LD_INT 0
59313: PPUSH
// if not side or side > 8 then
59314: LD_VAR 0 3
59318: NOT
59319: IFTRUE 59331
59321: PUSH
59322: LD_VAR 0 3
59326: PUSH
59327: LD_INT 8
59329: GREATER
59330: OR
59331: IFFALSE 59335
// exit ;
59333: GO 59394
// if not range then
59335: LD_VAR 0 4
59339: NOT
59340: IFFALSE 59351
// range := - 12 ;
59342: LD_ADDR_VAR 0 4
59346: PUSH
59347: LD_INT 12
59349: NEG
59350: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59351: LD_VAR 0 1
59355: PPUSH
59356: LD_VAR 0 2
59360: PPUSH
59361: LD_VAR 0 3
59365: PPUSH
59366: LD_VAR 0 4
59370: PPUSH
59371: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59375: LD_VAR 0 1
59379: PPUSH
59380: LD_VAR 0 2
59384: PPUSH
59385: LD_VAR 0 3
59389: PPUSH
59390: CALL_OW 331
// end ;
59394: LD_VAR 0 5
59398: RET
// export function Video ( mode ) ; begin
59399: LD_INT 0
59401: PPUSH
// ingame_video = mode ;
59402: LD_ADDR_OWVAR 52
59406: PUSH
59407: LD_VAR 0 1
59411: ST_TO_ADDR
// interface_hidden = mode ;
59412: LD_ADDR_OWVAR 54
59416: PUSH
59417: LD_VAR 0 1
59421: ST_TO_ADDR
// end ;
59422: LD_VAR 0 2
59426: RET
// export function Join ( array , element ) ; begin
59427: LD_INT 0
59429: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59430: LD_ADDR_VAR 0 3
59434: PUSH
59435: LD_VAR 0 1
59439: PPUSH
59440: LD_VAR 0 1
59444: PUSH
59445: LD_INT 1
59447: PLUS
59448: PPUSH
59449: LD_VAR 0 2
59453: PPUSH
59454: CALL_OW 1
59458: ST_TO_ADDR
// end ;
59459: LD_VAR 0 3
59463: RET
// export function JoinUnion ( array , element ) ; begin
59464: LD_INT 0
59466: PPUSH
// result := array union element ;
59467: LD_ADDR_VAR 0 3
59471: PUSH
59472: LD_VAR 0 1
59476: PUSH
59477: LD_VAR 0 2
59481: UNION
59482: ST_TO_ADDR
// end ;
59483: LD_VAR 0 3
59487: RET
// export function GetBehemoths ( side ) ; begin
59488: LD_INT 0
59490: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59491: LD_ADDR_VAR 0 2
59495: PUSH
59496: LD_INT 22
59498: PUSH
59499: LD_VAR 0 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 31
59510: PUSH
59511: LD_INT 25
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PPUSH
59522: CALL_OW 69
59526: ST_TO_ADDR
// end ;
59527: LD_VAR 0 2
59531: RET
// export function Shuffle ( array ) ; var i , index ; begin
59532: LD_INT 0
59534: PPUSH
59535: PPUSH
59536: PPUSH
// result := [ ] ;
59537: LD_ADDR_VAR 0 2
59541: PUSH
59542: EMPTY
59543: ST_TO_ADDR
// if not array then
59544: LD_VAR 0 1
59548: NOT
59549: IFFALSE 59553
// exit ;
59551: GO 59652
// Randomize ;
59553: CALL_OW 10
// for i = array downto 1 do
59557: LD_ADDR_VAR 0 3
59561: PUSH
59562: DOUBLE
59563: LD_VAR 0 1
59567: INC
59568: ST_TO_ADDR
59569: LD_INT 1
59571: PUSH
59572: FOR_DOWNTO
59573: IFFALSE 59650
// begin index := rand ( 1 , array ) ;
59575: LD_ADDR_VAR 0 4
59579: PUSH
59580: LD_INT 1
59582: PPUSH
59583: LD_VAR 0 1
59587: PPUSH
59588: CALL_OW 12
59592: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59593: LD_ADDR_VAR 0 2
59597: PUSH
59598: LD_VAR 0 2
59602: PPUSH
59603: LD_VAR 0 2
59607: PUSH
59608: LD_INT 1
59610: PLUS
59611: PPUSH
59612: LD_VAR 0 1
59616: PUSH
59617: LD_VAR 0 4
59621: ARRAY
59622: PPUSH
59623: CALL_OW 2
59627: ST_TO_ADDR
// array := Delete ( array , index ) ;
59628: LD_ADDR_VAR 0 1
59632: PUSH
59633: LD_VAR 0 1
59637: PPUSH
59638: LD_VAR 0 4
59642: PPUSH
59643: CALL_OW 3
59647: ST_TO_ADDR
// end ;
59648: GO 59572
59650: POP
59651: POP
// end ;
59652: LD_VAR 0 2
59656: RET
// export function GetBaseMaterials ( base ) ; begin
59657: LD_INT 0
59659: PPUSH
// result := [ 0 , 0 , 0 ] ;
59660: LD_ADDR_VAR 0 2
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: ST_TO_ADDR
// if not base then
59679: LD_VAR 0 1
59683: NOT
59684: IFFALSE 59688
// exit ;
59686: GO 59737
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59688: LD_ADDR_VAR 0 2
59692: PUSH
59693: LD_VAR 0 1
59697: PPUSH
59698: LD_INT 1
59700: PPUSH
59701: CALL_OW 275
59705: PUSH
59706: LD_VAR 0 1
59710: PPUSH
59711: LD_INT 2
59713: PPUSH
59714: CALL_OW 275
59718: PUSH
59719: LD_VAR 0 1
59723: PPUSH
59724: LD_INT 3
59726: PPUSH
59727: CALL_OW 275
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// end ;
59737: LD_VAR 0 2
59741: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59742: LD_INT 0
59744: PPUSH
59745: PPUSH
// result := array ;
59746: LD_ADDR_VAR 0 3
59750: PUSH
59751: LD_VAR 0 1
59755: ST_TO_ADDR
// if size >= result then
59756: LD_VAR 0 2
59760: PUSH
59761: LD_VAR 0 3
59765: GREATEREQUAL
59766: IFFALSE 59770
// exit ;
59768: GO 59820
// if size then
59770: LD_VAR 0 2
59774: IFFALSE 59820
// for i := array downto size do
59776: LD_ADDR_VAR 0 4
59780: PUSH
59781: DOUBLE
59782: LD_VAR 0 1
59786: INC
59787: ST_TO_ADDR
59788: LD_VAR 0 2
59792: PUSH
59793: FOR_DOWNTO
59794: IFFALSE 59818
// result := Delete ( result , result ) ;
59796: LD_ADDR_VAR 0 3
59800: PUSH
59801: LD_VAR 0 3
59805: PPUSH
59806: LD_VAR 0 3
59810: PPUSH
59811: CALL_OW 3
59815: ST_TO_ADDR
59816: GO 59793
59818: POP
59819: POP
// end ;
59820: LD_VAR 0 3
59824: RET
// export function ComExit ( unit ) ; var tmp ; begin
59825: LD_INT 0
59827: PPUSH
59828: PPUSH
// if not IsInUnit ( unit ) then
59829: LD_VAR 0 1
59833: PPUSH
59834: CALL_OW 310
59838: NOT
59839: IFFALSE 59843
// exit ;
59841: GO 59903
// tmp := IsInUnit ( unit ) ;
59843: LD_ADDR_VAR 0 3
59847: PUSH
59848: LD_VAR 0 1
59852: PPUSH
59853: CALL_OW 310
59857: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59858: LD_VAR 0 3
59862: PPUSH
59863: CALL_OW 247
59867: PUSH
59868: LD_INT 2
59870: EQUAL
59871: IFFALSE 59884
// ComExitVehicle ( unit ) else
59873: LD_VAR 0 1
59877: PPUSH
59878: CALL_OW 121
59882: GO 59893
// ComExitBuilding ( unit ) ;
59884: LD_VAR 0 1
59888: PPUSH
59889: CALL_OW 122
// result := tmp ;
59893: LD_ADDR_VAR 0 2
59897: PUSH
59898: LD_VAR 0 3
59902: ST_TO_ADDR
// end ;
59903: LD_VAR 0 2
59907: RET
// export function ComExitAll ( units ) ; var i ; begin
59908: LD_INT 0
59910: PPUSH
59911: PPUSH
// if not units then
59912: LD_VAR 0 1
59916: NOT
59917: IFFALSE 59921
// exit ;
59919: GO 59947
// for i in units do
59921: LD_ADDR_VAR 0 3
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: FOR_IN
59932: IFFALSE 59945
// ComExit ( i ) ;
59934: LD_VAR 0 3
59938: PPUSH
59939: CALL 59825 0 1
59943: GO 59931
59945: POP
59946: POP
// end ;
59947: LD_VAR 0 2
59951: RET
// export function ResetHc ; begin
59952: LD_INT 0
59954: PPUSH
// InitHc ;
59955: CALL_OW 19
// hc_importance := 0 ;
59959: LD_ADDR_OWVAR 32
59963: PUSH
59964: LD_INT 0
59966: ST_TO_ADDR
// end ;
59967: LD_VAR 0 1
59971: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59972: LD_INT 0
59974: PPUSH
59975: PPUSH
59976: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59977: LD_ADDR_VAR 0 6
59981: PUSH
59982: LD_VAR 0 1
59986: PUSH
59987: LD_VAR 0 3
59991: PLUS
59992: PUSH
59993: LD_INT 2
59995: DIV
59996: ST_TO_ADDR
// if _x < 0 then
59997: LD_VAR 0 6
60001: PUSH
60002: LD_INT 0
60004: LESS
60005: IFFALSE 60022
// _x := _x * - 1 ;
60007: LD_ADDR_VAR 0 6
60011: PUSH
60012: LD_VAR 0 6
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: MUL
60021: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60022: LD_ADDR_VAR 0 7
60026: PUSH
60027: LD_VAR 0 2
60031: PUSH
60032: LD_VAR 0 4
60036: PLUS
60037: PUSH
60038: LD_INT 2
60040: DIV
60041: ST_TO_ADDR
// if _y < 0 then
60042: LD_VAR 0 7
60046: PUSH
60047: LD_INT 0
60049: LESS
60050: IFFALSE 60067
// _y := _y * - 1 ;
60052: LD_ADDR_VAR 0 7
60056: PUSH
60057: LD_VAR 0 7
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: MUL
60066: ST_TO_ADDR
// result := [ _x , _y ] ;
60067: LD_ADDR_VAR 0 5
60071: PUSH
60072: LD_VAR 0 6
60076: PUSH
60077: LD_VAR 0 7
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: ST_TO_ADDR
// end ;
60086: LD_VAR 0 5
60090: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60091: LD_INT 0
60093: PPUSH
60094: PPUSH
60095: PPUSH
60096: PPUSH
// task := GetTaskList ( unit ) ;
60097: LD_ADDR_VAR 0 7
60101: PUSH
60102: LD_VAR 0 1
60106: PPUSH
60107: CALL_OW 437
60111: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60112: LD_VAR 0 7
60116: NOT
60117: IFFALSE 60136
60119: PUSH
60120: LD_VAR 0 1
60124: PPUSH
60125: LD_VAR 0 2
60129: PPUSH
60130: CALL_OW 308
60134: NOT
60135: AND
60136: IFFALSE 60140
// exit ;
60138: GO 60258
// if IsInArea ( unit , area ) then
60140: LD_VAR 0 1
60144: PPUSH
60145: LD_VAR 0 2
60149: PPUSH
60150: CALL_OW 308
60154: IFFALSE 60172
// begin ComMoveToArea ( unit , goAway ) ;
60156: LD_VAR 0 1
60160: PPUSH
60161: LD_VAR 0 3
60165: PPUSH
60166: CALL_OW 113
// exit ;
60170: GO 60258
// end ; if task [ 1 ] [ 1 ] <> M then
60172: LD_VAR 0 7
60176: PUSH
60177: LD_INT 1
60179: ARRAY
60180: PUSH
60181: LD_INT 1
60183: ARRAY
60184: PUSH
60185: LD_STRING M
60187: NONEQUAL
60188: IFFALSE 60192
// exit ;
60190: GO 60258
// x := task [ 1 ] [ 2 ] ;
60192: LD_ADDR_VAR 0 5
60196: PUSH
60197: LD_VAR 0 7
60201: PUSH
60202: LD_INT 1
60204: ARRAY
60205: PUSH
60206: LD_INT 2
60208: ARRAY
60209: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60210: LD_ADDR_VAR 0 6
60214: PUSH
60215: LD_VAR 0 7
60219: PUSH
60220: LD_INT 1
60222: ARRAY
60223: PUSH
60224: LD_INT 3
60226: ARRAY
60227: ST_TO_ADDR
// if InArea ( x , y , area ) then
60228: LD_VAR 0 5
60232: PPUSH
60233: LD_VAR 0 6
60237: PPUSH
60238: LD_VAR 0 2
60242: PPUSH
60243: CALL_OW 309
60247: IFFALSE 60258
// ComStop ( unit ) ;
60249: LD_VAR 0 1
60253: PPUSH
60254: CALL_OW 141
// end ;
60258: LD_VAR 0 4
60262: RET
// export function Abs ( value ) ; begin
60263: LD_INT 0
60265: PPUSH
// result := value ;
60266: LD_ADDR_VAR 0 2
60270: PUSH
60271: LD_VAR 0 1
60275: ST_TO_ADDR
// if value < 0 then
60276: LD_VAR 0 1
60280: PUSH
60281: LD_INT 0
60283: LESS
60284: IFFALSE 60301
// result := value * - 1 ;
60286: LD_ADDR_VAR 0 2
60290: PUSH
60291: LD_VAR 0 1
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: MUL
60300: ST_TO_ADDR
// end ;
60301: LD_VAR 0 2
60305: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60306: LD_INT 0
60308: PPUSH
60309: PPUSH
60310: PPUSH
60311: PPUSH
60312: PPUSH
60313: PPUSH
60314: PPUSH
60315: PPUSH
// if not unit or not building then
60316: LD_VAR 0 1
60320: NOT
60321: IFTRUE 60330
60323: PUSH
60324: LD_VAR 0 2
60328: NOT
60329: OR
60330: IFFALSE 60334
// exit ;
60332: GO 60562
// x := GetX ( building ) ;
60334: LD_ADDR_VAR 0 4
60338: PUSH
60339: LD_VAR 0 2
60343: PPUSH
60344: CALL_OW 250
60348: ST_TO_ADDR
// y := GetY ( building ) ;
60349: LD_ADDR_VAR 0 6
60353: PUSH
60354: LD_VAR 0 2
60358: PPUSH
60359: CALL_OW 251
60363: ST_TO_ADDR
// d := GetDir ( building ) ;
60364: LD_ADDR_VAR 0 8
60368: PUSH
60369: LD_VAR 0 2
60373: PPUSH
60374: CALL_OW 254
60378: ST_TO_ADDR
// r := 4 ;
60379: LD_ADDR_VAR 0 9
60383: PUSH
60384: LD_INT 4
60386: ST_TO_ADDR
// for i := 1 to 5 do
60387: LD_ADDR_VAR 0 10
60391: PUSH
60392: DOUBLE
60393: LD_INT 1
60395: DEC
60396: ST_TO_ADDR
60397: LD_INT 5
60399: PUSH
60400: FOR_TO
60401: IFFALSE 60560
// begin _x := ShiftX ( x , d , r + i ) ;
60403: LD_ADDR_VAR 0 5
60407: PUSH
60408: LD_VAR 0 4
60412: PPUSH
60413: LD_VAR 0 8
60417: PPUSH
60418: LD_VAR 0 9
60422: PUSH
60423: LD_VAR 0 10
60427: PLUS
60428: PPUSH
60429: CALL_OW 272
60433: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60434: LD_ADDR_VAR 0 7
60438: PUSH
60439: LD_VAR 0 6
60443: PPUSH
60444: LD_VAR 0 8
60448: PPUSH
60449: LD_VAR 0 9
60453: PUSH
60454: LD_VAR 0 10
60458: PLUS
60459: PPUSH
60460: CALL_OW 273
60464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60465: LD_VAR 0 5
60469: PPUSH
60470: LD_VAR 0 7
60474: PPUSH
60475: CALL_OW 488
60479: IFFALSE 60514
60481: PUSH
60482: LD_VAR 0 5
60486: PPUSH
60487: LD_VAR 0 7
60491: PPUSH
60492: CALL_OW 428
60496: PPUSH
60497: CALL_OW 247
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: IN
60512: NOT
60513: AND
60514: IFFALSE 60558
// begin ComMoveXY ( unit , _x , _y ) ;
60516: LD_VAR 0 1
60520: PPUSH
60521: LD_VAR 0 5
60525: PPUSH
60526: LD_VAR 0 7
60530: PPUSH
60531: CALL_OW 111
// result := [ _x , _y ] ;
60535: LD_ADDR_VAR 0 3
60539: PUSH
60540: LD_VAR 0 5
60544: PUSH
60545: LD_VAR 0 7
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: ST_TO_ADDR
// exit ;
60554: POP
60555: POP
60556: GO 60562
// end ; end ;
60558: GO 60400
60560: POP
60561: POP
// end ;
60562: LD_VAR 0 3
60566: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60567: LD_INT 0
60569: PPUSH
60570: PPUSH
60571: PPUSH
// result := 0 ;
60572: LD_ADDR_VAR 0 3
60576: PUSH
60577: LD_INT 0
60579: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60580: LD_VAR 0 1
60584: PUSH
60585: LD_INT 0
60587: LESS
60588: IFTRUE 60600
60590: PUSH
60591: LD_VAR 0 1
60595: PUSH
60596: LD_INT 8
60598: GREATER
60599: OR
60600: IFTRUE 60612
60602: PUSH
60603: LD_VAR 0 2
60607: PUSH
60608: LD_INT 0
60610: LESS
60611: OR
60612: IFTRUE 60624
60614: PUSH
60615: LD_VAR 0 2
60619: PUSH
60620: LD_INT 8
60622: GREATER
60623: OR
60624: IFFALSE 60628
// exit ;
60626: GO 60703
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60628: LD_ADDR_VAR 0 4
60632: PUSH
60633: LD_INT 22
60635: PUSH
60636: LD_VAR 0 2
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PPUSH
60645: CALL_OW 69
60649: PUSH
60650: FOR_IN
60651: IFFALSE 60701
// begin un := UnitShoot ( i ) ;
60653: LD_ADDR_VAR 0 5
60657: PUSH
60658: LD_VAR 0 4
60662: PPUSH
60663: CALL_OW 504
60667: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60668: LD_VAR 0 5
60672: PPUSH
60673: CALL_OW 255
60677: PUSH
60678: LD_VAR 0 1
60682: EQUAL
60683: IFFALSE 60699
// begin result := un ;
60685: LD_ADDR_VAR 0 3
60689: PUSH
60690: LD_VAR 0 5
60694: ST_TO_ADDR
// exit ;
60695: POP
60696: POP
60697: GO 60703
// end ; end ;
60699: GO 60650
60701: POP
60702: POP
// end ;
60703: LD_VAR 0 3
60707: RET
// export function GetCargoBay ( units ) ; begin
60708: LD_INT 0
60710: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60711: LD_ADDR_VAR 0 2
60715: PUSH
60716: LD_VAR 0 1
60720: PPUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 34
60726: PUSH
60727: LD_INT 12
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 34
60736: PUSH
60737: LD_INT 51
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 34
60746: PUSH
60747: LD_INT 32
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 34
60756: PUSH
60757: LD_INT 89
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: PPUSH
60771: CALL_OW 72
60775: ST_TO_ADDR
// end ;
60776: LD_VAR 0 2
60780: RET
// export function Negate ( value ) ; begin
60781: LD_INT 0
60783: PPUSH
// result := not value ;
60784: LD_ADDR_VAR 0 2
60788: PUSH
60789: LD_VAR 0 1
60793: NOT
60794: ST_TO_ADDR
// end ;
60795: LD_VAR 0 2
60799: RET
// export function Inc ( value ) ; begin
60800: LD_INT 0
60802: PPUSH
// result := value + 1 ;
60803: LD_ADDR_VAR 0 2
60807: PUSH
60808: LD_VAR 0 1
60812: PUSH
60813: LD_INT 1
60815: PLUS
60816: ST_TO_ADDR
// end ;
60817: LD_VAR 0 2
60821: RET
// export function Dec ( value ) ; begin
60822: LD_INT 0
60824: PPUSH
// result := value - 1 ;
60825: LD_ADDR_VAR 0 2
60829: PUSH
60830: LD_VAR 0 1
60834: PUSH
60835: LD_INT 1
60837: MINUS
60838: ST_TO_ADDR
// end ;
60839: LD_VAR 0 2
60843: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60844: LD_INT 0
60846: PPUSH
60847: PPUSH
60848: PPUSH
60849: PPUSH
60850: PPUSH
60851: PPUSH
60852: PPUSH
60853: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60854: LD_VAR 0 1
60858: PPUSH
60859: LD_VAR 0 2
60863: PPUSH
60864: CALL_OW 488
60868: NOT
60869: IFTRUE 60888
60871: PUSH
60872: LD_VAR 0 3
60876: PPUSH
60877: LD_VAR 0 4
60881: PPUSH
60882: CALL_OW 488
60886: NOT
60887: OR
60888: IFFALSE 60901
// begin result := - 1 ;
60890: LD_ADDR_VAR 0 5
60894: PUSH
60895: LD_INT 1
60897: NEG
60898: ST_TO_ADDR
// exit ;
60899: GO 61136
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60901: LD_ADDR_VAR 0 12
60905: PUSH
60906: LD_VAR 0 1
60910: PPUSH
60911: LD_VAR 0 2
60915: PPUSH
60916: LD_VAR 0 3
60920: PPUSH
60921: LD_VAR 0 4
60925: PPUSH
60926: CALL 59972 0 4
60930: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60931: LD_ADDR_VAR 0 11
60935: PUSH
60936: LD_VAR 0 1
60940: PPUSH
60941: LD_VAR 0 2
60945: PPUSH
60946: LD_VAR 0 12
60950: PUSH
60951: LD_INT 1
60953: ARRAY
60954: PPUSH
60955: LD_VAR 0 12
60959: PUSH
60960: LD_INT 2
60962: ARRAY
60963: PPUSH
60964: CALL_OW 298
60968: ST_TO_ADDR
// distance := 9999 ;
60969: LD_ADDR_VAR 0 10
60973: PUSH
60974: LD_INT 9999
60976: ST_TO_ADDR
// for i := 0 to 5 do
60977: LD_ADDR_VAR 0 6
60981: PUSH
60982: DOUBLE
60983: LD_INT 0
60985: DEC
60986: ST_TO_ADDR
60987: LD_INT 5
60989: PUSH
60990: FOR_TO
60991: IFFALSE 61134
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60993: LD_ADDR_VAR 0 7
60997: PUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: LD_VAR 0 6
61007: PPUSH
61008: LD_VAR 0 11
61012: PPUSH
61013: CALL_OW 272
61017: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61018: LD_ADDR_VAR 0 8
61022: PUSH
61023: LD_VAR 0 2
61027: PPUSH
61028: LD_VAR 0 6
61032: PPUSH
61033: LD_VAR 0 11
61037: PPUSH
61038: CALL_OW 273
61042: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61043: LD_VAR 0 7
61047: PPUSH
61048: LD_VAR 0 8
61052: PPUSH
61053: CALL_OW 488
61057: NOT
61058: IFFALSE 61062
// continue ;
61060: GO 60990
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61062: LD_ADDR_VAR 0 9
61066: PUSH
61067: LD_VAR 0 12
61071: PUSH
61072: LD_INT 1
61074: ARRAY
61075: PPUSH
61076: LD_VAR 0 12
61080: PUSH
61081: LD_INT 2
61083: ARRAY
61084: PPUSH
61085: LD_VAR 0 7
61089: PPUSH
61090: LD_VAR 0 8
61094: PPUSH
61095: CALL_OW 298
61099: ST_TO_ADDR
// if tmp < distance then
61100: LD_VAR 0 9
61104: PUSH
61105: LD_VAR 0 10
61109: LESS
61110: IFFALSE 61132
// begin result := i ;
61112: LD_ADDR_VAR 0 5
61116: PUSH
61117: LD_VAR 0 6
61121: ST_TO_ADDR
// distance := tmp ;
61122: LD_ADDR_VAR 0 10
61126: PUSH
61127: LD_VAR 0 9
61131: ST_TO_ADDR
// end ; end ;
61132: GO 60990
61134: POP
61135: POP
// end ;
61136: LD_VAR 0 5
61140: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61141: LD_INT 0
61143: PPUSH
61144: PPUSH
// if not driver or not IsInUnit ( driver ) then
61145: LD_VAR 0 1
61149: NOT
61150: IFTRUE 61164
61152: PUSH
61153: LD_VAR 0 1
61157: PPUSH
61158: CALL_OW 310
61162: NOT
61163: OR
61164: IFFALSE 61168
// exit ;
61166: GO 61258
// vehicle := IsInUnit ( driver ) ;
61168: LD_ADDR_VAR 0 3
61172: PUSH
61173: LD_VAR 0 1
61177: PPUSH
61178: CALL_OW 310
61182: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61183: LD_VAR 0 1
61187: PPUSH
61188: LD_STRING \
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 0
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: PUSH
61218: LD_STRING E
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: LD_INT 0
61226: PUSH
61227: LD_VAR 0 3
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PPUSH
61254: CALL_OW 446
// end ;
61258: LD_VAR 0 2
61262: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61263: LD_INT 0
61265: PPUSH
61266: PPUSH
// if not driver or not IsInUnit ( driver ) then
61267: LD_VAR 0 1
61271: NOT
61272: IFTRUE 61286
61274: PUSH
61275: LD_VAR 0 1
61279: PPUSH
61280: CALL_OW 310
61284: NOT
61285: OR
61286: IFFALSE 61290
// exit ;
61288: GO 61380
// vehicle := IsInUnit ( driver ) ;
61290: LD_ADDR_VAR 0 3
61294: PUSH
61295: LD_VAR 0 1
61299: PPUSH
61300: CALL_OW 310
61304: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61305: LD_VAR 0 1
61309: PPUSH
61310: LD_STRING \
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 0
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: PUSH
61340: LD_STRING E
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: LD_VAR 0 3
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PPUSH
61376: CALL_OW 447
// end ;
61380: LD_VAR 0 2
61384: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61385: LD_INT 0
61387: PPUSH
61388: PPUSH
61389: PPUSH
// tmp := [ ] ;
61390: LD_ADDR_VAR 0 5
61394: PUSH
61395: EMPTY
61396: ST_TO_ADDR
// for i in units do
61397: LD_ADDR_VAR 0 4
61401: PUSH
61402: LD_VAR 0 1
61406: PUSH
61407: FOR_IN
61408: IFFALSE 61446
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61410: LD_ADDR_VAR 0 5
61414: PUSH
61415: LD_VAR 0 5
61419: PPUSH
61420: LD_VAR 0 5
61424: PUSH
61425: LD_INT 1
61427: PLUS
61428: PPUSH
61429: LD_VAR 0 4
61433: PPUSH
61434: CALL_OW 256
61438: PPUSH
61439: CALL_OW 2
61443: ST_TO_ADDR
61444: GO 61407
61446: POP
61447: POP
// if not tmp then
61448: LD_VAR 0 5
61452: NOT
61453: IFFALSE 61457
// exit ;
61455: GO 61505
// if asc then
61457: LD_VAR 0 2
61461: IFFALSE 61485
// result := SortListByListAsc ( units , tmp ) else
61463: LD_ADDR_VAR 0 3
61467: PUSH
61468: LD_VAR 0 1
61472: PPUSH
61473: LD_VAR 0 5
61477: PPUSH
61478: CALL_OW 76
61482: ST_TO_ADDR
61483: GO 61505
// result := SortListByListDesc ( units , tmp ) ;
61485: LD_ADDR_VAR 0 3
61489: PUSH
61490: LD_VAR 0 1
61494: PPUSH
61495: LD_VAR 0 5
61499: PPUSH
61500: CALL_OW 77
61504: ST_TO_ADDR
// end ;
61505: LD_VAR 0 3
61509: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61510: LD_INT 0
61512: PPUSH
61513: PPUSH
// task := GetTaskList ( mech ) ;
61514: LD_ADDR_VAR 0 4
61518: PUSH
61519: LD_VAR 0 1
61523: PPUSH
61524: CALL_OW 437
61528: ST_TO_ADDR
// if not task then
61529: LD_VAR 0 4
61533: NOT
61534: IFFALSE 61538
// exit ;
61536: GO 61582
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61538: LD_ADDR_VAR 0 3
61542: PUSH
61543: LD_VAR 0 4
61547: PUSH
61548: LD_INT 1
61550: ARRAY
61551: PUSH
61552: LD_INT 1
61554: ARRAY
61555: PUSH
61556: LD_STRING r
61558: EQUAL
61559: IFFALSE 61581
61561: PUSH
61562: LD_VAR 0 4
61566: PUSH
61567: LD_INT 1
61569: ARRAY
61570: PUSH
61571: LD_INT 4
61573: ARRAY
61574: PUSH
61575: LD_VAR 0 2
61579: EQUAL
61580: AND
61581: ST_TO_ADDR
// end ;
61582: LD_VAR 0 3
61586: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61587: LD_INT 0
61589: PPUSH
// SetDir ( unit , d ) ;
61590: LD_VAR 0 1
61594: PPUSH
61595: LD_VAR 0 4
61599: PPUSH
61600: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
61604: LD_ADDR_VAR 0 6
61608: PUSH
61609: LD_VAR 0 1
61613: PPUSH
61614: LD_VAR 0 2
61618: PPUSH
61619: LD_VAR 0 3
61623: PPUSH
61624: LD_VAR 0 5
61628: PPUSH
61629: CALL_OW 48
61633: ST_TO_ADDR
// end ;
61634: LD_VAR 0 6
61638: RET
// export function ToNaturalNumber ( number ) ; begin
61639: LD_INT 0
61641: PPUSH
// result := number div 1 ;
61642: LD_ADDR_VAR 0 2
61646: PUSH
61647: LD_VAR 0 1
61651: PUSH
61652: LD_INT 1
61654: DIV
61655: ST_TO_ADDR
// if number < 0 then
61656: LD_VAR 0 1
61660: PUSH
61661: LD_INT 0
61663: LESS
61664: IFFALSE 61674
// result := 0 ;
61666: LD_ADDR_VAR 0 2
61670: PUSH
61671: LD_INT 0
61673: ST_TO_ADDR
// end ;
61674: LD_VAR 0 2
61678: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
61679: LD_INT 0
61681: PPUSH
61682: PPUSH
61683: PPUSH
// if not buildings then
61684: LD_VAR 0 1
61688: NOT
61689: IFFALSE 61693
// exit ;
61691: GO 61808
// tmp := [ ] ;
61693: LD_ADDR_VAR 0 5
61697: PUSH
61698: EMPTY
61699: ST_TO_ADDR
// for b in buildings do
61700: LD_ADDR_VAR 0 4
61704: PUSH
61705: LD_VAR 0 1
61709: PUSH
61710: FOR_IN
61711: IFFALSE 61749
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
61713: LD_ADDR_VAR 0 5
61717: PUSH
61718: LD_VAR 0 5
61722: PPUSH
61723: LD_VAR 0 5
61727: PUSH
61728: LD_INT 1
61730: PLUS
61731: PPUSH
61732: LD_VAR 0 4
61736: PPUSH
61737: CALL_OW 266
61741: PPUSH
61742: CALL_OW 1
61746: ST_TO_ADDR
61747: GO 61710
61749: POP
61750: POP
// if not tmp then
61751: LD_VAR 0 5
61755: NOT
61756: IFFALSE 61760
// exit ;
61758: GO 61808
// if asc then
61760: LD_VAR 0 2
61764: IFFALSE 61788
// result := SortListByListAsc ( buildings , tmp ) else
61766: LD_ADDR_VAR 0 3
61770: PUSH
61771: LD_VAR 0 1
61775: PPUSH
61776: LD_VAR 0 5
61780: PPUSH
61781: CALL_OW 76
61785: ST_TO_ADDR
61786: GO 61808
// result := SortListByListDesc ( buildings , tmp ) ;
61788: LD_ADDR_VAR 0 3
61792: PUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: LD_VAR 0 5
61802: PPUSH
61803: CALL_OW 77
61807: ST_TO_ADDR
// end ;
61808: LD_VAR 0 3
61812: RET
// export function SortByClass ( units , class ) ; var un ; begin
61813: LD_INT 0
61815: PPUSH
61816: PPUSH
// if not units or not class then
61817: LD_VAR 0 1
61821: NOT
61822: IFTRUE 61831
61824: PUSH
61825: LD_VAR 0 2
61829: NOT
61830: OR
61831: IFFALSE 61835
// exit ;
61833: GO 61930
// result := [ ] ;
61835: LD_ADDR_VAR 0 3
61839: PUSH
61840: EMPTY
61841: ST_TO_ADDR
// for un in units do
61842: LD_ADDR_VAR 0 4
61846: PUSH
61847: LD_VAR 0 1
61851: PUSH
61852: FOR_IN
61853: IFFALSE 61928
// if GetClass ( un ) = class then
61855: LD_VAR 0 4
61859: PPUSH
61860: CALL_OW 257
61864: PUSH
61865: LD_VAR 0 2
61869: EQUAL
61870: IFFALSE 61897
// result := Insert ( result , 1 , un ) else
61872: LD_ADDR_VAR 0 3
61876: PUSH
61877: LD_VAR 0 3
61881: PPUSH
61882: LD_INT 1
61884: PPUSH
61885: LD_VAR 0 4
61889: PPUSH
61890: CALL_OW 2
61894: ST_TO_ADDR
61895: GO 61926
// result := Replace ( result , result + 1 , un ) ;
61897: LD_ADDR_VAR 0 3
61901: PUSH
61902: LD_VAR 0 3
61906: PPUSH
61907: LD_VAR 0 3
61911: PUSH
61912: LD_INT 1
61914: PLUS
61915: PPUSH
61916: LD_VAR 0 4
61920: PPUSH
61921: CALL_OW 1
61925: ST_TO_ADDR
61926: GO 61852
61928: POP
61929: POP
// end ;
61930: LD_VAR 0 3
61934: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61935: LD_INT 0
61937: PPUSH
61938: PPUSH
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
61943: PPUSH
// result := [ ] ;
61944: LD_ADDR_VAR 0 4
61948: PUSH
61949: EMPTY
61950: ST_TO_ADDR
// if x - r < 0 then
61951: LD_VAR 0 1
61955: PUSH
61956: LD_VAR 0 3
61960: MINUS
61961: PUSH
61962: LD_INT 0
61964: LESS
61965: IFFALSE 61977
// min_x := 0 else
61967: LD_ADDR_VAR 0 8
61971: PUSH
61972: LD_INT 0
61974: ST_TO_ADDR
61975: GO 61993
// min_x := x - r ;
61977: LD_ADDR_VAR 0 8
61981: PUSH
61982: LD_VAR 0 1
61986: PUSH
61987: LD_VAR 0 3
61991: MINUS
61992: ST_TO_ADDR
// if y - r < 0 then
61993: LD_VAR 0 2
61997: PUSH
61998: LD_VAR 0 3
62002: MINUS
62003: PUSH
62004: LD_INT 0
62006: LESS
62007: IFFALSE 62019
// min_y := 0 else
62009: LD_ADDR_VAR 0 7
62013: PUSH
62014: LD_INT 0
62016: ST_TO_ADDR
62017: GO 62035
// min_y := y - r ;
62019: LD_ADDR_VAR 0 7
62023: PUSH
62024: LD_VAR 0 2
62028: PUSH
62029: LD_VAR 0 3
62033: MINUS
62034: ST_TO_ADDR
// max_x := x + r ;
62035: LD_ADDR_VAR 0 9
62039: PUSH
62040: LD_VAR 0 1
62044: PUSH
62045: LD_VAR 0 3
62049: PLUS
62050: ST_TO_ADDR
// max_y := y + r ;
62051: LD_ADDR_VAR 0 10
62055: PUSH
62056: LD_VAR 0 2
62060: PUSH
62061: LD_VAR 0 3
62065: PLUS
62066: ST_TO_ADDR
// for _x = min_x to max_x do
62067: LD_ADDR_VAR 0 5
62071: PUSH
62072: DOUBLE
62073: LD_VAR 0 8
62077: DEC
62078: ST_TO_ADDR
62079: LD_VAR 0 9
62083: PUSH
62084: FOR_TO
62085: IFFALSE 62186
// for _y = min_y to max_y do
62087: LD_ADDR_VAR 0 6
62091: PUSH
62092: DOUBLE
62093: LD_VAR 0 7
62097: DEC
62098: ST_TO_ADDR
62099: LD_VAR 0 10
62103: PUSH
62104: FOR_TO
62105: IFFALSE 62182
// begin if not ValidHex ( _x , _y ) then
62107: LD_VAR 0 5
62111: PPUSH
62112: LD_VAR 0 6
62116: PPUSH
62117: CALL_OW 488
62121: NOT
62122: IFFALSE 62126
// continue ;
62124: GO 62104
// if GetResourceTypeXY ( _x , _y ) then
62126: LD_VAR 0 5
62130: PPUSH
62131: LD_VAR 0 6
62135: PPUSH
62136: CALL_OW 283
62140: IFFALSE 62180
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62142: LD_ADDR_VAR 0 4
62146: PUSH
62147: LD_VAR 0 4
62151: PPUSH
62152: LD_VAR 0 4
62156: PUSH
62157: LD_INT 1
62159: PLUS
62160: PPUSH
62161: LD_VAR 0 5
62165: PUSH
62166: LD_VAR 0 6
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PPUSH
62175: CALL_OW 1
62179: ST_TO_ADDR
// end ;
62180: GO 62104
62182: POP
62183: POP
62184: GO 62084
62186: POP
62187: POP
// end ;
62188: LD_VAR 0 4
62192: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62193: LD_INT 0
62195: PPUSH
62196: PPUSH
62197: PPUSH
62198: PPUSH
62199: PPUSH
62200: PPUSH
62201: PPUSH
62202: PPUSH
// if not units then
62203: LD_VAR 0 1
62207: NOT
62208: IFFALSE 62212
// exit ;
62210: GO 62744
// result := UnitFilter ( units , [ f_ok ] ) ;
62212: LD_ADDR_VAR 0 3
62216: PUSH
62217: LD_VAR 0 1
62221: PPUSH
62222: LD_INT 50
62224: PUSH
62225: EMPTY
62226: LIST
62227: PPUSH
62228: CALL_OW 72
62232: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62233: LD_ADDR_VAR 0 8
62237: PUSH
62238: LD_VAR 0 1
62242: PUSH
62243: LD_INT 1
62245: ARRAY
62246: PPUSH
62247: CALL_OW 255
62251: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62252: LD_ADDR_VAR 0 10
62256: PUSH
62257: LD_INT 29
62259: PUSH
62260: LD_INT 91
62262: PUSH
62263: LD_INT 49
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: ST_TO_ADDR
// if not result then
62271: LD_VAR 0 3
62275: NOT
62276: IFFALSE 62280
// exit ;
62278: GO 62744
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62280: LD_ADDR_VAR 0 5
62284: PUSH
62285: LD_INT 81
62287: PUSH
62288: LD_VAR 0 8
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PPUSH
62297: CALL_OW 69
62301: ST_TO_ADDR
// for i in result do
62302: LD_ADDR_VAR 0 4
62306: PUSH
62307: LD_VAR 0 3
62311: PUSH
62312: FOR_IN
62313: IFFALSE 62742
// begin tag := GetTag ( i ) + 1 ;
62315: LD_ADDR_VAR 0 9
62319: PUSH
62320: LD_VAR 0 4
62324: PPUSH
62325: CALL_OW 110
62329: PUSH
62330: LD_INT 1
62332: PLUS
62333: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
62334: LD_ADDR_VAR 0 7
62338: PUSH
62339: LD_VAR 0 4
62343: PPUSH
62344: CALL_OW 250
62348: PPUSH
62349: LD_VAR 0 4
62353: PPUSH
62354: CALL_OW 251
62358: PPUSH
62359: LD_INT 4
62361: PPUSH
62362: CALL 61935 0 3
62366: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
62367: LD_VAR 0 4
62371: PPUSH
62372: CALL_OW 247
62376: PUSH
62377: LD_INT 2
62379: EQUAL
62380: IFFALSE 62392
62382: PUSH
62383: LD_VAR 0 7
62387: PUSH
62388: LD_INT 2
62390: GREATER
62391: AND
62392: IFFALSE 62412
62394: PUSH
62395: LD_VAR 0 4
62399: PPUSH
62400: CALL_OW 264
62404: PUSH
62405: LD_VAR 0 10
62409: IN
62410: NOT
62411: AND
62412: IFFALSE 62451
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62414: LD_VAR 0 4
62418: PPUSH
62419: LD_VAR 0 7
62423: PUSH
62424: LD_INT 1
62426: ARRAY
62427: PUSH
62428: LD_INT 1
62430: ARRAY
62431: PPUSH
62432: LD_VAR 0 7
62436: PUSH
62437: LD_INT 1
62439: ARRAY
62440: PUSH
62441: LD_INT 2
62443: ARRAY
62444: PPUSH
62445: CALL_OW 116
62449: GO 62740
// if path > tag then
62451: LD_VAR 0 2
62455: PUSH
62456: LD_VAR 0 9
62460: GREATER
62461: IFFALSE 62669
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62463: LD_ADDR_VAR 0 6
62467: PUSH
62468: LD_VAR 0 5
62472: PPUSH
62473: LD_INT 91
62475: PUSH
62476: LD_VAR 0 4
62480: PUSH
62481: LD_INT 8
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: PPUSH
62489: CALL_OW 72
62493: ST_TO_ADDR
// if nearEnemy then
62494: LD_VAR 0 6
62498: IFFALSE 62567
// begin if GetWeapon ( i ) = ru_time_lapser then
62500: LD_VAR 0 4
62504: PPUSH
62505: CALL_OW 264
62509: PUSH
62510: LD_INT 49
62512: EQUAL
62513: IFFALSE 62541
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62515: LD_VAR 0 4
62519: PPUSH
62520: LD_VAR 0 6
62524: PPUSH
62525: LD_VAR 0 4
62529: PPUSH
62530: CALL_OW 74
62534: PPUSH
62535: CALL_OW 112
62539: GO 62565
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62541: LD_VAR 0 4
62545: PPUSH
62546: LD_VAR 0 6
62550: PPUSH
62551: LD_VAR 0 4
62555: PPUSH
62556: CALL_OW 74
62560: PPUSH
62561: CALL 63825 0 2
// end else
62565: GO 62667
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62567: LD_VAR 0 4
62571: PPUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_VAR 0 9
62581: ARRAY
62582: PUSH
62583: LD_INT 1
62585: ARRAY
62586: PPUSH
62587: LD_VAR 0 2
62591: PUSH
62592: LD_VAR 0 9
62596: ARRAY
62597: PUSH
62598: LD_INT 2
62600: ARRAY
62601: PPUSH
62602: CALL_OW 297
62606: PUSH
62607: LD_INT 6
62609: GREATER
62610: IFFALSE 62653
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62612: LD_VAR 0 4
62616: PPUSH
62617: LD_VAR 0 2
62621: PUSH
62622: LD_VAR 0 9
62626: ARRAY
62627: PUSH
62628: LD_INT 1
62630: ARRAY
62631: PPUSH
62632: LD_VAR 0 2
62636: PUSH
62637: LD_VAR 0 9
62641: ARRAY
62642: PUSH
62643: LD_INT 2
62645: ARRAY
62646: PPUSH
62647: CALL_OW 114
62651: GO 62667
// SetTag ( i , tag ) ;
62653: LD_VAR 0 4
62657: PPUSH
62658: LD_VAR 0 9
62662: PPUSH
62663: CALL_OW 109
// end else
62667: GO 62740
// if enemy then
62669: LD_VAR 0 5
62673: IFFALSE 62740
// begin if GetWeapon ( i ) = ru_time_lapser then
62675: LD_VAR 0 4
62679: PPUSH
62680: CALL_OW 264
62684: PUSH
62685: LD_INT 49
62687: EQUAL
62688: IFFALSE 62716
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62690: LD_VAR 0 4
62694: PPUSH
62695: LD_VAR 0 5
62699: PPUSH
62700: LD_VAR 0 4
62704: PPUSH
62705: CALL_OW 74
62709: PPUSH
62710: CALL_OW 112
62714: GO 62740
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62716: LD_VAR 0 4
62720: PPUSH
62721: LD_VAR 0 5
62725: PPUSH
62726: LD_VAR 0 4
62730: PPUSH
62731: CALL_OW 74
62735: PPUSH
62736: CALL 63825 0 2
// end ; end ;
62740: GO 62312
62742: POP
62743: POP
// end ;
62744: LD_VAR 0 3
62748: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62749: LD_INT 0
62751: PPUSH
62752: PPUSH
62753: PPUSH
// if not unit or IsInUnit ( unit ) then
62754: LD_VAR 0 1
62758: NOT
62759: IFTRUE 62772
62761: PUSH
62762: LD_VAR 0 1
62766: PPUSH
62767: CALL_OW 310
62771: OR
62772: IFFALSE 62776
// exit ;
62774: GO 62867
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62776: LD_ADDR_VAR 0 4
62780: PUSH
62781: LD_VAR 0 1
62785: PPUSH
62786: CALL_OW 250
62790: PPUSH
62791: LD_VAR 0 2
62795: PPUSH
62796: LD_INT 1
62798: PPUSH
62799: CALL_OW 272
62803: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62804: LD_ADDR_VAR 0 5
62808: PUSH
62809: LD_VAR 0 1
62813: PPUSH
62814: CALL_OW 251
62818: PPUSH
62819: LD_VAR 0 2
62823: PPUSH
62824: LD_INT 1
62826: PPUSH
62827: CALL_OW 273
62831: ST_TO_ADDR
// if ValidHex ( x , y ) then
62832: LD_VAR 0 4
62836: PPUSH
62837: LD_VAR 0 5
62841: PPUSH
62842: CALL_OW 488
62846: IFFALSE 62867
// ComTurnXY ( unit , x , y ) ;
62848: LD_VAR 0 1
62852: PPUSH
62853: LD_VAR 0 4
62857: PPUSH
62858: LD_VAR 0 5
62862: PPUSH
62863: CALL_OW 118
// end ;
62867: LD_VAR 0 3
62871: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62872: LD_INT 0
62874: PPUSH
62875: PPUSH
// result := false ;
62876: LD_ADDR_VAR 0 3
62880: PUSH
62881: LD_INT 0
62883: ST_TO_ADDR
// if not units then
62884: LD_VAR 0 2
62888: NOT
62889: IFFALSE 62893
// exit ;
62891: GO 62938
// for i in units do
62893: LD_ADDR_VAR 0 4
62897: PUSH
62898: LD_VAR 0 2
62902: PUSH
62903: FOR_IN
62904: IFFALSE 62936
// if See ( side , i ) then
62906: LD_VAR 0 1
62910: PPUSH
62911: LD_VAR 0 4
62915: PPUSH
62916: CALL_OW 292
62920: IFFALSE 62934
// begin result := true ;
62922: LD_ADDR_VAR 0 3
62926: PUSH
62927: LD_INT 1
62929: ST_TO_ADDR
// exit ;
62930: POP
62931: POP
62932: GO 62938
// end ;
62934: GO 62903
62936: POP
62937: POP
// end ;
62938: LD_VAR 0 3
62942: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62943: LD_INT 0
62945: PPUSH
62946: PPUSH
62947: PPUSH
62948: PPUSH
// if not unit or not points then
62949: LD_VAR 0 1
62953: NOT
62954: IFTRUE 62963
62956: PUSH
62957: LD_VAR 0 2
62961: NOT
62962: OR
62963: IFFALSE 62967
// exit ;
62965: GO 63057
// dist := 99999 ;
62967: LD_ADDR_VAR 0 5
62971: PUSH
62972: LD_INT 99999
62974: ST_TO_ADDR
// for i in points do
62975: LD_ADDR_VAR 0 4
62979: PUSH
62980: LD_VAR 0 2
62984: PUSH
62985: FOR_IN
62986: IFFALSE 63055
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62988: LD_ADDR_VAR 0 6
62992: PUSH
62993: LD_VAR 0 1
62997: PPUSH
62998: LD_VAR 0 4
63002: PUSH
63003: LD_INT 1
63005: ARRAY
63006: PPUSH
63007: LD_VAR 0 4
63011: PUSH
63012: LD_INT 2
63014: ARRAY
63015: PPUSH
63016: CALL_OW 297
63020: ST_TO_ADDR
// if tmpDist < dist then
63021: LD_VAR 0 6
63025: PUSH
63026: LD_VAR 0 5
63030: LESS
63031: IFFALSE 63053
// begin result := i ;
63033: LD_ADDR_VAR 0 3
63037: PUSH
63038: LD_VAR 0 4
63042: ST_TO_ADDR
// dist := tmpDist ;
63043: LD_ADDR_VAR 0 5
63047: PUSH
63048: LD_VAR 0 6
63052: ST_TO_ADDR
// end ; end ;
63053: GO 62985
63055: POP
63056: POP
// end ;
63057: LD_VAR 0 3
63061: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63062: LD_INT 0
63064: PPUSH
// uc_side := side ;
63065: LD_ADDR_OWVAR 20
63069: PUSH
63070: LD_VAR 0 1
63074: ST_TO_ADDR
// uc_nation := 3 ;
63075: LD_ADDR_OWVAR 21
63079: PUSH
63080: LD_INT 3
63082: ST_TO_ADDR
// vc_chassis := 25 ;
63083: LD_ADDR_OWVAR 37
63087: PUSH
63088: LD_INT 25
63090: ST_TO_ADDR
// vc_engine := engine_siberite ;
63091: LD_ADDR_OWVAR 39
63095: PUSH
63096: LD_INT 3
63098: ST_TO_ADDR
// vc_control := control_computer ;
63099: LD_ADDR_OWVAR 38
63103: PUSH
63104: LD_INT 3
63106: ST_TO_ADDR
// vc_weapon := 59 ;
63107: LD_ADDR_OWVAR 40
63111: PUSH
63112: LD_INT 59
63114: ST_TO_ADDR
// result := CreateVehicle ;
63115: LD_ADDR_VAR 0 5
63119: PUSH
63120: CALL_OW 45
63124: ST_TO_ADDR
// SetDir ( result , d ) ;
63125: LD_VAR 0 5
63129: PPUSH
63130: LD_VAR 0 4
63134: PPUSH
63135: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63139: LD_VAR 0 5
63143: PPUSH
63144: LD_VAR 0 2
63148: PPUSH
63149: LD_VAR 0 3
63153: PPUSH
63154: LD_INT 0
63156: PPUSH
63157: CALL_OW 48
// end ;
63161: LD_VAR 0 5
63165: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63166: LD_INT 0
63168: PPUSH
63169: PPUSH
63170: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63171: LD_ADDR_VAR 0 2
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63194: LD_VAR 0 1
63198: NOT
63199: IFTRUE 63232
63201: PUSH
63202: LD_VAR 0 1
63206: PPUSH
63207: CALL_OW 264
63211: PUSH
63212: LD_INT 12
63214: PUSH
63215: LD_INT 51
63217: PUSH
63218: LD_INT 32
63220: PUSH
63221: LD_INT 89
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: IN
63230: NOT
63231: OR
63232: IFFALSE 63236
// exit ;
63234: GO 63334
// for i := 1 to 3 do
63236: LD_ADDR_VAR 0 3
63240: PUSH
63241: DOUBLE
63242: LD_INT 1
63244: DEC
63245: ST_TO_ADDR
63246: LD_INT 3
63248: PUSH
63249: FOR_TO
63250: IFFALSE 63332
// begin tmp := GetCargo ( cargo , i ) ;
63252: LD_ADDR_VAR 0 4
63256: PUSH
63257: LD_VAR 0 1
63261: PPUSH
63262: LD_VAR 0 3
63266: PPUSH
63267: CALL_OW 289
63271: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63272: LD_ADDR_VAR 0 2
63276: PUSH
63277: LD_VAR 0 2
63281: PPUSH
63282: LD_VAR 0 3
63286: PPUSH
63287: LD_VAR 0 4
63291: PPUSH
63292: CALL_OW 1
63296: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63297: LD_ADDR_VAR 0 2
63301: PUSH
63302: LD_VAR 0 2
63306: PPUSH
63307: LD_INT 4
63309: PPUSH
63310: LD_VAR 0 2
63314: PUSH
63315: LD_INT 4
63317: ARRAY
63318: PUSH
63319: LD_VAR 0 4
63323: PLUS
63324: PPUSH
63325: CALL_OW 1
63329: ST_TO_ADDR
// end ;
63330: GO 63249
63332: POP
63333: POP
// end ;
63334: LD_VAR 0 2
63338: RET
// export function Length ( array ) ; begin
63339: LD_INT 0
63341: PPUSH
// result := array + 0 ;
63342: LD_ADDR_VAR 0 2
63346: PUSH
63347: LD_VAR 0 1
63351: PUSH
63352: LD_INT 0
63354: PLUS
63355: ST_TO_ADDR
// end ;
63356: LD_VAR 0 2
63360: RET
// export function PrepareArray ( array ) ; begin
63361: LD_INT 0
63363: PPUSH
// result := array diff 0 ;
63364: LD_ADDR_VAR 0 2
63368: PUSH
63369: LD_VAR 0 1
63373: PUSH
63374: LD_INT 0
63376: DIFF
63377: ST_TO_ADDR
// if not result [ 1 ] then
63378: LD_VAR 0 2
63382: PUSH
63383: LD_INT 1
63385: ARRAY
63386: NOT
63387: IFFALSE 63407
// result := Delete ( result , 1 ) ;
63389: LD_ADDR_VAR 0 2
63393: PUSH
63394: LD_VAR 0 2
63398: PPUSH
63399: LD_INT 1
63401: PPUSH
63402: CALL_OW 3
63406: ST_TO_ADDR
// end ;
63407: LD_VAR 0 2
63411: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63412: LD_INT 0
63414: PPUSH
63415: PPUSH
63416: PPUSH
63417: PPUSH
// sibRocketRange := 25 ;
63418: LD_ADDR_VAR 0 6
63422: PUSH
63423: LD_INT 25
63425: ST_TO_ADDR
// result := false ;
63426: LD_ADDR_VAR 0 4
63430: PUSH
63431: LD_INT 0
63433: ST_TO_ADDR
// for i := 0 to 5 do
63434: LD_ADDR_VAR 0 5
63438: PUSH
63439: DOUBLE
63440: LD_INT 0
63442: DEC
63443: ST_TO_ADDR
63444: LD_INT 5
63446: PUSH
63447: FOR_TO
63448: IFFALSE 63515
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63450: LD_VAR 0 1
63454: PPUSH
63455: LD_VAR 0 5
63459: PPUSH
63460: LD_VAR 0 6
63464: PPUSH
63465: CALL_OW 272
63469: PPUSH
63470: LD_VAR 0 2
63474: PPUSH
63475: LD_VAR 0 5
63479: PPUSH
63480: LD_VAR 0 6
63484: PPUSH
63485: CALL_OW 273
63489: PPUSH
63490: LD_VAR 0 3
63494: PPUSH
63495: CALL_OW 309
63499: IFFALSE 63513
// begin result := true ;
63501: LD_ADDR_VAR 0 4
63505: PUSH
63506: LD_INT 1
63508: ST_TO_ADDR
// exit ;
63509: POP
63510: POP
63511: GO 63517
// end ;
63513: GO 63447
63515: POP
63516: POP
// end ;
63517: LD_VAR 0 4
63521: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
63522: LD_INT 0
63524: PPUSH
63525: PPUSH
63526: PPUSH
// if btype = b_depot then
63527: LD_VAR 0 2
63531: PUSH
63532: LD_INT 0
63534: EQUAL
63535: IFFALSE 63547
// begin result := true ;
63537: LD_ADDR_VAR 0 3
63541: PUSH
63542: LD_INT 1
63544: ST_TO_ADDR
// exit ;
63545: GO 63667
// end ; pom := GetBase ( depot ) ;
63547: LD_ADDR_VAR 0 4
63551: PUSH
63552: LD_VAR 0 1
63556: PPUSH
63557: CALL_OW 274
63561: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63562: LD_ADDR_VAR 0 5
63566: PUSH
63567: LD_VAR 0 2
63571: PPUSH
63572: LD_VAR 0 1
63576: PPUSH
63577: CALL_OW 248
63581: PPUSH
63582: CALL_OW 450
63586: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
63587: LD_ADDR_VAR 0 3
63591: PUSH
63592: LD_VAR 0 4
63596: PPUSH
63597: LD_INT 1
63599: PPUSH
63600: CALL_OW 275
63604: PUSH
63605: LD_VAR 0 5
63609: PUSH
63610: LD_INT 1
63612: ARRAY
63613: GREATEREQUAL
63614: IFFALSE 63640
63616: PUSH
63617: LD_VAR 0 4
63621: PPUSH
63622: LD_INT 2
63624: PPUSH
63625: CALL_OW 275
63629: PUSH
63630: LD_VAR 0 5
63634: PUSH
63635: LD_INT 2
63637: ARRAY
63638: GREATEREQUAL
63639: AND
63640: IFFALSE 63666
63642: PUSH
63643: LD_VAR 0 4
63647: PPUSH
63648: LD_INT 3
63650: PPUSH
63651: CALL_OW 275
63655: PUSH
63656: LD_VAR 0 5
63660: PUSH
63661: LD_INT 3
63663: ARRAY
63664: GREATEREQUAL
63665: AND
63666: ST_TO_ADDR
// end ;
63667: LD_VAR 0 3
63671: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63672: LD_INT 0
63674: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63675: LD_VAR 0 1
63679: PPUSH
63680: LD_VAR 0 2
63684: PPUSH
63685: LD_INT 0
63687: PPUSH
63688: LD_INT 0
63690: PPUSH
63691: LD_INT 1
63693: PPUSH
63694: LD_INT 0
63696: PPUSH
63697: CALL_OW 587
// end ;
63701: LD_VAR 0 3
63705: RET
// export function CenterOnNow ( unit ) ; begin
63706: LD_INT 0
63708: PPUSH
// result := IsInUnit ( unit ) ;
63709: LD_ADDR_VAR 0 2
63713: PUSH
63714: LD_VAR 0 1
63718: PPUSH
63719: CALL_OW 310
63723: ST_TO_ADDR
// if not result then
63724: LD_VAR 0 2
63728: NOT
63729: IFFALSE 63741
// result := unit ;
63731: LD_ADDR_VAR 0 2
63735: PUSH
63736: LD_VAR 0 1
63740: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63741: LD_VAR 0 1
63745: PPUSH
63746: CALL_OW 87
// end ;
63750: LD_VAR 0 2
63754: RET
// export function ComMoveHex ( unit , hex ) ; begin
63755: LD_INT 0
63757: PPUSH
// if not hex then
63758: LD_VAR 0 2
63762: NOT
63763: IFFALSE 63767
// exit ;
63765: GO 63820
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63767: LD_VAR 0 2
63771: PUSH
63772: LD_INT 1
63774: ARRAY
63775: PPUSH
63776: LD_VAR 0 2
63780: PUSH
63781: LD_INT 2
63783: ARRAY
63784: PPUSH
63785: CALL_OW 428
63789: IFFALSE 63793
// exit ;
63791: GO 63820
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63793: LD_VAR 0 1
63797: PPUSH
63798: LD_VAR 0 2
63802: PUSH
63803: LD_INT 1
63805: ARRAY
63806: PPUSH
63807: LD_VAR 0 2
63811: PUSH
63812: LD_INT 2
63814: ARRAY
63815: PPUSH
63816: CALL_OW 111
// end ;
63820: LD_VAR 0 3
63824: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63825: LD_INT 0
63827: PPUSH
63828: PPUSH
63829: PPUSH
// if not unit or not enemy then
63830: LD_VAR 0 1
63834: NOT
63835: IFTRUE 63844
63837: PUSH
63838: LD_VAR 0 2
63842: NOT
63843: OR
63844: IFFALSE 63848
// exit ;
63846: GO 63974
// x := GetX ( enemy ) ;
63848: LD_ADDR_VAR 0 4
63852: PUSH
63853: LD_VAR 0 2
63857: PPUSH
63858: CALL_OW 250
63862: ST_TO_ADDR
// y := GetY ( enemy ) ;
63863: LD_ADDR_VAR 0 5
63867: PUSH
63868: LD_VAR 0 2
63872: PPUSH
63873: CALL_OW 251
63877: ST_TO_ADDR
// if ValidHex ( x , y ) then
63878: LD_VAR 0 4
63882: PPUSH
63883: LD_VAR 0 5
63887: PPUSH
63888: CALL_OW 488
63892: IFFALSE 63974
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63894: LD_VAR 0 2
63898: PPUSH
63899: CALL_OW 247
63903: PUSH
63904: LD_INT 3
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: IN
63914: IFTRUE 63937
63916: PUSH
63917: LD_VAR 0 1
63921: PPUSH
63922: CALL_OW 255
63926: PPUSH
63927: LD_VAR 0 2
63931: PPUSH
63932: CALL_OW 292
63936: OR
63937: IFFALSE 63955
// ComAttackUnit ( unit , enemy ) else
63939: LD_VAR 0 1
63943: PPUSH
63944: LD_VAR 0 2
63948: PPUSH
63949: CALL_OW 115
63953: GO 63974
// ComAgressiveMove ( unit , x , y ) ;
63955: LD_VAR 0 1
63959: PPUSH
63960: LD_VAR 0 4
63964: PPUSH
63965: LD_VAR 0 5
63969: PPUSH
63970: CALL_OW 114
// end ;
63974: LD_VAR 0 3
63978: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63979: LD_INT 0
63981: PPUSH
63982: PPUSH
63983: PPUSH
// list := AreaToList ( area , 0 ) ;
63984: LD_ADDR_VAR 0 5
63988: PUSH
63989: LD_VAR 0 1
63993: PPUSH
63994: LD_INT 0
63996: PPUSH
63997: CALL_OW 517
64001: ST_TO_ADDR
// if not list then
64002: LD_VAR 0 5
64006: NOT
64007: IFFALSE 64011
// exit ;
64009: GO 64141
// if all then
64011: LD_VAR 0 2
64015: IFFALSE 64103
// begin for i := 1 to list [ 1 ] do
64017: LD_ADDR_VAR 0 4
64021: PUSH
64022: DOUBLE
64023: LD_INT 1
64025: DEC
64026: ST_TO_ADDR
64027: LD_VAR 0 5
64031: PUSH
64032: LD_INT 1
64034: ARRAY
64035: PUSH
64036: FOR_TO
64037: IFFALSE 64099
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64039: LD_ADDR_VAR 0 3
64043: PUSH
64044: LD_VAR 0 3
64048: PPUSH
64049: LD_VAR 0 3
64053: PUSH
64054: LD_INT 1
64056: PLUS
64057: PPUSH
64058: LD_VAR 0 5
64062: PUSH
64063: LD_INT 1
64065: ARRAY
64066: PUSH
64067: LD_VAR 0 4
64071: ARRAY
64072: PUSH
64073: LD_VAR 0 5
64077: PUSH
64078: LD_INT 2
64080: ARRAY
64081: PUSH
64082: LD_VAR 0 4
64086: ARRAY
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PPUSH
64092: CALL_OW 1
64096: ST_TO_ADDR
64097: GO 64036
64099: POP
64100: POP
// exit ;
64101: GO 64141
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64103: LD_ADDR_VAR 0 3
64107: PUSH
64108: LD_VAR 0 5
64112: PUSH
64113: LD_INT 1
64115: ARRAY
64116: PUSH
64117: LD_INT 1
64119: ARRAY
64120: PUSH
64121: LD_VAR 0 5
64125: PUSH
64126: LD_INT 2
64128: ARRAY
64129: PUSH
64130: LD_INT 1
64132: ARRAY
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: EMPTY
64139: LIST
64140: ST_TO_ADDR
// end ;
64141: LD_VAR 0 3
64145: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64146: LD_INT 0
64148: PPUSH
64149: PPUSH
// list := AreaToList ( area , 0 ) ;
64150: LD_ADDR_VAR 0 4
64154: PUSH
64155: LD_VAR 0 1
64159: PPUSH
64160: LD_INT 0
64162: PPUSH
64163: CALL_OW 517
64167: ST_TO_ADDR
// if not list then
64168: LD_VAR 0 4
64172: NOT
64173: IFFALSE 64177
// exit ;
64175: GO 64218
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64177: LD_ADDR_VAR 0 3
64181: PUSH
64182: LD_VAR 0 4
64186: PUSH
64187: LD_INT 1
64189: ARRAY
64190: PUSH
64191: LD_INT 1
64193: ARRAY
64194: PUSH
64195: LD_VAR 0 4
64199: PUSH
64200: LD_INT 2
64202: ARRAY
64203: PUSH
64204: LD_INT 1
64206: ARRAY
64207: PUSH
64208: LD_VAR 0 2
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// end ;
64218: LD_VAR 0 3
64222: RET
// export function First ( array ) ; begin
64223: LD_INT 0
64225: PPUSH
// if not array then
64226: LD_VAR 0 1
64230: NOT
64231: IFFALSE 64235
// exit ;
64233: GO 64249
// result := array [ 1 ] ;
64235: LD_ADDR_VAR 0 2
64239: PUSH
64240: LD_VAR 0 1
64244: PUSH
64245: LD_INT 1
64247: ARRAY
64248: ST_TO_ADDR
// end ;
64249: LD_VAR 0 2
64253: RET
// export function Last ( array ) ; begin
64254: LD_INT 0
64256: PPUSH
// if not array then
64257: LD_VAR 0 1
64261: NOT
64262: IFFALSE 64266
// exit ;
64264: GO 64282
// result := array [ array ] ;
64266: LD_ADDR_VAR 0 2
64270: PUSH
64271: LD_VAR 0 1
64275: PUSH
64276: LD_VAR 0 1
64280: ARRAY
64281: ST_TO_ADDR
// end ;
64282: LD_VAR 0 2
64286: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
64287: LD_INT 0
64289: PPUSH
64290: PPUSH
// result := [ ] ;
64291: LD_ADDR_VAR 0 5
64295: PUSH
64296: EMPTY
64297: ST_TO_ADDR
// if not array then
64298: LD_VAR 0 1
64302: NOT
64303: IFFALSE 64307
// exit ;
64305: GO 64419
// for i := 1 to array do
64307: LD_ADDR_VAR 0 6
64311: PUSH
64312: DOUBLE
64313: LD_INT 1
64315: DEC
64316: ST_TO_ADDR
64317: LD_VAR 0 1
64321: PUSH
64322: FOR_TO
64323: IFFALSE 64417
// if array [ i ] [ index ] = value then
64325: LD_VAR 0 1
64329: PUSH
64330: LD_VAR 0 6
64334: ARRAY
64335: PUSH
64336: LD_VAR 0 2
64340: ARRAY
64341: PUSH
64342: LD_VAR 0 3
64346: EQUAL
64347: IFFALSE 64415
// begin if indexColumn then
64349: LD_VAR 0 4
64353: IFFALSE 64389
// result := Join ( result , array [ i ] [ indexColumn ] ) else
64355: LD_ADDR_VAR 0 5
64359: PUSH
64360: LD_VAR 0 5
64364: PPUSH
64365: LD_VAR 0 1
64369: PUSH
64370: LD_VAR 0 6
64374: ARRAY
64375: PUSH
64376: LD_VAR 0 4
64380: ARRAY
64381: PPUSH
64382: CALL 59427 0 2
64386: ST_TO_ADDR
64387: GO 64415
// result := Join ( result , array [ i ] ) ;
64389: LD_ADDR_VAR 0 5
64393: PUSH
64394: LD_VAR 0 5
64398: PPUSH
64399: LD_VAR 0 1
64403: PUSH
64404: LD_VAR 0 6
64408: ARRAY
64409: PPUSH
64410: CALL 59427 0 2
64414: ST_TO_ADDR
// end ;
64415: GO 64322
64417: POP
64418: POP
// end ;
64419: LD_VAR 0 5
64423: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64424: LD_INT 0
64426: PPUSH
// if not vehicles or not parkingPoint then
64427: LD_VAR 0 1
64431: NOT
64432: IFTRUE 64441
64434: PUSH
64435: LD_VAR 0 2
64439: NOT
64440: OR
64441: IFFALSE 64445
// exit ;
64443: GO 64543
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64445: LD_ADDR_VAR 0 1
64449: PUSH
64450: LD_VAR 0 1
64454: PPUSH
64455: LD_INT 50
64457: PUSH
64458: EMPTY
64459: LIST
64460: PUSH
64461: LD_INT 3
64463: PUSH
64464: LD_INT 92
64466: PUSH
64467: LD_VAR 0 2
64471: PUSH
64472: LD_INT 1
64474: ARRAY
64475: PUSH
64476: LD_VAR 0 2
64480: PUSH
64481: LD_INT 2
64483: ARRAY
64484: PUSH
64485: LD_INT 8
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PPUSH
64502: CALL_OW 72
64506: ST_TO_ADDR
// if not vehicles then
64507: LD_VAR 0 1
64511: NOT
64512: IFFALSE 64516
// exit ;
64514: GO 64543
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
64516: LD_VAR 0 1
64520: PPUSH
64521: LD_VAR 0 2
64525: PUSH
64526: LD_INT 1
64528: ARRAY
64529: PPUSH
64530: LD_VAR 0 2
64534: PUSH
64535: LD_INT 2
64537: ARRAY
64538: PPUSH
64539: CALL_OW 111
// end ;
64543: LD_VAR 0 3
64547: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
64548: LD_INT 0
64550: PPUSH
64551: PPUSH
64552: PPUSH
// if not side or not area then
64553: LD_VAR 0 1
64557: NOT
64558: IFTRUE 64567
64560: PUSH
64561: LD_VAR 0 2
64565: NOT
64566: OR
64567: IFFALSE 64571
// exit ;
64569: GO 64690
// tmp := AreaToList ( area , 0 ) ;
64571: LD_ADDR_VAR 0 5
64575: PUSH
64576: LD_VAR 0 2
64580: PPUSH
64581: LD_INT 0
64583: PPUSH
64584: CALL_OW 517
64588: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64589: LD_ADDR_VAR 0 4
64593: PUSH
64594: DOUBLE
64595: LD_INT 1
64597: DEC
64598: ST_TO_ADDR
64599: LD_VAR 0 5
64603: PUSH
64604: LD_INT 1
64606: ARRAY
64607: PUSH
64608: FOR_TO
64609: IFFALSE 64688
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
64611: LD_VAR 0 5
64615: PUSH
64616: LD_INT 1
64618: ARRAY
64619: PUSH
64620: LD_VAR 0 4
64624: ARRAY
64625: PPUSH
64626: LD_VAR 0 5
64630: PUSH
64631: LD_INT 2
64633: ARRAY
64634: PUSH
64635: LD_VAR 0 4
64639: ARRAY
64640: PPUSH
64641: CALL_OW 351
64645: IFFALSE 64686
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
64647: LD_VAR 0 5
64651: PUSH
64652: LD_INT 1
64654: ARRAY
64655: PUSH
64656: LD_VAR 0 4
64660: ARRAY
64661: PPUSH
64662: LD_VAR 0 5
64666: PUSH
64667: LD_INT 2
64669: ARRAY
64670: PUSH
64671: LD_VAR 0 4
64675: ARRAY
64676: PPUSH
64677: LD_VAR 0 1
64681: PPUSH
64682: CALL_OW 244
// end ;
64686: GO 64608
64688: POP
64689: POP
// end ;
64690: LD_VAR 0 3
64694: RET
// export function UniqueArray ( array ) ; var i ; begin
64695: LD_INT 0
64697: PPUSH
64698: PPUSH
// result := [ ] ;
64699: LD_ADDR_VAR 0 2
64703: PUSH
64704: EMPTY
64705: ST_TO_ADDR
// if not array then
64706: LD_VAR 0 1
64710: NOT
64711: IFFALSE 64715
// exit ;
64713: GO 64776
// for i := 1 to array do
64715: LD_ADDR_VAR 0 3
64719: PUSH
64720: DOUBLE
64721: LD_INT 1
64723: DEC
64724: ST_TO_ADDR
64725: LD_VAR 0 1
64729: PUSH
64730: FOR_TO
64731: IFFALSE 64774
// if not array [ i ] in result then
64733: LD_VAR 0 1
64737: PUSH
64738: LD_VAR 0 3
64742: ARRAY
64743: PUSH
64744: LD_VAR 0 2
64748: IN
64749: NOT
64750: IFFALSE 64772
// result := Join ( result , i ) ;
64752: LD_ADDR_VAR 0 2
64756: PUSH
64757: LD_VAR 0 2
64761: PPUSH
64762: LD_VAR 0 3
64766: PPUSH
64767: CALL 59427 0 2
64771: ST_TO_ADDR
64772: GO 64730
64774: POP
64775: POP
// end ; end_of_file end_of_file
64776: LD_VAR 0 2
64780: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64781: LD_VAR 0 1
64785: PPUSH
64786: LD_VAR 0 2
64790: PPUSH
64791: LD_VAR 0 3
64795: PPUSH
64796: LD_VAR 0 4
64800: PPUSH
64801: LD_VAR 0 5
64805: PPUSH
64806: LD_VAR 0 6
64810: PPUSH
64811: CALL 65053 0 6
// end ;
64815: PPOPN 6
64817: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64818: LD_INT 0
64820: PPUSH
// begin if not units then
64821: LD_VAR 0 1
64825: NOT
64826: IFFALSE 64830
// exit ;
64828: GO 64864
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
64830: LD_VAR 0 1
64834: PPUSH
64835: LD_VAR 0 2
64839: PPUSH
64840: LD_VAR 0 3
64844: PPUSH
64845: LD_VAR 0 4
64849: PPUSH
64850: LD_VAR 0 5
64854: PPUSH
64855: LD_VAR 0 6
64859: PPUSH
64860: CALL 87570 0 6
// end ;
64864: PPOPN 7
64866: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64867: CALL 64933 0 0
// end ; end_of_file
64871: PPOPN 1
64873: END
// export globalGameSaveCounter ; every 0 0$1 do
64874: GO 64876
64876: DISABLE
// begin enable ;
64877: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64878: LD_STRING updateTimer(
64880: PUSH
64881: LD_OWVAR 1
64885: STR
64886: PUSH
64887: LD_STRING );
64889: STR
64890: PPUSH
64891: CALL_OW 559
// end ;
64895: END
// every 0 0$1 do
64896: GO 64898
64898: DISABLE
// begin globalGameSaveCounter := 0 ;
64899: LD_ADDR_EXP 46
64903: PUSH
64904: LD_INT 0
64906: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64907: LD_STRING setGameSaveCounter(0)
64909: PPUSH
64910: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64914: LD_STRING initStreamRollete();
64916: PPUSH
64917: CALL_OW 559
// InitStreamMode ;
64921: CALL 66273 0 0
// DefineStreamItems ( false ) ;
64925: LD_INT 0
64927: PPUSH
64928: CALL 66737 0 1
// end ;
64932: END
// export function SOS_MapStart ( ) ; begin
64933: LD_INT 0
64935: PPUSH
// if streamModeActive then
64936: LD_EXP 47
64940: IFFALSE 64949
// DefineStreamItems ( true ) ;
64942: LD_INT 1
64944: PPUSH
64945: CALL 66737 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
64949: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
64951: PPUSH
64952: CALL_OW 559
// UpdateLuaVariables ( ) ;
64956: CALL 64973 0 0
// UpdateFactoryWaypoints ( ) ;
64960: CALL 79859 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64964: CALL 80111 0 0
// end ;
64968: LD_VAR 0 1
64972: RET
// function UpdateLuaVariables ( ) ; begin
64973: LD_INT 0
64975: PPUSH
// if globalGameSaveCounter then
64976: LD_EXP 46
64980: IFFALSE 65014
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64982: LD_ADDR_EXP 46
64986: PUSH
64987: LD_EXP 46
64991: PPUSH
64992: CALL 60800 0 1
64996: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64997: LD_STRING setGameSaveCounter(
64999: PUSH
65000: LD_EXP 46
65004: STR
65005: PUSH
65006: LD_STRING )
65008: STR
65009: PPUSH
65010: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65014: LD_STRING setGameDifficulty(
65016: PUSH
65017: LD_OWVAR 67
65021: STR
65022: PUSH
65023: LD_STRING )
65025: STR
65026: PPUSH
65027: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65031: LD_STRING displayDifficulty(
65033: PUSH
65034: LD_OWVAR 67
65038: STR
65039: PUSH
65040: LD_STRING )
65042: STR
65043: PPUSH
65044: CALL_OW 559
// end ;
65048: LD_VAR 0 1
65052: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65053: LD_INT 0
65055: PPUSH
// if p2 = stream_mode then
65056: LD_VAR 0 2
65060: PUSH
65061: LD_INT 100
65063: EQUAL
65064: IFFALSE 66067
// begin if not StreamModeActive then
65066: LD_EXP 47
65070: NOT
65071: IFFALSE 65081
// StreamModeActive := true ;
65073: LD_ADDR_EXP 47
65077: PUSH
65078: LD_INT 1
65080: ST_TO_ADDR
// if p3 = 0 then
65081: LD_VAR 0 3
65085: PUSH
65086: LD_INT 0
65088: EQUAL
65089: IFFALSE 65095
// InitStreamMode ;
65091: CALL 66273 0 0
// if p3 = 1 then
65095: LD_VAR 0 3
65099: PUSH
65100: LD_INT 1
65102: EQUAL
65103: IFFALSE 65113
// sRocket := true ;
65105: LD_ADDR_EXP 52
65109: PUSH
65110: LD_INT 1
65112: ST_TO_ADDR
// if p3 = 2 then
65113: LD_VAR 0 3
65117: PUSH
65118: LD_INT 2
65120: EQUAL
65121: IFFALSE 65131
// sSpeed := true ;
65123: LD_ADDR_EXP 51
65127: PUSH
65128: LD_INT 1
65130: ST_TO_ADDR
// if p3 = 3 then
65131: LD_VAR 0 3
65135: PUSH
65136: LD_INT 3
65138: EQUAL
65139: IFFALSE 65149
// sEngine := true ;
65141: LD_ADDR_EXP 53
65145: PUSH
65146: LD_INT 1
65148: ST_TO_ADDR
// if p3 = 4 then
65149: LD_VAR 0 3
65153: PUSH
65154: LD_INT 4
65156: EQUAL
65157: IFFALSE 65167
// sSpec := true ;
65159: LD_ADDR_EXP 50
65163: PUSH
65164: LD_INT 1
65166: ST_TO_ADDR
// if p3 = 5 then
65167: LD_VAR 0 3
65171: PUSH
65172: LD_INT 5
65174: EQUAL
65175: IFFALSE 65185
// sLevel := true ;
65177: LD_ADDR_EXP 54
65181: PUSH
65182: LD_INT 1
65184: ST_TO_ADDR
// if p3 = 6 then
65185: LD_VAR 0 3
65189: PUSH
65190: LD_INT 6
65192: EQUAL
65193: IFFALSE 65203
// sArmoury := true ;
65195: LD_ADDR_EXP 55
65199: PUSH
65200: LD_INT 1
65202: ST_TO_ADDR
// if p3 = 7 then
65203: LD_VAR 0 3
65207: PUSH
65208: LD_INT 7
65210: EQUAL
65211: IFFALSE 65221
// sRadar := true ;
65213: LD_ADDR_EXP 56
65217: PUSH
65218: LD_INT 1
65220: ST_TO_ADDR
// if p3 = 8 then
65221: LD_VAR 0 3
65225: PUSH
65226: LD_INT 8
65228: EQUAL
65229: IFFALSE 65239
// sBunker := true ;
65231: LD_ADDR_EXP 57
65235: PUSH
65236: LD_INT 1
65238: ST_TO_ADDR
// if p3 = 9 then
65239: LD_VAR 0 3
65243: PUSH
65244: LD_INT 9
65246: EQUAL
65247: IFFALSE 65257
// sHack := true ;
65249: LD_ADDR_EXP 58
65253: PUSH
65254: LD_INT 1
65256: ST_TO_ADDR
// if p3 = 10 then
65257: LD_VAR 0 3
65261: PUSH
65262: LD_INT 10
65264: EQUAL
65265: IFFALSE 65275
// sFire := true ;
65267: LD_ADDR_EXP 59
65271: PUSH
65272: LD_INT 1
65274: ST_TO_ADDR
// if p3 = 11 then
65275: LD_VAR 0 3
65279: PUSH
65280: LD_INT 11
65282: EQUAL
65283: IFFALSE 65293
// sRefresh := true ;
65285: LD_ADDR_EXP 60
65289: PUSH
65290: LD_INT 1
65292: ST_TO_ADDR
// if p3 = 12 then
65293: LD_VAR 0 3
65297: PUSH
65298: LD_INT 12
65300: EQUAL
65301: IFFALSE 65311
// sExp := true ;
65303: LD_ADDR_EXP 61
65307: PUSH
65308: LD_INT 1
65310: ST_TO_ADDR
// if p3 = 13 then
65311: LD_VAR 0 3
65315: PUSH
65316: LD_INT 13
65318: EQUAL
65319: IFFALSE 65329
// sDepot := true ;
65321: LD_ADDR_EXP 62
65325: PUSH
65326: LD_INT 1
65328: ST_TO_ADDR
// if p3 = 14 then
65329: LD_VAR 0 3
65333: PUSH
65334: LD_INT 14
65336: EQUAL
65337: IFFALSE 65347
// sFlag := true ;
65339: LD_ADDR_EXP 63
65343: PUSH
65344: LD_INT 1
65346: ST_TO_ADDR
// if p3 = 15 then
65347: LD_VAR 0 3
65351: PUSH
65352: LD_INT 15
65354: EQUAL
65355: IFFALSE 65365
// sKamikadze := true ;
65357: LD_ADDR_EXP 71
65361: PUSH
65362: LD_INT 1
65364: ST_TO_ADDR
// if p3 = 16 then
65365: LD_VAR 0 3
65369: PUSH
65370: LD_INT 16
65372: EQUAL
65373: IFFALSE 65383
// sTroll := true ;
65375: LD_ADDR_EXP 72
65379: PUSH
65380: LD_INT 1
65382: ST_TO_ADDR
// if p3 = 17 then
65383: LD_VAR 0 3
65387: PUSH
65388: LD_INT 17
65390: EQUAL
65391: IFFALSE 65401
// sSlow := true ;
65393: LD_ADDR_EXP 73
65397: PUSH
65398: LD_INT 1
65400: ST_TO_ADDR
// if p3 = 18 then
65401: LD_VAR 0 3
65405: PUSH
65406: LD_INT 18
65408: EQUAL
65409: IFFALSE 65419
// sLack := true ;
65411: LD_ADDR_EXP 74
65415: PUSH
65416: LD_INT 1
65418: ST_TO_ADDR
// if p3 = 19 then
65419: LD_VAR 0 3
65423: PUSH
65424: LD_INT 19
65426: EQUAL
65427: IFFALSE 65437
// sTank := true ;
65429: LD_ADDR_EXP 76
65433: PUSH
65434: LD_INT 1
65436: ST_TO_ADDR
// if p3 = 20 then
65437: LD_VAR 0 3
65441: PUSH
65442: LD_INT 20
65444: EQUAL
65445: IFFALSE 65455
// sRemote := true ;
65447: LD_ADDR_EXP 77
65451: PUSH
65452: LD_INT 1
65454: ST_TO_ADDR
// if p3 = 21 then
65455: LD_VAR 0 3
65459: PUSH
65460: LD_INT 21
65462: EQUAL
65463: IFFALSE 65473
// sPowell := true ;
65465: LD_ADDR_EXP 78
65469: PUSH
65470: LD_INT 1
65472: ST_TO_ADDR
// if p3 = 22 then
65473: LD_VAR 0 3
65477: PUSH
65478: LD_INT 22
65480: EQUAL
65481: IFFALSE 65491
// sTeleport := true ;
65483: LD_ADDR_EXP 81
65487: PUSH
65488: LD_INT 1
65490: ST_TO_ADDR
// if p3 = 23 then
65491: LD_VAR 0 3
65495: PUSH
65496: LD_INT 23
65498: EQUAL
65499: IFFALSE 65509
// sOilTower := true ;
65501: LD_ADDR_EXP 83
65505: PUSH
65506: LD_INT 1
65508: ST_TO_ADDR
// if p3 = 24 then
65509: LD_VAR 0 3
65513: PUSH
65514: LD_INT 24
65516: EQUAL
65517: IFFALSE 65527
// sShovel := true ;
65519: LD_ADDR_EXP 84
65523: PUSH
65524: LD_INT 1
65526: ST_TO_ADDR
// if p3 = 25 then
65527: LD_VAR 0 3
65531: PUSH
65532: LD_INT 25
65534: EQUAL
65535: IFFALSE 65545
// sSheik := true ;
65537: LD_ADDR_EXP 85
65541: PUSH
65542: LD_INT 1
65544: ST_TO_ADDR
// if p3 = 26 then
65545: LD_VAR 0 3
65549: PUSH
65550: LD_INT 26
65552: EQUAL
65553: IFFALSE 65563
// sEarthquake := true ;
65555: LD_ADDR_EXP 87
65559: PUSH
65560: LD_INT 1
65562: ST_TO_ADDR
// if p3 = 27 then
65563: LD_VAR 0 3
65567: PUSH
65568: LD_INT 27
65570: EQUAL
65571: IFFALSE 65581
// sAI := true ;
65573: LD_ADDR_EXP 88
65577: PUSH
65578: LD_INT 1
65580: ST_TO_ADDR
// if p3 = 28 then
65581: LD_VAR 0 3
65585: PUSH
65586: LD_INT 28
65588: EQUAL
65589: IFFALSE 65599
// sCargo := true ;
65591: LD_ADDR_EXP 91
65595: PUSH
65596: LD_INT 1
65598: ST_TO_ADDR
// if p3 = 29 then
65599: LD_VAR 0 3
65603: PUSH
65604: LD_INT 29
65606: EQUAL
65607: IFFALSE 65617
// sDLaser := true ;
65609: LD_ADDR_EXP 92
65613: PUSH
65614: LD_INT 1
65616: ST_TO_ADDR
// if p3 = 30 then
65617: LD_VAR 0 3
65621: PUSH
65622: LD_INT 30
65624: EQUAL
65625: IFFALSE 65635
// sExchange := true ;
65627: LD_ADDR_EXP 93
65631: PUSH
65632: LD_INT 1
65634: ST_TO_ADDR
// if p3 = 31 then
65635: LD_VAR 0 3
65639: PUSH
65640: LD_INT 31
65642: EQUAL
65643: IFFALSE 65653
// sFac := true ;
65645: LD_ADDR_EXP 94
65649: PUSH
65650: LD_INT 1
65652: ST_TO_ADDR
// if p3 = 32 then
65653: LD_VAR 0 3
65657: PUSH
65658: LD_INT 32
65660: EQUAL
65661: IFFALSE 65671
// sPower := true ;
65663: LD_ADDR_EXP 95
65667: PUSH
65668: LD_INT 1
65670: ST_TO_ADDR
// if p3 = 33 then
65671: LD_VAR 0 3
65675: PUSH
65676: LD_INT 33
65678: EQUAL
65679: IFFALSE 65689
// sRandom := true ;
65681: LD_ADDR_EXP 96
65685: PUSH
65686: LD_INT 1
65688: ST_TO_ADDR
// if p3 = 34 then
65689: LD_VAR 0 3
65693: PUSH
65694: LD_INT 34
65696: EQUAL
65697: IFFALSE 65707
// sShield := true ;
65699: LD_ADDR_EXP 97
65703: PUSH
65704: LD_INT 1
65706: ST_TO_ADDR
// if p3 = 35 then
65707: LD_VAR 0 3
65711: PUSH
65712: LD_INT 35
65714: EQUAL
65715: IFFALSE 65725
// sTime := true ;
65717: LD_ADDR_EXP 98
65721: PUSH
65722: LD_INT 1
65724: ST_TO_ADDR
// if p3 = 36 then
65725: LD_VAR 0 3
65729: PUSH
65730: LD_INT 36
65732: EQUAL
65733: IFFALSE 65743
// sTools := true ;
65735: LD_ADDR_EXP 99
65739: PUSH
65740: LD_INT 1
65742: ST_TO_ADDR
// if p3 = 101 then
65743: LD_VAR 0 3
65747: PUSH
65748: LD_INT 101
65750: EQUAL
65751: IFFALSE 65761
// sSold := true ;
65753: LD_ADDR_EXP 64
65757: PUSH
65758: LD_INT 1
65760: ST_TO_ADDR
// if p3 = 102 then
65761: LD_VAR 0 3
65765: PUSH
65766: LD_INT 102
65768: EQUAL
65769: IFFALSE 65779
// sDiff := true ;
65771: LD_ADDR_EXP 65
65775: PUSH
65776: LD_INT 1
65778: ST_TO_ADDR
// if p3 = 103 then
65779: LD_VAR 0 3
65783: PUSH
65784: LD_INT 103
65786: EQUAL
65787: IFFALSE 65797
// sFog := true ;
65789: LD_ADDR_EXP 68
65793: PUSH
65794: LD_INT 1
65796: ST_TO_ADDR
// if p3 = 104 then
65797: LD_VAR 0 3
65801: PUSH
65802: LD_INT 104
65804: EQUAL
65805: IFFALSE 65815
// sReset := true ;
65807: LD_ADDR_EXP 69
65811: PUSH
65812: LD_INT 1
65814: ST_TO_ADDR
// if p3 = 105 then
65815: LD_VAR 0 3
65819: PUSH
65820: LD_INT 105
65822: EQUAL
65823: IFFALSE 65833
// sSun := true ;
65825: LD_ADDR_EXP 70
65829: PUSH
65830: LD_INT 1
65832: ST_TO_ADDR
// if p3 = 106 then
65833: LD_VAR 0 3
65837: PUSH
65838: LD_INT 106
65840: EQUAL
65841: IFFALSE 65851
// sTiger := true ;
65843: LD_ADDR_EXP 66
65847: PUSH
65848: LD_INT 1
65850: ST_TO_ADDR
// if p3 = 107 then
65851: LD_VAR 0 3
65855: PUSH
65856: LD_INT 107
65858: EQUAL
65859: IFFALSE 65869
// sBomb := true ;
65861: LD_ADDR_EXP 67
65865: PUSH
65866: LD_INT 1
65868: ST_TO_ADDR
// if p3 = 108 then
65869: LD_VAR 0 3
65873: PUSH
65874: LD_INT 108
65876: EQUAL
65877: IFFALSE 65887
// sWound := true ;
65879: LD_ADDR_EXP 75
65883: PUSH
65884: LD_INT 1
65886: ST_TO_ADDR
// if p3 = 109 then
65887: LD_VAR 0 3
65891: PUSH
65892: LD_INT 109
65894: EQUAL
65895: IFFALSE 65905
// sBetray := true ;
65897: LD_ADDR_EXP 79
65901: PUSH
65902: LD_INT 1
65904: ST_TO_ADDR
// if p3 = 110 then
65905: LD_VAR 0 3
65909: PUSH
65910: LD_INT 110
65912: EQUAL
65913: IFFALSE 65923
// sContamin := true ;
65915: LD_ADDR_EXP 80
65919: PUSH
65920: LD_INT 1
65922: ST_TO_ADDR
// if p3 = 111 then
65923: LD_VAR 0 3
65927: PUSH
65928: LD_INT 111
65930: EQUAL
65931: IFFALSE 65941
// sOil := true ;
65933: LD_ADDR_EXP 82
65937: PUSH
65938: LD_INT 1
65940: ST_TO_ADDR
// if p3 = 112 then
65941: LD_VAR 0 3
65945: PUSH
65946: LD_INT 112
65948: EQUAL
65949: IFFALSE 65959
// sStu := true ;
65951: LD_ADDR_EXP 86
65955: PUSH
65956: LD_INT 1
65958: ST_TO_ADDR
// if p3 = 113 then
65959: LD_VAR 0 3
65963: PUSH
65964: LD_INT 113
65966: EQUAL
65967: IFFALSE 65977
// sBazooka := true ;
65969: LD_ADDR_EXP 89
65973: PUSH
65974: LD_INT 1
65976: ST_TO_ADDR
// if p3 = 114 then
65977: LD_VAR 0 3
65981: PUSH
65982: LD_INT 114
65984: EQUAL
65985: IFFALSE 65995
// sMortar := true ;
65987: LD_ADDR_EXP 90
65991: PUSH
65992: LD_INT 1
65994: ST_TO_ADDR
// if p3 = 115 then
65995: LD_VAR 0 3
65999: PUSH
66000: LD_INT 115
66002: EQUAL
66003: IFFALSE 66013
// sRanger := true ;
66005: LD_ADDR_EXP 100
66009: PUSH
66010: LD_INT 1
66012: ST_TO_ADDR
// if p3 = 116 then
66013: LD_VAR 0 3
66017: PUSH
66018: LD_INT 116
66020: EQUAL
66021: IFFALSE 66031
// sComputer := true ;
66023: LD_ADDR_EXP 101
66027: PUSH
66028: LD_INT 1
66030: ST_TO_ADDR
// if p3 = 117 then
66031: LD_VAR 0 3
66035: PUSH
66036: LD_INT 117
66038: EQUAL
66039: IFFALSE 66049
// s30 := true ;
66041: LD_ADDR_EXP 102
66045: PUSH
66046: LD_INT 1
66048: ST_TO_ADDR
// if p3 = 118 then
66049: LD_VAR 0 3
66053: PUSH
66054: LD_INT 118
66056: EQUAL
66057: IFFALSE 66067
// s60 := true ;
66059: LD_ADDR_EXP 103
66063: PUSH
66064: LD_INT 1
66066: ST_TO_ADDR
// end ; if p2 = hack_mode then
66067: LD_VAR 0 2
66071: PUSH
66072: LD_INT 101
66074: EQUAL
66075: IFFALSE 66203
// begin case p3 of 1 :
66077: LD_VAR 0 3
66081: PUSH
66082: LD_INT 1
66084: DOUBLE
66085: EQUAL
66086: IFTRUE 66090
66088: GO 66097
66090: POP
// hHackUnlimitedResources ; 2 :
66091: CALL 78466 0 0
66095: GO 66203
66097: LD_INT 2
66099: DOUBLE
66100: EQUAL
66101: IFTRUE 66105
66103: GO 66112
66105: POP
// hHackSetLevel10 ; 3 :
66106: CALL 78599 0 0
66110: GO 66203
66112: LD_INT 3
66114: DOUBLE
66115: EQUAL
66116: IFTRUE 66120
66118: GO 66127
66120: POP
// hHackSetLevel10YourUnits ; 4 :
66121: CALL 78684 0 0
66125: GO 66203
66127: LD_INT 4
66129: DOUBLE
66130: EQUAL
66131: IFTRUE 66135
66133: GO 66142
66135: POP
// hHackInvincible ; 5 :
66136: CALL 79132 0 0
66140: GO 66203
66142: LD_INT 5
66144: DOUBLE
66145: EQUAL
66146: IFTRUE 66150
66148: GO 66157
66150: POP
// hHackInvisible ; 6 :
66151: CALL 79243 0 0
66155: GO 66203
66157: LD_INT 6
66159: DOUBLE
66160: EQUAL
66161: IFTRUE 66165
66163: GO 66172
66165: POP
// hHackChangeYourSide ; 7 :
66166: CALL 79300 0 0
66170: GO 66203
66172: LD_INT 7
66174: DOUBLE
66175: EQUAL
66176: IFTRUE 66180
66178: GO 66187
66180: POP
// hHackChangeUnitSide ; 8 :
66181: CALL 79342 0 0
66185: GO 66203
66187: LD_INT 8
66189: DOUBLE
66190: EQUAL
66191: IFTRUE 66195
66193: GO 66202
66195: POP
// hHackFog ; end ;
66196: CALL 79443 0 0
66200: GO 66203
66202: POP
// end ; if p2 = game_save_mode then
66203: LD_VAR 0 2
66207: PUSH
66208: LD_INT 102
66210: EQUAL
66211: IFFALSE 66268
// begin if p3 = 1 then
66213: LD_VAR 0 3
66217: PUSH
66218: LD_INT 1
66220: EQUAL
66221: IFFALSE 66233
// globalGameSaveCounter := p4 ;
66223: LD_ADDR_EXP 46
66227: PUSH
66228: LD_VAR 0 4
66232: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
66233: LD_VAR 0 3
66237: PUSH
66238: LD_INT 2
66240: EQUAL
66241: IFFALSE 66249
66243: PUSH
66244: LD_EXP 46
66248: AND
66249: IFFALSE 66268
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
66251: LD_STRING setGameSaveCounter(
66253: PUSH
66254: LD_EXP 46
66258: STR
66259: PUSH
66260: LD_STRING )
66262: STR
66263: PPUSH
66264: CALL_OW 559
// end ; end ;
66268: LD_VAR 0 7
66272: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
66273: LD_INT 0
66275: PPUSH
// streamModeActive := false ;
66276: LD_ADDR_EXP 47
66280: PUSH
66281: LD_INT 0
66283: ST_TO_ADDR
// normalCounter := 36 ;
66284: LD_ADDR_EXP 48
66288: PUSH
66289: LD_INT 36
66291: ST_TO_ADDR
// hardcoreCounter := 18 ;
66292: LD_ADDR_EXP 49
66296: PUSH
66297: LD_INT 18
66299: ST_TO_ADDR
// sRocket := false ;
66300: LD_ADDR_EXP 52
66304: PUSH
66305: LD_INT 0
66307: ST_TO_ADDR
// sSpeed := false ;
66308: LD_ADDR_EXP 51
66312: PUSH
66313: LD_INT 0
66315: ST_TO_ADDR
// sEngine := false ;
66316: LD_ADDR_EXP 53
66320: PUSH
66321: LD_INT 0
66323: ST_TO_ADDR
// sSpec := false ;
66324: LD_ADDR_EXP 50
66328: PUSH
66329: LD_INT 0
66331: ST_TO_ADDR
// sLevel := false ;
66332: LD_ADDR_EXP 54
66336: PUSH
66337: LD_INT 0
66339: ST_TO_ADDR
// sArmoury := false ;
66340: LD_ADDR_EXP 55
66344: PUSH
66345: LD_INT 0
66347: ST_TO_ADDR
// sRadar := false ;
66348: LD_ADDR_EXP 56
66352: PUSH
66353: LD_INT 0
66355: ST_TO_ADDR
// sBunker := false ;
66356: LD_ADDR_EXP 57
66360: PUSH
66361: LD_INT 0
66363: ST_TO_ADDR
// sHack := false ;
66364: LD_ADDR_EXP 58
66368: PUSH
66369: LD_INT 0
66371: ST_TO_ADDR
// sFire := false ;
66372: LD_ADDR_EXP 59
66376: PUSH
66377: LD_INT 0
66379: ST_TO_ADDR
// sRefresh := false ;
66380: LD_ADDR_EXP 60
66384: PUSH
66385: LD_INT 0
66387: ST_TO_ADDR
// sExp := false ;
66388: LD_ADDR_EXP 61
66392: PUSH
66393: LD_INT 0
66395: ST_TO_ADDR
// sDepot := false ;
66396: LD_ADDR_EXP 62
66400: PUSH
66401: LD_INT 0
66403: ST_TO_ADDR
// sFlag := false ;
66404: LD_ADDR_EXP 63
66408: PUSH
66409: LD_INT 0
66411: ST_TO_ADDR
// sKamikadze := false ;
66412: LD_ADDR_EXP 71
66416: PUSH
66417: LD_INT 0
66419: ST_TO_ADDR
// sTroll := false ;
66420: LD_ADDR_EXP 72
66424: PUSH
66425: LD_INT 0
66427: ST_TO_ADDR
// sSlow := false ;
66428: LD_ADDR_EXP 73
66432: PUSH
66433: LD_INT 0
66435: ST_TO_ADDR
// sLack := false ;
66436: LD_ADDR_EXP 74
66440: PUSH
66441: LD_INT 0
66443: ST_TO_ADDR
// sTank := false ;
66444: LD_ADDR_EXP 76
66448: PUSH
66449: LD_INT 0
66451: ST_TO_ADDR
// sRemote := false ;
66452: LD_ADDR_EXP 77
66456: PUSH
66457: LD_INT 0
66459: ST_TO_ADDR
// sPowell := false ;
66460: LD_ADDR_EXP 78
66464: PUSH
66465: LD_INT 0
66467: ST_TO_ADDR
// sTeleport := false ;
66468: LD_ADDR_EXP 81
66472: PUSH
66473: LD_INT 0
66475: ST_TO_ADDR
// sOilTower := false ;
66476: LD_ADDR_EXP 83
66480: PUSH
66481: LD_INT 0
66483: ST_TO_ADDR
// sShovel := false ;
66484: LD_ADDR_EXP 84
66488: PUSH
66489: LD_INT 0
66491: ST_TO_ADDR
// sSheik := false ;
66492: LD_ADDR_EXP 85
66496: PUSH
66497: LD_INT 0
66499: ST_TO_ADDR
// sEarthquake := false ;
66500: LD_ADDR_EXP 87
66504: PUSH
66505: LD_INT 0
66507: ST_TO_ADDR
// sAI := false ;
66508: LD_ADDR_EXP 88
66512: PUSH
66513: LD_INT 0
66515: ST_TO_ADDR
// sCargo := false ;
66516: LD_ADDR_EXP 91
66520: PUSH
66521: LD_INT 0
66523: ST_TO_ADDR
// sDLaser := false ;
66524: LD_ADDR_EXP 92
66528: PUSH
66529: LD_INT 0
66531: ST_TO_ADDR
// sExchange := false ;
66532: LD_ADDR_EXP 93
66536: PUSH
66537: LD_INT 0
66539: ST_TO_ADDR
// sFac := false ;
66540: LD_ADDR_EXP 94
66544: PUSH
66545: LD_INT 0
66547: ST_TO_ADDR
// sPower := false ;
66548: LD_ADDR_EXP 95
66552: PUSH
66553: LD_INT 0
66555: ST_TO_ADDR
// sRandom := false ;
66556: LD_ADDR_EXP 96
66560: PUSH
66561: LD_INT 0
66563: ST_TO_ADDR
// sShield := false ;
66564: LD_ADDR_EXP 97
66568: PUSH
66569: LD_INT 0
66571: ST_TO_ADDR
// sTime := false ;
66572: LD_ADDR_EXP 98
66576: PUSH
66577: LD_INT 0
66579: ST_TO_ADDR
// sTools := false ;
66580: LD_ADDR_EXP 99
66584: PUSH
66585: LD_INT 0
66587: ST_TO_ADDR
// sSold := false ;
66588: LD_ADDR_EXP 64
66592: PUSH
66593: LD_INT 0
66595: ST_TO_ADDR
// sDiff := false ;
66596: LD_ADDR_EXP 65
66600: PUSH
66601: LD_INT 0
66603: ST_TO_ADDR
// sFog := false ;
66604: LD_ADDR_EXP 68
66608: PUSH
66609: LD_INT 0
66611: ST_TO_ADDR
// sReset := false ;
66612: LD_ADDR_EXP 69
66616: PUSH
66617: LD_INT 0
66619: ST_TO_ADDR
// sSun := false ;
66620: LD_ADDR_EXP 70
66624: PUSH
66625: LD_INT 0
66627: ST_TO_ADDR
// sTiger := false ;
66628: LD_ADDR_EXP 66
66632: PUSH
66633: LD_INT 0
66635: ST_TO_ADDR
// sBomb := false ;
66636: LD_ADDR_EXP 67
66640: PUSH
66641: LD_INT 0
66643: ST_TO_ADDR
// sWound := false ;
66644: LD_ADDR_EXP 75
66648: PUSH
66649: LD_INT 0
66651: ST_TO_ADDR
// sBetray := false ;
66652: LD_ADDR_EXP 79
66656: PUSH
66657: LD_INT 0
66659: ST_TO_ADDR
// sContamin := false ;
66660: LD_ADDR_EXP 80
66664: PUSH
66665: LD_INT 0
66667: ST_TO_ADDR
// sOil := false ;
66668: LD_ADDR_EXP 82
66672: PUSH
66673: LD_INT 0
66675: ST_TO_ADDR
// sStu := false ;
66676: LD_ADDR_EXP 86
66680: PUSH
66681: LD_INT 0
66683: ST_TO_ADDR
// sBazooka := false ;
66684: LD_ADDR_EXP 89
66688: PUSH
66689: LD_INT 0
66691: ST_TO_ADDR
// sMortar := false ;
66692: LD_ADDR_EXP 90
66696: PUSH
66697: LD_INT 0
66699: ST_TO_ADDR
// sRanger := false ;
66700: LD_ADDR_EXP 100
66704: PUSH
66705: LD_INT 0
66707: ST_TO_ADDR
// sComputer := false ;
66708: LD_ADDR_EXP 101
66712: PUSH
66713: LD_INT 0
66715: ST_TO_ADDR
// s30 := false ;
66716: LD_ADDR_EXP 102
66720: PUSH
66721: LD_INT 0
66723: ST_TO_ADDR
// s60 := false ;
66724: LD_ADDR_EXP 103
66728: PUSH
66729: LD_INT 0
66731: ST_TO_ADDR
// end ;
66732: LD_VAR 0 1
66736: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66737: LD_INT 0
66739: PPUSH
66740: PPUSH
66741: PPUSH
66742: PPUSH
66743: PPUSH
66744: PPUSH
66745: PPUSH
// result := [ ] ;
66746: LD_ADDR_VAR 0 2
66750: PUSH
66751: EMPTY
66752: ST_TO_ADDR
// if campaign_id = 1 then
66753: LD_OWVAR 69
66757: PUSH
66758: LD_INT 1
66760: EQUAL
66761: IFFALSE 69927
// begin case mission_number of 1 :
66763: LD_OWVAR 70
66767: PUSH
66768: LD_INT 1
66770: DOUBLE
66771: EQUAL
66772: IFTRUE 66776
66774: GO 66852
66776: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66777: LD_ADDR_VAR 0 2
66781: PUSH
66782: LD_INT 2
66784: PUSH
66785: LD_INT 4
66787: PUSH
66788: LD_INT 11
66790: PUSH
66791: LD_INT 12
66793: PUSH
66794: LD_INT 15
66796: PUSH
66797: LD_INT 16
66799: PUSH
66800: LD_INT 22
66802: PUSH
66803: LD_INT 23
66805: PUSH
66806: LD_INT 26
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 101
66822: PUSH
66823: LD_INT 102
66825: PUSH
66826: LD_INT 106
66828: PUSH
66829: LD_INT 116
66831: PUSH
66832: LD_INT 117
66834: PUSH
66835: LD_INT 118
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: ST_TO_ADDR
66850: GO 69925
66852: LD_INT 2
66854: DOUBLE
66855: EQUAL
66856: IFTRUE 66860
66858: GO 66944
66860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66861: LD_ADDR_VAR 0 2
66865: PUSH
66866: LD_INT 2
66868: PUSH
66869: LD_INT 4
66871: PUSH
66872: LD_INT 11
66874: PUSH
66875: LD_INT 12
66877: PUSH
66878: LD_INT 15
66880: PUSH
66881: LD_INT 16
66883: PUSH
66884: LD_INT 22
66886: PUSH
66887: LD_INT 23
66889: PUSH
66890: LD_INT 26
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 101
66906: PUSH
66907: LD_INT 102
66909: PUSH
66910: LD_INT 105
66912: PUSH
66913: LD_INT 106
66915: PUSH
66916: LD_INT 108
66918: PUSH
66919: LD_INT 116
66921: PUSH
66922: LD_INT 117
66924: PUSH
66925: LD_INT 118
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: ST_TO_ADDR
66942: GO 69925
66944: LD_INT 3
66946: DOUBLE
66947: EQUAL
66948: IFTRUE 66952
66950: GO 67040
66952: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66953: LD_ADDR_VAR 0 2
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: LD_INT 4
66963: PUSH
66964: LD_INT 5
66966: PUSH
66967: LD_INT 11
66969: PUSH
66970: LD_INT 12
66972: PUSH
66973: LD_INT 15
66975: PUSH
66976: LD_INT 16
66978: PUSH
66979: LD_INT 22
66981: PUSH
66982: LD_INT 26
66984: PUSH
66985: LD_INT 36
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 101
67002: PUSH
67003: LD_INT 102
67005: PUSH
67006: LD_INT 105
67008: PUSH
67009: LD_INT 106
67011: PUSH
67012: LD_INT 108
67014: PUSH
67015: LD_INT 116
67017: PUSH
67018: LD_INT 117
67020: PUSH
67021: LD_INT 118
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: ST_TO_ADDR
67038: GO 69925
67040: LD_INT 4
67042: DOUBLE
67043: EQUAL
67044: IFTRUE 67048
67046: GO 67144
67048: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
67049: LD_ADDR_VAR 0 2
67053: PUSH
67054: LD_INT 2
67056: PUSH
67057: LD_INT 4
67059: PUSH
67060: LD_INT 5
67062: PUSH
67063: LD_INT 8
67065: PUSH
67066: LD_INT 11
67068: PUSH
67069: LD_INT 12
67071: PUSH
67072: LD_INT 15
67074: PUSH
67075: LD_INT 16
67077: PUSH
67078: LD_INT 22
67080: PUSH
67081: LD_INT 23
67083: PUSH
67084: LD_INT 26
67086: PUSH
67087: LD_INT 36
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 101
67106: PUSH
67107: LD_INT 102
67109: PUSH
67110: LD_INT 105
67112: PUSH
67113: LD_INT 106
67115: PUSH
67116: LD_INT 108
67118: PUSH
67119: LD_INT 116
67121: PUSH
67122: LD_INT 117
67124: PUSH
67125: LD_INT 118
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: ST_TO_ADDR
67142: GO 69925
67144: LD_INT 5
67146: DOUBLE
67147: EQUAL
67148: IFTRUE 67152
67150: GO 67264
67152: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
67153: LD_ADDR_VAR 0 2
67157: PUSH
67158: LD_INT 2
67160: PUSH
67161: LD_INT 4
67163: PUSH
67164: LD_INT 5
67166: PUSH
67167: LD_INT 6
67169: PUSH
67170: LD_INT 8
67172: PUSH
67173: LD_INT 11
67175: PUSH
67176: LD_INT 12
67178: PUSH
67179: LD_INT 15
67181: PUSH
67182: LD_INT 16
67184: PUSH
67185: LD_INT 22
67187: PUSH
67188: LD_INT 23
67190: PUSH
67191: LD_INT 25
67193: PUSH
67194: LD_INT 26
67196: PUSH
67197: LD_INT 36
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 101
67218: PUSH
67219: LD_INT 102
67221: PUSH
67222: LD_INT 105
67224: PUSH
67225: LD_INT 106
67227: PUSH
67228: LD_INT 108
67230: PUSH
67231: LD_INT 109
67233: PUSH
67234: LD_INT 112
67236: PUSH
67237: LD_INT 116
67239: PUSH
67240: LD_INT 117
67242: PUSH
67243: LD_INT 118
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: ST_TO_ADDR
67262: GO 69925
67264: LD_INT 6
67266: DOUBLE
67267: EQUAL
67268: IFTRUE 67272
67270: GO 67404
67272: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
67273: LD_ADDR_VAR 0 2
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: LD_INT 4
67283: PUSH
67284: LD_INT 5
67286: PUSH
67287: LD_INT 6
67289: PUSH
67290: LD_INT 8
67292: PUSH
67293: LD_INT 11
67295: PUSH
67296: LD_INT 12
67298: PUSH
67299: LD_INT 15
67301: PUSH
67302: LD_INT 16
67304: PUSH
67305: LD_INT 20
67307: PUSH
67308: LD_INT 21
67310: PUSH
67311: LD_INT 22
67313: PUSH
67314: LD_INT 23
67316: PUSH
67317: LD_INT 25
67319: PUSH
67320: LD_INT 26
67322: PUSH
67323: LD_INT 30
67325: PUSH
67326: LD_INT 31
67328: PUSH
67329: LD_INT 32
67331: PUSH
67332: LD_INT 36
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 101
67358: PUSH
67359: LD_INT 102
67361: PUSH
67362: LD_INT 105
67364: PUSH
67365: LD_INT 106
67367: PUSH
67368: LD_INT 108
67370: PUSH
67371: LD_INT 109
67373: PUSH
67374: LD_INT 112
67376: PUSH
67377: LD_INT 116
67379: PUSH
67380: LD_INT 117
67382: PUSH
67383: LD_INT 118
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: ST_TO_ADDR
67402: GO 69925
67404: LD_INT 7
67406: DOUBLE
67407: EQUAL
67408: IFTRUE 67412
67410: GO 67524
67412: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
67413: LD_ADDR_VAR 0 2
67417: PUSH
67418: LD_INT 2
67420: PUSH
67421: LD_INT 4
67423: PUSH
67424: LD_INT 5
67426: PUSH
67427: LD_INT 7
67429: PUSH
67430: LD_INT 11
67432: PUSH
67433: LD_INT 12
67435: PUSH
67436: LD_INT 15
67438: PUSH
67439: LD_INT 16
67441: PUSH
67442: LD_INT 20
67444: PUSH
67445: LD_INT 21
67447: PUSH
67448: LD_INT 22
67450: PUSH
67451: LD_INT 23
67453: PUSH
67454: LD_INT 25
67456: PUSH
67457: LD_INT 26
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 101
67478: PUSH
67479: LD_INT 102
67481: PUSH
67482: LD_INT 103
67484: PUSH
67485: LD_INT 105
67487: PUSH
67488: LD_INT 106
67490: PUSH
67491: LD_INT 108
67493: PUSH
67494: LD_INT 112
67496: PUSH
67497: LD_INT 116
67499: PUSH
67500: LD_INT 117
67502: PUSH
67503: LD_INT 118
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: ST_TO_ADDR
67522: GO 69925
67524: LD_INT 8
67526: DOUBLE
67527: EQUAL
67528: IFTRUE 67532
67530: GO 67672
67532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
67533: LD_ADDR_VAR 0 2
67537: PUSH
67538: LD_INT 2
67540: PUSH
67541: LD_INT 4
67543: PUSH
67544: LD_INT 5
67546: PUSH
67547: LD_INT 6
67549: PUSH
67550: LD_INT 7
67552: PUSH
67553: LD_INT 8
67555: PUSH
67556: LD_INT 11
67558: PUSH
67559: LD_INT 12
67561: PUSH
67562: LD_INT 15
67564: PUSH
67565: LD_INT 16
67567: PUSH
67568: LD_INT 20
67570: PUSH
67571: LD_INT 21
67573: PUSH
67574: LD_INT 22
67576: PUSH
67577: LD_INT 23
67579: PUSH
67580: LD_INT 25
67582: PUSH
67583: LD_INT 26
67585: PUSH
67586: LD_INT 30
67588: PUSH
67589: LD_INT 31
67591: PUSH
67592: LD_INT 32
67594: PUSH
67595: LD_INT 36
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 101
67622: PUSH
67623: LD_INT 102
67625: PUSH
67626: LD_INT 103
67628: PUSH
67629: LD_INT 105
67631: PUSH
67632: LD_INT 106
67634: PUSH
67635: LD_INT 108
67637: PUSH
67638: LD_INT 109
67640: PUSH
67641: LD_INT 112
67643: PUSH
67644: LD_INT 116
67646: PUSH
67647: LD_INT 117
67649: PUSH
67650: LD_INT 118
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: ST_TO_ADDR
67670: GO 69925
67672: LD_INT 9
67674: DOUBLE
67675: EQUAL
67676: IFTRUE 67680
67678: GO 67828
67680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
67681: LD_ADDR_VAR 0 2
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: LD_INT 4
67691: PUSH
67692: LD_INT 5
67694: PUSH
67695: LD_INT 6
67697: PUSH
67698: LD_INT 7
67700: PUSH
67701: LD_INT 8
67703: PUSH
67704: LD_INT 11
67706: PUSH
67707: LD_INT 12
67709: PUSH
67710: LD_INT 15
67712: PUSH
67713: LD_INT 16
67715: PUSH
67716: LD_INT 20
67718: PUSH
67719: LD_INT 21
67721: PUSH
67722: LD_INT 22
67724: PUSH
67725: LD_INT 23
67727: PUSH
67728: LD_INT 25
67730: PUSH
67731: LD_INT 26
67733: PUSH
67734: LD_INT 28
67736: PUSH
67737: LD_INT 30
67739: PUSH
67740: LD_INT 31
67742: PUSH
67743: LD_INT 32
67745: PUSH
67746: LD_INT 36
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 101
67774: PUSH
67775: LD_INT 102
67777: PUSH
67778: LD_INT 103
67780: PUSH
67781: LD_INT 105
67783: PUSH
67784: LD_INT 106
67786: PUSH
67787: LD_INT 108
67789: PUSH
67790: LD_INT 109
67792: PUSH
67793: LD_INT 112
67795: PUSH
67796: LD_INT 114
67798: PUSH
67799: LD_INT 116
67801: PUSH
67802: LD_INT 117
67804: PUSH
67805: LD_INT 118
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: ST_TO_ADDR
67826: GO 69925
67828: LD_INT 10
67830: DOUBLE
67831: EQUAL
67832: IFTRUE 67836
67834: GO 68032
67836: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67837: LD_ADDR_VAR 0 2
67841: PUSH
67842: LD_INT 2
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: LD_INT 5
67850: PUSH
67851: LD_INT 6
67853: PUSH
67854: LD_INT 7
67856: PUSH
67857: LD_INT 8
67859: PUSH
67860: LD_INT 9
67862: PUSH
67863: LD_INT 10
67865: PUSH
67866: LD_INT 11
67868: PUSH
67869: LD_INT 12
67871: PUSH
67872: LD_INT 13
67874: PUSH
67875: LD_INT 14
67877: PUSH
67878: LD_INT 15
67880: PUSH
67881: LD_INT 16
67883: PUSH
67884: LD_INT 17
67886: PUSH
67887: LD_INT 18
67889: PUSH
67890: LD_INT 19
67892: PUSH
67893: LD_INT 20
67895: PUSH
67896: LD_INT 21
67898: PUSH
67899: LD_INT 22
67901: PUSH
67902: LD_INT 23
67904: PUSH
67905: LD_INT 24
67907: PUSH
67908: LD_INT 25
67910: PUSH
67911: LD_INT 26
67913: PUSH
67914: LD_INT 28
67916: PUSH
67917: LD_INT 30
67919: PUSH
67920: LD_INT 31
67922: PUSH
67923: LD_INT 32
67925: PUSH
67926: LD_INT 36
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: LIST
67933: LIST
67934: LIST
67935: LIST
67936: LIST
67937: LIST
67938: LIST
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: LIST
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 101
67962: PUSH
67963: LD_INT 102
67965: PUSH
67966: LD_INT 103
67968: PUSH
67969: LD_INT 104
67971: PUSH
67972: LD_INT 105
67974: PUSH
67975: LD_INT 106
67977: PUSH
67978: LD_INT 107
67980: PUSH
67981: LD_INT 108
67983: PUSH
67984: LD_INT 109
67986: PUSH
67987: LD_INT 110
67989: PUSH
67990: LD_INT 111
67992: PUSH
67993: LD_INT 112
67995: PUSH
67996: LD_INT 114
67998: PUSH
67999: LD_INT 116
68001: PUSH
68002: LD_INT 117
68004: PUSH
68005: LD_INT 118
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: ST_TO_ADDR
68030: GO 69925
68032: LD_INT 11
68034: DOUBLE
68035: EQUAL
68036: IFTRUE 68040
68038: GO 68244
68040: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
68041: LD_ADDR_VAR 0 2
68045: PUSH
68046: LD_INT 2
68048: PUSH
68049: LD_INT 3
68051: PUSH
68052: LD_INT 4
68054: PUSH
68055: LD_INT 5
68057: PUSH
68058: LD_INT 6
68060: PUSH
68061: LD_INT 7
68063: PUSH
68064: LD_INT 8
68066: PUSH
68067: LD_INT 9
68069: PUSH
68070: LD_INT 10
68072: PUSH
68073: LD_INT 11
68075: PUSH
68076: LD_INT 12
68078: PUSH
68079: LD_INT 13
68081: PUSH
68082: LD_INT 14
68084: PUSH
68085: LD_INT 15
68087: PUSH
68088: LD_INT 16
68090: PUSH
68091: LD_INT 17
68093: PUSH
68094: LD_INT 18
68096: PUSH
68097: LD_INT 19
68099: PUSH
68100: LD_INT 20
68102: PUSH
68103: LD_INT 21
68105: PUSH
68106: LD_INT 22
68108: PUSH
68109: LD_INT 23
68111: PUSH
68112: LD_INT 24
68114: PUSH
68115: LD_INT 25
68117: PUSH
68118: LD_INT 26
68120: PUSH
68121: LD_INT 28
68123: PUSH
68124: LD_INT 30
68126: PUSH
68127: LD_INT 31
68129: PUSH
68130: LD_INT 32
68132: PUSH
68133: LD_INT 34
68135: PUSH
68136: LD_INT 36
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 101
68174: PUSH
68175: LD_INT 102
68177: PUSH
68178: LD_INT 103
68180: PUSH
68181: LD_INT 104
68183: PUSH
68184: LD_INT 105
68186: PUSH
68187: LD_INT 106
68189: PUSH
68190: LD_INT 107
68192: PUSH
68193: LD_INT 108
68195: PUSH
68196: LD_INT 109
68198: PUSH
68199: LD_INT 110
68201: PUSH
68202: LD_INT 111
68204: PUSH
68205: LD_INT 112
68207: PUSH
68208: LD_INT 114
68210: PUSH
68211: LD_INT 116
68213: PUSH
68214: LD_INT 117
68216: PUSH
68217: LD_INT 118
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: ST_TO_ADDR
68242: GO 69925
68244: LD_INT 12
68246: DOUBLE
68247: EQUAL
68248: IFTRUE 68252
68250: GO 68472
68252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
68253: LD_ADDR_VAR 0 2
68257: PUSH
68258: LD_INT 1
68260: PUSH
68261: LD_INT 2
68263: PUSH
68264: LD_INT 3
68266: PUSH
68267: LD_INT 4
68269: PUSH
68270: LD_INT 5
68272: PUSH
68273: LD_INT 6
68275: PUSH
68276: LD_INT 7
68278: PUSH
68279: LD_INT 8
68281: PUSH
68282: LD_INT 9
68284: PUSH
68285: LD_INT 10
68287: PUSH
68288: LD_INT 11
68290: PUSH
68291: LD_INT 12
68293: PUSH
68294: LD_INT 13
68296: PUSH
68297: LD_INT 14
68299: PUSH
68300: LD_INT 15
68302: PUSH
68303: LD_INT 16
68305: PUSH
68306: LD_INT 17
68308: PUSH
68309: LD_INT 18
68311: PUSH
68312: LD_INT 19
68314: PUSH
68315: LD_INT 20
68317: PUSH
68318: LD_INT 21
68320: PUSH
68321: LD_INT 22
68323: PUSH
68324: LD_INT 23
68326: PUSH
68327: LD_INT 24
68329: PUSH
68330: LD_INT 25
68332: PUSH
68333: LD_INT 26
68335: PUSH
68336: LD_INT 27
68338: PUSH
68339: LD_INT 28
68341: PUSH
68342: LD_INT 30
68344: PUSH
68345: LD_INT 31
68347: PUSH
68348: LD_INT 32
68350: PUSH
68351: LD_INT 33
68353: PUSH
68354: LD_INT 34
68356: PUSH
68357: LD_INT 36
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 101
68398: PUSH
68399: LD_INT 102
68401: PUSH
68402: LD_INT 103
68404: PUSH
68405: LD_INT 104
68407: PUSH
68408: LD_INT 105
68410: PUSH
68411: LD_INT 106
68413: PUSH
68414: LD_INT 107
68416: PUSH
68417: LD_INT 108
68419: PUSH
68420: LD_INT 109
68422: PUSH
68423: LD_INT 110
68425: PUSH
68426: LD_INT 111
68428: PUSH
68429: LD_INT 112
68431: PUSH
68432: LD_INT 113
68434: PUSH
68435: LD_INT 114
68437: PUSH
68438: LD_INT 116
68440: PUSH
68441: LD_INT 117
68443: PUSH
68444: LD_INT 118
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: ST_TO_ADDR
68470: GO 69925
68472: LD_INT 13
68474: DOUBLE
68475: EQUAL
68476: IFTRUE 68480
68478: GO 68688
68480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
68481: LD_ADDR_VAR 0 2
68485: PUSH
68486: LD_INT 1
68488: PUSH
68489: LD_INT 2
68491: PUSH
68492: LD_INT 3
68494: PUSH
68495: LD_INT 4
68497: PUSH
68498: LD_INT 5
68500: PUSH
68501: LD_INT 8
68503: PUSH
68504: LD_INT 9
68506: PUSH
68507: LD_INT 10
68509: PUSH
68510: LD_INT 11
68512: PUSH
68513: LD_INT 12
68515: PUSH
68516: LD_INT 14
68518: PUSH
68519: LD_INT 15
68521: PUSH
68522: LD_INT 16
68524: PUSH
68525: LD_INT 17
68527: PUSH
68528: LD_INT 18
68530: PUSH
68531: LD_INT 19
68533: PUSH
68534: LD_INT 20
68536: PUSH
68537: LD_INT 21
68539: PUSH
68540: LD_INT 22
68542: PUSH
68543: LD_INT 23
68545: PUSH
68546: LD_INT 24
68548: PUSH
68549: LD_INT 25
68551: PUSH
68552: LD_INT 26
68554: PUSH
68555: LD_INT 27
68557: PUSH
68558: LD_INT 28
68560: PUSH
68561: LD_INT 30
68563: PUSH
68564: LD_INT 31
68566: PUSH
68567: LD_INT 32
68569: PUSH
68570: LD_INT 33
68572: PUSH
68573: LD_INT 34
68575: PUSH
68576: LD_INT 36
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 101
68614: PUSH
68615: LD_INT 102
68617: PUSH
68618: LD_INT 103
68620: PUSH
68621: LD_INT 104
68623: PUSH
68624: LD_INT 105
68626: PUSH
68627: LD_INT 106
68629: PUSH
68630: LD_INT 107
68632: PUSH
68633: LD_INT 108
68635: PUSH
68636: LD_INT 109
68638: PUSH
68639: LD_INT 110
68641: PUSH
68642: LD_INT 111
68644: PUSH
68645: LD_INT 112
68647: PUSH
68648: LD_INT 113
68650: PUSH
68651: LD_INT 114
68653: PUSH
68654: LD_INT 116
68656: PUSH
68657: LD_INT 117
68659: PUSH
68660: LD_INT 118
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: ST_TO_ADDR
68686: GO 69925
68688: LD_INT 14
68690: DOUBLE
68691: EQUAL
68692: IFTRUE 68696
68694: GO 68920
68696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
68697: LD_ADDR_VAR 0 2
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: LD_INT 2
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: LD_INT 4
68713: PUSH
68714: LD_INT 5
68716: PUSH
68717: LD_INT 6
68719: PUSH
68720: LD_INT 7
68722: PUSH
68723: LD_INT 8
68725: PUSH
68726: LD_INT 9
68728: PUSH
68729: LD_INT 10
68731: PUSH
68732: LD_INT 11
68734: PUSH
68735: LD_INT 12
68737: PUSH
68738: LD_INT 13
68740: PUSH
68741: LD_INT 14
68743: PUSH
68744: LD_INT 15
68746: PUSH
68747: LD_INT 16
68749: PUSH
68750: LD_INT 17
68752: PUSH
68753: LD_INT 18
68755: PUSH
68756: LD_INT 19
68758: PUSH
68759: LD_INT 20
68761: PUSH
68762: LD_INT 21
68764: PUSH
68765: LD_INT 22
68767: PUSH
68768: LD_INT 23
68770: PUSH
68771: LD_INT 24
68773: PUSH
68774: LD_INT 25
68776: PUSH
68777: LD_INT 26
68779: PUSH
68780: LD_INT 27
68782: PUSH
68783: LD_INT 28
68785: PUSH
68786: LD_INT 29
68788: PUSH
68789: LD_INT 30
68791: PUSH
68792: LD_INT 31
68794: PUSH
68795: LD_INT 32
68797: PUSH
68798: LD_INT 33
68800: PUSH
68801: LD_INT 34
68803: PUSH
68804: LD_INT 36
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 101
68846: PUSH
68847: LD_INT 102
68849: PUSH
68850: LD_INT 103
68852: PUSH
68853: LD_INT 104
68855: PUSH
68856: LD_INT 105
68858: PUSH
68859: LD_INT 106
68861: PUSH
68862: LD_INT 107
68864: PUSH
68865: LD_INT 108
68867: PUSH
68868: LD_INT 109
68870: PUSH
68871: LD_INT 110
68873: PUSH
68874: LD_INT 111
68876: PUSH
68877: LD_INT 112
68879: PUSH
68880: LD_INT 113
68882: PUSH
68883: LD_INT 114
68885: PUSH
68886: LD_INT 116
68888: PUSH
68889: LD_INT 117
68891: PUSH
68892: LD_INT 118
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: ST_TO_ADDR
68918: GO 69925
68920: LD_INT 15
68922: DOUBLE
68923: EQUAL
68924: IFTRUE 68928
68926: GO 69152
68928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68929: LD_ADDR_VAR 0 2
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: LD_INT 2
68939: PUSH
68940: LD_INT 3
68942: PUSH
68943: LD_INT 4
68945: PUSH
68946: LD_INT 5
68948: PUSH
68949: LD_INT 6
68951: PUSH
68952: LD_INT 7
68954: PUSH
68955: LD_INT 8
68957: PUSH
68958: LD_INT 9
68960: PUSH
68961: LD_INT 10
68963: PUSH
68964: LD_INT 11
68966: PUSH
68967: LD_INT 12
68969: PUSH
68970: LD_INT 13
68972: PUSH
68973: LD_INT 14
68975: PUSH
68976: LD_INT 15
68978: PUSH
68979: LD_INT 16
68981: PUSH
68982: LD_INT 17
68984: PUSH
68985: LD_INT 18
68987: PUSH
68988: LD_INT 19
68990: PUSH
68991: LD_INT 20
68993: PUSH
68994: LD_INT 21
68996: PUSH
68997: LD_INT 22
68999: PUSH
69000: LD_INT 23
69002: PUSH
69003: LD_INT 24
69005: PUSH
69006: LD_INT 25
69008: PUSH
69009: LD_INT 26
69011: PUSH
69012: LD_INT 27
69014: PUSH
69015: LD_INT 28
69017: PUSH
69018: LD_INT 29
69020: PUSH
69021: LD_INT 30
69023: PUSH
69024: LD_INT 31
69026: PUSH
69027: LD_INT 32
69029: PUSH
69030: LD_INT 33
69032: PUSH
69033: LD_INT 34
69035: PUSH
69036: LD_INT 36
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 101
69078: PUSH
69079: LD_INT 102
69081: PUSH
69082: LD_INT 103
69084: PUSH
69085: LD_INT 104
69087: PUSH
69088: LD_INT 105
69090: PUSH
69091: LD_INT 106
69093: PUSH
69094: LD_INT 107
69096: PUSH
69097: LD_INT 108
69099: PUSH
69100: LD_INT 109
69102: PUSH
69103: LD_INT 110
69105: PUSH
69106: LD_INT 111
69108: PUSH
69109: LD_INT 112
69111: PUSH
69112: LD_INT 113
69114: PUSH
69115: LD_INT 114
69117: PUSH
69118: LD_INT 116
69120: PUSH
69121: LD_INT 117
69123: PUSH
69124: LD_INT 118
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: ST_TO_ADDR
69150: GO 69925
69152: LD_INT 16
69154: DOUBLE
69155: EQUAL
69156: IFTRUE 69160
69158: GO 69296
69160: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
69161: LD_ADDR_VAR 0 2
69165: PUSH
69166: LD_INT 2
69168: PUSH
69169: LD_INT 4
69171: PUSH
69172: LD_INT 5
69174: PUSH
69175: LD_INT 7
69177: PUSH
69178: LD_INT 11
69180: PUSH
69181: LD_INT 12
69183: PUSH
69184: LD_INT 15
69186: PUSH
69187: LD_INT 16
69189: PUSH
69190: LD_INT 20
69192: PUSH
69193: LD_INT 21
69195: PUSH
69196: LD_INT 22
69198: PUSH
69199: LD_INT 23
69201: PUSH
69202: LD_INT 25
69204: PUSH
69205: LD_INT 26
69207: PUSH
69208: LD_INT 30
69210: PUSH
69211: LD_INT 31
69213: PUSH
69214: LD_INT 32
69216: PUSH
69217: LD_INT 33
69219: PUSH
69220: LD_INT 34
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 101
69246: PUSH
69247: LD_INT 102
69249: PUSH
69250: LD_INT 103
69252: PUSH
69253: LD_INT 106
69255: PUSH
69256: LD_INT 108
69258: PUSH
69259: LD_INT 112
69261: PUSH
69262: LD_INT 113
69264: PUSH
69265: LD_INT 114
69267: PUSH
69268: LD_INT 116
69270: PUSH
69271: LD_INT 117
69273: PUSH
69274: LD_INT 118
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: ST_TO_ADDR
69294: GO 69925
69296: LD_INT 17
69298: DOUBLE
69299: EQUAL
69300: IFTRUE 69304
69302: GO 69528
69304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
69305: LD_ADDR_VAR 0 2
69309: PUSH
69310: LD_INT 1
69312: PUSH
69313: LD_INT 2
69315: PUSH
69316: LD_INT 3
69318: PUSH
69319: LD_INT 4
69321: PUSH
69322: LD_INT 5
69324: PUSH
69325: LD_INT 6
69327: PUSH
69328: LD_INT 7
69330: PUSH
69331: LD_INT 8
69333: PUSH
69334: LD_INT 9
69336: PUSH
69337: LD_INT 10
69339: PUSH
69340: LD_INT 11
69342: PUSH
69343: LD_INT 12
69345: PUSH
69346: LD_INT 13
69348: PUSH
69349: LD_INT 14
69351: PUSH
69352: LD_INT 15
69354: PUSH
69355: LD_INT 16
69357: PUSH
69358: LD_INT 17
69360: PUSH
69361: LD_INT 18
69363: PUSH
69364: LD_INT 19
69366: PUSH
69367: LD_INT 20
69369: PUSH
69370: LD_INT 21
69372: PUSH
69373: LD_INT 22
69375: PUSH
69376: LD_INT 23
69378: PUSH
69379: LD_INT 24
69381: PUSH
69382: LD_INT 25
69384: PUSH
69385: LD_INT 26
69387: PUSH
69388: LD_INT 27
69390: PUSH
69391: LD_INT 28
69393: PUSH
69394: LD_INT 29
69396: PUSH
69397: LD_INT 30
69399: PUSH
69400: LD_INT 31
69402: PUSH
69403: LD_INT 32
69405: PUSH
69406: LD_INT 33
69408: PUSH
69409: LD_INT 34
69411: PUSH
69412: LD_INT 36
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 101
69454: PUSH
69455: LD_INT 102
69457: PUSH
69458: LD_INT 103
69460: PUSH
69461: LD_INT 104
69463: PUSH
69464: LD_INT 105
69466: PUSH
69467: LD_INT 106
69469: PUSH
69470: LD_INT 107
69472: PUSH
69473: LD_INT 108
69475: PUSH
69476: LD_INT 109
69478: PUSH
69479: LD_INT 110
69481: PUSH
69482: LD_INT 111
69484: PUSH
69485: LD_INT 112
69487: PUSH
69488: LD_INT 113
69490: PUSH
69491: LD_INT 114
69493: PUSH
69494: LD_INT 116
69496: PUSH
69497: LD_INT 117
69499: PUSH
69500: LD_INT 118
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: ST_TO_ADDR
69526: GO 69925
69528: LD_INT 18
69530: DOUBLE
69531: EQUAL
69532: IFTRUE 69536
69534: GO 69684
69536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
69537: LD_ADDR_VAR 0 2
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: LD_INT 4
69547: PUSH
69548: LD_INT 5
69550: PUSH
69551: LD_INT 7
69553: PUSH
69554: LD_INT 11
69556: PUSH
69557: LD_INT 12
69559: PUSH
69560: LD_INT 15
69562: PUSH
69563: LD_INT 16
69565: PUSH
69566: LD_INT 20
69568: PUSH
69569: LD_INT 21
69571: PUSH
69572: LD_INT 22
69574: PUSH
69575: LD_INT 23
69577: PUSH
69578: LD_INT 25
69580: PUSH
69581: LD_INT 26
69583: PUSH
69584: LD_INT 30
69586: PUSH
69587: LD_INT 31
69589: PUSH
69590: LD_INT 32
69592: PUSH
69593: LD_INT 33
69595: PUSH
69596: LD_INT 34
69598: PUSH
69599: LD_INT 35
69601: PUSH
69602: LD_INT 36
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: LIST
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 101
69630: PUSH
69631: LD_INT 102
69633: PUSH
69634: LD_INT 103
69636: PUSH
69637: LD_INT 106
69639: PUSH
69640: LD_INT 108
69642: PUSH
69643: LD_INT 112
69645: PUSH
69646: LD_INT 113
69648: PUSH
69649: LD_INT 114
69651: PUSH
69652: LD_INT 115
69654: PUSH
69655: LD_INT 116
69657: PUSH
69658: LD_INT 117
69660: PUSH
69661: LD_INT 118
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: ST_TO_ADDR
69682: GO 69925
69684: LD_INT 19
69686: DOUBLE
69687: EQUAL
69688: IFTRUE 69692
69690: GO 69924
69692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
69693: LD_ADDR_VAR 0 2
69697: PUSH
69698: LD_INT 1
69700: PUSH
69701: LD_INT 2
69703: PUSH
69704: LD_INT 3
69706: PUSH
69707: LD_INT 4
69709: PUSH
69710: LD_INT 5
69712: PUSH
69713: LD_INT 6
69715: PUSH
69716: LD_INT 7
69718: PUSH
69719: LD_INT 8
69721: PUSH
69722: LD_INT 9
69724: PUSH
69725: LD_INT 10
69727: PUSH
69728: LD_INT 11
69730: PUSH
69731: LD_INT 12
69733: PUSH
69734: LD_INT 13
69736: PUSH
69737: LD_INT 14
69739: PUSH
69740: LD_INT 15
69742: PUSH
69743: LD_INT 16
69745: PUSH
69746: LD_INT 17
69748: PUSH
69749: LD_INT 18
69751: PUSH
69752: LD_INT 19
69754: PUSH
69755: LD_INT 20
69757: PUSH
69758: LD_INT 21
69760: PUSH
69761: LD_INT 22
69763: PUSH
69764: LD_INT 23
69766: PUSH
69767: LD_INT 24
69769: PUSH
69770: LD_INT 25
69772: PUSH
69773: LD_INT 26
69775: PUSH
69776: LD_INT 27
69778: PUSH
69779: LD_INT 28
69781: PUSH
69782: LD_INT 29
69784: PUSH
69785: LD_INT 30
69787: PUSH
69788: LD_INT 31
69790: PUSH
69791: LD_INT 32
69793: PUSH
69794: LD_INT 33
69796: PUSH
69797: LD_INT 34
69799: PUSH
69800: LD_INT 35
69802: PUSH
69803: LD_INT 36
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 101
69846: PUSH
69847: LD_INT 102
69849: PUSH
69850: LD_INT 103
69852: PUSH
69853: LD_INT 104
69855: PUSH
69856: LD_INT 105
69858: PUSH
69859: LD_INT 106
69861: PUSH
69862: LD_INT 107
69864: PUSH
69865: LD_INT 108
69867: PUSH
69868: LD_INT 109
69870: PUSH
69871: LD_INT 110
69873: PUSH
69874: LD_INT 111
69876: PUSH
69877: LD_INT 112
69879: PUSH
69880: LD_INT 113
69882: PUSH
69883: LD_INT 114
69885: PUSH
69886: LD_INT 115
69888: PUSH
69889: LD_INT 116
69891: PUSH
69892: LD_INT 117
69894: PUSH
69895: LD_INT 118
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: ST_TO_ADDR
69922: GO 69925
69924: POP
// end else
69925: GO 70156
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69927: LD_ADDR_VAR 0 2
69931: PUSH
69932: LD_INT 1
69934: PUSH
69935: LD_INT 2
69937: PUSH
69938: LD_INT 3
69940: PUSH
69941: LD_INT 4
69943: PUSH
69944: LD_INT 5
69946: PUSH
69947: LD_INT 6
69949: PUSH
69950: LD_INT 7
69952: PUSH
69953: LD_INT 8
69955: PUSH
69956: LD_INT 9
69958: PUSH
69959: LD_INT 10
69961: PUSH
69962: LD_INT 11
69964: PUSH
69965: LD_INT 12
69967: PUSH
69968: LD_INT 13
69970: PUSH
69971: LD_INT 14
69973: PUSH
69974: LD_INT 15
69976: PUSH
69977: LD_INT 16
69979: PUSH
69980: LD_INT 17
69982: PUSH
69983: LD_INT 18
69985: PUSH
69986: LD_INT 19
69988: PUSH
69989: LD_INT 20
69991: PUSH
69992: LD_INT 21
69994: PUSH
69995: LD_INT 22
69997: PUSH
69998: LD_INT 23
70000: PUSH
70001: LD_INT 24
70003: PUSH
70004: LD_INT 25
70006: PUSH
70007: LD_INT 26
70009: PUSH
70010: LD_INT 27
70012: PUSH
70013: LD_INT 28
70015: PUSH
70016: LD_INT 29
70018: PUSH
70019: LD_INT 30
70021: PUSH
70022: LD_INT 31
70024: PUSH
70025: LD_INT 32
70027: PUSH
70028: LD_INT 33
70030: PUSH
70031: LD_INT 34
70033: PUSH
70034: LD_INT 35
70036: PUSH
70037: LD_INT 36
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 101
70080: PUSH
70081: LD_INT 102
70083: PUSH
70084: LD_INT 103
70086: PUSH
70087: LD_INT 104
70089: PUSH
70090: LD_INT 105
70092: PUSH
70093: LD_INT 106
70095: PUSH
70096: LD_INT 107
70098: PUSH
70099: LD_INT 108
70101: PUSH
70102: LD_INT 109
70104: PUSH
70105: LD_INT 110
70107: PUSH
70108: LD_INT 111
70110: PUSH
70111: LD_INT 112
70113: PUSH
70114: LD_INT 113
70116: PUSH
70117: LD_INT 114
70119: PUSH
70120: LD_INT 115
70122: PUSH
70123: LD_INT 116
70125: PUSH
70126: LD_INT 117
70128: PUSH
70129: LD_INT 118
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: ST_TO_ADDR
// if result then
70156: LD_VAR 0 2
70160: IFFALSE 70946
// begin normal :=  ;
70162: LD_ADDR_VAR 0 5
70166: PUSH
70167: LD_STRING 
70169: ST_TO_ADDR
// hardcore :=  ;
70170: LD_ADDR_VAR 0 6
70174: PUSH
70175: LD_STRING 
70177: ST_TO_ADDR
// active :=  ;
70178: LD_ADDR_VAR 0 7
70182: PUSH
70183: LD_STRING 
70185: ST_TO_ADDR
// for i = 1 to normalCounter do
70186: LD_ADDR_VAR 0 8
70190: PUSH
70191: DOUBLE
70192: LD_INT 1
70194: DEC
70195: ST_TO_ADDR
70196: LD_EXP 48
70200: PUSH
70201: FOR_TO
70202: IFFALSE 70303
// begin tmp := 0 ;
70204: LD_ADDR_VAR 0 3
70208: PUSH
70209: LD_STRING 0
70211: ST_TO_ADDR
// if result [ 1 ] then
70212: LD_VAR 0 2
70216: PUSH
70217: LD_INT 1
70219: ARRAY
70220: IFFALSE 70285
// if result [ 1 ] [ 1 ] = i then
70222: LD_VAR 0 2
70226: PUSH
70227: LD_INT 1
70229: ARRAY
70230: PUSH
70231: LD_INT 1
70233: ARRAY
70234: PUSH
70235: LD_VAR 0 8
70239: EQUAL
70240: IFFALSE 70285
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
70242: LD_ADDR_VAR 0 2
70246: PUSH
70247: LD_VAR 0 2
70251: PPUSH
70252: LD_INT 1
70254: PPUSH
70255: LD_VAR 0 2
70259: PUSH
70260: LD_INT 1
70262: ARRAY
70263: PPUSH
70264: LD_INT 1
70266: PPUSH
70267: CALL_OW 3
70271: PPUSH
70272: CALL_OW 1
70276: ST_TO_ADDR
// tmp := 1 ;
70277: LD_ADDR_VAR 0 3
70281: PUSH
70282: LD_STRING 1
70284: ST_TO_ADDR
// end ; normal := normal & tmp ;
70285: LD_ADDR_VAR 0 5
70289: PUSH
70290: LD_VAR 0 5
70294: PUSH
70295: LD_VAR 0 3
70299: STR
70300: ST_TO_ADDR
// end ;
70301: GO 70201
70303: POP
70304: POP
// for i = 1 to hardcoreCounter do
70305: LD_ADDR_VAR 0 8
70309: PUSH
70310: DOUBLE
70311: LD_INT 1
70313: DEC
70314: ST_TO_ADDR
70315: LD_EXP 49
70319: PUSH
70320: FOR_TO
70321: IFFALSE 70426
// begin tmp := 0 ;
70323: LD_ADDR_VAR 0 3
70327: PUSH
70328: LD_STRING 0
70330: ST_TO_ADDR
// if result [ 2 ] then
70331: LD_VAR 0 2
70335: PUSH
70336: LD_INT 2
70338: ARRAY
70339: IFFALSE 70408
// if result [ 2 ] [ 1 ] = 100 + i then
70341: LD_VAR 0 2
70345: PUSH
70346: LD_INT 2
70348: ARRAY
70349: PUSH
70350: LD_INT 1
70352: ARRAY
70353: PUSH
70354: LD_INT 100
70356: PUSH
70357: LD_VAR 0 8
70361: PLUS
70362: EQUAL
70363: IFFALSE 70408
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
70365: LD_ADDR_VAR 0 2
70369: PUSH
70370: LD_VAR 0 2
70374: PPUSH
70375: LD_INT 2
70377: PPUSH
70378: LD_VAR 0 2
70382: PUSH
70383: LD_INT 2
70385: ARRAY
70386: PPUSH
70387: LD_INT 1
70389: PPUSH
70390: CALL_OW 3
70394: PPUSH
70395: CALL_OW 1
70399: ST_TO_ADDR
// tmp := 1 ;
70400: LD_ADDR_VAR 0 3
70404: PUSH
70405: LD_STRING 1
70407: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
70408: LD_ADDR_VAR 0 6
70412: PUSH
70413: LD_VAR 0 6
70417: PUSH
70418: LD_VAR 0 3
70422: STR
70423: ST_TO_ADDR
// end ;
70424: GO 70320
70426: POP
70427: POP
// if isGameLoad then
70428: LD_VAR 0 1
70432: IFFALSE 70907
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
70434: LD_ADDR_VAR 0 4
70438: PUSH
70439: LD_EXP 52
70443: PUSH
70444: LD_EXP 51
70448: PUSH
70449: LD_EXP 53
70453: PUSH
70454: LD_EXP 50
70458: PUSH
70459: LD_EXP 54
70463: PUSH
70464: LD_EXP 55
70468: PUSH
70469: LD_EXP 56
70473: PUSH
70474: LD_EXP 57
70478: PUSH
70479: LD_EXP 58
70483: PUSH
70484: LD_EXP 59
70488: PUSH
70489: LD_EXP 60
70493: PUSH
70494: LD_EXP 61
70498: PUSH
70499: LD_EXP 62
70503: PUSH
70504: LD_EXP 63
70508: PUSH
70509: LD_EXP 71
70513: PUSH
70514: LD_EXP 72
70518: PUSH
70519: LD_EXP 73
70523: PUSH
70524: LD_EXP 74
70528: PUSH
70529: LD_EXP 76
70533: PUSH
70534: LD_EXP 77
70538: PUSH
70539: LD_EXP 78
70543: PUSH
70544: LD_EXP 81
70548: PUSH
70549: LD_EXP 83
70553: PUSH
70554: LD_EXP 84
70558: PUSH
70559: LD_EXP 85
70563: PUSH
70564: LD_EXP 87
70568: PUSH
70569: LD_EXP 88
70573: PUSH
70574: LD_EXP 91
70578: PUSH
70579: LD_EXP 92
70583: PUSH
70584: LD_EXP 93
70588: PUSH
70589: LD_EXP 94
70593: PUSH
70594: LD_EXP 95
70598: PUSH
70599: LD_EXP 96
70603: PUSH
70604: LD_EXP 97
70608: PUSH
70609: LD_EXP 98
70613: PUSH
70614: LD_EXP 99
70618: PUSH
70619: LD_EXP 64
70623: PUSH
70624: LD_EXP 65
70628: PUSH
70629: LD_EXP 68
70633: PUSH
70634: LD_EXP 69
70638: PUSH
70639: LD_EXP 70
70643: PUSH
70644: LD_EXP 66
70648: PUSH
70649: LD_EXP 67
70653: PUSH
70654: LD_EXP 75
70658: PUSH
70659: LD_EXP 79
70663: PUSH
70664: LD_EXP 80
70668: PUSH
70669: LD_EXP 82
70673: PUSH
70674: LD_EXP 86
70678: PUSH
70679: LD_EXP 89
70683: PUSH
70684: LD_EXP 90
70688: PUSH
70689: LD_EXP 100
70693: PUSH
70694: LD_EXP 101
70698: PUSH
70699: LD_EXP 102
70703: PUSH
70704: LD_EXP 103
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: ST_TO_ADDR
// tmp :=  ;
70765: LD_ADDR_VAR 0 3
70769: PUSH
70770: LD_STRING 
70772: ST_TO_ADDR
// for i = 1 to normalCounter do
70773: LD_ADDR_VAR 0 8
70777: PUSH
70778: DOUBLE
70779: LD_INT 1
70781: DEC
70782: ST_TO_ADDR
70783: LD_EXP 48
70787: PUSH
70788: FOR_TO
70789: IFFALSE 70825
// begin if flags [ i ] then
70791: LD_VAR 0 4
70795: PUSH
70796: LD_VAR 0 8
70800: ARRAY
70801: IFFALSE 70823
// tmp := tmp & i & ; ;
70803: LD_ADDR_VAR 0 3
70807: PUSH
70808: LD_VAR 0 3
70812: PUSH
70813: LD_VAR 0 8
70817: STR
70818: PUSH
70819: LD_STRING ;
70821: STR
70822: ST_TO_ADDR
// end ;
70823: GO 70788
70825: POP
70826: POP
// for i = 1 to hardcoreCounter do
70827: LD_ADDR_VAR 0 8
70831: PUSH
70832: DOUBLE
70833: LD_INT 1
70835: DEC
70836: ST_TO_ADDR
70837: LD_EXP 49
70841: PUSH
70842: FOR_TO
70843: IFFALSE 70889
// begin if flags [ normalCounter + i ] then
70845: LD_VAR 0 4
70849: PUSH
70850: LD_EXP 48
70854: PUSH
70855: LD_VAR 0 8
70859: PLUS
70860: ARRAY
70861: IFFALSE 70887
// tmp := tmp & ( 100 + i ) & ; ;
70863: LD_ADDR_VAR 0 3
70867: PUSH
70868: LD_VAR 0 3
70872: PUSH
70873: LD_INT 100
70875: PUSH
70876: LD_VAR 0 8
70880: PLUS
70881: STR
70882: PUSH
70883: LD_STRING ;
70885: STR
70886: ST_TO_ADDR
// end ;
70887: GO 70842
70889: POP
70890: POP
// if tmp then
70891: LD_VAR 0 3
70895: IFFALSE 70907
// active := tmp ;
70897: LD_ADDR_VAR 0 7
70901: PUSH
70902: LD_VAR 0 3
70906: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70907: LD_STRING getStreamItemsFromMission("
70909: PUSH
70910: LD_VAR 0 5
70914: STR
70915: PUSH
70916: LD_STRING ","
70918: STR
70919: PUSH
70920: LD_VAR 0 6
70924: STR
70925: PUSH
70926: LD_STRING ","
70928: STR
70929: PUSH
70930: LD_VAR 0 7
70934: STR
70935: PUSH
70936: LD_STRING ")
70938: STR
70939: PPUSH
70940: CALL_OW 559
// end else
70944: GO 70953
// ToLua ( getStreamItemsFromMission("","","") ) ;
70946: LD_STRING getStreamItemsFromMission("","","")
70948: PPUSH
70949: CALL_OW 559
// end ;
70953: LD_VAR 0 2
70957: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70958: LD_EXP 47
70962: IFFALSE 70970
70964: PUSH
70965: LD_EXP 52
70969: AND
70970: IFFALSE 71094
70972: GO 70974
70974: DISABLE
70975: LD_INT 0
70977: PPUSH
70978: PPUSH
// begin enable ;
70979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70980: LD_ADDR_VAR 0 2
70984: PUSH
70985: LD_INT 22
70987: PUSH
70988: LD_OWVAR 2
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 2
70999: PUSH
71000: LD_INT 34
71002: PUSH
71003: LD_INT 7
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 34
71012: PUSH
71013: LD_INT 45
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 34
71022: PUSH
71023: LD_INT 28
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 34
71032: PUSH
71033: LD_INT 47
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PPUSH
71051: CALL_OW 69
71055: ST_TO_ADDR
// if not tmp then
71056: LD_VAR 0 2
71060: NOT
71061: IFFALSE 71065
// exit ;
71063: GO 71094
// for i in tmp do
71065: LD_ADDR_VAR 0 1
71069: PUSH
71070: LD_VAR 0 2
71074: PUSH
71075: FOR_IN
71076: IFFALSE 71092
// begin SetLives ( i , 0 ) ;
71078: LD_VAR 0 1
71082: PPUSH
71083: LD_INT 0
71085: PPUSH
71086: CALL_OW 234
// end ;
71090: GO 71075
71092: POP
71093: POP
// end ;
71094: PPOPN 2
71096: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
71097: LD_EXP 47
71101: IFFALSE 71109
71103: PUSH
71104: LD_EXP 53
71108: AND
71109: IFFALSE 71193
71111: GO 71113
71113: DISABLE
71114: LD_INT 0
71116: PPUSH
71117: PPUSH
// begin enable ;
71118: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
71119: LD_ADDR_VAR 0 2
71123: PUSH
71124: LD_INT 22
71126: PUSH
71127: LD_OWVAR 2
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 32
71138: PUSH
71139: LD_INT 3
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PPUSH
71150: CALL_OW 69
71154: ST_TO_ADDR
// if not tmp then
71155: LD_VAR 0 2
71159: NOT
71160: IFFALSE 71164
// exit ;
71162: GO 71193
// for i in tmp do
71164: LD_ADDR_VAR 0 1
71168: PUSH
71169: LD_VAR 0 2
71173: PUSH
71174: FOR_IN
71175: IFFALSE 71191
// begin SetLives ( i , 0 ) ;
71177: LD_VAR 0 1
71181: PPUSH
71182: LD_INT 0
71184: PPUSH
71185: CALL_OW 234
// end ;
71189: GO 71174
71191: POP
71192: POP
// end ;
71193: PPOPN 2
71195: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
71196: LD_EXP 47
71200: IFFALSE 71208
71202: PUSH
71203: LD_EXP 50
71207: AND
71208: IFFALSE 71301
71210: GO 71212
71212: DISABLE
71213: LD_INT 0
71215: PPUSH
// begin enable ;
71216: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
71217: LD_ADDR_VAR 0 1
71221: PUSH
71222: LD_INT 22
71224: PUSH
71225: LD_OWVAR 2
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: PUSH
71237: LD_INT 25
71239: PUSH
71240: LD_INT 5
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 25
71249: PUSH
71250: LD_INT 9
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 25
71259: PUSH
71260: LD_INT 8
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PPUSH
71277: CALL_OW 69
71281: PUSH
71282: FOR_IN
71283: IFFALSE 71299
// begin SetClass ( i , 1 ) ;
71285: LD_VAR 0 1
71289: PPUSH
71290: LD_INT 1
71292: PPUSH
71293: CALL_OW 336
// end ;
71297: GO 71282
71299: POP
71300: POP
// end ;
71301: PPOPN 1
71303: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
71304: LD_EXP 47
71308: IFFALSE 71316
71310: PUSH
71311: LD_EXP 51
71315: AND
71316: IFFALSE 71328
71318: PUSH
71319: LD_OWVAR 65
71323: PUSH
71324: LD_INT 7
71326: LESS
71327: AND
71328: IFFALSE 71342
71330: GO 71332
71332: DISABLE
// begin enable ;
71333: ENABLE
// game_speed := 7 ;
71334: LD_ADDR_OWVAR 65
71338: PUSH
71339: LD_INT 7
71341: ST_TO_ADDR
// end ;
71342: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
71343: LD_EXP 47
71347: IFFALSE 71355
71349: PUSH
71350: LD_EXP 54
71354: AND
71355: IFFALSE 71557
71357: GO 71359
71359: DISABLE
71360: LD_INT 0
71362: PPUSH
71363: PPUSH
71364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71365: LD_ADDR_VAR 0 3
71369: PUSH
71370: LD_INT 81
71372: PUSH
71373: LD_OWVAR 2
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 21
71384: PUSH
71385: LD_INT 1
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PPUSH
71396: CALL_OW 69
71400: ST_TO_ADDR
// if not tmp then
71401: LD_VAR 0 3
71405: NOT
71406: IFFALSE 71410
// exit ;
71408: GO 71557
// if tmp > 5 then
71410: LD_VAR 0 3
71414: PUSH
71415: LD_INT 5
71417: GREATER
71418: IFFALSE 71430
// k := 5 else
71420: LD_ADDR_VAR 0 2
71424: PUSH
71425: LD_INT 5
71427: ST_TO_ADDR
71428: GO 71440
// k := tmp ;
71430: LD_ADDR_VAR 0 2
71434: PUSH
71435: LD_VAR 0 3
71439: ST_TO_ADDR
// for i := 1 to k do
71440: LD_ADDR_VAR 0 1
71444: PUSH
71445: DOUBLE
71446: LD_INT 1
71448: DEC
71449: ST_TO_ADDR
71450: LD_VAR 0 2
71454: PUSH
71455: FOR_TO
71456: IFFALSE 71555
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
71458: LD_VAR 0 3
71462: PUSH
71463: LD_VAR 0 1
71467: ARRAY
71468: PPUSH
71469: LD_VAR 0 1
71473: PUSH
71474: LD_INT 4
71476: MOD
71477: PUSH
71478: LD_INT 1
71480: PLUS
71481: PPUSH
71482: CALL_OW 259
71486: PUSH
71487: LD_INT 10
71489: LESS
71490: IFFALSE 71553
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
71492: LD_VAR 0 3
71496: PUSH
71497: LD_VAR 0 1
71501: ARRAY
71502: PPUSH
71503: LD_VAR 0 1
71507: PUSH
71508: LD_INT 4
71510: MOD
71511: PUSH
71512: LD_INT 1
71514: PLUS
71515: PPUSH
71516: LD_VAR 0 3
71520: PUSH
71521: LD_VAR 0 1
71525: ARRAY
71526: PPUSH
71527: LD_VAR 0 1
71531: PUSH
71532: LD_INT 4
71534: MOD
71535: PUSH
71536: LD_INT 1
71538: PLUS
71539: PPUSH
71540: CALL_OW 259
71544: PUSH
71545: LD_INT 1
71547: PLUS
71548: PPUSH
71549: CALL_OW 237
71553: GO 71455
71555: POP
71556: POP
// end ;
71557: PPOPN 3
71559: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
71560: LD_EXP 47
71564: IFFALSE 71572
71566: PUSH
71567: LD_EXP 55
71571: AND
71572: IFFALSE 71592
71574: GO 71576
71576: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
71577: LD_INT 4
71579: PPUSH
71580: LD_OWVAR 2
71584: PPUSH
71585: LD_INT 0
71587: PPUSH
71588: CALL_OW 324
71592: END
// every 0 0$1 trigger StreamModeActive and sShovel do
71593: LD_EXP 47
71597: IFFALSE 71605
71599: PUSH
71600: LD_EXP 84
71604: AND
71605: IFFALSE 71625
71607: GO 71609
71609: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
71610: LD_INT 19
71612: PPUSH
71613: LD_OWVAR 2
71617: PPUSH
71618: LD_INT 0
71620: PPUSH
71621: CALL_OW 324
71625: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
71626: LD_EXP 47
71630: IFFALSE 71638
71632: PUSH
71633: LD_EXP 56
71637: AND
71638: IFFALSE 71740
71640: GO 71642
71642: DISABLE
71643: LD_INT 0
71645: PPUSH
71646: PPUSH
// begin enable ;
71647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
71648: LD_ADDR_VAR 0 2
71652: PUSH
71653: LD_INT 22
71655: PUSH
71656: LD_OWVAR 2
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 2
71667: PUSH
71668: LD_INT 34
71670: PUSH
71671: LD_INT 11
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 34
71680: PUSH
71681: LD_INT 30
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: LIST
71692: PUSH
71693: EMPTY
71694: LIST
71695: LIST
71696: PPUSH
71697: CALL_OW 69
71701: ST_TO_ADDR
// if not tmp then
71702: LD_VAR 0 2
71706: NOT
71707: IFFALSE 71711
// exit ;
71709: GO 71740
// for i in tmp do
71711: LD_ADDR_VAR 0 1
71715: PUSH
71716: LD_VAR 0 2
71720: PUSH
71721: FOR_IN
71722: IFFALSE 71738
// begin SetLives ( i , 0 ) ;
71724: LD_VAR 0 1
71728: PPUSH
71729: LD_INT 0
71731: PPUSH
71732: CALL_OW 234
// end ;
71736: GO 71721
71738: POP
71739: POP
// end ;
71740: PPOPN 2
71742: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71743: LD_EXP 47
71747: IFFALSE 71755
71749: PUSH
71750: LD_EXP 57
71754: AND
71755: IFFALSE 71775
71757: GO 71759
71759: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71760: LD_INT 32
71762: PPUSH
71763: LD_OWVAR 2
71767: PPUSH
71768: LD_INT 0
71770: PPUSH
71771: CALL_OW 324
71775: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71776: LD_EXP 47
71780: IFFALSE 71788
71782: PUSH
71783: LD_EXP 58
71787: AND
71788: IFFALSE 71971
71790: GO 71792
71792: DISABLE
71793: LD_INT 0
71795: PPUSH
71796: PPUSH
71797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71798: LD_ADDR_VAR 0 2
71802: PUSH
71803: LD_INT 22
71805: PUSH
71806: LD_OWVAR 2
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: PUSH
71815: LD_INT 33
71817: PUSH
71818: LD_INT 3
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PPUSH
71829: CALL_OW 69
71833: ST_TO_ADDR
// if not tmp then
71834: LD_VAR 0 2
71838: NOT
71839: IFFALSE 71843
// exit ;
71841: GO 71971
// side := 0 ;
71843: LD_ADDR_VAR 0 3
71847: PUSH
71848: LD_INT 0
71850: ST_TO_ADDR
// for i := 1 to 8 do
71851: LD_ADDR_VAR 0 1
71855: PUSH
71856: DOUBLE
71857: LD_INT 1
71859: DEC
71860: ST_TO_ADDR
71861: LD_INT 8
71863: PUSH
71864: FOR_TO
71865: IFFALSE 71915
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71867: LD_OWVAR 2
71871: PUSH
71872: LD_VAR 0 1
71876: NONEQUAL
71877: IFFALSE 71899
71879: PUSH
71880: LD_OWVAR 2
71884: PPUSH
71885: LD_VAR 0 1
71889: PPUSH
71890: CALL_OW 81
71894: PUSH
71895: LD_INT 2
71897: EQUAL
71898: AND
71899: IFFALSE 71913
// begin side := i ;
71901: LD_ADDR_VAR 0 3
71905: PUSH
71906: LD_VAR 0 1
71910: ST_TO_ADDR
// break ;
71911: GO 71915
// end ;
71913: GO 71864
71915: POP
71916: POP
// if not side then
71917: LD_VAR 0 3
71921: NOT
71922: IFFALSE 71926
// exit ;
71924: GO 71971
// for i := 1 to tmp do
71926: LD_ADDR_VAR 0 1
71930: PUSH
71931: DOUBLE
71932: LD_INT 1
71934: DEC
71935: ST_TO_ADDR
71936: LD_VAR 0 2
71940: PUSH
71941: FOR_TO
71942: IFFALSE 71969
// if Prob ( 60 ) then
71944: LD_INT 60
71946: PPUSH
71947: CALL_OW 13
71951: IFFALSE 71967
// SetSide ( i , side ) ;
71953: LD_VAR 0 1
71957: PPUSH
71958: LD_VAR 0 3
71962: PPUSH
71963: CALL_OW 235
71967: GO 71941
71969: POP
71970: POP
// end ;
71971: PPOPN 3
71973: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71974: LD_EXP 47
71978: IFFALSE 71986
71980: PUSH
71981: LD_EXP 60
71985: AND
71986: IFFALSE 72105
71988: GO 71990
71990: DISABLE
71991: LD_INT 0
71993: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71994: LD_ADDR_VAR 0 1
71998: PUSH
71999: LD_INT 22
72001: PUSH
72002: LD_OWVAR 2
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 21
72013: PUSH
72014: LD_INT 1
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 3
72023: PUSH
72024: LD_INT 23
72026: PUSH
72027: LD_INT 0
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: LIST
72042: PPUSH
72043: CALL_OW 69
72047: PUSH
72048: FOR_IN
72049: IFFALSE 72103
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
72051: LD_VAR 0 1
72055: PPUSH
72056: CALL_OW 257
72060: PUSH
72061: LD_INT 1
72063: PUSH
72064: LD_INT 2
72066: PUSH
72067: LD_INT 3
72069: PUSH
72070: LD_INT 4
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: IN
72079: IFFALSE 72101
// SetClass ( un , rand ( 1 , 4 ) ) ;
72081: LD_VAR 0 1
72085: PPUSH
72086: LD_INT 1
72088: PPUSH
72089: LD_INT 4
72091: PPUSH
72092: CALL_OW 12
72096: PPUSH
72097: CALL_OW 336
72101: GO 72048
72103: POP
72104: POP
// end ;
72105: PPOPN 1
72107: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
72108: LD_EXP 47
72112: IFFALSE 72120
72114: PUSH
72115: LD_EXP 59
72119: AND
72120: IFFALSE 72199
72122: GO 72124
72124: DISABLE
72125: LD_INT 0
72127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72128: LD_ADDR_VAR 0 1
72132: PUSH
72133: LD_INT 22
72135: PUSH
72136: LD_OWVAR 2
72140: PUSH
72141: EMPTY
72142: LIST
72143: LIST
72144: PUSH
72145: LD_INT 21
72147: PUSH
72148: LD_INT 3
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PPUSH
72159: CALL_OW 69
72163: ST_TO_ADDR
// if not tmp then
72164: LD_VAR 0 1
72168: NOT
72169: IFFALSE 72173
// exit ;
72171: GO 72199
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
72173: LD_VAR 0 1
72177: PUSH
72178: LD_INT 1
72180: PPUSH
72181: LD_VAR 0 1
72185: PPUSH
72186: CALL_OW 12
72190: ARRAY
72191: PPUSH
72192: LD_INT 100
72194: PPUSH
72195: CALL_OW 234
// end ;
72199: PPOPN 1
72201: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
72202: LD_EXP 47
72206: IFFALSE 72214
72208: PUSH
72209: LD_EXP 61
72213: AND
72214: IFFALSE 72312
72216: GO 72218
72218: DISABLE
72219: LD_INT 0
72221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72222: LD_ADDR_VAR 0 1
72226: PUSH
72227: LD_INT 22
72229: PUSH
72230: LD_OWVAR 2
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 21
72241: PUSH
72242: LD_INT 1
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PPUSH
72253: CALL_OW 69
72257: ST_TO_ADDR
// if not tmp then
72258: LD_VAR 0 1
72262: NOT
72263: IFFALSE 72267
// exit ;
72265: GO 72312
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
72267: LD_VAR 0 1
72271: PUSH
72272: LD_INT 1
72274: PPUSH
72275: LD_VAR 0 1
72279: PPUSH
72280: CALL_OW 12
72284: ARRAY
72285: PPUSH
72286: LD_INT 1
72288: PPUSH
72289: LD_INT 4
72291: PPUSH
72292: CALL_OW 12
72296: PPUSH
72297: LD_INT 3000
72299: PPUSH
72300: LD_INT 9000
72302: PPUSH
72303: CALL_OW 12
72307: PPUSH
72308: CALL_OW 492
// end ;
72312: PPOPN 1
72314: END
// every 0 0$1 trigger StreamModeActive and sDepot do
72315: LD_EXP 47
72319: IFFALSE 72327
72321: PUSH
72322: LD_EXP 62
72326: AND
72327: IFFALSE 72347
72329: GO 72331
72331: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
72332: LD_INT 1
72334: PPUSH
72335: LD_OWVAR 2
72339: PPUSH
72340: LD_INT 0
72342: PPUSH
72343: CALL_OW 324
72347: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
72348: LD_EXP 47
72352: IFFALSE 72360
72354: PUSH
72355: LD_EXP 63
72359: AND
72360: IFFALSE 72443
72362: GO 72364
72364: DISABLE
72365: LD_INT 0
72367: PPUSH
72368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
72369: LD_ADDR_VAR 0 2
72373: PUSH
72374: LD_INT 22
72376: PUSH
72377: LD_OWVAR 2
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 21
72388: PUSH
72389: LD_INT 3
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PPUSH
72400: CALL_OW 69
72404: ST_TO_ADDR
// if not tmp then
72405: LD_VAR 0 2
72409: NOT
72410: IFFALSE 72414
// exit ;
72412: GO 72443
// for i in tmp do
72414: LD_ADDR_VAR 0 1
72418: PUSH
72419: LD_VAR 0 2
72423: PUSH
72424: FOR_IN
72425: IFFALSE 72441
// SetBLevel ( i , 10 ) ;
72427: LD_VAR 0 1
72431: PPUSH
72432: LD_INT 10
72434: PPUSH
72435: CALL_OW 241
72439: GO 72424
72441: POP
72442: POP
// end ;
72443: PPOPN 2
72445: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
72446: LD_EXP 47
72450: IFFALSE 72458
72452: PUSH
72453: LD_EXP 64
72457: AND
72458: IFFALSE 72569
72460: GO 72462
72462: DISABLE
72463: LD_INT 0
72465: PPUSH
72466: PPUSH
72467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72468: LD_ADDR_VAR 0 3
72472: PUSH
72473: LD_INT 22
72475: PUSH
72476: LD_OWVAR 2
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 25
72487: PUSH
72488: LD_INT 1
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PPUSH
72499: CALL_OW 69
72503: ST_TO_ADDR
// if not tmp then
72504: LD_VAR 0 3
72508: NOT
72509: IFFALSE 72513
// exit ;
72511: GO 72569
// un := tmp [ rand ( 1 , tmp ) ] ;
72513: LD_ADDR_VAR 0 2
72517: PUSH
72518: LD_VAR 0 3
72522: PUSH
72523: LD_INT 1
72525: PPUSH
72526: LD_VAR 0 3
72530: PPUSH
72531: CALL_OW 12
72535: ARRAY
72536: ST_TO_ADDR
// if Crawls ( un ) then
72537: LD_VAR 0 2
72541: PPUSH
72542: CALL_OW 318
72546: IFFALSE 72557
// ComWalk ( un ) ;
72548: LD_VAR 0 2
72552: PPUSH
72553: CALL_OW 138
// SetClass ( un , class_sniper ) ;
72557: LD_VAR 0 2
72561: PPUSH
72562: LD_INT 5
72564: PPUSH
72565: CALL_OW 336
// end ;
72569: PPOPN 3
72571: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
72572: LD_EXP 47
72576: IFFALSE 72584
72578: PUSH
72579: LD_EXP 65
72583: AND
72584: IFFALSE 72596
72586: PUSH
72587: LD_OWVAR 67
72591: PUSH
72592: LD_INT 4
72594: LESS
72595: AND
72596: IFFALSE 72615
72598: GO 72600
72600: DISABLE
// begin Difficulty := Difficulty + 1 ;
72601: LD_ADDR_OWVAR 67
72605: PUSH
72606: LD_OWVAR 67
72610: PUSH
72611: LD_INT 1
72613: PLUS
72614: ST_TO_ADDR
// end ;
72615: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
72616: LD_EXP 47
72620: IFFALSE 72628
72622: PUSH
72623: LD_EXP 66
72627: AND
72628: IFFALSE 72731
72630: GO 72632
72632: DISABLE
72633: LD_INT 0
72635: PPUSH
// begin for i := 1 to 5 do
72636: LD_ADDR_VAR 0 1
72640: PUSH
72641: DOUBLE
72642: LD_INT 1
72644: DEC
72645: ST_TO_ADDR
72646: LD_INT 5
72648: PUSH
72649: FOR_TO
72650: IFFALSE 72729
// begin uc_nation := nation_nature ;
72652: LD_ADDR_OWVAR 21
72656: PUSH
72657: LD_INT 0
72659: ST_TO_ADDR
// uc_side := 0 ;
72660: LD_ADDR_OWVAR 20
72664: PUSH
72665: LD_INT 0
72667: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72668: LD_ADDR_OWVAR 29
72672: PUSH
72673: LD_INT 12
72675: PUSH
72676: LD_INT 12
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: ST_TO_ADDR
// hc_agressivity := 20 ;
72683: LD_ADDR_OWVAR 35
72687: PUSH
72688: LD_INT 20
72690: ST_TO_ADDR
// hc_class := class_tiger ;
72691: LD_ADDR_OWVAR 28
72695: PUSH
72696: LD_INT 14
72698: ST_TO_ADDR
// hc_gallery :=  ;
72699: LD_ADDR_OWVAR 33
72703: PUSH
72704: LD_STRING 
72706: ST_TO_ADDR
// hc_name :=  ;
72707: LD_ADDR_OWVAR 26
72711: PUSH
72712: LD_STRING 
72714: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
72715: CALL_OW 44
72719: PPUSH
72720: LD_INT 0
72722: PPUSH
72723: CALL_OW 51
// end ;
72727: GO 72649
72729: POP
72730: POP
// end ;
72731: PPOPN 1
72733: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72734: LD_EXP 47
72738: IFFALSE 72746
72740: PUSH
72741: LD_EXP 67
72745: AND
72746: IFFALSE 72755
72748: GO 72750
72750: DISABLE
// StreamSibBomb ;
72751: CALL 72756 0 0
72755: END
// export function StreamSibBomb ; var i , x , y ; begin
72756: LD_INT 0
72758: PPUSH
72759: PPUSH
72760: PPUSH
72761: PPUSH
// result := false ;
72762: LD_ADDR_VAR 0 1
72766: PUSH
72767: LD_INT 0
72769: ST_TO_ADDR
// for i := 1 to 16 do
72770: LD_ADDR_VAR 0 2
72774: PUSH
72775: DOUBLE
72776: LD_INT 1
72778: DEC
72779: ST_TO_ADDR
72780: LD_INT 16
72782: PUSH
72783: FOR_TO
72784: IFFALSE 72983
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72786: LD_ADDR_VAR 0 3
72790: PUSH
72791: LD_INT 10
72793: PUSH
72794: LD_INT 20
72796: PUSH
72797: LD_INT 30
72799: PUSH
72800: LD_INT 40
72802: PUSH
72803: LD_INT 50
72805: PUSH
72806: LD_INT 60
72808: PUSH
72809: LD_INT 70
72811: PUSH
72812: LD_INT 80
72814: PUSH
72815: LD_INT 90
72817: PUSH
72818: LD_INT 100
72820: PUSH
72821: LD_INT 110
72823: PUSH
72824: LD_INT 120
72826: PUSH
72827: LD_INT 130
72829: PUSH
72830: LD_INT 140
72832: PUSH
72833: LD_INT 150
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 1
72855: PPUSH
72856: LD_INT 15
72858: PPUSH
72859: CALL_OW 12
72863: ARRAY
72864: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72865: LD_ADDR_VAR 0 4
72869: PUSH
72870: LD_INT 10
72872: PUSH
72873: LD_INT 20
72875: PUSH
72876: LD_INT 30
72878: PUSH
72879: LD_INT 40
72881: PUSH
72882: LD_INT 50
72884: PUSH
72885: LD_INT 60
72887: PUSH
72888: LD_INT 70
72890: PUSH
72891: LD_INT 80
72893: PUSH
72894: LD_INT 90
72896: PUSH
72897: LD_INT 100
72899: PUSH
72900: LD_INT 110
72902: PUSH
72903: LD_INT 120
72905: PUSH
72906: LD_INT 130
72908: PUSH
72909: LD_INT 140
72911: PUSH
72912: LD_INT 150
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: LIST
72919: LIST
72920: LIST
72921: LIST
72922: LIST
72923: LIST
72924: LIST
72925: LIST
72926: LIST
72927: LIST
72928: LIST
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 1
72934: PPUSH
72935: LD_INT 15
72937: PPUSH
72938: CALL_OW 12
72942: ARRAY
72943: ST_TO_ADDR
// if ValidHex ( x , y ) then
72944: LD_VAR 0 3
72948: PPUSH
72949: LD_VAR 0 4
72953: PPUSH
72954: CALL_OW 488
72958: IFFALSE 72981
// begin result := [ x , y ] ;
72960: LD_ADDR_VAR 0 1
72964: PUSH
72965: LD_VAR 0 3
72969: PUSH
72970: LD_VAR 0 4
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: ST_TO_ADDR
// break ;
72979: GO 72983
// end ; end ;
72981: GO 72783
72983: POP
72984: POP
// if result then
72985: LD_VAR 0 1
72989: IFFALSE 73049
// begin ToLua ( playSibBomb() ) ;
72991: LD_STRING playSibBomb()
72993: PPUSH
72994: CALL_OW 559
// wait ( 0 0$14 ) ;
72998: LD_INT 490
73000: PPUSH
73001: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
73005: LD_VAR 0 1
73009: PUSH
73010: LD_INT 1
73012: ARRAY
73013: PPUSH
73014: LD_VAR 0 1
73018: PUSH
73019: LD_INT 2
73021: ARRAY
73022: PPUSH
73023: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
73027: LD_VAR 0 1
73031: PUSH
73032: LD_INT 1
73034: ARRAY
73035: PPUSH
73036: LD_VAR 0 1
73040: PUSH
73041: LD_INT 2
73043: ARRAY
73044: PPUSH
73045: CALL_OW 429
// end ; end ;
73049: LD_VAR 0 1
73053: RET
// every 0 0$1 trigger StreamModeActive and sReset do
73054: LD_EXP 47
73058: IFFALSE 73066
73060: PUSH
73061: LD_EXP 69
73065: AND
73066: IFFALSE 73078
73068: GO 73070
73070: DISABLE
// YouLost (  ) ;
73071: LD_STRING 
73073: PPUSH
73074: CALL_OW 104
73078: END
// every 0 0$1 trigger StreamModeActive and sFog do
73079: LD_EXP 47
73083: IFFALSE 73091
73085: PUSH
73086: LD_EXP 68
73090: AND
73091: IFFALSE 73105
73093: GO 73095
73095: DISABLE
// FogOff ( your_side ) ;
73096: LD_OWVAR 2
73100: PPUSH
73101: CALL_OW 344
73105: END
// every 0 0$1 trigger StreamModeActive and sSun do
73106: LD_EXP 47
73110: IFFALSE 73118
73112: PUSH
73113: LD_EXP 70
73117: AND
73118: IFFALSE 73146
73120: GO 73122
73122: DISABLE
// begin solar_recharge_percent := 0 ;
73123: LD_ADDR_OWVAR 79
73127: PUSH
73128: LD_INT 0
73130: ST_TO_ADDR
// wait ( 5 5$00 ) ;
73131: LD_INT 10500
73133: PPUSH
73134: CALL_OW 67
// solar_recharge_percent := 100 ;
73138: LD_ADDR_OWVAR 79
73142: PUSH
73143: LD_INT 100
73145: ST_TO_ADDR
// end ;
73146: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
73147: LD_EXP 47
73151: IFFALSE 73159
73153: PUSH
73154: LD_EXP 71
73158: AND
73159: IFFALSE 73398
73161: GO 73163
73163: DISABLE
73164: LD_INT 0
73166: PPUSH
73167: PPUSH
73168: PPUSH
// begin tmp := [ ] ;
73169: LD_ADDR_VAR 0 3
73173: PUSH
73174: EMPTY
73175: ST_TO_ADDR
// for i := 1 to 6 do
73176: LD_ADDR_VAR 0 1
73180: PUSH
73181: DOUBLE
73182: LD_INT 1
73184: DEC
73185: ST_TO_ADDR
73186: LD_INT 6
73188: PUSH
73189: FOR_TO
73190: IFFALSE 73295
// begin uc_nation := nation_nature ;
73192: LD_ADDR_OWVAR 21
73196: PUSH
73197: LD_INT 0
73199: ST_TO_ADDR
// uc_side := 0 ;
73200: LD_ADDR_OWVAR 20
73204: PUSH
73205: LD_INT 0
73207: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
73208: LD_ADDR_OWVAR 29
73212: PUSH
73213: LD_INT 12
73215: PUSH
73216: LD_INT 12
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: ST_TO_ADDR
// hc_agressivity := 20 ;
73223: LD_ADDR_OWVAR 35
73227: PUSH
73228: LD_INT 20
73230: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
73231: LD_ADDR_OWVAR 28
73235: PUSH
73236: LD_INT 17
73238: ST_TO_ADDR
// hc_gallery :=  ;
73239: LD_ADDR_OWVAR 33
73243: PUSH
73244: LD_STRING 
73246: ST_TO_ADDR
// hc_name :=  ;
73247: LD_ADDR_OWVAR 26
73251: PUSH
73252: LD_STRING 
73254: ST_TO_ADDR
// un := CreateHuman ;
73255: LD_ADDR_VAR 0 2
73259: PUSH
73260: CALL_OW 44
73264: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
73265: LD_VAR 0 2
73269: PPUSH
73270: LD_INT 1
73272: PPUSH
73273: CALL_OW 51
// tmp := tmp ^ un ;
73277: LD_ADDR_VAR 0 3
73281: PUSH
73282: LD_VAR 0 3
73286: PUSH
73287: LD_VAR 0 2
73291: ADD
73292: ST_TO_ADDR
// end ;
73293: GO 73189
73295: POP
73296: POP
// repeat wait ( 0 0$1 ) ;
73297: LD_INT 35
73299: PPUSH
73300: CALL_OW 67
// for un in tmp do
73304: LD_ADDR_VAR 0 2
73308: PUSH
73309: LD_VAR 0 3
73313: PUSH
73314: FOR_IN
73315: IFFALSE 73389
// begin if IsDead ( un ) then
73317: LD_VAR 0 2
73321: PPUSH
73322: CALL_OW 301
73326: IFFALSE 73346
// begin tmp := tmp diff un ;
73328: LD_ADDR_VAR 0 3
73332: PUSH
73333: LD_VAR 0 3
73337: PUSH
73338: LD_VAR 0 2
73342: DIFF
73343: ST_TO_ADDR
// continue ;
73344: GO 73314
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
73346: LD_VAR 0 2
73350: PPUSH
73351: LD_INT 3
73353: PUSH
73354: LD_INT 22
73356: PUSH
73357: LD_INT 0
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PPUSH
73368: CALL_OW 69
73372: PPUSH
73373: LD_VAR 0 2
73377: PPUSH
73378: CALL_OW 74
73382: PPUSH
73383: CALL_OW 115
// end ;
73387: GO 73314
73389: POP
73390: POP
// until not tmp ;
73391: LD_VAR 0 3
73395: NOT
73396: IFFALSE 73297
// end ;
73398: PPOPN 3
73400: END
// every 0 0$1 trigger StreamModeActive and sTroll do
73401: LD_EXP 47
73405: IFFALSE 73413
73407: PUSH
73408: LD_EXP 72
73412: AND
73413: IFFALSE 73467
73415: GO 73417
73417: DISABLE
// begin ToLua ( displayTroll(); ) ;
73418: LD_STRING displayTroll();
73420: PPUSH
73421: CALL_OW 559
// wait ( 3 3$00 ) ;
73425: LD_INT 6300
73427: PPUSH
73428: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73432: LD_STRING hideTroll();
73434: PPUSH
73435: CALL_OW 559
// wait ( 1 1$00 ) ;
73439: LD_INT 2100
73441: PPUSH
73442: CALL_OW 67
// ToLua ( displayTroll(); ) ;
73446: LD_STRING displayTroll();
73448: PPUSH
73449: CALL_OW 559
// wait ( 1 1$00 ) ;
73453: LD_INT 2100
73455: PPUSH
73456: CALL_OW 67
// ToLua ( hideTroll(); ) ;
73460: LD_STRING hideTroll();
73462: PPUSH
73463: CALL_OW 559
// end ;
73467: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
73468: LD_EXP 47
73472: IFFALSE 73480
73474: PUSH
73475: LD_EXP 73
73479: AND
73480: IFFALSE 73543
73482: GO 73484
73484: DISABLE
73485: LD_INT 0
73487: PPUSH
// begin p := 0 ;
73488: LD_ADDR_VAR 0 1
73492: PUSH
73493: LD_INT 0
73495: ST_TO_ADDR
// repeat game_speed := 1 ;
73496: LD_ADDR_OWVAR 65
73500: PUSH
73501: LD_INT 1
73503: ST_TO_ADDR
// wait ( 0 0$1 ) ;
73504: LD_INT 35
73506: PPUSH
73507: CALL_OW 67
// p := p + 1 ;
73511: LD_ADDR_VAR 0 1
73515: PUSH
73516: LD_VAR 0 1
73520: PUSH
73521: LD_INT 1
73523: PLUS
73524: ST_TO_ADDR
// until p >= 60 ;
73525: LD_VAR 0 1
73529: PUSH
73530: LD_INT 60
73532: GREATEREQUAL
73533: IFFALSE 73496
// game_speed := 4 ;
73535: LD_ADDR_OWVAR 65
73539: PUSH
73540: LD_INT 4
73542: ST_TO_ADDR
// end ;
73543: PPOPN 1
73545: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
73546: LD_EXP 47
73550: IFFALSE 73558
73552: PUSH
73553: LD_EXP 74
73557: AND
73558: IFFALSE 73704
73560: GO 73562
73562: DISABLE
73563: LD_INT 0
73565: PPUSH
73566: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73567: LD_ADDR_VAR 0 1
73571: PUSH
73572: LD_INT 22
73574: PUSH
73575: LD_OWVAR 2
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 2
73586: PUSH
73587: LD_INT 30
73589: PUSH
73590: LD_INT 0
73592: PUSH
73593: EMPTY
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 30
73599: PUSH
73600: LD_INT 1
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: LIST
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PPUSH
73616: CALL_OW 69
73620: ST_TO_ADDR
// if not depot then
73621: LD_VAR 0 1
73625: NOT
73626: IFFALSE 73630
// exit ;
73628: GO 73704
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
73630: LD_ADDR_VAR 0 2
73634: PUSH
73635: LD_VAR 0 1
73639: PUSH
73640: LD_INT 1
73642: PPUSH
73643: LD_VAR 0 1
73647: PPUSH
73648: CALL_OW 12
73652: ARRAY
73653: PPUSH
73654: CALL_OW 274
73658: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
73659: LD_VAR 0 2
73663: PPUSH
73664: LD_INT 1
73666: PPUSH
73667: LD_INT 0
73669: PPUSH
73670: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
73674: LD_VAR 0 2
73678: PPUSH
73679: LD_INT 2
73681: PPUSH
73682: LD_INT 0
73684: PPUSH
73685: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
73689: LD_VAR 0 2
73693: PPUSH
73694: LD_INT 3
73696: PPUSH
73697: LD_INT 0
73699: PPUSH
73700: CALL_OW 277
// end ;
73704: PPOPN 2
73706: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
73707: LD_EXP 47
73711: IFFALSE 73719
73713: PUSH
73714: LD_EXP 75
73718: AND
73719: IFFALSE 73816
73721: GO 73723
73723: DISABLE
73724: LD_INT 0
73726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73727: LD_ADDR_VAR 0 1
73731: PUSH
73732: LD_INT 22
73734: PUSH
73735: LD_OWVAR 2
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 21
73746: PUSH
73747: LD_INT 1
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 3
73756: PUSH
73757: LD_INT 23
73759: PUSH
73760: LD_INT 0
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: LIST
73775: PPUSH
73776: CALL_OW 69
73780: ST_TO_ADDR
// if not tmp then
73781: LD_VAR 0 1
73785: NOT
73786: IFFALSE 73790
// exit ;
73788: GO 73816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73790: LD_VAR 0 1
73794: PUSH
73795: LD_INT 1
73797: PPUSH
73798: LD_VAR 0 1
73802: PPUSH
73803: CALL_OW 12
73807: ARRAY
73808: PPUSH
73809: LD_INT 200
73811: PPUSH
73812: CALL_OW 234
// end ;
73816: PPOPN 1
73818: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73819: LD_EXP 47
73823: IFFALSE 73831
73825: PUSH
73826: LD_EXP 76
73830: AND
73831: IFFALSE 73910
73833: GO 73835
73835: DISABLE
73836: LD_INT 0
73838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73839: LD_ADDR_VAR 0 1
73843: PUSH
73844: LD_INT 22
73846: PUSH
73847: LD_OWVAR 2
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 21
73858: PUSH
73859: LD_INT 2
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PPUSH
73870: CALL_OW 69
73874: ST_TO_ADDR
// if not tmp then
73875: LD_VAR 0 1
73879: NOT
73880: IFFALSE 73884
// exit ;
73882: GO 73910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73884: LD_VAR 0 1
73888: PUSH
73889: LD_INT 1
73891: PPUSH
73892: LD_VAR 0 1
73896: PPUSH
73897: CALL_OW 12
73901: ARRAY
73902: PPUSH
73903: LD_INT 60
73905: PPUSH
73906: CALL_OW 234
// end ;
73910: PPOPN 1
73912: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73913: LD_EXP 47
73917: IFFALSE 73925
73919: PUSH
73920: LD_EXP 77
73924: AND
73925: IFFALSE 74024
73927: GO 73929
73929: DISABLE
73930: LD_INT 0
73932: PPUSH
73933: PPUSH
// begin enable ;
73934: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73935: LD_ADDR_VAR 0 1
73939: PUSH
73940: LD_INT 22
73942: PUSH
73943: LD_OWVAR 2
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_INT 61
73954: PUSH
73955: EMPTY
73956: LIST
73957: PUSH
73958: LD_INT 33
73960: PUSH
73961: LD_INT 2
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: LIST
73972: PPUSH
73973: CALL_OW 69
73977: ST_TO_ADDR
// if not tmp then
73978: LD_VAR 0 1
73982: NOT
73983: IFFALSE 73987
// exit ;
73985: GO 74024
// for i in tmp do
73987: LD_ADDR_VAR 0 2
73991: PUSH
73992: LD_VAR 0 1
73996: PUSH
73997: FOR_IN
73998: IFFALSE 74022
// if IsControledBy ( i ) then
74000: LD_VAR 0 2
74004: PPUSH
74005: CALL_OW 312
74009: IFFALSE 74020
// ComUnlink ( i ) ;
74011: LD_VAR 0 2
74015: PPUSH
74016: CALL_OW 136
74020: GO 73997
74022: POP
74023: POP
// end ;
74024: PPOPN 2
74026: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
74027: LD_EXP 47
74031: IFFALSE 74039
74033: PUSH
74034: LD_EXP 78
74038: AND
74039: IFFALSE 74179
74041: GO 74043
74043: DISABLE
74044: LD_INT 0
74046: PPUSH
74047: PPUSH
// begin ToLua ( displayPowell(); ) ;
74048: LD_STRING displayPowell();
74050: PPUSH
74051: CALL_OW 559
// uc_side := 0 ;
74055: LD_ADDR_OWVAR 20
74059: PUSH
74060: LD_INT 0
74062: ST_TO_ADDR
// uc_nation := 2 ;
74063: LD_ADDR_OWVAR 21
74067: PUSH
74068: LD_INT 2
74070: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
74071: LD_ADDR_OWVAR 37
74075: PUSH
74076: LD_INT 14
74078: ST_TO_ADDR
// vc_engine := engine_siberite ;
74079: LD_ADDR_OWVAR 39
74083: PUSH
74084: LD_INT 3
74086: ST_TO_ADDR
// vc_control := control_apeman ;
74087: LD_ADDR_OWVAR 38
74091: PUSH
74092: LD_INT 5
74094: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
74095: LD_ADDR_OWVAR 40
74099: PUSH
74100: LD_INT 29
74102: ST_TO_ADDR
// un := CreateVehicle ;
74103: LD_ADDR_VAR 0 2
74107: PUSH
74108: CALL_OW 45
74112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74113: LD_VAR 0 2
74117: PPUSH
74118: LD_INT 1
74120: PPUSH
74121: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74125: LD_INT 35
74127: PPUSH
74128: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74132: LD_VAR 0 2
74136: PPUSH
74137: LD_INT 22
74139: PUSH
74140: LD_OWVAR 2
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PPUSH
74149: CALL_OW 69
74153: PPUSH
74154: LD_VAR 0 2
74158: PPUSH
74159: CALL_OW 74
74163: PPUSH
74164: CALL_OW 115
// until IsDead ( un ) ;
74168: LD_VAR 0 2
74172: PPUSH
74173: CALL_OW 301
74177: IFFALSE 74125
// end ;
74179: PPOPN 2
74181: END
// every 0 0$1 trigger StreamModeActive and sStu do
74182: LD_EXP 47
74186: IFFALSE 74194
74188: PUSH
74189: LD_EXP 86
74193: AND
74194: IFFALSE 74210
74196: GO 74198
74198: DISABLE
// begin ToLua ( displayStucuk(); ) ;
74199: LD_STRING displayStucuk();
74201: PPUSH
74202: CALL_OW 559
// ResetFog ;
74206: CALL_OW 335
// end ;
74210: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
74211: LD_EXP 47
74215: IFFALSE 74223
74217: PUSH
74218: LD_EXP 79
74222: AND
74223: IFFALSE 74364
74225: GO 74227
74227: DISABLE
74228: LD_INT 0
74230: PPUSH
74231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74232: LD_ADDR_VAR 0 2
74236: PUSH
74237: LD_INT 22
74239: PUSH
74240: LD_OWVAR 2
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 21
74251: PUSH
74252: LD_INT 1
74254: PUSH
74255: EMPTY
74256: LIST
74257: LIST
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PPUSH
74263: CALL_OW 69
74267: ST_TO_ADDR
// if not tmp then
74268: LD_VAR 0 2
74272: NOT
74273: IFFALSE 74277
// exit ;
74275: GO 74364
// un := tmp [ rand ( 1 , tmp ) ] ;
74277: LD_ADDR_VAR 0 1
74281: PUSH
74282: LD_VAR 0 2
74286: PUSH
74287: LD_INT 1
74289: PPUSH
74290: LD_VAR 0 2
74294: PPUSH
74295: CALL_OW 12
74299: ARRAY
74300: ST_TO_ADDR
// SetSide ( un , 0 ) ;
74301: LD_VAR 0 1
74305: PPUSH
74306: LD_INT 0
74308: PPUSH
74309: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
74313: LD_VAR 0 1
74317: PPUSH
74318: LD_OWVAR 3
74322: PUSH
74323: LD_VAR 0 1
74327: DIFF
74328: PPUSH
74329: LD_VAR 0 1
74333: PPUSH
74334: CALL_OW 74
74338: PPUSH
74339: CALL_OW 115
// wait ( 0 0$20 ) ;
74343: LD_INT 700
74345: PPUSH
74346: CALL_OW 67
// SetSide ( un , your_side ) ;
74350: LD_VAR 0 1
74354: PPUSH
74355: LD_OWVAR 2
74359: PPUSH
74360: CALL_OW 235
// end ;
74364: PPOPN 2
74366: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
74367: LD_EXP 47
74371: IFFALSE 74379
74373: PUSH
74374: LD_EXP 80
74378: AND
74379: IFFALSE 74485
74381: GO 74383
74383: DISABLE
74384: LD_INT 0
74386: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74387: LD_ADDR_VAR 0 1
74391: PUSH
74392: LD_INT 22
74394: PUSH
74395: LD_OWVAR 2
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 2
74406: PUSH
74407: LD_INT 30
74409: PUSH
74410: LD_INT 0
74412: PUSH
74413: EMPTY
74414: LIST
74415: LIST
74416: PUSH
74417: LD_INT 30
74419: PUSH
74420: LD_INT 1
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: LIST
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PPUSH
74436: CALL_OW 69
74440: ST_TO_ADDR
// if not depot then
74441: LD_VAR 0 1
74445: NOT
74446: IFFALSE 74450
// exit ;
74448: GO 74485
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
74450: LD_VAR 0 1
74454: PUSH
74455: LD_INT 1
74457: ARRAY
74458: PPUSH
74459: CALL_OW 250
74463: PPUSH
74464: LD_VAR 0 1
74468: PUSH
74469: LD_INT 1
74471: ARRAY
74472: PPUSH
74473: CALL_OW 251
74477: PPUSH
74478: LD_INT 70
74480: PPUSH
74481: CALL_OW 495
// end ;
74485: PPOPN 1
74487: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
74488: LD_EXP 47
74492: IFFALSE 74500
74494: PUSH
74495: LD_EXP 81
74499: AND
74500: IFFALSE 74711
74502: GO 74504
74504: DISABLE
74505: LD_INT 0
74507: PPUSH
74508: PPUSH
74509: PPUSH
74510: PPUSH
74511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74512: LD_ADDR_VAR 0 5
74516: PUSH
74517: LD_INT 22
74519: PUSH
74520: LD_OWVAR 2
74524: PUSH
74525: EMPTY
74526: LIST
74527: LIST
74528: PUSH
74529: LD_INT 21
74531: PUSH
74532: LD_INT 1
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: EMPTY
74540: LIST
74541: LIST
74542: PPUSH
74543: CALL_OW 69
74547: ST_TO_ADDR
// if not tmp then
74548: LD_VAR 0 5
74552: NOT
74553: IFFALSE 74557
// exit ;
74555: GO 74711
// for i in tmp do
74557: LD_ADDR_VAR 0 1
74561: PUSH
74562: LD_VAR 0 5
74566: PUSH
74567: FOR_IN
74568: IFFALSE 74709
// begin d := rand ( 0 , 5 ) ;
74570: LD_ADDR_VAR 0 4
74574: PUSH
74575: LD_INT 0
74577: PPUSH
74578: LD_INT 5
74580: PPUSH
74581: CALL_OW 12
74585: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
74586: LD_ADDR_VAR 0 2
74590: PUSH
74591: LD_VAR 0 1
74595: PPUSH
74596: CALL_OW 250
74600: PPUSH
74601: LD_VAR 0 4
74605: PPUSH
74606: LD_INT 3
74608: PPUSH
74609: LD_INT 12
74611: PPUSH
74612: CALL_OW 12
74616: PPUSH
74617: CALL_OW 272
74621: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
74622: LD_ADDR_VAR 0 3
74626: PUSH
74627: LD_VAR 0 1
74631: PPUSH
74632: CALL_OW 251
74636: PPUSH
74637: LD_VAR 0 4
74641: PPUSH
74642: LD_INT 3
74644: PPUSH
74645: LD_INT 12
74647: PPUSH
74648: CALL_OW 12
74652: PPUSH
74653: CALL_OW 273
74657: ST_TO_ADDR
// if ValidHex ( x , y ) then
74658: LD_VAR 0 2
74662: PPUSH
74663: LD_VAR 0 3
74667: PPUSH
74668: CALL_OW 488
74672: IFFALSE 74707
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
74674: LD_VAR 0 1
74678: PPUSH
74679: LD_VAR 0 2
74683: PPUSH
74684: LD_VAR 0 3
74688: PPUSH
74689: LD_INT 3
74691: PPUSH
74692: LD_INT 6
74694: PPUSH
74695: CALL_OW 12
74699: PPUSH
74700: LD_INT 1
74702: PPUSH
74703: CALL_OW 483
// end ;
74707: GO 74567
74709: POP
74710: POP
// end ;
74711: PPOPN 5
74713: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
74714: LD_EXP 47
74718: IFFALSE 74726
74720: PUSH
74721: LD_EXP 82
74725: AND
74726: IFFALSE 74820
74728: GO 74730
74730: DISABLE
74731: LD_INT 0
74733: PPUSH
74734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
74735: LD_ADDR_VAR 0 2
74739: PUSH
74740: LD_INT 22
74742: PUSH
74743: LD_OWVAR 2
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: PUSH
74752: LD_INT 32
74754: PUSH
74755: LD_INT 1
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: PUSH
74762: LD_INT 21
74764: PUSH
74765: LD_INT 2
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: LIST
74776: PPUSH
74777: CALL_OW 69
74781: ST_TO_ADDR
// if not tmp then
74782: LD_VAR 0 2
74786: NOT
74787: IFFALSE 74791
// exit ;
74789: GO 74820
// for i in tmp do
74791: LD_ADDR_VAR 0 1
74795: PUSH
74796: LD_VAR 0 2
74800: PUSH
74801: FOR_IN
74802: IFFALSE 74818
// SetFuel ( i , 0 ) ;
74804: LD_VAR 0 1
74808: PPUSH
74809: LD_INT 0
74811: PPUSH
74812: CALL_OW 240
74816: GO 74801
74818: POP
74819: POP
// end ;
74820: PPOPN 2
74822: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74823: LD_EXP 47
74827: IFFALSE 74835
74829: PUSH
74830: LD_EXP 83
74834: AND
74835: IFFALSE 74901
74837: GO 74839
74839: DISABLE
74840: LD_INT 0
74842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74843: LD_ADDR_VAR 0 1
74847: PUSH
74848: LD_INT 22
74850: PUSH
74851: LD_OWVAR 2
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 30
74862: PUSH
74863: LD_INT 29
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: EMPTY
74871: LIST
74872: LIST
74873: PPUSH
74874: CALL_OW 69
74878: ST_TO_ADDR
// if not tmp then
74879: LD_VAR 0 1
74883: NOT
74884: IFFALSE 74888
// exit ;
74886: GO 74901
// DestroyUnit ( tmp [ 1 ] ) ;
74888: LD_VAR 0 1
74892: PUSH
74893: LD_INT 1
74895: ARRAY
74896: PPUSH
74897: CALL_OW 65
// end ;
74901: PPOPN 1
74903: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74904: LD_EXP 47
74908: IFFALSE 74916
74910: PUSH
74911: LD_EXP 85
74915: AND
74916: IFFALSE 75045
74918: GO 74920
74920: DISABLE
74921: LD_INT 0
74923: PPUSH
// begin uc_side := 0 ;
74924: LD_ADDR_OWVAR 20
74928: PUSH
74929: LD_INT 0
74931: ST_TO_ADDR
// uc_nation := nation_arabian ;
74932: LD_ADDR_OWVAR 21
74936: PUSH
74937: LD_INT 2
74939: ST_TO_ADDR
// hc_gallery :=  ;
74940: LD_ADDR_OWVAR 33
74944: PUSH
74945: LD_STRING 
74947: ST_TO_ADDR
// hc_name :=  ;
74948: LD_ADDR_OWVAR 26
74952: PUSH
74953: LD_STRING 
74955: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74956: LD_INT 1
74958: PPUSH
74959: LD_INT 11
74961: PPUSH
74962: LD_INT 10
74964: PPUSH
74965: CALL_OW 380
// un := CreateHuman ;
74969: LD_ADDR_VAR 0 1
74973: PUSH
74974: CALL_OW 44
74978: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74979: LD_VAR 0 1
74983: PPUSH
74984: LD_INT 1
74986: PPUSH
74987: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74991: LD_INT 35
74993: PPUSH
74994: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74998: LD_VAR 0 1
75002: PPUSH
75003: LD_INT 22
75005: PUSH
75006: LD_OWVAR 2
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PPUSH
75015: CALL_OW 69
75019: PPUSH
75020: LD_VAR 0 1
75024: PPUSH
75025: CALL_OW 74
75029: PPUSH
75030: CALL_OW 115
// until IsDead ( un ) ;
75034: LD_VAR 0 1
75038: PPUSH
75039: CALL_OW 301
75043: IFFALSE 74991
// end ;
75045: PPOPN 1
75047: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
75048: LD_EXP 47
75052: IFFALSE 75060
75054: PUSH
75055: LD_EXP 87
75059: AND
75060: IFFALSE 75072
75062: GO 75064
75064: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
75065: LD_STRING earthquake(getX(game), 0, 32)
75067: PPUSH
75068: CALL_OW 559
75072: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
75073: LD_EXP 47
75077: IFFALSE 75085
75079: PUSH
75080: LD_EXP 88
75084: AND
75085: IFFALSE 75176
75087: GO 75089
75089: DISABLE
75090: LD_INT 0
75092: PPUSH
// begin enable ;
75093: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
75094: LD_ADDR_VAR 0 1
75098: PUSH
75099: LD_INT 22
75101: PUSH
75102: LD_OWVAR 2
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: PUSH
75111: LD_INT 21
75113: PUSH
75114: LD_INT 2
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: PUSH
75121: LD_INT 33
75123: PUSH
75124: LD_INT 3
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: LIST
75135: PPUSH
75136: CALL_OW 69
75140: ST_TO_ADDR
// if not tmp then
75141: LD_VAR 0 1
75145: NOT
75146: IFFALSE 75150
// exit ;
75148: GO 75176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75150: LD_VAR 0 1
75154: PUSH
75155: LD_INT 1
75157: PPUSH
75158: LD_VAR 0 1
75162: PPUSH
75163: CALL_OW 12
75167: ARRAY
75168: PPUSH
75169: LD_INT 1
75171: PPUSH
75172: CALL_OW 234
// end ;
75176: PPOPN 1
75178: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
75179: LD_EXP 47
75183: IFFALSE 75191
75185: PUSH
75186: LD_EXP 89
75190: AND
75191: IFFALSE 75332
75193: GO 75195
75195: DISABLE
75196: LD_INT 0
75198: PPUSH
75199: PPUSH
75200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75201: LD_ADDR_VAR 0 3
75205: PUSH
75206: LD_INT 22
75208: PUSH
75209: LD_OWVAR 2
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: PUSH
75218: LD_INT 25
75220: PUSH
75221: LD_INT 1
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PPUSH
75232: CALL_OW 69
75236: ST_TO_ADDR
// if not tmp then
75237: LD_VAR 0 3
75241: NOT
75242: IFFALSE 75246
// exit ;
75244: GO 75332
// un := tmp [ rand ( 1 , tmp ) ] ;
75246: LD_ADDR_VAR 0 2
75250: PUSH
75251: LD_VAR 0 3
75255: PUSH
75256: LD_INT 1
75258: PPUSH
75259: LD_VAR 0 3
75263: PPUSH
75264: CALL_OW 12
75268: ARRAY
75269: ST_TO_ADDR
// if Crawls ( un ) then
75270: LD_VAR 0 2
75274: PPUSH
75275: CALL_OW 318
75279: IFFALSE 75290
// ComWalk ( un ) ;
75281: LD_VAR 0 2
75285: PPUSH
75286: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
75290: LD_VAR 0 2
75294: PPUSH
75295: LD_INT 9
75297: PPUSH
75298: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
75302: LD_INT 28
75304: PPUSH
75305: LD_OWVAR 2
75309: PPUSH
75310: LD_INT 2
75312: PPUSH
75313: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
75317: LD_INT 29
75319: PPUSH
75320: LD_OWVAR 2
75324: PPUSH
75325: LD_INT 2
75327: PPUSH
75328: CALL_OW 322
// end ;
75332: PPOPN 3
75334: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
75335: LD_EXP 47
75339: IFFALSE 75347
75341: PUSH
75342: LD_EXP 90
75346: AND
75347: IFFALSE 75458
75349: GO 75351
75351: DISABLE
75352: LD_INT 0
75354: PPUSH
75355: PPUSH
75356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75357: LD_ADDR_VAR 0 3
75361: PUSH
75362: LD_INT 22
75364: PUSH
75365: LD_OWVAR 2
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: LD_INT 25
75376: PUSH
75377: LD_INT 1
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PPUSH
75388: CALL_OW 69
75392: ST_TO_ADDR
// if not tmp then
75393: LD_VAR 0 3
75397: NOT
75398: IFFALSE 75402
// exit ;
75400: GO 75458
// un := tmp [ rand ( 1 , tmp ) ] ;
75402: LD_ADDR_VAR 0 2
75406: PUSH
75407: LD_VAR 0 3
75411: PUSH
75412: LD_INT 1
75414: PPUSH
75415: LD_VAR 0 3
75419: PPUSH
75420: CALL_OW 12
75424: ARRAY
75425: ST_TO_ADDR
// if Crawls ( un ) then
75426: LD_VAR 0 2
75430: PPUSH
75431: CALL_OW 318
75435: IFFALSE 75446
// ComWalk ( un ) ;
75437: LD_VAR 0 2
75441: PPUSH
75442: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75446: LD_VAR 0 2
75450: PPUSH
75451: LD_INT 8
75453: PPUSH
75454: CALL_OW 336
// end ;
75458: PPOPN 3
75460: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
75461: LD_EXP 47
75465: IFFALSE 75473
75467: PUSH
75468: LD_EXP 91
75472: AND
75473: IFFALSE 75617
75475: GO 75477
75477: DISABLE
75478: LD_INT 0
75480: PPUSH
75481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
75482: LD_ADDR_VAR 0 2
75486: PUSH
75487: LD_INT 22
75489: PUSH
75490: LD_OWVAR 2
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PUSH
75499: LD_INT 21
75501: PUSH
75502: LD_INT 2
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PUSH
75509: LD_INT 2
75511: PUSH
75512: LD_INT 34
75514: PUSH
75515: LD_INT 12
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 34
75524: PUSH
75525: LD_INT 51
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PUSH
75532: LD_INT 34
75534: PUSH
75535: LD_INT 32
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: LIST
75552: PPUSH
75553: CALL_OW 69
75557: ST_TO_ADDR
// if not tmp then
75558: LD_VAR 0 2
75562: NOT
75563: IFFALSE 75567
// exit ;
75565: GO 75617
// for i in tmp do
75567: LD_ADDR_VAR 0 1
75571: PUSH
75572: LD_VAR 0 2
75576: PUSH
75577: FOR_IN
75578: IFFALSE 75615
// if GetCargo ( i , mat_artifact ) = 0 then
75580: LD_VAR 0 1
75584: PPUSH
75585: LD_INT 4
75587: PPUSH
75588: CALL_OW 289
75592: PUSH
75593: LD_INT 0
75595: EQUAL
75596: IFFALSE 75613
// SetCargo ( i , mat_siberit , 100 ) ;
75598: LD_VAR 0 1
75602: PPUSH
75603: LD_INT 3
75605: PPUSH
75606: LD_INT 100
75608: PPUSH
75609: CALL_OW 290
75613: GO 75577
75615: POP
75616: POP
// end ;
75617: PPOPN 2
75619: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
75620: LD_EXP 47
75624: IFFALSE 75632
75626: PUSH
75627: LD_EXP 92
75631: AND
75632: IFFALSE 75815
75634: GO 75636
75636: DISABLE
75637: LD_INT 0
75639: PPUSH
75640: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75641: LD_ADDR_VAR 0 2
75645: PUSH
75646: LD_INT 22
75648: PUSH
75649: LD_OWVAR 2
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PPUSH
75658: CALL_OW 69
75662: ST_TO_ADDR
// if not tmp then
75663: LD_VAR 0 2
75667: NOT
75668: IFFALSE 75672
// exit ;
75670: GO 75815
// for i := 1 to 2 do
75672: LD_ADDR_VAR 0 1
75676: PUSH
75677: DOUBLE
75678: LD_INT 1
75680: DEC
75681: ST_TO_ADDR
75682: LD_INT 2
75684: PUSH
75685: FOR_TO
75686: IFFALSE 75813
// begin uc_side := your_side ;
75688: LD_ADDR_OWVAR 20
75692: PUSH
75693: LD_OWVAR 2
75697: ST_TO_ADDR
// uc_nation := nation_american ;
75698: LD_ADDR_OWVAR 21
75702: PUSH
75703: LD_INT 1
75705: ST_TO_ADDR
// vc_chassis := us_morphling ;
75706: LD_ADDR_OWVAR 37
75710: PUSH
75711: LD_INT 5
75713: ST_TO_ADDR
// vc_engine := engine_siberite ;
75714: LD_ADDR_OWVAR 39
75718: PUSH
75719: LD_INT 3
75721: ST_TO_ADDR
// vc_control := control_computer ;
75722: LD_ADDR_OWVAR 38
75726: PUSH
75727: LD_INT 3
75729: ST_TO_ADDR
// vc_weapon := us_double_laser ;
75730: LD_ADDR_OWVAR 40
75734: PUSH
75735: LD_INT 10
75737: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
75738: LD_VAR 0 2
75742: PUSH
75743: LD_INT 1
75745: ARRAY
75746: PPUSH
75747: CALL_OW 310
75751: NOT
75752: IFFALSE 75799
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
75754: CALL_OW 45
75758: PPUSH
75759: LD_VAR 0 2
75763: PUSH
75764: LD_INT 1
75766: ARRAY
75767: PPUSH
75768: CALL_OW 250
75772: PPUSH
75773: LD_VAR 0 2
75777: PUSH
75778: LD_INT 1
75780: ARRAY
75781: PPUSH
75782: CALL_OW 251
75786: PPUSH
75787: LD_INT 12
75789: PPUSH
75790: LD_INT 1
75792: PPUSH
75793: CALL_OW 50
75797: GO 75811
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75799: CALL_OW 45
75803: PPUSH
75804: LD_INT 1
75806: PPUSH
75807: CALL_OW 51
// end ;
75811: GO 75685
75813: POP
75814: POP
// end ;
75815: PPOPN 2
75817: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75818: LD_EXP 47
75822: IFFALSE 75830
75824: PUSH
75825: LD_EXP 93
75829: AND
75830: IFFALSE 76052
75832: GO 75834
75834: DISABLE
75835: LD_INT 0
75837: PPUSH
75838: PPUSH
75839: PPUSH
75840: PPUSH
75841: PPUSH
75842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75843: LD_ADDR_VAR 0 6
75847: PUSH
75848: LD_INT 22
75850: PUSH
75851: LD_OWVAR 2
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: PUSH
75860: LD_INT 21
75862: PUSH
75863: LD_INT 1
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: PUSH
75870: LD_INT 3
75872: PUSH
75873: LD_INT 23
75875: PUSH
75876: LD_INT 0
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: LIST
75891: PPUSH
75892: CALL_OW 69
75896: ST_TO_ADDR
// if not tmp then
75897: LD_VAR 0 6
75901: NOT
75902: IFFALSE 75906
// exit ;
75904: GO 76052
// s1 := rand ( 1 , 4 ) ;
75906: LD_ADDR_VAR 0 2
75910: PUSH
75911: LD_INT 1
75913: PPUSH
75914: LD_INT 4
75916: PPUSH
75917: CALL_OW 12
75921: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75922: LD_ADDR_VAR 0 4
75926: PUSH
75927: LD_VAR 0 6
75931: PUSH
75932: LD_INT 1
75934: ARRAY
75935: PPUSH
75936: LD_VAR 0 2
75940: PPUSH
75941: CALL_OW 259
75945: ST_TO_ADDR
// if s1 = 1 then
75946: LD_VAR 0 2
75950: PUSH
75951: LD_INT 1
75953: EQUAL
75954: IFFALSE 75974
// s2 := rand ( 2 , 4 ) else
75956: LD_ADDR_VAR 0 3
75960: PUSH
75961: LD_INT 2
75963: PPUSH
75964: LD_INT 4
75966: PPUSH
75967: CALL_OW 12
75971: ST_TO_ADDR
75972: GO 75982
// s2 := 1 ;
75974: LD_ADDR_VAR 0 3
75978: PUSH
75979: LD_INT 1
75981: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75982: LD_ADDR_VAR 0 5
75986: PUSH
75987: LD_VAR 0 6
75991: PUSH
75992: LD_INT 1
75994: ARRAY
75995: PPUSH
75996: LD_VAR 0 3
76000: PPUSH
76001: CALL_OW 259
76005: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
76006: LD_VAR 0 6
76010: PUSH
76011: LD_INT 1
76013: ARRAY
76014: PPUSH
76015: LD_VAR 0 2
76019: PPUSH
76020: LD_VAR 0 5
76024: PPUSH
76025: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
76029: LD_VAR 0 6
76033: PUSH
76034: LD_INT 1
76036: ARRAY
76037: PPUSH
76038: LD_VAR 0 3
76042: PPUSH
76043: LD_VAR 0 4
76047: PPUSH
76048: CALL_OW 237
// end ;
76052: PPOPN 6
76054: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
76055: LD_EXP 47
76059: IFFALSE 76067
76061: PUSH
76062: LD_EXP 94
76066: AND
76067: IFFALSE 76146
76069: GO 76071
76071: DISABLE
76072: LD_INT 0
76074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
76075: LD_ADDR_VAR 0 1
76079: PUSH
76080: LD_INT 22
76082: PUSH
76083: LD_OWVAR 2
76087: PUSH
76088: EMPTY
76089: LIST
76090: LIST
76091: PUSH
76092: LD_INT 30
76094: PUSH
76095: LD_INT 3
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PPUSH
76106: CALL_OW 69
76110: ST_TO_ADDR
// if not tmp then
76111: LD_VAR 0 1
76115: NOT
76116: IFFALSE 76120
// exit ;
76118: GO 76146
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76120: LD_VAR 0 1
76124: PUSH
76125: LD_INT 1
76127: PPUSH
76128: LD_VAR 0 1
76132: PPUSH
76133: CALL_OW 12
76137: ARRAY
76138: PPUSH
76139: LD_INT 1
76141: PPUSH
76142: CALL_OW 234
// end ;
76146: PPOPN 1
76148: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
76149: LD_EXP 47
76153: IFFALSE 76161
76155: PUSH
76156: LD_EXP 95
76160: AND
76161: IFFALSE 76273
76163: GO 76165
76165: DISABLE
76166: LD_INT 0
76168: PPUSH
76169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
76170: LD_ADDR_VAR 0 2
76174: PUSH
76175: LD_INT 22
76177: PUSH
76178: LD_OWVAR 2
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: PUSH
76187: LD_INT 2
76189: PUSH
76190: LD_INT 30
76192: PUSH
76193: LD_INT 27
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: LD_INT 30
76202: PUSH
76203: LD_INT 26
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PUSH
76210: LD_INT 30
76212: PUSH
76213: LD_INT 28
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PPUSH
76230: CALL_OW 69
76234: ST_TO_ADDR
// if not tmp then
76235: LD_VAR 0 2
76239: NOT
76240: IFFALSE 76244
// exit ;
76242: GO 76273
// for i in tmp do
76244: LD_ADDR_VAR 0 1
76248: PUSH
76249: LD_VAR 0 2
76253: PUSH
76254: FOR_IN
76255: IFFALSE 76271
// SetLives ( i , 1 ) ;
76257: LD_VAR 0 1
76261: PPUSH
76262: LD_INT 1
76264: PPUSH
76265: CALL_OW 234
76269: GO 76254
76271: POP
76272: POP
// end ;
76273: PPOPN 2
76275: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
76276: LD_EXP 47
76280: IFFALSE 76288
76282: PUSH
76283: LD_EXP 96
76287: AND
76288: IFFALSE 76575
76290: GO 76292
76292: DISABLE
76293: LD_INT 0
76295: PPUSH
76296: PPUSH
76297: PPUSH
// begin i := rand ( 1 , 7 ) ;
76298: LD_ADDR_VAR 0 1
76302: PUSH
76303: LD_INT 1
76305: PPUSH
76306: LD_INT 7
76308: PPUSH
76309: CALL_OW 12
76313: ST_TO_ADDR
// case i of 1 :
76314: LD_VAR 0 1
76318: PUSH
76319: LD_INT 1
76321: DOUBLE
76322: EQUAL
76323: IFTRUE 76327
76325: GO 76337
76327: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
76328: LD_STRING earthquake(getX(game), 0, 32)
76330: PPUSH
76331: CALL_OW 559
76335: GO 76575
76337: LD_INT 2
76339: DOUBLE
76340: EQUAL
76341: IFTRUE 76345
76343: GO 76359
76345: POP
// begin ToLua ( displayStucuk(); ) ;
76346: LD_STRING displayStucuk();
76348: PPUSH
76349: CALL_OW 559
// ResetFog ;
76353: CALL_OW 335
// end ; 3 :
76357: GO 76575
76359: LD_INT 3
76361: DOUBLE
76362: EQUAL
76363: IFTRUE 76367
76365: GO 76471
76367: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76368: LD_ADDR_VAR 0 2
76372: PUSH
76373: LD_INT 22
76375: PUSH
76376: LD_OWVAR 2
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: LD_INT 25
76387: PUSH
76388: LD_INT 1
76390: PUSH
76391: EMPTY
76392: LIST
76393: LIST
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PPUSH
76399: CALL_OW 69
76403: ST_TO_ADDR
// if not tmp then
76404: LD_VAR 0 2
76408: NOT
76409: IFFALSE 76413
// exit ;
76411: GO 76575
// un := tmp [ rand ( 1 , tmp ) ] ;
76413: LD_ADDR_VAR 0 3
76417: PUSH
76418: LD_VAR 0 2
76422: PUSH
76423: LD_INT 1
76425: PPUSH
76426: LD_VAR 0 2
76430: PPUSH
76431: CALL_OW 12
76435: ARRAY
76436: ST_TO_ADDR
// if Crawls ( un ) then
76437: LD_VAR 0 3
76441: PPUSH
76442: CALL_OW 318
76446: IFFALSE 76457
// ComWalk ( un ) ;
76448: LD_VAR 0 3
76452: PPUSH
76453: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76457: LD_VAR 0 3
76461: PPUSH
76462: LD_INT 8
76464: PPUSH
76465: CALL_OW 336
// end ; 4 :
76469: GO 76575
76471: LD_INT 4
76473: DOUBLE
76474: EQUAL
76475: IFTRUE 76479
76477: GO 76553
76479: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76480: LD_ADDR_VAR 0 2
76484: PUSH
76485: LD_INT 22
76487: PUSH
76488: LD_OWVAR 2
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: PUSH
76497: LD_INT 30
76499: PUSH
76500: LD_INT 29
76502: PUSH
76503: EMPTY
76504: LIST
76505: LIST
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PPUSH
76511: CALL_OW 69
76515: ST_TO_ADDR
// if not tmp then
76516: LD_VAR 0 2
76520: NOT
76521: IFFALSE 76525
// exit ;
76523: GO 76575
// CenterNowOnUnits ( tmp [ 1 ] ) ;
76525: LD_VAR 0 2
76529: PUSH
76530: LD_INT 1
76532: ARRAY
76533: PPUSH
76534: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
76538: LD_VAR 0 2
76542: PUSH
76543: LD_INT 1
76545: ARRAY
76546: PPUSH
76547: CALL_OW 65
// end ; 5 .. 7 :
76551: GO 76575
76553: LD_INT 5
76555: DOUBLE
76556: GREATEREQUAL
76557: IFFALSE 76565
76559: LD_INT 7
76561: DOUBLE
76562: LESSEQUAL
76563: IFTRUE 76567
76565: GO 76574
76567: POP
// StreamSibBomb ; end ;
76568: CALL 72756 0 0
76572: GO 76575
76574: POP
// end ;
76575: PPOPN 3
76577: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
76578: LD_EXP 47
76582: IFFALSE 76590
76584: PUSH
76585: LD_EXP 97
76589: AND
76590: IFFALSE 76746
76592: GO 76594
76594: DISABLE
76595: LD_INT 0
76597: PPUSH
76598: PPUSH
76599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
76600: LD_ADDR_VAR 0 2
76604: PUSH
76605: LD_INT 81
76607: PUSH
76608: LD_OWVAR 2
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PUSH
76617: LD_INT 2
76619: PUSH
76620: LD_INT 21
76622: PUSH
76623: LD_INT 1
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PUSH
76630: LD_INT 21
76632: PUSH
76633: LD_INT 2
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: LIST
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PPUSH
76649: CALL_OW 69
76653: ST_TO_ADDR
// if not tmp then
76654: LD_VAR 0 2
76658: NOT
76659: IFFALSE 76663
// exit ;
76661: GO 76746
// p := 0 ;
76663: LD_ADDR_VAR 0 3
76667: PUSH
76668: LD_INT 0
76670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76671: LD_INT 35
76673: PPUSH
76674: CALL_OW 67
// p := p + 1 ;
76678: LD_ADDR_VAR 0 3
76682: PUSH
76683: LD_VAR 0 3
76687: PUSH
76688: LD_INT 1
76690: PLUS
76691: ST_TO_ADDR
// for i in tmp do
76692: LD_ADDR_VAR 0 1
76696: PUSH
76697: LD_VAR 0 2
76701: PUSH
76702: FOR_IN
76703: IFFALSE 76734
// if GetLives ( i ) < 1000 then
76705: LD_VAR 0 1
76709: PPUSH
76710: CALL_OW 256
76714: PUSH
76715: LD_INT 1000
76717: LESS
76718: IFFALSE 76732
// SetLives ( i , 1000 ) ;
76720: LD_VAR 0 1
76724: PPUSH
76725: LD_INT 1000
76727: PPUSH
76728: CALL_OW 234
76732: GO 76702
76734: POP
76735: POP
// until p > 20 ;
76736: LD_VAR 0 3
76740: PUSH
76741: LD_INT 20
76743: GREATER
76744: IFFALSE 76671
// end ;
76746: PPOPN 3
76748: END
// every 0 0$1 trigger StreamModeActive and sTime do
76749: LD_EXP 47
76753: IFFALSE 76761
76755: PUSH
76756: LD_EXP 98
76760: AND
76761: IFFALSE 76796
76763: GO 76765
76765: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
76766: LD_INT 28
76768: PPUSH
76769: LD_OWVAR 2
76773: PPUSH
76774: LD_INT 2
76776: PPUSH
76777: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76781: LD_INT 30
76783: PPUSH
76784: LD_OWVAR 2
76788: PPUSH
76789: LD_INT 2
76791: PPUSH
76792: CALL_OW 322
// end ;
76796: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76797: LD_EXP 47
76801: IFFALSE 76809
76803: PUSH
76804: LD_EXP 99
76808: AND
76809: IFFALSE 76930
76811: GO 76813
76813: DISABLE
76814: LD_INT 0
76816: PPUSH
76817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76818: LD_ADDR_VAR 0 2
76822: PUSH
76823: LD_INT 22
76825: PUSH
76826: LD_OWVAR 2
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: LD_INT 21
76837: PUSH
76838: LD_INT 1
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 3
76847: PUSH
76848: LD_INT 23
76850: PUSH
76851: LD_INT 0
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: PPUSH
76867: CALL_OW 69
76871: ST_TO_ADDR
// if not tmp then
76872: LD_VAR 0 2
76876: NOT
76877: IFFALSE 76881
// exit ;
76879: GO 76930
// for i in tmp do
76881: LD_ADDR_VAR 0 1
76885: PUSH
76886: LD_VAR 0 2
76890: PUSH
76891: FOR_IN
76892: IFFALSE 76928
// begin if Crawls ( i ) then
76894: LD_VAR 0 1
76898: PPUSH
76899: CALL_OW 318
76903: IFFALSE 76914
// ComWalk ( i ) ;
76905: LD_VAR 0 1
76909: PPUSH
76910: CALL_OW 138
// SetClass ( i , 2 ) ;
76914: LD_VAR 0 1
76918: PPUSH
76919: LD_INT 2
76921: PPUSH
76922: CALL_OW 336
// end ;
76926: GO 76891
76928: POP
76929: POP
// end ;
76930: PPOPN 2
76932: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76933: LD_EXP 47
76937: IFFALSE 76945
76939: PUSH
76940: LD_EXP 100
76944: AND
76945: IFFALSE 77235
76947: GO 76949
76949: DISABLE
76950: LD_INT 0
76952: PPUSH
76953: PPUSH
76954: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76955: LD_OWVAR 2
76959: PPUSH
76960: LD_INT 9
76962: PPUSH
76963: LD_INT 1
76965: PPUSH
76966: LD_INT 1
76968: PPUSH
76969: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76973: LD_INT 9
76975: PPUSH
76976: LD_OWVAR 2
76980: PPUSH
76981: CALL_OW 343
// uc_side := 9 ;
76985: LD_ADDR_OWVAR 20
76989: PUSH
76990: LD_INT 9
76992: ST_TO_ADDR
// uc_nation := 2 ;
76993: LD_ADDR_OWVAR 21
76997: PUSH
76998: LD_INT 2
77000: ST_TO_ADDR
// hc_name := Dark Warrior ;
77001: LD_ADDR_OWVAR 26
77005: PUSH
77006: LD_STRING Dark Warrior
77008: ST_TO_ADDR
// hc_gallery :=  ;
77009: LD_ADDR_OWVAR 33
77013: PUSH
77014: LD_STRING 
77016: ST_TO_ADDR
// hc_noskilllimit := true ;
77017: LD_ADDR_OWVAR 76
77021: PUSH
77022: LD_INT 1
77024: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
77025: LD_ADDR_OWVAR 31
77029: PUSH
77030: LD_INT 30
77032: PUSH
77033: LD_INT 30
77035: PUSH
77036: LD_INT 30
77038: PUSH
77039: LD_INT 30
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: ST_TO_ADDR
// un := CreateHuman ;
77048: LD_ADDR_VAR 0 3
77052: PUSH
77053: CALL_OW 44
77057: ST_TO_ADDR
// hc_noskilllimit := false ;
77058: LD_ADDR_OWVAR 76
77062: PUSH
77063: LD_INT 0
77065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77066: LD_VAR 0 3
77070: PPUSH
77071: LD_INT 1
77073: PPUSH
77074: CALL_OW 51
// ToLua ( playRanger() ) ;
77078: LD_STRING playRanger()
77080: PPUSH
77081: CALL_OW 559
// p := 0 ;
77085: LD_ADDR_VAR 0 2
77089: PUSH
77090: LD_INT 0
77092: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77093: LD_INT 35
77095: PPUSH
77096: CALL_OW 67
// p := p + 1 ;
77100: LD_ADDR_VAR 0 2
77104: PUSH
77105: LD_VAR 0 2
77109: PUSH
77110: LD_INT 1
77112: PLUS
77113: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
77114: LD_VAR 0 3
77118: PPUSH
77119: CALL_OW 256
77123: PUSH
77124: LD_INT 1000
77126: LESS
77127: IFFALSE 77141
// SetLives ( un , 1000 ) ;
77129: LD_VAR 0 3
77133: PPUSH
77134: LD_INT 1000
77136: PPUSH
77137: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
77141: LD_VAR 0 3
77145: PPUSH
77146: LD_INT 81
77148: PUSH
77149: LD_OWVAR 2
77153: PUSH
77154: EMPTY
77155: LIST
77156: LIST
77157: PUSH
77158: LD_INT 91
77160: PUSH
77161: LD_VAR 0 3
77165: PUSH
77166: LD_INT 30
77168: PUSH
77169: EMPTY
77170: LIST
77171: LIST
77172: LIST
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PPUSH
77178: CALL_OW 69
77182: PPUSH
77183: LD_VAR 0 3
77187: PPUSH
77188: CALL_OW 74
77192: PPUSH
77193: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
77197: LD_VAR 0 2
77201: PUSH
77202: LD_INT 80
77204: GREATER
77205: IFTRUE 77218
77207: PUSH
77208: LD_VAR 0 3
77212: PPUSH
77213: CALL_OW 301
77217: OR
77218: IFFALSE 77093
// if un then
77220: LD_VAR 0 3
77224: IFFALSE 77235
// RemoveUnit ( un ) ;
77226: LD_VAR 0 3
77230: PPUSH
77231: CALL_OW 64
// end ;
77235: PPOPN 3
77237: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
77238: LD_EXP 101
77242: IFFALSE 77358
77244: GO 77246
77246: DISABLE
77247: LD_INT 0
77249: PPUSH
77250: PPUSH
77251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
77252: LD_ADDR_VAR 0 2
77256: PUSH
77257: LD_INT 81
77259: PUSH
77260: LD_OWVAR 2
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: PUSH
77269: LD_INT 21
77271: PUSH
77272: LD_INT 1
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: PPUSH
77283: CALL_OW 69
77287: ST_TO_ADDR
// ToLua ( playComputer() ) ;
77288: LD_STRING playComputer()
77290: PPUSH
77291: CALL_OW 559
// if not tmp then
77295: LD_VAR 0 2
77299: NOT
77300: IFFALSE 77304
// exit ;
77302: GO 77358
// for i in tmp do
77304: LD_ADDR_VAR 0 1
77308: PUSH
77309: LD_VAR 0 2
77313: PUSH
77314: FOR_IN
77315: IFFALSE 77356
// for j := 1 to 4 do
77317: LD_ADDR_VAR 0 3
77321: PUSH
77322: DOUBLE
77323: LD_INT 1
77325: DEC
77326: ST_TO_ADDR
77327: LD_INT 4
77329: PUSH
77330: FOR_TO
77331: IFFALSE 77352
// SetSkill ( i , j , 10 ) ;
77333: LD_VAR 0 1
77337: PPUSH
77338: LD_VAR 0 3
77342: PPUSH
77343: LD_INT 10
77345: PPUSH
77346: CALL_OW 237
77350: GO 77330
77352: POP
77353: POP
77354: GO 77314
77356: POP
77357: POP
// end ;
77358: PPOPN 3
77360: END
// every 0 0$1 trigger s30 do var i , tmp ;
77361: LD_EXP 102
77365: IFFALSE 77434
77367: GO 77369
77369: DISABLE
77370: LD_INT 0
77372: PPUSH
77373: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77374: LD_ADDR_VAR 0 2
77378: PUSH
77379: LD_INT 22
77381: PUSH
77382: LD_OWVAR 2
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: PPUSH
77391: CALL_OW 69
77395: ST_TO_ADDR
// if not tmp then
77396: LD_VAR 0 2
77400: NOT
77401: IFFALSE 77405
// exit ;
77403: GO 77434
// for i in tmp do
77405: LD_ADDR_VAR 0 1
77409: PUSH
77410: LD_VAR 0 2
77414: PUSH
77415: FOR_IN
77416: IFFALSE 77432
// SetLives ( i , 300 ) ;
77418: LD_VAR 0 1
77422: PPUSH
77423: LD_INT 300
77425: PPUSH
77426: CALL_OW 234
77430: GO 77415
77432: POP
77433: POP
// end ;
77434: PPOPN 2
77436: END
// every 0 0$1 trigger s60 do var i , tmp ;
77437: LD_EXP 103
77441: IFFALSE 77510
77443: GO 77445
77445: DISABLE
77446: LD_INT 0
77448: PPUSH
77449: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77450: LD_ADDR_VAR 0 2
77454: PUSH
77455: LD_INT 22
77457: PUSH
77458: LD_OWVAR 2
77462: PUSH
77463: EMPTY
77464: LIST
77465: LIST
77466: PPUSH
77467: CALL_OW 69
77471: ST_TO_ADDR
// if not tmp then
77472: LD_VAR 0 2
77476: NOT
77477: IFFALSE 77481
// exit ;
77479: GO 77510
// for i in tmp do
77481: LD_ADDR_VAR 0 1
77485: PUSH
77486: LD_VAR 0 2
77490: PUSH
77491: FOR_IN
77492: IFFALSE 77508
// SetLives ( i , 600 ) ;
77494: LD_VAR 0 1
77498: PPUSH
77499: LD_INT 600
77501: PPUSH
77502: CALL_OW 234
77506: GO 77491
77508: POP
77509: POP
// end ;
77510: PPOPN 2
77512: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
77513: LD_INT 0
77515: PPUSH
// case cmd of 301 :
77516: LD_VAR 0 1
77520: PUSH
77521: LD_INT 301
77523: DOUBLE
77524: EQUAL
77525: IFTRUE 77529
77527: GO 77561
77529: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
77530: LD_VAR 0 6
77534: PPUSH
77535: LD_VAR 0 7
77539: PPUSH
77540: LD_VAR 0 8
77544: PPUSH
77545: LD_VAR 0 4
77549: PPUSH
77550: LD_VAR 0 5
77554: PPUSH
77555: CALL 78774 0 5
77559: GO 77682
77561: LD_INT 302
77563: DOUBLE
77564: EQUAL
77565: IFTRUE 77569
77567: GO 77606
77569: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
77570: LD_VAR 0 6
77574: PPUSH
77575: LD_VAR 0 7
77579: PPUSH
77580: LD_VAR 0 8
77584: PPUSH
77585: LD_VAR 0 9
77589: PPUSH
77590: LD_VAR 0 4
77594: PPUSH
77595: LD_VAR 0 5
77599: PPUSH
77600: CALL 78865 0 6
77604: GO 77682
77606: LD_INT 303
77608: DOUBLE
77609: EQUAL
77610: IFTRUE 77614
77612: GO 77651
77614: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
77615: LD_VAR 0 6
77619: PPUSH
77620: LD_VAR 0 7
77624: PPUSH
77625: LD_VAR 0 8
77629: PPUSH
77630: LD_VAR 0 9
77634: PPUSH
77635: LD_VAR 0 4
77639: PPUSH
77640: LD_VAR 0 5
77644: PPUSH
77645: CALL 77687 0 6
77649: GO 77682
77651: LD_INT 304
77653: DOUBLE
77654: EQUAL
77655: IFTRUE 77659
77657: GO 77681
77659: POP
// hHackTeleport ( unit , x , y ) ; end ;
77660: LD_VAR 0 2
77664: PPUSH
77665: LD_VAR 0 4
77669: PPUSH
77670: LD_VAR 0 5
77674: PPUSH
77675: CALL 79458 0 3
77679: GO 77682
77681: POP
// end ;
77682: LD_VAR 0 12
77686: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
77687: LD_INT 0
77689: PPUSH
77690: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
77691: LD_VAR 0 1
77695: PUSH
77696: LD_INT 1
77698: LESS
77699: IFTRUE 77711
77701: PUSH
77702: LD_VAR 0 1
77706: PUSH
77707: LD_INT 3
77709: GREATER
77710: OR
77711: IFTRUE 77729
77713: PUSH
77714: LD_VAR 0 5
77718: PPUSH
77719: LD_VAR 0 6
77723: PPUSH
77724: CALL_OW 428
77728: OR
77729: IFFALSE 77733
// exit ;
77731: GO 78461
// uc_side := your_side ;
77733: LD_ADDR_OWVAR 20
77737: PUSH
77738: LD_OWVAR 2
77742: ST_TO_ADDR
// uc_nation := nation ;
77743: LD_ADDR_OWVAR 21
77747: PUSH
77748: LD_VAR 0 1
77752: ST_TO_ADDR
// bc_level = 1 ;
77753: LD_ADDR_OWVAR 43
77757: PUSH
77758: LD_INT 1
77760: ST_TO_ADDR
// case btype of 1 :
77761: LD_VAR 0 2
77765: PUSH
77766: LD_INT 1
77768: DOUBLE
77769: EQUAL
77770: IFTRUE 77774
77772: GO 77785
77774: POP
// bc_type := b_depot ; 2 :
77775: LD_ADDR_OWVAR 42
77779: PUSH
77780: LD_INT 0
77782: ST_TO_ADDR
77783: GO 78405
77785: LD_INT 2
77787: DOUBLE
77788: EQUAL
77789: IFTRUE 77793
77791: GO 77804
77793: POP
// bc_type := b_warehouse ; 3 :
77794: LD_ADDR_OWVAR 42
77798: PUSH
77799: LD_INT 1
77801: ST_TO_ADDR
77802: GO 78405
77804: LD_INT 3
77806: DOUBLE
77807: EQUAL
77808: IFTRUE 77812
77810: GO 77823
77812: POP
// bc_type := b_lab ; 4 .. 9 :
77813: LD_ADDR_OWVAR 42
77817: PUSH
77818: LD_INT 6
77820: ST_TO_ADDR
77821: GO 78405
77823: LD_INT 4
77825: DOUBLE
77826: GREATEREQUAL
77827: IFFALSE 77835
77829: LD_INT 9
77831: DOUBLE
77832: LESSEQUAL
77833: IFTRUE 77837
77835: GO 77897
77837: POP
// begin bc_type := b_lab_half ;
77838: LD_ADDR_OWVAR 42
77842: PUSH
77843: LD_INT 7
77845: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77846: LD_ADDR_OWVAR 44
77850: PUSH
77851: LD_INT 10
77853: PUSH
77854: LD_INT 11
77856: PUSH
77857: LD_INT 12
77859: PUSH
77860: LD_INT 15
77862: PUSH
77863: LD_INT 14
77865: PUSH
77866: LD_INT 13
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: LIST
77875: LIST
77876: PUSH
77877: LD_VAR 0 2
77881: PUSH
77882: LD_INT 3
77884: MINUS
77885: ARRAY
77886: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77887: LD_ADDR_OWVAR 45
77891: PUSH
77892: LD_INT 9
77894: ST_TO_ADDR
// end ; 10 .. 13 :
77895: GO 78405
77897: LD_INT 10
77899: DOUBLE
77900: GREATEREQUAL
77901: IFFALSE 77909
77903: LD_INT 13
77905: DOUBLE
77906: LESSEQUAL
77907: IFTRUE 77911
77909: GO 77988
77911: POP
// begin bc_type := b_lab_full ;
77912: LD_ADDR_OWVAR 42
77916: PUSH
77917: LD_INT 8
77919: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77920: LD_ADDR_OWVAR 44
77924: PUSH
77925: LD_INT 10
77927: PUSH
77928: LD_INT 12
77930: PUSH
77931: LD_INT 14
77933: PUSH
77934: LD_INT 13
77936: PUSH
77937: EMPTY
77938: LIST
77939: LIST
77940: LIST
77941: LIST
77942: PUSH
77943: LD_VAR 0 2
77947: PUSH
77948: LD_INT 9
77950: MINUS
77951: ARRAY
77952: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77953: LD_ADDR_OWVAR 45
77957: PUSH
77958: LD_INT 11
77960: PUSH
77961: LD_INT 15
77963: PUSH
77964: LD_INT 12
77966: PUSH
77967: LD_INT 15
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: PUSH
77976: LD_VAR 0 2
77980: PUSH
77981: LD_INT 9
77983: MINUS
77984: ARRAY
77985: ST_TO_ADDR
// end ; 14 :
77986: GO 78405
77988: LD_INT 14
77990: DOUBLE
77991: EQUAL
77992: IFTRUE 77996
77994: GO 78007
77996: POP
// bc_type := b_workshop ; 15 :
77997: LD_ADDR_OWVAR 42
78001: PUSH
78002: LD_INT 2
78004: ST_TO_ADDR
78005: GO 78405
78007: LD_INT 15
78009: DOUBLE
78010: EQUAL
78011: IFTRUE 78015
78013: GO 78026
78015: POP
// bc_type := b_factory ; 16 :
78016: LD_ADDR_OWVAR 42
78020: PUSH
78021: LD_INT 3
78023: ST_TO_ADDR
78024: GO 78405
78026: LD_INT 16
78028: DOUBLE
78029: EQUAL
78030: IFTRUE 78034
78032: GO 78045
78034: POP
// bc_type := b_ext_gun ; 17 :
78035: LD_ADDR_OWVAR 42
78039: PUSH
78040: LD_INT 17
78042: ST_TO_ADDR
78043: GO 78405
78045: LD_INT 17
78047: DOUBLE
78048: EQUAL
78049: IFTRUE 78053
78051: GO 78081
78053: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
78054: LD_ADDR_OWVAR 42
78058: PUSH
78059: LD_INT 19
78061: PUSH
78062: LD_INT 23
78064: PUSH
78065: LD_INT 19
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: LIST
78072: PUSH
78073: LD_VAR 0 1
78077: ARRAY
78078: ST_TO_ADDR
78079: GO 78405
78081: LD_INT 18
78083: DOUBLE
78084: EQUAL
78085: IFTRUE 78089
78087: GO 78100
78089: POP
// bc_type := b_ext_radar ; 19 :
78090: LD_ADDR_OWVAR 42
78094: PUSH
78095: LD_INT 20
78097: ST_TO_ADDR
78098: GO 78405
78100: LD_INT 19
78102: DOUBLE
78103: EQUAL
78104: IFTRUE 78108
78106: GO 78119
78108: POP
// bc_type := b_ext_radio ; 20 :
78109: LD_ADDR_OWVAR 42
78113: PUSH
78114: LD_INT 22
78116: ST_TO_ADDR
78117: GO 78405
78119: LD_INT 20
78121: DOUBLE
78122: EQUAL
78123: IFTRUE 78127
78125: GO 78138
78127: POP
// bc_type := b_ext_siberium ; 21 :
78128: LD_ADDR_OWVAR 42
78132: PUSH
78133: LD_INT 21
78135: ST_TO_ADDR
78136: GO 78405
78138: LD_INT 21
78140: DOUBLE
78141: EQUAL
78142: IFTRUE 78146
78144: GO 78157
78146: POP
// bc_type := b_ext_computer ; 22 :
78147: LD_ADDR_OWVAR 42
78151: PUSH
78152: LD_INT 24
78154: ST_TO_ADDR
78155: GO 78405
78157: LD_INT 22
78159: DOUBLE
78160: EQUAL
78161: IFTRUE 78165
78163: GO 78176
78165: POP
// bc_type := b_ext_track ; 23 :
78166: LD_ADDR_OWVAR 42
78170: PUSH
78171: LD_INT 16
78173: ST_TO_ADDR
78174: GO 78405
78176: LD_INT 23
78178: DOUBLE
78179: EQUAL
78180: IFTRUE 78184
78182: GO 78195
78184: POP
// bc_type := b_ext_laser ; 24 :
78185: LD_ADDR_OWVAR 42
78189: PUSH
78190: LD_INT 25
78192: ST_TO_ADDR
78193: GO 78405
78195: LD_INT 24
78197: DOUBLE
78198: EQUAL
78199: IFTRUE 78203
78201: GO 78214
78203: POP
// bc_type := b_control_tower ; 25 :
78204: LD_ADDR_OWVAR 42
78208: PUSH
78209: LD_INT 36
78211: ST_TO_ADDR
78212: GO 78405
78214: LD_INT 25
78216: DOUBLE
78217: EQUAL
78218: IFTRUE 78222
78220: GO 78233
78222: POP
// bc_type := b_breastwork ; 26 :
78223: LD_ADDR_OWVAR 42
78227: PUSH
78228: LD_INT 31
78230: ST_TO_ADDR
78231: GO 78405
78233: LD_INT 26
78235: DOUBLE
78236: EQUAL
78237: IFTRUE 78241
78239: GO 78252
78241: POP
// bc_type := b_bunker ; 27 :
78242: LD_ADDR_OWVAR 42
78246: PUSH
78247: LD_INT 32
78249: ST_TO_ADDR
78250: GO 78405
78252: LD_INT 27
78254: DOUBLE
78255: EQUAL
78256: IFTRUE 78260
78258: GO 78271
78260: POP
// bc_type := b_turret ; 28 :
78261: LD_ADDR_OWVAR 42
78265: PUSH
78266: LD_INT 33
78268: ST_TO_ADDR
78269: GO 78405
78271: LD_INT 28
78273: DOUBLE
78274: EQUAL
78275: IFTRUE 78279
78277: GO 78290
78279: POP
// bc_type := b_armoury ; 29 :
78280: LD_ADDR_OWVAR 42
78284: PUSH
78285: LD_INT 4
78287: ST_TO_ADDR
78288: GO 78405
78290: LD_INT 29
78292: DOUBLE
78293: EQUAL
78294: IFTRUE 78298
78296: GO 78309
78298: POP
// bc_type := b_barracks ; 30 :
78299: LD_ADDR_OWVAR 42
78303: PUSH
78304: LD_INT 5
78306: ST_TO_ADDR
78307: GO 78405
78309: LD_INT 30
78311: DOUBLE
78312: EQUAL
78313: IFTRUE 78317
78315: GO 78328
78317: POP
// bc_type := b_solar_power ; 31 :
78318: LD_ADDR_OWVAR 42
78322: PUSH
78323: LD_INT 27
78325: ST_TO_ADDR
78326: GO 78405
78328: LD_INT 31
78330: DOUBLE
78331: EQUAL
78332: IFTRUE 78336
78334: GO 78347
78336: POP
// bc_type := b_oil_power ; 32 :
78337: LD_ADDR_OWVAR 42
78341: PUSH
78342: LD_INT 26
78344: ST_TO_ADDR
78345: GO 78405
78347: LD_INT 32
78349: DOUBLE
78350: EQUAL
78351: IFTRUE 78355
78353: GO 78366
78355: POP
// bc_type := b_siberite_power ; 33 :
78356: LD_ADDR_OWVAR 42
78360: PUSH
78361: LD_INT 28
78363: ST_TO_ADDR
78364: GO 78405
78366: LD_INT 33
78368: DOUBLE
78369: EQUAL
78370: IFTRUE 78374
78372: GO 78385
78374: POP
// bc_type := b_oil_mine ; 34 :
78375: LD_ADDR_OWVAR 42
78379: PUSH
78380: LD_INT 29
78382: ST_TO_ADDR
78383: GO 78405
78385: LD_INT 34
78387: DOUBLE
78388: EQUAL
78389: IFTRUE 78393
78391: GO 78404
78393: POP
// bc_type := b_siberite_mine ; end ;
78394: LD_ADDR_OWVAR 42
78398: PUSH
78399: LD_INT 30
78401: ST_TO_ADDR
78402: GO 78405
78404: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
78405: LD_ADDR_VAR 0 8
78409: PUSH
78410: LD_VAR 0 5
78414: PPUSH
78415: LD_VAR 0 6
78419: PPUSH
78420: LD_VAR 0 3
78424: PPUSH
78425: CALL_OW 47
78429: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
78430: LD_OWVAR 42
78434: PUSH
78435: LD_INT 32
78437: PUSH
78438: LD_INT 33
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: IN
78445: IFFALSE 78461
// PlaceWeaponTurret ( b , weapon ) ;
78447: LD_VAR 0 8
78451: PPUSH
78452: LD_VAR 0 4
78456: PPUSH
78457: CALL_OW 431
// end ;
78461: LD_VAR 0 7
78465: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
78466: LD_INT 0
78468: PPUSH
78469: PPUSH
78470: PPUSH
78471: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78472: LD_ADDR_VAR 0 4
78476: PUSH
78477: LD_INT 22
78479: PUSH
78480: LD_OWVAR 2
78484: PUSH
78485: EMPTY
78486: LIST
78487: LIST
78488: PUSH
78489: LD_INT 2
78491: PUSH
78492: LD_INT 30
78494: PUSH
78495: LD_INT 0
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: PUSH
78502: LD_INT 30
78504: PUSH
78505: LD_INT 1
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PUSH
78512: EMPTY
78513: LIST
78514: LIST
78515: LIST
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PPUSH
78521: CALL_OW 69
78525: ST_TO_ADDR
// if not tmp then
78526: LD_VAR 0 4
78530: NOT
78531: IFFALSE 78535
// exit ;
78533: GO 78594
// for i in tmp do
78535: LD_ADDR_VAR 0 2
78539: PUSH
78540: LD_VAR 0 4
78544: PUSH
78545: FOR_IN
78546: IFFALSE 78592
// for j = 1 to 3 do
78548: LD_ADDR_VAR 0 3
78552: PUSH
78553: DOUBLE
78554: LD_INT 1
78556: DEC
78557: ST_TO_ADDR
78558: LD_INT 3
78560: PUSH
78561: FOR_TO
78562: IFFALSE 78588
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
78564: LD_VAR 0 2
78568: PPUSH
78569: CALL_OW 274
78573: PPUSH
78574: LD_VAR 0 3
78578: PPUSH
78579: LD_INT 99999
78581: PPUSH
78582: CALL_OW 277
78586: GO 78561
78588: POP
78589: POP
78590: GO 78545
78592: POP
78593: POP
// end ;
78594: LD_VAR 0 1
78598: RET
// export function hHackSetLevel10 ; var i , j ; begin
78599: LD_INT 0
78601: PPUSH
78602: PPUSH
78603: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78604: LD_ADDR_VAR 0 2
78608: PUSH
78609: LD_INT 21
78611: PUSH
78612: LD_INT 1
78614: PUSH
78615: EMPTY
78616: LIST
78617: LIST
78618: PPUSH
78619: CALL_OW 69
78623: PUSH
78624: FOR_IN
78625: IFFALSE 78677
// if IsSelected ( i ) then
78627: LD_VAR 0 2
78631: PPUSH
78632: CALL_OW 306
78636: IFFALSE 78675
// begin for j := 1 to 4 do
78638: LD_ADDR_VAR 0 3
78642: PUSH
78643: DOUBLE
78644: LD_INT 1
78646: DEC
78647: ST_TO_ADDR
78648: LD_INT 4
78650: PUSH
78651: FOR_TO
78652: IFFALSE 78673
// SetSkill ( i , j , 10 ) ;
78654: LD_VAR 0 2
78658: PPUSH
78659: LD_VAR 0 3
78663: PPUSH
78664: LD_INT 10
78666: PPUSH
78667: CALL_OW 237
78671: GO 78651
78673: POP
78674: POP
// end ;
78675: GO 78624
78677: POP
78678: POP
// end ;
78679: LD_VAR 0 1
78683: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
78684: LD_INT 0
78686: PPUSH
78687: PPUSH
78688: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78689: LD_ADDR_VAR 0 2
78693: PUSH
78694: LD_INT 22
78696: PUSH
78697: LD_OWVAR 2
78701: PUSH
78702: EMPTY
78703: LIST
78704: LIST
78705: PUSH
78706: LD_INT 21
78708: PUSH
78709: LD_INT 1
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: PPUSH
78720: CALL_OW 69
78724: PUSH
78725: FOR_IN
78726: IFFALSE 78767
// begin for j := 1 to 4 do
78728: LD_ADDR_VAR 0 3
78732: PUSH
78733: DOUBLE
78734: LD_INT 1
78736: DEC
78737: ST_TO_ADDR
78738: LD_INT 4
78740: PUSH
78741: FOR_TO
78742: IFFALSE 78763
// SetSkill ( i , j , 10 ) ;
78744: LD_VAR 0 2
78748: PPUSH
78749: LD_VAR 0 3
78753: PPUSH
78754: LD_INT 10
78756: PPUSH
78757: CALL_OW 237
78761: GO 78741
78763: POP
78764: POP
// end ;
78765: GO 78725
78767: POP
78768: POP
// end ;
78769: LD_VAR 0 1
78773: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
78774: LD_INT 0
78776: PPUSH
// uc_side := your_side ;
78777: LD_ADDR_OWVAR 20
78781: PUSH
78782: LD_OWVAR 2
78786: ST_TO_ADDR
// uc_nation := nation ;
78787: LD_ADDR_OWVAR 21
78791: PUSH
78792: LD_VAR 0 1
78796: ST_TO_ADDR
// InitHc ;
78797: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78801: LD_INT 0
78803: PPUSH
78804: LD_VAR 0 2
78808: PPUSH
78809: LD_VAR 0 3
78813: PPUSH
78814: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78818: LD_VAR 0 4
78822: PPUSH
78823: LD_VAR 0 5
78827: PPUSH
78828: CALL_OW 428
78832: PUSH
78833: LD_INT 0
78835: EQUAL
78836: IFFALSE 78860
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78838: CALL_OW 44
78842: PPUSH
78843: LD_VAR 0 4
78847: PPUSH
78848: LD_VAR 0 5
78852: PPUSH
78853: LD_INT 1
78855: PPUSH
78856: CALL_OW 48
// end ;
78860: LD_VAR 0 6
78864: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78865: LD_INT 0
78867: PPUSH
78868: PPUSH
// uc_side := your_side ;
78869: LD_ADDR_OWVAR 20
78873: PUSH
78874: LD_OWVAR 2
78878: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78879: LD_VAR 0 1
78883: PUSH
78884: LD_INT 1
78886: PUSH
78887: LD_INT 2
78889: PUSH
78890: LD_INT 3
78892: PUSH
78893: LD_INT 4
78895: PUSH
78896: LD_INT 5
78898: PUSH
78899: EMPTY
78900: LIST
78901: LIST
78902: LIST
78903: LIST
78904: LIST
78905: IN
78906: IFFALSE 78918
// uc_nation := nation_american else
78908: LD_ADDR_OWVAR 21
78912: PUSH
78913: LD_INT 1
78915: ST_TO_ADDR
78916: GO 78961
// if chassis in [ 11 , 12 , 13 , 14 ] then
78918: LD_VAR 0 1
78922: PUSH
78923: LD_INT 11
78925: PUSH
78926: LD_INT 12
78928: PUSH
78929: LD_INT 13
78931: PUSH
78932: LD_INT 14
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: LIST
78939: LIST
78940: IN
78941: IFFALSE 78953
// uc_nation := nation_arabian else
78943: LD_ADDR_OWVAR 21
78947: PUSH
78948: LD_INT 2
78950: ST_TO_ADDR
78951: GO 78961
// uc_nation := nation_russian ;
78953: LD_ADDR_OWVAR 21
78957: PUSH
78958: LD_INT 3
78960: ST_TO_ADDR
// vc_chassis := chassis ;
78961: LD_ADDR_OWVAR 37
78965: PUSH
78966: LD_VAR 0 1
78970: ST_TO_ADDR
// vc_engine := engine ;
78971: LD_ADDR_OWVAR 39
78975: PUSH
78976: LD_VAR 0 2
78980: ST_TO_ADDR
// vc_control := control ;
78981: LD_ADDR_OWVAR 38
78985: PUSH
78986: LD_VAR 0 3
78990: ST_TO_ADDR
// vc_weapon := weapon ;
78991: LD_ADDR_OWVAR 40
78995: PUSH
78996: LD_VAR 0 4
79000: ST_TO_ADDR
// un := CreateVehicle ;
79001: LD_ADDR_VAR 0 8
79005: PUSH
79006: CALL_OW 45
79010: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
79011: LD_VAR 0 8
79015: PPUSH
79016: LD_INT 0
79018: PPUSH
79019: LD_INT 5
79021: PPUSH
79022: CALL_OW 12
79026: PPUSH
79027: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
79031: LD_VAR 0 8
79035: PPUSH
79036: LD_VAR 0 5
79040: PPUSH
79041: LD_VAR 0 6
79045: PPUSH
79046: LD_INT 1
79048: PPUSH
79049: CALL_OW 48
// end ;
79053: LD_VAR 0 7
79057: RET
// export hInvincible ; every 1 do
79058: GO 79060
79060: DISABLE
// hInvincible := [ ] ;
79061: LD_ADDR_EXP 104
79065: PUSH
79066: EMPTY
79067: ST_TO_ADDR
79068: END
// every 10 do var i ;
79069: GO 79071
79071: DISABLE
79072: LD_INT 0
79074: PPUSH
// begin enable ;
79075: ENABLE
// if not hInvincible then
79076: LD_EXP 104
79080: NOT
79081: IFFALSE 79085
// exit ;
79083: GO 79129
// for i in hInvincible do
79085: LD_ADDR_VAR 0 1
79089: PUSH
79090: LD_EXP 104
79094: PUSH
79095: FOR_IN
79096: IFFALSE 79127
// if GetLives ( i ) < 1000 then
79098: LD_VAR 0 1
79102: PPUSH
79103: CALL_OW 256
79107: PUSH
79108: LD_INT 1000
79110: LESS
79111: IFFALSE 79125
// SetLives ( i , 1000 ) ;
79113: LD_VAR 0 1
79117: PPUSH
79118: LD_INT 1000
79120: PPUSH
79121: CALL_OW 234
79125: GO 79095
79127: POP
79128: POP
// end ;
79129: PPOPN 1
79131: END
// export function hHackInvincible ; var i ; begin
79132: LD_INT 0
79134: PPUSH
79135: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
79136: LD_ADDR_VAR 0 2
79140: PUSH
79141: LD_INT 2
79143: PUSH
79144: LD_INT 21
79146: PUSH
79147: LD_INT 1
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 21
79156: PUSH
79157: LD_INT 2
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: PUSH
79164: EMPTY
79165: LIST
79166: LIST
79167: LIST
79168: PPUSH
79169: CALL_OW 69
79173: PUSH
79174: FOR_IN
79175: IFFALSE 79236
// if IsSelected ( i ) then
79177: LD_VAR 0 2
79181: PPUSH
79182: CALL_OW 306
79186: IFFALSE 79234
// begin if i in hInvincible then
79188: LD_VAR 0 2
79192: PUSH
79193: LD_EXP 104
79197: IN
79198: IFFALSE 79218
// hInvincible := hInvincible diff i else
79200: LD_ADDR_EXP 104
79204: PUSH
79205: LD_EXP 104
79209: PUSH
79210: LD_VAR 0 2
79214: DIFF
79215: ST_TO_ADDR
79216: GO 79234
// hInvincible := hInvincible union i ;
79218: LD_ADDR_EXP 104
79222: PUSH
79223: LD_EXP 104
79227: PUSH
79228: LD_VAR 0 2
79232: UNION
79233: ST_TO_ADDR
// end ;
79234: GO 79174
79236: POP
79237: POP
// end ;
79238: LD_VAR 0 1
79242: RET
// export function hHackInvisible ; var i , j ; begin
79243: LD_INT 0
79245: PPUSH
79246: PPUSH
79247: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79248: LD_ADDR_VAR 0 2
79252: PUSH
79253: LD_INT 21
79255: PUSH
79256: LD_INT 1
79258: PUSH
79259: EMPTY
79260: LIST
79261: LIST
79262: PPUSH
79263: CALL_OW 69
79267: PUSH
79268: FOR_IN
79269: IFFALSE 79293
// if IsSelected ( i ) then
79271: LD_VAR 0 2
79275: PPUSH
79276: CALL_OW 306
79280: IFFALSE 79291
// ComForceInvisible ( i ) ;
79282: LD_VAR 0 2
79286: PPUSH
79287: CALL_OW 496
79291: GO 79268
79293: POP
79294: POP
// end ;
79295: LD_VAR 0 1
79299: RET
// export function hHackChangeYourSide ; begin
79300: LD_INT 0
79302: PPUSH
// if your_side = 8 then
79303: LD_OWVAR 2
79307: PUSH
79308: LD_INT 8
79310: EQUAL
79311: IFFALSE 79323
// your_side := 0 else
79313: LD_ADDR_OWVAR 2
79317: PUSH
79318: LD_INT 0
79320: ST_TO_ADDR
79321: GO 79337
// your_side := your_side + 1 ;
79323: LD_ADDR_OWVAR 2
79327: PUSH
79328: LD_OWVAR 2
79332: PUSH
79333: LD_INT 1
79335: PLUS
79336: ST_TO_ADDR
// end ;
79337: LD_VAR 0 1
79341: RET
// export function hHackChangeUnitSide ; var i , j ; begin
79342: LD_INT 0
79344: PPUSH
79345: PPUSH
79346: PPUSH
// for i in all_units do
79347: LD_ADDR_VAR 0 2
79351: PUSH
79352: LD_OWVAR 3
79356: PUSH
79357: FOR_IN
79358: IFFALSE 79436
// if IsSelected ( i ) then
79360: LD_VAR 0 2
79364: PPUSH
79365: CALL_OW 306
79369: IFFALSE 79434
// begin j := GetSide ( i ) ;
79371: LD_ADDR_VAR 0 3
79375: PUSH
79376: LD_VAR 0 2
79380: PPUSH
79381: CALL_OW 255
79385: ST_TO_ADDR
// if j = 8 then
79386: LD_VAR 0 3
79390: PUSH
79391: LD_INT 8
79393: EQUAL
79394: IFFALSE 79406
// j := 0 else
79396: LD_ADDR_VAR 0 3
79400: PUSH
79401: LD_INT 0
79403: ST_TO_ADDR
79404: GO 79420
// j := j + 1 ;
79406: LD_ADDR_VAR 0 3
79410: PUSH
79411: LD_VAR 0 3
79415: PUSH
79416: LD_INT 1
79418: PLUS
79419: ST_TO_ADDR
// SetSide ( i , j ) ;
79420: LD_VAR 0 2
79424: PPUSH
79425: LD_VAR 0 3
79429: PPUSH
79430: CALL_OW 235
// end ;
79434: GO 79357
79436: POP
79437: POP
// end ;
79438: LD_VAR 0 1
79442: RET
// export function hHackFog ; begin
79443: LD_INT 0
79445: PPUSH
// FogOff ( true ) ;
79446: LD_INT 1
79448: PPUSH
79449: CALL_OW 344
// end ;
79453: LD_VAR 0 1
79457: RET
// export function hHackTeleport ( unit , x , y ) ; begin
79458: LD_INT 0
79460: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
79461: LD_VAR 0 1
79465: PPUSH
79466: LD_VAR 0 2
79470: PPUSH
79471: LD_VAR 0 3
79475: PPUSH
79476: LD_INT 1
79478: PPUSH
79479: LD_INT 1
79481: PPUSH
79482: CALL_OW 483
// CenterOnXY ( x , y ) ;
79486: LD_VAR 0 2
79490: PPUSH
79491: LD_VAR 0 3
79495: PPUSH
79496: CALL_OW 84
// end ;
79500: LD_VAR 0 4
79504: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
79505: LD_INT 0
79507: PPUSH
79508: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
79509: LD_VAR 0 1
79513: NOT
79514: IFTRUE 79533
79516: PUSH
79517: LD_VAR 0 2
79521: PPUSH
79522: LD_VAR 0 3
79526: PPUSH
79527: CALL_OW 488
79531: NOT
79532: OR
79533: IFTRUE 79568
79535: PUSH
79536: LD_VAR 0 1
79540: PPUSH
79541: CALL_OW 266
79545: PUSH
79546: LD_INT 3
79548: NONEQUAL
79549: IFFALSE 79567
79551: PUSH
79552: LD_VAR 0 1
79556: PPUSH
79557: CALL_OW 247
79561: PUSH
79562: LD_INT 1
79564: EQUAL
79565: NOT
79566: AND
79567: OR
79568: IFFALSE 79572
// exit ;
79570: GO 79854
// if GetType ( factory ) = unit_human then
79572: LD_VAR 0 1
79576: PPUSH
79577: CALL_OW 247
79581: PUSH
79582: LD_INT 1
79584: EQUAL
79585: IFFALSE 79602
// factory := IsInUnit ( factory ) ;
79587: LD_ADDR_VAR 0 1
79591: PUSH
79592: LD_VAR 0 1
79596: PPUSH
79597: CALL_OW 310
79601: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
79602: LD_VAR 0 1
79606: PPUSH
79607: CALL_OW 266
79611: PUSH
79612: LD_INT 3
79614: NONEQUAL
79615: IFFALSE 79619
// exit ;
79617: GO 79854
// for i := 1 to Count ( factoryWaypoints ) do
79619: LD_ADDR_VAR 0 5
79623: PUSH
79624: DOUBLE
79625: LD_INT 1
79627: DEC
79628: ST_TO_ADDR
79629: LD_EXP 105
79633: PPUSH
79634: CALL 23451 0 1
79638: PUSH
79639: FOR_TO
79640: IFFALSE 79802
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
79642: LD_VAR 0 2
79646: PPUSH
79647: LD_VAR 0 3
79651: PPUSH
79652: CALL_OW 428
79656: PUSH
79657: LD_EXP 105
79661: PUSH
79662: LD_VAR 0 5
79666: ARRAY
79667: PUSH
79668: LD_INT 2
79670: ARRAY
79671: EQUAL
79672: IFFALSE 79704
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
79674: LD_ADDR_EXP 105
79678: PUSH
79679: LD_EXP 105
79683: PPUSH
79684: LD_VAR 0 5
79688: PPUSH
79689: CALL_OW 3
79693: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79694: CALL 79859 0 0
// exit ;
79698: POP
79699: POP
79700: GO 79854
// end else
79702: GO 79800
// if factory = factoryWaypoints [ i ] [ 2 ] then
79704: LD_VAR 0 1
79708: PUSH
79709: LD_EXP 105
79713: PUSH
79714: LD_VAR 0 5
79718: ARRAY
79719: PUSH
79720: LD_INT 2
79722: ARRAY
79723: EQUAL
79724: IFFALSE 79800
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
79726: LD_ADDR_EXP 105
79730: PUSH
79731: LD_EXP 105
79735: PPUSH
79736: LD_VAR 0 5
79740: PPUSH
79741: CALL_OW 3
79745: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
79746: LD_ADDR_EXP 105
79750: PUSH
79751: LD_EXP 105
79755: PPUSH
79756: LD_VAR 0 1
79760: PPUSH
79761: CALL_OW 255
79765: PUSH
79766: LD_VAR 0 1
79770: PUSH
79771: LD_VAR 0 2
79775: PUSH
79776: LD_VAR 0 3
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: LIST
79785: LIST
79786: PPUSH
79787: CALL 59427 0 2
79791: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79792: CALL 79859 0 0
// exit ;
79796: POP
79797: POP
79798: GO 79854
// end ; end ;
79800: GO 79639
79802: POP
79803: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
79804: LD_ADDR_EXP 105
79808: PUSH
79809: LD_EXP 105
79813: PPUSH
79814: LD_VAR 0 1
79818: PPUSH
79819: CALL_OW 255
79823: PUSH
79824: LD_VAR 0 1
79828: PUSH
79829: LD_VAR 0 2
79833: PUSH
79834: LD_VAR 0 3
79838: PUSH
79839: EMPTY
79840: LIST
79841: LIST
79842: LIST
79843: LIST
79844: PPUSH
79845: CALL 59427 0 2
79849: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79850: CALL 79859 0 0
// end ;
79854: LD_VAR 0 4
79858: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
79859: LD_INT 0
79861: PPUSH
79862: PPUSH
79863: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
79864: LD_STRING resetFactoryWaypoint();
79866: PPUSH
79867: CALL_OW 559
// if factoryWaypoints then
79871: LD_EXP 105
79875: IFFALSE 79996
// begin list := factoryWaypoints ;
79877: LD_ADDR_VAR 0 3
79881: PUSH
79882: LD_EXP 105
79886: ST_TO_ADDR
// for i := 1 to list do
79887: LD_ADDR_VAR 0 2
79891: PUSH
79892: DOUBLE
79893: LD_INT 1
79895: DEC
79896: ST_TO_ADDR
79897: LD_VAR 0 3
79901: PUSH
79902: FOR_TO
79903: IFFALSE 79994
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79905: LD_STRING setFactoryWaypointXY(
79907: PUSH
79908: LD_VAR 0 3
79912: PUSH
79913: LD_VAR 0 2
79917: ARRAY
79918: PUSH
79919: LD_INT 1
79921: ARRAY
79922: STR
79923: PUSH
79924: LD_STRING ,
79926: STR
79927: PUSH
79928: LD_VAR 0 3
79932: PUSH
79933: LD_VAR 0 2
79937: ARRAY
79938: PUSH
79939: LD_INT 2
79941: ARRAY
79942: STR
79943: PUSH
79944: LD_STRING ,
79946: STR
79947: PUSH
79948: LD_VAR 0 3
79952: PUSH
79953: LD_VAR 0 2
79957: ARRAY
79958: PUSH
79959: LD_INT 3
79961: ARRAY
79962: STR
79963: PUSH
79964: LD_STRING ,
79966: STR
79967: PUSH
79968: LD_VAR 0 3
79972: PUSH
79973: LD_VAR 0 2
79977: ARRAY
79978: PUSH
79979: LD_INT 4
79981: ARRAY
79982: STR
79983: PUSH
79984: LD_STRING )
79986: STR
79987: PPUSH
79988: CALL_OW 559
79992: GO 79902
79994: POP
79995: POP
// end ; end ;
79996: LD_VAR 0 1
80000: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
80001: LD_INT 0
80003: PPUSH
// if HexInfo ( x , y ) = warehouse then
80004: LD_VAR 0 2
80008: PPUSH
80009: LD_VAR 0 3
80013: PPUSH
80014: CALL_OW 428
80018: PUSH
80019: LD_VAR 0 1
80023: EQUAL
80024: IFFALSE 80051
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
80026: LD_ADDR_EXP 107
80030: PUSH
80031: LD_EXP 107
80035: PPUSH
80036: LD_VAR 0 1
80040: PPUSH
80041: LD_INT 0
80043: PPUSH
80044: CALL_OW 1
80048: ST_TO_ADDR
80049: GO 80102
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
80051: LD_ADDR_EXP 107
80055: PUSH
80056: LD_EXP 107
80060: PPUSH
80061: LD_VAR 0 1
80065: PPUSH
80066: LD_VAR 0 1
80070: PPUSH
80071: CALL_OW 255
80075: PUSH
80076: LD_VAR 0 1
80080: PUSH
80081: LD_VAR 0 2
80085: PUSH
80086: LD_VAR 0 3
80090: PUSH
80091: EMPTY
80092: LIST
80093: LIST
80094: LIST
80095: LIST
80096: PPUSH
80097: CALL_OW 1
80101: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
80102: CALL 80111 0 0
// end ;
80106: LD_VAR 0 4
80110: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
80111: LD_INT 0
80113: PPUSH
80114: PPUSH
80115: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
80116: LD_STRING resetWarehouseGatheringPoints();
80118: PPUSH
80119: CALL_OW 559
// if warehouseGatheringPoints then
80123: LD_EXP 107
80127: IFFALSE 80253
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
80129: LD_ADDR_VAR 0 3
80133: PUSH
80134: LD_EXP 107
80138: PPUSH
80139: CALL 63361 0 1
80143: ST_TO_ADDR
// for i := 1 to list do
80144: LD_ADDR_VAR 0 2
80148: PUSH
80149: DOUBLE
80150: LD_INT 1
80152: DEC
80153: ST_TO_ADDR
80154: LD_VAR 0 3
80158: PUSH
80159: FOR_TO
80160: IFFALSE 80251
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
80162: LD_STRING setWarehouseGatheringPointXY(
80164: PUSH
80165: LD_VAR 0 3
80169: PUSH
80170: LD_VAR 0 2
80174: ARRAY
80175: PUSH
80176: LD_INT 1
80178: ARRAY
80179: STR
80180: PUSH
80181: LD_STRING ,
80183: STR
80184: PUSH
80185: LD_VAR 0 3
80189: PUSH
80190: LD_VAR 0 2
80194: ARRAY
80195: PUSH
80196: LD_INT 2
80198: ARRAY
80199: STR
80200: PUSH
80201: LD_STRING ,
80203: STR
80204: PUSH
80205: LD_VAR 0 3
80209: PUSH
80210: LD_VAR 0 2
80214: ARRAY
80215: PUSH
80216: LD_INT 3
80218: ARRAY
80219: STR
80220: PUSH
80221: LD_STRING ,
80223: STR
80224: PUSH
80225: LD_VAR 0 3
80229: PUSH
80230: LD_VAR 0 2
80234: ARRAY
80235: PUSH
80236: LD_INT 4
80238: ARRAY
80239: STR
80240: PUSH
80241: LD_STRING )
80243: STR
80244: PPUSH
80245: CALL_OW 559
80249: GO 80159
80251: POP
80252: POP
// end ; end ;
80253: LD_VAR 0 1
80257: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
80258: LD_EXP 107
80262: IFFALSE 80957
80264: GO 80266
80266: DISABLE
80267: LD_INT 0
80269: PPUSH
80270: PPUSH
80271: PPUSH
80272: PPUSH
80273: PPUSH
80274: PPUSH
80275: PPUSH
80276: PPUSH
80277: PPUSH
// begin enable ;
80278: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
80279: LD_ADDR_VAR 0 3
80283: PUSH
80284: LD_EXP 107
80288: PPUSH
80289: CALL 63361 0 1
80293: ST_TO_ADDR
// if not list then
80294: LD_VAR 0 3
80298: NOT
80299: IFFALSE 80303
// exit ;
80301: GO 80957
// for i := 1 to list do
80303: LD_ADDR_VAR 0 1
80307: PUSH
80308: DOUBLE
80309: LD_INT 1
80311: DEC
80312: ST_TO_ADDR
80313: LD_VAR 0 3
80317: PUSH
80318: FOR_TO
80319: IFFALSE 80955
// begin depot := list [ i ] [ 2 ] ;
80321: LD_ADDR_VAR 0 8
80325: PUSH
80326: LD_VAR 0 3
80330: PUSH
80331: LD_VAR 0 1
80335: ARRAY
80336: PUSH
80337: LD_INT 2
80339: ARRAY
80340: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
80341: LD_ADDR_VAR 0 5
80345: PUSH
80346: LD_VAR 0 3
80350: PUSH
80351: LD_VAR 0 1
80355: ARRAY
80356: PUSH
80357: LD_INT 1
80359: ARRAY
80360: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
80361: LD_VAR 0 8
80365: PPUSH
80366: CALL_OW 301
80370: IFTRUE 80389
80372: PUSH
80373: LD_VAR 0 5
80377: PUSH
80378: LD_VAR 0 8
80382: PPUSH
80383: CALL_OW 255
80387: NONEQUAL
80388: OR
80389: IFFALSE 80418
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
80391: LD_ADDR_EXP 107
80395: PUSH
80396: LD_EXP 107
80400: PPUSH
80401: LD_VAR 0 8
80405: PPUSH
80406: LD_INT 0
80408: PPUSH
80409: CALL_OW 1
80413: ST_TO_ADDR
// exit ;
80414: POP
80415: POP
80416: GO 80957
// end ; x := list [ i ] [ 3 ] ;
80418: LD_ADDR_VAR 0 6
80422: PUSH
80423: LD_VAR 0 3
80427: PUSH
80428: LD_VAR 0 1
80432: ARRAY
80433: PUSH
80434: LD_INT 3
80436: ARRAY
80437: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
80438: LD_ADDR_VAR 0 7
80442: PUSH
80443: LD_VAR 0 3
80447: PUSH
80448: LD_VAR 0 1
80452: ARRAY
80453: PUSH
80454: LD_INT 4
80456: ARRAY
80457: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
80458: LD_ADDR_VAR 0 9
80462: PUSH
80463: LD_VAR 0 6
80467: PPUSH
80468: LD_VAR 0 7
80472: PPUSH
80473: LD_INT 16
80475: PPUSH
80476: CALL 61935 0 3
80480: ST_TO_ADDR
// if not cratesNearbyPoint then
80481: LD_VAR 0 9
80485: NOT
80486: IFFALSE 80492
// exit ;
80488: POP
80489: POP
80490: GO 80957
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
80492: LD_ADDR_VAR 0 4
80496: PUSH
80497: LD_INT 22
80499: PUSH
80500: LD_VAR 0 5
80504: PUSH
80505: EMPTY
80506: LIST
80507: LIST
80508: PUSH
80509: LD_INT 3
80511: PUSH
80512: LD_INT 60
80514: PUSH
80515: EMPTY
80516: LIST
80517: PUSH
80518: EMPTY
80519: LIST
80520: LIST
80521: PUSH
80522: LD_INT 91
80524: PUSH
80525: LD_VAR 0 8
80529: PUSH
80530: LD_INT 6
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: LIST
80537: PUSH
80538: LD_INT 2
80540: PUSH
80541: LD_INT 25
80543: PUSH
80544: LD_INT 2
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: PUSH
80551: LD_INT 25
80553: PUSH
80554: LD_INT 16
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: PUSH
80561: EMPTY
80562: LIST
80563: LIST
80564: LIST
80565: PUSH
80566: EMPTY
80567: LIST
80568: LIST
80569: LIST
80570: LIST
80571: PPUSH
80572: CALL_OW 69
80576: PUSH
80577: LD_VAR 0 8
80581: PPUSH
80582: CALL_OW 313
80586: PPUSH
80587: LD_INT 3
80589: PUSH
80590: LD_INT 60
80592: PUSH
80593: EMPTY
80594: LIST
80595: PUSH
80596: EMPTY
80597: LIST
80598: LIST
80599: PUSH
80600: LD_INT 2
80602: PUSH
80603: LD_INT 25
80605: PUSH
80606: LD_INT 2
80608: PUSH
80609: EMPTY
80610: LIST
80611: LIST
80612: PUSH
80613: LD_INT 25
80615: PUSH
80616: LD_INT 16
80618: PUSH
80619: EMPTY
80620: LIST
80621: LIST
80622: PUSH
80623: EMPTY
80624: LIST
80625: LIST
80626: LIST
80627: PUSH
80628: EMPTY
80629: LIST
80630: LIST
80631: PPUSH
80632: CALL_OW 72
80636: UNION
80637: ST_TO_ADDR
// if tmp then
80638: LD_VAR 0 4
80642: IFFALSE 80722
// begin tmp := ShrinkArray ( tmp , 3 ) ;
80644: LD_ADDR_VAR 0 4
80648: PUSH
80649: LD_VAR 0 4
80653: PPUSH
80654: LD_INT 3
80656: PPUSH
80657: CALL 59742 0 2
80661: ST_TO_ADDR
// for j in tmp do
80662: LD_ADDR_VAR 0 2
80666: PUSH
80667: LD_VAR 0 4
80671: PUSH
80672: FOR_IN
80673: IFFALSE 80716
// begin if IsInUnit ( j ) then
80675: LD_VAR 0 2
80679: PPUSH
80680: CALL_OW 310
80684: IFFALSE 80695
// ComExit ( j ) ;
80686: LD_VAR 0 2
80690: PPUSH
80691: CALL 59825 0 1
// AddComCollect ( j , x , y ) ;
80695: LD_VAR 0 2
80699: PPUSH
80700: LD_VAR 0 6
80704: PPUSH
80705: LD_VAR 0 7
80709: PPUSH
80710: CALL_OW 177
// end ;
80714: GO 80672
80716: POP
80717: POP
// exit ;
80718: POP
80719: POP
80720: GO 80957
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
80722: LD_ADDR_VAR 0 4
80726: PUSH
80727: LD_INT 22
80729: PUSH
80730: LD_VAR 0 5
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: PUSH
80739: LD_INT 91
80741: PUSH
80742: LD_VAR 0 8
80746: PUSH
80747: LD_INT 8
80749: PUSH
80750: EMPTY
80751: LIST
80752: LIST
80753: LIST
80754: PUSH
80755: LD_INT 2
80757: PUSH
80758: LD_INT 34
80760: PUSH
80761: LD_INT 12
80763: PUSH
80764: EMPTY
80765: LIST
80766: LIST
80767: PUSH
80768: LD_INT 34
80770: PUSH
80771: LD_INT 51
80773: PUSH
80774: EMPTY
80775: LIST
80776: LIST
80777: PUSH
80778: LD_INT 34
80780: PUSH
80781: LD_INT 32
80783: PUSH
80784: EMPTY
80785: LIST
80786: LIST
80787: PUSH
80788: LD_INT 34
80790: PUSH
80791: LD_INT 89
80793: PUSH
80794: EMPTY
80795: LIST
80796: LIST
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: LIST
80802: LIST
80803: LIST
80804: PUSH
80805: EMPTY
80806: LIST
80807: LIST
80808: LIST
80809: PPUSH
80810: CALL_OW 69
80814: ST_TO_ADDR
// if tmp then
80815: LD_VAR 0 4
80819: IFFALSE 80953
// begin for j in tmp do
80821: LD_ADDR_VAR 0 2
80825: PUSH
80826: LD_VAR 0 4
80830: PUSH
80831: FOR_IN
80832: IFFALSE 80951
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
80834: LD_VAR 0 2
80838: PPUSH
80839: CALL_OW 262
80843: PUSH
80844: LD_INT 3
80846: EQUAL
80847: IFTRUE 80864
80849: PUSH
80850: LD_VAR 0 2
80854: PPUSH
80855: CALL_OW 261
80859: PUSH
80860: LD_INT 20
80862: GREATER
80863: OR
80864: IFFALSE 80878
80866: PUSH
80867: LD_VAR 0 2
80871: PPUSH
80872: CALL_OW 314
80876: NOT
80877: AND
80878: IFFALSE 80908
80880: PUSH
80881: LD_VAR 0 2
80885: PPUSH
80886: CALL_OW 263
80890: PUSH
80891: LD_INT 1
80893: NONEQUAL
80894: IFTRUE 80907
80896: PUSH
80897: LD_VAR 0 2
80901: PPUSH
80902: CALL_OW 311
80906: OR
80907: AND
80908: IFFALSE 80949
// begin ComCollect ( j , x , y ) ;
80910: LD_VAR 0 2
80914: PPUSH
80915: LD_VAR 0 6
80919: PPUSH
80920: LD_VAR 0 7
80924: PPUSH
80925: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
80929: LD_VAR 0 2
80933: PPUSH
80934: LD_VAR 0 8
80938: PPUSH
80939: CALL_OW 172
// exit ;
80943: POP
80944: POP
80945: POP
80946: POP
80947: GO 80957
// end ;
80949: GO 80831
80951: POP
80952: POP
// end ; end ;
80953: GO 80318
80955: POP
80956: POP
// end ; end_of_file
80957: PPOPN 9
80959: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80960: LD_VAR 0 1
80964: PUSH
80965: LD_INT 200
80967: DOUBLE
80968: GREATEREQUAL
80969: IFFALSE 80977
80971: LD_INT 299
80973: DOUBLE
80974: LESSEQUAL
80975: IFTRUE 80979
80977: GO 81011
80979: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80980: LD_VAR 0 1
80984: PPUSH
80985: LD_VAR 0 2
80989: PPUSH
80990: LD_VAR 0 3
80994: PPUSH
80995: LD_VAR 0 4
80999: PPUSH
81000: LD_VAR 0 5
81004: PPUSH
81005: CALL 81873 0 5
81009: GO 81088
81011: LD_INT 300
81013: DOUBLE
81014: GREATEREQUAL
81015: IFFALSE 81023
81017: LD_INT 399
81019: DOUBLE
81020: LESSEQUAL
81021: IFTRUE 81025
81023: GO 81087
81025: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81026: LD_VAR 0 1
81030: PPUSH
81031: LD_VAR 0 2
81035: PPUSH
81036: LD_VAR 0 3
81040: PPUSH
81041: LD_VAR 0 4
81045: PPUSH
81046: LD_VAR 0 5
81050: PPUSH
81051: LD_VAR 0 6
81055: PPUSH
81056: LD_VAR 0 7
81060: PPUSH
81061: LD_VAR 0 8
81065: PPUSH
81066: LD_VAR 0 9
81070: PPUSH
81071: LD_VAR 0 10
81075: PPUSH
81076: LD_VAR 0 11
81080: PPUSH
81081: CALL 77513 0 11
81085: GO 81088
81087: POP
// end ;
81088: PPOPN 11
81090: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81091: LD_VAR 0 1
81095: PPUSH
81096: LD_VAR 0 2
81100: PPUSH
81101: LD_VAR 0 3
81105: PPUSH
81106: LD_VAR 0 4
81110: PPUSH
81111: LD_VAR 0 5
81115: PPUSH
81116: CALL 81173 0 5
// end ; end_of_file
81120: PPOPN 5
81122: END
// export function SOS_UnitDestroyed ( un ) ; begin
81123: LD_INT 0
81125: PPUSH
// ComRadiation ( un ) ;
81126: LD_VAR 0 1
81130: PPUSH
81131: CALL 82293 0 1
// end ;
81135: LD_VAR 0 2
81139: RET
// export function SOS_UnitKamikazed ( un ) ; begin
81140: LD_INT 0
81142: PPUSH
// ComRadiation ( un ) ;
81143: LD_VAR 0 1
81147: PPUSH
81148: CALL 82293 0 1
// end ;
81152: LD_VAR 0 2
81156: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
81157: LD_INT 0
81159: PPUSH
// end ;
81160: LD_VAR 0 4
81164: RET
// export function SOS_Command ( cmd ) ; begin
81165: LD_INT 0
81167: PPUSH
// end ;
81168: LD_VAR 0 2
81172: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
81173: LD_INT 0
81175: PPUSH
// end ;
81176: LD_VAR 0 6
81180: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
81181: LD_INT 0
81183: PPUSH
81184: PPUSH
81185: PPUSH
81186: PPUSH
81187: PPUSH
// if not vehicle or not factory then
81188: LD_VAR 0 1
81192: NOT
81193: IFTRUE 81202
81195: PUSH
81196: LD_VAR 0 2
81200: NOT
81201: OR
81202: IFFALSE 81206
// exit ;
81204: GO 81868
// weapon := GetWeapon ( vehicle ) ;
81206: LD_ADDR_VAR 0 7
81210: PUSH
81211: LD_VAR 0 1
81215: PPUSH
81216: CALL_OW 264
81220: ST_TO_ADDR
// if weapon = ar_miner then
81221: LD_VAR 0 7
81225: PUSH
81226: LD_INT 81
81228: EQUAL
81229: IFFALSE 81286
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
81231: LD_ADDR_EXP 116
81235: PUSH
81236: LD_EXP 116
81240: PPUSH
81241: LD_EXP 116
81245: PUSH
81246: LD_INT 1
81248: PLUS
81249: PPUSH
81250: LD_VAR 0 1
81254: PPUSH
81255: CALL_OW 1
81259: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81260: LD_ADDR_EXP 117
81264: PUSH
81265: LD_EXP 117
81269: PPUSH
81270: LD_EXP 117
81274: PUSH
81275: LD_INT 1
81277: PLUS
81278: PPUSH
81279: EMPTY
81280: PPUSH
81281: CALL_OW 1
81285: ST_TO_ADDR
// end ; if not factoryWaypoints then
81286: LD_EXP 105
81290: NOT
81291: IFFALSE 81295
// exit ;
81293: GO 81868
// for i := 1 to Count ( factoryWaypoints ) do
81295: LD_ADDR_VAR 0 4
81299: PUSH
81300: DOUBLE
81301: LD_INT 1
81303: DEC
81304: ST_TO_ADDR
81305: LD_EXP 105
81309: PPUSH
81310: CALL 23451 0 1
81314: PUSH
81315: FOR_TO
81316: IFFALSE 81866
// if factoryWaypoints [ i ] [ 2 ] = factory then
81318: LD_EXP 105
81322: PUSH
81323: LD_VAR 0 4
81327: ARRAY
81328: PUSH
81329: LD_INT 2
81331: ARRAY
81332: PUSH
81333: LD_VAR 0 2
81337: EQUAL
81338: IFFALSE 81864
// begin if GetControl ( vehicle ) = control_manual then
81340: LD_VAR 0 1
81344: PPUSH
81345: CALL_OW 263
81349: PUSH
81350: LD_INT 1
81352: EQUAL
81353: IFFALSE 81717
// begin driver := IsDrivenBy ( vehicle ) ;
81355: LD_ADDR_VAR 0 5
81359: PUSH
81360: LD_VAR 0 1
81364: PPUSH
81365: CALL_OW 311
81369: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
81370: LD_VAR 0 5
81374: PUSH
81375: LD_EXP 106
81379: IN
81380: IFTRUE 81394
81382: PUSH
81383: LD_VAR 0 1
81387: PUSH
81388: LD_EXP 106
81392: IN
81393: OR
81394: IFFALSE 81400
// exit ;
81396: POP
81397: POP
81398: GO 81868
// if not HasTask ( driver ) then
81400: LD_VAR 0 5
81404: PPUSH
81405: CALL_OW 314
81409: NOT
81410: IFFALSE 81715
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
81412: LD_ADDR_EXP 106
81416: PUSH
81417: LD_EXP 106
81421: PPUSH
81422: LD_VAR 0 5
81426: PPUSH
81427: CALL 59427 0 2
81431: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
81432: LD_ADDR_EXP 106
81436: PUSH
81437: LD_EXP 106
81441: PPUSH
81442: LD_VAR 0 1
81446: PPUSH
81447: CALL 59427 0 2
81451: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
81452: LD_ADDR_VAR 0 6
81456: PUSH
81457: LD_EXP 105
81461: PUSH
81462: LD_VAR 0 4
81466: ARRAY
81467: PUSH
81468: LD_INT 3
81470: ARRAY
81471: PPUSH
81472: LD_EXP 105
81476: PUSH
81477: LD_VAR 0 4
81481: ARRAY
81482: PUSH
81483: LD_INT 4
81485: ARRAY
81486: PPUSH
81487: CALL_OW 428
81491: ST_TO_ADDR
// if hex then
81492: LD_VAR 0 6
81496: IFFALSE 81514
// ComMoveUnit ( driver , hex ) else
81498: LD_VAR 0 5
81502: PPUSH
81503: LD_VAR 0 6
81507: PPUSH
81508: CALL_OW 112
81512: GO 81598
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
81514: LD_VAR 0 1
81518: PPUSH
81519: LD_EXP 105
81523: PUSH
81524: LD_VAR 0 4
81528: ARRAY
81529: PUSH
81530: LD_INT 3
81532: ARRAY
81533: PPUSH
81534: LD_EXP 105
81538: PUSH
81539: LD_VAR 0 4
81543: ARRAY
81544: PUSH
81545: LD_INT 4
81547: ARRAY
81548: PPUSH
81549: CALL_OW 297
81553: PUSH
81554: LD_INT 0
81556: GREATER
81557: IFFALSE 81598
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
81559: LD_VAR 0 5
81563: PPUSH
81564: LD_EXP 105
81568: PUSH
81569: LD_VAR 0 4
81573: ARRAY
81574: PUSH
81575: LD_INT 3
81577: ARRAY
81578: PPUSH
81579: LD_EXP 105
81583: PUSH
81584: LD_VAR 0 4
81588: ARRAY
81589: PUSH
81590: LD_INT 4
81592: ARRAY
81593: PPUSH
81594: CALL_OW 111
// AddComExitVehicle ( driver ) ;
81598: LD_VAR 0 5
81602: PPUSH
81603: CALL_OW 181
// if Multiplayer then
81607: LD_OWVAR 4
81611: IFFALSE 81660
// begin repeat wait ( 10 ) ;
81613: LD_INT 10
81615: PPUSH
81616: CALL_OW 67
// until not IsInUnit ( driver ) ;
81620: LD_VAR 0 5
81624: PPUSH
81625: CALL_OW 310
81629: NOT
81630: IFFALSE 81613
// if not HasTask ( driver ) then
81632: LD_VAR 0 5
81636: PPUSH
81637: CALL_OW 314
81641: NOT
81642: IFFALSE 81658
// ComEnterUnit ( driver , factory ) ;
81644: LD_VAR 0 5
81648: PPUSH
81649: LD_VAR 0 2
81653: PPUSH
81654: CALL_OW 120
// end else
81658: GO 81674
// AddComEnterUnit ( driver , factory ) ;
81660: LD_VAR 0 5
81664: PPUSH
81665: LD_VAR 0 2
81669: PPUSH
81670: CALL_OW 180
// wait ( 0 0$1 ) ;
81674: LD_INT 35
81676: PPUSH
81677: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
81681: LD_ADDR_EXP 106
81685: PUSH
81686: LD_EXP 106
81690: PUSH
81691: LD_VAR 0 5
81695: DIFF
81696: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
81697: LD_ADDR_EXP 106
81701: PUSH
81702: LD_EXP 106
81706: PUSH
81707: LD_VAR 0 1
81711: DIFF
81712: ST_TO_ADDR
// break ;
81713: GO 81866
// end ; end else
81715: GO 81864
// if GetControl ( vehicle ) = control_remote then
81717: LD_VAR 0 1
81721: PPUSH
81722: CALL_OW 263
81726: PUSH
81727: LD_INT 2
81729: EQUAL
81730: IFFALSE 81816
// begin wait ( 0 0$2 ) ;
81732: LD_INT 70
81734: PPUSH
81735: CALL_OW 67
// repeat wait ( 10 ) ;
81739: LD_INT 10
81741: PPUSH
81742: CALL_OW 67
// Connect ( vehicle ) ;
81746: LD_VAR 0 1
81750: PPUSH
81751: CALL 29729 0 1
// until IsControledBy ( vehicle ) ;
81755: LD_VAR 0 1
81759: PPUSH
81760: CALL_OW 312
81764: IFFALSE 81739
// wait ( 10 ) ;
81766: LD_INT 10
81768: PPUSH
81769: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
81773: LD_VAR 0 1
81777: PPUSH
81778: LD_EXP 105
81782: PUSH
81783: LD_VAR 0 4
81787: ARRAY
81788: PUSH
81789: LD_INT 3
81791: ARRAY
81792: PPUSH
81793: LD_EXP 105
81797: PUSH
81798: LD_VAR 0 4
81802: ARRAY
81803: PUSH
81804: LD_INT 4
81806: ARRAY
81807: PPUSH
81808: CALL_OW 111
// break ;
81812: GO 81866
// end else
81814: GO 81864
// begin wait ( 0 0$3 ) ;
81816: LD_INT 105
81818: PPUSH
81819: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
81823: LD_VAR 0 1
81827: PPUSH
81828: LD_EXP 105
81832: PUSH
81833: LD_VAR 0 4
81837: ARRAY
81838: PUSH
81839: LD_INT 3
81841: ARRAY
81842: PPUSH
81843: LD_EXP 105
81847: PUSH
81848: LD_VAR 0 4
81852: ARRAY
81853: PUSH
81854: LD_INT 4
81856: ARRAY
81857: PPUSH
81858: CALL_OW 111
// break ;
81862: GO 81866
// end ; end ;
81864: GO 81315
81866: POP
81867: POP
// end ;
81868: LD_VAR 0 3
81872: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
81873: LD_INT 0
81875: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
81876: LD_VAR 0 1
81880: PUSH
81881: LD_INT 250
81883: EQUAL
81884: IFFALSE 81901
81886: PUSH
81887: LD_VAR 0 2
81891: PPUSH
81892: CALL_OW 264
81896: PUSH
81897: LD_INT 81
81899: EQUAL
81900: AND
81901: IFFALSE 81922
// MinerPlaceMine ( unit , x , y ) ;
81903: LD_VAR 0 2
81907: PPUSH
81908: LD_VAR 0 4
81912: PPUSH
81913: LD_VAR 0 5
81917: PPUSH
81918: CALL 85268 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
81922: LD_VAR 0 1
81926: PUSH
81927: LD_INT 251
81929: EQUAL
81930: IFFALSE 81947
81932: PUSH
81933: LD_VAR 0 2
81937: PPUSH
81938: CALL_OW 264
81942: PUSH
81943: LD_INT 81
81945: EQUAL
81946: AND
81947: IFFALSE 81968
// MinerDetonateMine ( unit , x , y ) ;
81949: LD_VAR 0 2
81953: PPUSH
81954: LD_VAR 0 4
81958: PPUSH
81959: LD_VAR 0 5
81963: PPUSH
81964: CALL 85675 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
81968: LD_VAR 0 1
81972: PUSH
81973: LD_INT 252
81975: EQUAL
81976: IFFALSE 81993
81978: PUSH
81979: LD_VAR 0 2
81983: PPUSH
81984: CALL_OW 264
81988: PUSH
81989: LD_INT 81
81991: EQUAL
81992: AND
81993: IFFALSE 82014
// MinerCreateMinefield ( unit , x , y ) ;
81995: LD_VAR 0 2
81999: PPUSH
82000: LD_VAR 0 4
82004: PPUSH
82005: LD_VAR 0 5
82009: PPUSH
82010: CALL 85907 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
82014: LD_VAR 0 1
82018: PUSH
82019: LD_INT 253
82021: EQUAL
82022: IFFALSE 82039
82024: PUSH
82025: LD_VAR 0 2
82029: PPUSH
82030: CALL_OW 257
82034: PUSH
82035: LD_INT 5
82037: EQUAL
82038: AND
82039: IFFALSE 82060
// ComBinocular ( unit , x , y ) ;
82041: LD_VAR 0 2
82045: PPUSH
82046: LD_VAR 0 4
82050: PPUSH
82051: LD_VAR 0 5
82055: PPUSH
82056: CALL 86282 0 3
// if selectedUnit then
82060: LD_VAR 0 3
82064: IFFALSE 82124
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
82066: LD_VAR 0 1
82070: PUSH
82071: LD_INT 254
82073: EQUAL
82074: IFFALSE 82091
82076: PUSH
82077: LD_VAR 0 2
82081: PPUSH
82082: CALL_OW 264
82086: PUSH
82087: LD_INT 99
82089: EQUAL
82090: AND
82091: IFFALSE 82108
82093: PUSH
82094: LD_VAR 0 3
82098: PPUSH
82099: CALL_OW 263
82103: PUSH
82104: LD_INT 3
82106: EQUAL
82107: AND
82108: IFFALSE 82124
// HackDestroyVehicle ( unit , selectedUnit ) ;
82110: LD_VAR 0 2
82114: PPUSH
82115: LD_VAR 0 3
82119: PPUSH
82120: CALL 84458 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
82124: LD_VAR 0 1
82128: PUSH
82129: LD_INT 255
82131: EQUAL
82132: IFFALSE 82156
82134: PUSH
82135: LD_VAR 0 2
82139: PPUSH
82140: CALL_OW 264
82144: PUSH
82145: LD_INT 14
82147: PUSH
82148: LD_INT 53
82150: PUSH
82151: EMPTY
82152: LIST
82153: LIST
82154: IN
82155: AND
82156: IFFALSE 82174
82158: PUSH
82159: LD_VAR 0 4
82163: PPUSH
82164: LD_VAR 0 5
82168: PPUSH
82169: CALL_OW 488
82173: AND
82174: IFFALSE 82198
// CutTreeXYR ( unit , x , y , 12 ) ;
82176: LD_VAR 0 2
82180: PPUSH
82181: LD_VAR 0 4
82185: PPUSH
82186: LD_VAR 0 5
82190: PPUSH
82191: LD_INT 12
82193: PPUSH
82194: CALL 82389 0 4
// if cmd = 256 then
82198: LD_VAR 0 1
82202: PUSH
82203: LD_INT 256
82205: EQUAL
82206: IFFALSE 82227
// SetFactoryWaypoint ( unit , x , y ) ;
82208: LD_VAR 0 2
82212: PPUSH
82213: LD_VAR 0 4
82217: PPUSH
82218: LD_VAR 0 5
82222: PPUSH
82223: CALL 79505 0 3
// if cmd = 257 then
82227: LD_VAR 0 1
82231: PUSH
82232: LD_INT 257
82234: EQUAL
82235: IFFALSE 82256
// SetWarehouseGatheringPoint ( unit , x , y ) ;
82237: LD_VAR 0 2
82241: PPUSH
82242: LD_VAR 0 4
82246: PPUSH
82247: LD_VAR 0 5
82251: PPUSH
82252: CALL 80001 0 3
// if cmd = 258 then
82256: LD_VAR 0 1
82260: PUSH
82261: LD_INT 258
82263: EQUAL
82264: IFFALSE 82288
// BurnTreeXYR ( unit , x , y , 8 ) ;
82266: LD_VAR 0 2
82270: PPUSH
82271: LD_VAR 0 4
82275: PPUSH
82276: LD_VAR 0 5
82280: PPUSH
82281: LD_INT 8
82283: PPUSH
82284: CALL 82811 0 4
// end ;
82288: LD_VAR 0 6
82292: RET
// export function ComRadiation ( un ) ; var eff ; begin
82293: LD_INT 0
82295: PPUSH
82296: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
82297: LD_VAR 0 1
82301: PPUSH
82302: CALL_OW 264
82306: PUSH
82307: LD_INT 91
82309: NONEQUAL
82310: IFFALSE 82314
// exit ;
82312: GO 82384
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82314: LD_INT 68
82316: PPUSH
82317: LD_VAR 0 1
82321: PPUSH
82322: CALL_OW 255
82326: PPUSH
82327: CALL_OW 321
82331: PUSH
82332: LD_INT 2
82334: EQUAL
82335: IFFALSE 82347
// eff := 50 else
82337: LD_ADDR_VAR 0 3
82341: PUSH
82342: LD_INT 50
82344: ST_TO_ADDR
82345: GO 82355
// eff := 25 ;
82347: LD_ADDR_VAR 0 3
82351: PUSH
82352: LD_INT 25
82354: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
82355: LD_VAR 0 1
82359: PPUSH
82360: CALL_OW 250
82364: PPUSH
82365: LD_VAR 0 1
82369: PPUSH
82370: CALL_OW 251
82374: PPUSH
82375: LD_VAR 0 3
82379: PPUSH
82380: CALL_OW 495
// end ;
82384: LD_VAR 0 2
82388: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
82389: LD_INT 0
82391: PPUSH
82392: PPUSH
82393: PPUSH
82394: PPUSH
82395: PPUSH
82396: PPUSH
82397: PPUSH
82398: PPUSH
82399: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
82400: LD_VAR 0 1
82404: PPUSH
82405: CALL_OW 302
82409: NOT
82410: IFTRUE 82429
82412: PUSH
82413: LD_VAR 0 2
82417: PPUSH
82418: LD_VAR 0 3
82422: PPUSH
82423: CALL_OW 488
82427: NOT
82428: OR
82429: IFTRUE 82438
82431: PUSH
82432: LD_VAR 0 4
82436: NOT
82437: OR
82438: IFFALSE 82442
// exit ;
82440: GO 82806
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
82442: LD_VAR 0 1
82446: PPUSH
82447: CALL_OW 437
82451: PPUSH
82452: CALL 23451 0 1
82456: PUSH
82457: LD_INT 10
82459: GREATER
82460: IFFALSE 82464
// exit ;
82462: GO 82806
// list := [ ] ;
82464: LD_ADDR_VAR 0 13
82468: PUSH
82469: EMPTY
82470: ST_TO_ADDR
// if x - r < 0 then
82471: LD_VAR 0 2
82475: PUSH
82476: LD_VAR 0 4
82480: MINUS
82481: PUSH
82482: LD_INT 0
82484: LESS
82485: IFFALSE 82497
// min_x := 0 else
82487: LD_ADDR_VAR 0 7
82491: PUSH
82492: LD_INT 0
82494: ST_TO_ADDR
82495: GO 82513
// min_x := x - r ;
82497: LD_ADDR_VAR 0 7
82501: PUSH
82502: LD_VAR 0 2
82506: PUSH
82507: LD_VAR 0 4
82511: MINUS
82512: ST_TO_ADDR
// if y - r < 0 then
82513: LD_VAR 0 3
82517: PUSH
82518: LD_VAR 0 4
82522: MINUS
82523: PUSH
82524: LD_INT 0
82526: LESS
82527: IFFALSE 82539
// min_y := 0 else
82529: LD_ADDR_VAR 0 8
82533: PUSH
82534: LD_INT 0
82536: ST_TO_ADDR
82537: GO 82555
// min_y := y - r ;
82539: LD_ADDR_VAR 0 8
82543: PUSH
82544: LD_VAR 0 3
82548: PUSH
82549: LD_VAR 0 4
82553: MINUS
82554: ST_TO_ADDR
// max_x := x + r ;
82555: LD_ADDR_VAR 0 9
82559: PUSH
82560: LD_VAR 0 2
82564: PUSH
82565: LD_VAR 0 4
82569: PLUS
82570: ST_TO_ADDR
// max_y := y + r ;
82571: LD_ADDR_VAR 0 10
82575: PUSH
82576: LD_VAR 0 3
82580: PUSH
82581: LD_VAR 0 4
82585: PLUS
82586: ST_TO_ADDR
// for _x = min_x to max_x do
82587: LD_ADDR_VAR 0 11
82591: PUSH
82592: DOUBLE
82593: LD_VAR 0 7
82597: DEC
82598: ST_TO_ADDR
82599: LD_VAR 0 9
82603: PUSH
82604: FOR_TO
82605: IFFALSE 82724
// for _y = min_y to max_y do
82607: LD_ADDR_VAR 0 12
82611: PUSH
82612: DOUBLE
82613: LD_VAR 0 8
82617: DEC
82618: ST_TO_ADDR
82619: LD_VAR 0 10
82623: PUSH
82624: FOR_TO
82625: IFFALSE 82720
// begin if not ValidHex ( _x , _y ) then
82627: LD_VAR 0 11
82631: PPUSH
82632: LD_VAR 0 12
82636: PPUSH
82637: CALL_OW 488
82641: NOT
82642: IFFALSE 82646
// continue ;
82644: GO 82624
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
82646: LD_VAR 0 11
82650: PPUSH
82651: LD_VAR 0 12
82655: PPUSH
82656: CALL_OW 351
82660: IFFALSE 82678
82662: PUSH
82663: LD_VAR 0 11
82667: PPUSH
82668: LD_VAR 0 12
82672: PPUSH
82673: CALL_OW 554
82677: AND
82678: IFFALSE 82718
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
82680: LD_ADDR_VAR 0 13
82684: PUSH
82685: LD_VAR 0 13
82689: PPUSH
82690: LD_VAR 0 13
82694: PUSH
82695: LD_INT 1
82697: PLUS
82698: PPUSH
82699: LD_VAR 0 11
82703: PUSH
82704: LD_VAR 0 12
82708: PUSH
82709: EMPTY
82710: LIST
82711: LIST
82712: PPUSH
82713: CALL_OW 2
82717: ST_TO_ADDR
// end ;
82718: GO 82624
82720: POP
82721: POP
82722: GO 82604
82724: POP
82725: POP
// if not list then
82726: LD_VAR 0 13
82730: NOT
82731: IFFALSE 82735
// exit ;
82733: GO 82806
// for i in list do
82735: LD_ADDR_VAR 0 6
82739: PUSH
82740: LD_VAR 0 13
82744: PUSH
82745: FOR_IN
82746: IFFALSE 82804
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
82748: LD_VAR 0 1
82752: PPUSH
82753: LD_STRING M
82755: PUSH
82756: LD_VAR 0 6
82760: PUSH
82761: LD_INT 1
82763: ARRAY
82764: PUSH
82765: LD_VAR 0 6
82769: PUSH
82770: LD_INT 2
82772: ARRAY
82773: PUSH
82774: LD_INT 0
82776: PUSH
82777: LD_INT 0
82779: PUSH
82780: LD_INT 0
82782: PUSH
82783: LD_INT 0
82785: PUSH
82786: EMPTY
82787: LIST
82788: LIST
82789: LIST
82790: LIST
82791: LIST
82792: LIST
82793: LIST
82794: PUSH
82795: EMPTY
82796: LIST
82797: PPUSH
82798: CALL_OW 447
82802: GO 82745
82804: POP
82805: POP
// end ;
82806: LD_VAR 0 5
82810: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
82811: LD_INT 0
82813: PPUSH
82814: PPUSH
82815: PPUSH
82816: PPUSH
82817: PPUSH
82818: PPUSH
82819: PPUSH
82820: PPUSH
82821: PPUSH
82822: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
82823: LD_VAR 0 1
82827: PPUSH
82828: CALL_OW 302
82832: NOT
82833: IFTRUE 82852
82835: PUSH
82836: LD_VAR 0 2
82840: PPUSH
82841: LD_VAR 0 3
82845: PPUSH
82846: CALL_OW 488
82850: NOT
82851: OR
82852: IFTRUE 82861
82854: PUSH
82855: LD_VAR 0 4
82859: NOT
82860: OR
82861: IFFALSE 82865
// exit ;
82863: GO 83404
// if Count ( GetTaskList ( flame ) ) > 10 then
82865: LD_VAR 0 1
82869: PPUSH
82870: CALL_OW 437
82874: PPUSH
82875: CALL 23451 0 1
82879: PUSH
82880: LD_INT 10
82882: GREATER
82883: IFFALSE 82887
// exit ;
82885: GO 83404
// list := [ ] ;
82887: LD_ADDR_VAR 0 13
82891: PUSH
82892: EMPTY
82893: ST_TO_ADDR
// if x - r < 0 then
82894: LD_VAR 0 2
82898: PUSH
82899: LD_VAR 0 4
82903: MINUS
82904: PUSH
82905: LD_INT 0
82907: LESS
82908: IFFALSE 82920
// min_x := 0 else
82910: LD_ADDR_VAR 0 7
82914: PUSH
82915: LD_INT 0
82917: ST_TO_ADDR
82918: GO 82936
// min_x := x - r ;
82920: LD_ADDR_VAR 0 7
82924: PUSH
82925: LD_VAR 0 2
82929: PUSH
82930: LD_VAR 0 4
82934: MINUS
82935: ST_TO_ADDR
// if y - r < 0 then
82936: LD_VAR 0 3
82940: PUSH
82941: LD_VAR 0 4
82945: MINUS
82946: PUSH
82947: LD_INT 0
82949: LESS
82950: IFFALSE 82962
// min_y := 0 else
82952: LD_ADDR_VAR 0 8
82956: PUSH
82957: LD_INT 0
82959: ST_TO_ADDR
82960: GO 82978
// min_y := y - r ;
82962: LD_ADDR_VAR 0 8
82966: PUSH
82967: LD_VAR 0 3
82971: PUSH
82972: LD_VAR 0 4
82976: MINUS
82977: ST_TO_ADDR
// max_x := x + r ;
82978: LD_ADDR_VAR 0 9
82982: PUSH
82983: LD_VAR 0 2
82987: PUSH
82988: LD_VAR 0 4
82992: PLUS
82993: ST_TO_ADDR
// max_y := y + r ;
82994: LD_ADDR_VAR 0 10
82998: PUSH
82999: LD_VAR 0 3
83003: PUSH
83004: LD_VAR 0 4
83008: PLUS
83009: ST_TO_ADDR
// for _x = min_x to max_x do
83010: LD_ADDR_VAR 0 11
83014: PUSH
83015: DOUBLE
83016: LD_VAR 0 7
83020: DEC
83021: ST_TO_ADDR
83022: LD_VAR 0 9
83026: PUSH
83027: FOR_TO
83028: IFFALSE 83147
// for _y = min_y to max_y do
83030: LD_ADDR_VAR 0 12
83034: PUSH
83035: DOUBLE
83036: LD_VAR 0 8
83040: DEC
83041: ST_TO_ADDR
83042: LD_VAR 0 10
83046: PUSH
83047: FOR_TO
83048: IFFALSE 83143
// begin if not ValidHex ( _x , _y ) then
83050: LD_VAR 0 11
83054: PPUSH
83055: LD_VAR 0 12
83059: PPUSH
83060: CALL_OW 488
83064: NOT
83065: IFFALSE 83069
// continue ;
83067: GO 83047
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83069: LD_VAR 0 11
83073: PPUSH
83074: LD_VAR 0 12
83078: PPUSH
83079: CALL_OW 351
83083: IFFALSE 83101
83085: PUSH
83086: LD_VAR 0 11
83090: PPUSH
83091: LD_VAR 0 12
83095: PPUSH
83096: CALL_OW 554
83100: AND
83101: IFFALSE 83141
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83103: LD_ADDR_VAR 0 13
83107: PUSH
83108: LD_VAR 0 13
83112: PPUSH
83113: LD_VAR 0 13
83117: PUSH
83118: LD_INT 1
83120: PLUS
83121: PPUSH
83122: LD_VAR 0 11
83126: PUSH
83127: LD_VAR 0 12
83131: PUSH
83132: EMPTY
83133: LIST
83134: LIST
83135: PPUSH
83136: CALL_OW 2
83140: ST_TO_ADDR
// end ;
83141: GO 83047
83143: POP
83144: POP
83145: GO 83027
83147: POP
83148: POP
// if not list then
83149: LD_VAR 0 13
83153: NOT
83154: IFFALSE 83158
// exit ;
83156: GO 83404
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
83158: LD_ADDR_VAR 0 13
83162: PUSH
83163: LD_VAR 0 1
83167: PPUSH
83168: LD_VAR 0 13
83172: PPUSH
83173: LD_INT 1
83175: PPUSH
83176: LD_INT 1
83178: PPUSH
83179: CALL 26857 0 4
83183: ST_TO_ADDR
// ComStop ( flame ) ;
83184: LD_VAR 0 1
83188: PPUSH
83189: CALL_OW 141
// for i in list do
83193: LD_ADDR_VAR 0 6
83197: PUSH
83198: LD_VAR 0 13
83202: PUSH
83203: FOR_IN
83204: IFFALSE 83235
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
83206: LD_VAR 0 1
83210: PPUSH
83211: LD_VAR 0 6
83215: PUSH
83216: LD_INT 1
83218: ARRAY
83219: PPUSH
83220: LD_VAR 0 6
83224: PUSH
83225: LD_INT 2
83227: ARRAY
83228: PPUSH
83229: CALL_OW 176
83233: GO 83203
83235: POP
83236: POP
// repeat wait ( 0 0$1 ) ;
83237: LD_INT 35
83239: PPUSH
83240: CALL_OW 67
// task := GetTaskList ( flame ) ;
83244: LD_ADDR_VAR 0 14
83248: PUSH
83249: LD_VAR 0 1
83253: PPUSH
83254: CALL_OW 437
83258: ST_TO_ADDR
// if not task then
83259: LD_VAR 0 14
83263: NOT
83264: IFFALSE 83268
// exit ;
83266: GO 83404
// if task [ 1 ] [ 1 ] <> | then
83268: LD_VAR 0 14
83272: PUSH
83273: LD_INT 1
83275: ARRAY
83276: PUSH
83277: LD_INT 1
83279: ARRAY
83280: PUSH
83281: LD_STRING |
83283: NONEQUAL
83284: IFFALSE 83288
// exit ;
83286: GO 83404
// _x := task [ 1 ] [ 2 ] ;
83288: LD_ADDR_VAR 0 11
83292: PUSH
83293: LD_VAR 0 14
83297: PUSH
83298: LD_INT 1
83300: ARRAY
83301: PUSH
83302: LD_INT 2
83304: ARRAY
83305: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
83306: LD_ADDR_VAR 0 12
83310: PUSH
83311: LD_VAR 0 14
83315: PUSH
83316: LD_INT 1
83318: ARRAY
83319: PUSH
83320: LD_INT 3
83322: ARRAY
83323: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
83324: LD_VAR 0 11
83328: PPUSH
83329: LD_VAR 0 12
83333: PPUSH
83334: CALL_OW 351
83338: NOT
83339: IFTRUE 83358
83341: PUSH
83342: LD_VAR 0 11
83346: PPUSH
83347: LD_VAR 0 12
83351: PPUSH
83352: CALL_OW 554
83356: NOT
83357: OR
83358: IFFALSE 83392
// begin task := Delete ( task , 1 ) ;
83360: LD_ADDR_VAR 0 14
83364: PUSH
83365: LD_VAR 0 14
83369: PPUSH
83370: LD_INT 1
83372: PPUSH
83373: CALL_OW 3
83377: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
83378: LD_VAR 0 1
83382: PPUSH
83383: LD_VAR 0 14
83387: PPUSH
83388: CALL_OW 446
// end ; until not HasTask ( flame ) ;
83392: LD_VAR 0 1
83396: PPUSH
83397: CALL_OW 314
83401: NOT
83402: IFFALSE 83237
// end ;
83404: LD_VAR 0 5
83408: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
83409: LD_EXP 109
83413: NOT
83414: IFFALSE 83464
83416: GO 83418
83418: DISABLE
// begin initHack := true ;
83419: LD_ADDR_EXP 109
83423: PUSH
83424: LD_INT 1
83426: ST_TO_ADDR
// hackTanks := [ ] ;
83427: LD_ADDR_EXP 110
83431: PUSH
83432: EMPTY
83433: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
83434: LD_ADDR_EXP 111
83438: PUSH
83439: EMPTY
83440: ST_TO_ADDR
// hackLimit := 3 ;
83441: LD_ADDR_EXP 112
83445: PUSH
83446: LD_INT 3
83448: ST_TO_ADDR
// hackDist := 12 ;
83449: LD_ADDR_EXP 113
83453: PUSH
83454: LD_INT 12
83456: ST_TO_ADDR
// hackCounter := [ ] ;
83457: LD_ADDR_EXP 114
83461: PUSH
83462: EMPTY
83463: ST_TO_ADDR
// end ;
83464: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
83465: LD_EXP 109
83469: IFFALSE 83487
83471: PUSH
83472: LD_INT 34
83474: PUSH
83475: LD_INT 99
83477: PUSH
83478: EMPTY
83479: LIST
83480: LIST
83481: PPUSH
83482: CALL_OW 69
83486: AND
83487: IFFALSE 83740
83489: GO 83491
83491: DISABLE
83492: LD_INT 0
83494: PPUSH
83495: PPUSH
// begin enable ;
83496: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
83497: LD_ADDR_VAR 0 1
83501: PUSH
83502: LD_INT 34
83504: PUSH
83505: LD_INT 99
83507: PUSH
83508: EMPTY
83509: LIST
83510: LIST
83511: PPUSH
83512: CALL_OW 69
83516: PUSH
83517: FOR_IN
83518: IFFALSE 83738
// begin if not i in hackTanks then
83520: LD_VAR 0 1
83524: PUSH
83525: LD_EXP 110
83529: IN
83530: NOT
83531: IFFALSE 83614
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
83533: LD_ADDR_EXP 110
83537: PUSH
83538: LD_EXP 110
83542: PPUSH
83543: LD_EXP 110
83547: PUSH
83548: LD_INT 1
83550: PLUS
83551: PPUSH
83552: LD_VAR 0 1
83556: PPUSH
83557: CALL_OW 1
83561: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
83562: LD_ADDR_EXP 111
83566: PUSH
83567: LD_EXP 111
83571: PPUSH
83572: LD_EXP 111
83576: PUSH
83577: LD_INT 1
83579: PLUS
83580: PPUSH
83581: EMPTY
83582: PPUSH
83583: CALL_OW 1
83587: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
83588: LD_ADDR_EXP 114
83592: PUSH
83593: LD_EXP 114
83597: PPUSH
83598: LD_EXP 114
83602: PUSH
83603: LD_INT 1
83605: PLUS
83606: PPUSH
83607: EMPTY
83608: PPUSH
83609: CALL_OW 1
83613: ST_TO_ADDR
// end ; if not IsOk ( i ) then
83614: LD_VAR 0 1
83618: PPUSH
83619: CALL_OW 302
83623: NOT
83624: IFFALSE 83637
// begin HackUnlinkAll ( i ) ;
83626: LD_VAR 0 1
83630: PPUSH
83631: CALL 83743 0 1
// continue ;
83635: GO 83517
// end ; HackCheckCapturedStatus ( i ) ;
83637: LD_VAR 0 1
83641: PPUSH
83642: CALL 84188 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
83646: LD_ADDR_VAR 0 2
83650: PUSH
83651: LD_INT 81
83653: PUSH
83654: LD_VAR 0 1
83658: PPUSH
83659: CALL_OW 255
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: PUSH
83668: LD_INT 33
83670: PUSH
83671: LD_INT 3
83673: PUSH
83674: EMPTY
83675: LIST
83676: LIST
83677: PUSH
83678: LD_INT 91
83680: PUSH
83681: LD_VAR 0 1
83685: PUSH
83686: LD_EXP 113
83690: PUSH
83691: EMPTY
83692: LIST
83693: LIST
83694: LIST
83695: PUSH
83696: LD_INT 50
83698: PUSH
83699: EMPTY
83700: LIST
83701: PUSH
83702: EMPTY
83703: LIST
83704: LIST
83705: LIST
83706: LIST
83707: PPUSH
83708: CALL_OW 69
83712: ST_TO_ADDR
// if not tmp then
83713: LD_VAR 0 2
83717: NOT
83718: IFFALSE 83722
// continue ;
83720: GO 83517
// HackLink ( i , tmp ) ;
83722: LD_VAR 0 1
83726: PPUSH
83727: LD_VAR 0 2
83731: PPUSH
83732: CALL 83879 0 2
// end ;
83736: GO 83517
83738: POP
83739: POP
// end ;
83740: PPOPN 2
83742: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
83743: LD_INT 0
83745: PPUSH
83746: PPUSH
83747: PPUSH
// if not hack in hackTanks then
83748: LD_VAR 0 1
83752: PUSH
83753: LD_EXP 110
83757: IN
83758: NOT
83759: IFFALSE 83763
// exit ;
83761: GO 83874
// index := GetElementIndex ( hackTanks , hack ) ;
83763: LD_ADDR_VAR 0 4
83767: PUSH
83768: LD_EXP 110
83772: PPUSH
83773: LD_VAR 0 1
83777: PPUSH
83778: CALL 26152 0 2
83782: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
83783: LD_EXP 111
83787: PUSH
83788: LD_VAR 0 4
83792: ARRAY
83793: IFFALSE 83874
// begin for i in hackTanksCaptured [ index ] do
83795: LD_ADDR_VAR 0 3
83799: PUSH
83800: LD_EXP 111
83804: PUSH
83805: LD_VAR 0 4
83809: ARRAY
83810: PUSH
83811: FOR_IN
83812: IFFALSE 83838
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
83814: LD_VAR 0 3
83818: PUSH
83819: LD_INT 1
83821: ARRAY
83822: PPUSH
83823: LD_VAR 0 3
83827: PUSH
83828: LD_INT 2
83830: ARRAY
83831: PPUSH
83832: CALL_OW 235
83836: GO 83811
83838: POP
83839: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
83840: LD_ADDR_EXP 111
83844: PUSH
83845: LD_EXP 111
83849: PPUSH
83850: LD_VAR 0 4
83854: PPUSH
83855: EMPTY
83856: PPUSH
83857: CALL_OW 1
83861: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
83862: LD_VAR 0 1
83866: PPUSH
83867: LD_INT 0
83869: PPUSH
83870: CALL_OW 505
// end ; end ;
83874: LD_VAR 0 2
83878: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
83879: LD_INT 0
83881: PPUSH
83882: PPUSH
83883: PPUSH
// if not hack in hackTanks or not vehicles then
83884: LD_VAR 0 1
83888: PUSH
83889: LD_EXP 110
83893: IN
83894: NOT
83895: IFTRUE 83904
83897: PUSH
83898: LD_VAR 0 2
83902: NOT
83903: OR
83904: IFFALSE 83908
// exit ;
83906: GO 84183
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
83908: LD_ADDR_VAR 0 2
83912: PUSH
83913: LD_VAR 0 1
83917: PPUSH
83918: LD_VAR 0 2
83922: PPUSH
83923: LD_INT 1
83925: PPUSH
83926: LD_INT 1
83928: PPUSH
83929: CALL 26804 0 4
83933: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
83934: LD_ADDR_VAR 0 5
83938: PUSH
83939: LD_EXP 110
83943: PPUSH
83944: LD_VAR 0 1
83948: PPUSH
83949: CALL 26152 0 2
83953: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
83954: LD_EXP 111
83958: PUSH
83959: LD_VAR 0 5
83963: ARRAY
83964: PUSH
83965: LD_EXP 112
83969: LESS
83970: IFFALSE 84159
// begin for i := 1 to vehicles do
83972: LD_ADDR_VAR 0 4
83976: PUSH
83977: DOUBLE
83978: LD_INT 1
83980: DEC
83981: ST_TO_ADDR
83982: LD_VAR 0 2
83986: PUSH
83987: FOR_TO
83988: IFFALSE 84157
// begin if hackTanksCaptured [ index ] = hackLimit then
83990: LD_EXP 111
83994: PUSH
83995: LD_VAR 0 5
83999: ARRAY
84000: PUSH
84001: LD_EXP 112
84005: EQUAL
84006: IFFALSE 84010
// break ;
84008: GO 84157
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84010: LD_ADDR_EXP 114
84014: PUSH
84015: LD_EXP 114
84019: PPUSH
84020: LD_VAR 0 5
84024: PPUSH
84025: LD_EXP 114
84029: PUSH
84030: LD_VAR 0 5
84034: ARRAY
84035: PUSH
84036: LD_INT 1
84038: PLUS
84039: PPUSH
84040: CALL_OW 1
84044: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84045: LD_ADDR_EXP 111
84049: PUSH
84050: LD_EXP 111
84054: PPUSH
84055: LD_VAR 0 5
84059: PUSH
84060: LD_EXP 111
84064: PUSH
84065: LD_VAR 0 5
84069: ARRAY
84070: PUSH
84071: LD_INT 1
84073: PLUS
84074: PUSH
84075: EMPTY
84076: LIST
84077: LIST
84078: PPUSH
84079: LD_VAR 0 2
84083: PUSH
84084: LD_VAR 0 4
84088: ARRAY
84089: PUSH
84090: LD_VAR 0 2
84094: PUSH
84095: LD_VAR 0 4
84099: ARRAY
84100: PPUSH
84101: CALL_OW 255
84105: PUSH
84106: EMPTY
84107: LIST
84108: LIST
84109: PPUSH
84110: CALL 26369 0 3
84114: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84115: LD_VAR 0 2
84119: PUSH
84120: LD_VAR 0 4
84124: ARRAY
84125: PPUSH
84126: LD_VAR 0 1
84130: PPUSH
84131: CALL_OW 255
84135: PPUSH
84136: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84140: LD_VAR 0 2
84144: PUSH
84145: LD_VAR 0 4
84149: ARRAY
84150: PPUSH
84151: CALL_OW 141
// end ;
84155: GO 83987
84157: POP
84158: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84159: LD_VAR 0 1
84163: PPUSH
84164: LD_EXP 111
84168: PUSH
84169: LD_VAR 0 5
84173: ARRAY
84174: PUSH
84175: LD_INT 0
84177: PLUS
84178: PPUSH
84179: CALL_OW 505
// end ;
84183: LD_VAR 0 3
84187: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84188: LD_INT 0
84190: PPUSH
84191: PPUSH
84192: PPUSH
84193: PPUSH
// if not hack in hackTanks then
84194: LD_VAR 0 1
84198: PUSH
84199: LD_EXP 110
84203: IN
84204: NOT
84205: IFFALSE 84209
// exit ;
84207: GO 84453
// index := GetElementIndex ( hackTanks , hack ) ;
84209: LD_ADDR_VAR 0 4
84213: PUSH
84214: LD_EXP 110
84218: PPUSH
84219: LD_VAR 0 1
84223: PPUSH
84224: CALL 26152 0 2
84228: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84229: LD_ADDR_VAR 0 3
84233: PUSH
84234: DOUBLE
84235: LD_EXP 111
84239: PUSH
84240: LD_VAR 0 4
84244: ARRAY
84245: INC
84246: ST_TO_ADDR
84247: LD_INT 1
84249: PUSH
84250: FOR_DOWNTO
84251: IFFALSE 84427
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84253: LD_ADDR_VAR 0 5
84257: PUSH
84258: LD_EXP 111
84262: PUSH
84263: LD_VAR 0 4
84267: ARRAY
84268: PUSH
84269: LD_VAR 0 3
84273: ARRAY
84274: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84275: LD_VAR 0 5
84279: PUSH
84280: LD_INT 1
84282: ARRAY
84283: PPUSH
84284: CALL_OW 302
84288: NOT
84289: IFTRUE 84317
84291: PUSH
84292: LD_VAR 0 5
84296: PUSH
84297: LD_INT 1
84299: ARRAY
84300: PPUSH
84301: CALL_OW 255
84305: PUSH
84306: LD_VAR 0 1
84310: PPUSH
84311: CALL_OW 255
84315: NONEQUAL
84316: OR
84317: IFFALSE 84425
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84319: LD_VAR 0 5
84323: PUSH
84324: LD_INT 1
84326: ARRAY
84327: PPUSH
84328: CALL_OW 305
84332: IFFALSE 84360
84334: PUSH
84335: LD_VAR 0 5
84339: PUSH
84340: LD_INT 1
84342: ARRAY
84343: PPUSH
84344: CALL_OW 255
84348: PUSH
84349: LD_VAR 0 1
84353: PPUSH
84354: CALL_OW 255
84358: EQUAL
84359: AND
84360: IFFALSE 84384
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
84362: LD_VAR 0 5
84366: PUSH
84367: LD_INT 1
84369: ARRAY
84370: PPUSH
84371: LD_VAR 0 5
84375: PUSH
84376: LD_INT 2
84378: ARRAY
84379: PPUSH
84380: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
84384: LD_ADDR_EXP 111
84388: PUSH
84389: LD_EXP 111
84393: PPUSH
84394: LD_VAR 0 4
84398: PPUSH
84399: LD_EXP 111
84403: PUSH
84404: LD_VAR 0 4
84408: ARRAY
84409: PPUSH
84410: LD_VAR 0 3
84414: PPUSH
84415: CALL_OW 3
84419: PPUSH
84420: CALL_OW 1
84424: ST_TO_ADDR
// end ; end ;
84425: GO 84250
84427: POP
84428: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84429: LD_VAR 0 1
84433: PPUSH
84434: LD_EXP 111
84438: PUSH
84439: LD_VAR 0 4
84443: ARRAY
84444: PUSH
84445: LD_INT 0
84447: PLUS
84448: PPUSH
84449: CALL_OW 505
// end ;
84453: LD_VAR 0 2
84457: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
84458: LD_INT 0
84460: PPUSH
84461: PPUSH
84462: PPUSH
84463: PPUSH
// if not hack in hackTanks then
84464: LD_VAR 0 1
84468: PUSH
84469: LD_EXP 110
84473: IN
84474: NOT
84475: IFFALSE 84479
// exit ;
84477: GO 84564
// index := GetElementIndex ( hackTanks , hack ) ;
84479: LD_ADDR_VAR 0 5
84483: PUSH
84484: LD_EXP 110
84488: PPUSH
84489: LD_VAR 0 1
84493: PPUSH
84494: CALL 26152 0 2
84498: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
84499: LD_ADDR_VAR 0 4
84503: PUSH
84504: DOUBLE
84505: LD_INT 1
84507: DEC
84508: ST_TO_ADDR
84509: LD_EXP 111
84513: PUSH
84514: LD_VAR 0 5
84518: ARRAY
84519: PUSH
84520: FOR_TO
84521: IFFALSE 84562
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
84523: LD_EXP 111
84527: PUSH
84528: LD_VAR 0 5
84532: ARRAY
84533: PUSH
84534: LD_VAR 0 4
84538: ARRAY
84539: PUSH
84540: LD_INT 1
84542: ARRAY
84543: PUSH
84544: LD_VAR 0 2
84548: EQUAL
84549: IFFALSE 84560
// KillUnit ( vehicle ) ;
84551: LD_VAR 0 2
84555: PPUSH
84556: CALL_OW 66
84560: GO 84520
84562: POP
84563: POP
// end ;
84564: LD_VAR 0 3
84568: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
84569: LD_EXP 115
84573: NOT
84574: IFFALSE 84707
84576: GO 84578
84578: DISABLE
84579: LD_INT 0
84581: PPUSH
// begin initMiner := true ;
84582: LD_ADDR_EXP 115
84586: PUSH
84587: LD_INT 1
84589: ST_TO_ADDR
// minersList := [ ] ;
84590: LD_ADDR_EXP 116
84594: PUSH
84595: EMPTY
84596: ST_TO_ADDR
// minerMinesList := [ ] ;
84597: LD_ADDR_EXP 117
84601: PUSH
84602: EMPTY
84603: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
84604: LD_ADDR_EXP 118
84608: PUSH
84609: LD_INT 10
84611: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
84612: LD_ADDR_VAR 0 1
84616: PUSH
84617: LD_INT 34
84619: PUSH
84620: LD_INT 81
84622: PUSH
84623: EMPTY
84624: LIST
84625: LIST
84626: PPUSH
84627: CALL_OW 69
84631: PUSH
84632: FOR_IN
84633: IFFALSE 84705
// begin if not i in minersList then
84635: LD_VAR 0 1
84639: PUSH
84640: LD_EXP 116
84644: IN
84645: NOT
84646: IFFALSE 84703
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
84648: LD_ADDR_EXP 116
84652: PUSH
84653: LD_EXP 116
84657: PPUSH
84658: LD_EXP 116
84662: PUSH
84663: LD_INT 1
84665: PLUS
84666: PPUSH
84667: LD_VAR 0 1
84671: PPUSH
84672: CALL_OW 1
84676: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
84677: LD_ADDR_EXP 117
84681: PUSH
84682: LD_EXP 117
84686: PPUSH
84687: LD_EXP 117
84691: PUSH
84692: LD_INT 1
84694: PLUS
84695: PPUSH
84696: EMPTY
84697: PPUSH
84698: CALL_OW 1
84702: ST_TO_ADDR
// end end ;
84703: GO 84632
84705: POP
84706: POP
// end ;
84707: PPOPN 1
84709: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
84710: LD_EXP 115
84714: IFFALSE 84745
84716: PUSH
84717: LD_EXP 117
84721: PPUSH
84722: CALL 23451 0 1
84726: IFTRUE 84744
84728: PUSH
84729: LD_INT 34
84731: PUSH
84732: LD_INT 81
84734: PUSH
84735: EMPTY
84736: LIST
84737: LIST
84738: PPUSH
84739: CALL_OW 69
84743: OR
84744: AND
84745: IFFALSE 85265
84747: GO 84749
84749: DISABLE
84750: LD_INT 0
84752: PPUSH
84753: PPUSH
84754: PPUSH
84755: PPUSH
// begin enable ;
84756: ENABLE
// for i := minerMinesList downto 1 do
84757: LD_ADDR_VAR 0 1
84761: PUSH
84762: DOUBLE
84763: LD_EXP 117
84767: INC
84768: ST_TO_ADDR
84769: LD_INT 1
84771: PUSH
84772: FOR_DOWNTO
84773: IFFALSE 85263
// begin side := GetSide ( minersList [ i ] ) ;
84775: LD_ADDR_VAR 0 3
84779: PUSH
84780: LD_EXP 116
84784: PUSH
84785: LD_VAR 0 1
84789: ARRAY
84790: PPUSH
84791: CALL_OW 255
84795: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
84796: LD_EXP 116
84800: PUSH
84801: LD_VAR 0 1
84805: ARRAY
84806: PPUSH
84807: CALL_OW 300
84811: IFFALSE 84832
84813: PUSH
84814: LD_VAR 0 3
84818: PUSH
84819: LD_OWVAR 2
84823: PUSH
84824: LD_INT 9
84826: PUSH
84827: EMPTY
84828: LIST
84829: LIST
84830: IN
84831: AND
84832: IFFALSE 84865
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
84834: LD_EXP 116
84838: PUSH
84839: LD_VAR 0 1
84843: ARRAY
84844: PPUSH
84845: LD_EXP 117
84849: PUSH
84850: LD_VAR 0 1
84854: ARRAY
84855: PPUSH
84856: CALL 23451 0 1
84860: PPUSH
84861: CALL_OW 505
// if not minerMinesList [ i ] then
84865: LD_EXP 117
84869: PUSH
84870: LD_VAR 0 1
84874: ARRAY
84875: NOT
84876: IFFALSE 84880
// continue ;
84878: GO 84772
// for j := minerMinesList [ i ] downto 1 do
84880: LD_ADDR_VAR 0 2
84884: PUSH
84885: DOUBLE
84886: LD_EXP 117
84890: PUSH
84891: LD_VAR 0 1
84895: ARRAY
84896: INC
84897: ST_TO_ADDR
84898: LD_INT 1
84900: PUSH
84901: FOR_DOWNTO
84902: IFFALSE 85259
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
84904: LD_EXP 116
84908: PUSH
84909: LD_VAR 0 1
84913: ARRAY
84914: PPUSH
84915: CALL_OW 301
84919: IFTRUE 84939
84921: PUSH
84922: LD_EXP 116
84926: PUSH
84927: LD_VAR 0 1
84931: ARRAY
84932: PPUSH
84933: CALL_OW 305
84937: NOT
84938: OR
84939: IFFALSE 85030
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
84941: LD_EXP 117
84945: PUSH
84946: LD_VAR 0 1
84950: ARRAY
84951: PUSH
84952: LD_VAR 0 2
84956: ARRAY
84957: PUSH
84958: LD_INT 1
84960: ARRAY
84961: PPUSH
84962: LD_EXP 117
84966: PUSH
84967: LD_VAR 0 1
84971: ARRAY
84972: PUSH
84973: LD_VAR 0 2
84977: ARRAY
84978: PUSH
84979: LD_INT 2
84981: ARRAY
84982: PPUSH
84983: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
84987: LD_ADDR_EXP 117
84991: PUSH
84992: LD_EXP 117
84996: PPUSH
84997: LD_VAR 0 1
85001: PPUSH
85002: LD_EXP 117
85006: PUSH
85007: LD_VAR 0 1
85011: ARRAY
85012: PPUSH
85013: LD_VAR 0 2
85017: PPUSH
85018: CALL_OW 3
85022: PPUSH
85023: CALL_OW 1
85027: ST_TO_ADDR
// continue ;
85028: GO 84901
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
85030: LD_ADDR_VAR 0 4
85034: PUSH
85035: LD_EXP 117
85039: PUSH
85040: LD_VAR 0 1
85044: ARRAY
85045: PUSH
85046: LD_VAR 0 2
85050: ARRAY
85051: PUSH
85052: LD_INT 1
85054: ARRAY
85055: PPUSH
85056: LD_EXP 117
85060: PUSH
85061: LD_VAR 0 1
85065: ARRAY
85066: PUSH
85067: LD_VAR 0 2
85071: ARRAY
85072: PUSH
85073: LD_INT 2
85075: ARRAY
85076: PPUSH
85077: CALL_OW 428
85081: ST_TO_ADDR
// if not tmp then
85082: LD_VAR 0 4
85086: NOT
85087: IFFALSE 85091
// continue ;
85089: GO 84901
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
85091: LD_VAR 0 4
85095: PUSH
85096: LD_INT 81
85098: PUSH
85099: LD_VAR 0 3
85103: PUSH
85104: EMPTY
85105: LIST
85106: LIST
85107: PPUSH
85108: CALL_OW 69
85112: IN
85113: IFFALSE 85163
85115: PUSH
85116: LD_EXP 117
85120: PUSH
85121: LD_VAR 0 1
85125: ARRAY
85126: PUSH
85127: LD_VAR 0 2
85131: ARRAY
85132: PUSH
85133: LD_INT 1
85135: ARRAY
85136: PPUSH
85137: LD_EXP 117
85141: PUSH
85142: LD_VAR 0 1
85146: ARRAY
85147: PUSH
85148: LD_VAR 0 2
85152: ARRAY
85153: PUSH
85154: LD_INT 2
85156: ARRAY
85157: PPUSH
85158: CALL_OW 458
85162: AND
85163: IFFALSE 85257
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
85165: LD_EXP 117
85169: PUSH
85170: LD_VAR 0 1
85174: ARRAY
85175: PUSH
85176: LD_VAR 0 2
85180: ARRAY
85181: PUSH
85182: LD_INT 1
85184: ARRAY
85185: PPUSH
85186: LD_EXP 117
85190: PUSH
85191: LD_VAR 0 1
85195: ARRAY
85196: PUSH
85197: LD_VAR 0 2
85201: ARRAY
85202: PUSH
85203: LD_INT 2
85205: ARRAY
85206: PPUSH
85207: LD_VAR 0 3
85211: PPUSH
85212: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85216: LD_ADDR_EXP 117
85220: PUSH
85221: LD_EXP 117
85225: PPUSH
85226: LD_VAR 0 1
85230: PPUSH
85231: LD_EXP 117
85235: PUSH
85236: LD_VAR 0 1
85240: ARRAY
85241: PPUSH
85242: LD_VAR 0 2
85246: PPUSH
85247: CALL_OW 3
85251: PPUSH
85252: CALL_OW 1
85256: ST_TO_ADDR
// end ; end ;
85257: GO 84901
85259: POP
85260: POP
// end ;
85261: GO 84772
85263: POP
85264: POP
// end ;
85265: PPOPN 4
85267: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
85268: LD_INT 0
85270: PPUSH
85271: PPUSH
85272: PPUSH
85273: PPUSH
// result := false ;
85274: LD_ADDR_VAR 0 4
85278: PUSH
85279: LD_INT 0
85281: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85282: LD_VAR 0 1
85286: PPUSH
85287: CALL_OW 264
85291: PUSH
85292: LD_INT 81
85294: EQUAL
85295: NOT
85296: IFFALSE 85300
// exit ;
85298: GO 85670
// side := GetSide ( unit ) ;
85300: LD_ADDR_VAR 0 6
85304: PUSH
85305: LD_VAR 0 1
85309: PPUSH
85310: CALL_OW 255
85314: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
85315: LD_ADDR_VAR 0 5
85319: PUSH
85320: LD_EXP 116
85324: PPUSH
85325: LD_VAR 0 1
85329: PPUSH
85330: CALL 26152 0 2
85334: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85335: LD_EXP 117
85339: PUSH
85340: LD_VAR 0 5
85344: ARRAY
85345: PUSH
85346: LD_EXP 118
85350: GREATEREQUAL
85351: IFFALSE 85355
// exit ;
85353: GO 85670
// ComMoveXY ( unit , x , y ) ;
85355: LD_VAR 0 1
85359: PPUSH
85360: LD_VAR 0 2
85364: PPUSH
85365: LD_VAR 0 3
85369: PPUSH
85370: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85374: LD_INT 35
85376: PPUSH
85377: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85381: LD_VAR 0 1
85385: PPUSH
85386: LD_VAR 0 2
85390: PPUSH
85391: LD_VAR 0 3
85395: PPUSH
85396: CALL 58208 0 3
85400: NOT
85401: IFFALSE 85414
85403: PUSH
85404: LD_VAR 0 1
85408: PPUSH
85409: CALL_OW 314
85413: AND
85414: IFFALSE 85418
// exit ;
85416: GO 85670
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85418: LD_VAR 0 2
85422: PPUSH
85423: LD_VAR 0 3
85427: PPUSH
85428: CALL_OW 428
85432: PUSH
85433: LD_VAR 0 1
85437: EQUAL
85438: IFFALSE 85452
85440: PUSH
85441: LD_VAR 0 1
85445: PPUSH
85446: CALL_OW 314
85450: NOT
85451: AND
85452: IFFALSE 85374
// if MineAtPos ( x , y ) then
85454: LD_VAR 0 2
85458: PPUSH
85459: LD_VAR 0 3
85463: PPUSH
85464: CALL_OW 458
85468: IFFALSE 85472
// exit ;
85470: GO 85670
// if your_side = side then
85472: LD_OWVAR 2
85476: PUSH
85477: LD_VAR 0 6
85481: EQUAL
85482: IFFALSE 85501
// PlaySoundXY ( x , y , PlantMine ) ;
85484: LD_VAR 0 2
85488: PPUSH
85489: LD_VAR 0 3
85493: PPUSH
85494: LD_STRING PlantMine
85496: PPUSH
85497: CALL_OW 366
// repeat wait ( 1 ) ;
85501: LD_INT 1
85503: PPUSH
85504: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
85508: LD_VAR 0 2
85512: PPUSH
85513: LD_VAR 0 3
85517: PPUSH
85518: LD_VAR 0 6
85522: PPUSH
85523: LD_INT 0
85525: PPUSH
85526: CALL_OW 454
85530: IFFALSE 85501
// if MineAtPos ( x , y ) then
85532: LD_VAR 0 2
85536: PPUSH
85537: LD_VAR 0 3
85541: PPUSH
85542: CALL_OW 458
85546: IFFALSE 85662
// begin for i in minerMinesList [ index ] do
85548: LD_ADDR_VAR 0 7
85552: PUSH
85553: LD_EXP 117
85557: PUSH
85558: LD_VAR 0 5
85562: ARRAY
85563: PUSH
85564: FOR_IN
85565: IFFALSE 85607
// if i [ 1 ] = x and i [ 2 ] = y then
85567: LD_VAR 0 7
85571: PUSH
85572: LD_INT 1
85574: ARRAY
85575: PUSH
85576: LD_VAR 0 2
85580: EQUAL
85581: IFFALSE 85599
85583: PUSH
85584: LD_VAR 0 7
85588: PUSH
85589: LD_INT 2
85591: ARRAY
85592: PUSH
85593: LD_VAR 0 3
85597: EQUAL
85598: AND
85599: IFFALSE 85605
// exit ;
85601: POP
85602: POP
85603: GO 85670
85605: GO 85564
85607: POP
85608: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85609: LD_ADDR_EXP 117
85613: PUSH
85614: LD_EXP 117
85618: PPUSH
85619: LD_VAR 0 5
85623: PUSH
85624: LD_EXP 117
85628: PUSH
85629: LD_VAR 0 5
85633: ARRAY
85634: PUSH
85635: LD_INT 1
85637: PLUS
85638: PUSH
85639: EMPTY
85640: LIST
85641: LIST
85642: PPUSH
85643: LD_VAR 0 2
85647: PUSH
85648: LD_VAR 0 3
85652: PUSH
85653: EMPTY
85654: LIST
85655: LIST
85656: PPUSH
85657: CALL 26369 0 3
85661: ST_TO_ADDR
// end ; result := true ;
85662: LD_ADDR_VAR 0 4
85666: PUSH
85667: LD_INT 1
85669: ST_TO_ADDR
// end ;
85670: LD_VAR 0 4
85674: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
85675: LD_INT 0
85677: PPUSH
85678: PPUSH
85679: PPUSH
// if not unit in minersList then
85680: LD_VAR 0 1
85684: PUSH
85685: LD_EXP 116
85689: IN
85690: NOT
85691: IFFALSE 85695
// exit ;
85693: GO 85902
// index := GetElementIndex ( minersList , unit ) ;
85695: LD_ADDR_VAR 0 6
85699: PUSH
85700: LD_EXP 116
85704: PPUSH
85705: LD_VAR 0 1
85709: PPUSH
85710: CALL 26152 0 2
85714: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
85715: LD_ADDR_VAR 0 5
85719: PUSH
85720: DOUBLE
85721: LD_EXP 117
85725: PUSH
85726: LD_VAR 0 6
85730: ARRAY
85731: INC
85732: ST_TO_ADDR
85733: LD_INT 1
85735: PUSH
85736: FOR_DOWNTO
85737: IFFALSE 85900
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
85739: LD_EXP 117
85743: PUSH
85744: LD_VAR 0 6
85748: ARRAY
85749: PUSH
85750: LD_VAR 0 5
85754: ARRAY
85755: PUSH
85756: LD_INT 1
85758: ARRAY
85759: PPUSH
85760: LD_EXP 117
85764: PUSH
85765: LD_VAR 0 6
85769: ARRAY
85770: PUSH
85771: LD_VAR 0 5
85775: ARRAY
85776: PUSH
85777: LD_INT 2
85779: ARRAY
85780: PPUSH
85781: LD_VAR 0 2
85785: PPUSH
85786: LD_VAR 0 3
85790: PPUSH
85791: CALL_OW 298
85795: PUSH
85796: LD_INT 6
85798: LESS
85799: IFFALSE 85898
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
85801: LD_EXP 117
85805: PUSH
85806: LD_VAR 0 6
85810: ARRAY
85811: PUSH
85812: LD_VAR 0 5
85816: ARRAY
85817: PUSH
85818: LD_INT 1
85820: ARRAY
85821: PPUSH
85822: LD_EXP 117
85826: PUSH
85827: LD_VAR 0 6
85831: ARRAY
85832: PUSH
85833: LD_VAR 0 5
85837: ARRAY
85838: PUSH
85839: LD_INT 2
85841: ARRAY
85842: PPUSH
85843: LD_VAR 0 1
85847: PPUSH
85848: CALL_OW 255
85852: PPUSH
85853: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
85857: LD_ADDR_EXP 117
85861: PUSH
85862: LD_EXP 117
85866: PPUSH
85867: LD_VAR 0 6
85871: PPUSH
85872: LD_EXP 117
85876: PUSH
85877: LD_VAR 0 6
85881: ARRAY
85882: PPUSH
85883: LD_VAR 0 5
85887: PPUSH
85888: CALL_OW 3
85892: PPUSH
85893: CALL_OW 1
85897: ST_TO_ADDR
// end ; end ;
85898: GO 85736
85900: POP
85901: POP
// end ;
85902: LD_VAR 0 4
85906: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
85907: LD_INT 0
85909: PPUSH
85910: PPUSH
85911: PPUSH
85912: PPUSH
85913: PPUSH
85914: PPUSH
85915: PPUSH
85916: PPUSH
85917: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
85918: LD_VAR 0 1
85922: PPUSH
85923: CALL_OW 264
85927: PUSH
85928: LD_INT 81
85930: EQUAL
85931: NOT
85932: IFTRUE 85947
85934: PUSH
85935: LD_VAR 0 1
85939: PUSH
85940: LD_EXP 116
85944: IN
85945: NOT
85946: OR
85947: IFFALSE 85951
// exit ;
85949: GO 86277
// index := GetElementIndex ( minersList , unit ) ;
85951: LD_ADDR_VAR 0 6
85955: PUSH
85956: LD_EXP 116
85960: PPUSH
85961: LD_VAR 0 1
85965: PPUSH
85966: CALL 26152 0 2
85970: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
85971: LD_ADDR_VAR 0 8
85975: PUSH
85976: LD_EXP 118
85980: PUSH
85981: LD_EXP 117
85985: PUSH
85986: LD_VAR 0 6
85990: ARRAY
85991: MINUS
85992: ST_TO_ADDR
// if not minesFreeAmount then
85993: LD_VAR 0 8
85997: NOT
85998: IFFALSE 86002
// exit ;
86000: GO 86277
// tmp := [ ] ;
86002: LD_ADDR_VAR 0 7
86006: PUSH
86007: EMPTY
86008: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
86009: LD_ADDR_VAR 0 5
86013: PUSH
86014: DOUBLE
86015: LD_INT 1
86017: DEC
86018: ST_TO_ADDR
86019: LD_VAR 0 8
86023: PUSH
86024: FOR_TO
86025: IFFALSE 86224
// begin _d := rand ( 0 , 5 ) ;
86027: LD_ADDR_VAR 0 11
86031: PUSH
86032: LD_INT 0
86034: PPUSH
86035: LD_INT 5
86037: PPUSH
86038: CALL_OW 12
86042: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
86043: LD_ADDR_VAR 0 12
86047: PUSH
86048: LD_INT 2
86050: PPUSH
86051: LD_INT 6
86053: PPUSH
86054: CALL_OW 12
86058: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
86059: LD_ADDR_VAR 0 9
86063: PUSH
86064: LD_VAR 0 2
86068: PPUSH
86069: LD_VAR 0 11
86073: PPUSH
86074: LD_VAR 0 12
86078: PPUSH
86079: CALL_OW 272
86083: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
86084: LD_ADDR_VAR 0 10
86088: PUSH
86089: LD_VAR 0 3
86093: PPUSH
86094: LD_VAR 0 11
86098: PPUSH
86099: LD_VAR 0 12
86103: PPUSH
86104: CALL_OW 273
86108: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
86109: LD_VAR 0 9
86113: PPUSH
86114: LD_VAR 0 10
86118: PPUSH
86119: CALL_OW 488
86123: IFFALSE 86147
86125: PUSH
86126: LD_VAR 0 9
86130: PUSH
86131: LD_VAR 0 10
86135: PUSH
86136: EMPTY
86137: LIST
86138: LIST
86139: PUSH
86140: LD_VAR 0 7
86144: IN
86145: NOT
86146: AND
86147: IFFALSE 86166
86149: PUSH
86150: LD_VAR 0 9
86154: PPUSH
86155: LD_VAR 0 10
86159: PPUSH
86160: CALL_OW 458
86164: NOT
86165: AND
86166: IFFALSE 86208
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86168: LD_ADDR_VAR 0 7
86172: PUSH
86173: LD_VAR 0 7
86177: PPUSH
86178: LD_VAR 0 7
86182: PUSH
86183: LD_INT 1
86185: PLUS
86186: PPUSH
86187: LD_VAR 0 9
86191: PUSH
86192: LD_VAR 0 10
86196: PUSH
86197: EMPTY
86198: LIST
86199: LIST
86200: PPUSH
86201: CALL_OW 1
86205: ST_TO_ADDR
86206: GO 86222
// i := i - 1 ;
86208: LD_ADDR_VAR 0 5
86212: PUSH
86213: LD_VAR 0 5
86217: PUSH
86218: LD_INT 1
86220: MINUS
86221: ST_TO_ADDR
// end ;
86222: GO 86024
86224: POP
86225: POP
// for i in tmp do
86226: LD_ADDR_VAR 0 5
86230: PUSH
86231: LD_VAR 0 7
86235: PUSH
86236: FOR_IN
86237: IFFALSE 86275
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86239: LD_VAR 0 1
86243: PPUSH
86244: LD_VAR 0 5
86248: PUSH
86249: LD_INT 1
86251: ARRAY
86252: PPUSH
86253: LD_VAR 0 5
86257: PUSH
86258: LD_INT 2
86260: ARRAY
86261: PPUSH
86262: CALL 85268 0 3
86266: NOT
86267: IFFALSE 86273
// exit ;
86269: POP
86270: POP
86271: GO 86277
86273: GO 86236
86275: POP
86276: POP
// end ;
86277: LD_VAR 0 4
86281: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
86282: LD_INT 0
86284: PPUSH
86285: PPUSH
86286: PPUSH
86287: PPUSH
86288: PPUSH
86289: PPUSH
86290: PPUSH
86291: PPUSH
86292: PPUSH
// if GetClass ( unit ) <> class_sniper then
86293: LD_VAR 0 1
86297: PPUSH
86298: CALL_OW 257
86302: PUSH
86303: LD_INT 5
86305: NONEQUAL
86306: IFFALSE 86310
// exit ;
86308: GO 86780
// dist := 8 ;
86310: LD_ADDR_VAR 0 5
86314: PUSH
86315: LD_INT 8
86317: ST_TO_ADDR
// viewRange := 12 ;
86318: LD_ADDR_VAR 0 8
86322: PUSH
86323: LD_INT 12
86325: ST_TO_ADDR
// side := GetSide ( unit ) ;
86326: LD_ADDR_VAR 0 6
86330: PUSH
86331: LD_VAR 0 1
86335: PPUSH
86336: CALL_OW 255
86340: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86341: LD_INT 61
86343: PPUSH
86344: LD_VAR 0 6
86348: PPUSH
86349: CALL_OW 321
86353: PUSH
86354: LD_INT 2
86356: EQUAL
86357: IFFALSE 86367
// viewRange := 16 ;
86359: LD_ADDR_VAR 0 8
86363: PUSH
86364: LD_INT 16
86366: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86367: LD_VAR 0 1
86371: PPUSH
86372: LD_VAR 0 2
86376: PPUSH
86377: LD_VAR 0 3
86381: PPUSH
86382: CALL_OW 297
86386: PUSH
86387: LD_VAR 0 5
86391: GREATER
86392: IFFALSE 86471
// begin ComMoveXY ( unit , x , y ) ;
86394: LD_VAR 0 1
86398: PPUSH
86399: LD_VAR 0 2
86403: PPUSH
86404: LD_VAR 0 3
86408: PPUSH
86409: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86413: LD_INT 35
86415: PPUSH
86416: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86420: LD_VAR 0 1
86424: PPUSH
86425: LD_VAR 0 2
86429: PPUSH
86430: LD_VAR 0 3
86434: PPUSH
86435: CALL 58208 0 3
86439: NOT
86440: IFFALSE 86444
// exit ;
86442: GO 86780
// until GetDistUnitXY ( unit , x , y ) < dist ;
86444: LD_VAR 0 1
86448: PPUSH
86449: LD_VAR 0 2
86453: PPUSH
86454: LD_VAR 0 3
86458: PPUSH
86459: CALL_OW 297
86463: PUSH
86464: LD_VAR 0 5
86468: LESS
86469: IFFALSE 86413
// end ; ComTurnXY ( unit , x , y ) ;
86471: LD_VAR 0 1
86475: PPUSH
86476: LD_VAR 0 2
86480: PPUSH
86481: LD_VAR 0 3
86485: PPUSH
86486: CALL_OW 118
// repeat if Multiplayer then
86490: LD_OWVAR 4
86494: IFFALSE 86505
// wait ( 35 ) else
86496: LD_INT 35
86498: PPUSH
86499: CALL_OW 67
86503: GO 86512
// wait ( 5 ) ;
86505: LD_INT 5
86507: PPUSH
86508: CALL_OW 67
// _d := GetDir ( unit ) ;
86512: LD_ADDR_VAR 0 11
86516: PUSH
86517: LD_VAR 0 1
86521: PPUSH
86522: CALL_OW 254
86526: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
86527: LD_ADDR_VAR 0 7
86531: PUSH
86532: LD_VAR 0 1
86536: PPUSH
86537: CALL_OW 250
86541: PPUSH
86542: LD_VAR 0 1
86546: PPUSH
86547: CALL_OW 251
86551: PPUSH
86552: LD_VAR 0 2
86556: PPUSH
86557: LD_VAR 0 3
86561: PPUSH
86562: CALL 60844 0 4
86566: ST_TO_ADDR
// until dir = _d ;
86567: LD_VAR 0 7
86571: PUSH
86572: LD_VAR 0 11
86576: EQUAL
86577: IFFALSE 86490
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
86579: LD_ADDR_VAR 0 9
86583: PUSH
86584: LD_VAR 0 1
86588: PPUSH
86589: CALL_OW 250
86593: PPUSH
86594: LD_VAR 0 7
86598: PPUSH
86599: LD_VAR 0 5
86603: PPUSH
86604: CALL_OW 272
86608: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
86609: LD_ADDR_VAR 0 10
86613: PUSH
86614: LD_VAR 0 1
86618: PPUSH
86619: CALL_OW 251
86623: PPUSH
86624: LD_VAR 0 7
86628: PPUSH
86629: LD_VAR 0 5
86633: PPUSH
86634: CALL_OW 273
86638: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
86639: LD_VAR 0 9
86643: PPUSH
86644: LD_VAR 0 10
86648: PPUSH
86649: CALL_OW 488
86653: NOT
86654: IFFALSE 86658
// exit ;
86656: GO 86780
// ComAnimCustom ( unit , 1 ) ;
86658: LD_VAR 0 1
86662: PPUSH
86663: LD_INT 1
86665: PPUSH
86666: CALL_OW 592
// p := 0 ;
86670: LD_ADDR_VAR 0 12
86674: PUSH
86675: LD_INT 0
86677: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
86678: LD_VAR 0 9
86682: PPUSH
86683: LD_VAR 0 10
86687: PPUSH
86688: LD_VAR 0 6
86692: PPUSH
86693: LD_VAR 0 8
86697: PPUSH
86698: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
86702: LD_INT 35
86704: PPUSH
86705: CALL_OW 67
// p := Inc ( p ) ;
86709: LD_ADDR_VAR 0 12
86713: PUSH
86714: LD_VAR 0 12
86718: PPUSH
86719: CALL 60800 0 1
86723: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
86724: LD_VAR 0 12
86728: PUSH
86729: LD_INT 3
86731: EQUAL
86732: IFTRUE 86746
86734: PUSH
86735: LD_VAR 0 1
86739: PPUSH
86740: CALL_OW 302
86744: NOT
86745: OR
86746: IFTRUE 86759
86748: PUSH
86749: LD_VAR 0 1
86753: PPUSH
86754: CALL_OW 301
86758: OR
86759: IFFALSE 86702
// RemoveSeeing ( _x , _y , side ) ;
86761: LD_VAR 0 9
86765: PPUSH
86766: LD_VAR 0 10
86770: PPUSH
86771: LD_VAR 0 6
86775: PPUSH
86776: CALL_OW 331
// end ;
86780: LD_VAR 0 4
86784: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
86785: LD_INT 0
86787: PPUSH
86788: PPUSH
86789: PPUSH
86790: PPUSH
86791: PPUSH
86792: PPUSH
86793: PPUSH
86794: PPUSH
86795: PPUSH
86796: PPUSH
86797: PPUSH
// if not unit then
86798: LD_VAR 0 1
86802: NOT
86803: IFFALSE 86807
// exit ;
86805: GO 87078
// side := GetSide ( unit ) ;
86807: LD_ADDR_VAR 0 3
86811: PUSH
86812: LD_VAR 0 1
86816: PPUSH
86817: CALL_OW 255
86821: ST_TO_ADDR
// x := GetX ( unit ) ;
86822: LD_ADDR_VAR 0 5
86826: PUSH
86827: LD_VAR 0 1
86831: PPUSH
86832: CALL_OW 250
86836: ST_TO_ADDR
// y := GetY ( unit ) ;
86837: LD_ADDR_VAR 0 6
86841: PUSH
86842: LD_VAR 0 1
86846: PPUSH
86847: CALL_OW 251
86851: ST_TO_ADDR
// r := 8 ;
86852: LD_ADDR_VAR 0 4
86856: PUSH
86857: LD_INT 8
86859: ST_TO_ADDR
// if x - r < 0 then
86860: LD_VAR 0 5
86864: PUSH
86865: LD_VAR 0 4
86869: MINUS
86870: PUSH
86871: LD_INT 0
86873: LESS
86874: IFFALSE 86886
// min_x := 0 else
86876: LD_ADDR_VAR 0 7
86880: PUSH
86881: LD_INT 0
86883: ST_TO_ADDR
86884: GO 86902
// min_x := x - r ;
86886: LD_ADDR_VAR 0 7
86890: PUSH
86891: LD_VAR 0 5
86895: PUSH
86896: LD_VAR 0 4
86900: MINUS
86901: ST_TO_ADDR
// if y - r < 0 then
86902: LD_VAR 0 6
86906: PUSH
86907: LD_VAR 0 4
86911: MINUS
86912: PUSH
86913: LD_INT 0
86915: LESS
86916: IFFALSE 86928
// min_y := 0 else
86918: LD_ADDR_VAR 0 8
86922: PUSH
86923: LD_INT 0
86925: ST_TO_ADDR
86926: GO 86944
// min_y := y - r ;
86928: LD_ADDR_VAR 0 8
86932: PUSH
86933: LD_VAR 0 6
86937: PUSH
86938: LD_VAR 0 4
86942: MINUS
86943: ST_TO_ADDR
// max_x := x + r ;
86944: LD_ADDR_VAR 0 9
86948: PUSH
86949: LD_VAR 0 5
86953: PUSH
86954: LD_VAR 0 4
86958: PLUS
86959: ST_TO_ADDR
// max_y := y + r ;
86960: LD_ADDR_VAR 0 10
86964: PUSH
86965: LD_VAR 0 6
86969: PUSH
86970: LD_VAR 0 4
86974: PLUS
86975: ST_TO_ADDR
// for _x = min_x to max_x do
86976: LD_ADDR_VAR 0 11
86980: PUSH
86981: DOUBLE
86982: LD_VAR 0 7
86986: DEC
86987: ST_TO_ADDR
86988: LD_VAR 0 9
86992: PUSH
86993: FOR_TO
86994: IFFALSE 87076
// for _y = min_y to max_y do
86996: LD_ADDR_VAR 0 12
87000: PUSH
87001: DOUBLE
87002: LD_VAR 0 8
87006: DEC
87007: ST_TO_ADDR
87008: LD_VAR 0 10
87012: PUSH
87013: FOR_TO
87014: IFFALSE 87072
// begin if not ValidHex ( _x , _y ) then
87016: LD_VAR 0 11
87020: PPUSH
87021: LD_VAR 0 12
87025: PPUSH
87026: CALL_OW 488
87030: NOT
87031: IFFALSE 87035
// continue ;
87033: GO 87013
// if MineAtPos ( _x , _y ) then
87035: LD_VAR 0 11
87039: PPUSH
87040: LD_VAR 0 12
87044: PPUSH
87045: CALL_OW 458
87049: IFFALSE 87070
// ViewMineAtPos ( _x , _y , side ) ;
87051: LD_VAR 0 11
87055: PPUSH
87056: LD_VAR 0 12
87060: PPUSH
87061: LD_VAR 0 3
87065: PPUSH
87066: CALL_OW 457
// end ;
87070: GO 87013
87072: POP
87073: POP
87074: GO 86993
87076: POP
87077: POP
// end ;
87078: LD_VAR 0 2
87082: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
87083: LD_INT 0
87085: PPUSH
87086: PPUSH
87087: PPUSH
87088: PPUSH
87089: PPUSH
87090: PPUSH
87091: PPUSH
// if not units then
87092: LD_VAR 0 1
87096: NOT
87097: IFFALSE 87101
// exit ;
87099: GO 87565
// scaners := [ ] ;
87101: LD_ADDR_VAR 0 6
87105: PUSH
87106: EMPTY
87107: ST_TO_ADDR
// for i in units do
87108: LD_ADDR_VAR 0 3
87112: PUSH
87113: LD_VAR 0 1
87117: PUSH
87118: FOR_IN
87119: IFFALSE 87276
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
87121: LD_VAR 0 3
87125: PPUSH
87126: CALL_OW 264
87130: PUSH
87131: LD_INT 11
87133: NONEQUAL
87134: IFTRUE 87148
87136: PUSH
87137: LD_VAR 0 3
87141: PPUSH
87142: CALL_OW 302
87146: NOT
87147: OR
87148: IFTRUE 87165
87150: PUSH
87151: LD_VAR 0 3
87155: PPUSH
87156: CALL_OW 110
87160: PUSH
87161: LD_INT 502
87163: EQUAL
87164: OR
87165: IFFALSE 87169
// continue ;
87167: GO 87118
// ComStop ( i ) ;
87169: LD_VAR 0 3
87173: PPUSH
87174: CALL_OW 141
// x := GetX ( i ) ;
87178: LD_ADDR_VAR 0 4
87182: PUSH
87183: LD_VAR 0 3
87187: PPUSH
87188: CALL_OW 250
87192: ST_TO_ADDR
// y := GetY ( i ) ;
87193: LD_ADDR_VAR 0 5
87197: PUSH
87198: LD_VAR 0 3
87202: PPUSH
87203: CALL_OW 251
87207: ST_TO_ADDR
// if GetSide ( i ) = your_side then
87208: LD_VAR 0 3
87212: PPUSH
87213: CALL_OW 255
87217: PUSH
87218: LD_OWVAR 2
87222: EQUAL
87223: IFFALSE 87242
// PlaySoundXY ( x , y , mineDetector ) ;
87225: LD_VAR 0 4
87229: PPUSH
87230: LD_VAR 0 5
87234: PPUSH
87235: LD_STRING mineDetector
87237: PPUSH
87238: CALL_OW 366
// scaners := Join ( scaners , i ) ;
87242: LD_ADDR_VAR 0 6
87246: PUSH
87247: LD_VAR 0 6
87251: PPUSH
87252: LD_VAR 0 3
87256: PPUSH
87257: CALL 59427 0 2
87261: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
87262: LD_VAR 0 3
87266: PPUSH
87267: LD_INT 502
87269: PPUSH
87270: CALL_OW 109
// end ;
87274: GO 87118
87276: POP
87277: POP
// if not scaners then
87278: LD_VAR 0 6
87282: NOT
87283: IFFALSE 87287
// exit ;
87285: GO 87565
// wait ( 3 ) ;
87287: LD_INT 3
87289: PPUSH
87290: CALL_OW 67
// timer := 6 ;
87294: LD_ADDR_VAR 0 7
87298: PUSH
87299: LD_INT 6
87301: ST_TO_ADDR
// repeat for i in scaners do
87302: LD_ADDR_VAR 0 3
87306: PUSH
87307: LD_VAR 0 6
87311: PUSH
87312: FOR_IN
87313: IFFALSE 87463
// begin side := GetSide ( i ) ;
87315: LD_ADDR_VAR 0 8
87319: PUSH
87320: LD_VAR 0 3
87324: PPUSH
87325: CALL_OW 255
87329: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
87330: LD_VAR 0 3
87334: PPUSH
87335: CALL_OW 302
87339: NOT
87340: IFTRUE 87353
87342: PUSH
87343: LD_VAR 0 3
87347: PPUSH
87348: CALL_OW 314
87352: OR
87353: IFTRUE 87384
87355: PUSH
87356: LD_VAR 0 3
87360: PPUSH
87361: CALL_OW 263
87365: PUSH
87366: LD_INT 1
87368: EQUAL
87369: IFFALSE 87383
87371: PUSH
87372: LD_VAR 0 3
87376: PPUSH
87377: CALL_OW 311
87381: NOT
87382: AND
87383: OR
87384: IFFALSE 87428
// begin SetUnitDisplayNumber ( i , 0 ) ;
87386: LD_VAR 0 3
87390: PPUSH
87391: LD_INT 0
87393: PPUSH
87394: CALL_OW 505
// SetTag ( i , 0 ) ;
87398: LD_VAR 0 3
87402: PPUSH
87403: LD_INT 0
87405: PPUSH
87406: CALL_OW 109
// scaners := scaners diff i ;
87410: LD_ADDR_VAR 0 6
87414: PUSH
87415: LD_VAR 0 6
87419: PUSH
87420: LD_VAR 0 3
87424: DIFF
87425: ST_TO_ADDR
// continue ;
87426: GO 87312
// end ; if side in [ your_side , 9 ] then
87428: LD_VAR 0 8
87432: PUSH
87433: LD_OWVAR 2
87437: PUSH
87438: LD_INT 9
87440: PUSH
87441: EMPTY
87442: LIST
87443: LIST
87444: IN
87445: IFFALSE 87461
// SetUnitDisplayNumber ( i , timer ) ;
87447: LD_VAR 0 3
87451: PPUSH
87452: LD_VAR 0 7
87456: PPUSH
87457: CALL_OW 505
// end ;
87461: GO 87312
87463: POP
87464: POP
// if not scaners then
87465: LD_VAR 0 6
87469: NOT
87470: IFFALSE 87474
// exit ;
87472: GO 87565
// timer := Dec ( timer ) ;
87474: LD_ADDR_VAR 0 7
87478: PUSH
87479: LD_VAR 0 7
87483: PPUSH
87484: CALL 60822 0 1
87488: ST_TO_ADDR
// wait ( 0 0$1 ) ;
87489: LD_INT 35
87491: PPUSH
87492: CALL_OW 67
// until timer = 0 ;
87496: LD_VAR 0 7
87500: PUSH
87501: LD_INT 0
87503: EQUAL
87504: IFFALSE 87302
// if not scaners then
87506: LD_VAR 0 6
87510: NOT
87511: IFFALSE 87515
// exit ;
87513: GO 87565
// for i in scaners do
87515: LD_ADDR_VAR 0 3
87519: PUSH
87520: LD_VAR 0 6
87524: PUSH
87525: FOR_IN
87526: IFFALSE 87563
// begin SetUnitDisplayNumber ( i , 0 ) ;
87528: LD_VAR 0 3
87532: PPUSH
87533: LD_INT 0
87535: PPUSH
87536: CALL_OW 505
// SetTag ( i , 0 ) ;
87540: LD_VAR 0 3
87544: PPUSH
87545: LD_INT 0
87547: PPUSH
87548: CALL_OW 109
// RevealDetectorMine ( i ) ;
87552: LD_VAR 0 3
87556: PPUSH
87557: CALL 86785 0 1
// end ;
87561: GO 87525
87563: POP
87564: POP
// end ;
87565: LD_VAR 0 2
87569: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
87570: LD_INT 0
87572: PPUSH
// if p1 = mine_detector_mode then
87573: LD_VAR 0 2
87577: PUSH
87578: LD_INT 103
87580: EQUAL
87581: IFFALSE 87592
// DetectMine ( units ) ;
87583: LD_VAR 0 1
87587: PPUSH
87588: CALL 87083 0 1
// end ;
87592: LD_VAR 0 7
87596: RET
