// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// CreateNature ;
   8: CALL 10255 0 0
// PrepareArabian ;
  12: CALL 231 0 0
// PrepareAmerican ;
  16: CALL 535 0 0
// PrepareLegion ;
  20: CALL 5425 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 10753 0 0
// end ;
  41: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 09_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 09_
  60: ST_TO_ADDR
// amScriptActive := true ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// legScriptActive := true ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 16
  84: PUSH
  85: LD_INT 14
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: LD_OWVAR 67
 104: ARRAY
 105: ST_TO_ADDR
// spotAmericanBase := false ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// spotArabianBase := false ;
 114: LD_ADDR_EXP 7
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// spotLegion := false ;
 122: LD_ADDR_EXP 10
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// spotByAmerican := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// spotByLegion := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// americanDestroyed := false ;
 146: LD_ADDR_EXP 11
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// legionDestroyed := false ;
 154: LD_ADDR_EXP 12
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasMastodont := false ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasVehicles := false ;
 170: LD_ADDR_EXP 14
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// hasTigers := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// hasApes := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasDrugs := false ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// canFinish := false ;
 202: LD_ADDR_EXP 18
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// gameActive := false ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// omarCanChangeClass := false ;
 218: LD_ADDR_EXP 20
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// end ; end_of_file
 226: LD_VAR 0 1
 230: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp ; begin
 231: LD_INT 0
 233: PPUSH
 234: PPUSH
 235: PPUSH
// uc_side := 2 ;
 236: LD_ADDR_OWVAR 20
 240: PUSH
 241: LD_INT 2
 243: ST_TO_ADDR
// uc_nation := nation_arabian ;
 244: LD_ADDR_OWVAR 21
 248: PUSH
 249: LD_INT 2
 251: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 252: LD_ADDR_EXP 21
 256: PUSH
 257: LD_STRING Heike
 259: PPUSH
 260: LD_EXP 1
 264: NOT
 265: PPUSH
 266: LD_EXP 2
 270: PPUSH
 271: CALL 19149 0 3
 275: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 276: LD_INT 14
 278: PPUSH
 279: LD_INT 3
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 27
 287: PPUSH
 288: LD_INT 100
 290: PPUSH
 291: CALL 23989 0 5
// heikeVehicle := CreateVehicle ;
 295: LD_ADDR_EXP 23
 299: PUSH
 300: CALL_OW 45
 304: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 305: LD_EXP 23
 309: PPUSH
 310: LD_INT 4
 312: PPUSH
 313: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 317: LD_EXP 23
 321: PPUSH
 322: LD_INT 118
 324: PPUSH
 325: LD_INT 37
 327: PPUSH
 328: LD_INT 0
 330: PPUSH
 331: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 335: LD_EXP 21
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 347: LD_EXP 21
 351: PPUSH
 352: LD_EXP 23
 356: PPUSH
 357: CALL_OW 52
// uc_side := 5 ;
 361: LD_ADDR_OWVAR 20
 365: PUSH
 366: LD_INT 5
 368: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 369: LD_ADDR_EXP 22
 373: PUSH
 374: LD_STRING Omar
 376: PPUSH
 377: CALL_OW 25
 381: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 382: LD_INT 14
 384: PPUSH
 385: LD_INT 3
 387: PPUSH
 388: LD_INT 1
 390: PPUSH
 391: LD_INT 27
 393: PPUSH
 394: LD_INT 100
 396: PPUSH
 397: CALL 23989 0 5
// omarVehicle := CreateVehicle ;
 401: LD_ADDR_EXP 24
 405: PUSH
 406: CALL_OW 45
 410: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 411: LD_EXP 24
 415: PPUSH
 416: LD_INT 0
 418: PPUSH
 419: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 423: LD_ADDR_VAR 0 2
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 5
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 21
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: PPUSH
 452: CALL_OW 69
 456: PUSH
 457: FOR_IN
 458: IFFALSE 482
// SetLives ( i , rand ( 300 , 499 ) ) ;
 460: LD_VAR 0 2
 464: PPUSH
 465: LD_INT 300
 467: PPUSH
 468: LD_INT 499
 470: PPUSH
 471: CALL_OW 12
 475: PPUSH
 476: CALL_OW 234
 480: GO 457
 482: POP
 483: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 100 - ( 20 * Difficulty ) ) ;
 484: LD_INT 85
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: LD_INT 100
 497: PUSH
 498: LD_INT 20
 500: PUSH
 501: LD_OWVAR 67
 505: MUL
 506: MINUS
 507: PPUSH
 508: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 10 ) ;
 512: LD_INT 85
 514: PPUSH
 515: CALL_OW 274
 519: PPUSH
 520: LD_INT 2
 522: PPUSH
 523: LD_INT 10
 525: PPUSH
 526: CALL_OW 277
// end ; end_of_file
 530: LD_VAR 0 1
 534: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
 539: PPUSH
 540: PPUSH
 541: PPUSH
 542: PPUSH
 543: PPUSH
 544: PPUSH
// uc_side := 1 ;
 545: LD_ADDR_OWVAR 20
 549: PUSH
 550: LD_INT 1
 552: ST_TO_ADDR
// uc_nation := nation_american ;
 553: LD_ADDR_OWVAR 21
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// amForces := [ ] ;
 561: LD_ADDR_EXP 25
 565: PUSH
 566: EMPTY
 567: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 568: LD_ADDR_EXP 26
 572: PUSH
 573: LD_INT 1
 575: PPUSH
 576: LD_INT 1
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL 19212 0 3
 586: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 587: LD_ADDR_EXP 27
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 1
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: LD_INT 12
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 3
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: LD_INT 2
 618: PUSH
 619: LD_INT 13
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 632: LD_ADDR_EXP 28
 636: PUSH
 637: LD_INT 94
 639: PUSH
 640: LD_INT 132
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// amBuildings := [ ] ;
 647: LD_ADDR_EXP 29
 651: PUSH
 652: EMPTY
 653: ST_TO_ADDR
// amTanks := [ ] ;
 654: LD_ADDR_EXP 30
 658: PUSH
 659: EMPTY
 660: ST_TO_ADDR
// amCargo := 0 ;
 661: LD_ADDR_EXP 32
 665: PUSH
 666: LD_INT 0
 668: ST_TO_ADDR
// amPatrol := [ ] ;
 669: LD_ADDR_EXP 33
 673: PUSH
 674: EMPTY
 675: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 676: LD_ADDR_VAR 0 7
 680: PUSH
 681: LD_INT 77
 683: PUSH
 684: LD_INT 121
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 98
 693: PUSH
 694: LD_INT 145
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: ST_TO_ADDR
// for i in sources do
 705: LD_ADDR_VAR 0 2
 709: PUSH
 710: LD_VAR 0 7
 714: PUSH
 715: FOR_IN
 716: IFFALSE 745
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 718: LD_VAR 0 2
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: CALL_OW 441
 743: GO 715
 745: POP
 746: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 747: LD_INT 2
 749: PPUSH
 750: CALL_OW 274
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_INT 550
 760: PPUSH
 761: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 765: LD_INT 2
 767: PPUSH
 768: CALL_OW 274
 772: PPUSH
 773: LD_INT 2
 775: PPUSH
 776: LD_INT 120
 778: PPUSH
 779: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 783: LD_INT 2
 785: PPUSH
 786: CALL_OW 274
 790: PPUSH
 791: LD_INT 3
 793: PPUSH
 794: LD_INT 30
 796: PPUSH
 797: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 801: LD_ADDR_VAR 0 6
 805: PUSH
 806: LD_INT 6
 808: PUSH
 809: LD_INT 7
 811: PUSH
 812: LD_INT 8
 814: PUSH
 815: LD_INT 9
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: LD_OWVAR 67
 828: ARRAY
 829: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 830: LD_ADDR_EXP 31
 834: PUSH
 835: LD_STRING Brown
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: LD_STRING 
 843: PPUSH
 844: CALL 19149 0 3
 848: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 849: LD_EXP 31
 853: PPUSH
 854: LD_INT 2
 856: PPUSH
 857: CALL_OW 52
// for i := 1 to 4 do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: DOUBLE
 867: LD_INT 1
 869: DEC
 870: ST_TO_ADDR
 871: LD_INT 4
 873: PUSH
 874: FOR_TO
 875: IFFALSE 1399
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
 877: LD_ADDR_VAR 0 3
 881: PUSH
 882: DOUBLE
 883: LD_INT 1
 885: DEC
 886: ST_TO_ADDR
 887: LD_INT 5
 889: PUSH
 890: LD_INT 6
 892: PUSH
 893: LD_INT 8
 895: PUSH
 896: LD_INT 9
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: LD_INT 4
 916: PUSH
 917: LD_INT 5
 919: PUSH
 920: LD_INT 5
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: PUSH
 929: LD_OWVAR 67
 933: ARRAY
 934: PUSH
 935: LD_INT 5
 937: PUSH
 938: LD_INT 5
 940: PUSH
 941: LD_INT 6
 943: PUSH
 944: LD_INT 7
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: PUSH
 953: LD_OWVAR 67
 957: ARRAY
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 3
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 3
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: LD_OWVAR 67
 981: ARRAY
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: LIST
 988: PUSH
 989: LD_VAR 0 2
 993: ARRAY
 994: PUSH
 995: FOR_TO
 996: IFFALSE 1395
// begin PrepareHuman ( false , i , skill ) ;
 998: LD_INT 0
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_VAR 0 6
1010: PPUSH
1011: CALL_OW 380
// un := CreateHuman ;
1015: LD_ADDR_VAR 0 5
1019: PUSH
1020: CALL_OW 44
1024: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1025: LD_ADDR_EXP 25
1029: PUSH
1030: LD_EXP 25
1034: PPUSH
1035: LD_VAR 0 5
1039: PPUSH
1040: CALL 56851 0 2
1044: ST_TO_ADDR
// case i of 1 :
1045: LD_VAR 0 2
1049: PUSH
1050: LD_INT 1
1052: DOUBLE
1053: EQUAL
1054: IFTRUE 1058
1056: GO 1127
1058: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1059: LD_ADDR_VAR 0 4
1063: PUSH
1064: LD_INT 22
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: LD_INT 30
1079: PUSH
1080: LD_INT 32
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: PUSH
1087: LD_INT 30
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 3
1104: PUSH
1105: LD_INT 62
1107: PUSH
1108: EMPTY
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PPUSH
1120: CALL_OW 69
1124: ST_TO_ADDR
1125: GO 1306
1127: LD_INT 2
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1164
1135: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1136: LD_ADDR_VAR 0 4
1140: PUSH
1141: LD_INT 2
1143: PPUSH
1144: LD_INT 3
1146: PUSH
1147: LD_INT 62
1149: PUSH
1150: EMPTY
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 72
1161: ST_TO_ADDR
1162: GO 1306
1164: LD_INT 3
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1246
1172: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1173: LD_ADDR_VAR 0 4
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 2
1190: PUSH
1191: LD_INT 30
1193: PUSH
1194: LD_INT 3
1196: PUSH
1197: EMPTY
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 30
1203: PUSH
1204: LD_INT 36
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 3
1218: PUSH
1219: LD_INT 62
1221: PUSH
1222: EMPTY
1223: LIST
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 69
1238: PPUSH
1239: CALL 52127 0 1
1243: ST_TO_ADDR
1244: GO 1306
1246: LD_INT 4
1248: DOUBLE
1249: EQUAL
1250: IFTRUE 1254
1252: GO 1305
1254: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1255: LD_ADDR_VAR 0 4
1259: PUSH
1260: LD_INT 22
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 30
1272: PUSH
1273: LD_INT 8
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: LD_INT 62
1285: PUSH
1286: EMPTY
1287: LIST
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: PPUSH
1298: CALL_OW 69
1302: ST_TO_ADDR
1303: GO 1306
1305: POP
// if b then
1306: LD_VAR 0 4
1310: IFFALSE 1372
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 50 ) then
1312: LD_VAR 0 4
1316: PUSH
1317: LD_INT 1
1319: ARRAY
1320: PPUSH
1321: CALL_OW 266
1325: PUSH
1326: LD_INT 5
1328: EQUAL
1329: PUSH
1330: LD_INT 50
1332: PPUSH
1333: CALL_OW 13
1337: AND
1338: IFFALSE 1352
// SetClass ( un , class_sniper ) ;
1340: LD_VAR 0 5
1344: PPUSH
1345: LD_INT 5
1347: PPUSH
1348: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1352: LD_VAR 0 5
1356: PPUSH
1357: LD_VAR 0 4
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: CALL_OW 52
// end else
1370: GO 1393
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1372: LD_VAR 0 5
1376: PPUSH
1377: LD_INT 92
1379: PPUSH
1380: LD_INT 137
1382: PPUSH
1383: LD_INT 4
1385: PPUSH
1386: LD_INT 0
1388: PPUSH
1389: CALL_OW 50
// end ;
1393: GO 995
1395: POP
1396: POP
1397: GO 874
1399: POP
1400: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1401: LD_ADDR_VAR 0 8
1405: PUSH
1406: LD_INT 30
1408: PUSH
1409: LD_INT 32
1411: PUSH
1412: LD_INT 36
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1420: LD_ADDR_VAR 0 2
1424: PUSH
1425: DOUBLE
1426: LD_INT 1
1428: DEC
1429: ST_TO_ADDR
1430: LD_VAR 0 8
1434: PUSH
1435: FOR_TO
1436: IFFALSE 1605
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1438: LD_ADDR_VAR 0 3
1442: PUSH
1443: DOUBLE
1444: LD_INT 1
1446: DEC
1447: ST_TO_ADDR
1448: LD_INT 1
1450: PUSH
1451: LD_INT 2
1453: PUSH
1454: LD_INT 2
1456: PUSH
1457: LD_INT 3
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_OWVAR 67
1470: ARRAY
1471: PUSH
1472: FOR_TO
1473: IFFALSE 1601
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1475: LD_INT 0
1477: PPUSH
1478: LD_INT 7
1480: PUSH
1481: LD_INT 8
1483: PUSH
1484: LD_INT 9
1486: PUSH
1487: LD_INT 10
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_OWVAR 67
1500: ARRAY
1501: PPUSH
1502: CALL_OW 381
// un := CreateHuman ;
1506: LD_ADDR_VAR 0 5
1510: PUSH
1511: CALL_OW 44
1515: ST_TO_ADDR
// if j mod 2 = 0 then
1516: LD_VAR 0 3
1520: PUSH
1521: LD_INT 2
1523: MOD
1524: PUSH
1525: LD_INT 0
1527: EQUAL
1528: IFFALSE 1542
// SetClass ( un , class_sniper ) ;
1530: LD_VAR 0 5
1534: PPUSH
1535: LD_INT 5
1537: PPUSH
1538: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1542: LD_ADDR_EXP 33
1546: PUSH
1547: LD_EXP 33
1551: PPUSH
1552: LD_VAR 0 5
1556: PPUSH
1557: CALL 56851 0 2
1561: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1562: LD_VAR 0 5
1566: PPUSH
1567: LD_VAR 0 8
1571: PUSH
1572: LD_VAR 0 2
1576: ARRAY
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: CALL_OW 49
// SetTag ( un , i ) ;
1585: LD_VAR 0 5
1589: PPUSH
1590: LD_VAR 0 2
1594: PPUSH
1595: CALL_OW 109
// end ;
1599: GO 1472
1601: POP
1602: POP
// end ;
1603: GO 1435
1605: POP
1606: POP
// end ;
1607: LD_VAR 0 1
1611: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1612: LD_EXP 3
1616: PUSH
1617: LD_EXP 25
1621: PPUSH
1622: CALL 21251 0 1
1626: AND
1627: IFFALSE 3995
1629: GO 1631
1631: DISABLE
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
1636: PPUSH
1637: PPUSH
1638: PPUSH
1639: PPUSH
1640: PPUSH
1641: PPUSH
1642: PPUSH
1643: PPUSH
1644: PPUSH
1645: PPUSH
1646: PPUSH
1647: PPUSH
1648: PPUSH
1649: PPUSH
1650: PPUSH
1651: PPUSH
// begin enable ;
1652: ENABLE
// side := 1 ;
1653: LD_ADDR_VAR 0 5
1657: PUSH
1658: LD_INT 1
1660: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1661: LD_ADDR_VAR 0 3
1665: PUSH
1666: LD_INT 22
1668: PUSH
1669: LD_VAR 0 5
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 33
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 50
1690: PUSH
1691: EMPTY
1692: LIST
1693: PUSH
1694: LD_INT 3
1696: PUSH
1697: LD_INT 61
1699: PUSH
1700: EMPTY
1701: LIST
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 69
1717: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1718: LD_VAR 0 3
1722: PUSH
1723: LD_INT 22
1725: PUSH
1726: LD_VAR 0 5
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 50
1737: PUSH
1738: EMPTY
1739: LIST
1740: PUSH
1741: LD_INT 30
1743: PUSH
1744: LD_INT 36
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PPUSH
1756: CALL_OW 69
1760: PPUSH
1761: CALL 21251 0 1
1765: AND
1766: IFFALSE 1794
// for i in remote do
1768: LD_ADDR_VAR 0 1
1772: PUSH
1773: LD_VAR 0 3
1777: PUSH
1778: FOR_IN
1779: IFFALSE 1792
// Connect ( i ) ;
1781: LD_VAR 0 1
1785: PPUSH
1786: CALL 27457 0 1
1790: GO 1778
1792: POP
1793: POP
// if amTech then
1794: LD_EXP 26
1798: IFFALSE 1954
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1800: LD_ADDR_VAR 0 6
1804: PUSH
1805: LD_INT 22
1807: PUSH
1808: LD_VAR 0 5
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: LD_INT 50
1819: PUSH
1820: EMPTY
1821: LIST
1822: PUSH
1823: LD_INT 2
1825: PUSH
1826: LD_INT 30
1828: PUSH
1829: LD_INT 6
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 30
1838: PUSH
1839: LD_INT 7
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 30
1848: PUSH
1849: LD_INT 8
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: PPUSH
1867: CALL_OW 69
1871: ST_TO_ADDR
// if lab then
1872: LD_VAR 0 6
1876: IFFALSE 1954
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
1878: LD_VAR 0 6
1882: PUSH
1883: LD_INT 1
1885: ARRAY
1886: PPUSH
1887: CALL_OW 461
1891: PUSH
1892: LD_INT 2
1894: EQUAL
1895: IFFALSE 1954
// begin for i in amTech do
1897: LD_ADDR_VAR 0 1
1901: PUSH
1902: LD_EXP 26
1906: PUSH
1907: FOR_IN
1908: IFFALSE 1952
// if CanBeResearched ( lab [ 1 ] , i ) then
1910: LD_VAR 0 6
1914: PUSH
1915: LD_INT 1
1917: ARRAY
1918: PPUSH
1919: LD_VAR 0 1
1923: PPUSH
1924: CALL_OW 430
1928: IFFALSE 1950
// begin ComResearch ( lab [ 1 ] , i ) ;
1930: LD_VAR 0 6
1934: PUSH
1935: LD_INT 1
1937: ARRAY
1938: PPUSH
1939: LD_VAR 0 1
1943: PPUSH
1944: CALL_OW 124
// break ;
1948: GO 1952
// end ;
1950: GO 1907
1952: POP
1953: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
1954: LD_ADDR_VAR 0 16
1958: PUSH
1959: LD_INT 1
1961: PPUSH
1962: LD_INT 22
1964: PUSH
1965: LD_VAR 0 5
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 30
1976: PUSH
1977: LD_INT 3
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 50
1986: PUSH
1987: EMPTY
1988: LIST
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: PPUSH
1995: CALL_OW 70
1999: ST_TO_ADDR
// if fac then
2000: LD_VAR 0 16
2004: IFFALSE 2270
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2006: LD_VAR 0 16
2010: PUSH
2011: LD_INT 1
2013: ARRAY
2014: PPUSH
2015: CALL_OW 461
2019: PUSH
2020: LD_INT 2
2022: EQUAL
2023: IFFALSE 2270
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2025: LD_ADDR_VAR 0 17
2029: PUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 30
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 30
2048: PUSH
2049: LD_INT 33
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: PUSH
2061: LD_INT 35
2063: PUSH
2064: LD_INT 0
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PPUSH
2075: CALL_OW 70
2079: ST_TO_ADDR
// if emptyTowers then
2080: LD_VAR 0 17
2084: IFFALSE 2132
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2086: LD_ADDR_VAR 0 18
2090: PUSH
2091: LD_VAR 0 17
2095: PUSH
2096: LD_INT 1
2098: ARRAY
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: CALL 29496 0 2
2107: ST_TO_ADDR
// if weapon then
2108: LD_VAR 0 18
2112: IFFALSE 2132
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2114: LD_VAR 0 17
2118: PUSH
2119: LD_INT 1
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 18
2127: PPUSH
2128: CALL_OW 148
// end ; if amConstructList then
2132: LD_EXP 27
2136: IFFALSE 2270
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2138: LD_VAR 0 16
2142: PUSH
2143: LD_INT 1
2145: ARRAY
2146: PPUSH
2147: LD_EXP 27
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: LD_EXP 27
2164: PUSH
2165: LD_INT 1
2167: ARRAY
2168: PUSH
2169: LD_INT 2
2171: ARRAY
2172: PPUSH
2173: LD_EXP 27
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PUSH
2182: LD_INT 3
2184: ARRAY
2185: PPUSH
2186: LD_EXP 27
2190: PUSH
2191: LD_INT 1
2193: ARRAY
2194: PUSH
2195: LD_INT 4
2197: ARRAY
2198: PPUSH
2199: CALL_OW 448
2203: IFFALSE 2270
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2205: LD_VAR 0 16
2209: PUSH
2210: LD_INT 1
2212: ARRAY
2213: PPUSH
2214: LD_EXP 27
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PUSH
2223: LD_INT 1
2225: ARRAY
2226: PPUSH
2227: LD_EXP 27
2231: PUSH
2232: LD_INT 1
2234: ARRAY
2235: PUSH
2236: LD_INT 2
2238: ARRAY
2239: PPUSH
2240: LD_EXP 27
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PPUSH
2253: LD_EXP 27
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PUSH
2262: LD_INT 4
2264: ARRAY
2265: PPUSH
2266: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2270: LD_ADDR_VAR 0 2
2274: PUSH
2275: LD_INT 1
2277: PPUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 1000
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 70
2327: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_INT 13
2335: PPUSH
2336: CALL_OW 435
2340: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2341: LD_ADDR_VAR 0 11
2345: PUSH
2346: LD_EXP 25
2350: PPUSH
2351: LD_INT 25
2353: PUSH
2354: LD_INT 4
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 50
2363: PUSH
2364: EMPTY
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PPUSH
2371: CALL_OW 72
2375: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2376: LD_ADDR_VAR 0 6
2380: PUSH
2381: LD_INT 1
2383: PPUSH
2384: LD_INT 2
2386: PUSH
2387: LD_INT 30
2389: PUSH
2390: LD_INT 6
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 30
2399: PUSH
2400: LD_INT 7
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 30
2409: PUSH
2410: LD_INT 8
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: PPUSH
2423: CALL_OW 70
2427: ST_TO_ADDR
// if sci then
2428: LD_VAR 0 11
2432: IFFALSE 2591
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2434: LD_ADDR_VAR 0 13
2438: PUSH
2439: LD_EXP 25
2443: PPUSH
2444: LD_INT 95
2446: PUSH
2447: LD_INT 1
2449: PUSH
2450: EMPTY
2451: LIST
2452: LIST
2453: PUSH
2454: LD_INT 120
2456: PUSH
2457: LD_INT 1
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PPUSH
2468: CALL_OW 72
2472: ST_TO_ADDR
// if hurtUnits then
2473: LD_VAR 0 13
2477: IFFALSE 2538
// begin for i in sci do
2479: LD_ADDR_VAR 0 1
2483: PUSH
2484: LD_VAR 0 11
2488: PUSH
2489: FOR_IN
2490: IFFALSE 2534
// if IsInUnit ( i ) then
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 310
2501: IFFALSE 2514
// ComExitBuilding ( i ) else
2503: LD_VAR 0 1
2507: PPUSH
2508: CALL_OW 122
2512: GO 2532
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2514: LD_VAR 0 1
2518: PPUSH
2519: LD_VAR 0 13
2523: PUSH
2524: LD_INT 1
2526: ARRAY
2527: PPUSH
2528: CALL_OW 128
2532: GO 2489
2534: POP
2535: POP
// end else
2536: GO 2591
// if lab then
2538: LD_VAR 0 6
2542: IFFALSE 2591
// begin for i in sci do
2544: LD_ADDR_VAR 0 1
2548: PUSH
2549: LD_VAR 0 11
2553: PUSH
2554: FOR_IN
2555: IFFALSE 2589
// if not IsInUnit ( i ) then
2557: LD_VAR 0 1
2561: PPUSH
2562: CALL_OW 310
2566: NOT
2567: IFFALSE 2587
// ComEnterUnit ( i , lab [ 1 ] ) ;
2569: LD_VAR 0 1
2573: PPUSH
2574: LD_VAR 0 6
2578: PUSH
2579: LD_INT 1
2581: ARRAY
2582: PPUSH
2583: CALL_OW 120
2587: GO 2554
2589: POP
2590: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2591: LD_ADDR_VAR 0 7
2595: PUSH
2596: LD_EXP 25
2600: PPUSH
2601: LD_INT 25
2603: PUSH
2604: LD_INT 2
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PPUSH
2611: CALL_OW 72
2615: ST_TO_ADDR
// if eng then
2616: LD_VAR 0 7
2620: IFFALSE 3395
// begin for i in eng do
2622: LD_ADDR_VAR 0 1
2626: PUSH
2627: LD_VAR 0 7
2631: PUSH
2632: FOR_IN
2633: IFFALSE 3393
// begin tag := GetTag ( i ) ;
2635: LD_ADDR_VAR 0 8
2639: PUSH
2640: LD_VAR 0 1
2644: PPUSH
2645: CALL_OW 110
2649: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL_OW 256
2659: PUSH
2660: LD_INT 800
2662: LESS
2663: PUSH
2664: LD_VAR 0 8
2668: PUSH
2669: LD_INT 1
2671: NONEQUAL
2672: AND
2673: IFFALSE 2723
// begin SetTag ( i , tHeal ) ;
2675: LD_VAR 0 1
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2687: LD_VAR 0 1
2691: PPUSH
2692: LD_EXP 28
2696: PUSH
2697: LD_INT 1
2699: ARRAY
2700: PPUSH
2701: LD_EXP 28
2705: PUSH
2706: LD_INT 2
2708: ARRAY
2709: PPUSH
2710: CALL_OW 111
// AddComHold ( i ) ;
2714: LD_VAR 0 1
2718: PPUSH
2719: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2723: LD_VAR 0 8
2727: PUSH
2728: LD_INT 1
2730: EQUAL
2731: PUSH
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 256
2741: PUSH
2742: LD_INT 1000
2744: EQUAL
2745: AND
2746: IFFALSE 2760
// SetTag ( i , 0 ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_INT 0
2755: PPUSH
2756: CALL_OW 109
// if not tag then
2760: LD_VAR 0 8
2764: NOT
2765: IFFALSE 2933
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2767: LD_ADDR_VAR 0 4
2771: PUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_INT 57
2777: PUSH
2778: EMPTY
2779: LIST
2780: PPUSH
2781: CALL_OW 70
2785: ST_TO_ADDR
// if undone then
2786: LD_VAR 0 4
2790: IFFALSE 2812
// begin ComComplete ( i , undone [ 1 ] ) ;
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_VAR 0 4
2801: PUSH
2802: LD_INT 1
2804: ARRAY
2805: PPUSH
2806: CALL 27349 0 2
// continue ;
2810: GO 2632
// end ; if cr or tmp or Count ( amBuildings ) then
2812: LD_VAR 0 10
2816: PUSH
2817: LD_VAR 0 2
2821: OR
2822: PUSH
2823: LD_EXP 29
2827: PPUSH
2828: CALL 21251 0 1
2832: OR
2833: IFFALSE 2909
// begin if IsInUnit ( i ) then
2835: LD_VAR 0 1
2839: PPUSH
2840: CALL_OW 310
2844: IFFALSE 2855
// ComExitBuilding ( i ) ;
2846: LD_VAR 0 1
2850: PPUSH
2851: CALL_OW 122
// if tmp then
2855: LD_VAR 0 2
2859: IFFALSE 2875
// SetTag ( i , tRepair ) else
2861: LD_VAR 0 1
2865: PPUSH
2866: LD_INT 3
2868: PPUSH
2869: CALL_OW 109
2873: GO 2907
// if cr then
2875: LD_VAR 0 10
2879: IFFALSE 2895
// SetTag ( i , tCrates ) else
2881: LD_VAR 0 1
2885: PPUSH
2886: LD_INT 2
2888: PPUSH
2889: CALL_OW 109
2893: GO 2907
// SetTag ( i , tBuild ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 5
2902: PPUSH
2903: CALL_OW 109
// end else
2907: GO 2933
// if not IsInUnit ( i ) then
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL_OW 310
2918: NOT
2919: IFFALSE 2933
// ComEnterUnit ( i , amBase ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: CALL_OW 120
// end ; if tag = tRepair then
2933: LD_VAR 0 8
2937: PUSH
2938: LD_INT 3
2940: EQUAL
2941: IFFALSE 3043
// begin if IsInUnit ( i ) then
2943: LD_VAR 0 1
2947: PPUSH
2948: CALL_OW 310
2952: IFFALSE 2965
// begin ComExitBuilding ( i ) ;
2954: LD_VAR 0 1
2958: PPUSH
2959: CALL_OW 122
// continue ;
2963: GO 2632
// end ; if not tmp then
2965: LD_VAR 0 2
2969: NOT
2970: IFFALSE 2986
// begin SetTag ( i , 0 ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 109
// continue ;
2984: GO 2632
// end ; if not HasTask ( i ) then
2986: LD_VAR 0 1
2990: PPUSH
2991: CALL_OW 314
2995: NOT
2996: IFFALSE 3016
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_VAR 0 2
3007: PUSH
3008: LD_INT 1
3010: ARRAY
3011: PPUSH
3012: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3016: LD_VAR 0 1
3020: PPUSH
3021: LD_INT 1
3023: PPUSH
3024: CALL_OW 308
3028: NOT
3029: IFFALSE 3043
// ComMoveToArea ( i , amBaseArea ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 1
3038: PPUSH
3039: CALL_OW 113
// end ; if tag = tBuild then
3043: LD_VAR 0 8
3047: PUSH
3048: LD_INT 5
3050: EQUAL
3051: IFFALSE 3246
// begin if IsInUnit ( i ) then
3053: LD_VAR 0 1
3057: PPUSH
3058: CALL_OW 310
3062: IFFALSE 3075
// begin ComExitBuilding ( i ) ;
3064: LD_VAR 0 1
3068: PPUSH
3069: CALL_OW 122
// continue ;
3073: GO 2632
// end ; if not Count ( amBuildings ) then
3075: LD_EXP 29
3079: PPUSH
3080: CALL 21251 0 1
3084: NOT
3085: IFFALSE 3103
// begin SetTag ( i , 0 ) ;
3087: LD_VAR 0 1
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 109
// continue ;
3099: GO 2632
// end else
3101: GO 3140
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3103: LD_INT 2
3105: PPUSH
3106: LD_EXP 29
3110: PUSH
3111: LD_INT 1
3113: ARRAY
3114: PUSH
3115: LD_INT 1
3117: ARRAY
3118: PPUSH
3119: CALL 10109 0 2
3123: NOT
3124: IFFALSE 3140
// begin SetTag ( i , 0 ) ;
3126: LD_VAR 0 1
3130: PPUSH
3131: LD_INT 0
3133: PPUSH
3134: CALL_OW 109
// continue ;
3138: GO 2632
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3140: LD_ADDR_VAR 0 4
3144: PUSH
3145: LD_INT 1
3147: PPUSH
3148: LD_INT 57
3150: PUSH
3151: EMPTY
3152: LIST
3153: PPUSH
3154: CALL_OW 70
3158: ST_TO_ADDR
// if undone then
3159: LD_VAR 0 4
3163: IFFALSE 3185
// begin ComComplete ( i , undone [ 1 ] ) ;
3165: LD_VAR 0 1
3169: PPUSH
3170: LD_VAR 0 4
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: CALL 27349 0 2
// continue ;
3183: GO 2632
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3185: LD_VAR 0 1
3189: PPUSH
3190: LD_EXP 29
3194: PUSH
3195: LD_INT 1
3197: ARRAY
3198: PUSH
3199: LD_INT 1
3201: ARRAY
3202: PPUSH
3203: LD_EXP 29
3207: PUSH
3208: LD_INT 1
3210: ARRAY
3211: PUSH
3212: LD_INT 2
3214: ARRAY
3215: PPUSH
3216: LD_EXP 29
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PUSH
3225: LD_INT 3
3227: ARRAY
3228: PPUSH
3229: LD_EXP 29
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PUSH
3238: LD_INT 4
3240: ARRAY
3241: PPUSH
3242: CALL_OW 145
// end ; if tag = tCrates then
3246: LD_VAR 0 8
3250: PUSH
3251: LD_INT 2
3253: EQUAL
3254: IFFALSE 3391
// begin if IsInUnit ( i ) then
3256: LD_VAR 0 1
3260: PPUSH
3261: CALL_OW 310
3265: IFFALSE 3278
// begin ComExitBuilding ( i ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 122
// continue ;
3276: GO 2632
// end ; if not cr then
3278: LD_VAR 0 10
3282: NOT
3283: IFFALSE 3299
// begin SetTag ( i , 0 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 109
// continue ;
3297: GO 2632
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3299: LD_VAR 0 1
3303: PPUSH
3304: CALL_OW 314
3308: NOT
3309: PUSH
3310: LD_INT 81
3312: PUSH
3313: LD_VAR 0 5
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 92
3324: PUSH
3325: LD_VAR 0 10
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PUSH
3334: LD_VAR 0 10
3338: PUSH
3339: LD_INT 2
3341: ARRAY
3342: PUSH
3343: LD_INT 12
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PPUSH
3356: CALL_OW 69
3360: NOT
3361: AND
3362: IFFALSE 3391
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_VAR 0 10
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_VAR 0 10
3382: PUSH
3383: LD_INT 2
3385: ARRAY
3386: PPUSH
3387: CALL_OW 117
// end ; end ;
3391: GO 2632
3393: POP
3394: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3395: LD_ADDR_VAR 0 12
3399: PUSH
3400: LD_EXP 25
3404: PPUSH
3405: LD_INT 2
3407: PUSH
3408: LD_INT 25
3410: PUSH
3411: LD_INT 1
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: LD_INT 25
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 50
3435: PUSH
3436: EMPTY
3437: LIST
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: PUSH
3448: LD_EXP 31
3452: UNION
3453: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3454: LD_ADDR_VAR 0 14
3458: PUSH
3459: LD_INT 1
3461: PPUSH
3462: LD_INT 81
3464: PUSH
3465: LD_VAR 0 5
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 70
3478: ST_TO_ADDR
// if sol then
3479: LD_VAR 0 12
3483: IFFALSE 3995
// begin if enemyInBase then
3485: LD_VAR 0 14
3489: IFFALSE 3634
// begin for i in sol do
3491: LD_ADDR_VAR 0 1
3495: PUSH
3496: LD_VAR 0 12
3500: PUSH
3501: FOR_IN
3502: IFFALSE 3630
// begin tw := IsInUnit ( i ) ;
3504: LD_ADDR_VAR 0 9
3508: PUSH
3509: LD_VAR 0 1
3513: PPUSH
3514: CALL_OW 310
3518: ST_TO_ADDR
// if tw then
3519: LD_VAR 0 9
3523: IFFALSE 3604
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3525: LD_VAR 0 9
3529: PUSH
3530: LD_INT 22
3532: PUSH
3533: LD_VAR 0 5
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 101
3544: PUSH
3545: LD_INT 2
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 2
3554: PUSH
3555: LD_INT 30
3557: PUSH
3558: LD_INT 32
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 30
3567: PUSH
3568: LD_INT 31
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: PPUSH
3585: CALL_OW 69
3589: IN
3590: NOT
3591: IFFALSE 3602
// ComExitBuilding ( i ) ;
3593: LD_VAR 0 1
3597: PPUSH
3598: CALL_OW 122
// end else
3602: GO 3628
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_VAR 0 14
3613: PPUSH
3614: LD_VAR 0 1
3618: PPUSH
3619: CALL_OW 74
3623: PPUSH
3624: CALL_OW 115
// end ;
3628: GO 3501
3630: POP
3631: POP
// end else
3632: GO 3995
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3634: LD_ADDR_VAR 0 15
3638: PUSH
3639: LD_INT 1
3641: PPUSH
3642: LD_INT 3
3644: PUSH
3645: LD_INT 62
3647: PUSH
3648: EMPTY
3649: LIST
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 2
3657: PUSH
3658: LD_INT 30
3660: PUSH
3661: LD_INT 32
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 30
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 30
3680: PUSH
3681: LD_INT 5
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: LD_INT 30
3690: PUSH
3691: LD_INT 31
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PPUSH
3709: CALL_OW 70
3713: ST_TO_ADDR
// if empty then
3714: LD_VAR 0 15
3718: IFFALSE 3735
// empty := ReverseArray ( empty ) ;
3720: LD_ADDR_VAR 0 15
3724: PUSH
3725: LD_VAR 0 15
3729: PPUSH
3730: CALL 52127 0 1
3734: ST_TO_ADDR
// for i in sol do
3735: LD_ADDR_VAR 0 1
3739: PUSH
3740: LD_VAR 0 12
3744: PUSH
3745: FOR_IN
3746: IFFALSE 3993
// begin tag := GetTag ( i ) ;
3748: LD_ADDR_VAR 0 8
3752: PUSH
3753: LD_VAR 0 1
3757: PPUSH
3758: CALL_OW 110
3762: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3763: LD_VAR 0 1
3767: PPUSH
3768: CALL_OW 256
3772: PUSH
3773: LD_INT 1000
3775: LESS
3776: PUSH
3777: LD_VAR 0 8
3781: PUSH
3782: LD_INT 1
3784: NONEQUAL
3785: AND
3786: IFFALSE 3838
// begin SetTag ( i , tHeal ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3800: LD_VAR 0 1
3804: PPUSH
3805: LD_EXP 28
3809: PUSH
3810: LD_INT 1
3812: ARRAY
3813: PPUSH
3814: LD_EXP 28
3818: PUSH
3819: LD_INT 2
3821: ARRAY
3822: PPUSH
3823: CALL_OW 111
// AddComHold ( i ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: CALL_OW 200
// continue ;
3836: GO 3745
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 256
3847: PUSH
3848: LD_INT 1000
3850: EQUAL
3851: PUSH
3852: LD_VAR 0 8
3856: PUSH
3857: LD_INT 1
3859: EQUAL
3860: AND
3861: IFFALSE 3877
// begin SetTag ( i , 0 ) ;
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 109
// continue ;
3875: GO 3745
// end ; if HasTask ( i ) then
3877: LD_VAR 0 1
3881: PPUSH
3882: CALL_OW 314
3886: IFFALSE 3890
// continue ;
3888: GO 3745
// if not IsInUnit ( i ) and not tag and empty then
3890: LD_VAR 0 1
3894: PPUSH
3895: CALL_OW 310
3899: NOT
3900: PUSH
3901: LD_VAR 0 8
3905: NOT
3906: AND
3907: PUSH
3908: LD_VAR 0 15
3912: AND
3913: IFFALSE 3991
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
3915: LD_VAR 0 1
3919: PPUSH
3920: LD_VAR 0 15
3924: PUSH
3925: LD_INT 1
3927: ARRAY
3928: PPUSH
3929: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
3933: LD_VAR 0 15
3937: PUSH
3938: LD_INT 1
3940: ARRAY
3941: PPUSH
3942: CALL_OW 266
3946: PUSH
3947: LD_INT 5
3949: EQUAL
3950: PUSH
3951: LD_INT 50
3953: PPUSH
3954: CALL_OW 13
3958: AND
3959: IFFALSE 3973
// AddComChangeProfession ( i , class_sniper ) ;
3961: LD_VAR 0 1
3965: PPUSH
3966: LD_INT 5
3968: PPUSH
3969: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
3973: LD_ADDR_VAR 0 15
3977: PUSH
3978: LD_VAR 0 15
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: CALL_OW 3
3990: ST_TO_ADDR
// end ; end ;
3991: GO 3745
3993: POP
3994: POP
// end ; end ; end ;
3995: PPOPN 18
3997: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
3998: LD_EXP 32
4002: PPUSH
4003: CALL_OW 302
4007: PUSH
4008: LD_EXP 3
4012: AND
4013: IFFALSE 4295
4015: GO 4017
4017: DISABLE
4018: LD_INT 0
4020: PPUSH
4021: PPUSH
// begin enable ;
4022: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4023: LD_ADDR_VAR 0 2
4027: PUSH
4028: LD_INT 1
4030: PPUSH
4031: LD_INT 81
4033: PUSH
4034: LD_INT 1
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: LD_INT 50
4043: PUSH
4044: EMPTY
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PPUSH
4051: CALL_OW 70
4055: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4056: LD_ADDR_VAR 0 1
4060: PUSH
4061: LD_INT 17
4063: PPUSH
4064: CALL_OW 435
4068: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4069: LD_EXP 32
4073: PPUSH
4074: CALL_OW 261
4078: PUSH
4079: LD_INT 10
4081: LESS
4082: PUSH
4083: LD_INT 2
4085: PPUSH
4086: LD_EXP 32
4090: PPUSH
4091: CALL_OW 292
4095: NOT
4096: AND
4097: PUSH
4098: LD_EXP 32
4102: PPUSH
4103: CALL_OW 262
4107: PUSH
4108: LD_INT 1
4110: EQUAL
4111: AND
4112: IFFALSE 4126
// SetFuel ( amCargo , 100 ) ;
4114: LD_EXP 32
4118: PPUSH
4119: LD_INT 100
4121: PPUSH
4122: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4126: LD_EXP 32
4130: PPUSH
4131: CALL_OW 314
4135: NOT
4136: PUSH
4137: LD_EXP 32
4141: PPUSH
4142: LD_INT 1
4144: PPUSH
4145: CALL_OW 289
4149: PUSH
4150: LD_INT 100
4152: LESS
4153: AND
4154: PUSH
4155: LD_VAR 0 2
4159: NOT
4160: AND
4161: IFFALSE 4227
// begin if cr then
4163: LD_VAR 0 1
4167: IFFALSE 4198
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4169: LD_EXP 32
4173: PPUSH
4174: LD_VAR 0 1
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: PPUSH
4183: LD_VAR 0 1
4187: PUSH
4188: LD_INT 2
4190: ARRAY
4191: PPUSH
4192: CALL_OW 117
4196: GO 4225
// if not IsInArea ( amCargo , cratesWestArea ) then
4198: LD_EXP 32
4202: PPUSH
4203: LD_INT 17
4205: PPUSH
4206: CALL_OW 308
4210: NOT
4211: IFFALSE 4225
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4213: LD_EXP 32
4217: PPUSH
4218: LD_INT 17
4220: PPUSH
4221: CALL_OW 113
// exit ;
4225: GO 4295
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4227: LD_VAR 0 2
4231: PUSH
4232: LD_EXP 32
4236: PPUSH
4237: LD_INT 1
4239: PPUSH
4240: CALL_OW 308
4244: NOT
4245: AND
4246: IFFALSE 4265
// ComMoveXY ( amCargo , 93 , 137 ) else
4248: LD_EXP 32
4252: PPUSH
4253: LD_INT 93
4255: PPUSH
4256: LD_INT 137
4258: PPUSH
4259: CALL_OW 111
4263: GO 4295
// if GetCargo ( amCargo , mat_cans ) = 100 then
4265: LD_EXP 32
4269: PPUSH
4270: LD_INT 1
4272: PPUSH
4273: CALL_OW 289
4277: PUSH
4278: LD_INT 100
4280: EQUAL
4281: IFFALSE 4295
// ComGive ( amCargo , amBase ) ;
4283: LD_EXP 32
4287: PPUSH
4288: LD_INT 2
4290: PPUSH
4291: CALL_OW 161
// end ;
4295: PPOPN 2
4297: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4298: LD_EXP 3
4302: PUSH
4303: LD_INT 22
4305: PUSH
4306: LD_INT 1
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: LD_INT 3
4315: PUSH
4316: LD_INT 60
4318: PUSH
4319: EMPTY
4320: LIST
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 50
4328: PUSH
4329: EMPTY
4330: LIST
4331: PUSH
4332: LD_INT 34
4334: PUSH
4335: LD_INT 13
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PPUSH
4348: CALL_OW 69
4352: AND
4353: PUSH
4354: LD_INT 22
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: LD_INT 24
4369: PUSH
4370: LD_INT 1000
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 21
4383: PUSH
4384: LD_INT 3
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: AND
4401: IFFALSE 4634
4403: GO 4405
4405: DISABLE
4406: LD_INT 0
4408: PPUSH
4409: PPUSH
4410: PPUSH
// begin enable ;
4411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4412: LD_ADDR_VAR 0 2
4416: PUSH
4417: LD_INT 22
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: LD_INT 24
4432: PUSH
4433: LD_INT 1000
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 21
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: LIST
4458: PPUSH
4459: CALL_OW 69
4463: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4464: LD_ADDR_VAR 0 3
4468: PUSH
4469: LD_INT 22
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: LD_INT 3
4481: PUSH
4482: LD_INT 24
4484: PUSH
4485: LD_INT 600
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 21
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PPUSH
4511: CALL_OW 69
4515: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4516: LD_ADDR_VAR 0 1
4520: PUSH
4521: LD_INT 22
4523: PUSH
4524: LD_INT 1
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: PUSH
4531: LD_INT 3
4533: PUSH
4534: LD_INT 60
4536: PUSH
4537: EMPTY
4538: LIST
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 50
4546: PUSH
4547: EMPTY
4548: LIST
4549: PUSH
4550: LD_INT 34
4552: PUSH
4553: LD_INT 13
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PPUSH
4566: CALL_OW 69
4570: PUSH
4571: FOR_IN
4572: IFFALSE 4632
// begin if tmp2 then
4574: LD_VAR 0 3
4578: IFFALSE 4606
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4580: LD_VAR 0 1
4584: PPUSH
4585: LD_VAR 0 3
4589: PPUSH
4590: LD_VAR 0 1
4594: PPUSH
4595: CALL_OW 74
4599: PPUSH
4600: CALL_OW 130
4604: GO 4630
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4606: LD_VAR 0 1
4610: PPUSH
4611: LD_VAR 0 2
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 74
4625: PPUSH
4626: CALL_OW 130
// end ;
4630: GO 4571
4632: POP
4633: POP
// end ;
4634: PPOPN 3
4636: END
// every 0 0$2 trigger amPatrol and gameActive do var i , j , points , x , y , tag , enemy ;
4637: LD_EXP 33
4641: PUSH
4642: LD_EXP 19
4646: AND
4647: IFFALSE 4972
4649: GO 4651
4651: DISABLE
4652: LD_INT 0
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
// begin enable ;
4661: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: LD_INT 30
4669: PUSH
4670: LD_INT 31
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 32
4679: PUSH
4680: LD_INT 33
4682: PUSH
4683: LD_INT 34
4685: PUSH
4686: LD_INT 35
4688: PUSH
4689: LD_INT 33
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: LD_INT 36
4701: PUSH
4702: LD_INT 37
4704: PUSH
4705: LD_INT 38
4707: PUSH
4708: LD_INT 39
4710: PUSH
4711: LD_INT 40
4713: PUSH
4714: LD_INT 41
4716: PUSH
4717: LD_INT 42
4719: PUSH
4720: LD_INT 43
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: ST_TO_ADDR
// for i in amPatrol do
4738: LD_ADDR_VAR 0 1
4742: PUSH
4743: LD_EXP 33
4747: PUSH
4748: FOR_IN
4749: IFFALSE 4970
// begin if See ( 2 , i ) then
4751: LD_INT 2
4753: PPUSH
4754: LD_VAR 0 1
4758: PPUSH
4759: CALL_OW 292
4763: IFFALSE 4866
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4765: LD_ADDR_VAR 0 7
4769: PUSH
4770: LD_INT 22
4772: PUSH
4773: LD_INT 2
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PPUSH
4780: CALL_OW 69
4784: PPUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: CALL_OW 74
4794: ST_TO_ADDR
// if enemy then
4795: LD_VAR 0 7
4799: IFFALSE 4866
// begin x := GetX ( enemy ) ;
4801: LD_ADDR_VAR 0 4
4805: PUSH
4806: LD_VAR 0 7
4810: PPUSH
4811: CALL_OW 250
4815: ST_TO_ADDR
// y := GetY ( enemy ) ;
4816: LD_ADDR_VAR 0 5
4820: PUSH
4821: LD_VAR 0 7
4825: PPUSH
4826: CALL_OW 251
4830: ST_TO_ADDR
// if ValidHex ( x , y ) then
4831: LD_VAR 0 4
4835: PPUSH
4836: LD_VAR 0 5
4840: PPUSH
4841: CALL_OW 488
4845: IFFALSE 4866
// ComAgressiveMove ( i , x , y ) ;
4847: LD_VAR 0 1
4851: PPUSH
4852: LD_VAR 0 4
4856: PPUSH
4857: LD_VAR 0 5
4861: PPUSH
4862: CALL_OW 114
// end ; end ; if HasTask ( i ) then
4866: LD_VAR 0 1
4870: PPUSH
4871: CALL_OW 314
4875: IFFALSE 4879
// continue ;
4877: GO 4748
// tag := GetTag ( i ) ;
4879: LD_ADDR_VAR 0 6
4883: PUSH
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 110
4893: ST_TO_ADDR
// for j := 1 to points [ tag ] do
4894: LD_ADDR_VAR 0 2
4898: PUSH
4899: DOUBLE
4900: LD_INT 1
4902: DEC
4903: ST_TO_ADDR
4904: LD_VAR 0 3
4908: PUSH
4909: LD_VAR 0 6
4913: ARRAY
4914: PUSH
4915: FOR_TO
4916: IFFALSE 4966
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
4918: LD_VAR 0 1
4922: PPUSH
4923: LD_VAR 0 3
4927: PUSH
4928: LD_VAR 0 6
4932: ARRAY
4933: PUSH
4934: LD_VAR 0 2
4938: ARRAY
4939: PPUSH
4940: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
4944: LD_VAR 0 1
4948: PPUSH
4949: LD_INT 175
4951: PPUSH
4952: LD_INT 385
4954: PPUSH
4955: CALL_OW 12
4959: PPUSH
4960: CALL_OW 202
// end ;
4964: GO 4915
4966: POP
4967: POP
// end ;
4968: GO 4748
4970: POP
4971: POP
// end ;
4972: PPOPN 7
4974: END
// every 6 6$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican do var i , parts , part ;
4975: LD_EXP 30
4979: PPUSH
4980: CALL 21251 0 1
4984: PUSH
4985: LD_INT 5
4987: LESS
4988: PUSH
4989: LD_EXP 3
4993: AND
4994: PUSH
4995: LD_EXP 8
4999: AND
5000: IFFALSE 5194
5002: GO 5004
5004: DISABLE
5005: LD_INT 0
5007: PPUSH
5008: PPUSH
5009: PPUSH
// begin enable ;
5010: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: LD_INT 9
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 4
5028: PUSH
5029: LD_INT 9
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 6
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 3
5048: PUSH
5049: LD_INT 5
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: LD_INT 4
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PUSH
5066: LD_INT 1
5068: PUSH
5069: LD_INT 2
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
5084: LD_ADDR_VAR 0 1
5088: PUSH
5089: DOUBLE
5090: LD_INT 1
5092: DEC
5093: ST_TO_ADDR
5094: LD_INT 4
5096: PUSH
5097: LD_INT 5
5099: PUSH
5100: LD_INT 6
5102: PUSH
5103: LD_INT 6
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: LD_OWVAR 67
5116: ARRAY
5117: PUSH
5118: FOR_TO
5119: IFFALSE 5192
// begin part := parts [ rand ( 1 , parts ) ] ;
5121: LD_ADDR_VAR 0 3
5125: PUSH
5126: LD_VAR 0 2
5130: PUSH
5131: LD_INT 1
5133: PPUSH
5134: LD_VAR 0 2
5138: PPUSH
5139: CALL_OW 12
5143: ARRAY
5144: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5145: LD_ADDR_EXP 27
5149: PUSH
5150: LD_EXP 27
5154: PPUSH
5155: LD_VAR 0 3
5159: PUSH
5160: LD_INT 1
5162: ARRAY
5163: PUSH
5164: LD_INT 1
5166: PUSH
5167: LD_INT 2
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: LD_INT 2
5177: ARRAY
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PPUSH
5185: CALL 56851 0 2
5189: ST_TO_ADDR
5190: GO 5118
5192: POP
5193: POP
// end ;
5194: PPOPN 3
5196: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) do var i , tmp , tmp2 ;
5197: LD_EXP 11
5201: NOT
5202: PUSH
5203: LD_EXP 30
5207: PPUSH
5208: CALL 21251 0 1
5212: AND
5213: IFFALSE 5422
5215: GO 5217
5217: DISABLE
5218: LD_INT 0
5220: PPUSH
5221: PPUSH
5222: PPUSH
// begin enable ;
5223: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5224: LD_ADDR_VAR 0 2
5228: PUSH
5229: LD_EXP 30
5233: PPUSH
5234: LD_INT 61
5236: PUSH
5237: EMPTY
5238: LIST
5239: PUSH
5240: LD_INT 50
5242: PUSH
5243: EMPTY
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PPUSH
5250: CALL_OW 72
5254: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5255: LD_ADDR_EXP 30
5259: PUSH
5260: LD_EXP 30
5264: PUSH
5265: LD_VAR 0 2
5269: DIFF
5270: ST_TO_ADDR
// if not tmp then
5271: LD_VAR 0 2
5275: NOT
5276: IFFALSE 5280
// exit ;
5278: GO 5422
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5280: LD_ADDR_VAR 0 3
5284: PUSH
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 34
5292: PUSH
5293: LD_INT 2
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 72
5304: ST_TO_ADDR
// if tmp2 then
5305: LD_VAR 0 3
5309: IFFALSE 5326
// ComMoveXY ( tmp2 , 241 , 99 ) ;
5311: LD_VAR 0 3
5315: PPUSH
5316: LD_INT 241
5318: PPUSH
5319: LD_INT 99
5321: PPUSH
5322: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5326: LD_INT 35
5328: PPUSH
5329: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5333: LD_ADDR_VAR 0 2
5337: PUSH
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_INT 50
5345: PUSH
5346: EMPTY
5347: LIST
5348: PPUSH
5349: CALL_OW 72
5353: ST_TO_ADDR
// for i in tmp do
5354: LD_ADDR_VAR 0 1
5358: PUSH
5359: LD_VAR 0 2
5363: PUSH
5364: FOR_IN
5365: IFFALSE 5413
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5367: LD_VAR 0 1
5371: PPUSH
5372: LD_INT 187
5374: PUSH
5375: LD_INT 114
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: LD_INT 203
5384: PUSH
5385: LD_INT 113
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 218
5394: PUSH
5395: LD_INT 108
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL 59455 0 2
5411: GO 5364
5413: POP
5414: POP
// until not tmp ;
5415: LD_VAR 0 2
5419: NOT
5420: IFFALSE 5326
// end ; end_of_file
5422: PPOPN 3
5424: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5425: LD_INT 0
5427: PPUSH
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
// uc_side := 8 ;
5434: LD_ADDR_OWVAR 20
5438: PUSH
5439: LD_INT 8
5441: ST_TO_ADDR
// uc_nation := nation_arabian ;
5442: LD_ADDR_OWVAR 21
5446: PUSH
5447: LD_INT 2
5449: ST_TO_ADDR
// legForces := [ ] ;
5450: LD_ADDR_EXP 35
5454: PUSH
5455: EMPTY
5456: ST_TO_ADDR
// legEForces := [ ] ;
5457: LD_ADDR_EXP 36
5461: PUSH
5462: EMPTY
5463: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5464: LD_ADDR_EXP 37
5468: PUSH
5469: LD_INT 8
5471: PPUSH
5472: LD_INT 2
5474: PPUSH
5475: LD_INT 1
5477: PPUSH
5478: CALL 19212 0 3
5482: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5483: LD_ADDR_EXP 38
5487: PUSH
5488: LD_INT 13
5490: PUSH
5491: LD_INT 1
5493: PUSH
5494: LD_INT 2
5496: PUSH
5497: LD_INT 32
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: PUSH
5506: EMPTY
5507: LIST
5508: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5509: LD_ADDR_EXP 39
5513: PUSH
5514: LD_INT 195
5516: PUSH
5517: LD_INT 15
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: ST_TO_ADDR
// legBuildings := [ ] ;
5524: LD_ADDR_EXP 40
5528: PUSH
5529: EMPTY
5530: ST_TO_ADDR
// legTanks := [ ] ;
5531: LD_ADDR_EXP 41
5535: PUSH
5536: EMPTY
5537: ST_TO_ADDR
// legCargo := 0 ;
5538: LD_ADDR_EXP 42
5542: PUSH
5543: LD_INT 0
5545: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5546: LD_ADDR_VAR 0 7
5550: PUSH
5551: LD_INT 219
5553: PUSH
5554: LD_INT 31
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 166
5563: PUSH
5564: LD_INT 31
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: ST_TO_ADDR
// for i in sources do
5575: LD_ADDR_VAR 0 2
5579: PUSH
5580: LD_VAR 0 7
5584: PUSH
5585: FOR_IN
5586: IFFALSE 5615
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
5588: LD_VAR 0 2
5592: PUSH
5593: LD_INT 1
5595: ARRAY
5596: PPUSH
5597: LD_VAR 0 2
5601: PUSH
5602: LD_INT 2
5604: ARRAY
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 441
5613: GO 5585
5615: POP
5616: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
5617: LD_INT 38
5619: PPUSH
5620: CALL_OW 274
5624: PPUSH
5625: LD_INT 1
5627: PPUSH
5628: LD_INT 650
5630: PPUSH
5631: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
5635: LD_INT 38
5637: PPUSH
5638: CALL_OW 274
5642: PPUSH
5643: LD_INT 2
5645: PPUSH
5646: LD_INT 120
5648: PPUSH
5649: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
5653: LD_INT 38
5655: PPUSH
5656: CALL_OW 274
5660: PPUSH
5661: LD_INT 3
5663: PPUSH
5664: LD_INT 50
5666: PPUSH
5667: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5671: LD_ADDR_VAR 0 6
5675: PUSH
5676: LD_INT 6
5678: PUSH
5679: LD_INT 7
5681: PUSH
5682: LD_INT 8
5684: PUSH
5685: LD_INT 9
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: PUSH
5694: LD_OWVAR 67
5698: ARRAY
5699: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
5700: LD_ADDR_EXP 34
5704: PUSH
5705: LD_STRING Farmer
5707: PPUSH
5708: LD_INT 0
5710: PPUSH
5711: LD_STRING 
5713: PPUSH
5714: CALL 19149 0 3
5718: ST_TO_ADDR
// for i := 1 to 4 do
5719: LD_ADDR_VAR 0 2
5723: PUSH
5724: DOUBLE
5725: LD_INT 1
5727: DEC
5728: ST_TO_ADDR
5729: LD_INT 4
5731: PUSH
5732: FOR_TO
5733: IFFALSE 6250
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
5735: LD_ADDR_VAR 0 3
5739: PUSH
5740: DOUBLE
5741: LD_INT 1
5743: DEC
5744: ST_TO_ADDR
5745: LD_INT 7
5747: PUSH
5748: LD_INT 8
5750: PUSH
5751: LD_INT 9
5753: PUSH
5754: LD_INT 11
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: PUSH
5763: LD_OWVAR 67
5767: ARRAY
5768: PUSH
5769: LD_INT 3
5771: PUSH
5772: LD_INT 4
5774: PUSH
5775: LD_INT 5
5777: PUSH
5778: LD_INT 5
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: PUSH
5787: LD_OWVAR 67
5791: ARRAY
5792: PUSH
5793: LD_INT 3
5795: PUSH
5796: LD_INT 2
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: LD_OWVAR 67
5818: ARRAY
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: FOR_TO
5833: IFFALSE 6246
// begin PrepareHuman ( false , i , skill ) ;
5835: LD_INT 0
5837: PPUSH
5838: LD_VAR 0 2
5842: PPUSH
5843: LD_VAR 0 6
5847: PPUSH
5848: CALL_OW 380
// un := CreateHuman ;
5852: LD_ADDR_VAR 0 5
5856: PUSH
5857: CALL_OW 44
5861: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
5862: LD_ADDR_EXP 35
5866: PUSH
5867: LD_EXP 35
5871: PPUSH
5872: LD_VAR 0 5
5876: PPUSH
5877: CALL 56851 0 2
5881: ST_TO_ADDR
// case i of 1 :
5882: LD_VAR 0 2
5886: PUSH
5887: LD_INT 1
5889: DOUBLE
5890: EQUAL
5891: IFTRUE 5895
5893: GO 5964
5895: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
5896: LD_ADDR_VAR 0 4
5900: PUSH
5901: LD_INT 22
5903: PUSH
5904: LD_INT 8
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 30
5916: PUSH
5917: LD_INT 32
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 30
5926: PUSH
5927: LD_INT 5
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: LD_INT 62
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: PPUSH
5957: CALL_OW 69
5961: ST_TO_ADDR
5962: GO 6143
5964: LD_INT 2
5966: DOUBLE
5967: EQUAL
5968: IFTRUE 5972
5970: GO 6001
5972: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
5973: LD_ADDR_VAR 0 4
5977: PUSH
5978: LD_INT 38
5980: PPUSH
5981: LD_INT 3
5983: PUSH
5984: LD_INT 62
5986: PUSH
5987: EMPTY
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PPUSH
5994: CALL_OW 72
5998: ST_TO_ADDR
5999: GO 6143
6001: LD_INT 3
6003: DOUBLE
6004: EQUAL
6005: IFTRUE 6009
6007: GO 6083
6009: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6010: LD_ADDR_VAR 0 4
6014: PUSH
6015: LD_INT 22
6017: PUSH
6018: LD_INT 8
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: LD_INT 2
6027: PUSH
6028: LD_INT 30
6030: PUSH
6031: LD_INT 3
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 30
6040: PUSH
6041: LD_INT 36
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 62
6058: PUSH
6059: EMPTY
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PPUSH
6071: CALL_OW 69
6075: PPUSH
6076: CALL 52127 0 1
6080: ST_TO_ADDR
6081: GO 6143
6083: LD_INT 4
6085: DOUBLE
6086: EQUAL
6087: IFTRUE 6091
6089: GO 6142
6091: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6092: LD_ADDR_VAR 0 4
6096: PUSH
6097: LD_INT 22
6099: PUSH
6100: LD_INT 8
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 30
6109: PUSH
6110: LD_INT 8
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: LD_INT 62
6122: PUSH
6123: EMPTY
6124: LIST
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: PPUSH
6135: CALL_OW 69
6139: ST_TO_ADDR
6140: GO 6143
6142: POP
// if b then
6143: LD_VAR 0 4
6147: IFFALSE 6223
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6149: LD_VAR 0 4
6153: PUSH
6154: LD_INT 1
6156: ARRAY
6157: PPUSH
6158: CALL_OW 266
6162: PUSH
6163: LD_INT 5
6165: EQUAL
6166: IFFALSE 6203
// if Prob ( 50 ) then
6168: LD_INT 50
6170: PPUSH
6171: CALL_OW 13
6175: IFFALSE 6191
// SetClass ( un , class_mortar ) else
6177: LD_VAR 0 5
6181: PPUSH
6182: LD_INT 8
6184: PPUSH
6185: CALL_OW 336
6189: GO 6203
// SetClass ( un , class_sniper ) ;
6191: LD_VAR 0 5
6195: PPUSH
6196: LD_INT 5
6198: PPUSH
6199: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6203: LD_VAR 0 5
6207: PPUSH
6208: LD_VAR 0 4
6212: PUSH
6213: LD_INT 1
6215: ARRAY
6216: PPUSH
6217: CALL_OW 52
// end else
6221: GO 6244
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6223: LD_VAR 0 5
6227: PPUSH
6228: LD_INT 188
6230: PPUSH
6231: LD_INT 21
6233: PPUSH
6234: LD_INT 4
6236: PPUSH
6237: LD_INT 0
6239: PPUSH
6240: CALL_OW 50
// end ;
6244: GO 5832
6246: POP
6247: POP
6248: GO 5732
6250: POP
6251: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6252: LD_ADDR_VAR 0 4
6256: PUSH
6257: LD_INT 22
6259: PUSH
6260: LD_INT 8
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 2
6269: PUSH
6270: LD_INT 30
6272: PUSH
6273: LD_INT 32
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 30
6282: PUSH
6283: LD_INT 5
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: LD_INT 62
6300: PUSH
6301: EMPTY
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 69
6317: ST_TO_ADDR
// if b then
6318: LD_VAR 0 4
6322: IFFALSE 6389
// begin for i in b do
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: LD_VAR 0 4
6333: PUSH
6334: FOR_IN
6335: IFFALSE 6387
// begin PrepareApemanSoldier ( ) ;
6337: CALL 52961 0 0
// un := CreateHuman ;
6341: LD_ADDR_VAR 0 5
6345: PUSH
6346: CALL_OW 44
6350: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6351: LD_ADDR_EXP 35
6355: PUSH
6356: LD_EXP 35
6360: PPUSH
6361: LD_VAR 0 5
6365: PPUSH
6366: CALL 56851 0 2
6370: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6371: LD_VAR 0 5
6375: PPUSH
6376: LD_VAR 0 2
6380: PPUSH
6381: CALL_OW 52
// end ;
6385: GO 6334
6387: POP
6388: POP
// end ; for i := 1 to 2 do
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: DOUBLE
6395: LD_INT 1
6397: DEC
6398: ST_TO_ADDR
6399: LD_INT 2
6401: PUSH
6402: FOR_TO
6403: IFFALSE 6530
// begin uc_nation := nation_arabian ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 2
6412: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6413: LD_INT 13
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: LD_INT 31
6424: PPUSH
6425: LD_INT 100
6427: PPUSH
6428: CALL 23989 0 5
// un := CreateVehicle ;
6432: LD_ADDR_VAR 0 5
6436: PUSH
6437: CALL_OW 45
6441: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6442: LD_VAR 0 5
6446: PPUSH
6447: LD_INT 0
6449: PPUSH
6450: LD_INT 5
6452: PPUSH
6453: CALL_OW 12
6457: PPUSH
6458: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 199
6469: PPUSH
6470: LD_INT 24
6472: PPUSH
6473: LD_INT 4
6475: PPUSH
6476: LD_INT 0
6478: PPUSH
6479: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6483: LD_INT 0
6485: PPUSH
6486: LD_INT 8
6488: PUSH
6489: LD_INT 9
6491: PUSH
6492: LD_INT 10
6494: PUSH
6495: LD_INT 10
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: PUSH
6504: LD_OWVAR 67
6508: ARRAY
6509: PPUSH
6510: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6514: CALL_OW 44
6518: PPUSH
6519: LD_VAR 0 5
6523: PPUSH
6524: CALL_OW 52
// end ;
6528: GO 6402
6530: POP
6531: POP
// end ;
6532: LD_VAR 0 1
6536: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6537: LD_EXP 4
6541: PUSH
6542: LD_EXP 35
6546: PPUSH
6547: CALL 21251 0 1
6551: AND
6552: IFFALSE 8925
6554: GO 6556
6556: DISABLE
6557: LD_INT 0
6559: PPUSH
6560: PPUSH
6561: PPUSH
6562: PPUSH
6563: PPUSH
6564: PPUSH
6565: PPUSH
6566: PPUSH
6567: PPUSH
6568: PPUSH
6569: PPUSH
6570: PPUSH
6571: PPUSH
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
// begin enable ;
6577: ENABLE
// side := 8 ;
6578: LD_ADDR_VAR 0 5
6582: PUSH
6583: LD_INT 8
6585: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6586: LD_ADDR_VAR 0 3
6590: PUSH
6591: LD_INT 22
6593: PUSH
6594: LD_VAR 0 5
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 33
6605: PUSH
6606: LD_INT 2
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PUSH
6619: LD_INT 3
6621: PUSH
6622: LD_INT 61
6624: PUSH
6625: EMPTY
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
6643: LD_VAR 0 3
6647: PUSH
6648: LD_INT 22
6650: PUSH
6651: LD_VAR 0 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 50
6662: PUSH
6663: EMPTY
6664: LIST
6665: PUSH
6666: LD_INT 34
6668: PUSH
6669: LD_INT 31
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: PPUSH
6681: CALL_OW 69
6685: PPUSH
6686: CALL 21251 0 1
6690: AND
6691: IFFALSE 6719
// for i in remote do
6693: LD_ADDR_VAR 0 1
6697: PUSH
6698: LD_VAR 0 3
6702: PUSH
6703: FOR_IN
6704: IFFALSE 6717
// Connect ( i ) ;
6706: LD_VAR 0 1
6710: PPUSH
6711: CALL 27457 0 1
6715: GO 6703
6717: POP
6718: POP
// if legTech then
6719: LD_EXP 37
6723: IFFALSE 6879
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6725: LD_ADDR_VAR 0 6
6729: PUSH
6730: LD_INT 22
6732: PUSH
6733: LD_VAR 0 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: LD_INT 50
6744: PUSH
6745: EMPTY
6746: LIST
6747: PUSH
6748: LD_INT 2
6750: PUSH
6751: LD_INT 30
6753: PUSH
6754: LD_INT 6
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 30
6763: PUSH
6764: LD_INT 7
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 30
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: PPUSH
6792: CALL_OW 69
6796: ST_TO_ADDR
// if lab then
6797: LD_VAR 0 6
6801: IFFALSE 6879
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6803: LD_VAR 0 6
6807: PUSH
6808: LD_INT 1
6810: ARRAY
6811: PPUSH
6812: CALL_OW 461
6816: PUSH
6817: LD_INT 2
6819: EQUAL
6820: IFFALSE 6879
// begin for i in legTech do
6822: LD_ADDR_VAR 0 1
6826: PUSH
6827: LD_EXP 37
6831: PUSH
6832: FOR_IN
6833: IFFALSE 6877
// if CanBeResearched ( lab [ 1 ] , i ) then
6835: LD_VAR 0 6
6839: PUSH
6840: LD_INT 1
6842: ARRAY
6843: PPUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 430
6853: IFFALSE 6875
// begin ComResearch ( lab [ 1 ] , i ) ;
6855: LD_VAR 0 6
6859: PUSH
6860: LD_INT 1
6862: ARRAY
6863: PPUSH
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL_OW 124
// break ;
6873: GO 6877
// end ;
6875: GO 6832
6877: POP
6878: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
6879: LD_ADDR_VAR 0 16
6883: PUSH
6884: LD_INT 2
6886: PPUSH
6887: LD_INT 22
6889: PUSH
6890: LD_VAR 0 5
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 30
6901: PUSH
6902: LD_INT 3
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 50
6911: PUSH
6912: EMPTY
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 70
6924: ST_TO_ADDR
// if fac then
6925: LD_VAR 0 16
6929: IFFALSE 7195
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
6931: LD_VAR 0 16
6935: PUSH
6936: LD_INT 1
6938: ARRAY
6939: PPUSH
6940: CALL_OW 461
6944: PUSH
6945: LD_INT 2
6947: EQUAL
6948: IFFALSE 7195
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
6950: LD_ADDR_VAR 0 17
6954: PUSH
6955: LD_INT 2
6957: PPUSH
6958: LD_INT 2
6960: PUSH
6961: LD_INT 30
6963: PUSH
6964: LD_INT 32
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 33
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 35
6988: PUSH
6989: LD_INT 0
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 70
7004: ST_TO_ADDR
// if emptyTowers then
7005: LD_VAR 0 17
7009: IFFALSE 7057
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7011: LD_ADDR_VAR 0 18
7015: PUSH
7016: LD_VAR 0 17
7020: PUSH
7021: LD_INT 1
7023: ARRAY
7024: PPUSH
7025: LD_INT 2
7027: PPUSH
7028: CALL 29496 0 2
7032: ST_TO_ADDR
// if weapon then
7033: LD_VAR 0 18
7037: IFFALSE 7057
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7039: LD_VAR 0 17
7043: PUSH
7044: LD_INT 1
7046: ARRAY
7047: PPUSH
7048: LD_VAR 0 18
7052: PPUSH
7053: CALL_OW 148
// end ; if legConstructList then
7057: LD_EXP 38
7061: IFFALSE 7195
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7063: LD_VAR 0 16
7067: PUSH
7068: LD_INT 1
7070: ARRAY
7071: PPUSH
7072: LD_EXP 38
7076: PUSH
7077: LD_INT 1
7079: ARRAY
7080: PUSH
7081: LD_INT 1
7083: ARRAY
7084: PPUSH
7085: LD_EXP 38
7089: PUSH
7090: LD_INT 1
7092: ARRAY
7093: PUSH
7094: LD_INT 2
7096: ARRAY
7097: PPUSH
7098: LD_EXP 38
7102: PUSH
7103: LD_INT 1
7105: ARRAY
7106: PUSH
7107: LD_INT 3
7109: ARRAY
7110: PPUSH
7111: LD_EXP 38
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PUSH
7120: LD_INT 4
7122: ARRAY
7123: PPUSH
7124: CALL_OW 448
7128: IFFALSE 7195
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7130: LD_VAR 0 16
7134: PUSH
7135: LD_INT 1
7137: ARRAY
7138: PPUSH
7139: LD_EXP 38
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: PUSH
7148: LD_INT 1
7150: ARRAY
7151: PPUSH
7152: LD_EXP 38
7156: PUSH
7157: LD_INT 1
7159: ARRAY
7160: PUSH
7161: LD_INT 2
7163: ARRAY
7164: PPUSH
7165: LD_EXP 38
7169: PUSH
7170: LD_INT 1
7172: ARRAY
7173: PUSH
7174: LD_INT 3
7176: ARRAY
7177: PPUSH
7178: LD_EXP 38
7182: PUSH
7183: LD_INT 1
7185: ARRAY
7186: PUSH
7187: LD_INT 4
7189: ARRAY
7190: PPUSH
7191: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7195: LD_ADDR_VAR 0 2
7199: PUSH
7200: LD_INT 2
7202: PPUSH
7203: LD_INT 21
7205: PUSH
7206: LD_INT 3
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 3
7215: PUSH
7216: LD_INT 57
7218: PUSH
7219: EMPTY
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 3
7228: PUSH
7229: LD_INT 24
7231: PUSH
7232: LD_INT 1000
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: LIST
7247: PPUSH
7248: CALL_OW 70
7252: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7253: LD_ADDR_VAR 0 10
7257: PUSH
7258: LD_INT 14
7260: PPUSH
7261: CALL_OW 435
7265: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7266: LD_ADDR_VAR 0 11
7270: PUSH
7271: LD_EXP 35
7275: PPUSH
7276: LD_INT 25
7278: PUSH
7279: LD_INT 4
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: LD_INT 50
7288: PUSH
7289: EMPTY
7290: LIST
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PPUSH
7296: CALL_OW 72
7300: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7301: LD_ADDR_VAR 0 6
7305: PUSH
7306: LD_INT 2
7308: PPUSH
7309: LD_INT 2
7311: PUSH
7312: LD_INT 30
7314: PUSH
7315: LD_INT 6
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 30
7324: PUSH
7325: LD_INT 7
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 30
7334: PUSH
7335: LD_INT 8
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: ST_TO_ADDR
// if sci then
7353: LD_VAR 0 11
7357: IFFALSE 7516
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7359: LD_ADDR_VAR 0 13
7363: PUSH
7364: LD_EXP 35
7368: PPUSH
7369: LD_INT 95
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 120
7381: PUSH
7382: LD_INT 1
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 72
7397: ST_TO_ADDR
// if hurtUnits then
7398: LD_VAR 0 13
7402: IFFALSE 7463
// begin for i in sci do
7404: LD_ADDR_VAR 0 1
7408: PUSH
7409: LD_VAR 0 11
7413: PUSH
7414: FOR_IN
7415: IFFALSE 7459
// if IsInUnit ( i ) then
7417: LD_VAR 0 1
7421: PPUSH
7422: CALL_OW 310
7426: IFFALSE 7439
// ComExitBuilding ( i ) else
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 122
7437: GO 7457
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7439: LD_VAR 0 1
7443: PPUSH
7444: LD_VAR 0 13
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PPUSH
7453: CALL_OW 128
7457: GO 7414
7459: POP
7460: POP
// end else
7461: GO 7516
// if lab then
7463: LD_VAR 0 6
7467: IFFALSE 7516
// begin for i in sci do
7469: LD_ADDR_VAR 0 1
7473: PUSH
7474: LD_VAR 0 11
7478: PUSH
7479: FOR_IN
7480: IFFALSE 7514
// if not IsInUnit ( i ) then
7482: LD_VAR 0 1
7486: PPUSH
7487: CALL_OW 310
7491: NOT
7492: IFFALSE 7512
// ComEnterUnit ( i , lab [ 1 ] ) ;
7494: LD_VAR 0 1
7498: PPUSH
7499: LD_VAR 0 6
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: PPUSH
7508: CALL_OW 120
7512: GO 7479
7514: POP
7515: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
7516: LD_ADDR_VAR 0 7
7520: PUSH
7521: LD_EXP 35
7525: PPUSH
7526: LD_INT 25
7528: PUSH
7529: LD_INT 2
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PPUSH
7536: CALL_OW 72
7540: ST_TO_ADDR
// if eng then
7541: LD_VAR 0 7
7545: IFFALSE 8320
// begin for i in eng do
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 7
7556: PUSH
7557: FOR_IN
7558: IFFALSE 8318
// begin tag := GetTag ( i ) ;
7560: LD_ADDR_VAR 0 8
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 110
7574: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 256
7584: PUSH
7585: LD_INT 800
7587: LESS
7588: PUSH
7589: LD_VAR 0 8
7593: PUSH
7594: LD_INT 1
7596: NONEQUAL
7597: AND
7598: IFFALSE 7648
// begin SetTag ( i , tHeal ) ;
7600: LD_VAR 0 1
7604: PPUSH
7605: LD_INT 1
7607: PPUSH
7608: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7612: LD_VAR 0 1
7616: PPUSH
7617: LD_EXP 39
7621: PUSH
7622: LD_INT 1
7624: ARRAY
7625: PPUSH
7626: LD_EXP 39
7630: PUSH
7631: LD_INT 2
7633: ARRAY
7634: PPUSH
7635: CALL_OW 111
// AddComHold ( i ) ;
7639: LD_VAR 0 1
7643: PPUSH
7644: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7648: LD_VAR 0 8
7652: PUSH
7653: LD_INT 1
7655: EQUAL
7656: PUSH
7657: LD_VAR 0 1
7661: PPUSH
7662: CALL_OW 256
7666: PUSH
7667: LD_INT 1000
7669: EQUAL
7670: AND
7671: IFFALSE 7685
// SetTag ( i , 0 ) ;
7673: LD_VAR 0 1
7677: PPUSH
7678: LD_INT 0
7680: PPUSH
7681: CALL_OW 109
// if not tag then
7685: LD_VAR 0 8
7689: NOT
7690: IFFALSE 7858
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
7692: LD_ADDR_VAR 0 4
7696: PUSH
7697: LD_INT 2
7699: PPUSH
7700: LD_INT 57
7702: PUSH
7703: EMPTY
7704: LIST
7705: PPUSH
7706: CALL_OW 70
7710: ST_TO_ADDR
// if undone then
7711: LD_VAR 0 4
7715: IFFALSE 7737
// begin ComComplete ( i , undone [ 1 ] ) ;
7717: LD_VAR 0 1
7721: PPUSH
7722: LD_VAR 0 4
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: PPUSH
7731: CALL 27349 0 2
// continue ;
7735: GO 7557
// end ; if cr or tmp or Count ( legBuildings ) then
7737: LD_VAR 0 10
7741: PUSH
7742: LD_VAR 0 2
7746: OR
7747: PUSH
7748: LD_EXP 40
7752: PPUSH
7753: CALL 21251 0 1
7757: OR
7758: IFFALSE 7834
// begin if IsInUnit ( i ) then
7760: LD_VAR 0 1
7764: PPUSH
7765: CALL_OW 310
7769: IFFALSE 7780
// ComExitBuilding ( i ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 122
// if tmp then
7780: LD_VAR 0 2
7784: IFFALSE 7800
// SetTag ( i , tRepair ) else
7786: LD_VAR 0 1
7790: PPUSH
7791: LD_INT 3
7793: PPUSH
7794: CALL_OW 109
7798: GO 7832
// if cr then
7800: LD_VAR 0 10
7804: IFFALSE 7820
// SetTag ( i , tCrates ) else
7806: LD_VAR 0 1
7810: PPUSH
7811: LD_INT 2
7813: PPUSH
7814: CALL_OW 109
7818: GO 7832
// SetTag ( i , tBuild ) ;
7820: LD_VAR 0 1
7824: PPUSH
7825: LD_INT 5
7827: PPUSH
7828: CALL_OW 109
// end else
7832: GO 7858
// if not IsInUnit ( i ) then
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 310
7843: NOT
7844: IFFALSE 7858
// ComEnterUnit ( i , legBase ) ;
7846: LD_VAR 0 1
7850: PPUSH
7851: LD_INT 38
7853: PPUSH
7854: CALL_OW 120
// end ; if tag = tRepair then
7858: LD_VAR 0 8
7862: PUSH
7863: LD_INT 3
7865: EQUAL
7866: IFFALSE 7968
// begin if IsInUnit ( i ) then
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 310
7877: IFFALSE 7890
// begin ComExitBuilding ( i ) ;
7879: LD_VAR 0 1
7883: PPUSH
7884: CALL_OW 122
// continue ;
7888: GO 7557
// end ; if not tmp then
7890: LD_VAR 0 2
7894: NOT
7895: IFFALSE 7911
// begin SetTag ( i , 0 ) ;
7897: LD_VAR 0 1
7901: PPUSH
7902: LD_INT 0
7904: PPUSH
7905: CALL_OW 109
// continue ;
7909: GO 7557
// end ; if not HasTask ( i ) then
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 314
7920: NOT
7921: IFFALSE 7941
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
7923: LD_VAR 0 1
7927: PPUSH
7928: LD_VAR 0 2
7932: PUSH
7933: LD_INT 1
7935: ARRAY
7936: PPUSH
7937: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
7941: LD_VAR 0 1
7945: PPUSH
7946: LD_INT 2
7948: PPUSH
7949: CALL_OW 308
7953: NOT
7954: IFFALSE 7968
// ComMoveToArea ( i , legBaseArea ) ;
7956: LD_VAR 0 1
7960: PPUSH
7961: LD_INT 2
7963: PPUSH
7964: CALL_OW 113
// end ; if tag = tBuild then
7968: LD_VAR 0 8
7972: PUSH
7973: LD_INT 5
7975: EQUAL
7976: IFFALSE 8171
// begin if IsInUnit ( i ) then
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 310
7987: IFFALSE 8000
// begin ComExitBuilding ( i ) ;
7989: LD_VAR 0 1
7993: PPUSH
7994: CALL_OW 122
// continue ;
7998: GO 7557
// end ; if not Count ( legBuildings ) then
8000: LD_EXP 40
8004: PPUSH
8005: CALL 21251 0 1
8009: NOT
8010: IFFALSE 8028
// begin SetTag ( i , 0 ) ;
8012: LD_VAR 0 1
8016: PPUSH
8017: LD_INT 0
8019: PPUSH
8020: CALL_OW 109
// continue ;
8024: GO 7557
// end else
8026: GO 8065
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8028: LD_INT 38
8030: PPUSH
8031: LD_EXP 40
8035: PUSH
8036: LD_INT 1
8038: ARRAY
8039: PUSH
8040: LD_INT 1
8042: ARRAY
8043: PPUSH
8044: CALL 10109 0 2
8048: NOT
8049: IFFALSE 8065
// begin SetTag ( i , 0 ) ;
8051: LD_VAR 0 1
8055: PPUSH
8056: LD_INT 0
8058: PPUSH
8059: CALL_OW 109
// continue ;
8063: GO 7557
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8065: LD_ADDR_VAR 0 4
8069: PUSH
8070: LD_INT 2
8072: PPUSH
8073: LD_INT 57
8075: PUSH
8076: EMPTY
8077: LIST
8078: PPUSH
8079: CALL_OW 70
8083: ST_TO_ADDR
// if undone then
8084: LD_VAR 0 4
8088: IFFALSE 8110
// begin ComComplete ( i , undone [ 1 ] ) ;
8090: LD_VAR 0 1
8094: PPUSH
8095: LD_VAR 0 4
8099: PUSH
8100: LD_INT 1
8102: ARRAY
8103: PPUSH
8104: CALL 27349 0 2
// continue ;
8108: GO 7557
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8110: LD_VAR 0 1
8114: PPUSH
8115: LD_EXP 40
8119: PUSH
8120: LD_INT 1
8122: ARRAY
8123: PUSH
8124: LD_INT 1
8126: ARRAY
8127: PPUSH
8128: LD_EXP 40
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: PUSH
8137: LD_INT 2
8139: ARRAY
8140: PPUSH
8141: LD_EXP 40
8145: PUSH
8146: LD_INT 1
8148: ARRAY
8149: PUSH
8150: LD_INT 3
8152: ARRAY
8153: PPUSH
8154: LD_EXP 40
8158: PUSH
8159: LD_INT 1
8161: ARRAY
8162: PUSH
8163: LD_INT 4
8165: ARRAY
8166: PPUSH
8167: CALL_OW 145
// end ; if tag = tCrates then
8171: LD_VAR 0 8
8175: PUSH
8176: LD_INT 2
8178: EQUAL
8179: IFFALSE 8316
// begin if IsInUnit ( i ) then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 310
8190: IFFALSE 8203
// begin ComExitBuilding ( i ) ;
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 122
// continue ;
8201: GO 7557
// end ; if not cr then
8203: LD_VAR 0 10
8207: NOT
8208: IFFALSE 8224
// begin SetTag ( i , 0 ) ;
8210: LD_VAR 0 1
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 109
// continue ;
8222: GO 7557
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 314
8233: NOT
8234: PUSH
8235: LD_INT 81
8237: PUSH
8238: LD_VAR 0 5
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 92
8249: PUSH
8250: LD_VAR 0 10
8254: PUSH
8255: LD_INT 1
8257: ARRAY
8258: PUSH
8259: LD_VAR 0 10
8263: PUSH
8264: LD_INT 2
8266: ARRAY
8267: PUSH
8268: LD_INT 12
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PPUSH
8281: CALL_OW 69
8285: NOT
8286: AND
8287: IFFALSE 8316
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8289: LD_VAR 0 1
8293: PPUSH
8294: LD_VAR 0 10
8298: PUSH
8299: LD_INT 1
8301: ARRAY
8302: PPUSH
8303: LD_VAR 0 10
8307: PUSH
8308: LD_INT 2
8310: ARRAY
8311: PPUSH
8312: CALL_OW 117
// end ; end ;
8316: GO 7557
8318: POP
8319: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8320: LD_ADDR_VAR 0 12
8324: PUSH
8325: LD_EXP 35
8329: PPUSH
8330: LD_INT 2
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 5
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 8
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: LD_INT 50
8371: PUSH
8372: EMPTY
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 72
8383: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8384: LD_ADDR_VAR 0 14
8388: PUSH
8389: LD_INT 2
8391: PPUSH
8392: LD_INT 81
8394: PUSH
8395: LD_VAR 0 5
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 70
8408: ST_TO_ADDR
// if sol then
8409: LD_VAR 0 12
8413: IFFALSE 8925
// begin if enemyInBase then
8415: LD_VAR 0 14
8419: IFFALSE 8564
// begin for i in sol do
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: LD_VAR 0 12
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8560
// begin tw := IsInUnit ( i ) ;
8434: LD_ADDR_VAR 0 9
8438: PUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: CALL_OW 310
8448: ST_TO_ADDR
// if tw then
8449: LD_VAR 0 9
8453: IFFALSE 8534
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8455: LD_VAR 0 9
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_VAR 0 5
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 101
8474: PUSH
8475: LD_INT 2
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 2
8484: PUSH
8485: LD_INT 30
8487: PUSH
8488: LD_INT 32
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 30
8497: PUSH
8498: LD_INT 31
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 69
8519: IN
8520: NOT
8521: IFFALSE 8532
// ComExitBuilding ( i ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: CALL_OW 122
// end else
8532: GO 8558
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
8534: LD_VAR 0 1
8538: PPUSH
8539: LD_VAR 0 14
8543: PPUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: CALL_OW 74
8553: PPUSH
8554: CALL_OW 115
// end ;
8558: GO 8431
8560: POP
8561: POP
// end else
8562: GO 8925
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8564: LD_ADDR_VAR 0 15
8568: PUSH
8569: LD_INT 2
8571: PPUSH
8572: LD_INT 3
8574: PUSH
8575: LD_INT 62
8577: PUSH
8578: EMPTY
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 2
8587: PUSH
8588: LD_INT 30
8590: PUSH
8591: LD_INT 32
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 30
8600: PUSH
8601: LD_INT 4
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 30
8610: PUSH
8611: LD_INT 5
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 30
8620: PUSH
8621: LD_INT 31
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PPUSH
8639: CALL_OW 70
8643: ST_TO_ADDR
// if empty then
8644: LD_VAR 0 15
8648: IFFALSE 8665
// empty := ReverseArray ( empty ) ;
8650: LD_ADDR_VAR 0 15
8654: PUSH
8655: LD_VAR 0 15
8659: PPUSH
8660: CALL 52127 0 1
8664: ST_TO_ADDR
// for i in sol do
8665: LD_ADDR_VAR 0 1
8669: PUSH
8670: LD_VAR 0 12
8674: PUSH
8675: FOR_IN
8676: IFFALSE 8923
// begin tag := GetTag ( i ) ;
8678: LD_ADDR_VAR 0 8
8682: PUSH
8683: LD_VAR 0 1
8687: PPUSH
8688: CALL_OW 110
8692: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8693: LD_VAR 0 1
8697: PPUSH
8698: CALL_OW 256
8702: PUSH
8703: LD_INT 1000
8705: LESS
8706: PUSH
8707: LD_VAR 0 8
8711: PUSH
8712: LD_INT 1
8714: NONEQUAL
8715: AND
8716: IFFALSE 8768
// begin SetTag ( i , tHeal ) ;
8718: LD_VAR 0 1
8722: PPUSH
8723: LD_INT 1
8725: PPUSH
8726: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8730: LD_VAR 0 1
8734: PPUSH
8735: LD_EXP 39
8739: PUSH
8740: LD_INT 1
8742: ARRAY
8743: PPUSH
8744: LD_EXP 39
8748: PUSH
8749: LD_INT 2
8751: ARRAY
8752: PPUSH
8753: CALL_OW 111
// AddComHold ( i ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 200
// continue ;
8766: GO 8675
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8768: LD_VAR 0 1
8772: PPUSH
8773: CALL_OW 256
8777: PUSH
8778: LD_INT 1000
8780: EQUAL
8781: PUSH
8782: LD_VAR 0 8
8786: PUSH
8787: LD_INT 1
8789: EQUAL
8790: AND
8791: IFFALSE 8807
// begin SetTag ( i , 0 ) ;
8793: LD_VAR 0 1
8797: PPUSH
8798: LD_INT 0
8800: PPUSH
8801: CALL_OW 109
// continue ;
8805: GO 8675
// end ; if HasTask ( i ) then
8807: LD_VAR 0 1
8811: PPUSH
8812: CALL_OW 314
8816: IFFALSE 8820
// continue ;
8818: GO 8675
// if not IsInUnit ( i ) and not tag and empty then
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 310
8829: NOT
8830: PUSH
8831: LD_VAR 0 8
8835: NOT
8836: AND
8837: PUSH
8838: LD_VAR 0 15
8842: AND
8843: IFFALSE 8921
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8845: LD_VAR 0 1
8849: PPUSH
8850: LD_VAR 0 15
8854: PUSH
8855: LD_INT 1
8857: ARRAY
8858: PPUSH
8859: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
8863: LD_VAR 0 15
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: CALL_OW 266
8876: PUSH
8877: LD_INT 5
8879: EQUAL
8880: PUSH
8881: LD_INT 50
8883: PPUSH
8884: CALL_OW 13
8888: AND
8889: IFFALSE 8903
// AddComChangeProfession ( i , class_mortar ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: LD_INT 8
8898: PPUSH
8899: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
8903: LD_ADDR_VAR 0 15
8907: PUSH
8908: LD_VAR 0 15
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: CALL_OW 3
8920: ST_TO_ADDR
// end ; end ;
8921: GO 8675
8923: POP
8924: POP
// end ; end ; end ;
8925: PPOPN 18
8927: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive do var cr , enemyInArea ;
8928: LD_EXP 42
8932: PPUSH
8933: CALL_OW 302
8937: PUSH
8938: LD_EXP 4
8942: AND
8943: IFFALSE 9225
8945: GO 8947
8947: DISABLE
8948: LD_INT 0
8950: PPUSH
8951: PPUSH
// begin enable ;
8952: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
8953: LD_ADDR_VAR 0 2
8957: PUSH
8958: LD_INT 2
8960: PPUSH
8961: LD_INT 81
8963: PUSH
8964: LD_INT 8
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 50
8973: PUSH
8974: EMPTY
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PPUSH
8981: CALL_OW 70
8985: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: LD_INT 16
8993: PPUSH
8994: CALL_OW 435
8998: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
8999: LD_EXP 42
9003: PPUSH
9004: CALL_OW 261
9008: PUSH
9009: LD_INT 10
9011: LESS
9012: PUSH
9013: LD_INT 2
9015: PPUSH
9016: LD_EXP 42
9020: PPUSH
9021: CALL_OW 292
9025: NOT
9026: AND
9027: PUSH
9028: LD_EXP 42
9032: PPUSH
9033: CALL_OW 262
9037: PUSH
9038: LD_INT 1
9040: EQUAL
9041: AND
9042: IFFALSE 9056
// SetFuel ( legCargo , 100 ) ;
9044: LD_EXP 42
9048: PPUSH
9049: LD_INT 100
9051: PPUSH
9052: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9056: LD_EXP 42
9060: PPUSH
9061: CALL_OW 314
9065: NOT
9066: PUSH
9067: LD_EXP 42
9071: PPUSH
9072: LD_INT 1
9074: PPUSH
9075: CALL_OW 289
9079: PUSH
9080: LD_INT 100
9082: LESS
9083: AND
9084: PUSH
9085: LD_VAR 0 2
9089: NOT
9090: AND
9091: IFFALSE 9157
// begin if cr then
9093: LD_VAR 0 1
9097: IFFALSE 9128
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9099: LD_EXP 42
9103: PPUSH
9104: LD_VAR 0 1
9108: PUSH
9109: LD_INT 1
9111: ARRAY
9112: PPUSH
9113: LD_VAR 0 1
9117: PUSH
9118: LD_INT 2
9120: ARRAY
9121: PPUSH
9122: CALL_OW 117
9126: GO 9155
// if not IsInArea ( legCargo , cratesNorthArea ) then
9128: LD_EXP 42
9132: PPUSH
9133: LD_INT 16
9135: PPUSH
9136: CALL_OW 308
9140: NOT
9141: IFFALSE 9155
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9143: LD_EXP 42
9147: PPUSH
9148: LD_INT 16
9150: PPUSH
9151: CALL_OW 113
// exit ;
9155: GO 9225
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9157: LD_VAR 0 2
9161: PUSH
9162: LD_EXP 42
9166: PPUSH
9167: LD_INT 2
9169: PPUSH
9170: CALL_OW 308
9174: NOT
9175: AND
9176: IFFALSE 9195
// ComMoveXY ( legCargo , 194 , 17 ) else
9178: LD_EXP 42
9182: PPUSH
9183: LD_INT 194
9185: PPUSH
9186: LD_INT 17
9188: PPUSH
9189: CALL_OW 111
9193: GO 9225
// if GetCargo ( legCargo , mat_cans ) = 100 then
9195: LD_EXP 42
9199: PPUSH
9200: LD_INT 1
9202: PPUSH
9203: CALL_OW 289
9207: PUSH
9208: LD_INT 100
9210: EQUAL
9211: IFFALSE 9225
// ComGive ( legCargo , legBase ) ;
9213: LD_EXP 42
9217: PPUSH
9218: LD_INT 38
9220: PPUSH
9221: CALL_OW 161
// end ;
9225: PPOPN 2
9227: END
// every 8 8$00 trigger Count ( legTanks ) < 5 and legScriptActive and spotByLegion do var i , parts , part ;
9228: LD_EXP 41
9232: PPUSH
9233: CALL 21251 0 1
9237: PUSH
9238: LD_INT 5
9240: LESS
9241: PUSH
9242: LD_EXP 4
9246: AND
9247: PUSH
9248: LD_EXP 9
9252: AND
9253: IFFALSE 9447
9255: GO 9257
9257: DISABLE
9258: LD_INT 0
9260: PPUSH
9261: PPUSH
9262: PPUSH
// begin enable ;
9263: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9264: LD_ADDR_VAR 0 2
9268: PUSH
9269: LD_INT 13
9271: PUSH
9272: LD_INT 28
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 13
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 13
9291: PUSH
9292: LD_INT 26
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 14
9301: PUSH
9302: LD_INT 26
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 14
9311: PUSH
9312: LD_INT 28
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 14
9321: PUSH
9322: LD_INT 25
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
9337: LD_ADDR_VAR 0 1
9341: PUSH
9342: DOUBLE
9343: LD_INT 1
9345: DEC
9346: ST_TO_ADDR
9347: LD_INT 4
9349: PUSH
9350: LD_INT 5
9352: PUSH
9353: LD_INT 6
9355: PUSH
9356: LD_INT 6
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PUSH
9365: LD_OWVAR 67
9369: ARRAY
9370: PUSH
9371: FOR_TO
9372: IFFALSE 9445
// begin part := parts [ rand ( 1 , parts ) ] ;
9374: LD_ADDR_VAR 0 3
9378: PUSH
9379: LD_VAR 0 2
9383: PUSH
9384: LD_INT 1
9386: PPUSH
9387: LD_VAR 0 2
9391: PPUSH
9392: CALL_OW 12
9396: ARRAY
9397: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
9398: LD_ADDR_EXP 38
9402: PUSH
9403: LD_EXP 38
9407: PPUSH
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 1
9415: ARRAY
9416: PUSH
9417: LD_INT 1
9419: PUSH
9420: LD_INT 2
9422: PUSH
9423: LD_VAR 0 3
9427: PUSH
9428: LD_INT 2
9430: ARRAY
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL 56851 0 2
9442: ST_TO_ADDR
9443: GO 9371
9445: POP
9446: POP
// end ;
9447: PPOPN 3
9449: END
// every 20 20$00 trigger not legionDestroyed and tick <= 60 60$00 do
9450: LD_EXP 12
9454: NOT
9455: PUSH
9456: LD_OWVAR 1
9460: PUSH
9461: LD_INT 126000
9463: LESSEQUAL
9464: AND
9465: IFFALSE 9504
9467: GO 9469
9469: DISABLE
// begin enable ;
9470: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
9471: LD_ADDR_EXP 38
9475: PUSH
9476: LD_EXP 38
9480: PPUSH
9481: LD_INT 14
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: LD_INT 1
9489: PUSH
9490: LD_INT 27
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL 56851 0 2
9503: ST_TO_ADDR
// end ;
9504: END
// every 0 0$1 trigger legTanks do var i , mech , enemy ;
9505: LD_EXP 41
9509: IFFALSE 10106
9511: GO 9513
9513: DISABLE
9514: LD_INT 0
9516: PPUSH
9517: PPUSH
9518: PPUSH
// begin enable ;
9519: ENABLE
// if not legTanks then
9520: LD_EXP 41
9524: NOT
9525: IFFALSE 9529
// exit ;
9527: GO 10106
// for i in legTanks do
9529: LD_ADDR_VAR 0 1
9533: PUSH
9534: LD_EXP 41
9538: PUSH
9539: FOR_IN
9540: IFFALSE 10104
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
9542: LD_VAR 0 1
9546: PPUSH
9547: CALL_OW 302
9551: NOT
9552: PUSH
9553: LD_VAR 0 1
9557: PPUSH
9558: CALL_OW 255
9562: PUSH
9563: LD_INT 8
9565: NONEQUAL
9566: OR
9567: IFFALSE 9587
// begin legTanks := legTanks diff i ;
9569: LD_ADDR_EXP 41
9573: PUSH
9574: LD_EXP 41
9578: PUSH
9579: LD_VAR 0 1
9583: DIFF
9584: ST_TO_ADDR
// continue ;
9585: GO 9539
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
9587: LD_VAR 0 1
9591: PPUSH
9592: CALL_OW 110
9596: NOT
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: CALL_OW 263
9607: PUSH
9608: LD_INT 2
9610: EQUAL
9611: AND
9612: IFFALSE 9626
// SetTag ( i , tAttack ) ;
9614: LD_VAR 0 1
9618: PPUSH
9619: LD_INT 10
9621: PPUSH
9622: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
9626: LD_VAR 0 1
9630: PPUSH
9631: CALL_OW 110
9635: NOT
9636: PUSH
9637: LD_VAR 0 1
9641: PPUSH
9642: CALL_OW 110
9646: PUSH
9647: LD_INT 0
9649: EQUAL
9650: OR
9651: IFFALSE 9781
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9653: LD_VAR 0 1
9657: PPUSH
9658: CALL_OW 261
9662: PUSH
9663: LD_INT 50
9665: LESS
9666: PUSH
9667: LD_VAR 0 1
9671: PPUSH
9672: CALL_OW 262
9676: PUSH
9677: LD_INT 1
9679: EQUAL
9680: AND
9681: IFFALSE 9740
// begin ComMoveXY ( i , 189 , 19 ) ;
9683: LD_VAR 0 1
9687: PPUSH
9688: LD_INT 189
9690: PPUSH
9691: LD_INT 19
9693: PPUSH
9694: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9698: LD_INT 35
9700: PPUSH
9701: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
9705: LD_VAR 0 1
9709: PPUSH
9710: LD_INT 189
9712: PPUSH
9713: LD_INT 19
9715: PPUSH
9716: CALL_OW 297
9720: PUSH
9721: LD_INT 4
9723: LESS
9724: IFFALSE 9698
// SetFuel ( i , 100 ) ;
9726: LD_VAR 0 1
9730: PPUSH
9731: LD_INT 100
9733: PPUSH
9734: CALL_OW 240
// end else
9738: GO 9781
// if not IsInArea ( i , legParkingArea ) then
9740: LD_VAR 0 1
9744: PPUSH
9745: LD_INT 15
9747: PPUSH
9748: CALL_OW 308
9752: NOT
9753: IFFALSE 9769
// ComMoveToArea ( i , legParkingArea ) else
9755: LD_VAR 0 1
9759: PPUSH
9760: LD_INT 15
9762: PPUSH
9763: CALL_OW 113
9767: GO 9781
// SetTag ( i , tParking ) ;
9769: LD_VAR 0 1
9773: PPUSH
9774: LD_INT 9
9776: PPUSH
9777: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9781: LD_VAR 0 1
9785: PPUSH
9786: CALL_OW 110
9790: PUSH
9791: LD_INT 9
9793: EQUAL
9794: IFFALSE 9924
// begin if GetLives ( i ) < 650 then
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 256
9805: PUSH
9806: LD_INT 650
9808: LESS
9809: IFFALSE 9901
// begin if not IsDrivenBy ( i ) then
9811: LD_VAR 0 1
9815: PPUSH
9816: CALL_OW 311
9820: NOT
9821: IFFALSE 9825
// continue ;
9823: GO 9539
// mech := IsDrivenBy ( i ) ;
9825: LD_ADDR_VAR 0 2
9829: PUSH
9830: LD_VAR 0 1
9834: PPUSH
9835: CALL_OW 311
9839: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9840: LD_VAR 0 2
9844: PPUSH
9845: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9849: LD_VAR 0 2
9853: PPUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9863: LD_INT 35
9865: PPUSH
9866: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 256
9879: PUSH
9880: LD_INT 1000
9882: EQUAL
9883: IFFALSE 9863
// ComEnterUnit ( mech , i ) ;
9885: LD_VAR 0 2
9889: PPUSH
9890: LD_VAR 0 1
9894: PPUSH
9895: CALL_OW 120
// end else
9899: GO 9924
// if IsDrivenBy ( i ) then
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 311
9910: IFFALSE 9924
// SetTag ( i , tAttack ) ;
9912: LD_VAR 0 1
9916: PPUSH
9917: LD_INT 10
9919: PPUSH
9920: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
9924: LD_VAR 0 1
9928: PPUSH
9929: CALL_OW 110
9933: PUSH
9934: LD_INT 10
9936: EQUAL
9937: IFFALSE 10102
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
9939: LD_ADDR_VAR 0 3
9943: PUSH
9944: LD_INT 2
9946: PPUSH
9947: LD_INT 81
9949: PUSH
9950: LD_INT 8
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PPUSH
9957: CALL_OW 70
9961: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
9962: LD_VAR 0 1
9966: PPUSH
9967: CALL_OW 256
9971: PUSH
9972: LD_INT 650
9974: LESS
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 263
9985: PUSH
9986: LD_INT 1
9988: EQUAL
9989: AND
9990: IFFALSE 10015
// begin ComStop ( i ) ;
9992: LD_VAR 0 1
9996: PPUSH
9997: CALL_OW 141
// SetTag ( i , 0 ) ;
10001: LD_VAR 0 1
10005: PPUSH
10006: LD_INT 0
10008: PPUSH
10009: CALL_OW 109
// continue ;
10013: GO 9539
// end ; if enemy then
10015: LD_VAR 0 3
10019: IFFALSE 10059
// begin if not HasTask ( i ) then
10021: LD_VAR 0 1
10025: PPUSH
10026: CALL_OW 314
10030: NOT
10031: IFFALSE 10057
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10033: LD_VAR 0 1
10037: PPUSH
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_VAR 0 1
10047: PPUSH
10048: CALL_OW 74
10052: PPUSH
10053: CALL 60923 0 2
// end else
10057: GO 10102
// if legTanks >= 4 then
10059: LD_EXP 41
10063: PUSH
10064: LD_INT 4
10066: GREATEREQUAL
10067: IFFALSE 10102
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10069: LD_VAR 0 1
10073: PPUSH
10074: LD_INT 200
10076: PUSH
10077: LD_INT 48
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: LD_INT 210
10086: PUSH
10087: LD_INT 74
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL 59455 0 2
// end ; end ;
10102: GO 9539
10104: POP
10105: POP
// end ; end_of_file
10106: PPOPN 3
10108: END
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
10109: LD_INT 0
10111: PPUSH
10112: PPUSH
10113: PPUSH
// if btype = b_depot then
10114: LD_VAR 0 2
10118: PUSH
10119: LD_INT 0
10121: EQUAL
10122: IFFALSE 10134
// begin result := true ;
10124: LD_ADDR_VAR 0 3
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// exit ;
10132: GO 10250
// end ; pom := GetBase ( depot ) ;
10134: LD_ADDR_VAR 0 4
10138: PUSH
10139: LD_VAR 0 1
10143: PPUSH
10144: CALL_OW 274
10148: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
10149: LD_ADDR_VAR 0 5
10153: PUSH
10154: LD_VAR 0 2
10158: PPUSH
10159: LD_VAR 0 1
10163: PPUSH
10164: CALL_OW 248
10168: PPUSH
10169: CALL_OW 450
10173: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
10174: LD_ADDR_VAR 0 3
10178: PUSH
10179: LD_VAR 0 4
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: CALL_OW 275
10191: PUSH
10192: LD_VAR 0 5
10196: PUSH
10197: LD_INT 1
10199: ARRAY
10200: GREATEREQUAL
10201: PUSH
10202: LD_VAR 0 4
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: CALL_OW 275
10214: PUSH
10215: LD_VAR 0 5
10219: PUSH
10220: LD_INT 2
10222: ARRAY
10223: GREATEREQUAL
10224: AND
10225: PUSH
10226: LD_VAR 0 4
10230: PPUSH
10231: LD_INT 3
10233: PPUSH
10234: CALL_OW 275
10238: PUSH
10239: LD_VAR 0 5
10243: PUSH
10244: LD_INT 3
10246: ARRAY
10247: GREATEREQUAL
10248: AND
10249: ST_TO_ADDR
// end ;
10250: LD_VAR 0 3
10254: RET
// export function CreateNature ; var i , areas , amount ; begin
10255: LD_INT 0
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// PrepareTiger ( 0 ) ;
10261: LD_INT 0
10263: PPUSH
10264: CALL 53227 0 1
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
10268: LD_ADDR_VAR 0 2
10272: PUSH
10273: DOUBLE
10274: LD_INT 1
10276: DEC
10277: ST_TO_ADDR
10278: LD_INT 3
10280: PUSH
10281: LD_INT 4
10283: PUSH
10284: LD_INT 5
10286: PUSH
10287: LD_INT 6
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: PUSH
10296: LD_OWVAR 67
10300: ARRAY
10301: PUSH
10302: FOR_TO
10303: IFFALSE 10322
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10305: CALL_OW 44
10309: PPUSH
10310: LD_INT 7
10312: PPUSH
10313: LD_INT 0
10315: PPUSH
10316: CALL_OW 49
10320: GO 10302
10322: POP
10323: POP
// PrepareBird ;
10324: CALL 53408 0 0
// for i := 1 to 3 do
10328: LD_ADDR_VAR 0 2
10332: PUSH
10333: DOUBLE
10334: LD_INT 1
10336: DEC
10337: ST_TO_ADDR
10338: LD_INT 3
10340: PUSH
10341: FOR_TO
10342: IFFALSE 10361
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10344: CALL_OW 44
10348: PPUSH
10349: LD_INT 7
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL_OW 49
10359: GO 10341
10361: POP
10362: POP
// PrepareHorse ;
10363: CALL 53448 0 0
// for i := 1 to 3 do
10367: LD_ADDR_VAR 0 2
10371: PUSH
10372: DOUBLE
10373: LD_INT 1
10375: DEC
10376: ST_TO_ADDR
10377: LD_INT 3
10379: PUSH
10380: FOR_TO
10381: IFFALSE 10400
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10383: CALL_OW 44
10387: PPUSH
10388: LD_INT 7
10390: PPUSH
10391: LD_INT 0
10393: PPUSH
10394: CALL_OW 49
10398: GO 10380
10400: POP
10401: POP
// PrepareFrog ;
10402: CALL 53328 0 0
// for i := 1 to 3 do
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: DOUBLE
10412: LD_INT 1
10414: DEC
10415: ST_TO_ADDR
10416: LD_INT 3
10418: PUSH
10419: FOR_TO
10420: IFFALSE 10439
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
10422: CALL_OW 44
10426: PPUSH
10427: LD_INT 8
10429: PPUSH
10430: LD_INT 0
10432: PPUSH
10433: CALL_OW 49
10437: GO 10419
10439: POP
10440: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
10441: LD_ADDR_VAR 0 4
10445: PUSH
10446: LD_INT 3
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: PUSH
10464: LD_OWVAR 67
10468: ARRAY
10469: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
10470: LD_ADDR_VAR 0 3
10474: PUSH
10475: LD_INT 18
10477: PUSH
10478: LD_INT 19
10480: PUSH
10481: LD_INT 20
10483: PUSH
10484: LD_INT 21
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: ST_TO_ADDR
// PrepareMastodont ;
10493: CALL 53488 0 0
// for i := 1 to amount do
10497: LD_ADDR_VAR 0 2
10501: PUSH
10502: DOUBLE
10503: LD_INT 1
10505: DEC
10506: ST_TO_ADDR
10507: LD_VAR 0 4
10511: PUSH
10512: FOR_TO
10513: IFFALSE 10550
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
10515: CALL_OW 45
10519: PPUSH
10520: LD_VAR 0 3
10524: PUSH
10525: LD_VAR 0 2
10529: PUSH
10530: LD_INT 1
10532: MINUS
10533: PUSH
10534: LD_OWVAR 67
10538: PLUS
10539: ARRAY
10540: PPUSH
10541: LD_INT 0
10543: PPUSH
10544: CALL_OW 49
10548: GO 10512
10550: POP
10551: POP
// PrepareApeman ( 0 ) ;
10552: LD_INT 0
10554: PPUSH
10555: CALL 53119 0 1
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
10559: LD_ADDR_VAR 0 2
10563: PUSH
10564: DOUBLE
10565: LD_INT 1
10567: DEC
10568: ST_TO_ADDR
10569: LD_INT 9
10571: PUSH
10572: LD_INT 7
10574: PUSH
10575: LD_INT 6
10577: PUSH
10578: LD_INT 5
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: LD_OWVAR 67
10591: ARRAY
10592: PUSH
10593: FOR_TO
10594: IFFALSE 10613
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
10596: CALL_OW 44
10600: PPUSH
10601: LD_INT 6
10603: PPUSH
10604: LD_INT 0
10606: PPUSH
10607: CALL_OW 49
10611: GO 10593
10613: POP
10614: POP
// for i := 1 to 3 do
10615: LD_ADDR_VAR 0 2
10619: PUSH
10620: DOUBLE
10621: LD_INT 1
10623: DEC
10624: ST_TO_ADDR
10625: LD_INT 3
10627: PUSH
10628: FOR_TO
10629: IFFALSE 10654
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 6 , false ) ;
10631: CALL_OW 44
10635: PPUSH
10636: LD_INT 274
10638: PPUSH
10639: LD_INT 133
10641: PPUSH
10642: LD_INT 6
10644: PPUSH
10645: LD_INT 0
10647: PPUSH
10648: CALL_OW 50
10652: GO 10628
10654: POP
10655: POP
// end ;
10656: LD_VAR 0 1
10660: RET
// export function AreInArea ( units , area ) ; var i ; begin
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
// result := false ;
10665: LD_ADDR_VAR 0 3
10669: PUSH
10670: LD_INT 0
10672: ST_TO_ADDR
// if not units then
10673: LD_VAR 0 1
10677: NOT
10678: IFFALSE 10682
// exit ;
10680: GO 10748
// for i in units do
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_VAR 0 1
10691: PUSH
10692: FOR_IN
10693: IFFALSE 10746
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
10695: LD_VAR 0 4
10699: PPUSH
10700: LD_VAR 0 2
10704: PPUSH
10705: CALL_OW 308
10709: PUSH
10710: LD_VAR 0 4
10714: PPUSH
10715: CALL_OW 310
10719: PPUSH
10720: LD_VAR 0 2
10724: PPUSH
10725: CALL_OW 308
10729: OR
10730: IFFALSE 10744
// begin result := true ;
10732: LD_ADDR_VAR 0 3
10736: PUSH
10737: LD_INT 1
10739: ST_TO_ADDR
// exit ;
10740: POP
10741: POP
10742: GO 10748
// end ;
10744: GO 10692
10746: POP
10747: POP
// end ; end_of_file
10748: LD_VAR 0 3
10752: RET
// export function Action ; var i , mech , veh , amTroops ; begin
10753: LD_INT 0
10755: PPUSH
10756: PPUSH
10757: PPUSH
10758: PPUSH
10759: PPUSH
// InGameOn ;
10760: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
10764: LD_INT 84
10766: PPUSH
10767: LD_INT 28
10769: PPUSH
10770: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
10774: LD_INT 2
10776: PPUSH
10777: LD_INT 9
10779: PPUSH
10780: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
10784: LD_EXP 21
10788: PPUSH
10789: LD_INT 90
10791: PPUSH
10792: LD_INT 30
10794: PPUSH
10795: CALL_OW 111
// uc_side := 1 ;
10799: LD_ADDR_OWVAR 20
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// uc_nation := nation_american ;
10807: LD_ADDR_OWVAR 21
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
10815: LD_INT 3
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: LD_INT 1
10823: PPUSH
10824: LD_INT 9
10826: PPUSH
10827: LD_INT 66
10829: PPUSH
10830: CALL 23989 0 5
// veh := CreateVehicle ;
10834: LD_ADDR_VAR 0 4
10838: PUSH
10839: CALL_OW 45
10843: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
10844: LD_VAR 0 4
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
10856: LD_VAR 0 4
10860: PPUSH
10861: LD_INT 80
10863: PPUSH
10864: LD_INT 27
10866: PPUSH
10867: LD_INT 0
10869: PPUSH
10870: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
10874: LD_INT 1
10876: PPUSH
10877: LD_INT 8
10879: PPUSH
10880: CALL_OW 383
// mech := CreateHuman ;
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: CALL_OW 44
10893: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_VAR 0 4
10903: PPUSH
10904: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
10908: LD_INT 35
10910: PPUSH
10911: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
10915: LD_INT 90
10917: PPUSH
10918: LD_INT 30
10920: PPUSH
10921: CALL_OW 428
10925: IFFALSE 10908
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
10927: LD_INT 80
10929: PPUSH
10930: LD_INT 27
10932: PPUSH
10933: LD_INT 2
10935: PPUSH
10936: LD_INT 6
10938: NEG
10939: PPUSH
10940: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
10944: LD_INT 80
10946: PPUSH
10947: LD_INT 27
10949: PPUSH
10950: CALL_OW 86
// DialogueOn ;
10954: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
10958: LD_EXP 21
10962: PPUSH
10963: LD_STRING DH-Start-1
10965: PPUSH
10966: CALL_OW 88
// DialogueOff ;
10970: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
10974: LD_EXP 21
10978: PPUSH
10979: LD_VAR 0 4
10983: PPUSH
10984: CALL_OW 115
// wait ( 0 0$1 ) ;
10988: LD_INT 35
10990: PPUSH
10991: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
10995: LD_EXP 21
10999: PPUSH
11000: CALL_OW 310
11004: PPUSH
11005: LD_INT 200
11007: PPUSH
11008: CALL_OW 234
// wait ( 0 0$0.3 ) ;
11012: LD_INT 10
11014: PPUSH
11015: CALL_OW 67
// DialogueOn ;
11019: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
11023: LD_EXP 21
11027: PPUSH
11028: LD_STRING DH-Start-2
11030: PPUSH
11031: CALL_OW 88
// DialogueOff ;
11035: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11039: LD_EXP 21
11043: PPUSH
11044: LD_VAR 0 4
11048: PPUSH
11049: CALL_OW 115
// wait ( 0 0$0.2 ) ;
11053: LD_INT 7
11055: PPUSH
11056: CALL_OW 67
// ComCrawl ( Heike ) ;
11060: LD_EXP 21
11064: PPUSH
11065: CALL_OW 137
// wait ( 0 0$3 ) ;
11069: LD_INT 105
11071: PPUSH
11072: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
11076: LD_EXP 24
11080: PPUSH
11081: LD_INT 82
11083: PPUSH
11084: LD_INT 43
11086: PPUSH
11087: LD_INT 0
11089: PPUSH
11090: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
11094: LD_EXP 22
11098: PPUSH
11099: LD_EXP 24
11103: PPUSH
11104: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
11108: LD_EXP 22
11112: PPUSH
11113: LD_INT 79
11115: PPUSH
11116: LD_INT 32
11118: PPUSH
11119: CALL_OW 111
// wait ( 0 0$1 ) ;
11123: LD_INT 35
11125: PPUSH
11126: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
11130: LD_INT 5
11132: PPUSH
11133: LD_INT 2
11135: PPUSH
11136: CALL_OW 343
// wait ( 0 0$3 ) ;
11140: LD_INT 105
11142: PPUSH
11143: CALL_OW 67
// SetLives ( veh , 200 ) ;
11147: LD_VAR 0 4
11151: PPUSH
11152: LD_INT 200
11154: PPUSH
11155: CALL_OW 234
// wait ( 0 0$1 ) ;
11159: LD_INT 35
11161: PPUSH
11162: CALL_OW 67
// SetLives ( mech , 10 ) ;
11166: LD_VAR 0 3
11170: PPUSH
11171: LD_INT 10
11173: PPUSH
11174: CALL_OW 234
// wait ( 0 0$2 ) ;
11178: LD_INT 70
11180: PPUSH
11181: CALL_OW 67
// ComWalk ( Heike ) ;
11185: LD_EXP 21
11189: PPUSH
11190: CALL_OW 138
// wait ( 1 ) ;
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
11201: LD_EXP 21
11205: PPUSH
11206: LD_INT 81
11208: PPUSH
11209: LD_INT 25
11211: PPUSH
11212: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
11216: LD_EXP 21
11220: PPUSH
11221: LD_INT 72
11223: PPUSH
11224: LD_INT 25
11226: PPUSH
11227: CALL_OW 171
// wait ( 0 0$3 ) ;
11231: LD_INT 105
11233: PPUSH
11234: CALL_OW 67
// ComExitVehicle ( Omar ) ;
11238: LD_EXP 22
11242: PPUSH
11243: CALL_OW 121
// wait ( 1 ) ;
11247: LD_INT 1
11249: PPUSH
11250: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
11254: LD_EXP 22
11258: PPUSH
11259: LD_INT 77
11261: PPUSH
11262: LD_INT 28
11264: PPUSH
11265: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
11269: LD_EXP 22
11273: PPUSH
11274: LD_EXP 21
11278: PPUSH
11279: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
11283: LD_EXP 22
11287: PPUSH
11288: LD_STRING DO-Start-3
11290: PPUSH
11291: CALL_OW 88
// repeat wait ( 3 ) ;
11295: LD_INT 3
11297: PPUSH
11298: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
11302: LD_EXP 21
11306: PPUSH
11307: LD_INT 72
11309: PPUSH
11310: LD_INT 25
11312: PPUSH
11313: CALL_OW 307
11317: IFFALSE 11295
// ComHold ( Heike ) ;
11319: LD_EXP 21
11323: PPUSH
11324: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
11328: LD_EXP 22
11332: PPUSH
11333: LD_EXP 21
11337: PPUSH
11338: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
11342: LD_EXP 21
11346: PPUSH
11347: LD_EXP 22
11351: PPUSH
11352: CALL_OW 112
// wait ( 0 0$1 ) ;
11356: LD_INT 35
11358: PPUSH
11359: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
11363: LD_EXP 21
11367: PPUSH
11368: LD_EXP 22
11372: PPUSH
11373: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
11377: LD_EXP 21
11381: PPUSH
11382: LD_STRING DH-Start-4
11384: PPUSH
11385: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
11389: LD_EXP 22
11393: PPUSH
11394: LD_STRING DO-Start-5
11396: PPUSH
11397: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
11401: LD_EXP 21
11405: PPUSH
11406: LD_STRING DH-Start-6
11408: PPUSH
11409: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
11413: LD_EXP 22
11417: PPUSH
11418: LD_STRING DO-Start-7
11420: PPUSH
11421: CALL_OW 88
// if Query ( QOmar ) = 2 then
11425: LD_STRING QOmar
11427: PPUSH
11428: CALL_OW 97
11432: PUSH
11433: LD_INT 2
11435: EQUAL
11436: IFFALSE 11724
// begin Say ( Heike , DH-QuestionN-1 ) ;
11438: LD_EXP 21
11442: PPUSH
11443: LD_STRING DH-QuestionN-1
11445: PPUSH
11446: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
11450: LD_EXP 21
11454: PPUSH
11455: LD_INT 58
11457: PPUSH
11458: LD_INT 27
11460: PPUSH
11461: CALL_OW 111
// wait ( 0 0$2 ) ;
11465: LD_INT 70
11467: PPUSH
11468: CALL_OW 67
// ChangeSideFog ( 5 , 5 ) ;
11472: LD_INT 5
11474: PPUSH
11475: LD_INT 5
11477: PPUSH
11478: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
11482: LD_INT 80
11484: PPUSH
11485: LD_INT 27
11487: PPUSH
11488: LD_INT 2
11490: PPUSH
11491: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
11495: LD_INT 58
11497: PPUSH
11498: LD_INT 27
11500: PPUSH
11501: CALL_OW 84
// repeat wait ( 3 ) ;
11505: LD_INT 3
11507: PPUSH
11508: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
11512: LD_EXP 21
11516: PPUSH
11517: LD_INT 88
11519: PPUSH
11520: LD_INT 27
11522: PPUSH
11523: CALL_OW 297
11527: IFFALSE 11505
// uc_side := 1 ;
11529: LD_ADDR_OWVAR 20
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// uc_nation := nation_american ;
11537: LD_ADDR_OWVAR 21
11541: PUSH
11542: LD_INT 1
11544: ST_TO_ADDR
// amTroops := [ ] ;
11545: LD_ADDR_VAR 0 5
11549: PUSH
11550: EMPTY
11551: ST_TO_ADDR
// for i := 1 to 3 do
11552: LD_ADDR_VAR 0 2
11556: PUSH
11557: DOUBLE
11558: LD_INT 1
11560: DEC
11561: ST_TO_ADDR
11562: LD_INT 3
11564: PUSH
11565: FOR_TO
11566: IFFALSE 11659
// begin PrepareSoldier ( false , 10 ) ;
11568: LD_INT 0
11570: PPUSH
11571: LD_INT 10
11573: PPUSH
11574: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
11578: LD_ADDR_VAR 0 5
11582: PUSH
11583: LD_VAR 0 5
11587: PPUSH
11588: CALL_OW 44
11592: PPUSH
11593: CALL 56851 0 2
11597: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
11598: LD_VAR 0 5
11602: PUSH
11603: LD_VAR 0 2
11607: ARRAY
11608: PPUSH
11609: LD_INT 2
11611: PPUSH
11612: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
11616: LD_VAR 0 5
11620: PUSH
11621: LD_VAR 0 2
11625: ARRAY
11626: PPUSH
11627: LD_INT 10
11629: PPUSH
11630: LD_INT 0
11632: PPUSH
11633: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
11637: LD_VAR 0 5
11641: PUSH
11642: LD_VAR 0 2
11646: ARRAY
11647: PPUSH
11648: LD_EXP 21
11652: PPUSH
11653: CALL_OW 115
// end ;
11657: GO 11565
11659: POP
11660: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
11661: LD_EXP 21
11665: PPUSH
11666: LD_VAR 0 5
11670: PUSH
11671: LD_INT 1
11673: ARRAY
11674: PPUSH
11675: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
11679: LD_INT 35
11681: PPUSH
11682: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
11686: LD_EXP 21
11690: PPUSH
11691: CALL_OW 301
11695: PUSH
11696: LD_EXP 21
11700: PPUSH
11701: CALL_OW 303
11705: OR
11706: IFFALSE 11679
// wait ( 0 0$2 ) ;
11708: LD_INT 70
11710: PPUSH
11711: CALL_OW 67
// YouLost ( Heike ) ;
11715: LD_STRING Heike
11717: PPUSH
11718: CALL_OW 104
// exit ;
11722: GO 12598
// end ; Say ( Heike , DH-QuestionY-1 ) ;
11724: LD_EXP 21
11728: PPUSH
11729: LD_STRING DH-QuestionY-1
11731: PPUSH
11732: CALL_OW 88
// wait ( 0 0$0.3 ) ;
11736: LD_INT 10
11738: PPUSH
11739: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
11743: LD_EXP 22
11747: PPUSH
11748: LD_STRING DO-Story-1
11750: PPUSH
11751: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
11755: LD_EXP 22
11759: PPUSH
11760: LD_STRING DO-Story-2
11762: PPUSH
11763: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
11767: LD_EXP 22
11771: PPUSH
11772: LD_STRING DO-Story-3
11774: PPUSH
11775: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
11779: LD_EXP 22
11783: PPUSH
11784: LD_STRING DO-Story-4
11786: PPUSH
11787: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
11791: LD_EXP 21
11795: PPUSH
11796: LD_STRING DH-Story-5
11798: PPUSH
11799: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
11803: LD_EXP 22
11807: PPUSH
11808: LD_STRING DO-Story-6
11810: PPUSH
11811: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
11815: LD_EXP 22
11819: PPUSH
11820: LD_STRING DO-Story-7
11822: PPUSH
11823: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
11827: LD_EXP 21
11831: PPUSH
11832: LD_INT 82
11834: PPUSH
11835: LD_INT 44
11837: PPUSH
11838: CALL_OW 111
// AddComHold ( Heike ) ;
11842: LD_EXP 21
11846: PPUSH
11847: CALL_OW 200
// wait ( 0 0$4 ) ;
11851: LD_INT 140
11853: PPUSH
11854: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
11858: LD_EXP 22
11862: PPUSH
11863: LD_INT 82
11865: PPUSH
11866: LD_INT 41
11868: PPUSH
11869: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
11873: LD_EXP 22
11877: PPUSH
11878: LD_EXP 21
11882: PPUSH
11883: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
11887: LD_INT 35
11889: PPUSH
11890: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
11894: LD_EXP 21
11898: PPUSH
11899: LD_INT 82
11901: PPUSH
11902: LD_INT 44
11904: PPUSH
11905: CALL_OW 307
11909: IFFALSE 11887
// ComTurnXY ( Heike , 81 , 47 ) ;
11911: LD_EXP 21
11915: PPUSH
11916: LD_INT 81
11918: PPUSH
11919: LD_INT 47
11921: PPUSH
11922: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
11926: LD_EXP 21
11930: PPUSH
11931: LD_STRING DH-Story-8
11933: PPUSH
11934: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
11938: LD_EXP 22
11942: PPUSH
11943: LD_STRING DO-Story-9
11945: PPUSH
11946: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
11950: LD_EXP 22
11954: PPUSH
11955: LD_STRING DO-Story-10
11957: PPUSH
11958: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
11962: LD_EXP 21
11966: PPUSH
11967: LD_EXP 22
11971: PPUSH
11972: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
11976: LD_EXP 21
11980: PPUSH
11981: LD_STRING DH-Story-11
11983: PPUSH
11984: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
11988: LD_EXP 22
11992: PPUSH
11993: LD_EXP 21
11997: PPUSH
11998: CALL_OW 112
// wait ( 0 0$0.3 ) ;
12002: LD_INT 10
12004: PPUSH
12005: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12009: LD_EXP 22
12013: PPUSH
12014: LD_EXP 21
12018: PPUSH
12019: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
12023: LD_EXP 22
12027: PPUSH
12028: LD_STRING DO-Story-12
12030: PPUSH
12031: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
12035: LD_EXP 21
12039: PPUSH
12040: LD_STRING DH-Story-13
12042: PPUSH
12043: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
12047: LD_EXP 22
12051: PPUSH
12052: LD_STRING DO-Story-14
12054: PPUSH
12055: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
12059: LD_EXP 22
12063: PPUSH
12064: LD_STRING DO-Story-15
12066: PPUSH
12067: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
12071: LD_INT 84
12073: PPUSH
12074: LD_INT 48
12076: PPUSH
12077: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
12081: LD_EXP 21
12085: PPUSH
12086: LD_INT 84
12088: PPUSH
12089: LD_INT 48
12091: PPUSH
12092: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
12096: LD_EXP 21
12100: PPUSH
12101: LD_INT 84
12103: PPUSH
12104: LD_INT 49
12106: PPUSH
12107: CALL_OW 178
// wait ( 0 0$1 ) ;
12111: LD_INT 35
12113: PPUSH
12114: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
12118: LD_EXP 22
12122: PPUSH
12123: LD_EXP 21
12127: PPUSH
12128: CALL_OW 112
// wait ( 0 0$1 ) ;
12132: LD_INT 35
12134: PPUSH
12135: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12139: LD_EXP 22
12143: PPUSH
12144: LD_EXP 21
12148: PPUSH
12149: CALL_OW 119
// wait ( 0 0$0.3 ) ;
12153: LD_INT 10
12155: PPUSH
12156: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
12160: LD_EXP 22
12164: PPUSH
12165: LD_STRING DO-Story-16
12167: PPUSH
12168: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
12172: LD_STRING QOmar2
12174: PPUSH
12175: CALL_OW 97
12179: PUSH
12180: LD_INT 2
12182: EQUAL
12183: IFFALSE 12478
// begin ComMoveXY ( Heike , 79 , 57 ) ;
12185: LD_EXP 21
12189: PPUSH
12190: LD_INT 79
12192: PPUSH
12193: LD_INT 57
12195: PPUSH
12196: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
12200: LD_EXP 21
12204: PPUSH
12205: LD_INT 68
12207: PPUSH
12208: LD_INT 53
12210: PPUSH
12211: CALL_OW 171
// wait ( 0 0$2 ) ;
12215: LD_INT 70
12217: PPUSH
12218: CALL_OW 67
// ChangeSideFog ( 5 , 5 ) ;
12222: LD_INT 5
12224: PPUSH
12225: LD_INT 5
12227: PPUSH
12228: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
12232: LD_INT 80
12234: PPUSH
12235: LD_INT 27
12237: PPUSH
12238: LD_INT 2
12240: PPUSH
12241: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
12245: LD_INT 68
12247: PPUSH
12248: LD_INT 53
12250: PPUSH
12251: CALL_OW 84
// repeat wait ( 3 ) ;
12255: LD_INT 3
12257: PPUSH
12258: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
12262: LD_EXP 21
12266: PPUSH
12267: LD_INT 68
12269: PPUSH
12270: LD_INT 53
12272: PPUSH
12273: CALL_OW 297
12277: PUSH
12278: LD_INT 6
12280: LESS
12281: IFFALSE 12255
// uc_side := 1 ;
12283: LD_ADDR_OWVAR 20
12287: PUSH
12288: LD_INT 1
12290: ST_TO_ADDR
// uc_nation := nation_american ;
12291: LD_ADDR_OWVAR 21
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// amTroops := [ ] ;
12299: LD_ADDR_VAR 0 5
12303: PUSH
12304: EMPTY
12305: ST_TO_ADDR
// for i := 1 to 3 do
12306: LD_ADDR_VAR 0 2
12310: PUSH
12311: DOUBLE
12312: LD_INT 1
12314: DEC
12315: ST_TO_ADDR
12316: LD_INT 3
12318: PUSH
12319: FOR_TO
12320: IFFALSE 12413
// begin PrepareSoldier ( false , 10 ) ;
12322: LD_INT 0
12324: PPUSH
12325: LD_INT 10
12327: PPUSH
12328: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12332: LD_ADDR_VAR 0 5
12336: PUSH
12337: LD_VAR 0 5
12341: PPUSH
12342: CALL_OW 44
12346: PPUSH
12347: CALL 56851 0 2
12351: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12352: LD_VAR 0 5
12356: PUSH
12357: LD_VAR 0 2
12361: ARRAY
12362: PPUSH
12363: LD_INT 2
12365: PPUSH
12366: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
12370: LD_VAR 0 5
12374: PUSH
12375: LD_VAR 0 2
12379: ARRAY
12380: PPUSH
12381: LD_INT 11
12383: PPUSH
12384: LD_INT 0
12386: PPUSH
12387: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12391: LD_VAR 0 5
12395: PUSH
12396: LD_VAR 0 2
12400: ARRAY
12401: PPUSH
12402: LD_EXP 21
12406: PPUSH
12407: CALL_OW 115
// end ;
12411: GO 12319
12413: POP
12414: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12415: LD_EXP 21
12419: PPUSH
12420: LD_VAR 0 5
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12433: LD_INT 35
12435: PPUSH
12436: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12440: LD_EXP 21
12444: PPUSH
12445: CALL_OW 301
12449: PUSH
12450: LD_EXP 21
12454: PPUSH
12455: CALL_OW 303
12459: OR
12460: IFFALSE 12433
// wait ( 0 0$2 ) ;
12462: LD_INT 70
12464: PPUSH
12465: CALL_OW 67
// YouLost ( Heike ) ;
12469: LD_STRING Heike
12471: PPUSH
12472: CALL_OW 104
// exit ;
12476: GO 12598
// end ; Say ( Omar , DO-Objective-1 ) ;
12478: LD_EXP 22
12482: PPUSH
12483: LD_STRING DO-Objective-1
12485: PPUSH
12486: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
12490: LD_EXP 21
12494: PPUSH
12495: LD_EXP 22
12499: PPUSH
12500: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
12504: LD_EXP 21
12508: PPUSH
12509: LD_STRING DH-Objective-2
12511: PPUSH
12512: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
12516: LD_EXP 22
12520: PPUSH
12521: LD_STRING DO-Objective-3
12523: PPUSH
12524: CALL_OW 88
// ChangeSideFog ( 5 , 5 ) ;
12528: LD_INT 5
12530: PPUSH
12531: LD_INT 5
12533: PPUSH
12534: CALL_OW 343
// RemoveSeeing ( 80 , 27 , 2 ) ;
12538: LD_INT 80
12540: PPUSH
12541: LD_INT 27
12543: PPUSH
12544: LD_INT 2
12546: PPUSH
12547: CALL_OW 331
// SetSide ( Omar , 2 ) ;
12551: LD_EXP 22
12555: PPUSH
12556: LD_INT 2
12558: PPUSH
12559: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
12563: LD_EXP 24
12567: PPUSH
12568: LD_INT 2
12570: PPUSH
12571: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
12575: LD_STRING O1
12577: PPUSH
12578: CALL_OW 337
// InGameOff ;
12582: CALL_OW 9
// gameActive := true ;
12586: LD_ADDR_EXP 19
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// SaveForQuickRestart ;
12594: CALL_OW 22
// end ;
12598: LD_VAR 0 1
12602: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
12603: LD_EXP 19
12607: PUSH
12608: LD_EXP 7
12612: NOT
12613: AND
12614: PUSH
12615: LD_INT 4
12617: PPUSH
12618: LD_INT 22
12620: PUSH
12621: LD_INT 2
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PPUSH
12628: CALL_OW 70
12632: AND
12633: IFFALSE 12784
12635: GO 12637
12637: DISABLE
12638: LD_INT 0
12640: PPUSH
// begin spotArabianBase := true ;
12641: LD_ADDR_EXP 7
12645: PUSH
12646: LD_INT 1
12648: ST_TO_ADDR
// DialogueOn ;
12649: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
12653: LD_INT 232
12655: PPUSH
12656: LD_INT 101
12658: PPUSH
12659: LD_INT 2
12661: PPUSH
12662: LD_INT 22
12664: NEG
12665: PPUSH
12666: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
12670: LD_INT 232
12672: PPUSH
12673: LD_INT 101
12675: PPUSH
12676: LD_INT 2
12678: PPUSH
12679: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
12683: LD_INT 232
12685: PPUSH
12686: LD_INT 101
12688: PPUSH
12689: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
12693: LD_ADDR_VAR 0 1
12697: PUSH
12698: LD_INT 4
12700: PPUSH
12701: LD_INT 22
12703: PUSH
12704: LD_INT 5
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PPUSH
12711: CALL_OW 70
12715: PUSH
12716: FOR_IN
12717: IFFALSE 12733
// SetSide ( i , 2 ) ;
12719: LD_VAR 0 1
12723: PPUSH
12724: LD_INT 2
12726: PPUSH
12727: CALL_OW 235
12731: GO 12716
12733: POP
12734: POP
// if not spotAmericanBase then
12735: LD_EXP 6
12739: NOT
12740: IFFALSE 12756
// Say ( Omar , DO-ArBase-1a ) else
12742: LD_EXP 22
12746: PPUSH
12747: LD_STRING DO-ArBase-1a
12749: PPUSH
12750: CALL_OW 88
12754: GO 12768
// Say ( Omar , DO-ArBase-1b ) ;
12756: LD_EXP 22
12760: PPUSH
12761: LD_STRING DO-ArBase-1b
12763: PPUSH
12764: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
12768: LD_EXP 21
12772: PPUSH
12773: LD_STRING DH-ArBase-2
12775: PPUSH
12776: CALL_OW 88
// DialogueOff ;
12780: CALL_OW 7
// end ;
12784: PPOPN 1
12786: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
12787: LD_EXP 19
12791: PUSH
12792: LD_INT 87
12794: PPUSH
12795: CALL_OW 306
12799: PUSH
12800: LD_INT 87
12802: PPUSH
12803: CALL_OW 313
12807: OR
12808: AND
12809: PUSH
12810: LD_EXP 21
12814: PPUSH
12815: CALL_OW 302
12819: AND
12820: PUSH
12821: LD_EXP 22
12825: PPUSH
12826: CALL_OW 302
12830: AND
12831: IFFALSE 12965
12833: GO 12835
12835: DISABLE
// begin DialogueOn ;
12836: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
12840: LD_EXP 21
12844: PPUSH
12845: LD_STRING DH-Fac-1
12847: PPUSH
12848: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
12852: LD_EXP 22
12856: PPUSH
12857: LD_STRING DOm-Fac-2
12859: PPUSH
12860: CALL_OW 88
// if TestCharacters ( 09_Markov ) then
12864: LD_STRING 09_Markov
12866: PPUSH
12867: CALL_OW 28
12871: IFFALSE 12887
// Say ( Heike , DH-Fac-3a ) else
12873: LD_EXP 21
12877: PPUSH
12878: LD_STRING DH-Fac-3a
12880: PPUSH
12881: CALL_OW 88
12885: GO 12954
// if TestCharacters ( 09_Olaf ) then
12887: LD_STRING 09_Olaf
12889: PPUSH
12890: CALL_OW 28
12894: IFFALSE 12910
// Say ( Heike , DH-Fac-3b ) else
12896: LD_EXP 21
12900: PPUSH
12901: LD_STRING DH-Fac-3b
12903: PPUSH
12904: CALL_OW 88
12908: GO 12954
// if GetSkill ( Heike , skill_mechanical ) > 5 then
12910: LD_EXP 21
12914: PPUSH
12915: LD_INT 3
12917: PPUSH
12918: CALL_OW 259
12922: PUSH
12923: LD_INT 5
12925: GREATER
12926: IFFALSE 12942
// Say ( Heike , DH-Fac-3c ) else
12928: LD_EXP 21
12932: PPUSH
12933: LD_STRING DH-Fac-3c
12935: PPUSH
12936: CALL_OW 88
12940: GO 12954
// Say ( Heike , DH-Fac-3d ) ;
12942: LD_EXP 21
12946: PPUSH
12947: LD_STRING DH-Fac-3d
12949: PPUSH
12950: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
12954: LD_STRING ARemote
12956: PPUSH
12957: CALL_OW 337
// DialogueOff ;
12961: CALL_OW 7
// end ;
12965: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
12966: LD_EXP 19
12970: PUSH
12971: LD_INT 89
12973: PPUSH
12974: CALL_OW 306
12978: PUSH
12979: LD_INT 89
12981: PPUSH
12982: CALL_OW 313
12986: OR
12987: AND
12988: PUSH
12989: LD_EXP 21
12993: PPUSH
12994: CALL_OW 302
12998: AND
12999: PUSH
13000: LD_EXP 22
13004: PPUSH
13005: CALL_OW 302
13009: AND
13010: IFFALSE 13238
13012: GO 13014
13014: DISABLE
// begin DialogueOn ;
13015: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
13019: LD_EXP 21
13023: PPUSH
13024: LD_STRING DH-Lab-1
13026: PPUSH
13027: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
13031: LD_EXP 22
13035: PPUSH
13036: LD_STRING DOm-Lab-2
13038: PPUSH
13039: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
13043: LD_STRING 09_Aviradze
13045: PPUSH
13046: CALL_OW 28
13050: IFFALSE 13105
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
13052: LD_INT 1
13054: PPUSH
13055: LD_INT 2
13057: PPUSH
13058: LD_INT 2
13060: PPUSH
13061: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
13065: LD_INT 2
13067: PPUSH
13068: LD_INT 2
13070: PPUSH
13071: LD_INT 2
13073: PPUSH
13074: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
13078: LD_INT 11
13080: PPUSH
13081: LD_INT 2
13083: PPUSH
13084: LD_INT 2
13086: PPUSH
13087: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
13091: LD_EXP 21
13095: PPUSH
13096: LD_STRING DH-Lab-4a
13098: PPUSH
13099: CALL_OW 88
// end else
13103: GO 13117
// Say ( Heike , DH-Lab-4b ) ;
13105: LD_EXP 21
13109: PPUSH
13110: LD_STRING DH-Lab-4b
13112: PPUSH
13113: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
13117: LD_STRING 05_DrugsTested
13119: PPUSH
13120: LD_EXP 1
13124: PPUSH
13125: CALL_OW 30
13129: IFFALSE 13156
// begin Say ( Heike , DH-Lab-5a ) ;
13131: LD_EXP 21
13135: PPUSH
13136: LD_STRING DH-Lab-5a
13138: PPUSH
13139: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
13143: LD_INT 5
13145: PPUSH
13146: LD_INT 2
13148: PPUSH
13149: LD_INT 1
13151: PPUSH
13152: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
13156: LD_STRING 09_ApeBrain
13158: PPUSH
13159: LD_EXP 1
13163: PPUSH
13164: CALL_OW 30
13168: IFFALSE 13207
// begin Say ( Heike , DH-Lab-6a ) ;
13170: LD_EXP 21
13174: PPUSH
13175: LD_STRING DH-Lab-6a
13177: PPUSH
13178: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
13182: LD_EXP 22
13186: PPUSH
13187: LD_STRING DOm-Lab-7a
13189: PPUSH
13190: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
13194: LD_INT 4
13196: PPUSH
13197: LD_INT 2
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
13207: LD_STRING 09_ApeNeural
13209: PPUSH
13210: LD_EXP 1
13214: PPUSH
13215: CALL_OW 30
13219: IFFALSE 13234
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
13221: LD_INT 3
13223: PPUSH
13224: LD_INT 2
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: CALL_OW 322
// end ; DialogueOff ;
13234: CALL_OW 7
// end ;
13238: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
13239: LD_EXP 19
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 25
13256: PUSH
13257: LD_INT 12
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PPUSH
13268: CALL_OW 69
13272: AND
13273: IFFALSE 13308
13275: GO 13277
13277: DISABLE
// begin if IsOk ( Heike ) then
13278: LD_EXP 21
13282: PPUSH
13283: CALL_OW 302
13287: IFFALSE 13301
// Say ( Heike , DH-Ape-1 ) ;
13289: LD_EXP 21
13293: PPUSH
13294: LD_STRING DH-Ape-1
13296: PPUSH
13297: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
13301: LD_STRING AApes
13303: PPUSH
13304: CALL_OW 337
// end ;
13308: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
13309: LD_EXP 19
13313: PUSH
13314: LD_INT 22
13316: PUSH
13317: LD_INT 2
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 25
13326: PUSH
13327: LD_INT 15
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PPUSH
13338: CALL_OW 69
13342: PUSH
13343: LD_INT 5
13345: GREATEREQUAL
13346: AND
13347: IFFALSE 13449
13349: GO 13351
13351: DISABLE
// begin hasApes := true ;
13352: LD_ADDR_EXP 16
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
13360: LD_STRING AApesOut
13362: PPUSH
13363: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
13367: LD_EXP 21
13371: PPUSH
13372: CALL_OW 302
13376: NOT
13377: PUSH
13378: LD_EXP 22
13382: PPUSH
13383: CALL_OW 302
13387: NOT
13388: OR
13389: IFFALSE 13393
// exit ;
13391: GO 13449
// DialogueOn ;
13393: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
13397: LD_EXP 21
13401: PPUSH
13402: LD_STRING DH-ApeArmy-1
13404: PPUSH
13405: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
13409: LD_EXP 22
13413: PPUSH
13414: LD_STRING DOm-ApeArmy-2
13416: PPUSH
13417: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING DH-ApeArmy-3
13428: PPUSH
13429: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
13433: LD_EXP 22
13437: PPUSH
13438: LD_STRING DOm-ApeArmy-4
13440: PPUSH
13441: CALL_OW 88
// DialogueOff ;
13445: CALL_OW 7
// end ;
13449: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
13450: LD_EXP 19
13454: PUSH
13455: LD_INT 5
13457: PPUSH
13458: LD_INT 2
13460: PPUSH
13461: CALL_OW 321
13465: PUSH
13466: LD_INT 2
13468: EQUAL
13469: AND
13470: IFFALSE 13506
13472: GO 13474
13474: DISABLE
// begin hasDrugs := true ;
13475: LD_ADDR_EXP 17
13479: PUSH
13480: LD_INT 1
13482: ST_TO_ADDR
// if IsOk ( Heike ) then
13483: LD_EXP 21
13487: PPUSH
13488: CALL_OW 302
13492: IFFALSE 13506
// Say ( Heike , DH-Stim-1 ) ;
13494: LD_EXP 21
13498: PPUSH
13499: LD_STRING DH-Stim-1
13501: PPUSH
13502: CALL_OW 88
// end ;
13506: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
13507: LD_EXP 19
13511: PUSH
13512: LD_INT 22
13514: PUSH
13515: LD_INT 2
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 25
13524: PUSH
13525: LD_INT 17
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PPUSH
13536: CALL_OW 69
13540: AND
13541: IFFALSE 13558
13543: GO 13545
13545: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
13546: LD_EXP 21
13550: PPUSH
13551: LD_STRING DH-Kamikadze-1
13553: PPUSH
13554: CALL_OW 88
13558: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
13559: LD_EXP 19
13563: PUSH
13564: LD_INT 22
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 31
13576: PUSH
13577: LD_INT 31
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: AND
13593: PUSH
13594: LD_EXP 22
13598: PPUSH
13599: CALL_OW 302
13603: AND
13604: PUSH
13605: LD_EXP 21
13609: PPUSH
13610: CALL_OW 302
13614: AND
13615: IFFALSE 13700
13617: GO 13619
13619: DISABLE
// begin InGameOn ;
13620: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
13624: LD_EXP 22
13628: PPUSH
13629: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
13633: LD_EXP 21
13637: PPUSH
13638: LD_STRING DH-Mastodont-1
13640: PPUSH
13641: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
13645: LD_EXP 22
13649: PPUSH
13650: LD_STRING DOm-Mastodont-2
13652: PPUSH
13653: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
13657: LD_EXP 21
13661: PPUSH
13662: LD_STRING DH-Mastodont-3
13664: PPUSH
13665: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
13669: LD_EXP 22
13673: PPUSH
13674: LD_STRING DOm-Mastodont-4
13676: PPUSH
13677: CALL_OW 88
// hasMastodont := true ;
13681: LD_ADDR_EXP 13
13685: PUSH
13686: LD_INT 1
13688: ST_TO_ADDR
// InGameOff ;
13689: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
13693: LD_STRING ACH_MASTODONTTAME
13695: PPUSH
13696: CALL_OW 543
// end ;
13700: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_tiger ] ] ) do
13701: LD_EXP 19
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_INT 2
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 25
13718: PUSH
13719: LD_INT 14
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: AND
13735: IFFALSE 13747
13737: GO 13739
13739: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
13740: LD_STRING ACH_TIGERTAME
13742: PPUSH
13743: CALL_OW 543
13747: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_tiger ] ] ) > 1 do
13748: LD_EXP 19
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 14
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: PUSH
13782: LD_INT 1
13784: GREATER
13785: AND
13786: IFFALSE 13890
13788: GO 13790
13790: DISABLE
// begin hasTigers := true ;
13791: LD_ADDR_EXP 15
13795: PUSH
13796: LD_INT 1
13798: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
13799: LD_EXP 22
13803: PPUSH
13804: CALL_OW 302
13808: NOT
13809: PUSH
13810: LD_EXP 21
13814: PPUSH
13815: CALL_OW 302
13819: NOT
13820: OR
13821: IFFALSE 13825
// exit ;
13823: GO 13890
// CenterNowOnUnits ( Omar ) ;
13825: LD_EXP 22
13829: PPUSH
13830: CALL_OW 87
// DialogueOn ;
13834: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
13838: LD_EXP 22
13842: PPUSH
13843: LD_STRING DOm-Tiger-1
13845: PPUSH
13846: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
13850: LD_EXP 21
13854: PPUSH
13855: LD_STRING DH-Tiger-2
13857: PPUSH
13858: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
13862: LD_EXP 22
13866: PPUSH
13867: LD_STRING DOm-Tiger-3
13869: PPUSH
13870: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
13874: LD_EXP 21
13878: PPUSH
13879: LD_STRING DH-Tiger-4
13881: PPUSH
13882: CALL_OW 88
// DialogueOff ;
13886: CALL_OW 7
// end ;
13890: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
13891: LD_EXP 19
13895: PUSH
13896: LD_INT 22
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 50
13908: PUSH
13909: EMPTY
13910: LIST
13911: PUSH
13912: LD_INT 33
13914: PUSH
13915: LD_INT 2
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: PPUSH
13927: CALL_OW 69
13931: PUSH
13932: LD_INT 3
13934: GREATEREQUAL
13935: AND
13936: IFFALSE 13979
13938: GO 13940
13940: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
13941: LD_STRING ARemoteOut
13943: PPUSH
13944: CALL_OW 337
// hasVehicles := true ;
13948: LD_ADDR_EXP 14
13952: PUSH
13953: LD_INT 1
13955: ST_TO_ADDR
// if IsOk ( Heike ) then
13956: LD_EXP 21
13960: PPUSH
13961: CALL_OW 302
13965: IFFALSE 13979
// Say ( Heike , DH-Mechanic-1 ) ;
13967: LD_EXP 21
13971: PPUSH
13972: LD_STRING DH-Mechanic-1
13974: PPUSH
13975: CALL_OW 88
// end ;
13979: END
// every 0 0$1 trigger gameActive and FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) do
13980: LD_EXP 19
13984: PUSH
13985: LD_INT 29
13987: PPUSH
13988: LD_INT 22
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PPUSH
13998: CALL_OW 70
14002: AND
14003: IFFALSE 14016
14005: GO 14007
14007: DISABLE
// spotAmericanBase := true ;
14008: LD_ADDR_EXP 6
14012: PUSH
14013: LD_INT 1
14015: ST_TO_ADDR
14016: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
14017: LD_EXP 19
14021: PUSH
14022: LD_EXP 6
14026: AND
14027: PUSH
14028: LD_EXP 22
14032: PPUSH
14033: CALL_OW 302
14037: AND
14038: PUSH
14039: LD_EXP 21
14043: PPUSH
14044: CALL_OW 302
14048: AND
14049: IFFALSE 14289
14051: GO 14053
14053: DISABLE
// begin DialogueOn ;
14054: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
14058: LD_INT 92
14060: PPUSH
14061: LD_INT 129
14063: PPUSH
14064: LD_INT 2
14066: PPUSH
14067: LD_INT 22
14069: NEG
14070: PPUSH
14071: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
14075: LD_INT 92
14077: PPUSH
14078: LD_INT 129
14080: PPUSH
14081: LD_INT 2
14083: PPUSH
14084: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
14088: LD_INT 92
14090: PPUSH
14091: LD_INT 129
14093: PPUSH
14094: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
14098: LD_INT 10
14100: PPUSH
14101: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
14105: LD_EXP 22
14109: PPUSH
14110: LD_STRING DO-AmBase-1
14112: PPUSH
14113: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
14117: LD_EXP 21
14121: PPUSH
14122: LD_STRING DH-AmBase-2
14124: PPUSH
14125: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
14129: LD_EXP 22
14133: PPUSH
14134: LD_STRING DO-AmBase-3
14136: PPUSH
14137: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
14141: LD_EXP 21
14145: PPUSH
14146: LD_STRING DH-AmBase-4
14148: PPUSH
14149: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
14153: LD_EXP 22
14157: PPUSH
14158: LD_STRING DO-AmBase-5
14160: PPUSH
14161: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
14165: LD_EXP 21
14169: PPUSH
14170: LD_STRING DH-AmBase-6
14172: PPUSH
14173: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
14177: LD_EXP 22
14181: PPUSH
14182: LD_STRING DO-AmBase-7
14184: PPUSH
14185: CALL_OW 88
// if not spotArabianBase then
14189: LD_EXP 7
14193: NOT
14194: IFFALSE 14210
// begin Say ( Omar , DO-AmBase-8a ) ;
14196: LD_EXP 22
14200: PPUSH
14201: LD_STRING DO-AmBase-8a
14203: PPUSH
14204: CALL_OW 88
// end else
14208: GO 14222
// begin Say ( Omar , DO-AmBase-8b ) ;
14210: LD_EXP 22
14214: PPUSH
14215: LD_STRING DO-AmBase-8b
14217: PPUSH
14218: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
14222: LD_EXP 21
14226: PPUSH
14227: CALL_OW 310
14231: IFFALSE 14249
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
14233: LD_EXP 21
14237: PPUSH
14238: CALL_OW 310
14242: PPUSH
14243: CALL_OW 87
14247: GO 14258
// CenterNowOnUnits ( Heike ) ;
14249: LD_EXP 21
14253: PPUSH
14254: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
14258: LD_EXP 21
14262: PPUSH
14263: LD_STRING DH-AmBase-9
14265: PPUSH
14266: CALL_OW 88
// DialogueOff ;
14270: CALL_OW 7
// spotByAmerican := true ;
14274: LD_ADDR_EXP 8
14278: PUSH
14279: LD_INT 1
14281: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
14282: LD_STRING O2
14284: PPUSH
14285: CALL_OW 337
// end ;
14289: END
// function TalkAboutLegion ; begin
14290: LD_INT 0
14292: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
14293: LD_EXP 21
14297: PPUSH
14298: LD_STRING DH-Legion-1
14300: PPUSH
14301: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
14305: LD_EXP 22
14309: PPUSH
14310: LD_STRING DOm-Legion-2
14312: PPUSH
14313: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
14317: LD_EXP 21
14321: PPUSH
14322: LD_STRING DH-Legion-3
14324: PPUSH
14325: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
14329: LD_EXP 22
14333: PPUSH
14334: LD_STRING DOm-Legion-4
14336: PPUSH
14337: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
14341: LD_EXP 21
14345: PPUSH
14346: LD_STRING DH-Legion-5
14348: PPUSH
14349: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
14353: LD_EXP 22
14357: PPUSH
14358: LD_STRING DOm-Legion-6
14360: PPUSH
14361: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
14365: LD_EXP 21
14369: PPUSH
14370: LD_STRING DH-Legion-7
14372: PPUSH
14373: CALL_OW 88
// end ;
14377: LD_VAR 0 1
14381: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
14382: LD_EXP 19
14386: PUSH
14387: LD_EXP 21
14391: PUSH
14392: LD_EXP 22
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PPUSH
14401: LD_INT 22
14403: PPUSH
14404: CALL 10661 0 2
14408: AND
14409: PUSH
14410: LD_EXP 9
14414: NOT
14415: AND
14416: PUSH
14417: LD_EXP 10
14421: NOT
14422: AND
14423: IFFALSE 14930
14425: GO 14427
14427: DISABLE
14428: LD_INT 0
14430: PPUSH
14431: PPUSH
14432: PPUSH
// begin uc_side := 8 ;
14433: LD_ADDR_OWVAR 20
14437: PUSH
14438: LD_INT 8
14440: ST_TO_ADDR
// uc_nation := nation_american ;
14441: LD_ADDR_OWVAR 21
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
14449: LD_INT 3
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: LD_INT 1
14457: PPUSH
14458: LD_INT 9
14460: PPUSH
14461: LD_INT 90
14463: PPUSH
14464: CALL 23989 0 5
// veh := CreateVehicle ;
14468: LD_ADDR_VAR 0 3
14472: PUSH
14473: CALL_OW 45
14477: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
14478: LD_ADDR_EXP 41
14482: PUSH
14483: LD_EXP 41
14487: PPUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: CALL 56851 0 2
14497: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
14498: LD_VAR 0 3
14502: PPUSH
14503: LD_INT 2
14505: PPUSH
14506: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 126
14517: PPUSH
14518: LD_INT 18
14520: PPUSH
14521: LD_INT 0
14523: PPUSH
14524: CALL_OW 48
// uc_nation := nation_arabian ;
14528: LD_ADDR_OWVAR 21
14532: PUSH
14533: LD_INT 2
14535: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
14536: LD_INT 0
14538: PPUSH
14539: LD_INT 6
14541: PUSH
14542: LD_INT 7
14544: PUSH
14545: LD_INT 8
14547: PUSH
14548: LD_INT 9
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: PUSH
14557: LD_OWVAR 67
14561: ARRAY
14562: PPUSH
14563: CALL_OW 383
// un := CreateHuman ;
14567: LD_ADDR_VAR 0 2
14571: PUSH
14572: CALL_OW 44
14576: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
14577: LD_ADDR_EXP 36
14581: PUSH
14582: LD_EXP 36
14586: PPUSH
14587: LD_VAR 0 2
14591: PPUSH
14592: CALL 56851 0 2
14596: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14597: LD_VAR 0 2
14601: PPUSH
14602: LD_VAR 0 3
14606: PPUSH
14607: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
14611: LD_INT 0
14613: PPUSH
14614: LD_INT 6
14616: PUSH
14617: LD_INT 7
14619: PUSH
14620: LD_INT 8
14622: PUSH
14623: LD_INT 9
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: PUSH
14632: LD_OWVAR 67
14636: ARRAY
14637: PPUSH
14638: CALL_OW 381
// for i := 1 to 3 do
14642: LD_ADDR_VAR 0 1
14646: PUSH
14647: DOUBLE
14648: LD_INT 1
14650: DEC
14651: ST_TO_ADDR
14652: LD_INT 3
14654: PUSH
14655: FOR_TO
14656: IFFALSE 14745
// begin un := CreateHuman ;
14658: LD_ADDR_VAR 0 2
14662: PUSH
14663: CALL_OW 44
14667: ST_TO_ADDR
// if i = 1 then
14668: LD_VAR 0 1
14672: PUSH
14673: LD_INT 1
14675: EQUAL
14676: IFFALSE 14690
// SetClass ( un , class_sniper ) ;
14678: LD_VAR 0 2
14682: PPUSH
14683: LD_INT 5
14685: PPUSH
14686: CALL_OW 336
// legEForces := Join ( legEForces , un ) ;
14690: LD_ADDR_EXP 36
14694: PUSH
14695: LD_EXP 36
14699: PPUSH
14700: LD_VAR 0 2
14704: PPUSH
14705: CALL 56851 0 2
14709: ST_TO_ADDR
// SetDir ( un , 2 ) ;
14710: LD_VAR 0 2
14714: PPUSH
14715: LD_INT 2
14717: PPUSH
14718: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
14722: LD_VAR 0 2
14726: PPUSH
14727: LD_INT 126
14729: PPUSH
14730: LD_INT 18
14732: PPUSH
14733: LD_INT 4
14735: PPUSH
14736: LD_INT 0
14738: PPUSH
14739: CALL_OW 50
// end ;
14743: GO 14655
14745: POP
14746: POP
// wait ( 0 0$01 ) ;
14747: LD_INT 35
14749: PPUSH
14750: CALL_OW 67
// DialogueOn ;
14754: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
14758: LD_INT 126
14760: PPUSH
14761: LD_INT 18
14763: PPUSH
14764: LD_INT 2
14766: PPUSH
14767: LD_INT 16
14769: NEG
14770: PPUSH
14771: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
14775: LD_INT 126
14777: PPUSH
14778: LD_INT 18
14780: PPUSH
14781: CALL_OW 86
// TalkAboutLegion ;
14785: CALL 14290 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
14789: LD_INT 126
14791: PPUSH
14792: LD_INT 18
14794: PPUSH
14795: LD_INT 2
14797: PPUSH
14798: CALL_OW 331
// DialogueOff ;
14802: CALL_OW 7
// spotLegion := true ;
14806: LD_ADDR_EXP 10
14810: PUSH
14811: LD_INT 1
14813: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
14814: LD_EXP 36
14818: PPUSH
14819: LD_INT 164
14821: PPUSH
14822: LD_INT 47
14824: PPUSH
14825: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
14829: LD_EXP 36
14833: PPUSH
14834: LD_INT 179
14836: PPUSH
14837: LD_INT 20
14839: PPUSH
14840: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
14844: LD_INT 35
14846: PPUSH
14847: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
14851: LD_EXP 36
14855: PPUSH
14856: LD_INT 60
14858: PUSH
14859: EMPTY
14860: LIST
14861: PPUSH
14862: CALL_OW 72
14866: NOT
14867: PUSH
14868: LD_EXP 36
14872: PPUSH
14873: LD_INT 50
14875: PUSH
14876: EMPTY
14877: LIST
14878: PPUSH
14879: CALL_OW 72
14883: NOT
14884: OR
14885: IFFALSE 14844
// if not UnitFilter ( legEForces , [ f_ok ] ) then
14887: LD_EXP 36
14891: PPUSH
14892: LD_INT 50
14894: PUSH
14895: EMPTY
14896: LIST
14897: PPUSH
14898: CALL_OW 72
14902: NOT
14903: IFFALSE 14907
// exit ;
14905: GO 14930
// legForces := legForces union legEForces ;
14907: LD_ADDR_EXP 35
14911: PUSH
14912: LD_EXP 35
14916: PUSH
14917: LD_EXP 36
14921: UNION
14922: ST_TO_ADDR
// legEForces := [ ] ;
14923: LD_ADDR_EXP 36
14927: PUSH
14928: EMPTY
14929: ST_TO_ADDR
// end ;
14930: PPOPN 3
14932: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
14933: LD_EXP 19
14937: PUSH
14938: LD_EXP 21
14942: PUSH
14943: LD_EXP 22
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: LD_INT 23
14954: PPUSH
14955: CALL 10661 0 2
14959: AND
14960: PUSH
14961: LD_EXP 9
14965: NOT
14966: AND
14967: PUSH
14968: LD_EXP 10
14972: NOT
14973: AND
14974: IFFALSE 15481
14976: GO 14978
14978: DISABLE
14979: LD_INT 0
14981: PPUSH
14982: PPUSH
14983: PPUSH
// begin uc_side := 8 ;
14984: LD_ADDR_OWVAR 20
14988: PUSH
14989: LD_INT 8
14991: ST_TO_ADDR
// uc_nation := nation_american ;
14992: LD_ADDR_OWVAR 21
14996: PUSH
14997: LD_INT 1
14999: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15000: LD_INT 3
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: LD_INT 9
15011: PPUSH
15012: LD_INT 90
15014: PPUSH
15015: CALL 23989 0 5
// veh := CreateVehicle ;
15019: LD_ADDR_VAR 0 3
15023: PUSH
15024: CALL_OW 45
15028: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15029: LD_ADDR_EXP 41
15033: PUSH
15034: LD_EXP 41
15038: PPUSH
15039: LD_VAR 0 3
15043: PPUSH
15044: CALL 56851 0 2
15048: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
15049: LD_VAR 0 3
15053: PPUSH
15054: LD_INT 3
15056: PPUSH
15057: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_INT 224
15068: PPUSH
15069: LD_INT 57
15071: PPUSH
15072: LD_INT 0
15074: PPUSH
15075: CALL_OW 48
// uc_nation := nation_arabian ;
15079: LD_ADDR_OWVAR 21
15083: PUSH
15084: LD_INT 2
15086: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15087: LD_INT 0
15089: PPUSH
15090: LD_INT 6
15092: PUSH
15093: LD_INT 7
15095: PUSH
15096: LD_INT 8
15098: PUSH
15099: LD_INT 9
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: PUSH
15108: LD_OWVAR 67
15112: ARRAY
15113: PPUSH
15114: CALL_OW 383
// un := CreateHuman ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: CALL_OW 44
15127: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15128: LD_ADDR_EXP 36
15132: PUSH
15133: LD_EXP 36
15137: PPUSH
15138: LD_VAR 0 2
15142: PPUSH
15143: CALL 56851 0 2
15147: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15148: LD_VAR 0 2
15152: PPUSH
15153: LD_VAR 0 3
15157: PPUSH
15158: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15162: LD_INT 0
15164: PPUSH
15165: LD_INT 6
15167: PUSH
15168: LD_INT 7
15170: PUSH
15171: LD_INT 8
15173: PUSH
15174: LD_INT 9
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: PUSH
15183: LD_OWVAR 67
15187: ARRAY
15188: PPUSH
15189: CALL_OW 381
// for i := 1 to 3 do
15193: LD_ADDR_VAR 0 1
15197: PUSH
15198: DOUBLE
15199: LD_INT 1
15201: DEC
15202: ST_TO_ADDR
15203: LD_INT 3
15205: PUSH
15206: FOR_TO
15207: IFFALSE 15296
// begin un := CreateHuman ;
15209: LD_ADDR_VAR 0 2
15213: PUSH
15214: CALL_OW 44
15218: ST_TO_ADDR
// if i = 1 then
15219: LD_VAR 0 1
15223: PUSH
15224: LD_INT 1
15226: EQUAL
15227: IFFALSE 15241
// SetClass ( un , class_sniper ) ;
15229: LD_VAR 0 2
15233: PPUSH
15234: LD_INT 5
15236: PPUSH
15237: CALL_OW 336
// legEForces := Join ( legEForces , un ) ;
15241: LD_ADDR_EXP 36
15245: PUSH
15246: LD_EXP 36
15250: PPUSH
15251: LD_VAR 0 2
15255: PPUSH
15256: CALL 56851 0 2
15260: ST_TO_ADDR
// SetDir ( un , 3 ) ;
15261: LD_VAR 0 2
15265: PPUSH
15266: LD_INT 3
15268: PPUSH
15269: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
15273: LD_VAR 0 2
15277: PPUSH
15278: LD_INT 224
15280: PPUSH
15281: LD_INT 57
15283: PPUSH
15284: LD_INT 4
15286: PPUSH
15287: LD_INT 0
15289: PPUSH
15290: CALL_OW 50
// end ;
15294: GO 15206
15296: POP
15297: POP
// wait ( 0 0$01 ) ;
15298: LD_INT 35
15300: PPUSH
15301: CALL_OW 67
// DialogueOn ;
15305: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
15309: LD_INT 224
15311: PPUSH
15312: LD_INT 57
15314: PPUSH
15315: LD_INT 2
15317: PPUSH
15318: LD_INT 16
15320: NEG
15321: PPUSH
15322: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
15326: LD_INT 224
15328: PPUSH
15329: LD_INT 57
15331: PPUSH
15332: CALL_OW 86
// TalkAboutLegion ;
15336: CALL 14290 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
15340: LD_INT 224
15342: PPUSH
15343: LD_INT 57
15345: PPUSH
15346: LD_INT 2
15348: PPUSH
15349: CALL_OW 331
// DialogueOff ;
15353: CALL_OW 7
// spotLegion := true ;
15357: LD_ADDR_EXP 10
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
15365: LD_EXP 36
15369: PPUSH
15370: LD_INT 164
15372: PPUSH
15373: LD_INT 47
15375: PPUSH
15376: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
15380: LD_EXP 36
15384: PPUSH
15385: LD_INT 179
15387: PPUSH
15388: LD_INT 20
15390: PPUSH
15391: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
15395: LD_INT 35
15397: PPUSH
15398: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
15402: LD_EXP 36
15406: PPUSH
15407: LD_INT 60
15409: PUSH
15410: EMPTY
15411: LIST
15412: PPUSH
15413: CALL_OW 72
15417: NOT
15418: PUSH
15419: LD_EXP 36
15423: PPUSH
15424: LD_INT 50
15426: PUSH
15427: EMPTY
15428: LIST
15429: PPUSH
15430: CALL_OW 72
15434: NOT
15435: OR
15436: IFFALSE 15395
// if not UnitFilter ( legEForces , [ f_ok ] ) then
15438: LD_EXP 36
15442: PPUSH
15443: LD_INT 50
15445: PUSH
15446: EMPTY
15447: LIST
15448: PPUSH
15449: CALL_OW 72
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 15481
// legForces := legForces union legEForces ;
15458: LD_ADDR_EXP 35
15462: PUSH
15463: LD_EXP 35
15467: PUSH
15468: LD_EXP 36
15472: UNION
15473: ST_TO_ADDR
// legEForces := [ ] ;
15474: LD_ADDR_EXP 36
15478: PUSH
15479: EMPTY
15480: ST_TO_ADDR
// end ;
15481: PPOPN 3
15483: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) ) and IsOk ( Heike ) and IsOk ( Omar ) and not spotByLegion do
15484: LD_EXP 19
15488: PUSH
15489: LD_INT 8
15491: PPUSH
15492: LD_EXP 22
15496: PPUSH
15497: CALL_OW 292
15501: PUSH
15502: LD_INT 8
15504: PPUSH
15505: LD_EXP 21
15509: PPUSH
15510: CALL_OW 292
15514: OR
15515: AND
15516: PUSH
15517: LD_EXP 21
15521: PPUSH
15522: CALL_OW 302
15526: AND
15527: PUSH
15528: LD_EXP 22
15532: PPUSH
15533: CALL_OW 302
15537: AND
15538: PUSH
15539: LD_EXP 9
15543: NOT
15544: AND
15545: IFFALSE 15686
15547: GO 15549
15549: DISABLE
// begin DialogueOn ;
15550: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
15554: LD_EXP 34
15558: PPUSH
15559: LD_STRING DF-Spot-1
15561: PPUSH
15562: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
15566: LD_EXP 21
15570: PPUSH
15571: LD_STRING DH-Spot-2
15573: PPUSH
15574: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
15578: LD_EXP 34
15582: PPUSH
15583: LD_STRING DF-Spot-3
15585: PPUSH
15586: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
15590: LD_EXP 21
15594: PPUSH
15595: LD_STRING DH-Spot-4
15597: PPUSH
15598: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
15602: LD_EXP 22
15606: PPUSH
15607: LD_STRING DOm-Spot-5
15609: PPUSH
15610: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
15614: LD_EXP 34
15618: PPUSH
15619: LD_STRING DF-Spot-6
15621: PPUSH
15622: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
15626: LD_EXP 34
15630: PPUSH
15631: LD_STRING DF-Spot-7
15633: PPUSH
15634: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
15638: LD_EXP 34
15642: PPUSH
15643: LD_STRING DF-Spot-8
15645: PPUSH
15646: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
15650: LD_EXP 21
15654: PPUSH
15655: LD_STRING DH-Spot-9
15657: PPUSH
15658: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
15662: LD_EXP 34
15666: PPUSH
15667: LD_STRING DF-Spot-10
15669: PPUSH
15670: CALL_OW 94
// DialogueOff ;
15674: CALL_OW 7
// spotByLegion := true ;
15678: LD_ADDR_EXP 9
15682: PUSH
15683: LD_INT 1
15685: ST_TO_ADDR
// end ;
15686: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
15687: LD_EXP 19
15691: PUSH
15692: LD_EXP 9
15696: PUSH
15697: LD_EXP 10
15701: OR
15702: AND
15703: IFFALSE 15715
15705: GO 15707
15707: DISABLE
// ChangeMissionObjectives ( O3 ) ;
15708: LD_STRING O3
15710: PPUSH
15711: CALL_OW 337
15715: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
15716: LD_EXP 19
15720: PUSH
15721: LD_INT 22
15723: PUSH
15724: LD_INT 8
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 21
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 50
15743: PUSH
15744: EMPTY
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: PPUSH
15752: CALL_OW 69
15756: PUSH
15757: LD_INT 0
15759: EQUAL
15760: AND
15761: IFFALSE 15845
15763: GO 15765
15765: DISABLE
// begin legScriptActive := false ;
15766: LD_ADDR_EXP 4
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
// legionDestroyed := true ;
15774: LD_ADDR_EXP 12
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// DialogueOn ;
15782: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
15786: LD_EXP 34
15790: PPUSH
15791: LD_STRING DF-LegDes-1
15793: PPUSH
15794: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
15798: LD_EXP 21
15802: PPUSH
15803: LD_STRING DH-LegDes-2
15805: PPUSH
15806: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
15810: LD_EXP 34
15814: PPUSH
15815: LD_STRING DF-LegDes-3
15817: PPUSH
15818: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
15822: LD_EXP 21
15826: PPUSH
15827: LD_STRING DH-LegDes-4
15829: PPUSH
15830: CALL_OW 88
// DialogueOff ;
15834: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
15838: LD_STRING O5
15840: PPUSH
15841: CALL_OW 337
// end ;
15845: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
15846: LD_EXP 19
15850: PUSH
15851: LD_EXP 25
15855: PPUSH
15856: LD_INT 21
15858: PUSH
15859: LD_INT 1
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 50
15868: PUSH
15869: EMPTY
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 72
15880: PUSH
15881: LD_INT 6
15883: LESS
15884: AND
15885: IFFALSE 16116
15887: GO 15889
15889: DISABLE
15890: LD_INT 0
15892: PPUSH
15893: PPUSH
// begin amScriptActive := false ;
15894: LD_ADDR_EXP 3
15898: PUSH
15899: LD_INT 0
15901: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
15902: LD_ADDR_VAR 0 2
15906: PUSH
15907: LD_EXP 25
15911: PPUSH
15912: LD_INT 21
15914: PUSH
15915: LD_INT 1
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 50
15924: PUSH
15925: EMPTY
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 72
15936: ST_TO_ADDR
// for i in tmp do
15937: LD_ADDR_VAR 0 1
15941: PUSH
15942: LD_VAR 0 2
15946: PUSH
15947: FOR_IN
15948: IFFALSE 15976
// begin ComExit ( i ) ;
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL 57249 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
15959: LD_VAR 0 1
15963: PPUSH
15964: LD_INT 63
15966: PPUSH
15967: LD_INT 124
15969: PPUSH
15970: CALL_OW 171
// end ;
15974: GO 15947
15976: POP
15977: POP
// wait ( 0 0$2 ) ;
15978: LD_INT 70
15980: PPUSH
15981: CALL_OW 67
// americanDestroyed := true ;
15985: LD_ADDR_EXP 11
15989: PUSH
15990: LD_INT 1
15992: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15993: LD_INT 35
15995: PPUSH
15996: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16000: LD_ADDR_VAR 0 2
16004: PUSH
16005: LD_EXP 25
16009: PPUSH
16010: LD_INT 21
16012: PUSH
16013: LD_INT 1
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 50
16022: PUSH
16023: EMPTY
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PPUSH
16030: CALL_OW 72
16034: ST_TO_ADDR
// for i in tmp do
16035: LD_ADDR_VAR 0 1
16039: PUSH
16040: LD_VAR 0 2
16044: PUSH
16045: FOR_IN
16046: IFFALSE 16107
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
16048: LD_VAR 0 1
16052: PPUSH
16053: LD_INT 63
16055: PPUSH
16056: LD_INT 124
16058: PPUSH
16059: CALL_OW 307
16063: PUSH
16064: LD_VAR 0 1
16068: PPUSH
16069: LD_INT 25
16071: PPUSH
16072: CALL_OW 308
16076: OR
16077: IFFALSE 16090
// RemoveUnit ( i ) else
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 64
16088: GO 16105
// ComMoveXY ( i , 63 , 124 ) ;
16090: LD_VAR 0 1
16094: PPUSH
16095: LD_INT 63
16097: PPUSH
16098: LD_INT 124
16100: PPUSH
16101: CALL_OW 111
// end ;
16105: GO 16045
16107: POP
16108: POP
// until not tmp ;
16109: LD_VAR 0 2
16113: NOT
16114: IFFALSE 15993
// end ;
16116: PPOPN 2
16118: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
16119: LD_EXP 19
16123: PUSH
16124: LD_EXP 11
16128: AND
16129: PUSH
16130: LD_EXP 21
16134: PPUSH
16135: CALL_OW 302
16139: AND
16140: PUSH
16141: LD_EXP 22
16145: PPUSH
16146: CALL_OW 302
16150: AND
16151: IFFALSE 16641
16153: GO 16155
16155: DISABLE
16156: LD_INT 0
16158: PPUSH
16159: PPUSH
16160: PPUSH
// begin DialogueOn ;
16161: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
16165: LD_EXP 21
16169: PPUSH
16170: LD_STRING DH-Victory-1
16172: PPUSH
16173: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
16177: LD_EXP 22
16181: PPUSH
16182: LD_STRING DOm-Victory-2
16184: PPUSH
16185: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
16189: LD_EXP 22
16193: PPUSH
16194: LD_STRING DOm-Victory-3
16196: PPUSH
16197: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
16201: LD_EXP 21
16205: PPUSH
16206: LD_STRING DH-Victory-4
16208: PPUSH
16209: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
16213: LD_EXP 22
16217: PPUSH
16218: LD_STRING DOm-Victory-5
16220: PPUSH
16221: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
16225: LD_EXP 22
16229: PPUSH
16230: LD_STRING DOm-Victory-6
16232: PPUSH
16233: CALL_OW 88
// DialogueOff ;
16237: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
16241: LD_STRING O4
16243: PPUSH
16244: CALL_OW 337
// canFinish := true ;
16248: LD_ADDR_EXP 18
16252: PUSH
16253: LD_INT 1
16255: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
16256: LD_INT 24
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 424
// if not legionDestroyed then
16266: LD_EXP 12
16270: NOT
16271: IFFALSE 16641
// begin uc_nation := nation_arabian ;
16273: LD_ADDR_OWVAR 21
16277: PUSH
16278: LD_INT 2
16280: ST_TO_ADDR
// uc_side := 8 ;
16281: LD_ADDR_OWVAR 20
16285: PUSH
16286: LD_INT 8
16288: ST_TO_ADDR
// for i := 1 to 4 do
16289: LD_ADDR_VAR 0 1
16293: PUSH
16294: DOUBLE
16295: LD_INT 1
16297: DEC
16298: ST_TO_ADDR
16299: LD_INT 4
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16384
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16305: LD_INT 0
16307: PPUSH
16308: LD_INT 8
16310: PUSH
16311: LD_INT 9
16313: PUSH
16314: LD_INT 10
16316: PUSH
16317: LD_INT 10
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: PUSH
16326: LD_OWVAR 67
16330: ARRAY
16331: PPUSH
16332: CALL_OW 381
// un := CreateHuman ;
16336: LD_ADDR_VAR 0 2
16340: PUSH
16341: CALL_OW 44
16345: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16346: LD_VAR 0 2
16350: PPUSH
16351: LD_INT 3
16353: PPUSH
16354: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
16358: LD_VAR 0 2
16362: PPUSH
16363: LD_INT 26
16365: PPUSH
16366: LD_INT 0
16368: PPUSH
16369: CALL_OW 49
// ComCrawl ( un ) ;
16373: LD_VAR 0 2
16377: PPUSH
16378: CALL_OW 137
// end ;
16382: GO 16302
16384: POP
16385: POP
// for i := 1 to 3 do
16386: LD_ADDR_VAR 0 1
16390: PUSH
16391: DOUBLE
16392: LD_INT 1
16394: DEC
16395: ST_TO_ADDR
16396: LD_INT 3
16398: PUSH
16399: FOR_TO
16400: IFFALSE 16484
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16402: LD_INT 0
16404: PPUSH
16405: LD_INT 8
16407: PUSH
16408: LD_INT 9
16410: PUSH
16411: LD_INT 10
16413: PUSH
16414: LD_INT 10
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: PUSH
16423: LD_OWVAR 67
16427: ARRAY
16428: PPUSH
16429: CALL_OW 381
// un := CreateHuman ;
16433: LD_ADDR_VAR 0 2
16437: PUSH
16438: CALL_OW 44
16442: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
16443: LD_VAR 0 2
16447: PPUSH
16448: LD_INT 8
16450: PPUSH
16451: CALL_OW 336
// SetDir ( un , 3 ) ;
16455: LD_VAR 0 2
16459: PPUSH
16460: LD_INT 3
16462: PPUSH
16463: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
16467: LD_VAR 0 2
16471: PPUSH
16472: LD_INT 26
16474: PPUSH
16475: LD_INT 0
16477: PPUSH
16478: CALL_OW 49
// end ;
16482: GO 16399
16484: POP
16485: POP
// for i := 1 to 2 do
16486: LD_ADDR_VAR 0 1
16490: PUSH
16491: DOUBLE
16492: LD_INT 1
16494: DEC
16495: ST_TO_ADDR
16496: LD_INT 2
16498: PUSH
16499: FOR_TO
16500: IFFALSE 16639
// begin uc_side := 8 ;
16502: LD_ADDR_OWVAR 20
16506: PUSH
16507: LD_INT 8
16509: ST_TO_ADDR
// uc_nation := nation_american ;
16510: LD_ADDR_OWVAR 21
16514: PUSH
16515: LD_INT 1
16517: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16518: LD_INT 4
16520: PPUSH
16521: LD_INT 1
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: LD_INT 9
16529: PPUSH
16530: LD_INT 90
16532: PPUSH
16533: CALL 23989 0 5
// veh := CreateVehicle ;
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: CALL_OW 45
16546: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16547: LD_VAR 0 3
16551: PPUSH
16552: LD_INT 3
16554: PPUSH
16555: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
16559: LD_VAR 0 3
16563: PPUSH
16564: LD_INT 27
16566: PPUSH
16567: LD_INT 0
16569: PPUSH
16570: CALL_OW 49
// uc_nation := nation_arabian ;
16574: LD_ADDR_OWVAR 21
16578: PUSH
16579: LD_INT 2
16581: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
16582: LD_INT 0
16584: PPUSH
16585: LD_INT 8
16587: PUSH
16588: LD_INT 9
16590: PUSH
16591: LD_INT 10
16593: PUSH
16594: LD_INT 10
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: LD_OWVAR 67
16607: ARRAY
16608: PPUSH
16609: CALL_OW 383
// un := CreateHuman ;
16613: LD_ADDR_VAR 0 2
16617: PUSH
16618: CALL_OW 44
16622: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16623: LD_VAR 0 2
16627: PPUSH
16628: LD_VAR 0 3
16632: PPUSH
16633: CALL_OW 52
// end ;
16637: GO 16499
16639: POP
16640: POP
// end ; end ;
16641: PPOPN 3
16643: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
16644: LD_EXP 19
16648: PUSH
16649: LD_EXP 18
16653: AND
16654: PUSH
16655: LD_EXP 22
16659: PUSH
16660: EMPTY
16661: LIST
16662: PPUSH
16663: LD_INT 24
16665: PPUSH
16666: CALL 10661 0 2
16670: AND
16671: PUSH
16672: LD_EXP 21
16676: PUSH
16677: EMPTY
16678: LIST
16679: PPUSH
16680: LD_INT 24
16682: PPUSH
16683: CALL 10661 0 2
16687: AND
16688: IFFALSE 16867
16690: GO 16692
16692: DISABLE
// begin if tick <= 50 50$00 then
16693: LD_OWVAR 1
16697: PUSH
16698: LD_INT 105000
16700: LESSEQUAL
16701: IFFALSE 16710
// SetAchievement ( ACH_HSPEED_10 ) ;
16703: LD_STRING ACH_HSPEED_10
16705: PPUSH
16706: CALL_OW 543
// if legionDestroyed then
16710: LD_EXP 12
16714: IFFALSE 16728
// AddMedal ( med1 , 1 ) else
16716: LD_STRING med1
16718: PPUSH
16719: LD_INT 1
16721: PPUSH
16722: CALL_OW 101
16726: GO 16739
// AddMedal ( med1 , - 1 ) ;
16728: LD_STRING med1
16730: PPUSH
16731: LD_INT 1
16733: NEG
16734: PPUSH
16735: CALL_OW 101
// if tick <= [ 70 70$00 , 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
16739: LD_OWVAR 1
16743: PUSH
16744: LD_INT 147000
16746: PUSH
16747: LD_INT 126000
16749: PUSH
16750: LD_INT 105000
16752: PUSH
16753: LD_INT 94500
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: PUSH
16762: LD_OWVAR 67
16766: ARRAY
16767: LESSEQUAL
16768: IFFALSE 16782
// AddMedal ( med2 , 1 ) else
16770: LD_STRING med2
16772: PPUSH
16773: LD_INT 1
16775: PPUSH
16776: CALL_OW 101
16780: GO 16793
// AddMedal ( med2 , - 1 ) ;
16782: LD_STRING med2
16784: PPUSH
16785: LD_INT 1
16787: NEG
16788: PPUSH
16789: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasApes + hasDrugs >= 3 then
16793: LD_EXP 16
16797: PUSH
16798: LD_EXP 14
16802: PLUS
16803: PUSH
16804: LD_EXP 15
16808: PLUS
16809: PUSH
16810: LD_EXP 13
16814: PLUS
16815: PUSH
16816: LD_EXP 16
16820: PLUS
16821: PUSH
16822: LD_EXP 17
16826: PLUS
16827: PUSH
16828: LD_INT 3
16830: GREATEREQUAL
16831: IFFALSE 16845
// AddMedal ( med3 , 1 ) else
16833: LD_STRING med3
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 101
16843: GO 16856
// AddMedal ( med3 , - 1 ) ;
16845: LD_STRING med3
16847: PPUSH
16848: LD_INT 1
16850: NEG
16851: PPUSH
16852: CALL_OW 101
// GiveMedals ( MAIN ) ;
16856: LD_STRING MAIN
16858: PPUSH
16859: CALL_OW 102
// YouWin ;
16863: CALL_OW 103
// end ; end_of_file
16867: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL 77097 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
16877: LD_EXP 5
16881: PUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 255
16891: PUSH
16892: LD_INT 2
16894: EQUAL
16895: AND
16896: PUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL_OW 263
16906: PUSH
16907: LD_INT 5
16909: EQUAL
16910: PUSH
16911: LD_VAR 0 1
16915: PPUSH
16916: CALL_OW 257
16920: PUSH
16921: LD_INT 12
16923: PUSH
16924: LD_INT 15
16926: PUSH
16927: LD_INT 16
16929: PUSH
16930: LD_INT 17
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: IN
16939: OR
16940: AND
16941: IFFALSE 17011
// begin apeAmount := Dec ( apeAmount ) ;
16943: LD_ADDR_EXP 5
16947: PUSH
16948: LD_EXP 5
16952: PPUSH
16953: CALL 58234 0 1
16957: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
16958: LD_INT 35
16960: PPUSH
16961: LD_INT 2100
16963: PPUSH
16964: CALL_OW 12
16968: PPUSH
16969: CALL_OW 67
// uc_side := 0 ;
16973: LD_ADDR_OWVAR 20
16977: PUSH
16978: LD_INT 0
16980: ST_TO_ADDR
// uc_nation := nation_nature ;
16981: LD_ADDR_OWVAR 21
16985: PUSH
16986: LD_INT 0
16988: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
16989: LD_INT 0
16991: PPUSH
16992: CALL 53119 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
16996: CALL_OW 44
17000: PPUSH
17001: LD_INT 6
17003: PPUSH
17004: LD_INT 0
17006: PPUSH
17007: CALL_OW 49
// end ; if unit = Heike then
17011: LD_VAR 0 1
17015: PUSH
17016: LD_EXP 21
17020: EQUAL
17021: IFFALSE 17030
// YouLost ( Heike ) ;
17023: LD_STRING Heike
17025: PPUSH
17026: CALL_OW 104
// if unit = Omar then
17030: LD_VAR 0 1
17034: PUSH
17035: LD_EXP 22
17039: EQUAL
17040: IFFALSE 17049
// YouLost ( Omar ) ;
17042: LD_STRING Omar
17044: PPUSH
17045: CALL_OW 104
// if unit in amForces then
17049: LD_VAR 0 1
17053: PUSH
17054: LD_EXP 25
17058: IN
17059: IFFALSE 17077
// amForces := amForces diff unit ;
17061: LD_ADDR_EXP 25
17065: PUSH
17066: LD_EXP 25
17070: PUSH
17071: LD_VAR 0 1
17075: DIFF
17076: ST_TO_ADDR
// if unit in amTanks then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_EXP 30
17086: IN
17087: IFFALSE 17105
// amTanks := amTanks diff unit ;
17089: LD_ADDR_EXP 30
17093: PUSH
17094: LD_EXP 30
17098: PUSH
17099: LD_VAR 0 1
17103: DIFF
17104: ST_TO_ADDR
// if unit in amPatrol then
17105: LD_VAR 0 1
17109: PUSH
17110: LD_EXP 33
17114: IN
17115: IFFALSE 17133
// amPatrol := amPatrol diff unit ;
17117: LD_ADDR_EXP 33
17121: PUSH
17122: LD_EXP 33
17126: PUSH
17127: LD_VAR 0 1
17131: DIFF
17132: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 266
17142: PUSH
17143: LD_INT 32
17145: PUSH
17146: LD_INT 33
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: IN
17153: PUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 255
17163: PUSH
17164: LD_INT 1
17166: EQUAL
17167: AND
17168: IFFALSE 17231
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
17170: LD_ADDR_EXP 29
17174: PUSH
17175: LD_EXP 29
17179: PPUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: CALL_OW 266
17189: PUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 250
17199: PUSH
17200: LD_VAR 0 1
17204: PPUSH
17205: CALL_OW 251
17209: PUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 254
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: PPUSH
17226: CALL 56851 0 2
17230: ST_TO_ADDR
// if unit in legForces then
17231: LD_VAR 0 1
17235: PUSH
17236: LD_EXP 35
17240: IN
17241: IFFALSE 17259
// legForces := legForces diff unit ;
17243: LD_ADDR_EXP 35
17247: PUSH
17248: LD_EXP 35
17252: PUSH
17253: LD_VAR 0 1
17257: DIFF
17258: ST_TO_ADDR
// if unit in legTanks then
17259: LD_VAR 0 1
17263: PUSH
17264: LD_EXP 41
17268: IN
17269: IFFALSE 17287
// legTanks := legTanks diff unit ;
17271: LD_ADDR_EXP 41
17275: PUSH
17276: LD_EXP 41
17280: PUSH
17281: LD_VAR 0 1
17285: DIFF
17286: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
17287: LD_VAR 0 1
17291: PPUSH
17292: CALL_OW 266
17296: PUSH
17297: LD_INT 32
17299: PUSH
17300: LD_INT 33
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: IN
17307: PUSH
17308: LD_VAR 0 1
17312: PPUSH
17313: CALL_OW 255
17317: PUSH
17318: LD_INT 8
17320: EQUAL
17321: AND
17322: IFFALSE 17385
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
17324: LD_ADDR_EXP 40
17328: PUSH
17329: LD_EXP 40
17333: PPUSH
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 266
17343: PUSH
17344: LD_VAR 0 1
17348: PPUSH
17349: CALL_OW 250
17353: PUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 251
17363: PUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 254
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PPUSH
17380: CALL 56851 0 2
17384: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 264
17394: PUSH
17395: LD_INT 13
17397: EQUAL
17398: PUSH
17399: LD_VAR 0 1
17403: PPUSH
17404: CALL_OW 255
17408: PUSH
17409: LD_INT 1
17411: EQUAL
17412: AND
17413: IFFALSE 17448
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
17415: LD_ADDR_EXP 27
17419: PUSH
17420: LD_EXP 27
17424: PPUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: LD_INT 2
17433: PUSH
17434: LD_INT 13
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: PPUSH
17443: CALL 56851 0 2
17447: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 264
17457: PUSH
17458: LD_INT 88
17460: EQUAL
17461: PUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 255
17471: PUSH
17472: LD_INT 8
17474: EQUAL
17475: AND
17476: IFFALSE 17511
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
17478: LD_ADDR_EXP 38
17482: PUSH
17483: LD_EXP 38
17487: PPUSH
17488: LD_INT 13
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 88
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PPUSH
17506: CALL 56851 0 2
17510: ST_TO_ADDR
// if unit = amCargo then
17511: LD_VAR 0 1
17515: PUSH
17516: LD_EXP 32
17520: EQUAL
17521: IFFALSE 17564
// begin amCargo := 0 ;
17523: LD_ADDR_EXP 32
17527: PUSH
17528: LD_INT 0
17530: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
17531: LD_ADDR_EXP 27
17535: PUSH
17536: LD_EXP 27
17540: PPUSH
17541: LD_INT 2
17543: PUSH
17544: LD_INT 1
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 12
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL 56851 0 2
17563: ST_TO_ADDR
// end ; if unit = legCargo then
17564: LD_VAR 0 1
17568: PUSH
17569: LD_EXP 42
17573: EQUAL
17574: IFFALSE 17617
// begin legCargo := 0 ;
17576: LD_ADDR_EXP 42
17580: PUSH
17581: LD_INT 0
17583: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
17584: LD_ADDR_EXP 38
17588: PUSH
17589: LD_EXP 38
17593: PPUSH
17594: LD_INT 13
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: LD_INT 32
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: PPUSH
17612: CALL 56851 0 2
17616: ST_TO_ADDR
// end ; end ;
17617: PPOPN 1
17619: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
17620: LD_VAR 0 2
17624: PUSH
17625: LD_INT 3
17627: PUSH
17628: LD_INT 22
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 25
17644: PUSH
17645: LD_INT 3
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: IN
17661: PUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 266
17671: PUSH
17672: LD_INT 3
17674: EQUAL
17675: AND
17676: PUSH
17677: LD_VAR 0 2
17681: PPUSH
17682: CALL_OW 256
17686: PUSH
17687: LD_INT 1000
17689: LESS
17690: AND
17691: IFFALSE 17717
// begin SetTag ( un , 0 ) ;
17693: LD_VAR 0 2
17697: PPUSH
17698: LD_INT 0
17700: PPUSH
17701: CALL_OW 109
// SetLives ( un , 1000 ) ;
17705: LD_VAR 0 2
17709: PPUSH
17710: LD_INT 1000
17712: PPUSH
17713: CALL_OW 234
// end ; end ;
17717: PPOPN 2
17719: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
17720: LD_INT 0
17722: PPUSH
17723: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
17724: LD_VAR 0 1
17728: PPUSH
17729: LD_VAR 0 2
17733: PPUSH
17734: CALL 77217 0 2
// side := GetSide ( fac ) ;
17738: LD_ADDR_VAR 0 3
17742: PUSH
17743: LD_VAR 0 2
17747: PPUSH
17748: CALL_OW 255
17752: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
17753: LD_ADDR_VAR 0 4
17757: PUSH
17758: LD_VAR 0 1
17762: PPUSH
17763: CALL_OW 264
17767: ST_TO_ADDR
// if side = 1 then
17768: LD_VAR 0 3
17772: PUSH
17773: LD_INT 1
17775: EQUAL
17776: IFFALSE 17885
// begin amConstructList := Delete ( amConstructList , 1 ) ;
17778: LD_ADDR_EXP 27
17782: PUSH
17783: LD_EXP 27
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: CALL_OW 3
17795: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
17796: LD_VAR 0 4
17800: PUSH
17801: LD_INT 12
17803: EQUAL
17804: PUSH
17805: LD_EXP 32
17809: NOT
17810: AND
17811: IFFALSE 17823
// amCargo := veh ;
17813: LD_ADDR_EXP 32
17817: PUSH
17818: LD_VAR 0 1
17822: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
17823: LD_VAR 0 4
17827: PUSH
17828: LD_INT 12
17830: PUSH
17831: LD_INT 13
17833: PUSH
17834: LD_INT 14
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: IN
17842: IFFALSE 17846
// exit ;
17844: GO 17998
// amTanks := Join ( amTanks , veh ) ;
17846: LD_ADDR_EXP 30
17850: PUSH
17851: LD_EXP 30
17855: PPUSH
17856: LD_VAR 0 1
17860: PPUSH
17861: CALL 56851 0 2
17865: ST_TO_ADDR
// wait ( 0 0$01 ) ;
17866: LD_INT 35
17868: PPUSH
17869: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
17873: LD_VAR 0 1
17877: PPUSH
17878: LD_INT 12
17880: PPUSH
17881: CALL_OW 173
// end ; if side = 8 then
17885: LD_VAR 0 3
17889: PUSH
17890: LD_INT 8
17892: EQUAL
17893: IFFALSE 17998
// begin legConstructList := Delete ( legConstructList , 1 ) ;
17895: LD_ADDR_EXP 38
17899: PUSH
17900: LD_EXP 38
17904: PPUSH
17905: LD_INT 1
17907: PPUSH
17908: CALL_OW 3
17912: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
17913: LD_VAR 0 4
17917: PUSH
17918: LD_INT 32
17920: EQUAL
17921: PUSH
17922: LD_EXP 42
17926: NOT
17927: AND
17928: IFFALSE 17940
// legCargo := veh ;
17930: LD_ADDR_EXP 42
17934: PUSH
17935: LD_VAR 0 1
17939: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
17940: LD_VAR 0 4
17944: PUSH
17945: LD_INT 32
17947: PUSH
17948: LD_INT 88
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: IN
17955: IFFALSE 17959
// exit ;
17957: GO 17998
// legTanks := Join ( legTanks , veh ) ;
17959: LD_ADDR_EXP 41
17963: PUSH
17964: LD_EXP 41
17968: PPUSH
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL 56851 0 2
17978: ST_TO_ADDR
// wait ( 0 0$01 ) ;
17979: LD_INT 35
17981: PPUSH
17982: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_INT 15
17993: PPUSH
17994: CALL_OW 173
// end ; end ;
17998: PPOPN 4
18000: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
18001: LD_INT 0
18003: PPUSH
18004: PPUSH
18005: PPUSH
// begin side := GetSide ( driver ) ;
18006: LD_ADDR_VAR 0 7
18010: PUSH
18011: LD_VAR 0 1
18015: PPUSH
18016: CALL_OW 255
18020: ST_TO_ADDR
// if side = 1 and driver in amForces then
18021: LD_VAR 0 7
18025: PUSH
18026: LD_INT 1
18028: EQUAL
18029: PUSH
18030: LD_VAR 0 1
18034: PUSH
18035: LD_EXP 25
18039: IN
18040: AND
18041: IFFALSE 18253
// begin ComMoveToArea ( driver , amBaseArea ) ;
18043: LD_VAR 0 1
18047: PPUSH
18048: LD_INT 1
18050: PPUSH
18051: CALL_OW 113
// SetTag ( driver , tMech ) ;
18055: LD_VAR 0 1
18059: PPUSH
18060: LD_INT 7
18062: PPUSH
18063: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
18067: LD_ADDR_VAR 0 6
18071: PUSH
18072: LD_INT 1
18074: PPUSH
18075: LD_INT 22
18077: PUSH
18078: LD_VAR 0 7
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 30
18089: PUSH
18090: LD_INT 3
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 50
18099: PUSH
18100: EMPTY
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: PPUSH
18108: CALL_OW 70
18112: ST_TO_ADDR
// if fac then
18113: LD_VAR 0 6
18117: IFFALSE 18139
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
18119: LD_VAR 0 1
18123: PPUSH
18124: LD_VAR 0 6
18128: PUSH
18129: LD_INT 1
18131: ARRAY
18132: PPUSH
18133: CALL_OW 180
// exit ;
18137: GO 18473
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
18139: LD_ADDR_VAR 0 5
18143: PUSH
18144: LD_INT 1
18146: PPUSH
18147: LD_INT 22
18149: PUSH
18150: LD_VAR 0 7
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 30
18164: PUSH
18165: LD_INT 4
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 30
18174: PUSH
18175: LD_INT 5
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 3
18189: PUSH
18190: LD_INT 62
18192: PUSH
18193: EMPTY
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 50
18202: PUSH
18203: EMPTY
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: PPUSH
18212: CALL_OW 70
18216: ST_TO_ADDR
// if arm then
18217: LD_VAR 0 5
18221: IFFALSE 18253
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
18223: LD_VAR 0 1
18227: PPUSH
18228: LD_VAR 0 5
18232: PUSH
18233: LD_INT 1
18235: ARRAY
18236: PPUSH
18237: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
18241: LD_VAR 0 1
18245: PPUSH
18246: LD_INT 1
18248: PPUSH
18249: CALL_OW 183
// end ; end ; if side = 8 then
18253: LD_VAR 0 7
18257: PUSH
18258: LD_INT 8
18260: EQUAL
18261: IFFALSE 18473
// begin ComMoveToArea ( driver , legBaseArea ) ;
18263: LD_VAR 0 1
18267: PPUSH
18268: LD_INT 2
18270: PPUSH
18271: CALL_OW 113
// SetTag ( driver , tMech ) ;
18275: LD_VAR 0 1
18279: PPUSH
18280: LD_INT 7
18282: PPUSH
18283: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
18287: LD_ADDR_VAR 0 6
18291: PUSH
18292: LD_INT 2
18294: PPUSH
18295: LD_INT 22
18297: PUSH
18298: LD_VAR 0 7
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 30
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 50
18319: PUSH
18320: EMPTY
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 70
18332: ST_TO_ADDR
// if fac then
18333: LD_VAR 0 6
18337: IFFALSE 18359
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
18339: LD_VAR 0 1
18343: PPUSH
18344: LD_VAR 0 6
18348: PUSH
18349: LD_INT 1
18351: ARRAY
18352: PPUSH
18353: CALL_OW 180
// exit ;
18357: GO 18473
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
18359: LD_ADDR_VAR 0 5
18363: PUSH
18364: LD_INT 2
18366: PPUSH
18367: LD_INT 22
18369: PUSH
18370: LD_VAR 0 7
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 4
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 30
18394: PUSH
18395: LD_INT 5
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 3
18409: PUSH
18410: LD_INT 62
18412: PUSH
18413: EMPTY
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 50
18422: PUSH
18423: EMPTY
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: PPUSH
18432: CALL_OW 70
18436: ST_TO_ADDR
// if arm then
18437: LD_VAR 0 5
18441: IFFALSE 18473
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
18443: LD_VAR 0 1
18447: PPUSH
18448: LD_VAR 0 5
18452: PUSH
18453: LD_INT 1
18455: ARRAY
18456: PPUSH
18457: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 1
18468: PPUSH
18469: CALL_OW 183
// end ; end ; end ;
18473: PPOPN 7
18475: END
// on BuildingComplete ( b ) do var side , type ;
18476: LD_INT 0
18478: PPUSH
18479: PPUSH
// begin side := GetSide ( b ) ;
18480: LD_ADDR_VAR 0 2
18484: PUSH
18485: LD_VAR 0 1
18489: PPUSH
18490: CALL_OW 255
18494: ST_TO_ADDR
// type := GetBType ( b ) ;
18495: LD_ADDR_VAR 0 3
18499: PUSH
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 266
18509: ST_TO_ADDR
// if side = 1 then
18510: LD_VAR 0 2
18514: PUSH
18515: LD_INT 1
18517: EQUAL
18518: IFFALSE 18568
// begin amBuildings := Delete ( amBuildings , 1 ) ;
18520: LD_ADDR_EXP 29
18524: PUSH
18525: LD_EXP 29
18529: PPUSH
18530: LD_INT 1
18532: PPUSH
18533: CALL_OW 3
18537: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
18538: LD_VAR 0 3
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 4
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: IN
18557: IFFALSE 18568
// ComUpgrade ( b ) ;
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 146
// end ; end ;
18568: PPOPN 3
18570: END
// on ResearchComplete ( tech , lab ) do var side ;
18571: LD_INT 0
18573: PPUSH
// begin side := GetSide ( lab ) ;
18574: LD_ADDR_VAR 0 3
18578: PUSH
18579: LD_VAR 0 2
18583: PPUSH
18584: CALL_OW 255
18588: ST_TO_ADDR
// if side = 1 then
18589: LD_VAR 0 3
18593: PUSH
18594: LD_INT 1
18596: EQUAL
18597: IFFALSE 18615
// amTech := amTech diff tech ;
18599: LD_ADDR_EXP 26
18603: PUSH
18604: LD_EXP 26
18608: PUSH
18609: LD_VAR 0 1
18613: DIFF
18614: ST_TO_ADDR
// end ;
18615: PPOPN 3
18617: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL 77201 0 1
// end ;
18627: PPOPN 1
18629: END
// on SailEvent ( event ) do begin case event of end ;
18630: LD_VAR 0 1
18634: PUSH
18635: POP
// end ;
18636: PPOPN 1
18638: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
18639: LD_EXP 19
18643: NOT
18644: IFFALSE 18648
// exit ;
18646: GO 18746
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
18648: LD_EXP 8
18652: NOT
18653: PUSH
18654: LD_VAR 0 1
18658: PUSH
18659: LD_INT 2
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: IN
18669: AND
18670: PUSH
18671: LD_VAR 0 2
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: IN
18686: AND
18687: IFFALSE 18697
// spotByAmerican := true ;
18689: LD_ADDR_EXP 8
18693: PUSH
18694: LD_INT 1
18696: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
18697: LD_EXP 9
18701: NOT
18702: PUSH
18703: LD_VAR 0 1
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 8
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: IN
18718: AND
18719: PUSH
18720: LD_VAR 0 2
18724: PUSH
18725: LD_INT 8
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: IN
18735: AND
18736: IFFALSE 18746
// spotByLegion := true ;
18738: LD_ADDR_EXP 9
18742: PUSH
18743: LD_INT 1
18745: ST_TO_ADDR
// end ; end_of_file
18746: PPOPN 2
18748: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
18749: LD_EXP 7
18753: IFFALSE 18860
18755: GO 18757
18757: DISABLE
18758: LD_INT 0
18760: PPUSH
18761: PPUSH
// begin enable ;
18762: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
18763: LD_INT 35
18765: PPUSH
18766: LD_INT 385
18768: PPUSH
18769: CALL_OW 12
18773: PPUSH
18774: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
18778: LD_ADDR_VAR 0 2
18782: PUSH
18783: LD_INT 16
18785: PUSH
18786: LD_INT 17
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
18793: LD_ADDR_VAR 0 1
18797: PUSH
18798: LD_VAR 0 2
18802: PUSH
18803: LD_INT 1
18805: PPUSH
18806: LD_VAR 0 2
18810: PPUSH
18811: CALL 21251 0 1
18815: PPUSH
18816: CALL_OW 12
18820: ARRAY
18821: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 435
18831: PUSH
18832: LD_INT 8
18834: LESS
18835: IFFALSE 18860
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
18837: LD_INT 1
18839: PPUSH
18840: LD_INT 5
18842: PPUSH
18843: CALL_OW 12
18847: PPUSH
18848: LD_VAR 0 1
18852: PPUSH
18853: LD_INT 1
18855: PPUSH
18856: CALL_OW 55
// end ;
18860: PPOPN 2
18862: END
// every 0 0$20 trigger tick < [ 7 7$00 , 6 6$00 , 5 5$00 , 4 4$30 ] [ Difficulty ] and spotArabianBase do
18863: LD_OWVAR 1
18867: PUSH
18868: LD_INT 14700
18870: PUSH
18871: LD_INT 12600
18873: PUSH
18874: LD_INT 10500
18876: PUSH
18877: LD_INT 9450
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: LD_OWVAR 67
18890: ARRAY
18891: LESS
18892: PUSH
18893: LD_EXP 7
18897: AND
18898: IFFALSE 18931
18900: GO 18902
18902: DISABLE
// begin enable ;
18903: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
18904: LD_INT 1
18906: PPUSH
18907: LD_INT 5
18909: PPUSH
18910: CALL_OW 12
18914: PPUSH
18915: LD_INT 218
18917: PPUSH
18918: LD_INT 92
18920: PPUSH
18921: LD_INT 11
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 56
// end ;
18931: END
// every 0 0$55 trigger IsOk ( amBase ) do
18932: LD_INT 2
18934: PPUSH
18935: CALL_OW 302
18939: IFFALSE 18979
18941: GO 18943
18943: DISABLE
// begin enable ;
18944: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
18945: LD_INT 13
18947: PPUSH
18948: CALL_OW 435
18952: PUSH
18953: LD_INT 3
18955: LESS
18956: IFFALSE 18979
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
18958: LD_INT 1
18960: PPUSH
18961: LD_INT 5
18963: PPUSH
18964: CALL_OW 12
18968: PPUSH
18969: LD_INT 13
18971: PPUSH
18972: LD_INT 1
18974: PPUSH
18975: CALL_OW 55
// end ;
18979: END
// every 1 1$05 trigger IsOk ( legBase ) do
18980: LD_INT 38
18982: PPUSH
18983: CALL_OW 302
18987: IFFALSE 19027
18989: GO 18991
18991: DISABLE
// begin enable ;
18992: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
18993: LD_INT 14
18995: PPUSH
18996: CALL_OW 435
19000: PUSH
19001: LD_INT 3
19003: LESS
19004: IFFALSE 19027
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
19006: LD_INT 1
19008: PPUSH
19009: LD_INT 5
19011: PPUSH
19012: CALL_OW 12
19016: PPUSH
19017: LD_INT 14
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: CALL_OW 55
// end ; end_of_file
19027: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
19028: LD_EXP 19
19032: PUSH
19033: LD_EXP 22
19037: PPUSH
19038: CALL_OW 257
19042: PUSH
19043: LD_INT 11
19045: NONEQUAL
19046: AND
19047: PUSH
19048: LD_EXP 7
19052: AND
19053: PUSH
19054: LD_INT 85
19056: PPUSH
19057: CALL_OW 302
19061: AND
19062: IFFALSE 19082
19064: GO 19066
19066: DISABLE
// begin Query ( QSheik ) ;
19067: LD_STRING QSheik
19069: PPUSH
19070: CALL_OW 97
// omarCanChangeClass := true ;
19074: LD_ADDR_EXP 20
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// end ;
19082: END
// every 0 0$2 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
19083: LD_EXP 20
19087: PUSH
19088: LD_EXP 22
19092: PPUSH
19093: CALL_OW 257
19097: PUSH
19098: LD_INT 11
19100: NONEQUAL
19101: AND
19102: PUSH
19103: LD_EXP 22
19107: PPUSH
19108: CALL_OW 310
19112: PUSH
19113: LD_INT 85
19115: EQUAL
19116: AND
19117: IFFALSE 19148
19119: GO 19121
19121: DISABLE
// begin enable ;
19122: ENABLE
// if Query ( QChangeClass ) = 1 then
19123: LD_STRING QChangeClass
19125: PPUSH
19126: CALL_OW 97
19130: PUSH
19131: LD_INT 1
19133: EQUAL
19134: IFFALSE 19148
// SetClass ( Omar , class_desert_warior ) ;
19136: LD_EXP 22
19140: PPUSH
19141: LD_INT 11
19143: PPUSH
19144: CALL_OW 336
// end ; end_of_file
19148: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19149: LD_INT 0
19151: PPUSH
19152: PPUSH
// if exist_mode then
19153: LD_VAR 0 2
19157: IFFALSE 19182
// unit := CreateCharacter ( prefix & ident ) else
19159: LD_ADDR_VAR 0 5
19163: PUSH
19164: LD_VAR 0 3
19168: PUSH
19169: LD_VAR 0 1
19173: STR
19174: PPUSH
19175: CALL_OW 34
19179: ST_TO_ADDR
19180: GO 19197
// unit := NewCharacter ( ident ) ;
19182: LD_ADDR_VAR 0 5
19186: PUSH
19187: LD_VAR 0 1
19191: PPUSH
19192: CALL_OW 25
19196: ST_TO_ADDR
// result := unit ;
19197: LD_ADDR_VAR 0 4
19201: PUSH
19202: LD_VAR 0 5
19206: ST_TO_ADDR
// end ;
19207: LD_VAR 0 4
19211: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19212: LD_INT 0
19214: PPUSH
19215: PPUSH
// if not side or not nation then
19216: LD_VAR 0 1
19220: NOT
19221: PUSH
19222: LD_VAR 0 2
19226: NOT
19227: OR
19228: IFFALSE 19232
// exit ;
19230: GO 20000
// case nation of nation_american :
19232: LD_VAR 0 2
19236: PUSH
19237: LD_INT 1
19239: DOUBLE
19240: EQUAL
19241: IFTRUE 19245
19243: GO 19459
19245: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19246: LD_ADDR_VAR 0 4
19250: PUSH
19251: LD_INT 35
19253: PUSH
19254: LD_INT 45
19256: PUSH
19257: LD_INT 46
19259: PUSH
19260: LD_INT 47
19262: PUSH
19263: LD_INT 82
19265: PUSH
19266: LD_INT 83
19268: PUSH
19269: LD_INT 84
19271: PUSH
19272: LD_INT 85
19274: PUSH
19275: LD_INT 86
19277: PUSH
19278: LD_INT 1
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 6
19286: PUSH
19287: LD_INT 15
19289: PUSH
19290: LD_INT 16
19292: PUSH
19293: LD_INT 7
19295: PUSH
19296: LD_INT 12
19298: PUSH
19299: LD_INT 13
19301: PUSH
19302: LD_INT 10
19304: PUSH
19305: LD_INT 14
19307: PUSH
19308: LD_INT 20
19310: PUSH
19311: LD_INT 21
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: LD_INT 25
19319: PUSH
19320: LD_INT 32
19322: PUSH
19323: LD_INT 27
19325: PUSH
19326: LD_INT 36
19328: PUSH
19329: LD_INT 69
19331: PUSH
19332: LD_INT 39
19334: PUSH
19335: LD_INT 34
19337: PUSH
19338: LD_INT 40
19340: PUSH
19341: LD_INT 48
19343: PUSH
19344: LD_INT 49
19346: PUSH
19347: LD_INT 50
19349: PUSH
19350: LD_INT 51
19352: PUSH
19353: LD_INT 52
19355: PUSH
19356: LD_INT 53
19358: PUSH
19359: LD_INT 54
19361: PUSH
19362: LD_INT 55
19364: PUSH
19365: LD_INT 56
19367: PUSH
19368: LD_INT 57
19370: PUSH
19371: LD_INT 58
19373: PUSH
19374: LD_INT 59
19376: PUSH
19377: LD_INT 60
19379: PUSH
19380: LD_INT 61
19382: PUSH
19383: LD_INT 62
19385: PUSH
19386: LD_INT 80
19388: PUSH
19389: LD_INT 82
19391: PUSH
19392: LD_INT 83
19394: PUSH
19395: LD_INT 84
19397: PUSH
19398: LD_INT 85
19400: PUSH
19401: LD_INT 86
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: ST_TO_ADDR
19457: GO 19924
19459: LD_INT 2
19461: DOUBLE
19462: EQUAL
19463: IFTRUE 19467
19465: GO 19693
19467: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: LD_INT 35
19475: PUSH
19476: LD_INT 45
19478: PUSH
19479: LD_INT 46
19481: PUSH
19482: LD_INT 47
19484: PUSH
19485: LD_INT 82
19487: PUSH
19488: LD_INT 83
19490: PUSH
19491: LD_INT 84
19493: PUSH
19494: LD_INT 85
19496: PUSH
19497: LD_INT 87
19499: PUSH
19500: LD_INT 70
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 11
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 4
19514: PUSH
19515: LD_INT 5
19517: PUSH
19518: LD_INT 6
19520: PUSH
19521: LD_INT 15
19523: PUSH
19524: LD_INT 18
19526: PUSH
19527: LD_INT 7
19529: PUSH
19530: LD_INT 17
19532: PUSH
19533: LD_INT 8
19535: PUSH
19536: LD_INT 20
19538: PUSH
19539: LD_INT 21
19541: PUSH
19542: LD_INT 22
19544: PUSH
19545: LD_INT 72
19547: PUSH
19548: LD_INT 26
19550: PUSH
19551: LD_INT 69
19553: PUSH
19554: LD_INT 39
19556: PUSH
19557: LD_INT 40
19559: PUSH
19560: LD_INT 41
19562: PUSH
19563: LD_INT 42
19565: PUSH
19566: LD_INT 43
19568: PUSH
19569: LD_INT 48
19571: PUSH
19572: LD_INT 49
19574: PUSH
19575: LD_INT 50
19577: PUSH
19578: LD_INT 51
19580: PUSH
19581: LD_INT 52
19583: PUSH
19584: LD_INT 53
19586: PUSH
19587: LD_INT 54
19589: PUSH
19590: LD_INT 55
19592: PUSH
19593: LD_INT 56
19595: PUSH
19596: LD_INT 60
19598: PUSH
19599: LD_INT 61
19601: PUSH
19602: LD_INT 62
19604: PUSH
19605: LD_INT 66
19607: PUSH
19608: LD_INT 67
19610: PUSH
19611: LD_INT 68
19613: PUSH
19614: LD_INT 81
19616: PUSH
19617: LD_INT 82
19619: PUSH
19620: LD_INT 83
19622: PUSH
19623: LD_INT 84
19625: PUSH
19626: LD_INT 85
19628: PUSH
19629: LD_INT 87
19631: PUSH
19632: LD_INT 88
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: ST_TO_ADDR
19691: GO 19924
19693: LD_INT 3
19695: DOUBLE
19696: EQUAL
19697: IFTRUE 19701
19699: GO 19923
19701: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19702: LD_ADDR_VAR 0 4
19706: PUSH
19707: LD_INT 46
19709: PUSH
19710: LD_INT 47
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: LD_INT 82
19721: PUSH
19722: LD_INT 83
19724: PUSH
19725: LD_INT 84
19727: PUSH
19728: LD_INT 85
19730: PUSH
19731: LD_INT 86
19733: PUSH
19734: LD_INT 11
19736: PUSH
19737: LD_INT 9
19739: PUSH
19740: LD_INT 20
19742: PUSH
19743: LD_INT 19
19745: PUSH
19746: LD_INT 21
19748: PUSH
19749: LD_INT 24
19751: PUSH
19752: LD_INT 22
19754: PUSH
19755: LD_INT 25
19757: PUSH
19758: LD_INT 28
19760: PUSH
19761: LD_INT 29
19763: PUSH
19764: LD_INT 30
19766: PUSH
19767: LD_INT 31
19769: PUSH
19770: LD_INT 37
19772: PUSH
19773: LD_INT 38
19775: PUSH
19776: LD_INT 32
19778: PUSH
19779: LD_INT 27
19781: PUSH
19782: LD_INT 33
19784: PUSH
19785: LD_INT 69
19787: PUSH
19788: LD_INT 39
19790: PUSH
19791: LD_INT 34
19793: PUSH
19794: LD_INT 40
19796: PUSH
19797: LD_INT 71
19799: PUSH
19800: LD_INT 23
19802: PUSH
19803: LD_INT 44
19805: PUSH
19806: LD_INT 48
19808: PUSH
19809: LD_INT 49
19811: PUSH
19812: LD_INT 50
19814: PUSH
19815: LD_INT 51
19817: PUSH
19818: LD_INT 52
19820: PUSH
19821: LD_INT 53
19823: PUSH
19824: LD_INT 54
19826: PUSH
19827: LD_INT 55
19829: PUSH
19830: LD_INT 56
19832: PUSH
19833: LD_INT 57
19835: PUSH
19836: LD_INT 58
19838: PUSH
19839: LD_INT 59
19841: PUSH
19842: LD_INT 63
19844: PUSH
19845: LD_INT 64
19847: PUSH
19848: LD_INT 65
19850: PUSH
19851: LD_INT 82
19853: PUSH
19854: LD_INT 83
19856: PUSH
19857: LD_INT 84
19859: PUSH
19860: LD_INT 85
19862: PUSH
19863: LD_INT 86
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: ST_TO_ADDR
19921: GO 19924
19923: POP
// if state > - 1 and state < 3 then
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: GREATER
19933: PUSH
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 3
19941: LESS
19942: AND
19943: IFFALSE 20000
// for i in result do
19945: LD_ADDR_VAR 0 5
19949: PUSH
19950: LD_VAR 0 4
19954: PUSH
19955: FOR_IN
19956: IFFALSE 19998
// if GetTech ( i , side ) <> state then
19958: LD_VAR 0 5
19962: PPUSH
19963: LD_VAR 0 1
19967: PPUSH
19968: CALL_OW 321
19972: PUSH
19973: LD_VAR 0 3
19977: NONEQUAL
19978: IFFALSE 19996
// result := result diff i ;
19980: LD_ADDR_VAR 0 4
19984: PUSH
19985: LD_VAR 0 4
19989: PUSH
19990: LD_VAR 0 5
19994: DIFF
19995: ST_TO_ADDR
19996: GO 19955
19998: POP
19999: POP
// end ;
20000: LD_VAR 0 4
20004: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20005: LD_INT 0
20007: PPUSH
20008: PPUSH
20009: PPUSH
// result := true ;
20010: LD_ADDR_VAR 0 3
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20018: LD_ADDR_VAR 0 5
20022: PUSH
20023: LD_VAR 0 2
20027: PPUSH
20028: CALL_OW 480
20032: ST_TO_ADDR
// if not tmp then
20033: LD_VAR 0 5
20037: NOT
20038: IFFALSE 20042
// exit ;
20040: GO 20091
// for i in tmp do
20042: LD_ADDR_VAR 0 4
20046: PUSH
20047: LD_VAR 0 5
20051: PUSH
20052: FOR_IN
20053: IFFALSE 20089
// if GetTech ( i , side ) <> state_researched then
20055: LD_VAR 0 4
20059: PPUSH
20060: LD_VAR 0 1
20064: PPUSH
20065: CALL_OW 321
20069: PUSH
20070: LD_INT 2
20072: NONEQUAL
20073: IFFALSE 20087
// begin result := false ;
20075: LD_ADDR_VAR 0 3
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// exit ;
20083: POP
20084: POP
20085: GO 20091
// end ;
20087: GO 20052
20089: POP
20090: POP
// end ;
20091: LD_VAR 0 3
20095: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20096: LD_INT 0
20098: PPUSH
20099: PPUSH
20100: PPUSH
20101: PPUSH
20102: PPUSH
20103: PPUSH
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
20109: PPUSH
20110: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20111: LD_VAR 0 1
20115: NOT
20116: PUSH
20117: LD_VAR 0 1
20121: PPUSH
20122: CALL_OW 257
20126: PUSH
20127: LD_INT 9
20129: NONEQUAL
20130: OR
20131: IFFALSE 20135
// exit ;
20133: GO 20708
// side := GetSide ( unit ) ;
20135: LD_ADDR_VAR 0 9
20139: PUSH
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 255
20149: ST_TO_ADDR
// tech_space := tech_spacanom ;
20150: LD_ADDR_VAR 0 12
20154: PUSH
20155: LD_INT 29
20157: ST_TO_ADDR
// tech_time := tech_taurad ;
20158: LD_ADDR_VAR 0 13
20162: PUSH
20163: LD_INT 28
20165: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20166: LD_ADDR_VAR 0 11
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 310
20180: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20181: LD_VAR 0 11
20185: PPUSH
20186: CALL_OW 247
20190: PUSH
20191: LD_INT 2
20193: EQUAL
20194: IFFALSE 20198
// exit ;
20196: GO 20708
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20198: LD_ADDR_VAR 0 8
20202: PUSH
20203: LD_INT 81
20205: PUSH
20206: LD_VAR 0 9
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: LD_INT 21
20220: PUSH
20221: LD_INT 3
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: ST_TO_ADDR
// if not tmp then
20241: LD_VAR 0 8
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20708
// if in_unit then
20250: LD_VAR 0 11
20254: IFFALSE 20278
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20256: LD_ADDR_VAR 0 10
20260: PUSH
20261: LD_VAR 0 8
20265: PPUSH
20266: LD_VAR 0 11
20270: PPUSH
20271: CALL_OW 74
20275: ST_TO_ADDR
20276: GO 20298
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20278: LD_ADDR_VAR 0 10
20282: PUSH
20283: LD_VAR 0 8
20287: PPUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: CALL_OW 74
20297: ST_TO_ADDR
// if not enemy then
20298: LD_VAR 0 10
20302: NOT
20303: IFFALSE 20307
// exit ;
20305: GO 20708
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20307: LD_VAR 0 11
20311: PUSH
20312: LD_VAR 0 11
20316: PPUSH
20317: LD_VAR 0 10
20321: PPUSH
20322: CALL_OW 296
20326: PUSH
20327: LD_INT 13
20329: GREATER
20330: AND
20331: PUSH
20332: LD_VAR 0 1
20336: PPUSH
20337: LD_VAR 0 10
20341: PPUSH
20342: CALL_OW 296
20346: PUSH
20347: LD_INT 12
20349: GREATER
20350: OR
20351: IFFALSE 20355
// exit ;
20353: GO 20708
// missile := [ 1 ] ;
20355: LD_ADDR_VAR 0 14
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: EMPTY
20364: LIST
20365: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20366: LD_VAR 0 9
20370: PPUSH
20371: LD_VAR 0 12
20375: PPUSH
20376: CALL_OW 325
20380: IFFALSE 20409
// missile := Replace ( missile , missile + 1 , 2 ) ;
20382: LD_ADDR_VAR 0 14
20386: PUSH
20387: LD_VAR 0 14
20391: PPUSH
20392: LD_VAR 0 14
20396: PUSH
20397: LD_INT 1
20399: PLUS
20400: PPUSH
20401: LD_INT 2
20403: PPUSH
20404: CALL_OW 1
20408: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20409: LD_VAR 0 9
20413: PPUSH
20414: LD_VAR 0 13
20418: PPUSH
20419: CALL_OW 325
20423: PUSH
20424: LD_VAR 0 10
20428: PPUSH
20429: CALL_OW 255
20433: PPUSH
20434: LD_VAR 0 13
20438: PPUSH
20439: CALL_OW 325
20443: NOT
20444: AND
20445: IFFALSE 20474
// missile := Replace ( missile , missile + 1 , 3 ) ;
20447: LD_ADDR_VAR 0 14
20451: PUSH
20452: LD_VAR 0 14
20456: PPUSH
20457: LD_VAR 0 14
20461: PUSH
20462: LD_INT 1
20464: PLUS
20465: PPUSH
20466: LD_INT 3
20468: PPUSH
20469: CALL_OW 1
20473: ST_TO_ADDR
// if missile < 2 then
20474: LD_VAR 0 14
20478: PUSH
20479: LD_INT 2
20481: LESS
20482: IFFALSE 20486
// exit ;
20484: GO 20708
// x := GetX ( enemy ) ;
20486: LD_ADDR_VAR 0 4
20490: PUSH
20491: LD_VAR 0 10
20495: PPUSH
20496: CALL_OW 250
20500: ST_TO_ADDR
// y := GetY ( enemy ) ;
20501: LD_ADDR_VAR 0 5
20505: PUSH
20506: LD_VAR 0 10
20510: PPUSH
20511: CALL_OW 251
20515: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20516: LD_ADDR_VAR 0 6
20520: PUSH
20521: LD_VAR 0 4
20525: PUSH
20526: LD_INT 1
20528: NEG
20529: PPUSH
20530: LD_INT 1
20532: PPUSH
20533: CALL_OW 12
20537: PLUS
20538: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20539: LD_ADDR_VAR 0 7
20543: PUSH
20544: LD_VAR 0 5
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PPUSH
20553: LD_INT 1
20555: PPUSH
20556: CALL_OW 12
20560: PLUS
20561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20562: LD_VAR 0 6
20566: PPUSH
20567: LD_VAR 0 7
20571: PPUSH
20572: CALL_OW 488
20576: NOT
20577: IFFALSE 20599
// begin _x := x ;
20579: LD_ADDR_VAR 0 6
20583: PUSH
20584: LD_VAR 0 4
20588: ST_TO_ADDR
// _y := y ;
20589: LD_ADDR_VAR 0 7
20593: PUSH
20594: LD_VAR 0 5
20598: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: LD_INT 1
20606: PPUSH
20607: LD_VAR 0 14
20611: PPUSH
20612: CALL_OW 12
20616: ST_TO_ADDR
// case i of 1 :
20617: LD_VAR 0 3
20621: PUSH
20622: LD_INT 1
20624: DOUBLE
20625: EQUAL
20626: IFTRUE 20630
20628: GO 20647
20630: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20631: LD_VAR 0 1
20635: PPUSH
20636: LD_VAR 0 10
20640: PPUSH
20641: CALL_OW 115
20645: GO 20708
20647: LD_INT 2
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20677
20655: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20656: LD_VAR 0 1
20660: PPUSH
20661: LD_VAR 0 6
20665: PPUSH
20666: LD_VAR 0 7
20670: PPUSH
20671: CALL_OW 153
20675: GO 20708
20677: LD_INT 3
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20707
20685: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20686: LD_VAR 0 1
20690: PPUSH
20691: LD_VAR 0 6
20695: PPUSH
20696: LD_VAR 0 7
20700: PPUSH
20701: CALL_OW 154
20705: GO 20708
20707: POP
// end ;
20708: LD_VAR 0 2
20712: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20713: LD_INT 0
20715: PPUSH
20716: PPUSH
20717: PPUSH
20718: PPUSH
20719: PPUSH
20720: PPUSH
// if not unit or not building then
20721: LD_VAR 0 1
20725: NOT
20726: PUSH
20727: LD_VAR 0 2
20731: NOT
20732: OR
20733: IFFALSE 20737
// exit ;
20735: GO 20895
// x := GetX ( building ) ;
20737: LD_ADDR_VAR 0 5
20741: PUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: CALL_OW 250
20751: ST_TO_ADDR
// y := GetY ( building ) ;
20752: LD_ADDR_VAR 0 6
20756: PUSH
20757: LD_VAR 0 2
20761: PPUSH
20762: CALL_OW 251
20766: ST_TO_ADDR
// for i = 0 to 5 do
20767: LD_ADDR_VAR 0 4
20771: PUSH
20772: DOUBLE
20773: LD_INT 0
20775: DEC
20776: ST_TO_ADDR
20777: LD_INT 5
20779: PUSH
20780: FOR_TO
20781: IFFALSE 20893
// begin _x := ShiftX ( x , i , 3 ) ;
20783: LD_ADDR_VAR 0 7
20787: PUSH
20788: LD_VAR 0 5
20792: PPUSH
20793: LD_VAR 0 4
20797: PPUSH
20798: LD_INT 3
20800: PPUSH
20801: CALL_OW 272
20805: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20806: LD_ADDR_VAR 0 8
20810: PUSH
20811: LD_VAR 0 6
20815: PPUSH
20816: LD_VAR 0 4
20820: PPUSH
20821: LD_INT 3
20823: PPUSH
20824: CALL_OW 273
20828: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20829: LD_VAR 0 7
20833: PPUSH
20834: LD_VAR 0 8
20838: PPUSH
20839: CALL_OW 488
20843: NOT
20844: IFFALSE 20848
// continue ;
20846: GO 20780
// if HexInfo ( _x , _y ) = 0 then
20848: LD_VAR 0 7
20852: PPUSH
20853: LD_VAR 0 8
20857: PPUSH
20858: CALL_OW 428
20862: PUSH
20863: LD_INT 0
20865: EQUAL
20866: IFFALSE 20891
// begin ComMoveXY ( unit , _x , _y ) ;
20868: LD_VAR 0 1
20872: PPUSH
20873: LD_VAR 0 7
20877: PPUSH
20878: LD_VAR 0 8
20882: PPUSH
20883: CALL_OW 111
// exit ;
20887: POP
20888: POP
20889: GO 20895
// end ; end ;
20891: GO 20780
20893: POP
20894: POP
// end ;
20895: LD_VAR 0 3
20899: RET
// export function ScanBase ( side , base_area ) ; begin
20900: LD_INT 0
20902: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20903: LD_ADDR_VAR 0 3
20907: PUSH
20908: LD_VAR 0 2
20912: PPUSH
20913: LD_INT 81
20915: PUSH
20916: LD_VAR 0 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PPUSH
20925: CALL_OW 70
20929: ST_TO_ADDR
// end ;
20930: LD_VAR 0 3
20934: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
20935: LD_INT 0
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
// result := false ;
20941: LD_ADDR_VAR 0 2
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// side := GetSide ( unit ) ;
20949: LD_ADDR_VAR 0 3
20953: PUSH
20954: LD_VAR 0 1
20958: PPUSH
20959: CALL_OW 255
20963: ST_TO_ADDR
// nat := GetNation ( unit ) ;
20964: LD_ADDR_VAR 0 4
20968: PUSH
20969: LD_VAR 0 1
20973: PPUSH
20974: CALL_OW 248
20978: ST_TO_ADDR
// case nat of 1 :
20979: LD_VAR 0 4
20983: PUSH
20984: LD_INT 1
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21003
20992: POP
// tech := tech_lassight ; 2 :
20993: LD_ADDR_VAR 0 5
20997: PUSH
20998: LD_INT 12
21000: ST_TO_ADDR
21001: GO 21042
21003: LD_INT 2
21005: DOUBLE
21006: EQUAL
21007: IFTRUE 21011
21009: GO 21022
21011: POP
// tech := tech_mortar ; 3 :
21012: LD_ADDR_VAR 0 5
21016: PUSH
21017: LD_INT 41
21019: ST_TO_ADDR
21020: GO 21042
21022: LD_INT 3
21024: DOUBLE
21025: EQUAL
21026: IFTRUE 21030
21028: GO 21041
21030: POP
// tech := tech_bazooka ; end ;
21031: LD_ADDR_VAR 0 5
21035: PUSH
21036: LD_INT 44
21038: ST_TO_ADDR
21039: GO 21042
21041: POP
// if Researched ( side , tech ) then
21042: LD_VAR 0 3
21046: PPUSH
21047: LD_VAR 0 5
21051: PPUSH
21052: CALL_OW 325
21056: IFFALSE 21083
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21058: LD_ADDR_VAR 0 2
21062: PUSH
21063: LD_INT 5
21065: PUSH
21066: LD_INT 8
21068: PUSH
21069: LD_INT 9
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: PUSH
21077: LD_VAR 0 4
21081: ARRAY
21082: ST_TO_ADDR
// end ;
21083: LD_VAR 0 2
21087: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21088: LD_INT 0
21090: PPUSH
21091: PPUSH
21092: PPUSH
// if not mines then
21093: LD_VAR 0 2
21097: NOT
21098: IFFALSE 21102
// exit ;
21100: GO 21246
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21102: LD_ADDR_VAR 0 5
21106: PUSH
21107: LD_INT 81
21109: PUSH
21110: LD_VAR 0 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: LD_INT 21
21124: PUSH
21125: LD_INT 3
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PPUSH
21140: CALL_OW 69
21144: ST_TO_ADDR
// for i in mines do
21145: LD_ADDR_VAR 0 4
21149: PUSH
21150: LD_VAR 0 2
21154: PUSH
21155: FOR_IN
21156: IFFALSE 21244
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21158: LD_VAR 0 4
21162: PUSH
21163: LD_INT 1
21165: ARRAY
21166: PPUSH
21167: LD_VAR 0 4
21171: PUSH
21172: LD_INT 2
21174: ARRAY
21175: PPUSH
21176: CALL_OW 458
21180: NOT
21181: IFFALSE 21185
// continue ;
21183: GO 21155
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21185: LD_VAR 0 4
21189: PUSH
21190: LD_INT 1
21192: ARRAY
21193: PPUSH
21194: LD_VAR 0 4
21198: PUSH
21199: LD_INT 2
21201: ARRAY
21202: PPUSH
21203: CALL_OW 428
21207: PUSH
21208: LD_VAR 0 5
21212: IN
21213: IFFALSE 21242
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21215: LD_VAR 0 4
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PPUSH
21224: LD_VAR 0 4
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 1
21237: PPUSH
21238: CALL_OW 456
// end ;
21242: GO 21155
21244: POP
21245: POP
// end ;
21246: LD_VAR 0 3
21250: RET
// export function Count ( array ) ; begin
21251: LD_INT 0
21253: PPUSH
// result := array + 0 ;
21254: LD_ADDR_VAR 0 2
21258: PUSH
21259: LD_VAR 0 1
21263: PUSH
21264: LD_INT 0
21266: PLUS
21267: ST_TO_ADDR
// end ;
21268: LD_VAR 0 2
21272: RET
// export function IsEmpty ( building ) ; begin
21273: LD_INT 0
21275: PPUSH
// if not building then
21276: LD_VAR 0 1
21280: NOT
21281: IFFALSE 21285
// exit ;
21283: GO 21328
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21285: LD_ADDR_VAR 0 2
21289: PUSH
21290: LD_VAR 0 1
21294: PUSH
21295: LD_INT 22
21297: PUSH
21298: LD_VAR 0 1
21302: PPUSH
21303: CALL_OW 255
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 58
21314: PUSH
21315: EMPTY
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PPUSH
21322: CALL_OW 69
21326: IN
21327: ST_TO_ADDR
// end ;
21328: LD_VAR 0 2
21332: RET
// export function IsNotFull ( building ) ; var places ; begin
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
// if not building then
21337: LD_VAR 0 1
21341: NOT
21342: IFFALSE 21346
// exit ;
21344: GO 21374
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
21346: LD_ADDR_VAR 0 2
21350: PUSH
21351: LD_VAR 0 1
21355: PPUSH
21356: LD_INT 3
21358: PUSH
21359: LD_INT 62
21361: PUSH
21362: EMPTY
21363: LIST
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL_OW 72
21373: ST_TO_ADDR
// end ;
21374: LD_VAR 0 2
21378: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21379: LD_INT 0
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
// tmp := [ ] ;
21385: LD_ADDR_VAR 0 3
21389: PUSH
21390: EMPTY
21391: ST_TO_ADDR
// list := [ ] ;
21392: LD_ADDR_VAR 0 5
21396: PUSH
21397: EMPTY
21398: ST_TO_ADDR
// for i = 16 to 25 do
21399: LD_ADDR_VAR 0 4
21403: PUSH
21404: DOUBLE
21405: LD_INT 16
21407: DEC
21408: ST_TO_ADDR
21409: LD_INT 25
21411: PUSH
21412: FOR_TO
21413: IFFALSE 21486
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_INT 22
21427: PUSH
21428: LD_VAR 0 1
21432: PPUSH
21433: CALL_OW 255
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 91
21444: PUSH
21445: LD_VAR 0 1
21449: PUSH
21450: LD_INT 6
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 30
21460: PUSH
21461: LD_VAR 0 4
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: PUSH
21475: EMPTY
21476: LIST
21477: PPUSH
21478: CALL_OW 69
21482: ADD
21483: ST_TO_ADDR
21484: GO 21412
21486: POP
21487: POP
// for i = 1 to tmp do
21488: LD_ADDR_VAR 0 4
21492: PUSH
21493: DOUBLE
21494: LD_INT 1
21496: DEC
21497: ST_TO_ADDR
21498: LD_VAR 0 3
21502: PUSH
21503: FOR_TO
21504: IFFALSE 21592
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21506: LD_ADDR_VAR 0 5
21510: PUSH
21511: LD_VAR 0 5
21515: PUSH
21516: LD_VAR 0 3
21520: PUSH
21521: LD_VAR 0 4
21525: ARRAY
21526: PPUSH
21527: CALL_OW 266
21531: PUSH
21532: LD_VAR 0 3
21536: PUSH
21537: LD_VAR 0 4
21541: ARRAY
21542: PPUSH
21543: CALL_OW 250
21547: PUSH
21548: LD_VAR 0 3
21552: PUSH
21553: LD_VAR 0 4
21557: ARRAY
21558: PPUSH
21559: CALL_OW 251
21563: PUSH
21564: LD_VAR 0 3
21568: PUSH
21569: LD_VAR 0 4
21573: ARRAY
21574: PPUSH
21575: CALL_OW 254
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: ADD
21589: ST_TO_ADDR
21590: GO 21503
21592: POP
21593: POP
// result := list ;
21594: LD_ADDR_VAR 0 2
21598: PUSH
21599: LD_VAR 0 5
21603: ST_TO_ADDR
// end ;
21604: LD_VAR 0 2
21608: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21609: LD_INT 0
21611: PPUSH
21612: PPUSH
21613: PPUSH
21614: PPUSH
21615: PPUSH
21616: PPUSH
21617: PPUSH
// if not factory then
21618: LD_VAR 0 1
21622: NOT
21623: IFFALSE 21627
// exit ;
21625: GO 22220
// if control = control_apeman then
21627: LD_VAR 0 4
21631: PUSH
21632: LD_INT 5
21634: EQUAL
21635: IFFALSE 21744
// begin tmp := UnitsInside ( factory ) ;
21637: LD_ADDR_VAR 0 8
21641: PUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 313
21651: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21652: LD_VAR 0 8
21656: PPUSH
21657: LD_INT 25
21659: PUSH
21660: LD_INT 12
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PPUSH
21667: CALL_OW 72
21671: NOT
21672: IFFALSE 21682
// control := control_manual ;
21674: LD_ADDR_VAR 0 4
21678: PUSH
21679: LD_INT 1
21681: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21682: LD_ADDR_VAR 0 8
21686: PUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL 21379 0 1
21696: ST_TO_ADDR
// if tmp then
21697: LD_VAR 0 8
21701: IFFALSE 21744
// begin for i in tmp do
21703: LD_ADDR_VAR 0 7
21707: PUSH
21708: LD_VAR 0 8
21712: PUSH
21713: FOR_IN
21714: IFFALSE 21742
// if i [ 1 ] = b_ext_radio then
21716: LD_VAR 0 7
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: PUSH
21725: LD_INT 22
21727: EQUAL
21728: IFFALSE 21740
// begin control := control_remote ;
21730: LD_ADDR_VAR 0 4
21734: PUSH
21735: LD_INT 2
21737: ST_TO_ADDR
// break ;
21738: GO 21742
// end ;
21740: GO 21713
21742: POP
21743: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21744: LD_VAR 0 1
21748: PPUSH
21749: LD_VAR 0 2
21753: PPUSH
21754: LD_VAR 0 3
21758: PPUSH
21759: LD_VAR 0 4
21763: PPUSH
21764: LD_VAR 0 5
21768: PPUSH
21769: CALL_OW 448
21773: IFFALSE 21808
// begin result := [ chassis , engine , control , weapon ] ;
21775: LD_ADDR_VAR 0 6
21779: PUSH
21780: LD_VAR 0 2
21784: PUSH
21785: LD_VAR 0 3
21789: PUSH
21790: LD_VAR 0 4
21794: PUSH
21795: LD_VAR 0 5
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: ST_TO_ADDR
// exit ;
21806: GO 22220
// end ; _chassis := AvailableChassisList ( factory ) ;
21808: LD_ADDR_VAR 0 9
21812: PUSH
21813: LD_VAR 0 1
21817: PPUSH
21818: CALL_OW 475
21822: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21823: LD_ADDR_VAR 0 11
21827: PUSH
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 476
21837: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21838: LD_ADDR_VAR 0 12
21842: PUSH
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL_OW 477
21852: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21853: LD_ADDR_VAR 0 10
21857: PUSH
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 478
21867: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21868: LD_VAR 0 9
21872: NOT
21873: PUSH
21874: LD_VAR 0 11
21878: NOT
21879: OR
21880: PUSH
21881: LD_VAR 0 12
21885: NOT
21886: OR
21887: PUSH
21888: LD_VAR 0 10
21892: NOT
21893: OR
21894: IFFALSE 21929
// begin result := [ chassis , engine , control , weapon ] ;
21896: LD_ADDR_VAR 0 6
21900: PUSH
21901: LD_VAR 0 2
21905: PUSH
21906: LD_VAR 0 3
21910: PUSH
21911: LD_VAR 0 4
21915: PUSH
21916: LD_VAR 0 5
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: ST_TO_ADDR
// exit ;
21927: GO 22220
// end ; if not chassis in _chassis then
21929: LD_VAR 0 2
21933: PUSH
21934: LD_VAR 0 9
21938: IN
21939: NOT
21940: IFFALSE 21966
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
21942: LD_ADDR_VAR 0 2
21946: PUSH
21947: LD_VAR 0 9
21951: PUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_VAR 0 9
21959: PPUSH
21960: CALL_OW 12
21964: ARRAY
21965: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
21966: LD_VAR 0 2
21970: PPUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: CALL 22225 0 2
21980: NOT
21981: IFFALSE 22040
// repeat engine := _engine [ 1 ] ;
21983: LD_ADDR_VAR 0 3
21987: PUSH
21988: LD_VAR 0 11
21992: PUSH
21993: LD_INT 1
21995: ARRAY
21996: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
21997: LD_ADDR_VAR 0 11
22001: PUSH
22002: LD_VAR 0 11
22006: PPUSH
22007: LD_INT 1
22009: PPUSH
22010: CALL_OW 3
22014: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22015: LD_VAR 0 2
22019: PPUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: CALL 22225 0 2
22029: PUSH
22030: LD_VAR 0 11
22034: PUSH
22035: EMPTY
22036: EQUAL
22037: OR
22038: IFFALSE 21983
// if not control in _control then
22040: LD_VAR 0 4
22044: PUSH
22045: LD_VAR 0 12
22049: IN
22050: NOT
22051: IFFALSE 22077
// control := _control [ rand ( 1 , _control ) ] ;
22053: LD_ADDR_VAR 0 4
22057: PUSH
22058: LD_VAR 0 12
22062: PUSH
22063: LD_INT 1
22065: PPUSH
22066: LD_VAR 0 12
22070: PPUSH
22071: CALL_OW 12
22075: ARRAY
22076: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22077: LD_VAR 0 2
22081: PPUSH
22082: LD_VAR 0 5
22086: PPUSH
22087: CALL 22445 0 2
22091: NOT
22092: IFFALSE 22151
// repeat weapon := _weapon [ 1 ] ;
22094: LD_ADDR_VAR 0 5
22098: PUSH
22099: LD_VAR 0 10
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22108: LD_ADDR_VAR 0 10
22112: PUSH
22113: LD_VAR 0 10
22117: PPUSH
22118: LD_INT 1
22120: PPUSH
22121: CALL_OW 3
22125: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22126: LD_VAR 0 2
22130: PPUSH
22131: LD_VAR 0 5
22135: PPUSH
22136: CALL 22445 0 2
22140: PUSH
22141: LD_VAR 0 10
22145: PUSH
22146: EMPTY
22147: EQUAL
22148: OR
22149: IFFALSE 22094
// result := [ ] ;
22151: LD_ADDR_VAR 0 6
22155: PUSH
22156: EMPTY
22157: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22158: LD_VAR 0 1
22162: PPUSH
22163: LD_VAR 0 2
22167: PPUSH
22168: LD_VAR 0 3
22172: PPUSH
22173: LD_VAR 0 4
22177: PPUSH
22178: LD_VAR 0 5
22182: PPUSH
22183: CALL_OW 448
22187: IFFALSE 22220
// result := [ chassis , engine , control , weapon ] ;
22189: LD_ADDR_VAR 0 6
22193: PUSH
22194: LD_VAR 0 2
22198: PUSH
22199: LD_VAR 0 3
22203: PUSH
22204: LD_VAR 0 4
22208: PUSH
22209: LD_VAR 0 5
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: ST_TO_ADDR
// end ;
22220: LD_VAR 0 6
22224: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22225: LD_INT 0
22227: PPUSH
// if not chassis or not engine then
22228: LD_VAR 0 1
22232: NOT
22233: PUSH
22234: LD_VAR 0 2
22238: NOT
22239: OR
22240: IFFALSE 22244
// exit ;
22242: GO 22440
// case engine of engine_solar :
22244: LD_VAR 0 2
22248: PUSH
22249: LD_INT 2
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22295
22257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22258: LD_ADDR_VAR 0 3
22262: PUSH
22263: LD_INT 11
22265: PUSH
22266: LD_INT 12
22268: PUSH
22269: LD_INT 13
22271: PUSH
22272: LD_INT 14
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 2
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: ST_TO_ADDR
22293: GO 22424
22295: LD_INT 1
22297: DOUBLE
22298: EQUAL
22299: IFTRUE 22303
22301: GO 22365
22303: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22304: LD_ADDR_VAR 0 3
22308: PUSH
22309: LD_INT 11
22311: PUSH
22312: LD_INT 12
22314: PUSH
22315: LD_INT 13
22317: PUSH
22318: LD_INT 14
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 2
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: LD_INT 4
22332: PUSH
22333: LD_INT 5
22335: PUSH
22336: LD_INT 21
22338: PUSH
22339: LD_INT 23
22341: PUSH
22342: LD_INT 22
22344: PUSH
22345: LD_INT 24
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: ST_TO_ADDR
22363: GO 22424
22365: LD_INT 3
22367: DOUBLE
22368: EQUAL
22369: IFTRUE 22373
22371: GO 22423
22373: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22374: LD_ADDR_VAR 0 3
22378: PUSH
22379: LD_INT 13
22381: PUSH
22382: LD_INT 14
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 3
22390: PUSH
22391: LD_INT 4
22393: PUSH
22394: LD_INT 5
22396: PUSH
22397: LD_INT 21
22399: PUSH
22400: LD_INT 22
22402: PUSH
22403: LD_INT 23
22405: PUSH
22406: LD_INT 24
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: ST_TO_ADDR
22421: GO 22424
22423: POP
// result := ( chassis in result ) ;
22424: LD_ADDR_VAR 0 3
22428: PUSH
22429: LD_VAR 0 1
22433: PUSH
22434: LD_VAR 0 3
22438: IN
22439: ST_TO_ADDR
// end ;
22440: LD_VAR 0 3
22444: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22445: LD_INT 0
22447: PPUSH
// if not chassis or not weapon then
22448: LD_VAR 0 1
22452: NOT
22453: PUSH
22454: LD_VAR 0 2
22458: NOT
22459: OR
22460: IFFALSE 22464
// exit ;
22462: GO 23524
// case weapon of us_machine_gun :
22464: LD_VAR 0 2
22468: PUSH
22469: LD_INT 2
22471: DOUBLE
22472: EQUAL
22473: IFTRUE 22477
22475: GO 22507
22477: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22478: LD_ADDR_VAR 0 3
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: LD_INT 3
22491: PUSH
22492: LD_INT 4
22494: PUSH
22495: LD_INT 5
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: ST_TO_ADDR
22505: GO 23508
22507: LD_INT 3
22509: DOUBLE
22510: EQUAL
22511: IFTRUE 22515
22513: GO 22545
22515: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22516: LD_ADDR_VAR 0 3
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: LD_INT 3
22529: PUSH
22530: LD_INT 4
22532: PUSH
22533: LD_INT 5
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: ST_TO_ADDR
22543: GO 23508
22545: LD_INT 11
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22583
22553: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22554: LD_ADDR_VAR 0 3
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: LD_INT 4
22570: PUSH
22571: LD_INT 5
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: ST_TO_ADDR
22581: GO 23508
22583: LD_INT 4
22585: DOUBLE
22586: EQUAL
22587: IFTRUE 22591
22589: GO 22617
22591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22592: LD_ADDR_VAR 0 3
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 3
22602: PUSH
22603: LD_INT 4
22605: PUSH
22606: LD_INT 5
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: ST_TO_ADDR
22615: GO 23508
22617: LD_INT 5
22619: DOUBLE
22620: EQUAL
22621: IFTRUE 22625
22623: GO 22651
22625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22626: LD_ADDR_VAR 0 3
22630: PUSH
22631: LD_INT 2
22633: PUSH
22634: LD_INT 3
22636: PUSH
22637: LD_INT 4
22639: PUSH
22640: LD_INT 5
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: ST_TO_ADDR
22649: GO 23508
22651: LD_INT 9
22653: DOUBLE
22654: EQUAL
22655: IFTRUE 22659
22657: GO 22685
22659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22660: LD_ADDR_VAR 0 3
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: LD_INT 3
22670: PUSH
22671: LD_INT 4
22673: PUSH
22674: LD_INT 5
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: ST_TO_ADDR
22683: GO 23508
22685: LD_INT 7
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22693
22691: GO 22719
22693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22694: LD_ADDR_VAR 0 3
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 3
22704: PUSH
22705: LD_INT 4
22707: PUSH
22708: LD_INT 5
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: ST_TO_ADDR
22717: GO 23508
22719: LD_INT 12
22721: DOUBLE
22722: EQUAL
22723: IFTRUE 22727
22725: GO 22753
22727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22728: LD_ADDR_VAR 0 3
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: LD_INT 4
22741: PUSH
22742: LD_INT 5
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: ST_TO_ADDR
22751: GO 23508
22753: LD_INT 13
22755: DOUBLE
22756: EQUAL
22757: IFTRUE 22761
22759: GO 22787
22761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22762: LD_ADDR_VAR 0 3
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: LD_INT 4
22775: PUSH
22776: LD_INT 5
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: ST_TO_ADDR
22785: GO 23508
22787: LD_INT 14
22789: DOUBLE
22790: EQUAL
22791: IFTRUE 22795
22793: GO 22813
22795: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22796: LD_ADDR_VAR 0 3
22800: PUSH
22801: LD_INT 4
22803: PUSH
22804: LD_INT 5
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: ST_TO_ADDR
22811: GO 23508
22813: LD_INT 6
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 22839
22821: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22822: LD_ADDR_VAR 0 3
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: ST_TO_ADDR
22837: GO 23508
22839: LD_INT 10
22841: DOUBLE
22842: EQUAL
22843: IFTRUE 22847
22845: GO 22865
22847: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22848: LD_ADDR_VAR 0 3
22852: PUSH
22853: LD_INT 4
22855: PUSH
22856: LD_INT 5
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: ST_TO_ADDR
22863: GO 23508
22865: LD_INT 22
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22899
22873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22874: LD_ADDR_VAR 0 3
22878: PUSH
22879: LD_INT 11
22881: PUSH
22882: LD_INT 12
22884: PUSH
22885: LD_INT 13
22887: PUSH
22888: LD_INT 14
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: ST_TO_ADDR
22897: GO 23508
22899: LD_INT 23
22901: DOUBLE
22902: EQUAL
22903: IFTRUE 22907
22905: GO 22933
22907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
22908: LD_ADDR_VAR 0 3
22912: PUSH
22913: LD_INT 11
22915: PUSH
22916: LD_INT 12
22918: PUSH
22919: LD_INT 13
22921: PUSH
22922: LD_INT 14
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
22931: GO 23508
22933: LD_INT 24
22935: DOUBLE
22936: EQUAL
22937: IFTRUE 22941
22939: GO 22967
22941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
22942: LD_ADDR_VAR 0 3
22946: PUSH
22947: LD_INT 11
22949: PUSH
22950: LD_INT 12
22952: PUSH
22953: LD_INT 13
22955: PUSH
22956: LD_INT 14
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
22965: GO 23508
22967: LD_INT 30
22969: DOUBLE
22970: EQUAL
22971: IFTRUE 22975
22973: GO 23001
22975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
22976: LD_ADDR_VAR 0 3
22980: PUSH
22981: LD_INT 11
22983: PUSH
22984: LD_INT 12
22986: PUSH
22987: LD_INT 13
22989: PUSH
22990: LD_INT 14
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: ST_TO_ADDR
22999: GO 23508
23001: LD_INT 25
23003: DOUBLE
23004: EQUAL
23005: IFTRUE 23009
23007: GO 23027
23009: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: LD_INT 13
23017: PUSH
23018: LD_INT 14
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: ST_TO_ADDR
23025: GO 23508
23027: LD_INT 27
23029: DOUBLE
23030: EQUAL
23031: IFTRUE 23035
23033: GO 23053
23035: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23036: LD_ADDR_VAR 0 3
23040: PUSH
23041: LD_INT 13
23043: PUSH
23044: LD_INT 14
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: ST_TO_ADDR
23051: GO 23508
23053: LD_INT 92
23055: DOUBLE
23056: EQUAL
23057: IFTRUE 23061
23059: GO 23087
23061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23062: LD_ADDR_VAR 0 3
23066: PUSH
23067: LD_INT 11
23069: PUSH
23070: LD_INT 12
23072: PUSH
23073: LD_INT 13
23075: PUSH
23076: LD_INT 14
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: ST_TO_ADDR
23085: GO 23508
23087: LD_INT 28
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 23113
23095: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23096: LD_ADDR_VAR 0 3
23100: PUSH
23101: LD_INT 13
23103: PUSH
23104: LD_INT 14
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: ST_TO_ADDR
23111: GO 23508
23113: LD_INT 29
23115: DOUBLE
23116: EQUAL
23117: IFTRUE 23121
23119: GO 23139
23121: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23122: LD_ADDR_VAR 0 3
23126: PUSH
23127: LD_INT 13
23129: PUSH
23130: LD_INT 14
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: ST_TO_ADDR
23137: GO 23508
23139: LD_INT 31
23141: DOUBLE
23142: EQUAL
23143: IFTRUE 23147
23145: GO 23165
23147: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23148: LD_ADDR_VAR 0 3
23152: PUSH
23153: LD_INT 13
23155: PUSH
23156: LD_INT 14
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: ST_TO_ADDR
23163: GO 23508
23165: LD_INT 26
23167: DOUBLE
23168: EQUAL
23169: IFTRUE 23173
23171: GO 23191
23173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23174: LD_ADDR_VAR 0 3
23178: PUSH
23179: LD_INT 13
23181: PUSH
23182: LD_INT 14
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: ST_TO_ADDR
23189: GO 23508
23191: LD_INT 42
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23225
23199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_INT 21
23207: PUSH
23208: LD_INT 22
23210: PUSH
23211: LD_INT 23
23213: PUSH
23214: LD_INT 24
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: ST_TO_ADDR
23223: GO 23508
23225: LD_INT 43
23227: DOUBLE
23228: EQUAL
23229: IFTRUE 23233
23231: GO 23259
23233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 21
23241: PUSH
23242: LD_INT 22
23244: PUSH
23245: LD_INT 23
23247: PUSH
23248: LD_INT 24
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: ST_TO_ADDR
23257: GO 23508
23259: LD_INT 44
23261: DOUBLE
23262: EQUAL
23263: IFTRUE 23267
23265: GO 23293
23267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23268: LD_ADDR_VAR 0 3
23272: PUSH
23273: LD_INT 21
23275: PUSH
23276: LD_INT 22
23278: PUSH
23279: LD_INT 23
23281: PUSH
23282: LD_INT 24
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: ST_TO_ADDR
23291: GO 23508
23293: LD_INT 45
23295: DOUBLE
23296: EQUAL
23297: IFTRUE 23301
23299: GO 23327
23301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23302: LD_ADDR_VAR 0 3
23306: PUSH
23307: LD_INT 21
23309: PUSH
23310: LD_INT 22
23312: PUSH
23313: LD_INT 23
23315: PUSH
23316: LD_INT 24
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: ST_TO_ADDR
23325: GO 23508
23327: LD_INT 49
23329: DOUBLE
23330: EQUAL
23331: IFTRUE 23335
23333: GO 23361
23335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23336: LD_ADDR_VAR 0 3
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 22
23346: PUSH
23347: LD_INT 23
23349: PUSH
23350: LD_INT 24
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: ST_TO_ADDR
23359: GO 23508
23361: LD_INT 51
23363: DOUBLE
23364: EQUAL
23365: IFTRUE 23369
23367: GO 23395
23369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23370: LD_ADDR_VAR 0 3
23374: PUSH
23375: LD_INT 21
23377: PUSH
23378: LD_INT 22
23380: PUSH
23381: LD_INT 23
23383: PUSH
23384: LD_INT 24
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: ST_TO_ADDR
23393: GO 23508
23395: LD_INT 52
23397: DOUBLE
23398: EQUAL
23399: IFTRUE 23403
23401: GO 23429
23403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_INT 21
23411: PUSH
23412: LD_INT 22
23414: PUSH
23415: LD_INT 23
23417: PUSH
23418: LD_INT 24
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: ST_TO_ADDR
23427: GO 23508
23429: LD_INT 53
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23455
23437: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_INT 23
23445: PUSH
23446: LD_INT 24
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: ST_TO_ADDR
23453: GO 23508
23455: LD_INT 46
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23481
23463: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23464: LD_ADDR_VAR 0 3
23468: PUSH
23469: LD_INT 23
23471: PUSH
23472: LD_INT 24
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: ST_TO_ADDR
23479: GO 23508
23481: LD_INT 47
23483: DOUBLE
23484: EQUAL
23485: IFTRUE 23489
23487: GO 23507
23489: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23490: LD_ADDR_VAR 0 3
23494: PUSH
23495: LD_INT 23
23497: PUSH
23498: LD_INT 24
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: ST_TO_ADDR
23505: GO 23508
23507: POP
// result := ( chassis in result ) ;
23508: LD_ADDR_VAR 0 3
23512: PUSH
23513: LD_VAR 0 1
23517: PUSH
23518: LD_VAR 0 3
23522: IN
23523: ST_TO_ADDR
// end ;
23524: LD_VAR 0 3
23528: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23529: LD_INT 0
23531: PPUSH
23532: PPUSH
23533: PPUSH
23534: PPUSH
23535: PPUSH
23536: PPUSH
23537: PPUSH
// result := array ;
23538: LD_ADDR_VAR 0 5
23542: PUSH
23543: LD_VAR 0 1
23547: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23548: LD_VAR 0 1
23552: NOT
23553: PUSH
23554: LD_VAR 0 2
23558: NOT
23559: OR
23560: PUSH
23561: LD_VAR 0 3
23565: NOT
23566: OR
23567: PUSH
23568: LD_VAR 0 2
23572: PUSH
23573: LD_VAR 0 1
23577: GREATER
23578: OR
23579: PUSH
23580: LD_VAR 0 3
23584: PUSH
23585: LD_VAR 0 1
23589: GREATER
23590: OR
23591: IFFALSE 23595
// exit ;
23593: GO 23891
// if direction then
23595: LD_VAR 0 4
23599: IFFALSE 23663
// begin d := 1 ;
23601: LD_ADDR_VAR 0 9
23605: PUSH
23606: LD_INT 1
23608: ST_TO_ADDR
// if i_from > i_to then
23609: LD_VAR 0 2
23613: PUSH
23614: LD_VAR 0 3
23618: GREATER
23619: IFFALSE 23645
// length := ( array - i_from ) + i_to else
23621: LD_ADDR_VAR 0 11
23625: PUSH
23626: LD_VAR 0 1
23630: PUSH
23631: LD_VAR 0 2
23635: MINUS
23636: PUSH
23637: LD_VAR 0 3
23641: PLUS
23642: ST_TO_ADDR
23643: GO 23661
// length := i_to - i_from ;
23645: LD_ADDR_VAR 0 11
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: LD_VAR 0 2
23659: MINUS
23660: ST_TO_ADDR
// end else
23661: GO 23724
// begin d := - 1 ;
23663: LD_ADDR_VAR 0 9
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: ST_TO_ADDR
// if i_from > i_to then
23672: LD_VAR 0 2
23676: PUSH
23677: LD_VAR 0 3
23681: GREATER
23682: IFFALSE 23702
// length := i_from - i_to else
23684: LD_ADDR_VAR 0 11
23688: PUSH
23689: LD_VAR 0 2
23693: PUSH
23694: LD_VAR 0 3
23698: MINUS
23699: ST_TO_ADDR
23700: GO 23724
// length := ( array - i_to ) + i_from ;
23702: LD_ADDR_VAR 0 11
23706: PUSH
23707: LD_VAR 0 1
23711: PUSH
23712: LD_VAR 0 3
23716: MINUS
23717: PUSH
23718: LD_VAR 0 2
23722: PLUS
23723: ST_TO_ADDR
// end ; if not length then
23724: LD_VAR 0 11
23728: NOT
23729: IFFALSE 23733
// exit ;
23731: GO 23891
// tmp := array ;
23733: LD_ADDR_VAR 0 10
23737: PUSH
23738: LD_VAR 0 1
23742: ST_TO_ADDR
// for i = 1 to length do
23743: LD_ADDR_VAR 0 6
23747: PUSH
23748: DOUBLE
23749: LD_INT 1
23751: DEC
23752: ST_TO_ADDR
23753: LD_VAR 0 11
23757: PUSH
23758: FOR_TO
23759: IFFALSE 23879
// begin for j = 1 to array do
23761: LD_ADDR_VAR 0 7
23765: PUSH
23766: DOUBLE
23767: LD_INT 1
23769: DEC
23770: ST_TO_ADDR
23771: LD_VAR 0 1
23775: PUSH
23776: FOR_TO
23777: IFFALSE 23865
// begin k := j + d ;
23779: LD_ADDR_VAR 0 8
23783: PUSH
23784: LD_VAR 0 7
23788: PUSH
23789: LD_VAR 0 9
23793: PLUS
23794: ST_TO_ADDR
// if k > array then
23795: LD_VAR 0 8
23799: PUSH
23800: LD_VAR 0 1
23804: GREATER
23805: IFFALSE 23815
// k := 1 ;
23807: LD_ADDR_VAR 0 8
23811: PUSH
23812: LD_INT 1
23814: ST_TO_ADDR
// if not k then
23815: LD_VAR 0 8
23819: NOT
23820: IFFALSE 23832
// k := array ;
23822: LD_ADDR_VAR 0 8
23826: PUSH
23827: LD_VAR 0 1
23831: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23832: LD_ADDR_VAR 0 10
23836: PUSH
23837: LD_VAR 0 10
23841: PPUSH
23842: LD_VAR 0 8
23846: PPUSH
23847: LD_VAR 0 1
23851: PUSH
23852: LD_VAR 0 7
23856: ARRAY
23857: PPUSH
23858: CALL_OW 1
23862: ST_TO_ADDR
// end ;
23863: GO 23776
23865: POP
23866: POP
// array := tmp ;
23867: LD_ADDR_VAR 0 1
23871: PUSH
23872: LD_VAR 0 10
23876: ST_TO_ADDR
// end ;
23877: GO 23758
23879: POP
23880: POP
// result := array ;
23881: LD_ADDR_VAR 0 5
23885: PUSH
23886: LD_VAR 0 1
23890: ST_TO_ADDR
// end ;
23891: LD_VAR 0 5
23895: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
23896: LD_INT 0
23898: PPUSH
23899: PPUSH
// result := 0 ;
23900: LD_ADDR_VAR 0 3
23904: PUSH
23905: LD_INT 0
23907: ST_TO_ADDR
// if not array or not value in array then
23908: LD_VAR 0 1
23912: NOT
23913: PUSH
23914: LD_VAR 0 2
23918: PUSH
23919: LD_VAR 0 1
23923: IN
23924: NOT
23925: OR
23926: IFFALSE 23930
// exit ;
23928: GO 23984
// for i = 1 to array do
23930: LD_ADDR_VAR 0 4
23934: PUSH
23935: DOUBLE
23936: LD_INT 1
23938: DEC
23939: ST_TO_ADDR
23940: LD_VAR 0 1
23944: PUSH
23945: FOR_TO
23946: IFFALSE 23982
// if value = array [ i ] then
23948: LD_VAR 0 2
23952: PUSH
23953: LD_VAR 0 1
23957: PUSH
23958: LD_VAR 0 4
23962: ARRAY
23963: EQUAL
23964: IFFALSE 23980
// begin result := i ;
23966: LD_ADDR_VAR 0 3
23970: PUSH
23971: LD_VAR 0 4
23975: ST_TO_ADDR
// exit ;
23976: POP
23977: POP
23978: GO 23984
// end ;
23980: GO 23945
23982: POP
23983: POP
// end ;
23984: LD_VAR 0 3
23988: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
23989: LD_INT 0
23991: PPUSH
// vc_chassis := chassis ;
23992: LD_ADDR_OWVAR 37
23996: PUSH
23997: LD_VAR 0 1
24001: ST_TO_ADDR
// vc_engine := engine ;
24002: LD_ADDR_OWVAR 39
24006: PUSH
24007: LD_VAR 0 2
24011: ST_TO_ADDR
// vc_control := control ;
24012: LD_ADDR_OWVAR 38
24016: PUSH
24017: LD_VAR 0 3
24021: ST_TO_ADDR
// vc_weapon := weapon ;
24022: LD_ADDR_OWVAR 40
24026: PUSH
24027: LD_VAR 0 4
24031: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24032: LD_ADDR_OWVAR 41
24036: PUSH
24037: LD_VAR 0 5
24041: ST_TO_ADDR
// end ;
24042: LD_VAR 0 6
24046: RET
// export function WantPlant ( unit ) ; var task ; begin
24047: LD_INT 0
24049: PPUSH
24050: PPUSH
// result := false ;
24051: LD_ADDR_VAR 0 2
24055: PUSH
24056: LD_INT 0
24058: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 437
24073: ST_TO_ADDR
// if task then
24074: LD_VAR 0 3
24078: IFFALSE 24106
// if task [ 1 ] [ 1 ] = p then
24080: LD_VAR 0 3
24084: PUSH
24085: LD_INT 1
24087: ARRAY
24088: PUSH
24089: LD_INT 1
24091: ARRAY
24092: PUSH
24093: LD_STRING p
24095: EQUAL
24096: IFFALSE 24106
// result := true ;
24098: LD_ADDR_VAR 0 2
24102: PUSH
24103: LD_INT 1
24105: ST_TO_ADDR
// end ;
24106: LD_VAR 0 2
24110: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24111: LD_INT 0
24113: PPUSH
24114: PPUSH
24115: PPUSH
24116: PPUSH
// if pos < 1 then
24117: LD_VAR 0 2
24121: PUSH
24122: LD_INT 1
24124: LESS
24125: IFFALSE 24129
// exit ;
24127: GO 24432
// if pos = 1 then
24129: LD_VAR 0 2
24133: PUSH
24134: LD_INT 1
24136: EQUAL
24137: IFFALSE 24170
// result := Replace ( arr , pos [ 1 ] , value ) else
24139: LD_ADDR_VAR 0 4
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: LD_VAR 0 2
24153: PUSH
24154: LD_INT 1
24156: ARRAY
24157: PPUSH
24158: LD_VAR 0 3
24162: PPUSH
24163: CALL_OW 1
24167: ST_TO_ADDR
24168: GO 24432
// begin tmp := arr ;
24170: LD_ADDR_VAR 0 6
24174: PUSH
24175: LD_VAR 0 1
24179: ST_TO_ADDR
// s_arr := [ tmp ] ;
24180: LD_ADDR_VAR 0 7
24184: PUSH
24185: LD_VAR 0 6
24189: PUSH
24190: EMPTY
24191: LIST
24192: ST_TO_ADDR
// for i = 1 to pos - 1 do
24193: LD_ADDR_VAR 0 5
24197: PUSH
24198: DOUBLE
24199: LD_INT 1
24201: DEC
24202: ST_TO_ADDR
24203: LD_VAR 0 2
24207: PUSH
24208: LD_INT 1
24210: MINUS
24211: PUSH
24212: FOR_TO
24213: IFFALSE 24258
// begin tmp := tmp [ pos [ i ] ] ;
24215: LD_ADDR_VAR 0 6
24219: PUSH
24220: LD_VAR 0 6
24224: PUSH
24225: LD_VAR 0 2
24229: PUSH
24230: LD_VAR 0 5
24234: ARRAY
24235: ARRAY
24236: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24237: LD_ADDR_VAR 0 7
24241: PUSH
24242: LD_VAR 0 7
24246: PUSH
24247: LD_VAR 0 6
24251: PUSH
24252: EMPTY
24253: LIST
24254: ADD
24255: ST_TO_ADDR
// end ;
24256: GO 24212
24258: POP
24259: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24260: LD_ADDR_VAR 0 6
24264: PUSH
24265: LD_VAR 0 6
24269: PPUSH
24270: LD_VAR 0 2
24274: PUSH
24275: LD_VAR 0 2
24279: ARRAY
24280: PPUSH
24281: LD_VAR 0 3
24285: PPUSH
24286: CALL_OW 1
24290: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24291: LD_ADDR_VAR 0 7
24295: PUSH
24296: LD_VAR 0 7
24300: PPUSH
24301: LD_VAR 0 7
24305: PPUSH
24306: LD_VAR 0 6
24310: PPUSH
24311: CALL_OW 1
24315: ST_TO_ADDR
// for i = s_arr downto 2 do
24316: LD_ADDR_VAR 0 5
24320: PUSH
24321: DOUBLE
24322: LD_VAR 0 7
24326: INC
24327: ST_TO_ADDR
24328: LD_INT 2
24330: PUSH
24331: FOR_DOWNTO
24332: IFFALSE 24416
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24334: LD_ADDR_VAR 0 6
24338: PUSH
24339: LD_VAR 0 7
24343: PUSH
24344: LD_VAR 0 5
24348: PUSH
24349: LD_INT 1
24351: MINUS
24352: ARRAY
24353: PPUSH
24354: LD_VAR 0 2
24358: PUSH
24359: LD_VAR 0 5
24363: PUSH
24364: LD_INT 1
24366: MINUS
24367: ARRAY
24368: PPUSH
24369: LD_VAR 0 7
24373: PUSH
24374: LD_VAR 0 5
24378: ARRAY
24379: PPUSH
24380: CALL_OW 1
24384: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24385: LD_ADDR_VAR 0 7
24389: PUSH
24390: LD_VAR 0 7
24394: PPUSH
24395: LD_VAR 0 5
24399: PUSH
24400: LD_INT 1
24402: MINUS
24403: PPUSH
24404: LD_VAR 0 6
24408: PPUSH
24409: CALL_OW 1
24413: ST_TO_ADDR
// end ;
24414: GO 24331
24416: POP
24417: POP
// result := s_arr [ 1 ] ;
24418: LD_ADDR_VAR 0 4
24422: PUSH
24423: LD_VAR 0 7
24427: PUSH
24428: LD_INT 1
24430: ARRAY
24431: ST_TO_ADDR
// end ; end ;
24432: LD_VAR 0 4
24436: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24437: LD_INT 0
24439: PPUSH
24440: PPUSH
// if not list then
24441: LD_VAR 0 1
24445: NOT
24446: IFFALSE 24450
// exit ;
24448: GO 24541
// i := list [ pos1 ] ;
24450: LD_ADDR_VAR 0 5
24454: PUSH
24455: LD_VAR 0 1
24459: PUSH
24460: LD_VAR 0 2
24464: ARRAY
24465: ST_TO_ADDR
// if not i then
24466: LD_VAR 0 5
24470: NOT
24471: IFFALSE 24475
// exit ;
24473: GO 24541
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24475: LD_ADDR_VAR 0 1
24479: PUSH
24480: LD_VAR 0 1
24484: PPUSH
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_VAR 0 1
24494: PUSH
24495: LD_VAR 0 3
24499: ARRAY
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24506: LD_ADDR_VAR 0 1
24510: PUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: LD_VAR 0 3
24520: PPUSH
24521: LD_VAR 0 5
24525: PPUSH
24526: CALL_OW 1
24530: ST_TO_ADDR
// result := list ;
24531: LD_ADDR_VAR 0 4
24535: PUSH
24536: LD_VAR 0 1
24540: ST_TO_ADDR
// end ;
24541: LD_VAR 0 4
24545: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24546: LD_INT 0
24548: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24549: LD_ADDR_VAR 0 5
24553: PUSH
24554: LD_VAR 0 1
24558: PPUSH
24559: CALL_OW 250
24563: PPUSH
24564: LD_VAR 0 1
24568: PPUSH
24569: CALL_OW 251
24573: PPUSH
24574: LD_VAR 0 2
24578: PPUSH
24579: LD_VAR 0 3
24583: PPUSH
24584: LD_VAR 0 4
24588: PPUSH
24589: CALL 24967 0 5
24593: ST_TO_ADDR
// end ;
24594: LD_VAR 0 5
24598: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
24599: LD_INT 0
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
// if not list or not unit then
24605: LD_VAR 0 2
24609: NOT
24610: PUSH
24611: LD_VAR 0 1
24615: NOT
24616: OR
24617: IFFALSE 24621
// exit ;
24619: GO 24962
// result := [ ] ;
24621: LD_ADDR_VAR 0 5
24625: PUSH
24626: EMPTY
24627: ST_TO_ADDR
// for i in list do
24628: LD_ADDR_VAR 0 6
24632: PUSH
24633: LD_VAR 0 2
24637: PUSH
24638: FOR_IN
24639: IFFALSE 24857
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
24641: LD_ADDR_VAR 0 8
24645: PUSH
24646: LD_VAR 0 1
24650: PPUSH
24651: LD_VAR 0 6
24655: PUSH
24656: LD_INT 1
24658: ARRAY
24659: PPUSH
24660: LD_VAR 0 6
24664: PUSH
24665: LD_INT 2
24667: ARRAY
24668: PPUSH
24669: CALL_OW 297
24673: ST_TO_ADDR
// if not Count ( result ) then
24674: LD_VAR 0 5
24678: PPUSH
24679: CALL 21251 0 1
24683: NOT
24684: IFFALSE 24717
// begin result := Join ( result , [ i , tmp ] ) ;
24686: LD_ADDR_VAR 0 5
24690: PUSH
24691: LD_VAR 0 5
24695: PPUSH
24696: LD_VAR 0 6
24700: PUSH
24701: LD_VAR 0 8
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PPUSH
24710: CALL 56851 0 2
24714: ST_TO_ADDR
// continue ;
24715: GO 24638
// end ; if result [ result ] [ 2 ] <= tmp then
24717: LD_VAR 0 5
24721: PUSH
24722: LD_VAR 0 5
24726: ARRAY
24727: PUSH
24728: LD_INT 2
24730: ARRAY
24731: PUSH
24732: LD_VAR 0 8
24736: LESSEQUAL
24737: IFFALSE 24770
// result := Join ( result , [ i , tmp ] ) else
24739: LD_ADDR_VAR 0 5
24743: PUSH
24744: LD_VAR 0 5
24748: PPUSH
24749: LD_VAR 0 6
24753: PUSH
24754: LD_VAR 0 8
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PPUSH
24763: CALL 56851 0 2
24767: ST_TO_ADDR
24768: GO 24855
// begin for j := 1 to Count ( result ) do
24770: LD_ADDR_VAR 0 7
24774: PUSH
24775: DOUBLE
24776: LD_INT 1
24778: DEC
24779: ST_TO_ADDR
24780: LD_VAR 0 5
24784: PPUSH
24785: CALL 21251 0 1
24789: PUSH
24790: FOR_TO
24791: IFFALSE 24853
// begin if tmp < result [ j ] [ 2 ] then
24793: LD_VAR 0 8
24797: PUSH
24798: LD_VAR 0 5
24802: PUSH
24803: LD_VAR 0 7
24807: ARRAY
24808: PUSH
24809: LD_INT 2
24811: ARRAY
24812: LESS
24813: IFFALSE 24851
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24815: LD_ADDR_VAR 0 5
24819: PUSH
24820: LD_VAR 0 5
24824: PPUSH
24825: LD_VAR 0 7
24829: PPUSH
24830: LD_VAR 0 6
24834: PUSH
24835: LD_VAR 0 8
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PPUSH
24844: CALL_OW 2
24848: ST_TO_ADDR
// break ;
24849: GO 24853
// end ; end ;
24851: GO 24790
24853: POP
24854: POP
// end ; end ;
24855: GO 24638
24857: POP
24858: POP
// if result and not asc then
24859: LD_VAR 0 5
24863: PUSH
24864: LD_VAR 0 3
24868: NOT
24869: AND
24870: IFFALSE 24887
// result := ReverseArray ( result ) ;
24872: LD_ADDR_VAR 0 5
24876: PUSH
24877: LD_VAR 0 5
24881: PPUSH
24882: CALL 52127 0 1
24886: ST_TO_ADDR
// tmp := [ ] ;
24887: LD_ADDR_VAR 0 8
24891: PUSH
24892: EMPTY
24893: ST_TO_ADDR
// if mode then
24894: LD_VAR 0 4
24898: IFFALSE 24962
// begin for i := 1 to result do
24900: LD_ADDR_VAR 0 6
24904: PUSH
24905: DOUBLE
24906: LD_INT 1
24908: DEC
24909: ST_TO_ADDR
24910: LD_VAR 0 5
24914: PUSH
24915: FOR_TO
24916: IFFALSE 24950
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
24918: LD_ADDR_VAR 0 8
24922: PUSH
24923: LD_VAR 0 8
24927: PPUSH
24928: LD_VAR 0 5
24932: PUSH
24933: LD_VAR 0 6
24937: ARRAY
24938: PUSH
24939: LD_INT 1
24941: ARRAY
24942: PPUSH
24943: CALL 56851 0 2
24947: ST_TO_ADDR
24948: GO 24915
24950: POP
24951: POP
// result := tmp ;
24952: LD_ADDR_VAR 0 5
24956: PUSH
24957: LD_VAR 0 8
24961: ST_TO_ADDR
// end ; end ;
24962: LD_VAR 0 5
24966: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24967: LD_INT 0
24969: PPUSH
24970: PPUSH
24971: PPUSH
24972: PPUSH
// if not list then
24973: LD_VAR 0 3
24977: NOT
24978: IFFALSE 24982
// exit ;
24980: GO 25370
// result := [ ] ;
24982: LD_ADDR_VAR 0 6
24986: PUSH
24987: EMPTY
24988: ST_TO_ADDR
// for i in list do
24989: LD_ADDR_VAR 0 7
24993: PUSH
24994: LD_VAR 0 3
24998: PUSH
24999: FOR_IN
25000: IFFALSE 25202
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25002: LD_ADDR_VAR 0 9
25006: PUSH
25007: LD_VAR 0 7
25011: PPUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: LD_VAR 0 2
25021: PPUSH
25022: CALL_OW 297
25026: ST_TO_ADDR
// if not result then
25027: LD_VAR 0 6
25031: NOT
25032: IFFALSE 25058
// result := [ [ i , tmp ] ] else
25034: LD_ADDR_VAR 0 6
25038: PUSH
25039: LD_VAR 0 7
25043: PUSH
25044: LD_VAR 0 9
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: EMPTY
25054: LIST
25055: ST_TO_ADDR
25056: GO 25200
// begin if result [ result ] [ 2 ] < tmp then
25058: LD_VAR 0 6
25062: PUSH
25063: LD_VAR 0 6
25067: ARRAY
25068: PUSH
25069: LD_INT 2
25071: ARRAY
25072: PUSH
25073: LD_VAR 0 9
25077: LESS
25078: IFFALSE 25120
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25080: LD_ADDR_VAR 0 6
25084: PUSH
25085: LD_VAR 0 6
25089: PPUSH
25090: LD_VAR 0 6
25094: PUSH
25095: LD_INT 1
25097: PLUS
25098: PPUSH
25099: LD_VAR 0 7
25103: PUSH
25104: LD_VAR 0 9
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PPUSH
25113: CALL_OW 2
25117: ST_TO_ADDR
25118: GO 25200
// for j = 1 to result do
25120: LD_ADDR_VAR 0 8
25124: PUSH
25125: DOUBLE
25126: LD_INT 1
25128: DEC
25129: ST_TO_ADDR
25130: LD_VAR 0 6
25134: PUSH
25135: FOR_TO
25136: IFFALSE 25198
// begin if tmp < result [ j ] [ 2 ] then
25138: LD_VAR 0 9
25142: PUSH
25143: LD_VAR 0 6
25147: PUSH
25148: LD_VAR 0 8
25152: ARRAY
25153: PUSH
25154: LD_INT 2
25156: ARRAY
25157: LESS
25158: IFFALSE 25196
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25160: LD_ADDR_VAR 0 6
25164: PUSH
25165: LD_VAR 0 6
25169: PPUSH
25170: LD_VAR 0 8
25174: PPUSH
25175: LD_VAR 0 7
25179: PUSH
25180: LD_VAR 0 9
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PPUSH
25189: CALL_OW 2
25193: ST_TO_ADDR
// break ;
25194: GO 25198
// end ; end ;
25196: GO 25135
25198: POP
25199: POP
// end ; end ;
25200: GO 24999
25202: POP
25203: POP
// if result and not asc then
25204: LD_VAR 0 6
25208: PUSH
25209: LD_VAR 0 4
25213: NOT
25214: AND
25215: IFFALSE 25290
// begin tmp := result ;
25217: LD_ADDR_VAR 0 9
25221: PUSH
25222: LD_VAR 0 6
25226: ST_TO_ADDR
// for i = tmp downto 1 do
25227: LD_ADDR_VAR 0 7
25231: PUSH
25232: DOUBLE
25233: LD_VAR 0 9
25237: INC
25238: ST_TO_ADDR
25239: LD_INT 1
25241: PUSH
25242: FOR_DOWNTO
25243: IFFALSE 25288
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25245: LD_ADDR_VAR 0 6
25249: PUSH
25250: LD_VAR 0 6
25254: PPUSH
25255: LD_VAR 0 9
25259: PUSH
25260: LD_VAR 0 7
25264: MINUS
25265: PUSH
25266: LD_INT 1
25268: PLUS
25269: PPUSH
25270: LD_VAR 0 9
25274: PUSH
25275: LD_VAR 0 7
25279: ARRAY
25280: PPUSH
25281: CALL_OW 1
25285: ST_TO_ADDR
25286: GO 25242
25288: POP
25289: POP
// end ; tmp := [ ] ;
25290: LD_ADDR_VAR 0 9
25294: PUSH
25295: EMPTY
25296: ST_TO_ADDR
// if mode then
25297: LD_VAR 0 5
25301: IFFALSE 25370
// begin for i = 1 to result do
25303: LD_ADDR_VAR 0 7
25307: PUSH
25308: DOUBLE
25309: LD_INT 1
25311: DEC
25312: ST_TO_ADDR
25313: LD_VAR 0 6
25317: PUSH
25318: FOR_TO
25319: IFFALSE 25358
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25321: LD_ADDR_VAR 0 9
25325: PUSH
25326: LD_VAR 0 9
25330: PPUSH
25331: LD_VAR 0 7
25335: PPUSH
25336: LD_VAR 0 6
25340: PUSH
25341: LD_VAR 0 7
25345: ARRAY
25346: PUSH
25347: LD_INT 1
25349: ARRAY
25350: PPUSH
25351: CALL_OW 1
25355: ST_TO_ADDR
25356: GO 25318
25358: POP
25359: POP
// result := tmp ;
25360: LD_ADDR_VAR 0 6
25364: PUSH
25365: LD_VAR 0 9
25369: ST_TO_ADDR
// end ; end ;
25370: LD_VAR 0 6
25374: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25375: LD_INT 0
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25383: LD_ADDR_VAR 0 5
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: ST_TO_ADDR
// if not x or not y then
25405: LD_VAR 0 2
25409: NOT
25410: PUSH
25411: LD_VAR 0 3
25415: NOT
25416: OR
25417: IFFALSE 25421
// exit ;
25419: GO 27071
// if not range then
25421: LD_VAR 0 4
25425: NOT
25426: IFFALSE 25436
// range := 10 ;
25428: LD_ADDR_VAR 0 4
25432: PUSH
25433: LD_INT 10
25435: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25436: LD_ADDR_VAR 0 8
25440: PUSH
25441: LD_INT 81
25443: PUSH
25444: LD_VAR 0 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 92
25455: PUSH
25456: LD_VAR 0 2
25460: PUSH
25461: LD_VAR 0 3
25465: PUSH
25466: LD_VAR 0 4
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 3
25479: PUSH
25480: LD_INT 21
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL_OW 69
25503: ST_TO_ADDR
// if not tmp then
25504: LD_VAR 0 8
25508: NOT
25509: IFFALSE 25513
// exit ;
25511: GO 27071
// for i in tmp do
25513: LD_ADDR_VAR 0 6
25517: PUSH
25518: LD_VAR 0 8
25522: PUSH
25523: FOR_IN
25524: IFFALSE 27046
// begin points := [ 0 , 0 , 0 ] ;
25526: LD_ADDR_VAR 0 9
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: ST_TO_ADDR
// bpoints := 1 ;
25545: LD_ADDR_VAR 0 10
25549: PUSH
25550: LD_INT 1
25552: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25553: LD_VAR 0 6
25557: PPUSH
25558: CALL_OW 247
25562: PUSH
25563: LD_INT 1
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 26149
25571: POP
// begin if GetClass ( i ) = 1 then
25572: LD_VAR 0 6
25576: PPUSH
25577: CALL_OW 257
25581: PUSH
25582: LD_INT 1
25584: EQUAL
25585: IFFALSE 25606
// points := [ 10 , 5 , 3 ] ;
25587: LD_ADDR_VAR 0 9
25591: PUSH
25592: LD_INT 10
25594: PUSH
25595: LD_INT 5
25597: PUSH
25598: LD_INT 3
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: LIST
25605: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25606: LD_VAR 0 6
25610: PPUSH
25611: CALL_OW 257
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: LD_INT 3
25621: PUSH
25622: LD_INT 4
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: IN
25630: IFFALSE 25651
// points := [ 3 , 2 , 1 ] ;
25632: LD_ADDR_VAR 0 9
25636: PUSH
25637: LD_INT 3
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25651: LD_VAR 0 6
25655: PPUSH
25656: CALL_OW 257
25660: PUSH
25661: LD_INT 5
25663: EQUAL
25664: IFFALSE 25685
// points := [ 130 , 5 , 2 ] ;
25666: LD_ADDR_VAR 0 9
25670: PUSH
25671: LD_INT 130
25673: PUSH
25674: LD_INT 5
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25685: LD_VAR 0 6
25689: PPUSH
25690: CALL_OW 257
25694: PUSH
25695: LD_INT 8
25697: EQUAL
25698: IFFALSE 25719
// points := [ 35 , 35 , 30 ] ;
25700: LD_ADDR_VAR 0 9
25704: PUSH
25705: LD_INT 35
25707: PUSH
25708: LD_INT 35
25710: PUSH
25711: LD_INT 30
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25719: LD_VAR 0 6
25723: PPUSH
25724: CALL_OW 257
25728: PUSH
25729: LD_INT 9
25731: EQUAL
25732: IFFALSE 25753
// points := [ 20 , 55 , 40 ] ;
25734: LD_ADDR_VAR 0 9
25738: PUSH
25739: LD_INT 20
25741: PUSH
25742: LD_INT 55
25744: PUSH
25745: LD_INT 40
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25753: LD_VAR 0 6
25757: PPUSH
25758: CALL_OW 257
25762: PUSH
25763: LD_INT 12
25765: PUSH
25766: LD_INT 16
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: IN
25773: IFFALSE 25794
// points := [ 5 , 3 , 2 ] ;
25775: LD_ADDR_VAR 0 9
25779: PUSH
25780: LD_INT 5
25782: PUSH
25783: LD_INT 3
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: LIST
25793: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25794: LD_VAR 0 6
25798: PPUSH
25799: CALL_OW 257
25803: PUSH
25804: LD_INT 17
25806: EQUAL
25807: IFFALSE 25828
// points := [ 100 , 50 , 75 ] ;
25809: LD_ADDR_VAR 0 9
25813: PUSH
25814: LD_INT 100
25816: PUSH
25817: LD_INT 50
25819: PUSH
25820: LD_INT 75
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25828: LD_VAR 0 6
25832: PPUSH
25833: CALL_OW 257
25837: PUSH
25838: LD_INT 15
25840: EQUAL
25841: IFFALSE 25862
// points := [ 10 , 5 , 3 ] ;
25843: LD_ADDR_VAR 0 9
25847: PUSH
25848: LD_INT 10
25850: PUSH
25851: LD_INT 5
25853: PUSH
25854: LD_INT 3
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25862: LD_VAR 0 6
25866: PPUSH
25867: CALL_OW 257
25871: PUSH
25872: LD_INT 14
25874: EQUAL
25875: IFFALSE 25896
// points := [ 10 , 0 , 0 ] ;
25877: LD_ADDR_VAR 0 9
25881: PUSH
25882: LD_INT 10
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25896: LD_VAR 0 6
25900: PPUSH
25901: CALL_OW 257
25905: PUSH
25906: LD_INT 11
25908: EQUAL
25909: IFFALSE 25930
// points := [ 30 , 10 , 5 ] ;
25911: LD_ADDR_VAR 0 9
25915: PUSH
25916: LD_INT 30
25918: PUSH
25919: LD_INT 10
25921: PUSH
25922: LD_INT 5
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: LIST
25929: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25930: LD_VAR 0 1
25934: PPUSH
25935: LD_INT 5
25937: PPUSH
25938: CALL_OW 321
25942: PUSH
25943: LD_INT 2
25945: EQUAL
25946: IFFALSE 25963
// bpoints := bpoints * 1.8 ;
25948: LD_ADDR_VAR 0 10
25952: PUSH
25953: LD_VAR 0 10
25957: PUSH
25958: LD_REAL  1.80000000000000E+0000
25961: MUL
25962: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25963: LD_VAR 0 6
25967: PPUSH
25968: CALL_OW 257
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 2
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: LD_INT 4
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: IN
25991: PUSH
25992: LD_VAR 0 1
25996: PPUSH
25997: LD_INT 51
25999: PPUSH
26000: CALL_OW 321
26004: PUSH
26005: LD_INT 2
26007: EQUAL
26008: AND
26009: IFFALSE 26026
// bpoints := bpoints * 1.2 ;
26011: LD_ADDR_VAR 0 10
26015: PUSH
26016: LD_VAR 0 10
26020: PUSH
26021: LD_REAL  1.20000000000000E+0000
26024: MUL
26025: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26026: LD_VAR 0 6
26030: PPUSH
26031: CALL_OW 257
26035: PUSH
26036: LD_INT 5
26038: PUSH
26039: LD_INT 7
26041: PUSH
26042: LD_INT 9
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: LIST
26049: IN
26050: PUSH
26051: LD_VAR 0 1
26055: PPUSH
26056: LD_INT 52
26058: PPUSH
26059: CALL_OW 321
26063: PUSH
26064: LD_INT 2
26066: EQUAL
26067: AND
26068: IFFALSE 26085
// bpoints := bpoints * 1.5 ;
26070: LD_ADDR_VAR 0 10
26074: PUSH
26075: LD_VAR 0 10
26079: PUSH
26080: LD_REAL  1.50000000000000E+0000
26083: MUL
26084: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_INT 66
26092: PPUSH
26093: CALL_OW 321
26097: PUSH
26098: LD_INT 2
26100: EQUAL
26101: IFFALSE 26118
// bpoints := bpoints * 1.1 ;
26103: LD_ADDR_VAR 0 10
26107: PUSH
26108: LD_VAR 0 10
26112: PUSH
26113: LD_REAL  1.10000000000000E+0000
26116: MUL
26117: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26118: LD_ADDR_VAR 0 10
26122: PUSH
26123: LD_VAR 0 10
26127: PUSH
26128: LD_VAR 0 6
26132: PPUSH
26133: LD_INT 1
26135: PPUSH
26136: CALL_OW 259
26140: PUSH
26141: LD_REAL  1.15000000000000E+0000
26144: MUL
26145: MUL
26146: ST_TO_ADDR
// end ; unit_vehicle :
26147: GO 26975
26149: LD_INT 2
26151: DOUBLE
26152: EQUAL
26153: IFTRUE 26157
26155: GO 26963
26157: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26158: LD_VAR 0 6
26162: PPUSH
26163: CALL_OW 264
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: LD_INT 42
26173: PUSH
26174: LD_INT 24
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: IN
26182: IFFALSE 26203
// points := [ 25 , 5 , 3 ] ;
26184: LD_ADDR_VAR 0 9
26188: PUSH
26189: LD_INT 25
26191: PUSH
26192: LD_INT 5
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26203: LD_VAR 0 6
26207: PPUSH
26208: CALL_OW 264
26212: PUSH
26213: LD_INT 4
26215: PUSH
26216: LD_INT 43
26218: PUSH
26219: LD_INT 25
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: IN
26227: IFFALSE 26248
// points := [ 40 , 15 , 5 ] ;
26229: LD_ADDR_VAR 0 9
26233: PUSH
26234: LD_INT 40
26236: PUSH
26237: LD_INT 15
26239: PUSH
26240: LD_INT 5
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26248: LD_VAR 0 6
26252: PPUSH
26253: CALL_OW 264
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: LD_INT 23
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: IN
26268: IFFALSE 26289
// points := [ 7 , 25 , 8 ] ;
26270: LD_ADDR_VAR 0 9
26274: PUSH
26275: LD_INT 7
26277: PUSH
26278: LD_INT 25
26280: PUSH
26281: LD_INT 8
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: LIST
26288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26289: LD_VAR 0 6
26293: PPUSH
26294: CALL_OW 264
26298: PUSH
26299: LD_INT 5
26301: PUSH
26302: LD_INT 27
26304: PUSH
26305: LD_INT 44
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: LIST
26312: IN
26313: IFFALSE 26334
// points := [ 14 , 50 , 16 ] ;
26315: LD_ADDR_VAR 0 9
26319: PUSH
26320: LD_INT 14
26322: PUSH
26323: LD_INT 50
26325: PUSH
26326: LD_INT 16
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26334: LD_VAR 0 6
26338: PPUSH
26339: CALL_OW 264
26343: PUSH
26344: LD_INT 6
26346: PUSH
26347: LD_INT 46
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: IN
26354: IFFALSE 26375
// points := [ 32 , 120 , 70 ] ;
26356: LD_ADDR_VAR 0 9
26360: PUSH
26361: LD_INT 32
26363: PUSH
26364: LD_INT 120
26366: PUSH
26367: LD_INT 70
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26375: LD_VAR 0 6
26379: PPUSH
26380: CALL_OW 264
26384: PUSH
26385: LD_INT 7
26387: PUSH
26388: LD_INT 28
26390: PUSH
26391: LD_INT 45
26393: PUSH
26394: LD_INT 92
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: IN
26403: IFFALSE 26424
// points := [ 35 , 20 , 45 ] ;
26405: LD_ADDR_VAR 0 9
26409: PUSH
26410: LD_INT 35
26412: PUSH
26413: LD_INT 20
26415: PUSH
26416: LD_INT 45
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26424: LD_VAR 0 6
26428: PPUSH
26429: CALL_OW 264
26433: PUSH
26434: LD_INT 47
26436: PUSH
26437: EMPTY
26438: LIST
26439: IN
26440: IFFALSE 26461
// points := [ 67 , 45 , 75 ] ;
26442: LD_ADDR_VAR 0 9
26446: PUSH
26447: LD_INT 67
26449: PUSH
26450: LD_INT 45
26452: PUSH
26453: LD_INT 75
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26461: LD_VAR 0 6
26465: PPUSH
26466: CALL_OW 264
26470: PUSH
26471: LD_INT 26
26473: PUSH
26474: EMPTY
26475: LIST
26476: IN
26477: IFFALSE 26498
// points := [ 120 , 30 , 80 ] ;
26479: LD_ADDR_VAR 0 9
26483: PUSH
26484: LD_INT 120
26486: PUSH
26487: LD_INT 30
26489: PUSH
26490: LD_INT 80
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26498: LD_VAR 0 6
26502: PPUSH
26503: CALL_OW 264
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: EMPTY
26512: LIST
26513: IN
26514: IFFALSE 26535
// points := [ 40 , 1 , 1 ] ;
26516: LD_ADDR_VAR 0 9
26520: PUSH
26521: LD_INT 40
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26535: LD_VAR 0 6
26539: PPUSH
26540: CALL_OW 264
26544: PUSH
26545: LD_INT 29
26547: PUSH
26548: EMPTY
26549: LIST
26550: IN
26551: IFFALSE 26572
// points := [ 70 , 200 , 400 ] ;
26553: LD_ADDR_VAR 0 9
26557: PUSH
26558: LD_INT 70
26560: PUSH
26561: LD_INT 200
26563: PUSH
26564: LD_INT 400
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26572: LD_VAR 0 6
26576: PPUSH
26577: CALL_OW 264
26581: PUSH
26582: LD_INT 14
26584: PUSH
26585: LD_INT 53
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: IN
26592: IFFALSE 26613
// points := [ 40 , 10 , 20 ] ;
26594: LD_ADDR_VAR 0 9
26598: PUSH
26599: LD_INT 40
26601: PUSH
26602: LD_INT 10
26604: PUSH
26605: LD_INT 20
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26613: LD_VAR 0 6
26617: PPUSH
26618: CALL_OW 264
26622: PUSH
26623: LD_INT 9
26625: PUSH
26626: EMPTY
26627: LIST
26628: IN
26629: IFFALSE 26650
// points := [ 5 , 70 , 20 ] ;
26631: LD_ADDR_VAR 0 9
26635: PUSH
26636: LD_INT 5
26638: PUSH
26639: LD_INT 70
26641: PUSH
26642: LD_INT 20
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26650: LD_VAR 0 6
26654: PPUSH
26655: CALL_OW 264
26659: PUSH
26660: LD_INT 10
26662: PUSH
26663: EMPTY
26664: LIST
26665: IN
26666: IFFALSE 26687
// points := [ 35 , 110 , 70 ] ;
26668: LD_ADDR_VAR 0 9
26672: PUSH
26673: LD_INT 35
26675: PUSH
26676: LD_INT 110
26678: PUSH
26679: LD_INT 70
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26687: LD_VAR 0 6
26691: PPUSH
26692: CALL_OW 265
26696: PUSH
26697: LD_INT 25
26699: EQUAL
26700: IFFALSE 26721
// points := [ 80 , 65 , 100 ] ;
26702: LD_ADDR_VAR 0 9
26706: PUSH
26707: LD_INT 80
26709: PUSH
26710: LD_INT 65
26712: PUSH
26713: LD_INT 100
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26721: LD_VAR 0 6
26725: PPUSH
26726: CALL_OW 263
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: IFFALSE 26769
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26736: LD_ADDR_VAR 0 10
26740: PUSH
26741: LD_VAR 0 10
26745: PUSH
26746: LD_VAR 0 6
26750: PPUSH
26751: CALL_OW 311
26755: PPUSH
26756: LD_INT 3
26758: PPUSH
26759: CALL_OW 259
26763: PUSH
26764: LD_INT 4
26766: MUL
26767: MUL
26768: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26769: LD_VAR 0 6
26773: PPUSH
26774: CALL_OW 263
26778: PUSH
26779: LD_INT 2
26781: EQUAL
26782: IFFALSE 26833
// begin j := IsControledBy ( i ) ;
26784: LD_ADDR_VAR 0 7
26788: PUSH
26789: LD_VAR 0 6
26793: PPUSH
26794: CALL_OW 312
26798: ST_TO_ADDR
// if j then
26799: LD_VAR 0 7
26803: IFFALSE 26833
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26805: LD_ADDR_VAR 0 10
26809: PUSH
26810: LD_VAR 0 10
26814: PUSH
26815: LD_VAR 0 7
26819: PPUSH
26820: LD_INT 3
26822: PPUSH
26823: CALL_OW 259
26827: PUSH
26828: LD_INT 3
26830: MUL
26831: MUL
26832: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26833: LD_VAR 0 6
26837: PPUSH
26838: CALL_OW 264
26842: PUSH
26843: LD_INT 5
26845: PUSH
26846: LD_INT 6
26848: PUSH
26849: LD_INT 46
26851: PUSH
26852: LD_INT 44
26854: PUSH
26855: LD_INT 47
26857: PUSH
26858: LD_INT 45
26860: PUSH
26861: LD_INT 28
26863: PUSH
26864: LD_INT 7
26866: PUSH
26867: LD_INT 27
26869: PUSH
26870: LD_INT 29
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: IN
26885: PUSH
26886: LD_VAR 0 1
26890: PPUSH
26891: LD_INT 52
26893: PPUSH
26894: CALL_OW 321
26898: PUSH
26899: LD_INT 2
26901: EQUAL
26902: AND
26903: IFFALSE 26920
// bpoints := bpoints * 1.2 ;
26905: LD_ADDR_VAR 0 10
26909: PUSH
26910: LD_VAR 0 10
26914: PUSH
26915: LD_REAL  1.20000000000000E+0000
26918: MUL
26919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26920: LD_VAR 0 6
26924: PPUSH
26925: CALL_OW 264
26929: PUSH
26930: LD_INT 6
26932: PUSH
26933: LD_INT 46
26935: PUSH
26936: LD_INT 47
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: LIST
26943: IN
26944: IFFALSE 26961
// bpoints := bpoints * 1.2 ;
26946: LD_ADDR_VAR 0 10
26950: PUSH
26951: LD_VAR 0 10
26955: PUSH
26956: LD_REAL  1.20000000000000E+0000
26959: MUL
26960: ST_TO_ADDR
// end ; unit_building :
26961: GO 26975
26963: LD_INT 3
26965: DOUBLE
26966: EQUAL
26967: IFTRUE 26971
26969: GO 26974
26971: POP
// ; end ;
26972: GO 26975
26974: POP
// for j = 1 to 3 do
26975: LD_ADDR_VAR 0 7
26979: PUSH
26980: DOUBLE
26981: LD_INT 1
26983: DEC
26984: ST_TO_ADDR
26985: LD_INT 3
26987: PUSH
26988: FOR_TO
26989: IFFALSE 27042
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26991: LD_ADDR_VAR 0 5
26995: PUSH
26996: LD_VAR 0 5
27000: PPUSH
27001: LD_VAR 0 7
27005: PPUSH
27006: LD_VAR 0 5
27010: PUSH
27011: LD_VAR 0 7
27015: ARRAY
27016: PUSH
27017: LD_VAR 0 9
27021: PUSH
27022: LD_VAR 0 7
27026: ARRAY
27027: PUSH
27028: LD_VAR 0 10
27032: MUL
27033: PLUS
27034: PPUSH
27035: CALL_OW 1
27039: ST_TO_ADDR
27040: GO 26988
27042: POP
27043: POP
// end ;
27044: GO 25523
27046: POP
27047: POP
// result := Replace ( result , 4 , tmp ) ;
27048: LD_ADDR_VAR 0 5
27052: PUSH
27053: LD_VAR 0 5
27057: PPUSH
27058: LD_INT 4
27060: PPUSH
27061: LD_VAR 0 8
27065: PPUSH
27066: CALL_OW 1
27070: ST_TO_ADDR
// end ;
27071: LD_VAR 0 5
27075: RET
// export function DangerAtRange ( unit , range ) ; begin
27076: LD_INT 0
27078: PPUSH
// if not unit then
27079: LD_VAR 0 1
27083: NOT
27084: IFFALSE 27088
// exit ;
27086: GO 27133
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27088: LD_ADDR_VAR 0 3
27092: PUSH
27093: LD_VAR 0 1
27097: PPUSH
27098: CALL_OW 255
27102: PPUSH
27103: LD_VAR 0 1
27107: PPUSH
27108: CALL_OW 250
27112: PPUSH
27113: LD_VAR 0 1
27117: PPUSH
27118: CALL_OW 251
27122: PPUSH
27123: LD_VAR 0 2
27127: PPUSH
27128: CALL 25375 0 4
27132: ST_TO_ADDR
// end ;
27133: LD_VAR 0 3
27137: RET
// export function DangerInArea ( side , area ) ; begin
27138: LD_INT 0
27140: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27141: LD_ADDR_VAR 0 3
27145: PUSH
27146: LD_VAR 0 2
27150: PPUSH
27151: LD_INT 81
27153: PUSH
27154: LD_VAR 0 1
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PPUSH
27163: CALL_OW 70
27167: ST_TO_ADDR
// end ;
27168: LD_VAR 0 3
27172: RET
// export function IsExtension ( b ) ; begin
27173: LD_INT 0
27175: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_VAR 0 1
27185: PUSH
27186: LD_INT 23
27188: PUSH
27189: LD_INT 20
27191: PUSH
27192: LD_INT 22
27194: PUSH
27195: LD_INT 17
27197: PUSH
27198: LD_INT 24
27200: PUSH
27201: LD_INT 21
27203: PUSH
27204: LD_INT 19
27206: PUSH
27207: LD_INT 16
27209: PUSH
27210: LD_INT 25
27212: PUSH
27213: LD_INT 18
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: IN
27228: ST_TO_ADDR
// end ;
27229: LD_VAR 0 2
27233: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
// result := [ ] ;
27239: LD_ADDR_VAR 0 4
27243: PUSH
27244: EMPTY
27245: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27246: LD_ADDR_VAR 0 5
27250: PUSH
27251: LD_VAR 0 2
27255: PPUSH
27256: LD_INT 21
27258: PUSH
27259: LD_INT 3
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL_OW 70
27270: ST_TO_ADDR
// if not tmp then
27271: LD_VAR 0 5
27275: NOT
27276: IFFALSE 27280
// exit ;
27278: GO 27344
// if checkLink then
27280: LD_VAR 0 3
27284: IFFALSE 27334
// begin for i in tmp do
27286: LD_ADDR_VAR 0 6
27290: PUSH
27291: LD_VAR 0 5
27295: PUSH
27296: FOR_IN
27297: IFFALSE 27332
// if GetBase ( i ) <> base then
27299: LD_VAR 0 6
27303: PPUSH
27304: CALL_OW 274
27308: PUSH
27309: LD_VAR 0 1
27313: NONEQUAL
27314: IFFALSE 27330
// ComLinkToBase ( base , i ) ;
27316: LD_VAR 0 1
27320: PPUSH
27321: LD_VAR 0 6
27325: PPUSH
27326: CALL_OW 169
27330: GO 27296
27332: POP
27333: POP
// end ; result := tmp ;
27334: LD_ADDR_VAR 0 4
27338: PUSH
27339: LD_VAR 0 5
27343: ST_TO_ADDR
// end ;
27344: LD_VAR 0 4
27348: RET
// export function ComComplete ( units , b ) ; var i ; begin
27349: LD_INT 0
27351: PPUSH
27352: PPUSH
// if not units then
27353: LD_VAR 0 1
27357: NOT
27358: IFFALSE 27362
// exit ;
27360: GO 27452
// for i in units do
27362: LD_ADDR_VAR 0 4
27366: PUSH
27367: LD_VAR 0 1
27371: PUSH
27372: FOR_IN
27373: IFFALSE 27450
// if BuildingStatus ( b ) = bs_build then
27375: LD_VAR 0 2
27379: PPUSH
27380: CALL_OW 461
27384: PUSH
27385: LD_INT 1
27387: EQUAL
27388: IFFALSE 27448
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27390: LD_VAR 0 4
27394: PPUSH
27395: LD_STRING h
27397: PUSH
27398: LD_VAR 0 2
27402: PPUSH
27403: CALL_OW 250
27407: PUSH
27408: LD_VAR 0 2
27412: PPUSH
27413: CALL_OW 251
27417: PUSH
27418: LD_VAR 0 2
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: PPUSH
27444: CALL_OW 446
27448: GO 27372
27450: POP
27451: POP
// end ;
27452: LD_VAR 0 3
27456: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27457: LD_INT 0
27459: PPUSH
27460: PPUSH
27461: PPUSH
27462: PPUSH
27463: PPUSH
27464: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27465: LD_VAR 0 1
27469: NOT
27470: PUSH
27471: LD_VAR 0 1
27475: PPUSH
27476: CALL_OW 263
27480: PUSH
27481: LD_INT 2
27483: NONEQUAL
27484: OR
27485: IFFALSE 27489
// exit ;
27487: GO 27805
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27489: LD_ADDR_VAR 0 6
27493: PUSH
27494: LD_INT 22
27496: PUSH
27497: LD_VAR 0 1
27501: PPUSH
27502: CALL_OW 255
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: LD_INT 30
27516: PUSH
27517: LD_INT 36
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 34
27526: PUSH
27527: LD_INT 31
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: LIST
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PPUSH
27543: CALL_OW 69
27547: ST_TO_ADDR
// if not tmp then
27548: LD_VAR 0 6
27552: NOT
27553: IFFALSE 27557
// exit ;
27555: GO 27805
// result := [ ] ;
27557: LD_ADDR_VAR 0 2
27561: PUSH
27562: EMPTY
27563: ST_TO_ADDR
// for i in tmp do
27564: LD_ADDR_VAR 0 3
27568: PUSH
27569: LD_VAR 0 6
27573: PUSH
27574: FOR_IN
27575: IFFALSE 27646
// begin t := UnitsInside ( i ) ;
27577: LD_ADDR_VAR 0 4
27581: PUSH
27582: LD_VAR 0 3
27586: PPUSH
27587: CALL_OW 313
27591: ST_TO_ADDR
// if t then
27592: LD_VAR 0 4
27596: IFFALSE 27644
// for j in t do
27598: LD_ADDR_VAR 0 7
27602: PUSH
27603: LD_VAR 0 4
27607: PUSH
27608: FOR_IN
27609: IFFALSE 27642
// result := Replace ( result , result + 1 , j ) ;
27611: LD_ADDR_VAR 0 2
27615: PUSH
27616: LD_VAR 0 2
27620: PPUSH
27621: LD_VAR 0 2
27625: PUSH
27626: LD_INT 1
27628: PLUS
27629: PPUSH
27630: LD_VAR 0 7
27634: PPUSH
27635: CALL_OW 1
27639: ST_TO_ADDR
27640: GO 27608
27642: POP
27643: POP
// end ;
27644: GO 27574
27646: POP
27647: POP
// if not result then
27648: LD_VAR 0 2
27652: NOT
27653: IFFALSE 27657
// exit ;
27655: GO 27805
// mech := result [ 1 ] ;
27657: LD_ADDR_VAR 0 5
27661: PUSH
27662: LD_VAR 0 2
27666: PUSH
27667: LD_INT 1
27669: ARRAY
27670: ST_TO_ADDR
// if result > 1 then
27671: LD_VAR 0 2
27675: PUSH
27676: LD_INT 1
27678: GREATER
27679: IFFALSE 27791
// begin for i = 2 to result do
27681: LD_ADDR_VAR 0 3
27685: PUSH
27686: DOUBLE
27687: LD_INT 2
27689: DEC
27690: ST_TO_ADDR
27691: LD_VAR 0 2
27695: PUSH
27696: FOR_TO
27697: IFFALSE 27789
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27699: LD_ADDR_VAR 0 4
27703: PUSH
27704: LD_VAR 0 2
27708: PUSH
27709: LD_VAR 0 3
27713: ARRAY
27714: PPUSH
27715: LD_INT 3
27717: PPUSH
27718: CALL_OW 259
27722: PUSH
27723: LD_VAR 0 2
27727: PUSH
27728: LD_VAR 0 3
27732: ARRAY
27733: PPUSH
27734: CALL_OW 432
27738: MINUS
27739: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27740: LD_VAR 0 4
27744: PUSH
27745: LD_VAR 0 5
27749: PPUSH
27750: LD_INT 3
27752: PPUSH
27753: CALL_OW 259
27757: PUSH
27758: LD_VAR 0 5
27762: PPUSH
27763: CALL_OW 432
27767: MINUS
27768: GREATEREQUAL
27769: IFFALSE 27787
// mech := result [ i ] ;
27771: LD_ADDR_VAR 0 5
27775: PUSH
27776: LD_VAR 0 2
27780: PUSH
27781: LD_VAR 0 3
27785: ARRAY
27786: ST_TO_ADDR
// end ;
27787: GO 27696
27789: POP
27790: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27791: LD_VAR 0 1
27795: PPUSH
27796: LD_VAR 0 5
27800: PPUSH
27801: CALL_OW 135
// end ;
27805: LD_VAR 0 2
27809: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27810: LD_INT 0
27812: PPUSH
27813: PPUSH
27814: PPUSH
27815: PPUSH
27816: PPUSH
27817: PPUSH
27818: PPUSH
27819: PPUSH
27820: PPUSH
27821: PPUSH
27822: PPUSH
27823: PPUSH
27824: PPUSH
// result := [ ] ;
27825: LD_ADDR_VAR 0 7
27829: PUSH
27830: EMPTY
27831: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27832: LD_VAR 0 1
27836: PPUSH
27837: CALL_OW 266
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: IN
27852: NOT
27853: IFFALSE 27857
// exit ;
27855: GO 29491
// if name then
27857: LD_VAR 0 3
27861: IFFALSE 27877
// SetBName ( base_dep , name ) ;
27863: LD_VAR 0 1
27867: PPUSH
27868: LD_VAR 0 3
27872: PPUSH
27873: CALL_OW 500
// base := GetBase ( base_dep ) ;
27877: LD_ADDR_VAR 0 15
27881: PUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL_OW 274
27891: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27892: LD_ADDR_VAR 0 16
27896: PUSH
27897: LD_VAR 0 1
27901: PPUSH
27902: CALL_OW 255
27906: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27907: LD_ADDR_VAR 0 17
27911: PUSH
27912: LD_VAR 0 1
27916: PPUSH
27917: CALL_OW 248
27921: ST_TO_ADDR
// if sources then
27922: LD_VAR 0 5
27926: IFFALSE 27973
// for i = 1 to 3 do
27928: LD_ADDR_VAR 0 8
27932: PUSH
27933: DOUBLE
27934: LD_INT 1
27936: DEC
27937: ST_TO_ADDR
27938: LD_INT 3
27940: PUSH
27941: FOR_TO
27942: IFFALSE 27971
// AddResourceType ( base , i , sources [ i ] ) ;
27944: LD_VAR 0 15
27948: PPUSH
27949: LD_VAR 0 8
27953: PPUSH
27954: LD_VAR 0 5
27958: PUSH
27959: LD_VAR 0 8
27963: ARRAY
27964: PPUSH
27965: CALL_OW 276
27969: GO 27941
27971: POP
27972: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27973: LD_ADDR_VAR 0 18
27977: PUSH
27978: LD_VAR 0 15
27982: PPUSH
27983: LD_VAR 0 2
27987: PPUSH
27988: LD_INT 1
27990: PPUSH
27991: CALL 27234 0 3
27995: ST_TO_ADDR
// InitHc ;
27996: CALL_OW 19
// InitUc ;
28000: CALL_OW 18
// uc_side := side ;
28004: LD_ADDR_OWVAR 20
28008: PUSH
28009: LD_VAR 0 16
28013: ST_TO_ADDR
// uc_nation := nation ;
28014: LD_ADDR_OWVAR 21
28018: PUSH
28019: LD_VAR 0 17
28023: ST_TO_ADDR
// if buildings then
28024: LD_VAR 0 18
28028: IFFALSE 29350
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28030: LD_ADDR_VAR 0 19
28034: PUSH
28035: LD_VAR 0 18
28039: PPUSH
28040: LD_INT 2
28042: PUSH
28043: LD_INT 30
28045: PUSH
28046: LD_INT 29
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 30
28055: PUSH
28056: LD_INT 30
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 72
28072: ST_TO_ADDR
// if tmp then
28073: LD_VAR 0 19
28077: IFFALSE 28125
// for i in tmp do
28079: LD_ADDR_VAR 0 8
28083: PUSH
28084: LD_VAR 0 19
28088: PUSH
28089: FOR_IN
28090: IFFALSE 28123
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28092: LD_VAR 0 8
28096: PPUSH
28097: CALL_OW 250
28101: PPUSH
28102: LD_VAR 0 8
28106: PPUSH
28107: CALL_OW 251
28111: PPUSH
28112: LD_VAR 0 16
28116: PPUSH
28117: CALL_OW 441
28121: GO 28089
28123: POP
28124: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28125: LD_VAR 0 18
28129: PPUSH
28130: LD_INT 2
28132: PUSH
28133: LD_INT 30
28135: PUSH
28136: LD_INT 32
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 30
28145: PUSH
28146: LD_INT 33
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: PPUSH
28158: CALL_OW 72
28162: IFFALSE 28250
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28164: LD_ADDR_VAR 0 8
28168: PUSH
28169: LD_VAR 0 18
28173: PPUSH
28174: LD_INT 2
28176: PUSH
28177: LD_INT 30
28179: PUSH
28180: LD_INT 32
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 30
28189: PUSH
28190: LD_INT 33
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: PPUSH
28202: CALL_OW 72
28206: PUSH
28207: FOR_IN
28208: IFFALSE 28248
// begin if not GetBWeapon ( i ) then
28210: LD_VAR 0 8
28214: PPUSH
28215: CALL_OW 269
28219: NOT
28220: IFFALSE 28246
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28222: LD_VAR 0 8
28226: PPUSH
28227: LD_VAR 0 8
28231: PPUSH
28232: LD_VAR 0 2
28236: PPUSH
28237: CALL 29496 0 2
28241: PPUSH
28242: CALL_OW 431
// end ;
28246: GO 28207
28248: POP
28249: POP
// end ; for i = 1 to personel do
28250: LD_ADDR_VAR 0 8
28254: PUSH
28255: DOUBLE
28256: LD_INT 1
28258: DEC
28259: ST_TO_ADDR
28260: LD_VAR 0 6
28264: PUSH
28265: FOR_TO
28266: IFFALSE 29330
// begin if i > 4 then
28268: LD_VAR 0 8
28272: PUSH
28273: LD_INT 4
28275: GREATER
28276: IFFALSE 28280
// break ;
28278: GO 29330
// case i of 1 :
28280: LD_VAR 0 8
28284: PUSH
28285: LD_INT 1
28287: DOUBLE
28288: EQUAL
28289: IFTRUE 28293
28291: GO 28373
28293: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28294: LD_ADDR_VAR 0 12
28298: PUSH
28299: LD_VAR 0 18
28303: PPUSH
28304: LD_INT 22
28306: PUSH
28307: LD_VAR 0 16
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 58
28318: PUSH
28319: EMPTY
28320: LIST
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: LD_INT 30
28327: PUSH
28328: LD_INT 32
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 30
28337: PUSH
28338: LD_INT 4
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 30
28347: PUSH
28348: LD_INT 5
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: PPUSH
28366: CALL_OW 72
28370: ST_TO_ADDR
28371: GO 28595
28373: LD_INT 2
28375: DOUBLE
28376: EQUAL
28377: IFTRUE 28381
28379: GO 28443
28381: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28382: LD_ADDR_VAR 0 12
28386: PUSH
28387: LD_VAR 0 18
28391: PPUSH
28392: LD_INT 22
28394: PUSH
28395: LD_VAR 0 16
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: LD_INT 30
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 30
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 72
28440: ST_TO_ADDR
28441: GO 28595
28443: LD_INT 3
28445: DOUBLE
28446: EQUAL
28447: IFTRUE 28451
28449: GO 28513
28451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28452: LD_ADDR_VAR 0 12
28456: PUSH
28457: LD_VAR 0 18
28461: PPUSH
28462: LD_INT 22
28464: PUSH
28465: LD_VAR 0 16
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: LD_INT 30
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 30
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: LIST
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PPUSH
28506: CALL_OW 72
28510: ST_TO_ADDR
28511: GO 28595
28513: LD_INT 4
28515: DOUBLE
28516: EQUAL
28517: IFTRUE 28521
28519: GO 28594
28521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28522: LD_ADDR_VAR 0 12
28526: PUSH
28527: LD_VAR 0 18
28531: PPUSH
28532: LD_INT 22
28534: PUSH
28535: LD_VAR 0 16
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: LD_INT 30
28549: PUSH
28550: LD_INT 6
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 30
28559: PUSH
28560: LD_INT 7
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 30
28569: PUSH
28570: LD_INT 8
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PPUSH
28587: CALL_OW 72
28591: ST_TO_ADDR
28592: GO 28595
28594: POP
// if i = 1 then
28595: LD_VAR 0 8
28599: PUSH
28600: LD_INT 1
28602: EQUAL
28603: IFFALSE 28714
// begin tmp := [ ] ;
28605: LD_ADDR_VAR 0 19
28609: PUSH
28610: EMPTY
28611: ST_TO_ADDR
// for j in f do
28612: LD_ADDR_VAR 0 9
28616: PUSH
28617: LD_VAR 0 12
28621: PUSH
28622: FOR_IN
28623: IFFALSE 28696
// if GetBType ( j ) = b_bunker then
28625: LD_VAR 0 9
28629: PPUSH
28630: CALL_OW 266
28634: PUSH
28635: LD_INT 32
28637: EQUAL
28638: IFFALSE 28665
// tmp := Insert ( tmp , 1 , j ) else
28640: LD_ADDR_VAR 0 19
28644: PUSH
28645: LD_VAR 0 19
28649: PPUSH
28650: LD_INT 1
28652: PPUSH
28653: LD_VAR 0 9
28657: PPUSH
28658: CALL_OW 2
28662: ST_TO_ADDR
28663: GO 28694
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28665: LD_ADDR_VAR 0 19
28669: PUSH
28670: LD_VAR 0 19
28674: PPUSH
28675: LD_VAR 0 19
28679: PUSH
28680: LD_INT 1
28682: PLUS
28683: PPUSH
28684: LD_VAR 0 9
28688: PPUSH
28689: CALL_OW 2
28693: ST_TO_ADDR
28694: GO 28622
28696: POP
28697: POP
// if tmp then
28698: LD_VAR 0 19
28702: IFFALSE 28714
// f := tmp ;
28704: LD_ADDR_VAR 0 12
28708: PUSH
28709: LD_VAR 0 19
28713: ST_TO_ADDR
// end ; x := personel [ i ] ;
28714: LD_ADDR_VAR 0 13
28718: PUSH
28719: LD_VAR 0 6
28723: PUSH
28724: LD_VAR 0 8
28728: ARRAY
28729: ST_TO_ADDR
// if x = - 1 then
28730: LD_VAR 0 13
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: EQUAL
28739: IFFALSE 28948
// begin for j in f do
28741: LD_ADDR_VAR 0 9
28745: PUSH
28746: LD_VAR 0 12
28750: PUSH
28751: FOR_IN
28752: IFFALSE 28944
// repeat InitHc ;
28754: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28758: LD_VAR 0 9
28762: PPUSH
28763: CALL_OW 266
28767: PUSH
28768: LD_INT 5
28770: EQUAL
28771: IFFALSE 28841
// begin if UnitsInside ( j ) < 3 then
28773: LD_VAR 0 9
28777: PPUSH
28778: CALL_OW 313
28782: PUSH
28783: LD_INT 3
28785: LESS
28786: IFFALSE 28822
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28788: LD_INT 0
28790: PPUSH
28791: LD_INT 5
28793: PUSH
28794: LD_INT 8
28796: PUSH
28797: LD_INT 9
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: PUSH
28805: LD_VAR 0 17
28809: ARRAY
28810: PPUSH
28811: LD_VAR 0 4
28815: PPUSH
28816: CALL_OW 380
28820: GO 28839
// PrepareHuman ( false , i , skill ) ;
28822: LD_INT 0
28824: PPUSH
28825: LD_VAR 0 8
28829: PPUSH
28830: LD_VAR 0 4
28834: PPUSH
28835: CALL_OW 380
// end else
28839: GO 28858
// PrepareHuman ( false , i , skill ) ;
28841: LD_INT 0
28843: PPUSH
28844: LD_VAR 0 8
28848: PPUSH
28849: LD_VAR 0 4
28853: PPUSH
28854: CALL_OW 380
// un := CreateHuman ;
28858: LD_ADDR_VAR 0 14
28862: PUSH
28863: CALL_OW 44
28867: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28868: LD_ADDR_VAR 0 7
28872: PUSH
28873: LD_VAR 0 7
28877: PPUSH
28878: LD_INT 1
28880: PPUSH
28881: LD_VAR 0 14
28885: PPUSH
28886: CALL_OW 2
28890: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28891: LD_VAR 0 14
28895: PPUSH
28896: LD_VAR 0 9
28900: PPUSH
28901: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28905: LD_VAR 0 9
28909: PPUSH
28910: CALL_OW 313
28914: PUSH
28915: LD_INT 6
28917: EQUAL
28918: PUSH
28919: LD_VAR 0 9
28923: PPUSH
28924: CALL_OW 266
28928: PUSH
28929: LD_INT 32
28931: PUSH
28932: LD_INT 31
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: IN
28939: OR
28940: IFFALSE 28754
28942: GO 28751
28944: POP
28945: POP
// end else
28946: GO 29328
// for j = 1 to x do
28948: LD_ADDR_VAR 0 9
28952: PUSH
28953: DOUBLE
28954: LD_INT 1
28956: DEC
28957: ST_TO_ADDR
28958: LD_VAR 0 13
28962: PUSH
28963: FOR_TO
28964: IFFALSE 29326
// begin InitHc ;
28966: CALL_OW 19
// if not f then
28970: LD_VAR 0 12
28974: NOT
28975: IFFALSE 29064
// begin PrepareHuman ( false , i , skill ) ;
28977: LD_INT 0
28979: PPUSH
28980: LD_VAR 0 8
28984: PPUSH
28985: LD_VAR 0 4
28989: PPUSH
28990: CALL_OW 380
// un := CreateHuman ;
28994: LD_ADDR_VAR 0 14
28998: PUSH
28999: CALL_OW 44
29003: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29004: LD_ADDR_VAR 0 7
29008: PUSH
29009: LD_VAR 0 7
29013: PPUSH
29014: LD_INT 1
29016: PPUSH
29017: LD_VAR 0 14
29021: PPUSH
29022: CALL_OW 2
29026: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29027: LD_VAR 0 14
29031: PPUSH
29032: LD_VAR 0 1
29036: PPUSH
29037: CALL_OW 250
29041: PPUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 251
29051: PPUSH
29052: LD_INT 10
29054: PPUSH
29055: LD_INT 0
29057: PPUSH
29058: CALL_OW 50
// continue ;
29062: GO 28963
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29064: LD_VAR 0 12
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: PPUSH
29073: CALL_OW 313
29077: PUSH
29078: LD_VAR 0 12
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: CALL_OW 266
29091: PUSH
29092: LD_INT 32
29094: PUSH
29095: LD_INT 31
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: IN
29102: AND
29103: PUSH
29104: LD_VAR 0 12
29108: PUSH
29109: LD_INT 1
29111: ARRAY
29112: PPUSH
29113: CALL_OW 313
29117: PUSH
29118: LD_INT 6
29120: EQUAL
29121: OR
29122: IFFALSE 29142
// f := Delete ( f , 1 ) ;
29124: LD_ADDR_VAR 0 12
29128: PUSH
29129: LD_VAR 0 12
29133: PPUSH
29134: LD_INT 1
29136: PPUSH
29137: CALL_OW 3
29141: ST_TO_ADDR
// if not f then
29142: LD_VAR 0 12
29146: NOT
29147: IFFALSE 29165
// begin x := x + 2 ;
29149: LD_ADDR_VAR 0 13
29153: PUSH
29154: LD_VAR 0 13
29158: PUSH
29159: LD_INT 2
29161: PLUS
29162: ST_TO_ADDR
// continue ;
29163: GO 28963
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29165: LD_VAR 0 12
29169: PUSH
29170: LD_INT 1
29172: ARRAY
29173: PPUSH
29174: CALL_OW 266
29178: PUSH
29179: LD_INT 5
29181: EQUAL
29182: IFFALSE 29256
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29184: LD_VAR 0 12
29188: PUSH
29189: LD_INT 1
29191: ARRAY
29192: PPUSH
29193: CALL_OW 313
29197: PUSH
29198: LD_INT 3
29200: LESS
29201: IFFALSE 29237
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29203: LD_INT 0
29205: PPUSH
29206: LD_INT 5
29208: PUSH
29209: LD_INT 8
29211: PUSH
29212: LD_INT 9
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: PUSH
29220: LD_VAR 0 17
29224: ARRAY
29225: PPUSH
29226: LD_VAR 0 4
29230: PPUSH
29231: CALL_OW 380
29235: GO 29254
// PrepareHuman ( false , i , skill ) ;
29237: LD_INT 0
29239: PPUSH
29240: LD_VAR 0 8
29244: PPUSH
29245: LD_VAR 0 4
29249: PPUSH
29250: CALL_OW 380
// end else
29254: GO 29273
// PrepareHuman ( false , i , skill ) ;
29256: LD_INT 0
29258: PPUSH
29259: LD_VAR 0 8
29263: PPUSH
29264: LD_VAR 0 4
29268: PPUSH
29269: CALL_OW 380
// un := CreateHuman ;
29273: LD_ADDR_VAR 0 14
29277: PUSH
29278: CALL_OW 44
29282: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29283: LD_ADDR_VAR 0 7
29287: PUSH
29288: LD_VAR 0 7
29292: PPUSH
29293: LD_INT 1
29295: PPUSH
29296: LD_VAR 0 14
29300: PPUSH
29301: CALL_OW 2
29305: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29306: LD_VAR 0 14
29310: PPUSH
29311: LD_VAR 0 12
29315: PUSH
29316: LD_INT 1
29318: ARRAY
29319: PPUSH
29320: CALL_OW 52
// end ;
29324: GO 28963
29326: POP
29327: POP
// end ;
29328: GO 28265
29330: POP
29331: POP
// result := result ^ buildings ;
29332: LD_ADDR_VAR 0 7
29336: PUSH
29337: LD_VAR 0 7
29341: PUSH
29342: LD_VAR 0 18
29346: ADD
29347: ST_TO_ADDR
// end else
29348: GO 29491
// begin for i = 1 to personel do
29350: LD_ADDR_VAR 0 8
29354: PUSH
29355: DOUBLE
29356: LD_INT 1
29358: DEC
29359: ST_TO_ADDR
29360: LD_VAR 0 6
29364: PUSH
29365: FOR_TO
29366: IFFALSE 29489
// begin if i > 4 then
29368: LD_VAR 0 8
29372: PUSH
29373: LD_INT 4
29375: GREATER
29376: IFFALSE 29380
// break ;
29378: GO 29489
// x := personel [ i ] ;
29380: LD_ADDR_VAR 0 13
29384: PUSH
29385: LD_VAR 0 6
29389: PUSH
29390: LD_VAR 0 8
29394: ARRAY
29395: ST_TO_ADDR
// if x = - 1 then
29396: LD_VAR 0 13
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: EQUAL
29405: IFFALSE 29409
// continue ;
29407: GO 29365
// PrepareHuman ( false , i , skill ) ;
29409: LD_INT 0
29411: PPUSH
29412: LD_VAR 0 8
29416: PPUSH
29417: LD_VAR 0 4
29421: PPUSH
29422: CALL_OW 380
// un := CreateHuman ;
29426: LD_ADDR_VAR 0 14
29430: PUSH
29431: CALL_OW 44
29435: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29436: LD_VAR 0 14
29440: PPUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 250
29450: PPUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 251
29460: PPUSH
29461: LD_INT 10
29463: PPUSH
29464: LD_INT 0
29466: PPUSH
29467: CALL_OW 50
// result := result ^ un ;
29471: LD_ADDR_VAR 0 7
29475: PUSH
29476: LD_VAR 0 7
29480: PUSH
29481: LD_VAR 0 14
29485: ADD
29486: ST_TO_ADDR
// end ;
29487: GO 29365
29489: POP
29490: POP
// end ; end ;
29491: LD_VAR 0 7
29495: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29496: LD_INT 0
29498: PPUSH
29499: PPUSH
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
29513: PPUSH
// result := false ;
29514: LD_ADDR_VAR 0 3
29518: PUSH
29519: LD_INT 0
29521: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29522: LD_VAR 0 1
29526: NOT
29527: PUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 266
29537: PUSH
29538: LD_INT 32
29540: PUSH
29541: LD_INT 33
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: IN
29548: NOT
29549: OR
29550: IFFALSE 29554
// exit ;
29552: GO 30663
// nat := GetNation ( tower ) ;
29554: LD_ADDR_VAR 0 12
29558: PUSH
29559: LD_VAR 0 1
29563: PPUSH
29564: CALL_OW 248
29568: ST_TO_ADDR
// side := GetSide ( tower ) ;
29569: LD_ADDR_VAR 0 16
29573: PUSH
29574: LD_VAR 0 1
29578: PPUSH
29579: CALL_OW 255
29583: ST_TO_ADDR
// x := GetX ( tower ) ;
29584: LD_ADDR_VAR 0 10
29588: PUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 250
29598: ST_TO_ADDR
// y := GetY ( tower ) ;
29599: LD_ADDR_VAR 0 11
29603: PUSH
29604: LD_VAR 0 1
29608: PPUSH
29609: CALL_OW 251
29613: ST_TO_ADDR
// if not x or not y then
29614: LD_VAR 0 10
29618: NOT
29619: PUSH
29620: LD_VAR 0 11
29624: NOT
29625: OR
29626: IFFALSE 29630
// exit ;
29628: GO 30663
// weapon := 0 ;
29630: LD_ADDR_VAR 0 18
29634: PUSH
29635: LD_INT 0
29637: ST_TO_ADDR
// fac_list := [ ] ;
29638: LD_ADDR_VAR 0 17
29642: PUSH
29643: EMPTY
29644: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29645: LD_ADDR_VAR 0 6
29649: PUSH
29650: LD_VAR 0 1
29654: PPUSH
29655: CALL_OW 274
29659: PPUSH
29660: LD_VAR 0 2
29664: PPUSH
29665: LD_INT 0
29667: PPUSH
29668: CALL 27234 0 3
29672: PPUSH
29673: LD_INT 30
29675: PUSH
29676: LD_INT 3
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PPUSH
29683: CALL_OW 72
29687: ST_TO_ADDR
// if not factories then
29688: LD_VAR 0 6
29692: NOT
29693: IFFALSE 29697
// exit ;
29695: GO 30663
// for i in factories do
29697: LD_ADDR_VAR 0 8
29701: PUSH
29702: LD_VAR 0 6
29706: PUSH
29707: FOR_IN
29708: IFFALSE 29733
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29710: LD_ADDR_VAR 0 17
29714: PUSH
29715: LD_VAR 0 17
29719: PUSH
29720: LD_VAR 0 8
29724: PPUSH
29725: CALL_OW 478
29729: UNION
29730: ST_TO_ADDR
29731: GO 29707
29733: POP
29734: POP
// if not fac_list then
29735: LD_VAR 0 17
29739: NOT
29740: IFFALSE 29744
// exit ;
29742: GO 30663
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29744: LD_ADDR_VAR 0 5
29748: PUSH
29749: LD_INT 4
29751: PUSH
29752: LD_INT 5
29754: PUSH
29755: LD_INT 9
29757: PUSH
29758: LD_INT 10
29760: PUSH
29761: LD_INT 6
29763: PUSH
29764: LD_INT 7
29766: PUSH
29767: LD_INT 11
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 27
29781: PUSH
29782: LD_INT 28
29784: PUSH
29785: LD_INT 26
29787: PUSH
29788: LD_INT 30
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 43
29799: PUSH
29800: LD_INT 44
29802: PUSH
29803: LD_INT 46
29805: PUSH
29806: LD_INT 45
29808: PUSH
29809: LD_INT 47
29811: PUSH
29812: LD_INT 49
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: PUSH
29828: LD_VAR 0 12
29832: ARRAY
29833: ST_TO_ADDR
// list := list isect fac_list ;
29834: LD_ADDR_VAR 0 5
29838: PUSH
29839: LD_VAR 0 5
29843: PUSH
29844: LD_VAR 0 17
29848: ISECT
29849: ST_TO_ADDR
// if not list then
29850: LD_VAR 0 5
29854: NOT
29855: IFFALSE 29859
// exit ;
29857: GO 30663
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29859: LD_VAR 0 12
29863: PUSH
29864: LD_INT 3
29866: EQUAL
29867: PUSH
29868: LD_INT 49
29870: PUSH
29871: LD_VAR 0 5
29875: IN
29876: AND
29877: PUSH
29878: LD_INT 31
29880: PPUSH
29881: LD_VAR 0 16
29885: PPUSH
29886: CALL_OW 321
29890: PUSH
29891: LD_INT 2
29893: EQUAL
29894: AND
29895: IFFALSE 29955
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29897: LD_INT 22
29899: PUSH
29900: LD_VAR 0 16
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 35
29911: PUSH
29912: LD_INT 49
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 91
29921: PUSH
29922: LD_VAR 0 1
29926: PUSH
29927: LD_INT 10
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: NOT
29945: IFFALSE 29955
// weapon := ru_time_lapser ;
29947: LD_ADDR_VAR 0 18
29951: PUSH
29952: LD_INT 49
29954: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29955: LD_VAR 0 12
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: IN
29970: PUSH
29971: LD_INT 11
29973: PUSH
29974: LD_VAR 0 5
29978: IN
29979: PUSH
29980: LD_INT 30
29982: PUSH
29983: LD_VAR 0 5
29987: IN
29988: OR
29989: AND
29990: PUSH
29991: LD_INT 6
29993: PPUSH
29994: LD_VAR 0 16
29998: PPUSH
29999: CALL_OW 321
30003: PUSH
30004: LD_INT 2
30006: EQUAL
30007: AND
30008: IFFALSE 30173
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30010: LD_INT 22
30012: PUSH
30013: LD_VAR 0 16
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: LD_INT 35
30027: PUSH
30028: LD_INT 11
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 35
30037: PUSH
30038: LD_INT 30
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 91
30052: PUSH
30053: LD_VAR 0 1
30057: PUSH
30058: LD_INT 18
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: LIST
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: PPUSH
30071: CALL_OW 69
30075: NOT
30076: PUSH
30077: LD_INT 22
30079: PUSH
30080: LD_VAR 0 16
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 30
30094: PUSH
30095: LD_INT 32
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 30
30104: PUSH
30105: LD_INT 33
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 91
30119: PUSH
30120: LD_VAR 0 1
30124: PUSH
30125: LD_INT 12
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: PPUSH
30141: CALL_OW 69
30145: PUSH
30146: LD_INT 2
30148: GREATER
30149: AND
30150: IFFALSE 30173
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30152: LD_ADDR_VAR 0 18
30156: PUSH
30157: LD_INT 11
30159: PUSH
30160: LD_INT 30
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_VAR 0 12
30171: ARRAY
30172: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30173: LD_VAR 0 18
30177: NOT
30178: PUSH
30179: LD_INT 40
30181: PPUSH
30182: LD_VAR 0 16
30186: PPUSH
30187: CALL_OW 321
30191: PUSH
30192: LD_INT 2
30194: EQUAL
30195: AND
30196: PUSH
30197: LD_INT 7
30199: PUSH
30200: LD_VAR 0 5
30204: IN
30205: PUSH
30206: LD_INT 28
30208: PUSH
30209: LD_VAR 0 5
30213: IN
30214: OR
30215: PUSH
30216: LD_INT 45
30218: PUSH
30219: LD_VAR 0 5
30223: IN
30224: OR
30225: AND
30226: IFFALSE 30480
// begin hex := GetHexInfo ( x , y ) ;
30228: LD_ADDR_VAR 0 4
30232: PUSH
30233: LD_VAR 0 10
30237: PPUSH
30238: LD_VAR 0 11
30242: PPUSH
30243: CALL_OW 546
30247: ST_TO_ADDR
// if hex [ 1 ] then
30248: LD_VAR 0 4
30252: PUSH
30253: LD_INT 1
30255: ARRAY
30256: IFFALSE 30260
// exit ;
30258: GO 30663
// height := hex [ 2 ] ;
30260: LD_ADDR_VAR 0 15
30264: PUSH
30265: LD_VAR 0 4
30269: PUSH
30270: LD_INT 2
30272: ARRAY
30273: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30274: LD_ADDR_VAR 0 14
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 3
30287: PUSH
30288: LD_INT 5
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: ST_TO_ADDR
// for i in tmp do
30297: LD_ADDR_VAR 0 8
30301: PUSH
30302: LD_VAR 0 14
30306: PUSH
30307: FOR_IN
30308: IFFALSE 30478
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30310: LD_ADDR_VAR 0 9
30314: PUSH
30315: LD_VAR 0 10
30319: PPUSH
30320: LD_VAR 0 8
30324: PPUSH
30325: LD_INT 5
30327: PPUSH
30328: CALL_OW 272
30332: PUSH
30333: LD_VAR 0 11
30337: PPUSH
30338: LD_VAR 0 8
30342: PPUSH
30343: LD_INT 5
30345: PPUSH
30346: CALL_OW 273
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30355: LD_VAR 0 9
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: PPUSH
30364: LD_VAR 0 9
30368: PUSH
30369: LD_INT 2
30371: ARRAY
30372: PPUSH
30373: CALL_OW 488
30377: IFFALSE 30476
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30379: LD_ADDR_VAR 0 4
30383: PUSH
30384: LD_VAR 0 9
30388: PUSH
30389: LD_INT 1
30391: ARRAY
30392: PPUSH
30393: LD_VAR 0 9
30397: PUSH
30398: LD_INT 2
30400: ARRAY
30401: PPUSH
30402: CALL_OW 546
30406: ST_TO_ADDR
// if hex [ 1 ] then
30407: LD_VAR 0 4
30411: PUSH
30412: LD_INT 1
30414: ARRAY
30415: IFFALSE 30419
// continue ;
30417: GO 30307
// h := hex [ 2 ] ;
30419: LD_ADDR_VAR 0 13
30423: PUSH
30424: LD_VAR 0 4
30428: PUSH
30429: LD_INT 2
30431: ARRAY
30432: ST_TO_ADDR
// if h + 7 < height then
30433: LD_VAR 0 13
30437: PUSH
30438: LD_INT 7
30440: PLUS
30441: PUSH
30442: LD_VAR 0 15
30446: LESS
30447: IFFALSE 30476
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30449: LD_ADDR_VAR 0 18
30453: PUSH
30454: LD_INT 7
30456: PUSH
30457: LD_INT 28
30459: PUSH
30460: LD_INT 45
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: PUSH
30468: LD_VAR 0 12
30472: ARRAY
30473: ST_TO_ADDR
// break ;
30474: GO 30478
// end ; end ; end ;
30476: GO 30307
30478: POP
30479: POP
// end ; if not weapon then
30480: LD_VAR 0 18
30484: NOT
30485: IFFALSE 30545
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30487: LD_ADDR_VAR 0 5
30491: PUSH
30492: LD_VAR 0 5
30496: PUSH
30497: LD_INT 11
30499: PUSH
30500: LD_INT 30
30502: PUSH
30503: LD_INT 49
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: DIFF
30511: ST_TO_ADDR
// if not list then
30512: LD_VAR 0 5
30516: NOT
30517: IFFALSE 30521
// exit ;
30519: GO 30663
// weapon := list [ rand ( 1 , list ) ] ;
30521: LD_ADDR_VAR 0 18
30525: PUSH
30526: LD_VAR 0 5
30530: PUSH
30531: LD_INT 1
30533: PPUSH
30534: LD_VAR 0 5
30538: PPUSH
30539: CALL_OW 12
30543: ARRAY
30544: ST_TO_ADDR
// end ; if weapon then
30545: LD_VAR 0 18
30549: IFFALSE 30663
// begin tmp := CostOfWeapon ( weapon ) ;
30551: LD_ADDR_VAR 0 14
30555: PUSH
30556: LD_VAR 0 18
30560: PPUSH
30561: CALL_OW 451
30565: ST_TO_ADDR
// j := GetBase ( tower ) ;
30566: LD_ADDR_VAR 0 9
30570: PUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 274
30580: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30581: LD_VAR 0 9
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 275
30593: PUSH
30594: LD_VAR 0 14
30598: PUSH
30599: LD_INT 1
30601: ARRAY
30602: GREATEREQUAL
30603: PUSH
30604: LD_VAR 0 9
30608: PPUSH
30609: LD_INT 2
30611: PPUSH
30612: CALL_OW 275
30616: PUSH
30617: LD_VAR 0 14
30621: PUSH
30622: LD_INT 2
30624: ARRAY
30625: GREATEREQUAL
30626: AND
30627: PUSH
30628: LD_VAR 0 9
30632: PPUSH
30633: LD_INT 3
30635: PPUSH
30636: CALL_OW 275
30640: PUSH
30641: LD_VAR 0 14
30645: PUSH
30646: LD_INT 3
30648: ARRAY
30649: GREATEREQUAL
30650: AND
30651: IFFALSE 30663
// result := weapon ;
30653: LD_ADDR_VAR 0 3
30657: PUSH
30658: LD_VAR 0 18
30662: ST_TO_ADDR
// end ; end ;
30663: LD_VAR 0 3
30667: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30668: LD_INT 0
30670: PPUSH
30671: PPUSH
// result := true ;
30672: LD_ADDR_VAR 0 3
30676: PUSH
30677: LD_INT 1
30679: ST_TO_ADDR
// if array1 = array2 then
30680: LD_VAR 0 1
30684: PUSH
30685: LD_VAR 0 2
30689: EQUAL
30690: IFFALSE 30750
// begin for i = 1 to array1 do
30692: LD_ADDR_VAR 0 4
30696: PUSH
30697: DOUBLE
30698: LD_INT 1
30700: DEC
30701: ST_TO_ADDR
30702: LD_VAR 0 1
30706: PUSH
30707: FOR_TO
30708: IFFALSE 30746
// if array1 [ i ] <> array2 [ i ] then
30710: LD_VAR 0 1
30714: PUSH
30715: LD_VAR 0 4
30719: ARRAY
30720: PUSH
30721: LD_VAR 0 2
30725: PUSH
30726: LD_VAR 0 4
30730: ARRAY
30731: NONEQUAL
30732: IFFALSE 30744
// begin result := false ;
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_INT 0
30741: ST_TO_ADDR
// break ;
30742: GO 30746
// end ;
30744: GO 30707
30746: POP
30747: POP
// end else
30748: GO 30758
// result := false ;
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: LD_INT 0
30757: ST_TO_ADDR
// end ;
30758: LD_VAR 0 3
30762: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30763: LD_INT 0
30765: PPUSH
30766: PPUSH
// if not array1 or not array2 then
30767: LD_VAR 0 1
30771: NOT
30772: PUSH
30773: LD_VAR 0 2
30777: NOT
30778: OR
30779: IFFALSE 30783
// exit ;
30781: GO 30847
// result := true ;
30783: LD_ADDR_VAR 0 3
30787: PUSH
30788: LD_INT 1
30790: ST_TO_ADDR
// for i = 1 to array1 do
30791: LD_ADDR_VAR 0 4
30795: PUSH
30796: DOUBLE
30797: LD_INT 1
30799: DEC
30800: ST_TO_ADDR
30801: LD_VAR 0 1
30805: PUSH
30806: FOR_TO
30807: IFFALSE 30845
// if array1 [ i ] <> array2 [ i ] then
30809: LD_VAR 0 1
30813: PUSH
30814: LD_VAR 0 4
30818: ARRAY
30819: PUSH
30820: LD_VAR 0 2
30824: PUSH
30825: LD_VAR 0 4
30829: ARRAY
30830: NONEQUAL
30831: IFFALSE 30843
// begin result := false ;
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_INT 0
30840: ST_TO_ADDR
// break ;
30841: GO 30845
// end ;
30843: GO 30806
30845: POP
30846: POP
// end ;
30847: LD_VAR 0 3
30851: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30852: LD_INT 0
30854: PPUSH
30855: PPUSH
30856: PPUSH
// pom := GetBase ( fac ) ;
30857: LD_ADDR_VAR 0 5
30861: PUSH
30862: LD_VAR 0 1
30866: PPUSH
30867: CALL_OW 274
30871: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30872: LD_ADDR_VAR 0 4
30876: PUSH
30877: LD_VAR 0 2
30881: PUSH
30882: LD_INT 1
30884: ARRAY
30885: PPUSH
30886: LD_VAR 0 2
30890: PUSH
30891: LD_INT 2
30893: ARRAY
30894: PPUSH
30895: LD_VAR 0 2
30899: PUSH
30900: LD_INT 3
30902: ARRAY
30903: PPUSH
30904: LD_VAR 0 2
30908: PUSH
30909: LD_INT 4
30911: ARRAY
30912: PPUSH
30913: CALL_OW 449
30917: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30918: LD_ADDR_VAR 0 3
30922: PUSH
30923: LD_VAR 0 5
30927: PPUSH
30928: LD_INT 1
30930: PPUSH
30931: CALL_OW 275
30935: PUSH
30936: LD_VAR 0 4
30940: PUSH
30941: LD_INT 1
30943: ARRAY
30944: GREATEREQUAL
30945: PUSH
30946: LD_VAR 0 5
30950: PPUSH
30951: LD_INT 2
30953: PPUSH
30954: CALL_OW 275
30958: PUSH
30959: LD_VAR 0 4
30963: PUSH
30964: LD_INT 2
30966: ARRAY
30967: GREATEREQUAL
30968: AND
30969: PUSH
30970: LD_VAR 0 5
30974: PPUSH
30975: LD_INT 3
30977: PPUSH
30978: CALL_OW 275
30982: PUSH
30983: LD_VAR 0 4
30987: PUSH
30988: LD_INT 3
30990: ARRAY
30991: GREATEREQUAL
30992: AND
30993: ST_TO_ADDR
// end ;
30994: LD_VAR 0 3
30998: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30999: LD_INT 0
31001: PPUSH
31002: PPUSH
31003: PPUSH
31004: PPUSH
// pom := GetBase ( building ) ;
31005: LD_ADDR_VAR 0 3
31009: PUSH
31010: LD_VAR 0 1
31014: PPUSH
31015: CALL_OW 274
31019: ST_TO_ADDR
// if not pom then
31020: LD_VAR 0 3
31024: NOT
31025: IFFALSE 31029
// exit ;
31027: GO 31199
// btype := GetBType ( building ) ;
31029: LD_ADDR_VAR 0 5
31033: PUSH
31034: LD_VAR 0 1
31038: PPUSH
31039: CALL_OW 266
31043: ST_TO_ADDR
// if btype = b_armoury then
31044: LD_VAR 0 5
31048: PUSH
31049: LD_INT 4
31051: EQUAL
31052: IFFALSE 31062
// btype := b_barracks ;
31054: LD_ADDR_VAR 0 5
31058: PUSH
31059: LD_INT 5
31061: ST_TO_ADDR
// if btype = b_depot then
31062: LD_VAR 0 5
31066: PUSH
31067: LD_INT 0
31069: EQUAL
31070: IFFALSE 31080
// btype := b_warehouse ;
31072: LD_ADDR_VAR 0 5
31076: PUSH
31077: LD_INT 1
31079: ST_TO_ADDR
// if btype = b_workshop then
31080: LD_VAR 0 5
31084: PUSH
31085: LD_INT 2
31087: EQUAL
31088: IFFALSE 31098
// btype := b_factory ;
31090: LD_ADDR_VAR 0 5
31094: PUSH
31095: LD_INT 3
31097: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31098: LD_ADDR_VAR 0 4
31102: PUSH
31103: LD_VAR 0 5
31107: PPUSH
31108: LD_VAR 0 1
31112: PPUSH
31113: CALL_OW 248
31117: PPUSH
31118: CALL_OW 450
31122: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31123: LD_ADDR_VAR 0 2
31127: PUSH
31128: LD_VAR 0 3
31132: PPUSH
31133: LD_INT 1
31135: PPUSH
31136: CALL_OW 275
31140: PUSH
31141: LD_VAR 0 4
31145: PUSH
31146: LD_INT 1
31148: ARRAY
31149: GREATEREQUAL
31150: PUSH
31151: LD_VAR 0 3
31155: PPUSH
31156: LD_INT 2
31158: PPUSH
31159: CALL_OW 275
31163: PUSH
31164: LD_VAR 0 4
31168: PUSH
31169: LD_INT 2
31171: ARRAY
31172: GREATEREQUAL
31173: AND
31174: PUSH
31175: LD_VAR 0 3
31179: PPUSH
31180: LD_INT 3
31182: PPUSH
31183: CALL_OW 275
31187: PUSH
31188: LD_VAR 0 4
31192: PUSH
31193: LD_INT 3
31195: ARRAY
31196: GREATEREQUAL
31197: AND
31198: ST_TO_ADDR
// end ;
31199: LD_VAR 0 2
31203: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31204: LD_INT 0
31206: PPUSH
31207: PPUSH
31208: PPUSH
// pom := GetBase ( building ) ;
31209: LD_ADDR_VAR 0 4
31213: PUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL_OW 274
31223: ST_TO_ADDR
// if not pom then
31224: LD_VAR 0 4
31228: NOT
31229: IFFALSE 31233
// exit ;
31231: GO 31334
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31233: LD_ADDR_VAR 0 5
31237: PUSH
31238: LD_VAR 0 2
31242: PPUSH
31243: LD_VAR 0 1
31247: PPUSH
31248: CALL_OW 248
31252: PPUSH
31253: CALL_OW 450
31257: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31258: LD_ADDR_VAR 0 3
31262: PUSH
31263: LD_VAR 0 4
31267: PPUSH
31268: LD_INT 1
31270: PPUSH
31271: CALL_OW 275
31275: PUSH
31276: LD_VAR 0 5
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: GREATEREQUAL
31285: PUSH
31286: LD_VAR 0 4
31290: PPUSH
31291: LD_INT 2
31293: PPUSH
31294: CALL_OW 275
31298: PUSH
31299: LD_VAR 0 5
31303: PUSH
31304: LD_INT 2
31306: ARRAY
31307: GREATEREQUAL
31308: AND
31309: PUSH
31310: LD_VAR 0 4
31314: PPUSH
31315: LD_INT 3
31317: PPUSH
31318: CALL_OW 275
31322: PUSH
31323: LD_VAR 0 5
31327: PUSH
31328: LD_INT 3
31330: ARRAY
31331: GREATEREQUAL
31332: AND
31333: ST_TO_ADDR
// end ;
31334: LD_VAR 0 3
31338: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31339: LD_INT 0
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
// result := false ;
31352: LD_ADDR_VAR 0 8
31356: PUSH
31357: LD_INT 0
31359: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31360: LD_VAR 0 5
31364: NOT
31365: PUSH
31366: LD_VAR 0 1
31370: NOT
31371: OR
31372: PUSH
31373: LD_VAR 0 2
31377: NOT
31378: OR
31379: PUSH
31380: LD_VAR 0 3
31384: NOT
31385: OR
31386: IFFALSE 31390
// exit ;
31388: GO 32204
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31390: LD_ADDR_VAR 0 14
31394: PUSH
31395: LD_VAR 0 1
31399: PPUSH
31400: LD_VAR 0 2
31404: PPUSH
31405: LD_VAR 0 3
31409: PPUSH
31410: LD_VAR 0 4
31414: PPUSH
31415: LD_VAR 0 5
31419: PUSH
31420: LD_INT 1
31422: ARRAY
31423: PPUSH
31424: CALL_OW 248
31428: PPUSH
31429: LD_INT 0
31431: PPUSH
31432: CALL 33457 0 6
31436: ST_TO_ADDR
// if not hexes then
31437: LD_VAR 0 14
31441: NOT
31442: IFFALSE 31446
// exit ;
31444: GO 32204
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31446: LD_ADDR_VAR 0 17
31450: PUSH
31451: LD_VAR 0 5
31455: PPUSH
31456: LD_INT 22
31458: PUSH
31459: LD_VAR 0 13
31463: PPUSH
31464: CALL_OW 255
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: LD_INT 30
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 30
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PPUSH
31505: CALL_OW 72
31509: ST_TO_ADDR
// for i = 1 to hexes do
31510: LD_ADDR_VAR 0 9
31514: PUSH
31515: DOUBLE
31516: LD_INT 1
31518: DEC
31519: ST_TO_ADDR
31520: LD_VAR 0 14
31524: PUSH
31525: FOR_TO
31526: IFFALSE 32202
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31528: LD_ADDR_VAR 0 13
31532: PUSH
31533: LD_VAR 0 14
31537: PUSH
31538: LD_VAR 0 9
31542: ARRAY
31543: PUSH
31544: LD_INT 1
31546: ARRAY
31547: PPUSH
31548: LD_VAR 0 14
31552: PUSH
31553: LD_VAR 0 9
31557: ARRAY
31558: PUSH
31559: LD_INT 2
31561: ARRAY
31562: PPUSH
31563: CALL_OW 428
31567: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31568: LD_VAR 0 14
31572: PUSH
31573: LD_VAR 0 9
31577: ARRAY
31578: PUSH
31579: LD_INT 1
31581: ARRAY
31582: PPUSH
31583: LD_VAR 0 14
31587: PUSH
31588: LD_VAR 0 9
31592: ARRAY
31593: PUSH
31594: LD_INT 2
31596: ARRAY
31597: PPUSH
31598: CALL_OW 351
31602: PUSH
31603: LD_VAR 0 14
31607: PUSH
31608: LD_VAR 0 9
31612: ARRAY
31613: PUSH
31614: LD_INT 1
31616: ARRAY
31617: PPUSH
31618: LD_VAR 0 14
31622: PUSH
31623: LD_VAR 0 9
31627: ARRAY
31628: PUSH
31629: LD_INT 2
31631: ARRAY
31632: PPUSH
31633: CALL_OW 488
31637: NOT
31638: OR
31639: PUSH
31640: LD_VAR 0 13
31644: PPUSH
31645: CALL_OW 247
31649: PUSH
31650: LD_INT 3
31652: EQUAL
31653: OR
31654: IFFALSE 31660
// exit ;
31656: POP
31657: POP
31658: GO 32204
// if not tmp then
31660: LD_VAR 0 13
31664: NOT
31665: IFFALSE 31669
// continue ;
31667: GO 31525
// result := true ;
31669: LD_ADDR_VAR 0 8
31673: PUSH
31674: LD_INT 1
31676: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31677: LD_VAR 0 6
31681: PUSH
31682: LD_VAR 0 13
31686: PPUSH
31687: CALL_OW 247
31691: PUSH
31692: LD_INT 2
31694: EQUAL
31695: AND
31696: PUSH
31697: LD_VAR 0 13
31701: PPUSH
31702: CALL_OW 263
31706: PUSH
31707: LD_INT 1
31709: EQUAL
31710: AND
31711: IFFALSE 31875
// begin if IsDrivenBy ( tmp ) then
31713: LD_VAR 0 13
31717: PPUSH
31718: CALL_OW 311
31722: IFFALSE 31726
// continue ;
31724: GO 31525
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31726: LD_VAR 0 6
31730: PPUSH
31731: LD_INT 3
31733: PUSH
31734: LD_INT 60
31736: PUSH
31737: EMPTY
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 55
31749: PUSH
31750: EMPTY
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PPUSH
31761: CALL_OW 72
31765: IFFALSE 31873
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31767: LD_ADDR_VAR 0 18
31771: PUSH
31772: LD_VAR 0 6
31776: PPUSH
31777: LD_INT 3
31779: PUSH
31780: LD_INT 60
31782: PUSH
31783: EMPTY
31784: LIST
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: LD_INT 55
31795: PUSH
31796: EMPTY
31797: LIST
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PPUSH
31807: CALL_OW 72
31811: PUSH
31812: LD_INT 1
31814: ARRAY
31815: ST_TO_ADDR
// if IsInUnit ( driver ) then
31816: LD_VAR 0 18
31820: PPUSH
31821: CALL_OW 310
31825: IFFALSE 31836
// ComExit ( driver ) ;
31827: LD_VAR 0 18
31831: PPUSH
31832: CALL 57249 0 1
// AddComEnterUnit ( driver , tmp ) ;
31836: LD_VAR 0 18
31840: PPUSH
31841: LD_VAR 0 13
31845: PPUSH
31846: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31850: LD_VAR 0 18
31854: PPUSH
31855: LD_VAR 0 7
31859: PPUSH
31860: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31864: LD_VAR 0 18
31868: PPUSH
31869: CALL_OW 181
// end ; continue ;
31873: GO 31525
// end ; if not cleaners or not tmp in cleaners then
31875: LD_VAR 0 6
31879: NOT
31880: PUSH
31881: LD_VAR 0 13
31885: PUSH
31886: LD_VAR 0 6
31890: IN
31891: NOT
31892: OR
31893: IFFALSE 32200
// begin if dep then
31895: LD_VAR 0 17
31899: IFFALSE 32035
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31901: LD_ADDR_VAR 0 16
31905: PUSH
31906: LD_VAR 0 17
31910: PUSH
31911: LD_INT 1
31913: ARRAY
31914: PPUSH
31915: CALL_OW 250
31919: PPUSH
31920: LD_VAR 0 17
31924: PUSH
31925: LD_INT 1
31927: ARRAY
31928: PPUSH
31929: CALL_OW 254
31933: PPUSH
31934: LD_INT 5
31936: PPUSH
31937: CALL_OW 272
31941: PUSH
31942: LD_VAR 0 17
31946: PUSH
31947: LD_INT 1
31949: ARRAY
31950: PPUSH
31951: CALL_OW 251
31955: PPUSH
31956: LD_VAR 0 17
31960: PUSH
31961: LD_INT 1
31963: ARRAY
31964: PPUSH
31965: CALL_OW 254
31969: PPUSH
31970: LD_INT 5
31972: PPUSH
31973: CALL_OW 273
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31982: LD_VAR 0 16
31986: PUSH
31987: LD_INT 1
31989: ARRAY
31990: PPUSH
31991: LD_VAR 0 16
31995: PUSH
31996: LD_INT 2
31998: ARRAY
31999: PPUSH
32000: CALL_OW 488
32004: IFFALSE 32035
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32006: LD_VAR 0 13
32010: PPUSH
32011: LD_VAR 0 16
32015: PUSH
32016: LD_INT 1
32018: ARRAY
32019: PPUSH
32020: LD_VAR 0 16
32024: PUSH
32025: LD_INT 2
32027: ARRAY
32028: PPUSH
32029: CALL_OW 111
// continue ;
32033: GO 31525
// end ; end ; r := GetDir ( tmp ) ;
32035: LD_ADDR_VAR 0 15
32039: PUSH
32040: LD_VAR 0 13
32044: PPUSH
32045: CALL_OW 254
32049: ST_TO_ADDR
// if r = 5 then
32050: LD_VAR 0 15
32054: PUSH
32055: LD_INT 5
32057: EQUAL
32058: IFFALSE 32068
// r := 0 ;
32060: LD_ADDR_VAR 0 15
32064: PUSH
32065: LD_INT 0
32067: ST_TO_ADDR
// for j = r to 5 do
32068: LD_ADDR_VAR 0 10
32072: PUSH
32073: DOUBLE
32074: LD_VAR 0 15
32078: DEC
32079: ST_TO_ADDR
32080: LD_INT 5
32082: PUSH
32083: FOR_TO
32084: IFFALSE 32198
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32086: LD_ADDR_VAR 0 11
32090: PUSH
32091: LD_VAR 0 13
32095: PPUSH
32096: CALL_OW 250
32100: PPUSH
32101: LD_VAR 0 10
32105: PPUSH
32106: LD_INT 2
32108: PPUSH
32109: CALL_OW 272
32113: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32114: LD_ADDR_VAR 0 12
32118: PUSH
32119: LD_VAR 0 13
32123: PPUSH
32124: CALL_OW 251
32128: PPUSH
32129: LD_VAR 0 10
32133: PPUSH
32134: LD_INT 2
32136: PPUSH
32137: CALL_OW 273
32141: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32142: LD_VAR 0 11
32146: PPUSH
32147: LD_VAR 0 12
32151: PPUSH
32152: CALL_OW 488
32156: PUSH
32157: LD_VAR 0 11
32161: PPUSH
32162: LD_VAR 0 12
32166: PPUSH
32167: CALL_OW 428
32171: NOT
32172: AND
32173: IFFALSE 32196
// begin ComMoveXY ( tmp , _x , _y ) ;
32175: LD_VAR 0 13
32179: PPUSH
32180: LD_VAR 0 11
32184: PPUSH
32185: LD_VAR 0 12
32189: PPUSH
32190: CALL_OW 111
// break ;
32194: GO 32198
// end ; end ;
32196: GO 32083
32198: POP
32199: POP
// end ; end ;
32200: GO 31525
32202: POP
32203: POP
// end ;
32204: LD_VAR 0 8
32208: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32209: LD_INT 0
32211: PPUSH
// result := true ;
32212: LD_ADDR_VAR 0 3
32216: PUSH
32217: LD_INT 1
32219: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32220: LD_VAR 0 2
32224: PUSH
32225: LD_INT 24
32227: DOUBLE
32228: EQUAL
32229: IFTRUE 32239
32231: LD_INT 33
32233: DOUBLE
32234: EQUAL
32235: IFTRUE 32239
32237: GO 32264
32239: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32240: LD_ADDR_VAR 0 3
32244: PUSH
32245: LD_INT 32
32247: PPUSH
32248: LD_VAR 0 1
32252: PPUSH
32253: CALL_OW 321
32257: PUSH
32258: LD_INT 2
32260: EQUAL
32261: ST_TO_ADDR
32262: GO 32580
32264: LD_INT 20
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32297
32272: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32273: LD_ADDR_VAR 0 3
32277: PUSH
32278: LD_INT 6
32280: PPUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: CALL_OW 321
32290: PUSH
32291: LD_INT 2
32293: EQUAL
32294: ST_TO_ADDR
32295: GO 32580
32297: LD_INT 22
32299: DOUBLE
32300: EQUAL
32301: IFTRUE 32311
32303: LD_INT 36
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32336
32311: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32312: LD_ADDR_VAR 0 3
32316: PUSH
32317: LD_INT 15
32319: PPUSH
32320: LD_VAR 0 1
32324: PPUSH
32325: CALL_OW 321
32329: PUSH
32330: LD_INT 2
32332: EQUAL
32333: ST_TO_ADDR
32334: GO 32580
32336: LD_INT 30
32338: DOUBLE
32339: EQUAL
32340: IFTRUE 32344
32342: GO 32369
32344: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32345: LD_ADDR_VAR 0 3
32349: PUSH
32350: LD_INT 20
32352: PPUSH
32353: LD_VAR 0 1
32357: PPUSH
32358: CALL_OW 321
32362: PUSH
32363: LD_INT 2
32365: EQUAL
32366: ST_TO_ADDR
32367: GO 32580
32369: LD_INT 28
32371: DOUBLE
32372: EQUAL
32373: IFTRUE 32383
32375: LD_INT 21
32377: DOUBLE
32378: EQUAL
32379: IFTRUE 32383
32381: GO 32408
32383: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_INT 21
32391: PPUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 321
32401: PUSH
32402: LD_INT 2
32404: EQUAL
32405: ST_TO_ADDR
32406: GO 32580
32408: LD_INT 16
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32441
32416: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_INT 84
32424: PPUSH
32425: LD_VAR 0 1
32429: PPUSH
32430: CALL_OW 321
32434: PUSH
32435: LD_INT 2
32437: EQUAL
32438: ST_TO_ADDR
32439: GO 32580
32441: LD_INT 19
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32455
32447: LD_INT 23
32449: DOUBLE
32450: EQUAL
32451: IFTRUE 32455
32453: GO 32480
32455: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32456: LD_ADDR_VAR 0 3
32460: PUSH
32461: LD_INT 83
32463: PPUSH
32464: LD_VAR 0 1
32468: PPUSH
32469: CALL_OW 321
32473: PUSH
32474: LD_INT 2
32476: EQUAL
32477: ST_TO_ADDR
32478: GO 32580
32480: LD_INT 17
32482: DOUBLE
32483: EQUAL
32484: IFTRUE 32488
32486: GO 32513
32488: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32489: LD_ADDR_VAR 0 3
32493: PUSH
32494: LD_INT 39
32496: PPUSH
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL_OW 321
32506: PUSH
32507: LD_INT 2
32509: EQUAL
32510: ST_TO_ADDR
32511: GO 32580
32513: LD_INT 18
32515: DOUBLE
32516: EQUAL
32517: IFTRUE 32521
32519: GO 32546
32521: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32522: LD_ADDR_VAR 0 3
32526: PUSH
32527: LD_INT 40
32529: PPUSH
32530: LD_VAR 0 1
32534: PPUSH
32535: CALL_OW 321
32539: PUSH
32540: LD_INT 2
32542: EQUAL
32543: ST_TO_ADDR
32544: GO 32580
32546: LD_INT 27
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32579
32554: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 35
32562: PPUSH
32563: LD_VAR 0 1
32567: PPUSH
32568: CALL_OW 321
32572: PUSH
32573: LD_INT 2
32575: EQUAL
32576: ST_TO_ADDR
32577: GO 32580
32579: POP
// end ;
32580: LD_VAR 0 3
32584: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32585: LD_INT 0
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
// result := false ;
32598: LD_ADDR_VAR 0 6
32602: PUSH
32603: LD_INT 0
32605: ST_TO_ADDR
// if btype = b_depot then
32606: LD_VAR 0 2
32610: PUSH
32611: LD_INT 0
32613: EQUAL
32614: IFFALSE 32626
// begin result := true ;
32616: LD_ADDR_VAR 0 6
32620: PUSH
32621: LD_INT 1
32623: ST_TO_ADDR
// exit ;
32624: GO 33452
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32626: LD_VAR 0 1
32630: NOT
32631: PUSH
32632: LD_VAR 0 1
32636: PPUSH
32637: CALL_OW 266
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: IN
32652: NOT
32653: OR
32654: PUSH
32655: LD_VAR 0 2
32659: NOT
32660: OR
32661: PUSH
32662: LD_VAR 0 5
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: LD_INT 3
32678: PUSH
32679: LD_INT 4
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: IN
32693: NOT
32694: OR
32695: PUSH
32696: LD_VAR 0 3
32700: PPUSH
32701: LD_VAR 0 4
32705: PPUSH
32706: CALL_OW 488
32710: NOT
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33452
// side := GetSide ( depot ) ;
32716: LD_ADDR_VAR 0 9
32720: PUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: CALL_OW 255
32730: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32731: LD_VAR 0 9
32735: PPUSH
32736: LD_VAR 0 2
32740: PPUSH
32741: CALL 32209 0 2
32745: NOT
32746: IFFALSE 32750
// exit ;
32748: GO 33452
// pom := GetBase ( depot ) ;
32750: LD_ADDR_VAR 0 10
32754: PUSH
32755: LD_VAR 0 1
32759: PPUSH
32760: CALL_OW 274
32764: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32765: LD_ADDR_VAR 0 11
32769: PUSH
32770: LD_VAR 0 2
32774: PPUSH
32775: LD_VAR 0 1
32779: PPUSH
32780: CALL_OW 248
32784: PPUSH
32785: CALL_OW 450
32789: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32790: LD_VAR 0 10
32794: PPUSH
32795: LD_INT 1
32797: PPUSH
32798: CALL_OW 275
32802: PUSH
32803: LD_VAR 0 11
32807: PUSH
32808: LD_INT 1
32810: ARRAY
32811: GREATEREQUAL
32812: PUSH
32813: LD_VAR 0 10
32817: PPUSH
32818: LD_INT 2
32820: PPUSH
32821: CALL_OW 275
32825: PUSH
32826: LD_VAR 0 11
32830: PUSH
32831: LD_INT 2
32833: ARRAY
32834: GREATEREQUAL
32835: AND
32836: PUSH
32837: LD_VAR 0 10
32841: PPUSH
32842: LD_INT 3
32844: PPUSH
32845: CALL_OW 275
32849: PUSH
32850: LD_VAR 0 11
32854: PUSH
32855: LD_INT 3
32857: ARRAY
32858: GREATEREQUAL
32859: AND
32860: NOT
32861: IFFALSE 32865
// exit ;
32863: GO 33452
// if GetBType ( depot ) = b_depot then
32865: LD_VAR 0 1
32869: PPUSH
32870: CALL_OW 266
32874: PUSH
32875: LD_INT 0
32877: EQUAL
32878: IFFALSE 32890
// dist := 28 else
32880: LD_ADDR_VAR 0 14
32884: PUSH
32885: LD_INT 28
32887: ST_TO_ADDR
32888: GO 32898
// dist := 36 ;
32890: LD_ADDR_VAR 0 14
32894: PUSH
32895: LD_INT 36
32897: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32898: LD_VAR 0 1
32902: PPUSH
32903: LD_VAR 0 3
32907: PPUSH
32908: LD_VAR 0 4
32912: PPUSH
32913: CALL_OW 297
32917: PUSH
32918: LD_VAR 0 14
32922: GREATER
32923: IFFALSE 32927
// exit ;
32925: GO 33452
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32927: LD_ADDR_VAR 0 12
32931: PUSH
32932: LD_VAR 0 2
32936: PPUSH
32937: LD_VAR 0 3
32941: PPUSH
32942: LD_VAR 0 4
32946: PPUSH
32947: LD_VAR 0 5
32951: PPUSH
32952: LD_VAR 0 1
32956: PPUSH
32957: CALL_OW 248
32961: PPUSH
32962: LD_INT 0
32964: PPUSH
32965: CALL 33457 0 6
32969: ST_TO_ADDR
// if not hexes then
32970: LD_VAR 0 12
32974: NOT
32975: IFFALSE 32979
// exit ;
32977: GO 33452
// hex := GetHexInfo ( x , y ) ;
32979: LD_ADDR_VAR 0 15
32983: PUSH
32984: LD_VAR 0 3
32988: PPUSH
32989: LD_VAR 0 4
32993: PPUSH
32994: CALL_OW 546
32998: ST_TO_ADDR
// if hex [ 1 ] then
32999: LD_VAR 0 15
33003: PUSH
33004: LD_INT 1
33006: ARRAY
33007: IFFALSE 33011
// exit ;
33009: GO 33452
// height := hex [ 2 ] ;
33011: LD_ADDR_VAR 0 13
33015: PUSH
33016: LD_VAR 0 15
33020: PUSH
33021: LD_INT 2
33023: ARRAY
33024: ST_TO_ADDR
// for i = 1 to hexes do
33025: LD_ADDR_VAR 0 7
33029: PUSH
33030: DOUBLE
33031: LD_INT 1
33033: DEC
33034: ST_TO_ADDR
33035: LD_VAR 0 12
33039: PUSH
33040: FOR_TO
33041: IFFALSE 33371
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33043: LD_VAR 0 12
33047: PUSH
33048: LD_VAR 0 7
33052: ARRAY
33053: PUSH
33054: LD_INT 1
33056: ARRAY
33057: PPUSH
33058: LD_VAR 0 12
33062: PUSH
33063: LD_VAR 0 7
33067: ARRAY
33068: PUSH
33069: LD_INT 2
33071: ARRAY
33072: PPUSH
33073: CALL_OW 488
33077: NOT
33078: PUSH
33079: LD_VAR 0 12
33083: PUSH
33084: LD_VAR 0 7
33088: ARRAY
33089: PUSH
33090: LD_INT 1
33092: ARRAY
33093: PPUSH
33094: LD_VAR 0 12
33098: PUSH
33099: LD_VAR 0 7
33103: ARRAY
33104: PUSH
33105: LD_INT 2
33107: ARRAY
33108: PPUSH
33109: CALL_OW 428
33113: PUSH
33114: LD_INT 0
33116: GREATER
33117: OR
33118: PUSH
33119: LD_VAR 0 12
33123: PUSH
33124: LD_VAR 0 7
33128: ARRAY
33129: PUSH
33130: LD_INT 1
33132: ARRAY
33133: PPUSH
33134: LD_VAR 0 12
33138: PUSH
33139: LD_VAR 0 7
33143: ARRAY
33144: PUSH
33145: LD_INT 2
33147: ARRAY
33148: PPUSH
33149: CALL_OW 351
33153: OR
33154: IFFALSE 33160
// exit ;
33156: POP
33157: POP
33158: GO 33452
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33160: LD_ADDR_VAR 0 8
33164: PUSH
33165: LD_VAR 0 12
33169: PUSH
33170: LD_VAR 0 7
33174: ARRAY
33175: PUSH
33176: LD_INT 1
33178: ARRAY
33179: PPUSH
33180: LD_VAR 0 12
33184: PUSH
33185: LD_VAR 0 7
33189: ARRAY
33190: PUSH
33191: LD_INT 2
33193: ARRAY
33194: PPUSH
33195: CALL_OW 546
33199: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33200: LD_VAR 0 8
33204: PUSH
33205: LD_INT 1
33207: ARRAY
33208: PUSH
33209: LD_VAR 0 8
33213: PUSH
33214: LD_INT 2
33216: ARRAY
33217: PUSH
33218: LD_VAR 0 13
33222: PUSH
33223: LD_INT 2
33225: PLUS
33226: GREATER
33227: OR
33228: PUSH
33229: LD_VAR 0 8
33233: PUSH
33234: LD_INT 2
33236: ARRAY
33237: PUSH
33238: LD_VAR 0 13
33242: PUSH
33243: LD_INT 2
33245: MINUS
33246: LESS
33247: OR
33248: PUSH
33249: LD_VAR 0 8
33253: PUSH
33254: LD_INT 3
33256: ARRAY
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 8
33263: PUSH
33264: LD_INT 9
33266: PUSH
33267: LD_INT 10
33269: PUSH
33270: LD_INT 11
33272: PUSH
33273: LD_INT 12
33275: PUSH
33276: LD_INT 13
33278: PUSH
33279: LD_INT 16
33281: PUSH
33282: LD_INT 17
33284: PUSH
33285: LD_INT 18
33287: PUSH
33288: LD_INT 19
33290: PUSH
33291: LD_INT 20
33293: PUSH
33294: LD_INT 21
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: IN
33312: NOT
33313: OR
33314: PUSH
33315: LD_VAR 0 8
33319: PUSH
33320: LD_INT 5
33322: ARRAY
33323: NOT
33324: OR
33325: PUSH
33326: LD_VAR 0 8
33330: PUSH
33331: LD_INT 6
33333: ARRAY
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 7
33343: PUSH
33344: LD_INT 9
33346: PUSH
33347: LD_INT 10
33349: PUSH
33350: LD_INT 11
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: IN
33361: NOT
33362: OR
33363: IFFALSE 33369
// exit ;
33365: POP
33366: POP
33367: GO 33452
// end ;
33369: GO 33040
33371: POP
33372: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33373: LD_VAR 0 9
33377: PPUSH
33378: LD_VAR 0 3
33382: PPUSH
33383: LD_VAR 0 4
33387: PPUSH
33388: LD_INT 20
33390: PPUSH
33391: CALL 25375 0 4
33395: PUSH
33396: LD_INT 4
33398: ARRAY
33399: IFFALSE 33403
// exit ;
33401: GO 33452
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33403: LD_VAR 0 2
33407: PUSH
33408: LD_INT 29
33410: PUSH
33411: LD_INT 30
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: IN
33418: PUSH
33419: LD_VAR 0 3
33423: PPUSH
33424: LD_VAR 0 4
33428: PPUSH
33429: LD_VAR 0 9
33433: PPUSH
33434: CALL_OW 440
33438: NOT
33439: AND
33440: IFFALSE 33444
// exit ;
33442: GO 33452
// result := true ;
33444: LD_ADDR_VAR 0 6
33448: PUSH
33449: LD_INT 1
33451: ST_TO_ADDR
// end ;
33452: LD_VAR 0 6
33456: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
33475: PPUSH
33476: PPUSH
33477: PPUSH
33478: PPUSH
33479: PPUSH
33480: PPUSH
33481: PPUSH
33482: PPUSH
33483: PPUSH
33484: PPUSH
33485: PPUSH
33486: PPUSH
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
33496: PPUSH
33497: PPUSH
33498: PPUSH
33499: PPUSH
33500: PPUSH
33501: PPUSH
33502: PPUSH
33503: PPUSH
33504: PPUSH
33505: PPUSH
33506: PPUSH
33507: PPUSH
33508: PPUSH
33509: PPUSH
33510: PPUSH
33511: PPUSH
33512: PPUSH
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
// result = [ ] ;
33517: LD_ADDR_VAR 0 7
33521: PUSH
33522: EMPTY
33523: ST_TO_ADDR
// temp_list = [ ] ;
33524: LD_ADDR_VAR 0 9
33528: PUSH
33529: EMPTY
33530: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33531: LD_VAR 0 4
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: LD_INT 4
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: IN
33562: NOT
33563: PUSH
33564: LD_VAR 0 1
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: IN
33579: PUSH
33580: LD_VAR 0 5
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 3
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: IN
33599: NOT
33600: AND
33601: OR
33602: IFFALSE 33606
// exit ;
33604: GO 51997
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33606: LD_VAR 0 1
33610: PUSH
33611: LD_INT 6
33613: PUSH
33614: LD_INT 7
33616: PUSH
33617: LD_INT 8
33619: PUSH
33620: LD_INT 13
33622: PUSH
33623: LD_INT 12
33625: PUSH
33626: LD_INT 15
33628: PUSH
33629: LD_INT 11
33631: PUSH
33632: LD_INT 14
33634: PUSH
33635: LD_INT 10
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: IN
33649: IFFALSE 33659
// btype = b_lab ;
33651: LD_ADDR_VAR 0 1
33655: PUSH
33656: LD_INT 6
33658: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33659: LD_VAR 0 6
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: LD_INT 1
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: IN
33678: NOT
33679: PUSH
33680: LD_VAR 0 1
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: LD_INT 6
33699: PUSH
33700: LD_INT 36
33702: PUSH
33703: LD_INT 4
33705: PUSH
33706: LD_INT 5
33708: PUSH
33709: LD_INT 31
33711: PUSH
33712: LD_INT 32
33714: PUSH
33715: LD_INT 33
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: IN
33731: NOT
33732: PUSH
33733: LD_VAR 0 6
33737: PUSH
33738: LD_INT 1
33740: EQUAL
33741: AND
33742: OR
33743: PUSH
33744: LD_VAR 0 1
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: IN
33759: NOT
33760: PUSH
33761: LD_VAR 0 6
33765: PUSH
33766: LD_INT 2
33768: EQUAL
33769: AND
33770: OR
33771: IFFALSE 33781
// mode = 0 ;
33773: LD_ADDR_VAR 0 6
33777: PUSH
33778: LD_INT 0
33780: ST_TO_ADDR
// case mode of 0 :
33781: LD_VAR 0 6
33785: PUSH
33786: LD_INT 0
33788: DOUBLE
33789: EQUAL
33790: IFTRUE 33794
33792: GO 45247
33794: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33795: LD_ADDR_VAR 0 11
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 1
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 3
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 2
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33988: LD_ADDR_VAR 0 12
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: NEG
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: NEG
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34184: LD_ADDR_VAR 0 13
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 2
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: LD_INT 2
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: NEG
34332: PUSH
34333: LD_INT 3
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 3
34343: NEG
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 3
34355: NEG
34356: PUSH
34357: LD_INT 3
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34383: LD_ADDR_VAR 0 14
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 0
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 2
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: LD_INT 3
34533: NEG
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 3
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 2
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34579: LD_ADDR_VAR 0 15
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 2
34702: NEG
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 3
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34772: LD_ADDR_VAR 0 16
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 3
34929: PUSH
34930: LD_INT 3
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34965: LD_ADDR_VAR 0 17
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: LD_INT 2
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35195: LD_ADDR_VAR 0 18
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: NEG
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: NEG
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 2
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35425: LD_ADDR_VAR 0 19
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35655: LD_ADDR_VAR 0 20
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: NEG
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35885: LD_ADDR_VAR 0 21
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 2
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36115: LD_ADDR_VAR 0 22
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: LD_INT 2
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: LD_INT 2
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 2
36314: NEG
36315: PUSH
36316: LD_INT 2
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36345: LD_ADDR_VAR 0 23
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: LD_INT 2
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: LD_INT 2
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 2
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: NEG
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: NEG
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: LD_INT 2
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 3
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 3
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36625: LD_ADDR_VAR 0 24
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 2
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: NEG
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 2
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36901: LD_ADDR_VAR 0 25
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: LD_INT 2
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 2
37036: PUSH
37037: LD_INT 2
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: LD_INT 2
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 3
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 2
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 3
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37175: LD_ADDR_VAR 0 26
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 1
37213: PUSH
37214: LD_INT 1
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37451: LD_ADDR_VAR 0 27
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 2
37627: NEG
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: NEG
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 2
37650: NEG
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 3
37696: NEG
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37731: LD_ADDR_VAR 0 28
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: LD_INT 3
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: LD_INT 3
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 3
37966: NEG
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 3
37978: NEG
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38013: LD_ADDR_VAR 0 29
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 2
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 3
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 3
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38292: LD_ADDR_VAR 0 30
38296: PUSH
38297: LD_INT 0
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 3
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 3
38535: NEG
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38570: LD_ADDR_VAR 0 31
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 2
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: LD_INT 2
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: LD_INT 3
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: LD_INT 1
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: NEG
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38848: LD_ADDR_VAR 0 32
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: LD_INT 2
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: LD_INT 2
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 2
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 3
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: LD_INT 3
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 3
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39126: LD_ADDR_VAR 0 33
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: NEG
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: NEG
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 3
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 3
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 3
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 3
39370: NEG
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39405: LD_ADDR_VAR 0 34
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: NEG
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 3
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 3
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 3
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 3
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39685: LD_ADDR_VAR 0 35
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39797: LD_ADDR_VAR 0 36
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39909: LD_ADDR_VAR 0 37
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40021: LD_ADDR_VAR 0 38
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40133: LD_ADDR_VAR 0 39
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40245: LD_ADDR_VAR 0 40
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40357: LD_ADDR_VAR 0 41
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: LD_INT 1
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 2
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 2
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: LD_INT 3
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: LD_INT 3
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 3
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 3
40631: NEG
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 3
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 3
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 3
40666: NEG
40667: PUSH
40668: LD_INT 3
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40707: LD_ADDR_VAR 0 42
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 1
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: LD_INT 3
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: LD_INT 3
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 3
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 3
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 3
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 3
41004: NEG
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 3
41016: NEG
41017: PUSH
41018: LD_INT 3
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41057: LD_ADDR_VAR 0 43
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 2
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 3
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 3
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 3
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 3
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 3
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41405: LD_ADDR_VAR 0 44
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: NEG
41596: PUSH
41597: LD_INT 3
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 3
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: LD_INT 3
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 3
41679: NEG
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 3
41702: NEG
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: LD_INT 3
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41755: LD_ADDR_VAR 0 45
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 3
41961: NEG
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 3
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 3
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 3
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 3
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: NEG
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: LD_INT 3
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42105: LD_ADDR_VAR 0 46
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 3
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 3
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 3
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 3
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 3
42401: NEG
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42453: LD_ADDR_VAR 0 47
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42604: LD_ADDR_VAR 0 48
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42751: LD_ADDR_VAR 0 49
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42895: LD_ADDR_VAR 0 50
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43039: LD_ADDR_VAR 0 51
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43186: LD_ADDR_VAR 0 52
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43337: LD_ADDR_VAR 0 53
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 0
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: LD_INT 2
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43567: LD_ADDR_VAR 0 54
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43797: LD_ADDR_VAR 0 55
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: LD_INT 2
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44027: LD_ADDR_VAR 0 56
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44257: LD_ADDR_VAR 0 57
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 2
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44487: LD_ADDR_VAR 0 58
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44717: LD_ADDR_VAR 0 59
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44805: LD_ADDR_VAR 0 60
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44893: LD_ADDR_VAR 0 61
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44981: LD_ADDR_VAR 0 62
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45069: LD_ADDR_VAR 0 63
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45157: LD_ADDR_VAR 0 64
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: ST_TO_ADDR
// end ; 1 :
45245: GO 51142
45247: LD_INT 1
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 47878
45255: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45256: LD_ADDR_VAR 0 11
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 3
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: LIST
45299: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45300: LD_ADDR_VAR 0 12
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 3
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45341: LD_ADDR_VAR 0 13
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 3
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45381: LD_ADDR_VAR 0 14
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 3
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45422: LD_ADDR_VAR 0 15
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 3
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45466: LD_ADDR_VAR 0 16
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 3
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 3
45485: NEG
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 3
45497: NEG
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45512: LD_ADDR_VAR 0 17
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 3
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45556: LD_ADDR_VAR 0 18
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45597: LD_ADDR_VAR 0 19
45601: PUSH
45602: LD_INT 3
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: LD_INT 3
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 3
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45637: LD_ADDR_VAR 0 20
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45678: LD_ADDR_VAR 0 21
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45722: LD_ADDR_VAR 0 22
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 3
45741: NEG
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 3
45753: NEG
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45768: LD_ADDR_VAR 0 23
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 4
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 3
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45812: LD_ADDR_VAR 0 24
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 4
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45853: LD_ADDR_VAR 0 25
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: LD_INT 3
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 4
45870: PUSH
45871: LD_INT 3
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 3
45880: PUSH
45881: LD_INT 4
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45893: LD_ADDR_VAR 0 26
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 3
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 4
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45934: LD_ADDR_VAR 0 27
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 4
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45978: LD_ADDR_VAR 0 28
45982: PUSH
45983: LD_INT 3
45985: NEG
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: LD_INT 4
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 4
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46024: LD_ADDR_VAR 0 29
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 4
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 4
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 3
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 5
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 5
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 4
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 6
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 6
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 5
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46179: LD_ADDR_VAR 0 30
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 4
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 4
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 5
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 5
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 5
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 6
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 6
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46322: LD_ADDR_VAR 0 31
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 3
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 3
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 4
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 4
46369: PUSH
46370: LD_INT 4
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: LD_INT 4
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 5
46389: PUSH
46390: LD_INT 4
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 5
46399: PUSH
46400: LD_INT 5
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 4
46409: PUSH
46410: LD_INT 5
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 6
46419: PUSH
46420: LD_INT 5
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 6
46429: PUSH
46430: LD_INT 6
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 5
46439: PUSH
46440: LD_INT 6
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46461: LD_ADDR_VAR 0 32
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 3
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 4
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 4
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 3
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 5
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 5
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 4
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 6
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 6
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 5
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46604: LD_ADDR_VAR 0 33
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: NEG
46634: PUSH
46635: LD_INT 1
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: NEG
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 4
46667: NEG
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 4
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 5
46690: NEG
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 5
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 5
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 6
46724: NEG
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 6
46735: NEG
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46759: LD_ADDR_VAR 0 34
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 3
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: NEG
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: LD_INT 4
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 4
46814: NEG
46815: PUSH
46816: LD_INT 3
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 4
46826: NEG
46827: PUSH
46828: LD_INT 4
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 4
46838: NEG
46839: PUSH
46840: LD_INT 5
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 5
46850: NEG
46851: PUSH
46852: LD_INT 4
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 5
46862: NEG
46863: PUSH
46864: LD_INT 5
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 5
46874: NEG
46875: PUSH
46876: LD_INT 6
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 6
46886: NEG
46887: PUSH
46888: LD_INT 5
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 6
46898: NEG
46899: PUSH
46900: LD_INT 6
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46922: LD_ADDR_VAR 0 41
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 2
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46966: LD_ADDR_VAR 0 42
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47007: LD_ADDR_VAR 0 43
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47047: LD_ADDR_VAR 0 44
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47088: LD_ADDR_VAR 0 45
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: NEG
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47132: LD_ADDR_VAR 0 46
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47178: LD_ADDR_VAR 0 47
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: LD_INT 3
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 3
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47211: LD_ADDR_VAR 0 48
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47242: LD_ADDR_VAR 0 49
47246: PUSH
47247: LD_INT 3
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47271: LD_ADDR_VAR 0 50
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 3
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 3
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47300: LD_ADDR_VAR 0 51
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47331: LD_ADDR_VAR 0 52
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47364: LD_ADDR_VAR 0 53
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 2
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47408: LD_ADDR_VAR 0 54
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47449: LD_ADDR_VAR 0 55
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 3
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: LD_INT 3
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: LIST
47488: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47489: LD_ADDR_VAR 0 56
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 3
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47530: LD_ADDR_VAR 0 57
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 3
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47574: LD_ADDR_VAR 0 58
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: LD_INT 3
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 3
47605: NEG
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47620: LD_ADDR_VAR 0 59
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47664: LD_ADDR_VAR 0 60
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47705: LD_ADDR_VAR 0 61
47709: PUSH
47710: LD_INT 2
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47745: LD_ADDR_VAR 0 62
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47786: LD_ADDR_VAR 0 63
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47830: LD_ADDR_VAR 0 64
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// end ; 2 :
47876: GO 51142
47878: LD_INT 2
47880: DOUBLE
47881: EQUAL
47882: IFTRUE 47886
47884: GO 51141
47886: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47887: LD_ADDR_VAR 0 29
47891: PUSH
47892: LD_INT 4
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 4
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 5
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 5
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 4
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 3
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 5
47977: PUSH
47978: LD_INT 2
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 3
47987: PUSH
47988: LD_INT 3
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 4
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 4
48017: PUSH
48018: LD_INT 4
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: PUSH
48028: LD_INT 4
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 3
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 4
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: LD_INT 4
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 4
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 4
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 5
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 5
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 4
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 5
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 3
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 4
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 4
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 4
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 4
48272: NEG
48273: PUSH
48274: LD_INT 4
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 4
48284: NEG
48285: PUSH
48286: LD_INT 5
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: LD_INT 4
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 4
48320: NEG
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 5
48332: NEG
48333: PUSH
48334: LD_INT 4
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 5
48344: NEG
48345: PUSH
48346: LD_INT 5
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: LD_INT 5
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 5
48368: NEG
48369: PUSH
48370: LD_INT 3
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48425: LD_ADDR_VAR 0 30
48429: PUSH
48430: LD_INT 4
48432: PUSH
48433: LD_INT 4
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 4
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 5
48452: PUSH
48453: LD_INT 4
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 5
48462: PUSH
48463: LD_INT 5
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 4
48472: PUSH
48473: LD_INT 5
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: LD_INT 4
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 5
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: LD_INT 5
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 4
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: LD_INT 4
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 4
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 4
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 4
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 4
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 5
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 5
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 5
48694: NEG
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: NEG
48718: PUSH
48719: LD_INT 3
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 3
48729: NEG
48730: PUSH
48731: LD_INT 4
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 4
48777: NEG
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 4
48789: NEG
48790: PUSH
48791: LD_INT 4
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 4
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 4
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 4
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 5
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 4
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 3
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: LD_INT 4
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 5
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: LD_INT 3
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: LD_INT 5
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48972: LD_ADDR_VAR 0 31
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 4
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 4
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: LD_INT 5
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 5
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 4
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: LD_INT 5
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 4
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 4
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 4
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 4
49174: NEG
49175: PUSH
49176: LD_INT 4
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 4
49186: NEG
49187: PUSH
49188: LD_INT 5
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 3
49198: NEG
49199: PUSH
49200: LD_INT 4
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: NEG
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 4
49222: NEG
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 5
49234: NEG
49235: PUSH
49236: LD_INT 4
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 5
49246: NEG
49247: PUSH
49248: LD_INT 5
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 3
49258: NEG
49259: PUSH
49260: LD_INT 5
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 5
49270: NEG
49271: PUSH
49272: LD_INT 3
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 3
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 4
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: PUSH
49305: LD_INT 3
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 4
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 4
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 4
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 4
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 5
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 5
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 4
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 3
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 5
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49522: LD_ADDR_VAR 0 32
49526: PUSH
49527: LD_INT 4
49529: NEG
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 4
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 4
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 5
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 5
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 5
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: NEG
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: LD_INT 4
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 4
49691: NEG
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 4
49703: NEG
49704: PUSH
49705: LD_INT 4
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 4
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 4
49727: NEG
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 4
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 5
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 4
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 4
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: LD_INT 5
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: LD_INT 5
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 4
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 4
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 4
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 5
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 5
49964: PUSH
49965: LD_INT 5
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: LD_INT 5
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 4
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 5
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 5
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50069: LD_ADDR_VAR 0 33
50073: PUSH
50074: LD_INT 4
50076: NEG
50077: PUSH
50078: LD_INT 4
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 4
50088: NEG
50089: PUSH
50090: LD_INT 5
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: LD_INT 4
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: LD_INT 3
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 4
50124: NEG
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 5
50136: NEG
50137: PUSH
50138: LD_INT 4
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 5
50148: NEG
50149: PUSH
50150: LD_INT 5
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: NEG
50161: PUSH
50162: LD_INT 5
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 5
50172: NEG
50173: PUSH
50174: LD_INT 3
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 4
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 3
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 2
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 3
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 4
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 2
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 4
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 4
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 4
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 5
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 5
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 4
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 5
50369: PUSH
50370: LD_INT 2
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 4
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 4
50409: PUSH
50410: LD_INT 4
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: LD_INT 4
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 4
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: LD_INT 4
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 4
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 4
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 5
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 5
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 4
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 5
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50607: LD_ADDR_VAR 0 34
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 4
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 0
50625: PUSH
50626: LD_INT 5
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: LD_INT 4
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 3
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 3
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 4
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 5
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: LD_INT 5
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 4
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 4
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 4
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 4
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 4
50819: PUSH
50820: LD_INT 3
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 5
50829: PUSH
50830: LD_INT 4
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 5
50839: PUSH
50840: LD_INT 5
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 4
50849: PUSH
50850: LD_INT 5
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: LD_INT 4
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 5
50879: PUSH
50880: LD_INT 3
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: LD_INT 5
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 3
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 4
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 4
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 4
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 4
50992: NEG
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 4
51003: NEG
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 0
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 1
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 4
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 5
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 5
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 5
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: ST_TO_ADDR
// end ; end ;
51139: GO 51142
51141: POP
// case btype of b_depot , b_warehouse :
51142: LD_VAR 0 1
51146: PUSH
51147: LD_INT 0
51149: DOUBLE
51150: EQUAL
51151: IFTRUE 51161
51153: LD_INT 1
51155: DOUBLE
51156: EQUAL
51157: IFTRUE 51161
51159: GO 51362
51161: POP
// case nation of nation_american :
51162: LD_VAR 0 5
51166: PUSH
51167: LD_INT 1
51169: DOUBLE
51170: EQUAL
51171: IFTRUE 51175
51173: GO 51231
51175: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51176: LD_ADDR_VAR 0 9
51180: PUSH
51181: LD_VAR 0 11
51185: PUSH
51186: LD_VAR 0 12
51190: PUSH
51191: LD_VAR 0 13
51195: PUSH
51196: LD_VAR 0 14
51200: PUSH
51201: LD_VAR 0 15
51205: PUSH
51206: LD_VAR 0 16
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: PUSH
51219: LD_VAR 0 4
51223: PUSH
51224: LD_INT 1
51226: PLUS
51227: ARRAY
51228: ST_TO_ADDR
51229: GO 51360
51231: LD_INT 2
51233: DOUBLE
51234: EQUAL
51235: IFTRUE 51239
51237: GO 51295
51239: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51240: LD_ADDR_VAR 0 9
51244: PUSH
51245: LD_VAR 0 17
51249: PUSH
51250: LD_VAR 0 18
51254: PUSH
51255: LD_VAR 0 19
51259: PUSH
51260: LD_VAR 0 20
51264: PUSH
51265: LD_VAR 0 21
51269: PUSH
51270: LD_VAR 0 22
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: PUSH
51283: LD_VAR 0 4
51287: PUSH
51288: LD_INT 1
51290: PLUS
51291: ARRAY
51292: ST_TO_ADDR
51293: GO 51360
51295: LD_INT 3
51297: DOUBLE
51298: EQUAL
51299: IFTRUE 51303
51301: GO 51359
51303: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51304: LD_ADDR_VAR 0 9
51308: PUSH
51309: LD_VAR 0 23
51313: PUSH
51314: LD_VAR 0 24
51318: PUSH
51319: LD_VAR 0 25
51323: PUSH
51324: LD_VAR 0 26
51328: PUSH
51329: LD_VAR 0 27
51333: PUSH
51334: LD_VAR 0 28
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: PUSH
51347: LD_VAR 0 4
51351: PUSH
51352: LD_INT 1
51354: PLUS
51355: ARRAY
51356: ST_TO_ADDR
51357: GO 51360
51359: POP
51360: GO 51915
51362: LD_INT 2
51364: DOUBLE
51365: EQUAL
51366: IFTRUE 51376
51368: LD_INT 3
51370: DOUBLE
51371: EQUAL
51372: IFTRUE 51376
51374: GO 51432
51376: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51377: LD_ADDR_VAR 0 9
51381: PUSH
51382: LD_VAR 0 29
51386: PUSH
51387: LD_VAR 0 30
51391: PUSH
51392: LD_VAR 0 31
51396: PUSH
51397: LD_VAR 0 32
51401: PUSH
51402: LD_VAR 0 33
51406: PUSH
51407: LD_VAR 0 34
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: LD_VAR 0 4
51424: PUSH
51425: LD_INT 1
51427: PLUS
51428: ARRAY
51429: ST_TO_ADDR
51430: GO 51915
51432: LD_INT 16
51434: DOUBLE
51435: EQUAL
51436: IFTRUE 51494
51438: LD_INT 17
51440: DOUBLE
51441: EQUAL
51442: IFTRUE 51494
51444: LD_INT 18
51446: DOUBLE
51447: EQUAL
51448: IFTRUE 51494
51450: LD_INT 19
51452: DOUBLE
51453: EQUAL
51454: IFTRUE 51494
51456: LD_INT 22
51458: DOUBLE
51459: EQUAL
51460: IFTRUE 51494
51462: LD_INT 20
51464: DOUBLE
51465: EQUAL
51466: IFTRUE 51494
51468: LD_INT 21
51470: DOUBLE
51471: EQUAL
51472: IFTRUE 51494
51474: LD_INT 23
51476: DOUBLE
51477: EQUAL
51478: IFTRUE 51494
51480: LD_INT 24
51482: DOUBLE
51483: EQUAL
51484: IFTRUE 51494
51486: LD_INT 25
51488: DOUBLE
51489: EQUAL
51490: IFTRUE 51494
51492: GO 51550
51494: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51495: LD_ADDR_VAR 0 9
51499: PUSH
51500: LD_VAR 0 35
51504: PUSH
51505: LD_VAR 0 36
51509: PUSH
51510: LD_VAR 0 37
51514: PUSH
51515: LD_VAR 0 38
51519: PUSH
51520: LD_VAR 0 39
51524: PUSH
51525: LD_VAR 0 40
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: PUSH
51538: LD_VAR 0 4
51542: PUSH
51543: LD_INT 1
51545: PLUS
51546: ARRAY
51547: ST_TO_ADDR
51548: GO 51915
51550: LD_INT 6
51552: DOUBLE
51553: EQUAL
51554: IFTRUE 51606
51556: LD_INT 7
51558: DOUBLE
51559: EQUAL
51560: IFTRUE 51606
51562: LD_INT 8
51564: DOUBLE
51565: EQUAL
51566: IFTRUE 51606
51568: LD_INT 13
51570: DOUBLE
51571: EQUAL
51572: IFTRUE 51606
51574: LD_INT 12
51576: DOUBLE
51577: EQUAL
51578: IFTRUE 51606
51580: LD_INT 15
51582: DOUBLE
51583: EQUAL
51584: IFTRUE 51606
51586: LD_INT 11
51588: DOUBLE
51589: EQUAL
51590: IFTRUE 51606
51592: LD_INT 14
51594: DOUBLE
51595: EQUAL
51596: IFTRUE 51606
51598: LD_INT 10
51600: DOUBLE
51601: EQUAL
51602: IFTRUE 51606
51604: GO 51662
51606: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51607: LD_ADDR_VAR 0 9
51611: PUSH
51612: LD_VAR 0 41
51616: PUSH
51617: LD_VAR 0 42
51621: PUSH
51622: LD_VAR 0 43
51626: PUSH
51627: LD_VAR 0 44
51631: PUSH
51632: LD_VAR 0 45
51636: PUSH
51637: LD_VAR 0 46
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: PUSH
51650: LD_VAR 0 4
51654: PUSH
51655: LD_INT 1
51657: PLUS
51658: ARRAY
51659: ST_TO_ADDR
51660: GO 51915
51662: LD_INT 36
51664: DOUBLE
51665: EQUAL
51666: IFTRUE 51670
51668: GO 51726
51670: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51671: LD_ADDR_VAR 0 9
51675: PUSH
51676: LD_VAR 0 47
51680: PUSH
51681: LD_VAR 0 48
51685: PUSH
51686: LD_VAR 0 49
51690: PUSH
51691: LD_VAR 0 50
51695: PUSH
51696: LD_VAR 0 51
51700: PUSH
51701: LD_VAR 0 52
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: PUSH
51714: LD_VAR 0 4
51718: PUSH
51719: LD_INT 1
51721: PLUS
51722: ARRAY
51723: ST_TO_ADDR
51724: GO 51915
51726: LD_INT 4
51728: DOUBLE
51729: EQUAL
51730: IFTRUE 51752
51732: LD_INT 5
51734: DOUBLE
51735: EQUAL
51736: IFTRUE 51752
51738: LD_INT 34
51740: DOUBLE
51741: EQUAL
51742: IFTRUE 51752
51744: LD_INT 37
51746: DOUBLE
51747: EQUAL
51748: IFTRUE 51752
51750: GO 51808
51752: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51753: LD_ADDR_VAR 0 9
51757: PUSH
51758: LD_VAR 0 53
51762: PUSH
51763: LD_VAR 0 54
51767: PUSH
51768: LD_VAR 0 55
51772: PUSH
51773: LD_VAR 0 56
51777: PUSH
51778: LD_VAR 0 57
51782: PUSH
51783: LD_VAR 0 58
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: PUSH
51796: LD_VAR 0 4
51800: PUSH
51801: LD_INT 1
51803: PLUS
51804: ARRAY
51805: ST_TO_ADDR
51806: GO 51915
51808: LD_INT 31
51810: DOUBLE
51811: EQUAL
51812: IFTRUE 51858
51814: LD_INT 32
51816: DOUBLE
51817: EQUAL
51818: IFTRUE 51858
51820: LD_INT 33
51822: DOUBLE
51823: EQUAL
51824: IFTRUE 51858
51826: LD_INT 27
51828: DOUBLE
51829: EQUAL
51830: IFTRUE 51858
51832: LD_INT 26
51834: DOUBLE
51835: EQUAL
51836: IFTRUE 51858
51838: LD_INT 28
51840: DOUBLE
51841: EQUAL
51842: IFTRUE 51858
51844: LD_INT 29
51846: DOUBLE
51847: EQUAL
51848: IFTRUE 51858
51850: LD_INT 30
51852: DOUBLE
51853: EQUAL
51854: IFTRUE 51858
51856: GO 51914
51858: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51859: LD_ADDR_VAR 0 9
51863: PUSH
51864: LD_VAR 0 59
51868: PUSH
51869: LD_VAR 0 60
51873: PUSH
51874: LD_VAR 0 61
51878: PUSH
51879: LD_VAR 0 62
51883: PUSH
51884: LD_VAR 0 63
51888: PUSH
51889: LD_VAR 0 64
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: PUSH
51902: LD_VAR 0 4
51906: PUSH
51907: LD_INT 1
51909: PLUS
51910: ARRAY
51911: ST_TO_ADDR
51912: GO 51915
51914: POP
// temp_list2 = [ ] ;
51915: LD_ADDR_VAR 0 10
51919: PUSH
51920: EMPTY
51921: ST_TO_ADDR
// for i in temp_list do
51922: LD_ADDR_VAR 0 8
51926: PUSH
51927: LD_VAR 0 9
51931: PUSH
51932: FOR_IN
51933: IFFALSE 51985
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51935: LD_ADDR_VAR 0 10
51939: PUSH
51940: LD_VAR 0 10
51944: PUSH
51945: LD_VAR 0 8
51949: PUSH
51950: LD_INT 1
51952: ARRAY
51953: PUSH
51954: LD_VAR 0 2
51958: PLUS
51959: PUSH
51960: LD_VAR 0 8
51964: PUSH
51965: LD_INT 2
51967: ARRAY
51968: PUSH
51969: LD_VAR 0 3
51973: PLUS
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: EMPTY
51980: LIST
51981: ADD
51982: ST_TO_ADDR
51983: GO 51932
51985: POP
51986: POP
// result = temp_list2 ;
51987: LD_ADDR_VAR 0 7
51991: PUSH
51992: LD_VAR 0 10
51996: ST_TO_ADDR
// end ;
51997: LD_VAR 0 7
52001: RET
// export function EnemyInRange ( unit , dist ) ; begin
52002: LD_INT 0
52004: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52005: LD_ADDR_VAR 0 3
52009: PUSH
52010: LD_VAR 0 1
52014: PPUSH
52015: CALL_OW 255
52019: PPUSH
52020: LD_VAR 0 1
52024: PPUSH
52025: CALL_OW 250
52029: PPUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 251
52039: PPUSH
52040: LD_VAR 0 2
52044: PPUSH
52045: CALL 25375 0 4
52049: PUSH
52050: LD_INT 4
52052: ARRAY
52053: ST_TO_ADDR
// end ;
52054: LD_VAR 0 3
52058: RET
// export function PlayerSeeMe ( unit ) ; begin
52059: LD_INT 0
52061: PPUSH
// result := See ( your_side , unit ) ;
52062: LD_ADDR_VAR 0 2
52066: PUSH
52067: LD_OWVAR 2
52071: PPUSH
52072: LD_VAR 0 1
52076: PPUSH
52077: CALL_OW 292
52081: ST_TO_ADDR
// end ;
52082: LD_VAR 0 2
52086: RET
// export function ReverseDir ( unit ) ; begin
52087: LD_INT 0
52089: PPUSH
// if not unit then
52090: LD_VAR 0 1
52094: NOT
52095: IFFALSE 52099
// exit ;
52097: GO 52122
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52099: LD_ADDR_VAR 0 2
52103: PUSH
52104: LD_VAR 0 1
52108: PPUSH
52109: CALL_OW 254
52113: PUSH
52114: LD_INT 3
52116: PLUS
52117: PUSH
52118: LD_INT 6
52120: MOD
52121: ST_TO_ADDR
// end ;
52122: LD_VAR 0 2
52126: RET
// export function ReverseArray ( array ) ; var i ; begin
52127: LD_INT 0
52129: PPUSH
52130: PPUSH
// if not array then
52131: LD_VAR 0 1
52135: NOT
52136: IFFALSE 52140
// exit ;
52138: GO 52195
// result := [ ] ;
52140: LD_ADDR_VAR 0 2
52144: PUSH
52145: EMPTY
52146: ST_TO_ADDR
// for i := array downto 1 do
52147: LD_ADDR_VAR 0 3
52151: PUSH
52152: DOUBLE
52153: LD_VAR 0 1
52157: INC
52158: ST_TO_ADDR
52159: LD_INT 1
52161: PUSH
52162: FOR_DOWNTO
52163: IFFALSE 52193
// result := Join ( result , array [ i ] ) ;
52165: LD_ADDR_VAR 0 2
52169: PUSH
52170: LD_VAR 0 2
52174: PPUSH
52175: LD_VAR 0 1
52179: PUSH
52180: LD_VAR 0 3
52184: ARRAY
52185: PPUSH
52186: CALL 56851 0 2
52190: ST_TO_ADDR
52191: GO 52162
52193: POP
52194: POP
// end ;
52195: LD_VAR 0 2
52199: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
52200: LD_INT 0
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
// if not unit or not hexes then
52208: LD_VAR 0 1
52212: NOT
52213: PUSH
52214: LD_VAR 0 2
52218: NOT
52219: OR
52220: IFFALSE 52224
// exit ;
52222: GO 52347
// dist := 9999 ;
52224: LD_ADDR_VAR 0 5
52228: PUSH
52229: LD_INT 9999
52231: ST_TO_ADDR
// for i = 1 to hexes do
52232: LD_ADDR_VAR 0 4
52236: PUSH
52237: DOUBLE
52238: LD_INT 1
52240: DEC
52241: ST_TO_ADDR
52242: LD_VAR 0 2
52246: PUSH
52247: FOR_TO
52248: IFFALSE 52335
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52250: LD_ADDR_VAR 0 6
52254: PUSH
52255: LD_VAR 0 1
52259: PPUSH
52260: LD_VAR 0 2
52264: PUSH
52265: LD_VAR 0 4
52269: ARRAY
52270: PUSH
52271: LD_INT 1
52273: ARRAY
52274: PPUSH
52275: LD_VAR 0 2
52279: PUSH
52280: LD_VAR 0 4
52284: ARRAY
52285: PUSH
52286: LD_INT 2
52288: ARRAY
52289: PPUSH
52290: CALL_OW 297
52294: ST_TO_ADDR
// if tdist < dist then
52295: LD_VAR 0 6
52299: PUSH
52300: LD_VAR 0 5
52304: LESS
52305: IFFALSE 52333
// begin hex := hexes [ i ] ;
52307: LD_ADDR_VAR 0 8
52311: PUSH
52312: LD_VAR 0 2
52316: PUSH
52317: LD_VAR 0 4
52321: ARRAY
52322: ST_TO_ADDR
// dist := tdist ;
52323: LD_ADDR_VAR 0 5
52327: PUSH
52328: LD_VAR 0 6
52332: ST_TO_ADDR
// end ; end ;
52333: GO 52247
52335: POP
52336: POP
// result := hex ;
52337: LD_ADDR_VAR 0 3
52341: PUSH
52342: LD_VAR 0 8
52346: ST_TO_ADDR
// end ;
52347: LD_VAR 0 3
52351: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52352: LD_INT 0
52354: PPUSH
52355: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52356: LD_VAR 0 1
52360: NOT
52361: PUSH
52362: LD_VAR 0 1
52366: PUSH
52367: LD_INT 21
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 23
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PPUSH
52391: CALL_OW 69
52395: IN
52396: NOT
52397: OR
52398: IFFALSE 52402
// exit ;
52400: GO 52449
// for i = 1 to 3 do
52402: LD_ADDR_VAR 0 3
52406: PUSH
52407: DOUBLE
52408: LD_INT 1
52410: DEC
52411: ST_TO_ADDR
52412: LD_INT 3
52414: PUSH
52415: FOR_TO
52416: IFFALSE 52447
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52418: LD_VAR 0 1
52422: PPUSH
52423: CALL_OW 250
52427: PPUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: CALL_OW 251
52437: PPUSH
52438: LD_INT 1
52440: PPUSH
52441: CALL_OW 453
52445: GO 52415
52447: POP
52448: POP
// end ;
52449: LD_VAR 0 2
52453: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52454: LD_INT 0
52456: PPUSH
52457: PPUSH
52458: PPUSH
52459: PPUSH
52460: PPUSH
52461: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52462: LD_VAR 0 1
52466: NOT
52467: PUSH
52468: LD_VAR 0 2
52472: NOT
52473: OR
52474: PUSH
52475: LD_VAR 0 1
52479: PPUSH
52480: CALL_OW 314
52484: OR
52485: IFFALSE 52489
// exit ;
52487: GO 52956
// if GetLives ( i ) < 250 then
52489: LD_VAR 0 4
52493: PPUSH
52494: CALL_OW 256
52498: PUSH
52499: LD_INT 250
52501: LESS
52502: IFFALSE 52515
// begin ComAutodestruct ( i ) ;
52504: LD_VAR 0 4
52508: PPUSH
52509: CALL 52352 0 1
// exit ;
52513: GO 52956
// end ; x := GetX ( enemy_unit ) ;
52515: LD_ADDR_VAR 0 7
52519: PUSH
52520: LD_VAR 0 2
52524: PPUSH
52525: CALL_OW 250
52529: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52530: LD_ADDR_VAR 0 8
52534: PUSH
52535: LD_VAR 0 2
52539: PPUSH
52540: CALL_OW 251
52544: ST_TO_ADDR
// if not x or not y then
52545: LD_VAR 0 7
52549: NOT
52550: PUSH
52551: LD_VAR 0 8
52555: NOT
52556: OR
52557: IFFALSE 52561
// exit ;
52559: GO 52956
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52561: LD_ADDR_VAR 0 6
52565: PUSH
52566: LD_VAR 0 7
52570: PPUSH
52571: LD_INT 0
52573: PPUSH
52574: LD_INT 4
52576: PPUSH
52577: CALL_OW 272
52581: PUSH
52582: LD_VAR 0 8
52586: PPUSH
52587: LD_INT 0
52589: PPUSH
52590: LD_INT 4
52592: PPUSH
52593: CALL_OW 273
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_VAR 0 7
52606: PPUSH
52607: LD_INT 1
52609: PPUSH
52610: LD_INT 4
52612: PPUSH
52613: CALL_OW 272
52617: PUSH
52618: LD_VAR 0 8
52622: PPUSH
52623: LD_INT 1
52625: PPUSH
52626: LD_INT 4
52628: PPUSH
52629: CALL_OW 273
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_VAR 0 7
52642: PPUSH
52643: LD_INT 2
52645: PPUSH
52646: LD_INT 4
52648: PPUSH
52649: CALL_OW 272
52653: PUSH
52654: LD_VAR 0 8
52658: PPUSH
52659: LD_INT 2
52661: PPUSH
52662: LD_INT 4
52664: PPUSH
52665: CALL_OW 273
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_VAR 0 7
52678: PPUSH
52679: LD_INT 3
52681: PPUSH
52682: LD_INT 4
52684: PPUSH
52685: CALL_OW 272
52689: PUSH
52690: LD_VAR 0 8
52694: PPUSH
52695: LD_INT 3
52697: PPUSH
52698: LD_INT 4
52700: PPUSH
52701: CALL_OW 273
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_VAR 0 7
52714: PPUSH
52715: LD_INT 4
52717: PPUSH
52718: LD_INT 4
52720: PPUSH
52721: CALL_OW 272
52725: PUSH
52726: LD_VAR 0 8
52730: PPUSH
52731: LD_INT 4
52733: PPUSH
52734: LD_INT 4
52736: PPUSH
52737: CALL_OW 273
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_VAR 0 7
52750: PPUSH
52751: LD_INT 5
52753: PPUSH
52754: LD_INT 4
52756: PPUSH
52757: CALL_OW 272
52761: PUSH
52762: LD_VAR 0 8
52766: PPUSH
52767: LD_INT 5
52769: PPUSH
52770: LD_INT 4
52772: PPUSH
52773: CALL_OW 273
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: ST_TO_ADDR
// for i = tmp downto 1 do
52790: LD_ADDR_VAR 0 4
52794: PUSH
52795: DOUBLE
52796: LD_VAR 0 6
52800: INC
52801: ST_TO_ADDR
52802: LD_INT 1
52804: PUSH
52805: FOR_DOWNTO
52806: IFFALSE 52907
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52808: LD_VAR 0 6
52812: PUSH
52813: LD_VAR 0 4
52817: ARRAY
52818: PUSH
52819: LD_INT 1
52821: ARRAY
52822: PPUSH
52823: LD_VAR 0 6
52827: PUSH
52828: LD_VAR 0 4
52832: ARRAY
52833: PUSH
52834: LD_INT 2
52836: ARRAY
52837: PPUSH
52838: CALL_OW 488
52842: NOT
52843: PUSH
52844: LD_VAR 0 6
52848: PUSH
52849: LD_VAR 0 4
52853: ARRAY
52854: PUSH
52855: LD_INT 1
52857: ARRAY
52858: PPUSH
52859: LD_VAR 0 6
52863: PUSH
52864: LD_VAR 0 4
52868: ARRAY
52869: PUSH
52870: LD_INT 2
52872: ARRAY
52873: PPUSH
52874: CALL_OW 428
52878: PUSH
52879: LD_INT 0
52881: NONEQUAL
52882: OR
52883: IFFALSE 52905
// tmp := Delete ( tmp , i ) ;
52885: LD_ADDR_VAR 0 6
52889: PUSH
52890: LD_VAR 0 6
52894: PPUSH
52895: LD_VAR 0 4
52899: PPUSH
52900: CALL_OW 3
52904: ST_TO_ADDR
52905: GO 52805
52907: POP
52908: POP
// j := GetClosestHex ( unit , tmp ) ;
52909: LD_ADDR_VAR 0 5
52913: PUSH
52914: LD_VAR 0 1
52918: PPUSH
52919: LD_VAR 0 6
52923: PPUSH
52924: CALL 52200 0 2
52928: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52929: LD_VAR 0 1
52933: PPUSH
52934: LD_VAR 0 5
52938: PUSH
52939: LD_INT 1
52941: ARRAY
52942: PPUSH
52943: LD_VAR 0 5
52947: PUSH
52948: LD_INT 2
52950: ARRAY
52951: PPUSH
52952: CALL_OW 111
// end ;
52956: LD_VAR 0 3
52960: RET
// export function PrepareApemanSoldier ( ) ; begin
52961: LD_INT 0
52963: PPUSH
// uc_nation := 0 ;
52964: LD_ADDR_OWVAR 21
52968: PUSH
52969: LD_INT 0
52971: ST_TO_ADDR
// hc_sex := sex_male ;
52972: LD_ADDR_OWVAR 27
52976: PUSH
52977: LD_INT 1
52979: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
52980: LD_ADDR_OWVAR 28
52984: PUSH
52985: LD_INT 15
52987: ST_TO_ADDR
// hc_gallery :=  ;
52988: LD_ADDR_OWVAR 33
52992: PUSH
52993: LD_STRING 
52995: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
52996: LD_ADDR_OWVAR 31
53000: PUSH
53001: LD_INT 0
53003: PPUSH
53004: LD_INT 3
53006: PPUSH
53007: CALL_OW 12
53011: PUSH
53012: LD_INT 0
53014: PPUSH
53015: LD_INT 3
53017: PPUSH
53018: CALL_OW 12
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: ST_TO_ADDR
// end ;
53035: LD_VAR 0 1
53039: RET
// export function PrepareApemanEngineer ( ) ; begin
53040: LD_INT 0
53042: PPUSH
// uc_nation := 0 ;
53043: LD_ADDR_OWVAR 21
53047: PUSH
53048: LD_INT 0
53050: ST_TO_ADDR
// hc_sex := sex_male ;
53051: LD_ADDR_OWVAR 27
53055: PUSH
53056: LD_INT 1
53058: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53059: LD_ADDR_OWVAR 28
53063: PUSH
53064: LD_INT 16
53066: ST_TO_ADDR
// hc_gallery :=  ;
53067: LD_ADDR_OWVAR 33
53071: PUSH
53072: LD_STRING 
53074: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53075: LD_ADDR_OWVAR 31
53079: PUSH
53080: LD_INT 0
53082: PPUSH
53083: LD_INT 3
53085: PPUSH
53086: CALL_OW 12
53090: PUSH
53091: LD_INT 0
53093: PPUSH
53094: LD_INT 3
53096: PPUSH
53097: CALL_OW 12
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: ST_TO_ADDR
// end ;
53114: LD_VAR 0 1
53118: RET
// export function PrepareApeman ( agressivity ) ; begin
53119: LD_INT 0
53121: PPUSH
// uc_side := 0 ;
53122: LD_ADDR_OWVAR 20
53126: PUSH
53127: LD_INT 0
53129: ST_TO_ADDR
// uc_nation := 0 ;
53130: LD_ADDR_OWVAR 21
53134: PUSH
53135: LD_INT 0
53137: ST_TO_ADDR
// hc_sex := sex_male ;
53138: LD_ADDR_OWVAR 27
53142: PUSH
53143: LD_INT 1
53145: ST_TO_ADDR
// hc_class := class_apeman ;
53146: LD_ADDR_OWVAR 28
53150: PUSH
53151: LD_INT 12
53153: ST_TO_ADDR
// hc_gallery :=  ;
53154: LD_ADDR_OWVAR 33
53158: PUSH
53159: LD_STRING 
53161: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53162: LD_ADDR_OWVAR 35
53166: PUSH
53167: LD_VAR 0 1
53171: NEG
53172: PPUSH
53173: LD_VAR 0 1
53177: PPUSH
53178: CALL_OW 12
53182: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53183: LD_ADDR_OWVAR 31
53187: PUSH
53188: LD_INT 0
53190: PPUSH
53191: LD_INT 3
53193: PPUSH
53194: CALL_OW 12
53198: PUSH
53199: LD_INT 0
53201: PPUSH
53202: LD_INT 3
53204: PPUSH
53205: CALL_OW 12
53209: PUSH
53210: LD_INT 0
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
// end ;
53222: LD_VAR 0 2
53226: RET
// export function PrepareTiger ( agressivity ) ; begin
53227: LD_INT 0
53229: PPUSH
// uc_side := 0 ;
53230: LD_ADDR_OWVAR 20
53234: PUSH
53235: LD_INT 0
53237: ST_TO_ADDR
// uc_nation := 0 ;
53238: LD_ADDR_OWVAR 21
53242: PUSH
53243: LD_INT 0
53245: ST_TO_ADDR
// hc_class := class_tiger ;
53246: LD_ADDR_OWVAR 28
53250: PUSH
53251: LD_INT 14
53253: ST_TO_ADDR
// hc_gallery :=  ;
53254: LD_ADDR_OWVAR 33
53258: PUSH
53259: LD_STRING 
53261: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53262: LD_ADDR_OWVAR 35
53266: PUSH
53267: LD_VAR 0 1
53271: NEG
53272: PPUSH
53273: LD_VAR 0 1
53277: PPUSH
53278: CALL_OW 12
53282: ST_TO_ADDR
// end ;
53283: LD_VAR 0 2
53287: RET
// export function PrepareEnchidna ( ) ; begin
53288: LD_INT 0
53290: PPUSH
// uc_side := 0 ;
53291: LD_ADDR_OWVAR 20
53295: PUSH
53296: LD_INT 0
53298: ST_TO_ADDR
// uc_nation := 0 ;
53299: LD_ADDR_OWVAR 21
53303: PUSH
53304: LD_INT 0
53306: ST_TO_ADDR
// hc_class := class_baggie ;
53307: LD_ADDR_OWVAR 28
53311: PUSH
53312: LD_INT 13
53314: ST_TO_ADDR
// hc_gallery :=  ;
53315: LD_ADDR_OWVAR 33
53319: PUSH
53320: LD_STRING 
53322: ST_TO_ADDR
// end ;
53323: LD_VAR 0 1
53327: RET
// export function PrepareFrog ( ) ; begin
53328: LD_INT 0
53330: PPUSH
// uc_side := 0 ;
53331: LD_ADDR_OWVAR 20
53335: PUSH
53336: LD_INT 0
53338: ST_TO_ADDR
// uc_nation := 0 ;
53339: LD_ADDR_OWVAR 21
53343: PUSH
53344: LD_INT 0
53346: ST_TO_ADDR
// hc_class := class_frog ;
53347: LD_ADDR_OWVAR 28
53351: PUSH
53352: LD_INT 19
53354: ST_TO_ADDR
// hc_gallery :=  ;
53355: LD_ADDR_OWVAR 33
53359: PUSH
53360: LD_STRING 
53362: ST_TO_ADDR
// end ;
53363: LD_VAR 0 1
53367: RET
// export function PrepareFish ( ) ; begin
53368: LD_INT 0
53370: PPUSH
// uc_side := 0 ;
53371: LD_ADDR_OWVAR 20
53375: PUSH
53376: LD_INT 0
53378: ST_TO_ADDR
// uc_nation := 0 ;
53379: LD_ADDR_OWVAR 21
53383: PUSH
53384: LD_INT 0
53386: ST_TO_ADDR
// hc_class := class_fish ;
53387: LD_ADDR_OWVAR 28
53391: PUSH
53392: LD_INT 20
53394: ST_TO_ADDR
// hc_gallery :=  ;
53395: LD_ADDR_OWVAR 33
53399: PUSH
53400: LD_STRING 
53402: ST_TO_ADDR
// end ;
53403: LD_VAR 0 1
53407: RET
// export function PrepareBird ( ) ; begin
53408: LD_INT 0
53410: PPUSH
// uc_side := 0 ;
53411: LD_ADDR_OWVAR 20
53415: PUSH
53416: LD_INT 0
53418: ST_TO_ADDR
// uc_nation := 0 ;
53419: LD_ADDR_OWVAR 21
53423: PUSH
53424: LD_INT 0
53426: ST_TO_ADDR
// hc_class := class_phororhacos ;
53427: LD_ADDR_OWVAR 28
53431: PUSH
53432: LD_INT 18
53434: ST_TO_ADDR
// hc_gallery :=  ;
53435: LD_ADDR_OWVAR 33
53439: PUSH
53440: LD_STRING 
53442: ST_TO_ADDR
// end ;
53443: LD_VAR 0 1
53447: RET
// export function PrepareHorse ( ) ; begin
53448: LD_INT 0
53450: PPUSH
// uc_side := 0 ;
53451: LD_ADDR_OWVAR 20
53455: PUSH
53456: LD_INT 0
53458: ST_TO_ADDR
// uc_nation := 0 ;
53459: LD_ADDR_OWVAR 21
53463: PUSH
53464: LD_INT 0
53466: ST_TO_ADDR
// hc_class := class_horse ;
53467: LD_ADDR_OWVAR 28
53471: PUSH
53472: LD_INT 21
53474: ST_TO_ADDR
// hc_gallery :=  ;
53475: LD_ADDR_OWVAR 33
53479: PUSH
53480: LD_STRING 
53482: ST_TO_ADDR
// end ;
53483: LD_VAR 0 1
53487: RET
// export function PrepareMastodont ( ) ; begin
53488: LD_INT 0
53490: PPUSH
// uc_side := 0 ;
53491: LD_ADDR_OWVAR 20
53495: PUSH
53496: LD_INT 0
53498: ST_TO_ADDR
// uc_nation := 0 ;
53499: LD_ADDR_OWVAR 21
53503: PUSH
53504: LD_INT 0
53506: ST_TO_ADDR
// vc_chassis := class_mastodont ;
53507: LD_ADDR_OWVAR 37
53511: PUSH
53512: LD_INT 31
53514: ST_TO_ADDR
// vc_control := control_rider ;
53515: LD_ADDR_OWVAR 38
53519: PUSH
53520: LD_INT 4
53522: ST_TO_ADDR
// end ;
53523: LD_VAR 0 1
53527: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53528: LD_INT 0
53530: PPUSH
53531: PPUSH
53532: PPUSH
// uc_side = 0 ;
53533: LD_ADDR_OWVAR 20
53537: PUSH
53538: LD_INT 0
53540: ST_TO_ADDR
// uc_nation = 0 ;
53541: LD_ADDR_OWVAR 21
53545: PUSH
53546: LD_INT 0
53548: ST_TO_ADDR
// InitHc_All ( ) ;
53549: CALL_OW 584
// InitVc ;
53553: CALL_OW 20
// if mastodonts then
53557: LD_VAR 0 6
53561: IFFALSE 53628
// for i = 1 to mastodonts do
53563: LD_ADDR_VAR 0 11
53567: PUSH
53568: DOUBLE
53569: LD_INT 1
53571: DEC
53572: ST_TO_ADDR
53573: LD_VAR 0 6
53577: PUSH
53578: FOR_TO
53579: IFFALSE 53626
// begin vc_chassis := 31 ;
53581: LD_ADDR_OWVAR 37
53585: PUSH
53586: LD_INT 31
53588: ST_TO_ADDR
// vc_control := control_rider ;
53589: LD_ADDR_OWVAR 38
53593: PUSH
53594: LD_INT 4
53596: ST_TO_ADDR
// animal := CreateVehicle ;
53597: LD_ADDR_VAR 0 12
53601: PUSH
53602: CALL_OW 45
53606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53607: LD_VAR 0 12
53611: PPUSH
53612: LD_VAR 0 8
53616: PPUSH
53617: LD_INT 0
53619: PPUSH
53620: CALL 55756 0 3
// end ;
53624: GO 53578
53626: POP
53627: POP
// if horses then
53628: LD_VAR 0 5
53632: IFFALSE 53699
// for i = 1 to horses do
53634: LD_ADDR_VAR 0 11
53638: PUSH
53639: DOUBLE
53640: LD_INT 1
53642: DEC
53643: ST_TO_ADDR
53644: LD_VAR 0 5
53648: PUSH
53649: FOR_TO
53650: IFFALSE 53697
// begin hc_class := 21 ;
53652: LD_ADDR_OWVAR 28
53656: PUSH
53657: LD_INT 21
53659: ST_TO_ADDR
// hc_gallery :=  ;
53660: LD_ADDR_OWVAR 33
53664: PUSH
53665: LD_STRING 
53667: ST_TO_ADDR
// animal := CreateHuman ;
53668: LD_ADDR_VAR 0 12
53672: PUSH
53673: CALL_OW 44
53677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53678: LD_VAR 0 12
53682: PPUSH
53683: LD_VAR 0 8
53687: PPUSH
53688: LD_INT 0
53690: PPUSH
53691: CALL 55756 0 3
// end ;
53695: GO 53649
53697: POP
53698: POP
// if birds then
53699: LD_VAR 0 1
53703: IFFALSE 53770
// for i = 1 to birds do
53705: LD_ADDR_VAR 0 11
53709: PUSH
53710: DOUBLE
53711: LD_INT 1
53713: DEC
53714: ST_TO_ADDR
53715: LD_VAR 0 1
53719: PUSH
53720: FOR_TO
53721: IFFALSE 53768
// begin hc_class := 18 ;
53723: LD_ADDR_OWVAR 28
53727: PUSH
53728: LD_INT 18
53730: ST_TO_ADDR
// hc_gallery =  ;
53731: LD_ADDR_OWVAR 33
53735: PUSH
53736: LD_STRING 
53738: ST_TO_ADDR
// animal := CreateHuman ;
53739: LD_ADDR_VAR 0 12
53743: PUSH
53744: CALL_OW 44
53748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53749: LD_VAR 0 12
53753: PPUSH
53754: LD_VAR 0 8
53758: PPUSH
53759: LD_INT 0
53761: PPUSH
53762: CALL 55756 0 3
// end ;
53766: GO 53720
53768: POP
53769: POP
// if tigers then
53770: LD_VAR 0 2
53774: IFFALSE 53858
// for i = 1 to tigers do
53776: LD_ADDR_VAR 0 11
53780: PUSH
53781: DOUBLE
53782: LD_INT 1
53784: DEC
53785: ST_TO_ADDR
53786: LD_VAR 0 2
53790: PUSH
53791: FOR_TO
53792: IFFALSE 53856
// begin hc_class = class_tiger ;
53794: LD_ADDR_OWVAR 28
53798: PUSH
53799: LD_INT 14
53801: ST_TO_ADDR
// hc_gallery =  ;
53802: LD_ADDR_OWVAR 33
53806: PUSH
53807: LD_STRING 
53809: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53810: LD_ADDR_OWVAR 35
53814: PUSH
53815: LD_INT 7
53817: NEG
53818: PPUSH
53819: LD_INT 7
53821: PPUSH
53822: CALL_OW 12
53826: ST_TO_ADDR
// animal := CreateHuman ;
53827: LD_ADDR_VAR 0 12
53831: PUSH
53832: CALL_OW 44
53836: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53837: LD_VAR 0 12
53841: PPUSH
53842: LD_VAR 0 8
53846: PPUSH
53847: LD_INT 0
53849: PPUSH
53850: CALL 55756 0 3
// end ;
53854: GO 53791
53856: POP
53857: POP
// if apemans then
53858: LD_VAR 0 3
53862: IFFALSE 53985
// for i = 1 to apemans do
53864: LD_ADDR_VAR 0 11
53868: PUSH
53869: DOUBLE
53870: LD_INT 1
53872: DEC
53873: ST_TO_ADDR
53874: LD_VAR 0 3
53878: PUSH
53879: FOR_TO
53880: IFFALSE 53983
// begin hc_class = class_apeman ;
53882: LD_ADDR_OWVAR 28
53886: PUSH
53887: LD_INT 12
53889: ST_TO_ADDR
// hc_gallery =  ;
53890: LD_ADDR_OWVAR 33
53894: PUSH
53895: LD_STRING 
53897: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53898: LD_ADDR_OWVAR 35
53902: PUSH
53903: LD_INT 2
53905: NEG
53906: PPUSH
53907: LD_INT 2
53909: PPUSH
53910: CALL_OW 12
53914: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53915: LD_ADDR_OWVAR 31
53919: PUSH
53920: LD_INT 1
53922: PPUSH
53923: LD_INT 3
53925: PPUSH
53926: CALL_OW 12
53930: PUSH
53931: LD_INT 1
53933: PPUSH
53934: LD_INT 3
53936: PPUSH
53937: CALL_OW 12
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: ST_TO_ADDR
// animal := CreateHuman ;
53954: LD_ADDR_VAR 0 12
53958: PUSH
53959: CALL_OW 44
53963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53964: LD_VAR 0 12
53968: PPUSH
53969: LD_VAR 0 8
53973: PPUSH
53974: LD_INT 0
53976: PPUSH
53977: CALL 55756 0 3
// end ;
53981: GO 53879
53983: POP
53984: POP
// if enchidnas then
53985: LD_VAR 0 4
53989: IFFALSE 54056
// for i = 1 to enchidnas do
53991: LD_ADDR_VAR 0 11
53995: PUSH
53996: DOUBLE
53997: LD_INT 1
53999: DEC
54000: ST_TO_ADDR
54001: LD_VAR 0 4
54005: PUSH
54006: FOR_TO
54007: IFFALSE 54054
// begin hc_class = 13 ;
54009: LD_ADDR_OWVAR 28
54013: PUSH
54014: LD_INT 13
54016: ST_TO_ADDR
// hc_gallery =  ;
54017: LD_ADDR_OWVAR 33
54021: PUSH
54022: LD_STRING 
54024: ST_TO_ADDR
// animal := CreateHuman ;
54025: LD_ADDR_VAR 0 12
54029: PUSH
54030: CALL_OW 44
54034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54035: LD_VAR 0 12
54039: PPUSH
54040: LD_VAR 0 8
54044: PPUSH
54045: LD_INT 0
54047: PPUSH
54048: CALL 55756 0 3
// end ;
54052: GO 54006
54054: POP
54055: POP
// if fishes then
54056: LD_VAR 0 7
54060: IFFALSE 54127
// for i = 1 to fishes do
54062: LD_ADDR_VAR 0 11
54066: PUSH
54067: DOUBLE
54068: LD_INT 1
54070: DEC
54071: ST_TO_ADDR
54072: LD_VAR 0 7
54076: PUSH
54077: FOR_TO
54078: IFFALSE 54125
// begin hc_class = 20 ;
54080: LD_ADDR_OWVAR 28
54084: PUSH
54085: LD_INT 20
54087: ST_TO_ADDR
// hc_gallery =  ;
54088: LD_ADDR_OWVAR 33
54092: PUSH
54093: LD_STRING 
54095: ST_TO_ADDR
// animal := CreateHuman ;
54096: LD_ADDR_VAR 0 12
54100: PUSH
54101: CALL_OW 44
54105: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54106: LD_VAR 0 12
54110: PPUSH
54111: LD_VAR 0 9
54115: PPUSH
54116: LD_INT 0
54118: PPUSH
54119: CALL 55756 0 3
// end ;
54123: GO 54077
54125: POP
54126: POP
// end ;
54127: LD_VAR 0 10
54131: RET
// export function WantHeal ( sci , unit ) ; begin
54132: LD_INT 0
54134: PPUSH
// if GetTaskList ( sci ) > 0 then
54135: LD_VAR 0 1
54139: PPUSH
54140: CALL_OW 437
54144: PUSH
54145: LD_INT 0
54147: GREATER
54148: IFFALSE 54218
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54150: LD_VAR 0 1
54154: PPUSH
54155: CALL_OW 437
54159: PUSH
54160: LD_INT 1
54162: ARRAY
54163: PUSH
54164: LD_INT 1
54166: ARRAY
54167: PUSH
54168: LD_STRING l
54170: EQUAL
54171: PUSH
54172: LD_VAR 0 1
54176: PPUSH
54177: CALL_OW 437
54181: PUSH
54182: LD_INT 1
54184: ARRAY
54185: PUSH
54186: LD_INT 4
54188: ARRAY
54189: PUSH
54190: LD_VAR 0 2
54194: EQUAL
54195: AND
54196: IFFALSE 54208
// result := true else
54198: LD_ADDR_VAR 0 3
54202: PUSH
54203: LD_INT 1
54205: ST_TO_ADDR
54206: GO 54216
// result := false ;
54208: LD_ADDR_VAR 0 3
54212: PUSH
54213: LD_INT 0
54215: ST_TO_ADDR
// end else
54216: GO 54226
// result := false ;
54218: LD_ADDR_VAR 0 3
54222: PUSH
54223: LD_INT 0
54225: ST_TO_ADDR
// end ;
54226: LD_VAR 0 3
54230: RET
// export function HealTarget ( sci ) ; begin
54231: LD_INT 0
54233: PPUSH
// if not sci then
54234: LD_VAR 0 1
54238: NOT
54239: IFFALSE 54243
// exit ;
54241: GO 54308
// result := 0 ;
54243: LD_ADDR_VAR 0 2
54247: PUSH
54248: LD_INT 0
54250: ST_TO_ADDR
// if GetTaskList ( sci ) then
54251: LD_VAR 0 1
54255: PPUSH
54256: CALL_OW 437
54260: IFFALSE 54308
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54262: LD_VAR 0 1
54266: PPUSH
54267: CALL_OW 437
54271: PUSH
54272: LD_INT 1
54274: ARRAY
54275: PUSH
54276: LD_INT 1
54278: ARRAY
54279: PUSH
54280: LD_STRING l
54282: EQUAL
54283: IFFALSE 54308
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54285: LD_ADDR_VAR 0 2
54289: PUSH
54290: LD_VAR 0 1
54294: PPUSH
54295: CALL_OW 437
54299: PUSH
54300: LD_INT 1
54302: ARRAY
54303: PUSH
54304: LD_INT 4
54306: ARRAY
54307: ST_TO_ADDR
// end ;
54308: LD_VAR 0 2
54312: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54313: LD_INT 0
54315: PPUSH
54316: PPUSH
54317: PPUSH
54318: PPUSH
// if not base_units then
54319: LD_VAR 0 1
54323: NOT
54324: IFFALSE 54328
// exit ;
54326: GO 54415
// result := false ;
54328: LD_ADDR_VAR 0 2
54332: PUSH
54333: LD_INT 0
54335: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54336: LD_ADDR_VAR 0 5
54340: PUSH
54341: LD_VAR 0 1
54345: PPUSH
54346: LD_INT 21
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PPUSH
54356: CALL_OW 72
54360: ST_TO_ADDR
// if not tmp then
54361: LD_VAR 0 5
54365: NOT
54366: IFFALSE 54370
// exit ;
54368: GO 54415
// for i in tmp do
54370: LD_ADDR_VAR 0 3
54374: PUSH
54375: LD_VAR 0 5
54379: PUSH
54380: FOR_IN
54381: IFFALSE 54413
// begin result := EnemyInRange ( i , 22 ) ;
54383: LD_ADDR_VAR 0 2
54387: PUSH
54388: LD_VAR 0 3
54392: PPUSH
54393: LD_INT 22
54395: PPUSH
54396: CALL 52002 0 2
54400: ST_TO_ADDR
// if result then
54401: LD_VAR 0 2
54405: IFFALSE 54411
// exit ;
54407: POP
54408: POP
54409: GO 54415
// end ;
54411: GO 54380
54413: POP
54414: POP
// end ;
54415: LD_VAR 0 2
54419: RET
// export function FilterByTag ( units , tag ) ; begin
54420: LD_INT 0
54422: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
54423: LD_ADDR_VAR 0 3
54427: PUSH
54428: LD_VAR 0 1
54432: PPUSH
54433: LD_INT 120
54435: PUSH
54436: LD_VAR 0 2
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PPUSH
54445: CALL_OW 72
54449: ST_TO_ADDR
// end ;
54450: LD_VAR 0 3
54454: RET
// export function IsDriver ( un ) ; begin
54455: LD_INT 0
54457: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54458: LD_ADDR_VAR 0 2
54462: PUSH
54463: LD_VAR 0 1
54467: PUSH
54468: LD_INT 55
54470: PUSH
54471: EMPTY
54472: LIST
54473: PPUSH
54474: CALL_OW 69
54478: IN
54479: ST_TO_ADDR
// end ;
54480: LD_VAR 0 2
54484: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54485: LD_INT 0
54487: PPUSH
54488: PPUSH
// list := [ ] ;
54489: LD_ADDR_VAR 0 5
54493: PUSH
54494: EMPTY
54495: ST_TO_ADDR
// case d of 0 :
54496: LD_VAR 0 3
54500: PUSH
54501: LD_INT 0
54503: DOUBLE
54504: EQUAL
54505: IFTRUE 54509
54507: GO 54642
54509: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54510: LD_ADDR_VAR 0 5
54514: PUSH
54515: LD_VAR 0 1
54519: PUSH
54520: LD_INT 4
54522: MINUS
54523: PUSH
54524: LD_VAR 0 2
54528: PUSH
54529: LD_INT 4
54531: MINUS
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: PUSH
54541: LD_VAR 0 1
54545: PUSH
54546: LD_INT 3
54548: MINUS
54549: PUSH
54550: LD_VAR 0 2
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: PUSH
54563: LD_VAR 0 1
54567: PUSH
54568: LD_INT 4
54570: PLUS
54571: PUSH
54572: LD_VAR 0 2
54576: PUSH
54577: LD_INT 4
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: PUSH
54585: LD_VAR 0 1
54589: PUSH
54590: LD_INT 3
54592: PLUS
54593: PUSH
54594: LD_VAR 0 2
54598: PUSH
54599: LD_INT 3
54601: PLUS
54602: PUSH
54603: LD_INT 5
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: PUSH
54611: LD_VAR 0 1
54615: PUSH
54616: LD_VAR 0 2
54620: PUSH
54621: LD_INT 4
54623: PLUS
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: ST_TO_ADDR
// end ; 1 :
54640: GO 55340
54642: LD_INT 1
54644: DOUBLE
54645: EQUAL
54646: IFTRUE 54650
54648: GO 54783
54650: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54651: LD_ADDR_VAR 0 5
54655: PUSH
54656: LD_VAR 0 1
54660: PUSH
54661: LD_VAR 0 2
54665: PUSH
54666: LD_INT 4
54668: MINUS
54669: PUSH
54670: LD_INT 3
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: PUSH
54678: LD_VAR 0 1
54682: PUSH
54683: LD_INT 3
54685: MINUS
54686: PUSH
54687: LD_VAR 0 2
54691: PUSH
54692: LD_INT 3
54694: MINUS
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: LIST
54703: PUSH
54704: LD_VAR 0 1
54708: PUSH
54709: LD_INT 4
54711: MINUS
54712: PUSH
54713: LD_VAR 0 2
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: LIST
54725: PUSH
54726: LD_VAR 0 1
54730: PUSH
54731: LD_VAR 0 2
54735: PUSH
54736: LD_INT 3
54738: PLUS
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: LIST
54747: PUSH
54748: LD_VAR 0 1
54752: PUSH
54753: LD_INT 4
54755: PLUS
54756: PUSH
54757: LD_VAR 0 2
54761: PUSH
54762: LD_INT 4
54764: PLUS
54765: PUSH
54766: LD_INT 5
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// end ; 2 :
54781: GO 55340
54783: LD_INT 2
54785: DOUBLE
54786: EQUAL
54787: IFTRUE 54791
54789: GO 54920
54791: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54792: LD_ADDR_VAR 0 5
54796: PUSH
54797: LD_VAR 0 1
54801: PUSH
54802: LD_VAR 0 2
54806: PUSH
54807: LD_INT 3
54809: MINUS
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: PUSH
54819: LD_VAR 0 1
54823: PUSH
54824: LD_INT 4
54826: PLUS
54827: PUSH
54828: LD_VAR 0 2
54832: PUSH
54833: LD_INT 4
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: LIST
54840: PUSH
54841: LD_VAR 0 1
54845: PUSH
54846: LD_VAR 0 2
54850: PUSH
54851: LD_INT 4
54853: PLUS
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: LIST
54862: PUSH
54863: LD_VAR 0 1
54867: PUSH
54868: LD_INT 3
54870: MINUS
54871: PUSH
54872: LD_VAR 0 2
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: PUSH
54885: LD_VAR 0 1
54889: PUSH
54890: LD_INT 4
54892: MINUS
54893: PUSH
54894: LD_VAR 0 2
54898: PUSH
54899: LD_INT 4
54901: MINUS
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: ST_TO_ADDR
// end ; 3 :
54918: GO 55340
54920: LD_INT 3
54922: DOUBLE
54923: EQUAL
54924: IFTRUE 54928
54926: GO 55061
54928: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54929: LD_ADDR_VAR 0 5
54933: PUSH
54934: LD_VAR 0 1
54938: PUSH
54939: LD_INT 3
54941: PLUS
54942: PUSH
54943: LD_VAR 0 2
54947: PUSH
54948: LD_INT 4
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: PUSH
54956: LD_VAR 0 1
54960: PUSH
54961: LD_INT 4
54963: PLUS
54964: PUSH
54965: LD_VAR 0 2
54969: PUSH
54970: LD_INT 4
54972: PLUS
54973: PUSH
54974: LD_INT 5
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: PUSH
54982: LD_VAR 0 1
54986: PUSH
54987: LD_INT 4
54989: MINUS
54990: PUSH
54991: LD_VAR 0 2
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: LIST
55003: PUSH
55004: LD_VAR 0 1
55008: PUSH
55009: LD_VAR 0 2
55013: PUSH
55014: LD_INT 4
55016: MINUS
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: PUSH
55026: LD_VAR 0 1
55030: PUSH
55031: LD_INT 3
55033: MINUS
55034: PUSH
55035: LD_VAR 0 2
55039: PUSH
55040: LD_INT 3
55042: MINUS
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// end ; 4 :
55059: GO 55340
55061: LD_INT 4
55063: DOUBLE
55064: EQUAL
55065: IFTRUE 55069
55067: GO 55202
55069: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55070: LD_ADDR_VAR 0 5
55074: PUSH
55075: LD_VAR 0 1
55079: PUSH
55080: LD_VAR 0 2
55084: PUSH
55085: LD_INT 4
55087: PLUS
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: LIST
55096: PUSH
55097: LD_VAR 0 1
55101: PUSH
55102: LD_INT 3
55104: PLUS
55105: PUSH
55106: LD_VAR 0 2
55110: PUSH
55111: LD_INT 3
55113: PLUS
55114: PUSH
55115: LD_INT 5
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: PUSH
55123: LD_VAR 0 1
55127: PUSH
55128: LD_INT 4
55130: PLUS
55131: PUSH
55132: LD_VAR 0 2
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: LIST
55144: PUSH
55145: LD_VAR 0 1
55149: PUSH
55150: LD_VAR 0 2
55154: PUSH
55155: LD_INT 3
55157: MINUS
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: PUSH
55167: LD_VAR 0 1
55171: PUSH
55172: LD_INT 4
55174: MINUS
55175: PUSH
55176: LD_VAR 0 2
55180: PUSH
55181: LD_INT 4
55183: MINUS
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: ST_TO_ADDR
// end ; 5 :
55200: GO 55340
55202: LD_INT 5
55204: DOUBLE
55205: EQUAL
55206: IFTRUE 55210
55208: GO 55339
55210: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55211: LD_ADDR_VAR 0 5
55215: PUSH
55216: LD_VAR 0 1
55220: PUSH
55221: LD_INT 4
55223: MINUS
55224: PUSH
55225: LD_VAR 0 2
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: PUSH
55238: LD_VAR 0 1
55242: PUSH
55243: LD_VAR 0 2
55247: PUSH
55248: LD_INT 4
55250: MINUS
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: LIST
55259: PUSH
55260: LD_VAR 0 1
55264: PUSH
55265: LD_INT 4
55267: PLUS
55268: PUSH
55269: LD_VAR 0 2
55273: PUSH
55274: LD_INT 4
55276: PLUS
55277: PUSH
55278: LD_INT 5
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: PUSH
55286: LD_VAR 0 1
55290: PUSH
55291: LD_INT 3
55293: PLUS
55294: PUSH
55295: LD_VAR 0 2
55299: PUSH
55300: LD_INT 4
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: PUSH
55308: LD_VAR 0 1
55312: PUSH
55313: LD_VAR 0 2
55317: PUSH
55318: LD_INT 3
55320: PLUS
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// end ; end ;
55337: GO 55340
55339: POP
// result := list ;
55340: LD_ADDR_VAR 0 4
55344: PUSH
55345: LD_VAR 0 5
55349: ST_TO_ADDR
// end ;
55350: LD_VAR 0 4
55354: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55355: LD_INT 0
55357: PPUSH
55358: PPUSH
55359: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55360: LD_VAR 0 1
55364: NOT
55365: PUSH
55366: LD_VAR 0 2
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 4
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: IN
55389: NOT
55390: OR
55391: IFFALSE 55395
// exit ;
55393: GO 55478
// tmp := [ ] ;
55395: LD_ADDR_VAR 0 5
55399: PUSH
55400: EMPTY
55401: ST_TO_ADDR
// for i in units do
55402: LD_ADDR_VAR 0 4
55406: PUSH
55407: LD_VAR 0 1
55411: PUSH
55412: FOR_IN
55413: IFFALSE 55447
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
55415: LD_ADDR_VAR 0 5
55419: PUSH
55420: LD_VAR 0 5
55424: PPUSH
55425: LD_VAR 0 4
55429: PPUSH
55430: LD_VAR 0 2
55434: PPUSH
55435: CALL_OW 259
55439: PPUSH
55440: CALL 56851 0 2
55444: ST_TO_ADDR
55445: GO 55412
55447: POP
55448: POP
// if not tmp then
55449: LD_VAR 0 5
55453: NOT
55454: IFFALSE 55458
// exit ;
55456: GO 55478
// result := SortListByListDesc ( units , tmp ) ;
55458: LD_ADDR_VAR 0 3
55462: PUSH
55463: LD_VAR 0 1
55467: PPUSH
55468: LD_VAR 0 5
55472: PPUSH
55473: CALL_OW 77
55477: ST_TO_ADDR
// end ;
55478: LD_VAR 0 3
55482: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55483: LD_INT 0
55485: PPUSH
55486: PPUSH
55487: PPUSH
// result := false ;
55488: LD_ADDR_VAR 0 3
55492: PUSH
55493: LD_INT 0
55495: ST_TO_ADDR
// if not building then
55496: LD_VAR 0 2
55500: NOT
55501: IFFALSE 55505
// exit ;
55503: GO 55643
// x := GetX ( building ) ;
55505: LD_ADDR_VAR 0 4
55509: PUSH
55510: LD_VAR 0 2
55514: PPUSH
55515: CALL_OW 250
55519: ST_TO_ADDR
// y := GetY ( building ) ;
55520: LD_ADDR_VAR 0 5
55524: PUSH
55525: LD_VAR 0 2
55529: PPUSH
55530: CALL_OW 251
55534: ST_TO_ADDR
// if not x or not y then
55535: LD_VAR 0 4
55539: NOT
55540: PUSH
55541: LD_VAR 0 5
55545: NOT
55546: OR
55547: IFFALSE 55551
// exit ;
55549: GO 55643
// if GetTaskList ( unit ) then
55551: LD_VAR 0 1
55555: PPUSH
55556: CALL_OW 437
55560: IFFALSE 55643
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55562: LD_STRING e
55564: PUSH
55565: LD_VAR 0 1
55569: PPUSH
55570: CALL_OW 437
55574: PUSH
55575: LD_INT 1
55577: ARRAY
55578: PUSH
55579: LD_INT 1
55581: ARRAY
55582: EQUAL
55583: PUSH
55584: LD_VAR 0 4
55588: PUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: CALL_OW 437
55598: PUSH
55599: LD_INT 1
55601: ARRAY
55602: PUSH
55603: LD_INT 2
55605: ARRAY
55606: EQUAL
55607: AND
55608: PUSH
55609: LD_VAR 0 5
55613: PUSH
55614: LD_VAR 0 1
55618: PPUSH
55619: CALL_OW 437
55623: PUSH
55624: LD_INT 1
55626: ARRAY
55627: PUSH
55628: LD_INT 3
55630: ARRAY
55631: EQUAL
55632: AND
55633: IFFALSE 55643
// result := true end ;
55635: LD_ADDR_VAR 0 3
55639: PUSH
55640: LD_INT 1
55642: ST_TO_ADDR
// end ;
55643: LD_VAR 0 3
55647: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55648: LD_INT 0
55650: PPUSH
// result := false ;
55651: LD_ADDR_VAR 0 4
55655: PUSH
55656: LD_INT 0
55658: ST_TO_ADDR
// if GetTaskList ( unit ) then
55659: LD_VAR 0 1
55663: PPUSH
55664: CALL_OW 437
55668: IFFALSE 55751
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55670: LD_STRING M
55672: PUSH
55673: LD_VAR 0 1
55677: PPUSH
55678: CALL_OW 437
55682: PUSH
55683: LD_INT 1
55685: ARRAY
55686: PUSH
55687: LD_INT 1
55689: ARRAY
55690: EQUAL
55691: PUSH
55692: LD_VAR 0 2
55696: PUSH
55697: LD_VAR 0 1
55701: PPUSH
55702: CALL_OW 437
55706: PUSH
55707: LD_INT 1
55709: ARRAY
55710: PUSH
55711: LD_INT 2
55713: ARRAY
55714: EQUAL
55715: AND
55716: PUSH
55717: LD_VAR 0 3
55721: PUSH
55722: LD_VAR 0 1
55726: PPUSH
55727: CALL_OW 437
55731: PUSH
55732: LD_INT 1
55734: ARRAY
55735: PUSH
55736: LD_INT 3
55738: ARRAY
55739: EQUAL
55740: AND
55741: IFFALSE 55751
// result := true ;
55743: LD_ADDR_VAR 0 4
55747: PUSH
55748: LD_INT 1
55750: ST_TO_ADDR
// end ; end ;
55751: LD_VAR 0 4
55755: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55756: LD_INT 0
55758: PPUSH
55759: PPUSH
55760: PPUSH
55761: PPUSH
// if not unit or not area then
55762: LD_VAR 0 1
55766: NOT
55767: PUSH
55768: LD_VAR 0 2
55772: NOT
55773: OR
55774: IFFALSE 55778
// exit ;
55776: GO 55954
// tmp := AreaToList ( area , i ) ;
55778: LD_ADDR_VAR 0 6
55782: PUSH
55783: LD_VAR 0 2
55787: PPUSH
55788: LD_VAR 0 5
55792: PPUSH
55793: CALL_OW 517
55797: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55798: LD_ADDR_VAR 0 5
55802: PUSH
55803: DOUBLE
55804: LD_INT 1
55806: DEC
55807: ST_TO_ADDR
55808: LD_VAR 0 6
55812: PUSH
55813: LD_INT 1
55815: ARRAY
55816: PUSH
55817: FOR_TO
55818: IFFALSE 55952
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55820: LD_ADDR_VAR 0 7
55824: PUSH
55825: LD_VAR 0 6
55829: PUSH
55830: LD_INT 1
55832: ARRAY
55833: PUSH
55834: LD_VAR 0 5
55838: ARRAY
55839: PUSH
55840: LD_VAR 0 6
55844: PUSH
55845: LD_INT 2
55847: ARRAY
55848: PUSH
55849: LD_VAR 0 5
55853: ARRAY
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
55859: LD_INT 92
55861: PUSH
55862: LD_VAR 0 7
55866: PUSH
55867: LD_INT 1
55869: ARRAY
55870: PUSH
55871: LD_VAR 0 7
55875: PUSH
55876: LD_INT 2
55878: ARRAY
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: PPUSH
55889: CALL_OW 69
55893: PUSH
55894: LD_INT 0
55896: EQUAL
55897: IFFALSE 55950
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55899: LD_VAR 0 1
55903: PPUSH
55904: LD_VAR 0 7
55908: PUSH
55909: LD_INT 1
55911: ARRAY
55912: PPUSH
55913: LD_VAR 0 7
55917: PUSH
55918: LD_INT 2
55920: ARRAY
55921: PPUSH
55922: LD_VAR 0 3
55926: PPUSH
55927: CALL_OW 48
// result := IsPlaced ( unit ) ;
55931: LD_ADDR_VAR 0 4
55935: PUSH
55936: LD_VAR 0 1
55940: PPUSH
55941: CALL_OW 305
55945: ST_TO_ADDR
// exit ;
55946: POP
55947: POP
55948: GO 55954
// end ; end ;
55950: GO 55817
55952: POP
55953: POP
// end ;
55954: LD_VAR 0 4
55958: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55959: LD_INT 0
55961: PPUSH
55962: PPUSH
55963: PPUSH
// if not side or side > 8 then
55964: LD_VAR 0 1
55968: NOT
55969: PUSH
55970: LD_VAR 0 1
55974: PUSH
55975: LD_INT 8
55977: GREATER
55978: OR
55979: IFFALSE 55983
// exit ;
55981: GO 56170
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55983: LD_ADDR_VAR 0 4
55987: PUSH
55988: LD_INT 22
55990: PUSH
55991: LD_VAR 0 1
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 21
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PPUSH
56014: CALL_OW 69
56018: ST_TO_ADDR
// if not tmp then
56019: LD_VAR 0 4
56023: NOT
56024: IFFALSE 56028
// exit ;
56026: GO 56170
// enable_addtolog := true ;
56028: LD_ADDR_OWVAR 81
56032: PUSH
56033: LD_INT 1
56035: ST_TO_ADDR
// AddToLog ( [ ) ;
56036: LD_STRING [
56038: PPUSH
56039: CALL_OW 561
// for i in tmp do
56043: LD_ADDR_VAR 0 3
56047: PUSH
56048: LD_VAR 0 4
56052: PUSH
56053: FOR_IN
56054: IFFALSE 56161
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56056: LD_STRING [
56058: PUSH
56059: LD_VAR 0 3
56063: PPUSH
56064: CALL_OW 266
56068: STR
56069: PUSH
56070: LD_STRING , 
56072: STR
56073: PUSH
56074: LD_VAR 0 3
56078: PPUSH
56079: CALL_OW 250
56083: STR
56084: PUSH
56085: LD_STRING , 
56087: STR
56088: PUSH
56089: LD_VAR 0 3
56093: PPUSH
56094: CALL_OW 251
56098: STR
56099: PUSH
56100: LD_STRING , 
56102: STR
56103: PUSH
56104: LD_VAR 0 3
56108: PPUSH
56109: CALL_OW 254
56113: STR
56114: PUSH
56115: LD_STRING , 
56117: STR
56118: PUSH
56119: LD_VAR 0 3
56123: PPUSH
56124: LD_INT 1
56126: PPUSH
56127: CALL_OW 268
56131: STR
56132: PUSH
56133: LD_STRING , 
56135: STR
56136: PUSH
56137: LD_VAR 0 3
56141: PPUSH
56142: LD_INT 2
56144: PPUSH
56145: CALL_OW 268
56149: STR
56150: PUSH
56151: LD_STRING ],
56153: STR
56154: PPUSH
56155: CALL_OW 561
// end ;
56159: GO 56053
56161: POP
56162: POP
// AddToLog ( ]; ) ;
56163: LD_STRING ];
56165: PPUSH
56166: CALL_OW 561
// end ;
56170: LD_VAR 0 2
56174: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56175: LD_INT 0
56177: PPUSH
56178: PPUSH
56179: PPUSH
56180: PPUSH
56181: PPUSH
// if not area or not rate or not max then
56182: LD_VAR 0 1
56186: NOT
56187: PUSH
56188: LD_VAR 0 2
56192: NOT
56193: OR
56194: PUSH
56195: LD_VAR 0 4
56199: NOT
56200: OR
56201: IFFALSE 56205
// exit ;
56203: GO 56394
// while 1 do
56205: LD_INT 1
56207: IFFALSE 56394
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56209: LD_ADDR_VAR 0 9
56213: PUSH
56214: LD_VAR 0 1
56218: PPUSH
56219: LD_INT 1
56221: PPUSH
56222: CALL_OW 287
56226: PUSH
56227: LD_INT 10
56229: MUL
56230: ST_TO_ADDR
// r := rate / 10 ;
56231: LD_ADDR_VAR 0 7
56235: PUSH
56236: LD_VAR 0 2
56240: PUSH
56241: LD_INT 10
56243: DIVREAL
56244: ST_TO_ADDR
// time := 1 1$00 ;
56245: LD_ADDR_VAR 0 8
56249: PUSH
56250: LD_INT 2100
56252: ST_TO_ADDR
// if amount < min then
56253: LD_VAR 0 9
56257: PUSH
56258: LD_VAR 0 3
56262: LESS
56263: IFFALSE 56281
// r := r * 2 else
56265: LD_ADDR_VAR 0 7
56269: PUSH
56270: LD_VAR 0 7
56274: PUSH
56275: LD_INT 2
56277: MUL
56278: ST_TO_ADDR
56279: GO 56307
// if amount > max then
56281: LD_VAR 0 9
56285: PUSH
56286: LD_VAR 0 4
56290: GREATER
56291: IFFALSE 56307
// r := r / 2 ;
56293: LD_ADDR_VAR 0 7
56297: PUSH
56298: LD_VAR 0 7
56302: PUSH
56303: LD_INT 2
56305: DIVREAL
56306: ST_TO_ADDR
// time := time / r ;
56307: LD_ADDR_VAR 0 8
56311: PUSH
56312: LD_VAR 0 8
56316: PUSH
56317: LD_VAR 0 7
56321: DIVREAL
56322: ST_TO_ADDR
// if time < 0 then
56323: LD_VAR 0 8
56327: PUSH
56328: LD_INT 0
56330: LESS
56331: IFFALSE 56348
// time := time * - 1 ;
56333: LD_ADDR_VAR 0 8
56337: PUSH
56338: LD_VAR 0 8
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: MUL
56347: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
56348: LD_VAR 0 8
56352: PUSH
56353: LD_INT 35
56355: PPUSH
56356: LD_INT 875
56358: PPUSH
56359: CALL_OW 12
56363: PLUS
56364: PPUSH
56365: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56369: LD_INT 1
56371: PPUSH
56372: LD_INT 5
56374: PPUSH
56375: CALL_OW 12
56379: PPUSH
56380: LD_VAR 0 1
56384: PPUSH
56385: LD_INT 1
56387: PPUSH
56388: CALL_OW 55
// end ;
56392: GO 56205
// end ;
56394: LD_VAR 0 5
56398: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56399: LD_INT 0
56401: PPUSH
56402: PPUSH
56403: PPUSH
56404: PPUSH
56405: PPUSH
56406: PPUSH
56407: PPUSH
56408: PPUSH
// if not turrets or not factories then
56409: LD_VAR 0 1
56413: NOT
56414: PUSH
56415: LD_VAR 0 2
56419: NOT
56420: OR
56421: IFFALSE 56425
// exit ;
56423: GO 56732
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56425: LD_ADDR_VAR 0 10
56429: PUSH
56430: LD_INT 5
56432: PUSH
56433: LD_INT 6
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: LD_INT 4
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: LD_INT 5
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 24
56467: PUSH
56468: LD_INT 25
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 23
56477: PUSH
56478: LD_INT 27
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 42
56491: PUSH
56492: LD_INT 43
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 44
56501: PUSH
56502: LD_INT 46
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 45
56511: PUSH
56512: LD_INT 47
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// result := [ ] ;
56529: LD_ADDR_VAR 0 3
56533: PUSH
56534: EMPTY
56535: ST_TO_ADDR
// for i in turrets do
56536: LD_ADDR_VAR 0 4
56540: PUSH
56541: LD_VAR 0 1
56545: PUSH
56546: FOR_IN
56547: IFFALSE 56730
// begin nat := GetNation ( i ) ;
56549: LD_ADDR_VAR 0 7
56553: PUSH
56554: LD_VAR 0 4
56558: PPUSH
56559: CALL_OW 248
56563: ST_TO_ADDR
// weapon := 0 ;
56564: LD_ADDR_VAR 0 8
56568: PUSH
56569: LD_INT 0
56571: ST_TO_ADDR
// if not nat then
56572: LD_VAR 0 7
56576: NOT
56577: IFFALSE 56581
// continue ;
56579: GO 56546
// for j in list [ nat ] do
56581: LD_ADDR_VAR 0 5
56585: PUSH
56586: LD_VAR 0 10
56590: PUSH
56591: LD_VAR 0 7
56595: ARRAY
56596: PUSH
56597: FOR_IN
56598: IFFALSE 56639
// if GetBWeapon ( i ) = j [ 1 ] then
56600: LD_VAR 0 4
56604: PPUSH
56605: CALL_OW 269
56609: PUSH
56610: LD_VAR 0 5
56614: PUSH
56615: LD_INT 1
56617: ARRAY
56618: EQUAL
56619: IFFALSE 56637
// begin weapon := j [ 2 ] ;
56621: LD_ADDR_VAR 0 8
56625: PUSH
56626: LD_VAR 0 5
56630: PUSH
56631: LD_INT 2
56633: ARRAY
56634: ST_TO_ADDR
// break ;
56635: GO 56639
// end ;
56637: GO 56597
56639: POP
56640: POP
// if not weapon then
56641: LD_VAR 0 8
56645: NOT
56646: IFFALSE 56650
// continue ;
56648: GO 56546
// for k in factories do
56650: LD_ADDR_VAR 0 6
56654: PUSH
56655: LD_VAR 0 2
56659: PUSH
56660: FOR_IN
56661: IFFALSE 56726
// begin weapons := AvailableWeaponList ( k ) ;
56663: LD_ADDR_VAR 0 9
56667: PUSH
56668: LD_VAR 0 6
56672: PPUSH
56673: CALL_OW 478
56677: ST_TO_ADDR
// if not weapons then
56678: LD_VAR 0 9
56682: NOT
56683: IFFALSE 56687
// continue ;
56685: GO 56660
// if weapon in weapons then
56687: LD_VAR 0 8
56691: PUSH
56692: LD_VAR 0 9
56696: IN
56697: IFFALSE 56724
// begin result := [ i , weapon ] ;
56699: LD_ADDR_VAR 0 3
56703: PUSH
56704: LD_VAR 0 4
56708: PUSH
56709: LD_VAR 0 8
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: ST_TO_ADDR
// exit ;
56718: POP
56719: POP
56720: POP
56721: POP
56722: GO 56732
// end ; end ;
56724: GO 56660
56726: POP
56727: POP
// end ;
56728: GO 56546
56730: POP
56731: POP
// end ;
56732: LD_VAR 0 3
56736: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56737: LD_INT 0
56739: PPUSH
// if not side or side > 8 then
56740: LD_VAR 0 3
56744: NOT
56745: PUSH
56746: LD_VAR 0 3
56750: PUSH
56751: LD_INT 8
56753: GREATER
56754: OR
56755: IFFALSE 56759
// exit ;
56757: GO 56818
// if not range then
56759: LD_VAR 0 4
56763: NOT
56764: IFFALSE 56775
// range := - 12 ;
56766: LD_ADDR_VAR 0 4
56770: PUSH
56771: LD_INT 12
56773: NEG
56774: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56775: LD_VAR 0 1
56779: PPUSH
56780: LD_VAR 0 2
56784: PPUSH
56785: LD_VAR 0 3
56789: PPUSH
56790: LD_VAR 0 4
56794: PPUSH
56795: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56799: LD_VAR 0 1
56803: PPUSH
56804: LD_VAR 0 2
56808: PPUSH
56809: LD_VAR 0 3
56813: PPUSH
56814: CALL_OW 331
// end ;
56818: LD_VAR 0 5
56822: RET
// export function Video ( mode ) ; begin
56823: LD_INT 0
56825: PPUSH
// ingame_video = mode ;
56826: LD_ADDR_OWVAR 52
56830: PUSH
56831: LD_VAR 0 1
56835: ST_TO_ADDR
// interface_hidden = mode ;
56836: LD_ADDR_OWVAR 54
56840: PUSH
56841: LD_VAR 0 1
56845: ST_TO_ADDR
// end ;
56846: LD_VAR 0 2
56850: RET
// export function Join ( array , element ) ; begin
56851: LD_INT 0
56853: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56854: LD_ADDR_VAR 0 3
56858: PUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: LD_VAR 0 1
56868: PUSH
56869: LD_INT 1
56871: PLUS
56872: PPUSH
56873: LD_VAR 0 2
56877: PPUSH
56878: CALL_OW 1
56882: ST_TO_ADDR
// end ;
56883: LD_VAR 0 3
56887: RET
// export function JoinUnion ( array , element ) ; begin
56888: LD_INT 0
56890: PPUSH
// result := array union element ;
56891: LD_ADDR_VAR 0 3
56895: PUSH
56896: LD_VAR 0 1
56900: PUSH
56901: LD_VAR 0 2
56905: UNION
56906: ST_TO_ADDR
// end ;
56907: LD_VAR 0 3
56911: RET
// export function GetBehemoths ( side ) ; begin
56912: LD_INT 0
56914: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
56915: LD_ADDR_VAR 0 2
56919: PUSH
56920: LD_INT 22
56922: PUSH
56923: LD_VAR 0 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 31
56934: PUSH
56935: LD_INT 25
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PPUSH
56946: CALL_OW 69
56950: ST_TO_ADDR
// end ;
56951: LD_VAR 0 2
56955: RET
// export function Shuffle ( array ) ; var i , index ; begin
56956: LD_INT 0
56958: PPUSH
56959: PPUSH
56960: PPUSH
// result := [ ] ;
56961: LD_ADDR_VAR 0 2
56965: PUSH
56966: EMPTY
56967: ST_TO_ADDR
// if not array then
56968: LD_VAR 0 1
56972: NOT
56973: IFFALSE 56977
// exit ;
56975: GO 57076
// Randomize ;
56977: CALL_OW 10
// for i = array downto 1 do
56981: LD_ADDR_VAR 0 3
56985: PUSH
56986: DOUBLE
56987: LD_VAR 0 1
56991: INC
56992: ST_TO_ADDR
56993: LD_INT 1
56995: PUSH
56996: FOR_DOWNTO
56997: IFFALSE 57074
// begin index := rand ( 1 , array ) ;
56999: LD_ADDR_VAR 0 4
57003: PUSH
57004: LD_INT 1
57006: PPUSH
57007: LD_VAR 0 1
57011: PPUSH
57012: CALL_OW 12
57016: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57017: LD_ADDR_VAR 0 2
57021: PUSH
57022: LD_VAR 0 2
57026: PPUSH
57027: LD_VAR 0 2
57031: PUSH
57032: LD_INT 1
57034: PLUS
57035: PPUSH
57036: LD_VAR 0 1
57040: PUSH
57041: LD_VAR 0 4
57045: ARRAY
57046: PPUSH
57047: CALL_OW 2
57051: ST_TO_ADDR
// array := Delete ( array , index ) ;
57052: LD_ADDR_VAR 0 1
57056: PUSH
57057: LD_VAR 0 1
57061: PPUSH
57062: LD_VAR 0 4
57066: PPUSH
57067: CALL_OW 3
57071: ST_TO_ADDR
// end ;
57072: GO 56996
57074: POP
57075: POP
// end ;
57076: LD_VAR 0 2
57080: RET
// export function GetBaseMaterials ( base ) ; begin
57081: LD_INT 0
57083: PPUSH
// result := [ 0 , 0 , 0 ] ;
57084: LD_ADDR_VAR 0 2
57088: PUSH
57089: LD_INT 0
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: ST_TO_ADDR
// if not base then
57103: LD_VAR 0 1
57107: NOT
57108: IFFALSE 57112
// exit ;
57110: GO 57161
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57112: LD_ADDR_VAR 0 2
57116: PUSH
57117: LD_VAR 0 1
57121: PPUSH
57122: LD_INT 1
57124: PPUSH
57125: CALL_OW 275
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: LD_INT 2
57137: PPUSH
57138: CALL_OW 275
57142: PUSH
57143: LD_VAR 0 1
57147: PPUSH
57148: LD_INT 3
57150: PPUSH
57151: CALL_OW 275
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// end ;
57161: LD_VAR 0 2
57165: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57166: LD_INT 0
57168: PPUSH
57169: PPUSH
// result := array ;
57170: LD_ADDR_VAR 0 3
57174: PUSH
57175: LD_VAR 0 1
57179: ST_TO_ADDR
// if size >= result then
57180: LD_VAR 0 2
57184: PUSH
57185: LD_VAR 0 3
57189: GREATEREQUAL
57190: IFFALSE 57194
// exit ;
57192: GO 57244
// if size then
57194: LD_VAR 0 2
57198: IFFALSE 57244
// for i := array downto size do
57200: LD_ADDR_VAR 0 4
57204: PUSH
57205: DOUBLE
57206: LD_VAR 0 1
57210: INC
57211: ST_TO_ADDR
57212: LD_VAR 0 2
57216: PUSH
57217: FOR_DOWNTO
57218: IFFALSE 57242
// result := Delete ( result , result ) ;
57220: LD_ADDR_VAR 0 3
57224: PUSH
57225: LD_VAR 0 3
57229: PPUSH
57230: LD_VAR 0 3
57234: PPUSH
57235: CALL_OW 3
57239: ST_TO_ADDR
57240: GO 57217
57242: POP
57243: POP
// end ;
57244: LD_VAR 0 3
57248: RET
// export function ComExit ( unit ) ; var tmp ; begin
57249: LD_INT 0
57251: PPUSH
57252: PPUSH
// if not IsInUnit ( unit ) then
57253: LD_VAR 0 1
57257: PPUSH
57258: CALL_OW 310
57262: NOT
57263: IFFALSE 57267
// exit ;
57265: GO 57327
// tmp := IsInUnit ( unit ) ;
57267: LD_ADDR_VAR 0 3
57271: PUSH
57272: LD_VAR 0 1
57276: PPUSH
57277: CALL_OW 310
57281: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57282: LD_VAR 0 3
57286: PPUSH
57287: CALL_OW 247
57291: PUSH
57292: LD_INT 2
57294: EQUAL
57295: IFFALSE 57308
// ComExitVehicle ( unit ) else
57297: LD_VAR 0 1
57301: PPUSH
57302: CALL_OW 121
57306: GO 57317
// ComExitBuilding ( unit ) ;
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 122
// result := tmp ;
57317: LD_ADDR_VAR 0 2
57321: PUSH
57322: LD_VAR 0 3
57326: ST_TO_ADDR
// end ;
57327: LD_VAR 0 2
57331: RET
// export function ComExitAll ( units ) ; var i ; begin
57332: LD_INT 0
57334: PPUSH
57335: PPUSH
// if not units then
57336: LD_VAR 0 1
57340: NOT
57341: IFFALSE 57345
// exit ;
57343: GO 57371
// for i in units do
57345: LD_ADDR_VAR 0 3
57349: PUSH
57350: LD_VAR 0 1
57354: PUSH
57355: FOR_IN
57356: IFFALSE 57369
// ComExit ( i ) ;
57358: LD_VAR 0 3
57362: PPUSH
57363: CALL 57249 0 1
57367: GO 57355
57369: POP
57370: POP
// end ;
57371: LD_VAR 0 2
57375: RET
// export function ResetHc ; begin
57376: LD_INT 0
57378: PPUSH
// InitHc ;
57379: CALL_OW 19
// hc_importance := 0 ;
57383: LD_ADDR_OWVAR 32
57387: PUSH
57388: LD_INT 0
57390: ST_TO_ADDR
// end ;
57391: LD_VAR 0 1
57395: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57396: LD_INT 0
57398: PPUSH
57399: PPUSH
57400: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57401: LD_ADDR_VAR 0 6
57405: PUSH
57406: LD_VAR 0 1
57410: PUSH
57411: LD_VAR 0 3
57415: PLUS
57416: PUSH
57417: LD_INT 2
57419: DIV
57420: ST_TO_ADDR
// if _x < 0 then
57421: LD_VAR 0 6
57425: PUSH
57426: LD_INT 0
57428: LESS
57429: IFFALSE 57446
// _x := _x * - 1 ;
57431: LD_ADDR_VAR 0 6
57435: PUSH
57436: LD_VAR 0 6
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: MUL
57445: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57446: LD_ADDR_VAR 0 7
57450: PUSH
57451: LD_VAR 0 2
57455: PUSH
57456: LD_VAR 0 4
57460: PLUS
57461: PUSH
57462: LD_INT 2
57464: DIV
57465: ST_TO_ADDR
// if _y < 0 then
57466: LD_VAR 0 7
57470: PUSH
57471: LD_INT 0
57473: LESS
57474: IFFALSE 57491
// _y := _y * - 1 ;
57476: LD_ADDR_VAR 0 7
57480: PUSH
57481: LD_VAR 0 7
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: MUL
57490: ST_TO_ADDR
// result := [ _x , _y ] ;
57491: LD_ADDR_VAR 0 5
57495: PUSH
57496: LD_VAR 0 6
57500: PUSH
57501: LD_VAR 0 7
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// end ;
57510: LD_VAR 0 5
57514: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57515: LD_INT 0
57517: PPUSH
57518: PPUSH
57519: PPUSH
57520: PPUSH
// task := GetTaskList ( unit ) ;
57521: LD_ADDR_VAR 0 7
57525: PUSH
57526: LD_VAR 0 1
57530: PPUSH
57531: CALL_OW 437
57535: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57536: LD_VAR 0 7
57540: NOT
57541: PUSH
57542: LD_VAR 0 1
57546: PPUSH
57547: LD_VAR 0 2
57551: PPUSH
57552: CALL_OW 308
57556: NOT
57557: AND
57558: IFFALSE 57562
// exit ;
57560: GO 57680
// if IsInArea ( unit , area ) then
57562: LD_VAR 0 1
57566: PPUSH
57567: LD_VAR 0 2
57571: PPUSH
57572: CALL_OW 308
57576: IFFALSE 57594
// begin ComMoveToArea ( unit , goAway ) ;
57578: LD_VAR 0 1
57582: PPUSH
57583: LD_VAR 0 3
57587: PPUSH
57588: CALL_OW 113
// exit ;
57592: GO 57680
// end ; if task [ 1 ] [ 1 ] <> M then
57594: LD_VAR 0 7
57598: PUSH
57599: LD_INT 1
57601: ARRAY
57602: PUSH
57603: LD_INT 1
57605: ARRAY
57606: PUSH
57607: LD_STRING M
57609: NONEQUAL
57610: IFFALSE 57614
// exit ;
57612: GO 57680
// x := task [ 1 ] [ 2 ] ;
57614: LD_ADDR_VAR 0 5
57618: PUSH
57619: LD_VAR 0 7
57623: PUSH
57624: LD_INT 1
57626: ARRAY
57627: PUSH
57628: LD_INT 2
57630: ARRAY
57631: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57632: LD_ADDR_VAR 0 6
57636: PUSH
57637: LD_VAR 0 7
57641: PUSH
57642: LD_INT 1
57644: ARRAY
57645: PUSH
57646: LD_INT 3
57648: ARRAY
57649: ST_TO_ADDR
// if InArea ( x , y , area ) then
57650: LD_VAR 0 5
57654: PPUSH
57655: LD_VAR 0 6
57659: PPUSH
57660: LD_VAR 0 2
57664: PPUSH
57665: CALL_OW 309
57669: IFFALSE 57680
// ComStop ( unit ) ;
57671: LD_VAR 0 1
57675: PPUSH
57676: CALL_OW 141
// end ;
57680: LD_VAR 0 4
57684: RET
// export function Abs ( value ) ; begin
57685: LD_INT 0
57687: PPUSH
// result := value ;
57688: LD_ADDR_VAR 0 2
57692: PUSH
57693: LD_VAR 0 1
57697: ST_TO_ADDR
// if value < 0 then
57698: LD_VAR 0 1
57702: PUSH
57703: LD_INT 0
57705: LESS
57706: IFFALSE 57723
// result := value * - 1 ;
57708: LD_ADDR_VAR 0 2
57712: PUSH
57713: LD_VAR 0 1
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: MUL
57722: ST_TO_ADDR
// end ;
57723: LD_VAR 0 2
57727: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57728: LD_INT 0
57730: PPUSH
57731: PPUSH
57732: PPUSH
57733: PPUSH
57734: PPUSH
57735: PPUSH
57736: PPUSH
57737: PPUSH
// if not unit or not building then
57738: LD_VAR 0 1
57742: NOT
57743: PUSH
57744: LD_VAR 0 2
57748: NOT
57749: OR
57750: IFFALSE 57754
// exit ;
57752: GO 57980
// x := GetX ( building ) ;
57754: LD_ADDR_VAR 0 4
57758: PUSH
57759: LD_VAR 0 2
57763: PPUSH
57764: CALL_OW 250
57768: ST_TO_ADDR
// y := GetY ( building ) ;
57769: LD_ADDR_VAR 0 6
57773: PUSH
57774: LD_VAR 0 2
57778: PPUSH
57779: CALL_OW 251
57783: ST_TO_ADDR
// d := GetDir ( building ) ;
57784: LD_ADDR_VAR 0 8
57788: PUSH
57789: LD_VAR 0 2
57793: PPUSH
57794: CALL_OW 254
57798: ST_TO_ADDR
// r := 4 ;
57799: LD_ADDR_VAR 0 9
57803: PUSH
57804: LD_INT 4
57806: ST_TO_ADDR
// for i := 1 to 5 do
57807: LD_ADDR_VAR 0 10
57811: PUSH
57812: DOUBLE
57813: LD_INT 1
57815: DEC
57816: ST_TO_ADDR
57817: LD_INT 5
57819: PUSH
57820: FOR_TO
57821: IFFALSE 57978
// begin _x := ShiftX ( x , d , r + i ) ;
57823: LD_ADDR_VAR 0 5
57827: PUSH
57828: LD_VAR 0 4
57832: PPUSH
57833: LD_VAR 0 8
57837: PPUSH
57838: LD_VAR 0 9
57842: PUSH
57843: LD_VAR 0 10
57847: PLUS
57848: PPUSH
57849: CALL_OW 272
57853: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57854: LD_ADDR_VAR 0 7
57858: PUSH
57859: LD_VAR 0 6
57863: PPUSH
57864: LD_VAR 0 8
57868: PPUSH
57869: LD_VAR 0 9
57873: PUSH
57874: LD_VAR 0 10
57878: PLUS
57879: PPUSH
57880: CALL_OW 273
57884: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57885: LD_VAR 0 5
57889: PPUSH
57890: LD_VAR 0 7
57894: PPUSH
57895: CALL_OW 488
57899: PUSH
57900: LD_VAR 0 5
57904: PPUSH
57905: LD_VAR 0 7
57909: PPUSH
57910: CALL_OW 428
57914: PPUSH
57915: CALL_OW 247
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: IN
57930: NOT
57931: AND
57932: IFFALSE 57976
// begin ComMoveXY ( unit , _x , _y ) ;
57934: LD_VAR 0 1
57938: PPUSH
57939: LD_VAR 0 5
57943: PPUSH
57944: LD_VAR 0 7
57948: PPUSH
57949: CALL_OW 111
// result := [ _x , _y ] ;
57953: LD_ADDR_VAR 0 3
57957: PUSH
57958: LD_VAR 0 5
57962: PUSH
57963: LD_VAR 0 7
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: ST_TO_ADDR
// exit ;
57972: POP
57973: POP
57974: GO 57980
// end ; end ;
57976: GO 57820
57978: POP
57979: POP
// end ;
57980: LD_VAR 0 3
57984: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57985: LD_INT 0
57987: PPUSH
57988: PPUSH
57989: PPUSH
// result := 0 ;
57990: LD_ADDR_VAR 0 3
57994: PUSH
57995: LD_INT 0
57997: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57998: LD_VAR 0 1
58002: PUSH
58003: LD_INT 0
58005: LESS
58006: PUSH
58007: LD_VAR 0 1
58011: PUSH
58012: LD_INT 8
58014: GREATER
58015: OR
58016: PUSH
58017: LD_VAR 0 2
58021: PUSH
58022: LD_INT 0
58024: LESS
58025: OR
58026: PUSH
58027: LD_VAR 0 2
58031: PUSH
58032: LD_INT 8
58034: GREATER
58035: OR
58036: IFFALSE 58040
// exit ;
58038: GO 58115
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58040: LD_ADDR_VAR 0 4
58044: PUSH
58045: LD_INT 22
58047: PUSH
58048: LD_VAR 0 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PPUSH
58057: CALL_OW 69
58061: PUSH
58062: FOR_IN
58063: IFFALSE 58113
// begin un := UnitShoot ( i ) ;
58065: LD_ADDR_VAR 0 5
58069: PUSH
58070: LD_VAR 0 4
58074: PPUSH
58075: CALL_OW 504
58079: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58080: LD_VAR 0 5
58084: PPUSH
58085: CALL_OW 255
58089: PUSH
58090: LD_VAR 0 1
58094: EQUAL
58095: IFFALSE 58111
// begin result := un ;
58097: LD_ADDR_VAR 0 3
58101: PUSH
58102: LD_VAR 0 5
58106: ST_TO_ADDR
// exit ;
58107: POP
58108: POP
58109: GO 58115
// end ; end ;
58111: GO 58062
58113: POP
58114: POP
// end ;
58115: LD_VAR 0 3
58119: RET
// export function GetCargoBay ( units ) ; begin
58120: LD_INT 0
58122: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58123: LD_ADDR_VAR 0 2
58127: PUSH
58128: LD_VAR 0 1
58132: PPUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 34
58138: PUSH
58139: LD_INT 12
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 34
58148: PUSH
58149: LD_INT 51
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 34
58158: PUSH
58159: LD_INT 32
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 34
58168: PUSH
58169: LD_INT 89
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: PPUSH
58183: CALL_OW 72
58187: ST_TO_ADDR
// end ;
58188: LD_VAR 0 2
58192: RET
// export function Negate ( value ) ; begin
58193: LD_INT 0
58195: PPUSH
// result := not value ;
58196: LD_ADDR_VAR 0 2
58200: PUSH
58201: LD_VAR 0 1
58205: NOT
58206: ST_TO_ADDR
// end ;
58207: LD_VAR 0 2
58211: RET
// export function Inc ( value ) ; begin
58212: LD_INT 0
58214: PPUSH
// result := value + 1 ;
58215: LD_ADDR_VAR 0 2
58219: PUSH
58220: LD_VAR 0 1
58224: PUSH
58225: LD_INT 1
58227: PLUS
58228: ST_TO_ADDR
// end ;
58229: LD_VAR 0 2
58233: RET
// export function Dec ( value ) ; begin
58234: LD_INT 0
58236: PPUSH
// result := value - 1 ;
58237: LD_ADDR_VAR 0 2
58241: PUSH
58242: LD_VAR 0 1
58246: PUSH
58247: LD_INT 1
58249: MINUS
58250: ST_TO_ADDR
// end ;
58251: LD_VAR 0 2
58255: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58256: LD_INT 0
58258: PPUSH
58259: PPUSH
58260: PPUSH
58261: PPUSH
58262: PPUSH
58263: PPUSH
58264: PPUSH
58265: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58266: LD_VAR 0 1
58270: PPUSH
58271: LD_VAR 0 2
58275: PPUSH
58276: CALL_OW 488
58280: NOT
58281: PUSH
58282: LD_VAR 0 3
58286: PPUSH
58287: LD_VAR 0 4
58291: PPUSH
58292: CALL_OW 488
58296: NOT
58297: OR
58298: IFFALSE 58311
// begin result := - 1 ;
58300: LD_ADDR_VAR 0 5
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: ST_TO_ADDR
// exit ;
58309: GO 58546
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58311: LD_ADDR_VAR 0 12
58315: PUSH
58316: LD_VAR 0 1
58320: PPUSH
58321: LD_VAR 0 2
58325: PPUSH
58326: LD_VAR 0 3
58330: PPUSH
58331: LD_VAR 0 4
58335: PPUSH
58336: CALL 57396 0 4
58340: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58341: LD_ADDR_VAR 0 11
58345: PUSH
58346: LD_VAR 0 1
58350: PPUSH
58351: LD_VAR 0 2
58355: PPUSH
58356: LD_VAR 0 12
58360: PUSH
58361: LD_INT 1
58363: ARRAY
58364: PPUSH
58365: LD_VAR 0 12
58369: PUSH
58370: LD_INT 2
58372: ARRAY
58373: PPUSH
58374: CALL_OW 298
58378: ST_TO_ADDR
// distance := 9999 ;
58379: LD_ADDR_VAR 0 10
58383: PUSH
58384: LD_INT 9999
58386: ST_TO_ADDR
// for i := 0 to 5 do
58387: LD_ADDR_VAR 0 6
58391: PUSH
58392: DOUBLE
58393: LD_INT 0
58395: DEC
58396: ST_TO_ADDR
58397: LD_INT 5
58399: PUSH
58400: FOR_TO
58401: IFFALSE 58544
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58403: LD_ADDR_VAR 0 7
58407: PUSH
58408: LD_VAR 0 1
58412: PPUSH
58413: LD_VAR 0 6
58417: PPUSH
58418: LD_VAR 0 11
58422: PPUSH
58423: CALL_OW 272
58427: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58428: LD_ADDR_VAR 0 8
58432: PUSH
58433: LD_VAR 0 2
58437: PPUSH
58438: LD_VAR 0 6
58442: PPUSH
58443: LD_VAR 0 11
58447: PPUSH
58448: CALL_OW 273
58452: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58453: LD_VAR 0 7
58457: PPUSH
58458: LD_VAR 0 8
58462: PPUSH
58463: CALL_OW 488
58467: NOT
58468: IFFALSE 58472
// continue ;
58470: GO 58400
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
58472: LD_ADDR_VAR 0 9
58476: PUSH
58477: LD_VAR 0 12
58481: PUSH
58482: LD_INT 1
58484: ARRAY
58485: PPUSH
58486: LD_VAR 0 12
58490: PUSH
58491: LD_INT 2
58493: ARRAY
58494: PPUSH
58495: LD_VAR 0 7
58499: PPUSH
58500: LD_VAR 0 8
58504: PPUSH
58505: CALL_OW 298
58509: ST_TO_ADDR
// if tmp < distance then
58510: LD_VAR 0 9
58514: PUSH
58515: LD_VAR 0 10
58519: LESS
58520: IFFALSE 58542
// begin result := i ;
58522: LD_ADDR_VAR 0 5
58526: PUSH
58527: LD_VAR 0 6
58531: ST_TO_ADDR
// distance := tmp ;
58532: LD_ADDR_VAR 0 10
58536: PUSH
58537: LD_VAR 0 9
58541: ST_TO_ADDR
// end ; end ;
58542: GO 58400
58544: POP
58545: POP
// end ;
58546: LD_VAR 0 5
58550: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58551: LD_INT 0
58553: PPUSH
58554: PPUSH
// if not driver or not IsInUnit ( driver ) then
58555: LD_VAR 0 1
58559: NOT
58560: PUSH
58561: LD_VAR 0 1
58565: PPUSH
58566: CALL_OW 310
58570: NOT
58571: OR
58572: IFFALSE 58576
// exit ;
58574: GO 58666
// vehicle := IsInUnit ( driver ) ;
58576: LD_ADDR_VAR 0 3
58580: PUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: CALL_OW 310
58590: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58591: LD_VAR 0 1
58595: PPUSH
58596: LD_STRING \
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: PUSH
58626: LD_STRING E
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_VAR 0 3
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PPUSH
58662: CALL_OW 446
// end ;
58666: LD_VAR 0 2
58670: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58671: LD_INT 0
58673: PPUSH
58674: PPUSH
// if not driver or not IsInUnit ( driver ) then
58675: LD_VAR 0 1
58679: NOT
58680: PUSH
58681: LD_VAR 0 1
58685: PPUSH
58686: CALL_OW 310
58690: NOT
58691: OR
58692: IFFALSE 58696
// exit ;
58694: GO 58786
// vehicle := IsInUnit ( driver ) ;
58696: LD_ADDR_VAR 0 3
58700: PUSH
58701: LD_VAR 0 1
58705: PPUSH
58706: CALL_OW 310
58710: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58711: LD_VAR 0 1
58715: PPUSH
58716: LD_STRING \
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: PUSH
58746: LD_STRING E
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_VAR 0 3
58759: PUSH
58760: LD_INT 0
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PPUSH
58782: CALL_OW 447
// end ;
58786: LD_VAR 0 2
58790: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58791: LD_INT 0
58793: PPUSH
58794: PPUSH
58795: PPUSH
// tmp := [ ] ;
58796: LD_ADDR_VAR 0 5
58800: PUSH
58801: EMPTY
58802: ST_TO_ADDR
// for i in units do
58803: LD_ADDR_VAR 0 4
58807: PUSH
58808: LD_VAR 0 1
58812: PUSH
58813: FOR_IN
58814: IFFALSE 58852
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58816: LD_ADDR_VAR 0 5
58820: PUSH
58821: LD_VAR 0 5
58825: PPUSH
58826: LD_VAR 0 5
58830: PUSH
58831: LD_INT 1
58833: PLUS
58834: PPUSH
58835: LD_VAR 0 4
58839: PPUSH
58840: CALL_OW 256
58844: PPUSH
58845: CALL_OW 2
58849: ST_TO_ADDR
58850: GO 58813
58852: POP
58853: POP
// if not tmp then
58854: LD_VAR 0 5
58858: NOT
58859: IFFALSE 58863
// exit ;
58861: GO 58911
// if asc then
58863: LD_VAR 0 2
58867: IFFALSE 58891
// result := SortListByListAsc ( units , tmp ) else
58869: LD_ADDR_VAR 0 3
58873: PUSH
58874: LD_VAR 0 1
58878: PPUSH
58879: LD_VAR 0 5
58883: PPUSH
58884: CALL_OW 76
58888: ST_TO_ADDR
58889: GO 58911
// result := SortListByListDesc ( units , tmp ) ;
58891: LD_ADDR_VAR 0 3
58895: PUSH
58896: LD_VAR 0 1
58900: PPUSH
58901: LD_VAR 0 5
58905: PPUSH
58906: CALL_OW 77
58910: ST_TO_ADDR
// end ;
58911: LD_VAR 0 3
58915: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58916: LD_INT 0
58918: PPUSH
58919: PPUSH
// task := GetTaskList ( mech ) ;
58920: LD_ADDR_VAR 0 4
58924: PUSH
58925: LD_VAR 0 1
58929: PPUSH
58930: CALL_OW 437
58934: ST_TO_ADDR
// if not task then
58935: LD_VAR 0 4
58939: NOT
58940: IFFALSE 58944
// exit ;
58942: GO 58986
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58944: LD_ADDR_VAR 0 3
58948: PUSH
58949: LD_VAR 0 4
58953: PUSH
58954: LD_INT 1
58956: ARRAY
58957: PUSH
58958: LD_INT 1
58960: ARRAY
58961: PUSH
58962: LD_STRING r
58964: EQUAL
58965: PUSH
58966: LD_VAR 0 4
58970: PUSH
58971: LD_INT 1
58973: ARRAY
58974: PUSH
58975: LD_INT 4
58977: ARRAY
58978: PUSH
58979: LD_VAR 0 2
58983: EQUAL
58984: AND
58985: ST_TO_ADDR
// end ;
58986: LD_VAR 0 3
58990: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58991: LD_INT 0
58993: PPUSH
// SetDir ( unit , d ) ;
58994: LD_VAR 0 1
58998: PPUSH
58999: LD_VAR 0 4
59003: PPUSH
59004: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59008: LD_VAR 0 1
59012: PPUSH
59013: LD_VAR 0 2
59017: PPUSH
59018: LD_VAR 0 3
59022: PPUSH
59023: LD_VAR 0 5
59027: PPUSH
59028: CALL_OW 48
// end ;
59032: LD_VAR 0 6
59036: RET
// export function ToNaturalNumber ( number ) ; begin
59037: LD_INT 0
59039: PPUSH
// result := number div 1 ;
59040: LD_ADDR_VAR 0 2
59044: PUSH
59045: LD_VAR 0 1
59049: PUSH
59050: LD_INT 1
59052: DIV
59053: ST_TO_ADDR
// if number < 0 then
59054: LD_VAR 0 1
59058: PUSH
59059: LD_INT 0
59061: LESS
59062: IFFALSE 59072
// result := 0 ;
59064: LD_ADDR_VAR 0 2
59068: PUSH
59069: LD_INT 0
59071: ST_TO_ADDR
// end ;
59072: LD_VAR 0 2
59076: RET
// export function SortByClass ( units , class ) ; var un ; begin
59077: LD_INT 0
59079: PPUSH
59080: PPUSH
// if not units or not class then
59081: LD_VAR 0 1
59085: NOT
59086: PUSH
59087: LD_VAR 0 2
59091: NOT
59092: OR
59093: IFFALSE 59097
// exit ;
59095: GO 59192
// result := [ ] ;
59097: LD_ADDR_VAR 0 3
59101: PUSH
59102: EMPTY
59103: ST_TO_ADDR
// for un in units do
59104: LD_ADDR_VAR 0 4
59108: PUSH
59109: LD_VAR 0 1
59113: PUSH
59114: FOR_IN
59115: IFFALSE 59190
// if GetClass ( un ) = class then
59117: LD_VAR 0 4
59121: PPUSH
59122: CALL_OW 257
59126: PUSH
59127: LD_VAR 0 2
59131: EQUAL
59132: IFFALSE 59159
// result := Insert ( result , 1 , un ) else
59134: LD_ADDR_VAR 0 3
59138: PUSH
59139: LD_VAR 0 3
59143: PPUSH
59144: LD_INT 1
59146: PPUSH
59147: LD_VAR 0 4
59151: PPUSH
59152: CALL_OW 2
59156: ST_TO_ADDR
59157: GO 59188
// result := Replace ( result , result + 1 , un ) ;
59159: LD_ADDR_VAR 0 3
59163: PUSH
59164: LD_VAR 0 3
59168: PPUSH
59169: LD_VAR 0 3
59173: PUSH
59174: LD_INT 1
59176: PLUS
59177: PPUSH
59178: LD_VAR 0 4
59182: PPUSH
59183: CALL_OW 1
59187: ST_TO_ADDR
59188: GO 59114
59190: POP
59191: POP
// end ;
59192: LD_VAR 0 3
59196: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59197: LD_INT 0
59199: PPUSH
59200: PPUSH
59201: PPUSH
59202: PPUSH
59203: PPUSH
59204: PPUSH
59205: PPUSH
// result := [ ] ;
59206: LD_ADDR_VAR 0 4
59210: PUSH
59211: EMPTY
59212: ST_TO_ADDR
// if x - r < 0 then
59213: LD_VAR 0 1
59217: PUSH
59218: LD_VAR 0 3
59222: MINUS
59223: PUSH
59224: LD_INT 0
59226: LESS
59227: IFFALSE 59239
// min_x := 0 else
59229: LD_ADDR_VAR 0 8
59233: PUSH
59234: LD_INT 0
59236: ST_TO_ADDR
59237: GO 59255
// min_x := x - r ;
59239: LD_ADDR_VAR 0 8
59243: PUSH
59244: LD_VAR 0 1
59248: PUSH
59249: LD_VAR 0 3
59253: MINUS
59254: ST_TO_ADDR
// if y - r < 0 then
59255: LD_VAR 0 2
59259: PUSH
59260: LD_VAR 0 3
59264: MINUS
59265: PUSH
59266: LD_INT 0
59268: LESS
59269: IFFALSE 59281
// min_y := 0 else
59271: LD_ADDR_VAR 0 7
59275: PUSH
59276: LD_INT 0
59278: ST_TO_ADDR
59279: GO 59297
// min_y := y - r ;
59281: LD_ADDR_VAR 0 7
59285: PUSH
59286: LD_VAR 0 2
59290: PUSH
59291: LD_VAR 0 3
59295: MINUS
59296: ST_TO_ADDR
// max_x := x + r ;
59297: LD_ADDR_VAR 0 9
59301: PUSH
59302: LD_VAR 0 1
59306: PUSH
59307: LD_VAR 0 3
59311: PLUS
59312: ST_TO_ADDR
// max_y := y + r ;
59313: LD_ADDR_VAR 0 10
59317: PUSH
59318: LD_VAR 0 2
59322: PUSH
59323: LD_VAR 0 3
59327: PLUS
59328: ST_TO_ADDR
// for _x = min_x to max_x do
59329: LD_ADDR_VAR 0 5
59333: PUSH
59334: DOUBLE
59335: LD_VAR 0 8
59339: DEC
59340: ST_TO_ADDR
59341: LD_VAR 0 9
59345: PUSH
59346: FOR_TO
59347: IFFALSE 59448
// for _y = min_y to max_y do
59349: LD_ADDR_VAR 0 6
59353: PUSH
59354: DOUBLE
59355: LD_VAR 0 7
59359: DEC
59360: ST_TO_ADDR
59361: LD_VAR 0 10
59365: PUSH
59366: FOR_TO
59367: IFFALSE 59444
// begin if not ValidHex ( _x , _y ) then
59369: LD_VAR 0 5
59373: PPUSH
59374: LD_VAR 0 6
59378: PPUSH
59379: CALL_OW 488
59383: NOT
59384: IFFALSE 59388
// continue ;
59386: GO 59366
// if GetResourceTypeXY ( _x , _y ) then
59388: LD_VAR 0 5
59392: PPUSH
59393: LD_VAR 0 6
59397: PPUSH
59398: CALL_OW 283
59402: IFFALSE 59442
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59404: LD_ADDR_VAR 0 4
59408: PUSH
59409: LD_VAR 0 4
59413: PPUSH
59414: LD_VAR 0 4
59418: PUSH
59419: LD_INT 1
59421: PLUS
59422: PPUSH
59423: LD_VAR 0 5
59427: PUSH
59428: LD_VAR 0 6
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PPUSH
59437: CALL_OW 1
59441: ST_TO_ADDR
// end ;
59442: GO 59366
59444: POP
59445: POP
59446: GO 59346
59448: POP
59449: POP
// end ;
59450: LD_VAR 0 4
59454: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
59455: LD_INT 0
59457: PPUSH
59458: PPUSH
59459: PPUSH
59460: PPUSH
59461: PPUSH
59462: PPUSH
59463: PPUSH
59464: PPUSH
// if not units then
59465: LD_VAR 0 1
59469: NOT
59470: IFFALSE 59474
// exit ;
59472: GO 59998
// result := UnitFilter ( units , [ f_ok ] ) ;
59474: LD_ADDR_VAR 0 3
59478: PUSH
59479: LD_VAR 0 1
59483: PPUSH
59484: LD_INT 50
59486: PUSH
59487: EMPTY
59488: LIST
59489: PPUSH
59490: CALL_OW 72
59494: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59495: LD_ADDR_VAR 0 8
59499: PUSH
59500: LD_VAR 0 1
59504: PUSH
59505: LD_INT 1
59507: ARRAY
59508: PPUSH
59509: CALL_OW 255
59513: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
59514: LD_ADDR_VAR 0 10
59518: PUSH
59519: LD_INT 29
59521: PUSH
59522: LD_INT 91
59524: PUSH
59525: LD_INT 49
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: LIST
59532: ST_TO_ADDR
// if not result then
59533: LD_VAR 0 3
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 59998
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59542: LD_ADDR_VAR 0 5
59546: PUSH
59547: LD_INT 81
59549: PUSH
59550: LD_VAR 0 8
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PPUSH
59559: CALL_OW 69
59563: ST_TO_ADDR
// for i in result do
59564: LD_ADDR_VAR 0 4
59568: PUSH
59569: LD_VAR 0 3
59573: PUSH
59574: FOR_IN
59575: IFFALSE 59996
// begin tag := GetTag ( i ) + 1 ;
59577: LD_ADDR_VAR 0 9
59581: PUSH
59582: LD_VAR 0 4
59586: PPUSH
59587: CALL_OW 110
59591: PUSH
59592: LD_INT 1
59594: PLUS
59595: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59596: LD_ADDR_VAR 0 7
59600: PUSH
59601: LD_VAR 0 4
59605: PPUSH
59606: CALL_OW 250
59610: PPUSH
59611: LD_VAR 0 4
59615: PPUSH
59616: CALL_OW 251
59620: PPUSH
59621: LD_INT 6
59623: PPUSH
59624: CALL 59197 0 3
59628: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
59629: LD_VAR 0 4
59633: PPUSH
59634: CALL_OW 247
59638: PUSH
59639: LD_INT 2
59641: EQUAL
59642: PUSH
59643: LD_VAR 0 7
59647: AND
59648: PUSH
59649: LD_VAR 0 4
59653: PPUSH
59654: CALL_OW 264
59658: PUSH
59659: LD_VAR 0 10
59663: IN
59664: NOT
59665: AND
59666: IFFALSE 59705
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59668: LD_VAR 0 4
59672: PPUSH
59673: LD_VAR 0 7
59677: PUSH
59678: LD_INT 1
59680: ARRAY
59681: PUSH
59682: LD_INT 1
59684: ARRAY
59685: PPUSH
59686: LD_VAR 0 7
59690: PUSH
59691: LD_INT 1
59693: ARRAY
59694: PUSH
59695: LD_INT 2
59697: ARRAY
59698: PPUSH
59699: CALL_OW 116
59703: GO 59994
// if path > tag then
59705: LD_VAR 0 2
59709: PUSH
59710: LD_VAR 0 9
59714: GREATER
59715: IFFALSE 59923
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
59717: LD_ADDR_VAR 0 6
59721: PUSH
59722: LD_VAR 0 5
59726: PPUSH
59727: LD_INT 91
59729: PUSH
59730: LD_VAR 0 4
59734: PUSH
59735: LD_INT 8
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: PPUSH
59743: CALL_OW 72
59747: ST_TO_ADDR
// if nearEnemy then
59748: LD_VAR 0 6
59752: IFFALSE 59821
// begin if GetWeapon ( i ) = ru_time_lapser then
59754: LD_VAR 0 4
59758: PPUSH
59759: CALL_OW 264
59763: PUSH
59764: LD_INT 49
59766: EQUAL
59767: IFFALSE 59795
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
59769: LD_VAR 0 4
59773: PPUSH
59774: LD_VAR 0 6
59778: PPUSH
59779: LD_VAR 0 4
59783: PPUSH
59784: CALL_OW 74
59788: PPUSH
59789: CALL_OW 112
59793: GO 59819
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
59795: LD_VAR 0 4
59799: PPUSH
59800: LD_VAR 0 6
59804: PPUSH
59805: LD_VAR 0 4
59809: PPUSH
59810: CALL_OW 74
59814: PPUSH
59815: CALL 60923 0 2
// end else
59819: GO 59921
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59821: LD_VAR 0 4
59825: PPUSH
59826: LD_VAR 0 2
59830: PUSH
59831: LD_VAR 0 9
59835: ARRAY
59836: PUSH
59837: LD_INT 1
59839: ARRAY
59840: PPUSH
59841: LD_VAR 0 2
59845: PUSH
59846: LD_VAR 0 9
59850: ARRAY
59851: PUSH
59852: LD_INT 2
59854: ARRAY
59855: PPUSH
59856: CALL_OW 297
59860: PUSH
59861: LD_INT 6
59863: GREATER
59864: IFFALSE 59907
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59866: LD_VAR 0 4
59870: PPUSH
59871: LD_VAR 0 2
59875: PUSH
59876: LD_VAR 0 9
59880: ARRAY
59881: PUSH
59882: LD_INT 1
59884: ARRAY
59885: PPUSH
59886: LD_VAR 0 2
59890: PUSH
59891: LD_VAR 0 9
59895: ARRAY
59896: PUSH
59897: LD_INT 2
59899: ARRAY
59900: PPUSH
59901: CALL_OW 114
59905: GO 59921
// SetTag ( i , tag ) ;
59907: LD_VAR 0 4
59911: PPUSH
59912: LD_VAR 0 9
59916: PPUSH
59917: CALL_OW 109
// end else
59921: GO 59994
// if enemy then
59923: LD_VAR 0 5
59927: IFFALSE 59994
// begin if GetWeapon ( i ) = ru_time_lapser then
59929: LD_VAR 0 4
59933: PPUSH
59934: CALL_OW 264
59938: PUSH
59939: LD_INT 49
59941: EQUAL
59942: IFFALSE 59970
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59944: LD_VAR 0 4
59948: PPUSH
59949: LD_VAR 0 5
59953: PPUSH
59954: LD_VAR 0 4
59958: PPUSH
59959: CALL_OW 74
59963: PPUSH
59964: CALL_OW 112
59968: GO 59994
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59970: LD_VAR 0 4
59974: PPUSH
59975: LD_VAR 0 5
59979: PPUSH
59980: LD_VAR 0 4
59984: PPUSH
59985: CALL_OW 74
59989: PPUSH
59990: CALL 60923 0 2
// end ; end ;
59994: GO 59574
59996: POP
59997: POP
// end ;
59998: LD_VAR 0 3
60002: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60003: LD_INT 0
60005: PPUSH
60006: PPUSH
60007: PPUSH
// if not unit or IsInUnit ( unit ) then
60008: LD_VAR 0 1
60012: NOT
60013: PUSH
60014: LD_VAR 0 1
60018: PPUSH
60019: CALL_OW 310
60023: OR
60024: IFFALSE 60028
// exit ;
60026: GO 60119
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60028: LD_ADDR_VAR 0 4
60032: PUSH
60033: LD_VAR 0 1
60037: PPUSH
60038: CALL_OW 250
60042: PPUSH
60043: LD_VAR 0 2
60047: PPUSH
60048: LD_INT 1
60050: PPUSH
60051: CALL_OW 272
60055: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60056: LD_ADDR_VAR 0 5
60060: PUSH
60061: LD_VAR 0 1
60065: PPUSH
60066: CALL_OW 251
60070: PPUSH
60071: LD_VAR 0 2
60075: PPUSH
60076: LD_INT 1
60078: PPUSH
60079: CALL_OW 273
60083: ST_TO_ADDR
// if ValidHex ( x , y ) then
60084: LD_VAR 0 4
60088: PPUSH
60089: LD_VAR 0 5
60093: PPUSH
60094: CALL_OW 488
60098: IFFALSE 60119
// ComTurnXY ( unit , x , y ) ;
60100: LD_VAR 0 1
60104: PPUSH
60105: LD_VAR 0 4
60109: PPUSH
60110: LD_VAR 0 5
60114: PPUSH
60115: CALL_OW 118
// end ;
60119: LD_VAR 0 3
60123: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60124: LD_INT 0
60126: PPUSH
60127: PPUSH
// result := false ;
60128: LD_ADDR_VAR 0 3
60132: PUSH
60133: LD_INT 0
60135: ST_TO_ADDR
// if not units then
60136: LD_VAR 0 2
60140: NOT
60141: IFFALSE 60145
// exit ;
60143: GO 60190
// for i in units do
60145: LD_ADDR_VAR 0 4
60149: PUSH
60150: LD_VAR 0 2
60154: PUSH
60155: FOR_IN
60156: IFFALSE 60188
// if See ( side , i ) then
60158: LD_VAR 0 1
60162: PPUSH
60163: LD_VAR 0 4
60167: PPUSH
60168: CALL_OW 292
60172: IFFALSE 60186
// begin result := true ;
60174: LD_ADDR_VAR 0 3
60178: PUSH
60179: LD_INT 1
60181: ST_TO_ADDR
// exit ;
60182: POP
60183: POP
60184: GO 60190
// end ;
60186: GO 60155
60188: POP
60189: POP
// end ;
60190: LD_VAR 0 3
60194: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
// if not unit or not points then
60201: LD_VAR 0 1
60205: NOT
60206: PUSH
60207: LD_VAR 0 2
60211: NOT
60212: OR
60213: IFFALSE 60217
// exit ;
60215: GO 60307
// dist := 99999 ;
60217: LD_ADDR_VAR 0 5
60221: PUSH
60222: LD_INT 99999
60224: ST_TO_ADDR
// for i in points do
60225: LD_ADDR_VAR 0 4
60229: PUSH
60230: LD_VAR 0 2
60234: PUSH
60235: FOR_IN
60236: IFFALSE 60305
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60238: LD_ADDR_VAR 0 6
60242: PUSH
60243: LD_VAR 0 1
60247: PPUSH
60248: LD_VAR 0 4
60252: PUSH
60253: LD_INT 1
60255: ARRAY
60256: PPUSH
60257: LD_VAR 0 4
60261: PUSH
60262: LD_INT 2
60264: ARRAY
60265: PPUSH
60266: CALL_OW 297
60270: ST_TO_ADDR
// if tmpDist < dist then
60271: LD_VAR 0 6
60275: PUSH
60276: LD_VAR 0 5
60280: LESS
60281: IFFALSE 60303
// begin result := i ;
60283: LD_ADDR_VAR 0 3
60287: PUSH
60288: LD_VAR 0 4
60292: ST_TO_ADDR
// dist := tmpDist ;
60293: LD_ADDR_VAR 0 5
60297: PUSH
60298: LD_VAR 0 6
60302: ST_TO_ADDR
// end ; end ;
60303: GO 60235
60305: POP
60306: POP
// end ;
60307: LD_VAR 0 3
60311: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
60312: LD_INT 0
60314: PPUSH
// uc_side := side ;
60315: LD_ADDR_OWVAR 20
60319: PUSH
60320: LD_VAR 0 1
60324: ST_TO_ADDR
// uc_nation := 3 ;
60325: LD_ADDR_OWVAR 21
60329: PUSH
60330: LD_INT 3
60332: ST_TO_ADDR
// vc_chassis := 25 ;
60333: LD_ADDR_OWVAR 37
60337: PUSH
60338: LD_INT 25
60340: ST_TO_ADDR
// vc_engine := engine_siberite ;
60341: LD_ADDR_OWVAR 39
60345: PUSH
60346: LD_INT 3
60348: ST_TO_ADDR
// vc_control := control_computer ;
60349: LD_ADDR_OWVAR 38
60353: PUSH
60354: LD_INT 3
60356: ST_TO_ADDR
// vc_weapon := 59 ;
60357: LD_ADDR_OWVAR 40
60361: PUSH
60362: LD_INT 59
60364: ST_TO_ADDR
// result := CreateVehicle ;
60365: LD_ADDR_VAR 0 5
60369: PUSH
60370: CALL_OW 45
60374: ST_TO_ADDR
// SetDir ( result , d ) ;
60375: LD_VAR 0 5
60379: PPUSH
60380: LD_VAR 0 4
60384: PPUSH
60385: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
60389: LD_VAR 0 5
60393: PPUSH
60394: LD_VAR 0 2
60398: PPUSH
60399: LD_VAR 0 3
60403: PPUSH
60404: LD_INT 0
60406: PPUSH
60407: CALL_OW 48
// end ;
60411: LD_VAR 0 5
60415: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
60416: LD_INT 0
60418: PPUSH
60419: PPUSH
60420: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
60421: LD_ADDR_VAR 0 2
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
60444: LD_VAR 0 1
60448: NOT
60449: PUSH
60450: LD_VAR 0 1
60454: PPUSH
60455: CALL_OW 264
60459: PUSH
60460: LD_INT 12
60462: PUSH
60463: LD_INT 51
60465: PUSH
60466: LD_INT 32
60468: PUSH
60469: LD_INT 89
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: IN
60478: NOT
60479: OR
60480: IFFALSE 60484
// exit ;
60482: GO 60582
// for i := 1 to 3 do
60484: LD_ADDR_VAR 0 3
60488: PUSH
60489: DOUBLE
60490: LD_INT 1
60492: DEC
60493: ST_TO_ADDR
60494: LD_INT 3
60496: PUSH
60497: FOR_TO
60498: IFFALSE 60580
// begin tmp := GetCargo ( cargo , i ) ;
60500: LD_ADDR_VAR 0 4
60504: PUSH
60505: LD_VAR 0 1
60509: PPUSH
60510: LD_VAR 0 3
60514: PPUSH
60515: CALL_OW 289
60519: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
60520: LD_ADDR_VAR 0 2
60524: PUSH
60525: LD_VAR 0 2
60529: PPUSH
60530: LD_VAR 0 3
60534: PPUSH
60535: LD_VAR 0 4
60539: PPUSH
60540: CALL_OW 1
60544: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
60545: LD_ADDR_VAR 0 2
60549: PUSH
60550: LD_VAR 0 2
60554: PPUSH
60555: LD_INT 4
60557: PPUSH
60558: LD_VAR 0 2
60562: PUSH
60563: LD_INT 4
60565: ARRAY
60566: PUSH
60567: LD_VAR 0 4
60571: PLUS
60572: PPUSH
60573: CALL_OW 1
60577: ST_TO_ADDR
// end ;
60578: GO 60497
60580: POP
60581: POP
// end ;
60582: LD_VAR 0 2
60586: RET
// export function Length ( array ) ; begin
60587: LD_INT 0
60589: PPUSH
// result := array + 0 ;
60590: LD_ADDR_VAR 0 2
60594: PUSH
60595: LD_VAR 0 1
60599: PUSH
60600: LD_INT 0
60602: PLUS
60603: ST_TO_ADDR
// end ;
60604: LD_VAR 0 2
60608: RET
// export function PrepareArray ( array ) ; begin
60609: LD_INT 0
60611: PPUSH
// result := array diff 0 ;
60612: LD_ADDR_VAR 0 2
60616: PUSH
60617: LD_VAR 0 1
60621: PUSH
60622: LD_INT 0
60624: DIFF
60625: ST_TO_ADDR
// if not result [ 1 ] then
60626: LD_VAR 0 2
60630: PUSH
60631: LD_INT 1
60633: ARRAY
60634: NOT
60635: IFFALSE 60655
// result := Delete ( result , 1 ) ;
60637: LD_ADDR_VAR 0 2
60641: PUSH
60642: LD_VAR 0 2
60646: PPUSH
60647: LD_INT 1
60649: PPUSH
60650: CALL_OW 3
60654: ST_TO_ADDR
// end ;
60655: LD_VAR 0 2
60659: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
60660: LD_INT 0
60662: PPUSH
60663: PPUSH
60664: PPUSH
60665: PPUSH
// sibRocketRange := 25 ;
60666: LD_ADDR_VAR 0 6
60670: PUSH
60671: LD_INT 25
60673: ST_TO_ADDR
// result := false ;
60674: LD_ADDR_VAR 0 4
60678: PUSH
60679: LD_INT 0
60681: ST_TO_ADDR
// for i := 0 to 5 do
60682: LD_ADDR_VAR 0 5
60686: PUSH
60687: DOUBLE
60688: LD_INT 0
60690: DEC
60691: ST_TO_ADDR
60692: LD_INT 5
60694: PUSH
60695: FOR_TO
60696: IFFALSE 60763
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
60698: LD_VAR 0 1
60702: PPUSH
60703: LD_VAR 0 5
60707: PPUSH
60708: LD_VAR 0 6
60712: PPUSH
60713: CALL_OW 272
60717: PPUSH
60718: LD_VAR 0 2
60722: PPUSH
60723: LD_VAR 0 5
60727: PPUSH
60728: LD_VAR 0 6
60732: PPUSH
60733: CALL_OW 273
60737: PPUSH
60738: LD_VAR 0 3
60742: PPUSH
60743: CALL_OW 309
60747: IFFALSE 60761
// begin result := true ;
60749: LD_ADDR_VAR 0 4
60753: PUSH
60754: LD_INT 1
60756: ST_TO_ADDR
// exit ;
60757: POP
60758: POP
60759: GO 60765
// end ;
60761: GO 60695
60763: POP
60764: POP
// end ;
60765: LD_VAR 0 4
60769: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
60770: LD_INT 0
60772: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
60773: LD_VAR 0 1
60777: PPUSH
60778: LD_VAR 0 2
60782: PPUSH
60783: LD_INT 0
60785: PPUSH
60786: LD_INT 0
60788: PPUSH
60789: LD_INT 1
60791: PPUSH
60792: LD_INT 0
60794: PPUSH
60795: CALL_OW 587
// end ;
60799: LD_VAR 0 3
60803: RET
// export function CenterOnNow ( unit ) ; begin
60804: LD_INT 0
60806: PPUSH
// result := IsInUnit ( unit ) ;
60807: LD_ADDR_VAR 0 2
60811: PUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: CALL_OW 310
60821: ST_TO_ADDR
// if not result then
60822: LD_VAR 0 2
60826: NOT
60827: IFFALSE 60839
// result := unit ;
60829: LD_ADDR_VAR 0 2
60833: PUSH
60834: LD_VAR 0 1
60838: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
60839: LD_VAR 0 1
60843: PPUSH
60844: CALL_OW 87
// end ;
60848: LD_VAR 0 2
60852: RET
// export function ComMoveHex ( unit , hex ) ; begin
60853: LD_INT 0
60855: PPUSH
// if not hex then
60856: LD_VAR 0 2
60860: NOT
60861: IFFALSE 60865
// exit ;
60863: GO 60918
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
60865: LD_VAR 0 2
60869: PUSH
60870: LD_INT 1
60872: ARRAY
60873: PPUSH
60874: LD_VAR 0 2
60878: PUSH
60879: LD_INT 2
60881: ARRAY
60882: PPUSH
60883: CALL_OW 428
60887: IFFALSE 60891
// exit ;
60889: GO 60918
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
60891: LD_VAR 0 1
60895: PPUSH
60896: LD_VAR 0 2
60900: PUSH
60901: LD_INT 1
60903: ARRAY
60904: PPUSH
60905: LD_VAR 0 2
60909: PUSH
60910: LD_INT 2
60912: ARRAY
60913: PPUSH
60914: CALL_OW 111
// end ;
60918: LD_VAR 0 3
60922: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
60923: LD_INT 0
60925: PPUSH
60926: PPUSH
60927: PPUSH
// if not unit or not enemy then
60928: LD_VAR 0 1
60932: NOT
60933: PUSH
60934: LD_VAR 0 2
60938: NOT
60939: OR
60940: IFFALSE 60944
// exit ;
60942: GO 61068
// x := GetX ( enemy ) ;
60944: LD_ADDR_VAR 0 4
60948: PUSH
60949: LD_VAR 0 2
60953: PPUSH
60954: CALL_OW 250
60958: ST_TO_ADDR
// y := GetY ( enemy ) ;
60959: LD_ADDR_VAR 0 5
60963: PUSH
60964: LD_VAR 0 2
60968: PPUSH
60969: CALL_OW 251
60973: ST_TO_ADDR
// if ValidHex ( x , y ) then
60974: LD_VAR 0 4
60978: PPUSH
60979: LD_VAR 0 5
60983: PPUSH
60984: CALL_OW 488
60988: IFFALSE 61068
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
60990: LD_VAR 0 2
60994: PPUSH
60995: CALL_OW 247
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: IN
61010: PUSH
61011: LD_VAR 0 1
61015: PPUSH
61016: CALL_OW 255
61020: PPUSH
61021: LD_VAR 0 2
61025: PPUSH
61026: CALL_OW 292
61030: AND
61031: IFFALSE 61049
// ComAttackUnit ( unit , enemy ) else
61033: LD_VAR 0 1
61037: PPUSH
61038: LD_VAR 0 2
61042: PPUSH
61043: CALL_OW 115
61047: GO 61068
// ComAgressiveMove ( unit , x , y ) ;
61049: LD_VAR 0 1
61053: PPUSH
61054: LD_VAR 0 4
61058: PPUSH
61059: LD_VAR 0 5
61063: PPUSH
61064: CALL_OW 114
// end ; end_of_file end_of_file
61068: LD_VAR 0 3
61072: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61073: LD_VAR 0 1
61077: PPUSH
61078: LD_VAR 0 2
61082: PPUSH
61083: LD_VAR 0 3
61087: PPUSH
61088: LD_VAR 0 4
61092: PPUSH
61093: LD_VAR 0 5
61097: PPUSH
61098: LD_VAR 0 6
61102: PPUSH
61103: CALL 61287 0 6
// end ;
61107: PPOPN 6
61109: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
61110: LD_INT 0
61112: PPUSH
// begin if not units then
61113: LD_VAR 0 1
61117: NOT
61118: IFFALSE 61122
// exit ;
61120: GO 61122
// end ;
61122: PPOPN 7
61124: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
61125: CALL 61191 0 0
// end ; end_of_file
61129: PPOPN 1
61131: END
// export globalGameSaveCounter ; every 0 0$1 do
61132: GO 61134
61134: DISABLE
// begin enable ;
61135: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61136: LD_STRING updateTimer(
61138: PUSH
61139: LD_OWVAR 1
61143: STR
61144: PUSH
61145: LD_STRING );
61147: STR
61148: PPUSH
61149: CALL_OW 559
// end ;
61153: END
// every 0 0$1 do
61154: GO 61156
61156: DISABLE
// begin globalGameSaveCounter := 0 ;
61157: LD_ADDR_EXP 43
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61165: LD_STRING setGameSaveCounter(0)
61167: PPUSH
61168: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61172: LD_STRING initStreamRollete();
61174: PPUSH
61175: CALL_OW 559
// InitStreamMode ;
61179: CALL 62505 0 0
// DefineStreamItems ( false ) ;
61183: LD_INT 0
61185: PPUSH
61186: CALL 62969 0 1
// end ;
61190: END
// export function SOS_MapStart ( ) ; begin
61191: LD_INT 0
61193: PPUSH
// if streamModeActive then
61194: LD_EXP 44
61198: IFFALSE 61207
// DefineStreamItems ( true ) ;
61200: LD_INT 1
61202: PPUSH
61203: CALL 62969 0 1
// UpdateLuaVariables ( ) ;
61207: CALL 61224 0 0
// UpdateFactoryWaypoints ( ) ;
61211: CALL 75838 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61215: CALL 76095 0 0
// end ;
61219: LD_VAR 0 1
61223: RET
// function UpdateLuaVariables ( ) ; begin
61224: LD_INT 0
61226: PPUSH
// if globalGameSaveCounter then
61227: LD_EXP 43
61231: IFFALSE 61265
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61233: LD_ADDR_EXP 43
61237: PUSH
61238: LD_EXP 43
61242: PPUSH
61243: CALL 58212 0 1
61247: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61248: LD_STRING setGameSaveCounter(
61250: PUSH
61251: LD_EXP 43
61255: STR
61256: PUSH
61257: LD_STRING )
61259: STR
61260: PPUSH
61261: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61265: LD_STRING setGameDifficulty(
61267: PUSH
61268: LD_OWVAR 67
61272: STR
61273: PUSH
61274: LD_STRING )
61276: STR
61277: PPUSH
61278: CALL_OW 559
// end ;
61282: LD_VAR 0 1
61286: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61287: LD_INT 0
61289: PPUSH
// if p2 = stream_mode then
61290: LD_VAR 0 2
61294: PUSH
61295: LD_INT 100
61297: EQUAL
61298: IFFALSE 62301
// begin if not StreamModeActive then
61300: LD_EXP 44
61304: NOT
61305: IFFALSE 61315
// StreamModeActive := true ;
61307: LD_ADDR_EXP 44
61311: PUSH
61312: LD_INT 1
61314: ST_TO_ADDR
// if p3 = 0 then
61315: LD_VAR 0 3
61319: PUSH
61320: LD_INT 0
61322: EQUAL
61323: IFFALSE 61329
// InitStreamMode ;
61325: CALL 62505 0 0
// if p3 = 1 then
61329: LD_VAR 0 3
61333: PUSH
61334: LD_INT 1
61336: EQUAL
61337: IFFALSE 61347
// sRocket := true ;
61339: LD_ADDR_EXP 49
61343: PUSH
61344: LD_INT 1
61346: ST_TO_ADDR
// if p3 = 2 then
61347: LD_VAR 0 3
61351: PUSH
61352: LD_INT 2
61354: EQUAL
61355: IFFALSE 61365
// sSpeed := true ;
61357: LD_ADDR_EXP 48
61361: PUSH
61362: LD_INT 1
61364: ST_TO_ADDR
// if p3 = 3 then
61365: LD_VAR 0 3
61369: PUSH
61370: LD_INT 3
61372: EQUAL
61373: IFFALSE 61383
// sEngine := true ;
61375: LD_ADDR_EXP 50
61379: PUSH
61380: LD_INT 1
61382: ST_TO_ADDR
// if p3 = 4 then
61383: LD_VAR 0 3
61387: PUSH
61388: LD_INT 4
61390: EQUAL
61391: IFFALSE 61401
// sSpec := true ;
61393: LD_ADDR_EXP 47
61397: PUSH
61398: LD_INT 1
61400: ST_TO_ADDR
// if p3 = 5 then
61401: LD_VAR 0 3
61405: PUSH
61406: LD_INT 5
61408: EQUAL
61409: IFFALSE 61419
// sLevel := true ;
61411: LD_ADDR_EXP 51
61415: PUSH
61416: LD_INT 1
61418: ST_TO_ADDR
// if p3 = 6 then
61419: LD_VAR 0 3
61423: PUSH
61424: LD_INT 6
61426: EQUAL
61427: IFFALSE 61437
// sArmoury := true ;
61429: LD_ADDR_EXP 52
61433: PUSH
61434: LD_INT 1
61436: ST_TO_ADDR
// if p3 = 7 then
61437: LD_VAR 0 3
61441: PUSH
61442: LD_INT 7
61444: EQUAL
61445: IFFALSE 61455
// sRadar := true ;
61447: LD_ADDR_EXP 53
61451: PUSH
61452: LD_INT 1
61454: ST_TO_ADDR
// if p3 = 8 then
61455: LD_VAR 0 3
61459: PUSH
61460: LD_INT 8
61462: EQUAL
61463: IFFALSE 61473
// sBunker := true ;
61465: LD_ADDR_EXP 54
61469: PUSH
61470: LD_INT 1
61472: ST_TO_ADDR
// if p3 = 9 then
61473: LD_VAR 0 3
61477: PUSH
61478: LD_INT 9
61480: EQUAL
61481: IFFALSE 61491
// sHack := true ;
61483: LD_ADDR_EXP 55
61487: PUSH
61488: LD_INT 1
61490: ST_TO_ADDR
// if p3 = 10 then
61491: LD_VAR 0 3
61495: PUSH
61496: LD_INT 10
61498: EQUAL
61499: IFFALSE 61509
// sFire := true ;
61501: LD_ADDR_EXP 56
61505: PUSH
61506: LD_INT 1
61508: ST_TO_ADDR
// if p3 = 11 then
61509: LD_VAR 0 3
61513: PUSH
61514: LD_INT 11
61516: EQUAL
61517: IFFALSE 61527
// sRefresh := true ;
61519: LD_ADDR_EXP 57
61523: PUSH
61524: LD_INT 1
61526: ST_TO_ADDR
// if p3 = 12 then
61527: LD_VAR 0 3
61531: PUSH
61532: LD_INT 12
61534: EQUAL
61535: IFFALSE 61545
// sExp := true ;
61537: LD_ADDR_EXP 58
61541: PUSH
61542: LD_INT 1
61544: ST_TO_ADDR
// if p3 = 13 then
61545: LD_VAR 0 3
61549: PUSH
61550: LD_INT 13
61552: EQUAL
61553: IFFALSE 61563
// sDepot := true ;
61555: LD_ADDR_EXP 59
61559: PUSH
61560: LD_INT 1
61562: ST_TO_ADDR
// if p3 = 14 then
61563: LD_VAR 0 3
61567: PUSH
61568: LD_INT 14
61570: EQUAL
61571: IFFALSE 61581
// sFlag := true ;
61573: LD_ADDR_EXP 60
61577: PUSH
61578: LD_INT 1
61580: ST_TO_ADDR
// if p3 = 15 then
61581: LD_VAR 0 3
61585: PUSH
61586: LD_INT 15
61588: EQUAL
61589: IFFALSE 61599
// sKamikadze := true ;
61591: LD_ADDR_EXP 68
61595: PUSH
61596: LD_INT 1
61598: ST_TO_ADDR
// if p3 = 16 then
61599: LD_VAR 0 3
61603: PUSH
61604: LD_INT 16
61606: EQUAL
61607: IFFALSE 61617
// sTroll := true ;
61609: LD_ADDR_EXP 69
61613: PUSH
61614: LD_INT 1
61616: ST_TO_ADDR
// if p3 = 17 then
61617: LD_VAR 0 3
61621: PUSH
61622: LD_INT 17
61624: EQUAL
61625: IFFALSE 61635
// sSlow := true ;
61627: LD_ADDR_EXP 70
61631: PUSH
61632: LD_INT 1
61634: ST_TO_ADDR
// if p3 = 18 then
61635: LD_VAR 0 3
61639: PUSH
61640: LD_INT 18
61642: EQUAL
61643: IFFALSE 61653
// sLack := true ;
61645: LD_ADDR_EXP 71
61649: PUSH
61650: LD_INT 1
61652: ST_TO_ADDR
// if p3 = 19 then
61653: LD_VAR 0 3
61657: PUSH
61658: LD_INT 19
61660: EQUAL
61661: IFFALSE 61671
// sTank := true ;
61663: LD_ADDR_EXP 73
61667: PUSH
61668: LD_INT 1
61670: ST_TO_ADDR
// if p3 = 20 then
61671: LD_VAR 0 3
61675: PUSH
61676: LD_INT 20
61678: EQUAL
61679: IFFALSE 61689
// sRemote := true ;
61681: LD_ADDR_EXP 74
61685: PUSH
61686: LD_INT 1
61688: ST_TO_ADDR
// if p3 = 21 then
61689: LD_VAR 0 3
61693: PUSH
61694: LD_INT 21
61696: EQUAL
61697: IFFALSE 61707
// sPowell := true ;
61699: LD_ADDR_EXP 75
61703: PUSH
61704: LD_INT 1
61706: ST_TO_ADDR
// if p3 = 22 then
61707: LD_VAR 0 3
61711: PUSH
61712: LD_INT 22
61714: EQUAL
61715: IFFALSE 61725
// sTeleport := true ;
61717: LD_ADDR_EXP 78
61721: PUSH
61722: LD_INT 1
61724: ST_TO_ADDR
// if p3 = 23 then
61725: LD_VAR 0 3
61729: PUSH
61730: LD_INT 23
61732: EQUAL
61733: IFFALSE 61743
// sOilTower := true ;
61735: LD_ADDR_EXP 80
61739: PUSH
61740: LD_INT 1
61742: ST_TO_ADDR
// if p3 = 24 then
61743: LD_VAR 0 3
61747: PUSH
61748: LD_INT 24
61750: EQUAL
61751: IFFALSE 61761
// sShovel := true ;
61753: LD_ADDR_EXP 81
61757: PUSH
61758: LD_INT 1
61760: ST_TO_ADDR
// if p3 = 25 then
61761: LD_VAR 0 3
61765: PUSH
61766: LD_INT 25
61768: EQUAL
61769: IFFALSE 61779
// sSheik := true ;
61771: LD_ADDR_EXP 82
61775: PUSH
61776: LD_INT 1
61778: ST_TO_ADDR
// if p3 = 26 then
61779: LD_VAR 0 3
61783: PUSH
61784: LD_INT 26
61786: EQUAL
61787: IFFALSE 61797
// sEarthquake := true ;
61789: LD_ADDR_EXP 84
61793: PUSH
61794: LD_INT 1
61796: ST_TO_ADDR
// if p3 = 27 then
61797: LD_VAR 0 3
61801: PUSH
61802: LD_INT 27
61804: EQUAL
61805: IFFALSE 61815
// sAI := true ;
61807: LD_ADDR_EXP 85
61811: PUSH
61812: LD_INT 1
61814: ST_TO_ADDR
// if p3 = 28 then
61815: LD_VAR 0 3
61819: PUSH
61820: LD_INT 28
61822: EQUAL
61823: IFFALSE 61833
// sCargo := true ;
61825: LD_ADDR_EXP 88
61829: PUSH
61830: LD_INT 1
61832: ST_TO_ADDR
// if p3 = 29 then
61833: LD_VAR 0 3
61837: PUSH
61838: LD_INT 29
61840: EQUAL
61841: IFFALSE 61851
// sDLaser := true ;
61843: LD_ADDR_EXP 89
61847: PUSH
61848: LD_INT 1
61850: ST_TO_ADDR
// if p3 = 30 then
61851: LD_VAR 0 3
61855: PUSH
61856: LD_INT 30
61858: EQUAL
61859: IFFALSE 61869
// sExchange := true ;
61861: LD_ADDR_EXP 90
61865: PUSH
61866: LD_INT 1
61868: ST_TO_ADDR
// if p3 = 31 then
61869: LD_VAR 0 3
61873: PUSH
61874: LD_INT 31
61876: EQUAL
61877: IFFALSE 61887
// sFac := true ;
61879: LD_ADDR_EXP 91
61883: PUSH
61884: LD_INT 1
61886: ST_TO_ADDR
// if p3 = 32 then
61887: LD_VAR 0 3
61891: PUSH
61892: LD_INT 32
61894: EQUAL
61895: IFFALSE 61905
// sPower := true ;
61897: LD_ADDR_EXP 92
61901: PUSH
61902: LD_INT 1
61904: ST_TO_ADDR
// if p3 = 33 then
61905: LD_VAR 0 3
61909: PUSH
61910: LD_INT 33
61912: EQUAL
61913: IFFALSE 61923
// sRandom := true ;
61915: LD_ADDR_EXP 93
61919: PUSH
61920: LD_INT 1
61922: ST_TO_ADDR
// if p3 = 34 then
61923: LD_VAR 0 3
61927: PUSH
61928: LD_INT 34
61930: EQUAL
61931: IFFALSE 61941
// sShield := true ;
61933: LD_ADDR_EXP 94
61937: PUSH
61938: LD_INT 1
61940: ST_TO_ADDR
// if p3 = 35 then
61941: LD_VAR 0 3
61945: PUSH
61946: LD_INT 35
61948: EQUAL
61949: IFFALSE 61959
// sTime := true ;
61951: LD_ADDR_EXP 95
61955: PUSH
61956: LD_INT 1
61958: ST_TO_ADDR
// if p3 = 36 then
61959: LD_VAR 0 3
61963: PUSH
61964: LD_INT 36
61966: EQUAL
61967: IFFALSE 61977
// sTools := true ;
61969: LD_ADDR_EXP 96
61973: PUSH
61974: LD_INT 1
61976: ST_TO_ADDR
// if p3 = 101 then
61977: LD_VAR 0 3
61981: PUSH
61982: LD_INT 101
61984: EQUAL
61985: IFFALSE 61995
// sSold := true ;
61987: LD_ADDR_EXP 61
61991: PUSH
61992: LD_INT 1
61994: ST_TO_ADDR
// if p3 = 102 then
61995: LD_VAR 0 3
61999: PUSH
62000: LD_INT 102
62002: EQUAL
62003: IFFALSE 62013
// sDiff := true ;
62005: LD_ADDR_EXP 62
62009: PUSH
62010: LD_INT 1
62012: ST_TO_ADDR
// if p3 = 103 then
62013: LD_VAR 0 3
62017: PUSH
62018: LD_INT 103
62020: EQUAL
62021: IFFALSE 62031
// sFog := true ;
62023: LD_ADDR_EXP 65
62027: PUSH
62028: LD_INT 1
62030: ST_TO_ADDR
// if p3 = 104 then
62031: LD_VAR 0 3
62035: PUSH
62036: LD_INT 104
62038: EQUAL
62039: IFFALSE 62049
// sReset := true ;
62041: LD_ADDR_EXP 66
62045: PUSH
62046: LD_INT 1
62048: ST_TO_ADDR
// if p3 = 105 then
62049: LD_VAR 0 3
62053: PUSH
62054: LD_INT 105
62056: EQUAL
62057: IFFALSE 62067
// sSun := true ;
62059: LD_ADDR_EXP 67
62063: PUSH
62064: LD_INT 1
62066: ST_TO_ADDR
// if p3 = 106 then
62067: LD_VAR 0 3
62071: PUSH
62072: LD_INT 106
62074: EQUAL
62075: IFFALSE 62085
// sTiger := true ;
62077: LD_ADDR_EXP 63
62081: PUSH
62082: LD_INT 1
62084: ST_TO_ADDR
// if p3 = 107 then
62085: LD_VAR 0 3
62089: PUSH
62090: LD_INT 107
62092: EQUAL
62093: IFFALSE 62103
// sBomb := true ;
62095: LD_ADDR_EXP 64
62099: PUSH
62100: LD_INT 1
62102: ST_TO_ADDR
// if p3 = 108 then
62103: LD_VAR 0 3
62107: PUSH
62108: LD_INT 108
62110: EQUAL
62111: IFFALSE 62121
// sWound := true ;
62113: LD_ADDR_EXP 72
62117: PUSH
62118: LD_INT 1
62120: ST_TO_ADDR
// if p3 = 109 then
62121: LD_VAR 0 3
62125: PUSH
62126: LD_INT 109
62128: EQUAL
62129: IFFALSE 62139
// sBetray := true ;
62131: LD_ADDR_EXP 76
62135: PUSH
62136: LD_INT 1
62138: ST_TO_ADDR
// if p3 = 110 then
62139: LD_VAR 0 3
62143: PUSH
62144: LD_INT 110
62146: EQUAL
62147: IFFALSE 62157
// sContamin := true ;
62149: LD_ADDR_EXP 77
62153: PUSH
62154: LD_INT 1
62156: ST_TO_ADDR
// if p3 = 111 then
62157: LD_VAR 0 3
62161: PUSH
62162: LD_INT 111
62164: EQUAL
62165: IFFALSE 62175
// sOil := true ;
62167: LD_ADDR_EXP 79
62171: PUSH
62172: LD_INT 1
62174: ST_TO_ADDR
// if p3 = 112 then
62175: LD_VAR 0 3
62179: PUSH
62180: LD_INT 112
62182: EQUAL
62183: IFFALSE 62193
// sStu := true ;
62185: LD_ADDR_EXP 83
62189: PUSH
62190: LD_INT 1
62192: ST_TO_ADDR
// if p3 = 113 then
62193: LD_VAR 0 3
62197: PUSH
62198: LD_INT 113
62200: EQUAL
62201: IFFALSE 62211
// sBazooka := true ;
62203: LD_ADDR_EXP 86
62207: PUSH
62208: LD_INT 1
62210: ST_TO_ADDR
// if p3 = 114 then
62211: LD_VAR 0 3
62215: PUSH
62216: LD_INT 114
62218: EQUAL
62219: IFFALSE 62229
// sMortar := true ;
62221: LD_ADDR_EXP 87
62225: PUSH
62226: LD_INT 1
62228: ST_TO_ADDR
// if p3 = 115 then
62229: LD_VAR 0 3
62233: PUSH
62234: LD_INT 115
62236: EQUAL
62237: IFFALSE 62247
// sRanger := true ;
62239: LD_ADDR_EXP 97
62243: PUSH
62244: LD_INT 1
62246: ST_TO_ADDR
// if p3 = 116 then
62247: LD_VAR 0 3
62251: PUSH
62252: LD_INT 116
62254: EQUAL
62255: IFFALSE 62265
// sComputer := true ;
62257: LD_ADDR_EXP 98
62261: PUSH
62262: LD_INT 1
62264: ST_TO_ADDR
// if p3 = 117 then
62265: LD_VAR 0 3
62269: PUSH
62270: LD_INT 117
62272: EQUAL
62273: IFFALSE 62283
// s30 := true ;
62275: LD_ADDR_EXP 99
62279: PUSH
62280: LD_INT 1
62282: ST_TO_ADDR
// if p3 = 118 then
62283: LD_VAR 0 3
62287: PUSH
62288: LD_INT 118
62290: EQUAL
62291: IFFALSE 62301
// s60 := true ;
62293: LD_ADDR_EXP 100
62297: PUSH
62298: LD_INT 1
62300: ST_TO_ADDR
// end ; if p2 = hack_mode then
62301: LD_VAR 0 2
62305: PUSH
62306: LD_INT 101
62308: EQUAL
62309: IFFALSE 62437
// begin case p3 of 1 :
62311: LD_VAR 0 3
62315: PUSH
62316: LD_INT 1
62318: DOUBLE
62319: EQUAL
62320: IFTRUE 62324
62322: GO 62331
62324: POP
// hHackUnlimitedResources ; 2 :
62325: CALL 74584 0 0
62329: GO 62437
62331: LD_INT 2
62333: DOUBLE
62334: EQUAL
62335: IFTRUE 62339
62337: GO 62346
62339: POP
// hHackSetLevel10 ; 3 :
62340: CALL 74717 0 0
62344: GO 62437
62346: LD_INT 3
62348: DOUBLE
62349: EQUAL
62350: IFTRUE 62354
62352: GO 62361
62354: POP
// hHackSetLevel10YourUnits ; 4 :
62355: CALL 74802 0 0
62359: GO 62437
62361: LD_INT 4
62363: DOUBLE
62364: EQUAL
62365: IFTRUE 62369
62367: GO 62376
62369: POP
// hHackInvincible ; 5 :
62370: CALL 75250 0 0
62374: GO 62437
62376: LD_INT 5
62378: DOUBLE
62379: EQUAL
62380: IFTRUE 62384
62382: GO 62391
62384: POP
// hHackInvisible ; 6 :
62385: CALL 75361 0 0
62389: GO 62437
62391: LD_INT 6
62393: DOUBLE
62394: EQUAL
62395: IFTRUE 62399
62397: GO 62406
62399: POP
// hHackChangeYourSide ; 7 :
62400: CALL 75418 0 0
62404: GO 62437
62406: LD_INT 7
62408: DOUBLE
62409: EQUAL
62410: IFTRUE 62414
62412: GO 62421
62414: POP
// hHackChangeUnitSide ; 8 :
62415: CALL 75460 0 0
62419: GO 62437
62421: LD_INT 8
62423: DOUBLE
62424: EQUAL
62425: IFTRUE 62429
62427: GO 62436
62429: POP
// hHackFog ; end ;
62430: CALL 75561 0 0
62434: GO 62437
62436: POP
// end ; if p2 = game_save_mode then
62437: LD_VAR 0 2
62441: PUSH
62442: LD_INT 102
62444: EQUAL
62445: IFFALSE 62500
// begin if p3 = 1 then
62447: LD_VAR 0 3
62451: PUSH
62452: LD_INT 1
62454: EQUAL
62455: IFFALSE 62467
// globalGameSaveCounter := p4 ;
62457: LD_ADDR_EXP 43
62461: PUSH
62462: LD_VAR 0 4
62466: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62467: LD_VAR 0 3
62471: PUSH
62472: LD_INT 2
62474: EQUAL
62475: PUSH
62476: LD_EXP 43
62480: AND
62481: IFFALSE 62500
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62483: LD_STRING setGameSaveCounter(
62485: PUSH
62486: LD_EXP 43
62490: STR
62491: PUSH
62492: LD_STRING )
62494: STR
62495: PPUSH
62496: CALL_OW 559
// end ; end ;
62500: LD_VAR 0 7
62504: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62505: LD_INT 0
62507: PPUSH
// streamModeActive := false ;
62508: LD_ADDR_EXP 44
62512: PUSH
62513: LD_INT 0
62515: ST_TO_ADDR
// normalCounter := 36 ;
62516: LD_ADDR_EXP 45
62520: PUSH
62521: LD_INT 36
62523: ST_TO_ADDR
// hardcoreCounter := 18 ;
62524: LD_ADDR_EXP 46
62528: PUSH
62529: LD_INT 18
62531: ST_TO_ADDR
// sRocket := false ;
62532: LD_ADDR_EXP 49
62536: PUSH
62537: LD_INT 0
62539: ST_TO_ADDR
// sSpeed := false ;
62540: LD_ADDR_EXP 48
62544: PUSH
62545: LD_INT 0
62547: ST_TO_ADDR
// sEngine := false ;
62548: LD_ADDR_EXP 50
62552: PUSH
62553: LD_INT 0
62555: ST_TO_ADDR
// sSpec := false ;
62556: LD_ADDR_EXP 47
62560: PUSH
62561: LD_INT 0
62563: ST_TO_ADDR
// sLevel := false ;
62564: LD_ADDR_EXP 51
62568: PUSH
62569: LD_INT 0
62571: ST_TO_ADDR
// sArmoury := false ;
62572: LD_ADDR_EXP 52
62576: PUSH
62577: LD_INT 0
62579: ST_TO_ADDR
// sRadar := false ;
62580: LD_ADDR_EXP 53
62584: PUSH
62585: LD_INT 0
62587: ST_TO_ADDR
// sBunker := false ;
62588: LD_ADDR_EXP 54
62592: PUSH
62593: LD_INT 0
62595: ST_TO_ADDR
// sHack := false ;
62596: LD_ADDR_EXP 55
62600: PUSH
62601: LD_INT 0
62603: ST_TO_ADDR
// sFire := false ;
62604: LD_ADDR_EXP 56
62608: PUSH
62609: LD_INT 0
62611: ST_TO_ADDR
// sRefresh := false ;
62612: LD_ADDR_EXP 57
62616: PUSH
62617: LD_INT 0
62619: ST_TO_ADDR
// sExp := false ;
62620: LD_ADDR_EXP 58
62624: PUSH
62625: LD_INT 0
62627: ST_TO_ADDR
// sDepot := false ;
62628: LD_ADDR_EXP 59
62632: PUSH
62633: LD_INT 0
62635: ST_TO_ADDR
// sFlag := false ;
62636: LD_ADDR_EXP 60
62640: PUSH
62641: LD_INT 0
62643: ST_TO_ADDR
// sKamikadze := false ;
62644: LD_ADDR_EXP 68
62648: PUSH
62649: LD_INT 0
62651: ST_TO_ADDR
// sTroll := false ;
62652: LD_ADDR_EXP 69
62656: PUSH
62657: LD_INT 0
62659: ST_TO_ADDR
// sSlow := false ;
62660: LD_ADDR_EXP 70
62664: PUSH
62665: LD_INT 0
62667: ST_TO_ADDR
// sLack := false ;
62668: LD_ADDR_EXP 71
62672: PUSH
62673: LD_INT 0
62675: ST_TO_ADDR
// sTank := false ;
62676: LD_ADDR_EXP 73
62680: PUSH
62681: LD_INT 0
62683: ST_TO_ADDR
// sRemote := false ;
62684: LD_ADDR_EXP 74
62688: PUSH
62689: LD_INT 0
62691: ST_TO_ADDR
// sPowell := false ;
62692: LD_ADDR_EXP 75
62696: PUSH
62697: LD_INT 0
62699: ST_TO_ADDR
// sTeleport := false ;
62700: LD_ADDR_EXP 78
62704: PUSH
62705: LD_INT 0
62707: ST_TO_ADDR
// sOilTower := false ;
62708: LD_ADDR_EXP 80
62712: PUSH
62713: LD_INT 0
62715: ST_TO_ADDR
// sShovel := false ;
62716: LD_ADDR_EXP 81
62720: PUSH
62721: LD_INT 0
62723: ST_TO_ADDR
// sSheik := false ;
62724: LD_ADDR_EXP 82
62728: PUSH
62729: LD_INT 0
62731: ST_TO_ADDR
// sEarthquake := false ;
62732: LD_ADDR_EXP 84
62736: PUSH
62737: LD_INT 0
62739: ST_TO_ADDR
// sAI := false ;
62740: LD_ADDR_EXP 85
62744: PUSH
62745: LD_INT 0
62747: ST_TO_ADDR
// sCargo := false ;
62748: LD_ADDR_EXP 88
62752: PUSH
62753: LD_INT 0
62755: ST_TO_ADDR
// sDLaser := false ;
62756: LD_ADDR_EXP 89
62760: PUSH
62761: LD_INT 0
62763: ST_TO_ADDR
// sExchange := false ;
62764: LD_ADDR_EXP 90
62768: PUSH
62769: LD_INT 0
62771: ST_TO_ADDR
// sFac := false ;
62772: LD_ADDR_EXP 91
62776: PUSH
62777: LD_INT 0
62779: ST_TO_ADDR
// sPower := false ;
62780: LD_ADDR_EXP 92
62784: PUSH
62785: LD_INT 0
62787: ST_TO_ADDR
// sRandom := false ;
62788: LD_ADDR_EXP 93
62792: PUSH
62793: LD_INT 0
62795: ST_TO_ADDR
// sShield := false ;
62796: LD_ADDR_EXP 94
62800: PUSH
62801: LD_INT 0
62803: ST_TO_ADDR
// sTime := false ;
62804: LD_ADDR_EXP 95
62808: PUSH
62809: LD_INT 0
62811: ST_TO_ADDR
// sTools := false ;
62812: LD_ADDR_EXP 96
62816: PUSH
62817: LD_INT 0
62819: ST_TO_ADDR
// sSold := false ;
62820: LD_ADDR_EXP 61
62824: PUSH
62825: LD_INT 0
62827: ST_TO_ADDR
// sDiff := false ;
62828: LD_ADDR_EXP 62
62832: PUSH
62833: LD_INT 0
62835: ST_TO_ADDR
// sFog := false ;
62836: LD_ADDR_EXP 65
62840: PUSH
62841: LD_INT 0
62843: ST_TO_ADDR
// sReset := false ;
62844: LD_ADDR_EXP 66
62848: PUSH
62849: LD_INT 0
62851: ST_TO_ADDR
// sSun := false ;
62852: LD_ADDR_EXP 67
62856: PUSH
62857: LD_INT 0
62859: ST_TO_ADDR
// sTiger := false ;
62860: LD_ADDR_EXP 63
62864: PUSH
62865: LD_INT 0
62867: ST_TO_ADDR
// sBomb := false ;
62868: LD_ADDR_EXP 64
62872: PUSH
62873: LD_INT 0
62875: ST_TO_ADDR
// sWound := false ;
62876: LD_ADDR_EXP 72
62880: PUSH
62881: LD_INT 0
62883: ST_TO_ADDR
// sBetray := false ;
62884: LD_ADDR_EXP 76
62888: PUSH
62889: LD_INT 0
62891: ST_TO_ADDR
// sContamin := false ;
62892: LD_ADDR_EXP 77
62896: PUSH
62897: LD_INT 0
62899: ST_TO_ADDR
// sOil := false ;
62900: LD_ADDR_EXP 79
62904: PUSH
62905: LD_INT 0
62907: ST_TO_ADDR
// sStu := false ;
62908: LD_ADDR_EXP 83
62912: PUSH
62913: LD_INT 0
62915: ST_TO_ADDR
// sBazooka := false ;
62916: LD_ADDR_EXP 86
62920: PUSH
62921: LD_INT 0
62923: ST_TO_ADDR
// sMortar := false ;
62924: LD_ADDR_EXP 87
62928: PUSH
62929: LD_INT 0
62931: ST_TO_ADDR
// sRanger := false ;
62932: LD_ADDR_EXP 97
62936: PUSH
62937: LD_INT 0
62939: ST_TO_ADDR
// sComputer := false ;
62940: LD_ADDR_EXP 98
62944: PUSH
62945: LD_INT 0
62947: ST_TO_ADDR
// s30 := false ;
62948: LD_ADDR_EXP 99
62952: PUSH
62953: LD_INT 0
62955: ST_TO_ADDR
// s60 := false ;
62956: LD_ADDR_EXP 100
62960: PUSH
62961: LD_INT 0
62963: ST_TO_ADDR
// end ;
62964: LD_VAR 0 1
62968: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62969: LD_INT 0
62971: PPUSH
62972: PPUSH
62973: PPUSH
62974: PPUSH
62975: PPUSH
62976: PPUSH
62977: PPUSH
// result := [ ] ;
62978: LD_ADDR_VAR 0 2
62982: PUSH
62983: EMPTY
62984: ST_TO_ADDR
// if campaign_id = 1 then
62985: LD_OWVAR 69
62989: PUSH
62990: LD_INT 1
62992: EQUAL
62993: IFFALSE 66159
// begin case mission_number of 1 :
62995: LD_OWVAR 70
62999: PUSH
63000: LD_INT 1
63002: DOUBLE
63003: EQUAL
63004: IFTRUE 63008
63006: GO 63084
63008: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63009: LD_ADDR_VAR 0 2
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: LD_INT 4
63019: PUSH
63020: LD_INT 11
63022: PUSH
63023: LD_INT 12
63025: PUSH
63026: LD_INT 15
63028: PUSH
63029: LD_INT 16
63031: PUSH
63032: LD_INT 22
63034: PUSH
63035: LD_INT 23
63037: PUSH
63038: LD_INT 26
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 101
63054: PUSH
63055: LD_INT 102
63057: PUSH
63058: LD_INT 106
63060: PUSH
63061: LD_INT 116
63063: PUSH
63064: LD_INT 117
63066: PUSH
63067: LD_INT 118
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: ST_TO_ADDR
63082: GO 66157
63084: LD_INT 2
63086: DOUBLE
63087: EQUAL
63088: IFTRUE 63092
63090: GO 63176
63092: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63093: LD_ADDR_VAR 0 2
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: LD_INT 4
63103: PUSH
63104: LD_INT 11
63106: PUSH
63107: LD_INT 12
63109: PUSH
63110: LD_INT 15
63112: PUSH
63113: LD_INT 16
63115: PUSH
63116: LD_INT 22
63118: PUSH
63119: LD_INT 23
63121: PUSH
63122: LD_INT 26
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 101
63138: PUSH
63139: LD_INT 102
63141: PUSH
63142: LD_INT 105
63144: PUSH
63145: LD_INT 106
63147: PUSH
63148: LD_INT 108
63150: PUSH
63151: LD_INT 116
63153: PUSH
63154: LD_INT 117
63156: PUSH
63157: LD_INT 118
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: ST_TO_ADDR
63174: GO 66157
63176: LD_INT 3
63178: DOUBLE
63179: EQUAL
63180: IFTRUE 63184
63182: GO 63272
63184: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63185: LD_ADDR_VAR 0 2
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: LD_INT 4
63195: PUSH
63196: LD_INT 5
63198: PUSH
63199: LD_INT 11
63201: PUSH
63202: LD_INT 12
63204: PUSH
63205: LD_INT 15
63207: PUSH
63208: LD_INT 16
63210: PUSH
63211: LD_INT 22
63213: PUSH
63214: LD_INT 26
63216: PUSH
63217: LD_INT 36
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 101
63234: PUSH
63235: LD_INT 102
63237: PUSH
63238: LD_INT 105
63240: PUSH
63241: LD_INT 106
63243: PUSH
63244: LD_INT 108
63246: PUSH
63247: LD_INT 116
63249: PUSH
63250: LD_INT 117
63252: PUSH
63253: LD_INT 118
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: ST_TO_ADDR
63270: GO 66157
63272: LD_INT 4
63274: DOUBLE
63275: EQUAL
63276: IFTRUE 63280
63278: GO 63376
63280: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63281: LD_ADDR_VAR 0 2
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 4
63291: PUSH
63292: LD_INT 5
63294: PUSH
63295: LD_INT 8
63297: PUSH
63298: LD_INT 11
63300: PUSH
63301: LD_INT 12
63303: PUSH
63304: LD_INT 15
63306: PUSH
63307: LD_INT 16
63309: PUSH
63310: LD_INT 22
63312: PUSH
63313: LD_INT 23
63315: PUSH
63316: LD_INT 26
63318: PUSH
63319: LD_INT 36
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 101
63338: PUSH
63339: LD_INT 102
63341: PUSH
63342: LD_INT 105
63344: PUSH
63345: LD_INT 106
63347: PUSH
63348: LD_INT 108
63350: PUSH
63351: LD_INT 116
63353: PUSH
63354: LD_INT 117
63356: PUSH
63357: LD_INT 118
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: ST_TO_ADDR
63374: GO 66157
63376: LD_INT 5
63378: DOUBLE
63379: EQUAL
63380: IFTRUE 63384
63382: GO 63496
63384: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63385: LD_ADDR_VAR 0 2
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 4
63395: PUSH
63396: LD_INT 5
63398: PUSH
63399: LD_INT 6
63401: PUSH
63402: LD_INT 8
63404: PUSH
63405: LD_INT 11
63407: PUSH
63408: LD_INT 12
63410: PUSH
63411: LD_INT 15
63413: PUSH
63414: LD_INT 16
63416: PUSH
63417: LD_INT 22
63419: PUSH
63420: LD_INT 23
63422: PUSH
63423: LD_INT 25
63425: PUSH
63426: LD_INT 26
63428: PUSH
63429: LD_INT 36
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 101
63450: PUSH
63451: LD_INT 102
63453: PUSH
63454: LD_INT 105
63456: PUSH
63457: LD_INT 106
63459: PUSH
63460: LD_INT 108
63462: PUSH
63463: LD_INT 109
63465: PUSH
63466: LD_INT 112
63468: PUSH
63469: LD_INT 116
63471: PUSH
63472: LD_INT 117
63474: PUSH
63475: LD_INT 118
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: ST_TO_ADDR
63494: GO 66157
63496: LD_INT 6
63498: DOUBLE
63499: EQUAL
63500: IFTRUE 63504
63502: GO 63636
63504: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63505: LD_ADDR_VAR 0 2
63509: PUSH
63510: LD_INT 2
63512: PUSH
63513: LD_INT 4
63515: PUSH
63516: LD_INT 5
63518: PUSH
63519: LD_INT 6
63521: PUSH
63522: LD_INT 8
63524: PUSH
63525: LD_INT 11
63527: PUSH
63528: LD_INT 12
63530: PUSH
63531: LD_INT 15
63533: PUSH
63534: LD_INT 16
63536: PUSH
63537: LD_INT 20
63539: PUSH
63540: LD_INT 21
63542: PUSH
63543: LD_INT 22
63545: PUSH
63546: LD_INT 23
63548: PUSH
63549: LD_INT 25
63551: PUSH
63552: LD_INT 26
63554: PUSH
63555: LD_INT 30
63557: PUSH
63558: LD_INT 31
63560: PUSH
63561: LD_INT 32
63563: PUSH
63564: LD_INT 36
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 101
63590: PUSH
63591: LD_INT 102
63593: PUSH
63594: LD_INT 105
63596: PUSH
63597: LD_INT 106
63599: PUSH
63600: LD_INT 108
63602: PUSH
63603: LD_INT 109
63605: PUSH
63606: LD_INT 112
63608: PUSH
63609: LD_INT 116
63611: PUSH
63612: LD_INT 117
63614: PUSH
63615: LD_INT 118
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: ST_TO_ADDR
63634: GO 66157
63636: LD_INT 7
63638: DOUBLE
63639: EQUAL
63640: IFTRUE 63644
63642: GO 63756
63644: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63645: LD_ADDR_VAR 0 2
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: LD_INT 4
63655: PUSH
63656: LD_INT 5
63658: PUSH
63659: LD_INT 7
63661: PUSH
63662: LD_INT 11
63664: PUSH
63665: LD_INT 12
63667: PUSH
63668: LD_INT 15
63670: PUSH
63671: LD_INT 16
63673: PUSH
63674: LD_INT 20
63676: PUSH
63677: LD_INT 21
63679: PUSH
63680: LD_INT 22
63682: PUSH
63683: LD_INT 23
63685: PUSH
63686: LD_INT 25
63688: PUSH
63689: LD_INT 26
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 101
63710: PUSH
63711: LD_INT 102
63713: PUSH
63714: LD_INT 103
63716: PUSH
63717: LD_INT 105
63719: PUSH
63720: LD_INT 106
63722: PUSH
63723: LD_INT 108
63725: PUSH
63726: LD_INT 112
63728: PUSH
63729: LD_INT 116
63731: PUSH
63732: LD_INT 117
63734: PUSH
63735: LD_INT 118
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: ST_TO_ADDR
63754: GO 66157
63756: LD_INT 8
63758: DOUBLE
63759: EQUAL
63760: IFTRUE 63764
63762: GO 63904
63764: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63765: LD_ADDR_VAR 0 2
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: LD_INT 4
63775: PUSH
63776: LD_INT 5
63778: PUSH
63779: LD_INT 6
63781: PUSH
63782: LD_INT 7
63784: PUSH
63785: LD_INT 8
63787: PUSH
63788: LD_INT 11
63790: PUSH
63791: LD_INT 12
63793: PUSH
63794: LD_INT 15
63796: PUSH
63797: LD_INT 16
63799: PUSH
63800: LD_INT 20
63802: PUSH
63803: LD_INT 21
63805: PUSH
63806: LD_INT 22
63808: PUSH
63809: LD_INT 23
63811: PUSH
63812: LD_INT 25
63814: PUSH
63815: LD_INT 26
63817: PUSH
63818: LD_INT 30
63820: PUSH
63821: LD_INT 31
63823: PUSH
63824: LD_INT 32
63826: PUSH
63827: LD_INT 36
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 101
63854: PUSH
63855: LD_INT 102
63857: PUSH
63858: LD_INT 103
63860: PUSH
63861: LD_INT 105
63863: PUSH
63864: LD_INT 106
63866: PUSH
63867: LD_INT 108
63869: PUSH
63870: LD_INT 109
63872: PUSH
63873: LD_INT 112
63875: PUSH
63876: LD_INT 116
63878: PUSH
63879: LD_INT 117
63881: PUSH
63882: LD_INT 118
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: ST_TO_ADDR
63902: GO 66157
63904: LD_INT 9
63906: DOUBLE
63907: EQUAL
63908: IFTRUE 63912
63910: GO 64060
63912: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63913: LD_ADDR_VAR 0 2
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: LD_INT 4
63923: PUSH
63924: LD_INT 5
63926: PUSH
63927: LD_INT 6
63929: PUSH
63930: LD_INT 7
63932: PUSH
63933: LD_INT 8
63935: PUSH
63936: LD_INT 11
63938: PUSH
63939: LD_INT 12
63941: PUSH
63942: LD_INT 15
63944: PUSH
63945: LD_INT 16
63947: PUSH
63948: LD_INT 20
63950: PUSH
63951: LD_INT 21
63953: PUSH
63954: LD_INT 22
63956: PUSH
63957: LD_INT 23
63959: PUSH
63960: LD_INT 25
63962: PUSH
63963: LD_INT 26
63965: PUSH
63966: LD_INT 28
63968: PUSH
63969: LD_INT 30
63971: PUSH
63972: LD_INT 31
63974: PUSH
63975: LD_INT 32
63977: PUSH
63978: LD_INT 36
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 101
64006: PUSH
64007: LD_INT 102
64009: PUSH
64010: LD_INT 103
64012: PUSH
64013: LD_INT 105
64015: PUSH
64016: LD_INT 106
64018: PUSH
64019: LD_INT 108
64021: PUSH
64022: LD_INT 109
64024: PUSH
64025: LD_INT 112
64027: PUSH
64028: LD_INT 114
64030: PUSH
64031: LD_INT 116
64033: PUSH
64034: LD_INT 117
64036: PUSH
64037: LD_INT 118
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: ST_TO_ADDR
64058: GO 66157
64060: LD_INT 10
64062: DOUBLE
64063: EQUAL
64064: IFTRUE 64068
64066: GO 64264
64068: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64069: LD_ADDR_VAR 0 2
64073: PUSH
64074: LD_INT 2
64076: PUSH
64077: LD_INT 4
64079: PUSH
64080: LD_INT 5
64082: PUSH
64083: LD_INT 6
64085: PUSH
64086: LD_INT 7
64088: PUSH
64089: LD_INT 8
64091: PUSH
64092: LD_INT 9
64094: PUSH
64095: LD_INT 10
64097: PUSH
64098: LD_INT 11
64100: PUSH
64101: LD_INT 12
64103: PUSH
64104: LD_INT 13
64106: PUSH
64107: LD_INT 14
64109: PUSH
64110: LD_INT 15
64112: PUSH
64113: LD_INT 16
64115: PUSH
64116: LD_INT 17
64118: PUSH
64119: LD_INT 18
64121: PUSH
64122: LD_INT 19
64124: PUSH
64125: LD_INT 20
64127: PUSH
64128: LD_INT 21
64130: PUSH
64131: LD_INT 22
64133: PUSH
64134: LD_INT 23
64136: PUSH
64137: LD_INT 24
64139: PUSH
64140: LD_INT 25
64142: PUSH
64143: LD_INT 26
64145: PUSH
64146: LD_INT 28
64148: PUSH
64149: LD_INT 30
64151: PUSH
64152: LD_INT 31
64154: PUSH
64155: LD_INT 32
64157: PUSH
64158: LD_INT 36
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 101
64194: PUSH
64195: LD_INT 102
64197: PUSH
64198: LD_INT 103
64200: PUSH
64201: LD_INT 104
64203: PUSH
64204: LD_INT 105
64206: PUSH
64207: LD_INT 106
64209: PUSH
64210: LD_INT 107
64212: PUSH
64213: LD_INT 108
64215: PUSH
64216: LD_INT 109
64218: PUSH
64219: LD_INT 110
64221: PUSH
64222: LD_INT 111
64224: PUSH
64225: LD_INT 112
64227: PUSH
64228: LD_INT 114
64230: PUSH
64231: LD_INT 116
64233: PUSH
64234: LD_INT 117
64236: PUSH
64237: LD_INT 118
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: ST_TO_ADDR
64262: GO 66157
64264: LD_INT 11
64266: DOUBLE
64267: EQUAL
64268: IFTRUE 64272
64270: GO 64476
64272: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64273: LD_ADDR_VAR 0 2
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: LD_INT 3
64283: PUSH
64284: LD_INT 4
64286: PUSH
64287: LD_INT 5
64289: PUSH
64290: LD_INT 6
64292: PUSH
64293: LD_INT 7
64295: PUSH
64296: LD_INT 8
64298: PUSH
64299: LD_INT 9
64301: PUSH
64302: LD_INT 10
64304: PUSH
64305: LD_INT 11
64307: PUSH
64308: LD_INT 12
64310: PUSH
64311: LD_INT 13
64313: PUSH
64314: LD_INT 14
64316: PUSH
64317: LD_INT 15
64319: PUSH
64320: LD_INT 16
64322: PUSH
64323: LD_INT 17
64325: PUSH
64326: LD_INT 18
64328: PUSH
64329: LD_INT 19
64331: PUSH
64332: LD_INT 20
64334: PUSH
64335: LD_INT 21
64337: PUSH
64338: LD_INT 22
64340: PUSH
64341: LD_INT 23
64343: PUSH
64344: LD_INT 24
64346: PUSH
64347: LD_INT 25
64349: PUSH
64350: LD_INT 26
64352: PUSH
64353: LD_INT 28
64355: PUSH
64356: LD_INT 30
64358: PUSH
64359: LD_INT 31
64361: PUSH
64362: LD_INT 32
64364: PUSH
64365: LD_INT 34
64367: PUSH
64368: LD_INT 36
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 101
64406: PUSH
64407: LD_INT 102
64409: PUSH
64410: LD_INT 103
64412: PUSH
64413: LD_INT 104
64415: PUSH
64416: LD_INT 105
64418: PUSH
64419: LD_INT 106
64421: PUSH
64422: LD_INT 107
64424: PUSH
64425: LD_INT 108
64427: PUSH
64428: LD_INT 109
64430: PUSH
64431: LD_INT 110
64433: PUSH
64434: LD_INT 111
64436: PUSH
64437: LD_INT 112
64439: PUSH
64440: LD_INT 114
64442: PUSH
64443: LD_INT 116
64445: PUSH
64446: LD_INT 117
64448: PUSH
64449: LD_INT 118
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: ST_TO_ADDR
64474: GO 66157
64476: LD_INT 12
64478: DOUBLE
64479: EQUAL
64480: IFTRUE 64484
64482: GO 64704
64484: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64485: LD_ADDR_VAR 0 2
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: LD_INT 3
64498: PUSH
64499: LD_INT 4
64501: PUSH
64502: LD_INT 5
64504: PUSH
64505: LD_INT 6
64507: PUSH
64508: LD_INT 7
64510: PUSH
64511: LD_INT 8
64513: PUSH
64514: LD_INT 9
64516: PUSH
64517: LD_INT 10
64519: PUSH
64520: LD_INT 11
64522: PUSH
64523: LD_INT 12
64525: PUSH
64526: LD_INT 13
64528: PUSH
64529: LD_INT 14
64531: PUSH
64532: LD_INT 15
64534: PUSH
64535: LD_INT 16
64537: PUSH
64538: LD_INT 17
64540: PUSH
64541: LD_INT 18
64543: PUSH
64544: LD_INT 19
64546: PUSH
64547: LD_INT 20
64549: PUSH
64550: LD_INT 21
64552: PUSH
64553: LD_INT 22
64555: PUSH
64556: LD_INT 23
64558: PUSH
64559: LD_INT 24
64561: PUSH
64562: LD_INT 25
64564: PUSH
64565: LD_INT 26
64567: PUSH
64568: LD_INT 27
64570: PUSH
64571: LD_INT 28
64573: PUSH
64574: LD_INT 30
64576: PUSH
64577: LD_INT 31
64579: PUSH
64580: LD_INT 32
64582: PUSH
64583: LD_INT 33
64585: PUSH
64586: LD_INT 34
64588: PUSH
64589: LD_INT 36
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 101
64630: PUSH
64631: LD_INT 102
64633: PUSH
64634: LD_INT 103
64636: PUSH
64637: LD_INT 104
64639: PUSH
64640: LD_INT 105
64642: PUSH
64643: LD_INT 106
64645: PUSH
64646: LD_INT 107
64648: PUSH
64649: LD_INT 108
64651: PUSH
64652: LD_INT 109
64654: PUSH
64655: LD_INT 110
64657: PUSH
64658: LD_INT 111
64660: PUSH
64661: LD_INT 112
64663: PUSH
64664: LD_INT 113
64666: PUSH
64667: LD_INT 114
64669: PUSH
64670: LD_INT 116
64672: PUSH
64673: LD_INT 117
64675: PUSH
64676: LD_INT 118
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: ST_TO_ADDR
64702: GO 66157
64704: LD_INT 13
64706: DOUBLE
64707: EQUAL
64708: IFTRUE 64712
64710: GO 64920
64712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64713: LD_ADDR_VAR 0 2
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: LD_INT 3
64726: PUSH
64727: LD_INT 4
64729: PUSH
64730: LD_INT 5
64732: PUSH
64733: LD_INT 8
64735: PUSH
64736: LD_INT 9
64738: PUSH
64739: LD_INT 10
64741: PUSH
64742: LD_INT 11
64744: PUSH
64745: LD_INT 12
64747: PUSH
64748: LD_INT 14
64750: PUSH
64751: LD_INT 15
64753: PUSH
64754: LD_INT 16
64756: PUSH
64757: LD_INT 17
64759: PUSH
64760: LD_INT 18
64762: PUSH
64763: LD_INT 19
64765: PUSH
64766: LD_INT 20
64768: PUSH
64769: LD_INT 21
64771: PUSH
64772: LD_INT 22
64774: PUSH
64775: LD_INT 23
64777: PUSH
64778: LD_INT 24
64780: PUSH
64781: LD_INT 25
64783: PUSH
64784: LD_INT 26
64786: PUSH
64787: LD_INT 27
64789: PUSH
64790: LD_INT 28
64792: PUSH
64793: LD_INT 30
64795: PUSH
64796: LD_INT 31
64798: PUSH
64799: LD_INT 32
64801: PUSH
64802: LD_INT 33
64804: PUSH
64805: LD_INT 34
64807: PUSH
64808: LD_INT 36
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 101
64846: PUSH
64847: LD_INT 102
64849: PUSH
64850: LD_INT 103
64852: PUSH
64853: LD_INT 104
64855: PUSH
64856: LD_INT 105
64858: PUSH
64859: LD_INT 106
64861: PUSH
64862: LD_INT 107
64864: PUSH
64865: LD_INT 108
64867: PUSH
64868: LD_INT 109
64870: PUSH
64871: LD_INT 110
64873: PUSH
64874: LD_INT 111
64876: PUSH
64877: LD_INT 112
64879: PUSH
64880: LD_INT 113
64882: PUSH
64883: LD_INT 114
64885: PUSH
64886: LD_INT 116
64888: PUSH
64889: LD_INT 117
64891: PUSH
64892: LD_INT 118
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: ST_TO_ADDR
64918: GO 66157
64920: LD_INT 14
64922: DOUBLE
64923: EQUAL
64924: IFTRUE 64928
64926: GO 65152
64928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64929: LD_ADDR_VAR 0 2
64933: PUSH
64934: LD_INT 1
64936: PUSH
64937: LD_INT 2
64939: PUSH
64940: LD_INT 3
64942: PUSH
64943: LD_INT 4
64945: PUSH
64946: LD_INT 5
64948: PUSH
64949: LD_INT 6
64951: PUSH
64952: LD_INT 7
64954: PUSH
64955: LD_INT 8
64957: PUSH
64958: LD_INT 9
64960: PUSH
64961: LD_INT 10
64963: PUSH
64964: LD_INT 11
64966: PUSH
64967: LD_INT 12
64969: PUSH
64970: LD_INT 13
64972: PUSH
64973: LD_INT 14
64975: PUSH
64976: LD_INT 15
64978: PUSH
64979: LD_INT 16
64981: PUSH
64982: LD_INT 17
64984: PUSH
64985: LD_INT 18
64987: PUSH
64988: LD_INT 19
64990: PUSH
64991: LD_INT 20
64993: PUSH
64994: LD_INT 21
64996: PUSH
64997: LD_INT 22
64999: PUSH
65000: LD_INT 23
65002: PUSH
65003: LD_INT 24
65005: PUSH
65006: LD_INT 25
65008: PUSH
65009: LD_INT 26
65011: PUSH
65012: LD_INT 27
65014: PUSH
65015: LD_INT 28
65017: PUSH
65018: LD_INT 29
65020: PUSH
65021: LD_INT 30
65023: PUSH
65024: LD_INT 31
65026: PUSH
65027: LD_INT 32
65029: PUSH
65030: LD_INT 33
65032: PUSH
65033: LD_INT 34
65035: PUSH
65036: LD_INT 36
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 101
65078: PUSH
65079: LD_INT 102
65081: PUSH
65082: LD_INT 103
65084: PUSH
65085: LD_INT 104
65087: PUSH
65088: LD_INT 105
65090: PUSH
65091: LD_INT 106
65093: PUSH
65094: LD_INT 107
65096: PUSH
65097: LD_INT 108
65099: PUSH
65100: LD_INT 109
65102: PUSH
65103: LD_INT 110
65105: PUSH
65106: LD_INT 111
65108: PUSH
65109: LD_INT 112
65111: PUSH
65112: LD_INT 113
65114: PUSH
65115: LD_INT 114
65117: PUSH
65118: LD_INT 116
65120: PUSH
65121: LD_INT 117
65123: PUSH
65124: LD_INT 118
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: ST_TO_ADDR
65150: GO 66157
65152: LD_INT 15
65154: DOUBLE
65155: EQUAL
65156: IFTRUE 65160
65158: GO 65384
65160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65161: LD_ADDR_VAR 0 2
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: LD_INT 2
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: LD_INT 4
65177: PUSH
65178: LD_INT 5
65180: PUSH
65181: LD_INT 6
65183: PUSH
65184: LD_INT 7
65186: PUSH
65187: LD_INT 8
65189: PUSH
65190: LD_INT 9
65192: PUSH
65193: LD_INT 10
65195: PUSH
65196: LD_INT 11
65198: PUSH
65199: LD_INT 12
65201: PUSH
65202: LD_INT 13
65204: PUSH
65205: LD_INT 14
65207: PUSH
65208: LD_INT 15
65210: PUSH
65211: LD_INT 16
65213: PUSH
65214: LD_INT 17
65216: PUSH
65217: LD_INT 18
65219: PUSH
65220: LD_INT 19
65222: PUSH
65223: LD_INT 20
65225: PUSH
65226: LD_INT 21
65228: PUSH
65229: LD_INT 22
65231: PUSH
65232: LD_INT 23
65234: PUSH
65235: LD_INT 24
65237: PUSH
65238: LD_INT 25
65240: PUSH
65241: LD_INT 26
65243: PUSH
65244: LD_INT 27
65246: PUSH
65247: LD_INT 28
65249: PUSH
65250: LD_INT 29
65252: PUSH
65253: LD_INT 30
65255: PUSH
65256: LD_INT 31
65258: PUSH
65259: LD_INT 32
65261: PUSH
65262: LD_INT 33
65264: PUSH
65265: LD_INT 34
65267: PUSH
65268: LD_INT 36
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 101
65310: PUSH
65311: LD_INT 102
65313: PUSH
65314: LD_INT 103
65316: PUSH
65317: LD_INT 104
65319: PUSH
65320: LD_INT 105
65322: PUSH
65323: LD_INT 106
65325: PUSH
65326: LD_INT 107
65328: PUSH
65329: LD_INT 108
65331: PUSH
65332: LD_INT 109
65334: PUSH
65335: LD_INT 110
65337: PUSH
65338: LD_INT 111
65340: PUSH
65341: LD_INT 112
65343: PUSH
65344: LD_INT 113
65346: PUSH
65347: LD_INT 114
65349: PUSH
65350: LD_INT 116
65352: PUSH
65353: LD_INT 117
65355: PUSH
65356: LD_INT 118
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: ST_TO_ADDR
65382: GO 66157
65384: LD_INT 16
65386: DOUBLE
65387: EQUAL
65388: IFTRUE 65392
65390: GO 65528
65392: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65393: LD_ADDR_VAR 0 2
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: LD_INT 4
65403: PUSH
65404: LD_INT 5
65406: PUSH
65407: LD_INT 7
65409: PUSH
65410: LD_INT 11
65412: PUSH
65413: LD_INT 12
65415: PUSH
65416: LD_INT 15
65418: PUSH
65419: LD_INT 16
65421: PUSH
65422: LD_INT 20
65424: PUSH
65425: LD_INT 21
65427: PUSH
65428: LD_INT 22
65430: PUSH
65431: LD_INT 23
65433: PUSH
65434: LD_INT 25
65436: PUSH
65437: LD_INT 26
65439: PUSH
65440: LD_INT 30
65442: PUSH
65443: LD_INT 31
65445: PUSH
65446: LD_INT 32
65448: PUSH
65449: LD_INT 33
65451: PUSH
65452: LD_INT 34
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 101
65478: PUSH
65479: LD_INT 102
65481: PUSH
65482: LD_INT 103
65484: PUSH
65485: LD_INT 106
65487: PUSH
65488: LD_INT 108
65490: PUSH
65491: LD_INT 112
65493: PUSH
65494: LD_INT 113
65496: PUSH
65497: LD_INT 114
65499: PUSH
65500: LD_INT 116
65502: PUSH
65503: LD_INT 117
65505: PUSH
65506: LD_INT 118
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: ST_TO_ADDR
65526: GO 66157
65528: LD_INT 17
65530: DOUBLE
65531: EQUAL
65532: IFTRUE 65536
65534: GO 65760
65536: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65537: LD_ADDR_VAR 0 2
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: LD_INT 2
65547: PUSH
65548: LD_INT 3
65550: PUSH
65551: LD_INT 4
65553: PUSH
65554: LD_INT 5
65556: PUSH
65557: LD_INT 6
65559: PUSH
65560: LD_INT 7
65562: PUSH
65563: LD_INT 8
65565: PUSH
65566: LD_INT 9
65568: PUSH
65569: LD_INT 10
65571: PUSH
65572: LD_INT 11
65574: PUSH
65575: LD_INT 12
65577: PUSH
65578: LD_INT 13
65580: PUSH
65581: LD_INT 14
65583: PUSH
65584: LD_INT 15
65586: PUSH
65587: LD_INT 16
65589: PUSH
65590: LD_INT 17
65592: PUSH
65593: LD_INT 18
65595: PUSH
65596: LD_INT 19
65598: PUSH
65599: LD_INT 20
65601: PUSH
65602: LD_INT 21
65604: PUSH
65605: LD_INT 22
65607: PUSH
65608: LD_INT 23
65610: PUSH
65611: LD_INT 24
65613: PUSH
65614: LD_INT 25
65616: PUSH
65617: LD_INT 26
65619: PUSH
65620: LD_INT 27
65622: PUSH
65623: LD_INT 28
65625: PUSH
65626: LD_INT 29
65628: PUSH
65629: LD_INT 30
65631: PUSH
65632: LD_INT 31
65634: PUSH
65635: LD_INT 32
65637: PUSH
65638: LD_INT 33
65640: PUSH
65641: LD_INT 34
65643: PUSH
65644: LD_INT 36
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 101
65686: PUSH
65687: LD_INT 102
65689: PUSH
65690: LD_INT 103
65692: PUSH
65693: LD_INT 104
65695: PUSH
65696: LD_INT 105
65698: PUSH
65699: LD_INT 106
65701: PUSH
65702: LD_INT 107
65704: PUSH
65705: LD_INT 108
65707: PUSH
65708: LD_INT 109
65710: PUSH
65711: LD_INT 110
65713: PUSH
65714: LD_INT 111
65716: PUSH
65717: LD_INT 112
65719: PUSH
65720: LD_INT 113
65722: PUSH
65723: LD_INT 114
65725: PUSH
65726: LD_INT 116
65728: PUSH
65729: LD_INT 117
65731: PUSH
65732: LD_INT 118
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: ST_TO_ADDR
65758: GO 66157
65760: LD_INT 18
65762: DOUBLE
65763: EQUAL
65764: IFTRUE 65768
65766: GO 65916
65768: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65769: LD_ADDR_VAR 0 2
65773: PUSH
65774: LD_INT 2
65776: PUSH
65777: LD_INT 4
65779: PUSH
65780: LD_INT 5
65782: PUSH
65783: LD_INT 7
65785: PUSH
65786: LD_INT 11
65788: PUSH
65789: LD_INT 12
65791: PUSH
65792: LD_INT 15
65794: PUSH
65795: LD_INT 16
65797: PUSH
65798: LD_INT 20
65800: PUSH
65801: LD_INT 21
65803: PUSH
65804: LD_INT 22
65806: PUSH
65807: LD_INT 23
65809: PUSH
65810: LD_INT 25
65812: PUSH
65813: LD_INT 26
65815: PUSH
65816: LD_INT 30
65818: PUSH
65819: LD_INT 31
65821: PUSH
65822: LD_INT 32
65824: PUSH
65825: LD_INT 33
65827: PUSH
65828: LD_INT 34
65830: PUSH
65831: LD_INT 35
65833: PUSH
65834: LD_INT 36
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 101
65862: PUSH
65863: LD_INT 102
65865: PUSH
65866: LD_INT 103
65868: PUSH
65869: LD_INT 106
65871: PUSH
65872: LD_INT 108
65874: PUSH
65875: LD_INT 112
65877: PUSH
65878: LD_INT 113
65880: PUSH
65881: LD_INT 114
65883: PUSH
65884: LD_INT 115
65886: PUSH
65887: LD_INT 116
65889: PUSH
65890: LD_INT 117
65892: PUSH
65893: LD_INT 118
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: ST_TO_ADDR
65914: GO 66157
65916: LD_INT 19
65918: DOUBLE
65919: EQUAL
65920: IFTRUE 65924
65922: GO 66156
65924: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65925: LD_ADDR_VAR 0 2
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: LD_INT 4
65941: PUSH
65942: LD_INT 5
65944: PUSH
65945: LD_INT 6
65947: PUSH
65948: LD_INT 7
65950: PUSH
65951: LD_INT 8
65953: PUSH
65954: LD_INT 9
65956: PUSH
65957: LD_INT 10
65959: PUSH
65960: LD_INT 11
65962: PUSH
65963: LD_INT 12
65965: PUSH
65966: LD_INT 13
65968: PUSH
65969: LD_INT 14
65971: PUSH
65972: LD_INT 15
65974: PUSH
65975: LD_INT 16
65977: PUSH
65978: LD_INT 17
65980: PUSH
65981: LD_INT 18
65983: PUSH
65984: LD_INT 19
65986: PUSH
65987: LD_INT 20
65989: PUSH
65990: LD_INT 21
65992: PUSH
65993: LD_INT 22
65995: PUSH
65996: LD_INT 23
65998: PUSH
65999: LD_INT 24
66001: PUSH
66002: LD_INT 25
66004: PUSH
66005: LD_INT 26
66007: PUSH
66008: LD_INT 27
66010: PUSH
66011: LD_INT 28
66013: PUSH
66014: LD_INT 29
66016: PUSH
66017: LD_INT 30
66019: PUSH
66020: LD_INT 31
66022: PUSH
66023: LD_INT 32
66025: PUSH
66026: LD_INT 33
66028: PUSH
66029: LD_INT 34
66031: PUSH
66032: LD_INT 35
66034: PUSH
66035: LD_INT 36
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 101
66078: PUSH
66079: LD_INT 102
66081: PUSH
66082: LD_INT 103
66084: PUSH
66085: LD_INT 104
66087: PUSH
66088: LD_INT 105
66090: PUSH
66091: LD_INT 106
66093: PUSH
66094: LD_INT 107
66096: PUSH
66097: LD_INT 108
66099: PUSH
66100: LD_INT 109
66102: PUSH
66103: LD_INT 110
66105: PUSH
66106: LD_INT 111
66108: PUSH
66109: LD_INT 112
66111: PUSH
66112: LD_INT 113
66114: PUSH
66115: LD_INT 114
66117: PUSH
66118: LD_INT 115
66120: PUSH
66121: LD_INT 116
66123: PUSH
66124: LD_INT 117
66126: PUSH
66127: LD_INT 118
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: ST_TO_ADDR
66154: GO 66157
66156: POP
// end else
66157: GO 66388
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66159: LD_ADDR_VAR 0 2
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: LD_INT 4
66175: PUSH
66176: LD_INT 5
66178: PUSH
66179: LD_INT 6
66181: PUSH
66182: LD_INT 7
66184: PUSH
66185: LD_INT 8
66187: PUSH
66188: LD_INT 9
66190: PUSH
66191: LD_INT 10
66193: PUSH
66194: LD_INT 11
66196: PUSH
66197: LD_INT 12
66199: PUSH
66200: LD_INT 13
66202: PUSH
66203: LD_INT 14
66205: PUSH
66206: LD_INT 15
66208: PUSH
66209: LD_INT 16
66211: PUSH
66212: LD_INT 17
66214: PUSH
66215: LD_INT 18
66217: PUSH
66218: LD_INT 19
66220: PUSH
66221: LD_INT 20
66223: PUSH
66224: LD_INT 21
66226: PUSH
66227: LD_INT 22
66229: PUSH
66230: LD_INT 23
66232: PUSH
66233: LD_INT 24
66235: PUSH
66236: LD_INT 25
66238: PUSH
66239: LD_INT 26
66241: PUSH
66242: LD_INT 27
66244: PUSH
66245: LD_INT 28
66247: PUSH
66248: LD_INT 29
66250: PUSH
66251: LD_INT 30
66253: PUSH
66254: LD_INT 31
66256: PUSH
66257: LD_INT 32
66259: PUSH
66260: LD_INT 33
66262: PUSH
66263: LD_INT 34
66265: PUSH
66266: LD_INT 35
66268: PUSH
66269: LD_INT 36
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 101
66312: PUSH
66313: LD_INT 102
66315: PUSH
66316: LD_INT 103
66318: PUSH
66319: LD_INT 104
66321: PUSH
66322: LD_INT 105
66324: PUSH
66325: LD_INT 106
66327: PUSH
66328: LD_INT 107
66330: PUSH
66331: LD_INT 108
66333: PUSH
66334: LD_INT 109
66336: PUSH
66337: LD_INT 110
66339: PUSH
66340: LD_INT 111
66342: PUSH
66343: LD_INT 112
66345: PUSH
66346: LD_INT 113
66348: PUSH
66349: LD_INT 114
66351: PUSH
66352: LD_INT 115
66354: PUSH
66355: LD_INT 116
66357: PUSH
66358: LD_INT 117
66360: PUSH
66361: LD_INT 118
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: ST_TO_ADDR
// if result then
66388: LD_VAR 0 2
66392: IFFALSE 67178
// begin normal :=  ;
66394: LD_ADDR_VAR 0 5
66398: PUSH
66399: LD_STRING 
66401: ST_TO_ADDR
// hardcore :=  ;
66402: LD_ADDR_VAR 0 6
66406: PUSH
66407: LD_STRING 
66409: ST_TO_ADDR
// active :=  ;
66410: LD_ADDR_VAR 0 7
66414: PUSH
66415: LD_STRING 
66417: ST_TO_ADDR
// for i = 1 to normalCounter do
66418: LD_ADDR_VAR 0 8
66422: PUSH
66423: DOUBLE
66424: LD_INT 1
66426: DEC
66427: ST_TO_ADDR
66428: LD_EXP 45
66432: PUSH
66433: FOR_TO
66434: IFFALSE 66535
// begin tmp := 0 ;
66436: LD_ADDR_VAR 0 3
66440: PUSH
66441: LD_STRING 0
66443: ST_TO_ADDR
// if result [ 1 ] then
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 1
66451: ARRAY
66452: IFFALSE 66517
// if result [ 1 ] [ 1 ] = i then
66454: LD_VAR 0 2
66458: PUSH
66459: LD_INT 1
66461: ARRAY
66462: PUSH
66463: LD_INT 1
66465: ARRAY
66466: PUSH
66467: LD_VAR 0 8
66471: EQUAL
66472: IFFALSE 66517
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66474: LD_ADDR_VAR 0 2
66478: PUSH
66479: LD_VAR 0 2
66483: PPUSH
66484: LD_INT 1
66486: PPUSH
66487: LD_VAR 0 2
66491: PUSH
66492: LD_INT 1
66494: ARRAY
66495: PPUSH
66496: LD_INT 1
66498: PPUSH
66499: CALL_OW 3
66503: PPUSH
66504: CALL_OW 1
66508: ST_TO_ADDR
// tmp := 1 ;
66509: LD_ADDR_VAR 0 3
66513: PUSH
66514: LD_STRING 1
66516: ST_TO_ADDR
// end ; normal := normal & tmp ;
66517: LD_ADDR_VAR 0 5
66521: PUSH
66522: LD_VAR 0 5
66526: PUSH
66527: LD_VAR 0 3
66531: STR
66532: ST_TO_ADDR
// end ;
66533: GO 66433
66535: POP
66536: POP
// for i = 1 to hardcoreCounter do
66537: LD_ADDR_VAR 0 8
66541: PUSH
66542: DOUBLE
66543: LD_INT 1
66545: DEC
66546: ST_TO_ADDR
66547: LD_EXP 46
66551: PUSH
66552: FOR_TO
66553: IFFALSE 66658
// begin tmp := 0 ;
66555: LD_ADDR_VAR 0 3
66559: PUSH
66560: LD_STRING 0
66562: ST_TO_ADDR
// if result [ 2 ] then
66563: LD_VAR 0 2
66567: PUSH
66568: LD_INT 2
66570: ARRAY
66571: IFFALSE 66640
// if result [ 2 ] [ 1 ] = 100 + i then
66573: LD_VAR 0 2
66577: PUSH
66578: LD_INT 2
66580: ARRAY
66581: PUSH
66582: LD_INT 1
66584: ARRAY
66585: PUSH
66586: LD_INT 100
66588: PUSH
66589: LD_VAR 0 8
66593: PLUS
66594: EQUAL
66595: IFFALSE 66640
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66597: LD_ADDR_VAR 0 2
66601: PUSH
66602: LD_VAR 0 2
66606: PPUSH
66607: LD_INT 2
66609: PPUSH
66610: LD_VAR 0 2
66614: PUSH
66615: LD_INT 2
66617: ARRAY
66618: PPUSH
66619: LD_INT 1
66621: PPUSH
66622: CALL_OW 3
66626: PPUSH
66627: CALL_OW 1
66631: ST_TO_ADDR
// tmp := 1 ;
66632: LD_ADDR_VAR 0 3
66636: PUSH
66637: LD_STRING 1
66639: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66640: LD_ADDR_VAR 0 6
66644: PUSH
66645: LD_VAR 0 6
66649: PUSH
66650: LD_VAR 0 3
66654: STR
66655: ST_TO_ADDR
// end ;
66656: GO 66552
66658: POP
66659: POP
// if isGameLoad then
66660: LD_VAR 0 1
66664: IFFALSE 67139
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66666: LD_ADDR_VAR 0 4
66670: PUSH
66671: LD_EXP 49
66675: PUSH
66676: LD_EXP 48
66680: PUSH
66681: LD_EXP 50
66685: PUSH
66686: LD_EXP 47
66690: PUSH
66691: LD_EXP 51
66695: PUSH
66696: LD_EXP 52
66700: PUSH
66701: LD_EXP 53
66705: PUSH
66706: LD_EXP 54
66710: PUSH
66711: LD_EXP 55
66715: PUSH
66716: LD_EXP 56
66720: PUSH
66721: LD_EXP 57
66725: PUSH
66726: LD_EXP 58
66730: PUSH
66731: LD_EXP 59
66735: PUSH
66736: LD_EXP 60
66740: PUSH
66741: LD_EXP 68
66745: PUSH
66746: LD_EXP 69
66750: PUSH
66751: LD_EXP 70
66755: PUSH
66756: LD_EXP 71
66760: PUSH
66761: LD_EXP 73
66765: PUSH
66766: LD_EXP 74
66770: PUSH
66771: LD_EXP 75
66775: PUSH
66776: LD_EXP 78
66780: PUSH
66781: LD_EXP 80
66785: PUSH
66786: LD_EXP 81
66790: PUSH
66791: LD_EXP 82
66795: PUSH
66796: LD_EXP 84
66800: PUSH
66801: LD_EXP 85
66805: PUSH
66806: LD_EXP 88
66810: PUSH
66811: LD_EXP 89
66815: PUSH
66816: LD_EXP 90
66820: PUSH
66821: LD_EXP 91
66825: PUSH
66826: LD_EXP 92
66830: PUSH
66831: LD_EXP 93
66835: PUSH
66836: LD_EXP 94
66840: PUSH
66841: LD_EXP 95
66845: PUSH
66846: LD_EXP 96
66850: PUSH
66851: LD_EXP 61
66855: PUSH
66856: LD_EXP 62
66860: PUSH
66861: LD_EXP 65
66865: PUSH
66866: LD_EXP 66
66870: PUSH
66871: LD_EXP 67
66875: PUSH
66876: LD_EXP 63
66880: PUSH
66881: LD_EXP 64
66885: PUSH
66886: LD_EXP 72
66890: PUSH
66891: LD_EXP 76
66895: PUSH
66896: LD_EXP 77
66900: PUSH
66901: LD_EXP 79
66905: PUSH
66906: LD_EXP 83
66910: PUSH
66911: LD_EXP 86
66915: PUSH
66916: LD_EXP 87
66920: PUSH
66921: LD_EXP 97
66925: PUSH
66926: LD_EXP 98
66930: PUSH
66931: LD_EXP 99
66935: PUSH
66936: LD_EXP 100
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: LIST
66996: ST_TO_ADDR
// tmp :=  ;
66997: LD_ADDR_VAR 0 3
67001: PUSH
67002: LD_STRING 
67004: ST_TO_ADDR
// for i = 1 to normalCounter do
67005: LD_ADDR_VAR 0 8
67009: PUSH
67010: DOUBLE
67011: LD_INT 1
67013: DEC
67014: ST_TO_ADDR
67015: LD_EXP 45
67019: PUSH
67020: FOR_TO
67021: IFFALSE 67057
// begin if flags [ i ] then
67023: LD_VAR 0 4
67027: PUSH
67028: LD_VAR 0 8
67032: ARRAY
67033: IFFALSE 67055
// tmp := tmp & i & ; ;
67035: LD_ADDR_VAR 0 3
67039: PUSH
67040: LD_VAR 0 3
67044: PUSH
67045: LD_VAR 0 8
67049: STR
67050: PUSH
67051: LD_STRING ;
67053: STR
67054: ST_TO_ADDR
// end ;
67055: GO 67020
67057: POP
67058: POP
// for i = 1 to hardcoreCounter do
67059: LD_ADDR_VAR 0 8
67063: PUSH
67064: DOUBLE
67065: LD_INT 1
67067: DEC
67068: ST_TO_ADDR
67069: LD_EXP 46
67073: PUSH
67074: FOR_TO
67075: IFFALSE 67121
// begin if flags [ normalCounter + i ] then
67077: LD_VAR 0 4
67081: PUSH
67082: LD_EXP 45
67086: PUSH
67087: LD_VAR 0 8
67091: PLUS
67092: ARRAY
67093: IFFALSE 67119
// tmp := tmp & ( 100 + i ) & ; ;
67095: LD_ADDR_VAR 0 3
67099: PUSH
67100: LD_VAR 0 3
67104: PUSH
67105: LD_INT 100
67107: PUSH
67108: LD_VAR 0 8
67112: PLUS
67113: STR
67114: PUSH
67115: LD_STRING ;
67117: STR
67118: ST_TO_ADDR
// end ;
67119: GO 67074
67121: POP
67122: POP
// if tmp then
67123: LD_VAR 0 3
67127: IFFALSE 67139
// active := tmp ;
67129: LD_ADDR_VAR 0 7
67133: PUSH
67134: LD_VAR 0 3
67138: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67139: LD_STRING getStreamItemsFromMission("
67141: PUSH
67142: LD_VAR 0 5
67146: STR
67147: PUSH
67148: LD_STRING ","
67150: STR
67151: PUSH
67152: LD_VAR 0 6
67156: STR
67157: PUSH
67158: LD_STRING ","
67160: STR
67161: PUSH
67162: LD_VAR 0 7
67166: STR
67167: PUSH
67168: LD_STRING ")
67170: STR
67171: PPUSH
67172: CALL_OW 559
// end else
67176: GO 67185
// ToLua ( getStreamItemsFromMission("","","") ) ;
67178: LD_STRING getStreamItemsFromMission("","","")
67180: PPUSH
67181: CALL_OW 559
// end ;
67185: LD_VAR 0 2
67189: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67190: LD_EXP 44
67194: PUSH
67195: LD_EXP 49
67199: AND
67200: IFFALSE 67324
67202: GO 67204
67204: DISABLE
67205: LD_INT 0
67207: PPUSH
67208: PPUSH
// begin enable ;
67209: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67210: LD_ADDR_VAR 0 2
67214: PUSH
67215: LD_INT 22
67217: PUSH
67218: LD_OWVAR 2
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: LD_INT 34
67232: PUSH
67233: LD_INT 7
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 34
67242: PUSH
67243: LD_INT 45
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 34
67252: PUSH
67253: LD_INT 28
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 34
67262: PUSH
67263: LD_INT 47
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PPUSH
67281: CALL_OW 69
67285: ST_TO_ADDR
// if not tmp then
67286: LD_VAR 0 2
67290: NOT
67291: IFFALSE 67295
// exit ;
67293: GO 67324
// for i in tmp do
67295: LD_ADDR_VAR 0 1
67299: PUSH
67300: LD_VAR 0 2
67304: PUSH
67305: FOR_IN
67306: IFFALSE 67322
// begin SetLives ( i , 0 ) ;
67308: LD_VAR 0 1
67312: PPUSH
67313: LD_INT 0
67315: PPUSH
67316: CALL_OW 234
// end ;
67320: GO 67305
67322: POP
67323: POP
// end ;
67324: PPOPN 2
67326: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67327: LD_EXP 44
67331: PUSH
67332: LD_EXP 50
67336: AND
67337: IFFALSE 67421
67339: GO 67341
67341: DISABLE
67342: LD_INT 0
67344: PPUSH
67345: PPUSH
// begin enable ;
67346: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67347: LD_ADDR_VAR 0 2
67351: PUSH
67352: LD_INT 22
67354: PUSH
67355: LD_OWVAR 2
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 32
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PPUSH
67378: CALL_OW 69
67382: ST_TO_ADDR
// if not tmp then
67383: LD_VAR 0 2
67387: NOT
67388: IFFALSE 67392
// exit ;
67390: GO 67421
// for i in tmp do
67392: LD_ADDR_VAR 0 1
67396: PUSH
67397: LD_VAR 0 2
67401: PUSH
67402: FOR_IN
67403: IFFALSE 67419
// begin SetLives ( i , 0 ) ;
67405: LD_VAR 0 1
67409: PPUSH
67410: LD_INT 0
67412: PPUSH
67413: CALL_OW 234
// end ;
67417: GO 67402
67419: POP
67420: POP
// end ;
67421: PPOPN 2
67423: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67424: LD_EXP 44
67428: PUSH
67429: LD_EXP 47
67433: AND
67434: IFFALSE 67527
67436: GO 67438
67438: DISABLE
67439: LD_INT 0
67441: PPUSH
// begin enable ;
67442: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67443: LD_ADDR_VAR 0 1
67447: PUSH
67448: LD_INT 22
67450: PUSH
67451: LD_OWVAR 2
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 2
67462: PUSH
67463: LD_INT 25
67465: PUSH
67466: LD_INT 5
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 25
67475: PUSH
67476: LD_INT 9
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 25
67485: PUSH
67486: LD_INT 8
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PPUSH
67503: CALL_OW 69
67507: PUSH
67508: FOR_IN
67509: IFFALSE 67525
// begin SetClass ( i , 1 ) ;
67511: LD_VAR 0 1
67515: PPUSH
67516: LD_INT 1
67518: PPUSH
67519: CALL_OW 336
// end ;
67523: GO 67508
67525: POP
67526: POP
// end ;
67527: PPOPN 1
67529: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67530: LD_EXP 44
67534: PUSH
67535: LD_EXP 48
67539: AND
67540: PUSH
67541: LD_OWVAR 65
67545: PUSH
67546: LD_INT 7
67548: LESS
67549: AND
67550: IFFALSE 67564
67552: GO 67554
67554: DISABLE
// begin enable ;
67555: ENABLE
// game_speed := 7 ;
67556: LD_ADDR_OWVAR 65
67560: PUSH
67561: LD_INT 7
67563: ST_TO_ADDR
// end ;
67564: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67565: LD_EXP 44
67569: PUSH
67570: LD_EXP 51
67574: AND
67575: IFFALSE 67777
67577: GO 67579
67579: DISABLE
67580: LD_INT 0
67582: PPUSH
67583: PPUSH
67584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67585: LD_ADDR_VAR 0 3
67589: PUSH
67590: LD_INT 81
67592: PUSH
67593: LD_OWVAR 2
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 21
67604: PUSH
67605: LD_INT 1
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PPUSH
67616: CALL_OW 69
67620: ST_TO_ADDR
// if not tmp then
67621: LD_VAR 0 3
67625: NOT
67626: IFFALSE 67630
// exit ;
67628: GO 67777
// if tmp > 5 then
67630: LD_VAR 0 3
67634: PUSH
67635: LD_INT 5
67637: GREATER
67638: IFFALSE 67650
// k := 5 else
67640: LD_ADDR_VAR 0 2
67644: PUSH
67645: LD_INT 5
67647: ST_TO_ADDR
67648: GO 67660
// k := tmp ;
67650: LD_ADDR_VAR 0 2
67654: PUSH
67655: LD_VAR 0 3
67659: ST_TO_ADDR
// for i := 1 to k do
67660: LD_ADDR_VAR 0 1
67664: PUSH
67665: DOUBLE
67666: LD_INT 1
67668: DEC
67669: ST_TO_ADDR
67670: LD_VAR 0 2
67674: PUSH
67675: FOR_TO
67676: IFFALSE 67775
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67678: LD_VAR 0 3
67682: PUSH
67683: LD_VAR 0 1
67687: ARRAY
67688: PPUSH
67689: LD_VAR 0 1
67693: PUSH
67694: LD_INT 4
67696: MOD
67697: PUSH
67698: LD_INT 1
67700: PLUS
67701: PPUSH
67702: CALL_OW 259
67706: PUSH
67707: LD_INT 10
67709: LESS
67710: IFFALSE 67773
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67712: LD_VAR 0 3
67716: PUSH
67717: LD_VAR 0 1
67721: ARRAY
67722: PPUSH
67723: LD_VAR 0 1
67727: PUSH
67728: LD_INT 4
67730: MOD
67731: PUSH
67732: LD_INT 1
67734: PLUS
67735: PPUSH
67736: LD_VAR 0 3
67740: PUSH
67741: LD_VAR 0 1
67745: ARRAY
67746: PPUSH
67747: LD_VAR 0 1
67751: PUSH
67752: LD_INT 4
67754: MOD
67755: PUSH
67756: LD_INT 1
67758: PLUS
67759: PPUSH
67760: CALL_OW 259
67764: PUSH
67765: LD_INT 1
67767: PLUS
67768: PPUSH
67769: CALL_OW 237
67773: GO 67675
67775: POP
67776: POP
// end ;
67777: PPOPN 3
67779: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67780: LD_EXP 44
67784: PUSH
67785: LD_EXP 52
67789: AND
67790: IFFALSE 67810
67792: GO 67794
67794: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67795: LD_INT 4
67797: PPUSH
67798: LD_OWVAR 2
67802: PPUSH
67803: LD_INT 0
67805: PPUSH
67806: CALL_OW 324
67810: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67811: LD_EXP 44
67815: PUSH
67816: LD_EXP 81
67820: AND
67821: IFFALSE 67841
67823: GO 67825
67825: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67826: LD_INT 19
67828: PPUSH
67829: LD_OWVAR 2
67833: PPUSH
67834: LD_INT 0
67836: PPUSH
67837: CALL_OW 324
67841: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67842: LD_EXP 44
67846: PUSH
67847: LD_EXP 53
67851: AND
67852: IFFALSE 67954
67854: GO 67856
67856: DISABLE
67857: LD_INT 0
67859: PPUSH
67860: PPUSH
// begin enable ;
67861: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67862: LD_ADDR_VAR 0 2
67866: PUSH
67867: LD_INT 22
67869: PUSH
67870: LD_OWVAR 2
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 2
67881: PUSH
67882: LD_INT 34
67884: PUSH
67885: LD_INT 11
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: LD_INT 34
67894: PUSH
67895: LD_INT 30
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: LIST
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PPUSH
67911: CALL_OW 69
67915: ST_TO_ADDR
// if not tmp then
67916: LD_VAR 0 2
67920: NOT
67921: IFFALSE 67925
// exit ;
67923: GO 67954
// for i in tmp do
67925: LD_ADDR_VAR 0 1
67929: PUSH
67930: LD_VAR 0 2
67934: PUSH
67935: FOR_IN
67936: IFFALSE 67952
// begin SetLives ( i , 0 ) ;
67938: LD_VAR 0 1
67942: PPUSH
67943: LD_INT 0
67945: PPUSH
67946: CALL_OW 234
// end ;
67950: GO 67935
67952: POP
67953: POP
// end ;
67954: PPOPN 2
67956: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67957: LD_EXP 44
67961: PUSH
67962: LD_EXP 54
67966: AND
67967: IFFALSE 67987
67969: GO 67971
67971: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67972: LD_INT 32
67974: PPUSH
67975: LD_OWVAR 2
67979: PPUSH
67980: LD_INT 0
67982: PPUSH
67983: CALL_OW 324
67987: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67988: LD_EXP 44
67992: PUSH
67993: LD_EXP 55
67997: AND
67998: IFFALSE 68179
68000: GO 68002
68002: DISABLE
68003: LD_INT 0
68005: PPUSH
68006: PPUSH
68007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68008: LD_ADDR_VAR 0 2
68012: PUSH
68013: LD_INT 22
68015: PUSH
68016: LD_OWVAR 2
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 33
68027: PUSH
68028: LD_INT 3
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PPUSH
68039: CALL_OW 69
68043: ST_TO_ADDR
// if not tmp then
68044: LD_VAR 0 2
68048: NOT
68049: IFFALSE 68053
// exit ;
68051: GO 68179
// side := 0 ;
68053: LD_ADDR_VAR 0 3
68057: PUSH
68058: LD_INT 0
68060: ST_TO_ADDR
// for i := 1 to 8 do
68061: LD_ADDR_VAR 0 1
68065: PUSH
68066: DOUBLE
68067: LD_INT 1
68069: DEC
68070: ST_TO_ADDR
68071: LD_INT 8
68073: PUSH
68074: FOR_TO
68075: IFFALSE 68123
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68077: LD_OWVAR 2
68081: PUSH
68082: LD_VAR 0 1
68086: NONEQUAL
68087: PUSH
68088: LD_OWVAR 2
68092: PPUSH
68093: LD_VAR 0 1
68097: PPUSH
68098: CALL_OW 81
68102: PUSH
68103: LD_INT 2
68105: EQUAL
68106: AND
68107: IFFALSE 68121
// begin side := i ;
68109: LD_ADDR_VAR 0 3
68113: PUSH
68114: LD_VAR 0 1
68118: ST_TO_ADDR
// break ;
68119: GO 68123
// end ;
68121: GO 68074
68123: POP
68124: POP
// if not side then
68125: LD_VAR 0 3
68129: NOT
68130: IFFALSE 68134
// exit ;
68132: GO 68179
// for i := 1 to tmp do
68134: LD_ADDR_VAR 0 1
68138: PUSH
68139: DOUBLE
68140: LD_INT 1
68142: DEC
68143: ST_TO_ADDR
68144: LD_VAR 0 2
68148: PUSH
68149: FOR_TO
68150: IFFALSE 68177
// if Prob ( 60 ) then
68152: LD_INT 60
68154: PPUSH
68155: CALL_OW 13
68159: IFFALSE 68175
// SetSide ( i , side ) ;
68161: LD_VAR 0 1
68165: PPUSH
68166: LD_VAR 0 3
68170: PPUSH
68171: CALL_OW 235
68175: GO 68149
68177: POP
68178: POP
// end ;
68179: PPOPN 3
68181: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68182: LD_EXP 44
68186: PUSH
68187: LD_EXP 57
68191: AND
68192: IFFALSE 68311
68194: GO 68196
68196: DISABLE
68197: LD_INT 0
68199: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68200: LD_ADDR_VAR 0 1
68204: PUSH
68205: LD_INT 22
68207: PUSH
68208: LD_OWVAR 2
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 21
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 3
68229: PUSH
68230: LD_INT 23
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: PPUSH
68249: CALL_OW 69
68253: PUSH
68254: FOR_IN
68255: IFFALSE 68309
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68257: LD_VAR 0 1
68261: PPUSH
68262: CALL_OW 257
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: LD_INT 2
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: LD_INT 4
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: IN
68285: IFFALSE 68307
// SetClass ( un , rand ( 1 , 4 ) ) ;
68287: LD_VAR 0 1
68291: PPUSH
68292: LD_INT 1
68294: PPUSH
68295: LD_INT 4
68297: PPUSH
68298: CALL_OW 12
68302: PPUSH
68303: CALL_OW 336
68307: GO 68254
68309: POP
68310: POP
// end ;
68311: PPOPN 1
68313: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68314: LD_EXP 44
68318: PUSH
68319: LD_EXP 56
68323: AND
68324: IFFALSE 68403
68326: GO 68328
68328: DISABLE
68329: LD_INT 0
68331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68332: LD_ADDR_VAR 0 1
68336: PUSH
68337: LD_INT 22
68339: PUSH
68340: LD_OWVAR 2
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 21
68351: PUSH
68352: LD_INT 3
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PPUSH
68363: CALL_OW 69
68367: ST_TO_ADDR
// if not tmp then
68368: LD_VAR 0 1
68372: NOT
68373: IFFALSE 68377
// exit ;
68375: GO 68403
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68377: LD_VAR 0 1
68381: PUSH
68382: LD_INT 1
68384: PPUSH
68385: LD_VAR 0 1
68389: PPUSH
68390: CALL_OW 12
68394: ARRAY
68395: PPUSH
68396: LD_INT 100
68398: PPUSH
68399: CALL_OW 234
// end ;
68403: PPOPN 1
68405: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68406: LD_EXP 44
68410: PUSH
68411: LD_EXP 58
68415: AND
68416: IFFALSE 68514
68418: GO 68420
68420: DISABLE
68421: LD_INT 0
68423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68424: LD_ADDR_VAR 0 1
68428: PUSH
68429: LD_INT 22
68431: PUSH
68432: LD_OWVAR 2
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 21
68443: PUSH
68444: LD_INT 1
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PPUSH
68455: CALL_OW 69
68459: ST_TO_ADDR
// if not tmp then
68460: LD_VAR 0 1
68464: NOT
68465: IFFALSE 68469
// exit ;
68467: GO 68514
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68469: LD_VAR 0 1
68473: PUSH
68474: LD_INT 1
68476: PPUSH
68477: LD_VAR 0 1
68481: PPUSH
68482: CALL_OW 12
68486: ARRAY
68487: PPUSH
68488: LD_INT 1
68490: PPUSH
68491: LD_INT 4
68493: PPUSH
68494: CALL_OW 12
68498: PPUSH
68499: LD_INT 3000
68501: PPUSH
68502: LD_INT 9000
68504: PPUSH
68505: CALL_OW 12
68509: PPUSH
68510: CALL_OW 492
// end ;
68514: PPOPN 1
68516: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68517: LD_EXP 44
68521: PUSH
68522: LD_EXP 59
68526: AND
68527: IFFALSE 68547
68529: GO 68531
68531: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68532: LD_INT 1
68534: PPUSH
68535: LD_OWVAR 2
68539: PPUSH
68540: LD_INT 0
68542: PPUSH
68543: CALL_OW 324
68547: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68548: LD_EXP 44
68552: PUSH
68553: LD_EXP 60
68557: AND
68558: IFFALSE 68641
68560: GO 68562
68562: DISABLE
68563: LD_INT 0
68565: PPUSH
68566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68567: LD_ADDR_VAR 0 2
68571: PUSH
68572: LD_INT 22
68574: PUSH
68575: LD_OWVAR 2
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 21
68586: PUSH
68587: LD_INT 3
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PPUSH
68598: CALL_OW 69
68602: ST_TO_ADDR
// if not tmp then
68603: LD_VAR 0 2
68607: NOT
68608: IFFALSE 68612
// exit ;
68610: GO 68641
// for i in tmp do
68612: LD_ADDR_VAR 0 1
68616: PUSH
68617: LD_VAR 0 2
68621: PUSH
68622: FOR_IN
68623: IFFALSE 68639
// SetBLevel ( i , 10 ) ;
68625: LD_VAR 0 1
68629: PPUSH
68630: LD_INT 10
68632: PPUSH
68633: CALL_OW 241
68637: GO 68622
68639: POP
68640: POP
// end ;
68641: PPOPN 2
68643: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68644: LD_EXP 44
68648: PUSH
68649: LD_EXP 61
68653: AND
68654: IFFALSE 68765
68656: GO 68658
68658: DISABLE
68659: LD_INT 0
68661: PPUSH
68662: PPUSH
68663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68664: LD_ADDR_VAR 0 3
68668: PUSH
68669: LD_INT 22
68671: PUSH
68672: LD_OWVAR 2
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 25
68683: PUSH
68684: LD_INT 1
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PPUSH
68695: CALL_OW 69
68699: ST_TO_ADDR
// if not tmp then
68700: LD_VAR 0 3
68704: NOT
68705: IFFALSE 68709
// exit ;
68707: GO 68765
// un := tmp [ rand ( 1 , tmp ) ] ;
68709: LD_ADDR_VAR 0 2
68713: PUSH
68714: LD_VAR 0 3
68718: PUSH
68719: LD_INT 1
68721: PPUSH
68722: LD_VAR 0 3
68726: PPUSH
68727: CALL_OW 12
68731: ARRAY
68732: ST_TO_ADDR
// if Crawls ( un ) then
68733: LD_VAR 0 2
68737: PPUSH
68738: CALL_OW 318
68742: IFFALSE 68753
// ComWalk ( un ) ;
68744: LD_VAR 0 2
68748: PPUSH
68749: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68753: LD_VAR 0 2
68757: PPUSH
68758: LD_INT 5
68760: PPUSH
68761: CALL_OW 336
// end ;
68765: PPOPN 3
68767: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68768: LD_EXP 44
68772: PUSH
68773: LD_EXP 62
68777: AND
68778: PUSH
68779: LD_OWVAR 67
68783: PUSH
68784: LD_INT 4
68786: LESS
68787: AND
68788: IFFALSE 68807
68790: GO 68792
68792: DISABLE
// begin Difficulty := Difficulty + 1 ;
68793: LD_ADDR_OWVAR 67
68797: PUSH
68798: LD_OWVAR 67
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: ST_TO_ADDR
// end ;
68807: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68808: LD_EXP 44
68812: PUSH
68813: LD_EXP 63
68817: AND
68818: IFFALSE 68921
68820: GO 68822
68822: DISABLE
68823: LD_INT 0
68825: PPUSH
// begin for i := 1 to 5 do
68826: LD_ADDR_VAR 0 1
68830: PUSH
68831: DOUBLE
68832: LD_INT 1
68834: DEC
68835: ST_TO_ADDR
68836: LD_INT 5
68838: PUSH
68839: FOR_TO
68840: IFFALSE 68919
// begin uc_nation := nation_nature ;
68842: LD_ADDR_OWVAR 21
68846: PUSH
68847: LD_INT 0
68849: ST_TO_ADDR
// uc_side := 0 ;
68850: LD_ADDR_OWVAR 20
68854: PUSH
68855: LD_INT 0
68857: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68858: LD_ADDR_OWVAR 29
68862: PUSH
68863: LD_INT 12
68865: PUSH
68866: LD_INT 12
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: ST_TO_ADDR
// hc_agressivity := 20 ;
68873: LD_ADDR_OWVAR 35
68877: PUSH
68878: LD_INT 20
68880: ST_TO_ADDR
// hc_class := class_tiger ;
68881: LD_ADDR_OWVAR 28
68885: PUSH
68886: LD_INT 14
68888: ST_TO_ADDR
// hc_gallery :=  ;
68889: LD_ADDR_OWVAR 33
68893: PUSH
68894: LD_STRING 
68896: ST_TO_ADDR
// hc_name :=  ;
68897: LD_ADDR_OWVAR 26
68901: PUSH
68902: LD_STRING 
68904: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68905: CALL_OW 44
68909: PPUSH
68910: LD_INT 0
68912: PPUSH
68913: CALL_OW 51
// end ;
68917: GO 68839
68919: POP
68920: POP
// end ;
68921: PPOPN 1
68923: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68924: LD_EXP 44
68928: PUSH
68929: LD_EXP 64
68933: AND
68934: IFFALSE 68943
68936: GO 68938
68938: DISABLE
// StreamSibBomb ;
68939: CALL 68944 0 0
68943: END
// export function StreamSibBomb ; var i , x , y ; begin
68944: LD_INT 0
68946: PPUSH
68947: PPUSH
68948: PPUSH
68949: PPUSH
// result := false ;
68950: LD_ADDR_VAR 0 1
68954: PUSH
68955: LD_INT 0
68957: ST_TO_ADDR
// for i := 1 to 16 do
68958: LD_ADDR_VAR 0 2
68962: PUSH
68963: DOUBLE
68964: LD_INT 1
68966: DEC
68967: ST_TO_ADDR
68968: LD_INT 16
68970: PUSH
68971: FOR_TO
68972: IFFALSE 69171
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68974: LD_ADDR_VAR 0 3
68978: PUSH
68979: LD_INT 10
68981: PUSH
68982: LD_INT 20
68984: PUSH
68985: LD_INT 30
68987: PUSH
68988: LD_INT 40
68990: PUSH
68991: LD_INT 50
68993: PUSH
68994: LD_INT 60
68996: PUSH
68997: LD_INT 70
68999: PUSH
69000: LD_INT 80
69002: PUSH
69003: LD_INT 90
69005: PUSH
69006: LD_INT 100
69008: PUSH
69009: LD_INT 110
69011: PUSH
69012: LD_INT 120
69014: PUSH
69015: LD_INT 130
69017: PUSH
69018: LD_INT 140
69020: PUSH
69021: LD_INT 150
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 1
69043: PPUSH
69044: LD_INT 15
69046: PPUSH
69047: CALL_OW 12
69051: ARRAY
69052: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69053: LD_ADDR_VAR 0 4
69057: PUSH
69058: LD_INT 10
69060: PUSH
69061: LD_INT 20
69063: PUSH
69064: LD_INT 30
69066: PUSH
69067: LD_INT 40
69069: PUSH
69070: LD_INT 50
69072: PUSH
69073: LD_INT 60
69075: PUSH
69076: LD_INT 70
69078: PUSH
69079: LD_INT 80
69081: PUSH
69082: LD_INT 90
69084: PUSH
69085: LD_INT 100
69087: PUSH
69088: LD_INT 110
69090: PUSH
69091: LD_INT 120
69093: PUSH
69094: LD_INT 130
69096: PUSH
69097: LD_INT 140
69099: PUSH
69100: LD_INT 150
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 1
69122: PPUSH
69123: LD_INT 15
69125: PPUSH
69126: CALL_OW 12
69130: ARRAY
69131: ST_TO_ADDR
// if ValidHex ( x , y ) then
69132: LD_VAR 0 3
69136: PPUSH
69137: LD_VAR 0 4
69141: PPUSH
69142: CALL_OW 488
69146: IFFALSE 69169
// begin result := [ x , y ] ;
69148: LD_ADDR_VAR 0 1
69152: PUSH
69153: LD_VAR 0 3
69157: PUSH
69158: LD_VAR 0 4
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: ST_TO_ADDR
// break ;
69167: GO 69171
// end ; end ;
69169: GO 68971
69171: POP
69172: POP
// if result then
69173: LD_VAR 0 1
69177: IFFALSE 69237
// begin ToLua ( playSibBomb() ) ;
69179: LD_STRING playSibBomb()
69181: PPUSH
69182: CALL_OW 559
// wait ( 0 0$14 ) ;
69186: LD_INT 490
69188: PPUSH
69189: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69193: LD_VAR 0 1
69197: PUSH
69198: LD_INT 1
69200: ARRAY
69201: PPUSH
69202: LD_VAR 0 1
69206: PUSH
69207: LD_INT 2
69209: ARRAY
69210: PPUSH
69211: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69215: LD_VAR 0 1
69219: PUSH
69220: LD_INT 1
69222: ARRAY
69223: PPUSH
69224: LD_VAR 0 1
69228: PUSH
69229: LD_INT 2
69231: ARRAY
69232: PPUSH
69233: CALL_OW 429
// end ; end ;
69237: LD_VAR 0 1
69241: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69242: LD_EXP 44
69246: PUSH
69247: LD_EXP 66
69251: AND
69252: IFFALSE 69264
69254: GO 69256
69256: DISABLE
// YouLost (  ) ;
69257: LD_STRING 
69259: PPUSH
69260: CALL_OW 104
69264: END
// every 0 0$1 trigger StreamModeActive and sFog do
69265: LD_EXP 44
69269: PUSH
69270: LD_EXP 65
69274: AND
69275: IFFALSE 69289
69277: GO 69279
69279: DISABLE
// FogOff ( your_side ) ;
69280: LD_OWVAR 2
69284: PPUSH
69285: CALL_OW 344
69289: END
// every 0 0$1 trigger StreamModeActive and sSun do
69290: LD_EXP 44
69294: PUSH
69295: LD_EXP 67
69299: AND
69300: IFFALSE 69328
69302: GO 69304
69304: DISABLE
// begin solar_recharge_percent := 0 ;
69305: LD_ADDR_OWVAR 79
69309: PUSH
69310: LD_INT 0
69312: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69313: LD_INT 10500
69315: PPUSH
69316: CALL_OW 67
// solar_recharge_percent := 100 ;
69320: LD_ADDR_OWVAR 79
69324: PUSH
69325: LD_INT 100
69327: ST_TO_ADDR
// end ;
69328: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69329: LD_EXP 44
69333: PUSH
69334: LD_EXP 68
69338: AND
69339: IFFALSE 69578
69341: GO 69343
69343: DISABLE
69344: LD_INT 0
69346: PPUSH
69347: PPUSH
69348: PPUSH
// begin tmp := [ ] ;
69349: LD_ADDR_VAR 0 3
69353: PUSH
69354: EMPTY
69355: ST_TO_ADDR
// for i := 1 to 6 do
69356: LD_ADDR_VAR 0 1
69360: PUSH
69361: DOUBLE
69362: LD_INT 1
69364: DEC
69365: ST_TO_ADDR
69366: LD_INT 6
69368: PUSH
69369: FOR_TO
69370: IFFALSE 69475
// begin uc_nation := nation_nature ;
69372: LD_ADDR_OWVAR 21
69376: PUSH
69377: LD_INT 0
69379: ST_TO_ADDR
// uc_side := 0 ;
69380: LD_ADDR_OWVAR 20
69384: PUSH
69385: LD_INT 0
69387: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69388: LD_ADDR_OWVAR 29
69392: PUSH
69393: LD_INT 12
69395: PUSH
69396: LD_INT 12
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: ST_TO_ADDR
// hc_agressivity := 20 ;
69403: LD_ADDR_OWVAR 35
69407: PUSH
69408: LD_INT 20
69410: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69411: LD_ADDR_OWVAR 28
69415: PUSH
69416: LD_INT 17
69418: ST_TO_ADDR
// hc_gallery :=  ;
69419: LD_ADDR_OWVAR 33
69423: PUSH
69424: LD_STRING 
69426: ST_TO_ADDR
// hc_name :=  ;
69427: LD_ADDR_OWVAR 26
69431: PUSH
69432: LD_STRING 
69434: ST_TO_ADDR
// un := CreateHuman ;
69435: LD_ADDR_VAR 0 2
69439: PUSH
69440: CALL_OW 44
69444: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69445: LD_VAR 0 2
69449: PPUSH
69450: LD_INT 1
69452: PPUSH
69453: CALL_OW 51
// tmp := tmp ^ un ;
69457: LD_ADDR_VAR 0 3
69461: PUSH
69462: LD_VAR 0 3
69466: PUSH
69467: LD_VAR 0 2
69471: ADD
69472: ST_TO_ADDR
// end ;
69473: GO 69369
69475: POP
69476: POP
// repeat wait ( 0 0$1 ) ;
69477: LD_INT 35
69479: PPUSH
69480: CALL_OW 67
// for un in tmp do
69484: LD_ADDR_VAR 0 2
69488: PUSH
69489: LD_VAR 0 3
69493: PUSH
69494: FOR_IN
69495: IFFALSE 69569
// begin if IsDead ( un ) then
69497: LD_VAR 0 2
69501: PPUSH
69502: CALL_OW 301
69506: IFFALSE 69526
// begin tmp := tmp diff un ;
69508: LD_ADDR_VAR 0 3
69512: PUSH
69513: LD_VAR 0 3
69517: PUSH
69518: LD_VAR 0 2
69522: DIFF
69523: ST_TO_ADDR
// continue ;
69524: GO 69494
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69526: LD_VAR 0 2
69530: PPUSH
69531: LD_INT 3
69533: PUSH
69534: LD_INT 22
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PPUSH
69548: CALL_OW 69
69552: PPUSH
69553: LD_VAR 0 2
69557: PPUSH
69558: CALL_OW 74
69562: PPUSH
69563: CALL_OW 115
// end ;
69567: GO 69494
69569: POP
69570: POP
// until not tmp ;
69571: LD_VAR 0 3
69575: NOT
69576: IFFALSE 69477
// end ;
69578: PPOPN 3
69580: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69581: LD_EXP 44
69585: PUSH
69586: LD_EXP 69
69590: AND
69591: IFFALSE 69645
69593: GO 69595
69595: DISABLE
// begin ToLua ( displayTroll(); ) ;
69596: LD_STRING displayTroll();
69598: PPUSH
69599: CALL_OW 559
// wait ( 3 3$00 ) ;
69603: LD_INT 6300
69605: PPUSH
69606: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69610: LD_STRING hideTroll();
69612: PPUSH
69613: CALL_OW 559
// wait ( 1 1$00 ) ;
69617: LD_INT 2100
69619: PPUSH
69620: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69624: LD_STRING displayTroll();
69626: PPUSH
69627: CALL_OW 559
// wait ( 1 1$00 ) ;
69631: LD_INT 2100
69633: PPUSH
69634: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69638: LD_STRING hideTroll();
69640: PPUSH
69641: CALL_OW 559
// end ;
69645: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69646: LD_EXP 44
69650: PUSH
69651: LD_EXP 70
69655: AND
69656: IFFALSE 69719
69658: GO 69660
69660: DISABLE
69661: LD_INT 0
69663: PPUSH
// begin p := 0 ;
69664: LD_ADDR_VAR 0 1
69668: PUSH
69669: LD_INT 0
69671: ST_TO_ADDR
// repeat game_speed := 1 ;
69672: LD_ADDR_OWVAR 65
69676: PUSH
69677: LD_INT 1
69679: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69680: LD_INT 35
69682: PPUSH
69683: CALL_OW 67
// p := p + 1 ;
69687: LD_ADDR_VAR 0 1
69691: PUSH
69692: LD_VAR 0 1
69696: PUSH
69697: LD_INT 1
69699: PLUS
69700: ST_TO_ADDR
// until p >= 60 ;
69701: LD_VAR 0 1
69705: PUSH
69706: LD_INT 60
69708: GREATEREQUAL
69709: IFFALSE 69672
// game_speed := 4 ;
69711: LD_ADDR_OWVAR 65
69715: PUSH
69716: LD_INT 4
69718: ST_TO_ADDR
// end ;
69719: PPOPN 1
69721: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69722: LD_EXP 44
69726: PUSH
69727: LD_EXP 71
69731: AND
69732: IFFALSE 69878
69734: GO 69736
69736: DISABLE
69737: LD_INT 0
69739: PPUSH
69740: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69741: LD_ADDR_VAR 0 1
69745: PUSH
69746: LD_INT 22
69748: PUSH
69749: LD_OWVAR 2
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 2
69760: PUSH
69761: LD_INT 30
69763: PUSH
69764: LD_INT 0
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 30
69773: PUSH
69774: LD_INT 1
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PPUSH
69790: CALL_OW 69
69794: ST_TO_ADDR
// if not depot then
69795: LD_VAR 0 1
69799: NOT
69800: IFFALSE 69804
// exit ;
69802: GO 69878
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69804: LD_ADDR_VAR 0 2
69808: PUSH
69809: LD_VAR 0 1
69813: PUSH
69814: LD_INT 1
69816: PPUSH
69817: LD_VAR 0 1
69821: PPUSH
69822: CALL_OW 12
69826: ARRAY
69827: PPUSH
69828: CALL_OW 274
69832: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69833: LD_VAR 0 2
69837: PPUSH
69838: LD_INT 1
69840: PPUSH
69841: LD_INT 0
69843: PPUSH
69844: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69848: LD_VAR 0 2
69852: PPUSH
69853: LD_INT 2
69855: PPUSH
69856: LD_INT 0
69858: PPUSH
69859: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69863: LD_VAR 0 2
69867: PPUSH
69868: LD_INT 3
69870: PPUSH
69871: LD_INT 0
69873: PPUSH
69874: CALL_OW 277
// end ;
69878: PPOPN 2
69880: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69881: LD_EXP 44
69885: PUSH
69886: LD_EXP 72
69890: AND
69891: IFFALSE 69988
69893: GO 69895
69895: DISABLE
69896: LD_INT 0
69898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69899: LD_ADDR_VAR 0 1
69903: PUSH
69904: LD_INT 22
69906: PUSH
69907: LD_OWVAR 2
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 21
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 3
69928: PUSH
69929: LD_INT 23
69931: PUSH
69932: LD_INT 0
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: LIST
69947: PPUSH
69948: CALL_OW 69
69952: ST_TO_ADDR
// if not tmp then
69953: LD_VAR 0 1
69957: NOT
69958: IFFALSE 69962
// exit ;
69960: GO 69988
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69962: LD_VAR 0 1
69966: PUSH
69967: LD_INT 1
69969: PPUSH
69970: LD_VAR 0 1
69974: PPUSH
69975: CALL_OW 12
69979: ARRAY
69980: PPUSH
69981: LD_INT 200
69983: PPUSH
69984: CALL_OW 234
// end ;
69988: PPOPN 1
69990: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69991: LD_EXP 44
69995: PUSH
69996: LD_EXP 73
70000: AND
70001: IFFALSE 70080
70003: GO 70005
70005: DISABLE
70006: LD_INT 0
70008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70009: LD_ADDR_VAR 0 1
70013: PUSH
70014: LD_INT 22
70016: PUSH
70017: LD_OWVAR 2
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 21
70028: PUSH
70029: LD_INT 2
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PPUSH
70040: CALL_OW 69
70044: ST_TO_ADDR
// if not tmp then
70045: LD_VAR 0 1
70049: NOT
70050: IFFALSE 70054
// exit ;
70052: GO 70080
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70054: LD_VAR 0 1
70058: PUSH
70059: LD_INT 1
70061: PPUSH
70062: LD_VAR 0 1
70066: PPUSH
70067: CALL_OW 12
70071: ARRAY
70072: PPUSH
70073: LD_INT 60
70075: PPUSH
70076: CALL_OW 234
// end ;
70080: PPOPN 1
70082: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70083: LD_EXP 44
70087: PUSH
70088: LD_EXP 74
70092: AND
70093: IFFALSE 70192
70095: GO 70097
70097: DISABLE
70098: LD_INT 0
70100: PPUSH
70101: PPUSH
// begin enable ;
70102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70103: LD_ADDR_VAR 0 1
70107: PUSH
70108: LD_INT 22
70110: PUSH
70111: LD_OWVAR 2
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 61
70122: PUSH
70123: EMPTY
70124: LIST
70125: PUSH
70126: LD_INT 33
70128: PUSH
70129: LD_INT 2
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: LIST
70140: PPUSH
70141: CALL_OW 69
70145: ST_TO_ADDR
// if not tmp then
70146: LD_VAR 0 1
70150: NOT
70151: IFFALSE 70155
// exit ;
70153: GO 70192
// for i in tmp do
70155: LD_ADDR_VAR 0 2
70159: PUSH
70160: LD_VAR 0 1
70164: PUSH
70165: FOR_IN
70166: IFFALSE 70190
// if IsControledBy ( i ) then
70168: LD_VAR 0 2
70172: PPUSH
70173: CALL_OW 312
70177: IFFALSE 70188
// ComUnlink ( i ) ;
70179: LD_VAR 0 2
70183: PPUSH
70184: CALL_OW 136
70188: GO 70165
70190: POP
70191: POP
// end ;
70192: PPOPN 2
70194: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70195: LD_EXP 44
70199: PUSH
70200: LD_EXP 75
70204: AND
70205: IFFALSE 70345
70207: GO 70209
70209: DISABLE
70210: LD_INT 0
70212: PPUSH
70213: PPUSH
// begin ToLua ( displayPowell(); ) ;
70214: LD_STRING displayPowell();
70216: PPUSH
70217: CALL_OW 559
// uc_side := 0 ;
70221: LD_ADDR_OWVAR 20
70225: PUSH
70226: LD_INT 0
70228: ST_TO_ADDR
// uc_nation := 2 ;
70229: LD_ADDR_OWVAR 21
70233: PUSH
70234: LD_INT 2
70236: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70237: LD_ADDR_OWVAR 37
70241: PUSH
70242: LD_INT 14
70244: ST_TO_ADDR
// vc_engine := engine_siberite ;
70245: LD_ADDR_OWVAR 39
70249: PUSH
70250: LD_INT 3
70252: ST_TO_ADDR
// vc_control := control_apeman ;
70253: LD_ADDR_OWVAR 38
70257: PUSH
70258: LD_INT 5
70260: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70261: LD_ADDR_OWVAR 40
70265: PUSH
70266: LD_INT 29
70268: ST_TO_ADDR
// un := CreateVehicle ;
70269: LD_ADDR_VAR 0 2
70273: PUSH
70274: CALL_OW 45
70278: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70279: LD_VAR 0 2
70283: PPUSH
70284: LD_INT 1
70286: PPUSH
70287: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70291: LD_INT 35
70293: PPUSH
70294: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70298: LD_VAR 0 2
70302: PPUSH
70303: LD_INT 22
70305: PUSH
70306: LD_OWVAR 2
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PPUSH
70315: CALL_OW 69
70319: PPUSH
70320: LD_VAR 0 2
70324: PPUSH
70325: CALL_OW 74
70329: PPUSH
70330: CALL_OW 115
// until IsDead ( un ) ;
70334: LD_VAR 0 2
70338: PPUSH
70339: CALL_OW 301
70343: IFFALSE 70291
// end ;
70345: PPOPN 2
70347: END
// every 0 0$1 trigger StreamModeActive and sStu do
70348: LD_EXP 44
70352: PUSH
70353: LD_EXP 83
70357: AND
70358: IFFALSE 70374
70360: GO 70362
70362: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70363: LD_STRING displayStucuk();
70365: PPUSH
70366: CALL_OW 559
// ResetFog ;
70370: CALL_OW 335
// end ;
70374: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70375: LD_EXP 44
70379: PUSH
70380: LD_EXP 76
70384: AND
70385: IFFALSE 70526
70387: GO 70389
70389: DISABLE
70390: LD_INT 0
70392: PPUSH
70393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70394: LD_ADDR_VAR 0 2
70398: PUSH
70399: LD_INT 22
70401: PUSH
70402: LD_OWVAR 2
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 21
70413: PUSH
70414: LD_INT 1
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PPUSH
70425: CALL_OW 69
70429: ST_TO_ADDR
// if not tmp then
70430: LD_VAR 0 2
70434: NOT
70435: IFFALSE 70439
// exit ;
70437: GO 70526
// un := tmp [ rand ( 1 , tmp ) ] ;
70439: LD_ADDR_VAR 0 1
70443: PUSH
70444: LD_VAR 0 2
70448: PUSH
70449: LD_INT 1
70451: PPUSH
70452: LD_VAR 0 2
70456: PPUSH
70457: CALL_OW 12
70461: ARRAY
70462: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70463: LD_VAR 0 1
70467: PPUSH
70468: LD_INT 0
70470: PPUSH
70471: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70475: LD_VAR 0 1
70479: PPUSH
70480: LD_OWVAR 3
70484: PUSH
70485: LD_VAR 0 1
70489: DIFF
70490: PPUSH
70491: LD_VAR 0 1
70495: PPUSH
70496: CALL_OW 74
70500: PPUSH
70501: CALL_OW 115
// wait ( 0 0$20 ) ;
70505: LD_INT 700
70507: PPUSH
70508: CALL_OW 67
// SetSide ( un , your_side ) ;
70512: LD_VAR 0 1
70516: PPUSH
70517: LD_OWVAR 2
70521: PPUSH
70522: CALL_OW 235
// end ;
70526: PPOPN 2
70528: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70529: LD_EXP 44
70533: PUSH
70534: LD_EXP 77
70538: AND
70539: IFFALSE 70645
70541: GO 70543
70543: DISABLE
70544: LD_INT 0
70546: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70547: LD_ADDR_VAR 0 1
70551: PUSH
70552: LD_INT 22
70554: PUSH
70555: LD_OWVAR 2
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 2
70566: PUSH
70567: LD_INT 30
70569: PUSH
70570: LD_INT 0
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 30
70579: PUSH
70580: LD_INT 1
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: LIST
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PPUSH
70596: CALL_OW 69
70600: ST_TO_ADDR
// if not depot then
70601: LD_VAR 0 1
70605: NOT
70606: IFFALSE 70610
// exit ;
70608: GO 70645
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70610: LD_VAR 0 1
70614: PUSH
70615: LD_INT 1
70617: ARRAY
70618: PPUSH
70619: CALL_OW 250
70623: PPUSH
70624: LD_VAR 0 1
70628: PUSH
70629: LD_INT 1
70631: ARRAY
70632: PPUSH
70633: CALL_OW 251
70637: PPUSH
70638: LD_INT 70
70640: PPUSH
70641: CALL_OW 495
// end ;
70645: PPOPN 1
70647: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70648: LD_EXP 44
70652: PUSH
70653: LD_EXP 78
70657: AND
70658: IFFALSE 70869
70660: GO 70662
70662: DISABLE
70663: LD_INT 0
70665: PPUSH
70666: PPUSH
70667: PPUSH
70668: PPUSH
70669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70670: LD_ADDR_VAR 0 5
70674: PUSH
70675: LD_INT 22
70677: PUSH
70678: LD_OWVAR 2
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 21
70689: PUSH
70690: LD_INT 1
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PPUSH
70701: CALL_OW 69
70705: ST_TO_ADDR
// if not tmp then
70706: LD_VAR 0 5
70710: NOT
70711: IFFALSE 70715
// exit ;
70713: GO 70869
// for i in tmp do
70715: LD_ADDR_VAR 0 1
70719: PUSH
70720: LD_VAR 0 5
70724: PUSH
70725: FOR_IN
70726: IFFALSE 70867
// begin d := rand ( 0 , 5 ) ;
70728: LD_ADDR_VAR 0 4
70732: PUSH
70733: LD_INT 0
70735: PPUSH
70736: LD_INT 5
70738: PPUSH
70739: CALL_OW 12
70743: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70744: LD_ADDR_VAR 0 2
70748: PUSH
70749: LD_VAR 0 1
70753: PPUSH
70754: CALL_OW 250
70758: PPUSH
70759: LD_VAR 0 4
70763: PPUSH
70764: LD_INT 3
70766: PPUSH
70767: LD_INT 12
70769: PPUSH
70770: CALL_OW 12
70774: PPUSH
70775: CALL_OW 272
70779: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70780: LD_ADDR_VAR 0 3
70784: PUSH
70785: LD_VAR 0 1
70789: PPUSH
70790: CALL_OW 251
70794: PPUSH
70795: LD_VAR 0 4
70799: PPUSH
70800: LD_INT 3
70802: PPUSH
70803: LD_INT 12
70805: PPUSH
70806: CALL_OW 12
70810: PPUSH
70811: CALL_OW 273
70815: ST_TO_ADDR
// if ValidHex ( x , y ) then
70816: LD_VAR 0 2
70820: PPUSH
70821: LD_VAR 0 3
70825: PPUSH
70826: CALL_OW 488
70830: IFFALSE 70865
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70832: LD_VAR 0 1
70836: PPUSH
70837: LD_VAR 0 2
70841: PPUSH
70842: LD_VAR 0 3
70846: PPUSH
70847: LD_INT 3
70849: PPUSH
70850: LD_INT 6
70852: PPUSH
70853: CALL_OW 12
70857: PPUSH
70858: LD_INT 1
70860: PPUSH
70861: CALL_OW 483
// end ;
70865: GO 70725
70867: POP
70868: POP
// end ;
70869: PPOPN 5
70871: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70872: LD_EXP 44
70876: PUSH
70877: LD_EXP 79
70881: AND
70882: IFFALSE 70976
70884: GO 70886
70886: DISABLE
70887: LD_INT 0
70889: PPUSH
70890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70891: LD_ADDR_VAR 0 2
70895: PUSH
70896: LD_INT 22
70898: PUSH
70899: LD_OWVAR 2
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 32
70910: PUSH
70911: LD_INT 1
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 21
70920: PUSH
70921: LD_INT 2
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: LIST
70932: PPUSH
70933: CALL_OW 69
70937: ST_TO_ADDR
// if not tmp then
70938: LD_VAR 0 2
70942: NOT
70943: IFFALSE 70947
// exit ;
70945: GO 70976
// for i in tmp do
70947: LD_ADDR_VAR 0 1
70951: PUSH
70952: LD_VAR 0 2
70956: PUSH
70957: FOR_IN
70958: IFFALSE 70974
// SetFuel ( i , 0 ) ;
70960: LD_VAR 0 1
70964: PPUSH
70965: LD_INT 0
70967: PPUSH
70968: CALL_OW 240
70972: GO 70957
70974: POP
70975: POP
// end ;
70976: PPOPN 2
70978: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70979: LD_EXP 44
70983: PUSH
70984: LD_EXP 80
70988: AND
70989: IFFALSE 71055
70991: GO 70993
70993: DISABLE
70994: LD_INT 0
70996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70997: LD_ADDR_VAR 0 1
71001: PUSH
71002: LD_INT 22
71004: PUSH
71005: LD_OWVAR 2
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 30
71016: PUSH
71017: LD_INT 29
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PPUSH
71028: CALL_OW 69
71032: ST_TO_ADDR
// if not tmp then
71033: LD_VAR 0 1
71037: NOT
71038: IFFALSE 71042
// exit ;
71040: GO 71055
// DestroyUnit ( tmp [ 1 ] ) ;
71042: LD_VAR 0 1
71046: PUSH
71047: LD_INT 1
71049: ARRAY
71050: PPUSH
71051: CALL_OW 65
// end ;
71055: PPOPN 1
71057: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71058: LD_EXP 44
71062: PUSH
71063: LD_EXP 82
71067: AND
71068: IFFALSE 71197
71070: GO 71072
71072: DISABLE
71073: LD_INT 0
71075: PPUSH
// begin uc_side := 0 ;
71076: LD_ADDR_OWVAR 20
71080: PUSH
71081: LD_INT 0
71083: ST_TO_ADDR
// uc_nation := nation_arabian ;
71084: LD_ADDR_OWVAR 21
71088: PUSH
71089: LD_INT 2
71091: ST_TO_ADDR
// hc_gallery :=  ;
71092: LD_ADDR_OWVAR 33
71096: PUSH
71097: LD_STRING 
71099: ST_TO_ADDR
// hc_name :=  ;
71100: LD_ADDR_OWVAR 26
71104: PUSH
71105: LD_STRING 
71107: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71108: LD_INT 1
71110: PPUSH
71111: LD_INT 11
71113: PPUSH
71114: LD_INT 10
71116: PPUSH
71117: CALL_OW 380
// un := CreateHuman ;
71121: LD_ADDR_VAR 0 1
71125: PUSH
71126: CALL_OW 44
71130: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71131: LD_VAR 0 1
71135: PPUSH
71136: LD_INT 1
71138: PPUSH
71139: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71143: LD_INT 35
71145: PPUSH
71146: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71150: LD_VAR 0 1
71154: PPUSH
71155: LD_INT 22
71157: PUSH
71158: LD_OWVAR 2
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PPUSH
71167: CALL_OW 69
71171: PPUSH
71172: LD_VAR 0 1
71176: PPUSH
71177: CALL_OW 74
71181: PPUSH
71182: CALL_OW 115
// until IsDead ( un ) ;
71186: LD_VAR 0 1
71190: PPUSH
71191: CALL_OW 301
71195: IFFALSE 71143
// end ;
71197: PPOPN 1
71199: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71200: LD_EXP 44
71204: PUSH
71205: LD_EXP 84
71209: AND
71210: IFFALSE 71222
71212: GO 71214
71214: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71215: LD_STRING earthquake(getX(game), 0, 32)
71217: PPUSH
71218: CALL_OW 559
71222: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71223: LD_EXP 44
71227: PUSH
71228: LD_EXP 85
71232: AND
71233: IFFALSE 71324
71235: GO 71237
71237: DISABLE
71238: LD_INT 0
71240: PPUSH
// begin enable ;
71241: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71242: LD_ADDR_VAR 0 1
71246: PUSH
71247: LD_INT 22
71249: PUSH
71250: LD_OWVAR 2
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 21
71261: PUSH
71262: LD_INT 2
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 33
71271: PUSH
71272: LD_INT 3
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: LIST
71283: PPUSH
71284: CALL_OW 69
71288: ST_TO_ADDR
// if not tmp then
71289: LD_VAR 0 1
71293: NOT
71294: IFFALSE 71298
// exit ;
71296: GO 71324
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71298: LD_VAR 0 1
71302: PUSH
71303: LD_INT 1
71305: PPUSH
71306: LD_VAR 0 1
71310: PPUSH
71311: CALL_OW 12
71315: ARRAY
71316: PPUSH
71317: LD_INT 1
71319: PPUSH
71320: CALL_OW 234
// end ;
71324: PPOPN 1
71326: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71327: LD_EXP 44
71331: PUSH
71332: LD_EXP 86
71336: AND
71337: IFFALSE 71478
71339: GO 71341
71341: DISABLE
71342: LD_INT 0
71344: PPUSH
71345: PPUSH
71346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71347: LD_ADDR_VAR 0 3
71351: PUSH
71352: LD_INT 22
71354: PUSH
71355: LD_OWVAR 2
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 25
71366: PUSH
71367: LD_INT 1
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PPUSH
71378: CALL_OW 69
71382: ST_TO_ADDR
// if not tmp then
71383: LD_VAR 0 3
71387: NOT
71388: IFFALSE 71392
// exit ;
71390: GO 71478
// un := tmp [ rand ( 1 , tmp ) ] ;
71392: LD_ADDR_VAR 0 2
71396: PUSH
71397: LD_VAR 0 3
71401: PUSH
71402: LD_INT 1
71404: PPUSH
71405: LD_VAR 0 3
71409: PPUSH
71410: CALL_OW 12
71414: ARRAY
71415: ST_TO_ADDR
// if Crawls ( un ) then
71416: LD_VAR 0 2
71420: PPUSH
71421: CALL_OW 318
71425: IFFALSE 71436
// ComWalk ( un ) ;
71427: LD_VAR 0 2
71431: PPUSH
71432: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71436: LD_VAR 0 2
71440: PPUSH
71441: LD_INT 9
71443: PPUSH
71444: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71448: LD_INT 28
71450: PPUSH
71451: LD_OWVAR 2
71455: PPUSH
71456: LD_INT 2
71458: PPUSH
71459: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71463: LD_INT 29
71465: PPUSH
71466: LD_OWVAR 2
71470: PPUSH
71471: LD_INT 2
71473: PPUSH
71474: CALL_OW 322
// end ;
71478: PPOPN 3
71480: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71481: LD_EXP 44
71485: PUSH
71486: LD_EXP 87
71490: AND
71491: IFFALSE 71602
71493: GO 71495
71495: DISABLE
71496: LD_INT 0
71498: PPUSH
71499: PPUSH
71500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71501: LD_ADDR_VAR 0 3
71505: PUSH
71506: LD_INT 22
71508: PUSH
71509: LD_OWVAR 2
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 25
71520: PUSH
71521: LD_INT 1
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PPUSH
71532: CALL_OW 69
71536: ST_TO_ADDR
// if not tmp then
71537: LD_VAR 0 3
71541: NOT
71542: IFFALSE 71546
// exit ;
71544: GO 71602
// un := tmp [ rand ( 1 , tmp ) ] ;
71546: LD_ADDR_VAR 0 2
71550: PUSH
71551: LD_VAR 0 3
71555: PUSH
71556: LD_INT 1
71558: PPUSH
71559: LD_VAR 0 3
71563: PPUSH
71564: CALL_OW 12
71568: ARRAY
71569: ST_TO_ADDR
// if Crawls ( un ) then
71570: LD_VAR 0 2
71574: PPUSH
71575: CALL_OW 318
71579: IFFALSE 71590
// ComWalk ( un ) ;
71581: LD_VAR 0 2
71585: PPUSH
71586: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71590: LD_VAR 0 2
71594: PPUSH
71595: LD_INT 8
71597: PPUSH
71598: CALL_OW 336
// end ;
71602: PPOPN 3
71604: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71605: LD_EXP 44
71609: PUSH
71610: LD_EXP 88
71614: AND
71615: IFFALSE 71759
71617: GO 71619
71619: DISABLE
71620: LD_INT 0
71622: PPUSH
71623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71624: LD_ADDR_VAR 0 2
71628: PUSH
71629: LD_INT 22
71631: PUSH
71632: LD_OWVAR 2
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 21
71643: PUSH
71644: LD_INT 2
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 2
71653: PUSH
71654: LD_INT 34
71656: PUSH
71657: LD_INT 12
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 34
71666: PUSH
71667: LD_INT 51
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 34
71676: PUSH
71677: LD_INT 32
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: LIST
71694: PPUSH
71695: CALL_OW 69
71699: ST_TO_ADDR
// if not tmp then
71700: LD_VAR 0 2
71704: NOT
71705: IFFALSE 71709
// exit ;
71707: GO 71759
// for i in tmp do
71709: LD_ADDR_VAR 0 1
71713: PUSH
71714: LD_VAR 0 2
71718: PUSH
71719: FOR_IN
71720: IFFALSE 71757
// if GetCargo ( i , mat_artifact ) = 0 then
71722: LD_VAR 0 1
71726: PPUSH
71727: LD_INT 4
71729: PPUSH
71730: CALL_OW 289
71734: PUSH
71735: LD_INT 0
71737: EQUAL
71738: IFFALSE 71755
// SetCargo ( i , mat_siberit , 100 ) ;
71740: LD_VAR 0 1
71744: PPUSH
71745: LD_INT 3
71747: PPUSH
71748: LD_INT 100
71750: PPUSH
71751: CALL_OW 290
71755: GO 71719
71757: POP
71758: POP
// end ;
71759: PPOPN 2
71761: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71762: LD_EXP 44
71766: PUSH
71767: LD_EXP 89
71771: AND
71772: IFFALSE 71955
71774: GO 71776
71776: DISABLE
71777: LD_INT 0
71779: PPUSH
71780: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71781: LD_ADDR_VAR 0 2
71785: PUSH
71786: LD_INT 22
71788: PUSH
71789: LD_OWVAR 2
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PPUSH
71798: CALL_OW 69
71802: ST_TO_ADDR
// if not tmp then
71803: LD_VAR 0 2
71807: NOT
71808: IFFALSE 71812
// exit ;
71810: GO 71955
// for i := 1 to 2 do
71812: LD_ADDR_VAR 0 1
71816: PUSH
71817: DOUBLE
71818: LD_INT 1
71820: DEC
71821: ST_TO_ADDR
71822: LD_INT 2
71824: PUSH
71825: FOR_TO
71826: IFFALSE 71953
// begin uc_side := your_side ;
71828: LD_ADDR_OWVAR 20
71832: PUSH
71833: LD_OWVAR 2
71837: ST_TO_ADDR
// uc_nation := nation_american ;
71838: LD_ADDR_OWVAR 21
71842: PUSH
71843: LD_INT 1
71845: ST_TO_ADDR
// vc_chassis := us_morphling ;
71846: LD_ADDR_OWVAR 37
71850: PUSH
71851: LD_INT 5
71853: ST_TO_ADDR
// vc_engine := engine_siberite ;
71854: LD_ADDR_OWVAR 39
71858: PUSH
71859: LD_INT 3
71861: ST_TO_ADDR
// vc_control := control_computer ;
71862: LD_ADDR_OWVAR 38
71866: PUSH
71867: LD_INT 3
71869: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71870: LD_ADDR_OWVAR 40
71874: PUSH
71875: LD_INT 10
71877: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71878: LD_VAR 0 2
71882: PUSH
71883: LD_INT 1
71885: ARRAY
71886: PPUSH
71887: CALL_OW 310
71891: NOT
71892: IFFALSE 71939
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71894: CALL_OW 45
71898: PPUSH
71899: LD_VAR 0 2
71903: PUSH
71904: LD_INT 1
71906: ARRAY
71907: PPUSH
71908: CALL_OW 250
71912: PPUSH
71913: LD_VAR 0 2
71917: PUSH
71918: LD_INT 1
71920: ARRAY
71921: PPUSH
71922: CALL_OW 251
71926: PPUSH
71927: LD_INT 12
71929: PPUSH
71930: LD_INT 1
71932: PPUSH
71933: CALL_OW 50
71937: GO 71951
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71939: CALL_OW 45
71943: PPUSH
71944: LD_INT 1
71946: PPUSH
71947: CALL_OW 51
// end ;
71951: GO 71825
71953: POP
71954: POP
// end ;
71955: PPOPN 2
71957: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71958: LD_EXP 44
71962: PUSH
71963: LD_EXP 90
71967: AND
71968: IFFALSE 72190
71970: GO 71972
71972: DISABLE
71973: LD_INT 0
71975: PPUSH
71976: PPUSH
71977: PPUSH
71978: PPUSH
71979: PPUSH
71980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71981: LD_ADDR_VAR 0 6
71985: PUSH
71986: LD_INT 22
71988: PUSH
71989: LD_OWVAR 2
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 21
72000: PUSH
72001: LD_INT 1
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 3
72010: PUSH
72011: LD_INT 23
72013: PUSH
72014: LD_INT 0
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: LIST
72029: PPUSH
72030: CALL_OW 69
72034: ST_TO_ADDR
// if not tmp then
72035: LD_VAR 0 6
72039: NOT
72040: IFFALSE 72044
// exit ;
72042: GO 72190
// s1 := rand ( 1 , 4 ) ;
72044: LD_ADDR_VAR 0 2
72048: PUSH
72049: LD_INT 1
72051: PPUSH
72052: LD_INT 4
72054: PPUSH
72055: CALL_OW 12
72059: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72060: LD_ADDR_VAR 0 4
72064: PUSH
72065: LD_VAR 0 6
72069: PUSH
72070: LD_INT 1
72072: ARRAY
72073: PPUSH
72074: LD_VAR 0 2
72078: PPUSH
72079: CALL_OW 259
72083: ST_TO_ADDR
// if s1 = 1 then
72084: LD_VAR 0 2
72088: PUSH
72089: LD_INT 1
72091: EQUAL
72092: IFFALSE 72112
// s2 := rand ( 2 , 4 ) else
72094: LD_ADDR_VAR 0 3
72098: PUSH
72099: LD_INT 2
72101: PPUSH
72102: LD_INT 4
72104: PPUSH
72105: CALL_OW 12
72109: ST_TO_ADDR
72110: GO 72120
// s2 := 1 ;
72112: LD_ADDR_VAR 0 3
72116: PUSH
72117: LD_INT 1
72119: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72120: LD_ADDR_VAR 0 5
72124: PUSH
72125: LD_VAR 0 6
72129: PUSH
72130: LD_INT 1
72132: ARRAY
72133: PPUSH
72134: LD_VAR 0 3
72138: PPUSH
72139: CALL_OW 259
72143: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72144: LD_VAR 0 6
72148: PUSH
72149: LD_INT 1
72151: ARRAY
72152: PPUSH
72153: LD_VAR 0 2
72157: PPUSH
72158: LD_VAR 0 5
72162: PPUSH
72163: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72167: LD_VAR 0 6
72171: PUSH
72172: LD_INT 1
72174: ARRAY
72175: PPUSH
72176: LD_VAR 0 3
72180: PPUSH
72181: LD_VAR 0 4
72185: PPUSH
72186: CALL_OW 237
// end ;
72190: PPOPN 6
72192: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72193: LD_EXP 44
72197: PUSH
72198: LD_EXP 91
72202: AND
72203: IFFALSE 72282
72205: GO 72207
72207: DISABLE
72208: LD_INT 0
72210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72211: LD_ADDR_VAR 0 1
72215: PUSH
72216: LD_INT 22
72218: PUSH
72219: LD_OWVAR 2
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 30
72230: PUSH
72231: LD_INT 3
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PPUSH
72242: CALL_OW 69
72246: ST_TO_ADDR
// if not tmp then
72247: LD_VAR 0 1
72251: NOT
72252: IFFALSE 72256
// exit ;
72254: GO 72282
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72256: LD_VAR 0 1
72260: PUSH
72261: LD_INT 1
72263: PPUSH
72264: LD_VAR 0 1
72268: PPUSH
72269: CALL_OW 12
72273: ARRAY
72274: PPUSH
72275: LD_INT 1
72277: PPUSH
72278: CALL_OW 234
// end ;
72282: PPOPN 1
72284: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72285: LD_EXP 44
72289: PUSH
72290: LD_EXP 92
72294: AND
72295: IFFALSE 72407
72297: GO 72299
72299: DISABLE
72300: LD_INT 0
72302: PPUSH
72303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72304: LD_ADDR_VAR 0 2
72308: PUSH
72309: LD_INT 22
72311: PUSH
72312: LD_OWVAR 2
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 2
72323: PUSH
72324: LD_INT 30
72326: PUSH
72327: LD_INT 27
72329: PUSH
72330: EMPTY
72331: LIST
72332: LIST
72333: PUSH
72334: LD_INT 30
72336: PUSH
72337: LD_INT 26
72339: PUSH
72340: EMPTY
72341: LIST
72342: LIST
72343: PUSH
72344: LD_INT 30
72346: PUSH
72347: LD_INT 28
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PPUSH
72364: CALL_OW 69
72368: ST_TO_ADDR
// if not tmp then
72369: LD_VAR 0 2
72373: NOT
72374: IFFALSE 72378
// exit ;
72376: GO 72407
// for i in tmp do
72378: LD_ADDR_VAR 0 1
72382: PUSH
72383: LD_VAR 0 2
72387: PUSH
72388: FOR_IN
72389: IFFALSE 72405
// SetLives ( i , 1 ) ;
72391: LD_VAR 0 1
72395: PPUSH
72396: LD_INT 1
72398: PPUSH
72399: CALL_OW 234
72403: GO 72388
72405: POP
72406: POP
// end ;
72407: PPOPN 2
72409: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72410: LD_EXP 44
72414: PUSH
72415: LD_EXP 93
72419: AND
72420: IFFALSE 72707
72422: GO 72424
72424: DISABLE
72425: LD_INT 0
72427: PPUSH
72428: PPUSH
72429: PPUSH
// begin i := rand ( 1 , 7 ) ;
72430: LD_ADDR_VAR 0 1
72434: PUSH
72435: LD_INT 1
72437: PPUSH
72438: LD_INT 7
72440: PPUSH
72441: CALL_OW 12
72445: ST_TO_ADDR
// case i of 1 :
72446: LD_VAR 0 1
72450: PUSH
72451: LD_INT 1
72453: DOUBLE
72454: EQUAL
72455: IFTRUE 72459
72457: GO 72469
72459: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72460: LD_STRING earthquake(getX(game), 0, 32)
72462: PPUSH
72463: CALL_OW 559
72467: GO 72707
72469: LD_INT 2
72471: DOUBLE
72472: EQUAL
72473: IFTRUE 72477
72475: GO 72491
72477: POP
// begin ToLua ( displayStucuk(); ) ;
72478: LD_STRING displayStucuk();
72480: PPUSH
72481: CALL_OW 559
// ResetFog ;
72485: CALL_OW 335
// end ; 3 :
72489: GO 72707
72491: LD_INT 3
72493: DOUBLE
72494: EQUAL
72495: IFTRUE 72499
72497: GO 72603
72499: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72500: LD_ADDR_VAR 0 2
72504: PUSH
72505: LD_INT 22
72507: PUSH
72508: LD_OWVAR 2
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 25
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PPUSH
72531: CALL_OW 69
72535: ST_TO_ADDR
// if not tmp then
72536: LD_VAR 0 2
72540: NOT
72541: IFFALSE 72545
// exit ;
72543: GO 72707
// un := tmp [ rand ( 1 , tmp ) ] ;
72545: LD_ADDR_VAR 0 3
72549: PUSH
72550: LD_VAR 0 2
72554: PUSH
72555: LD_INT 1
72557: PPUSH
72558: LD_VAR 0 2
72562: PPUSH
72563: CALL_OW 12
72567: ARRAY
72568: ST_TO_ADDR
// if Crawls ( un ) then
72569: LD_VAR 0 3
72573: PPUSH
72574: CALL_OW 318
72578: IFFALSE 72589
// ComWalk ( un ) ;
72580: LD_VAR 0 3
72584: PPUSH
72585: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72589: LD_VAR 0 3
72593: PPUSH
72594: LD_INT 8
72596: PPUSH
72597: CALL_OW 336
// end ; 4 :
72601: GO 72707
72603: LD_INT 4
72605: DOUBLE
72606: EQUAL
72607: IFTRUE 72611
72609: GO 72685
72611: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72612: LD_ADDR_VAR 0 2
72616: PUSH
72617: LD_INT 22
72619: PUSH
72620: LD_OWVAR 2
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 30
72631: PUSH
72632: LD_INT 29
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PPUSH
72643: CALL_OW 69
72647: ST_TO_ADDR
// if not tmp then
72648: LD_VAR 0 2
72652: NOT
72653: IFFALSE 72657
// exit ;
72655: GO 72707
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72657: LD_VAR 0 2
72661: PUSH
72662: LD_INT 1
72664: ARRAY
72665: PPUSH
72666: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72670: LD_VAR 0 2
72674: PUSH
72675: LD_INT 1
72677: ARRAY
72678: PPUSH
72679: CALL_OW 65
// end ; 5 .. 7 :
72683: GO 72707
72685: LD_INT 5
72687: DOUBLE
72688: GREATEREQUAL
72689: IFFALSE 72697
72691: LD_INT 7
72693: DOUBLE
72694: LESSEQUAL
72695: IFTRUE 72699
72697: GO 72706
72699: POP
// StreamSibBomb ; end ;
72700: CALL 68944 0 0
72704: GO 72707
72706: POP
// end ;
72707: PPOPN 3
72709: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72710: LD_EXP 44
72714: PUSH
72715: LD_EXP 94
72719: AND
72720: IFFALSE 72876
72722: GO 72724
72724: DISABLE
72725: LD_INT 0
72727: PPUSH
72728: PPUSH
72729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72730: LD_ADDR_VAR 0 2
72734: PUSH
72735: LD_INT 81
72737: PUSH
72738: LD_OWVAR 2
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 2
72749: PUSH
72750: LD_INT 21
72752: PUSH
72753: LD_INT 1
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 21
72762: PUSH
72763: LD_INT 2
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: LIST
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PPUSH
72779: CALL_OW 69
72783: ST_TO_ADDR
// if not tmp then
72784: LD_VAR 0 2
72788: NOT
72789: IFFALSE 72793
// exit ;
72791: GO 72876
// p := 0 ;
72793: LD_ADDR_VAR 0 3
72797: PUSH
72798: LD_INT 0
72800: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72801: LD_INT 35
72803: PPUSH
72804: CALL_OW 67
// p := p + 1 ;
72808: LD_ADDR_VAR 0 3
72812: PUSH
72813: LD_VAR 0 3
72817: PUSH
72818: LD_INT 1
72820: PLUS
72821: ST_TO_ADDR
// for i in tmp do
72822: LD_ADDR_VAR 0 1
72826: PUSH
72827: LD_VAR 0 2
72831: PUSH
72832: FOR_IN
72833: IFFALSE 72864
// if GetLives ( i ) < 1000 then
72835: LD_VAR 0 1
72839: PPUSH
72840: CALL_OW 256
72844: PUSH
72845: LD_INT 1000
72847: LESS
72848: IFFALSE 72862
// SetLives ( i , 1000 ) ;
72850: LD_VAR 0 1
72854: PPUSH
72855: LD_INT 1000
72857: PPUSH
72858: CALL_OW 234
72862: GO 72832
72864: POP
72865: POP
// until p > 20 ;
72866: LD_VAR 0 3
72870: PUSH
72871: LD_INT 20
72873: GREATER
72874: IFFALSE 72801
// end ;
72876: PPOPN 3
72878: END
// every 0 0$1 trigger StreamModeActive and sTime do
72879: LD_EXP 44
72883: PUSH
72884: LD_EXP 95
72888: AND
72889: IFFALSE 72924
72891: GO 72893
72893: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72894: LD_INT 28
72896: PPUSH
72897: LD_OWVAR 2
72901: PPUSH
72902: LD_INT 2
72904: PPUSH
72905: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72909: LD_INT 30
72911: PPUSH
72912: LD_OWVAR 2
72916: PPUSH
72917: LD_INT 2
72919: PPUSH
72920: CALL_OW 322
// end ;
72924: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72925: LD_EXP 44
72929: PUSH
72930: LD_EXP 96
72934: AND
72935: IFFALSE 73056
72937: GO 72939
72939: DISABLE
72940: LD_INT 0
72942: PPUSH
72943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72944: LD_ADDR_VAR 0 2
72948: PUSH
72949: LD_INT 22
72951: PUSH
72952: LD_OWVAR 2
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 21
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 3
72973: PUSH
72974: LD_INT 23
72976: PUSH
72977: LD_INT 0
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: LIST
72992: PPUSH
72993: CALL_OW 69
72997: ST_TO_ADDR
// if not tmp then
72998: LD_VAR 0 2
73002: NOT
73003: IFFALSE 73007
// exit ;
73005: GO 73056
// for i in tmp do
73007: LD_ADDR_VAR 0 1
73011: PUSH
73012: LD_VAR 0 2
73016: PUSH
73017: FOR_IN
73018: IFFALSE 73054
// begin if Crawls ( i ) then
73020: LD_VAR 0 1
73024: PPUSH
73025: CALL_OW 318
73029: IFFALSE 73040
// ComWalk ( i ) ;
73031: LD_VAR 0 1
73035: PPUSH
73036: CALL_OW 138
// SetClass ( i , 2 ) ;
73040: LD_VAR 0 1
73044: PPUSH
73045: LD_INT 2
73047: PPUSH
73048: CALL_OW 336
// end ;
73052: GO 73017
73054: POP
73055: POP
// end ;
73056: PPOPN 2
73058: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73059: LD_EXP 44
73063: PUSH
73064: LD_EXP 97
73068: AND
73069: IFFALSE 73357
73071: GO 73073
73073: DISABLE
73074: LD_INT 0
73076: PPUSH
73077: PPUSH
73078: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73079: LD_OWVAR 2
73083: PPUSH
73084: LD_INT 9
73086: PPUSH
73087: LD_INT 1
73089: PPUSH
73090: LD_INT 1
73092: PPUSH
73093: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73097: LD_INT 9
73099: PPUSH
73100: LD_OWVAR 2
73104: PPUSH
73105: CALL_OW 343
// uc_side := 9 ;
73109: LD_ADDR_OWVAR 20
73113: PUSH
73114: LD_INT 9
73116: ST_TO_ADDR
// uc_nation := 2 ;
73117: LD_ADDR_OWVAR 21
73121: PUSH
73122: LD_INT 2
73124: ST_TO_ADDR
// hc_name := Dark Warrior ;
73125: LD_ADDR_OWVAR 26
73129: PUSH
73130: LD_STRING Dark Warrior
73132: ST_TO_ADDR
// hc_gallery :=  ;
73133: LD_ADDR_OWVAR 33
73137: PUSH
73138: LD_STRING 
73140: ST_TO_ADDR
// hc_noskilllimit := true ;
73141: LD_ADDR_OWVAR 76
73145: PUSH
73146: LD_INT 1
73148: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73149: LD_ADDR_OWVAR 31
73153: PUSH
73154: LD_INT 30
73156: PUSH
73157: LD_INT 30
73159: PUSH
73160: LD_INT 30
73162: PUSH
73163: LD_INT 30
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: ST_TO_ADDR
// un := CreateHuman ;
73172: LD_ADDR_VAR 0 3
73176: PUSH
73177: CALL_OW 44
73181: ST_TO_ADDR
// hc_noskilllimit := false ;
73182: LD_ADDR_OWVAR 76
73186: PUSH
73187: LD_INT 0
73189: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73190: LD_VAR 0 3
73194: PPUSH
73195: LD_INT 1
73197: PPUSH
73198: CALL_OW 51
// ToLua ( playRanger() ) ;
73202: LD_STRING playRanger()
73204: PPUSH
73205: CALL_OW 559
// p := 0 ;
73209: LD_ADDR_VAR 0 2
73213: PUSH
73214: LD_INT 0
73216: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73217: LD_INT 35
73219: PPUSH
73220: CALL_OW 67
// p := p + 1 ;
73224: LD_ADDR_VAR 0 2
73228: PUSH
73229: LD_VAR 0 2
73233: PUSH
73234: LD_INT 1
73236: PLUS
73237: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73238: LD_VAR 0 3
73242: PPUSH
73243: CALL_OW 256
73247: PUSH
73248: LD_INT 1000
73250: LESS
73251: IFFALSE 73265
// SetLives ( un , 1000 ) ;
73253: LD_VAR 0 3
73257: PPUSH
73258: LD_INT 1000
73260: PPUSH
73261: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73265: LD_VAR 0 3
73269: PPUSH
73270: LD_INT 81
73272: PUSH
73273: LD_OWVAR 2
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 91
73284: PUSH
73285: LD_VAR 0 3
73289: PUSH
73290: LD_INT 30
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: LIST
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PPUSH
73302: CALL_OW 69
73306: PPUSH
73307: LD_VAR 0 3
73311: PPUSH
73312: CALL_OW 74
73316: PPUSH
73317: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73321: LD_VAR 0 2
73325: PUSH
73326: LD_INT 80
73328: GREATER
73329: PUSH
73330: LD_VAR 0 3
73334: PPUSH
73335: CALL_OW 301
73339: OR
73340: IFFALSE 73217
// if un then
73342: LD_VAR 0 3
73346: IFFALSE 73357
// RemoveUnit ( un ) ;
73348: LD_VAR 0 3
73352: PPUSH
73353: CALL_OW 64
// end ;
73357: PPOPN 3
73359: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73360: LD_EXP 98
73364: IFFALSE 73480
73366: GO 73368
73368: DISABLE
73369: LD_INT 0
73371: PPUSH
73372: PPUSH
73373: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73374: LD_ADDR_VAR 0 2
73378: PUSH
73379: LD_INT 81
73381: PUSH
73382: LD_OWVAR 2
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 21
73393: PUSH
73394: LD_INT 1
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PPUSH
73405: CALL_OW 69
73409: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73410: LD_STRING playComputer()
73412: PPUSH
73413: CALL_OW 559
// if not tmp then
73417: LD_VAR 0 2
73421: NOT
73422: IFFALSE 73426
// exit ;
73424: GO 73480
// for i in tmp do
73426: LD_ADDR_VAR 0 1
73430: PUSH
73431: LD_VAR 0 2
73435: PUSH
73436: FOR_IN
73437: IFFALSE 73478
// for j := 1 to 4 do
73439: LD_ADDR_VAR 0 3
73443: PUSH
73444: DOUBLE
73445: LD_INT 1
73447: DEC
73448: ST_TO_ADDR
73449: LD_INT 4
73451: PUSH
73452: FOR_TO
73453: IFFALSE 73474
// SetSkill ( i , j , 10 ) ;
73455: LD_VAR 0 1
73459: PPUSH
73460: LD_VAR 0 3
73464: PPUSH
73465: LD_INT 10
73467: PPUSH
73468: CALL_OW 237
73472: GO 73452
73474: POP
73475: POP
73476: GO 73436
73478: POP
73479: POP
// end ;
73480: PPOPN 3
73482: END
// every 0 0$1 trigger s30 do var i , tmp ;
73483: LD_EXP 99
73487: IFFALSE 73556
73489: GO 73491
73491: DISABLE
73492: LD_INT 0
73494: PPUSH
73495: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73496: LD_ADDR_VAR 0 2
73500: PUSH
73501: LD_INT 22
73503: PUSH
73504: LD_OWVAR 2
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PPUSH
73513: CALL_OW 69
73517: ST_TO_ADDR
// if not tmp then
73518: LD_VAR 0 2
73522: NOT
73523: IFFALSE 73527
// exit ;
73525: GO 73556
// for i in tmp do
73527: LD_ADDR_VAR 0 1
73531: PUSH
73532: LD_VAR 0 2
73536: PUSH
73537: FOR_IN
73538: IFFALSE 73554
// SetLives ( i , 300 ) ;
73540: LD_VAR 0 1
73544: PPUSH
73545: LD_INT 300
73547: PPUSH
73548: CALL_OW 234
73552: GO 73537
73554: POP
73555: POP
// end ;
73556: PPOPN 2
73558: END
// every 0 0$1 trigger s60 do var i , tmp ;
73559: LD_EXP 100
73563: IFFALSE 73632
73565: GO 73567
73567: DISABLE
73568: LD_INT 0
73570: PPUSH
73571: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73572: LD_ADDR_VAR 0 2
73576: PUSH
73577: LD_INT 22
73579: PUSH
73580: LD_OWVAR 2
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PPUSH
73589: CALL_OW 69
73593: ST_TO_ADDR
// if not tmp then
73594: LD_VAR 0 2
73598: NOT
73599: IFFALSE 73603
// exit ;
73601: GO 73632
// for i in tmp do
73603: LD_ADDR_VAR 0 1
73607: PUSH
73608: LD_VAR 0 2
73612: PUSH
73613: FOR_IN
73614: IFFALSE 73630
// SetLives ( i , 600 ) ;
73616: LD_VAR 0 1
73620: PPUSH
73621: LD_INT 600
73623: PPUSH
73624: CALL_OW 234
73628: GO 73613
73630: POP
73631: POP
// end ;
73632: PPOPN 2
73634: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73635: LD_INT 0
73637: PPUSH
// case cmd of 301 :
73638: LD_VAR 0 1
73642: PUSH
73643: LD_INT 301
73645: DOUBLE
73646: EQUAL
73647: IFTRUE 73651
73649: GO 73683
73651: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73652: LD_VAR 0 6
73656: PPUSH
73657: LD_VAR 0 7
73661: PPUSH
73662: LD_VAR 0 8
73666: PPUSH
73667: LD_VAR 0 4
73671: PPUSH
73672: LD_VAR 0 5
73676: PPUSH
73677: CALL 74892 0 5
73681: GO 73804
73683: LD_INT 302
73685: DOUBLE
73686: EQUAL
73687: IFTRUE 73691
73689: GO 73728
73691: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73692: LD_VAR 0 6
73696: PPUSH
73697: LD_VAR 0 7
73701: PPUSH
73702: LD_VAR 0 8
73706: PPUSH
73707: LD_VAR 0 9
73711: PPUSH
73712: LD_VAR 0 4
73716: PPUSH
73717: LD_VAR 0 5
73721: PPUSH
73722: CALL 74983 0 6
73726: GO 73804
73728: LD_INT 303
73730: DOUBLE
73731: EQUAL
73732: IFTRUE 73736
73734: GO 73773
73736: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73737: LD_VAR 0 6
73741: PPUSH
73742: LD_VAR 0 7
73746: PPUSH
73747: LD_VAR 0 8
73751: PPUSH
73752: LD_VAR 0 9
73756: PPUSH
73757: LD_VAR 0 4
73761: PPUSH
73762: LD_VAR 0 5
73766: PPUSH
73767: CALL 73809 0 6
73771: GO 73804
73773: LD_INT 304
73775: DOUBLE
73776: EQUAL
73777: IFTRUE 73781
73779: GO 73803
73781: POP
// hHackTeleport ( unit , x , y ) ; end ;
73782: LD_VAR 0 2
73786: PPUSH
73787: LD_VAR 0 4
73791: PPUSH
73792: LD_VAR 0 5
73796: PPUSH
73797: CALL 75576 0 3
73801: GO 73804
73803: POP
// end ;
73804: LD_VAR 0 12
73808: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73809: LD_INT 0
73811: PPUSH
73812: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73813: LD_VAR 0 1
73817: PUSH
73818: LD_INT 1
73820: LESS
73821: PUSH
73822: LD_VAR 0 1
73826: PUSH
73827: LD_INT 3
73829: GREATER
73830: OR
73831: PUSH
73832: LD_VAR 0 5
73836: PPUSH
73837: LD_VAR 0 6
73841: PPUSH
73842: CALL_OW 428
73846: OR
73847: IFFALSE 73851
// exit ;
73849: GO 74579
// uc_side := your_side ;
73851: LD_ADDR_OWVAR 20
73855: PUSH
73856: LD_OWVAR 2
73860: ST_TO_ADDR
// uc_nation := nation ;
73861: LD_ADDR_OWVAR 21
73865: PUSH
73866: LD_VAR 0 1
73870: ST_TO_ADDR
// bc_level = 1 ;
73871: LD_ADDR_OWVAR 43
73875: PUSH
73876: LD_INT 1
73878: ST_TO_ADDR
// case btype of 1 :
73879: LD_VAR 0 2
73883: PUSH
73884: LD_INT 1
73886: DOUBLE
73887: EQUAL
73888: IFTRUE 73892
73890: GO 73903
73892: POP
// bc_type := b_depot ; 2 :
73893: LD_ADDR_OWVAR 42
73897: PUSH
73898: LD_INT 0
73900: ST_TO_ADDR
73901: GO 74523
73903: LD_INT 2
73905: DOUBLE
73906: EQUAL
73907: IFTRUE 73911
73909: GO 73922
73911: POP
// bc_type := b_warehouse ; 3 :
73912: LD_ADDR_OWVAR 42
73916: PUSH
73917: LD_INT 1
73919: ST_TO_ADDR
73920: GO 74523
73922: LD_INT 3
73924: DOUBLE
73925: EQUAL
73926: IFTRUE 73930
73928: GO 73941
73930: POP
// bc_type := b_lab ; 4 .. 9 :
73931: LD_ADDR_OWVAR 42
73935: PUSH
73936: LD_INT 6
73938: ST_TO_ADDR
73939: GO 74523
73941: LD_INT 4
73943: DOUBLE
73944: GREATEREQUAL
73945: IFFALSE 73953
73947: LD_INT 9
73949: DOUBLE
73950: LESSEQUAL
73951: IFTRUE 73955
73953: GO 74015
73955: POP
// begin bc_type := b_lab_half ;
73956: LD_ADDR_OWVAR 42
73960: PUSH
73961: LD_INT 7
73963: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73964: LD_ADDR_OWVAR 44
73968: PUSH
73969: LD_INT 10
73971: PUSH
73972: LD_INT 11
73974: PUSH
73975: LD_INT 12
73977: PUSH
73978: LD_INT 15
73980: PUSH
73981: LD_INT 14
73983: PUSH
73984: LD_INT 13
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: PUSH
73995: LD_VAR 0 2
73999: PUSH
74000: LD_INT 3
74002: MINUS
74003: ARRAY
74004: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
74005: LD_ADDR_OWVAR 45
74009: PUSH
74010: LD_INT 9
74012: ST_TO_ADDR
// end ; 10 .. 13 :
74013: GO 74523
74015: LD_INT 10
74017: DOUBLE
74018: GREATEREQUAL
74019: IFFALSE 74027
74021: LD_INT 13
74023: DOUBLE
74024: LESSEQUAL
74025: IFTRUE 74029
74027: GO 74106
74029: POP
// begin bc_type := b_lab_full ;
74030: LD_ADDR_OWVAR 42
74034: PUSH
74035: LD_INT 8
74037: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74038: LD_ADDR_OWVAR 44
74042: PUSH
74043: LD_INT 10
74045: PUSH
74046: LD_INT 12
74048: PUSH
74049: LD_INT 14
74051: PUSH
74052: LD_INT 13
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: LIST
74059: LIST
74060: PUSH
74061: LD_VAR 0 2
74065: PUSH
74066: LD_INT 9
74068: MINUS
74069: ARRAY
74070: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74071: LD_ADDR_OWVAR 45
74075: PUSH
74076: LD_INT 11
74078: PUSH
74079: LD_INT 15
74081: PUSH
74082: LD_INT 12
74084: PUSH
74085: LD_INT 15
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: PUSH
74094: LD_VAR 0 2
74098: PUSH
74099: LD_INT 9
74101: MINUS
74102: ARRAY
74103: ST_TO_ADDR
// end ; 14 :
74104: GO 74523
74106: LD_INT 14
74108: DOUBLE
74109: EQUAL
74110: IFTRUE 74114
74112: GO 74125
74114: POP
// bc_type := b_workshop ; 15 :
74115: LD_ADDR_OWVAR 42
74119: PUSH
74120: LD_INT 2
74122: ST_TO_ADDR
74123: GO 74523
74125: LD_INT 15
74127: DOUBLE
74128: EQUAL
74129: IFTRUE 74133
74131: GO 74144
74133: POP
// bc_type := b_factory ; 16 :
74134: LD_ADDR_OWVAR 42
74138: PUSH
74139: LD_INT 3
74141: ST_TO_ADDR
74142: GO 74523
74144: LD_INT 16
74146: DOUBLE
74147: EQUAL
74148: IFTRUE 74152
74150: GO 74163
74152: POP
// bc_type := b_ext_gun ; 17 :
74153: LD_ADDR_OWVAR 42
74157: PUSH
74158: LD_INT 17
74160: ST_TO_ADDR
74161: GO 74523
74163: LD_INT 17
74165: DOUBLE
74166: EQUAL
74167: IFTRUE 74171
74169: GO 74199
74171: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74172: LD_ADDR_OWVAR 42
74176: PUSH
74177: LD_INT 19
74179: PUSH
74180: LD_INT 23
74182: PUSH
74183: LD_INT 19
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: LIST
74190: PUSH
74191: LD_VAR 0 1
74195: ARRAY
74196: ST_TO_ADDR
74197: GO 74523
74199: LD_INT 18
74201: DOUBLE
74202: EQUAL
74203: IFTRUE 74207
74205: GO 74218
74207: POP
// bc_type := b_ext_radar ; 19 :
74208: LD_ADDR_OWVAR 42
74212: PUSH
74213: LD_INT 20
74215: ST_TO_ADDR
74216: GO 74523
74218: LD_INT 19
74220: DOUBLE
74221: EQUAL
74222: IFTRUE 74226
74224: GO 74237
74226: POP
// bc_type := b_ext_radio ; 20 :
74227: LD_ADDR_OWVAR 42
74231: PUSH
74232: LD_INT 22
74234: ST_TO_ADDR
74235: GO 74523
74237: LD_INT 20
74239: DOUBLE
74240: EQUAL
74241: IFTRUE 74245
74243: GO 74256
74245: POP
// bc_type := b_ext_siberium ; 21 :
74246: LD_ADDR_OWVAR 42
74250: PUSH
74251: LD_INT 21
74253: ST_TO_ADDR
74254: GO 74523
74256: LD_INT 21
74258: DOUBLE
74259: EQUAL
74260: IFTRUE 74264
74262: GO 74275
74264: POP
// bc_type := b_ext_computer ; 22 :
74265: LD_ADDR_OWVAR 42
74269: PUSH
74270: LD_INT 24
74272: ST_TO_ADDR
74273: GO 74523
74275: LD_INT 22
74277: DOUBLE
74278: EQUAL
74279: IFTRUE 74283
74281: GO 74294
74283: POP
// bc_type := b_ext_track ; 23 :
74284: LD_ADDR_OWVAR 42
74288: PUSH
74289: LD_INT 16
74291: ST_TO_ADDR
74292: GO 74523
74294: LD_INT 23
74296: DOUBLE
74297: EQUAL
74298: IFTRUE 74302
74300: GO 74313
74302: POP
// bc_type := b_ext_laser ; 24 :
74303: LD_ADDR_OWVAR 42
74307: PUSH
74308: LD_INT 25
74310: ST_TO_ADDR
74311: GO 74523
74313: LD_INT 24
74315: DOUBLE
74316: EQUAL
74317: IFTRUE 74321
74319: GO 74332
74321: POP
// bc_type := b_control_tower ; 25 :
74322: LD_ADDR_OWVAR 42
74326: PUSH
74327: LD_INT 36
74329: ST_TO_ADDR
74330: GO 74523
74332: LD_INT 25
74334: DOUBLE
74335: EQUAL
74336: IFTRUE 74340
74338: GO 74351
74340: POP
// bc_type := b_breastwork ; 26 :
74341: LD_ADDR_OWVAR 42
74345: PUSH
74346: LD_INT 31
74348: ST_TO_ADDR
74349: GO 74523
74351: LD_INT 26
74353: DOUBLE
74354: EQUAL
74355: IFTRUE 74359
74357: GO 74370
74359: POP
// bc_type := b_bunker ; 27 :
74360: LD_ADDR_OWVAR 42
74364: PUSH
74365: LD_INT 32
74367: ST_TO_ADDR
74368: GO 74523
74370: LD_INT 27
74372: DOUBLE
74373: EQUAL
74374: IFTRUE 74378
74376: GO 74389
74378: POP
// bc_type := b_turret ; 28 :
74379: LD_ADDR_OWVAR 42
74383: PUSH
74384: LD_INT 33
74386: ST_TO_ADDR
74387: GO 74523
74389: LD_INT 28
74391: DOUBLE
74392: EQUAL
74393: IFTRUE 74397
74395: GO 74408
74397: POP
// bc_type := b_armoury ; 29 :
74398: LD_ADDR_OWVAR 42
74402: PUSH
74403: LD_INT 4
74405: ST_TO_ADDR
74406: GO 74523
74408: LD_INT 29
74410: DOUBLE
74411: EQUAL
74412: IFTRUE 74416
74414: GO 74427
74416: POP
// bc_type := b_barracks ; 30 :
74417: LD_ADDR_OWVAR 42
74421: PUSH
74422: LD_INT 5
74424: ST_TO_ADDR
74425: GO 74523
74427: LD_INT 30
74429: DOUBLE
74430: EQUAL
74431: IFTRUE 74435
74433: GO 74446
74435: POP
// bc_type := b_solar_power ; 31 :
74436: LD_ADDR_OWVAR 42
74440: PUSH
74441: LD_INT 27
74443: ST_TO_ADDR
74444: GO 74523
74446: LD_INT 31
74448: DOUBLE
74449: EQUAL
74450: IFTRUE 74454
74452: GO 74465
74454: POP
// bc_type := b_oil_power ; 32 :
74455: LD_ADDR_OWVAR 42
74459: PUSH
74460: LD_INT 26
74462: ST_TO_ADDR
74463: GO 74523
74465: LD_INT 32
74467: DOUBLE
74468: EQUAL
74469: IFTRUE 74473
74471: GO 74484
74473: POP
// bc_type := b_siberite_power ; 33 :
74474: LD_ADDR_OWVAR 42
74478: PUSH
74479: LD_INT 28
74481: ST_TO_ADDR
74482: GO 74523
74484: LD_INT 33
74486: DOUBLE
74487: EQUAL
74488: IFTRUE 74492
74490: GO 74503
74492: POP
// bc_type := b_oil_mine ; 34 :
74493: LD_ADDR_OWVAR 42
74497: PUSH
74498: LD_INT 29
74500: ST_TO_ADDR
74501: GO 74523
74503: LD_INT 34
74505: DOUBLE
74506: EQUAL
74507: IFTRUE 74511
74509: GO 74522
74511: POP
// bc_type := b_siberite_mine ; end ;
74512: LD_ADDR_OWVAR 42
74516: PUSH
74517: LD_INT 30
74519: ST_TO_ADDR
74520: GO 74523
74522: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74523: LD_ADDR_VAR 0 8
74527: PUSH
74528: LD_VAR 0 5
74532: PPUSH
74533: LD_VAR 0 6
74537: PPUSH
74538: LD_VAR 0 3
74542: PPUSH
74543: CALL_OW 47
74547: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74548: LD_OWVAR 42
74552: PUSH
74553: LD_INT 32
74555: PUSH
74556: LD_INT 33
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: IN
74563: IFFALSE 74579
// PlaceWeaponTurret ( b , weapon ) ;
74565: LD_VAR 0 8
74569: PPUSH
74570: LD_VAR 0 4
74574: PPUSH
74575: CALL_OW 431
// end ;
74579: LD_VAR 0 7
74583: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74584: LD_INT 0
74586: PPUSH
74587: PPUSH
74588: PPUSH
74589: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74590: LD_ADDR_VAR 0 4
74594: PUSH
74595: LD_INT 22
74597: PUSH
74598: LD_OWVAR 2
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 2
74609: PUSH
74610: LD_INT 30
74612: PUSH
74613: LD_INT 0
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: PUSH
74620: LD_INT 30
74622: PUSH
74623: LD_INT 1
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: LIST
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PPUSH
74639: CALL_OW 69
74643: ST_TO_ADDR
// if not tmp then
74644: LD_VAR 0 4
74648: NOT
74649: IFFALSE 74653
// exit ;
74651: GO 74712
// for i in tmp do
74653: LD_ADDR_VAR 0 2
74657: PUSH
74658: LD_VAR 0 4
74662: PUSH
74663: FOR_IN
74664: IFFALSE 74710
// for j = 1 to 3 do
74666: LD_ADDR_VAR 0 3
74670: PUSH
74671: DOUBLE
74672: LD_INT 1
74674: DEC
74675: ST_TO_ADDR
74676: LD_INT 3
74678: PUSH
74679: FOR_TO
74680: IFFALSE 74706
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74682: LD_VAR 0 2
74686: PPUSH
74687: CALL_OW 274
74691: PPUSH
74692: LD_VAR 0 3
74696: PPUSH
74697: LD_INT 99999
74699: PPUSH
74700: CALL_OW 277
74704: GO 74679
74706: POP
74707: POP
74708: GO 74663
74710: POP
74711: POP
// end ;
74712: LD_VAR 0 1
74716: RET
// export function hHackSetLevel10 ; var i , j ; begin
74717: LD_INT 0
74719: PPUSH
74720: PPUSH
74721: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74722: LD_ADDR_VAR 0 2
74726: PUSH
74727: LD_INT 21
74729: PUSH
74730: LD_INT 1
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PPUSH
74737: CALL_OW 69
74741: PUSH
74742: FOR_IN
74743: IFFALSE 74795
// if IsSelected ( i ) then
74745: LD_VAR 0 2
74749: PPUSH
74750: CALL_OW 306
74754: IFFALSE 74793
// begin for j := 1 to 4 do
74756: LD_ADDR_VAR 0 3
74760: PUSH
74761: DOUBLE
74762: LD_INT 1
74764: DEC
74765: ST_TO_ADDR
74766: LD_INT 4
74768: PUSH
74769: FOR_TO
74770: IFFALSE 74791
// SetSkill ( i , j , 10 ) ;
74772: LD_VAR 0 2
74776: PPUSH
74777: LD_VAR 0 3
74781: PPUSH
74782: LD_INT 10
74784: PPUSH
74785: CALL_OW 237
74789: GO 74769
74791: POP
74792: POP
// end ;
74793: GO 74742
74795: POP
74796: POP
// end ;
74797: LD_VAR 0 1
74801: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74802: LD_INT 0
74804: PPUSH
74805: PPUSH
74806: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74807: LD_ADDR_VAR 0 2
74811: PUSH
74812: LD_INT 22
74814: PUSH
74815: LD_OWVAR 2
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PUSH
74824: LD_INT 21
74826: PUSH
74827: LD_INT 1
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PPUSH
74838: CALL_OW 69
74842: PUSH
74843: FOR_IN
74844: IFFALSE 74885
// begin for j := 1 to 4 do
74846: LD_ADDR_VAR 0 3
74850: PUSH
74851: DOUBLE
74852: LD_INT 1
74854: DEC
74855: ST_TO_ADDR
74856: LD_INT 4
74858: PUSH
74859: FOR_TO
74860: IFFALSE 74881
// SetSkill ( i , j , 10 ) ;
74862: LD_VAR 0 2
74866: PPUSH
74867: LD_VAR 0 3
74871: PPUSH
74872: LD_INT 10
74874: PPUSH
74875: CALL_OW 237
74879: GO 74859
74881: POP
74882: POP
// end ;
74883: GO 74843
74885: POP
74886: POP
// end ;
74887: LD_VAR 0 1
74891: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74892: LD_INT 0
74894: PPUSH
// uc_side := your_side ;
74895: LD_ADDR_OWVAR 20
74899: PUSH
74900: LD_OWVAR 2
74904: ST_TO_ADDR
// uc_nation := nation ;
74905: LD_ADDR_OWVAR 21
74909: PUSH
74910: LD_VAR 0 1
74914: ST_TO_ADDR
// InitHc ;
74915: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74919: LD_INT 0
74921: PPUSH
74922: LD_VAR 0 2
74926: PPUSH
74927: LD_VAR 0 3
74931: PPUSH
74932: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74936: LD_VAR 0 4
74940: PPUSH
74941: LD_VAR 0 5
74945: PPUSH
74946: CALL_OW 428
74950: PUSH
74951: LD_INT 0
74953: EQUAL
74954: IFFALSE 74978
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74956: CALL_OW 44
74960: PPUSH
74961: LD_VAR 0 4
74965: PPUSH
74966: LD_VAR 0 5
74970: PPUSH
74971: LD_INT 1
74973: PPUSH
74974: CALL_OW 48
// end ;
74978: LD_VAR 0 6
74982: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74983: LD_INT 0
74985: PPUSH
74986: PPUSH
// uc_side := your_side ;
74987: LD_ADDR_OWVAR 20
74991: PUSH
74992: LD_OWVAR 2
74996: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74997: LD_VAR 0 1
75001: PUSH
75002: LD_INT 1
75004: PUSH
75005: LD_INT 2
75007: PUSH
75008: LD_INT 3
75010: PUSH
75011: LD_INT 4
75013: PUSH
75014: LD_INT 5
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: IN
75024: IFFALSE 75036
// uc_nation := nation_american else
75026: LD_ADDR_OWVAR 21
75030: PUSH
75031: LD_INT 1
75033: ST_TO_ADDR
75034: GO 75079
// if chassis in [ 11 , 12 , 13 , 14 ] then
75036: LD_VAR 0 1
75040: PUSH
75041: LD_INT 11
75043: PUSH
75044: LD_INT 12
75046: PUSH
75047: LD_INT 13
75049: PUSH
75050: LD_INT 14
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: IN
75059: IFFALSE 75071
// uc_nation := nation_arabian else
75061: LD_ADDR_OWVAR 21
75065: PUSH
75066: LD_INT 2
75068: ST_TO_ADDR
75069: GO 75079
// uc_nation := nation_russian ;
75071: LD_ADDR_OWVAR 21
75075: PUSH
75076: LD_INT 3
75078: ST_TO_ADDR
// vc_chassis := chassis ;
75079: LD_ADDR_OWVAR 37
75083: PUSH
75084: LD_VAR 0 1
75088: ST_TO_ADDR
// vc_engine := engine ;
75089: LD_ADDR_OWVAR 39
75093: PUSH
75094: LD_VAR 0 2
75098: ST_TO_ADDR
// vc_control := control ;
75099: LD_ADDR_OWVAR 38
75103: PUSH
75104: LD_VAR 0 3
75108: ST_TO_ADDR
// vc_weapon := weapon ;
75109: LD_ADDR_OWVAR 40
75113: PUSH
75114: LD_VAR 0 4
75118: ST_TO_ADDR
// un := CreateVehicle ;
75119: LD_ADDR_VAR 0 8
75123: PUSH
75124: CALL_OW 45
75128: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75129: LD_VAR 0 8
75133: PPUSH
75134: LD_INT 0
75136: PPUSH
75137: LD_INT 5
75139: PPUSH
75140: CALL_OW 12
75144: PPUSH
75145: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75149: LD_VAR 0 8
75153: PPUSH
75154: LD_VAR 0 5
75158: PPUSH
75159: LD_VAR 0 6
75163: PPUSH
75164: LD_INT 1
75166: PPUSH
75167: CALL_OW 48
// end ;
75171: LD_VAR 0 7
75175: RET
// export hInvincible ; every 1 do
75176: GO 75178
75178: DISABLE
// hInvincible := [ ] ;
75179: LD_ADDR_EXP 101
75183: PUSH
75184: EMPTY
75185: ST_TO_ADDR
75186: END
// every 10 do var i ;
75187: GO 75189
75189: DISABLE
75190: LD_INT 0
75192: PPUSH
// begin enable ;
75193: ENABLE
// if not hInvincible then
75194: LD_EXP 101
75198: NOT
75199: IFFALSE 75203
// exit ;
75201: GO 75247
// for i in hInvincible do
75203: LD_ADDR_VAR 0 1
75207: PUSH
75208: LD_EXP 101
75212: PUSH
75213: FOR_IN
75214: IFFALSE 75245
// if GetLives ( i ) < 1000 then
75216: LD_VAR 0 1
75220: PPUSH
75221: CALL_OW 256
75225: PUSH
75226: LD_INT 1000
75228: LESS
75229: IFFALSE 75243
// SetLives ( i , 1000 ) ;
75231: LD_VAR 0 1
75235: PPUSH
75236: LD_INT 1000
75238: PPUSH
75239: CALL_OW 234
75243: GO 75213
75245: POP
75246: POP
// end ;
75247: PPOPN 1
75249: END
// export function hHackInvincible ; var i ; begin
75250: LD_INT 0
75252: PPUSH
75253: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75254: LD_ADDR_VAR 0 2
75258: PUSH
75259: LD_INT 2
75261: PUSH
75262: LD_INT 21
75264: PUSH
75265: LD_INT 1
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PUSH
75272: LD_INT 21
75274: PUSH
75275: LD_INT 2
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: LIST
75286: PPUSH
75287: CALL_OW 69
75291: PUSH
75292: FOR_IN
75293: IFFALSE 75354
// if IsSelected ( i ) then
75295: LD_VAR 0 2
75299: PPUSH
75300: CALL_OW 306
75304: IFFALSE 75352
// begin if i in hInvincible then
75306: LD_VAR 0 2
75310: PUSH
75311: LD_EXP 101
75315: IN
75316: IFFALSE 75336
// hInvincible := hInvincible diff i else
75318: LD_ADDR_EXP 101
75322: PUSH
75323: LD_EXP 101
75327: PUSH
75328: LD_VAR 0 2
75332: DIFF
75333: ST_TO_ADDR
75334: GO 75352
// hInvincible := hInvincible union i ;
75336: LD_ADDR_EXP 101
75340: PUSH
75341: LD_EXP 101
75345: PUSH
75346: LD_VAR 0 2
75350: UNION
75351: ST_TO_ADDR
// end ;
75352: GO 75292
75354: POP
75355: POP
// end ;
75356: LD_VAR 0 1
75360: RET
// export function hHackInvisible ; var i , j ; begin
75361: LD_INT 0
75363: PPUSH
75364: PPUSH
75365: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75366: LD_ADDR_VAR 0 2
75370: PUSH
75371: LD_INT 21
75373: PUSH
75374: LD_INT 1
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PPUSH
75381: CALL_OW 69
75385: PUSH
75386: FOR_IN
75387: IFFALSE 75411
// if IsSelected ( i ) then
75389: LD_VAR 0 2
75393: PPUSH
75394: CALL_OW 306
75398: IFFALSE 75409
// ComForceInvisible ( i ) ;
75400: LD_VAR 0 2
75404: PPUSH
75405: CALL_OW 496
75409: GO 75386
75411: POP
75412: POP
// end ;
75413: LD_VAR 0 1
75417: RET
// export function hHackChangeYourSide ; begin
75418: LD_INT 0
75420: PPUSH
// if your_side = 8 then
75421: LD_OWVAR 2
75425: PUSH
75426: LD_INT 8
75428: EQUAL
75429: IFFALSE 75441
// your_side := 0 else
75431: LD_ADDR_OWVAR 2
75435: PUSH
75436: LD_INT 0
75438: ST_TO_ADDR
75439: GO 75455
// your_side := your_side + 1 ;
75441: LD_ADDR_OWVAR 2
75445: PUSH
75446: LD_OWVAR 2
75450: PUSH
75451: LD_INT 1
75453: PLUS
75454: ST_TO_ADDR
// end ;
75455: LD_VAR 0 1
75459: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75460: LD_INT 0
75462: PPUSH
75463: PPUSH
75464: PPUSH
// for i in all_units do
75465: LD_ADDR_VAR 0 2
75469: PUSH
75470: LD_OWVAR 3
75474: PUSH
75475: FOR_IN
75476: IFFALSE 75554
// if IsSelected ( i ) then
75478: LD_VAR 0 2
75482: PPUSH
75483: CALL_OW 306
75487: IFFALSE 75552
// begin j := GetSide ( i ) ;
75489: LD_ADDR_VAR 0 3
75493: PUSH
75494: LD_VAR 0 2
75498: PPUSH
75499: CALL_OW 255
75503: ST_TO_ADDR
// if j = 8 then
75504: LD_VAR 0 3
75508: PUSH
75509: LD_INT 8
75511: EQUAL
75512: IFFALSE 75524
// j := 0 else
75514: LD_ADDR_VAR 0 3
75518: PUSH
75519: LD_INT 0
75521: ST_TO_ADDR
75522: GO 75538
// j := j + 1 ;
75524: LD_ADDR_VAR 0 3
75528: PUSH
75529: LD_VAR 0 3
75533: PUSH
75534: LD_INT 1
75536: PLUS
75537: ST_TO_ADDR
// SetSide ( i , j ) ;
75538: LD_VAR 0 2
75542: PPUSH
75543: LD_VAR 0 3
75547: PPUSH
75548: CALL_OW 235
// end ;
75552: GO 75475
75554: POP
75555: POP
// end ;
75556: LD_VAR 0 1
75560: RET
// export function hHackFog ; begin
75561: LD_INT 0
75563: PPUSH
// FogOff ( true ) ;
75564: LD_INT 1
75566: PPUSH
75567: CALL_OW 344
// end ;
75571: LD_VAR 0 1
75575: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75576: LD_INT 0
75578: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75579: LD_VAR 0 1
75583: PPUSH
75584: LD_VAR 0 2
75588: PPUSH
75589: LD_VAR 0 3
75593: PPUSH
75594: LD_INT 1
75596: PPUSH
75597: LD_INT 1
75599: PPUSH
75600: CALL_OW 483
// CenterOnXY ( x , y ) ;
75604: LD_VAR 0 2
75608: PPUSH
75609: LD_VAR 0 3
75613: PPUSH
75614: CALL_OW 84
// end ;
75618: LD_VAR 0 4
75622: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75623: LD_INT 0
75625: PPUSH
75626: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75627: LD_VAR 0 1
75631: NOT
75632: PUSH
75633: LD_VAR 0 2
75637: PPUSH
75638: LD_VAR 0 3
75642: PPUSH
75643: CALL_OW 488
75647: NOT
75648: OR
75649: PUSH
75650: LD_VAR 0 1
75654: PPUSH
75655: CALL_OW 266
75659: PUSH
75660: LD_INT 3
75662: NONEQUAL
75663: PUSH
75664: LD_VAR 0 1
75668: PPUSH
75669: CALL_OW 247
75673: PUSH
75674: LD_INT 1
75676: EQUAL
75677: NOT
75678: AND
75679: OR
75680: IFFALSE 75684
// exit ;
75682: GO 75833
// if GetType ( factory ) = unit_human then
75684: LD_VAR 0 1
75688: PPUSH
75689: CALL_OW 247
75693: PUSH
75694: LD_INT 1
75696: EQUAL
75697: IFFALSE 75714
// factory := IsInUnit ( factory ) ;
75699: LD_ADDR_VAR 0 1
75703: PUSH
75704: LD_VAR 0 1
75708: PPUSH
75709: CALL_OW 310
75713: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75714: LD_VAR 0 1
75718: PPUSH
75719: CALL_OW 266
75723: PUSH
75724: LD_INT 3
75726: NONEQUAL
75727: IFFALSE 75731
// exit ;
75729: GO 75833
// if HexInfo ( x , y ) = factory then
75731: LD_VAR 0 2
75735: PPUSH
75736: LD_VAR 0 3
75740: PPUSH
75741: CALL_OW 428
75745: PUSH
75746: LD_VAR 0 1
75750: EQUAL
75751: IFFALSE 75778
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
75753: LD_ADDR_EXP 102
75757: PUSH
75758: LD_EXP 102
75762: PPUSH
75763: LD_VAR 0 1
75767: PPUSH
75768: LD_INT 0
75770: PPUSH
75771: CALL_OW 1
75775: ST_TO_ADDR
75776: GO 75829
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
75778: LD_ADDR_EXP 102
75782: PUSH
75783: LD_EXP 102
75787: PPUSH
75788: LD_VAR 0 1
75792: PPUSH
75793: LD_VAR 0 1
75797: PPUSH
75798: CALL_OW 255
75802: PUSH
75803: LD_VAR 0 1
75807: PUSH
75808: LD_VAR 0 2
75812: PUSH
75813: LD_VAR 0 3
75817: PUSH
75818: EMPTY
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: PPUSH
75824: CALL_OW 1
75828: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75829: CALL 75838 0 0
// end ;
75833: LD_VAR 0 4
75837: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75838: LD_INT 0
75840: PPUSH
75841: PPUSH
75842: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75843: LD_STRING resetFactoryWaypoint();
75845: PPUSH
75846: CALL_OW 559
// if factoryWaypoints then
75850: LD_EXP 102
75854: IFFALSE 75980
// begin list := PrepareArray ( factoryWaypoints ) ;
75856: LD_ADDR_VAR 0 3
75860: PUSH
75861: LD_EXP 102
75865: PPUSH
75866: CALL 60609 0 1
75870: ST_TO_ADDR
// for i := 1 to list do
75871: LD_ADDR_VAR 0 2
75875: PUSH
75876: DOUBLE
75877: LD_INT 1
75879: DEC
75880: ST_TO_ADDR
75881: LD_VAR 0 3
75885: PUSH
75886: FOR_TO
75887: IFFALSE 75978
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75889: LD_STRING setFactoryWaypointXY(
75891: PUSH
75892: LD_VAR 0 3
75896: PUSH
75897: LD_VAR 0 2
75901: ARRAY
75902: PUSH
75903: LD_INT 1
75905: ARRAY
75906: STR
75907: PUSH
75908: LD_STRING ,
75910: STR
75911: PUSH
75912: LD_VAR 0 3
75916: PUSH
75917: LD_VAR 0 2
75921: ARRAY
75922: PUSH
75923: LD_INT 2
75925: ARRAY
75926: STR
75927: PUSH
75928: LD_STRING ,
75930: STR
75931: PUSH
75932: LD_VAR 0 3
75936: PUSH
75937: LD_VAR 0 2
75941: ARRAY
75942: PUSH
75943: LD_INT 3
75945: ARRAY
75946: STR
75947: PUSH
75948: LD_STRING ,
75950: STR
75951: PUSH
75952: LD_VAR 0 3
75956: PUSH
75957: LD_VAR 0 2
75961: ARRAY
75962: PUSH
75963: LD_INT 4
75965: ARRAY
75966: STR
75967: PUSH
75968: LD_STRING )
75970: STR
75971: PPUSH
75972: CALL_OW 559
75976: GO 75886
75978: POP
75979: POP
// end ; end ;
75980: LD_VAR 0 1
75984: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
75985: LD_INT 0
75987: PPUSH
// if HexInfo ( x , y ) = warehouse then
75988: LD_VAR 0 2
75992: PPUSH
75993: LD_VAR 0 3
75997: PPUSH
75998: CALL_OW 428
76002: PUSH
76003: LD_VAR 0 1
76007: EQUAL
76008: IFFALSE 76035
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76010: LD_ADDR_EXP 103
76014: PUSH
76015: LD_EXP 103
76019: PPUSH
76020: LD_VAR 0 1
76024: PPUSH
76025: LD_INT 0
76027: PPUSH
76028: CALL_OW 1
76032: ST_TO_ADDR
76033: GO 76086
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76035: LD_ADDR_EXP 103
76039: PUSH
76040: LD_EXP 103
76044: PPUSH
76045: LD_VAR 0 1
76049: PPUSH
76050: LD_VAR 0 1
76054: PPUSH
76055: CALL_OW 255
76059: PUSH
76060: LD_VAR 0 1
76064: PUSH
76065: LD_VAR 0 2
76069: PUSH
76070: LD_VAR 0 3
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: PPUSH
76081: CALL_OW 1
76085: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76086: CALL 76095 0 0
// end ;
76090: LD_VAR 0 4
76094: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76095: LD_INT 0
76097: PPUSH
76098: PPUSH
76099: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76100: LD_STRING resetWarehouseGatheringPoints();
76102: PPUSH
76103: CALL_OW 559
// if warehouseGatheringPoints then
76107: LD_EXP 103
76111: IFFALSE 76237
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76113: LD_ADDR_VAR 0 3
76117: PUSH
76118: LD_EXP 103
76122: PPUSH
76123: CALL 60609 0 1
76127: ST_TO_ADDR
// for i := 1 to list do
76128: LD_ADDR_VAR 0 2
76132: PUSH
76133: DOUBLE
76134: LD_INT 1
76136: DEC
76137: ST_TO_ADDR
76138: LD_VAR 0 3
76142: PUSH
76143: FOR_TO
76144: IFFALSE 76235
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76146: LD_STRING setWarehouseGatheringPointXY(
76148: PUSH
76149: LD_VAR 0 3
76153: PUSH
76154: LD_VAR 0 2
76158: ARRAY
76159: PUSH
76160: LD_INT 1
76162: ARRAY
76163: STR
76164: PUSH
76165: LD_STRING ,
76167: STR
76168: PUSH
76169: LD_VAR 0 3
76173: PUSH
76174: LD_VAR 0 2
76178: ARRAY
76179: PUSH
76180: LD_INT 2
76182: ARRAY
76183: STR
76184: PUSH
76185: LD_STRING ,
76187: STR
76188: PUSH
76189: LD_VAR 0 3
76193: PUSH
76194: LD_VAR 0 2
76198: ARRAY
76199: PUSH
76200: LD_INT 3
76202: ARRAY
76203: STR
76204: PUSH
76205: LD_STRING ,
76207: STR
76208: PUSH
76209: LD_VAR 0 3
76213: PUSH
76214: LD_VAR 0 2
76218: ARRAY
76219: PUSH
76220: LD_INT 4
76222: ARRAY
76223: STR
76224: PUSH
76225: LD_STRING )
76227: STR
76228: PPUSH
76229: CALL_OW 559
76233: GO 76143
76235: POP
76236: POP
// end ; end ;
76237: LD_VAR 0 1
76241: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76242: LD_EXP 103
76246: IFFALSE 76931
76248: GO 76250
76250: DISABLE
76251: LD_INT 0
76253: PPUSH
76254: PPUSH
76255: PPUSH
76256: PPUSH
76257: PPUSH
76258: PPUSH
76259: PPUSH
76260: PPUSH
76261: PPUSH
// begin enable ;
76262: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76263: LD_ADDR_VAR 0 3
76267: PUSH
76268: LD_EXP 103
76272: PPUSH
76273: CALL 60609 0 1
76277: ST_TO_ADDR
// if not list then
76278: LD_VAR 0 3
76282: NOT
76283: IFFALSE 76287
// exit ;
76285: GO 76931
// for i := 1 to list do
76287: LD_ADDR_VAR 0 1
76291: PUSH
76292: DOUBLE
76293: LD_INT 1
76295: DEC
76296: ST_TO_ADDR
76297: LD_VAR 0 3
76301: PUSH
76302: FOR_TO
76303: IFFALSE 76929
// begin depot := list [ i ] [ 2 ] ;
76305: LD_ADDR_VAR 0 8
76309: PUSH
76310: LD_VAR 0 3
76314: PUSH
76315: LD_VAR 0 1
76319: ARRAY
76320: PUSH
76321: LD_INT 2
76323: ARRAY
76324: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76325: LD_ADDR_VAR 0 5
76329: PUSH
76330: LD_VAR 0 3
76334: PUSH
76335: LD_VAR 0 1
76339: ARRAY
76340: PUSH
76341: LD_INT 1
76343: ARRAY
76344: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76345: LD_VAR 0 8
76349: PPUSH
76350: CALL_OW 301
76354: PUSH
76355: LD_VAR 0 5
76359: PUSH
76360: LD_VAR 0 8
76364: PPUSH
76365: CALL_OW 255
76369: NONEQUAL
76370: OR
76371: IFFALSE 76400
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76373: LD_ADDR_EXP 103
76377: PUSH
76378: LD_EXP 103
76382: PPUSH
76383: LD_VAR 0 8
76387: PPUSH
76388: LD_INT 0
76390: PPUSH
76391: CALL_OW 1
76395: ST_TO_ADDR
// exit ;
76396: POP
76397: POP
76398: GO 76931
// end ; x := list [ i ] [ 3 ] ;
76400: LD_ADDR_VAR 0 6
76404: PUSH
76405: LD_VAR 0 3
76409: PUSH
76410: LD_VAR 0 1
76414: ARRAY
76415: PUSH
76416: LD_INT 3
76418: ARRAY
76419: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76420: LD_ADDR_VAR 0 7
76424: PUSH
76425: LD_VAR 0 3
76429: PUSH
76430: LD_VAR 0 1
76434: ARRAY
76435: PUSH
76436: LD_INT 4
76438: ARRAY
76439: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76440: LD_ADDR_VAR 0 9
76444: PUSH
76445: LD_VAR 0 6
76449: PPUSH
76450: LD_VAR 0 7
76454: PPUSH
76455: LD_INT 16
76457: PPUSH
76458: CALL 59197 0 3
76462: ST_TO_ADDR
// if not cratesNearbyPoint then
76463: LD_VAR 0 9
76467: NOT
76468: IFFALSE 76474
// exit ;
76470: POP
76471: POP
76472: GO 76931
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76474: LD_ADDR_VAR 0 4
76478: PUSH
76479: LD_INT 22
76481: PUSH
76482: LD_VAR 0 5
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: PUSH
76491: LD_INT 3
76493: PUSH
76494: LD_INT 60
76496: PUSH
76497: EMPTY
76498: LIST
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 91
76506: PUSH
76507: LD_VAR 0 8
76511: PUSH
76512: LD_INT 6
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 2
76522: PUSH
76523: LD_INT 25
76525: PUSH
76526: LD_INT 2
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: PUSH
76533: LD_INT 25
76535: PUSH
76536: LD_INT 16
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: LIST
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: LIST
76552: LIST
76553: PPUSH
76554: CALL_OW 69
76558: PUSH
76559: LD_VAR 0 8
76563: PPUSH
76564: CALL_OW 313
76568: PPUSH
76569: LD_INT 3
76571: PUSH
76572: LD_INT 60
76574: PUSH
76575: EMPTY
76576: LIST
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 2
76584: PUSH
76585: LD_INT 25
76587: PUSH
76588: LD_INT 2
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: LD_INT 25
76597: PUSH
76598: LD_INT 16
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: EMPTY
76606: LIST
76607: LIST
76608: LIST
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PPUSH
76614: CALL_OW 72
76618: UNION
76619: ST_TO_ADDR
// if tmp then
76620: LD_VAR 0 4
76624: IFFALSE 76704
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76626: LD_ADDR_VAR 0 4
76630: PUSH
76631: LD_VAR 0 4
76635: PPUSH
76636: LD_INT 3
76638: PPUSH
76639: CALL 57166 0 2
76643: ST_TO_ADDR
// for j in tmp do
76644: LD_ADDR_VAR 0 2
76648: PUSH
76649: LD_VAR 0 4
76653: PUSH
76654: FOR_IN
76655: IFFALSE 76698
// begin if IsInUnit ( j ) then
76657: LD_VAR 0 2
76661: PPUSH
76662: CALL_OW 310
76666: IFFALSE 76677
// ComExit ( j ) ;
76668: LD_VAR 0 2
76672: PPUSH
76673: CALL 57249 0 1
// AddComCollect ( j , x , y ) ;
76677: LD_VAR 0 2
76681: PPUSH
76682: LD_VAR 0 6
76686: PPUSH
76687: LD_VAR 0 7
76691: PPUSH
76692: CALL_OW 177
// end ;
76696: GO 76654
76698: POP
76699: POP
// exit ;
76700: POP
76701: POP
76702: GO 76931
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76704: LD_ADDR_VAR 0 4
76708: PUSH
76709: LD_INT 22
76711: PUSH
76712: LD_VAR 0 5
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: PUSH
76721: LD_INT 91
76723: PUSH
76724: LD_VAR 0 8
76728: PUSH
76729: LD_INT 8
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: LIST
76736: PUSH
76737: LD_INT 2
76739: PUSH
76740: LD_INT 34
76742: PUSH
76743: LD_INT 12
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: PUSH
76750: LD_INT 34
76752: PUSH
76753: LD_INT 51
76755: PUSH
76756: EMPTY
76757: LIST
76758: LIST
76759: PUSH
76760: LD_INT 34
76762: PUSH
76763: LD_INT 32
76765: PUSH
76766: EMPTY
76767: LIST
76768: LIST
76769: PUSH
76770: LD_INT 34
76772: PUSH
76773: LD_INT 89
76775: PUSH
76776: EMPTY
76777: LIST
76778: LIST
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: LIST
76791: PPUSH
76792: CALL_OW 69
76796: ST_TO_ADDR
// if tmp then
76797: LD_VAR 0 4
76801: IFFALSE 76927
// begin for j in tmp do
76803: LD_ADDR_VAR 0 2
76807: PUSH
76808: LD_VAR 0 4
76812: PUSH
76813: FOR_IN
76814: IFFALSE 76925
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76816: LD_VAR 0 2
76820: PPUSH
76821: CALL_OW 262
76825: PUSH
76826: LD_INT 3
76828: EQUAL
76829: PUSH
76830: LD_VAR 0 2
76834: PPUSH
76835: CALL_OW 261
76839: PUSH
76840: LD_INT 20
76842: GREATER
76843: OR
76844: PUSH
76845: LD_VAR 0 2
76849: PPUSH
76850: CALL_OW 314
76854: NOT
76855: AND
76856: PUSH
76857: LD_VAR 0 2
76861: PPUSH
76862: CALL_OW 263
76866: PUSH
76867: LD_INT 1
76869: NONEQUAL
76870: PUSH
76871: LD_VAR 0 2
76875: PPUSH
76876: CALL_OW 311
76880: OR
76881: AND
76882: IFFALSE 76923
// begin ComCollect ( j , x , y ) ;
76884: LD_VAR 0 2
76888: PPUSH
76889: LD_VAR 0 6
76893: PPUSH
76894: LD_VAR 0 7
76898: PPUSH
76899: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
76903: LD_VAR 0 2
76907: PPUSH
76908: LD_VAR 0 8
76912: PPUSH
76913: CALL_OW 172
// exit ;
76917: POP
76918: POP
76919: POP
76920: POP
76921: GO 76931
// end ;
76923: GO 76813
76925: POP
76926: POP
// end ; end ;
76927: GO 76302
76929: POP
76930: POP
// end ; end_of_file
76931: PPOPN 9
76933: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76934: LD_VAR 0 1
76938: PUSH
76939: LD_INT 200
76941: DOUBLE
76942: GREATEREQUAL
76943: IFFALSE 76951
76945: LD_INT 299
76947: DOUBLE
76948: LESSEQUAL
76949: IFTRUE 76953
76951: GO 76985
76953: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76954: LD_VAR 0 1
76958: PPUSH
76959: LD_VAR 0 2
76963: PPUSH
76964: LD_VAR 0 3
76968: PPUSH
76969: LD_VAR 0 4
76973: PPUSH
76974: LD_VAR 0 5
76978: PPUSH
76979: CALL 77473 0 5
76983: GO 77062
76985: LD_INT 300
76987: DOUBLE
76988: GREATEREQUAL
76989: IFFALSE 76997
76991: LD_INT 399
76993: DOUBLE
76994: LESSEQUAL
76995: IFTRUE 76999
76997: GO 77061
76999: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77000: LD_VAR 0 1
77004: PPUSH
77005: LD_VAR 0 2
77009: PPUSH
77010: LD_VAR 0 3
77014: PPUSH
77015: LD_VAR 0 4
77019: PPUSH
77020: LD_VAR 0 5
77024: PPUSH
77025: LD_VAR 0 6
77029: PPUSH
77030: LD_VAR 0 7
77034: PPUSH
77035: LD_VAR 0 8
77039: PPUSH
77040: LD_VAR 0 9
77044: PPUSH
77045: LD_VAR 0 10
77049: PPUSH
77050: LD_VAR 0 11
77054: PPUSH
77055: CALL 73635 0 11
77059: GO 77062
77061: POP
// end ;
77062: PPOPN 11
77064: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77065: LD_VAR 0 1
77069: PPUSH
77070: LD_VAR 0 2
77074: PPUSH
77075: LD_VAR 0 3
77079: PPUSH
77080: LD_VAR 0 4
77084: PPUSH
77085: LD_VAR 0 5
77089: PPUSH
77090: CALL 77209 0 5
// end ; end_of_file
77094: PPOPN 5
77096: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
77097: LD_INT 0
77099: PPUSH
77100: PPUSH
77101: PPUSH
77102: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
77103: LD_VAR 0 1
77107: PPUSH
77108: CALL_OW 264
77112: PUSH
77113: LD_INT 91
77115: EQUAL
77116: IFFALSE 77188
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
77118: LD_INT 68
77120: PPUSH
77121: LD_VAR 0 1
77125: PPUSH
77126: CALL_OW 255
77130: PPUSH
77131: CALL_OW 321
77135: PUSH
77136: LD_INT 2
77138: EQUAL
77139: IFFALSE 77151
// eff := 70 else
77141: LD_ADDR_VAR 0 4
77145: PUSH
77146: LD_INT 70
77148: ST_TO_ADDR
77149: GO 77159
// eff := 30 ;
77151: LD_ADDR_VAR 0 4
77155: PUSH
77156: LD_INT 30
77158: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
77159: LD_VAR 0 1
77163: PPUSH
77164: CALL_OW 250
77168: PPUSH
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL_OW 251
77178: PPUSH
77179: LD_VAR 0 4
77183: PPUSH
77184: CALL_OW 495
// end ; end ;
77188: LD_VAR 0 2
77192: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77193: LD_INT 0
77195: PPUSH
// end ;
77196: LD_VAR 0 4
77200: RET
// export function SOS_Command ( cmd ) ; begin
77201: LD_INT 0
77203: PPUSH
// end ;
77204: LD_VAR 0 2
77208: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77209: LD_INT 0
77211: PPUSH
// end ;
77212: LD_VAR 0 6
77216: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
77217: LD_INT 0
77219: PPUSH
77220: PPUSH
// if not vehicle or not factory then
77221: LD_VAR 0 1
77225: NOT
77226: PUSH
77227: LD_VAR 0 2
77231: NOT
77232: OR
77233: IFFALSE 77237
// exit ;
77235: GO 77468
// if factoryWaypoints >= factory then
77237: LD_EXP 102
77241: PUSH
77242: LD_VAR 0 2
77246: GREATEREQUAL
77247: IFFALSE 77468
// if factoryWaypoints [ factory ] then
77249: LD_EXP 102
77253: PUSH
77254: LD_VAR 0 2
77258: ARRAY
77259: IFFALSE 77468
// begin if GetControl ( vehicle ) = control_manual then
77261: LD_VAR 0 1
77265: PPUSH
77266: CALL_OW 263
77270: PUSH
77271: LD_INT 1
77273: EQUAL
77274: IFFALSE 77355
// begin driver := IsDrivenBy ( vehicle ) ;
77276: LD_ADDR_VAR 0 4
77280: PUSH
77281: LD_VAR 0 1
77285: PPUSH
77286: CALL_OW 311
77290: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77291: LD_VAR 0 4
77295: PPUSH
77296: LD_EXP 102
77300: PUSH
77301: LD_VAR 0 2
77305: ARRAY
77306: PUSH
77307: LD_INT 3
77309: ARRAY
77310: PPUSH
77311: LD_EXP 102
77315: PUSH
77316: LD_VAR 0 2
77320: ARRAY
77321: PUSH
77322: LD_INT 4
77324: ARRAY
77325: PPUSH
77326: CALL_OW 171
// AddComExitVehicle ( driver ) ;
77330: LD_VAR 0 4
77334: PPUSH
77335: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
77339: LD_VAR 0 4
77343: PPUSH
77344: LD_VAR 0 2
77348: PPUSH
77349: CALL_OW 180
// end else
77353: GO 77468
// if GetControl ( vehicle ) = control_remote then
77355: LD_VAR 0 1
77359: PPUSH
77360: CALL_OW 263
77364: PUSH
77365: LD_INT 2
77367: EQUAL
77368: IFFALSE 77429
// begin wait ( 0 0$2 ) ;
77370: LD_INT 70
77372: PPUSH
77373: CALL_OW 67
// if Connect ( vehicle ) then
77377: LD_VAR 0 1
77381: PPUSH
77382: CALL 27457 0 1
77386: IFFALSE 77427
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77388: LD_VAR 0 1
77392: PPUSH
77393: LD_EXP 102
77397: PUSH
77398: LD_VAR 0 2
77402: ARRAY
77403: PUSH
77404: LD_INT 3
77406: ARRAY
77407: PPUSH
77408: LD_EXP 102
77412: PUSH
77413: LD_VAR 0 2
77417: ARRAY
77418: PUSH
77419: LD_INT 4
77421: ARRAY
77422: PPUSH
77423: CALL_OW 171
// end else
77427: GO 77468
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
77429: LD_VAR 0 1
77433: PPUSH
77434: LD_EXP 102
77438: PUSH
77439: LD_VAR 0 2
77443: ARRAY
77444: PUSH
77445: LD_INT 3
77447: ARRAY
77448: PPUSH
77449: LD_EXP 102
77453: PUSH
77454: LD_VAR 0 2
77458: ARRAY
77459: PUSH
77460: LD_INT 4
77462: ARRAY
77463: PPUSH
77464: CALL_OW 171
// end ; end ;
77468: LD_VAR 0 3
77472: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77473: LD_INT 0
77475: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77476: LD_VAR 0 1
77480: PUSH
77481: LD_INT 250
77483: EQUAL
77484: PUSH
77485: LD_VAR 0 2
77489: PPUSH
77490: CALL_OW 264
77494: PUSH
77495: LD_INT 81
77497: EQUAL
77498: AND
77499: IFFALSE 77520
// MinerPlaceMine ( unit , x , y ) ;
77501: LD_VAR 0 2
77505: PPUSH
77506: LD_VAR 0 4
77510: PPUSH
77511: LD_VAR 0 5
77515: PPUSH
77516: CALL 80344 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77520: LD_VAR 0 1
77524: PUSH
77525: LD_INT 251
77527: EQUAL
77528: PUSH
77529: LD_VAR 0 2
77533: PPUSH
77534: CALL_OW 264
77538: PUSH
77539: LD_INT 81
77541: EQUAL
77542: AND
77543: IFFALSE 77564
// MinerDetonateMine ( unit , x , y ) ;
77545: LD_VAR 0 2
77549: PPUSH
77550: LD_VAR 0 4
77554: PPUSH
77555: LD_VAR 0 5
77559: PPUSH
77560: CALL 80619 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
77564: LD_VAR 0 1
77568: PUSH
77569: LD_INT 252
77571: EQUAL
77572: PUSH
77573: LD_VAR 0 2
77577: PPUSH
77578: CALL_OW 264
77582: PUSH
77583: LD_INT 81
77585: EQUAL
77586: AND
77587: IFFALSE 77608
// MinerCreateMinefield ( unit , x , y ) ;
77589: LD_VAR 0 2
77593: PPUSH
77594: LD_VAR 0 4
77598: PPUSH
77599: LD_VAR 0 5
77603: PPUSH
77604: CALL 81036 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
77608: LD_VAR 0 1
77612: PUSH
77613: LD_INT 253
77615: EQUAL
77616: PUSH
77617: LD_VAR 0 2
77621: PPUSH
77622: CALL_OW 257
77626: PUSH
77627: LD_INT 5
77629: EQUAL
77630: AND
77631: IFFALSE 77652
// ComBinocular ( unit , x , y ) ;
77633: LD_VAR 0 2
77637: PPUSH
77638: LD_VAR 0 4
77642: PPUSH
77643: LD_VAR 0 5
77647: PPUSH
77648: CALL 81405 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
77652: LD_VAR 0 1
77656: PUSH
77657: LD_INT 254
77659: EQUAL
77660: PUSH
77661: LD_VAR 0 2
77665: PPUSH
77666: CALL_OW 264
77670: PUSH
77671: LD_INT 99
77673: EQUAL
77674: AND
77675: PUSH
77676: LD_VAR 0 3
77680: PPUSH
77681: CALL_OW 263
77685: PUSH
77686: LD_INT 3
77688: EQUAL
77689: AND
77690: IFFALSE 77706
// HackDestroyVehicle ( unit , selectedUnit ) ;
77692: LD_VAR 0 2
77696: PPUSH
77697: LD_VAR 0 3
77701: PPUSH
77702: CALL 79708 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
77706: LD_VAR 0 1
77710: PUSH
77711: LD_INT 255
77713: EQUAL
77714: PUSH
77715: LD_VAR 0 2
77719: PPUSH
77720: CALL_OW 264
77724: PUSH
77725: LD_INT 14
77727: PUSH
77728: LD_INT 53
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: IN
77735: AND
77736: PUSH
77737: LD_VAR 0 4
77741: PPUSH
77742: LD_VAR 0 5
77746: PPUSH
77747: CALL_OW 488
77751: AND
77752: IFFALSE 77776
// CutTreeXYR ( unit , x , y , 12 ) ;
77754: LD_VAR 0 2
77758: PPUSH
77759: LD_VAR 0 4
77763: PPUSH
77764: LD_VAR 0 5
77768: PPUSH
77769: LD_INT 12
77771: PPUSH
77772: CALL 77871 0 4
// if cmd = 256 then
77776: LD_VAR 0 1
77780: PUSH
77781: LD_INT 256
77783: EQUAL
77784: IFFALSE 77805
// SetFactoryWaypoint ( unit , x , y ) ;
77786: LD_VAR 0 2
77790: PPUSH
77791: LD_VAR 0 4
77795: PPUSH
77796: LD_VAR 0 5
77800: PPUSH
77801: CALL 75623 0 3
// if cmd = 257 then
77805: LD_VAR 0 1
77809: PUSH
77810: LD_INT 257
77812: EQUAL
77813: IFFALSE 77834
// SetWarehouseGatheringPoint ( unit , x , y ) ;
77815: LD_VAR 0 2
77819: PPUSH
77820: LD_VAR 0 4
77824: PPUSH
77825: LD_VAR 0 5
77829: PPUSH
77830: CALL 75985 0 3
// if cmd = 258 then
77834: LD_VAR 0 1
77838: PUSH
77839: LD_INT 258
77841: EQUAL
77842: IFFALSE 77866
// BurnTreeXYR ( unit , x , y , 8 ) ;
77844: LD_VAR 0 2
77848: PPUSH
77849: LD_VAR 0 4
77853: PPUSH
77854: LD_VAR 0 5
77858: PPUSH
77859: LD_INT 8
77861: PPUSH
77862: CALL 78265 0 4
// end ;
77866: LD_VAR 0 6
77870: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
77871: LD_INT 0
77873: PPUSH
77874: PPUSH
77875: PPUSH
77876: PPUSH
77877: PPUSH
77878: PPUSH
77879: PPUSH
77880: PPUSH
77881: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
77882: LD_VAR 0 1
77886: PPUSH
77887: CALL_OW 302
77891: NOT
77892: PUSH
77893: LD_VAR 0 2
77897: PPUSH
77898: LD_VAR 0 3
77902: PPUSH
77903: CALL_OW 488
77907: NOT
77908: OR
77909: PUSH
77910: LD_VAR 0 4
77914: NOT
77915: OR
77916: IFFALSE 77920
// exit ;
77918: GO 78260
// list := [ ] ;
77920: LD_ADDR_VAR 0 13
77924: PUSH
77925: EMPTY
77926: ST_TO_ADDR
// if x - r < 0 then
77927: LD_VAR 0 2
77931: PUSH
77932: LD_VAR 0 4
77936: MINUS
77937: PUSH
77938: LD_INT 0
77940: LESS
77941: IFFALSE 77953
// min_x := 0 else
77943: LD_ADDR_VAR 0 7
77947: PUSH
77948: LD_INT 0
77950: ST_TO_ADDR
77951: GO 77969
// min_x := x - r ;
77953: LD_ADDR_VAR 0 7
77957: PUSH
77958: LD_VAR 0 2
77962: PUSH
77963: LD_VAR 0 4
77967: MINUS
77968: ST_TO_ADDR
// if y - r < 0 then
77969: LD_VAR 0 3
77973: PUSH
77974: LD_VAR 0 4
77978: MINUS
77979: PUSH
77980: LD_INT 0
77982: LESS
77983: IFFALSE 77995
// min_y := 0 else
77985: LD_ADDR_VAR 0 8
77989: PUSH
77990: LD_INT 0
77992: ST_TO_ADDR
77993: GO 78011
// min_y := y - r ;
77995: LD_ADDR_VAR 0 8
77999: PUSH
78000: LD_VAR 0 3
78004: PUSH
78005: LD_VAR 0 4
78009: MINUS
78010: ST_TO_ADDR
// max_x := x + r ;
78011: LD_ADDR_VAR 0 9
78015: PUSH
78016: LD_VAR 0 2
78020: PUSH
78021: LD_VAR 0 4
78025: PLUS
78026: ST_TO_ADDR
// max_y := y + r ;
78027: LD_ADDR_VAR 0 10
78031: PUSH
78032: LD_VAR 0 3
78036: PUSH
78037: LD_VAR 0 4
78041: PLUS
78042: ST_TO_ADDR
// for _x = min_x to max_x do
78043: LD_ADDR_VAR 0 11
78047: PUSH
78048: DOUBLE
78049: LD_VAR 0 7
78053: DEC
78054: ST_TO_ADDR
78055: LD_VAR 0 9
78059: PUSH
78060: FOR_TO
78061: IFFALSE 78178
// for _y = min_y to max_y do
78063: LD_ADDR_VAR 0 12
78067: PUSH
78068: DOUBLE
78069: LD_VAR 0 8
78073: DEC
78074: ST_TO_ADDR
78075: LD_VAR 0 10
78079: PUSH
78080: FOR_TO
78081: IFFALSE 78174
// begin if not ValidHex ( _x , _y ) then
78083: LD_VAR 0 11
78087: PPUSH
78088: LD_VAR 0 12
78092: PPUSH
78093: CALL_OW 488
78097: NOT
78098: IFFALSE 78102
// continue ;
78100: GO 78080
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78102: LD_VAR 0 11
78106: PPUSH
78107: LD_VAR 0 12
78111: PPUSH
78112: CALL_OW 351
78116: PUSH
78117: LD_VAR 0 11
78121: PPUSH
78122: LD_VAR 0 12
78126: PPUSH
78127: CALL_OW 554
78131: AND
78132: IFFALSE 78172
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78134: LD_ADDR_VAR 0 13
78138: PUSH
78139: LD_VAR 0 13
78143: PPUSH
78144: LD_VAR 0 13
78148: PUSH
78149: LD_INT 1
78151: PLUS
78152: PPUSH
78153: LD_VAR 0 11
78157: PUSH
78158: LD_VAR 0 12
78162: PUSH
78163: EMPTY
78164: LIST
78165: LIST
78166: PPUSH
78167: CALL_OW 2
78171: ST_TO_ADDR
// end ;
78172: GO 78080
78174: POP
78175: POP
78176: GO 78060
78178: POP
78179: POP
// if not list then
78180: LD_VAR 0 13
78184: NOT
78185: IFFALSE 78189
// exit ;
78187: GO 78260
// for i in list do
78189: LD_ADDR_VAR 0 6
78193: PUSH
78194: LD_VAR 0 13
78198: PUSH
78199: FOR_IN
78200: IFFALSE 78258
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
78202: LD_VAR 0 1
78206: PPUSH
78207: LD_STRING M
78209: PUSH
78210: LD_VAR 0 6
78214: PUSH
78215: LD_INT 1
78217: ARRAY
78218: PUSH
78219: LD_VAR 0 6
78223: PUSH
78224: LD_INT 2
78226: ARRAY
78227: PUSH
78228: LD_INT 0
78230: PUSH
78231: LD_INT 0
78233: PUSH
78234: LD_INT 0
78236: PUSH
78237: LD_INT 0
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: PUSH
78249: EMPTY
78250: LIST
78251: PPUSH
78252: CALL_OW 447
78256: GO 78199
78258: POP
78259: POP
// end ;
78260: LD_VAR 0 5
78264: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78265: LD_INT 0
78267: PPUSH
78268: PPUSH
78269: PPUSH
78270: PPUSH
78271: PPUSH
78272: PPUSH
78273: PPUSH
78274: PPUSH
78275: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
78276: LD_VAR 0 1
78280: PPUSH
78281: CALL_OW 302
78285: NOT
78286: PUSH
78287: LD_VAR 0 2
78291: PPUSH
78292: LD_VAR 0 3
78296: PPUSH
78297: CALL_OW 488
78301: NOT
78302: OR
78303: PUSH
78304: LD_VAR 0 4
78308: NOT
78309: OR
78310: IFFALSE 78314
// exit ;
78312: GO 78662
// list := [ ] ;
78314: LD_ADDR_VAR 0 13
78318: PUSH
78319: EMPTY
78320: ST_TO_ADDR
// if x - r < 0 then
78321: LD_VAR 0 2
78325: PUSH
78326: LD_VAR 0 4
78330: MINUS
78331: PUSH
78332: LD_INT 0
78334: LESS
78335: IFFALSE 78347
// min_x := 0 else
78337: LD_ADDR_VAR 0 7
78341: PUSH
78342: LD_INT 0
78344: ST_TO_ADDR
78345: GO 78363
// min_x := x - r ;
78347: LD_ADDR_VAR 0 7
78351: PUSH
78352: LD_VAR 0 2
78356: PUSH
78357: LD_VAR 0 4
78361: MINUS
78362: ST_TO_ADDR
// if y - r < 0 then
78363: LD_VAR 0 3
78367: PUSH
78368: LD_VAR 0 4
78372: MINUS
78373: PUSH
78374: LD_INT 0
78376: LESS
78377: IFFALSE 78389
// min_y := 0 else
78379: LD_ADDR_VAR 0 8
78383: PUSH
78384: LD_INT 0
78386: ST_TO_ADDR
78387: GO 78405
// min_y := y - r ;
78389: LD_ADDR_VAR 0 8
78393: PUSH
78394: LD_VAR 0 3
78398: PUSH
78399: LD_VAR 0 4
78403: MINUS
78404: ST_TO_ADDR
// max_x := x + r ;
78405: LD_ADDR_VAR 0 9
78409: PUSH
78410: LD_VAR 0 2
78414: PUSH
78415: LD_VAR 0 4
78419: PLUS
78420: ST_TO_ADDR
// max_y := y + r ;
78421: LD_ADDR_VAR 0 10
78425: PUSH
78426: LD_VAR 0 3
78430: PUSH
78431: LD_VAR 0 4
78435: PLUS
78436: ST_TO_ADDR
// for _x = min_x to max_x do
78437: LD_ADDR_VAR 0 11
78441: PUSH
78442: DOUBLE
78443: LD_VAR 0 7
78447: DEC
78448: ST_TO_ADDR
78449: LD_VAR 0 9
78453: PUSH
78454: FOR_TO
78455: IFFALSE 78572
// for _y = min_y to max_y do
78457: LD_ADDR_VAR 0 12
78461: PUSH
78462: DOUBLE
78463: LD_VAR 0 8
78467: DEC
78468: ST_TO_ADDR
78469: LD_VAR 0 10
78473: PUSH
78474: FOR_TO
78475: IFFALSE 78568
// begin if not ValidHex ( _x , _y ) then
78477: LD_VAR 0 11
78481: PPUSH
78482: LD_VAR 0 12
78486: PPUSH
78487: CALL_OW 488
78491: NOT
78492: IFFALSE 78496
// continue ;
78494: GO 78474
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78496: LD_VAR 0 11
78500: PPUSH
78501: LD_VAR 0 12
78505: PPUSH
78506: CALL_OW 351
78510: PUSH
78511: LD_VAR 0 11
78515: PPUSH
78516: LD_VAR 0 12
78520: PPUSH
78521: CALL_OW 554
78525: AND
78526: IFFALSE 78566
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78528: LD_ADDR_VAR 0 13
78532: PUSH
78533: LD_VAR 0 13
78537: PPUSH
78538: LD_VAR 0 13
78542: PUSH
78543: LD_INT 1
78545: PLUS
78546: PPUSH
78547: LD_VAR 0 11
78551: PUSH
78552: LD_VAR 0 12
78556: PUSH
78557: EMPTY
78558: LIST
78559: LIST
78560: PPUSH
78561: CALL_OW 2
78565: ST_TO_ADDR
// end ;
78566: GO 78474
78568: POP
78569: POP
78570: GO 78454
78572: POP
78573: POP
// if not list then
78574: LD_VAR 0 13
78578: NOT
78579: IFFALSE 78583
// exit ;
78581: GO 78662
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
78583: LD_ADDR_VAR 0 13
78587: PUSH
78588: LD_VAR 0 1
78592: PPUSH
78593: LD_VAR 0 13
78597: PPUSH
78598: LD_INT 1
78600: PPUSH
78601: LD_INT 1
78603: PPUSH
78604: CALL 24599 0 4
78608: ST_TO_ADDR
// ComStop ( flame ) ;
78609: LD_VAR 0 1
78613: PPUSH
78614: CALL_OW 141
// for i in list do
78618: LD_ADDR_VAR 0 6
78622: PUSH
78623: LD_VAR 0 13
78627: PUSH
78628: FOR_IN
78629: IFFALSE 78660
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
78631: LD_VAR 0 1
78635: PPUSH
78636: LD_VAR 0 6
78640: PUSH
78641: LD_INT 1
78643: ARRAY
78644: PPUSH
78645: LD_VAR 0 6
78649: PUSH
78650: LD_INT 2
78652: ARRAY
78653: PPUSH
78654: CALL_OW 176
78658: GO 78628
78660: POP
78661: POP
// end ;
78662: LD_VAR 0 5
78666: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
78667: LD_EXP 105
78671: NOT
78672: IFFALSE 78722
78674: GO 78676
78676: DISABLE
// begin initHack := true ;
78677: LD_ADDR_EXP 105
78681: PUSH
78682: LD_INT 1
78684: ST_TO_ADDR
// hackTanks := [ ] ;
78685: LD_ADDR_EXP 106
78689: PUSH
78690: EMPTY
78691: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
78692: LD_ADDR_EXP 107
78696: PUSH
78697: EMPTY
78698: ST_TO_ADDR
// hackLimit := 3 ;
78699: LD_ADDR_EXP 108
78703: PUSH
78704: LD_INT 3
78706: ST_TO_ADDR
// hackDist := 12 ;
78707: LD_ADDR_EXP 109
78711: PUSH
78712: LD_INT 12
78714: ST_TO_ADDR
// hackCounter := [ ] ;
78715: LD_ADDR_EXP 110
78719: PUSH
78720: EMPTY
78721: ST_TO_ADDR
// end ;
78722: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
78723: LD_EXP 105
78727: PUSH
78728: LD_INT 34
78730: PUSH
78731: LD_INT 99
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: PPUSH
78738: CALL_OW 69
78742: AND
78743: IFFALSE 78996
78745: GO 78747
78747: DISABLE
78748: LD_INT 0
78750: PPUSH
78751: PPUSH
// begin enable ;
78752: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
78753: LD_ADDR_VAR 0 1
78757: PUSH
78758: LD_INT 34
78760: PUSH
78761: LD_INT 99
78763: PUSH
78764: EMPTY
78765: LIST
78766: LIST
78767: PPUSH
78768: CALL_OW 69
78772: PUSH
78773: FOR_IN
78774: IFFALSE 78994
// begin if not i in hackTanks then
78776: LD_VAR 0 1
78780: PUSH
78781: LD_EXP 106
78785: IN
78786: NOT
78787: IFFALSE 78870
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
78789: LD_ADDR_EXP 106
78793: PUSH
78794: LD_EXP 106
78798: PPUSH
78799: LD_EXP 106
78803: PUSH
78804: LD_INT 1
78806: PLUS
78807: PPUSH
78808: LD_VAR 0 1
78812: PPUSH
78813: CALL_OW 1
78817: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
78818: LD_ADDR_EXP 107
78822: PUSH
78823: LD_EXP 107
78827: PPUSH
78828: LD_EXP 107
78832: PUSH
78833: LD_INT 1
78835: PLUS
78836: PPUSH
78837: EMPTY
78838: PPUSH
78839: CALL_OW 1
78843: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
78844: LD_ADDR_EXP 110
78848: PUSH
78849: LD_EXP 110
78853: PPUSH
78854: LD_EXP 110
78858: PUSH
78859: LD_INT 1
78861: PLUS
78862: PPUSH
78863: EMPTY
78864: PPUSH
78865: CALL_OW 1
78869: ST_TO_ADDR
// end ; if not IsOk ( i ) then
78870: LD_VAR 0 1
78874: PPUSH
78875: CALL_OW 302
78879: NOT
78880: IFFALSE 78893
// begin HackUnlinkAll ( i ) ;
78882: LD_VAR 0 1
78886: PPUSH
78887: CALL 78999 0 1
// continue ;
78891: GO 78773
// end ; HackCheckCapturedStatus ( i ) ;
78893: LD_VAR 0 1
78897: PPUSH
78898: CALL 79442 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
78902: LD_ADDR_VAR 0 2
78906: PUSH
78907: LD_INT 81
78909: PUSH
78910: LD_VAR 0 1
78914: PPUSH
78915: CALL_OW 255
78919: PUSH
78920: EMPTY
78921: LIST
78922: LIST
78923: PUSH
78924: LD_INT 33
78926: PUSH
78927: LD_INT 3
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: PUSH
78934: LD_INT 91
78936: PUSH
78937: LD_VAR 0 1
78941: PUSH
78942: LD_EXP 109
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: LIST
78951: PUSH
78952: LD_INT 50
78954: PUSH
78955: EMPTY
78956: LIST
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: PPUSH
78964: CALL_OW 69
78968: ST_TO_ADDR
// if not tmp then
78969: LD_VAR 0 2
78973: NOT
78974: IFFALSE 78978
// continue ;
78976: GO 78773
// HackLink ( i , tmp ) ;
78978: LD_VAR 0 1
78982: PPUSH
78983: LD_VAR 0 2
78987: PPUSH
78988: CALL 79135 0 2
// end ;
78992: GO 78773
78994: POP
78995: POP
// end ;
78996: PPOPN 2
78998: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
78999: LD_INT 0
79001: PPUSH
79002: PPUSH
79003: PPUSH
// if not hack in hackTanks then
79004: LD_VAR 0 1
79008: PUSH
79009: LD_EXP 106
79013: IN
79014: NOT
79015: IFFALSE 79019
// exit ;
79017: GO 79130
// index := GetElementIndex ( hackTanks , hack ) ;
79019: LD_ADDR_VAR 0 4
79023: PUSH
79024: LD_EXP 106
79028: PPUSH
79029: LD_VAR 0 1
79033: PPUSH
79034: CALL 23896 0 2
79038: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79039: LD_EXP 107
79043: PUSH
79044: LD_VAR 0 4
79048: ARRAY
79049: IFFALSE 79130
// begin for i in hackTanksCaptured [ index ] do
79051: LD_ADDR_VAR 0 3
79055: PUSH
79056: LD_EXP 107
79060: PUSH
79061: LD_VAR 0 4
79065: ARRAY
79066: PUSH
79067: FOR_IN
79068: IFFALSE 79094
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79070: LD_VAR 0 3
79074: PUSH
79075: LD_INT 1
79077: ARRAY
79078: PPUSH
79079: LD_VAR 0 3
79083: PUSH
79084: LD_INT 2
79086: ARRAY
79087: PPUSH
79088: CALL_OW 235
79092: GO 79067
79094: POP
79095: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79096: LD_ADDR_EXP 107
79100: PUSH
79101: LD_EXP 107
79105: PPUSH
79106: LD_VAR 0 4
79110: PPUSH
79111: EMPTY
79112: PPUSH
79113: CALL_OW 1
79117: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79118: LD_VAR 0 1
79122: PPUSH
79123: LD_INT 0
79125: PPUSH
79126: CALL_OW 505
// end ; end ;
79130: LD_VAR 0 2
79134: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79135: LD_INT 0
79137: PPUSH
79138: PPUSH
79139: PPUSH
// if not hack in hackTanks or not vehicles then
79140: LD_VAR 0 1
79144: PUSH
79145: LD_EXP 106
79149: IN
79150: NOT
79151: PUSH
79152: LD_VAR 0 2
79156: NOT
79157: OR
79158: IFFALSE 79162
// exit ;
79160: GO 79437
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79162: LD_ADDR_VAR 0 2
79166: PUSH
79167: LD_VAR 0 1
79171: PPUSH
79172: LD_VAR 0 2
79176: PPUSH
79177: LD_INT 1
79179: PPUSH
79180: LD_INT 1
79182: PPUSH
79183: CALL 24546 0 4
79187: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79188: LD_ADDR_VAR 0 5
79192: PUSH
79193: LD_EXP 106
79197: PPUSH
79198: LD_VAR 0 1
79202: PPUSH
79203: CALL 23896 0 2
79207: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79208: LD_EXP 107
79212: PUSH
79213: LD_VAR 0 5
79217: ARRAY
79218: PUSH
79219: LD_EXP 108
79223: LESS
79224: IFFALSE 79413
// begin for i := 1 to vehicles do
79226: LD_ADDR_VAR 0 4
79230: PUSH
79231: DOUBLE
79232: LD_INT 1
79234: DEC
79235: ST_TO_ADDR
79236: LD_VAR 0 2
79240: PUSH
79241: FOR_TO
79242: IFFALSE 79411
// begin if hackTanksCaptured [ index ] = hackLimit then
79244: LD_EXP 107
79248: PUSH
79249: LD_VAR 0 5
79253: ARRAY
79254: PUSH
79255: LD_EXP 108
79259: EQUAL
79260: IFFALSE 79264
// break ;
79262: GO 79411
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79264: LD_ADDR_EXP 110
79268: PUSH
79269: LD_EXP 110
79273: PPUSH
79274: LD_VAR 0 5
79278: PPUSH
79279: LD_EXP 110
79283: PUSH
79284: LD_VAR 0 5
79288: ARRAY
79289: PUSH
79290: LD_INT 1
79292: PLUS
79293: PPUSH
79294: CALL_OW 1
79298: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79299: LD_ADDR_EXP 107
79303: PUSH
79304: LD_EXP 107
79308: PPUSH
79309: LD_VAR 0 5
79313: PUSH
79314: LD_EXP 107
79318: PUSH
79319: LD_VAR 0 5
79323: ARRAY
79324: PUSH
79325: LD_INT 1
79327: PLUS
79328: PUSH
79329: EMPTY
79330: LIST
79331: LIST
79332: PPUSH
79333: LD_VAR 0 2
79337: PUSH
79338: LD_VAR 0 4
79342: ARRAY
79343: PUSH
79344: LD_VAR 0 2
79348: PUSH
79349: LD_VAR 0 4
79353: ARRAY
79354: PPUSH
79355: CALL_OW 255
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: PPUSH
79364: CALL 24111 0 3
79368: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79369: LD_VAR 0 2
79373: PUSH
79374: LD_VAR 0 4
79378: ARRAY
79379: PPUSH
79380: LD_VAR 0 1
79384: PPUSH
79385: CALL_OW 255
79389: PPUSH
79390: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79394: LD_VAR 0 2
79398: PUSH
79399: LD_VAR 0 4
79403: ARRAY
79404: PPUSH
79405: CALL_OW 141
// end ;
79409: GO 79241
79411: POP
79412: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79413: LD_VAR 0 1
79417: PPUSH
79418: LD_EXP 107
79422: PUSH
79423: LD_VAR 0 5
79427: ARRAY
79428: PUSH
79429: LD_INT 0
79431: PLUS
79432: PPUSH
79433: CALL_OW 505
// end ;
79437: LD_VAR 0 3
79441: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
79442: LD_INT 0
79444: PPUSH
79445: PPUSH
79446: PPUSH
79447: PPUSH
// if not hack in hackTanks then
79448: LD_VAR 0 1
79452: PUSH
79453: LD_EXP 106
79457: IN
79458: NOT
79459: IFFALSE 79463
// exit ;
79461: GO 79703
// index := GetElementIndex ( hackTanks , hack ) ;
79463: LD_ADDR_VAR 0 4
79467: PUSH
79468: LD_EXP 106
79472: PPUSH
79473: LD_VAR 0 1
79477: PPUSH
79478: CALL 23896 0 2
79482: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
79483: LD_ADDR_VAR 0 3
79487: PUSH
79488: DOUBLE
79489: LD_EXP 107
79493: PUSH
79494: LD_VAR 0 4
79498: ARRAY
79499: INC
79500: ST_TO_ADDR
79501: LD_INT 1
79503: PUSH
79504: FOR_DOWNTO
79505: IFFALSE 79677
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
79507: LD_ADDR_VAR 0 5
79511: PUSH
79512: LD_EXP 107
79516: PUSH
79517: LD_VAR 0 4
79521: ARRAY
79522: PUSH
79523: LD_VAR 0 3
79527: ARRAY
79528: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
79529: LD_VAR 0 5
79533: PUSH
79534: LD_INT 1
79536: ARRAY
79537: PPUSH
79538: CALL_OW 302
79542: NOT
79543: PUSH
79544: LD_VAR 0 5
79548: PUSH
79549: LD_INT 1
79551: ARRAY
79552: PPUSH
79553: CALL_OW 255
79557: PUSH
79558: LD_VAR 0 1
79562: PPUSH
79563: CALL_OW 255
79567: NONEQUAL
79568: OR
79569: IFFALSE 79675
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
79571: LD_VAR 0 5
79575: PUSH
79576: LD_INT 1
79578: ARRAY
79579: PPUSH
79580: CALL_OW 305
79584: PUSH
79585: LD_VAR 0 5
79589: PUSH
79590: LD_INT 1
79592: ARRAY
79593: PPUSH
79594: CALL_OW 255
79598: PUSH
79599: LD_VAR 0 1
79603: PPUSH
79604: CALL_OW 255
79608: EQUAL
79609: AND
79610: IFFALSE 79634
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
79612: LD_VAR 0 5
79616: PUSH
79617: LD_INT 1
79619: ARRAY
79620: PPUSH
79621: LD_VAR 0 5
79625: PUSH
79626: LD_INT 2
79628: ARRAY
79629: PPUSH
79630: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
79634: LD_ADDR_EXP 107
79638: PUSH
79639: LD_EXP 107
79643: PPUSH
79644: LD_VAR 0 4
79648: PPUSH
79649: LD_EXP 107
79653: PUSH
79654: LD_VAR 0 4
79658: ARRAY
79659: PPUSH
79660: LD_VAR 0 3
79664: PPUSH
79665: CALL_OW 3
79669: PPUSH
79670: CALL_OW 1
79674: ST_TO_ADDR
// end ; end ;
79675: GO 79504
79677: POP
79678: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
79679: LD_VAR 0 1
79683: PPUSH
79684: LD_EXP 107
79688: PUSH
79689: LD_VAR 0 4
79693: ARRAY
79694: PUSH
79695: LD_INT 0
79697: PLUS
79698: PPUSH
79699: CALL_OW 505
// end ;
79703: LD_VAR 0 2
79707: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
79708: LD_INT 0
79710: PPUSH
79711: PPUSH
79712: PPUSH
79713: PPUSH
// if not hack in hackTanks then
79714: LD_VAR 0 1
79718: PUSH
79719: LD_EXP 106
79723: IN
79724: NOT
79725: IFFALSE 79729
// exit ;
79727: GO 79814
// index := GetElementIndex ( hackTanks , hack ) ;
79729: LD_ADDR_VAR 0 5
79733: PUSH
79734: LD_EXP 106
79738: PPUSH
79739: LD_VAR 0 1
79743: PPUSH
79744: CALL 23896 0 2
79748: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
79749: LD_ADDR_VAR 0 4
79753: PUSH
79754: DOUBLE
79755: LD_INT 1
79757: DEC
79758: ST_TO_ADDR
79759: LD_EXP 107
79763: PUSH
79764: LD_VAR 0 5
79768: ARRAY
79769: PUSH
79770: FOR_TO
79771: IFFALSE 79812
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
79773: LD_EXP 107
79777: PUSH
79778: LD_VAR 0 5
79782: ARRAY
79783: PUSH
79784: LD_VAR 0 4
79788: ARRAY
79789: PUSH
79790: LD_INT 1
79792: ARRAY
79793: PUSH
79794: LD_VAR 0 2
79798: EQUAL
79799: IFFALSE 79810
// KillUnit ( vehicle ) ;
79801: LD_VAR 0 2
79805: PPUSH
79806: CALL_OW 66
79810: GO 79770
79812: POP
79813: POP
// end ;
79814: LD_VAR 0 3
79818: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
79819: LD_EXP 111
79823: NOT
79824: IFFALSE 79859
79826: GO 79828
79828: DISABLE
// begin initMiner := true ;
79829: LD_ADDR_EXP 111
79833: PUSH
79834: LD_INT 1
79836: ST_TO_ADDR
// minersList := [ ] ;
79837: LD_ADDR_EXP 112
79841: PUSH
79842: EMPTY
79843: ST_TO_ADDR
// minerMinesList := [ ] ;
79844: LD_ADDR_EXP 113
79848: PUSH
79849: EMPTY
79850: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
79851: LD_ADDR_EXP 114
79855: PUSH
79856: LD_INT 5
79858: ST_TO_ADDR
// end ;
79859: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
79860: LD_EXP 111
79864: PUSH
79865: LD_INT 34
79867: PUSH
79868: LD_INT 81
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PPUSH
79875: CALL_OW 69
79879: AND
79880: IFFALSE 80341
79882: GO 79884
79884: DISABLE
79885: LD_INT 0
79887: PPUSH
79888: PPUSH
79889: PPUSH
79890: PPUSH
// begin enable ;
79891: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
79892: LD_ADDR_VAR 0 1
79896: PUSH
79897: LD_INT 34
79899: PUSH
79900: LD_INT 81
79902: PUSH
79903: EMPTY
79904: LIST
79905: LIST
79906: PPUSH
79907: CALL_OW 69
79911: PUSH
79912: FOR_IN
79913: IFFALSE 79985
// begin if not i in minersList then
79915: LD_VAR 0 1
79919: PUSH
79920: LD_EXP 112
79924: IN
79925: NOT
79926: IFFALSE 79983
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
79928: LD_ADDR_EXP 112
79932: PUSH
79933: LD_EXP 112
79937: PPUSH
79938: LD_EXP 112
79942: PUSH
79943: LD_INT 1
79945: PLUS
79946: PPUSH
79947: LD_VAR 0 1
79951: PPUSH
79952: CALL_OW 1
79956: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
79957: LD_ADDR_EXP 113
79961: PUSH
79962: LD_EXP 113
79966: PPUSH
79967: LD_EXP 113
79971: PUSH
79972: LD_INT 1
79974: PLUS
79975: PPUSH
79976: EMPTY
79977: PPUSH
79978: CALL_OW 1
79982: ST_TO_ADDR
// end end ;
79983: GO 79912
79985: POP
79986: POP
// for i := minerMinesList downto 1 do
79987: LD_ADDR_VAR 0 1
79991: PUSH
79992: DOUBLE
79993: LD_EXP 113
79997: INC
79998: ST_TO_ADDR
79999: LD_INT 1
80001: PUSH
80002: FOR_DOWNTO
80003: IFFALSE 80339
// begin if IsLive ( minersList [ i ] ) then
80005: LD_EXP 112
80009: PUSH
80010: LD_VAR 0 1
80014: ARRAY
80015: PPUSH
80016: CALL_OW 300
80020: IFFALSE 80048
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
80022: LD_EXP 112
80026: PUSH
80027: LD_VAR 0 1
80031: ARRAY
80032: PPUSH
80033: LD_EXP 113
80037: PUSH
80038: LD_VAR 0 1
80042: ARRAY
80043: PPUSH
80044: CALL_OW 505
// if not minerMinesList [ i ] then
80048: LD_EXP 113
80052: PUSH
80053: LD_VAR 0 1
80057: ARRAY
80058: NOT
80059: IFFALSE 80063
// continue ;
80061: GO 80002
// for j := minerMinesList [ i ] downto 1 do
80063: LD_ADDR_VAR 0 2
80067: PUSH
80068: DOUBLE
80069: LD_EXP 113
80073: PUSH
80074: LD_VAR 0 1
80078: ARRAY
80079: INC
80080: ST_TO_ADDR
80081: LD_INT 1
80083: PUSH
80084: FOR_DOWNTO
80085: IFFALSE 80335
// begin side := GetSide ( minersList [ i ] ) ;
80087: LD_ADDR_VAR 0 3
80091: PUSH
80092: LD_EXP 112
80096: PUSH
80097: LD_VAR 0 1
80101: ARRAY
80102: PPUSH
80103: CALL_OW 255
80107: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
80108: LD_ADDR_VAR 0 4
80112: PUSH
80113: LD_EXP 113
80117: PUSH
80118: LD_VAR 0 1
80122: ARRAY
80123: PUSH
80124: LD_VAR 0 2
80128: ARRAY
80129: PUSH
80130: LD_INT 1
80132: ARRAY
80133: PPUSH
80134: LD_EXP 113
80138: PUSH
80139: LD_VAR 0 1
80143: ARRAY
80144: PUSH
80145: LD_VAR 0 2
80149: ARRAY
80150: PUSH
80151: LD_INT 2
80153: ARRAY
80154: PPUSH
80155: CALL_OW 428
80159: ST_TO_ADDR
// if not tmp then
80160: LD_VAR 0 4
80164: NOT
80165: IFFALSE 80169
// continue ;
80167: GO 80084
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80169: LD_VAR 0 4
80173: PUSH
80174: LD_INT 81
80176: PUSH
80177: LD_VAR 0 3
80181: PUSH
80182: EMPTY
80183: LIST
80184: LIST
80185: PPUSH
80186: CALL_OW 69
80190: IN
80191: PUSH
80192: LD_EXP 113
80196: PUSH
80197: LD_VAR 0 1
80201: ARRAY
80202: PUSH
80203: LD_VAR 0 2
80207: ARRAY
80208: PUSH
80209: LD_INT 1
80211: ARRAY
80212: PPUSH
80213: LD_EXP 113
80217: PUSH
80218: LD_VAR 0 1
80222: ARRAY
80223: PUSH
80224: LD_VAR 0 2
80228: ARRAY
80229: PUSH
80230: LD_INT 2
80232: ARRAY
80233: PPUSH
80234: CALL_OW 458
80238: AND
80239: IFFALSE 80333
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
80241: LD_EXP 113
80245: PUSH
80246: LD_VAR 0 1
80250: ARRAY
80251: PUSH
80252: LD_VAR 0 2
80256: ARRAY
80257: PUSH
80258: LD_INT 1
80260: ARRAY
80261: PPUSH
80262: LD_EXP 113
80266: PUSH
80267: LD_VAR 0 1
80271: ARRAY
80272: PUSH
80273: LD_VAR 0 2
80277: ARRAY
80278: PUSH
80279: LD_INT 2
80281: ARRAY
80282: PPUSH
80283: LD_VAR 0 3
80287: PPUSH
80288: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
80292: LD_ADDR_EXP 113
80296: PUSH
80297: LD_EXP 113
80301: PPUSH
80302: LD_VAR 0 1
80306: PPUSH
80307: LD_EXP 113
80311: PUSH
80312: LD_VAR 0 1
80316: ARRAY
80317: PPUSH
80318: LD_VAR 0 2
80322: PPUSH
80323: CALL_OW 3
80327: PPUSH
80328: CALL_OW 1
80332: ST_TO_ADDR
// end ; end ;
80333: GO 80084
80335: POP
80336: POP
// end ;
80337: GO 80002
80339: POP
80340: POP
// end ;
80341: PPOPN 4
80343: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
80344: LD_INT 0
80346: PPUSH
80347: PPUSH
// result := false ;
80348: LD_ADDR_VAR 0 4
80352: PUSH
80353: LD_INT 0
80355: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
80356: LD_VAR 0 1
80360: PPUSH
80361: CALL_OW 264
80365: PUSH
80366: LD_INT 81
80368: EQUAL
80369: NOT
80370: IFFALSE 80374
// exit ;
80372: GO 80614
// index := GetElementIndex ( minersList , unit ) ;
80374: LD_ADDR_VAR 0 5
80378: PUSH
80379: LD_EXP 112
80383: PPUSH
80384: LD_VAR 0 1
80388: PPUSH
80389: CALL 23896 0 2
80393: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
80394: LD_EXP 113
80398: PUSH
80399: LD_VAR 0 5
80403: ARRAY
80404: PUSH
80405: LD_EXP 114
80409: GREATEREQUAL
80410: IFFALSE 80414
// exit ;
80412: GO 80614
// ComMoveXY ( unit , x , y ) ;
80414: LD_VAR 0 1
80418: PPUSH
80419: LD_VAR 0 2
80423: PPUSH
80424: LD_VAR 0 3
80428: PPUSH
80429: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80433: LD_INT 35
80435: PPUSH
80436: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
80440: LD_VAR 0 1
80444: PPUSH
80445: LD_VAR 0 2
80449: PPUSH
80450: LD_VAR 0 3
80454: PPUSH
80455: CALL 55648 0 3
80459: NOT
80460: PUSH
80461: LD_VAR 0 1
80465: PPUSH
80466: CALL_OW 314
80470: AND
80471: IFFALSE 80475
// exit ;
80473: GO 80614
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
80475: LD_VAR 0 2
80479: PPUSH
80480: LD_VAR 0 3
80484: PPUSH
80485: CALL_OW 428
80489: PUSH
80490: LD_VAR 0 1
80494: EQUAL
80495: PUSH
80496: LD_VAR 0 1
80500: PPUSH
80501: CALL_OW 314
80505: NOT
80506: AND
80507: IFFALSE 80433
// PlaySoundXY ( x , y , PlantMine ) ;
80509: LD_VAR 0 2
80513: PPUSH
80514: LD_VAR 0 3
80518: PPUSH
80519: LD_STRING PlantMine
80521: PPUSH
80522: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
80526: LD_VAR 0 2
80530: PPUSH
80531: LD_VAR 0 3
80535: PPUSH
80536: LD_VAR 0 1
80540: PPUSH
80541: CALL_OW 255
80545: PPUSH
80546: LD_INT 0
80548: PPUSH
80549: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
80553: LD_ADDR_EXP 113
80557: PUSH
80558: LD_EXP 113
80562: PPUSH
80563: LD_VAR 0 5
80567: PUSH
80568: LD_EXP 113
80572: PUSH
80573: LD_VAR 0 5
80577: ARRAY
80578: PUSH
80579: LD_INT 1
80581: PLUS
80582: PUSH
80583: EMPTY
80584: LIST
80585: LIST
80586: PPUSH
80587: LD_VAR 0 2
80591: PUSH
80592: LD_VAR 0 3
80596: PUSH
80597: EMPTY
80598: LIST
80599: LIST
80600: PPUSH
80601: CALL 24111 0 3
80605: ST_TO_ADDR
// result := true ;
80606: LD_ADDR_VAR 0 4
80610: PUSH
80611: LD_INT 1
80613: ST_TO_ADDR
// end ;
80614: LD_VAR 0 4
80618: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
80619: LD_INT 0
80621: PPUSH
80622: PPUSH
80623: PPUSH
// if not unit in minersList then
80624: LD_VAR 0 1
80628: PUSH
80629: LD_EXP 112
80633: IN
80634: NOT
80635: IFFALSE 80639
// exit ;
80637: GO 81031
// index := GetElementIndex ( minersList , unit ) ;
80639: LD_ADDR_VAR 0 6
80643: PUSH
80644: LD_EXP 112
80648: PPUSH
80649: LD_VAR 0 1
80653: PPUSH
80654: CALL 23896 0 2
80658: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
80659: LD_ADDR_VAR 0 5
80663: PUSH
80664: DOUBLE
80665: LD_EXP 113
80669: PUSH
80670: LD_VAR 0 6
80674: ARRAY
80675: INC
80676: ST_TO_ADDR
80677: LD_INT 1
80679: PUSH
80680: FOR_DOWNTO
80681: IFFALSE 80842
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
80683: LD_EXP 113
80687: PUSH
80688: LD_VAR 0 6
80692: ARRAY
80693: PUSH
80694: LD_VAR 0 5
80698: ARRAY
80699: PUSH
80700: LD_INT 1
80702: ARRAY
80703: PUSH
80704: LD_VAR 0 2
80708: EQUAL
80709: PUSH
80710: LD_EXP 113
80714: PUSH
80715: LD_VAR 0 6
80719: ARRAY
80720: PUSH
80721: LD_VAR 0 5
80725: ARRAY
80726: PUSH
80727: LD_INT 2
80729: ARRAY
80730: PUSH
80731: LD_VAR 0 3
80735: EQUAL
80736: AND
80737: IFFALSE 80840
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80739: LD_EXP 113
80743: PUSH
80744: LD_VAR 0 6
80748: ARRAY
80749: PUSH
80750: LD_VAR 0 5
80754: ARRAY
80755: PUSH
80756: LD_INT 1
80758: ARRAY
80759: PPUSH
80760: LD_EXP 113
80764: PUSH
80765: LD_VAR 0 6
80769: ARRAY
80770: PUSH
80771: LD_VAR 0 5
80775: ARRAY
80776: PUSH
80777: LD_INT 2
80779: ARRAY
80780: PPUSH
80781: LD_VAR 0 1
80785: PPUSH
80786: CALL_OW 255
80790: PPUSH
80791: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80795: LD_ADDR_EXP 113
80799: PUSH
80800: LD_EXP 113
80804: PPUSH
80805: LD_VAR 0 6
80809: PPUSH
80810: LD_EXP 113
80814: PUSH
80815: LD_VAR 0 6
80819: ARRAY
80820: PPUSH
80821: LD_VAR 0 5
80825: PPUSH
80826: CALL_OW 3
80830: PPUSH
80831: CALL_OW 1
80835: ST_TO_ADDR
// exit ;
80836: POP
80837: POP
80838: GO 81031
// end ; end ;
80840: GO 80680
80842: POP
80843: POP
// for i := minerMinesList [ index ] downto 1 do
80844: LD_ADDR_VAR 0 5
80848: PUSH
80849: DOUBLE
80850: LD_EXP 113
80854: PUSH
80855: LD_VAR 0 6
80859: ARRAY
80860: INC
80861: ST_TO_ADDR
80862: LD_INT 1
80864: PUSH
80865: FOR_DOWNTO
80866: IFFALSE 81029
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
80868: LD_EXP 113
80872: PUSH
80873: LD_VAR 0 6
80877: ARRAY
80878: PUSH
80879: LD_VAR 0 5
80883: ARRAY
80884: PUSH
80885: LD_INT 1
80887: ARRAY
80888: PPUSH
80889: LD_EXP 113
80893: PUSH
80894: LD_VAR 0 6
80898: ARRAY
80899: PUSH
80900: LD_VAR 0 5
80904: ARRAY
80905: PUSH
80906: LD_INT 2
80908: ARRAY
80909: PPUSH
80910: LD_VAR 0 2
80914: PPUSH
80915: LD_VAR 0 3
80919: PPUSH
80920: CALL_OW 298
80924: PUSH
80925: LD_INT 6
80927: LESS
80928: IFFALSE 81027
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
80930: LD_EXP 113
80934: PUSH
80935: LD_VAR 0 6
80939: ARRAY
80940: PUSH
80941: LD_VAR 0 5
80945: ARRAY
80946: PUSH
80947: LD_INT 1
80949: ARRAY
80950: PPUSH
80951: LD_EXP 113
80955: PUSH
80956: LD_VAR 0 6
80960: ARRAY
80961: PUSH
80962: LD_VAR 0 5
80966: ARRAY
80967: PUSH
80968: LD_INT 2
80970: ARRAY
80971: PPUSH
80972: LD_VAR 0 1
80976: PPUSH
80977: CALL_OW 255
80981: PPUSH
80982: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
80986: LD_ADDR_EXP 113
80990: PUSH
80991: LD_EXP 113
80995: PPUSH
80996: LD_VAR 0 6
81000: PPUSH
81001: LD_EXP 113
81005: PUSH
81006: LD_VAR 0 6
81010: ARRAY
81011: PPUSH
81012: LD_VAR 0 5
81016: PPUSH
81017: CALL_OW 3
81021: PPUSH
81022: CALL_OW 1
81026: ST_TO_ADDR
// end ; end ;
81027: GO 80865
81029: POP
81030: POP
// end ;
81031: LD_VAR 0 4
81035: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
81036: LD_INT 0
81038: PPUSH
81039: PPUSH
81040: PPUSH
81041: PPUSH
81042: PPUSH
81043: PPUSH
81044: PPUSH
81045: PPUSH
81046: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
81047: LD_VAR 0 1
81051: PPUSH
81052: CALL_OW 264
81056: PUSH
81057: LD_INT 81
81059: EQUAL
81060: NOT
81061: PUSH
81062: LD_VAR 0 1
81066: PUSH
81067: LD_EXP 112
81071: IN
81072: NOT
81073: OR
81074: IFFALSE 81078
// exit ;
81076: GO 81400
// index := GetElementIndex ( minersList , unit ) ;
81078: LD_ADDR_VAR 0 6
81082: PUSH
81083: LD_EXP 112
81087: PPUSH
81088: LD_VAR 0 1
81092: PPUSH
81093: CALL 23896 0 2
81097: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
81098: LD_ADDR_VAR 0 8
81102: PUSH
81103: LD_EXP 114
81107: PUSH
81108: LD_EXP 113
81112: PUSH
81113: LD_VAR 0 6
81117: ARRAY
81118: MINUS
81119: ST_TO_ADDR
// if not minesFreeAmount then
81120: LD_VAR 0 8
81124: NOT
81125: IFFALSE 81129
// exit ;
81127: GO 81400
// tmp := [ ] ;
81129: LD_ADDR_VAR 0 7
81133: PUSH
81134: EMPTY
81135: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
81136: LD_ADDR_VAR 0 5
81140: PUSH
81141: DOUBLE
81142: LD_INT 1
81144: DEC
81145: ST_TO_ADDR
81146: LD_VAR 0 8
81150: PUSH
81151: FOR_TO
81152: IFFALSE 81347
// begin _d := rand ( 0 , 5 ) ;
81154: LD_ADDR_VAR 0 11
81158: PUSH
81159: LD_INT 0
81161: PPUSH
81162: LD_INT 5
81164: PPUSH
81165: CALL_OW 12
81169: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81170: LD_ADDR_VAR 0 12
81174: PUSH
81175: LD_INT 2
81177: PPUSH
81178: LD_INT 6
81180: PPUSH
81181: CALL_OW 12
81185: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81186: LD_ADDR_VAR 0 9
81190: PUSH
81191: LD_VAR 0 2
81195: PPUSH
81196: LD_VAR 0 11
81200: PPUSH
81201: LD_VAR 0 12
81205: PPUSH
81206: CALL_OW 272
81210: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81211: LD_ADDR_VAR 0 10
81215: PUSH
81216: LD_VAR 0 3
81220: PPUSH
81221: LD_VAR 0 11
81225: PPUSH
81226: LD_VAR 0 12
81230: PPUSH
81231: CALL_OW 273
81235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
81236: LD_VAR 0 9
81240: PPUSH
81241: LD_VAR 0 10
81245: PPUSH
81246: CALL_OW 488
81250: PUSH
81251: LD_VAR 0 9
81255: PUSH
81256: LD_VAR 0 10
81260: PUSH
81261: EMPTY
81262: LIST
81263: LIST
81264: PUSH
81265: LD_VAR 0 7
81269: IN
81270: NOT
81271: AND
81272: PUSH
81273: LD_VAR 0 9
81277: PPUSH
81278: LD_VAR 0 10
81282: PPUSH
81283: CALL_OW 458
81287: NOT
81288: AND
81289: IFFALSE 81331
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
81291: LD_ADDR_VAR 0 7
81295: PUSH
81296: LD_VAR 0 7
81300: PPUSH
81301: LD_VAR 0 7
81305: PUSH
81306: LD_INT 1
81308: PLUS
81309: PPUSH
81310: LD_VAR 0 9
81314: PUSH
81315: LD_VAR 0 10
81319: PUSH
81320: EMPTY
81321: LIST
81322: LIST
81323: PPUSH
81324: CALL_OW 1
81328: ST_TO_ADDR
81329: GO 81345
// i := i - 1 ;
81331: LD_ADDR_VAR 0 5
81335: PUSH
81336: LD_VAR 0 5
81340: PUSH
81341: LD_INT 1
81343: MINUS
81344: ST_TO_ADDR
// end ;
81345: GO 81151
81347: POP
81348: POP
// for i in tmp do
81349: LD_ADDR_VAR 0 5
81353: PUSH
81354: LD_VAR 0 7
81358: PUSH
81359: FOR_IN
81360: IFFALSE 81398
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
81362: LD_VAR 0 1
81366: PPUSH
81367: LD_VAR 0 5
81371: PUSH
81372: LD_INT 1
81374: ARRAY
81375: PPUSH
81376: LD_VAR 0 5
81380: PUSH
81381: LD_INT 2
81383: ARRAY
81384: PPUSH
81385: CALL 80344 0 3
81389: NOT
81390: IFFALSE 81396
// exit ;
81392: POP
81393: POP
81394: GO 81400
81396: GO 81359
81398: POP
81399: POP
// end ;
81400: LD_VAR 0 4
81404: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
81405: LD_INT 0
81407: PPUSH
81408: PPUSH
81409: PPUSH
81410: PPUSH
81411: PPUSH
81412: PPUSH
81413: PPUSH
// if not GetClass ( unit ) = class_sniper then
81414: LD_VAR 0 1
81418: PPUSH
81419: CALL_OW 257
81423: PUSH
81424: LD_INT 5
81426: EQUAL
81427: NOT
81428: IFFALSE 81432
// exit ;
81430: GO 81820
// dist := 8 ;
81432: LD_ADDR_VAR 0 5
81436: PUSH
81437: LD_INT 8
81439: ST_TO_ADDR
// viewRange := 12 ;
81440: LD_ADDR_VAR 0 7
81444: PUSH
81445: LD_INT 12
81447: ST_TO_ADDR
// side := GetSide ( unit ) ;
81448: LD_ADDR_VAR 0 6
81452: PUSH
81453: LD_VAR 0 1
81457: PPUSH
81458: CALL_OW 255
81462: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
81463: LD_INT 61
81465: PPUSH
81466: LD_VAR 0 6
81470: PPUSH
81471: CALL_OW 321
81475: PUSH
81476: LD_INT 2
81478: EQUAL
81479: IFFALSE 81489
// viewRange := 16 ;
81481: LD_ADDR_VAR 0 7
81485: PUSH
81486: LD_INT 16
81488: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
81489: LD_VAR 0 1
81493: PPUSH
81494: LD_VAR 0 2
81498: PPUSH
81499: LD_VAR 0 3
81503: PPUSH
81504: CALL_OW 297
81508: PUSH
81509: LD_VAR 0 5
81513: GREATER
81514: IFFALSE 81593
// begin ComMoveXY ( unit , x , y ) ;
81516: LD_VAR 0 1
81520: PPUSH
81521: LD_VAR 0 2
81525: PPUSH
81526: LD_VAR 0 3
81530: PPUSH
81531: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81535: LD_INT 35
81537: PPUSH
81538: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
81542: LD_VAR 0 1
81546: PPUSH
81547: LD_VAR 0 2
81551: PPUSH
81552: LD_VAR 0 3
81556: PPUSH
81557: CALL 55648 0 3
81561: NOT
81562: IFFALSE 81566
// exit ;
81564: GO 81820
// until GetDistUnitXY ( unit , x , y ) < dist ;
81566: LD_VAR 0 1
81570: PPUSH
81571: LD_VAR 0 2
81575: PPUSH
81576: LD_VAR 0 3
81580: PPUSH
81581: CALL_OW 297
81585: PUSH
81586: LD_VAR 0 5
81590: LESS
81591: IFFALSE 81535
// end ; ComTurnXY ( unit , x , y ) ;
81593: LD_VAR 0 1
81597: PPUSH
81598: LD_VAR 0 2
81602: PPUSH
81603: LD_VAR 0 3
81607: PPUSH
81608: CALL_OW 118
// wait ( 5 ) ;
81612: LD_INT 5
81614: PPUSH
81615: CALL_OW 67
// _d := GetDir ( unit ) ;
81619: LD_ADDR_VAR 0 10
81623: PUSH
81624: LD_VAR 0 1
81628: PPUSH
81629: CALL_OW 254
81633: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
81634: LD_ADDR_VAR 0 8
81638: PUSH
81639: LD_VAR 0 1
81643: PPUSH
81644: CALL_OW 250
81648: PPUSH
81649: LD_VAR 0 10
81653: PPUSH
81654: LD_VAR 0 5
81658: PPUSH
81659: CALL_OW 272
81663: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
81664: LD_ADDR_VAR 0 9
81668: PUSH
81669: LD_VAR 0 1
81673: PPUSH
81674: CALL_OW 251
81678: PPUSH
81679: LD_VAR 0 10
81683: PPUSH
81684: LD_VAR 0 5
81688: PPUSH
81689: CALL_OW 273
81693: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81694: LD_VAR 0 8
81698: PPUSH
81699: LD_VAR 0 9
81703: PPUSH
81704: CALL_OW 488
81708: NOT
81709: IFFALSE 81713
// exit ;
81711: GO 81820
// ComAnimCustom ( unit , 1 ) ;
81713: LD_VAR 0 1
81717: PPUSH
81718: LD_INT 1
81720: PPUSH
81721: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
81725: LD_VAR 0 8
81729: PPUSH
81730: LD_VAR 0 9
81734: PPUSH
81735: LD_VAR 0 6
81739: PPUSH
81740: LD_VAR 0 7
81744: PPUSH
81745: CALL_OW 330
// repeat wait ( 1 ) ;
81749: LD_INT 1
81751: PPUSH
81752: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
81756: LD_VAR 0 1
81760: PPUSH
81761: CALL_OW 316
81765: PUSH
81766: LD_VAR 0 1
81770: PPUSH
81771: CALL_OW 314
81775: OR
81776: PUSH
81777: LD_VAR 0 1
81781: PPUSH
81782: CALL_OW 302
81786: NOT
81787: OR
81788: PUSH
81789: LD_VAR 0 1
81793: PPUSH
81794: CALL_OW 301
81798: OR
81799: IFFALSE 81749
// RemoveSeeing ( _x , _y , side ) ;
81801: LD_VAR 0 8
81805: PPUSH
81806: LD_VAR 0 9
81810: PPUSH
81811: LD_VAR 0 6
81815: PPUSH
81816: CALL_OW 331
// end ;
81820: LD_VAR 0 4
81824: RET
