// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// CreateNature ;
   8: CALL 10895 0 0
// PrepareArabian ;
  12: CALL 226 0 0
// PrepareAmerican ;
  16: CALL 661 0 0
// PrepareLegion ;
  20: CALL 5564 0 0
// Action ;
  24: CALL 11476 0 0
// end ;
  28: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// prefix := 09_ ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// amScriptActive := true ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 1
  55: ST_TO_ADDR
// legScriptActive := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 16
  71: PUSH
  72: LD_INT 14
  74: PUSH
  75: LD_INT 12
  77: PUSH
  78: LD_INT 10
  80: PUSH
  81: EMPTY
  82: LIST
  83: LIST
  84: LIST
  85: LIST
  86: PUSH
  87: LD_OWVAR 67
  91: ARRAY
  92: ST_TO_ADDR
// spotAmericanBase := false ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// spotArabianBase := false ;
 101: LD_ADDR_EXP 7
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// spotLegion := false ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// spotByAmerican := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// spotByLegion := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// americanDestroyed := false ;
 133: LD_ADDR_EXP 11
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// legionDestroyed := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// hasMastodont := false ;
 149: LD_ADDR_EXP 13
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// hasVehicles := false ;
 157: LD_ADDR_EXP 14
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// hasTigers := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// hasApes := false ;
 173: LD_ADDR_EXP 16
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// hasDrugs := false ;
 181: LD_ADDR_EXP 17
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// canFinish := false ;
 189: LD_ADDR_EXP 18
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// gameActive := false ;
 197: LD_ADDR_EXP 19
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// omarCanChangeClass := false ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// tigerCounter := 0 ;
 213: LD_ADDR_EXP 21
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// end ; end_of_file
 221: LD_VAR 0 1
 225: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
// uc_side := 2 ;
 232: LD_ADDR_OWVAR 20
 236: PUSH
 237: LD_INT 2
 239: ST_TO_ADDR
// uc_nation := nation_arabian ;
 240: LD_ADDR_OWVAR 21
 244: PUSH
 245: LD_INT 2
 247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 248: LD_ADDR_EXP 22
 252: PUSH
 253: LD_STRING Heike
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_EXP 2
 266: PPUSH
 267: CALL 20208 0 3
 271: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 272: LD_INT 14
 274: PPUSH
 275: LD_INT 3
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 27
 283: PPUSH
 284: LD_INT 100
 286: PPUSH
 287: CALL 25048 0 5
// heikeVehicle := CreateVehicle ;
 291: LD_ADDR_EXP 24
 295: PUSH
 296: CALL_OW 45
 300: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 301: LD_EXP 24
 305: PPUSH
 306: LD_INT 4
 308: PPUSH
 309: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 313: LD_EXP 24
 317: PPUSH
 318: LD_INT 118
 320: PPUSH
 321: LD_INT 37
 323: PPUSH
 324: LD_INT 0
 326: PPUSH
 327: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 331: LD_EXP 22
 335: PPUSH
 336: LD_INT 1
 338: PPUSH
 339: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 343: LD_EXP 22
 347: PPUSH
 348: LD_EXP 24
 352: PPUSH
 353: CALL_OW 52
// uc_side := 5 ;
 357: LD_ADDR_OWVAR 20
 361: PUSH
 362: LD_INT 5
 364: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 365: LD_ADDR_EXP 23
 369: PUSH
 370: LD_STRING Omar
 372: PPUSH
 373: CALL_OW 25
 377: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 378: LD_INT 14
 380: PPUSH
 381: LD_INT 3
 383: PPUSH
 384: LD_INT 1
 386: PPUSH
 387: LD_INT 27
 389: PPUSH
 390: LD_INT 100
 392: PPUSH
 393: CALL 25048 0 5
// omarVehicle := CreateVehicle ;
 397: LD_ADDR_EXP 25
 401: PUSH
 402: CALL_OW 45
 406: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 407: LD_EXP 25
 411: PPUSH
 412: LD_INT 0
 414: PPUSH
 415: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 419: LD_ADDR_VAR 0 2
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 5
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 3
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 478
// SetLives ( i , rand ( 300 , 499 ) ) ;
 456: LD_VAR 0 2
 460: PPUSH
 461: LD_INT 300
 463: PPUSH
 464: LD_INT 499
 466: PPUSH
 467: CALL_OW 12
 471: PPUSH
 472: CALL_OW 234
 476: GO 453
 478: POP
 479: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 480: LD_INT 85
 482: PPUSH
 483: CALL_OW 274
 487: PPUSH
 488: LD_INT 1
 490: PPUSH
 491: LD_INT 200
 493: PUSH
 494: LD_INT 20
 496: PUSH
 497: LD_OWVAR 67
 501: MUL
 502: MINUS
 503: PPUSH
 504: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 508: LD_INT 85
 510: PPUSH
 511: CALL_OW 274
 515: PPUSH
 516: LD_INT 2
 518: PPUSH
 519: LD_INT 20
 521: PPUSH
 522: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 526: LD_INT 14
 528: PPUSH
 529: LD_INT 3
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: LD_INT 32
 537: PPUSH
 538: LD_INT 100
 540: PPUSH
 541: CALL 25048 0 5
// veh := CreateVehicle ;
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: CALL_OW 45
 554: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 555: LD_VAR 0 4
 559: PPUSH
 560: LD_INT 4
 562: PPUSH
 563: CALL_OW 233
// SetLives ( veh , 420 ) ;
 567: LD_VAR 0 4
 571: PPUSH
 572: LD_INT 420
 574: PPUSH
 575: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 579: LD_VAR 0 4
 583: PPUSH
 584: LD_INT 193
 586: PPUSH
 587: LD_INT 133
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 597: LD_INT 14
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: LD_INT 1
 605: PPUSH
 606: LD_INT 26
 608: PPUSH
 609: LD_INT 11
 611: PPUSH
 612: CALL 25048 0 5
// veh := CreateVehicle ;
 616: LD_ADDR_VAR 0 4
 620: PUSH
 621: CALL_OW 45
 625: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 626: LD_VAR 0 4
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 638: LD_VAR 0 4
 642: PPUSH
 643: LD_INT 261
 645: PPUSH
 646: LD_INT 115
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 48
// end ; end_of_file
 656: LD_VAR 0 1
 660: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 661: LD_INT 0
 663: PPUSH
 664: PPUSH
 665: PPUSH
 666: PPUSH
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// uc_side := 1 ;
 671: LD_ADDR_OWVAR 20
 675: PUSH
 676: LD_INT 1
 678: ST_TO_ADDR
// uc_nation := nation_american ;
 679: LD_ADDR_OWVAR 21
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// amForces := [ ] ;
 687: LD_ADDR_EXP 26
 691: PUSH
 692: EMPTY
 693: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 694: LD_ADDR_EXP 27
 698: PUSH
 699: LD_INT 1
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 20271 0 3
 712: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 713: LD_ADDR_EXP 28
 717: PUSH
 718: LD_INT 2
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: LD_INT 12
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 13
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 758: LD_ADDR_EXP 29
 762: PUSH
 763: LD_INT 94
 765: PUSH
 766: LD_INT 132
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// amBuildings := [ ] ;
 773: LD_ADDR_EXP 30
 777: PUSH
 778: EMPTY
 779: ST_TO_ADDR
// amTanks := [ ] ;
 780: LD_ADDR_EXP 31
 784: PUSH
 785: EMPTY
 786: ST_TO_ADDR
// amCargo := 0 ;
 787: LD_ADDR_EXP 33
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// amPatrol := [ ] ;
 795: LD_ADDR_EXP 34
 799: PUSH
 800: EMPTY
 801: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 802: LD_ADDR_VAR 0 7
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: LD_INT 121
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 98
 819: PUSH
 820: LD_INT 145
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// for i in sources do
 831: LD_ADDR_VAR 0 2
 835: PUSH
 836: LD_VAR 0 7
 840: PUSH
 841: FOR_IN
 842: IFFALSE 871
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 441
 869: GO 841
 871: POP
 872: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 274
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 550
 886: PPUSH
 887: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 891: LD_INT 2
 893: PPUSH
 894: CALL_OW 274
 898: PPUSH
 899: LD_INT 2
 901: PPUSH
 902: LD_INT 120
 904: PPUSH
 905: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 909: LD_INT 2
 911: PPUSH
 912: CALL_OW 274
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 30
 922: PPUSH
 923: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 927: LD_ADDR_VAR 0 6
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 7
 937: PUSH
 938: LD_INT 8
 940: PUSH
 941: LD_INT 9
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_OWVAR 67
 954: ARRAY
 955: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 956: LD_ADDR_EXP 32
 960: PUSH
 961: LD_STRING Brown
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: LD_STRING 
 969: PPUSH
 970: CALL 20208 0 3
 974: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 975: LD_EXP 32
 979: PPUSH
 980: LD_INT 2
 982: PPUSH
 983: CALL_OW 52
// for i := 1 to 4 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 4
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1525
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1003: LD_ADDR_VAR 0 3
1007: PUSH
1008: DOUBLE
1009: LD_INT 1
1011: DEC
1012: ST_TO_ADDR
1013: LD_INT 5
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: LD_INT 8
1021: PUSH
1022: LD_INT 9
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_OWVAR 67
1035: ARRAY
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 4
1042: PUSH
1043: LD_INT 5
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_OWVAR 67
1059: ARRAY
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 6
1069: PUSH
1070: LD_INT 7
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_OWVAR 67
1083: ARRAY
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 3
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: LD_INT 3
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: PUSH
1103: LD_OWVAR 67
1107: ARRAY
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PUSH
1121: FOR_TO
1122: IFFALSE 1521
// begin PrepareHuman ( false , i , skill ) ;
1124: LD_INT 0
1126: PPUSH
1127: LD_VAR 0 2
1131: PPUSH
1132: LD_VAR 0 6
1136: PPUSH
1137: CALL_OW 380
// un := CreateHuman ;
1141: LD_ADDR_VAR 0 5
1145: PUSH
1146: CALL_OW 44
1150: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1151: LD_ADDR_EXP 26
1155: PUSH
1156: LD_EXP 26
1160: PPUSH
1161: LD_VAR 0 5
1165: PPUSH
1166: CALL 57910 0 2
1170: ST_TO_ADDR
// case i of 1 :
1171: LD_VAR 0 2
1175: PUSH
1176: LD_INT 1
1178: DOUBLE
1179: EQUAL
1180: IFTRUE 1184
1182: GO 1253
1184: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1185: LD_ADDR_VAR 0 4
1189: PUSH
1190: LD_INT 22
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 2
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 32
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 30
1215: PUSH
1216: LD_INT 5
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: LIST
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: LD_INT 62
1233: PUSH
1234: EMPTY
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PPUSH
1246: CALL_OW 69
1250: ST_TO_ADDR
1251: GO 1432
1253: LD_INT 2
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1290
1261: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_INT 2
1269: PPUSH
1270: LD_INT 3
1272: PUSH
1273: LD_INT 62
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PPUSH
1283: CALL_OW 72
1287: ST_TO_ADDR
1288: GO 1432
1290: LD_INT 3
1292: DOUBLE
1293: EQUAL
1294: IFTRUE 1298
1296: GO 1372
1298: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: LD_INT 22
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 2
1316: PUSH
1317: LD_INT 30
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 30
1329: PUSH
1330: LD_INT 36
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 3
1344: PUSH
1345: LD_INT 62
1347: PUSH
1348: EMPTY
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 69
1364: PPUSH
1365: CALL 53186 0 1
1369: ST_TO_ADDR
1370: GO 1432
1372: LD_INT 4
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1431
1380: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 30
1398: PUSH
1399: LD_INT 8
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: LD_INT 3
1408: PUSH
1409: LD_INT 62
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
1429: GO 1432
1431: POP
// if b then
1432: LD_VAR 0 4
1436: IFFALSE 1498
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 50 ) then
1438: LD_VAR 0 4
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PPUSH
1447: CALL_OW 266
1451: PUSH
1452: LD_INT 5
1454: EQUAL
1455: PUSH
1456: LD_INT 50
1458: PPUSH
1459: CALL_OW 13
1463: AND
1464: IFFALSE 1478
// SetClass ( un , class_sniper ) ;
1466: LD_VAR 0 5
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_VAR 0 4
1487: PUSH
1488: LD_INT 1
1490: ARRAY
1491: PPUSH
1492: CALL_OW 52
// end else
1496: GO 1519
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1498: LD_VAR 0 5
1502: PPUSH
1503: LD_INT 92
1505: PPUSH
1506: LD_INT 137
1508: PPUSH
1509: LD_INT 4
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 50
// end ;
1519: GO 1121
1521: POP
1522: POP
1523: GO 1000
1525: POP
1526: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1527: LD_ADDR_VAR 0 8
1531: PUSH
1532: LD_INT 30
1534: PUSH
1535: LD_INT 32
1537: PUSH
1538: LD_INT 36
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1546: LD_ADDR_VAR 0 2
1550: PUSH
1551: DOUBLE
1552: LD_INT 1
1554: DEC
1555: ST_TO_ADDR
1556: LD_VAR 0 8
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1731
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1564: LD_ADDR_VAR 0 3
1568: PUSH
1569: DOUBLE
1570: LD_INT 1
1572: DEC
1573: ST_TO_ADDR
1574: LD_INT 1
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PUSH
1598: FOR_TO
1599: IFFALSE 1727
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1601: LD_INT 0
1603: PPUSH
1604: LD_INT 7
1606: PUSH
1607: LD_INT 8
1609: PUSH
1610: LD_INT 9
1612: PUSH
1613: LD_INT 10
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: LD_OWVAR 67
1626: ARRAY
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 5
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// if j mod 2 = 0 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 2
1649: MOD
1650: PUSH
1651: LD_INT 0
1653: EQUAL
1654: IFFALSE 1668
// SetClass ( un , class_sniper ) ;
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_INT 5
1663: PPUSH
1664: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1668: LD_ADDR_EXP 34
1672: PUSH
1673: LD_EXP 34
1677: PPUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL 57910 0 2
1687: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1688: LD_VAR 0 5
1692: PPUSH
1693: LD_VAR 0 8
1697: PUSH
1698: LD_VAR 0 2
1702: ARRAY
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 49
// SetTag ( un , i ) ;
1711: LD_VAR 0 5
1715: PPUSH
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 109
// end ;
1725: GO 1598
1727: POP
1728: POP
// end ;
1729: GO 1561
1731: POP
1732: POP
// end ;
1733: LD_VAR 0 1
1737: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1738: LD_EXP 3
1742: PUSH
1743: LD_EXP 26
1747: PPUSH
1748: CALL 22310 0 1
1752: AND
1753: IFFALSE 4121
1755: GO 1757
1757: DISABLE
1758: LD_INT 0
1760: PPUSH
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
1765: PPUSH
1766: PPUSH
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
// begin enable ;
1778: ENABLE
// side := 1 ;
1779: LD_ADDR_VAR 0 5
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: LD_INT 22
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 33
1806: PUSH
1807: LD_INT 2
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 50
1816: PUSH
1817: EMPTY
1818: LIST
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 61
1825: PUSH
1826: EMPTY
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_VAR 0 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 50
1863: PUSH
1864: EMPTY
1865: LIST
1866: PUSH
1867: LD_INT 30
1869: PUSH
1870: LD_INT 36
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: CALL 22310 0 1
1891: AND
1892: IFFALSE 1920
// for i in remote do
1894: LD_ADDR_VAR 0 1
1898: PUSH
1899: LD_VAR 0 3
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1918
// Connect ( i ) ;
1907: LD_VAR 0 1
1911: PPUSH
1912: CALL 28516 0 1
1916: GO 1904
1918: POP
1919: POP
// if amTech then
1920: LD_EXP 27
1924: IFFALSE 2080
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1926: LD_ADDR_VAR 0 6
1930: PUSH
1931: LD_INT 22
1933: PUSH
1934: LD_VAR 0 5
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 50
1945: PUSH
1946: EMPTY
1947: LIST
1948: PUSH
1949: LD_INT 2
1951: PUSH
1952: LD_INT 30
1954: PUSH
1955: LD_INT 6
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 30
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 30
1974: PUSH
1975: LD_INT 8
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PPUSH
1993: CALL_OW 69
1997: ST_TO_ADDR
// if lab then
1998: LD_VAR 0 6
2002: IFFALSE 2080
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2004: LD_VAR 0 6
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: CALL_OW 461
2017: PUSH
2018: LD_INT 2
2020: EQUAL
2021: IFFALSE 2080
// begin for i in amTech do
2023: LD_ADDR_VAR 0 1
2027: PUSH
2028: LD_EXP 27
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2078
// if CanBeResearched ( lab [ 1 ] , i ) then
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PPUSH
2045: LD_VAR 0 1
2049: PPUSH
2050: CALL_OW 430
2054: IFFALSE 2076
// begin ComResearch ( lab [ 1 ] , i ) ;
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: LD_VAR 0 1
2069: PPUSH
2070: CALL_OW 124
// break ;
2074: GO 2078
// end ;
2076: GO 2033
2078: POP
2079: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2080: LD_ADDR_VAR 0 16
2084: PUSH
2085: LD_INT 1
2087: PPUSH
2088: LD_INT 22
2090: PUSH
2091: LD_VAR 0 5
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 3
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 50
2112: PUSH
2113: EMPTY
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 70
2125: ST_TO_ADDR
// if fac then
2126: LD_VAR 0 16
2130: IFFALSE 2396
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2132: LD_VAR 0 16
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: CALL_OW 461
2145: PUSH
2146: LD_INT 2
2148: EQUAL
2149: IFFALSE 2396
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2151: LD_ADDR_VAR 0 17
2155: PUSH
2156: LD_INT 1
2158: PPUSH
2159: LD_INT 2
2161: PUSH
2162: LD_INT 30
2164: PUSH
2165: LD_INT 32
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 30
2174: PUSH
2175: LD_INT 33
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 35
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PPUSH
2201: CALL_OW 70
2205: ST_TO_ADDR
// if emptyTowers then
2206: LD_VAR 0 17
2210: IFFALSE 2258
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2212: LD_ADDR_VAR 0 18
2216: PUSH
2217: LD_VAR 0 17
2221: PUSH
2222: LD_INT 1
2224: ARRAY
2225: PPUSH
2226: LD_INT 1
2228: PPUSH
2229: CALL 30555 0 2
2233: ST_TO_ADDR
// if weapon then
2234: LD_VAR 0 18
2238: IFFALSE 2258
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2240: LD_VAR 0 17
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PPUSH
2249: LD_VAR 0 18
2253: PPUSH
2254: CALL_OW 148
// end ; if amConstructList then
2258: LD_EXP 28
2262: IFFALSE 2396
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2264: LD_VAR 0 16
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PPUSH
2273: LD_EXP 28
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: LD_EXP 28
2290: PUSH
2291: LD_INT 1
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: LD_EXP 28
2303: PUSH
2304: LD_INT 1
2306: ARRAY
2307: PUSH
2308: LD_INT 3
2310: ARRAY
2311: PPUSH
2312: LD_EXP 28
2316: PUSH
2317: LD_INT 1
2319: ARRAY
2320: PUSH
2321: LD_INT 4
2323: ARRAY
2324: PPUSH
2325: CALL_OW 448
2329: IFFALSE 2396
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2331: LD_VAR 0 16
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_EXP 28
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 28
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PUSH
2362: LD_INT 2
2364: ARRAY
2365: PPUSH
2366: LD_EXP 28
2370: PUSH
2371: LD_INT 1
2373: ARRAY
2374: PUSH
2375: LD_INT 3
2377: ARRAY
2378: PPUSH
2379: LD_EXP 28
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PUSH
2388: LD_INT 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: LD_INT 1
2403: PPUSH
2404: LD_INT 21
2406: PUSH
2407: LD_INT 3
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 1000
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2454: LD_ADDR_VAR 0 10
2458: PUSH
2459: LD_INT 13
2461: PPUSH
2462: CALL_OW 435
2466: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2467: LD_ADDR_VAR 0 11
2471: PUSH
2472: LD_EXP 26
2476: PPUSH
2477: LD_INT 25
2479: PUSH
2480: LD_INT 4
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 50
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL_OW 72
2501: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2502: LD_ADDR_VAR 0 6
2506: PUSH
2507: LD_INT 1
2509: PPUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 70
2553: ST_TO_ADDR
// if sci then
2554: LD_VAR 0 11
2558: IFFALSE 2717
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2560: LD_ADDR_VAR 0 13
2564: PUSH
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 95
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 120
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PPUSH
2594: CALL_OW 72
2598: ST_TO_ADDR
// if hurtUnits then
2599: LD_VAR 0 13
2603: IFFALSE 2664
// begin for i in sci do
2605: LD_ADDR_VAR 0 1
2609: PUSH
2610: LD_VAR 0 11
2614: PUSH
2615: FOR_IN
2616: IFFALSE 2660
// if IsInUnit ( i ) then
2618: LD_VAR 0 1
2622: PPUSH
2623: CALL_OW 310
2627: IFFALSE 2640
// ComExitBuilding ( i ) else
2629: LD_VAR 0 1
2633: PPUSH
2634: CALL_OW 122
2638: GO 2658
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_VAR 0 13
2649: PUSH
2650: LD_INT 1
2652: ARRAY
2653: PPUSH
2654: CALL_OW 128
2658: GO 2615
2660: POP
2661: POP
// end else
2662: GO 2717
// if lab then
2664: LD_VAR 0 6
2668: IFFALSE 2717
// begin for i in sci do
2670: LD_ADDR_VAR 0 1
2674: PUSH
2675: LD_VAR 0 11
2679: PUSH
2680: FOR_IN
2681: IFFALSE 2715
// if not IsInUnit ( i ) then
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 310
2692: NOT
2693: IFFALSE 2713
// ComEnterUnit ( i , lab [ 1 ] ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 6
2704: PUSH
2705: LD_INT 1
2707: ARRAY
2708: PPUSH
2709: CALL_OW 120
2713: GO 2680
2715: POP
2716: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: LD_EXP 26
2726: PPUSH
2727: LD_INT 25
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 72
2741: ST_TO_ADDR
// if eng then
2742: LD_VAR 0 7
2746: IFFALSE 3521
// begin for i in eng do
2748: LD_ADDR_VAR 0 1
2752: PUSH
2753: LD_VAR 0 7
2757: PUSH
2758: FOR_IN
2759: IFFALSE 3519
// begin tag := GetTag ( i ) ;
2761: LD_ADDR_VAR 0 8
2765: PUSH
2766: LD_VAR 0 1
2770: PPUSH
2771: CALL_OW 110
2775: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2776: LD_VAR 0 1
2780: PPUSH
2781: CALL_OW 256
2785: PUSH
2786: LD_INT 800
2788: LESS
2789: PUSH
2790: LD_VAR 0 8
2794: PUSH
2795: LD_INT 1
2797: NONEQUAL
2798: AND
2799: IFFALSE 2849
// begin SetTag ( i , tHeal ) ;
2801: LD_VAR 0 1
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2813: LD_VAR 0 1
2817: PPUSH
2818: LD_EXP 29
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_EXP 29
2831: PUSH
2832: LD_INT 2
2834: ARRAY
2835: PPUSH
2836: CALL_OW 111
// AddComHold ( i ) ;
2840: LD_VAR 0 1
2844: PPUSH
2845: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2849: LD_VAR 0 8
2853: PUSH
2854: LD_INT 1
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 256
2867: PUSH
2868: LD_INT 1000
2870: EQUAL
2871: AND
2872: IFFALSE 2886
// SetTag ( i , 0 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 109
// if not tag then
2886: LD_VAR 0 8
2890: NOT
2891: IFFALSE 3059
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2893: LD_ADDR_VAR 0 4
2897: PUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 57
2903: PUSH
2904: EMPTY
2905: LIST
2906: PPUSH
2907: CALL_OW 70
2911: ST_TO_ADDR
// if undone then
2912: LD_VAR 0 4
2916: IFFALSE 2938
// begin ComComplete ( i , undone [ 1 ] ) ;
2918: LD_VAR 0 1
2922: PPUSH
2923: LD_VAR 0 4
2927: PUSH
2928: LD_INT 1
2930: ARRAY
2931: PPUSH
2932: CALL 28408 0 2
// continue ;
2936: GO 2758
// end ; if cr or tmp or Count ( amBuildings ) then
2938: LD_VAR 0 10
2942: PUSH
2943: LD_VAR 0 2
2947: OR
2948: PUSH
2949: LD_EXP 30
2953: PPUSH
2954: CALL 22310 0 1
2958: OR
2959: IFFALSE 3035
// begin if IsInUnit ( i ) then
2961: LD_VAR 0 1
2965: PPUSH
2966: CALL_OW 310
2970: IFFALSE 2981
// ComExitBuilding ( i ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: CALL_OW 122
// if tmp then
2981: LD_VAR 0 2
2985: IFFALSE 3001
// SetTag ( i , tRepair ) else
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL_OW 109
2999: GO 3033
// if cr then
3001: LD_VAR 0 10
3005: IFFALSE 3021
// SetTag ( i , tCrates ) else
3007: LD_VAR 0 1
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: CALL_OW 109
3019: GO 3033
// SetTag ( i , tBuild ) ;
3021: LD_VAR 0 1
3025: PPUSH
3026: LD_INT 5
3028: PPUSH
3029: CALL_OW 109
// end else
3033: GO 3059
// if not IsInUnit ( i ) then
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 310
3044: NOT
3045: IFFALSE 3059
// ComEnterUnit ( i , amBase ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 120
// end ; if tag = tRepair then
3059: LD_VAR 0 8
3063: PUSH
3064: LD_INT 3
3066: EQUAL
3067: IFFALSE 3169
// begin if IsInUnit ( i ) then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 310
3078: IFFALSE 3091
// begin ComExitBuilding ( i ) ;
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 122
// continue ;
3089: GO 2758
// end ; if not tmp then
3091: LD_VAR 0 2
3095: NOT
3096: IFFALSE 3112
// begin SetTag ( i , 0 ) ;
3098: LD_VAR 0 1
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: CALL_OW 109
// continue ;
3110: GO 2758
// end ; if not HasTask ( i ) then
3112: LD_VAR 0 1
3116: PPUSH
3117: CALL_OW 314
3121: NOT
3122: IFFALSE 3142
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 2
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 308
3154: NOT
3155: IFFALSE 3169
// ComMoveToArea ( i , amBaseArea ) ;
3157: LD_VAR 0 1
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 113
// end ; if tag = tBuild then
3169: LD_VAR 0 8
3173: PUSH
3174: LD_INT 5
3176: EQUAL
3177: IFFALSE 3372
// begin if IsInUnit ( i ) then
3179: LD_VAR 0 1
3183: PPUSH
3184: CALL_OW 310
3188: IFFALSE 3201
// begin ComExitBuilding ( i ) ;
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 122
// continue ;
3199: GO 2758
// end ; if not Count ( amBuildings ) then
3201: LD_EXP 30
3205: PPUSH
3206: CALL 22310 0 1
3210: NOT
3211: IFFALSE 3229
// begin SetTag ( i , 0 ) ;
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 109
// continue ;
3225: GO 2758
// end else
3227: GO 3266
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3229: LD_INT 2
3231: PPUSH
3232: LD_EXP 30
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: PPUSH
3245: CALL 10749 0 2
3249: NOT
3250: IFFALSE 3266
// begin SetTag ( i , 0 ) ;
3252: LD_VAR 0 1
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 109
// continue ;
3264: GO 2758
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3266: LD_ADDR_VAR 0 4
3270: PUSH
3271: LD_INT 1
3273: PPUSH
3274: LD_INT 57
3276: PUSH
3277: EMPTY
3278: LIST
3279: PPUSH
3280: CALL_OW 70
3284: ST_TO_ADDR
// if undone then
3285: LD_VAR 0 4
3289: IFFALSE 3311
// begin ComComplete ( i , undone [ 1 ] ) ;
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_VAR 0 4
3300: PUSH
3301: LD_INT 1
3303: ARRAY
3304: PPUSH
3305: CALL 28408 0 2
// continue ;
3309: GO 2758
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3311: LD_VAR 0 1
3315: PPUSH
3316: LD_EXP 30
3320: PUSH
3321: LD_INT 1
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_EXP 30
3333: PUSH
3334: LD_INT 1
3336: ARRAY
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: LD_EXP 30
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PUSH
3351: LD_INT 3
3353: ARRAY
3354: PPUSH
3355: LD_EXP 30
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: PUSH
3364: LD_INT 4
3366: ARRAY
3367: PPUSH
3368: CALL_OW 145
// end ; if tag = tCrates then
3372: LD_VAR 0 8
3376: PUSH
3377: LD_INT 2
3379: EQUAL
3380: IFFALSE 3517
// begin if IsInUnit ( i ) then
3382: LD_VAR 0 1
3386: PPUSH
3387: CALL_OW 310
3391: IFFALSE 3404
// begin ComExitBuilding ( i ) ;
3393: LD_VAR 0 1
3397: PPUSH
3398: CALL_OW 122
// continue ;
3402: GO 2758
// end ; if not cr then
3404: LD_VAR 0 10
3408: NOT
3409: IFFALSE 3425
// begin SetTag ( i , 0 ) ;
3411: LD_VAR 0 1
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 109
// continue ;
3423: GO 2758
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3425: LD_VAR 0 1
3429: PPUSH
3430: CALL_OW 314
3434: NOT
3435: PUSH
3436: LD_INT 81
3438: PUSH
3439: LD_VAR 0 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 92
3450: PUSH
3451: LD_VAR 0 10
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: PUSH
3460: LD_VAR 0 10
3464: PUSH
3465: LD_INT 2
3467: ARRAY
3468: PUSH
3469: LD_INT 12
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PPUSH
3482: CALL_OW 69
3486: NOT
3487: AND
3488: IFFALSE 3517
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3490: LD_VAR 0 1
3494: PPUSH
3495: LD_VAR 0 10
3499: PUSH
3500: LD_INT 1
3502: ARRAY
3503: PPUSH
3504: LD_VAR 0 10
3508: PUSH
3509: LD_INT 2
3511: ARRAY
3512: PPUSH
3513: CALL_OW 117
// end ; end ;
3517: GO 2758
3519: POP
3520: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3521: LD_ADDR_VAR 0 12
3525: PUSH
3526: LD_EXP 26
3530: PPUSH
3531: LD_INT 2
3533: PUSH
3534: LD_INT 25
3536: PUSH
3537: LD_INT 1
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 25
3546: PUSH
3547: LD_INT 5
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 50
3561: PUSH
3562: EMPTY
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 72
3573: PUSH
3574: LD_EXP 32
3578: UNION
3579: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3580: LD_ADDR_VAR 0 14
3584: PUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_INT 81
3590: PUSH
3591: LD_VAR 0 5
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 70
3604: ST_TO_ADDR
// if sol then
3605: LD_VAR 0 12
3609: IFFALSE 4121
// begin if enemyInBase then
3611: LD_VAR 0 14
3615: IFFALSE 3760
// begin for i in sol do
3617: LD_ADDR_VAR 0 1
3621: PUSH
3622: LD_VAR 0 12
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3756
// begin tw := IsInUnit ( i ) ;
3630: LD_ADDR_VAR 0 9
3634: PUSH
3635: LD_VAR 0 1
3639: PPUSH
3640: CALL_OW 310
3644: ST_TO_ADDR
// if tw then
3645: LD_VAR 0 9
3649: IFFALSE 3730
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3651: LD_VAR 0 9
3655: PUSH
3656: LD_INT 22
3658: PUSH
3659: LD_VAR 0 5
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 101
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: LD_INT 30
3683: PUSH
3684: LD_INT 32
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 30
3693: PUSH
3694: LD_INT 31
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 69
3715: IN
3716: NOT
3717: IFFALSE 3728
// ComExitBuilding ( i ) ;
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 122
// end else
3728: GO 3754
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3730: LD_VAR 0 1
3734: PPUSH
3735: LD_VAR 0 14
3739: PPUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 74
3749: PPUSH
3750: CALL_OW 115
// end ;
3754: GO 3627
3756: POP
3757: POP
// end else
3758: GO 4121
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3760: LD_ADDR_VAR 0 15
3764: PUSH
3765: LD_INT 1
3767: PPUSH
3768: LD_INT 3
3770: PUSH
3771: LD_INT 62
3773: PUSH
3774: EMPTY
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 32
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 30
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 30
3806: PUSH
3807: LD_INT 5
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 30
3816: PUSH
3817: LD_INT 31
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PPUSH
3835: CALL_OW 70
3839: ST_TO_ADDR
// if empty then
3840: LD_VAR 0 15
3844: IFFALSE 3861
// empty := ReverseArray ( empty ) ;
3846: LD_ADDR_VAR 0 15
3850: PUSH
3851: LD_VAR 0 15
3855: PPUSH
3856: CALL 53186 0 1
3860: ST_TO_ADDR
// for i in sol do
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_VAR 0 12
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4119
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 8
3878: PUSH
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 256
3898: PUSH
3899: LD_INT 1000
3901: LESS
3902: PUSH
3903: LD_VAR 0 8
3907: PUSH
3908: LD_INT 1
3910: NONEQUAL
3911: AND
3912: IFFALSE 3964
// begin SetTag ( i , tHeal ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 1
3921: PPUSH
3922: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3926: LD_VAR 0 1
3930: PPUSH
3931: LD_EXP 29
3935: PUSH
3936: LD_INT 1
3938: ARRAY
3939: PPUSH
3940: LD_EXP 29
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// continue ;
3962: GO 3871
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 256
3973: PUSH
3974: LD_INT 1000
3976: EQUAL
3977: PUSH
3978: LD_VAR 0 8
3982: PUSH
3983: LD_INT 1
3985: EQUAL
3986: AND
3987: IFFALSE 4003
// begin SetTag ( i , 0 ) ;
3989: LD_VAR 0 1
3993: PPUSH
3994: LD_INT 0
3996: PPUSH
3997: CALL_OW 109
// continue ;
4001: GO 3871
// end ; if HasTask ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 314
4012: IFFALSE 4016
// continue ;
4014: GO 3871
// if not IsInUnit ( i ) and not tag and empty then
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 310
4025: NOT
4026: PUSH
4027: LD_VAR 0 8
4031: NOT
4032: AND
4033: PUSH
4034: LD_VAR 0 15
4038: AND
4039: IFFALSE 4117
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 15
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4059: LD_VAR 0 15
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: PPUSH
4068: CALL_OW 266
4072: PUSH
4073: LD_INT 5
4075: EQUAL
4076: PUSH
4077: LD_INT 50
4079: PPUSH
4080: CALL_OW 13
4084: AND
4085: IFFALSE 4099
// AddComChangeProfession ( i , class_sniper ) ;
4087: LD_VAR 0 1
4091: PPUSH
4092: LD_INT 5
4094: PPUSH
4095: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4099: LD_ADDR_VAR 0 15
4103: PUSH
4104: LD_VAR 0 15
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 3
4116: ST_TO_ADDR
// end ; end ;
4117: GO 3871
4119: POP
4120: POP
// end ; end ; end ;
4121: PPOPN 18
4123: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4124: LD_EXP 33
4128: PPUSH
4129: CALL_OW 302
4133: PUSH
4134: LD_EXP 3
4138: AND
4139: IFFALSE 4421
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin enable ;
4148: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 81
4159: PUSH
4160: LD_INT 1
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 50
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 70
4181: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4182: LD_ADDR_VAR 0 1
4186: PUSH
4187: LD_INT 17
4189: PPUSH
4190: CALL_OW 435
4194: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4195: LD_EXP 33
4199: PPUSH
4200: CALL_OW 261
4204: PUSH
4205: LD_INT 10
4207: LESS
4208: PUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 33
4216: PPUSH
4217: CALL_OW 292
4221: NOT
4222: AND
4223: PUSH
4224: LD_EXP 33
4228: PPUSH
4229: CALL_OW 262
4233: PUSH
4234: LD_INT 1
4236: EQUAL
4237: AND
4238: IFFALSE 4252
// SetFuel ( amCargo , 100 ) ;
4240: LD_EXP 33
4244: PPUSH
4245: LD_INT 100
4247: PPUSH
4248: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4252: LD_EXP 33
4256: PPUSH
4257: CALL_OW 314
4261: NOT
4262: PUSH
4263: LD_EXP 33
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 289
4275: PUSH
4276: LD_INT 100
4278: LESS
4279: AND
4280: PUSH
4281: LD_VAR 0 2
4285: NOT
4286: AND
4287: IFFALSE 4353
// begin if cr then
4289: LD_VAR 0 1
4293: IFFALSE 4324
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4295: LD_EXP 33
4299: PPUSH
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: LD_VAR 0 1
4313: PUSH
4314: LD_INT 2
4316: ARRAY
4317: PPUSH
4318: CALL_OW 117
4322: GO 4351
// if not IsInArea ( amCargo , cratesWestArea ) then
4324: LD_EXP 33
4328: PPUSH
4329: LD_INT 17
4331: PPUSH
4332: CALL_OW 308
4336: NOT
4337: IFFALSE 4351
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4339: LD_EXP 33
4343: PPUSH
4344: LD_INT 17
4346: PPUSH
4347: CALL_OW 113
// exit ;
4351: GO 4421
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4353: LD_VAR 0 2
4357: PUSH
4358: LD_EXP 33
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 308
4370: NOT
4371: AND
4372: IFFALSE 4391
// ComMoveXY ( amCargo , 93 , 137 ) else
4374: LD_EXP 33
4378: PPUSH
4379: LD_INT 93
4381: PPUSH
4382: LD_INT 137
4384: PPUSH
4385: CALL_OW 111
4389: GO 4421
// if GetCargo ( amCargo , mat_cans ) = 100 then
4391: LD_EXP 33
4395: PPUSH
4396: LD_INT 1
4398: PPUSH
4399: CALL_OW 289
4403: PUSH
4404: LD_INT 100
4406: EQUAL
4407: IFFALSE 4421
// ComGive ( amCargo , amBase ) ;
4409: LD_EXP 33
4413: PPUSH
4414: LD_INT 2
4416: PPUSH
4417: CALL_OW 161
// end ;
4421: PPOPN 2
4423: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4424: LD_EXP 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 3
4441: PUSH
4442: LD_INT 60
4444: PUSH
4445: EMPTY
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 50
4454: PUSH
4455: EMPTY
4456: LIST
4457: PUSH
4458: LD_INT 34
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: PPUSH
4474: CALL_OW 69
4478: AND
4479: PUSH
4480: LD_INT 22
4482: PUSH
4483: LD_INT 1
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 3
4492: PUSH
4493: LD_INT 24
4495: PUSH
4496: LD_INT 1000
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: LD_INT 3
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: AND
4527: IFFALSE 4760
4529: GO 4531
4531: DISABLE
4532: LD_INT 0
4534: PPUSH
4535: PPUSH
4536: PPUSH
// begin enable ;
4537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 3
4555: PUSH
4556: LD_INT 24
4558: PUSH
4559: LD_INT 1000
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 69
4589: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_INT 1
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 3
4607: PUSH
4608: LD_INT 24
4610: PUSH
4611: LD_INT 600
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4642: LD_ADDR_VAR 0 1
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 60
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 50
4672: PUSH
4673: EMPTY
4674: LIST
4675: PUSH
4676: LD_INT 34
4678: PUSH
4679: LD_INT 13
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 69
4696: PUSH
4697: FOR_IN
4698: IFFALSE 4758
// begin if tmp2 then
4700: LD_VAR 0 3
4704: IFFALSE 4732
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4706: LD_VAR 0 1
4710: PPUSH
4711: LD_VAR 0 3
4715: PPUSH
4716: LD_VAR 0 1
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 130
4730: GO 4756
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4732: LD_VAR 0 1
4736: PPUSH
4737: LD_VAR 0 2
4741: PPUSH
4742: LD_VAR 0 1
4746: PPUSH
4747: CALL_OW 74
4751: PPUSH
4752: CALL_OW 130
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: PPOPN 3
4762: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4763: LD_EXP 34
4767: PUSH
4768: LD_EXP 19
4772: AND
4773: PUSH
4774: LD_EXP 11
4778: NOT
4779: AND
4780: IFFALSE 5105
4782: GO 4784
4784: DISABLE
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
4791: PPUSH
4792: PPUSH
4793: PPUSH
// begin enable ;
4794: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_INT 30
4802: PUSH
4803: LD_INT 31
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 32
4812: PUSH
4813: LD_INT 33
4815: PUSH
4816: LD_INT 34
4818: PUSH
4819: LD_INT 35
4821: PUSH
4822: LD_INT 33
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 36
4834: PUSH
4835: LD_INT 37
4837: PUSH
4838: LD_INT 38
4840: PUSH
4841: LD_INT 39
4843: PUSH
4844: LD_INT 40
4846: PUSH
4847: LD_INT 41
4849: PUSH
4850: LD_INT 42
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
// for i in amPatrol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_EXP 34
4880: PUSH
4881: FOR_IN
4882: IFFALSE 5103
// begin if See ( 2 , i ) then
4884: LD_INT 2
4886: PPUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 292
4896: IFFALSE 4999
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4898: LD_ADDR_VAR 0 7
4902: PUSH
4903: LD_INT 22
4905: PUSH
4906: LD_INT 2
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PPUSH
4913: CALL_OW 69
4917: PPUSH
4918: LD_VAR 0 1
4922: PPUSH
4923: CALL_OW 74
4927: ST_TO_ADDR
// if enemy then
4928: LD_VAR 0 7
4932: IFFALSE 4999
// begin x := GetX ( enemy ) ;
4934: LD_ADDR_VAR 0 4
4938: PUSH
4939: LD_VAR 0 7
4943: PPUSH
4944: CALL_OW 250
4948: ST_TO_ADDR
// y := GetY ( enemy ) ;
4949: LD_ADDR_VAR 0 5
4953: PUSH
4954: LD_VAR 0 7
4958: PPUSH
4959: CALL_OW 251
4963: ST_TO_ADDR
// if ValidHex ( x , y ) then
4964: LD_VAR 0 4
4968: PPUSH
4969: LD_VAR 0 5
4973: PPUSH
4974: CALL_OW 488
4978: IFFALSE 4999
// ComAgressiveMove ( i , x , y ) ;
4980: LD_VAR 0 1
4984: PPUSH
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_VAR 0 5
4994: PPUSH
4995: CALL_OW 114
// end ; end ; if HasTask ( i ) then
4999: LD_VAR 0 1
5003: PPUSH
5004: CALL_OW 314
5008: IFFALSE 5012
// continue ;
5010: GO 4881
// tag := GetTag ( i ) ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_VAR 0 1
5021: PPUSH
5022: CALL_OW 110
5026: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5027: LD_ADDR_VAR 0 2
5031: PUSH
5032: DOUBLE
5033: LD_INT 1
5035: DEC
5036: ST_TO_ADDR
5037: LD_VAR 0 3
5041: PUSH
5042: LD_VAR 0 6
5046: ARRAY
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5099
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 6
5065: ARRAY
5066: PUSH
5067: LD_VAR 0 2
5071: ARRAY
5072: PPUSH
5073: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_INT 175
5084: PPUSH
5085: LD_INT 385
5087: PPUSH
5088: CALL_OW 12
5092: PPUSH
5093: CALL_OW 202
// end ;
5097: GO 5048
5099: POP
5100: POP
// end ;
5101: GO 4881
5103: POP
5104: POP
// end ;
5105: PPOPN 7
5107: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican do var i , parts , part ;
5108: LD_EXP 31
5112: PPUSH
5113: CALL 22310 0 1
5117: PUSH
5118: LD_INT 5
5120: LESS
5121: PUSH
5122: LD_EXP 3
5126: AND
5127: PUSH
5128: LD_EXP 8
5132: AND
5133: IFFALSE 5327
5135: GO 5137
5137: DISABLE
5138: LD_INT 0
5140: PPUSH
5141: PPUSH
5142: PPUSH
// begin enable ;
5143: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5144: LD_ADDR_VAR 0 2
5148: PUSH
5149: LD_INT 3
5151: PUSH
5152: LD_INT 9
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 4
5161: PUSH
5162: LD_INT 9
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 4
5171: PUSH
5172: LD_INT 6
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 3
5181: PUSH
5182: LD_INT 5
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: LD_INT 4
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
5217: LD_ADDR_VAR 0 1
5221: PUSH
5222: DOUBLE
5223: LD_INT 1
5225: DEC
5226: ST_TO_ADDR
5227: LD_INT 4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_INT 6
5235: PUSH
5236: LD_INT 6
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PUSH
5245: LD_OWVAR 67
5249: ARRAY
5250: PUSH
5251: FOR_TO
5252: IFFALSE 5325
// begin part := parts [ rand ( 1 , parts ) ] ;
5254: LD_ADDR_VAR 0 3
5258: PUSH
5259: LD_VAR 0 2
5263: PUSH
5264: LD_INT 1
5266: PPUSH
5267: LD_VAR 0 2
5271: PPUSH
5272: CALL_OW 12
5276: ARRAY
5277: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5278: LD_ADDR_EXP 28
5282: PUSH
5283: LD_EXP 28
5287: PPUSH
5288: LD_VAR 0 3
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: LD_INT 2
5302: PUSH
5303: LD_VAR 0 3
5307: PUSH
5308: LD_INT 2
5310: ARRAY
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: PPUSH
5318: CALL 57910 0 2
5322: ST_TO_ADDR
5323: GO 5251
5325: POP
5326: POP
// end ;
5327: PPOPN 3
5329: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican do var i , tmp , tmp2 ;
5330: LD_EXP 11
5334: NOT
5335: PUSH
5336: LD_EXP 31
5340: PPUSH
5341: CALL 22310 0 1
5345: AND
5346: PUSH
5347: LD_EXP 8
5351: AND
5352: IFFALSE 5561
5354: GO 5356
5356: DISABLE
5357: LD_INT 0
5359: PPUSH
5360: PPUSH
5361: PPUSH
// begin enable ;
5362: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5363: LD_ADDR_VAR 0 2
5367: PUSH
5368: LD_EXP 31
5372: PPUSH
5373: LD_INT 61
5375: PUSH
5376: EMPTY
5377: LIST
5378: PUSH
5379: LD_INT 50
5381: PUSH
5382: EMPTY
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 72
5393: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5394: LD_ADDR_EXP 31
5398: PUSH
5399: LD_EXP 31
5403: PUSH
5404: LD_VAR 0 2
5408: DIFF
5409: ST_TO_ADDR
// if not tmp then
5410: LD_VAR 0 2
5414: NOT
5415: IFFALSE 5419
// exit ;
5417: GO 5561
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5419: LD_ADDR_VAR 0 3
5423: PUSH
5424: LD_VAR 0 2
5428: PPUSH
5429: LD_INT 34
5431: PUSH
5432: LD_INT 2
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PPUSH
5439: CALL_OW 72
5443: ST_TO_ADDR
// if tmp2 then
5444: LD_VAR 0 3
5448: IFFALSE 5465
// ComMoveXY ( tmp2 , 241 , 99 ) ;
5450: LD_VAR 0 3
5454: PPUSH
5455: LD_INT 241
5457: PPUSH
5458: LD_INT 99
5460: PPUSH
5461: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5465: LD_INT 35
5467: PPUSH
5468: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: LD_VAR 0 2
5481: PPUSH
5482: LD_INT 50
5484: PUSH
5485: EMPTY
5486: LIST
5487: PPUSH
5488: CALL_OW 72
5492: ST_TO_ADDR
// for i in tmp do
5493: LD_ADDR_VAR 0 1
5497: PUSH
5498: LD_VAR 0 2
5502: PUSH
5503: FOR_IN
5504: IFFALSE 5552
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_INT 187
5513: PUSH
5514: LD_INT 114
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 203
5523: PUSH
5524: LD_INT 113
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 218
5533: PUSH
5534: LD_INT 108
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL 60514 0 2
5550: GO 5503
5552: POP
5553: POP
// until not tmp ;
5554: LD_VAR 0 2
5558: NOT
5559: IFFALSE 5465
// end ; end_of_file
5561: PPOPN 3
5563: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5564: LD_INT 0
5566: PPUSH
5567: PPUSH
5568: PPUSH
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
// uc_side := 8 ;
5573: LD_ADDR_OWVAR 20
5577: PUSH
5578: LD_INT 8
5580: ST_TO_ADDR
// uc_nation := nation_arabian ;
5581: LD_ADDR_OWVAR 21
5585: PUSH
5586: LD_INT 2
5588: ST_TO_ADDR
// legForces := [ ] ;
5589: LD_ADDR_EXP 36
5593: PUSH
5594: EMPTY
5595: ST_TO_ADDR
// legEForces := [ ] ;
5596: LD_ADDR_EXP 37
5600: PUSH
5601: EMPTY
5602: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5603: LD_ADDR_EXP 38
5607: PUSH
5608: LD_INT 8
5610: PPUSH
5611: LD_INT 2
5613: PPUSH
5614: LD_INT 1
5616: PPUSH
5617: CALL 20271 0 3
5621: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5622: LD_ADDR_EXP 39
5626: PUSH
5627: LD_INT 13
5629: PUSH
5630: LD_INT 1
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 32
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PUSH
5645: EMPTY
5646: LIST
5647: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5648: LD_ADDR_EXP 40
5652: PUSH
5653: LD_INT 195
5655: PUSH
5656: LD_INT 15
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: ST_TO_ADDR
// legBuildings := [ ] ;
5663: LD_ADDR_EXP 41
5667: PUSH
5668: EMPTY
5669: ST_TO_ADDR
// legTanks := [ ] ;
5670: LD_ADDR_EXP 42
5674: PUSH
5675: EMPTY
5676: ST_TO_ADDR
// legRTanks := [ ] ;
5677: LD_ADDR_EXP 43
5681: PUSH
5682: EMPTY
5683: ST_TO_ADDR
// legCargo := 0 ;
5684: LD_ADDR_EXP 44
5688: PUSH
5689: LD_INT 0
5691: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5692: LD_ADDR_VAR 0 7
5696: PUSH
5697: LD_INT 219
5699: PUSH
5700: LD_INT 31
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 166
5709: PUSH
5710: LD_INT 31
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: ST_TO_ADDR
// for i in sources do
5721: LD_ADDR_VAR 0 2
5725: PUSH
5726: LD_VAR 0 7
5730: PUSH
5731: FOR_IN
5732: IFFALSE 5761
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
5734: LD_VAR 0 2
5738: PUSH
5739: LD_INT 1
5741: ARRAY
5742: PPUSH
5743: LD_VAR 0 2
5747: PUSH
5748: LD_INT 2
5750: ARRAY
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 441
5759: GO 5731
5761: POP
5762: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
5763: LD_INT 38
5765: PPUSH
5766: CALL_OW 274
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: LD_INT 650
5776: PPUSH
5777: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
5781: LD_INT 38
5783: PPUSH
5784: CALL_OW 274
5788: PPUSH
5789: LD_INT 2
5791: PPUSH
5792: LD_INT 120
5794: PPUSH
5795: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
5799: LD_INT 38
5801: PPUSH
5802: CALL_OW 274
5806: PPUSH
5807: LD_INT 3
5809: PPUSH
5810: LD_INT 50
5812: PPUSH
5813: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5817: LD_ADDR_VAR 0 6
5821: PUSH
5822: LD_INT 6
5824: PUSH
5825: LD_INT 7
5827: PUSH
5828: LD_INT 8
5830: PUSH
5831: LD_INT 9
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: PUSH
5840: LD_OWVAR 67
5844: ARRAY
5845: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
5846: LD_ADDR_EXP 35
5850: PUSH
5851: LD_STRING Farmer
5853: PPUSH
5854: LD_INT 0
5856: PPUSH
5857: LD_STRING 
5859: PPUSH
5860: CALL 20208 0 3
5864: ST_TO_ADDR
// for i := 1 to 4 do
5865: LD_ADDR_VAR 0 2
5869: PUSH
5870: DOUBLE
5871: LD_INT 1
5873: DEC
5874: ST_TO_ADDR
5875: LD_INT 4
5877: PUSH
5878: FOR_TO
5879: IFFALSE 6396
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
5881: LD_ADDR_VAR 0 3
5885: PUSH
5886: DOUBLE
5887: LD_INT 1
5889: DEC
5890: ST_TO_ADDR
5891: LD_INT 7
5893: PUSH
5894: LD_INT 8
5896: PUSH
5897: LD_INT 9
5899: PUSH
5900: LD_INT 11
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: PUSH
5909: LD_OWVAR 67
5913: ARRAY
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: LD_INT 4
5920: PUSH
5921: LD_INT 5
5923: PUSH
5924: LD_INT 5
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: LD_OWVAR 67
5937: ARRAY
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: LD_INT 2
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 3
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_OWVAR 67
5964: ARRAY
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: PUSH
5972: LD_VAR 0 2
5976: ARRAY
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6392
// begin PrepareHuman ( false , i , skill ) ;
5981: LD_INT 0
5983: PPUSH
5984: LD_VAR 0 2
5988: PPUSH
5989: LD_VAR 0 6
5993: PPUSH
5994: CALL_OW 380
// un := CreateHuman ;
5998: LD_ADDR_VAR 0 5
6002: PUSH
6003: CALL_OW 44
6007: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6008: LD_ADDR_EXP 36
6012: PUSH
6013: LD_EXP 36
6017: PPUSH
6018: LD_VAR 0 5
6022: PPUSH
6023: CALL 57910 0 2
6027: ST_TO_ADDR
// case i of 1 :
6028: LD_VAR 0 2
6032: PUSH
6033: LD_INT 1
6035: DOUBLE
6036: EQUAL
6037: IFTRUE 6041
6039: GO 6110
6041: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6042: LD_ADDR_VAR 0 4
6046: PUSH
6047: LD_INT 22
6049: PUSH
6050: LD_INT 8
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 2
6059: PUSH
6060: LD_INT 30
6062: PUSH
6063: LD_INT 32
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 30
6072: PUSH
6073: LD_INT 5
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 3
6087: PUSH
6088: LD_INT 62
6090: PUSH
6091: EMPTY
6092: LIST
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: PPUSH
6103: CALL_OW 69
6107: ST_TO_ADDR
6108: GO 6289
6110: LD_INT 2
6112: DOUBLE
6113: EQUAL
6114: IFTRUE 6118
6116: GO 6147
6118: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6119: LD_ADDR_VAR 0 4
6123: PUSH
6124: LD_INT 38
6126: PPUSH
6127: LD_INT 3
6129: PUSH
6130: LD_INT 62
6132: PUSH
6133: EMPTY
6134: LIST
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PPUSH
6140: CALL_OW 72
6144: ST_TO_ADDR
6145: GO 6289
6147: LD_INT 3
6149: DOUBLE
6150: EQUAL
6151: IFTRUE 6155
6153: GO 6229
6155: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6156: LD_ADDR_VAR 0 4
6160: PUSH
6161: LD_INT 22
6163: PUSH
6164: LD_INT 8
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 2
6173: PUSH
6174: LD_INT 30
6176: PUSH
6177: LD_INT 3
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 30
6186: PUSH
6187: LD_INT 36
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 3
6201: PUSH
6202: LD_INT 62
6204: PUSH
6205: EMPTY
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: PPUSH
6217: CALL_OW 69
6221: PPUSH
6222: CALL 53186 0 1
6226: ST_TO_ADDR
6227: GO 6289
6229: LD_INT 4
6231: DOUBLE
6232: EQUAL
6233: IFTRUE 6237
6235: GO 6288
6237: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6238: LD_ADDR_VAR 0 4
6242: PUSH
6243: LD_INT 22
6245: PUSH
6246: LD_INT 8
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 30
6255: PUSH
6256: LD_INT 8
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 3
6265: PUSH
6266: LD_INT 62
6268: PUSH
6269: EMPTY
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 69
6285: ST_TO_ADDR
6286: GO 6289
6288: POP
// if b then
6289: LD_VAR 0 4
6293: IFFALSE 6369
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6295: LD_VAR 0 4
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: PPUSH
6304: CALL_OW 266
6308: PUSH
6309: LD_INT 5
6311: EQUAL
6312: IFFALSE 6349
// if Prob ( 50 ) then
6314: LD_INT 50
6316: PPUSH
6317: CALL_OW 13
6321: IFFALSE 6337
// SetClass ( un , class_mortar ) else
6323: LD_VAR 0 5
6327: PPUSH
6328: LD_INT 8
6330: PPUSH
6331: CALL_OW 336
6335: GO 6349
// SetClass ( un , class_sniper ) ;
6337: LD_VAR 0 5
6341: PPUSH
6342: LD_INT 5
6344: PPUSH
6345: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6349: LD_VAR 0 5
6353: PPUSH
6354: LD_VAR 0 4
6358: PUSH
6359: LD_INT 1
6361: ARRAY
6362: PPUSH
6363: CALL_OW 52
// end else
6367: GO 6390
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6369: LD_VAR 0 5
6373: PPUSH
6374: LD_INT 188
6376: PPUSH
6377: LD_INT 21
6379: PPUSH
6380: LD_INT 4
6382: PPUSH
6383: LD_INT 0
6385: PPUSH
6386: CALL_OW 50
// end ;
6390: GO 5978
6392: POP
6393: POP
6394: GO 5878
6396: POP
6397: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6398: LD_ADDR_VAR 0 4
6402: PUSH
6403: LD_INT 22
6405: PUSH
6406: LD_INT 8
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 30
6418: PUSH
6419: LD_INT 32
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 30
6428: PUSH
6429: LD_INT 5
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 3
6443: PUSH
6444: LD_INT 62
6446: PUSH
6447: EMPTY
6448: LIST
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: PPUSH
6459: CALL_OW 69
6463: ST_TO_ADDR
// if b then
6464: LD_VAR 0 4
6468: IFFALSE 6535
// begin for i in b do
6470: LD_ADDR_VAR 0 2
6474: PUSH
6475: LD_VAR 0 4
6479: PUSH
6480: FOR_IN
6481: IFFALSE 6533
// begin PrepareApemanSoldier ( ) ;
6483: CALL 54020 0 0
// un := CreateHuman ;
6487: LD_ADDR_VAR 0 5
6491: PUSH
6492: CALL_OW 44
6496: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6497: LD_ADDR_EXP 36
6501: PUSH
6502: LD_EXP 36
6506: PPUSH
6507: LD_VAR 0 5
6511: PPUSH
6512: CALL 57910 0 2
6516: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6517: LD_VAR 0 5
6521: PPUSH
6522: LD_VAR 0 2
6526: PPUSH
6527: CALL_OW 52
// end ;
6531: GO 6480
6533: POP
6534: POP
// end ; for i := 1 to 2 do
6535: LD_ADDR_VAR 0 2
6539: PUSH
6540: DOUBLE
6541: LD_INT 1
6543: DEC
6544: ST_TO_ADDR
6545: LD_INT 2
6547: PUSH
6548: FOR_TO
6549: IFFALSE 6676
// begin uc_nation := nation_arabian ;
6551: LD_ADDR_OWVAR 21
6555: PUSH
6556: LD_INT 2
6558: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6559: LD_INT 13
6561: PPUSH
6562: LD_INT 2
6564: PPUSH
6565: LD_INT 1
6567: PPUSH
6568: LD_INT 31
6570: PPUSH
6571: LD_INT 100
6573: PPUSH
6574: CALL 25048 0 5
// un := CreateVehicle ;
6578: LD_ADDR_VAR 0 5
6582: PUSH
6583: CALL_OW 45
6587: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6588: LD_VAR 0 5
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: LD_INT 5
6598: PPUSH
6599: CALL_OW 12
6603: PPUSH
6604: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6608: LD_VAR 0 5
6612: PPUSH
6613: LD_INT 199
6615: PPUSH
6616: LD_INT 24
6618: PPUSH
6619: LD_INT 4
6621: PPUSH
6622: LD_INT 0
6624: PPUSH
6625: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6629: LD_INT 0
6631: PPUSH
6632: LD_INT 8
6634: PUSH
6635: LD_INT 9
6637: PUSH
6638: LD_INT 10
6640: PUSH
6641: LD_INT 10
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: LD_OWVAR 67
6654: ARRAY
6655: PPUSH
6656: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6660: CALL_OW 44
6664: PPUSH
6665: LD_VAR 0 5
6669: PPUSH
6670: CALL_OW 52
// end ;
6674: GO 6548
6676: POP
6677: POP
// end ;
6678: LD_VAR 0 1
6682: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6683: LD_EXP 4
6687: PUSH
6688: LD_EXP 36
6692: PPUSH
6693: CALL 22310 0 1
6697: AND
6698: IFFALSE 9071
6700: GO 6702
6702: DISABLE
6703: LD_INT 0
6705: PPUSH
6706: PPUSH
6707: PPUSH
6708: PPUSH
6709: PPUSH
6710: PPUSH
6711: PPUSH
6712: PPUSH
6713: PPUSH
6714: PPUSH
6715: PPUSH
6716: PPUSH
6717: PPUSH
6718: PPUSH
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
// begin enable ;
6723: ENABLE
// side := 8 ;
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: LD_INT 8
6731: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6732: LD_ADDR_VAR 0 3
6736: PUSH
6737: LD_INT 22
6739: PUSH
6740: LD_VAR 0 5
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 33
6751: PUSH
6752: LD_INT 2
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 50
6761: PUSH
6762: EMPTY
6763: LIST
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 61
6770: PUSH
6771: EMPTY
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: PPUSH
6784: CALL_OW 69
6788: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
6789: LD_VAR 0 3
6793: PUSH
6794: LD_INT 22
6796: PUSH
6797: LD_VAR 0 5
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 50
6808: PUSH
6809: EMPTY
6810: LIST
6811: PUSH
6812: LD_INT 34
6814: PUSH
6815: LD_INT 31
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: PPUSH
6832: CALL 22310 0 1
6836: AND
6837: IFFALSE 6865
// for i in remote do
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_VAR 0 3
6848: PUSH
6849: FOR_IN
6850: IFFALSE 6863
// Connect ( i ) ;
6852: LD_VAR 0 1
6856: PPUSH
6857: CALL 28516 0 1
6861: GO 6849
6863: POP
6864: POP
// if legTech then
6865: LD_EXP 38
6869: IFFALSE 7025
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6871: LD_ADDR_VAR 0 6
6875: PUSH
6876: LD_INT 22
6878: PUSH
6879: LD_VAR 0 5
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 50
6890: PUSH
6891: EMPTY
6892: LIST
6893: PUSH
6894: LD_INT 2
6896: PUSH
6897: LD_INT 30
6899: PUSH
6900: LD_INT 6
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 30
6909: PUSH
6910: LD_INT 7
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 30
6919: PUSH
6920: LD_INT 8
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PPUSH
6938: CALL_OW 69
6942: ST_TO_ADDR
// if lab then
6943: LD_VAR 0 6
6947: IFFALSE 7025
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6949: LD_VAR 0 6
6953: PUSH
6954: LD_INT 1
6956: ARRAY
6957: PPUSH
6958: CALL_OW 461
6962: PUSH
6963: LD_INT 2
6965: EQUAL
6966: IFFALSE 7025
// begin for i in legTech do
6968: LD_ADDR_VAR 0 1
6972: PUSH
6973: LD_EXP 38
6977: PUSH
6978: FOR_IN
6979: IFFALSE 7023
// if CanBeResearched ( lab [ 1 ] , i ) then
6981: LD_VAR 0 6
6985: PUSH
6986: LD_INT 1
6988: ARRAY
6989: PPUSH
6990: LD_VAR 0 1
6994: PPUSH
6995: CALL_OW 430
6999: IFFALSE 7021
// begin ComResearch ( lab [ 1 ] , i ) ;
7001: LD_VAR 0 6
7005: PUSH
7006: LD_INT 1
7008: ARRAY
7009: PPUSH
7010: LD_VAR 0 1
7014: PPUSH
7015: CALL_OW 124
// break ;
7019: GO 7023
// end ;
7021: GO 6978
7023: POP
7024: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7025: LD_ADDR_VAR 0 16
7029: PUSH
7030: LD_INT 2
7032: PPUSH
7033: LD_INT 22
7035: PUSH
7036: LD_VAR 0 5
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: LD_INT 30
7047: PUSH
7048: LD_INT 3
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 50
7057: PUSH
7058: EMPTY
7059: LIST
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: LIST
7065: PPUSH
7066: CALL_OW 70
7070: ST_TO_ADDR
// if fac then
7071: LD_VAR 0 16
7075: IFFALSE 7341
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7077: LD_VAR 0 16
7081: PUSH
7082: LD_INT 1
7084: ARRAY
7085: PPUSH
7086: CALL_OW 461
7090: PUSH
7091: LD_INT 2
7093: EQUAL
7094: IFFALSE 7341
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7096: LD_ADDR_VAR 0 17
7100: PUSH
7101: LD_INT 2
7103: PPUSH
7104: LD_INT 2
7106: PUSH
7107: LD_INT 30
7109: PUSH
7110: LD_INT 32
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 30
7119: PUSH
7120: LD_INT 33
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 35
7134: PUSH
7135: LD_INT 0
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 70
7150: ST_TO_ADDR
// if emptyTowers then
7151: LD_VAR 0 17
7155: IFFALSE 7203
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7157: LD_ADDR_VAR 0 18
7161: PUSH
7162: LD_VAR 0 17
7166: PUSH
7167: LD_INT 1
7169: ARRAY
7170: PPUSH
7171: LD_INT 2
7173: PPUSH
7174: CALL 30555 0 2
7178: ST_TO_ADDR
// if weapon then
7179: LD_VAR 0 18
7183: IFFALSE 7203
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7185: LD_VAR 0 17
7189: PUSH
7190: LD_INT 1
7192: ARRAY
7193: PPUSH
7194: LD_VAR 0 18
7198: PPUSH
7199: CALL_OW 148
// end ; if legConstructList then
7203: LD_EXP 39
7207: IFFALSE 7341
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7209: LD_VAR 0 16
7213: PUSH
7214: LD_INT 1
7216: ARRAY
7217: PPUSH
7218: LD_EXP 39
7222: PUSH
7223: LD_INT 1
7225: ARRAY
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: LD_EXP 39
7235: PUSH
7236: LD_INT 1
7238: ARRAY
7239: PUSH
7240: LD_INT 2
7242: ARRAY
7243: PPUSH
7244: LD_EXP 39
7248: PUSH
7249: LD_INT 1
7251: ARRAY
7252: PUSH
7253: LD_INT 3
7255: ARRAY
7256: PPUSH
7257: LD_EXP 39
7261: PUSH
7262: LD_INT 1
7264: ARRAY
7265: PUSH
7266: LD_INT 4
7268: ARRAY
7269: PPUSH
7270: CALL_OW 448
7274: IFFALSE 7341
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7276: LD_VAR 0 16
7280: PUSH
7281: LD_INT 1
7283: ARRAY
7284: PPUSH
7285: LD_EXP 39
7289: PUSH
7290: LD_INT 1
7292: ARRAY
7293: PUSH
7294: LD_INT 1
7296: ARRAY
7297: PPUSH
7298: LD_EXP 39
7302: PUSH
7303: LD_INT 1
7305: ARRAY
7306: PUSH
7307: LD_INT 2
7309: ARRAY
7310: PPUSH
7311: LD_EXP 39
7315: PUSH
7316: LD_INT 1
7318: ARRAY
7319: PUSH
7320: LD_INT 3
7322: ARRAY
7323: PPUSH
7324: LD_EXP 39
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PUSH
7333: LD_INT 4
7335: ARRAY
7336: PPUSH
7337: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 2
7348: PPUSH
7349: LD_INT 21
7351: PUSH
7352: LD_INT 3
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: LD_INT 57
7364: PUSH
7365: EMPTY
7366: LIST
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 3
7374: PUSH
7375: LD_INT 24
7377: PUSH
7378: LD_INT 1000
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: PPUSH
7394: CALL_OW 70
7398: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7399: LD_ADDR_VAR 0 10
7403: PUSH
7404: LD_INT 14
7406: PPUSH
7407: CALL_OW 435
7411: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7412: LD_ADDR_VAR 0 11
7416: PUSH
7417: LD_EXP 36
7421: PPUSH
7422: LD_INT 25
7424: PUSH
7425: LD_INT 4
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 50
7434: PUSH
7435: EMPTY
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 72
7446: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7447: LD_ADDR_VAR 0 6
7451: PUSH
7452: LD_INT 2
7454: PPUSH
7455: LD_INT 2
7457: PUSH
7458: LD_INT 30
7460: PUSH
7461: LD_INT 6
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 30
7470: PUSH
7471: LD_INT 7
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 30
7480: PUSH
7481: LD_INT 8
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: PPUSH
7494: CALL_OW 70
7498: ST_TO_ADDR
// if sci then
7499: LD_VAR 0 11
7503: IFFALSE 7662
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7505: LD_ADDR_VAR 0 13
7509: PUSH
7510: LD_EXP 36
7514: PPUSH
7515: LD_INT 95
7517: PUSH
7518: LD_INT 2
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: LD_INT 120
7527: PUSH
7528: LD_INT 1
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PPUSH
7539: CALL_OW 72
7543: ST_TO_ADDR
// if hurtUnits then
7544: LD_VAR 0 13
7548: IFFALSE 7609
// begin for i in sci do
7550: LD_ADDR_VAR 0 1
7554: PUSH
7555: LD_VAR 0 11
7559: PUSH
7560: FOR_IN
7561: IFFALSE 7605
// if IsInUnit ( i ) then
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 310
7572: IFFALSE 7585
// ComExitBuilding ( i ) else
7574: LD_VAR 0 1
7578: PPUSH
7579: CALL_OW 122
7583: GO 7603
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7585: LD_VAR 0 1
7589: PPUSH
7590: LD_VAR 0 13
7594: PUSH
7595: LD_INT 1
7597: ARRAY
7598: PPUSH
7599: CALL_OW 128
7603: GO 7560
7605: POP
7606: POP
// end else
7607: GO 7662
// if lab then
7609: LD_VAR 0 6
7613: IFFALSE 7662
// begin for i in sci do
7615: LD_ADDR_VAR 0 1
7619: PUSH
7620: LD_VAR 0 11
7624: PUSH
7625: FOR_IN
7626: IFFALSE 7660
// if not IsInUnit ( i ) then
7628: LD_VAR 0 1
7632: PPUSH
7633: CALL_OW 310
7637: NOT
7638: IFFALSE 7658
// ComEnterUnit ( i , lab [ 1 ] ) ;
7640: LD_VAR 0 1
7644: PPUSH
7645: LD_VAR 0 6
7649: PUSH
7650: LD_INT 1
7652: ARRAY
7653: PPUSH
7654: CALL_OW 120
7658: GO 7625
7660: POP
7661: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
7662: LD_ADDR_VAR 0 7
7666: PUSH
7667: LD_EXP 36
7671: PPUSH
7672: LD_INT 25
7674: PUSH
7675: LD_INT 2
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PPUSH
7682: CALL_OW 72
7686: ST_TO_ADDR
// if eng then
7687: LD_VAR 0 7
7691: IFFALSE 8466
// begin for i in eng do
7693: LD_ADDR_VAR 0 1
7697: PUSH
7698: LD_VAR 0 7
7702: PUSH
7703: FOR_IN
7704: IFFALSE 8464
// begin tag := GetTag ( i ) ;
7706: LD_ADDR_VAR 0 8
7710: PUSH
7711: LD_VAR 0 1
7715: PPUSH
7716: CALL_OW 110
7720: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7721: LD_VAR 0 1
7725: PPUSH
7726: CALL_OW 256
7730: PUSH
7731: LD_INT 800
7733: LESS
7734: PUSH
7735: LD_VAR 0 8
7739: PUSH
7740: LD_INT 1
7742: NONEQUAL
7743: AND
7744: IFFALSE 7794
// begin SetTag ( i , tHeal ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_EXP 40
7767: PUSH
7768: LD_INT 1
7770: ARRAY
7771: PPUSH
7772: LD_EXP 40
7776: PUSH
7777: LD_INT 2
7779: ARRAY
7780: PPUSH
7781: CALL_OW 111
// AddComHold ( i ) ;
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7794: LD_VAR 0 8
7798: PUSH
7799: LD_INT 1
7801: EQUAL
7802: PUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 256
7812: PUSH
7813: LD_INT 1000
7815: EQUAL
7816: AND
7817: IFFALSE 7831
// SetTag ( i , 0 ) ;
7819: LD_VAR 0 1
7823: PPUSH
7824: LD_INT 0
7826: PPUSH
7827: CALL_OW 109
// if not tag then
7831: LD_VAR 0 8
7835: NOT
7836: IFFALSE 8004
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
7838: LD_ADDR_VAR 0 4
7842: PUSH
7843: LD_INT 2
7845: PPUSH
7846: LD_INT 57
7848: PUSH
7849: EMPTY
7850: LIST
7851: PPUSH
7852: CALL_OW 70
7856: ST_TO_ADDR
// if undone then
7857: LD_VAR 0 4
7861: IFFALSE 7883
// begin ComComplete ( i , undone [ 1 ] ) ;
7863: LD_VAR 0 1
7867: PPUSH
7868: LD_VAR 0 4
7872: PUSH
7873: LD_INT 1
7875: ARRAY
7876: PPUSH
7877: CALL 28408 0 2
// continue ;
7881: GO 7703
// end ; if cr or tmp or Count ( legBuildings ) then
7883: LD_VAR 0 10
7887: PUSH
7888: LD_VAR 0 2
7892: OR
7893: PUSH
7894: LD_EXP 41
7898: PPUSH
7899: CALL 22310 0 1
7903: OR
7904: IFFALSE 7980
// begin if IsInUnit ( i ) then
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 310
7915: IFFALSE 7926
// ComExitBuilding ( i ) ;
7917: LD_VAR 0 1
7921: PPUSH
7922: CALL_OW 122
// if tmp then
7926: LD_VAR 0 2
7930: IFFALSE 7946
// SetTag ( i , tRepair ) else
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_INT 3
7939: PPUSH
7940: CALL_OW 109
7944: GO 7978
// if cr then
7946: LD_VAR 0 10
7950: IFFALSE 7966
// SetTag ( i , tCrates ) else
7952: LD_VAR 0 1
7956: PPUSH
7957: LD_INT 2
7959: PPUSH
7960: CALL_OW 109
7964: GO 7978
// SetTag ( i , tBuild ) ;
7966: LD_VAR 0 1
7970: PPUSH
7971: LD_INT 5
7973: PPUSH
7974: CALL_OW 109
// end else
7978: GO 8004
// if not IsInUnit ( i ) then
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 310
7989: NOT
7990: IFFALSE 8004
// ComEnterUnit ( i , legBase ) ;
7992: LD_VAR 0 1
7996: PPUSH
7997: LD_INT 38
7999: PPUSH
8000: CALL_OW 120
// end ; if tag = tRepair then
8004: LD_VAR 0 8
8008: PUSH
8009: LD_INT 3
8011: EQUAL
8012: IFFALSE 8114
// begin if IsInUnit ( i ) then
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 310
8023: IFFALSE 8036
// begin ComExitBuilding ( i ) ;
8025: LD_VAR 0 1
8029: PPUSH
8030: CALL_OW 122
// continue ;
8034: GO 7703
// end ; if not tmp then
8036: LD_VAR 0 2
8040: NOT
8041: IFFALSE 8057
// begin SetTag ( i , 0 ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_INT 0
8050: PPUSH
8051: CALL_OW 109
// continue ;
8055: GO 7703
// end ; if not HasTask ( i ) then
8057: LD_VAR 0 1
8061: PPUSH
8062: CALL_OW 314
8066: NOT
8067: IFFALSE 8087
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8069: LD_VAR 0 1
8073: PPUSH
8074: LD_VAR 0 2
8078: PUSH
8079: LD_INT 1
8081: ARRAY
8082: PPUSH
8083: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8087: LD_VAR 0 1
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: CALL_OW 308
8099: NOT
8100: IFFALSE 8114
// ComMoveToArea ( i , legBaseArea ) ;
8102: LD_VAR 0 1
8106: PPUSH
8107: LD_INT 2
8109: PPUSH
8110: CALL_OW 113
// end ; if tag = tBuild then
8114: LD_VAR 0 8
8118: PUSH
8119: LD_INT 5
8121: EQUAL
8122: IFFALSE 8317
// begin if IsInUnit ( i ) then
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 310
8133: IFFALSE 8146
// begin ComExitBuilding ( i ) ;
8135: LD_VAR 0 1
8139: PPUSH
8140: CALL_OW 122
// continue ;
8144: GO 7703
// end ; if not Count ( legBuildings ) then
8146: LD_EXP 41
8150: PPUSH
8151: CALL 22310 0 1
8155: NOT
8156: IFFALSE 8174
// begin SetTag ( i , 0 ) ;
8158: LD_VAR 0 1
8162: PPUSH
8163: LD_INT 0
8165: PPUSH
8166: CALL_OW 109
// continue ;
8170: GO 7703
// end else
8172: GO 8211
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8174: LD_INT 38
8176: PPUSH
8177: LD_EXP 41
8181: PUSH
8182: LD_INT 1
8184: ARRAY
8185: PUSH
8186: LD_INT 1
8188: ARRAY
8189: PPUSH
8190: CALL 10749 0 2
8194: NOT
8195: IFFALSE 8211
// begin SetTag ( i , 0 ) ;
8197: LD_VAR 0 1
8201: PPUSH
8202: LD_INT 0
8204: PPUSH
8205: CALL_OW 109
// continue ;
8209: GO 7703
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8211: LD_ADDR_VAR 0 4
8215: PUSH
8216: LD_INT 2
8218: PPUSH
8219: LD_INT 57
8221: PUSH
8222: EMPTY
8223: LIST
8224: PPUSH
8225: CALL_OW 70
8229: ST_TO_ADDR
// if undone then
8230: LD_VAR 0 4
8234: IFFALSE 8256
// begin ComComplete ( i , undone [ 1 ] ) ;
8236: LD_VAR 0 1
8240: PPUSH
8241: LD_VAR 0 4
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PPUSH
8250: CALL 28408 0 2
// continue ;
8254: GO 7703
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8256: LD_VAR 0 1
8260: PPUSH
8261: LD_EXP 41
8265: PUSH
8266: LD_INT 1
8268: ARRAY
8269: PUSH
8270: LD_INT 1
8272: ARRAY
8273: PPUSH
8274: LD_EXP 41
8278: PUSH
8279: LD_INT 1
8281: ARRAY
8282: PUSH
8283: LD_INT 2
8285: ARRAY
8286: PPUSH
8287: LD_EXP 41
8291: PUSH
8292: LD_INT 1
8294: ARRAY
8295: PUSH
8296: LD_INT 3
8298: ARRAY
8299: PPUSH
8300: LD_EXP 41
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: PUSH
8309: LD_INT 4
8311: ARRAY
8312: PPUSH
8313: CALL_OW 145
// end ; if tag = tCrates then
8317: LD_VAR 0 8
8321: PUSH
8322: LD_INT 2
8324: EQUAL
8325: IFFALSE 8462
// begin if IsInUnit ( i ) then
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 310
8336: IFFALSE 8349
// begin ComExitBuilding ( i ) ;
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 122
// continue ;
8347: GO 7703
// end ; if not cr then
8349: LD_VAR 0 10
8353: NOT
8354: IFFALSE 8370
// begin SetTag ( i , 0 ) ;
8356: LD_VAR 0 1
8360: PPUSH
8361: LD_INT 0
8363: PPUSH
8364: CALL_OW 109
// continue ;
8368: GO 7703
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 314
8379: NOT
8380: PUSH
8381: LD_INT 81
8383: PUSH
8384: LD_VAR 0 5
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 92
8395: PUSH
8396: LD_VAR 0 10
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PUSH
8405: LD_VAR 0 10
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PUSH
8414: LD_INT 12
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PPUSH
8427: CALL_OW 69
8431: NOT
8432: AND
8433: IFFALSE 8462
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_VAR 0 10
8444: PUSH
8445: LD_INT 1
8447: ARRAY
8448: PPUSH
8449: LD_VAR 0 10
8453: PUSH
8454: LD_INT 2
8456: ARRAY
8457: PPUSH
8458: CALL_OW 117
// end ; end ;
8462: GO 7703
8464: POP
8465: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8466: LD_ADDR_VAR 0 12
8470: PUSH
8471: LD_EXP 36
8475: PPUSH
8476: LD_INT 2
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 1
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 5
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 8
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: PUSH
8515: LD_INT 50
8517: PUSH
8518: EMPTY
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 72
8529: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8530: LD_ADDR_VAR 0 14
8534: PUSH
8535: LD_INT 2
8537: PPUSH
8538: LD_INT 81
8540: PUSH
8541: LD_VAR 0 5
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PPUSH
8550: CALL_OW 70
8554: ST_TO_ADDR
// if sol then
8555: LD_VAR 0 12
8559: IFFALSE 9071
// begin if enemyInBase then
8561: LD_VAR 0 14
8565: IFFALSE 8710
// begin for i in sol do
8567: LD_ADDR_VAR 0 1
8571: PUSH
8572: LD_VAR 0 12
8576: PUSH
8577: FOR_IN
8578: IFFALSE 8706
// begin tw := IsInUnit ( i ) ;
8580: LD_ADDR_VAR 0 9
8584: PUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 310
8594: ST_TO_ADDR
// if tw then
8595: LD_VAR 0 9
8599: IFFALSE 8680
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8601: LD_VAR 0 9
8605: PUSH
8606: LD_INT 22
8608: PUSH
8609: LD_VAR 0 5
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 101
8620: PUSH
8621: LD_INT 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 2
8630: PUSH
8631: LD_INT 30
8633: PUSH
8634: LD_INT 32
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 30
8643: PUSH
8644: LD_INT 31
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 69
8665: IN
8666: NOT
8667: IFFALSE 8678
// ComExitBuilding ( i ) ;
8669: LD_VAR 0 1
8673: PPUSH
8674: CALL_OW 122
// end else
8678: GO 8704
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_VAR 0 14
8689: PPUSH
8690: LD_VAR 0 1
8694: PPUSH
8695: CALL_OW 74
8699: PPUSH
8700: CALL_OW 115
// end ;
8704: GO 8577
8706: POP
8707: POP
// end else
8708: GO 9071
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8710: LD_ADDR_VAR 0 15
8714: PUSH
8715: LD_INT 2
8717: PPUSH
8718: LD_INT 3
8720: PUSH
8721: LD_INT 62
8723: PUSH
8724: EMPTY
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 2
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_INT 32
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 30
8746: PUSH
8747: LD_INT 4
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 30
8756: PUSH
8757: LD_INT 5
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 30
8766: PUSH
8767: LD_INT 31
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 70
8789: ST_TO_ADDR
// if empty then
8790: LD_VAR 0 15
8794: IFFALSE 8811
// empty := ReverseArray ( empty ) ;
8796: LD_ADDR_VAR 0 15
8800: PUSH
8801: LD_VAR 0 15
8805: PPUSH
8806: CALL 53186 0 1
8810: ST_TO_ADDR
// for i in sol do
8811: LD_ADDR_VAR 0 1
8815: PUSH
8816: LD_VAR 0 12
8820: PUSH
8821: FOR_IN
8822: IFFALSE 9069
// begin tag := GetTag ( i ) ;
8824: LD_ADDR_VAR 0 8
8828: PUSH
8829: LD_VAR 0 1
8833: PPUSH
8834: CALL_OW 110
8838: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8839: LD_VAR 0 1
8843: PPUSH
8844: CALL_OW 256
8848: PUSH
8849: LD_INT 1000
8851: LESS
8852: PUSH
8853: LD_VAR 0 8
8857: PUSH
8858: LD_INT 1
8860: NONEQUAL
8861: AND
8862: IFFALSE 8914
// begin SetTag ( i , tHeal ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_INT 1
8871: PPUSH
8872: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8876: LD_VAR 0 1
8880: PPUSH
8881: LD_EXP 40
8885: PUSH
8886: LD_INT 1
8888: ARRAY
8889: PPUSH
8890: LD_EXP 40
8894: PUSH
8895: LD_INT 2
8897: ARRAY
8898: PPUSH
8899: CALL_OW 111
// AddComHold ( i ) ;
8903: LD_VAR 0 1
8907: PPUSH
8908: CALL_OW 200
// continue ;
8912: GO 8821
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL_OW 256
8923: PUSH
8924: LD_INT 1000
8926: EQUAL
8927: PUSH
8928: LD_VAR 0 8
8932: PUSH
8933: LD_INT 1
8935: EQUAL
8936: AND
8937: IFFALSE 8953
// begin SetTag ( i , 0 ) ;
8939: LD_VAR 0 1
8943: PPUSH
8944: LD_INT 0
8946: PPUSH
8947: CALL_OW 109
// continue ;
8951: GO 8821
// end ; if HasTask ( i ) then
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 314
8962: IFFALSE 8966
// continue ;
8964: GO 8821
// if not IsInUnit ( i ) and not tag and empty then
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 310
8975: NOT
8976: PUSH
8977: LD_VAR 0 8
8981: NOT
8982: AND
8983: PUSH
8984: LD_VAR 0 15
8988: AND
8989: IFFALSE 9067
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
8991: LD_VAR 0 1
8995: PPUSH
8996: LD_VAR 0 15
9000: PUSH
9001: LD_INT 1
9003: ARRAY
9004: PPUSH
9005: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9009: LD_VAR 0 15
9013: PUSH
9014: LD_INT 1
9016: ARRAY
9017: PPUSH
9018: CALL_OW 266
9022: PUSH
9023: LD_INT 5
9025: EQUAL
9026: PUSH
9027: LD_INT 50
9029: PPUSH
9030: CALL_OW 13
9034: AND
9035: IFFALSE 9049
// AddComChangeProfession ( i , class_mortar ) ;
9037: LD_VAR 0 1
9041: PPUSH
9042: LD_INT 8
9044: PPUSH
9045: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9049: LD_ADDR_VAR 0 15
9053: PUSH
9054: LD_VAR 0 15
9058: PPUSH
9059: LD_INT 1
9061: PPUSH
9062: CALL_OW 3
9066: ST_TO_ADDR
// end ; end ;
9067: GO 8821
9069: POP
9070: POP
// end ; end ; end ;
9071: PPOPN 18
9073: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive do var cr , enemyInArea ;
9074: LD_EXP 44
9078: PPUSH
9079: CALL_OW 302
9083: PUSH
9084: LD_EXP 4
9088: AND
9089: IFFALSE 9371
9091: GO 9093
9093: DISABLE
9094: LD_INT 0
9096: PPUSH
9097: PPUSH
// begin enable ;
9098: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: LD_INT 2
9106: PPUSH
9107: LD_INT 81
9109: PUSH
9110: LD_INT 8
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 50
9119: PUSH
9120: EMPTY
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 70
9131: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9132: LD_ADDR_VAR 0 1
9136: PUSH
9137: LD_INT 16
9139: PPUSH
9140: CALL_OW 435
9144: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9145: LD_EXP 44
9149: PPUSH
9150: CALL_OW 261
9154: PUSH
9155: LD_INT 10
9157: LESS
9158: PUSH
9159: LD_INT 2
9161: PPUSH
9162: LD_EXP 44
9166: PPUSH
9167: CALL_OW 292
9171: NOT
9172: AND
9173: PUSH
9174: LD_EXP 44
9178: PPUSH
9179: CALL_OW 262
9183: PUSH
9184: LD_INT 1
9186: EQUAL
9187: AND
9188: IFFALSE 9202
// SetFuel ( legCargo , 100 ) ;
9190: LD_EXP 44
9194: PPUSH
9195: LD_INT 100
9197: PPUSH
9198: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9202: LD_EXP 44
9206: PPUSH
9207: CALL_OW 314
9211: NOT
9212: PUSH
9213: LD_EXP 44
9217: PPUSH
9218: LD_INT 1
9220: PPUSH
9221: CALL_OW 289
9225: PUSH
9226: LD_INT 100
9228: LESS
9229: AND
9230: PUSH
9231: LD_VAR 0 2
9235: NOT
9236: AND
9237: IFFALSE 9303
// begin if cr then
9239: LD_VAR 0 1
9243: IFFALSE 9274
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9245: LD_EXP 44
9249: PPUSH
9250: LD_VAR 0 1
9254: PUSH
9255: LD_INT 1
9257: ARRAY
9258: PPUSH
9259: LD_VAR 0 1
9263: PUSH
9264: LD_INT 2
9266: ARRAY
9267: PPUSH
9268: CALL_OW 117
9272: GO 9301
// if not IsInArea ( legCargo , cratesNorthArea ) then
9274: LD_EXP 44
9278: PPUSH
9279: LD_INT 16
9281: PPUSH
9282: CALL_OW 308
9286: NOT
9287: IFFALSE 9301
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9289: LD_EXP 44
9293: PPUSH
9294: LD_INT 16
9296: PPUSH
9297: CALL_OW 113
// exit ;
9301: GO 9371
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9303: LD_VAR 0 2
9307: PUSH
9308: LD_EXP 44
9312: PPUSH
9313: LD_INT 2
9315: PPUSH
9316: CALL_OW 308
9320: NOT
9321: AND
9322: IFFALSE 9341
// ComMoveXY ( legCargo , 194 , 17 ) else
9324: LD_EXP 44
9328: PPUSH
9329: LD_INT 194
9331: PPUSH
9332: LD_INT 17
9334: PPUSH
9335: CALL_OW 111
9339: GO 9371
// if GetCargo ( legCargo , mat_cans ) = 100 then
9341: LD_EXP 44
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 289
9353: PUSH
9354: LD_INT 100
9356: EQUAL
9357: IFFALSE 9371
// ComGive ( legCargo , legBase ) ;
9359: LD_EXP 44
9363: PPUSH
9364: LD_INT 38
9366: PPUSH
9367: CALL_OW 161
// end ;
9371: PPOPN 2
9373: END
// every 12 12$00 trigger Count ( legTanks ) < 5 and legScriptActive and spotByLegion do var i , parts , part ;
9374: LD_EXP 42
9378: PPUSH
9379: CALL 22310 0 1
9383: PUSH
9384: LD_INT 5
9386: LESS
9387: PUSH
9388: LD_EXP 4
9392: AND
9393: PUSH
9394: LD_EXP 9
9398: AND
9399: IFFALSE 9593
9401: GO 9403
9403: DISABLE
9404: LD_INT 0
9406: PPUSH
9407: PPUSH
9408: PPUSH
// begin enable ;
9409: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9410: LD_ADDR_VAR 0 2
9414: PUSH
9415: LD_INT 13
9417: PUSH
9418: LD_INT 28
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 13
9427: PUSH
9428: LD_INT 27
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 13
9437: PUSH
9438: LD_INT 26
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 14
9447: PUSH
9448: LD_INT 26
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: LD_INT 14
9457: PUSH
9458: LD_INT 28
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 14
9467: PUSH
9468: LD_INT 25
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 6 ] [ Difficulty ] do
9483: LD_ADDR_VAR 0 1
9487: PUSH
9488: DOUBLE
9489: LD_INT 1
9491: DEC
9492: ST_TO_ADDR
9493: LD_INT 4
9495: PUSH
9496: LD_INT 5
9498: PUSH
9499: LD_INT 6
9501: PUSH
9502: LD_INT 6
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: LD_OWVAR 67
9515: ARRAY
9516: PUSH
9517: FOR_TO
9518: IFFALSE 9591
// begin part := parts [ rand ( 1 , parts ) ] ;
9520: LD_ADDR_VAR 0 3
9524: PUSH
9525: LD_VAR 0 2
9529: PUSH
9530: LD_INT 1
9532: PPUSH
9533: LD_VAR 0 2
9537: PPUSH
9538: CALL_OW 12
9542: ARRAY
9543: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
9544: LD_ADDR_EXP 39
9548: PUSH
9549: LD_EXP 39
9553: PPUSH
9554: LD_VAR 0 3
9558: PUSH
9559: LD_INT 1
9561: ARRAY
9562: PUSH
9563: LD_INT 1
9565: PUSH
9566: LD_INT 2
9568: PUSH
9569: LD_VAR 0 3
9573: PUSH
9574: LD_INT 2
9576: ARRAY
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PPUSH
9584: CALL 57910 0 2
9588: ST_TO_ADDR
9589: GO 9517
9591: POP
9592: POP
// end ;
9593: PPOPN 3
9595: END
// every 20 20$00 trigger not legionDestroyed and tick <= 60 60$00 do
9596: LD_EXP 12
9600: NOT
9601: PUSH
9602: LD_OWVAR 1
9606: PUSH
9607: LD_INT 126000
9609: LESSEQUAL
9610: AND
9611: IFFALSE 9650
9613: GO 9615
9615: DISABLE
// begin enable ;
9616: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
9617: LD_ADDR_EXP 39
9621: PUSH
9622: LD_EXP 39
9626: PPUSH
9627: LD_INT 14
9629: PUSH
9630: LD_INT 1
9632: PUSH
9633: LD_INT 1
9635: PUSH
9636: LD_INT 27
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: PPUSH
9645: CALL 57910 0 2
9649: ST_TO_ADDR
// end ;
9650: END
// every 0 0$1 trigger legTanks and spotByLegion do var i , mech , enemy ;
9651: LD_EXP 42
9655: PUSH
9656: LD_EXP 9
9660: AND
9661: IFFALSE 10254
9663: GO 9665
9665: DISABLE
9666: LD_INT 0
9668: PPUSH
9669: PPUSH
9670: PPUSH
// begin enable ;
9671: ENABLE
// if not legTanks then
9672: LD_EXP 42
9676: NOT
9677: IFFALSE 9681
// exit ;
9679: GO 10254
// for i in legTanks do
9681: LD_ADDR_VAR 0 1
9685: PUSH
9686: LD_EXP 42
9690: PUSH
9691: FOR_IN
9692: IFFALSE 10252
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
9694: LD_VAR 0 1
9698: PPUSH
9699: CALL_OW 302
9703: NOT
9704: PUSH
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 255
9714: PUSH
9715: LD_INT 8
9717: NONEQUAL
9718: OR
9719: IFFALSE 9739
// begin legTanks := legTanks diff i ;
9721: LD_ADDR_EXP 42
9725: PUSH
9726: LD_EXP 42
9730: PUSH
9731: LD_VAR 0 1
9735: DIFF
9736: ST_TO_ADDR
// continue ;
9737: GO 9691
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
9739: LD_VAR 0 1
9743: PPUSH
9744: CALL_OW 110
9748: NOT
9749: PUSH
9750: LD_VAR 0 1
9754: PPUSH
9755: CALL_OW 263
9759: PUSH
9760: LD_INT 2
9762: EQUAL
9763: AND
9764: IFFALSE 9778
// SetTag ( i , tAttack ) ;
9766: LD_VAR 0 1
9770: PPUSH
9771: LD_INT 10
9773: PPUSH
9774: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
9778: LD_VAR 0 1
9782: PPUSH
9783: CALL_OW 110
9787: NOT
9788: PUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 110
9798: PUSH
9799: LD_INT 0
9801: EQUAL
9802: OR
9803: IFFALSE 9933
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 261
9814: PUSH
9815: LD_INT 50
9817: LESS
9818: PUSH
9819: LD_VAR 0 1
9823: PPUSH
9824: CALL_OW 262
9828: PUSH
9829: LD_INT 1
9831: EQUAL
9832: AND
9833: IFFALSE 9892
// begin ComMoveXY ( i , 189 , 19 ) ;
9835: LD_VAR 0 1
9839: PPUSH
9840: LD_INT 189
9842: PPUSH
9843: LD_INT 19
9845: PPUSH
9846: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9850: LD_INT 35
9852: PPUSH
9853: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
9857: LD_VAR 0 1
9861: PPUSH
9862: LD_INT 189
9864: PPUSH
9865: LD_INT 19
9867: PPUSH
9868: CALL_OW 297
9872: PUSH
9873: LD_INT 4
9875: LESS
9876: IFFALSE 9850
// SetFuel ( i , 100 ) ;
9878: LD_VAR 0 1
9882: PPUSH
9883: LD_INT 100
9885: PPUSH
9886: CALL_OW 240
// end else
9890: GO 9933
// if not IsInArea ( i , legParkingArea ) then
9892: LD_VAR 0 1
9896: PPUSH
9897: LD_INT 15
9899: PPUSH
9900: CALL_OW 308
9904: NOT
9905: IFFALSE 9921
// ComMoveToArea ( i , legParkingArea ) else
9907: LD_VAR 0 1
9911: PPUSH
9912: LD_INT 15
9914: PPUSH
9915: CALL_OW 113
9919: GO 9933
// SetTag ( i , tParking ) ;
9921: LD_VAR 0 1
9925: PPUSH
9926: LD_INT 9
9928: PPUSH
9929: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9933: LD_VAR 0 1
9937: PPUSH
9938: CALL_OW 110
9942: PUSH
9943: LD_INT 9
9945: EQUAL
9946: IFFALSE 10076
// begin if GetLives ( i ) < 650 then
9948: LD_VAR 0 1
9952: PPUSH
9953: CALL_OW 256
9957: PUSH
9958: LD_INT 650
9960: LESS
9961: IFFALSE 10053
// begin if not IsDrivenBy ( i ) then
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 311
9972: NOT
9973: IFFALSE 9977
// continue ;
9975: GO 9691
// mech := IsDrivenBy ( i ) ;
9977: LD_ADDR_VAR 0 2
9981: PUSH
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 311
9991: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9992: LD_VAR 0 2
9996: PPUSH
9997: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10001: LD_VAR 0 2
10005: PPUSH
10006: LD_VAR 0 1
10010: PPUSH
10011: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10015: LD_INT 35
10017: PPUSH
10018: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10022: LD_VAR 0 1
10026: PPUSH
10027: CALL_OW 256
10031: PUSH
10032: LD_INT 1000
10034: EQUAL
10035: IFFALSE 10015
// ComEnterUnit ( mech , i ) ;
10037: LD_VAR 0 2
10041: PPUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 120
// end else
10051: GO 10076
// if IsDrivenBy ( i ) then
10053: LD_VAR 0 1
10057: PPUSH
10058: CALL_OW 311
10062: IFFALSE 10076
// SetTag ( i , tAttack ) ;
10064: LD_VAR 0 1
10068: PPUSH
10069: LD_INT 10
10071: PPUSH
10072: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10076: LD_VAR 0 1
10080: PPUSH
10081: CALL_OW 110
10085: PUSH
10086: LD_INT 10
10088: EQUAL
10089: IFFALSE 10250
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10091: LD_ADDR_VAR 0 3
10095: PUSH
10096: LD_INT 2
10098: PPUSH
10099: LD_INT 81
10101: PUSH
10102: LD_INT 8
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PPUSH
10109: CALL_OW 70
10113: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 256
10123: PUSH
10124: LD_INT 650
10126: LESS
10127: PUSH
10128: LD_VAR 0 1
10132: PPUSH
10133: CALL_OW 263
10137: PUSH
10138: LD_INT 1
10140: EQUAL
10141: AND
10142: IFFALSE 10167
// begin ComStop ( i ) ;
10144: LD_VAR 0 1
10148: PPUSH
10149: CALL_OW 141
// SetTag ( i , 0 ) ;
10153: LD_VAR 0 1
10157: PPUSH
10158: LD_INT 0
10160: PPUSH
10161: CALL_OW 109
// continue ;
10165: GO 9691
// end ; if enemy then
10167: LD_VAR 0 3
10171: IFFALSE 10211
// begin if not HasTask ( i ) then
10173: LD_VAR 0 1
10177: PPUSH
10178: CALL_OW 314
10182: NOT
10183: IFFALSE 10209
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10185: LD_VAR 0 1
10189: PPUSH
10190: LD_VAR 0 3
10194: PPUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 74
10204: PPUSH
10205: CALL 61982 0 2
// end else
10209: GO 10250
// if legTanks then
10211: LD_EXP 42
10215: IFFALSE 10250
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10217: LD_VAR 0 1
10221: PPUSH
10222: LD_INT 200
10224: PUSH
10225: LD_INT 48
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 210
10234: PUSH
10235: LD_INT 74
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PPUSH
10246: CALL 60514 0 2
// end ; end ;
10250: GO 9691
10252: POP
10253: POP
// end ;
10254: PPOPN 3
10256: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion do var i , tmp , tmp2 ;
10257: LD_EXP 12
10261: NOT
10262: PUSH
10263: LD_EXP 43
10267: PPUSH
10268: CALL 22310 0 1
10272: AND
10273: PUSH
10274: LD_EXP 9
10278: AND
10279: IFFALSE 10477
10281: GO 10283
10283: DISABLE
10284: LD_INT 0
10286: PPUSH
10287: PPUSH
10288: PPUSH
// begin enable ;
10289: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10290: LD_ADDR_VAR 0 2
10294: PUSH
10295: LD_EXP 43
10299: PPUSH
10300: LD_INT 61
10302: PUSH
10303: EMPTY
10304: LIST
10305: PUSH
10306: LD_INT 50
10308: PUSH
10309: EMPTY
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 72
10320: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10321: LD_ADDR_EXP 43
10325: PUSH
10326: LD_EXP 43
10330: PUSH
10331: LD_VAR 0 2
10335: DIFF
10336: ST_TO_ADDR
// if not tmp then
10337: LD_VAR 0 2
10341: NOT
10342: IFFALSE 10346
// exit ;
10344: GO 10477
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10346: LD_ADDR_VAR 0 3
10350: PUSH
10351: LD_VAR 0 2
10355: PPUSH
10356: LD_INT 34
10358: PUSH
10359: LD_INT 24
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PPUSH
10366: CALL_OW 72
10370: ST_TO_ADDR
// if tmp2 then
10371: LD_VAR 0 3
10375: IFFALSE 10392
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10377: LD_VAR 0 3
10381: PPUSH
10382: LD_INT 241
10384: PPUSH
10385: LD_INT 99
10387: PPUSH
10388: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10399: LD_ADDR_VAR 0 2
10403: PUSH
10404: LD_VAR 0 2
10408: PPUSH
10409: LD_INT 50
10411: PUSH
10412: EMPTY
10413: LIST
10414: PPUSH
10415: CALL_OW 72
10419: ST_TO_ADDR
// for i in tmp do
10420: LD_ADDR_VAR 0 1
10424: PUSH
10425: LD_VAR 0 2
10429: PUSH
10430: FOR_IN
10431: IFFALSE 10468
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10433: LD_VAR 0 1
10437: PPUSH
10438: LD_INT 200
10440: PUSH
10441: LD_INT 48
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 210
10450: PUSH
10451: LD_INT 74
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PPUSH
10462: CALL 60514 0 2
10466: GO 10430
10468: POP
10469: POP
// until not tmp ;
10470: LD_VAR 0 2
10474: NOT
10475: IFFALSE 10392
// end ;
10477: PPOPN 3
10479: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10480: LD_EXP 9
10484: NOT
10485: IFFALSE 10746
10487: GO 10489
10489: DISABLE
10490: LD_INT 0
10492: PPUSH
10493: PPUSH
10494: PPUSH
10495: PPUSH
// begin uc_side := 8 ;
10496: LD_ADDR_OWVAR 20
10500: PUSH
10501: LD_INT 8
10503: ST_TO_ADDR
// uc_nation := nation_arabian ;
10504: LD_ADDR_OWVAR 21
10508: PUSH
10509: LD_INT 2
10511: ST_TO_ADDR
// for i := 1 to 3 do
10512: LD_ADDR_VAR 0 1
10516: PUSH
10517: DOUBLE
10518: LD_INT 1
10520: DEC
10521: ST_TO_ADDR
10522: LD_INT 3
10524: PUSH
10525: FOR_TO
10526: IFFALSE 10661
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
10528: LD_INT 14
10530: PPUSH
10531: LD_INT 3
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: LD_INT 27
10539: PUSH
10540: LD_INT 25
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_VAR 0 1
10551: PUSH
10552: LD_INT 2
10554: MOD
10555: PUSH
10556: LD_INT 1
10558: PLUS
10559: ARRAY
10560: PPUSH
10561: LD_INT 100
10563: PPUSH
10564: CALL 25048 0 5
// veh := CreateVehicle ;
10568: LD_ADDR_VAR 0 3
10572: PUSH
10573: CALL_OW 45
10577: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10578: LD_VAR 0 3
10582: PPUSH
10583: LD_INT 5
10585: PPUSH
10586: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
10590: LD_VAR 0 3
10594: PPUSH
10595: LD_INT 44
10597: PPUSH
10598: LD_INT 0
10600: PPUSH
10601: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
10605: LD_INT 0
10607: PPUSH
10608: LD_INT 6
10610: PPUSH
10611: CALL_OW 383
// un := CreateHuman ;
10615: LD_ADDR_VAR 0 2
10619: PUSH
10620: CALL_OW 44
10624: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10625: LD_VAR 0 2
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10639: LD_ADDR_VAR 0 4
10643: PUSH
10644: LD_VAR 0 4
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: CALL 57910 0 2
10658: ST_TO_ADDR
// end ;
10659: GO 10525
10661: POP
10662: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
10663: LD_VAR 0 4
10667: PPUSH
10668: LD_INT 219
10670: PPUSH
10671: LD_INT 110
10673: PPUSH
10674: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
10678: LD_VAR 0 4
10682: PPUSH
10683: LD_INT 220
10685: PPUSH
10686: LD_INT 94
10688: PPUSH
10689: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
10693: LD_VAR 0 4
10697: PPUSH
10698: LD_INT 209
10700: PPUSH
10701: LD_INT 66
10703: PPUSH
10704: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
10708: LD_VAR 0 4
10712: PPUSH
10713: LD_INT 189
10715: PPUSH
10716: LD_INT 22
10718: PPUSH
10719: CALL_OW 171
// wait ( 0 0$10 ) ;
10723: LD_INT 350
10725: PPUSH
10726: CALL_OW 67
// legTanks := legTanks union tmp ;
10730: LD_ADDR_EXP 42
10734: PUSH
10735: LD_EXP 42
10739: PUSH
10740: LD_VAR 0 4
10744: UNION
10745: ST_TO_ADDR
// end ; end_of_file
10746: PPOPN 4
10748: END
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
10749: LD_INT 0
10751: PPUSH
10752: PPUSH
10753: PPUSH
// if btype = b_depot then
10754: LD_VAR 0 2
10758: PUSH
10759: LD_INT 0
10761: EQUAL
10762: IFFALSE 10774
// begin result := true ;
10764: LD_ADDR_VAR 0 3
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// exit ;
10772: GO 10890
// end ; pom := GetBase ( depot ) ;
10774: LD_ADDR_VAR 0 4
10778: PUSH
10779: LD_VAR 0 1
10783: PPUSH
10784: CALL_OW 274
10788: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
10789: LD_ADDR_VAR 0 5
10793: PUSH
10794: LD_VAR 0 2
10798: PPUSH
10799: LD_VAR 0 1
10803: PPUSH
10804: CALL_OW 248
10808: PPUSH
10809: CALL_OW 450
10813: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
10814: LD_ADDR_VAR 0 3
10818: PUSH
10819: LD_VAR 0 4
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 275
10831: PUSH
10832: LD_VAR 0 5
10836: PUSH
10837: LD_INT 1
10839: ARRAY
10840: GREATEREQUAL
10841: PUSH
10842: LD_VAR 0 4
10846: PPUSH
10847: LD_INT 2
10849: PPUSH
10850: CALL_OW 275
10854: PUSH
10855: LD_VAR 0 5
10859: PUSH
10860: LD_INT 2
10862: ARRAY
10863: GREATEREQUAL
10864: AND
10865: PUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_INT 3
10873: PPUSH
10874: CALL_OW 275
10878: PUSH
10879: LD_VAR 0 5
10883: PUSH
10884: LD_INT 3
10886: ARRAY
10887: GREATEREQUAL
10888: AND
10889: ST_TO_ADDR
// end ;
10890: LD_VAR 0 3
10894: RET
// export function CreateNature ; var i , areas , amount ; begin
10895: LD_INT 0
10897: PPUSH
10898: PPUSH
10899: PPUSH
10900: PPUSH
// PrepareTiger ( 0 ) ;
10901: LD_INT 0
10903: PPUSH
10904: CALL 54286 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
10908: LD_ADDR_VAR 0 2
10912: PUSH
10913: DOUBLE
10914: LD_INT 1
10916: DEC
10917: ST_TO_ADDR
10918: LD_INT 10
10920: PUSH
10921: LD_INT 8
10923: PUSH
10924: LD_INT 5
10926: PUSH
10927: LD_INT 5
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: PUSH
10936: LD_OWVAR 67
10940: ARRAY
10941: PUSH
10942: FOR_TO
10943: IFFALSE 10962
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10945: CALL_OW 44
10949: PPUSH
10950: LD_INT 7
10952: PPUSH
10953: LD_INT 0
10955: PPUSH
10956: CALL_OW 49
10960: GO 10942
10962: POP
10963: POP
// PrepareBird ;
10964: CALL 54467 0 0
// for i := 1 to 3 do
10968: LD_ADDR_VAR 0 2
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_INT 3
10980: PUSH
10981: FOR_TO
10982: IFFALSE 11001
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10984: CALL_OW 44
10988: PPUSH
10989: LD_INT 7
10991: PPUSH
10992: LD_INT 0
10994: PPUSH
10995: CALL_OW 49
10999: GO 10981
11001: POP
11002: POP
// PrepareHorse ;
11003: CALL 54507 0 0
// for i := 1 to 3 do
11007: LD_ADDR_VAR 0 2
11011: PUSH
11012: DOUBLE
11013: LD_INT 1
11015: DEC
11016: ST_TO_ADDR
11017: LD_INT 3
11019: PUSH
11020: FOR_TO
11021: IFFALSE 11040
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11023: CALL_OW 44
11027: PPUSH
11028: LD_INT 7
11030: PPUSH
11031: LD_INT 0
11033: PPUSH
11034: CALL_OW 49
11038: GO 11020
11040: POP
11041: POP
// PrepareFrog ;
11042: CALL 54387 0 0
// for i := 1 to 3 do
11046: LD_ADDR_VAR 0 2
11050: PUSH
11051: DOUBLE
11052: LD_INT 1
11054: DEC
11055: ST_TO_ADDR
11056: LD_INT 3
11058: PUSH
11059: FOR_TO
11060: IFFALSE 11079
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11062: CALL_OW 44
11066: PPUSH
11067: LD_INT 8
11069: PPUSH
11070: LD_INT 0
11072: PPUSH
11073: CALL_OW 49
11077: GO 11059
11079: POP
11080: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11081: LD_ADDR_VAR 0 4
11085: PUSH
11086: LD_INT 3
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: LD_INT 2
11094: PUSH
11095: LD_INT 1
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: PUSH
11104: LD_OWVAR 67
11108: ARRAY
11109: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11110: LD_ADDR_VAR 0 3
11114: PUSH
11115: LD_INT 18
11117: PUSH
11118: LD_INT 19
11120: PUSH
11121: LD_INT 20
11123: PUSH
11124: LD_INT 21
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: ST_TO_ADDR
// PrepareMastodont ;
11133: CALL 54547 0 0
// for i := 1 to amount do
11137: LD_ADDR_VAR 0 2
11141: PUSH
11142: DOUBLE
11143: LD_INT 1
11145: DEC
11146: ST_TO_ADDR
11147: LD_VAR 0 4
11151: PUSH
11152: FOR_TO
11153: IFFALSE 11190
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11155: CALL_OW 45
11159: PPUSH
11160: LD_VAR 0 3
11164: PUSH
11165: LD_VAR 0 2
11169: PUSH
11170: LD_INT 1
11172: MINUS
11173: PUSH
11174: LD_OWVAR 67
11178: PLUS
11179: ARRAY
11180: PPUSH
11181: LD_INT 0
11183: PPUSH
11184: CALL_OW 49
11188: GO 11152
11190: POP
11191: POP
// PrepareApeman ( 0 ) ;
11192: LD_INT 0
11194: PPUSH
11195: CALL 54178 0 1
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11199: LD_ADDR_VAR 0 2
11203: PUSH
11204: DOUBLE
11205: LD_INT 1
11207: DEC
11208: ST_TO_ADDR
11209: LD_INT 9
11211: PUSH
11212: LD_INT 7
11214: PUSH
11215: LD_INT 6
11217: PUSH
11218: LD_INT 5
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: PUSH
11227: LD_OWVAR 67
11231: ARRAY
11232: PUSH
11233: FOR_TO
11234: IFFALSE 11253
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11236: CALL_OW 44
11240: PPUSH
11241: LD_INT 6
11243: PPUSH
11244: LD_INT 0
11246: PPUSH
11247: CALL_OW 49
11251: GO 11233
11253: POP
11254: POP
// for i := 1 to [ 7 , 6 , 5 , 4 ] [ Difficulty ] do
11255: LD_ADDR_VAR 0 2
11259: PUSH
11260: DOUBLE
11261: LD_INT 1
11263: DEC
11264: ST_TO_ADDR
11265: LD_INT 7
11267: PUSH
11268: LD_INT 6
11270: PUSH
11271: LD_INT 5
11273: PUSH
11274: LD_INT 4
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: LD_OWVAR 67
11287: ARRAY
11288: PUSH
11289: FOR_TO
11290: IFFALSE 11315
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 6 , false ) ;
11292: CALL_OW 44
11296: PPUSH
11297: LD_INT 274
11299: PPUSH
11300: LD_INT 133
11302: PPUSH
11303: LD_INT 6
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 50
11313: GO 11289
11315: POP
11316: POP
// for i := 1 to [ 4 , 4 , 3 , 3 ] [ Difficulty ] do
11317: LD_ADDR_VAR 0 2
11321: PUSH
11322: DOUBLE
11323: LD_INT 1
11325: DEC
11326: ST_TO_ADDR
11327: LD_INT 4
11329: PUSH
11330: LD_INT 4
11332: PUSH
11333: LD_INT 3
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: LD_OWVAR 67
11349: ARRAY
11350: PUSH
11351: FOR_TO
11352: IFFALSE 11377
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 6 , false ) ;
11354: CALL_OW 44
11358: PPUSH
11359: LD_INT 208
11361: PPUSH
11362: LD_INT 142
11364: PPUSH
11365: LD_INT 6
11367: PPUSH
11368: LD_INT 0
11370: PPUSH
11371: CALL_OW 50
11375: GO 11351
11377: POP
11378: POP
// end ;
11379: LD_VAR 0 1
11383: RET
// export function AreInArea ( units , area ) ; var i ; begin
11384: LD_INT 0
11386: PPUSH
11387: PPUSH
// result := false ;
11388: LD_ADDR_VAR 0 3
11392: PUSH
11393: LD_INT 0
11395: ST_TO_ADDR
// if not units then
11396: LD_VAR 0 1
11400: NOT
11401: IFFALSE 11405
// exit ;
11403: GO 11471
// for i in units do
11405: LD_ADDR_VAR 0 4
11409: PUSH
11410: LD_VAR 0 1
11414: PUSH
11415: FOR_IN
11416: IFFALSE 11469
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11418: LD_VAR 0 4
11422: PPUSH
11423: LD_VAR 0 2
11427: PPUSH
11428: CALL_OW 308
11432: PUSH
11433: LD_VAR 0 4
11437: PPUSH
11438: CALL_OW 310
11442: PPUSH
11443: LD_VAR 0 2
11447: PPUSH
11448: CALL_OW 308
11452: OR
11453: IFFALSE 11467
// begin result := true ;
11455: LD_ADDR_VAR 0 3
11459: PUSH
11460: LD_INT 1
11462: ST_TO_ADDR
// exit ;
11463: POP
11464: POP
11465: GO 11471
// end ;
11467: GO 11415
11469: POP
11470: POP
// end ; end_of_file
11471: LD_VAR 0 3
11475: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11476: LD_INT 0
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
11482: PPUSH
// InGameOn ;
11483: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11487: LD_INT 84
11489: PPUSH
11490: LD_INT 28
11492: PPUSH
11493: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11497: LD_INT 2
11499: PPUSH
11500: LD_INT 9
11502: PPUSH
11503: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11507: LD_EXP 22
11511: PPUSH
11512: LD_INT 90
11514: PPUSH
11515: LD_INT 30
11517: PPUSH
11518: CALL_OW 111
// uc_side := 1 ;
11522: LD_ADDR_OWVAR 20
11526: PUSH
11527: LD_INT 1
11529: ST_TO_ADDR
// uc_nation := nation_american ;
11530: LD_ADDR_OWVAR 21
11534: PUSH
11535: LD_INT 1
11537: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11538: LD_INT 3
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: LD_INT 1
11546: PPUSH
11547: LD_INT 9
11549: PPUSH
11550: LD_INT 66
11552: PPUSH
11553: CALL 25048 0 5
// veh := CreateVehicle ;
11557: LD_ADDR_VAR 0 4
11561: PUSH
11562: CALL_OW 45
11566: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11567: LD_VAR 0 4
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11579: LD_VAR 0 4
11583: PPUSH
11584: LD_INT 80
11586: PPUSH
11587: LD_INT 27
11589: PPUSH
11590: LD_INT 0
11592: PPUSH
11593: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11597: LD_INT 1
11599: PPUSH
11600: LD_INT 8
11602: PPUSH
11603: CALL_OW 383
// mech := CreateHuman ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: CALL_OW 44
11616: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11617: LD_VAR 0 3
11621: PPUSH
11622: LD_VAR 0 4
11626: PPUSH
11627: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11631: LD_INT 35
11633: PPUSH
11634: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11638: LD_INT 90
11640: PPUSH
11641: LD_INT 30
11643: PPUSH
11644: CALL_OW 428
11648: IFFALSE 11631
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
11650: LD_INT 80
11652: PPUSH
11653: LD_INT 27
11655: PPUSH
11656: LD_INT 2
11658: PPUSH
11659: LD_INT 6
11661: NEG
11662: PPUSH
11663: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
11667: LD_INT 80
11669: PPUSH
11670: LD_INT 27
11672: PPUSH
11673: CALL_OW 86
// DialogueOn ;
11677: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
11681: LD_EXP 22
11685: PPUSH
11686: LD_STRING DH-Start-1
11688: PPUSH
11689: CALL_OW 88
// DialogueOff ;
11693: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11697: LD_EXP 22
11701: PPUSH
11702: LD_VAR 0 4
11706: PPUSH
11707: CALL_OW 115
// wait ( 0 0$1 ) ;
11711: LD_INT 35
11713: PPUSH
11714: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
11718: LD_EXP 22
11722: PPUSH
11723: CALL_OW 310
11727: PPUSH
11728: LD_INT 200
11730: PPUSH
11731: CALL_OW 234
// wait ( 0 0$0.3 ) ;
11735: LD_INT 10
11737: PPUSH
11738: CALL_OW 67
// DialogueOn ;
11742: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
11746: LD_EXP 22
11750: PPUSH
11751: LD_STRING DH-Start-2
11753: PPUSH
11754: CALL_OW 88
// DialogueOff ;
11758: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11762: LD_EXP 22
11766: PPUSH
11767: LD_VAR 0 4
11771: PPUSH
11772: CALL_OW 115
// wait ( 0 0$0.2 ) ;
11776: LD_INT 7
11778: PPUSH
11779: CALL_OW 67
// ComCrawl ( Heike ) ;
11783: LD_EXP 22
11787: PPUSH
11788: CALL_OW 137
// wait ( 0 0$3 ) ;
11792: LD_INT 105
11794: PPUSH
11795: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
11799: LD_EXP 25
11803: PPUSH
11804: LD_INT 82
11806: PPUSH
11807: LD_INT 43
11809: PPUSH
11810: LD_INT 0
11812: PPUSH
11813: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
11817: LD_EXP 23
11821: PPUSH
11822: LD_EXP 25
11826: PPUSH
11827: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
11831: LD_EXP 23
11835: PPUSH
11836: LD_INT 79
11838: PPUSH
11839: LD_INT 32
11841: PPUSH
11842: CALL_OW 111
// wait ( 0 0$1 ) ;
11846: LD_INT 35
11848: PPUSH
11849: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
11853: LD_INT 79
11855: PPUSH
11856: LD_INT 32
11858: PPUSH
11859: LD_INT 2
11861: PPUSH
11862: LD_INT 8
11864: NEG
11865: PPUSH
11866: CALL_OW 330
// wait ( 0 0$3 ) ;
11870: LD_INT 105
11872: PPUSH
11873: CALL_OW 67
// SetLives ( veh , 200 ) ;
11877: LD_VAR 0 4
11881: PPUSH
11882: LD_INT 200
11884: PPUSH
11885: CALL_OW 234
// wait ( 0 0$1 ) ;
11889: LD_INT 35
11891: PPUSH
11892: CALL_OW 67
// SetLives ( mech , 10 ) ;
11896: LD_VAR 0 3
11900: PPUSH
11901: LD_INT 10
11903: PPUSH
11904: CALL_OW 234
// wait ( 0 0$2 ) ;
11908: LD_INT 70
11910: PPUSH
11911: CALL_OW 67
// ComWalk ( Heike ) ;
11915: LD_EXP 22
11919: PPUSH
11920: CALL_OW 138
// wait ( 1 ) ;
11924: LD_INT 1
11926: PPUSH
11927: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
11931: LD_EXP 22
11935: PPUSH
11936: LD_INT 81
11938: PPUSH
11939: LD_INT 25
11941: PPUSH
11942: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
11946: LD_EXP 22
11950: PPUSH
11951: LD_INT 72
11953: PPUSH
11954: LD_INT 25
11956: PPUSH
11957: CALL_OW 171
// wait ( 0 0$3 ) ;
11961: LD_INT 105
11963: PPUSH
11964: CALL_OW 67
// ComExitVehicle ( Omar ) ;
11968: LD_EXP 23
11972: PPUSH
11973: CALL_OW 121
// wait ( 1 ) ;
11977: LD_INT 1
11979: PPUSH
11980: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
11984: LD_EXP 23
11988: PPUSH
11989: LD_INT 77
11991: PPUSH
11992: LD_INT 28
11994: PPUSH
11995: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
11999: LD_EXP 23
12003: PPUSH
12004: LD_EXP 22
12008: PPUSH
12009: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12013: LD_EXP 23
12017: PPUSH
12018: LD_STRING DO-Start-3
12020: PPUSH
12021: CALL_OW 88
// repeat wait ( 3 ) ;
12025: LD_INT 3
12027: PPUSH
12028: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12032: LD_EXP 22
12036: PPUSH
12037: LD_INT 72
12039: PPUSH
12040: LD_INT 25
12042: PPUSH
12043: CALL_OW 307
12047: IFFALSE 12025
// ComHold ( Heike ) ;
12049: LD_EXP 22
12053: PPUSH
12054: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12058: LD_EXP 23
12062: PPUSH
12063: LD_EXP 22
12067: PPUSH
12068: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12072: LD_EXP 22
12076: PPUSH
12077: LD_EXP 23
12081: PPUSH
12082: CALL_OW 112
// wait ( 0 0$1 ) ;
12086: LD_INT 35
12088: PPUSH
12089: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12093: LD_EXP 22
12097: PPUSH
12098: LD_EXP 23
12102: PPUSH
12103: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12107: LD_EXP 22
12111: PPUSH
12112: LD_STRING DH-Start-4
12114: PPUSH
12115: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12119: LD_EXP 23
12123: PPUSH
12124: LD_STRING DO-Start-5
12126: PPUSH
12127: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12131: LD_EXP 22
12135: PPUSH
12136: LD_STRING DH-Start-6
12138: PPUSH
12139: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12143: LD_EXP 23
12147: PPUSH
12148: LD_STRING DO-Start-7
12150: PPUSH
12151: CALL_OW 88
// if Query ( QOmar ) = 2 then
12155: LD_STRING QOmar
12157: PPUSH
12158: CALL_OW 97
12162: PUSH
12163: LD_INT 2
12165: EQUAL
12166: IFFALSE 12457
// begin Say ( Heike , DH-QuestionN-1 ) ;
12168: LD_EXP 22
12172: PPUSH
12173: LD_STRING DH-QuestionN-1
12175: PPUSH
12176: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12180: LD_EXP 22
12184: PPUSH
12185: LD_INT 58
12187: PPUSH
12188: LD_INT 27
12190: PPUSH
12191: CALL_OW 111
// wait ( 0 0$2 ) ;
12195: LD_INT 70
12197: PPUSH
12198: CALL_OW 67
// RemoveSeeing ( 79 , 32 , 2 ) ;
12202: LD_INT 79
12204: PPUSH
12205: LD_INT 32
12207: PPUSH
12208: LD_INT 2
12210: PPUSH
12211: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12215: LD_INT 80
12217: PPUSH
12218: LD_INT 27
12220: PPUSH
12221: LD_INT 2
12223: PPUSH
12224: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12228: LD_INT 58
12230: PPUSH
12231: LD_INT 27
12233: PPUSH
12234: CALL_OW 84
// repeat wait ( 3 ) ;
12238: LD_INT 3
12240: PPUSH
12241: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12245: LD_EXP 22
12249: PPUSH
12250: LD_INT 88
12252: PPUSH
12253: LD_INT 27
12255: PPUSH
12256: CALL_OW 297
12260: IFFALSE 12238
// uc_side := 1 ;
12262: LD_ADDR_OWVAR 20
12266: PUSH
12267: LD_INT 1
12269: ST_TO_ADDR
// uc_nation := nation_american ;
12270: LD_ADDR_OWVAR 21
12274: PUSH
12275: LD_INT 1
12277: ST_TO_ADDR
// amTroops := [ ] ;
12278: LD_ADDR_VAR 0 5
12282: PUSH
12283: EMPTY
12284: ST_TO_ADDR
// for i := 1 to 3 do
12285: LD_ADDR_VAR 0 2
12289: PUSH
12290: DOUBLE
12291: LD_INT 1
12293: DEC
12294: ST_TO_ADDR
12295: LD_INT 3
12297: PUSH
12298: FOR_TO
12299: IFFALSE 12392
// begin PrepareSoldier ( false , 10 ) ;
12301: LD_INT 0
12303: PPUSH
12304: LD_INT 10
12306: PPUSH
12307: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12311: LD_ADDR_VAR 0 5
12315: PUSH
12316: LD_VAR 0 5
12320: PPUSH
12321: CALL_OW 44
12325: PPUSH
12326: CALL 57910 0 2
12330: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12331: LD_VAR 0 5
12335: PUSH
12336: LD_VAR 0 2
12340: ARRAY
12341: PPUSH
12342: LD_INT 2
12344: PPUSH
12345: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12349: LD_VAR 0 5
12353: PUSH
12354: LD_VAR 0 2
12358: ARRAY
12359: PPUSH
12360: LD_INT 10
12362: PPUSH
12363: LD_INT 0
12365: PPUSH
12366: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12370: LD_VAR 0 5
12374: PUSH
12375: LD_VAR 0 2
12379: ARRAY
12380: PPUSH
12381: LD_EXP 22
12385: PPUSH
12386: CALL_OW 115
// end ;
12390: GO 12298
12392: POP
12393: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12394: LD_EXP 22
12398: PPUSH
12399: LD_VAR 0 5
12403: PUSH
12404: LD_INT 1
12406: ARRAY
12407: PPUSH
12408: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12412: LD_INT 35
12414: PPUSH
12415: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12419: LD_EXP 22
12423: PPUSH
12424: CALL_OW 301
12428: PUSH
12429: LD_EXP 22
12433: PPUSH
12434: CALL_OW 303
12438: OR
12439: IFFALSE 12412
// wait ( 0 0$2 ) ;
12441: LD_INT 70
12443: PPUSH
12444: CALL_OW 67
// YouLost ( Heike ) ;
12448: LD_STRING Heike
12450: PPUSH
12451: CALL_OW 104
// exit ;
12455: GO 13337
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12457: LD_EXP 22
12461: PPUSH
12462: LD_STRING DH-QuestionY-1
12464: PPUSH
12465: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12469: LD_INT 10
12471: PPUSH
12472: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12476: LD_EXP 23
12480: PPUSH
12481: LD_STRING DO-Story-1
12483: PPUSH
12484: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12488: LD_EXP 23
12492: PPUSH
12493: LD_STRING DO-Story-2
12495: PPUSH
12496: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12500: LD_EXP 23
12504: PPUSH
12505: LD_STRING DO-Story-3
12507: PPUSH
12508: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12512: LD_EXP 23
12516: PPUSH
12517: LD_STRING DO-Story-4
12519: PPUSH
12520: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12524: LD_EXP 22
12528: PPUSH
12529: LD_STRING DH-Story-5
12531: PPUSH
12532: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12536: LD_EXP 23
12540: PPUSH
12541: LD_STRING DO-Story-6
12543: PPUSH
12544: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12548: LD_EXP 23
12552: PPUSH
12553: LD_STRING DO-Story-7
12555: PPUSH
12556: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12560: LD_EXP 22
12564: PPUSH
12565: LD_INT 82
12567: PPUSH
12568: LD_INT 44
12570: PPUSH
12571: CALL_OW 111
// AddComHold ( Heike ) ;
12575: LD_EXP 22
12579: PPUSH
12580: CALL_OW 200
// wait ( 0 0$4 ) ;
12584: LD_INT 140
12586: PPUSH
12587: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12591: LD_EXP 23
12595: PPUSH
12596: LD_INT 82
12598: PPUSH
12599: LD_INT 41
12601: PPUSH
12602: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12606: LD_EXP 23
12610: PPUSH
12611: LD_EXP 22
12615: PPUSH
12616: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12620: LD_INT 35
12622: PPUSH
12623: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12627: LD_EXP 22
12631: PPUSH
12632: LD_INT 82
12634: PPUSH
12635: LD_INT 44
12637: PPUSH
12638: CALL_OW 307
12642: IFFALSE 12620
// ComTurnXY ( Heike , 81 , 47 ) ;
12644: LD_EXP 22
12648: PPUSH
12649: LD_INT 81
12651: PPUSH
12652: LD_INT 47
12654: PPUSH
12655: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
12659: LD_EXP 22
12663: PPUSH
12664: LD_STRING DH-Story-8
12666: PPUSH
12667: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
12671: LD_EXP 23
12675: PPUSH
12676: LD_STRING DO-Story-9
12678: PPUSH
12679: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
12683: LD_EXP 23
12687: PPUSH
12688: LD_STRING DO-Story-10
12690: PPUSH
12691: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
12695: LD_EXP 22
12699: PPUSH
12700: LD_EXP 23
12704: PPUSH
12705: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
12709: LD_EXP 22
12713: PPUSH
12714: LD_STRING DH-Story-11
12716: PPUSH
12717: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
12721: LD_EXP 23
12725: PPUSH
12726: LD_EXP 22
12730: PPUSH
12731: CALL_OW 112
// wait ( 0 0$0.3 ) ;
12735: LD_INT 10
12737: PPUSH
12738: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12742: LD_EXP 23
12746: PPUSH
12747: LD_EXP 22
12751: PPUSH
12752: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
12756: LD_EXP 23
12760: PPUSH
12761: LD_STRING DO-Story-12
12763: PPUSH
12764: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
12768: LD_EXP 22
12772: PPUSH
12773: LD_STRING DH-Story-13
12775: PPUSH
12776: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
12780: LD_EXP 23
12784: PPUSH
12785: LD_STRING DO-Story-14
12787: PPUSH
12788: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
12792: LD_EXP 23
12796: PPUSH
12797: LD_STRING DO-Story-15
12799: PPUSH
12800: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
12804: LD_INT 84
12806: PPUSH
12807: LD_INT 48
12809: PPUSH
12810: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
12814: LD_EXP 22
12818: PPUSH
12819: LD_INT 84
12821: PPUSH
12822: LD_INT 48
12824: PPUSH
12825: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
12829: LD_EXP 22
12833: PPUSH
12834: LD_INT 84
12836: PPUSH
12837: LD_INT 49
12839: PPUSH
12840: CALL_OW 178
// wait ( 0 0$1 ) ;
12844: LD_INT 35
12846: PPUSH
12847: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
12851: LD_EXP 23
12855: PPUSH
12856: LD_EXP 22
12860: PPUSH
12861: CALL_OW 112
// wait ( 0 0$1 ) ;
12865: LD_INT 35
12867: PPUSH
12868: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12872: LD_EXP 23
12876: PPUSH
12877: LD_EXP 22
12881: PPUSH
12882: CALL_OW 119
// wait ( 0 0$0.3 ) ;
12886: LD_INT 10
12888: PPUSH
12889: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
12893: LD_EXP 23
12897: PPUSH
12898: LD_STRING DO-Story-16
12900: PPUSH
12901: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
12905: LD_STRING QOmar2
12907: PPUSH
12908: CALL_OW 97
12912: PUSH
12913: LD_INT 2
12915: EQUAL
12916: IFFALSE 13214
// begin ComMoveXY ( Heike , 79 , 57 ) ;
12918: LD_EXP 22
12922: PPUSH
12923: LD_INT 79
12925: PPUSH
12926: LD_INT 57
12928: PPUSH
12929: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
12933: LD_EXP 22
12937: PPUSH
12938: LD_INT 68
12940: PPUSH
12941: LD_INT 53
12943: PPUSH
12944: CALL_OW 171
// wait ( 0 0$2 ) ;
12948: LD_INT 70
12950: PPUSH
12951: CALL_OW 67
// RemoveSeeing ( 79 , 32 , 2 ) ;
12955: LD_INT 79
12957: PPUSH
12958: LD_INT 32
12960: PPUSH
12961: LD_INT 2
12963: PPUSH
12964: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12968: LD_INT 80
12970: PPUSH
12971: LD_INT 27
12973: PPUSH
12974: LD_INT 2
12976: PPUSH
12977: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
12981: LD_INT 68
12983: PPUSH
12984: LD_INT 53
12986: PPUSH
12987: CALL_OW 84
// repeat wait ( 3 ) ;
12991: LD_INT 3
12993: PPUSH
12994: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
12998: LD_EXP 22
13002: PPUSH
13003: LD_INT 68
13005: PPUSH
13006: LD_INT 53
13008: PPUSH
13009: CALL_OW 297
13013: PUSH
13014: LD_INT 6
13016: LESS
13017: IFFALSE 12991
// uc_side := 1 ;
13019: LD_ADDR_OWVAR 20
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// uc_nation := nation_american ;
13027: LD_ADDR_OWVAR 21
13031: PUSH
13032: LD_INT 1
13034: ST_TO_ADDR
// amTroops := [ ] ;
13035: LD_ADDR_VAR 0 5
13039: PUSH
13040: EMPTY
13041: ST_TO_ADDR
// for i := 1 to 3 do
13042: LD_ADDR_VAR 0 2
13046: PUSH
13047: DOUBLE
13048: LD_INT 1
13050: DEC
13051: ST_TO_ADDR
13052: LD_INT 3
13054: PUSH
13055: FOR_TO
13056: IFFALSE 13149
// begin PrepareSoldier ( false , 10 ) ;
13058: LD_INT 0
13060: PPUSH
13061: LD_INT 10
13063: PPUSH
13064: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13068: LD_ADDR_VAR 0 5
13072: PUSH
13073: LD_VAR 0 5
13077: PPUSH
13078: CALL_OW 44
13082: PPUSH
13083: CALL 57910 0 2
13087: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13088: LD_VAR 0 5
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: PPUSH
13099: LD_INT 2
13101: PPUSH
13102: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13106: LD_VAR 0 5
13110: PUSH
13111: LD_VAR 0 2
13115: ARRAY
13116: PPUSH
13117: LD_INT 11
13119: PPUSH
13120: LD_INT 0
13122: PPUSH
13123: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13127: LD_VAR 0 5
13131: PUSH
13132: LD_VAR 0 2
13136: ARRAY
13137: PPUSH
13138: LD_EXP 22
13142: PPUSH
13143: CALL_OW 115
// end ;
13147: GO 13055
13149: POP
13150: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13151: LD_EXP 22
13155: PPUSH
13156: LD_VAR 0 5
13160: PUSH
13161: LD_INT 1
13163: ARRAY
13164: PPUSH
13165: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13169: LD_INT 35
13171: PPUSH
13172: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13176: LD_EXP 22
13180: PPUSH
13181: CALL_OW 301
13185: PUSH
13186: LD_EXP 22
13190: PPUSH
13191: CALL_OW 303
13195: OR
13196: IFFALSE 13169
// wait ( 0 0$2 ) ;
13198: LD_INT 70
13200: PPUSH
13201: CALL_OW 67
// YouLost ( Heike ) ;
13205: LD_STRING Heike
13207: PPUSH
13208: CALL_OW 104
// exit ;
13212: GO 13337
// end ; Say ( Omar , DO-Objective-1 ) ;
13214: LD_EXP 23
13218: PPUSH
13219: LD_STRING DO-Objective-1
13221: PPUSH
13222: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13226: LD_EXP 22
13230: PPUSH
13231: LD_EXP 23
13235: PPUSH
13236: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13240: LD_EXP 22
13244: PPUSH
13245: LD_STRING DH-Objective-2
13247: PPUSH
13248: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13252: LD_EXP 23
13256: PPUSH
13257: LD_STRING DO-Objective-3
13259: PPUSH
13260: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13264: LD_INT 79
13266: PPUSH
13267: LD_INT 32
13269: PPUSH
13270: LD_INT 2
13272: PPUSH
13273: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13277: LD_INT 80
13279: PPUSH
13280: LD_INT 27
13282: PPUSH
13283: LD_INT 2
13285: PPUSH
13286: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13290: LD_EXP 23
13294: PPUSH
13295: LD_INT 2
13297: PPUSH
13298: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13302: LD_EXP 25
13306: PPUSH
13307: LD_INT 2
13309: PPUSH
13310: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13314: LD_STRING O1
13316: PPUSH
13317: CALL_OW 337
// InGameOff ;
13321: CALL_OW 9
// gameActive := true ;
13325: LD_ADDR_EXP 19
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// SaveForQuickRestart ;
13333: CALL_OW 22
// end ;
13337: LD_VAR 0 1
13341: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13342: LD_EXP 19
13346: PUSH
13347: LD_EXP 7
13351: NOT
13352: AND
13353: PUSH
13354: LD_INT 4
13356: PPUSH
13357: LD_INT 22
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PPUSH
13367: CALL_OW 70
13371: AND
13372: IFFALSE 13523
13374: GO 13376
13376: DISABLE
13377: LD_INT 0
13379: PPUSH
// begin spotArabianBase := true ;
13380: LD_ADDR_EXP 7
13384: PUSH
13385: LD_INT 1
13387: ST_TO_ADDR
// DialogueOn ;
13388: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13392: LD_INT 232
13394: PPUSH
13395: LD_INT 101
13397: PPUSH
13398: LD_INT 2
13400: PPUSH
13401: LD_INT 22
13403: NEG
13404: PPUSH
13405: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13409: LD_INT 232
13411: PPUSH
13412: LD_INT 101
13414: PPUSH
13415: LD_INT 2
13417: PPUSH
13418: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13422: LD_INT 232
13424: PPUSH
13425: LD_INT 101
13427: PPUSH
13428: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13432: LD_ADDR_VAR 0 1
13436: PUSH
13437: LD_INT 4
13439: PPUSH
13440: LD_INT 22
13442: PUSH
13443: LD_INT 5
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PPUSH
13450: CALL_OW 70
13454: PUSH
13455: FOR_IN
13456: IFFALSE 13472
// SetSide ( i , 2 ) ;
13458: LD_VAR 0 1
13462: PPUSH
13463: LD_INT 2
13465: PPUSH
13466: CALL_OW 235
13470: GO 13455
13472: POP
13473: POP
// if not spotAmericanBase then
13474: LD_EXP 6
13478: NOT
13479: IFFALSE 13495
// Say ( Omar , DO-ArBase-1a ) else
13481: LD_EXP 23
13485: PPUSH
13486: LD_STRING DO-ArBase-1a
13488: PPUSH
13489: CALL_OW 88
13493: GO 13507
// Say ( Omar , DO-ArBase-1b ) ;
13495: LD_EXP 23
13499: PPUSH
13500: LD_STRING DO-ArBase-1b
13502: PPUSH
13503: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13507: LD_EXP 22
13511: PPUSH
13512: LD_STRING DH-ArBase-2
13514: PPUSH
13515: CALL_OW 88
// DialogueOff ;
13519: CALL_OW 7
// end ;
13523: PPOPN 1
13525: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13526: LD_EXP 19
13530: PUSH
13531: LD_INT 87
13533: PPUSH
13534: CALL_OW 306
13538: PUSH
13539: LD_INT 87
13541: PPUSH
13542: CALL_OW 313
13546: OR
13547: AND
13548: PUSH
13549: LD_EXP 22
13553: PPUSH
13554: CALL_OW 302
13558: AND
13559: PUSH
13560: LD_EXP 23
13564: PPUSH
13565: CALL_OW 302
13569: AND
13570: IFFALSE 13914
13572: GO 13574
13574: DISABLE
// begin DialogueOn ;
13575: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13579: LD_EXP 22
13583: PPUSH
13584: LD_STRING DH-Fac-1
13586: PPUSH
13587: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13591: LD_EXP 23
13595: PPUSH
13596: LD_STRING DOm-Fac-2
13598: PPUSH
13599: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
13603: LD_STRING 03_CargoRecycled
13605: PPUSH
13606: LD_INT 0
13608: PPUSH
13609: CALL_OW 30
13613: IFFALSE 13628
// SetTech ( tech_cargo , 2 , state_researched ) ;
13615: LD_INT 83
13617: PPUSH
13618: LD_INT 2
13620: PPUSH
13621: LD_INT 2
13623: PPUSH
13624: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
13628: LD_STRING 09_Markov
13630: PPUSH
13631: CALL_OW 28
13635: IFFALSE 13750
// begin Say ( Heike , DH-Fac-3a ) ;
13637: LD_EXP 22
13641: PPUSH
13642: LD_STRING DH-Fac-3a
13644: PPUSH
13645: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
13649: LD_INT 69
13651: PPUSH
13652: LD_INT 2
13654: PPUSH
13655: LD_INT 2
13657: PPUSH
13658: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
13662: LD_INT 39
13664: PPUSH
13665: LD_INT 2
13667: PPUSH
13668: LD_INT 2
13670: PPUSH
13671: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
13675: LD_INT 6
13677: PPUSH
13678: LD_INT 2
13680: PPUSH
13681: LD_INT 2
13683: PPUSH
13684: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13688: LD_INT 15
13690: PPUSH
13691: LD_INT 2
13693: PPUSH
13694: LD_INT 2
13696: PPUSH
13697: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13701: LD_EXP 22
13705: PPUSH
13706: LD_INT 3
13708: PPUSH
13709: CALL_OW 259
13713: PUSH
13714: LD_INT 10
13716: LESS
13717: IFFALSE 13748
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13719: LD_EXP 22
13723: PPUSH
13724: LD_INT 3
13726: PPUSH
13727: LD_EXP 22
13731: PPUSH
13732: LD_INT 3
13734: PPUSH
13735: CALL_OW 259
13739: PUSH
13740: LD_INT 1
13742: PLUS
13743: PPUSH
13744: CALL_OW 237
// end else
13748: GO 13903
// if TestCharacters ( 09_Olaf ) then
13750: LD_STRING 09_Olaf
13752: PPUSH
13753: CALL_OW 28
13757: IFFALSE 13846
// begin Say ( Heike , DH-Fac-3b ) ;
13759: LD_EXP 22
13763: PPUSH
13764: LD_STRING DH-Fac-3b
13766: PPUSH
13767: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
13771: LD_INT 6
13773: PPUSH
13774: LD_INT 2
13776: PPUSH
13777: LD_INT 2
13779: PPUSH
13780: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13784: LD_INT 15
13786: PPUSH
13787: LD_INT 2
13789: PPUSH
13790: LD_INT 2
13792: PPUSH
13793: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13797: LD_EXP 22
13801: PPUSH
13802: LD_INT 3
13804: PPUSH
13805: CALL_OW 259
13809: PUSH
13810: LD_INT 10
13812: LESS
13813: IFFALSE 13844
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13815: LD_EXP 22
13819: PPUSH
13820: LD_INT 3
13822: PPUSH
13823: LD_EXP 22
13827: PPUSH
13828: LD_INT 3
13830: PPUSH
13831: CALL_OW 259
13835: PUSH
13836: LD_INT 1
13838: PLUS
13839: PPUSH
13840: CALL_OW 237
// end else
13844: GO 13903
// if GetSkill ( Heike , skill_mechanical ) > 5 then
13846: LD_EXP 22
13850: PPUSH
13851: LD_INT 3
13853: PPUSH
13854: CALL_OW 259
13858: PUSH
13859: LD_INT 5
13861: GREATER
13862: IFFALSE 13891
// begin Say ( Heike , DH-Fac-3c ) ;
13864: LD_EXP 22
13868: PPUSH
13869: LD_STRING DH-Fac-3c
13871: PPUSH
13872: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
13876: LD_INT 6
13878: PPUSH
13879: LD_INT 2
13881: PPUSH
13882: LD_INT 2
13884: PPUSH
13885: CALL_OW 322
// end else
13889: GO 13903
// Say ( Heike , DH-Fac-3d ) ;
13891: LD_EXP 22
13895: PPUSH
13896: LD_STRING DH-Fac-3d
13898: PPUSH
13899: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
13903: LD_STRING ARemote
13905: PPUSH
13906: CALL_OW 337
// DialogueOff ;
13910: CALL_OW 7
// end ;
13914: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13915: LD_EXP 19
13919: PUSH
13920: LD_INT 89
13922: PPUSH
13923: CALL_OW 306
13927: PUSH
13928: LD_INT 89
13930: PPUSH
13931: CALL_OW 313
13935: OR
13936: AND
13937: PUSH
13938: LD_EXP 22
13942: PPUSH
13943: CALL_OW 302
13947: AND
13948: PUSH
13949: LD_EXP 23
13953: PPUSH
13954: CALL_OW 302
13958: AND
13959: IFFALSE 14187
13961: GO 13963
13963: DISABLE
// begin DialogueOn ;
13964: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
13968: LD_EXP 22
13972: PPUSH
13973: LD_STRING DH-Lab-1
13975: PPUSH
13976: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
13980: LD_EXP 23
13984: PPUSH
13985: LD_STRING DOm-Lab-2
13987: PPUSH
13988: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
13992: LD_STRING 09_Aviradze
13994: PPUSH
13995: CALL_OW 28
13999: IFFALSE 14054
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 2
14006: PPUSH
14007: LD_INT 2
14009: PPUSH
14010: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14014: LD_INT 2
14016: PPUSH
14017: LD_INT 2
14019: PPUSH
14020: LD_INT 2
14022: PPUSH
14023: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14027: LD_INT 11
14029: PPUSH
14030: LD_INT 2
14032: PPUSH
14033: LD_INT 2
14035: PPUSH
14036: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14040: LD_EXP 22
14044: PPUSH
14045: LD_STRING DH-Lab-4a
14047: PPUSH
14048: CALL_OW 88
// end else
14052: GO 14066
// Say ( Heike , DH-Lab-4b ) ;
14054: LD_EXP 22
14058: PPUSH
14059: LD_STRING DH-Lab-4b
14061: PPUSH
14062: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14066: LD_STRING 05_DrugsTested
14068: PPUSH
14069: LD_EXP 1
14073: PPUSH
14074: CALL_OW 30
14078: IFFALSE 14105
// begin Say ( Heike , DH-Lab-5a ) ;
14080: LD_EXP 22
14084: PPUSH
14085: LD_STRING DH-Lab-5a
14087: PPUSH
14088: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14092: LD_INT 5
14094: PPUSH
14095: LD_INT 2
14097: PPUSH
14098: LD_INT 1
14100: PPUSH
14101: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14105: LD_STRING 09_ApeBrain
14107: PPUSH
14108: LD_EXP 1
14112: PPUSH
14113: CALL_OW 30
14117: IFFALSE 14156
// begin Say ( Heike , DH-Lab-6a ) ;
14119: LD_EXP 22
14123: PPUSH
14124: LD_STRING DH-Lab-6a
14126: PPUSH
14127: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14131: LD_EXP 23
14135: PPUSH
14136: LD_STRING DOm-Lab-7a
14138: PPUSH
14139: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14143: LD_INT 4
14145: PPUSH
14146: LD_INT 2
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14156: LD_STRING 09_ApeNeural
14158: PPUSH
14159: LD_EXP 1
14163: PPUSH
14164: CALL_OW 30
14168: IFFALSE 14183
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14170: LD_INT 3
14172: PPUSH
14173: LD_INT 2
14175: PPUSH
14176: LD_INT 1
14178: PPUSH
14179: CALL_OW 322
// end ; DialogueOff ;
14183: CALL_OW 7
// end ;
14187: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14188: LD_EXP 19
14192: PUSH
14193: LD_INT 22
14195: PUSH
14196: LD_INT 2
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 25
14205: PUSH
14206: LD_INT 12
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 69
14221: AND
14222: IFFALSE 14257
14224: GO 14226
14226: DISABLE
// begin if IsOk ( Heike ) then
14227: LD_EXP 22
14231: PPUSH
14232: CALL_OW 302
14236: IFFALSE 14250
// Say ( Heike , DH-Ape-1 ) ;
14238: LD_EXP 22
14242: PPUSH
14243: LD_STRING DH-Ape-1
14245: PPUSH
14246: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14250: LD_STRING AApes
14252: PPUSH
14253: CALL_OW 337
// end ;
14257: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14258: LD_EXP 19
14262: PUSH
14263: LD_INT 22
14265: PUSH
14266: LD_INT 2
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 25
14275: PUSH
14276: LD_INT 15
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: PUSH
14292: LD_INT 5
14294: GREATEREQUAL
14295: AND
14296: IFFALSE 14398
14298: GO 14300
14300: DISABLE
// begin hasApes := true ;
14301: LD_ADDR_EXP 16
14305: PUSH
14306: LD_INT 1
14308: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14309: LD_STRING AApesOut
14311: PPUSH
14312: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14316: LD_EXP 22
14320: PPUSH
14321: CALL_OW 302
14325: NOT
14326: PUSH
14327: LD_EXP 23
14331: PPUSH
14332: CALL_OW 302
14336: NOT
14337: OR
14338: IFFALSE 14342
// exit ;
14340: GO 14398
// DialogueOn ;
14342: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14346: LD_EXP 22
14350: PPUSH
14351: LD_STRING DH-ApeArmy-1
14353: PPUSH
14354: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14358: LD_EXP 23
14362: PPUSH
14363: LD_STRING DOm-ApeArmy-2
14365: PPUSH
14366: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14370: LD_EXP 22
14374: PPUSH
14375: LD_STRING DH-ApeArmy-3
14377: PPUSH
14378: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14382: LD_EXP 23
14386: PPUSH
14387: LD_STRING DOm-ApeArmy-4
14389: PPUSH
14390: CALL_OW 88
// DialogueOff ;
14394: CALL_OW 7
// end ;
14398: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14399: LD_EXP 19
14403: PUSH
14404: LD_INT 5
14406: PPUSH
14407: LD_INT 2
14409: PPUSH
14410: CALL_OW 321
14414: PUSH
14415: LD_INT 2
14417: EQUAL
14418: AND
14419: IFFALSE 14455
14421: GO 14423
14423: DISABLE
// begin hasDrugs := true ;
14424: LD_ADDR_EXP 17
14428: PUSH
14429: LD_INT 1
14431: ST_TO_ADDR
// if IsOk ( Heike ) then
14432: LD_EXP 22
14436: PPUSH
14437: CALL_OW 302
14441: IFFALSE 14455
// Say ( Heike , DH-Stim-1 ) ;
14443: LD_EXP 22
14447: PPUSH
14448: LD_STRING DH-Stim-1
14450: PPUSH
14451: CALL_OW 88
// end ;
14455: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14456: LD_EXP 19
14460: PUSH
14461: LD_INT 22
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 25
14473: PUSH
14474: LD_INT 17
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PPUSH
14485: CALL_OW 69
14489: AND
14490: IFFALSE 14507
14492: GO 14494
14494: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14495: LD_EXP 22
14499: PPUSH
14500: LD_STRING DH-Kamikadze-1
14502: PPUSH
14503: CALL_OW 88
14507: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14508: LD_EXP 19
14512: PUSH
14513: LD_INT 22
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 31
14525: PUSH
14526: LD_INT 31
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: CALL_OW 69
14541: AND
14542: PUSH
14543: LD_EXP 23
14547: PPUSH
14548: CALL_OW 302
14552: AND
14553: PUSH
14554: LD_EXP 22
14558: PPUSH
14559: CALL_OW 302
14563: AND
14564: IFFALSE 14649
14566: GO 14568
14568: DISABLE
// begin InGameOn ;
14569: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14573: LD_EXP 23
14577: PPUSH
14578: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14582: LD_EXP 22
14586: PPUSH
14587: LD_STRING DH-Mastodont-1
14589: PPUSH
14590: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
14594: LD_EXP 23
14598: PPUSH
14599: LD_STRING DOm-Mastodont-2
14601: PPUSH
14602: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
14606: LD_EXP 22
14610: PPUSH
14611: LD_STRING DH-Mastodont-3
14613: PPUSH
14614: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
14618: LD_EXP 23
14622: PPUSH
14623: LD_STRING DOm-Mastodont-4
14625: PPUSH
14626: CALL_OW 88
// hasMastodont := true ;
14630: LD_ADDR_EXP 13
14634: PUSH
14635: LD_INT 1
14637: ST_TO_ADDR
// InGameOff ;
14638: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
14642: LD_STRING ACH_MASTODONTTAME
14644: PPUSH
14645: CALL_OW 543
// end ;
14649: END
// every 0 0$1 trigger gameActive and tigerCounter do
14650: LD_EXP 19
14654: PUSH
14655: LD_EXP 21
14659: AND
14660: IFFALSE 14672
14662: GO 14664
14664: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
14665: LD_STRING ACH_TIGERTAME
14667: PPUSH
14668: CALL_OW 543
14672: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
14673: LD_EXP 19
14677: PUSH
14678: LD_EXP 21
14682: PUSH
14683: LD_INT 1
14685: GREATER
14686: AND
14687: IFFALSE 14791
14689: GO 14691
14691: DISABLE
// begin hasTigers := true ;
14692: LD_ADDR_EXP 15
14696: PUSH
14697: LD_INT 1
14699: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
14700: LD_EXP 23
14704: PPUSH
14705: CALL_OW 302
14709: NOT
14710: PUSH
14711: LD_EXP 22
14715: PPUSH
14716: CALL_OW 302
14720: NOT
14721: OR
14722: IFFALSE 14726
// exit ;
14724: GO 14791
// CenterNowOnUnits ( Omar ) ;
14726: LD_EXP 23
14730: PPUSH
14731: CALL_OW 87
// DialogueOn ;
14735: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
14739: LD_EXP 23
14743: PPUSH
14744: LD_STRING DOm-Tiger-1
14746: PPUSH
14747: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
14751: LD_EXP 22
14755: PPUSH
14756: LD_STRING DH-Tiger-2
14758: PPUSH
14759: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
14763: LD_EXP 23
14767: PPUSH
14768: LD_STRING DOm-Tiger-3
14770: PPUSH
14771: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
14775: LD_EXP 22
14779: PPUSH
14780: LD_STRING DH-Tiger-4
14782: PPUSH
14783: CALL_OW 88
// DialogueOff ;
14787: CALL_OW 7
// end ;
14791: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
14792: LD_EXP 19
14796: PUSH
14797: LD_INT 22
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 50
14809: PUSH
14810: EMPTY
14811: LIST
14812: PUSH
14813: LD_INT 33
14815: PUSH
14816: LD_INT 2
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 69
14832: PUSH
14833: LD_INT 3
14835: GREATEREQUAL
14836: AND
14837: IFFALSE 14880
14839: GO 14841
14841: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
14842: LD_STRING ARemoteOut
14844: PPUSH
14845: CALL_OW 337
// hasVehicles := true ;
14849: LD_ADDR_EXP 14
14853: PUSH
14854: LD_INT 1
14856: ST_TO_ADDR
// if IsOk ( Heike ) then
14857: LD_EXP 22
14861: PPUSH
14862: CALL_OW 302
14866: IFFALSE 14880
// Say ( Heike , DH-Mechanic-1 ) ;
14868: LD_EXP 22
14872: PPUSH
14873: LD_STRING DH-Mechanic-1
14875: PPUSH
14876: CALL_OW 88
// end ;
14880: END
// every 0 0$1 trigger gameActive and FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) do
14881: LD_EXP 19
14885: PUSH
14886: LD_INT 29
14888: PPUSH
14889: LD_INT 22
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 70
14903: AND
14904: IFFALSE 14917
14906: GO 14908
14908: DISABLE
// spotAmericanBase := true ;
14909: LD_ADDR_EXP 6
14913: PUSH
14914: LD_INT 1
14916: ST_TO_ADDR
14917: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
14918: LD_EXP 19
14922: PUSH
14923: LD_EXP 6
14927: AND
14928: PUSH
14929: LD_EXP 23
14933: PPUSH
14934: CALL_OW 302
14938: AND
14939: PUSH
14940: LD_EXP 22
14944: PPUSH
14945: CALL_OW 302
14949: AND
14950: IFFALSE 15190
14952: GO 14954
14954: DISABLE
// begin DialogueOn ;
14955: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
14959: LD_INT 92
14961: PPUSH
14962: LD_INT 129
14964: PPUSH
14965: LD_INT 2
14967: PPUSH
14968: LD_INT 22
14970: NEG
14971: PPUSH
14972: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
14976: LD_INT 92
14978: PPUSH
14979: LD_INT 129
14981: PPUSH
14982: LD_INT 2
14984: PPUSH
14985: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
14989: LD_INT 92
14991: PPUSH
14992: LD_INT 129
14994: PPUSH
14995: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
14999: LD_INT 10
15001: PPUSH
15002: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15006: LD_EXP 23
15010: PPUSH
15011: LD_STRING DO-AmBase-1
15013: PPUSH
15014: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15018: LD_EXP 22
15022: PPUSH
15023: LD_STRING DH-AmBase-2
15025: PPUSH
15026: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15030: LD_EXP 23
15034: PPUSH
15035: LD_STRING DO-AmBase-3
15037: PPUSH
15038: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15042: LD_EXP 22
15046: PPUSH
15047: LD_STRING DH-AmBase-4
15049: PPUSH
15050: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15054: LD_EXP 23
15058: PPUSH
15059: LD_STRING DO-AmBase-5
15061: PPUSH
15062: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15066: LD_EXP 22
15070: PPUSH
15071: LD_STRING DH-AmBase-6
15073: PPUSH
15074: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15078: LD_EXP 23
15082: PPUSH
15083: LD_STRING DO-AmBase-7
15085: PPUSH
15086: CALL_OW 88
// if not spotArabianBase then
15090: LD_EXP 7
15094: NOT
15095: IFFALSE 15111
// begin Say ( Omar , DO-AmBase-8a ) ;
15097: LD_EXP 23
15101: PPUSH
15102: LD_STRING DO-AmBase-8a
15104: PPUSH
15105: CALL_OW 88
// end else
15109: GO 15123
// begin Say ( Omar , DO-AmBase-8b ) ;
15111: LD_EXP 23
15115: PPUSH
15116: LD_STRING DO-AmBase-8b
15118: PPUSH
15119: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15123: LD_EXP 22
15127: PPUSH
15128: CALL_OW 310
15132: IFFALSE 15150
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15134: LD_EXP 22
15138: PPUSH
15139: CALL_OW 310
15143: PPUSH
15144: CALL_OW 87
15148: GO 15159
// CenterNowOnUnits ( Heike ) ;
15150: LD_EXP 22
15154: PPUSH
15155: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15159: LD_EXP 22
15163: PPUSH
15164: LD_STRING DH-AmBase-9
15166: PPUSH
15167: CALL_OW 88
// DialogueOff ;
15171: CALL_OW 7
// spotByAmerican := true ;
15175: LD_ADDR_EXP 8
15179: PUSH
15180: LD_INT 1
15182: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15183: LD_STRING O2
15185: PPUSH
15186: CALL_OW 337
// end ;
15190: END
// function TalkAboutLegion ; begin
15191: LD_INT 0
15193: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15194: LD_EXP 22
15198: PPUSH
15199: LD_STRING DH-Legion-1
15201: PPUSH
15202: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15206: LD_EXP 23
15210: PPUSH
15211: LD_STRING DOm-Legion-2
15213: PPUSH
15214: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15218: LD_EXP 22
15222: PPUSH
15223: LD_STRING DH-Legion-3
15225: PPUSH
15226: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15230: LD_EXP 23
15234: PPUSH
15235: LD_STRING DOm-Legion-4
15237: PPUSH
15238: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15242: LD_EXP 22
15246: PPUSH
15247: LD_STRING DH-Legion-5
15249: PPUSH
15250: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15254: LD_EXP 23
15258: PPUSH
15259: LD_STRING DOm-Legion-6
15261: PPUSH
15262: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15266: LD_EXP 22
15270: PPUSH
15271: LD_STRING DH-Legion-7
15273: PPUSH
15274: CALL_OW 88
// end ;
15278: LD_VAR 0 1
15282: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15283: LD_EXP 19
15287: PUSH
15288: LD_EXP 22
15292: PUSH
15293: LD_EXP 23
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PPUSH
15302: LD_INT 22
15304: PPUSH
15305: CALL 11384 0 2
15309: AND
15310: PUSH
15311: LD_EXP 9
15315: NOT
15316: AND
15317: PUSH
15318: LD_EXP 10
15322: NOT
15323: AND
15324: IFFALSE 15809
15326: GO 15328
15328: DISABLE
15329: LD_INT 0
15331: PPUSH
15332: PPUSH
15333: PPUSH
// begin uc_side := 8 ;
15334: LD_ADDR_OWVAR 20
15338: PUSH
15339: LD_INT 8
15341: ST_TO_ADDR
// uc_nation := nation_american ;
15342: LD_ADDR_OWVAR 21
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15350: LD_INT 3
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: LD_INT 1
15358: PPUSH
15359: LD_INT 9
15361: PPUSH
15362: LD_INT 90
15364: PPUSH
15365: CALL 25048 0 5
// veh := CreateVehicle ;
15369: LD_ADDR_VAR 0 3
15373: PUSH
15374: CALL_OW 45
15378: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15379: LD_ADDR_EXP 42
15383: PUSH
15384: LD_EXP 42
15388: PPUSH
15389: LD_VAR 0 3
15393: PPUSH
15394: CALL 57910 0 2
15398: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 2
15406: PPUSH
15407: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15411: LD_VAR 0 3
15415: PPUSH
15416: LD_INT 126
15418: PPUSH
15419: LD_INT 18
15421: PPUSH
15422: LD_INT 0
15424: PPUSH
15425: CALL_OW 48
// uc_nation := nation_arabian ;
15429: LD_ADDR_OWVAR 21
15433: PUSH
15434: LD_INT 2
15436: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15437: LD_INT 0
15439: PPUSH
15440: LD_INT 6
15442: PUSH
15443: LD_INT 7
15445: PUSH
15446: LD_INT 8
15448: PUSH
15449: LD_INT 9
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: PUSH
15458: LD_OWVAR 67
15462: ARRAY
15463: PPUSH
15464: CALL_OW 383
// un := CreateHuman ;
15468: LD_ADDR_VAR 0 2
15472: PUSH
15473: CALL_OW 44
15477: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15478: LD_ADDR_EXP 37
15482: PUSH
15483: LD_EXP 37
15487: PPUSH
15488: LD_VAR 0 2
15492: PPUSH
15493: CALL 57910 0 2
15497: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15498: LD_VAR 0 2
15502: PPUSH
15503: LD_VAR 0 3
15507: PPUSH
15508: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15512: LD_INT 0
15514: PPUSH
15515: LD_INT 6
15517: PUSH
15518: LD_INT 7
15520: PUSH
15521: LD_INT 8
15523: PUSH
15524: LD_INT 9
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: PUSH
15533: LD_OWVAR 67
15537: ARRAY
15538: PPUSH
15539: CALL_OW 381
// for i := 1 to 3 do
15543: LD_ADDR_VAR 0 1
15547: PUSH
15548: DOUBLE
15549: LD_INT 1
15551: DEC
15552: ST_TO_ADDR
15553: LD_INT 3
15555: PUSH
15556: FOR_TO
15557: IFFALSE 15624
// begin un := CreateHuman ;
15559: LD_ADDR_VAR 0 2
15563: PUSH
15564: CALL_OW 44
15568: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15569: LD_ADDR_EXP 37
15573: PUSH
15574: LD_EXP 37
15578: PPUSH
15579: LD_VAR 0 2
15583: PPUSH
15584: CALL 57910 0 2
15588: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15589: LD_VAR 0 2
15593: PPUSH
15594: LD_INT 2
15596: PPUSH
15597: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
15601: LD_VAR 0 2
15605: PPUSH
15606: LD_INT 126
15608: PPUSH
15609: LD_INT 18
15611: PPUSH
15612: LD_INT 4
15614: PPUSH
15615: LD_INT 0
15617: PPUSH
15618: CALL_OW 50
// end ;
15622: GO 15556
15624: POP
15625: POP
// wait ( 0 0$01 ) ;
15626: LD_INT 35
15628: PPUSH
15629: CALL_OW 67
// DialogueOn ;
15633: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
15637: LD_INT 126
15639: PPUSH
15640: LD_INT 18
15642: PPUSH
15643: LD_INT 2
15645: PPUSH
15646: LD_INT 16
15648: NEG
15649: PPUSH
15650: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
15654: LD_INT 126
15656: PPUSH
15657: LD_INT 18
15659: PPUSH
15660: CALL_OW 86
// TalkAboutLegion ;
15664: CALL 15191 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
15668: LD_INT 126
15670: PPUSH
15671: LD_INT 18
15673: PPUSH
15674: LD_INT 2
15676: PPUSH
15677: CALL_OW 331
// DialogueOff ;
15681: CALL_OW 7
// spotLegion := true ;
15685: LD_ADDR_EXP 10
15689: PUSH
15690: LD_INT 1
15692: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
15693: LD_EXP 37
15697: PPUSH
15698: LD_INT 164
15700: PPUSH
15701: LD_INT 47
15703: PPUSH
15704: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
15708: LD_EXP 37
15712: PPUSH
15713: LD_INT 179
15715: PPUSH
15716: LD_INT 20
15718: PPUSH
15719: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
15723: LD_INT 35
15725: PPUSH
15726: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
15730: LD_EXP 37
15734: PPUSH
15735: LD_INT 60
15737: PUSH
15738: EMPTY
15739: LIST
15740: PPUSH
15741: CALL_OW 72
15745: NOT
15746: PUSH
15747: LD_EXP 37
15751: PPUSH
15752: LD_INT 50
15754: PUSH
15755: EMPTY
15756: LIST
15757: PPUSH
15758: CALL_OW 72
15762: NOT
15763: OR
15764: IFFALSE 15723
// if not UnitFilter ( legEForces , [ f_ok ] ) then
15766: LD_EXP 37
15770: PPUSH
15771: LD_INT 50
15773: PUSH
15774: EMPTY
15775: LIST
15776: PPUSH
15777: CALL_OW 72
15781: NOT
15782: IFFALSE 15786
// exit ;
15784: GO 15809
// legForces := legForces union legEForces ;
15786: LD_ADDR_EXP 36
15790: PUSH
15791: LD_EXP 36
15795: PUSH
15796: LD_EXP 37
15800: UNION
15801: ST_TO_ADDR
// legEForces := [ ] ;
15802: LD_ADDR_EXP 37
15806: PUSH
15807: EMPTY
15808: ST_TO_ADDR
// end ;
15809: PPOPN 3
15811: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15812: LD_EXP 19
15816: PUSH
15817: LD_EXP 22
15821: PUSH
15822: LD_EXP 23
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PPUSH
15831: LD_INT 23
15833: PPUSH
15834: CALL 11384 0 2
15838: AND
15839: PUSH
15840: LD_EXP 9
15844: NOT
15845: AND
15846: PUSH
15847: LD_EXP 10
15851: NOT
15852: AND
15853: IFFALSE 16338
15855: GO 15857
15857: DISABLE
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
15862: PPUSH
// begin uc_side := 8 ;
15863: LD_ADDR_OWVAR 20
15867: PUSH
15868: LD_INT 8
15870: ST_TO_ADDR
// uc_nation := nation_american ;
15871: LD_ADDR_OWVAR 21
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15879: LD_INT 3
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: LD_INT 1
15887: PPUSH
15888: LD_INT 9
15890: PPUSH
15891: LD_INT 90
15893: PPUSH
15894: CALL 25048 0 5
// veh := CreateVehicle ;
15898: LD_ADDR_VAR 0 3
15902: PUSH
15903: CALL_OW 45
15907: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15908: LD_ADDR_EXP 42
15912: PUSH
15913: LD_EXP 42
15917: PPUSH
15918: LD_VAR 0 3
15922: PPUSH
15923: CALL 57910 0 2
15927: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
15928: LD_VAR 0 3
15932: PPUSH
15933: LD_INT 3
15935: PPUSH
15936: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
15940: LD_VAR 0 3
15944: PPUSH
15945: LD_INT 224
15947: PPUSH
15948: LD_INT 57
15950: PPUSH
15951: LD_INT 0
15953: PPUSH
15954: CALL_OW 48
// uc_nation := nation_arabian ;
15958: LD_ADDR_OWVAR 21
15962: PUSH
15963: LD_INT 2
15965: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15966: LD_INT 0
15968: PPUSH
15969: LD_INT 6
15971: PUSH
15972: LD_INT 7
15974: PUSH
15975: LD_INT 8
15977: PUSH
15978: LD_INT 9
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: PUSH
15987: LD_OWVAR 67
15991: ARRAY
15992: PPUSH
15993: CALL_OW 383
// un := CreateHuman ;
15997: LD_ADDR_VAR 0 2
16001: PUSH
16002: CALL_OW 44
16006: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16007: LD_ADDR_EXP 37
16011: PUSH
16012: LD_EXP 37
16016: PPUSH
16017: LD_VAR 0 2
16021: PPUSH
16022: CALL 57910 0 2
16026: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16027: LD_VAR 0 2
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16041: LD_INT 0
16043: PPUSH
16044: LD_INT 6
16046: PUSH
16047: LD_INT 7
16049: PUSH
16050: LD_INT 8
16052: PUSH
16053: LD_INT 9
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: PUSH
16062: LD_OWVAR 67
16066: ARRAY
16067: PPUSH
16068: CALL_OW 381
// for i := 1 to 3 do
16072: LD_ADDR_VAR 0 1
16076: PUSH
16077: DOUBLE
16078: LD_INT 1
16080: DEC
16081: ST_TO_ADDR
16082: LD_INT 3
16084: PUSH
16085: FOR_TO
16086: IFFALSE 16153
// begin un := CreateHuman ;
16088: LD_ADDR_VAR 0 2
16092: PUSH
16093: CALL_OW 44
16097: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16098: LD_ADDR_EXP 37
16102: PUSH
16103: LD_EXP 37
16107: PPUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL 57910 0 2
16117: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16118: LD_VAR 0 2
16122: PPUSH
16123: LD_INT 3
16125: PPUSH
16126: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16130: LD_VAR 0 2
16134: PPUSH
16135: LD_INT 224
16137: PPUSH
16138: LD_INT 57
16140: PPUSH
16141: LD_INT 4
16143: PPUSH
16144: LD_INT 0
16146: PPUSH
16147: CALL_OW 50
// end ;
16151: GO 16085
16153: POP
16154: POP
// wait ( 0 0$01 ) ;
16155: LD_INT 35
16157: PPUSH
16158: CALL_OW 67
// DialogueOn ;
16162: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16166: LD_INT 224
16168: PPUSH
16169: LD_INT 57
16171: PPUSH
16172: LD_INT 2
16174: PPUSH
16175: LD_INT 16
16177: NEG
16178: PPUSH
16179: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16183: LD_INT 224
16185: PPUSH
16186: LD_INT 57
16188: PPUSH
16189: CALL_OW 86
// TalkAboutLegion ;
16193: CALL 15191 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16197: LD_INT 224
16199: PPUSH
16200: LD_INT 57
16202: PPUSH
16203: LD_INT 2
16205: PPUSH
16206: CALL_OW 331
// DialogueOff ;
16210: CALL_OW 7
// spotLegion := true ;
16214: LD_ADDR_EXP 10
16218: PUSH
16219: LD_INT 1
16221: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16222: LD_EXP 37
16226: PPUSH
16227: LD_INT 164
16229: PPUSH
16230: LD_INT 47
16232: PPUSH
16233: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16237: LD_EXP 37
16241: PPUSH
16242: LD_INT 179
16244: PPUSH
16245: LD_INT 20
16247: PPUSH
16248: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16252: LD_INT 35
16254: PPUSH
16255: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16259: LD_EXP 37
16263: PPUSH
16264: LD_INT 60
16266: PUSH
16267: EMPTY
16268: LIST
16269: PPUSH
16270: CALL_OW 72
16274: NOT
16275: PUSH
16276: LD_EXP 37
16280: PPUSH
16281: LD_INT 50
16283: PUSH
16284: EMPTY
16285: LIST
16286: PPUSH
16287: CALL_OW 72
16291: NOT
16292: OR
16293: IFFALSE 16252
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16295: LD_EXP 37
16299: PPUSH
16300: LD_INT 50
16302: PUSH
16303: EMPTY
16304: LIST
16305: PPUSH
16306: CALL_OW 72
16310: NOT
16311: IFFALSE 16315
// exit ;
16313: GO 16338
// legForces := legForces union legEForces ;
16315: LD_ADDR_EXP 36
16319: PUSH
16320: LD_EXP 36
16324: PUSH
16325: LD_EXP 37
16329: UNION
16330: ST_TO_ADDR
// legEForces := [ ] ;
16331: LD_ADDR_EXP 37
16335: PUSH
16336: EMPTY
16337: ST_TO_ADDR
// end ;
16338: PPOPN 3
16340: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) ) and IsOk ( Heike ) and IsOk ( Omar ) and not spotByLegion do
16341: LD_EXP 19
16345: PUSH
16346: LD_INT 8
16348: PPUSH
16349: LD_EXP 23
16353: PPUSH
16354: CALL_OW 292
16358: PUSH
16359: LD_INT 8
16361: PPUSH
16362: LD_EXP 22
16366: PPUSH
16367: CALL_OW 292
16371: OR
16372: AND
16373: PUSH
16374: LD_EXP 22
16378: PPUSH
16379: CALL_OW 302
16383: AND
16384: PUSH
16385: LD_EXP 23
16389: PPUSH
16390: CALL_OW 302
16394: AND
16395: PUSH
16396: LD_EXP 9
16400: NOT
16401: AND
16402: IFFALSE 16543
16404: GO 16406
16406: DISABLE
// begin DialogueOn ;
16407: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16411: LD_EXP 35
16415: PPUSH
16416: LD_STRING DF-Spot-1
16418: PPUSH
16419: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16423: LD_EXP 22
16427: PPUSH
16428: LD_STRING DH-Spot-2
16430: PPUSH
16431: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16435: LD_EXP 35
16439: PPUSH
16440: LD_STRING DF-Spot-3
16442: PPUSH
16443: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16447: LD_EXP 22
16451: PPUSH
16452: LD_STRING DH-Spot-4
16454: PPUSH
16455: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16459: LD_EXP 23
16463: PPUSH
16464: LD_STRING DOm-Spot-5
16466: PPUSH
16467: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16471: LD_EXP 35
16475: PPUSH
16476: LD_STRING DF-Spot-6
16478: PPUSH
16479: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16483: LD_EXP 35
16487: PPUSH
16488: LD_STRING DF-Spot-7
16490: PPUSH
16491: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16495: LD_EXP 35
16499: PPUSH
16500: LD_STRING DF-Spot-8
16502: PPUSH
16503: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16507: LD_EXP 22
16511: PPUSH
16512: LD_STRING DH-Spot-9
16514: PPUSH
16515: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16519: LD_EXP 35
16523: PPUSH
16524: LD_STRING DF-Spot-10
16526: PPUSH
16527: CALL_OW 94
// DialogueOff ;
16531: CALL_OW 7
// spotByLegion := true ;
16535: LD_ADDR_EXP 9
16539: PUSH
16540: LD_INT 1
16542: ST_TO_ADDR
// end ;
16543: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16544: LD_EXP 19
16548: PUSH
16549: LD_EXP 9
16553: PUSH
16554: LD_EXP 10
16558: OR
16559: AND
16560: IFFALSE 16572
16562: GO 16564
16564: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16565: LD_STRING O3
16567: PPUSH
16568: CALL_OW 337
16572: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16573: LD_EXP 19
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_INT 8
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 21
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 50
16600: PUSH
16601: EMPTY
16602: LIST
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: PPUSH
16609: CALL_OW 69
16613: PUSH
16614: LD_INT 0
16616: EQUAL
16617: AND
16618: IFFALSE 16716
16620: GO 16622
16622: DISABLE
// begin legScriptActive := false ;
16623: LD_ADDR_EXP 4
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// if not americanDestroyed then
16631: LD_EXP 11
16635: NOT
16636: IFFALSE 16645
// SetAchievement ( ACH_REVANGE ) ;
16638: LD_STRING ACH_REVANGE
16640: PPUSH
16641: CALL_OW 543
// legionDestroyed := true ;
16645: LD_ADDR_EXP 12
16649: PUSH
16650: LD_INT 1
16652: ST_TO_ADDR
// DialogueOn ;
16653: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
16657: LD_EXP 35
16661: PPUSH
16662: LD_STRING DF-LegDes-1
16664: PPUSH
16665: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
16669: LD_EXP 22
16673: PPUSH
16674: LD_STRING DH-LegDes-2
16676: PPUSH
16677: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
16681: LD_EXP 35
16685: PPUSH
16686: LD_STRING DF-LegDes-3
16688: PPUSH
16689: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
16693: LD_EXP 22
16697: PPUSH
16698: LD_STRING DH-LegDes-4
16700: PPUSH
16701: CALL_OW 88
// DialogueOff ;
16705: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
16709: LD_STRING O5
16711: PPUSH
16712: CALL_OW 337
// end ;
16716: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
16717: LD_EXP 19
16721: PUSH
16722: LD_EXP 26
16726: PPUSH
16727: LD_INT 21
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 50
16739: PUSH
16740: EMPTY
16741: LIST
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PPUSH
16747: CALL_OW 72
16751: PUSH
16752: LD_INT 6
16754: LESS
16755: AND
16756: IFFALSE 17004
16758: GO 16760
16760: DISABLE
16761: LD_INT 0
16763: PPUSH
16764: PPUSH
// begin amScriptActive := false ;
16765: LD_ADDR_EXP 3
16769: PUSH
16770: LD_INT 0
16772: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16773: LD_ADDR_VAR 0 2
16777: PUSH
16778: LD_EXP 26
16782: PPUSH
16783: LD_INT 21
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 50
16795: PUSH
16796: EMPTY
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PPUSH
16803: CALL_OW 72
16807: ST_TO_ADDR
// for i in tmp do
16808: LD_ADDR_VAR 0 1
16812: PUSH
16813: LD_VAR 0 2
16817: PUSH
16818: FOR_IN
16819: IFFALSE 16847
// begin ComExit ( i ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: CALL 58308 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
16830: LD_VAR 0 1
16834: PPUSH
16835: LD_INT 63
16837: PPUSH
16838: LD_INT 124
16840: PPUSH
16841: CALL_OW 171
// end ;
16845: GO 16818
16847: POP
16848: POP
// wait ( 0 0$2 ) ;
16849: LD_INT 70
16851: PPUSH
16852: CALL_OW 67
// americanDestroyed := true ;
16856: LD_ADDR_EXP 11
16860: PUSH
16861: LD_INT 1
16863: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16864: LD_INT 35
16866: PPUSH
16867: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
16871: LD_ADDR_VAR 0 2
16875: PUSH
16876: LD_EXP 26
16880: PPUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 50
16893: PUSH
16894: EMPTY
16895: LIST
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PPUSH
16901: CALL_OW 72
16905: PUSH
16906: LD_EXP 34
16910: PPUSH
16911: LD_INT 50
16913: PUSH
16914: EMPTY
16915: LIST
16916: PPUSH
16917: CALL_OW 72
16921: UNION
16922: ST_TO_ADDR
// for i in tmp do
16923: LD_ADDR_VAR 0 1
16927: PUSH
16928: LD_VAR 0 2
16932: PUSH
16933: FOR_IN
16934: IFFALSE 16995
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
16936: LD_VAR 0 1
16940: PPUSH
16941: LD_INT 63
16943: PPUSH
16944: LD_INT 124
16946: PPUSH
16947: CALL_OW 307
16951: PUSH
16952: LD_VAR 0 1
16956: PPUSH
16957: LD_INT 25
16959: PPUSH
16960: CALL_OW 308
16964: OR
16965: IFFALSE 16978
// RemoveUnit ( i ) else
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 64
16976: GO 16993
// ComMoveXY ( i , 63 , 124 ) ;
16978: LD_VAR 0 1
16982: PPUSH
16983: LD_INT 63
16985: PPUSH
16986: LD_INT 124
16988: PPUSH
16989: CALL_OW 111
// end ;
16993: GO 16933
16995: POP
16996: POP
// until not tmp ;
16997: LD_VAR 0 2
17001: NOT
17002: IFFALSE 16864
// end ;
17004: PPOPN 2
17006: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17007: LD_EXP 19
17011: PUSH
17012: LD_EXP 11
17016: AND
17017: PUSH
17018: LD_EXP 22
17022: PPUSH
17023: CALL_OW 302
17027: AND
17028: PUSH
17029: LD_EXP 23
17033: PPUSH
17034: CALL_OW 302
17038: AND
17039: IFFALSE 17529
17041: GO 17043
17043: DISABLE
17044: LD_INT 0
17046: PPUSH
17047: PPUSH
17048: PPUSH
// begin DialogueOn ;
17049: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17053: LD_EXP 22
17057: PPUSH
17058: LD_STRING DH-Victory-1
17060: PPUSH
17061: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17065: LD_EXP 23
17069: PPUSH
17070: LD_STRING DOm-Victory-2
17072: PPUSH
17073: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17077: LD_EXP 23
17081: PPUSH
17082: LD_STRING DOm-Victory-3
17084: PPUSH
17085: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17089: LD_EXP 22
17093: PPUSH
17094: LD_STRING DH-Victory-4
17096: PPUSH
17097: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17101: LD_EXP 23
17105: PPUSH
17106: LD_STRING DOm-Victory-5
17108: PPUSH
17109: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17113: LD_EXP 23
17117: PPUSH
17118: LD_STRING DOm-Victory-6
17120: PPUSH
17121: CALL_OW 88
// DialogueOff ;
17125: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17129: LD_STRING O4
17131: PPUSH
17132: CALL_OW 337
// canFinish := true ;
17136: LD_ADDR_EXP 18
17140: PUSH
17141: LD_INT 1
17143: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17144: LD_INT 24
17146: PPUSH
17147: LD_INT 1
17149: PPUSH
17150: CALL_OW 424
// if not legionDestroyed then
17154: LD_EXP 12
17158: NOT
17159: IFFALSE 17529
// begin uc_nation := nation_arabian ;
17161: LD_ADDR_OWVAR 21
17165: PUSH
17166: LD_INT 2
17168: ST_TO_ADDR
// uc_side := 8 ;
17169: LD_ADDR_OWVAR 20
17173: PUSH
17174: LD_INT 8
17176: ST_TO_ADDR
// for i := 1 to 4 do
17177: LD_ADDR_VAR 0 1
17181: PUSH
17182: DOUBLE
17183: LD_INT 1
17185: DEC
17186: ST_TO_ADDR
17187: LD_INT 4
17189: PUSH
17190: FOR_TO
17191: IFFALSE 17272
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17193: LD_INT 0
17195: PPUSH
17196: LD_INT 8
17198: PUSH
17199: LD_INT 9
17201: PUSH
17202: LD_INT 10
17204: PUSH
17205: LD_INT 10
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: LD_OWVAR 67
17218: ARRAY
17219: PPUSH
17220: CALL_OW 381
// un := CreateHuman ;
17224: LD_ADDR_VAR 0 2
17228: PUSH
17229: CALL_OW 44
17233: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17234: LD_VAR 0 2
17238: PPUSH
17239: LD_INT 3
17241: PPUSH
17242: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17246: LD_VAR 0 2
17250: PPUSH
17251: LD_INT 26
17253: PPUSH
17254: LD_INT 0
17256: PPUSH
17257: CALL_OW 49
// ComCrawl ( un ) ;
17261: LD_VAR 0 2
17265: PPUSH
17266: CALL_OW 137
// end ;
17270: GO 17190
17272: POP
17273: POP
// for i := 1 to 3 do
17274: LD_ADDR_VAR 0 1
17278: PUSH
17279: DOUBLE
17280: LD_INT 1
17282: DEC
17283: ST_TO_ADDR
17284: LD_INT 3
17286: PUSH
17287: FOR_TO
17288: IFFALSE 17372
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17290: LD_INT 0
17292: PPUSH
17293: LD_INT 8
17295: PUSH
17296: LD_INT 9
17298: PUSH
17299: LD_INT 10
17301: PUSH
17302: LD_INT 10
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: LD_OWVAR 67
17315: ARRAY
17316: PPUSH
17317: CALL_OW 381
// un := CreateHuman ;
17321: LD_ADDR_VAR 0 2
17325: PUSH
17326: CALL_OW 44
17330: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17331: LD_VAR 0 2
17335: PPUSH
17336: LD_INT 8
17338: PPUSH
17339: CALL_OW 336
// SetDir ( un , 3 ) ;
17343: LD_VAR 0 2
17347: PPUSH
17348: LD_INT 3
17350: PPUSH
17351: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17355: LD_VAR 0 2
17359: PPUSH
17360: LD_INT 26
17362: PPUSH
17363: LD_INT 0
17365: PPUSH
17366: CALL_OW 49
// end ;
17370: GO 17287
17372: POP
17373: POP
// for i := 1 to 2 do
17374: LD_ADDR_VAR 0 1
17378: PUSH
17379: DOUBLE
17380: LD_INT 1
17382: DEC
17383: ST_TO_ADDR
17384: LD_INT 2
17386: PUSH
17387: FOR_TO
17388: IFFALSE 17527
// begin uc_side := 8 ;
17390: LD_ADDR_OWVAR 20
17394: PUSH
17395: LD_INT 8
17397: ST_TO_ADDR
// uc_nation := nation_american ;
17398: LD_ADDR_OWVAR 21
17402: PUSH
17403: LD_INT 1
17405: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17406: LD_INT 4
17408: PPUSH
17409: LD_INT 1
17411: PPUSH
17412: LD_INT 1
17414: PPUSH
17415: LD_INT 9
17417: PPUSH
17418: LD_INT 90
17420: PPUSH
17421: CALL 25048 0 5
// veh := CreateVehicle ;
17425: LD_ADDR_VAR 0 3
17429: PUSH
17430: CALL_OW 45
17434: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17435: LD_VAR 0 3
17439: PPUSH
17440: LD_INT 3
17442: PPUSH
17443: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17447: LD_VAR 0 3
17451: PPUSH
17452: LD_INT 27
17454: PPUSH
17455: LD_INT 0
17457: PPUSH
17458: CALL_OW 49
// uc_nation := nation_arabian ;
17462: LD_ADDR_OWVAR 21
17466: PUSH
17467: LD_INT 2
17469: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17470: LD_INT 0
17472: PPUSH
17473: LD_INT 8
17475: PUSH
17476: LD_INT 9
17478: PUSH
17479: LD_INT 10
17481: PUSH
17482: LD_INT 10
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PUSH
17491: LD_OWVAR 67
17495: ARRAY
17496: PPUSH
17497: CALL_OW 383
// un := CreateHuman ;
17501: LD_ADDR_VAR 0 2
17505: PUSH
17506: CALL_OW 44
17510: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17511: LD_VAR 0 2
17515: PPUSH
17516: LD_VAR 0 3
17520: PPUSH
17521: CALL_OW 52
// end ;
17525: GO 17387
17527: POP
17528: POP
// end ; end ;
17529: PPOPN 3
17531: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17532: LD_EXP 19
17536: PUSH
17537: LD_EXP 18
17541: AND
17542: PUSH
17543: LD_EXP 23
17547: PUSH
17548: EMPTY
17549: LIST
17550: PPUSH
17551: LD_INT 24
17553: PPUSH
17554: CALL 11384 0 2
17558: AND
17559: PUSH
17560: LD_EXP 22
17564: PUSH
17565: EMPTY
17566: LIST
17567: PPUSH
17568: LD_INT 24
17570: PPUSH
17571: CALL 11384 0 2
17575: AND
17576: IFFALSE 17755
17578: GO 17580
17580: DISABLE
// begin if tick <= 50 50$00 then
17581: LD_OWVAR 1
17585: PUSH
17586: LD_INT 105000
17588: LESSEQUAL
17589: IFFALSE 17598
// SetAchievement ( ACH_HSPEED_10 ) ;
17591: LD_STRING ACH_HSPEED_10
17593: PPUSH
17594: CALL_OW 543
// if legionDestroyed then
17598: LD_EXP 12
17602: IFFALSE 17616
// AddMedal ( med1 , 1 ) else
17604: LD_STRING med1
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL_OW 101
17614: GO 17627
// AddMedal ( med1 , - 1 ) ;
17616: LD_STRING med1
17618: PPUSH
17619: LD_INT 1
17621: NEG
17622: PPUSH
17623: CALL_OW 101
// if tick <= [ 70 70$00 , 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
17627: LD_OWVAR 1
17631: PUSH
17632: LD_INT 147000
17634: PUSH
17635: LD_INT 126000
17637: PUSH
17638: LD_INT 105000
17640: PUSH
17641: LD_INT 94500
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: PUSH
17650: LD_OWVAR 67
17654: ARRAY
17655: LESSEQUAL
17656: IFFALSE 17670
// AddMedal ( med2 , 1 ) else
17658: LD_STRING med2
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: CALL_OW 101
17668: GO 17681
// AddMedal ( med2 , - 1 ) ;
17670: LD_STRING med2
17672: PPUSH
17673: LD_INT 1
17675: NEG
17676: PPUSH
17677: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasApes + hasDrugs >= 3 then
17681: LD_EXP 16
17685: PUSH
17686: LD_EXP 14
17690: PLUS
17691: PUSH
17692: LD_EXP 15
17696: PLUS
17697: PUSH
17698: LD_EXP 13
17702: PLUS
17703: PUSH
17704: LD_EXP 16
17708: PLUS
17709: PUSH
17710: LD_EXP 17
17714: PLUS
17715: PUSH
17716: LD_INT 3
17718: GREATEREQUAL
17719: IFFALSE 17733
// AddMedal ( med3 , 1 ) else
17721: LD_STRING med3
17723: PPUSH
17724: LD_INT 1
17726: PPUSH
17727: CALL_OW 101
17731: GO 17744
// AddMedal ( med3 , - 1 ) ;
17733: LD_STRING med3
17735: PPUSH
17736: LD_INT 1
17738: NEG
17739: PPUSH
17740: CALL_OW 101
// GiveMedals ( MAIN ) ;
17744: LD_STRING MAIN
17746: PPUSH
17747: CALL_OW 102
// YouWin ;
17751: CALL_OW 103
// end ; end_of_file
17755: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
17756: LD_VAR 0 1
17760: PPUSH
17761: CALL 78156 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
17765: LD_EXP 5
17769: PUSH
17770: LD_VAR 0 1
17774: PPUSH
17775: CALL_OW 255
17779: PUSH
17780: LD_INT 2
17782: EQUAL
17783: AND
17784: PUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 263
17794: PUSH
17795: LD_INT 5
17797: EQUAL
17798: PUSH
17799: LD_VAR 0 1
17803: PPUSH
17804: CALL_OW 257
17808: PUSH
17809: LD_INT 12
17811: PUSH
17812: LD_INT 15
17814: PUSH
17815: LD_INT 16
17817: PUSH
17818: LD_INT 17
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: IN
17827: OR
17828: AND
17829: IFFALSE 17899
// begin apeAmount := Dec ( apeAmount ) ;
17831: LD_ADDR_EXP 5
17835: PUSH
17836: LD_EXP 5
17840: PPUSH
17841: CALL 59293 0 1
17845: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
17846: LD_INT 35
17848: PPUSH
17849: LD_INT 2100
17851: PPUSH
17852: CALL_OW 12
17856: PPUSH
17857: CALL_OW 67
// uc_side := 0 ;
17861: LD_ADDR_OWVAR 20
17865: PUSH
17866: LD_INT 0
17868: ST_TO_ADDR
// uc_nation := nation_nature ;
17869: LD_ADDR_OWVAR 21
17873: PUSH
17874: LD_INT 0
17876: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
17877: LD_INT 0
17879: PPUSH
17880: CALL 54178 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
17884: CALL_OW 44
17888: PPUSH
17889: LD_INT 6
17891: PPUSH
17892: LD_INT 0
17894: PPUSH
17895: CALL_OW 49
// end ; if unit = Heike then
17899: LD_VAR 0 1
17903: PUSH
17904: LD_EXP 22
17908: EQUAL
17909: IFFALSE 17918
// YouLost ( Heike ) ;
17911: LD_STRING Heike
17913: PPUSH
17914: CALL_OW 104
// if unit = Omar then
17918: LD_VAR 0 1
17922: PUSH
17923: LD_EXP 23
17927: EQUAL
17928: IFFALSE 17937
// YouLost ( Omar ) ;
17930: LD_STRING Omar
17932: PPUSH
17933: CALL_OW 104
// if unit in amForces then
17937: LD_VAR 0 1
17941: PUSH
17942: LD_EXP 26
17946: IN
17947: IFFALSE 17965
// amForces := amForces diff unit ;
17949: LD_ADDR_EXP 26
17953: PUSH
17954: LD_EXP 26
17958: PUSH
17959: LD_VAR 0 1
17963: DIFF
17964: ST_TO_ADDR
// if unit in amTanks then
17965: LD_VAR 0 1
17969: PUSH
17970: LD_EXP 31
17974: IN
17975: IFFALSE 17993
// amTanks := amTanks diff unit ;
17977: LD_ADDR_EXP 31
17981: PUSH
17982: LD_EXP 31
17986: PUSH
17987: LD_VAR 0 1
17991: DIFF
17992: ST_TO_ADDR
// if unit in amPatrol then
17993: LD_VAR 0 1
17997: PUSH
17998: LD_EXP 34
18002: IN
18003: IFFALSE 18021
// amPatrol := amPatrol diff unit ;
18005: LD_ADDR_EXP 34
18009: PUSH
18010: LD_EXP 34
18014: PUSH
18015: LD_VAR 0 1
18019: DIFF
18020: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 266
18030: PUSH
18031: LD_INT 32
18033: PUSH
18034: LD_INT 33
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: IN
18041: PUSH
18042: LD_VAR 0 1
18046: PPUSH
18047: CALL_OW 255
18051: PUSH
18052: LD_INT 1
18054: EQUAL
18055: AND
18056: IFFALSE 18119
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18058: LD_ADDR_EXP 30
18062: PUSH
18063: LD_EXP 30
18067: PPUSH
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 266
18077: PUSH
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 250
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 251
18097: PUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 254
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: PPUSH
18114: CALL 57910 0 2
18118: ST_TO_ADDR
// if unit in legForces then
18119: LD_VAR 0 1
18123: PUSH
18124: LD_EXP 36
18128: IN
18129: IFFALSE 18147
// legForces := legForces diff unit ;
18131: LD_ADDR_EXP 36
18135: PUSH
18136: LD_EXP 36
18140: PUSH
18141: LD_VAR 0 1
18145: DIFF
18146: ST_TO_ADDR
// if unit in legTanks then
18147: LD_VAR 0 1
18151: PUSH
18152: LD_EXP 42
18156: IN
18157: IFFALSE 18175
// legTanks := legTanks diff unit ;
18159: LD_ADDR_EXP 42
18163: PUSH
18164: LD_EXP 42
18168: PUSH
18169: LD_VAR 0 1
18173: DIFF
18174: ST_TO_ADDR
// if unit in legRTanks then
18175: LD_VAR 0 1
18179: PUSH
18180: LD_EXP 43
18184: IN
18185: IFFALSE 18203
// legRTanks := legRTanks diff unit ;
18187: LD_ADDR_EXP 43
18191: PUSH
18192: LD_EXP 43
18196: PUSH
18197: LD_VAR 0 1
18201: DIFF
18202: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
18203: LD_VAR 0 1
18207: PPUSH
18208: CALL_OW 266
18212: PUSH
18213: LD_INT 32
18215: PUSH
18216: LD_INT 33
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: IN
18223: PUSH
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 255
18233: PUSH
18234: LD_INT 8
18236: EQUAL
18237: AND
18238: IFFALSE 18301
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18240: LD_ADDR_EXP 41
18244: PUSH
18245: LD_EXP 41
18249: PPUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 266
18259: PUSH
18260: LD_VAR 0 1
18264: PPUSH
18265: CALL_OW 250
18269: PUSH
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 251
18279: PUSH
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 254
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: PPUSH
18296: CALL 57910 0 2
18300: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18301: LD_VAR 0 1
18305: PPUSH
18306: CALL_OW 264
18310: PUSH
18311: LD_INT 13
18313: EQUAL
18314: PUSH
18315: LD_VAR 0 1
18319: PPUSH
18320: CALL_OW 255
18324: PUSH
18325: LD_INT 1
18327: EQUAL
18328: AND
18329: IFFALSE 18364
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18331: LD_ADDR_EXP 28
18335: PUSH
18336: LD_EXP 28
18340: PPUSH
18341: LD_INT 2
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: LD_INT 2
18349: PUSH
18350: LD_INT 13
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL 57910 0 2
18363: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18364: LD_VAR 0 1
18368: PPUSH
18369: CALL_OW 264
18373: PUSH
18374: LD_INT 88
18376: EQUAL
18377: PUSH
18378: LD_VAR 0 1
18382: PPUSH
18383: CALL_OW 255
18387: PUSH
18388: LD_INT 8
18390: EQUAL
18391: AND
18392: IFFALSE 18427
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18394: LD_ADDR_EXP 39
18398: PUSH
18399: LD_EXP 39
18403: PPUSH
18404: LD_INT 13
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: LD_INT 2
18412: PUSH
18413: LD_INT 88
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: PPUSH
18422: CALL 57910 0 2
18426: ST_TO_ADDR
// if unit = amCargo then
18427: LD_VAR 0 1
18431: PUSH
18432: LD_EXP 33
18436: EQUAL
18437: IFFALSE 18480
// begin amCargo := 0 ;
18439: LD_ADDR_EXP 33
18443: PUSH
18444: LD_INT 0
18446: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
18447: LD_ADDR_EXP 28
18451: PUSH
18452: LD_EXP 28
18456: PPUSH
18457: LD_INT 2
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: LD_INT 2
18465: PUSH
18466: LD_INT 12
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL 57910 0 2
18479: ST_TO_ADDR
// end ; if unit = legCargo then
18480: LD_VAR 0 1
18484: PUSH
18485: LD_EXP 44
18489: EQUAL
18490: IFFALSE 18533
// begin legCargo := 0 ;
18492: LD_ADDR_EXP 44
18496: PUSH
18497: LD_INT 0
18499: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
18500: LD_ADDR_EXP 39
18504: PUSH
18505: LD_EXP 39
18509: PPUSH
18510: LD_INT 13
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 2
18518: PUSH
18519: LD_INT 32
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: PPUSH
18528: CALL 57910 0 2
18532: ST_TO_ADDR
// end ; end ;
18533: PPOPN 1
18535: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
18536: LD_ADDR_EXP 21
18540: PUSH
18541: LD_EXP 21
18545: PPUSH
18546: CALL 59271 0 1
18550: ST_TO_ADDR
// end ;
18551: PPOPN 2
18553: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
18554: LD_VAR 0 2
18558: PUSH
18559: LD_INT 3
18561: PUSH
18562: LD_INT 22
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 25
18578: PUSH
18579: LD_INT 3
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PPUSH
18590: CALL_OW 69
18594: IN
18595: PUSH
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 266
18605: PUSH
18606: LD_INT 3
18608: EQUAL
18609: AND
18610: PUSH
18611: LD_VAR 0 2
18615: PPUSH
18616: CALL_OW 256
18620: PUSH
18621: LD_INT 1000
18623: LESS
18624: AND
18625: IFFALSE 18651
// begin SetTag ( un , 0 ) ;
18627: LD_VAR 0 2
18631: PPUSH
18632: LD_INT 0
18634: PPUSH
18635: CALL_OW 109
// SetLives ( un , 1000 ) ;
18639: LD_VAR 0 2
18643: PPUSH
18644: LD_INT 1000
18646: PPUSH
18647: CALL_OW 234
// end ; end ;
18651: PPOPN 2
18653: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
18654: LD_INT 0
18656: PPUSH
18657: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
18658: LD_VAR 0 1
18662: PPUSH
18663: LD_VAR 0 2
18667: PPUSH
18668: CALL 78276 0 2
// side := GetSide ( fac ) ;
18672: LD_ADDR_VAR 0 3
18676: PUSH
18677: LD_VAR 0 2
18681: PPUSH
18682: CALL_OW 255
18686: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
18687: LD_ADDR_VAR 0 4
18691: PUSH
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 264
18701: ST_TO_ADDR
// if side = 1 then
18702: LD_VAR 0 3
18706: PUSH
18707: LD_INT 1
18709: EQUAL
18710: IFFALSE 18819
// begin amConstructList := Delete ( amConstructList , 1 ) ;
18712: LD_ADDR_EXP 28
18716: PUSH
18717: LD_EXP 28
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL_OW 3
18729: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
18730: LD_VAR 0 4
18734: PUSH
18735: LD_INT 12
18737: EQUAL
18738: PUSH
18739: LD_EXP 33
18743: NOT
18744: AND
18745: IFFALSE 18757
// amCargo := veh ;
18747: LD_ADDR_EXP 33
18751: PUSH
18752: LD_VAR 0 1
18756: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
18757: LD_VAR 0 4
18761: PUSH
18762: LD_INT 12
18764: PUSH
18765: LD_INT 13
18767: PUSH
18768: LD_INT 14
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: IN
18776: IFFALSE 18780
// exit ;
18778: GO 18969
// amTanks := Join ( amTanks , veh ) ;
18780: LD_ADDR_EXP 31
18784: PUSH
18785: LD_EXP 31
18789: PPUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL 57910 0 2
18799: ST_TO_ADDR
// wait ( 0 0$01 ) ;
18800: LD_INT 35
18802: PPUSH
18803: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
18807: LD_VAR 0 1
18811: PPUSH
18812: LD_INT 12
18814: PPUSH
18815: CALL_OW 173
// end ; if side = 8 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 8
18826: EQUAL
18827: IFFALSE 18969
// begin legConstructList := Delete ( legConstructList , 1 ) ;
18829: LD_ADDR_EXP 39
18833: PUSH
18834: LD_EXP 39
18838: PPUSH
18839: LD_INT 1
18841: PPUSH
18842: CALL_OW 3
18846: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
18847: LD_VAR 0 4
18851: PUSH
18852: LD_INT 32
18854: EQUAL
18855: PUSH
18856: LD_EXP 44
18860: NOT
18861: AND
18862: IFFALSE 18874
// legCargo := veh ;
18864: LD_ADDR_EXP 44
18868: PUSH
18869: LD_VAR 0 1
18873: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
18874: LD_VAR 0 4
18878: PUSH
18879: LD_INT 32
18881: PUSH
18882: LD_INT 88
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: IN
18889: IFFALSE 18893
// exit ;
18891: GO 18969
// if GetControl ( veh ) = control_manual then
18893: LD_VAR 0 1
18897: PPUSH
18898: CALL_OW 263
18902: PUSH
18903: LD_INT 1
18905: EQUAL
18906: IFFALSE 18930
// legTanks := Join ( legTanks , veh ) else
18908: LD_ADDR_EXP 42
18912: PUSH
18913: LD_EXP 42
18917: PPUSH
18918: LD_VAR 0 1
18922: PPUSH
18923: CALL 57910 0 2
18927: ST_TO_ADDR
18928: GO 18950
// legRTanks := Join ( legRTanks , veh ) ;
18930: LD_ADDR_EXP 43
18934: PUSH
18935: LD_EXP 43
18939: PPUSH
18940: LD_VAR 0 1
18944: PPUSH
18945: CALL 57910 0 2
18949: ST_TO_ADDR
// wait ( 0 0$01 ) ;
18950: LD_INT 35
18952: PPUSH
18953: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
18957: LD_VAR 0 1
18961: PPUSH
18962: LD_INT 15
18964: PPUSH
18965: CALL_OW 173
// end ; end ;
18969: PPOPN 4
18971: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
18972: LD_INT 0
18974: PPUSH
18975: PPUSH
18976: PPUSH
// begin side := GetSide ( driver ) ;
18977: LD_ADDR_VAR 0 7
18981: PUSH
18982: LD_VAR 0 1
18986: PPUSH
18987: CALL_OW 255
18991: ST_TO_ADDR
// if side = 1 and driver in amForces then
18992: LD_VAR 0 7
18996: PUSH
18997: LD_INT 1
18999: EQUAL
19000: PUSH
19001: LD_VAR 0 1
19005: PUSH
19006: LD_EXP 26
19010: IN
19011: AND
19012: IFFALSE 19224
// begin ComMoveToArea ( driver , amBaseArea ) ;
19014: LD_VAR 0 1
19018: PPUSH
19019: LD_INT 1
19021: PPUSH
19022: CALL_OW 113
// SetTag ( driver , tMech ) ;
19026: LD_VAR 0 1
19030: PPUSH
19031: LD_INT 7
19033: PPUSH
19034: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19038: LD_ADDR_VAR 0 6
19042: PUSH
19043: LD_INT 1
19045: PPUSH
19046: LD_INT 22
19048: PUSH
19049: LD_VAR 0 7
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 30
19060: PUSH
19061: LD_INT 3
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 50
19070: PUSH
19071: EMPTY
19072: LIST
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: LIST
19078: PPUSH
19079: CALL_OW 70
19083: ST_TO_ADDR
// if fac then
19084: LD_VAR 0 6
19088: IFFALSE 19110
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19090: LD_VAR 0 1
19094: PPUSH
19095: LD_VAR 0 6
19099: PUSH
19100: LD_INT 1
19102: ARRAY
19103: PPUSH
19104: CALL_OW 180
// exit ;
19108: GO 19444
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19110: LD_ADDR_VAR 0 5
19114: PUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_INT 22
19120: PUSH
19121: LD_VAR 0 7
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 2
19132: PUSH
19133: LD_INT 30
19135: PUSH
19136: LD_INT 4
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 30
19145: PUSH
19146: LD_INT 5
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 3
19160: PUSH
19161: LD_INT 62
19163: PUSH
19164: EMPTY
19165: LIST
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 50
19173: PUSH
19174: EMPTY
19175: LIST
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: PPUSH
19183: CALL_OW 70
19187: ST_TO_ADDR
// if arm then
19188: LD_VAR 0 5
19192: IFFALSE 19224
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19194: LD_VAR 0 1
19198: PPUSH
19199: LD_VAR 0 5
19203: PUSH
19204: LD_INT 1
19206: ARRAY
19207: PPUSH
19208: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19212: LD_VAR 0 1
19216: PPUSH
19217: LD_INT 1
19219: PPUSH
19220: CALL_OW 183
// end ; end ; if side = 8 then
19224: LD_VAR 0 7
19228: PUSH
19229: LD_INT 8
19231: EQUAL
19232: IFFALSE 19444
// begin ComMoveToArea ( driver , legBaseArea ) ;
19234: LD_VAR 0 1
19238: PPUSH
19239: LD_INT 2
19241: PPUSH
19242: CALL_OW 113
// SetTag ( driver , tMech ) ;
19246: LD_VAR 0 1
19250: PPUSH
19251: LD_INT 7
19253: PPUSH
19254: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19258: LD_ADDR_VAR 0 6
19262: PUSH
19263: LD_INT 2
19265: PPUSH
19266: LD_INT 22
19268: PUSH
19269: LD_VAR 0 7
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 30
19280: PUSH
19281: LD_INT 3
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 50
19290: PUSH
19291: EMPTY
19292: LIST
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: PPUSH
19299: CALL_OW 70
19303: ST_TO_ADDR
// if fac then
19304: LD_VAR 0 6
19308: IFFALSE 19330
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19310: LD_VAR 0 1
19314: PPUSH
19315: LD_VAR 0 6
19319: PUSH
19320: LD_INT 1
19322: ARRAY
19323: PPUSH
19324: CALL_OW 180
// exit ;
19328: GO 19444
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19330: LD_ADDR_VAR 0 5
19334: PUSH
19335: LD_INT 2
19337: PPUSH
19338: LD_INT 22
19340: PUSH
19341: LD_VAR 0 7
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 2
19352: PUSH
19353: LD_INT 30
19355: PUSH
19356: LD_INT 4
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 30
19365: PUSH
19366: LD_INT 5
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 3
19380: PUSH
19381: LD_INT 62
19383: PUSH
19384: EMPTY
19385: LIST
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 50
19393: PUSH
19394: EMPTY
19395: LIST
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 70
19407: ST_TO_ADDR
// if arm then
19408: LD_VAR 0 5
19412: IFFALSE 19444
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19414: LD_VAR 0 1
19418: PPUSH
19419: LD_VAR 0 5
19423: PUSH
19424: LD_INT 1
19426: ARRAY
19427: PPUSH
19428: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19432: LD_VAR 0 1
19436: PPUSH
19437: LD_INT 1
19439: PPUSH
19440: CALL_OW 183
// end ; end ; end ;
19444: PPOPN 7
19446: END
// on BuildingComplete ( b ) do var side , type ;
19447: LD_INT 0
19449: PPUSH
19450: PPUSH
// begin side := GetSide ( b ) ;
19451: LD_ADDR_VAR 0 2
19455: PUSH
19456: LD_VAR 0 1
19460: PPUSH
19461: CALL_OW 255
19465: ST_TO_ADDR
// type := GetBType ( b ) ;
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_VAR 0 1
19475: PPUSH
19476: CALL_OW 266
19480: ST_TO_ADDR
// if side = 1 then
19481: LD_VAR 0 2
19485: PUSH
19486: LD_INT 1
19488: EQUAL
19489: IFFALSE 19539
// begin amBuildings := Delete ( amBuildings , 1 ) ;
19491: LD_ADDR_EXP 30
19495: PUSH
19496: LD_EXP 30
19500: PPUSH
19501: LD_INT 1
19503: PPUSH
19504: CALL_OW 3
19508: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
19509: LD_VAR 0 3
19513: PUSH
19514: LD_INT 0
19516: PUSH
19517: LD_INT 4
19519: PUSH
19520: LD_INT 2
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: LIST
19527: IN
19528: IFFALSE 19539
// ComUpgrade ( b ) ;
19530: LD_VAR 0 1
19534: PPUSH
19535: CALL_OW 146
// end ; end ;
19539: PPOPN 3
19541: END
// on ResearchComplete ( tech , lab ) do var side ;
19542: LD_INT 0
19544: PPUSH
// begin side := GetSide ( lab ) ;
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: LD_VAR 0 2
19554: PPUSH
19555: CALL_OW 255
19559: ST_TO_ADDR
// if side = 1 then
19560: LD_VAR 0 3
19564: PUSH
19565: LD_INT 1
19567: EQUAL
19568: IFFALSE 19586
// amTech := amTech diff tech ;
19570: LD_ADDR_EXP 27
19574: PUSH
19575: LD_EXP 27
19579: PUSH
19580: LD_VAR 0 1
19584: DIFF
19585: ST_TO_ADDR
// end ;
19586: PPOPN 3
19588: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19589: LD_VAR 0 1
19593: PPUSH
19594: CALL 78260 0 1
// end ;
19598: PPOPN 1
19600: END
// on SailEvent ( event ) do begin case event of end ;
19601: LD_VAR 0 1
19605: PUSH
19606: POP
// end ;
19607: PPOPN 1
19609: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
19610: LD_EXP 19
19614: NOT
19615: IFFALSE 19619
// exit ;
19617: GO 19717
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
19619: LD_EXP 8
19623: NOT
19624: PUSH
19625: LD_VAR 0 1
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: IN
19640: AND
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: LD_INT 2
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: IN
19657: AND
19658: IFFALSE 19668
// spotByAmerican := true ;
19660: LD_ADDR_EXP 8
19664: PUSH
19665: LD_INT 1
19667: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
19668: LD_EXP 9
19672: NOT
19673: PUSH
19674: LD_VAR 0 1
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: LD_INT 8
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: IN
19689: AND
19690: PUSH
19691: LD_VAR 0 2
19695: PUSH
19696: LD_INT 8
19698: PUSH
19699: LD_INT 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: IN
19706: AND
19707: IFFALSE 19717
// spotByLegion := true ;
19709: LD_ADDR_EXP 9
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// end ; end_of_file
19717: PPOPN 2
19719: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
19720: LD_EXP 7
19724: IFFALSE 19831
19726: GO 19728
19728: DISABLE
19729: LD_INT 0
19731: PPUSH
19732: PPUSH
// begin enable ;
19733: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
19734: LD_INT 35
19736: PPUSH
19737: LD_INT 385
19739: PPUSH
19740: CALL_OW 12
19744: PPUSH
19745: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
19749: LD_ADDR_VAR 0 2
19753: PUSH
19754: LD_INT 16
19756: PUSH
19757: LD_INT 17
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
19764: LD_ADDR_VAR 0 1
19768: PUSH
19769: LD_VAR 0 2
19773: PUSH
19774: LD_INT 1
19776: PPUSH
19777: LD_VAR 0 2
19781: PPUSH
19782: CALL 22310 0 1
19786: PPUSH
19787: CALL_OW 12
19791: ARRAY
19792: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
19793: LD_VAR 0 1
19797: PPUSH
19798: CALL_OW 435
19802: PUSH
19803: LD_INT 4
19805: LESS
19806: IFFALSE 19831
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
19808: LD_INT 1
19810: PPUSH
19811: LD_INT 5
19813: PPUSH
19814: CALL_OW 12
19818: PPUSH
19819: LD_VAR 0 1
19823: PPUSH
19824: LD_INT 1
19826: PPUSH
19827: CALL_OW 55
// end ;
19831: PPOPN 2
19833: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
19834: LD_OWVAR 1
19838: PUSH
19839: LD_INT 10500
19841: PUSH
19842: LD_INT 8400
19844: PUSH
19845: LD_INT 6300
19847: PUSH
19848: LD_INT 5250
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: PUSH
19857: LD_OWVAR 67
19861: ARRAY
19862: LESS
19863: PUSH
19864: LD_EXP 7
19868: AND
19869: IFFALSE 19902
19871: GO 19873
19873: DISABLE
// begin enable ;
19874: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
19875: LD_INT 1
19877: PPUSH
19878: LD_INT 5
19880: PPUSH
19881: CALL_OW 12
19885: PPUSH
19886: LD_INT 218
19888: PPUSH
19889: LD_INT 92
19891: PPUSH
19892: LD_INT 11
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 56
// end ;
19902: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
19903: LD_OWVAR 1
19907: PUSH
19908: LD_INT 12600
19910: PUSH
19911: LD_INT 10500
19913: PUSH
19914: LD_INT 8400
19916: PUSH
19917: LD_INT 7350
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: PUSH
19926: LD_OWVAR 67
19930: ARRAY
19931: GREATER
19932: PUSH
19933: LD_EXP 7
19937: AND
19938: IFFALSE 19990
19940: GO 19942
19942: DISABLE
// begin enable ;
19943: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) then
19944: LD_INT 100
19946: PUSH
19947: LD_INT 10
19949: PUSH
19950: LD_OWVAR 67
19954: MUL
19955: MINUS
19956: PPUSH
19957: CALL_OW 13
19961: IFFALSE 19990
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
19963: LD_INT 1
19965: PPUSH
19966: LD_INT 5
19968: PPUSH
19969: CALL_OW 12
19973: PPUSH
19974: LD_INT 218
19976: PPUSH
19977: LD_INT 92
19979: PPUSH
19980: LD_INT 11
19982: PPUSH
19983: LD_INT 1
19985: PPUSH
19986: CALL_OW 56
// end ;
19990: END
// every 0 0$55 trigger IsOk ( amBase ) do
19991: LD_INT 2
19993: PPUSH
19994: CALL_OW 302
19998: IFFALSE 20038
20000: GO 20002
20002: DISABLE
// begin enable ;
20003: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20004: LD_INT 13
20006: PPUSH
20007: CALL_OW 435
20011: PUSH
20012: LD_INT 3
20014: LESS
20015: IFFALSE 20038
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20017: LD_INT 1
20019: PPUSH
20020: LD_INT 5
20022: PPUSH
20023: CALL_OW 12
20027: PPUSH
20028: LD_INT 13
20030: PPUSH
20031: LD_INT 1
20033: PPUSH
20034: CALL_OW 55
// end ;
20038: END
// every 1 1$05 trigger IsOk ( legBase ) do
20039: LD_INT 38
20041: PPUSH
20042: CALL_OW 302
20046: IFFALSE 20086
20048: GO 20050
20050: DISABLE
// begin enable ;
20051: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20052: LD_INT 14
20054: PPUSH
20055: CALL_OW 435
20059: PUSH
20060: LD_INT 3
20062: LESS
20063: IFFALSE 20086
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20065: LD_INT 1
20067: PPUSH
20068: LD_INT 5
20070: PPUSH
20071: CALL_OW 12
20075: PPUSH
20076: LD_INT 14
20078: PPUSH
20079: LD_INT 1
20081: PPUSH
20082: CALL_OW 55
// end ; end_of_file
20086: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20087: LD_EXP 19
20091: PUSH
20092: LD_EXP 23
20096: PPUSH
20097: CALL_OW 257
20101: PUSH
20102: LD_INT 11
20104: NONEQUAL
20105: AND
20106: PUSH
20107: LD_EXP 7
20111: AND
20112: PUSH
20113: LD_INT 85
20115: PPUSH
20116: CALL_OW 302
20120: AND
20121: IFFALSE 20141
20123: GO 20125
20125: DISABLE
// begin Query ( QSheik ) ;
20126: LD_STRING QSheik
20128: PPUSH
20129: CALL_OW 97
// omarCanChangeClass := true ;
20133: LD_ADDR_EXP 20
20137: PUSH
20138: LD_INT 1
20140: ST_TO_ADDR
// end ;
20141: END
// every 0 0$2 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20142: LD_EXP 20
20146: PUSH
20147: LD_EXP 23
20151: PPUSH
20152: CALL_OW 257
20156: PUSH
20157: LD_INT 11
20159: NONEQUAL
20160: AND
20161: PUSH
20162: LD_EXP 23
20166: PPUSH
20167: CALL_OW 310
20171: PUSH
20172: LD_INT 85
20174: EQUAL
20175: AND
20176: IFFALSE 20207
20178: GO 20180
20180: DISABLE
// begin enable ;
20181: ENABLE
// if Query ( QChangeClass ) = 1 then
20182: LD_STRING QChangeClass
20184: PPUSH
20185: CALL_OW 97
20189: PUSH
20190: LD_INT 1
20192: EQUAL
20193: IFFALSE 20207
// SetClass ( Omar , class_desert_warior ) ;
20195: LD_EXP 23
20199: PPUSH
20200: LD_INT 11
20202: PPUSH
20203: CALL_OW 336
// end ; end_of_file
20207: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
// if exist_mode then
20212: LD_VAR 0 2
20216: IFFALSE 20241
// unit := CreateCharacter ( prefix & ident ) else
20218: LD_ADDR_VAR 0 5
20222: PUSH
20223: LD_VAR 0 3
20227: PUSH
20228: LD_VAR 0 1
20232: STR
20233: PPUSH
20234: CALL_OW 34
20238: ST_TO_ADDR
20239: GO 20256
// unit := NewCharacter ( ident ) ;
20241: LD_ADDR_VAR 0 5
20245: PUSH
20246: LD_VAR 0 1
20250: PPUSH
20251: CALL_OW 25
20255: ST_TO_ADDR
// result := unit ;
20256: LD_ADDR_VAR 0 4
20260: PUSH
20261: LD_VAR 0 5
20265: ST_TO_ADDR
// end ;
20266: LD_VAR 0 4
20270: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20271: LD_INT 0
20273: PPUSH
20274: PPUSH
// if not side or not nation then
20275: LD_VAR 0 1
20279: NOT
20280: PUSH
20281: LD_VAR 0 2
20285: NOT
20286: OR
20287: IFFALSE 20291
// exit ;
20289: GO 21059
// case nation of nation_american :
20291: LD_VAR 0 2
20295: PUSH
20296: LD_INT 1
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20518
20304: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20305: LD_ADDR_VAR 0 4
20309: PUSH
20310: LD_INT 35
20312: PUSH
20313: LD_INT 45
20315: PUSH
20316: LD_INT 46
20318: PUSH
20319: LD_INT 47
20321: PUSH
20322: LD_INT 82
20324: PUSH
20325: LD_INT 83
20327: PUSH
20328: LD_INT 84
20330: PUSH
20331: LD_INT 85
20333: PUSH
20334: LD_INT 86
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: LD_INT 6
20345: PUSH
20346: LD_INT 15
20348: PUSH
20349: LD_INT 16
20351: PUSH
20352: LD_INT 7
20354: PUSH
20355: LD_INT 12
20357: PUSH
20358: LD_INT 13
20360: PUSH
20361: LD_INT 10
20363: PUSH
20364: LD_INT 14
20366: PUSH
20367: LD_INT 20
20369: PUSH
20370: LD_INT 21
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_INT 25
20378: PUSH
20379: LD_INT 32
20381: PUSH
20382: LD_INT 27
20384: PUSH
20385: LD_INT 36
20387: PUSH
20388: LD_INT 69
20390: PUSH
20391: LD_INT 39
20393: PUSH
20394: LD_INT 34
20396: PUSH
20397: LD_INT 40
20399: PUSH
20400: LD_INT 48
20402: PUSH
20403: LD_INT 49
20405: PUSH
20406: LD_INT 50
20408: PUSH
20409: LD_INT 51
20411: PUSH
20412: LD_INT 52
20414: PUSH
20415: LD_INT 53
20417: PUSH
20418: LD_INT 54
20420: PUSH
20421: LD_INT 55
20423: PUSH
20424: LD_INT 56
20426: PUSH
20427: LD_INT 57
20429: PUSH
20430: LD_INT 58
20432: PUSH
20433: LD_INT 59
20435: PUSH
20436: LD_INT 60
20438: PUSH
20439: LD_INT 61
20441: PUSH
20442: LD_INT 62
20444: PUSH
20445: LD_INT 80
20447: PUSH
20448: LD_INT 82
20450: PUSH
20451: LD_INT 83
20453: PUSH
20454: LD_INT 84
20456: PUSH
20457: LD_INT 85
20459: PUSH
20460: LD_INT 86
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: ST_TO_ADDR
20516: GO 20983
20518: LD_INT 2
20520: DOUBLE
20521: EQUAL
20522: IFTRUE 20526
20524: GO 20752
20526: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20527: LD_ADDR_VAR 0 4
20531: PUSH
20532: LD_INT 35
20534: PUSH
20535: LD_INT 45
20537: PUSH
20538: LD_INT 46
20540: PUSH
20541: LD_INT 47
20543: PUSH
20544: LD_INT 82
20546: PUSH
20547: LD_INT 83
20549: PUSH
20550: LD_INT 84
20552: PUSH
20553: LD_INT 85
20555: PUSH
20556: LD_INT 87
20558: PUSH
20559: LD_INT 70
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: LD_INT 11
20567: PUSH
20568: LD_INT 3
20570: PUSH
20571: LD_INT 4
20573: PUSH
20574: LD_INT 5
20576: PUSH
20577: LD_INT 6
20579: PUSH
20580: LD_INT 15
20582: PUSH
20583: LD_INT 18
20585: PUSH
20586: LD_INT 7
20588: PUSH
20589: LD_INT 17
20591: PUSH
20592: LD_INT 8
20594: PUSH
20595: LD_INT 20
20597: PUSH
20598: LD_INT 21
20600: PUSH
20601: LD_INT 22
20603: PUSH
20604: LD_INT 72
20606: PUSH
20607: LD_INT 26
20609: PUSH
20610: LD_INT 69
20612: PUSH
20613: LD_INT 39
20615: PUSH
20616: LD_INT 40
20618: PUSH
20619: LD_INT 41
20621: PUSH
20622: LD_INT 42
20624: PUSH
20625: LD_INT 43
20627: PUSH
20628: LD_INT 48
20630: PUSH
20631: LD_INT 49
20633: PUSH
20634: LD_INT 50
20636: PUSH
20637: LD_INT 51
20639: PUSH
20640: LD_INT 52
20642: PUSH
20643: LD_INT 53
20645: PUSH
20646: LD_INT 54
20648: PUSH
20649: LD_INT 55
20651: PUSH
20652: LD_INT 56
20654: PUSH
20655: LD_INT 60
20657: PUSH
20658: LD_INT 61
20660: PUSH
20661: LD_INT 62
20663: PUSH
20664: LD_INT 66
20666: PUSH
20667: LD_INT 67
20669: PUSH
20670: LD_INT 68
20672: PUSH
20673: LD_INT 81
20675: PUSH
20676: LD_INT 82
20678: PUSH
20679: LD_INT 83
20681: PUSH
20682: LD_INT 84
20684: PUSH
20685: LD_INT 85
20687: PUSH
20688: LD_INT 87
20690: PUSH
20691: LD_INT 88
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: ST_TO_ADDR
20750: GO 20983
20752: LD_INT 3
20754: DOUBLE
20755: EQUAL
20756: IFTRUE 20760
20758: GO 20982
20760: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20761: LD_ADDR_VAR 0 4
20765: PUSH
20766: LD_INT 46
20768: PUSH
20769: LD_INT 47
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 82
20780: PUSH
20781: LD_INT 83
20783: PUSH
20784: LD_INT 84
20786: PUSH
20787: LD_INT 85
20789: PUSH
20790: LD_INT 86
20792: PUSH
20793: LD_INT 11
20795: PUSH
20796: LD_INT 9
20798: PUSH
20799: LD_INT 20
20801: PUSH
20802: LD_INT 19
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 24
20810: PUSH
20811: LD_INT 22
20813: PUSH
20814: LD_INT 25
20816: PUSH
20817: LD_INT 28
20819: PUSH
20820: LD_INT 29
20822: PUSH
20823: LD_INT 30
20825: PUSH
20826: LD_INT 31
20828: PUSH
20829: LD_INT 37
20831: PUSH
20832: LD_INT 38
20834: PUSH
20835: LD_INT 32
20837: PUSH
20838: LD_INT 27
20840: PUSH
20841: LD_INT 33
20843: PUSH
20844: LD_INT 69
20846: PUSH
20847: LD_INT 39
20849: PUSH
20850: LD_INT 34
20852: PUSH
20853: LD_INT 40
20855: PUSH
20856: LD_INT 71
20858: PUSH
20859: LD_INT 23
20861: PUSH
20862: LD_INT 44
20864: PUSH
20865: LD_INT 48
20867: PUSH
20868: LD_INT 49
20870: PUSH
20871: LD_INT 50
20873: PUSH
20874: LD_INT 51
20876: PUSH
20877: LD_INT 52
20879: PUSH
20880: LD_INT 53
20882: PUSH
20883: LD_INT 54
20885: PUSH
20886: LD_INT 55
20888: PUSH
20889: LD_INT 56
20891: PUSH
20892: LD_INT 57
20894: PUSH
20895: LD_INT 58
20897: PUSH
20898: LD_INT 59
20900: PUSH
20901: LD_INT 63
20903: PUSH
20904: LD_INT 64
20906: PUSH
20907: LD_INT 65
20909: PUSH
20910: LD_INT 82
20912: PUSH
20913: LD_INT 83
20915: PUSH
20916: LD_INT 84
20918: PUSH
20919: LD_INT 85
20921: PUSH
20922: LD_INT 86
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: ST_TO_ADDR
20980: GO 20983
20982: POP
// if state > - 1 and state < 3 then
20983: LD_VAR 0 3
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: GREATER
20992: PUSH
20993: LD_VAR 0 3
20997: PUSH
20998: LD_INT 3
21000: LESS
21001: AND
21002: IFFALSE 21059
// for i in result do
21004: LD_ADDR_VAR 0 5
21008: PUSH
21009: LD_VAR 0 4
21013: PUSH
21014: FOR_IN
21015: IFFALSE 21057
// if GetTech ( i , side ) <> state then
21017: LD_VAR 0 5
21021: PPUSH
21022: LD_VAR 0 1
21026: PPUSH
21027: CALL_OW 321
21031: PUSH
21032: LD_VAR 0 3
21036: NONEQUAL
21037: IFFALSE 21055
// result := result diff i ;
21039: LD_ADDR_VAR 0 4
21043: PUSH
21044: LD_VAR 0 4
21048: PUSH
21049: LD_VAR 0 5
21053: DIFF
21054: ST_TO_ADDR
21055: GO 21014
21057: POP
21058: POP
// end ;
21059: LD_VAR 0 4
21063: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21064: LD_INT 0
21066: PPUSH
21067: PPUSH
21068: PPUSH
// result := true ;
21069: LD_ADDR_VAR 0 3
21073: PUSH
21074: LD_INT 1
21076: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21077: LD_ADDR_VAR 0 5
21081: PUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: CALL_OW 480
21091: ST_TO_ADDR
// if not tmp then
21092: LD_VAR 0 5
21096: NOT
21097: IFFALSE 21101
// exit ;
21099: GO 21150
// for i in tmp do
21101: LD_ADDR_VAR 0 4
21105: PUSH
21106: LD_VAR 0 5
21110: PUSH
21111: FOR_IN
21112: IFFALSE 21148
// if GetTech ( i , side ) <> state_researched then
21114: LD_VAR 0 4
21118: PPUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 321
21128: PUSH
21129: LD_INT 2
21131: NONEQUAL
21132: IFFALSE 21146
// begin result := false ;
21134: LD_ADDR_VAR 0 3
21138: PUSH
21139: LD_INT 0
21141: ST_TO_ADDR
// exit ;
21142: POP
21143: POP
21144: GO 21150
// end ;
21146: GO 21111
21148: POP
21149: POP
// end ;
21150: LD_VAR 0 3
21154: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21155: LD_INT 0
21157: PPUSH
21158: PPUSH
21159: PPUSH
21160: PPUSH
21161: PPUSH
21162: PPUSH
21163: PPUSH
21164: PPUSH
21165: PPUSH
21166: PPUSH
21167: PPUSH
21168: PPUSH
21169: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21170: LD_VAR 0 1
21174: NOT
21175: PUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL_OW 257
21185: PUSH
21186: LD_INT 9
21188: NONEQUAL
21189: OR
21190: IFFALSE 21194
// exit ;
21192: GO 21767
// side := GetSide ( unit ) ;
21194: LD_ADDR_VAR 0 9
21198: PUSH
21199: LD_VAR 0 1
21203: PPUSH
21204: CALL_OW 255
21208: ST_TO_ADDR
// tech_space := tech_spacanom ;
21209: LD_ADDR_VAR 0 12
21213: PUSH
21214: LD_INT 29
21216: ST_TO_ADDR
// tech_time := tech_taurad ;
21217: LD_ADDR_VAR 0 13
21221: PUSH
21222: LD_INT 28
21224: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21225: LD_ADDR_VAR 0 11
21229: PUSH
21230: LD_VAR 0 1
21234: PPUSH
21235: CALL_OW 310
21239: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21240: LD_VAR 0 11
21244: PPUSH
21245: CALL_OW 247
21249: PUSH
21250: LD_INT 2
21252: EQUAL
21253: IFFALSE 21257
// exit ;
21255: GO 21767
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21257: LD_ADDR_VAR 0 8
21261: PUSH
21262: LD_INT 81
21264: PUSH
21265: LD_VAR 0 9
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 3
21276: PUSH
21277: LD_INT 21
21279: PUSH
21280: LD_INT 3
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL_OW 69
21299: ST_TO_ADDR
// if not tmp then
21300: LD_VAR 0 8
21304: NOT
21305: IFFALSE 21309
// exit ;
21307: GO 21767
// if in_unit then
21309: LD_VAR 0 11
21313: IFFALSE 21337
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21315: LD_ADDR_VAR 0 10
21319: PUSH
21320: LD_VAR 0 8
21324: PPUSH
21325: LD_VAR 0 11
21329: PPUSH
21330: CALL_OW 74
21334: ST_TO_ADDR
21335: GO 21357
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21337: LD_ADDR_VAR 0 10
21341: PUSH
21342: LD_VAR 0 8
21346: PPUSH
21347: LD_VAR 0 1
21351: PPUSH
21352: CALL_OW 74
21356: ST_TO_ADDR
// if not enemy then
21357: LD_VAR 0 10
21361: NOT
21362: IFFALSE 21366
// exit ;
21364: GO 21767
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21366: LD_VAR 0 11
21370: PUSH
21371: LD_VAR 0 11
21375: PPUSH
21376: LD_VAR 0 10
21380: PPUSH
21381: CALL_OW 296
21385: PUSH
21386: LD_INT 13
21388: GREATER
21389: AND
21390: PUSH
21391: LD_VAR 0 1
21395: PPUSH
21396: LD_VAR 0 10
21400: PPUSH
21401: CALL_OW 296
21405: PUSH
21406: LD_INT 12
21408: GREATER
21409: OR
21410: IFFALSE 21414
// exit ;
21412: GO 21767
// missile := [ 1 ] ;
21414: LD_ADDR_VAR 0 14
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21425: LD_VAR 0 9
21429: PPUSH
21430: LD_VAR 0 12
21434: PPUSH
21435: CALL_OW 325
21439: IFFALSE 21468
// missile := Replace ( missile , missile + 1 , 2 ) ;
21441: LD_ADDR_VAR 0 14
21445: PUSH
21446: LD_VAR 0 14
21450: PPUSH
21451: LD_VAR 0 14
21455: PUSH
21456: LD_INT 1
21458: PLUS
21459: PPUSH
21460: LD_INT 2
21462: PPUSH
21463: CALL_OW 1
21467: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21468: LD_VAR 0 9
21472: PPUSH
21473: LD_VAR 0 13
21477: PPUSH
21478: CALL_OW 325
21482: PUSH
21483: LD_VAR 0 10
21487: PPUSH
21488: CALL_OW 255
21492: PPUSH
21493: LD_VAR 0 13
21497: PPUSH
21498: CALL_OW 325
21502: NOT
21503: AND
21504: IFFALSE 21533
// missile := Replace ( missile , missile + 1 , 3 ) ;
21506: LD_ADDR_VAR 0 14
21510: PUSH
21511: LD_VAR 0 14
21515: PPUSH
21516: LD_VAR 0 14
21520: PUSH
21521: LD_INT 1
21523: PLUS
21524: PPUSH
21525: LD_INT 3
21527: PPUSH
21528: CALL_OW 1
21532: ST_TO_ADDR
// if missile < 2 then
21533: LD_VAR 0 14
21537: PUSH
21538: LD_INT 2
21540: LESS
21541: IFFALSE 21545
// exit ;
21543: GO 21767
// x := GetX ( enemy ) ;
21545: LD_ADDR_VAR 0 4
21549: PUSH
21550: LD_VAR 0 10
21554: PPUSH
21555: CALL_OW 250
21559: ST_TO_ADDR
// y := GetY ( enemy ) ;
21560: LD_ADDR_VAR 0 5
21564: PUSH
21565: LD_VAR 0 10
21569: PPUSH
21570: CALL_OW 251
21574: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21575: LD_ADDR_VAR 0 6
21579: PUSH
21580: LD_VAR 0 4
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PPUSH
21589: LD_INT 1
21591: PPUSH
21592: CALL_OW 12
21596: PLUS
21597: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21598: LD_ADDR_VAR 0 7
21602: PUSH
21603: LD_VAR 0 5
21607: PUSH
21608: LD_INT 1
21610: NEG
21611: PPUSH
21612: LD_INT 1
21614: PPUSH
21615: CALL_OW 12
21619: PLUS
21620: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21621: LD_VAR 0 6
21625: PPUSH
21626: LD_VAR 0 7
21630: PPUSH
21631: CALL_OW 488
21635: NOT
21636: IFFALSE 21658
// begin _x := x ;
21638: LD_ADDR_VAR 0 6
21642: PUSH
21643: LD_VAR 0 4
21647: ST_TO_ADDR
// _y := y ;
21648: LD_ADDR_VAR 0 7
21652: PUSH
21653: LD_VAR 0 5
21657: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21658: LD_ADDR_VAR 0 3
21662: PUSH
21663: LD_INT 1
21665: PPUSH
21666: LD_VAR 0 14
21670: PPUSH
21671: CALL_OW 12
21675: ST_TO_ADDR
// case i of 1 :
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 1
21683: DOUBLE
21684: EQUAL
21685: IFTRUE 21689
21687: GO 21706
21689: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21690: LD_VAR 0 1
21694: PPUSH
21695: LD_VAR 0 10
21699: PPUSH
21700: CALL_OW 115
21704: GO 21767
21706: LD_INT 2
21708: DOUBLE
21709: EQUAL
21710: IFTRUE 21714
21712: GO 21736
21714: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_VAR 0 6
21724: PPUSH
21725: LD_VAR 0 7
21729: PPUSH
21730: CALL_OW 153
21734: GO 21767
21736: LD_INT 3
21738: DOUBLE
21739: EQUAL
21740: IFTRUE 21744
21742: GO 21766
21744: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21745: LD_VAR 0 1
21749: PPUSH
21750: LD_VAR 0 6
21754: PPUSH
21755: LD_VAR 0 7
21759: PPUSH
21760: CALL_OW 154
21764: GO 21767
21766: POP
// end ;
21767: LD_VAR 0 2
21771: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21772: LD_INT 0
21774: PPUSH
21775: PPUSH
21776: PPUSH
21777: PPUSH
21778: PPUSH
21779: PPUSH
// if not unit or not building then
21780: LD_VAR 0 1
21784: NOT
21785: PUSH
21786: LD_VAR 0 2
21790: NOT
21791: OR
21792: IFFALSE 21796
// exit ;
21794: GO 21954
// x := GetX ( building ) ;
21796: LD_ADDR_VAR 0 5
21800: PUSH
21801: LD_VAR 0 2
21805: PPUSH
21806: CALL_OW 250
21810: ST_TO_ADDR
// y := GetY ( building ) ;
21811: LD_ADDR_VAR 0 6
21815: PUSH
21816: LD_VAR 0 2
21820: PPUSH
21821: CALL_OW 251
21825: ST_TO_ADDR
// for i = 0 to 5 do
21826: LD_ADDR_VAR 0 4
21830: PUSH
21831: DOUBLE
21832: LD_INT 0
21834: DEC
21835: ST_TO_ADDR
21836: LD_INT 5
21838: PUSH
21839: FOR_TO
21840: IFFALSE 21952
// begin _x := ShiftX ( x , i , 3 ) ;
21842: LD_ADDR_VAR 0 7
21846: PUSH
21847: LD_VAR 0 5
21851: PPUSH
21852: LD_VAR 0 4
21856: PPUSH
21857: LD_INT 3
21859: PPUSH
21860: CALL_OW 272
21864: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21865: LD_ADDR_VAR 0 8
21869: PUSH
21870: LD_VAR 0 6
21874: PPUSH
21875: LD_VAR 0 4
21879: PPUSH
21880: LD_INT 3
21882: PPUSH
21883: CALL_OW 273
21887: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21888: LD_VAR 0 7
21892: PPUSH
21893: LD_VAR 0 8
21897: PPUSH
21898: CALL_OW 488
21902: NOT
21903: IFFALSE 21907
// continue ;
21905: GO 21839
// if HexInfo ( _x , _y ) = 0 then
21907: LD_VAR 0 7
21911: PPUSH
21912: LD_VAR 0 8
21916: PPUSH
21917: CALL_OW 428
21921: PUSH
21922: LD_INT 0
21924: EQUAL
21925: IFFALSE 21950
// begin ComMoveXY ( unit , _x , _y ) ;
21927: LD_VAR 0 1
21931: PPUSH
21932: LD_VAR 0 7
21936: PPUSH
21937: LD_VAR 0 8
21941: PPUSH
21942: CALL_OW 111
// exit ;
21946: POP
21947: POP
21948: GO 21954
// end ; end ;
21950: GO 21839
21952: POP
21953: POP
// end ;
21954: LD_VAR 0 3
21958: RET
// export function ScanBase ( side , base_area ) ; begin
21959: LD_INT 0
21961: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21962: LD_ADDR_VAR 0 3
21966: PUSH
21967: LD_VAR 0 2
21971: PPUSH
21972: LD_INT 81
21974: PUSH
21975: LD_VAR 0 1
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PPUSH
21984: CALL_OW 70
21988: ST_TO_ADDR
// end ;
21989: LD_VAR 0 3
21993: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21994: LD_INT 0
21996: PPUSH
21997: PPUSH
21998: PPUSH
21999: PPUSH
// result := false ;
22000: LD_ADDR_VAR 0 2
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// side := GetSide ( unit ) ;
22008: LD_ADDR_VAR 0 3
22012: PUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL_OW 255
22022: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22023: LD_ADDR_VAR 0 4
22027: PUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: CALL_OW 248
22037: ST_TO_ADDR
// case nat of 1 :
22038: LD_VAR 0 4
22042: PUSH
22043: LD_INT 1
22045: DOUBLE
22046: EQUAL
22047: IFTRUE 22051
22049: GO 22062
22051: POP
// tech := tech_lassight ; 2 :
22052: LD_ADDR_VAR 0 5
22056: PUSH
22057: LD_INT 12
22059: ST_TO_ADDR
22060: GO 22101
22062: LD_INT 2
22064: DOUBLE
22065: EQUAL
22066: IFTRUE 22070
22068: GO 22081
22070: POP
// tech := tech_mortar ; 3 :
22071: LD_ADDR_VAR 0 5
22075: PUSH
22076: LD_INT 41
22078: ST_TO_ADDR
22079: GO 22101
22081: LD_INT 3
22083: DOUBLE
22084: EQUAL
22085: IFTRUE 22089
22087: GO 22100
22089: POP
// tech := tech_bazooka ; end ;
22090: LD_ADDR_VAR 0 5
22094: PUSH
22095: LD_INT 44
22097: ST_TO_ADDR
22098: GO 22101
22100: POP
// if Researched ( side , tech ) then
22101: LD_VAR 0 3
22105: PPUSH
22106: LD_VAR 0 5
22110: PPUSH
22111: CALL_OW 325
22115: IFFALSE 22142
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22117: LD_ADDR_VAR 0 2
22121: PUSH
22122: LD_INT 5
22124: PUSH
22125: LD_INT 8
22127: PUSH
22128: LD_INT 9
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: LD_VAR 0 4
22140: ARRAY
22141: ST_TO_ADDR
// end ;
22142: LD_VAR 0 2
22146: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22147: LD_INT 0
22149: PPUSH
22150: PPUSH
22151: PPUSH
// if not mines then
22152: LD_VAR 0 2
22156: NOT
22157: IFFALSE 22161
// exit ;
22159: GO 22305
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22161: LD_ADDR_VAR 0 5
22165: PUSH
22166: LD_INT 81
22168: PUSH
22169: LD_VAR 0 1
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 3
22180: PUSH
22181: LD_INT 21
22183: PUSH
22184: LD_INT 3
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PPUSH
22199: CALL_OW 69
22203: ST_TO_ADDR
// for i in mines do
22204: LD_ADDR_VAR 0 4
22208: PUSH
22209: LD_VAR 0 2
22213: PUSH
22214: FOR_IN
22215: IFFALSE 22303
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22217: LD_VAR 0 4
22221: PUSH
22222: LD_INT 1
22224: ARRAY
22225: PPUSH
22226: LD_VAR 0 4
22230: PUSH
22231: LD_INT 2
22233: ARRAY
22234: PPUSH
22235: CALL_OW 458
22239: NOT
22240: IFFALSE 22244
// continue ;
22242: GO 22214
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22244: LD_VAR 0 4
22248: PUSH
22249: LD_INT 1
22251: ARRAY
22252: PPUSH
22253: LD_VAR 0 4
22257: PUSH
22258: LD_INT 2
22260: ARRAY
22261: PPUSH
22262: CALL_OW 428
22266: PUSH
22267: LD_VAR 0 5
22271: IN
22272: IFFALSE 22301
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22274: LD_VAR 0 4
22278: PUSH
22279: LD_INT 1
22281: ARRAY
22282: PPUSH
22283: LD_VAR 0 4
22287: PUSH
22288: LD_INT 2
22290: ARRAY
22291: PPUSH
22292: LD_VAR 0 1
22296: PPUSH
22297: CALL_OW 456
// end ;
22301: GO 22214
22303: POP
22304: POP
// end ;
22305: LD_VAR 0 3
22309: RET
// export function Count ( array ) ; begin
22310: LD_INT 0
22312: PPUSH
// result := array + 0 ;
22313: LD_ADDR_VAR 0 2
22317: PUSH
22318: LD_VAR 0 1
22322: PUSH
22323: LD_INT 0
22325: PLUS
22326: ST_TO_ADDR
// end ;
22327: LD_VAR 0 2
22331: RET
// export function IsEmpty ( building ) ; begin
22332: LD_INT 0
22334: PPUSH
// if not building then
22335: LD_VAR 0 1
22339: NOT
22340: IFFALSE 22344
// exit ;
22342: GO 22387
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22344: LD_ADDR_VAR 0 2
22348: PUSH
22349: LD_VAR 0 1
22353: PUSH
22354: LD_INT 22
22356: PUSH
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL_OW 255
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 58
22373: PUSH
22374: EMPTY
22375: LIST
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PPUSH
22381: CALL_OW 69
22385: IN
22386: ST_TO_ADDR
// end ;
22387: LD_VAR 0 2
22391: RET
// export function IsNotFull ( building ) ; var places ; begin
22392: LD_INT 0
22394: PPUSH
22395: PPUSH
// if not building then
22396: LD_VAR 0 1
22400: NOT
22401: IFFALSE 22405
// exit ;
22403: GO 22433
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22405: LD_ADDR_VAR 0 2
22409: PUSH
22410: LD_VAR 0 1
22414: PPUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 62
22420: PUSH
22421: EMPTY
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PPUSH
22428: CALL_OW 72
22432: ST_TO_ADDR
// end ;
22433: LD_VAR 0 2
22437: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22438: LD_INT 0
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
// tmp := [ ] ;
22444: LD_ADDR_VAR 0 3
22448: PUSH
22449: EMPTY
22450: ST_TO_ADDR
// list := [ ] ;
22451: LD_ADDR_VAR 0 5
22455: PUSH
22456: EMPTY
22457: ST_TO_ADDR
// for i = 16 to 25 do
22458: LD_ADDR_VAR 0 4
22462: PUSH
22463: DOUBLE
22464: LD_INT 16
22466: DEC
22467: ST_TO_ADDR
22468: LD_INT 25
22470: PUSH
22471: FOR_TO
22472: IFFALSE 22545
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22474: LD_ADDR_VAR 0 3
22478: PUSH
22479: LD_VAR 0 3
22483: PUSH
22484: LD_INT 22
22486: PUSH
22487: LD_VAR 0 1
22491: PPUSH
22492: CALL_OW 255
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 91
22503: PUSH
22504: LD_VAR 0 1
22508: PUSH
22509: LD_INT 6
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_VAR 0 4
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: PPUSH
22537: CALL_OW 69
22541: ADD
22542: ST_TO_ADDR
22543: GO 22471
22545: POP
22546: POP
// for i = 1 to tmp do
22547: LD_ADDR_VAR 0 4
22551: PUSH
22552: DOUBLE
22553: LD_INT 1
22555: DEC
22556: ST_TO_ADDR
22557: LD_VAR 0 3
22561: PUSH
22562: FOR_TO
22563: IFFALSE 22651
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22565: LD_ADDR_VAR 0 5
22569: PUSH
22570: LD_VAR 0 5
22574: PUSH
22575: LD_VAR 0 3
22579: PUSH
22580: LD_VAR 0 4
22584: ARRAY
22585: PPUSH
22586: CALL_OW 266
22590: PUSH
22591: LD_VAR 0 3
22595: PUSH
22596: LD_VAR 0 4
22600: ARRAY
22601: PPUSH
22602: CALL_OW 250
22606: PUSH
22607: LD_VAR 0 3
22611: PUSH
22612: LD_VAR 0 4
22616: ARRAY
22617: PPUSH
22618: CALL_OW 251
22622: PUSH
22623: LD_VAR 0 3
22627: PUSH
22628: LD_VAR 0 4
22632: ARRAY
22633: PPUSH
22634: CALL_OW 254
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: EMPTY
22646: LIST
22647: ADD
22648: ST_TO_ADDR
22649: GO 22562
22651: POP
22652: POP
// result := list ;
22653: LD_ADDR_VAR 0 2
22657: PUSH
22658: LD_VAR 0 5
22662: ST_TO_ADDR
// end ;
22663: LD_VAR 0 2
22667: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22668: LD_INT 0
22670: PPUSH
22671: PPUSH
22672: PPUSH
22673: PPUSH
22674: PPUSH
22675: PPUSH
22676: PPUSH
// if not factory then
22677: LD_VAR 0 1
22681: NOT
22682: IFFALSE 22686
// exit ;
22684: GO 23279
// if control = control_apeman then
22686: LD_VAR 0 4
22690: PUSH
22691: LD_INT 5
22693: EQUAL
22694: IFFALSE 22803
// begin tmp := UnitsInside ( factory ) ;
22696: LD_ADDR_VAR 0 8
22700: PUSH
22701: LD_VAR 0 1
22705: PPUSH
22706: CALL_OW 313
22710: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22711: LD_VAR 0 8
22715: PPUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 12
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PPUSH
22726: CALL_OW 72
22730: NOT
22731: IFFALSE 22741
// control := control_manual ;
22733: LD_ADDR_VAR 0 4
22737: PUSH
22738: LD_INT 1
22740: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22741: LD_ADDR_VAR 0 8
22745: PUSH
22746: LD_VAR 0 1
22750: PPUSH
22751: CALL 22438 0 1
22755: ST_TO_ADDR
// if tmp then
22756: LD_VAR 0 8
22760: IFFALSE 22803
// begin for i in tmp do
22762: LD_ADDR_VAR 0 7
22766: PUSH
22767: LD_VAR 0 8
22771: PUSH
22772: FOR_IN
22773: IFFALSE 22801
// if i [ 1 ] = b_ext_radio then
22775: LD_VAR 0 7
22779: PUSH
22780: LD_INT 1
22782: ARRAY
22783: PUSH
22784: LD_INT 22
22786: EQUAL
22787: IFFALSE 22799
// begin control := control_remote ;
22789: LD_ADDR_VAR 0 4
22793: PUSH
22794: LD_INT 2
22796: ST_TO_ADDR
// break ;
22797: GO 22801
// end ;
22799: GO 22772
22801: POP
22802: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22803: LD_VAR 0 1
22807: PPUSH
22808: LD_VAR 0 2
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_VAR 0 4
22822: PPUSH
22823: LD_VAR 0 5
22827: PPUSH
22828: CALL_OW 448
22832: IFFALSE 22867
// begin result := [ chassis , engine , control , weapon ] ;
22834: LD_ADDR_VAR 0 6
22838: PUSH
22839: LD_VAR 0 2
22843: PUSH
22844: LD_VAR 0 3
22848: PUSH
22849: LD_VAR 0 4
22853: PUSH
22854: LD_VAR 0 5
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: ST_TO_ADDR
// exit ;
22865: GO 23279
// end ; _chassis := AvailableChassisList ( factory ) ;
22867: LD_ADDR_VAR 0 9
22871: PUSH
22872: LD_VAR 0 1
22876: PPUSH
22877: CALL_OW 475
22881: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22882: LD_ADDR_VAR 0 11
22886: PUSH
22887: LD_VAR 0 1
22891: PPUSH
22892: CALL_OW 476
22896: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22897: LD_ADDR_VAR 0 12
22901: PUSH
22902: LD_VAR 0 1
22906: PPUSH
22907: CALL_OW 477
22911: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22912: LD_ADDR_VAR 0 10
22916: PUSH
22917: LD_VAR 0 1
22921: PPUSH
22922: CALL_OW 478
22926: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22927: LD_VAR 0 9
22931: NOT
22932: PUSH
22933: LD_VAR 0 11
22937: NOT
22938: OR
22939: PUSH
22940: LD_VAR 0 12
22944: NOT
22945: OR
22946: PUSH
22947: LD_VAR 0 10
22951: NOT
22952: OR
22953: IFFALSE 22988
// begin result := [ chassis , engine , control , weapon ] ;
22955: LD_ADDR_VAR 0 6
22959: PUSH
22960: LD_VAR 0 2
22964: PUSH
22965: LD_VAR 0 3
22969: PUSH
22970: LD_VAR 0 4
22974: PUSH
22975: LD_VAR 0 5
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: ST_TO_ADDR
// exit ;
22986: GO 23279
// end ; if not chassis in _chassis then
22988: LD_VAR 0 2
22992: PUSH
22993: LD_VAR 0 9
22997: IN
22998: NOT
22999: IFFALSE 23025
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23001: LD_ADDR_VAR 0 2
23005: PUSH
23006: LD_VAR 0 9
23010: PUSH
23011: LD_INT 1
23013: PPUSH
23014: LD_VAR 0 9
23018: PPUSH
23019: CALL_OW 12
23023: ARRAY
23024: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23025: LD_VAR 0 2
23029: PPUSH
23030: LD_VAR 0 3
23034: PPUSH
23035: CALL 23284 0 2
23039: NOT
23040: IFFALSE 23099
// repeat engine := _engine [ 1 ] ;
23042: LD_ADDR_VAR 0 3
23046: PUSH
23047: LD_VAR 0 11
23051: PUSH
23052: LD_INT 1
23054: ARRAY
23055: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23056: LD_ADDR_VAR 0 11
23060: PUSH
23061: LD_VAR 0 11
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: CALL_OW 3
23073: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23074: LD_VAR 0 2
23078: PPUSH
23079: LD_VAR 0 3
23083: PPUSH
23084: CALL 23284 0 2
23088: PUSH
23089: LD_VAR 0 11
23093: PUSH
23094: EMPTY
23095: EQUAL
23096: OR
23097: IFFALSE 23042
// if not control in _control then
23099: LD_VAR 0 4
23103: PUSH
23104: LD_VAR 0 12
23108: IN
23109: NOT
23110: IFFALSE 23136
// control := _control [ rand ( 1 , _control ) ] ;
23112: LD_ADDR_VAR 0 4
23116: PUSH
23117: LD_VAR 0 12
23121: PUSH
23122: LD_INT 1
23124: PPUSH
23125: LD_VAR 0 12
23129: PPUSH
23130: CALL_OW 12
23134: ARRAY
23135: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23136: LD_VAR 0 2
23140: PPUSH
23141: LD_VAR 0 5
23145: PPUSH
23146: CALL 23504 0 2
23150: NOT
23151: IFFALSE 23210
// repeat weapon := _weapon [ 1 ] ;
23153: LD_ADDR_VAR 0 5
23157: PUSH
23158: LD_VAR 0 10
23162: PUSH
23163: LD_INT 1
23165: ARRAY
23166: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23167: LD_ADDR_VAR 0 10
23171: PUSH
23172: LD_VAR 0 10
23176: PPUSH
23177: LD_INT 1
23179: PPUSH
23180: CALL_OW 3
23184: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23185: LD_VAR 0 2
23189: PPUSH
23190: LD_VAR 0 5
23194: PPUSH
23195: CALL 23504 0 2
23199: PUSH
23200: LD_VAR 0 10
23204: PUSH
23205: EMPTY
23206: EQUAL
23207: OR
23208: IFFALSE 23153
// result := [ ] ;
23210: LD_ADDR_VAR 0 6
23214: PUSH
23215: EMPTY
23216: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23217: LD_VAR 0 1
23221: PPUSH
23222: LD_VAR 0 2
23226: PPUSH
23227: LD_VAR 0 3
23231: PPUSH
23232: LD_VAR 0 4
23236: PPUSH
23237: LD_VAR 0 5
23241: PPUSH
23242: CALL_OW 448
23246: IFFALSE 23279
// result := [ chassis , engine , control , weapon ] ;
23248: LD_ADDR_VAR 0 6
23252: PUSH
23253: LD_VAR 0 2
23257: PUSH
23258: LD_VAR 0 3
23262: PUSH
23263: LD_VAR 0 4
23267: PUSH
23268: LD_VAR 0 5
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: ST_TO_ADDR
// end ;
23279: LD_VAR 0 6
23283: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23284: LD_INT 0
23286: PPUSH
// if not chassis or not engine then
23287: LD_VAR 0 1
23291: NOT
23292: PUSH
23293: LD_VAR 0 2
23297: NOT
23298: OR
23299: IFFALSE 23303
// exit ;
23301: GO 23499
// case engine of engine_solar :
23303: LD_VAR 0 2
23307: PUSH
23308: LD_INT 2
23310: DOUBLE
23311: EQUAL
23312: IFTRUE 23316
23314: GO 23354
23316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23317: LD_ADDR_VAR 0 3
23321: PUSH
23322: LD_INT 11
23324: PUSH
23325: LD_INT 12
23327: PUSH
23328: LD_INT 13
23330: PUSH
23331: LD_INT 14
23333: PUSH
23334: LD_INT 1
23336: PUSH
23337: LD_INT 2
23339: PUSH
23340: LD_INT 3
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: ST_TO_ADDR
23352: GO 23483
23354: LD_INT 1
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23424
23362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23363: LD_ADDR_VAR 0 3
23367: PUSH
23368: LD_INT 11
23370: PUSH
23371: LD_INT 12
23373: PUSH
23374: LD_INT 13
23376: PUSH
23377: LD_INT 14
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 3
23388: PUSH
23389: LD_INT 4
23391: PUSH
23392: LD_INT 5
23394: PUSH
23395: LD_INT 21
23397: PUSH
23398: LD_INT 23
23400: PUSH
23401: LD_INT 22
23403: PUSH
23404: LD_INT 24
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: ST_TO_ADDR
23422: GO 23483
23424: LD_INT 3
23426: DOUBLE
23427: EQUAL
23428: IFTRUE 23432
23430: GO 23482
23432: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23433: LD_ADDR_VAR 0 3
23437: PUSH
23438: LD_INT 13
23440: PUSH
23441: LD_INT 14
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: LD_INT 4
23452: PUSH
23453: LD_INT 5
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: ST_TO_ADDR
23480: GO 23483
23482: POP
// result := ( chassis in result ) ;
23483: LD_ADDR_VAR 0 3
23487: PUSH
23488: LD_VAR 0 1
23492: PUSH
23493: LD_VAR 0 3
23497: IN
23498: ST_TO_ADDR
// end ;
23499: LD_VAR 0 3
23503: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23504: LD_INT 0
23506: PPUSH
// if not chassis or not weapon then
23507: LD_VAR 0 1
23511: NOT
23512: PUSH
23513: LD_VAR 0 2
23517: NOT
23518: OR
23519: IFFALSE 23523
// exit ;
23521: GO 24583
// case weapon of us_machine_gun :
23523: LD_VAR 0 2
23527: PUSH
23528: LD_INT 2
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23536
23534: GO 23566
23536: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23537: LD_ADDR_VAR 0 3
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: LD_INT 4
23553: PUSH
23554: LD_INT 5
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: ST_TO_ADDR
23564: GO 24567
23566: LD_INT 3
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23604
23574: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23575: LD_ADDR_VAR 0 3
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: LD_INT 4
23591: PUSH
23592: LD_INT 5
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: ST_TO_ADDR
23602: GO 24567
23604: LD_INT 11
23606: DOUBLE
23607: EQUAL
23608: IFTRUE 23612
23610: GO 23642
23612: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23613: LD_ADDR_VAR 0 3
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: LD_INT 3
23626: PUSH
23627: LD_INT 4
23629: PUSH
23630: LD_INT 5
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: ST_TO_ADDR
23640: GO 24567
23642: LD_INT 4
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23650
23648: GO 23676
23650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23651: LD_ADDR_VAR 0 3
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 3
23661: PUSH
23662: LD_INT 4
23664: PUSH
23665: LD_INT 5
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: ST_TO_ADDR
23674: GO 24567
23676: LD_INT 5
23678: DOUBLE
23679: EQUAL
23680: IFTRUE 23684
23682: GO 23710
23684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23685: LD_ADDR_VAR 0 3
23689: PUSH
23690: LD_INT 2
23692: PUSH
23693: LD_INT 3
23695: PUSH
23696: LD_INT 4
23698: PUSH
23699: LD_INT 5
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: ST_TO_ADDR
23708: GO 24567
23710: LD_INT 9
23712: DOUBLE
23713: EQUAL
23714: IFTRUE 23718
23716: GO 23744
23718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23719: LD_ADDR_VAR 0 3
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: LD_INT 3
23729: PUSH
23730: LD_INT 4
23732: PUSH
23733: LD_INT 5
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: ST_TO_ADDR
23742: GO 24567
23744: LD_INT 7
23746: DOUBLE
23747: EQUAL
23748: IFTRUE 23752
23750: GO 23778
23752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23753: LD_ADDR_VAR 0 3
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: LD_INT 3
23763: PUSH
23764: LD_INT 4
23766: PUSH
23767: LD_INT 5
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: ST_TO_ADDR
23776: GO 24567
23778: LD_INT 12
23780: DOUBLE
23781: EQUAL
23782: IFTRUE 23786
23784: GO 23812
23786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23787: LD_ADDR_VAR 0 3
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: LD_INT 3
23797: PUSH
23798: LD_INT 4
23800: PUSH
23801: LD_INT 5
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: ST_TO_ADDR
23810: GO 24567
23812: LD_INT 13
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23846
23820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23821: LD_ADDR_VAR 0 3
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: LD_INT 3
23831: PUSH
23832: LD_INT 4
23834: PUSH
23835: LD_INT 5
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: ST_TO_ADDR
23844: GO 24567
23846: LD_INT 14
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23872
23854: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_INT 4
23862: PUSH
23863: LD_INT 5
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: ST_TO_ADDR
23870: GO 24567
23872: LD_INT 6
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23898
23880: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23881: LD_ADDR_VAR 0 3
23885: PUSH
23886: LD_INT 4
23888: PUSH
23889: LD_INT 5
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: ST_TO_ADDR
23896: GO 24567
23898: LD_INT 10
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 23924
23906: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23907: LD_ADDR_VAR 0 3
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: LD_INT 5
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: ST_TO_ADDR
23922: GO 24567
23924: LD_INT 22
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 23958
23932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23933: LD_ADDR_VAR 0 3
23937: PUSH
23938: LD_INT 11
23940: PUSH
23941: LD_INT 12
23943: PUSH
23944: LD_INT 13
23946: PUSH
23947: LD_INT 14
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: ST_TO_ADDR
23956: GO 24567
23958: LD_INT 23
23960: DOUBLE
23961: EQUAL
23962: IFTRUE 23966
23964: GO 23992
23966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: LD_INT 11
23974: PUSH
23975: LD_INT 12
23977: PUSH
23978: LD_INT 13
23980: PUSH
23981: LD_INT 14
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: ST_TO_ADDR
23990: GO 24567
23992: LD_INT 24
23994: DOUBLE
23995: EQUAL
23996: IFTRUE 24000
23998: GO 24026
24000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_INT 11
24008: PUSH
24009: LD_INT 12
24011: PUSH
24012: LD_INT 13
24014: PUSH
24015: LD_INT 14
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: ST_TO_ADDR
24024: GO 24567
24026: LD_INT 30
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24034
24032: GO 24060
24034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24035: LD_ADDR_VAR 0 3
24039: PUSH
24040: LD_INT 11
24042: PUSH
24043: LD_INT 12
24045: PUSH
24046: LD_INT 13
24048: PUSH
24049: LD_INT 14
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: ST_TO_ADDR
24058: GO 24567
24060: LD_INT 25
24062: DOUBLE
24063: EQUAL
24064: IFTRUE 24068
24066: GO 24086
24068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24069: LD_ADDR_VAR 0 3
24073: PUSH
24074: LD_INT 13
24076: PUSH
24077: LD_INT 14
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: ST_TO_ADDR
24084: GO 24567
24086: LD_INT 27
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24112
24094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24095: LD_ADDR_VAR 0 3
24099: PUSH
24100: LD_INT 13
24102: PUSH
24103: LD_INT 14
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: ST_TO_ADDR
24110: GO 24567
24112: LD_INT 92
24114: DOUBLE
24115: EQUAL
24116: IFTRUE 24120
24118: GO 24146
24120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 11
24128: PUSH
24129: LD_INT 12
24131: PUSH
24132: LD_INT 13
24134: PUSH
24135: LD_INT 14
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: ST_TO_ADDR
24144: GO 24567
24146: LD_INT 28
24148: DOUBLE
24149: EQUAL
24150: IFTRUE 24154
24152: GO 24172
24154: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24155: LD_ADDR_VAR 0 3
24159: PUSH
24160: LD_INT 13
24162: PUSH
24163: LD_INT 14
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: ST_TO_ADDR
24170: GO 24567
24172: LD_INT 29
24174: DOUBLE
24175: EQUAL
24176: IFTRUE 24180
24178: GO 24198
24180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24181: LD_ADDR_VAR 0 3
24185: PUSH
24186: LD_INT 13
24188: PUSH
24189: LD_INT 14
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: ST_TO_ADDR
24196: GO 24567
24198: LD_INT 31
24200: DOUBLE
24201: EQUAL
24202: IFTRUE 24206
24204: GO 24224
24206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24207: LD_ADDR_VAR 0 3
24211: PUSH
24212: LD_INT 13
24214: PUSH
24215: LD_INT 14
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: ST_TO_ADDR
24222: GO 24567
24224: LD_INT 26
24226: DOUBLE
24227: EQUAL
24228: IFTRUE 24232
24230: GO 24250
24232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24233: LD_ADDR_VAR 0 3
24237: PUSH
24238: LD_INT 13
24240: PUSH
24241: LD_INT 14
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: ST_TO_ADDR
24248: GO 24567
24250: LD_INT 42
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24284
24258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24259: LD_ADDR_VAR 0 3
24263: PUSH
24264: LD_INT 21
24266: PUSH
24267: LD_INT 22
24269: PUSH
24270: LD_INT 23
24272: PUSH
24273: LD_INT 24
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: ST_TO_ADDR
24282: GO 24567
24284: LD_INT 43
24286: DOUBLE
24287: EQUAL
24288: IFTRUE 24292
24290: GO 24318
24292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24293: LD_ADDR_VAR 0 3
24297: PUSH
24298: LD_INT 21
24300: PUSH
24301: LD_INT 22
24303: PUSH
24304: LD_INT 23
24306: PUSH
24307: LD_INT 24
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: ST_TO_ADDR
24316: GO 24567
24318: LD_INT 44
24320: DOUBLE
24321: EQUAL
24322: IFTRUE 24326
24324: GO 24352
24326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24327: LD_ADDR_VAR 0 3
24331: PUSH
24332: LD_INT 21
24334: PUSH
24335: LD_INT 22
24337: PUSH
24338: LD_INT 23
24340: PUSH
24341: LD_INT 24
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: ST_TO_ADDR
24350: GO 24567
24352: LD_INT 45
24354: DOUBLE
24355: EQUAL
24356: IFTRUE 24360
24358: GO 24386
24360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24361: LD_ADDR_VAR 0 3
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 22
24371: PUSH
24372: LD_INT 23
24374: PUSH
24375: LD_INT 24
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: ST_TO_ADDR
24384: GO 24567
24386: LD_INT 49
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24394
24392: GO 24420
24394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24395: LD_ADDR_VAR 0 3
24399: PUSH
24400: LD_INT 21
24402: PUSH
24403: LD_INT 22
24405: PUSH
24406: LD_INT 23
24408: PUSH
24409: LD_INT 24
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: ST_TO_ADDR
24418: GO 24567
24420: LD_INT 51
24422: DOUBLE
24423: EQUAL
24424: IFTRUE 24428
24426: GO 24454
24428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24429: LD_ADDR_VAR 0 3
24433: PUSH
24434: LD_INT 21
24436: PUSH
24437: LD_INT 22
24439: PUSH
24440: LD_INT 23
24442: PUSH
24443: LD_INT 24
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: ST_TO_ADDR
24452: GO 24567
24454: LD_INT 52
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24462
24460: GO 24488
24462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24463: LD_ADDR_VAR 0 3
24467: PUSH
24468: LD_INT 21
24470: PUSH
24471: LD_INT 22
24473: PUSH
24474: LD_INT 23
24476: PUSH
24477: LD_INT 24
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: ST_TO_ADDR
24486: GO 24567
24488: LD_INT 53
24490: DOUBLE
24491: EQUAL
24492: IFTRUE 24496
24494: GO 24514
24496: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24497: LD_ADDR_VAR 0 3
24501: PUSH
24502: LD_INT 23
24504: PUSH
24505: LD_INT 24
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: ST_TO_ADDR
24512: GO 24567
24514: LD_INT 46
24516: DOUBLE
24517: EQUAL
24518: IFTRUE 24522
24520: GO 24540
24522: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24523: LD_ADDR_VAR 0 3
24527: PUSH
24528: LD_INT 23
24530: PUSH
24531: LD_INT 24
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: ST_TO_ADDR
24538: GO 24567
24540: LD_INT 47
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24566
24548: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24549: LD_ADDR_VAR 0 3
24553: PUSH
24554: LD_INT 23
24556: PUSH
24557: LD_INT 24
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: ST_TO_ADDR
24564: GO 24567
24566: POP
// result := ( chassis in result ) ;
24567: LD_ADDR_VAR 0 3
24571: PUSH
24572: LD_VAR 0 1
24576: PUSH
24577: LD_VAR 0 3
24581: IN
24582: ST_TO_ADDR
// end ;
24583: LD_VAR 0 3
24587: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
// result := array ;
24597: LD_ADDR_VAR 0 5
24601: PUSH
24602: LD_VAR 0 1
24606: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24607: LD_VAR 0 1
24611: NOT
24612: PUSH
24613: LD_VAR 0 2
24617: NOT
24618: OR
24619: PUSH
24620: LD_VAR 0 3
24624: NOT
24625: OR
24626: PUSH
24627: LD_VAR 0 2
24631: PUSH
24632: LD_VAR 0 1
24636: GREATER
24637: OR
24638: PUSH
24639: LD_VAR 0 3
24643: PUSH
24644: LD_VAR 0 1
24648: GREATER
24649: OR
24650: IFFALSE 24654
// exit ;
24652: GO 24950
// if direction then
24654: LD_VAR 0 4
24658: IFFALSE 24722
// begin d := 1 ;
24660: LD_ADDR_VAR 0 9
24664: PUSH
24665: LD_INT 1
24667: ST_TO_ADDR
// if i_from > i_to then
24668: LD_VAR 0 2
24672: PUSH
24673: LD_VAR 0 3
24677: GREATER
24678: IFFALSE 24704
// length := ( array - i_from ) + i_to else
24680: LD_ADDR_VAR 0 11
24684: PUSH
24685: LD_VAR 0 1
24689: PUSH
24690: LD_VAR 0 2
24694: MINUS
24695: PUSH
24696: LD_VAR 0 3
24700: PLUS
24701: ST_TO_ADDR
24702: GO 24720
// length := i_to - i_from ;
24704: LD_ADDR_VAR 0 11
24708: PUSH
24709: LD_VAR 0 3
24713: PUSH
24714: LD_VAR 0 2
24718: MINUS
24719: ST_TO_ADDR
// end else
24720: GO 24783
// begin d := - 1 ;
24722: LD_ADDR_VAR 0 9
24726: PUSH
24727: LD_INT 1
24729: NEG
24730: ST_TO_ADDR
// if i_from > i_to then
24731: LD_VAR 0 2
24735: PUSH
24736: LD_VAR 0 3
24740: GREATER
24741: IFFALSE 24761
// length := i_from - i_to else
24743: LD_ADDR_VAR 0 11
24747: PUSH
24748: LD_VAR 0 2
24752: PUSH
24753: LD_VAR 0 3
24757: MINUS
24758: ST_TO_ADDR
24759: GO 24783
// length := ( array - i_to ) + i_from ;
24761: LD_ADDR_VAR 0 11
24765: PUSH
24766: LD_VAR 0 1
24770: PUSH
24771: LD_VAR 0 3
24775: MINUS
24776: PUSH
24777: LD_VAR 0 2
24781: PLUS
24782: ST_TO_ADDR
// end ; if not length then
24783: LD_VAR 0 11
24787: NOT
24788: IFFALSE 24792
// exit ;
24790: GO 24950
// tmp := array ;
24792: LD_ADDR_VAR 0 10
24796: PUSH
24797: LD_VAR 0 1
24801: ST_TO_ADDR
// for i = 1 to length do
24802: LD_ADDR_VAR 0 6
24806: PUSH
24807: DOUBLE
24808: LD_INT 1
24810: DEC
24811: ST_TO_ADDR
24812: LD_VAR 0 11
24816: PUSH
24817: FOR_TO
24818: IFFALSE 24938
// begin for j = 1 to array do
24820: LD_ADDR_VAR 0 7
24824: PUSH
24825: DOUBLE
24826: LD_INT 1
24828: DEC
24829: ST_TO_ADDR
24830: LD_VAR 0 1
24834: PUSH
24835: FOR_TO
24836: IFFALSE 24924
// begin k := j + d ;
24838: LD_ADDR_VAR 0 8
24842: PUSH
24843: LD_VAR 0 7
24847: PUSH
24848: LD_VAR 0 9
24852: PLUS
24853: ST_TO_ADDR
// if k > array then
24854: LD_VAR 0 8
24858: PUSH
24859: LD_VAR 0 1
24863: GREATER
24864: IFFALSE 24874
// k := 1 ;
24866: LD_ADDR_VAR 0 8
24870: PUSH
24871: LD_INT 1
24873: ST_TO_ADDR
// if not k then
24874: LD_VAR 0 8
24878: NOT
24879: IFFALSE 24891
// k := array ;
24881: LD_ADDR_VAR 0 8
24885: PUSH
24886: LD_VAR 0 1
24890: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24891: LD_ADDR_VAR 0 10
24895: PUSH
24896: LD_VAR 0 10
24900: PPUSH
24901: LD_VAR 0 8
24905: PPUSH
24906: LD_VAR 0 1
24910: PUSH
24911: LD_VAR 0 7
24915: ARRAY
24916: PPUSH
24917: CALL_OW 1
24921: ST_TO_ADDR
// end ;
24922: GO 24835
24924: POP
24925: POP
// array := tmp ;
24926: LD_ADDR_VAR 0 1
24930: PUSH
24931: LD_VAR 0 10
24935: ST_TO_ADDR
// end ;
24936: GO 24817
24938: POP
24939: POP
// result := array ;
24940: LD_ADDR_VAR 0 5
24944: PUSH
24945: LD_VAR 0 1
24949: ST_TO_ADDR
// end ;
24950: LD_VAR 0 5
24954: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24955: LD_INT 0
24957: PPUSH
24958: PPUSH
// result := 0 ;
24959: LD_ADDR_VAR 0 3
24963: PUSH
24964: LD_INT 0
24966: ST_TO_ADDR
// if not array or not value in array then
24967: LD_VAR 0 1
24971: NOT
24972: PUSH
24973: LD_VAR 0 2
24977: PUSH
24978: LD_VAR 0 1
24982: IN
24983: NOT
24984: OR
24985: IFFALSE 24989
// exit ;
24987: GO 25043
// for i = 1 to array do
24989: LD_ADDR_VAR 0 4
24993: PUSH
24994: DOUBLE
24995: LD_INT 1
24997: DEC
24998: ST_TO_ADDR
24999: LD_VAR 0 1
25003: PUSH
25004: FOR_TO
25005: IFFALSE 25041
// if value = array [ i ] then
25007: LD_VAR 0 2
25011: PUSH
25012: LD_VAR 0 1
25016: PUSH
25017: LD_VAR 0 4
25021: ARRAY
25022: EQUAL
25023: IFFALSE 25039
// begin result := i ;
25025: LD_ADDR_VAR 0 3
25029: PUSH
25030: LD_VAR 0 4
25034: ST_TO_ADDR
// exit ;
25035: POP
25036: POP
25037: GO 25043
// end ;
25039: GO 25004
25041: POP
25042: POP
// end ;
25043: LD_VAR 0 3
25047: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25048: LD_INT 0
25050: PPUSH
// vc_chassis := chassis ;
25051: LD_ADDR_OWVAR 37
25055: PUSH
25056: LD_VAR 0 1
25060: ST_TO_ADDR
// vc_engine := engine ;
25061: LD_ADDR_OWVAR 39
25065: PUSH
25066: LD_VAR 0 2
25070: ST_TO_ADDR
// vc_control := control ;
25071: LD_ADDR_OWVAR 38
25075: PUSH
25076: LD_VAR 0 3
25080: ST_TO_ADDR
// vc_weapon := weapon ;
25081: LD_ADDR_OWVAR 40
25085: PUSH
25086: LD_VAR 0 4
25090: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25091: LD_ADDR_OWVAR 41
25095: PUSH
25096: LD_VAR 0 5
25100: ST_TO_ADDR
// end ;
25101: LD_VAR 0 6
25105: RET
// export function WantPlant ( unit ) ; var task ; begin
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
// result := false ;
25110: LD_ADDR_VAR 0 2
25114: PUSH
25115: LD_INT 0
25117: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: CALL_OW 437
25132: ST_TO_ADDR
// if task then
25133: LD_VAR 0 3
25137: IFFALSE 25165
// if task [ 1 ] [ 1 ] = p then
25139: LD_VAR 0 3
25143: PUSH
25144: LD_INT 1
25146: ARRAY
25147: PUSH
25148: LD_INT 1
25150: ARRAY
25151: PUSH
25152: LD_STRING p
25154: EQUAL
25155: IFFALSE 25165
// result := true ;
25157: LD_ADDR_VAR 0 2
25161: PUSH
25162: LD_INT 1
25164: ST_TO_ADDR
// end ;
25165: LD_VAR 0 2
25169: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25170: LD_INT 0
25172: PPUSH
25173: PPUSH
25174: PPUSH
25175: PPUSH
// if pos < 1 then
25176: LD_VAR 0 2
25180: PUSH
25181: LD_INT 1
25183: LESS
25184: IFFALSE 25188
// exit ;
25186: GO 25491
// if pos = 1 then
25188: LD_VAR 0 2
25192: PUSH
25193: LD_INT 1
25195: EQUAL
25196: IFFALSE 25229
// result := Replace ( arr , pos [ 1 ] , value ) else
25198: LD_ADDR_VAR 0 4
25202: PUSH
25203: LD_VAR 0 1
25207: PPUSH
25208: LD_VAR 0 2
25212: PUSH
25213: LD_INT 1
25215: ARRAY
25216: PPUSH
25217: LD_VAR 0 3
25221: PPUSH
25222: CALL_OW 1
25226: ST_TO_ADDR
25227: GO 25491
// begin tmp := arr ;
25229: LD_ADDR_VAR 0 6
25233: PUSH
25234: LD_VAR 0 1
25238: ST_TO_ADDR
// s_arr := [ tmp ] ;
25239: LD_ADDR_VAR 0 7
25243: PUSH
25244: LD_VAR 0 6
25248: PUSH
25249: EMPTY
25250: LIST
25251: ST_TO_ADDR
// for i = 1 to pos - 1 do
25252: LD_ADDR_VAR 0 5
25256: PUSH
25257: DOUBLE
25258: LD_INT 1
25260: DEC
25261: ST_TO_ADDR
25262: LD_VAR 0 2
25266: PUSH
25267: LD_INT 1
25269: MINUS
25270: PUSH
25271: FOR_TO
25272: IFFALSE 25317
// begin tmp := tmp [ pos [ i ] ] ;
25274: LD_ADDR_VAR 0 6
25278: PUSH
25279: LD_VAR 0 6
25283: PUSH
25284: LD_VAR 0 2
25288: PUSH
25289: LD_VAR 0 5
25293: ARRAY
25294: ARRAY
25295: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25296: LD_ADDR_VAR 0 7
25300: PUSH
25301: LD_VAR 0 7
25305: PUSH
25306: LD_VAR 0 6
25310: PUSH
25311: EMPTY
25312: LIST
25313: ADD
25314: ST_TO_ADDR
// end ;
25315: GO 25271
25317: POP
25318: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25319: LD_ADDR_VAR 0 6
25323: PUSH
25324: LD_VAR 0 6
25328: PPUSH
25329: LD_VAR 0 2
25333: PUSH
25334: LD_VAR 0 2
25338: ARRAY
25339: PPUSH
25340: LD_VAR 0 3
25344: PPUSH
25345: CALL_OW 1
25349: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25350: LD_ADDR_VAR 0 7
25354: PUSH
25355: LD_VAR 0 7
25359: PPUSH
25360: LD_VAR 0 7
25364: PPUSH
25365: LD_VAR 0 6
25369: PPUSH
25370: CALL_OW 1
25374: ST_TO_ADDR
// for i = s_arr downto 2 do
25375: LD_ADDR_VAR 0 5
25379: PUSH
25380: DOUBLE
25381: LD_VAR 0 7
25385: INC
25386: ST_TO_ADDR
25387: LD_INT 2
25389: PUSH
25390: FOR_DOWNTO
25391: IFFALSE 25475
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25393: LD_ADDR_VAR 0 6
25397: PUSH
25398: LD_VAR 0 7
25402: PUSH
25403: LD_VAR 0 5
25407: PUSH
25408: LD_INT 1
25410: MINUS
25411: ARRAY
25412: PPUSH
25413: LD_VAR 0 2
25417: PUSH
25418: LD_VAR 0 5
25422: PUSH
25423: LD_INT 1
25425: MINUS
25426: ARRAY
25427: PPUSH
25428: LD_VAR 0 7
25432: PUSH
25433: LD_VAR 0 5
25437: ARRAY
25438: PPUSH
25439: CALL_OW 1
25443: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25444: LD_ADDR_VAR 0 7
25448: PUSH
25449: LD_VAR 0 7
25453: PPUSH
25454: LD_VAR 0 5
25458: PUSH
25459: LD_INT 1
25461: MINUS
25462: PPUSH
25463: LD_VAR 0 6
25467: PPUSH
25468: CALL_OW 1
25472: ST_TO_ADDR
// end ;
25473: GO 25390
25475: POP
25476: POP
// result := s_arr [ 1 ] ;
25477: LD_ADDR_VAR 0 4
25481: PUSH
25482: LD_VAR 0 7
25486: PUSH
25487: LD_INT 1
25489: ARRAY
25490: ST_TO_ADDR
// end ; end ;
25491: LD_VAR 0 4
25495: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25496: LD_INT 0
25498: PPUSH
25499: PPUSH
// if not list then
25500: LD_VAR 0 1
25504: NOT
25505: IFFALSE 25509
// exit ;
25507: GO 25600
// i := list [ pos1 ] ;
25509: LD_ADDR_VAR 0 5
25513: PUSH
25514: LD_VAR 0 1
25518: PUSH
25519: LD_VAR 0 2
25523: ARRAY
25524: ST_TO_ADDR
// if not i then
25525: LD_VAR 0 5
25529: NOT
25530: IFFALSE 25534
// exit ;
25532: GO 25600
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25534: LD_ADDR_VAR 0 1
25538: PUSH
25539: LD_VAR 0 1
25543: PPUSH
25544: LD_VAR 0 2
25548: PPUSH
25549: LD_VAR 0 1
25553: PUSH
25554: LD_VAR 0 3
25558: ARRAY
25559: PPUSH
25560: CALL_OW 1
25564: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25565: LD_ADDR_VAR 0 1
25569: PUSH
25570: LD_VAR 0 1
25574: PPUSH
25575: LD_VAR 0 3
25579: PPUSH
25580: LD_VAR 0 5
25584: PPUSH
25585: CALL_OW 1
25589: ST_TO_ADDR
// result := list ;
25590: LD_ADDR_VAR 0 4
25594: PUSH
25595: LD_VAR 0 1
25599: ST_TO_ADDR
// end ;
25600: LD_VAR 0 4
25604: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25605: LD_INT 0
25607: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25608: LD_ADDR_VAR 0 5
25612: PUSH
25613: LD_VAR 0 1
25617: PPUSH
25618: CALL_OW 250
25622: PPUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 251
25632: PPUSH
25633: LD_VAR 0 2
25637: PPUSH
25638: LD_VAR 0 3
25642: PPUSH
25643: LD_VAR 0 4
25647: PPUSH
25648: CALL 26026 0 5
25652: ST_TO_ADDR
// end ;
25653: LD_VAR 0 5
25657: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
25658: LD_INT 0
25660: PPUSH
25661: PPUSH
25662: PPUSH
25663: PPUSH
// if not list or not unit then
25664: LD_VAR 0 2
25668: NOT
25669: PUSH
25670: LD_VAR 0 1
25674: NOT
25675: OR
25676: IFFALSE 25680
// exit ;
25678: GO 26021
// result := [ ] ;
25680: LD_ADDR_VAR 0 5
25684: PUSH
25685: EMPTY
25686: ST_TO_ADDR
// for i in list do
25687: LD_ADDR_VAR 0 6
25691: PUSH
25692: LD_VAR 0 2
25696: PUSH
25697: FOR_IN
25698: IFFALSE 25916
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
25700: LD_ADDR_VAR 0 8
25704: PUSH
25705: LD_VAR 0 1
25709: PPUSH
25710: LD_VAR 0 6
25714: PUSH
25715: LD_INT 1
25717: ARRAY
25718: PPUSH
25719: LD_VAR 0 6
25723: PUSH
25724: LD_INT 2
25726: ARRAY
25727: PPUSH
25728: CALL_OW 297
25732: ST_TO_ADDR
// if not Count ( result ) then
25733: LD_VAR 0 5
25737: PPUSH
25738: CALL 22310 0 1
25742: NOT
25743: IFFALSE 25776
// begin result := Join ( result , [ i , tmp ] ) ;
25745: LD_ADDR_VAR 0 5
25749: PUSH
25750: LD_VAR 0 5
25754: PPUSH
25755: LD_VAR 0 6
25759: PUSH
25760: LD_VAR 0 8
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PPUSH
25769: CALL 57910 0 2
25773: ST_TO_ADDR
// continue ;
25774: GO 25697
// end ; if result [ result ] [ 2 ] <= tmp then
25776: LD_VAR 0 5
25780: PUSH
25781: LD_VAR 0 5
25785: ARRAY
25786: PUSH
25787: LD_INT 2
25789: ARRAY
25790: PUSH
25791: LD_VAR 0 8
25795: LESSEQUAL
25796: IFFALSE 25829
// result := Join ( result , [ i , tmp ] ) else
25798: LD_ADDR_VAR 0 5
25802: PUSH
25803: LD_VAR 0 5
25807: PPUSH
25808: LD_VAR 0 6
25812: PUSH
25813: LD_VAR 0 8
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PPUSH
25822: CALL 57910 0 2
25826: ST_TO_ADDR
25827: GO 25914
// begin for j := 1 to Count ( result ) do
25829: LD_ADDR_VAR 0 7
25833: PUSH
25834: DOUBLE
25835: LD_INT 1
25837: DEC
25838: ST_TO_ADDR
25839: LD_VAR 0 5
25843: PPUSH
25844: CALL 22310 0 1
25848: PUSH
25849: FOR_TO
25850: IFFALSE 25912
// begin if tmp < result [ j ] [ 2 ] then
25852: LD_VAR 0 8
25856: PUSH
25857: LD_VAR 0 5
25861: PUSH
25862: LD_VAR 0 7
25866: ARRAY
25867: PUSH
25868: LD_INT 2
25870: ARRAY
25871: LESS
25872: IFFALSE 25910
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25874: LD_ADDR_VAR 0 5
25878: PUSH
25879: LD_VAR 0 5
25883: PPUSH
25884: LD_VAR 0 7
25888: PPUSH
25889: LD_VAR 0 6
25893: PUSH
25894: LD_VAR 0 8
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PPUSH
25903: CALL_OW 2
25907: ST_TO_ADDR
// break ;
25908: GO 25912
// end ; end ;
25910: GO 25849
25912: POP
25913: POP
// end ; end ;
25914: GO 25697
25916: POP
25917: POP
// if result and not asc then
25918: LD_VAR 0 5
25922: PUSH
25923: LD_VAR 0 3
25927: NOT
25928: AND
25929: IFFALSE 25946
// result := ReverseArray ( result ) ;
25931: LD_ADDR_VAR 0 5
25935: PUSH
25936: LD_VAR 0 5
25940: PPUSH
25941: CALL 53186 0 1
25945: ST_TO_ADDR
// tmp := [ ] ;
25946: LD_ADDR_VAR 0 8
25950: PUSH
25951: EMPTY
25952: ST_TO_ADDR
// if mode then
25953: LD_VAR 0 4
25957: IFFALSE 26021
// begin for i := 1 to result do
25959: LD_ADDR_VAR 0 6
25963: PUSH
25964: DOUBLE
25965: LD_INT 1
25967: DEC
25968: ST_TO_ADDR
25969: LD_VAR 0 5
25973: PUSH
25974: FOR_TO
25975: IFFALSE 26009
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
25977: LD_ADDR_VAR 0 8
25981: PUSH
25982: LD_VAR 0 8
25986: PPUSH
25987: LD_VAR 0 5
25991: PUSH
25992: LD_VAR 0 6
25996: ARRAY
25997: PUSH
25998: LD_INT 1
26000: ARRAY
26001: PPUSH
26002: CALL 57910 0 2
26006: ST_TO_ADDR
26007: GO 25974
26009: POP
26010: POP
// result := tmp ;
26011: LD_ADDR_VAR 0 5
26015: PUSH
26016: LD_VAR 0 8
26020: ST_TO_ADDR
// end ; end ;
26021: LD_VAR 0 5
26025: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26026: LD_INT 0
26028: PPUSH
26029: PPUSH
26030: PPUSH
26031: PPUSH
// if not list then
26032: LD_VAR 0 3
26036: NOT
26037: IFFALSE 26041
// exit ;
26039: GO 26429
// result := [ ] ;
26041: LD_ADDR_VAR 0 6
26045: PUSH
26046: EMPTY
26047: ST_TO_ADDR
// for i in list do
26048: LD_ADDR_VAR 0 7
26052: PUSH
26053: LD_VAR 0 3
26057: PUSH
26058: FOR_IN
26059: IFFALSE 26261
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26061: LD_ADDR_VAR 0 9
26065: PUSH
26066: LD_VAR 0 7
26070: PPUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_VAR 0 2
26080: PPUSH
26081: CALL_OW 297
26085: ST_TO_ADDR
// if not result then
26086: LD_VAR 0 6
26090: NOT
26091: IFFALSE 26117
// result := [ [ i , tmp ] ] else
26093: LD_ADDR_VAR 0 6
26097: PUSH
26098: LD_VAR 0 7
26102: PUSH
26103: LD_VAR 0 9
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: EMPTY
26113: LIST
26114: ST_TO_ADDR
26115: GO 26259
// begin if result [ result ] [ 2 ] < tmp then
26117: LD_VAR 0 6
26121: PUSH
26122: LD_VAR 0 6
26126: ARRAY
26127: PUSH
26128: LD_INT 2
26130: ARRAY
26131: PUSH
26132: LD_VAR 0 9
26136: LESS
26137: IFFALSE 26179
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26139: LD_ADDR_VAR 0 6
26143: PUSH
26144: LD_VAR 0 6
26148: PPUSH
26149: LD_VAR 0 6
26153: PUSH
26154: LD_INT 1
26156: PLUS
26157: PPUSH
26158: LD_VAR 0 7
26162: PUSH
26163: LD_VAR 0 9
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PPUSH
26172: CALL_OW 2
26176: ST_TO_ADDR
26177: GO 26259
// for j = 1 to result do
26179: LD_ADDR_VAR 0 8
26183: PUSH
26184: DOUBLE
26185: LD_INT 1
26187: DEC
26188: ST_TO_ADDR
26189: LD_VAR 0 6
26193: PUSH
26194: FOR_TO
26195: IFFALSE 26257
// begin if tmp < result [ j ] [ 2 ] then
26197: LD_VAR 0 9
26201: PUSH
26202: LD_VAR 0 6
26206: PUSH
26207: LD_VAR 0 8
26211: ARRAY
26212: PUSH
26213: LD_INT 2
26215: ARRAY
26216: LESS
26217: IFFALSE 26255
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26219: LD_ADDR_VAR 0 6
26223: PUSH
26224: LD_VAR 0 6
26228: PPUSH
26229: LD_VAR 0 8
26233: PPUSH
26234: LD_VAR 0 7
26238: PUSH
26239: LD_VAR 0 9
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PPUSH
26248: CALL_OW 2
26252: ST_TO_ADDR
// break ;
26253: GO 26257
// end ; end ;
26255: GO 26194
26257: POP
26258: POP
// end ; end ;
26259: GO 26058
26261: POP
26262: POP
// if result and not asc then
26263: LD_VAR 0 6
26267: PUSH
26268: LD_VAR 0 4
26272: NOT
26273: AND
26274: IFFALSE 26349
// begin tmp := result ;
26276: LD_ADDR_VAR 0 9
26280: PUSH
26281: LD_VAR 0 6
26285: ST_TO_ADDR
// for i = tmp downto 1 do
26286: LD_ADDR_VAR 0 7
26290: PUSH
26291: DOUBLE
26292: LD_VAR 0 9
26296: INC
26297: ST_TO_ADDR
26298: LD_INT 1
26300: PUSH
26301: FOR_DOWNTO
26302: IFFALSE 26347
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26304: LD_ADDR_VAR 0 6
26308: PUSH
26309: LD_VAR 0 6
26313: PPUSH
26314: LD_VAR 0 9
26318: PUSH
26319: LD_VAR 0 7
26323: MINUS
26324: PUSH
26325: LD_INT 1
26327: PLUS
26328: PPUSH
26329: LD_VAR 0 9
26333: PUSH
26334: LD_VAR 0 7
26338: ARRAY
26339: PPUSH
26340: CALL_OW 1
26344: ST_TO_ADDR
26345: GO 26301
26347: POP
26348: POP
// end ; tmp := [ ] ;
26349: LD_ADDR_VAR 0 9
26353: PUSH
26354: EMPTY
26355: ST_TO_ADDR
// if mode then
26356: LD_VAR 0 5
26360: IFFALSE 26429
// begin for i = 1 to result do
26362: LD_ADDR_VAR 0 7
26366: PUSH
26367: DOUBLE
26368: LD_INT 1
26370: DEC
26371: ST_TO_ADDR
26372: LD_VAR 0 6
26376: PUSH
26377: FOR_TO
26378: IFFALSE 26417
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26380: LD_ADDR_VAR 0 9
26384: PUSH
26385: LD_VAR 0 9
26389: PPUSH
26390: LD_VAR 0 7
26394: PPUSH
26395: LD_VAR 0 6
26399: PUSH
26400: LD_VAR 0 7
26404: ARRAY
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: PPUSH
26410: CALL_OW 1
26414: ST_TO_ADDR
26415: GO 26377
26417: POP
26418: POP
// result := tmp ;
26419: LD_ADDR_VAR 0 6
26423: PUSH
26424: LD_VAR 0 9
26428: ST_TO_ADDR
// end ; end ;
26429: LD_VAR 0 6
26433: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26434: LD_INT 0
26436: PPUSH
26437: PPUSH
26438: PPUSH
26439: PPUSH
26440: PPUSH
26441: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26442: LD_ADDR_VAR 0 5
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: EMPTY
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
// if not x or not y then
26464: LD_VAR 0 2
26468: NOT
26469: PUSH
26470: LD_VAR 0 3
26474: NOT
26475: OR
26476: IFFALSE 26480
// exit ;
26478: GO 28130
// if not range then
26480: LD_VAR 0 4
26484: NOT
26485: IFFALSE 26495
// range := 10 ;
26487: LD_ADDR_VAR 0 4
26491: PUSH
26492: LD_INT 10
26494: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26495: LD_ADDR_VAR 0 8
26499: PUSH
26500: LD_INT 81
26502: PUSH
26503: LD_VAR 0 1
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 92
26514: PUSH
26515: LD_VAR 0 2
26519: PUSH
26520: LD_VAR 0 3
26524: PUSH
26525: LD_VAR 0 4
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 3
26538: PUSH
26539: LD_INT 21
26541: PUSH
26542: LD_INT 3
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: LIST
26557: PPUSH
26558: CALL_OW 69
26562: ST_TO_ADDR
// if not tmp then
26563: LD_VAR 0 8
26567: NOT
26568: IFFALSE 26572
// exit ;
26570: GO 28130
// for i in tmp do
26572: LD_ADDR_VAR 0 6
26576: PUSH
26577: LD_VAR 0 8
26581: PUSH
26582: FOR_IN
26583: IFFALSE 28105
// begin points := [ 0 , 0 , 0 ] ;
26585: LD_ADDR_VAR 0 9
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: ST_TO_ADDR
// bpoints := 1 ;
26604: LD_ADDR_VAR 0 10
26608: PUSH
26609: LD_INT 1
26611: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26612: LD_VAR 0 6
26616: PPUSH
26617: CALL_OW 247
26621: PUSH
26622: LD_INT 1
26624: DOUBLE
26625: EQUAL
26626: IFTRUE 26630
26628: GO 27208
26630: POP
// begin if GetClass ( i ) = 1 then
26631: LD_VAR 0 6
26635: PPUSH
26636: CALL_OW 257
26640: PUSH
26641: LD_INT 1
26643: EQUAL
26644: IFFALSE 26665
// points := [ 10 , 5 , 3 ] ;
26646: LD_ADDR_VAR 0 9
26650: PUSH
26651: LD_INT 10
26653: PUSH
26654: LD_INT 5
26656: PUSH
26657: LD_INT 3
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: LIST
26664: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26665: LD_VAR 0 6
26669: PPUSH
26670: CALL_OW 257
26674: PUSH
26675: LD_INT 2
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: LD_INT 4
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: IN
26689: IFFALSE 26710
// points := [ 3 , 2 , 1 ] ;
26691: LD_ADDR_VAR 0 9
26695: PUSH
26696: LD_INT 3
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26710: LD_VAR 0 6
26714: PPUSH
26715: CALL_OW 257
26719: PUSH
26720: LD_INT 5
26722: EQUAL
26723: IFFALSE 26744
// points := [ 130 , 5 , 2 ] ;
26725: LD_ADDR_VAR 0 9
26729: PUSH
26730: LD_INT 130
26732: PUSH
26733: LD_INT 5
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26744: LD_VAR 0 6
26748: PPUSH
26749: CALL_OW 257
26753: PUSH
26754: LD_INT 8
26756: EQUAL
26757: IFFALSE 26778
// points := [ 35 , 35 , 30 ] ;
26759: LD_ADDR_VAR 0 9
26763: PUSH
26764: LD_INT 35
26766: PUSH
26767: LD_INT 35
26769: PUSH
26770: LD_INT 30
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26778: LD_VAR 0 6
26782: PPUSH
26783: CALL_OW 257
26787: PUSH
26788: LD_INT 9
26790: EQUAL
26791: IFFALSE 26812
// points := [ 20 , 55 , 40 ] ;
26793: LD_ADDR_VAR 0 9
26797: PUSH
26798: LD_INT 20
26800: PUSH
26801: LD_INT 55
26803: PUSH
26804: LD_INT 40
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26812: LD_VAR 0 6
26816: PPUSH
26817: CALL_OW 257
26821: PUSH
26822: LD_INT 12
26824: PUSH
26825: LD_INT 16
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: IN
26832: IFFALSE 26853
// points := [ 5 , 3 , 2 ] ;
26834: LD_ADDR_VAR 0 9
26838: PUSH
26839: LD_INT 5
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26853: LD_VAR 0 6
26857: PPUSH
26858: CALL_OW 257
26862: PUSH
26863: LD_INT 17
26865: EQUAL
26866: IFFALSE 26887
// points := [ 100 , 50 , 75 ] ;
26868: LD_ADDR_VAR 0 9
26872: PUSH
26873: LD_INT 100
26875: PUSH
26876: LD_INT 50
26878: PUSH
26879: LD_INT 75
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26887: LD_VAR 0 6
26891: PPUSH
26892: CALL_OW 257
26896: PUSH
26897: LD_INT 15
26899: EQUAL
26900: IFFALSE 26921
// points := [ 10 , 5 , 3 ] ;
26902: LD_ADDR_VAR 0 9
26906: PUSH
26907: LD_INT 10
26909: PUSH
26910: LD_INT 5
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26921: LD_VAR 0 6
26925: PPUSH
26926: CALL_OW 257
26930: PUSH
26931: LD_INT 14
26933: EQUAL
26934: IFFALSE 26955
// points := [ 10 , 0 , 0 ] ;
26936: LD_ADDR_VAR 0 9
26940: PUSH
26941: LD_INT 10
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26955: LD_VAR 0 6
26959: PPUSH
26960: CALL_OW 257
26964: PUSH
26965: LD_INT 11
26967: EQUAL
26968: IFFALSE 26989
// points := [ 30 , 10 , 5 ] ;
26970: LD_ADDR_VAR 0 9
26974: PUSH
26975: LD_INT 30
26977: PUSH
26978: LD_INT 10
26980: PUSH
26981: LD_INT 5
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26989: LD_VAR 0 1
26993: PPUSH
26994: LD_INT 5
26996: PPUSH
26997: CALL_OW 321
27001: PUSH
27002: LD_INT 2
27004: EQUAL
27005: IFFALSE 27022
// bpoints := bpoints * 1.8 ;
27007: LD_ADDR_VAR 0 10
27011: PUSH
27012: LD_VAR 0 10
27016: PUSH
27017: LD_REAL  1.80000000000000E+0000
27020: MUL
27021: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27022: LD_VAR 0 6
27026: PPUSH
27027: CALL_OW 257
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: LD_INT 3
27040: PUSH
27041: LD_INT 4
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: IN
27050: PUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: LD_INT 51
27058: PPUSH
27059: CALL_OW 321
27063: PUSH
27064: LD_INT 2
27066: EQUAL
27067: AND
27068: IFFALSE 27085
// bpoints := bpoints * 1.2 ;
27070: LD_ADDR_VAR 0 10
27074: PUSH
27075: LD_VAR 0 10
27079: PUSH
27080: LD_REAL  1.20000000000000E+0000
27083: MUL
27084: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27085: LD_VAR 0 6
27089: PPUSH
27090: CALL_OW 257
27094: PUSH
27095: LD_INT 5
27097: PUSH
27098: LD_INT 7
27100: PUSH
27101: LD_INT 9
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: LIST
27108: IN
27109: PUSH
27110: LD_VAR 0 1
27114: PPUSH
27115: LD_INT 52
27117: PPUSH
27118: CALL_OW 321
27122: PUSH
27123: LD_INT 2
27125: EQUAL
27126: AND
27127: IFFALSE 27144
// bpoints := bpoints * 1.5 ;
27129: LD_ADDR_VAR 0 10
27133: PUSH
27134: LD_VAR 0 10
27138: PUSH
27139: LD_REAL  1.50000000000000E+0000
27142: MUL
27143: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27144: LD_VAR 0 1
27148: PPUSH
27149: LD_INT 66
27151: PPUSH
27152: CALL_OW 321
27156: PUSH
27157: LD_INT 2
27159: EQUAL
27160: IFFALSE 27177
// bpoints := bpoints * 1.1 ;
27162: LD_ADDR_VAR 0 10
27166: PUSH
27167: LD_VAR 0 10
27171: PUSH
27172: LD_REAL  1.10000000000000E+0000
27175: MUL
27176: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27177: LD_ADDR_VAR 0 10
27181: PUSH
27182: LD_VAR 0 10
27186: PUSH
27187: LD_VAR 0 6
27191: PPUSH
27192: LD_INT 1
27194: PPUSH
27195: CALL_OW 259
27199: PUSH
27200: LD_REAL  1.15000000000000E+0000
27203: MUL
27204: MUL
27205: ST_TO_ADDR
// end ; unit_vehicle :
27206: GO 28034
27208: LD_INT 2
27210: DOUBLE
27211: EQUAL
27212: IFTRUE 27216
27214: GO 28022
27216: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27217: LD_VAR 0 6
27221: PPUSH
27222: CALL_OW 264
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: LD_INT 42
27232: PUSH
27233: LD_INT 24
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: LIST
27240: IN
27241: IFFALSE 27262
// points := [ 25 , 5 , 3 ] ;
27243: LD_ADDR_VAR 0 9
27247: PUSH
27248: LD_INT 25
27250: PUSH
27251: LD_INT 5
27253: PUSH
27254: LD_INT 3
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: LIST
27261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27262: LD_VAR 0 6
27266: PPUSH
27267: CALL_OW 264
27271: PUSH
27272: LD_INT 4
27274: PUSH
27275: LD_INT 43
27277: PUSH
27278: LD_INT 25
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: IN
27286: IFFALSE 27307
// points := [ 40 , 15 , 5 ] ;
27288: LD_ADDR_VAR 0 9
27292: PUSH
27293: LD_INT 40
27295: PUSH
27296: LD_INT 15
27298: PUSH
27299: LD_INT 5
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: LIST
27306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27307: LD_VAR 0 6
27311: PPUSH
27312: CALL_OW 264
27316: PUSH
27317: LD_INT 3
27319: PUSH
27320: LD_INT 23
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: IN
27327: IFFALSE 27348
// points := [ 7 , 25 , 8 ] ;
27329: LD_ADDR_VAR 0 9
27333: PUSH
27334: LD_INT 7
27336: PUSH
27337: LD_INT 25
27339: PUSH
27340: LD_INT 8
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27348: LD_VAR 0 6
27352: PPUSH
27353: CALL_OW 264
27357: PUSH
27358: LD_INT 5
27360: PUSH
27361: LD_INT 27
27363: PUSH
27364: LD_INT 44
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: IN
27372: IFFALSE 27393
// points := [ 14 , 50 , 16 ] ;
27374: LD_ADDR_VAR 0 9
27378: PUSH
27379: LD_INT 14
27381: PUSH
27382: LD_INT 50
27384: PUSH
27385: LD_INT 16
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: LIST
27392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27393: LD_VAR 0 6
27397: PPUSH
27398: CALL_OW 264
27402: PUSH
27403: LD_INT 6
27405: PUSH
27406: LD_INT 46
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: IN
27413: IFFALSE 27434
// points := [ 32 , 120 , 70 ] ;
27415: LD_ADDR_VAR 0 9
27419: PUSH
27420: LD_INT 32
27422: PUSH
27423: LD_INT 120
27425: PUSH
27426: LD_INT 70
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: LIST
27433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27434: LD_VAR 0 6
27438: PPUSH
27439: CALL_OW 264
27443: PUSH
27444: LD_INT 7
27446: PUSH
27447: LD_INT 28
27449: PUSH
27450: LD_INT 45
27452: PUSH
27453: LD_INT 92
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: IN
27462: IFFALSE 27483
// points := [ 35 , 20 , 45 ] ;
27464: LD_ADDR_VAR 0 9
27468: PUSH
27469: LD_INT 35
27471: PUSH
27472: LD_INT 20
27474: PUSH
27475: LD_INT 45
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27483: LD_VAR 0 6
27487: PPUSH
27488: CALL_OW 264
27492: PUSH
27493: LD_INT 47
27495: PUSH
27496: EMPTY
27497: LIST
27498: IN
27499: IFFALSE 27520
// points := [ 67 , 45 , 75 ] ;
27501: LD_ADDR_VAR 0 9
27505: PUSH
27506: LD_INT 67
27508: PUSH
27509: LD_INT 45
27511: PUSH
27512: LD_INT 75
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27520: LD_VAR 0 6
27524: PPUSH
27525: CALL_OW 264
27529: PUSH
27530: LD_INT 26
27532: PUSH
27533: EMPTY
27534: LIST
27535: IN
27536: IFFALSE 27557
// points := [ 120 , 30 , 80 ] ;
27538: LD_ADDR_VAR 0 9
27542: PUSH
27543: LD_INT 120
27545: PUSH
27546: LD_INT 30
27548: PUSH
27549: LD_INT 80
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27557: LD_VAR 0 6
27561: PPUSH
27562: CALL_OW 264
27566: PUSH
27567: LD_INT 22
27569: PUSH
27570: EMPTY
27571: LIST
27572: IN
27573: IFFALSE 27594
// points := [ 40 , 1 , 1 ] ;
27575: LD_ADDR_VAR 0 9
27579: PUSH
27580: LD_INT 40
27582: PUSH
27583: LD_INT 1
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27594: LD_VAR 0 6
27598: PPUSH
27599: CALL_OW 264
27603: PUSH
27604: LD_INT 29
27606: PUSH
27607: EMPTY
27608: LIST
27609: IN
27610: IFFALSE 27631
// points := [ 70 , 200 , 400 ] ;
27612: LD_ADDR_VAR 0 9
27616: PUSH
27617: LD_INT 70
27619: PUSH
27620: LD_INT 200
27622: PUSH
27623: LD_INT 400
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27631: LD_VAR 0 6
27635: PPUSH
27636: CALL_OW 264
27640: PUSH
27641: LD_INT 14
27643: PUSH
27644: LD_INT 53
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: IN
27651: IFFALSE 27672
// points := [ 40 , 10 , 20 ] ;
27653: LD_ADDR_VAR 0 9
27657: PUSH
27658: LD_INT 40
27660: PUSH
27661: LD_INT 10
27663: PUSH
27664: LD_INT 20
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27672: LD_VAR 0 6
27676: PPUSH
27677: CALL_OW 264
27681: PUSH
27682: LD_INT 9
27684: PUSH
27685: EMPTY
27686: LIST
27687: IN
27688: IFFALSE 27709
// points := [ 5 , 70 , 20 ] ;
27690: LD_ADDR_VAR 0 9
27694: PUSH
27695: LD_INT 5
27697: PUSH
27698: LD_INT 70
27700: PUSH
27701: LD_INT 20
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27709: LD_VAR 0 6
27713: PPUSH
27714: CALL_OW 264
27718: PUSH
27719: LD_INT 10
27721: PUSH
27722: EMPTY
27723: LIST
27724: IN
27725: IFFALSE 27746
// points := [ 35 , 110 , 70 ] ;
27727: LD_ADDR_VAR 0 9
27731: PUSH
27732: LD_INT 35
27734: PUSH
27735: LD_INT 110
27737: PUSH
27738: LD_INT 70
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27746: LD_VAR 0 6
27750: PPUSH
27751: CALL_OW 265
27755: PUSH
27756: LD_INT 25
27758: EQUAL
27759: IFFALSE 27780
// points := [ 80 , 65 , 100 ] ;
27761: LD_ADDR_VAR 0 9
27765: PUSH
27766: LD_INT 80
27768: PUSH
27769: LD_INT 65
27771: PUSH
27772: LD_INT 100
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: LIST
27779: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27780: LD_VAR 0 6
27784: PPUSH
27785: CALL_OW 263
27789: PUSH
27790: LD_INT 1
27792: EQUAL
27793: IFFALSE 27828
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27795: LD_ADDR_VAR 0 10
27799: PUSH
27800: LD_VAR 0 10
27804: PUSH
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 311
27814: PPUSH
27815: LD_INT 3
27817: PPUSH
27818: CALL_OW 259
27822: PUSH
27823: LD_INT 4
27825: MUL
27826: MUL
27827: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27828: LD_VAR 0 6
27832: PPUSH
27833: CALL_OW 263
27837: PUSH
27838: LD_INT 2
27840: EQUAL
27841: IFFALSE 27892
// begin j := IsControledBy ( i ) ;
27843: LD_ADDR_VAR 0 7
27847: PUSH
27848: LD_VAR 0 6
27852: PPUSH
27853: CALL_OW 312
27857: ST_TO_ADDR
// if j then
27858: LD_VAR 0 7
27862: IFFALSE 27892
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27864: LD_ADDR_VAR 0 10
27868: PUSH
27869: LD_VAR 0 10
27873: PUSH
27874: LD_VAR 0 7
27878: PPUSH
27879: LD_INT 3
27881: PPUSH
27882: CALL_OW 259
27886: PUSH
27887: LD_INT 3
27889: MUL
27890: MUL
27891: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27892: LD_VAR 0 6
27896: PPUSH
27897: CALL_OW 264
27901: PUSH
27902: LD_INT 5
27904: PUSH
27905: LD_INT 6
27907: PUSH
27908: LD_INT 46
27910: PUSH
27911: LD_INT 44
27913: PUSH
27914: LD_INT 47
27916: PUSH
27917: LD_INT 45
27919: PUSH
27920: LD_INT 28
27922: PUSH
27923: LD_INT 7
27925: PUSH
27926: LD_INT 27
27928: PUSH
27929: LD_INT 29
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: IN
27944: PUSH
27945: LD_VAR 0 1
27949: PPUSH
27950: LD_INT 52
27952: PPUSH
27953: CALL_OW 321
27957: PUSH
27958: LD_INT 2
27960: EQUAL
27961: AND
27962: IFFALSE 27979
// bpoints := bpoints * 1.2 ;
27964: LD_ADDR_VAR 0 10
27968: PUSH
27969: LD_VAR 0 10
27973: PUSH
27974: LD_REAL  1.20000000000000E+0000
27977: MUL
27978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27979: LD_VAR 0 6
27983: PPUSH
27984: CALL_OW 264
27988: PUSH
27989: LD_INT 6
27991: PUSH
27992: LD_INT 46
27994: PUSH
27995: LD_INT 47
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: IN
28003: IFFALSE 28020
// bpoints := bpoints * 1.2 ;
28005: LD_ADDR_VAR 0 10
28009: PUSH
28010: LD_VAR 0 10
28014: PUSH
28015: LD_REAL  1.20000000000000E+0000
28018: MUL
28019: ST_TO_ADDR
// end ; unit_building :
28020: GO 28034
28022: LD_INT 3
28024: DOUBLE
28025: EQUAL
28026: IFTRUE 28030
28028: GO 28033
28030: POP
// ; end ;
28031: GO 28034
28033: POP
// for j = 1 to 3 do
28034: LD_ADDR_VAR 0 7
28038: PUSH
28039: DOUBLE
28040: LD_INT 1
28042: DEC
28043: ST_TO_ADDR
28044: LD_INT 3
28046: PUSH
28047: FOR_TO
28048: IFFALSE 28101
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28050: LD_ADDR_VAR 0 5
28054: PUSH
28055: LD_VAR 0 5
28059: PPUSH
28060: LD_VAR 0 7
28064: PPUSH
28065: LD_VAR 0 5
28069: PUSH
28070: LD_VAR 0 7
28074: ARRAY
28075: PUSH
28076: LD_VAR 0 9
28080: PUSH
28081: LD_VAR 0 7
28085: ARRAY
28086: PUSH
28087: LD_VAR 0 10
28091: MUL
28092: PLUS
28093: PPUSH
28094: CALL_OW 1
28098: ST_TO_ADDR
28099: GO 28047
28101: POP
28102: POP
// end ;
28103: GO 26582
28105: POP
28106: POP
// result := Replace ( result , 4 , tmp ) ;
28107: LD_ADDR_VAR 0 5
28111: PUSH
28112: LD_VAR 0 5
28116: PPUSH
28117: LD_INT 4
28119: PPUSH
28120: LD_VAR 0 8
28124: PPUSH
28125: CALL_OW 1
28129: ST_TO_ADDR
// end ;
28130: LD_VAR 0 5
28134: RET
// export function DangerAtRange ( unit , range ) ; begin
28135: LD_INT 0
28137: PPUSH
// if not unit then
28138: LD_VAR 0 1
28142: NOT
28143: IFFALSE 28147
// exit ;
28145: GO 28192
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28147: LD_ADDR_VAR 0 3
28151: PUSH
28152: LD_VAR 0 1
28156: PPUSH
28157: CALL_OW 255
28161: PPUSH
28162: LD_VAR 0 1
28166: PPUSH
28167: CALL_OW 250
28171: PPUSH
28172: LD_VAR 0 1
28176: PPUSH
28177: CALL_OW 251
28181: PPUSH
28182: LD_VAR 0 2
28186: PPUSH
28187: CALL 26434 0 4
28191: ST_TO_ADDR
// end ;
28192: LD_VAR 0 3
28196: RET
// export function DangerInArea ( side , area ) ; begin
28197: LD_INT 0
28199: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28200: LD_ADDR_VAR 0 3
28204: PUSH
28205: LD_VAR 0 2
28209: PPUSH
28210: LD_INT 81
28212: PUSH
28213: LD_VAR 0 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PPUSH
28222: CALL_OW 70
28226: ST_TO_ADDR
// end ;
28227: LD_VAR 0 3
28231: RET
// export function IsExtension ( b ) ; begin
28232: LD_INT 0
28234: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28235: LD_ADDR_VAR 0 2
28239: PUSH
28240: LD_VAR 0 1
28244: PUSH
28245: LD_INT 23
28247: PUSH
28248: LD_INT 20
28250: PUSH
28251: LD_INT 22
28253: PUSH
28254: LD_INT 17
28256: PUSH
28257: LD_INT 24
28259: PUSH
28260: LD_INT 21
28262: PUSH
28263: LD_INT 19
28265: PUSH
28266: LD_INT 16
28268: PUSH
28269: LD_INT 25
28271: PUSH
28272: LD_INT 18
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: IN
28287: ST_TO_ADDR
// end ;
28288: LD_VAR 0 2
28292: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28293: LD_INT 0
28295: PPUSH
28296: PPUSH
28297: PPUSH
// result := [ ] ;
28298: LD_ADDR_VAR 0 4
28302: PUSH
28303: EMPTY
28304: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28305: LD_ADDR_VAR 0 5
28309: PUSH
28310: LD_VAR 0 2
28314: PPUSH
28315: LD_INT 21
28317: PUSH
28318: LD_INT 3
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PPUSH
28325: CALL_OW 70
28329: ST_TO_ADDR
// if not tmp then
28330: LD_VAR 0 5
28334: NOT
28335: IFFALSE 28339
// exit ;
28337: GO 28403
// if checkLink then
28339: LD_VAR 0 3
28343: IFFALSE 28393
// begin for i in tmp do
28345: LD_ADDR_VAR 0 6
28349: PUSH
28350: LD_VAR 0 5
28354: PUSH
28355: FOR_IN
28356: IFFALSE 28391
// if GetBase ( i ) <> base then
28358: LD_VAR 0 6
28362: PPUSH
28363: CALL_OW 274
28367: PUSH
28368: LD_VAR 0 1
28372: NONEQUAL
28373: IFFALSE 28389
// ComLinkToBase ( base , i ) ;
28375: LD_VAR 0 1
28379: PPUSH
28380: LD_VAR 0 6
28384: PPUSH
28385: CALL_OW 169
28389: GO 28355
28391: POP
28392: POP
// end ; result := tmp ;
28393: LD_ADDR_VAR 0 4
28397: PUSH
28398: LD_VAR 0 5
28402: ST_TO_ADDR
// end ;
28403: LD_VAR 0 4
28407: RET
// export function ComComplete ( units , b ) ; var i ; begin
28408: LD_INT 0
28410: PPUSH
28411: PPUSH
// if not units then
28412: LD_VAR 0 1
28416: NOT
28417: IFFALSE 28421
// exit ;
28419: GO 28511
// for i in units do
28421: LD_ADDR_VAR 0 4
28425: PUSH
28426: LD_VAR 0 1
28430: PUSH
28431: FOR_IN
28432: IFFALSE 28509
// if BuildingStatus ( b ) = bs_build then
28434: LD_VAR 0 2
28438: PPUSH
28439: CALL_OW 461
28443: PUSH
28444: LD_INT 1
28446: EQUAL
28447: IFFALSE 28507
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28449: LD_VAR 0 4
28453: PPUSH
28454: LD_STRING h
28456: PUSH
28457: LD_VAR 0 2
28461: PPUSH
28462: CALL_OW 250
28466: PUSH
28467: LD_VAR 0 2
28471: PPUSH
28472: CALL_OW 251
28476: PUSH
28477: LD_VAR 0 2
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: PUSH
28500: EMPTY
28501: LIST
28502: PPUSH
28503: CALL_OW 446
28507: GO 28431
28509: POP
28510: POP
// end ;
28511: LD_VAR 0 3
28515: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28516: LD_INT 0
28518: PPUSH
28519: PPUSH
28520: PPUSH
28521: PPUSH
28522: PPUSH
28523: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28524: LD_VAR 0 1
28528: NOT
28529: PUSH
28530: LD_VAR 0 1
28534: PPUSH
28535: CALL_OW 263
28539: PUSH
28540: LD_INT 2
28542: NONEQUAL
28543: OR
28544: IFFALSE 28548
// exit ;
28546: GO 28864
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28548: LD_ADDR_VAR 0 6
28552: PUSH
28553: LD_INT 22
28555: PUSH
28556: LD_VAR 0 1
28560: PPUSH
28561: CALL_OW 255
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: LD_INT 30
28575: PUSH
28576: LD_INT 36
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 34
28585: PUSH
28586: LD_INT 31
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PPUSH
28602: CALL_OW 69
28606: ST_TO_ADDR
// if not tmp then
28607: LD_VAR 0 6
28611: NOT
28612: IFFALSE 28616
// exit ;
28614: GO 28864
// result := [ ] ;
28616: LD_ADDR_VAR 0 2
28620: PUSH
28621: EMPTY
28622: ST_TO_ADDR
// for i in tmp do
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_VAR 0 6
28632: PUSH
28633: FOR_IN
28634: IFFALSE 28705
// begin t := UnitsInside ( i ) ;
28636: LD_ADDR_VAR 0 4
28640: PUSH
28641: LD_VAR 0 3
28645: PPUSH
28646: CALL_OW 313
28650: ST_TO_ADDR
// if t then
28651: LD_VAR 0 4
28655: IFFALSE 28703
// for j in t do
28657: LD_ADDR_VAR 0 7
28661: PUSH
28662: LD_VAR 0 4
28666: PUSH
28667: FOR_IN
28668: IFFALSE 28701
// result := Replace ( result , result + 1 , j ) ;
28670: LD_ADDR_VAR 0 2
28674: PUSH
28675: LD_VAR 0 2
28679: PPUSH
28680: LD_VAR 0 2
28684: PUSH
28685: LD_INT 1
28687: PLUS
28688: PPUSH
28689: LD_VAR 0 7
28693: PPUSH
28694: CALL_OW 1
28698: ST_TO_ADDR
28699: GO 28667
28701: POP
28702: POP
// end ;
28703: GO 28633
28705: POP
28706: POP
// if not result then
28707: LD_VAR 0 2
28711: NOT
28712: IFFALSE 28716
// exit ;
28714: GO 28864
// mech := result [ 1 ] ;
28716: LD_ADDR_VAR 0 5
28720: PUSH
28721: LD_VAR 0 2
28725: PUSH
28726: LD_INT 1
28728: ARRAY
28729: ST_TO_ADDR
// if result > 1 then
28730: LD_VAR 0 2
28734: PUSH
28735: LD_INT 1
28737: GREATER
28738: IFFALSE 28850
// begin for i = 2 to result do
28740: LD_ADDR_VAR 0 3
28744: PUSH
28745: DOUBLE
28746: LD_INT 2
28748: DEC
28749: ST_TO_ADDR
28750: LD_VAR 0 2
28754: PUSH
28755: FOR_TO
28756: IFFALSE 28848
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28758: LD_ADDR_VAR 0 4
28762: PUSH
28763: LD_VAR 0 2
28767: PUSH
28768: LD_VAR 0 3
28772: ARRAY
28773: PPUSH
28774: LD_INT 3
28776: PPUSH
28777: CALL_OW 259
28781: PUSH
28782: LD_VAR 0 2
28786: PUSH
28787: LD_VAR 0 3
28791: ARRAY
28792: PPUSH
28793: CALL_OW 432
28797: MINUS
28798: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28799: LD_VAR 0 4
28803: PUSH
28804: LD_VAR 0 5
28808: PPUSH
28809: LD_INT 3
28811: PPUSH
28812: CALL_OW 259
28816: PUSH
28817: LD_VAR 0 5
28821: PPUSH
28822: CALL_OW 432
28826: MINUS
28827: GREATEREQUAL
28828: IFFALSE 28846
// mech := result [ i ] ;
28830: LD_ADDR_VAR 0 5
28834: PUSH
28835: LD_VAR 0 2
28839: PUSH
28840: LD_VAR 0 3
28844: ARRAY
28845: ST_TO_ADDR
// end ;
28846: GO 28755
28848: POP
28849: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28850: LD_VAR 0 1
28854: PPUSH
28855: LD_VAR 0 5
28859: PPUSH
28860: CALL_OW 135
// end ;
28864: LD_VAR 0 2
28868: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28869: LD_INT 0
28871: PPUSH
28872: PPUSH
28873: PPUSH
28874: PPUSH
28875: PPUSH
28876: PPUSH
28877: PPUSH
28878: PPUSH
28879: PPUSH
28880: PPUSH
28881: PPUSH
28882: PPUSH
28883: PPUSH
// result := [ ] ;
28884: LD_ADDR_VAR 0 7
28888: PUSH
28889: EMPTY
28890: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28891: LD_VAR 0 1
28895: PPUSH
28896: CALL_OW 266
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: IN
28911: NOT
28912: IFFALSE 28916
// exit ;
28914: GO 30550
// if name then
28916: LD_VAR 0 3
28920: IFFALSE 28936
// SetBName ( base_dep , name ) ;
28922: LD_VAR 0 1
28926: PPUSH
28927: LD_VAR 0 3
28931: PPUSH
28932: CALL_OW 500
// base := GetBase ( base_dep ) ;
28936: LD_ADDR_VAR 0 15
28940: PUSH
28941: LD_VAR 0 1
28945: PPUSH
28946: CALL_OW 274
28950: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28951: LD_ADDR_VAR 0 16
28955: PUSH
28956: LD_VAR 0 1
28960: PPUSH
28961: CALL_OW 255
28965: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28966: LD_ADDR_VAR 0 17
28970: PUSH
28971: LD_VAR 0 1
28975: PPUSH
28976: CALL_OW 248
28980: ST_TO_ADDR
// if sources then
28981: LD_VAR 0 5
28985: IFFALSE 29032
// for i = 1 to 3 do
28987: LD_ADDR_VAR 0 8
28991: PUSH
28992: DOUBLE
28993: LD_INT 1
28995: DEC
28996: ST_TO_ADDR
28997: LD_INT 3
28999: PUSH
29000: FOR_TO
29001: IFFALSE 29030
// AddResourceType ( base , i , sources [ i ] ) ;
29003: LD_VAR 0 15
29007: PPUSH
29008: LD_VAR 0 8
29012: PPUSH
29013: LD_VAR 0 5
29017: PUSH
29018: LD_VAR 0 8
29022: ARRAY
29023: PPUSH
29024: CALL_OW 276
29028: GO 29000
29030: POP
29031: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29032: LD_ADDR_VAR 0 18
29036: PUSH
29037: LD_VAR 0 15
29041: PPUSH
29042: LD_VAR 0 2
29046: PPUSH
29047: LD_INT 1
29049: PPUSH
29050: CALL 28293 0 3
29054: ST_TO_ADDR
// InitHc ;
29055: CALL_OW 19
// InitUc ;
29059: CALL_OW 18
// uc_side := side ;
29063: LD_ADDR_OWVAR 20
29067: PUSH
29068: LD_VAR 0 16
29072: ST_TO_ADDR
// uc_nation := nation ;
29073: LD_ADDR_OWVAR 21
29077: PUSH
29078: LD_VAR 0 17
29082: ST_TO_ADDR
// if buildings then
29083: LD_VAR 0 18
29087: IFFALSE 30409
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29089: LD_ADDR_VAR 0 19
29093: PUSH
29094: LD_VAR 0 18
29098: PPUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 30
29104: PUSH
29105: LD_INT 29
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 30
29114: PUSH
29115: LD_INT 30
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: PPUSH
29127: CALL_OW 72
29131: ST_TO_ADDR
// if tmp then
29132: LD_VAR 0 19
29136: IFFALSE 29184
// for i in tmp do
29138: LD_ADDR_VAR 0 8
29142: PUSH
29143: LD_VAR 0 19
29147: PUSH
29148: FOR_IN
29149: IFFALSE 29182
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29151: LD_VAR 0 8
29155: PPUSH
29156: CALL_OW 250
29160: PPUSH
29161: LD_VAR 0 8
29165: PPUSH
29166: CALL_OW 251
29170: PPUSH
29171: LD_VAR 0 16
29175: PPUSH
29176: CALL_OW 441
29180: GO 29148
29182: POP
29183: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29184: LD_VAR 0 18
29188: PPUSH
29189: LD_INT 2
29191: PUSH
29192: LD_INT 30
29194: PUSH
29195: LD_INT 32
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 30
29204: PUSH
29205: LD_INT 33
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: PPUSH
29217: CALL_OW 72
29221: IFFALSE 29309
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29223: LD_ADDR_VAR 0 8
29227: PUSH
29228: LD_VAR 0 18
29232: PPUSH
29233: LD_INT 2
29235: PUSH
29236: LD_INT 30
29238: PUSH
29239: LD_INT 32
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 30
29248: PUSH
29249: LD_INT 33
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: LIST
29260: PPUSH
29261: CALL_OW 72
29265: PUSH
29266: FOR_IN
29267: IFFALSE 29307
// begin if not GetBWeapon ( i ) then
29269: LD_VAR 0 8
29273: PPUSH
29274: CALL_OW 269
29278: NOT
29279: IFFALSE 29305
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29281: LD_VAR 0 8
29285: PPUSH
29286: LD_VAR 0 8
29290: PPUSH
29291: LD_VAR 0 2
29295: PPUSH
29296: CALL 30555 0 2
29300: PPUSH
29301: CALL_OW 431
// end ;
29305: GO 29266
29307: POP
29308: POP
// end ; for i = 1 to personel do
29309: LD_ADDR_VAR 0 8
29313: PUSH
29314: DOUBLE
29315: LD_INT 1
29317: DEC
29318: ST_TO_ADDR
29319: LD_VAR 0 6
29323: PUSH
29324: FOR_TO
29325: IFFALSE 30389
// begin if i > 4 then
29327: LD_VAR 0 8
29331: PUSH
29332: LD_INT 4
29334: GREATER
29335: IFFALSE 29339
// break ;
29337: GO 30389
// case i of 1 :
29339: LD_VAR 0 8
29343: PUSH
29344: LD_INT 1
29346: DOUBLE
29347: EQUAL
29348: IFTRUE 29352
29350: GO 29432
29352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29353: LD_ADDR_VAR 0 12
29357: PUSH
29358: LD_VAR 0 18
29362: PPUSH
29363: LD_INT 22
29365: PUSH
29366: LD_VAR 0 16
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 58
29377: PUSH
29378: EMPTY
29379: LIST
29380: PUSH
29381: LD_INT 2
29383: PUSH
29384: LD_INT 30
29386: PUSH
29387: LD_INT 32
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 30
29396: PUSH
29397: LD_INT 4
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 30
29406: PUSH
29407: LD_INT 5
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: PPUSH
29425: CALL_OW 72
29429: ST_TO_ADDR
29430: GO 29654
29432: LD_INT 2
29434: DOUBLE
29435: EQUAL
29436: IFTRUE 29440
29438: GO 29502
29440: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29441: LD_ADDR_VAR 0 12
29445: PUSH
29446: LD_VAR 0 18
29450: PPUSH
29451: LD_INT 22
29453: PUSH
29454: LD_VAR 0 16
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: LD_INT 30
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 30
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PPUSH
29495: CALL_OW 72
29499: ST_TO_ADDR
29500: GO 29654
29502: LD_INT 3
29504: DOUBLE
29505: EQUAL
29506: IFTRUE 29510
29508: GO 29572
29510: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29511: LD_ADDR_VAR 0 12
29515: PUSH
29516: LD_VAR 0 18
29520: PPUSH
29521: LD_INT 22
29523: PUSH
29524: LD_VAR 0 16
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 30
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 30
29548: PUSH
29549: LD_INT 3
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 72
29569: ST_TO_ADDR
29570: GO 29654
29572: LD_INT 4
29574: DOUBLE
29575: EQUAL
29576: IFTRUE 29580
29578: GO 29653
29580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29581: LD_ADDR_VAR 0 12
29585: PUSH
29586: LD_VAR 0 18
29590: PPUSH
29591: LD_INT 22
29593: PUSH
29594: LD_VAR 0 16
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: LD_INT 30
29608: PUSH
29609: LD_INT 6
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 30
29618: PUSH
29619: LD_INT 7
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 30
29628: PUSH
29629: LD_INT 8
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PPUSH
29646: CALL_OW 72
29650: ST_TO_ADDR
29651: GO 29654
29653: POP
// if i = 1 then
29654: LD_VAR 0 8
29658: PUSH
29659: LD_INT 1
29661: EQUAL
29662: IFFALSE 29773
// begin tmp := [ ] ;
29664: LD_ADDR_VAR 0 19
29668: PUSH
29669: EMPTY
29670: ST_TO_ADDR
// for j in f do
29671: LD_ADDR_VAR 0 9
29675: PUSH
29676: LD_VAR 0 12
29680: PUSH
29681: FOR_IN
29682: IFFALSE 29755
// if GetBType ( j ) = b_bunker then
29684: LD_VAR 0 9
29688: PPUSH
29689: CALL_OW 266
29693: PUSH
29694: LD_INT 32
29696: EQUAL
29697: IFFALSE 29724
// tmp := Insert ( tmp , 1 , j ) else
29699: LD_ADDR_VAR 0 19
29703: PUSH
29704: LD_VAR 0 19
29708: PPUSH
29709: LD_INT 1
29711: PPUSH
29712: LD_VAR 0 9
29716: PPUSH
29717: CALL_OW 2
29721: ST_TO_ADDR
29722: GO 29753
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29724: LD_ADDR_VAR 0 19
29728: PUSH
29729: LD_VAR 0 19
29733: PPUSH
29734: LD_VAR 0 19
29738: PUSH
29739: LD_INT 1
29741: PLUS
29742: PPUSH
29743: LD_VAR 0 9
29747: PPUSH
29748: CALL_OW 2
29752: ST_TO_ADDR
29753: GO 29681
29755: POP
29756: POP
// if tmp then
29757: LD_VAR 0 19
29761: IFFALSE 29773
// f := tmp ;
29763: LD_ADDR_VAR 0 12
29767: PUSH
29768: LD_VAR 0 19
29772: ST_TO_ADDR
// end ; x := personel [ i ] ;
29773: LD_ADDR_VAR 0 13
29777: PUSH
29778: LD_VAR 0 6
29782: PUSH
29783: LD_VAR 0 8
29787: ARRAY
29788: ST_TO_ADDR
// if x = - 1 then
29789: LD_VAR 0 13
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: EQUAL
29798: IFFALSE 30007
// begin for j in f do
29800: LD_ADDR_VAR 0 9
29804: PUSH
29805: LD_VAR 0 12
29809: PUSH
29810: FOR_IN
29811: IFFALSE 30003
// repeat InitHc ;
29813: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29817: LD_VAR 0 9
29821: PPUSH
29822: CALL_OW 266
29826: PUSH
29827: LD_INT 5
29829: EQUAL
29830: IFFALSE 29900
// begin if UnitsInside ( j ) < 3 then
29832: LD_VAR 0 9
29836: PPUSH
29837: CALL_OW 313
29841: PUSH
29842: LD_INT 3
29844: LESS
29845: IFFALSE 29881
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29847: LD_INT 0
29849: PPUSH
29850: LD_INT 5
29852: PUSH
29853: LD_INT 8
29855: PUSH
29856: LD_INT 9
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: PUSH
29864: LD_VAR 0 17
29868: ARRAY
29869: PPUSH
29870: LD_VAR 0 4
29874: PPUSH
29875: CALL_OW 380
29879: GO 29898
// PrepareHuman ( false , i , skill ) ;
29881: LD_INT 0
29883: PPUSH
29884: LD_VAR 0 8
29888: PPUSH
29889: LD_VAR 0 4
29893: PPUSH
29894: CALL_OW 380
// end else
29898: GO 29917
// PrepareHuman ( false , i , skill ) ;
29900: LD_INT 0
29902: PPUSH
29903: LD_VAR 0 8
29907: PPUSH
29908: LD_VAR 0 4
29912: PPUSH
29913: CALL_OW 380
// un := CreateHuman ;
29917: LD_ADDR_VAR 0 14
29921: PUSH
29922: CALL_OW 44
29926: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29927: LD_ADDR_VAR 0 7
29931: PUSH
29932: LD_VAR 0 7
29936: PPUSH
29937: LD_INT 1
29939: PPUSH
29940: LD_VAR 0 14
29944: PPUSH
29945: CALL_OW 2
29949: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29950: LD_VAR 0 14
29954: PPUSH
29955: LD_VAR 0 9
29959: PPUSH
29960: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29964: LD_VAR 0 9
29968: PPUSH
29969: CALL_OW 313
29973: PUSH
29974: LD_INT 6
29976: EQUAL
29977: PUSH
29978: LD_VAR 0 9
29982: PPUSH
29983: CALL_OW 266
29987: PUSH
29988: LD_INT 32
29990: PUSH
29991: LD_INT 31
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: IN
29998: OR
29999: IFFALSE 29813
30001: GO 29810
30003: POP
30004: POP
// end else
30005: GO 30387
// for j = 1 to x do
30007: LD_ADDR_VAR 0 9
30011: PUSH
30012: DOUBLE
30013: LD_INT 1
30015: DEC
30016: ST_TO_ADDR
30017: LD_VAR 0 13
30021: PUSH
30022: FOR_TO
30023: IFFALSE 30385
// begin InitHc ;
30025: CALL_OW 19
// if not f then
30029: LD_VAR 0 12
30033: NOT
30034: IFFALSE 30123
// begin PrepareHuman ( false , i , skill ) ;
30036: LD_INT 0
30038: PPUSH
30039: LD_VAR 0 8
30043: PPUSH
30044: LD_VAR 0 4
30048: PPUSH
30049: CALL_OW 380
// un := CreateHuman ;
30053: LD_ADDR_VAR 0 14
30057: PUSH
30058: CALL_OW 44
30062: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30063: LD_ADDR_VAR 0 7
30067: PUSH
30068: LD_VAR 0 7
30072: PPUSH
30073: LD_INT 1
30075: PPUSH
30076: LD_VAR 0 14
30080: PPUSH
30081: CALL_OW 2
30085: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30086: LD_VAR 0 14
30090: PPUSH
30091: LD_VAR 0 1
30095: PPUSH
30096: CALL_OW 250
30100: PPUSH
30101: LD_VAR 0 1
30105: PPUSH
30106: CALL_OW 251
30110: PPUSH
30111: LD_INT 10
30113: PPUSH
30114: LD_INT 0
30116: PPUSH
30117: CALL_OW 50
// continue ;
30121: GO 30022
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30123: LD_VAR 0 12
30127: PUSH
30128: LD_INT 1
30130: ARRAY
30131: PPUSH
30132: CALL_OW 313
30136: PUSH
30137: LD_VAR 0 12
30141: PUSH
30142: LD_INT 1
30144: ARRAY
30145: PPUSH
30146: CALL_OW 266
30150: PUSH
30151: LD_INT 32
30153: PUSH
30154: LD_INT 31
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: IN
30161: AND
30162: PUSH
30163: LD_VAR 0 12
30167: PUSH
30168: LD_INT 1
30170: ARRAY
30171: PPUSH
30172: CALL_OW 313
30176: PUSH
30177: LD_INT 6
30179: EQUAL
30180: OR
30181: IFFALSE 30201
// f := Delete ( f , 1 ) ;
30183: LD_ADDR_VAR 0 12
30187: PUSH
30188: LD_VAR 0 12
30192: PPUSH
30193: LD_INT 1
30195: PPUSH
30196: CALL_OW 3
30200: ST_TO_ADDR
// if not f then
30201: LD_VAR 0 12
30205: NOT
30206: IFFALSE 30224
// begin x := x + 2 ;
30208: LD_ADDR_VAR 0 13
30212: PUSH
30213: LD_VAR 0 13
30217: PUSH
30218: LD_INT 2
30220: PLUS
30221: ST_TO_ADDR
// continue ;
30222: GO 30022
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30224: LD_VAR 0 12
30228: PUSH
30229: LD_INT 1
30231: ARRAY
30232: PPUSH
30233: CALL_OW 266
30237: PUSH
30238: LD_INT 5
30240: EQUAL
30241: IFFALSE 30315
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30243: LD_VAR 0 12
30247: PUSH
30248: LD_INT 1
30250: ARRAY
30251: PPUSH
30252: CALL_OW 313
30256: PUSH
30257: LD_INT 3
30259: LESS
30260: IFFALSE 30296
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30262: LD_INT 0
30264: PPUSH
30265: LD_INT 5
30267: PUSH
30268: LD_INT 8
30270: PUSH
30271: LD_INT 9
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: LIST
30278: PUSH
30279: LD_VAR 0 17
30283: ARRAY
30284: PPUSH
30285: LD_VAR 0 4
30289: PPUSH
30290: CALL_OW 380
30294: GO 30313
// PrepareHuman ( false , i , skill ) ;
30296: LD_INT 0
30298: PPUSH
30299: LD_VAR 0 8
30303: PPUSH
30304: LD_VAR 0 4
30308: PPUSH
30309: CALL_OW 380
// end else
30313: GO 30332
// PrepareHuman ( false , i , skill ) ;
30315: LD_INT 0
30317: PPUSH
30318: LD_VAR 0 8
30322: PPUSH
30323: LD_VAR 0 4
30327: PPUSH
30328: CALL_OW 380
// un := CreateHuman ;
30332: LD_ADDR_VAR 0 14
30336: PUSH
30337: CALL_OW 44
30341: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30342: LD_ADDR_VAR 0 7
30346: PUSH
30347: LD_VAR 0 7
30351: PPUSH
30352: LD_INT 1
30354: PPUSH
30355: LD_VAR 0 14
30359: PPUSH
30360: CALL_OW 2
30364: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30365: LD_VAR 0 14
30369: PPUSH
30370: LD_VAR 0 12
30374: PUSH
30375: LD_INT 1
30377: ARRAY
30378: PPUSH
30379: CALL_OW 52
// end ;
30383: GO 30022
30385: POP
30386: POP
// end ;
30387: GO 29324
30389: POP
30390: POP
// result := result ^ buildings ;
30391: LD_ADDR_VAR 0 7
30395: PUSH
30396: LD_VAR 0 7
30400: PUSH
30401: LD_VAR 0 18
30405: ADD
30406: ST_TO_ADDR
// end else
30407: GO 30550
// begin for i = 1 to personel do
30409: LD_ADDR_VAR 0 8
30413: PUSH
30414: DOUBLE
30415: LD_INT 1
30417: DEC
30418: ST_TO_ADDR
30419: LD_VAR 0 6
30423: PUSH
30424: FOR_TO
30425: IFFALSE 30548
// begin if i > 4 then
30427: LD_VAR 0 8
30431: PUSH
30432: LD_INT 4
30434: GREATER
30435: IFFALSE 30439
// break ;
30437: GO 30548
// x := personel [ i ] ;
30439: LD_ADDR_VAR 0 13
30443: PUSH
30444: LD_VAR 0 6
30448: PUSH
30449: LD_VAR 0 8
30453: ARRAY
30454: ST_TO_ADDR
// if x = - 1 then
30455: LD_VAR 0 13
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: EQUAL
30464: IFFALSE 30468
// continue ;
30466: GO 30424
// PrepareHuman ( false , i , skill ) ;
30468: LD_INT 0
30470: PPUSH
30471: LD_VAR 0 8
30475: PPUSH
30476: LD_VAR 0 4
30480: PPUSH
30481: CALL_OW 380
// un := CreateHuman ;
30485: LD_ADDR_VAR 0 14
30489: PUSH
30490: CALL_OW 44
30494: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30495: LD_VAR 0 14
30499: PPUSH
30500: LD_VAR 0 1
30504: PPUSH
30505: CALL_OW 250
30509: PPUSH
30510: LD_VAR 0 1
30514: PPUSH
30515: CALL_OW 251
30519: PPUSH
30520: LD_INT 10
30522: PPUSH
30523: LD_INT 0
30525: PPUSH
30526: CALL_OW 50
// result := result ^ un ;
30530: LD_ADDR_VAR 0 7
30534: PUSH
30535: LD_VAR 0 7
30539: PUSH
30540: LD_VAR 0 14
30544: ADD
30545: ST_TO_ADDR
// end ;
30546: GO 30424
30548: POP
30549: POP
// end ; end ;
30550: LD_VAR 0 7
30554: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30555: LD_INT 0
30557: PPUSH
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
30562: PPUSH
30563: PPUSH
30564: PPUSH
30565: PPUSH
30566: PPUSH
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
// result := false ;
30573: LD_ADDR_VAR 0 3
30577: PUSH
30578: LD_INT 0
30580: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30581: LD_VAR 0 1
30585: NOT
30586: PUSH
30587: LD_VAR 0 1
30591: PPUSH
30592: CALL_OW 266
30596: PUSH
30597: LD_INT 32
30599: PUSH
30600: LD_INT 33
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: IN
30607: NOT
30608: OR
30609: IFFALSE 30613
// exit ;
30611: GO 31722
// nat := GetNation ( tower ) ;
30613: LD_ADDR_VAR 0 12
30617: PUSH
30618: LD_VAR 0 1
30622: PPUSH
30623: CALL_OW 248
30627: ST_TO_ADDR
// side := GetSide ( tower ) ;
30628: LD_ADDR_VAR 0 16
30632: PUSH
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 255
30642: ST_TO_ADDR
// x := GetX ( tower ) ;
30643: LD_ADDR_VAR 0 10
30647: PUSH
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 250
30657: ST_TO_ADDR
// y := GetY ( tower ) ;
30658: LD_ADDR_VAR 0 11
30662: PUSH
30663: LD_VAR 0 1
30667: PPUSH
30668: CALL_OW 251
30672: ST_TO_ADDR
// if not x or not y then
30673: LD_VAR 0 10
30677: NOT
30678: PUSH
30679: LD_VAR 0 11
30683: NOT
30684: OR
30685: IFFALSE 30689
// exit ;
30687: GO 31722
// weapon := 0 ;
30689: LD_ADDR_VAR 0 18
30693: PUSH
30694: LD_INT 0
30696: ST_TO_ADDR
// fac_list := [ ] ;
30697: LD_ADDR_VAR 0 17
30701: PUSH
30702: EMPTY
30703: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30704: LD_ADDR_VAR 0 6
30708: PUSH
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 274
30718: PPUSH
30719: LD_VAR 0 2
30723: PPUSH
30724: LD_INT 0
30726: PPUSH
30727: CALL 28293 0 3
30731: PPUSH
30732: LD_INT 30
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PPUSH
30742: CALL_OW 72
30746: ST_TO_ADDR
// if not factories then
30747: LD_VAR 0 6
30751: NOT
30752: IFFALSE 30756
// exit ;
30754: GO 31722
// for i in factories do
30756: LD_ADDR_VAR 0 8
30760: PUSH
30761: LD_VAR 0 6
30765: PUSH
30766: FOR_IN
30767: IFFALSE 30792
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30769: LD_ADDR_VAR 0 17
30773: PUSH
30774: LD_VAR 0 17
30778: PUSH
30779: LD_VAR 0 8
30783: PPUSH
30784: CALL_OW 478
30788: UNION
30789: ST_TO_ADDR
30790: GO 30766
30792: POP
30793: POP
// if not fac_list then
30794: LD_VAR 0 17
30798: NOT
30799: IFFALSE 30803
// exit ;
30801: GO 31722
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30803: LD_ADDR_VAR 0 5
30807: PUSH
30808: LD_INT 4
30810: PUSH
30811: LD_INT 5
30813: PUSH
30814: LD_INT 9
30816: PUSH
30817: LD_INT 10
30819: PUSH
30820: LD_INT 6
30822: PUSH
30823: LD_INT 7
30825: PUSH
30826: LD_INT 11
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 27
30840: PUSH
30841: LD_INT 28
30843: PUSH
30844: LD_INT 26
30846: PUSH
30847: LD_INT 30
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 43
30858: PUSH
30859: LD_INT 44
30861: PUSH
30862: LD_INT 46
30864: PUSH
30865: LD_INT 45
30867: PUSH
30868: LD_INT 47
30870: PUSH
30871: LD_INT 49
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: PUSH
30887: LD_VAR 0 12
30891: ARRAY
30892: ST_TO_ADDR
// list := list isect fac_list ;
30893: LD_ADDR_VAR 0 5
30897: PUSH
30898: LD_VAR 0 5
30902: PUSH
30903: LD_VAR 0 17
30907: ISECT
30908: ST_TO_ADDR
// if not list then
30909: LD_VAR 0 5
30913: NOT
30914: IFFALSE 30918
// exit ;
30916: GO 31722
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30918: LD_VAR 0 12
30922: PUSH
30923: LD_INT 3
30925: EQUAL
30926: PUSH
30927: LD_INT 49
30929: PUSH
30930: LD_VAR 0 5
30934: IN
30935: AND
30936: PUSH
30937: LD_INT 31
30939: PPUSH
30940: LD_VAR 0 16
30944: PPUSH
30945: CALL_OW 321
30949: PUSH
30950: LD_INT 2
30952: EQUAL
30953: AND
30954: IFFALSE 31014
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30956: LD_INT 22
30958: PUSH
30959: LD_VAR 0 16
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 35
30970: PUSH
30971: LD_INT 49
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 91
30980: PUSH
30981: LD_VAR 0 1
30985: PUSH
30986: LD_INT 10
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: PPUSH
30999: CALL_OW 69
31003: NOT
31004: IFFALSE 31014
// weapon := ru_time_lapser ;
31006: LD_ADDR_VAR 0 18
31010: PUSH
31011: LD_INT 49
31013: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31014: LD_VAR 0 12
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 2
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: IN
31029: PUSH
31030: LD_INT 11
31032: PUSH
31033: LD_VAR 0 5
31037: IN
31038: PUSH
31039: LD_INT 30
31041: PUSH
31042: LD_VAR 0 5
31046: IN
31047: OR
31048: AND
31049: PUSH
31050: LD_INT 6
31052: PPUSH
31053: LD_VAR 0 16
31057: PPUSH
31058: CALL_OW 321
31062: PUSH
31063: LD_INT 2
31065: EQUAL
31066: AND
31067: IFFALSE 31232
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31069: LD_INT 22
31071: PUSH
31072: LD_VAR 0 16
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 35
31086: PUSH
31087: LD_INT 11
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 35
31096: PUSH
31097: LD_INT 30
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 91
31111: PUSH
31112: LD_VAR 0 1
31116: PUSH
31117: LD_INT 18
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: PPUSH
31130: CALL_OW 69
31134: NOT
31135: PUSH
31136: LD_INT 22
31138: PUSH
31139: LD_VAR 0 16
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: LD_INT 30
31153: PUSH
31154: LD_INT 32
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 30
31163: PUSH
31164: LD_INT 33
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 91
31178: PUSH
31179: LD_VAR 0 1
31183: PUSH
31184: LD_INT 12
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: PPUSH
31200: CALL_OW 69
31204: PUSH
31205: LD_INT 2
31207: GREATER
31208: AND
31209: IFFALSE 31232
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31211: LD_ADDR_VAR 0 18
31215: PUSH
31216: LD_INT 11
31218: PUSH
31219: LD_INT 30
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_VAR 0 12
31230: ARRAY
31231: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31232: LD_VAR 0 18
31236: NOT
31237: PUSH
31238: LD_INT 40
31240: PPUSH
31241: LD_VAR 0 16
31245: PPUSH
31246: CALL_OW 321
31250: PUSH
31251: LD_INT 2
31253: EQUAL
31254: AND
31255: PUSH
31256: LD_INT 7
31258: PUSH
31259: LD_VAR 0 5
31263: IN
31264: PUSH
31265: LD_INT 28
31267: PUSH
31268: LD_VAR 0 5
31272: IN
31273: OR
31274: PUSH
31275: LD_INT 45
31277: PUSH
31278: LD_VAR 0 5
31282: IN
31283: OR
31284: AND
31285: IFFALSE 31539
// begin hex := GetHexInfo ( x , y ) ;
31287: LD_ADDR_VAR 0 4
31291: PUSH
31292: LD_VAR 0 10
31296: PPUSH
31297: LD_VAR 0 11
31301: PPUSH
31302: CALL_OW 546
31306: ST_TO_ADDR
// if hex [ 1 ] then
31307: LD_VAR 0 4
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: IFFALSE 31319
// exit ;
31317: GO 31722
// height := hex [ 2 ] ;
31319: LD_ADDR_VAR 0 15
31323: PUSH
31324: LD_VAR 0 4
31328: PUSH
31329: LD_INT 2
31331: ARRAY
31332: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31333: LD_ADDR_VAR 0 14
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: LD_INT 3
31346: PUSH
31347: LD_INT 5
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: ST_TO_ADDR
// for i in tmp do
31356: LD_ADDR_VAR 0 8
31360: PUSH
31361: LD_VAR 0 14
31365: PUSH
31366: FOR_IN
31367: IFFALSE 31537
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31369: LD_ADDR_VAR 0 9
31373: PUSH
31374: LD_VAR 0 10
31378: PPUSH
31379: LD_VAR 0 8
31383: PPUSH
31384: LD_INT 5
31386: PPUSH
31387: CALL_OW 272
31391: PUSH
31392: LD_VAR 0 11
31396: PPUSH
31397: LD_VAR 0 8
31401: PPUSH
31402: LD_INT 5
31404: PPUSH
31405: CALL_OW 273
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31414: LD_VAR 0 9
31418: PUSH
31419: LD_INT 1
31421: ARRAY
31422: PPUSH
31423: LD_VAR 0 9
31427: PUSH
31428: LD_INT 2
31430: ARRAY
31431: PPUSH
31432: CALL_OW 488
31436: IFFALSE 31535
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31438: LD_ADDR_VAR 0 4
31442: PUSH
31443: LD_VAR 0 9
31447: PUSH
31448: LD_INT 1
31450: ARRAY
31451: PPUSH
31452: LD_VAR 0 9
31456: PUSH
31457: LD_INT 2
31459: ARRAY
31460: PPUSH
31461: CALL_OW 546
31465: ST_TO_ADDR
// if hex [ 1 ] then
31466: LD_VAR 0 4
31470: PUSH
31471: LD_INT 1
31473: ARRAY
31474: IFFALSE 31478
// continue ;
31476: GO 31366
// h := hex [ 2 ] ;
31478: LD_ADDR_VAR 0 13
31482: PUSH
31483: LD_VAR 0 4
31487: PUSH
31488: LD_INT 2
31490: ARRAY
31491: ST_TO_ADDR
// if h + 7 < height then
31492: LD_VAR 0 13
31496: PUSH
31497: LD_INT 7
31499: PLUS
31500: PUSH
31501: LD_VAR 0 15
31505: LESS
31506: IFFALSE 31535
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31508: LD_ADDR_VAR 0 18
31512: PUSH
31513: LD_INT 7
31515: PUSH
31516: LD_INT 28
31518: PUSH
31519: LD_INT 45
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: PUSH
31527: LD_VAR 0 12
31531: ARRAY
31532: ST_TO_ADDR
// break ;
31533: GO 31537
// end ; end ; end ;
31535: GO 31366
31537: POP
31538: POP
// end ; if not weapon then
31539: LD_VAR 0 18
31543: NOT
31544: IFFALSE 31604
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31546: LD_ADDR_VAR 0 5
31550: PUSH
31551: LD_VAR 0 5
31555: PUSH
31556: LD_INT 11
31558: PUSH
31559: LD_INT 30
31561: PUSH
31562: LD_INT 49
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: DIFF
31570: ST_TO_ADDR
// if not list then
31571: LD_VAR 0 5
31575: NOT
31576: IFFALSE 31580
// exit ;
31578: GO 31722
// weapon := list [ rand ( 1 , list ) ] ;
31580: LD_ADDR_VAR 0 18
31584: PUSH
31585: LD_VAR 0 5
31589: PUSH
31590: LD_INT 1
31592: PPUSH
31593: LD_VAR 0 5
31597: PPUSH
31598: CALL_OW 12
31602: ARRAY
31603: ST_TO_ADDR
// end ; if weapon then
31604: LD_VAR 0 18
31608: IFFALSE 31722
// begin tmp := CostOfWeapon ( weapon ) ;
31610: LD_ADDR_VAR 0 14
31614: PUSH
31615: LD_VAR 0 18
31619: PPUSH
31620: CALL_OW 451
31624: ST_TO_ADDR
// j := GetBase ( tower ) ;
31625: LD_ADDR_VAR 0 9
31629: PUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 274
31639: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31640: LD_VAR 0 9
31644: PPUSH
31645: LD_INT 1
31647: PPUSH
31648: CALL_OW 275
31652: PUSH
31653: LD_VAR 0 14
31657: PUSH
31658: LD_INT 1
31660: ARRAY
31661: GREATEREQUAL
31662: PUSH
31663: LD_VAR 0 9
31667: PPUSH
31668: LD_INT 2
31670: PPUSH
31671: CALL_OW 275
31675: PUSH
31676: LD_VAR 0 14
31680: PUSH
31681: LD_INT 2
31683: ARRAY
31684: GREATEREQUAL
31685: AND
31686: PUSH
31687: LD_VAR 0 9
31691: PPUSH
31692: LD_INT 3
31694: PPUSH
31695: CALL_OW 275
31699: PUSH
31700: LD_VAR 0 14
31704: PUSH
31705: LD_INT 3
31707: ARRAY
31708: GREATEREQUAL
31709: AND
31710: IFFALSE 31722
// result := weapon ;
31712: LD_ADDR_VAR 0 3
31716: PUSH
31717: LD_VAR 0 18
31721: ST_TO_ADDR
// end ; end ;
31722: LD_VAR 0 3
31726: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31727: LD_INT 0
31729: PPUSH
31730: PPUSH
// result := true ;
31731: LD_ADDR_VAR 0 3
31735: PUSH
31736: LD_INT 1
31738: ST_TO_ADDR
// if array1 = array2 then
31739: LD_VAR 0 1
31743: PUSH
31744: LD_VAR 0 2
31748: EQUAL
31749: IFFALSE 31809
// begin for i = 1 to array1 do
31751: LD_ADDR_VAR 0 4
31755: PUSH
31756: DOUBLE
31757: LD_INT 1
31759: DEC
31760: ST_TO_ADDR
31761: LD_VAR 0 1
31765: PUSH
31766: FOR_TO
31767: IFFALSE 31805
// if array1 [ i ] <> array2 [ i ] then
31769: LD_VAR 0 1
31773: PUSH
31774: LD_VAR 0 4
31778: ARRAY
31779: PUSH
31780: LD_VAR 0 2
31784: PUSH
31785: LD_VAR 0 4
31789: ARRAY
31790: NONEQUAL
31791: IFFALSE 31803
// begin result := false ;
31793: LD_ADDR_VAR 0 3
31797: PUSH
31798: LD_INT 0
31800: ST_TO_ADDR
// break ;
31801: GO 31805
// end ;
31803: GO 31766
31805: POP
31806: POP
// end else
31807: GO 31817
// result := false ;
31809: LD_ADDR_VAR 0 3
31813: PUSH
31814: LD_INT 0
31816: ST_TO_ADDR
// end ;
31817: LD_VAR 0 3
31821: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31822: LD_INT 0
31824: PPUSH
31825: PPUSH
// if not array1 or not array2 then
31826: LD_VAR 0 1
31830: NOT
31831: PUSH
31832: LD_VAR 0 2
31836: NOT
31837: OR
31838: IFFALSE 31842
// exit ;
31840: GO 31906
// result := true ;
31842: LD_ADDR_VAR 0 3
31846: PUSH
31847: LD_INT 1
31849: ST_TO_ADDR
// for i = 1 to array1 do
31850: LD_ADDR_VAR 0 4
31854: PUSH
31855: DOUBLE
31856: LD_INT 1
31858: DEC
31859: ST_TO_ADDR
31860: LD_VAR 0 1
31864: PUSH
31865: FOR_TO
31866: IFFALSE 31904
// if array1 [ i ] <> array2 [ i ] then
31868: LD_VAR 0 1
31872: PUSH
31873: LD_VAR 0 4
31877: ARRAY
31878: PUSH
31879: LD_VAR 0 2
31883: PUSH
31884: LD_VAR 0 4
31888: ARRAY
31889: NONEQUAL
31890: IFFALSE 31902
// begin result := false ;
31892: LD_ADDR_VAR 0 3
31896: PUSH
31897: LD_INT 0
31899: ST_TO_ADDR
// break ;
31900: GO 31904
// end ;
31902: GO 31865
31904: POP
31905: POP
// end ;
31906: LD_VAR 0 3
31910: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31911: LD_INT 0
31913: PPUSH
31914: PPUSH
31915: PPUSH
// pom := GetBase ( fac ) ;
31916: LD_ADDR_VAR 0 5
31920: PUSH
31921: LD_VAR 0 1
31925: PPUSH
31926: CALL_OW 274
31930: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31931: LD_ADDR_VAR 0 4
31935: PUSH
31936: LD_VAR 0 2
31940: PUSH
31941: LD_INT 1
31943: ARRAY
31944: PPUSH
31945: LD_VAR 0 2
31949: PUSH
31950: LD_INT 2
31952: ARRAY
31953: PPUSH
31954: LD_VAR 0 2
31958: PUSH
31959: LD_INT 3
31961: ARRAY
31962: PPUSH
31963: LD_VAR 0 2
31967: PUSH
31968: LD_INT 4
31970: ARRAY
31971: PPUSH
31972: CALL_OW 449
31976: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31977: LD_ADDR_VAR 0 3
31981: PUSH
31982: LD_VAR 0 5
31986: PPUSH
31987: LD_INT 1
31989: PPUSH
31990: CALL_OW 275
31994: PUSH
31995: LD_VAR 0 4
31999: PUSH
32000: LD_INT 1
32002: ARRAY
32003: GREATEREQUAL
32004: PUSH
32005: LD_VAR 0 5
32009: PPUSH
32010: LD_INT 2
32012: PPUSH
32013: CALL_OW 275
32017: PUSH
32018: LD_VAR 0 4
32022: PUSH
32023: LD_INT 2
32025: ARRAY
32026: GREATEREQUAL
32027: AND
32028: PUSH
32029: LD_VAR 0 5
32033: PPUSH
32034: LD_INT 3
32036: PPUSH
32037: CALL_OW 275
32041: PUSH
32042: LD_VAR 0 4
32046: PUSH
32047: LD_INT 3
32049: ARRAY
32050: GREATEREQUAL
32051: AND
32052: ST_TO_ADDR
// end ;
32053: LD_VAR 0 3
32057: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32058: LD_INT 0
32060: PPUSH
32061: PPUSH
32062: PPUSH
32063: PPUSH
// pom := GetBase ( building ) ;
32064: LD_ADDR_VAR 0 3
32068: PUSH
32069: LD_VAR 0 1
32073: PPUSH
32074: CALL_OW 274
32078: ST_TO_ADDR
// if not pom then
32079: LD_VAR 0 3
32083: NOT
32084: IFFALSE 32088
// exit ;
32086: GO 32258
// btype := GetBType ( building ) ;
32088: LD_ADDR_VAR 0 5
32092: PUSH
32093: LD_VAR 0 1
32097: PPUSH
32098: CALL_OW 266
32102: ST_TO_ADDR
// if btype = b_armoury then
32103: LD_VAR 0 5
32107: PUSH
32108: LD_INT 4
32110: EQUAL
32111: IFFALSE 32121
// btype := b_barracks ;
32113: LD_ADDR_VAR 0 5
32117: PUSH
32118: LD_INT 5
32120: ST_TO_ADDR
// if btype = b_depot then
32121: LD_VAR 0 5
32125: PUSH
32126: LD_INT 0
32128: EQUAL
32129: IFFALSE 32139
// btype := b_warehouse ;
32131: LD_ADDR_VAR 0 5
32135: PUSH
32136: LD_INT 1
32138: ST_TO_ADDR
// if btype = b_workshop then
32139: LD_VAR 0 5
32143: PUSH
32144: LD_INT 2
32146: EQUAL
32147: IFFALSE 32157
// btype := b_factory ;
32149: LD_ADDR_VAR 0 5
32153: PUSH
32154: LD_INT 3
32156: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32157: LD_ADDR_VAR 0 4
32161: PUSH
32162: LD_VAR 0 5
32166: PPUSH
32167: LD_VAR 0 1
32171: PPUSH
32172: CALL_OW 248
32176: PPUSH
32177: CALL_OW 450
32181: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32182: LD_ADDR_VAR 0 2
32186: PUSH
32187: LD_VAR 0 3
32191: PPUSH
32192: LD_INT 1
32194: PPUSH
32195: CALL_OW 275
32199: PUSH
32200: LD_VAR 0 4
32204: PUSH
32205: LD_INT 1
32207: ARRAY
32208: GREATEREQUAL
32209: PUSH
32210: LD_VAR 0 3
32214: PPUSH
32215: LD_INT 2
32217: PPUSH
32218: CALL_OW 275
32222: PUSH
32223: LD_VAR 0 4
32227: PUSH
32228: LD_INT 2
32230: ARRAY
32231: GREATEREQUAL
32232: AND
32233: PUSH
32234: LD_VAR 0 3
32238: PPUSH
32239: LD_INT 3
32241: PPUSH
32242: CALL_OW 275
32246: PUSH
32247: LD_VAR 0 4
32251: PUSH
32252: LD_INT 3
32254: ARRAY
32255: GREATEREQUAL
32256: AND
32257: ST_TO_ADDR
// end ;
32258: LD_VAR 0 2
32262: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32263: LD_INT 0
32265: PPUSH
32266: PPUSH
32267: PPUSH
// pom := GetBase ( building ) ;
32268: LD_ADDR_VAR 0 4
32272: PUSH
32273: LD_VAR 0 1
32277: PPUSH
32278: CALL_OW 274
32282: ST_TO_ADDR
// if not pom then
32283: LD_VAR 0 4
32287: NOT
32288: IFFALSE 32292
// exit ;
32290: GO 32393
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32292: LD_ADDR_VAR 0 5
32296: PUSH
32297: LD_VAR 0 2
32301: PPUSH
32302: LD_VAR 0 1
32306: PPUSH
32307: CALL_OW 248
32311: PPUSH
32312: CALL_OW 450
32316: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32317: LD_ADDR_VAR 0 3
32321: PUSH
32322: LD_VAR 0 4
32326: PPUSH
32327: LD_INT 1
32329: PPUSH
32330: CALL_OW 275
32334: PUSH
32335: LD_VAR 0 5
32339: PUSH
32340: LD_INT 1
32342: ARRAY
32343: GREATEREQUAL
32344: PUSH
32345: LD_VAR 0 4
32349: PPUSH
32350: LD_INT 2
32352: PPUSH
32353: CALL_OW 275
32357: PUSH
32358: LD_VAR 0 5
32362: PUSH
32363: LD_INT 2
32365: ARRAY
32366: GREATEREQUAL
32367: AND
32368: PUSH
32369: LD_VAR 0 4
32373: PPUSH
32374: LD_INT 3
32376: PPUSH
32377: CALL_OW 275
32381: PUSH
32382: LD_VAR 0 5
32386: PUSH
32387: LD_INT 3
32389: ARRAY
32390: GREATEREQUAL
32391: AND
32392: ST_TO_ADDR
// end ;
32393: LD_VAR 0 3
32397: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32398: LD_INT 0
32400: PPUSH
32401: PPUSH
32402: PPUSH
32403: PPUSH
32404: PPUSH
32405: PPUSH
32406: PPUSH
32407: PPUSH
32408: PPUSH
32409: PPUSH
32410: PPUSH
// result := false ;
32411: LD_ADDR_VAR 0 8
32415: PUSH
32416: LD_INT 0
32418: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32419: LD_VAR 0 5
32423: NOT
32424: PUSH
32425: LD_VAR 0 1
32429: NOT
32430: OR
32431: PUSH
32432: LD_VAR 0 2
32436: NOT
32437: OR
32438: PUSH
32439: LD_VAR 0 3
32443: NOT
32444: OR
32445: IFFALSE 32449
// exit ;
32447: GO 33263
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32449: LD_ADDR_VAR 0 14
32453: PUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: LD_VAR 0 2
32463: PPUSH
32464: LD_VAR 0 3
32468: PPUSH
32469: LD_VAR 0 4
32473: PPUSH
32474: LD_VAR 0 5
32478: PUSH
32479: LD_INT 1
32481: ARRAY
32482: PPUSH
32483: CALL_OW 248
32487: PPUSH
32488: LD_INT 0
32490: PPUSH
32491: CALL 34516 0 6
32495: ST_TO_ADDR
// if not hexes then
32496: LD_VAR 0 14
32500: NOT
32501: IFFALSE 32505
// exit ;
32503: GO 33263
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32505: LD_ADDR_VAR 0 17
32509: PUSH
32510: LD_VAR 0 5
32514: PPUSH
32515: LD_INT 22
32517: PUSH
32518: LD_VAR 0 13
32522: PPUSH
32523: CALL_OW 255
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 30
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 30
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PPUSH
32564: CALL_OW 72
32568: ST_TO_ADDR
// for i = 1 to hexes do
32569: LD_ADDR_VAR 0 9
32573: PUSH
32574: DOUBLE
32575: LD_INT 1
32577: DEC
32578: ST_TO_ADDR
32579: LD_VAR 0 14
32583: PUSH
32584: FOR_TO
32585: IFFALSE 33261
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32587: LD_ADDR_VAR 0 13
32591: PUSH
32592: LD_VAR 0 14
32596: PUSH
32597: LD_VAR 0 9
32601: ARRAY
32602: PUSH
32603: LD_INT 1
32605: ARRAY
32606: PPUSH
32607: LD_VAR 0 14
32611: PUSH
32612: LD_VAR 0 9
32616: ARRAY
32617: PUSH
32618: LD_INT 2
32620: ARRAY
32621: PPUSH
32622: CALL_OW 428
32626: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32627: LD_VAR 0 14
32631: PUSH
32632: LD_VAR 0 9
32636: ARRAY
32637: PUSH
32638: LD_INT 1
32640: ARRAY
32641: PPUSH
32642: LD_VAR 0 14
32646: PUSH
32647: LD_VAR 0 9
32651: ARRAY
32652: PUSH
32653: LD_INT 2
32655: ARRAY
32656: PPUSH
32657: CALL_OW 351
32661: PUSH
32662: LD_VAR 0 14
32666: PUSH
32667: LD_VAR 0 9
32671: ARRAY
32672: PUSH
32673: LD_INT 1
32675: ARRAY
32676: PPUSH
32677: LD_VAR 0 14
32681: PUSH
32682: LD_VAR 0 9
32686: ARRAY
32687: PUSH
32688: LD_INT 2
32690: ARRAY
32691: PPUSH
32692: CALL_OW 488
32696: NOT
32697: OR
32698: PUSH
32699: LD_VAR 0 13
32703: PPUSH
32704: CALL_OW 247
32708: PUSH
32709: LD_INT 3
32711: EQUAL
32712: OR
32713: IFFALSE 32719
// exit ;
32715: POP
32716: POP
32717: GO 33263
// if not tmp then
32719: LD_VAR 0 13
32723: NOT
32724: IFFALSE 32728
// continue ;
32726: GO 32584
// result := true ;
32728: LD_ADDR_VAR 0 8
32732: PUSH
32733: LD_INT 1
32735: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32736: LD_VAR 0 6
32740: PUSH
32741: LD_VAR 0 13
32745: PPUSH
32746: CALL_OW 247
32750: PUSH
32751: LD_INT 2
32753: EQUAL
32754: AND
32755: PUSH
32756: LD_VAR 0 13
32760: PPUSH
32761: CALL_OW 263
32765: PUSH
32766: LD_INT 1
32768: EQUAL
32769: AND
32770: IFFALSE 32934
// begin if IsDrivenBy ( tmp ) then
32772: LD_VAR 0 13
32776: PPUSH
32777: CALL_OW 311
32781: IFFALSE 32785
// continue ;
32783: GO 32584
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32785: LD_VAR 0 6
32789: PPUSH
32790: LD_INT 3
32792: PUSH
32793: LD_INT 60
32795: PUSH
32796: EMPTY
32797: LIST
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 3
32805: PUSH
32806: LD_INT 55
32808: PUSH
32809: EMPTY
32810: LIST
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PPUSH
32820: CALL_OW 72
32824: IFFALSE 32932
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32826: LD_ADDR_VAR 0 18
32830: PUSH
32831: LD_VAR 0 6
32835: PPUSH
32836: LD_INT 3
32838: PUSH
32839: LD_INT 60
32841: PUSH
32842: EMPTY
32843: LIST
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 55
32854: PUSH
32855: EMPTY
32856: LIST
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PPUSH
32866: CALL_OW 72
32870: PUSH
32871: LD_INT 1
32873: ARRAY
32874: ST_TO_ADDR
// if IsInUnit ( driver ) then
32875: LD_VAR 0 18
32879: PPUSH
32880: CALL_OW 310
32884: IFFALSE 32895
// ComExit ( driver ) ;
32886: LD_VAR 0 18
32890: PPUSH
32891: CALL 58308 0 1
// AddComEnterUnit ( driver , tmp ) ;
32895: LD_VAR 0 18
32899: PPUSH
32900: LD_VAR 0 13
32904: PPUSH
32905: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32909: LD_VAR 0 18
32913: PPUSH
32914: LD_VAR 0 7
32918: PPUSH
32919: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32923: LD_VAR 0 18
32927: PPUSH
32928: CALL_OW 181
// end ; continue ;
32932: GO 32584
// end ; if not cleaners or not tmp in cleaners then
32934: LD_VAR 0 6
32938: NOT
32939: PUSH
32940: LD_VAR 0 13
32944: PUSH
32945: LD_VAR 0 6
32949: IN
32950: NOT
32951: OR
32952: IFFALSE 33259
// begin if dep then
32954: LD_VAR 0 17
32958: IFFALSE 33094
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32960: LD_ADDR_VAR 0 16
32964: PUSH
32965: LD_VAR 0 17
32969: PUSH
32970: LD_INT 1
32972: ARRAY
32973: PPUSH
32974: CALL_OW 250
32978: PPUSH
32979: LD_VAR 0 17
32983: PUSH
32984: LD_INT 1
32986: ARRAY
32987: PPUSH
32988: CALL_OW 254
32992: PPUSH
32993: LD_INT 5
32995: PPUSH
32996: CALL_OW 272
33000: PUSH
33001: LD_VAR 0 17
33005: PUSH
33006: LD_INT 1
33008: ARRAY
33009: PPUSH
33010: CALL_OW 251
33014: PPUSH
33015: LD_VAR 0 17
33019: PUSH
33020: LD_INT 1
33022: ARRAY
33023: PPUSH
33024: CALL_OW 254
33028: PPUSH
33029: LD_INT 5
33031: PPUSH
33032: CALL_OW 273
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33041: LD_VAR 0 16
33045: PUSH
33046: LD_INT 1
33048: ARRAY
33049: PPUSH
33050: LD_VAR 0 16
33054: PUSH
33055: LD_INT 2
33057: ARRAY
33058: PPUSH
33059: CALL_OW 488
33063: IFFALSE 33094
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33065: LD_VAR 0 13
33069: PPUSH
33070: LD_VAR 0 16
33074: PUSH
33075: LD_INT 1
33077: ARRAY
33078: PPUSH
33079: LD_VAR 0 16
33083: PUSH
33084: LD_INT 2
33086: ARRAY
33087: PPUSH
33088: CALL_OW 111
// continue ;
33092: GO 32584
// end ; end ; r := GetDir ( tmp ) ;
33094: LD_ADDR_VAR 0 15
33098: PUSH
33099: LD_VAR 0 13
33103: PPUSH
33104: CALL_OW 254
33108: ST_TO_ADDR
// if r = 5 then
33109: LD_VAR 0 15
33113: PUSH
33114: LD_INT 5
33116: EQUAL
33117: IFFALSE 33127
// r := 0 ;
33119: LD_ADDR_VAR 0 15
33123: PUSH
33124: LD_INT 0
33126: ST_TO_ADDR
// for j = r to 5 do
33127: LD_ADDR_VAR 0 10
33131: PUSH
33132: DOUBLE
33133: LD_VAR 0 15
33137: DEC
33138: ST_TO_ADDR
33139: LD_INT 5
33141: PUSH
33142: FOR_TO
33143: IFFALSE 33257
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33145: LD_ADDR_VAR 0 11
33149: PUSH
33150: LD_VAR 0 13
33154: PPUSH
33155: CALL_OW 250
33159: PPUSH
33160: LD_VAR 0 10
33164: PPUSH
33165: LD_INT 2
33167: PPUSH
33168: CALL_OW 272
33172: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33173: LD_ADDR_VAR 0 12
33177: PUSH
33178: LD_VAR 0 13
33182: PPUSH
33183: CALL_OW 251
33187: PPUSH
33188: LD_VAR 0 10
33192: PPUSH
33193: LD_INT 2
33195: PPUSH
33196: CALL_OW 273
33200: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33201: LD_VAR 0 11
33205: PPUSH
33206: LD_VAR 0 12
33210: PPUSH
33211: CALL_OW 488
33215: PUSH
33216: LD_VAR 0 11
33220: PPUSH
33221: LD_VAR 0 12
33225: PPUSH
33226: CALL_OW 428
33230: NOT
33231: AND
33232: IFFALSE 33255
// begin ComMoveXY ( tmp , _x , _y ) ;
33234: LD_VAR 0 13
33238: PPUSH
33239: LD_VAR 0 11
33243: PPUSH
33244: LD_VAR 0 12
33248: PPUSH
33249: CALL_OW 111
// break ;
33253: GO 33257
// end ; end ;
33255: GO 33142
33257: POP
33258: POP
// end ; end ;
33259: GO 32584
33261: POP
33262: POP
// end ;
33263: LD_VAR 0 8
33267: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33268: LD_INT 0
33270: PPUSH
// result := true ;
33271: LD_ADDR_VAR 0 3
33275: PUSH
33276: LD_INT 1
33278: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33279: LD_VAR 0 2
33283: PUSH
33284: LD_INT 24
33286: DOUBLE
33287: EQUAL
33288: IFTRUE 33298
33290: LD_INT 33
33292: DOUBLE
33293: EQUAL
33294: IFTRUE 33298
33296: GO 33323
33298: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33299: LD_ADDR_VAR 0 3
33303: PUSH
33304: LD_INT 32
33306: PPUSH
33307: LD_VAR 0 1
33311: PPUSH
33312: CALL_OW 321
33316: PUSH
33317: LD_INT 2
33319: EQUAL
33320: ST_TO_ADDR
33321: GO 33639
33323: LD_INT 20
33325: DOUBLE
33326: EQUAL
33327: IFTRUE 33331
33329: GO 33356
33331: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33332: LD_ADDR_VAR 0 3
33336: PUSH
33337: LD_INT 6
33339: PPUSH
33340: LD_VAR 0 1
33344: PPUSH
33345: CALL_OW 321
33349: PUSH
33350: LD_INT 2
33352: EQUAL
33353: ST_TO_ADDR
33354: GO 33639
33356: LD_INT 22
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33370
33362: LD_INT 36
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33370
33368: GO 33395
33370: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33371: LD_ADDR_VAR 0 3
33375: PUSH
33376: LD_INT 15
33378: PPUSH
33379: LD_VAR 0 1
33383: PPUSH
33384: CALL_OW 321
33388: PUSH
33389: LD_INT 2
33391: EQUAL
33392: ST_TO_ADDR
33393: GO 33639
33395: LD_INT 30
33397: DOUBLE
33398: EQUAL
33399: IFTRUE 33403
33401: GO 33428
33403: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33404: LD_ADDR_VAR 0 3
33408: PUSH
33409: LD_INT 20
33411: PPUSH
33412: LD_VAR 0 1
33416: PPUSH
33417: CALL_OW 321
33421: PUSH
33422: LD_INT 2
33424: EQUAL
33425: ST_TO_ADDR
33426: GO 33639
33428: LD_INT 28
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33442
33434: LD_INT 21
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33467
33442: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33443: LD_ADDR_VAR 0 3
33447: PUSH
33448: LD_INT 21
33450: PPUSH
33451: LD_VAR 0 1
33455: PPUSH
33456: CALL_OW 321
33460: PUSH
33461: LD_INT 2
33463: EQUAL
33464: ST_TO_ADDR
33465: GO 33639
33467: LD_INT 16
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33500
33475: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33476: LD_ADDR_VAR 0 3
33480: PUSH
33481: LD_INT 84
33483: PPUSH
33484: LD_VAR 0 1
33488: PPUSH
33489: CALL_OW 321
33493: PUSH
33494: LD_INT 2
33496: EQUAL
33497: ST_TO_ADDR
33498: GO 33639
33500: LD_INT 19
33502: DOUBLE
33503: EQUAL
33504: IFTRUE 33514
33506: LD_INT 23
33508: DOUBLE
33509: EQUAL
33510: IFTRUE 33514
33512: GO 33539
33514: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33515: LD_ADDR_VAR 0 3
33519: PUSH
33520: LD_INT 83
33522: PPUSH
33523: LD_VAR 0 1
33527: PPUSH
33528: CALL_OW 321
33532: PUSH
33533: LD_INT 2
33535: EQUAL
33536: ST_TO_ADDR
33537: GO 33639
33539: LD_INT 17
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33572
33547: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33548: LD_ADDR_VAR 0 3
33552: PUSH
33553: LD_INT 39
33555: PPUSH
33556: LD_VAR 0 1
33560: PPUSH
33561: CALL_OW 321
33565: PUSH
33566: LD_INT 2
33568: EQUAL
33569: ST_TO_ADDR
33570: GO 33639
33572: LD_INT 18
33574: DOUBLE
33575: EQUAL
33576: IFTRUE 33580
33578: GO 33605
33580: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33581: LD_ADDR_VAR 0 3
33585: PUSH
33586: LD_INT 40
33588: PPUSH
33589: LD_VAR 0 1
33593: PPUSH
33594: CALL_OW 321
33598: PUSH
33599: LD_INT 2
33601: EQUAL
33602: ST_TO_ADDR
33603: GO 33639
33605: LD_INT 27
33607: DOUBLE
33608: EQUAL
33609: IFTRUE 33613
33611: GO 33638
33613: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33614: LD_ADDR_VAR 0 3
33618: PUSH
33619: LD_INT 35
33621: PPUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 321
33631: PUSH
33632: LD_INT 2
33634: EQUAL
33635: ST_TO_ADDR
33636: GO 33639
33638: POP
// end ;
33639: LD_VAR 0 3
33643: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33644: LD_INT 0
33646: PPUSH
33647: PPUSH
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
33653: PPUSH
33654: PPUSH
33655: PPUSH
33656: PPUSH
// result := false ;
33657: LD_ADDR_VAR 0 6
33661: PUSH
33662: LD_INT 0
33664: ST_TO_ADDR
// if btype = b_depot then
33665: LD_VAR 0 2
33669: PUSH
33670: LD_INT 0
33672: EQUAL
33673: IFFALSE 33685
// begin result := true ;
33675: LD_ADDR_VAR 0 6
33679: PUSH
33680: LD_INT 1
33682: ST_TO_ADDR
// exit ;
33683: GO 34511
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33685: LD_VAR 0 1
33689: NOT
33690: PUSH
33691: LD_VAR 0 1
33695: PPUSH
33696: CALL_OW 266
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: IN
33711: NOT
33712: OR
33713: PUSH
33714: LD_VAR 0 2
33718: NOT
33719: OR
33720: PUSH
33721: LD_VAR 0 5
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: LD_INT 4
33740: PUSH
33741: LD_INT 5
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: IN
33752: NOT
33753: OR
33754: PUSH
33755: LD_VAR 0 3
33759: PPUSH
33760: LD_VAR 0 4
33764: PPUSH
33765: CALL_OW 488
33769: NOT
33770: OR
33771: IFFALSE 33775
// exit ;
33773: GO 34511
// side := GetSide ( depot ) ;
33775: LD_ADDR_VAR 0 9
33779: PUSH
33780: LD_VAR 0 1
33784: PPUSH
33785: CALL_OW 255
33789: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33790: LD_VAR 0 9
33794: PPUSH
33795: LD_VAR 0 2
33799: PPUSH
33800: CALL 33268 0 2
33804: NOT
33805: IFFALSE 33809
// exit ;
33807: GO 34511
// pom := GetBase ( depot ) ;
33809: LD_ADDR_VAR 0 10
33813: PUSH
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL_OW 274
33823: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33824: LD_ADDR_VAR 0 11
33828: PUSH
33829: LD_VAR 0 2
33833: PPUSH
33834: LD_VAR 0 1
33838: PPUSH
33839: CALL_OW 248
33843: PPUSH
33844: CALL_OW 450
33848: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33849: LD_VAR 0 10
33853: PPUSH
33854: LD_INT 1
33856: PPUSH
33857: CALL_OW 275
33861: PUSH
33862: LD_VAR 0 11
33866: PUSH
33867: LD_INT 1
33869: ARRAY
33870: GREATEREQUAL
33871: PUSH
33872: LD_VAR 0 10
33876: PPUSH
33877: LD_INT 2
33879: PPUSH
33880: CALL_OW 275
33884: PUSH
33885: LD_VAR 0 11
33889: PUSH
33890: LD_INT 2
33892: ARRAY
33893: GREATEREQUAL
33894: AND
33895: PUSH
33896: LD_VAR 0 10
33900: PPUSH
33901: LD_INT 3
33903: PPUSH
33904: CALL_OW 275
33908: PUSH
33909: LD_VAR 0 11
33913: PUSH
33914: LD_INT 3
33916: ARRAY
33917: GREATEREQUAL
33918: AND
33919: NOT
33920: IFFALSE 33924
// exit ;
33922: GO 34511
// if GetBType ( depot ) = b_depot then
33924: LD_VAR 0 1
33928: PPUSH
33929: CALL_OW 266
33933: PUSH
33934: LD_INT 0
33936: EQUAL
33937: IFFALSE 33949
// dist := 28 else
33939: LD_ADDR_VAR 0 14
33943: PUSH
33944: LD_INT 28
33946: ST_TO_ADDR
33947: GO 33957
// dist := 36 ;
33949: LD_ADDR_VAR 0 14
33953: PUSH
33954: LD_INT 36
33956: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33957: LD_VAR 0 1
33961: PPUSH
33962: LD_VAR 0 3
33966: PPUSH
33967: LD_VAR 0 4
33971: PPUSH
33972: CALL_OW 297
33976: PUSH
33977: LD_VAR 0 14
33981: GREATER
33982: IFFALSE 33986
// exit ;
33984: GO 34511
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33986: LD_ADDR_VAR 0 12
33990: PUSH
33991: LD_VAR 0 2
33995: PPUSH
33996: LD_VAR 0 3
34000: PPUSH
34001: LD_VAR 0 4
34005: PPUSH
34006: LD_VAR 0 5
34010: PPUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 248
34020: PPUSH
34021: LD_INT 0
34023: PPUSH
34024: CALL 34516 0 6
34028: ST_TO_ADDR
// if not hexes then
34029: LD_VAR 0 12
34033: NOT
34034: IFFALSE 34038
// exit ;
34036: GO 34511
// hex := GetHexInfo ( x , y ) ;
34038: LD_ADDR_VAR 0 15
34042: PUSH
34043: LD_VAR 0 3
34047: PPUSH
34048: LD_VAR 0 4
34052: PPUSH
34053: CALL_OW 546
34057: ST_TO_ADDR
// if hex [ 1 ] then
34058: LD_VAR 0 15
34062: PUSH
34063: LD_INT 1
34065: ARRAY
34066: IFFALSE 34070
// exit ;
34068: GO 34511
// height := hex [ 2 ] ;
34070: LD_ADDR_VAR 0 13
34074: PUSH
34075: LD_VAR 0 15
34079: PUSH
34080: LD_INT 2
34082: ARRAY
34083: ST_TO_ADDR
// for i = 1 to hexes do
34084: LD_ADDR_VAR 0 7
34088: PUSH
34089: DOUBLE
34090: LD_INT 1
34092: DEC
34093: ST_TO_ADDR
34094: LD_VAR 0 12
34098: PUSH
34099: FOR_TO
34100: IFFALSE 34430
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34102: LD_VAR 0 12
34106: PUSH
34107: LD_VAR 0 7
34111: ARRAY
34112: PUSH
34113: LD_INT 1
34115: ARRAY
34116: PPUSH
34117: LD_VAR 0 12
34121: PUSH
34122: LD_VAR 0 7
34126: ARRAY
34127: PUSH
34128: LD_INT 2
34130: ARRAY
34131: PPUSH
34132: CALL_OW 488
34136: NOT
34137: PUSH
34138: LD_VAR 0 12
34142: PUSH
34143: LD_VAR 0 7
34147: ARRAY
34148: PUSH
34149: LD_INT 1
34151: ARRAY
34152: PPUSH
34153: LD_VAR 0 12
34157: PUSH
34158: LD_VAR 0 7
34162: ARRAY
34163: PUSH
34164: LD_INT 2
34166: ARRAY
34167: PPUSH
34168: CALL_OW 428
34172: PUSH
34173: LD_INT 0
34175: GREATER
34176: OR
34177: PUSH
34178: LD_VAR 0 12
34182: PUSH
34183: LD_VAR 0 7
34187: ARRAY
34188: PUSH
34189: LD_INT 1
34191: ARRAY
34192: PPUSH
34193: LD_VAR 0 12
34197: PUSH
34198: LD_VAR 0 7
34202: ARRAY
34203: PUSH
34204: LD_INT 2
34206: ARRAY
34207: PPUSH
34208: CALL_OW 351
34212: OR
34213: IFFALSE 34219
// exit ;
34215: POP
34216: POP
34217: GO 34511
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34219: LD_ADDR_VAR 0 8
34223: PUSH
34224: LD_VAR 0 12
34228: PUSH
34229: LD_VAR 0 7
34233: ARRAY
34234: PUSH
34235: LD_INT 1
34237: ARRAY
34238: PPUSH
34239: LD_VAR 0 12
34243: PUSH
34244: LD_VAR 0 7
34248: ARRAY
34249: PUSH
34250: LD_INT 2
34252: ARRAY
34253: PPUSH
34254: CALL_OW 546
34258: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34259: LD_VAR 0 8
34263: PUSH
34264: LD_INT 1
34266: ARRAY
34267: PUSH
34268: LD_VAR 0 8
34272: PUSH
34273: LD_INT 2
34275: ARRAY
34276: PUSH
34277: LD_VAR 0 13
34281: PUSH
34282: LD_INT 2
34284: PLUS
34285: GREATER
34286: OR
34287: PUSH
34288: LD_VAR 0 8
34292: PUSH
34293: LD_INT 2
34295: ARRAY
34296: PUSH
34297: LD_VAR 0 13
34301: PUSH
34302: LD_INT 2
34304: MINUS
34305: LESS
34306: OR
34307: PUSH
34308: LD_VAR 0 8
34312: PUSH
34313: LD_INT 3
34315: ARRAY
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: LD_INT 8
34322: PUSH
34323: LD_INT 9
34325: PUSH
34326: LD_INT 10
34328: PUSH
34329: LD_INT 11
34331: PUSH
34332: LD_INT 12
34334: PUSH
34335: LD_INT 13
34337: PUSH
34338: LD_INT 16
34340: PUSH
34341: LD_INT 17
34343: PUSH
34344: LD_INT 18
34346: PUSH
34347: LD_INT 19
34349: PUSH
34350: LD_INT 20
34352: PUSH
34353: LD_INT 21
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: IN
34371: NOT
34372: OR
34373: PUSH
34374: LD_VAR 0 8
34378: PUSH
34379: LD_INT 5
34381: ARRAY
34382: NOT
34383: OR
34384: PUSH
34385: LD_VAR 0 8
34389: PUSH
34390: LD_INT 6
34392: ARRAY
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: LD_INT 7
34402: PUSH
34403: LD_INT 9
34405: PUSH
34406: LD_INT 10
34408: PUSH
34409: LD_INT 11
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: IN
34420: NOT
34421: OR
34422: IFFALSE 34428
// exit ;
34424: POP
34425: POP
34426: GO 34511
// end ;
34428: GO 34099
34430: POP
34431: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34432: LD_VAR 0 9
34436: PPUSH
34437: LD_VAR 0 3
34441: PPUSH
34442: LD_VAR 0 4
34446: PPUSH
34447: LD_INT 20
34449: PPUSH
34450: CALL 26434 0 4
34454: PUSH
34455: LD_INT 4
34457: ARRAY
34458: IFFALSE 34462
// exit ;
34460: GO 34511
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34462: LD_VAR 0 2
34466: PUSH
34467: LD_INT 29
34469: PUSH
34470: LD_INT 30
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: IN
34477: PUSH
34478: LD_VAR 0 3
34482: PPUSH
34483: LD_VAR 0 4
34487: PPUSH
34488: LD_VAR 0 9
34492: PPUSH
34493: CALL_OW 440
34497: NOT
34498: AND
34499: IFFALSE 34503
// exit ;
34501: GO 34511
// result := true ;
34503: LD_ADDR_VAR 0 6
34507: PUSH
34508: LD_INT 1
34510: ST_TO_ADDR
// end ;
34511: LD_VAR 0 6
34515: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34516: LD_INT 0
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
34550: PPUSH
34551: PPUSH
34552: PPUSH
34553: PPUSH
34554: PPUSH
34555: PPUSH
34556: PPUSH
34557: PPUSH
34558: PPUSH
34559: PPUSH
34560: PPUSH
34561: PPUSH
34562: PPUSH
34563: PPUSH
34564: PPUSH
34565: PPUSH
34566: PPUSH
34567: PPUSH
34568: PPUSH
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
34573: PPUSH
34574: PPUSH
34575: PPUSH
// result = [ ] ;
34576: LD_ADDR_VAR 0 7
34580: PUSH
34581: EMPTY
34582: ST_TO_ADDR
// temp_list = [ ] ;
34583: LD_ADDR_VAR 0 9
34587: PUSH
34588: EMPTY
34589: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34590: LD_VAR 0 4
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: LD_INT 3
34606: PUSH
34607: LD_INT 4
34609: PUSH
34610: LD_INT 5
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: IN
34621: NOT
34622: PUSH
34623: LD_VAR 0 1
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: IN
34638: PUSH
34639: LD_VAR 0 5
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: LIST
34657: IN
34658: NOT
34659: AND
34660: OR
34661: IFFALSE 34665
// exit ;
34663: GO 53056
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34665: LD_VAR 0 1
34669: PUSH
34670: LD_INT 6
34672: PUSH
34673: LD_INT 7
34675: PUSH
34676: LD_INT 8
34678: PUSH
34679: LD_INT 13
34681: PUSH
34682: LD_INT 12
34684: PUSH
34685: LD_INT 15
34687: PUSH
34688: LD_INT 11
34690: PUSH
34691: LD_INT 14
34693: PUSH
34694: LD_INT 10
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: IN
34708: IFFALSE 34718
// btype = b_lab ;
34710: LD_ADDR_VAR 0 1
34714: PUSH
34715: LD_INT 6
34717: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34718: LD_VAR 0 6
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: IN
34737: NOT
34738: PUSH
34739: LD_VAR 0 1
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 3
34755: PUSH
34756: LD_INT 6
34758: PUSH
34759: LD_INT 36
34761: PUSH
34762: LD_INT 4
34764: PUSH
34765: LD_INT 5
34767: PUSH
34768: LD_INT 31
34770: PUSH
34771: LD_INT 32
34773: PUSH
34774: LD_INT 33
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: IN
34790: NOT
34791: PUSH
34792: LD_VAR 0 6
34796: PUSH
34797: LD_INT 1
34799: EQUAL
34800: AND
34801: OR
34802: PUSH
34803: LD_VAR 0 1
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: LD_INT 3
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: IN
34818: NOT
34819: PUSH
34820: LD_VAR 0 6
34824: PUSH
34825: LD_INT 2
34827: EQUAL
34828: AND
34829: OR
34830: IFFALSE 34840
// mode = 0 ;
34832: LD_ADDR_VAR 0 6
34836: PUSH
34837: LD_INT 0
34839: ST_TO_ADDR
// case mode of 0 :
34840: LD_VAR 0 6
34844: PUSH
34845: LD_INT 0
34847: DOUBLE
34848: EQUAL
34849: IFTRUE 34853
34851: GO 46306
34853: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34854: LD_ADDR_VAR 0 11
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: LD_INT 2
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 2
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: LD_INT 1
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: LD_INT 2
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 3
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 3
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35047: LD_ADDR_VAR 0 12
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: NEG
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: NEG
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 3
35204: NEG
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 3
35215: NEG
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35243: LD_ADDR_VAR 0 13
35247: PUSH
35248: LD_INT 0
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 1
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: NEG
35325: PUSH
35326: LD_INT 2
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 2
35378: NEG
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 2
35390: NEG
35391: PUSH
35392: LD_INT 3
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 3
35402: NEG
35403: PUSH
35404: LD_INT 2
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 3
35414: NEG
35415: PUSH
35416: LD_INT 3
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35442: LD_ADDR_VAR 0 14
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 2
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: LD_INT 3
35592: NEG
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: LD_INT 3
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35638: LD_ADDR_VAR 0 15
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 2
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 3
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 3
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35831: LD_ADDR_VAR 0 16
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: LD_INT 2
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 3
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 3
35988: PUSH
35989: LD_INT 3
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: LD_INT 3
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36024: LD_ADDR_VAR 0 17
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 1
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: LD_INT 2
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: LD_INT 2
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: NEG
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 2
36211: NEG
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: NEG
36224: PUSH
36225: LD_INT 2
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36254: LD_ADDR_VAR 0 18
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 2
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 2
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: LD_INT 2
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 2
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36484: LD_ADDR_VAR 0 19
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 1
36542: NEG
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: NEG
36566: PUSH
36567: LD_INT 2
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 2
36580: NEG
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 2
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: NEG
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 2
36671: NEG
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: NEG
36684: PUSH
36685: LD_INT 2
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36714: LD_ADDR_VAR 0 20
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 2
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 2
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 2
36913: NEG
36914: PUSH
36915: LD_INT 2
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36944: LD_ADDR_VAR 0 21
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: LD_INT 2
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: LD_INT 2
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 2
37079: PUSH
37080: LD_INT 2
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: LD_INT 2
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 2
37120: NEG
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: NEG
37144: PUSH
37145: LD_INT 2
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37174: LD_ADDR_VAR 0 22
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 2
37350: NEG
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 2
37361: NEG
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: LD_INT 2
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37404: LD_ADDR_VAR 0 23
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: LD_INT 2
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: NEG
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: LD_INT 2
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: LD_INT 3
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 3
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 2
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37684: LD_ADDR_VAR 0 24
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 2
37860: NEG
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: NEG
37872: PUSH
37873: LD_INT 1
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: LD_INT 2
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 3
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37960: LD_ADDR_VAR 0 25
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 2
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: NEG
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 3
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: LD_INT 2
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: LD_INT 3
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38234: LD_ADDR_VAR 0 26
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 1
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 1
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: LD_INT 2
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: LD_INT 3
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 2
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38510: LD_ADDR_VAR 0 27
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 2
38697: NEG
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 3
38743: NEG
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 3
38755: NEG
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38790: LD_ADDR_VAR 0 28
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: LD_INT 2
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 2
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 0
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 1
38955: NEG
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: NEG
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: NEG
38990: PUSH
38991: LD_INT 2
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: NEG
39002: PUSH
39003: LD_INT 3
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 3
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 3
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 3
39037: NEG
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39072: LD_ADDR_VAR 0 29
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 2
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: NEG
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: LD_INT 3
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 3
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 2
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 3
39316: NEG
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39351: LD_ADDR_VAR 0 30
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 2
39517: NEG
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 3
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: LD_INT 2
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 3
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: LD_INT 3
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 3
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39629: LD_ADDR_VAR 0 31
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: LD_INT 3
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 2
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 3
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39907: LD_ADDR_VAR 0 32
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: LD_INT 1
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 0
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 2
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 3
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: PUSH
40130: LD_INT 3
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 3
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40185: LD_ADDR_VAR 0 33
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: LD_INT 3
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 3
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 3
40429: NEG
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40464: LD_ADDR_VAR 0 34
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: LD_INT 2
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 3
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 3
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: LD_INT 3
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 3
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40744: LD_ADDR_VAR 0 35
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40856: LD_ADDR_VAR 0 36
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 2
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40968: LD_ADDR_VAR 0 37
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41080: LD_ADDR_VAR 0 38
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: NEG
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41192: LD_ADDR_VAR 0 39
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41304: LD_ADDR_VAR 0 40
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41416: LD_ADDR_VAR 0 41
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 2
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 3
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 3
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: LD_INT 3
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 3
41690: NEG
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: NEG
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: NEG
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 3
41725: NEG
41726: PUSH
41727: LD_INT 3
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41766: LD_ADDR_VAR 0 42
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 3
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: LD_INT 3
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: LD_INT 3
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 3
42063: NEG
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: NEG
42076: PUSH
42077: LD_INT 3
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42116: LD_ADDR_VAR 0 43
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 3
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 3
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42464: LD_ADDR_VAR 0 44
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 2
42619: NEG
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: NEG
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: NEG
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: LD_INT 3
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 3
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: LD_INT 3
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: PUSH
42718: LD_INT 3
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 3
42738: NEG
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: NEG
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 3
42773: NEG
42774: PUSH
42775: LD_INT 3
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42814: LD_ADDR_VAR 0 45
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 3
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 3
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 3
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: LD_INT 3
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: LD_INT 3
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 3
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: NEG
43124: PUSH
43125: LD_INT 3
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43164: LD_ADDR_VAR 0 46
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 3
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 3
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 3
43460: NEG
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43512: LD_ADDR_VAR 0 47
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43663: LD_ADDR_VAR 0 48
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43810: LD_ADDR_VAR 0 49
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43954: LD_ADDR_VAR 0 50
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44098: LD_ADDR_VAR 0 51
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: NEG
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44245: LD_ADDR_VAR 0 52
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44396: LD_ADDR_VAR 0 53
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 2
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44626: LD_ADDR_VAR 0 54
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 2
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 2
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: NEG
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44856: LD_ADDR_VAR 0 55
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45086: LD_ADDR_VAR 0 56
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 2
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45316: LD_ADDR_VAR 0 57
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45546: LD_ADDR_VAR 0 58
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45776: LD_ADDR_VAR 0 59
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45864: LD_ADDR_VAR 0 60
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45952: LD_ADDR_VAR 0 61
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46040: LD_ADDR_VAR 0 62
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46128: LD_ADDR_VAR 0 63
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46216: LD_ADDR_VAR 0 64
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// end ; 1 :
46304: GO 52201
46306: LD_INT 1
46308: DOUBLE
46309: EQUAL
46310: IFTRUE 46314
46312: GO 48937
46314: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46315: LD_ADDR_VAR 0 11
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 3
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 3
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: LIST
46358: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46359: LD_ADDR_VAR 0 12
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 3
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46400: LD_ADDR_VAR 0 13
46404: PUSH
46405: LD_INT 3
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: LIST
46439: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46440: LD_ADDR_VAR 0 14
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 3
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46481: LD_ADDR_VAR 0 15
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46525: LD_ADDR_VAR 0 16
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 3
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 3
46544: NEG
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: LD_INT 3
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46571: LD_ADDR_VAR 0 17
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46615: LD_ADDR_VAR 0 18
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: LIST
46655: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46656: LD_ADDR_VAR 0 19
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: LIST
46695: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46696: LD_ADDR_VAR 0 20
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 3
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 3
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: LIST
46736: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46737: LD_ADDR_VAR 0 21
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 3
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: LIST
46780: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46781: LD_ADDR_VAR 0 22
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 3
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: NEG
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 3
46812: NEG
46813: PUSH
46814: LD_INT 3
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46827: LD_ADDR_VAR 0 23
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 3
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 4
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: LIST
46870: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46871: LD_ADDR_VAR 0 24
46875: PUSH
46876: LD_INT 3
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 3
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 4
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46912: LD_ADDR_VAR 0 25
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: LD_INT 3
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 4
46929: PUSH
46930: LD_INT 3
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: LD_INT 4
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46952: LD_ADDR_VAR 0 26
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 3
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 4
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 3
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46993: LD_ADDR_VAR 0 27
46997: PUSH
46998: LD_INT 3
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 4
47022: NEG
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47037: LD_ADDR_VAR 0 28
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: LD_INT 4
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 4
47068: NEG
47069: PUSH
47070: LD_INT 3
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47083: LD_ADDR_VAR 0 29
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: LD_INT 3
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 4
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 4
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 5
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 5
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 4
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 6
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 6
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 5
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47238: LD_ADDR_VAR 0 30
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 4
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 4
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 4
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 5
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 5
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 5
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 6
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 6
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47381: LD_ADDR_VAR 0 31
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: LD_INT 3
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 4
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 4
47428: PUSH
47429: LD_INT 4
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: LD_INT 4
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 5
47448: PUSH
47449: LD_INT 4
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 5
47458: PUSH
47459: LD_INT 5
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 4
47468: PUSH
47469: LD_INT 5
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 6
47478: PUSH
47479: LD_INT 5
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 6
47488: PUSH
47489: LD_INT 6
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 5
47498: PUSH
47499: LD_INT 6
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47520: LD_ADDR_VAR 0 32
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 3
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 3
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: LD_INT 4
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 4
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: LD_INT 3
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 5
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 5
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 4
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 6
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 6
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 5
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47663: LD_ADDR_VAR 0 33
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 3
47681: NEG
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 3
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 4
47715: NEG
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 4
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 4
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 5
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 5
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 5
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 6
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 6
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47818: LD_ADDR_VAR 0 34
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: LD_INT 3
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 3
47861: NEG
47862: PUSH
47863: LD_INT 4
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 4
47873: NEG
47874: PUSH
47875: LD_INT 3
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 4
47885: NEG
47886: PUSH
47887: LD_INT 4
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 4
47897: NEG
47898: PUSH
47899: LD_INT 5
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 5
47909: NEG
47910: PUSH
47911: LD_INT 4
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 5
47921: NEG
47922: PUSH
47923: LD_INT 5
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 5
47933: NEG
47934: PUSH
47935: LD_INT 6
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 6
47945: NEG
47946: PUSH
47947: LD_INT 5
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 6
47957: NEG
47958: PUSH
47959: LD_INT 6
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47981: LD_ADDR_VAR 0 41
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: LIST
48024: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48025: LD_ADDR_VAR 0 42
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 3
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48066: LD_ADDR_VAR 0 43
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: LD_INT 2
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48106: LD_ADDR_VAR 0 44
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: LIST
48146: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48147: LD_ADDR_VAR 0 45
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48191: LD_ADDR_VAR 0 46
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48237: LD_ADDR_VAR 0 47
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 3
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48270: LD_ADDR_VAR 0 48
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48301: LD_ADDR_VAR 0 49
48305: PUSH
48306: LD_INT 3
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48330: LD_ADDR_VAR 0 50
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 3
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48359: LD_ADDR_VAR 0 51
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48390: LD_ADDR_VAR 0 52
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48423: LD_ADDR_VAR 0 53
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 3
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 3
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48467: LD_ADDR_VAR 0 54
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 3
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48508: LD_ADDR_VAR 0 55
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: LD_INT 2
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 3
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48548: LD_ADDR_VAR 0 56
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: LIST
48588: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48589: LD_ADDR_VAR 0 57
48593: PUSH
48594: LD_INT 2
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48633: LD_ADDR_VAR 0 58
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48679: LD_ADDR_VAR 0 59
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48723: LD_ADDR_VAR 0 60
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48764: LD_ADDR_VAR 0 61
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48804: LD_ADDR_VAR 0 62
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: LIST
48844: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48845: LD_ADDR_VAR 0 63
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: LIST
48888: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48889: LD_ADDR_VAR 0 64
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: ST_TO_ADDR
// end ; 2 :
48935: GO 52201
48937: LD_INT 2
48939: DOUBLE
48940: EQUAL
48941: IFTRUE 48945
48943: GO 52200
48945: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48946: LD_ADDR_VAR 0 29
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 4
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 5
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 5
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 4
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 3
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 3
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 5
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 3
49046: PUSH
49047: LD_INT 3
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 4
49066: PUSH
49067: LD_INT 3
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 4
49076: PUSH
49077: LD_INT 4
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: LD_INT 4
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 3
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 4
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: LD_INT 4
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 4
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: LD_INT 4
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 5
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 5
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: NEG
49187: PUSH
49188: LD_INT 4
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 3
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 5
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: NEG
49219: PUSH
49220: LD_INT 3
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 3
49229: NEG
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 3
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 4
49285: NEG
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 4
49296: NEG
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 4
49308: NEG
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 4
49331: NEG
49332: PUSH
49333: LD_INT 4
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 4
49343: NEG
49344: PUSH
49345: LD_INT 5
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 3
49355: NEG
49356: PUSH
49357: LD_INT 4
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 3
49367: NEG
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 4
49379: NEG
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 5
49391: NEG
49392: PUSH
49393: LD_INT 4
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 5
49403: NEG
49404: PUSH
49405: LD_INT 5
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 3
49415: NEG
49416: PUSH
49417: LD_INT 5
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 5
49427: NEG
49428: PUSH
49429: LD_INT 3
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49484: LD_ADDR_VAR 0 30
49488: PUSH
49489: LD_INT 4
49491: PUSH
49492: LD_INT 4
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 4
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 5
49511: PUSH
49512: LD_INT 4
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 5
49521: PUSH
49522: LD_INT 5
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 4
49531: PUSH
49532: LD_INT 5
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 3
49541: PUSH
49542: LD_INT 4
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: LD_INT 3
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 5
49561: PUSH
49562: LD_INT 3
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 3
49571: PUSH
49572: LD_INT 5
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 3
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 3
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 4
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 4
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: LD_INT 4
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 4
49674: NEG
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 4
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 4
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 5
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 5
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 5
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 3
49776: NEG
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: NEG
49789: PUSH
49790: LD_INT 4
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: LD_INT 3
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: NEG
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: NEG
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 4
49836: NEG
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 4
49848: NEG
49849: PUSH
49850: LD_INT 4
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 4
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 4
49872: NEG
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 4
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 5
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 4
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 3
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: LD_INT 4
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: LD_INT 5
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: LD_INT 3
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: LD_INT 5
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50031: LD_ADDR_VAR 0 31
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 4
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 4
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 5
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 5
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 4
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 3
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: LD_INT 5
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: LD_INT 3
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: NEG
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 4
50187: NEG
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 4
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 4
50210: NEG
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 4
50233: NEG
50234: PUSH
50235: LD_INT 4
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 4
50245: NEG
50246: PUSH
50247: LD_INT 5
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: NEG
50258: PUSH
50259: LD_INT 4
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 4
50281: NEG
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 5
50293: NEG
50294: PUSH
50295: LD_INT 4
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 5
50305: NEG
50306: PUSH
50307: LD_INT 5
50309: NEG
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 3
50317: NEG
50318: PUSH
50319: LD_INT 5
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 5
50329: NEG
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 4
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 4
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 4
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 4
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 5
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 5
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 4
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: LD_INT 2
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 5
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50581: LD_ADDR_VAR 0 32
50585: PUSH
50586: LD_INT 4
50588: NEG
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 4
50599: NEG
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 4
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 5
50644: NEG
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 5
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 5
50667: NEG
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 3
50690: NEG
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: NEG
50703: PUSH
50704: LD_INT 4
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: LD_INT 3
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 3
50738: NEG
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 4
50750: NEG
50751: PUSH
50752: LD_INT 3
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 4
50762: NEG
50763: PUSH
50764: LD_INT 4
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: LD_INT 4
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 4
50786: NEG
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 4
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 5
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: LD_INT 4
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 3
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 4
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: LD_INT 5
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: NEG
50889: PUSH
50890: LD_INT 5
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 4
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 4
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 4
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 4
50993: PUSH
50994: LD_INT 4
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 4
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 5
51013: PUSH
51014: LD_INT 4
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 5
51023: PUSH
51024: LD_INT 5
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 4
51033: PUSH
51034: LD_INT 5
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: LD_INT 4
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: LD_INT 3
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 5
51063: PUSH
51064: LD_INT 3
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: LD_INT 5
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51128: LD_ADDR_VAR 0 33
51132: PUSH
51133: LD_INT 4
51135: NEG
51136: PUSH
51137: LD_INT 4
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 4
51147: NEG
51148: PUSH
51149: LD_INT 5
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: LD_INT 4
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: NEG
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 4
51183: NEG
51184: PUSH
51185: LD_INT 3
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 5
51195: NEG
51196: PUSH
51197: LD_INT 4
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 5
51207: NEG
51208: PUSH
51209: LD_INT 5
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: LD_INT 5
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 5
51231: NEG
51232: PUSH
51233: LD_INT 3
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: LD_INT 4
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 3
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 2
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 3
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 4
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: LD_INT 4
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 4
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 4
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 5
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 5
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 4
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 5
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: PUSH
51439: LD_INT 3
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 3
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 4
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 4
51468: PUSH
51469: LD_INT 4
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 3
51478: PUSH
51479: LD_INT 4
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: LD_INT 3
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 4
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: LD_INT 4
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 4
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 4
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 5
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 5
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 4
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 5
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: NEG
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51666: LD_ADDR_VAR 0 34
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 4
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 5
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 4
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 3
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 3
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: LD_INT 4
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 5
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 5
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 4
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 4
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 4
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 4
51868: PUSH
51869: LD_INT 4
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 4
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 5
51888: PUSH
51889: LD_INT 4
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 5
51898: PUSH
51899: LD_INT 5
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 4
51908: PUSH
51909: LD_INT 5
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 4
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 5
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 3
51948: PUSH
51949: LD_INT 5
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 3
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: LD_INT 4
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 4
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: PUSH
52031: LD_INT 4
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 4
52051: NEG
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: NEG
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 4
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 5
52107: NEG
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 5
52118: NEG
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 5
52130: NEG
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 3
52142: NEG
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// end ; end ;
52198: GO 52201
52200: POP
// case btype of b_depot , b_warehouse :
52201: LD_VAR 0 1
52205: PUSH
52206: LD_INT 0
52208: DOUBLE
52209: EQUAL
52210: IFTRUE 52220
52212: LD_INT 1
52214: DOUBLE
52215: EQUAL
52216: IFTRUE 52220
52218: GO 52421
52220: POP
// case nation of nation_american :
52221: LD_VAR 0 5
52225: PUSH
52226: LD_INT 1
52228: DOUBLE
52229: EQUAL
52230: IFTRUE 52234
52232: GO 52290
52234: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52235: LD_ADDR_VAR 0 9
52239: PUSH
52240: LD_VAR 0 11
52244: PUSH
52245: LD_VAR 0 12
52249: PUSH
52250: LD_VAR 0 13
52254: PUSH
52255: LD_VAR 0 14
52259: PUSH
52260: LD_VAR 0 15
52264: PUSH
52265: LD_VAR 0 16
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: PUSH
52278: LD_VAR 0 4
52282: PUSH
52283: LD_INT 1
52285: PLUS
52286: ARRAY
52287: ST_TO_ADDR
52288: GO 52419
52290: LD_INT 2
52292: DOUBLE
52293: EQUAL
52294: IFTRUE 52298
52296: GO 52354
52298: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52299: LD_ADDR_VAR 0 9
52303: PUSH
52304: LD_VAR 0 17
52308: PUSH
52309: LD_VAR 0 18
52313: PUSH
52314: LD_VAR 0 19
52318: PUSH
52319: LD_VAR 0 20
52323: PUSH
52324: LD_VAR 0 21
52328: PUSH
52329: LD_VAR 0 22
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: PUSH
52342: LD_VAR 0 4
52346: PUSH
52347: LD_INT 1
52349: PLUS
52350: ARRAY
52351: ST_TO_ADDR
52352: GO 52419
52354: LD_INT 3
52356: DOUBLE
52357: EQUAL
52358: IFTRUE 52362
52360: GO 52418
52362: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52363: LD_ADDR_VAR 0 9
52367: PUSH
52368: LD_VAR 0 23
52372: PUSH
52373: LD_VAR 0 24
52377: PUSH
52378: LD_VAR 0 25
52382: PUSH
52383: LD_VAR 0 26
52387: PUSH
52388: LD_VAR 0 27
52392: PUSH
52393: LD_VAR 0 28
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: PUSH
52406: LD_VAR 0 4
52410: PUSH
52411: LD_INT 1
52413: PLUS
52414: ARRAY
52415: ST_TO_ADDR
52416: GO 52419
52418: POP
52419: GO 52974
52421: LD_INT 2
52423: DOUBLE
52424: EQUAL
52425: IFTRUE 52435
52427: LD_INT 3
52429: DOUBLE
52430: EQUAL
52431: IFTRUE 52435
52433: GO 52491
52435: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52436: LD_ADDR_VAR 0 9
52440: PUSH
52441: LD_VAR 0 29
52445: PUSH
52446: LD_VAR 0 30
52450: PUSH
52451: LD_VAR 0 31
52455: PUSH
52456: LD_VAR 0 32
52460: PUSH
52461: LD_VAR 0 33
52465: PUSH
52466: LD_VAR 0 34
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: PUSH
52479: LD_VAR 0 4
52483: PUSH
52484: LD_INT 1
52486: PLUS
52487: ARRAY
52488: ST_TO_ADDR
52489: GO 52974
52491: LD_INT 16
52493: DOUBLE
52494: EQUAL
52495: IFTRUE 52553
52497: LD_INT 17
52499: DOUBLE
52500: EQUAL
52501: IFTRUE 52553
52503: LD_INT 18
52505: DOUBLE
52506: EQUAL
52507: IFTRUE 52553
52509: LD_INT 19
52511: DOUBLE
52512: EQUAL
52513: IFTRUE 52553
52515: LD_INT 22
52517: DOUBLE
52518: EQUAL
52519: IFTRUE 52553
52521: LD_INT 20
52523: DOUBLE
52524: EQUAL
52525: IFTRUE 52553
52527: LD_INT 21
52529: DOUBLE
52530: EQUAL
52531: IFTRUE 52553
52533: LD_INT 23
52535: DOUBLE
52536: EQUAL
52537: IFTRUE 52553
52539: LD_INT 24
52541: DOUBLE
52542: EQUAL
52543: IFTRUE 52553
52545: LD_INT 25
52547: DOUBLE
52548: EQUAL
52549: IFTRUE 52553
52551: GO 52609
52553: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52554: LD_ADDR_VAR 0 9
52558: PUSH
52559: LD_VAR 0 35
52563: PUSH
52564: LD_VAR 0 36
52568: PUSH
52569: LD_VAR 0 37
52573: PUSH
52574: LD_VAR 0 38
52578: PUSH
52579: LD_VAR 0 39
52583: PUSH
52584: LD_VAR 0 40
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: PUSH
52597: LD_VAR 0 4
52601: PUSH
52602: LD_INT 1
52604: PLUS
52605: ARRAY
52606: ST_TO_ADDR
52607: GO 52974
52609: LD_INT 6
52611: DOUBLE
52612: EQUAL
52613: IFTRUE 52665
52615: LD_INT 7
52617: DOUBLE
52618: EQUAL
52619: IFTRUE 52665
52621: LD_INT 8
52623: DOUBLE
52624: EQUAL
52625: IFTRUE 52665
52627: LD_INT 13
52629: DOUBLE
52630: EQUAL
52631: IFTRUE 52665
52633: LD_INT 12
52635: DOUBLE
52636: EQUAL
52637: IFTRUE 52665
52639: LD_INT 15
52641: DOUBLE
52642: EQUAL
52643: IFTRUE 52665
52645: LD_INT 11
52647: DOUBLE
52648: EQUAL
52649: IFTRUE 52665
52651: LD_INT 14
52653: DOUBLE
52654: EQUAL
52655: IFTRUE 52665
52657: LD_INT 10
52659: DOUBLE
52660: EQUAL
52661: IFTRUE 52665
52663: GO 52721
52665: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52666: LD_ADDR_VAR 0 9
52670: PUSH
52671: LD_VAR 0 41
52675: PUSH
52676: LD_VAR 0 42
52680: PUSH
52681: LD_VAR 0 43
52685: PUSH
52686: LD_VAR 0 44
52690: PUSH
52691: LD_VAR 0 45
52695: PUSH
52696: LD_VAR 0 46
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: PUSH
52709: LD_VAR 0 4
52713: PUSH
52714: LD_INT 1
52716: PLUS
52717: ARRAY
52718: ST_TO_ADDR
52719: GO 52974
52721: LD_INT 36
52723: DOUBLE
52724: EQUAL
52725: IFTRUE 52729
52727: GO 52785
52729: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52730: LD_ADDR_VAR 0 9
52734: PUSH
52735: LD_VAR 0 47
52739: PUSH
52740: LD_VAR 0 48
52744: PUSH
52745: LD_VAR 0 49
52749: PUSH
52750: LD_VAR 0 50
52754: PUSH
52755: LD_VAR 0 51
52759: PUSH
52760: LD_VAR 0 52
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: PUSH
52773: LD_VAR 0 4
52777: PUSH
52778: LD_INT 1
52780: PLUS
52781: ARRAY
52782: ST_TO_ADDR
52783: GO 52974
52785: LD_INT 4
52787: DOUBLE
52788: EQUAL
52789: IFTRUE 52811
52791: LD_INT 5
52793: DOUBLE
52794: EQUAL
52795: IFTRUE 52811
52797: LD_INT 34
52799: DOUBLE
52800: EQUAL
52801: IFTRUE 52811
52803: LD_INT 37
52805: DOUBLE
52806: EQUAL
52807: IFTRUE 52811
52809: GO 52867
52811: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52812: LD_ADDR_VAR 0 9
52816: PUSH
52817: LD_VAR 0 53
52821: PUSH
52822: LD_VAR 0 54
52826: PUSH
52827: LD_VAR 0 55
52831: PUSH
52832: LD_VAR 0 56
52836: PUSH
52837: LD_VAR 0 57
52841: PUSH
52842: LD_VAR 0 58
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: PUSH
52855: LD_VAR 0 4
52859: PUSH
52860: LD_INT 1
52862: PLUS
52863: ARRAY
52864: ST_TO_ADDR
52865: GO 52974
52867: LD_INT 31
52869: DOUBLE
52870: EQUAL
52871: IFTRUE 52917
52873: LD_INT 32
52875: DOUBLE
52876: EQUAL
52877: IFTRUE 52917
52879: LD_INT 33
52881: DOUBLE
52882: EQUAL
52883: IFTRUE 52917
52885: LD_INT 27
52887: DOUBLE
52888: EQUAL
52889: IFTRUE 52917
52891: LD_INT 26
52893: DOUBLE
52894: EQUAL
52895: IFTRUE 52917
52897: LD_INT 28
52899: DOUBLE
52900: EQUAL
52901: IFTRUE 52917
52903: LD_INT 29
52905: DOUBLE
52906: EQUAL
52907: IFTRUE 52917
52909: LD_INT 30
52911: DOUBLE
52912: EQUAL
52913: IFTRUE 52917
52915: GO 52973
52917: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52918: LD_ADDR_VAR 0 9
52922: PUSH
52923: LD_VAR 0 59
52927: PUSH
52928: LD_VAR 0 60
52932: PUSH
52933: LD_VAR 0 61
52937: PUSH
52938: LD_VAR 0 62
52942: PUSH
52943: LD_VAR 0 63
52947: PUSH
52948: LD_VAR 0 64
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: PUSH
52961: LD_VAR 0 4
52965: PUSH
52966: LD_INT 1
52968: PLUS
52969: ARRAY
52970: ST_TO_ADDR
52971: GO 52974
52973: POP
// temp_list2 = [ ] ;
52974: LD_ADDR_VAR 0 10
52978: PUSH
52979: EMPTY
52980: ST_TO_ADDR
// for i in temp_list do
52981: LD_ADDR_VAR 0 8
52985: PUSH
52986: LD_VAR 0 9
52990: PUSH
52991: FOR_IN
52992: IFFALSE 53044
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52994: LD_ADDR_VAR 0 10
52998: PUSH
52999: LD_VAR 0 10
53003: PUSH
53004: LD_VAR 0 8
53008: PUSH
53009: LD_INT 1
53011: ARRAY
53012: PUSH
53013: LD_VAR 0 2
53017: PLUS
53018: PUSH
53019: LD_VAR 0 8
53023: PUSH
53024: LD_INT 2
53026: ARRAY
53027: PUSH
53028: LD_VAR 0 3
53032: PLUS
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: ADD
53041: ST_TO_ADDR
53042: GO 52991
53044: POP
53045: POP
// result = temp_list2 ;
53046: LD_ADDR_VAR 0 7
53050: PUSH
53051: LD_VAR 0 10
53055: ST_TO_ADDR
// end ;
53056: LD_VAR 0 7
53060: RET
// export function EnemyInRange ( unit , dist ) ; begin
53061: LD_INT 0
53063: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53064: LD_ADDR_VAR 0 3
53068: PUSH
53069: LD_VAR 0 1
53073: PPUSH
53074: CALL_OW 255
53078: PPUSH
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 250
53088: PPUSH
53089: LD_VAR 0 1
53093: PPUSH
53094: CALL_OW 251
53098: PPUSH
53099: LD_VAR 0 2
53103: PPUSH
53104: CALL 26434 0 4
53108: PUSH
53109: LD_INT 4
53111: ARRAY
53112: ST_TO_ADDR
// end ;
53113: LD_VAR 0 3
53117: RET
// export function PlayerSeeMe ( unit ) ; begin
53118: LD_INT 0
53120: PPUSH
// result := See ( your_side , unit ) ;
53121: LD_ADDR_VAR 0 2
53125: PUSH
53126: LD_OWVAR 2
53130: PPUSH
53131: LD_VAR 0 1
53135: PPUSH
53136: CALL_OW 292
53140: ST_TO_ADDR
// end ;
53141: LD_VAR 0 2
53145: RET
// export function ReverseDir ( unit ) ; begin
53146: LD_INT 0
53148: PPUSH
// if not unit then
53149: LD_VAR 0 1
53153: NOT
53154: IFFALSE 53158
// exit ;
53156: GO 53181
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53158: LD_ADDR_VAR 0 2
53162: PUSH
53163: LD_VAR 0 1
53167: PPUSH
53168: CALL_OW 254
53172: PUSH
53173: LD_INT 3
53175: PLUS
53176: PUSH
53177: LD_INT 6
53179: MOD
53180: ST_TO_ADDR
// end ;
53181: LD_VAR 0 2
53185: RET
// export function ReverseArray ( array ) ; var i ; begin
53186: LD_INT 0
53188: PPUSH
53189: PPUSH
// if not array then
53190: LD_VAR 0 1
53194: NOT
53195: IFFALSE 53199
// exit ;
53197: GO 53254
// result := [ ] ;
53199: LD_ADDR_VAR 0 2
53203: PUSH
53204: EMPTY
53205: ST_TO_ADDR
// for i := array downto 1 do
53206: LD_ADDR_VAR 0 3
53210: PUSH
53211: DOUBLE
53212: LD_VAR 0 1
53216: INC
53217: ST_TO_ADDR
53218: LD_INT 1
53220: PUSH
53221: FOR_DOWNTO
53222: IFFALSE 53252
// result := Join ( result , array [ i ] ) ;
53224: LD_ADDR_VAR 0 2
53228: PUSH
53229: LD_VAR 0 2
53233: PPUSH
53234: LD_VAR 0 1
53238: PUSH
53239: LD_VAR 0 3
53243: ARRAY
53244: PPUSH
53245: CALL 57910 0 2
53249: ST_TO_ADDR
53250: GO 53221
53252: POP
53253: POP
// end ;
53254: LD_VAR 0 2
53258: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53259: LD_INT 0
53261: PPUSH
53262: PPUSH
53263: PPUSH
53264: PPUSH
53265: PPUSH
53266: PPUSH
// if not unit or not hexes then
53267: LD_VAR 0 1
53271: NOT
53272: PUSH
53273: LD_VAR 0 2
53277: NOT
53278: OR
53279: IFFALSE 53283
// exit ;
53281: GO 53406
// dist := 9999 ;
53283: LD_ADDR_VAR 0 5
53287: PUSH
53288: LD_INT 9999
53290: ST_TO_ADDR
// for i = 1 to hexes do
53291: LD_ADDR_VAR 0 4
53295: PUSH
53296: DOUBLE
53297: LD_INT 1
53299: DEC
53300: ST_TO_ADDR
53301: LD_VAR 0 2
53305: PUSH
53306: FOR_TO
53307: IFFALSE 53394
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53309: LD_ADDR_VAR 0 6
53313: PUSH
53314: LD_VAR 0 1
53318: PPUSH
53319: LD_VAR 0 2
53323: PUSH
53324: LD_VAR 0 4
53328: ARRAY
53329: PUSH
53330: LD_INT 1
53332: ARRAY
53333: PPUSH
53334: LD_VAR 0 2
53338: PUSH
53339: LD_VAR 0 4
53343: ARRAY
53344: PUSH
53345: LD_INT 2
53347: ARRAY
53348: PPUSH
53349: CALL_OW 297
53353: ST_TO_ADDR
// if tdist < dist then
53354: LD_VAR 0 6
53358: PUSH
53359: LD_VAR 0 5
53363: LESS
53364: IFFALSE 53392
// begin hex := hexes [ i ] ;
53366: LD_ADDR_VAR 0 8
53370: PUSH
53371: LD_VAR 0 2
53375: PUSH
53376: LD_VAR 0 4
53380: ARRAY
53381: ST_TO_ADDR
// dist := tdist ;
53382: LD_ADDR_VAR 0 5
53386: PUSH
53387: LD_VAR 0 6
53391: ST_TO_ADDR
// end ; end ;
53392: GO 53306
53394: POP
53395: POP
// result := hex ;
53396: LD_ADDR_VAR 0 3
53400: PUSH
53401: LD_VAR 0 8
53405: ST_TO_ADDR
// end ;
53406: LD_VAR 0 3
53410: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53411: LD_INT 0
53413: PPUSH
53414: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53415: LD_VAR 0 1
53419: NOT
53420: PUSH
53421: LD_VAR 0 1
53425: PUSH
53426: LD_INT 21
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 23
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PPUSH
53450: CALL_OW 69
53454: IN
53455: NOT
53456: OR
53457: IFFALSE 53461
// exit ;
53459: GO 53508
// for i = 1 to 3 do
53461: LD_ADDR_VAR 0 3
53465: PUSH
53466: DOUBLE
53467: LD_INT 1
53469: DEC
53470: ST_TO_ADDR
53471: LD_INT 3
53473: PUSH
53474: FOR_TO
53475: IFFALSE 53506
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53477: LD_VAR 0 1
53481: PPUSH
53482: CALL_OW 250
53486: PPUSH
53487: LD_VAR 0 1
53491: PPUSH
53492: CALL_OW 251
53496: PPUSH
53497: LD_INT 1
53499: PPUSH
53500: CALL_OW 453
53504: GO 53474
53506: POP
53507: POP
// end ;
53508: LD_VAR 0 2
53512: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53513: LD_INT 0
53515: PPUSH
53516: PPUSH
53517: PPUSH
53518: PPUSH
53519: PPUSH
53520: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53521: LD_VAR 0 1
53525: NOT
53526: PUSH
53527: LD_VAR 0 2
53531: NOT
53532: OR
53533: PUSH
53534: LD_VAR 0 1
53538: PPUSH
53539: CALL_OW 314
53543: OR
53544: IFFALSE 53548
// exit ;
53546: GO 54015
// if GetLives ( i ) < 250 then
53548: LD_VAR 0 4
53552: PPUSH
53553: CALL_OW 256
53557: PUSH
53558: LD_INT 250
53560: LESS
53561: IFFALSE 53574
// begin ComAutodestruct ( i ) ;
53563: LD_VAR 0 4
53567: PPUSH
53568: CALL 53411 0 1
// exit ;
53572: GO 54015
// end ; x := GetX ( enemy_unit ) ;
53574: LD_ADDR_VAR 0 7
53578: PUSH
53579: LD_VAR 0 2
53583: PPUSH
53584: CALL_OW 250
53588: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53589: LD_ADDR_VAR 0 8
53593: PUSH
53594: LD_VAR 0 2
53598: PPUSH
53599: CALL_OW 251
53603: ST_TO_ADDR
// if not x or not y then
53604: LD_VAR 0 7
53608: NOT
53609: PUSH
53610: LD_VAR 0 8
53614: NOT
53615: OR
53616: IFFALSE 53620
// exit ;
53618: GO 54015
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53620: LD_ADDR_VAR 0 6
53624: PUSH
53625: LD_VAR 0 7
53629: PPUSH
53630: LD_INT 0
53632: PPUSH
53633: LD_INT 4
53635: PPUSH
53636: CALL_OW 272
53640: PUSH
53641: LD_VAR 0 8
53645: PPUSH
53646: LD_INT 0
53648: PPUSH
53649: LD_INT 4
53651: PPUSH
53652: CALL_OW 273
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_VAR 0 7
53665: PPUSH
53666: LD_INT 1
53668: PPUSH
53669: LD_INT 4
53671: PPUSH
53672: CALL_OW 272
53676: PUSH
53677: LD_VAR 0 8
53681: PPUSH
53682: LD_INT 1
53684: PPUSH
53685: LD_INT 4
53687: PPUSH
53688: CALL_OW 273
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_VAR 0 7
53701: PPUSH
53702: LD_INT 2
53704: PPUSH
53705: LD_INT 4
53707: PPUSH
53708: CALL_OW 272
53712: PUSH
53713: LD_VAR 0 8
53717: PPUSH
53718: LD_INT 2
53720: PPUSH
53721: LD_INT 4
53723: PPUSH
53724: CALL_OW 273
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_VAR 0 7
53737: PPUSH
53738: LD_INT 3
53740: PPUSH
53741: LD_INT 4
53743: PPUSH
53744: CALL_OW 272
53748: PUSH
53749: LD_VAR 0 8
53753: PPUSH
53754: LD_INT 3
53756: PPUSH
53757: LD_INT 4
53759: PPUSH
53760: CALL_OW 273
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_VAR 0 7
53773: PPUSH
53774: LD_INT 4
53776: PPUSH
53777: LD_INT 4
53779: PPUSH
53780: CALL_OW 272
53784: PUSH
53785: LD_VAR 0 8
53789: PPUSH
53790: LD_INT 4
53792: PPUSH
53793: LD_INT 4
53795: PPUSH
53796: CALL_OW 273
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_VAR 0 7
53809: PPUSH
53810: LD_INT 5
53812: PPUSH
53813: LD_INT 4
53815: PPUSH
53816: CALL_OW 272
53820: PUSH
53821: LD_VAR 0 8
53825: PPUSH
53826: LD_INT 5
53828: PPUSH
53829: LD_INT 4
53831: PPUSH
53832: CALL_OW 273
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: ST_TO_ADDR
// for i = tmp downto 1 do
53849: LD_ADDR_VAR 0 4
53853: PUSH
53854: DOUBLE
53855: LD_VAR 0 6
53859: INC
53860: ST_TO_ADDR
53861: LD_INT 1
53863: PUSH
53864: FOR_DOWNTO
53865: IFFALSE 53966
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53867: LD_VAR 0 6
53871: PUSH
53872: LD_VAR 0 4
53876: ARRAY
53877: PUSH
53878: LD_INT 1
53880: ARRAY
53881: PPUSH
53882: LD_VAR 0 6
53886: PUSH
53887: LD_VAR 0 4
53891: ARRAY
53892: PUSH
53893: LD_INT 2
53895: ARRAY
53896: PPUSH
53897: CALL_OW 488
53901: NOT
53902: PUSH
53903: LD_VAR 0 6
53907: PUSH
53908: LD_VAR 0 4
53912: ARRAY
53913: PUSH
53914: LD_INT 1
53916: ARRAY
53917: PPUSH
53918: LD_VAR 0 6
53922: PUSH
53923: LD_VAR 0 4
53927: ARRAY
53928: PUSH
53929: LD_INT 2
53931: ARRAY
53932: PPUSH
53933: CALL_OW 428
53937: PUSH
53938: LD_INT 0
53940: NONEQUAL
53941: OR
53942: IFFALSE 53964
// tmp := Delete ( tmp , i ) ;
53944: LD_ADDR_VAR 0 6
53948: PUSH
53949: LD_VAR 0 6
53953: PPUSH
53954: LD_VAR 0 4
53958: PPUSH
53959: CALL_OW 3
53963: ST_TO_ADDR
53964: GO 53864
53966: POP
53967: POP
// j := GetClosestHex ( unit , tmp ) ;
53968: LD_ADDR_VAR 0 5
53972: PUSH
53973: LD_VAR 0 1
53977: PPUSH
53978: LD_VAR 0 6
53982: PPUSH
53983: CALL 53259 0 2
53987: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53988: LD_VAR 0 1
53992: PPUSH
53993: LD_VAR 0 5
53997: PUSH
53998: LD_INT 1
54000: ARRAY
54001: PPUSH
54002: LD_VAR 0 5
54006: PUSH
54007: LD_INT 2
54009: ARRAY
54010: PPUSH
54011: CALL_OW 111
// end ;
54015: LD_VAR 0 3
54019: RET
// export function PrepareApemanSoldier ( ) ; begin
54020: LD_INT 0
54022: PPUSH
// uc_nation := 0 ;
54023: LD_ADDR_OWVAR 21
54027: PUSH
54028: LD_INT 0
54030: ST_TO_ADDR
// hc_sex := sex_male ;
54031: LD_ADDR_OWVAR 27
54035: PUSH
54036: LD_INT 1
54038: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54039: LD_ADDR_OWVAR 28
54043: PUSH
54044: LD_INT 15
54046: ST_TO_ADDR
// hc_gallery :=  ;
54047: LD_ADDR_OWVAR 33
54051: PUSH
54052: LD_STRING 
54054: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54055: LD_ADDR_OWVAR 31
54059: PUSH
54060: LD_INT 0
54062: PPUSH
54063: LD_INT 3
54065: PPUSH
54066: CALL_OW 12
54070: PUSH
54071: LD_INT 0
54073: PPUSH
54074: LD_INT 3
54076: PPUSH
54077: CALL_OW 12
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
// end ;
54094: LD_VAR 0 1
54098: RET
// export function PrepareApemanEngineer ( ) ; begin
54099: LD_INT 0
54101: PPUSH
// uc_nation := 0 ;
54102: LD_ADDR_OWVAR 21
54106: PUSH
54107: LD_INT 0
54109: ST_TO_ADDR
// hc_sex := sex_male ;
54110: LD_ADDR_OWVAR 27
54114: PUSH
54115: LD_INT 1
54117: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54118: LD_ADDR_OWVAR 28
54122: PUSH
54123: LD_INT 16
54125: ST_TO_ADDR
// hc_gallery :=  ;
54126: LD_ADDR_OWVAR 33
54130: PUSH
54131: LD_STRING 
54133: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54134: LD_ADDR_OWVAR 31
54138: PUSH
54139: LD_INT 0
54141: PPUSH
54142: LD_INT 3
54144: PPUSH
54145: CALL_OW 12
54149: PUSH
54150: LD_INT 0
54152: PPUSH
54153: LD_INT 3
54155: PPUSH
54156: CALL_OW 12
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// end ;
54173: LD_VAR 0 1
54177: RET
// export function PrepareApeman ( agressivity ) ; begin
54178: LD_INT 0
54180: PPUSH
// uc_side := 0 ;
54181: LD_ADDR_OWVAR 20
54185: PUSH
54186: LD_INT 0
54188: ST_TO_ADDR
// uc_nation := 0 ;
54189: LD_ADDR_OWVAR 21
54193: PUSH
54194: LD_INT 0
54196: ST_TO_ADDR
// hc_sex := sex_male ;
54197: LD_ADDR_OWVAR 27
54201: PUSH
54202: LD_INT 1
54204: ST_TO_ADDR
// hc_class := class_apeman ;
54205: LD_ADDR_OWVAR 28
54209: PUSH
54210: LD_INT 12
54212: ST_TO_ADDR
// hc_gallery :=  ;
54213: LD_ADDR_OWVAR 33
54217: PUSH
54218: LD_STRING 
54220: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54221: LD_ADDR_OWVAR 35
54225: PUSH
54226: LD_VAR 0 1
54230: NEG
54231: PPUSH
54232: LD_VAR 0 1
54236: PPUSH
54237: CALL_OW 12
54241: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54242: LD_ADDR_OWVAR 31
54246: PUSH
54247: LD_INT 0
54249: PPUSH
54250: LD_INT 3
54252: PPUSH
54253: CALL_OW 12
54257: PUSH
54258: LD_INT 0
54260: PPUSH
54261: LD_INT 3
54263: PPUSH
54264: CALL_OW 12
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: ST_TO_ADDR
// end ;
54281: LD_VAR 0 2
54285: RET
// export function PrepareTiger ( agressivity ) ; begin
54286: LD_INT 0
54288: PPUSH
// uc_side := 0 ;
54289: LD_ADDR_OWVAR 20
54293: PUSH
54294: LD_INT 0
54296: ST_TO_ADDR
// uc_nation := 0 ;
54297: LD_ADDR_OWVAR 21
54301: PUSH
54302: LD_INT 0
54304: ST_TO_ADDR
// hc_class := class_tiger ;
54305: LD_ADDR_OWVAR 28
54309: PUSH
54310: LD_INT 14
54312: ST_TO_ADDR
// hc_gallery :=  ;
54313: LD_ADDR_OWVAR 33
54317: PUSH
54318: LD_STRING 
54320: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54321: LD_ADDR_OWVAR 35
54325: PUSH
54326: LD_VAR 0 1
54330: NEG
54331: PPUSH
54332: LD_VAR 0 1
54336: PPUSH
54337: CALL_OW 12
54341: ST_TO_ADDR
// end ;
54342: LD_VAR 0 2
54346: RET
// export function PrepareEnchidna ( ) ; begin
54347: LD_INT 0
54349: PPUSH
// uc_side := 0 ;
54350: LD_ADDR_OWVAR 20
54354: PUSH
54355: LD_INT 0
54357: ST_TO_ADDR
// uc_nation := 0 ;
54358: LD_ADDR_OWVAR 21
54362: PUSH
54363: LD_INT 0
54365: ST_TO_ADDR
// hc_class := class_baggie ;
54366: LD_ADDR_OWVAR 28
54370: PUSH
54371: LD_INT 13
54373: ST_TO_ADDR
// hc_gallery :=  ;
54374: LD_ADDR_OWVAR 33
54378: PUSH
54379: LD_STRING 
54381: ST_TO_ADDR
// end ;
54382: LD_VAR 0 1
54386: RET
// export function PrepareFrog ( ) ; begin
54387: LD_INT 0
54389: PPUSH
// uc_side := 0 ;
54390: LD_ADDR_OWVAR 20
54394: PUSH
54395: LD_INT 0
54397: ST_TO_ADDR
// uc_nation := 0 ;
54398: LD_ADDR_OWVAR 21
54402: PUSH
54403: LD_INT 0
54405: ST_TO_ADDR
// hc_class := class_frog ;
54406: LD_ADDR_OWVAR 28
54410: PUSH
54411: LD_INT 19
54413: ST_TO_ADDR
// hc_gallery :=  ;
54414: LD_ADDR_OWVAR 33
54418: PUSH
54419: LD_STRING 
54421: ST_TO_ADDR
// end ;
54422: LD_VAR 0 1
54426: RET
// export function PrepareFish ( ) ; begin
54427: LD_INT 0
54429: PPUSH
// uc_side := 0 ;
54430: LD_ADDR_OWVAR 20
54434: PUSH
54435: LD_INT 0
54437: ST_TO_ADDR
// uc_nation := 0 ;
54438: LD_ADDR_OWVAR 21
54442: PUSH
54443: LD_INT 0
54445: ST_TO_ADDR
// hc_class := class_fish ;
54446: LD_ADDR_OWVAR 28
54450: PUSH
54451: LD_INT 20
54453: ST_TO_ADDR
// hc_gallery :=  ;
54454: LD_ADDR_OWVAR 33
54458: PUSH
54459: LD_STRING 
54461: ST_TO_ADDR
// end ;
54462: LD_VAR 0 1
54466: RET
// export function PrepareBird ( ) ; begin
54467: LD_INT 0
54469: PPUSH
// uc_side := 0 ;
54470: LD_ADDR_OWVAR 20
54474: PUSH
54475: LD_INT 0
54477: ST_TO_ADDR
// uc_nation := 0 ;
54478: LD_ADDR_OWVAR 21
54482: PUSH
54483: LD_INT 0
54485: ST_TO_ADDR
// hc_class := class_phororhacos ;
54486: LD_ADDR_OWVAR 28
54490: PUSH
54491: LD_INT 18
54493: ST_TO_ADDR
// hc_gallery :=  ;
54494: LD_ADDR_OWVAR 33
54498: PUSH
54499: LD_STRING 
54501: ST_TO_ADDR
// end ;
54502: LD_VAR 0 1
54506: RET
// export function PrepareHorse ( ) ; begin
54507: LD_INT 0
54509: PPUSH
// uc_side := 0 ;
54510: LD_ADDR_OWVAR 20
54514: PUSH
54515: LD_INT 0
54517: ST_TO_ADDR
// uc_nation := 0 ;
54518: LD_ADDR_OWVAR 21
54522: PUSH
54523: LD_INT 0
54525: ST_TO_ADDR
// hc_class := class_horse ;
54526: LD_ADDR_OWVAR 28
54530: PUSH
54531: LD_INT 21
54533: ST_TO_ADDR
// hc_gallery :=  ;
54534: LD_ADDR_OWVAR 33
54538: PUSH
54539: LD_STRING 
54541: ST_TO_ADDR
// end ;
54542: LD_VAR 0 1
54546: RET
// export function PrepareMastodont ( ) ; begin
54547: LD_INT 0
54549: PPUSH
// uc_side := 0 ;
54550: LD_ADDR_OWVAR 20
54554: PUSH
54555: LD_INT 0
54557: ST_TO_ADDR
// uc_nation := 0 ;
54558: LD_ADDR_OWVAR 21
54562: PUSH
54563: LD_INT 0
54565: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54566: LD_ADDR_OWVAR 37
54570: PUSH
54571: LD_INT 31
54573: ST_TO_ADDR
// vc_control := control_rider ;
54574: LD_ADDR_OWVAR 38
54578: PUSH
54579: LD_INT 4
54581: ST_TO_ADDR
// end ;
54582: LD_VAR 0 1
54586: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54587: LD_INT 0
54589: PPUSH
54590: PPUSH
54591: PPUSH
// uc_side = 0 ;
54592: LD_ADDR_OWVAR 20
54596: PUSH
54597: LD_INT 0
54599: ST_TO_ADDR
// uc_nation = 0 ;
54600: LD_ADDR_OWVAR 21
54604: PUSH
54605: LD_INT 0
54607: ST_TO_ADDR
// InitHc_All ( ) ;
54608: CALL_OW 584
// InitVc ;
54612: CALL_OW 20
// if mastodonts then
54616: LD_VAR 0 6
54620: IFFALSE 54687
// for i = 1 to mastodonts do
54622: LD_ADDR_VAR 0 11
54626: PUSH
54627: DOUBLE
54628: LD_INT 1
54630: DEC
54631: ST_TO_ADDR
54632: LD_VAR 0 6
54636: PUSH
54637: FOR_TO
54638: IFFALSE 54685
// begin vc_chassis := 31 ;
54640: LD_ADDR_OWVAR 37
54644: PUSH
54645: LD_INT 31
54647: ST_TO_ADDR
// vc_control := control_rider ;
54648: LD_ADDR_OWVAR 38
54652: PUSH
54653: LD_INT 4
54655: ST_TO_ADDR
// animal := CreateVehicle ;
54656: LD_ADDR_VAR 0 12
54660: PUSH
54661: CALL_OW 45
54665: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54666: LD_VAR 0 12
54670: PPUSH
54671: LD_VAR 0 8
54675: PPUSH
54676: LD_INT 0
54678: PPUSH
54679: CALL 56815 0 3
// end ;
54683: GO 54637
54685: POP
54686: POP
// if horses then
54687: LD_VAR 0 5
54691: IFFALSE 54758
// for i = 1 to horses do
54693: LD_ADDR_VAR 0 11
54697: PUSH
54698: DOUBLE
54699: LD_INT 1
54701: DEC
54702: ST_TO_ADDR
54703: LD_VAR 0 5
54707: PUSH
54708: FOR_TO
54709: IFFALSE 54756
// begin hc_class := 21 ;
54711: LD_ADDR_OWVAR 28
54715: PUSH
54716: LD_INT 21
54718: ST_TO_ADDR
// hc_gallery :=  ;
54719: LD_ADDR_OWVAR 33
54723: PUSH
54724: LD_STRING 
54726: ST_TO_ADDR
// animal := CreateHuman ;
54727: LD_ADDR_VAR 0 12
54731: PUSH
54732: CALL_OW 44
54736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54737: LD_VAR 0 12
54741: PPUSH
54742: LD_VAR 0 8
54746: PPUSH
54747: LD_INT 0
54749: PPUSH
54750: CALL 56815 0 3
// end ;
54754: GO 54708
54756: POP
54757: POP
// if birds then
54758: LD_VAR 0 1
54762: IFFALSE 54829
// for i = 1 to birds do
54764: LD_ADDR_VAR 0 11
54768: PUSH
54769: DOUBLE
54770: LD_INT 1
54772: DEC
54773: ST_TO_ADDR
54774: LD_VAR 0 1
54778: PUSH
54779: FOR_TO
54780: IFFALSE 54827
// begin hc_class := 18 ;
54782: LD_ADDR_OWVAR 28
54786: PUSH
54787: LD_INT 18
54789: ST_TO_ADDR
// hc_gallery =  ;
54790: LD_ADDR_OWVAR 33
54794: PUSH
54795: LD_STRING 
54797: ST_TO_ADDR
// animal := CreateHuman ;
54798: LD_ADDR_VAR 0 12
54802: PUSH
54803: CALL_OW 44
54807: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54808: LD_VAR 0 12
54812: PPUSH
54813: LD_VAR 0 8
54817: PPUSH
54818: LD_INT 0
54820: PPUSH
54821: CALL 56815 0 3
// end ;
54825: GO 54779
54827: POP
54828: POP
// if tigers then
54829: LD_VAR 0 2
54833: IFFALSE 54917
// for i = 1 to tigers do
54835: LD_ADDR_VAR 0 11
54839: PUSH
54840: DOUBLE
54841: LD_INT 1
54843: DEC
54844: ST_TO_ADDR
54845: LD_VAR 0 2
54849: PUSH
54850: FOR_TO
54851: IFFALSE 54915
// begin hc_class = class_tiger ;
54853: LD_ADDR_OWVAR 28
54857: PUSH
54858: LD_INT 14
54860: ST_TO_ADDR
// hc_gallery =  ;
54861: LD_ADDR_OWVAR 33
54865: PUSH
54866: LD_STRING 
54868: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54869: LD_ADDR_OWVAR 35
54873: PUSH
54874: LD_INT 7
54876: NEG
54877: PPUSH
54878: LD_INT 7
54880: PPUSH
54881: CALL_OW 12
54885: ST_TO_ADDR
// animal := CreateHuman ;
54886: LD_ADDR_VAR 0 12
54890: PUSH
54891: CALL_OW 44
54895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54896: LD_VAR 0 12
54900: PPUSH
54901: LD_VAR 0 8
54905: PPUSH
54906: LD_INT 0
54908: PPUSH
54909: CALL 56815 0 3
// end ;
54913: GO 54850
54915: POP
54916: POP
// if apemans then
54917: LD_VAR 0 3
54921: IFFALSE 55044
// for i = 1 to apemans do
54923: LD_ADDR_VAR 0 11
54927: PUSH
54928: DOUBLE
54929: LD_INT 1
54931: DEC
54932: ST_TO_ADDR
54933: LD_VAR 0 3
54937: PUSH
54938: FOR_TO
54939: IFFALSE 55042
// begin hc_class = class_apeman ;
54941: LD_ADDR_OWVAR 28
54945: PUSH
54946: LD_INT 12
54948: ST_TO_ADDR
// hc_gallery =  ;
54949: LD_ADDR_OWVAR 33
54953: PUSH
54954: LD_STRING 
54956: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54957: LD_ADDR_OWVAR 35
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PPUSH
54966: LD_INT 2
54968: PPUSH
54969: CALL_OW 12
54973: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54974: LD_ADDR_OWVAR 31
54978: PUSH
54979: LD_INT 1
54981: PPUSH
54982: LD_INT 3
54984: PPUSH
54985: CALL_OW 12
54989: PUSH
54990: LD_INT 1
54992: PPUSH
54993: LD_INT 3
54995: PPUSH
54996: CALL_OW 12
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: ST_TO_ADDR
// animal := CreateHuman ;
55013: LD_ADDR_VAR 0 12
55017: PUSH
55018: CALL_OW 44
55022: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55023: LD_VAR 0 12
55027: PPUSH
55028: LD_VAR 0 8
55032: PPUSH
55033: LD_INT 0
55035: PPUSH
55036: CALL 56815 0 3
// end ;
55040: GO 54938
55042: POP
55043: POP
// if enchidnas then
55044: LD_VAR 0 4
55048: IFFALSE 55115
// for i = 1 to enchidnas do
55050: LD_ADDR_VAR 0 11
55054: PUSH
55055: DOUBLE
55056: LD_INT 1
55058: DEC
55059: ST_TO_ADDR
55060: LD_VAR 0 4
55064: PUSH
55065: FOR_TO
55066: IFFALSE 55113
// begin hc_class = 13 ;
55068: LD_ADDR_OWVAR 28
55072: PUSH
55073: LD_INT 13
55075: ST_TO_ADDR
// hc_gallery =  ;
55076: LD_ADDR_OWVAR 33
55080: PUSH
55081: LD_STRING 
55083: ST_TO_ADDR
// animal := CreateHuman ;
55084: LD_ADDR_VAR 0 12
55088: PUSH
55089: CALL_OW 44
55093: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55094: LD_VAR 0 12
55098: PPUSH
55099: LD_VAR 0 8
55103: PPUSH
55104: LD_INT 0
55106: PPUSH
55107: CALL 56815 0 3
// end ;
55111: GO 55065
55113: POP
55114: POP
// if fishes then
55115: LD_VAR 0 7
55119: IFFALSE 55186
// for i = 1 to fishes do
55121: LD_ADDR_VAR 0 11
55125: PUSH
55126: DOUBLE
55127: LD_INT 1
55129: DEC
55130: ST_TO_ADDR
55131: LD_VAR 0 7
55135: PUSH
55136: FOR_TO
55137: IFFALSE 55184
// begin hc_class = 20 ;
55139: LD_ADDR_OWVAR 28
55143: PUSH
55144: LD_INT 20
55146: ST_TO_ADDR
// hc_gallery =  ;
55147: LD_ADDR_OWVAR 33
55151: PUSH
55152: LD_STRING 
55154: ST_TO_ADDR
// animal := CreateHuman ;
55155: LD_ADDR_VAR 0 12
55159: PUSH
55160: CALL_OW 44
55164: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55165: LD_VAR 0 12
55169: PPUSH
55170: LD_VAR 0 9
55174: PPUSH
55175: LD_INT 0
55177: PPUSH
55178: CALL 56815 0 3
// end ;
55182: GO 55136
55184: POP
55185: POP
// end ;
55186: LD_VAR 0 10
55190: RET
// export function WantHeal ( sci , unit ) ; begin
55191: LD_INT 0
55193: PPUSH
// if GetTaskList ( sci ) > 0 then
55194: LD_VAR 0 1
55198: PPUSH
55199: CALL_OW 437
55203: PUSH
55204: LD_INT 0
55206: GREATER
55207: IFFALSE 55277
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55209: LD_VAR 0 1
55213: PPUSH
55214: CALL_OW 437
55218: PUSH
55219: LD_INT 1
55221: ARRAY
55222: PUSH
55223: LD_INT 1
55225: ARRAY
55226: PUSH
55227: LD_STRING l
55229: EQUAL
55230: PUSH
55231: LD_VAR 0 1
55235: PPUSH
55236: CALL_OW 437
55240: PUSH
55241: LD_INT 1
55243: ARRAY
55244: PUSH
55245: LD_INT 4
55247: ARRAY
55248: PUSH
55249: LD_VAR 0 2
55253: EQUAL
55254: AND
55255: IFFALSE 55267
// result := true else
55257: LD_ADDR_VAR 0 3
55261: PUSH
55262: LD_INT 1
55264: ST_TO_ADDR
55265: GO 55275
// result := false ;
55267: LD_ADDR_VAR 0 3
55271: PUSH
55272: LD_INT 0
55274: ST_TO_ADDR
// end else
55275: GO 55285
// result := false ;
55277: LD_ADDR_VAR 0 3
55281: PUSH
55282: LD_INT 0
55284: ST_TO_ADDR
// end ;
55285: LD_VAR 0 3
55289: RET
// export function HealTarget ( sci ) ; begin
55290: LD_INT 0
55292: PPUSH
// if not sci then
55293: LD_VAR 0 1
55297: NOT
55298: IFFALSE 55302
// exit ;
55300: GO 55367
// result := 0 ;
55302: LD_ADDR_VAR 0 2
55306: PUSH
55307: LD_INT 0
55309: ST_TO_ADDR
// if GetTaskList ( sci ) then
55310: LD_VAR 0 1
55314: PPUSH
55315: CALL_OW 437
55319: IFFALSE 55367
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55321: LD_VAR 0 1
55325: PPUSH
55326: CALL_OW 437
55330: PUSH
55331: LD_INT 1
55333: ARRAY
55334: PUSH
55335: LD_INT 1
55337: ARRAY
55338: PUSH
55339: LD_STRING l
55341: EQUAL
55342: IFFALSE 55367
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55344: LD_ADDR_VAR 0 2
55348: PUSH
55349: LD_VAR 0 1
55353: PPUSH
55354: CALL_OW 437
55358: PUSH
55359: LD_INT 1
55361: ARRAY
55362: PUSH
55363: LD_INT 4
55365: ARRAY
55366: ST_TO_ADDR
// end ;
55367: LD_VAR 0 2
55371: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55372: LD_INT 0
55374: PPUSH
55375: PPUSH
55376: PPUSH
55377: PPUSH
// if not base_units then
55378: LD_VAR 0 1
55382: NOT
55383: IFFALSE 55387
// exit ;
55385: GO 55474
// result := false ;
55387: LD_ADDR_VAR 0 2
55391: PUSH
55392: LD_INT 0
55394: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55395: LD_ADDR_VAR 0 5
55399: PUSH
55400: LD_VAR 0 1
55404: PPUSH
55405: LD_INT 21
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PPUSH
55415: CALL_OW 72
55419: ST_TO_ADDR
// if not tmp then
55420: LD_VAR 0 5
55424: NOT
55425: IFFALSE 55429
// exit ;
55427: GO 55474
// for i in tmp do
55429: LD_ADDR_VAR 0 3
55433: PUSH
55434: LD_VAR 0 5
55438: PUSH
55439: FOR_IN
55440: IFFALSE 55472
// begin result := EnemyInRange ( i , 22 ) ;
55442: LD_ADDR_VAR 0 2
55446: PUSH
55447: LD_VAR 0 3
55451: PPUSH
55452: LD_INT 22
55454: PPUSH
55455: CALL 53061 0 2
55459: ST_TO_ADDR
// if result then
55460: LD_VAR 0 2
55464: IFFALSE 55470
// exit ;
55466: POP
55467: POP
55468: GO 55474
// end ;
55470: GO 55439
55472: POP
55473: POP
// end ;
55474: LD_VAR 0 2
55478: RET
// export function FilterByTag ( units , tag ) ; begin
55479: LD_INT 0
55481: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55482: LD_ADDR_VAR 0 3
55486: PUSH
55487: LD_VAR 0 1
55491: PPUSH
55492: LD_INT 120
55494: PUSH
55495: LD_VAR 0 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PPUSH
55504: CALL_OW 72
55508: ST_TO_ADDR
// end ;
55509: LD_VAR 0 3
55513: RET
// export function IsDriver ( un ) ; begin
55514: LD_INT 0
55516: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55517: LD_ADDR_VAR 0 2
55521: PUSH
55522: LD_VAR 0 1
55526: PUSH
55527: LD_INT 55
55529: PUSH
55530: EMPTY
55531: LIST
55532: PPUSH
55533: CALL_OW 69
55537: IN
55538: ST_TO_ADDR
// end ;
55539: LD_VAR 0 2
55543: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55544: LD_INT 0
55546: PPUSH
55547: PPUSH
// list := [ ] ;
55548: LD_ADDR_VAR 0 5
55552: PUSH
55553: EMPTY
55554: ST_TO_ADDR
// case d of 0 :
55555: LD_VAR 0 3
55559: PUSH
55560: LD_INT 0
55562: DOUBLE
55563: EQUAL
55564: IFTRUE 55568
55566: GO 55701
55568: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55569: LD_ADDR_VAR 0 5
55573: PUSH
55574: LD_VAR 0 1
55578: PUSH
55579: LD_INT 4
55581: MINUS
55582: PUSH
55583: LD_VAR 0 2
55587: PUSH
55588: LD_INT 4
55590: MINUS
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: LIST
55599: PUSH
55600: LD_VAR 0 1
55604: PUSH
55605: LD_INT 3
55607: MINUS
55608: PUSH
55609: LD_VAR 0 2
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: LIST
55621: PUSH
55622: LD_VAR 0 1
55626: PUSH
55627: LD_INT 4
55629: PLUS
55630: PUSH
55631: LD_VAR 0 2
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: LIST
55643: PUSH
55644: LD_VAR 0 1
55648: PUSH
55649: LD_INT 3
55651: PLUS
55652: PUSH
55653: LD_VAR 0 2
55657: PUSH
55658: LD_INT 3
55660: PLUS
55661: PUSH
55662: LD_INT 5
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: LIST
55669: PUSH
55670: LD_VAR 0 1
55674: PUSH
55675: LD_VAR 0 2
55679: PUSH
55680: LD_INT 4
55682: PLUS
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// end ; 1 :
55699: GO 56399
55701: LD_INT 1
55703: DOUBLE
55704: EQUAL
55705: IFTRUE 55709
55707: GO 55842
55709: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55710: LD_ADDR_VAR 0 5
55714: PUSH
55715: LD_VAR 0 1
55719: PUSH
55720: LD_VAR 0 2
55724: PUSH
55725: LD_INT 4
55727: MINUS
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: PUSH
55737: LD_VAR 0 1
55741: PUSH
55742: LD_INT 3
55744: MINUS
55745: PUSH
55746: LD_VAR 0 2
55750: PUSH
55751: LD_INT 3
55753: MINUS
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: LIST
55762: PUSH
55763: LD_VAR 0 1
55767: PUSH
55768: LD_INT 4
55770: MINUS
55771: PUSH
55772: LD_VAR 0 2
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: PUSH
55785: LD_VAR 0 1
55789: PUSH
55790: LD_VAR 0 2
55794: PUSH
55795: LD_INT 3
55797: PLUS
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: PUSH
55807: LD_VAR 0 1
55811: PUSH
55812: LD_INT 4
55814: PLUS
55815: PUSH
55816: LD_VAR 0 2
55820: PUSH
55821: LD_INT 4
55823: PLUS
55824: PUSH
55825: LD_INT 5
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: ST_TO_ADDR
// end ; 2 :
55840: GO 56399
55842: LD_INT 2
55844: DOUBLE
55845: EQUAL
55846: IFTRUE 55850
55848: GO 55979
55850: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55851: LD_ADDR_VAR 0 5
55855: PUSH
55856: LD_VAR 0 1
55860: PUSH
55861: LD_VAR 0 2
55865: PUSH
55866: LD_INT 3
55868: MINUS
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: LIST
55877: PUSH
55878: LD_VAR 0 1
55882: PUSH
55883: LD_INT 4
55885: PLUS
55886: PUSH
55887: LD_VAR 0 2
55891: PUSH
55892: LD_INT 4
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: LIST
55899: PUSH
55900: LD_VAR 0 1
55904: PUSH
55905: LD_VAR 0 2
55909: PUSH
55910: LD_INT 4
55912: PLUS
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: LIST
55921: PUSH
55922: LD_VAR 0 1
55926: PUSH
55927: LD_INT 3
55929: MINUS
55930: PUSH
55931: LD_VAR 0 2
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: PUSH
55944: LD_VAR 0 1
55948: PUSH
55949: LD_INT 4
55951: MINUS
55952: PUSH
55953: LD_VAR 0 2
55957: PUSH
55958: LD_INT 4
55960: MINUS
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// end ; 3 :
55977: GO 56399
55979: LD_INT 3
55981: DOUBLE
55982: EQUAL
55983: IFTRUE 55987
55985: GO 56120
55987: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55988: LD_ADDR_VAR 0 5
55992: PUSH
55993: LD_VAR 0 1
55997: PUSH
55998: LD_INT 3
56000: PLUS
56001: PUSH
56002: LD_VAR 0 2
56006: PUSH
56007: LD_INT 4
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: PUSH
56015: LD_VAR 0 1
56019: PUSH
56020: LD_INT 4
56022: PLUS
56023: PUSH
56024: LD_VAR 0 2
56028: PUSH
56029: LD_INT 4
56031: PLUS
56032: PUSH
56033: LD_INT 5
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: PUSH
56041: LD_VAR 0 1
56045: PUSH
56046: LD_INT 4
56048: MINUS
56049: PUSH
56050: LD_VAR 0 2
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: LIST
56062: PUSH
56063: LD_VAR 0 1
56067: PUSH
56068: LD_VAR 0 2
56072: PUSH
56073: LD_INT 4
56075: MINUS
56076: PUSH
56077: LD_INT 3
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: PUSH
56085: LD_VAR 0 1
56089: PUSH
56090: LD_INT 3
56092: MINUS
56093: PUSH
56094: LD_VAR 0 2
56098: PUSH
56099: LD_INT 3
56101: MINUS
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: ST_TO_ADDR
// end ; 4 :
56118: GO 56399
56120: LD_INT 4
56122: DOUBLE
56123: EQUAL
56124: IFTRUE 56128
56126: GO 56261
56128: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56129: LD_ADDR_VAR 0 5
56133: PUSH
56134: LD_VAR 0 1
56138: PUSH
56139: LD_VAR 0 2
56143: PUSH
56144: LD_INT 4
56146: PLUS
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: PUSH
56156: LD_VAR 0 1
56160: PUSH
56161: LD_INT 3
56163: PLUS
56164: PUSH
56165: LD_VAR 0 2
56169: PUSH
56170: LD_INT 3
56172: PLUS
56173: PUSH
56174: LD_INT 5
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: PUSH
56182: LD_VAR 0 1
56186: PUSH
56187: LD_INT 4
56189: PLUS
56190: PUSH
56191: LD_VAR 0 2
56195: PUSH
56196: LD_INT 4
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: PUSH
56204: LD_VAR 0 1
56208: PUSH
56209: LD_VAR 0 2
56213: PUSH
56214: LD_INT 3
56216: MINUS
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: PUSH
56226: LD_VAR 0 1
56230: PUSH
56231: LD_INT 4
56233: MINUS
56234: PUSH
56235: LD_VAR 0 2
56239: PUSH
56240: LD_INT 4
56242: MINUS
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: ST_TO_ADDR
// end ; 5 :
56259: GO 56399
56261: LD_INT 5
56263: DOUBLE
56264: EQUAL
56265: IFTRUE 56269
56267: GO 56398
56269: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56270: LD_ADDR_VAR 0 5
56274: PUSH
56275: LD_VAR 0 1
56279: PUSH
56280: LD_INT 4
56282: MINUS
56283: PUSH
56284: LD_VAR 0 2
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: LIST
56296: PUSH
56297: LD_VAR 0 1
56301: PUSH
56302: LD_VAR 0 2
56306: PUSH
56307: LD_INT 4
56309: MINUS
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: PUSH
56319: LD_VAR 0 1
56323: PUSH
56324: LD_INT 4
56326: PLUS
56327: PUSH
56328: LD_VAR 0 2
56332: PUSH
56333: LD_INT 4
56335: PLUS
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: LIST
56344: PUSH
56345: LD_VAR 0 1
56349: PUSH
56350: LD_INT 3
56352: PLUS
56353: PUSH
56354: LD_VAR 0 2
56358: PUSH
56359: LD_INT 4
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: PUSH
56367: LD_VAR 0 1
56371: PUSH
56372: LD_VAR 0 2
56376: PUSH
56377: LD_INT 3
56379: PLUS
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: ST_TO_ADDR
// end ; end ;
56396: GO 56399
56398: POP
// result := list ;
56399: LD_ADDR_VAR 0 4
56403: PUSH
56404: LD_VAR 0 5
56408: ST_TO_ADDR
// end ;
56409: LD_VAR 0 4
56413: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56414: LD_INT 0
56416: PPUSH
56417: PPUSH
56418: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56419: LD_VAR 0 1
56423: NOT
56424: PUSH
56425: LD_VAR 0 2
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 2
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: LD_INT 4
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: IN
56448: NOT
56449: OR
56450: IFFALSE 56454
// exit ;
56452: GO 56537
// tmp := [ ] ;
56454: LD_ADDR_VAR 0 5
56458: PUSH
56459: EMPTY
56460: ST_TO_ADDR
// for i in units do
56461: LD_ADDR_VAR 0 4
56465: PUSH
56466: LD_VAR 0 1
56470: PUSH
56471: FOR_IN
56472: IFFALSE 56506
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56474: LD_ADDR_VAR 0 5
56478: PUSH
56479: LD_VAR 0 5
56483: PPUSH
56484: LD_VAR 0 4
56488: PPUSH
56489: LD_VAR 0 2
56493: PPUSH
56494: CALL_OW 259
56498: PPUSH
56499: CALL 57910 0 2
56503: ST_TO_ADDR
56504: GO 56471
56506: POP
56507: POP
// if not tmp then
56508: LD_VAR 0 5
56512: NOT
56513: IFFALSE 56517
// exit ;
56515: GO 56537
// result := SortListByListDesc ( units , tmp ) ;
56517: LD_ADDR_VAR 0 3
56521: PUSH
56522: LD_VAR 0 1
56526: PPUSH
56527: LD_VAR 0 5
56531: PPUSH
56532: CALL_OW 77
56536: ST_TO_ADDR
// end ;
56537: LD_VAR 0 3
56541: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56542: LD_INT 0
56544: PPUSH
56545: PPUSH
56546: PPUSH
// result := false ;
56547: LD_ADDR_VAR 0 3
56551: PUSH
56552: LD_INT 0
56554: ST_TO_ADDR
// if not building then
56555: LD_VAR 0 2
56559: NOT
56560: IFFALSE 56564
// exit ;
56562: GO 56702
// x := GetX ( building ) ;
56564: LD_ADDR_VAR 0 4
56568: PUSH
56569: LD_VAR 0 2
56573: PPUSH
56574: CALL_OW 250
56578: ST_TO_ADDR
// y := GetY ( building ) ;
56579: LD_ADDR_VAR 0 5
56583: PUSH
56584: LD_VAR 0 2
56588: PPUSH
56589: CALL_OW 251
56593: ST_TO_ADDR
// if not x or not y then
56594: LD_VAR 0 4
56598: NOT
56599: PUSH
56600: LD_VAR 0 5
56604: NOT
56605: OR
56606: IFFALSE 56610
// exit ;
56608: GO 56702
// if GetTaskList ( unit ) then
56610: LD_VAR 0 1
56614: PPUSH
56615: CALL_OW 437
56619: IFFALSE 56702
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56621: LD_STRING e
56623: PUSH
56624: LD_VAR 0 1
56628: PPUSH
56629: CALL_OW 437
56633: PUSH
56634: LD_INT 1
56636: ARRAY
56637: PUSH
56638: LD_INT 1
56640: ARRAY
56641: EQUAL
56642: PUSH
56643: LD_VAR 0 4
56647: PUSH
56648: LD_VAR 0 1
56652: PPUSH
56653: CALL_OW 437
56657: PUSH
56658: LD_INT 1
56660: ARRAY
56661: PUSH
56662: LD_INT 2
56664: ARRAY
56665: EQUAL
56666: AND
56667: PUSH
56668: LD_VAR 0 5
56672: PUSH
56673: LD_VAR 0 1
56677: PPUSH
56678: CALL_OW 437
56682: PUSH
56683: LD_INT 1
56685: ARRAY
56686: PUSH
56687: LD_INT 3
56689: ARRAY
56690: EQUAL
56691: AND
56692: IFFALSE 56702
// result := true end ;
56694: LD_ADDR_VAR 0 3
56698: PUSH
56699: LD_INT 1
56701: ST_TO_ADDR
// end ;
56702: LD_VAR 0 3
56706: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56707: LD_INT 0
56709: PPUSH
// result := false ;
56710: LD_ADDR_VAR 0 4
56714: PUSH
56715: LD_INT 0
56717: ST_TO_ADDR
// if GetTaskList ( unit ) then
56718: LD_VAR 0 1
56722: PPUSH
56723: CALL_OW 437
56727: IFFALSE 56810
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56729: LD_STRING M
56731: PUSH
56732: LD_VAR 0 1
56736: PPUSH
56737: CALL_OW 437
56741: PUSH
56742: LD_INT 1
56744: ARRAY
56745: PUSH
56746: LD_INT 1
56748: ARRAY
56749: EQUAL
56750: PUSH
56751: LD_VAR 0 2
56755: PUSH
56756: LD_VAR 0 1
56760: PPUSH
56761: CALL_OW 437
56765: PUSH
56766: LD_INT 1
56768: ARRAY
56769: PUSH
56770: LD_INT 2
56772: ARRAY
56773: EQUAL
56774: AND
56775: PUSH
56776: LD_VAR 0 3
56780: PUSH
56781: LD_VAR 0 1
56785: PPUSH
56786: CALL_OW 437
56790: PUSH
56791: LD_INT 1
56793: ARRAY
56794: PUSH
56795: LD_INT 3
56797: ARRAY
56798: EQUAL
56799: AND
56800: IFFALSE 56810
// result := true ;
56802: LD_ADDR_VAR 0 4
56806: PUSH
56807: LD_INT 1
56809: ST_TO_ADDR
// end ; end ;
56810: LD_VAR 0 4
56814: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56815: LD_INT 0
56817: PPUSH
56818: PPUSH
56819: PPUSH
56820: PPUSH
// if not unit or not area then
56821: LD_VAR 0 1
56825: NOT
56826: PUSH
56827: LD_VAR 0 2
56831: NOT
56832: OR
56833: IFFALSE 56837
// exit ;
56835: GO 57013
// tmp := AreaToList ( area , i ) ;
56837: LD_ADDR_VAR 0 6
56841: PUSH
56842: LD_VAR 0 2
56846: PPUSH
56847: LD_VAR 0 5
56851: PPUSH
56852: CALL_OW 517
56856: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56857: LD_ADDR_VAR 0 5
56861: PUSH
56862: DOUBLE
56863: LD_INT 1
56865: DEC
56866: ST_TO_ADDR
56867: LD_VAR 0 6
56871: PUSH
56872: LD_INT 1
56874: ARRAY
56875: PUSH
56876: FOR_TO
56877: IFFALSE 57011
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56879: LD_ADDR_VAR 0 7
56883: PUSH
56884: LD_VAR 0 6
56888: PUSH
56889: LD_INT 1
56891: ARRAY
56892: PUSH
56893: LD_VAR 0 5
56897: ARRAY
56898: PUSH
56899: LD_VAR 0 6
56903: PUSH
56904: LD_INT 2
56906: ARRAY
56907: PUSH
56908: LD_VAR 0 5
56912: ARRAY
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
56918: LD_INT 92
56920: PUSH
56921: LD_VAR 0 7
56925: PUSH
56926: LD_INT 1
56928: ARRAY
56929: PUSH
56930: LD_VAR 0 7
56934: PUSH
56935: LD_INT 2
56937: ARRAY
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: PPUSH
56948: CALL_OW 69
56952: PUSH
56953: LD_INT 0
56955: EQUAL
56956: IFFALSE 57009
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56958: LD_VAR 0 1
56962: PPUSH
56963: LD_VAR 0 7
56967: PUSH
56968: LD_INT 1
56970: ARRAY
56971: PPUSH
56972: LD_VAR 0 7
56976: PUSH
56977: LD_INT 2
56979: ARRAY
56980: PPUSH
56981: LD_VAR 0 3
56985: PPUSH
56986: CALL_OW 48
// result := IsPlaced ( unit ) ;
56990: LD_ADDR_VAR 0 4
56994: PUSH
56995: LD_VAR 0 1
56999: PPUSH
57000: CALL_OW 305
57004: ST_TO_ADDR
// exit ;
57005: POP
57006: POP
57007: GO 57013
// end ; end ;
57009: GO 56876
57011: POP
57012: POP
// end ;
57013: LD_VAR 0 4
57017: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57018: LD_INT 0
57020: PPUSH
57021: PPUSH
57022: PPUSH
// if not side or side > 8 then
57023: LD_VAR 0 1
57027: NOT
57028: PUSH
57029: LD_VAR 0 1
57033: PUSH
57034: LD_INT 8
57036: GREATER
57037: OR
57038: IFFALSE 57042
// exit ;
57040: GO 57229
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57042: LD_ADDR_VAR 0 4
57046: PUSH
57047: LD_INT 22
57049: PUSH
57050: LD_VAR 0 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 21
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PPUSH
57073: CALL_OW 69
57077: ST_TO_ADDR
// if not tmp then
57078: LD_VAR 0 4
57082: NOT
57083: IFFALSE 57087
// exit ;
57085: GO 57229
// enable_addtolog := true ;
57087: LD_ADDR_OWVAR 81
57091: PUSH
57092: LD_INT 1
57094: ST_TO_ADDR
// AddToLog ( [ ) ;
57095: LD_STRING [
57097: PPUSH
57098: CALL_OW 561
// for i in tmp do
57102: LD_ADDR_VAR 0 3
57106: PUSH
57107: LD_VAR 0 4
57111: PUSH
57112: FOR_IN
57113: IFFALSE 57220
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57115: LD_STRING [
57117: PUSH
57118: LD_VAR 0 3
57122: PPUSH
57123: CALL_OW 266
57127: STR
57128: PUSH
57129: LD_STRING , 
57131: STR
57132: PUSH
57133: LD_VAR 0 3
57137: PPUSH
57138: CALL_OW 250
57142: STR
57143: PUSH
57144: LD_STRING , 
57146: STR
57147: PUSH
57148: LD_VAR 0 3
57152: PPUSH
57153: CALL_OW 251
57157: STR
57158: PUSH
57159: LD_STRING , 
57161: STR
57162: PUSH
57163: LD_VAR 0 3
57167: PPUSH
57168: CALL_OW 254
57172: STR
57173: PUSH
57174: LD_STRING , 
57176: STR
57177: PUSH
57178: LD_VAR 0 3
57182: PPUSH
57183: LD_INT 1
57185: PPUSH
57186: CALL_OW 268
57190: STR
57191: PUSH
57192: LD_STRING , 
57194: STR
57195: PUSH
57196: LD_VAR 0 3
57200: PPUSH
57201: LD_INT 2
57203: PPUSH
57204: CALL_OW 268
57208: STR
57209: PUSH
57210: LD_STRING ],
57212: STR
57213: PPUSH
57214: CALL_OW 561
// end ;
57218: GO 57112
57220: POP
57221: POP
// AddToLog ( ]; ) ;
57222: LD_STRING ];
57224: PPUSH
57225: CALL_OW 561
// end ;
57229: LD_VAR 0 2
57233: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57234: LD_INT 0
57236: PPUSH
57237: PPUSH
57238: PPUSH
57239: PPUSH
57240: PPUSH
// if not area or not rate or not max then
57241: LD_VAR 0 1
57245: NOT
57246: PUSH
57247: LD_VAR 0 2
57251: NOT
57252: OR
57253: PUSH
57254: LD_VAR 0 4
57258: NOT
57259: OR
57260: IFFALSE 57264
// exit ;
57262: GO 57453
// while 1 do
57264: LD_INT 1
57266: IFFALSE 57453
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57268: LD_ADDR_VAR 0 9
57272: PUSH
57273: LD_VAR 0 1
57277: PPUSH
57278: LD_INT 1
57280: PPUSH
57281: CALL_OW 287
57285: PUSH
57286: LD_INT 10
57288: MUL
57289: ST_TO_ADDR
// r := rate / 10 ;
57290: LD_ADDR_VAR 0 7
57294: PUSH
57295: LD_VAR 0 2
57299: PUSH
57300: LD_INT 10
57302: DIVREAL
57303: ST_TO_ADDR
// time := 1 1$00 ;
57304: LD_ADDR_VAR 0 8
57308: PUSH
57309: LD_INT 2100
57311: ST_TO_ADDR
// if amount < min then
57312: LD_VAR 0 9
57316: PUSH
57317: LD_VAR 0 3
57321: LESS
57322: IFFALSE 57340
// r := r * 2 else
57324: LD_ADDR_VAR 0 7
57328: PUSH
57329: LD_VAR 0 7
57333: PUSH
57334: LD_INT 2
57336: MUL
57337: ST_TO_ADDR
57338: GO 57366
// if amount > max then
57340: LD_VAR 0 9
57344: PUSH
57345: LD_VAR 0 4
57349: GREATER
57350: IFFALSE 57366
// r := r / 2 ;
57352: LD_ADDR_VAR 0 7
57356: PUSH
57357: LD_VAR 0 7
57361: PUSH
57362: LD_INT 2
57364: DIVREAL
57365: ST_TO_ADDR
// time := time / r ;
57366: LD_ADDR_VAR 0 8
57370: PUSH
57371: LD_VAR 0 8
57375: PUSH
57376: LD_VAR 0 7
57380: DIVREAL
57381: ST_TO_ADDR
// if time < 0 then
57382: LD_VAR 0 8
57386: PUSH
57387: LD_INT 0
57389: LESS
57390: IFFALSE 57407
// time := time * - 1 ;
57392: LD_ADDR_VAR 0 8
57396: PUSH
57397: LD_VAR 0 8
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: MUL
57406: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57407: LD_VAR 0 8
57411: PUSH
57412: LD_INT 35
57414: PPUSH
57415: LD_INT 875
57417: PPUSH
57418: CALL_OW 12
57422: PLUS
57423: PPUSH
57424: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57428: LD_INT 1
57430: PPUSH
57431: LD_INT 5
57433: PPUSH
57434: CALL_OW 12
57438: PPUSH
57439: LD_VAR 0 1
57443: PPUSH
57444: LD_INT 1
57446: PPUSH
57447: CALL_OW 55
// end ;
57451: GO 57264
// end ;
57453: LD_VAR 0 5
57457: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57458: LD_INT 0
57460: PPUSH
57461: PPUSH
57462: PPUSH
57463: PPUSH
57464: PPUSH
57465: PPUSH
57466: PPUSH
57467: PPUSH
// if not turrets or not factories then
57468: LD_VAR 0 1
57472: NOT
57473: PUSH
57474: LD_VAR 0 2
57478: NOT
57479: OR
57480: IFFALSE 57484
// exit ;
57482: GO 57791
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57484: LD_ADDR_VAR 0 10
57488: PUSH
57489: LD_INT 5
57491: PUSH
57492: LD_INT 6
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: LD_INT 4
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: LD_INT 5
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 24
57526: PUSH
57527: LD_INT 25
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 23
57536: PUSH
57537: LD_INT 27
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 42
57550: PUSH
57551: LD_INT 43
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 44
57560: PUSH
57561: LD_INT 46
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 45
57570: PUSH
57571: LD_INT 47
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// result := [ ] ;
57588: LD_ADDR_VAR 0 3
57592: PUSH
57593: EMPTY
57594: ST_TO_ADDR
// for i in turrets do
57595: LD_ADDR_VAR 0 4
57599: PUSH
57600: LD_VAR 0 1
57604: PUSH
57605: FOR_IN
57606: IFFALSE 57789
// begin nat := GetNation ( i ) ;
57608: LD_ADDR_VAR 0 7
57612: PUSH
57613: LD_VAR 0 4
57617: PPUSH
57618: CALL_OW 248
57622: ST_TO_ADDR
// weapon := 0 ;
57623: LD_ADDR_VAR 0 8
57627: PUSH
57628: LD_INT 0
57630: ST_TO_ADDR
// if not nat then
57631: LD_VAR 0 7
57635: NOT
57636: IFFALSE 57640
// continue ;
57638: GO 57605
// for j in list [ nat ] do
57640: LD_ADDR_VAR 0 5
57644: PUSH
57645: LD_VAR 0 10
57649: PUSH
57650: LD_VAR 0 7
57654: ARRAY
57655: PUSH
57656: FOR_IN
57657: IFFALSE 57698
// if GetBWeapon ( i ) = j [ 1 ] then
57659: LD_VAR 0 4
57663: PPUSH
57664: CALL_OW 269
57668: PUSH
57669: LD_VAR 0 5
57673: PUSH
57674: LD_INT 1
57676: ARRAY
57677: EQUAL
57678: IFFALSE 57696
// begin weapon := j [ 2 ] ;
57680: LD_ADDR_VAR 0 8
57684: PUSH
57685: LD_VAR 0 5
57689: PUSH
57690: LD_INT 2
57692: ARRAY
57693: ST_TO_ADDR
// break ;
57694: GO 57698
// end ;
57696: GO 57656
57698: POP
57699: POP
// if not weapon then
57700: LD_VAR 0 8
57704: NOT
57705: IFFALSE 57709
// continue ;
57707: GO 57605
// for k in factories do
57709: LD_ADDR_VAR 0 6
57713: PUSH
57714: LD_VAR 0 2
57718: PUSH
57719: FOR_IN
57720: IFFALSE 57785
// begin weapons := AvailableWeaponList ( k ) ;
57722: LD_ADDR_VAR 0 9
57726: PUSH
57727: LD_VAR 0 6
57731: PPUSH
57732: CALL_OW 478
57736: ST_TO_ADDR
// if not weapons then
57737: LD_VAR 0 9
57741: NOT
57742: IFFALSE 57746
// continue ;
57744: GO 57719
// if weapon in weapons then
57746: LD_VAR 0 8
57750: PUSH
57751: LD_VAR 0 9
57755: IN
57756: IFFALSE 57783
// begin result := [ i , weapon ] ;
57758: LD_ADDR_VAR 0 3
57762: PUSH
57763: LD_VAR 0 4
57767: PUSH
57768: LD_VAR 0 8
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: ST_TO_ADDR
// exit ;
57777: POP
57778: POP
57779: POP
57780: POP
57781: GO 57791
// end ; end ;
57783: GO 57719
57785: POP
57786: POP
// end ;
57787: GO 57605
57789: POP
57790: POP
// end ;
57791: LD_VAR 0 3
57795: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57796: LD_INT 0
57798: PPUSH
// if not side or side > 8 then
57799: LD_VAR 0 3
57803: NOT
57804: PUSH
57805: LD_VAR 0 3
57809: PUSH
57810: LD_INT 8
57812: GREATER
57813: OR
57814: IFFALSE 57818
// exit ;
57816: GO 57877
// if not range then
57818: LD_VAR 0 4
57822: NOT
57823: IFFALSE 57834
// range := - 12 ;
57825: LD_ADDR_VAR 0 4
57829: PUSH
57830: LD_INT 12
57832: NEG
57833: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57834: LD_VAR 0 1
57838: PPUSH
57839: LD_VAR 0 2
57843: PPUSH
57844: LD_VAR 0 3
57848: PPUSH
57849: LD_VAR 0 4
57853: PPUSH
57854: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57858: LD_VAR 0 1
57862: PPUSH
57863: LD_VAR 0 2
57867: PPUSH
57868: LD_VAR 0 3
57872: PPUSH
57873: CALL_OW 331
// end ;
57877: LD_VAR 0 5
57881: RET
// export function Video ( mode ) ; begin
57882: LD_INT 0
57884: PPUSH
// ingame_video = mode ;
57885: LD_ADDR_OWVAR 52
57889: PUSH
57890: LD_VAR 0 1
57894: ST_TO_ADDR
// interface_hidden = mode ;
57895: LD_ADDR_OWVAR 54
57899: PUSH
57900: LD_VAR 0 1
57904: ST_TO_ADDR
// end ;
57905: LD_VAR 0 2
57909: RET
// export function Join ( array , element ) ; begin
57910: LD_INT 0
57912: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57913: LD_ADDR_VAR 0 3
57917: PUSH
57918: LD_VAR 0 1
57922: PPUSH
57923: LD_VAR 0 1
57927: PUSH
57928: LD_INT 1
57930: PLUS
57931: PPUSH
57932: LD_VAR 0 2
57936: PPUSH
57937: CALL_OW 1
57941: ST_TO_ADDR
// end ;
57942: LD_VAR 0 3
57946: RET
// export function JoinUnion ( array , element ) ; begin
57947: LD_INT 0
57949: PPUSH
// result := array union element ;
57950: LD_ADDR_VAR 0 3
57954: PUSH
57955: LD_VAR 0 1
57959: PUSH
57960: LD_VAR 0 2
57964: UNION
57965: ST_TO_ADDR
// end ;
57966: LD_VAR 0 3
57970: RET
// export function GetBehemoths ( side ) ; begin
57971: LD_INT 0
57973: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57974: LD_ADDR_VAR 0 2
57978: PUSH
57979: LD_INT 22
57981: PUSH
57982: LD_VAR 0 1
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 31
57993: PUSH
57994: LD_INT 25
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PPUSH
58005: CALL_OW 69
58009: ST_TO_ADDR
// end ;
58010: LD_VAR 0 2
58014: RET
// export function Shuffle ( array ) ; var i , index ; begin
58015: LD_INT 0
58017: PPUSH
58018: PPUSH
58019: PPUSH
// result := [ ] ;
58020: LD_ADDR_VAR 0 2
58024: PUSH
58025: EMPTY
58026: ST_TO_ADDR
// if not array then
58027: LD_VAR 0 1
58031: NOT
58032: IFFALSE 58036
// exit ;
58034: GO 58135
// Randomize ;
58036: CALL_OW 10
// for i = array downto 1 do
58040: LD_ADDR_VAR 0 3
58044: PUSH
58045: DOUBLE
58046: LD_VAR 0 1
58050: INC
58051: ST_TO_ADDR
58052: LD_INT 1
58054: PUSH
58055: FOR_DOWNTO
58056: IFFALSE 58133
// begin index := rand ( 1 , array ) ;
58058: LD_ADDR_VAR 0 4
58062: PUSH
58063: LD_INT 1
58065: PPUSH
58066: LD_VAR 0 1
58070: PPUSH
58071: CALL_OW 12
58075: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58076: LD_ADDR_VAR 0 2
58080: PUSH
58081: LD_VAR 0 2
58085: PPUSH
58086: LD_VAR 0 2
58090: PUSH
58091: LD_INT 1
58093: PLUS
58094: PPUSH
58095: LD_VAR 0 1
58099: PUSH
58100: LD_VAR 0 4
58104: ARRAY
58105: PPUSH
58106: CALL_OW 2
58110: ST_TO_ADDR
// array := Delete ( array , index ) ;
58111: LD_ADDR_VAR 0 1
58115: PUSH
58116: LD_VAR 0 1
58120: PPUSH
58121: LD_VAR 0 4
58125: PPUSH
58126: CALL_OW 3
58130: ST_TO_ADDR
// end ;
58131: GO 58055
58133: POP
58134: POP
// end ;
58135: LD_VAR 0 2
58139: RET
// export function GetBaseMaterials ( base ) ; begin
58140: LD_INT 0
58142: PPUSH
// result := [ 0 , 0 , 0 ] ;
58143: LD_ADDR_VAR 0 2
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: ST_TO_ADDR
// if not base then
58162: LD_VAR 0 1
58166: NOT
58167: IFFALSE 58171
// exit ;
58169: GO 58220
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58171: LD_ADDR_VAR 0 2
58175: PUSH
58176: LD_VAR 0 1
58180: PPUSH
58181: LD_INT 1
58183: PPUSH
58184: CALL_OW 275
58188: PUSH
58189: LD_VAR 0 1
58193: PPUSH
58194: LD_INT 2
58196: PPUSH
58197: CALL_OW 275
58201: PUSH
58202: LD_VAR 0 1
58206: PPUSH
58207: LD_INT 3
58209: PPUSH
58210: CALL_OW 275
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: ST_TO_ADDR
// end ;
58220: LD_VAR 0 2
58224: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58225: LD_INT 0
58227: PPUSH
58228: PPUSH
// result := array ;
58229: LD_ADDR_VAR 0 3
58233: PUSH
58234: LD_VAR 0 1
58238: ST_TO_ADDR
// if size >= result then
58239: LD_VAR 0 2
58243: PUSH
58244: LD_VAR 0 3
58248: GREATEREQUAL
58249: IFFALSE 58253
// exit ;
58251: GO 58303
// if size then
58253: LD_VAR 0 2
58257: IFFALSE 58303
// for i := array downto size do
58259: LD_ADDR_VAR 0 4
58263: PUSH
58264: DOUBLE
58265: LD_VAR 0 1
58269: INC
58270: ST_TO_ADDR
58271: LD_VAR 0 2
58275: PUSH
58276: FOR_DOWNTO
58277: IFFALSE 58301
// result := Delete ( result , result ) ;
58279: LD_ADDR_VAR 0 3
58283: PUSH
58284: LD_VAR 0 3
58288: PPUSH
58289: LD_VAR 0 3
58293: PPUSH
58294: CALL_OW 3
58298: ST_TO_ADDR
58299: GO 58276
58301: POP
58302: POP
// end ;
58303: LD_VAR 0 3
58307: RET
// export function ComExit ( unit ) ; var tmp ; begin
58308: LD_INT 0
58310: PPUSH
58311: PPUSH
// if not IsInUnit ( unit ) then
58312: LD_VAR 0 1
58316: PPUSH
58317: CALL_OW 310
58321: NOT
58322: IFFALSE 58326
// exit ;
58324: GO 58386
// tmp := IsInUnit ( unit ) ;
58326: LD_ADDR_VAR 0 3
58330: PUSH
58331: LD_VAR 0 1
58335: PPUSH
58336: CALL_OW 310
58340: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58341: LD_VAR 0 3
58345: PPUSH
58346: CALL_OW 247
58350: PUSH
58351: LD_INT 2
58353: EQUAL
58354: IFFALSE 58367
// ComExitVehicle ( unit ) else
58356: LD_VAR 0 1
58360: PPUSH
58361: CALL_OW 121
58365: GO 58376
// ComExitBuilding ( unit ) ;
58367: LD_VAR 0 1
58371: PPUSH
58372: CALL_OW 122
// result := tmp ;
58376: LD_ADDR_VAR 0 2
58380: PUSH
58381: LD_VAR 0 3
58385: ST_TO_ADDR
// end ;
58386: LD_VAR 0 2
58390: RET
// export function ComExitAll ( units ) ; var i ; begin
58391: LD_INT 0
58393: PPUSH
58394: PPUSH
// if not units then
58395: LD_VAR 0 1
58399: NOT
58400: IFFALSE 58404
// exit ;
58402: GO 58430
// for i in units do
58404: LD_ADDR_VAR 0 3
58408: PUSH
58409: LD_VAR 0 1
58413: PUSH
58414: FOR_IN
58415: IFFALSE 58428
// ComExit ( i ) ;
58417: LD_VAR 0 3
58421: PPUSH
58422: CALL 58308 0 1
58426: GO 58414
58428: POP
58429: POP
// end ;
58430: LD_VAR 0 2
58434: RET
// export function ResetHc ; begin
58435: LD_INT 0
58437: PPUSH
// InitHc ;
58438: CALL_OW 19
// hc_importance := 0 ;
58442: LD_ADDR_OWVAR 32
58446: PUSH
58447: LD_INT 0
58449: ST_TO_ADDR
// end ;
58450: LD_VAR 0 1
58454: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58455: LD_INT 0
58457: PPUSH
58458: PPUSH
58459: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58460: LD_ADDR_VAR 0 6
58464: PUSH
58465: LD_VAR 0 1
58469: PUSH
58470: LD_VAR 0 3
58474: PLUS
58475: PUSH
58476: LD_INT 2
58478: DIV
58479: ST_TO_ADDR
// if _x < 0 then
58480: LD_VAR 0 6
58484: PUSH
58485: LD_INT 0
58487: LESS
58488: IFFALSE 58505
// _x := _x * - 1 ;
58490: LD_ADDR_VAR 0 6
58494: PUSH
58495: LD_VAR 0 6
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: MUL
58504: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58505: LD_ADDR_VAR 0 7
58509: PUSH
58510: LD_VAR 0 2
58514: PUSH
58515: LD_VAR 0 4
58519: PLUS
58520: PUSH
58521: LD_INT 2
58523: DIV
58524: ST_TO_ADDR
// if _y < 0 then
58525: LD_VAR 0 7
58529: PUSH
58530: LD_INT 0
58532: LESS
58533: IFFALSE 58550
// _y := _y * - 1 ;
58535: LD_ADDR_VAR 0 7
58539: PUSH
58540: LD_VAR 0 7
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: MUL
58549: ST_TO_ADDR
// result := [ _x , _y ] ;
58550: LD_ADDR_VAR 0 5
58554: PUSH
58555: LD_VAR 0 6
58559: PUSH
58560: LD_VAR 0 7
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: ST_TO_ADDR
// end ;
58569: LD_VAR 0 5
58573: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58574: LD_INT 0
58576: PPUSH
58577: PPUSH
58578: PPUSH
58579: PPUSH
// task := GetTaskList ( unit ) ;
58580: LD_ADDR_VAR 0 7
58584: PUSH
58585: LD_VAR 0 1
58589: PPUSH
58590: CALL_OW 437
58594: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58595: LD_VAR 0 7
58599: NOT
58600: PUSH
58601: LD_VAR 0 1
58605: PPUSH
58606: LD_VAR 0 2
58610: PPUSH
58611: CALL_OW 308
58615: NOT
58616: AND
58617: IFFALSE 58621
// exit ;
58619: GO 58739
// if IsInArea ( unit , area ) then
58621: LD_VAR 0 1
58625: PPUSH
58626: LD_VAR 0 2
58630: PPUSH
58631: CALL_OW 308
58635: IFFALSE 58653
// begin ComMoveToArea ( unit , goAway ) ;
58637: LD_VAR 0 1
58641: PPUSH
58642: LD_VAR 0 3
58646: PPUSH
58647: CALL_OW 113
// exit ;
58651: GO 58739
// end ; if task [ 1 ] [ 1 ] <> M then
58653: LD_VAR 0 7
58657: PUSH
58658: LD_INT 1
58660: ARRAY
58661: PUSH
58662: LD_INT 1
58664: ARRAY
58665: PUSH
58666: LD_STRING M
58668: NONEQUAL
58669: IFFALSE 58673
// exit ;
58671: GO 58739
// x := task [ 1 ] [ 2 ] ;
58673: LD_ADDR_VAR 0 5
58677: PUSH
58678: LD_VAR 0 7
58682: PUSH
58683: LD_INT 1
58685: ARRAY
58686: PUSH
58687: LD_INT 2
58689: ARRAY
58690: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58691: LD_ADDR_VAR 0 6
58695: PUSH
58696: LD_VAR 0 7
58700: PUSH
58701: LD_INT 1
58703: ARRAY
58704: PUSH
58705: LD_INT 3
58707: ARRAY
58708: ST_TO_ADDR
// if InArea ( x , y , area ) then
58709: LD_VAR 0 5
58713: PPUSH
58714: LD_VAR 0 6
58718: PPUSH
58719: LD_VAR 0 2
58723: PPUSH
58724: CALL_OW 309
58728: IFFALSE 58739
// ComStop ( unit ) ;
58730: LD_VAR 0 1
58734: PPUSH
58735: CALL_OW 141
// end ;
58739: LD_VAR 0 4
58743: RET
// export function Abs ( value ) ; begin
58744: LD_INT 0
58746: PPUSH
// result := value ;
58747: LD_ADDR_VAR 0 2
58751: PUSH
58752: LD_VAR 0 1
58756: ST_TO_ADDR
// if value < 0 then
58757: LD_VAR 0 1
58761: PUSH
58762: LD_INT 0
58764: LESS
58765: IFFALSE 58782
// result := value * - 1 ;
58767: LD_ADDR_VAR 0 2
58771: PUSH
58772: LD_VAR 0 1
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: MUL
58781: ST_TO_ADDR
// end ;
58782: LD_VAR 0 2
58786: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58787: LD_INT 0
58789: PPUSH
58790: PPUSH
58791: PPUSH
58792: PPUSH
58793: PPUSH
58794: PPUSH
58795: PPUSH
58796: PPUSH
// if not unit or not building then
58797: LD_VAR 0 1
58801: NOT
58802: PUSH
58803: LD_VAR 0 2
58807: NOT
58808: OR
58809: IFFALSE 58813
// exit ;
58811: GO 59039
// x := GetX ( building ) ;
58813: LD_ADDR_VAR 0 4
58817: PUSH
58818: LD_VAR 0 2
58822: PPUSH
58823: CALL_OW 250
58827: ST_TO_ADDR
// y := GetY ( building ) ;
58828: LD_ADDR_VAR 0 6
58832: PUSH
58833: LD_VAR 0 2
58837: PPUSH
58838: CALL_OW 251
58842: ST_TO_ADDR
// d := GetDir ( building ) ;
58843: LD_ADDR_VAR 0 8
58847: PUSH
58848: LD_VAR 0 2
58852: PPUSH
58853: CALL_OW 254
58857: ST_TO_ADDR
// r := 4 ;
58858: LD_ADDR_VAR 0 9
58862: PUSH
58863: LD_INT 4
58865: ST_TO_ADDR
// for i := 1 to 5 do
58866: LD_ADDR_VAR 0 10
58870: PUSH
58871: DOUBLE
58872: LD_INT 1
58874: DEC
58875: ST_TO_ADDR
58876: LD_INT 5
58878: PUSH
58879: FOR_TO
58880: IFFALSE 59037
// begin _x := ShiftX ( x , d , r + i ) ;
58882: LD_ADDR_VAR 0 5
58886: PUSH
58887: LD_VAR 0 4
58891: PPUSH
58892: LD_VAR 0 8
58896: PPUSH
58897: LD_VAR 0 9
58901: PUSH
58902: LD_VAR 0 10
58906: PLUS
58907: PPUSH
58908: CALL_OW 272
58912: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58913: LD_ADDR_VAR 0 7
58917: PUSH
58918: LD_VAR 0 6
58922: PPUSH
58923: LD_VAR 0 8
58927: PPUSH
58928: LD_VAR 0 9
58932: PUSH
58933: LD_VAR 0 10
58937: PLUS
58938: PPUSH
58939: CALL_OW 273
58943: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58944: LD_VAR 0 5
58948: PPUSH
58949: LD_VAR 0 7
58953: PPUSH
58954: CALL_OW 488
58958: PUSH
58959: LD_VAR 0 5
58963: PPUSH
58964: LD_VAR 0 7
58968: PPUSH
58969: CALL_OW 428
58973: PPUSH
58974: CALL_OW 247
58978: PUSH
58979: LD_INT 3
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: IN
58989: NOT
58990: AND
58991: IFFALSE 59035
// begin ComMoveXY ( unit , _x , _y ) ;
58993: LD_VAR 0 1
58997: PPUSH
58998: LD_VAR 0 5
59002: PPUSH
59003: LD_VAR 0 7
59007: PPUSH
59008: CALL_OW 111
// result := [ _x , _y ] ;
59012: LD_ADDR_VAR 0 3
59016: PUSH
59017: LD_VAR 0 5
59021: PUSH
59022: LD_VAR 0 7
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: ST_TO_ADDR
// exit ;
59031: POP
59032: POP
59033: GO 59039
// end ; end ;
59035: GO 58879
59037: POP
59038: POP
// end ;
59039: LD_VAR 0 3
59043: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59044: LD_INT 0
59046: PPUSH
59047: PPUSH
59048: PPUSH
// result := 0 ;
59049: LD_ADDR_VAR 0 3
59053: PUSH
59054: LD_INT 0
59056: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59057: LD_VAR 0 1
59061: PUSH
59062: LD_INT 0
59064: LESS
59065: PUSH
59066: LD_VAR 0 1
59070: PUSH
59071: LD_INT 8
59073: GREATER
59074: OR
59075: PUSH
59076: LD_VAR 0 2
59080: PUSH
59081: LD_INT 0
59083: LESS
59084: OR
59085: PUSH
59086: LD_VAR 0 2
59090: PUSH
59091: LD_INT 8
59093: GREATER
59094: OR
59095: IFFALSE 59099
// exit ;
59097: GO 59174
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59099: LD_ADDR_VAR 0 4
59103: PUSH
59104: LD_INT 22
59106: PUSH
59107: LD_VAR 0 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PPUSH
59116: CALL_OW 69
59120: PUSH
59121: FOR_IN
59122: IFFALSE 59172
// begin un := UnitShoot ( i ) ;
59124: LD_ADDR_VAR 0 5
59128: PUSH
59129: LD_VAR 0 4
59133: PPUSH
59134: CALL_OW 504
59138: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59139: LD_VAR 0 5
59143: PPUSH
59144: CALL_OW 255
59148: PUSH
59149: LD_VAR 0 1
59153: EQUAL
59154: IFFALSE 59170
// begin result := un ;
59156: LD_ADDR_VAR 0 3
59160: PUSH
59161: LD_VAR 0 5
59165: ST_TO_ADDR
// exit ;
59166: POP
59167: POP
59168: GO 59174
// end ; end ;
59170: GO 59121
59172: POP
59173: POP
// end ;
59174: LD_VAR 0 3
59178: RET
// export function GetCargoBay ( units ) ; begin
59179: LD_INT 0
59181: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59182: LD_ADDR_VAR 0 2
59186: PUSH
59187: LD_VAR 0 1
59191: PPUSH
59192: LD_INT 2
59194: PUSH
59195: LD_INT 34
59197: PUSH
59198: LD_INT 12
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 34
59207: PUSH
59208: LD_INT 51
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 34
59217: PUSH
59218: LD_INT 32
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 34
59227: PUSH
59228: LD_INT 89
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: PPUSH
59242: CALL_OW 72
59246: ST_TO_ADDR
// end ;
59247: LD_VAR 0 2
59251: RET
// export function Negate ( value ) ; begin
59252: LD_INT 0
59254: PPUSH
// result := not value ;
59255: LD_ADDR_VAR 0 2
59259: PUSH
59260: LD_VAR 0 1
59264: NOT
59265: ST_TO_ADDR
// end ;
59266: LD_VAR 0 2
59270: RET
// export function Inc ( value ) ; begin
59271: LD_INT 0
59273: PPUSH
// result := value + 1 ;
59274: LD_ADDR_VAR 0 2
59278: PUSH
59279: LD_VAR 0 1
59283: PUSH
59284: LD_INT 1
59286: PLUS
59287: ST_TO_ADDR
// end ;
59288: LD_VAR 0 2
59292: RET
// export function Dec ( value ) ; begin
59293: LD_INT 0
59295: PPUSH
// result := value - 1 ;
59296: LD_ADDR_VAR 0 2
59300: PUSH
59301: LD_VAR 0 1
59305: PUSH
59306: LD_INT 1
59308: MINUS
59309: ST_TO_ADDR
// end ;
59310: LD_VAR 0 2
59314: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59315: LD_INT 0
59317: PPUSH
59318: PPUSH
59319: PPUSH
59320: PPUSH
59321: PPUSH
59322: PPUSH
59323: PPUSH
59324: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59325: LD_VAR 0 1
59329: PPUSH
59330: LD_VAR 0 2
59334: PPUSH
59335: CALL_OW 488
59339: NOT
59340: PUSH
59341: LD_VAR 0 3
59345: PPUSH
59346: LD_VAR 0 4
59350: PPUSH
59351: CALL_OW 488
59355: NOT
59356: OR
59357: IFFALSE 59370
// begin result := - 1 ;
59359: LD_ADDR_VAR 0 5
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: ST_TO_ADDR
// exit ;
59368: GO 59605
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59370: LD_ADDR_VAR 0 12
59374: PUSH
59375: LD_VAR 0 1
59379: PPUSH
59380: LD_VAR 0 2
59384: PPUSH
59385: LD_VAR 0 3
59389: PPUSH
59390: LD_VAR 0 4
59394: PPUSH
59395: CALL 58455 0 4
59399: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59400: LD_ADDR_VAR 0 11
59404: PUSH
59405: LD_VAR 0 1
59409: PPUSH
59410: LD_VAR 0 2
59414: PPUSH
59415: LD_VAR 0 12
59419: PUSH
59420: LD_INT 1
59422: ARRAY
59423: PPUSH
59424: LD_VAR 0 12
59428: PUSH
59429: LD_INT 2
59431: ARRAY
59432: PPUSH
59433: CALL_OW 298
59437: ST_TO_ADDR
// distance := 9999 ;
59438: LD_ADDR_VAR 0 10
59442: PUSH
59443: LD_INT 9999
59445: ST_TO_ADDR
// for i := 0 to 5 do
59446: LD_ADDR_VAR 0 6
59450: PUSH
59451: DOUBLE
59452: LD_INT 0
59454: DEC
59455: ST_TO_ADDR
59456: LD_INT 5
59458: PUSH
59459: FOR_TO
59460: IFFALSE 59603
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59462: LD_ADDR_VAR 0 7
59466: PUSH
59467: LD_VAR 0 1
59471: PPUSH
59472: LD_VAR 0 6
59476: PPUSH
59477: LD_VAR 0 11
59481: PPUSH
59482: CALL_OW 272
59486: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59487: LD_ADDR_VAR 0 8
59491: PUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: LD_VAR 0 6
59501: PPUSH
59502: LD_VAR 0 11
59506: PPUSH
59507: CALL_OW 273
59511: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59512: LD_VAR 0 7
59516: PPUSH
59517: LD_VAR 0 8
59521: PPUSH
59522: CALL_OW 488
59526: NOT
59527: IFFALSE 59531
// continue ;
59529: GO 59459
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59531: LD_ADDR_VAR 0 9
59535: PUSH
59536: LD_VAR 0 12
59540: PUSH
59541: LD_INT 1
59543: ARRAY
59544: PPUSH
59545: LD_VAR 0 12
59549: PUSH
59550: LD_INT 2
59552: ARRAY
59553: PPUSH
59554: LD_VAR 0 7
59558: PPUSH
59559: LD_VAR 0 8
59563: PPUSH
59564: CALL_OW 298
59568: ST_TO_ADDR
// if tmp < distance then
59569: LD_VAR 0 9
59573: PUSH
59574: LD_VAR 0 10
59578: LESS
59579: IFFALSE 59601
// begin result := i ;
59581: LD_ADDR_VAR 0 5
59585: PUSH
59586: LD_VAR 0 6
59590: ST_TO_ADDR
// distance := tmp ;
59591: LD_ADDR_VAR 0 10
59595: PUSH
59596: LD_VAR 0 9
59600: ST_TO_ADDR
// end ; end ;
59601: GO 59459
59603: POP
59604: POP
// end ;
59605: LD_VAR 0 5
59609: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59610: LD_INT 0
59612: PPUSH
59613: PPUSH
// if not driver or not IsInUnit ( driver ) then
59614: LD_VAR 0 1
59618: NOT
59619: PUSH
59620: LD_VAR 0 1
59624: PPUSH
59625: CALL_OW 310
59629: NOT
59630: OR
59631: IFFALSE 59635
// exit ;
59633: GO 59725
// vehicle := IsInUnit ( driver ) ;
59635: LD_ADDR_VAR 0 3
59639: PUSH
59640: LD_VAR 0 1
59644: PPUSH
59645: CALL_OW 310
59649: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59650: LD_VAR 0 1
59654: PPUSH
59655: LD_STRING \
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: PUSH
59685: LD_STRING E
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_VAR 0 3
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PPUSH
59721: CALL_OW 446
// end ;
59725: LD_VAR 0 2
59729: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59730: LD_INT 0
59732: PPUSH
59733: PPUSH
// if not driver or not IsInUnit ( driver ) then
59734: LD_VAR 0 1
59738: NOT
59739: PUSH
59740: LD_VAR 0 1
59744: PPUSH
59745: CALL_OW 310
59749: NOT
59750: OR
59751: IFFALSE 59755
// exit ;
59753: GO 59845
// vehicle := IsInUnit ( driver ) ;
59755: LD_ADDR_VAR 0 3
59759: PUSH
59760: LD_VAR 0 1
59764: PPUSH
59765: CALL_OW 310
59769: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59770: LD_VAR 0 1
59774: PPUSH
59775: LD_STRING \
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: PUSH
59805: LD_STRING E
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 0
59813: PUSH
59814: LD_VAR 0 3
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PPUSH
59841: CALL_OW 447
// end ;
59845: LD_VAR 0 2
59849: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59850: LD_INT 0
59852: PPUSH
59853: PPUSH
59854: PPUSH
// tmp := [ ] ;
59855: LD_ADDR_VAR 0 5
59859: PUSH
59860: EMPTY
59861: ST_TO_ADDR
// for i in units do
59862: LD_ADDR_VAR 0 4
59866: PUSH
59867: LD_VAR 0 1
59871: PUSH
59872: FOR_IN
59873: IFFALSE 59911
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59875: LD_ADDR_VAR 0 5
59879: PUSH
59880: LD_VAR 0 5
59884: PPUSH
59885: LD_VAR 0 5
59889: PUSH
59890: LD_INT 1
59892: PLUS
59893: PPUSH
59894: LD_VAR 0 4
59898: PPUSH
59899: CALL_OW 256
59903: PPUSH
59904: CALL_OW 2
59908: ST_TO_ADDR
59909: GO 59872
59911: POP
59912: POP
// if not tmp then
59913: LD_VAR 0 5
59917: NOT
59918: IFFALSE 59922
// exit ;
59920: GO 59970
// if asc then
59922: LD_VAR 0 2
59926: IFFALSE 59950
// result := SortListByListAsc ( units , tmp ) else
59928: LD_ADDR_VAR 0 3
59932: PUSH
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_VAR 0 5
59942: PPUSH
59943: CALL_OW 76
59947: ST_TO_ADDR
59948: GO 59970
// result := SortListByListDesc ( units , tmp ) ;
59950: LD_ADDR_VAR 0 3
59954: PUSH
59955: LD_VAR 0 1
59959: PPUSH
59960: LD_VAR 0 5
59964: PPUSH
59965: CALL_OW 77
59969: ST_TO_ADDR
// end ;
59970: LD_VAR 0 3
59974: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59975: LD_INT 0
59977: PPUSH
59978: PPUSH
// task := GetTaskList ( mech ) ;
59979: LD_ADDR_VAR 0 4
59983: PUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: CALL_OW 437
59993: ST_TO_ADDR
// if not task then
59994: LD_VAR 0 4
59998: NOT
59999: IFFALSE 60003
// exit ;
60001: GO 60045
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60003: LD_ADDR_VAR 0 3
60007: PUSH
60008: LD_VAR 0 4
60012: PUSH
60013: LD_INT 1
60015: ARRAY
60016: PUSH
60017: LD_INT 1
60019: ARRAY
60020: PUSH
60021: LD_STRING r
60023: EQUAL
60024: PUSH
60025: LD_VAR 0 4
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PUSH
60034: LD_INT 4
60036: ARRAY
60037: PUSH
60038: LD_VAR 0 2
60042: EQUAL
60043: AND
60044: ST_TO_ADDR
// end ;
60045: LD_VAR 0 3
60049: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60050: LD_INT 0
60052: PPUSH
// SetDir ( unit , d ) ;
60053: LD_VAR 0 1
60057: PPUSH
60058: LD_VAR 0 4
60062: PPUSH
60063: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60067: LD_VAR 0 1
60071: PPUSH
60072: LD_VAR 0 2
60076: PPUSH
60077: LD_VAR 0 3
60081: PPUSH
60082: LD_VAR 0 5
60086: PPUSH
60087: CALL_OW 48
// end ;
60091: LD_VAR 0 6
60095: RET
// export function ToNaturalNumber ( number ) ; begin
60096: LD_INT 0
60098: PPUSH
// result := number div 1 ;
60099: LD_ADDR_VAR 0 2
60103: PUSH
60104: LD_VAR 0 1
60108: PUSH
60109: LD_INT 1
60111: DIV
60112: ST_TO_ADDR
// if number < 0 then
60113: LD_VAR 0 1
60117: PUSH
60118: LD_INT 0
60120: LESS
60121: IFFALSE 60131
// result := 0 ;
60123: LD_ADDR_VAR 0 2
60127: PUSH
60128: LD_INT 0
60130: ST_TO_ADDR
// end ;
60131: LD_VAR 0 2
60135: RET
// export function SortByClass ( units , class ) ; var un ; begin
60136: LD_INT 0
60138: PPUSH
60139: PPUSH
// if not units or not class then
60140: LD_VAR 0 1
60144: NOT
60145: PUSH
60146: LD_VAR 0 2
60150: NOT
60151: OR
60152: IFFALSE 60156
// exit ;
60154: GO 60251
// result := [ ] ;
60156: LD_ADDR_VAR 0 3
60160: PUSH
60161: EMPTY
60162: ST_TO_ADDR
// for un in units do
60163: LD_ADDR_VAR 0 4
60167: PUSH
60168: LD_VAR 0 1
60172: PUSH
60173: FOR_IN
60174: IFFALSE 60249
// if GetClass ( un ) = class then
60176: LD_VAR 0 4
60180: PPUSH
60181: CALL_OW 257
60185: PUSH
60186: LD_VAR 0 2
60190: EQUAL
60191: IFFALSE 60218
// result := Insert ( result , 1 , un ) else
60193: LD_ADDR_VAR 0 3
60197: PUSH
60198: LD_VAR 0 3
60202: PPUSH
60203: LD_INT 1
60205: PPUSH
60206: LD_VAR 0 4
60210: PPUSH
60211: CALL_OW 2
60215: ST_TO_ADDR
60216: GO 60247
// result := Replace ( result , result + 1 , un ) ;
60218: LD_ADDR_VAR 0 3
60222: PUSH
60223: LD_VAR 0 3
60227: PPUSH
60228: LD_VAR 0 3
60232: PUSH
60233: LD_INT 1
60235: PLUS
60236: PPUSH
60237: LD_VAR 0 4
60241: PPUSH
60242: CALL_OW 1
60246: ST_TO_ADDR
60247: GO 60173
60249: POP
60250: POP
// end ;
60251: LD_VAR 0 3
60255: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60256: LD_INT 0
60258: PPUSH
60259: PPUSH
60260: PPUSH
60261: PPUSH
60262: PPUSH
60263: PPUSH
60264: PPUSH
// result := [ ] ;
60265: LD_ADDR_VAR 0 4
60269: PUSH
60270: EMPTY
60271: ST_TO_ADDR
// if x - r < 0 then
60272: LD_VAR 0 1
60276: PUSH
60277: LD_VAR 0 3
60281: MINUS
60282: PUSH
60283: LD_INT 0
60285: LESS
60286: IFFALSE 60298
// min_x := 0 else
60288: LD_ADDR_VAR 0 8
60292: PUSH
60293: LD_INT 0
60295: ST_TO_ADDR
60296: GO 60314
// min_x := x - r ;
60298: LD_ADDR_VAR 0 8
60302: PUSH
60303: LD_VAR 0 1
60307: PUSH
60308: LD_VAR 0 3
60312: MINUS
60313: ST_TO_ADDR
// if y - r < 0 then
60314: LD_VAR 0 2
60318: PUSH
60319: LD_VAR 0 3
60323: MINUS
60324: PUSH
60325: LD_INT 0
60327: LESS
60328: IFFALSE 60340
// min_y := 0 else
60330: LD_ADDR_VAR 0 7
60334: PUSH
60335: LD_INT 0
60337: ST_TO_ADDR
60338: GO 60356
// min_y := y - r ;
60340: LD_ADDR_VAR 0 7
60344: PUSH
60345: LD_VAR 0 2
60349: PUSH
60350: LD_VAR 0 3
60354: MINUS
60355: ST_TO_ADDR
// max_x := x + r ;
60356: LD_ADDR_VAR 0 9
60360: PUSH
60361: LD_VAR 0 1
60365: PUSH
60366: LD_VAR 0 3
60370: PLUS
60371: ST_TO_ADDR
// max_y := y + r ;
60372: LD_ADDR_VAR 0 10
60376: PUSH
60377: LD_VAR 0 2
60381: PUSH
60382: LD_VAR 0 3
60386: PLUS
60387: ST_TO_ADDR
// for _x = min_x to max_x do
60388: LD_ADDR_VAR 0 5
60392: PUSH
60393: DOUBLE
60394: LD_VAR 0 8
60398: DEC
60399: ST_TO_ADDR
60400: LD_VAR 0 9
60404: PUSH
60405: FOR_TO
60406: IFFALSE 60507
// for _y = min_y to max_y do
60408: LD_ADDR_VAR 0 6
60412: PUSH
60413: DOUBLE
60414: LD_VAR 0 7
60418: DEC
60419: ST_TO_ADDR
60420: LD_VAR 0 10
60424: PUSH
60425: FOR_TO
60426: IFFALSE 60503
// begin if not ValidHex ( _x , _y ) then
60428: LD_VAR 0 5
60432: PPUSH
60433: LD_VAR 0 6
60437: PPUSH
60438: CALL_OW 488
60442: NOT
60443: IFFALSE 60447
// continue ;
60445: GO 60425
// if GetResourceTypeXY ( _x , _y ) then
60447: LD_VAR 0 5
60451: PPUSH
60452: LD_VAR 0 6
60456: PPUSH
60457: CALL_OW 283
60461: IFFALSE 60501
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60463: LD_ADDR_VAR 0 4
60467: PUSH
60468: LD_VAR 0 4
60472: PPUSH
60473: LD_VAR 0 4
60477: PUSH
60478: LD_INT 1
60480: PLUS
60481: PPUSH
60482: LD_VAR 0 5
60486: PUSH
60487: LD_VAR 0 6
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PPUSH
60496: CALL_OW 1
60500: ST_TO_ADDR
// end ;
60501: GO 60425
60503: POP
60504: POP
60505: GO 60405
60507: POP
60508: POP
// end ;
60509: LD_VAR 0 4
60513: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60514: LD_INT 0
60516: PPUSH
60517: PPUSH
60518: PPUSH
60519: PPUSH
60520: PPUSH
60521: PPUSH
60522: PPUSH
60523: PPUSH
// if not units then
60524: LD_VAR 0 1
60528: NOT
60529: IFFALSE 60533
// exit ;
60531: GO 61057
// result := UnitFilter ( units , [ f_ok ] ) ;
60533: LD_ADDR_VAR 0 3
60537: PUSH
60538: LD_VAR 0 1
60542: PPUSH
60543: LD_INT 50
60545: PUSH
60546: EMPTY
60547: LIST
60548: PPUSH
60549: CALL_OW 72
60553: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60554: LD_ADDR_VAR 0 8
60558: PUSH
60559: LD_VAR 0 1
60563: PUSH
60564: LD_INT 1
60566: ARRAY
60567: PPUSH
60568: CALL_OW 255
60572: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60573: LD_ADDR_VAR 0 10
60577: PUSH
60578: LD_INT 29
60580: PUSH
60581: LD_INT 91
60583: PUSH
60584: LD_INT 49
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: ST_TO_ADDR
// if not result then
60592: LD_VAR 0 3
60596: NOT
60597: IFFALSE 60601
// exit ;
60599: GO 61057
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60601: LD_ADDR_VAR 0 5
60605: PUSH
60606: LD_INT 81
60608: PUSH
60609: LD_VAR 0 8
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PPUSH
60618: CALL_OW 69
60622: ST_TO_ADDR
// for i in result do
60623: LD_ADDR_VAR 0 4
60627: PUSH
60628: LD_VAR 0 3
60632: PUSH
60633: FOR_IN
60634: IFFALSE 61055
// begin tag := GetTag ( i ) + 1 ;
60636: LD_ADDR_VAR 0 9
60640: PUSH
60641: LD_VAR 0 4
60645: PPUSH
60646: CALL_OW 110
60650: PUSH
60651: LD_INT 1
60653: PLUS
60654: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60655: LD_ADDR_VAR 0 7
60659: PUSH
60660: LD_VAR 0 4
60664: PPUSH
60665: CALL_OW 250
60669: PPUSH
60670: LD_VAR 0 4
60674: PPUSH
60675: CALL_OW 251
60679: PPUSH
60680: LD_INT 6
60682: PPUSH
60683: CALL 60256 0 3
60687: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60688: LD_VAR 0 4
60692: PPUSH
60693: CALL_OW 247
60697: PUSH
60698: LD_INT 2
60700: EQUAL
60701: PUSH
60702: LD_VAR 0 7
60706: AND
60707: PUSH
60708: LD_VAR 0 4
60712: PPUSH
60713: CALL_OW 264
60717: PUSH
60718: LD_VAR 0 10
60722: IN
60723: NOT
60724: AND
60725: IFFALSE 60764
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60727: LD_VAR 0 4
60731: PPUSH
60732: LD_VAR 0 7
60736: PUSH
60737: LD_INT 1
60739: ARRAY
60740: PUSH
60741: LD_INT 1
60743: ARRAY
60744: PPUSH
60745: LD_VAR 0 7
60749: PUSH
60750: LD_INT 1
60752: ARRAY
60753: PUSH
60754: LD_INT 2
60756: ARRAY
60757: PPUSH
60758: CALL_OW 116
60762: GO 61053
// if path > tag then
60764: LD_VAR 0 2
60768: PUSH
60769: LD_VAR 0 9
60773: GREATER
60774: IFFALSE 60982
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60776: LD_ADDR_VAR 0 6
60780: PUSH
60781: LD_VAR 0 5
60785: PPUSH
60786: LD_INT 91
60788: PUSH
60789: LD_VAR 0 4
60793: PUSH
60794: LD_INT 8
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: PPUSH
60802: CALL_OW 72
60806: ST_TO_ADDR
// if nearEnemy then
60807: LD_VAR 0 6
60811: IFFALSE 60880
// begin if GetWeapon ( i ) = ru_time_lapser then
60813: LD_VAR 0 4
60817: PPUSH
60818: CALL_OW 264
60822: PUSH
60823: LD_INT 49
60825: EQUAL
60826: IFFALSE 60854
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60828: LD_VAR 0 4
60832: PPUSH
60833: LD_VAR 0 6
60837: PPUSH
60838: LD_VAR 0 4
60842: PPUSH
60843: CALL_OW 74
60847: PPUSH
60848: CALL_OW 112
60852: GO 60878
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60854: LD_VAR 0 4
60858: PPUSH
60859: LD_VAR 0 6
60863: PPUSH
60864: LD_VAR 0 4
60868: PPUSH
60869: CALL_OW 74
60873: PPUSH
60874: CALL 61982 0 2
// end else
60878: GO 60980
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60880: LD_VAR 0 4
60884: PPUSH
60885: LD_VAR 0 2
60889: PUSH
60890: LD_VAR 0 9
60894: ARRAY
60895: PUSH
60896: LD_INT 1
60898: ARRAY
60899: PPUSH
60900: LD_VAR 0 2
60904: PUSH
60905: LD_VAR 0 9
60909: ARRAY
60910: PUSH
60911: LD_INT 2
60913: ARRAY
60914: PPUSH
60915: CALL_OW 297
60919: PUSH
60920: LD_INT 6
60922: GREATER
60923: IFFALSE 60966
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60925: LD_VAR 0 4
60929: PPUSH
60930: LD_VAR 0 2
60934: PUSH
60935: LD_VAR 0 9
60939: ARRAY
60940: PUSH
60941: LD_INT 1
60943: ARRAY
60944: PPUSH
60945: LD_VAR 0 2
60949: PUSH
60950: LD_VAR 0 9
60954: ARRAY
60955: PUSH
60956: LD_INT 2
60958: ARRAY
60959: PPUSH
60960: CALL_OW 114
60964: GO 60980
// SetTag ( i , tag ) ;
60966: LD_VAR 0 4
60970: PPUSH
60971: LD_VAR 0 9
60975: PPUSH
60976: CALL_OW 109
// end else
60980: GO 61053
// if enemy then
60982: LD_VAR 0 5
60986: IFFALSE 61053
// begin if GetWeapon ( i ) = ru_time_lapser then
60988: LD_VAR 0 4
60992: PPUSH
60993: CALL_OW 264
60997: PUSH
60998: LD_INT 49
61000: EQUAL
61001: IFFALSE 61029
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61003: LD_VAR 0 4
61007: PPUSH
61008: LD_VAR 0 5
61012: PPUSH
61013: LD_VAR 0 4
61017: PPUSH
61018: CALL_OW 74
61022: PPUSH
61023: CALL_OW 112
61027: GO 61053
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61029: LD_VAR 0 4
61033: PPUSH
61034: LD_VAR 0 5
61038: PPUSH
61039: LD_VAR 0 4
61043: PPUSH
61044: CALL_OW 74
61048: PPUSH
61049: CALL 61982 0 2
// end ; end ;
61053: GO 60633
61055: POP
61056: POP
// end ;
61057: LD_VAR 0 3
61061: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61062: LD_INT 0
61064: PPUSH
61065: PPUSH
61066: PPUSH
// if not unit or IsInUnit ( unit ) then
61067: LD_VAR 0 1
61071: NOT
61072: PUSH
61073: LD_VAR 0 1
61077: PPUSH
61078: CALL_OW 310
61082: OR
61083: IFFALSE 61087
// exit ;
61085: GO 61178
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61087: LD_ADDR_VAR 0 4
61091: PUSH
61092: LD_VAR 0 1
61096: PPUSH
61097: CALL_OW 250
61101: PPUSH
61102: LD_VAR 0 2
61106: PPUSH
61107: LD_INT 1
61109: PPUSH
61110: CALL_OW 272
61114: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61115: LD_ADDR_VAR 0 5
61119: PUSH
61120: LD_VAR 0 1
61124: PPUSH
61125: CALL_OW 251
61129: PPUSH
61130: LD_VAR 0 2
61134: PPUSH
61135: LD_INT 1
61137: PPUSH
61138: CALL_OW 273
61142: ST_TO_ADDR
// if ValidHex ( x , y ) then
61143: LD_VAR 0 4
61147: PPUSH
61148: LD_VAR 0 5
61152: PPUSH
61153: CALL_OW 488
61157: IFFALSE 61178
// ComTurnXY ( unit , x , y ) ;
61159: LD_VAR 0 1
61163: PPUSH
61164: LD_VAR 0 4
61168: PPUSH
61169: LD_VAR 0 5
61173: PPUSH
61174: CALL_OW 118
// end ;
61178: LD_VAR 0 3
61182: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61183: LD_INT 0
61185: PPUSH
61186: PPUSH
// result := false ;
61187: LD_ADDR_VAR 0 3
61191: PUSH
61192: LD_INT 0
61194: ST_TO_ADDR
// if not units then
61195: LD_VAR 0 2
61199: NOT
61200: IFFALSE 61204
// exit ;
61202: GO 61249
// for i in units do
61204: LD_ADDR_VAR 0 4
61208: PUSH
61209: LD_VAR 0 2
61213: PUSH
61214: FOR_IN
61215: IFFALSE 61247
// if See ( side , i ) then
61217: LD_VAR 0 1
61221: PPUSH
61222: LD_VAR 0 4
61226: PPUSH
61227: CALL_OW 292
61231: IFFALSE 61245
// begin result := true ;
61233: LD_ADDR_VAR 0 3
61237: PUSH
61238: LD_INT 1
61240: ST_TO_ADDR
// exit ;
61241: POP
61242: POP
61243: GO 61249
// end ;
61245: GO 61214
61247: POP
61248: POP
// end ;
61249: LD_VAR 0 3
61253: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61254: LD_INT 0
61256: PPUSH
61257: PPUSH
61258: PPUSH
61259: PPUSH
// if not unit or not points then
61260: LD_VAR 0 1
61264: NOT
61265: PUSH
61266: LD_VAR 0 2
61270: NOT
61271: OR
61272: IFFALSE 61276
// exit ;
61274: GO 61366
// dist := 99999 ;
61276: LD_ADDR_VAR 0 5
61280: PUSH
61281: LD_INT 99999
61283: ST_TO_ADDR
// for i in points do
61284: LD_ADDR_VAR 0 4
61288: PUSH
61289: LD_VAR 0 2
61293: PUSH
61294: FOR_IN
61295: IFFALSE 61364
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61297: LD_ADDR_VAR 0 6
61301: PUSH
61302: LD_VAR 0 1
61306: PPUSH
61307: LD_VAR 0 4
61311: PUSH
61312: LD_INT 1
61314: ARRAY
61315: PPUSH
61316: LD_VAR 0 4
61320: PUSH
61321: LD_INT 2
61323: ARRAY
61324: PPUSH
61325: CALL_OW 297
61329: ST_TO_ADDR
// if tmpDist < dist then
61330: LD_VAR 0 6
61334: PUSH
61335: LD_VAR 0 5
61339: LESS
61340: IFFALSE 61362
// begin result := i ;
61342: LD_ADDR_VAR 0 3
61346: PUSH
61347: LD_VAR 0 4
61351: ST_TO_ADDR
// dist := tmpDist ;
61352: LD_ADDR_VAR 0 5
61356: PUSH
61357: LD_VAR 0 6
61361: ST_TO_ADDR
// end ; end ;
61362: GO 61294
61364: POP
61365: POP
// end ;
61366: LD_VAR 0 3
61370: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61371: LD_INT 0
61373: PPUSH
// uc_side := side ;
61374: LD_ADDR_OWVAR 20
61378: PUSH
61379: LD_VAR 0 1
61383: ST_TO_ADDR
// uc_nation := 3 ;
61384: LD_ADDR_OWVAR 21
61388: PUSH
61389: LD_INT 3
61391: ST_TO_ADDR
// vc_chassis := 25 ;
61392: LD_ADDR_OWVAR 37
61396: PUSH
61397: LD_INT 25
61399: ST_TO_ADDR
// vc_engine := engine_siberite ;
61400: LD_ADDR_OWVAR 39
61404: PUSH
61405: LD_INT 3
61407: ST_TO_ADDR
// vc_control := control_computer ;
61408: LD_ADDR_OWVAR 38
61412: PUSH
61413: LD_INT 3
61415: ST_TO_ADDR
// vc_weapon := 59 ;
61416: LD_ADDR_OWVAR 40
61420: PUSH
61421: LD_INT 59
61423: ST_TO_ADDR
// result := CreateVehicle ;
61424: LD_ADDR_VAR 0 5
61428: PUSH
61429: CALL_OW 45
61433: ST_TO_ADDR
// SetDir ( result , d ) ;
61434: LD_VAR 0 5
61438: PPUSH
61439: LD_VAR 0 4
61443: PPUSH
61444: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61448: LD_VAR 0 5
61452: PPUSH
61453: LD_VAR 0 2
61457: PPUSH
61458: LD_VAR 0 3
61462: PPUSH
61463: LD_INT 0
61465: PPUSH
61466: CALL_OW 48
// end ;
61470: LD_VAR 0 5
61474: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61475: LD_INT 0
61477: PPUSH
61478: PPUSH
61479: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61480: LD_ADDR_VAR 0 2
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61503: LD_VAR 0 1
61507: NOT
61508: PUSH
61509: LD_VAR 0 1
61513: PPUSH
61514: CALL_OW 264
61518: PUSH
61519: LD_INT 12
61521: PUSH
61522: LD_INT 51
61524: PUSH
61525: LD_INT 32
61527: PUSH
61528: LD_INT 89
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: IN
61537: NOT
61538: OR
61539: IFFALSE 61543
// exit ;
61541: GO 61641
// for i := 1 to 3 do
61543: LD_ADDR_VAR 0 3
61547: PUSH
61548: DOUBLE
61549: LD_INT 1
61551: DEC
61552: ST_TO_ADDR
61553: LD_INT 3
61555: PUSH
61556: FOR_TO
61557: IFFALSE 61639
// begin tmp := GetCargo ( cargo , i ) ;
61559: LD_ADDR_VAR 0 4
61563: PUSH
61564: LD_VAR 0 1
61568: PPUSH
61569: LD_VAR 0 3
61573: PPUSH
61574: CALL_OW 289
61578: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61579: LD_ADDR_VAR 0 2
61583: PUSH
61584: LD_VAR 0 2
61588: PPUSH
61589: LD_VAR 0 3
61593: PPUSH
61594: LD_VAR 0 4
61598: PPUSH
61599: CALL_OW 1
61603: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61604: LD_ADDR_VAR 0 2
61608: PUSH
61609: LD_VAR 0 2
61613: PPUSH
61614: LD_INT 4
61616: PPUSH
61617: LD_VAR 0 2
61621: PUSH
61622: LD_INT 4
61624: ARRAY
61625: PUSH
61626: LD_VAR 0 4
61630: PLUS
61631: PPUSH
61632: CALL_OW 1
61636: ST_TO_ADDR
// end ;
61637: GO 61556
61639: POP
61640: POP
// end ;
61641: LD_VAR 0 2
61645: RET
// export function Length ( array ) ; begin
61646: LD_INT 0
61648: PPUSH
// result := array + 0 ;
61649: LD_ADDR_VAR 0 2
61653: PUSH
61654: LD_VAR 0 1
61658: PUSH
61659: LD_INT 0
61661: PLUS
61662: ST_TO_ADDR
// end ;
61663: LD_VAR 0 2
61667: RET
// export function PrepareArray ( array ) ; begin
61668: LD_INT 0
61670: PPUSH
// result := array diff 0 ;
61671: LD_ADDR_VAR 0 2
61675: PUSH
61676: LD_VAR 0 1
61680: PUSH
61681: LD_INT 0
61683: DIFF
61684: ST_TO_ADDR
// if not result [ 1 ] then
61685: LD_VAR 0 2
61689: PUSH
61690: LD_INT 1
61692: ARRAY
61693: NOT
61694: IFFALSE 61714
// result := Delete ( result , 1 ) ;
61696: LD_ADDR_VAR 0 2
61700: PUSH
61701: LD_VAR 0 2
61705: PPUSH
61706: LD_INT 1
61708: PPUSH
61709: CALL_OW 3
61713: ST_TO_ADDR
// end ;
61714: LD_VAR 0 2
61718: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61719: LD_INT 0
61721: PPUSH
61722: PPUSH
61723: PPUSH
61724: PPUSH
// sibRocketRange := 25 ;
61725: LD_ADDR_VAR 0 6
61729: PUSH
61730: LD_INT 25
61732: ST_TO_ADDR
// result := false ;
61733: LD_ADDR_VAR 0 4
61737: PUSH
61738: LD_INT 0
61740: ST_TO_ADDR
// for i := 0 to 5 do
61741: LD_ADDR_VAR 0 5
61745: PUSH
61746: DOUBLE
61747: LD_INT 0
61749: DEC
61750: ST_TO_ADDR
61751: LD_INT 5
61753: PUSH
61754: FOR_TO
61755: IFFALSE 61822
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61757: LD_VAR 0 1
61761: PPUSH
61762: LD_VAR 0 5
61766: PPUSH
61767: LD_VAR 0 6
61771: PPUSH
61772: CALL_OW 272
61776: PPUSH
61777: LD_VAR 0 2
61781: PPUSH
61782: LD_VAR 0 5
61786: PPUSH
61787: LD_VAR 0 6
61791: PPUSH
61792: CALL_OW 273
61796: PPUSH
61797: LD_VAR 0 3
61801: PPUSH
61802: CALL_OW 309
61806: IFFALSE 61820
// begin result := true ;
61808: LD_ADDR_VAR 0 4
61812: PUSH
61813: LD_INT 1
61815: ST_TO_ADDR
// exit ;
61816: POP
61817: POP
61818: GO 61824
// end ;
61820: GO 61754
61822: POP
61823: POP
// end ;
61824: LD_VAR 0 4
61828: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61829: LD_INT 0
61831: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61832: LD_VAR 0 1
61836: PPUSH
61837: LD_VAR 0 2
61841: PPUSH
61842: LD_INT 0
61844: PPUSH
61845: LD_INT 0
61847: PPUSH
61848: LD_INT 1
61850: PPUSH
61851: LD_INT 0
61853: PPUSH
61854: CALL_OW 587
// end ;
61858: LD_VAR 0 3
61862: RET
// export function CenterOnNow ( unit ) ; begin
61863: LD_INT 0
61865: PPUSH
// result := IsInUnit ( unit ) ;
61866: LD_ADDR_VAR 0 2
61870: PUSH
61871: LD_VAR 0 1
61875: PPUSH
61876: CALL_OW 310
61880: ST_TO_ADDR
// if not result then
61881: LD_VAR 0 2
61885: NOT
61886: IFFALSE 61898
// result := unit ;
61888: LD_ADDR_VAR 0 2
61892: PUSH
61893: LD_VAR 0 1
61897: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
61898: LD_VAR 0 1
61902: PPUSH
61903: CALL_OW 87
// end ;
61907: LD_VAR 0 2
61911: RET
// export function ComMoveHex ( unit , hex ) ; begin
61912: LD_INT 0
61914: PPUSH
// if not hex then
61915: LD_VAR 0 2
61919: NOT
61920: IFFALSE 61924
// exit ;
61922: GO 61977
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
61924: LD_VAR 0 2
61928: PUSH
61929: LD_INT 1
61931: ARRAY
61932: PPUSH
61933: LD_VAR 0 2
61937: PUSH
61938: LD_INT 2
61940: ARRAY
61941: PPUSH
61942: CALL_OW 428
61946: IFFALSE 61950
// exit ;
61948: GO 61977
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
61950: LD_VAR 0 1
61954: PPUSH
61955: LD_VAR 0 2
61959: PUSH
61960: LD_INT 1
61962: ARRAY
61963: PPUSH
61964: LD_VAR 0 2
61968: PUSH
61969: LD_INT 2
61971: ARRAY
61972: PPUSH
61973: CALL_OW 111
// end ;
61977: LD_VAR 0 3
61981: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
61982: LD_INT 0
61984: PPUSH
61985: PPUSH
61986: PPUSH
// if not unit or not enemy then
61987: LD_VAR 0 1
61991: NOT
61992: PUSH
61993: LD_VAR 0 2
61997: NOT
61998: OR
61999: IFFALSE 62003
// exit ;
62001: GO 62127
// x := GetX ( enemy ) ;
62003: LD_ADDR_VAR 0 4
62007: PUSH
62008: LD_VAR 0 2
62012: PPUSH
62013: CALL_OW 250
62017: ST_TO_ADDR
// y := GetY ( enemy ) ;
62018: LD_ADDR_VAR 0 5
62022: PUSH
62023: LD_VAR 0 2
62027: PPUSH
62028: CALL_OW 251
62032: ST_TO_ADDR
// if ValidHex ( x , y ) then
62033: LD_VAR 0 4
62037: PPUSH
62038: LD_VAR 0 5
62042: PPUSH
62043: CALL_OW 488
62047: IFFALSE 62127
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
62049: LD_VAR 0 2
62053: PPUSH
62054: CALL_OW 247
62058: PUSH
62059: LD_INT 3
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: IN
62069: PUSH
62070: LD_VAR 0 1
62074: PPUSH
62075: CALL_OW 255
62079: PPUSH
62080: LD_VAR 0 2
62084: PPUSH
62085: CALL_OW 292
62089: AND
62090: IFFALSE 62108
// ComAttackUnit ( unit , enemy ) else
62092: LD_VAR 0 1
62096: PPUSH
62097: LD_VAR 0 2
62101: PPUSH
62102: CALL_OW 115
62106: GO 62127
// ComAgressiveMove ( unit , x , y ) ;
62108: LD_VAR 0 1
62112: PPUSH
62113: LD_VAR 0 4
62117: PPUSH
62118: LD_VAR 0 5
62122: PPUSH
62123: CALL_OW 114
// end ; end_of_file end_of_file
62127: LD_VAR 0 3
62131: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62132: LD_VAR 0 1
62136: PPUSH
62137: LD_VAR 0 2
62141: PPUSH
62142: LD_VAR 0 3
62146: PPUSH
62147: LD_VAR 0 4
62151: PPUSH
62152: LD_VAR 0 5
62156: PPUSH
62157: LD_VAR 0 6
62161: PPUSH
62162: CALL 62346 0 6
// end ;
62166: PPOPN 6
62168: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62169: LD_INT 0
62171: PPUSH
// begin if not units then
62172: LD_VAR 0 1
62176: NOT
62177: IFFALSE 62181
// exit ;
62179: GO 62181
// end ;
62181: PPOPN 7
62183: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
62184: CALL 62250 0 0
// end ; end_of_file
62188: PPOPN 1
62190: END
// export globalGameSaveCounter ; every 0 0$1 do
62191: GO 62193
62193: DISABLE
// begin enable ;
62194: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62195: LD_STRING updateTimer(
62197: PUSH
62198: LD_OWVAR 1
62202: STR
62203: PUSH
62204: LD_STRING );
62206: STR
62207: PPUSH
62208: CALL_OW 559
// end ;
62212: END
// every 0 0$1 do
62213: GO 62215
62215: DISABLE
// begin globalGameSaveCounter := 0 ;
62216: LD_ADDR_EXP 45
62220: PUSH
62221: LD_INT 0
62223: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
62224: LD_STRING setGameSaveCounter(0)
62226: PPUSH
62227: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
62231: LD_STRING initStreamRollete();
62233: PPUSH
62234: CALL_OW 559
// InitStreamMode ;
62238: CALL 63564 0 0
// DefineStreamItems ( false ) ;
62242: LD_INT 0
62244: PPUSH
62245: CALL 64028 0 1
// end ;
62249: END
// export function SOS_MapStart ( ) ; begin
62250: LD_INT 0
62252: PPUSH
// if streamModeActive then
62253: LD_EXP 46
62257: IFFALSE 62266
// DefineStreamItems ( true ) ;
62259: LD_INT 1
62261: PPUSH
62262: CALL 64028 0 1
// UpdateLuaVariables ( ) ;
62266: CALL 62283 0 0
// UpdateFactoryWaypoints ( ) ;
62270: CALL 76897 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62274: CALL 77154 0 0
// end ;
62278: LD_VAR 0 1
62282: RET
// function UpdateLuaVariables ( ) ; begin
62283: LD_INT 0
62285: PPUSH
// if globalGameSaveCounter then
62286: LD_EXP 45
62290: IFFALSE 62324
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
62292: LD_ADDR_EXP 45
62296: PUSH
62297: LD_EXP 45
62301: PPUSH
62302: CALL 59271 0 1
62306: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62307: LD_STRING setGameSaveCounter(
62309: PUSH
62310: LD_EXP 45
62314: STR
62315: PUSH
62316: LD_STRING )
62318: STR
62319: PPUSH
62320: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62324: LD_STRING setGameDifficulty(
62326: PUSH
62327: LD_OWVAR 67
62331: STR
62332: PUSH
62333: LD_STRING )
62335: STR
62336: PPUSH
62337: CALL_OW 559
// end ;
62341: LD_VAR 0 1
62345: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62346: LD_INT 0
62348: PPUSH
// if p2 = stream_mode then
62349: LD_VAR 0 2
62353: PUSH
62354: LD_INT 100
62356: EQUAL
62357: IFFALSE 63360
// begin if not StreamModeActive then
62359: LD_EXP 46
62363: NOT
62364: IFFALSE 62374
// StreamModeActive := true ;
62366: LD_ADDR_EXP 46
62370: PUSH
62371: LD_INT 1
62373: ST_TO_ADDR
// if p3 = 0 then
62374: LD_VAR 0 3
62378: PUSH
62379: LD_INT 0
62381: EQUAL
62382: IFFALSE 62388
// InitStreamMode ;
62384: CALL 63564 0 0
// if p3 = 1 then
62388: LD_VAR 0 3
62392: PUSH
62393: LD_INT 1
62395: EQUAL
62396: IFFALSE 62406
// sRocket := true ;
62398: LD_ADDR_EXP 51
62402: PUSH
62403: LD_INT 1
62405: ST_TO_ADDR
// if p3 = 2 then
62406: LD_VAR 0 3
62410: PUSH
62411: LD_INT 2
62413: EQUAL
62414: IFFALSE 62424
// sSpeed := true ;
62416: LD_ADDR_EXP 50
62420: PUSH
62421: LD_INT 1
62423: ST_TO_ADDR
// if p3 = 3 then
62424: LD_VAR 0 3
62428: PUSH
62429: LD_INT 3
62431: EQUAL
62432: IFFALSE 62442
// sEngine := true ;
62434: LD_ADDR_EXP 52
62438: PUSH
62439: LD_INT 1
62441: ST_TO_ADDR
// if p3 = 4 then
62442: LD_VAR 0 3
62446: PUSH
62447: LD_INT 4
62449: EQUAL
62450: IFFALSE 62460
// sSpec := true ;
62452: LD_ADDR_EXP 49
62456: PUSH
62457: LD_INT 1
62459: ST_TO_ADDR
// if p3 = 5 then
62460: LD_VAR 0 3
62464: PUSH
62465: LD_INT 5
62467: EQUAL
62468: IFFALSE 62478
// sLevel := true ;
62470: LD_ADDR_EXP 53
62474: PUSH
62475: LD_INT 1
62477: ST_TO_ADDR
// if p3 = 6 then
62478: LD_VAR 0 3
62482: PUSH
62483: LD_INT 6
62485: EQUAL
62486: IFFALSE 62496
// sArmoury := true ;
62488: LD_ADDR_EXP 54
62492: PUSH
62493: LD_INT 1
62495: ST_TO_ADDR
// if p3 = 7 then
62496: LD_VAR 0 3
62500: PUSH
62501: LD_INT 7
62503: EQUAL
62504: IFFALSE 62514
// sRadar := true ;
62506: LD_ADDR_EXP 55
62510: PUSH
62511: LD_INT 1
62513: ST_TO_ADDR
// if p3 = 8 then
62514: LD_VAR 0 3
62518: PUSH
62519: LD_INT 8
62521: EQUAL
62522: IFFALSE 62532
// sBunker := true ;
62524: LD_ADDR_EXP 56
62528: PUSH
62529: LD_INT 1
62531: ST_TO_ADDR
// if p3 = 9 then
62532: LD_VAR 0 3
62536: PUSH
62537: LD_INT 9
62539: EQUAL
62540: IFFALSE 62550
// sHack := true ;
62542: LD_ADDR_EXP 57
62546: PUSH
62547: LD_INT 1
62549: ST_TO_ADDR
// if p3 = 10 then
62550: LD_VAR 0 3
62554: PUSH
62555: LD_INT 10
62557: EQUAL
62558: IFFALSE 62568
// sFire := true ;
62560: LD_ADDR_EXP 58
62564: PUSH
62565: LD_INT 1
62567: ST_TO_ADDR
// if p3 = 11 then
62568: LD_VAR 0 3
62572: PUSH
62573: LD_INT 11
62575: EQUAL
62576: IFFALSE 62586
// sRefresh := true ;
62578: LD_ADDR_EXP 59
62582: PUSH
62583: LD_INT 1
62585: ST_TO_ADDR
// if p3 = 12 then
62586: LD_VAR 0 3
62590: PUSH
62591: LD_INT 12
62593: EQUAL
62594: IFFALSE 62604
// sExp := true ;
62596: LD_ADDR_EXP 60
62600: PUSH
62601: LD_INT 1
62603: ST_TO_ADDR
// if p3 = 13 then
62604: LD_VAR 0 3
62608: PUSH
62609: LD_INT 13
62611: EQUAL
62612: IFFALSE 62622
// sDepot := true ;
62614: LD_ADDR_EXP 61
62618: PUSH
62619: LD_INT 1
62621: ST_TO_ADDR
// if p3 = 14 then
62622: LD_VAR 0 3
62626: PUSH
62627: LD_INT 14
62629: EQUAL
62630: IFFALSE 62640
// sFlag := true ;
62632: LD_ADDR_EXP 62
62636: PUSH
62637: LD_INT 1
62639: ST_TO_ADDR
// if p3 = 15 then
62640: LD_VAR 0 3
62644: PUSH
62645: LD_INT 15
62647: EQUAL
62648: IFFALSE 62658
// sKamikadze := true ;
62650: LD_ADDR_EXP 70
62654: PUSH
62655: LD_INT 1
62657: ST_TO_ADDR
// if p3 = 16 then
62658: LD_VAR 0 3
62662: PUSH
62663: LD_INT 16
62665: EQUAL
62666: IFFALSE 62676
// sTroll := true ;
62668: LD_ADDR_EXP 71
62672: PUSH
62673: LD_INT 1
62675: ST_TO_ADDR
// if p3 = 17 then
62676: LD_VAR 0 3
62680: PUSH
62681: LD_INT 17
62683: EQUAL
62684: IFFALSE 62694
// sSlow := true ;
62686: LD_ADDR_EXP 72
62690: PUSH
62691: LD_INT 1
62693: ST_TO_ADDR
// if p3 = 18 then
62694: LD_VAR 0 3
62698: PUSH
62699: LD_INT 18
62701: EQUAL
62702: IFFALSE 62712
// sLack := true ;
62704: LD_ADDR_EXP 73
62708: PUSH
62709: LD_INT 1
62711: ST_TO_ADDR
// if p3 = 19 then
62712: LD_VAR 0 3
62716: PUSH
62717: LD_INT 19
62719: EQUAL
62720: IFFALSE 62730
// sTank := true ;
62722: LD_ADDR_EXP 75
62726: PUSH
62727: LD_INT 1
62729: ST_TO_ADDR
// if p3 = 20 then
62730: LD_VAR 0 3
62734: PUSH
62735: LD_INT 20
62737: EQUAL
62738: IFFALSE 62748
// sRemote := true ;
62740: LD_ADDR_EXP 76
62744: PUSH
62745: LD_INT 1
62747: ST_TO_ADDR
// if p3 = 21 then
62748: LD_VAR 0 3
62752: PUSH
62753: LD_INT 21
62755: EQUAL
62756: IFFALSE 62766
// sPowell := true ;
62758: LD_ADDR_EXP 77
62762: PUSH
62763: LD_INT 1
62765: ST_TO_ADDR
// if p3 = 22 then
62766: LD_VAR 0 3
62770: PUSH
62771: LD_INT 22
62773: EQUAL
62774: IFFALSE 62784
// sTeleport := true ;
62776: LD_ADDR_EXP 80
62780: PUSH
62781: LD_INT 1
62783: ST_TO_ADDR
// if p3 = 23 then
62784: LD_VAR 0 3
62788: PUSH
62789: LD_INT 23
62791: EQUAL
62792: IFFALSE 62802
// sOilTower := true ;
62794: LD_ADDR_EXP 82
62798: PUSH
62799: LD_INT 1
62801: ST_TO_ADDR
// if p3 = 24 then
62802: LD_VAR 0 3
62806: PUSH
62807: LD_INT 24
62809: EQUAL
62810: IFFALSE 62820
// sShovel := true ;
62812: LD_ADDR_EXP 83
62816: PUSH
62817: LD_INT 1
62819: ST_TO_ADDR
// if p3 = 25 then
62820: LD_VAR 0 3
62824: PUSH
62825: LD_INT 25
62827: EQUAL
62828: IFFALSE 62838
// sSheik := true ;
62830: LD_ADDR_EXP 84
62834: PUSH
62835: LD_INT 1
62837: ST_TO_ADDR
// if p3 = 26 then
62838: LD_VAR 0 3
62842: PUSH
62843: LD_INT 26
62845: EQUAL
62846: IFFALSE 62856
// sEarthquake := true ;
62848: LD_ADDR_EXP 86
62852: PUSH
62853: LD_INT 1
62855: ST_TO_ADDR
// if p3 = 27 then
62856: LD_VAR 0 3
62860: PUSH
62861: LD_INT 27
62863: EQUAL
62864: IFFALSE 62874
// sAI := true ;
62866: LD_ADDR_EXP 87
62870: PUSH
62871: LD_INT 1
62873: ST_TO_ADDR
// if p3 = 28 then
62874: LD_VAR 0 3
62878: PUSH
62879: LD_INT 28
62881: EQUAL
62882: IFFALSE 62892
// sCargo := true ;
62884: LD_ADDR_EXP 90
62888: PUSH
62889: LD_INT 1
62891: ST_TO_ADDR
// if p3 = 29 then
62892: LD_VAR 0 3
62896: PUSH
62897: LD_INT 29
62899: EQUAL
62900: IFFALSE 62910
// sDLaser := true ;
62902: LD_ADDR_EXP 91
62906: PUSH
62907: LD_INT 1
62909: ST_TO_ADDR
// if p3 = 30 then
62910: LD_VAR 0 3
62914: PUSH
62915: LD_INT 30
62917: EQUAL
62918: IFFALSE 62928
// sExchange := true ;
62920: LD_ADDR_EXP 92
62924: PUSH
62925: LD_INT 1
62927: ST_TO_ADDR
// if p3 = 31 then
62928: LD_VAR 0 3
62932: PUSH
62933: LD_INT 31
62935: EQUAL
62936: IFFALSE 62946
// sFac := true ;
62938: LD_ADDR_EXP 93
62942: PUSH
62943: LD_INT 1
62945: ST_TO_ADDR
// if p3 = 32 then
62946: LD_VAR 0 3
62950: PUSH
62951: LD_INT 32
62953: EQUAL
62954: IFFALSE 62964
// sPower := true ;
62956: LD_ADDR_EXP 94
62960: PUSH
62961: LD_INT 1
62963: ST_TO_ADDR
// if p3 = 33 then
62964: LD_VAR 0 3
62968: PUSH
62969: LD_INT 33
62971: EQUAL
62972: IFFALSE 62982
// sRandom := true ;
62974: LD_ADDR_EXP 95
62978: PUSH
62979: LD_INT 1
62981: ST_TO_ADDR
// if p3 = 34 then
62982: LD_VAR 0 3
62986: PUSH
62987: LD_INT 34
62989: EQUAL
62990: IFFALSE 63000
// sShield := true ;
62992: LD_ADDR_EXP 96
62996: PUSH
62997: LD_INT 1
62999: ST_TO_ADDR
// if p3 = 35 then
63000: LD_VAR 0 3
63004: PUSH
63005: LD_INT 35
63007: EQUAL
63008: IFFALSE 63018
// sTime := true ;
63010: LD_ADDR_EXP 97
63014: PUSH
63015: LD_INT 1
63017: ST_TO_ADDR
// if p3 = 36 then
63018: LD_VAR 0 3
63022: PUSH
63023: LD_INT 36
63025: EQUAL
63026: IFFALSE 63036
// sTools := true ;
63028: LD_ADDR_EXP 98
63032: PUSH
63033: LD_INT 1
63035: ST_TO_ADDR
// if p3 = 101 then
63036: LD_VAR 0 3
63040: PUSH
63041: LD_INT 101
63043: EQUAL
63044: IFFALSE 63054
// sSold := true ;
63046: LD_ADDR_EXP 63
63050: PUSH
63051: LD_INT 1
63053: ST_TO_ADDR
// if p3 = 102 then
63054: LD_VAR 0 3
63058: PUSH
63059: LD_INT 102
63061: EQUAL
63062: IFFALSE 63072
// sDiff := true ;
63064: LD_ADDR_EXP 64
63068: PUSH
63069: LD_INT 1
63071: ST_TO_ADDR
// if p3 = 103 then
63072: LD_VAR 0 3
63076: PUSH
63077: LD_INT 103
63079: EQUAL
63080: IFFALSE 63090
// sFog := true ;
63082: LD_ADDR_EXP 67
63086: PUSH
63087: LD_INT 1
63089: ST_TO_ADDR
// if p3 = 104 then
63090: LD_VAR 0 3
63094: PUSH
63095: LD_INT 104
63097: EQUAL
63098: IFFALSE 63108
// sReset := true ;
63100: LD_ADDR_EXP 68
63104: PUSH
63105: LD_INT 1
63107: ST_TO_ADDR
// if p3 = 105 then
63108: LD_VAR 0 3
63112: PUSH
63113: LD_INT 105
63115: EQUAL
63116: IFFALSE 63126
// sSun := true ;
63118: LD_ADDR_EXP 69
63122: PUSH
63123: LD_INT 1
63125: ST_TO_ADDR
// if p3 = 106 then
63126: LD_VAR 0 3
63130: PUSH
63131: LD_INT 106
63133: EQUAL
63134: IFFALSE 63144
// sTiger := true ;
63136: LD_ADDR_EXP 65
63140: PUSH
63141: LD_INT 1
63143: ST_TO_ADDR
// if p3 = 107 then
63144: LD_VAR 0 3
63148: PUSH
63149: LD_INT 107
63151: EQUAL
63152: IFFALSE 63162
// sBomb := true ;
63154: LD_ADDR_EXP 66
63158: PUSH
63159: LD_INT 1
63161: ST_TO_ADDR
// if p3 = 108 then
63162: LD_VAR 0 3
63166: PUSH
63167: LD_INT 108
63169: EQUAL
63170: IFFALSE 63180
// sWound := true ;
63172: LD_ADDR_EXP 74
63176: PUSH
63177: LD_INT 1
63179: ST_TO_ADDR
// if p3 = 109 then
63180: LD_VAR 0 3
63184: PUSH
63185: LD_INT 109
63187: EQUAL
63188: IFFALSE 63198
// sBetray := true ;
63190: LD_ADDR_EXP 78
63194: PUSH
63195: LD_INT 1
63197: ST_TO_ADDR
// if p3 = 110 then
63198: LD_VAR 0 3
63202: PUSH
63203: LD_INT 110
63205: EQUAL
63206: IFFALSE 63216
// sContamin := true ;
63208: LD_ADDR_EXP 79
63212: PUSH
63213: LD_INT 1
63215: ST_TO_ADDR
// if p3 = 111 then
63216: LD_VAR 0 3
63220: PUSH
63221: LD_INT 111
63223: EQUAL
63224: IFFALSE 63234
// sOil := true ;
63226: LD_ADDR_EXP 81
63230: PUSH
63231: LD_INT 1
63233: ST_TO_ADDR
// if p3 = 112 then
63234: LD_VAR 0 3
63238: PUSH
63239: LD_INT 112
63241: EQUAL
63242: IFFALSE 63252
// sStu := true ;
63244: LD_ADDR_EXP 85
63248: PUSH
63249: LD_INT 1
63251: ST_TO_ADDR
// if p3 = 113 then
63252: LD_VAR 0 3
63256: PUSH
63257: LD_INT 113
63259: EQUAL
63260: IFFALSE 63270
// sBazooka := true ;
63262: LD_ADDR_EXP 88
63266: PUSH
63267: LD_INT 1
63269: ST_TO_ADDR
// if p3 = 114 then
63270: LD_VAR 0 3
63274: PUSH
63275: LD_INT 114
63277: EQUAL
63278: IFFALSE 63288
// sMortar := true ;
63280: LD_ADDR_EXP 89
63284: PUSH
63285: LD_INT 1
63287: ST_TO_ADDR
// if p3 = 115 then
63288: LD_VAR 0 3
63292: PUSH
63293: LD_INT 115
63295: EQUAL
63296: IFFALSE 63306
// sRanger := true ;
63298: LD_ADDR_EXP 99
63302: PUSH
63303: LD_INT 1
63305: ST_TO_ADDR
// if p3 = 116 then
63306: LD_VAR 0 3
63310: PUSH
63311: LD_INT 116
63313: EQUAL
63314: IFFALSE 63324
// sComputer := true ;
63316: LD_ADDR_EXP 100
63320: PUSH
63321: LD_INT 1
63323: ST_TO_ADDR
// if p3 = 117 then
63324: LD_VAR 0 3
63328: PUSH
63329: LD_INT 117
63331: EQUAL
63332: IFFALSE 63342
// s30 := true ;
63334: LD_ADDR_EXP 101
63338: PUSH
63339: LD_INT 1
63341: ST_TO_ADDR
// if p3 = 118 then
63342: LD_VAR 0 3
63346: PUSH
63347: LD_INT 118
63349: EQUAL
63350: IFFALSE 63360
// s60 := true ;
63352: LD_ADDR_EXP 102
63356: PUSH
63357: LD_INT 1
63359: ST_TO_ADDR
// end ; if p2 = hack_mode then
63360: LD_VAR 0 2
63364: PUSH
63365: LD_INT 101
63367: EQUAL
63368: IFFALSE 63496
// begin case p3 of 1 :
63370: LD_VAR 0 3
63374: PUSH
63375: LD_INT 1
63377: DOUBLE
63378: EQUAL
63379: IFTRUE 63383
63381: GO 63390
63383: POP
// hHackUnlimitedResources ; 2 :
63384: CALL 75643 0 0
63388: GO 63496
63390: LD_INT 2
63392: DOUBLE
63393: EQUAL
63394: IFTRUE 63398
63396: GO 63405
63398: POP
// hHackSetLevel10 ; 3 :
63399: CALL 75776 0 0
63403: GO 63496
63405: LD_INT 3
63407: DOUBLE
63408: EQUAL
63409: IFTRUE 63413
63411: GO 63420
63413: POP
// hHackSetLevel10YourUnits ; 4 :
63414: CALL 75861 0 0
63418: GO 63496
63420: LD_INT 4
63422: DOUBLE
63423: EQUAL
63424: IFTRUE 63428
63426: GO 63435
63428: POP
// hHackInvincible ; 5 :
63429: CALL 76309 0 0
63433: GO 63496
63435: LD_INT 5
63437: DOUBLE
63438: EQUAL
63439: IFTRUE 63443
63441: GO 63450
63443: POP
// hHackInvisible ; 6 :
63444: CALL 76420 0 0
63448: GO 63496
63450: LD_INT 6
63452: DOUBLE
63453: EQUAL
63454: IFTRUE 63458
63456: GO 63465
63458: POP
// hHackChangeYourSide ; 7 :
63459: CALL 76477 0 0
63463: GO 63496
63465: LD_INT 7
63467: DOUBLE
63468: EQUAL
63469: IFTRUE 63473
63471: GO 63480
63473: POP
// hHackChangeUnitSide ; 8 :
63474: CALL 76519 0 0
63478: GO 63496
63480: LD_INT 8
63482: DOUBLE
63483: EQUAL
63484: IFTRUE 63488
63486: GO 63495
63488: POP
// hHackFog ; end ;
63489: CALL 76620 0 0
63493: GO 63496
63495: POP
// end ; if p2 = game_save_mode then
63496: LD_VAR 0 2
63500: PUSH
63501: LD_INT 102
63503: EQUAL
63504: IFFALSE 63559
// begin if p3 = 1 then
63506: LD_VAR 0 3
63510: PUSH
63511: LD_INT 1
63513: EQUAL
63514: IFFALSE 63526
// globalGameSaveCounter := p4 ;
63516: LD_ADDR_EXP 45
63520: PUSH
63521: LD_VAR 0 4
63525: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
63526: LD_VAR 0 3
63530: PUSH
63531: LD_INT 2
63533: EQUAL
63534: PUSH
63535: LD_EXP 45
63539: AND
63540: IFFALSE 63559
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63542: LD_STRING setGameSaveCounter(
63544: PUSH
63545: LD_EXP 45
63549: STR
63550: PUSH
63551: LD_STRING )
63553: STR
63554: PPUSH
63555: CALL_OW 559
// end ; end ;
63559: LD_VAR 0 7
63563: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
63564: LD_INT 0
63566: PPUSH
// streamModeActive := false ;
63567: LD_ADDR_EXP 46
63571: PUSH
63572: LD_INT 0
63574: ST_TO_ADDR
// normalCounter := 36 ;
63575: LD_ADDR_EXP 47
63579: PUSH
63580: LD_INT 36
63582: ST_TO_ADDR
// hardcoreCounter := 18 ;
63583: LD_ADDR_EXP 48
63587: PUSH
63588: LD_INT 18
63590: ST_TO_ADDR
// sRocket := false ;
63591: LD_ADDR_EXP 51
63595: PUSH
63596: LD_INT 0
63598: ST_TO_ADDR
// sSpeed := false ;
63599: LD_ADDR_EXP 50
63603: PUSH
63604: LD_INT 0
63606: ST_TO_ADDR
// sEngine := false ;
63607: LD_ADDR_EXP 52
63611: PUSH
63612: LD_INT 0
63614: ST_TO_ADDR
// sSpec := false ;
63615: LD_ADDR_EXP 49
63619: PUSH
63620: LD_INT 0
63622: ST_TO_ADDR
// sLevel := false ;
63623: LD_ADDR_EXP 53
63627: PUSH
63628: LD_INT 0
63630: ST_TO_ADDR
// sArmoury := false ;
63631: LD_ADDR_EXP 54
63635: PUSH
63636: LD_INT 0
63638: ST_TO_ADDR
// sRadar := false ;
63639: LD_ADDR_EXP 55
63643: PUSH
63644: LD_INT 0
63646: ST_TO_ADDR
// sBunker := false ;
63647: LD_ADDR_EXP 56
63651: PUSH
63652: LD_INT 0
63654: ST_TO_ADDR
// sHack := false ;
63655: LD_ADDR_EXP 57
63659: PUSH
63660: LD_INT 0
63662: ST_TO_ADDR
// sFire := false ;
63663: LD_ADDR_EXP 58
63667: PUSH
63668: LD_INT 0
63670: ST_TO_ADDR
// sRefresh := false ;
63671: LD_ADDR_EXP 59
63675: PUSH
63676: LD_INT 0
63678: ST_TO_ADDR
// sExp := false ;
63679: LD_ADDR_EXP 60
63683: PUSH
63684: LD_INT 0
63686: ST_TO_ADDR
// sDepot := false ;
63687: LD_ADDR_EXP 61
63691: PUSH
63692: LD_INT 0
63694: ST_TO_ADDR
// sFlag := false ;
63695: LD_ADDR_EXP 62
63699: PUSH
63700: LD_INT 0
63702: ST_TO_ADDR
// sKamikadze := false ;
63703: LD_ADDR_EXP 70
63707: PUSH
63708: LD_INT 0
63710: ST_TO_ADDR
// sTroll := false ;
63711: LD_ADDR_EXP 71
63715: PUSH
63716: LD_INT 0
63718: ST_TO_ADDR
// sSlow := false ;
63719: LD_ADDR_EXP 72
63723: PUSH
63724: LD_INT 0
63726: ST_TO_ADDR
// sLack := false ;
63727: LD_ADDR_EXP 73
63731: PUSH
63732: LD_INT 0
63734: ST_TO_ADDR
// sTank := false ;
63735: LD_ADDR_EXP 75
63739: PUSH
63740: LD_INT 0
63742: ST_TO_ADDR
// sRemote := false ;
63743: LD_ADDR_EXP 76
63747: PUSH
63748: LD_INT 0
63750: ST_TO_ADDR
// sPowell := false ;
63751: LD_ADDR_EXP 77
63755: PUSH
63756: LD_INT 0
63758: ST_TO_ADDR
// sTeleport := false ;
63759: LD_ADDR_EXP 80
63763: PUSH
63764: LD_INT 0
63766: ST_TO_ADDR
// sOilTower := false ;
63767: LD_ADDR_EXP 82
63771: PUSH
63772: LD_INT 0
63774: ST_TO_ADDR
// sShovel := false ;
63775: LD_ADDR_EXP 83
63779: PUSH
63780: LD_INT 0
63782: ST_TO_ADDR
// sSheik := false ;
63783: LD_ADDR_EXP 84
63787: PUSH
63788: LD_INT 0
63790: ST_TO_ADDR
// sEarthquake := false ;
63791: LD_ADDR_EXP 86
63795: PUSH
63796: LD_INT 0
63798: ST_TO_ADDR
// sAI := false ;
63799: LD_ADDR_EXP 87
63803: PUSH
63804: LD_INT 0
63806: ST_TO_ADDR
// sCargo := false ;
63807: LD_ADDR_EXP 90
63811: PUSH
63812: LD_INT 0
63814: ST_TO_ADDR
// sDLaser := false ;
63815: LD_ADDR_EXP 91
63819: PUSH
63820: LD_INT 0
63822: ST_TO_ADDR
// sExchange := false ;
63823: LD_ADDR_EXP 92
63827: PUSH
63828: LD_INT 0
63830: ST_TO_ADDR
// sFac := false ;
63831: LD_ADDR_EXP 93
63835: PUSH
63836: LD_INT 0
63838: ST_TO_ADDR
// sPower := false ;
63839: LD_ADDR_EXP 94
63843: PUSH
63844: LD_INT 0
63846: ST_TO_ADDR
// sRandom := false ;
63847: LD_ADDR_EXP 95
63851: PUSH
63852: LD_INT 0
63854: ST_TO_ADDR
// sShield := false ;
63855: LD_ADDR_EXP 96
63859: PUSH
63860: LD_INT 0
63862: ST_TO_ADDR
// sTime := false ;
63863: LD_ADDR_EXP 97
63867: PUSH
63868: LD_INT 0
63870: ST_TO_ADDR
// sTools := false ;
63871: LD_ADDR_EXP 98
63875: PUSH
63876: LD_INT 0
63878: ST_TO_ADDR
// sSold := false ;
63879: LD_ADDR_EXP 63
63883: PUSH
63884: LD_INT 0
63886: ST_TO_ADDR
// sDiff := false ;
63887: LD_ADDR_EXP 64
63891: PUSH
63892: LD_INT 0
63894: ST_TO_ADDR
// sFog := false ;
63895: LD_ADDR_EXP 67
63899: PUSH
63900: LD_INT 0
63902: ST_TO_ADDR
// sReset := false ;
63903: LD_ADDR_EXP 68
63907: PUSH
63908: LD_INT 0
63910: ST_TO_ADDR
// sSun := false ;
63911: LD_ADDR_EXP 69
63915: PUSH
63916: LD_INT 0
63918: ST_TO_ADDR
// sTiger := false ;
63919: LD_ADDR_EXP 65
63923: PUSH
63924: LD_INT 0
63926: ST_TO_ADDR
// sBomb := false ;
63927: LD_ADDR_EXP 66
63931: PUSH
63932: LD_INT 0
63934: ST_TO_ADDR
// sWound := false ;
63935: LD_ADDR_EXP 74
63939: PUSH
63940: LD_INT 0
63942: ST_TO_ADDR
// sBetray := false ;
63943: LD_ADDR_EXP 78
63947: PUSH
63948: LD_INT 0
63950: ST_TO_ADDR
// sContamin := false ;
63951: LD_ADDR_EXP 79
63955: PUSH
63956: LD_INT 0
63958: ST_TO_ADDR
// sOil := false ;
63959: LD_ADDR_EXP 81
63963: PUSH
63964: LD_INT 0
63966: ST_TO_ADDR
// sStu := false ;
63967: LD_ADDR_EXP 85
63971: PUSH
63972: LD_INT 0
63974: ST_TO_ADDR
// sBazooka := false ;
63975: LD_ADDR_EXP 88
63979: PUSH
63980: LD_INT 0
63982: ST_TO_ADDR
// sMortar := false ;
63983: LD_ADDR_EXP 89
63987: PUSH
63988: LD_INT 0
63990: ST_TO_ADDR
// sRanger := false ;
63991: LD_ADDR_EXP 99
63995: PUSH
63996: LD_INT 0
63998: ST_TO_ADDR
// sComputer := false ;
63999: LD_ADDR_EXP 100
64003: PUSH
64004: LD_INT 0
64006: ST_TO_ADDR
// s30 := false ;
64007: LD_ADDR_EXP 101
64011: PUSH
64012: LD_INT 0
64014: ST_TO_ADDR
// s60 := false ;
64015: LD_ADDR_EXP 102
64019: PUSH
64020: LD_INT 0
64022: ST_TO_ADDR
// end ;
64023: LD_VAR 0 1
64027: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
64028: LD_INT 0
64030: PPUSH
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
64035: PPUSH
64036: PPUSH
// result := [ ] ;
64037: LD_ADDR_VAR 0 2
64041: PUSH
64042: EMPTY
64043: ST_TO_ADDR
// if campaign_id = 1 then
64044: LD_OWVAR 69
64048: PUSH
64049: LD_INT 1
64051: EQUAL
64052: IFFALSE 67218
// begin case mission_number of 1 :
64054: LD_OWVAR 70
64058: PUSH
64059: LD_INT 1
64061: DOUBLE
64062: EQUAL
64063: IFTRUE 64067
64065: GO 64143
64067: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
64068: LD_ADDR_VAR 0 2
64072: PUSH
64073: LD_INT 2
64075: PUSH
64076: LD_INT 4
64078: PUSH
64079: LD_INT 11
64081: PUSH
64082: LD_INT 12
64084: PUSH
64085: LD_INT 15
64087: PUSH
64088: LD_INT 16
64090: PUSH
64091: LD_INT 22
64093: PUSH
64094: LD_INT 23
64096: PUSH
64097: LD_INT 26
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 101
64113: PUSH
64114: LD_INT 102
64116: PUSH
64117: LD_INT 106
64119: PUSH
64120: LD_INT 116
64122: PUSH
64123: LD_INT 117
64125: PUSH
64126: LD_INT 118
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: ST_TO_ADDR
64141: GO 67216
64143: LD_INT 2
64145: DOUBLE
64146: EQUAL
64147: IFTRUE 64151
64149: GO 64235
64151: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
64152: LD_ADDR_VAR 0 2
64156: PUSH
64157: LD_INT 2
64159: PUSH
64160: LD_INT 4
64162: PUSH
64163: LD_INT 11
64165: PUSH
64166: LD_INT 12
64168: PUSH
64169: LD_INT 15
64171: PUSH
64172: LD_INT 16
64174: PUSH
64175: LD_INT 22
64177: PUSH
64178: LD_INT 23
64180: PUSH
64181: LD_INT 26
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 101
64197: PUSH
64198: LD_INT 102
64200: PUSH
64201: LD_INT 105
64203: PUSH
64204: LD_INT 106
64206: PUSH
64207: LD_INT 108
64209: PUSH
64210: LD_INT 116
64212: PUSH
64213: LD_INT 117
64215: PUSH
64216: LD_INT 118
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: ST_TO_ADDR
64233: GO 67216
64235: LD_INT 3
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64243
64241: GO 64331
64243: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
64244: LD_ADDR_VAR 0 2
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: LD_INT 4
64254: PUSH
64255: LD_INT 5
64257: PUSH
64258: LD_INT 11
64260: PUSH
64261: LD_INT 12
64263: PUSH
64264: LD_INT 15
64266: PUSH
64267: LD_INT 16
64269: PUSH
64270: LD_INT 22
64272: PUSH
64273: LD_INT 26
64275: PUSH
64276: LD_INT 36
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 101
64293: PUSH
64294: LD_INT 102
64296: PUSH
64297: LD_INT 105
64299: PUSH
64300: LD_INT 106
64302: PUSH
64303: LD_INT 108
64305: PUSH
64306: LD_INT 116
64308: PUSH
64309: LD_INT 117
64311: PUSH
64312: LD_INT 118
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: ST_TO_ADDR
64329: GO 67216
64331: LD_INT 4
64333: DOUBLE
64334: EQUAL
64335: IFTRUE 64339
64337: GO 64435
64339: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
64340: LD_ADDR_VAR 0 2
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: LD_INT 4
64350: PUSH
64351: LD_INT 5
64353: PUSH
64354: LD_INT 8
64356: PUSH
64357: LD_INT 11
64359: PUSH
64360: LD_INT 12
64362: PUSH
64363: LD_INT 15
64365: PUSH
64366: LD_INT 16
64368: PUSH
64369: LD_INT 22
64371: PUSH
64372: LD_INT 23
64374: PUSH
64375: LD_INT 26
64377: PUSH
64378: LD_INT 36
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 101
64397: PUSH
64398: LD_INT 102
64400: PUSH
64401: LD_INT 105
64403: PUSH
64404: LD_INT 106
64406: PUSH
64407: LD_INT 108
64409: PUSH
64410: LD_INT 116
64412: PUSH
64413: LD_INT 117
64415: PUSH
64416: LD_INT 118
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: ST_TO_ADDR
64433: GO 67216
64435: LD_INT 5
64437: DOUBLE
64438: EQUAL
64439: IFTRUE 64443
64441: GO 64555
64443: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
64444: LD_ADDR_VAR 0 2
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: LD_INT 4
64454: PUSH
64455: LD_INT 5
64457: PUSH
64458: LD_INT 6
64460: PUSH
64461: LD_INT 8
64463: PUSH
64464: LD_INT 11
64466: PUSH
64467: LD_INT 12
64469: PUSH
64470: LD_INT 15
64472: PUSH
64473: LD_INT 16
64475: PUSH
64476: LD_INT 22
64478: PUSH
64479: LD_INT 23
64481: PUSH
64482: LD_INT 25
64484: PUSH
64485: LD_INT 26
64487: PUSH
64488: LD_INT 36
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 101
64509: PUSH
64510: LD_INT 102
64512: PUSH
64513: LD_INT 105
64515: PUSH
64516: LD_INT 106
64518: PUSH
64519: LD_INT 108
64521: PUSH
64522: LD_INT 109
64524: PUSH
64525: LD_INT 112
64527: PUSH
64528: LD_INT 116
64530: PUSH
64531: LD_INT 117
64533: PUSH
64534: LD_INT 118
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: ST_TO_ADDR
64553: GO 67216
64555: LD_INT 6
64557: DOUBLE
64558: EQUAL
64559: IFTRUE 64563
64561: GO 64695
64563: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
64564: LD_ADDR_VAR 0 2
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: LD_INT 4
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: LD_INT 6
64580: PUSH
64581: LD_INT 8
64583: PUSH
64584: LD_INT 11
64586: PUSH
64587: LD_INT 12
64589: PUSH
64590: LD_INT 15
64592: PUSH
64593: LD_INT 16
64595: PUSH
64596: LD_INT 20
64598: PUSH
64599: LD_INT 21
64601: PUSH
64602: LD_INT 22
64604: PUSH
64605: LD_INT 23
64607: PUSH
64608: LD_INT 25
64610: PUSH
64611: LD_INT 26
64613: PUSH
64614: LD_INT 30
64616: PUSH
64617: LD_INT 31
64619: PUSH
64620: LD_INT 32
64622: PUSH
64623: LD_INT 36
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 101
64649: PUSH
64650: LD_INT 102
64652: PUSH
64653: LD_INT 105
64655: PUSH
64656: LD_INT 106
64658: PUSH
64659: LD_INT 108
64661: PUSH
64662: LD_INT 109
64664: PUSH
64665: LD_INT 112
64667: PUSH
64668: LD_INT 116
64670: PUSH
64671: LD_INT 117
64673: PUSH
64674: LD_INT 118
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: ST_TO_ADDR
64693: GO 67216
64695: LD_INT 7
64697: DOUBLE
64698: EQUAL
64699: IFTRUE 64703
64701: GO 64815
64703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
64704: LD_ADDR_VAR 0 2
64708: PUSH
64709: LD_INT 2
64711: PUSH
64712: LD_INT 4
64714: PUSH
64715: LD_INT 5
64717: PUSH
64718: LD_INT 7
64720: PUSH
64721: LD_INT 11
64723: PUSH
64724: LD_INT 12
64726: PUSH
64727: LD_INT 15
64729: PUSH
64730: LD_INT 16
64732: PUSH
64733: LD_INT 20
64735: PUSH
64736: LD_INT 21
64738: PUSH
64739: LD_INT 22
64741: PUSH
64742: LD_INT 23
64744: PUSH
64745: LD_INT 25
64747: PUSH
64748: LD_INT 26
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 101
64769: PUSH
64770: LD_INT 102
64772: PUSH
64773: LD_INT 103
64775: PUSH
64776: LD_INT 105
64778: PUSH
64779: LD_INT 106
64781: PUSH
64782: LD_INT 108
64784: PUSH
64785: LD_INT 112
64787: PUSH
64788: LD_INT 116
64790: PUSH
64791: LD_INT 117
64793: PUSH
64794: LD_INT 118
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: ST_TO_ADDR
64813: GO 67216
64815: LD_INT 8
64817: DOUBLE
64818: EQUAL
64819: IFTRUE 64823
64821: GO 64963
64823: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
64824: LD_ADDR_VAR 0 2
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: LD_INT 4
64834: PUSH
64835: LD_INT 5
64837: PUSH
64838: LD_INT 6
64840: PUSH
64841: LD_INT 7
64843: PUSH
64844: LD_INT 8
64846: PUSH
64847: LD_INT 11
64849: PUSH
64850: LD_INT 12
64852: PUSH
64853: LD_INT 15
64855: PUSH
64856: LD_INT 16
64858: PUSH
64859: LD_INT 20
64861: PUSH
64862: LD_INT 21
64864: PUSH
64865: LD_INT 22
64867: PUSH
64868: LD_INT 23
64870: PUSH
64871: LD_INT 25
64873: PUSH
64874: LD_INT 26
64876: PUSH
64877: LD_INT 30
64879: PUSH
64880: LD_INT 31
64882: PUSH
64883: LD_INT 32
64885: PUSH
64886: LD_INT 36
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 101
64913: PUSH
64914: LD_INT 102
64916: PUSH
64917: LD_INT 103
64919: PUSH
64920: LD_INT 105
64922: PUSH
64923: LD_INT 106
64925: PUSH
64926: LD_INT 108
64928: PUSH
64929: LD_INT 109
64931: PUSH
64932: LD_INT 112
64934: PUSH
64935: LD_INT 116
64937: PUSH
64938: LD_INT 117
64940: PUSH
64941: LD_INT 118
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: ST_TO_ADDR
64961: GO 67216
64963: LD_INT 9
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 64971
64969: GO 65119
64971: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
64972: LD_ADDR_VAR 0 2
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: LD_INT 4
64982: PUSH
64983: LD_INT 5
64985: PUSH
64986: LD_INT 6
64988: PUSH
64989: LD_INT 7
64991: PUSH
64992: LD_INT 8
64994: PUSH
64995: LD_INT 11
64997: PUSH
64998: LD_INT 12
65000: PUSH
65001: LD_INT 15
65003: PUSH
65004: LD_INT 16
65006: PUSH
65007: LD_INT 20
65009: PUSH
65010: LD_INT 21
65012: PUSH
65013: LD_INT 22
65015: PUSH
65016: LD_INT 23
65018: PUSH
65019: LD_INT 25
65021: PUSH
65022: LD_INT 26
65024: PUSH
65025: LD_INT 28
65027: PUSH
65028: LD_INT 30
65030: PUSH
65031: LD_INT 31
65033: PUSH
65034: LD_INT 32
65036: PUSH
65037: LD_INT 36
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 101
65065: PUSH
65066: LD_INT 102
65068: PUSH
65069: LD_INT 103
65071: PUSH
65072: LD_INT 105
65074: PUSH
65075: LD_INT 106
65077: PUSH
65078: LD_INT 108
65080: PUSH
65081: LD_INT 109
65083: PUSH
65084: LD_INT 112
65086: PUSH
65087: LD_INT 114
65089: PUSH
65090: LD_INT 116
65092: PUSH
65093: LD_INT 117
65095: PUSH
65096: LD_INT 118
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: ST_TO_ADDR
65117: GO 67216
65119: LD_INT 10
65121: DOUBLE
65122: EQUAL
65123: IFTRUE 65127
65125: GO 65323
65127: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
65128: LD_ADDR_VAR 0 2
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: LD_INT 4
65138: PUSH
65139: LD_INT 5
65141: PUSH
65142: LD_INT 6
65144: PUSH
65145: LD_INT 7
65147: PUSH
65148: LD_INT 8
65150: PUSH
65151: LD_INT 9
65153: PUSH
65154: LD_INT 10
65156: PUSH
65157: LD_INT 11
65159: PUSH
65160: LD_INT 12
65162: PUSH
65163: LD_INT 13
65165: PUSH
65166: LD_INT 14
65168: PUSH
65169: LD_INT 15
65171: PUSH
65172: LD_INT 16
65174: PUSH
65175: LD_INT 17
65177: PUSH
65178: LD_INT 18
65180: PUSH
65181: LD_INT 19
65183: PUSH
65184: LD_INT 20
65186: PUSH
65187: LD_INT 21
65189: PUSH
65190: LD_INT 22
65192: PUSH
65193: LD_INT 23
65195: PUSH
65196: LD_INT 24
65198: PUSH
65199: LD_INT 25
65201: PUSH
65202: LD_INT 26
65204: PUSH
65205: LD_INT 28
65207: PUSH
65208: LD_INT 30
65210: PUSH
65211: LD_INT 31
65213: PUSH
65214: LD_INT 32
65216: PUSH
65217: LD_INT 36
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 101
65253: PUSH
65254: LD_INT 102
65256: PUSH
65257: LD_INT 103
65259: PUSH
65260: LD_INT 104
65262: PUSH
65263: LD_INT 105
65265: PUSH
65266: LD_INT 106
65268: PUSH
65269: LD_INT 107
65271: PUSH
65272: LD_INT 108
65274: PUSH
65275: LD_INT 109
65277: PUSH
65278: LD_INT 110
65280: PUSH
65281: LD_INT 111
65283: PUSH
65284: LD_INT 112
65286: PUSH
65287: LD_INT 114
65289: PUSH
65290: LD_INT 116
65292: PUSH
65293: LD_INT 117
65295: PUSH
65296: LD_INT 118
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: ST_TO_ADDR
65321: GO 67216
65323: LD_INT 11
65325: DOUBLE
65326: EQUAL
65327: IFTRUE 65331
65329: GO 65535
65331: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
65332: LD_ADDR_VAR 0 2
65336: PUSH
65337: LD_INT 2
65339: PUSH
65340: LD_INT 3
65342: PUSH
65343: LD_INT 4
65345: PUSH
65346: LD_INT 5
65348: PUSH
65349: LD_INT 6
65351: PUSH
65352: LD_INT 7
65354: PUSH
65355: LD_INT 8
65357: PUSH
65358: LD_INT 9
65360: PUSH
65361: LD_INT 10
65363: PUSH
65364: LD_INT 11
65366: PUSH
65367: LD_INT 12
65369: PUSH
65370: LD_INT 13
65372: PUSH
65373: LD_INT 14
65375: PUSH
65376: LD_INT 15
65378: PUSH
65379: LD_INT 16
65381: PUSH
65382: LD_INT 17
65384: PUSH
65385: LD_INT 18
65387: PUSH
65388: LD_INT 19
65390: PUSH
65391: LD_INT 20
65393: PUSH
65394: LD_INT 21
65396: PUSH
65397: LD_INT 22
65399: PUSH
65400: LD_INT 23
65402: PUSH
65403: LD_INT 24
65405: PUSH
65406: LD_INT 25
65408: PUSH
65409: LD_INT 26
65411: PUSH
65412: LD_INT 28
65414: PUSH
65415: LD_INT 30
65417: PUSH
65418: LD_INT 31
65420: PUSH
65421: LD_INT 32
65423: PUSH
65424: LD_INT 34
65426: PUSH
65427: LD_INT 36
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 101
65465: PUSH
65466: LD_INT 102
65468: PUSH
65469: LD_INT 103
65471: PUSH
65472: LD_INT 104
65474: PUSH
65475: LD_INT 105
65477: PUSH
65478: LD_INT 106
65480: PUSH
65481: LD_INT 107
65483: PUSH
65484: LD_INT 108
65486: PUSH
65487: LD_INT 109
65489: PUSH
65490: LD_INT 110
65492: PUSH
65493: LD_INT 111
65495: PUSH
65496: LD_INT 112
65498: PUSH
65499: LD_INT 114
65501: PUSH
65502: LD_INT 116
65504: PUSH
65505: LD_INT 117
65507: PUSH
65508: LD_INT 118
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: ST_TO_ADDR
65533: GO 67216
65535: LD_INT 12
65537: DOUBLE
65538: EQUAL
65539: IFTRUE 65543
65541: GO 65763
65543: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
65544: LD_ADDR_VAR 0 2
65548: PUSH
65549: LD_INT 1
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: LD_INT 4
65560: PUSH
65561: LD_INT 5
65563: PUSH
65564: LD_INT 6
65566: PUSH
65567: LD_INT 7
65569: PUSH
65570: LD_INT 8
65572: PUSH
65573: LD_INT 9
65575: PUSH
65576: LD_INT 10
65578: PUSH
65579: LD_INT 11
65581: PUSH
65582: LD_INT 12
65584: PUSH
65585: LD_INT 13
65587: PUSH
65588: LD_INT 14
65590: PUSH
65591: LD_INT 15
65593: PUSH
65594: LD_INT 16
65596: PUSH
65597: LD_INT 17
65599: PUSH
65600: LD_INT 18
65602: PUSH
65603: LD_INT 19
65605: PUSH
65606: LD_INT 20
65608: PUSH
65609: LD_INT 21
65611: PUSH
65612: LD_INT 22
65614: PUSH
65615: LD_INT 23
65617: PUSH
65618: LD_INT 24
65620: PUSH
65621: LD_INT 25
65623: PUSH
65624: LD_INT 26
65626: PUSH
65627: LD_INT 27
65629: PUSH
65630: LD_INT 28
65632: PUSH
65633: LD_INT 30
65635: PUSH
65636: LD_INT 31
65638: PUSH
65639: LD_INT 32
65641: PUSH
65642: LD_INT 33
65644: PUSH
65645: LD_INT 34
65647: PUSH
65648: LD_INT 36
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 101
65689: PUSH
65690: LD_INT 102
65692: PUSH
65693: LD_INT 103
65695: PUSH
65696: LD_INT 104
65698: PUSH
65699: LD_INT 105
65701: PUSH
65702: LD_INT 106
65704: PUSH
65705: LD_INT 107
65707: PUSH
65708: LD_INT 108
65710: PUSH
65711: LD_INT 109
65713: PUSH
65714: LD_INT 110
65716: PUSH
65717: LD_INT 111
65719: PUSH
65720: LD_INT 112
65722: PUSH
65723: LD_INT 113
65725: PUSH
65726: LD_INT 114
65728: PUSH
65729: LD_INT 116
65731: PUSH
65732: LD_INT 117
65734: PUSH
65735: LD_INT 118
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: ST_TO_ADDR
65761: GO 67216
65763: LD_INT 13
65765: DOUBLE
65766: EQUAL
65767: IFTRUE 65771
65769: GO 65979
65771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
65772: LD_ADDR_VAR 0 2
65776: PUSH
65777: LD_INT 1
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: LD_INT 3
65785: PUSH
65786: LD_INT 4
65788: PUSH
65789: LD_INT 5
65791: PUSH
65792: LD_INT 8
65794: PUSH
65795: LD_INT 9
65797: PUSH
65798: LD_INT 10
65800: PUSH
65801: LD_INT 11
65803: PUSH
65804: LD_INT 12
65806: PUSH
65807: LD_INT 14
65809: PUSH
65810: LD_INT 15
65812: PUSH
65813: LD_INT 16
65815: PUSH
65816: LD_INT 17
65818: PUSH
65819: LD_INT 18
65821: PUSH
65822: LD_INT 19
65824: PUSH
65825: LD_INT 20
65827: PUSH
65828: LD_INT 21
65830: PUSH
65831: LD_INT 22
65833: PUSH
65834: LD_INT 23
65836: PUSH
65837: LD_INT 24
65839: PUSH
65840: LD_INT 25
65842: PUSH
65843: LD_INT 26
65845: PUSH
65846: LD_INT 27
65848: PUSH
65849: LD_INT 28
65851: PUSH
65852: LD_INT 30
65854: PUSH
65855: LD_INT 31
65857: PUSH
65858: LD_INT 32
65860: PUSH
65861: LD_INT 33
65863: PUSH
65864: LD_INT 34
65866: PUSH
65867: LD_INT 36
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 101
65905: PUSH
65906: LD_INT 102
65908: PUSH
65909: LD_INT 103
65911: PUSH
65912: LD_INT 104
65914: PUSH
65915: LD_INT 105
65917: PUSH
65918: LD_INT 106
65920: PUSH
65921: LD_INT 107
65923: PUSH
65924: LD_INT 108
65926: PUSH
65927: LD_INT 109
65929: PUSH
65930: LD_INT 110
65932: PUSH
65933: LD_INT 111
65935: PUSH
65936: LD_INT 112
65938: PUSH
65939: LD_INT 113
65941: PUSH
65942: LD_INT 114
65944: PUSH
65945: LD_INT 116
65947: PUSH
65948: LD_INT 117
65950: PUSH
65951: LD_INT 118
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: ST_TO_ADDR
65977: GO 67216
65979: LD_INT 14
65981: DOUBLE
65982: EQUAL
65983: IFTRUE 65987
65985: GO 66211
65987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
65988: LD_ADDR_VAR 0 2
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 2
65998: PUSH
65999: LD_INT 3
66001: PUSH
66002: LD_INT 4
66004: PUSH
66005: LD_INT 5
66007: PUSH
66008: LD_INT 6
66010: PUSH
66011: LD_INT 7
66013: PUSH
66014: LD_INT 8
66016: PUSH
66017: LD_INT 9
66019: PUSH
66020: LD_INT 10
66022: PUSH
66023: LD_INT 11
66025: PUSH
66026: LD_INT 12
66028: PUSH
66029: LD_INT 13
66031: PUSH
66032: LD_INT 14
66034: PUSH
66035: LD_INT 15
66037: PUSH
66038: LD_INT 16
66040: PUSH
66041: LD_INT 17
66043: PUSH
66044: LD_INT 18
66046: PUSH
66047: LD_INT 19
66049: PUSH
66050: LD_INT 20
66052: PUSH
66053: LD_INT 21
66055: PUSH
66056: LD_INT 22
66058: PUSH
66059: LD_INT 23
66061: PUSH
66062: LD_INT 24
66064: PUSH
66065: LD_INT 25
66067: PUSH
66068: LD_INT 26
66070: PUSH
66071: LD_INT 27
66073: PUSH
66074: LD_INT 28
66076: PUSH
66077: LD_INT 29
66079: PUSH
66080: LD_INT 30
66082: PUSH
66083: LD_INT 31
66085: PUSH
66086: LD_INT 32
66088: PUSH
66089: LD_INT 33
66091: PUSH
66092: LD_INT 34
66094: PUSH
66095: LD_INT 36
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 101
66137: PUSH
66138: LD_INT 102
66140: PUSH
66141: LD_INT 103
66143: PUSH
66144: LD_INT 104
66146: PUSH
66147: LD_INT 105
66149: PUSH
66150: LD_INT 106
66152: PUSH
66153: LD_INT 107
66155: PUSH
66156: LD_INT 108
66158: PUSH
66159: LD_INT 109
66161: PUSH
66162: LD_INT 110
66164: PUSH
66165: LD_INT 111
66167: PUSH
66168: LD_INT 112
66170: PUSH
66171: LD_INT 113
66173: PUSH
66174: LD_INT 114
66176: PUSH
66177: LD_INT 116
66179: PUSH
66180: LD_INT 117
66182: PUSH
66183: LD_INT 118
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: ST_TO_ADDR
66209: GO 67216
66211: LD_INT 15
66213: DOUBLE
66214: EQUAL
66215: IFTRUE 66219
66217: GO 66443
66219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
66220: LD_ADDR_VAR 0 2
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 2
66230: PUSH
66231: LD_INT 3
66233: PUSH
66234: LD_INT 4
66236: PUSH
66237: LD_INT 5
66239: PUSH
66240: LD_INT 6
66242: PUSH
66243: LD_INT 7
66245: PUSH
66246: LD_INT 8
66248: PUSH
66249: LD_INT 9
66251: PUSH
66252: LD_INT 10
66254: PUSH
66255: LD_INT 11
66257: PUSH
66258: LD_INT 12
66260: PUSH
66261: LD_INT 13
66263: PUSH
66264: LD_INT 14
66266: PUSH
66267: LD_INT 15
66269: PUSH
66270: LD_INT 16
66272: PUSH
66273: LD_INT 17
66275: PUSH
66276: LD_INT 18
66278: PUSH
66279: LD_INT 19
66281: PUSH
66282: LD_INT 20
66284: PUSH
66285: LD_INT 21
66287: PUSH
66288: LD_INT 22
66290: PUSH
66291: LD_INT 23
66293: PUSH
66294: LD_INT 24
66296: PUSH
66297: LD_INT 25
66299: PUSH
66300: LD_INT 26
66302: PUSH
66303: LD_INT 27
66305: PUSH
66306: LD_INT 28
66308: PUSH
66309: LD_INT 29
66311: PUSH
66312: LD_INT 30
66314: PUSH
66315: LD_INT 31
66317: PUSH
66318: LD_INT 32
66320: PUSH
66321: LD_INT 33
66323: PUSH
66324: LD_INT 34
66326: PUSH
66327: LD_INT 36
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 101
66369: PUSH
66370: LD_INT 102
66372: PUSH
66373: LD_INT 103
66375: PUSH
66376: LD_INT 104
66378: PUSH
66379: LD_INT 105
66381: PUSH
66382: LD_INT 106
66384: PUSH
66385: LD_INT 107
66387: PUSH
66388: LD_INT 108
66390: PUSH
66391: LD_INT 109
66393: PUSH
66394: LD_INT 110
66396: PUSH
66397: LD_INT 111
66399: PUSH
66400: LD_INT 112
66402: PUSH
66403: LD_INT 113
66405: PUSH
66406: LD_INT 114
66408: PUSH
66409: LD_INT 116
66411: PUSH
66412: LD_INT 117
66414: PUSH
66415: LD_INT 118
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: ST_TO_ADDR
66441: GO 67216
66443: LD_INT 16
66445: DOUBLE
66446: EQUAL
66447: IFTRUE 66451
66449: GO 66587
66451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
66452: LD_ADDR_VAR 0 2
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: LD_INT 4
66462: PUSH
66463: LD_INT 5
66465: PUSH
66466: LD_INT 7
66468: PUSH
66469: LD_INT 11
66471: PUSH
66472: LD_INT 12
66474: PUSH
66475: LD_INT 15
66477: PUSH
66478: LD_INT 16
66480: PUSH
66481: LD_INT 20
66483: PUSH
66484: LD_INT 21
66486: PUSH
66487: LD_INT 22
66489: PUSH
66490: LD_INT 23
66492: PUSH
66493: LD_INT 25
66495: PUSH
66496: LD_INT 26
66498: PUSH
66499: LD_INT 30
66501: PUSH
66502: LD_INT 31
66504: PUSH
66505: LD_INT 32
66507: PUSH
66508: LD_INT 33
66510: PUSH
66511: LD_INT 34
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 101
66537: PUSH
66538: LD_INT 102
66540: PUSH
66541: LD_INT 103
66543: PUSH
66544: LD_INT 106
66546: PUSH
66547: LD_INT 108
66549: PUSH
66550: LD_INT 112
66552: PUSH
66553: LD_INT 113
66555: PUSH
66556: LD_INT 114
66558: PUSH
66559: LD_INT 116
66561: PUSH
66562: LD_INT 117
66564: PUSH
66565: LD_INT 118
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: ST_TO_ADDR
66585: GO 67216
66587: LD_INT 17
66589: DOUBLE
66590: EQUAL
66591: IFTRUE 66595
66593: GO 66819
66595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
66596: LD_ADDR_VAR 0 2
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: LD_INT 2
66606: PUSH
66607: LD_INT 3
66609: PUSH
66610: LD_INT 4
66612: PUSH
66613: LD_INT 5
66615: PUSH
66616: LD_INT 6
66618: PUSH
66619: LD_INT 7
66621: PUSH
66622: LD_INT 8
66624: PUSH
66625: LD_INT 9
66627: PUSH
66628: LD_INT 10
66630: PUSH
66631: LD_INT 11
66633: PUSH
66634: LD_INT 12
66636: PUSH
66637: LD_INT 13
66639: PUSH
66640: LD_INT 14
66642: PUSH
66643: LD_INT 15
66645: PUSH
66646: LD_INT 16
66648: PUSH
66649: LD_INT 17
66651: PUSH
66652: LD_INT 18
66654: PUSH
66655: LD_INT 19
66657: PUSH
66658: LD_INT 20
66660: PUSH
66661: LD_INT 21
66663: PUSH
66664: LD_INT 22
66666: PUSH
66667: LD_INT 23
66669: PUSH
66670: LD_INT 24
66672: PUSH
66673: LD_INT 25
66675: PUSH
66676: LD_INT 26
66678: PUSH
66679: LD_INT 27
66681: PUSH
66682: LD_INT 28
66684: PUSH
66685: LD_INT 29
66687: PUSH
66688: LD_INT 30
66690: PUSH
66691: LD_INT 31
66693: PUSH
66694: LD_INT 32
66696: PUSH
66697: LD_INT 33
66699: PUSH
66700: LD_INT 34
66702: PUSH
66703: LD_INT 36
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 101
66745: PUSH
66746: LD_INT 102
66748: PUSH
66749: LD_INT 103
66751: PUSH
66752: LD_INT 104
66754: PUSH
66755: LD_INT 105
66757: PUSH
66758: LD_INT 106
66760: PUSH
66761: LD_INT 107
66763: PUSH
66764: LD_INT 108
66766: PUSH
66767: LD_INT 109
66769: PUSH
66770: LD_INT 110
66772: PUSH
66773: LD_INT 111
66775: PUSH
66776: LD_INT 112
66778: PUSH
66779: LD_INT 113
66781: PUSH
66782: LD_INT 114
66784: PUSH
66785: LD_INT 116
66787: PUSH
66788: LD_INT 117
66790: PUSH
66791: LD_INT 118
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: ST_TO_ADDR
66817: GO 67216
66819: LD_INT 18
66821: DOUBLE
66822: EQUAL
66823: IFTRUE 66827
66825: GO 66975
66827: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
66828: LD_ADDR_VAR 0 2
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: LD_INT 4
66838: PUSH
66839: LD_INT 5
66841: PUSH
66842: LD_INT 7
66844: PUSH
66845: LD_INT 11
66847: PUSH
66848: LD_INT 12
66850: PUSH
66851: LD_INT 15
66853: PUSH
66854: LD_INT 16
66856: PUSH
66857: LD_INT 20
66859: PUSH
66860: LD_INT 21
66862: PUSH
66863: LD_INT 22
66865: PUSH
66866: LD_INT 23
66868: PUSH
66869: LD_INT 25
66871: PUSH
66872: LD_INT 26
66874: PUSH
66875: LD_INT 30
66877: PUSH
66878: LD_INT 31
66880: PUSH
66881: LD_INT 32
66883: PUSH
66884: LD_INT 33
66886: PUSH
66887: LD_INT 34
66889: PUSH
66890: LD_INT 35
66892: PUSH
66893: LD_INT 36
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 101
66921: PUSH
66922: LD_INT 102
66924: PUSH
66925: LD_INT 103
66927: PUSH
66928: LD_INT 106
66930: PUSH
66931: LD_INT 108
66933: PUSH
66934: LD_INT 112
66936: PUSH
66937: LD_INT 113
66939: PUSH
66940: LD_INT 114
66942: PUSH
66943: LD_INT 115
66945: PUSH
66946: LD_INT 116
66948: PUSH
66949: LD_INT 117
66951: PUSH
66952: LD_INT 118
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: ST_TO_ADDR
66973: GO 67216
66975: LD_INT 19
66977: DOUBLE
66978: EQUAL
66979: IFTRUE 66983
66981: GO 67215
66983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
66984: LD_ADDR_VAR 0 2
66988: PUSH
66989: LD_INT 1
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: LD_INT 4
67000: PUSH
67001: LD_INT 5
67003: PUSH
67004: LD_INT 6
67006: PUSH
67007: LD_INT 7
67009: PUSH
67010: LD_INT 8
67012: PUSH
67013: LD_INT 9
67015: PUSH
67016: LD_INT 10
67018: PUSH
67019: LD_INT 11
67021: PUSH
67022: LD_INT 12
67024: PUSH
67025: LD_INT 13
67027: PUSH
67028: LD_INT 14
67030: PUSH
67031: LD_INT 15
67033: PUSH
67034: LD_INT 16
67036: PUSH
67037: LD_INT 17
67039: PUSH
67040: LD_INT 18
67042: PUSH
67043: LD_INT 19
67045: PUSH
67046: LD_INT 20
67048: PUSH
67049: LD_INT 21
67051: PUSH
67052: LD_INT 22
67054: PUSH
67055: LD_INT 23
67057: PUSH
67058: LD_INT 24
67060: PUSH
67061: LD_INT 25
67063: PUSH
67064: LD_INT 26
67066: PUSH
67067: LD_INT 27
67069: PUSH
67070: LD_INT 28
67072: PUSH
67073: LD_INT 29
67075: PUSH
67076: LD_INT 30
67078: PUSH
67079: LD_INT 31
67081: PUSH
67082: LD_INT 32
67084: PUSH
67085: LD_INT 33
67087: PUSH
67088: LD_INT 34
67090: PUSH
67091: LD_INT 35
67093: PUSH
67094: LD_INT 36
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 101
67137: PUSH
67138: LD_INT 102
67140: PUSH
67141: LD_INT 103
67143: PUSH
67144: LD_INT 104
67146: PUSH
67147: LD_INT 105
67149: PUSH
67150: LD_INT 106
67152: PUSH
67153: LD_INT 107
67155: PUSH
67156: LD_INT 108
67158: PUSH
67159: LD_INT 109
67161: PUSH
67162: LD_INT 110
67164: PUSH
67165: LD_INT 111
67167: PUSH
67168: LD_INT 112
67170: PUSH
67171: LD_INT 113
67173: PUSH
67174: LD_INT 114
67176: PUSH
67177: LD_INT 115
67179: PUSH
67180: LD_INT 116
67182: PUSH
67183: LD_INT 117
67185: PUSH
67186: LD_INT 118
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: ST_TO_ADDR
67213: GO 67216
67215: POP
// end else
67216: GO 67447
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
67218: LD_ADDR_VAR 0 2
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: LD_INT 2
67228: PUSH
67229: LD_INT 3
67231: PUSH
67232: LD_INT 4
67234: PUSH
67235: LD_INT 5
67237: PUSH
67238: LD_INT 6
67240: PUSH
67241: LD_INT 7
67243: PUSH
67244: LD_INT 8
67246: PUSH
67247: LD_INT 9
67249: PUSH
67250: LD_INT 10
67252: PUSH
67253: LD_INT 11
67255: PUSH
67256: LD_INT 12
67258: PUSH
67259: LD_INT 13
67261: PUSH
67262: LD_INT 14
67264: PUSH
67265: LD_INT 15
67267: PUSH
67268: LD_INT 16
67270: PUSH
67271: LD_INT 17
67273: PUSH
67274: LD_INT 18
67276: PUSH
67277: LD_INT 19
67279: PUSH
67280: LD_INT 20
67282: PUSH
67283: LD_INT 21
67285: PUSH
67286: LD_INT 22
67288: PUSH
67289: LD_INT 23
67291: PUSH
67292: LD_INT 24
67294: PUSH
67295: LD_INT 25
67297: PUSH
67298: LD_INT 26
67300: PUSH
67301: LD_INT 27
67303: PUSH
67304: LD_INT 28
67306: PUSH
67307: LD_INT 29
67309: PUSH
67310: LD_INT 30
67312: PUSH
67313: LD_INT 31
67315: PUSH
67316: LD_INT 32
67318: PUSH
67319: LD_INT 33
67321: PUSH
67322: LD_INT 34
67324: PUSH
67325: LD_INT 35
67327: PUSH
67328: LD_INT 36
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 101
67371: PUSH
67372: LD_INT 102
67374: PUSH
67375: LD_INT 103
67377: PUSH
67378: LD_INT 104
67380: PUSH
67381: LD_INT 105
67383: PUSH
67384: LD_INT 106
67386: PUSH
67387: LD_INT 107
67389: PUSH
67390: LD_INT 108
67392: PUSH
67393: LD_INT 109
67395: PUSH
67396: LD_INT 110
67398: PUSH
67399: LD_INT 111
67401: PUSH
67402: LD_INT 112
67404: PUSH
67405: LD_INT 113
67407: PUSH
67408: LD_INT 114
67410: PUSH
67411: LD_INT 115
67413: PUSH
67414: LD_INT 116
67416: PUSH
67417: LD_INT 117
67419: PUSH
67420: LD_INT 118
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: ST_TO_ADDR
// if result then
67447: LD_VAR 0 2
67451: IFFALSE 68237
// begin normal :=  ;
67453: LD_ADDR_VAR 0 5
67457: PUSH
67458: LD_STRING 
67460: ST_TO_ADDR
// hardcore :=  ;
67461: LD_ADDR_VAR 0 6
67465: PUSH
67466: LD_STRING 
67468: ST_TO_ADDR
// active :=  ;
67469: LD_ADDR_VAR 0 7
67473: PUSH
67474: LD_STRING 
67476: ST_TO_ADDR
// for i = 1 to normalCounter do
67477: LD_ADDR_VAR 0 8
67481: PUSH
67482: DOUBLE
67483: LD_INT 1
67485: DEC
67486: ST_TO_ADDR
67487: LD_EXP 47
67491: PUSH
67492: FOR_TO
67493: IFFALSE 67594
// begin tmp := 0 ;
67495: LD_ADDR_VAR 0 3
67499: PUSH
67500: LD_STRING 0
67502: ST_TO_ADDR
// if result [ 1 ] then
67503: LD_VAR 0 2
67507: PUSH
67508: LD_INT 1
67510: ARRAY
67511: IFFALSE 67576
// if result [ 1 ] [ 1 ] = i then
67513: LD_VAR 0 2
67517: PUSH
67518: LD_INT 1
67520: ARRAY
67521: PUSH
67522: LD_INT 1
67524: ARRAY
67525: PUSH
67526: LD_VAR 0 8
67530: EQUAL
67531: IFFALSE 67576
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
67533: LD_ADDR_VAR 0 2
67537: PUSH
67538: LD_VAR 0 2
67542: PPUSH
67543: LD_INT 1
67545: PPUSH
67546: LD_VAR 0 2
67550: PUSH
67551: LD_INT 1
67553: ARRAY
67554: PPUSH
67555: LD_INT 1
67557: PPUSH
67558: CALL_OW 3
67562: PPUSH
67563: CALL_OW 1
67567: ST_TO_ADDR
// tmp := 1 ;
67568: LD_ADDR_VAR 0 3
67572: PUSH
67573: LD_STRING 1
67575: ST_TO_ADDR
// end ; normal := normal & tmp ;
67576: LD_ADDR_VAR 0 5
67580: PUSH
67581: LD_VAR 0 5
67585: PUSH
67586: LD_VAR 0 3
67590: STR
67591: ST_TO_ADDR
// end ;
67592: GO 67492
67594: POP
67595: POP
// for i = 1 to hardcoreCounter do
67596: LD_ADDR_VAR 0 8
67600: PUSH
67601: DOUBLE
67602: LD_INT 1
67604: DEC
67605: ST_TO_ADDR
67606: LD_EXP 48
67610: PUSH
67611: FOR_TO
67612: IFFALSE 67717
// begin tmp := 0 ;
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_STRING 0
67621: ST_TO_ADDR
// if result [ 2 ] then
67622: LD_VAR 0 2
67626: PUSH
67627: LD_INT 2
67629: ARRAY
67630: IFFALSE 67699
// if result [ 2 ] [ 1 ] = 100 + i then
67632: LD_VAR 0 2
67636: PUSH
67637: LD_INT 2
67639: ARRAY
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: PUSH
67645: LD_INT 100
67647: PUSH
67648: LD_VAR 0 8
67652: PLUS
67653: EQUAL
67654: IFFALSE 67699
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67656: LD_ADDR_VAR 0 2
67660: PUSH
67661: LD_VAR 0 2
67665: PPUSH
67666: LD_INT 2
67668: PPUSH
67669: LD_VAR 0 2
67673: PUSH
67674: LD_INT 2
67676: ARRAY
67677: PPUSH
67678: LD_INT 1
67680: PPUSH
67681: CALL_OW 3
67685: PPUSH
67686: CALL_OW 1
67690: ST_TO_ADDR
// tmp := 1 ;
67691: LD_ADDR_VAR 0 3
67695: PUSH
67696: LD_STRING 1
67698: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67699: LD_ADDR_VAR 0 6
67703: PUSH
67704: LD_VAR 0 6
67708: PUSH
67709: LD_VAR 0 3
67713: STR
67714: ST_TO_ADDR
// end ;
67715: GO 67611
67717: POP
67718: POP
// if isGameLoad then
67719: LD_VAR 0 1
67723: IFFALSE 68198
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
67725: LD_ADDR_VAR 0 4
67729: PUSH
67730: LD_EXP 51
67734: PUSH
67735: LD_EXP 50
67739: PUSH
67740: LD_EXP 52
67744: PUSH
67745: LD_EXP 49
67749: PUSH
67750: LD_EXP 53
67754: PUSH
67755: LD_EXP 54
67759: PUSH
67760: LD_EXP 55
67764: PUSH
67765: LD_EXP 56
67769: PUSH
67770: LD_EXP 57
67774: PUSH
67775: LD_EXP 58
67779: PUSH
67780: LD_EXP 59
67784: PUSH
67785: LD_EXP 60
67789: PUSH
67790: LD_EXP 61
67794: PUSH
67795: LD_EXP 62
67799: PUSH
67800: LD_EXP 70
67804: PUSH
67805: LD_EXP 71
67809: PUSH
67810: LD_EXP 72
67814: PUSH
67815: LD_EXP 73
67819: PUSH
67820: LD_EXP 75
67824: PUSH
67825: LD_EXP 76
67829: PUSH
67830: LD_EXP 77
67834: PUSH
67835: LD_EXP 80
67839: PUSH
67840: LD_EXP 82
67844: PUSH
67845: LD_EXP 83
67849: PUSH
67850: LD_EXP 84
67854: PUSH
67855: LD_EXP 86
67859: PUSH
67860: LD_EXP 87
67864: PUSH
67865: LD_EXP 90
67869: PUSH
67870: LD_EXP 91
67874: PUSH
67875: LD_EXP 92
67879: PUSH
67880: LD_EXP 93
67884: PUSH
67885: LD_EXP 94
67889: PUSH
67890: LD_EXP 95
67894: PUSH
67895: LD_EXP 96
67899: PUSH
67900: LD_EXP 97
67904: PUSH
67905: LD_EXP 98
67909: PUSH
67910: LD_EXP 63
67914: PUSH
67915: LD_EXP 64
67919: PUSH
67920: LD_EXP 67
67924: PUSH
67925: LD_EXP 68
67929: PUSH
67930: LD_EXP 69
67934: PUSH
67935: LD_EXP 65
67939: PUSH
67940: LD_EXP 66
67944: PUSH
67945: LD_EXP 74
67949: PUSH
67950: LD_EXP 78
67954: PUSH
67955: LD_EXP 79
67959: PUSH
67960: LD_EXP 81
67964: PUSH
67965: LD_EXP 85
67969: PUSH
67970: LD_EXP 88
67974: PUSH
67975: LD_EXP 89
67979: PUSH
67980: LD_EXP 99
67984: PUSH
67985: LD_EXP 100
67989: PUSH
67990: LD_EXP 101
67994: PUSH
67995: LD_EXP 102
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: ST_TO_ADDR
// tmp :=  ;
68056: LD_ADDR_VAR 0 3
68060: PUSH
68061: LD_STRING 
68063: ST_TO_ADDR
// for i = 1 to normalCounter do
68064: LD_ADDR_VAR 0 8
68068: PUSH
68069: DOUBLE
68070: LD_INT 1
68072: DEC
68073: ST_TO_ADDR
68074: LD_EXP 47
68078: PUSH
68079: FOR_TO
68080: IFFALSE 68116
// begin if flags [ i ] then
68082: LD_VAR 0 4
68086: PUSH
68087: LD_VAR 0 8
68091: ARRAY
68092: IFFALSE 68114
// tmp := tmp & i & ; ;
68094: LD_ADDR_VAR 0 3
68098: PUSH
68099: LD_VAR 0 3
68103: PUSH
68104: LD_VAR 0 8
68108: STR
68109: PUSH
68110: LD_STRING ;
68112: STR
68113: ST_TO_ADDR
// end ;
68114: GO 68079
68116: POP
68117: POP
// for i = 1 to hardcoreCounter do
68118: LD_ADDR_VAR 0 8
68122: PUSH
68123: DOUBLE
68124: LD_INT 1
68126: DEC
68127: ST_TO_ADDR
68128: LD_EXP 48
68132: PUSH
68133: FOR_TO
68134: IFFALSE 68180
// begin if flags [ normalCounter + i ] then
68136: LD_VAR 0 4
68140: PUSH
68141: LD_EXP 47
68145: PUSH
68146: LD_VAR 0 8
68150: PLUS
68151: ARRAY
68152: IFFALSE 68178
// tmp := tmp & ( 100 + i ) & ; ;
68154: LD_ADDR_VAR 0 3
68158: PUSH
68159: LD_VAR 0 3
68163: PUSH
68164: LD_INT 100
68166: PUSH
68167: LD_VAR 0 8
68171: PLUS
68172: STR
68173: PUSH
68174: LD_STRING ;
68176: STR
68177: ST_TO_ADDR
// end ;
68178: GO 68133
68180: POP
68181: POP
// if tmp then
68182: LD_VAR 0 3
68186: IFFALSE 68198
// active := tmp ;
68188: LD_ADDR_VAR 0 7
68192: PUSH
68193: LD_VAR 0 3
68197: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
68198: LD_STRING getStreamItemsFromMission("
68200: PUSH
68201: LD_VAR 0 5
68205: STR
68206: PUSH
68207: LD_STRING ","
68209: STR
68210: PUSH
68211: LD_VAR 0 6
68215: STR
68216: PUSH
68217: LD_STRING ","
68219: STR
68220: PUSH
68221: LD_VAR 0 7
68225: STR
68226: PUSH
68227: LD_STRING ")
68229: STR
68230: PPUSH
68231: CALL_OW 559
// end else
68235: GO 68244
// ToLua ( getStreamItemsFromMission("","","") ) ;
68237: LD_STRING getStreamItemsFromMission("","","")
68239: PPUSH
68240: CALL_OW 559
// end ;
68244: LD_VAR 0 2
68248: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68249: LD_EXP 46
68253: PUSH
68254: LD_EXP 51
68258: AND
68259: IFFALSE 68383
68261: GO 68263
68263: DISABLE
68264: LD_INT 0
68266: PPUSH
68267: PPUSH
// begin enable ;
68268: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68269: LD_ADDR_VAR 0 2
68273: PUSH
68274: LD_INT 22
68276: PUSH
68277: LD_OWVAR 2
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 2
68288: PUSH
68289: LD_INT 34
68291: PUSH
68292: LD_INT 7
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 34
68301: PUSH
68302: LD_INT 45
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 34
68311: PUSH
68312: LD_INT 28
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 34
68321: PUSH
68322: LD_INT 47
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PPUSH
68340: CALL_OW 69
68344: ST_TO_ADDR
// if not tmp then
68345: LD_VAR 0 2
68349: NOT
68350: IFFALSE 68354
// exit ;
68352: GO 68383
// for i in tmp do
68354: LD_ADDR_VAR 0 1
68358: PUSH
68359: LD_VAR 0 2
68363: PUSH
68364: FOR_IN
68365: IFFALSE 68381
// begin SetLives ( i , 0 ) ;
68367: LD_VAR 0 1
68371: PPUSH
68372: LD_INT 0
68374: PPUSH
68375: CALL_OW 234
// end ;
68379: GO 68364
68381: POP
68382: POP
// end ;
68383: PPOPN 2
68385: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68386: LD_EXP 46
68390: PUSH
68391: LD_EXP 52
68395: AND
68396: IFFALSE 68480
68398: GO 68400
68400: DISABLE
68401: LD_INT 0
68403: PPUSH
68404: PPUSH
// begin enable ;
68405: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68406: LD_ADDR_VAR 0 2
68410: PUSH
68411: LD_INT 22
68413: PUSH
68414: LD_OWVAR 2
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 32
68425: PUSH
68426: LD_INT 3
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PPUSH
68437: CALL_OW 69
68441: ST_TO_ADDR
// if not tmp then
68442: LD_VAR 0 2
68446: NOT
68447: IFFALSE 68451
// exit ;
68449: GO 68480
// for i in tmp do
68451: LD_ADDR_VAR 0 1
68455: PUSH
68456: LD_VAR 0 2
68460: PUSH
68461: FOR_IN
68462: IFFALSE 68478
// begin SetLives ( i , 0 ) ;
68464: LD_VAR 0 1
68468: PPUSH
68469: LD_INT 0
68471: PPUSH
68472: CALL_OW 234
// end ;
68476: GO 68461
68478: POP
68479: POP
// end ;
68480: PPOPN 2
68482: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68483: LD_EXP 46
68487: PUSH
68488: LD_EXP 49
68492: AND
68493: IFFALSE 68586
68495: GO 68497
68497: DISABLE
68498: LD_INT 0
68500: PPUSH
// begin enable ;
68501: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68502: LD_ADDR_VAR 0 1
68506: PUSH
68507: LD_INT 22
68509: PUSH
68510: LD_OWVAR 2
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 2
68521: PUSH
68522: LD_INT 25
68524: PUSH
68525: LD_INT 5
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 25
68534: PUSH
68535: LD_INT 9
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: LD_INT 25
68544: PUSH
68545: LD_INT 8
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PPUSH
68562: CALL_OW 69
68566: PUSH
68567: FOR_IN
68568: IFFALSE 68584
// begin SetClass ( i , 1 ) ;
68570: LD_VAR 0 1
68574: PPUSH
68575: LD_INT 1
68577: PPUSH
68578: CALL_OW 336
// end ;
68582: GO 68567
68584: POP
68585: POP
// end ;
68586: PPOPN 1
68588: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68589: LD_EXP 46
68593: PUSH
68594: LD_EXP 50
68598: AND
68599: PUSH
68600: LD_OWVAR 65
68604: PUSH
68605: LD_INT 7
68607: LESS
68608: AND
68609: IFFALSE 68623
68611: GO 68613
68613: DISABLE
// begin enable ;
68614: ENABLE
// game_speed := 7 ;
68615: LD_ADDR_OWVAR 65
68619: PUSH
68620: LD_INT 7
68622: ST_TO_ADDR
// end ;
68623: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68624: LD_EXP 46
68628: PUSH
68629: LD_EXP 53
68633: AND
68634: IFFALSE 68836
68636: GO 68638
68638: DISABLE
68639: LD_INT 0
68641: PPUSH
68642: PPUSH
68643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68644: LD_ADDR_VAR 0 3
68648: PUSH
68649: LD_INT 81
68651: PUSH
68652: LD_OWVAR 2
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 21
68663: PUSH
68664: LD_INT 1
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PPUSH
68675: CALL_OW 69
68679: ST_TO_ADDR
// if not tmp then
68680: LD_VAR 0 3
68684: NOT
68685: IFFALSE 68689
// exit ;
68687: GO 68836
// if tmp > 5 then
68689: LD_VAR 0 3
68693: PUSH
68694: LD_INT 5
68696: GREATER
68697: IFFALSE 68709
// k := 5 else
68699: LD_ADDR_VAR 0 2
68703: PUSH
68704: LD_INT 5
68706: ST_TO_ADDR
68707: GO 68719
// k := tmp ;
68709: LD_ADDR_VAR 0 2
68713: PUSH
68714: LD_VAR 0 3
68718: ST_TO_ADDR
// for i := 1 to k do
68719: LD_ADDR_VAR 0 1
68723: PUSH
68724: DOUBLE
68725: LD_INT 1
68727: DEC
68728: ST_TO_ADDR
68729: LD_VAR 0 2
68733: PUSH
68734: FOR_TO
68735: IFFALSE 68834
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68737: LD_VAR 0 3
68741: PUSH
68742: LD_VAR 0 1
68746: ARRAY
68747: PPUSH
68748: LD_VAR 0 1
68752: PUSH
68753: LD_INT 4
68755: MOD
68756: PUSH
68757: LD_INT 1
68759: PLUS
68760: PPUSH
68761: CALL_OW 259
68765: PUSH
68766: LD_INT 10
68768: LESS
68769: IFFALSE 68832
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68771: LD_VAR 0 3
68775: PUSH
68776: LD_VAR 0 1
68780: ARRAY
68781: PPUSH
68782: LD_VAR 0 1
68786: PUSH
68787: LD_INT 4
68789: MOD
68790: PUSH
68791: LD_INT 1
68793: PLUS
68794: PPUSH
68795: LD_VAR 0 3
68799: PUSH
68800: LD_VAR 0 1
68804: ARRAY
68805: PPUSH
68806: LD_VAR 0 1
68810: PUSH
68811: LD_INT 4
68813: MOD
68814: PUSH
68815: LD_INT 1
68817: PLUS
68818: PPUSH
68819: CALL_OW 259
68823: PUSH
68824: LD_INT 1
68826: PLUS
68827: PPUSH
68828: CALL_OW 237
68832: GO 68734
68834: POP
68835: POP
// end ;
68836: PPOPN 3
68838: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68839: LD_EXP 46
68843: PUSH
68844: LD_EXP 54
68848: AND
68849: IFFALSE 68869
68851: GO 68853
68853: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68854: LD_INT 4
68856: PPUSH
68857: LD_OWVAR 2
68861: PPUSH
68862: LD_INT 0
68864: PPUSH
68865: CALL_OW 324
68869: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68870: LD_EXP 46
68874: PUSH
68875: LD_EXP 83
68879: AND
68880: IFFALSE 68900
68882: GO 68884
68884: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68885: LD_INT 19
68887: PPUSH
68888: LD_OWVAR 2
68892: PPUSH
68893: LD_INT 0
68895: PPUSH
68896: CALL_OW 324
68900: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68901: LD_EXP 46
68905: PUSH
68906: LD_EXP 55
68910: AND
68911: IFFALSE 69013
68913: GO 68915
68915: DISABLE
68916: LD_INT 0
68918: PPUSH
68919: PPUSH
// begin enable ;
68920: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68921: LD_ADDR_VAR 0 2
68925: PUSH
68926: LD_INT 22
68928: PUSH
68929: LD_OWVAR 2
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 2
68940: PUSH
68941: LD_INT 34
68943: PUSH
68944: LD_INT 11
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 34
68953: PUSH
68954: LD_INT 30
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PPUSH
68970: CALL_OW 69
68974: ST_TO_ADDR
// if not tmp then
68975: LD_VAR 0 2
68979: NOT
68980: IFFALSE 68984
// exit ;
68982: GO 69013
// for i in tmp do
68984: LD_ADDR_VAR 0 1
68988: PUSH
68989: LD_VAR 0 2
68993: PUSH
68994: FOR_IN
68995: IFFALSE 69011
// begin SetLives ( i , 0 ) ;
68997: LD_VAR 0 1
69001: PPUSH
69002: LD_INT 0
69004: PPUSH
69005: CALL_OW 234
// end ;
69009: GO 68994
69011: POP
69012: POP
// end ;
69013: PPOPN 2
69015: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69016: LD_EXP 46
69020: PUSH
69021: LD_EXP 56
69025: AND
69026: IFFALSE 69046
69028: GO 69030
69030: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69031: LD_INT 32
69033: PPUSH
69034: LD_OWVAR 2
69038: PPUSH
69039: LD_INT 0
69041: PPUSH
69042: CALL_OW 324
69046: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69047: LD_EXP 46
69051: PUSH
69052: LD_EXP 57
69056: AND
69057: IFFALSE 69238
69059: GO 69061
69061: DISABLE
69062: LD_INT 0
69064: PPUSH
69065: PPUSH
69066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69067: LD_ADDR_VAR 0 2
69071: PUSH
69072: LD_INT 22
69074: PUSH
69075: LD_OWVAR 2
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 33
69086: PUSH
69087: LD_INT 3
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PPUSH
69098: CALL_OW 69
69102: ST_TO_ADDR
// if not tmp then
69103: LD_VAR 0 2
69107: NOT
69108: IFFALSE 69112
// exit ;
69110: GO 69238
// side := 0 ;
69112: LD_ADDR_VAR 0 3
69116: PUSH
69117: LD_INT 0
69119: ST_TO_ADDR
// for i := 1 to 8 do
69120: LD_ADDR_VAR 0 1
69124: PUSH
69125: DOUBLE
69126: LD_INT 1
69128: DEC
69129: ST_TO_ADDR
69130: LD_INT 8
69132: PUSH
69133: FOR_TO
69134: IFFALSE 69182
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69136: LD_OWVAR 2
69140: PUSH
69141: LD_VAR 0 1
69145: NONEQUAL
69146: PUSH
69147: LD_OWVAR 2
69151: PPUSH
69152: LD_VAR 0 1
69156: PPUSH
69157: CALL_OW 81
69161: PUSH
69162: LD_INT 2
69164: EQUAL
69165: AND
69166: IFFALSE 69180
// begin side := i ;
69168: LD_ADDR_VAR 0 3
69172: PUSH
69173: LD_VAR 0 1
69177: ST_TO_ADDR
// break ;
69178: GO 69182
// end ;
69180: GO 69133
69182: POP
69183: POP
// if not side then
69184: LD_VAR 0 3
69188: NOT
69189: IFFALSE 69193
// exit ;
69191: GO 69238
// for i := 1 to tmp do
69193: LD_ADDR_VAR 0 1
69197: PUSH
69198: DOUBLE
69199: LD_INT 1
69201: DEC
69202: ST_TO_ADDR
69203: LD_VAR 0 2
69207: PUSH
69208: FOR_TO
69209: IFFALSE 69236
// if Prob ( 60 ) then
69211: LD_INT 60
69213: PPUSH
69214: CALL_OW 13
69218: IFFALSE 69234
// SetSide ( i , side ) ;
69220: LD_VAR 0 1
69224: PPUSH
69225: LD_VAR 0 3
69229: PPUSH
69230: CALL_OW 235
69234: GO 69208
69236: POP
69237: POP
// end ;
69238: PPOPN 3
69240: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69241: LD_EXP 46
69245: PUSH
69246: LD_EXP 59
69250: AND
69251: IFFALSE 69370
69253: GO 69255
69255: DISABLE
69256: LD_INT 0
69258: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69259: LD_ADDR_VAR 0 1
69263: PUSH
69264: LD_INT 22
69266: PUSH
69267: LD_OWVAR 2
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 21
69278: PUSH
69279: LD_INT 1
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 3
69288: PUSH
69289: LD_INT 23
69291: PUSH
69292: LD_INT 0
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: PPUSH
69308: CALL_OW 69
69312: PUSH
69313: FOR_IN
69314: IFFALSE 69368
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69316: LD_VAR 0 1
69320: PPUSH
69321: CALL_OW 257
69325: PUSH
69326: LD_INT 1
69328: PUSH
69329: LD_INT 2
69331: PUSH
69332: LD_INT 3
69334: PUSH
69335: LD_INT 4
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: IN
69344: IFFALSE 69366
// SetClass ( un , rand ( 1 , 4 ) ) ;
69346: LD_VAR 0 1
69350: PPUSH
69351: LD_INT 1
69353: PPUSH
69354: LD_INT 4
69356: PPUSH
69357: CALL_OW 12
69361: PPUSH
69362: CALL_OW 336
69366: GO 69313
69368: POP
69369: POP
// end ;
69370: PPOPN 1
69372: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69373: LD_EXP 46
69377: PUSH
69378: LD_EXP 58
69382: AND
69383: IFFALSE 69462
69385: GO 69387
69387: DISABLE
69388: LD_INT 0
69390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69391: LD_ADDR_VAR 0 1
69395: PUSH
69396: LD_INT 22
69398: PUSH
69399: LD_OWVAR 2
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 21
69410: PUSH
69411: LD_INT 3
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PPUSH
69422: CALL_OW 69
69426: ST_TO_ADDR
// if not tmp then
69427: LD_VAR 0 1
69431: NOT
69432: IFFALSE 69436
// exit ;
69434: GO 69462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69436: LD_VAR 0 1
69440: PUSH
69441: LD_INT 1
69443: PPUSH
69444: LD_VAR 0 1
69448: PPUSH
69449: CALL_OW 12
69453: ARRAY
69454: PPUSH
69455: LD_INT 100
69457: PPUSH
69458: CALL_OW 234
// end ;
69462: PPOPN 1
69464: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69465: LD_EXP 46
69469: PUSH
69470: LD_EXP 60
69474: AND
69475: IFFALSE 69573
69477: GO 69479
69479: DISABLE
69480: LD_INT 0
69482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69483: LD_ADDR_VAR 0 1
69487: PUSH
69488: LD_INT 22
69490: PUSH
69491: LD_OWVAR 2
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 21
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PPUSH
69514: CALL_OW 69
69518: ST_TO_ADDR
// if not tmp then
69519: LD_VAR 0 1
69523: NOT
69524: IFFALSE 69528
// exit ;
69526: GO 69573
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69528: LD_VAR 0 1
69532: PUSH
69533: LD_INT 1
69535: PPUSH
69536: LD_VAR 0 1
69540: PPUSH
69541: CALL_OW 12
69545: ARRAY
69546: PPUSH
69547: LD_INT 1
69549: PPUSH
69550: LD_INT 4
69552: PPUSH
69553: CALL_OW 12
69557: PPUSH
69558: LD_INT 3000
69560: PPUSH
69561: LD_INT 9000
69563: PPUSH
69564: CALL_OW 12
69568: PPUSH
69569: CALL_OW 492
// end ;
69573: PPOPN 1
69575: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69576: LD_EXP 46
69580: PUSH
69581: LD_EXP 61
69585: AND
69586: IFFALSE 69606
69588: GO 69590
69590: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69591: LD_INT 1
69593: PPUSH
69594: LD_OWVAR 2
69598: PPUSH
69599: LD_INT 0
69601: PPUSH
69602: CALL_OW 324
69606: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69607: LD_EXP 46
69611: PUSH
69612: LD_EXP 62
69616: AND
69617: IFFALSE 69700
69619: GO 69621
69621: DISABLE
69622: LD_INT 0
69624: PPUSH
69625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69626: LD_ADDR_VAR 0 2
69630: PUSH
69631: LD_INT 22
69633: PUSH
69634: LD_OWVAR 2
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 21
69645: PUSH
69646: LD_INT 3
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PPUSH
69657: CALL_OW 69
69661: ST_TO_ADDR
// if not tmp then
69662: LD_VAR 0 2
69666: NOT
69667: IFFALSE 69671
// exit ;
69669: GO 69700
// for i in tmp do
69671: LD_ADDR_VAR 0 1
69675: PUSH
69676: LD_VAR 0 2
69680: PUSH
69681: FOR_IN
69682: IFFALSE 69698
// SetBLevel ( i , 10 ) ;
69684: LD_VAR 0 1
69688: PPUSH
69689: LD_INT 10
69691: PPUSH
69692: CALL_OW 241
69696: GO 69681
69698: POP
69699: POP
// end ;
69700: PPOPN 2
69702: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69703: LD_EXP 46
69707: PUSH
69708: LD_EXP 63
69712: AND
69713: IFFALSE 69824
69715: GO 69717
69717: DISABLE
69718: LD_INT 0
69720: PPUSH
69721: PPUSH
69722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69723: LD_ADDR_VAR 0 3
69727: PUSH
69728: LD_INT 22
69730: PUSH
69731: LD_OWVAR 2
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 25
69742: PUSH
69743: LD_INT 1
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PPUSH
69754: CALL_OW 69
69758: ST_TO_ADDR
// if not tmp then
69759: LD_VAR 0 3
69763: NOT
69764: IFFALSE 69768
// exit ;
69766: GO 69824
// un := tmp [ rand ( 1 , tmp ) ] ;
69768: LD_ADDR_VAR 0 2
69772: PUSH
69773: LD_VAR 0 3
69777: PUSH
69778: LD_INT 1
69780: PPUSH
69781: LD_VAR 0 3
69785: PPUSH
69786: CALL_OW 12
69790: ARRAY
69791: ST_TO_ADDR
// if Crawls ( un ) then
69792: LD_VAR 0 2
69796: PPUSH
69797: CALL_OW 318
69801: IFFALSE 69812
// ComWalk ( un ) ;
69803: LD_VAR 0 2
69807: PPUSH
69808: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69812: LD_VAR 0 2
69816: PPUSH
69817: LD_INT 5
69819: PPUSH
69820: CALL_OW 336
// end ;
69824: PPOPN 3
69826: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
69827: LD_EXP 46
69831: PUSH
69832: LD_EXP 64
69836: AND
69837: PUSH
69838: LD_OWVAR 67
69842: PUSH
69843: LD_INT 4
69845: LESS
69846: AND
69847: IFFALSE 69866
69849: GO 69851
69851: DISABLE
// begin Difficulty := Difficulty + 1 ;
69852: LD_ADDR_OWVAR 67
69856: PUSH
69857: LD_OWVAR 67
69861: PUSH
69862: LD_INT 1
69864: PLUS
69865: ST_TO_ADDR
// end ;
69866: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69867: LD_EXP 46
69871: PUSH
69872: LD_EXP 65
69876: AND
69877: IFFALSE 69980
69879: GO 69881
69881: DISABLE
69882: LD_INT 0
69884: PPUSH
// begin for i := 1 to 5 do
69885: LD_ADDR_VAR 0 1
69889: PUSH
69890: DOUBLE
69891: LD_INT 1
69893: DEC
69894: ST_TO_ADDR
69895: LD_INT 5
69897: PUSH
69898: FOR_TO
69899: IFFALSE 69978
// begin uc_nation := nation_nature ;
69901: LD_ADDR_OWVAR 21
69905: PUSH
69906: LD_INT 0
69908: ST_TO_ADDR
// uc_side := 0 ;
69909: LD_ADDR_OWVAR 20
69913: PUSH
69914: LD_INT 0
69916: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69917: LD_ADDR_OWVAR 29
69921: PUSH
69922: LD_INT 12
69924: PUSH
69925: LD_INT 12
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: ST_TO_ADDR
// hc_agressivity := 20 ;
69932: LD_ADDR_OWVAR 35
69936: PUSH
69937: LD_INT 20
69939: ST_TO_ADDR
// hc_class := class_tiger ;
69940: LD_ADDR_OWVAR 28
69944: PUSH
69945: LD_INT 14
69947: ST_TO_ADDR
// hc_gallery :=  ;
69948: LD_ADDR_OWVAR 33
69952: PUSH
69953: LD_STRING 
69955: ST_TO_ADDR
// hc_name :=  ;
69956: LD_ADDR_OWVAR 26
69960: PUSH
69961: LD_STRING 
69963: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69964: CALL_OW 44
69968: PPUSH
69969: LD_INT 0
69971: PPUSH
69972: CALL_OW 51
// end ;
69976: GO 69898
69978: POP
69979: POP
// end ;
69980: PPOPN 1
69982: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69983: LD_EXP 46
69987: PUSH
69988: LD_EXP 66
69992: AND
69993: IFFALSE 70002
69995: GO 69997
69997: DISABLE
// StreamSibBomb ;
69998: CALL 70003 0 0
70002: END
// export function StreamSibBomb ; var i , x , y ; begin
70003: LD_INT 0
70005: PPUSH
70006: PPUSH
70007: PPUSH
70008: PPUSH
// result := false ;
70009: LD_ADDR_VAR 0 1
70013: PUSH
70014: LD_INT 0
70016: ST_TO_ADDR
// for i := 1 to 16 do
70017: LD_ADDR_VAR 0 2
70021: PUSH
70022: DOUBLE
70023: LD_INT 1
70025: DEC
70026: ST_TO_ADDR
70027: LD_INT 16
70029: PUSH
70030: FOR_TO
70031: IFFALSE 70230
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70033: LD_ADDR_VAR 0 3
70037: PUSH
70038: LD_INT 10
70040: PUSH
70041: LD_INT 20
70043: PUSH
70044: LD_INT 30
70046: PUSH
70047: LD_INT 40
70049: PUSH
70050: LD_INT 50
70052: PUSH
70053: LD_INT 60
70055: PUSH
70056: LD_INT 70
70058: PUSH
70059: LD_INT 80
70061: PUSH
70062: LD_INT 90
70064: PUSH
70065: LD_INT 100
70067: PUSH
70068: LD_INT 110
70070: PUSH
70071: LD_INT 120
70073: PUSH
70074: LD_INT 130
70076: PUSH
70077: LD_INT 140
70079: PUSH
70080: LD_INT 150
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 1
70102: PPUSH
70103: LD_INT 15
70105: PPUSH
70106: CALL_OW 12
70110: ARRAY
70111: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70112: LD_ADDR_VAR 0 4
70116: PUSH
70117: LD_INT 10
70119: PUSH
70120: LD_INT 20
70122: PUSH
70123: LD_INT 30
70125: PUSH
70126: LD_INT 40
70128: PUSH
70129: LD_INT 50
70131: PUSH
70132: LD_INT 60
70134: PUSH
70135: LD_INT 70
70137: PUSH
70138: LD_INT 80
70140: PUSH
70141: LD_INT 90
70143: PUSH
70144: LD_INT 100
70146: PUSH
70147: LD_INT 110
70149: PUSH
70150: LD_INT 120
70152: PUSH
70153: LD_INT 130
70155: PUSH
70156: LD_INT 140
70158: PUSH
70159: LD_INT 150
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 1
70181: PPUSH
70182: LD_INT 15
70184: PPUSH
70185: CALL_OW 12
70189: ARRAY
70190: ST_TO_ADDR
// if ValidHex ( x , y ) then
70191: LD_VAR 0 3
70195: PPUSH
70196: LD_VAR 0 4
70200: PPUSH
70201: CALL_OW 488
70205: IFFALSE 70228
// begin result := [ x , y ] ;
70207: LD_ADDR_VAR 0 1
70211: PUSH
70212: LD_VAR 0 3
70216: PUSH
70217: LD_VAR 0 4
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: ST_TO_ADDR
// break ;
70226: GO 70230
// end ; end ;
70228: GO 70030
70230: POP
70231: POP
// if result then
70232: LD_VAR 0 1
70236: IFFALSE 70296
// begin ToLua ( playSibBomb() ) ;
70238: LD_STRING playSibBomb()
70240: PPUSH
70241: CALL_OW 559
// wait ( 0 0$14 ) ;
70245: LD_INT 490
70247: PPUSH
70248: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70252: LD_VAR 0 1
70256: PUSH
70257: LD_INT 1
70259: ARRAY
70260: PPUSH
70261: LD_VAR 0 1
70265: PUSH
70266: LD_INT 2
70268: ARRAY
70269: PPUSH
70270: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70274: LD_VAR 0 1
70278: PUSH
70279: LD_INT 1
70281: ARRAY
70282: PPUSH
70283: LD_VAR 0 1
70287: PUSH
70288: LD_INT 2
70290: ARRAY
70291: PPUSH
70292: CALL_OW 429
// end ; end ;
70296: LD_VAR 0 1
70300: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70301: LD_EXP 46
70305: PUSH
70306: LD_EXP 68
70310: AND
70311: IFFALSE 70323
70313: GO 70315
70315: DISABLE
// YouLost (  ) ;
70316: LD_STRING 
70318: PPUSH
70319: CALL_OW 104
70323: END
// every 0 0$1 trigger StreamModeActive and sFog do
70324: LD_EXP 46
70328: PUSH
70329: LD_EXP 67
70333: AND
70334: IFFALSE 70348
70336: GO 70338
70338: DISABLE
// FogOff ( your_side ) ;
70339: LD_OWVAR 2
70343: PPUSH
70344: CALL_OW 344
70348: END
// every 0 0$1 trigger StreamModeActive and sSun do
70349: LD_EXP 46
70353: PUSH
70354: LD_EXP 69
70358: AND
70359: IFFALSE 70387
70361: GO 70363
70363: DISABLE
// begin solar_recharge_percent := 0 ;
70364: LD_ADDR_OWVAR 79
70368: PUSH
70369: LD_INT 0
70371: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70372: LD_INT 10500
70374: PPUSH
70375: CALL_OW 67
// solar_recharge_percent := 100 ;
70379: LD_ADDR_OWVAR 79
70383: PUSH
70384: LD_INT 100
70386: ST_TO_ADDR
// end ;
70387: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70388: LD_EXP 46
70392: PUSH
70393: LD_EXP 70
70397: AND
70398: IFFALSE 70637
70400: GO 70402
70402: DISABLE
70403: LD_INT 0
70405: PPUSH
70406: PPUSH
70407: PPUSH
// begin tmp := [ ] ;
70408: LD_ADDR_VAR 0 3
70412: PUSH
70413: EMPTY
70414: ST_TO_ADDR
// for i := 1 to 6 do
70415: LD_ADDR_VAR 0 1
70419: PUSH
70420: DOUBLE
70421: LD_INT 1
70423: DEC
70424: ST_TO_ADDR
70425: LD_INT 6
70427: PUSH
70428: FOR_TO
70429: IFFALSE 70534
// begin uc_nation := nation_nature ;
70431: LD_ADDR_OWVAR 21
70435: PUSH
70436: LD_INT 0
70438: ST_TO_ADDR
// uc_side := 0 ;
70439: LD_ADDR_OWVAR 20
70443: PUSH
70444: LD_INT 0
70446: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70447: LD_ADDR_OWVAR 29
70451: PUSH
70452: LD_INT 12
70454: PUSH
70455: LD_INT 12
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: ST_TO_ADDR
// hc_agressivity := 20 ;
70462: LD_ADDR_OWVAR 35
70466: PUSH
70467: LD_INT 20
70469: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70470: LD_ADDR_OWVAR 28
70474: PUSH
70475: LD_INT 17
70477: ST_TO_ADDR
// hc_gallery :=  ;
70478: LD_ADDR_OWVAR 33
70482: PUSH
70483: LD_STRING 
70485: ST_TO_ADDR
// hc_name :=  ;
70486: LD_ADDR_OWVAR 26
70490: PUSH
70491: LD_STRING 
70493: ST_TO_ADDR
// un := CreateHuman ;
70494: LD_ADDR_VAR 0 2
70498: PUSH
70499: CALL_OW 44
70503: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70504: LD_VAR 0 2
70508: PPUSH
70509: LD_INT 1
70511: PPUSH
70512: CALL_OW 51
// tmp := tmp ^ un ;
70516: LD_ADDR_VAR 0 3
70520: PUSH
70521: LD_VAR 0 3
70525: PUSH
70526: LD_VAR 0 2
70530: ADD
70531: ST_TO_ADDR
// end ;
70532: GO 70428
70534: POP
70535: POP
// repeat wait ( 0 0$1 ) ;
70536: LD_INT 35
70538: PPUSH
70539: CALL_OW 67
// for un in tmp do
70543: LD_ADDR_VAR 0 2
70547: PUSH
70548: LD_VAR 0 3
70552: PUSH
70553: FOR_IN
70554: IFFALSE 70628
// begin if IsDead ( un ) then
70556: LD_VAR 0 2
70560: PPUSH
70561: CALL_OW 301
70565: IFFALSE 70585
// begin tmp := tmp diff un ;
70567: LD_ADDR_VAR 0 3
70571: PUSH
70572: LD_VAR 0 3
70576: PUSH
70577: LD_VAR 0 2
70581: DIFF
70582: ST_TO_ADDR
// continue ;
70583: GO 70553
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70585: LD_VAR 0 2
70589: PPUSH
70590: LD_INT 3
70592: PUSH
70593: LD_INT 22
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PPUSH
70607: CALL_OW 69
70611: PPUSH
70612: LD_VAR 0 2
70616: PPUSH
70617: CALL_OW 74
70621: PPUSH
70622: CALL_OW 115
// end ;
70626: GO 70553
70628: POP
70629: POP
// until not tmp ;
70630: LD_VAR 0 3
70634: NOT
70635: IFFALSE 70536
// end ;
70637: PPOPN 3
70639: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70640: LD_EXP 46
70644: PUSH
70645: LD_EXP 71
70649: AND
70650: IFFALSE 70704
70652: GO 70654
70654: DISABLE
// begin ToLua ( displayTroll(); ) ;
70655: LD_STRING displayTroll();
70657: PPUSH
70658: CALL_OW 559
// wait ( 3 3$00 ) ;
70662: LD_INT 6300
70664: PPUSH
70665: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70669: LD_STRING hideTroll();
70671: PPUSH
70672: CALL_OW 559
// wait ( 1 1$00 ) ;
70676: LD_INT 2100
70678: PPUSH
70679: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70683: LD_STRING displayTroll();
70685: PPUSH
70686: CALL_OW 559
// wait ( 1 1$00 ) ;
70690: LD_INT 2100
70692: PPUSH
70693: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70697: LD_STRING hideTroll();
70699: PPUSH
70700: CALL_OW 559
// end ;
70704: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70705: LD_EXP 46
70709: PUSH
70710: LD_EXP 72
70714: AND
70715: IFFALSE 70778
70717: GO 70719
70719: DISABLE
70720: LD_INT 0
70722: PPUSH
// begin p := 0 ;
70723: LD_ADDR_VAR 0 1
70727: PUSH
70728: LD_INT 0
70730: ST_TO_ADDR
// repeat game_speed := 1 ;
70731: LD_ADDR_OWVAR 65
70735: PUSH
70736: LD_INT 1
70738: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70739: LD_INT 35
70741: PPUSH
70742: CALL_OW 67
// p := p + 1 ;
70746: LD_ADDR_VAR 0 1
70750: PUSH
70751: LD_VAR 0 1
70755: PUSH
70756: LD_INT 1
70758: PLUS
70759: ST_TO_ADDR
// until p >= 60 ;
70760: LD_VAR 0 1
70764: PUSH
70765: LD_INT 60
70767: GREATEREQUAL
70768: IFFALSE 70731
// game_speed := 4 ;
70770: LD_ADDR_OWVAR 65
70774: PUSH
70775: LD_INT 4
70777: ST_TO_ADDR
// end ;
70778: PPOPN 1
70780: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70781: LD_EXP 46
70785: PUSH
70786: LD_EXP 73
70790: AND
70791: IFFALSE 70937
70793: GO 70795
70795: DISABLE
70796: LD_INT 0
70798: PPUSH
70799: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70800: LD_ADDR_VAR 0 1
70804: PUSH
70805: LD_INT 22
70807: PUSH
70808: LD_OWVAR 2
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 2
70819: PUSH
70820: LD_INT 30
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 30
70832: PUSH
70833: LD_INT 1
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: LIST
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PPUSH
70849: CALL_OW 69
70853: ST_TO_ADDR
// if not depot then
70854: LD_VAR 0 1
70858: NOT
70859: IFFALSE 70863
// exit ;
70861: GO 70937
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70863: LD_ADDR_VAR 0 2
70867: PUSH
70868: LD_VAR 0 1
70872: PUSH
70873: LD_INT 1
70875: PPUSH
70876: LD_VAR 0 1
70880: PPUSH
70881: CALL_OW 12
70885: ARRAY
70886: PPUSH
70887: CALL_OW 274
70891: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70892: LD_VAR 0 2
70896: PPUSH
70897: LD_INT 1
70899: PPUSH
70900: LD_INT 0
70902: PPUSH
70903: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70907: LD_VAR 0 2
70911: PPUSH
70912: LD_INT 2
70914: PPUSH
70915: LD_INT 0
70917: PPUSH
70918: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70922: LD_VAR 0 2
70926: PPUSH
70927: LD_INT 3
70929: PPUSH
70930: LD_INT 0
70932: PPUSH
70933: CALL_OW 277
// end ;
70937: PPOPN 2
70939: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70940: LD_EXP 46
70944: PUSH
70945: LD_EXP 74
70949: AND
70950: IFFALSE 71047
70952: GO 70954
70954: DISABLE
70955: LD_INT 0
70957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70958: LD_ADDR_VAR 0 1
70962: PUSH
70963: LD_INT 22
70965: PUSH
70966: LD_OWVAR 2
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 21
70977: PUSH
70978: LD_INT 1
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 3
70987: PUSH
70988: LD_INT 23
70990: PUSH
70991: LD_INT 0
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: LIST
71006: PPUSH
71007: CALL_OW 69
71011: ST_TO_ADDR
// if not tmp then
71012: LD_VAR 0 1
71016: NOT
71017: IFFALSE 71021
// exit ;
71019: GO 71047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71021: LD_VAR 0 1
71025: PUSH
71026: LD_INT 1
71028: PPUSH
71029: LD_VAR 0 1
71033: PPUSH
71034: CALL_OW 12
71038: ARRAY
71039: PPUSH
71040: LD_INT 200
71042: PPUSH
71043: CALL_OW 234
// end ;
71047: PPOPN 1
71049: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71050: LD_EXP 46
71054: PUSH
71055: LD_EXP 75
71059: AND
71060: IFFALSE 71139
71062: GO 71064
71064: DISABLE
71065: LD_INT 0
71067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71068: LD_ADDR_VAR 0 1
71072: PUSH
71073: LD_INT 22
71075: PUSH
71076: LD_OWVAR 2
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 21
71087: PUSH
71088: LD_INT 2
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PPUSH
71099: CALL_OW 69
71103: ST_TO_ADDR
// if not tmp then
71104: LD_VAR 0 1
71108: NOT
71109: IFFALSE 71113
// exit ;
71111: GO 71139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71113: LD_VAR 0 1
71117: PUSH
71118: LD_INT 1
71120: PPUSH
71121: LD_VAR 0 1
71125: PPUSH
71126: CALL_OW 12
71130: ARRAY
71131: PPUSH
71132: LD_INT 60
71134: PPUSH
71135: CALL_OW 234
// end ;
71139: PPOPN 1
71141: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71142: LD_EXP 46
71146: PUSH
71147: LD_EXP 76
71151: AND
71152: IFFALSE 71251
71154: GO 71156
71156: DISABLE
71157: LD_INT 0
71159: PPUSH
71160: PPUSH
// begin enable ;
71161: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71162: LD_ADDR_VAR 0 1
71166: PUSH
71167: LD_INT 22
71169: PUSH
71170: LD_OWVAR 2
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 61
71181: PUSH
71182: EMPTY
71183: LIST
71184: PUSH
71185: LD_INT 33
71187: PUSH
71188: LD_INT 2
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: LIST
71199: PPUSH
71200: CALL_OW 69
71204: ST_TO_ADDR
// if not tmp then
71205: LD_VAR 0 1
71209: NOT
71210: IFFALSE 71214
// exit ;
71212: GO 71251
// for i in tmp do
71214: LD_ADDR_VAR 0 2
71218: PUSH
71219: LD_VAR 0 1
71223: PUSH
71224: FOR_IN
71225: IFFALSE 71249
// if IsControledBy ( i ) then
71227: LD_VAR 0 2
71231: PPUSH
71232: CALL_OW 312
71236: IFFALSE 71247
// ComUnlink ( i ) ;
71238: LD_VAR 0 2
71242: PPUSH
71243: CALL_OW 136
71247: GO 71224
71249: POP
71250: POP
// end ;
71251: PPOPN 2
71253: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71254: LD_EXP 46
71258: PUSH
71259: LD_EXP 77
71263: AND
71264: IFFALSE 71404
71266: GO 71268
71268: DISABLE
71269: LD_INT 0
71271: PPUSH
71272: PPUSH
// begin ToLua ( displayPowell(); ) ;
71273: LD_STRING displayPowell();
71275: PPUSH
71276: CALL_OW 559
// uc_side := 0 ;
71280: LD_ADDR_OWVAR 20
71284: PUSH
71285: LD_INT 0
71287: ST_TO_ADDR
// uc_nation := 2 ;
71288: LD_ADDR_OWVAR 21
71292: PUSH
71293: LD_INT 2
71295: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71296: LD_ADDR_OWVAR 37
71300: PUSH
71301: LD_INT 14
71303: ST_TO_ADDR
// vc_engine := engine_siberite ;
71304: LD_ADDR_OWVAR 39
71308: PUSH
71309: LD_INT 3
71311: ST_TO_ADDR
// vc_control := control_apeman ;
71312: LD_ADDR_OWVAR 38
71316: PUSH
71317: LD_INT 5
71319: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71320: LD_ADDR_OWVAR 40
71324: PUSH
71325: LD_INT 29
71327: ST_TO_ADDR
// un := CreateVehicle ;
71328: LD_ADDR_VAR 0 2
71332: PUSH
71333: CALL_OW 45
71337: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71338: LD_VAR 0 2
71342: PPUSH
71343: LD_INT 1
71345: PPUSH
71346: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71350: LD_INT 35
71352: PPUSH
71353: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71357: LD_VAR 0 2
71361: PPUSH
71362: LD_INT 22
71364: PUSH
71365: LD_OWVAR 2
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PPUSH
71374: CALL_OW 69
71378: PPUSH
71379: LD_VAR 0 2
71383: PPUSH
71384: CALL_OW 74
71388: PPUSH
71389: CALL_OW 115
// until IsDead ( un ) ;
71393: LD_VAR 0 2
71397: PPUSH
71398: CALL_OW 301
71402: IFFALSE 71350
// end ;
71404: PPOPN 2
71406: END
// every 0 0$1 trigger StreamModeActive and sStu do
71407: LD_EXP 46
71411: PUSH
71412: LD_EXP 85
71416: AND
71417: IFFALSE 71433
71419: GO 71421
71421: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71422: LD_STRING displayStucuk();
71424: PPUSH
71425: CALL_OW 559
// ResetFog ;
71429: CALL_OW 335
// end ;
71433: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71434: LD_EXP 46
71438: PUSH
71439: LD_EXP 78
71443: AND
71444: IFFALSE 71585
71446: GO 71448
71448: DISABLE
71449: LD_INT 0
71451: PPUSH
71452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71453: LD_ADDR_VAR 0 2
71457: PUSH
71458: LD_INT 22
71460: PUSH
71461: LD_OWVAR 2
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 21
71472: PUSH
71473: LD_INT 1
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PPUSH
71484: CALL_OW 69
71488: ST_TO_ADDR
// if not tmp then
71489: LD_VAR 0 2
71493: NOT
71494: IFFALSE 71498
// exit ;
71496: GO 71585
// un := tmp [ rand ( 1 , tmp ) ] ;
71498: LD_ADDR_VAR 0 1
71502: PUSH
71503: LD_VAR 0 2
71507: PUSH
71508: LD_INT 1
71510: PPUSH
71511: LD_VAR 0 2
71515: PPUSH
71516: CALL_OW 12
71520: ARRAY
71521: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71522: LD_VAR 0 1
71526: PPUSH
71527: LD_INT 0
71529: PPUSH
71530: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71534: LD_VAR 0 1
71538: PPUSH
71539: LD_OWVAR 3
71543: PUSH
71544: LD_VAR 0 1
71548: DIFF
71549: PPUSH
71550: LD_VAR 0 1
71554: PPUSH
71555: CALL_OW 74
71559: PPUSH
71560: CALL_OW 115
// wait ( 0 0$20 ) ;
71564: LD_INT 700
71566: PPUSH
71567: CALL_OW 67
// SetSide ( un , your_side ) ;
71571: LD_VAR 0 1
71575: PPUSH
71576: LD_OWVAR 2
71580: PPUSH
71581: CALL_OW 235
// end ;
71585: PPOPN 2
71587: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71588: LD_EXP 46
71592: PUSH
71593: LD_EXP 79
71597: AND
71598: IFFALSE 71704
71600: GO 71602
71602: DISABLE
71603: LD_INT 0
71605: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71606: LD_ADDR_VAR 0 1
71610: PUSH
71611: LD_INT 22
71613: PUSH
71614: LD_OWVAR 2
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 2
71625: PUSH
71626: LD_INT 30
71628: PUSH
71629: LD_INT 0
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 30
71638: PUSH
71639: LD_INT 1
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: LIST
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PPUSH
71655: CALL_OW 69
71659: ST_TO_ADDR
// if not depot then
71660: LD_VAR 0 1
71664: NOT
71665: IFFALSE 71669
// exit ;
71667: GO 71704
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71669: LD_VAR 0 1
71673: PUSH
71674: LD_INT 1
71676: ARRAY
71677: PPUSH
71678: CALL_OW 250
71682: PPUSH
71683: LD_VAR 0 1
71687: PUSH
71688: LD_INT 1
71690: ARRAY
71691: PPUSH
71692: CALL_OW 251
71696: PPUSH
71697: LD_INT 70
71699: PPUSH
71700: CALL_OW 495
// end ;
71704: PPOPN 1
71706: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71707: LD_EXP 46
71711: PUSH
71712: LD_EXP 80
71716: AND
71717: IFFALSE 71928
71719: GO 71721
71721: DISABLE
71722: LD_INT 0
71724: PPUSH
71725: PPUSH
71726: PPUSH
71727: PPUSH
71728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71729: LD_ADDR_VAR 0 5
71733: PUSH
71734: LD_INT 22
71736: PUSH
71737: LD_OWVAR 2
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 21
71748: PUSH
71749: LD_INT 1
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PPUSH
71760: CALL_OW 69
71764: ST_TO_ADDR
// if not tmp then
71765: LD_VAR 0 5
71769: NOT
71770: IFFALSE 71774
// exit ;
71772: GO 71928
// for i in tmp do
71774: LD_ADDR_VAR 0 1
71778: PUSH
71779: LD_VAR 0 5
71783: PUSH
71784: FOR_IN
71785: IFFALSE 71926
// begin d := rand ( 0 , 5 ) ;
71787: LD_ADDR_VAR 0 4
71791: PUSH
71792: LD_INT 0
71794: PPUSH
71795: LD_INT 5
71797: PPUSH
71798: CALL_OW 12
71802: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71803: LD_ADDR_VAR 0 2
71807: PUSH
71808: LD_VAR 0 1
71812: PPUSH
71813: CALL_OW 250
71817: PPUSH
71818: LD_VAR 0 4
71822: PPUSH
71823: LD_INT 3
71825: PPUSH
71826: LD_INT 12
71828: PPUSH
71829: CALL_OW 12
71833: PPUSH
71834: CALL_OW 272
71838: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71839: LD_ADDR_VAR 0 3
71843: PUSH
71844: LD_VAR 0 1
71848: PPUSH
71849: CALL_OW 251
71853: PPUSH
71854: LD_VAR 0 4
71858: PPUSH
71859: LD_INT 3
71861: PPUSH
71862: LD_INT 12
71864: PPUSH
71865: CALL_OW 12
71869: PPUSH
71870: CALL_OW 273
71874: ST_TO_ADDR
// if ValidHex ( x , y ) then
71875: LD_VAR 0 2
71879: PPUSH
71880: LD_VAR 0 3
71884: PPUSH
71885: CALL_OW 488
71889: IFFALSE 71924
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71891: LD_VAR 0 1
71895: PPUSH
71896: LD_VAR 0 2
71900: PPUSH
71901: LD_VAR 0 3
71905: PPUSH
71906: LD_INT 3
71908: PPUSH
71909: LD_INT 6
71911: PPUSH
71912: CALL_OW 12
71916: PPUSH
71917: LD_INT 1
71919: PPUSH
71920: CALL_OW 483
// end ;
71924: GO 71784
71926: POP
71927: POP
// end ;
71928: PPOPN 5
71930: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71931: LD_EXP 46
71935: PUSH
71936: LD_EXP 81
71940: AND
71941: IFFALSE 72035
71943: GO 71945
71945: DISABLE
71946: LD_INT 0
71948: PPUSH
71949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71950: LD_ADDR_VAR 0 2
71954: PUSH
71955: LD_INT 22
71957: PUSH
71958: LD_OWVAR 2
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 32
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 21
71979: PUSH
71980: LD_INT 2
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: LIST
71991: PPUSH
71992: CALL_OW 69
71996: ST_TO_ADDR
// if not tmp then
71997: LD_VAR 0 2
72001: NOT
72002: IFFALSE 72006
// exit ;
72004: GO 72035
// for i in tmp do
72006: LD_ADDR_VAR 0 1
72010: PUSH
72011: LD_VAR 0 2
72015: PUSH
72016: FOR_IN
72017: IFFALSE 72033
// SetFuel ( i , 0 ) ;
72019: LD_VAR 0 1
72023: PPUSH
72024: LD_INT 0
72026: PPUSH
72027: CALL_OW 240
72031: GO 72016
72033: POP
72034: POP
// end ;
72035: PPOPN 2
72037: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72038: LD_EXP 46
72042: PUSH
72043: LD_EXP 82
72047: AND
72048: IFFALSE 72114
72050: GO 72052
72052: DISABLE
72053: LD_INT 0
72055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72056: LD_ADDR_VAR 0 1
72060: PUSH
72061: LD_INT 22
72063: PUSH
72064: LD_OWVAR 2
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 30
72075: PUSH
72076: LD_INT 29
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PPUSH
72087: CALL_OW 69
72091: ST_TO_ADDR
// if not tmp then
72092: LD_VAR 0 1
72096: NOT
72097: IFFALSE 72101
// exit ;
72099: GO 72114
// DestroyUnit ( tmp [ 1 ] ) ;
72101: LD_VAR 0 1
72105: PUSH
72106: LD_INT 1
72108: ARRAY
72109: PPUSH
72110: CALL_OW 65
// end ;
72114: PPOPN 1
72116: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72117: LD_EXP 46
72121: PUSH
72122: LD_EXP 84
72126: AND
72127: IFFALSE 72256
72129: GO 72131
72131: DISABLE
72132: LD_INT 0
72134: PPUSH
// begin uc_side := 0 ;
72135: LD_ADDR_OWVAR 20
72139: PUSH
72140: LD_INT 0
72142: ST_TO_ADDR
// uc_nation := nation_arabian ;
72143: LD_ADDR_OWVAR 21
72147: PUSH
72148: LD_INT 2
72150: ST_TO_ADDR
// hc_gallery :=  ;
72151: LD_ADDR_OWVAR 33
72155: PUSH
72156: LD_STRING 
72158: ST_TO_ADDR
// hc_name :=  ;
72159: LD_ADDR_OWVAR 26
72163: PUSH
72164: LD_STRING 
72166: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72167: LD_INT 1
72169: PPUSH
72170: LD_INT 11
72172: PPUSH
72173: LD_INT 10
72175: PPUSH
72176: CALL_OW 380
// un := CreateHuman ;
72180: LD_ADDR_VAR 0 1
72184: PUSH
72185: CALL_OW 44
72189: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72190: LD_VAR 0 1
72194: PPUSH
72195: LD_INT 1
72197: PPUSH
72198: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72202: LD_INT 35
72204: PPUSH
72205: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72209: LD_VAR 0 1
72213: PPUSH
72214: LD_INT 22
72216: PUSH
72217: LD_OWVAR 2
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PPUSH
72226: CALL_OW 69
72230: PPUSH
72231: LD_VAR 0 1
72235: PPUSH
72236: CALL_OW 74
72240: PPUSH
72241: CALL_OW 115
// until IsDead ( un ) ;
72245: LD_VAR 0 1
72249: PPUSH
72250: CALL_OW 301
72254: IFFALSE 72202
// end ;
72256: PPOPN 1
72258: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72259: LD_EXP 46
72263: PUSH
72264: LD_EXP 86
72268: AND
72269: IFFALSE 72281
72271: GO 72273
72273: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72274: LD_STRING earthquake(getX(game), 0, 32)
72276: PPUSH
72277: CALL_OW 559
72281: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72282: LD_EXP 46
72286: PUSH
72287: LD_EXP 87
72291: AND
72292: IFFALSE 72383
72294: GO 72296
72296: DISABLE
72297: LD_INT 0
72299: PPUSH
// begin enable ;
72300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72301: LD_ADDR_VAR 0 1
72305: PUSH
72306: LD_INT 22
72308: PUSH
72309: LD_OWVAR 2
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_INT 21
72320: PUSH
72321: LD_INT 2
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 33
72330: PUSH
72331: LD_INT 3
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: LIST
72342: PPUSH
72343: CALL_OW 69
72347: ST_TO_ADDR
// if not tmp then
72348: LD_VAR 0 1
72352: NOT
72353: IFFALSE 72357
// exit ;
72355: GO 72383
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72357: LD_VAR 0 1
72361: PUSH
72362: LD_INT 1
72364: PPUSH
72365: LD_VAR 0 1
72369: PPUSH
72370: CALL_OW 12
72374: ARRAY
72375: PPUSH
72376: LD_INT 1
72378: PPUSH
72379: CALL_OW 234
// end ;
72383: PPOPN 1
72385: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72386: LD_EXP 46
72390: PUSH
72391: LD_EXP 88
72395: AND
72396: IFFALSE 72537
72398: GO 72400
72400: DISABLE
72401: LD_INT 0
72403: PPUSH
72404: PPUSH
72405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72406: LD_ADDR_VAR 0 3
72410: PUSH
72411: LD_INT 22
72413: PUSH
72414: LD_OWVAR 2
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 25
72425: PUSH
72426: LD_INT 1
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PPUSH
72437: CALL_OW 69
72441: ST_TO_ADDR
// if not tmp then
72442: LD_VAR 0 3
72446: NOT
72447: IFFALSE 72451
// exit ;
72449: GO 72537
// un := tmp [ rand ( 1 , tmp ) ] ;
72451: LD_ADDR_VAR 0 2
72455: PUSH
72456: LD_VAR 0 3
72460: PUSH
72461: LD_INT 1
72463: PPUSH
72464: LD_VAR 0 3
72468: PPUSH
72469: CALL_OW 12
72473: ARRAY
72474: ST_TO_ADDR
// if Crawls ( un ) then
72475: LD_VAR 0 2
72479: PPUSH
72480: CALL_OW 318
72484: IFFALSE 72495
// ComWalk ( un ) ;
72486: LD_VAR 0 2
72490: PPUSH
72491: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72495: LD_VAR 0 2
72499: PPUSH
72500: LD_INT 9
72502: PPUSH
72503: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72507: LD_INT 28
72509: PPUSH
72510: LD_OWVAR 2
72514: PPUSH
72515: LD_INT 2
72517: PPUSH
72518: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72522: LD_INT 29
72524: PPUSH
72525: LD_OWVAR 2
72529: PPUSH
72530: LD_INT 2
72532: PPUSH
72533: CALL_OW 322
// end ;
72537: PPOPN 3
72539: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72540: LD_EXP 46
72544: PUSH
72545: LD_EXP 89
72549: AND
72550: IFFALSE 72661
72552: GO 72554
72554: DISABLE
72555: LD_INT 0
72557: PPUSH
72558: PPUSH
72559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72560: LD_ADDR_VAR 0 3
72564: PUSH
72565: LD_INT 22
72567: PUSH
72568: LD_OWVAR 2
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 25
72579: PUSH
72580: LD_INT 1
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PPUSH
72591: CALL_OW 69
72595: ST_TO_ADDR
// if not tmp then
72596: LD_VAR 0 3
72600: NOT
72601: IFFALSE 72605
// exit ;
72603: GO 72661
// un := tmp [ rand ( 1 , tmp ) ] ;
72605: LD_ADDR_VAR 0 2
72609: PUSH
72610: LD_VAR 0 3
72614: PUSH
72615: LD_INT 1
72617: PPUSH
72618: LD_VAR 0 3
72622: PPUSH
72623: CALL_OW 12
72627: ARRAY
72628: ST_TO_ADDR
// if Crawls ( un ) then
72629: LD_VAR 0 2
72633: PPUSH
72634: CALL_OW 318
72638: IFFALSE 72649
// ComWalk ( un ) ;
72640: LD_VAR 0 2
72644: PPUSH
72645: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72649: LD_VAR 0 2
72653: PPUSH
72654: LD_INT 8
72656: PPUSH
72657: CALL_OW 336
// end ;
72661: PPOPN 3
72663: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72664: LD_EXP 46
72668: PUSH
72669: LD_EXP 90
72673: AND
72674: IFFALSE 72818
72676: GO 72678
72678: DISABLE
72679: LD_INT 0
72681: PPUSH
72682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72683: LD_ADDR_VAR 0 2
72687: PUSH
72688: LD_INT 22
72690: PUSH
72691: LD_OWVAR 2
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 21
72702: PUSH
72703: LD_INT 2
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 2
72712: PUSH
72713: LD_INT 34
72715: PUSH
72716: LD_INT 12
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 34
72725: PUSH
72726: LD_INT 51
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 34
72735: PUSH
72736: LD_INT 32
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: LIST
72753: PPUSH
72754: CALL_OW 69
72758: ST_TO_ADDR
// if not tmp then
72759: LD_VAR 0 2
72763: NOT
72764: IFFALSE 72768
// exit ;
72766: GO 72818
// for i in tmp do
72768: LD_ADDR_VAR 0 1
72772: PUSH
72773: LD_VAR 0 2
72777: PUSH
72778: FOR_IN
72779: IFFALSE 72816
// if GetCargo ( i , mat_artifact ) = 0 then
72781: LD_VAR 0 1
72785: PPUSH
72786: LD_INT 4
72788: PPUSH
72789: CALL_OW 289
72793: PUSH
72794: LD_INT 0
72796: EQUAL
72797: IFFALSE 72814
// SetCargo ( i , mat_siberit , 100 ) ;
72799: LD_VAR 0 1
72803: PPUSH
72804: LD_INT 3
72806: PPUSH
72807: LD_INT 100
72809: PPUSH
72810: CALL_OW 290
72814: GO 72778
72816: POP
72817: POP
// end ;
72818: PPOPN 2
72820: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72821: LD_EXP 46
72825: PUSH
72826: LD_EXP 91
72830: AND
72831: IFFALSE 73014
72833: GO 72835
72835: DISABLE
72836: LD_INT 0
72838: PPUSH
72839: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72840: LD_ADDR_VAR 0 2
72844: PUSH
72845: LD_INT 22
72847: PUSH
72848: LD_OWVAR 2
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PPUSH
72857: CALL_OW 69
72861: ST_TO_ADDR
// if not tmp then
72862: LD_VAR 0 2
72866: NOT
72867: IFFALSE 72871
// exit ;
72869: GO 73014
// for i := 1 to 2 do
72871: LD_ADDR_VAR 0 1
72875: PUSH
72876: DOUBLE
72877: LD_INT 1
72879: DEC
72880: ST_TO_ADDR
72881: LD_INT 2
72883: PUSH
72884: FOR_TO
72885: IFFALSE 73012
// begin uc_side := your_side ;
72887: LD_ADDR_OWVAR 20
72891: PUSH
72892: LD_OWVAR 2
72896: ST_TO_ADDR
// uc_nation := nation_american ;
72897: LD_ADDR_OWVAR 21
72901: PUSH
72902: LD_INT 1
72904: ST_TO_ADDR
// vc_chassis := us_morphling ;
72905: LD_ADDR_OWVAR 37
72909: PUSH
72910: LD_INT 5
72912: ST_TO_ADDR
// vc_engine := engine_siberite ;
72913: LD_ADDR_OWVAR 39
72917: PUSH
72918: LD_INT 3
72920: ST_TO_ADDR
// vc_control := control_computer ;
72921: LD_ADDR_OWVAR 38
72925: PUSH
72926: LD_INT 3
72928: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72929: LD_ADDR_OWVAR 40
72933: PUSH
72934: LD_INT 10
72936: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72937: LD_VAR 0 2
72941: PUSH
72942: LD_INT 1
72944: ARRAY
72945: PPUSH
72946: CALL_OW 310
72950: NOT
72951: IFFALSE 72998
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72953: CALL_OW 45
72957: PPUSH
72958: LD_VAR 0 2
72962: PUSH
72963: LD_INT 1
72965: ARRAY
72966: PPUSH
72967: CALL_OW 250
72971: PPUSH
72972: LD_VAR 0 2
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: PPUSH
72981: CALL_OW 251
72985: PPUSH
72986: LD_INT 12
72988: PPUSH
72989: LD_INT 1
72991: PPUSH
72992: CALL_OW 50
72996: GO 73010
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72998: CALL_OW 45
73002: PPUSH
73003: LD_INT 1
73005: PPUSH
73006: CALL_OW 51
// end ;
73010: GO 72884
73012: POP
73013: POP
// end ;
73014: PPOPN 2
73016: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73017: LD_EXP 46
73021: PUSH
73022: LD_EXP 92
73026: AND
73027: IFFALSE 73249
73029: GO 73031
73031: DISABLE
73032: LD_INT 0
73034: PPUSH
73035: PPUSH
73036: PPUSH
73037: PPUSH
73038: PPUSH
73039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73040: LD_ADDR_VAR 0 6
73044: PUSH
73045: LD_INT 22
73047: PUSH
73048: LD_OWVAR 2
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 21
73059: PUSH
73060: LD_INT 1
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: PUSH
73067: LD_INT 3
73069: PUSH
73070: LD_INT 23
73072: PUSH
73073: LD_INT 0
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: EMPTY
73081: LIST
73082: LIST
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: LIST
73088: PPUSH
73089: CALL_OW 69
73093: ST_TO_ADDR
// if not tmp then
73094: LD_VAR 0 6
73098: NOT
73099: IFFALSE 73103
// exit ;
73101: GO 73249
// s1 := rand ( 1 , 4 ) ;
73103: LD_ADDR_VAR 0 2
73107: PUSH
73108: LD_INT 1
73110: PPUSH
73111: LD_INT 4
73113: PPUSH
73114: CALL_OW 12
73118: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73119: LD_ADDR_VAR 0 4
73123: PUSH
73124: LD_VAR 0 6
73128: PUSH
73129: LD_INT 1
73131: ARRAY
73132: PPUSH
73133: LD_VAR 0 2
73137: PPUSH
73138: CALL_OW 259
73142: ST_TO_ADDR
// if s1 = 1 then
73143: LD_VAR 0 2
73147: PUSH
73148: LD_INT 1
73150: EQUAL
73151: IFFALSE 73171
// s2 := rand ( 2 , 4 ) else
73153: LD_ADDR_VAR 0 3
73157: PUSH
73158: LD_INT 2
73160: PPUSH
73161: LD_INT 4
73163: PPUSH
73164: CALL_OW 12
73168: ST_TO_ADDR
73169: GO 73179
// s2 := 1 ;
73171: LD_ADDR_VAR 0 3
73175: PUSH
73176: LD_INT 1
73178: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73179: LD_ADDR_VAR 0 5
73183: PUSH
73184: LD_VAR 0 6
73188: PUSH
73189: LD_INT 1
73191: ARRAY
73192: PPUSH
73193: LD_VAR 0 3
73197: PPUSH
73198: CALL_OW 259
73202: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73203: LD_VAR 0 6
73207: PUSH
73208: LD_INT 1
73210: ARRAY
73211: PPUSH
73212: LD_VAR 0 2
73216: PPUSH
73217: LD_VAR 0 5
73221: PPUSH
73222: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73226: LD_VAR 0 6
73230: PUSH
73231: LD_INT 1
73233: ARRAY
73234: PPUSH
73235: LD_VAR 0 3
73239: PPUSH
73240: LD_VAR 0 4
73244: PPUSH
73245: CALL_OW 237
// end ;
73249: PPOPN 6
73251: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73252: LD_EXP 46
73256: PUSH
73257: LD_EXP 93
73261: AND
73262: IFFALSE 73341
73264: GO 73266
73266: DISABLE
73267: LD_INT 0
73269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73270: LD_ADDR_VAR 0 1
73274: PUSH
73275: LD_INT 22
73277: PUSH
73278: LD_OWVAR 2
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 30
73289: PUSH
73290: LD_INT 3
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PPUSH
73301: CALL_OW 69
73305: ST_TO_ADDR
// if not tmp then
73306: LD_VAR 0 1
73310: NOT
73311: IFFALSE 73315
// exit ;
73313: GO 73341
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73315: LD_VAR 0 1
73319: PUSH
73320: LD_INT 1
73322: PPUSH
73323: LD_VAR 0 1
73327: PPUSH
73328: CALL_OW 12
73332: ARRAY
73333: PPUSH
73334: LD_INT 1
73336: PPUSH
73337: CALL_OW 234
// end ;
73341: PPOPN 1
73343: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73344: LD_EXP 46
73348: PUSH
73349: LD_EXP 94
73353: AND
73354: IFFALSE 73466
73356: GO 73358
73358: DISABLE
73359: LD_INT 0
73361: PPUSH
73362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73363: LD_ADDR_VAR 0 2
73367: PUSH
73368: LD_INT 22
73370: PUSH
73371: LD_OWVAR 2
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 2
73382: PUSH
73383: LD_INT 30
73385: PUSH
73386: LD_INT 27
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 30
73395: PUSH
73396: LD_INT 26
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PUSH
73403: LD_INT 30
73405: PUSH
73406: LD_INT 28
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: LIST
73417: LIST
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PPUSH
73423: CALL_OW 69
73427: ST_TO_ADDR
// if not tmp then
73428: LD_VAR 0 2
73432: NOT
73433: IFFALSE 73437
// exit ;
73435: GO 73466
// for i in tmp do
73437: LD_ADDR_VAR 0 1
73441: PUSH
73442: LD_VAR 0 2
73446: PUSH
73447: FOR_IN
73448: IFFALSE 73464
// SetLives ( i , 1 ) ;
73450: LD_VAR 0 1
73454: PPUSH
73455: LD_INT 1
73457: PPUSH
73458: CALL_OW 234
73462: GO 73447
73464: POP
73465: POP
// end ;
73466: PPOPN 2
73468: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73469: LD_EXP 46
73473: PUSH
73474: LD_EXP 95
73478: AND
73479: IFFALSE 73766
73481: GO 73483
73483: DISABLE
73484: LD_INT 0
73486: PPUSH
73487: PPUSH
73488: PPUSH
// begin i := rand ( 1 , 7 ) ;
73489: LD_ADDR_VAR 0 1
73493: PUSH
73494: LD_INT 1
73496: PPUSH
73497: LD_INT 7
73499: PPUSH
73500: CALL_OW 12
73504: ST_TO_ADDR
// case i of 1 :
73505: LD_VAR 0 1
73509: PUSH
73510: LD_INT 1
73512: DOUBLE
73513: EQUAL
73514: IFTRUE 73518
73516: GO 73528
73518: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73519: LD_STRING earthquake(getX(game), 0, 32)
73521: PPUSH
73522: CALL_OW 559
73526: GO 73766
73528: LD_INT 2
73530: DOUBLE
73531: EQUAL
73532: IFTRUE 73536
73534: GO 73550
73536: POP
// begin ToLua ( displayStucuk(); ) ;
73537: LD_STRING displayStucuk();
73539: PPUSH
73540: CALL_OW 559
// ResetFog ;
73544: CALL_OW 335
// end ; 3 :
73548: GO 73766
73550: LD_INT 3
73552: DOUBLE
73553: EQUAL
73554: IFTRUE 73558
73556: GO 73662
73558: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73559: LD_ADDR_VAR 0 2
73563: PUSH
73564: LD_INT 22
73566: PUSH
73567: LD_OWVAR 2
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 25
73578: PUSH
73579: LD_INT 1
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PPUSH
73590: CALL_OW 69
73594: ST_TO_ADDR
// if not tmp then
73595: LD_VAR 0 2
73599: NOT
73600: IFFALSE 73604
// exit ;
73602: GO 73766
// un := tmp [ rand ( 1 , tmp ) ] ;
73604: LD_ADDR_VAR 0 3
73608: PUSH
73609: LD_VAR 0 2
73613: PUSH
73614: LD_INT 1
73616: PPUSH
73617: LD_VAR 0 2
73621: PPUSH
73622: CALL_OW 12
73626: ARRAY
73627: ST_TO_ADDR
// if Crawls ( un ) then
73628: LD_VAR 0 3
73632: PPUSH
73633: CALL_OW 318
73637: IFFALSE 73648
// ComWalk ( un ) ;
73639: LD_VAR 0 3
73643: PPUSH
73644: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73648: LD_VAR 0 3
73652: PPUSH
73653: LD_INT 8
73655: PPUSH
73656: CALL_OW 336
// end ; 4 :
73660: GO 73766
73662: LD_INT 4
73664: DOUBLE
73665: EQUAL
73666: IFTRUE 73670
73668: GO 73744
73670: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73671: LD_ADDR_VAR 0 2
73675: PUSH
73676: LD_INT 22
73678: PUSH
73679: LD_OWVAR 2
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 30
73690: PUSH
73691: LD_INT 29
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: PPUSH
73702: CALL_OW 69
73706: ST_TO_ADDR
// if not tmp then
73707: LD_VAR 0 2
73711: NOT
73712: IFFALSE 73716
// exit ;
73714: GO 73766
// CenterNowOnUnits ( tmp [ 1 ] ) ;
73716: LD_VAR 0 2
73720: PUSH
73721: LD_INT 1
73723: ARRAY
73724: PPUSH
73725: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
73729: LD_VAR 0 2
73733: PUSH
73734: LD_INT 1
73736: ARRAY
73737: PPUSH
73738: CALL_OW 65
// end ; 5 .. 7 :
73742: GO 73766
73744: LD_INT 5
73746: DOUBLE
73747: GREATEREQUAL
73748: IFFALSE 73756
73750: LD_INT 7
73752: DOUBLE
73753: LESSEQUAL
73754: IFTRUE 73758
73756: GO 73765
73758: POP
// StreamSibBomb ; end ;
73759: CALL 70003 0 0
73763: GO 73766
73765: POP
// end ;
73766: PPOPN 3
73768: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73769: LD_EXP 46
73773: PUSH
73774: LD_EXP 96
73778: AND
73779: IFFALSE 73935
73781: GO 73783
73783: DISABLE
73784: LD_INT 0
73786: PPUSH
73787: PPUSH
73788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73789: LD_ADDR_VAR 0 2
73793: PUSH
73794: LD_INT 81
73796: PUSH
73797: LD_OWVAR 2
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 2
73808: PUSH
73809: LD_INT 21
73811: PUSH
73812: LD_INT 1
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: LD_INT 21
73821: PUSH
73822: LD_INT 2
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: LIST
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PPUSH
73838: CALL_OW 69
73842: ST_TO_ADDR
// if not tmp then
73843: LD_VAR 0 2
73847: NOT
73848: IFFALSE 73852
// exit ;
73850: GO 73935
// p := 0 ;
73852: LD_ADDR_VAR 0 3
73856: PUSH
73857: LD_INT 0
73859: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73860: LD_INT 35
73862: PPUSH
73863: CALL_OW 67
// p := p + 1 ;
73867: LD_ADDR_VAR 0 3
73871: PUSH
73872: LD_VAR 0 3
73876: PUSH
73877: LD_INT 1
73879: PLUS
73880: ST_TO_ADDR
// for i in tmp do
73881: LD_ADDR_VAR 0 1
73885: PUSH
73886: LD_VAR 0 2
73890: PUSH
73891: FOR_IN
73892: IFFALSE 73923
// if GetLives ( i ) < 1000 then
73894: LD_VAR 0 1
73898: PPUSH
73899: CALL_OW 256
73903: PUSH
73904: LD_INT 1000
73906: LESS
73907: IFFALSE 73921
// SetLives ( i , 1000 ) ;
73909: LD_VAR 0 1
73913: PPUSH
73914: LD_INT 1000
73916: PPUSH
73917: CALL_OW 234
73921: GO 73891
73923: POP
73924: POP
// until p > 20 ;
73925: LD_VAR 0 3
73929: PUSH
73930: LD_INT 20
73932: GREATER
73933: IFFALSE 73860
// end ;
73935: PPOPN 3
73937: END
// every 0 0$1 trigger StreamModeActive and sTime do
73938: LD_EXP 46
73942: PUSH
73943: LD_EXP 97
73947: AND
73948: IFFALSE 73983
73950: GO 73952
73952: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73953: LD_INT 28
73955: PPUSH
73956: LD_OWVAR 2
73960: PPUSH
73961: LD_INT 2
73963: PPUSH
73964: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73968: LD_INT 30
73970: PPUSH
73971: LD_OWVAR 2
73975: PPUSH
73976: LD_INT 2
73978: PPUSH
73979: CALL_OW 322
// end ;
73983: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73984: LD_EXP 46
73988: PUSH
73989: LD_EXP 98
73993: AND
73994: IFFALSE 74115
73996: GO 73998
73998: DISABLE
73999: LD_INT 0
74001: PPUSH
74002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74003: LD_ADDR_VAR 0 2
74007: PUSH
74008: LD_INT 22
74010: PUSH
74011: LD_OWVAR 2
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 21
74022: PUSH
74023: LD_INT 1
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 3
74032: PUSH
74033: LD_INT 23
74035: PUSH
74036: LD_INT 0
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: LIST
74051: PPUSH
74052: CALL_OW 69
74056: ST_TO_ADDR
// if not tmp then
74057: LD_VAR 0 2
74061: NOT
74062: IFFALSE 74066
// exit ;
74064: GO 74115
// for i in tmp do
74066: LD_ADDR_VAR 0 1
74070: PUSH
74071: LD_VAR 0 2
74075: PUSH
74076: FOR_IN
74077: IFFALSE 74113
// begin if Crawls ( i ) then
74079: LD_VAR 0 1
74083: PPUSH
74084: CALL_OW 318
74088: IFFALSE 74099
// ComWalk ( i ) ;
74090: LD_VAR 0 1
74094: PPUSH
74095: CALL_OW 138
// SetClass ( i , 2 ) ;
74099: LD_VAR 0 1
74103: PPUSH
74104: LD_INT 2
74106: PPUSH
74107: CALL_OW 336
// end ;
74111: GO 74076
74113: POP
74114: POP
// end ;
74115: PPOPN 2
74117: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74118: LD_EXP 46
74122: PUSH
74123: LD_EXP 99
74127: AND
74128: IFFALSE 74416
74130: GO 74132
74132: DISABLE
74133: LD_INT 0
74135: PPUSH
74136: PPUSH
74137: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74138: LD_OWVAR 2
74142: PPUSH
74143: LD_INT 9
74145: PPUSH
74146: LD_INT 1
74148: PPUSH
74149: LD_INT 1
74151: PPUSH
74152: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74156: LD_INT 9
74158: PPUSH
74159: LD_OWVAR 2
74163: PPUSH
74164: CALL_OW 343
// uc_side := 9 ;
74168: LD_ADDR_OWVAR 20
74172: PUSH
74173: LD_INT 9
74175: ST_TO_ADDR
// uc_nation := 2 ;
74176: LD_ADDR_OWVAR 21
74180: PUSH
74181: LD_INT 2
74183: ST_TO_ADDR
// hc_name := Dark Warrior ;
74184: LD_ADDR_OWVAR 26
74188: PUSH
74189: LD_STRING Dark Warrior
74191: ST_TO_ADDR
// hc_gallery :=  ;
74192: LD_ADDR_OWVAR 33
74196: PUSH
74197: LD_STRING 
74199: ST_TO_ADDR
// hc_noskilllimit := true ;
74200: LD_ADDR_OWVAR 76
74204: PUSH
74205: LD_INT 1
74207: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74208: LD_ADDR_OWVAR 31
74212: PUSH
74213: LD_INT 30
74215: PUSH
74216: LD_INT 30
74218: PUSH
74219: LD_INT 30
74221: PUSH
74222: LD_INT 30
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: ST_TO_ADDR
// un := CreateHuman ;
74231: LD_ADDR_VAR 0 3
74235: PUSH
74236: CALL_OW 44
74240: ST_TO_ADDR
// hc_noskilllimit := false ;
74241: LD_ADDR_OWVAR 76
74245: PUSH
74246: LD_INT 0
74248: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74249: LD_VAR 0 3
74253: PPUSH
74254: LD_INT 1
74256: PPUSH
74257: CALL_OW 51
// ToLua ( playRanger() ) ;
74261: LD_STRING playRanger()
74263: PPUSH
74264: CALL_OW 559
// p := 0 ;
74268: LD_ADDR_VAR 0 2
74272: PUSH
74273: LD_INT 0
74275: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74276: LD_INT 35
74278: PPUSH
74279: CALL_OW 67
// p := p + 1 ;
74283: LD_ADDR_VAR 0 2
74287: PUSH
74288: LD_VAR 0 2
74292: PUSH
74293: LD_INT 1
74295: PLUS
74296: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74297: LD_VAR 0 3
74301: PPUSH
74302: CALL_OW 256
74306: PUSH
74307: LD_INT 1000
74309: LESS
74310: IFFALSE 74324
// SetLives ( un , 1000 ) ;
74312: LD_VAR 0 3
74316: PPUSH
74317: LD_INT 1000
74319: PPUSH
74320: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74324: LD_VAR 0 3
74328: PPUSH
74329: LD_INT 81
74331: PUSH
74332: LD_OWVAR 2
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 91
74343: PUSH
74344: LD_VAR 0 3
74348: PUSH
74349: LD_INT 30
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PPUSH
74361: CALL_OW 69
74365: PPUSH
74366: LD_VAR 0 3
74370: PPUSH
74371: CALL_OW 74
74375: PPUSH
74376: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
74380: LD_VAR 0 2
74384: PUSH
74385: LD_INT 80
74387: GREATER
74388: PUSH
74389: LD_VAR 0 3
74393: PPUSH
74394: CALL_OW 301
74398: OR
74399: IFFALSE 74276
// if un then
74401: LD_VAR 0 3
74405: IFFALSE 74416
// RemoveUnit ( un ) ;
74407: LD_VAR 0 3
74411: PPUSH
74412: CALL_OW 64
// end ;
74416: PPOPN 3
74418: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
74419: LD_EXP 100
74423: IFFALSE 74539
74425: GO 74427
74427: DISABLE
74428: LD_INT 0
74430: PPUSH
74431: PPUSH
74432: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74433: LD_ADDR_VAR 0 2
74437: PUSH
74438: LD_INT 81
74440: PUSH
74441: LD_OWVAR 2
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: PUSH
74450: LD_INT 21
74452: PUSH
74453: LD_INT 1
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: PUSH
74460: EMPTY
74461: LIST
74462: LIST
74463: PPUSH
74464: CALL_OW 69
74468: ST_TO_ADDR
// ToLua ( playComputer() ) ;
74469: LD_STRING playComputer()
74471: PPUSH
74472: CALL_OW 559
// if not tmp then
74476: LD_VAR 0 2
74480: NOT
74481: IFFALSE 74485
// exit ;
74483: GO 74539
// for i in tmp do
74485: LD_ADDR_VAR 0 1
74489: PUSH
74490: LD_VAR 0 2
74494: PUSH
74495: FOR_IN
74496: IFFALSE 74537
// for j := 1 to 4 do
74498: LD_ADDR_VAR 0 3
74502: PUSH
74503: DOUBLE
74504: LD_INT 1
74506: DEC
74507: ST_TO_ADDR
74508: LD_INT 4
74510: PUSH
74511: FOR_TO
74512: IFFALSE 74533
// SetSkill ( i , j , 10 ) ;
74514: LD_VAR 0 1
74518: PPUSH
74519: LD_VAR 0 3
74523: PPUSH
74524: LD_INT 10
74526: PPUSH
74527: CALL_OW 237
74531: GO 74511
74533: POP
74534: POP
74535: GO 74495
74537: POP
74538: POP
// end ;
74539: PPOPN 3
74541: END
// every 0 0$1 trigger s30 do var i , tmp ;
74542: LD_EXP 101
74546: IFFALSE 74615
74548: GO 74550
74550: DISABLE
74551: LD_INT 0
74553: PPUSH
74554: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74555: LD_ADDR_VAR 0 2
74559: PUSH
74560: LD_INT 22
74562: PUSH
74563: LD_OWVAR 2
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: PPUSH
74572: CALL_OW 69
74576: ST_TO_ADDR
// if not tmp then
74577: LD_VAR 0 2
74581: NOT
74582: IFFALSE 74586
// exit ;
74584: GO 74615
// for i in tmp do
74586: LD_ADDR_VAR 0 1
74590: PUSH
74591: LD_VAR 0 2
74595: PUSH
74596: FOR_IN
74597: IFFALSE 74613
// SetLives ( i , 300 ) ;
74599: LD_VAR 0 1
74603: PPUSH
74604: LD_INT 300
74606: PPUSH
74607: CALL_OW 234
74611: GO 74596
74613: POP
74614: POP
// end ;
74615: PPOPN 2
74617: END
// every 0 0$1 trigger s60 do var i , tmp ;
74618: LD_EXP 102
74622: IFFALSE 74691
74624: GO 74626
74626: DISABLE
74627: LD_INT 0
74629: PPUSH
74630: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74631: LD_ADDR_VAR 0 2
74635: PUSH
74636: LD_INT 22
74638: PUSH
74639: LD_OWVAR 2
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PPUSH
74648: CALL_OW 69
74652: ST_TO_ADDR
// if not tmp then
74653: LD_VAR 0 2
74657: NOT
74658: IFFALSE 74662
// exit ;
74660: GO 74691
// for i in tmp do
74662: LD_ADDR_VAR 0 1
74666: PUSH
74667: LD_VAR 0 2
74671: PUSH
74672: FOR_IN
74673: IFFALSE 74689
// SetLives ( i , 600 ) ;
74675: LD_VAR 0 1
74679: PPUSH
74680: LD_INT 600
74682: PPUSH
74683: CALL_OW 234
74687: GO 74672
74689: POP
74690: POP
// end ;
74691: PPOPN 2
74693: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74694: LD_INT 0
74696: PPUSH
// case cmd of 301 :
74697: LD_VAR 0 1
74701: PUSH
74702: LD_INT 301
74704: DOUBLE
74705: EQUAL
74706: IFTRUE 74710
74708: GO 74742
74710: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74711: LD_VAR 0 6
74715: PPUSH
74716: LD_VAR 0 7
74720: PPUSH
74721: LD_VAR 0 8
74725: PPUSH
74726: LD_VAR 0 4
74730: PPUSH
74731: LD_VAR 0 5
74735: PPUSH
74736: CALL 75951 0 5
74740: GO 74863
74742: LD_INT 302
74744: DOUBLE
74745: EQUAL
74746: IFTRUE 74750
74748: GO 74787
74750: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74751: LD_VAR 0 6
74755: PPUSH
74756: LD_VAR 0 7
74760: PPUSH
74761: LD_VAR 0 8
74765: PPUSH
74766: LD_VAR 0 9
74770: PPUSH
74771: LD_VAR 0 4
74775: PPUSH
74776: LD_VAR 0 5
74780: PPUSH
74781: CALL 76042 0 6
74785: GO 74863
74787: LD_INT 303
74789: DOUBLE
74790: EQUAL
74791: IFTRUE 74795
74793: GO 74832
74795: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74796: LD_VAR 0 6
74800: PPUSH
74801: LD_VAR 0 7
74805: PPUSH
74806: LD_VAR 0 8
74810: PPUSH
74811: LD_VAR 0 9
74815: PPUSH
74816: LD_VAR 0 4
74820: PPUSH
74821: LD_VAR 0 5
74825: PPUSH
74826: CALL 74868 0 6
74830: GO 74863
74832: LD_INT 304
74834: DOUBLE
74835: EQUAL
74836: IFTRUE 74840
74838: GO 74862
74840: POP
// hHackTeleport ( unit , x , y ) ; end ;
74841: LD_VAR 0 2
74845: PPUSH
74846: LD_VAR 0 4
74850: PPUSH
74851: LD_VAR 0 5
74855: PPUSH
74856: CALL 76635 0 3
74860: GO 74863
74862: POP
// end ;
74863: LD_VAR 0 12
74867: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74868: LD_INT 0
74870: PPUSH
74871: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74872: LD_VAR 0 1
74876: PUSH
74877: LD_INT 1
74879: LESS
74880: PUSH
74881: LD_VAR 0 1
74885: PUSH
74886: LD_INT 3
74888: GREATER
74889: OR
74890: PUSH
74891: LD_VAR 0 5
74895: PPUSH
74896: LD_VAR 0 6
74900: PPUSH
74901: CALL_OW 428
74905: OR
74906: IFFALSE 74910
// exit ;
74908: GO 75638
// uc_side := your_side ;
74910: LD_ADDR_OWVAR 20
74914: PUSH
74915: LD_OWVAR 2
74919: ST_TO_ADDR
// uc_nation := nation ;
74920: LD_ADDR_OWVAR 21
74924: PUSH
74925: LD_VAR 0 1
74929: ST_TO_ADDR
// bc_level = 1 ;
74930: LD_ADDR_OWVAR 43
74934: PUSH
74935: LD_INT 1
74937: ST_TO_ADDR
// case btype of 1 :
74938: LD_VAR 0 2
74942: PUSH
74943: LD_INT 1
74945: DOUBLE
74946: EQUAL
74947: IFTRUE 74951
74949: GO 74962
74951: POP
// bc_type := b_depot ; 2 :
74952: LD_ADDR_OWVAR 42
74956: PUSH
74957: LD_INT 0
74959: ST_TO_ADDR
74960: GO 75582
74962: LD_INT 2
74964: DOUBLE
74965: EQUAL
74966: IFTRUE 74970
74968: GO 74981
74970: POP
// bc_type := b_warehouse ; 3 :
74971: LD_ADDR_OWVAR 42
74975: PUSH
74976: LD_INT 1
74978: ST_TO_ADDR
74979: GO 75582
74981: LD_INT 3
74983: DOUBLE
74984: EQUAL
74985: IFTRUE 74989
74987: GO 75000
74989: POP
// bc_type := b_lab ; 4 .. 9 :
74990: LD_ADDR_OWVAR 42
74994: PUSH
74995: LD_INT 6
74997: ST_TO_ADDR
74998: GO 75582
75000: LD_INT 4
75002: DOUBLE
75003: GREATEREQUAL
75004: IFFALSE 75012
75006: LD_INT 9
75008: DOUBLE
75009: LESSEQUAL
75010: IFTRUE 75014
75012: GO 75074
75014: POP
// begin bc_type := b_lab_half ;
75015: LD_ADDR_OWVAR 42
75019: PUSH
75020: LD_INT 7
75022: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75023: LD_ADDR_OWVAR 44
75027: PUSH
75028: LD_INT 10
75030: PUSH
75031: LD_INT 11
75033: PUSH
75034: LD_INT 12
75036: PUSH
75037: LD_INT 15
75039: PUSH
75040: LD_INT 14
75042: PUSH
75043: LD_INT 13
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: LIST
75053: PUSH
75054: LD_VAR 0 2
75058: PUSH
75059: LD_INT 3
75061: MINUS
75062: ARRAY
75063: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
75064: LD_ADDR_OWVAR 45
75068: PUSH
75069: LD_INT 9
75071: ST_TO_ADDR
// end ; 10 .. 13 :
75072: GO 75582
75074: LD_INT 10
75076: DOUBLE
75077: GREATEREQUAL
75078: IFFALSE 75086
75080: LD_INT 13
75082: DOUBLE
75083: LESSEQUAL
75084: IFTRUE 75088
75086: GO 75165
75088: POP
// begin bc_type := b_lab_full ;
75089: LD_ADDR_OWVAR 42
75093: PUSH
75094: LD_INT 8
75096: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75097: LD_ADDR_OWVAR 44
75101: PUSH
75102: LD_INT 10
75104: PUSH
75105: LD_INT 12
75107: PUSH
75108: LD_INT 14
75110: PUSH
75111: LD_INT 13
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: PUSH
75120: LD_VAR 0 2
75124: PUSH
75125: LD_INT 9
75127: MINUS
75128: ARRAY
75129: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75130: LD_ADDR_OWVAR 45
75134: PUSH
75135: LD_INT 11
75137: PUSH
75138: LD_INT 15
75140: PUSH
75141: LD_INT 12
75143: PUSH
75144: LD_INT 15
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: PUSH
75153: LD_VAR 0 2
75157: PUSH
75158: LD_INT 9
75160: MINUS
75161: ARRAY
75162: ST_TO_ADDR
// end ; 14 :
75163: GO 75582
75165: LD_INT 14
75167: DOUBLE
75168: EQUAL
75169: IFTRUE 75173
75171: GO 75184
75173: POP
// bc_type := b_workshop ; 15 :
75174: LD_ADDR_OWVAR 42
75178: PUSH
75179: LD_INT 2
75181: ST_TO_ADDR
75182: GO 75582
75184: LD_INT 15
75186: DOUBLE
75187: EQUAL
75188: IFTRUE 75192
75190: GO 75203
75192: POP
// bc_type := b_factory ; 16 :
75193: LD_ADDR_OWVAR 42
75197: PUSH
75198: LD_INT 3
75200: ST_TO_ADDR
75201: GO 75582
75203: LD_INT 16
75205: DOUBLE
75206: EQUAL
75207: IFTRUE 75211
75209: GO 75222
75211: POP
// bc_type := b_ext_gun ; 17 :
75212: LD_ADDR_OWVAR 42
75216: PUSH
75217: LD_INT 17
75219: ST_TO_ADDR
75220: GO 75582
75222: LD_INT 17
75224: DOUBLE
75225: EQUAL
75226: IFTRUE 75230
75228: GO 75258
75230: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75231: LD_ADDR_OWVAR 42
75235: PUSH
75236: LD_INT 19
75238: PUSH
75239: LD_INT 23
75241: PUSH
75242: LD_INT 19
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: LIST
75249: PUSH
75250: LD_VAR 0 1
75254: ARRAY
75255: ST_TO_ADDR
75256: GO 75582
75258: LD_INT 18
75260: DOUBLE
75261: EQUAL
75262: IFTRUE 75266
75264: GO 75277
75266: POP
// bc_type := b_ext_radar ; 19 :
75267: LD_ADDR_OWVAR 42
75271: PUSH
75272: LD_INT 20
75274: ST_TO_ADDR
75275: GO 75582
75277: LD_INT 19
75279: DOUBLE
75280: EQUAL
75281: IFTRUE 75285
75283: GO 75296
75285: POP
// bc_type := b_ext_radio ; 20 :
75286: LD_ADDR_OWVAR 42
75290: PUSH
75291: LD_INT 22
75293: ST_TO_ADDR
75294: GO 75582
75296: LD_INT 20
75298: DOUBLE
75299: EQUAL
75300: IFTRUE 75304
75302: GO 75315
75304: POP
// bc_type := b_ext_siberium ; 21 :
75305: LD_ADDR_OWVAR 42
75309: PUSH
75310: LD_INT 21
75312: ST_TO_ADDR
75313: GO 75582
75315: LD_INT 21
75317: DOUBLE
75318: EQUAL
75319: IFTRUE 75323
75321: GO 75334
75323: POP
// bc_type := b_ext_computer ; 22 :
75324: LD_ADDR_OWVAR 42
75328: PUSH
75329: LD_INT 24
75331: ST_TO_ADDR
75332: GO 75582
75334: LD_INT 22
75336: DOUBLE
75337: EQUAL
75338: IFTRUE 75342
75340: GO 75353
75342: POP
// bc_type := b_ext_track ; 23 :
75343: LD_ADDR_OWVAR 42
75347: PUSH
75348: LD_INT 16
75350: ST_TO_ADDR
75351: GO 75582
75353: LD_INT 23
75355: DOUBLE
75356: EQUAL
75357: IFTRUE 75361
75359: GO 75372
75361: POP
// bc_type := b_ext_laser ; 24 :
75362: LD_ADDR_OWVAR 42
75366: PUSH
75367: LD_INT 25
75369: ST_TO_ADDR
75370: GO 75582
75372: LD_INT 24
75374: DOUBLE
75375: EQUAL
75376: IFTRUE 75380
75378: GO 75391
75380: POP
// bc_type := b_control_tower ; 25 :
75381: LD_ADDR_OWVAR 42
75385: PUSH
75386: LD_INT 36
75388: ST_TO_ADDR
75389: GO 75582
75391: LD_INT 25
75393: DOUBLE
75394: EQUAL
75395: IFTRUE 75399
75397: GO 75410
75399: POP
// bc_type := b_breastwork ; 26 :
75400: LD_ADDR_OWVAR 42
75404: PUSH
75405: LD_INT 31
75407: ST_TO_ADDR
75408: GO 75582
75410: LD_INT 26
75412: DOUBLE
75413: EQUAL
75414: IFTRUE 75418
75416: GO 75429
75418: POP
// bc_type := b_bunker ; 27 :
75419: LD_ADDR_OWVAR 42
75423: PUSH
75424: LD_INT 32
75426: ST_TO_ADDR
75427: GO 75582
75429: LD_INT 27
75431: DOUBLE
75432: EQUAL
75433: IFTRUE 75437
75435: GO 75448
75437: POP
// bc_type := b_turret ; 28 :
75438: LD_ADDR_OWVAR 42
75442: PUSH
75443: LD_INT 33
75445: ST_TO_ADDR
75446: GO 75582
75448: LD_INT 28
75450: DOUBLE
75451: EQUAL
75452: IFTRUE 75456
75454: GO 75467
75456: POP
// bc_type := b_armoury ; 29 :
75457: LD_ADDR_OWVAR 42
75461: PUSH
75462: LD_INT 4
75464: ST_TO_ADDR
75465: GO 75582
75467: LD_INT 29
75469: DOUBLE
75470: EQUAL
75471: IFTRUE 75475
75473: GO 75486
75475: POP
// bc_type := b_barracks ; 30 :
75476: LD_ADDR_OWVAR 42
75480: PUSH
75481: LD_INT 5
75483: ST_TO_ADDR
75484: GO 75582
75486: LD_INT 30
75488: DOUBLE
75489: EQUAL
75490: IFTRUE 75494
75492: GO 75505
75494: POP
// bc_type := b_solar_power ; 31 :
75495: LD_ADDR_OWVAR 42
75499: PUSH
75500: LD_INT 27
75502: ST_TO_ADDR
75503: GO 75582
75505: LD_INT 31
75507: DOUBLE
75508: EQUAL
75509: IFTRUE 75513
75511: GO 75524
75513: POP
// bc_type := b_oil_power ; 32 :
75514: LD_ADDR_OWVAR 42
75518: PUSH
75519: LD_INT 26
75521: ST_TO_ADDR
75522: GO 75582
75524: LD_INT 32
75526: DOUBLE
75527: EQUAL
75528: IFTRUE 75532
75530: GO 75543
75532: POP
// bc_type := b_siberite_power ; 33 :
75533: LD_ADDR_OWVAR 42
75537: PUSH
75538: LD_INT 28
75540: ST_TO_ADDR
75541: GO 75582
75543: LD_INT 33
75545: DOUBLE
75546: EQUAL
75547: IFTRUE 75551
75549: GO 75562
75551: POP
// bc_type := b_oil_mine ; 34 :
75552: LD_ADDR_OWVAR 42
75556: PUSH
75557: LD_INT 29
75559: ST_TO_ADDR
75560: GO 75582
75562: LD_INT 34
75564: DOUBLE
75565: EQUAL
75566: IFTRUE 75570
75568: GO 75581
75570: POP
// bc_type := b_siberite_mine ; end ;
75571: LD_ADDR_OWVAR 42
75575: PUSH
75576: LD_INT 30
75578: ST_TO_ADDR
75579: GO 75582
75581: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75582: LD_ADDR_VAR 0 8
75586: PUSH
75587: LD_VAR 0 5
75591: PPUSH
75592: LD_VAR 0 6
75596: PPUSH
75597: LD_VAR 0 3
75601: PPUSH
75602: CALL_OW 47
75606: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75607: LD_OWVAR 42
75611: PUSH
75612: LD_INT 32
75614: PUSH
75615: LD_INT 33
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: IN
75622: IFFALSE 75638
// PlaceWeaponTurret ( b , weapon ) ;
75624: LD_VAR 0 8
75628: PPUSH
75629: LD_VAR 0 4
75633: PPUSH
75634: CALL_OW 431
// end ;
75638: LD_VAR 0 7
75642: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75643: LD_INT 0
75645: PPUSH
75646: PPUSH
75647: PPUSH
75648: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75649: LD_ADDR_VAR 0 4
75653: PUSH
75654: LD_INT 22
75656: PUSH
75657: LD_OWVAR 2
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: LD_INT 2
75668: PUSH
75669: LD_INT 30
75671: PUSH
75672: LD_INT 0
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: PUSH
75679: LD_INT 30
75681: PUSH
75682: LD_INT 1
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: LIST
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PPUSH
75698: CALL_OW 69
75702: ST_TO_ADDR
// if not tmp then
75703: LD_VAR 0 4
75707: NOT
75708: IFFALSE 75712
// exit ;
75710: GO 75771
// for i in tmp do
75712: LD_ADDR_VAR 0 2
75716: PUSH
75717: LD_VAR 0 4
75721: PUSH
75722: FOR_IN
75723: IFFALSE 75769
// for j = 1 to 3 do
75725: LD_ADDR_VAR 0 3
75729: PUSH
75730: DOUBLE
75731: LD_INT 1
75733: DEC
75734: ST_TO_ADDR
75735: LD_INT 3
75737: PUSH
75738: FOR_TO
75739: IFFALSE 75765
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75741: LD_VAR 0 2
75745: PPUSH
75746: CALL_OW 274
75750: PPUSH
75751: LD_VAR 0 3
75755: PPUSH
75756: LD_INT 99999
75758: PPUSH
75759: CALL_OW 277
75763: GO 75738
75765: POP
75766: POP
75767: GO 75722
75769: POP
75770: POP
// end ;
75771: LD_VAR 0 1
75775: RET
// export function hHackSetLevel10 ; var i , j ; begin
75776: LD_INT 0
75778: PPUSH
75779: PPUSH
75780: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75781: LD_ADDR_VAR 0 2
75785: PUSH
75786: LD_INT 21
75788: PUSH
75789: LD_INT 1
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PPUSH
75796: CALL_OW 69
75800: PUSH
75801: FOR_IN
75802: IFFALSE 75854
// if IsSelected ( i ) then
75804: LD_VAR 0 2
75808: PPUSH
75809: CALL_OW 306
75813: IFFALSE 75852
// begin for j := 1 to 4 do
75815: LD_ADDR_VAR 0 3
75819: PUSH
75820: DOUBLE
75821: LD_INT 1
75823: DEC
75824: ST_TO_ADDR
75825: LD_INT 4
75827: PUSH
75828: FOR_TO
75829: IFFALSE 75850
// SetSkill ( i , j , 10 ) ;
75831: LD_VAR 0 2
75835: PPUSH
75836: LD_VAR 0 3
75840: PPUSH
75841: LD_INT 10
75843: PPUSH
75844: CALL_OW 237
75848: GO 75828
75850: POP
75851: POP
// end ;
75852: GO 75801
75854: POP
75855: POP
// end ;
75856: LD_VAR 0 1
75860: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75861: LD_INT 0
75863: PPUSH
75864: PPUSH
75865: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75866: LD_ADDR_VAR 0 2
75870: PUSH
75871: LD_INT 22
75873: PUSH
75874: LD_OWVAR 2
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: LD_INT 21
75885: PUSH
75886: LD_INT 1
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PPUSH
75897: CALL_OW 69
75901: PUSH
75902: FOR_IN
75903: IFFALSE 75944
// begin for j := 1 to 4 do
75905: LD_ADDR_VAR 0 3
75909: PUSH
75910: DOUBLE
75911: LD_INT 1
75913: DEC
75914: ST_TO_ADDR
75915: LD_INT 4
75917: PUSH
75918: FOR_TO
75919: IFFALSE 75940
// SetSkill ( i , j , 10 ) ;
75921: LD_VAR 0 2
75925: PPUSH
75926: LD_VAR 0 3
75930: PPUSH
75931: LD_INT 10
75933: PPUSH
75934: CALL_OW 237
75938: GO 75918
75940: POP
75941: POP
// end ;
75942: GO 75902
75944: POP
75945: POP
// end ;
75946: LD_VAR 0 1
75950: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75951: LD_INT 0
75953: PPUSH
// uc_side := your_side ;
75954: LD_ADDR_OWVAR 20
75958: PUSH
75959: LD_OWVAR 2
75963: ST_TO_ADDR
// uc_nation := nation ;
75964: LD_ADDR_OWVAR 21
75968: PUSH
75969: LD_VAR 0 1
75973: ST_TO_ADDR
// InitHc ;
75974: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75978: LD_INT 0
75980: PPUSH
75981: LD_VAR 0 2
75985: PPUSH
75986: LD_VAR 0 3
75990: PPUSH
75991: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75995: LD_VAR 0 4
75999: PPUSH
76000: LD_VAR 0 5
76004: PPUSH
76005: CALL_OW 428
76009: PUSH
76010: LD_INT 0
76012: EQUAL
76013: IFFALSE 76037
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76015: CALL_OW 44
76019: PPUSH
76020: LD_VAR 0 4
76024: PPUSH
76025: LD_VAR 0 5
76029: PPUSH
76030: LD_INT 1
76032: PPUSH
76033: CALL_OW 48
// end ;
76037: LD_VAR 0 6
76041: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76042: LD_INT 0
76044: PPUSH
76045: PPUSH
// uc_side := your_side ;
76046: LD_ADDR_OWVAR 20
76050: PUSH
76051: LD_OWVAR 2
76055: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76056: LD_VAR 0 1
76060: PUSH
76061: LD_INT 1
76063: PUSH
76064: LD_INT 2
76066: PUSH
76067: LD_INT 3
76069: PUSH
76070: LD_INT 4
76072: PUSH
76073: LD_INT 5
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: IN
76083: IFFALSE 76095
// uc_nation := nation_american else
76085: LD_ADDR_OWVAR 21
76089: PUSH
76090: LD_INT 1
76092: ST_TO_ADDR
76093: GO 76138
// if chassis in [ 11 , 12 , 13 , 14 ] then
76095: LD_VAR 0 1
76099: PUSH
76100: LD_INT 11
76102: PUSH
76103: LD_INT 12
76105: PUSH
76106: LD_INT 13
76108: PUSH
76109: LD_INT 14
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: IN
76118: IFFALSE 76130
// uc_nation := nation_arabian else
76120: LD_ADDR_OWVAR 21
76124: PUSH
76125: LD_INT 2
76127: ST_TO_ADDR
76128: GO 76138
// uc_nation := nation_russian ;
76130: LD_ADDR_OWVAR 21
76134: PUSH
76135: LD_INT 3
76137: ST_TO_ADDR
// vc_chassis := chassis ;
76138: LD_ADDR_OWVAR 37
76142: PUSH
76143: LD_VAR 0 1
76147: ST_TO_ADDR
// vc_engine := engine ;
76148: LD_ADDR_OWVAR 39
76152: PUSH
76153: LD_VAR 0 2
76157: ST_TO_ADDR
// vc_control := control ;
76158: LD_ADDR_OWVAR 38
76162: PUSH
76163: LD_VAR 0 3
76167: ST_TO_ADDR
// vc_weapon := weapon ;
76168: LD_ADDR_OWVAR 40
76172: PUSH
76173: LD_VAR 0 4
76177: ST_TO_ADDR
// un := CreateVehicle ;
76178: LD_ADDR_VAR 0 8
76182: PUSH
76183: CALL_OW 45
76187: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76188: LD_VAR 0 8
76192: PPUSH
76193: LD_INT 0
76195: PPUSH
76196: LD_INT 5
76198: PPUSH
76199: CALL_OW 12
76203: PPUSH
76204: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76208: LD_VAR 0 8
76212: PPUSH
76213: LD_VAR 0 5
76217: PPUSH
76218: LD_VAR 0 6
76222: PPUSH
76223: LD_INT 1
76225: PPUSH
76226: CALL_OW 48
// end ;
76230: LD_VAR 0 7
76234: RET
// export hInvincible ; every 1 do
76235: GO 76237
76237: DISABLE
// hInvincible := [ ] ;
76238: LD_ADDR_EXP 103
76242: PUSH
76243: EMPTY
76244: ST_TO_ADDR
76245: END
// every 10 do var i ;
76246: GO 76248
76248: DISABLE
76249: LD_INT 0
76251: PPUSH
// begin enable ;
76252: ENABLE
// if not hInvincible then
76253: LD_EXP 103
76257: NOT
76258: IFFALSE 76262
// exit ;
76260: GO 76306
// for i in hInvincible do
76262: LD_ADDR_VAR 0 1
76266: PUSH
76267: LD_EXP 103
76271: PUSH
76272: FOR_IN
76273: IFFALSE 76304
// if GetLives ( i ) < 1000 then
76275: LD_VAR 0 1
76279: PPUSH
76280: CALL_OW 256
76284: PUSH
76285: LD_INT 1000
76287: LESS
76288: IFFALSE 76302
// SetLives ( i , 1000 ) ;
76290: LD_VAR 0 1
76294: PPUSH
76295: LD_INT 1000
76297: PPUSH
76298: CALL_OW 234
76302: GO 76272
76304: POP
76305: POP
// end ;
76306: PPOPN 1
76308: END
// export function hHackInvincible ; var i ; begin
76309: LD_INT 0
76311: PPUSH
76312: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76313: LD_ADDR_VAR 0 2
76317: PUSH
76318: LD_INT 2
76320: PUSH
76321: LD_INT 21
76323: PUSH
76324: LD_INT 1
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 21
76333: PUSH
76334: LD_INT 2
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: EMPTY
76342: LIST
76343: LIST
76344: LIST
76345: PPUSH
76346: CALL_OW 69
76350: PUSH
76351: FOR_IN
76352: IFFALSE 76413
// if IsSelected ( i ) then
76354: LD_VAR 0 2
76358: PPUSH
76359: CALL_OW 306
76363: IFFALSE 76411
// begin if i in hInvincible then
76365: LD_VAR 0 2
76369: PUSH
76370: LD_EXP 103
76374: IN
76375: IFFALSE 76395
// hInvincible := hInvincible diff i else
76377: LD_ADDR_EXP 103
76381: PUSH
76382: LD_EXP 103
76386: PUSH
76387: LD_VAR 0 2
76391: DIFF
76392: ST_TO_ADDR
76393: GO 76411
// hInvincible := hInvincible union i ;
76395: LD_ADDR_EXP 103
76399: PUSH
76400: LD_EXP 103
76404: PUSH
76405: LD_VAR 0 2
76409: UNION
76410: ST_TO_ADDR
// end ;
76411: GO 76351
76413: POP
76414: POP
// end ;
76415: LD_VAR 0 1
76419: RET
// export function hHackInvisible ; var i , j ; begin
76420: LD_INT 0
76422: PPUSH
76423: PPUSH
76424: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76425: LD_ADDR_VAR 0 2
76429: PUSH
76430: LD_INT 21
76432: PUSH
76433: LD_INT 1
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PPUSH
76440: CALL_OW 69
76444: PUSH
76445: FOR_IN
76446: IFFALSE 76470
// if IsSelected ( i ) then
76448: LD_VAR 0 2
76452: PPUSH
76453: CALL_OW 306
76457: IFFALSE 76468
// ComForceInvisible ( i ) ;
76459: LD_VAR 0 2
76463: PPUSH
76464: CALL_OW 496
76468: GO 76445
76470: POP
76471: POP
// end ;
76472: LD_VAR 0 1
76476: RET
// export function hHackChangeYourSide ; begin
76477: LD_INT 0
76479: PPUSH
// if your_side = 8 then
76480: LD_OWVAR 2
76484: PUSH
76485: LD_INT 8
76487: EQUAL
76488: IFFALSE 76500
// your_side := 0 else
76490: LD_ADDR_OWVAR 2
76494: PUSH
76495: LD_INT 0
76497: ST_TO_ADDR
76498: GO 76514
// your_side := your_side + 1 ;
76500: LD_ADDR_OWVAR 2
76504: PUSH
76505: LD_OWVAR 2
76509: PUSH
76510: LD_INT 1
76512: PLUS
76513: ST_TO_ADDR
// end ;
76514: LD_VAR 0 1
76518: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76519: LD_INT 0
76521: PPUSH
76522: PPUSH
76523: PPUSH
// for i in all_units do
76524: LD_ADDR_VAR 0 2
76528: PUSH
76529: LD_OWVAR 3
76533: PUSH
76534: FOR_IN
76535: IFFALSE 76613
// if IsSelected ( i ) then
76537: LD_VAR 0 2
76541: PPUSH
76542: CALL_OW 306
76546: IFFALSE 76611
// begin j := GetSide ( i ) ;
76548: LD_ADDR_VAR 0 3
76552: PUSH
76553: LD_VAR 0 2
76557: PPUSH
76558: CALL_OW 255
76562: ST_TO_ADDR
// if j = 8 then
76563: LD_VAR 0 3
76567: PUSH
76568: LD_INT 8
76570: EQUAL
76571: IFFALSE 76583
// j := 0 else
76573: LD_ADDR_VAR 0 3
76577: PUSH
76578: LD_INT 0
76580: ST_TO_ADDR
76581: GO 76597
// j := j + 1 ;
76583: LD_ADDR_VAR 0 3
76587: PUSH
76588: LD_VAR 0 3
76592: PUSH
76593: LD_INT 1
76595: PLUS
76596: ST_TO_ADDR
// SetSide ( i , j ) ;
76597: LD_VAR 0 2
76601: PPUSH
76602: LD_VAR 0 3
76606: PPUSH
76607: CALL_OW 235
// end ;
76611: GO 76534
76613: POP
76614: POP
// end ;
76615: LD_VAR 0 1
76619: RET
// export function hHackFog ; begin
76620: LD_INT 0
76622: PPUSH
// FogOff ( true ) ;
76623: LD_INT 1
76625: PPUSH
76626: CALL_OW 344
// end ;
76630: LD_VAR 0 1
76634: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76635: LD_INT 0
76637: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76638: LD_VAR 0 1
76642: PPUSH
76643: LD_VAR 0 2
76647: PPUSH
76648: LD_VAR 0 3
76652: PPUSH
76653: LD_INT 1
76655: PPUSH
76656: LD_INT 1
76658: PPUSH
76659: CALL_OW 483
// CenterOnXY ( x , y ) ;
76663: LD_VAR 0 2
76667: PPUSH
76668: LD_VAR 0 3
76672: PPUSH
76673: CALL_OW 84
// end ;
76677: LD_VAR 0 4
76681: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
76682: LD_INT 0
76684: PPUSH
76685: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
76686: LD_VAR 0 1
76690: NOT
76691: PUSH
76692: LD_VAR 0 2
76696: PPUSH
76697: LD_VAR 0 3
76701: PPUSH
76702: CALL_OW 488
76706: NOT
76707: OR
76708: PUSH
76709: LD_VAR 0 1
76713: PPUSH
76714: CALL_OW 266
76718: PUSH
76719: LD_INT 3
76721: NONEQUAL
76722: PUSH
76723: LD_VAR 0 1
76727: PPUSH
76728: CALL_OW 247
76732: PUSH
76733: LD_INT 1
76735: EQUAL
76736: NOT
76737: AND
76738: OR
76739: IFFALSE 76743
// exit ;
76741: GO 76892
// if GetType ( factory ) = unit_human then
76743: LD_VAR 0 1
76747: PPUSH
76748: CALL_OW 247
76752: PUSH
76753: LD_INT 1
76755: EQUAL
76756: IFFALSE 76773
// factory := IsInUnit ( factory ) ;
76758: LD_ADDR_VAR 0 1
76762: PUSH
76763: LD_VAR 0 1
76767: PPUSH
76768: CALL_OW 310
76772: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
76773: LD_VAR 0 1
76777: PPUSH
76778: CALL_OW 266
76782: PUSH
76783: LD_INT 3
76785: NONEQUAL
76786: IFFALSE 76790
// exit ;
76788: GO 76892
// if HexInfo ( x , y ) = factory then
76790: LD_VAR 0 2
76794: PPUSH
76795: LD_VAR 0 3
76799: PPUSH
76800: CALL_OW 428
76804: PUSH
76805: LD_VAR 0 1
76809: EQUAL
76810: IFFALSE 76837
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
76812: LD_ADDR_EXP 104
76816: PUSH
76817: LD_EXP 104
76821: PPUSH
76822: LD_VAR 0 1
76826: PPUSH
76827: LD_INT 0
76829: PPUSH
76830: CALL_OW 1
76834: ST_TO_ADDR
76835: GO 76888
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
76837: LD_ADDR_EXP 104
76841: PUSH
76842: LD_EXP 104
76846: PPUSH
76847: LD_VAR 0 1
76851: PPUSH
76852: LD_VAR 0 1
76856: PPUSH
76857: CALL_OW 255
76861: PUSH
76862: LD_VAR 0 1
76866: PUSH
76867: LD_VAR 0 2
76871: PUSH
76872: LD_VAR 0 3
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: LIST
76881: LIST
76882: PPUSH
76883: CALL_OW 1
76887: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76888: CALL 76897 0 0
// end ;
76892: LD_VAR 0 4
76896: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76897: LD_INT 0
76899: PPUSH
76900: PPUSH
76901: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76902: LD_STRING resetFactoryWaypoint();
76904: PPUSH
76905: CALL_OW 559
// if factoryWaypoints then
76909: LD_EXP 104
76913: IFFALSE 77039
// begin list := PrepareArray ( factoryWaypoints ) ;
76915: LD_ADDR_VAR 0 3
76919: PUSH
76920: LD_EXP 104
76924: PPUSH
76925: CALL 61668 0 1
76929: ST_TO_ADDR
// for i := 1 to list do
76930: LD_ADDR_VAR 0 2
76934: PUSH
76935: DOUBLE
76936: LD_INT 1
76938: DEC
76939: ST_TO_ADDR
76940: LD_VAR 0 3
76944: PUSH
76945: FOR_TO
76946: IFFALSE 77037
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76948: LD_STRING setFactoryWaypointXY(
76950: PUSH
76951: LD_VAR 0 3
76955: PUSH
76956: LD_VAR 0 2
76960: ARRAY
76961: PUSH
76962: LD_INT 1
76964: ARRAY
76965: STR
76966: PUSH
76967: LD_STRING ,
76969: STR
76970: PUSH
76971: LD_VAR 0 3
76975: PUSH
76976: LD_VAR 0 2
76980: ARRAY
76981: PUSH
76982: LD_INT 2
76984: ARRAY
76985: STR
76986: PUSH
76987: LD_STRING ,
76989: STR
76990: PUSH
76991: LD_VAR 0 3
76995: PUSH
76996: LD_VAR 0 2
77000: ARRAY
77001: PUSH
77002: LD_INT 3
77004: ARRAY
77005: STR
77006: PUSH
77007: LD_STRING ,
77009: STR
77010: PUSH
77011: LD_VAR 0 3
77015: PUSH
77016: LD_VAR 0 2
77020: ARRAY
77021: PUSH
77022: LD_INT 4
77024: ARRAY
77025: STR
77026: PUSH
77027: LD_STRING )
77029: STR
77030: PPUSH
77031: CALL_OW 559
77035: GO 76945
77037: POP
77038: POP
// end ; end ;
77039: LD_VAR 0 1
77043: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
77044: LD_INT 0
77046: PPUSH
// if HexInfo ( x , y ) = warehouse then
77047: LD_VAR 0 2
77051: PPUSH
77052: LD_VAR 0 3
77056: PPUSH
77057: CALL_OW 428
77061: PUSH
77062: LD_VAR 0 1
77066: EQUAL
77067: IFFALSE 77094
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
77069: LD_ADDR_EXP 105
77073: PUSH
77074: LD_EXP 105
77078: PPUSH
77079: LD_VAR 0 1
77083: PPUSH
77084: LD_INT 0
77086: PPUSH
77087: CALL_OW 1
77091: ST_TO_ADDR
77092: GO 77145
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
77094: LD_ADDR_EXP 105
77098: PUSH
77099: LD_EXP 105
77103: PPUSH
77104: LD_VAR 0 1
77108: PPUSH
77109: LD_VAR 0 1
77113: PPUSH
77114: CALL_OW 255
77118: PUSH
77119: LD_VAR 0 1
77123: PUSH
77124: LD_VAR 0 2
77128: PUSH
77129: LD_VAR 0 3
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: LIST
77138: LIST
77139: PPUSH
77140: CALL_OW 1
77144: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
77145: CALL 77154 0 0
// end ;
77149: LD_VAR 0 4
77153: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
77154: LD_INT 0
77156: PPUSH
77157: PPUSH
77158: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
77159: LD_STRING resetWarehouseGatheringPoints();
77161: PPUSH
77162: CALL_OW 559
// if warehouseGatheringPoints then
77166: LD_EXP 105
77170: IFFALSE 77296
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
77172: LD_ADDR_VAR 0 3
77176: PUSH
77177: LD_EXP 105
77181: PPUSH
77182: CALL 61668 0 1
77186: ST_TO_ADDR
// for i := 1 to list do
77187: LD_ADDR_VAR 0 2
77191: PUSH
77192: DOUBLE
77193: LD_INT 1
77195: DEC
77196: ST_TO_ADDR
77197: LD_VAR 0 3
77201: PUSH
77202: FOR_TO
77203: IFFALSE 77294
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77205: LD_STRING setWarehouseGatheringPointXY(
77207: PUSH
77208: LD_VAR 0 3
77212: PUSH
77213: LD_VAR 0 2
77217: ARRAY
77218: PUSH
77219: LD_INT 1
77221: ARRAY
77222: STR
77223: PUSH
77224: LD_STRING ,
77226: STR
77227: PUSH
77228: LD_VAR 0 3
77232: PUSH
77233: LD_VAR 0 2
77237: ARRAY
77238: PUSH
77239: LD_INT 2
77241: ARRAY
77242: STR
77243: PUSH
77244: LD_STRING ,
77246: STR
77247: PUSH
77248: LD_VAR 0 3
77252: PUSH
77253: LD_VAR 0 2
77257: ARRAY
77258: PUSH
77259: LD_INT 3
77261: ARRAY
77262: STR
77263: PUSH
77264: LD_STRING ,
77266: STR
77267: PUSH
77268: LD_VAR 0 3
77272: PUSH
77273: LD_VAR 0 2
77277: ARRAY
77278: PUSH
77279: LD_INT 4
77281: ARRAY
77282: STR
77283: PUSH
77284: LD_STRING )
77286: STR
77287: PPUSH
77288: CALL_OW 559
77292: GO 77202
77294: POP
77295: POP
// end ; end ;
77296: LD_VAR 0 1
77300: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
77301: LD_EXP 105
77305: IFFALSE 77990
77307: GO 77309
77309: DISABLE
77310: LD_INT 0
77312: PPUSH
77313: PPUSH
77314: PPUSH
77315: PPUSH
77316: PPUSH
77317: PPUSH
77318: PPUSH
77319: PPUSH
77320: PPUSH
// begin enable ;
77321: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
77322: LD_ADDR_VAR 0 3
77326: PUSH
77327: LD_EXP 105
77331: PPUSH
77332: CALL 61668 0 1
77336: ST_TO_ADDR
// if not list then
77337: LD_VAR 0 3
77341: NOT
77342: IFFALSE 77346
// exit ;
77344: GO 77990
// for i := 1 to list do
77346: LD_ADDR_VAR 0 1
77350: PUSH
77351: DOUBLE
77352: LD_INT 1
77354: DEC
77355: ST_TO_ADDR
77356: LD_VAR 0 3
77360: PUSH
77361: FOR_TO
77362: IFFALSE 77988
// begin depot := list [ i ] [ 2 ] ;
77364: LD_ADDR_VAR 0 8
77368: PUSH
77369: LD_VAR 0 3
77373: PUSH
77374: LD_VAR 0 1
77378: ARRAY
77379: PUSH
77380: LD_INT 2
77382: ARRAY
77383: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
77384: LD_ADDR_VAR 0 5
77388: PUSH
77389: LD_VAR 0 3
77393: PUSH
77394: LD_VAR 0 1
77398: ARRAY
77399: PUSH
77400: LD_INT 1
77402: ARRAY
77403: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
77404: LD_VAR 0 8
77408: PPUSH
77409: CALL_OW 301
77413: PUSH
77414: LD_VAR 0 5
77418: PUSH
77419: LD_VAR 0 8
77423: PPUSH
77424: CALL_OW 255
77428: NONEQUAL
77429: OR
77430: IFFALSE 77459
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
77432: LD_ADDR_EXP 105
77436: PUSH
77437: LD_EXP 105
77441: PPUSH
77442: LD_VAR 0 8
77446: PPUSH
77447: LD_INT 0
77449: PPUSH
77450: CALL_OW 1
77454: ST_TO_ADDR
// exit ;
77455: POP
77456: POP
77457: GO 77990
// end ; x := list [ i ] [ 3 ] ;
77459: LD_ADDR_VAR 0 6
77463: PUSH
77464: LD_VAR 0 3
77468: PUSH
77469: LD_VAR 0 1
77473: ARRAY
77474: PUSH
77475: LD_INT 3
77477: ARRAY
77478: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
77479: LD_ADDR_VAR 0 7
77483: PUSH
77484: LD_VAR 0 3
77488: PUSH
77489: LD_VAR 0 1
77493: ARRAY
77494: PUSH
77495: LD_INT 4
77497: ARRAY
77498: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
77499: LD_ADDR_VAR 0 9
77503: PUSH
77504: LD_VAR 0 6
77508: PPUSH
77509: LD_VAR 0 7
77513: PPUSH
77514: LD_INT 16
77516: PPUSH
77517: CALL 60256 0 3
77521: ST_TO_ADDR
// if not cratesNearbyPoint then
77522: LD_VAR 0 9
77526: NOT
77527: IFFALSE 77533
// exit ;
77529: POP
77530: POP
77531: GO 77990
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
77533: LD_ADDR_VAR 0 4
77537: PUSH
77538: LD_INT 22
77540: PUSH
77541: LD_VAR 0 5
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: PUSH
77550: LD_INT 3
77552: PUSH
77553: LD_INT 60
77555: PUSH
77556: EMPTY
77557: LIST
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 91
77565: PUSH
77566: LD_VAR 0 8
77570: PUSH
77571: LD_INT 6
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: LIST
77578: PUSH
77579: LD_INT 2
77581: PUSH
77582: LD_INT 25
77584: PUSH
77585: LD_INT 2
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: PUSH
77592: LD_INT 25
77594: PUSH
77595: LD_INT 16
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: LIST
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: PPUSH
77613: CALL_OW 69
77617: PUSH
77618: LD_VAR 0 8
77622: PPUSH
77623: CALL_OW 313
77627: PPUSH
77628: LD_INT 3
77630: PUSH
77631: LD_INT 60
77633: PUSH
77634: EMPTY
77635: LIST
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PUSH
77641: LD_INT 2
77643: PUSH
77644: LD_INT 25
77646: PUSH
77647: LD_INT 2
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 25
77656: PUSH
77657: LD_INT 16
77659: PUSH
77660: EMPTY
77661: LIST
77662: LIST
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: LIST
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PPUSH
77673: CALL_OW 72
77677: UNION
77678: ST_TO_ADDR
// if tmp then
77679: LD_VAR 0 4
77683: IFFALSE 77763
// begin tmp := ShrinkArray ( tmp , 3 ) ;
77685: LD_ADDR_VAR 0 4
77689: PUSH
77690: LD_VAR 0 4
77694: PPUSH
77695: LD_INT 3
77697: PPUSH
77698: CALL 58225 0 2
77702: ST_TO_ADDR
// for j in tmp do
77703: LD_ADDR_VAR 0 2
77707: PUSH
77708: LD_VAR 0 4
77712: PUSH
77713: FOR_IN
77714: IFFALSE 77757
// begin if IsInUnit ( j ) then
77716: LD_VAR 0 2
77720: PPUSH
77721: CALL_OW 310
77725: IFFALSE 77736
// ComExit ( j ) ;
77727: LD_VAR 0 2
77731: PPUSH
77732: CALL 58308 0 1
// AddComCollect ( j , x , y ) ;
77736: LD_VAR 0 2
77740: PPUSH
77741: LD_VAR 0 6
77745: PPUSH
77746: LD_VAR 0 7
77750: PPUSH
77751: CALL_OW 177
// end ;
77755: GO 77713
77757: POP
77758: POP
// exit ;
77759: POP
77760: POP
77761: GO 77990
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77763: LD_ADDR_VAR 0 4
77767: PUSH
77768: LD_INT 22
77770: PUSH
77771: LD_VAR 0 5
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 91
77782: PUSH
77783: LD_VAR 0 8
77787: PUSH
77788: LD_INT 8
77790: PUSH
77791: EMPTY
77792: LIST
77793: LIST
77794: LIST
77795: PUSH
77796: LD_INT 2
77798: PUSH
77799: LD_INT 34
77801: PUSH
77802: LD_INT 12
77804: PUSH
77805: EMPTY
77806: LIST
77807: LIST
77808: PUSH
77809: LD_INT 34
77811: PUSH
77812: LD_INT 51
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PUSH
77819: LD_INT 34
77821: PUSH
77822: LD_INT 32
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PUSH
77829: LD_INT 34
77831: PUSH
77832: LD_INT 89
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: LIST
77850: PPUSH
77851: CALL_OW 69
77855: ST_TO_ADDR
// if tmp then
77856: LD_VAR 0 4
77860: IFFALSE 77986
// begin for j in tmp do
77862: LD_ADDR_VAR 0 2
77866: PUSH
77867: LD_VAR 0 4
77871: PUSH
77872: FOR_IN
77873: IFFALSE 77984
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77875: LD_VAR 0 2
77879: PPUSH
77880: CALL_OW 262
77884: PUSH
77885: LD_INT 3
77887: EQUAL
77888: PUSH
77889: LD_VAR 0 2
77893: PPUSH
77894: CALL_OW 261
77898: PUSH
77899: LD_INT 20
77901: GREATER
77902: OR
77903: PUSH
77904: LD_VAR 0 2
77908: PPUSH
77909: CALL_OW 314
77913: NOT
77914: AND
77915: PUSH
77916: LD_VAR 0 2
77920: PPUSH
77921: CALL_OW 263
77925: PUSH
77926: LD_INT 1
77928: NONEQUAL
77929: PUSH
77930: LD_VAR 0 2
77934: PPUSH
77935: CALL_OW 311
77939: OR
77940: AND
77941: IFFALSE 77982
// begin ComCollect ( j , x , y ) ;
77943: LD_VAR 0 2
77947: PPUSH
77948: LD_VAR 0 6
77952: PPUSH
77953: LD_VAR 0 7
77957: PPUSH
77958: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77962: LD_VAR 0 2
77966: PPUSH
77967: LD_VAR 0 8
77971: PPUSH
77972: CALL_OW 172
// exit ;
77976: POP
77977: POP
77978: POP
77979: POP
77980: GO 77990
// end ;
77982: GO 77872
77984: POP
77985: POP
// end ; end ;
77986: GO 77361
77988: POP
77989: POP
// end ; end_of_file
77990: PPOPN 9
77992: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77993: LD_VAR 0 1
77997: PUSH
77998: LD_INT 200
78000: DOUBLE
78001: GREATEREQUAL
78002: IFFALSE 78010
78004: LD_INT 299
78006: DOUBLE
78007: LESSEQUAL
78008: IFTRUE 78012
78010: GO 78044
78012: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78013: LD_VAR 0 1
78017: PPUSH
78018: LD_VAR 0 2
78022: PPUSH
78023: LD_VAR 0 3
78027: PPUSH
78028: LD_VAR 0 4
78032: PPUSH
78033: LD_VAR 0 5
78037: PPUSH
78038: CALL 78532 0 5
78042: GO 78121
78044: LD_INT 300
78046: DOUBLE
78047: GREATEREQUAL
78048: IFFALSE 78056
78050: LD_INT 399
78052: DOUBLE
78053: LESSEQUAL
78054: IFTRUE 78058
78056: GO 78120
78058: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78059: LD_VAR 0 1
78063: PPUSH
78064: LD_VAR 0 2
78068: PPUSH
78069: LD_VAR 0 3
78073: PPUSH
78074: LD_VAR 0 4
78078: PPUSH
78079: LD_VAR 0 5
78083: PPUSH
78084: LD_VAR 0 6
78088: PPUSH
78089: LD_VAR 0 7
78093: PPUSH
78094: LD_VAR 0 8
78098: PPUSH
78099: LD_VAR 0 9
78103: PPUSH
78104: LD_VAR 0 10
78108: PPUSH
78109: LD_VAR 0 11
78113: PPUSH
78114: CALL 74694 0 11
78118: GO 78121
78120: POP
// end ;
78121: PPOPN 11
78123: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78124: LD_VAR 0 1
78128: PPUSH
78129: LD_VAR 0 2
78133: PPUSH
78134: LD_VAR 0 3
78138: PPUSH
78139: LD_VAR 0 4
78143: PPUSH
78144: LD_VAR 0 5
78148: PPUSH
78149: CALL 78268 0 5
// end ; end_of_file
78153: PPOPN 5
78155: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78156: LD_INT 0
78158: PPUSH
78159: PPUSH
78160: PPUSH
78161: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78162: LD_VAR 0 1
78166: PPUSH
78167: CALL_OW 264
78171: PUSH
78172: LD_INT 91
78174: EQUAL
78175: IFFALSE 78247
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78177: LD_INT 68
78179: PPUSH
78180: LD_VAR 0 1
78184: PPUSH
78185: CALL_OW 255
78189: PPUSH
78190: CALL_OW 321
78194: PUSH
78195: LD_INT 2
78197: EQUAL
78198: IFFALSE 78210
// eff := 70 else
78200: LD_ADDR_VAR 0 4
78204: PUSH
78205: LD_INT 70
78207: ST_TO_ADDR
78208: GO 78218
// eff := 30 ;
78210: LD_ADDR_VAR 0 4
78214: PUSH
78215: LD_INT 30
78217: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78218: LD_VAR 0 1
78222: PPUSH
78223: CALL_OW 250
78227: PPUSH
78228: LD_VAR 0 1
78232: PPUSH
78233: CALL_OW 251
78237: PPUSH
78238: LD_VAR 0 4
78242: PPUSH
78243: CALL_OW 495
// end ; end ;
78247: LD_VAR 0 2
78251: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78252: LD_INT 0
78254: PPUSH
// end ;
78255: LD_VAR 0 4
78259: RET
// export function SOS_Command ( cmd ) ; begin
78260: LD_INT 0
78262: PPUSH
// end ;
78263: LD_VAR 0 2
78267: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
78268: LD_INT 0
78270: PPUSH
// end ;
78271: LD_VAR 0 6
78275: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
78276: LD_INT 0
78278: PPUSH
78279: PPUSH
// if not vehicle or not factory then
78280: LD_VAR 0 1
78284: NOT
78285: PUSH
78286: LD_VAR 0 2
78290: NOT
78291: OR
78292: IFFALSE 78296
// exit ;
78294: GO 78527
// if factoryWaypoints >= factory then
78296: LD_EXP 104
78300: PUSH
78301: LD_VAR 0 2
78305: GREATEREQUAL
78306: IFFALSE 78527
// if factoryWaypoints [ factory ] then
78308: LD_EXP 104
78312: PUSH
78313: LD_VAR 0 2
78317: ARRAY
78318: IFFALSE 78527
// begin if GetControl ( vehicle ) = control_manual then
78320: LD_VAR 0 1
78324: PPUSH
78325: CALL_OW 263
78329: PUSH
78330: LD_INT 1
78332: EQUAL
78333: IFFALSE 78414
// begin driver := IsDrivenBy ( vehicle ) ;
78335: LD_ADDR_VAR 0 4
78339: PUSH
78340: LD_VAR 0 1
78344: PPUSH
78345: CALL_OW 311
78349: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78350: LD_VAR 0 4
78354: PPUSH
78355: LD_EXP 104
78359: PUSH
78360: LD_VAR 0 2
78364: ARRAY
78365: PUSH
78366: LD_INT 3
78368: ARRAY
78369: PPUSH
78370: LD_EXP 104
78374: PUSH
78375: LD_VAR 0 2
78379: ARRAY
78380: PUSH
78381: LD_INT 4
78383: ARRAY
78384: PPUSH
78385: CALL_OW 171
// AddComExitVehicle ( driver ) ;
78389: LD_VAR 0 4
78393: PPUSH
78394: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
78398: LD_VAR 0 4
78402: PPUSH
78403: LD_VAR 0 2
78407: PPUSH
78408: CALL_OW 180
// end else
78412: GO 78527
// if GetControl ( vehicle ) = control_remote then
78414: LD_VAR 0 1
78418: PPUSH
78419: CALL_OW 263
78423: PUSH
78424: LD_INT 2
78426: EQUAL
78427: IFFALSE 78488
// begin wait ( 0 0$2 ) ;
78429: LD_INT 70
78431: PPUSH
78432: CALL_OW 67
// if Connect ( vehicle ) then
78436: LD_VAR 0 1
78440: PPUSH
78441: CALL 28516 0 1
78445: IFFALSE 78486
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78447: LD_VAR 0 1
78451: PPUSH
78452: LD_EXP 104
78456: PUSH
78457: LD_VAR 0 2
78461: ARRAY
78462: PUSH
78463: LD_INT 3
78465: ARRAY
78466: PPUSH
78467: LD_EXP 104
78471: PUSH
78472: LD_VAR 0 2
78476: ARRAY
78477: PUSH
78478: LD_INT 4
78480: ARRAY
78481: PPUSH
78482: CALL_OW 171
// end else
78486: GO 78527
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78488: LD_VAR 0 1
78492: PPUSH
78493: LD_EXP 104
78497: PUSH
78498: LD_VAR 0 2
78502: ARRAY
78503: PUSH
78504: LD_INT 3
78506: ARRAY
78507: PPUSH
78508: LD_EXP 104
78512: PUSH
78513: LD_VAR 0 2
78517: ARRAY
78518: PUSH
78519: LD_INT 4
78521: ARRAY
78522: PPUSH
78523: CALL_OW 171
// end ; end ;
78527: LD_VAR 0 3
78531: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78532: LD_INT 0
78534: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78535: LD_VAR 0 1
78539: PUSH
78540: LD_INT 250
78542: EQUAL
78543: PUSH
78544: LD_VAR 0 2
78548: PPUSH
78549: CALL_OW 264
78553: PUSH
78554: LD_INT 81
78556: EQUAL
78557: AND
78558: IFFALSE 78579
// MinerPlaceMine ( unit , x , y ) ;
78560: LD_VAR 0 2
78564: PPUSH
78565: LD_VAR 0 4
78569: PPUSH
78570: LD_VAR 0 5
78574: PPUSH
78575: CALL 81403 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78579: LD_VAR 0 1
78583: PUSH
78584: LD_INT 251
78586: EQUAL
78587: PUSH
78588: LD_VAR 0 2
78592: PPUSH
78593: CALL_OW 264
78597: PUSH
78598: LD_INT 81
78600: EQUAL
78601: AND
78602: IFFALSE 78623
// MinerDetonateMine ( unit , x , y ) ;
78604: LD_VAR 0 2
78608: PPUSH
78609: LD_VAR 0 4
78613: PPUSH
78614: LD_VAR 0 5
78618: PPUSH
78619: CALL 81678 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78623: LD_VAR 0 1
78627: PUSH
78628: LD_INT 252
78630: EQUAL
78631: PUSH
78632: LD_VAR 0 2
78636: PPUSH
78637: CALL_OW 264
78641: PUSH
78642: LD_INT 81
78644: EQUAL
78645: AND
78646: IFFALSE 78667
// MinerCreateMinefield ( unit , x , y ) ;
78648: LD_VAR 0 2
78652: PPUSH
78653: LD_VAR 0 4
78657: PPUSH
78658: LD_VAR 0 5
78662: PPUSH
78663: CALL 82095 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78667: LD_VAR 0 1
78671: PUSH
78672: LD_INT 253
78674: EQUAL
78675: PUSH
78676: LD_VAR 0 2
78680: PPUSH
78681: CALL_OW 257
78685: PUSH
78686: LD_INT 5
78688: EQUAL
78689: AND
78690: IFFALSE 78711
// ComBinocular ( unit , x , y ) ;
78692: LD_VAR 0 2
78696: PPUSH
78697: LD_VAR 0 4
78701: PPUSH
78702: LD_VAR 0 5
78706: PPUSH
78707: CALL 82464 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78711: LD_VAR 0 1
78715: PUSH
78716: LD_INT 254
78718: EQUAL
78719: PUSH
78720: LD_VAR 0 2
78724: PPUSH
78725: CALL_OW 264
78729: PUSH
78730: LD_INT 99
78732: EQUAL
78733: AND
78734: PUSH
78735: LD_VAR 0 3
78739: PPUSH
78740: CALL_OW 263
78744: PUSH
78745: LD_INT 3
78747: EQUAL
78748: AND
78749: IFFALSE 78765
// HackDestroyVehicle ( unit , selectedUnit ) ;
78751: LD_VAR 0 2
78755: PPUSH
78756: LD_VAR 0 3
78760: PPUSH
78761: CALL 80767 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78765: LD_VAR 0 1
78769: PUSH
78770: LD_INT 255
78772: EQUAL
78773: PUSH
78774: LD_VAR 0 2
78778: PPUSH
78779: CALL_OW 264
78783: PUSH
78784: LD_INT 14
78786: PUSH
78787: LD_INT 53
78789: PUSH
78790: EMPTY
78791: LIST
78792: LIST
78793: IN
78794: AND
78795: PUSH
78796: LD_VAR 0 4
78800: PPUSH
78801: LD_VAR 0 5
78805: PPUSH
78806: CALL_OW 488
78810: AND
78811: IFFALSE 78835
// CutTreeXYR ( unit , x , y , 12 ) ;
78813: LD_VAR 0 2
78817: PPUSH
78818: LD_VAR 0 4
78822: PPUSH
78823: LD_VAR 0 5
78827: PPUSH
78828: LD_INT 12
78830: PPUSH
78831: CALL 78930 0 4
// if cmd = 256 then
78835: LD_VAR 0 1
78839: PUSH
78840: LD_INT 256
78842: EQUAL
78843: IFFALSE 78864
// SetFactoryWaypoint ( unit , x , y ) ;
78845: LD_VAR 0 2
78849: PPUSH
78850: LD_VAR 0 4
78854: PPUSH
78855: LD_VAR 0 5
78859: PPUSH
78860: CALL 76682 0 3
// if cmd = 257 then
78864: LD_VAR 0 1
78868: PUSH
78869: LD_INT 257
78871: EQUAL
78872: IFFALSE 78893
// SetWarehouseGatheringPoint ( unit , x , y ) ;
78874: LD_VAR 0 2
78878: PPUSH
78879: LD_VAR 0 4
78883: PPUSH
78884: LD_VAR 0 5
78888: PPUSH
78889: CALL 77044 0 3
// if cmd = 258 then
78893: LD_VAR 0 1
78897: PUSH
78898: LD_INT 258
78900: EQUAL
78901: IFFALSE 78925
// BurnTreeXYR ( unit , x , y , 8 ) ;
78903: LD_VAR 0 2
78907: PPUSH
78908: LD_VAR 0 4
78912: PPUSH
78913: LD_VAR 0 5
78917: PPUSH
78918: LD_INT 8
78920: PPUSH
78921: CALL 79324 0 4
// end ;
78925: LD_VAR 0 6
78929: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78930: LD_INT 0
78932: PPUSH
78933: PPUSH
78934: PPUSH
78935: PPUSH
78936: PPUSH
78937: PPUSH
78938: PPUSH
78939: PPUSH
78940: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
78941: LD_VAR 0 1
78945: PPUSH
78946: CALL_OW 302
78950: NOT
78951: PUSH
78952: LD_VAR 0 2
78956: PPUSH
78957: LD_VAR 0 3
78961: PPUSH
78962: CALL_OW 488
78966: NOT
78967: OR
78968: PUSH
78969: LD_VAR 0 4
78973: NOT
78974: OR
78975: IFFALSE 78979
// exit ;
78977: GO 79319
// list := [ ] ;
78979: LD_ADDR_VAR 0 13
78983: PUSH
78984: EMPTY
78985: ST_TO_ADDR
// if x - r < 0 then
78986: LD_VAR 0 2
78990: PUSH
78991: LD_VAR 0 4
78995: MINUS
78996: PUSH
78997: LD_INT 0
78999: LESS
79000: IFFALSE 79012
// min_x := 0 else
79002: LD_ADDR_VAR 0 7
79006: PUSH
79007: LD_INT 0
79009: ST_TO_ADDR
79010: GO 79028
// min_x := x - r ;
79012: LD_ADDR_VAR 0 7
79016: PUSH
79017: LD_VAR 0 2
79021: PUSH
79022: LD_VAR 0 4
79026: MINUS
79027: ST_TO_ADDR
// if y - r < 0 then
79028: LD_VAR 0 3
79032: PUSH
79033: LD_VAR 0 4
79037: MINUS
79038: PUSH
79039: LD_INT 0
79041: LESS
79042: IFFALSE 79054
// min_y := 0 else
79044: LD_ADDR_VAR 0 8
79048: PUSH
79049: LD_INT 0
79051: ST_TO_ADDR
79052: GO 79070
// min_y := y - r ;
79054: LD_ADDR_VAR 0 8
79058: PUSH
79059: LD_VAR 0 3
79063: PUSH
79064: LD_VAR 0 4
79068: MINUS
79069: ST_TO_ADDR
// max_x := x + r ;
79070: LD_ADDR_VAR 0 9
79074: PUSH
79075: LD_VAR 0 2
79079: PUSH
79080: LD_VAR 0 4
79084: PLUS
79085: ST_TO_ADDR
// max_y := y + r ;
79086: LD_ADDR_VAR 0 10
79090: PUSH
79091: LD_VAR 0 3
79095: PUSH
79096: LD_VAR 0 4
79100: PLUS
79101: ST_TO_ADDR
// for _x = min_x to max_x do
79102: LD_ADDR_VAR 0 11
79106: PUSH
79107: DOUBLE
79108: LD_VAR 0 7
79112: DEC
79113: ST_TO_ADDR
79114: LD_VAR 0 9
79118: PUSH
79119: FOR_TO
79120: IFFALSE 79237
// for _y = min_y to max_y do
79122: LD_ADDR_VAR 0 12
79126: PUSH
79127: DOUBLE
79128: LD_VAR 0 8
79132: DEC
79133: ST_TO_ADDR
79134: LD_VAR 0 10
79138: PUSH
79139: FOR_TO
79140: IFFALSE 79233
// begin if not ValidHex ( _x , _y ) then
79142: LD_VAR 0 11
79146: PPUSH
79147: LD_VAR 0 12
79151: PPUSH
79152: CALL_OW 488
79156: NOT
79157: IFFALSE 79161
// continue ;
79159: GO 79139
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79161: LD_VAR 0 11
79165: PPUSH
79166: LD_VAR 0 12
79170: PPUSH
79171: CALL_OW 351
79175: PUSH
79176: LD_VAR 0 11
79180: PPUSH
79181: LD_VAR 0 12
79185: PPUSH
79186: CALL_OW 554
79190: AND
79191: IFFALSE 79231
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79193: LD_ADDR_VAR 0 13
79197: PUSH
79198: LD_VAR 0 13
79202: PPUSH
79203: LD_VAR 0 13
79207: PUSH
79208: LD_INT 1
79210: PLUS
79211: PPUSH
79212: LD_VAR 0 11
79216: PUSH
79217: LD_VAR 0 12
79221: PUSH
79222: EMPTY
79223: LIST
79224: LIST
79225: PPUSH
79226: CALL_OW 2
79230: ST_TO_ADDR
// end ;
79231: GO 79139
79233: POP
79234: POP
79235: GO 79119
79237: POP
79238: POP
// if not list then
79239: LD_VAR 0 13
79243: NOT
79244: IFFALSE 79248
// exit ;
79246: GO 79319
// for i in list do
79248: LD_ADDR_VAR 0 6
79252: PUSH
79253: LD_VAR 0 13
79257: PUSH
79258: FOR_IN
79259: IFFALSE 79317
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79261: LD_VAR 0 1
79265: PPUSH
79266: LD_STRING M
79268: PUSH
79269: LD_VAR 0 6
79273: PUSH
79274: LD_INT 1
79276: ARRAY
79277: PUSH
79278: LD_VAR 0 6
79282: PUSH
79283: LD_INT 2
79285: ARRAY
79286: PUSH
79287: LD_INT 0
79289: PUSH
79290: LD_INT 0
79292: PUSH
79293: LD_INT 0
79295: PUSH
79296: LD_INT 0
79298: PUSH
79299: EMPTY
79300: LIST
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: PUSH
79308: EMPTY
79309: LIST
79310: PPUSH
79311: CALL_OW 447
79315: GO 79258
79317: POP
79318: POP
// end ;
79319: LD_VAR 0 5
79323: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79324: LD_INT 0
79326: PPUSH
79327: PPUSH
79328: PPUSH
79329: PPUSH
79330: PPUSH
79331: PPUSH
79332: PPUSH
79333: PPUSH
79334: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
79335: LD_VAR 0 1
79339: PPUSH
79340: CALL_OW 302
79344: NOT
79345: PUSH
79346: LD_VAR 0 2
79350: PPUSH
79351: LD_VAR 0 3
79355: PPUSH
79356: CALL_OW 488
79360: NOT
79361: OR
79362: PUSH
79363: LD_VAR 0 4
79367: NOT
79368: OR
79369: IFFALSE 79373
// exit ;
79371: GO 79721
// list := [ ] ;
79373: LD_ADDR_VAR 0 13
79377: PUSH
79378: EMPTY
79379: ST_TO_ADDR
// if x - r < 0 then
79380: LD_VAR 0 2
79384: PUSH
79385: LD_VAR 0 4
79389: MINUS
79390: PUSH
79391: LD_INT 0
79393: LESS
79394: IFFALSE 79406
// min_x := 0 else
79396: LD_ADDR_VAR 0 7
79400: PUSH
79401: LD_INT 0
79403: ST_TO_ADDR
79404: GO 79422
// min_x := x - r ;
79406: LD_ADDR_VAR 0 7
79410: PUSH
79411: LD_VAR 0 2
79415: PUSH
79416: LD_VAR 0 4
79420: MINUS
79421: ST_TO_ADDR
// if y - r < 0 then
79422: LD_VAR 0 3
79426: PUSH
79427: LD_VAR 0 4
79431: MINUS
79432: PUSH
79433: LD_INT 0
79435: LESS
79436: IFFALSE 79448
// min_y := 0 else
79438: LD_ADDR_VAR 0 8
79442: PUSH
79443: LD_INT 0
79445: ST_TO_ADDR
79446: GO 79464
// min_y := y - r ;
79448: LD_ADDR_VAR 0 8
79452: PUSH
79453: LD_VAR 0 3
79457: PUSH
79458: LD_VAR 0 4
79462: MINUS
79463: ST_TO_ADDR
// max_x := x + r ;
79464: LD_ADDR_VAR 0 9
79468: PUSH
79469: LD_VAR 0 2
79473: PUSH
79474: LD_VAR 0 4
79478: PLUS
79479: ST_TO_ADDR
// max_y := y + r ;
79480: LD_ADDR_VAR 0 10
79484: PUSH
79485: LD_VAR 0 3
79489: PUSH
79490: LD_VAR 0 4
79494: PLUS
79495: ST_TO_ADDR
// for _x = min_x to max_x do
79496: LD_ADDR_VAR 0 11
79500: PUSH
79501: DOUBLE
79502: LD_VAR 0 7
79506: DEC
79507: ST_TO_ADDR
79508: LD_VAR 0 9
79512: PUSH
79513: FOR_TO
79514: IFFALSE 79631
// for _y = min_y to max_y do
79516: LD_ADDR_VAR 0 12
79520: PUSH
79521: DOUBLE
79522: LD_VAR 0 8
79526: DEC
79527: ST_TO_ADDR
79528: LD_VAR 0 10
79532: PUSH
79533: FOR_TO
79534: IFFALSE 79627
// begin if not ValidHex ( _x , _y ) then
79536: LD_VAR 0 11
79540: PPUSH
79541: LD_VAR 0 12
79545: PPUSH
79546: CALL_OW 488
79550: NOT
79551: IFFALSE 79555
// continue ;
79553: GO 79533
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79555: LD_VAR 0 11
79559: PPUSH
79560: LD_VAR 0 12
79564: PPUSH
79565: CALL_OW 351
79569: PUSH
79570: LD_VAR 0 11
79574: PPUSH
79575: LD_VAR 0 12
79579: PPUSH
79580: CALL_OW 554
79584: AND
79585: IFFALSE 79625
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79587: LD_ADDR_VAR 0 13
79591: PUSH
79592: LD_VAR 0 13
79596: PPUSH
79597: LD_VAR 0 13
79601: PUSH
79602: LD_INT 1
79604: PLUS
79605: PPUSH
79606: LD_VAR 0 11
79610: PUSH
79611: LD_VAR 0 12
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: PPUSH
79620: CALL_OW 2
79624: ST_TO_ADDR
// end ;
79625: GO 79533
79627: POP
79628: POP
79629: GO 79513
79631: POP
79632: POP
// if not list then
79633: LD_VAR 0 13
79637: NOT
79638: IFFALSE 79642
// exit ;
79640: GO 79721
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
79642: LD_ADDR_VAR 0 13
79646: PUSH
79647: LD_VAR 0 1
79651: PPUSH
79652: LD_VAR 0 13
79656: PPUSH
79657: LD_INT 1
79659: PPUSH
79660: LD_INT 1
79662: PPUSH
79663: CALL 25658 0 4
79667: ST_TO_ADDR
// ComStop ( flame ) ;
79668: LD_VAR 0 1
79672: PPUSH
79673: CALL_OW 141
// for i in list do
79677: LD_ADDR_VAR 0 6
79681: PUSH
79682: LD_VAR 0 13
79686: PUSH
79687: FOR_IN
79688: IFFALSE 79719
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
79690: LD_VAR 0 1
79694: PPUSH
79695: LD_VAR 0 6
79699: PUSH
79700: LD_INT 1
79702: ARRAY
79703: PPUSH
79704: LD_VAR 0 6
79708: PUSH
79709: LD_INT 2
79711: ARRAY
79712: PPUSH
79713: CALL_OW 176
79717: GO 79687
79719: POP
79720: POP
// end ;
79721: LD_VAR 0 5
79725: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79726: LD_EXP 107
79730: NOT
79731: IFFALSE 79781
79733: GO 79735
79735: DISABLE
// begin initHack := true ;
79736: LD_ADDR_EXP 107
79740: PUSH
79741: LD_INT 1
79743: ST_TO_ADDR
// hackTanks := [ ] ;
79744: LD_ADDR_EXP 108
79748: PUSH
79749: EMPTY
79750: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79751: LD_ADDR_EXP 109
79755: PUSH
79756: EMPTY
79757: ST_TO_ADDR
// hackLimit := 3 ;
79758: LD_ADDR_EXP 110
79762: PUSH
79763: LD_INT 3
79765: ST_TO_ADDR
// hackDist := 12 ;
79766: LD_ADDR_EXP 111
79770: PUSH
79771: LD_INT 12
79773: ST_TO_ADDR
// hackCounter := [ ] ;
79774: LD_ADDR_EXP 112
79778: PUSH
79779: EMPTY
79780: ST_TO_ADDR
// end ;
79781: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79782: LD_EXP 107
79786: PUSH
79787: LD_INT 34
79789: PUSH
79790: LD_INT 99
79792: PUSH
79793: EMPTY
79794: LIST
79795: LIST
79796: PPUSH
79797: CALL_OW 69
79801: AND
79802: IFFALSE 80055
79804: GO 79806
79806: DISABLE
79807: LD_INT 0
79809: PPUSH
79810: PPUSH
// begin enable ;
79811: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79812: LD_ADDR_VAR 0 1
79816: PUSH
79817: LD_INT 34
79819: PUSH
79820: LD_INT 99
79822: PUSH
79823: EMPTY
79824: LIST
79825: LIST
79826: PPUSH
79827: CALL_OW 69
79831: PUSH
79832: FOR_IN
79833: IFFALSE 80053
// begin if not i in hackTanks then
79835: LD_VAR 0 1
79839: PUSH
79840: LD_EXP 108
79844: IN
79845: NOT
79846: IFFALSE 79929
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79848: LD_ADDR_EXP 108
79852: PUSH
79853: LD_EXP 108
79857: PPUSH
79858: LD_EXP 108
79862: PUSH
79863: LD_INT 1
79865: PLUS
79866: PPUSH
79867: LD_VAR 0 1
79871: PPUSH
79872: CALL_OW 1
79876: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79877: LD_ADDR_EXP 109
79881: PUSH
79882: LD_EXP 109
79886: PPUSH
79887: LD_EXP 109
79891: PUSH
79892: LD_INT 1
79894: PLUS
79895: PPUSH
79896: EMPTY
79897: PPUSH
79898: CALL_OW 1
79902: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79903: LD_ADDR_EXP 112
79907: PUSH
79908: LD_EXP 112
79912: PPUSH
79913: LD_EXP 112
79917: PUSH
79918: LD_INT 1
79920: PLUS
79921: PPUSH
79922: EMPTY
79923: PPUSH
79924: CALL_OW 1
79928: ST_TO_ADDR
// end ; if not IsOk ( i ) then
79929: LD_VAR 0 1
79933: PPUSH
79934: CALL_OW 302
79938: NOT
79939: IFFALSE 79952
// begin HackUnlinkAll ( i ) ;
79941: LD_VAR 0 1
79945: PPUSH
79946: CALL 80058 0 1
// continue ;
79950: GO 79832
// end ; HackCheckCapturedStatus ( i ) ;
79952: LD_VAR 0 1
79956: PPUSH
79957: CALL 80501 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
79961: LD_ADDR_VAR 0 2
79965: PUSH
79966: LD_INT 81
79968: PUSH
79969: LD_VAR 0 1
79973: PPUSH
79974: CALL_OW 255
79978: PUSH
79979: EMPTY
79980: LIST
79981: LIST
79982: PUSH
79983: LD_INT 33
79985: PUSH
79986: LD_INT 3
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: PUSH
79993: LD_INT 91
79995: PUSH
79996: LD_VAR 0 1
80000: PUSH
80001: LD_EXP 111
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: LIST
80010: PUSH
80011: LD_INT 50
80013: PUSH
80014: EMPTY
80015: LIST
80016: PUSH
80017: EMPTY
80018: LIST
80019: LIST
80020: LIST
80021: LIST
80022: PPUSH
80023: CALL_OW 69
80027: ST_TO_ADDR
// if not tmp then
80028: LD_VAR 0 2
80032: NOT
80033: IFFALSE 80037
// continue ;
80035: GO 79832
// HackLink ( i , tmp ) ;
80037: LD_VAR 0 1
80041: PPUSH
80042: LD_VAR 0 2
80046: PPUSH
80047: CALL 80194 0 2
// end ;
80051: GO 79832
80053: POP
80054: POP
// end ;
80055: PPOPN 2
80057: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
80058: LD_INT 0
80060: PPUSH
80061: PPUSH
80062: PPUSH
// if not hack in hackTanks then
80063: LD_VAR 0 1
80067: PUSH
80068: LD_EXP 108
80072: IN
80073: NOT
80074: IFFALSE 80078
// exit ;
80076: GO 80189
// index := GetElementIndex ( hackTanks , hack ) ;
80078: LD_ADDR_VAR 0 4
80082: PUSH
80083: LD_EXP 108
80087: PPUSH
80088: LD_VAR 0 1
80092: PPUSH
80093: CALL 24955 0 2
80097: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80098: LD_EXP 109
80102: PUSH
80103: LD_VAR 0 4
80107: ARRAY
80108: IFFALSE 80189
// begin for i in hackTanksCaptured [ index ] do
80110: LD_ADDR_VAR 0 3
80114: PUSH
80115: LD_EXP 109
80119: PUSH
80120: LD_VAR 0 4
80124: ARRAY
80125: PUSH
80126: FOR_IN
80127: IFFALSE 80153
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80129: LD_VAR 0 3
80133: PUSH
80134: LD_INT 1
80136: ARRAY
80137: PPUSH
80138: LD_VAR 0 3
80142: PUSH
80143: LD_INT 2
80145: ARRAY
80146: PPUSH
80147: CALL_OW 235
80151: GO 80126
80153: POP
80154: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80155: LD_ADDR_EXP 109
80159: PUSH
80160: LD_EXP 109
80164: PPUSH
80165: LD_VAR 0 4
80169: PPUSH
80170: EMPTY
80171: PPUSH
80172: CALL_OW 1
80176: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80177: LD_VAR 0 1
80181: PPUSH
80182: LD_INT 0
80184: PPUSH
80185: CALL_OW 505
// end ; end ;
80189: LD_VAR 0 2
80193: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80194: LD_INT 0
80196: PPUSH
80197: PPUSH
80198: PPUSH
// if not hack in hackTanks or not vehicles then
80199: LD_VAR 0 1
80203: PUSH
80204: LD_EXP 108
80208: IN
80209: NOT
80210: PUSH
80211: LD_VAR 0 2
80215: NOT
80216: OR
80217: IFFALSE 80221
// exit ;
80219: GO 80496
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80221: LD_ADDR_VAR 0 2
80225: PUSH
80226: LD_VAR 0 1
80230: PPUSH
80231: LD_VAR 0 2
80235: PPUSH
80236: LD_INT 1
80238: PPUSH
80239: LD_INT 1
80241: PPUSH
80242: CALL 25605 0 4
80246: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80247: LD_ADDR_VAR 0 5
80251: PUSH
80252: LD_EXP 108
80256: PPUSH
80257: LD_VAR 0 1
80261: PPUSH
80262: CALL 24955 0 2
80266: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80267: LD_EXP 109
80271: PUSH
80272: LD_VAR 0 5
80276: ARRAY
80277: PUSH
80278: LD_EXP 110
80282: LESS
80283: IFFALSE 80472
// begin for i := 1 to vehicles do
80285: LD_ADDR_VAR 0 4
80289: PUSH
80290: DOUBLE
80291: LD_INT 1
80293: DEC
80294: ST_TO_ADDR
80295: LD_VAR 0 2
80299: PUSH
80300: FOR_TO
80301: IFFALSE 80470
// begin if hackTanksCaptured [ index ] = hackLimit then
80303: LD_EXP 109
80307: PUSH
80308: LD_VAR 0 5
80312: ARRAY
80313: PUSH
80314: LD_EXP 110
80318: EQUAL
80319: IFFALSE 80323
// break ;
80321: GO 80470
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80323: LD_ADDR_EXP 112
80327: PUSH
80328: LD_EXP 112
80332: PPUSH
80333: LD_VAR 0 5
80337: PPUSH
80338: LD_EXP 112
80342: PUSH
80343: LD_VAR 0 5
80347: ARRAY
80348: PUSH
80349: LD_INT 1
80351: PLUS
80352: PPUSH
80353: CALL_OW 1
80357: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80358: LD_ADDR_EXP 109
80362: PUSH
80363: LD_EXP 109
80367: PPUSH
80368: LD_VAR 0 5
80372: PUSH
80373: LD_EXP 109
80377: PUSH
80378: LD_VAR 0 5
80382: ARRAY
80383: PUSH
80384: LD_INT 1
80386: PLUS
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PPUSH
80392: LD_VAR 0 2
80396: PUSH
80397: LD_VAR 0 4
80401: ARRAY
80402: PUSH
80403: LD_VAR 0 2
80407: PUSH
80408: LD_VAR 0 4
80412: ARRAY
80413: PPUSH
80414: CALL_OW 255
80418: PUSH
80419: EMPTY
80420: LIST
80421: LIST
80422: PPUSH
80423: CALL 25170 0 3
80427: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80428: LD_VAR 0 2
80432: PUSH
80433: LD_VAR 0 4
80437: ARRAY
80438: PPUSH
80439: LD_VAR 0 1
80443: PPUSH
80444: CALL_OW 255
80448: PPUSH
80449: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80453: LD_VAR 0 2
80457: PUSH
80458: LD_VAR 0 4
80462: ARRAY
80463: PPUSH
80464: CALL_OW 141
// end ;
80468: GO 80300
80470: POP
80471: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80472: LD_VAR 0 1
80476: PPUSH
80477: LD_EXP 109
80481: PUSH
80482: LD_VAR 0 5
80486: ARRAY
80487: PUSH
80488: LD_INT 0
80490: PLUS
80491: PPUSH
80492: CALL_OW 505
// end ;
80496: LD_VAR 0 3
80500: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80501: LD_INT 0
80503: PPUSH
80504: PPUSH
80505: PPUSH
80506: PPUSH
// if not hack in hackTanks then
80507: LD_VAR 0 1
80511: PUSH
80512: LD_EXP 108
80516: IN
80517: NOT
80518: IFFALSE 80522
// exit ;
80520: GO 80762
// index := GetElementIndex ( hackTanks , hack ) ;
80522: LD_ADDR_VAR 0 4
80526: PUSH
80527: LD_EXP 108
80531: PPUSH
80532: LD_VAR 0 1
80536: PPUSH
80537: CALL 24955 0 2
80541: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80542: LD_ADDR_VAR 0 3
80546: PUSH
80547: DOUBLE
80548: LD_EXP 109
80552: PUSH
80553: LD_VAR 0 4
80557: ARRAY
80558: INC
80559: ST_TO_ADDR
80560: LD_INT 1
80562: PUSH
80563: FOR_DOWNTO
80564: IFFALSE 80736
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80566: LD_ADDR_VAR 0 5
80570: PUSH
80571: LD_EXP 109
80575: PUSH
80576: LD_VAR 0 4
80580: ARRAY
80581: PUSH
80582: LD_VAR 0 3
80586: ARRAY
80587: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80588: LD_VAR 0 5
80592: PUSH
80593: LD_INT 1
80595: ARRAY
80596: PPUSH
80597: CALL_OW 302
80601: NOT
80602: PUSH
80603: LD_VAR 0 5
80607: PUSH
80608: LD_INT 1
80610: ARRAY
80611: PPUSH
80612: CALL_OW 255
80616: PUSH
80617: LD_VAR 0 1
80621: PPUSH
80622: CALL_OW 255
80626: NONEQUAL
80627: OR
80628: IFFALSE 80734
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80630: LD_VAR 0 5
80634: PUSH
80635: LD_INT 1
80637: ARRAY
80638: PPUSH
80639: CALL_OW 305
80643: PUSH
80644: LD_VAR 0 5
80648: PUSH
80649: LD_INT 1
80651: ARRAY
80652: PPUSH
80653: CALL_OW 255
80657: PUSH
80658: LD_VAR 0 1
80662: PPUSH
80663: CALL_OW 255
80667: EQUAL
80668: AND
80669: IFFALSE 80693
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80671: LD_VAR 0 5
80675: PUSH
80676: LD_INT 1
80678: ARRAY
80679: PPUSH
80680: LD_VAR 0 5
80684: PUSH
80685: LD_INT 2
80687: ARRAY
80688: PPUSH
80689: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80693: LD_ADDR_EXP 109
80697: PUSH
80698: LD_EXP 109
80702: PPUSH
80703: LD_VAR 0 4
80707: PPUSH
80708: LD_EXP 109
80712: PUSH
80713: LD_VAR 0 4
80717: ARRAY
80718: PPUSH
80719: LD_VAR 0 3
80723: PPUSH
80724: CALL_OW 3
80728: PPUSH
80729: CALL_OW 1
80733: ST_TO_ADDR
// end ; end ;
80734: GO 80563
80736: POP
80737: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80738: LD_VAR 0 1
80742: PPUSH
80743: LD_EXP 109
80747: PUSH
80748: LD_VAR 0 4
80752: ARRAY
80753: PUSH
80754: LD_INT 0
80756: PLUS
80757: PPUSH
80758: CALL_OW 505
// end ;
80762: LD_VAR 0 2
80766: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80767: LD_INT 0
80769: PPUSH
80770: PPUSH
80771: PPUSH
80772: PPUSH
// if not hack in hackTanks then
80773: LD_VAR 0 1
80777: PUSH
80778: LD_EXP 108
80782: IN
80783: NOT
80784: IFFALSE 80788
// exit ;
80786: GO 80873
// index := GetElementIndex ( hackTanks , hack ) ;
80788: LD_ADDR_VAR 0 5
80792: PUSH
80793: LD_EXP 108
80797: PPUSH
80798: LD_VAR 0 1
80802: PPUSH
80803: CALL 24955 0 2
80807: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80808: LD_ADDR_VAR 0 4
80812: PUSH
80813: DOUBLE
80814: LD_INT 1
80816: DEC
80817: ST_TO_ADDR
80818: LD_EXP 109
80822: PUSH
80823: LD_VAR 0 5
80827: ARRAY
80828: PUSH
80829: FOR_TO
80830: IFFALSE 80871
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80832: LD_EXP 109
80836: PUSH
80837: LD_VAR 0 5
80841: ARRAY
80842: PUSH
80843: LD_VAR 0 4
80847: ARRAY
80848: PUSH
80849: LD_INT 1
80851: ARRAY
80852: PUSH
80853: LD_VAR 0 2
80857: EQUAL
80858: IFFALSE 80869
// KillUnit ( vehicle ) ;
80860: LD_VAR 0 2
80864: PPUSH
80865: CALL_OW 66
80869: GO 80829
80871: POP
80872: POP
// end ;
80873: LD_VAR 0 3
80877: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80878: LD_EXP 113
80882: NOT
80883: IFFALSE 80918
80885: GO 80887
80887: DISABLE
// begin initMiner := true ;
80888: LD_ADDR_EXP 113
80892: PUSH
80893: LD_INT 1
80895: ST_TO_ADDR
// minersList := [ ] ;
80896: LD_ADDR_EXP 114
80900: PUSH
80901: EMPTY
80902: ST_TO_ADDR
// minerMinesList := [ ] ;
80903: LD_ADDR_EXP 115
80907: PUSH
80908: EMPTY
80909: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
80910: LD_ADDR_EXP 116
80914: PUSH
80915: LD_INT 5
80917: ST_TO_ADDR
// end ;
80918: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
80919: LD_EXP 113
80923: PUSH
80924: LD_INT 34
80926: PUSH
80927: LD_INT 81
80929: PUSH
80930: EMPTY
80931: LIST
80932: LIST
80933: PPUSH
80934: CALL_OW 69
80938: AND
80939: IFFALSE 81400
80941: GO 80943
80943: DISABLE
80944: LD_INT 0
80946: PPUSH
80947: PPUSH
80948: PPUSH
80949: PPUSH
// begin enable ;
80950: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
80951: LD_ADDR_VAR 0 1
80955: PUSH
80956: LD_INT 34
80958: PUSH
80959: LD_INT 81
80961: PUSH
80962: EMPTY
80963: LIST
80964: LIST
80965: PPUSH
80966: CALL_OW 69
80970: PUSH
80971: FOR_IN
80972: IFFALSE 81044
// begin if not i in minersList then
80974: LD_VAR 0 1
80978: PUSH
80979: LD_EXP 114
80983: IN
80984: NOT
80985: IFFALSE 81042
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
80987: LD_ADDR_EXP 114
80991: PUSH
80992: LD_EXP 114
80996: PPUSH
80997: LD_EXP 114
81001: PUSH
81002: LD_INT 1
81004: PLUS
81005: PPUSH
81006: LD_VAR 0 1
81010: PPUSH
81011: CALL_OW 1
81015: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81016: LD_ADDR_EXP 115
81020: PUSH
81021: LD_EXP 115
81025: PPUSH
81026: LD_EXP 115
81030: PUSH
81031: LD_INT 1
81033: PLUS
81034: PPUSH
81035: EMPTY
81036: PPUSH
81037: CALL_OW 1
81041: ST_TO_ADDR
// end end ;
81042: GO 80971
81044: POP
81045: POP
// for i := minerMinesList downto 1 do
81046: LD_ADDR_VAR 0 1
81050: PUSH
81051: DOUBLE
81052: LD_EXP 115
81056: INC
81057: ST_TO_ADDR
81058: LD_INT 1
81060: PUSH
81061: FOR_DOWNTO
81062: IFFALSE 81398
// begin if IsLive ( minersList [ i ] ) then
81064: LD_EXP 114
81068: PUSH
81069: LD_VAR 0 1
81073: ARRAY
81074: PPUSH
81075: CALL_OW 300
81079: IFFALSE 81107
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
81081: LD_EXP 114
81085: PUSH
81086: LD_VAR 0 1
81090: ARRAY
81091: PPUSH
81092: LD_EXP 115
81096: PUSH
81097: LD_VAR 0 1
81101: ARRAY
81102: PPUSH
81103: CALL_OW 505
// if not minerMinesList [ i ] then
81107: LD_EXP 115
81111: PUSH
81112: LD_VAR 0 1
81116: ARRAY
81117: NOT
81118: IFFALSE 81122
// continue ;
81120: GO 81061
// for j := minerMinesList [ i ] downto 1 do
81122: LD_ADDR_VAR 0 2
81126: PUSH
81127: DOUBLE
81128: LD_EXP 115
81132: PUSH
81133: LD_VAR 0 1
81137: ARRAY
81138: INC
81139: ST_TO_ADDR
81140: LD_INT 1
81142: PUSH
81143: FOR_DOWNTO
81144: IFFALSE 81394
// begin side := GetSide ( minersList [ i ] ) ;
81146: LD_ADDR_VAR 0 3
81150: PUSH
81151: LD_EXP 114
81155: PUSH
81156: LD_VAR 0 1
81160: ARRAY
81161: PPUSH
81162: CALL_OW 255
81166: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81167: LD_ADDR_VAR 0 4
81171: PUSH
81172: LD_EXP 115
81176: PUSH
81177: LD_VAR 0 1
81181: ARRAY
81182: PUSH
81183: LD_VAR 0 2
81187: ARRAY
81188: PUSH
81189: LD_INT 1
81191: ARRAY
81192: PPUSH
81193: LD_EXP 115
81197: PUSH
81198: LD_VAR 0 1
81202: ARRAY
81203: PUSH
81204: LD_VAR 0 2
81208: ARRAY
81209: PUSH
81210: LD_INT 2
81212: ARRAY
81213: PPUSH
81214: CALL_OW 428
81218: ST_TO_ADDR
// if not tmp then
81219: LD_VAR 0 4
81223: NOT
81224: IFFALSE 81228
// continue ;
81226: GO 81143
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81228: LD_VAR 0 4
81232: PUSH
81233: LD_INT 81
81235: PUSH
81236: LD_VAR 0 3
81240: PUSH
81241: EMPTY
81242: LIST
81243: LIST
81244: PPUSH
81245: CALL_OW 69
81249: IN
81250: PUSH
81251: LD_EXP 115
81255: PUSH
81256: LD_VAR 0 1
81260: ARRAY
81261: PUSH
81262: LD_VAR 0 2
81266: ARRAY
81267: PUSH
81268: LD_INT 1
81270: ARRAY
81271: PPUSH
81272: LD_EXP 115
81276: PUSH
81277: LD_VAR 0 1
81281: ARRAY
81282: PUSH
81283: LD_VAR 0 2
81287: ARRAY
81288: PUSH
81289: LD_INT 2
81291: ARRAY
81292: PPUSH
81293: CALL_OW 458
81297: AND
81298: IFFALSE 81392
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81300: LD_EXP 115
81304: PUSH
81305: LD_VAR 0 1
81309: ARRAY
81310: PUSH
81311: LD_VAR 0 2
81315: ARRAY
81316: PUSH
81317: LD_INT 1
81319: ARRAY
81320: PPUSH
81321: LD_EXP 115
81325: PUSH
81326: LD_VAR 0 1
81330: ARRAY
81331: PUSH
81332: LD_VAR 0 2
81336: ARRAY
81337: PUSH
81338: LD_INT 2
81340: ARRAY
81341: PPUSH
81342: LD_VAR 0 3
81346: PPUSH
81347: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81351: LD_ADDR_EXP 115
81355: PUSH
81356: LD_EXP 115
81360: PPUSH
81361: LD_VAR 0 1
81365: PPUSH
81366: LD_EXP 115
81370: PUSH
81371: LD_VAR 0 1
81375: ARRAY
81376: PPUSH
81377: LD_VAR 0 2
81381: PPUSH
81382: CALL_OW 3
81386: PPUSH
81387: CALL_OW 1
81391: ST_TO_ADDR
// end ; end ;
81392: GO 81143
81394: POP
81395: POP
// end ;
81396: GO 81061
81398: POP
81399: POP
// end ;
81400: PPOPN 4
81402: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
81403: LD_INT 0
81405: PPUSH
81406: PPUSH
// result := false ;
81407: LD_ADDR_VAR 0 4
81411: PUSH
81412: LD_INT 0
81414: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81415: LD_VAR 0 1
81419: PPUSH
81420: CALL_OW 264
81424: PUSH
81425: LD_INT 81
81427: EQUAL
81428: NOT
81429: IFFALSE 81433
// exit ;
81431: GO 81673
// index := GetElementIndex ( minersList , unit ) ;
81433: LD_ADDR_VAR 0 5
81437: PUSH
81438: LD_EXP 114
81442: PPUSH
81443: LD_VAR 0 1
81447: PPUSH
81448: CALL 24955 0 2
81452: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81453: LD_EXP 115
81457: PUSH
81458: LD_VAR 0 5
81462: ARRAY
81463: PUSH
81464: LD_EXP 116
81468: GREATEREQUAL
81469: IFFALSE 81473
// exit ;
81471: GO 81673
// ComMoveXY ( unit , x , y ) ;
81473: LD_VAR 0 1
81477: PPUSH
81478: LD_VAR 0 2
81482: PPUSH
81483: LD_VAR 0 3
81487: PPUSH
81488: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81492: LD_INT 35
81494: PPUSH
81495: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81499: LD_VAR 0 1
81503: PPUSH
81504: LD_VAR 0 2
81508: PPUSH
81509: LD_VAR 0 3
81513: PPUSH
81514: CALL 56707 0 3
81518: NOT
81519: PUSH
81520: LD_VAR 0 1
81524: PPUSH
81525: CALL_OW 314
81529: AND
81530: IFFALSE 81534
// exit ;
81532: GO 81673
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81534: LD_VAR 0 2
81538: PPUSH
81539: LD_VAR 0 3
81543: PPUSH
81544: CALL_OW 428
81548: PUSH
81549: LD_VAR 0 1
81553: EQUAL
81554: PUSH
81555: LD_VAR 0 1
81559: PPUSH
81560: CALL_OW 314
81564: NOT
81565: AND
81566: IFFALSE 81492
// PlaySoundXY ( x , y , PlantMine ) ;
81568: LD_VAR 0 2
81572: PPUSH
81573: LD_VAR 0 3
81577: PPUSH
81578: LD_STRING PlantMine
81580: PPUSH
81581: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
81585: LD_VAR 0 2
81589: PPUSH
81590: LD_VAR 0 3
81594: PPUSH
81595: LD_VAR 0 1
81599: PPUSH
81600: CALL_OW 255
81604: PPUSH
81605: LD_INT 0
81607: PPUSH
81608: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81612: LD_ADDR_EXP 115
81616: PUSH
81617: LD_EXP 115
81621: PPUSH
81622: LD_VAR 0 5
81626: PUSH
81627: LD_EXP 115
81631: PUSH
81632: LD_VAR 0 5
81636: ARRAY
81637: PUSH
81638: LD_INT 1
81640: PLUS
81641: PUSH
81642: EMPTY
81643: LIST
81644: LIST
81645: PPUSH
81646: LD_VAR 0 2
81650: PUSH
81651: LD_VAR 0 3
81655: PUSH
81656: EMPTY
81657: LIST
81658: LIST
81659: PPUSH
81660: CALL 25170 0 3
81664: ST_TO_ADDR
// result := true ;
81665: LD_ADDR_VAR 0 4
81669: PUSH
81670: LD_INT 1
81672: ST_TO_ADDR
// end ;
81673: LD_VAR 0 4
81677: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81678: LD_INT 0
81680: PPUSH
81681: PPUSH
81682: PPUSH
// if not unit in minersList then
81683: LD_VAR 0 1
81687: PUSH
81688: LD_EXP 114
81692: IN
81693: NOT
81694: IFFALSE 81698
// exit ;
81696: GO 82090
// index := GetElementIndex ( minersList , unit ) ;
81698: LD_ADDR_VAR 0 6
81702: PUSH
81703: LD_EXP 114
81707: PPUSH
81708: LD_VAR 0 1
81712: PPUSH
81713: CALL 24955 0 2
81717: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81718: LD_ADDR_VAR 0 5
81722: PUSH
81723: DOUBLE
81724: LD_EXP 115
81728: PUSH
81729: LD_VAR 0 6
81733: ARRAY
81734: INC
81735: ST_TO_ADDR
81736: LD_INT 1
81738: PUSH
81739: FOR_DOWNTO
81740: IFFALSE 81901
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
81742: LD_EXP 115
81746: PUSH
81747: LD_VAR 0 6
81751: ARRAY
81752: PUSH
81753: LD_VAR 0 5
81757: ARRAY
81758: PUSH
81759: LD_INT 1
81761: ARRAY
81762: PUSH
81763: LD_VAR 0 2
81767: EQUAL
81768: PUSH
81769: LD_EXP 115
81773: PUSH
81774: LD_VAR 0 6
81778: ARRAY
81779: PUSH
81780: LD_VAR 0 5
81784: ARRAY
81785: PUSH
81786: LD_INT 2
81788: ARRAY
81789: PUSH
81790: LD_VAR 0 3
81794: EQUAL
81795: AND
81796: IFFALSE 81899
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81798: LD_EXP 115
81802: PUSH
81803: LD_VAR 0 6
81807: ARRAY
81808: PUSH
81809: LD_VAR 0 5
81813: ARRAY
81814: PUSH
81815: LD_INT 1
81817: ARRAY
81818: PPUSH
81819: LD_EXP 115
81823: PUSH
81824: LD_VAR 0 6
81828: ARRAY
81829: PUSH
81830: LD_VAR 0 5
81834: ARRAY
81835: PUSH
81836: LD_INT 2
81838: ARRAY
81839: PPUSH
81840: LD_VAR 0 1
81844: PPUSH
81845: CALL_OW 255
81849: PPUSH
81850: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81854: LD_ADDR_EXP 115
81858: PUSH
81859: LD_EXP 115
81863: PPUSH
81864: LD_VAR 0 6
81868: PPUSH
81869: LD_EXP 115
81873: PUSH
81874: LD_VAR 0 6
81878: ARRAY
81879: PPUSH
81880: LD_VAR 0 5
81884: PPUSH
81885: CALL_OW 3
81889: PPUSH
81890: CALL_OW 1
81894: ST_TO_ADDR
// exit ;
81895: POP
81896: POP
81897: GO 82090
// end ; end ;
81899: GO 81739
81901: POP
81902: POP
// for i := minerMinesList [ index ] downto 1 do
81903: LD_ADDR_VAR 0 5
81907: PUSH
81908: DOUBLE
81909: LD_EXP 115
81913: PUSH
81914: LD_VAR 0 6
81918: ARRAY
81919: INC
81920: ST_TO_ADDR
81921: LD_INT 1
81923: PUSH
81924: FOR_DOWNTO
81925: IFFALSE 82088
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
81927: LD_EXP 115
81931: PUSH
81932: LD_VAR 0 6
81936: ARRAY
81937: PUSH
81938: LD_VAR 0 5
81942: ARRAY
81943: PUSH
81944: LD_INT 1
81946: ARRAY
81947: PPUSH
81948: LD_EXP 115
81952: PUSH
81953: LD_VAR 0 6
81957: ARRAY
81958: PUSH
81959: LD_VAR 0 5
81963: ARRAY
81964: PUSH
81965: LD_INT 2
81967: ARRAY
81968: PPUSH
81969: LD_VAR 0 2
81973: PPUSH
81974: LD_VAR 0 3
81978: PPUSH
81979: CALL_OW 298
81983: PUSH
81984: LD_INT 6
81986: LESS
81987: IFFALSE 82086
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81989: LD_EXP 115
81993: PUSH
81994: LD_VAR 0 6
81998: ARRAY
81999: PUSH
82000: LD_VAR 0 5
82004: ARRAY
82005: PUSH
82006: LD_INT 1
82008: ARRAY
82009: PPUSH
82010: LD_EXP 115
82014: PUSH
82015: LD_VAR 0 6
82019: ARRAY
82020: PUSH
82021: LD_VAR 0 5
82025: ARRAY
82026: PUSH
82027: LD_INT 2
82029: ARRAY
82030: PPUSH
82031: LD_VAR 0 1
82035: PPUSH
82036: CALL_OW 255
82040: PPUSH
82041: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82045: LD_ADDR_EXP 115
82049: PUSH
82050: LD_EXP 115
82054: PPUSH
82055: LD_VAR 0 6
82059: PPUSH
82060: LD_EXP 115
82064: PUSH
82065: LD_VAR 0 6
82069: ARRAY
82070: PPUSH
82071: LD_VAR 0 5
82075: PPUSH
82076: CALL_OW 3
82080: PPUSH
82081: CALL_OW 1
82085: ST_TO_ADDR
// end ; end ;
82086: GO 81924
82088: POP
82089: POP
// end ;
82090: LD_VAR 0 4
82094: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82095: LD_INT 0
82097: PPUSH
82098: PPUSH
82099: PPUSH
82100: PPUSH
82101: PPUSH
82102: PPUSH
82103: PPUSH
82104: PPUSH
82105: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82106: LD_VAR 0 1
82110: PPUSH
82111: CALL_OW 264
82115: PUSH
82116: LD_INT 81
82118: EQUAL
82119: NOT
82120: PUSH
82121: LD_VAR 0 1
82125: PUSH
82126: LD_EXP 114
82130: IN
82131: NOT
82132: OR
82133: IFFALSE 82137
// exit ;
82135: GO 82459
// index := GetElementIndex ( minersList , unit ) ;
82137: LD_ADDR_VAR 0 6
82141: PUSH
82142: LD_EXP 114
82146: PPUSH
82147: LD_VAR 0 1
82151: PPUSH
82152: CALL 24955 0 2
82156: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82157: LD_ADDR_VAR 0 8
82161: PUSH
82162: LD_EXP 116
82166: PUSH
82167: LD_EXP 115
82171: PUSH
82172: LD_VAR 0 6
82176: ARRAY
82177: MINUS
82178: ST_TO_ADDR
// if not minesFreeAmount then
82179: LD_VAR 0 8
82183: NOT
82184: IFFALSE 82188
// exit ;
82186: GO 82459
// tmp := [ ] ;
82188: LD_ADDR_VAR 0 7
82192: PUSH
82193: EMPTY
82194: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82195: LD_ADDR_VAR 0 5
82199: PUSH
82200: DOUBLE
82201: LD_INT 1
82203: DEC
82204: ST_TO_ADDR
82205: LD_VAR 0 8
82209: PUSH
82210: FOR_TO
82211: IFFALSE 82406
// begin _d := rand ( 0 , 5 ) ;
82213: LD_ADDR_VAR 0 11
82217: PUSH
82218: LD_INT 0
82220: PPUSH
82221: LD_INT 5
82223: PPUSH
82224: CALL_OW 12
82228: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82229: LD_ADDR_VAR 0 12
82233: PUSH
82234: LD_INT 2
82236: PPUSH
82237: LD_INT 6
82239: PPUSH
82240: CALL_OW 12
82244: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82245: LD_ADDR_VAR 0 9
82249: PUSH
82250: LD_VAR 0 2
82254: PPUSH
82255: LD_VAR 0 11
82259: PPUSH
82260: LD_VAR 0 12
82264: PPUSH
82265: CALL_OW 272
82269: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82270: LD_ADDR_VAR 0 10
82274: PUSH
82275: LD_VAR 0 3
82279: PPUSH
82280: LD_VAR 0 11
82284: PPUSH
82285: LD_VAR 0 12
82289: PPUSH
82290: CALL_OW 273
82294: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82295: LD_VAR 0 9
82299: PPUSH
82300: LD_VAR 0 10
82304: PPUSH
82305: CALL_OW 488
82309: PUSH
82310: LD_VAR 0 9
82314: PUSH
82315: LD_VAR 0 10
82319: PUSH
82320: EMPTY
82321: LIST
82322: LIST
82323: PUSH
82324: LD_VAR 0 7
82328: IN
82329: NOT
82330: AND
82331: PUSH
82332: LD_VAR 0 9
82336: PPUSH
82337: LD_VAR 0 10
82341: PPUSH
82342: CALL_OW 458
82346: NOT
82347: AND
82348: IFFALSE 82390
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82350: LD_ADDR_VAR 0 7
82354: PUSH
82355: LD_VAR 0 7
82359: PPUSH
82360: LD_VAR 0 7
82364: PUSH
82365: LD_INT 1
82367: PLUS
82368: PPUSH
82369: LD_VAR 0 9
82373: PUSH
82374: LD_VAR 0 10
82378: PUSH
82379: EMPTY
82380: LIST
82381: LIST
82382: PPUSH
82383: CALL_OW 1
82387: ST_TO_ADDR
82388: GO 82404
// i := i - 1 ;
82390: LD_ADDR_VAR 0 5
82394: PUSH
82395: LD_VAR 0 5
82399: PUSH
82400: LD_INT 1
82402: MINUS
82403: ST_TO_ADDR
// end ;
82404: GO 82210
82406: POP
82407: POP
// for i in tmp do
82408: LD_ADDR_VAR 0 5
82412: PUSH
82413: LD_VAR 0 7
82417: PUSH
82418: FOR_IN
82419: IFFALSE 82457
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82421: LD_VAR 0 1
82425: PPUSH
82426: LD_VAR 0 5
82430: PUSH
82431: LD_INT 1
82433: ARRAY
82434: PPUSH
82435: LD_VAR 0 5
82439: PUSH
82440: LD_INT 2
82442: ARRAY
82443: PPUSH
82444: CALL 81403 0 3
82448: NOT
82449: IFFALSE 82455
// exit ;
82451: POP
82452: POP
82453: GO 82459
82455: GO 82418
82457: POP
82458: POP
// end ;
82459: LD_VAR 0 4
82463: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
82464: LD_INT 0
82466: PPUSH
82467: PPUSH
82468: PPUSH
82469: PPUSH
82470: PPUSH
82471: PPUSH
82472: PPUSH
// if not GetClass ( unit ) = class_sniper then
82473: LD_VAR 0 1
82477: PPUSH
82478: CALL_OW 257
82482: PUSH
82483: LD_INT 5
82485: EQUAL
82486: NOT
82487: IFFALSE 82491
// exit ;
82489: GO 82879
// dist := 8 ;
82491: LD_ADDR_VAR 0 5
82495: PUSH
82496: LD_INT 8
82498: ST_TO_ADDR
// viewRange := 12 ;
82499: LD_ADDR_VAR 0 7
82503: PUSH
82504: LD_INT 12
82506: ST_TO_ADDR
// side := GetSide ( unit ) ;
82507: LD_ADDR_VAR 0 6
82511: PUSH
82512: LD_VAR 0 1
82516: PPUSH
82517: CALL_OW 255
82521: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82522: LD_INT 61
82524: PPUSH
82525: LD_VAR 0 6
82529: PPUSH
82530: CALL_OW 321
82534: PUSH
82535: LD_INT 2
82537: EQUAL
82538: IFFALSE 82548
// viewRange := 16 ;
82540: LD_ADDR_VAR 0 7
82544: PUSH
82545: LD_INT 16
82547: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82548: LD_VAR 0 1
82552: PPUSH
82553: LD_VAR 0 2
82557: PPUSH
82558: LD_VAR 0 3
82562: PPUSH
82563: CALL_OW 297
82567: PUSH
82568: LD_VAR 0 5
82572: GREATER
82573: IFFALSE 82652
// begin ComMoveXY ( unit , x , y ) ;
82575: LD_VAR 0 1
82579: PPUSH
82580: LD_VAR 0 2
82584: PPUSH
82585: LD_VAR 0 3
82589: PPUSH
82590: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82594: LD_INT 35
82596: PPUSH
82597: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82601: LD_VAR 0 1
82605: PPUSH
82606: LD_VAR 0 2
82610: PPUSH
82611: LD_VAR 0 3
82615: PPUSH
82616: CALL 56707 0 3
82620: NOT
82621: IFFALSE 82625
// exit ;
82623: GO 82879
// until GetDistUnitXY ( unit , x , y ) < dist ;
82625: LD_VAR 0 1
82629: PPUSH
82630: LD_VAR 0 2
82634: PPUSH
82635: LD_VAR 0 3
82639: PPUSH
82640: CALL_OW 297
82644: PUSH
82645: LD_VAR 0 5
82649: LESS
82650: IFFALSE 82594
// end ; ComTurnXY ( unit , x , y ) ;
82652: LD_VAR 0 1
82656: PPUSH
82657: LD_VAR 0 2
82661: PPUSH
82662: LD_VAR 0 3
82666: PPUSH
82667: CALL_OW 118
// wait ( 5 ) ;
82671: LD_INT 5
82673: PPUSH
82674: CALL_OW 67
// _d := GetDir ( unit ) ;
82678: LD_ADDR_VAR 0 10
82682: PUSH
82683: LD_VAR 0 1
82687: PPUSH
82688: CALL_OW 254
82692: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
82693: LD_ADDR_VAR 0 8
82697: PUSH
82698: LD_VAR 0 1
82702: PPUSH
82703: CALL_OW 250
82707: PPUSH
82708: LD_VAR 0 10
82712: PPUSH
82713: LD_VAR 0 5
82717: PPUSH
82718: CALL_OW 272
82722: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
82723: LD_ADDR_VAR 0 9
82727: PUSH
82728: LD_VAR 0 1
82732: PPUSH
82733: CALL_OW 251
82737: PPUSH
82738: LD_VAR 0 10
82742: PPUSH
82743: LD_VAR 0 5
82747: PPUSH
82748: CALL_OW 273
82752: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82753: LD_VAR 0 8
82757: PPUSH
82758: LD_VAR 0 9
82762: PPUSH
82763: CALL_OW 488
82767: NOT
82768: IFFALSE 82772
// exit ;
82770: GO 82879
// ComAnimCustom ( unit , 1 ) ;
82772: LD_VAR 0 1
82776: PPUSH
82777: LD_INT 1
82779: PPUSH
82780: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82784: LD_VAR 0 8
82788: PPUSH
82789: LD_VAR 0 9
82793: PPUSH
82794: LD_VAR 0 6
82798: PPUSH
82799: LD_VAR 0 7
82803: PPUSH
82804: CALL_OW 330
// repeat wait ( 1 ) ;
82808: LD_INT 1
82810: PPUSH
82811: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
82815: LD_VAR 0 1
82819: PPUSH
82820: CALL_OW 316
82824: PUSH
82825: LD_VAR 0 1
82829: PPUSH
82830: CALL_OW 314
82834: OR
82835: PUSH
82836: LD_VAR 0 1
82840: PPUSH
82841: CALL_OW 302
82845: NOT
82846: OR
82847: PUSH
82848: LD_VAR 0 1
82852: PPUSH
82853: CALL_OW 301
82857: OR
82858: IFFALSE 82808
// RemoveSeeing ( _x , _y , side ) ;
82860: LD_VAR 0 8
82864: PPUSH
82865: LD_VAR 0 9
82869: PPUSH
82870: LD_VAR 0 6
82874: PPUSH
82875: CALL_OW 331
// end ;
82879: LD_VAR 0 4
82883: RET
