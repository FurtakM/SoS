// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// CreateNature ;
   8: CALL 10914 0 0
// PrepareArabian ;
  12: CALL 226 0 0
// PrepareAmerican ;
  16: CALL 661 0 0
// PrepareLegion ;
  20: CALL 5576 0 0
// Action ;
  24: CALL 11518 0 0
// end ;
  28: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// prefix := 09_ ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// amScriptActive := true ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 1
  55: ST_TO_ADDR
// legScriptActive := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 16
  71: PUSH
  72: LD_INT 14
  74: PUSH
  75: LD_INT 12
  77: PUSH
  78: LD_INT 10
  80: PUSH
  81: EMPTY
  82: LIST
  83: LIST
  84: LIST
  85: LIST
  86: PUSH
  87: LD_OWVAR 67
  91: ARRAY
  92: ST_TO_ADDR
// spotAmericanBase := false ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// spotArabianBase := false ;
 101: LD_ADDR_EXP 7
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// spotLegion := false ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// spotByAmerican := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// spotByLegion := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// americanDestroyed := false ;
 133: LD_ADDR_EXP 11
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// legionDestroyed := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// hasMastodont := false ;
 149: LD_ADDR_EXP 13
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// hasVehicles := false ;
 157: LD_ADDR_EXP 14
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// hasTigers := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// hasApes := false ;
 173: LD_ADDR_EXP 16
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// hasDrugs := false ;
 181: LD_ADDR_EXP 17
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// canFinish := false ;
 189: LD_ADDR_EXP 18
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// gameActive := false ;
 197: LD_ADDR_EXP 19
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// omarCanChangeClass := false ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// tigerCounter := 0 ;
 213: LD_ADDR_EXP 21
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// end ; end_of_file
 221: LD_VAR 0 1
 225: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
// uc_side := 2 ;
 232: LD_ADDR_OWVAR 20
 236: PUSH
 237: LD_INT 2
 239: ST_TO_ADDR
// uc_nation := nation_arabian ;
 240: LD_ADDR_OWVAR 21
 244: PUSH
 245: LD_INT 2
 247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 248: LD_ADDR_EXP 22
 252: PUSH
 253: LD_STRING Heike
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_EXP 2
 266: PPUSH
 267: CALL 20254 0 3
 271: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 272: LD_INT 14
 274: PPUSH
 275: LD_INT 3
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 27
 283: PPUSH
 284: LD_INT 100
 286: PPUSH
 287: CALL 25094 0 5
// heikeVehicle := CreateVehicle ;
 291: LD_ADDR_EXP 24
 295: PUSH
 296: CALL_OW 45
 300: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 301: LD_EXP 24
 305: PPUSH
 306: LD_INT 4
 308: PPUSH
 309: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 313: LD_EXP 24
 317: PPUSH
 318: LD_INT 118
 320: PPUSH
 321: LD_INT 37
 323: PPUSH
 324: LD_INT 0
 326: PPUSH
 327: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 331: LD_EXP 22
 335: PPUSH
 336: LD_INT 1
 338: PPUSH
 339: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 343: LD_EXP 22
 347: PPUSH
 348: LD_EXP 24
 352: PPUSH
 353: CALL_OW 52
// uc_side := 5 ;
 357: LD_ADDR_OWVAR 20
 361: PUSH
 362: LD_INT 5
 364: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 365: LD_ADDR_EXP 23
 369: PUSH
 370: LD_STRING Omar
 372: PPUSH
 373: CALL_OW 25
 377: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 378: LD_INT 14
 380: PPUSH
 381: LD_INT 3
 383: PPUSH
 384: LD_INT 1
 386: PPUSH
 387: LD_INT 27
 389: PPUSH
 390: LD_INT 100
 392: PPUSH
 393: CALL 25094 0 5
// omarVehicle := CreateVehicle ;
 397: LD_ADDR_EXP 25
 401: PUSH
 402: CALL_OW 45
 406: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 407: LD_EXP 25
 411: PPUSH
 412: LD_INT 0
 414: PPUSH
 415: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 419: LD_ADDR_VAR 0 2
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 5
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 3
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 478
// SetLives ( i , rand ( 300 , 499 ) ) ;
 456: LD_VAR 0 2
 460: PPUSH
 461: LD_INT 300
 463: PPUSH
 464: LD_INT 499
 466: PPUSH
 467: CALL_OW 12
 471: PPUSH
 472: CALL_OW 234
 476: GO 453
 478: POP
 479: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 480: LD_INT 85
 482: PPUSH
 483: CALL_OW 274
 487: PPUSH
 488: LD_INT 1
 490: PPUSH
 491: LD_INT 200
 493: PUSH
 494: LD_INT 20
 496: PUSH
 497: LD_OWVAR 67
 501: MUL
 502: MINUS
 503: PPUSH
 504: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 508: LD_INT 85
 510: PPUSH
 511: CALL_OW 274
 515: PPUSH
 516: LD_INT 2
 518: PPUSH
 519: LD_INT 20
 521: PPUSH
 522: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 526: LD_INT 14
 528: PPUSH
 529: LD_INT 3
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: LD_INT 32
 537: PPUSH
 538: LD_INT 100
 540: PPUSH
 541: CALL 25094 0 5
// veh := CreateVehicle ;
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: CALL_OW 45
 554: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 555: LD_VAR 0 4
 559: PPUSH
 560: LD_INT 4
 562: PPUSH
 563: CALL_OW 233
// SetLives ( veh , 420 ) ;
 567: LD_VAR 0 4
 571: PPUSH
 572: LD_INT 420
 574: PPUSH
 575: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 579: LD_VAR 0 4
 583: PPUSH
 584: LD_INT 193
 586: PPUSH
 587: LD_INT 133
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 597: LD_INT 14
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: LD_INT 1
 605: PPUSH
 606: LD_INT 26
 608: PPUSH
 609: LD_INT 11
 611: PPUSH
 612: CALL 25094 0 5
// veh := CreateVehicle ;
 616: LD_ADDR_VAR 0 4
 620: PUSH
 621: CALL_OW 45
 625: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 626: LD_VAR 0 4
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 638: LD_VAR 0 4
 642: PPUSH
 643: LD_INT 261
 645: PPUSH
 646: LD_INT 115
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 48
// end ; end_of_file
 656: LD_VAR 0 1
 660: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 661: LD_INT 0
 663: PPUSH
 664: PPUSH
 665: PPUSH
 666: PPUSH
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// uc_side := 1 ;
 671: LD_ADDR_OWVAR 20
 675: PUSH
 676: LD_INT 1
 678: ST_TO_ADDR
// uc_nation := nation_american ;
 679: LD_ADDR_OWVAR 21
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// amForces := [ ] ;
 687: LD_ADDR_EXP 26
 691: PUSH
 692: EMPTY
 693: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 694: LD_ADDR_EXP 27
 698: PUSH
 699: LD_INT 1
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 20317 0 3
 712: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 713: LD_ADDR_EXP 28
 717: PUSH
 718: LD_INT 2
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: LD_INT 12
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 13
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 758: LD_ADDR_EXP 29
 762: PUSH
 763: LD_INT 94
 765: PUSH
 766: LD_INT 132
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// amBuildings := [ ] ;
 773: LD_ADDR_EXP 30
 777: PUSH
 778: EMPTY
 779: ST_TO_ADDR
// amTanks := [ ] ;
 780: LD_ADDR_EXP 31
 784: PUSH
 785: EMPTY
 786: ST_TO_ADDR
// amCargo := 0 ;
 787: LD_ADDR_EXP 33
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// amPatrol := [ ] ;
 795: LD_ADDR_EXP 34
 799: PUSH
 800: EMPTY
 801: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 802: LD_ADDR_VAR 0 7
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: LD_INT 121
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 98
 819: PUSH
 820: LD_INT 145
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// for i in sources do
 831: LD_ADDR_VAR 0 2
 835: PUSH
 836: LD_VAR 0 7
 840: PUSH
 841: FOR_IN
 842: IFFALSE 871
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 441
 869: GO 841
 871: POP
 872: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 274
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 550
 886: PPUSH
 887: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 891: LD_INT 2
 893: PPUSH
 894: CALL_OW 274
 898: PPUSH
 899: LD_INT 2
 901: PPUSH
 902: LD_INT 120
 904: PPUSH
 905: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 909: LD_INT 2
 911: PPUSH
 912: CALL_OW 274
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 30
 922: PPUSH
 923: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 927: LD_ADDR_VAR 0 6
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 7
 937: PUSH
 938: LD_INT 8
 940: PUSH
 941: LD_INT 9
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_OWVAR 67
 954: ARRAY
 955: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 956: LD_ADDR_EXP 32
 960: PUSH
 961: LD_STRING Brown
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: LD_STRING 
 969: PPUSH
 970: CALL 20254 0 3
 974: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 975: LD_EXP 32
 979: PPUSH
 980: LD_INT 2
 982: PPUSH
 983: CALL_OW 52
// for i := 1 to 4 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 4
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1525
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1003: LD_ADDR_VAR 0 3
1007: PUSH
1008: DOUBLE
1009: LD_INT 1
1011: DEC
1012: ST_TO_ADDR
1013: LD_INT 5
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: LD_INT 8
1021: PUSH
1022: LD_INT 9
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_OWVAR 67
1035: ARRAY
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 4
1042: PUSH
1043: LD_INT 5
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_OWVAR 67
1059: ARRAY
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 6
1069: PUSH
1070: LD_INT 7
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_OWVAR 67
1083: ARRAY
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 3
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: LD_INT 3
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: PUSH
1103: LD_OWVAR 67
1107: ARRAY
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PUSH
1121: FOR_TO
1122: IFFALSE 1521
// begin PrepareHuman ( false , i , skill ) ;
1124: LD_INT 0
1126: PPUSH
1127: LD_VAR 0 2
1131: PPUSH
1132: LD_VAR 0 6
1136: PPUSH
1137: CALL_OW 380
// un := CreateHuman ;
1141: LD_ADDR_VAR 0 5
1145: PUSH
1146: CALL_OW 44
1150: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1151: LD_ADDR_EXP 26
1155: PUSH
1156: LD_EXP 26
1160: PPUSH
1161: LD_VAR 0 5
1165: PPUSH
1166: CALL 57956 0 2
1170: ST_TO_ADDR
// case i of 1 :
1171: LD_VAR 0 2
1175: PUSH
1176: LD_INT 1
1178: DOUBLE
1179: EQUAL
1180: IFTRUE 1184
1182: GO 1253
1184: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1185: LD_ADDR_VAR 0 4
1189: PUSH
1190: LD_INT 22
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 2
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 32
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 30
1215: PUSH
1216: LD_INT 5
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: LIST
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: LD_INT 62
1233: PUSH
1234: EMPTY
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PPUSH
1246: CALL_OW 69
1250: ST_TO_ADDR
1251: GO 1432
1253: LD_INT 2
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1290
1261: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_INT 2
1269: PPUSH
1270: LD_INT 3
1272: PUSH
1273: LD_INT 62
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PPUSH
1283: CALL_OW 72
1287: ST_TO_ADDR
1288: GO 1432
1290: LD_INT 3
1292: DOUBLE
1293: EQUAL
1294: IFTRUE 1298
1296: GO 1372
1298: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: LD_INT 22
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 2
1316: PUSH
1317: LD_INT 30
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 30
1329: PUSH
1330: LD_INT 36
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 3
1344: PUSH
1345: LD_INT 62
1347: PUSH
1348: EMPTY
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 69
1364: PPUSH
1365: CALL 53232 0 1
1369: ST_TO_ADDR
1370: GO 1432
1372: LD_INT 4
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1431
1380: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 30
1398: PUSH
1399: LD_INT 8
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: LD_INT 3
1408: PUSH
1409: LD_INT 62
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
1429: GO 1432
1431: POP
// if b then
1432: LD_VAR 0 4
1436: IFFALSE 1498
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 50 ) then
1438: LD_VAR 0 4
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PPUSH
1447: CALL_OW 266
1451: PUSH
1452: LD_INT 5
1454: EQUAL
1455: PUSH
1456: LD_INT 50
1458: PPUSH
1459: CALL_OW 13
1463: AND
1464: IFFALSE 1478
// SetClass ( un , class_sniper ) ;
1466: LD_VAR 0 5
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_VAR 0 4
1487: PUSH
1488: LD_INT 1
1490: ARRAY
1491: PPUSH
1492: CALL_OW 52
// end else
1496: GO 1519
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1498: LD_VAR 0 5
1502: PPUSH
1503: LD_INT 92
1505: PPUSH
1506: LD_INT 137
1508: PPUSH
1509: LD_INT 4
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 50
// end ;
1519: GO 1121
1521: POP
1522: POP
1523: GO 1000
1525: POP
1526: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1527: LD_ADDR_VAR 0 8
1531: PUSH
1532: LD_INT 30
1534: PUSH
1535: LD_INT 32
1537: PUSH
1538: LD_INT 36
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1546: LD_ADDR_VAR 0 2
1550: PUSH
1551: DOUBLE
1552: LD_INT 1
1554: DEC
1555: ST_TO_ADDR
1556: LD_VAR 0 8
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1731
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1564: LD_ADDR_VAR 0 3
1568: PUSH
1569: DOUBLE
1570: LD_INT 1
1572: DEC
1573: ST_TO_ADDR
1574: LD_INT 1
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PUSH
1598: FOR_TO
1599: IFFALSE 1727
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1601: LD_INT 0
1603: PPUSH
1604: LD_INT 7
1606: PUSH
1607: LD_INT 8
1609: PUSH
1610: LD_INT 9
1612: PUSH
1613: LD_INT 10
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: LD_OWVAR 67
1626: ARRAY
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 5
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// if j mod 2 = 0 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 2
1649: MOD
1650: PUSH
1651: LD_INT 0
1653: EQUAL
1654: IFFALSE 1668
// SetClass ( un , class_sniper ) ;
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_INT 5
1663: PPUSH
1664: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1668: LD_ADDR_EXP 34
1672: PUSH
1673: LD_EXP 34
1677: PPUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL 57956 0 2
1687: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1688: LD_VAR 0 5
1692: PPUSH
1693: LD_VAR 0 8
1697: PUSH
1698: LD_VAR 0 2
1702: ARRAY
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 49
// SetTag ( un , i ) ;
1711: LD_VAR 0 5
1715: PPUSH
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 109
// end ;
1725: GO 1598
1727: POP
1728: POP
// end ;
1729: GO 1561
1731: POP
1732: POP
// end ;
1733: LD_VAR 0 1
1737: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1738: LD_EXP 3
1742: PUSH
1743: LD_EXP 26
1747: PPUSH
1748: CALL 22356 0 1
1752: AND
1753: IFFALSE 4121
1755: GO 1757
1757: DISABLE
1758: LD_INT 0
1760: PPUSH
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
1765: PPUSH
1766: PPUSH
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
// begin enable ;
1778: ENABLE
// side := 1 ;
1779: LD_ADDR_VAR 0 5
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: LD_INT 22
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 33
1806: PUSH
1807: LD_INT 2
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 50
1816: PUSH
1817: EMPTY
1818: LIST
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 61
1825: PUSH
1826: EMPTY
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_VAR 0 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 50
1863: PUSH
1864: EMPTY
1865: LIST
1866: PUSH
1867: LD_INT 30
1869: PUSH
1870: LD_INT 36
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: CALL 22356 0 1
1891: AND
1892: IFFALSE 1920
// for i in remote do
1894: LD_ADDR_VAR 0 1
1898: PUSH
1899: LD_VAR 0 3
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1918
// Connect ( i ) ;
1907: LD_VAR 0 1
1911: PPUSH
1912: CALL 28562 0 1
1916: GO 1904
1918: POP
1919: POP
// if amTech then
1920: LD_EXP 27
1924: IFFALSE 2080
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1926: LD_ADDR_VAR 0 6
1930: PUSH
1931: LD_INT 22
1933: PUSH
1934: LD_VAR 0 5
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 50
1945: PUSH
1946: EMPTY
1947: LIST
1948: PUSH
1949: LD_INT 2
1951: PUSH
1952: LD_INT 30
1954: PUSH
1955: LD_INT 6
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 30
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 30
1974: PUSH
1975: LD_INT 8
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PPUSH
1993: CALL_OW 69
1997: ST_TO_ADDR
// if lab then
1998: LD_VAR 0 6
2002: IFFALSE 2080
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2004: LD_VAR 0 6
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: CALL_OW 461
2017: PUSH
2018: LD_INT 2
2020: EQUAL
2021: IFFALSE 2080
// begin for i in amTech do
2023: LD_ADDR_VAR 0 1
2027: PUSH
2028: LD_EXP 27
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2078
// if CanBeResearched ( lab [ 1 ] , i ) then
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PPUSH
2045: LD_VAR 0 1
2049: PPUSH
2050: CALL_OW 430
2054: IFFALSE 2076
// begin ComResearch ( lab [ 1 ] , i ) ;
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: LD_VAR 0 1
2069: PPUSH
2070: CALL_OW 124
// break ;
2074: GO 2078
// end ;
2076: GO 2033
2078: POP
2079: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2080: LD_ADDR_VAR 0 16
2084: PUSH
2085: LD_INT 1
2087: PPUSH
2088: LD_INT 22
2090: PUSH
2091: LD_VAR 0 5
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 3
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 50
2112: PUSH
2113: EMPTY
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 70
2125: ST_TO_ADDR
// if fac then
2126: LD_VAR 0 16
2130: IFFALSE 2396
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2132: LD_VAR 0 16
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: CALL_OW 461
2145: PUSH
2146: LD_INT 2
2148: EQUAL
2149: IFFALSE 2396
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2151: LD_ADDR_VAR 0 17
2155: PUSH
2156: LD_INT 1
2158: PPUSH
2159: LD_INT 2
2161: PUSH
2162: LD_INT 30
2164: PUSH
2165: LD_INT 32
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 30
2174: PUSH
2175: LD_INT 33
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 35
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PPUSH
2201: CALL_OW 70
2205: ST_TO_ADDR
// if emptyTowers then
2206: LD_VAR 0 17
2210: IFFALSE 2258
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2212: LD_ADDR_VAR 0 18
2216: PUSH
2217: LD_VAR 0 17
2221: PUSH
2222: LD_INT 1
2224: ARRAY
2225: PPUSH
2226: LD_INT 1
2228: PPUSH
2229: CALL 30601 0 2
2233: ST_TO_ADDR
// if weapon then
2234: LD_VAR 0 18
2238: IFFALSE 2258
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2240: LD_VAR 0 17
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PPUSH
2249: LD_VAR 0 18
2253: PPUSH
2254: CALL_OW 148
// end ; if amConstructList then
2258: LD_EXP 28
2262: IFFALSE 2396
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2264: LD_VAR 0 16
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PPUSH
2273: LD_EXP 28
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: LD_EXP 28
2290: PUSH
2291: LD_INT 1
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: LD_EXP 28
2303: PUSH
2304: LD_INT 1
2306: ARRAY
2307: PUSH
2308: LD_INT 3
2310: ARRAY
2311: PPUSH
2312: LD_EXP 28
2316: PUSH
2317: LD_INT 1
2319: ARRAY
2320: PUSH
2321: LD_INT 4
2323: ARRAY
2324: PPUSH
2325: CALL_OW 448
2329: IFFALSE 2396
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2331: LD_VAR 0 16
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_EXP 28
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 28
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PUSH
2362: LD_INT 2
2364: ARRAY
2365: PPUSH
2366: LD_EXP 28
2370: PUSH
2371: LD_INT 1
2373: ARRAY
2374: PUSH
2375: LD_INT 3
2377: ARRAY
2378: PPUSH
2379: LD_EXP 28
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PUSH
2388: LD_INT 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: LD_INT 1
2403: PPUSH
2404: LD_INT 21
2406: PUSH
2407: LD_INT 3
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 1000
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2454: LD_ADDR_VAR 0 10
2458: PUSH
2459: LD_INT 13
2461: PPUSH
2462: CALL_OW 435
2466: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2467: LD_ADDR_VAR 0 11
2471: PUSH
2472: LD_EXP 26
2476: PPUSH
2477: LD_INT 25
2479: PUSH
2480: LD_INT 4
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 50
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL_OW 72
2501: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2502: LD_ADDR_VAR 0 6
2506: PUSH
2507: LD_INT 1
2509: PPUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 70
2553: ST_TO_ADDR
// if sci then
2554: LD_VAR 0 11
2558: IFFALSE 2717
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2560: LD_ADDR_VAR 0 13
2564: PUSH
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 95
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 120
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PPUSH
2594: CALL_OW 72
2598: ST_TO_ADDR
// if hurtUnits then
2599: LD_VAR 0 13
2603: IFFALSE 2664
// begin for i in sci do
2605: LD_ADDR_VAR 0 1
2609: PUSH
2610: LD_VAR 0 11
2614: PUSH
2615: FOR_IN
2616: IFFALSE 2660
// if IsInUnit ( i ) then
2618: LD_VAR 0 1
2622: PPUSH
2623: CALL_OW 310
2627: IFFALSE 2640
// ComExitBuilding ( i ) else
2629: LD_VAR 0 1
2633: PPUSH
2634: CALL_OW 122
2638: GO 2658
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_VAR 0 13
2649: PUSH
2650: LD_INT 1
2652: ARRAY
2653: PPUSH
2654: CALL_OW 128
2658: GO 2615
2660: POP
2661: POP
// end else
2662: GO 2717
// if lab then
2664: LD_VAR 0 6
2668: IFFALSE 2717
// begin for i in sci do
2670: LD_ADDR_VAR 0 1
2674: PUSH
2675: LD_VAR 0 11
2679: PUSH
2680: FOR_IN
2681: IFFALSE 2715
// if not IsInUnit ( i ) then
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 310
2692: NOT
2693: IFFALSE 2713
// ComEnterUnit ( i , lab [ 1 ] ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 6
2704: PUSH
2705: LD_INT 1
2707: ARRAY
2708: PPUSH
2709: CALL_OW 120
2713: GO 2680
2715: POP
2716: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: LD_EXP 26
2726: PPUSH
2727: LD_INT 25
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 72
2741: ST_TO_ADDR
// if eng then
2742: LD_VAR 0 7
2746: IFFALSE 3521
// begin for i in eng do
2748: LD_ADDR_VAR 0 1
2752: PUSH
2753: LD_VAR 0 7
2757: PUSH
2758: FOR_IN
2759: IFFALSE 3519
// begin tag := GetTag ( i ) ;
2761: LD_ADDR_VAR 0 8
2765: PUSH
2766: LD_VAR 0 1
2770: PPUSH
2771: CALL_OW 110
2775: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2776: LD_VAR 0 1
2780: PPUSH
2781: CALL_OW 256
2785: PUSH
2786: LD_INT 800
2788: LESS
2789: PUSH
2790: LD_VAR 0 8
2794: PUSH
2795: LD_INT 1
2797: NONEQUAL
2798: AND
2799: IFFALSE 2849
// begin SetTag ( i , tHeal ) ;
2801: LD_VAR 0 1
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2813: LD_VAR 0 1
2817: PPUSH
2818: LD_EXP 29
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_EXP 29
2831: PUSH
2832: LD_INT 2
2834: ARRAY
2835: PPUSH
2836: CALL_OW 111
// AddComHold ( i ) ;
2840: LD_VAR 0 1
2844: PPUSH
2845: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2849: LD_VAR 0 8
2853: PUSH
2854: LD_INT 1
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 256
2867: PUSH
2868: LD_INT 1000
2870: EQUAL
2871: AND
2872: IFFALSE 2886
// SetTag ( i , 0 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 109
// if not tag then
2886: LD_VAR 0 8
2890: NOT
2891: IFFALSE 3059
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2893: LD_ADDR_VAR 0 4
2897: PUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 57
2903: PUSH
2904: EMPTY
2905: LIST
2906: PPUSH
2907: CALL_OW 70
2911: ST_TO_ADDR
// if undone then
2912: LD_VAR 0 4
2916: IFFALSE 2938
// begin ComComplete ( i , undone [ 1 ] ) ;
2918: LD_VAR 0 1
2922: PPUSH
2923: LD_VAR 0 4
2927: PUSH
2928: LD_INT 1
2930: ARRAY
2931: PPUSH
2932: CALL 28454 0 2
// continue ;
2936: GO 2758
// end ; if cr or tmp or Count ( amBuildings ) then
2938: LD_VAR 0 10
2942: PUSH
2943: LD_VAR 0 2
2947: OR
2948: PUSH
2949: LD_EXP 30
2953: PPUSH
2954: CALL 22356 0 1
2958: OR
2959: IFFALSE 3035
// begin if IsInUnit ( i ) then
2961: LD_VAR 0 1
2965: PPUSH
2966: CALL_OW 310
2970: IFFALSE 2981
// ComExitBuilding ( i ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: CALL_OW 122
// if tmp then
2981: LD_VAR 0 2
2985: IFFALSE 3001
// SetTag ( i , tRepair ) else
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL_OW 109
2999: GO 3033
// if cr then
3001: LD_VAR 0 10
3005: IFFALSE 3021
// SetTag ( i , tCrates ) else
3007: LD_VAR 0 1
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: CALL_OW 109
3019: GO 3033
// SetTag ( i , tBuild ) ;
3021: LD_VAR 0 1
3025: PPUSH
3026: LD_INT 5
3028: PPUSH
3029: CALL_OW 109
// end else
3033: GO 3059
// if not IsInUnit ( i ) then
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 310
3044: NOT
3045: IFFALSE 3059
// ComEnterUnit ( i , amBase ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 120
// end ; if tag = tRepair then
3059: LD_VAR 0 8
3063: PUSH
3064: LD_INT 3
3066: EQUAL
3067: IFFALSE 3169
// begin if IsInUnit ( i ) then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 310
3078: IFFALSE 3091
// begin ComExitBuilding ( i ) ;
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 122
// continue ;
3089: GO 2758
// end ; if not tmp then
3091: LD_VAR 0 2
3095: NOT
3096: IFFALSE 3112
// begin SetTag ( i , 0 ) ;
3098: LD_VAR 0 1
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: CALL_OW 109
// continue ;
3110: GO 2758
// end ; if not HasTask ( i ) then
3112: LD_VAR 0 1
3116: PPUSH
3117: CALL_OW 314
3121: NOT
3122: IFFALSE 3142
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 2
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 308
3154: NOT
3155: IFFALSE 3169
// ComMoveToArea ( i , amBaseArea ) ;
3157: LD_VAR 0 1
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 113
// end ; if tag = tBuild then
3169: LD_VAR 0 8
3173: PUSH
3174: LD_INT 5
3176: EQUAL
3177: IFFALSE 3372
// begin if IsInUnit ( i ) then
3179: LD_VAR 0 1
3183: PPUSH
3184: CALL_OW 310
3188: IFFALSE 3201
// begin ComExitBuilding ( i ) ;
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 122
// continue ;
3199: GO 2758
// end ; if not Count ( amBuildings ) then
3201: LD_EXP 30
3205: PPUSH
3206: CALL 22356 0 1
3210: NOT
3211: IFFALSE 3229
// begin SetTag ( i , 0 ) ;
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 109
// continue ;
3225: GO 2758
// end else
3227: GO 3266
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3229: LD_INT 2
3231: PPUSH
3232: LD_EXP 30
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: PPUSH
3245: CALL 10768 0 2
3249: NOT
3250: IFFALSE 3266
// begin SetTag ( i , 0 ) ;
3252: LD_VAR 0 1
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 109
// continue ;
3264: GO 2758
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3266: LD_ADDR_VAR 0 4
3270: PUSH
3271: LD_INT 1
3273: PPUSH
3274: LD_INT 57
3276: PUSH
3277: EMPTY
3278: LIST
3279: PPUSH
3280: CALL_OW 70
3284: ST_TO_ADDR
// if undone then
3285: LD_VAR 0 4
3289: IFFALSE 3311
// begin ComComplete ( i , undone [ 1 ] ) ;
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_VAR 0 4
3300: PUSH
3301: LD_INT 1
3303: ARRAY
3304: PPUSH
3305: CALL 28454 0 2
// continue ;
3309: GO 2758
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3311: LD_VAR 0 1
3315: PPUSH
3316: LD_EXP 30
3320: PUSH
3321: LD_INT 1
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_EXP 30
3333: PUSH
3334: LD_INT 1
3336: ARRAY
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: LD_EXP 30
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PUSH
3351: LD_INT 3
3353: ARRAY
3354: PPUSH
3355: LD_EXP 30
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: PUSH
3364: LD_INT 4
3366: ARRAY
3367: PPUSH
3368: CALL_OW 145
// end ; if tag = tCrates then
3372: LD_VAR 0 8
3376: PUSH
3377: LD_INT 2
3379: EQUAL
3380: IFFALSE 3517
// begin if IsInUnit ( i ) then
3382: LD_VAR 0 1
3386: PPUSH
3387: CALL_OW 310
3391: IFFALSE 3404
// begin ComExitBuilding ( i ) ;
3393: LD_VAR 0 1
3397: PPUSH
3398: CALL_OW 122
// continue ;
3402: GO 2758
// end ; if not cr then
3404: LD_VAR 0 10
3408: NOT
3409: IFFALSE 3425
// begin SetTag ( i , 0 ) ;
3411: LD_VAR 0 1
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 109
// continue ;
3423: GO 2758
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3425: LD_VAR 0 1
3429: PPUSH
3430: CALL_OW 314
3434: NOT
3435: PUSH
3436: LD_INT 81
3438: PUSH
3439: LD_VAR 0 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 92
3450: PUSH
3451: LD_VAR 0 10
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: PUSH
3460: LD_VAR 0 10
3464: PUSH
3465: LD_INT 2
3467: ARRAY
3468: PUSH
3469: LD_INT 12
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PPUSH
3482: CALL_OW 69
3486: NOT
3487: AND
3488: IFFALSE 3517
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3490: LD_VAR 0 1
3494: PPUSH
3495: LD_VAR 0 10
3499: PUSH
3500: LD_INT 1
3502: ARRAY
3503: PPUSH
3504: LD_VAR 0 10
3508: PUSH
3509: LD_INT 2
3511: ARRAY
3512: PPUSH
3513: CALL_OW 117
// end ; end ;
3517: GO 2758
3519: POP
3520: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3521: LD_ADDR_VAR 0 12
3525: PUSH
3526: LD_EXP 26
3530: PPUSH
3531: LD_INT 2
3533: PUSH
3534: LD_INT 25
3536: PUSH
3537: LD_INT 1
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 25
3546: PUSH
3547: LD_INT 5
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 50
3561: PUSH
3562: EMPTY
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 72
3573: PUSH
3574: LD_EXP 32
3578: UNION
3579: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3580: LD_ADDR_VAR 0 14
3584: PUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_INT 81
3590: PUSH
3591: LD_VAR 0 5
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 70
3604: ST_TO_ADDR
// if sol then
3605: LD_VAR 0 12
3609: IFFALSE 4121
// begin if enemyInBase then
3611: LD_VAR 0 14
3615: IFFALSE 3760
// begin for i in sol do
3617: LD_ADDR_VAR 0 1
3621: PUSH
3622: LD_VAR 0 12
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3756
// begin tw := IsInUnit ( i ) ;
3630: LD_ADDR_VAR 0 9
3634: PUSH
3635: LD_VAR 0 1
3639: PPUSH
3640: CALL_OW 310
3644: ST_TO_ADDR
// if tw then
3645: LD_VAR 0 9
3649: IFFALSE 3730
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3651: LD_VAR 0 9
3655: PUSH
3656: LD_INT 22
3658: PUSH
3659: LD_VAR 0 5
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 101
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: LD_INT 30
3683: PUSH
3684: LD_INT 32
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 30
3693: PUSH
3694: LD_INT 31
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 69
3715: IN
3716: NOT
3717: IFFALSE 3728
// ComExitBuilding ( i ) ;
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 122
// end else
3728: GO 3754
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3730: LD_VAR 0 1
3734: PPUSH
3735: LD_VAR 0 14
3739: PPUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 74
3749: PPUSH
3750: CALL_OW 115
// end ;
3754: GO 3627
3756: POP
3757: POP
// end else
3758: GO 4121
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3760: LD_ADDR_VAR 0 15
3764: PUSH
3765: LD_INT 1
3767: PPUSH
3768: LD_INT 3
3770: PUSH
3771: LD_INT 62
3773: PUSH
3774: EMPTY
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 32
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 30
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 30
3806: PUSH
3807: LD_INT 5
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 30
3816: PUSH
3817: LD_INT 31
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PPUSH
3835: CALL_OW 70
3839: ST_TO_ADDR
// if empty then
3840: LD_VAR 0 15
3844: IFFALSE 3861
// empty := ReverseArray ( empty ) ;
3846: LD_ADDR_VAR 0 15
3850: PUSH
3851: LD_VAR 0 15
3855: PPUSH
3856: CALL 53232 0 1
3860: ST_TO_ADDR
// for i in sol do
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_VAR 0 12
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4119
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 8
3878: PUSH
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 256
3898: PUSH
3899: LD_INT 1000
3901: LESS
3902: PUSH
3903: LD_VAR 0 8
3907: PUSH
3908: LD_INT 1
3910: NONEQUAL
3911: AND
3912: IFFALSE 3964
// begin SetTag ( i , tHeal ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 1
3921: PPUSH
3922: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3926: LD_VAR 0 1
3930: PPUSH
3931: LD_EXP 29
3935: PUSH
3936: LD_INT 1
3938: ARRAY
3939: PPUSH
3940: LD_EXP 29
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// continue ;
3962: GO 3871
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 256
3973: PUSH
3974: LD_INT 1000
3976: EQUAL
3977: PUSH
3978: LD_VAR 0 8
3982: PUSH
3983: LD_INT 1
3985: EQUAL
3986: AND
3987: IFFALSE 4003
// begin SetTag ( i , 0 ) ;
3989: LD_VAR 0 1
3993: PPUSH
3994: LD_INT 0
3996: PPUSH
3997: CALL_OW 109
// continue ;
4001: GO 3871
// end ; if HasTask ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 314
4012: IFFALSE 4016
// continue ;
4014: GO 3871
// if not IsInUnit ( i ) and not tag and empty then
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 310
4025: NOT
4026: PUSH
4027: LD_VAR 0 8
4031: NOT
4032: AND
4033: PUSH
4034: LD_VAR 0 15
4038: AND
4039: IFFALSE 4117
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 15
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4059: LD_VAR 0 15
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: PPUSH
4068: CALL_OW 266
4072: PUSH
4073: LD_INT 5
4075: EQUAL
4076: PUSH
4077: LD_INT 50
4079: PPUSH
4080: CALL_OW 13
4084: AND
4085: IFFALSE 4099
// AddComChangeProfession ( i , class_sniper ) ;
4087: LD_VAR 0 1
4091: PPUSH
4092: LD_INT 5
4094: PPUSH
4095: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4099: LD_ADDR_VAR 0 15
4103: PUSH
4104: LD_VAR 0 15
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 3
4116: ST_TO_ADDR
// end ; end ;
4117: GO 3871
4119: POP
4120: POP
// end ; end ; end ;
4121: PPOPN 18
4123: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4124: LD_EXP 33
4128: PPUSH
4129: CALL_OW 302
4133: PUSH
4134: LD_EXP 3
4138: AND
4139: IFFALSE 4421
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin enable ;
4148: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 81
4159: PUSH
4160: LD_INT 1
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 50
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 70
4181: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4182: LD_ADDR_VAR 0 1
4186: PUSH
4187: LD_INT 17
4189: PPUSH
4190: CALL_OW 435
4194: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4195: LD_EXP 33
4199: PPUSH
4200: CALL_OW 261
4204: PUSH
4205: LD_INT 10
4207: LESS
4208: PUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 33
4216: PPUSH
4217: CALL_OW 292
4221: NOT
4222: AND
4223: PUSH
4224: LD_EXP 33
4228: PPUSH
4229: CALL_OW 262
4233: PUSH
4234: LD_INT 1
4236: EQUAL
4237: AND
4238: IFFALSE 4252
// SetFuel ( amCargo , 100 ) ;
4240: LD_EXP 33
4244: PPUSH
4245: LD_INT 100
4247: PPUSH
4248: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4252: LD_EXP 33
4256: PPUSH
4257: CALL_OW 314
4261: NOT
4262: PUSH
4263: LD_EXP 33
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 289
4275: PUSH
4276: LD_INT 100
4278: LESS
4279: AND
4280: PUSH
4281: LD_VAR 0 2
4285: NOT
4286: AND
4287: IFFALSE 4353
// begin if cr then
4289: LD_VAR 0 1
4293: IFFALSE 4324
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4295: LD_EXP 33
4299: PPUSH
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: LD_VAR 0 1
4313: PUSH
4314: LD_INT 2
4316: ARRAY
4317: PPUSH
4318: CALL_OW 117
4322: GO 4351
// if not IsInArea ( amCargo , cratesWestArea ) then
4324: LD_EXP 33
4328: PPUSH
4329: LD_INT 17
4331: PPUSH
4332: CALL_OW 308
4336: NOT
4337: IFFALSE 4351
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4339: LD_EXP 33
4343: PPUSH
4344: LD_INT 17
4346: PPUSH
4347: CALL_OW 113
// exit ;
4351: GO 4421
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4353: LD_VAR 0 2
4357: PUSH
4358: LD_EXP 33
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 308
4370: NOT
4371: AND
4372: IFFALSE 4391
// ComMoveXY ( amCargo , 93 , 137 ) else
4374: LD_EXP 33
4378: PPUSH
4379: LD_INT 93
4381: PPUSH
4382: LD_INT 137
4384: PPUSH
4385: CALL_OW 111
4389: GO 4421
// if GetCargo ( amCargo , mat_cans ) = 100 then
4391: LD_EXP 33
4395: PPUSH
4396: LD_INT 1
4398: PPUSH
4399: CALL_OW 289
4403: PUSH
4404: LD_INT 100
4406: EQUAL
4407: IFFALSE 4421
// ComGive ( amCargo , amBase ) ;
4409: LD_EXP 33
4413: PPUSH
4414: LD_INT 2
4416: PPUSH
4417: CALL_OW 161
// end ;
4421: PPOPN 2
4423: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4424: LD_EXP 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 3
4441: PUSH
4442: LD_INT 60
4444: PUSH
4445: EMPTY
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 50
4454: PUSH
4455: EMPTY
4456: LIST
4457: PUSH
4458: LD_INT 34
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: PPUSH
4474: CALL_OW 69
4478: AND
4479: PUSH
4480: LD_INT 22
4482: PUSH
4483: LD_INT 1
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 3
4492: PUSH
4493: LD_INT 24
4495: PUSH
4496: LD_INT 1000
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: LD_INT 3
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: AND
4527: IFFALSE 4760
4529: GO 4531
4531: DISABLE
4532: LD_INT 0
4534: PPUSH
4535: PPUSH
4536: PPUSH
// begin enable ;
4537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 3
4555: PUSH
4556: LD_INT 24
4558: PUSH
4559: LD_INT 1000
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 69
4589: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_INT 1
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 3
4607: PUSH
4608: LD_INT 24
4610: PUSH
4611: LD_INT 600
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4642: LD_ADDR_VAR 0 1
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 60
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 50
4672: PUSH
4673: EMPTY
4674: LIST
4675: PUSH
4676: LD_INT 34
4678: PUSH
4679: LD_INT 13
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 69
4696: PUSH
4697: FOR_IN
4698: IFFALSE 4758
// begin if tmp2 then
4700: LD_VAR 0 3
4704: IFFALSE 4732
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4706: LD_VAR 0 1
4710: PPUSH
4711: LD_VAR 0 3
4715: PPUSH
4716: LD_VAR 0 1
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 130
4730: GO 4756
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4732: LD_VAR 0 1
4736: PPUSH
4737: LD_VAR 0 2
4741: PPUSH
4742: LD_VAR 0 1
4746: PPUSH
4747: CALL_OW 74
4751: PPUSH
4752: CALL_OW 130
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: PPOPN 3
4762: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4763: LD_EXP 34
4767: PUSH
4768: LD_EXP 19
4772: AND
4773: PUSH
4774: LD_EXP 11
4778: NOT
4779: AND
4780: IFFALSE 5105
4782: GO 4784
4784: DISABLE
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
4791: PPUSH
4792: PPUSH
4793: PPUSH
// begin enable ;
4794: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_INT 30
4802: PUSH
4803: LD_INT 31
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 32
4812: PUSH
4813: LD_INT 33
4815: PUSH
4816: LD_INT 34
4818: PUSH
4819: LD_INT 35
4821: PUSH
4822: LD_INT 33
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 36
4834: PUSH
4835: LD_INT 37
4837: PUSH
4838: LD_INT 38
4840: PUSH
4841: LD_INT 39
4843: PUSH
4844: LD_INT 40
4846: PUSH
4847: LD_INT 41
4849: PUSH
4850: LD_INT 42
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
// for i in amPatrol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_EXP 34
4880: PUSH
4881: FOR_IN
4882: IFFALSE 5103
// begin if See ( 2 , i ) then
4884: LD_INT 2
4886: PPUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 292
4896: IFFALSE 4999
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4898: LD_ADDR_VAR 0 7
4902: PUSH
4903: LD_INT 22
4905: PUSH
4906: LD_INT 2
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PPUSH
4913: CALL_OW 69
4917: PPUSH
4918: LD_VAR 0 1
4922: PPUSH
4923: CALL_OW 74
4927: ST_TO_ADDR
// if enemy then
4928: LD_VAR 0 7
4932: IFFALSE 4999
// begin x := GetX ( enemy ) ;
4934: LD_ADDR_VAR 0 4
4938: PUSH
4939: LD_VAR 0 7
4943: PPUSH
4944: CALL_OW 250
4948: ST_TO_ADDR
// y := GetY ( enemy ) ;
4949: LD_ADDR_VAR 0 5
4953: PUSH
4954: LD_VAR 0 7
4958: PPUSH
4959: CALL_OW 251
4963: ST_TO_ADDR
// if ValidHex ( x , y ) then
4964: LD_VAR 0 4
4968: PPUSH
4969: LD_VAR 0 5
4973: PPUSH
4974: CALL_OW 488
4978: IFFALSE 4999
// ComAgressiveMove ( i , x , y ) ;
4980: LD_VAR 0 1
4984: PPUSH
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_VAR 0 5
4994: PPUSH
4995: CALL_OW 114
// end ; end ; if HasTask ( i ) then
4999: LD_VAR 0 1
5003: PPUSH
5004: CALL_OW 314
5008: IFFALSE 5012
// continue ;
5010: GO 4881
// tag := GetTag ( i ) ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_VAR 0 1
5021: PPUSH
5022: CALL_OW 110
5026: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5027: LD_ADDR_VAR 0 2
5031: PUSH
5032: DOUBLE
5033: LD_INT 1
5035: DEC
5036: ST_TO_ADDR
5037: LD_VAR 0 3
5041: PUSH
5042: LD_VAR 0 6
5046: ARRAY
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5099
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 6
5065: ARRAY
5066: PUSH
5067: LD_VAR 0 2
5071: ARRAY
5072: PPUSH
5073: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_INT 175
5084: PPUSH
5085: LD_INT 385
5087: PPUSH
5088: CALL_OW 12
5092: PPUSH
5093: CALL_OW 202
// end ;
5097: GO 5048
5099: POP
5100: POP
// end ;
5101: GO 4881
5103: POP
5104: POP
// end ;
5105: PPOPN 7
5107: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5108: LD_EXP 31
5112: PPUSH
5113: CALL 22356 0 1
5117: PUSH
5118: LD_INT 5
5120: LESS
5121: PUSH
5122: LD_EXP 3
5126: AND
5127: PUSH
5128: LD_EXP 8
5132: AND
5133: PUSH
5134: LD_EXP 7
5138: AND
5139: IFFALSE 5333
5141: GO 5143
5143: DISABLE
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
// begin enable ;
5149: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5150: LD_ADDR_VAR 0 2
5154: PUSH
5155: LD_INT 3
5157: PUSH
5158: LD_INT 9
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 4
5167: PUSH
5168: LD_INT 9
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 4
5177: PUSH
5178: LD_INT 6
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 3
5187: PUSH
5188: LD_INT 5
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 2
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 1
5207: PUSH
5208: LD_INT 2
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
5223: LD_ADDR_VAR 0 1
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 3
5235: PUSH
5236: LD_INT 4
5238: PUSH
5239: LD_INT 5
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5331
// begin part := parts [ rand ( 1 , parts ) ] ;
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_VAR 0 2
5269: PUSH
5270: LD_INT 1
5272: PPUSH
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 12
5282: ARRAY
5283: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5284: LD_ADDR_EXP 28
5288: PUSH
5289: LD_EXP 28
5293: PPUSH
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: PUSH
5303: LD_INT 1
5305: PUSH
5306: LD_INT 2
5308: PUSH
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 2
5316: ARRAY
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: CALL 57956 0 2
5328: ST_TO_ADDR
5329: GO 5257
5331: POP
5332: POP
// end ;
5333: PPOPN 3
5335: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5336: LD_EXP 11
5340: NOT
5341: PUSH
5342: LD_EXP 31
5346: PPUSH
5347: CALL 22356 0 1
5351: AND
5352: PUSH
5353: LD_EXP 8
5357: AND
5358: PUSH
5359: LD_EXP 7
5363: AND
5364: IFFALSE 5573
5366: GO 5368
5368: DISABLE
5369: LD_INT 0
5371: PPUSH
5372: PPUSH
5373: PPUSH
// begin enable ;
5374: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5375: LD_ADDR_VAR 0 2
5379: PUSH
5380: LD_EXP 31
5384: PPUSH
5385: LD_INT 61
5387: PUSH
5388: EMPTY
5389: LIST
5390: PUSH
5391: LD_INT 50
5393: PUSH
5394: EMPTY
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 72
5405: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5406: LD_ADDR_EXP 31
5410: PUSH
5411: LD_EXP 31
5415: PUSH
5416: LD_VAR 0 2
5420: DIFF
5421: ST_TO_ADDR
// if not tmp then
5422: LD_VAR 0 2
5426: NOT
5427: IFFALSE 5431
// exit ;
5429: GO 5573
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5431: LD_ADDR_VAR 0 3
5435: PUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_INT 34
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PPUSH
5451: CALL_OW 72
5455: ST_TO_ADDR
// if tmp2 then
5456: LD_VAR 0 3
5460: IFFALSE 5477
// ComMoveXY ( tmp2 , 241 , 99 ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 241
5469: PPUSH
5470: LD_INT 99
5472: PPUSH
5473: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5477: LD_INT 35
5479: PPUSH
5480: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5484: LD_ADDR_VAR 0 2
5488: PUSH
5489: LD_VAR 0 2
5493: PPUSH
5494: LD_INT 50
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 72
5504: ST_TO_ADDR
// for i in tmp do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_VAR 0 2
5514: PUSH
5515: FOR_IN
5516: IFFALSE 5564
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: LD_INT 187
5525: PUSH
5526: LD_INT 114
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 203
5535: PUSH
5536: LD_INT 113
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 218
5545: PUSH
5546: LD_INT 108
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: PPUSH
5558: CALL 60560 0 2
5562: GO 5515
5564: POP
5565: POP
// until not tmp ;
5566: LD_VAR 0 2
5570: NOT
5571: IFFALSE 5477
// end ; end_of_file
5573: PPOPN 3
5575: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5576: LD_INT 0
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
5584: PPUSH
// uc_side := 8 ;
5585: LD_ADDR_OWVAR 20
5589: PUSH
5590: LD_INT 8
5592: ST_TO_ADDR
// uc_nation := nation_arabian ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_INT 2
5600: ST_TO_ADDR
// legForces := [ ] ;
5601: LD_ADDR_EXP 36
5605: PUSH
5606: EMPTY
5607: ST_TO_ADDR
// legEForces := [ ] ;
5608: LD_ADDR_EXP 37
5612: PUSH
5613: EMPTY
5614: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5615: LD_ADDR_EXP 38
5619: PUSH
5620: LD_INT 8
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: LD_INT 1
5628: PPUSH
5629: CALL 20317 0 3
5633: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5634: LD_ADDR_EXP 39
5638: PUSH
5639: LD_INT 13
5641: PUSH
5642: LD_INT 1
5644: PUSH
5645: LD_INT 2
5647: PUSH
5648: LD_INT 32
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: PUSH
5657: EMPTY
5658: LIST
5659: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5660: LD_ADDR_EXP 40
5664: PUSH
5665: LD_INT 195
5667: PUSH
5668: LD_INT 15
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: ST_TO_ADDR
// legBuildings := [ ] ;
5675: LD_ADDR_EXP 41
5679: PUSH
5680: EMPTY
5681: ST_TO_ADDR
// legTanks := [ ] ;
5682: LD_ADDR_EXP 42
5686: PUSH
5687: EMPTY
5688: ST_TO_ADDR
// legRTanks := [ ] ;
5689: LD_ADDR_EXP 43
5693: PUSH
5694: EMPTY
5695: ST_TO_ADDR
// legCargo := 0 ;
5696: LD_ADDR_EXP 44
5700: PUSH
5701: LD_INT 0
5703: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5704: LD_ADDR_VAR 0 7
5708: PUSH
5709: LD_INT 219
5711: PUSH
5712: LD_INT 31
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: LD_INT 166
5721: PUSH
5722: LD_INT 31
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: ST_TO_ADDR
// for i in sources do
5733: LD_ADDR_VAR 0 2
5737: PUSH
5738: LD_VAR 0 7
5742: PUSH
5743: FOR_IN
5744: IFFALSE 5773
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
5746: LD_VAR 0 2
5750: PUSH
5751: LD_INT 1
5753: ARRAY
5754: PPUSH
5755: LD_VAR 0 2
5759: PUSH
5760: LD_INT 2
5762: ARRAY
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL_OW 441
5771: GO 5743
5773: POP
5774: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
5775: LD_INT 38
5777: PPUSH
5778: CALL_OW 274
5782: PPUSH
5783: LD_INT 1
5785: PPUSH
5786: LD_INT 650
5788: PPUSH
5789: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
5793: LD_INT 38
5795: PPUSH
5796: CALL_OW 274
5800: PPUSH
5801: LD_INT 2
5803: PPUSH
5804: LD_INT 120
5806: PPUSH
5807: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
5811: LD_INT 38
5813: PPUSH
5814: CALL_OW 274
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 50
5824: PPUSH
5825: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5829: LD_ADDR_VAR 0 6
5833: PUSH
5834: LD_INT 6
5836: PUSH
5837: LD_INT 7
5839: PUSH
5840: LD_INT 8
5842: PUSH
5843: LD_INT 9
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: PUSH
5852: LD_OWVAR 67
5856: ARRAY
5857: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
5858: LD_ADDR_EXP 35
5862: PUSH
5863: LD_STRING Farmer
5865: PPUSH
5866: LD_INT 0
5868: PPUSH
5869: LD_STRING 
5871: PPUSH
5872: CALL 20254 0 3
5876: ST_TO_ADDR
// for i := 1 to 4 do
5877: LD_ADDR_VAR 0 2
5881: PUSH
5882: DOUBLE
5883: LD_INT 1
5885: DEC
5886: ST_TO_ADDR
5887: LD_INT 4
5889: PUSH
5890: FOR_TO
5891: IFFALSE 6408
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: DOUBLE
5899: LD_INT 1
5901: DEC
5902: ST_TO_ADDR
5903: LD_INT 7
5905: PUSH
5906: LD_INT 8
5908: PUSH
5909: LD_INT 9
5911: PUSH
5912: LD_INT 11
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: PUSH
5921: LD_OWVAR 67
5925: ARRAY
5926: PUSH
5927: LD_INT 3
5929: PUSH
5930: LD_INT 4
5932: PUSH
5933: LD_INT 5
5935: PUSH
5936: LD_INT 5
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PUSH
5945: LD_OWVAR 67
5949: ARRAY
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: LD_INT 2
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: LD_INT 3
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: PUSH
5972: LD_OWVAR 67
5976: ARRAY
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: PUSH
5984: LD_VAR 0 2
5988: ARRAY
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6404
// begin PrepareHuman ( false , i , skill ) ;
5993: LD_INT 0
5995: PPUSH
5996: LD_VAR 0 2
6000: PPUSH
6001: LD_VAR 0 6
6005: PPUSH
6006: CALL_OW 380
// un := CreateHuman ;
6010: LD_ADDR_VAR 0 5
6014: PUSH
6015: CALL_OW 44
6019: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6020: LD_ADDR_EXP 36
6024: PUSH
6025: LD_EXP 36
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 57956 0 2
6039: ST_TO_ADDR
// case i of 1 :
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 1
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6122
6053: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6054: LD_ADDR_VAR 0 4
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 8
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 2
6071: PUSH
6072: LD_INT 30
6074: PUSH
6075: LD_INT 32
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 30
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 62
6102: PUSH
6103: EMPTY
6104: LIST
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 69
6119: ST_TO_ADDR
6120: GO 6301
6122: LD_INT 2
6124: DOUBLE
6125: EQUAL
6126: IFTRUE 6130
6128: GO 6159
6130: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6131: LD_ADDR_VAR 0 4
6135: PUSH
6136: LD_INT 38
6138: PPUSH
6139: LD_INT 3
6141: PUSH
6142: LD_INT 62
6144: PUSH
6145: EMPTY
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 72
6156: ST_TO_ADDR
6157: GO 6301
6159: LD_INT 3
6161: DOUBLE
6162: EQUAL
6163: IFTRUE 6167
6165: GO 6241
6167: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6168: LD_ADDR_VAR 0 4
6172: PUSH
6173: LD_INT 22
6175: PUSH
6176: LD_INT 8
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 3
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 30
6198: PUSH
6199: LD_INT 36
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: LD_INT 62
6216: PUSH
6217: EMPTY
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: PPUSH
6229: CALL_OW 69
6233: PPUSH
6234: CALL 53232 0 1
6238: ST_TO_ADDR
6239: GO 6301
6241: LD_INT 4
6243: DOUBLE
6244: EQUAL
6245: IFTRUE 6249
6247: GO 6300
6249: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6250: LD_ADDR_VAR 0 4
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_INT 8
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 30
6267: PUSH
6268: LD_INT 8
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: LD_INT 62
6280: PUSH
6281: EMPTY
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 69
6297: ST_TO_ADDR
6298: GO 6301
6300: POP
// if b then
6301: LD_VAR 0 4
6305: IFFALSE 6381
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6307: LD_VAR 0 4
6311: PUSH
6312: LD_INT 1
6314: ARRAY
6315: PPUSH
6316: CALL_OW 266
6320: PUSH
6321: LD_INT 5
6323: EQUAL
6324: IFFALSE 6361
// if Prob ( 50 ) then
6326: LD_INT 50
6328: PPUSH
6329: CALL_OW 13
6333: IFFALSE 6349
// SetClass ( un , class_mortar ) else
6335: LD_VAR 0 5
6339: PPUSH
6340: LD_INT 8
6342: PPUSH
6343: CALL_OW 336
6347: GO 6361
// SetClass ( un , class_sniper ) ;
6349: LD_VAR 0 5
6353: PPUSH
6354: LD_INT 5
6356: PPUSH
6357: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6361: LD_VAR 0 5
6365: PPUSH
6366: LD_VAR 0 4
6370: PUSH
6371: LD_INT 1
6373: ARRAY
6374: PPUSH
6375: CALL_OW 52
// end else
6379: GO 6402
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6381: LD_VAR 0 5
6385: PPUSH
6386: LD_INT 188
6388: PPUSH
6389: LD_INT 21
6391: PPUSH
6392: LD_INT 4
6394: PPUSH
6395: LD_INT 0
6397: PPUSH
6398: CALL_OW 50
// end ;
6402: GO 5990
6404: POP
6405: POP
6406: GO 5890
6408: POP
6409: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6410: LD_ADDR_VAR 0 4
6414: PUSH
6415: LD_INT 22
6417: PUSH
6418: LD_INT 8
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: LD_INT 30
6430: PUSH
6431: LD_INT 32
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 30
6440: PUSH
6441: LD_INT 5
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: PUSH
6453: LD_INT 3
6455: PUSH
6456: LD_INT 62
6458: PUSH
6459: EMPTY
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: PPUSH
6471: CALL_OW 69
6475: ST_TO_ADDR
// if b then
6476: LD_VAR 0 4
6480: IFFALSE 6547
// begin for i in b do
6482: LD_ADDR_VAR 0 2
6486: PUSH
6487: LD_VAR 0 4
6491: PUSH
6492: FOR_IN
6493: IFFALSE 6545
// begin PrepareApemanSoldier ( ) ;
6495: CALL 54066 0 0
// un := CreateHuman ;
6499: LD_ADDR_VAR 0 5
6503: PUSH
6504: CALL_OW 44
6508: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6509: LD_ADDR_EXP 36
6513: PUSH
6514: LD_EXP 36
6518: PPUSH
6519: LD_VAR 0 5
6523: PPUSH
6524: CALL 57956 0 2
6528: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6529: LD_VAR 0 5
6533: PPUSH
6534: LD_VAR 0 2
6538: PPUSH
6539: CALL_OW 52
// end ;
6543: GO 6492
6545: POP
6546: POP
// end ; for i := 1 to 2 do
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: DOUBLE
6553: LD_INT 1
6555: DEC
6556: ST_TO_ADDR
6557: LD_INT 2
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6688
// begin uc_nation := nation_arabian ;
6563: LD_ADDR_OWVAR 21
6567: PUSH
6568: LD_INT 2
6570: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6571: LD_INT 13
6573: PPUSH
6574: LD_INT 2
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: LD_INT 31
6582: PPUSH
6583: LD_INT 100
6585: PPUSH
6586: CALL 25094 0 5
// un := CreateVehicle ;
6590: LD_ADDR_VAR 0 5
6594: PUSH
6595: CALL_OW 45
6599: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6600: LD_VAR 0 5
6604: PPUSH
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 5
6610: PPUSH
6611: CALL_OW 12
6615: PPUSH
6616: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6620: LD_VAR 0 5
6624: PPUSH
6625: LD_INT 199
6627: PPUSH
6628: LD_INT 24
6630: PPUSH
6631: LD_INT 4
6633: PPUSH
6634: LD_INT 0
6636: PPUSH
6637: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6641: LD_INT 0
6643: PPUSH
6644: LD_INT 8
6646: PUSH
6647: LD_INT 9
6649: PUSH
6650: LD_INT 10
6652: PUSH
6653: LD_INT 10
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PUSH
6662: LD_OWVAR 67
6666: ARRAY
6667: PPUSH
6668: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6672: CALL_OW 44
6676: PPUSH
6677: LD_VAR 0 5
6681: PPUSH
6682: CALL_OW 52
// end ;
6686: GO 6560
6688: POP
6689: POP
// end ;
6690: LD_VAR 0 1
6694: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6695: LD_EXP 4
6699: PUSH
6700: LD_EXP 36
6704: PPUSH
6705: CALL 22356 0 1
6709: AND
6710: IFFALSE 9083
6712: GO 6714
6714: DISABLE
6715: LD_INT 0
6717: PPUSH
6718: PPUSH
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
6725: PPUSH
6726: PPUSH
6727: PPUSH
6728: PPUSH
6729: PPUSH
6730: PPUSH
6731: PPUSH
6732: PPUSH
6733: PPUSH
6734: PPUSH
// begin enable ;
6735: ENABLE
// side := 8 ;
6736: LD_ADDR_VAR 0 5
6740: PUSH
6741: LD_INT 8
6743: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_VAR 0 5
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 33
6763: PUSH
6764: LD_INT 2
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 50
6773: PUSH
6774: EMPTY
6775: LIST
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 61
6782: PUSH
6783: EMPTY
6784: LIST
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: PPUSH
6796: CALL_OW 69
6800: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
6801: LD_VAR 0 3
6805: PUSH
6806: LD_INT 22
6808: PUSH
6809: LD_VAR 0 5
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: LD_INT 50
6820: PUSH
6821: EMPTY
6822: LIST
6823: PUSH
6824: LD_INT 34
6826: PUSH
6827: LD_INT 31
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: PPUSH
6839: CALL_OW 69
6843: PPUSH
6844: CALL 22356 0 1
6848: AND
6849: IFFALSE 6877
// for i in remote do
6851: LD_ADDR_VAR 0 1
6855: PUSH
6856: LD_VAR 0 3
6860: PUSH
6861: FOR_IN
6862: IFFALSE 6875
// Connect ( i ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL 28562 0 1
6873: GO 6861
6875: POP
6876: POP
// if legTech then
6877: LD_EXP 38
6881: IFFALSE 7037
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: LD_INT 22
6890: PUSH
6891: LD_VAR 0 5
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 50
6902: PUSH
6903: EMPTY
6904: LIST
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: LD_INT 30
6911: PUSH
6912: LD_INT 6
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 30
6921: PUSH
6922: LD_INT 7
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 30
6931: PUSH
6932: LD_INT 8
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: ST_TO_ADDR
// if lab then
6955: LD_VAR 0 6
6959: IFFALSE 7037
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6961: LD_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: ARRAY
6969: PPUSH
6970: CALL_OW 461
6974: PUSH
6975: LD_INT 2
6977: EQUAL
6978: IFFALSE 7037
// begin for i in legTech do
6980: LD_ADDR_VAR 0 1
6984: PUSH
6985: LD_EXP 38
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7035
// if CanBeResearched ( lab [ 1 ] , i ) then
6993: LD_VAR 0 6
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 430
7011: IFFALSE 7033
// begin ComResearch ( lab [ 1 ] , i ) ;
7013: LD_VAR 0 6
7017: PUSH
7018: LD_INT 1
7020: ARRAY
7021: PPUSH
7022: LD_VAR 0 1
7026: PPUSH
7027: CALL_OW 124
// break ;
7031: GO 7035
// end ;
7033: GO 6990
7035: POP
7036: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7037: LD_ADDR_VAR 0 16
7041: PUSH
7042: LD_INT 2
7044: PPUSH
7045: LD_INT 22
7047: PUSH
7048: LD_VAR 0 5
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 30
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 50
7069: PUSH
7070: EMPTY
7071: LIST
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PPUSH
7078: CALL_OW 70
7082: ST_TO_ADDR
// if fac then
7083: LD_VAR 0 16
7087: IFFALSE 7353
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7089: LD_VAR 0 16
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 461
7102: PUSH
7103: LD_INT 2
7105: EQUAL
7106: IFFALSE 7353
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7108: LD_ADDR_VAR 0 17
7112: PUSH
7113: LD_INT 2
7115: PPUSH
7116: LD_INT 2
7118: PUSH
7119: LD_INT 30
7121: PUSH
7122: LD_INT 32
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 30
7131: PUSH
7132: LD_INT 33
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: LD_INT 35
7146: PUSH
7147: LD_INT 0
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PPUSH
7158: CALL_OW 70
7162: ST_TO_ADDR
// if emptyTowers then
7163: LD_VAR 0 17
7167: IFFALSE 7215
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7169: LD_ADDR_VAR 0 18
7173: PUSH
7174: LD_VAR 0 17
7178: PUSH
7179: LD_INT 1
7181: ARRAY
7182: PPUSH
7183: LD_INT 2
7185: PPUSH
7186: CALL 30601 0 2
7190: ST_TO_ADDR
// if weapon then
7191: LD_VAR 0 18
7195: IFFALSE 7215
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7197: LD_VAR 0 17
7201: PUSH
7202: LD_INT 1
7204: ARRAY
7205: PPUSH
7206: LD_VAR 0 18
7210: PPUSH
7211: CALL_OW 148
// end ; if legConstructList then
7215: LD_EXP 39
7219: IFFALSE 7353
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7221: LD_VAR 0 16
7225: PUSH
7226: LD_INT 1
7228: ARRAY
7229: PPUSH
7230: LD_EXP 39
7234: PUSH
7235: LD_INT 1
7237: ARRAY
7238: PUSH
7239: LD_INT 1
7241: ARRAY
7242: PPUSH
7243: LD_EXP 39
7247: PUSH
7248: LD_INT 1
7250: ARRAY
7251: PUSH
7252: LD_INT 2
7254: ARRAY
7255: PPUSH
7256: LD_EXP 39
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PUSH
7265: LD_INT 3
7267: ARRAY
7268: PPUSH
7269: LD_EXP 39
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PUSH
7278: LD_INT 4
7280: ARRAY
7281: PPUSH
7282: CALL_OW 448
7286: IFFALSE 7353
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7288: LD_VAR 0 16
7292: PUSH
7293: LD_INT 1
7295: ARRAY
7296: PPUSH
7297: LD_EXP 39
7301: PUSH
7302: LD_INT 1
7304: ARRAY
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: LD_EXP 39
7314: PUSH
7315: LD_INT 1
7317: ARRAY
7318: PUSH
7319: LD_INT 2
7321: ARRAY
7322: PPUSH
7323: LD_EXP 39
7327: PUSH
7328: LD_INT 1
7330: ARRAY
7331: PUSH
7332: LD_INT 3
7334: ARRAY
7335: PPUSH
7336: LD_EXP 39
7340: PUSH
7341: LD_INT 1
7343: ARRAY
7344: PUSH
7345: LD_INT 4
7347: ARRAY
7348: PPUSH
7349: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7353: LD_ADDR_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: PPUSH
7361: LD_INT 21
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: LD_INT 57
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: LD_INT 24
7389: PUSH
7390: LD_INT 1000
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: LIST
7405: PPUSH
7406: CALL_OW 70
7410: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7411: LD_ADDR_VAR 0 10
7415: PUSH
7416: LD_INT 14
7418: PPUSH
7419: CALL_OW 435
7423: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7424: LD_ADDR_VAR 0 11
7428: PUSH
7429: LD_EXP 36
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 4
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 50
7446: PUSH
7447: EMPTY
7448: LIST
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PPUSH
7454: CALL_OW 72
7458: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7459: LD_ADDR_VAR 0 6
7463: PUSH
7464: LD_INT 2
7466: PPUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 30
7472: PUSH
7473: LD_INT 6
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 30
7482: PUSH
7483: LD_INT 7
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 30
7492: PUSH
7493: LD_INT 8
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PPUSH
7506: CALL_OW 70
7510: ST_TO_ADDR
// if sci then
7511: LD_VAR 0 11
7515: IFFALSE 7674
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7517: LD_ADDR_VAR 0 13
7521: PUSH
7522: LD_EXP 36
7526: PPUSH
7527: LD_INT 95
7529: PUSH
7530: LD_INT 2
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 120
7539: PUSH
7540: LD_INT 1
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PPUSH
7551: CALL_OW 72
7555: ST_TO_ADDR
// if hurtUnits then
7556: LD_VAR 0 13
7560: IFFALSE 7621
// begin for i in sci do
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: LD_VAR 0 11
7571: PUSH
7572: FOR_IN
7573: IFFALSE 7617
// if IsInUnit ( i ) then
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 310
7584: IFFALSE 7597
// ComExitBuilding ( i ) else
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 122
7595: GO 7615
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7597: LD_VAR 0 1
7601: PPUSH
7602: LD_VAR 0 13
7606: PUSH
7607: LD_INT 1
7609: ARRAY
7610: PPUSH
7611: CALL_OW 128
7615: GO 7572
7617: POP
7618: POP
// end else
7619: GO 7674
// if lab then
7621: LD_VAR 0 6
7625: IFFALSE 7674
// begin for i in sci do
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: LD_VAR 0 11
7636: PUSH
7637: FOR_IN
7638: IFFALSE 7672
// if not IsInUnit ( i ) then
7640: LD_VAR 0 1
7644: PPUSH
7645: CALL_OW 310
7649: NOT
7650: IFFALSE 7670
// ComEnterUnit ( i , lab [ 1 ] ) ;
7652: LD_VAR 0 1
7656: PPUSH
7657: LD_VAR 0 6
7661: PUSH
7662: LD_INT 1
7664: ARRAY
7665: PPUSH
7666: CALL_OW 120
7670: GO 7637
7672: POP
7673: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
7674: LD_ADDR_VAR 0 7
7678: PUSH
7679: LD_EXP 36
7683: PPUSH
7684: LD_INT 25
7686: PUSH
7687: LD_INT 2
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PPUSH
7694: CALL_OW 72
7698: ST_TO_ADDR
// if eng then
7699: LD_VAR 0 7
7703: IFFALSE 8478
// begin for i in eng do
7705: LD_ADDR_VAR 0 1
7709: PUSH
7710: LD_VAR 0 7
7714: PUSH
7715: FOR_IN
7716: IFFALSE 8476
// begin tag := GetTag ( i ) ;
7718: LD_ADDR_VAR 0 8
7722: PUSH
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 110
7732: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7733: LD_VAR 0 1
7737: PPUSH
7738: CALL_OW 256
7742: PUSH
7743: LD_INT 800
7745: LESS
7746: PUSH
7747: LD_VAR 0 8
7751: PUSH
7752: LD_INT 1
7754: NONEQUAL
7755: AND
7756: IFFALSE 7806
// begin SetTag ( i , tHeal ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 1
7765: PPUSH
7766: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_EXP 40
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PPUSH
7784: LD_EXP 40
7788: PUSH
7789: LD_INT 2
7791: ARRAY
7792: PPUSH
7793: CALL_OW 111
// AddComHold ( i ) ;
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7806: LD_VAR 0 8
7810: PUSH
7811: LD_INT 1
7813: EQUAL
7814: PUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 256
7824: PUSH
7825: LD_INT 1000
7827: EQUAL
7828: AND
7829: IFFALSE 7843
// SetTag ( i , 0 ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_INT 0
7838: PPUSH
7839: CALL_OW 109
// if not tag then
7843: LD_VAR 0 8
7847: NOT
7848: IFFALSE 8016
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
7850: LD_ADDR_VAR 0 4
7854: PUSH
7855: LD_INT 2
7857: PPUSH
7858: LD_INT 57
7860: PUSH
7861: EMPTY
7862: LIST
7863: PPUSH
7864: CALL_OW 70
7868: ST_TO_ADDR
// if undone then
7869: LD_VAR 0 4
7873: IFFALSE 7895
// begin ComComplete ( i , undone [ 1 ] ) ;
7875: LD_VAR 0 1
7879: PPUSH
7880: LD_VAR 0 4
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PPUSH
7889: CALL 28454 0 2
// continue ;
7893: GO 7715
// end ; if cr or tmp or Count ( legBuildings ) then
7895: LD_VAR 0 10
7899: PUSH
7900: LD_VAR 0 2
7904: OR
7905: PUSH
7906: LD_EXP 41
7910: PPUSH
7911: CALL 22356 0 1
7915: OR
7916: IFFALSE 7992
// begin if IsInUnit ( i ) then
7918: LD_VAR 0 1
7922: PPUSH
7923: CALL_OW 310
7927: IFFALSE 7938
// ComExitBuilding ( i ) ;
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL_OW 122
// if tmp then
7938: LD_VAR 0 2
7942: IFFALSE 7958
// SetTag ( i , tRepair ) else
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 3
7951: PPUSH
7952: CALL_OW 109
7956: GO 7990
// if cr then
7958: LD_VAR 0 10
7962: IFFALSE 7978
// SetTag ( i , tCrates ) else
7964: LD_VAR 0 1
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 109
7976: GO 7990
// SetTag ( i , tBuild ) ;
7978: LD_VAR 0 1
7982: PPUSH
7983: LD_INT 5
7985: PPUSH
7986: CALL_OW 109
// end else
7990: GO 8016
// if not IsInUnit ( i ) then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 310
8001: NOT
8002: IFFALSE 8016
// ComEnterUnit ( i , legBase ) ;
8004: LD_VAR 0 1
8008: PPUSH
8009: LD_INT 38
8011: PPUSH
8012: CALL_OW 120
// end ; if tag = tRepair then
8016: LD_VAR 0 8
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8126
// begin if IsInUnit ( i ) then
8026: LD_VAR 0 1
8030: PPUSH
8031: CALL_OW 310
8035: IFFALSE 8048
// begin ComExitBuilding ( i ) ;
8037: LD_VAR 0 1
8041: PPUSH
8042: CALL_OW 122
// continue ;
8046: GO 7715
// end ; if not tmp then
8048: LD_VAR 0 2
8052: NOT
8053: IFFALSE 8069
// begin SetTag ( i , 0 ) ;
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 109
// continue ;
8067: GO 7715
// end ; if not HasTask ( i ) then
8069: LD_VAR 0 1
8073: PPUSH
8074: CALL_OW 314
8078: NOT
8079: IFFALSE 8099
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8081: LD_VAR 0 1
8085: PPUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_INT 1
8093: ARRAY
8094: PPUSH
8095: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8099: LD_VAR 0 1
8103: PPUSH
8104: LD_INT 2
8106: PPUSH
8107: CALL_OW 308
8111: NOT
8112: IFFALSE 8126
// ComMoveToArea ( i , legBaseArea ) ;
8114: LD_VAR 0 1
8118: PPUSH
8119: LD_INT 2
8121: PPUSH
8122: CALL_OW 113
// end ; if tag = tBuild then
8126: LD_VAR 0 8
8130: PUSH
8131: LD_INT 5
8133: EQUAL
8134: IFFALSE 8329
// begin if IsInUnit ( i ) then
8136: LD_VAR 0 1
8140: PPUSH
8141: CALL_OW 310
8145: IFFALSE 8158
// begin ComExitBuilding ( i ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: CALL_OW 122
// continue ;
8156: GO 7715
// end ; if not Count ( legBuildings ) then
8158: LD_EXP 41
8162: PPUSH
8163: CALL 22356 0 1
8167: NOT
8168: IFFALSE 8186
// begin SetTag ( i , 0 ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_INT 0
8177: PPUSH
8178: CALL_OW 109
// continue ;
8182: GO 7715
// end else
8184: GO 8223
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8186: LD_INT 38
8188: PPUSH
8189: LD_EXP 41
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PUSH
8198: LD_INT 1
8200: ARRAY
8201: PPUSH
8202: CALL 10768 0 2
8206: NOT
8207: IFFALSE 8223
// begin SetTag ( i , 0 ) ;
8209: LD_VAR 0 1
8213: PPUSH
8214: LD_INT 0
8216: PPUSH
8217: CALL_OW 109
// continue ;
8221: GO 7715
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8223: LD_ADDR_VAR 0 4
8227: PUSH
8228: LD_INT 2
8230: PPUSH
8231: LD_INT 57
8233: PUSH
8234: EMPTY
8235: LIST
8236: PPUSH
8237: CALL_OW 70
8241: ST_TO_ADDR
// if undone then
8242: LD_VAR 0 4
8246: IFFALSE 8268
// begin ComComplete ( i , undone [ 1 ] ) ;
8248: LD_VAR 0 1
8252: PPUSH
8253: LD_VAR 0 4
8257: PUSH
8258: LD_INT 1
8260: ARRAY
8261: PPUSH
8262: CALL 28454 0 2
// continue ;
8266: GO 7715
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8268: LD_VAR 0 1
8272: PPUSH
8273: LD_EXP 41
8277: PUSH
8278: LD_INT 1
8280: ARRAY
8281: PUSH
8282: LD_INT 1
8284: ARRAY
8285: PPUSH
8286: LD_EXP 41
8290: PUSH
8291: LD_INT 1
8293: ARRAY
8294: PUSH
8295: LD_INT 2
8297: ARRAY
8298: PPUSH
8299: LD_EXP 41
8303: PUSH
8304: LD_INT 1
8306: ARRAY
8307: PUSH
8308: LD_INT 3
8310: ARRAY
8311: PPUSH
8312: LD_EXP 41
8316: PUSH
8317: LD_INT 1
8319: ARRAY
8320: PUSH
8321: LD_INT 4
8323: ARRAY
8324: PPUSH
8325: CALL_OW 145
// end ; if tag = tCrates then
8329: LD_VAR 0 8
8333: PUSH
8334: LD_INT 2
8336: EQUAL
8337: IFFALSE 8474
// begin if IsInUnit ( i ) then
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 310
8348: IFFALSE 8361
// begin ComExitBuilding ( i ) ;
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 122
// continue ;
8359: GO 7715
// end ; if not cr then
8361: LD_VAR 0 10
8365: NOT
8366: IFFALSE 8382
// begin SetTag ( i , 0 ) ;
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_INT 0
8375: PPUSH
8376: CALL_OW 109
// continue ;
8380: GO 7715
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 314
8391: NOT
8392: PUSH
8393: LD_INT 81
8395: PUSH
8396: LD_VAR 0 5
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 92
8407: PUSH
8408: LD_VAR 0 10
8412: PUSH
8413: LD_INT 1
8415: ARRAY
8416: PUSH
8417: LD_VAR 0 10
8421: PUSH
8422: LD_INT 2
8424: ARRAY
8425: PUSH
8426: LD_INT 12
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: NOT
8444: AND
8445: IFFALSE 8474
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8447: LD_VAR 0 1
8451: PPUSH
8452: LD_VAR 0 10
8456: PUSH
8457: LD_INT 1
8459: ARRAY
8460: PPUSH
8461: LD_VAR 0 10
8465: PUSH
8466: LD_INT 2
8468: ARRAY
8469: PPUSH
8470: CALL_OW 117
// end ; end ;
8474: GO 7715
8476: POP
8477: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8478: LD_ADDR_VAR 0 12
8482: PUSH
8483: LD_EXP 36
8487: PPUSH
8488: LD_INT 2
8490: PUSH
8491: LD_INT 25
8493: PUSH
8494: LD_INT 1
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 5
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 8
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 50
8529: PUSH
8530: EMPTY
8531: LIST
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PPUSH
8537: CALL_OW 72
8541: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8542: LD_ADDR_VAR 0 14
8546: PUSH
8547: LD_INT 2
8549: PPUSH
8550: LD_INT 81
8552: PUSH
8553: LD_VAR 0 5
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 70
8566: ST_TO_ADDR
// if sol then
8567: LD_VAR 0 12
8571: IFFALSE 9083
// begin if enemyInBase then
8573: LD_VAR 0 14
8577: IFFALSE 8722
// begin for i in sol do
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: LD_VAR 0 12
8588: PUSH
8589: FOR_IN
8590: IFFALSE 8718
// begin tw := IsInUnit ( i ) ;
8592: LD_ADDR_VAR 0 9
8596: PUSH
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 310
8606: ST_TO_ADDR
// if tw then
8607: LD_VAR 0 9
8611: IFFALSE 8692
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8613: LD_VAR 0 9
8617: PUSH
8618: LD_INT 22
8620: PUSH
8621: LD_VAR 0 5
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 101
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: LD_INT 30
8645: PUSH
8646: LD_INT 32
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 30
8655: PUSH
8656: LD_INT 31
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PPUSH
8673: CALL_OW 69
8677: IN
8678: NOT
8679: IFFALSE 8690
// ComExitBuilding ( i ) ;
8681: LD_VAR 0 1
8685: PPUSH
8686: CALL_OW 122
// end else
8690: GO 8716
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
8692: LD_VAR 0 1
8696: PPUSH
8697: LD_VAR 0 14
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 74
8711: PPUSH
8712: CALL_OW 115
// end ;
8716: GO 8589
8718: POP
8719: POP
// end else
8720: GO 9083
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8722: LD_ADDR_VAR 0 15
8726: PUSH
8727: LD_INT 2
8729: PPUSH
8730: LD_INT 3
8732: PUSH
8733: LD_INT 62
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 2
8745: PUSH
8746: LD_INT 30
8748: PUSH
8749: LD_INT 32
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 4
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 5
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 30
8778: PUSH
8779: LD_INT 31
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL_OW 70
8801: ST_TO_ADDR
// if empty then
8802: LD_VAR 0 15
8806: IFFALSE 8823
// empty := ReverseArray ( empty ) ;
8808: LD_ADDR_VAR 0 15
8812: PUSH
8813: LD_VAR 0 15
8817: PPUSH
8818: CALL 53232 0 1
8822: ST_TO_ADDR
// for i in sol do
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: LD_VAR 0 12
8832: PUSH
8833: FOR_IN
8834: IFFALSE 9081
// begin tag := GetTag ( i ) ;
8836: LD_ADDR_VAR 0 8
8840: PUSH
8841: LD_VAR 0 1
8845: PPUSH
8846: CALL_OW 110
8850: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8851: LD_VAR 0 1
8855: PPUSH
8856: CALL_OW 256
8860: PUSH
8861: LD_INT 1000
8863: LESS
8864: PUSH
8865: LD_VAR 0 8
8869: PUSH
8870: LD_INT 1
8872: NONEQUAL
8873: AND
8874: IFFALSE 8926
// begin SetTag ( i , tHeal ) ;
8876: LD_VAR 0 1
8880: PPUSH
8881: LD_INT 1
8883: PPUSH
8884: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8888: LD_VAR 0 1
8892: PPUSH
8893: LD_EXP 40
8897: PUSH
8898: LD_INT 1
8900: ARRAY
8901: PPUSH
8902: LD_EXP 40
8906: PUSH
8907: LD_INT 2
8909: ARRAY
8910: PPUSH
8911: CALL_OW 111
// AddComHold ( i ) ;
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 200
// continue ;
8924: GO 8833
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL_OW 256
8935: PUSH
8936: LD_INT 1000
8938: EQUAL
8939: PUSH
8940: LD_VAR 0 8
8944: PUSH
8945: LD_INT 1
8947: EQUAL
8948: AND
8949: IFFALSE 8965
// begin SetTag ( i , 0 ) ;
8951: LD_VAR 0 1
8955: PPUSH
8956: LD_INT 0
8958: PPUSH
8959: CALL_OW 109
// continue ;
8963: GO 8833
// end ; if HasTask ( i ) then
8965: LD_VAR 0 1
8969: PPUSH
8970: CALL_OW 314
8974: IFFALSE 8978
// continue ;
8976: GO 8833
// if not IsInUnit ( i ) and not tag and empty then
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 310
8987: NOT
8988: PUSH
8989: LD_VAR 0 8
8993: NOT
8994: AND
8995: PUSH
8996: LD_VAR 0 15
9000: AND
9001: IFFALSE 9079
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9003: LD_VAR 0 1
9007: PPUSH
9008: LD_VAR 0 15
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9021: LD_VAR 0 15
9025: PUSH
9026: LD_INT 1
9028: ARRAY
9029: PPUSH
9030: CALL_OW 266
9034: PUSH
9035: LD_INT 5
9037: EQUAL
9038: PUSH
9039: LD_INT 50
9041: PPUSH
9042: CALL_OW 13
9046: AND
9047: IFFALSE 9061
// AddComChangeProfession ( i , class_mortar ) ;
9049: LD_VAR 0 1
9053: PPUSH
9054: LD_INT 8
9056: PPUSH
9057: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9061: LD_ADDR_VAR 0 15
9065: PUSH
9066: LD_VAR 0 15
9070: PPUSH
9071: LD_INT 1
9073: PPUSH
9074: CALL_OW 3
9078: ST_TO_ADDR
// end ; end ;
9079: GO 8833
9081: POP
9082: POP
// end ; end ; end ;
9083: PPOPN 18
9085: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive do var cr , enemyInArea ;
9086: LD_EXP 44
9090: PPUSH
9091: CALL_OW 302
9095: PUSH
9096: LD_EXP 4
9100: AND
9101: IFFALSE 9383
9103: GO 9105
9105: DISABLE
9106: LD_INT 0
9108: PPUSH
9109: PPUSH
// begin enable ;
9110: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9111: LD_ADDR_VAR 0 2
9115: PUSH
9116: LD_INT 2
9118: PPUSH
9119: LD_INT 81
9121: PUSH
9122: LD_INT 8
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 50
9131: PUSH
9132: EMPTY
9133: LIST
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PPUSH
9139: CALL_OW 70
9143: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9144: LD_ADDR_VAR 0 1
9148: PUSH
9149: LD_INT 16
9151: PPUSH
9152: CALL_OW 435
9156: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9157: LD_EXP 44
9161: PPUSH
9162: CALL_OW 261
9166: PUSH
9167: LD_INT 10
9169: LESS
9170: PUSH
9171: LD_INT 2
9173: PPUSH
9174: LD_EXP 44
9178: PPUSH
9179: CALL_OW 292
9183: NOT
9184: AND
9185: PUSH
9186: LD_EXP 44
9190: PPUSH
9191: CALL_OW 262
9195: PUSH
9196: LD_INT 1
9198: EQUAL
9199: AND
9200: IFFALSE 9214
// SetFuel ( legCargo , 100 ) ;
9202: LD_EXP 44
9206: PPUSH
9207: LD_INT 100
9209: PPUSH
9210: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9214: LD_EXP 44
9218: PPUSH
9219: CALL_OW 314
9223: NOT
9224: PUSH
9225: LD_EXP 44
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: CALL_OW 289
9237: PUSH
9238: LD_INT 100
9240: LESS
9241: AND
9242: PUSH
9243: LD_VAR 0 2
9247: NOT
9248: AND
9249: IFFALSE 9315
// begin if cr then
9251: LD_VAR 0 1
9255: IFFALSE 9286
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9257: LD_EXP 44
9261: PPUSH
9262: LD_VAR 0 1
9266: PUSH
9267: LD_INT 1
9269: ARRAY
9270: PPUSH
9271: LD_VAR 0 1
9275: PUSH
9276: LD_INT 2
9278: ARRAY
9279: PPUSH
9280: CALL_OW 117
9284: GO 9313
// if not IsInArea ( legCargo , cratesNorthArea ) then
9286: LD_EXP 44
9290: PPUSH
9291: LD_INT 16
9293: PPUSH
9294: CALL_OW 308
9298: NOT
9299: IFFALSE 9313
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9301: LD_EXP 44
9305: PPUSH
9306: LD_INT 16
9308: PPUSH
9309: CALL_OW 113
// exit ;
9313: GO 9383
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9315: LD_VAR 0 2
9319: PUSH
9320: LD_EXP 44
9324: PPUSH
9325: LD_INT 2
9327: PPUSH
9328: CALL_OW 308
9332: NOT
9333: AND
9334: IFFALSE 9353
// ComMoveXY ( legCargo , 194 , 17 ) else
9336: LD_EXP 44
9340: PPUSH
9341: LD_INT 194
9343: PPUSH
9344: LD_INT 17
9346: PPUSH
9347: CALL_OW 111
9351: GO 9383
// if GetCargo ( legCargo , mat_cans ) = 100 then
9353: LD_EXP 44
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 289
9365: PUSH
9366: LD_INT 100
9368: EQUAL
9369: IFFALSE 9383
// ComGive ( legCargo , legBase ) ;
9371: LD_EXP 44
9375: PPUSH
9376: LD_INT 38
9378: PPUSH
9379: CALL_OW 161
// end ;
9383: PPOPN 2
9385: END
// every 12 12$00 trigger Count ( legTanks ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part ;
9386: LD_EXP 42
9390: PPUSH
9391: CALL 22356 0 1
9395: PUSH
9396: LD_INT 5
9398: LESS
9399: PUSH
9400: LD_EXP 4
9404: AND
9405: PUSH
9406: LD_EXP 9
9410: AND
9411: PUSH
9412: LD_EXP 7
9416: AND
9417: IFFALSE 9600
9419: GO 9421
9421: DISABLE
9422: LD_INT 0
9424: PPUSH
9425: PPUSH
9426: PPUSH
// begin enable ;
9427: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9428: LD_ADDR_VAR 0 2
9432: PUSH
9433: LD_INT 13
9435: PUSH
9436: LD_INT 28
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 13
9445: PUSH
9446: LD_INT 27
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: LD_INT 13
9455: PUSH
9456: LD_INT 26
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 14
9465: PUSH
9466: LD_INT 28
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 14
9475: PUSH
9476: LD_INT 25
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9490: LD_ADDR_VAR 0 1
9494: PUSH
9495: DOUBLE
9496: LD_INT 1
9498: DEC
9499: ST_TO_ADDR
9500: LD_INT 3
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 4
9508: PUSH
9509: LD_INT 4
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_OWVAR 67
9522: ARRAY
9523: PUSH
9524: FOR_TO
9525: IFFALSE 9598
// begin part := parts [ rand ( 1 , parts ) ] ;
9527: LD_ADDR_VAR 0 3
9531: PUSH
9532: LD_VAR 0 2
9536: PUSH
9537: LD_INT 1
9539: PPUSH
9540: LD_VAR 0 2
9544: PPUSH
9545: CALL_OW 12
9549: ARRAY
9550: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
9551: LD_ADDR_EXP 39
9555: PUSH
9556: LD_EXP 39
9560: PPUSH
9561: LD_VAR 0 3
9565: PUSH
9566: LD_INT 1
9568: ARRAY
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: LD_VAR 0 3
9580: PUSH
9581: LD_INT 2
9583: ARRAY
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL 57956 0 2
9595: ST_TO_ADDR
9596: GO 9524
9598: POP
9599: POP
// end ;
9600: PPOPN 3
9602: END
// every 20 20$00 trigger not legionDestroyed and tick <= 60 60$00 do
9603: LD_EXP 12
9607: NOT
9608: PUSH
9609: LD_OWVAR 1
9613: PUSH
9614: LD_INT 126000
9616: LESSEQUAL
9617: AND
9618: IFFALSE 9657
9620: GO 9622
9622: DISABLE
// begin enable ;
9623: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
9624: LD_ADDR_EXP 39
9628: PUSH
9629: LD_EXP 39
9633: PPUSH
9634: LD_INT 14
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: LD_INT 1
9642: PUSH
9643: LD_INT 27
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: PPUSH
9652: CALL 57956 0 2
9656: ST_TO_ADDR
// end ;
9657: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
9658: LD_EXP 42
9662: PUSH
9663: LD_EXP 9
9667: AND
9668: PUSH
9669: LD_EXP 7
9673: AND
9674: IFFALSE 10267
9676: GO 9678
9678: DISABLE
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
9683: PPUSH
// begin enable ;
9684: ENABLE
// if not legTanks then
9685: LD_EXP 42
9689: NOT
9690: IFFALSE 9694
// exit ;
9692: GO 10267
// for i in legTanks do
9694: LD_ADDR_VAR 0 1
9698: PUSH
9699: LD_EXP 42
9703: PUSH
9704: FOR_IN
9705: IFFALSE 10265
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
9707: LD_VAR 0 1
9711: PPUSH
9712: CALL_OW 302
9716: NOT
9717: PUSH
9718: LD_VAR 0 1
9722: PPUSH
9723: CALL_OW 255
9727: PUSH
9728: LD_INT 8
9730: NONEQUAL
9731: OR
9732: IFFALSE 9752
// begin legTanks := legTanks diff i ;
9734: LD_ADDR_EXP 42
9738: PUSH
9739: LD_EXP 42
9743: PUSH
9744: LD_VAR 0 1
9748: DIFF
9749: ST_TO_ADDR
// continue ;
9750: GO 9704
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 110
9761: NOT
9762: PUSH
9763: LD_VAR 0 1
9767: PPUSH
9768: CALL_OW 263
9772: PUSH
9773: LD_INT 2
9775: EQUAL
9776: AND
9777: IFFALSE 9791
// SetTag ( i , tAttack ) ;
9779: LD_VAR 0 1
9783: PPUSH
9784: LD_INT 10
9786: PPUSH
9787: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
9791: LD_VAR 0 1
9795: PPUSH
9796: CALL_OW 110
9800: NOT
9801: PUSH
9802: LD_VAR 0 1
9806: PPUSH
9807: CALL_OW 110
9811: PUSH
9812: LD_INT 0
9814: EQUAL
9815: OR
9816: IFFALSE 9946
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9818: LD_VAR 0 1
9822: PPUSH
9823: CALL_OW 261
9827: PUSH
9828: LD_INT 50
9830: LESS
9831: PUSH
9832: LD_VAR 0 1
9836: PPUSH
9837: CALL_OW 262
9841: PUSH
9842: LD_INT 1
9844: EQUAL
9845: AND
9846: IFFALSE 9905
// begin ComMoveXY ( i , 189 , 19 ) ;
9848: LD_VAR 0 1
9852: PPUSH
9853: LD_INT 189
9855: PPUSH
9856: LD_INT 19
9858: PPUSH
9859: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9863: LD_INT 35
9865: PPUSH
9866: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
9870: LD_VAR 0 1
9874: PPUSH
9875: LD_INT 189
9877: PPUSH
9878: LD_INT 19
9880: PPUSH
9881: CALL_OW 297
9885: PUSH
9886: LD_INT 4
9888: LESS
9889: IFFALSE 9863
// SetFuel ( i , 100 ) ;
9891: LD_VAR 0 1
9895: PPUSH
9896: LD_INT 100
9898: PPUSH
9899: CALL_OW 240
// end else
9903: GO 9946
// if not IsInArea ( i , legParkingArea ) then
9905: LD_VAR 0 1
9909: PPUSH
9910: LD_INT 15
9912: PPUSH
9913: CALL_OW 308
9917: NOT
9918: IFFALSE 9934
// ComMoveToArea ( i , legParkingArea ) else
9920: LD_VAR 0 1
9924: PPUSH
9925: LD_INT 15
9927: PPUSH
9928: CALL_OW 113
9932: GO 9946
// SetTag ( i , tParking ) ;
9934: LD_VAR 0 1
9938: PPUSH
9939: LD_INT 9
9941: PPUSH
9942: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9946: LD_VAR 0 1
9950: PPUSH
9951: CALL_OW 110
9955: PUSH
9956: LD_INT 9
9958: EQUAL
9959: IFFALSE 10089
// begin if GetLives ( i ) < 650 then
9961: LD_VAR 0 1
9965: PPUSH
9966: CALL_OW 256
9970: PUSH
9971: LD_INT 650
9973: LESS
9974: IFFALSE 10066
// begin if not IsDrivenBy ( i ) then
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 311
9985: NOT
9986: IFFALSE 9990
// continue ;
9988: GO 9704
// mech := IsDrivenBy ( i ) ;
9990: LD_ADDR_VAR 0 2
9994: PUSH
9995: LD_VAR 0 1
9999: PPUSH
10000: CALL_OW 311
10004: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10005: LD_VAR 0 2
10009: PPUSH
10010: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10014: LD_VAR 0 2
10018: PPUSH
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10028: LD_INT 35
10030: PPUSH
10031: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10035: LD_VAR 0 1
10039: PPUSH
10040: CALL_OW 256
10044: PUSH
10045: LD_INT 1000
10047: EQUAL
10048: IFFALSE 10028
// ComEnterUnit ( mech , i ) ;
10050: LD_VAR 0 2
10054: PPUSH
10055: LD_VAR 0 1
10059: PPUSH
10060: CALL_OW 120
// end else
10064: GO 10089
// if IsDrivenBy ( i ) then
10066: LD_VAR 0 1
10070: PPUSH
10071: CALL_OW 311
10075: IFFALSE 10089
// SetTag ( i , tAttack ) ;
10077: LD_VAR 0 1
10081: PPUSH
10082: LD_INT 10
10084: PPUSH
10085: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10089: LD_VAR 0 1
10093: PPUSH
10094: CALL_OW 110
10098: PUSH
10099: LD_INT 10
10101: EQUAL
10102: IFFALSE 10263
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10104: LD_ADDR_VAR 0 3
10108: PUSH
10109: LD_INT 2
10111: PPUSH
10112: LD_INT 81
10114: PUSH
10115: LD_INT 8
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PPUSH
10122: CALL_OW 70
10126: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10127: LD_VAR 0 1
10131: PPUSH
10132: CALL_OW 256
10136: PUSH
10137: LD_INT 650
10139: LESS
10140: PUSH
10141: LD_VAR 0 1
10145: PPUSH
10146: CALL_OW 263
10150: PUSH
10151: LD_INT 1
10153: EQUAL
10154: AND
10155: IFFALSE 10180
// begin ComStop ( i ) ;
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 141
// SetTag ( i , 0 ) ;
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_INT 0
10173: PPUSH
10174: CALL_OW 109
// continue ;
10178: GO 9704
// end ; if enemy then
10180: LD_VAR 0 3
10184: IFFALSE 10224
// begin if not HasTask ( i ) then
10186: LD_VAR 0 1
10190: PPUSH
10191: CALL_OW 314
10195: NOT
10196: IFFALSE 10222
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10198: LD_VAR 0 1
10202: PPUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_VAR 0 1
10212: PPUSH
10213: CALL_OW 74
10217: PPUSH
10218: CALL 62028 0 2
// end else
10222: GO 10263
// if legTanks then
10224: LD_EXP 42
10228: IFFALSE 10263
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10230: LD_VAR 0 1
10234: PPUSH
10235: LD_INT 200
10237: PUSH
10238: LD_INT 48
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 210
10247: PUSH
10248: LD_INT 74
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL 60560 0 2
// end ; end ;
10263: GO 9704
10265: POP
10266: POP
// end ;
10267: PPOPN 3
10269: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10270: LD_EXP 12
10274: NOT
10275: PUSH
10276: LD_EXP 43
10280: PPUSH
10281: CALL 22356 0 1
10285: AND
10286: PUSH
10287: LD_EXP 9
10291: AND
10292: PUSH
10293: LD_EXP 7
10297: AND
10298: IFFALSE 10496
10300: GO 10302
10302: DISABLE
10303: LD_INT 0
10305: PPUSH
10306: PPUSH
10307: PPUSH
// begin enable ;
10308: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10309: LD_ADDR_VAR 0 2
10313: PUSH
10314: LD_EXP 43
10318: PPUSH
10319: LD_INT 61
10321: PUSH
10322: EMPTY
10323: LIST
10324: PUSH
10325: LD_INT 50
10327: PUSH
10328: EMPTY
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 72
10339: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10340: LD_ADDR_EXP 43
10344: PUSH
10345: LD_EXP 43
10349: PUSH
10350: LD_VAR 0 2
10354: DIFF
10355: ST_TO_ADDR
// if not tmp then
10356: LD_VAR 0 2
10360: NOT
10361: IFFALSE 10365
// exit ;
10363: GO 10496
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10365: LD_ADDR_VAR 0 3
10369: PUSH
10370: LD_VAR 0 2
10374: PPUSH
10375: LD_INT 34
10377: PUSH
10378: LD_INT 24
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PPUSH
10385: CALL_OW 72
10389: ST_TO_ADDR
// if tmp2 then
10390: LD_VAR 0 3
10394: IFFALSE 10411
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10396: LD_VAR 0 3
10400: PPUSH
10401: LD_INT 241
10403: PPUSH
10404: LD_INT 99
10406: PPUSH
10407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10411: LD_INT 35
10413: PPUSH
10414: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10418: LD_ADDR_VAR 0 2
10422: PUSH
10423: LD_VAR 0 2
10427: PPUSH
10428: LD_INT 50
10430: PUSH
10431: EMPTY
10432: LIST
10433: PPUSH
10434: CALL_OW 72
10438: ST_TO_ADDR
// for i in tmp do
10439: LD_ADDR_VAR 0 1
10443: PUSH
10444: LD_VAR 0 2
10448: PUSH
10449: FOR_IN
10450: IFFALSE 10487
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10452: LD_VAR 0 1
10456: PPUSH
10457: LD_INT 200
10459: PUSH
10460: LD_INT 48
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 210
10469: PUSH
10470: LD_INT 74
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PPUSH
10481: CALL 60560 0 2
10485: GO 10449
10487: POP
10488: POP
// until not tmp ;
10489: LD_VAR 0 2
10493: NOT
10494: IFFALSE 10411
// end ;
10496: PPOPN 3
10498: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10499: LD_EXP 9
10503: NOT
10504: IFFALSE 10765
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
10513: PPUSH
10514: PPUSH
// begin uc_side := 8 ;
10515: LD_ADDR_OWVAR 20
10519: PUSH
10520: LD_INT 8
10522: ST_TO_ADDR
// uc_nation := nation_arabian ;
10523: LD_ADDR_OWVAR 21
10527: PUSH
10528: LD_INT 2
10530: ST_TO_ADDR
// for i := 1 to 3 do
10531: LD_ADDR_VAR 0 1
10535: PUSH
10536: DOUBLE
10537: LD_INT 1
10539: DEC
10540: ST_TO_ADDR
10541: LD_INT 3
10543: PUSH
10544: FOR_TO
10545: IFFALSE 10680
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
10547: LD_INT 14
10549: PPUSH
10550: LD_INT 3
10552: PPUSH
10553: LD_INT 1
10555: PPUSH
10556: LD_INT 27
10558: PUSH
10559: LD_INT 25
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_VAR 0 1
10570: PUSH
10571: LD_INT 2
10573: MOD
10574: PUSH
10575: LD_INT 1
10577: PLUS
10578: ARRAY
10579: PPUSH
10580: LD_INT 100
10582: PPUSH
10583: CALL 25094 0 5
// veh := CreateVehicle ;
10587: LD_ADDR_VAR 0 3
10591: PUSH
10592: CALL_OW 45
10596: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 5
10604: PPUSH
10605: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
10609: LD_VAR 0 3
10613: PPUSH
10614: LD_INT 44
10616: PPUSH
10617: LD_INT 0
10619: PPUSH
10620: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
10624: LD_INT 0
10626: PPUSH
10627: LD_INT 6
10629: PPUSH
10630: CALL_OW 383
// un := CreateHuman ;
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: CALL_OW 44
10643: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10644: LD_VAR 0 2
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10658: LD_ADDR_VAR 0 4
10662: PUSH
10663: LD_VAR 0 4
10667: PPUSH
10668: LD_VAR 0 3
10672: PPUSH
10673: CALL 57956 0 2
10677: ST_TO_ADDR
// end ;
10678: GO 10544
10680: POP
10681: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
10682: LD_VAR 0 4
10686: PPUSH
10687: LD_INT 219
10689: PPUSH
10690: LD_INT 110
10692: PPUSH
10693: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
10697: LD_VAR 0 4
10701: PPUSH
10702: LD_INT 220
10704: PPUSH
10705: LD_INT 94
10707: PPUSH
10708: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
10712: LD_VAR 0 4
10716: PPUSH
10717: LD_INT 209
10719: PPUSH
10720: LD_INT 66
10722: PPUSH
10723: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
10727: LD_VAR 0 4
10731: PPUSH
10732: LD_INT 189
10734: PPUSH
10735: LD_INT 22
10737: PPUSH
10738: CALL_OW 171
// wait ( 0 0$10 ) ;
10742: LD_INT 350
10744: PPUSH
10745: CALL_OW 67
// legTanks := legTanks union tmp ;
10749: LD_ADDR_EXP 42
10753: PUSH
10754: LD_EXP 42
10758: PUSH
10759: LD_VAR 0 4
10763: UNION
10764: ST_TO_ADDR
// end ; end_of_file
10765: PPOPN 4
10767: END
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
10768: LD_INT 0
10770: PPUSH
10771: PPUSH
10772: PPUSH
// if btype = b_depot then
10773: LD_VAR 0 2
10777: PUSH
10778: LD_INT 0
10780: EQUAL
10781: IFFALSE 10793
// begin result := true ;
10783: LD_ADDR_VAR 0 3
10787: PUSH
10788: LD_INT 1
10790: ST_TO_ADDR
// exit ;
10791: GO 10909
// end ; pom := GetBase ( depot ) ;
10793: LD_ADDR_VAR 0 4
10797: PUSH
10798: LD_VAR 0 1
10802: PPUSH
10803: CALL_OW 274
10807: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
10808: LD_ADDR_VAR 0 5
10812: PUSH
10813: LD_VAR 0 2
10817: PPUSH
10818: LD_VAR 0 1
10822: PPUSH
10823: CALL_OW 248
10827: PPUSH
10828: CALL_OW 450
10832: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
10833: LD_ADDR_VAR 0 3
10837: PUSH
10838: LD_VAR 0 4
10842: PPUSH
10843: LD_INT 1
10845: PPUSH
10846: CALL_OW 275
10850: PUSH
10851: LD_VAR 0 5
10855: PUSH
10856: LD_INT 1
10858: ARRAY
10859: GREATEREQUAL
10860: PUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: LD_INT 2
10868: PPUSH
10869: CALL_OW 275
10873: PUSH
10874: LD_VAR 0 5
10878: PUSH
10879: LD_INT 2
10881: ARRAY
10882: GREATEREQUAL
10883: AND
10884: PUSH
10885: LD_VAR 0 4
10889: PPUSH
10890: LD_INT 3
10892: PPUSH
10893: CALL_OW 275
10897: PUSH
10898: LD_VAR 0 5
10902: PUSH
10903: LD_INT 3
10905: ARRAY
10906: GREATEREQUAL
10907: AND
10908: ST_TO_ADDR
// end ;
10909: LD_VAR 0 3
10913: RET
// export function CreateNature ; var i , areas , amount ; begin
10914: LD_INT 0
10916: PPUSH
10917: PPUSH
10918: PPUSH
10919: PPUSH
// PrepareTiger ( 0 ) ;
10920: LD_INT 0
10922: PPUSH
10923: CALL 54332 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
10927: LD_ADDR_VAR 0 2
10931: PUSH
10932: DOUBLE
10933: LD_INT 1
10935: DEC
10936: ST_TO_ADDR
10937: LD_INT 10
10939: PUSH
10940: LD_INT 8
10942: PUSH
10943: LD_INT 5
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: LD_OWVAR 67
10959: ARRAY
10960: PUSH
10961: FOR_TO
10962: IFFALSE 10981
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10964: CALL_OW 44
10968: PPUSH
10969: LD_INT 7
10971: PPUSH
10972: LD_INT 0
10974: PPUSH
10975: CALL_OW 49
10979: GO 10961
10981: POP
10982: POP
// PrepareBird ;
10983: CALL 54513 0 0
// for i := 1 to 3 do
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: DOUBLE
10993: LD_INT 1
10995: DEC
10996: ST_TO_ADDR
10997: LD_INT 3
10999: PUSH
11000: FOR_TO
11001: IFFALSE 11020
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11003: CALL_OW 44
11007: PPUSH
11008: LD_INT 7
11010: PPUSH
11011: LD_INT 0
11013: PPUSH
11014: CALL_OW 49
11018: GO 11000
11020: POP
11021: POP
// PrepareHorse ;
11022: CALL 54553 0 0
// for i := 1 to 3 do
11026: LD_ADDR_VAR 0 2
11030: PUSH
11031: DOUBLE
11032: LD_INT 1
11034: DEC
11035: ST_TO_ADDR
11036: LD_INT 3
11038: PUSH
11039: FOR_TO
11040: IFFALSE 11059
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11042: CALL_OW 44
11046: PPUSH
11047: LD_INT 7
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 49
11057: GO 11039
11059: POP
11060: POP
// PrepareFrog ;
11061: CALL 54433 0 0
// for i := 1 to 3 do
11065: LD_ADDR_VAR 0 2
11069: PUSH
11070: DOUBLE
11071: LD_INT 1
11073: DEC
11074: ST_TO_ADDR
11075: LD_INT 3
11077: PUSH
11078: FOR_TO
11079: IFFALSE 11098
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11081: CALL_OW 44
11085: PPUSH
11086: LD_INT 8
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 49
11096: GO 11078
11098: POP
11099: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11100: LD_ADDR_VAR 0 4
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: LD_INT 2
11110: PUSH
11111: LD_INT 2
11113: PUSH
11114: LD_INT 1
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_OWVAR 67
11127: ARRAY
11128: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11129: LD_ADDR_VAR 0 3
11133: PUSH
11134: LD_INT 18
11136: PUSH
11137: LD_INT 19
11139: PUSH
11140: LD_INT 20
11142: PUSH
11143: LD_INT 21
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: ST_TO_ADDR
// PrepareMastodont ;
11152: CALL 54593 0 0
// for i := 1 to amount do
11156: LD_ADDR_VAR 0 2
11160: PUSH
11161: DOUBLE
11162: LD_INT 1
11164: DEC
11165: ST_TO_ADDR
11166: LD_VAR 0 4
11170: PUSH
11171: FOR_TO
11172: IFFALSE 11209
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11174: CALL_OW 45
11178: PPUSH
11179: LD_VAR 0 3
11183: PUSH
11184: LD_VAR 0 2
11188: PUSH
11189: LD_INT 1
11191: MINUS
11192: PUSH
11193: LD_OWVAR 67
11197: PLUS
11198: ARRAY
11199: PPUSH
11200: LD_INT 0
11202: PPUSH
11203: CALL_OW 49
11207: GO 11171
11209: POP
11210: POP
// PrepareApeman ( 0 ) ;
11211: LD_INT 0
11213: PPUSH
11214: CALL 54224 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11218: LD_ADDR_OWVAR 31
11222: PUSH
11223: LD_INT 4
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 0
11231: PUSH
11232: LD_INT 0
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11241: LD_ADDR_VAR 0 2
11245: PUSH
11246: DOUBLE
11247: LD_INT 1
11249: DEC
11250: ST_TO_ADDR
11251: LD_INT 9
11253: PUSH
11254: LD_INT 7
11256: PUSH
11257: LD_INT 6
11259: PUSH
11260: LD_INT 5
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: LD_OWVAR 67
11273: ARRAY
11274: PUSH
11275: FOR_TO
11276: IFFALSE 11295
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11278: CALL_OW 44
11282: PPUSH
11283: LD_INT 6
11285: PPUSH
11286: LD_INT 0
11288: PPUSH
11289: CALL_OW 49
11293: GO 11275
11295: POP
11296: POP
// for i := 1 to [ 7 , 6 , 5 , 4 ] [ Difficulty ] do
11297: LD_ADDR_VAR 0 2
11301: PUSH
11302: DOUBLE
11303: LD_INT 1
11305: DEC
11306: ST_TO_ADDR
11307: LD_INT 7
11309: PUSH
11310: LD_INT 6
11312: PUSH
11313: LD_INT 5
11315: PUSH
11316: LD_INT 4
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: PUSH
11325: LD_OWVAR 67
11329: ARRAY
11330: PUSH
11331: FOR_TO
11332: IFFALSE 11357
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 6 , false ) ;
11334: CALL_OW 44
11338: PPUSH
11339: LD_INT 274
11341: PPUSH
11342: LD_INT 133
11344: PPUSH
11345: LD_INT 6
11347: PPUSH
11348: LD_INT 0
11350: PPUSH
11351: CALL_OW 50
11355: GO 11331
11357: POP
11358: POP
// for i := 1 to [ 4 , 4 , 3 , 3 ] [ Difficulty ] do
11359: LD_ADDR_VAR 0 2
11363: PUSH
11364: DOUBLE
11365: LD_INT 1
11367: DEC
11368: ST_TO_ADDR
11369: LD_INT 4
11371: PUSH
11372: LD_INT 4
11374: PUSH
11375: LD_INT 3
11377: PUSH
11378: LD_INT 3
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: PUSH
11387: LD_OWVAR 67
11391: ARRAY
11392: PUSH
11393: FOR_TO
11394: IFFALSE 11419
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 6 , false ) ;
11396: CALL_OW 44
11400: PPUSH
11401: LD_INT 208
11403: PPUSH
11404: LD_INT 142
11406: PPUSH
11407: LD_INT 6
11409: PPUSH
11410: LD_INT 0
11412: PPUSH
11413: CALL_OW 50
11417: GO 11393
11419: POP
11420: POP
// end ;
11421: LD_VAR 0 1
11425: RET
// export function AreInArea ( units , area ) ; var i ; begin
11426: LD_INT 0
11428: PPUSH
11429: PPUSH
// result := false ;
11430: LD_ADDR_VAR 0 3
11434: PUSH
11435: LD_INT 0
11437: ST_TO_ADDR
// if not units then
11438: LD_VAR 0 1
11442: NOT
11443: IFFALSE 11447
// exit ;
11445: GO 11513
// for i in units do
11447: LD_ADDR_VAR 0 4
11451: PUSH
11452: LD_VAR 0 1
11456: PUSH
11457: FOR_IN
11458: IFFALSE 11511
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11460: LD_VAR 0 4
11464: PPUSH
11465: LD_VAR 0 2
11469: PPUSH
11470: CALL_OW 308
11474: PUSH
11475: LD_VAR 0 4
11479: PPUSH
11480: CALL_OW 310
11484: PPUSH
11485: LD_VAR 0 2
11489: PPUSH
11490: CALL_OW 308
11494: OR
11495: IFFALSE 11509
// begin result := true ;
11497: LD_ADDR_VAR 0 3
11501: PUSH
11502: LD_INT 1
11504: ST_TO_ADDR
// exit ;
11505: POP
11506: POP
11507: GO 11513
// end ;
11509: GO 11457
11511: POP
11512: POP
// end ; end_of_file
11513: LD_VAR 0 3
11517: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11518: LD_INT 0
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
// SaveForQuickRestart ;
11525: CALL_OW 22
// InGameOn ;
11529: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11533: LD_INT 84
11535: PPUSH
11536: LD_INT 28
11538: PPUSH
11539: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11543: LD_INT 2
11545: PPUSH
11546: LD_INT 9
11548: PPUSH
11549: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11553: LD_EXP 22
11557: PPUSH
11558: LD_INT 90
11560: PPUSH
11561: LD_INT 30
11563: PPUSH
11564: CALL_OW 111
// uc_side := 1 ;
11568: LD_ADDR_OWVAR 20
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// uc_nation := nation_american ;
11576: LD_ADDR_OWVAR 21
11580: PUSH
11581: LD_INT 1
11583: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11584: LD_INT 3
11586: PPUSH
11587: LD_INT 1
11589: PPUSH
11590: LD_INT 1
11592: PPUSH
11593: LD_INT 9
11595: PPUSH
11596: LD_INT 66
11598: PPUSH
11599: CALL 25094 0 5
// veh := CreateVehicle ;
11603: LD_ADDR_VAR 0 4
11607: PUSH
11608: CALL_OW 45
11612: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11613: LD_VAR 0 4
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11625: LD_VAR 0 4
11629: PPUSH
11630: LD_INT 80
11632: PPUSH
11633: LD_INT 27
11635: PPUSH
11636: LD_INT 0
11638: PPUSH
11639: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11643: LD_INT 1
11645: PPUSH
11646: LD_INT 8
11648: PPUSH
11649: CALL_OW 383
// mech := CreateHuman ;
11653: LD_ADDR_VAR 0 3
11657: PUSH
11658: CALL_OW 44
11662: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_VAR 0 4
11672: PPUSH
11673: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11677: LD_INT 35
11679: PPUSH
11680: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11684: LD_INT 90
11686: PPUSH
11687: LD_INT 30
11689: PPUSH
11690: CALL_OW 428
11694: IFFALSE 11677
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
11696: LD_INT 80
11698: PPUSH
11699: LD_INT 27
11701: PPUSH
11702: LD_INT 2
11704: PPUSH
11705: LD_INT 6
11707: NEG
11708: PPUSH
11709: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
11713: LD_INT 80
11715: PPUSH
11716: LD_INT 27
11718: PPUSH
11719: CALL_OW 86
// DialogueOn ;
11723: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
11727: LD_EXP 22
11731: PPUSH
11732: LD_STRING DH-Start-1
11734: PPUSH
11735: CALL_OW 88
// DialogueOff ;
11739: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11743: LD_EXP 22
11747: PPUSH
11748: LD_VAR 0 4
11752: PPUSH
11753: CALL_OW 115
// wait ( 0 0$1 ) ;
11757: LD_INT 35
11759: PPUSH
11760: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
11764: LD_EXP 22
11768: PPUSH
11769: CALL_OW 310
11773: PPUSH
11774: LD_INT 200
11776: PPUSH
11777: CALL_OW 234
// wait ( 0 0$0.3 ) ;
11781: LD_INT 10
11783: PPUSH
11784: CALL_OW 67
// DialogueOn ;
11788: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
11792: LD_EXP 22
11796: PPUSH
11797: LD_STRING DH-Start-2
11799: PPUSH
11800: CALL_OW 88
// DialogueOff ;
11804: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11808: LD_EXP 22
11812: PPUSH
11813: LD_VAR 0 4
11817: PPUSH
11818: CALL_OW 115
// wait ( 0 0$0.2 ) ;
11822: LD_INT 7
11824: PPUSH
11825: CALL_OW 67
// ComCrawl ( Heike ) ;
11829: LD_EXP 22
11833: PPUSH
11834: CALL_OW 137
// wait ( 0 0$3 ) ;
11838: LD_INT 105
11840: PPUSH
11841: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
11845: LD_EXP 25
11849: PPUSH
11850: LD_INT 82
11852: PPUSH
11853: LD_INT 43
11855: PPUSH
11856: LD_INT 0
11858: PPUSH
11859: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
11863: LD_EXP 23
11867: PPUSH
11868: LD_EXP 25
11872: PPUSH
11873: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
11877: LD_EXP 23
11881: PPUSH
11882: LD_INT 79
11884: PPUSH
11885: LD_INT 32
11887: PPUSH
11888: CALL_OW 111
// wait ( 0 0$1 ) ;
11892: LD_INT 35
11894: PPUSH
11895: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
11899: LD_INT 79
11901: PPUSH
11902: LD_INT 32
11904: PPUSH
11905: LD_INT 2
11907: PPUSH
11908: LD_INT 8
11910: NEG
11911: PPUSH
11912: CALL_OW 330
// wait ( 0 0$3 ) ;
11916: LD_INT 105
11918: PPUSH
11919: CALL_OW 67
// SetLives ( veh , 200 ) ;
11923: LD_VAR 0 4
11927: PPUSH
11928: LD_INT 200
11930: PPUSH
11931: CALL_OW 234
// wait ( 0 0$1 ) ;
11935: LD_INT 35
11937: PPUSH
11938: CALL_OW 67
// SetLives ( mech , 10 ) ;
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_INT 10
11949: PPUSH
11950: CALL_OW 234
// wait ( 0 0$2 ) ;
11954: LD_INT 70
11956: PPUSH
11957: CALL_OW 67
// ComWalk ( Heike ) ;
11961: LD_EXP 22
11965: PPUSH
11966: CALL_OW 138
// wait ( 1 ) ;
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
11977: LD_EXP 22
11981: PPUSH
11982: LD_INT 81
11984: PPUSH
11985: LD_INT 25
11987: PPUSH
11988: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
11992: LD_EXP 22
11996: PPUSH
11997: LD_INT 72
11999: PPUSH
12000: LD_INT 25
12002: PPUSH
12003: CALL_OW 171
// wait ( 0 0$3 ) ;
12007: LD_INT 105
12009: PPUSH
12010: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12014: LD_EXP 23
12018: PPUSH
12019: CALL_OW 121
// wait ( 1 ) ;
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12030: LD_EXP 23
12034: PPUSH
12035: LD_INT 77
12037: PPUSH
12038: LD_INT 28
12040: PPUSH
12041: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12045: LD_EXP 23
12049: PPUSH
12050: LD_EXP 22
12054: PPUSH
12055: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12059: LD_EXP 23
12063: PPUSH
12064: LD_STRING DO-Start-3
12066: PPUSH
12067: CALL_OW 88
// repeat wait ( 3 ) ;
12071: LD_INT 3
12073: PPUSH
12074: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12078: LD_EXP 22
12082: PPUSH
12083: LD_INT 72
12085: PPUSH
12086: LD_INT 25
12088: PPUSH
12089: CALL_OW 307
12093: IFFALSE 12071
// ComHold ( Heike ) ;
12095: LD_EXP 22
12099: PPUSH
12100: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12104: LD_EXP 23
12108: PPUSH
12109: LD_EXP 22
12113: PPUSH
12114: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12118: LD_EXP 22
12122: PPUSH
12123: LD_EXP 23
12127: PPUSH
12128: CALL_OW 112
// wait ( 0 0$1 ) ;
12132: LD_INT 35
12134: PPUSH
12135: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12139: LD_EXP 22
12143: PPUSH
12144: LD_EXP 23
12148: PPUSH
12149: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12153: LD_EXP 22
12157: PPUSH
12158: LD_STRING DH-Start-4
12160: PPUSH
12161: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12165: LD_EXP 23
12169: PPUSH
12170: LD_STRING DO-Start-5
12172: PPUSH
12173: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12177: LD_EXP 22
12181: PPUSH
12182: LD_STRING DH-Start-6
12184: PPUSH
12185: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12189: LD_EXP 23
12193: PPUSH
12194: LD_STRING DO-Start-7
12196: PPUSH
12197: CALL_OW 88
// if Query ( QOmar ) = 2 then
12201: LD_STRING QOmar
12203: PPUSH
12204: CALL_OW 97
12208: PUSH
12209: LD_INT 2
12211: EQUAL
12212: IFFALSE 12503
// begin Say ( Heike , DH-QuestionN-1 ) ;
12214: LD_EXP 22
12218: PPUSH
12219: LD_STRING DH-QuestionN-1
12221: PPUSH
12222: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12226: LD_EXP 22
12230: PPUSH
12231: LD_INT 58
12233: PPUSH
12234: LD_INT 27
12236: PPUSH
12237: CALL_OW 111
// wait ( 0 0$2 ) ;
12241: LD_INT 70
12243: PPUSH
12244: CALL_OW 67
// RemoveSeeing ( 79 , 32 , 2 ) ;
12248: LD_INT 79
12250: PPUSH
12251: LD_INT 32
12253: PPUSH
12254: LD_INT 2
12256: PPUSH
12257: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12261: LD_INT 80
12263: PPUSH
12264: LD_INT 27
12266: PPUSH
12267: LD_INT 2
12269: PPUSH
12270: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12274: LD_INT 58
12276: PPUSH
12277: LD_INT 27
12279: PPUSH
12280: CALL_OW 84
// repeat wait ( 3 ) ;
12284: LD_INT 3
12286: PPUSH
12287: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12291: LD_EXP 22
12295: PPUSH
12296: LD_INT 88
12298: PPUSH
12299: LD_INT 27
12301: PPUSH
12302: CALL_OW 297
12306: IFFALSE 12284
// uc_side := 1 ;
12308: LD_ADDR_OWVAR 20
12312: PUSH
12313: LD_INT 1
12315: ST_TO_ADDR
// uc_nation := nation_american ;
12316: LD_ADDR_OWVAR 21
12320: PUSH
12321: LD_INT 1
12323: ST_TO_ADDR
// amTroops := [ ] ;
12324: LD_ADDR_VAR 0 5
12328: PUSH
12329: EMPTY
12330: ST_TO_ADDR
// for i := 1 to 3 do
12331: LD_ADDR_VAR 0 2
12335: PUSH
12336: DOUBLE
12337: LD_INT 1
12339: DEC
12340: ST_TO_ADDR
12341: LD_INT 3
12343: PUSH
12344: FOR_TO
12345: IFFALSE 12438
// begin PrepareSoldier ( false , 10 ) ;
12347: LD_INT 0
12349: PPUSH
12350: LD_INT 10
12352: PPUSH
12353: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12357: LD_ADDR_VAR 0 5
12361: PUSH
12362: LD_VAR 0 5
12366: PPUSH
12367: CALL_OW 44
12371: PPUSH
12372: CALL 57956 0 2
12376: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12377: LD_VAR 0 5
12381: PUSH
12382: LD_VAR 0 2
12386: ARRAY
12387: PPUSH
12388: LD_INT 2
12390: PPUSH
12391: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12395: LD_VAR 0 5
12399: PUSH
12400: LD_VAR 0 2
12404: ARRAY
12405: PPUSH
12406: LD_INT 10
12408: PPUSH
12409: LD_INT 0
12411: PPUSH
12412: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12416: LD_VAR 0 5
12420: PUSH
12421: LD_VAR 0 2
12425: ARRAY
12426: PPUSH
12427: LD_EXP 22
12431: PPUSH
12432: CALL_OW 115
// end ;
12436: GO 12344
12438: POP
12439: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12440: LD_EXP 22
12444: PPUSH
12445: LD_VAR 0 5
12449: PUSH
12450: LD_INT 1
12452: ARRAY
12453: PPUSH
12454: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12458: LD_INT 35
12460: PPUSH
12461: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12465: LD_EXP 22
12469: PPUSH
12470: CALL_OW 301
12474: PUSH
12475: LD_EXP 22
12479: PPUSH
12480: CALL_OW 303
12484: OR
12485: IFFALSE 12458
// wait ( 0 0$2 ) ;
12487: LD_INT 70
12489: PPUSH
12490: CALL_OW 67
// YouLost ( Heike ) ;
12494: LD_STRING Heike
12496: PPUSH
12497: CALL_OW 104
// exit ;
12501: GO 13383
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12503: LD_EXP 22
12507: PPUSH
12508: LD_STRING DH-QuestionY-1
12510: PPUSH
12511: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12515: LD_INT 10
12517: PPUSH
12518: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12522: LD_EXP 23
12526: PPUSH
12527: LD_STRING DO-Story-1
12529: PPUSH
12530: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12534: LD_EXP 23
12538: PPUSH
12539: LD_STRING DO-Story-2
12541: PPUSH
12542: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12546: LD_EXP 23
12550: PPUSH
12551: LD_STRING DO-Story-3
12553: PPUSH
12554: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12558: LD_EXP 23
12562: PPUSH
12563: LD_STRING DO-Story-4
12565: PPUSH
12566: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12570: LD_EXP 22
12574: PPUSH
12575: LD_STRING DH-Story-5
12577: PPUSH
12578: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12582: LD_EXP 23
12586: PPUSH
12587: LD_STRING DO-Story-6
12589: PPUSH
12590: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12594: LD_EXP 23
12598: PPUSH
12599: LD_STRING DO-Story-7
12601: PPUSH
12602: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12606: LD_EXP 22
12610: PPUSH
12611: LD_INT 82
12613: PPUSH
12614: LD_INT 44
12616: PPUSH
12617: CALL_OW 111
// AddComHold ( Heike ) ;
12621: LD_EXP 22
12625: PPUSH
12626: CALL_OW 200
// wait ( 0 0$4 ) ;
12630: LD_INT 140
12632: PPUSH
12633: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12637: LD_EXP 23
12641: PPUSH
12642: LD_INT 82
12644: PPUSH
12645: LD_INT 41
12647: PPUSH
12648: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12652: LD_EXP 23
12656: PPUSH
12657: LD_EXP 22
12661: PPUSH
12662: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12666: LD_INT 35
12668: PPUSH
12669: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12673: LD_EXP 22
12677: PPUSH
12678: LD_INT 82
12680: PPUSH
12681: LD_INT 44
12683: PPUSH
12684: CALL_OW 307
12688: IFFALSE 12666
// ComTurnXY ( Heike , 81 , 47 ) ;
12690: LD_EXP 22
12694: PPUSH
12695: LD_INT 81
12697: PPUSH
12698: LD_INT 47
12700: PPUSH
12701: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
12705: LD_EXP 22
12709: PPUSH
12710: LD_STRING DH-Story-8
12712: PPUSH
12713: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
12717: LD_EXP 23
12721: PPUSH
12722: LD_STRING DO-Story-9
12724: PPUSH
12725: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
12729: LD_EXP 23
12733: PPUSH
12734: LD_STRING DO-Story-10
12736: PPUSH
12737: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
12741: LD_EXP 22
12745: PPUSH
12746: LD_EXP 23
12750: PPUSH
12751: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
12755: LD_EXP 22
12759: PPUSH
12760: LD_STRING DH-Story-11
12762: PPUSH
12763: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
12767: LD_EXP 23
12771: PPUSH
12772: LD_EXP 22
12776: PPUSH
12777: CALL_OW 112
// wait ( 0 0$0.3 ) ;
12781: LD_INT 10
12783: PPUSH
12784: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12788: LD_EXP 23
12792: PPUSH
12793: LD_EXP 22
12797: PPUSH
12798: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
12802: LD_EXP 23
12806: PPUSH
12807: LD_STRING DO-Story-12
12809: PPUSH
12810: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
12814: LD_EXP 22
12818: PPUSH
12819: LD_STRING DH-Story-13
12821: PPUSH
12822: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
12826: LD_EXP 23
12830: PPUSH
12831: LD_STRING DO-Story-14
12833: PPUSH
12834: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
12838: LD_EXP 23
12842: PPUSH
12843: LD_STRING DO-Story-15
12845: PPUSH
12846: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
12850: LD_INT 84
12852: PPUSH
12853: LD_INT 48
12855: PPUSH
12856: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
12860: LD_EXP 22
12864: PPUSH
12865: LD_INT 84
12867: PPUSH
12868: LD_INT 48
12870: PPUSH
12871: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
12875: LD_EXP 22
12879: PPUSH
12880: LD_INT 84
12882: PPUSH
12883: LD_INT 49
12885: PPUSH
12886: CALL_OW 178
// wait ( 0 0$1 ) ;
12890: LD_INT 35
12892: PPUSH
12893: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
12897: LD_EXP 23
12901: PPUSH
12902: LD_EXP 22
12906: PPUSH
12907: CALL_OW 112
// wait ( 0 0$1 ) ;
12911: LD_INT 35
12913: PPUSH
12914: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12918: LD_EXP 23
12922: PPUSH
12923: LD_EXP 22
12927: PPUSH
12928: CALL_OW 119
// wait ( 0 0$0.3 ) ;
12932: LD_INT 10
12934: PPUSH
12935: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
12939: LD_EXP 23
12943: PPUSH
12944: LD_STRING DO-Story-16
12946: PPUSH
12947: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
12951: LD_STRING QOmar2
12953: PPUSH
12954: CALL_OW 97
12958: PUSH
12959: LD_INT 2
12961: EQUAL
12962: IFFALSE 13260
// begin ComMoveXY ( Heike , 79 , 57 ) ;
12964: LD_EXP 22
12968: PPUSH
12969: LD_INT 79
12971: PPUSH
12972: LD_INT 57
12974: PPUSH
12975: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
12979: LD_EXP 22
12983: PPUSH
12984: LD_INT 68
12986: PPUSH
12987: LD_INT 53
12989: PPUSH
12990: CALL_OW 171
// wait ( 0 0$2 ) ;
12994: LD_INT 70
12996: PPUSH
12997: CALL_OW 67
// RemoveSeeing ( 79 , 32 , 2 ) ;
13001: LD_INT 79
13003: PPUSH
13004: LD_INT 32
13006: PPUSH
13007: LD_INT 2
13009: PPUSH
13010: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13014: LD_INT 80
13016: PPUSH
13017: LD_INT 27
13019: PPUSH
13020: LD_INT 2
13022: PPUSH
13023: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13027: LD_INT 68
13029: PPUSH
13030: LD_INT 53
13032: PPUSH
13033: CALL_OW 84
// repeat wait ( 3 ) ;
13037: LD_INT 3
13039: PPUSH
13040: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13044: LD_EXP 22
13048: PPUSH
13049: LD_INT 68
13051: PPUSH
13052: LD_INT 53
13054: PPUSH
13055: CALL_OW 297
13059: PUSH
13060: LD_INT 6
13062: LESS
13063: IFFALSE 13037
// uc_side := 1 ;
13065: LD_ADDR_OWVAR 20
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
// uc_nation := nation_american ;
13073: LD_ADDR_OWVAR 21
13077: PUSH
13078: LD_INT 1
13080: ST_TO_ADDR
// amTroops := [ ] ;
13081: LD_ADDR_VAR 0 5
13085: PUSH
13086: EMPTY
13087: ST_TO_ADDR
// for i := 1 to 3 do
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: DOUBLE
13094: LD_INT 1
13096: DEC
13097: ST_TO_ADDR
13098: LD_INT 3
13100: PUSH
13101: FOR_TO
13102: IFFALSE 13195
// begin PrepareSoldier ( false , 10 ) ;
13104: LD_INT 0
13106: PPUSH
13107: LD_INT 10
13109: PPUSH
13110: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13114: LD_ADDR_VAR 0 5
13118: PUSH
13119: LD_VAR 0 5
13123: PPUSH
13124: CALL_OW 44
13128: PPUSH
13129: CALL 57956 0 2
13133: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13134: LD_VAR 0 5
13138: PUSH
13139: LD_VAR 0 2
13143: ARRAY
13144: PPUSH
13145: LD_INT 2
13147: PPUSH
13148: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13152: LD_VAR 0 5
13156: PUSH
13157: LD_VAR 0 2
13161: ARRAY
13162: PPUSH
13163: LD_INT 11
13165: PPUSH
13166: LD_INT 0
13168: PPUSH
13169: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13173: LD_VAR 0 5
13177: PUSH
13178: LD_VAR 0 2
13182: ARRAY
13183: PPUSH
13184: LD_EXP 22
13188: PPUSH
13189: CALL_OW 115
// end ;
13193: GO 13101
13195: POP
13196: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13197: LD_EXP 22
13201: PPUSH
13202: LD_VAR 0 5
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13215: LD_INT 35
13217: PPUSH
13218: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13222: LD_EXP 22
13226: PPUSH
13227: CALL_OW 301
13231: PUSH
13232: LD_EXP 22
13236: PPUSH
13237: CALL_OW 303
13241: OR
13242: IFFALSE 13215
// wait ( 0 0$2 ) ;
13244: LD_INT 70
13246: PPUSH
13247: CALL_OW 67
// YouLost ( Heike ) ;
13251: LD_STRING Heike
13253: PPUSH
13254: CALL_OW 104
// exit ;
13258: GO 13383
// end ; Say ( Omar , DO-Objective-1 ) ;
13260: LD_EXP 23
13264: PPUSH
13265: LD_STRING DO-Objective-1
13267: PPUSH
13268: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13272: LD_EXP 22
13276: PPUSH
13277: LD_EXP 23
13281: PPUSH
13282: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13286: LD_EXP 22
13290: PPUSH
13291: LD_STRING DH-Objective-2
13293: PPUSH
13294: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13298: LD_EXP 23
13302: PPUSH
13303: LD_STRING DO-Objective-3
13305: PPUSH
13306: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13310: LD_INT 79
13312: PPUSH
13313: LD_INT 32
13315: PPUSH
13316: LD_INT 2
13318: PPUSH
13319: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13323: LD_INT 80
13325: PPUSH
13326: LD_INT 27
13328: PPUSH
13329: LD_INT 2
13331: PPUSH
13332: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13336: LD_EXP 23
13340: PPUSH
13341: LD_INT 2
13343: PPUSH
13344: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13348: LD_EXP 25
13352: PPUSH
13353: LD_INT 2
13355: PPUSH
13356: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13360: LD_STRING O1
13362: PPUSH
13363: CALL_OW 337
// InGameOff ;
13367: CALL_OW 9
// gameActive := true ;
13371: LD_ADDR_EXP 19
13375: PUSH
13376: LD_INT 1
13378: ST_TO_ADDR
// SaveForQuickRestart ;
13379: CALL_OW 22
// end ;
13383: LD_VAR 0 1
13387: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13388: LD_EXP 19
13392: PUSH
13393: LD_EXP 7
13397: NOT
13398: AND
13399: PUSH
13400: LD_INT 4
13402: PPUSH
13403: LD_INT 22
13405: PUSH
13406: LD_INT 2
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PPUSH
13413: CALL_OW 70
13417: AND
13418: IFFALSE 13569
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
// begin spotArabianBase := true ;
13426: LD_ADDR_EXP 7
13430: PUSH
13431: LD_INT 1
13433: ST_TO_ADDR
// DialogueOn ;
13434: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13438: LD_INT 232
13440: PPUSH
13441: LD_INT 101
13443: PPUSH
13444: LD_INT 2
13446: PPUSH
13447: LD_INT 22
13449: NEG
13450: PPUSH
13451: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13455: LD_INT 232
13457: PPUSH
13458: LD_INT 101
13460: PPUSH
13461: LD_INT 2
13463: PPUSH
13464: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13468: LD_INT 232
13470: PPUSH
13471: LD_INT 101
13473: PPUSH
13474: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13478: LD_ADDR_VAR 0 1
13482: PUSH
13483: LD_INT 4
13485: PPUSH
13486: LD_INT 22
13488: PUSH
13489: LD_INT 5
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 70
13500: PUSH
13501: FOR_IN
13502: IFFALSE 13518
// SetSide ( i , 2 ) ;
13504: LD_VAR 0 1
13508: PPUSH
13509: LD_INT 2
13511: PPUSH
13512: CALL_OW 235
13516: GO 13501
13518: POP
13519: POP
// if not spotAmericanBase then
13520: LD_EXP 6
13524: NOT
13525: IFFALSE 13541
// Say ( Omar , DO-ArBase-1a ) else
13527: LD_EXP 23
13531: PPUSH
13532: LD_STRING DO-ArBase-1a
13534: PPUSH
13535: CALL_OW 88
13539: GO 13553
// Say ( Omar , DO-ArBase-1b ) ;
13541: LD_EXP 23
13545: PPUSH
13546: LD_STRING DO-ArBase-1b
13548: PPUSH
13549: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13553: LD_EXP 22
13557: PPUSH
13558: LD_STRING DH-ArBase-2
13560: PPUSH
13561: CALL_OW 88
// DialogueOff ;
13565: CALL_OW 7
// end ;
13569: PPOPN 1
13571: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13572: LD_EXP 19
13576: PUSH
13577: LD_INT 87
13579: PPUSH
13580: CALL_OW 306
13584: PUSH
13585: LD_INT 87
13587: PPUSH
13588: CALL_OW 313
13592: OR
13593: AND
13594: PUSH
13595: LD_EXP 22
13599: PPUSH
13600: CALL_OW 302
13604: AND
13605: PUSH
13606: LD_EXP 23
13610: PPUSH
13611: CALL_OW 302
13615: AND
13616: IFFALSE 13960
13618: GO 13620
13620: DISABLE
// begin DialogueOn ;
13621: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13625: LD_EXP 22
13629: PPUSH
13630: LD_STRING DH-Fac-1
13632: PPUSH
13633: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13637: LD_EXP 23
13641: PPUSH
13642: LD_STRING DOm-Fac-2
13644: PPUSH
13645: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
13649: LD_STRING 03_CargoRecycled
13651: PPUSH
13652: LD_INT 0
13654: PPUSH
13655: CALL_OW 30
13659: IFFALSE 13674
// SetTech ( tech_cargo , 2 , state_researched ) ;
13661: LD_INT 83
13663: PPUSH
13664: LD_INT 2
13666: PPUSH
13667: LD_INT 2
13669: PPUSH
13670: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
13674: LD_STRING 09_Markov
13676: PPUSH
13677: CALL_OW 28
13681: IFFALSE 13796
// begin Say ( Heike , DH-Fac-3a ) ;
13683: LD_EXP 22
13687: PPUSH
13688: LD_STRING DH-Fac-3a
13690: PPUSH
13691: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
13695: LD_INT 69
13697: PPUSH
13698: LD_INT 2
13700: PPUSH
13701: LD_INT 2
13703: PPUSH
13704: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
13708: LD_INT 39
13710: PPUSH
13711: LD_INT 2
13713: PPUSH
13714: LD_INT 2
13716: PPUSH
13717: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
13721: LD_INT 6
13723: PPUSH
13724: LD_INT 2
13726: PPUSH
13727: LD_INT 2
13729: PPUSH
13730: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13734: LD_INT 15
13736: PPUSH
13737: LD_INT 2
13739: PPUSH
13740: LD_INT 2
13742: PPUSH
13743: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13747: LD_EXP 22
13751: PPUSH
13752: LD_INT 3
13754: PPUSH
13755: CALL_OW 259
13759: PUSH
13760: LD_INT 10
13762: LESS
13763: IFFALSE 13794
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13765: LD_EXP 22
13769: PPUSH
13770: LD_INT 3
13772: PPUSH
13773: LD_EXP 22
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: CALL_OW 259
13785: PUSH
13786: LD_INT 1
13788: PLUS
13789: PPUSH
13790: CALL_OW 237
// end else
13794: GO 13949
// if TestCharacters ( 09_Olaf ) then
13796: LD_STRING 09_Olaf
13798: PPUSH
13799: CALL_OW 28
13803: IFFALSE 13892
// begin Say ( Heike , DH-Fac-3b ) ;
13805: LD_EXP 22
13809: PPUSH
13810: LD_STRING DH-Fac-3b
13812: PPUSH
13813: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
13817: LD_INT 6
13819: PPUSH
13820: LD_INT 2
13822: PPUSH
13823: LD_INT 2
13825: PPUSH
13826: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13830: LD_INT 15
13832: PPUSH
13833: LD_INT 2
13835: PPUSH
13836: LD_INT 2
13838: PPUSH
13839: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13843: LD_EXP 22
13847: PPUSH
13848: LD_INT 3
13850: PPUSH
13851: CALL_OW 259
13855: PUSH
13856: LD_INT 10
13858: LESS
13859: IFFALSE 13890
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13861: LD_EXP 22
13865: PPUSH
13866: LD_INT 3
13868: PPUSH
13869: LD_EXP 22
13873: PPUSH
13874: LD_INT 3
13876: PPUSH
13877: CALL_OW 259
13881: PUSH
13882: LD_INT 1
13884: PLUS
13885: PPUSH
13886: CALL_OW 237
// end else
13890: GO 13949
// if GetSkill ( Heike , skill_mechanical ) > 5 then
13892: LD_EXP 22
13896: PPUSH
13897: LD_INT 3
13899: PPUSH
13900: CALL_OW 259
13904: PUSH
13905: LD_INT 5
13907: GREATER
13908: IFFALSE 13937
// begin Say ( Heike , DH-Fac-3c ) ;
13910: LD_EXP 22
13914: PPUSH
13915: LD_STRING DH-Fac-3c
13917: PPUSH
13918: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
13922: LD_INT 6
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 2
13930: PPUSH
13931: CALL_OW 322
// end else
13935: GO 13949
// Say ( Heike , DH-Fac-3d ) ;
13937: LD_EXP 22
13941: PPUSH
13942: LD_STRING DH-Fac-3d
13944: PPUSH
13945: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
13949: LD_STRING ARemote
13951: PPUSH
13952: CALL_OW 337
// DialogueOff ;
13956: CALL_OW 7
// end ;
13960: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13961: LD_EXP 19
13965: PUSH
13966: LD_INT 89
13968: PPUSH
13969: CALL_OW 306
13973: PUSH
13974: LD_INT 89
13976: PPUSH
13977: CALL_OW 313
13981: OR
13982: AND
13983: PUSH
13984: LD_EXP 22
13988: PPUSH
13989: CALL_OW 302
13993: AND
13994: PUSH
13995: LD_EXP 23
13999: PPUSH
14000: CALL_OW 302
14004: AND
14005: IFFALSE 14233
14007: GO 14009
14009: DISABLE
// begin DialogueOn ;
14010: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14014: LD_EXP 22
14018: PPUSH
14019: LD_STRING DH-Lab-1
14021: PPUSH
14022: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14026: LD_EXP 23
14030: PPUSH
14031: LD_STRING DOm-Lab-2
14033: PPUSH
14034: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14038: LD_STRING 09_Aviradze
14040: PPUSH
14041: CALL_OW 28
14045: IFFALSE 14100
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14047: LD_INT 1
14049: PPUSH
14050: LD_INT 2
14052: PPUSH
14053: LD_INT 2
14055: PPUSH
14056: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14060: LD_INT 2
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: LD_INT 2
14068: PPUSH
14069: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14073: LD_INT 11
14075: PPUSH
14076: LD_INT 2
14078: PPUSH
14079: LD_INT 2
14081: PPUSH
14082: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14086: LD_EXP 22
14090: PPUSH
14091: LD_STRING DH-Lab-4a
14093: PPUSH
14094: CALL_OW 88
// end else
14098: GO 14112
// Say ( Heike , DH-Lab-4b ) ;
14100: LD_EXP 22
14104: PPUSH
14105: LD_STRING DH-Lab-4b
14107: PPUSH
14108: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14112: LD_STRING 05_DrugsTested
14114: PPUSH
14115: LD_EXP 1
14119: PPUSH
14120: CALL_OW 30
14124: IFFALSE 14151
// begin Say ( Heike , DH-Lab-5a ) ;
14126: LD_EXP 22
14130: PPUSH
14131: LD_STRING DH-Lab-5a
14133: PPUSH
14134: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14138: LD_INT 5
14140: PPUSH
14141: LD_INT 2
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14151: LD_STRING 09_ApeBrain
14153: PPUSH
14154: LD_EXP 1
14158: PPUSH
14159: CALL_OW 30
14163: IFFALSE 14202
// begin Say ( Heike , DH-Lab-6a ) ;
14165: LD_EXP 22
14169: PPUSH
14170: LD_STRING DH-Lab-6a
14172: PPUSH
14173: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14177: LD_EXP 23
14181: PPUSH
14182: LD_STRING DOm-Lab-7a
14184: PPUSH
14185: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14189: LD_INT 4
14191: PPUSH
14192: LD_INT 2
14194: PPUSH
14195: LD_INT 1
14197: PPUSH
14198: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14202: LD_STRING 09_ApeNeural
14204: PPUSH
14205: LD_EXP 1
14209: PPUSH
14210: CALL_OW 30
14214: IFFALSE 14229
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14216: LD_INT 3
14218: PPUSH
14219: LD_INT 2
14221: PPUSH
14222: LD_INT 1
14224: PPUSH
14225: CALL_OW 322
// end ; DialogueOff ;
14229: CALL_OW 7
// end ;
14233: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14234: LD_EXP 19
14238: PUSH
14239: LD_INT 22
14241: PUSH
14242: LD_INT 2
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 25
14251: PUSH
14252: LD_INT 12
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 69
14267: AND
14268: IFFALSE 14303
14270: GO 14272
14272: DISABLE
// begin if IsOk ( Heike ) then
14273: LD_EXP 22
14277: PPUSH
14278: CALL_OW 302
14282: IFFALSE 14296
// Say ( Heike , DH-Ape-1 ) ;
14284: LD_EXP 22
14288: PPUSH
14289: LD_STRING DH-Ape-1
14291: PPUSH
14292: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14296: LD_STRING AApes
14298: PPUSH
14299: CALL_OW 337
// end ;
14303: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14304: LD_EXP 19
14308: PUSH
14309: LD_INT 22
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 25
14321: PUSH
14322: LD_INT 15
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PPUSH
14333: CALL_OW 69
14337: PUSH
14338: LD_INT 5
14340: GREATEREQUAL
14341: AND
14342: IFFALSE 14444
14344: GO 14346
14346: DISABLE
// begin hasApes := true ;
14347: LD_ADDR_EXP 16
14351: PUSH
14352: LD_INT 1
14354: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14355: LD_STRING AApesOut
14357: PPUSH
14358: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14362: LD_EXP 22
14366: PPUSH
14367: CALL_OW 302
14371: NOT
14372: PUSH
14373: LD_EXP 23
14377: PPUSH
14378: CALL_OW 302
14382: NOT
14383: OR
14384: IFFALSE 14388
// exit ;
14386: GO 14444
// DialogueOn ;
14388: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14392: LD_EXP 22
14396: PPUSH
14397: LD_STRING DH-ApeArmy-1
14399: PPUSH
14400: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14404: LD_EXP 23
14408: PPUSH
14409: LD_STRING DOm-ApeArmy-2
14411: PPUSH
14412: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14416: LD_EXP 22
14420: PPUSH
14421: LD_STRING DH-ApeArmy-3
14423: PPUSH
14424: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14428: LD_EXP 23
14432: PPUSH
14433: LD_STRING DOm-ApeArmy-4
14435: PPUSH
14436: CALL_OW 88
// DialogueOff ;
14440: CALL_OW 7
// end ;
14444: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14445: LD_EXP 19
14449: PUSH
14450: LD_INT 5
14452: PPUSH
14453: LD_INT 2
14455: PPUSH
14456: CALL_OW 321
14460: PUSH
14461: LD_INT 2
14463: EQUAL
14464: AND
14465: IFFALSE 14501
14467: GO 14469
14469: DISABLE
// begin hasDrugs := true ;
14470: LD_ADDR_EXP 17
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
// if IsOk ( Heike ) then
14478: LD_EXP 22
14482: PPUSH
14483: CALL_OW 302
14487: IFFALSE 14501
// Say ( Heike , DH-Stim-1 ) ;
14489: LD_EXP 22
14493: PPUSH
14494: LD_STRING DH-Stim-1
14496: PPUSH
14497: CALL_OW 88
// end ;
14501: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14502: LD_EXP 19
14506: PUSH
14507: LD_INT 22
14509: PUSH
14510: LD_INT 2
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 25
14519: PUSH
14520: LD_INT 17
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 69
14535: AND
14536: IFFALSE 14553
14538: GO 14540
14540: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14541: LD_EXP 22
14545: PPUSH
14546: LD_STRING DH-Kamikadze-1
14548: PPUSH
14549: CALL_OW 88
14553: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14554: LD_EXP 19
14558: PUSH
14559: LD_INT 22
14561: PUSH
14562: LD_INT 2
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 31
14571: PUSH
14572: LD_INT 31
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: AND
14588: PUSH
14589: LD_EXP 23
14593: PPUSH
14594: CALL_OW 302
14598: AND
14599: PUSH
14600: LD_EXP 22
14604: PPUSH
14605: CALL_OW 302
14609: AND
14610: IFFALSE 14695
14612: GO 14614
14614: DISABLE
// begin InGameOn ;
14615: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14619: LD_EXP 23
14623: PPUSH
14624: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14628: LD_EXP 22
14632: PPUSH
14633: LD_STRING DH-Mastodont-1
14635: PPUSH
14636: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
14640: LD_EXP 23
14644: PPUSH
14645: LD_STRING DOm-Mastodont-2
14647: PPUSH
14648: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
14652: LD_EXP 22
14656: PPUSH
14657: LD_STRING DH-Mastodont-3
14659: PPUSH
14660: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
14664: LD_EXP 23
14668: PPUSH
14669: LD_STRING DOm-Mastodont-4
14671: PPUSH
14672: CALL_OW 88
// hasMastodont := true ;
14676: LD_ADDR_EXP 13
14680: PUSH
14681: LD_INT 1
14683: ST_TO_ADDR
// InGameOff ;
14684: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
14688: LD_STRING ACH_MASTODONTTAME
14690: PPUSH
14691: CALL_OW 543
// end ;
14695: END
// every 0 0$1 trigger gameActive and tigerCounter do
14696: LD_EXP 19
14700: PUSH
14701: LD_EXP 21
14705: AND
14706: IFFALSE 14718
14708: GO 14710
14710: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
14711: LD_STRING ACH_TIGERTAME
14713: PPUSH
14714: CALL_OW 543
14718: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
14719: LD_EXP 19
14723: PUSH
14724: LD_EXP 21
14728: PUSH
14729: LD_INT 1
14731: GREATER
14732: AND
14733: IFFALSE 14837
14735: GO 14737
14737: DISABLE
// begin hasTigers := true ;
14738: LD_ADDR_EXP 15
14742: PUSH
14743: LD_INT 1
14745: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
14746: LD_EXP 23
14750: PPUSH
14751: CALL_OW 302
14755: NOT
14756: PUSH
14757: LD_EXP 22
14761: PPUSH
14762: CALL_OW 302
14766: NOT
14767: OR
14768: IFFALSE 14772
// exit ;
14770: GO 14837
// CenterNowOnUnits ( Omar ) ;
14772: LD_EXP 23
14776: PPUSH
14777: CALL_OW 87
// DialogueOn ;
14781: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
14785: LD_EXP 23
14789: PPUSH
14790: LD_STRING DOm-Tiger-1
14792: PPUSH
14793: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
14797: LD_EXP 22
14801: PPUSH
14802: LD_STRING DH-Tiger-2
14804: PPUSH
14805: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
14809: LD_EXP 23
14813: PPUSH
14814: LD_STRING DOm-Tiger-3
14816: PPUSH
14817: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
14821: LD_EXP 22
14825: PPUSH
14826: LD_STRING DH-Tiger-4
14828: PPUSH
14829: CALL_OW 88
// DialogueOff ;
14833: CALL_OW 7
// end ;
14837: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
14838: LD_EXP 19
14842: PUSH
14843: LD_INT 22
14845: PUSH
14846: LD_INT 2
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 50
14855: PUSH
14856: EMPTY
14857: LIST
14858: PUSH
14859: LD_INT 33
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 69
14878: PUSH
14879: LD_INT 3
14881: GREATEREQUAL
14882: AND
14883: IFFALSE 14926
14885: GO 14887
14887: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
14888: LD_STRING ARemoteOut
14890: PPUSH
14891: CALL_OW 337
// hasVehicles := true ;
14895: LD_ADDR_EXP 14
14899: PUSH
14900: LD_INT 1
14902: ST_TO_ADDR
// if IsOk ( Heike ) then
14903: LD_EXP 22
14907: PPUSH
14908: CALL_OW 302
14912: IFFALSE 14926
// Say ( Heike , DH-Mechanic-1 ) ;
14914: LD_EXP 22
14918: PPUSH
14919: LD_STRING DH-Mechanic-1
14921: PPUSH
14922: CALL_OW 88
// end ;
14926: END
// every 0 0$1 trigger gameActive and FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) do
14927: LD_EXP 19
14931: PUSH
14932: LD_INT 29
14934: PPUSH
14935: LD_INT 22
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 70
14949: AND
14950: IFFALSE 14963
14952: GO 14954
14954: DISABLE
// spotAmericanBase := true ;
14955: LD_ADDR_EXP 6
14959: PUSH
14960: LD_INT 1
14962: ST_TO_ADDR
14963: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
14964: LD_EXP 19
14968: PUSH
14969: LD_EXP 6
14973: AND
14974: PUSH
14975: LD_EXP 23
14979: PPUSH
14980: CALL_OW 302
14984: AND
14985: PUSH
14986: LD_EXP 22
14990: PPUSH
14991: CALL_OW 302
14995: AND
14996: IFFALSE 15236
14998: GO 15000
15000: DISABLE
// begin DialogueOn ;
15001: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15005: LD_INT 92
15007: PPUSH
15008: LD_INT 129
15010: PPUSH
15011: LD_INT 2
15013: PPUSH
15014: LD_INT 22
15016: NEG
15017: PPUSH
15018: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15022: LD_INT 92
15024: PPUSH
15025: LD_INT 129
15027: PPUSH
15028: LD_INT 2
15030: PPUSH
15031: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15035: LD_INT 92
15037: PPUSH
15038: LD_INT 129
15040: PPUSH
15041: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15045: LD_INT 10
15047: PPUSH
15048: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15052: LD_EXP 23
15056: PPUSH
15057: LD_STRING DO-AmBase-1
15059: PPUSH
15060: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15064: LD_EXP 22
15068: PPUSH
15069: LD_STRING DH-AmBase-2
15071: PPUSH
15072: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15076: LD_EXP 23
15080: PPUSH
15081: LD_STRING DO-AmBase-3
15083: PPUSH
15084: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15088: LD_EXP 22
15092: PPUSH
15093: LD_STRING DH-AmBase-4
15095: PPUSH
15096: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15100: LD_EXP 23
15104: PPUSH
15105: LD_STRING DO-AmBase-5
15107: PPUSH
15108: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15112: LD_EXP 22
15116: PPUSH
15117: LD_STRING DH-AmBase-6
15119: PPUSH
15120: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15124: LD_EXP 23
15128: PPUSH
15129: LD_STRING DO-AmBase-7
15131: PPUSH
15132: CALL_OW 88
// if not spotArabianBase then
15136: LD_EXP 7
15140: NOT
15141: IFFALSE 15157
// begin Say ( Omar , DO-AmBase-8a ) ;
15143: LD_EXP 23
15147: PPUSH
15148: LD_STRING DO-AmBase-8a
15150: PPUSH
15151: CALL_OW 88
// end else
15155: GO 15169
// begin Say ( Omar , DO-AmBase-8b ) ;
15157: LD_EXP 23
15161: PPUSH
15162: LD_STRING DO-AmBase-8b
15164: PPUSH
15165: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15169: LD_EXP 22
15173: PPUSH
15174: CALL_OW 310
15178: IFFALSE 15196
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15180: LD_EXP 22
15184: PPUSH
15185: CALL_OW 310
15189: PPUSH
15190: CALL_OW 87
15194: GO 15205
// CenterNowOnUnits ( Heike ) ;
15196: LD_EXP 22
15200: PPUSH
15201: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15205: LD_EXP 22
15209: PPUSH
15210: LD_STRING DH-AmBase-9
15212: PPUSH
15213: CALL_OW 88
// DialogueOff ;
15217: CALL_OW 7
// spotByAmerican := true ;
15221: LD_ADDR_EXP 8
15225: PUSH
15226: LD_INT 1
15228: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15229: LD_STRING O2
15231: PPUSH
15232: CALL_OW 337
// end ;
15236: END
// function TalkAboutLegion ; begin
15237: LD_INT 0
15239: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15240: LD_EXP 22
15244: PPUSH
15245: LD_STRING DH-Legion-1
15247: PPUSH
15248: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15252: LD_EXP 23
15256: PPUSH
15257: LD_STRING DOm-Legion-2
15259: PPUSH
15260: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15264: LD_EXP 22
15268: PPUSH
15269: LD_STRING DH-Legion-3
15271: PPUSH
15272: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15276: LD_EXP 23
15280: PPUSH
15281: LD_STRING DOm-Legion-4
15283: PPUSH
15284: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15288: LD_EXP 22
15292: PPUSH
15293: LD_STRING DH-Legion-5
15295: PPUSH
15296: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15300: LD_EXP 23
15304: PPUSH
15305: LD_STRING DOm-Legion-6
15307: PPUSH
15308: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15312: LD_EXP 22
15316: PPUSH
15317: LD_STRING DH-Legion-7
15319: PPUSH
15320: CALL_OW 88
// end ;
15324: LD_VAR 0 1
15328: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15329: LD_EXP 19
15333: PUSH
15334: LD_EXP 22
15338: PUSH
15339: LD_EXP 23
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PPUSH
15348: LD_INT 22
15350: PPUSH
15351: CALL 11426 0 2
15355: AND
15356: PUSH
15357: LD_EXP 9
15361: NOT
15362: AND
15363: PUSH
15364: LD_EXP 10
15368: NOT
15369: AND
15370: IFFALSE 15855
15372: GO 15374
15374: DISABLE
15375: LD_INT 0
15377: PPUSH
15378: PPUSH
15379: PPUSH
// begin uc_side := 8 ;
15380: LD_ADDR_OWVAR 20
15384: PUSH
15385: LD_INT 8
15387: ST_TO_ADDR
// uc_nation := nation_american ;
15388: LD_ADDR_OWVAR 21
15392: PUSH
15393: LD_INT 1
15395: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15396: LD_INT 3
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_INT 1
15404: PPUSH
15405: LD_INT 9
15407: PPUSH
15408: LD_INT 90
15410: PPUSH
15411: CALL 25094 0 5
// veh := CreateVehicle ;
15415: LD_ADDR_VAR 0 3
15419: PUSH
15420: CALL_OW 45
15424: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15425: LD_ADDR_EXP 42
15429: PUSH
15430: LD_EXP 42
15434: PPUSH
15435: LD_VAR 0 3
15439: PPUSH
15440: CALL 57956 0 2
15444: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15445: LD_VAR 0 3
15449: PPUSH
15450: LD_INT 2
15452: PPUSH
15453: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15457: LD_VAR 0 3
15461: PPUSH
15462: LD_INT 126
15464: PPUSH
15465: LD_INT 18
15467: PPUSH
15468: LD_INT 0
15470: PPUSH
15471: CALL_OW 48
// uc_nation := nation_arabian ;
15475: LD_ADDR_OWVAR 21
15479: PUSH
15480: LD_INT 2
15482: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15483: LD_INT 0
15485: PPUSH
15486: LD_INT 6
15488: PUSH
15489: LD_INT 7
15491: PUSH
15492: LD_INT 8
15494: PUSH
15495: LD_INT 9
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: PUSH
15504: LD_OWVAR 67
15508: ARRAY
15509: PPUSH
15510: CALL_OW 383
// un := CreateHuman ;
15514: LD_ADDR_VAR 0 2
15518: PUSH
15519: CALL_OW 44
15523: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15524: LD_ADDR_EXP 37
15528: PUSH
15529: LD_EXP 37
15533: PPUSH
15534: LD_VAR 0 2
15538: PPUSH
15539: CALL 57956 0 2
15543: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15544: LD_VAR 0 2
15548: PPUSH
15549: LD_VAR 0 3
15553: PPUSH
15554: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15558: LD_INT 0
15560: PPUSH
15561: LD_INT 6
15563: PUSH
15564: LD_INT 7
15566: PUSH
15567: LD_INT 8
15569: PUSH
15570: LD_INT 9
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: PUSH
15579: LD_OWVAR 67
15583: ARRAY
15584: PPUSH
15585: CALL_OW 381
// for i := 1 to 3 do
15589: LD_ADDR_VAR 0 1
15593: PUSH
15594: DOUBLE
15595: LD_INT 1
15597: DEC
15598: ST_TO_ADDR
15599: LD_INT 3
15601: PUSH
15602: FOR_TO
15603: IFFALSE 15670
// begin un := CreateHuman ;
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: CALL_OW 44
15614: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15615: LD_ADDR_EXP 37
15619: PUSH
15620: LD_EXP 37
15624: PPUSH
15625: LD_VAR 0 2
15629: PPUSH
15630: CALL 57956 0 2
15634: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15635: LD_VAR 0 2
15639: PPUSH
15640: LD_INT 2
15642: PPUSH
15643: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
15647: LD_VAR 0 2
15651: PPUSH
15652: LD_INT 126
15654: PPUSH
15655: LD_INT 18
15657: PPUSH
15658: LD_INT 4
15660: PPUSH
15661: LD_INT 0
15663: PPUSH
15664: CALL_OW 50
// end ;
15668: GO 15602
15670: POP
15671: POP
// wait ( 0 0$01 ) ;
15672: LD_INT 35
15674: PPUSH
15675: CALL_OW 67
// DialogueOn ;
15679: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
15683: LD_INT 126
15685: PPUSH
15686: LD_INT 18
15688: PPUSH
15689: LD_INT 2
15691: PPUSH
15692: LD_INT 16
15694: NEG
15695: PPUSH
15696: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
15700: LD_INT 126
15702: PPUSH
15703: LD_INT 18
15705: PPUSH
15706: CALL_OW 86
// TalkAboutLegion ;
15710: CALL 15237 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
15714: LD_INT 126
15716: PPUSH
15717: LD_INT 18
15719: PPUSH
15720: LD_INT 2
15722: PPUSH
15723: CALL_OW 331
// DialogueOff ;
15727: CALL_OW 7
// spotLegion := true ;
15731: LD_ADDR_EXP 10
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
15739: LD_EXP 37
15743: PPUSH
15744: LD_INT 164
15746: PPUSH
15747: LD_INT 47
15749: PPUSH
15750: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
15754: LD_EXP 37
15758: PPUSH
15759: LD_INT 179
15761: PPUSH
15762: LD_INT 20
15764: PPUSH
15765: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
15769: LD_INT 35
15771: PPUSH
15772: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
15776: LD_EXP 37
15780: PPUSH
15781: LD_INT 60
15783: PUSH
15784: EMPTY
15785: LIST
15786: PPUSH
15787: CALL_OW 72
15791: NOT
15792: PUSH
15793: LD_EXP 37
15797: PPUSH
15798: LD_INT 50
15800: PUSH
15801: EMPTY
15802: LIST
15803: PPUSH
15804: CALL_OW 72
15808: NOT
15809: OR
15810: IFFALSE 15769
// if not UnitFilter ( legEForces , [ f_ok ] ) then
15812: LD_EXP 37
15816: PPUSH
15817: LD_INT 50
15819: PUSH
15820: EMPTY
15821: LIST
15822: PPUSH
15823: CALL_OW 72
15827: NOT
15828: IFFALSE 15832
// exit ;
15830: GO 15855
// legForces := legForces union legEForces ;
15832: LD_ADDR_EXP 36
15836: PUSH
15837: LD_EXP 36
15841: PUSH
15842: LD_EXP 37
15846: UNION
15847: ST_TO_ADDR
// legEForces := [ ] ;
15848: LD_ADDR_EXP 37
15852: PUSH
15853: EMPTY
15854: ST_TO_ADDR
// end ;
15855: PPOPN 3
15857: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15858: LD_EXP 19
15862: PUSH
15863: LD_EXP 22
15867: PUSH
15868: LD_EXP 23
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PPUSH
15877: LD_INT 23
15879: PPUSH
15880: CALL 11426 0 2
15884: AND
15885: PUSH
15886: LD_EXP 9
15890: NOT
15891: AND
15892: PUSH
15893: LD_EXP 10
15897: NOT
15898: AND
15899: IFFALSE 16384
15901: GO 15903
15903: DISABLE
15904: LD_INT 0
15906: PPUSH
15907: PPUSH
15908: PPUSH
// begin uc_side := 8 ;
15909: LD_ADDR_OWVAR 20
15913: PUSH
15914: LD_INT 8
15916: ST_TO_ADDR
// uc_nation := nation_american ;
15917: LD_ADDR_OWVAR 21
15921: PUSH
15922: LD_INT 1
15924: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15925: LD_INT 3
15927: PPUSH
15928: LD_INT 1
15930: PPUSH
15931: LD_INT 1
15933: PPUSH
15934: LD_INT 9
15936: PPUSH
15937: LD_INT 90
15939: PPUSH
15940: CALL 25094 0 5
// veh := CreateVehicle ;
15944: LD_ADDR_VAR 0 3
15948: PUSH
15949: CALL_OW 45
15953: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15954: LD_ADDR_EXP 42
15958: PUSH
15959: LD_EXP 42
15963: PPUSH
15964: LD_VAR 0 3
15968: PPUSH
15969: CALL 57956 0 2
15973: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
15974: LD_VAR 0 3
15978: PPUSH
15979: LD_INT 3
15981: PPUSH
15982: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
15986: LD_VAR 0 3
15990: PPUSH
15991: LD_INT 224
15993: PPUSH
15994: LD_INT 57
15996: PPUSH
15997: LD_INT 0
15999: PPUSH
16000: CALL_OW 48
// uc_nation := nation_arabian ;
16004: LD_ADDR_OWVAR 21
16008: PUSH
16009: LD_INT 2
16011: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16012: LD_INT 0
16014: PPUSH
16015: LD_INT 6
16017: PUSH
16018: LD_INT 7
16020: PUSH
16021: LD_INT 8
16023: PUSH
16024: LD_INT 9
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: PUSH
16033: LD_OWVAR 67
16037: ARRAY
16038: PPUSH
16039: CALL_OW 383
// un := CreateHuman ;
16043: LD_ADDR_VAR 0 2
16047: PUSH
16048: CALL_OW 44
16052: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16053: LD_ADDR_EXP 37
16057: PUSH
16058: LD_EXP 37
16062: PPUSH
16063: LD_VAR 0 2
16067: PPUSH
16068: CALL 57956 0 2
16072: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16073: LD_VAR 0 2
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16087: LD_INT 0
16089: PPUSH
16090: LD_INT 6
16092: PUSH
16093: LD_INT 7
16095: PUSH
16096: LD_INT 8
16098: PUSH
16099: LD_INT 9
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: PUSH
16108: LD_OWVAR 67
16112: ARRAY
16113: PPUSH
16114: CALL_OW 381
// for i := 1 to 3 do
16118: LD_ADDR_VAR 0 1
16122: PUSH
16123: DOUBLE
16124: LD_INT 1
16126: DEC
16127: ST_TO_ADDR
16128: LD_INT 3
16130: PUSH
16131: FOR_TO
16132: IFFALSE 16199
// begin un := CreateHuman ;
16134: LD_ADDR_VAR 0 2
16138: PUSH
16139: CALL_OW 44
16143: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16144: LD_ADDR_EXP 37
16148: PUSH
16149: LD_EXP 37
16153: PPUSH
16154: LD_VAR 0 2
16158: PPUSH
16159: CALL 57956 0 2
16163: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16164: LD_VAR 0 2
16168: PPUSH
16169: LD_INT 3
16171: PPUSH
16172: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16176: LD_VAR 0 2
16180: PPUSH
16181: LD_INT 224
16183: PPUSH
16184: LD_INT 57
16186: PPUSH
16187: LD_INT 4
16189: PPUSH
16190: LD_INT 0
16192: PPUSH
16193: CALL_OW 50
// end ;
16197: GO 16131
16199: POP
16200: POP
// wait ( 0 0$01 ) ;
16201: LD_INT 35
16203: PPUSH
16204: CALL_OW 67
// DialogueOn ;
16208: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16212: LD_INT 224
16214: PPUSH
16215: LD_INT 57
16217: PPUSH
16218: LD_INT 2
16220: PPUSH
16221: LD_INT 16
16223: NEG
16224: PPUSH
16225: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16229: LD_INT 224
16231: PPUSH
16232: LD_INT 57
16234: PPUSH
16235: CALL_OW 86
// TalkAboutLegion ;
16239: CALL 15237 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16243: LD_INT 224
16245: PPUSH
16246: LD_INT 57
16248: PPUSH
16249: LD_INT 2
16251: PPUSH
16252: CALL_OW 331
// DialogueOff ;
16256: CALL_OW 7
// spotLegion := true ;
16260: LD_ADDR_EXP 10
16264: PUSH
16265: LD_INT 1
16267: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16268: LD_EXP 37
16272: PPUSH
16273: LD_INT 164
16275: PPUSH
16276: LD_INT 47
16278: PPUSH
16279: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16283: LD_EXP 37
16287: PPUSH
16288: LD_INT 179
16290: PPUSH
16291: LD_INT 20
16293: PPUSH
16294: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16298: LD_INT 35
16300: PPUSH
16301: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16305: LD_EXP 37
16309: PPUSH
16310: LD_INT 60
16312: PUSH
16313: EMPTY
16314: LIST
16315: PPUSH
16316: CALL_OW 72
16320: NOT
16321: PUSH
16322: LD_EXP 37
16326: PPUSH
16327: LD_INT 50
16329: PUSH
16330: EMPTY
16331: LIST
16332: PPUSH
16333: CALL_OW 72
16337: NOT
16338: OR
16339: IFFALSE 16298
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16341: LD_EXP 37
16345: PPUSH
16346: LD_INT 50
16348: PUSH
16349: EMPTY
16350: LIST
16351: PPUSH
16352: CALL_OW 72
16356: NOT
16357: IFFALSE 16361
// exit ;
16359: GO 16384
// legForces := legForces union legEForces ;
16361: LD_ADDR_EXP 36
16365: PUSH
16366: LD_EXP 36
16370: PUSH
16371: LD_EXP 37
16375: UNION
16376: ST_TO_ADDR
// legEForces := [ ] ;
16377: LD_ADDR_EXP 37
16381: PUSH
16382: EMPTY
16383: ST_TO_ADDR
// end ;
16384: PPOPN 3
16386: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) ) and IsOk ( Heike ) and IsOk ( Omar ) and not spotByLegion do
16387: LD_EXP 19
16391: PUSH
16392: LD_INT 8
16394: PPUSH
16395: LD_EXP 23
16399: PPUSH
16400: CALL_OW 292
16404: PUSH
16405: LD_INT 8
16407: PPUSH
16408: LD_EXP 22
16412: PPUSH
16413: CALL_OW 292
16417: OR
16418: AND
16419: PUSH
16420: LD_EXP 22
16424: PPUSH
16425: CALL_OW 302
16429: AND
16430: PUSH
16431: LD_EXP 23
16435: PPUSH
16436: CALL_OW 302
16440: AND
16441: PUSH
16442: LD_EXP 9
16446: NOT
16447: AND
16448: IFFALSE 16589
16450: GO 16452
16452: DISABLE
// begin DialogueOn ;
16453: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16457: LD_EXP 35
16461: PPUSH
16462: LD_STRING DF-Spot-1
16464: PPUSH
16465: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16469: LD_EXP 22
16473: PPUSH
16474: LD_STRING DH-Spot-2
16476: PPUSH
16477: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16481: LD_EXP 35
16485: PPUSH
16486: LD_STRING DF-Spot-3
16488: PPUSH
16489: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16493: LD_EXP 22
16497: PPUSH
16498: LD_STRING DH-Spot-4
16500: PPUSH
16501: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16505: LD_EXP 23
16509: PPUSH
16510: LD_STRING DOm-Spot-5
16512: PPUSH
16513: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16517: LD_EXP 35
16521: PPUSH
16522: LD_STRING DF-Spot-6
16524: PPUSH
16525: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16529: LD_EXP 35
16533: PPUSH
16534: LD_STRING DF-Spot-7
16536: PPUSH
16537: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16541: LD_EXP 35
16545: PPUSH
16546: LD_STRING DF-Spot-8
16548: PPUSH
16549: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16553: LD_EXP 22
16557: PPUSH
16558: LD_STRING DH-Spot-9
16560: PPUSH
16561: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16565: LD_EXP 35
16569: PPUSH
16570: LD_STRING DF-Spot-10
16572: PPUSH
16573: CALL_OW 94
// DialogueOff ;
16577: CALL_OW 7
// spotByLegion := true ;
16581: LD_ADDR_EXP 9
16585: PUSH
16586: LD_INT 1
16588: ST_TO_ADDR
// end ;
16589: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16590: LD_EXP 19
16594: PUSH
16595: LD_EXP 9
16599: PUSH
16600: LD_EXP 10
16604: OR
16605: AND
16606: IFFALSE 16618
16608: GO 16610
16610: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16611: LD_STRING O3
16613: PPUSH
16614: CALL_OW 337
16618: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16619: LD_EXP 19
16623: PUSH
16624: LD_INT 22
16626: PUSH
16627: LD_INT 8
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 21
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 50
16646: PUSH
16647: EMPTY
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 69
16659: PUSH
16660: LD_INT 0
16662: EQUAL
16663: AND
16664: IFFALSE 16762
16666: GO 16668
16668: DISABLE
// begin legScriptActive := false ;
16669: LD_ADDR_EXP 4
16673: PUSH
16674: LD_INT 0
16676: ST_TO_ADDR
// if not americanDestroyed then
16677: LD_EXP 11
16681: NOT
16682: IFFALSE 16691
// SetAchievement ( ACH_REVANGE ) ;
16684: LD_STRING ACH_REVANGE
16686: PPUSH
16687: CALL_OW 543
// legionDestroyed := true ;
16691: LD_ADDR_EXP 12
16695: PUSH
16696: LD_INT 1
16698: ST_TO_ADDR
// DialogueOn ;
16699: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
16703: LD_EXP 35
16707: PPUSH
16708: LD_STRING DF-LegDes-1
16710: PPUSH
16711: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
16715: LD_EXP 22
16719: PPUSH
16720: LD_STRING DH-LegDes-2
16722: PPUSH
16723: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
16727: LD_EXP 35
16731: PPUSH
16732: LD_STRING DF-LegDes-3
16734: PPUSH
16735: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
16739: LD_EXP 22
16743: PPUSH
16744: LD_STRING DH-LegDes-4
16746: PPUSH
16747: CALL_OW 88
// DialogueOff ;
16751: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
16755: LD_STRING O5
16757: PPUSH
16758: CALL_OW 337
// end ;
16762: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
16763: LD_EXP 19
16767: PUSH
16768: LD_EXP 26
16772: PPUSH
16773: LD_INT 21
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 50
16785: PUSH
16786: EMPTY
16787: LIST
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PPUSH
16793: CALL_OW 72
16797: PUSH
16798: LD_INT 6
16800: LESS
16801: AND
16802: IFFALSE 17050
16804: GO 16806
16806: DISABLE
16807: LD_INT 0
16809: PPUSH
16810: PPUSH
// begin amScriptActive := false ;
16811: LD_ADDR_EXP 3
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16819: LD_ADDR_VAR 0 2
16823: PUSH
16824: LD_EXP 26
16828: PPUSH
16829: LD_INT 21
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 50
16841: PUSH
16842: EMPTY
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 72
16853: ST_TO_ADDR
// for i in tmp do
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_VAR 0 2
16863: PUSH
16864: FOR_IN
16865: IFFALSE 16893
// begin ComExit ( i ) ;
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL 58354 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
16876: LD_VAR 0 1
16880: PPUSH
16881: LD_INT 63
16883: PPUSH
16884: LD_INT 124
16886: PPUSH
16887: CALL_OW 171
// end ;
16891: GO 16864
16893: POP
16894: POP
// wait ( 0 0$2 ) ;
16895: LD_INT 70
16897: PPUSH
16898: CALL_OW 67
// americanDestroyed := true ;
16902: LD_ADDR_EXP 11
16906: PUSH
16907: LD_INT 1
16909: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16910: LD_INT 35
16912: PPUSH
16913: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
16917: LD_ADDR_VAR 0 2
16921: PUSH
16922: LD_EXP 26
16926: PPUSH
16927: LD_INT 21
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 50
16939: PUSH
16940: EMPTY
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PPUSH
16947: CALL_OW 72
16951: PUSH
16952: LD_EXP 34
16956: PPUSH
16957: LD_INT 50
16959: PUSH
16960: EMPTY
16961: LIST
16962: PPUSH
16963: CALL_OW 72
16967: UNION
16968: ST_TO_ADDR
// for i in tmp do
16969: LD_ADDR_VAR 0 1
16973: PUSH
16974: LD_VAR 0 2
16978: PUSH
16979: FOR_IN
16980: IFFALSE 17041
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
16982: LD_VAR 0 1
16986: PPUSH
16987: LD_INT 63
16989: PPUSH
16990: LD_INT 124
16992: PPUSH
16993: CALL_OW 307
16997: PUSH
16998: LD_VAR 0 1
17002: PPUSH
17003: LD_INT 25
17005: PPUSH
17006: CALL_OW 308
17010: OR
17011: IFFALSE 17024
// RemoveUnit ( i ) else
17013: LD_VAR 0 1
17017: PPUSH
17018: CALL_OW 64
17022: GO 17039
// ComMoveXY ( i , 63 , 124 ) ;
17024: LD_VAR 0 1
17028: PPUSH
17029: LD_INT 63
17031: PPUSH
17032: LD_INT 124
17034: PPUSH
17035: CALL_OW 111
// end ;
17039: GO 16979
17041: POP
17042: POP
// until not tmp ;
17043: LD_VAR 0 2
17047: NOT
17048: IFFALSE 16910
// end ;
17050: PPOPN 2
17052: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17053: LD_EXP 19
17057: PUSH
17058: LD_EXP 11
17062: AND
17063: PUSH
17064: LD_EXP 22
17068: PPUSH
17069: CALL_OW 302
17073: AND
17074: PUSH
17075: LD_EXP 23
17079: PPUSH
17080: CALL_OW 302
17084: AND
17085: IFFALSE 17575
17087: GO 17089
17089: DISABLE
17090: LD_INT 0
17092: PPUSH
17093: PPUSH
17094: PPUSH
// begin DialogueOn ;
17095: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17099: LD_EXP 22
17103: PPUSH
17104: LD_STRING DH-Victory-1
17106: PPUSH
17107: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17111: LD_EXP 23
17115: PPUSH
17116: LD_STRING DOm-Victory-2
17118: PPUSH
17119: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17123: LD_EXP 23
17127: PPUSH
17128: LD_STRING DOm-Victory-3
17130: PPUSH
17131: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17135: LD_EXP 22
17139: PPUSH
17140: LD_STRING DH-Victory-4
17142: PPUSH
17143: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17147: LD_EXP 23
17151: PPUSH
17152: LD_STRING DOm-Victory-5
17154: PPUSH
17155: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17159: LD_EXP 23
17163: PPUSH
17164: LD_STRING DOm-Victory-6
17166: PPUSH
17167: CALL_OW 88
// DialogueOff ;
17171: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17175: LD_STRING O4
17177: PPUSH
17178: CALL_OW 337
// canFinish := true ;
17182: LD_ADDR_EXP 18
17186: PUSH
17187: LD_INT 1
17189: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17190: LD_INT 24
17192: PPUSH
17193: LD_INT 1
17195: PPUSH
17196: CALL_OW 424
// if not legionDestroyed then
17200: LD_EXP 12
17204: NOT
17205: IFFALSE 17575
// begin uc_nation := nation_arabian ;
17207: LD_ADDR_OWVAR 21
17211: PUSH
17212: LD_INT 2
17214: ST_TO_ADDR
// uc_side := 8 ;
17215: LD_ADDR_OWVAR 20
17219: PUSH
17220: LD_INT 8
17222: ST_TO_ADDR
// for i := 1 to 4 do
17223: LD_ADDR_VAR 0 1
17227: PUSH
17228: DOUBLE
17229: LD_INT 1
17231: DEC
17232: ST_TO_ADDR
17233: LD_INT 4
17235: PUSH
17236: FOR_TO
17237: IFFALSE 17318
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17239: LD_INT 0
17241: PPUSH
17242: LD_INT 8
17244: PUSH
17245: LD_INT 9
17247: PUSH
17248: LD_INT 10
17250: PUSH
17251: LD_INT 10
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: PUSH
17260: LD_OWVAR 67
17264: ARRAY
17265: PPUSH
17266: CALL_OW 381
// un := CreateHuman ;
17270: LD_ADDR_VAR 0 2
17274: PUSH
17275: CALL_OW 44
17279: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17280: LD_VAR 0 2
17284: PPUSH
17285: LD_INT 3
17287: PPUSH
17288: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17292: LD_VAR 0 2
17296: PPUSH
17297: LD_INT 26
17299: PPUSH
17300: LD_INT 0
17302: PPUSH
17303: CALL_OW 49
// ComCrawl ( un ) ;
17307: LD_VAR 0 2
17311: PPUSH
17312: CALL_OW 137
// end ;
17316: GO 17236
17318: POP
17319: POP
// for i := 1 to 3 do
17320: LD_ADDR_VAR 0 1
17324: PUSH
17325: DOUBLE
17326: LD_INT 1
17328: DEC
17329: ST_TO_ADDR
17330: LD_INT 3
17332: PUSH
17333: FOR_TO
17334: IFFALSE 17418
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17336: LD_INT 0
17338: PPUSH
17339: LD_INT 8
17341: PUSH
17342: LD_INT 9
17344: PUSH
17345: LD_INT 10
17347: PUSH
17348: LD_INT 10
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: PUSH
17357: LD_OWVAR 67
17361: ARRAY
17362: PPUSH
17363: CALL_OW 381
// un := CreateHuman ;
17367: LD_ADDR_VAR 0 2
17371: PUSH
17372: CALL_OW 44
17376: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17377: LD_VAR 0 2
17381: PPUSH
17382: LD_INT 8
17384: PPUSH
17385: CALL_OW 336
// SetDir ( un , 3 ) ;
17389: LD_VAR 0 2
17393: PPUSH
17394: LD_INT 3
17396: PPUSH
17397: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17401: LD_VAR 0 2
17405: PPUSH
17406: LD_INT 26
17408: PPUSH
17409: LD_INT 0
17411: PPUSH
17412: CALL_OW 49
// end ;
17416: GO 17333
17418: POP
17419: POP
// for i := 1 to 2 do
17420: LD_ADDR_VAR 0 1
17424: PUSH
17425: DOUBLE
17426: LD_INT 1
17428: DEC
17429: ST_TO_ADDR
17430: LD_INT 2
17432: PUSH
17433: FOR_TO
17434: IFFALSE 17573
// begin uc_side := 8 ;
17436: LD_ADDR_OWVAR 20
17440: PUSH
17441: LD_INT 8
17443: ST_TO_ADDR
// uc_nation := nation_american ;
17444: LD_ADDR_OWVAR 21
17448: PUSH
17449: LD_INT 1
17451: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17452: LD_INT 4
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: LD_INT 1
17460: PPUSH
17461: LD_INT 9
17463: PPUSH
17464: LD_INT 90
17466: PPUSH
17467: CALL 25094 0 5
// veh := CreateVehicle ;
17471: LD_ADDR_VAR 0 3
17475: PUSH
17476: CALL_OW 45
17480: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17481: LD_VAR 0 3
17485: PPUSH
17486: LD_INT 3
17488: PPUSH
17489: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17493: LD_VAR 0 3
17497: PPUSH
17498: LD_INT 27
17500: PPUSH
17501: LD_INT 0
17503: PPUSH
17504: CALL_OW 49
// uc_nation := nation_arabian ;
17508: LD_ADDR_OWVAR 21
17512: PUSH
17513: LD_INT 2
17515: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17516: LD_INT 0
17518: PPUSH
17519: LD_INT 8
17521: PUSH
17522: LD_INT 9
17524: PUSH
17525: LD_INT 10
17527: PUSH
17528: LD_INT 10
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: PUSH
17537: LD_OWVAR 67
17541: ARRAY
17542: PPUSH
17543: CALL_OW 383
// un := CreateHuman ;
17547: LD_ADDR_VAR 0 2
17551: PUSH
17552: CALL_OW 44
17556: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17557: LD_VAR 0 2
17561: PPUSH
17562: LD_VAR 0 3
17566: PPUSH
17567: CALL_OW 52
// end ;
17571: GO 17433
17573: POP
17574: POP
// end ; end ;
17575: PPOPN 3
17577: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17578: LD_EXP 19
17582: PUSH
17583: LD_EXP 18
17587: AND
17588: PUSH
17589: LD_EXP 23
17593: PUSH
17594: EMPTY
17595: LIST
17596: PPUSH
17597: LD_INT 24
17599: PPUSH
17600: CALL 11426 0 2
17604: AND
17605: PUSH
17606: LD_EXP 22
17610: PUSH
17611: EMPTY
17612: LIST
17613: PPUSH
17614: LD_INT 24
17616: PPUSH
17617: CALL 11426 0 2
17621: AND
17622: IFFALSE 17801
17624: GO 17626
17626: DISABLE
// begin if tick <= 50 50$00 then
17627: LD_OWVAR 1
17631: PUSH
17632: LD_INT 105000
17634: LESSEQUAL
17635: IFFALSE 17644
// SetAchievement ( ACH_HSPEED_10 ) ;
17637: LD_STRING ACH_HSPEED_10
17639: PPUSH
17640: CALL_OW 543
// if legionDestroyed then
17644: LD_EXP 12
17648: IFFALSE 17662
// AddMedal ( med1 , 1 ) else
17650: LD_STRING med1
17652: PPUSH
17653: LD_INT 1
17655: PPUSH
17656: CALL_OW 101
17660: GO 17673
// AddMedal ( med1 , - 1 ) ;
17662: LD_STRING med1
17664: PPUSH
17665: LD_INT 1
17667: NEG
17668: PPUSH
17669: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
17673: LD_OWVAR 1
17677: PUSH
17678: LD_INT 189000
17680: PUSH
17681: LD_INT 168000
17683: PUSH
17684: LD_INT 147000
17686: PUSH
17687: LD_INT 126000
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: PUSH
17696: LD_OWVAR 67
17700: ARRAY
17701: LESSEQUAL
17702: IFFALSE 17716
// AddMedal ( med2 , 1 ) else
17704: LD_STRING med2
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 101
17714: GO 17727
// AddMedal ( med2 , - 1 ) ;
17716: LD_STRING med2
17718: PPUSH
17719: LD_INT 1
17721: NEG
17722: PPUSH
17723: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasApes + hasDrugs >= 3 then
17727: LD_EXP 16
17731: PUSH
17732: LD_EXP 14
17736: PLUS
17737: PUSH
17738: LD_EXP 15
17742: PLUS
17743: PUSH
17744: LD_EXP 13
17748: PLUS
17749: PUSH
17750: LD_EXP 16
17754: PLUS
17755: PUSH
17756: LD_EXP 17
17760: PLUS
17761: PUSH
17762: LD_INT 3
17764: GREATEREQUAL
17765: IFFALSE 17779
// AddMedal ( med3 , 1 ) else
17767: LD_STRING med3
17769: PPUSH
17770: LD_INT 1
17772: PPUSH
17773: CALL_OW 101
17777: GO 17790
// AddMedal ( med3 , - 1 ) ;
17779: LD_STRING med3
17781: PPUSH
17782: LD_INT 1
17784: NEG
17785: PPUSH
17786: CALL_OW 101
// GiveMedals ( MAIN ) ;
17790: LD_STRING MAIN
17792: PPUSH
17793: CALL_OW 102
// YouWin ;
17797: CALL_OW 103
// end ; end_of_file
17801: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
17802: LD_VAR 0 1
17806: PPUSH
17807: CALL 78202 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
17811: LD_EXP 5
17815: PUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 255
17825: PUSH
17826: LD_INT 2
17828: EQUAL
17829: AND
17830: PUSH
17831: LD_VAR 0 1
17835: PPUSH
17836: CALL_OW 263
17840: PUSH
17841: LD_INT 5
17843: EQUAL
17844: PUSH
17845: LD_VAR 0 1
17849: PPUSH
17850: CALL_OW 257
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 15
17860: PUSH
17861: LD_INT 16
17863: PUSH
17864: LD_INT 17
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: IN
17873: OR
17874: AND
17875: IFFALSE 17945
// begin apeAmount := Dec ( apeAmount ) ;
17877: LD_ADDR_EXP 5
17881: PUSH
17882: LD_EXP 5
17886: PPUSH
17887: CALL 59339 0 1
17891: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
17892: LD_INT 35
17894: PPUSH
17895: LD_INT 2100
17897: PPUSH
17898: CALL_OW 12
17902: PPUSH
17903: CALL_OW 67
// uc_side := 0 ;
17907: LD_ADDR_OWVAR 20
17911: PUSH
17912: LD_INT 0
17914: ST_TO_ADDR
// uc_nation := nation_nature ;
17915: LD_ADDR_OWVAR 21
17919: PUSH
17920: LD_INT 0
17922: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
17923: LD_INT 0
17925: PPUSH
17926: CALL 54224 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
17930: CALL_OW 44
17934: PPUSH
17935: LD_INT 6
17937: PPUSH
17938: LD_INT 0
17940: PPUSH
17941: CALL_OW 49
// end ; if unit = Heike then
17945: LD_VAR 0 1
17949: PUSH
17950: LD_EXP 22
17954: EQUAL
17955: IFFALSE 17964
// YouLost ( Heike ) ;
17957: LD_STRING Heike
17959: PPUSH
17960: CALL_OW 104
// if unit = Omar then
17964: LD_VAR 0 1
17968: PUSH
17969: LD_EXP 23
17973: EQUAL
17974: IFFALSE 17983
// YouLost ( Omar ) ;
17976: LD_STRING Omar
17978: PPUSH
17979: CALL_OW 104
// if unit in amForces then
17983: LD_VAR 0 1
17987: PUSH
17988: LD_EXP 26
17992: IN
17993: IFFALSE 18011
// amForces := amForces diff unit ;
17995: LD_ADDR_EXP 26
17999: PUSH
18000: LD_EXP 26
18004: PUSH
18005: LD_VAR 0 1
18009: DIFF
18010: ST_TO_ADDR
// if unit in amTanks then
18011: LD_VAR 0 1
18015: PUSH
18016: LD_EXP 31
18020: IN
18021: IFFALSE 18039
// amTanks := amTanks diff unit ;
18023: LD_ADDR_EXP 31
18027: PUSH
18028: LD_EXP 31
18032: PUSH
18033: LD_VAR 0 1
18037: DIFF
18038: ST_TO_ADDR
// if unit in amPatrol then
18039: LD_VAR 0 1
18043: PUSH
18044: LD_EXP 34
18048: IN
18049: IFFALSE 18067
// amPatrol := amPatrol diff unit ;
18051: LD_ADDR_EXP 34
18055: PUSH
18056: LD_EXP 34
18060: PUSH
18061: LD_VAR 0 1
18065: DIFF
18066: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
18067: LD_VAR 0 1
18071: PPUSH
18072: CALL_OW 266
18076: PUSH
18077: LD_INT 32
18079: PUSH
18080: LD_INT 33
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: IN
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 255
18097: PUSH
18098: LD_INT 1
18100: EQUAL
18101: AND
18102: IFFALSE 18165
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18104: LD_ADDR_EXP 30
18108: PUSH
18109: LD_EXP 30
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 266
18123: PUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 250
18133: PUSH
18134: LD_VAR 0 1
18138: PPUSH
18139: CALL_OW 251
18143: PUSH
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 254
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: PPUSH
18160: CALL 57956 0 2
18164: ST_TO_ADDR
// if unit in legForces then
18165: LD_VAR 0 1
18169: PUSH
18170: LD_EXP 36
18174: IN
18175: IFFALSE 18193
// legForces := legForces diff unit ;
18177: LD_ADDR_EXP 36
18181: PUSH
18182: LD_EXP 36
18186: PUSH
18187: LD_VAR 0 1
18191: DIFF
18192: ST_TO_ADDR
// if unit in legTanks then
18193: LD_VAR 0 1
18197: PUSH
18198: LD_EXP 42
18202: IN
18203: IFFALSE 18221
// legTanks := legTanks diff unit ;
18205: LD_ADDR_EXP 42
18209: PUSH
18210: LD_EXP 42
18214: PUSH
18215: LD_VAR 0 1
18219: DIFF
18220: ST_TO_ADDR
// if unit in legRTanks then
18221: LD_VAR 0 1
18225: PUSH
18226: LD_EXP 43
18230: IN
18231: IFFALSE 18249
// legRTanks := legRTanks diff unit ;
18233: LD_ADDR_EXP 43
18237: PUSH
18238: LD_EXP 43
18242: PUSH
18243: LD_VAR 0 1
18247: DIFF
18248: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
18249: LD_VAR 0 1
18253: PPUSH
18254: CALL_OW 266
18258: PUSH
18259: LD_INT 32
18261: PUSH
18262: LD_INT 33
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: IN
18269: PUSH
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 255
18279: PUSH
18280: LD_INT 8
18282: EQUAL
18283: AND
18284: IFFALSE 18347
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18286: LD_ADDR_EXP 41
18290: PUSH
18291: LD_EXP 41
18295: PPUSH
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 266
18305: PUSH
18306: LD_VAR 0 1
18310: PPUSH
18311: CALL_OW 250
18315: PUSH
18316: LD_VAR 0 1
18320: PPUSH
18321: CALL_OW 251
18325: PUSH
18326: LD_VAR 0 1
18330: PPUSH
18331: CALL_OW 254
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: PPUSH
18342: CALL 57956 0 2
18346: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18347: LD_VAR 0 1
18351: PPUSH
18352: CALL_OW 264
18356: PUSH
18357: LD_INT 13
18359: EQUAL
18360: PUSH
18361: LD_VAR 0 1
18365: PPUSH
18366: CALL_OW 255
18370: PUSH
18371: LD_INT 1
18373: EQUAL
18374: AND
18375: IFFALSE 18410
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18377: LD_ADDR_EXP 28
18381: PUSH
18382: LD_EXP 28
18386: PPUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: LD_INT 2
18395: PUSH
18396: LD_INT 13
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL 57956 0 2
18409: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 264
18419: PUSH
18420: LD_INT 88
18422: EQUAL
18423: PUSH
18424: LD_VAR 0 1
18428: PPUSH
18429: CALL_OW 255
18433: PUSH
18434: LD_INT 8
18436: EQUAL
18437: AND
18438: IFFALSE 18473
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18440: LD_ADDR_EXP 39
18444: PUSH
18445: LD_EXP 39
18449: PPUSH
18450: LD_INT 13
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 88
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: PPUSH
18468: CALL 57956 0 2
18472: ST_TO_ADDR
// if unit = amCargo then
18473: LD_VAR 0 1
18477: PUSH
18478: LD_EXP 33
18482: EQUAL
18483: IFFALSE 18526
// begin amCargo := 0 ;
18485: LD_ADDR_EXP 33
18489: PUSH
18490: LD_INT 0
18492: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
18493: LD_ADDR_EXP 28
18497: PUSH
18498: LD_EXP 28
18502: PPUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: LD_INT 2
18511: PUSH
18512: LD_INT 12
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: PPUSH
18521: CALL 57956 0 2
18525: ST_TO_ADDR
// end ; if unit = legCargo then
18526: LD_VAR 0 1
18530: PUSH
18531: LD_EXP 44
18535: EQUAL
18536: IFFALSE 18579
// begin legCargo := 0 ;
18538: LD_ADDR_EXP 44
18542: PUSH
18543: LD_INT 0
18545: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
18546: LD_ADDR_EXP 39
18550: PUSH
18551: LD_EXP 39
18555: PPUSH
18556: LD_INT 13
18558: PUSH
18559: LD_INT 1
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 32
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: PPUSH
18574: CALL 57956 0 2
18578: ST_TO_ADDR
// end ; end ;
18579: PPOPN 1
18581: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
18582: LD_ADDR_EXP 21
18586: PUSH
18587: LD_EXP 21
18591: PPUSH
18592: CALL 59317 0 1
18596: ST_TO_ADDR
// end ;
18597: PPOPN 2
18599: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
18600: LD_VAR 0 2
18604: PUSH
18605: LD_INT 3
18607: PUSH
18608: LD_INT 22
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 25
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PPUSH
18636: CALL_OW 69
18640: IN
18641: PUSH
18642: LD_VAR 0 1
18646: PPUSH
18647: CALL_OW 266
18651: PUSH
18652: LD_INT 3
18654: EQUAL
18655: AND
18656: PUSH
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 256
18666: PUSH
18667: LD_INT 1000
18669: LESS
18670: AND
18671: IFFALSE 18697
// begin SetTag ( un , 0 ) ;
18673: LD_VAR 0 2
18677: PPUSH
18678: LD_INT 0
18680: PPUSH
18681: CALL_OW 109
// SetLives ( un , 1000 ) ;
18685: LD_VAR 0 2
18689: PPUSH
18690: LD_INT 1000
18692: PPUSH
18693: CALL_OW 234
// end ; end ;
18697: PPOPN 2
18699: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
18700: LD_INT 0
18702: PPUSH
18703: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_VAR 0 2
18713: PPUSH
18714: CALL 78322 0 2
// side := GetSide ( fac ) ;
18718: LD_ADDR_VAR 0 3
18722: PUSH
18723: LD_VAR 0 2
18727: PPUSH
18728: CALL_OW 255
18732: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
18733: LD_ADDR_VAR 0 4
18737: PUSH
18738: LD_VAR 0 1
18742: PPUSH
18743: CALL_OW 264
18747: ST_TO_ADDR
// if side = 1 then
18748: LD_VAR 0 3
18752: PUSH
18753: LD_INT 1
18755: EQUAL
18756: IFFALSE 18865
// begin amConstructList := Delete ( amConstructList , 1 ) ;
18758: LD_ADDR_EXP 28
18762: PUSH
18763: LD_EXP 28
18767: PPUSH
18768: LD_INT 1
18770: PPUSH
18771: CALL_OW 3
18775: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
18776: LD_VAR 0 4
18780: PUSH
18781: LD_INT 12
18783: EQUAL
18784: PUSH
18785: LD_EXP 33
18789: NOT
18790: AND
18791: IFFALSE 18803
// amCargo := veh ;
18793: LD_ADDR_EXP 33
18797: PUSH
18798: LD_VAR 0 1
18802: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
18803: LD_VAR 0 4
18807: PUSH
18808: LD_INT 12
18810: PUSH
18811: LD_INT 13
18813: PUSH
18814: LD_INT 14
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: LIST
18821: IN
18822: IFFALSE 18826
// exit ;
18824: GO 19015
// amTanks := Join ( amTanks , veh ) ;
18826: LD_ADDR_EXP 31
18830: PUSH
18831: LD_EXP 31
18835: PPUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL 57956 0 2
18845: ST_TO_ADDR
// wait ( 0 0$01 ) ;
18846: LD_INT 35
18848: PPUSH
18849: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
18853: LD_VAR 0 1
18857: PPUSH
18858: LD_INT 12
18860: PPUSH
18861: CALL_OW 173
// end ; if side = 8 then
18865: LD_VAR 0 3
18869: PUSH
18870: LD_INT 8
18872: EQUAL
18873: IFFALSE 19015
// begin legConstructList := Delete ( legConstructList , 1 ) ;
18875: LD_ADDR_EXP 39
18879: PUSH
18880: LD_EXP 39
18884: PPUSH
18885: LD_INT 1
18887: PPUSH
18888: CALL_OW 3
18892: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
18893: LD_VAR 0 4
18897: PUSH
18898: LD_INT 32
18900: EQUAL
18901: PUSH
18902: LD_EXP 44
18906: NOT
18907: AND
18908: IFFALSE 18920
// legCargo := veh ;
18910: LD_ADDR_EXP 44
18914: PUSH
18915: LD_VAR 0 1
18919: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
18920: LD_VAR 0 4
18924: PUSH
18925: LD_INT 32
18927: PUSH
18928: LD_INT 88
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: IN
18935: IFFALSE 18939
// exit ;
18937: GO 19015
// if GetControl ( veh ) = control_manual then
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL_OW 263
18948: PUSH
18949: LD_INT 1
18951: EQUAL
18952: IFFALSE 18976
// legTanks := Join ( legTanks , veh ) else
18954: LD_ADDR_EXP 42
18958: PUSH
18959: LD_EXP 42
18963: PPUSH
18964: LD_VAR 0 1
18968: PPUSH
18969: CALL 57956 0 2
18973: ST_TO_ADDR
18974: GO 18996
// legRTanks := Join ( legRTanks , veh ) ;
18976: LD_ADDR_EXP 43
18980: PUSH
18981: LD_EXP 43
18985: PPUSH
18986: LD_VAR 0 1
18990: PPUSH
18991: CALL 57956 0 2
18995: ST_TO_ADDR
// wait ( 0 0$01 ) ;
18996: LD_INT 35
18998: PPUSH
18999: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19003: LD_VAR 0 1
19007: PPUSH
19008: LD_INT 15
19010: PPUSH
19011: CALL_OW 173
// end ; end ;
19015: PPOPN 4
19017: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19018: LD_INT 0
19020: PPUSH
19021: PPUSH
19022: PPUSH
// begin side := GetSide ( driver ) ;
19023: LD_ADDR_VAR 0 7
19027: PUSH
19028: LD_VAR 0 1
19032: PPUSH
19033: CALL_OW 255
19037: ST_TO_ADDR
// if side = 1 and driver in amForces then
19038: LD_VAR 0 7
19042: PUSH
19043: LD_INT 1
19045: EQUAL
19046: PUSH
19047: LD_VAR 0 1
19051: PUSH
19052: LD_EXP 26
19056: IN
19057: AND
19058: IFFALSE 19270
// begin ComMoveToArea ( driver , amBaseArea ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 1
19067: PPUSH
19068: CALL_OW 113
// SetTag ( driver , tMech ) ;
19072: LD_VAR 0 1
19076: PPUSH
19077: LD_INT 7
19079: PPUSH
19080: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19084: LD_ADDR_VAR 0 6
19088: PUSH
19089: LD_INT 1
19091: PPUSH
19092: LD_INT 22
19094: PUSH
19095: LD_VAR 0 7
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 30
19106: PUSH
19107: LD_INT 3
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 50
19116: PUSH
19117: EMPTY
19118: LIST
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 70
19129: ST_TO_ADDR
// if fac then
19130: LD_VAR 0 6
19134: IFFALSE 19156
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19136: LD_VAR 0 1
19140: PPUSH
19141: LD_VAR 0 6
19145: PUSH
19146: LD_INT 1
19148: ARRAY
19149: PPUSH
19150: CALL_OW 180
// exit ;
19154: GO 19490
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19156: LD_ADDR_VAR 0 5
19160: PUSH
19161: LD_INT 1
19163: PPUSH
19164: LD_INT 22
19166: PUSH
19167: LD_VAR 0 7
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: PUSH
19179: LD_INT 30
19181: PUSH
19182: LD_INT 4
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 30
19191: PUSH
19192: LD_INT 5
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 3
19206: PUSH
19207: LD_INT 62
19209: PUSH
19210: EMPTY
19211: LIST
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 50
19219: PUSH
19220: EMPTY
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: PPUSH
19229: CALL_OW 70
19233: ST_TO_ADDR
// if arm then
19234: LD_VAR 0 5
19238: IFFALSE 19270
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19240: LD_VAR 0 1
19244: PPUSH
19245: LD_VAR 0 5
19249: PUSH
19250: LD_INT 1
19252: ARRAY
19253: PPUSH
19254: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19258: LD_VAR 0 1
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: CALL_OW 183
// end ; end ; if side = 8 then
19270: LD_VAR 0 7
19274: PUSH
19275: LD_INT 8
19277: EQUAL
19278: IFFALSE 19490
// begin ComMoveToArea ( driver , legBaseArea ) ;
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_INT 2
19287: PPUSH
19288: CALL_OW 113
// SetTag ( driver , tMech ) ;
19292: LD_VAR 0 1
19296: PPUSH
19297: LD_INT 7
19299: PPUSH
19300: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19304: LD_ADDR_VAR 0 6
19308: PUSH
19309: LD_INT 2
19311: PPUSH
19312: LD_INT 22
19314: PUSH
19315: LD_VAR 0 7
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 30
19326: PUSH
19327: LD_INT 3
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 50
19336: PUSH
19337: EMPTY
19338: LIST
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: PPUSH
19345: CALL_OW 70
19349: ST_TO_ADDR
// if fac then
19350: LD_VAR 0 6
19354: IFFALSE 19376
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19356: LD_VAR 0 1
19360: PPUSH
19361: LD_VAR 0 6
19365: PUSH
19366: LD_INT 1
19368: ARRAY
19369: PPUSH
19370: CALL_OW 180
// exit ;
19374: GO 19490
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_INT 2
19383: PPUSH
19384: LD_INT 22
19386: PUSH
19387: LD_VAR 0 7
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: LD_INT 30
19401: PUSH
19402: LD_INT 4
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 30
19411: PUSH
19412: LD_INT 5
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 3
19426: PUSH
19427: LD_INT 62
19429: PUSH
19430: EMPTY
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 50
19439: PUSH
19440: EMPTY
19441: LIST
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 70
19453: ST_TO_ADDR
// if arm then
19454: LD_VAR 0 5
19458: IFFALSE 19490
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19460: LD_VAR 0 1
19464: PPUSH
19465: LD_VAR 0 5
19469: PUSH
19470: LD_INT 1
19472: ARRAY
19473: PPUSH
19474: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19478: LD_VAR 0 1
19482: PPUSH
19483: LD_INT 1
19485: PPUSH
19486: CALL_OW 183
// end ; end ; end ;
19490: PPOPN 7
19492: END
// on BuildingComplete ( b ) do var side , type ;
19493: LD_INT 0
19495: PPUSH
19496: PPUSH
// begin side := GetSide ( b ) ;
19497: LD_ADDR_VAR 0 2
19501: PUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 255
19511: ST_TO_ADDR
// type := GetBType ( b ) ;
19512: LD_ADDR_VAR 0 3
19516: PUSH
19517: LD_VAR 0 1
19521: PPUSH
19522: CALL_OW 266
19526: ST_TO_ADDR
// if side = 1 then
19527: LD_VAR 0 2
19531: PUSH
19532: LD_INT 1
19534: EQUAL
19535: IFFALSE 19585
// begin amBuildings := Delete ( amBuildings , 1 ) ;
19537: LD_ADDR_EXP 30
19541: PUSH
19542: LD_EXP 30
19546: PPUSH
19547: LD_INT 1
19549: PPUSH
19550: CALL_OW 3
19554: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
19555: LD_VAR 0 3
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: LD_INT 4
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: IN
19574: IFFALSE 19585
// ComUpgrade ( b ) ;
19576: LD_VAR 0 1
19580: PPUSH
19581: CALL_OW 146
// end ; end ;
19585: PPOPN 3
19587: END
// on ResearchComplete ( tech , lab ) do var side ;
19588: LD_INT 0
19590: PPUSH
// begin side := GetSide ( lab ) ;
19591: LD_ADDR_VAR 0 3
19595: PUSH
19596: LD_VAR 0 2
19600: PPUSH
19601: CALL_OW 255
19605: ST_TO_ADDR
// if side = 1 then
19606: LD_VAR 0 3
19610: PUSH
19611: LD_INT 1
19613: EQUAL
19614: IFFALSE 19632
// amTech := amTech diff tech ;
19616: LD_ADDR_EXP 27
19620: PUSH
19621: LD_EXP 27
19625: PUSH
19626: LD_VAR 0 1
19630: DIFF
19631: ST_TO_ADDR
// end ;
19632: PPOPN 3
19634: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL 78306 0 1
// end ;
19644: PPOPN 1
19646: END
// on SailEvent ( event ) do begin case event of end ;
19647: LD_VAR 0 1
19651: PUSH
19652: POP
// end ;
19653: PPOPN 1
19655: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
19656: LD_EXP 19
19660: NOT
19661: IFFALSE 19665
// exit ;
19663: GO 19763
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
19665: LD_EXP 8
19669: NOT
19670: PUSH
19671: LD_VAR 0 1
19675: PUSH
19676: LD_INT 2
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: IN
19686: AND
19687: PUSH
19688: LD_VAR 0 2
19692: PUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: IN
19703: AND
19704: IFFALSE 19714
// spotByAmerican := true ;
19706: LD_ADDR_EXP 8
19710: PUSH
19711: LD_INT 1
19713: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
19714: LD_EXP 9
19718: NOT
19719: PUSH
19720: LD_VAR 0 1
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: LD_INT 8
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: IN
19735: AND
19736: PUSH
19737: LD_VAR 0 2
19741: PUSH
19742: LD_INT 8
19744: PUSH
19745: LD_INT 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: IN
19752: AND
19753: IFFALSE 19763
// spotByLegion := true ;
19755: LD_ADDR_EXP 9
19759: PUSH
19760: LD_INT 1
19762: ST_TO_ADDR
// end ; end_of_file
19763: PPOPN 2
19765: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
19766: LD_EXP 7
19770: IFFALSE 19877
19772: GO 19774
19774: DISABLE
19775: LD_INT 0
19777: PPUSH
19778: PPUSH
// begin enable ;
19779: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
19780: LD_INT 35
19782: PPUSH
19783: LD_INT 385
19785: PPUSH
19786: CALL_OW 12
19790: PPUSH
19791: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
19795: LD_ADDR_VAR 0 2
19799: PUSH
19800: LD_INT 16
19802: PUSH
19803: LD_INT 17
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
19810: LD_ADDR_VAR 0 1
19814: PUSH
19815: LD_VAR 0 2
19819: PUSH
19820: LD_INT 1
19822: PPUSH
19823: LD_VAR 0 2
19827: PPUSH
19828: CALL 22356 0 1
19832: PPUSH
19833: CALL_OW 12
19837: ARRAY
19838: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 435
19848: PUSH
19849: LD_INT 4
19851: LESS
19852: IFFALSE 19877
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
19854: LD_INT 1
19856: PPUSH
19857: LD_INT 5
19859: PPUSH
19860: CALL_OW 12
19864: PPUSH
19865: LD_VAR 0 1
19869: PPUSH
19870: LD_INT 1
19872: PPUSH
19873: CALL_OW 55
// end ;
19877: PPOPN 2
19879: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
19880: LD_OWVAR 1
19884: PUSH
19885: LD_INT 10500
19887: PUSH
19888: LD_INT 8400
19890: PUSH
19891: LD_INT 6300
19893: PUSH
19894: LD_INT 5250
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: PUSH
19903: LD_OWVAR 67
19907: ARRAY
19908: LESS
19909: PUSH
19910: LD_EXP 7
19914: AND
19915: IFFALSE 19948
19917: GO 19919
19919: DISABLE
// begin enable ;
19920: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
19921: LD_INT 1
19923: PPUSH
19924: LD_INT 5
19926: PPUSH
19927: CALL_OW 12
19931: PPUSH
19932: LD_INT 218
19934: PPUSH
19935: LD_INT 92
19937: PPUSH
19938: LD_INT 11
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: CALL_OW 56
// end ;
19948: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
19949: LD_OWVAR 1
19953: PUSH
19954: LD_INT 12600
19956: PUSH
19957: LD_INT 10500
19959: PUSH
19960: LD_INT 8400
19962: PUSH
19963: LD_INT 7350
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: PUSH
19972: LD_OWVAR 67
19976: ARRAY
19977: GREATER
19978: PUSH
19979: LD_EXP 7
19983: AND
19984: IFFALSE 20036
19986: GO 19988
19988: DISABLE
// begin enable ;
19989: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) then
19990: LD_INT 100
19992: PUSH
19993: LD_INT 10
19995: PUSH
19996: LD_OWVAR 67
20000: MUL
20001: MINUS
20002: PPUSH
20003: CALL_OW 13
20007: IFFALSE 20036
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20009: LD_INT 1
20011: PPUSH
20012: LD_INT 5
20014: PPUSH
20015: CALL_OW 12
20019: PPUSH
20020: LD_INT 218
20022: PPUSH
20023: LD_INT 92
20025: PPUSH
20026: LD_INT 11
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: CALL_OW 56
// end ;
20036: END
// every 0 0$55 trigger IsOk ( amBase ) do
20037: LD_INT 2
20039: PPUSH
20040: CALL_OW 302
20044: IFFALSE 20084
20046: GO 20048
20048: DISABLE
// begin enable ;
20049: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20050: LD_INT 13
20052: PPUSH
20053: CALL_OW 435
20057: PUSH
20058: LD_INT 3
20060: LESS
20061: IFFALSE 20084
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20063: LD_INT 1
20065: PPUSH
20066: LD_INT 5
20068: PPUSH
20069: CALL_OW 12
20073: PPUSH
20074: LD_INT 13
20076: PPUSH
20077: LD_INT 1
20079: PPUSH
20080: CALL_OW 55
// end ;
20084: END
// every 1 1$05 trigger IsOk ( legBase ) do
20085: LD_INT 38
20087: PPUSH
20088: CALL_OW 302
20092: IFFALSE 20132
20094: GO 20096
20096: DISABLE
// begin enable ;
20097: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20098: LD_INT 14
20100: PPUSH
20101: CALL_OW 435
20105: PUSH
20106: LD_INT 3
20108: LESS
20109: IFFALSE 20132
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20111: LD_INT 1
20113: PPUSH
20114: LD_INT 5
20116: PPUSH
20117: CALL_OW 12
20121: PPUSH
20122: LD_INT 14
20124: PPUSH
20125: LD_INT 1
20127: PPUSH
20128: CALL_OW 55
// end ; end_of_file
20132: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20133: LD_EXP 19
20137: PUSH
20138: LD_EXP 23
20142: PPUSH
20143: CALL_OW 257
20147: PUSH
20148: LD_INT 11
20150: NONEQUAL
20151: AND
20152: PUSH
20153: LD_EXP 7
20157: AND
20158: PUSH
20159: LD_INT 85
20161: PPUSH
20162: CALL_OW 302
20166: AND
20167: IFFALSE 20187
20169: GO 20171
20171: DISABLE
// begin Query ( QSheik ) ;
20172: LD_STRING QSheik
20174: PPUSH
20175: CALL_OW 97
// omarCanChangeClass := true ;
20179: LD_ADDR_EXP 20
20183: PUSH
20184: LD_INT 1
20186: ST_TO_ADDR
// end ;
20187: END
// every 0 0$2 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20188: LD_EXP 20
20192: PUSH
20193: LD_EXP 23
20197: PPUSH
20198: CALL_OW 257
20202: PUSH
20203: LD_INT 11
20205: NONEQUAL
20206: AND
20207: PUSH
20208: LD_EXP 23
20212: PPUSH
20213: CALL_OW 310
20217: PUSH
20218: LD_INT 85
20220: EQUAL
20221: AND
20222: IFFALSE 20253
20224: GO 20226
20226: DISABLE
// begin enable ;
20227: ENABLE
// if Query ( QChangeClass ) = 1 then
20228: LD_STRING QChangeClass
20230: PPUSH
20231: CALL_OW 97
20235: PUSH
20236: LD_INT 1
20238: EQUAL
20239: IFFALSE 20253
// SetClass ( Omar , class_desert_warior ) ;
20241: LD_EXP 23
20245: PPUSH
20246: LD_INT 11
20248: PPUSH
20249: CALL_OW 336
// end ; end_of_file
20253: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20254: LD_INT 0
20256: PPUSH
20257: PPUSH
// if exist_mode then
20258: LD_VAR 0 2
20262: IFFALSE 20287
// unit := CreateCharacter ( prefix & ident ) else
20264: LD_ADDR_VAR 0 5
20268: PUSH
20269: LD_VAR 0 3
20273: PUSH
20274: LD_VAR 0 1
20278: STR
20279: PPUSH
20280: CALL_OW 34
20284: ST_TO_ADDR
20285: GO 20302
// unit := NewCharacter ( ident ) ;
20287: LD_ADDR_VAR 0 5
20291: PUSH
20292: LD_VAR 0 1
20296: PPUSH
20297: CALL_OW 25
20301: ST_TO_ADDR
// result := unit ;
20302: LD_ADDR_VAR 0 4
20306: PUSH
20307: LD_VAR 0 5
20311: ST_TO_ADDR
// end ;
20312: LD_VAR 0 4
20316: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20317: LD_INT 0
20319: PPUSH
20320: PPUSH
// if not side or not nation then
20321: LD_VAR 0 1
20325: NOT
20326: PUSH
20327: LD_VAR 0 2
20331: NOT
20332: OR
20333: IFFALSE 20337
// exit ;
20335: GO 21105
// case nation of nation_american :
20337: LD_VAR 0 2
20341: PUSH
20342: LD_INT 1
20344: DOUBLE
20345: EQUAL
20346: IFTRUE 20350
20348: GO 20564
20350: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20351: LD_ADDR_VAR 0 4
20355: PUSH
20356: LD_INT 35
20358: PUSH
20359: LD_INT 45
20361: PUSH
20362: LD_INT 46
20364: PUSH
20365: LD_INT 47
20367: PUSH
20368: LD_INT 82
20370: PUSH
20371: LD_INT 83
20373: PUSH
20374: LD_INT 84
20376: PUSH
20377: LD_INT 85
20379: PUSH
20380: LD_INT 86
20382: PUSH
20383: LD_INT 1
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 6
20391: PUSH
20392: LD_INT 15
20394: PUSH
20395: LD_INT 16
20397: PUSH
20398: LD_INT 7
20400: PUSH
20401: LD_INT 12
20403: PUSH
20404: LD_INT 13
20406: PUSH
20407: LD_INT 10
20409: PUSH
20410: LD_INT 14
20412: PUSH
20413: LD_INT 20
20415: PUSH
20416: LD_INT 21
20418: PUSH
20419: LD_INT 22
20421: PUSH
20422: LD_INT 25
20424: PUSH
20425: LD_INT 32
20427: PUSH
20428: LD_INT 27
20430: PUSH
20431: LD_INT 36
20433: PUSH
20434: LD_INT 69
20436: PUSH
20437: LD_INT 39
20439: PUSH
20440: LD_INT 34
20442: PUSH
20443: LD_INT 40
20445: PUSH
20446: LD_INT 48
20448: PUSH
20449: LD_INT 49
20451: PUSH
20452: LD_INT 50
20454: PUSH
20455: LD_INT 51
20457: PUSH
20458: LD_INT 52
20460: PUSH
20461: LD_INT 53
20463: PUSH
20464: LD_INT 54
20466: PUSH
20467: LD_INT 55
20469: PUSH
20470: LD_INT 56
20472: PUSH
20473: LD_INT 57
20475: PUSH
20476: LD_INT 58
20478: PUSH
20479: LD_INT 59
20481: PUSH
20482: LD_INT 60
20484: PUSH
20485: LD_INT 61
20487: PUSH
20488: LD_INT 62
20490: PUSH
20491: LD_INT 80
20493: PUSH
20494: LD_INT 82
20496: PUSH
20497: LD_INT 83
20499: PUSH
20500: LD_INT 84
20502: PUSH
20503: LD_INT 85
20505: PUSH
20506: LD_INT 86
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: ST_TO_ADDR
20562: GO 21029
20564: LD_INT 2
20566: DOUBLE
20567: EQUAL
20568: IFTRUE 20572
20570: GO 20798
20572: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20573: LD_ADDR_VAR 0 4
20577: PUSH
20578: LD_INT 35
20580: PUSH
20581: LD_INT 45
20583: PUSH
20584: LD_INT 46
20586: PUSH
20587: LD_INT 47
20589: PUSH
20590: LD_INT 82
20592: PUSH
20593: LD_INT 83
20595: PUSH
20596: LD_INT 84
20598: PUSH
20599: LD_INT 85
20601: PUSH
20602: LD_INT 87
20604: PUSH
20605: LD_INT 70
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: LD_INT 11
20613: PUSH
20614: LD_INT 3
20616: PUSH
20617: LD_INT 4
20619: PUSH
20620: LD_INT 5
20622: PUSH
20623: LD_INT 6
20625: PUSH
20626: LD_INT 15
20628: PUSH
20629: LD_INT 18
20631: PUSH
20632: LD_INT 7
20634: PUSH
20635: LD_INT 17
20637: PUSH
20638: LD_INT 8
20640: PUSH
20641: LD_INT 20
20643: PUSH
20644: LD_INT 21
20646: PUSH
20647: LD_INT 22
20649: PUSH
20650: LD_INT 72
20652: PUSH
20653: LD_INT 26
20655: PUSH
20656: LD_INT 69
20658: PUSH
20659: LD_INT 39
20661: PUSH
20662: LD_INT 40
20664: PUSH
20665: LD_INT 41
20667: PUSH
20668: LD_INT 42
20670: PUSH
20671: LD_INT 43
20673: PUSH
20674: LD_INT 48
20676: PUSH
20677: LD_INT 49
20679: PUSH
20680: LD_INT 50
20682: PUSH
20683: LD_INT 51
20685: PUSH
20686: LD_INT 52
20688: PUSH
20689: LD_INT 53
20691: PUSH
20692: LD_INT 54
20694: PUSH
20695: LD_INT 55
20697: PUSH
20698: LD_INT 56
20700: PUSH
20701: LD_INT 60
20703: PUSH
20704: LD_INT 61
20706: PUSH
20707: LD_INT 62
20709: PUSH
20710: LD_INT 66
20712: PUSH
20713: LD_INT 67
20715: PUSH
20716: LD_INT 68
20718: PUSH
20719: LD_INT 81
20721: PUSH
20722: LD_INT 82
20724: PUSH
20725: LD_INT 83
20727: PUSH
20728: LD_INT 84
20730: PUSH
20731: LD_INT 85
20733: PUSH
20734: LD_INT 87
20736: PUSH
20737: LD_INT 88
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: ST_TO_ADDR
20796: GO 21029
20798: LD_INT 3
20800: DOUBLE
20801: EQUAL
20802: IFTRUE 20806
20804: GO 21028
20806: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20807: LD_ADDR_VAR 0 4
20811: PUSH
20812: LD_INT 46
20814: PUSH
20815: LD_INT 47
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: LD_INT 2
20823: PUSH
20824: LD_INT 82
20826: PUSH
20827: LD_INT 83
20829: PUSH
20830: LD_INT 84
20832: PUSH
20833: LD_INT 85
20835: PUSH
20836: LD_INT 86
20838: PUSH
20839: LD_INT 11
20841: PUSH
20842: LD_INT 9
20844: PUSH
20845: LD_INT 20
20847: PUSH
20848: LD_INT 19
20850: PUSH
20851: LD_INT 21
20853: PUSH
20854: LD_INT 24
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_INT 25
20862: PUSH
20863: LD_INT 28
20865: PUSH
20866: LD_INT 29
20868: PUSH
20869: LD_INT 30
20871: PUSH
20872: LD_INT 31
20874: PUSH
20875: LD_INT 37
20877: PUSH
20878: LD_INT 38
20880: PUSH
20881: LD_INT 32
20883: PUSH
20884: LD_INT 27
20886: PUSH
20887: LD_INT 33
20889: PUSH
20890: LD_INT 69
20892: PUSH
20893: LD_INT 39
20895: PUSH
20896: LD_INT 34
20898: PUSH
20899: LD_INT 40
20901: PUSH
20902: LD_INT 71
20904: PUSH
20905: LD_INT 23
20907: PUSH
20908: LD_INT 44
20910: PUSH
20911: LD_INT 48
20913: PUSH
20914: LD_INT 49
20916: PUSH
20917: LD_INT 50
20919: PUSH
20920: LD_INT 51
20922: PUSH
20923: LD_INT 52
20925: PUSH
20926: LD_INT 53
20928: PUSH
20929: LD_INT 54
20931: PUSH
20932: LD_INT 55
20934: PUSH
20935: LD_INT 56
20937: PUSH
20938: LD_INT 57
20940: PUSH
20941: LD_INT 58
20943: PUSH
20944: LD_INT 59
20946: PUSH
20947: LD_INT 63
20949: PUSH
20950: LD_INT 64
20952: PUSH
20953: LD_INT 65
20955: PUSH
20956: LD_INT 82
20958: PUSH
20959: LD_INT 83
20961: PUSH
20962: LD_INT 84
20964: PUSH
20965: LD_INT 85
20967: PUSH
20968: LD_INT 86
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: ST_TO_ADDR
21026: GO 21029
21028: POP
// if state > - 1 and state < 3 then
21029: LD_VAR 0 3
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: GREATER
21038: PUSH
21039: LD_VAR 0 3
21043: PUSH
21044: LD_INT 3
21046: LESS
21047: AND
21048: IFFALSE 21105
// for i in result do
21050: LD_ADDR_VAR 0 5
21054: PUSH
21055: LD_VAR 0 4
21059: PUSH
21060: FOR_IN
21061: IFFALSE 21103
// if GetTech ( i , side ) <> state then
21063: LD_VAR 0 5
21067: PPUSH
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 321
21077: PUSH
21078: LD_VAR 0 3
21082: NONEQUAL
21083: IFFALSE 21101
// result := result diff i ;
21085: LD_ADDR_VAR 0 4
21089: PUSH
21090: LD_VAR 0 4
21094: PUSH
21095: LD_VAR 0 5
21099: DIFF
21100: ST_TO_ADDR
21101: GO 21060
21103: POP
21104: POP
// end ;
21105: LD_VAR 0 4
21109: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21110: LD_INT 0
21112: PPUSH
21113: PPUSH
21114: PPUSH
// result := true ;
21115: LD_ADDR_VAR 0 3
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21123: LD_ADDR_VAR 0 5
21127: PUSH
21128: LD_VAR 0 2
21132: PPUSH
21133: CALL_OW 480
21137: ST_TO_ADDR
// if not tmp then
21138: LD_VAR 0 5
21142: NOT
21143: IFFALSE 21147
// exit ;
21145: GO 21196
// for i in tmp do
21147: LD_ADDR_VAR 0 4
21151: PUSH
21152: LD_VAR 0 5
21156: PUSH
21157: FOR_IN
21158: IFFALSE 21194
// if GetTech ( i , side ) <> state_researched then
21160: LD_VAR 0 4
21164: PPUSH
21165: LD_VAR 0 1
21169: PPUSH
21170: CALL_OW 321
21174: PUSH
21175: LD_INT 2
21177: NONEQUAL
21178: IFFALSE 21192
// begin result := false ;
21180: LD_ADDR_VAR 0 3
21184: PUSH
21185: LD_INT 0
21187: ST_TO_ADDR
// exit ;
21188: POP
21189: POP
21190: GO 21196
// end ;
21192: GO 21157
21194: POP
21195: POP
// end ;
21196: LD_VAR 0 3
21200: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21201: LD_INT 0
21203: PPUSH
21204: PPUSH
21205: PPUSH
21206: PPUSH
21207: PPUSH
21208: PPUSH
21209: PPUSH
21210: PPUSH
21211: PPUSH
21212: PPUSH
21213: PPUSH
21214: PPUSH
21215: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21216: LD_VAR 0 1
21220: NOT
21221: PUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 257
21231: PUSH
21232: LD_INT 9
21234: NONEQUAL
21235: OR
21236: IFFALSE 21240
// exit ;
21238: GO 21813
// side := GetSide ( unit ) ;
21240: LD_ADDR_VAR 0 9
21244: PUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: CALL_OW 255
21254: ST_TO_ADDR
// tech_space := tech_spacanom ;
21255: LD_ADDR_VAR 0 12
21259: PUSH
21260: LD_INT 29
21262: ST_TO_ADDR
// tech_time := tech_taurad ;
21263: LD_ADDR_VAR 0 13
21267: PUSH
21268: LD_INT 28
21270: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21271: LD_ADDR_VAR 0 11
21275: PUSH
21276: LD_VAR 0 1
21280: PPUSH
21281: CALL_OW 310
21285: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21286: LD_VAR 0 11
21290: PPUSH
21291: CALL_OW 247
21295: PUSH
21296: LD_INT 2
21298: EQUAL
21299: IFFALSE 21303
// exit ;
21301: GO 21813
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21303: LD_ADDR_VAR 0 8
21307: PUSH
21308: LD_INT 81
21310: PUSH
21311: LD_VAR 0 9
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: LD_INT 21
21325: PUSH
21326: LD_INT 3
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PPUSH
21341: CALL_OW 69
21345: ST_TO_ADDR
// if not tmp then
21346: LD_VAR 0 8
21350: NOT
21351: IFFALSE 21355
// exit ;
21353: GO 21813
// if in_unit then
21355: LD_VAR 0 11
21359: IFFALSE 21383
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21361: LD_ADDR_VAR 0 10
21365: PUSH
21366: LD_VAR 0 8
21370: PPUSH
21371: LD_VAR 0 11
21375: PPUSH
21376: CALL_OW 74
21380: ST_TO_ADDR
21381: GO 21403
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21383: LD_ADDR_VAR 0 10
21387: PUSH
21388: LD_VAR 0 8
21392: PPUSH
21393: LD_VAR 0 1
21397: PPUSH
21398: CALL_OW 74
21402: ST_TO_ADDR
// if not enemy then
21403: LD_VAR 0 10
21407: NOT
21408: IFFALSE 21412
// exit ;
21410: GO 21813
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21412: LD_VAR 0 11
21416: PUSH
21417: LD_VAR 0 11
21421: PPUSH
21422: LD_VAR 0 10
21426: PPUSH
21427: CALL_OW 296
21431: PUSH
21432: LD_INT 13
21434: GREATER
21435: AND
21436: PUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: LD_VAR 0 10
21446: PPUSH
21447: CALL_OW 296
21451: PUSH
21452: LD_INT 12
21454: GREATER
21455: OR
21456: IFFALSE 21460
// exit ;
21458: GO 21813
// missile := [ 1 ] ;
21460: LD_ADDR_VAR 0 14
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: EMPTY
21469: LIST
21470: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21471: LD_VAR 0 9
21475: PPUSH
21476: LD_VAR 0 12
21480: PPUSH
21481: CALL_OW 325
21485: IFFALSE 21514
// missile := Replace ( missile , missile + 1 , 2 ) ;
21487: LD_ADDR_VAR 0 14
21491: PUSH
21492: LD_VAR 0 14
21496: PPUSH
21497: LD_VAR 0 14
21501: PUSH
21502: LD_INT 1
21504: PLUS
21505: PPUSH
21506: LD_INT 2
21508: PPUSH
21509: CALL_OW 1
21513: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21514: LD_VAR 0 9
21518: PPUSH
21519: LD_VAR 0 13
21523: PPUSH
21524: CALL_OW 325
21528: PUSH
21529: LD_VAR 0 10
21533: PPUSH
21534: CALL_OW 255
21538: PPUSH
21539: LD_VAR 0 13
21543: PPUSH
21544: CALL_OW 325
21548: NOT
21549: AND
21550: IFFALSE 21579
// missile := Replace ( missile , missile + 1 , 3 ) ;
21552: LD_ADDR_VAR 0 14
21556: PUSH
21557: LD_VAR 0 14
21561: PPUSH
21562: LD_VAR 0 14
21566: PUSH
21567: LD_INT 1
21569: PLUS
21570: PPUSH
21571: LD_INT 3
21573: PPUSH
21574: CALL_OW 1
21578: ST_TO_ADDR
// if missile < 2 then
21579: LD_VAR 0 14
21583: PUSH
21584: LD_INT 2
21586: LESS
21587: IFFALSE 21591
// exit ;
21589: GO 21813
// x := GetX ( enemy ) ;
21591: LD_ADDR_VAR 0 4
21595: PUSH
21596: LD_VAR 0 10
21600: PPUSH
21601: CALL_OW 250
21605: ST_TO_ADDR
// y := GetY ( enemy ) ;
21606: LD_ADDR_VAR 0 5
21610: PUSH
21611: LD_VAR 0 10
21615: PPUSH
21616: CALL_OW 251
21620: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21621: LD_ADDR_VAR 0 6
21625: PUSH
21626: LD_VAR 0 4
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PPUSH
21635: LD_INT 1
21637: PPUSH
21638: CALL_OW 12
21642: PLUS
21643: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21644: LD_ADDR_VAR 0 7
21648: PUSH
21649: LD_VAR 0 5
21653: PUSH
21654: LD_INT 1
21656: NEG
21657: PPUSH
21658: LD_INT 1
21660: PPUSH
21661: CALL_OW 12
21665: PLUS
21666: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21667: LD_VAR 0 6
21671: PPUSH
21672: LD_VAR 0 7
21676: PPUSH
21677: CALL_OW 488
21681: NOT
21682: IFFALSE 21704
// begin _x := x ;
21684: LD_ADDR_VAR 0 6
21688: PUSH
21689: LD_VAR 0 4
21693: ST_TO_ADDR
// _y := y ;
21694: LD_ADDR_VAR 0 7
21698: PUSH
21699: LD_VAR 0 5
21703: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21704: LD_ADDR_VAR 0 3
21708: PUSH
21709: LD_INT 1
21711: PPUSH
21712: LD_VAR 0 14
21716: PPUSH
21717: CALL_OW 12
21721: ST_TO_ADDR
// case i of 1 :
21722: LD_VAR 0 3
21726: PUSH
21727: LD_INT 1
21729: DOUBLE
21730: EQUAL
21731: IFTRUE 21735
21733: GO 21752
21735: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21736: LD_VAR 0 1
21740: PPUSH
21741: LD_VAR 0 10
21745: PPUSH
21746: CALL_OW 115
21750: GO 21813
21752: LD_INT 2
21754: DOUBLE
21755: EQUAL
21756: IFTRUE 21760
21758: GO 21782
21760: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21761: LD_VAR 0 1
21765: PPUSH
21766: LD_VAR 0 6
21770: PPUSH
21771: LD_VAR 0 7
21775: PPUSH
21776: CALL_OW 153
21780: GO 21813
21782: LD_INT 3
21784: DOUBLE
21785: EQUAL
21786: IFTRUE 21790
21788: GO 21812
21790: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21791: LD_VAR 0 1
21795: PPUSH
21796: LD_VAR 0 6
21800: PPUSH
21801: LD_VAR 0 7
21805: PPUSH
21806: CALL_OW 154
21810: GO 21813
21812: POP
// end ;
21813: LD_VAR 0 2
21817: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21818: LD_INT 0
21820: PPUSH
21821: PPUSH
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
// if not unit or not building then
21826: LD_VAR 0 1
21830: NOT
21831: PUSH
21832: LD_VAR 0 2
21836: NOT
21837: OR
21838: IFFALSE 21842
// exit ;
21840: GO 22000
// x := GetX ( building ) ;
21842: LD_ADDR_VAR 0 5
21846: PUSH
21847: LD_VAR 0 2
21851: PPUSH
21852: CALL_OW 250
21856: ST_TO_ADDR
// y := GetY ( building ) ;
21857: LD_ADDR_VAR 0 6
21861: PUSH
21862: LD_VAR 0 2
21866: PPUSH
21867: CALL_OW 251
21871: ST_TO_ADDR
// for i = 0 to 5 do
21872: LD_ADDR_VAR 0 4
21876: PUSH
21877: DOUBLE
21878: LD_INT 0
21880: DEC
21881: ST_TO_ADDR
21882: LD_INT 5
21884: PUSH
21885: FOR_TO
21886: IFFALSE 21998
// begin _x := ShiftX ( x , i , 3 ) ;
21888: LD_ADDR_VAR 0 7
21892: PUSH
21893: LD_VAR 0 5
21897: PPUSH
21898: LD_VAR 0 4
21902: PPUSH
21903: LD_INT 3
21905: PPUSH
21906: CALL_OW 272
21910: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21911: LD_ADDR_VAR 0 8
21915: PUSH
21916: LD_VAR 0 6
21920: PPUSH
21921: LD_VAR 0 4
21925: PPUSH
21926: LD_INT 3
21928: PPUSH
21929: CALL_OW 273
21933: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21934: LD_VAR 0 7
21938: PPUSH
21939: LD_VAR 0 8
21943: PPUSH
21944: CALL_OW 488
21948: NOT
21949: IFFALSE 21953
// continue ;
21951: GO 21885
// if HexInfo ( _x , _y ) = 0 then
21953: LD_VAR 0 7
21957: PPUSH
21958: LD_VAR 0 8
21962: PPUSH
21963: CALL_OW 428
21967: PUSH
21968: LD_INT 0
21970: EQUAL
21971: IFFALSE 21996
// begin ComMoveXY ( unit , _x , _y ) ;
21973: LD_VAR 0 1
21977: PPUSH
21978: LD_VAR 0 7
21982: PPUSH
21983: LD_VAR 0 8
21987: PPUSH
21988: CALL_OW 111
// exit ;
21992: POP
21993: POP
21994: GO 22000
// end ; end ;
21996: GO 21885
21998: POP
21999: POP
// end ;
22000: LD_VAR 0 3
22004: RET
// export function ScanBase ( side , base_area ) ; begin
22005: LD_INT 0
22007: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22008: LD_ADDR_VAR 0 3
22012: PUSH
22013: LD_VAR 0 2
22017: PPUSH
22018: LD_INT 81
22020: PUSH
22021: LD_VAR 0 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 70
22034: ST_TO_ADDR
// end ;
22035: LD_VAR 0 3
22039: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22040: LD_INT 0
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
// result := false ;
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_INT 0
22053: ST_TO_ADDR
// side := GetSide ( unit ) ;
22054: LD_ADDR_VAR 0 3
22058: PUSH
22059: LD_VAR 0 1
22063: PPUSH
22064: CALL_OW 255
22068: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22069: LD_ADDR_VAR 0 4
22073: PUSH
22074: LD_VAR 0 1
22078: PPUSH
22079: CALL_OW 248
22083: ST_TO_ADDR
// case nat of 1 :
22084: LD_VAR 0 4
22088: PUSH
22089: LD_INT 1
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22108
22097: POP
// tech := tech_lassight ; 2 :
22098: LD_ADDR_VAR 0 5
22102: PUSH
22103: LD_INT 12
22105: ST_TO_ADDR
22106: GO 22147
22108: LD_INT 2
22110: DOUBLE
22111: EQUAL
22112: IFTRUE 22116
22114: GO 22127
22116: POP
// tech := tech_mortar ; 3 :
22117: LD_ADDR_VAR 0 5
22121: PUSH
22122: LD_INT 41
22124: ST_TO_ADDR
22125: GO 22147
22127: LD_INT 3
22129: DOUBLE
22130: EQUAL
22131: IFTRUE 22135
22133: GO 22146
22135: POP
// tech := tech_bazooka ; end ;
22136: LD_ADDR_VAR 0 5
22140: PUSH
22141: LD_INT 44
22143: ST_TO_ADDR
22144: GO 22147
22146: POP
// if Researched ( side , tech ) then
22147: LD_VAR 0 3
22151: PPUSH
22152: LD_VAR 0 5
22156: PPUSH
22157: CALL_OW 325
22161: IFFALSE 22188
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22163: LD_ADDR_VAR 0 2
22167: PUSH
22168: LD_INT 5
22170: PUSH
22171: LD_INT 8
22173: PUSH
22174: LD_INT 9
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: PUSH
22182: LD_VAR 0 4
22186: ARRAY
22187: ST_TO_ADDR
// end ;
22188: LD_VAR 0 2
22192: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22193: LD_INT 0
22195: PPUSH
22196: PPUSH
22197: PPUSH
// if not mines then
22198: LD_VAR 0 2
22202: NOT
22203: IFFALSE 22207
// exit ;
22205: GO 22351
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22207: LD_ADDR_VAR 0 5
22211: PUSH
22212: LD_INT 81
22214: PUSH
22215: LD_VAR 0 1
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 3
22226: PUSH
22227: LD_INT 21
22229: PUSH
22230: LD_INT 3
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PPUSH
22245: CALL_OW 69
22249: ST_TO_ADDR
// for i in mines do
22250: LD_ADDR_VAR 0 4
22254: PUSH
22255: LD_VAR 0 2
22259: PUSH
22260: FOR_IN
22261: IFFALSE 22349
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22263: LD_VAR 0 4
22267: PUSH
22268: LD_INT 1
22270: ARRAY
22271: PPUSH
22272: LD_VAR 0 4
22276: PUSH
22277: LD_INT 2
22279: ARRAY
22280: PPUSH
22281: CALL_OW 458
22285: NOT
22286: IFFALSE 22290
// continue ;
22288: GO 22260
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22290: LD_VAR 0 4
22294: PUSH
22295: LD_INT 1
22297: ARRAY
22298: PPUSH
22299: LD_VAR 0 4
22303: PUSH
22304: LD_INT 2
22306: ARRAY
22307: PPUSH
22308: CALL_OW 428
22312: PUSH
22313: LD_VAR 0 5
22317: IN
22318: IFFALSE 22347
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22320: LD_VAR 0 4
22324: PUSH
22325: LD_INT 1
22327: ARRAY
22328: PPUSH
22329: LD_VAR 0 4
22333: PUSH
22334: LD_INT 2
22336: ARRAY
22337: PPUSH
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 456
// end ;
22347: GO 22260
22349: POP
22350: POP
// end ;
22351: LD_VAR 0 3
22355: RET
// export function Count ( array ) ; begin
22356: LD_INT 0
22358: PPUSH
// result := array + 0 ;
22359: LD_ADDR_VAR 0 2
22363: PUSH
22364: LD_VAR 0 1
22368: PUSH
22369: LD_INT 0
22371: PLUS
22372: ST_TO_ADDR
// end ;
22373: LD_VAR 0 2
22377: RET
// export function IsEmpty ( building ) ; begin
22378: LD_INT 0
22380: PPUSH
// if not building then
22381: LD_VAR 0 1
22385: NOT
22386: IFFALSE 22390
// exit ;
22388: GO 22433
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22390: LD_ADDR_VAR 0 2
22394: PUSH
22395: LD_VAR 0 1
22399: PUSH
22400: LD_INT 22
22402: PUSH
22403: LD_VAR 0 1
22407: PPUSH
22408: CALL_OW 255
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 58
22419: PUSH
22420: EMPTY
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PPUSH
22427: CALL_OW 69
22431: IN
22432: ST_TO_ADDR
// end ;
22433: LD_VAR 0 2
22437: RET
// export function IsNotFull ( building ) ; var places ; begin
22438: LD_INT 0
22440: PPUSH
22441: PPUSH
// if not building then
22442: LD_VAR 0 1
22446: NOT
22447: IFFALSE 22451
// exit ;
22449: GO 22479
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22451: LD_ADDR_VAR 0 2
22455: PUSH
22456: LD_VAR 0 1
22460: PPUSH
22461: LD_INT 3
22463: PUSH
22464: LD_INT 62
22466: PUSH
22467: EMPTY
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 72
22478: ST_TO_ADDR
// end ;
22479: LD_VAR 0 2
22483: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22484: LD_INT 0
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
// tmp := [ ] ;
22490: LD_ADDR_VAR 0 3
22494: PUSH
22495: EMPTY
22496: ST_TO_ADDR
// list := [ ] ;
22497: LD_ADDR_VAR 0 5
22501: PUSH
22502: EMPTY
22503: ST_TO_ADDR
// for i = 16 to 25 do
22504: LD_ADDR_VAR 0 4
22508: PUSH
22509: DOUBLE
22510: LD_INT 16
22512: DEC
22513: ST_TO_ADDR
22514: LD_INT 25
22516: PUSH
22517: FOR_TO
22518: IFFALSE 22591
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22520: LD_ADDR_VAR 0 3
22524: PUSH
22525: LD_VAR 0 3
22529: PUSH
22530: LD_INT 22
22532: PUSH
22533: LD_VAR 0 1
22537: PPUSH
22538: CALL_OW 255
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 91
22549: PUSH
22550: LD_VAR 0 1
22554: PUSH
22555: LD_INT 6
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 30
22565: PUSH
22566: LD_VAR 0 4
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: PPUSH
22583: CALL_OW 69
22587: ADD
22588: ST_TO_ADDR
22589: GO 22517
22591: POP
22592: POP
// for i = 1 to tmp do
22593: LD_ADDR_VAR 0 4
22597: PUSH
22598: DOUBLE
22599: LD_INT 1
22601: DEC
22602: ST_TO_ADDR
22603: LD_VAR 0 3
22607: PUSH
22608: FOR_TO
22609: IFFALSE 22697
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22611: LD_ADDR_VAR 0 5
22615: PUSH
22616: LD_VAR 0 5
22620: PUSH
22621: LD_VAR 0 3
22625: PUSH
22626: LD_VAR 0 4
22630: ARRAY
22631: PPUSH
22632: CALL_OW 266
22636: PUSH
22637: LD_VAR 0 3
22641: PUSH
22642: LD_VAR 0 4
22646: ARRAY
22647: PPUSH
22648: CALL_OW 250
22652: PUSH
22653: LD_VAR 0 3
22657: PUSH
22658: LD_VAR 0 4
22662: ARRAY
22663: PPUSH
22664: CALL_OW 251
22668: PUSH
22669: LD_VAR 0 3
22673: PUSH
22674: LD_VAR 0 4
22678: ARRAY
22679: PPUSH
22680: CALL_OW 254
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: PUSH
22691: EMPTY
22692: LIST
22693: ADD
22694: ST_TO_ADDR
22695: GO 22608
22697: POP
22698: POP
// result := list ;
22699: LD_ADDR_VAR 0 2
22703: PUSH
22704: LD_VAR 0 5
22708: ST_TO_ADDR
// end ;
22709: LD_VAR 0 2
22713: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22714: LD_INT 0
22716: PPUSH
22717: PPUSH
22718: PPUSH
22719: PPUSH
22720: PPUSH
22721: PPUSH
22722: PPUSH
// if not factory then
22723: LD_VAR 0 1
22727: NOT
22728: IFFALSE 22732
// exit ;
22730: GO 23325
// if control = control_apeman then
22732: LD_VAR 0 4
22736: PUSH
22737: LD_INT 5
22739: EQUAL
22740: IFFALSE 22849
// begin tmp := UnitsInside ( factory ) ;
22742: LD_ADDR_VAR 0 8
22746: PUSH
22747: LD_VAR 0 1
22751: PPUSH
22752: CALL_OW 313
22756: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22757: LD_VAR 0 8
22761: PPUSH
22762: LD_INT 25
22764: PUSH
22765: LD_INT 12
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PPUSH
22772: CALL_OW 72
22776: NOT
22777: IFFALSE 22787
// control := control_manual ;
22779: LD_ADDR_VAR 0 4
22783: PUSH
22784: LD_INT 1
22786: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22787: LD_ADDR_VAR 0 8
22791: PUSH
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL 22484 0 1
22801: ST_TO_ADDR
// if tmp then
22802: LD_VAR 0 8
22806: IFFALSE 22849
// begin for i in tmp do
22808: LD_ADDR_VAR 0 7
22812: PUSH
22813: LD_VAR 0 8
22817: PUSH
22818: FOR_IN
22819: IFFALSE 22847
// if i [ 1 ] = b_ext_radio then
22821: LD_VAR 0 7
22825: PUSH
22826: LD_INT 1
22828: ARRAY
22829: PUSH
22830: LD_INT 22
22832: EQUAL
22833: IFFALSE 22845
// begin control := control_remote ;
22835: LD_ADDR_VAR 0 4
22839: PUSH
22840: LD_INT 2
22842: ST_TO_ADDR
// break ;
22843: GO 22847
// end ;
22845: GO 22818
22847: POP
22848: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22849: LD_VAR 0 1
22853: PPUSH
22854: LD_VAR 0 2
22858: PPUSH
22859: LD_VAR 0 3
22863: PPUSH
22864: LD_VAR 0 4
22868: PPUSH
22869: LD_VAR 0 5
22873: PPUSH
22874: CALL_OW 448
22878: IFFALSE 22913
// begin result := [ chassis , engine , control , weapon ] ;
22880: LD_ADDR_VAR 0 6
22884: PUSH
22885: LD_VAR 0 2
22889: PUSH
22890: LD_VAR 0 3
22894: PUSH
22895: LD_VAR 0 4
22899: PUSH
22900: LD_VAR 0 5
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: ST_TO_ADDR
// exit ;
22911: GO 23325
// end ; _chassis := AvailableChassisList ( factory ) ;
22913: LD_ADDR_VAR 0 9
22917: PUSH
22918: LD_VAR 0 1
22922: PPUSH
22923: CALL_OW 475
22927: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22928: LD_ADDR_VAR 0 11
22932: PUSH
22933: LD_VAR 0 1
22937: PPUSH
22938: CALL_OW 476
22942: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22943: LD_ADDR_VAR 0 12
22947: PUSH
22948: LD_VAR 0 1
22952: PPUSH
22953: CALL_OW 477
22957: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22958: LD_ADDR_VAR 0 10
22962: PUSH
22963: LD_VAR 0 1
22967: PPUSH
22968: CALL_OW 478
22972: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22973: LD_VAR 0 9
22977: NOT
22978: PUSH
22979: LD_VAR 0 11
22983: NOT
22984: OR
22985: PUSH
22986: LD_VAR 0 12
22990: NOT
22991: OR
22992: PUSH
22993: LD_VAR 0 10
22997: NOT
22998: OR
22999: IFFALSE 23034
// begin result := [ chassis , engine , control , weapon ] ;
23001: LD_ADDR_VAR 0 6
23005: PUSH
23006: LD_VAR 0 2
23010: PUSH
23011: LD_VAR 0 3
23015: PUSH
23016: LD_VAR 0 4
23020: PUSH
23021: LD_VAR 0 5
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: ST_TO_ADDR
// exit ;
23032: GO 23325
// end ; if not chassis in _chassis then
23034: LD_VAR 0 2
23038: PUSH
23039: LD_VAR 0 9
23043: IN
23044: NOT
23045: IFFALSE 23071
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23047: LD_ADDR_VAR 0 2
23051: PUSH
23052: LD_VAR 0 9
23056: PUSH
23057: LD_INT 1
23059: PPUSH
23060: LD_VAR 0 9
23064: PPUSH
23065: CALL_OW 12
23069: ARRAY
23070: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23071: LD_VAR 0 2
23075: PPUSH
23076: LD_VAR 0 3
23080: PPUSH
23081: CALL 23330 0 2
23085: NOT
23086: IFFALSE 23145
// repeat engine := _engine [ 1 ] ;
23088: LD_ADDR_VAR 0 3
23092: PUSH
23093: LD_VAR 0 11
23097: PUSH
23098: LD_INT 1
23100: ARRAY
23101: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23102: LD_ADDR_VAR 0 11
23106: PUSH
23107: LD_VAR 0 11
23111: PPUSH
23112: LD_INT 1
23114: PPUSH
23115: CALL_OW 3
23119: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23120: LD_VAR 0 2
23124: PPUSH
23125: LD_VAR 0 3
23129: PPUSH
23130: CALL 23330 0 2
23134: PUSH
23135: LD_VAR 0 11
23139: PUSH
23140: EMPTY
23141: EQUAL
23142: OR
23143: IFFALSE 23088
// if not control in _control then
23145: LD_VAR 0 4
23149: PUSH
23150: LD_VAR 0 12
23154: IN
23155: NOT
23156: IFFALSE 23182
// control := _control [ rand ( 1 , _control ) ] ;
23158: LD_ADDR_VAR 0 4
23162: PUSH
23163: LD_VAR 0 12
23167: PUSH
23168: LD_INT 1
23170: PPUSH
23171: LD_VAR 0 12
23175: PPUSH
23176: CALL_OW 12
23180: ARRAY
23181: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23182: LD_VAR 0 2
23186: PPUSH
23187: LD_VAR 0 5
23191: PPUSH
23192: CALL 23550 0 2
23196: NOT
23197: IFFALSE 23256
// repeat weapon := _weapon [ 1 ] ;
23199: LD_ADDR_VAR 0 5
23203: PUSH
23204: LD_VAR 0 10
23208: PUSH
23209: LD_INT 1
23211: ARRAY
23212: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23213: LD_ADDR_VAR 0 10
23217: PUSH
23218: LD_VAR 0 10
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: CALL_OW 3
23230: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23231: LD_VAR 0 2
23235: PPUSH
23236: LD_VAR 0 5
23240: PPUSH
23241: CALL 23550 0 2
23245: PUSH
23246: LD_VAR 0 10
23250: PUSH
23251: EMPTY
23252: EQUAL
23253: OR
23254: IFFALSE 23199
// result := [ ] ;
23256: LD_ADDR_VAR 0 6
23260: PUSH
23261: EMPTY
23262: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23263: LD_VAR 0 1
23267: PPUSH
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_VAR 0 3
23277: PPUSH
23278: LD_VAR 0 4
23282: PPUSH
23283: LD_VAR 0 5
23287: PPUSH
23288: CALL_OW 448
23292: IFFALSE 23325
// result := [ chassis , engine , control , weapon ] ;
23294: LD_ADDR_VAR 0 6
23298: PUSH
23299: LD_VAR 0 2
23303: PUSH
23304: LD_VAR 0 3
23308: PUSH
23309: LD_VAR 0 4
23313: PUSH
23314: LD_VAR 0 5
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: ST_TO_ADDR
// end ;
23325: LD_VAR 0 6
23329: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23330: LD_INT 0
23332: PPUSH
// if not chassis or not engine then
23333: LD_VAR 0 1
23337: NOT
23338: PUSH
23339: LD_VAR 0 2
23343: NOT
23344: OR
23345: IFFALSE 23349
// exit ;
23347: GO 23545
// case engine of engine_solar :
23349: LD_VAR 0 2
23353: PUSH
23354: LD_INT 2
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23400
23362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23363: LD_ADDR_VAR 0 3
23367: PUSH
23368: LD_INT 11
23370: PUSH
23371: LD_INT 12
23373: PUSH
23374: LD_INT 13
23376: PUSH
23377: LD_INT 14
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 3
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: ST_TO_ADDR
23398: GO 23529
23400: LD_INT 1
23402: DOUBLE
23403: EQUAL
23404: IFTRUE 23408
23406: GO 23470
23408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23409: LD_ADDR_VAR 0 3
23413: PUSH
23414: LD_INT 11
23416: PUSH
23417: LD_INT 12
23419: PUSH
23420: LD_INT 13
23422: PUSH
23423: LD_INT 14
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: LD_INT 3
23434: PUSH
23435: LD_INT 4
23437: PUSH
23438: LD_INT 5
23440: PUSH
23441: LD_INT 21
23443: PUSH
23444: LD_INT 23
23446: PUSH
23447: LD_INT 22
23449: PUSH
23450: LD_INT 24
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: ST_TO_ADDR
23468: GO 23529
23470: LD_INT 3
23472: DOUBLE
23473: EQUAL
23474: IFTRUE 23478
23476: GO 23528
23478: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23479: LD_ADDR_VAR 0 3
23483: PUSH
23484: LD_INT 13
23486: PUSH
23487: LD_INT 14
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: LD_INT 3
23495: PUSH
23496: LD_INT 4
23498: PUSH
23499: LD_INT 5
23501: PUSH
23502: LD_INT 21
23504: PUSH
23505: LD_INT 22
23507: PUSH
23508: LD_INT 23
23510: PUSH
23511: LD_INT 24
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: ST_TO_ADDR
23526: GO 23529
23528: POP
// result := ( chassis in result ) ;
23529: LD_ADDR_VAR 0 3
23533: PUSH
23534: LD_VAR 0 1
23538: PUSH
23539: LD_VAR 0 3
23543: IN
23544: ST_TO_ADDR
// end ;
23545: LD_VAR 0 3
23549: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23550: LD_INT 0
23552: PPUSH
// if not chassis or not weapon then
23553: LD_VAR 0 1
23557: NOT
23558: PUSH
23559: LD_VAR 0 2
23563: NOT
23564: OR
23565: IFFALSE 23569
// exit ;
23567: GO 24629
// case weapon of us_machine_gun :
23569: LD_VAR 0 2
23573: PUSH
23574: LD_INT 2
23576: DOUBLE
23577: EQUAL
23578: IFTRUE 23582
23580: GO 23612
23582: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23583: LD_ADDR_VAR 0 3
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: LD_INT 4
23599: PUSH
23600: LD_INT 5
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
23610: GO 24613
23612: LD_INT 3
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23620
23618: GO 23650
23620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23621: LD_ADDR_VAR 0 3
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 2
23631: PUSH
23632: LD_INT 3
23634: PUSH
23635: LD_INT 4
23637: PUSH
23638: LD_INT 5
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: ST_TO_ADDR
23648: GO 24613
23650: LD_INT 11
23652: DOUBLE
23653: EQUAL
23654: IFTRUE 23658
23656: GO 23688
23658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23659: LD_ADDR_VAR 0 3
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: LD_INT 2
23669: PUSH
23670: LD_INT 3
23672: PUSH
23673: LD_INT 4
23675: PUSH
23676: LD_INT 5
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: ST_TO_ADDR
23686: GO 24613
23688: LD_INT 4
23690: DOUBLE
23691: EQUAL
23692: IFTRUE 23696
23694: GO 23722
23696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23697: LD_ADDR_VAR 0 3
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: LD_INT 4
23710: PUSH
23711: LD_INT 5
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: ST_TO_ADDR
23720: GO 24613
23722: LD_INT 5
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23756
23730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23731: LD_ADDR_VAR 0 3
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 3
23741: PUSH
23742: LD_INT 4
23744: PUSH
23745: LD_INT 5
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: ST_TO_ADDR
23754: GO 24613
23756: LD_INT 9
23758: DOUBLE
23759: EQUAL
23760: IFTRUE 23764
23762: GO 23790
23764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23765: LD_ADDR_VAR 0 3
23769: PUSH
23770: LD_INT 2
23772: PUSH
23773: LD_INT 3
23775: PUSH
23776: LD_INT 4
23778: PUSH
23779: LD_INT 5
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: ST_TO_ADDR
23788: GO 24613
23790: LD_INT 7
23792: DOUBLE
23793: EQUAL
23794: IFTRUE 23798
23796: GO 23824
23798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23799: LD_ADDR_VAR 0 3
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: LD_INT 3
23809: PUSH
23810: LD_INT 4
23812: PUSH
23813: LD_INT 5
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
23822: GO 24613
23824: LD_INT 12
23826: DOUBLE
23827: EQUAL
23828: IFTRUE 23832
23830: GO 23858
23832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23833: LD_ADDR_VAR 0 3
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: LD_INT 3
23843: PUSH
23844: LD_INT 4
23846: PUSH
23847: LD_INT 5
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
23856: GO 24613
23858: LD_INT 13
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23866
23864: GO 23892
23866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23867: LD_ADDR_VAR 0 3
23871: PUSH
23872: LD_INT 2
23874: PUSH
23875: LD_INT 3
23877: PUSH
23878: LD_INT 4
23880: PUSH
23881: LD_INT 5
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: ST_TO_ADDR
23890: GO 24613
23892: LD_INT 14
23894: DOUBLE
23895: EQUAL
23896: IFTRUE 23900
23898: GO 23918
23900: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23901: LD_ADDR_VAR 0 3
23905: PUSH
23906: LD_INT 4
23908: PUSH
23909: LD_INT 5
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: ST_TO_ADDR
23916: GO 24613
23918: LD_INT 6
23920: DOUBLE
23921: EQUAL
23922: IFTRUE 23926
23924: GO 23944
23926: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23927: LD_ADDR_VAR 0 3
23931: PUSH
23932: LD_INT 4
23934: PUSH
23935: LD_INT 5
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: ST_TO_ADDR
23942: GO 24613
23944: LD_INT 10
23946: DOUBLE
23947: EQUAL
23948: IFTRUE 23952
23950: GO 23970
23952: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23953: LD_ADDR_VAR 0 3
23957: PUSH
23958: LD_INT 4
23960: PUSH
23961: LD_INT 5
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: ST_TO_ADDR
23968: GO 24613
23970: LD_INT 22
23972: DOUBLE
23973: EQUAL
23974: IFTRUE 23978
23976: GO 24004
23978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23979: LD_ADDR_VAR 0 3
23983: PUSH
23984: LD_INT 11
23986: PUSH
23987: LD_INT 12
23989: PUSH
23990: LD_INT 13
23992: PUSH
23993: LD_INT 14
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: ST_TO_ADDR
24002: GO 24613
24004: LD_INT 23
24006: DOUBLE
24007: EQUAL
24008: IFTRUE 24012
24010: GO 24038
24012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: LD_INT 11
24020: PUSH
24021: LD_INT 12
24023: PUSH
24024: LD_INT 13
24026: PUSH
24027: LD_INT 14
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: ST_TO_ADDR
24036: GO 24613
24038: LD_INT 24
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24046
24044: GO 24072
24046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24047: LD_ADDR_VAR 0 3
24051: PUSH
24052: LD_INT 11
24054: PUSH
24055: LD_INT 12
24057: PUSH
24058: LD_INT 13
24060: PUSH
24061: LD_INT 14
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: ST_TO_ADDR
24070: GO 24613
24072: LD_INT 30
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24080
24078: GO 24106
24080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24081: LD_ADDR_VAR 0 3
24085: PUSH
24086: LD_INT 11
24088: PUSH
24089: LD_INT 12
24091: PUSH
24092: LD_INT 13
24094: PUSH
24095: LD_INT 14
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: ST_TO_ADDR
24104: GO 24613
24106: LD_INT 25
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24132
24114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24115: LD_ADDR_VAR 0 3
24119: PUSH
24120: LD_INT 13
24122: PUSH
24123: LD_INT 14
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: ST_TO_ADDR
24130: GO 24613
24132: LD_INT 27
24134: DOUBLE
24135: EQUAL
24136: IFTRUE 24140
24138: GO 24158
24140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24141: LD_ADDR_VAR 0 3
24145: PUSH
24146: LD_INT 13
24148: PUSH
24149: LD_INT 14
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: ST_TO_ADDR
24156: GO 24613
24158: LD_INT 92
24160: DOUBLE
24161: EQUAL
24162: IFTRUE 24166
24164: GO 24192
24166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24167: LD_ADDR_VAR 0 3
24171: PUSH
24172: LD_INT 11
24174: PUSH
24175: LD_INT 12
24177: PUSH
24178: LD_INT 13
24180: PUSH
24181: LD_INT 14
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: ST_TO_ADDR
24190: GO 24613
24192: LD_INT 28
24194: DOUBLE
24195: EQUAL
24196: IFTRUE 24200
24198: GO 24218
24200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24201: LD_ADDR_VAR 0 3
24205: PUSH
24206: LD_INT 13
24208: PUSH
24209: LD_INT 14
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: ST_TO_ADDR
24216: GO 24613
24218: LD_INT 29
24220: DOUBLE
24221: EQUAL
24222: IFTRUE 24226
24224: GO 24244
24226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24227: LD_ADDR_VAR 0 3
24231: PUSH
24232: LD_INT 13
24234: PUSH
24235: LD_INT 14
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: ST_TO_ADDR
24242: GO 24613
24244: LD_INT 31
24246: DOUBLE
24247: EQUAL
24248: IFTRUE 24252
24250: GO 24270
24252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24253: LD_ADDR_VAR 0 3
24257: PUSH
24258: LD_INT 13
24260: PUSH
24261: LD_INT 14
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: ST_TO_ADDR
24268: GO 24613
24270: LD_INT 26
24272: DOUBLE
24273: EQUAL
24274: IFTRUE 24278
24276: GO 24296
24278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24279: LD_ADDR_VAR 0 3
24283: PUSH
24284: LD_INT 13
24286: PUSH
24287: LD_INT 14
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: ST_TO_ADDR
24294: GO 24613
24296: LD_INT 42
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24330
24304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24305: LD_ADDR_VAR 0 3
24309: PUSH
24310: LD_INT 21
24312: PUSH
24313: LD_INT 22
24315: PUSH
24316: LD_INT 23
24318: PUSH
24319: LD_INT 24
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: ST_TO_ADDR
24328: GO 24613
24330: LD_INT 43
24332: DOUBLE
24333: EQUAL
24334: IFTRUE 24338
24336: GO 24364
24338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_INT 21
24346: PUSH
24347: LD_INT 22
24349: PUSH
24350: LD_INT 23
24352: PUSH
24353: LD_INT 24
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: ST_TO_ADDR
24362: GO 24613
24364: LD_INT 44
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24398
24372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24373: LD_ADDR_VAR 0 3
24377: PUSH
24378: LD_INT 21
24380: PUSH
24381: LD_INT 22
24383: PUSH
24384: LD_INT 23
24386: PUSH
24387: LD_INT 24
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: ST_TO_ADDR
24396: GO 24613
24398: LD_INT 45
24400: DOUBLE
24401: EQUAL
24402: IFTRUE 24406
24404: GO 24432
24406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24407: LD_ADDR_VAR 0 3
24411: PUSH
24412: LD_INT 21
24414: PUSH
24415: LD_INT 22
24417: PUSH
24418: LD_INT 23
24420: PUSH
24421: LD_INT 24
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: ST_TO_ADDR
24430: GO 24613
24432: LD_INT 49
24434: DOUBLE
24435: EQUAL
24436: IFTRUE 24440
24438: GO 24466
24440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24441: LD_ADDR_VAR 0 3
24445: PUSH
24446: LD_INT 21
24448: PUSH
24449: LD_INT 22
24451: PUSH
24452: LD_INT 23
24454: PUSH
24455: LD_INT 24
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: ST_TO_ADDR
24464: GO 24613
24466: LD_INT 51
24468: DOUBLE
24469: EQUAL
24470: IFTRUE 24474
24472: GO 24500
24474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24475: LD_ADDR_VAR 0 3
24479: PUSH
24480: LD_INT 21
24482: PUSH
24483: LD_INT 22
24485: PUSH
24486: LD_INT 23
24488: PUSH
24489: LD_INT 24
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: ST_TO_ADDR
24498: GO 24613
24500: LD_INT 52
24502: DOUBLE
24503: EQUAL
24504: IFTRUE 24508
24506: GO 24534
24508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_INT 21
24516: PUSH
24517: LD_INT 22
24519: PUSH
24520: LD_INT 23
24522: PUSH
24523: LD_INT 24
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: ST_TO_ADDR
24532: GO 24613
24534: LD_INT 53
24536: DOUBLE
24537: EQUAL
24538: IFTRUE 24542
24540: GO 24560
24542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24543: LD_ADDR_VAR 0 3
24547: PUSH
24548: LD_INT 23
24550: PUSH
24551: LD_INT 24
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: ST_TO_ADDR
24558: GO 24613
24560: LD_INT 46
24562: DOUBLE
24563: EQUAL
24564: IFTRUE 24568
24566: GO 24586
24568: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24569: LD_ADDR_VAR 0 3
24573: PUSH
24574: LD_INT 23
24576: PUSH
24577: LD_INT 24
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: ST_TO_ADDR
24584: GO 24613
24586: LD_INT 47
24588: DOUBLE
24589: EQUAL
24590: IFTRUE 24594
24592: GO 24612
24594: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24595: LD_ADDR_VAR 0 3
24599: PUSH
24600: LD_INT 23
24602: PUSH
24603: LD_INT 24
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: ST_TO_ADDR
24610: GO 24613
24612: POP
// result := ( chassis in result ) ;
24613: LD_ADDR_VAR 0 3
24617: PUSH
24618: LD_VAR 0 1
24622: PUSH
24623: LD_VAR 0 3
24627: IN
24628: ST_TO_ADDR
// end ;
24629: LD_VAR 0 3
24633: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24634: LD_INT 0
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
// result := array ;
24643: LD_ADDR_VAR 0 5
24647: PUSH
24648: LD_VAR 0 1
24652: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24653: LD_VAR 0 1
24657: NOT
24658: PUSH
24659: LD_VAR 0 2
24663: NOT
24664: OR
24665: PUSH
24666: LD_VAR 0 3
24670: NOT
24671: OR
24672: PUSH
24673: LD_VAR 0 2
24677: PUSH
24678: LD_VAR 0 1
24682: GREATER
24683: OR
24684: PUSH
24685: LD_VAR 0 3
24689: PUSH
24690: LD_VAR 0 1
24694: GREATER
24695: OR
24696: IFFALSE 24700
// exit ;
24698: GO 24996
// if direction then
24700: LD_VAR 0 4
24704: IFFALSE 24768
// begin d := 1 ;
24706: LD_ADDR_VAR 0 9
24710: PUSH
24711: LD_INT 1
24713: ST_TO_ADDR
// if i_from > i_to then
24714: LD_VAR 0 2
24718: PUSH
24719: LD_VAR 0 3
24723: GREATER
24724: IFFALSE 24750
// length := ( array - i_from ) + i_to else
24726: LD_ADDR_VAR 0 11
24730: PUSH
24731: LD_VAR 0 1
24735: PUSH
24736: LD_VAR 0 2
24740: MINUS
24741: PUSH
24742: LD_VAR 0 3
24746: PLUS
24747: ST_TO_ADDR
24748: GO 24766
// length := i_to - i_from ;
24750: LD_ADDR_VAR 0 11
24754: PUSH
24755: LD_VAR 0 3
24759: PUSH
24760: LD_VAR 0 2
24764: MINUS
24765: ST_TO_ADDR
// end else
24766: GO 24829
// begin d := - 1 ;
24768: LD_ADDR_VAR 0 9
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: ST_TO_ADDR
// if i_from > i_to then
24777: LD_VAR 0 2
24781: PUSH
24782: LD_VAR 0 3
24786: GREATER
24787: IFFALSE 24807
// length := i_from - i_to else
24789: LD_ADDR_VAR 0 11
24793: PUSH
24794: LD_VAR 0 2
24798: PUSH
24799: LD_VAR 0 3
24803: MINUS
24804: ST_TO_ADDR
24805: GO 24829
// length := ( array - i_to ) + i_from ;
24807: LD_ADDR_VAR 0 11
24811: PUSH
24812: LD_VAR 0 1
24816: PUSH
24817: LD_VAR 0 3
24821: MINUS
24822: PUSH
24823: LD_VAR 0 2
24827: PLUS
24828: ST_TO_ADDR
// end ; if not length then
24829: LD_VAR 0 11
24833: NOT
24834: IFFALSE 24838
// exit ;
24836: GO 24996
// tmp := array ;
24838: LD_ADDR_VAR 0 10
24842: PUSH
24843: LD_VAR 0 1
24847: ST_TO_ADDR
// for i = 1 to length do
24848: LD_ADDR_VAR 0 6
24852: PUSH
24853: DOUBLE
24854: LD_INT 1
24856: DEC
24857: ST_TO_ADDR
24858: LD_VAR 0 11
24862: PUSH
24863: FOR_TO
24864: IFFALSE 24984
// begin for j = 1 to array do
24866: LD_ADDR_VAR 0 7
24870: PUSH
24871: DOUBLE
24872: LD_INT 1
24874: DEC
24875: ST_TO_ADDR
24876: LD_VAR 0 1
24880: PUSH
24881: FOR_TO
24882: IFFALSE 24970
// begin k := j + d ;
24884: LD_ADDR_VAR 0 8
24888: PUSH
24889: LD_VAR 0 7
24893: PUSH
24894: LD_VAR 0 9
24898: PLUS
24899: ST_TO_ADDR
// if k > array then
24900: LD_VAR 0 8
24904: PUSH
24905: LD_VAR 0 1
24909: GREATER
24910: IFFALSE 24920
// k := 1 ;
24912: LD_ADDR_VAR 0 8
24916: PUSH
24917: LD_INT 1
24919: ST_TO_ADDR
// if not k then
24920: LD_VAR 0 8
24924: NOT
24925: IFFALSE 24937
// k := array ;
24927: LD_ADDR_VAR 0 8
24931: PUSH
24932: LD_VAR 0 1
24936: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24937: LD_ADDR_VAR 0 10
24941: PUSH
24942: LD_VAR 0 10
24946: PPUSH
24947: LD_VAR 0 8
24951: PPUSH
24952: LD_VAR 0 1
24956: PUSH
24957: LD_VAR 0 7
24961: ARRAY
24962: PPUSH
24963: CALL_OW 1
24967: ST_TO_ADDR
// end ;
24968: GO 24881
24970: POP
24971: POP
// array := tmp ;
24972: LD_ADDR_VAR 0 1
24976: PUSH
24977: LD_VAR 0 10
24981: ST_TO_ADDR
// end ;
24982: GO 24863
24984: POP
24985: POP
// result := array ;
24986: LD_ADDR_VAR 0 5
24990: PUSH
24991: LD_VAR 0 1
24995: ST_TO_ADDR
// end ;
24996: LD_VAR 0 5
25000: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25001: LD_INT 0
25003: PPUSH
25004: PPUSH
// result := 0 ;
25005: LD_ADDR_VAR 0 3
25009: PUSH
25010: LD_INT 0
25012: ST_TO_ADDR
// if not array or not value in array then
25013: LD_VAR 0 1
25017: NOT
25018: PUSH
25019: LD_VAR 0 2
25023: PUSH
25024: LD_VAR 0 1
25028: IN
25029: NOT
25030: OR
25031: IFFALSE 25035
// exit ;
25033: GO 25089
// for i = 1 to array do
25035: LD_ADDR_VAR 0 4
25039: PUSH
25040: DOUBLE
25041: LD_INT 1
25043: DEC
25044: ST_TO_ADDR
25045: LD_VAR 0 1
25049: PUSH
25050: FOR_TO
25051: IFFALSE 25087
// if value = array [ i ] then
25053: LD_VAR 0 2
25057: PUSH
25058: LD_VAR 0 1
25062: PUSH
25063: LD_VAR 0 4
25067: ARRAY
25068: EQUAL
25069: IFFALSE 25085
// begin result := i ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_VAR 0 4
25080: ST_TO_ADDR
// exit ;
25081: POP
25082: POP
25083: GO 25089
// end ;
25085: GO 25050
25087: POP
25088: POP
// end ;
25089: LD_VAR 0 3
25093: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25094: LD_INT 0
25096: PPUSH
// vc_chassis := chassis ;
25097: LD_ADDR_OWVAR 37
25101: PUSH
25102: LD_VAR 0 1
25106: ST_TO_ADDR
// vc_engine := engine ;
25107: LD_ADDR_OWVAR 39
25111: PUSH
25112: LD_VAR 0 2
25116: ST_TO_ADDR
// vc_control := control ;
25117: LD_ADDR_OWVAR 38
25121: PUSH
25122: LD_VAR 0 3
25126: ST_TO_ADDR
// vc_weapon := weapon ;
25127: LD_ADDR_OWVAR 40
25131: PUSH
25132: LD_VAR 0 4
25136: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25137: LD_ADDR_OWVAR 41
25141: PUSH
25142: LD_VAR 0 5
25146: ST_TO_ADDR
// end ;
25147: LD_VAR 0 6
25151: RET
// export function WantPlant ( unit ) ; var task ; begin
25152: LD_INT 0
25154: PPUSH
25155: PPUSH
// result := false ;
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: LD_INT 0
25163: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25164: LD_ADDR_VAR 0 3
25168: PUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 437
25178: ST_TO_ADDR
// if task then
25179: LD_VAR 0 3
25183: IFFALSE 25211
// if task [ 1 ] [ 1 ] = p then
25185: LD_VAR 0 3
25189: PUSH
25190: LD_INT 1
25192: ARRAY
25193: PUSH
25194: LD_INT 1
25196: ARRAY
25197: PUSH
25198: LD_STRING p
25200: EQUAL
25201: IFFALSE 25211
// result := true ;
25203: LD_ADDR_VAR 0 2
25207: PUSH
25208: LD_INT 1
25210: ST_TO_ADDR
// end ;
25211: LD_VAR 0 2
25215: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25216: LD_INT 0
25218: PPUSH
25219: PPUSH
25220: PPUSH
25221: PPUSH
// if pos < 1 then
25222: LD_VAR 0 2
25226: PUSH
25227: LD_INT 1
25229: LESS
25230: IFFALSE 25234
// exit ;
25232: GO 25537
// if pos = 1 then
25234: LD_VAR 0 2
25238: PUSH
25239: LD_INT 1
25241: EQUAL
25242: IFFALSE 25275
// result := Replace ( arr , pos [ 1 ] , value ) else
25244: LD_ADDR_VAR 0 4
25248: PUSH
25249: LD_VAR 0 1
25253: PPUSH
25254: LD_VAR 0 2
25258: PUSH
25259: LD_INT 1
25261: ARRAY
25262: PPUSH
25263: LD_VAR 0 3
25267: PPUSH
25268: CALL_OW 1
25272: ST_TO_ADDR
25273: GO 25537
// begin tmp := arr ;
25275: LD_ADDR_VAR 0 6
25279: PUSH
25280: LD_VAR 0 1
25284: ST_TO_ADDR
// s_arr := [ tmp ] ;
25285: LD_ADDR_VAR 0 7
25289: PUSH
25290: LD_VAR 0 6
25294: PUSH
25295: EMPTY
25296: LIST
25297: ST_TO_ADDR
// for i = 1 to pos - 1 do
25298: LD_ADDR_VAR 0 5
25302: PUSH
25303: DOUBLE
25304: LD_INT 1
25306: DEC
25307: ST_TO_ADDR
25308: LD_VAR 0 2
25312: PUSH
25313: LD_INT 1
25315: MINUS
25316: PUSH
25317: FOR_TO
25318: IFFALSE 25363
// begin tmp := tmp [ pos [ i ] ] ;
25320: LD_ADDR_VAR 0 6
25324: PUSH
25325: LD_VAR 0 6
25329: PUSH
25330: LD_VAR 0 2
25334: PUSH
25335: LD_VAR 0 5
25339: ARRAY
25340: ARRAY
25341: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25342: LD_ADDR_VAR 0 7
25346: PUSH
25347: LD_VAR 0 7
25351: PUSH
25352: LD_VAR 0 6
25356: PUSH
25357: EMPTY
25358: LIST
25359: ADD
25360: ST_TO_ADDR
// end ;
25361: GO 25317
25363: POP
25364: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25365: LD_ADDR_VAR 0 6
25369: PUSH
25370: LD_VAR 0 6
25374: PPUSH
25375: LD_VAR 0 2
25379: PUSH
25380: LD_VAR 0 2
25384: ARRAY
25385: PPUSH
25386: LD_VAR 0 3
25390: PPUSH
25391: CALL_OW 1
25395: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25396: LD_ADDR_VAR 0 7
25400: PUSH
25401: LD_VAR 0 7
25405: PPUSH
25406: LD_VAR 0 7
25410: PPUSH
25411: LD_VAR 0 6
25415: PPUSH
25416: CALL_OW 1
25420: ST_TO_ADDR
// for i = s_arr downto 2 do
25421: LD_ADDR_VAR 0 5
25425: PUSH
25426: DOUBLE
25427: LD_VAR 0 7
25431: INC
25432: ST_TO_ADDR
25433: LD_INT 2
25435: PUSH
25436: FOR_DOWNTO
25437: IFFALSE 25521
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25439: LD_ADDR_VAR 0 6
25443: PUSH
25444: LD_VAR 0 7
25448: PUSH
25449: LD_VAR 0 5
25453: PUSH
25454: LD_INT 1
25456: MINUS
25457: ARRAY
25458: PPUSH
25459: LD_VAR 0 2
25463: PUSH
25464: LD_VAR 0 5
25468: PUSH
25469: LD_INT 1
25471: MINUS
25472: ARRAY
25473: PPUSH
25474: LD_VAR 0 7
25478: PUSH
25479: LD_VAR 0 5
25483: ARRAY
25484: PPUSH
25485: CALL_OW 1
25489: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25490: LD_ADDR_VAR 0 7
25494: PUSH
25495: LD_VAR 0 7
25499: PPUSH
25500: LD_VAR 0 5
25504: PUSH
25505: LD_INT 1
25507: MINUS
25508: PPUSH
25509: LD_VAR 0 6
25513: PPUSH
25514: CALL_OW 1
25518: ST_TO_ADDR
// end ;
25519: GO 25436
25521: POP
25522: POP
// result := s_arr [ 1 ] ;
25523: LD_ADDR_VAR 0 4
25527: PUSH
25528: LD_VAR 0 7
25532: PUSH
25533: LD_INT 1
25535: ARRAY
25536: ST_TO_ADDR
// end ; end ;
25537: LD_VAR 0 4
25541: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25542: LD_INT 0
25544: PPUSH
25545: PPUSH
// if not list then
25546: LD_VAR 0 1
25550: NOT
25551: IFFALSE 25555
// exit ;
25553: GO 25646
// i := list [ pos1 ] ;
25555: LD_ADDR_VAR 0 5
25559: PUSH
25560: LD_VAR 0 1
25564: PUSH
25565: LD_VAR 0 2
25569: ARRAY
25570: ST_TO_ADDR
// if not i then
25571: LD_VAR 0 5
25575: NOT
25576: IFFALSE 25580
// exit ;
25578: GO 25646
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25580: LD_ADDR_VAR 0 1
25584: PUSH
25585: LD_VAR 0 1
25589: PPUSH
25590: LD_VAR 0 2
25594: PPUSH
25595: LD_VAR 0 1
25599: PUSH
25600: LD_VAR 0 3
25604: ARRAY
25605: PPUSH
25606: CALL_OW 1
25610: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25611: LD_ADDR_VAR 0 1
25615: PUSH
25616: LD_VAR 0 1
25620: PPUSH
25621: LD_VAR 0 3
25625: PPUSH
25626: LD_VAR 0 5
25630: PPUSH
25631: CALL_OW 1
25635: ST_TO_ADDR
// result := list ;
25636: LD_ADDR_VAR 0 4
25640: PUSH
25641: LD_VAR 0 1
25645: ST_TO_ADDR
// end ;
25646: LD_VAR 0 4
25650: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25651: LD_INT 0
25653: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25654: LD_ADDR_VAR 0 5
25658: PUSH
25659: LD_VAR 0 1
25663: PPUSH
25664: CALL_OW 250
25668: PPUSH
25669: LD_VAR 0 1
25673: PPUSH
25674: CALL_OW 251
25678: PPUSH
25679: LD_VAR 0 2
25683: PPUSH
25684: LD_VAR 0 3
25688: PPUSH
25689: LD_VAR 0 4
25693: PPUSH
25694: CALL 26072 0 5
25698: ST_TO_ADDR
// end ;
25699: LD_VAR 0 5
25703: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
25704: LD_INT 0
25706: PPUSH
25707: PPUSH
25708: PPUSH
25709: PPUSH
// if not list or not unit then
25710: LD_VAR 0 2
25714: NOT
25715: PUSH
25716: LD_VAR 0 1
25720: NOT
25721: OR
25722: IFFALSE 25726
// exit ;
25724: GO 26067
// result := [ ] ;
25726: LD_ADDR_VAR 0 5
25730: PUSH
25731: EMPTY
25732: ST_TO_ADDR
// for i in list do
25733: LD_ADDR_VAR 0 6
25737: PUSH
25738: LD_VAR 0 2
25742: PUSH
25743: FOR_IN
25744: IFFALSE 25962
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
25746: LD_ADDR_VAR 0 8
25750: PUSH
25751: LD_VAR 0 1
25755: PPUSH
25756: LD_VAR 0 6
25760: PUSH
25761: LD_INT 1
25763: ARRAY
25764: PPUSH
25765: LD_VAR 0 6
25769: PUSH
25770: LD_INT 2
25772: ARRAY
25773: PPUSH
25774: CALL_OW 297
25778: ST_TO_ADDR
// if not Count ( result ) then
25779: LD_VAR 0 5
25783: PPUSH
25784: CALL 22356 0 1
25788: NOT
25789: IFFALSE 25822
// begin result := Join ( result , [ i , tmp ] ) ;
25791: LD_ADDR_VAR 0 5
25795: PUSH
25796: LD_VAR 0 5
25800: PPUSH
25801: LD_VAR 0 6
25805: PUSH
25806: LD_VAR 0 8
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PPUSH
25815: CALL 57956 0 2
25819: ST_TO_ADDR
// continue ;
25820: GO 25743
// end ; if result [ result ] [ 2 ] <= tmp then
25822: LD_VAR 0 5
25826: PUSH
25827: LD_VAR 0 5
25831: ARRAY
25832: PUSH
25833: LD_INT 2
25835: ARRAY
25836: PUSH
25837: LD_VAR 0 8
25841: LESSEQUAL
25842: IFFALSE 25875
// result := Join ( result , [ i , tmp ] ) else
25844: LD_ADDR_VAR 0 5
25848: PUSH
25849: LD_VAR 0 5
25853: PPUSH
25854: LD_VAR 0 6
25858: PUSH
25859: LD_VAR 0 8
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL 57956 0 2
25872: ST_TO_ADDR
25873: GO 25960
// begin for j := 1 to Count ( result ) do
25875: LD_ADDR_VAR 0 7
25879: PUSH
25880: DOUBLE
25881: LD_INT 1
25883: DEC
25884: ST_TO_ADDR
25885: LD_VAR 0 5
25889: PPUSH
25890: CALL 22356 0 1
25894: PUSH
25895: FOR_TO
25896: IFFALSE 25958
// begin if tmp < result [ j ] [ 2 ] then
25898: LD_VAR 0 8
25902: PUSH
25903: LD_VAR 0 5
25907: PUSH
25908: LD_VAR 0 7
25912: ARRAY
25913: PUSH
25914: LD_INT 2
25916: ARRAY
25917: LESS
25918: IFFALSE 25956
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25920: LD_ADDR_VAR 0 5
25924: PUSH
25925: LD_VAR 0 5
25929: PPUSH
25930: LD_VAR 0 7
25934: PPUSH
25935: LD_VAR 0 6
25939: PUSH
25940: LD_VAR 0 8
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 2
25953: ST_TO_ADDR
// break ;
25954: GO 25958
// end ; end ;
25956: GO 25895
25958: POP
25959: POP
// end ; end ;
25960: GO 25743
25962: POP
25963: POP
// if result and not asc then
25964: LD_VAR 0 5
25968: PUSH
25969: LD_VAR 0 3
25973: NOT
25974: AND
25975: IFFALSE 25992
// result := ReverseArray ( result ) ;
25977: LD_ADDR_VAR 0 5
25981: PUSH
25982: LD_VAR 0 5
25986: PPUSH
25987: CALL 53232 0 1
25991: ST_TO_ADDR
// tmp := [ ] ;
25992: LD_ADDR_VAR 0 8
25996: PUSH
25997: EMPTY
25998: ST_TO_ADDR
// if mode then
25999: LD_VAR 0 4
26003: IFFALSE 26067
// begin for i := 1 to result do
26005: LD_ADDR_VAR 0 6
26009: PUSH
26010: DOUBLE
26011: LD_INT 1
26013: DEC
26014: ST_TO_ADDR
26015: LD_VAR 0 5
26019: PUSH
26020: FOR_TO
26021: IFFALSE 26055
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26023: LD_ADDR_VAR 0 8
26027: PUSH
26028: LD_VAR 0 8
26032: PPUSH
26033: LD_VAR 0 5
26037: PUSH
26038: LD_VAR 0 6
26042: ARRAY
26043: PUSH
26044: LD_INT 1
26046: ARRAY
26047: PPUSH
26048: CALL 57956 0 2
26052: ST_TO_ADDR
26053: GO 26020
26055: POP
26056: POP
// result := tmp ;
26057: LD_ADDR_VAR 0 5
26061: PUSH
26062: LD_VAR 0 8
26066: ST_TO_ADDR
// end ; end ;
26067: LD_VAR 0 5
26071: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26072: LD_INT 0
26074: PPUSH
26075: PPUSH
26076: PPUSH
26077: PPUSH
// if not list then
26078: LD_VAR 0 3
26082: NOT
26083: IFFALSE 26087
// exit ;
26085: GO 26475
// result := [ ] ;
26087: LD_ADDR_VAR 0 6
26091: PUSH
26092: EMPTY
26093: ST_TO_ADDR
// for i in list do
26094: LD_ADDR_VAR 0 7
26098: PUSH
26099: LD_VAR 0 3
26103: PUSH
26104: FOR_IN
26105: IFFALSE 26307
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26107: LD_ADDR_VAR 0 9
26111: PUSH
26112: LD_VAR 0 7
26116: PPUSH
26117: LD_VAR 0 1
26121: PPUSH
26122: LD_VAR 0 2
26126: PPUSH
26127: CALL_OW 297
26131: ST_TO_ADDR
// if not result then
26132: LD_VAR 0 6
26136: NOT
26137: IFFALSE 26163
// result := [ [ i , tmp ] ] else
26139: LD_ADDR_VAR 0 6
26143: PUSH
26144: LD_VAR 0 7
26148: PUSH
26149: LD_VAR 0 9
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: EMPTY
26159: LIST
26160: ST_TO_ADDR
26161: GO 26305
// begin if result [ result ] [ 2 ] < tmp then
26163: LD_VAR 0 6
26167: PUSH
26168: LD_VAR 0 6
26172: ARRAY
26173: PUSH
26174: LD_INT 2
26176: ARRAY
26177: PUSH
26178: LD_VAR 0 9
26182: LESS
26183: IFFALSE 26225
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26185: LD_ADDR_VAR 0 6
26189: PUSH
26190: LD_VAR 0 6
26194: PPUSH
26195: LD_VAR 0 6
26199: PUSH
26200: LD_INT 1
26202: PLUS
26203: PPUSH
26204: LD_VAR 0 7
26208: PUSH
26209: LD_VAR 0 9
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PPUSH
26218: CALL_OW 2
26222: ST_TO_ADDR
26223: GO 26305
// for j = 1 to result do
26225: LD_ADDR_VAR 0 8
26229: PUSH
26230: DOUBLE
26231: LD_INT 1
26233: DEC
26234: ST_TO_ADDR
26235: LD_VAR 0 6
26239: PUSH
26240: FOR_TO
26241: IFFALSE 26303
// begin if tmp < result [ j ] [ 2 ] then
26243: LD_VAR 0 9
26247: PUSH
26248: LD_VAR 0 6
26252: PUSH
26253: LD_VAR 0 8
26257: ARRAY
26258: PUSH
26259: LD_INT 2
26261: ARRAY
26262: LESS
26263: IFFALSE 26301
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26265: LD_ADDR_VAR 0 6
26269: PUSH
26270: LD_VAR 0 6
26274: PPUSH
26275: LD_VAR 0 8
26279: PPUSH
26280: LD_VAR 0 7
26284: PUSH
26285: LD_VAR 0 9
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PPUSH
26294: CALL_OW 2
26298: ST_TO_ADDR
// break ;
26299: GO 26303
// end ; end ;
26301: GO 26240
26303: POP
26304: POP
// end ; end ;
26305: GO 26104
26307: POP
26308: POP
// if result and not asc then
26309: LD_VAR 0 6
26313: PUSH
26314: LD_VAR 0 4
26318: NOT
26319: AND
26320: IFFALSE 26395
// begin tmp := result ;
26322: LD_ADDR_VAR 0 9
26326: PUSH
26327: LD_VAR 0 6
26331: ST_TO_ADDR
// for i = tmp downto 1 do
26332: LD_ADDR_VAR 0 7
26336: PUSH
26337: DOUBLE
26338: LD_VAR 0 9
26342: INC
26343: ST_TO_ADDR
26344: LD_INT 1
26346: PUSH
26347: FOR_DOWNTO
26348: IFFALSE 26393
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26350: LD_ADDR_VAR 0 6
26354: PUSH
26355: LD_VAR 0 6
26359: PPUSH
26360: LD_VAR 0 9
26364: PUSH
26365: LD_VAR 0 7
26369: MINUS
26370: PUSH
26371: LD_INT 1
26373: PLUS
26374: PPUSH
26375: LD_VAR 0 9
26379: PUSH
26380: LD_VAR 0 7
26384: ARRAY
26385: PPUSH
26386: CALL_OW 1
26390: ST_TO_ADDR
26391: GO 26347
26393: POP
26394: POP
// end ; tmp := [ ] ;
26395: LD_ADDR_VAR 0 9
26399: PUSH
26400: EMPTY
26401: ST_TO_ADDR
// if mode then
26402: LD_VAR 0 5
26406: IFFALSE 26475
// begin for i = 1 to result do
26408: LD_ADDR_VAR 0 7
26412: PUSH
26413: DOUBLE
26414: LD_INT 1
26416: DEC
26417: ST_TO_ADDR
26418: LD_VAR 0 6
26422: PUSH
26423: FOR_TO
26424: IFFALSE 26463
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26426: LD_ADDR_VAR 0 9
26430: PUSH
26431: LD_VAR 0 9
26435: PPUSH
26436: LD_VAR 0 7
26440: PPUSH
26441: LD_VAR 0 6
26445: PUSH
26446: LD_VAR 0 7
26450: ARRAY
26451: PUSH
26452: LD_INT 1
26454: ARRAY
26455: PPUSH
26456: CALL_OW 1
26460: ST_TO_ADDR
26461: GO 26423
26463: POP
26464: POP
// result := tmp ;
26465: LD_ADDR_VAR 0 6
26469: PUSH
26470: LD_VAR 0 9
26474: ST_TO_ADDR
// end ; end ;
26475: LD_VAR 0 6
26479: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26480: LD_INT 0
26482: PPUSH
26483: PPUSH
26484: PPUSH
26485: PPUSH
26486: PPUSH
26487: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26488: LD_ADDR_VAR 0 5
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: EMPTY
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: ST_TO_ADDR
// if not x or not y then
26510: LD_VAR 0 2
26514: NOT
26515: PUSH
26516: LD_VAR 0 3
26520: NOT
26521: OR
26522: IFFALSE 26526
// exit ;
26524: GO 28176
// if not range then
26526: LD_VAR 0 4
26530: NOT
26531: IFFALSE 26541
// range := 10 ;
26533: LD_ADDR_VAR 0 4
26537: PUSH
26538: LD_INT 10
26540: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26541: LD_ADDR_VAR 0 8
26545: PUSH
26546: LD_INT 81
26548: PUSH
26549: LD_VAR 0 1
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 92
26560: PUSH
26561: LD_VAR 0 2
26565: PUSH
26566: LD_VAR 0 3
26570: PUSH
26571: LD_VAR 0 4
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 3
26584: PUSH
26585: LD_INT 21
26587: PUSH
26588: LD_INT 3
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: PPUSH
26604: CALL_OW 69
26608: ST_TO_ADDR
// if not tmp then
26609: LD_VAR 0 8
26613: NOT
26614: IFFALSE 26618
// exit ;
26616: GO 28176
// for i in tmp do
26618: LD_ADDR_VAR 0 6
26622: PUSH
26623: LD_VAR 0 8
26627: PUSH
26628: FOR_IN
26629: IFFALSE 28151
// begin points := [ 0 , 0 , 0 ] ;
26631: LD_ADDR_VAR 0 9
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// bpoints := 1 ;
26650: LD_ADDR_VAR 0 10
26654: PUSH
26655: LD_INT 1
26657: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26658: LD_VAR 0 6
26662: PPUSH
26663: CALL_OW 247
26667: PUSH
26668: LD_INT 1
26670: DOUBLE
26671: EQUAL
26672: IFTRUE 26676
26674: GO 27254
26676: POP
// begin if GetClass ( i ) = 1 then
26677: LD_VAR 0 6
26681: PPUSH
26682: CALL_OW 257
26686: PUSH
26687: LD_INT 1
26689: EQUAL
26690: IFFALSE 26711
// points := [ 10 , 5 , 3 ] ;
26692: LD_ADDR_VAR 0 9
26696: PUSH
26697: LD_INT 10
26699: PUSH
26700: LD_INT 5
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26711: LD_VAR 0 6
26715: PPUSH
26716: CALL_OW 257
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 3
26726: PUSH
26727: LD_INT 4
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: IN
26735: IFFALSE 26756
// points := [ 3 , 2 , 1 ] ;
26737: LD_ADDR_VAR 0 9
26741: PUSH
26742: LD_INT 3
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26756: LD_VAR 0 6
26760: PPUSH
26761: CALL_OW 257
26765: PUSH
26766: LD_INT 5
26768: EQUAL
26769: IFFALSE 26790
// points := [ 130 , 5 , 2 ] ;
26771: LD_ADDR_VAR 0 9
26775: PUSH
26776: LD_INT 130
26778: PUSH
26779: LD_INT 5
26781: PUSH
26782: LD_INT 2
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26790: LD_VAR 0 6
26794: PPUSH
26795: CALL_OW 257
26799: PUSH
26800: LD_INT 8
26802: EQUAL
26803: IFFALSE 26824
// points := [ 35 , 35 , 30 ] ;
26805: LD_ADDR_VAR 0 9
26809: PUSH
26810: LD_INT 35
26812: PUSH
26813: LD_INT 35
26815: PUSH
26816: LD_INT 30
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26824: LD_VAR 0 6
26828: PPUSH
26829: CALL_OW 257
26833: PUSH
26834: LD_INT 9
26836: EQUAL
26837: IFFALSE 26858
// points := [ 20 , 55 , 40 ] ;
26839: LD_ADDR_VAR 0 9
26843: PUSH
26844: LD_INT 20
26846: PUSH
26847: LD_INT 55
26849: PUSH
26850: LD_INT 40
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26858: LD_VAR 0 6
26862: PPUSH
26863: CALL_OW 257
26867: PUSH
26868: LD_INT 12
26870: PUSH
26871: LD_INT 16
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: IN
26878: IFFALSE 26899
// points := [ 5 , 3 , 2 ] ;
26880: LD_ADDR_VAR 0 9
26884: PUSH
26885: LD_INT 5
26887: PUSH
26888: LD_INT 3
26890: PUSH
26891: LD_INT 2
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: LIST
26898: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26899: LD_VAR 0 6
26903: PPUSH
26904: CALL_OW 257
26908: PUSH
26909: LD_INT 17
26911: EQUAL
26912: IFFALSE 26933
// points := [ 100 , 50 , 75 ] ;
26914: LD_ADDR_VAR 0 9
26918: PUSH
26919: LD_INT 100
26921: PUSH
26922: LD_INT 50
26924: PUSH
26925: LD_INT 75
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26933: LD_VAR 0 6
26937: PPUSH
26938: CALL_OW 257
26942: PUSH
26943: LD_INT 15
26945: EQUAL
26946: IFFALSE 26967
// points := [ 10 , 5 , 3 ] ;
26948: LD_ADDR_VAR 0 9
26952: PUSH
26953: LD_INT 10
26955: PUSH
26956: LD_INT 5
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26967: LD_VAR 0 6
26971: PPUSH
26972: CALL_OW 257
26976: PUSH
26977: LD_INT 14
26979: EQUAL
26980: IFFALSE 27001
// points := [ 10 , 0 , 0 ] ;
26982: LD_ADDR_VAR 0 9
26986: PUSH
26987: LD_INT 10
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: LIST
27000: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27001: LD_VAR 0 6
27005: PPUSH
27006: CALL_OW 257
27010: PUSH
27011: LD_INT 11
27013: EQUAL
27014: IFFALSE 27035
// points := [ 30 , 10 , 5 ] ;
27016: LD_ADDR_VAR 0 9
27020: PUSH
27021: LD_INT 30
27023: PUSH
27024: LD_INT 10
27026: PUSH
27027: LD_INT 5
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27035: LD_VAR 0 1
27039: PPUSH
27040: LD_INT 5
27042: PPUSH
27043: CALL_OW 321
27047: PUSH
27048: LD_INT 2
27050: EQUAL
27051: IFFALSE 27068
// bpoints := bpoints * 1.8 ;
27053: LD_ADDR_VAR 0 10
27057: PUSH
27058: LD_VAR 0 10
27062: PUSH
27063: LD_REAL  1.80000000000000E+0000
27066: MUL
27067: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27068: LD_VAR 0 6
27072: PPUSH
27073: CALL_OW 257
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: LD_INT 3
27086: PUSH
27087: LD_INT 4
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: IN
27096: PUSH
27097: LD_VAR 0 1
27101: PPUSH
27102: LD_INT 51
27104: PPUSH
27105: CALL_OW 321
27109: PUSH
27110: LD_INT 2
27112: EQUAL
27113: AND
27114: IFFALSE 27131
// bpoints := bpoints * 1.2 ;
27116: LD_ADDR_VAR 0 10
27120: PUSH
27121: LD_VAR 0 10
27125: PUSH
27126: LD_REAL  1.20000000000000E+0000
27129: MUL
27130: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27131: LD_VAR 0 6
27135: PPUSH
27136: CALL_OW 257
27140: PUSH
27141: LD_INT 5
27143: PUSH
27144: LD_INT 7
27146: PUSH
27147: LD_INT 9
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: IN
27155: PUSH
27156: LD_VAR 0 1
27160: PPUSH
27161: LD_INT 52
27163: PPUSH
27164: CALL_OW 321
27168: PUSH
27169: LD_INT 2
27171: EQUAL
27172: AND
27173: IFFALSE 27190
// bpoints := bpoints * 1.5 ;
27175: LD_ADDR_VAR 0 10
27179: PUSH
27180: LD_VAR 0 10
27184: PUSH
27185: LD_REAL  1.50000000000000E+0000
27188: MUL
27189: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27190: LD_VAR 0 1
27194: PPUSH
27195: LD_INT 66
27197: PPUSH
27198: CALL_OW 321
27202: PUSH
27203: LD_INT 2
27205: EQUAL
27206: IFFALSE 27223
// bpoints := bpoints * 1.1 ;
27208: LD_ADDR_VAR 0 10
27212: PUSH
27213: LD_VAR 0 10
27217: PUSH
27218: LD_REAL  1.10000000000000E+0000
27221: MUL
27222: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27223: LD_ADDR_VAR 0 10
27227: PUSH
27228: LD_VAR 0 10
27232: PUSH
27233: LD_VAR 0 6
27237: PPUSH
27238: LD_INT 1
27240: PPUSH
27241: CALL_OW 259
27245: PUSH
27246: LD_REAL  1.15000000000000E+0000
27249: MUL
27250: MUL
27251: ST_TO_ADDR
// end ; unit_vehicle :
27252: GO 28080
27254: LD_INT 2
27256: DOUBLE
27257: EQUAL
27258: IFTRUE 27262
27260: GO 28068
27262: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27263: LD_VAR 0 6
27267: PPUSH
27268: CALL_OW 264
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 42
27278: PUSH
27279: LD_INT 24
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: IN
27287: IFFALSE 27308
// points := [ 25 , 5 , 3 ] ;
27289: LD_ADDR_VAR 0 9
27293: PUSH
27294: LD_INT 25
27296: PUSH
27297: LD_INT 5
27299: PUSH
27300: LD_INT 3
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: LIST
27307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27308: LD_VAR 0 6
27312: PPUSH
27313: CALL_OW 264
27317: PUSH
27318: LD_INT 4
27320: PUSH
27321: LD_INT 43
27323: PUSH
27324: LD_INT 25
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: IN
27332: IFFALSE 27353
// points := [ 40 , 15 , 5 ] ;
27334: LD_ADDR_VAR 0 9
27338: PUSH
27339: LD_INT 40
27341: PUSH
27342: LD_INT 15
27344: PUSH
27345: LD_INT 5
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27353: LD_VAR 0 6
27357: PPUSH
27358: CALL_OW 264
27362: PUSH
27363: LD_INT 3
27365: PUSH
27366: LD_INT 23
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: IN
27373: IFFALSE 27394
// points := [ 7 , 25 , 8 ] ;
27375: LD_ADDR_VAR 0 9
27379: PUSH
27380: LD_INT 7
27382: PUSH
27383: LD_INT 25
27385: PUSH
27386: LD_INT 8
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: LIST
27393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27394: LD_VAR 0 6
27398: PPUSH
27399: CALL_OW 264
27403: PUSH
27404: LD_INT 5
27406: PUSH
27407: LD_INT 27
27409: PUSH
27410: LD_INT 44
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: IN
27418: IFFALSE 27439
// points := [ 14 , 50 , 16 ] ;
27420: LD_ADDR_VAR 0 9
27424: PUSH
27425: LD_INT 14
27427: PUSH
27428: LD_INT 50
27430: PUSH
27431: LD_INT 16
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27439: LD_VAR 0 6
27443: PPUSH
27444: CALL_OW 264
27448: PUSH
27449: LD_INT 6
27451: PUSH
27452: LD_INT 46
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: IN
27459: IFFALSE 27480
// points := [ 32 , 120 , 70 ] ;
27461: LD_ADDR_VAR 0 9
27465: PUSH
27466: LD_INT 32
27468: PUSH
27469: LD_INT 120
27471: PUSH
27472: LD_INT 70
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27480: LD_VAR 0 6
27484: PPUSH
27485: CALL_OW 264
27489: PUSH
27490: LD_INT 7
27492: PUSH
27493: LD_INT 28
27495: PUSH
27496: LD_INT 45
27498: PUSH
27499: LD_INT 92
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: IN
27508: IFFALSE 27529
// points := [ 35 , 20 , 45 ] ;
27510: LD_ADDR_VAR 0 9
27514: PUSH
27515: LD_INT 35
27517: PUSH
27518: LD_INT 20
27520: PUSH
27521: LD_INT 45
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27529: LD_VAR 0 6
27533: PPUSH
27534: CALL_OW 264
27538: PUSH
27539: LD_INT 47
27541: PUSH
27542: EMPTY
27543: LIST
27544: IN
27545: IFFALSE 27566
// points := [ 67 , 45 , 75 ] ;
27547: LD_ADDR_VAR 0 9
27551: PUSH
27552: LD_INT 67
27554: PUSH
27555: LD_INT 45
27557: PUSH
27558: LD_INT 75
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27566: LD_VAR 0 6
27570: PPUSH
27571: CALL_OW 264
27575: PUSH
27576: LD_INT 26
27578: PUSH
27579: EMPTY
27580: LIST
27581: IN
27582: IFFALSE 27603
// points := [ 120 , 30 , 80 ] ;
27584: LD_ADDR_VAR 0 9
27588: PUSH
27589: LD_INT 120
27591: PUSH
27592: LD_INT 30
27594: PUSH
27595: LD_INT 80
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27603: LD_VAR 0 6
27607: PPUSH
27608: CALL_OW 264
27612: PUSH
27613: LD_INT 22
27615: PUSH
27616: EMPTY
27617: LIST
27618: IN
27619: IFFALSE 27640
// points := [ 40 , 1 , 1 ] ;
27621: LD_ADDR_VAR 0 9
27625: PUSH
27626: LD_INT 40
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27640: LD_VAR 0 6
27644: PPUSH
27645: CALL_OW 264
27649: PUSH
27650: LD_INT 29
27652: PUSH
27653: EMPTY
27654: LIST
27655: IN
27656: IFFALSE 27677
// points := [ 70 , 200 , 400 ] ;
27658: LD_ADDR_VAR 0 9
27662: PUSH
27663: LD_INT 70
27665: PUSH
27666: LD_INT 200
27668: PUSH
27669: LD_INT 400
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: LIST
27676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27677: LD_VAR 0 6
27681: PPUSH
27682: CALL_OW 264
27686: PUSH
27687: LD_INT 14
27689: PUSH
27690: LD_INT 53
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: IN
27697: IFFALSE 27718
// points := [ 40 , 10 , 20 ] ;
27699: LD_ADDR_VAR 0 9
27703: PUSH
27704: LD_INT 40
27706: PUSH
27707: LD_INT 10
27709: PUSH
27710: LD_INT 20
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27718: LD_VAR 0 6
27722: PPUSH
27723: CALL_OW 264
27727: PUSH
27728: LD_INT 9
27730: PUSH
27731: EMPTY
27732: LIST
27733: IN
27734: IFFALSE 27755
// points := [ 5 , 70 , 20 ] ;
27736: LD_ADDR_VAR 0 9
27740: PUSH
27741: LD_INT 5
27743: PUSH
27744: LD_INT 70
27746: PUSH
27747: LD_INT 20
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27755: LD_VAR 0 6
27759: PPUSH
27760: CALL_OW 264
27764: PUSH
27765: LD_INT 10
27767: PUSH
27768: EMPTY
27769: LIST
27770: IN
27771: IFFALSE 27792
// points := [ 35 , 110 , 70 ] ;
27773: LD_ADDR_VAR 0 9
27777: PUSH
27778: LD_INT 35
27780: PUSH
27781: LD_INT 110
27783: PUSH
27784: LD_INT 70
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27792: LD_VAR 0 6
27796: PPUSH
27797: CALL_OW 265
27801: PUSH
27802: LD_INT 25
27804: EQUAL
27805: IFFALSE 27826
// points := [ 80 , 65 , 100 ] ;
27807: LD_ADDR_VAR 0 9
27811: PUSH
27812: LD_INT 80
27814: PUSH
27815: LD_INT 65
27817: PUSH
27818: LD_INT 100
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27826: LD_VAR 0 6
27830: PPUSH
27831: CALL_OW 263
27835: PUSH
27836: LD_INT 1
27838: EQUAL
27839: IFFALSE 27874
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27841: LD_ADDR_VAR 0 10
27845: PUSH
27846: LD_VAR 0 10
27850: PUSH
27851: LD_VAR 0 6
27855: PPUSH
27856: CALL_OW 311
27860: PPUSH
27861: LD_INT 3
27863: PPUSH
27864: CALL_OW 259
27868: PUSH
27869: LD_INT 4
27871: MUL
27872: MUL
27873: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27874: LD_VAR 0 6
27878: PPUSH
27879: CALL_OW 263
27883: PUSH
27884: LD_INT 2
27886: EQUAL
27887: IFFALSE 27938
// begin j := IsControledBy ( i ) ;
27889: LD_ADDR_VAR 0 7
27893: PUSH
27894: LD_VAR 0 6
27898: PPUSH
27899: CALL_OW 312
27903: ST_TO_ADDR
// if j then
27904: LD_VAR 0 7
27908: IFFALSE 27938
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27910: LD_ADDR_VAR 0 10
27914: PUSH
27915: LD_VAR 0 10
27919: PUSH
27920: LD_VAR 0 7
27924: PPUSH
27925: LD_INT 3
27927: PPUSH
27928: CALL_OW 259
27932: PUSH
27933: LD_INT 3
27935: MUL
27936: MUL
27937: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27938: LD_VAR 0 6
27942: PPUSH
27943: CALL_OW 264
27947: PUSH
27948: LD_INT 5
27950: PUSH
27951: LD_INT 6
27953: PUSH
27954: LD_INT 46
27956: PUSH
27957: LD_INT 44
27959: PUSH
27960: LD_INT 47
27962: PUSH
27963: LD_INT 45
27965: PUSH
27966: LD_INT 28
27968: PUSH
27969: LD_INT 7
27971: PUSH
27972: LD_INT 27
27974: PUSH
27975: LD_INT 29
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: IN
27990: PUSH
27991: LD_VAR 0 1
27995: PPUSH
27996: LD_INT 52
27998: PPUSH
27999: CALL_OW 321
28003: PUSH
28004: LD_INT 2
28006: EQUAL
28007: AND
28008: IFFALSE 28025
// bpoints := bpoints * 1.2 ;
28010: LD_ADDR_VAR 0 10
28014: PUSH
28015: LD_VAR 0 10
28019: PUSH
28020: LD_REAL  1.20000000000000E+0000
28023: MUL
28024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28025: LD_VAR 0 6
28029: PPUSH
28030: CALL_OW 264
28034: PUSH
28035: LD_INT 6
28037: PUSH
28038: LD_INT 46
28040: PUSH
28041: LD_INT 47
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: IN
28049: IFFALSE 28066
// bpoints := bpoints * 1.2 ;
28051: LD_ADDR_VAR 0 10
28055: PUSH
28056: LD_VAR 0 10
28060: PUSH
28061: LD_REAL  1.20000000000000E+0000
28064: MUL
28065: ST_TO_ADDR
// end ; unit_building :
28066: GO 28080
28068: LD_INT 3
28070: DOUBLE
28071: EQUAL
28072: IFTRUE 28076
28074: GO 28079
28076: POP
// ; end ;
28077: GO 28080
28079: POP
// for j = 1 to 3 do
28080: LD_ADDR_VAR 0 7
28084: PUSH
28085: DOUBLE
28086: LD_INT 1
28088: DEC
28089: ST_TO_ADDR
28090: LD_INT 3
28092: PUSH
28093: FOR_TO
28094: IFFALSE 28147
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28096: LD_ADDR_VAR 0 5
28100: PUSH
28101: LD_VAR 0 5
28105: PPUSH
28106: LD_VAR 0 7
28110: PPUSH
28111: LD_VAR 0 5
28115: PUSH
28116: LD_VAR 0 7
28120: ARRAY
28121: PUSH
28122: LD_VAR 0 9
28126: PUSH
28127: LD_VAR 0 7
28131: ARRAY
28132: PUSH
28133: LD_VAR 0 10
28137: MUL
28138: PLUS
28139: PPUSH
28140: CALL_OW 1
28144: ST_TO_ADDR
28145: GO 28093
28147: POP
28148: POP
// end ;
28149: GO 26628
28151: POP
28152: POP
// result := Replace ( result , 4 , tmp ) ;
28153: LD_ADDR_VAR 0 5
28157: PUSH
28158: LD_VAR 0 5
28162: PPUSH
28163: LD_INT 4
28165: PPUSH
28166: LD_VAR 0 8
28170: PPUSH
28171: CALL_OW 1
28175: ST_TO_ADDR
// end ;
28176: LD_VAR 0 5
28180: RET
// export function DangerAtRange ( unit , range ) ; begin
28181: LD_INT 0
28183: PPUSH
// if not unit then
28184: LD_VAR 0 1
28188: NOT
28189: IFFALSE 28193
// exit ;
28191: GO 28238
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_VAR 0 1
28202: PPUSH
28203: CALL_OW 255
28207: PPUSH
28208: LD_VAR 0 1
28212: PPUSH
28213: CALL_OW 250
28217: PPUSH
28218: LD_VAR 0 1
28222: PPUSH
28223: CALL_OW 251
28227: PPUSH
28228: LD_VAR 0 2
28232: PPUSH
28233: CALL 26480 0 4
28237: ST_TO_ADDR
// end ;
28238: LD_VAR 0 3
28242: RET
// export function DangerInArea ( side , area ) ; begin
28243: LD_INT 0
28245: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28246: LD_ADDR_VAR 0 3
28250: PUSH
28251: LD_VAR 0 2
28255: PPUSH
28256: LD_INT 81
28258: PUSH
28259: LD_VAR 0 1
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PPUSH
28268: CALL_OW 70
28272: ST_TO_ADDR
// end ;
28273: LD_VAR 0 3
28277: RET
// export function IsExtension ( b ) ; begin
28278: LD_INT 0
28280: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28281: LD_ADDR_VAR 0 2
28285: PUSH
28286: LD_VAR 0 1
28290: PUSH
28291: LD_INT 23
28293: PUSH
28294: LD_INT 20
28296: PUSH
28297: LD_INT 22
28299: PUSH
28300: LD_INT 17
28302: PUSH
28303: LD_INT 24
28305: PUSH
28306: LD_INT 21
28308: PUSH
28309: LD_INT 19
28311: PUSH
28312: LD_INT 16
28314: PUSH
28315: LD_INT 25
28317: PUSH
28318: LD_INT 18
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: IN
28333: ST_TO_ADDR
// end ;
28334: LD_VAR 0 2
28338: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28339: LD_INT 0
28341: PPUSH
28342: PPUSH
28343: PPUSH
// result := [ ] ;
28344: LD_ADDR_VAR 0 4
28348: PUSH
28349: EMPTY
28350: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28351: LD_ADDR_VAR 0 5
28355: PUSH
28356: LD_VAR 0 2
28360: PPUSH
28361: LD_INT 21
28363: PUSH
28364: LD_INT 3
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PPUSH
28371: CALL_OW 70
28375: ST_TO_ADDR
// if not tmp then
28376: LD_VAR 0 5
28380: NOT
28381: IFFALSE 28385
// exit ;
28383: GO 28449
// if checkLink then
28385: LD_VAR 0 3
28389: IFFALSE 28439
// begin for i in tmp do
28391: LD_ADDR_VAR 0 6
28395: PUSH
28396: LD_VAR 0 5
28400: PUSH
28401: FOR_IN
28402: IFFALSE 28437
// if GetBase ( i ) <> base then
28404: LD_VAR 0 6
28408: PPUSH
28409: CALL_OW 274
28413: PUSH
28414: LD_VAR 0 1
28418: NONEQUAL
28419: IFFALSE 28435
// ComLinkToBase ( base , i ) ;
28421: LD_VAR 0 1
28425: PPUSH
28426: LD_VAR 0 6
28430: PPUSH
28431: CALL_OW 169
28435: GO 28401
28437: POP
28438: POP
// end ; result := tmp ;
28439: LD_ADDR_VAR 0 4
28443: PUSH
28444: LD_VAR 0 5
28448: ST_TO_ADDR
// end ;
28449: LD_VAR 0 4
28453: RET
// export function ComComplete ( units , b ) ; var i ; begin
28454: LD_INT 0
28456: PPUSH
28457: PPUSH
// if not units then
28458: LD_VAR 0 1
28462: NOT
28463: IFFALSE 28467
// exit ;
28465: GO 28557
// for i in units do
28467: LD_ADDR_VAR 0 4
28471: PUSH
28472: LD_VAR 0 1
28476: PUSH
28477: FOR_IN
28478: IFFALSE 28555
// if BuildingStatus ( b ) = bs_build then
28480: LD_VAR 0 2
28484: PPUSH
28485: CALL_OW 461
28489: PUSH
28490: LD_INT 1
28492: EQUAL
28493: IFFALSE 28553
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28495: LD_VAR 0 4
28499: PPUSH
28500: LD_STRING h
28502: PUSH
28503: LD_VAR 0 2
28507: PPUSH
28508: CALL_OW 250
28512: PUSH
28513: LD_VAR 0 2
28517: PPUSH
28518: CALL_OW 251
28522: PUSH
28523: LD_VAR 0 2
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: PPUSH
28549: CALL_OW 446
28553: GO 28477
28555: POP
28556: POP
// end ;
28557: LD_VAR 0 3
28561: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28562: LD_INT 0
28564: PPUSH
28565: PPUSH
28566: PPUSH
28567: PPUSH
28568: PPUSH
28569: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28570: LD_VAR 0 1
28574: NOT
28575: PUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 263
28585: PUSH
28586: LD_INT 2
28588: NONEQUAL
28589: OR
28590: IFFALSE 28594
// exit ;
28592: GO 28910
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28594: LD_ADDR_VAR 0 6
28598: PUSH
28599: LD_INT 22
28601: PUSH
28602: LD_VAR 0 1
28606: PPUSH
28607: CALL_OW 255
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: LD_INT 30
28621: PUSH
28622: LD_INT 36
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 34
28631: PUSH
28632: LD_INT 31
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PPUSH
28648: CALL_OW 69
28652: ST_TO_ADDR
// if not tmp then
28653: LD_VAR 0 6
28657: NOT
28658: IFFALSE 28662
// exit ;
28660: GO 28910
// result := [ ] ;
28662: LD_ADDR_VAR 0 2
28666: PUSH
28667: EMPTY
28668: ST_TO_ADDR
// for i in tmp do
28669: LD_ADDR_VAR 0 3
28673: PUSH
28674: LD_VAR 0 6
28678: PUSH
28679: FOR_IN
28680: IFFALSE 28751
// begin t := UnitsInside ( i ) ;
28682: LD_ADDR_VAR 0 4
28686: PUSH
28687: LD_VAR 0 3
28691: PPUSH
28692: CALL_OW 313
28696: ST_TO_ADDR
// if t then
28697: LD_VAR 0 4
28701: IFFALSE 28749
// for j in t do
28703: LD_ADDR_VAR 0 7
28707: PUSH
28708: LD_VAR 0 4
28712: PUSH
28713: FOR_IN
28714: IFFALSE 28747
// result := Replace ( result , result + 1 , j ) ;
28716: LD_ADDR_VAR 0 2
28720: PUSH
28721: LD_VAR 0 2
28725: PPUSH
28726: LD_VAR 0 2
28730: PUSH
28731: LD_INT 1
28733: PLUS
28734: PPUSH
28735: LD_VAR 0 7
28739: PPUSH
28740: CALL_OW 1
28744: ST_TO_ADDR
28745: GO 28713
28747: POP
28748: POP
// end ;
28749: GO 28679
28751: POP
28752: POP
// if not result then
28753: LD_VAR 0 2
28757: NOT
28758: IFFALSE 28762
// exit ;
28760: GO 28910
// mech := result [ 1 ] ;
28762: LD_ADDR_VAR 0 5
28766: PUSH
28767: LD_VAR 0 2
28771: PUSH
28772: LD_INT 1
28774: ARRAY
28775: ST_TO_ADDR
// if result > 1 then
28776: LD_VAR 0 2
28780: PUSH
28781: LD_INT 1
28783: GREATER
28784: IFFALSE 28896
// begin for i = 2 to result do
28786: LD_ADDR_VAR 0 3
28790: PUSH
28791: DOUBLE
28792: LD_INT 2
28794: DEC
28795: ST_TO_ADDR
28796: LD_VAR 0 2
28800: PUSH
28801: FOR_TO
28802: IFFALSE 28894
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28804: LD_ADDR_VAR 0 4
28808: PUSH
28809: LD_VAR 0 2
28813: PUSH
28814: LD_VAR 0 3
28818: ARRAY
28819: PPUSH
28820: LD_INT 3
28822: PPUSH
28823: CALL_OW 259
28827: PUSH
28828: LD_VAR 0 2
28832: PUSH
28833: LD_VAR 0 3
28837: ARRAY
28838: PPUSH
28839: CALL_OW 432
28843: MINUS
28844: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28845: LD_VAR 0 4
28849: PUSH
28850: LD_VAR 0 5
28854: PPUSH
28855: LD_INT 3
28857: PPUSH
28858: CALL_OW 259
28862: PUSH
28863: LD_VAR 0 5
28867: PPUSH
28868: CALL_OW 432
28872: MINUS
28873: GREATEREQUAL
28874: IFFALSE 28892
// mech := result [ i ] ;
28876: LD_ADDR_VAR 0 5
28880: PUSH
28881: LD_VAR 0 2
28885: PUSH
28886: LD_VAR 0 3
28890: ARRAY
28891: ST_TO_ADDR
// end ;
28892: GO 28801
28894: POP
28895: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28896: LD_VAR 0 1
28900: PPUSH
28901: LD_VAR 0 5
28905: PPUSH
28906: CALL_OW 135
// end ;
28910: LD_VAR 0 2
28914: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28915: LD_INT 0
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
// result := [ ] ;
28930: LD_ADDR_VAR 0 7
28934: PUSH
28935: EMPTY
28936: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 266
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: IN
28957: NOT
28958: IFFALSE 28962
// exit ;
28960: GO 30596
// if name then
28962: LD_VAR 0 3
28966: IFFALSE 28982
// SetBName ( base_dep , name ) ;
28968: LD_VAR 0 1
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: CALL_OW 500
// base := GetBase ( base_dep ) ;
28982: LD_ADDR_VAR 0 15
28986: PUSH
28987: LD_VAR 0 1
28991: PPUSH
28992: CALL_OW 274
28996: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28997: LD_ADDR_VAR 0 16
29001: PUSH
29002: LD_VAR 0 1
29006: PPUSH
29007: CALL_OW 255
29011: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29012: LD_ADDR_VAR 0 17
29016: PUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 248
29026: ST_TO_ADDR
// if sources then
29027: LD_VAR 0 5
29031: IFFALSE 29078
// for i = 1 to 3 do
29033: LD_ADDR_VAR 0 8
29037: PUSH
29038: DOUBLE
29039: LD_INT 1
29041: DEC
29042: ST_TO_ADDR
29043: LD_INT 3
29045: PUSH
29046: FOR_TO
29047: IFFALSE 29076
// AddResourceType ( base , i , sources [ i ] ) ;
29049: LD_VAR 0 15
29053: PPUSH
29054: LD_VAR 0 8
29058: PPUSH
29059: LD_VAR 0 5
29063: PUSH
29064: LD_VAR 0 8
29068: ARRAY
29069: PPUSH
29070: CALL_OW 276
29074: GO 29046
29076: POP
29077: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29078: LD_ADDR_VAR 0 18
29082: PUSH
29083: LD_VAR 0 15
29087: PPUSH
29088: LD_VAR 0 2
29092: PPUSH
29093: LD_INT 1
29095: PPUSH
29096: CALL 28339 0 3
29100: ST_TO_ADDR
// InitHc ;
29101: CALL_OW 19
// InitUc ;
29105: CALL_OW 18
// uc_side := side ;
29109: LD_ADDR_OWVAR 20
29113: PUSH
29114: LD_VAR 0 16
29118: ST_TO_ADDR
// uc_nation := nation ;
29119: LD_ADDR_OWVAR 21
29123: PUSH
29124: LD_VAR 0 17
29128: ST_TO_ADDR
// if buildings then
29129: LD_VAR 0 18
29133: IFFALSE 30455
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29135: LD_ADDR_VAR 0 19
29139: PUSH
29140: LD_VAR 0 18
29144: PPUSH
29145: LD_INT 2
29147: PUSH
29148: LD_INT 30
29150: PUSH
29151: LD_INT 29
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 30
29160: PUSH
29161: LD_INT 30
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: PPUSH
29173: CALL_OW 72
29177: ST_TO_ADDR
// if tmp then
29178: LD_VAR 0 19
29182: IFFALSE 29230
// for i in tmp do
29184: LD_ADDR_VAR 0 8
29188: PUSH
29189: LD_VAR 0 19
29193: PUSH
29194: FOR_IN
29195: IFFALSE 29228
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29197: LD_VAR 0 8
29201: PPUSH
29202: CALL_OW 250
29206: PPUSH
29207: LD_VAR 0 8
29211: PPUSH
29212: CALL_OW 251
29216: PPUSH
29217: LD_VAR 0 16
29221: PPUSH
29222: CALL_OW 441
29226: GO 29194
29228: POP
29229: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29230: LD_VAR 0 18
29234: PPUSH
29235: LD_INT 2
29237: PUSH
29238: LD_INT 30
29240: PUSH
29241: LD_INT 32
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 30
29250: PUSH
29251: LD_INT 33
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: LIST
29262: PPUSH
29263: CALL_OW 72
29267: IFFALSE 29355
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29269: LD_ADDR_VAR 0 8
29273: PUSH
29274: LD_VAR 0 18
29278: PPUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 30
29284: PUSH
29285: LD_INT 32
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 30
29294: PUSH
29295: LD_INT 33
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: PPUSH
29307: CALL_OW 72
29311: PUSH
29312: FOR_IN
29313: IFFALSE 29353
// begin if not GetBWeapon ( i ) then
29315: LD_VAR 0 8
29319: PPUSH
29320: CALL_OW 269
29324: NOT
29325: IFFALSE 29351
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29327: LD_VAR 0 8
29331: PPUSH
29332: LD_VAR 0 8
29336: PPUSH
29337: LD_VAR 0 2
29341: PPUSH
29342: CALL 30601 0 2
29346: PPUSH
29347: CALL_OW 431
// end ;
29351: GO 29312
29353: POP
29354: POP
// end ; for i = 1 to personel do
29355: LD_ADDR_VAR 0 8
29359: PUSH
29360: DOUBLE
29361: LD_INT 1
29363: DEC
29364: ST_TO_ADDR
29365: LD_VAR 0 6
29369: PUSH
29370: FOR_TO
29371: IFFALSE 30435
// begin if i > 4 then
29373: LD_VAR 0 8
29377: PUSH
29378: LD_INT 4
29380: GREATER
29381: IFFALSE 29385
// break ;
29383: GO 30435
// case i of 1 :
29385: LD_VAR 0 8
29389: PUSH
29390: LD_INT 1
29392: DOUBLE
29393: EQUAL
29394: IFTRUE 29398
29396: GO 29478
29398: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29399: LD_ADDR_VAR 0 12
29403: PUSH
29404: LD_VAR 0 18
29408: PPUSH
29409: LD_INT 22
29411: PUSH
29412: LD_VAR 0 16
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 58
29423: PUSH
29424: EMPTY
29425: LIST
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: LD_INT 30
29432: PUSH
29433: LD_INT 32
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 30
29442: PUSH
29443: LD_INT 4
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 30
29452: PUSH
29453: LD_INT 5
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: PPUSH
29471: CALL_OW 72
29475: ST_TO_ADDR
29476: GO 29700
29478: LD_INT 2
29480: DOUBLE
29481: EQUAL
29482: IFTRUE 29486
29484: GO 29548
29486: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29487: LD_ADDR_VAR 0 12
29491: PUSH
29492: LD_VAR 0 18
29496: PPUSH
29497: LD_INT 22
29499: PUSH
29500: LD_VAR 0 16
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 2
29511: PUSH
29512: LD_INT 30
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 30
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PPUSH
29541: CALL_OW 72
29545: ST_TO_ADDR
29546: GO 29700
29548: LD_INT 3
29550: DOUBLE
29551: EQUAL
29552: IFTRUE 29556
29554: GO 29618
29556: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29557: LD_ADDR_VAR 0 12
29561: PUSH
29562: LD_VAR 0 18
29566: PPUSH
29567: LD_INT 22
29569: PUSH
29570: LD_VAR 0 16
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: LD_INT 30
29584: PUSH
29585: LD_INT 2
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 30
29594: PUSH
29595: LD_INT 3
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 72
29615: ST_TO_ADDR
29616: GO 29700
29618: LD_INT 4
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29699
29626: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29627: LD_ADDR_VAR 0 12
29631: PUSH
29632: LD_VAR 0 18
29636: PPUSH
29637: LD_INT 22
29639: PUSH
29640: LD_VAR 0 16
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: LD_INT 30
29654: PUSH
29655: LD_INT 6
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 30
29664: PUSH
29665: LD_INT 7
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 30
29674: PUSH
29675: LD_INT 8
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PPUSH
29692: CALL_OW 72
29696: ST_TO_ADDR
29697: GO 29700
29699: POP
// if i = 1 then
29700: LD_VAR 0 8
29704: PUSH
29705: LD_INT 1
29707: EQUAL
29708: IFFALSE 29819
// begin tmp := [ ] ;
29710: LD_ADDR_VAR 0 19
29714: PUSH
29715: EMPTY
29716: ST_TO_ADDR
// for j in f do
29717: LD_ADDR_VAR 0 9
29721: PUSH
29722: LD_VAR 0 12
29726: PUSH
29727: FOR_IN
29728: IFFALSE 29801
// if GetBType ( j ) = b_bunker then
29730: LD_VAR 0 9
29734: PPUSH
29735: CALL_OW 266
29739: PUSH
29740: LD_INT 32
29742: EQUAL
29743: IFFALSE 29770
// tmp := Insert ( tmp , 1 , j ) else
29745: LD_ADDR_VAR 0 19
29749: PUSH
29750: LD_VAR 0 19
29754: PPUSH
29755: LD_INT 1
29757: PPUSH
29758: LD_VAR 0 9
29762: PPUSH
29763: CALL_OW 2
29767: ST_TO_ADDR
29768: GO 29799
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29770: LD_ADDR_VAR 0 19
29774: PUSH
29775: LD_VAR 0 19
29779: PPUSH
29780: LD_VAR 0 19
29784: PUSH
29785: LD_INT 1
29787: PLUS
29788: PPUSH
29789: LD_VAR 0 9
29793: PPUSH
29794: CALL_OW 2
29798: ST_TO_ADDR
29799: GO 29727
29801: POP
29802: POP
// if tmp then
29803: LD_VAR 0 19
29807: IFFALSE 29819
// f := tmp ;
29809: LD_ADDR_VAR 0 12
29813: PUSH
29814: LD_VAR 0 19
29818: ST_TO_ADDR
// end ; x := personel [ i ] ;
29819: LD_ADDR_VAR 0 13
29823: PUSH
29824: LD_VAR 0 6
29828: PUSH
29829: LD_VAR 0 8
29833: ARRAY
29834: ST_TO_ADDR
// if x = - 1 then
29835: LD_VAR 0 13
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: EQUAL
29844: IFFALSE 30053
// begin for j in f do
29846: LD_ADDR_VAR 0 9
29850: PUSH
29851: LD_VAR 0 12
29855: PUSH
29856: FOR_IN
29857: IFFALSE 30049
// repeat InitHc ;
29859: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29863: LD_VAR 0 9
29867: PPUSH
29868: CALL_OW 266
29872: PUSH
29873: LD_INT 5
29875: EQUAL
29876: IFFALSE 29946
// begin if UnitsInside ( j ) < 3 then
29878: LD_VAR 0 9
29882: PPUSH
29883: CALL_OW 313
29887: PUSH
29888: LD_INT 3
29890: LESS
29891: IFFALSE 29927
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29893: LD_INT 0
29895: PPUSH
29896: LD_INT 5
29898: PUSH
29899: LD_INT 8
29901: PUSH
29902: LD_INT 9
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: PUSH
29910: LD_VAR 0 17
29914: ARRAY
29915: PPUSH
29916: LD_VAR 0 4
29920: PPUSH
29921: CALL_OW 380
29925: GO 29944
// PrepareHuman ( false , i , skill ) ;
29927: LD_INT 0
29929: PPUSH
29930: LD_VAR 0 8
29934: PPUSH
29935: LD_VAR 0 4
29939: PPUSH
29940: CALL_OW 380
// end else
29944: GO 29963
// PrepareHuman ( false , i , skill ) ;
29946: LD_INT 0
29948: PPUSH
29949: LD_VAR 0 8
29953: PPUSH
29954: LD_VAR 0 4
29958: PPUSH
29959: CALL_OW 380
// un := CreateHuman ;
29963: LD_ADDR_VAR 0 14
29967: PUSH
29968: CALL_OW 44
29972: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29973: LD_ADDR_VAR 0 7
29977: PUSH
29978: LD_VAR 0 7
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_VAR 0 14
29990: PPUSH
29991: CALL_OW 2
29995: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29996: LD_VAR 0 14
30000: PPUSH
30001: LD_VAR 0 9
30005: PPUSH
30006: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30010: LD_VAR 0 9
30014: PPUSH
30015: CALL_OW 313
30019: PUSH
30020: LD_INT 6
30022: EQUAL
30023: PUSH
30024: LD_VAR 0 9
30028: PPUSH
30029: CALL_OW 266
30033: PUSH
30034: LD_INT 32
30036: PUSH
30037: LD_INT 31
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: IN
30044: OR
30045: IFFALSE 29859
30047: GO 29856
30049: POP
30050: POP
// end else
30051: GO 30433
// for j = 1 to x do
30053: LD_ADDR_VAR 0 9
30057: PUSH
30058: DOUBLE
30059: LD_INT 1
30061: DEC
30062: ST_TO_ADDR
30063: LD_VAR 0 13
30067: PUSH
30068: FOR_TO
30069: IFFALSE 30431
// begin InitHc ;
30071: CALL_OW 19
// if not f then
30075: LD_VAR 0 12
30079: NOT
30080: IFFALSE 30169
// begin PrepareHuman ( false , i , skill ) ;
30082: LD_INT 0
30084: PPUSH
30085: LD_VAR 0 8
30089: PPUSH
30090: LD_VAR 0 4
30094: PPUSH
30095: CALL_OW 380
// un := CreateHuman ;
30099: LD_ADDR_VAR 0 14
30103: PUSH
30104: CALL_OW 44
30108: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30109: LD_ADDR_VAR 0 7
30113: PUSH
30114: LD_VAR 0 7
30118: PPUSH
30119: LD_INT 1
30121: PPUSH
30122: LD_VAR 0 14
30126: PPUSH
30127: CALL_OW 2
30131: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30132: LD_VAR 0 14
30136: PPUSH
30137: LD_VAR 0 1
30141: PPUSH
30142: CALL_OW 250
30146: PPUSH
30147: LD_VAR 0 1
30151: PPUSH
30152: CALL_OW 251
30156: PPUSH
30157: LD_INT 10
30159: PPUSH
30160: LD_INT 0
30162: PPUSH
30163: CALL_OW 50
// continue ;
30167: GO 30068
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30169: LD_VAR 0 12
30173: PUSH
30174: LD_INT 1
30176: ARRAY
30177: PPUSH
30178: CALL_OW 313
30182: PUSH
30183: LD_VAR 0 12
30187: PUSH
30188: LD_INT 1
30190: ARRAY
30191: PPUSH
30192: CALL_OW 266
30196: PUSH
30197: LD_INT 32
30199: PUSH
30200: LD_INT 31
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: IN
30207: AND
30208: PUSH
30209: LD_VAR 0 12
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: PPUSH
30218: CALL_OW 313
30222: PUSH
30223: LD_INT 6
30225: EQUAL
30226: OR
30227: IFFALSE 30247
// f := Delete ( f , 1 ) ;
30229: LD_ADDR_VAR 0 12
30233: PUSH
30234: LD_VAR 0 12
30238: PPUSH
30239: LD_INT 1
30241: PPUSH
30242: CALL_OW 3
30246: ST_TO_ADDR
// if not f then
30247: LD_VAR 0 12
30251: NOT
30252: IFFALSE 30270
// begin x := x + 2 ;
30254: LD_ADDR_VAR 0 13
30258: PUSH
30259: LD_VAR 0 13
30263: PUSH
30264: LD_INT 2
30266: PLUS
30267: ST_TO_ADDR
// continue ;
30268: GO 30068
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30270: LD_VAR 0 12
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PPUSH
30279: CALL_OW 266
30283: PUSH
30284: LD_INT 5
30286: EQUAL
30287: IFFALSE 30361
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30289: LD_VAR 0 12
30293: PUSH
30294: LD_INT 1
30296: ARRAY
30297: PPUSH
30298: CALL_OW 313
30302: PUSH
30303: LD_INT 3
30305: LESS
30306: IFFALSE 30342
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30308: LD_INT 0
30310: PPUSH
30311: LD_INT 5
30313: PUSH
30314: LD_INT 8
30316: PUSH
30317: LD_INT 9
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: PUSH
30325: LD_VAR 0 17
30329: ARRAY
30330: PPUSH
30331: LD_VAR 0 4
30335: PPUSH
30336: CALL_OW 380
30340: GO 30359
// PrepareHuman ( false , i , skill ) ;
30342: LD_INT 0
30344: PPUSH
30345: LD_VAR 0 8
30349: PPUSH
30350: LD_VAR 0 4
30354: PPUSH
30355: CALL_OW 380
// end else
30359: GO 30378
// PrepareHuman ( false , i , skill ) ;
30361: LD_INT 0
30363: PPUSH
30364: LD_VAR 0 8
30368: PPUSH
30369: LD_VAR 0 4
30373: PPUSH
30374: CALL_OW 380
// un := CreateHuman ;
30378: LD_ADDR_VAR 0 14
30382: PUSH
30383: CALL_OW 44
30387: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30388: LD_ADDR_VAR 0 7
30392: PUSH
30393: LD_VAR 0 7
30397: PPUSH
30398: LD_INT 1
30400: PPUSH
30401: LD_VAR 0 14
30405: PPUSH
30406: CALL_OW 2
30410: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30411: LD_VAR 0 14
30415: PPUSH
30416: LD_VAR 0 12
30420: PUSH
30421: LD_INT 1
30423: ARRAY
30424: PPUSH
30425: CALL_OW 52
// end ;
30429: GO 30068
30431: POP
30432: POP
// end ;
30433: GO 29370
30435: POP
30436: POP
// result := result ^ buildings ;
30437: LD_ADDR_VAR 0 7
30441: PUSH
30442: LD_VAR 0 7
30446: PUSH
30447: LD_VAR 0 18
30451: ADD
30452: ST_TO_ADDR
// end else
30453: GO 30596
// begin for i = 1 to personel do
30455: LD_ADDR_VAR 0 8
30459: PUSH
30460: DOUBLE
30461: LD_INT 1
30463: DEC
30464: ST_TO_ADDR
30465: LD_VAR 0 6
30469: PUSH
30470: FOR_TO
30471: IFFALSE 30594
// begin if i > 4 then
30473: LD_VAR 0 8
30477: PUSH
30478: LD_INT 4
30480: GREATER
30481: IFFALSE 30485
// break ;
30483: GO 30594
// x := personel [ i ] ;
30485: LD_ADDR_VAR 0 13
30489: PUSH
30490: LD_VAR 0 6
30494: PUSH
30495: LD_VAR 0 8
30499: ARRAY
30500: ST_TO_ADDR
// if x = - 1 then
30501: LD_VAR 0 13
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: EQUAL
30510: IFFALSE 30514
// continue ;
30512: GO 30470
// PrepareHuman ( false , i , skill ) ;
30514: LD_INT 0
30516: PPUSH
30517: LD_VAR 0 8
30521: PPUSH
30522: LD_VAR 0 4
30526: PPUSH
30527: CALL_OW 380
// un := CreateHuman ;
30531: LD_ADDR_VAR 0 14
30535: PUSH
30536: CALL_OW 44
30540: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30541: LD_VAR 0 14
30545: PPUSH
30546: LD_VAR 0 1
30550: PPUSH
30551: CALL_OW 250
30555: PPUSH
30556: LD_VAR 0 1
30560: PPUSH
30561: CALL_OW 251
30565: PPUSH
30566: LD_INT 10
30568: PPUSH
30569: LD_INT 0
30571: PPUSH
30572: CALL_OW 50
// result := result ^ un ;
30576: LD_ADDR_VAR 0 7
30580: PUSH
30581: LD_VAR 0 7
30585: PUSH
30586: LD_VAR 0 14
30590: ADD
30591: ST_TO_ADDR
// end ;
30592: GO 30470
30594: POP
30595: POP
// end ; end ;
30596: LD_VAR 0 7
30600: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30601: LD_INT 0
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
30609: PPUSH
30610: PPUSH
30611: PPUSH
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
30618: PPUSH
// result := false ;
30619: LD_ADDR_VAR 0 3
30623: PUSH
30624: LD_INT 0
30626: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30627: LD_VAR 0 1
30631: NOT
30632: PUSH
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 266
30642: PUSH
30643: LD_INT 32
30645: PUSH
30646: LD_INT 33
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: IN
30653: NOT
30654: OR
30655: IFFALSE 30659
// exit ;
30657: GO 31768
// nat := GetNation ( tower ) ;
30659: LD_ADDR_VAR 0 12
30663: PUSH
30664: LD_VAR 0 1
30668: PPUSH
30669: CALL_OW 248
30673: ST_TO_ADDR
// side := GetSide ( tower ) ;
30674: LD_ADDR_VAR 0 16
30678: PUSH
30679: LD_VAR 0 1
30683: PPUSH
30684: CALL_OW 255
30688: ST_TO_ADDR
// x := GetX ( tower ) ;
30689: LD_ADDR_VAR 0 10
30693: PUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 250
30703: ST_TO_ADDR
// y := GetY ( tower ) ;
30704: LD_ADDR_VAR 0 11
30708: PUSH
30709: LD_VAR 0 1
30713: PPUSH
30714: CALL_OW 251
30718: ST_TO_ADDR
// if not x or not y then
30719: LD_VAR 0 10
30723: NOT
30724: PUSH
30725: LD_VAR 0 11
30729: NOT
30730: OR
30731: IFFALSE 30735
// exit ;
30733: GO 31768
// weapon := 0 ;
30735: LD_ADDR_VAR 0 18
30739: PUSH
30740: LD_INT 0
30742: ST_TO_ADDR
// fac_list := [ ] ;
30743: LD_ADDR_VAR 0 17
30747: PUSH
30748: EMPTY
30749: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30750: LD_ADDR_VAR 0 6
30754: PUSH
30755: LD_VAR 0 1
30759: PPUSH
30760: CALL_OW 274
30764: PPUSH
30765: LD_VAR 0 2
30769: PPUSH
30770: LD_INT 0
30772: PPUSH
30773: CALL 28339 0 3
30777: PPUSH
30778: LD_INT 30
30780: PUSH
30781: LD_INT 3
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PPUSH
30788: CALL_OW 72
30792: ST_TO_ADDR
// if not factories then
30793: LD_VAR 0 6
30797: NOT
30798: IFFALSE 30802
// exit ;
30800: GO 31768
// for i in factories do
30802: LD_ADDR_VAR 0 8
30806: PUSH
30807: LD_VAR 0 6
30811: PUSH
30812: FOR_IN
30813: IFFALSE 30838
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30815: LD_ADDR_VAR 0 17
30819: PUSH
30820: LD_VAR 0 17
30824: PUSH
30825: LD_VAR 0 8
30829: PPUSH
30830: CALL_OW 478
30834: UNION
30835: ST_TO_ADDR
30836: GO 30812
30838: POP
30839: POP
// if not fac_list then
30840: LD_VAR 0 17
30844: NOT
30845: IFFALSE 30849
// exit ;
30847: GO 31768
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30849: LD_ADDR_VAR 0 5
30853: PUSH
30854: LD_INT 4
30856: PUSH
30857: LD_INT 5
30859: PUSH
30860: LD_INT 9
30862: PUSH
30863: LD_INT 10
30865: PUSH
30866: LD_INT 6
30868: PUSH
30869: LD_INT 7
30871: PUSH
30872: LD_INT 11
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 27
30886: PUSH
30887: LD_INT 28
30889: PUSH
30890: LD_INT 26
30892: PUSH
30893: LD_INT 30
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 43
30904: PUSH
30905: LD_INT 44
30907: PUSH
30908: LD_INT 46
30910: PUSH
30911: LD_INT 45
30913: PUSH
30914: LD_INT 47
30916: PUSH
30917: LD_INT 49
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: PUSH
30933: LD_VAR 0 12
30937: ARRAY
30938: ST_TO_ADDR
// list := list isect fac_list ;
30939: LD_ADDR_VAR 0 5
30943: PUSH
30944: LD_VAR 0 5
30948: PUSH
30949: LD_VAR 0 17
30953: ISECT
30954: ST_TO_ADDR
// if not list then
30955: LD_VAR 0 5
30959: NOT
30960: IFFALSE 30964
// exit ;
30962: GO 31768
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30964: LD_VAR 0 12
30968: PUSH
30969: LD_INT 3
30971: EQUAL
30972: PUSH
30973: LD_INT 49
30975: PUSH
30976: LD_VAR 0 5
30980: IN
30981: AND
30982: PUSH
30983: LD_INT 31
30985: PPUSH
30986: LD_VAR 0 16
30990: PPUSH
30991: CALL_OW 321
30995: PUSH
30996: LD_INT 2
30998: EQUAL
30999: AND
31000: IFFALSE 31060
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31002: LD_INT 22
31004: PUSH
31005: LD_VAR 0 16
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 35
31016: PUSH
31017: LD_INT 49
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 91
31026: PUSH
31027: LD_VAR 0 1
31031: PUSH
31032: LD_INT 10
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: PPUSH
31045: CALL_OW 69
31049: NOT
31050: IFFALSE 31060
// weapon := ru_time_lapser ;
31052: LD_ADDR_VAR 0 18
31056: PUSH
31057: LD_INT 49
31059: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31060: LD_VAR 0 12
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: IN
31075: PUSH
31076: LD_INT 11
31078: PUSH
31079: LD_VAR 0 5
31083: IN
31084: PUSH
31085: LD_INT 30
31087: PUSH
31088: LD_VAR 0 5
31092: IN
31093: OR
31094: AND
31095: PUSH
31096: LD_INT 6
31098: PPUSH
31099: LD_VAR 0 16
31103: PPUSH
31104: CALL_OW 321
31108: PUSH
31109: LD_INT 2
31111: EQUAL
31112: AND
31113: IFFALSE 31278
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31115: LD_INT 22
31117: PUSH
31118: LD_VAR 0 16
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 2
31129: PUSH
31130: LD_INT 35
31132: PUSH
31133: LD_INT 11
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 35
31142: PUSH
31143: LD_INT 30
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 91
31157: PUSH
31158: LD_VAR 0 1
31162: PUSH
31163: LD_INT 18
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: PPUSH
31176: CALL_OW 69
31180: NOT
31181: PUSH
31182: LD_INT 22
31184: PUSH
31185: LD_VAR 0 16
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: LD_INT 30
31199: PUSH
31200: LD_INT 32
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 30
31209: PUSH
31210: LD_INT 33
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 91
31224: PUSH
31225: LD_VAR 0 1
31229: PUSH
31230: LD_INT 12
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: PUSH
31243: EMPTY
31244: LIST
31245: PPUSH
31246: CALL_OW 69
31250: PUSH
31251: LD_INT 2
31253: GREATER
31254: AND
31255: IFFALSE 31278
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31257: LD_ADDR_VAR 0 18
31261: PUSH
31262: LD_INT 11
31264: PUSH
31265: LD_INT 30
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_VAR 0 12
31276: ARRAY
31277: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31278: LD_VAR 0 18
31282: NOT
31283: PUSH
31284: LD_INT 40
31286: PPUSH
31287: LD_VAR 0 16
31291: PPUSH
31292: CALL_OW 321
31296: PUSH
31297: LD_INT 2
31299: EQUAL
31300: AND
31301: PUSH
31302: LD_INT 7
31304: PUSH
31305: LD_VAR 0 5
31309: IN
31310: PUSH
31311: LD_INT 28
31313: PUSH
31314: LD_VAR 0 5
31318: IN
31319: OR
31320: PUSH
31321: LD_INT 45
31323: PUSH
31324: LD_VAR 0 5
31328: IN
31329: OR
31330: AND
31331: IFFALSE 31585
// begin hex := GetHexInfo ( x , y ) ;
31333: LD_ADDR_VAR 0 4
31337: PUSH
31338: LD_VAR 0 10
31342: PPUSH
31343: LD_VAR 0 11
31347: PPUSH
31348: CALL_OW 546
31352: ST_TO_ADDR
// if hex [ 1 ] then
31353: LD_VAR 0 4
31357: PUSH
31358: LD_INT 1
31360: ARRAY
31361: IFFALSE 31365
// exit ;
31363: GO 31768
// height := hex [ 2 ] ;
31365: LD_ADDR_VAR 0 15
31369: PUSH
31370: LD_VAR 0 4
31374: PUSH
31375: LD_INT 2
31377: ARRAY
31378: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31379: LD_ADDR_VAR 0 14
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 3
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: ST_TO_ADDR
// for i in tmp do
31402: LD_ADDR_VAR 0 8
31406: PUSH
31407: LD_VAR 0 14
31411: PUSH
31412: FOR_IN
31413: IFFALSE 31583
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31415: LD_ADDR_VAR 0 9
31419: PUSH
31420: LD_VAR 0 10
31424: PPUSH
31425: LD_VAR 0 8
31429: PPUSH
31430: LD_INT 5
31432: PPUSH
31433: CALL_OW 272
31437: PUSH
31438: LD_VAR 0 11
31442: PPUSH
31443: LD_VAR 0 8
31447: PPUSH
31448: LD_INT 5
31450: PPUSH
31451: CALL_OW 273
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31460: LD_VAR 0 9
31464: PUSH
31465: LD_INT 1
31467: ARRAY
31468: PPUSH
31469: LD_VAR 0 9
31473: PUSH
31474: LD_INT 2
31476: ARRAY
31477: PPUSH
31478: CALL_OW 488
31482: IFFALSE 31581
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31484: LD_ADDR_VAR 0 4
31488: PUSH
31489: LD_VAR 0 9
31493: PUSH
31494: LD_INT 1
31496: ARRAY
31497: PPUSH
31498: LD_VAR 0 9
31502: PUSH
31503: LD_INT 2
31505: ARRAY
31506: PPUSH
31507: CALL_OW 546
31511: ST_TO_ADDR
// if hex [ 1 ] then
31512: LD_VAR 0 4
31516: PUSH
31517: LD_INT 1
31519: ARRAY
31520: IFFALSE 31524
// continue ;
31522: GO 31412
// h := hex [ 2 ] ;
31524: LD_ADDR_VAR 0 13
31528: PUSH
31529: LD_VAR 0 4
31533: PUSH
31534: LD_INT 2
31536: ARRAY
31537: ST_TO_ADDR
// if h + 7 < height then
31538: LD_VAR 0 13
31542: PUSH
31543: LD_INT 7
31545: PLUS
31546: PUSH
31547: LD_VAR 0 15
31551: LESS
31552: IFFALSE 31581
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31554: LD_ADDR_VAR 0 18
31558: PUSH
31559: LD_INT 7
31561: PUSH
31562: LD_INT 28
31564: PUSH
31565: LD_INT 45
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: PUSH
31573: LD_VAR 0 12
31577: ARRAY
31578: ST_TO_ADDR
// break ;
31579: GO 31583
// end ; end ; end ;
31581: GO 31412
31583: POP
31584: POP
// end ; if not weapon then
31585: LD_VAR 0 18
31589: NOT
31590: IFFALSE 31650
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31592: LD_ADDR_VAR 0 5
31596: PUSH
31597: LD_VAR 0 5
31601: PUSH
31602: LD_INT 11
31604: PUSH
31605: LD_INT 30
31607: PUSH
31608: LD_INT 49
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: DIFF
31616: ST_TO_ADDR
// if not list then
31617: LD_VAR 0 5
31621: NOT
31622: IFFALSE 31626
// exit ;
31624: GO 31768
// weapon := list [ rand ( 1 , list ) ] ;
31626: LD_ADDR_VAR 0 18
31630: PUSH
31631: LD_VAR 0 5
31635: PUSH
31636: LD_INT 1
31638: PPUSH
31639: LD_VAR 0 5
31643: PPUSH
31644: CALL_OW 12
31648: ARRAY
31649: ST_TO_ADDR
// end ; if weapon then
31650: LD_VAR 0 18
31654: IFFALSE 31768
// begin tmp := CostOfWeapon ( weapon ) ;
31656: LD_ADDR_VAR 0 14
31660: PUSH
31661: LD_VAR 0 18
31665: PPUSH
31666: CALL_OW 451
31670: ST_TO_ADDR
// j := GetBase ( tower ) ;
31671: LD_ADDR_VAR 0 9
31675: PUSH
31676: LD_VAR 0 1
31680: PPUSH
31681: CALL_OW 274
31685: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31686: LD_VAR 0 9
31690: PPUSH
31691: LD_INT 1
31693: PPUSH
31694: CALL_OW 275
31698: PUSH
31699: LD_VAR 0 14
31703: PUSH
31704: LD_INT 1
31706: ARRAY
31707: GREATEREQUAL
31708: PUSH
31709: LD_VAR 0 9
31713: PPUSH
31714: LD_INT 2
31716: PPUSH
31717: CALL_OW 275
31721: PUSH
31722: LD_VAR 0 14
31726: PUSH
31727: LD_INT 2
31729: ARRAY
31730: GREATEREQUAL
31731: AND
31732: PUSH
31733: LD_VAR 0 9
31737: PPUSH
31738: LD_INT 3
31740: PPUSH
31741: CALL_OW 275
31745: PUSH
31746: LD_VAR 0 14
31750: PUSH
31751: LD_INT 3
31753: ARRAY
31754: GREATEREQUAL
31755: AND
31756: IFFALSE 31768
// result := weapon ;
31758: LD_ADDR_VAR 0 3
31762: PUSH
31763: LD_VAR 0 18
31767: ST_TO_ADDR
// end ; end ;
31768: LD_VAR 0 3
31772: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31773: LD_INT 0
31775: PPUSH
31776: PPUSH
// result := true ;
31777: LD_ADDR_VAR 0 3
31781: PUSH
31782: LD_INT 1
31784: ST_TO_ADDR
// if array1 = array2 then
31785: LD_VAR 0 1
31789: PUSH
31790: LD_VAR 0 2
31794: EQUAL
31795: IFFALSE 31855
// begin for i = 1 to array1 do
31797: LD_ADDR_VAR 0 4
31801: PUSH
31802: DOUBLE
31803: LD_INT 1
31805: DEC
31806: ST_TO_ADDR
31807: LD_VAR 0 1
31811: PUSH
31812: FOR_TO
31813: IFFALSE 31851
// if array1 [ i ] <> array2 [ i ] then
31815: LD_VAR 0 1
31819: PUSH
31820: LD_VAR 0 4
31824: ARRAY
31825: PUSH
31826: LD_VAR 0 2
31830: PUSH
31831: LD_VAR 0 4
31835: ARRAY
31836: NONEQUAL
31837: IFFALSE 31849
// begin result := false ;
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: LD_INT 0
31846: ST_TO_ADDR
// break ;
31847: GO 31851
// end ;
31849: GO 31812
31851: POP
31852: POP
// end else
31853: GO 31863
// result := false ;
31855: LD_ADDR_VAR 0 3
31859: PUSH
31860: LD_INT 0
31862: ST_TO_ADDR
// end ;
31863: LD_VAR 0 3
31867: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31868: LD_INT 0
31870: PPUSH
31871: PPUSH
// if not array1 or not array2 then
31872: LD_VAR 0 1
31876: NOT
31877: PUSH
31878: LD_VAR 0 2
31882: NOT
31883: OR
31884: IFFALSE 31888
// exit ;
31886: GO 31952
// result := true ;
31888: LD_ADDR_VAR 0 3
31892: PUSH
31893: LD_INT 1
31895: ST_TO_ADDR
// for i = 1 to array1 do
31896: LD_ADDR_VAR 0 4
31900: PUSH
31901: DOUBLE
31902: LD_INT 1
31904: DEC
31905: ST_TO_ADDR
31906: LD_VAR 0 1
31910: PUSH
31911: FOR_TO
31912: IFFALSE 31950
// if array1 [ i ] <> array2 [ i ] then
31914: LD_VAR 0 1
31918: PUSH
31919: LD_VAR 0 4
31923: ARRAY
31924: PUSH
31925: LD_VAR 0 2
31929: PUSH
31930: LD_VAR 0 4
31934: ARRAY
31935: NONEQUAL
31936: IFFALSE 31948
// begin result := false ;
31938: LD_ADDR_VAR 0 3
31942: PUSH
31943: LD_INT 0
31945: ST_TO_ADDR
// break ;
31946: GO 31950
// end ;
31948: GO 31911
31950: POP
31951: POP
// end ;
31952: LD_VAR 0 3
31956: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31957: LD_INT 0
31959: PPUSH
31960: PPUSH
31961: PPUSH
// pom := GetBase ( fac ) ;
31962: LD_ADDR_VAR 0 5
31966: PUSH
31967: LD_VAR 0 1
31971: PPUSH
31972: CALL_OW 274
31976: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31977: LD_ADDR_VAR 0 4
31981: PUSH
31982: LD_VAR 0 2
31986: PUSH
31987: LD_INT 1
31989: ARRAY
31990: PPUSH
31991: LD_VAR 0 2
31995: PUSH
31996: LD_INT 2
31998: ARRAY
31999: PPUSH
32000: LD_VAR 0 2
32004: PUSH
32005: LD_INT 3
32007: ARRAY
32008: PPUSH
32009: LD_VAR 0 2
32013: PUSH
32014: LD_INT 4
32016: ARRAY
32017: PPUSH
32018: CALL_OW 449
32022: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32023: LD_ADDR_VAR 0 3
32027: PUSH
32028: LD_VAR 0 5
32032: PPUSH
32033: LD_INT 1
32035: PPUSH
32036: CALL_OW 275
32040: PUSH
32041: LD_VAR 0 4
32045: PUSH
32046: LD_INT 1
32048: ARRAY
32049: GREATEREQUAL
32050: PUSH
32051: LD_VAR 0 5
32055: PPUSH
32056: LD_INT 2
32058: PPUSH
32059: CALL_OW 275
32063: PUSH
32064: LD_VAR 0 4
32068: PUSH
32069: LD_INT 2
32071: ARRAY
32072: GREATEREQUAL
32073: AND
32074: PUSH
32075: LD_VAR 0 5
32079: PPUSH
32080: LD_INT 3
32082: PPUSH
32083: CALL_OW 275
32087: PUSH
32088: LD_VAR 0 4
32092: PUSH
32093: LD_INT 3
32095: ARRAY
32096: GREATEREQUAL
32097: AND
32098: ST_TO_ADDR
// end ;
32099: LD_VAR 0 3
32103: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
// pom := GetBase ( building ) ;
32110: LD_ADDR_VAR 0 3
32114: PUSH
32115: LD_VAR 0 1
32119: PPUSH
32120: CALL_OW 274
32124: ST_TO_ADDR
// if not pom then
32125: LD_VAR 0 3
32129: NOT
32130: IFFALSE 32134
// exit ;
32132: GO 32304
// btype := GetBType ( building ) ;
32134: LD_ADDR_VAR 0 5
32138: PUSH
32139: LD_VAR 0 1
32143: PPUSH
32144: CALL_OW 266
32148: ST_TO_ADDR
// if btype = b_armoury then
32149: LD_VAR 0 5
32153: PUSH
32154: LD_INT 4
32156: EQUAL
32157: IFFALSE 32167
// btype := b_barracks ;
32159: LD_ADDR_VAR 0 5
32163: PUSH
32164: LD_INT 5
32166: ST_TO_ADDR
// if btype = b_depot then
32167: LD_VAR 0 5
32171: PUSH
32172: LD_INT 0
32174: EQUAL
32175: IFFALSE 32185
// btype := b_warehouse ;
32177: LD_ADDR_VAR 0 5
32181: PUSH
32182: LD_INT 1
32184: ST_TO_ADDR
// if btype = b_workshop then
32185: LD_VAR 0 5
32189: PUSH
32190: LD_INT 2
32192: EQUAL
32193: IFFALSE 32203
// btype := b_factory ;
32195: LD_ADDR_VAR 0 5
32199: PUSH
32200: LD_INT 3
32202: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32203: LD_ADDR_VAR 0 4
32207: PUSH
32208: LD_VAR 0 5
32212: PPUSH
32213: LD_VAR 0 1
32217: PPUSH
32218: CALL_OW 248
32222: PPUSH
32223: CALL_OW 450
32227: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32228: LD_ADDR_VAR 0 2
32232: PUSH
32233: LD_VAR 0 3
32237: PPUSH
32238: LD_INT 1
32240: PPUSH
32241: CALL_OW 275
32245: PUSH
32246: LD_VAR 0 4
32250: PUSH
32251: LD_INT 1
32253: ARRAY
32254: GREATEREQUAL
32255: PUSH
32256: LD_VAR 0 3
32260: PPUSH
32261: LD_INT 2
32263: PPUSH
32264: CALL_OW 275
32268: PUSH
32269: LD_VAR 0 4
32273: PUSH
32274: LD_INT 2
32276: ARRAY
32277: GREATEREQUAL
32278: AND
32279: PUSH
32280: LD_VAR 0 3
32284: PPUSH
32285: LD_INT 3
32287: PPUSH
32288: CALL_OW 275
32292: PUSH
32293: LD_VAR 0 4
32297: PUSH
32298: LD_INT 3
32300: ARRAY
32301: GREATEREQUAL
32302: AND
32303: ST_TO_ADDR
// end ;
32304: LD_VAR 0 2
32308: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32309: LD_INT 0
32311: PPUSH
32312: PPUSH
32313: PPUSH
// pom := GetBase ( building ) ;
32314: LD_ADDR_VAR 0 4
32318: PUSH
32319: LD_VAR 0 1
32323: PPUSH
32324: CALL_OW 274
32328: ST_TO_ADDR
// if not pom then
32329: LD_VAR 0 4
32333: NOT
32334: IFFALSE 32338
// exit ;
32336: GO 32439
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32338: LD_ADDR_VAR 0 5
32342: PUSH
32343: LD_VAR 0 2
32347: PPUSH
32348: LD_VAR 0 1
32352: PPUSH
32353: CALL_OW 248
32357: PPUSH
32358: CALL_OW 450
32362: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32363: LD_ADDR_VAR 0 3
32367: PUSH
32368: LD_VAR 0 4
32372: PPUSH
32373: LD_INT 1
32375: PPUSH
32376: CALL_OW 275
32380: PUSH
32381: LD_VAR 0 5
32385: PUSH
32386: LD_INT 1
32388: ARRAY
32389: GREATEREQUAL
32390: PUSH
32391: LD_VAR 0 4
32395: PPUSH
32396: LD_INT 2
32398: PPUSH
32399: CALL_OW 275
32403: PUSH
32404: LD_VAR 0 5
32408: PUSH
32409: LD_INT 2
32411: ARRAY
32412: GREATEREQUAL
32413: AND
32414: PUSH
32415: LD_VAR 0 4
32419: PPUSH
32420: LD_INT 3
32422: PPUSH
32423: CALL_OW 275
32427: PUSH
32428: LD_VAR 0 5
32432: PUSH
32433: LD_INT 3
32435: ARRAY
32436: GREATEREQUAL
32437: AND
32438: ST_TO_ADDR
// end ;
32439: LD_VAR 0 3
32443: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32444: LD_INT 0
32446: PPUSH
32447: PPUSH
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
32452: PPUSH
32453: PPUSH
32454: PPUSH
32455: PPUSH
32456: PPUSH
// result := false ;
32457: LD_ADDR_VAR 0 8
32461: PUSH
32462: LD_INT 0
32464: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32465: LD_VAR 0 5
32469: NOT
32470: PUSH
32471: LD_VAR 0 1
32475: NOT
32476: OR
32477: PUSH
32478: LD_VAR 0 2
32482: NOT
32483: OR
32484: PUSH
32485: LD_VAR 0 3
32489: NOT
32490: OR
32491: IFFALSE 32495
// exit ;
32493: GO 33309
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32495: LD_ADDR_VAR 0 14
32499: PUSH
32500: LD_VAR 0 1
32504: PPUSH
32505: LD_VAR 0 2
32509: PPUSH
32510: LD_VAR 0 3
32514: PPUSH
32515: LD_VAR 0 4
32519: PPUSH
32520: LD_VAR 0 5
32524: PUSH
32525: LD_INT 1
32527: ARRAY
32528: PPUSH
32529: CALL_OW 248
32533: PPUSH
32534: LD_INT 0
32536: PPUSH
32537: CALL 34562 0 6
32541: ST_TO_ADDR
// if not hexes then
32542: LD_VAR 0 14
32546: NOT
32547: IFFALSE 32551
// exit ;
32549: GO 33309
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32551: LD_ADDR_VAR 0 17
32555: PUSH
32556: LD_VAR 0 5
32560: PPUSH
32561: LD_INT 22
32563: PUSH
32564: LD_VAR 0 13
32568: PPUSH
32569: CALL_OW 255
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: LD_INT 30
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 30
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PPUSH
32610: CALL_OW 72
32614: ST_TO_ADDR
// for i = 1 to hexes do
32615: LD_ADDR_VAR 0 9
32619: PUSH
32620: DOUBLE
32621: LD_INT 1
32623: DEC
32624: ST_TO_ADDR
32625: LD_VAR 0 14
32629: PUSH
32630: FOR_TO
32631: IFFALSE 33307
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32633: LD_ADDR_VAR 0 13
32637: PUSH
32638: LD_VAR 0 14
32642: PUSH
32643: LD_VAR 0 9
32647: ARRAY
32648: PUSH
32649: LD_INT 1
32651: ARRAY
32652: PPUSH
32653: LD_VAR 0 14
32657: PUSH
32658: LD_VAR 0 9
32662: ARRAY
32663: PUSH
32664: LD_INT 2
32666: ARRAY
32667: PPUSH
32668: CALL_OW 428
32672: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32673: LD_VAR 0 14
32677: PUSH
32678: LD_VAR 0 9
32682: ARRAY
32683: PUSH
32684: LD_INT 1
32686: ARRAY
32687: PPUSH
32688: LD_VAR 0 14
32692: PUSH
32693: LD_VAR 0 9
32697: ARRAY
32698: PUSH
32699: LD_INT 2
32701: ARRAY
32702: PPUSH
32703: CALL_OW 351
32707: PUSH
32708: LD_VAR 0 14
32712: PUSH
32713: LD_VAR 0 9
32717: ARRAY
32718: PUSH
32719: LD_INT 1
32721: ARRAY
32722: PPUSH
32723: LD_VAR 0 14
32727: PUSH
32728: LD_VAR 0 9
32732: ARRAY
32733: PUSH
32734: LD_INT 2
32736: ARRAY
32737: PPUSH
32738: CALL_OW 488
32742: NOT
32743: OR
32744: PUSH
32745: LD_VAR 0 13
32749: PPUSH
32750: CALL_OW 247
32754: PUSH
32755: LD_INT 3
32757: EQUAL
32758: OR
32759: IFFALSE 32765
// exit ;
32761: POP
32762: POP
32763: GO 33309
// if not tmp then
32765: LD_VAR 0 13
32769: NOT
32770: IFFALSE 32774
// continue ;
32772: GO 32630
// result := true ;
32774: LD_ADDR_VAR 0 8
32778: PUSH
32779: LD_INT 1
32781: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32782: LD_VAR 0 6
32786: PUSH
32787: LD_VAR 0 13
32791: PPUSH
32792: CALL_OW 247
32796: PUSH
32797: LD_INT 2
32799: EQUAL
32800: AND
32801: PUSH
32802: LD_VAR 0 13
32806: PPUSH
32807: CALL_OW 263
32811: PUSH
32812: LD_INT 1
32814: EQUAL
32815: AND
32816: IFFALSE 32980
// begin if IsDrivenBy ( tmp ) then
32818: LD_VAR 0 13
32822: PPUSH
32823: CALL_OW 311
32827: IFFALSE 32831
// continue ;
32829: GO 32630
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32831: LD_VAR 0 6
32835: PPUSH
32836: LD_INT 3
32838: PUSH
32839: LD_INT 60
32841: PUSH
32842: EMPTY
32843: LIST
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 55
32854: PUSH
32855: EMPTY
32856: LIST
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PPUSH
32866: CALL_OW 72
32870: IFFALSE 32978
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32872: LD_ADDR_VAR 0 18
32876: PUSH
32877: LD_VAR 0 6
32881: PPUSH
32882: LD_INT 3
32884: PUSH
32885: LD_INT 60
32887: PUSH
32888: EMPTY
32889: LIST
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 3
32897: PUSH
32898: LD_INT 55
32900: PUSH
32901: EMPTY
32902: LIST
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PPUSH
32912: CALL_OW 72
32916: PUSH
32917: LD_INT 1
32919: ARRAY
32920: ST_TO_ADDR
// if IsInUnit ( driver ) then
32921: LD_VAR 0 18
32925: PPUSH
32926: CALL_OW 310
32930: IFFALSE 32941
// ComExit ( driver ) ;
32932: LD_VAR 0 18
32936: PPUSH
32937: CALL 58354 0 1
// AddComEnterUnit ( driver , tmp ) ;
32941: LD_VAR 0 18
32945: PPUSH
32946: LD_VAR 0 13
32950: PPUSH
32951: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32955: LD_VAR 0 18
32959: PPUSH
32960: LD_VAR 0 7
32964: PPUSH
32965: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32969: LD_VAR 0 18
32973: PPUSH
32974: CALL_OW 181
// end ; continue ;
32978: GO 32630
// end ; if not cleaners or not tmp in cleaners then
32980: LD_VAR 0 6
32984: NOT
32985: PUSH
32986: LD_VAR 0 13
32990: PUSH
32991: LD_VAR 0 6
32995: IN
32996: NOT
32997: OR
32998: IFFALSE 33305
// begin if dep then
33000: LD_VAR 0 17
33004: IFFALSE 33140
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33006: LD_ADDR_VAR 0 16
33010: PUSH
33011: LD_VAR 0 17
33015: PUSH
33016: LD_INT 1
33018: ARRAY
33019: PPUSH
33020: CALL_OW 250
33024: PPUSH
33025: LD_VAR 0 17
33029: PUSH
33030: LD_INT 1
33032: ARRAY
33033: PPUSH
33034: CALL_OW 254
33038: PPUSH
33039: LD_INT 5
33041: PPUSH
33042: CALL_OW 272
33046: PUSH
33047: LD_VAR 0 17
33051: PUSH
33052: LD_INT 1
33054: ARRAY
33055: PPUSH
33056: CALL_OW 251
33060: PPUSH
33061: LD_VAR 0 17
33065: PUSH
33066: LD_INT 1
33068: ARRAY
33069: PPUSH
33070: CALL_OW 254
33074: PPUSH
33075: LD_INT 5
33077: PPUSH
33078: CALL_OW 273
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33087: LD_VAR 0 16
33091: PUSH
33092: LD_INT 1
33094: ARRAY
33095: PPUSH
33096: LD_VAR 0 16
33100: PUSH
33101: LD_INT 2
33103: ARRAY
33104: PPUSH
33105: CALL_OW 488
33109: IFFALSE 33140
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33111: LD_VAR 0 13
33115: PPUSH
33116: LD_VAR 0 16
33120: PUSH
33121: LD_INT 1
33123: ARRAY
33124: PPUSH
33125: LD_VAR 0 16
33129: PUSH
33130: LD_INT 2
33132: ARRAY
33133: PPUSH
33134: CALL_OW 111
// continue ;
33138: GO 32630
// end ; end ; r := GetDir ( tmp ) ;
33140: LD_ADDR_VAR 0 15
33144: PUSH
33145: LD_VAR 0 13
33149: PPUSH
33150: CALL_OW 254
33154: ST_TO_ADDR
// if r = 5 then
33155: LD_VAR 0 15
33159: PUSH
33160: LD_INT 5
33162: EQUAL
33163: IFFALSE 33173
// r := 0 ;
33165: LD_ADDR_VAR 0 15
33169: PUSH
33170: LD_INT 0
33172: ST_TO_ADDR
// for j = r to 5 do
33173: LD_ADDR_VAR 0 10
33177: PUSH
33178: DOUBLE
33179: LD_VAR 0 15
33183: DEC
33184: ST_TO_ADDR
33185: LD_INT 5
33187: PUSH
33188: FOR_TO
33189: IFFALSE 33303
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33191: LD_ADDR_VAR 0 11
33195: PUSH
33196: LD_VAR 0 13
33200: PPUSH
33201: CALL_OW 250
33205: PPUSH
33206: LD_VAR 0 10
33210: PPUSH
33211: LD_INT 2
33213: PPUSH
33214: CALL_OW 272
33218: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33219: LD_ADDR_VAR 0 12
33223: PUSH
33224: LD_VAR 0 13
33228: PPUSH
33229: CALL_OW 251
33233: PPUSH
33234: LD_VAR 0 10
33238: PPUSH
33239: LD_INT 2
33241: PPUSH
33242: CALL_OW 273
33246: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33247: LD_VAR 0 11
33251: PPUSH
33252: LD_VAR 0 12
33256: PPUSH
33257: CALL_OW 488
33261: PUSH
33262: LD_VAR 0 11
33266: PPUSH
33267: LD_VAR 0 12
33271: PPUSH
33272: CALL_OW 428
33276: NOT
33277: AND
33278: IFFALSE 33301
// begin ComMoveXY ( tmp , _x , _y ) ;
33280: LD_VAR 0 13
33284: PPUSH
33285: LD_VAR 0 11
33289: PPUSH
33290: LD_VAR 0 12
33294: PPUSH
33295: CALL_OW 111
// break ;
33299: GO 33303
// end ; end ;
33301: GO 33188
33303: POP
33304: POP
// end ; end ;
33305: GO 32630
33307: POP
33308: POP
// end ;
33309: LD_VAR 0 8
33313: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33314: LD_INT 0
33316: PPUSH
// result := true ;
33317: LD_ADDR_VAR 0 3
33321: PUSH
33322: LD_INT 1
33324: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33325: LD_VAR 0 2
33329: PUSH
33330: LD_INT 24
33332: DOUBLE
33333: EQUAL
33334: IFTRUE 33344
33336: LD_INT 33
33338: DOUBLE
33339: EQUAL
33340: IFTRUE 33344
33342: GO 33369
33344: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33345: LD_ADDR_VAR 0 3
33349: PUSH
33350: LD_INT 32
33352: PPUSH
33353: LD_VAR 0 1
33357: PPUSH
33358: CALL_OW 321
33362: PUSH
33363: LD_INT 2
33365: EQUAL
33366: ST_TO_ADDR
33367: GO 33685
33369: LD_INT 20
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33402
33377: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_INT 6
33385: PPUSH
33386: LD_VAR 0 1
33390: PPUSH
33391: CALL_OW 321
33395: PUSH
33396: LD_INT 2
33398: EQUAL
33399: ST_TO_ADDR
33400: GO 33685
33402: LD_INT 22
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33416
33408: LD_INT 36
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33416
33414: GO 33441
33416: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33417: LD_ADDR_VAR 0 3
33421: PUSH
33422: LD_INT 15
33424: PPUSH
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 321
33434: PUSH
33435: LD_INT 2
33437: EQUAL
33438: ST_TO_ADDR
33439: GO 33685
33441: LD_INT 30
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33449
33447: GO 33474
33449: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33450: LD_ADDR_VAR 0 3
33454: PUSH
33455: LD_INT 20
33457: PPUSH
33458: LD_VAR 0 1
33462: PPUSH
33463: CALL_OW 321
33467: PUSH
33468: LD_INT 2
33470: EQUAL
33471: ST_TO_ADDR
33472: GO 33685
33474: LD_INT 28
33476: DOUBLE
33477: EQUAL
33478: IFTRUE 33488
33480: LD_INT 21
33482: DOUBLE
33483: EQUAL
33484: IFTRUE 33488
33486: GO 33513
33488: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33489: LD_ADDR_VAR 0 3
33493: PUSH
33494: LD_INT 21
33496: PPUSH
33497: LD_VAR 0 1
33501: PPUSH
33502: CALL_OW 321
33506: PUSH
33507: LD_INT 2
33509: EQUAL
33510: ST_TO_ADDR
33511: GO 33685
33513: LD_INT 16
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33546
33521: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_INT 84
33529: PPUSH
33530: LD_VAR 0 1
33534: PPUSH
33535: CALL_OW 321
33539: PUSH
33540: LD_INT 2
33542: EQUAL
33543: ST_TO_ADDR
33544: GO 33685
33546: LD_INT 19
33548: DOUBLE
33549: EQUAL
33550: IFTRUE 33560
33552: LD_INT 23
33554: DOUBLE
33555: EQUAL
33556: IFTRUE 33560
33558: GO 33585
33560: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33561: LD_ADDR_VAR 0 3
33565: PUSH
33566: LD_INT 83
33568: PPUSH
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 321
33578: PUSH
33579: LD_INT 2
33581: EQUAL
33582: ST_TO_ADDR
33583: GO 33685
33585: LD_INT 17
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33618
33593: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33594: LD_ADDR_VAR 0 3
33598: PUSH
33599: LD_INT 39
33601: PPUSH
33602: LD_VAR 0 1
33606: PPUSH
33607: CALL_OW 321
33611: PUSH
33612: LD_INT 2
33614: EQUAL
33615: ST_TO_ADDR
33616: GO 33685
33618: LD_INT 18
33620: DOUBLE
33621: EQUAL
33622: IFTRUE 33626
33624: GO 33651
33626: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33627: LD_ADDR_VAR 0 3
33631: PUSH
33632: LD_INT 40
33634: PPUSH
33635: LD_VAR 0 1
33639: PPUSH
33640: CALL_OW 321
33644: PUSH
33645: LD_INT 2
33647: EQUAL
33648: ST_TO_ADDR
33649: GO 33685
33651: LD_INT 27
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33684
33659: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: LD_INT 35
33667: PPUSH
33668: LD_VAR 0 1
33672: PPUSH
33673: CALL_OW 321
33677: PUSH
33678: LD_INT 2
33680: EQUAL
33681: ST_TO_ADDR
33682: GO 33685
33684: POP
// end ;
33685: LD_VAR 0 3
33689: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33690: LD_INT 0
33692: PPUSH
33693: PPUSH
33694: PPUSH
33695: PPUSH
33696: PPUSH
33697: PPUSH
33698: PPUSH
33699: PPUSH
33700: PPUSH
33701: PPUSH
33702: PPUSH
// result := false ;
33703: LD_ADDR_VAR 0 6
33707: PUSH
33708: LD_INT 0
33710: ST_TO_ADDR
// if btype = b_depot then
33711: LD_VAR 0 2
33715: PUSH
33716: LD_INT 0
33718: EQUAL
33719: IFFALSE 33731
// begin result := true ;
33721: LD_ADDR_VAR 0 6
33725: PUSH
33726: LD_INT 1
33728: ST_TO_ADDR
// exit ;
33729: GO 34557
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33731: LD_VAR 0 1
33735: NOT
33736: PUSH
33737: LD_VAR 0 1
33741: PPUSH
33742: CALL_OW 266
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: IN
33757: NOT
33758: OR
33759: PUSH
33760: LD_VAR 0 2
33764: NOT
33765: OR
33766: PUSH
33767: LD_VAR 0 5
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: LD_INT 3
33783: PUSH
33784: LD_INT 4
33786: PUSH
33787: LD_INT 5
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: IN
33798: NOT
33799: OR
33800: PUSH
33801: LD_VAR 0 3
33805: PPUSH
33806: LD_VAR 0 4
33810: PPUSH
33811: CALL_OW 488
33815: NOT
33816: OR
33817: IFFALSE 33821
// exit ;
33819: GO 34557
// side := GetSide ( depot ) ;
33821: LD_ADDR_VAR 0 9
33825: PUSH
33826: LD_VAR 0 1
33830: PPUSH
33831: CALL_OW 255
33835: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33836: LD_VAR 0 9
33840: PPUSH
33841: LD_VAR 0 2
33845: PPUSH
33846: CALL 33314 0 2
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 34557
// pom := GetBase ( depot ) ;
33855: LD_ADDR_VAR 0 10
33859: PUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 274
33869: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33870: LD_ADDR_VAR 0 11
33874: PUSH
33875: LD_VAR 0 2
33879: PPUSH
33880: LD_VAR 0 1
33884: PPUSH
33885: CALL_OW 248
33889: PPUSH
33890: CALL_OW 450
33894: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33895: LD_VAR 0 10
33899: PPUSH
33900: LD_INT 1
33902: PPUSH
33903: CALL_OW 275
33907: PUSH
33908: LD_VAR 0 11
33912: PUSH
33913: LD_INT 1
33915: ARRAY
33916: GREATEREQUAL
33917: PUSH
33918: LD_VAR 0 10
33922: PPUSH
33923: LD_INT 2
33925: PPUSH
33926: CALL_OW 275
33930: PUSH
33931: LD_VAR 0 11
33935: PUSH
33936: LD_INT 2
33938: ARRAY
33939: GREATEREQUAL
33940: AND
33941: PUSH
33942: LD_VAR 0 10
33946: PPUSH
33947: LD_INT 3
33949: PPUSH
33950: CALL_OW 275
33954: PUSH
33955: LD_VAR 0 11
33959: PUSH
33960: LD_INT 3
33962: ARRAY
33963: GREATEREQUAL
33964: AND
33965: NOT
33966: IFFALSE 33970
// exit ;
33968: GO 34557
// if GetBType ( depot ) = b_depot then
33970: LD_VAR 0 1
33974: PPUSH
33975: CALL_OW 266
33979: PUSH
33980: LD_INT 0
33982: EQUAL
33983: IFFALSE 33995
// dist := 28 else
33985: LD_ADDR_VAR 0 14
33989: PUSH
33990: LD_INT 28
33992: ST_TO_ADDR
33993: GO 34003
// dist := 36 ;
33995: LD_ADDR_VAR 0 14
33999: PUSH
34000: LD_INT 36
34002: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34003: LD_VAR 0 1
34007: PPUSH
34008: LD_VAR 0 3
34012: PPUSH
34013: LD_VAR 0 4
34017: PPUSH
34018: CALL_OW 297
34022: PUSH
34023: LD_VAR 0 14
34027: GREATER
34028: IFFALSE 34032
// exit ;
34030: GO 34557
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34032: LD_ADDR_VAR 0 12
34036: PUSH
34037: LD_VAR 0 2
34041: PPUSH
34042: LD_VAR 0 3
34046: PPUSH
34047: LD_VAR 0 4
34051: PPUSH
34052: LD_VAR 0 5
34056: PPUSH
34057: LD_VAR 0 1
34061: PPUSH
34062: CALL_OW 248
34066: PPUSH
34067: LD_INT 0
34069: PPUSH
34070: CALL 34562 0 6
34074: ST_TO_ADDR
// if not hexes then
34075: LD_VAR 0 12
34079: NOT
34080: IFFALSE 34084
// exit ;
34082: GO 34557
// hex := GetHexInfo ( x , y ) ;
34084: LD_ADDR_VAR 0 15
34088: PUSH
34089: LD_VAR 0 3
34093: PPUSH
34094: LD_VAR 0 4
34098: PPUSH
34099: CALL_OW 546
34103: ST_TO_ADDR
// if hex [ 1 ] then
34104: LD_VAR 0 15
34108: PUSH
34109: LD_INT 1
34111: ARRAY
34112: IFFALSE 34116
// exit ;
34114: GO 34557
// height := hex [ 2 ] ;
34116: LD_ADDR_VAR 0 13
34120: PUSH
34121: LD_VAR 0 15
34125: PUSH
34126: LD_INT 2
34128: ARRAY
34129: ST_TO_ADDR
// for i = 1 to hexes do
34130: LD_ADDR_VAR 0 7
34134: PUSH
34135: DOUBLE
34136: LD_INT 1
34138: DEC
34139: ST_TO_ADDR
34140: LD_VAR 0 12
34144: PUSH
34145: FOR_TO
34146: IFFALSE 34476
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34148: LD_VAR 0 12
34152: PUSH
34153: LD_VAR 0 7
34157: ARRAY
34158: PUSH
34159: LD_INT 1
34161: ARRAY
34162: PPUSH
34163: LD_VAR 0 12
34167: PUSH
34168: LD_VAR 0 7
34172: ARRAY
34173: PUSH
34174: LD_INT 2
34176: ARRAY
34177: PPUSH
34178: CALL_OW 488
34182: NOT
34183: PUSH
34184: LD_VAR 0 12
34188: PUSH
34189: LD_VAR 0 7
34193: ARRAY
34194: PUSH
34195: LD_INT 1
34197: ARRAY
34198: PPUSH
34199: LD_VAR 0 12
34203: PUSH
34204: LD_VAR 0 7
34208: ARRAY
34209: PUSH
34210: LD_INT 2
34212: ARRAY
34213: PPUSH
34214: CALL_OW 428
34218: PUSH
34219: LD_INT 0
34221: GREATER
34222: OR
34223: PUSH
34224: LD_VAR 0 12
34228: PUSH
34229: LD_VAR 0 7
34233: ARRAY
34234: PUSH
34235: LD_INT 1
34237: ARRAY
34238: PPUSH
34239: LD_VAR 0 12
34243: PUSH
34244: LD_VAR 0 7
34248: ARRAY
34249: PUSH
34250: LD_INT 2
34252: ARRAY
34253: PPUSH
34254: CALL_OW 351
34258: OR
34259: IFFALSE 34265
// exit ;
34261: POP
34262: POP
34263: GO 34557
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34265: LD_ADDR_VAR 0 8
34269: PUSH
34270: LD_VAR 0 12
34274: PUSH
34275: LD_VAR 0 7
34279: ARRAY
34280: PUSH
34281: LD_INT 1
34283: ARRAY
34284: PPUSH
34285: LD_VAR 0 12
34289: PUSH
34290: LD_VAR 0 7
34294: ARRAY
34295: PUSH
34296: LD_INT 2
34298: ARRAY
34299: PPUSH
34300: CALL_OW 546
34304: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34305: LD_VAR 0 8
34309: PUSH
34310: LD_INT 1
34312: ARRAY
34313: PUSH
34314: LD_VAR 0 8
34318: PUSH
34319: LD_INT 2
34321: ARRAY
34322: PUSH
34323: LD_VAR 0 13
34327: PUSH
34328: LD_INT 2
34330: PLUS
34331: GREATER
34332: OR
34333: PUSH
34334: LD_VAR 0 8
34338: PUSH
34339: LD_INT 2
34341: ARRAY
34342: PUSH
34343: LD_VAR 0 13
34347: PUSH
34348: LD_INT 2
34350: MINUS
34351: LESS
34352: OR
34353: PUSH
34354: LD_VAR 0 8
34358: PUSH
34359: LD_INT 3
34361: ARRAY
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: LD_INT 8
34368: PUSH
34369: LD_INT 9
34371: PUSH
34372: LD_INT 10
34374: PUSH
34375: LD_INT 11
34377: PUSH
34378: LD_INT 12
34380: PUSH
34381: LD_INT 13
34383: PUSH
34384: LD_INT 16
34386: PUSH
34387: LD_INT 17
34389: PUSH
34390: LD_INT 18
34392: PUSH
34393: LD_INT 19
34395: PUSH
34396: LD_INT 20
34398: PUSH
34399: LD_INT 21
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: IN
34417: NOT
34418: OR
34419: PUSH
34420: LD_VAR 0 8
34424: PUSH
34425: LD_INT 5
34427: ARRAY
34428: NOT
34429: OR
34430: PUSH
34431: LD_VAR 0 8
34435: PUSH
34436: LD_INT 6
34438: ARRAY
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 7
34448: PUSH
34449: LD_INT 9
34451: PUSH
34452: LD_INT 10
34454: PUSH
34455: LD_INT 11
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: IN
34466: NOT
34467: OR
34468: IFFALSE 34474
// exit ;
34470: POP
34471: POP
34472: GO 34557
// end ;
34474: GO 34145
34476: POP
34477: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34478: LD_VAR 0 9
34482: PPUSH
34483: LD_VAR 0 3
34487: PPUSH
34488: LD_VAR 0 4
34492: PPUSH
34493: LD_INT 20
34495: PPUSH
34496: CALL 26480 0 4
34500: PUSH
34501: LD_INT 4
34503: ARRAY
34504: IFFALSE 34508
// exit ;
34506: GO 34557
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34508: LD_VAR 0 2
34512: PUSH
34513: LD_INT 29
34515: PUSH
34516: LD_INT 30
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: IN
34523: PUSH
34524: LD_VAR 0 3
34528: PPUSH
34529: LD_VAR 0 4
34533: PPUSH
34534: LD_VAR 0 9
34538: PPUSH
34539: CALL_OW 440
34543: NOT
34544: AND
34545: IFFALSE 34549
// exit ;
34547: GO 34557
// result := true ;
34549: LD_ADDR_VAR 0 6
34553: PUSH
34554: LD_INT 1
34556: ST_TO_ADDR
// end ;
34557: LD_VAR 0 6
34561: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34562: LD_INT 0
34564: PPUSH
34565: PPUSH
34566: PPUSH
34567: PPUSH
34568: PPUSH
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
34577: PPUSH
34578: PPUSH
34579: PPUSH
34580: PPUSH
34581: PPUSH
34582: PPUSH
34583: PPUSH
34584: PPUSH
34585: PPUSH
34586: PPUSH
34587: PPUSH
34588: PPUSH
34589: PPUSH
34590: PPUSH
34591: PPUSH
34592: PPUSH
34593: PPUSH
34594: PPUSH
34595: PPUSH
34596: PPUSH
34597: PPUSH
34598: PPUSH
34599: PPUSH
34600: PPUSH
34601: PPUSH
34602: PPUSH
34603: PPUSH
34604: PPUSH
34605: PPUSH
34606: PPUSH
34607: PPUSH
34608: PPUSH
34609: PPUSH
34610: PPUSH
34611: PPUSH
34612: PPUSH
34613: PPUSH
34614: PPUSH
34615: PPUSH
34616: PPUSH
34617: PPUSH
34618: PPUSH
34619: PPUSH
34620: PPUSH
34621: PPUSH
// result = [ ] ;
34622: LD_ADDR_VAR 0 7
34626: PUSH
34627: EMPTY
34628: ST_TO_ADDR
// temp_list = [ ] ;
34629: LD_ADDR_VAR 0 9
34633: PUSH
34634: EMPTY
34635: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34636: LD_VAR 0 4
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: LD_INT 4
34655: PUSH
34656: LD_INT 5
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: IN
34667: NOT
34668: PUSH
34669: LD_VAR 0 1
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: IN
34684: PUSH
34685: LD_VAR 0 5
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 3
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: IN
34704: NOT
34705: AND
34706: OR
34707: IFFALSE 34711
// exit ;
34709: GO 53102
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34711: LD_VAR 0 1
34715: PUSH
34716: LD_INT 6
34718: PUSH
34719: LD_INT 7
34721: PUSH
34722: LD_INT 8
34724: PUSH
34725: LD_INT 13
34727: PUSH
34728: LD_INT 12
34730: PUSH
34731: LD_INT 15
34733: PUSH
34734: LD_INT 11
34736: PUSH
34737: LD_INT 14
34739: PUSH
34740: LD_INT 10
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: IN
34754: IFFALSE 34764
// btype = b_lab ;
34756: LD_ADDR_VAR 0 1
34760: PUSH
34761: LD_INT 6
34763: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34764: LD_VAR 0 6
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: LIST
34782: IN
34783: NOT
34784: PUSH
34785: LD_VAR 0 1
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 3
34801: PUSH
34802: LD_INT 6
34804: PUSH
34805: LD_INT 36
34807: PUSH
34808: LD_INT 4
34810: PUSH
34811: LD_INT 5
34813: PUSH
34814: LD_INT 31
34816: PUSH
34817: LD_INT 32
34819: PUSH
34820: LD_INT 33
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: IN
34836: NOT
34837: PUSH
34838: LD_VAR 0 6
34842: PUSH
34843: LD_INT 1
34845: EQUAL
34846: AND
34847: OR
34848: PUSH
34849: LD_VAR 0 1
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: IN
34864: NOT
34865: PUSH
34866: LD_VAR 0 6
34870: PUSH
34871: LD_INT 2
34873: EQUAL
34874: AND
34875: OR
34876: IFFALSE 34886
// mode = 0 ;
34878: LD_ADDR_VAR 0 6
34882: PUSH
34883: LD_INT 0
34885: ST_TO_ADDR
// case mode of 0 :
34886: LD_VAR 0 6
34890: PUSH
34891: LD_INT 0
34893: DOUBLE
34894: EQUAL
34895: IFTRUE 34899
34897: GO 46352
34899: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34900: LD_ADDR_VAR 0 11
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: LD_INT 1
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 2
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: LD_INT 2
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: LD_INT 3
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 3
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35093: LD_ADDR_VAR 0 12
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 2
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: NEG
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: LD_INT 1
35231: NEG
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 2
35239: NEG
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 3
35250: NEG
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 3
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35289: LD_ADDR_VAR 0 13
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 2
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 2
35412: NEG
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: NEG
35425: PUSH
35426: LD_INT 2
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: LD_INT 3
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 3
35448: NEG
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 3
35460: NEG
35461: PUSH
35462: LD_INT 3
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35488: LD_ADDR_VAR 0 14
35492: PUSH
35493: LD_INT 0
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: NEG
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 2
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: LD_INT 3
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: LD_INT 3
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35684: LD_ADDR_VAR 0 15
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 3
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35877: LD_ADDR_VAR 0 16
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 2
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: NEG
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 3
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 3
36034: PUSH
36035: LD_INT 3
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: LD_INT 3
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36070: LD_ADDR_VAR 0 17
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: NEG
36152: PUSH
36153: LD_INT 2
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 2
36166: NEG
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: LD_INT 2
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: LD_INT 2
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36300: LD_ADDR_VAR 0 18
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 2
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36530: LD_ADDR_VAR 0 19
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: LD_INT 1
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36760: LD_ADDR_VAR 0 20
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36990: LD_ADDR_VAR 0 21
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 2
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37220: LD_ADDR_VAR 0 22
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: LD_INT 2
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: LD_INT 2
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 2
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 2
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 2
37396: NEG
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: NEG
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 2
37419: NEG
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37450: LD_ADDR_VAR 0 23
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 2
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 2
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: PUSH
37586: LD_INT 2
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 2
37626: NEG
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 2
37637: NEG
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 2
37649: NEG
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: LD_INT 3
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: LD_INT 3
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37730: LD_ADDR_VAR 0 24
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 2
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 2
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 3
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38006: LD_ADDR_VAR 0 25
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 2
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 2
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: PUSH
38142: LD_INT 2
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: LD_INT 2
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 2
38182: NEG
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 2
38205: NEG
38206: PUSH
38207: LD_INT 2
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 3
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 3
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38280: LD_ADDR_VAR 0 26
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 2
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: LD_INT 2
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 3
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 3
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: NEG
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38556: LD_ADDR_VAR 0 27
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 2
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 2
38743: NEG
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 3
38789: NEG
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 3
38801: NEG
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38836: LD_ADDR_VAR 0 28
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 2
39035: NEG
39036: PUSH
39037: LD_INT 2
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: LD_INT 3
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: LD_INT 3
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 3
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 3
39083: NEG
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39118: LD_ADDR_VAR 0 29
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: LD_INT 1
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 2
39284: NEG
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: LD_INT 3
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 3
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 3
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39397: LD_ADDR_VAR 0 30
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 2
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: NEG
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 3
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 3
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39675: LD_ADDR_VAR 0 31
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 2
39864: NEG
39865: PUSH
39866: LD_INT 3
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 2
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 3
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 3
39918: NEG
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39953: LD_ADDR_VAR 0 32
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 2
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 3
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 3
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40231: LD_ADDR_VAR 0 33
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 1
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: NEG
40422: PUSH
40423: LD_INT 3
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 3
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 3
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 3
40475: NEG
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40510: LD_ADDR_VAR 0 34
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 2
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: LD_INT 2
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: LD_INT 2
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: LD_INT 3
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 3
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: LD_INT 3
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 3
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40790: LD_ADDR_VAR 0 35
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40902: LD_ADDR_VAR 0 36
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41014: LD_ADDR_VAR 0 37
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41126: LD_ADDR_VAR 0 38
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41238: LD_ADDR_VAR 0 39
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41350: LD_ADDR_VAR 0 40
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41462: LD_ADDR_VAR 0 41
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 3
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 3
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 3
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 3
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 3
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 3
41771: NEG
41772: PUSH
41773: LD_INT 3
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41812: LD_ADDR_VAR 0 42
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: NEG
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 3
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 3
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 3
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 3
42109: NEG
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 3
42121: NEG
42122: PUSH
42123: LD_INT 3
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42162: LD_ADDR_VAR 0 43
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 3
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_INT 3
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 3
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42510: LD_ADDR_VAR 0 44
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: LD_INT 2
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: LD_INT 3
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 3
42784: NEG
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 3
42795: NEG
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 3
42807: NEG
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: LD_INT 3
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42860: LD_ADDR_VAR 0 45
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 1
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: LD_INT 3
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 3
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 3
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 3
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: LD_INT 3
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 3
43157: NEG
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 3
43169: NEG
43170: PUSH
43171: LD_INT 3
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43210: LD_ADDR_VAR 0 46
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 3
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43558: LD_ADDR_VAR 0 47
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43709: LD_ADDR_VAR 0 48
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: LD_INT 2
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43856: LD_ADDR_VAR 0 49
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44000: LD_ADDR_VAR 0 50
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44144: LD_ADDR_VAR 0 51
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44291: LD_ADDR_VAR 0 52
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44442: LD_ADDR_VAR 0 53
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44672: LD_ADDR_VAR 0 54
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: LD_INT 2
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 2
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: NEG
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44902: LD_ADDR_VAR 0 55
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 2
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 2
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45132: LD_ADDR_VAR 0 56
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45362: LD_ADDR_VAR 0 57
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 2
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 2
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 2
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45592: LD_ADDR_VAR 0 58
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 2
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45822: LD_ADDR_VAR 0 59
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45910: LD_ADDR_VAR 0 60
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45998: LD_ADDR_VAR 0 61
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46086: LD_ADDR_VAR 0 62
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46174: LD_ADDR_VAR 0 63
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46262: LD_ADDR_VAR 0 64
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: ST_TO_ADDR
// end ; 1 :
46350: GO 52247
46352: LD_INT 1
46354: DOUBLE
46355: EQUAL
46356: IFTRUE 46360
46358: GO 48983
46360: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46361: LD_ADDR_VAR 0 11
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 3
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46405: LD_ADDR_VAR 0 12
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: LIST
46445: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46446: LD_ADDR_VAR 0 13
46450: PUSH
46451: LD_INT 3
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: LD_INT 3
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46486: LD_ADDR_VAR 0 14
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46527: LD_ADDR_VAR 0 15
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 3
46545: NEG
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46571: LD_ADDR_VAR 0 16
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: LD_INT 3
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46617: LD_ADDR_VAR 0 17
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 2
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46661: LD_ADDR_VAR 0 18
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 1
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46702: LD_ADDR_VAR 0 19
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46742: LD_ADDR_VAR 0 20
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 3
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46783: LD_ADDR_VAR 0 21
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: NEG
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 3
46812: NEG
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46827: LD_ADDR_VAR 0 22
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 3
46846: NEG
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: LD_INT 3
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46873: LD_ADDR_VAR 0 23
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 4
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46917: LD_ADDR_VAR 0 24
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 3
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 4
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46958: LD_ADDR_VAR 0 25
46962: PUSH
46963: LD_INT 3
46965: PUSH
46966: LD_INT 3
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 4
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: PUSH
46986: LD_INT 4
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46998: LD_ADDR_VAR 0 26
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 4
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 3
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47039: LD_ADDR_VAR 0 27
47043: PUSH
47044: LD_INT 3
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 3
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 4
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47083: LD_ADDR_VAR 0 28
47087: PUSH
47088: LD_INT 3
47090: NEG
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: NEG
47103: PUSH
47104: LD_INT 4
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 4
47114: NEG
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47129: LD_ADDR_VAR 0 29
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 3
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: LD_INT 4
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 4
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 3
47196: NEG
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 5
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 5
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 4
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 6
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 6
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: LD_INT 5
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47284: LD_ADDR_VAR 0 30
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 4
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 4
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 4
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 5
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 5
47384: PUSH
47385: LD_INT 1
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 6
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 6
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47427: LD_ADDR_VAR 0 31
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 4
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 4
47474: PUSH
47475: LD_INT 4
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 4
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 5
47494: PUSH
47495: LD_INT 4
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 5
47504: PUSH
47505: LD_INT 5
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 4
47514: PUSH
47515: LD_INT 5
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 6
47524: PUSH
47525: LD_INT 5
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 6
47534: PUSH
47535: LD_INT 6
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 5
47544: PUSH
47545: LD_INT 6
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47566: LD_ADDR_VAR 0 32
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 4
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 4
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 3
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 5
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 5
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 4
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: LD_INT 6
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 6
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: NEG
47687: PUSH
47688: LD_INT 5
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47709: LD_ADDR_VAR 0 33
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 3
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 4
47761: NEG
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 4
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 4
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 5
47795: NEG
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 5
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 5
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 6
47829: NEG
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 6
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47864: LD_ADDR_VAR 0 34
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: LD_INT 3
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 3
47883: NEG
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: NEG
47908: PUSH
47909: LD_INT 4
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 4
47919: NEG
47920: PUSH
47921: LD_INT 3
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 4
47931: NEG
47932: PUSH
47933: LD_INT 4
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 4
47943: NEG
47944: PUSH
47945: LD_INT 5
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 5
47955: NEG
47956: PUSH
47957: LD_INT 4
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 5
47967: NEG
47968: PUSH
47969: LD_INT 5
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 5
47979: NEG
47980: PUSH
47981: LD_INT 6
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 6
47991: NEG
47992: PUSH
47993: LD_INT 5
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 6
48003: NEG
48004: PUSH
48005: LD_INT 6
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48027: LD_ADDR_VAR 0 41
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 3
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48071: LD_ADDR_VAR 0 42
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 3
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48112: LD_ADDR_VAR 0 43
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48152: LD_ADDR_VAR 0 44
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 2
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: LIST
48192: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48193: LD_ADDR_VAR 0 45
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48237: LD_ADDR_VAR 0 46
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 3
48268: NEG
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48283: LD_ADDR_VAR 0 47
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 3
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48316: LD_ADDR_VAR 0 48
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48347: LD_ADDR_VAR 0 49
48351: PUSH
48352: LD_INT 3
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48376: LD_ADDR_VAR 0 50
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48405: LD_ADDR_VAR 0 51
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48436: LD_ADDR_VAR 0 52
48440: PUSH
48441: LD_INT 3
48443: NEG
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48469: LD_ADDR_VAR 0 53
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: LIST
48512: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48513: LD_ADDR_VAR 0 54
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 3
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: LIST
48553: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48554: LD_ADDR_VAR 0 55
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 3
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48594: LD_ADDR_VAR 0 56
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 3
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: LD_INT 3
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: LIST
48634: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48635: LD_ADDR_VAR 0 57
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 3
48653: NEG
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: LD_INT 1
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48679: LD_ADDR_VAR 0 58
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 3
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 3
48698: NEG
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 3
48710: NEG
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: LIST
48724: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48725: LD_ADDR_VAR 0 59
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48769: LD_ADDR_VAR 0 60
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: LIST
48809: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48810: LD_ADDR_VAR 0 61
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48850: LD_ADDR_VAR 0 62
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48891: LD_ADDR_VAR 0 63
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48935: LD_ADDR_VAR 0 64
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 2
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: ST_TO_ADDR
// end ; 2 :
48981: GO 52247
48983: LD_INT 2
48985: DOUBLE
48986: EQUAL
48987: IFTRUE 48991
48989: GO 52246
48991: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48992: LD_ADDR_VAR 0 29
48996: PUSH
48997: LD_INT 4
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 4
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 5
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 5
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 4
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 3
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 5
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 3
49092: PUSH
49093: LD_INT 3
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 3
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 4
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 4
49122: PUSH
49123: LD_INT 4
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 3
49132: PUSH
49133: LD_INT 4
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 3
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 4
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 4
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 4
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 4
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 5
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 5
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 4
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 5
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 3
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 4
49331: NEG
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 4
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 4
49354: NEG
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 2
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 4
49377: NEG
49378: PUSH
49379: LD_INT 4
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 4
49389: NEG
49390: PUSH
49391: LD_INT 5
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: LD_INT 4
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 3
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 4
49425: NEG
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 5
49437: NEG
49438: PUSH
49439: LD_INT 4
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 5
49449: NEG
49450: PUSH
49451: LD_INT 5
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: LD_INT 5
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 5
49473: NEG
49474: PUSH
49475: LD_INT 3
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49530: LD_ADDR_VAR 0 30
49534: PUSH
49535: LD_INT 4
49537: PUSH
49538: LD_INT 4
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 4
49547: PUSH
49548: LD_INT 3
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 5
49557: PUSH
49558: LD_INT 4
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 5
49567: PUSH
49568: LD_INT 5
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 4
49577: PUSH
49578: LD_INT 5
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 3
49587: PUSH
49588: LD_INT 4
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 3
49597: PUSH
49598: LD_INT 3
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 5
49607: PUSH
49608: LD_INT 3
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 3
49617: PUSH
49618: LD_INT 5
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 3
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: LD_INT 3
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 4
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 4
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: LD_INT 4
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 4
49720: NEG
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 4
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 4
49765: NEG
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 5
49776: NEG
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 5
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 5
49799: NEG
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 3
49811: NEG
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 3
49822: NEG
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 3
49834: NEG
49835: PUSH
49836: LD_INT 4
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: LD_INT 3
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 3
49870: NEG
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 4
49882: NEG
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 4
49894: NEG
49895: PUSH
49896: LD_INT 4
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 4
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 4
49918: NEG
49919: PUSH
49920: LD_INT 2
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 4
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 5
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 4
49955: NEG
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 3
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 3
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 4
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 5
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 3
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 5
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50077: LD_ADDR_VAR 0 31
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 4
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 4
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 5
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: LD_INT 5
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 1
50134: NEG
50135: PUSH
50136: LD_INT 4
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: LD_INT 5
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: LD_INT 0
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 3
50188: NEG
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: NEG
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 4
50233: NEG
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 4
50244: NEG
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 4
50256: NEG
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: NEG
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 4
50279: NEG
50280: PUSH
50281: LD_INT 4
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 4
50291: NEG
50292: PUSH
50293: LD_INT 5
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: NEG
50304: PUSH
50305: LD_INT 4
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 4
50327: NEG
50328: PUSH
50329: LD_INT 3
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 5
50339: NEG
50340: PUSH
50341: LD_INT 4
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 5
50351: NEG
50352: PUSH
50353: LD_INT 5
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: LD_INT 5
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 5
50375: NEG
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 4
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: LD_INT 3
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 4
50458: NEG
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 4
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 4
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 4
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 5
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 5
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 4
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 3
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 5
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50627: LD_ADDR_VAR 0 32
50631: PUSH
50632: LD_INT 4
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 4
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 3
50657: NEG
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 4
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 5
50690: NEG
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 5
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 5
50713: NEG
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: NEG
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: LD_INT 3
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: NEG
50749: PUSH
50750: LD_INT 4
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 4
50796: NEG
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 4
50808: NEG
50809: PUSH
50810: LD_INT 4
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 4
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 4
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 4
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: LD_INT 5
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 4
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 3
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 4
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: LD_INT 5
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 5
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 4
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 4
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 4
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 4
51039: PUSH
51040: LD_INT 4
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 4
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 5
51059: PUSH
51060: LD_INT 4
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 5
51069: PUSH
51070: LD_INT 5
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 4
51079: PUSH
51080: LD_INT 5
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: PUSH
51090: LD_INT 4
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 3
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 5
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: LD_INT 5
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51174: LD_ADDR_VAR 0 33
51178: PUSH
51179: LD_INT 4
51181: NEG
51182: PUSH
51183: LD_INT 4
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: LD_INT 5
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 3
51205: NEG
51206: PUSH
51207: LD_INT 4
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 4
51229: NEG
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 5
51241: NEG
51242: PUSH
51243: LD_INT 4
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 5
51253: NEG
51254: PUSH
51255: LD_INT 5
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 3
51265: NEG
51266: PUSH
51267: LD_INT 5
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 5
51277: NEG
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 4
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 3
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: LD_INT 4
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: LD_INT 4
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 4
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 4
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 5
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 5
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 4
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 3
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 5
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 3
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 4
51504: PUSH
51505: LD_INT 3
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 4
51514: PUSH
51515: LD_INT 4
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: PUSH
51525: LD_INT 4
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 4
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: LD_INT 4
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 4
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 3
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 4
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 5
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: LD_INT 5
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 4
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 5
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: LD_INT 3
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51712: LD_ADDR_VAR 0 34
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 4
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 5
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 4
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 3
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 4
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 5
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 2
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: LD_INT 5
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 4
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 4
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 4
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 4
51914: PUSH
51915: LD_INT 4
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 4
51924: PUSH
51925: LD_INT 3
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 5
51934: PUSH
51935: LD_INT 4
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 5
51944: PUSH
51945: LD_INT 5
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 4
51954: PUSH
51955: LD_INT 5
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: LD_INT 4
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 5
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 5
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 4
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 4
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 4
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 4
52097: NEG
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 4
52108: NEG
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 4
52142: NEG
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 5
52153: NEG
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 5
52164: NEG
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 5
52176: NEG
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 3
52188: NEG
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: ST_TO_ADDR
// end ; end ;
52244: GO 52247
52246: POP
// case btype of b_depot , b_warehouse :
52247: LD_VAR 0 1
52251: PUSH
52252: LD_INT 0
52254: DOUBLE
52255: EQUAL
52256: IFTRUE 52266
52258: LD_INT 1
52260: DOUBLE
52261: EQUAL
52262: IFTRUE 52266
52264: GO 52467
52266: POP
// case nation of nation_american :
52267: LD_VAR 0 5
52271: PUSH
52272: LD_INT 1
52274: DOUBLE
52275: EQUAL
52276: IFTRUE 52280
52278: GO 52336
52280: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52281: LD_ADDR_VAR 0 9
52285: PUSH
52286: LD_VAR 0 11
52290: PUSH
52291: LD_VAR 0 12
52295: PUSH
52296: LD_VAR 0 13
52300: PUSH
52301: LD_VAR 0 14
52305: PUSH
52306: LD_VAR 0 15
52310: PUSH
52311: LD_VAR 0 16
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: PUSH
52324: LD_VAR 0 4
52328: PUSH
52329: LD_INT 1
52331: PLUS
52332: ARRAY
52333: ST_TO_ADDR
52334: GO 52465
52336: LD_INT 2
52338: DOUBLE
52339: EQUAL
52340: IFTRUE 52344
52342: GO 52400
52344: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52345: LD_ADDR_VAR 0 9
52349: PUSH
52350: LD_VAR 0 17
52354: PUSH
52355: LD_VAR 0 18
52359: PUSH
52360: LD_VAR 0 19
52364: PUSH
52365: LD_VAR 0 20
52369: PUSH
52370: LD_VAR 0 21
52374: PUSH
52375: LD_VAR 0 22
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: PUSH
52388: LD_VAR 0 4
52392: PUSH
52393: LD_INT 1
52395: PLUS
52396: ARRAY
52397: ST_TO_ADDR
52398: GO 52465
52400: LD_INT 3
52402: DOUBLE
52403: EQUAL
52404: IFTRUE 52408
52406: GO 52464
52408: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52409: LD_ADDR_VAR 0 9
52413: PUSH
52414: LD_VAR 0 23
52418: PUSH
52419: LD_VAR 0 24
52423: PUSH
52424: LD_VAR 0 25
52428: PUSH
52429: LD_VAR 0 26
52433: PUSH
52434: LD_VAR 0 27
52438: PUSH
52439: LD_VAR 0 28
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: PUSH
52452: LD_VAR 0 4
52456: PUSH
52457: LD_INT 1
52459: PLUS
52460: ARRAY
52461: ST_TO_ADDR
52462: GO 52465
52464: POP
52465: GO 53020
52467: LD_INT 2
52469: DOUBLE
52470: EQUAL
52471: IFTRUE 52481
52473: LD_INT 3
52475: DOUBLE
52476: EQUAL
52477: IFTRUE 52481
52479: GO 52537
52481: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52482: LD_ADDR_VAR 0 9
52486: PUSH
52487: LD_VAR 0 29
52491: PUSH
52492: LD_VAR 0 30
52496: PUSH
52497: LD_VAR 0 31
52501: PUSH
52502: LD_VAR 0 32
52506: PUSH
52507: LD_VAR 0 33
52511: PUSH
52512: LD_VAR 0 34
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: PUSH
52525: LD_VAR 0 4
52529: PUSH
52530: LD_INT 1
52532: PLUS
52533: ARRAY
52534: ST_TO_ADDR
52535: GO 53020
52537: LD_INT 16
52539: DOUBLE
52540: EQUAL
52541: IFTRUE 52599
52543: LD_INT 17
52545: DOUBLE
52546: EQUAL
52547: IFTRUE 52599
52549: LD_INT 18
52551: DOUBLE
52552: EQUAL
52553: IFTRUE 52599
52555: LD_INT 19
52557: DOUBLE
52558: EQUAL
52559: IFTRUE 52599
52561: LD_INT 22
52563: DOUBLE
52564: EQUAL
52565: IFTRUE 52599
52567: LD_INT 20
52569: DOUBLE
52570: EQUAL
52571: IFTRUE 52599
52573: LD_INT 21
52575: DOUBLE
52576: EQUAL
52577: IFTRUE 52599
52579: LD_INT 23
52581: DOUBLE
52582: EQUAL
52583: IFTRUE 52599
52585: LD_INT 24
52587: DOUBLE
52588: EQUAL
52589: IFTRUE 52599
52591: LD_INT 25
52593: DOUBLE
52594: EQUAL
52595: IFTRUE 52599
52597: GO 52655
52599: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52600: LD_ADDR_VAR 0 9
52604: PUSH
52605: LD_VAR 0 35
52609: PUSH
52610: LD_VAR 0 36
52614: PUSH
52615: LD_VAR 0 37
52619: PUSH
52620: LD_VAR 0 38
52624: PUSH
52625: LD_VAR 0 39
52629: PUSH
52630: LD_VAR 0 40
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: PUSH
52643: LD_VAR 0 4
52647: PUSH
52648: LD_INT 1
52650: PLUS
52651: ARRAY
52652: ST_TO_ADDR
52653: GO 53020
52655: LD_INT 6
52657: DOUBLE
52658: EQUAL
52659: IFTRUE 52711
52661: LD_INT 7
52663: DOUBLE
52664: EQUAL
52665: IFTRUE 52711
52667: LD_INT 8
52669: DOUBLE
52670: EQUAL
52671: IFTRUE 52711
52673: LD_INT 13
52675: DOUBLE
52676: EQUAL
52677: IFTRUE 52711
52679: LD_INT 12
52681: DOUBLE
52682: EQUAL
52683: IFTRUE 52711
52685: LD_INT 15
52687: DOUBLE
52688: EQUAL
52689: IFTRUE 52711
52691: LD_INT 11
52693: DOUBLE
52694: EQUAL
52695: IFTRUE 52711
52697: LD_INT 14
52699: DOUBLE
52700: EQUAL
52701: IFTRUE 52711
52703: LD_INT 10
52705: DOUBLE
52706: EQUAL
52707: IFTRUE 52711
52709: GO 52767
52711: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52712: LD_ADDR_VAR 0 9
52716: PUSH
52717: LD_VAR 0 41
52721: PUSH
52722: LD_VAR 0 42
52726: PUSH
52727: LD_VAR 0 43
52731: PUSH
52732: LD_VAR 0 44
52736: PUSH
52737: LD_VAR 0 45
52741: PUSH
52742: LD_VAR 0 46
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: PUSH
52755: LD_VAR 0 4
52759: PUSH
52760: LD_INT 1
52762: PLUS
52763: ARRAY
52764: ST_TO_ADDR
52765: GO 53020
52767: LD_INT 36
52769: DOUBLE
52770: EQUAL
52771: IFTRUE 52775
52773: GO 52831
52775: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52776: LD_ADDR_VAR 0 9
52780: PUSH
52781: LD_VAR 0 47
52785: PUSH
52786: LD_VAR 0 48
52790: PUSH
52791: LD_VAR 0 49
52795: PUSH
52796: LD_VAR 0 50
52800: PUSH
52801: LD_VAR 0 51
52805: PUSH
52806: LD_VAR 0 52
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: PUSH
52819: LD_VAR 0 4
52823: PUSH
52824: LD_INT 1
52826: PLUS
52827: ARRAY
52828: ST_TO_ADDR
52829: GO 53020
52831: LD_INT 4
52833: DOUBLE
52834: EQUAL
52835: IFTRUE 52857
52837: LD_INT 5
52839: DOUBLE
52840: EQUAL
52841: IFTRUE 52857
52843: LD_INT 34
52845: DOUBLE
52846: EQUAL
52847: IFTRUE 52857
52849: LD_INT 37
52851: DOUBLE
52852: EQUAL
52853: IFTRUE 52857
52855: GO 52913
52857: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52858: LD_ADDR_VAR 0 9
52862: PUSH
52863: LD_VAR 0 53
52867: PUSH
52868: LD_VAR 0 54
52872: PUSH
52873: LD_VAR 0 55
52877: PUSH
52878: LD_VAR 0 56
52882: PUSH
52883: LD_VAR 0 57
52887: PUSH
52888: LD_VAR 0 58
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: PUSH
52901: LD_VAR 0 4
52905: PUSH
52906: LD_INT 1
52908: PLUS
52909: ARRAY
52910: ST_TO_ADDR
52911: GO 53020
52913: LD_INT 31
52915: DOUBLE
52916: EQUAL
52917: IFTRUE 52963
52919: LD_INT 32
52921: DOUBLE
52922: EQUAL
52923: IFTRUE 52963
52925: LD_INT 33
52927: DOUBLE
52928: EQUAL
52929: IFTRUE 52963
52931: LD_INT 27
52933: DOUBLE
52934: EQUAL
52935: IFTRUE 52963
52937: LD_INT 26
52939: DOUBLE
52940: EQUAL
52941: IFTRUE 52963
52943: LD_INT 28
52945: DOUBLE
52946: EQUAL
52947: IFTRUE 52963
52949: LD_INT 29
52951: DOUBLE
52952: EQUAL
52953: IFTRUE 52963
52955: LD_INT 30
52957: DOUBLE
52958: EQUAL
52959: IFTRUE 52963
52961: GO 53019
52963: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52964: LD_ADDR_VAR 0 9
52968: PUSH
52969: LD_VAR 0 59
52973: PUSH
52974: LD_VAR 0 60
52978: PUSH
52979: LD_VAR 0 61
52983: PUSH
52984: LD_VAR 0 62
52988: PUSH
52989: LD_VAR 0 63
52993: PUSH
52994: LD_VAR 0 64
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: PUSH
53007: LD_VAR 0 4
53011: PUSH
53012: LD_INT 1
53014: PLUS
53015: ARRAY
53016: ST_TO_ADDR
53017: GO 53020
53019: POP
// temp_list2 = [ ] ;
53020: LD_ADDR_VAR 0 10
53024: PUSH
53025: EMPTY
53026: ST_TO_ADDR
// for i in temp_list do
53027: LD_ADDR_VAR 0 8
53031: PUSH
53032: LD_VAR 0 9
53036: PUSH
53037: FOR_IN
53038: IFFALSE 53090
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53040: LD_ADDR_VAR 0 10
53044: PUSH
53045: LD_VAR 0 10
53049: PUSH
53050: LD_VAR 0 8
53054: PUSH
53055: LD_INT 1
53057: ARRAY
53058: PUSH
53059: LD_VAR 0 2
53063: PLUS
53064: PUSH
53065: LD_VAR 0 8
53069: PUSH
53070: LD_INT 2
53072: ARRAY
53073: PUSH
53074: LD_VAR 0 3
53078: PLUS
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: EMPTY
53085: LIST
53086: ADD
53087: ST_TO_ADDR
53088: GO 53037
53090: POP
53091: POP
// result = temp_list2 ;
53092: LD_ADDR_VAR 0 7
53096: PUSH
53097: LD_VAR 0 10
53101: ST_TO_ADDR
// end ;
53102: LD_VAR 0 7
53106: RET
// export function EnemyInRange ( unit , dist ) ; begin
53107: LD_INT 0
53109: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53110: LD_ADDR_VAR 0 3
53114: PUSH
53115: LD_VAR 0 1
53119: PPUSH
53120: CALL_OW 255
53124: PPUSH
53125: LD_VAR 0 1
53129: PPUSH
53130: CALL_OW 250
53134: PPUSH
53135: LD_VAR 0 1
53139: PPUSH
53140: CALL_OW 251
53144: PPUSH
53145: LD_VAR 0 2
53149: PPUSH
53150: CALL 26480 0 4
53154: PUSH
53155: LD_INT 4
53157: ARRAY
53158: ST_TO_ADDR
// end ;
53159: LD_VAR 0 3
53163: RET
// export function PlayerSeeMe ( unit ) ; begin
53164: LD_INT 0
53166: PPUSH
// result := See ( your_side , unit ) ;
53167: LD_ADDR_VAR 0 2
53171: PUSH
53172: LD_OWVAR 2
53176: PPUSH
53177: LD_VAR 0 1
53181: PPUSH
53182: CALL_OW 292
53186: ST_TO_ADDR
// end ;
53187: LD_VAR 0 2
53191: RET
// export function ReverseDir ( unit ) ; begin
53192: LD_INT 0
53194: PPUSH
// if not unit then
53195: LD_VAR 0 1
53199: NOT
53200: IFFALSE 53204
// exit ;
53202: GO 53227
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53204: LD_ADDR_VAR 0 2
53208: PUSH
53209: LD_VAR 0 1
53213: PPUSH
53214: CALL_OW 254
53218: PUSH
53219: LD_INT 3
53221: PLUS
53222: PUSH
53223: LD_INT 6
53225: MOD
53226: ST_TO_ADDR
// end ;
53227: LD_VAR 0 2
53231: RET
// export function ReverseArray ( array ) ; var i ; begin
53232: LD_INT 0
53234: PPUSH
53235: PPUSH
// if not array then
53236: LD_VAR 0 1
53240: NOT
53241: IFFALSE 53245
// exit ;
53243: GO 53300
// result := [ ] ;
53245: LD_ADDR_VAR 0 2
53249: PUSH
53250: EMPTY
53251: ST_TO_ADDR
// for i := array downto 1 do
53252: LD_ADDR_VAR 0 3
53256: PUSH
53257: DOUBLE
53258: LD_VAR 0 1
53262: INC
53263: ST_TO_ADDR
53264: LD_INT 1
53266: PUSH
53267: FOR_DOWNTO
53268: IFFALSE 53298
// result := Join ( result , array [ i ] ) ;
53270: LD_ADDR_VAR 0 2
53274: PUSH
53275: LD_VAR 0 2
53279: PPUSH
53280: LD_VAR 0 1
53284: PUSH
53285: LD_VAR 0 3
53289: ARRAY
53290: PPUSH
53291: CALL 57956 0 2
53295: ST_TO_ADDR
53296: GO 53267
53298: POP
53299: POP
// end ;
53300: LD_VAR 0 2
53304: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53305: LD_INT 0
53307: PPUSH
53308: PPUSH
53309: PPUSH
53310: PPUSH
53311: PPUSH
53312: PPUSH
// if not unit or not hexes then
53313: LD_VAR 0 1
53317: NOT
53318: PUSH
53319: LD_VAR 0 2
53323: NOT
53324: OR
53325: IFFALSE 53329
// exit ;
53327: GO 53452
// dist := 9999 ;
53329: LD_ADDR_VAR 0 5
53333: PUSH
53334: LD_INT 9999
53336: ST_TO_ADDR
// for i = 1 to hexes do
53337: LD_ADDR_VAR 0 4
53341: PUSH
53342: DOUBLE
53343: LD_INT 1
53345: DEC
53346: ST_TO_ADDR
53347: LD_VAR 0 2
53351: PUSH
53352: FOR_TO
53353: IFFALSE 53440
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53355: LD_ADDR_VAR 0 6
53359: PUSH
53360: LD_VAR 0 1
53364: PPUSH
53365: LD_VAR 0 2
53369: PUSH
53370: LD_VAR 0 4
53374: ARRAY
53375: PUSH
53376: LD_INT 1
53378: ARRAY
53379: PPUSH
53380: LD_VAR 0 2
53384: PUSH
53385: LD_VAR 0 4
53389: ARRAY
53390: PUSH
53391: LD_INT 2
53393: ARRAY
53394: PPUSH
53395: CALL_OW 297
53399: ST_TO_ADDR
// if tdist < dist then
53400: LD_VAR 0 6
53404: PUSH
53405: LD_VAR 0 5
53409: LESS
53410: IFFALSE 53438
// begin hex := hexes [ i ] ;
53412: LD_ADDR_VAR 0 8
53416: PUSH
53417: LD_VAR 0 2
53421: PUSH
53422: LD_VAR 0 4
53426: ARRAY
53427: ST_TO_ADDR
// dist := tdist ;
53428: LD_ADDR_VAR 0 5
53432: PUSH
53433: LD_VAR 0 6
53437: ST_TO_ADDR
// end ; end ;
53438: GO 53352
53440: POP
53441: POP
// result := hex ;
53442: LD_ADDR_VAR 0 3
53446: PUSH
53447: LD_VAR 0 8
53451: ST_TO_ADDR
// end ;
53452: LD_VAR 0 3
53456: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53457: LD_INT 0
53459: PPUSH
53460: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53461: LD_VAR 0 1
53465: NOT
53466: PUSH
53467: LD_VAR 0 1
53471: PUSH
53472: LD_INT 21
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 23
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PPUSH
53496: CALL_OW 69
53500: IN
53501: NOT
53502: OR
53503: IFFALSE 53507
// exit ;
53505: GO 53554
// for i = 1 to 3 do
53507: LD_ADDR_VAR 0 3
53511: PUSH
53512: DOUBLE
53513: LD_INT 1
53515: DEC
53516: ST_TO_ADDR
53517: LD_INT 3
53519: PUSH
53520: FOR_TO
53521: IFFALSE 53552
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53523: LD_VAR 0 1
53527: PPUSH
53528: CALL_OW 250
53532: PPUSH
53533: LD_VAR 0 1
53537: PPUSH
53538: CALL_OW 251
53542: PPUSH
53543: LD_INT 1
53545: PPUSH
53546: CALL_OW 453
53550: GO 53520
53552: POP
53553: POP
// end ;
53554: LD_VAR 0 2
53558: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53559: LD_INT 0
53561: PPUSH
53562: PPUSH
53563: PPUSH
53564: PPUSH
53565: PPUSH
53566: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53567: LD_VAR 0 1
53571: NOT
53572: PUSH
53573: LD_VAR 0 2
53577: NOT
53578: OR
53579: PUSH
53580: LD_VAR 0 1
53584: PPUSH
53585: CALL_OW 314
53589: OR
53590: IFFALSE 53594
// exit ;
53592: GO 54061
// if GetLives ( i ) < 250 then
53594: LD_VAR 0 4
53598: PPUSH
53599: CALL_OW 256
53603: PUSH
53604: LD_INT 250
53606: LESS
53607: IFFALSE 53620
// begin ComAutodestruct ( i ) ;
53609: LD_VAR 0 4
53613: PPUSH
53614: CALL 53457 0 1
// exit ;
53618: GO 54061
// end ; x := GetX ( enemy_unit ) ;
53620: LD_ADDR_VAR 0 7
53624: PUSH
53625: LD_VAR 0 2
53629: PPUSH
53630: CALL_OW 250
53634: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53635: LD_ADDR_VAR 0 8
53639: PUSH
53640: LD_VAR 0 2
53644: PPUSH
53645: CALL_OW 251
53649: ST_TO_ADDR
// if not x or not y then
53650: LD_VAR 0 7
53654: NOT
53655: PUSH
53656: LD_VAR 0 8
53660: NOT
53661: OR
53662: IFFALSE 53666
// exit ;
53664: GO 54061
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53666: LD_ADDR_VAR 0 6
53670: PUSH
53671: LD_VAR 0 7
53675: PPUSH
53676: LD_INT 0
53678: PPUSH
53679: LD_INT 4
53681: PPUSH
53682: CALL_OW 272
53686: PUSH
53687: LD_VAR 0 8
53691: PPUSH
53692: LD_INT 0
53694: PPUSH
53695: LD_INT 4
53697: PPUSH
53698: CALL_OW 273
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_VAR 0 7
53711: PPUSH
53712: LD_INT 1
53714: PPUSH
53715: LD_INT 4
53717: PPUSH
53718: CALL_OW 272
53722: PUSH
53723: LD_VAR 0 8
53727: PPUSH
53728: LD_INT 1
53730: PPUSH
53731: LD_INT 4
53733: PPUSH
53734: CALL_OW 273
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_VAR 0 7
53747: PPUSH
53748: LD_INT 2
53750: PPUSH
53751: LD_INT 4
53753: PPUSH
53754: CALL_OW 272
53758: PUSH
53759: LD_VAR 0 8
53763: PPUSH
53764: LD_INT 2
53766: PPUSH
53767: LD_INT 4
53769: PPUSH
53770: CALL_OW 273
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_VAR 0 7
53783: PPUSH
53784: LD_INT 3
53786: PPUSH
53787: LD_INT 4
53789: PPUSH
53790: CALL_OW 272
53794: PUSH
53795: LD_VAR 0 8
53799: PPUSH
53800: LD_INT 3
53802: PPUSH
53803: LD_INT 4
53805: PPUSH
53806: CALL_OW 273
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_VAR 0 7
53819: PPUSH
53820: LD_INT 4
53822: PPUSH
53823: LD_INT 4
53825: PPUSH
53826: CALL_OW 272
53830: PUSH
53831: LD_VAR 0 8
53835: PPUSH
53836: LD_INT 4
53838: PPUSH
53839: LD_INT 4
53841: PPUSH
53842: CALL_OW 273
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_VAR 0 7
53855: PPUSH
53856: LD_INT 5
53858: PPUSH
53859: LD_INT 4
53861: PPUSH
53862: CALL_OW 272
53866: PUSH
53867: LD_VAR 0 8
53871: PPUSH
53872: LD_INT 5
53874: PPUSH
53875: LD_INT 4
53877: PPUSH
53878: CALL_OW 273
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: ST_TO_ADDR
// for i = tmp downto 1 do
53895: LD_ADDR_VAR 0 4
53899: PUSH
53900: DOUBLE
53901: LD_VAR 0 6
53905: INC
53906: ST_TO_ADDR
53907: LD_INT 1
53909: PUSH
53910: FOR_DOWNTO
53911: IFFALSE 54012
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53913: LD_VAR 0 6
53917: PUSH
53918: LD_VAR 0 4
53922: ARRAY
53923: PUSH
53924: LD_INT 1
53926: ARRAY
53927: PPUSH
53928: LD_VAR 0 6
53932: PUSH
53933: LD_VAR 0 4
53937: ARRAY
53938: PUSH
53939: LD_INT 2
53941: ARRAY
53942: PPUSH
53943: CALL_OW 488
53947: NOT
53948: PUSH
53949: LD_VAR 0 6
53953: PUSH
53954: LD_VAR 0 4
53958: ARRAY
53959: PUSH
53960: LD_INT 1
53962: ARRAY
53963: PPUSH
53964: LD_VAR 0 6
53968: PUSH
53969: LD_VAR 0 4
53973: ARRAY
53974: PUSH
53975: LD_INT 2
53977: ARRAY
53978: PPUSH
53979: CALL_OW 428
53983: PUSH
53984: LD_INT 0
53986: NONEQUAL
53987: OR
53988: IFFALSE 54010
// tmp := Delete ( tmp , i ) ;
53990: LD_ADDR_VAR 0 6
53994: PUSH
53995: LD_VAR 0 6
53999: PPUSH
54000: LD_VAR 0 4
54004: PPUSH
54005: CALL_OW 3
54009: ST_TO_ADDR
54010: GO 53910
54012: POP
54013: POP
// j := GetClosestHex ( unit , tmp ) ;
54014: LD_ADDR_VAR 0 5
54018: PUSH
54019: LD_VAR 0 1
54023: PPUSH
54024: LD_VAR 0 6
54028: PPUSH
54029: CALL 53305 0 2
54033: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54034: LD_VAR 0 1
54038: PPUSH
54039: LD_VAR 0 5
54043: PUSH
54044: LD_INT 1
54046: ARRAY
54047: PPUSH
54048: LD_VAR 0 5
54052: PUSH
54053: LD_INT 2
54055: ARRAY
54056: PPUSH
54057: CALL_OW 111
// end ;
54061: LD_VAR 0 3
54065: RET
// export function PrepareApemanSoldier ( ) ; begin
54066: LD_INT 0
54068: PPUSH
// uc_nation := 0 ;
54069: LD_ADDR_OWVAR 21
54073: PUSH
54074: LD_INT 0
54076: ST_TO_ADDR
// hc_sex := sex_male ;
54077: LD_ADDR_OWVAR 27
54081: PUSH
54082: LD_INT 1
54084: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54085: LD_ADDR_OWVAR 28
54089: PUSH
54090: LD_INT 15
54092: ST_TO_ADDR
// hc_gallery :=  ;
54093: LD_ADDR_OWVAR 33
54097: PUSH
54098: LD_STRING 
54100: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54101: LD_ADDR_OWVAR 31
54105: PUSH
54106: LD_INT 0
54108: PPUSH
54109: LD_INT 3
54111: PPUSH
54112: CALL_OW 12
54116: PUSH
54117: LD_INT 0
54119: PPUSH
54120: LD_INT 3
54122: PPUSH
54123: CALL_OW 12
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: ST_TO_ADDR
// end ;
54140: LD_VAR 0 1
54144: RET
// export function PrepareApemanEngineer ( ) ; begin
54145: LD_INT 0
54147: PPUSH
// uc_nation := 0 ;
54148: LD_ADDR_OWVAR 21
54152: PUSH
54153: LD_INT 0
54155: ST_TO_ADDR
// hc_sex := sex_male ;
54156: LD_ADDR_OWVAR 27
54160: PUSH
54161: LD_INT 1
54163: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54164: LD_ADDR_OWVAR 28
54168: PUSH
54169: LD_INT 16
54171: ST_TO_ADDR
// hc_gallery :=  ;
54172: LD_ADDR_OWVAR 33
54176: PUSH
54177: LD_STRING 
54179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54180: LD_ADDR_OWVAR 31
54184: PUSH
54185: LD_INT 0
54187: PPUSH
54188: LD_INT 3
54190: PPUSH
54191: CALL_OW 12
54195: PUSH
54196: LD_INT 0
54198: PPUSH
54199: LD_INT 3
54201: PPUSH
54202: CALL_OW 12
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: ST_TO_ADDR
// end ;
54219: LD_VAR 0 1
54223: RET
// export function PrepareApeman ( agressivity ) ; begin
54224: LD_INT 0
54226: PPUSH
// uc_side := 0 ;
54227: LD_ADDR_OWVAR 20
54231: PUSH
54232: LD_INT 0
54234: ST_TO_ADDR
// uc_nation := 0 ;
54235: LD_ADDR_OWVAR 21
54239: PUSH
54240: LD_INT 0
54242: ST_TO_ADDR
// hc_sex := sex_male ;
54243: LD_ADDR_OWVAR 27
54247: PUSH
54248: LD_INT 1
54250: ST_TO_ADDR
// hc_class := class_apeman ;
54251: LD_ADDR_OWVAR 28
54255: PUSH
54256: LD_INT 12
54258: ST_TO_ADDR
// hc_gallery :=  ;
54259: LD_ADDR_OWVAR 33
54263: PUSH
54264: LD_STRING 
54266: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54267: LD_ADDR_OWVAR 35
54271: PUSH
54272: LD_VAR 0 1
54276: NEG
54277: PPUSH
54278: LD_VAR 0 1
54282: PPUSH
54283: CALL_OW 12
54287: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54288: LD_ADDR_OWVAR 31
54292: PUSH
54293: LD_INT 0
54295: PPUSH
54296: LD_INT 3
54298: PPUSH
54299: CALL_OW 12
54303: PUSH
54304: LD_INT 0
54306: PPUSH
54307: LD_INT 3
54309: PPUSH
54310: CALL_OW 12
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// end ;
54327: LD_VAR 0 2
54331: RET
// export function PrepareTiger ( agressivity ) ; begin
54332: LD_INT 0
54334: PPUSH
// uc_side := 0 ;
54335: LD_ADDR_OWVAR 20
54339: PUSH
54340: LD_INT 0
54342: ST_TO_ADDR
// uc_nation := 0 ;
54343: LD_ADDR_OWVAR 21
54347: PUSH
54348: LD_INT 0
54350: ST_TO_ADDR
// hc_class := class_tiger ;
54351: LD_ADDR_OWVAR 28
54355: PUSH
54356: LD_INT 14
54358: ST_TO_ADDR
// hc_gallery :=  ;
54359: LD_ADDR_OWVAR 33
54363: PUSH
54364: LD_STRING 
54366: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54367: LD_ADDR_OWVAR 35
54371: PUSH
54372: LD_VAR 0 1
54376: NEG
54377: PPUSH
54378: LD_VAR 0 1
54382: PPUSH
54383: CALL_OW 12
54387: ST_TO_ADDR
// end ;
54388: LD_VAR 0 2
54392: RET
// export function PrepareEnchidna ( ) ; begin
54393: LD_INT 0
54395: PPUSH
// uc_side := 0 ;
54396: LD_ADDR_OWVAR 20
54400: PUSH
54401: LD_INT 0
54403: ST_TO_ADDR
// uc_nation := 0 ;
54404: LD_ADDR_OWVAR 21
54408: PUSH
54409: LD_INT 0
54411: ST_TO_ADDR
// hc_class := class_baggie ;
54412: LD_ADDR_OWVAR 28
54416: PUSH
54417: LD_INT 13
54419: ST_TO_ADDR
// hc_gallery :=  ;
54420: LD_ADDR_OWVAR 33
54424: PUSH
54425: LD_STRING 
54427: ST_TO_ADDR
// end ;
54428: LD_VAR 0 1
54432: RET
// export function PrepareFrog ( ) ; begin
54433: LD_INT 0
54435: PPUSH
// uc_side := 0 ;
54436: LD_ADDR_OWVAR 20
54440: PUSH
54441: LD_INT 0
54443: ST_TO_ADDR
// uc_nation := 0 ;
54444: LD_ADDR_OWVAR 21
54448: PUSH
54449: LD_INT 0
54451: ST_TO_ADDR
// hc_class := class_frog ;
54452: LD_ADDR_OWVAR 28
54456: PUSH
54457: LD_INT 19
54459: ST_TO_ADDR
// hc_gallery :=  ;
54460: LD_ADDR_OWVAR 33
54464: PUSH
54465: LD_STRING 
54467: ST_TO_ADDR
// end ;
54468: LD_VAR 0 1
54472: RET
// export function PrepareFish ( ) ; begin
54473: LD_INT 0
54475: PPUSH
// uc_side := 0 ;
54476: LD_ADDR_OWVAR 20
54480: PUSH
54481: LD_INT 0
54483: ST_TO_ADDR
// uc_nation := 0 ;
54484: LD_ADDR_OWVAR 21
54488: PUSH
54489: LD_INT 0
54491: ST_TO_ADDR
// hc_class := class_fish ;
54492: LD_ADDR_OWVAR 28
54496: PUSH
54497: LD_INT 20
54499: ST_TO_ADDR
// hc_gallery :=  ;
54500: LD_ADDR_OWVAR 33
54504: PUSH
54505: LD_STRING 
54507: ST_TO_ADDR
// end ;
54508: LD_VAR 0 1
54512: RET
// export function PrepareBird ( ) ; begin
54513: LD_INT 0
54515: PPUSH
// uc_side := 0 ;
54516: LD_ADDR_OWVAR 20
54520: PUSH
54521: LD_INT 0
54523: ST_TO_ADDR
// uc_nation := 0 ;
54524: LD_ADDR_OWVAR 21
54528: PUSH
54529: LD_INT 0
54531: ST_TO_ADDR
// hc_class := class_phororhacos ;
54532: LD_ADDR_OWVAR 28
54536: PUSH
54537: LD_INT 18
54539: ST_TO_ADDR
// hc_gallery :=  ;
54540: LD_ADDR_OWVAR 33
54544: PUSH
54545: LD_STRING 
54547: ST_TO_ADDR
// end ;
54548: LD_VAR 0 1
54552: RET
// export function PrepareHorse ( ) ; begin
54553: LD_INT 0
54555: PPUSH
// uc_side := 0 ;
54556: LD_ADDR_OWVAR 20
54560: PUSH
54561: LD_INT 0
54563: ST_TO_ADDR
// uc_nation := 0 ;
54564: LD_ADDR_OWVAR 21
54568: PUSH
54569: LD_INT 0
54571: ST_TO_ADDR
// hc_class := class_horse ;
54572: LD_ADDR_OWVAR 28
54576: PUSH
54577: LD_INT 21
54579: ST_TO_ADDR
// hc_gallery :=  ;
54580: LD_ADDR_OWVAR 33
54584: PUSH
54585: LD_STRING 
54587: ST_TO_ADDR
// end ;
54588: LD_VAR 0 1
54592: RET
// export function PrepareMastodont ( ) ; begin
54593: LD_INT 0
54595: PPUSH
// uc_side := 0 ;
54596: LD_ADDR_OWVAR 20
54600: PUSH
54601: LD_INT 0
54603: ST_TO_ADDR
// uc_nation := 0 ;
54604: LD_ADDR_OWVAR 21
54608: PUSH
54609: LD_INT 0
54611: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54612: LD_ADDR_OWVAR 37
54616: PUSH
54617: LD_INT 31
54619: ST_TO_ADDR
// vc_control := control_rider ;
54620: LD_ADDR_OWVAR 38
54624: PUSH
54625: LD_INT 4
54627: ST_TO_ADDR
// end ;
54628: LD_VAR 0 1
54632: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54633: LD_INT 0
54635: PPUSH
54636: PPUSH
54637: PPUSH
// uc_side = 0 ;
54638: LD_ADDR_OWVAR 20
54642: PUSH
54643: LD_INT 0
54645: ST_TO_ADDR
// uc_nation = 0 ;
54646: LD_ADDR_OWVAR 21
54650: PUSH
54651: LD_INT 0
54653: ST_TO_ADDR
// InitHc_All ( ) ;
54654: CALL_OW 584
// InitVc ;
54658: CALL_OW 20
// if mastodonts then
54662: LD_VAR 0 6
54666: IFFALSE 54733
// for i = 1 to mastodonts do
54668: LD_ADDR_VAR 0 11
54672: PUSH
54673: DOUBLE
54674: LD_INT 1
54676: DEC
54677: ST_TO_ADDR
54678: LD_VAR 0 6
54682: PUSH
54683: FOR_TO
54684: IFFALSE 54731
// begin vc_chassis := 31 ;
54686: LD_ADDR_OWVAR 37
54690: PUSH
54691: LD_INT 31
54693: ST_TO_ADDR
// vc_control := control_rider ;
54694: LD_ADDR_OWVAR 38
54698: PUSH
54699: LD_INT 4
54701: ST_TO_ADDR
// animal := CreateVehicle ;
54702: LD_ADDR_VAR 0 12
54706: PUSH
54707: CALL_OW 45
54711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54712: LD_VAR 0 12
54716: PPUSH
54717: LD_VAR 0 8
54721: PPUSH
54722: LD_INT 0
54724: PPUSH
54725: CALL 56861 0 3
// end ;
54729: GO 54683
54731: POP
54732: POP
// if horses then
54733: LD_VAR 0 5
54737: IFFALSE 54804
// for i = 1 to horses do
54739: LD_ADDR_VAR 0 11
54743: PUSH
54744: DOUBLE
54745: LD_INT 1
54747: DEC
54748: ST_TO_ADDR
54749: LD_VAR 0 5
54753: PUSH
54754: FOR_TO
54755: IFFALSE 54802
// begin hc_class := 21 ;
54757: LD_ADDR_OWVAR 28
54761: PUSH
54762: LD_INT 21
54764: ST_TO_ADDR
// hc_gallery :=  ;
54765: LD_ADDR_OWVAR 33
54769: PUSH
54770: LD_STRING 
54772: ST_TO_ADDR
// animal := CreateHuman ;
54773: LD_ADDR_VAR 0 12
54777: PUSH
54778: CALL_OW 44
54782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54783: LD_VAR 0 12
54787: PPUSH
54788: LD_VAR 0 8
54792: PPUSH
54793: LD_INT 0
54795: PPUSH
54796: CALL 56861 0 3
// end ;
54800: GO 54754
54802: POP
54803: POP
// if birds then
54804: LD_VAR 0 1
54808: IFFALSE 54875
// for i = 1 to birds do
54810: LD_ADDR_VAR 0 11
54814: PUSH
54815: DOUBLE
54816: LD_INT 1
54818: DEC
54819: ST_TO_ADDR
54820: LD_VAR 0 1
54824: PUSH
54825: FOR_TO
54826: IFFALSE 54873
// begin hc_class := 18 ;
54828: LD_ADDR_OWVAR 28
54832: PUSH
54833: LD_INT 18
54835: ST_TO_ADDR
// hc_gallery =  ;
54836: LD_ADDR_OWVAR 33
54840: PUSH
54841: LD_STRING 
54843: ST_TO_ADDR
// animal := CreateHuman ;
54844: LD_ADDR_VAR 0 12
54848: PUSH
54849: CALL_OW 44
54853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54854: LD_VAR 0 12
54858: PPUSH
54859: LD_VAR 0 8
54863: PPUSH
54864: LD_INT 0
54866: PPUSH
54867: CALL 56861 0 3
// end ;
54871: GO 54825
54873: POP
54874: POP
// if tigers then
54875: LD_VAR 0 2
54879: IFFALSE 54963
// for i = 1 to tigers do
54881: LD_ADDR_VAR 0 11
54885: PUSH
54886: DOUBLE
54887: LD_INT 1
54889: DEC
54890: ST_TO_ADDR
54891: LD_VAR 0 2
54895: PUSH
54896: FOR_TO
54897: IFFALSE 54961
// begin hc_class = class_tiger ;
54899: LD_ADDR_OWVAR 28
54903: PUSH
54904: LD_INT 14
54906: ST_TO_ADDR
// hc_gallery =  ;
54907: LD_ADDR_OWVAR 33
54911: PUSH
54912: LD_STRING 
54914: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54915: LD_ADDR_OWVAR 35
54919: PUSH
54920: LD_INT 7
54922: NEG
54923: PPUSH
54924: LD_INT 7
54926: PPUSH
54927: CALL_OW 12
54931: ST_TO_ADDR
// animal := CreateHuman ;
54932: LD_ADDR_VAR 0 12
54936: PUSH
54937: CALL_OW 44
54941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54942: LD_VAR 0 12
54946: PPUSH
54947: LD_VAR 0 8
54951: PPUSH
54952: LD_INT 0
54954: PPUSH
54955: CALL 56861 0 3
// end ;
54959: GO 54896
54961: POP
54962: POP
// if apemans then
54963: LD_VAR 0 3
54967: IFFALSE 55090
// for i = 1 to apemans do
54969: LD_ADDR_VAR 0 11
54973: PUSH
54974: DOUBLE
54975: LD_INT 1
54977: DEC
54978: ST_TO_ADDR
54979: LD_VAR 0 3
54983: PUSH
54984: FOR_TO
54985: IFFALSE 55088
// begin hc_class = class_apeman ;
54987: LD_ADDR_OWVAR 28
54991: PUSH
54992: LD_INT 12
54994: ST_TO_ADDR
// hc_gallery =  ;
54995: LD_ADDR_OWVAR 33
54999: PUSH
55000: LD_STRING 
55002: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55003: LD_ADDR_OWVAR 35
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PPUSH
55012: LD_INT 2
55014: PPUSH
55015: CALL_OW 12
55019: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55020: LD_ADDR_OWVAR 31
55024: PUSH
55025: LD_INT 1
55027: PPUSH
55028: LD_INT 3
55030: PPUSH
55031: CALL_OW 12
55035: PUSH
55036: LD_INT 1
55038: PPUSH
55039: LD_INT 3
55041: PPUSH
55042: CALL_OW 12
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// animal := CreateHuman ;
55059: LD_ADDR_VAR 0 12
55063: PUSH
55064: CALL_OW 44
55068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55069: LD_VAR 0 12
55073: PPUSH
55074: LD_VAR 0 8
55078: PPUSH
55079: LD_INT 0
55081: PPUSH
55082: CALL 56861 0 3
// end ;
55086: GO 54984
55088: POP
55089: POP
// if enchidnas then
55090: LD_VAR 0 4
55094: IFFALSE 55161
// for i = 1 to enchidnas do
55096: LD_ADDR_VAR 0 11
55100: PUSH
55101: DOUBLE
55102: LD_INT 1
55104: DEC
55105: ST_TO_ADDR
55106: LD_VAR 0 4
55110: PUSH
55111: FOR_TO
55112: IFFALSE 55159
// begin hc_class = 13 ;
55114: LD_ADDR_OWVAR 28
55118: PUSH
55119: LD_INT 13
55121: ST_TO_ADDR
// hc_gallery =  ;
55122: LD_ADDR_OWVAR 33
55126: PUSH
55127: LD_STRING 
55129: ST_TO_ADDR
// animal := CreateHuman ;
55130: LD_ADDR_VAR 0 12
55134: PUSH
55135: CALL_OW 44
55139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55140: LD_VAR 0 12
55144: PPUSH
55145: LD_VAR 0 8
55149: PPUSH
55150: LD_INT 0
55152: PPUSH
55153: CALL 56861 0 3
// end ;
55157: GO 55111
55159: POP
55160: POP
// if fishes then
55161: LD_VAR 0 7
55165: IFFALSE 55232
// for i = 1 to fishes do
55167: LD_ADDR_VAR 0 11
55171: PUSH
55172: DOUBLE
55173: LD_INT 1
55175: DEC
55176: ST_TO_ADDR
55177: LD_VAR 0 7
55181: PUSH
55182: FOR_TO
55183: IFFALSE 55230
// begin hc_class = 20 ;
55185: LD_ADDR_OWVAR 28
55189: PUSH
55190: LD_INT 20
55192: ST_TO_ADDR
// hc_gallery =  ;
55193: LD_ADDR_OWVAR 33
55197: PUSH
55198: LD_STRING 
55200: ST_TO_ADDR
// animal := CreateHuman ;
55201: LD_ADDR_VAR 0 12
55205: PUSH
55206: CALL_OW 44
55210: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55211: LD_VAR 0 12
55215: PPUSH
55216: LD_VAR 0 9
55220: PPUSH
55221: LD_INT 0
55223: PPUSH
55224: CALL 56861 0 3
// end ;
55228: GO 55182
55230: POP
55231: POP
// end ;
55232: LD_VAR 0 10
55236: RET
// export function WantHeal ( sci , unit ) ; begin
55237: LD_INT 0
55239: PPUSH
// if GetTaskList ( sci ) > 0 then
55240: LD_VAR 0 1
55244: PPUSH
55245: CALL_OW 437
55249: PUSH
55250: LD_INT 0
55252: GREATER
55253: IFFALSE 55323
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55255: LD_VAR 0 1
55259: PPUSH
55260: CALL_OW 437
55264: PUSH
55265: LD_INT 1
55267: ARRAY
55268: PUSH
55269: LD_INT 1
55271: ARRAY
55272: PUSH
55273: LD_STRING l
55275: EQUAL
55276: PUSH
55277: LD_VAR 0 1
55281: PPUSH
55282: CALL_OW 437
55286: PUSH
55287: LD_INT 1
55289: ARRAY
55290: PUSH
55291: LD_INT 4
55293: ARRAY
55294: PUSH
55295: LD_VAR 0 2
55299: EQUAL
55300: AND
55301: IFFALSE 55313
// result := true else
55303: LD_ADDR_VAR 0 3
55307: PUSH
55308: LD_INT 1
55310: ST_TO_ADDR
55311: GO 55321
// result := false ;
55313: LD_ADDR_VAR 0 3
55317: PUSH
55318: LD_INT 0
55320: ST_TO_ADDR
// end else
55321: GO 55331
// result := false ;
55323: LD_ADDR_VAR 0 3
55327: PUSH
55328: LD_INT 0
55330: ST_TO_ADDR
// end ;
55331: LD_VAR 0 3
55335: RET
// export function HealTarget ( sci ) ; begin
55336: LD_INT 0
55338: PPUSH
// if not sci then
55339: LD_VAR 0 1
55343: NOT
55344: IFFALSE 55348
// exit ;
55346: GO 55413
// result := 0 ;
55348: LD_ADDR_VAR 0 2
55352: PUSH
55353: LD_INT 0
55355: ST_TO_ADDR
// if GetTaskList ( sci ) then
55356: LD_VAR 0 1
55360: PPUSH
55361: CALL_OW 437
55365: IFFALSE 55413
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55367: LD_VAR 0 1
55371: PPUSH
55372: CALL_OW 437
55376: PUSH
55377: LD_INT 1
55379: ARRAY
55380: PUSH
55381: LD_INT 1
55383: ARRAY
55384: PUSH
55385: LD_STRING l
55387: EQUAL
55388: IFFALSE 55413
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55390: LD_ADDR_VAR 0 2
55394: PUSH
55395: LD_VAR 0 1
55399: PPUSH
55400: CALL_OW 437
55404: PUSH
55405: LD_INT 1
55407: ARRAY
55408: PUSH
55409: LD_INT 4
55411: ARRAY
55412: ST_TO_ADDR
// end ;
55413: LD_VAR 0 2
55417: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55418: LD_INT 0
55420: PPUSH
55421: PPUSH
55422: PPUSH
55423: PPUSH
// if not base_units then
55424: LD_VAR 0 1
55428: NOT
55429: IFFALSE 55433
// exit ;
55431: GO 55520
// result := false ;
55433: LD_ADDR_VAR 0 2
55437: PUSH
55438: LD_INT 0
55440: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55441: LD_ADDR_VAR 0 5
55445: PUSH
55446: LD_VAR 0 1
55450: PPUSH
55451: LD_INT 21
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PPUSH
55461: CALL_OW 72
55465: ST_TO_ADDR
// if not tmp then
55466: LD_VAR 0 5
55470: NOT
55471: IFFALSE 55475
// exit ;
55473: GO 55520
// for i in tmp do
55475: LD_ADDR_VAR 0 3
55479: PUSH
55480: LD_VAR 0 5
55484: PUSH
55485: FOR_IN
55486: IFFALSE 55518
// begin result := EnemyInRange ( i , 22 ) ;
55488: LD_ADDR_VAR 0 2
55492: PUSH
55493: LD_VAR 0 3
55497: PPUSH
55498: LD_INT 22
55500: PPUSH
55501: CALL 53107 0 2
55505: ST_TO_ADDR
// if result then
55506: LD_VAR 0 2
55510: IFFALSE 55516
// exit ;
55512: POP
55513: POP
55514: GO 55520
// end ;
55516: GO 55485
55518: POP
55519: POP
// end ;
55520: LD_VAR 0 2
55524: RET
// export function FilterByTag ( units , tag ) ; begin
55525: LD_INT 0
55527: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55528: LD_ADDR_VAR 0 3
55532: PUSH
55533: LD_VAR 0 1
55537: PPUSH
55538: LD_INT 120
55540: PUSH
55541: LD_VAR 0 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PPUSH
55550: CALL_OW 72
55554: ST_TO_ADDR
// end ;
55555: LD_VAR 0 3
55559: RET
// export function IsDriver ( un ) ; begin
55560: LD_INT 0
55562: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55563: LD_ADDR_VAR 0 2
55567: PUSH
55568: LD_VAR 0 1
55572: PUSH
55573: LD_INT 55
55575: PUSH
55576: EMPTY
55577: LIST
55578: PPUSH
55579: CALL_OW 69
55583: IN
55584: ST_TO_ADDR
// end ;
55585: LD_VAR 0 2
55589: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55590: LD_INT 0
55592: PPUSH
55593: PPUSH
// list := [ ] ;
55594: LD_ADDR_VAR 0 5
55598: PUSH
55599: EMPTY
55600: ST_TO_ADDR
// case d of 0 :
55601: LD_VAR 0 3
55605: PUSH
55606: LD_INT 0
55608: DOUBLE
55609: EQUAL
55610: IFTRUE 55614
55612: GO 55747
55614: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55615: LD_ADDR_VAR 0 5
55619: PUSH
55620: LD_VAR 0 1
55624: PUSH
55625: LD_INT 4
55627: MINUS
55628: PUSH
55629: LD_VAR 0 2
55633: PUSH
55634: LD_INT 4
55636: MINUS
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: PUSH
55646: LD_VAR 0 1
55650: PUSH
55651: LD_INT 3
55653: MINUS
55654: PUSH
55655: LD_VAR 0 2
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: PUSH
55668: LD_VAR 0 1
55672: PUSH
55673: LD_INT 4
55675: PLUS
55676: PUSH
55677: LD_VAR 0 2
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: PUSH
55690: LD_VAR 0 1
55694: PUSH
55695: LD_INT 3
55697: PLUS
55698: PUSH
55699: LD_VAR 0 2
55703: PUSH
55704: LD_INT 3
55706: PLUS
55707: PUSH
55708: LD_INT 5
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: PUSH
55716: LD_VAR 0 1
55720: PUSH
55721: LD_VAR 0 2
55725: PUSH
55726: LD_INT 4
55728: PLUS
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: ST_TO_ADDR
// end ; 1 :
55745: GO 56445
55747: LD_INT 1
55749: DOUBLE
55750: EQUAL
55751: IFTRUE 55755
55753: GO 55888
55755: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55756: LD_ADDR_VAR 0 5
55760: PUSH
55761: LD_VAR 0 1
55765: PUSH
55766: LD_VAR 0 2
55770: PUSH
55771: LD_INT 4
55773: MINUS
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: PUSH
55783: LD_VAR 0 1
55787: PUSH
55788: LD_INT 3
55790: MINUS
55791: PUSH
55792: LD_VAR 0 2
55796: PUSH
55797: LD_INT 3
55799: MINUS
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: PUSH
55809: LD_VAR 0 1
55813: PUSH
55814: LD_INT 4
55816: MINUS
55817: PUSH
55818: LD_VAR 0 2
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: PUSH
55831: LD_VAR 0 1
55835: PUSH
55836: LD_VAR 0 2
55840: PUSH
55841: LD_INT 3
55843: PLUS
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: PUSH
55853: LD_VAR 0 1
55857: PUSH
55858: LD_INT 4
55860: PLUS
55861: PUSH
55862: LD_VAR 0 2
55866: PUSH
55867: LD_INT 4
55869: PLUS
55870: PUSH
55871: LD_INT 5
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// end ; 2 :
55886: GO 56445
55888: LD_INT 2
55890: DOUBLE
55891: EQUAL
55892: IFTRUE 55896
55894: GO 56025
55896: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55897: LD_ADDR_VAR 0 5
55901: PUSH
55902: LD_VAR 0 1
55906: PUSH
55907: LD_VAR 0 2
55911: PUSH
55912: LD_INT 3
55914: MINUS
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: PUSH
55924: LD_VAR 0 1
55928: PUSH
55929: LD_INT 4
55931: PLUS
55932: PUSH
55933: LD_VAR 0 2
55937: PUSH
55938: LD_INT 4
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: PUSH
55946: LD_VAR 0 1
55950: PUSH
55951: LD_VAR 0 2
55955: PUSH
55956: LD_INT 4
55958: PLUS
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: PUSH
55968: LD_VAR 0 1
55972: PUSH
55973: LD_INT 3
55975: MINUS
55976: PUSH
55977: LD_VAR 0 2
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: PUSH
55990: LD_VAR 0 1
55994: PUSH
55995: LD_INT 4
55997: MINUS
55998: PUSH
55999: LD_VAR 0 2
56003: PUSH
56004: LD_INT 4
56006: MINUS
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: ST_TO_ADDR
// end ; 3 :
56023: GO 56445
56025: LD_INT 3
56027: DOUBLE
56028: EQUAL
56029: IFTRUE 56033
56031: GO 56166
56033: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56034: LD_ADDR_VAR 0 5
56038: PUSH
56039: LD_VAR 0 1
56043: PUSH
56044: LD_INT 3
56046: PLUS
56047: PUSH
56048: LD_VAR 0 2
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: PUSH
56061: LD_VAR 0 1
56065: PUSH
56066: LD_INT 4
56068: PLUS
56069: PUSH
56070: LD_VAR 0 2
56074: PUSH
56075: LD_INT 4
56077: PLUS
56078: PUSH
56079: LD_INT 5
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: PUSH
56087: LD_VAR 0 1
56091: PUSH
56092: LD_INT 4
56094: MINUS
56095: PUSH
56096: LD_VAR 0 2
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: PUSH
56109: LD_VAR 0 1
56113: PUSH
56114: LD_VAR 0 2
56118: PUSH
56119: LD_INT 4
56121: MINUS
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: PUSH
56131: LD_VAR 0 1
56135: PUSH
56136: LD_INT 3
56138: MINUS
56139: PUSH
56140: LD_VAR 0 2
56144: PUSH
56145: LD_INT 3
56147: MINUS
56148: PUSH
56149: LD_INT 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// end ; 4 :
56164: GO 56445
56166: LD_INT 4
56168: DOUBLE
56169: EQUAL
56170: IFTRUE 56174
56172: GO 56307
56174: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56175: LD_ADDR_VAR 0 5
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: LD_VAR 0 2
56189: PUSH
56190: LD_INT 4
56192: PLUS
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: PUSH
56202: LD_VAR 0 1
56206: PUSH
56207: LD_INT 3
56209: PLUS
56210: PUSH
56211: LD_VAR 0 2
56215: PUSH
56216: LD_INT 3
56218: PLUS
56219: PUSH
56220: LD_INT 5
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: PUSH
56228: LD_VAR 0 1
56232: PUSH
56233: LD_INT 4
56235: PLUS
56236: PUSH
56237: LD_VAR 0 2
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: PUSH
56250: LD_VAR 0 1
56254: PUSH
56255: LD_VAR 0 2
56259: PUSH
56260: LD_INT 3
56262: MINUS
56263: PUSH
56264: LD_INT 3
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: PUSH
56272: LD_VAR 0 1
56276: PUSH
56277: LD_INT 4
56279: MINUS
56280: PUSH
56281: LD_VAR 0 2
56285: PUSH
56286: LD_INT 4
56288: MINUS
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// end ; 5 :
56305: GO 56445
56307: LD_INT 5
56309: DOUBLE
56310: EQUAL
56311: IFTRUE 56315
56313: GO 56444
56315: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56316: LD_ADDR_VAR 0 5
56320: PUSH
56321: LD_VAR 0 1
56325: PUSH
56326: LD_INT 4
56328: MINUS
56329: PUSH
56330: LD_VAR 0 2
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: PUSH
56343: LD_VAR 0 1
56347: PUSH
56348: LD_VAR 0 2
56352: PUSH
56353: LD_INT 4
56355: MINUS
56356: PUSH
56357: LD_INT 3
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: PUSH
56365: LD_VAR 0 1
56369: PUSH
56370: LD_INT 4
56372: PLUS
56373: PUSH
56374: LD_VAR 0 2
56378: PUSH
56379: LD_INT 4
56381: PLUS
56382: PUSH
56383: LD_INT 5
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: LIST
56390: PUSH
56391: LD_VAR 0 1
56395: PUSH
56396: LD_INT 3
56398: PLUS
56399: PUSH
56400: LD_VAR 0 2
56404: PUSH
56405: LD_INT 4
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: PUSH
56413: LD_VAR 0 1
56417: PUSH
56418: LD_VAR 0 2
56422: PUSH
56423: LD_INT 3
56425: PLUS
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// end ; end ;
56442: GO 56445
56444: POP
// result := list ;
56445: LD_ADDR_VAR 0 4
56449: PUSH
56450: LD_VAR 0 5
56454: ST_TO_ADDR
// end ;
56455: LD_VAR 0 4
56459: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56460: LD_INT 0
56462: PPUSH
56463: PPUSH
56464: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56465: LD_VAR 0 1
56469: NOT
56470: PUSH
56471: LD_VAR 0 2
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: LD_INT 4
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: IN
56494: NOT
56495: OR
56496: IFFALSE 56500
// exit ;
56498: GO 56583
// tmp := [ ] ;
56500: LD_ADDR_VAR 0 5
56504: PUSH
56505: EMPTY
56506: ST_TO_ADDR
// for i in units do
56507: LD_ADDR_VAR 0 4
56511: PUSH
56512: LD_VAR 0 1
56516: PUSH
56517: FOR_IN
56518: IFFALSE 56552
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56520: LD_ADDR_VAR 0 5
56524: PUSH
56525: LD_VAR 0 5
56529: PPUSH
56530: LD_VAR 0 4
56534: PPUSH
56535: LD_VAR 0 2
56539: PPUSH
56540: CALL_OW 259
56544: PPUSH
56545: CALL 57956 0 2
56549: ST_TO_ADDR
56550: GO 56517
56552: POP
56553: POP
// if not tmp then
56554: LD_VAR 0 5
56558: NOT
56559: IFFALSE 56563
// exit ;
56561: GO 56583
// result := SortListByListDesc ( units , tmp ) ;
56563: LD_ADDR_VAR 0 3
56567: PUSH
56568: LD_VAR 0 1
56572: PPUSH
56573: LD_VAR 0 5
56577: PPUSH
56578: CALL_OW 77
56582: ST_TO_ADDR
// end ;
56583: LD_VAR 0 3
56587: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56588: LD_INT 0
56590: PPUSH
56591: PPUSH
56592: PPUSH
// result := false ;
56593: LD_ADDR_VAR 0 3
56597: PUSH
56598: LD_INT 0
56600: ST_TO_ADDR
// if not building then
56601: LD_VAR 0 2
56605: NOT
56606: IFFALSE 56610
// exit ;
56608: GO 56748
// x := GetX ( building ) ;
56610: LD_ADDR_VAR 0 4
56614: PUSH
56615: LD_VAR 0 2
56619: PPUSH
56620: CALL_OW 250
56624: ST_TO_ADDR
// y := GetY ( building ) ;
56625: LD_ADDR_VAR 0 5
56629: PUSH
56630: LD_VAR 0 2
56634: PPUSH
56635: CALL_OW 251
56639: ST_TO_ADDR
// if not x or not y then
56640: LD_VAR 0 4
56644: NOT
56645: PUSH
56646: LD_VAR 0 5
56650: NOT
56651: OR
56652: IFFALSE 56656
// exit ;
56654: GO 56748
// if GetTaskList ( unit ) then
56656: LD_VAR 0 1
56660: PPUSH
56661: CALL_OW 437
56665: IFFALSE 56748
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56667: LD_STRING e
56669: PUSH
56670: LD_VAR 0 1
56674: PPUSH
56675: CALL_OW 437
56679: PUSH
56680: LD_INT 1
56682: ARRAY
56683: PUSH
56684: LD_INT 1
56686: ARRAY
56687: EQUAL
56688: PUSH
56689: LD_VAR 0 4
56693: PUSH
56694: LD_VAR 0 1
56698: PPUSH
56699: CALL_OW 437
56703: PUSH
56704: LD_INT 1
56706: ARRAY
56707: PUSH
56708: LD_INT 2
56710: ARRAY
56711: EQUAL
56712: AND
56713: PUSH
56714: LD_VAR 0 5
56718: PUSH
56719: LD_VAR 0 1
56723: PPUSH
56724: CALL_OW 437
56728: PUSH
56729: LD_INT 1
56731: ARRAY
56732: PUSH
56733: LD_INT 3
56735: ARRAY
56736: EQUAL
56737: AND
56738: IFFALSE 56748
// result := true end ;
56740: LD_ADDR_VAR 0 3
56744: PUSH
56745: LD_INT 1
56747: ST_TO_ADDR
// end ;
56748: LD_VAR 0 3
56752: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56753: LD_INT 0
56755: PPUSH
// result := false ;
56756: LD_ADDR_VAR 0 4
56760: PUSH
56761: LD_INT 0
56763: ST_TO_ADDR
// if GetTaskList ( unit ) then
56764: LD_VAR 0 1
56768: PPUSH
56769: CALL_OW 437
56773: IFFALSE 56856
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56775: LD_STRING M
56777: PUSH
56778: LD_VAR 0 1
56782: PPUSH
56783: CALL_OW 437
56787: PUSH
56788: LD_INT 1
56790: ARRAY
56791: PUSH
56792: LD_INT 1
56794: ARRAY
56795: EQUAL
56796: PUSH
56797: LD_VAR 0 2
56801: PUSH
56802: LD_VAR 0 1
56806: PPUSH
56807: CALL_OW 437
56811: PUSH
56812: LD_INT 1
56814: ARRAY
56815: PUSH
56816: LD_INT 2
56818: ARRAY
56819: EQUAL
56820: AND
56821: PUSH
56822: LD_VAR 0 3
56826: PUSH
56827: LD_VAR 0 1
56831: PPUSH
56832: CALL_OW 437
56836: PUSH
56837: LD_INT 1
56839: ARRAY
56840: PUSH
56841: LD_INT 3
56843: ARRAY
56844: EQUAL
56845: AND
56846: IFFALSE 56856
// result := true ;
56848: LD_ADDR_VAR 0 4
56852: PUSH
56853: LD_INT 1
56855: ST_TO_ADDR
// end ; end ;
56856: LD_VAR 0 4
56860: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56861: LD_INT 0
56863: PPUSH
56864: PPUSH
56865: PPUSH
56866: PPUSH
// if not unit or not area then
56867: LD_VAR 0 1
56871: NOT
56872: PUSH
56873: LD_VAR 0 2
56877: NOT
56878: OR
56879: IFFALSE 56883
// exit ;
56881: GO 57059
// tmp := AreaToList ( area , i ) ;
56883: LD_ADDR_VAR 0 6
56887: PUSH
56888: LD_VAR 0 2
56892: PPUSH
56893: LD_VAR 0 5
56897: PPUSH
56898: CALL_OW 517
56902: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56903: LD_ADDR_VAR 0 5
56907: PUSH
56908: DOUBLE
56909: LD_INT 1
56911: DEC
56912: ST_TO_ADDR
56913: LD_VAR 0 6
56917: PUSH
56918: LD_INT 1
56920: ARRAY
56921: PUSH
56922: FOR_TO
56923: IFFALSE 57057
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56925: LD_ADDR_VAR 0 7
56929: PUSH
56930: LD_VAR 0 6
56934: PUSH
56935: LD_INT 1
56937: ARRAY
56938: PUSH
56939: LD_VAR 0 5
56943: ARRAY
56944: PUSH
56945: LD_VAR 0 6
56949: PUSH
56950: LD_INT 2
56952: ARRAY
56953: PUSH
56954: LD_VAR 0 5
56958: ARRAY
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
56964: LD_INT 92
56966: PUSH
56967: LD_VAR 0 7
56971: PUSH
56972: LD_INT 1
56974: ARRAY
56975: PUSH
56976: LD_VAR 0 7
56980: PUSH
56981: LD_INT 2
56983: ARRAY
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: PPUSH
56994: CALL_OW 69
56998: PUSH
56999: LD_INT 0
57001: EQUAL
57002: IFFALSE 57055
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57004: LD_VAR 0 1
57008: PPUSH
57009: LD_VAR 0 7
57013: PUSH
57014: LD_INT 1
57016: ARRAY
57017: PPUSH
57018: LD_VAR 0 7
57022: PUSH
57023: LD_INT 2
57025: ARRAY
57026: PPUSH
57027: LD_VAR 0 3
57031: PPUSH
57032: CALL_OW 48
// result := IsPlaced ( unit ) ;
57036: LD_ADDR_VAR 0 4
57040: PUSH
57041: LD_VAR 0 1
57045: PPUSH
57046: CALL_OW 305
57050: ST_TO_ADDR
// exit ;
57051: POP
57052: POP
57053: GO 57059
// end ; end ;
57055: GO 56922
57057: POP
57058: POP
// end ;
57059: LD_VAR 0 4
57063: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57064: LD_INT 0
57066: PPUSH
57067: PPUSH
57068: PPUSH
// if not side or side > 8 then
57069: LD_VAR 0 1
57073: NOT
57074: PUSH
57075: LD_VAR 0 1
57079: PUSH
57080: LD_INT 8
57082: GREATER
57083: OR
57084: IFFALSE 57088
// exit ;
57086: GO 57275
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57088: LD_ADDR_VAR 0 4
57092: PUSH
57093: LD_INT 22
57095: PUSH
57096: LD_VAR 0 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 21
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PPUSH
57119: CALL_OW 69
57123: ST_TO_ADDR
// if not tmp then
57124: LD_VAR 0 4
57128: NOT
57129: IFFALSE 57133
// exit ;
57131: GO 57275
// enable_addtolog := true ;
57133: LD_ADDR_OWVAR 81
57137: PUSH
57138: LD_INT 1
57140: ST_TO_ADDR
// AddToLog ( [ ) ;
57141: LD_STRING [
57143: PPUSH
57144: CALL_OW 561
// for i in tmp do
57148: LD_ADDR_VAR 0 3
57152: PUSH
57153: LD_VAR 0 4
57157: PUSH
57158: FOR_IN
57159: IFFALSE 57266
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57161: LD_STRING [
57163: PUSH
57164: LD_VAR 0 3
57168: PPUSH
57169: CALL_OW 266
57173: STR
57174: PUSH
57175: LD_STRING , 
57177: STR
57178: PUSH
57179: LD_VAR 0 3
57183: PPUSH
57184: CALL_OW 250
57188: STR
57189: PUSH
57190: LD_STRING , 
57192: STR
57193: PUSH
57194: LD_VAR 0 3
57198: PPUSH
57199: CALL_OW 251
57203: STR
57204: PUSH
57205: LD_STRING , 
57207: STR
57208: PUSH
57209: LD_VAR 0 3
57213: PPUSH
57214: CALL_OW 254
57218: STR
57219: PUSH
57220: LD_STRING , 
57222: STR
57223: PUSH
57224: LD_VAR 0 3
57228: PPUSH
57229: LD_INT 1
57231: PPUSH
57232: CALL_OW 268
57236: STR
57237: PUSH
57238: LD_STRING , 
57240: STR
57241: PUSH
57242: LD_VAR 0 3
57246: PPUSH
57247: LD_INT 2
57249: PPUSH
57250: CALL_OW 268
57254: STR
57255: PUSH
57256: LD_STRING ],
57258: STR
57259: PPUSH
57260: CALL_OW 561
// end ;
57264: GO 57158
57266: POP
57267: POP
// AddToLog ( ]; ) ;
57268: LD_STRING ];
57270: PPUSH
57271: CALL_OW 561
// end ;
57275: LD_VAR 0 2
57279: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57280: LD_INT 0
57282: PPUSH
57283: PPUSH
57284: PPUSH
57285: PPUSH
57286: PPUSH
// if not area or not rate or not max then
57287: LD_VAR 0 1
57291: NOT
57292: PUSH
57293: LD_VAR 0 2
57297: NOT
57298: OR
57299: PUSH
57300: LD_VAR 0 4
57304: NOT
57305: OR
57306: IFFALSE 57310
// exit ;
57308: GO 57499
// while 1 do
57310: LD_INT 1
57312: IFFALSE 57499
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57314: LD_ADDR_VAR 0 9
57318: PUSH
57319: LD_VAR 0 1
57323: PPUSH
57324: LD_INT 1
57326: PPUSH
57327: CALL_OW 287
57331: PUSH
57332: LD_INT 10
57334: MUL
57335: ST_TO_ADDR
// r := rate / 10 ;
57336: LD_ADDR_VAR 0 7
57340: PUSH
57341: LD_VAR 0 2
57345: PUSH
57346: LD_INT 10
57348: DIVREAL
57349: ST_TO_ADDR
// time := 1 1$00 ;
57350: LD_ADDR_VAR 0 8
57354: PUSH
57355: LD_INT 2100
57357: ST_TO_ADDR
// if amount < min then
57358: LD_VAR 0 9
57362: PUSH
57363: LD_VAR 0 3
57367: LESS
57368: IFFALSE 57386
// r := r * 2 else
57370: LD_ADDR_VAR 0 7
57374: PUSH
57375: LD_VAR 0 7
57379: PUSH
57380: LD_INT 2
57382: MUL
57383: ST_TO_ADDR
57384: GO 57412
// if amount > max then
57386: LD_VAR 0 9
57390: PUSH
57391: LD_VAR 0 4
57395: GREATER
57396: IFFALSE 57412
// r := r / 2 ;
57398: LD_ADDR_VAR 0 7
57402: PUSH
57403: LD_VAR 0 7
57407: PUSH
57408: LD_INT 2
57410: DIVREAL
57411: ST_TO_ADDR
// time := time / r ;
57412: LD_ADDR_VAR 0 8
57416: PUSH
57417: LD_VAR 0 8
57421: PUSH
57422: LD_VAR 0 7
57426: DIVREAL
57427: ST_TO_ADDR
// if time < 0 then
57428: LD_VAR 0 8
57432: PUSH
57433: LD_INT 0
57435: LESS
57436: IFFALSE 57453
// time := time * - 1 ;
57438: LD_ADDR_VAR 0 8
57442: PUSH
57443: LD_VAR 0 8
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: MUL
57452: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57453: LD_VAR 0 8
57457: PUSH
57458: LD_INT 35
57460: PPUSH
57461: LD_INT 875
57463: PPUSH
57464: CALL_OW 12
57468: PLUS
57469: PPUSH
57470: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57474: LD_INT 1
57476: PPUSH
57477: LD_INT 5
57479: PPUSH
57480: CALL_OW 12
57484: PPUSH
57485: LD_VAR 0 1
57489: PPUSH
57490: LD_INT 1
57492: PPUSH
57493: CALL_OW 55
// end ;
57497: GO 57310
// end ;
57499: LD_VAR 0 5
57503: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57504: LD_INT 0
57506: PPUSH
57507: PPUSH
57508: PPUSH
57509: PPUSH
57510: PPUSH
57511: PPUSH
57512: PPUSH
57513: PPUSH
// if not turrets or not factories then
57514: LD_VAR 0 1
57518: NOT
57519: PUSH
57520: LD_VAR 0 2
57524: NOT
57525: OR
57526: IFFALSE 57530
// exit ;
57528: GO 57837
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57530: LD_ADDR_VAR 0 10
57534: PUSH
57535: LD_INT 5
57537: PUSH
57538: LD_INT 6
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 4
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: LD_INT 5
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 24
57572: PUSH
57573: LD_INT 25
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 23
57582: PUSH
57583: LD_INT 27
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 42
57596: PUSH
57597: LD_INT 43
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 44
57606: PUSH
57607: LD_INT 46
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 45
57616: PUSH
57617: LD_INT 47
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: ST_TO_ADDR
// result := [ ] ;
57634: LD_ADDR_VAR 0 3
57638: PUSH
57639: EMPTY
57640: ST_TO_ADDR
// for i in turrets do
57641: LD_ADDR_VAR 0 4
57645: PUSH
57646: LD_VAR 0 1
57650: PUSH
57651: FOR_IN
57652: IFFALSE 57835
// begin nat := GetNation ( i ) ;
57654: LD_ADDR_VAR 0 7
57658: PUSH
57659: LD_VAR 0 4
57663: PPUSH
57664: CALL_OW 248
57668: ST_TO_ADDR
// weapon := 0 ;
57669: LD_ADDR_VAR 0 8
57673: PUSH
57674: LD_INT 0
57676: ST_TO_ADDR
// if not nat then
57677: LD_VAR 0 7
57681: NOT
57682: IFFALSE 57686
// continue ;
57684: GO 57651
// for j in list [ nat ] do
57686: LD_ADDR_VAR 0 5
57690: PUSH
57691: LD_VAR 0 10
57695: PUSH
57696: LD_VAR 0 7
57700: ARRAY
57701: PUSH
57702: FOR_IN
57703: IFFALSE 57744
// if GetBWeapon ( i ) = j [ 1 ] then
57705: LD_VAR 0 4
57709: PPUSH
57710: CALL_OW 269
57714: PUSH
57715: LD_VAR 0 5
57719: PUSH
57720: LD_INT 1
57722: ARRAY
57723: EQUAL
57724: IFFALSE 57742
// begin weapon := j [ 2 ] ;
57726: LD_ADDR_VAR 0 8
57730: PUSH
57731: LD_VAR 0 5
57735: PUSH
57736: LD_INT 2
57738: ARRAY
57739: ST_TO_ADDR
// break ;
57740: GO 57744
// end ;
57742: GO 57702
57744: POP
57745: POP
// if not weapon then
57746: LD_VAR 0 8
57750: NOT
57751: IFFALSE 57755
// continue ;
57753: GO 57651
// for k in factories do
57755: LD_ADDR_VAR 0 6
57759: PUSH
57760: LD_VAR 0 2
57764: PUSH
57765: FOR_IN
57766: IFFALSE 57831
// begin weapons := AvailableWeaponList ( k ) ;
57768: LD_ADDR_VAR 0 9
57772: PUSH
57773: LD_VAR 0 6
57777: PPUSH
57778: CALL_OW 478
57782: ST_TO_ADDR
// if not weapons then
57783: LD_VAR 0 9
57787: NOT
57788: IFFALSE 57792
// continue ;
57790: GO 57765
// if weapon in weapons then
57792: LD_VAR 0 8
57796: PUSH
57797: LD_VAR 0 9
57801: IN
57802: IFFALSE 57829
// begin result := [ i , weapon ] ;
57804: LD_ADDR_VAR 0 3
57808: PUSH
57809: LD_VAR 0 4
57813: PUSH
57814: LD_VAR 0 8
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: ST_TO_ADDR
// exit ;
57823: POP
57824: POP
57825: POP
57826: POP
57827: GO 57837
// end ; end ;
57829: GO 57765
57831: POP
57832: POP
// end ;
57833: GO 57651
57835: POP
57836: POP
// end ;
57837: LD_VAR 0 3
57841: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57842: LD_INT 0
57844: PPUSH
// if not side or side > 8 then
57845: LD_VAR 0 3
57849: NOT
57850: PUSH
57851: LD_VAR 0 3
57855: PUSH
57856: LD_INT 8
57858: GREATER
57859: OR
57860: IFFALSE 57864
// exit ;
57862: GO 57923
// if not range then
57864: LD_VAR 0 4
57868: NOT
57869: IFFALSE 57880
// range := - 12 ;
57871: LD_ADDR_VAR 0 4
57875: PUSH
57876: LD_INT 12
57878: NEG
57879: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57880: LD_VAR 0 1
57884: PPUSH
57885: LD_VAR 0 2
57889: PPUSH
57890: LD_VAR 0 3
57894: PPUSH
57895: LD_VAR 0 4
57899: PPUSH
57900: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57904: LD_VAR 0 1
57908: PPUSH
57909: LD_VAR 0 2
57913: PPUSH
57914: LD_VAR 0 3
57918: PPUSH
57919: CALL_OW 331
// end ;
57923: LD_VAR 0 5
57927: RET
// export function Video ( mode ) ; begin
57928: LD_INT 0
57930: PPUSH
// ingame_video = mode ;
57931: LD_ADDR_OWVAR 52
57935: PUSH
57936: LD_VAR 0 1
57940: ST_TO_ADDR
// interface_hidden = mode ;
57941: LD_ADDR_OWVAR 54
57945: PUSH
57946: LD_VAR 0 1
57950: ST_TO_ADDR
// end ;
57951: LD_VAR 0 2
57955: RET
// export function Join ( array , element ) ; begin
57956: LD_INT 0
57958: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57959: LD_ADDR_VAR 0 3
57963: PUSH
57964: LD_VAR 0 1
57968: PPUSH
57969: LD_VAR 0 1
57973: PUSH
57974: LD_INT 1
57976: PLUS
57977: PPUSH
57978: LD_VAR 0 2
57982: PPUSH
57983: CALL_OW 1
57987: ST_TO_ADDR
// end ;
57988: LD_VAR 0 3
57992: RET
// export function JoinUnion ( array , element ) ; begin
57993: LD_INT 0
57995: PPUSH
// result := array union element ;
57996: LD_ADDR_VAR 0 3
58000: PUSH
58001: LD_VAR 0 1
58005: PUSH
58006: LD_VAR 0 2
58010: UNION
58011: ST_TO_ADDR
// end ;
58012: LD_VAR 0 3
58016: RET
// export function GetBehemoths ( side ) ; begin
58017: LD_INT 0
58019: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58020: LD_ADDR_VAR 0 2
58024: PUSH
58025: LD_INT 22
58027: PUSH
58028: LD_VAR 0 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 31
58039: PUSH
58040: LD_INT 25
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PPUSH
58051: CALL_OW 69
58055: ST_TO_ADDR
// end ;
58056: LD_VAR 0 2
58060: RET
// export function Shuffle ( array ) ; var i , index ; begin
58061: LD_INT 0
58063: PPUSH
58064: PPUSH
58065: PPUSH
// result := [ ] ;
58066: LD_ADDR_VAR 0 2
58070: PUSH
58071: EMPTY
58072: ST_TO_ADDR
// if not array then
58073: LD_VAR 0 1
58077: NOT
58078: IFFALSE 58082
// exit ;
58080: GO 58181
// Randomize ;
58082: CALL_OW 10
// for i = array downto 1 do
58086: LD_ADDR_VAR 0 3
58090: PUSH
58091: DOUBLE
58092: LD_VAR 0 1
58096: INC
58097: ST_TO_ADDR
58098: LD_INT 1
58100: PUSH
58101: FOR_DOWNTO
58102: IFFALSE 58179
// begin index := rand ( 1 , array ) ;
58104: LD_ADDR_VAR 0 4
58108: PUSH
58109: LD_INT 1
58111: PPUSH
58112: LD_VAR 0 1
58116: PPUSH
58117: CALL_OW 12
58121: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58122: LD_ADDR_VAR 0 2
58126: PUSH
58127: LD_VAR 0 2
58131: PPUSH
58132: LD_VAR 0 2
58136: PUSH
58137: LD_INT 1
58139: PLUS
58140: PPUSH
58141: LD_VAR 0 1
58145: PUSH
58146: LD_VAR 0 4
58150: ARRAY
58151: PPUSH
58152: CALL_OW 2
58156: ST_TO_ADDR
// array := Delete ( array , index ) ;
58157: LD_ADDR_VAR 0 1
58161: PUSH
58162: LD_VAR 0 1
58166: PPUSH
58167: LD_VAR 0 4
58171: PPUSH
58172: CALL_OW 3
58176: ST_TO_ADDR
// end ;
58177: GO 58101
58179: POP
58180: POP
// end ;
58181: LD_VAR 0 2
58185: RET
// export function GetBaseMaterials ( base ) ; begin
58186: LD_INT 0
58188: PPUSH
// result := [ 0 , 0 , 0 ] ;
58189: LD_ADDR_VAR 0 2
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: ST_TO_ADDR
// if not base then
58208: LD_VAR 0 1
58212: NOT
58213: IFFALSE 58217
// exit ;
58215: GO 58266
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58217: LD_ADDR_VAR 0 2
58221: PUSH
58222: LD_VAR 0 1
58226: PPUSH
58227: LD_INT 1
58229: PPUSH
58230: CALL_OW 275
58234: PUSH
58235: LD_VAR 0 1
58239: PPUSH
58240: LD_INT 2
58242: PPUSH
58243: CALL_OW 275
58247: PUSH
58248: LD_VAR 0 1
58252: PPUSH
58253: LD_INT 3
58255: PPUSH
58256: CALL_OW 275
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: ST_TO_ADDR
// end ;
58266: LD_VAR 0 2
58270: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58271: LD_INT 0
58273: PPUSH
58274: PPUSH
// result := array ;
58275: LD_ADDR_VAR 0 3
58279: PUSH
58280: LD_VAR 0 1
58284: ST_TO_ADDR
// if size >= result then
58285: LD_VAR 0 2
58289: PUSH
58290: LD_VAR 0 3
58294: GREATEREQUAL
58295: IFFALSE 58299
// exit ;
58297: GO 58349
// if size then
58299: LD_VAR 0 2
58303: IFFALSE 58349
// for i := array downto size do
58305: LD_ADDR_VAR 0 4
58309: PUSH
58310: DOUBLE
58311: LD_VAR 0 1
58315: INC
58316: ST_TO_ADDR
58317: LD_VAR 0 2
58321: PUSH
58322: FOR_DOWNTO
58323: IFFALSE 58347
// result := Delete ( result , result ) ;
58325: LD_ADDR_VAR 0 3
58329: PUSH
58330: LD_VAR 0 3
58334: PPUSH
58335: LD_VAR 0 3
58339: PPUSH
58340: CALL_OW 3
58344: ST_TO_ADDR
58345: GO 58322
58347: POP
58348: POP
// end ;
58349: LD_VAR 0 3
58353: RET
// export function ComExit ( unit ) ; var tmp ; begin
58354: LD_INT 0
58356: PPUSH
58357: PPUSH
// if not IsInUnit ( unit ) then
58358: LD_VAR 0 1
58362: PPUSH
58363: CALL_OW 310
58367: NOT
58368: IFFALSE 58372
// exit ;
58370: GO 58432
// tmp := IsInUnit ( unit ) ;
58372: LD_ADDR_VAR 0 3
58376: PUSH
58377: LD_VAR 0 1
58381: PPUSH
58382: CALL_OW 310
58386: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58387: LD_VAR 0 3
58391: PPUSH
58392: CALL_OW 247
58396: PUSH
58397: LD_INT 2
58399: EQUAL
58400: IFFALSE 58413
// ComExitVehicle ( unit ) else
58402: LD_VAR 0 1
58406: PPUSH
58407: CALL_OW 121
58411: GO 58422
// ComExitBuilding ( unit ) ;
58413: LD_VAR 0 1
58417: PPUSH
58418: CALL_OW 122
// result := tmp ;
58422: LD_ADDR_VAR 0 2
58426: PUSH
58427: LD_VAR 0 3
58431: ST_TO_ADDR
// end ;
58432: LD_VAR 0 2
58436: RET
// export function ComExitAll ( units ) ; var i ; begin
58437: LD_INT 0
58439: PPUSH
58440: PPUSH
// if not units then
58441: LD_VAR 0 1
58445: NOT
58446: IFFALSE 58450
// exit ;
58448: GO 58476
// for i in units do
58450: LD_ADDR_VAR 0 3
58454: PUSH
58455: LD_VAR 0 1
58459: PUSH
58460: FOR_IN
58461: IFFALSE 58474
// ComExit ( i ) ;
58463: LD_VAR 0 3
58467: PPUSH
58468: CALL 58354 0 1
58472: GO 58460
58474: POP
58475: POP
// end ;
58476: LD_VAR 0 2
58480: RET
// export function ResetHc ; begin
58481: LD_INT 0
58483: PPUSH
// InitHc ;
58484: CALL_OW 19
// hc_importance := 0 ;
58488: LD_ADDR_OWVAR 32
58492: PUSH
58493: LD_INT 0
58495: ST_TO_ADDR
// end ;
58496: LD_VAR 0 1
58500: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58501: LD_INT 0
58503: PPUSH
58504: PPUSH
58505: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58506: LD_ADDR_VAR 0 6
58510: PUSH
58511: LD_VAR 0 1
58515: PUSH
58516: LD_VAR 0 3
58520: PLUS
58521: PUSH
58522: LD_INT 2
58524: DIV
58525: ST_TO_ADDR
// if _x < 0 then
58526: LD_VAR 0 6
58530: PUSH
58531: LD_INT 0
58533: LESS
58534: IFFALSE 58551
// _x := _x * - 1 ;
58536: LD_ADDR_VAR 0 6
58540: PUSH
58541: LD_VAR 0 6
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: MUL
58550: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58551: LD_ADDR_VAR 0 7
58555: PUSH
58556: LD_VAR 0 2
58560: PUSH
58561: LD_VAR 0 4
58565: PLUS
58566: PUSH
58567: LD_INT 2
58569: DIV
58570: ST_TO_ADDR
// if _y < 0 then
58571: LD_VAR 0 7
58575: PUSH
58576: LD_INT 0
58578: LESS
58579: IFFALSE 58596
// _y := _y * - 1 ;
58581: LD_ADDR_VAR 0 7
58585: PUSH
58586: LD_VAR 0 7
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: MUL
58595: ST_TO_ADDR
// result := [ _x , _y ] ;
58596: LD_ADDR_VAR 0 5
58600: PUSH
58601: LD_VAR 0 6
58605: PUSH
58606: LD_VAR 0 7
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: ST_TO_ADDR
// end ;
58615: LD_VAR 0 5
58619: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58620: LD_INT 0
58622: PPUSH
58623: PPUSH
58624: PPUSH
58625: PPUSH
// task := GetTaskList ( unit ) ;
58626: LD_ADDR_VAR 0 7
58630: PUSH
58631: LD_VAR 0 1
58635: PPUSH
58636: CALL_OW 437
58640: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58641: LD_VAR 0 7
58645: NOT
58646: PUSH
58647: LD_VAR 0 1
58651: PPUSH
58652: LD_VAR 0 2
58656: PPUSH
58657: CALL_OW 308
58661: NOT
58662: AND
58663: IFFALSE 58667
// exit ;
58665: GO 58785
// if IsInArea ( unit , area ) then
58667: LD_VAR 0 1
58671: PPUSH
58672: LD_VAR 0 2
58676: PPUSH
58677: CALL_OW 308
58681: IFFALSE 58699
// begin ComMoveToArea ( unit , goAway ) ;
58683: LD_VAR 0 1
58687: PPUSH
58688: LD_VAR 0 3
58692: PPUSH
58693: CALL_OW 113
// exit ;
58697: GO 58785
// end ; if task [ 1 ] [ 1 ] <> M then
58699: LD_VAR 0 7
58703: PUSH
58704: LD_INT 1
58706: ARRAY
58707: PUSH
58708: LD_INT 1
58710: ARRAY
58711: PUSH
58712: LD_STRING M
58714: NONEQUAL
58715: IFFALSE 58719
// exit ;
58717: GO 58785
// x := task [ 1 ] [ 2 ] ;
58719: LD_ADDR_VAR 0 5
58723: PUSH
58724: LD_VAR 0 7
58728: PUSH
58729: LD_INT 1
58731: ARRAY
58732: PUSH
58733: LD_INT 2
58735: ARRAY
58736: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58737: LD_ADDR_VAR 0 6
58741: PUSH
58742: LD_VAR 0 7
58746: PUSH
58747: LD_INT 1
58749: ARRAY
58750: PUSH
58751: LD_INT 3
58753: ARRAY
58754: ST_TO_ADDR
// if InArea ( x , y , area ) then
58755: LD_VAR 0 5
58759: PPUSH
58760: LD_VAR 0 6
58764: PPUSH
58765: LD_VAR 0 2
58769: PPUSH
58770: CALL_OW 309
58774: IFFALSE 58785
// ComStop ( unit ) ;
58776: LD_VAR 0 1
58780: PPUSH
58781: CALL_OW 141
// end ;
58785: LD_VAR 0 4
58789: RET
// export function Abs ( value ) ; begin
58790: LD_INT 0
58792: PPUSH
// result := value ;
58793: LD_ADDR_VAR 0 2
58797: PUSH
58798: LD_VAR 0 1
58802: ST_TO_ADDR
// if value < 0 then
58803: LD_VAR 0 1
58807: PUSH
58808: LD_INT 0
58810: LESS
58811: IFFALSE 58828
// result := value * - 1 ;
58813: LD_ADDR_VAR 0 2
58817: PUSH
58818: LD_VAR 0 1
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: MUL
58827: ST_TO_ADDR
// end ;
58828: LD_VAR 0 2
58832: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58833: LD_INT 0
58835: PPUSH
58836: PPUSH
58837: PPUSH
58838: PPUSH
58839: PPUSH
58840: PPUSH
58841: PPUSH
58842: PPUSH
// if not unit or not building then
58843: LD_VAR 0 1
58847: NOT
58848: PUSH
58849: LD_VAR 0 2
58853: NOT
58854: OR
58855: IFFALSE 58859
// exit ;
58857: GO 59085
// x := GetX ( building ) ;
58859: LD_ADDR_VAR 0 4
58863: PUSH
58864: LD_VAR 0 2
58868: PPUSH
58869: CALL_OW 250
58873: ST_TO_ADDR
// y := GetY ( building ) ;
58874: LD_ADDR_VAR 0 6
58878: PUSH
58879: LD_VAR 0 2
58883: PPUSH
58884: CALL_OW 251
58888: ST_TO_ADDR
// d := GetDir ( building ) ;
58889: LD_ADDR_VAR 0 8
58893: PUSH
58894: LD_VAR 0 2
58898: PPUSH
58899: CALL_OW 254
58903: ST_TO_ADDR
// r := 4 ;
58904: LD_ADDR_VAR 0 9
58908: PUSH
58909: LD_INT 4
58911: ST_TO_ADDR
// for i := 1 to 5 do
58912: LD_ADDR_VAR 0 10
58916: PUSH
58917: DOUBLE
58918: LD_INT 1
58920: DEC
58921: ST_TO_ADDR
58922: LD_INT 5
58924: PUSH
58925: FOR_TO
58926: IFFALSE 59083
// begin _x := ShiftX ( x , d , r + i ) ;
58928: LD_ADDR_VAR 0 5
58932: PUSH
58933: LD_VAR 0 4
58937: PPUSH
58938: LD_VAR 0 8
58942: PPUSH
58943: LD_VAR 0 9
58947: PUSH
58948: LD_VAR 0 10
58952: PLUS
58953: PPUSH
58954: CALL_OW 272
58958: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58959: LD_ADDR_VAR 0 7
58963: PUSH
58964: LD_VAR 0 6
58968: PPUSH
58969: LD_VAR 0 8
58973: PPUSH
58974: LD_VAR 0 9
58978: PUSH
58979: LD_VAR 0 10
58983: PLUS
58984: PPUSH
58985: CALL_OW 273
58989: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58990: LD_VAR 0 5
58994: PPUSH
58995: LD_VAR 0 7
58999: PPUSH
59000: CALL_OW 488
59004: PUSH
59005: LD_VAR 0 5
59009: PPUSH
59010: LD_VAR 0 7
59014: PPUSH
59015: CALL_OW 428
59019: PPUSH
59020: CALL_OW 247
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: IN
59035: NOT
59036: AND
59037: IFFALSE 59081
// begin ComMoveXY ( unit , _x , _y ) ;
59039: LD_VAR 0 1
59043: PPUSH
59044: LD_VAR 0 5
59048: PPUSH
59049: LD_VAR 0 7
59053: PPUSH
59054: CALL_OW 111
// result := [ _x , _y ] ;
59058: LD_ADDR_VAR 0 3
59062: PUSH
59063: LD_VAR 0 5
59067: PUSH
59068: LD_VAR 0 7
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// exit ;
59077: POP
59078: POP
59079: GO 59085
// end ; end ;
59081: GO 58925
59083: POP
59084: POP
// end ;
59085: LD_VAR 0 3
59089: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59090: LD_INT 0
59092: PPUSH
59093: PPUSH
59094: PPUSH
// result := 0 ;
59095: LD_ADDR_VAR 0 3
59099: PUSH
59100: LD_INT 0
59102: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59103: LD_VAR 0 1
59107: PUSH
59108: LD_INT 0
59110: LESS
59111: PUSH
59112: LD_VAR 0 1
59116: PUSH
59117: LD_INT 8
59119: GREATER
59120: OR
59121: PUSH
59122: LD_VAR 0 2
59126: PUSH
59127: LD_INT 0
59129: LESS
59130: OR
59131: PUSH
59132: LD_VAR 0 2
59136: PUSH
59137: LD_INT 8
59139: GREATER
59140: OR
59141: IFFALSE 59145
// exit ;
59143: GO 59220
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59145: LD_ADDR_VAR 0 4
59149: PUSH
59150: LD_INT 22
59152: PUSH
59153: LD_VAR 0 2
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PPUSH
59162: CALL_OW 69
59166: PUSH
59167: FOR_IN
59168: IFFALSE 59218
// begin un := UnitShoot ( i ) ;
59170: LD_ADDR_VAR 0 5
59174: PUSH
59175: LD_VAR 0 4
59179: PPUSH
59180: CALL_OW 504
59184: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59185: LD_VAR 0 5
59189: PPUSH
59190: CALL_OW 255
59194: PUSH
59195: LD_VAR 0 1
59199: EQUAL
59200: IFFALSE 59216
// begin result := un ;
59202: LD_ADDR_VAR 0 3
59206: PUSH
59207: LD_VAR 0 5
59211: ST_TO_ADDR
// exit ;
59212: POP
59213: POP
59214: GO 59220
// end ; end ;
59216: GO 59167
59218: POP
59219: POP
// end ;
59220: LD_VAR 0 3
59224: RET
// export function GetCargoBay ( units ) ; begin
59225: LD_INT 0
59227: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59228: LD_ADDR_VAR 0 2
59232: PUSH
59233: LD_VAR 0 1
59237: PPUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 34
59243: PUSH
59244: LD_INT 12
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 34
59253: PUSH
59254: LD_INT 51
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 34
59263: PUSH
59264: LD_INT 32
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 34
59273: PUSH
59274: LD_INT 89
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: PPUSH
59288: CALL_OW 72
59292: ST_TO_ADDR
// end ;
59293: LD_VAR 0 2
59297: RET
// export function Negate ( value ) ; begin
59298: LD_INT 0
59300: PPUSH
// result := not value ;
59301: LD_ADDR_VAR 0 2
59305: PUSH
59306: LD_VAR 0 1
59310: NOT
59311: ST_TO_ADDR
// end ;
59312: LD_VAR 0 2
59316: RET
// export function Inc ( value ) ; begin
59317: LD_INT 0
59319: PPUSH
// result := value + 1 ;
59320: LD_ADDR_VAR 0 2
59324: PUSH
59325: LD_VAR 0 1
59329: PUSH
59330: LD_INT 1
59332: PLUS
59333: ST_TO_ADDR
// end ;
59334: LD_VAR 0 2
59338: RET
// export function Dec ( value ) ; begin
59339: LD_INT 0
59341: PPUSH
// result := value - 1 ;
59342: LD_ADDR_VAR 0 2
59346: PUSH
59347: LD_VAR 0 1
59351: PUSH
59352: LD_INT 1
59354: MINUS
59355: ST_TO_ADDR
// end ;
59356: LD_VAR 0 2
59360: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59361: LD_INT 0
59363: PPUSH
59364: PPUSH
59365: PPUSH
59366: PPUSH
59367: PPUSH
59368: PPUSH
59369: PPUSH
59370: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59371: LD_VAR 0 1
59375: PPUSH
59376: LD_VAR 0 2
59380: PPUSH
59381: CALL_OW 488
59385: NOT
59386: PUSH
59387: LD_VAR 0 3
59391: PPUSH
59392: LD_VAR 0 4
59396: PPUSH
59397: CALL_OW 488
59401: NOT
59402: OR
59403: IFFALSE 59416
// begin result := - 1 ;
59405: LD_ADDR_VAR 0 5
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: ST_TO_ADDR
// exit ;
59414: GO 59651
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59416: LD_ADDR_VAR 0 12
59420: PUSH
59421: LD_VAR 0 1
59425: PPUSH
59426: LD_VAR 0 2
59430: PPUSH
59431: LD_VAR 0 3
59435: PPUSH
59436: LD_VAR 0 4
59440: PPUSH
59441: CALL 58501 0 4
59445: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59446: LD_ADDR_VAR 0 11
59450: PUSH
59451: LD_VAR 0 1
59455: PPUSH
59456: LD_VAR 0 2
59460: PPUSH
59461: LD_VAR 0 12
59465: PUSH
59466: LD_INT 1
59468: ARRAY
59469: PPUSH
59470: LD_VAR 0 12
59474: PUSH
59475: LD_INT 2
59477: ARRAY
59478: PPUSH
59479: CALL_OW 298
59483: ST_TO_ADDR
// distance := 9999 ;
59484: LD_ADDR_VAR 0 10
59488: PUSH
59489: LD_INT 9999
59491: ST_TO_ADDR
// for i := 0 to 5 do
59492: LD_ADDR_VAR 0 6
59496: PUSH
59497: DOUBLE
59498: LD_INT 0
59500: DEC
59501: ST_TO_ADDR
59502: LD_INT 5
59504: PUSH
59505: FOR_TO
59506: IFFALSE 59649
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59508: LD_ADDR_VAR 0 7
59512: PUSH
59513: LD_VAR 0 1
59517: PPUSH
59518: LD_VAR 0 6
59522: PPUSH
59523: LD_VAR 0 11
59527: PPUSH
59528: CALL_OW 272
59532: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59533: LD_ADDR_VAR 0 8
59537: PUSH
59538: LD_VAR 0 2
59542: PPUSH
59543: LD_VAR 0 6
59547: PPUSH
59548: LD_VAR 0 11
59552: PPUSH
59553: CALL_OW 273
59557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59558: LD_VAR 0 7
59562: PPUSH
59563: LD_VAR 0 8
59567: PPUSH
59568: CALL_OW 488
59572: NOT
59573: IFFALSE 59577
// continue ;
59575: GO 59505
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59577: LD_ADDR_VAR 0 9
59581: PUSH
59582: LD_VAR 0 12
59586: PUSH
59587: LD_INT 1
59589: ARRAY
59590: PPUSH
59591: LD_VAR 0 12
59595: PUSH
59596: LD_INT 2
59598: ARRAY
59599: PPUSH
59600: LD_VAR 0 7
59604: PPUSH
59605: LD_VAR 0 8
59609: PPUSH
59610: CALL_OW 298
59614: ST_TO_ADDR
// if tmp < distance then
59615: LD_VAR 0 9
59619: PUSH
59620: LD_VAR 0 10
59624: LESS
59625: IFFALSE 59647
// begin result := i ;
59627: LD_ADDR_VAR 0 5
59631: PUSH
59632: LD_VAR 0 6
59636: ST_TO_ADDR
// distance := tmp ;
59637: LD_ADDR_VAR 0 10
59641: PUSH
59642: LD_VAR 0 9
59646: ST_TO_ADDR
// end ; end ;
59647: GO 59505
59649: POP
59650: POP
// end ;
59651: LD_VAR 0 5
59655: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59656: LD_INT 0
59658: PPUSH
59659: PPUSH
// if not driver or not IsInUnit ( driver ) then
59660: LD_VAR 0 1
59664: NOT
59665: PUSH
59666: LD_VAR 0 1
59670: PPUSH
59671: CALL_OW 310
59675: NOT
59676: OR
59677: IFFALSE 59681
// exit ;
59679: GO 59771
// vehicle := IsInUnit ( driver ) ;
59681: LD_ADDR_VAR 0 3
59685: PUSH
59686: LD_VAR 0 1
59690: PPUSH
59691: CALL_OW 310
59695: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59696: LD_VAR 0 1
59700: PPUSH
59701: LD_STRING \
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: PUSH
59731: LD_STRING E
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_VAR 0 3
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PPUSH
59767: CALL_OW 446
// end ;
59771: LD_VAR 0 2
59775: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59776: LD_INT 0
59778: PPUSH
59779: PPUSH
// if not driver or not IsInUnit ( driver ) then
59780: LD_VAR 0 1
59784: NOT
59785: PUSH
59786: LD_VAR 0 1
59790: PPUSH
59791: CALL_OW 310
59795: NOT
59796: OR
59797: IFFALSE 59801
// exit ;
59799: GO 59891
// vehicle := IsInUnit ( driver ) ;
59801: LD_ADDR_VAR 0 3
59805: PUSH
59806: LD_VAR 0 1
59810: PPUSH
59811: CALL_OW 310
59815: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59816: LD_VAR 0 1
59820: PPUSH
59821: LD_STRING \
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: LD_INT 0
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: PUSH
59851: LD_STRING E
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_VAR 0 3
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PPUSH
59887: CALL_OW 447
// end ;
59891: LD_VAR 0 2
59895: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59896: LD_INT 0
59898: PPUSH
59899: PPUSH
59900: PPUSH
// tmp := [ ] ;
59901: LD_ADDR_VAR 0 5
59905: PUSH
59906: EMPTY
59907: ST_TO_ADDR
// for i in units do
59908: LD_ADDR_VAR 0 4
59912: PUSH
59913: LD_VAR 0 1
59917: PUSH
59918: FOR_IN
59919: IFFALSE 59957
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59921: LD_ADDR_VAR 0 5
59925: PUSH
59926: LD_VAR 0 5
59930: PPUSH
59931: LD_VAR 0 5
59935: PUSH
59936: LD_INT 1
59938: PLUS
59939: PPUSH
59940: LD_VAR 0 4
59944: PPUSH
59945: CALL_OW 256
59949: PPUSH
59950: CALL_OW 2
59954: ST_TO_ADDR
59955: GO 59918
59957: POP
59958: POP
// if not tmp then
59959: LD_VAR 0 5
59963: NOT
59964: IFFALSE 59968
// exit ;
59966: GO 60016
// if asc then
59968: LD_VAR 0 2
59972: IFFALSE 59996
// result := SortListByListAsc ( units , tmp ) else
59974: LD_ADDR_VAR 0 3
59978: PUSH
59979: LD_VAR 0 1
59983: PPUSH
59984: LD_VAR 0 5
59988: PPUSH
59989: CALL_OW 76
59993: ST_TO_ADDR
59994: GO 60016
// result := SortListByListDesc ( units , tmp ) ;
59996: LD_ADDR_VAR 0 3
60000: PUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: LD_VAR 0 5
60010: PPUSH
60011: CALL_OW 77
60015: ST_TO_ADDR
// end ;
60016: LD_VAR 0 3
60020: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60021: LD_INT 0
60023: PPUSH
60024: PPUSH
// task := GetTaskList ( mech ) ;
60025: LD_ADDR_VAR 0 4
60029: PUSH
60030: LD_VAR 0 1
60034: PPUSH
60035: CALL_OW 437
60039: ST_TO_ADDR
// if not task then
60040: LD_VAR 0 4
60044: NOT
60045: IFFALSE 60049
// exit ;
60047: GO 60091
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60049: LD_ADDR_VAR 0 3
60053: PUSH
60054: LD_VAR 0 4
60058: PUSH
60059: LD_INT 1
60061: ARRAY
60062: PUSH
60063: LD_INT 1
60065: ARRAY
60066: PUSH
60067: LD_STRING r
60069: EQUAL
60070: PUSH
60071: LD_VAR 0 4
60075: PUSH
60076: LD_INT 1
60078: ARRAY
60079: PUSH
60080: LD_INT 4
60082: ARRAY
60083: PUSH
60084: LD_VAR 0 2
60088: EQUAL
60089: AND
60090: ST_TO_ADDR
// end ;
60091: LD_VAR 0 3
60095: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60096: LD_INT 0
60098: PPUSH
// SetDir ( unit , d ) ;
60099: LD_VAR 0 1
60103: PPUSH
60104: LD_VAR 0 4
60108: PPUSH
60109: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60113: LD_VAR 0 1
60117: PPUSH
60118: LD_VAR 0 2
60122: PPUSH
60123: LD_VAR 0 3
60127: PPUSH
60128: LD_VAR 0 5
60132: PPUSH
60133: CALL_OW 48
// end ;
60137: LD_VAR 0 6
60141: RET
// export function ToNaturalNumber ( number ) ; begin
60142: LD_INT 0
60144: PPUSH
// result := number div 1 ;
60145: LD_ADDR_VAR 0 2
60149: PUSH
60150: LD_VAR 0 1
60154: PUSH
60155: LD_INT 1
60157: DIV
60158: ST_TO_ADDR
// if number < 0 then
60159: LD_VAR 0 1
60163: PUSH
60164: LD_INT 0
60166: LESS
60167: IFFALSE 60177
// result := 0 ;
60169: LD_ADDR_VAR 0 2
60173: PUSH
60174: LD_INT 0
60176: ST_TO_ADDR
// end ;
60177: LD_VAR 0 2
60181: RET
// export function SortByClass ( units , class ) ; var un ; begin
60182: LD_INT 0
60184: PPUSH
60185: PPUSH
// if not units or not class then
60186: LD_VAR 0 1
60190: NOT
60191: PUSH
60192: LD_VAR 0 2
60196: NOT
60197: OR
60198: IFFALSE 60202
// exit ;
60200: GO 60297
// result := [ ] ;
60202: LD_ADDR_VAR 0 3
60206: PUSH
60207: EMPTY
60208: ST_TO_ADDR
// for un in units do
60209: LD_ADDR_VAR 0 4
60213: PUSH
60214: LD_VAR 0 1
60218: PUSH
60219: FOR_IN
60220: IFFALSE 60295
// if GetClass ( un ) = class then
60222: LD_VAR 0 4
60226: PPUSH
60227: CALL_OW 257
60231: PUSH
60232: LD_VAR 0 2
60236: EQUAL
60237: IFFALSE 60264
// result := Insert ( result , 1 , un ) else
60239: LD_ADDR_VAR 0 3
60243: PUSH
60244: LD_VAR 0 3
60248: PPUSH
60249: LD_INT 1
60251: PPUSH
60252: LD_VAR 0 4
60256: PPUSH
60257: CALL_OW 2
60261: ST_TO_ADDR
60262: GO 60293
// result := Replace ( result , result + 1 , un ) ;
60264: LD_ADDR_VAR 0 3
60268: PUSH
60269: LD_VAR 0 3
60273: PPUSH
60274: LD_VAR 0 3
60278: PUSH
60279: LD_INT 1
60281: PLUS
60282: PPUSH
60283: LD_VAR 0 4
60287: PPUSH
60288: CALL_OW 1
60292: ST_TO_ADDR
60293: GO 60219
60295: POP
60296: POP
// end ;
60297: LD_VAR 0 3
60301: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60302: LD_INT 0
60304: PPUSH
60305: PPUSH
60306: PPUSH
60307: PPUSH
60308: PPUSH
60309: PPUSH
60310: PPUSH
// result := [ ] ;
60311: LD_ADDR_VAR 0 4
60315: PUSH
60316: EMPTY
60317: ST_TO_ADDR
// if x - r < 0 then
60318: LD_VAR 0 1
60322: PUSH
60323: LD_VAR 0 3
60327: MINUS
60328: PUSH
60329: LD_INT 0
60331: LESS
60332: IFFALSE 60344
// min_x := 0 else
60334: LD_ADDR_VAR 0 8
60338: PUSH
60339: LD_INT 0
60341: ST_TO_ADDR
60342: GO 60360
// min_x := x - r ;
60344: LD_ADDR_VAR 0 8
60348: PUSH
60349: LD_VAR 0 1
60353: PUSH
60354: LD_VAR 0 3
60358: MINUS
60359: ST_TO_ADDR
// if y - r < 0 then
60360: LD_VAR 0 2
60364: PUSH
60365: LD_VAR 0 3
60369: MINUS
60370: PUSH
60371: LD_INT 0
60373: LESS
60374: IFFALSE 60386
// min_y := 0 else
60376: LD_ADDR_VAR 0 7
60380: PUSH
60381: LD_INT 0
60383: ST_TO_ADDR
60384: GO 60402
// min_y := y - r ;
60386: LD_ADDR_VAR 0 7
60390: PUSH
60391: LD_VAR 0 2
60395: PUSH
60396: LD_VAR 0 3
60400: MINUS
60401: ST_TO_ADDR
// max_x := x + r ;
60402: LD_ADDR_VAR 0 9
60406: PUSH
60407: LD_VAR 0 1
60411: PUSH
60412: LD_VAR 0 3
60416: PLUS
60417: ST_TO_ADDR
// max_y := y + r ;
60418: LD_ADDR_VAR 0 10
60422: PUSH
60423: LD_VAR 0 2
60427: PUSH
60428: LD_VAR 0 3
60432: PLUS
60433: ST_TO_ADDR
// for _x = min_x to max_x do
60434: LD_ADDR_VAR 0 5
60438: PUSH
60439: DOUBLE
60440: LD_VAR 0 8
60444: DEC
60445: ST_TO_ADDR
60446: LD_VAR 0 9
60450: PUSH
60451: FOR_TO
60452: IFFALSE 60553
// for _y = min_y to max_y do
60454: LD_ADDR_VAR 0 6
60458: PUSH
60459: DOUBLE
60460: LD_VAR 0 7
60464: DEC
60465: ST_TO_ADDR
60466: LD_VAR 0 10
60470: PUSH
60471: FOR_TO
60472: IFFALSE 60549
// begin if not ValidHex ( _x , _y ) then
60474: LD_VAR 0 5
60478: PPUSH
60479: LD_VAR 0 6
60483: PPUSH
60484: CALL_OW 488
60488: NOT
60489: IFFALSE 60493
// continue ;
60491: GO 60471
// if GetResourceTypeXY ( _x , _y ) then
60493: LD_VAR 0 5
60497: PPUSH
60498: LD_VAR 0 6
60502: PPUSH
60503: CALL_OW 283
60507: IFFALSE 60547
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60509: LD_ADDR_VAR 0 4
60513: PUSH
60514: LD_VAR 0 4
60518: PPUSH
60519: LD_VAR 0 4
60523: PUSH
60524: LD_INT 1
60526: PLUS
60527: PPUSH
60528: LD_VAR 0 5
60532: PUSH
60533: LD_VAR 0 6
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PPUSH
60542: CALL_OW 1
60546: ST_TO_ADDR
// end ;
60547: GO 60471
60549: POP
60550: POP
60551: GO 60451
60553: POP
60554: POP
// end ;
60555: LD_VAR 0 4
60559: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60560: LD_INT 0
60562: PPUSH
60563: PPUSH
60564: PPUSH
60565: PPUSH
60566: PPUSH
60567: PPUSH
60568: PPUSH
60569: PPUSH
// if not units then
60570: LD_VAR 0 1
60574: NOT
60575: IFFALSE 60579
// exit ;
60577: GO 61103
// result := UnitFilter ( units , [ f_ok ] ) ;
60579: LD_ADDR_VAR 0 3
60583: PUSH
60584: LD_VAR 0 1
60588: PPUSH
60589: LD_INT 50
60591: PUSH
60592: EMPTY
60593: LIST
60594: PPUSH
60595: CALL_OW 72
60599: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60600: LD_ADDR_VAR 0 8
60604: PUSH
60605: LD_VAR 0 1
60609: PUSH
60610: LD_INT 1
60612: ARRAY
60613: PPUSH
60614: CALL_OW 255
60618: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60619: LD_ADDR_VAR 0 10
60623: PUSH
60624: LD_INT 29
60626: PUSH
60627: LD_INT 91
60629: PUSH
60630: LD_INT 49
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: ST_TO_ADDR
// if not result then
60638: LD_VAR 0 3
60642: NOT
60643: IFFALSE 60647
// exit ;
60645: GO 61103
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60647: LD_ADDR_VAR 0 5
60651: PUSH
60652: LD_INT 81
60654: PUSH
60655: LD_VAR 0 8
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PPUSH
60664: CALL_OW 69
60668: ST_TO_ADDR
// for i in result do
60669: LD_ADDR_VAR 0 4
60673: PUSH
60674: LD_VAR 0 3
60678: PUSH
60679: FOR_IN
60680: IFFALSE 61101
// begin tag := GetTag ( i ) + 1 ;
60682: LD_ADDR_VAR 0 9
60686: PUSH
60687: LD_VAR 0 4
60691: PPUSH
60692: CALL_OW 110
60696: PUSH
60697: LD_INT 1
60699: PLUS
60700: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60701: LD_ADDR_VAR 0 7
60705: PUSH
60706: LD_VAR 0 4
60710: PPUSH
60711: CALL_OW 250
60715: PPUSH
60716: LD_VAR 0 4
60720: PPUSH
60721: CALL_OW 251
60725: PPUSH
60726: LD_INT 6
60728: PPUSH
60729: CALL 60302 0 3
60733: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60734: LD_VAR 0 4
60738: PPUSH
60739: CALL_OW 247
60743: PUSH
60744: LD_INT 2
60746: EQUAL
60747: PUSH
60748: LD_VAR 0 7
60752: AND
60753: PUSH
60754: LD_VAR 0 4
60758: PPUSH
60759: CALL_OW 264
60763: PUSH
60764: LD_VAR 0 10
60768: IN
60769: NOT
60770: AND
60771: IFFALSE 60810
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60773: LD_VAR 0 4
60777: PPUSH
60778: LD_VAR 0 7
60782: PUSH
60783: LD_INT 1
60785: ARRAY
60786: PUSH
60787: LD_INT 1
60789: ARRAY
60790: PPUSH
60791: LD_VAR 0 7
60795: PUSH
60796: LD_INT 1
60798: ARRAY
60799: PUSH
60800: LD_INT 2
60802: ARRAY
60803: PPUSH
60804: CALL_OW 116
60808: GO 61099
// if path > tag then
60810: LD_VAR 0 2
60814: PUSH
60815: LD_VAR 0 9
60819: GREATER
60820: IFFALSE 61028
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60822: LD_ADDR_VAR 0 6
60826: PUSH
60827: LD_VAR 0 5
60831: PPUSH
60832: LD_INT 91
60834: PUSH
60835: LD_VAR 0 4
60839: PUSH
60840: LD_INT 8
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: PPUSH
60848: CALL_OW 72
60852: ST_TO_ADDR
// if nearEnemy then
60853: LD_VAR 0 6
60857: IFFALSE 60926
// begin if GetWeapon ( i ) = ru_time_lapser then
60859: LD_VAR 0 4
60863: PPUSH
60864: CALL_OW 264
60868: PUSH
60869: LD_INT 49
60871: EQUAL
60872: IFFALSE 60900
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60874: LD_VAR 0 4
60878: PPUSH
60879: LD_VAR 0 6
60883: PPUSH
60884: LD_VAR 0 4
60888: PPUSH
60889: CALL_OW 74
60893: PPUSH
60894: CALL_OW 112
60898: GO 60924
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60900: LD_VAR 0 4
60904: PPUSH
60905: LD_VAR 0 6
60909: PPUSH
60910: LD_VAR 0 4
60914: PPUSH
60915: CALL_OW 74
60919: PPUSH
60920: CALL 62028 0 2
// end else
60924: GO 61026
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60926: LD_VAR 0 4
60930: PPUSH
60931: LD_VAR 0 2
60935: PUSH
60936: LD_VAR 0 9
60940: ARRAY
60941: PUSH
60942: LD_INT 1
60944: ARRAY
60945: PPUSH
60946: LD_VAR 0 2
60950: PUSH
60951: LD_VAR 0 9
60955: ARRAY
60956: PUSH
60957: LD_INT 2
60959: ARRAY
60960: PPUSH
60961: CALL_OW 297
60965: PUSH
60966: LD_INT 6
60968: GREATER
60969: IFFALSE 61012
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60971: LD_VAR 0 4
60975: PPUSH
60976: LD_VAR 0 2
60980: PUSH
60981: LD_VAR 0 9
60985: ARRAY
60986: PUSH
60987: LD_INT 1
60989: ARRAY
60990: PPUSH
60991: LD_VAR 0 2
60995: PUSH
60996: LD_VAR 0 9
61000: ARRAY
61001: PUSH
61002: LD_INT 2
61004: ARRAY
61005: PPUSH
61006: CALL_OW 114
61010: GO 61026
// SetTag ( i , tag ) ;
61012: LD_VAR 0 4
61016: PPUSH
61017: LD_VAR 0 9
61021: PPUSH
61022: CALL_OW 109
// end else
61026: GO 61099
// if enemy then
61028: LD_VAR 0 5
61032: IFFALSE 61099
// begin if GetWeapon ( i ) = ru_time_lapser then
61034: LD_VAR 0 4
61038: PPUSH
61039: CALL_OW 264
61043: PUSH
61044: LD_INT 49
61046: EQUAL
61047: IFFALSE 61075
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61049: LD_VAR 0 4
61053: PPUSH
61054: LD_VAR 0 5
61058: PPUSH
61059: LD_VAR 0 4
61063: PPUSH
61064: CALL_OW 74
61068: PPUSH
61069: CALL_OW 112
61073: GO 61099
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61075: LD_VAR 0 4
61079: PPUSH
61080: LD_VAR 0 5
61084: PPUSH
61085: LD_VAR 0 4
61089: PPUSH
61090: CALL_OW 74
61094: PPUSH
61095: CALL 62028 0 2
// end ; end ;
61099: GO 60679
61101: POP
61102: POP
// end ;
61103: LD_VAR 0 3
61107: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61108: LD_INT 0
61110: PPUSH
61111: PPUSH
61112: PPUSH
// if not unit or IsInUnit ( unit ) then
61113: LD_VAR 0 1
61117: NOT
61118: PUSH
61119: LD_VAR 0 1
61123: PPUSH
61124: CALL_OW 310
61128: OR
61129: IFFALSE 61133
// exit ;
61131: GO 61224
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61133: LD_ADDR_VAR 0 4
61137: PUSH
61138: LD_VAR 0 1
61142: PPUSH
61143: CALL_OW 250
61147: PPUSH
61148: LD_VAR 0 2
61152: PPUSH
61153: LD_INT 1
61155: PPUSH
61156: CALL_OW 272
61160: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61161: LD_ADDR_VAR 0 5
61165: PUSH
61166: LD_VAR 0 1
61170: PPUSH
61171: CALL_OW 251
61175: PPUSH
61176: LD_VAR 0 2
61180: PPUSH
61181: LD_INT 1
61183: PPUSH
61184: CALL_OW 273
61188: ST_TO_ADDR
// if ValidHex ( x , y ) then
61189: LD_VAR 0 4
61193: PPUSH
61194: LD_VAR 0 5
61198: PPUSH
61199: CALL_OW 488
61203: IFFALSE 61224
// ComTurnXY ( unit , x , y ) ;
61205: LD_VAR 0 1
61209: PPUSH
61210: LD_VAR 0 4
61214: PPUSH
61215: LD_VAR 0 5
61219: PPUSH
61220: CALL_OW 118
// end ;
61224: LD_VAR 0 3
61228: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61229: LD_INT 0
61231: PPUSH
61232: PPUSH
// result := false ;
61233: LD_ADDR_VAR 0 3
61237: PUSH
61238: LD_INT 0
61240: ST_TO_ADDR
// if not units then
61241: LD_VAR 0 2
61245: NOT
61246: IFFALSE 61250
// exit ;
61248: GO 61295
// for i in units do
61250: LD_ADDR_VAR 0 4
61254: PUSH
61255: LD_VAR 0 2
61259: PUSH
61260: FOR_IN
61261: IFFALSE 61293
// if See ( side , i ) then
61263: LD_VAR 0 1
61267: PPUSH
61268: LD_VAR 0 4
61272: PPUSH
61273: CALL_OW 292
61277: IFFALSE 61291
// begin result := true ;
61279: LD_ADDR_VAR 0 3
61283: PUSH
61284: LD_INT 1
61286: ST_TO_ADDR
// exit ;
61287: POP
61288: POP
61289: GO 61295
// end ;
61291: GO 61260
61293: POP
61294: POP
// end ;
61295: LD_VAR 0 3
61299: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61300: LD_INT 0
61302: PPUSH
61303: PPUSH
61304: PPUSH
61305: PPUSH
// if not unit or not points then
61306: LD_VAR 0 1
61310: NOT
61311: PUSH
61312: LD_VAR 0 2
61316: NOT
61317: OR
61318: IFFALSE 61322
// exit ;
61320: GO 61412
// dist := 99999 ;
61322: LD_ADDR_VAR 0 5
61326: PUSH
61327: LD_INT 99999
61329: ST_TO_ADDR
// for i in points do
61330: LD_ADDR_VAR 0 4
61334: PUSH
61335: LD_VAR 0 2
61339: PUSH
61340: FOR_IN
61341: IFFALSE 61410
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61343: LD_ADDR_VAR 0 6
61347: PUSH
61348: LD_VAR 0 1
61352: PPUSH
61353: LD_VAR 0 4
61357: PUSH
61358: LD_INT 1
61360: ARRAY
61361: PPUSH
61362: LD_VAR 0 4
61366: PUSH
61367: LD_INT 2
61369: ARRAY
61370: PPUSH
61371: CALL_OW 297
61375: ST_TO_ADDR
// if tmpDist < dist then
61376: LD_VAR 0 6
61380: PUSH
61381: LD_VAR 0 5
61385: LESS
61386: IFFALSE 61408
// begin result := i ;
61388: LD_ADDR_VAR 0 3
61392: PUSH
61393: LD_VAR 0 4
61397: ST_TO_ADDR
// dist := tmpDist ;
61398: LD_ADDR_VAR 0 5
61402: PUSH
61403: LD_VAR 0 6
61407: ST_TO_ADDR
// end ; end ;
61408: GO 61340
61410: POP
61411: POP
// end ;
61412: LD_VAR 0 3
61416: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61417: LD_INT 0
61419: PPUSH
// uc_side := side ;
61420: LD_ADDR_OWVAR 20
61424: PUSH
61425: LD_VAR 0 1
61429: ST_TO_ADDR
// uc_nation := 3 ;
61430: LD_ADDR_OWVAR 21
61434: PUSH
61435: LD_INT 3
61437: ST_TO_ADDR
// vc_chassis := 25 ;
61438: LD_ADDR_OWVAR 37
61442: PUSH
61443: LD_INT 25
61445: ST_TO_ADDR
// vc_engine := engine_siberite ;
61446: LD_ADDR_OWVAR 39
61450: PUSH
61451: LD_INT 3
61453: ST_TO_ADDR
// vc_control := control_computer ;
61454: LD_ADDR_OWVAR 38
61458: PUSH
61459: LD_INT 3
61461: ST_TO_ADDR
// vc_weapon := 59 ;
61462: LD_ADDR_OWVAR 40
61466: PUSH
61467: LD_INT 59
61469: ST_TO_ADDR
// result := CreateVehicle ;
61470: LD_ADDR_VAR 0 5
61474: PUSH
61475: CALL_OW 45
61479: ST_TO_ADDR
// SetDir ( result , d ) ;
61480: LD_VAR 0 5
61484: PPUSH
61485: LD_VAR 0 4
61489: PPUSH
61490: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61494: LD_VAR 0 5
61498: PPUSH
61499: LD_VAR 0 2
61503: PPUSH
61504: LD_VAR 0 3
61508: PPUSH
61509: LD_INT 0
61511: PPUSH
61512: CALL_OW 48
// end ;
61516: LD_VAR 0 5
61520: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61521: LD_INT 0
61523: PPUSH
61524: PPUSH
61525: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61526: LD_ADDR_VAR 0 2
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61549: LD_VAR 0 1
61553: NOT
61554: PUSH
61555: LD_VAR 0 1
61559: PPUSH
61560: CALL_OW 264
61564: PUSH
61565: LD_INT 12
61567: PUSH
61568: LD_INT 51
61570: PUSH
61571: LD_INT 32
61573: PUSH
61574: LD_INT 89
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: IN
61583: NOT
61584: OR
61585: IFFALSE 61589
// exit ;
61587: GO 61687
// for i := 1 to 3 do
61589: LD_ADDR_VAR 0 3
61593: PUSH
61594: DOUBLE
61595: LD_INT 1
61597: DEC
61598: ST_TO_ADDR
61599: LD_INT 3
61601: PUSH
61602: FOR_TO
61603: IFFALSE 61685
// begin tmp := GetCargo ( cargo , i ) ;
61605: LD_ADDR_VAR 0 4
61609: PUSH
61610: LD_VAR 0 1
61614: PPUSH
61615: LD_VAR 0 3
61619: PPUSH
61620: CALL_OW 289
61624: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61625: LD_ADDR_VAR 0 2
61629: PUSH
61630: LD_VAR 0 2
61634: PPUSH
61635: LD_VAR 0 3
61639: PPUSH
61640: LD_VAR 0 4
61644: PPUSH
61645: CALL_OW 1
61649: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61650: LD_ADDR_VAR 0 2
61654: PUSH
61655: LD_VAR 0 2
61659: PPUSH
61660: LD_INT 4
61662: PPUSH
61663: LD_VAR 0 2
61667: PUSH
61668: LD_INT 4
61670: ARRAY
61671: PUSH
61672: LD_VAR 0 4
61676: PLUS
61677: PPUSH
61678: CALL_OW 1
61682: ST_TO_ADDR
// end ;
61683: GO 61602
61685: POP
61686: POP
// end ;
61687: LD_VAR 0 2
61691: RET
// export function Length ( array ) ; begin
61692: LD_INT 0
61694: PPUSH
// result := array + 0 ;
61695: LD_ADDR_VAR 0 2
61699: PUSH
61700: LD_VAR 0 1
61704: PUSH
61705: LD_INT 0
61707: PLUS
61708: ST_TO_ADDR
// end ;
61709: LD_VAR 0 2
61713: RET
// export function PrepareArray ( array ) ; begin
61714: LD_INT 0
61716: PPUSH
// result := array diff 0 ;
61717: LD_ADDR_VAR 0 2
61721: PUSH
61722: LD_VAR 0 1
61726: PUSH
61727: LD_INT 0
61729: DIFF
61730: ST_TO_ADDR
// if not result [ 1 ] then
61731: LD_VAR 0 2
61735: PUSH
61736: LD_INT 1
61738: ARRAY
61739: NOT
61740: IFFALSE 61760
// result := Delete ( result , 1 ) ;
61742: LD_ADDR_VAR 0 2
61746: PUSH
61747: LD_VAR 0 2
61751: PPUSH
61752: LD_INT 1
61754: PPUSH
61755: CALL_OW 3
61759: ST_TO_ADDR
// end ;
61760: LD_VAR 0 2
61764: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61765: LD_INT 0
61767: PPUSH
61768: PPUSH
61769: PPUSH
61770: PPUSH
// sibRocketRange := 25 ;
61771: LD_ADDR_VAR 0 6
61775: PUSH
61776: LD_INT 25
61778: ST_TO_ADDR
// result := false ;
61779: LD_ADDR_VAR 0 4
61783: PUSH
61784: LD_INT 0
61786: ST_TO_ADDR
// for i := 0 to 5 do
61787: LD_ADDR_VAR 0 5
61791: PUSH
61792: DOUBLE
61793: LD_INT 0
61795: DEC
61796: ST_TO_ADDR
61797: LD_INT 5
61799: PUSH
61800: FOR_TO
61801: IFFALSE 61868
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61803: LD_VAR 0 1
61807: PPUSH
61808: LD_VAR 0 5
61812: PPUSH
61813: LD_VAR 0 6
61817: PPUSH
61818: CALL_OW 272
61822: PPUSH
61823: LD_VAR 0 2
61827: PPUSH
61828: LD_VAR 0 5
61832: PPUSH
61833: LD_VAR 0 6
61837: PPUSH
61838: CALL_OW 273
61842: PPUSH
61843: LD_VAR 0 3
61847: PPUSH
61848: CALL_OW 309
61852: IFFALSE 61866
// begin result := true ;
61854: LD_ADDR_VAR 0 4
61858: PUSH
61859: LD_INT 1
61861: ST_TO_ADDR
// exit ;
61862: POP
61863: POP
61864: GO 61870
// end ;
61866: GO 61800
61868: POP
61869: POP
// end ;
61870: LD_VAR 0 4
61874: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61875: LD_INT 0
61877: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61878: LD_VAR 0 1
61882: PPUSH
61883: LD_VAR 0 2
61887: PPUSH
61888: LD_INT 0
61890: PPUSH
61891: LD_INT 0
61893: PPUSH
61894: LD_INT 1
61896: PPUSH
61897: LD_INT 0
61899: PPUSH
61900: CALL_OW 587
// end ;
61904: LD_VAR 0 3
61908: RET
// export function CenterOnNow ( unit ) ; begin
61909: LD_INT 0
61911: PPUSH
// result := IsInUnit ( unit ) ;
61912: LD_ADDR_VAR 0 2
61916: PUSH
61917: LD_VAR 0 1
61921: PPUSH
61922: CALL_OW 310
61926: ST_TO_ADDR
// if not result then
61927: LD_VAR 0 2
61931: NOT
61932: IFFALSE 61944
// result := unit ;
61934: LD_ADDR_VAR 0 2
61938: PUSH
61939: LD_VAR 0 1
61943: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
61944: LD_VAR 0 1
61948: PPUSH
61949: CALL_OW 87
// end ;
61953: LD_VAR 0 2
61957: RET
// export function ComMoveHex ( unit , hex ) ; begin
61958: LD_INT 0
61960: PPUSH
// if not hex then
61961: LD_VAR 0 2
61965: NOT
61966: IFFALSE 61970
// exit ;
61968: GO 62023
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
61970: LD_VAR 0 2
61974: PUSH
61975: LD_INT 1
61977: ARRAY
61978: PPUSH
61979: LD_VAR 0 2
61983: PUSH
61984: LD_INT 2
61986: ARRAY
61987: PPUSH
61988: CALL_OW 428
61992: IFFALSE 61996
// exit ;
61994: GO 62023
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
61996: LD_VAR 0 1
62000: PPUSH
62001: LD_VAR 0 2
62005: PUSH
62006: LD_INT 1
62008: ARRAY
62009: PPUSH
62010: LD_VAR 0 2
62014: PUSH
62015: LD_INT 2
62017: ARRAY
62018: PPUSH
62019: CALL_OW 111
// end ;
62023: LD_VAR 0 3
62027: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62028: LD_INT 0
62030: PPUSH
62031: PPUSH
62032: PPUSH
// if not unit or not enemy then
62033: LD_VAR 0 1
62037: NOT
62038: PUSH
62039: LD_VAR 0 2
62043: NOT
62044: OR
62045: IFFALSE 62049
// exit ;
62047: GO 62173
// x := GetX ( enemy ) ;
62049: LD_ADDR_VAR 0 4
62053: PUSH
62054: LD_VAR 0 2
62058: PPUSH
62059: CALL_OW 250
62063: ST_TO_ADDR
// y := GetY ( enemy ) ;
62064: LD_ADDR_VAR 0 5
62068: PUSH
62069: LD_VAR 0 2
62073: PPUSH
62074: CALL_OW 251
62078: ST_TO_ADDR
// if ValidHex ( x , y ) then
62079: LD_VAR 0 4
62083: PPUSH
62084: LD_VAR 0 5
62088: PPUSH
62089: CALL_OW 488
62093: IFFALSE 62173
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
62095: LD_VAR 0 2
62099: PPUSH
62100: CALL_OW 247
62104: PUSH
62105: LD_INT 3
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: IN
62115: PUSH
62116: LD_VAR 0 1
62120: PPUSH
62121: CALL_OW 255
62125: PPUSH
62126: LD_VAR 0 2
62130: PPUSH
62131: CALL_OW 292
62135: AND
62136: IFFALSE 62154
// ComAttackUnit ( unit , enemy ) else
62138: LD_VAR 0 1
62142: PPUSH
62143: LD_VAR 0 2
62147: PPUSH
62148: CALL_OW 115
62152: GO 62173
// ComAgressiveMove ( unit , x , y ) ;
62154: LD_VAR 0 1
62158: PPUSH
62159: LD_VAR 0 4
62163: PPUSH
62164: LD_VAR 0 5
62168: PPUSH
62169: CALL_OW 114
// end ; end_of_file end_of_file
62173: LD_VAR 0 3
62177: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62178: LD_VAR 0 1
62182: PPUSH
62183: LD_VAR 0 2
62187: PPUSH
62188: LD_VAR 0 3
62192: PPUSH
62193: LD_VAR 0 4
62197: PPUSH
62198: LD_VAR 0 5
62202: PPUSH
62203: LD_VAR 0 6
62207: PPUSH
62208: CALL 62392 0 6
// end ;
62212: PPOPN 6
62214: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62215: LD_INT 0
62217: PPUSH
// begin if not units then
62218: LD_VAR 0 1
62222: NOT
62223: IFFALSE 62227
// exit ;
62225: GO 62227
// end ;
62227: PPOPN 7
62229: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
62230: CALL 62296 0 0
// end ; end_of_file
62234: PPOPN 1
62236: END
// export globalGameSaveCounter ; every 0 0$1 do
62237: GO 62239
62239: DISABLE
// begin enable ;
62240: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62241: LD_STRING updateTimer(
62243: PUSH
62244: LD_OWVAR 1
62248: STR
62249: PUSH
62250: LD_STRING );
62252: STR
62253: PPUSH
62254: CALL_OW 559
// end ;
62258: END
// every 0 0$1 do
62259: GO 62261
62261: DISABLE
// begin globalGameSaveCounter := 0 ;
62262: LD_ADDR_EXP 45
62266: PUSH
62267: LD_INT 0
62269: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
62270: LD_STRING setGameSaveCounter(0)
62272: PPUSH
62273: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
62277: LD_STRING initStreamRollete();
62279: PPUSH
62280: CALL_OW 559
// InitStreamMode ;
62284: CALL 63610 0 0
// DefineStreamItems ( false ) ;
62288: LD_INT 0
62290: PPUSH
62291: CALL 64074 0 1
// end ;
62295: END
// export function SOS_MapStart ( ) ; begin
62296: LD_INT 0
62298: PPUSH
// if streamModeActive then
62299: LD_EXP 46
62303: IFFALSE 62312
// DefineStreamItems ( true ) ;
62305: LD_INT 1
62307: PPUSH
62308: CALL 64074 0 1
// UpdateLuaVariables ( ) ;
62312: CALL 62329 0 0
// UpdateFactoryWaypoints ( ) ;
62316: CALL 76943 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62320: CALL 77200 0 0
// end ;
62324: LD_VAR 0 1
62328: RET
// function UpdateLuaVariables ( ) ; begin
62329: LD_INT 0
62331: PPUSH
// if globalGameSaveCounter then
62332: LD_EXP 45
62336: IFFALSE 62370
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
62338: LD_ADDR_EXP 45
62342: PUSH
62343: LD_EXP 45
62347: PPUSH
62348: CALL 59317 0 1
62352: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62353: LD_STRING setGameSaveCounter(
62355: PUSH
62356: LD_EXP 45
62360: STR
62361: PUSH
62362: LD_STRING )
62364: STR
62365: PPUSH
62366: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62370: LD_STRING setGameDifficulty(
62372: PUSH
62373: LD_OWVAR 67
62377: STR
62378: PUSH
62379: LD_STRING )
62381: STR
62382: PPUSH
62383: CALL_OW 559
// end ;
62387: LD_VAR 0 1
62391: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62392: LD_INT 0
62394: PPUSH
// if p2 = stream_mode then
62395: LD_VAR 0 2
62399: PUSH
62400: LD_INT 100
62402: EQUAL
62403: IFFALSE 63406
// begin if not StreamModeActive then
62405: LD_EXP 46
62409: NOT
62410: IFFALSE 62420
// StreamModeActive := true ;
62412: LD_ADDR_EXP 46
62416: PUSH
62417: LD_INT 1
62419: ST_TO_ADDR
// if p3 = 0 then
62420: LD_VAR 0 3
62424: PUSH
62425: LD_INT 0
62427: EQUAL
62428: IFFALSE 62434
// InitStreamMode ;
62430: CALL 63610 0 0
// if p3 = 1 then
62434: LD_VAR 0 3
62438: PUSH
62439: LD_INT 1
62441: EQUAL
62442: IFFALSE 62452
// sRocket := true ;
62444: LD_ADDR_EXP 51
62448: PUSH
62449: LD_INT 1
62451: ST_TO_ADDR
// if p3 = 2 then
62452: LD_VAR 0 3
62456: PUSH
62457: LD_INT 2
62459: EQUAL
62460: IFFALSE 62470
// sSpeed := true ;
62462: LD_ADDR_EXP 50
62466: PUSH
62467: LD_INT 1
62469: ST_TO_ADDR
// if p3 = 3 then
62470: LD_VAR 0 3
62474: PUSH
62475: LD_INT 3
62477: EQUAL
62478: IFFALSE 62488
// sEngine := true ;
62480: LD_ADDR_EXP 52
62484: PUSH
62485: LD_INT 1
62487: ST_TO_ADDR
// if p3 = 4 then
62488: LD_VAR 0 3
62492: PUSH
62493: LD_INT 4
62495: EQUAL
62496: IFFALSE 62506
// sSpec := true ;
62498: LD_ADDR_EXP 49
62502: PUSH
62503: LD_INT 1
62505: ST_TO_ADDR
// if p3 = 5 then
62506: LD_VAR 0 3
62510: PUSH
62511: LD_INT 5
62513: EQUAL
62514: IFFALSE 62524
// sLevel := true ;
62516: LD_ADDR_EXP 53
62520: PUSH
62521: LD_INT 1
62523: ST_TO_ADDR
// if p3 = 6 then
62524: LD_VAR 0 3
62528: PUSH
62529: LD_INT 6
62531: EQUAL
62532: IFFALSE 62542
// sArmoury := true ;
62534: LD_ADDR_EXP 54
62538: PUSH
62539: LD_INT 1
62541: ST_TO_ADDR
// if p3 = 7 then
62542: LD_VAR 0 3
62546: PUSH
62547: LD_INT 7
62549: EQUAL
62550: IFFALSE 62560
// sRadar := true ;
62552: LD_ADDR_EXP 55
62556: PUSH
62557: LD_INT 1
62559: ST_TO_ADDR
// if p3 = 8 then
62560: LD_VAR 0 3
62564: PUSH
62565: LD_INT 8
62567: EQUAL
62568: IFFALSE 62578
// sBunker := true ;
62570: LD_ADDR_EXP 56
62574: PUSH
62575: LD_INT 1
62577: ST_TO_ADDR
// if p3 = 9 then
62578: LD_VAR 0 3
62582: PUSH
62583: LD_INT 9
62585: EQUAL
62586: IFFALSE 62596
// sHack := true ;
62588: LD_ADDR_EXP 57
62592: PUSH
62593: LD_INT 1
62595: ST_TO_ADDR
// if p3 = 10 then
62596: LD_VAR 0 3
62600: PUSH
62601: LD_INT 10
62603: EQUAL
62604: IFFALSE 62614
// sFire := true ;
62606: LD_ADDR_EXP 58
62610: PUSH
62611: LD_INT 1
62613: ST_TO_ADDR
// if p3 = 11 then
62614: LD_VAR 0 3
62618: PUSH
62619: LD_INT 11
62621: EQUAL
62622: IFFALSE 62632
// sRefresh := true ;
62624: LD_ADDR_EXP 59
62628: PUSH
62629: LD_INT 1
62631: ST_TO_ADDR
// if p3 = 12 then
62632: LD_VAR 0 3
62636: PUSH
62637: LD_INT 12
62639: EQUAL
62640: IFFALSE 62650
// sExp := true ;
62642: LD_ADDR_EXP 60
62646: PUSH
62647: LD_INT 1
62649: ST_TO_ADDR
// if p3 = 13 then
62650: LD_VAR 0 3
62654: PUSH
62655: LD_INT 13
62657: EQUAL
62658: IFFALSE 62668
// sDepot := true ;
62660: LD_ADDR_EXP 61
62664: PUSH
62665: LD_INT 1
62667: ST_TO_ADDR
// if p3 = 14 then
62668: LD_VAR 0 3
62672: PUSH
62673: LD_INT 14
62675: EQUAL
62676: IFFALSE 62686
// sFlag := true ;
62678: LD_ADDR_EXP 62
62682: PUSH
62683: LD_INT 1
62685: ST_TO_ADDR
// if p3 = 15 then
62686: LD_VAR 0 3
62690: PUSH
62691: LD_INT 15
62693: EQUAL
62694: IFFALSE 62704
// sKamikadze := true ;
62696: LD_ADDR_EXP 70
62700: PUSH
62701: LD_INT 1
62703: ST_TO_ADDR
// if p3 = 16 then
62704: LD_VAR 0 3
62708: PUSH
62709: LD_INT 16
62711: EQUAL
62712: IFFALSE 62722
// sTroll := true ;
62714: LD_ADDR_EXP 71
62718: PUSH
62719: LD_INT 1
62721: ST_TO_ADDR
// if p3 = 17 then
62722: LD_VAR 0 3
62726: PUSH
62727: LD_INT 17
62729: EQUAL
62730: IFFALSE 62740
// sSlow := true ;
62732: LD_ADDR_EXP 72
62736: PUSH
62737: LD_INT 1
62739: ST_TO_ADDR
// if p3 = 18 then
62740: LD_VAR 0 3
62744: PUSH
62745: LD_INT 18
62747: EQUAL
62748: IFFALSE 62758
// sLack := true ;
62750: LD_ADDR_EXP 73
62754: PUSH
62755: LD_INT 1
62757: ST_TO_ADDR
// if p3 = 19 then
62758: LD_VAR 0 3
62762: PUSH
62763: LD_INT 19
62765: EQUAL
62766: IFFALSE 62776
// sTank := true ;
62768: LD_ADDR_EXP 75
62772: PUSH
62773: LD_INT 1
62775: ST_TO_ADDR
// if p3 = 20 then
62776: LD_VAR 0 3
62780: PUSH
62781: LD_INT 20
62783: EQUAL
62784: IFFALSE 62794
// sRemote := true ;
62786: LD_ADDR_EXP 76
62790: PUSH
62791: LD_INT 1
62793: ST_TO_ADDR
// if p3 = 21 then
62794: LD_VAR 0 3
62798: PUSH
62799: LD_INT 21
62801: EQUAL
62802: IFFALSE 62812
// sPowell := true ;
62804: LD_ADDR_EXP 77
62808: PUSH
62809: LD_INT 1
62811: ST_TO_ADDR
// if p3 = 22 then
62812: LD_VAR 0 3
62816: PUSH
62817: LD_INT 22
62819: EQUAL
62820: IFFALSE 62830
// sTeleport := true ;
62822: LD_ADDR_EXP 80
62826: PUSH
62827: LD_INT 1
62829: ST_TO_ADDR
// if p3 = 23 then
62830: LD_VAR 0 3
62834: PUSH
62835: LD_INT 23
62837: EQUAL
62838: IFFALSE 62848
// sOilTower := true ;
62840: LD_ADDR_EXP 82
62844: PUSH
62845: LD_INT 1
62847: ST_TO_ADDR
// if p3 = 24 then
62848: LD_VAR 0 3
62852: PUSH
62853: LD_INT 24
62855: EQUAL
62856: IFFALSE 62866
// sShovel := true ;
62858: LD_ADDR_EXP 83
62862: PUSH
62863: LD_INT 1
62865: ST_TO_ADDR
// if p3 = 25 then
62866: LD_VAR 0 3
62870: PUSH
62871: LD_INT 25
62873: EQUAL
62874: IFFALSE 62884
// sSheik := true ;
62876: LD_ADDR_EXP 84
62880: PUSH
62881: LD_INT 1
62883: ST_TO_ADDR
// if p3 = 26 then
62884: LD_VAR 0 3
62888: PUSH
62889: LD_INT 26
62891: EQUAL
62892: IFFALSE 62902
// sEarthquake := true ;
62894: LD_ADDR_EXP 86
62898: PUSH
62899: LD_INT 1
62901: ST_TO_ADDR
// if p3 = 27 then
62902: LD_VAR 0 3
62906: PUSH
62907: LD_INT 27
62909: EQUAL
62910: IFFALSE 62920
// sAI := true ;
62912: LD_ADDR_EXP 87
62916: PUSH
62917: LD_INT 1
62919: ST_TO_ADDR
// if p3 = 28 then
62920: LD_VAR 0 3
62924: PUSH
62925: LD_INT 28
62927: EQUAL
62928: IFFALSE 62938
// sCargo := true ;
62930: LD_ADDR_EXP 90
62934: PUSH
62935: LD_INT 1
62937: ST_TO_ADDR
// if p3 = 29 then
62938: LD_VAR 0 3
62942: PUSH
62943: LD_INT 29
62945: EQUAL
62946: IFFALSE 62956
// sDLaser := true ;
62948: LD_ADDR_EXP 91
62952: PUSH
62953: LD_INT 1
62955: ST_TO_ADDR
// if p3 = 30 then
62956: LD_VAR 0 3
62960: PUSH
62961: LD_INT 30
62963: EQUAL
62964: IFFALSE 62974
// sExchange := true ;
62966: LD_ADDR_EXP 92
62970: PUSH
62971: LD_INT 1
62973: ST_TO_ADDR
// if p3 = 31 then
62974: LD_VAR 0 3
62978: PUSH
62979: LD_INT 31
62981: EQUAL
62982: IFFALSE 62992
// sFac := true ;
62984: LD_ADDR_EXP 93
62988: PUSH
62989: LD_INT 1
62991: ST_TO_ADDR
// if p3 = 32 then
62992: LD_VAR 0 3
62996: PUSH
62997: LD_INT 32
62999: EQUAL
63000: IFFALSE 63010
// sPower := true ;
63002: LD_ADDR_EXP 94
63006: PUSH
63007: LD_INT 1
63009: ST_TO_ADDR
// if p3 = 33 then
63010: LD_VAR 0 3
63014: PUSH
63015: LD_INT 33
63017: EQUAL
63018: IFFALSE 63028
// sRandom := true ;
63020: LD_ADDR_EXP 95
63024: PUSH
63025: LD_INT 1
63027: ST_TO_ADDR
// if p3 = 34 then
63028: LD_VAR 0 3
63032: PUSH
63033: LD_INT 34
63035: EQUAL
63036: IFFALSE 63046
// sShield := true ;
63038: LD_ADDR_EXP 96
63042: PUSH
63043: LD_INT 1
63045: ST_TO_ADDR
// if p3 = 35 then
63046: LD_VAR 0 3
63050: PUSH
63051: LD_INT 35
63053: EQUAL
63054: IFFALSE 63064
// sTime := true ;
63056: LD_ADDR_EXP 97
63060: PUSH
63061: LD_INT 1
63063: ST_TO_ADDR
// if p3 = 36 then
63064: LD_VAR 0 3
63068: PUSH
63069: LD_INT 36
63071: EQUAL
63072: IFFALSE 63082
// sTools := true ;
63074: LD_ADDR_EXP 98
63078: PUSH
63079: LD_INT 1
63081: ST_TO_ADDR
// if p3 = 101 then
63082: LD_VAR 0 3
63086: PUSH
63087: LD_INT 101
63089: EQUAL
63090: IFFALSE 63100
// sSold := true ;
63092: LD_ADDR_EXP 63
63096: PUSH
63097: LD_INT 1
63099: ST_TO_ADDR
// if p3 = 102 then
63100: LD_VAR 0 3
63104: PUSH
63105: LD_INT 102
63107: EQUAL
63108: IFFALSE 63118
// sDiff := true ;
63110: LD_ADDR_EXP 64
63114: PUSH
63115: LD_INT 1
63117: ST_TO_ADDR
// if p3 = 103 then
63118: LD_VAR 0 3
63122: PUSH
63123: LD_INT 103
63125: EQUAL
63126: IFFALSE 63136
// sFog := true ;
63128: LD_ADDR_EXP 67
63132: PUSH
63133: LD_INT 1
63135: ST_TO_ADDR
// if p3 = 104 then
63136: LD_VAR 0 3
63140: PUSH
63141: LD_INT 104
63143: EQUAL
63144: IFFALSE 63154
// sReset := true ;
63146: LD_ADDR_EXP 68
63150: PUSH
63151: LD_INT 1
63153: ST_TO_ADDR
// if p3 = 105 then
63154: LD_VAR 0 3
63158: PUSH
63159: LD_INT 105
63161: EQUAL
63162: IFFALSE 63172
// sSun := true ;
63164: LD_ADDR_EXP 69
63168: PUSH
63169: LD_INT 1
63171: ST_TO_ADDR
// if p3 = 106 then
63172: LD_VAR 0 3
63176: PUSH
63177: LD_INT 106
63179: EQUAL
63180: IFFALSE 63190
// sTiger := true ;
63182: LD_ADDR_EXP 65
63186: PUSH
63187: LD_INT 1
63189: ST_TO_ADDR
// if p3 = 107 then
63190: LD_VAR 0 3
63194: PUSH
63195: LD_INT 107
63197: EQUAL
63198: IFFALSE 63208
// sBomb := true ;
63200: LD_ADDR_EXP 66
63204: PUSH
63205: LD_INT 1
63207: ST_TO_ADDR
// if p3 = 108 then
63208: LD_VAR 0 3
63212: PUSH
63213: LD_INT 108
63215: EQUAL
63216: IFFALSE 63226
// sWound := true ;
63218: LD_ADDR_EXP 74
63222: PUSH
63223: LD_INT 1
63225: ST_TO_ADDR
// if p3 = 109 then
63226: LD_VAR 0 3
63230: PUSH
63231: LD_INT 109
63233: EQUAL
63234: IFFALSE 63244
// sBetray := true ;
63236: LD_ADDR_EXP 78
63240: PUSH
63241: LD_INT 1
63243: ST_TO_ADDR
// if p3 = 110 then
63244: LD_VAR 0 3
63248: PUSH
63249: LD_INT 110
63251: EQUAL
63252: IFFALSE 63262
// sContamin := true ;
63254: LD_ADDR_EXP 79
63258: PUSH
63259: LD_INT 1
63261: ST_TO_ADDR
// if p3 = 111 then
63262: LD_VAR 0 3
63266: PUSH
63267: LD_INT 111
63269: EQUAL
63270: IFFALSE 63280
// sOil := true ;
63272: LD_ADDR_EXP 81
63276: PUSH
63277: LD_INT 1
63279: ST_TO_ADDR
// if p3 = 112 then
63280: LD_VAR 0 3
63284: PUSH
63285: LD_INT 112
63287: EQUAL
63288: IFFALSE 63298
// sStu := true ;
63290: LD_ADDR_EXP 85
63294: PUSH
63295: LD_INT 1
63297: ST_TO_ADDR
// if p3 = 113 then
63298: LD_VAR 0 3
63302: PUSH
63303: LD_INT 113
63305: EQUAL
63306: IFFALSE 63316
// sBazooka := true ;
63308: LD_ADDR_EXP 88
63312: PUSH
63313: LD_INT 1
63315: ST_TO_ADDR
// if p3 = 114 then
63316: LD_VAR 0 3
63320: PUSH
63321: LD_INT 114
63323: EQUAL
63324: IFFALSE 63334
// sMortar := true ;
63326: LD_ADDR_EXP 89
63330: PUSH
63331: LD_INT 1
63333: ST_TO_ADDR
// if p3 = 115 then
63334: LD_VAR 0 3
63338: PUSH
63339: LD_INT 115
63341: EQUAL
63342: IFFALSE 63352
// sRanger := true ;
63344: LD_ADDR_EXP 99
63348: PUSH
63349: LD_INT 1
63351: ST_TO_ADDR
// if p3 = 116 then
63352: LD_VAR 0 3
63356: PUSH
63357: LD_INT 116
63359: EQUAL
63360: IFFALSE 63370
// sComputer := true ;
63362: LD_ADDR_EXP 100
63366: PUSH
63367: LD_INT 1
63369: ST_TO_ADDR
// if p3 = 117 then
63370: LD_VAR 0 3
63374: PUSH
63375: LD_INT 117
63377: EQUAL
63378: IFFALSE 63388
// s30 := true ;
63380: LD_ADDR_EXP 101
63384: PUSH
63385: LD_INT 1
63387: ST_TO_ADDR
// if p3 = 118 then
63388: LD_VAR 0 3
63392: PUSH
63393: LD_INT 118
63395: EQUAL
63396: IFFALSE 63406
// s60 := true ;
63398: LD_ADDR_EXP 102
63402: PUSH
63403: LD_INT 1
63405: ST_TO_ADDR
// end ; if p2 = hack_mode then
63406: LD_VAR 0 2
63410: PUSH
63411: LD_INT 101
63413: EQUAL
63414: IFFALSE 63542
// begin case p3 of 1 :
63416: LD_VAR 0 3
63420: PUSH
63421: LD_INT 1
63423: DOUBLE
63424: EQUAL
63425: IFTRUE 63429
63427: GO 63436
63429: POP
// hHackUnlimitedResources ; 2 :
63430: CALL 75689 0 0
63434: GO 63542
63436: LD_INT 2
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63444
63442: GO 63451
63444: POP
// hHackSetLevel10 ; 3 :
63445: CALL 75822 0 0
63449: GO 63542
63451: LD_INT 3
63453: DOUBLE
63454: EQUAL
63455: IFTRUE 63459
63457: GO 63466
63459: POP
// hHackSetLevel10YourUnits ; 4 :
63460: CALL 75907 0 0
63464: GO 63542
63466: LD_INT 4
63468: DOUBLE
63469: EQUAL
63470: IFTRUE 63474
63472: GO 63481
63474: POP
// hHackInvincible ; 5 :
63475: CALL 76355 0 0
63479: GO 63542
63481: LD_INT 5
63483: DOUBLE
63484: EQUAL
63485: IFTRUE 63489
63487: GO 63496
63489: POP
// hHackInvisible ; 6 :
63490: CALL 76466 0 0
63494: GO 63542
63496: LD_INT 6
63498: DOUBLE
63499: EQUAL
63500: IFTRUE 63504
63502: GO 63511
63504: POP
// hHackChangeYourSide ; 7 :
63505: CALL 76523 0 0
63509: GO 63542
63511: LD_INT 7
63513: DOUBLE
63514: EQUAL
63515: IFTRUE 63519
63517: GO 63526
63519: POP
// hHackChangeUnitSide ; 8 :
63520: CALL 76565 0 0
63524: GO 63542
63526: LD_INT 8
63528: DOUBLE
63529: EQUAL
63530: IFTRUE 63534
63532: GO 63541
63534: POP
// hHackFog ; end ;
63535: CALL 76666 0 0
63539: GO 63542
63541: POP
// end ; if p2 = game_save_mode then
63542: LD_VAR 0 2
63546: PUSH
63547: LD_INT 102
63549: EQUAL
63550: IFFALSE 63605
// begin if p3 = 1 then
63552: LD_VAR 0 3
63556: PUSH
63557: LD_INT 1
63559: EQUAL
63560: IFFALSE 63572
// globalGameSaveCounter := p4 ;
63562: LD_ADDR_EXP 45
63566: PUSH
63567: LD_VAR 0 4
63571: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
63572: LD_VAR 0 3
63576: PUSH
63577: LD_INT 2
63579: EQUAL
63580: PUSH
63581: LD_EXP 45
63585: AND
63586: IFFALSE 63605
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63588: LD_STRING setGameSaveCounter(
63590: PUSH
63591: LD_EXP 45
63595: STR
63596: PUSH
63597: LD_STRING )
63599: STR
63600: PPUSH
63601: CALL_OW 559
// end ; end ;
63605: LD_VAR 0 7
63609: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
63610: LD_INT 0
63612: PPUSH
// streamModeActive := false ;
63613: LD_ADDR_EXP 46
63617: PUSH
63618: LD_INT 0
63620: ST_TO_ADDR
// normalCounter := 36 ;
63621: LD_ADDR_EXP 47
63625: PUSH
63626: LD_INT 36
63628: ST_TO_ADDR
// hardcoreCounter := 18 ;
63629: LD_ADDR_EXP 48
63633: PUSH
63634: LD_INT 18
63636: ST_TO_ADDR
// sRocket := false ;
63637: LD_ADDR_EXP 51
63641: PUSH
63642: LD_INT 0
63644: ST_TO_ADDR
// sSpeed := false ;
63645: LD_ADDR_EXP 50
63649: PUSH
63650: LD_INT 0
63652: ST_TO_ADDR
// sEngine := false ;
63653: LD_ADDR_EXP 52
63657: PUSH
63658: LD_INT 0
63660: ST_TO_ADDR
// sSpec := false ;
63661: LD_ADDR_EXP 49
63665: PUSH
63666: LD_INT 0
63668: ST_TO_ADDR
// sLevel := false ;
63669: LD_ADDR_EXP 53
63673: PUSH
63674: LD_INT 0
63676: ST_TO_ADDR
// sArmoury := false ;
63677: LD_ADDR_EXP 54
63681: PUSH
63682: LD_INT 0
63684: ST_TO_ADDR
// sRadar := false ;
63685: LD_ADDR_EXP 55
63689: PUSH
63690: LD_INT 0
63692: ST_TO_ADDR
// sBunker := false ;
63693: LD_ADDR_EXP 56
63697: PUSH
63698: LD_INT 0
63700: ST_TO_ADDR
// sHack := false ;
63701: LD_ADDR_EXP 57
63705: PUSH
63706: LD_INT 0
63708: ST_TO_ADDR
// sFire := false ;
63709: LD_ADDR_EXP 58
63713: PUSH
63714: LD_INT 0
63716: ST_TO_ADDR
// sRefresh := false ;
63717: LD_ADDR_EXP 59
63721: PUSH
63722: LD_INT 0
63724: ST_TO_ADDR
// sExp := false ;
63725: LD_ADDR_EXP 60
63729: PUSH
63730: LD_INT 0
63732: ST_TO_ADDR
// sDepot := false ;
63733: LD_ADDR_EXP 61
63737: PUSH
63738: LD_INT 0
63740: ST_TO_ADDR
// sFlag := false ;
63741: LD_ADDR_EXP 62
63745: PUSH
63746: LD_INT 0
63748: ST_TO_ADDR
// sKamikadze := false ;
63749: LD_ADDR_EXP 70
63753: PUSH
63754: LD_INT 0
63756: ST_TO_ADDR
// sTroll := false ;
63757: LD_ADDR_EXP 71
63761: PUSH
63762: LD_INT 0
63764: ST_TO_ADDR
// sSlow := false ;
63765: LD_ADDR_EXP 72
63769: PUSH
63770: LD_INT 0
63772: ST_TO_ADDR
// sLack := false ;
63773: LD_ADDR_EXP 73
63777: PUSH
63778: LD_INT 0
63780: ST_TO_ADDR
// sTank := false ;
63781: LD_ADDR_EXP 75
63785: PUSH
63786: LD_INT 0
63788: ST_TO_ADDR
// sRemote := false ;
63789: LD_ADDR_EXP 76
63793: PUSH
63794: LD_INT 0
63796: ST_TO_ADDR
// sPowell := false ;
63797: LD_ADDR_EXP 77
63801: PUSH
63802: LD_INT 0
63804: ST_TO_ADDR
// sTeleport := false ;
63805: LD_ADDR_EXP 80
63809: PUSH
63810: LD_INT 0
63812: ST_TO_ADDR
// sOilTower := false ;
63813: LD_ADDR_EXP 82
63817: PUSH
63818: LD_INT 0
63820: ST_TO_ADDR
// sShovel := false ;
63821: LD_ADDR_EXP 83
63825: PUSH
63826: LD_INT 0
63828: ST_TO_ADDR
// sSheik := false ;
63829: LD_ADDR_EXP 84
63833: PUSH
63834: LD_INT 0
63836: ST_TO_ADDR
// sEarthquake := false ;
63837: LD_ADDR_EXP 86
63841: PUSH
63842: LD_INT 0
63844: ST_TO_ADDR
// sAI := false ;
63845: LD_ADDR_EXP 87
63849: PUSH
63850: LD_INT 0
63852: ST_TO_ADDR
// sCargo := false ;
63853: LD_ADDR_EXP 90
63857: PUSH
63858: LD_INT 0
63860: ST_TO_ADDR
// sDLaser := false ;
63861: LD_ADDR_EXP 91
63865: PUSH
63866: LD_INT 0
63868: ST_TO_ADDR
// sExchange := false ;
63869: LD_ADDR_EXP 92
63873: PUSH
63874: LD_INT 0
63876: ST_TO_ADDR
// sFac := false ;
63877: LD_ADDR_EXP 93
63881: PUSH
63882: LD_INT 0
63884: ST_TO_ADDR
// sPower := false ;
63885: LD_ADDR_EXP 94
63889: PUSH
63890: LD_INT 0
63892: ST_TO_ADDR
// sRandom := false ;
63893: LD_ADDR_EXP 95
63897: PUSH
63898: LD_INT 0
63900: ST_TO_ADDR
// sShield := false ;
63901: LD_ADDR_EXP 96
63905: PUSH
63906: LD_INT 0
63908: ST_TO_ADDR
// sTime := false ;
63909: LD_ADDR_EXP 97
63913: PUSH
63914: LD_INT 0
63916: ST_TO_ADDR
// sTools := false ;
63917: LD_ADDR_EXP 98
63921: PUSH
63922: LD_INT 0
63924: ST_TO_ADDR
// sSold := false ;
63925: LD_ADDR_EXP 63
63929: PUSH
63930: LD_INT 0
63932: ST_TO_ADDR
// sDiff := false ;
63933: LD_ADDR_EXP 64
63937: PUSH
63938: LD_INT 0
63940: ST_TO_ADDR
// sFog := false ;
63941: LD_ADDR_EXP 67
63945: PUSH
63946: LD_INT 0
63948: ST_TO_ADDR
// sReset := false ;
63949: LD_ADDR_EXP 68
63953: PUSH
63954: LD_INT 0
63956: ST_TO_ADDR
// sSun := false ;
63957: LD_ADDR_EXP 69
63961: PUSH
63962: LD_INT 0
63964: ST_TO_ADDR
// sTiger := false ;
63965: LD_ADDR_EXP 65
63969: PUSH
63970: LD_INT 0
63972: ST_TO_ADDR
// sBomb := false ;
63973: LD_ADDR_EXP 66
63977: PUSH
63978: LD_INT 0
63980: ST_TO_ADDR
// sWound := false ;
63981: LD_ADDR_EXP 74
63985: PUSH
63986: LD_INT 0
63988: ST_TO_ADDR
// sBetray := false ;
63989: LD_ADDR_EXP 78
63993: PUSH
63994: LD_INT 0
63996: ST_TO_ADDR
// sContamin := false ;
63997: LD_ADDR_EXP 79
64001: PUSH
64002: LD_INT 0
64004: ST_TO_ADDR
// sOil := false ;
64005: LD_ADDR_EXP 81
64009: PUSH
64010: LD_INT 0
64012: ST_TO_ADDR
// sStu := false ;
64013: LD_ADDR_EXP 85
64017: PUSH
64018: LD_INT 0
64020: ST_TO_ADDR
// sBazooka := false ;
64021: LD_ADDR_EXP 88
64025: PUSH
64026: LD_INT 0
64028: ST_TO_ADDR
// sMortar := false ;
64029: LD_ADDR_EXP 89
64033: PUSH
64034: LD_INT 0
64036: ST_TO_ADDR
// sRanger := false ;
64037: LD_ADDR_EXP 99
64041: PUSH
64042: LD_INT 0
64044: ST_TO_ADDR
// sComputer := false ;
64045: LD_ADDR_EXP 100
64049: PUSH
64050: LD_INT 0
64052: ST_TO_ADDR
// s30 := false ;
64053: LD_ADDR_EXP 101
64057: PUSH
64058: LD_INT 0
64060: ST_TO_ADDR
// s60 := false ;
64061: LD_ADDR_EXP 102
64065: PUSH
64066: LD_INT 0
64068: ST_TO_ADDR
// end ;
64069: LD_VAR 0 1
64073: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
64074: LD_INT 0
64076: PPUSH
64077: PPUSH
64078: PPUSH
64079: PPUSH
64080: PPUSH
64081: PPUSH
64082: PPUSH
// result := [ ] ;
64083: LD_ADDR_VAR 0 2
64087: PUSH
64088: EMPTY
64089: ST_TO_ADDR
// if campaign_id = 1 then
64090: LD_OWVAR 69
64094: PUSH
64095: LD_INT 1
64097: EQUAL
64098: IFFALSE 67264
// begin case mission_number of 1 :
64100: LD_OWVAR 70
64104: PUSH
64105: LD_INT 1
64107: DOUBLE
64108: EQUAL
64109: IFTRUE 64113
64111: GO 64189
64113: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
64114: LD_ADDR_VAR 0 2
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: LD_INT 4
64124: PUSH
64125: LD_INT 11
64127: PUSH
64128: LD_INT 12
64130: PUSH
64131: LD_INT 15
64133: PUSH
64134: LD_INT 16
64136: PUSH
64137: LD_INT 22
64139: PUSH
64140: LD_INT 23
64142: PUSH
64143: LD_INT 26
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 101
64159: PUSH
64160: LD_INT 102
64162: PUSH
64163: LD_INT 106
64165: PUSH
64166: LD_INT 116
64168: PUSH
64169: LD_INT 117
64171: PUSH
64172: LD_INT 118
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: ST_TO_ADDR
64187: GO 67262
64189: LD_INT 2
64191: DOUBLE
64192: EQUAL
64193: IFTRUE 64197
64195: GO 64281
64197: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
64198: LD_ADDR_VAR 0 2
64202: PUSH
64203: LD_INT 2
64205: PUSH
64206: LD_INT 4
64208: PUSH
64209: LD_INT 11
64211: PUSH
64212: LD_INT 12
64214: PUSH
64215: LD_INT 15
64217: PUSH
64218: LD_INT 16
64220: PUSH
64221: LD_INT 22
64223: PUSH
64224: LD_INT 23
64226: PUSH
64227: LD_INT 26
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 101
64243: PUSH
64244: LD_INT 102
64246: PUSH
64247: LD_INT 105
64249: PUSH
64250: LD_INT 106
64252: PUSH
64253: LD_INT 108
64255: PUSH
64256: LD_INT 116
64258: PUSH
64259: LD_INT 117
64261: PUSH
64262: LD_INT 118
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: ST_TO_ADDR
64279: GO 67262
64281: LD_INT 3
64283: DOUBLE
64284: EQUAL
64285: IFTRUE 64289
64287: GO 64377
64289: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
64290: LD_ADDR_VAR 0 2
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: LD_INT 4
64300: PUSH
64301: LD_INT 5
64303: PUSH
64304: LD_INT 11
64306: PUSH
64307: LD_INT 12
64309: PUSH
64310: LD_INT 15
64312: PUSH
64313: LD_INT 16
64315: PUSH
64316: LD_INT 22
64318: PUSH
64319: LD_INT 26
64321: PUSH
64322: LD_INT 36
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 101
64339: PUSH
64340: LD_INT 102
64342: PUSH
64343: LD_INT 105
64345: PUSH
64346: LD_INT 106
64348: PUSH
64349: LD_INT 108
64351: PUSH
64352: LD_INT 116
64354: PUSH
64355: LD_INT 117
64357: PUSH
64358: LD_INT 118
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: ST_TO_ADDR
64375: GO 67262
64377: LD_INT 4
64379: DOUBLE
64380: EQUAL
64381: IFTRUE 64385
64383: GO 64481
64385: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
64386: LD_ADDR_VAR 0 2
64390: PUSH
64391: LD_INT 2
64393: PUSH
64394: LD_INT 4
64396: PUSH
64397: LD_INT 5
64399: PUSH
64400: LD_INT 8
64402: PUSH
64403: LD_INT 11
64405: PUSH
64406: LD_INT 12
64408: PUSH
64409: LD_INT 15
64411: PUSH
64412: LD_INT 16
64414: PUSH
64415: LD_INT 22
64417: PUSH
64418: LD_INT 23
64420: PUSH
64421: LD_INT 26
64423: PUSH
64424: LD_INT 36
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 101
64443: PUSH
64444: LD_INT 102
64446: PUSH
64447: LD_INT 105
64449: PUSH
64450: LD_INT 106
64452: PUSH
64453: LD_INT 108
64455: PUSH
64456: LD_INT 116
64458: PUSH
64459: LD_INT 117
64461: PUSH
64462: LD_INT 118
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: ST_TO_ADDR
64479: GO 67262
64481: LD_INT 5
64483: DOUBLE
64484: EQUAL
64485: IFTRUE 64489
64487: GO 64601
64489: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
64490: LD_ADDR_VAR 0 2
64494: PUSH
64495: LD_INT 2
64497: PUSH
64498: LD_INT 4
64500: PUSH
64501: LD_INT 5
64503: PUSH
64504: LD_INT 6
64506: PUSH
64507: LD_INT 8
64509: PUSH
64510: LD_INT 11
64512: PUSH
64513: LD_INT 12
64515: PUSH
64516: LD_INT 15
64518: PUSH
64519: LD_INT 16
64521: PUSH
64522: LD_INT 22
64524: PUSH
64525: LD_INT 23
64527: PUSH
64528: LD_INT 25
64530: PUSH
64531: LD_INT 26
64533: PUSH
64534: LD_INT 36
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 101
64555: PUSH
64556: LD_INT 102
64558: PUSH
64559: LD_INT 105
64561: PUSH
64562: LD_INT 106
64564: PUSH
64565: LD_INT 108
64567: PUSH
64568: LD_INT 109
64570: PUSH
64571: LD_INT 112
64573: PUSH
64574: LD_INT 116
64576: PUSH
64577: LD_INT 117
64579: PUSH
64580: LD_INT 118
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: ST_TO_ADDR
64599: GO 67262
64601: LD_INT 6
64603: DOUBLE
64604: EQUAL
64605: IFTRUE 64609
64607: GO 64741
64609: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
64610: LD_ADDR_VAR 0 2
64614: PUSH
64615: LD_INT 2
64617: PUSH
64618: LD_INT 4
64620: PUSH
64621: LD_INT 5
64623: PUSH
64624: LD_INT 6
64626: PUSH
64627: LD_INT 8
64629: PUSH
64630: LD_INT 11
64632: PUSH
64633: LD_INT 12
64635: PUSH
64636: LD_INT 15
64638: PUSH
64639: LD_INT 16
64641: PUSH
64642: LD_INT 20
64644: PUSH
64645: LD_INT 21
64647: PUSH
64648: LD_INT 22
64650: PUSH
64651: LD_INT 23
64653: PUSH
64654: LD_INT 25
64656: PUSH
64657: LD_INT 26
64659: PUSH
64660: LD_INT 30
64662: PUSH
64663: LD_INT 31
64665: PUSH
64666: LD_INT 32
64668: PUSH
64669: LD_INT 36
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 101
64695: PUSH
64696: LD_INT 102
64698: PUSH
64699: LD_INT 105
64701: PUSH
64702: LD_INT 106
64704: PUSH
64705: LD_INT 108
64707: PUSH
64708: LD_INT 109
64710: PUSH
64711: LD_INT 112
64713: PUSH
64714: LD_INT 116
64716: PUSH
64717: LD_INT 117
64719: PUSH
64720: LD_INT 118
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: ST_TO_ADDR
64739: GO 67262
64741: LD_INT 7
64743: DOUBLE
64744: EQUAL
64745: IFTRUE 64749
64747: GO 64861
64749: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
64750: LD_ADDR_VAR 0 2
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 4
64760: PUSH
64761: LD_INT 5
64763: PUSH
64764: LD_INT 7
64766: PUSH
64767: LD_INT 11
64769: PUSH
64770: LD_INT 12
64772: PUSH
64773: LD_INT 15
64775: PUSH
64776: LD_INT 16
64778: PUSH
64779: LD_INT 20
64781: PUSH
64782: LD_INT 21
64784: PUSH
64785: LD_INT 22
64787: PUSH
64788: LD_INT 23
64790: PUSH
64791: LD_INT 25
64793: PUSH
64794: LD_INT 26
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 101
64815: PUSH
64816: LD_INT 102
64818: PUSH
64819: LD_INT 103
64821: PUSH
64822: LD_INT 105
64824: PUSH
64825: LD_INT 106
64827: PUSH
64828: LD_INT 108
64830: PUSH
64831: LD_INT 112
64833: PUSH
64834: LD_INT 116
64836: PUSH
64837: LD_INT 117
64839: PUSH
64840: LD_INT 118
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: ST_TO_ADDR
64859: GO 67262
64861: LD_INT 8
64863: DOUBLE
64864: EQUAL
64865: IFTRUE 64869
64867: GO 65009
64869: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
64870: LD_ADDR_VAR 0 2
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: LD_INT 4
64880: PUSH
64881: LD_INT 5
64883: PUSH
64884: LD_INT 6
64886: PUSH
64887: LD_INT 7
64889: PUSH
64890: LD_INT 8
64892: PUSH
64893: LD_INT 11
64895: PUSH
64896: LD_INT 12
64898: PUSH
64899: LD_INT 15
64901: PUSH
64902: LD_INT 16
64904: PUSH
64905: LD_INT 20
64907: PUSH
64908: LD_INT 21
64910: PUSH
64911: LD_INT 22
64913: PUSH
64914: LD_INT 23
64916: PUSH
64917: LD_INT 25
64919: PUSH
64920: LD_INT 26
64922: PUSH
64923: LD_INT 30
64925: PUSH
64926: LD_INT 31
64928: PUSH
64929: LD_INT 32
64931: PUSH
64932: LD_INT 36
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 101
64959: PUSH
64960: LD_INT 102
64962: PUSH
64963: LD_INT 103
64965: PUSH
64966: LD_INT 105
64968: PUSH
64969: LD_INT 106
64971: PUSH
64972: LD_INT 108
64974: PUSH
64975: LD_INT 109
64977: PUSH
64978: LD_INT 112
64980: PUSH
64981: LD_INT 116
64983: PUSH
64984: LD_INT 117
64986: PUSH
64987: LD_INT 118
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: ST_TO_ADDR
65007: GO 67262
65009: LD_INT 9
65011: DOUBLE
65012: EQUAL
65013: IFTRUE 65017
65015: GO 65165
65017: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
65018: LD_ADDR_VAR 0 2
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: LD_INT 4
65028: PUSH
65029: LD_INT 5
65031: PUSH
65032: LD_INT 6
65034: PUSH
65035: LD_INT 7
65037: PUSH
65038: LD_INT 8
65040: PUSH
65041: LD_INT 11
65043: PUSH
65044: LD_INT 12
65046: PUSH
65047: LD_INT 15
65049: PUSH
65050: LD_INT 16
65052: PUSH
65053: LD_INT 20
65055: PUSH
65056: LD_INT 21
65058: PUSH
65059: LD_INT 22
65061: PUSH
65062: LD_INT 23
65064: PUSH
65065: LD_INT 25
65067: PUSH
65068: LD_INT 26
65070: PUSH
65071: LD_INT 28
65073: PUSH
65074: LD_INT 30
65076: PUSH
65077: LD_INT 31
65079: PUSH
65080: LD_INT 32
65082: PUSH
65083: LD_INT 36
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 101
65111: PUSH
65112: LD_INT 102
65114: PUSH
65115: LD_INT 103
65117: PUSH
65118: LD_INT 105
65120: PUSH
65121: LD_INT 106
65123: PUSH
65124: LD_INT 108
65126: PUSH
65127: LD_INT 109
65129: PUSH
65130: LD_INT 112
65132: PUSH
65133: LD_INT 114
65135: PUSH
65136: LD_INT 116
65138: PUSH
65139: LD_INT 117
65141: PUSH
65142: LD_INT 118
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: ST_TO_ADDR
65163: GO 67262
65165: LD_INT 10
65167: DOUBLE
65168: EQUAL
65169: IFTRUE 65173
65171: GO 65369
65173: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
65174: LD_ADDR_VAR 0 2
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: LD_INT 4
65184: PUSH
65185: LD_INT 5
65187: PUSH
65188: LD_INT 6
65190: PUSH
65191: LD_INT 7
65193: PUSH
65194: LD_INT 8
65196: PUSH
65197: LD_INT 9
65199: PUSH
65200: LD_INT 10
65202: PUSH
65203: LD_INT 11
65205: PUSH
65206: LD_INT 12
65208: PUSH
65209: LD_INT 13
65211: PUSH
65212: LD_INT 14
65214: PUSH
65215: LD_INT 15
65217: PUSH
65218: LD_INT 16
65220: PUSH
65221: LD_INT 17
65223: PUSH
65224: LD_INT 18
65226: PUSH
65227: LD_INT 19
65229: PUSH
65230: LD_INT 20
65232: PUSH
65233: LD_INT 21
65235: PUSH
65236: LD_INT 22
65238: PUSH
65239: LD_INT 23
65241: PUSH
65242: LD_INT 24
65244: PUSH
65245: LD_INT 25
65247: PUSH
65248: LD_INT 26
65250: PUSH
65251: LD_INT 28
65253: PUSH
65254: LD_INT 30
65256: PUSH
65257: LD_INT 31
65259: PUSH
65260: LD_INT 32
65262: PUSH
65263: LD_INT 36
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 101
65299: PUSH
65300: LD_INT 102
65302: PUSH
65303: LD_INT 103
65305: PUSH
65306: LD_INT 104
65308: PUSH
65309: LD_INT 105
65311: PUSH
65312: LD_INT 106
65314: PUSH
65315: LD_INT 107
65317: PUSH
65318: LD_INT 108
65320: PUSH
65321: LD_INT 109
65323: PUSH
65324: LD_INT 110
65326: PUSH
65327: LD_INT 111
65329: PUSH
65330: LD_INT 112
65332: PUSH
65333: LD_INT 114
65335: PUSH
65336: LD_INT 116
65338: PUSH
65339: LD_INT 117
65341: PUSH
65342: LD_INT 118
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: ST_TO_ADDR
65367: GO 67262
65369: LD_INT 11
65371: DOUBLE
65372: EQUAL
65373: IFTRUE 65377
65375: GO 65581
65377: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
65378: LD_ADDR_VAR 0 2
65382: PUSH
65383: LD_INT 2
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: LD_INT 4
65391: PUSH
65392: LD_INT 5
65394: PUSH
65395: LD_INT 6
65397: PUSH
65398: LD_INT 7
65400: PUSH
65401: LD_INT 8
65403: PUSH
65404: LD_INT 9
65406: PUSH
65407: LD_INT 10
65409: PUSH
65410: LD_INT 11
65412: PUSH
65413: LD_INT 12
65415: PUSH
65416: LD_INT 13
65418: PUSH
65419: LD_INT 14
65421: PUSH
65422: LD_INT 15
65424: PUSH
65425: LD_INT 16
65427: PUSH
65428: LD_INT 17
65430: PUSH
65431: LD_INT 18
65433: PUSH
65434: LD_INT 19
65436: PUSH
65437: LD_INT 20
65439: PUSH
65440: LD_INT 21
65442: PUSH
65443: LD_INT 22
65445: PUSH
65446: LD_INT 23
65448: PUSH
65449: LD_INT 24
65451: PUSH
65452: LD_INT 25
65454: PUSH
65455: LD_INT 26
65457: PUSH
65458: LD_INT 28
65460: PUSH
65461: LD_INT 30
65463: PUSH
65464: LD_INT 31
65466: PUSH
65467: LD_INT 32
65469: PUSH
65470: LD_INT 34
65472: PUSH
65473: LD_INT 36
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 101
65511: PUSH
65512: LD_INT 102
65514: PUSH
65515: LD_INT 103
65517: PUSH
65518: LD_INT 104
65520: PUSH
65521: LD_INT 105
65523: PUSH
65524: LD_INT 106
65526: PUSH
65527: LD_INT 107
65529: PUSH
65530: LD_INT 108
65532: PUSH
65533: LD_INT 109
65535: PUSH
65536: LD_INT 110
65538: PUSH
65539: LD_INT 111
65541: PUSH
65542: LD_INT 112
65544: PUSH
65545: LD_INT 114
65547: PUSH
65548: LD_INT 116
65550: PUSH
65551: LD_INT 117
65553: PUSH
65554: LD_INT 118
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: ST_TO_ADDR
65579: GO 67262
65581: LD_INT 12
65583: DOUBLE
65584: EQUAL
65585: IFTRUE 65589
65587: GO 65809
65589: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
65590: LD_ADDR_VAR 0 2
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: LD_INT 2
65600: PUSH
65601: LD_INT 3
65603: PUSH
65604: LD_INT 4
65606: PUSH
65607: LD_INT 5
65609: PUSH
65610: LD_INT 6
65612: PUSH
65613: LD_INT 7
65615: PUSH
65616: LD_INT 8
65618: PUSH
65619: LD_INT 9
65621: PUSH
65622: LD_INT 10
65624: PUSH
65625: LD_INT 11
65627: PUSH
65628: LD_INT 12
65630: PUSH
65631: LD_INT 13
65633: PUSH
65634: LD_INT 14
65636: PUSH
65637: LD_INT 15
65639: PUSH
65640: LD_INT 16
65642: PUSH
65643: LD_INT 17
65645: PUSH
65646: LD_INT 18
65648: PUSH
65649: LD_INT 19
65651: PUSH
65652: LD_INT 20
65654: PUSH
65655: LD_INT 21
65657: PUSH
65658: LD_INT 22
65660: PUSH
65661: LD_INT 23
65663: PUSH
65664: LD_INT 24
65666: PUSH
65667: LD_INT 25
65669: PUSH
65670: LD_INT 26
65672: PUSH
65673: LD_INT 27
65675: PUSH
65676: LD_INT 28
65678: PUSH
65679: LD_INT 30
65681: PUSH
65682: LD_INT 31
65684: PUSH
65685: LD_INT 32
65687: PUSH
65688: LD_INT 33
65690: PUSH
65691: LD_INT 34
65693: PUSH
65694: LD_INT 36
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 101
65735: PUSH
65736: LD_INT 102
65738: PUSH
65739: LD_INT 103
65741: PUSH
65742: LD_INT 104
65744: PUSH
65745: LD_INT 105
65747: PUSH
65748: LD_INT 106
65750: PUSH
65751: LD_INT 107
65753: PUSH
65754: LD_INT 108
65756: PUSH
65757: LD_INT 109
65759: PUSH
65760: LD_INT 110
65762: PUSH
65763: LD_INT 111
65765: PUSH
65766: LD_INT 112
65768: PUSH
65769: LD_INT 113
65771: PUSH
65772: LD_INT 114
65774: PUSH
65775: LD_INT 116
65777: PUSH
65778: LD_INT 117
65780: PUSH
65781: LD_INT 118
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: ST_TO_ADDR
65807: GO 67262
65809: LD_INT 13
65811: DOUBLE
65812: EQUAL
65813: IFTRUE 65817
65815: GO 66025
65817: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
65818: LD_ADDR_VAR 0 2
65822: PUSH
65823: LD_INT 1
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: LD_INT 4
65834: PUSH
65835: LD_INT 5
65837: PUSH
65838: LD_INT 8
65840: PUSH
65841: LD_INT 9
65843: PUSH
65844: LD_INT 10
65846: PUSH
65847: LD_INT 11
65849: PUSH
65850: LD_INT 12
65852: PUSH
65853: LD_INT 14
65855: PUSH
65856: LD_INT 15
65858: PUSH
65859: LD_INT 16
65861: PUSH
65862: LD_INT 17
65864: PUSH
65865: LD_INT 18
65867: PUSH
65868: LD_INT 19
65870: PUSH
65871: LD_INT 20
65873: PUSH
65874: LD_INT 21
65876: PUSH
65877: LD_INT 22
65879: PUSH
65880: LD_INT 23
65882: PUSH
65883: LD_INT 24
65885: PUSH
65886: LD_INT 25
65888: PUSH
65889: LD_INT 26
65891: PUSH
65892: LD_INT 27
65894: PUSH
65895: LD_INT 28
65897: PUSH
65898: LD_INT 30
65900: PUSH
65901: LD_INT 31
65903: PUSH
65904: LD_INT 32
65906: PUSH
65907: LD_INT 33
65909: PUSH
65910: LD_INT 34
65912: PUSH
65913: LD_INT 36
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 101
65951: PUSH
65952: LD_INT 102
65954: PUSH
65955: LD_INT 103
65957: PUSH
65958: LD_INT 104
65960: PUSH
65961: LD_INT 105
65963: PUSH
65964: LD_INT 106
65966: PUSH
65967: LD_INT 107
65969: PUSH
65970: LD_INT 108
65972: PUSH
65973: LD_INT 109
65975: PUSH
65976: LD_INT 110
65978: PUSH
65979: LD_INT 111
65981: PUSH
65982: LD_INT 112
65984: PUSH
65985: LD_INT 113
65987: PUSH
65988: LD_INT 114
65990: PUSH
65991: LD_INT 116
65993: PUSH
65994: LD_INT 117
65996: PUSH
65997: LD_INT 118
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: ST_TO_ADDR
66023: GO 67262
66025: LD_INT 14
66027: DOUBLE
66028: EQUAL
66029: IFTRUE 66033
66031: GO 66257
66033: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
66034: LD_ADDR_VAR 0 2
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: LD_INT 4
66050: PUSH
66051: LD_INT 5
66053: PUSH
66054: LD_INT 6
66056: PUSH
66057: LD_INT 7
66059: PUSH
66060: LD_INT 8
66062: PUSH
66063: LD_INT 9
66065: PUSH
66066: LD_INT 10
66068: PUSH
66069: LD_INT 11
66071: PUSH
66072: LD_INT 12
66074: PUSH
66075: LD_INT 13
66077: PUSH
66078: LD_INT 14
66080: PUSH
66081: LD_INT 15
66083: PUSH
66084: LD_INT 16
66086: PUSH
66087: LD_INT 17
66089: PUSH
66090: LD_INT 18
66092: PUSH
66093: LD_INT 19
66095: PUSH
66096: LD_INT 20
66098: PUSH
66099: LD_INT 21
66101: PUSH
66102: LD_INT 22
66104: PUSH
66105: LD_INT 23
66107: PUSH
66108: LD_INT 24
66110: PUSH
66111: LD_INT 25
66113: PUSH
66114: LD_INT 26
66116: PUSH
66117: LD_INT 27
66119: PUSH
66120: LD_INT 28
66122: PUSH
66123: LD_INT 29
66125: PUSH
66126: LD_INT 30
66128: PUSH
66129: LD_INT 31
66131: PUSH
66132: LD_INT 32
66134: PUSH
66135: LD_INT 33
66137: PUSH
66138: LD_INT 34
66140: PUSH
66141: LD_INT 36
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 101
66183: PUSH
66184: LD_INT 102
66186: PUSH
66187: LD_INT 103
66189: PUSH
66190: LD_INT 104
66192: PUSH
66193: LD_INT 105
66195: PUSH
66196: LD_INT 106
66198: PUSH
66199: LD_INT 107
66201: PUSH
66202: LD_INT 108
66204: PUSH
66205: LD_INT 109
66207: PUSH
66208: LD_INT 110
66210: PUSH
66211: LD_INT 111
66213: PUSH
66214: LD_INT 112
66216: PUSH
66217: LD_INT 113
66219: PUSH
66220: LD_INT 114
66222: PUSH
66223: LD_INT 116
66225: PUSH
66226: LD_INT 117
66228: PUSH
66229: LD_INT 118
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: ST_TO_ADDR
66255: GO 67262
66257: LD_INT 15
66259: DOUBLE
66260: EQUAL
66261: IFTRUE 66265
66263: GO 66489
66265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
66266: LD_ADDR_VAR 0 2
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: LD_INT 2
66276: PUSH
66277: LD_INT 3
66279: PUSH
66280: LD_INT 4
66282: PUSH
66283: LD_INT 5
66285: PUSH
66286: LD_INT 6
66288: PUSH
66289: LD_INT 7
66291: PUSH
66292: LD_INT 8
66294: PUSH
66295: LD_INT 9
66297: PUSH
66298: LD_INT 10
66300: PUSH
66301: LD_INT 11
66303: PUSH
66304: LD_INT 12
66306: PUSH
66307: LD_INT 13
66309: PUSH
66310: LD_INT 14
66312: PUSH
66313: LD_INT 15
66315: PUSH
66316: LD_INT 16
66318: PUSH
66319: LD_INT 17
66321: PUSH
66322: LD_INT 18
66324: PUSH
66325: LD_INT 19
66327: PUSH
66328: LD_INT 20
66330: PUSH
66331: LD_INT 21
66333: PUSH
66334: LD_INT 22
66336: PUSH
66337: LD_INT 23
66339: PUSH
66340: LD_INT 24
66342: PUSH
66343: LD_INT 25
66345: PUSH
66346: LD_INT 26
66348: PUSH
66349: LD_INT 27
66351: PUSH
66352: LD_INT 28
66354: PUSH
66355: LD_INT 29
66357: PUSH
66358: LD_INT 30
66360: PUSH
66361: LD_INT 31
66363: PUSH
66364: LD_INT 32
66366: PUSH
66367: LD_INT 33
66369: PUSH
66370: LD_INT 34
66372: PUSH
66373: LD_INT 36
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 101
66415: PUSH
66416: LD_INT 102
66418: PUSH
66419: LD_INT 103
66421: PUSH
66422: LD_INT 104
66424: PUSH
66425: LD_INT 105
66427: PUSH
66428: LD_INT 106
66430: PUSH
66431: LD_INT 107
66433: PUSH
66434: LD_INT 108
66436: PUSH
66437: LD_INT 109
66439: PUSH
66440: LD_INT 110
66442: PUSH
66443: LD_INT 111
66445: PUSH
66446: LD_INT 112
66448: PUSH
66449: LD_INT 113
66451: PUSH
66452: LD_INT 114
66454: PUSH
66455: LD_INT 116
66457: PUSH
66458: LD_INT 117
66460: PUSH
66461: LD_INT 118
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: ST_TO_ADDR
66487: GO 67262
66489: LD_INT 16
66491: DOUBLE
66492: EQUAL
66493: IFTRUE 66497
66495: GO 66633
66497: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
66498: LD_ADDR_VAR 0 2
66502: PUSH
66503: LD_INT 2
66505: PUSH
66506: LD_INT 4
66508: PUSH
66509: LD_INT 5
66511: PUSH
66512: LD_INT 7
66514: PUSH
66515: LD_INT 11
66517: PUSH
66518: LD_INT 12
66520: PUSH
66521: LD_INT 15
66523: PUSH
66524: LD_INT 16
66526: PUSH
66527: LD_INT 20
66529: PUSH
66530: LD_INT 21
66532: PUSH
66533: LD_INT 22
66535: PUSH
66536: LD_INT 23
66538: PUSH
66539: LD_INT 25
66541: PUSH
66542: LD_INT 26
66544: PUSH
66545: LD_INT 30
66547: PUSH
66548: LD_INT 31
66550: PUSH
66551: LD_INT 32
66553: PUSH
66554: LD_INT 33
66556: PUSH
66557: LD_INT 34
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 101
66583: PUSH
66584: LD_INT 102
66586: PUSH
66587: LD_INT 103
66589: PUSH
66590: LD_INT 106
66592: PUSH
66593: LD_INT 108
66595: PUSH
66596: LD_INT 112
66598: PUSH
66599: LD_INT 113
66601: PUSH
66602: LD_INT 114
66604: PUSH
66605: LD_INT 116
66607: PUSH
66608: LD_INT 117
66610: PUSH
66611: LD_INT 118
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: ST_TO_ADDR
66631: GO 67262
66633: LD_INT 17
66635: DOUBLE
66636: EQUAL
66637: IFTRUE 66641
66639: GO 66865
66641: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
66642: LD_ADDR_VAR 0 2
66646: PUSH
66647: LD_INT 1
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: LD_INT 4
66658: PUSH
66659: LD_INT 5
66661: PUSH
66662: LD_INT 6
66664: PUSH
66665: LD_INT 7
66667: PUSH
66668: LD_INT 8
66670: PUSH
66671: LD_INT 9
66673: PUSH
66674: LD_INT 10
66676: PUSH
66677: LD_INT 11
66679: PUSH
66680: LD_INT 12
66682: PUSH
66683: LD_INT 13
66685: PUSH
66686: LD_INT 14
66688: PUSH
66689: LD_INT 15
66691: PUSH
66692: LD_INT 16
66694: PUSH
66695: LD_INT 17
66697: PUSH
66698: LD_INT 18
66700: PUSH
66701: LD_INT 19
66703: PUSH
66704: LD_INT 20
66706: PUSH
66707: LD_INT 21
66709: PUSH
66710: LD_INT 22
66712: PUSH
66713: LD_INT 23
66715: PUSH
66716: LD_INT 24
66718: PUSH
66719: LD_INT 25
66721: PUSH
66722: LD_INT 26
66724: PUSH
66725: LD_INT 27
66727: PUSH
66728: LD_INT 28
66730: PUSH
66731: LD_INT 29
66733: PUSH
66734: LD_INT 30
66736: PUSH
66737: LD_INT 31
66739: PUSH
66740: LD_INT 32
66742: PUSH
66743: LD_INT 33
66745: PUSH
66746: LD_INT 34
66748: PUSH
66749: LD_INT 36
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 101
66791: PUSH
66792: LD_INT 102
66794: PUSH
66795: LD_INT 103
66797: PUSH
66798: LD_INT 104
66800: PUSH
66801: LD_INT 105
66803: PUSH
66804: LD_INT 106
66806: PUSH
66807: LD_INT 107
66809: PUSH
66810: LD_INT 108
66812: PUSH
66813: LD_INT 109
66815: PUSH
66816: LD_INT 110
66818: PUSH
66819: LD_INT 111
66821: PUSH
66822: LD_INT 112
66824: PUSH
66825: LD_INT 113
66827: PUSH
66828: LD_INT 114
66830: PUSH
66831: LD_INT 116
66833: PUSH
66834: LD_INT 117
66836: PUSH
66837: LD_INT 118
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: ST_TO_ADDR
66863: GO 67262
66865: LD_INT 18
66867: DOUBLE
66868: EQUAL
66869: IFTRUE 66873
66871: GO 67021
66873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
66874: LD_ADDR_VAR 0 2
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: LD_INT 4
66884: PUSH
66885: LD_INT 5
66887: PUSH
66888: LD_INT 7
66890: PUSH
66891: LD_INT 11
66893: PUSH
66894: LD_INT 12
66896: PUSH
66897: LD_INT 15
66899: PUSH
66900: LD_INT 16
66902: PUSH
66903: LD_INT 20
66905: PUSH
66906: LD_INT 21
66908: PUSH
66909: LD_INT 22
66911: PUSH
66912: LD_INT 23
66914: PUSH
66915: LD_INT 25
66917: PUSH
66918: LD_INT 26
66920: PUSH
66921: LD_INT 30
66923: PUSH
66924: LD_INT 31
66926: PUSH
66927: LD_INT 32
66929: PUSH
66930: LD_INT 33
66932: PUSH
66933: LD_INT 34
66935: PUSH
66936: LD_INT 35
66938: PUSH
66939: LD_INT 36
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 101
66967: PUSH
66968: LD_INT 102
66970: PUSH
66971: LD_INT 103
66973: PUSH
66974: LD_INT 106
66976: PUSH
66977: LD_INT 108
66979: PUSH
66980: LD_INT 112
66982: PUSH
66983: LD_INT 113
66985: PUSH
66986: LD_INT 114
66988: PUSH
66989: LD_INT 115
66991: PUSH
66992: LD_INT 116
66994: PUSH
66995: LD_INT 117
66997: PUSH
66998: LD_INT 118
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: ST_TO_ADDR
67019: GO 67262
67021: LD_INT 19
67023: DOUBLE
67024: EQUAL
67025: IFTRUE 67029
67027: GO 67261
67029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
67030: LD_ADDR_VAR 0 2
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: LD_INT 4
67046: PUSH
67047: LD_INT 5
67049: PUSH
67050: LD_INT 6
67052: PUSH
67053: LD_INT 7
67055: PUSH
67056: LD_INT 8
67058: PUSH
67059: LD_INT 9
67061: PUSH
67062: LD_INT 10
67064: PUSH
67065: LD_INT 11
67067: PUSH
67068: LD_INT 12
67070: PUSH
67071: LD_INT 13
67073: PUSH
67074: LD_INT 14
67076: PUSH
67077: LD_INT 15
67079: PUSH
67080: LD_INT 16
67082: PUSH
67083: LD_INT 17
67085: PUSH
67086: LD_INT 18
67088: PUSH
67089: LD_INT 19
67091: PUSH
67092: LD_INT 20
67094: PUSH
67095: LD_INT 21
67097: PUSH
67098: LD_INT 22
67100: PUSH
67101: LD_INT 23
67103: PUSH
67104: LD_INT 24
67106: PUSH
67107: LD_INT 25
67109: PUSH
67110: LD_INT 26
67112: PUSH
67113: LD_INT 27
67115: PUSH
67116: LD_INT 28
67118: PUSH
67119: LD_INT 29
67121: PUSH
67122: LD_INT 30
67124: PUSH
67125: LD_INT 31
67127: PUSH
67128: LD_INT 32
67130: PUSH
67131: LD_INT 33
67133: PUSH
67134: LD_INT 34
67136: PUSH
67137: LD_INT 35
67139: PUSH
67140: LD_INT 36
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 101
67183: PUSH
67184: LD_INT 102
67186: PUSH
67187: LD_INT 103
67189: PUSH
67190: LD_INT 104
67192: PUSH
67193: LD_INT 105
67195: PUSH
67196: LD_INT 106
67198: PUSH
67199: LD_INT 107
67201: PUSH
67202: LD_INT 108
67204: PUSH
67205: LD_INT 109
67207: PUSH
67208: LD_INT 110
67210: PUSH
67211: LD_INT 111
67213: PUSH
67214: LD_INT 112
67216: PUSH
67217: LD_INT 113
67219: PUSH
67220: LD_INT 114
67222: PUSH
67223: LD_INT 115
67225: PUSH
67226: LD_INT 116
67228: PUSH
67229: LD_INT 117
67231: PUSH
67232: LD_INT 118
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: ST_TO_ADDR
67259: GO 67262
67261: POP
// end else
67262: GO 67493
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
67264: LD_ADDR_VAR 0 2
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: LD_INT 2
67274: PUSH
67275: LD_INT 3
67277: PUSH
67278: LD_INT 4
67280: PUSH
67281: LD_INT 5
67283: PUSH
67284: LD_INT 6
67286: PUSH
67287: LD_INT 7
67289: PUSH
67290: LD_INT 8
67292: PUSH
67293: LD_INT 9
67295: PUSH
67296: LD_INT 10
67298: PUSH
67299: LD_INT 11
67301: PUSH
67302: LD_INT 12
67304: PUSH
67305: LD_INT 13
67307: PUSH
67308: LD_INT 14
67310: PUSH
67311: LD_INT 15
67313: PUSH
67314: LD_INT 16
67316: PUSH
67317: LD_INT 17
67319: PUSH
67320: LD_INT 18
67322: PUSH
67323: LD_INT 19
67325: PUSH
67326: LD_INT 20
67328: PUSH
67329: LD_INT 21
67331: PUSH
67332: LD_INT 22
67334: PUSH
67335: LD_INT 23
67337: PUSH
67338: LD_INT 24
67340: PUSH
67341: LD_INT 25
67343: PUSH
67344: LD_INT 26
67346: PUSH
67347: LD_INT 27
67349: PUSH
67350: LD_INT 28
67352: PUSH
67353: LD_INT 29
67355: PUSH
67356: LD_INT 30
67358: PUSH
67359: LD_INT 31
67361: PUSH
67362: LD_INT 32
67364: PUSH
67365: LD_INT 33
67367: PUSH
67368: LD_INT 34
67370: PUSH
67371: LD_INT 35
67373: PUSH
67374: LD_INT 36
67376: PUSH
67377: EMPTY
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 101
67417: PUSH
67418: LD_INT 102
67420: PUSH
67421: LD_INT 103
67423: PUSH
67424: LD_INT 104
67426: PUSH
67427: LD_INT 105
67429: PUSH
67430: LD_INT 106
67432: PUSH
67433: LD_INT 107
67435: PUSH
67436: LD_INT 108
67438: PUSH
67439: LD_INT 109
67441: PUSH
67442: LD_INT 110
67444: PUSH
67445: LD_INT 111
67447: PUSH
67448: LD_INT 112
67450: PUSH
67451: LD_INT 113
67453: PUSH
67454: LD_INT 114
67456: PUSH
67457: LD_INT 115
67459: PUSH
67460: LD_INT 116
67462: PUSH
67463: LD_INT 117
67465: PUSH
67466: LD_INT 118
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: ST_TO_ADDR
// if result then
67493: LD_VAR 0 2
67497: IFFALSE 68283
// begin normal :=  ;
67499: LD_ADDR_VAR 0 5
67503: PUSH
67504: LD_STRING 
67506: ST_TO_ADDR
// hardcore :=  ;
67507: LD_ADDR_VAR 0 6
67511: PUSH
67512: LD_STRING 
67514: ST_TO_ADDR
// active :=  ;
67515: LD_ADDR_VAR 0 7
67519: PUSH
67520: LD_STRING 
67522: ST_TO_ADDR
// for i = 1 to normalCounter do
67523: LD_ADDR_VAR 0 8
67527: PUSH
67528: DOUBLE
67529: LD_INT 1
67531: DEC
67532: ST_TO_ADDR
67533: LD_EXP 47
67537: PUSH
67538: FOR_TO
67539: IFFALSE 67640
// begin tmp := 0 ;
67541: LD_ADDR_VAR 0 3
67545: PUSH
67546: LD_STRING 0
67548: ST_TO_ADDR
// if result [ 1 ] then
67549: LD_VAR 0 2
67553: PUSH
67554: LD_INT 1
67556: ARRAY
67557: IFFALSE 67622
// if result [ 1 ] [ 1 ] = i then
67559: LD_VAR 0 2
67563: PUSH
67564: LD_INT 1
67566: ARRAY
67567: PUSH
67568: LD_INT 1
67570: ARRAY
67571: PUSH
67572: LD_VAR 0 8
67576: EQUAL
67577: IFFALSE 67622
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
67579: LD_ADDR_VAR 0 2
67583: PUSH
67584: LD_VAR 0 2
67588: PPUSH
67589: LD_INT 1
67591: PPUSH
67592: LD_VAR 0 2
67596: PUSH
67597: LD_INT 1
67599: ARRAY
67600: PPUSH
67601: LD_INT 1
67603: PPUSH
67604: CALL_OW 3
67608: PPUSH
67609: CALL_OW 1
67613: ST_TO_ADDR
// tmp := 1 ;
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_STRING 1
67621: ST_TO_ADDR
// end ; normal := normal & tmp ;
67622: LD_ADDR_VAR 0 5
67626: PUSH
67627: LD_VAR 0 5
67631: PUSH
67632: LD_VAR 0 3
67636: STR
67637: ST_TO_ADDR
// end ;
67638: GO 67538
67640: POP
67641: POP
// for i = 1 to hardcoreCounter do
67642: LD_ADDR_VAR 0 8
67646: PUSH
67647: DOUBLE
67648: LD_INT 1
67650: DEC
67651: ST_TO_ADDR
67652: LD_EXP 48
67656: PUSH
67657: FOR_TO
67658: IFFALSE 67763
// begin tmp := 0 ;
67660: LD_ADDR_VAR 0 3
67664: PUSH
67665: LD_STRING 0
67667: ST_TO_ADDR
// if result [ 2 ] then
67668: LD_VAR 0 2
67672: PUSH
67673: LD_INT 2
67675: ARRAY
67676: IFFALSE 67745
// if result [ 2 ] [ 1 ] = 100 + i then
67678: LD_VAR 0 2
67682: PUSH
67683: LD_INT 2
67685: ARRAY
67686: PUSH
67687: LD_INT 1
67689: ARRAY
67690: PUSH
67691: LD_INT 100
67693: PUSH
67694: LD_VAR 0 8
67698: PLUS
67699: EQUAL
67700: IFFALSE 67745
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67702: LD_ADDR_VAR 0 2
67706: PUSH
67707: LD_VAR 0 2
67711: PPUSH
67712: LD_INT 2
67714: PPUSH
67715: LD_VAR 0 2
67719: PUSH
67720: LD_INT 2
67722: ARRAY
67723: PPUSH
67724: LD_INT 1
67726: PPUSH
67727: CALL_OW 3
67731: PPUSH
67732: CALL_OW 1
67736: ST_TO_ADDR
// tmp := 1 ;
67737: LD_ADDR_VAR 0 3
67741: PUSH
67742: LD_STRING 1
67744: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67745: LD_ADDR_VAR 0 6
67749: PUSH
67750: LD_VAR 0 6
67754: PUSH
67755: LD_VAR 0 3
67759: STR
67760: ST_TO_ADDR
// end ;
67761: GO 67657
67763: POP
67764: POP
// if isGameLoad then
67765: LD_VAR 0 1
67769: IFFALSE 68244
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
67771: LD_ADDR_VAR 0 4
67775: PUSH
67776: LD_EXP 51
67780: PUSH
67781: LD_EXP 50
67785: PUSH
67786: LD_EXP 52
67790: PUSH
67791: LD_EXP 49
67795: PUSH
67796: LD_EXP 53
67800: PUSH
67801: LD_EXP 54
67805: PUSH
67806: LD_EXP 55
67810: PUSH
67811: LD_EXP 56
67815: PUSH
67816: LD_EXP 57
67820: PUSH
67821: LD_EXP 58
67825: PUSH
67826: LD_EXP 59
67830: PUSH
67831: LD_EXP 60
67835: PUSH
67836: LD_EXP 61
67840: PUSH
67841: LD_EXP 62
67845: PUSH
67846: LD_EXP 70
67850: PUSH
67851: LD_EXP 71
67855: PUSH
67856: LD_EXP 72
67860: PUSH
67861: LD_EXP 73
67865: PUSH
67866: LD_EXP 75
67870: PUSH
67871: LD_EXP 76
67875: PUSH
67876: LD_EXP 77
67880: PUSH
67881: LD_EXP 80
67885: PUSH
67886: LD_EXP 82
67890: PUSH
67891: LD_EXP 83
67895: PUSH
67896: LD_EXP 84
67900: PUSH
67901: LD_EXP 86
67905: PUSH
67906: LD_EXP 87
67910: PUSH
67911: LD_EXP 90
67915: PUSH
67916: LD_EXP 91
67920: PUSH
67921: LD_EXP 92
67925: PUSH
67926: LD_EXP 93
67930: PUSH
67931: LD_EXP 94
67935: PUSH
67936: LD_EXP 95
67940: PUSH
67941: LD_EXP 96
67945: PUSH
67946: LD_EXP 97
67950: PUSH
67951: LD_EXP 98
67955: PUSH
67956: LD_EXP 63
67960: PUSH
67961: LD_EXP 64
67965: PUSH
67966: LD_EXP 67
67970: PUSH
67971: LD_EXP 68
67975: PUSH
67976: LD_EXP 69
67980: PUSH
67981: LD_EXP 65
67985: PUSH
67986: LD_EXP 66
67990: PUSH
67991: LD_EXP 74
67995: PUSH
67996: LD_EXP 78
68000: PUSH
68001: LD_EXP 79
68005: PUSH
68006: LD_EXP 81
68010: PUSH
68011: LD_EXP 85
68015: PUSH
68016: LD_EXP 88
68020: PUSH
68021: LD_EXP 89
68025: PUSH
68026: LD_EXP 99
68030: PUSH
68031: LD_EXP 100
68035: PUSH
68036: LD_EXP 101
68040: PUSH
68041: LD_EXP 102
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// tmp :=  ;
68102: LD_ADDR_VAR 0 3
68106: PUSH
68107: LD_STRING 
68109: ST_TO_ADDR
// for i = 1 to normalCounter do
68110: LD_ADDR_VAR 0 8
68114: PUSH
68115: DOUBLE
68116: LD_INT 1
68118: DEC
68119: ST_TO_ADDR
68120: LD_EXP 47
68124: PUSH
68125: FOR_TO
68126: IFFALSE 68162
// begin if flags [ i ] then
68128: LD_VAR 0 4
68132: PUSH
68133: LD_VAR 0 8
68137: ARRAY
68138: IFFALSE 68160
// tmp := tmp & i & ; ;
68140: LD_ADDR_VAR 0 3
68144: PUSH
68145: LD_VAR 0 3
68149: PUSH
68150: LD_VAR 0 8
68154: STR
68155: PUSH
68156: LD_STRING ;
68158: STR
68159: ST_TO_ADDR
// end ;
68160: GO 68125
68162: POP
68163: POP
// for i = 1 to hardcoreCounter do
68164: LD_ADDR_VAR 0 8
68168: PUSH
68169: DOUBLE
68170: LD_INT 1
68172: DEC
68173: ST_TO_ADDR
68174: LD_EXP 48
68178: PUSH
68179: FOR_TO
68180: IFFALSE 68226
// begin if flags [ normalCounter + i ] then
68182: LD_VAR 0 4
68186: PUSH
68187: LD_EXP 47
68191: PUSH
68192: LD_VAR 0 8
68196: PLUS
68197: ARRAY
68198: IFFALSE 68224
// tmp := tmp & ( 100 + i ) & ; ;
68200: LD_ADDR_VAR 0 3
68204: PUSH
68205: LD_VAR 0 3
68209: PUSH
68210: LD_INT 100
68212: PUSH
68213: LD_VAR 0 8
68217: PLUS
68218: STR
68219: PUSH
68220: LD_STRING ;
68222: STR
68223: ST_TO_ADDR
// end ;
68224: GO 68179
68226: POP
68227: POP
// if tmp then
68228: LD_VAR 0 3
68232: IFFALSE 68244
// active := tmp ;
68234: LD_ADDR_VAR 0 7
68238: PUSH
68239: LD_VAR 0 3
68243: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
68244: LD_STRING getStreamItemsFromMission("
68246: PUSH
68247: LD_VAR 0 5
68251: STR
68252: PUSH
68253: LD_STRING ","
68255: STR
68256: PUSH
68257: LD_VAR 0 6
68261: STR
68262: PUSH
68263: LD_STRING ","
68265: STR
68266: PUSH
68267: LD_VAR 0 7
68271: STR
68272: PUSH
68273: LD_STRING ")
68275: STR
68276: PPUSH
68277: CALL_OW 559
// end else
68281: GO 68290
// ToLua ( getStreamItemsFromMission("","","") ) ;
68283: LD_STRING getStreamItemsFromMission("","","")
68285: PPUSH
68286: CALL_OW 559
// end ;
68290: LD_VAR 0 2
68294: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68295: LD_EXP 46
68299: PUSH
68300: LD_EXP 51
68304: AND
68305: IFFALSE 68429
68307: GO 68309
68309: DISABLE
68310: LD_INT 0
68312: PPUSH
68313: PPUSH
// begin enable ;
68314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68315: LD_ADDR_VAR 0 2
68319: PUSH
68320: LD_INT 22
68322: PUSH
68323: LD_OWVAR 2
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: LD_INT 34
68337: PUSH
68338: LD_INT 7
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PUSH
68345: LD_INT 34
68347: PUSH
68348: LD_INT 45
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 34
68357: PUSH
68358: LD_INT 28
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 34
68367: PUSH
68368: LD_INT 47
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PPUSH
68386: CALL_OW 69
68390: ST_TO_ADDR
// if not tmp then
68391: LD_VAR 0 2
68395: NOT
68396: IFFALSE 68400
// exit ;
68398: GO 68429
// for i in tmp do
68400: LD_ADDR_VAR 0 1
68404: PUSH
68405: LD_VAR 0 2
68409: PUSH
68410: FOR_IN
68411: IFFALSE 68427
// begin SetLives ( i , 0 ) ;
68413: LD_VAR 0 1
68417: PPUSH
68418: LD_INT 0
68420: PPUSH
68421: CALL_OW 234
// end ;
68425: GO 68410
68427: POP
68428: POP
// end ;
68429: PPOPN 2
68431: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68432: LD_EXP 46
68436: PUSH
68437: LD_EXP 52
68441: AND
68442: IFFALSE 68526
68444: GO 68446
68446: DISABLE
68447: LD_INT 0
68449: PPUSH
68450: PPUSH
// begin enable ;
68451: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68452: LD_ADDR_VAR 0 2
68456: PUSH
68457: LD_INT 22
68459: PUSH
68460: LD_OWVAR 2
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 32
68471: PUSH
68472: LD_INT 3
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PPUSH
68483: CALL_OW 69
68487: ST_TO_ADDR
// if not tmp then
68488: LD_VAR 0 2
68492: NOT
68493: IFFALSE 68497
// exit ;
68495: GO 68526
// for i in tmp do
68497: LD_ADDR_VAR 0 1
68501: PUSH
68502: LD_VAR 0 2
68506: PUSH
68507: FOR_IN
68508: IFFALSE 68524
// begin SetLives ( i , 0 ) ;
68510: LD_VAR 0 1
68514: PPUSH
68515: LD_INT 0
68517: PPUSH
68518: CALL_OW 234
// end ;
68522: GO 68507
68524: POP
68525: POP
// end ;
68526: PPOPN 2
68528: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68529: LD_EXP 46
68533: PUSH
68534: LD_EXP 49
68538: AND
68539: IFFALSE 68632
68541: GO 68543
68543: DISABLE
68544: LD_INT 0
68546: PPUSH
// begin enable ;
68547: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68548: LD_ADDR_VAR 0 1
68552: PUSH
68553: LD_INT 22
68555: PUSH
68556: LD_OWVAR 2
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 2
68567: PUSH
68568: LD_INT 25
68570: PUSH
68571: LD_INT 5
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 25
68580: PUSH
68581: LD_INT 9
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 25
68590: PUSH
68591: LD_INT 8
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PPUSH
68608: CALL_OW 69
68612: PUSH
68613: FOR_IN
68614: IFFALSE 68630
// begin SetClass ( i , 1 ) ;
68616: LD_VAR 0 1
68620: PPUSH
68621: LD_INT 1
68623: PPUSH
68624: CALL_OW 336
// end ;
68628: GO 68613
68630: POP
68631: POP
// end ;
68632: PPOPN 1
68634: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68635: LD_EXP 46
68639: PUSH
68640: LD_EXP 50
68644: AND
68645: PUSH
68646: LD_OWVAR 65
68650: PUSH
68651: LD_INT 7
68653: LESS
68654: AND
68655: IFFALSE 68669
68657: GO 68659
68659: DISABLE
// begin enable ;
68660: ENABLE
// game_speed := 7 ;
68661: LD_ADDR_OWVAR 65
68665: PUSH
68666: LD_INT 7
68668: ST_TO_ADDR
// end ;
68669: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68670: LD_EXP 46
68674: PUSH
68675: LD_EXP 53
68679: AND
68680: IFFALSE 68882
68682: GO 68684
68684: DISABLE
68685: LD_INT 0
68687: PPUSH
68688: PPUSH
68689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68690: LD_ADDR_VAR 0 3
68694: PUSH
68695: LD_INT 81
68697: PUSH
68698: LD_OWVAR 2
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 21
68709: PUSH
68710: LD_INT 1
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PPUSH
68721: CALL_OW 69
68725: ST_TO_ADDR
// if not tmp then
68726: LD_VAR 0 3
68730: NOT
68731: IFFALSE 68735
// exit ;
68733: GO 68882
// if tmp > 5 then
68735: LD_VAR 0 3
68739: PUSH
68740: LD_INT 5
68742: GREATER
68743: IFFALSE 68755
// k := 5 else
68745: LD_ADDR_VAR 0 2
68749: PUSH
68750: LD_INT 5
68752: ST_TO_ADDR
68753: GO 68765
// k := tmp ;
68755: LD_ADDR_VAR 0 2
68759: PUSH
68760: LD_VAR 0 3
68764: ST_TO_ADDR
// for i := 1 to k do
68765: LD_ADDR_VAR 0 1
68769: PUSH
68770: DOUBLE
68771: LD_INT 1
68773: DEC
68774: ST_TO_ADDR
68775: LD_VAR 0 2
68779: PUSH
68780: FOR_TO
68781: IFFALSE 68880
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68783: LD_VAR 0 3
68787: PUSH
68788: LD_VAR 0 1
68792: ARRAY
68793: PPUSH
68794: LD_VAR 0 1
68798: PUSH
68799: LD_INT 4
68801: MOD
68802: PUSH
68803: LD_INT 1
68805: PLUS
68806: PPUSH
68807: CALL_OW 259
68811: PUSH
68812: LD_INT 10
68814: LESS
68815: IFFALSE 68878
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68817: LD_VAR 0 3
68821: PUSH
68822: LD_VAR 0 1
68826: ARRAY
68827: PPUSH
68828: LD_VAR 0 1
68832: PUSH
68833: LD_INT 4
68835: MOD
68836: PUSH
68837: LD_INT 1
68839: PLUS
68840: PPUSH
68841: LD_VAR 0 3
68845: PUSH
68846: LD_VAR 0 1
68850: ARRAY
68851: PPUSH
68852: LD_VAR 0 1
68856: PUSH
68857: LD_INT 4
68859: MOD
68860: PUSH
68861: LD_INT 1
68863: PLUS
68864: PPUSH
68865: CALL_OW 259
68869: PUSH
68870: LD_INT 1
68872: PLUS
68873: PPUSH
68874: CALL_OW 237
68878: GO 68780
68880: POP
68881: POP
// end ;
68882: PPOPN 3
68884: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68885: LD_EXP 46
68889: PUSH
68890: LD_EXP 54
68894: AND
68895: IFFALSE 68915
68897: GO 68899
68899: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68900: LD_INT 4
68902: PPUSH
68903: LD_OWVAR 2
68907: PPUSH
68908: LD_INT 0
68910: PPUSH
68911: CALL_OW 324
68915: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68916: LD_EXP 46
68920: PUSH
68921: LD_EXP 83
68925: AND
68926: IFFALSE 68946
68928: GO 68930
68930: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
68931: LD_INT 19
68933: PPUSH
68934: LD_OWVAR 2
68938: PPUSH
68939: LD_INT 0
68941: PPUSH
68942: CALL_OW 324
68946: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
68947: LD_EXP 46
68951: PUSH
68952: LD_EXP 55
68956: AND
68957: IFFALSE 69059
68959: GO 68961
68961: DISABLE
68962: LD_INT 0
68964: PPUSH
68965: PPUSH
// begin enable ;
68966: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
68967: LD_ADDR_VAR 0 2
68971: PUSH
68972: LD_INT 22
68974: PUSH
68975: LD_OWVAR 2
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 2
68986: PUSH
68987: LD_INT 34
68989: PUSH
68990: LD_INT 11
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 34
68999: PUSH
69000: LD_INT 30
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: LIST
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PPUSH
69016: CALL_OW 69
69020: ST_TO_ADDR
// if not tmp then
69021: LD_VAR 0 2
69025: NOT
69026: IFFALSE 69030
// exit ;
69028: GO 69059
// for i in tmp do
69030: LD_ADDR_VAR 0 1
69034: PUSH
69035: LD_VAR 0 2
69039: PUSH
69040: FOR_IN
69041: IFFALSE 69057
// begin SetLives ( i , 0 ) ;
69043: LD_VAR 0 1
69047: PPUSH
69048: LD_INT 0
69050: PPUSH
69051: CALL_OW 234
// end ;
69055: GO 69040
69057: POP
69058: POP
// end ;
69059: PPOPN 2
69061: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69062: LD_EXP 46
69066: PUSH
69067: LD_EXP 56
69071: AND
69072: IFFALSE 69092
69074: GO 69076
69076: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69077: LD_INT 32
69079: PPUSH
69080: LD_OWVAR 2
69084: PPUSH
69085: LD_INT 0
69087: PPUSH
69088: CALL_OW 324
69092: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69093: LD_EXP 46
69097: PUSH
69098: LD_EXP 57
69102: AND
69103: IFFALSE 69284
69105: GO 69107
69107: DISABLE
69108: LD_INT 0
69110: PPUSH
69111: PPUSH
69112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69113: LD_ADDR_VAR 0 2
69117: PUSH
69118: LD_INT 22
69120: PUSH
69121: LD_OWVAR 2
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 33
69132: PUSH
69133: LD_INT 3
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PPUSH
69144: CALL_OW 69
69148: ST_TO_ADDR
// if not tmp then
69149: LD_VAR 0 2
69153: NOT
69154: IFFALSE 69158
// exit ;
69156: GO 69284
// side := 0 ;
69158: LD_ADDR_VAR 0 3
69162: PUSH
69163: LD_INT 0
69165: ST_TO_ADDR
// for i := 1 to 8 do
69166: LD_ADDR_VAR 0 1
69170: PUSH
69171: DOUBLE
69172: LD_INT 1
69174: DEC
69175: ST_TO_ADDR
69176: LD_INT 8
69178: PUSH
69179: FOR_TO
69180: IFFALSE 69228
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69182: LD_OWVAR 2
69186: PUSH
69187: LD_VAR 0 1
69191: NONEQUAL
69192: PUSH
69193: LD_OWVAR 2
69197: PPUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: CALL_OW 81
69207: PUSH
69208: LD_INT 2
69210: EQUAL
69211: AND
69212: IFFALSE 69226
// begin side := i ;
69214: LD_ADDR_VAR 0 3
69218: PUSH
69219: LD_VAR 0 1
69223: ST_TO_ADDR
// break ;
69224: GO 69228
// end ;
69226: GO 69179
69228: POP
69229: POP
// if not side then
69230: LD_VAR 0 3
69234: NOT
69235: IFFALSE 69239
// exit ;
69237: GO 69284
// for i := 1 to tmp do
69239: LD_ADDR_VAR 0 1
69243: PUSH
69244: DOUBLE
69245: LD_INT 1
69247: DEC
69248: ST_TO_ADDR
69249: LD_VAR 0 2
69253: PUSH
69254: FOR_TO
69255: IFFALSE 69282
// if Prob ( 60 ) then
69257: LD_INT 60
69259: PPUSH
69260: CALL_OW 13
69264: IFFALSE 69280
// SetSide ( i , side ) ;
69266: LD_VAR 0 1
69270: PPUSH
69271: LD_VAR 0 3
69275: PPUSH
69276: CALL_OW 235
69280: GO 69254
69282: POP
69283: POP
// end ;
69284: PPOPN 3
69286: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69287: LD_EXP 46
69291: PUSH
69292: LD_EXP 59
69296: AND
69297: IFFALSE 69416
69299: GO 69301
69301: DISABLE
69302: LD_INT 0
69304: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69305: LD_ADDR_VAR 0 1
69309: PUSH
69310: LD_INT 22
69312: PUSH
69313: LD_OWVAR 2
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 21
69324: PUSH
69325: LD_INT 1
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 3
69334: PUSH
69335: LD_INT 23
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: LIST
69353: PPUSH
69354: CALL_OW 69
69358: PUSH
69359: FOR_IN
69360: IFFALSE 69414
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69362: LD_VAR 0 1
69366: PPUSH
69367: CALL_OW 257
69371: PUSH
69372: LD_INT 1
69374: PUSH
69375: LD_INT 2
69377: PUSH
69378: LD_INT 3
69380: PUSH
69381: LD_INT 4
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: IN
69390: IFFALSE 69412
// SetClass ( un , rand ( 1 , 4 ) ) ;
69392: LD_VAR 0 1
69396: PPUSH
69397: LD_INT 1
69399: PPUSH
69400: LD_INT 4
69402: PPUSH
69403: CALL_OW 12
69407: PPUSH
69408: CALL_OW 336
69412: GO 69359
69414: POP
69415: POP
// end ;
69416: PPOPN 1
69418: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69419: LD_EXP 46
69423: PUSH
69424: LD_EXP 58
69428: AND
69429: IFFALSE 69508
69431: GO 69433
69433: DISABLE
69434: LD_INT 0
69436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69437: LD_ADDR_VAR 0 1
69441: PUSH
69442: LD_INT 22
69444: PUSH
69445: LD_OWVAR 2
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 21
69456: PUSH
69457: LD_INT 3
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PPUSH
69468: CALL_OW 69
69472: ST_TO_ADDR
// if not tmp then
69473: LD_VAR 0 1
69477: NOT
69478: IFFALSE 69482
// exit ;
69480: GO 69508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69482: LD_VAR 0 1
69486: PUSH
69487: LD_INT 1
69489: PPUSH
69490: LD_VAR 0 1
69494: PPUSH
69495: CALL_OW 12
69499: ARRAY
69500: PPUSH
69501: LD_INT 100
69503: PPUSH
69504: CALL_OW 234
// end ;
69508: PPOPN 1
69510: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69511: LD_EXP 46
69515: PUSH
69516: LD_EXP 60
69520: AND
69521: IFFALSE 69619
69523: GO 69525
69525: DISABLE
69526: LD_INT 0
69528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69529: LD_ADDR_VAR 0 1
69533: PUSH
69534: LD_INT 22
69536: PUSH
69537: LD_OWVAR 2
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 21
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PPUSH
69560: CALL_OW 69
69564: ST_TO_ADDR
// if not tmp then
69565: LD_VAR 0 1
69569: NOT
69570: IFFALSE 69574
// exit ;
69572: GO 69619
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69574: LD_VAR 0 1
69578: PUSH
69579: LD_INT 1
69581: PPUSH
69582: LD_VAR 0 1
69586: PPUSH
69587: CALL_OW 12
69591: ARRAY
69592: PPUSH
69593: LD_INT 1
69595: PPUSH
69596: LD_INT 4
69598: PPUSH
69599: CALL_OW 12
69603: PPUSH
69604: LD_INT 3000
69606: PPUSH
69607: LD_INT 9000
69609: PPUSH
69610: CALL_OW 12
69614: PPUSH
69615: CALL_OW 492
// end ;
69619: PPOPN 1
69621: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69622: LD_EXP 46
69626: PUSH
69627: LD_EXP 61
69631: AND
69632: IFFALSE 69652
69634: GO 69636
69636: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69637: LD_INT 1
69639: PPUSH
69640: LD_OWVAR 2
69644: PPUSH
69645: LD_INT 0
69647: PPUSH
69648: CALL_OW 324
69652: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69653: LD_EXP 46
69657: PUSH
69658: LD_EXP 62
69662: AND
69663: IFFALSE 69746
69665: GO 69667
69667: DISABLE
69668: LD_INT 0
69670: PPUSH
69671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69672: LD_ADDR_VAR 0 2
69676: PUSH
69677: LD_INT 22
69679: PUSH
69680: LD_OWVAR 2
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 21
69691: PUSH
69692: LD_INT 3
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PPUSH
69703: CALL_OW 69
69707: ST_TO_ADDR
// if not tmp then
69708: LD_VAR 0 2
69712: NOT
69713: IFFALSE 69717
// exit ;
69715: GO 69746
// for i in tmp do
69717: LD_ADDR_VAR 0 1
69721: PUSH
69722: LD_VAR 0 2
69726: PUSH
69727: FOR_IN
69728: IFFALSE 69744
// SetBLevel ( i , 10 ) ;
69730: LD_VAR 0 1
69734: PPUSH
69735: LD_INT 10
69737: PPUSH
69738: CALL_OW 241
69742: GO 69727
69744: POP
69745: POP
// end ;
69746: PPOPN 2
69748: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69749: LD_EXP 46
69753: PUSH
69754: LD_EXP 63
69758: AND
69759: IFFALSE 69870
69761: GO 69763
69763: DISABLE
69764: LD_INT 0
69766: PPUSH
69767: PPUSH
69768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69769: LD_ADDR_VAR 0 3
69773: PUSH
69774: LD_INT 22
69776: PUSH
69777: LD_OWVAR 2
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 25
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PPUSH
69800: CALL_OW 69
69804: ST_TO_ADDR
// if not tmp then
69805: LD_VAR 0 3
69809: NOT
69810: IFFALSE 69814
// exit ;
69812: GO 69870
// un := tmp [ rand ( 1 , tmp ) ] ;
69814: LD_ADDR_VAR 0 2
69818: PUSH
69819: LD_VAR 0 3
69823: PUSH
69824: LD_INT 1
69826: PPUSH
69827: LD_VAR 0 3
69831: PPUSH
69832: CALL_OW 12
69836: ARRAY
69837: ST_TO_ADDR
// if Crawls ( un ) then
69838: LD_VAR 0 2
69842: PPUSH
69843: CALL_OW 318
69847: IFFALSE 69858
// ComWalk ( un ) ;
69849: LD_VAR 0 2
69853: PPUSH
69854: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69858: LD_VAR 0 2
69862: PPUSH
69863: LD_INT 5
69865: PPUSH
69866: CALL_OW 336
// end ;
69870: PPOPN 3
69872: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
69873: LD_EXP 46
69877: PUSH
69878: LD_EXP 64
69882: AND
69883: PUSH
69884: LD_OWVAR 67
69888: PUSH
69889: LD_INT 4
69891: LESS
69892: AND
69893: IFFALSE 69912
69895: GO 69897
69897: DISABLE
// begin Difficulty := Difficulty + 1 ;
69898: LD_ADDR_OWVAR 67
69902: PUSH
69903: LD_OWVAR 67
69907: PUSH
69908: LD_INT 1
69910: PLUS
69911: ST_TO_ADDR
// end ;
69912: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69913: LD_EXP 46
69917: PUSH
69918: LD_EXP 65
69922: AND
69923: IFFALSE 70026
69925: GO 69927
69927: DISABLE
69928: LD_INT 0
69930: PPUSH
// begin for i := 1 to 5 do
69931: LD_ADDR_VAR 0 1
69935: PUSH
69936: DOUBLE
69937: LD_INT 1
69939: DEC
69940: ST_TO_ADDR
69941: LD_INT 5
69943: PUSH
69944: FOR_TO
69945: IFFALSE 70024
// begin uc_nation := nation_nature ;
69947: LD_ADDR_OWVAR 21
69951: PUSH
69952: LD_INT 0
69954: ST_TO_ADDR
// uc_side := 0 ;
69955: LD_ADDR_OWVAR 20
69959: PUSH
69960: LD_INT 0
69962: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69963: LD_ADDR_OWVAR 29
69967: PUSH
69968: LD_INT 12
69970: PUSH
69971: LD_INT 12
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: ST_TO_ADDR
// hc_agressivity := 20 ;
69978: LD_ADDR_OWVAR 35
69982: PUSH
69983: LD_INT 20
69985: ST_TO_ADDR
// hc_class := class_tiger ;
69986: LD_ADDR_OWVAR 28
69990: PUSH
69991: LD_INT 14
69993: ST_TO_ADDR
// hc_gallery :=  ;
69994: LD_ADDR_OWVAR 33
69998: PUSH
69999: LD_STRING 
70001: ST_TO_ADDR
// hc_name :=  ;
70002: LD_ADDR_OWVAR 26
70006: PUSH
70007: LD_STRING 
70009: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70010: CALL_OW 44
70014: PPUSH
70015: LD_INT 0
70017: PPUSH
70018: CALL_OW 51
// end ;
70022: GO 69944
70024: POP
70025: POP
// end ;
70026: PPOPN 1
70028: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70029: LD_EXP 46
70033: PUSH
70034: LD_EXP 66
70038: AND
70039: IFFALSE 70048
70041: GO 70043
70043: DISABLE
// StreamSibBomb ;
70044: CALL 70049 0 0
70048: END
// export function StreamSibBomb ; var i , x , y ; begin
70049: LD_INT 0
70051: PPUSH
70052: PPUSH
70053: PPUSH
70054: PPUSH
// result := false ;
70055: LD_ADDR_VAR 0 1
70059: PUSH
70060: LD_INT 0
70062: ST_TO_ADDR
// for i := 1 to 16 do
70063: LD_ADDR_VAR 0 2
70067: PUSH
70068: DOUBLE
70069: LD_INT 1
70071: DEC
70072: ST_TO_ADDR
70073: LD_INT 16
70075: PUSH
70076: FOR_TO
70077: IFFALSE 70276
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70079: LD_ADDR_VAR 0 3
70083: PUSH
70084: LD_INT 10
70086: PUSH
70087: LD_INT 20
70089: PUSH
70090: LD_INT 30
70092: PUSH
70093: LD_INT 40
70095: PUSH
70096: LD_INT 50
70098: PUSH
70099: LD_INT 60
70101: PUSH
70102: LD_INT 70
70104: PUSH
70105: LD_INT 80
70107: PUSH
70108: LD_INT 90
70110: PUSH
70111: LD_INT 100
70113: PUSH
70114: LD_INT 110
70116: PUSH
70117: LD_INT 120
70119: PUSH
70120: LD_INT 130
70122: PUSH
70123: LD_INT 140
70125: PUSH
70126: LD_INT 150
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 1
70148: PPUSH
70149: LD_INT 15
70151: PPUSH
70152: CALL_OW 12
70156: ARRAY
70157: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70158: LD_ADDR_VAR 0 4
70162: PUSH
70163: LD_INT 10
70165: PUSH
70166: LD_INT 20
70168: PUSH
70169: LD_INT 30
70171: PUSH
70172: LD_INT 40
70174: PUSH
70175: LD_INT 50
70177: PUSH
70178: LD_INT 60
70180: PUSH
70181: LD_INT 70
70183: PUSH
70184: LD_INT 80
70186: PUSH
70187: LD_INT 90
70189: PUSH
70190: LD_INT 100
70192: PUSH
70193: LD_INT 110
70195: PUSH
70196: LD_INT 120
70198: PUSH
70199: LD_INT 130
70201: PUSH
70202: LD_INT 140
70204: PUSH
70205: LD_INT 150
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 1
70227: PPUSH
70228: LD_INT 15
70230: PPUSH
70231: CALL_OW 12
70235: ARRAY
70236: ST_TO_ADDR
// if ValidHex ( x , y ) then
70237: LD_VAR 0 3
70241: PPUSH
70242: LD_VAR 0 4
70246: PPUSH
70247: CALL_OW 488
70251: IFFALSE 70274
// begin result := [ x , y ] ;
70253: LD_ADDR_VAR 0 1
70257: PUSH
70258: LD_VAR 0 3
70262: PUSH
70263: LD_VAR 0 4
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: ST_TO_ADDR
// break ;
70272: GO 70276
// end ; end ;
70274: GO 70076
70276: POP
70277: POP
// if result then
70278: LD_VAR 0 1
70282: IFFALSE 70342
// begin ToLua ( playSibBomb() ) ;
70284: LD_STRING playSibBomb()
70286: PPUSH
70287: CALL_OW 559
// wait ( 0 0$14 ) ;
70291: LD_INT 490
70293: PPUSH
70294: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70298: LD_VAR 0 1
70302: PUSH
70303: LD_INT 1
70305: ARRAY
70306: PPUSH
70307: LD_VAR 0 1
70311: PUSH
70312: LD_INT 2
70314: ARRAY
70315: PPUSH
70316: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70320: LD_VAR 0 1
70324: PUSH
70325: LD_INT 1
70327: ARRAY
70328: PPUSH
70329: LD_VAR 0 1
70333: PUSH
70334: LD_INT 2
70336: ARRAY
70337: PPUSH
70338: CALL_OW 429
// end ; end ;
70342: LD_VAR 0 1
70346: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70347: LD_EXP 46
70351: PUSH
70352: LD_EXP 68
70356: AND
70357: IFFALSE 70369
70359: GO 70361
70361: DISABLE
// YouLost (  ) ;
70362: LD_STRING 
70364: PPUSH
70365: CALL_OW 104
70369: END
// every 0 0$1 trigger StreamModeActive and sFog do
70370: LD_EXP 46
70374: PUSH
70375: LD_EXP 67
70379: AND
70380: IFFALSE 70394
70382: GO 70384
70384: DISABLE
// FogOff ( your_side ) ;
70385: LD_OWVAR 2
70389: PPUSH
70390: CALL_OW 344
70394: END
// every 0 0$1 trigger StreamModeActive and sSun do
70395: LD_EXP 46
70399: PUSH
70400: LD_EXP 69
70404: AND
70405: IFFALSE 70433
70407: GO 70409
70409: DISABLE
// begin solar_recharge_percent := 0 ;
70410: LD_ADDR_OWVAR 79
70414: PUSH
70415: LD_INT 0
70417: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70418: LD_INT 10500
70420: PPUSH
70421: CALL_OW 67
// solar_recharge_percent := 100 ;
70425: LD_ADDR_OWVAR 79
70429: PUSH
70430: LD_INT 100
70432: ST_TO_ADDR
// end ;
70433: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70434: LD_EXP 46
70438: PUSH
70439: LD_EXP 70
70443: AND
70444: IFFALSE 70683
70446: GO 70448
70448: DISABLE
70449: LD_INT 0
70451: PPUSH
70452: PPUSH
70453: PPUSH
// begin tmp := [ ] ;
70454: LD_ADDR_VAR 0 3
70458: PUSH
70459: EMPTY
70460: ST_TO_ADDR
// for i := 1 to 6 do
70461: LD_ADDR_VAR 0 1
70465: PUSH
70466: DOUBLE
70467: LD_INT 1
70469: DEC
70470: ST_TO_ADDR
70471: LD_INT 6
70473: PUSH
70474: FOR_TO
70475: IFFALSE 70580
// begin uc_nation := nation_nature ;
70477: LD_ADDR_OWVAR 21
70481: PUSH
70482: LD_INT 0
70484: ST_TO_ADDR
// uc_side := 0 ;
70485: LD_ADDR_OWVAR 20
70489: PUSH
70490: LD_INT 0
70492: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70493: LD_ADDR_OWVAR 29
70497: PUSH
70498: LD_INT 12
70500: PUSH
70501: LD_INT 12
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: ST_TO_ADDR
// hc_agressivity := 20 ;
70508: LD_ADDR_OWVAR 35
70512: PUSH
70513: LD_INT 20
70515: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70516: LD_ADDR_OWVAR 28
70520: PUSH
70521: LD_INT 17
70523: ST_TO_ADDR
// hc_gallery :=  ;
70524: LD_ADDR_OWVAR 33
70528: PUSH
70529: LD_STRING 
70531: ST_TO_ADDR
// hc_name :=  ;
70532: LD_ADDR_OWVAR 26
70536: PUSH
70537: LD_STRING 
70539: ST_TO_ADDR
// un := CreateHuman ;
70540: LD_ADDR_VAR 0 2
70544: PUSH
70545: CALL_OW 44
70549: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70550: LD_VAR 0 2
70554: PPUSH
70555: LD_INT 1
70557: PPUSH
70558: CALL_OW 51
// tmp := tmp ^ un ;
70562: LD_ADDR_VAR 0 3
70566: PUSH
70567: LD_VAR 0 3
70571: PUSH
70572: LD_VAR 0 2
70576: ADD
70577: ST_TO_ADDR
// end ;
70578: GO 70474
70580: POP
70581: POP
// repeat wait ( 0 0$1 ) ;
70582: LD_INT 35
70584: PPUSH
70585: CALL_OW 67
// for un in tmp do
70589: LD_ADDR_VAR 0 2
70593: PUSH
70594: LD_VAR 0 3
70598: PUSH
70599: FOR_IN
70600: IFFALSE 70674
// begin if IsDead ( un ) then
70602: LD_VAR 0 2
70606: PPUSH
70607: CALL_OW 301
70611: IFFALSE 70631
// begin tmp := tmp diff un ;
70613: LD_ADDR_VAR 0 3
70617: PUSH
70618: LD_VAR 0 3
70622: PUSH
70623: LD_VAR 0 2
70627: DIFF
70628: ST_TO_ADDR
// continue ;
70629: GO 70599
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70631: LD_VAR 0 2
70635: PPUSH
70636: LD_INT 3
70638: PUSH
70639: LD_INT 22
70641: PUSH
70642: LD_INT 0
70644: PUSH
70645: EMPTY
70646: LIST
70647: LIST
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PPUSH
70653: CALL_OW 69
70657: PPUSH
70658: LD_VAR 0 2
70662: PPUSH
70663: CALL_OW 74
70667: PPUSH
70668: CALL_OW 115
// end ;
70672: GO 70599
70674: POP
70675: POP
// until not tmp ;
70676: LD_VAR 0 3
70680: NOT
70681: IFFALSE 70582
// end ;
70683: PPOPN 3
70685: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70686: LD_EXP 46
70690: PUSH
70691: LD_EXP 71
70695: AND
70696: IFFALSE 70750
70698: GO 70700
70700: DISABLE
// begin ToLua ( displayTroll(); ) ;
70701: LD_STRING displayTroll();
70703: PPUSH
70704: CALL_OW 559
// wait ( 3 3$00 ) ;
70708: LD_INT 6300
70710: PPUSH
70711: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70715: LD_STRING hideTroll();
70717: PPUSH
70718: CALL_OW 559
// wait ( 1 1$00 ) ;
70722: LD_INT 2100
70724: PPUSH
70725: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70729: LD_STRING displayTroll();
70731: PPUSH
70732: CALL_OW 559
// wait ( 1 1$00 ) ;
70736: LD_INT 2100
70738: PPUSH
70739: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70743: LD_STRING hideTroll();
70745: PPUSH
70746: CALL_OW 559
// end ;
70750: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70751: LD_EXP 46
70755: PUSH
70756: LD_EXP 72
70760: AND
70761: IFFALSE 70824
70763: GO 70765
70765: DISABLE
70766: LD_INT 0
70768: PPUSH
// begin p := 0 ;
70769: LD_ADDR_VAR 0 1
70773: PUSH
70774: LD_INT 0
70776: ST_TO_ADDR
// repeat game_speed := 1 ;
70777: LD_ADDR_OWVAR 65
70781: PUSH
70782: LD_INT 1
70784: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70785: LD_INT 35
70787: PPUSH
70788: CALL_OW 67
// p := p + 1 ;
70792: LD_ADDR_VAR 0 1
70796: PUSH
70797: LD_VAR 0 1
70801: PUSH
70802: LD_INT 1
70804: PLUS
70805: ST_TO_ADDR
// until p >= 60 ;
70806: LD_VAR 0 1
70810: PUSH
70811: LD_INT 60
70813: GREATEREQUAL
70814: IFFALSE 70777
// game_speed := 4 ;
70816: LD_ADDR_OWVAR 65
70820: PUSH
70821: LD_INT 4
70823: ST_TO_ADDR
// end ;
70824: PPOPN 1
70826: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70827: LD_EXP 46
70831: PUSH
70832: LD_EXP 73
70836: AND
70837: IFFALSE 70983
70839: GO 70841
70841: DISABLE
70842: LD_INT 0
70844: PPUSH
70845: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70846: LD_ADDR_VAR 0 1
70850: PUSH
70851: LD_INT 22
70853: PUSH
70854: LD_OWVAR 2
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 2
70865: PUSH
70866: LD_INT 30
70868: PUSH
70869: LD_INT 0
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 30
70878: PUSH
70879: LD_INT 1
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: LIST
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PPUSH
70895: CALL_OW 69
70899: ST_TO_ADDR
// if not depot then
70900: LD_VAR 0 1
70904: NOT
70905: IFFALSE 70909
// exit ;
70907: GO 70983
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70909: LD_ADDR_VAR 0 2
70913: PUSH
70914: LD_VAR 0 1
70918: PUSH
70919: LD_INT 1
70921: PPUSH
70922: LD_VAR 0 1
70926: PPUSH
70927: CALL_OW 12
70931: ARRAY
70932: PPUSH
70933: CALL_OW 274
70937: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
70938: LD_VAR 0 2
70942: PPUSH
70943: LD_INT 1
70945: PPUSH
70946: LD_INT 0
70948: PPUSH
70949: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
70953: LD_VAR 0 2
70957: PPUSH
70958: LD_INT 2
70960: PPUSH
70961: LD_INT 0
70963: PPUSH
70964: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
70968: LD_VAR 0 2
70972: PPUSH
70973: LD_INT 3
70975: PPUSH
70976: LD_INT 0
70978: PPUSH
70979: CALL_OW 277
// end ;
70983: PPOPN 2
70985: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70986: LD_EXP 46
70990: PUSH
70991: LD_EXP 74
70995: AND
70996: IFFALSE 71093
70998: GO 71000
71000: DISABLE
71001: LD_INT 0
71003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71004: LD_ADDR_VAR 0 1
71008: PUSH
71009: LD_INT 22
71011: PUSH
71012: LD_OWVAR 2
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 21
71023: PUSH
71024: LD_INT 1
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 3
71033: PUSH
71034: LD_INT 23
71036: PUSH
71037: LD_INT 0
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: LIST
71052: PPUSH
71053: CALL_OW 69
71057: ST_TO_ADDR
// if not tmp then
71058: LD_VAR 0 1
71062: NOT
71063: IFFALSE 71067
// exit ;
71065: GO 71093
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71067: LD_VAR 0 1
71071: PUSH
71072: LD_INT 1
71074: PPUSH
71075: LD_VAR 0 1
71079: PPUSH
71080: CALL_OW 12
71084: ARRAY
71085: PPUSH
71086: LD_INT 200
71088: PPUSH
71089: CALL_OW 234
// end ;
71093: PPOPN 1
71095: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71096: LD_EXP 46
71100: PUSH
71101: LD_EXP 75
71105: AND
71106: IFFALSE 71185
71108: GO 71110
71110: DISABLE
71111: LD_INT 0
71113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71114: LD_ADDR_VAR 0 1
71118: PUSH
71119: LD_INT 22
71121: PUSH
71122: LD_OWVAR 2
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 21
71133: PUSH
71134: LD_INT 2
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PPUSH
71145: CALL_OW 69
71149: ST_TO_ADDR
// if not tmp then
71150: LD_VAR 0 1
71154: NOT
71155: IFFALSE 71159
// exit ;
71157: GO 71185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71159: LD_VAR 0 1
71163: PUSH
71164: LD_INT 1
71166: PPUSH
71167: LD_VAR 0 1
71171: PPUSH
71172: CALL_OW 12
71176: ARRAY
71177: PPUSH
71178: LD_INT 60
71180: PPUSH
71181: CALL_OW 234
// end ;
71185: PPOPN 1
71187: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71188: LD_EXP 46
71192: PUSH
71193: LD_EXP 76
71197: AND
71198: IFFALSE 71297
71200: GO 71202
71202: DISABLE
71203: LD_INT 0
71205: PPUSH
71206: PPUSH
// begin enable ;
71207: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71208: LD_ADDR_VAR 0 1
71212: PUSH
71213: LD_INT 22
71215: PUSH
71216: LD_OWVAR 2
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 61
71227: PUSH
71228: EMPTY
71229: LIST
71230: PUSH
71231: LD_INT 33
71233: PUSH
71234: LD_INT 2
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: LIST
71245: PPUSH
71246: CALL_OW 69
71250: ST_TO_ADDR
// if not tmp then
71251: LD_VAR 0 1
71255: NOT
71256: IFFALSE 71260
// exit ;
71258: GO 71297
// for i in tmp do
71260: LD_ADDR_VAR 0 2
71264: PUSH
71265: LD_VAR 0 1
71269: PUSH
71270: FOR_IN
71271: IFFALSE 71295
// if IsControledBy ( i ) then
71273: LD_VAR 0 2
71277: PPUSH
71278: CALL_OW 312
71282: IFFALSE 71293
// ComUnlink ( i ) ;
71284: LD_VAR 0 2
71288: PPUSH
71289: CALL_OW 136
71293: GO 71270
71295: POP
71296: POP
// end ;
71297: PPOPN 2
71299: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71300: LD_EXP 46
71304: PUSH
71305: LD_EXP 77
71309: AND
71310: IFFALSE 71450
71312: GO 71314
71314: DISABLE
71315: LD_INT 0
71317: PPUSH
71318: PPUSH
// begin ToLua ( displayPowell(); ) ;
71319: LD_STRING displayPowell();
71321: PPUSH
71322: CALL_OW 559
// uc_side := 0 ;
71326: LD_ADDR_OWVAR 20
71330: PUSH
71331: LD_INT 0
71333: ST_TO_ADDR
// uc_nation := 2 ;
71334: LD_ADDR_OWVAR 21
71338: PUSH
71339: LD_INT 2
71341: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71342: LD_ADDR_OWVAR 37
71346: PUSH
71347: LD_INT 14
71349: ST_TO_ADDR
// vc_engine := engine_siberite ;
71350: LD_ADDR_OWVAR 39
71354: PUSH
71355: LD_INT 3
71357: ST_TO_ADDR
// vc_control := control_apeman ;
71358: LD_ADDR_OWVAR 38
71362: PUSH
71363: LD_INT 5
71365: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71366: LD_ADDR_OWVAR 40
71370: PUSH
71371: LD_INT 29
71373: ST_TO_ADDR
// un := CreateVehicle ;
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: CALL_OW 45
71383: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71384: LD_VAR 0 2
71388: PPUSH
71389: LD_INT 1
71391: PPUSH
71392: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71396: LD_INT 35
71398: PPUSH
71399: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71403: LD_VAR 0 2
71407: PPUSH
71408: LD_INT 22
71410: PUSH
71411: LD_OWVAR 2
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PPUSH
71420: CALL_OW 69
71424: PPUSH
71425: LD_VAR 0 2
71429: PPUSH
71430: CALL_OW 74
71434: PPUSH
71435: CALL_OW 115
// until IsDead ( un ) ;
71439: LD_VAR 0 2
71443: PPUSH
71444: CALL_OW 301
71448: IFFALSE 71396
// end ;
71450: PPOPN 2
71452: END
// every 0 0$1 trigger StreamModeActive and sStu do
71453: LD_EXP 46
71457: PUSH
71458: LD_EXP 85
71462: AND
71463: IFFALSE 71479
71465: GO 71467
71467: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71468: LD_STRING displayStucuk();
71470: PPUSH
71471: CALL_OW 559
// ResetFog ;
71475: CALL_OW 335
// end ;
71479: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71480: LD_EXP 46
71484: PUSH
71485: LD_EXP 78
71489: AND
71490: IFFALSE 71631
71492: GO 71494
71494: DISABLE
71495: LD_INT 0
71497: PPUSH
71498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71499: LD_ADDR_VAR 0 2
71503: PUSH
71504: LD_INT 22
71506: PUSH
71507: LD_OWVAR 2
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 21
71518: PUSH
71519: LD_INT 1
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PPUSH
71530: CALL_OW 69
71534: ST_TO_ADDR
// if not tmp then
71535: LD_VAR 0 2
71539: NOT
71540: IFFALSE 71544
// exit ;
71542: GO 71631
// un := tmp [ rand ( 1 , tmp ) ] ;
71544: LD_ADDR_VAR 0 1
71548: PUSH
71549: LD_VAR 0 2
71553: PUSH
71554: LD_INT 1
71556: PPUSH
71557: LD_VAR 0 2
71561: PPUSH
71562: CALL_OW 12
71566: ARRAY
71567: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71568: LD_VAR 0 1
71572: PPUSH
71573: LD_INT 0
71575: PPUSH
71576: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71580: LD_VAR 0 1
71584: PPUSH
71585: LD_OWVAR 3
71589: PUSH
71590: LD_VAR 0 1
71594: DIFF
71595: PPUSH
71596: LD_VAR 0 1
71600: PPUSH
71601: CALL_OW 74
71605: PPUSH
71606: CALL_OW 115
// wait ( 0 0$20 ) ;
71610: LD_INT 700
71612: PPUSH
71613: CALL_OW 67
// SetSide ( un , your_side ) ;
71617: LD_VAR 0 1
71621: PPUSH
71622: LD_OWVAR 2
71626: PPUSH
71627: CALL_OW 235
// end ;
71631: PPOPN 2
71633: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71634: LD_EXP 46
71638: PUSH
71639: LD_EXP 79
71643: AND
71644: IFFALSE 71750
71646: GO 71648
71648: DISABLE
71649: LD_INT 0
71651: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71652: LD_ADDR_VAR 0 1
71656: PUSH
71657: LD_INT 22
71659: PUSH
71660: LD_OWVAR 2
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 2
71671: PUSH
71672: LD_INT 30
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 30
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: LIST
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PPUSH
71701: CALL_OW 69
71705: ST_TO_ADDR
// if not depot then
71706: LD_VAR 0 1
71710: NOT
71711: IFFALSE 71715
// exit ;
71713: GO 71750
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71715: LD_VAR 0 1
71719: PUSH
71720: LD_INT 1
71722: ARRAY
71723: PPUSH
71724: CALL_OW 250
71728: PPUSH
71729: LD_VAR 0 1
71733: PUSH
71734: LD_INT 1
71736: ARRAY
71737: PPUSH
71738: CALL_OW 251
71742: PPUSH
71743: LD_INT 70
71745: PPUSH
71746: CALL_OW 495
// end ;
71750: PPOPN 1
71752: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71753: LD_EXP 46
71757: PUSH
71758: LD_EXP 80
71762: AND
71763: IFFALSE 71974
71765: GO 71767
71767: DISABLE
71768: LD_INT 0
71770: PPUSH
71771: PPUSH
71772: PPUSH
71773: PPUSH
71774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71775: LD_ADDR_VAR 0 5
71779: PUSH
71780: LD_INT 22
71782: PUSH
71783: LD_OWVAR 2
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 21
71794: PUSH
71795: LD_INT 1
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PPUSH
71806: CALL_OW 69
71810: ST_TO_ADDR
// if not tmp then
71811: LD_VAR 0 5
71815: NOT
71816: IFFALSE 71820
// exit ;
71818: GO 71974
// for i in tmp do
71820: LD_ADDR_VAR 0 1
71824: PUSH
71825: LD_VAR 0 5
71829: PUSH
71830: FOR_IN
71831: IFFALSE 71972
// begin d := rand ( 0 , 5 ) ;
71833: LD_ADDR_VAR 0 4
71837: PUSH
71838: LD_INT 0
71840: PPUSH
71841: LD_INT 5
71843: PPUSH
71844: CALL_OW 12
71848: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71849: LD_ADDR_VAR 0 2
71853: PUSH
71854: LD_VAR 0 1
71858: PPUSH
71859: CALL_OW 250
71863: PPUSH
71864: LD_VAR 0 4
71868: PPUSH
71869: LD_INT 3
71871: PPUSH
71872: LD_INT 12
71874: PPUSH
71875: CALL_OW 12
71879: PPUSH
71880: CALL_OW 272
71884: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71885: LD_ADDR_VAR 0 3
71889: PUSH
71890: LD_VAR 0 1
71894: PPUSH
71895: CALL_OW 251
71899: PPUSH
71900: LD_VAR 0 4
71904: PPUSH
71905: LD_INT 3
71907: PPUSH
71908: LD_INT 12
71910: PPUSH
71911: CALL_OW 12
71915: PPUSH
71916: CALL_OW 273
71920: ST_TO_ADDR
// if ValidHex ( x , y ) then
71921: LD_VAR 0 2
71925: PPUSH
71926: LD_VAR 0 3
71930: PPUSH
71931: CALL_OW 488
71935: IFFALSE 71970
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
71937: LD_VAR 0 1
71941: PPUSH
71942: LD_VAR 0 2
71946: PPUSH
71947: LD_VAR 0 3
71951: PPUSH
71952: LD_INT 3
71954: PPUSH
71955: LD_INT 6
71957: PPUSH
71958: CALL_OW 12
71962: PPUSH
71963: LD_INT 1
71965: PPUSH
71966: CALL_OW 483
// end ;
71970: GO 71830
71972: POP
71973: POP
// end ;
71974: PPOPN 5
71976: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71977: LD_EXP 46
71981: PUSH
71982: LD_EXP 81
71986: AND
71987: IFFALSE 72081
71989: GO 71991
71991: DISABLE
71992: LD_INT 0
71994: PPUSH
71995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71996: LD_ADDR_VAR 0 2
72000: PUSH
72001: LD_INT 22
72003: PUSH
72004: LD_OWVAR 2
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 32
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 21
72025: PUSH
72026: LD_INT 2
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: LIST
72037: PPUSH
72038: CALL_OW 69
72042: ST_TO_ADDR
// if not tmp then
72043: LD_VAR 0 2
72047: NOT
72048: IFFALSE 72052
// exit ;
72050: GO 72081
// for i in tmp do
72052: LD_ADDR_VAR 0 1
72056: PUSH
72057: LD_VAR 0 2
72061: PUSH
72062: FOR_IN
72063: IFFALSE 72079
// SetFuel ( i , 0 ) ;
72065: LD_VAR 0 1
72069: PPUSH
72070: LD_INT 0
72072: PPUSH
72073: CALL_OW 240
72077: GO 72062
72079: POP
72080: POP
// end ;
72081: PPOPN 2
72083: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72084: LD_EXP 46
72088: PUSH
72089: LD_EXP 82
72093: AND
72094: IFFALSE 72160
72096: GO 72098
72098: DISABLE
72099: LD_INT 0
72101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72102: LD_ADDR_VAR 0 1
72106: PUSH
72107: LD_INT 22
72109: PUSH
72110: LD_OWVAR 2
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 30
72121: PUSH
72122: LD_INT 29
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PPUSH
72133: CALL_OW 69
72137: ST_TO_ADDR
// if not tmp then
72138: LD_VAR 0 1
72142: NOT
72143: IFFALSE 72147
// exit ;
72145: GO 72160
// DestroyUnit ( tmp [ 1 ] ) ;
72147: LD_VAR 0 1
72151: PUSH
72152: LD_INT 1
72154: ARRAY
72155: PPUSH
72156: CALL_OW 65
// end ;
72160: PPOPN 1
72162: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72163: LD_EXP 46
72167: PUSH
72168: LD_EXP 84
72172: AND
72173: IFFALSE 72302
72175: GO 72177
72177: DISABLE
72178: LD_INT 0
72180: PPUSH
// begin uc_side := 0 ;
72181: LD_ADDR_OWVAR 20
72185: PUSH
72186: LD_INT 0
72188: ST_TO_ADDR
// uc_nation := nation_arabian ;
72189: LD_ADDR_OWVAR 21
72193: PUSH
72194: LD_INT 2
72196: ST_TO_ADDR
// hc_gallery :=  ;
72197: LD_ADDR_OWVAR 33
72201: PUSH
72202: LD_STRING 
72204: ST_TO_ADDR
// hc_name :=  ;
72205: LD_ADDR_OWVAR 26
72209: PUSH
72210: LD_STRING 
72212: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72213: LD_INT 1
72215: PPUSH
72216: LD_INT 11
72218: PPUSH
72219: LD_INT 10
72221: PPUSH
72222: CALL_OW 380
// un := CreateHuman ;
72226: LD_ADDR_VAR 0 1
72230: PUSH
72231: CALL_OW 44
72235: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72236: LD_VAR 0 1
72240: PPUSH
72241: LD_INT 1
72243: PPUSH
72244: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72248: LD_INT 35
72250: PPUSH
72251: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72255: LD_VAR 0 1
72259: PPUSH
72260: LD_INT 22
72262: PUSH
72263: LD_OWVAR 2
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PPUSH
72272: CALL_OW 69
72276: PPUSH
72277: LD_VAR 0 1
72281: PPUSH
72282: CALL_OW 74
72286: PPUSH
72287: CALL_OW 115
// until IsDead ( un ) ;
72291: LD_VAR 0 1
72295: PPUSH
72296: CALL_OW 301
72300: IFFALSE 72248
// end ;
72302: PPOPN 1
72304: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72305: LD_EXP 46
72309: PUSH
72310: LD_EXP 86
72314: AND
72315: IFFALSE 72327
72317: GO 72319
72319: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72320: LD_STRING earthquake(getX(game), 0, 32)
72322: PPUSH
72323: CALL_OW 559
72327: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72328: LD_EXP 46
72332: PUSH
72333: LD_EXP 87
72337: AND
72338: IFFALSE 72429
72340: GO 72342
72342: DISABLE
72343: LD_INT 0
72345: PPUSH
// begin enable ;
72346: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72347: LD_ADDR_VAR 0 1
72351: PUSH
72352: LD_INT 22
72354: PUSH
72355: LD_OWVAR 2
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: PUSH
72364: LD_INT 21
72366: PUSH
72367: LD_INT 2
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 33
72376: PUSH
72377: LD_INT 3
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: LIST
72388: PPUSH
72389: CALL_OW 69
72393: ST_TO_ADDR
// if not tmp then
72394: LD_VAR 0 1
72398: NOT
72399: IFFALSE 72403
// exit ;
72401: GO 72429
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72403: LD_VAR 0 1
72407: PUSH
72408: LD_INT 1
72410: PPUSH
72411: LD_VAR 0 1
72415: PPUSH
72416: CALL_OW 12
72420: ARRAY
72421: PPUSH
72422: LD_INT 1
72424: PPUSH
72425: CALL_OW 234
// end ;
72429: PPOPN 1
72431: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72432: LD_EXP 46
72436: PUSH
72437: LD_EXP 88
72441: AND
72442: IFFALSE 72583
72444: GO 72446
72446: DISABLE
72447: LD_INT 0
72449: PPUSH
72450: PPUSH
72451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72452: LD_ADDR_VAR 0 3
72456: PUSH
72457: LD_INT 22
72459: PUSH
72460: LD_OWVAR 2
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 25
72471: PUSH
72472: LD_INT 1
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PPUSH
72483: CALL_OW 69
72487: ST_TO_ADDR
// if not tmp then
72488: LD_VAR 0 3
72492: NOT
72493: IFFALSE 72497
// exit ;
72495: GO 72583
// un := tmp [ rand ( 1 , tmp ) ] ;
72497: LD_ADDR_VAR 0 2
72501: PUSH
72502: LD_VAR 0 3
72506: PUSH
72507: LD_INT 1
72509: PPUSH
72510: LD_VAR 0 3
72514: PPUSH
72515: CALL_OW 12
72519: ARRAY
72520: ST_TO_ADDR
// if Crawls ( un ) then
72521: LD_VAR 0 2
72525: PPUSH
72526: CALL_OW 318
72530: IFFALSE 72541
// ComWalk ( un ) ;
72532: LD_VAR 0 2
72536: PPUSH
72537: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72541: LD_VAR 0 2
72545: PPUSH
72546: LD_INT 9
72548: PPUSH
72549: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72553: LD_INT 28
72555: PPUSH
72556: LD_OWVAR 2
72560: PPUSH
72561: LD_INT 2
72563: PPUSH
72564: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72568: LD_INT 29
72570: PPUSH
72571: LD_OWVAR 2
72575: PPUSH
72576: LD_INT 2
72578: PPUSH
72579: CALL_OW 322
// end ;
72583: PPOPN 3
72585: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72586: LD_EXP 46
72590: PUSH
72591: LD_EXP 89
72595: AND
72596: IFFALSE 72707
72598: GO 72600
72600: DISABLE
72601: LD_INT 0
72603: PPUSH
72604: PPUSH
72605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72606: LD_ADDR_VAR 0 3
72610: PUSH
72611: LD_INT 22
72613: PUSH
72614: LD_OWVAR 2
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 25
72625: PUSH
72626: LD_INT 1
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PPUSH
72637: CALL_OW 69
72641: ST_TO_ADDR
// if not tmp then
72642: LD_VAR 0 3
72646: NOT
72647: IFFALSE 72651
// exit ;
72649: GO 72707
// un := tmp [ rand ( 1 , tmp ) ] ;
72651: LD_ADDR_VAR 0 2
72655: PUSH
72656: LD_VAR 0 3
72660: PUSH
72661: LD_INT 1
72663: PPUSH
72664: LD_VAR 0 3
72668: PPUSH
72669: CALL_OW 12
72673: ARRAY
72674: ST_TO_ADDR
// if Crawls ( un ) then
72675: LD_VAR 0 2
72679: PPUSH
72680: CALL_OW 318
72684: IFFALSE 72695
// ComWalk ( un ) ;
72686: LD_VAR 0 2
72690: PPUSH
72691: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72695: LD_VAR 0 2
72699: PPUSH
72700: LD_INT 8
72702: PPUSH
72703: CALL_OW 336
// end ;
72707: PPOPN 3
72709: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72710: LD_EXP 46
72714: PUSH
72715: LD_EXP 90
72719: AND
72720: IFFALSE 72864
72722: GO 72724
72724: DISABLE
72725: LD_INT 0
72727: PPUSH
72728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72729: LD_ADDR_VAR 0 2
72733: PUSH
72734: LD_INT 22
72736: PUSH
72737: LD_OWVAR 2
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: LD_INT 21
72748: PUSH
72749: LD_INT 2
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 2
72758: PUSH
72759: LD_INT 34
72761: PUSH
72762: LD_INT 12
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 34
72771: PUSH
72772: LD_INT 51
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 34
72781: PUSH
72782: LD_INT 32
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: LIST
72799: PPUSH
72800: CALL_OW 69
72804: ST_TO_ADDR
// if not tmp then
72805: LD_VAR 0 2
72809: NOT
72810: IFFALSE 72814
// exit ;
72812: GO 72864
// for i in tmp do
72814: LD_ADDR_VAR 0 1
72818: PUSH
72819: LD_VAR 0 2
72823: PUSH
72824: FOR_IN
72825: IFFALSE 72862
// if GetCargo ( i , mat_artifact ) = 0 then
72827: LD_VAR 0 1
72831: PPUSH
72832: LD_INT 4
72834: PPUSH
72835: CALL_OW 289
72839: PUSH
72840: LD_INT 0
72842: EQUAL
72843: IFFALSE 72860
// SetCargo ( i , mat_siberit , 100 ) ;
72845: LD_VAR 0 1
72849: PPUSH
72850: LD_INT 3
72852: PPUSH
72853: LD_INT 100
72855: PPUSH
72856: CALL_OW 290
72860: GO 72824
72862: POP
72863: POP
// end ;
72864: PPOPN 2
72866: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72867: LD_EXP 46
72871: PUSH
72872: LD_EXP 91
72876: AND
72877: IFFALSE 73060
72879: GO 72881
72881: DISABLE
72882: LD_INT 0
72884: PPUSH
72885: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72886: LD_ADDR_VAR 0 2
72890: PUSH
72891: LD_INT 22
72893: PUSH
72894: LD_OWVAR 2
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PPUSH
72903: CALL_OW 69
72907: ST_TO_ADDR
// if not tmp then
72908: LD_VAR 0 2
72912: NOT
72913: IFFALSE 72917
// exit ;
72915: GO 73060
// for i := 1 to 2 do
72917: LD_ADDR_VAR 0 1
72921: PUSH
72922: DOUBLE
72923: LD_INT 1
72925: DEC
72926: ST_TO_ADDR
72927: LD_INT 2
72929: PUSH
72930: FOR_TO
72931: IFFALSE 73058
// begin uc_side := your_side ;
72933: LD_ADDR_OWVAR 20
72937: PUSH
72938: LD_OWVAR 2
72942: ST_TO_ADDR
// uc_nation := nation_american ;
72943: LD_ADDR_OWVAR 21
72947: PUSH
72948: LD_INT 1
72950: ST_TO_ADDR
// vc_chassis := us_morphling ;
72951: LD_ADDR_OWVAR 37
72955: PUSH
72956: LD_INT 5
72958: ST_TO_ADDR
// vc_engine := engine_siberite ;
72959: LD_ADDR_OWVAR 39
72963: PUSH
72964: LD_INT 3
72966: ST_TO_ADDR
// vc_control := control_computer ;
72967: LD_ADDR_OWVAR 38
72971: PUSH
72972: LD_INT 3
72974: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72975: LD_ADDR_OWVAR 40
72979: PUSH
72980: LD_INT 10
72982: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72983: LD_VAR 0 2
72987: PUSH
72988: LD_INT 1
72990: ARRAY
72991: PPUSH
72992: CALL_OW 310
72996: NOT
72997: IFFALSE 73044
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72999: CALL_OW 45
73003: PPUSH
73004: LD_VAR 0 2
73008: PUSH
73009: LD_INT 1
73011: ARRAY
73012: PPUSH
73013: CALL_OW 250
73017: PPUSH
73018: LD_VAR 0 2
73022: PUSH
73023: LD_INT 1
73025: ARRAY
73026: PPUSH
73027: CALL_OW 251
73031: PPUSH
73032: LD_INT 12
73034: PPUSH
73035: LD_INT 1
73037: PPUSH
73038: CALL_OW 50
73042: GO 73056
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73044: CALL_OW 45
73048: PPUSH
73049: LD_INT 1
73051: PPUSH
73052: CALL_OW 51
// end ;
73056: GO 72930
73058: POP
73059: POP
// end ;
73060: PPOPN 2
73062: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73063: LD_EXP 46
73067: PUSH
73068: LD_EXP 92
73072: AND
73073: IFFALSE 73295
73075: GO 73077
73077: DISABLE
73078: LD_INT 0
73080: PPUSH
73081: PPUSH
73082: PPUSH
73083: PPUSH
73084: PPUSH
73085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73086: LD_ADDR_VAR 0 6
73090: PUSH
73091: LD_INT 22
73093: PUSH
73094: LD_OWVAR 2
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 21
73105: PUSH
73106: LD_INT 1
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 3
73115: PUSH
73116: LD_INT 23
73118: PUSH
73119: LD_INT 0
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: LIST
73134: PPUSH
73135: CALL_OW 69
73139: ST_TO_ADDR
// if not tmp then
73140: LD_VAR 0 6
73144: NOT
73145: IFFALSE 73149
// exit ;
73147: GO 73295
// s1 := rand ( 1 , 4 ) ;
73149: LD_ADDR_VAR 0 2
73153: PUSH
73154: LD_INT 1
73156: PPUSH
73157: LD_INT 4
73159: PPUSH
73160: CALL_OW 12
73164: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73165: LD_ADDR_VAR 0 4
73169: PUSH
73170: LD_VAR 0 6
73174: PUSH
73175: LD_INT 1
73177: ARRAY
73178: PPUSH
73179: LD_VAR 0 2
73183: PPUSH
73184: CALL_OW 259
73188: ST_TO_ADDR
// if s1 = 1 then
73189: LD_VAR 0 2
73193: PUSH
73194: LD_INT 1
73196: EQUAL
73197: IFFALSE 73217
// s2 := rand ( 2 , 4 ) else
73199: LD_ADDR_VAR 0 3
73203: PUSH
73204: LD_INT 2
73206: PPUSH
73207: LD_INT 4
73209: PPUSH
73210: CALL_OW 12
73214: ST_TO_ADDR
73215: GO 73225
// s2 := 1 ;
73217: LD_ADDR_VAR 0 3
73221: PUSH
73222: LD_INT 1
73224: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73225: LD_ADDR_VAR 0 5
73229: PUSH
73230: LD_VAR 0 6
73234: PUSH
73235: LD_INT 1
73237: ARRAY
73238: PPUSH
73239: LD_VAR 0 3
73243: PPUSH
73244: CALL_OW 259
73248: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73249: LD_VAR 0 6
73253: PUSH
73254: LD_INT 1
73256: ARRAY
73257: PPUSH
73258: LD_VAR 0 2
73262: PPUSH
73263: LD_VAR 0 5
73267: PPUSH
73268: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73272: LD_VAR 0 6
73276: PUSH
73277: LD_INT 1
73279: ARRAY
73280: PPUSH
73281: LD_VAR 0 3
73285: PPUSH
73286: LD_VAR 0 4
73290: PPUSH
73291: CALL_OW 237
// end ;
73295: PPOPN 6
73297: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73298: LD_EXP 46
73302: PUSH
73303: LD_EXP 93
73307: AND
73308: IFFALSE 73387
73310: GO 73312
73312: DISABLE
73313: LD_INT 0
73315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73316: LD_ADDR_VAR 0 1
73320: PUSH
73321: LD_INT 22
73323: PUSH
73324: LD_OWVAR 2
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: LD_INT 30
73335: PUSH
73336: LD_INT 3
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PPUSH
73347: CALL_OW 69
73351: ST_TO_ADDR
// if not tmp then
73352: LD_VAR 0 1
73356: NOT
73357: IFFALSE 73361
// exit ;
73359: GO 73387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73361: LD_VAR 0 1
73365: PUSH
73366: LD_INT 1
73368: PPUSH
73369: LD_VAR 0 1
73373: PPUSH
73374: CALL_OW 12
73378: ARRAY
73379: PPUSH
73380: LD_INT 1
73382: PPUSH
73383: CALL_OW 234
// end ;
73387: PPOPN 1
73389: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73390: LD_EXP 46
73394: PUSH
73395: LD_EXP 94
73399: AND
73400: IFFALSE 73512
73402: GO 73404
73404: DISABLE
73405: LD_INT 0
73407: PPUSH
73408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73409: LD_ADDR_VAR 0 2
73413: PUSH
73414: LD_INT 22
73416: PUSH
73417: LD_OWVAR 2
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 2
73428: PUSH
73429: LD_INT 30
73431: PUSH
73432: LD_INT 27
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: LD_INT 30
73441: PUSH
73442: LD_INT 26
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 30
73451: PUSH
73452: LD_INT 28
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PPUSH
73469: CALL_OW 69
73473: ST_TO_ADDR
// if not tmp then
73474: LD_VAR 0 2
73478: NOT
73479: IFFALSE 73483
// exit ;
73481: GO 73512
// for i in tmp do
73483: LD_ADDR_VAR 0 1
73487: PUSH
73488: LD_VAR 0 2
73492: PUSH
73493: FOR_IN
73494: IFFALSE 73510
// SetLives ( i , 1 ) ;
73496: LD_VAR 0 1
73500: PPUSH
73501: LD_INT 1
73503: PPUSH
73504: CALL_OW 234
73508: GO 73493
73510: POP
73511: POP
// end ;
73512: PPOPN 2
73514: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73515: LD_EXP 46
73519: PUSH
73520: LD_EXP 95
73524: AND
73525: IFFALSE 73812
73527: GO 73529
73529: DISABLE
73530: LD_INT 0
73532: PPUSH
73533: PPUSH
73534: PPUSH
// begin i := rand ( 1 , 7 ) ;
73535: LD_ADDR_VAR 0 1
73539: PUSH
73540: LD_INT 1
73542: PPUSH
73543: LD_INT 7
73545: PPUSH
73546: CALL_OW 12
73550: ST_TO_ADDR
// case i of 1 :
73551: LD_VAR 0 1
73555: PUSH
73556: LD_INT 1
73558: DOUBLE
73559: EQUAL
73560: IFTRUE 73564
73562: GO 73574
73564: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73565: LD_STRING earthquake(getX(game), 0, 32)
73567: PPUSH
73568: CALL_OW 559
73572: GO 73812
73574: LD_INT 2
73576: DOUBLE
73577: EQUAL
73578: IFTRUE 73582
73580: GO 73596
73582: POP
// begin ToLua ( displayStucuk(); ) ;
73583: LD_STRING displayStucuk();
73585: PPUSH
73586: CALL_OW 559
// ResetFog ;
73590: CALL_OW 335
// end ; 3 :
73594: GO 73812
73596: LD_INT 3
73598: DOUBLE
73599: EQUAL
73600: IFTRUE 73604
73602: GO 73708
73604: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73605: LD_ADDR_VAR 0 2
73609: PUSH
73610: LD_INT 22
73612: PUSH
73613: LD_OWVAR 2
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 25
73624: PUSH
73625: LD_INT 1
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PPUSH
73636: CALL_OW 69
73640: ST_TO_ADDR
// if not tmp then
73641: LD_VAR 0 2
73645: NOT
73646: IFFALSE 73650
// exit ;
73648: GO 73812
// un := tmp [ rand ( 1 , tmp ) ] ;
73650: LD_ADDR_VAR 0 3
73654: PUSH
73655: LD_VAR 0 2
73659: PUSH
73660: LD_INT 1
73662: PPUSH
73663: LD_VAR 0 2
73667: PPUSH
73668: CALL_OW 12
73672: ARRAY
73673: ST_TO_ADDR
// if Crawls ( un ) then
73674: LD_VAR 0 3
73678: PPUSH
73679: CALL_OW 318
73683: IFFALSE 73694
// ComWalk ( un ) ;
73685: LD_VAR 0 3
73689: PPUSH
73690: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73694: LD_VAR 0 3
73698: PPUSH
73699: LD_INT 8
73701: PPUSH
73702: CALL_OW 336
// end ; 4 :
73706: GO 73812
73708: LD_INT 4
73710: DOUBLE
73711: EQUAL
73712: IFTRUE 73716
73714: GO 73790
73716: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73717: LD_ADDR_VAR 0 2
73721: PUSH
73722: LD_INT 22
73724: PUSH
73725: LD_OWVAR 2
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 30
73736: PUSH
73737: LD_INT 29
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PPUSH
73748: CALL_OW 69
73752: ST_TO_ADDR
// if not tmp then
73753: LD_VAR 0 2
73757: NOT
73758: IFFALSE 73762
// exit ;
73760: GO 73812
// CenterNowOnUnits ( tmp [ 1 ] ) ;
73762: LD_VAR 0 2
73766: PUSH
73767: LD_INT 1
73769: ARRAY
73770: PPUSH
73771: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
73775: LD_VAR 0 2
73779: PUSH
73780: LD_INT 1
73782: ARRAY
73783: PPUSH
73784: CALL_OW 65
// end ; 5 .. 7 :
73788: GO 73812
73790: LD_INT 5
73792: DOUBLE
73793: GREATEREQUAL
73794: IFFALSE 73802
73796: LD_INT 7
73798: DOUBLE
73799: LESSEQUAL
73800: IFTRUE 73804
73802: GO 73811
73804: POP
// StreamSibBomb ; end ;
73805: CALL 70049 0 0
73809: GO 73812
73811: POP
// end ;
73812: PPOPN 3
73814: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73815: LD_EXP 46
73819: PUSH
73820: LD_EXP 96
73824: AND
73825: IFFALSE 73981
73827: GO 73829
73829: DISABLE
73830: LD_INT 0
73832: PPUSH
73833: PPUSH
73834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73835: LD_ADDR_VAR 0 2
73839: PUSH
73840: LD_INT 81
73842: PUSH
73843: LD_OWVAR 2
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 2
73854: PUSH
73855: LD_INT 21
73857: PUSH
73858: LD_INT 1
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 21
73867: PUSH
73868: LD_INT 2
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: LIST
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PPUSH
73884: CALL_OW 69
73888: ST_TO_ADDR
// if not tmp then
73889: LD_VAR 0 2
73893: NOT
73894: IFFALSE 73898
// exit ;
73896: GO 73981
// p := 0 ;
73898: LD_ADDR_VAR 0 3
73902: PUSH
73903: LD_INT 0
73905: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73906: LD_INT 35
73908: PPUSH
73909: CALL_OW 67
// p := p + 1 ;
73913: LD_ADDR_VAR 0 3
73917: PUSH
73918: LD_VAR 0 3
73922: PUSH
73923: LD_INT 1
73925: PLUS
73926: ST_TO_ADDR
// for i in tmp do
73927: LD_ADDR_VAR 0 1
73931: PUSH
73932: LD_VAR 0 2
73936: PUSH
73937: FOR_IN
73938: IFFALSE 73969
// if GetLives ( i ) < 1000 then
73940: LD_VAR 0 1
73944: PPUSH
73945: CALL_OW 256
73949: PUSH
73950: LD_INT 1000
73952: LESS
73953: IFFALSE 73967
// SetLives ( i , 1000 ) ;
73955: LD_VAR 0 1
73959: PPUSH
73960: LD_INT 1000
73962: PPUSH
73963: CALL_OW 234
73967: GO 73937
73969: POP
73970: POP
// until p > 20 ;
73971: LD_VAR 0 3
73975: PUSH
73976: LD_INT 20
73978: GREATER
73979: IFFALSE 73906
// end ;
73981: PPOPN 3
73983: END
// every 0 0$1 trigger StreamModeActive and sTime do
73984: LD_EXP 46
73988: PUSH
73989: LD_EXP 97
73993: AND
73994: IFFALSE 74029
73996: GO 73998
73998: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73999: LD_INT 28
74001: PPUSH
74002: LD_OWVAR 2
74006: PPUSH
74007: LD_INT 2
74009: PPUSH
74010: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74014: LD_INT 30
74016: PPUSH
74017: LD_OWVAR 2
74021: PPUSH
74022: LD_INT 2
74024: PPUSH
74025: CALL_OW 322
// end ;
74029: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74030: LD_EXP 46
74034: PUSH
74035: LD_EXP 98
74039: AND
74040: IFFALSE 74161
74042: GO 74044
74044: DISABLE
74045: LD_INT 0
74047: PPUSH
74048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74049: LD_ADDR_VAR 0 2
74053: PUSH
74054: LD_INT 22
74056: PUSH
74057: LD_OWVAR 2
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 21
74068: PUSH
74069: LD_INT 1
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 3
74078: PUSH
74079: LD_INT 23
74081: PUSH
74082: LD_INT 0
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: LIST
74097: PPUSH
74098: CALL_OW 69
74102: ST_TO_ADDR
// if not tmp then
74103: LD_VAR 0 2
74107: NOT
74108: IFFALSE 74112
// exit ;
74110: GO 74161
// for i in tmp do
74112: LD_ADDR_VAR 0 1
74116: PUSH
74117: LD_VAR 0 2
74121: PUSH
74122: FOR_IN
74123: IFFALSE 74159
// begin if Crawls ( i ) then
74125: LD_VAR 0 1
74129: PPUSH
74130: CALL_OW 318
74134: IFFALSE 74145
// ComWalk ( i ) ;
74136: LD_VAR 0 1
74140: PPUSH
74141: CALL_OW 138
// SetClass ( i , 2 ) ;
74145: LD_VAR 0 1
74149: PPUSH
74150: LD_INT 2
74152: PPUSH
74153: CALL_OW 336
// end ;
74157: GO 74122
74159: POP
74160: POP
// end ;
74161: PPOPN 2
74163: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74164: LD_EXP 46
74168: PUSH
74169: LD_EXP 99
74173: AND
74174: IFFALSE 74462
74176: GO 74178
74178: DISABLE
74179: LD_INT 0
74181: PPUSH
74182: PPUSH
74183: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74184: LD_OWVAR 2
74188: PPUSH
74189: LD_INT 9
74191: PPUSH
74192: LD_INT 1
74194: PPUSH
74195: LD_INT 1
74197: PPUSH
74198: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74202: LD_INT 9
74204: PPUSH
74205: LD_OWVAR 2
74209: PPUSH
74210: CALL_OW 343
// uc_side := 9 ;
74214: LD_ADDR_OWVAR 20
74218: PUSH
74219: LD_INT 9
74221: ST_TO_ADDR
// uc_nation := 2 ;
74222: LD_ADDR_OWVAR 21
74226: PUSH
74227: LD_INT 2
74229: ST_TO_ADDR
// hc_name := Dark Warrior ;
74230: LD_ADDR_OWVAR 26
74234: PUSH
74235: LD_STRING Dark Warrior
74237: ST_TO_ADDR
// hc_gallery :=  ;
74238: LD_ADDR_OWVAR 33
74242: PUSH
74243: LD_STRING 
74245: ST_TO_ADDR
// hc_noskilllimit := true ;
74246: LD_ADDR_OWVAR 76
74250: PUSH
74251: LD_INT 1
74253: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74254: LD_ADDR_OWVAR 31
74258: PUSH
74259: LD_INT 30
74261: PUSH
74262: LD_INT 30
74264: PUSH
74265: LD_INT 30
74267: PUSH
74268: LD_INT 30
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: ST_TO_ADDR
// un := CreateHuman ;
74277: LD_ADDR_VAR 0 3
74281: PUSH
74282: CALL_OW 44
74286: ST_TO_ADDR
// hc_noskilllimit := false ;
74287: LD_ADDR_OWVAR 76
74291: PUSH
74292: LD_INT 0
74294: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74295: LD_VAR 0 3
74299: PPUSH
74300: LD_INT 1
74302: PPUSH
74303: CALL_OW 51
// ToLua ( playRanger() ) ;
74307: LD_STRING playRanger()
74309: PPUSH
74310: CALL_OW 559
// p := 0 ;
74314: LD_ADDR_VAR 0 2
74318: PUSH
74319: LD_INT 0
74321: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74322: LD_INT 35
74324: PPUSH
74325: CALL_OW 67
// p := p + 1 ;
74329: LD_ADDR_VAR 0 2
74333: PUSH
74334: LD_VAR 0 2
74338: PUSH
74339: LD_INT 1
74341: PLUS
74342: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74343: LD_VAR 0 3
74347: PPUSH
74348: CALL_OW 256
74352: PUSH
74353: LD_INT 1000
74355: LESS
74356: IFFALSE 74370
// SetLives ( un , 1000 ) ;
74358: LD_VAR 0 3
74362: PPUSH
74363: LD_INT 1000
74365: PPUSH
74366: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74370: LD_VAR 0 3
74374: PPUSH
74375: LD_INT 81
74377: PUSH
74378: LD_OWVAR 2
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 91
74389: PUSH
74390: LD_VAR 0 3
74394: PUSH
74395: LD_INT 30
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: LIST
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PPUSH
74407: CALL_OW 69
74411: PPUSH
74412: LD_VAR 0 3
74416: PPUSH
74417: CALL_OW 74
74421: PPUSH
74422: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
74426: LD_VAR 0 2
74430: PUSH
74431: LD_INT 80
74433: GREATER
74434: PUSH
74435: LD_VAR 0 3
74439: PPUSH
74440: CALL_OW 301
74444: OR
74445: IFFALSE 74322
// if un then
74447: LD_VAR 0 3
74451: IFFALSE 74462
// RemoveUnit ( un ) ;
74453: LD_VAR 0 3
74457: PPUSH
74458: CALL_OW 64
// end ;
74462: PPOPN 3
74464: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
74465: LD_EXP 100
74469: IFFALSE 74585
74471: GO 74473
74473: DISABLE
74474: LD_INT 0
74476: PPUSH
74477: PPUSH
74478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74479: LD_ADDR_VAR 0 2
74483: PUSH
74484: LD_INT 81
74486: PUSH
74487: LD_OWVAR 2
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 21
74498: PUSH
74499: LD_INT 1
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PPUSH
74510: CALL_OW 69
74514: ST_TO_ADDR
// ToLua ( playComputer() ) ;
74515: LD_STRING playComputer()
74517: PPUSH
74518: CALL_OW 559
// if not tmp then
74522: LD_VAR 0 2
74526: NOT
74527: IFFALSE 74531
// exit ;
74529: GO 74585
// for i in tmp do
74531: LD_ADDR_VAR 0 1
74535: PUSH
74536: LD_VAR 0 2
74540: PUSH
74541: FOR_IN
74542: IFFALSE 74583
// for j := 1 to 4 do
74544: LD_ADDR_VAR 0 3
74548: PUSH
74549: DOUBLE
74550: LD_INT 1
74552: DEC
74553: ST_TO_ADDR
74554: LD_INT 4
74556: PUSH
74557: FOR_TO
74558: IFFALSE 74579
// SetSkill ( i , j , 10 ) ;
74560: LD_VAR 0 1
74564: PPUSH
74565: LD_VAR 0 3
74569: PPUSH
74570: LD_INT 10
74572: PPUSH
74573: CALL_OW 237
74577: GO 74557
74579: POP
74580: POP
74581: GO 74541
74583: POP
74584: POP
// end ;
74585: PPOPN 3
74587: END
// every 0 0$1 trigger s30 do var i , tmp ;
74588: LD_EXP 101
74592: IFFALSE 74661
74594: GO 74596
74596: DISABLE
74597: LD_INT 0
74599: PPUSH
74600: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74601: LD_ADDR_VAR 0 2
74605: PUSH
74606: LD_INT 22
74608: PUSH
74609: LD_OWVAR 2
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PPUSH
74618: CALL_OW 69
74622: ST_TO_ADDR
// if not tmp then
74623: LD_VAR 0 2
74627: NOT
74628: IFFALSE 74632
// exit ;
74630: GO 74661
// for i in tmp do
74632: LD_ADDR_VAR 0 1
74636: PUSH
74637: LD_VAR 0 2
74641: PUSH
74642: FOR_IN
74643: IFFALSE 74659
// SetLives ( i , 300 ) ;
74645: LD_VAR 0 1
74649: PPUSH
74650: LD_INT 300
74652: PPUSH
74653: CALL_OW 234
74657: GO 74642
74659: POP
74660: POP
// end ;
74661: PPOPN 2
74663: END
// every 0 0$1 trigger s60 do var i , tmp ;
74664: LD_EXP 102
74668: IFFALSE 74737
74670: GO 74672
74672: DISABLE
74673: LD_INT 0
74675: PPUSH
74676: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74677: LD_ADDR_VAR 0 2
74681: PUSH
74682: LD_INT 22
74684: PUSH
74685: LD_OWVAR 2
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PPUSH
74694: CALL_OW 69
74698: ST_TO_ADDR
// if not tmp then
74699: LD_VAR 0 2
74703: NOT
74704: IFFALSE 74708
// exit ;
74706: GO 74737
// for i in tmp do
74708: LD_ADDR_VAR 0 1
74712: PUSH
74713: LD_VAR 0 2
74717: PUSH
74718: FOR_IN
74719: IFFALSE 74735
// SetLives ( i , 600 ) ;
74721: LD_VAR 0 1
74725: PPUSH
74726: LD_INT 600
74728: PPUSH
74729: CALL_OW 234
74733: GO 74718
74735: POP
74736: POP
// end ;
74737: PPOPN 2
74739: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74740: LD_INT 0
74742: PPUSH
// case cmd of 301 :
74743: LD_VAR 0 1
74747: PUSH
74748: LD_INT 301
74750: DOUBLE
74751: EQUAL
74752: IFTRUE 74756
74754: GO 74788
74756: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74757: LD_VAR 0 6
74761: PPUSH
74762: LD_VAR 0 7
74766: PPUSH
74767: LD_VAR 0 8
74771: PPUSH
74772: LD_VAR 0 4
74776: PPUSH
74777: LD_VAR 0 5
74781: PPUSH
74782: CALL 75997 0 5
74786: GO 74909
74788: LD_INT 302
74790: DOUBLE
74791: EQUAL
74792: IFTRUE 74796
74794: GO 74833
74796: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74797: LD_VAR 0 6
74801: PPUSH
74802: LD_VAR 0 7
74806: PPUSH
74807: LD_VAR 0 8
74811: PPUSH
74812: LD_VAR 0 9
74816: PPUSH
74817: LD_VAR 0 4
74821: PPUSH
74822: LD_VAR 0 5
74826: PPUSH
74827: CALL 76088 0 6
74831: GO 74909
74833: LD_INT 303
74835: DOUBLE
74836: EQUAL
74837: IFTRUE 74841
74839: GO 74878
74841: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74842: LD_VAR 0 6
74846: PPUSH
74847: LD_VAR 0 7
74851: PPUSH
74852: LD_VAR 0 8
74856: PPUSH
74857: LD_VAR 0 9
74861: PPUSH
74862: LD_VAR 0 4
74866: PPUSH
74867: LD_VAR 0 5
74871: PPUSH
74872: CALL 74914 0 6
74876: GO 74909
74878: LD_INT 304
74880: DOUBLE
74881: EQUAL
74882: IFTRUE 74886
74884: GO 74908
74886: POP
// hHackTeleport ( unit , x , y ) ; end ;
74887: LD_VAR 0 2
74891: PPUSH
74892: LD_VAR 0 4
74896: PPUSH
74897: LD_VAR 0 5
74901: PPUSH
74902: CALL 76681 0 3
74906: GO 74909
74908: POP
// end ;
74909: LD_VAR 0 12
74913: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74914: LD_INT 0
74916: PPUSH
74917: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74918: LD_VAR 0 1
74922: PUSH
74923: LD_INT 1
74925: LESS
74926: PUSH
74927: LD_VAR 0 1
74931: PUSH
74932: LD_INT 3
74934: GREATER
74935: OR
74936: PUSH
74937: LD_VAR 0 5
74941: PPUSH
74942: LD_VAR 0 6
74946: PPUSH
74947: CALL_OW 428
74951: OR
74952: IFFALSE 74956
// exit ;
74954: GO 75684
// uc_side := your_side ;
74956: LD_ADDR_OWVAR 20
74960: PUSH
74961: LD_OWVAR 2
74965: ST_TO_ADDR
// uc_nation := nation ;
74966: LD_ADDR_OWVAR 21
74970: PUSH
74971: LD_VAR 0 1
74975: ST_TO_ADDR
// bc_level = 1 ;
74976: LD_ADDR_OWVAR 43
74980: PUSH
74981: LD_INT 1
74983: ST_TO_ADDR
// case btype of 1 :
74984: LD_VAR 0 2
74988: PUSH
74989: LD_INT 1
74991: DOUBLE
74992: EQUAL
74993: IFTRUE 74997
74995: GO 75008
74997: POP
// bc_type := b_depot ; 2 :
74998: LD_ADDR_OWVAR 42
75002: PUSH
75003: LD_INT 0
75005: ST_TO_ADDR
75006: GO 75628
75008: LD_INT 2
75010: DOUBLE
75011: EQUAL
75012: IFTRUE 75016
75014: GO 75027
75016: POP
// bc_type := b_warehouse ; 3 :
75017: LD_ADDR_OWVAR 42
75021: PUSH
75022: LD_INT 1
75024: ST_TO_ADDR
75025: GO 75628
75027: LD_INT 3
75029: DOUBLE
75030: EQUAL
75031: IFTRUE 75035
75033: GO 75046
75035: POP
// bc_type := b_lab ; 4 .. 9 :
75036: LD_ADDR_OWVAR 42
75040: PUSH
75041: LD_INT 6
75043: ST_TO_ADDR
75044: GO 75628
75046: LD_INT 4
75048: DOUBLE
75049: GREATEREQUAL
75050: IFFALSE 75058
75052: LD_INT 9
75054: DOUBLE
75055: LESSEQUAL
75056: IFTRUE 75060
75058: GO 75120
75060: POP
// begin bc_type := b_lab_half ;
75061: LD_ADDR_OWVAR 42
75065: PUSH
75066: LD_INT 7
75068: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75069: LD_ADDR_OWVAR 44
75073: PUSH
75074: LD_INT 10
75076: PUSH
75077: LD_INT 11
75079: PUSH
75080: LD_INT 12
75082: PUSH
75083: LD_INT 15
75085: PUSH
75086: LD_INT 14
75088: PUSH
75089: LD_INT 13
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: PUSH
75100: LD_VAR 0 2
75104: PUSH
75105: LD_INT 3
75107: MINUS
75108: ARRAY
75109: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
75110: LD_ADDR_OWVAR 45
75114: PUSH
75115: LD_INT 9
75117: ST_TO_ADDR
// end ; 10 .. 13 :
75118: GO 75628
75120: LD_INT 10
75122: DOUBLE
75123: GREATEREQUAL
75124: IFFALSE 75132
75126: LD_INT 13
75128: DOUBLE
75129: LESSEQUAL
75130: IFTRUE 75134
75132: GO 75211
75134: POP
// begin bc_type := b_lab_full ;
75135: LD_ADDR_OWVAR 42
75139: PUSH
75140: LD_INT 8
75142: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75143: LD_ADDR_OWVAR 44
75147: PUSH
75148: LD_INT 10
75150: PUSH
75151: LD_INT 12
75153: PUSH
75154: LD_INT 14
75156: PUSH
75157: LD_INT 13
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: LIST
75164: LIST
75165: PUSH
75166: LD_VAR 0 2
75170: PUSH
75171: LD_INT 9
75173: MINUS
75174: ARRAY
75175: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75176: LD_ADDR_OWVAR 45
75180: PUSH
75181: LD_INT 11
75183: PUSH
75184: LD_INT 15
75186: PUSH
75187: LD_INT 12
75189: PUSH
75190: LD_INT 15
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: PUSH
75199: LD_VAR 0 2
75203: PUSH
75204: LD_INT 9
75206: MINUS
75207: ARRAY
75208: ST_TO_ADDR
// end ; 14 :
75209: GO 75628
75211: LD_INT 14
75213: DOUBLE
75214: EQUAL
75215: IFTRUE 75219
75217: GO 75230
75219: POP
// bc_type := b_workshop ; 15 :
75220: LD_ADDR_OWVAR 42
75224: PUSH
75225: LD_INT 2
75227: ST_TO_ADDR
75228: GO 75628
75230: LD_INT 15
75232: DOUBLE
75233: EQUAL
75234: IFTRUE 75238
75236: GO 75249
75238: POP
// bc_type := b_factory ; 16 :
75239: LD_ADDR_OWVAR 42
75243: PUSH
75244: LD_INT 3
75246: ST_TO_ADDR
75247: GO 75628
75249: LD_INT 16
75251: DOUBLE
75252: EQUAL
75253: IFTRUE 75257
75255: GO 75268
75257: POP
// bc_type := b_ext_gun ; 17 :
75258: LD_ADDR_OWVAR 42
75262: PUSH
75263: LD_INT 17
75265: ST_TO_ADDR
75266: GO 75628
75268: LD_INT 17
75270: DOUBLE
75271: EQUAL
75272: IFTRUE 75276
75274: GO 75304
75276: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75277: LD_ADDR_OWVAR 42
75281: PUSH
75282: LD_INT 19
75284: PUSH
75285: LD_INT 23
75287: PUSH
75288: LD_INT 19
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: LIST
75295: PUSH
75296: LD_VAR 0 1
75300: ARRAY
75301: ST_TO_ADDR
75302: GO 75628
75304: LD_INT 18
75306: DOUBLE
75307: EQUAL
75308: IFTRUE 75312
75310: GO 75323
75312: POP
// bc_type := b_ext_radar ; 19 :
75313: LD_ADDR_OWVAR 42
75317: PUSH
75318: LD_INT 20
75320: ST_TO_ADDR
75321: GO 75628
75323: LD_INT 19
75325: DOUBLE
75326: EQUAL
75327: IFTRUE 75331
75329: GO 75342
75331: POP
// bc_type := b_ext_radio ; 20 :
75332: LD_ADDR_OWVAR 42
75336: PUSH
75337: LD_INT 22
75339: ST_TO_ADDR
75340: GO 75628
75342: LD_INT 20
75344: DOUBLE
75345: EQUAL
75346: IFTRUE 75350
75348: GO 75361
75350: POP
// bc_type := b_ext_siberium ; 21 :
75351: LD_ADDR_OWVAR 42
75355: PUSH
75356: LD_INT 21
75358: ST_TO_ADDR
75359: GO 75628
75361: LD_INT 21
75363: DOUBLE
75364: EQUAL
75365: IFTRUE 75369
75367: GO 75380
75369: POP
// bc_type := b_ext_computer ; 22 :
75370: LD_ADDR_OWVAR 42
75374: PUSH
75375: LD_INT 24
75377: ST_TO_ADDR
75378: GO 75628
75380: LD_INT 22
75382: DOUBLE
75383: EQUAL
75384: IFTRUE 75388
75386: GO 75399
75388: POP
// bc_type := b_ext_track ; 23 :
75389: LD_ADDR_OWVAR 42
75393: PUSH
75394: LD_INT 16
75396: ST_TO_ADDR
75397: GO 75628
75399: LD_INT 23
75401: DOUBLE
75402: EQUAL
75403: IFTRUE 75407
75405: GO 75418
75407: POP
// bc_type := b_ext_laser ; 24 :
75408: LD_ADDR_OWVAR 42
75412: PUSH
75413: LD_INT 25
75415: ST_TO_ADDR
75416: GO 75628
75418: LD_INT 24
75420: DOUBLE
75421: EQUAL
75422: IFTRUE 75426
75424: GO 75437
75426: POP
// bc_type := b_control_tower ; 25 :
75427: LD_ADDR_OWVAR 42
75431: PUSH
75432: LD_INT 36
75434: ST_TO_ADDR
75435: GO 75628
75437: LD_INT 25
75439: DOUBLE
75440: EQUAL
75441: IFTRUE 75445
75443: GO 75456
75445: POP
// bc_type := b_breastwork ; 26 :
75446: LD_ADDR_OWVAR 42
75450: PUSH
75451: LD_INT 31
75453: ST_TO_ADDR
75454: GO 75628
75456: LD_INT 26
75458: DOUBLE
75459: EQUAL
75460: IFTRUE 75464
75462: GO 75475
75464: POP
// bc_type := b_bunker ; 27 :
75465: LD_ADDR_OWVAR 42
75469: PUSH
75470: LD_INT 32
75472: ST_TO_ADDR
75473: GO 75628
75475: LD_INT 27
75477: DOUBLE
75478: EQUAL
75479: IFTRUE 75483
75481: GO 75494
75483: POP
// bc_type := b_turret ; 28 :
75484: LD_ADDR_OWVAR 42
75488: PUSH
75489: LD_INT 33
75491: ST_TO_ADDR
75492: GO 75628
75494: LD_INT 28
75496: DOUBLE
75497: EQUAL
75498: IFTRUE 75502
75500: GO 75513
75502: POP
// bc_type := b_armoury ; 29 :
75503: LD_ADDR_OWVAR 42
75507: PUSH
75508: LD_INT 4
75510: ST_TO_ADDR
75511: GO 75628
75513: LD_INT 29
75515: DOUBLE
75516: EQUAL
75517: IFTRUE 75521
75519: GO 75532
75521: POP
// bc_type := b_barracks ; 30 :
75522: LD_ADDR_OWVAR 42
75526: PUSH
75527: LD_INT 5
75529: ST_TO_ADDR
75530: GO 75628
75532: LD_INT 30
75534: DOUBLE
75535: EQUAL
75536: IFTRUE 75540
75538: GO 75551
75540: POP
// bc_type := b_solar_power ; 31 :
75541: LD_ADDR_OWVAR 42
75545: PUSH
75546: LD_INT 27
75548: ST_TO_ADDR
75549: GO 75628
75551: LD_INT 31
75553: DOUBLE
75554: EQUAL
75555: IFTRUE 75559
75557: GO 75570
75559: POP
// bc_type := b_oil_power ; 32 :
75560: LD_ADDR_OWVAR 42
75564: PUSH
75565: LD_INT 26
75567: ST_TO_ADDR
75568: GO 75628
75570: LD_INT 32
75572: DOUBLE
75573: EQUAL
75574: IFTRUE 75578
75576: GO 75589
75578: POP
// bc_type := b_siberite_power ; 33 :
75579: LD_ADDR_OWVAR 42
75583: PUSH
75584: LD_INT 28
75586: ST_TO_ADDR
75587: GO 75628
75589: LD_INT 33
75591: DOUBLE
75592: EQUAL
75593: IFTRUE 75597
75595: GO 75608
75597: POP
// bc_type := b_oil_mine ; 34 :
75598: LD_ADDR_OWVAR 42
75602: PUSH
75603: LD_INT 29
75605: ST_TO_ADDR
75606: GO 75628
75608: LD_INT 34
75610: DOUBLE
75611: EQUAL
75612: IFTRUE 75616
75614: GO 75627
75616: POP
// bc_type := b_siberite_mine ; end ;
75617: LD_ADDR_OWVAR 42
75621: PUSH
75622: LD_INT 30
75624: ST_TO_ADDR
75625: GO 75628
75627: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75628: LD_ADDR_VAR 0 8
75632: PUSH
75633: LD_VAR 0 5
75637: PPUSH
75638: LD_VAR 0 6
75642: PPUSH
75643: LD_VAR 0 3
75647: PPUSH
75648: CALL_OW 47
75652: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75653: LD_OWVAR 42
75657: PUSH
75658: LD_INT 32
75660: PUSH
75661: LD_INT 33
75663: PUSH
75664: EMPTY
75665: LIST
75666: LIST
75667: IN
75668: IFFALSE 75684
// PlaceWeaponTurret ( b , weapon ) ;
75670: LD_VAR 0 8
75674: PPUSH
75675: LD_VAR 0 4
75679: PPUSH
75680: CALL_OW 431
// end ;
75684: LD_VAR 0 7
75688: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75689: LD_INT 0
75691: PPUSH
75692: PPUSH
75693: PPUSH
75694: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75695: LD_ADDR_VAR 0 4
75699: PUSH
75700: LD_INT 22
75702: PUSH
75703: LD_OWVAR 2
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: PUSH
75712: LD_INT 2
75714: PUSH
75715: LD_INT 30
75717: PUSH
75718: LD_INT 0
75720: PUSH
75721: EMPTY
75722: LIST
75723: LIST
75724: PUSH
75725: LD_INT 30
75727: PUSH
75728: LD_INT 1
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: LIST
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PPUSH
75744: CALL_OW 69
75748: ST_TO_ADDR
// if not tmp then
75749: LD_VAR 0 4
75753: NOT
75754: IFFALSE 75758
// exit ;
75756: GO 75817
// for i in tmp do
75758: LD_ADDR_VAR 0 2
75762: PUSH
75763: LD_VAR 0 4
75767: PUSH
75768: FOR_IN
75769: IFFALSE 75815
// for j = 1 to 3 do
75771: LD_ADDR_VAR 0 3
75775: PUSH
75776: DOUBLE
75777: LD_INT 1
75779: DEC
75780: ST_TO_ADDR
75781: LD_INT 3
75783: PUSH
75784: FOR_TO
75785: IFFALSE 75811
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75787: LD_VAR 0 2
75791: PPUSH
75792: CALL_OW 274
75796: PPUSH
75797: LD_VAR 0 3
75801: PPUSH
75802: LD_INT 99999
75804: PPUSH
75805: CALL_OW 277
75809: GO 75784
75811: POP
75812: POP
75813: GO 75768
75815: POP
75816: POP
// end ;
75817: LD_VAR 0 1
75821: RET
// export function hHackSetLevel10 ; var i , j ; begin
75822: LD_INT 0
75824: PPUSH
75825: PPUSH
75826: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75827: LD_ADDR_VAR 0 2
75831: PUSH
75832: LD_INT 21
75834: PUSH
75835: LD_INT 1
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: PPUSH
75842: CALL_OW 69
75846: PUSH
75847: FOR_IN
75848: IFFALSE 75900
// if IsSelected ( i ) then
75850: LD_VAR 0 2
75854: PPUSH
75855: CALL_OW 306
75859: IFFALSE 75898
// begin for j := 1 to 4 do
75861: LD_ADDR_VAR 0 3
75865: PUSH
75866: DOUBLE
75867: LD_INT 1
75869: DEC
75870: ST_TO_ADDR
75871: LD_INT 4
75873: PUSH
75874: FOR_TO
75875: IFFALSE 75896
// SetSkill ( i , j , 10 ) ;
75877: LD_VAR 0 2
75881: PPUSH
75882: LD_VAR 0 3
75886: PPUSH
75887: LD_INT 10
75889: PPUSH
75890: CALL_OW 237
75894: GO 75874
75896: POP
75897: POP
// end ;
75898: GO 75847
75900: POP
75901: POP
// end ;
75902: LD_VAR 0 1
75906: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75907: LD_INT 0
75909: PPUSH
75910: PPUSH
75911: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75912: LD_ADDR_VAR 0 2
75916: PUSH
75917: LD_INT 22
75919: PUSH
75920: LD_OWVAR 2
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: LD_INT 21
75931: PUSH
75932: LD_INT 1
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: PPUSH
75943: CALL_OW 69
75947: PUSH
75948: FOR_IN
75949: IFFALSE 75990
// begin for j := 1 to 4 do
75951: LD_ADDR_VAR 0 3
75955: PUSH
75956: DOUBLE
75957: LD_INT 1
75959: DEC
75960: ST_TO_ADDR
75961: LD_INT 4
75963: PUSH
75964: FOR_TO
75965: IFFALSE 75986
// SetSkill ( i , j , 10 ) ;
75967: LD_VAR 0 2
75971: PPUSH
75972: LD_VAR 0 3
75976: PPUSH
75977: LD_INT 10
75979: PPUSH
75980: CALL_OW 237
75984: GO 75964
75986: POP
75987: POP
// end ;
75988: GO 75948
75990: POP
75991: POP
// end ;
75992: LD_VAR 0 1
75996: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75997: LD_INT 0
75999: PPUSH
// uc_side := your_side ;
76000: LD_ADDR_OWVAR 20
76004: PUSH
76005: LD_OWVAR 2
76009: ST_TO_ADDR
// uc_nation := nation ;
76010: LD_ADDR_OWVAR 21
76014: PUSH
76015: LD_VAR 0 1
76019: ST_TO_ADDR
// InitHc ;
76020: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76024: LD_INT 0
76026: PPUSH
76027: LD_VAR 0 2
76031: PPUSH
76032: LD_VAR 0 3
76036: PPUSH
76037: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
76041: LD_VAR 0 4
76045: PPUSH
76046: LD_VAR 0 5
76050: PPUSH
76051: CALL_OW 428
76055: PUSH
76056: LD_INT 0
76058: EQUAL
76059: IFFALSE 76083
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76061: CALL_OW 44
76065: PPUSH
76066: LD_VAR 0 4
76070: PPUSH
76071: LD_VAR 0 5
76075: PPUSH
76076: LD_INT 1
76078: PPUSH
76079: CALL_OW 48
// end ;
76083: LD_VAR 0 6
76087: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76088: LD_INT 0
76090: PPUSH
76091: PPUSH
// uc_side := your_side ;
76092: LD_ADDR_OWVAR 20
76096: PUSH
76097: LD_OWVAR 2
76101: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76102: LD_VAR 0 1
76106: PUSH
76107: LD_INT 1
76109: PUSH
76110: LD_INT 2
76112: PUSH
76113: LD_INT 3
76115: PUSH
76116: LD_INT 4
76118: PUSH
76119: LD_INT 5
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: IN
76129: IFFALSE 76141
// uc_nation := nation_american else
76131: LD_ADDR_OWVAR 21
76135: PUSH
76136: LD_INT 1
76138: ST_TO_ADDR
76139: GO 76184
// if chassis in [ 11 , 12 , 13 , 14 ] then
76141: LD_VAR 0 1
76145: PUSH
76146: LD_INT 11
76148: PUSH
76149: LD_INT 12
76151: PUSH
76152: LD_INT 13
76154: PUSH
76155: LD_INT 14
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: IN
76164: IFFALSE 76176
// uc_nation := nation_arabian else
76166: LD_ADDR_OWVAR 21
76170: PUSH
76171: LD_INT 2
76173: ST_TO_ADDR
76174: GO 76184
// uc_nation := nation_russian ;
76176: LD_ADDR_OWVAR 21
76180: PUSH
76181: LD_INT 3
76183: ST_TO_ADDR
// vc_chassis := chassis ;
76184: LD_ADDR_OWVAR 37
76188: PUSH
76189: LD_VAR 0 1
76193: ST_TO_ADDR
// vc_engine := engine ;
76194: LD_ADDR_OWVAR 39
76198: PUSH
76199: LD_VAR 0 2
76203: ST_TO_ADDR
// vc_control := control ;
76204: LD_ADDR_OWVAR 38
76208: PUSH
76209: LD_VAR 0 3
76213: ST_TO_ADDR
// vc_weapon := weapon ;
76214: LD_ADDR_OWVAR 40
76218: PUSH
76219: LD_VAR 0 4
76223: ST_TO_ADDR
// un := CreateVehicle ;
76224: LD_ADDR_VAR 0 8
76228: PUSH
76229: CALL_OW 45
76233: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76234: LD_VAR 0 8
76238: PPUSH
76239: LD_INT 0
76241: PPUSH
76242: LD_INT 5
76244: PPUSH
76245: CALL_OW 12
76249: PPUSH
76250: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76254: LD_VAR 0 8
76258: PPUSH
76259: LD_VAR 0 5
76263: PPUSH
76264: LD_VAR 0 6
76268: PPUSH
76269: LD_INT 1
76271: PPUSH
76272: CALL_OW 48
// end ;
76276: LD_VAR 0 7
76280: RET
// export hInvincible ; every 1 do
76281: GO 76283
76283: DISABLE
// hInvincible := [ ] ;
76284: LD_ADDR_EXP 103
76288: PUSH
76289: EMPTY
76290: ST_TO_ADDR
76291: END
// every 10 do var i ;
76292: GO 76294
76294: DISABLE
76295: LD_INT 0
76297: PPUSH
// begin enable ;
76298: ENABLE
// if not hInvincible then
76299: LD_EXP 103
76303: NOT
76304: IFFALSE 76308
// exit ;
76306: GO 76352
// for i in hInvincible do
76308: LD_ADDR_VAR 0 1
76312: PUSH
76313: LD_EXP 103
76317: PUSH
76318: FOR_IN
76319: IFFALSE 76350
// if GetLives ( i ) < 1000 then
76321: LD_VAR 0 1
76325: PPUSH
76326: CALL_OW 256
76330: PUSH
76331: LD_INT 1000
76333: LESS
76334: IFFALSE 76348
// SetLives ( i , 1000 ) ;
76336: LD_VAR 0 1
76340: PPUSH
76341: LD_INT 1000
76343: PPUSH
76344: CALL_OW 234
76348: GO 76318
76350: POP
76351: POP
// end ;
76352: PPOPN 1
76354: END
// export function hHackInvincible ; var i ; begin
76355: LD_INT 0
76357: PPUSH
76358: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76359: LD_ADDR_VAR 0 2
76363: PUSH
76364: LD_INT 2
76366: PUSH
76367: LD_INT 21
76369: PUSH
76370: LD_INT 1
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 21
76379: PUSH
76380: LD_INT 2
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: LIST
76391: PPUSH
76392: CALL_OW 69
76396: PUSH
76397: FOR_IN
76398: IFFALSE 76459
// if IsSelected ( i ) then
76400: LD_VAR 0 2
76404: PPUSH
76405: CALL_OW 306
76409: IFFALSE 76457
// begin if i in hInvincible then
76411: LD_VAR 0 2
76415: PUSH
76416: LD_EXP 103
76420: IN
76421: IFFALSE 76441
// hInvincible := hInvincible diff i else
76423: LD_ADDR_EXP 103
76427: PUSH
76428: LD_EXP 103
76432: PUSH
76433: LD_VAR 0 2
76437: DIFF
76438: ST_TO_ADDR
76439: GO 76457
// hInvincible := hInvincible union i ;
76441: LD_ADDR_EXP 103
76445: PUSH
76446: LD_EXP 103
76450: PUSH
76451: LD_VAR 0 2
76455: UNION
76456: ST_TO_ADDR
// end ;
76457: GO 76397
76459: POP
76460: POP
// end ;
76461: LD_VAR 0 1
76465: RET
// export function hHackInvisible ; var i , j ; begin
76466: LD_INT 0
76468: PPUSH
76469: PPUSH
76470: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76471: LD_ADDR_VAR 0 2
76475: PUSH
76476: LD_INT 21
76478: PUSH
76479: LD_INT 1
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: PPUSH
76486: CALL_OW 69
76490: PUSH
76491: FOR_IN
76492: IFFALSE 76516
// if IsSelected ( i ) then
76494: LD_VAR 0 2
76498: PPUSH
76499: CALL_OW 306
76503: IFFALSE 76514
// ComForceInvisible ( i ) ;
76505: LD_VAR 0 2
76509: PPUSH
76510: CALL_OW 496
76514: GO 76491
76516: POP
76517: POP
// end ;
76518: LD_VAR 0 1
76522: RET
// export function hHackChangeYourSide ; begin
76523: LD_INT 0
76525: PPUSH
// if your_side = 8 then
76526: LD_OWVAR 2
76530: PUSH
76531: LD_INT 8
76533: EQUAL
76534: IFFALSE 76546
// your_side := 0 else
76536: LD_ADDR_OWVAR 2
76540: PUSH
76541: LD_INT 0
76543: ST_TO_ADDR
76544: GO 76560
// your_side := your_side + 1 ;
76546: LD_ADDR_OWVAR 2
76550: PUSH
76551: LD_OWVAR 2
76555: PUSH
76556: LD_INT 1
76558: PLUS
76559: ST_TO_ADDR
// end ;
76560: LD_VAR 0 1
76564: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76565: LD_INT 0
76567: PPUSH
76568: PPUSH
76569: PPUSH
// for i in all_units do
76570: LD_ADDR_VAR 0 2
76574: PUSH
76575: LD_OWVAR 3
76579: PUSH
76580: FOR_IN
76581: IFFALSE 76659
// if IsSelected ( i ) then
76583: LD_VAR 0 2
76587: PPUSH
76588: CALL_OW 306
76592: IFFALSE 76657
// begin j := GetSide ( i ) ;
76594: LD_ADDR_VAR 0 3
76598: PUSH
76599: LD_VAR 0 2
76603: PPUSH
76604: CALL_OW 255
76608: ST_TO_ADDR
// if j = 8 then
76609: LD_VAR 0 3
76613: PUSH
76614: LD_INT 8
76616: EQUAL
76617: IFFALSE 76629
// j := 0 else
76619: LD_ADDR_VAR 0 3
76623: PUSH
76624: LD_INT 0
76626: ST_TO_ADDR
76627: GO 76643
// j := j + 1 ;
76629: LD_ADDR_VAR 0 3
76633: PUSH
76634: LD_VAR 0 3
76638: PUSH
76639: LD_INT 1
76641: PLUS
76642: ST_TO_ADDR
// SetSide ( i , j ) ;
76643: LD_VAR 0 2
76647: PPUSH
76648: LD_VAR 0 3
76652: PPUSH
76653: CALL_OW 235
// end ;
76657: GO 76580
76659: POP
76660: POP
// end ;
76661: LD_VAR 0 1
76665: RET
// export function hHackFog ; begin
76666: LD_INT 0
76668: PPUSH
// FogOff ( true ) ;
76669: LD_INT 1
76671: PPUSH
76672: CALL_OW 344
// end ;
76676: LD_VAR 0 1
76680: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76681: LD_INT 0
76683: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76684: LD_VAR 0 1
76688: PPUSH
76689: LD_VAR 0 2
76693: PPUSH
76694: LD_VAR 0 3
76698: PPUSH
76699: LD_INT 1
76701: PPUSH
76702: LD_INT 1
76704: PPUSH
76705: CALL_OW 483
// CenterOnXY ( x , y ) ;
76709: LD_VAR 0 2
76713: PPUSH
76714: LD_VAR 0 3
76718: PPUSH
76719: CALL_OW 84
// end ;
76723: LD_VAR 0 4
76727: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
76728: LD_INT 0
76730: PPUSH
76731: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
76732: LD_VAR 0 1
76736: NOT
76737: PUSH
76738: LD_VAR 0 2
76742: PPUSH
76743: LD_VAR 0 3
76747: PPUSH
76748: CALL_OW 488
76752: NOT
76753: OR
76754: PUSH
76755: LD_VAR 0 1
76759: PPUSH
76760: CALL_OW 266
76764: PUSH
76765: LD_INT 3
76767: NONEQUAL
76768: PUSH
76769: LD_VAR 0 1
76773: PPUSH
76774: CALL_OW 247
76778: PUSH
76779: LD_INT 1
76781: EQUAL
76782: NOT
76783: AND
76784: OR
76785: IFFALSE 76789
// exit ;
76787: GO 76938
// if GetType ( factory ) = unit_human then
76789: LD_VAR 0 1
76793: PPUSH
76794: CALL_OW 247
76798: PUSH
76799: LD_INT 1
76801: EQUAL
76802: IFFALSE 76819
// factory := IsInUnit ( factory ) ;
76804: LD_ADDR_VAR 0 1
76808: PUSH
76809: LD_VAR 0 1
76813: PPUSH
76814: CALL_OW 310
76818: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
76819: LD_VAR 0 1
76823: PPUSH
76824: CALL_OW 266
76828: PUSH
76829: LD_INT 3
76831: NONEQUAL
76832: IFFALSE 76836
// exit ;
76834: GO 76938
// if HexInfo ( x , y ) = factory then
76836: LD_VAR 0 2
76840: PPUSH
76841: LD_VAR 0 3
76845: PPUSH
76846: CALL_OW 428
76850: PUSH
76851: LD_VAR 0 1
76855: EQUAL
76856: IFFALSE 76883
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
76858: LD_ADDR_EXP 104
76862: PUSH
76863: LD_EXP 104
76867: PPUSH
76868: LD_VAR 0 1
76872: PPUSH
76873: LD_INT 0
76875: PPUSH
76876: CALL_OW 1
76880: ST_TO_ADDR
76881: GO 76934
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
76883: LD_ADDR_EXP 104
76887: PUSH
76888: LD_EXP 104
76892: PPUSH
76893: LD_VAR 0 1
76897: PPUSH
76898: LD_VAR 0 1
76902: PPUSH
76903: CALL_OW 255
76907: PUSH
76908: LD_VAR 0 1
76912: PUSH
76913: LD_VAR 0 2
76917: PUSH
76918: LD_VAR 0 3
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: PPUSH
76929: CALL_OW 1
76933: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76934: CALL 76943 0 0
// end ;
76938: LD_VAR 0 4
76942: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76943: LD_INT 0
76945: PPUSH
76946: PPUSH
76947: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76948: LD_STRING resetFactoryWaypoint();
76950: PPUSH
76951: CALL_OW 559
// if factoryWaypoints then
76955: LD_EXP 104
76959: IFFALSE 77085
// begin list := PrepareArray ( factoryWaypoints ) ;
76961: LD_ADDR_VAR 0 3
76965: PUSH
76966: LD_EXP 104
76970: PPUSH
76971: CALL 61714 0 1
76975: ST_TO_ADDR
// for i := 1 to list do
76976: LD_ADDR_VAR 0 2
76980: PUSH
76981: DOUBLE
76982: LD_INT 1
76984: DEC
76985: ST_TO_ADDR
76986: LD_VAR 0 3
76990: PUSH
76991: FOR_TO
76992: IFFALSE 77083
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76994: LD_STRING setFactoryWaypointXY(
76996: PUSH
76997: LD_VAR 0 3
77001: PUSH
77002: LD_VAR 0 2
77006: ARRAY
77007: PUSH
77008: LD_INT 1
77010: ARRAY
77011: STR
77012: PUSH
77013: LD_STRING ,
77015: STR
77016: PUSH
77017: LD_VAR 0 3
77021: PUSH
77022: LD_VAR 0 2
77026: ARRAY
77027: PUSH
77028: LD_INT 2
77030: ARRAY
77031: STR
77032: PUSH
77033: LD_STRING ,
77035: STR
77036: PUSH
77037: LD_VAR 0 3
77041: PUSH
77042: LD_VAR 0 2
77046: ARRAY
77047: PUSH
77048: LD_INT 3
77050: ARRAY
77051: STR
77052: PUSH
77053: LD_STRING ,
77055: STR
77056: PUSH
77057: LD_VAR 0 3
77061: PUSH
77062: LD_VAR 0 2
77066: ARRAY
77067: PUSH
77068: LD_INT 4
77070: ARRAY
77071: STR
77072: PUSH
77073: LD_STRING )
77075: STR
77076: PPUSH
77077: CALL_OW 559
77081: GO 76991
77083: POP
77084: POP
// end ; end ;
77085: LD_VAR 0 1
77089: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
77090: LD_INT 0
77092: PPUSH
// if HexInfo ( x , y ) = warehouse then
77093: LD_VAR 0 2
77097: PPUSH
77098: LD_VAR 0 3
77102: PPUSH
77103: CALL_OW 428
77107: PUSH
77108: LD_VAR 0 1
77112: EQUAL
77113: IFFALSE 77140
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
77115: LD_ADDR_EXP 105
77119: PUSH
77120: LD_EXP 105
77124: PPUSH
77125: LD_VAR 0 1
77129: PPUSH
77130: LD_INT 0
77132: PPUSH
77133: CALL_OW 1
77137: ST_TO_ADDR
77138: GO 77191
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
77140: LD_ADDR_EXP 105
77144: PUSH
77145: LD_EXP 105
77149: PPUSH
77150: LD_VAR 0 1
77154: PPUSH
77155: LD_VAR 0 1
77159: PPUSH
77160: CALL_OW 255
77164: PUSH
77165: LD_VAR 0 1
77169: PUSH
77170: LD_VAR 0 2
77174: PUSH
77175: LD_VAR 0 3
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: PPUSH
77186: CALL_OW 1
77190: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
77191: CALL 77200 0 0
// end ;
77195: LD_VAR 0 4
77199: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
77200: LD_INT 0
77202: PPUSH
77203: PPUSH
77204: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
77205: LD_STRING resetWarehouseGatheringPoints();
77207: PPUSH
77208: CALL_OW 559
// if warehouseGatheringPoints then
77212: LD_EXP 105
77216: IFFALSE 77342
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
77218: LD_ADDR_VAR 0 3
77222: PUSH
77223: LD_EXP 105
77227: PPUSH
77228: CALL 61714 0 1
77232: ST_TO_ADDR
// for i := 1 to list do
77233: LD_ADDR_VAR 0 2
77237: PUSH
77238: DOUBLE
77239: LD_INT 1
77241: DEC
77242: ST_TO_ADDR
77243: LD_VAR 0 3
77247: PUSH
77248: FOR_TO
77249: IFFALSE 77340
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77251: LD_STRING setWarehouseGatheringPointXY(
77253: PUSH
77254: LD_VAR 0 3
77258: PUSH
77259: LD_VAR 0 2
77263: ARRAY
77264: PUSH
77265: LD_INT 1
77267: ARRAY
77268: STR
77269: PUSH
77270: LD_STRING ,
77272: STR
77273: PUSH
77274: LD_VAR 0 3
77278: PUSH
77279: LD_VAR 0 2
77283: ARRAY
77284: PUSH
77285: LD_INT 2
77287: ARRAY
77288: STR
77289: PUSH
77290: LD_STRING ,
77292: STR
77293: PUSH
77294: LD_VAR 0 3
77298: PUSH
77299: LD_VAR 0 2
77303: ARRAY
77304: PUSH
77305: LD_INT 3
77307: ARRAY
77308: STR
77309: PUSH
77310: LD_STRING ,
77312: STR
77313: PUSH
77314: LD_VAR 0 3
77318: PUSH
77319: LD_VAR 0 2
77323: ARRAY
77324: PUSH
77325: LD_INT 4
77327: ARRAY
77328: STR
77329: PUSH
77330: LD_STRING )
77332: STR
77333: PPUSH
77334: CALL_OW 559
77338: GO 77248
77340: POP
77341: POP
// end ; end ;
77342: LD_VAR 0 1
77346: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
77347: LD_EXP 105
77351: IFFALSE 78036
77353: GO 77355
77355: DISABLE
77356: LD_INT 0
77358: PPUSH
77359: PPUSH
77360: PPUSH
77361: PPUSH
77362: PPUSH
77363: PPUSH
77364: PPUSH
77365: PPUSH
77366: PPUSH
// begin enable ;
77367: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
77368: LD_ADDR_VAR 0 3
77372: PUSH
77373: LD_EXP 105
77377: PPUSH
77378: CALL 61714 0 1
77382: ST_TO_ADDR
// if not list then
77383: LD_VAR 0 3
77387: NOT
77388: IFFALSE 77392
// exit ;
77390: GO 78036
// for i := 1 to list do
77392: LD_ADDR_VAR 0 1
77396: PUSH
77397: DOUBLE
77398: LD_INT 1
77400: DEC
77401: ST_TO_ADDR
77402: LD_VAR 0 3
77406: PUSH
77407: FOR_TO
77408: IFFALSE 78034
// begin depot := list [ i ] [ 2 ] ;
77410: LD_ADDR_VAR 0 8
77414: PUSH
77415: LD_VAR 0 3
77419: PUSH
77420: LD_VAR 0 1
77424: ARRAY
77425: PUSH
77426: LD_INT 2
77428: ARRAY
77429: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
77430: LD_ADDR_VAR 0 5
77434: PUSH
77435: LD_VAR 0 3
77439: PUSH
77440: LD_VAR 0 1
77444: ARRAY
77445: PUSH
77446: LD_INT 1
77448: ARRAY
77449: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
77450: LD_VAR 0 8
77454: PPUSH
77455: CALL_OW 301
77459: PUSH
77460: LD_VAR 0 5
77464: PUSH
77465: LD_VAR 0 8
77469: PPUSH
77470: CALL_OW 255
77474: NONEQUAL
77475: OR
77476: IFFALSE 77505
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
77478: LD_ADDR_EXP 105
77482: PUSH
77483: LD_EXP 105
77487: PPUSH
77488: LD_VAR 0 8
77492: PPUSH
77493: LD_INT 0
77495: PPUSH
77496: CALL_OW 1
77500: ST_TO_ADDR
// exit ;
77501: POP
77502: POP
77503: GO 78036
// end ; x := list [ i ] [ 3 ] ;
77505: LD_ADDR_VAR 0 6
77509: PUSH
77510: LD_VAR 0 3
77514: PUSH
77515: LD_VAR 0 1
77519: ARRAY
77520: PUSH
77521: LD_INT 3
77523: ARRAY
77524: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
77525: LD_ADDR_VAR 0 7
77529: PUSH
77530: LD_VAR 0 3
77534: PUSH
77535: LD_VAR 0 1
77539: ARRAY
77540: PUSH
77541: LD_INT 4
77543: ARRAY
77544: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
77545: LD_ADDR_VAR 0 9
77549: PUSH
77550: LD_VAR 0 6
77554: PPUSH
77555: LD_VAR 0 7
77559: PPUSH
77560: LD_INT 16
77562: PPUSH
77563: CALL 60302 0 3
77567: ST_TO_ADDR
// if not cratesNearbyPoint then
77568: LD_VAR 0 9
77572: NOT
77573: IFFALSE 77579
// exit ;
77575: POP
77576: POP
77577: GO 78036
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
77579: LD_ADDR_VAR 0 4
77583: PUSH
77584: LD_INT 22
77586: PUSH
77587: LD_VAR 0 5
77591: PUSH
77592: EMPTY
77593: LIST
77594: LIST
77595: PUSH
77596: LD_INT 3
77598: PUSH
77599: LD_INT 60
77601: PUSH
77602: EMPTY
77603: LIST
77604: PUSH
77605: EMPTY
77606: LIST
77607: LIST
77608: PUSH
77609: LD_INT 91
77611: PUSH
77612: LD_VAR 0 8
77616: PUSH
77617: LD_INT 6
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: LIST
77624: PUSH
77625: LD_INT 2
77627: PUSH
77628: LD_INT 25
77630: PUSH
77631: LD_INT 2
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PUSH
77638: LD_INT 25
77640: PUSH
77641: LD_INT 16
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: PUSH
77648: EMPTY
77649: LIST
77650: LIST
77651: LIST
77652: PUSH
77653: EMPTY
77654: LIST
77655: LIST
77656: LIST
77657: LIST
77658: PPUSH
77659: CALL_OW 69
77663: PUSH
77664: LD_VAR 0 8
77668: PPUSH
77669: CALL_OW 313
77673: PPUSH
77674: LD_INT 3
77676: PUSH
77677: LD_INT 60
77679: PUSH
77680: EMPTY
77681: LIST
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PUSH
77687: LD_INT 2
77689: PUSH
77690: LD_INT 25
77692: PUSH
77693: LD_INT 2
77695: PUSH
77696: EMPTY
77697: LIST
77698: LIST
77699: PUSH
77700: LD_INT 25
77702: PUSH
77703: LD_INT 16
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: PUSH
77710: EMPTY
77711: LIST
77712: LIST
77713: LIST
77714: PUSH
77715: EMPTY
77716: LIST
77717: LIST
77718: PPUSH
77719: CALL_OW 72
77723: UNION
77724: ST_TO_ADDR
// if tmp then
77725: LD_VAR 0 4
77729: IFFALSE 77809
// begin tmp := ShrinkArray ( tmp , 3 ) ;
77731: LD_ADDR_VAR 0 4
77735: PUSH
77736: LD_VAR 0 4
77740: PPUSH
77741: LD_INT 3
77743: PPUSH
77744: CALL 58271 0 2
77748: ST_TO_ADDR
// for j in tmp do
77749: LD_ADDR_VAR 0 2
77753: PUSH
77754: LD_VAR 0 4
77758: PUSH
77759: FOR_IN
77760: IFFALSE 77803
// begin if IsInUnit ( j ) then
77762: LD_VAR 0 2
77766: PPUSH
77767: CALL_OW 310
77771: IFFALSE 77782
// ComExit ( j ) ;
77773: LD_VAR 0 2
77777: PPUSH
77778: CALL 58354 0 1
// AddComCollect ( j , x , y ) ;
77782: LD_VAR 0 2
77786: PPUSH
77787: LD_VAR 0 6
77791: PPUSH
77792: LD_VAR 0 7
77796: PPUSH
77797: CALL_OW 177
// end ;
77801: GO 77759
77803: POP
77804: POP
// exit ;
77805: POP
77806: POP
77807: GO 78036
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77809: LD_ADDR_VAR 0 4
77813: PUSH
77814: LD_INT 22
77816: PUSH
77817: LD_VAR 0 5
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: LD_INT 91
77828: PUSH
77829: LD_VAR 0 8
77833: PUSH
77834: LD_INT 8
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: LIST
77841: PUSH
77842: LD_INT 2
77844: PUSH
77845: LD_INT 34
77847: PUSH
77848: LD_INT 12
77850: PUSH
77851: EMPTY
77852: LIST
77853: LIST
77854: PUSH
77855: LD_INT 34
77857: PUSH
77858: LD_INT 51
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: PUSH
77865: LD_INT 34
77867: PUSH
77868: LD_INT 32
77870: PUSH
77871: EMPTY
77872: LIST
77873: LIST
77874: PUSH
77875: LD_INT 34
77877: PUSH
77878: LD_INT 89
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: LIST
77896: PPUSH
77897: CALL_OW 69
77901: ST_TO_ADDR
// if tmp then
77902: LD_VAR 0 4
77906: IFFALSE 78032
// begin for j in tmp do
77908: LD_ADDR_VAR 0 2
77912: PUSH
77913: LD_VAR 0 4
77917: PUSH
77918: FOR_IN
77919: IFFALSE 78030
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77921: LD_VAR 0 2
77925: PPUSH
77926: CALL_OW 262
77930: PUSH
77931: LD_INT 3
77933: EQUAL
77934: PUSH
77935: LD_VAR 0 2
77939: PPUSH
77940: CALL_OW 261
77944: PUSH
77945: LD_INT 20
77947: GREATER
77948: OR
77949: PUSH
77950: LD_VAR 0 2
77954: PPUSH
77955: CALL_OW 314
77959: NOT
77960: AND
77961: PUSH
77962: LD_VAR 0 2
77966: PPUSH
77967: CALL_OW 263
77971: PUSH
77972: LD_INT 1
77974: NONEQUAL
77975: PUSH
77976: LD_VAR 0 2
77980: PPUSH
77981: CALL_OW 311
77985: OR
77986: AND
77987: IFFALSE 78028
// begin ComCollect ( j , x , y ) ;
77989: LD_VAR 0 2
77993: PPUSH
77994: LD_VAR 0 6
77998: PPUSH
77999: LD_VAR 0 7
78003: PPUSH
78004: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
78008: LD_VAR 0 2
78012: PPUSH
78013: LD_VAR 0 8
78017: PPUSH
78018: CALL_OW 172
// exit ;
78022: POP
78023: POP
78024: POP
78025: POP
78026: GO 78036
// end ;
78028: GO 77918
78030: POP
78031: POP
// end ; end ;
78032: GO 77407
78034: POP
78035: POP
// end ; end_of_file
78036: PPOPN 9
78038: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78039: LD_VAR 0 1
78043: PUSH
78044: LD_INT 200
78046: DOUBLE
78047: GREATEREQUAL
78048: IFFALSE 78056
78050: LD_INT 299
78052: DOUBLE
78053: LESSEQUAL
78054: IFTRUE 78058
78056: GO 78090
78058: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78059: LD_VAR 0 1
78063: PPUSH
78064: LD_VAR 0 2
78068: PPUSH
78069: LD_VAR 0 3
78073: PPUSH
78074: LD_VAR 0 4
78078: PPUSH
78079: LD_VAR 0 5
78083: PPUSH
78084: CALL 78578 0 5
78088: GO 78167
78090: LD_INT 300
78092: DOUBLE
78093: GREATEREQUAL
78094: IFFALSE 78102
78096: LD_INT 399
78098: DOUBLE
78099: LESSEQUAL
78100: IFTRUE 78104
78102: GO 78166
78104: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78105: LD_VAR 0 1
78109: PPUSH
78110: LD_VAR 0 2
78114: PPUSH
78115: LD_VAR 0 3
78119: PPUSH
78120: LD_VAR 0 4
78124: PPUSH
78125: LD_VAR 0 5
78129: PPUSH
78130: LD_VAR 0 6
78134: PPUSH
78135: LD_VAR 0 7
78139: PPUSH
78140: LD_VAR 0 8
78144: PPUSH
78145: LD_VAR 0 9
78149: PPUSH
78150: LD_VAR 0 10
78154: PPUSH
78155: LD_VAR 0 11
78159: PPUSH
78160: CALL 74740 0 11
78164: GO 78167
78166: POP
// end ;
78167: PPOPN 11
78169: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78170: LD_VAR 0 1
78174: PPUSH
78175: LD_VAR 0 2
78179: PPUSH
78180: LD_VAR 0 3
78184: PPUSH
78185: LD_VAR 0 4
78189: PPUSH
78190: LD_VAR 0 5
78194: PPUSH
78195: CALL 78314 0 5
// end ; end_of_file
78199: PPOPN 5
78201: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78202: LD_INT 0
78204: PPUSH
78205: PPUSH
78206: PPUSH
78207: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78208: LD_VAR 0 1
78212: PPUSH
78213: CALL_OW 264
78217: PUSH
78218: LD_INT 91
78220: EQUAL
78221: IFFALSE 78293
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78223: LD_INT 68
78225: PPUSH
78226: LD_VAR 0 1
78230: PPUSH
78231: CALL_OW 255
78235: PPUSH
78236: CALL_OW 321
78240: PUSH
78241: LD_INT 2
78243: EQUAL
78244: IFFALSE 78256
// eff := 70 else
78246: LD_ADDR_VAR 0 4
78250: PUSH
78251: LD_INT 70
78253: ST_TO_ADDR
78254: GO 78264
// eff := 30 ;
78256: LD_ADDR_VAR 0 4
78260: PUSH
78261: LD_INT 30
78263: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78264: LD_VAR 0 1
78268: PPUSH
78269: CALL_OW 250
78273: PPUSH
78274: LD_VAR 0 1
78278: PPUSH
78279: CALL_OW 251
78283: PPUSH
78284: LD_VAR 0 4
78288: PPUSH
78289: CALL_OW 495
// end ; end ;
78293: LD_VAR 0 2
78297: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78298: LD_INT 0
78300: PPUSH
// end ;
78301: LD_VAR 0 4
78305: RET
// export function SOS_Command ( cmd ) ; begin
78306: LD_INT 0
78308: PPUSH
// end ;
78309: LD_VAR 0 2
78313: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
78314: LD_INT 0
78316: PPUSH
// end ;
78317: LD_VAR 0 6
78321: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
78322: LD_INT 0
78324: PPUSH
78325: PPUSH
// if not vehicle or not factory then
78326: LD_VAR 0 1
78330: NOT
78331: PUSH
78332: LD_VAR 0 2
78336: NOT
78337: OR
78338: IFFALSE 78342
// exit ;
78340: GO 78573
// if factoryWaypoints >= factory then
78342: LD_EXP 104
78346: PUSH
78347: LD_VAR 0 2
78351: GREATEREQUAL
78352: IFFALSE 78573
// if factoryWaypoints [ factory ] then
78354: LD_EXP 104
78358: PUSH
78359: LD_VAR 0 2
78363: ARRAY
78364: IFFALSE 78573
// begin if GetControl ( vehicle ) = control_manual then
78366: LD_VAR 0 1
78370: PPUSH
78371: CALL_OW 263
78375: PUSH
78376: LD_INT 1
78378: EQUAL
78379: IFFALSE 78460
// begin driver := IsDrivenBy ( vehicle ) ;
78381: LD_ADDR_VAR 0 4
78385: PUSH
78386: LD_VAR 0 1
78390: PPUSH
78391: CALL_OW 311
78395: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78396: LD_VAR 0 4
78400: PPUSH
78401: LD_EXP 104
78405: PUSH
78406: LD_VAR 0 2
78410: ARRAY
78411: PUSH
78412: LD_INT 3
78414: ARRAY
78415: PPUSH
78416: LD_EXP 104
78420: PUSH
78421: LD_VAR 0 2
78425: ARRAY
78426: PUSH
78427: LD_INT 4
78429: ARRAY
78430: PPUSH
78431: CALL_OW 171
// AddComExitVehicle ( driver ) ;
78435: LD_VAR 0 4
78439: PPUSH
78440: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
78444: LD_VAR 0 4
78448: PPUSH
78449: LD_VAR 0 2
78453: PPUSH
78454: CALL_OW 180
// end else
78458: GO 78573
// if GetControl ( vehicle ) = control_remote then
78460: LD_VAR 0 1
78464: PPUSH
78465: CALL_OW 263
78469: PUSH
78470: LD_INT 2
78472: EQUAL
78473: IFFALSE 78534
// begin wait ( 0 0$2 ) ;
78475: LD_INT 70
78477: PPUSH
78478: CALL_OW 67
// if Connect ( vehicle ) then
78482: LD_VAR 0 1
78486: PPUSH
78487: CALL 28562 0 1
78491: IFFALSE 78532
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78493: LD_VAR 0 1
78497: PPUSH
78498: LD_EXP 104
78502: PUSH
78503: LD_VAR 0 2
78507: ARRAY
78508: PUSH
78509: LD_INT 3
78511: ARRAY
78512: PPUSH
78513: LD_EXP 104
78517: PUSH
78518: LD_VAR 0 2
78522: ARRAY
78523: PUSH
78524: LD_INT 4
78526: ARRAY
78527: PPUSH
78528: CALL_OW 171
// end else
78532: GO 78573
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78534: LD_VAR 0 1
78538: PPUSH
78539: LD_EXP 104
78543: PUSH
78544: LD_VAR 0 2
78548: ARRAY
78549: PUSH
78550: LD_INT 3
78552: ARRAY
78553: PPUSH
78554: LD_EXP 104
78558: PUSH
78559: LD_VAR 0 2
78563: ARRAY
78564: PUSH
78565: LD_INT 4
78567: ARRAY
78568: PPUSH
78569: CALL_OW 171
// end ; end ;
78573: LD_VAR 0 3
78577: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78578: LD_INT 0
78580: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78581: LD_VAR 0 1
78585: PUSH
78586: LD_INT 250
78588: EQUAL
78589: PUSH
78590: LD_VAR 0 2
78594: PPUSH
78595: CALL_OW 264
78599: PUSH
78600: LD_INT 81
78602: EQUAL
78603: AND
78604: IFFALSE 78625
// MinerPlaceMine ( unit , x , y ) ;
78606: LD_VAR 0 2
78610: PPUSH
78611: LD_VAR 0 4
78615: PPUSH
78616: LD_VAR 0 5
78620: PPUSH
78621: CALL 81449 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78625: LD_VAR 0 1
78629: PUSH
78630: LD_INT 251
78632: EQUAL
78633: PUSH
78634: LD_VAR 0 2
78638: PPUSH
78639: CALL_OW 264
78643: PUSH
78644: LD_INT 81
78646: EQUAL
78647: AND
78648: IFFALSE 78669
// MinerDetonateMine ( unit , x , y ) ;
78650: LD_VAR 0 2
78654: PPUSH
78655: LD_VAR 0 4
78659: PPUSH
78660: LD_VAR 0 5
78664: PPUSH
78665: CALL 81724 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78669: LD_VAR 0 1
78673: PUSH
78674: LD_INT 252
78676: EQUAL
78677: PUSH
78678: LD_VAR 0 2
78682: PPUSH
78683: CALL_OW 264
78687: PUSH
78688: LD_INT 81
78690: EQUAL
78691: AND
78692: IFFALSE 78713
// MinerCreateMinefield ( unit , x , y ) ;
78694: LD_VAR 0 2
78698: PPUSH
78699: LD_VAR 0 4
78703: PPUSH
78704: LD_VAR 0 5
78708: PPUSH
78709: CALL 82141 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78713: LD_VAR 0 1
78717: PUSH
78718: LD_INT 253
78720: EQUAL
78721: PUSH
78722: LD_VAR 0 2
78726: PPUSH
78727: CALL_OW 257
78731: PUSH
78732: LD_INT 5
78734: EQUAL
78735: AND
78736: IFFALSE 78757
// ComBinocular ( unit , x , y ) ;
78738: LD_VAR 0 2
78742: PPUSH
78743: LD_VAR 0 4
78747: PPUSH
78748: LD_VAR 0 5
78752: PPUSH
78753: CALL 82510 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78757: LD_VAR 0 1
78761: PUSH
78762: LD_INT 254
78764: EQUAL
78765: PUSH
78766: LD_VAR 0 2
78770: PPUSH
78771: CALL_OW 264
78775: PUSH
78776: LD_INT 99
78778: EQUAL
78779: AND
78780: PUSH
78781: LD_VAR 0 3
78785: PPUSH
78786: CALL_OW 263
78790: PUSH
78791: LD_INT 3
78793: EQUAL
78794: AND
78795: IFFALSE 78811
// HackDestroyVehicle ( unit , selectedUnit ) ;
78797: LD_VAR 0 2
78801: PPUSH
78802: LD_VAR 0 3
78806: PPUSH
78807: CALL 80813 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78811: LD_VAR 0 1
78815: PUSH
78816: LD_INT 255
78818: EQUAL
78819: PUSH
78820: LD_VAR 0 2
78824: PPUSH
78825: CALL_OW 264
78829: PUSH
78830: LD_INT 14
78832: PUSH
78833: LD_INT 53
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: IN
78840: AND
78841: PUSH
78842: LD_VAR 0 4
78846: PPUSH
78847: LD_VAR 0 5
78851: PPUSH
78852: CALL_OW 488
78856: AND
78857: IFFALSE 78881
// CutTreeXYR ( unit , x , y , 12 ) ;
78859: LD_VAR 0 2
78863: PPUSH
78864: LD_VAR 0 4
78868: PPUSH
78869: LD_VAR 0 5
78873: PPUSH
78874: LD_INT 12
78876: PPUSH
78877: CALL 78976 0 4
// if cmd = 256 then
78881: LD_VAR 0 1
78885: PUSH
78886: LD_INT 256
78888: EQUAL
78889: IFFALSE 78910
// SetFactoryWaypoint ( unit , x , y ) ;
78891: LD_VAR 0 2
78895: PPUSH
78896: LD_VAR 0 4
78900: PPUSH
78901: LD_VAR 0 5
78905: PPUSH
78906: CALL 76728 0 3
// if cmd = 257 then
78910: LD_VAR 0 1
78914: PUSH
78915: LD_INT 257
78917: EQUAL
78918: IFFALSE 78939
// SetWarehouseGatheringPoint ( unit , x , y ) ;
78920: LD_VAR 0 2
78924: PPUSH
78925: LD_VAR 0 4
78929: PPUSH
78930: LD_VAR 0 5
78934: PPUSH
78935: CALL 77090 0 3
// if cmd = 258 then
78939: LD_VAR 0 1
78943: PUSH
78944: LD_INT 258
78946: EQUAL
78947: IFFALSE 78971
// BurnTreeXYR ( unit , x , y , 8 ) ;
78949: LD_VAR 0 2
78953: PPUSH
78954: LD_VAR 0 4
78958: PPUSH
78959: LD_VAR 0 5
78963: PPUSH
78964: LD_INT 8
78966: PPUSH
78967: CALL 79370 0 4
// end ;
78971: LD_VAR 0 6
78975: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78976: LD_INT 0
78978: PPUSH
78979: PPUSH
78980: PPUSH
78981: PPUSH
78982: PPUSH
78983: PPUSH
78984: PPUSH
78985: PPUSH
78986: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
78987: LD_VAR 0 1
78991: PPUSH
78992: CALL_OW 302
78996: NOT
78997: PUSH
78998: LD_VAR 0 2
79002: PPUSH
79003: LD_VAR 0 3
79007: PPUSH
79008: CALL_OW 488
79012: NOT
79013: OR
79014: PUSH
79015: LD_VAR 0 4
79019: NOT
79020: OR
79021: IFFALSE 79025
// exit ;
79023: GO 79365
// list := [ ] ;
79025: LD_ADDR_VAR 0 13
79029: PUSH
79030: EMPTY
79031: ST_TO_ADDR
// if x - r < 0 then
79032: LD_VAR 0 2
79036: PUSH
79037: LD_VAR 0 4
79041: MINUS
79042: PUSH
79043: LD_INT 0
79045: LESS
79046: IFFALSE 79058
// min_x := 0 else
79048: LD_ADDR_VAR 0 7
79052: PUSH
79053: LD_INT 0
79055: ST_TO_ADDR
79056: GO 79074
// min_x := x - r ;
79058: LD_ADDR_VAR 0 7
79062: PUSH
79063: LD_VAR 0 2
79067: PUSH
79068: LD_VAR 0 4
79072: MINUS
79073: ST_TO_ADDR
// if y - r < 0 then
79074: LD_VAR 0 3
79078: PUSH
79079: LD_VAR 0 4
79083: MINUS
79084: PUSH
79085: LD_INT 0
79087: LESS
79088: IFFALSE 79100
// min_y := 0 else
79090: LD_ADDR_VAR 0 8
79094: PUSH
79095: LD_INT 0
79097: ST_TO_ADDR
79098: GO 79116
// min_y := y - r ;
79100: LD_ADDR_VAR 0 8
79104: PUSH
79105: LD_VAR 0 3
79109: PUSH
79110: LD_VAR 0 4
79114: MINUS
79115: ST_TO_ADDR
// max_x := x + r ;
79116: LD_ADDR_VAR 0 9
79120: PUSH
79121: LD_VAR 0 2
79125: PUSH
79126: LD_VAR 0 4
79130: PLUS
79131: ST_TO_ADDR
// max_y := y + r ;
79132: LD_ADDR_VAR 0 10
79136: PUSH
79137: LD_VAR 0 3
79141: PUSH
79142: LD_VAR 0 4
79146: PLUS
79147: ST_TO_ADDR
// for _x = min_x to max_x do
79148: LD_ADDR_VAR 0 11
79152: PUSH
79153: DOUBLE
79154: LD_VAR 0 7
79158: DEC
79159: ST_TO_ADDR
79160: LD_VAR 0 9
79164: PUSH
79165: FOR_TO
79166: IFFALSE 79283
// for _y = min_y to max_y do
79168: LD_ADDR_VAR 0 12
79172: PUSH
79173: DOUBLE
79174: LD_VAR 0 8
79178: DEC
79179: ST_TO_ADDR
79180: LD_VAR 0 10
79184: PUSH
79185: FOR_TO
79186: IFFALSE 79279
// begin if not ValidHex ( _x , _y ) then
79188: LD_VAR 0 11
79192: PPUSH
79193: LD_VAR 0 12
79197: PPUSH
79198: CALL_OW 488
79202: NOT
79203: IFFALSE 79207
// continue ;
79205: GO 79185
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79207: LD_VAR 0 11
79211: PPUSH
79212: LD_VAR 0 12
79216: PPUSH
79217: CALL_OW 351
79221: PUSH
79222: LD_VAR 0 11
79226: PPUSH
79227: LD_VAR 0 12
79231: PPUSH
79232: CALL_OW 554
79236: AND
79237: IFFALSE 79277
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79239: LD_ADDR_VAR 0 13
79243: PUSH
79244: LD_VAR 0 13
79248: PPUSH
79249: LD_VAR 0 13
79253: PUSH
79254: LD_INT 1
79256: PLUS
79257: PPUSH
79258: LD_VAR 0 11
79262: PUSH
79263: LD_VAR 0 12
79267: PUSH
79268: EMPTY
79269: LIST
79270: LIST
79271: PPUSH
79272: CALL_OW 2
79276: ST_TO_ADDR
// end ;
79277: GO 79185
79279: POP
79280: POP
79281: GO 79165
79283: POP
79284: POP
// if not list then
79285: LD_VAR 0 13
79289: NOT
79290: IFFALSE 79294
// exit ;
79292: GO 79365
// for i in list do
79294: LD_ADDR_VAR 0 6
79298: PUSH
79299: LD_VAR 0 13
79303: PUSH
79304: FOR_IN
79305: IFFALSE 79363
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79307: LD_VAR 0 1
79311: PPUSH
79312: LD_STRING M
79314: PUSH
79315: LD_VAR 0 6
79319: PUSH
79320: LD_INT 1
79322: ARRAY
79323: PUSH
79324: LD_VAR 0 6
79328: PUSH
79329: LD_INT 2
79331: ARRAY
79332: PUSH
79333: LD_INT 0
79335: PUSH
79336: LD_INT 0
79338: PUSH
79339: LD_INT 0
79341: PUSH
79342: LD_INT 0
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: LIST
79352: LIST
79353: PUSH
79354: EMPTY
79355: LIST
79356: PPUSH
79357: CALL_OW 447
79361: GO 79304
79363: POP
79364: POP
// end ;
79365: LD_VAR 0 5
79369: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79370: LD_INT 0
79372: PPUSH
79373: PPUSH
79374: PPUSH
79375: PPUSH
79376: PPUSH
79377: PPUSH
79378: PPUSH
79379: PPUSH
79380: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
79381: LD_VAR 0 1
79385: PPUSH
79386: CALL_OW 302
79390: NOT
79391: PUSH
79392: LD_VAR 0 2
79396: PPUSH
79397: LD_VAR 0 3
79401: PPUSH
79402: CALL_OW 488
79406: NOT
79407: OR
79408: PUSH
79409: LD_VAR 0 4
79413: NOT
79414: OR
79415: IFFALSE 79419
// exit ;
79417: GO 79767
// list := [ ] ;
79419: LD_ADDR_VAR 0 13
79423: PUSH
79424: EMPTY
79425: ST_TO_ADDR
// if x - r < 0 then
79426: LD_VAR 0 2
79430: PUSH
79431: LD_VAR 0 4
79435: MINUS
79436: PUSH
79437: LD_INT 0
79439: LESS
79440: IFFALSE 79452
// min_x := 0 else
79442: LD_ADDR_VAR 0 7
79446: PUSH
79447: LD_INT 0
79449: ST_TO_ADDR
79450: GO 79468
// min_x := x - r ;
79452: LD_ADDR_VAR 0 7
79456: PUSH
79457: LD_VAR 0 2
79461: PUSH
79462: LD_VAR 0 4
79466: MINUS
79467: ST_TO_ADDR
// if y - r < 0 then
79468: LD_VAR 0 3
79472: PUSH
79473: LD_VAR 0 4
79477: MINUS
79478: PUSH
79479: LD_INT 0
79481: LESS
79482: IFFALSE 79494
// min_y := 0 else
79484: LD_ADDR_VAR 0 8
79488: PUSH
79489: LD_INT 0
79491: ST_TO_ADDR
79492: GO 79510
// min_y := y - r ;
79494: LD_ADDR_VAR 0 8
79498: PUSH
79499: LD_VAR 0 3
79503: PUSH
79504: LD_VAR 0 4
79508: MINUS
79509: ST_TO_ADDR
// max_x := x + r ;
79510: LD_ADDR_VAR 0 9
79514: PUSH
79515: LD_VAR 0 2
79519: PUSH
79520: LD_VAR 0 4
79524: PLUS
79525: ST_TO_ADDR
// max_y := y + r ;
79526: LD_ADDR_VAR 0 10
79530: PUSH
79531: LD_VAR 0 3
79535: PUSH
79536: LD_VAR 0 4
79540: PLUS
79541: ST_TO_ADDR
// for _x = min_x to max_x do
79542: LD_ADDR_VAR 0 11
79546: PUSH
79547: DOUBLE
79548: LD_VAR 0 7
79552: DEC
79553: ST_TO_ADDR
79554: LD_VAR 0 9
79558: PUSH
79559: FOR_TO
79560: IFFALSE 79677
// for _y = min_y to max_y do
79562: LD_ADDR_VAR 0 12
79566: PUSH
79567: DOUBLE
79568: LD_VAR 0 8
79572: DEC
79573: ST_TO_ADDR
79574: LD_VAR 0 10
79578: PUSH
79579: FOR_TO
79580: IFFALSE 79673
// begin if not ValidHex ( _x , _y ) then
79582: LD_VAR 0 11
79586: PPUSH
79587: LD_VAR 0 12
79591: PPUSH
79592: CALL_OW 488
79596: NOT
79597: IFFALSE 79601
// continue ;
79599: GO 79579
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79601: LD_VAR 0 11
79605: PPUSH
79606: LD_VAR 0 12
79610: PPUSH
79611: CALL_OW 351
79615: PUSH
79616: LD_VAR 0 11
79620: PPUSH
79621: LD_VAR 0 12
79625: PPUSH
79626: CALL_OW 554
79630: AND
79631: IFFALSE 79671
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79633: LD_ADDR_VAR 0 13
79637: PUSH
79638: LD_VAR 0 13
79642: PPUSH
79643: LD_VAR 0 13
79647: PUSH
79648: LD_INT 1
79650: PLUS
79651: PPUSH
79652: LD_VAR 0 11
79656: PUSH
79657: LD_VAR 0 12
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: PPUSH
79666: CALL_OW 2
79670: ST_TO_ADDR
// end ;
79671: GO 79579
79673: POP
79674: POP
79675: GO 79559
79677: POP
79678: POP
// if not list then
79679: LD_VAR 0 13
79683: NOT
79684: IFFALSE 79688
// exit ;
79686: GO 79767
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
79688: LD_ADDR_VAR 0 13
79692: PUSH
79693: LD_VAR 0 1
79697: PPUSH
79698: LD_VAR 0 13
79702: PPUSH
79703: LD_INT 1
79705: PPUSH
79706: LD_INT 1
79708: PPUSH
79709: CALL 25704 0 4
79713: ST_TO_ADDR
// ComStop ( flame ) ;
79714: LD_VAR 0 1
79718: PPUSH
79719: CALL_OW 141
// for i in list do
79723: LD_ADDR_VAR 0 6
79727: PUSH
79728: LD_VAR 0 13
79732: PUSH
79733: FOR_IN
79734: IFFALSE 79765
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
79736: LD_VAR 0 1
79740: PPUSH
79741: LD_VAR 0 6
79745: PUSH
79746: LD_INT 1
79748: ARRAY
79749: PPUSH
79750: LD_VAR 0 6
79754: PUSH
79755: LD_INT 2
79757: ARRAY
79758: PPUSH
79759: CALL_OW 176
79763: GO 79733
79765: POP
79766: POP
// end ;
79767: LD_VAR 0 5
79771: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79772: LD_EXP 107
79776: NOT
79777: IFFALSE 79827
79779: GO 79781
79781: DISABLE
// begin initHack := true ;
79782: LD_ADDR_EXP 107
79786: PUSH
79787: LD_INT 1
79789: ST_TO_ADDR
// hackTanks := [ ] ;
79790: LD_ADDR_EXP 108
79794: PUSH
79795: EMPTY
79796: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79797: LD_ADDR_EXP 109
79801: PUSH
79802: EMPTY
79803: ST_TO_ADDR
// hackLimit := 3 ;
79804: LD_ADDR_EXP 110
79808: PUSH
79809: LD_INT 3
79811: ST_TO_ADDR
// hackDist := 12 ;
79812: LD_ADDR_EXP 111
79816: PUSH
79817: LD_INT 12
79819: ST_TO_ADDR
// hackCounter := [ ] ;
79820: LD_ADDR_EXP 112
79824: PUSH
79825: EMPTY
79826: ST_TO_ADDR
// end ;
79827: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79828: LD_EXP 107
79832: PUSH
79833: LD_INT 34
79835: PUSH
79836: LD_INT 99
79838: PUSH
79839: EMPTY
79840: LIST
79841: LIST
79842: PPUSH
79843: CALL_OW 69
79847: AND
79848: IFFALSE 80101
79850: GO 79852
79852: DISABLE
79853: LD_INT 0
79855: PPUSH
79856: PPUSH
// begin enable ;
79857: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79858: LD_ADDR_VAR 0 1
79862: PUSH
79863: LD_INT 34
79865: PUSH
79866: LD_INT 99
79868: PUSH
79869: EMPTY
79870: LIST
79871: LIST
79872: PPUSH
79873: CALL_OW 69
79877: PUSH
79878: FOR_IN
79879: IFFALSE 80099
// begin if not i in hackTanks then
79881: LD_VAR 0 1
79885: PUSH
79886: LD_EXP 108
79890: IN
79891: NOT
79892: IFFALSE 79975
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79894: LD_ADDR_EXP 108
79898: PUSH
79899: LD_EXP 108
79903: PPUSH
79904: LD_EXP 108
79908: PUSH
79909: LD_INT 1
79911: PLUS
79912: PPUSH
79913: LD_VAR 0 1
79917: PPUSH
79918: CALL_OW 1
79922: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79923: LD_ADDR_EXP 109
79927: PUSH
79928: LD_EXP 109
79932: PPUSH
79933: LD_EXP 109
79937: PUSH
79938: LD_INT 1
79940: PLUS
79941: PPUSH
79942: EMPTY
79943: PPUSH
79944: CALL_OW 1
79948: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79949: LD_ADDR_EXP 112
79953: PUSH
79954: LD_EXP 112
79958: PPUSH
79959: LD_EXP 112
79963: PUSH
79964: LD_INT 1
79966: PLUS
79967: PPUSH
79968: EMPTY
79969: PPUSH
79970: CALL_OW 1
79974: ST_TO_ADDR
// end ; if not IsOk ( i ) then
79975: LD_VAR 0 1
79979: PPUSH
79980: CALL_OW 302
79984: NOT
79985: IFFALSE 79998
// begin HackUnlinkAll ( i ) ;
79987: LD_VAR 0 1
79991: PPUSH
79992: CALL 80104 0 1
// continue ;
79996: GO 79878
// end ; HackCheckCapturedStatus ( i ) ;
79998: LD_VAR 0 1
80002: PPUSH
80003: CALL 80547 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
80007: LD_ADDR_VAR 0 2
80011: PUSH
80012: LD_INT 81
80014: PUSH
80015: LD_VAR 0 1
80019: PPUSH
80020: CALL_OW 255
80024: PUSH
80025: EMPTY
80026: LIST
80027: LIST
80028: PUSH
80029: LD_INT 33
80031: PUSH
80032: LD_INT 3
80034: PUSH
80035: EMPTY
80036: LIST
80037: LIST
80038: PUSH
80039: LD_INT 91
80041: PUSH
80042: LD_VAR 0 1
80046: PUSH
80047: LD_EXP 111
80051: PUSH
80052: EMPTY
80053: LIST
80054: LIST
80055: LIST
80056: PUSH
80057: LD_INT 50
80059: PUSH
80060: EMPTY
80061: LIST
80062: PUSH
80063: EMPTY
80064: LIST
80065: LIST
80066: LIST
80067: LIST
80068: PPUSH
80069: CALL_OW 69
80073: ST_TO_ADDR
// if not tmp then
80074: LD_VAR 0 2
80078: NOT
80079: IFFALSE 80083
// continue ;
80081: GO 79878
// HackLink ( i , tmp ) ;
80083: LD_VAR 0 1
80087: PPUSH
80088: LD_VAR 0 2
80092: PPUSH
80093: CALL 80240 0 2
// end ;
80097: GO 79878
80099: POP
80100: POP
// end ;
80101: PPOPN 2
80103: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
80104: LD_INT 0
80106: PPUSH
80107: PPUSH
80108: PPUSH
// if not hack in hackTanks then
80109: LD_VAR 0 1
80113: PUSH
80114: LD_EXP 108
80118: IN
80119: NOT
80120: IFFALSE 80124
// exit ;
80122: GO 80235
// index := GetElementIndex ( hackTanks , hack ) ;
80124: LD_ADDR_VAR 0 4
80128: PUSH
80129: LD_EXP 108
80133: PPUSH
80134: LD_VAR 0 1
80138: PPUSH
80139: CALL 25001 0 2
80143: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80144: LD_EXP 109
80148: PUSH
80149: LD_VAR 0 4
80153: ARRAY
80154: IFFALSE 80235
// begin for i in hackTanksCaptured [ index ] do
80156: LD_ADDR_VAR 0 3
80160: PUSH
80161: LD_EXP 109
80165: PUSH
80166: LD_VAR 0 4
80170: ARRAY
80171: PUSH
80172: FOR_IN
80173: IFFALSE 80199
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80175: LD_VAR 0 3
80179: PUSH
80180: LD_INT 1
80182: ARRAY
80183: PPUSH
80184: LD_VAR 0 3
80188: PUSH
80189: LD_INT 2
80191: ARRAY
80192: PPUSH
80193: CALL_OW 235
80197: GO 80172
80199: POP
80200: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80201: LD_ADDR_EXP 109
80205: PUSH
80206: LD_EXP 109
80210: PPUSH
80211: LD_VAR 0 4
80215: PPUSH
80216: EMPTY
80217: PPUSH
80218: CALL_OW 1
80222: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80223: LD_VAR 0 1
80227: PPUSH
80228: LD_INT 0
80230: PPUSH
80231: CALL_OW 505
// end ; end ;
80235: LD_VAR 0 2
80239: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80240: LD_INT 0
80242: PPUSH
80243: PPUSH
80244: PPUSH
// if not hack in hackTanks or not vehicles then
80245: LD_VAR 0 1
80249: PUSH
80250: LD_EXP 108
80254: IN
80255: NOT
80256: PUSH
80257: LD_VAR 0 2
80261: NOT
80262: OR
80263: IFFALSE 80267
// exit ;
80265: GO 80542
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80267: LD_ADDR_VAR 0 2
80271: PUSH
80272: LD_VAR 0 1
80276: PPUSH
80277: LD_VAR 0 2
80281: PPUSH
80282: LD_INT 1
80284: PPUSH
80285: LD_INT 1
80287: PPUSH
80288: CALL 25651 0 4
80292: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80293: LD_ADDR_VAR 0 5
80297: PUSH
80298: LD_EXP 108
80302: PPUSH
80303: LD_VAR 0 1
80307: PPUSH
80308: CALL 25001 0 2
80312: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80313: LD_EXP 109
80317: PUSH
80318: LD_VAR 0 5
80322: ARRAY
80323: PUSH
80324: LD_EXP 110
80328: LESS
80329: IFFALSE 80518
// begin for i := 1 to vehicles do
80331: LD_ADDR_VAR 0 4
80335: PUSH
80336: DOUBLE
80337: LD_INT 1
80339: DEC
80340: ST_TO_ADDR
80341: LD_VAR 0 2
80345: PUSH
80346: FOR_TO
80347: IFFALSE 80516
// begin if hackTanksCaptured [ index ] = hackLimit then
80349: LD_EXP 109
80353: PUSH
80354: LD_VAR 0 5
80358: ARRAY
80359: PUSH
80360: LD_EXP 110
80364: EQUAL
80365: IFFALSE 80369
// break ;
80367: GO 80516
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80369: LD_ADDR_EXP 112
80373: PUSH
80374: LD_EXP 112
80378: PPUSH
80379: LD_VAR 0 5
80383: PPUSH
80384: LD_EXP 112
80388: PUSH
80389: LD_VAR 0 5
80393: ARRAY
80394: PUSH
80395: LD_INT 1
80397: PLUS
80398: PPUSH
80399: CALL_OW 1
80403: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80404: LD_ADDR_EXP 109
80408: PUSH
80409: LD_EXP 109
80413: PPUSH
80414: LD_VAR 0 5
80418: PUSH
80419: LD_EXP 109
80423: PUSH
80424: LD_VAR 0 5
80428: ARRAY
80429: PUSH
80430: LD_INT 1
80432: PLUS
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: PPUSH
80438: LD_VAR 0 2
80442: PUSH
80443: LD_VAR 0 4
80447: ARRAY
80448: PUSH
80449: LD_VAR 0 2
80453: PUSH
80454: LD_VAR 0 4
80458: ARRAY
80459: PPUSH
80460: CALL_OW 255
80464: PUSH
80465: EMPTY
80466: LIST
80467: LIST
80468: PPUSH
80469: CALL 25216 0 3
80473: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80474: LD_VAR 0 2
80478: PUSH
80479: LD_VAR 0 4
80483: ARRAY
80484: PPUSH
80485: LD_VAR 0 1
80489: PPUSH
80490: CALL_OW 255
80494: PPUSH
80495: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80499: LD_VAR 0 2
80503: PUSH
80504: LD_VAR 0 4
80508: ARRAY
80509: PPUSH
80510: CALL_OW 141
// end ;
80514: GO 80346
80516: POP
80517: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80518: LD_VAR 0 1
80522: PPUSH
80523: LD_EXP 109
80527: PUSH
80528: LD_VAR 0 5
80532: ARRAY
80533: PUSH
80534: LD_INT 0
80536: PLUS
80537: PPUSH
80538: CALL_OW 505
// end ;
80542: LD_VAR 0 3
80546: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80547: LD_INT 0
80549: PPUSH
80550: PPUSH
80551: PPUSH
80552: PPUSH
// if not hack in hackTanks then
80553: LD_VAR 0 1
80557: PUSH
80558: LD_EXP 108
80562: IN
80563: NOT
80564: IFFALSE 80568
// exit ;
80566: GO 80808
// index := GetElementIndex ( hackTanks , hack ) ;
80568: LD_ADDR_VAR 0 4
80572: PUSH
80573: LD_EXP 108
80577: PPUSH
80578: LD_VAR 0 1
80582: PPUSH
80583: CALL 25001 0 2
80587: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80588: LD_ADDR_VAR 0 3
80592: PUSH
80593: DOUBLE
80594: LD_EXP 109
80598: PUSH
80599: LD_VAR 0 4
80603: ARRAY
80604: INC
80605: ST_TO_ADDR
80606: LD_INT 1
80608: PUSH
80609: FOR_DOWNTO
80610: IFFALSE 80782
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80612: LD_ADDR_VAR 0 5
80616: PUSH
80617: LD_EXP 109
80621: PUSH
80622: LD_VAR 0 4
80626: ARRAY
80627: PUSH
80628: LD_VAR 0 3
80632: ARRAY
80633: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80634: LD_VAR 0 5
80638: PUSH
80639: LD_INT 1
80641: ARRAY
80642: PPUSH
80643: CALL_OW 302
80647: NOT
80648: PUSH
80649: LD_VAR 0 5
80653: PUSH
80654: LD_INT 1
80656: ARRAY
80657: PPUSH
80658: CALL_OW 255
80662: PUSH
80663: LD_VAR 0 1
80667: PPUSH
80668: CALL_OW 255
80672: NONEQUAL
80673: OR
80674: IFFALSE 80780
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80676: LD_VAR 0 5
80680: PUSH
80681: LD_INT 1
80683: ARRAY
80684: PPUSH
80685: CALL_OW 305
80689: PUSH
80690: LD_VAR 0 5
80694: PUSH
80695: LD_INT 1
80697: ARRAY
80698: PPUSH
80699: CALL_OW 255
80703: PUSH
80704: LD_VAR 0 1
80708: PPUSH
80709: CALL_OW 255
80713: EQUAL
80714: AND
80715: IFFALSE 80739
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80717: LD_VAR 0 5
80721: PUSH
80722: LD_INT 1
80724: ARRAY
80725: PPUSH
80726: LD_VAR 0 5
80730: PUSH
80731: LD_INT 2
80733: ARRAY
80734: PPUSH
80735: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80739: LD_ADDR_EXP 109
80743: PUSH
80744: LD_EXP 109
80748: PPUSH
80749: LD_VAR 0 4
80753: PPUSH
80754: LD_EXP 109
80758: PUSH
80759: LD_VAR 0 4
80763: ARRAY
80764: PPUSH
80765: LD_VAR 0 3
80769: PPUSH
80770: CALL_OW 3
80774: PPUSH
80775: CALL_OW 1
80779: ST_TO_ADDR
// end ; end ;
80780: GO 80609
80782: POP
80783: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80784: LD_VAR 0 1
80788: PPUSH
80789: LD_EXP 109
80793: PUSH
80794: LD_VAR 0 4
80798: ARRAY
80799: PUSH
80800: LD_INT 0
80802: PLUS
80803: PPUSH
80804: CALL_OW 505
// end ;
80808: LD_VAR 0 2
80812: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80813: LD_INT 0
80815: PPUSH
80816: PPUSH
80817: PPUSH
80818: PPUSH
// if not hack in hackTanks then
80819: LD_VAR 0 1
80823: PUSH
80824: LD_EXP 108
80828: IN
80829: NOT
80830: IFFALSE 80834
// exit ;
80832: GO 80919
// index := GetElementIndex ( hackTanks , hack ) ;
80834: LD_ADDR_VAR 0 5
80838: PUSH
80839: LD_EXP 108
80843: PPUSH
80844: LD_VAR 0 1
80848: PPUSH
80849: CALL 25001 0 2
80853: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80854: LD_ADDR_VAR 0 4
80858: PUSH
80859: DOUBLE
80860: LD_INT 1
80862: DEC
80863: ST_TO_ADDR
80864: LD_EXP 109
80868: PUSH
80869: LD_VAR 0 5
80873: ARRAY
80874: PUSH
80875: FOR_TO
80876: IFFALSE 80917
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80878: LD_EXP 109
80882: PUSH
80883: LD_VAR 0 5
80887: ARRAY
80888: PUSH
80889: LD_VAR 0 4
80893: ARRAY
80894: PUSH
80895: LD_INT 1
80897: ARRAY
80898: PUSH
80899: LD_VAR 0 2
80903: EQUAL
80904: IFFALSE 80915
// KillUnit ( vehicle ) ;
80906: LD_VAR 0 2
80910: PPUSH
80911: CALL_OW 66
80915: GO 80875
80917: POP
80918: POP
// end ;
80919: LD_VAR 0 3
80923: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80924: LD_EXP 113
80928: NOT
80929: IFFALSE 80964
80931: GO 80933
80933: DISABLE
// begin initMiner := true ;
80934: LD_ADDR_EXP 113
80938: PUSH
80939: LD_INT 1
80941: ST_TO_ADDR
// minersList := [ ] ;
80942: LD_ADDR_EXP 114
80946: PUSH
80947: EMPTY
80948: ST_TO_ADDR
// minerMinesList := [ ] ;
80949: LD_ADDR_EXP 115
80953: PUSH
80954: EMPTY
80955: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
80956: LD_ADDR_EXP 116
80960: PUSH
80961: LD_INT 5
80963: ST_TO_ADDR
// end ;
80964: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
80965: LD_EXP 113
80969: PUSH
80970: LD_INT 34
80972: PUSH
80973: LD_INT 81
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: PPUSH
80980: CALL_OW 69
80984: AND
80985: IFFALSE 81446
80987: GO 80989
80989: DISABLE
80990: LD_INT 0
80992: PPUSH
80993: PPUSH
80994: PPUSH
80995: PPUSH
// begin enable ;
80996: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
80997: LD_ADDR_VAR 0 1
81001: PUSH
81002: LD_INT 34
81004: PUSH
81005: LD_INT 81
81007: PUSH
81008: EMPTY
81009: LIST
81010: LIST
81011: PPUSH
81012: CALL_OW 69
81016: PUSH
81017: FOR_IN
81018: IFFALSE 81090
// begin if not i in minersList then
81020: LD_VAR 0 1
81024: PUSH
81025: LD_EXP 114
81029: IN
81030: NOT
81031: IFFALSE 81088
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
81033: LD_ADDR_EXP 114
81037: PUSH
81038: LD_EXP 114
81042: PPUSH
81043: LD_EXP 114
81047: PUSH
81048: LD_INT 1
81050: PLUS
81051: PPUSH
81052: LD_VAR 0 1
81056: PPUSH
81057: CALL_OW 1
81061: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81062: LD_ADDR_EXP 115
81066: PUSH
81067: LD_EXP 115
81071: PPUSH
81072: LD_EXP 115
81076: PUSH
81077: LD_INT 1
81079: PLUS
81080: PPUSH
81081: EMPTY
81082: PPUSH
81083: CALL_OW 1
81087: ST_TO_ADDR
// end end ;
81088: GO 81017
81090: POP
81091: POP
// for i := minerMinesList downto 1 do
81092: LD_ADDR_VAR 0 1
81096: PUSH
81097: DOUBLE
81098: LD_EXP 115
81102: INC
81103: ST_TO_ADDR
81104: LD_INT 1
81106: PUSH
81107: FOR_DOWNTO
81108: IFFALSE 81444
// begin if IsLive ( minersList [ i ] ) then
81110: LD_EXP 114
81114: PUSH
81115: LD_VAR 0 1
81119: ARRAY
81120: PPUSH
81121: CALL_OW 300
81125: IFFALSE 81153
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
81127: LD_EXP 114
81131: PUSH
81132: LD_VAR 0 1
81136: ARRAY
81137: PPUSH
81138: LD_EXP 115
81142: PUSH
81143: LD_VAR 0 1
81147: ARRAY
81148: PPUSH
81149: CALL_OW 505
// if not minerMinesList [ i ] then
81153: LD_EXP 115
81157: PUSH
81158: LD_VAR 0 1
81162: ARRAY
81163: NOT
81164: IFFALSE 81168
// continue ;
81166: GO 81107
// for j := minerMinesList [ i ] downto 1 do
81168: LD_ADDR_VAR 0 2
81172: PUSH
81173: DOUBLE
81174: LD_EXP 115
81178: PUSH
81179: LD_VAR 0 1
81183: ARRAY
81184: INC
81185: ST_TO_ADDR
81186: LD_INT 1
81188: PUSH
81189: FOR_DOWNTO
81190: IFFALSE 81440
// begin side := GetSide ( minersList [ i ] ) ;
81192: LD_ADDR_VAR 0 3
81196: PUSH
81197: LD_EXP 114
81201: PUSH
81202: LD_VAR 0 1
81206: ARRAY
81207: PPUSH
81208: CALL_OW 255
81212: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81213: LD_ADDR_VAR 0 4
81217: PUSH
81218: LD_EXP 115
81222: PUSH
81223: LD_VAR 0 1
81227: ARRAY
81228: PUSH
81229: LD_VAR 0 2
81233: ARRAY
81234: PUSH
81235: LD_INT 1
81237: ARRAY
81238: PPUSH
81239: LD_EXP 115
81243: PUSH
81244: LD_VAR 0 1
81248: ARRAY
81249: PUSH
81250: LD_VAR 0 2
81254: ARRAY
81255: PUSH
81256: LD_INT 2
81258: ARRAY
81259: PPUSH
81260: CALL_OW 428
81264: ST_TO_ADDR
// if not tmp then
81265: LD_VAR 0 4
81269: NOT
81270: IFFALSE 81274
// continue ;
81272: GO 81189
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81274: LD_VAR 0 4
81278: PUSH
81279: LD_INT 81
81281: PUSH
81282: LD_VAR 0 3
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: PPUSH
81291: CALL_OW 69
81295: IN
81296: PUSH
81297: LD_EXP 115
81301: PUSH
81302: LD_VAR 0 1
81306: ARRAY
81307: PUSH
81308: LD_VAR 0 2
81312: ARRAY
81313: PUSH
81314: LD_INT 1
81316: ARRAY
81317: PPUSH
81318: LD_EXP 115
81322: PUSH
81323: LD_VAR 0 1
81327: ARRAY
81328: PUSH
81329: LD_VAR 0 2
81333: ARRAY
81334: PUSH
81335: LD_INT 2
81337: ARRAY
81338: PPUSH
81339: CALL_OW 458
81343: AND
81344: IFFALSE 81438
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81346: LD_EXP 115
81350: PUSH
81351: LD_VAR 0 1
81355: ARRAY
81356: PUSH
81357: LD_VAR 0 2
81361: ARRAY
81362: PUSH
81363: LD_INT 1
81365: ARRAY
81366: PPUSH
81367: LD_EXP 115
81371: PUSH
81372: LD_VAR 0 1
81376: ARRAY
81377: PUSH
81378: LD_VAR 0 2
81382: ARRAY
81383: PUSH
81384: LD_INT 2
81386: ARRAY
81387: PPUSH
81388: LD_VAR 0 3
81392: PPUSH
81393: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81397: LD_ADDR_EXP 115
81401: PUSH
81402: LD_EXP 115
81406: PPUSH
81407: LD_VAR 0 1
81411: PPUSH
81412: LD_EXP 115
81416: PUSH
81417: LD_VAR 0 1
81421: ARRAY
81422: PPUSH
81423: LD_VAR 0 2
81427: PPUSH
81428: CALL_OW 3
81432: PPUSH
81433: CALL_OW 1
81437: ST_TO_ADDR
// end ; end ;
81438: GO 81189
81440: POP
81441: POP
// end ;
81442: GO 81107
81444: POP
81445: POP
// end ;
81446: PPOPN 4
81448: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
81449: LD_INT 0
81451: PPUSH
81452: PPUSH
// result := false ;
81453: LD_ADDR_VAR 0 4
81457: PUSH
81458: LD_INT 0
81460: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81461: LD_VAR 0 1
81465: PPUSH
81466: CALL_OW 264
81470: PUSH
81471: LD_INT 81
81473: EQUAL
81474: NOT
81475: IFFALSE 81479
// exit ;
81477: GO 81719
// index := GetElementIndex ( minersList , unit ) ;
81479: LD_ADDR_VAR 0 5
81483: PUSH
81484: LD_EXP 114
81488: PPUSH
81489: LD_VAR 0 1
81493: PPUSH
81494: CALL 25001 0 2
81498: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81499: LD_EXP 115
81503: PUSH
81504: LD_VAR 0 5
81508: ARRAY
81509: PUSH
81510: LD_EXP 116
81514: GREATEREQUAL
81515: IFFALSE 81519
// exit ;
81517: GO 81719
// ComMoveXY ( unit , x , y ) ;
81519: LD_VAR 0 1
81523: PPUSH
81524: LD_VAR 0 2
81528: PPUSH
81529: LD_VAR 0 3
81533: PPUSH
81534: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81538: LD_INT 35
81540: PPUSH
81541: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81545: LD_VAR 0 1
81549: PPUSH
81550: LD_VAR 0 2
81554: PPUSH
81555: LD_VAR 0 3
81559: PPUSH
81560: CALL 56753 0 3
81564: NOT
81565: PUSH
81566: LD_VAR 0 1
81570: PPUSH
81571: CALL_OW 314
81575: AND
81576: IFFALSE 81580
// exit ;
81578: GO 81719
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81580: LD_VAR 0 2
81584: PPUSH
81585: LD_VAR 0 3
81589: PPUSH
81590: CALL_OW 428
81594: PUSH
81595: LD_VAR 0 1
81599: EQUAL
81600: PUSH
81601: LD_VAR 0 1
81605: PPUSH
81606: CALL_OW 314
81610: NOT
81611: AND
81612: IFFALSE 81538
// PlaySoundXY ( x , y , PlantMine ) ;
81614: LD_VAR 0 2
81618: PPUSH
81619: LD_VAR 0 3
81623: PPUSH
81624: LD_STRING PlantMine
81626: PPUSH
81627: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
81631: LD_VAR 0 2
81635: PPUSH
81636: LD_VAR 0 3
81640: PPUSH
81641: LD_VAR 0 1
81645: PPUSH
81646: CALL_OW 255
81650: PPUSH
81651: LD_INT 0
81653: PPUSH
81654: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81658: LD_ADDR_EXP 115
81662: PUSH
81663: LD_EXP 115
81667: PPUSH
81668: LD_VAR 0 5
81672: PUSH
81673: LD_EXP 115
81677: PUSH
81678: LD_VAR 0 5
81682: ARRAY
81683: PUSH
81684: LD_INT 1
81686: PLUS
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: PPUSH
81692: LD_VAR 0 2
81696: PUSH
81697: LD_VAR 0 3
81701: PUSH
81702: EMPTY
81703: LIST
81704: LIST
81705: PPUSH
81706: CALL 25216 0 3
81710: ST_TO_ADDR
// result := true ;
81711: LD_ADDR_VAR 0 4
81715: PUSH
81716: LD_INT 1
81718: ST_TO_ADDR
// end ;
81719: LD_VAR 0 4
81723: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81724: LD_INT 0
81726: PPUSH
81727: PPUSH
81728: PPUSH
// if not unit in minersList then
81729: LD_VAR 0 1
81733: PUSH
81734: LD_EXP 114
81738: IN
81739: NOT
81740: IFFALSE 81744
// exit ;
81742: GO 82136
// index := GetElementIndex ( minersList , unit ) ;
81744: LD_ADDR_VAR 0 6
81748: PUSH
81749: LD_EXP 114
81753: PPUSH
81754: LD_VAR 0 1
81758: PPUSH
81759: CALL 25001 0 2
81763: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81764: LD_ADDR_VAR 0 5
81768: PUSH
81769: DOUBLE
81770: LD_EXP 115
81774: PUSH
81775: LD_VAR 0 6
81779: ARRAY
81780: INC
81781: ST_TO_ADDR
81782: LD_INT 1
81784: PUSH
81785: FOR_DOWNTO
81786: IFFALSE 81947
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
81788: LD_EXP 115
81792: PUSH
81793: LD_VAR 0 6
81797: ARRAY
81798: PUSH
81799: LD_VAR 0 5
81803: ARRAY
81804: PUSH
81805: LD_INT 1
81807: ARRAY
81808: PUSH
81809: LD_VAR 0 2
81813: EQUAL
81814: PUSH
81815: LD_EXP 115
81819: PUSH
81820: LD_VAR 0 6
81824: ARRAY
81825: PUSH
81826: LD_VAR 0 5
81830: ARRAY
81831: PUSH
81832: LD_INT 2
81834: ARRAY
81835: PUSH
81836: LD_VAR 0 3
81840: EQUAL
81841: AND
81842: IFFALSE 81945
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81844: LD_EXP 115
81848: PUSH
81849: LD_VAR 0 6
81853: ARRAY
81854: PUSH
81855: LD_VAR 0 5
81859: ARRAY
81860: PUSH
81861: LD_INT 1
81863: ARRAY
81864: PPUSH
81865: LD_EXP 115
81869: PUSH
81870: LD_VAR 0 6
81874: ARRAY
81875: PUSH
81876: LD_VAR 0 5
81880: ARRAY
81881: PUSH
81882: LD_INT 2
81884: ARRAY
81885: PPUSH
81886: LD_VAR 0 1
81890: PPUSH
81891: CALL_OW 255
81895: PPUSH
81896: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81900: LD_ADDR_EXP 115
81904: PUSH
81905: LD_EXP 115
81909: PPUSH
81910: LD_VAR 0 6
81914: PPUSH
81915: LD_EXP 115
81919: PUSH
81920: LD_VAR 0 6
81924: ARRAY
81925: PPUSH
81926: LD_VAR 0 5
81930: PPUSH
81931: CALL_OW 3
81935: PPUSH
81936: CALL_OW 1
81940: ST_TO_ADDR
// exit ;
81941: POP
81942: POP
81943: GO 82136
// end ; end ;
81945: GO 81785
81947: POP
81948: POP
// for i := minerMinesList [ index ] downto 1 do
81949: LD_ADDR_VAR 0 5
81953: PUSH
81954: DOUBLE
81955: LD_EXP 115
81959: PUSH
81960: LD_VAR 0 6
81964: ARRAY
81965: INC
81966: ST_TO_ADDR
81967: LD_INT 1
81969: PUSH
81970: FOR_DOWNTO
81971: IFFALSE 82134
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
81973: LD_EXP 115
81977: PUSH
81978: LD_VAR 0 6
81982: ARRAY
81983: PUSH
81984: LD_VAR 0 5
81988: ARRAY
81989: PUSH
81990: LD_INT 1
81992: ARRAY
81993: PPUSH
81994: LD_EXP 115
81998: PUSH
81999: LD_VAR 0 6
82003: ARRAY
82004: PUSH
82005: LD_VAR 0 5
82009: ARRAY
82010: PUSH
82011: LD_INT 2
82013: ARRAY
82014: PPUSH
82015: LD_VAR 0 2
82019: PPUSH
82020: LD_VAR 0 3
82024: PPUSH
82025: CALL_OW 298
82029: PUSH
82030: LD_INT 6
82032: LESS
82033: IFFALSE 82132
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82035: LD_EXP 115
82039: PUSH
82040: LD_VAR 0 6
82044: ARRAY
82045: PUSH
82046: LD_VAR 0 5
82050: ARRAY
82051: PUSH
82052: LD_INT 1
82054: ARRAY
82055: PPUSH
82056: LD_EXP 115
82060: PUSH
82061: LD_VAR 0 6
82065: ARRAY
82066: PUSH
82067: LD_VAR 0 5
82071: ARRAY
82072: PUSH
82073: LD_INT 2
82075: ARRAY
82076: PPUSH
82077: LD_VAR 0 1
82081: PPUSH
82082: CALL_OW 255
82086: PPUSH
82087: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82091: LD_ADDR_EXP 115
82095: PUSH
82096: LD_EXP 115
82100: PPUSH
82101: LD_VAR 0 6
82105: PPUSH
82106: LD_EXP 115
82110: PUSH
82111: LD_VAR 0 6
82115: ARRAY
82116: PPUSH
82117: LD_VAR 0 5
82121: PPUSH
82122: CALL_OW 3
82126: PPUSH
82127: CALL_OW 1
82131: ST_TO_ADDR
// end ; end ;
82132: GO 81970
82134: POP
82135: POP
// end ;
82136: LD_VAR 0 4
82140: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82141: LD_INT 0
82143: PPUSH
82144: PPUSH
82145: PPUSH
82146: PPUSH
82147: PPUSH
82148: PPUSH
82149: PPUSH
82150: PPUSH
82151: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82152: LD_VAR 0 1
82156: PPUSH
82157: CALL_OW 264
82161: PUSH
82162: LD_INT 81
82164: EQUAL
82165: NOT
82166: PUSH
82167: LD_VAR 0 1
82171: PUSH
82172: LD_EXP 114
82176: IN
82177: NOT
82178: OR
82179: IFFALSE 82183
// exit ;
82181: GO 82505
// index := GetElementIndex ( minersList , unit ) ;
82183: LD_ADDR_VAR 0 6
82187: PUSH
82188: LD_EXP 114
82192: PPUSH
82193: LD_VAR 0 1
82197: PPUSH
82198: CALL 25001 0 2
82202: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82203: LD_ADDR_VAR 0 8
82207: PUSH
82208: LD_EXP 116
82212: PUSH
82213: LD_EXP 115
82217: PUSH
82218: LD_VAR 0 6
82222: ARRAY
82223: MINUS
82224: ST_TO_ADDR
// if not minesFreeAmount then
82225: LD_VAR 0 8
82229: NOT
82230: IFFALSE 82234
// exit ;
82232: GO 82505
// tmp := [ ] ;
82234: LD_ADDR_VAR 0 7
82238: PUSH
82239: EMPTY
82240: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82241: LD_ADDR_VAR 0 5
82245: PUSH
82246: DOUBLE
82247: LD_INT 1
82249: DEC
82250: ST_TO_ADDR
82251: LD_VAR 0 8
82255: PUSH
82256: FOR_TO
82257: IFFALSE 82452
// begin _d := rand ( 0 , 5 ) ;
82259: LD_ADDR_VAR 0 11
82263: PUSH
82264: LD_INT 0
82266: PPUSH
82267: LD_INT 5
82269: PPUSH
82270: CALL_OW 12
82274: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82275: LD_ADDR_VAR 0 12
82279: PUSH
82280: LD_INT 2
82282: PPUSH
82283: LD_INT 6
82285: PPUSH
82286: CALL_OW 12
82290: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82291: LD_ADDR_VAR 0 9
82295: PUSH
82296: LD_VAR 0 2
82300: PPUSH
82301: LD_VAR 0 11
82305: PPUSH
82306: LD_VAR 0 12
82310: PPUSH
82311: CALL_OW 272
82315: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82316: LD_ADDR_VAR 0 10
82320: PUSH
82321: LD_VAR 0 3
82325: PPUSH
82326: LD_VAR 0 11
82330: PPUSH
82331: LD_VAR 0 12
82335: PPUSH
82336: CALL_OW 273
82340: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82341: LD_VAR 0 9
82345: PPUSH
82346: LD_VAR 0 10
82350: PPUSH
82351: CALL_OW 488
82355: PUSH
82356: LD_VAR 0 9
82360: PUSH
82361: LD_VAR 0 10
82365: PUSH
82366: EMPTY
82367: LIST
82368: LIST
82369: PUSH
82370: LD_VAR 0 7
82374: IN
82375: NOT
82376: AND
82377: PUSH
82378: LD_VAR 0 9
82382: PPUSH
82383: LD_VAR 0 10
82387: PPUSH
82388: CALL_OW 458
82392: NOT
82393: AND
82394: IFFALSE 82436
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82396: LD_ADDR_VAR 0 7
82400: PUSH
82401: LD_VAR 0 7
82405: PPUSH
82406: LD_VAR 0 7
82410: PUSH
82411: LD_INT 1
82413: PLUS
82414: PPUSH
82415: LD_VAR 0 9
82419: PUSH
82420: LD_VAR 0 10
82424: PUSH
82425: EMPTY
82426: LIST
82427: LIST
82428: PPUSH
82429: CALL_OW 1
82433: ST_TO_ADDR
82434: GO 82450
// i := i - 1 ;
82436: LD_ADDR_VAR 0 5
82440: PUSH
82441: LD_VAR 0 5
82445: PUSH
82446: LD_INT 1
82448: MINUS
82449: ST_TO_ADDR
// end ;
82450: GO 82256
82452: POP
82453: POP
// for i in tmp do
82454: LD_ADDR_VAR 0 5
82458: PUSH
82459: LD_VAR 0 7
82463: PUSH
82464: FOR_IN
82465: IFFALSE 82503
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82467: LD_VAR 0 1
82471: PPUSH
82472: LD_VAR 0 5
82476: PUSH
82477: LD_INT 1
82479: ARRAY
82480: PPUSH
82481: LD_VAR 0 5
82485: PUSH
82486: LD_INT 2
82488: ARRAY
82489: PPUSH
82490: CALL 81449 0 3
82494: NOT
82495: IFFALSE 82501
// exit ;
82497: POP
82498: POP
82499: GO 82505
82501: GO 82464
82503: POP
82504: POP
// end ;
82505: LD_VAR 0 4
82509: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
82510: LD_INT 0
82512: PPUSH
82513: PPUSH
82514: PPUSH
82515: PPUSH
82516: PPUSH
82517: PPUSH
82518: PPUSH
// if not GetClass ( unit ) = class_sniper then
82519: LD_VAR 0 1
82523: PPUSH
82524: CALL_OW 257
82528: PUSH
82529: LD_INT 5
82531: EQUAL
82532: NOT
82533: IFFALSE 82537
// exit ;
82535: GO 82925
// dist := 8 ;
82537: LD_ADDR_VAR 0 5
82541: PUSH
82542: LD_INT 8
82544: ST_TO_ADDR
// viewRange := 12 ;
82545: LD_ADDR_VAR 0 7
82549: PUSH
82550: LD_INT 12
82552: ST_TO_ADDR
// side := GetSide ( unit ) ;
82553: LD_ADDR_VAR 0 6
82557: PUSH
82558: LD_VAR 0 1
82562: PPUSH
82563: CALL_OW 255
82567: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82568: LD_INT 61
82570: PPUSH
82571: LD_VAR 0 6
82575: PPUSH
82576: CALL_OW 321
82580: PUSH
82581: LD_INT 2
82583: EQUAL
82584: IFFALSE 82594
// viewRange := 16 ;
82586: LD_ADDR_VAR 0 7
82590: PUSH
82591: LD_INT 16
82593: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82594: LD_VAR 0 1
82598: PPUSH
82599: LD_VAR 0 2
82603: PPUSH
82604: LD_VAR 0 3
82608: PPUSH
82609: CALL_OW 297
82613: PUSH
82614: LD_VAR 0 5
82618: GREATER
82619: IFFALSE 82698
// begin ComMoveXY ( unit , x , y ) ;
82621: LD_VAR 0 1
82625: PPUSH
82626: LD_VAR 0 2
82630: PPUSH
82631: LD_VAR 0 3
82635: PPUSH
82636: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82640: LD_INT 35
82642: PPUSH
82643: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82647: LD_VAR 0 1
82651: PPUSH
82652: LD_VAR 0 2
82656: PPUSH
82657: LD_VAR 0 3
82661: PPUSH
82662: CALL 56753 0 3
82666: NOT
82667: IFFALSE 82671
// exit ;
82669: GO 82925
// until GetDistUnitXY ( unit , x , y ) < dist ;
82671: LD_VAR 0 1
82675: PPUSH
82676: LD_VAR 0 2
82680: PPUSH
82681: LD_VAR 0 3
82685: PPUSH
82686: CALL_OW 297
82690: PUSH
82691: LD_VAR 0 5
82695: LESS
82696: IFFALSE 82640
// end ; ComTurnXY ( unit , x , y ) ;
82698: LD_VAR 0 1
82702: PPUSH
82703: LD_VAR 0 2
82707: PPUSH
82708: LD_VAR 0 3
82712: PPUSH
82713: CALL_OW 118
// wait ( 5 ) ;
82717: LD_INT 5
82719: PPUSH
82720: CALL_OW 67
// _d := GetDir ( unit ) ;
82724: LD_ADDR_VAR 0 10
82728: PUSH
82729: LD_VAR 0 1
82733: PPUSH
82734: CALL_OW 254
82738: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
82739: LD_ADDR_VAR 0 8
82743: PUSH
82744: LD_VAR 0 1
82748: PPUSH
82749: CALL_OW 250
82753: PPUSH
82754: LD_VAR 0 10
82758: PPUSH
82759: LD_VAR 0 5
82763: PPUSH
82764: CALL_OW 272
82768: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
82769: LD_ADDR_VAR 0 9
82773: PUSH
82774: LD_VAR 0 1
82778: PPUSH
82779: CALL_OW 251
82783: PPUSH
82784: LD_VAR 0 10
82788: PPUSH
82789: LD_VAR 0 5
82793: PPUSH
82794: CALL_OW 273
82798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82799: LD_VAR 0 8
82803: PPUSH
82804: LD_VAR 0 9
82808: PPUSH
82809: CALL_OW 488
82813: NOT
82814: IFFALSE 82818
// exit ;
82816: GO 82925
// ComAnimCustom ( unit , 1 ) ;
82818: LD_VAR 0 1
82822: PPUSH
82823: LD_INT 1
82825: PPUSH
82826: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82830: LD_VAR 0 8
82834: PPUSH
82835: LD_VAR 0 9
82839: PPUSH
82840: LD_VAR 0 6
82844: PPUSH
82845: LD_VAR 0 7
82849: PPUSH
82850: CALL_OW 330
// repeat wait ( 1 ) ;
82854: LD_INT 1
82856: PPUSH
82857: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
82861: LD_VAR 0 1
82865: PPUSH
82866: CALL_OW 316
82870: PUSH
82871: LD_VAR 0 1
82875: PPUSH
82876: CALL_OW 314
82880: OR
82881: PUSH
82882: LD_VAR 0 1
82886: PPUSH
82887: CALL_OW 302
82891: NOT
82892: OR
82893: PUSH
82894: LD_VAR 0 1
82898: PPUSH
82899: CALL_OW 301
82903: OR
82904: IFFALSE 82854
// RemoveSeeing ( _x , _y , side ) ;
82906: LD_VAR 0 8
82910: PPUSH
82911: LD_VAR 0 9
82915: PPUSH
82916: LD_VAR 0 6
82920: PPUSH
82921: CALL_OW 331
// end ;
82925: LD_VAR 0 4
82929: RET
