// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// CreateNature ;
   8: CALL 11045 0 0
// PrepareArabian ;
  12: CALL 226 0 0
// PrepareAmerican ;
  16: CALL 661 0 0
// PrepareLegion ;
  20: CALL 5701 0 0
// Action ;
  24: CALL 11649 0 0
// end ;
  28: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// prefix := 09_ ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// amScriptActive := true ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 1
  55: ST_TO_ADDR
// legScriptActive := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 16
  71: PUSH
  72: LD_INT 14
  74: PUSH
  75: LD_INT 12
  77: PUSH
  78: LD_INT 10
  80: PUSH
  81: EMPTY
  82: LIST
  83: LIST
  84: LIST
  85: LIST
  86: PUSH
  87: LD_OWVAR 67
  91: ARRAY
  92: ST_TO_ADDR
// spotAmericanBase := false ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// spotArabianBase := false ;
 101: LD_ADDR_EXP 7
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// spotLegion := false ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// spotByAmerican := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// spotByLegion := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// americanDestroyed := false ;
 133: LD_ADDR_EXP 11
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// legionDestroyed := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// hasMastodont := false ;
 149: LD_ADDR_EXP 13
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// hasVehicles := false ;
 157: LD_ADDR_EXP 14
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// hasTigers := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// hasApes := false ;
 173: LD_ADDR_EXP 16
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// hasDrugs := false ;
 181: LD_ADDR_EXP 17
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// canFinish := false ;
 189: LD_ADDR_EXP 18
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// gameActive := false ;
 197: LD_ADDR_EXP 19
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// omarCanChangeClass := false ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// tigerCounter := 0 ;
 213: LD_ADDR_EXP 21
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// end ; end_of_file
 221: LD_VAR 0 1
 225: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
// uc_side := 2 ;
 232: LD_ADDR_OWVAR 20
 236: PUSH
 237: LD_INT 2
 239: ST_TO_ADDR
// uc_nation := nation_arabian ;
 240: LD_ADDR_OWVAR 21
 244: PUSH
 245: LD_INT 2
 247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 248: LD_ADDR_EXP 22
 252: PUSH
 253: LD_STRING Heike
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_EXP 2
 266: PPUSH
 267: CALL 20444 0 3
 271: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 272: LD_INT 14
 274: PPUSH
 275: LD_INT 3
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 27
 283: PPUSH
 284: LD_INT 100
 286: PPUSH
 287: CALL 25284 0 5
// heikeVehicle := CreateVehicle ;
 291: LD_ADDR_EXP 24
 295: PUSH
 296: CALL_OW 45
 300: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 301: LD_EXP 24
 305: PPUSH
 306: LD_INT 4
 308: PPUSH
 309: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 313: LD_EXP 24
 317: PPUSH
 318: LD_INT 118
 320: PPUSH
 321: LD_INT 37
 323: PPUSH
 324: LD_INT 0
 326: PPUSH
 327: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 331: LD_EXP 22
 335: PPUSH
 336: LD_INT 1
 338: PPUSH
 339: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 343: LD_EXP 22
 347: PPUSH
 348: LD_EXP 24
 352: PPUSH
 353: CALL_OW 52
// uc_side := 5 ;
 357: LD_ADDR_OWVAR 20
 361: PUSH
 362: LD_INT 5
 364: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 365: LD_ADDR_EXP 23
 369: PUSH
 370: LD_STRING Omar
 372: PPUSH
 373: CALL_OW 25
 377: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 378: LD_INT 14
 380: PPUSH
 381: LD_INT 3
 383: PPUSH
 384: LD_INT 1
 386: PPUSH
 387: LD_INT 27
 389: PPUSH
 390: LD_INT 100
 392: PPUSH
 393: CALL 25284 0 5
// omarVehicle := CreateVehicle ;
 397: LD_ADDR_EXP 25
 401: PUSH
 402: CALL_OW 45
 406: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 407: LD_EXP 25
 411: PPUSH
 412: LD_INT 0
 414: PPUSH
 415: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 419: LD_ADDR_VAR 0 2
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 5
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 3
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 478
// SetLives ( i , rand ( 300 , 499 ) ) ;
 456: LD_VAR 0 2
 460: PPUSH
 461: LD_INT 300
 463: PPUSH
 464: LD_INT 499
 466: PPUSH
 467: CALL_OW 12
 471: PPUSH
 472: CALL_OW 234
 476: GO 453
 478: POP
 479: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 480: LD_INT 85
 482: PPUSH
 483: CALL_OW 274
 487: PPUSH
 488: LD_INT 1
 490: PPUSH
 491: LD_INT 200
 493: PUSH
 494: LD_INT 20
 496: PUSH
 497: LD_OWVAR 67
 501: MUL
 502: MINUS
 503: PPUSH
 504: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 508: LD_INT 85
 510: PPUSH
 511: CALL_OW 274
 515: PPUSH
 516: LD_INT 2
 518: PPUSH
 519: LD_INT 20
 521: PPUSH
 522: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 526: LD_INT 14
 528: PPUSH
 529: LD_INT 3
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: LD_INT 32
 537: PPUSH
 538: LD_INT 100
 540: PPUSH
 541: CALL 25284 0 5
// veh := CreateVehicle ;
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: CALL_OW 45
 554: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 555: LD_VAR 0 4
 559: PPUSH
 560: LD_INT 4
 562: PPUSH
 563: CALL_OW 233
// SetLives ( veh , 420 ) ;
 567: LD_VAR 0 4
 571: PPUSH
 572: LD_INT 420
 574: PPUSH
 575: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 579: LD_VAR 0 4
 583: PPUSH
 584: LD_INT 193
 586: PPUSH
 587: LD_INT 133
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 597: LD_INT 14
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: LD_INT 1
 605: PPUSH
 606: LD_INT 26
 608: PPUSH
 609: LD_INT 11
 611: PPUSH
 612: CALL 25284 0 5
// veh := CreateVehicle ;
 616: LD_ADDR_VAR 0 4
 620: PUSH
 621: CALL_OW 45
 625: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 626: LD_VAR 0 4
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 638: LD_VAR 0 4
 642: PPUSH
 643: LD_INT 261
 645: PPUSH
 646: LD_INT 115
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 48
// end ; end_of_file
 656: LD_VAR 0 1
 660: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 661: LD_INT 0
 663: PPUSH
 664: PPUSH
 665: PPUSH
 666: PPUSH
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// uc_side := 1 ;
 671: LD_ADDR_OWVAR 20
 675: PUSH
 676: LD_INT 1
 678: ST_TO_ADDR
// uc_nation := nation_american ;
 679: LD_ADDR_OWVAR 21
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// amForces := [ ] ;
 687: LD_ADDR_EXP 26
 691: PUSH
 692: EMPTY
 693: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 694: LD_ADDR_EXP 27
 698: PUSH
 699: LD_INT 1
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 20507 0 3
 712: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 713: LD_ADDR_EXP 28
 717: PUSH
 718: LD_INT 2
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: LD_INT 12
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 13
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 758: LD_ADDR_EXP 29
 762: PUSH
 763: LD_INT 94
 765: PUSH
 766: LD_INT 132
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// amBuildings := [ ] ;
 773: LD_ADDR_EXP 30
 777: PUSH
 778: EMPTY
 779: ST_TO_ADDR
// amTanks := [ ] ;
 780: LD_ADDR_EXP 31
 784: PUSH
 785: EMPTY
 786: ST_TO_ADDR
// amCargo := 0 ;
 787: LD_ADDR_EXP 33
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// amPatrol := [ ] ;
 795: LD_ADDR_EXP 34
 799: PUSH
 800: EMPTY
 801: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 802: LD_ADDR_VAR 0 7
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: LD_INT 121
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 98
 819: PUSH
 820: LD_INT 145
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// for i in sources do
 831: LD_ADDR_VAR 0 2
 835: PUSH
 836: LD_VAR 0 7
 840: PUSH
 841: FOR_IN
 842: IFFALSE 871
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 441
 869: GO 841
 871: POP
 872: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 274
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 550
 886: PPUSH
 887: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 891: LD_INT 2
 893: PPUSH
 894: CALL_OW 274
 898: PPUSH
 899: LD_INT 2
 901: PPUSH
 902: LD_INT 120
 904: PPUSH
 905: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 909: LD_INT 2
 911: PPUSH
 912: CALL_OW 274
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 30
 922: PPUSH
 923: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 927: LD_ADDR_VAR 0 6
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 7
 937: PUSH
 938: LD_INT 8
 940: PUSH
 941: LD_INT 9
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_OWVAR 67
 954: ARRAY
 955: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 956: LD_ADDR_EXP 32
 960: PUSH
 961: LD_STRING Brown
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: LD_STRING 
 969: PPUSH
 970: CALL 20444 0 3
 974: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 975: LD_EXP 32
 979: PPUSH
 980: LD_INT 2
 982: PPUSH
 983: CALL_OW 52
// for i := 1 to 4 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 4
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1525
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1003: LD_ADDR_VAR 0 3
1007: PUSH
1008: DOUBLE
1009: LD_INT 1
1011: DEC
1012: ST_TO_ADDR
1013: LD_INT 6
1015: PUSH
1016: LD_INT 7
1018: PUSH
1019: LD_INT 8
1021: PUSH
1022: LD_INT 9
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_OWVAR 67
1035: ARRAY
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 4
1042: PUSH
1043: LD_INT 5
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_OWVAR 67
1059: ARRAY
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 6
1069: PUSH
1070: LD_INT 7
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_OWVAR 67
1083: ARRAY
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 3
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: LD_INT 3
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: PUSH
1103: LD_OWVAR 67
1107: ARRAY
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PUSH
1121: FOR_TO
1122: IFFALSE 1521
// begin PrepareHuman ( false , i , skill ) ;
1124: LD_INT 0
1126: PPUSH
1127: LD_VAR 0 2
1131: PPUSH
1132: LD_VAR 0 6
1136: PPUSH
1137: CALL_OW 380
// un := CreateHuman ;
1141: LD_ADDR_VAR 0 5
1145: PUSH
1146: CALL_OW 44
1150: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1151: LD_ADDR_EXP 26
1155: PUSH
1156: LD_EXP 26
1160: PPUSH
1161: LD_VAR 0 5
1165: PPUSH
1166: CALL 58146 0 2
1170: ST_TO_ADDR
// case i of 1 :
1171: LD_VAR 0 2
1175: PUSH
1176: LD_INT 1
1178: DOUBLE
1179: EQUAL
1180: IFTRUE 1184
1182: GO 1253
1184: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1185: LD_ADDR_VAR 0 4
1189: PUSH
1190: LD_INT 22
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 2
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 32
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 30
1215: PUSH
1216: LD_INT 5
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: LIST
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: LD_INT 62
1233: PUSH
1234: EMPTY
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PPUSH
1246: CALL_OW 69
1250: ST_TO_ADDR
1251: GO 1432
1253: LD_INT 2
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1290
1261: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_INT 2
1269: PPUSH
1270: LD_INT 3
1272: PUSH
1273: LD_INT 62
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PPUSH
1283: CALL_OW 72
1287: ST_TO_ADDR
1288: GO 1432
1290: LD_INT 3
1292: DOUBLE
1293: EQUAL
1294: IFTRUE 1298
1296: GO 1372
1298: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: LD_INT 22
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 2
1316: PUSH
1317: LD_INT 30
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 30
1329: PUSH
1330: LD_INT 36
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 3
1344: PUSH
1345: LD_INT 62
1347: PUSH
1348: EMPTY
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 69
1364: PPUSH
1365: CALL 53422 0 1
1369: ST_TO_ADDR
1370: GO 1432
1372: LD_INT 4
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1431
1380: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 30
1398: PUSH
1399: LD_INT 8
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: LD_INT 3
1408: PUSH
1409: LD_INT 62
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
1429: GO 1432
1431: POP
// if b then
1432: LD_VAR 0 4
1436: IFFALSE 1498
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1438: LD_VAR 0 4
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PPUSH
1447: CALL_OW 266
1451: PUSH
1452: LD_INT 5
1454: EQUAL
1455: PUSH
1456: LD_INT 60
1458: PPUSH
1459: CALL_OW 13
1463: AND
1464: IFFALSE 1478
// SetClass ( un , class_sniper ) ;
1466: LD_VAR 0 5
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_VAR 0 4
1487: PUSH
1488: LD_INT 1
1490: ARRAY
1491: PPUSH
1492: CALL_OW 52
// end else
1496: GO 1519
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1498: LD_VAR 0 5
1502: PPUSH
1503: LD_INT 92
1505: PPUSH
1506: LD_INT 137
1508: PPUSH
1509: LD_INT 4
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 50
// end ;
1519: GO 1121
1521: POP
1522: POP
1523: GO 1000
1525: POP
1526: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1527: LD_ADDR_VAR 0 8
1531: PUSH
1532: LD_INT 30
1534: PUSH
1535: LD_INT 32
1537: PUSH
1538: LD_INT 36
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1546: LD_ADDR_VAR 0 2
1550: PUSH
1551: DOUBLE
1552: LD_INT 1
1554: DEC
1555: ST_TO_ADDR
1556: LD_VAR 0 8
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1731
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1564: LD_ADDR_VAR 0 3
1568: PUSH
1569: DOUBLE
1570: LD_INT 1
1572: DEC
1573: ST_TO_ADDR
1574: LD_INT 1
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PUSH
1598: FOR_TO
1599: IFFALSE 1727
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1601: LD_INT 0
1603: PPUSH
1604: LD_INT 7
1606: PUSH
1607: LD_INT 8
1609: PUSH
1610: LD_INT 9
1612: PUSH
1613: LD_INT 10
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: LD_OWVAR 67
1626: ARRAY
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 5
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// if j mod 2 = 0 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 2
1649: MOD
1650: PUSH
1651: LD_INT 0
1653: EQUAL
1654: IFFALSE 1668
// SetClass ( un , class_sniper ) ;
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_INT 5
1663: PPUSH
1664: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1668: LD_ADDR_EXP 34
1672: PUSH
1673: LD_EXP 34
1677: PPUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL 58146 0 2
1687: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1688: LD_VAR 0 5
1692: PPUSH
1693: LD_VAR 0 8
1697: PUSH
1698: LD_VAR 0 2
1702: ARRAY
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 49
// SetTag ( un , i ) ;
1711: LD_VAR 0 5
1715: PPUSH
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 109
// end ;
1725: GO 1598
1727: POP
1728: POP
// end ;
1729: GO 1561
1731: POP
1732: POP
// end ;
1733: LD_VAR 0 1
1737: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1738: LD_EXP 3
1742: PUSH
1743: LD_EXP 26
1747: PPUSH
1748: CALL 22546 0 1
1752: AND
1753: IFFALSE 4121
1755: GO 1757
1757: DISABLE
1758: LD_INT 0
1760: PPUSH
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
1765: PPUSH
1766: PPUSH
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
// begin enable ;
1778: ENABLE
// side := 1 ;
1779: LD_ADDR_VAR 0 5
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: LD_INT 22
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 33
1806: PUSH
1807: LD_INT 2
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 50
1816: PUSH
1817: EMPTY
1818: LIST
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 61
1825: PUSH
1826: EMPTY
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_VAR 0 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 50
1863: PUSH
1864: EMPTY
1865: LIST
1866: PUSH
1867: LD_INT 30
1869: PUSH
1870: LD_INT 36
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: CALL 22546 0 1
1891: AND
1892: IFFALSE 1920
// for i in remote do
1894: LD_ADDR_VAR 0 1
1898: PUSH
1899: LD_VAR 0 3
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1918
// Connect ( i ) ;
1907: LD_VAR 0 1
1911: PPUSH
1912: CALL 28752 0 1
1916: GO 1904
1918: POP
1919: POP
// if amTech then
1920: LD_EXP 27
1924: IFFALSE 2080
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1926: LD_ADDR_VAR 0 6
1930: PUSH
1931: LD_INT 22
1933: PUSH
1934: LD_VAR 0 5
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 50
1945: PUSH
1946: EMPTY
1947: LIST
1948: PUSH
1949: LD_INT 2
1951: PUSH
1952: LD_INT 30
1954: PUSH
1955: LD_INT 6
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 30
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 30
1974: PUSH
1975: LD_INT 8
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PPUSH
1993: CALL_OW 69
1997: ST_TO_ADDR
// if lab then
1998: LD_VAR 0 6
2002: IFFALSE 2080
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2004: LD_VAR 0 6
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: CALL_OW 461
2017: PUSH
2018: LD_INT 2
2020: EQUAL
2021: IFFALSE 2080
// begin for i in amTech do
2023: LD_ADDR_VAR 0 1
2027: PUSH
2028: LD_EXP 27
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2078
// if CanBeResearched ( lab [ 1 ] , i ) then
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PPUSH
2045: LD_VAR 0 1
2049: PPUSH
2050: CALL_OW 430
2054: IFFALSE 2076
// begin ComResearch ( lab [ 1 ] , i ) ;
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: LD_VAR 0 1
2069: PPUSH
2070: CALL_OW 124
// break ;
2074: GO 2078
// end ;
2076: GO 2033
2078: POP
2079: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2080: LD_ADDR_VAR 0 16
2084: PUSH
2085: LD_INT 1
2087: PPUSH
2088: LD_INT 22
2090: PUSH
2091: LD_VAR 0 5
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 3
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 50
2112: PUSH
2113: EMPTY
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 70
2125: ST_TO_ADDR
// if fac then
2126: LD_VAR 0 16
2130: IFFALSE 2396
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2132: LD_VAR 0 16
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: CALL_OW 461
2145: PUSH
2146: LD_INT 2
2148: EQUAL
2149: IFFALSE 2396
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2151: LD_ADDR_VAR 0 17
2155: PUSH
2156: LD_INT 1
2158: PPUSH
2159: LD_INT 2
2161: PUSH
2162: LD_INT 30
2164: PUSH
2165: LD_INT 32
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 30
2174: PUSH
2175: LD_INT 33
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 35
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PPUSH
2201: CALL_OW 70
2205: ST_TO_ADDR
// if emptyTowers then
2206: LD_VAR 0 17
2210: IFFALSE 2258
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2212: LD_ADDR_VAR 0 18
2216: PUSH
2217: LD_VAR 0 17
2221: PUSH
2222: LD_INT 1
2224: ARRAY
2225: PPUSH
2226: LD_INT 1
2228: PPUSH
2229: CALL 30791 0 2
2233: ST_TO_ADDR
// if weapon then
2234: LD_VAR 0 18
2238: IFFALSE 2258
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2240: LD_VAR 0 17
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PPUSH
2249: LD_VAR 0 18
2253: PPUSH
2254: CALL_OW 148
// end ; if amConstructList then
2258: LD_EXP 28
2262: IFFALSE 2396
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2264: LD_VAR 0 16
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PPUSH
2273: LD_EXP 28
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: LD_EXP 28
2290: PUSH
2291: LD_INT 1
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: LD_EXP 28
2303: PUSH
2304: LD_INT 1
2306: ARRAY
2307: PUSH
2308: LD_INT 3
2310: ARRAY
2311: PPUSH
2312: LD_EXP 28
2316: PUSH
2317: LD_INT 1
2319: ARRAY
2320: PUSH
2321: LD_INT 4
2323: ARRAY
2324: PPUSH
2325: CALL_OW 448
2329: IFFALSE 2396
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2331: LD_VAR 0 16
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_EXP 28
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 28
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PUSH
2362: LD_INT 2
2364: ARRAY
2365: PPUSH
2366: LD_EXP 28
2370: PUSH
2371: LD_INT 1
2373: ARRAY
2374: PUSH
2375: LD_INT 3
2377: ARRAY
2378: PPUSH
2379: LD_EXP 28
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PUSH
2388: LD_INT 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: LD_INT 1
2403: PPUSH
2404: LD_INT 21
2406: PUSH
2407: LD_INT 3
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 1000
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2454: LD_ADDR_VAR 0 10
2458: PUSH
2459: LD_INT 13
2461: PPUSH
2462: CALL_OW 435
2466: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2467: LD_ADDR_VAR 0 11
2471: PUSH
2472: LD_EXP 26
2476: PPUSH
2477: LD_INT 25
2479: PUSH
2480: LD_INT 4
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 50
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL_OW 72
2501: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2502: LD_ADDR_VAR 0 6
2506: PUSH
2507: LD_INT 1
2509: PPUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 70
2553: ST_TO_ADDR
// if sci then
2554: LD_VAR 0 11
2558: IFFALSE 2717
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2560: LD_ADDR_VAR 0 13
2564: PUSH
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 95
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 120
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PPUSH
2594: CALL_OW 72
2598: ST_TO_ADDR
// if hurtUnits then
2599: LD_VAR 0 13
2603: IFFALSE 2664
// begin for i in sci do
2605: LD_ADDR_VAR 0 1
2609: PUSH
2610: LD_VAR 0 11
2614: PUSH
2615: FOR_IN
2616: IFFALSE 2660
// if IsInUnit ( i ) then
2618: LD_VAR 0 1
2622: PPUSH
2623: CALL_OW 310
2627: IFFALSE 2640
// ComExitBuilding ( i ) else
2629: LD_VAR 0 1
2633: PPUSH
2634: CALL_OW 122
2638: GO 2658
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_VAR 0 13
2649: PUSH
2650: LD_INT 1
2652: ARRAY
2653: PPUSH
2654: CALL_OW 128
2658: GO 2615
2660: POP
2661: POP
// end else
2662: GO 2717
// if lab then
2664: LD_VAR 0 6
2668: IFFALSE 2717
// begin for i in sci do
2670: LD_ADDR_VAR 0 1
2674: PUSH
2675: LD_VAR 0 11
2679: PUSH
2680: FOR_IN
2681: IFFALSE 2715
// if not IsInUnit ( i ) then
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 310
2692: NOT
2693: IFFALSE 2713
// ComEnterUnit ( i , lab [ 1 ] ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 6
2704: PUSH
2705: LD_INT 1
2707: ARRAY
2708: PPUSH
2709: CALL_OW 120
2713: GO 2680
2715: POP
2716: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: LD_EXP 26
2726: PPUSH
2727: LD_INT 25
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 72
2741: ST_TO_ADDR
// if eng then
2742: LD_VAR 0 7
2746: IFFALSE 3521
// begin for i in eng do
2748: LD_ADDR_VAR 0 1
2752: PUSH
2753: LD_VAR 0 7
2757: PUSH
2758: FOR_IN
2759: IFFALSE 3519
// begin tag := GetTag ( i ) ;
2761: LD_ADDR_VAR 0 8
2765: PUSH
2766: LD_VAR 0 1
2770: PPUSH
2771: CALL_OW 110
2775: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2776: LD_VAR 0 1
2780: PPUSH
2781: CALL_OW 256
2785: PUSH
2786: LD_INT 800
2788: LESS
2789: PUSH
2790: LD_VAR 0 8
2794: PUSH
2795: LD_INT 1
2797: NONEQUAL
2798: AND
2799: IFFALSE 2849
// begin SetTag ( i , tHeal ) ;
2801: LD_VAR 0 1
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2813: LD_VAR 0 1
2817: PPUSH
2818: LD_EXP 29
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_EXP 29
2831: PUSH
2832: LD_INT 2
2834: ARRAY
2835: PPUSH
2836: CALL_OW 111
// AddComHold ( i ) ;
2840: LD_VAR 0 1
2844: PPUSH
2845: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2849: LD_VAR 0 8
2853: PUSH
2854: LD_INT 1
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 256
2867: PUSH
2868: LD_INT 1000
2870: EQUAL
2871: AND
2872: IFFALSE 2886
// SetTag ( i , 0 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 109
// if not tag then
2886: LD_VAR 0 8
2890: NOT
2891: IFFALSE 3059
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2893: LD_ADDR_VAR 0 4
2897: PUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 57
2903: PUSH
2904: EMPTY
2905: LIST
2906: PPUSH
2907: CALL_OW 70
2911: ST_TO_ADDR
// if undone then
2912: LD_VAR 0 4
2916: IFFALSE 2938
// begin ComComplete ( i , undone [ 1 ] ) ;
2918: LD_VAR 0 1
2922: PPUSH
2923: LD_VAR 0 4
2927: PUSH
2928: LD_INT 1
2930: ARRAY
2931: PPUSH
2932: CALL 28644 0 2
// continue ;
2936: GO 2758
// end ; if cr or tmp or Count ( amBuildings ) then
2938: LD_VAR 0 10
2942: PUSH
2943: LD_VAR 0 2
2947: OR
2948: PUSH
2949: LD_EXP 30
2953: PPUSH
2954: CALL 22546 0 1
2958: OR
2959: IFFALSE 3035
// begin if IsInUnit ( i ) then
2961: LD_VAR 0 1
2965: PPUSH
2966: CALL_OW 310
2970: IFFALSE 2981
// ComExitBuilding ( i ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: CALL_OW 122
// if tmp then
2981: LD_VAR 0 2
2985: IFFALSE 3001
// SetTag ( i , tRepair ) else
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL_OW 109
2999: GO 3033
// if cr then
3001: LD_VAR 0 10
3005: IFFALSE 3021
// SetTag ( i , tCrates ) else
3007: LD_VAR 0 1
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: CALL_OW 109
3019: GO 3033
// SetTag ( i , tBuild ) ;
3021: LD_VAR 0 1
3025: PPUSH
3026: LD_INT 5
3028: PPUSH
3029: CALL_OW 109
// end else
3033: GO 3059
// if not IsInUnit ( i ) then
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 310
3044: NOT
3045: IFFALSE 3059
// ComEnterUnit ( i , amBase ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 120
// end ; if tag = tRepair then
3059: LD_VAR 0 8
3063: PUSH
3064: LD_INT 3
3066: EQUAL
3067: IFFALSE 3169
// begin if IsInUnit ( i ) then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 310
3078: IFFALSE 3091
// begin ComExitBuilding ( i ) ;
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 122
// continue ;
3089: GO 2758
// end ; if not tmp then
3091: LD_VAR 0 2
3095: NOT
3096: IFFALSE 3112
// begin SetTag ( i , 0 ) ;
3098: LD_VAR 0 1
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: CALL_OW 109
// continue ;
3110: GO 2758
// end ; if not HasTask ( i ) then
3112: LD_VAR 0 1
3116: PPUSH
3117: CALL_OW 314
3121: NOT
3122: IFFALSE 3142
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 2
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 308
3154: NOT
3155: IFFALSE 3169
// ComMoveToArea ( i , amBaseArea ) ;
3157: LD_VAR 0 1
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 113
// end ; if tag = tBuild then
3169: LD_VAR 0 8
3173: PUSH
3174: LD_INT 5
3176: EQUAL
3177: IFFALSE 3372
// begin if IsInUnit ( i ) then
3179: LD_VAR 0 1
3183: PPUSH
3184: CALL_OW 310
3188: IFFALSE 3201
// begin ComExitBuilding ( i ) ;
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 122
// continue ;
3199: GO 2758
// end ; if not Count ( amBuildings ) then
3201: LD_EXP 30
3205: PPUSH
3206: CALL 22546 0 1
3210: NOT
3211: IFFALSE 3229
// begin SetTag ( i , 0 ) ;
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 109
// continue ;
3225: GO 2758
// end else
3227: GO 3266
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3229: LD_INT 2
3231: PPUSH
3232: LD_EXP 30
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: PPUSH
3245: CALL 10899 0 2
3249: NOT
3250: IFFALSE 3266
// begin SetTag ( i , 0 ) ;
3252: LD_VAR 0 1
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 109
// continue ;
3264: GO 2758
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3266: LD_ADDR_VAR 0 4
3270: PUSH
3271: LD_INT 1
3273: PPUSH
3274: LD_INT 57
3276: PUSH
3277: EMPTY
3278: LIST
3279: PPUSH
3280: CALL_OW 70
3284: ST_TO_ADDR
// if undone then
3285: LD_VAR 0 4
3289: IFFALSE 3311
// begin ComComplete ( i , undone [ 1 ] ) ;
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_VAR 0 4
3300: PUSH
3301: LD_INT 1
3303: ARRAY
3304: PPUSH
3305: CALL 28644 0 2
// continue ;
3309: GO 2758
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3311: LD_VAR 0 1
3315: PPUSH
3316: LD_EXP 30
3320: PUSH
3321: LD_INT 1
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_EXP 30
3333: PUSH
3334: LD_INT 1
3336: ARRAY
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: LD_EXP 30
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PUSH
3351: LD_INT 3
3353: ARRAY
3354: PPUSH
3355: LD_EXP 30
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: PUSH
3364: LD_INT 4
3366: ARRAY
3367: PPUSH
3368: CALL_OW 145
// end ; if tag = tCrates then
3372: LD_VAR 0 8
3376: PUSH
3377: LD_INT 2
3379: EQUAL
3380: IFFALSE 3517
// begin if IsInUnit ( i ) then
3382: LD_VAR 0 1
3386: PPUSH
3387: CALL_OW 310
3391: IFFALSE 3404
// begin ComExitBuilding ( i ) ;
3393: LD_VAR 0 1
3397: PPUSH
3398: CALL_OW 122
// continue ;
3402: GO 2758
// end ; if not cr then
3404: LD_VAR 0 10
3408: NOT
3409: IFFALSE 3425
// begin SetTag ( i , 0 ) ;
3411: LD_VAR 0 1
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 109
// continue ;
3423: GO 2758
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3425: LD_VAR 0 1
3429: PPUSH
3430: CALL_OW 314
3434: NOT
3435: PUSH
3436: LD_INT 81
3438: PUSH
3439: LD_VAR 0 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 92
3450: PUSH
3451: LD_VAR 0 10
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: PUSH
3460: LD_VAR 0 10
3464: PUSH
3465: LD_INT 2
3467: ARRAY
3468: PUSH
3469: LD_INT 12
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PPUSH
3482: CALL_OW 69
3486: NOT
3487: AND
3488: IFFALSE 3517
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3490: LD_VAR 0 1
3494: PPUSH
3495: LD_VAR 0 10
3499: PUSH
3500: LD_INT 1
3502: ARRAY
3503: PPUSH
3504: LD_VAR 0 10
3508: PUSH
3509: LD_INT 2
3511: ARRAY
3512: PPUSH
3513: CALL_OW 117
// end ; end ;
3517: GO 2758
3519: POP
3520: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3521: LD_ADDR_VAR 0 12
3525: PUSH
3526: LD_EXP 26
3530: PPUSH
3531: LD_INT 2
3533: PUSH
3534: LD_INT 25
3536: PUSH
3537: LD_INT 1
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 25
3546: PUSH
3547: LD_INT 5
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 50
3561: PUSH
3562: EMPTY
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 72
3573: PUSH
3574: LD_EXP 32
3578: UNION
3579: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3580: LD_ADDR_VAR 0 14
3584: PUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_INT 81
3590: PUSH
3591: LD_VAR 0 5
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 70
3604: ST_TO_ADDR
// if sol then
3605: LD_VAR 0 12
3609: IFFALSE 4121
// begin if enemyInBase then
3611: LD_VAR 0 14
3615: IFFALSE 3760
// begin for i in sol do
3617: LD_ADDR_VAR 0 1
3621: PUSH
3622: LD_VAR 0 12
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3756
// begin tw := IsInUnit ( i ) ;
3630: LD_ADDR_VAR 0 9
3634: PUSH
3635: LD_VAR 0 1
3639: PPUSH
3640: CALL_OW 310
3644: ST_TO_ADDR
// if tw then
3645: LD_VAR 0 9
3649: IFFALSE 3730
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3651: LD_VAR 0 9
3655: PUSH
3656: LD_INT 22
3658: PUSH
3659: LD_VAR 0 5
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 101
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: LD_INT 30
3683: PUSH
3684: LD_INT 32
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 30
3693: PUSH
3694: LD_INT 31
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 69
3715: IN
3716: NOT
3717: IFFALSE 3728
// ComExitBuilding ( i ) ;
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 122
// end else
3728: GO 3754
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3730: LD_VAR 0 1
3734: PPUSH
3735: LD_VAR 0 14
3739: PPUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 74
3749: PPUSH
3750: CALL_OW 115
// end ;
3754: GO 3627
3756: POP
3757: POP
// end else
3758: GO 4121
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3760: LD_ADDR_VAR 0 15
3764: PUSH
3765: LD_INT 1
3767: PPUSH
3768: LD_INT 3
3770: PUSH
3771: LD_INT 62
3773: PUSH
3774: EMPTY
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 32
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 30
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 30
3806: PUSH
3807: LD_INT 5
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 30
3816: PUSH
3817: LD_INT 31
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PPUSH
3835: CALL_OW 70
3839: ST_TO_ADDR
// if empty then
3840: LD_VAR 0 15
3844: IFFALSE 3861
// empty := ReverseArray ( empty ) ;
3846: LD_ADDR_VAR 0 15
3850: PUSH
3851: LD_VAR 0 15
3855: PPUSH
3856: CALL 53422 0 1
3860: ST_TO_ADDR
// for i in sol do
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_VAR 0 12
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4119
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 8
3878: PUSH
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 256
3898: PUSH
3899: LD_INT 1000
3901: LESS
3902: PUSH
3903: LD_VAR 0 8
3907: PUSH
3908: LD_INT 1
3910: NONEQUAL
3911: AND
3912: IFFALSE 3964
// begin SetTag ( i , tHeal ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 1
3921: PPUSH
3922: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3926: LD_VAR 0 1
3930: PPUSH
3931: LD_EXP 29
3935: PUSH
3936: LD_INT 1
3938: ARRAY
3939: PPUSH
3940: LD_EXP 29
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// continue ;
3962: GO 3871
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 256
3973: PUSH
3974: LD_INT 1000
3976: EQUAL
3977: PUSH
3978: LD_VAR 0 8
3982: PUSH
3983: LD_INT 1
3985: EQUAL
3986: AND
3987: IFFALSE 4003
// begin SetTag ( i , 0 ) ;
3989: LD_VAR 0 1
3993: PPUSH
3994: LD_INT 0
3996: PPUSH
3997: CALL_OW 109
// continue ;
4001: GO 3871
// end ; if HasTask ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 314
4012: IFFALSE 4016
// continue ;
4014: GO 3871
// if not IsInUnit ( i ) and not tag and empty then
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 310
4025: NOT
4026: PUSH
4027: LD_VAR 0 8
4031: NOT
4032: AND
4033: PUSH
4034: LD_VAR 0 15
4038: AND
4039: IFFALSE 4117
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 15
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4059: LD_VAR 0 15
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: PPUSH
4068: CALL_OW 266
4072: PUSH
4073: LD_INT 5
4075: EQUAL
4076: PUSH
4077: LD_INT 50
4079: PPUSH
4080: CALL_OW 13
4084: AND
4085: IFFALSE 4099
// AddComChangeProfession ( i , class_sniper ) ;
4087: LD_VAR 0 1
4091: PPUSH
4092: LD_INT 5
4094: PPUSH
4095: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4099: LD_ADDR_VAR 0 15
4103: PUSH
4104: LD_VAR 0 15
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 3
4116: ST_TO_ADDR
// end ; end ;
4117: GO 3871
4119: POP
4120: POP
// end ; end ; end ;
4121: PPOPN 18
4123: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4124: LD_EXP 33
4128: PPUSH
4129: CALL_OW 302
4133: PUSH
4134: LD_EXP 3
4138: AND
4139: IFFALSE 4421
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin enable ;
4148: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 81
4159: PUSH
4160: LD_INT 1
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 50
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 70
4181: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4182: LD_ADDR_VAR 0 1
4186: PUSH
4187: LD_INT 17
4189: PPUSH
4190: CALL_OW 435
4194: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4195: LD_EXP 33
4199: PPUSH
4200: CALL_OW 261
4204: PUSH
4205: LD_INT 10
4207: LESS
4208: PUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 33
4216: PPUSH
4217: CALL_OW 292
4221: NOT
4222: AND
4223: PUSH
4224: LD_EXP 33
4228: PPUSH
4229: CALL_OW 262
4233: PUSH
4234: LD_INT 1
4236: EQUAL
4237: AND
4238: IFFALSE 4252
// SetFuel ( amCargo , 100 ) ;
4240: LD_EXP 33
4244: PPUSH
4245: LD_INT 100
4247: PPUSH
4248: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4252: LD_EXP 33
4256: PPUSH
4257: CALL_OW 314
4261: NOT
4262: PUSH
4263: LD_EXP 33
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 289
4275: PUSH
4276: LD_INT 100
4278: LESS
4279: AND
4280: PUSH
4281: LD_VAR 0 2
4285: NOT
4286: AND
4287: IFFALSE 4353
// begin if cr then
4289: LD_VAR 0 1
4293: IFFALSE 4324
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4295: LD_EXP 33
4299: PPUSH
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: LD_VAR 0 1
4313: PUSH
4314: LD_INT 2
4316: ARRAY
4317: PPUSH
4318: CALL_OW 117
4322: GO 4351
// if not IsInArea ( amCargo , cratesWestArea ) then
4324: LD_EXP 33
4328: PPUSH
4329: LD_INT 17
4331: PPUSH
4332: CALL_OW 308
4336: NOT
4337: IFFALSE 4351
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4339: LD_EXP 33
4343: PPUSH
4344: LD_INT 17
4346: PPUSH
4347: CALL_OW 113
// exit ;
4351: GO 4421
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4353: LD_VAR 0 2
4357: PUSH
4358: LD_EXP 33
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 308
4370: NOT
4371: AND
4372: IFFALSE 4391
// ComMoveXY ( amCargo , 93 , 137 ) else
4374: LD_EXP 33
4378: PPUSH
4379: LD_INT 93
4381: PPUSH
4382: LD_INT 137
4384: PPUSH
4385: CALL_OW 111
4389: GO 4421
// if GetCargo ( amCargo , mat_cans ) = 100 then
4391: LD_EXP 33
4395: PPUSH
4396: LD_INT 1
4398: PPUSH
4399: CALL_OW 289
4403: PUSH
4404: LD_INT 100
4406: EQUAL
4407: IFFALSE 4421
// ComGive ( amCargo , amBase ) ;
4409: LD_EXP 33
4413: PPUSH
4414: LD_INT 2
4416: PPUSH
4417: CALL_OW 161
// end ;
4421: PPOPN 2
4423: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4424: LD_EXP 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 3
4441: PUSH
4442: LD_INT 60
4444: PUSH
4445: EMPTY
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 50
4454: PUSH
4455: EMPTY
4456: LIST
4457: PUSH
4458: LD_INT 34
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: PPUSH
4474: CALL_OW 69
4478: AND
4479: PUSH
4480: LD_INT 22
4482: PUSH
4483: LD_INT 1
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 3
4492: PUSH
4493: LD_INT 24
4495: PUSH
4496: LD_INT 1000
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: LD_INT 3
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: AND
4527: IFFALSE 4760
4529: GO 4531
4531: DISABLE
4532: LD_INT 0
4534: PPUSH
4535: PPUSH
4536: PPUSH
// begin enable ;
4537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 3
4555: PUSH
4556: LD_INT 24
4558: PUSH
4559: LD_INT 1000
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 69
4589: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_INT 1
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 3
4607: PUSH
4608: LD_INT 24
4610: PUSH
4611: LD_INT 600
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4642: LD_ADDR_VAR 0 1
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 60
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 50
4672: PUSH
4673: EMPTY
4674: LIST
4675: PUSH
4676: LD_INT 34
4678: PUSH
4679: LD_INT 13
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 69
4696: PUSH
4697: FOR_IN
4698: IFFALSE 4758
// begin if tmp2 then
4700: LD_VAR 0 3
4704: IFFALSE 4732
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4706: LD_VAR 0 1
4710: PPUSH
4711: LD_VAR 0 3
4715: PPUSH
4716: LD_VAR 0 1
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 130
4730: GO 4756
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4732: LD_VAR 0 1
4736: PPUSH
4737: LD_VAR 0 2
4741: PPUSH
4742: LD_VAR 0 1
4746: PPUSH
4747: CALL_OW 74
4751: PPUSH
4752: CALL_OW 130
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: PPOPN 3
4762: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4763: LD_EXP 34
4767: PUSH
4768: LD_EXP 19
4772: AND
4773: PUSH
4774: LD_EXP 11
4778: NOT
4779: AND
4780: IFFALSE 5105
4782: GO 4784
4784: DISABLE
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
4791: PPUSH
4792: PPUSH
4793: PPUSH
// begin enable ;
4794: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_INT 30
4802: PUSH
4803: LD_INT 31
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 32
4812: PUSH
4813: LD_INT 33
4815: PUSH
4816: LD_INT 34
4818: PUSH
4819: LD_INT 35
4821: PUSH
4822: LD_INT 33
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 36
4834: PUSH
4835: LD_INT 37
4837: PUSH
4838: LD_INT 38
4840: PUSH
4841: LD_INT 39
4843: PUSH
4844: LD_INT 40
4846: PUSH
4847: LD_INT 41
4849: PUSH
4850: LD_INT 42
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
// for i in amPatrol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_EXP 34
4880: PUSH
4881: FOR_IN
4882: IFFALSE 5103
// begin if See ( 2 , i ) then
4884: LD_INT 2
4886: PPUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 292
4896: IFFALSE 4999
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4898: LD_ADDR_VAR 0 7
4902: PUSH
4903: LD_INT 22
4905: PUSH
4906: LD_INT 2
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PPUSH
4913: CALL_OW 69
4917: PPUSH
4918: LD_VAR 0 1
4922: PPUSH
4923: CALL_OW 74
4927: ST_TO_ADDR
// if enemy then
4928: LD_VAR 0 7
4932: IFFALSE 4999
// begin x := GetX ( enemy ) ;
4934: LD_ADDR_VAR 0 4
4938: PUSH
4939: LD_VAR 0 7
4943: PPUSH
4944: CALL_OW 250
4948: ST_TO_ADDR
// y := GetY ( enemy ) ;
4949: LD_ADDR_VAR 0 5
4953: PUSH
4954: LD_VAR 0 7
4958: PPUSH
4959: CALL_OW 251
4963: ST_TO_ADDR
// if ValidHex ( x , y ) then
4964: LD_VAR 0 4
4968: PPUSH
4969: LD_VAR 0 5
4973: PPUSH
4974: CALL_OW 488
4978: IFFALSE 4999
// ComAgressiveMove ( i , x , y ) ;
4980: LD_VAR 0 1
4984: PPUSH
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_VAR 0 5
4994: PPUSH
4995: CALL_OW 114
// end ; end ; if HasTask ( i ) then
4999: LD_VAR 0 1
5003: PPUSH
5004: CALL_OW 314
5008: IFFALSE 5012
// continue ;
5010: GO 4881
// tag := GetTag ( i ) ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_VAR 0 1
5021: PPUSH
5022: CALL_OW 110
5026: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5027: LD_ADDR_VAR 0 2
5031: PUSH
5032: DOUBLE
5033: LD_INT 1
5035: DEC
5036: ST_TO_ADDR
5037: LD_VAR 0 3
5041: PUSH
5042: LD_VAR 0 6
5046: ARRAY
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5099
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 6
5065: ARRAY
5066: PUSH
5067: LD_VAR 0 2
5071: ARRAY
5072: PPUSH
5073: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_INT 175
5084: PPUSH
5085: LD_INT 385
5087: PPUSH
5088: CALL_OW 12
5092: PPUSH
5093: CALL_OW 202
// end ;
5097: GO 5048
5099: POP
5100: POP
// end ;
5101: GO 4881
5103: POP
5104: POP
// end ;
5105: PPOPN 7
5107: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5108: LD_EXP 31
5112: PPUSH
5113: CALL 22546 0 1
5117: PUSH
5118: LD_INT 5
5120: LESS
5121: PUSH
5122: LD_EXP 3
5126: AND
5127: PUSH
5128: LD_EXP 8
5132: AND
5133: PUSH
5134: LD_EXP 7
5138: AND
5139: IFFALSE 5333
5141: GO 5143
5143: DISABLE
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
// begin enable ;
5149: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5150: LD_ADDR_VAR 0 2
5154: PUSH
5155: LD_INT 3
5157: PUSH
5158: LD_INT 9
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 4
5167: PUSH
5168: LD_INT 9
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 4
5177: PUSH
5178: LD_INT 6
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 3
5187: PUSH
5188: LD_INT 5
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 2
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 1
5207: PUSH
5208: LD_INT 2
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
5223: LD_ADDR_VAR 0 1
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 3
5235: PUSH
5236: LD_INT 4
5238: PUSH
5239: LD_INT 5
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5331
// begin part := parts [ rand ( 1 , parts ) ] ;
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_VAR 0 2
5269: PUSH
5270: LD_INT 1
5272: PPUSH
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 12
5282: ARRAY
5283: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5284: LD_ADDR_EXP 28
5288: PUSH
5289: LD_EXP 28
5293: PPUSH
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: PUSH
5303: LD_INT 1
5305: PUSH
5306: LD_INT 2
5308: PUSH
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 2
5316: ARRAY
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: CALL 58146 0 2
5328: ST_TO_ADDR
5329: GO 5257
5331: POP
5332: POP
// end ;
5333: PPOPN 3
5335: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5336: LD_EXP 11
5340: NOT
5341: PUSH
5342: LD_EXP 31
5346: PPUSH
5347: CALL 22546 0 1
5351: AND
5352: PUSH
5353: LD_EXP 8
5357: AND
5358: PUSH
5359: LD_EXP 7
5363: AND
5364: IFFALSE 5698
5366: GO 5368
5368: DISABLE
5369: LD_INT 0
5371: PPUSH
5372: PPUSH
5373: PPUSH
// begin enable ;
5374: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5375: LD_ADDR_VAR 0 2
5379: PUSH
5380: LD_EXP 31
5384: PPUSH
5385: LD_INT 61
5387: PUSH
5388: EMPTY
5389: LIST
5390: PUSH
5391: LD_INT 50
5393: PUSH
5394: EMPTY
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 72
5405: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5406: LD_ADDR_EXP 31
5410: PUSH
5411: LD_EXP 31
5415: PUSH
5416: LD_VAR 0 2
5420: DIFF
5421: ST_TO_ADDR
// if not tmp then
5422: LD_VAR 0 2
5426: NOT
5427: IFFALSE 5431
// exit ;
5429: GO 5698
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5431: LD_ADDR_VAR 0 3
5435: PUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_INT 34
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PPUSH
5451: CALL_OW 72
5455: ST_TO_ADDR
// if tmp2 then
5456: LD_VAR 0 3
5460: IFFALSE 5478
// tmp := tmp diff tmp2 ;
5462: LD_ADDR_VAR 0 2
5466: PUSH
5467: LD_VAR 0 2
5471: PUSH
5472: LD_VAR 0 3
5476: DIFF
5477: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5478: LD_INT 35
5480: PPUSH
5481: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5485: LD_ADDR_VAR 0 2
5489: PUSH
5490: LD_VAR 0 2
5494: PPUSH
5495: LD_INT 50
5497: PUSH
5498: EMPTY
5499: LIST
5500: PPUSH
5501: CALL_OW 72
5505: ST_TO_ADDR
// for i in tmp do
5506: LD_ADDR_VAR 0 1
5510: PUSH
5511: LD_VAR 0 2
5515: PUSH
5516: FOR_IN
5517: IFFALSE 5565
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5519: LD_VAR 0 1
5523: PPUSH
5524: LD_INT 187
5526: PUSH
5527: LD_INT 114
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: LD_INT 203
5536: PUSH
5537: LD_INT 113
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: LD_INT 218
5546: PUSH
5547: LD_INT 108
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL 60750 0 2
5563: GO 5516
5565: POP
5566: POP
// tmp2 := UnitFilter ( tmp2 , [ f_ok ] ) ;
5567: LD_ADDR_VAR 0 3
5571: PUSH
5572: LD_VAR 0 3
5576: PPUSH
5577: LD_INT 50
5579: PUSH
5580: EMPTY
5581: LIST
5582: PPUSH
5583: CALL_OW 72
5587: ST_TO_ADDR
// for i in tmp2 do
5588: LD_ADDR_VAR 0 1
5592: PUSH
5593: LD_VAR 0 3
5597: PUSH
5598: FOR_IN
5599: IFFALSE 5689
// if GetDistUnitXY ( i , 242 , 105 ) > 12 then
5601: LD_VAR 0 1
5605: PPUSH
5606: LD_INT 242
5608: PPUSH
5609: LD_INT 105
5611: PPUSH
5612: CALL_OW 297
5616: PUSH
5617: LD_INT 12
5619: GREATER
5620: IFFALSE 5639
// ComMoveXY ( i , 242 , 105 ) else
5622: LD_VAR 0 1
5626: PPUSH
5627: LD_INT 242
5629: PPUSH
5630: LD_INT 105
5632: PPUSH
5633: CALL_OW 111
5637: GO 5687
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_type , unit_human ] ] ) , i ) ) ;
5639: LD_VAR 0 1
5643: PPUSH
5644: LD_INT 81
5646: PUSH
5647: LD_INT 1
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 21
5656: PUSH
5657: LD_INT 1
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: PPUSH
5668: CALL_OW 69
5672: PPUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 74
5682: PPUSH
5683: CALL_OW 115
5687: GO 5598
5689: POP
5690: POP
// until not tmp ;
5691: LD_VAR 0 2
5695: NOT
5696: IFFALSE 5478
// end ; end_of_file
5698: PPOPN 3
5700: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5701: LD_INT 0
5703: PPUSH
5704: PPUSH
5705: PPUSH
5706: PPUSH
5707: PPUSH
5708: PPUSH
5709: PPUSH
// uc_side := 8 ;
5710: LD_ADDR_OWVAR 20
5714: PUSH
5715: LD_INT 8
5717: ST_TO_ADDR
// uc_nation := nation_arabian ;
5718: LD_ADDR_OWVAR 21
5722: PUSH
5723: LD_INT 2
5725: ST_TO_ADDR
// legForces := [ ] ;
5726: LD_ADDR_EXP 36
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// legEForces := [ ] ;
5733: LD_ADDR_EXP 37
5737: PUSH
5738: EMPTY
5739: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5740: LD_ADDR_EXP 38
5744: PUSH
5745: LD_INT 8
5747: PPUSH
5748: LD_INT 2
5750: PPUSH
5751: LD_INT 1
5753: PPUSH
5754: CALL 20507 0 3
5758: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5759: LD_ADDR_EXP 39
5763: PUSH
5764: LD_INT 13
5766: PUSH
5767: LD_INT 1
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: LD_INT 32
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5785: LD_ADDR_EXP 40
5789: PUSH
5790: LD_INT 195
5792: PUSH
5793: LD_INT 15
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: ST_TO_ADDR
// legBuildings := [ ] ;
5800: LD_ADDR_EXP 41
5804: PUSH
5805: EMPTY
5806: ST_TO_ADDR
// legTanks := [ ] ;
5807: LD_ADDR_EXP 42
5811: PUSH
5812: EMPTY
5813: ST_TO_ADDR
// legRTanks := [ ] ;
5814: LD_ADDR_EXP 43
5818: PUSH
5819: EMPTY
5820: ST_TO_ADDR
// legCargo := 0 ;
5821: LD_ADDR_EXP 44
5825: PUSH
5826: LD_INT 0
5828: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5829: LD_ADDR_VAR 0 7
5833: PUSH
5834: LD_INT 219
5836: PUSH
5837: LD_INT 31
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 166
5846: PUSH
5847: LD_INT 31
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: ST_TO_ADDR
// for i in sources do
5858: LD_ADDR_VAR 0 2
5862: PUSH
5863: LD_VAR 0 7
5867: PUSH
5868: FOR_IN
5869: IFFALSE 5898
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 8 ) ;
5871: LD_VAR 0 2
5875: PUSH
5876: LD_INT 1
5878: ARRAY
5879: PPUSH
5880: LD_VAR 0 2
5884: PUSH
5885: LD_INT 2
5887: ARRAY
5888: PPUSH
5889: LD_INT 8
5891: PPUSH
5892: CALL_OW 441
5896: GO 5868
5898: POP
5899: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
5900: LD_INT 38
5902: PPUSH
5903: CALL_OW 274
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_INT 650
5913: PPUSH
5914: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
5918: LD_INT 38
5920: PPUSH
5921: CALL_OW 274
5925: PPUSH
5926: LD_INT 2
5928: PPUSH
5929: LD_INT 120
5931: PPUSH
5932: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
5936: LD_INT 38
5938: PPUSH
5939: CALL_OW 274
5943: PPUSH
5944: LD_INT 3
5946: PPUSH
5947: LD_INT 50
5949: PPUSH
5950: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5954: LD_ADDR_VAR 0 6
5958: PUSH
5959: LD_INT 6
5961: PUSH
5962: LD_INT 7
5964: PUSH
5965: LD_INT 8
5967: PUSH
5968: LD_INT 9
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: PUSH
5977: LD_OWVAR 67
5981: ARRAY
5982: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
5983: LD_ADDR_EXP 35
5987: PUSH
5988: LD_STRING Farmer
5990: PPUSH
5991: LD_INT 0
5993: PPUSH
5994: LD_STRING 
5996: PPUSH
5997: CALL 20444 0 3
6001: ST_TO_ADDR
// for i := 1 to 4 do
6002: LD_ADDR_VAR 0 2
6006: PUSH
6007: DOUBLE
6008: LD_INT 1
6010: DEC
6011: ST_TO_ADDR
6012: LD_INT 4
6014: PUSH
6015: FOR_TO
6016: IFFALSE 6533
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
6018: LD_ADDR_VAR 0 3
6022: PUSH
6023: DOUBLE
6024: LD_INT 1
6026: DEC
6027: ST_TO_ADDR
6028: LD_INT 7
6030: PUSH
6031: LD_INT 8
6033: PUSH
6034: LD_INT 9
6036: PUSH
6037: LD_INT 11
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: LD_OWVAR 67
6050: ARRAY
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 4
6057: PUSH
6058: LD_INT 5
6060: PUSH
6061: LD_INT 5
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: PUSH
6070: LD_OWVAR 67
6074: ARRAY
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: LD_INT 2
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: LD_INT 3
6087: PUSH
6088: LD_INT 3
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: LD_OWVAR 67
6101: ARRAY
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: LD_VAR 0 2
6113: ARRAY
6114: PUSH
6115: FOR_TO
6116: IFFALSE 6529
// begin PrepareHuman ( false , i , skill ) ;
6118: LD_INT 0
6120: PPUSH
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_VAR 0 6
6130: PPUSH
6131: CALL_OW 380
// un := CreateHuman ;
6135: LD_ADDR_VAR 0 5
6139: PUSH
6140: CALL_OW 44
6144: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6145: LD_ADDR_EXP 36
6149: PUSH
6150: LD_EXP 36
6154: PPUSH
6155: LD_VAR 0 5
6159: PPUSH
6160: CALL 58146 0 2
6164: ST_TO_ADDR
// case i of 1 :
6165: LD_VAR 0 2
6169: PUSH
6170: LD_INT 1
6172: DOUBLE
6173: EQUAL
6174: IFTRUE 6178
6176: GO 6247
6178: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6179: LD_ADDR_VAR 0 4
6183: PUSH
6184: LD_INT 22
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 2
6196: PUSH
6197: LD_INT 30
6199: PUSH
6200: LD_INT 32
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 30
6209: PUSH
6210: LD_INT 5
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 62
6227: PUSH
6228: EMPTY
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: ST_TO_ADDR
6245: GO 6426
6247: LD_INT 2
6249: DOUBLE
6250: EQUAL
6251: IFTRUE 6255
6253: GO 6284
6255: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6256: LD_ADDR_VAR 0 4
6260: PUSH
6261: LD_INT 38
6263: PPUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 62
6269: PUSH
6270: EMPTY
6271: LIST
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PPUSH
6277: CALL_OW 72
6281: ST_TO_ADDR
6282: GO 6426
6284: LD_INT 3
6286: DOUBLE
6287: EQUAL
6288: IFTRUE 6292
6290: GO 6366
6292: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6293: LD_ADDR_VAR 0 4
6297: PUSH
6298: LD_INT 22
6300: PUSH
6301: LD_INT 8
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: LD_INT 30
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 30
6323: PUSH
6324: LD_INT 36
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 62
6341: PUSH
6342: EMPTY
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 69
6358: PPUSH
6359: CALL 53422 0 1
6363: ST_TO_ADDR
6364: GO 6426
6366: LD_INT 4
6368: DOUBLE
6369: EQUAL
6370: IFTRUE 6374
6372: GO 6425
6374: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6375: LD_ADDR_VAR 0 4
6379: PUSH
6380: LD_INT 22
6382: PUSH
6383: LD_INT 8
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 30
6392: PUSH
6393: LD_INT 8
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 62
6405: PUSH
6406: EMPTY
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 69
6422: ST_TO_ADDR
6423: GO 6426
6425: POP
// if b then
6426: LD_VAR 0 4
6430: IFFALSE 6506
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6432: LD_VAR 0 4
6436: PUSH
6437: LD_INT 1
6439: ARRAY
6440: PPUSH
6441: CALL_OW 266
6445: PUSH
6446: LD_INT 5
6448: EQUAL
6449: IFFALSE 6486
// if Prob ( 50 ) then
6451: LD_INT 50
6453: PPUSH
6454: CALL_OW 13
6458: IFFALSE 6474
// SetClass ( un , class_mortar ) else
6460: LD_VAR 0 5
6464: PPUSH
6465: LD_INT 8
6467: PPUSH
6468: CALL_OW 336
6472: GO 6486
// SetClass ( un , class_sniper ) ;
6474: LD_VAR 0 5
6478: PPUSH
6479: LD_INT 5
6481: PPUSH
6482: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6486: LD_VAR 0 5
6490: PPUSH
6491: LD_VAR 0 4
6495: PUSH
6496: LD_INT 1
6498: ARRAY
6499: PPUSH
6500: CALL_OW 52
// end else
6504: GO 6527
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6506: LD_VAR 0 5
6510: PPUSH
6511: LD_INT 188
6513: PPUSH
6514: LD_INT 21
6516: PPUSH
6517: LD_INT 4
6519: PPUSH
6520: LD_INT 0
6522: PPUSH
6523: CALL_OW 50
// end ;
6527: GO 6115
6529: POP
6530: POP
6531: GO 6015
6533: POP
6534: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6535: LD_ADDR_VAR 0 4
6539: PUSH
6540: LD_INT 22
6542: PUSH
6543: LD_INT 8
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: LD_INT 30
6555: PUSH
6556: LD_INT 32
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 30
6565: PUSH
6566: LD_INT 5
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 3
6580: PUSH
6581: LD_INT 62
6583: PUSH
6584: EMPTY
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PPUSH
6596: CALL_OW 69
6600: ST_TO_ADDR
// if b then
6601: LD_VAR 0 4
6605: IFFALSE 6672
// begin for i in b do
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_VAR 0 4
6616: PUSH
6617: FOR_IN
6618: IFFALSE 6670
// begin PrepareApemanSoldier ( ) ;
6620: CALL 54256 0 0
// un := CreateHuman ;
6624: LD_ADDR_VAR 0 5
6628: PUSH
6629: CALL_OW 44
6633: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6634: LD_ADDR_EXP 36
6638: PUSH
6639: LD_EXP 36
6643: PPUSH
6644: LD_VAR 0 5
6648: PPUSH
6649: CALL 58146 0 2
6653: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6654: LD_VAR 0 5
6658: PPUSH
6659: LD_VAR 0 2
6663: PPUSH
6664: CALL_OW 52
// end ;
6668: GO 6617
6670: POP
6671: POP
// end ; for i := 1 to 2 do
6672: LD_ADDR_VAR 0 2
6676: PUSH
6677: DOUBLE
6678: LD_INT 1
6680: DEC
6681: ST_TO_ADDR
6682: LD_INT 2
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6813
// begin uc_nation := nation_arabian ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 2
6695: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6696: LD_INT 13
6698: PPUSH
6699: LD_INT 2
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: LD_INT 31
6707: PPUSH
6708: LD_INT 100
6710: PPUSH
6711: CALL 25284 0 5
// un := CreateVehicle ;
6715: LD_ADDR_VAR 0 5
6719: PUSH
6720: CALL_OW 45
6724: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6725: LD_VAR 0 5
6729: PPUSH
6730: LD_INT 0
6732: PPUSH
6733: LD_INT 5
6735: PPUSH
6736: CALL_OW 12
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_INT 199
6752: PPUSH
6753: LD_INT 24
6755: PPUSH
6756: LD_INT 4
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6766: LD_INT 0
6768: PPUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 9
6774: PUSH
6775: LD_INT 10
6777: PUSH
6778: LD_INT 10
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_OWVAR 67
6791: ARRAY
6792: PPUSH
6793: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6797: CALL_OW 44
6801: PPUSH
6802: LD_VAR 0 5
6806: PPUSH
6807: CALL_OW 52
// end ;
6811: GO 6685
6813: POP
6814: POP
// end ;
6815: LD_VAR 0 1
6819: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6820: LD_EXP 4
6824: PUSH
6825: LD_EXP 36
6829: PPUSH
6830: CALL 22546 0 1
6834: AND
6835: IFFALSE 9208
6837: GO 6839
6839: DISABLE
6840: LD_INT 0
6842: PPUSH
6843: PPUSH
6844: PPUSH
6845: PPUSH
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
// begin enable ;
6860: ENABLE
// side := 8 ;
6861: LD_ADDR_VAR 0 5
6865: PUSH
6866: LD_INT 8
6868: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6869: LD_ADDR_VAR 0 3
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_VAR 0 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 33
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 50
6898: PUSH
6899: EMPTY
6900: LIST
6901: PUSH
6902: LD_INT 3
6904: PUSH
6905: LD_INT 61
6907: PUSH
6908: EMPTY
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PPUSH
6921: CALL_OW 69
6925: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
6926: LD_VAR 0 3
6930: PUSH
6931: LD_INT 22
6933: PUSH
6934: LD_VAR 0 5
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 50
6945: PUSH
6946: EMPTY
6947: LIST
6948: PUSH
6949: LD_INT 34
6951: PUSH
6952: LD_INT 31
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: PPUSH
6964: CALL_OW 69
6968: PPUSH
6969: CALL 22546 0 1
6973: AND
6974: IFFALSE 7002
// for i in remote do
6976: LD_ADDR_VAR 0 1
6980: PUSH
6981: LD_VAR 0 3
6985: PUSH
6986: FOR_IN
6987: IFFALSE 7000
// Connect ( i ) ;
6989: LD_VAR 0 1
6993: PPUSH
6994: CALL 28752 0 1
6998: GO 6986
7000: POP
7001: POP
// if legTech then
7002: LD_EXP 38
7006: IFFALSE 7162
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7008: LD_ADDR_VAR 0 6
7012: PUSH
7013: LD_INT 22
7015: PUSH
7016: LD_VAR 0 5
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 50
7027: PUSH
7028: EMPTY
7029: LIST
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: LD_INT 30
7036: PUSH
7037: LD_INT 6
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 7
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 30
7056: PUSH
7057: LD_INT 8
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 69
7079: ST_TO_ADDR
// if lab then
7080: LD_VAR 0 6
7084: IFFALSE 7162
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7086: LD_VAR 0 6
7090: PUSH
7091: LD_INT 1
7093: ARRAY
7094: PPUSH
7095: CALL_OW 461
7099: PUSH
7100: LD_INT 2
7102: EQUAL
7103: IFFALSE 7162
// begin for i in legTech do
7105: LD_ADDR_VAR 0 1
7109: PUSH
7110: LD_EXP 38
7114: PUSH
7115: FOR_IN
7116: IFFALSE 7160
// if CanBeResearched ( lab [ 1 ] , i ) then
7118: LD_VAR 0 6
7122: PUSH
7123: LD_INT 1
7125: ARRAY
7126: PPUSH
7127: LD_VAR 0 1
7131: PPUSH
7132: CALL_OW 430
7136: IFFALSE 7158
// begin ComResearch ( lab [ 1 ] , i ) ;
7138: LD_VAR 0 6
7142: PUSH
7143: LD_INT 1
7145: ARRAY
7146: PPUSH
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 124
// break ;
7156: GO 7160
// end ;
7158: GO 7115
7160: POP
7161: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7162: LD_ADDR_VAR 0 16
7166: PUSH
7167: LD_INT 2
7169: PPUSH
7170: LD_INT 22
7172: PUSH
7173: LD_VAR 0 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 30
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: LD_INT 50
7194: PUSH
7195: EMPTY
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 70
7207: ST_TO_ADDR
// if fac then
7208: LD_VAR 0 16
7212: IFFALSE 7478
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7214: LD_VAR 0 16
7218: PUSH
7219: LD_INT 1
7221: ARRAY
7222: PPUSH
7223: CALL_OW 461
7227: PUSH
7228: LD_INT 2
7230: EQUAL
7231: IFFALSE 7478
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7233: LD_ADDR_VAR 0 17
7237: PUSH
7238: LD_INT 2
7240: PPUSH
7241: LD_INT 2
7243: PUSH
7244: LD_INT 30
7246: PUSH
7247: LD_INT 32
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 30
7256: PUSH
7257: LD_INT 33
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 35
7271: PUSH
7272: LD_INT 0
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: ST_TO_ADDR
// if emptyTowers then
7288: LD_VAR 0 17
7292: IFFALSE 7340
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7294: LD_ADDR_VAR 0 18
7298: PUSH
7299: LD_VAR 0 17
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: PPUSH
7308: LD_INT 2
7310: PPUSH
7311: CALL 30791 0 2
7315: ST_TO_ADDR
// if weapon then
7316: LD_VAR 0 18
7320: IFFALSE 7340
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7322: LD_VAR 0 17
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PPUSH
7331: LD_VAR 0 18
7335: PPUSH
7336: CALL_OW 148
// end ; if legConstructList then
7340: LD_EXP 39
7344: IFFALSE 7478
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7346: LD_VAR 0 16
7350: PUSH
7351: LD_INT 1
7353: ARRAY
7354: PPUSH
7355: LD_EXP 39
7359: PUSH
7360: LD_INT 1
7362: ARRAY
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: LD_EXP 39
7372: PUSH
7373: LD_INT 1
7375: ARRAY
7376: PUSH
7377: LD_INT 2
7379: ARRAY
7380: PPUSH
7381: LD_EXP 39
7385: PUSH
7386: LD_INT 1
7388: ARRAY
7389: PUSH
7390: LD_INT 3
7392: ARRAY
7393: PPUSH
7394: LD_EXP 39
7398: PUSH
7399: LD_INT 1
7401: ARRAY
7402: PUSH
7403: LD_INT 4
7405: ARRAY
7406: PPUSH
7407: CALL_OW 448
7411: IFFALSE 7478
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7413: LD_VAR 0 16
7417: PUSH
7418: LD_INT 1
7420: ARRAY
7421: PPUSH
7422: LD_EXP 39
7426: PUSH
7427: LD_INT 1
7429: ARRAY
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: LD_EXP 39
7439: PUSH
7440: LD_INT 1
7442: ARRAY
7443: PUSH
7444: LD_INT 2
7446: ARRAY
7447: PPUSH
7448: LD_EXP 39
7452: PUSH
7453: LD_INT 1
7455: ARRAY
7456: PUSH
7457: LD_INT 3
7459: ARRAY
7460: PPUSH
7461: LD_EXP 39
7465: PUSH
7466: LD_INT 1
7468: ARRAY
7469: PUSH
7470: LD_INT 4
7472: ARRAY
7473: PPUSH
7474: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7478: LD_ADDR_VAR 0 2
7482: PUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: LD_INT 57
7501: PUSH
7502: EMPTY
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 3
7511: PUSH
7512: LD_INT 24
7514: PUSH
7515: LD_INT 1000
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 70
7535: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7536: LD_ADDR_VAR 0 10
7540: PUSH
7541: LD_INT 14
7543: PPUSH
7544: CALL_OW 435
7548: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7549: LD_ADDR_VAR 0 11
7553: PUSH
7554: LD_EXP 36
7558: PPUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 4
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 50
7571: PUSH
7572: EMPTY
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 72
7583: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7584: LD_ADDR_VAR 0 6
7588: PUSH
7589: LD_INT 2
7591: PPUSH
7592: LD_INT 2
7594: PUSH
7595: LD_INT 30
7597: PUSH
7598: LD_INT 6
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 30
7607: PUSH
7608: LD_INT 7
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 30
7617: PUSH
7618: LD_INT 8
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 70
7635: ST_TO_ADDR
// if sci then
7636: LD_VAR 0 11
7640: IFFALSE 7799
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7642: LD_ADDR_VAR 0 13
7646: PUSH
7647: LD_EXP 36
7651: PPUSH
7652: LD_INT 95
7654: PUSH
7655: LD_INT 2
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 120
7664: PUSH
7665: LD_INT 1
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 72
7680: ST_TO_ADDR
// if hurtUnits then
7681: LD_VAR 0 13
7685: IFFALSE 7746
// begin for i in sci do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_VAR 0 11
7696: PUSH
7697: FOR_IN
7698: IFFALSE 7742
// if IsInUnit ( i ) then
7700: LD_VAR 0 1
7704: PPUSH
7705: CALL_OW 310
7709: IFFALSE 7722
// ComExitBuilding ( i ) else
7711: LD_VAR 0 1
7715: PPUSH
7716: CALL_OW 122
7720: GO 7740
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7722: LD_VAR 0 1
7726: PPUSH
7727: LD_VAR 0 13
7731: PUSH
7732: LD_INT 1
7734: ARRAY
7735: PPUSH
7736: CALL_OW 128
7740: GO 7697
7742: POP
7743: POP
// end else
7744: GO 7799
// if lab then
7746: LD_VAR 0 6
7750: IFFALSE 7799
// begin for i in sci do
7752: LD_ADDR_VAR 0 1
7756: PUSH
7757: LD_VAR 0 11
7761: PUSH
7762: FOR_IN
7763: IFFALSE 7797
// if not IsInUnit ( i ) then
7765: LD_VAR 0 1
7769: PPUSH
7770: CALL_OW 310
7774: NOT
7775: IFFALSE 7795
// ComEnterUnit ( i , lab [ 1 ] ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_VAR 0 6
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: CALL_OW 120
7795: GO 7762
7797: POP
7798: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
7799: LD_ADDR_VAR 0 7
7803: PUSH
7804: LD_EXP 36
7808: PPUSH
7809: LD_INT 25
7811: PUSH
7812: LD_INT 2
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PPUSH
7819: CALL_OW 72
7823: ST_TO_ADDR
// if eng then
7824: LD_VAR 0 7
7828: IFFALSE 8603
// begin for i in eng do
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_VAR 0 7
7839: PUSH
7840: FOR_IN
7841: IFFALSE 8601
// begin tag := GetTag ( i ) ;
7843: LD_ADDR_VAR 0 8
7847: PUSH
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 110
7857: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 256
7867: PUSH
7868: LD_INT 800
7870: LESS
7871: PUSH
7872: LD_VAR 0 8
7876: PUSH
7877: LD_INT 1
7879: NONEQUAL
7880: AND
7881: IFFALSE 7931
// begin SetTag ( i , tHeal ) ;
7883: LD_VAR 0 1
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7895: LD_VAR 0 1
7899: PPUSH
7900: LD_EXP 40
7904: PUSH
7905: LD_INT 1
7907: ARRAY
7908: PPUSH
7909: LD_EXP 40
7913: PUSH
7914: LD_INT 2
7916: ARRAY
7917: PPUSH
7918: CALL_OW 111
// AddComHold ( i ) ;
7922: LD_VAR 0 1
7926: PPUSH
7927: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7931: LD_VAR 0 8
7935: PUSH
7936: LD_INT 1
7938: EQUAL
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 256
7949: PUSH
7950: LD_INT 1000
7952: EQUAL
7953: AND
7954: IFFALSE 7968
// SetTag ( i , 0 ) ;
7956: LD_VAR 0 1
7960: PPUSH
7961: LD_INT 0
7963: PPUSH
7964: CALL_OW 109
// if not tag then
7968: LD_VAR 0 8
7972: NOT
7973: IFFALSE 8141
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
7975: LD_ADDR_VAR 0 4
7979: PUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_INT 57
7985: PUSH
7986: EMPTY
7987: LIST
7988: PPUSH
7989: CALL_OW 70
7993: ST_TO_ADDR
// if undone then
7994: LD_VAR 0 4
7998: IFFALSE 8020
// begin ComComplete ( i , undone [ 1 ] ) ;
8000: LD_VAR 0 1
8004: PPUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: ARRAY
8013: PPUSH
8014: CALL 28644 0 2
// continue ;
8018: GO 7840
// end ; if cr or tmp or Count ( legBuildings ) then
8020: LD_VAR 0 10
8024: PUSH
8025: LD_VAR 0 2
8029: OR
8030: PUSH
8031: LD_EXP 41
8035: PPUSH
8036: CALL 22546 0 1
8040: OR
8041: IFFALSE 8117
// begin if IsInUnit ( i ) then
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 310
8052: IFFALSE 8063
// ComExitBuilding ( i ) ;
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 122
// if tmp then
8063: LD_VAR 0 2
8067: IFFALSE 8083
// SetTag ( i , tRepair ) else
8069: LD_VAR 0 1
8073: PPUSH
8074: LD_INT 3
8076: PPUSH
8077: CALL_OW 109
8081: GO 8115
// if cr then
8083: LD_VAR 0 10
8087: IFFALSE 8103
// SetTag ( i , tCrates ) else
8089: LD_VAR 0 1
8093: PPUSH
8094: LD_INT 2
8096: PPUSH
8097: CALL_OW 109
8101: GO 8115
// SetTag ( i , tBuild ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: LD_INT 5
8110: PPUSH
8111: CALL_OW 109
// end else
8115: GO 8141
// if not IsInUnit ( i ) then
8117: LD_VAR 0 1
8121: PPUSH
8122: CALL_OW 310
8126: NOT
8127: IFFALSE 8141
// ComEnterUnit ( i , legBase ) ;
8129: LD_VAR 0 1
8133: PPUSH
8134: LD_INT 38
8136: PPUSH
8137: CALL_OW 120
// end ; if tag = tRepair then
8141: LD_VAR 0 8
8145: PUSH
8146: LD_INT 3
8148: EQUAL
8149: IFFALSE 8251
// begin if IsInUnit ( i ) then
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 310
8160: IFFALSE 8173
// begin ComExitBuilding ( i ) ;
8162: LD_VAR 0 1
8166: PPUSH
8167: CALL_OW 122
// continue ;
8171: GO 7840
// end ; if not tmp then
8173: LD_VAR 0 2
8177: NOT
8178: IFFALSE 8194
// begin SetTag ( i , 0 ) ;
8180: LD_VAR 0 1
8184: PPUSH
8185: LD_INT 0
8187: PPUSH
8188: CALL_OW 109
// continue ;
8192: GO 7840
// end ; if not HasTask ( i ) then
8194: LD_VAR 0 1
8198: PPUSH
8199: CALL_OW 314
8203: NOT
8204: IFFALSE 8224
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8206: LD_VAR 0 1
8210: PPUSH
8211: LD_VAR 0 2
8215: PUSH
8216: LD_INT 1
8218: ARRAY
8219: PPUSH
8220: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_INT 2
8231: PPUSH
8232: CALL_OW 308
8236: NOT
8237: IFFALSE 8251
// ComMoveToArea ( i , legBaseArea ) ;
8239: LD_VAR 0 1
8243: PPUSH
8244: LD_INT 2
8246: PPUSH
8247: CALL_OW 113
// end ; if tag = tBuild then
8251: LD_VAR 0 8
8255: PUSH
8256: LD_INT 5
8258: EQUAL
8259: IFFALSE 8454
// begin if IsInUnit ( i ) then
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 310
8270: IFFALSE 8283
// begin ComExitBuilding ( i ) ;
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL_OW 122
// continue ;
8281: GO 7840
// end ; if not Count ( legBuildings ) then
8283: LD_EXP 41
8287: PPUSH
8288: CALL 22546 0 1
8292: NOT
8293: IFFALSE 8311
// begin SetTag ( i , 0 ) ;
8295: LD_VAR 0 1
8299: PPUSH
8300: LD_INT 0
8302: PPUSH
8303: CALL_OW 109
// continue ;
8307: GO 7840
// end else
8309: GO 8348
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8311: LD_INT 38
8313: PPUSH
8314: LD_EXP 41
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PUSH
8323: LD_INT 1
8325: ARRAY
8326: PPUSH
8327: CALL 10899 0 2
8331: NOT
8332: IFFALSE 8348
// begin SetTag ( i , 0 ) ;
8334: LD_VAR 0 1
8338: PPUSH
8339: LD_INT 0
8341: PPUSH
8342: CALL_OW 109
// continue ;
8346: GO 7840
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8348: LD_ADDR_VAR 0 4
8352: PUSH
8353: LD_INT 2
8355: PPUSH
8356: LD_INT 57
8358: PUSH
8359: EMPTY
8360: LIST
8361: PPUSH
8362: CALL_OW 70
8366: ST_TO_ADDR
// if undone then
8367: LD_VAR 0 4
8371: IFFALSE 8393
// begin ComComplete ( i , undone [ 1 ] ) ;
8373: LD_VAR 0 1
8377: PPUSH
8378: LD_VAR 0 4
8382: PUSH
8383: LD_INT 1
8385: ARRAY
8386: PPUSH
8387: CALL 28644 0 2
// continue ;
8391: GO 7840
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8393: LD_VAR 0 1
8397: PPUSH
8398: LD_EXP 41
8402: PUSH
8403: LD_INT 1
8405: ARRAY
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: LD_EXP 41
8415: PUSH
8416: LD_INT 1
8418: ARRAY
8419: PUSH
8420: LD_INT 2
8422: ARRAY
8423: PPUSH
8424: LD_EXP 41
8428: PUSH
8429: LD_INT 1
8431: ARRAY
8432: PUSH
8433: LD_INT 3
8435: ARRAY
8436: PPUSH
8437: LD_EXP 41
8441: PUSH
8442: LD_INT 1
8444: ARRAY
8445: PUSH
8446: LD_INT 4
8448: ARRAY
8449: PPUSH
8450: CALL_OW 145
// end ; if tag = tCrates then
8454: LD_VAR 0 8
8458: PUSH
8459: LD_INT 2
8461: EQUAL
8462: IFFALSE 8599
// begin if IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: IFFALSE 8486
// begin ComExitBuilding ( i ) ;
8475: LD_VAR 0 1
8479: PPUSH
8480: CALL_OW 122
// continue ;
8484: GO 7840
// end ; if not cr then
8486: LD_VAR 0 10
8490: NOT
8491: IFFALSE 8507
// begin SetTag ( i , 0 ) ;
8493: LD_VAR 0 1
8497: PPUSH
8498: LD_INT 0
8500: PPUSH
8501: CALL_OW 109
// continue ;
8505: GO 7840
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 314
8516: NOT
8517: PUSH
8518: LD_INT 81
8520: PUSH
8521: LD_VAR 0 5
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 92
8532: PUSH
8533: LD_VAR 0 10
8537: PUSH
8538: LD_INT 1
8540: ARRAY
8541: PUSH
8542: LD_VAR 0 10
8546: PUSH
8547: LD_INT 2
8549: ARRAY
8550: PUSH
8551: LD_INT 12
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: NOT
8569: AND
8570: IFFALSE 8599
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8572: LD_VAR 0 1
8576: PPUSH
8577: LD_VAR 0 10
8581: PUSH
8582: LD_INT 1
8584: ARRAY
8585: PPUSH
8586: LD_VAR 0 10
8590: PUSH
8591: LD_INT 2
8593: ARRAY
8594: PPUSH
8595: CALL_OW 117
// end ; end ;
8599: GO 7840
8601: POP
8602: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8603: LD_ADDR_VAR 0 12
8607: PUSH
8608: LD_EXP 36
8612: PPUSH
8613: LD_INT 2
8615: PUSH
8616: LD_INT 25
8618: PUSH
8619: LD_INT 1
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 25
8628: PUSH
8629: LD_INT 5
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 8
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 50
8654: PUSH
8655: EMPTY
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 72
8666: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8667: LD_ADDR_VAR 0 14
8671: PUSH
8672: LD_INT 2
8674: PPUSH
8675: LD_INT 81
8677: PUSH
8678: LD_VAR 0 5
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 70
8691: ST_TO_ADDR
// if sol then
8692: LD_VAR 0 12
8696: IFFALSE 9208
// begin if enemyInBase then
8698: LD_VAR 0 14
8702: IFFALSE 8847
// begin for i in sol do
8704: LD_ADDR_VAR 0 1
8708: PUSH
8709: LD_VAR 0 12
8713: PUSH
8714: FOR_IN
8715: IFFALSE 8843
// begin tw := IsInUnit ( i ) ;
8717: LD_ADDR_VAR 0 9
8721: PUSH
8722: LD_VAR 0 1
8726: PPUSH
8727: CALL_OW 310
8731: ST_TO_ADDR
// if tw then
8732: LD_VAR 0 9
8736: IFFALSE 8817
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8738: LD_VAR 0 9
8742: PUSH
8743: LD_INT 22
8745: PUSH
8746: LD_VAR 0 5
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 101
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 30
8770: PUSH
8771: LD_INT 32
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 30
8780: PUSH
8781: LD_INT 31
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 69
8802: IN
8803: NOT
8804: IFFALSE 8815
// ComExitBuilding ( i ) ;
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL_OW 122
// end else
8815: GO 8841
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
8817: LD_VAR 0 1
8821: PPUSH
8822: LD_VAR 0 14
8826: PPUSH
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 74
8836: PPUSH
8837: CALL_OW 115
// end ;
8841: GO 8714
8843: POP
8844: POP
// end else
8845: GO 9208
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8847: LD_ADDR_VAR 0 15
8851: PUSH
8852: LD_INT 2
8854: PPUSH
8855: LD_INT 3
8857: PUSH
8858: LD_INT 62
8860: PUSH
8861: EMPTY
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: LD_INT 2
8870: PUSH
8871: LD_INT 30
8873: PUSH
8874: LD_INT 32
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 30
8883: PUSH
8884: LD_INT 4
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 30
8893: PUSH
8894: LD_INT 5
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: LD_INT 30
8903: PUSH
8904: LD_INT 31
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PPUSH
8922: CALL_OW 70
8926: ST_TO_ADDR
// if empty then
8927: LD_VAR 0 15
8931: IFFALSE 8948
// empty := ReverseArray ( empty ) ;
8933: LD_ADDR_VAR 0 15
8937: PUSH
8938: LD_VAR 0 15
8942: PPUSH
8943: CALL 53422 0 1
8947: ST_TO_ADDR
// for i in sol do
8948: LD_ADDR_VAR 0 1
8952: PUSH
8953: LD_VAR 0 12
8957: PUSH
8958: FOR_IN
8959: IFFALSE 9206
// begin tag := GetTag ( i ) ;
8961: LD_ADDR_VAR 0 8
8965: PUSH
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 110
8975: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8976: LD_VAR 0 1
8980: PPUSH
8981: CALL_OW 256
8985: PUSH
8986: LD_INT 1000
8988: LESS
8989: PUSH
8990: LD_VAR 0 8
8994: PUSH
8995: LD_INT 1
8997: NONEQUAL
8998: AND
8999: IFFALSE 9051
// begin SetTag ( i , tHeal ) ;
9001: LD_VAR 0 1
9005: PPUSH
9006: LD_INT 1
9008: PPUSH
9009: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_EXP 40
9022: PUSH
9023: LD_INT 1
9025: ARRAY
9026: PPUSH
9027: LD_EXP 40
9031: PUSH
9032: LD_INT 2
9034: ARRAY
9035: PPUSH
9036: CALL_OW 111
// AddComHold ( i ) ;
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL_OW 200
// continue ;
9049: GO 8958
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 256
9060: PUSH
9061: LD_INT 1000
9063: EQUAL
9064: PUSH
9065: LD_VAR 0 8
9069: PUSH
9070: LD_INT 1
9072: EQUAL
9073: AND
9074: IFFALSE 9090
// begin SetTag ( i , 0 ) ;
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 109
// continue ;
9088: GO 8958
// end ; if HasTask ( i ) then
9090: LD_VAR 0 1
9094: PPUSH
9095: CALL_OW 314
9099: IFFALSE 9103
// continue ;
9101: GO 8958
// if not IsInUnit ( i ) and not tag and empty then
9103: LD_VAR 0 1
9107: PPUSH
9108: CALL_OW 310
9112: NOT
9113: PUSH
9114: LD_VAR 0 8
9118: NOT
9119: AND
9120: PUSH
9121: LD_VAR 0 15
9125: AND
9126: IFFALSE 9204
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9128: LD_VAR 0 1
9132: PPUSH
9133: LD_VAR 0 15
9137: PUSH
9138: LD_INT 1
9140: ARRAY
9141: PPUSH
9142: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9146: LD_VAR 0 15
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 5
9162: EQUAL
9163: PUSH
9164: LD_INT 50
9166: PPUSH
9167: CALL_OW 13
9171: AND
9172: IFFALSE 9186
// AddComChangeProfession ( i , class_mortar ) ;
9174: LD_VAR 0 1
9178: PPUSH
9179: LD_INT 8
9181: PPUSH
9182: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9186: LD_ADDR_VAR 0 15
9190: PUSH
9191: LD_VAR 0 15
9195: PPUSH
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 3
9203: ST_TO_ADDR
// end ; end ;
9204: GO 8958
9206: POP
9207: POP
// end ; end ; end ;
9208: PPOPN 18
9210: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9211: LD_EXP 44
9215: PPUSH
9216: CALL_OW 302
9220: PUSH
9221: LD_EXP 4
9225: AND
9226: PUSH
9227: LD_EXP 9
9231: AND
9232: IFFALSE 9514
9234: GO 9236
9236: DISABLE
9237: LD_INT 0
9239: PPUSH
9240: PPUSH
// begin enable ;
9241: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: LD_INT 2
9249: PPUSH
9250: LD_INT 81
9252: PUSH
9253: LD_INT 8
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 50
9262: PUSH
9263: EMPTY
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PPUSH
9270: CALL_OW 70
9274: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9275: LD_ADDR_VAR 0 1
9279: PUSH
9280: LD_INT 16
9282: PPUSH
9283: CALL_OW 435
9287: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9288: LD_EXP 44
9292: PPUSH
9293: CALL_OW 261
9297: PUSH
9298: LD_INT 10
9300: LESS
9301: PUSH
9302: LD_INT 2
9304: PPUSH
9305: LD_EXP 44
9309: PPUSH
9310: CALL_OW 292
9314: NOT
9315: AND
9316: PUSH
9317: LD_EXP 44
9321: PPUSH
9322: CALL_OW 262
9326: PUSH
9327: LD_INT 1
9329: EQUAL
9330: AND
9331: IFFALSE 9345
// SetFuel ( legCargo , 100 ) ;
9333: LD_EXP 44
9337: PPUSH
9338: LD_INT 100
9340: PPUSH
9341: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9345: LD_EXP 44
9349: PPUSH
9350: CALL_OW 314
9354: NOT
9355: PUSH
9356: LD_EXP 44
9360: PPUSH
9361: LD_INT 1
9363: PPUSH
9364: CALL_OW 289
9368: PUSH
9369: LD_INT 100
9371: LESS
9372: AND
9373: PUSH
9374: LD_VAR 0 2
9378: NOT
9379: AND
9380: IFFALSE 9446
// begin if cr then
9382: LD_VAR 0 1
9386: IFFALSE 9417
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9388: LD_EXP 44
9392: PPUSH
9393: LD_VAR 0 1
9397: PUSH
9398: LD_INT 1
9400: ARRAY
9401: PPUSH
9402: LD_VAR 0 1
9406: PUSH
9407: LD_INT 2
9409: ARRAY
9410: PPUSH
9411: CALL_OW 117
9415: GO 9444
// if not IsInArea ( legCargo , cratesNorthArea ) then
9417: LD_EXP 44
9421: PPUSH
9422: LD_INT 16
9424: PPUSH
9425: CALL_OW 308
9429: NOT
9430: IFFALSE 9444
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9432: LD_EXP 44
9436: PPUSH
9437: LD_INT 16
9439: PPUSH
9440: CALL_OW 113
// exit ;
9444: GO 9514
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9446: LD_VAR 0 2
9450: PUSH
9451: LD_EXP 44
9455: PPUSH
9456: LD_INT 2
9458: PPUSH
9459: CALL_OW 308
9463: NOT
9464: AND
9465: IFFALSE 9484
// ComMoveXY ( legCargo , 194 , 17 ) else
9467: LD_EXP 44
9471: PPUSH
9472: LD_INT 194
9474: PPUSH
9475: LD_INT 17
9477: PPUSH
9478: CALL_OW 111
9482: GO 9514
// if GetCargo ( legCargo , mat_cans ) = 100 then
9484: LD_EXP 44
9488: PPUSH
9489: LD_INT 1
9491: PPUSH
9492: CALL_OW 289
9496: PUSH
9497: LD_INT 100
9499: EQUAL
9500: IFFALSE 9514
// ComGive ( legCargo , legBase ) ;
9502: LD_EXP 44
9506: PPUSH
9507: LD_INT 38
9509: PPUSH
9510: CALL_OW 161
// end ;
9514: PPOPN 2
9516: END
// every 12 12$00 trigger Count ( legTanks ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part ;
9517: LD_EXP 42
9521: PPUSH
9522: CALL 22546 0 1
9526: PUSH
9527: LD_INT 5
9529: LESS
9530: PUSH
9531: LD_EXP 4
9535: AND
9536: PUSH
9537: LD_EXP 9
9541: AND
9542: PUSH
9543: LD_EXP 7
9547: AND
9548: IFFALSE 9731
9550: GO 9552
9552: DISABLE
9553: LD_INT 0
9555: PPUSH
9556: PPUSH
9557: PPUSH
// begin enable ;
9558: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9559: LD_ADDR_VAR 0 2
9563: PUSH
9564: LD_INT 13
9566: PUSH
9567: LD_INT 28
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 13
9576: PUSH
9577: LD_INT 27
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 13
9586: PUSH
9587: LD_INT 26
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 14
9596: PUSH
9597: LD_INT 28
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 14
9606: PUSH
9607: LD_INT 25
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: DOUBLE
9627: LD_INT 1
9629: DEC
9630: ST_TO_ADDR
9631: LD_INT 3
9633: PUSH
9634: LD_INT 3
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: LD_INT 4
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: LD_OWVAR 67
9653: ARRAY
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9729
// begin part := parts [ rand ( 1 , parts ) ] ;
9658: LD_ADDR_VAR 0 3
9662: PUSH
9663: LD_VAR 0 2
9667: PUSH
9668: LD_INT 1
9670: PPUSH
9671: LD_VAR 0 2
9675: PPUSH
9676: CALL_OW 12
9680: ARRAY
9681: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
9682: LD_ADDR_EXP 39
9686: PUSH
9687: LD_EXP 39
9691: PPUSH
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: LD_INT 2
9706: PUSH
9707: LD_VAR 0 3
9711: PUSH
9712: LD_INT 2
9714: ARRAY
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PPUSH
9722: CALL 58146 0 2
9726: ST_TO_ADDR
9727: GO 9655
9729: POP
9730: POP
// end ;
9731: PPOPN 3
9733: END
// every 20 20$00 trigger not legionDestroyed and tick <= 60 60$00 do
9734: LD_EXP 12
9738: NOT
9739: PUSH
9740: LD_OWVAR 1
9744: PUSH
9745: LD_INT 126000
9747: LESSEQUAL
9748: AND
9749: IFFALSE 9788
9751: GO 9753
9753: DISABLE
// begin enable ;
9754: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
9755: LD_ADDR_EXP 39
9759: PUSH
9760: LD_EXP 39
9764: PPUSH
9765: LD_INT 14
9767: PUSH
9768: LD_INT 1
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: LD_INT 27
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: PPUSH
9783: CALL 58146 0 2
9787: ST_TO_ADDR
// end ;
9788: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
9789: LD_EXP 42
9793: PUSH
9794: LD_EXP 9
9798: AND
9799: PUSH
9800: LD_EXP 7
9804: AND
9805: IFFALSE 10398
9807: GO 9809
9809: DISABLE
9810: LD_INT 0
9812: PPUSH
9813: PPUSH
9814: PPUSH
// begin enable ;
9815: ENABLE
// if not legTanks then
9816: LD_EXP 42
9820: NOT
9821: IFFALSE 9825
// exit ;
9823: GO 10398
// for i in legTanks do
9825: LD_ADDR_VAR 0 1
9829: PUSH
9830: LD_EXP 42
9834: PUSH
9835: FOR_IN
9836: IFFALSE 10396
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
9838: LD_VAR 0 1
9842: PPUSH
9843: CALL_OW 302
9847: NOT
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 255
9858: PUSH
9859: LD_INT 8
9861: NONEQUAL
9862: OR
9863: IFFALSE 9883
// begin legTanks := legTanks diff i ;
9865: LD_ADDR_EXP 42
9869: PUSH
9870: LD_EXP 42
9874: PUSH
9875: LD_VAR 0 1
9879: DIFF
9880: ST_TO_ADDR
// continue ;
9881: GO 9835
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
9883: LD_VAR 0 1
9887: PPUSH
9888: CALL_OW 110
9892: NOT
9893: PUSH
9894: LD_VAR 0 1
9898: PPUSH
9899: CALL_OW 263
9903: PUSH
9904: LD_INT 2
9906: EQUAL
9907: AND
9908: IFFALSE 9922
// SetTag ( i , tAttack ) ;
9910: LD_VAR 0 1
9914: PPUSH
9915: LD_INT 10
9917: PPUSH
9918: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 110
9931: NOT
9932: PUSH
9933: LD_VAR 0 1
9937: PPUSH
9938: CALL_OW 110
9942: PUSH
9943: LD_INT 0
9945: EQUAL
9946: OR
9947: IFFALSE 10077
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9949: LD_VAR 0 1
9953: PPUSH
9954: CALL_OW 261
9958: PUSH
9959: LD_INT 50
9961: LESS
9962: PUSH
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 262
9972: PUSH
9973: LD_INT 1
9975: EQUAL
9976: AND
9977: IFFALSE 10036
// begin ComMoveXY ( i , 189 , 19 ) ;
9979: LD_VAR 0 1
9983: PPUSH
9984: LD_INT 189
9986: PPUSH
9987: LD_INT 19
9989: PPUSH
9990: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9994: LD_INT 35
9996: PPUSH
9997: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
10001: LD_VAR 0 1
10005: PPUSH
10006: LD_INT 189
10008: PPUSH
10009: LD_INT 19
10011: PPUSH
10012: CALL_OW 297
10016: PUSH
10017: LD_INT 4
10019: LESS
10020: IFFALSE 9994
// SetFuel ( i , 100 ) ;
10022: LD_VAR 0 1
10026: PPUSH
10027: LD_INT 100
10029: PPUSH
10030: CALL_OW 240
// end else
10034: GO 10077
// if not IsInArea ( i , legParkingArea ) then
10036: LD_VAR 0 1
10040: PPUSH
10041: LD_INT 15
10043: PPUSH
10044: CALL_OW 308
10048: NOT
10049: IFFALSE 10065
// ComMoveToArea ( i , legParkingArea ) else
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_INT 15
10058: PPUSH
10059: CALL_OW 113
10063: GO 10077
// SetTag ( i , tParking ) ;
10065: LD_VAR 0 1
10069: PPUSH
10070: LD_INT 9
10072: PPUSH
10073: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
10077: LD_VAR 0 1
10081: PPUSH
10082: CALL_OW 110
10086: PUSH
10087: LD_INT 9
10089: EQUAL
10090: IFFALSE 10220
// begin if GetLives ( i ) < 650 then
10092: LD_VAR 0 1
10096: PPUSH
10097: CALL_OW 256
10101: PUSH
10102: LD_INT 650
10104: LESS
10105: IFFALSE 10197
// begin if not IsDrivenBy ( i ) then
10107: LD_VAR 0 1
10111: PPUSH
10112: CALL_OW 311
10116: NOT
10117: IFFALSE 10121
// continue ;
10119: GO 9835
// mech := IsDrivenBy ( i ) ;
10121: LD_ADDR_VAR 0 2
10125: PUSH
10126: LD_VAR 0 1
10130: PPUSH
10131: CALL_OW 311
10135: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10136: LD_VAR 0 2
10140: PPUSH
10141: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10145: LD_VAR 0 2
10149: PPUSH
10150: LD_VAR 0 1
10154: PPUSH
10155: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10159: LD_INT 35
10161: PPUSH
10162: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10166: LD_VAR 0 1
10170: PPUSH
10171: CALL_OW 256
10175: PUSH
10176: LD_INT 1000
10178: EQUAL
10179: IFFALSE 10159
// ComEnterUnit ( mech , i ) ;
10181: LD_VAR 0 2
10185: PPUSH
10186: LD_VAR 0 1
10190: PPUSH
10191: CALL_OW 120
// end else
10195: GO 10220
// if IsDrivenBy ( i ) then
10197: LD_VAR 0 1
10201: PPUSH
10202: CALL_OW 311
10206: IFFALSE 10220
// SetTag ( i , tAttack ) ;
10208: LD_VAR 0 1
10212: PPUSH
10213: LD_INT 10
10215: PPUSH
10216: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10220: LD_VAR 0 1
10224: PPUSH
10225: CALL_OW 110
10229: PUSH
10230: LD_INT 10
10232: EQUAL
10233: IFFALSE 10394
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10235: LD_ADDR_VAR 0 3
10239: PUSH
10240: LD_INT 2
10242: PPUSH
10243: LD_INT 81
10245: PUSH
10246: LD_INT 8
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PPUSH
10253: CALL_OW 70
10257: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 256
10267: PUSH
10268: LD_INT 650
10270: LESS
10271: PUSH
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 263
10281: PUSH
10282: LD_INT 1
10284: EQUAL
10285: AND
10286: IFFALSE 10311
// begin ComStop ( i ) ;
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 141
// SetTag ( i , 0 ) ;
10297: LD_VAR 0 1
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 109
// continue ;
10309: GO 9835
// end ; if enemy then
10311: LD_VAR 0 3
10315: IFFALSE 10355
// begin if not HasTask ( i ) then
10317: LD_VAR 0 1
10321: PPUSH
10322: CALL_OW 314
10326: NOT
10327: IFFALSE 10353
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10329: LD_VAR 0 1
10333: PPUSH
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 74
10348: PPUSH
10349: CALL 62218 0 2
// end else
10353: GO 10394
// if legTanks then
10355: LD_EXP 42
10359: IFFALSE 10394
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_INT 200
10368: PUSH
10369: LD_INT 48
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 210
10378: PUSH
10379: LD_INT 74
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PPUSH
10390: CALL 60750 0 2
// end ; end ;
10394: GO 9835
10396: POP
10397: POP
// end ;
10398: PPOPN 3
10400: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10401: LD_EXP 12
10405: NOT
10406: PUSH
10407: LD_EXP 43
10411: PPUSH
10412: CALL 22546 0 1
10416: AND
10417: PUSH
10418: LD_EXP 9
10422: AND
10423: PUSH
10424: LD_EXP 7
10428: AND
10429: IFFALSE 10627
10431: GO 10433
10433: DISABLE
10434: LD_INT 0
10436: PPUSH
10437: PPUSH
10438: PPUSH
// begin enable ;
10439: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10440: LD_ADDR_VAR 0 2
10444: PUSH
10445: LD_EXP 43
10449: PPUSH
10450: LD_INT 61
10452: PUSH
10453: EMPTY
10454: LIST
10455: PUSH
10456: LD_INT 50
10458: PUSH
10459: EMPTY
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 72
10470: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10471: LD_ADDR_EXP 43
10475: PUSH
10476: LD_EXP 43
10480: PUSH
10481: LD_VAR 0 2
10485: DIFF
10486: ST_TO_ADDR
// if not tmp then
10487: LD_VAR 0 2
10491: NOT
10492: IFFALSE 10496
// exit ;
10494: GO 10627
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10496: LD_ADDR_VAR 0 3
10500: PUSH
10501: LD_VAR 0 2
10505: PPUSH
10506: LD_INT 34
10508: PUSH
10509: LD_INT 24
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 72
10520: ST_TO_ADDR
// if tmp2 then
10521: LD_VAR 0 3
10525: IFFALSE 10542
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 241
10534: PPUSH
10535: LD_INT 99
10537: PPUSH
10538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10542: LD_INT 35
10544: PPUSH
10545: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10549: LD_ADDR_VAR 0 2
10553: PUSH
10554: LD_VAR 0 2
10558: PPUSH
10559: LD_INT 50
10561: PUSH
10562: EMPTY
10563: LIST
10564: PPUSH
10565: CALL_OW 72
10569: ST_TO_ADDR
// for i in tmp do
10570: LD_ADDR_VAR 0 1
10574: PUSH
10575: LD_VAR 0 2
10579: PUSH
10580: FOR_IN
10581: IFFALSE 10618
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10583: LD_VAR 0 1
10587: PPUSH
10588: LD_INT 200
10590: PUSH
10591: LD_INT 48
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 210
10600: PUSH
10601: LD_INT 74
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL 60750 0 2
10616: GO 10580
10618: POP
10619: POP
// until not tmp ;
10620: LD_VAR 0 2
10624: NOT
10625: IFFALSE 10542
// end ;
10627: PPOPN 3
10629: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10630: LD_EXP 9
10634: NOT
10635: IFFALSE 10896
10637: GO 10639
10639: DISABLE
10640: LD_INT 0
10642: PPUSH
10643: PPUSH
10644: PPUSH
10645: PPUSH
// begin uc_side := 8 ;
10646: LD_ADDR_OWVAR 20
10650: PUSH
10651: LD_INT 8
10653: ST_TO_ADDR
// uc_nation := nation_arabian ;
10654: LD_ADDR_OWVAR 21
10658: PUSH
10659: LD_INT 2
10661: ST_TO_ADDR
// for i := 1 to 3 do
10662: LD_ADDR_VAR 0 1
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_INT 3
10674: PUSH
10675: FOR_TO
10676: IFFALSE 10811
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
10678: LD_INT 14
10680: PPUSH
10681: LD_INT 3
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 27
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_VAR 0 1
10701: PUSH
10702: LD_INT 2
10704: MOD
10705: PUSH
10706: LD_INT 1
10708: PLUS
10709: ARRAY
10710: PPUSH
10711: LD_INT 100
10713: PPUSH
10714: CALL 25284 0 5
// veh := CreateVehicle ;
10718: LD_ADDR_VAR 0 3
10722: PUSH
10723: CALL_OW 45
10727: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10728: LD_VAR 0 3
10732: PPUSH
10733: LD_INT 5
10735: PPUSH
10736: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_INT 44
10747: PPUSH
10748: LD_INT 0
10750: PPUSH
10751: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
10755: LD_INT 0
10757: PPUSH
10758: LD_INT 6
10760: PPUSH
10761: CALL_OW 383
// un := CreateHuman ;
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: CALL_OW 44
10774: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10775: LD_VAR 0 2
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10789: LD_ADDR_VAR 0 4
10793: PUSH
10794: LD_VAR 0 4
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: CALL 58146 0 2
10808: ST_TO_ADDR
// end ;
10809: GO 10675
10811: POP
10812: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
10813: LD_VAR 0 4
10817: PPUSH
10818: LD_INT 219
10820: PPUSH
10821: LD_INT 110
10823: PPUSH
10824: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
10828: LD_VAR 0 4
10832: PPUSH
10833: LD_INT 220
10835: PPUSH
10836: LD_INT 94
10838: PPUSH
10839: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
10843: LD_VAR 0 4
10847: PPUSH
10848: LD_INT 209
10850: PPUSH
10851: LD_INT 66
10853: PPUSH
10854: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
10858: LD_VAR 0 4
10862: PPUSH
10863: LD_INT 189
10865: PPUSH
10866: LD_INT 22
10868: PPUSH
10869: CALL_OW 171
// wait ( 0 0$10 ) ;
10873: LD_INT 350
10875: PPUSH
10876: CALL_OW 67
// legTanks := legTanks union tmp ;
10880: LD_ADDR_EXP 42
10884: PUSH
10885: LD_EXP 42
10889: PUSH
10890: LD_VAR 0 4
10894: UNION
10895: ST_TO_ADDR
// end ; end_of_file
10896: PPOPN 4
10898: END
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
10899: LD_INT 0
10901: PPUSH
10902: PPUSH
10903: PPUSH
// if btype = b_depot then
10904: LD_VAR 0 2
10908: PUSH
10909: LD_INT 0
10911: EQUAL
10912: IFFALSE 10924
// begin result := true ;
10914: LD_ADDR_VAR 0 3
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// exit ;
10922: GO 11040
// end ; pom := GetBase ( depot ) ;
10924: LD_ADDR_VAR 0 4
10928: PUSH
10929: LD_VAR 0 1
10933: PPUSH
10934: CALL_OW 274
10938: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
10939: LD_ADDR_VAR 0 5
10943: PUSH
10944: LD_VAR 0 2
10948: PPUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 248
10958: PPUSH
10959: CALL_OW 450
10963: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
10964: LD_ADDR_VAR 0 3
10968: PUSH
10969: LD_VAR 0 4
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 275
10981: PUSH
10982: LD_VAR 0 5
10986: PUSH
10987: LD_INT 1
10989: ARRAY
10990: GREATEREQUAL
10991: PUSH
10992: LD_VAR 0 4
10996: PPUSH
10997: LD_INT 2
10999: PPUSH
11000: CALL_OW 275
11004: PUSH
11005: LD_VAR 0 5
11009: PUSH
11010: LD_INT 2
11012: ARRAY
11013: GREATEREQUAL
11014: AND
11015: PUSH
11016: LD_VAR 0 4
11020: PPUSH
11021: LD_INT 3
11023: PPUSH
11024: CALL_OW 275
11028: PUSH
11029: LD_VAR 0 5
11033: PUSH
11034: LD_INT 3
11036: ARRAY
11037: GREATEREQUAL
11038: AND
11039: ST_TO_ADDR
// end ;
11040: LD_VAR 0 3
11044: RET
// export function CreateNature ; var i , areas , amount ; begin
11045: LD_INT 0
11047: PPUSH
11048: PPUSH
11049: PPUSH
11050: PPUSH
// PrepareTiger ( 0 ) ;
11051: LD_INT 0
11053: PPUSH
11054: CALL 54522 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
11058: LD_ADDR_VAR 0 2
11062: PUSH
11063: DOUBLE
11064: LD_INT 1
11066: DEC
11067: ST_TO_ADDR
11068: LD_INT 10
11070: PUSH
11071: LD_INT 8
11073: PUSH
11074: LD_INT 5
11076: PUSH
11077: LD_INT 5
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: PUSH
11086: LD_OWVAR 67
11090: ARRAY
11091: PUSH
11092: FOR_TO
11093: IFFALSE 11112
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11095: CALL_OW 44
11099: PPUSH
11100: LD_INT 7
11102: PPUSH
11103: LD_INT 0
11105: PPUSH
11106: CALL_OW 49
11110: GO 11092
11112: POP
11113: POP
// PrepareBird ;
11114: CALL 54703 0 0
// for i := 1 to 3 do
11118: LD_ADDR_VAR 0 2
11122: PUSH
11123: DOUBLE
11124: LD_INT 1
11126: DEC
11127: ST_TO_ADDR
11128: LD_INT 3
11130: PUSH
11131: FOR_TO
11132: IFFALSE 11151
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11134: CALL_OW 44
11138: PPUSH
11139: LD_INT 7
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 49
11149: GO 11131
11151: POP
11152: POP
// PrepareHorse ;
11153: CALL 54743 0 0
// for i := 1 to 3 do
11157: LD_ADDR_VAR 0 2
11161: PUSH
11162: DOUBLE
11163: LD_INT 1
11165: DEC
11166: ST_TO_ADDR
11167: LD_INT 3
11169: PUSH
11170: FOR_TO
11171: IFFALSE 11190
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11173: CALL_OW 44
11177: PPUSH
11178: LD_INT 7
11180: PPUSH
11181: LD_INT 0
11183: PPUSH
11184: CALL_OW 49
11188: GO 11170
11190: POP
11191: POP
// PrepareFrog ;
11192: CALL 54623 0 0
// for i := 1 to 3 do
11196: LD_ADDR_VAR 0 2
11200: PUSH
11201: DOUBLE
11202: LD_INT 1
11204: DEC
11205: ST_TO_ADDR
11206: LD_INT 3
11208: PUSH
11209: FOR_TO
11210: IFFALSE 11229
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11212: CALL_OW 44
11216: PPUSH
11217: LD_INT 8
11219: PPUSH
11220: LD_INT 0
11222: PPUSH
11223: CALL_OW 49
11227: GO 11209
11229: POP
11230: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11231: LD_ADDR_VAR 0 4
11235: PUSH
11236: LD_INT 3
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: LD_INT 2
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: PUSH
11254: LD_OWVAR 67
11258: ARRAY
11259: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11260: LD_ADDR_VAR 0 3
11264: PUSH
11265: LD_INT 18
11267: PUSH
11268: LD_INT 19
11270: PUSH
11271: LD_INT 20
11273: PUSH
11274: LD_INT 21
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: ST_TO_ADDR
// PrepareMastodont ;
11283: CALL 54783 0 0
// for i := 1 to amount do
11287: LD_ADDR_VAR 0 2
11291: PUSH
11292: DOUBLE
11293: LD_INT 1
11295: DEC
11296: ST_TO_ADDR
11297: LD_VAR 0 4
11301: PUSH
11302: FOR_TO
11303: IFFALSE 11340
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11305: CALL_OW 45
11309: PPUSH
11310: LD_VAR 0 3
11314: PUSH
11315: LD_VAR 0 2
11319: PUSH
11320: LD_INT 1
11322: MINUS
11323: PUSH
11324: LD_OWVAR 67
11328: PLUS
11329: ARRAY
11330: PPUSH
11331: LD_INT 0
11333: PPUSH
11334: CALL_OW 49
11338: GO 11302
11340: POP
11341: POP
// PrepareApeman ( 0 ) ;
11342: LD_INT 0
11344: PPUSH
11345: CALL 54414 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11349: LD_ADDR_OWVAR 31
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: LD_INT 0
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11372: LD_ADDR_VAR 0 2
11376: PUSH
11377: DOUBLE
11378: LD_INT 1
11380: DEC
11381: ST_TO_ADDR
11382: LD_INT 9
11384: PUSH
11385: LD_INT 7
11387: PUSH
11388: LD_INT 6
11390: PUSH
11391: LD_INT 5
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: PUSH
11400: LD_OWVAR 67
11404: ARRAY
11405: PUSH
11406: FOR_TO
11407: IFFALSE 11426
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11409: CALL_OW 44
11413: PPUSH
11414: LD_INT 6
11416: PPUSH
11417: LD_INT 0
11419: PPUSH
11420: CALL_OW 49
11424: GO 11406
11426: POP
11427: POP
// for i := 1 to [ 8 , 7 , 6 , 5 ] [ Difficulty ] do
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: DOUBLE
11434: LD_INT 1
11436: DEC
11437: ST_TO_ADDR
11438: LD_INT 8
11440: PUSH
11441: LD_INT 7
11443: PUSH
11444: LD_INT 6
11446: PUSH
11447: LD_INT 5
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_OWVAR 67
11460: ARRAY
11461: PUSH
11462: FOR_TO
11463: IFFALSE 11488
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 8 , false ) ;
11465: CALL_OW 44
11469: PPUSH
11470: LD_INT 274
11472: PPUSH
11473: LD_INT 133
11475: PPUSH
11476: LD_INT 8
11478: PPUSH
11479: LD_INT 0
11481: PPUSH
11482: CALL_OW 50
11486: GO 11462
11488: POP
11489: POP
// for i := 1 to [ 6 , 5 , 4 , 4 ] [ Difficulty ] do
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: DOUBLE
11496: LD_INT 1
11498: DEC
11499: ST_TO_ADDR
11500: LD_INT 6
11502: PUSH
11503: LD_INT 5
11505: PUSH
11506: LD_INT 4
11508: PUSH
11509: LD_INT 4
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: PUSH
11518: LD_OWVAR 67
11522: ARRAY
11523: PUSH
11524: FOR_TO
11525: IFFALSE 11550
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 8 , false ) ;
11527: CALL_OW 44
11531: PPUSH
11532: LD_INT 208
11534: PPUSH
11535: LD_INT 142
11537: PPUSH
11538: LD_INT 8
11540: PPUSH
11541: LD_INT 0
11543: PPUSH
11544: CALL_OW 50
11548: GO 11524
11550: POP
11551: POP
// end ;
11552: LD_VAR 0 1
11556: RET
// export function AreInArea ( units , area ) ; var i ; begin
11557: LD_INT 0
11559: PPUSH
11560: PPUSH
// result := false ;
11561: LD_ADDR_VAR 0 3
11565: PUSH
11566: LD_INT 0
11568: ST_TO_ADDR
// if not units then
11569: LD_VAR 0 1
11573: NOT
11574: IFFALSE 11578
// exit ;
11576: GO 11644
// for i in units do
11578: LD_ADDR_VAR 0 4
11582: PUSH
11583: LD_VAR 0 1
11587: PUSH
11588: FOR_IN
11589: IFFALSE 11642
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11591: LD_VAR 0 4
11595: PPUSH
11596: LD_VAR 0 2
11600: PPUSH
11601: CALL_OW 308
11605: PUSH
11606: LD_VAR 0 4
11610: PPUSH
11611: CALL_OW 310
11615: PPUSH
11616: LD_VAR 0 2
11620: PPUSH
11621: CALL_OW 308
11625: OR
11626: IFFALSE 11640
// begin result := true ;
11628: LD_ADDR_VAR 0 3
11632: PUSH
11633: LD_INT 1
11635: ST_TO_ADDR
// exit ;
11636: POP
11637: POP
11638: GO 11644
// end ;
11640: GO 11588
11642: POP
11643: POP
// end ; end_of_file
11644: LD_VAR 0 3
11648: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11649: LD_INT 0
11651: PPUSH
11652: PPUSH
11653: PPUSH
11654: PPUSH
11655: PPUSH
// SaveForQuickRestart ;
11656: CALL_OW 22
// InGameOn ;
11660: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11664: LD_INT 84
11666: PPUSH
11667: LD_INT 28
11669: PPUSH
11670: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11674: LD_INT 2
11676: PPUSH
11677: LD_INT 9
11679: PPUSH
11680: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11684: LD_EXP 22
11688: PPUSH
11689: LD_INT 90
11691: PPUSH
11692: LD_INT 30
11694: PPUSH
11695: CALL_OW 111
// uc_side := 1 ;
11699: LD_ADDR_OWVAR 20
11703: PUSH
11704: LD_INT 1
11706: ST_TO_ADDR
// uc_nation := nation_american ;
11707: LD_ADDR_OWVAR 21
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11715: LD_INT 3
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: LD_INT 9
11726: PPUSH
11727: LD_INT 66
11729: PPUSH
11730: CALL 25284 0 5
// veh := CreateVehicle ;
11734: LD_ADDR_VAR 0 4
11738: PUSH
11739: CALL_OW 45
11743: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11744: LD_VAR 0 4
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11756: LD_VAR 0 4
11760: PPUSH
11761: LD_INT 80
11763: PPUSH
11764: LD_INT 27
11766: PPUSH
11767: LD_INT 0
11769: PPUSH
11770: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11774: LD_INT 1
11776: PPUSH
11777: LD_INT 8
11779: PPUSH
11780: CALL_OW 383
// mech := CreateHuman ;
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: CALL_OW 44
11793: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11794: LD_VAR 0 3
11798: PPUSH
11799: LD_VAR 0 4
11803: PPUSH
11804: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11808: LD_INT 35
11810: PPUSH
11811: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11815: LD_INT 90
11817: PPUSH
11818: LD_INT 30
11820: PPUSH
11821: CALL_OW 428
11825: IFFALSE 11808
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
11827: LD_INT 80
11829: PPUSH
11830: LD_INT 27
11832: PPUSH
11833: LD_INT 2
11835: PPUSH
11836: LD_INT 6
11838: NEG
11839: PPUSH
11840: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
11844: LD_INT 80
11846: PPUSH
11847: LD_INT 27
11849: PPUSH
11850: CALL_OW 86
// DialogueOn ;
11854: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
11858: LD_EXP 22
11862: PPUSH
11863: LD_STRING DH-Start-1
11865: PPUSH
11866: CALL_OW 88
// DialogueOff ;
11870: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11874: LD_EXP 22
11878: PPUSH
11879: LD_VAR 0 4
11883: PPUSH
11884: CALL_OW 115
// wait ( 0 0$1 ) ;
11888: LD_INT 35
11890: PPUSH
11891: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
11895: LD_EXP 22
11899: PPUSH
11900: CALL_OW 310
11904: PPUSH
11905: LD_INT 200
11907: PPUSH
11908: CALL_OW 234
// wait ( 0 0$0.3 ) ;
11912: LD_INT 10
11914: PPUSH
11915: CALL_OW 67
// DialogueOn ;
11919: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
11923: LD_EXP 22
11927: PPUSH
11928: LD_STRING DH-Start-2
11930: PPUSH
11931: CALL_OW 88
// DialogueOff ;
11935: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11939: LD_EXP 22
11943: PPUSH
11944: LD_VAR 0 4
11948: PPUSH
11949: CALL_OW 115
// wait ( 0 0$0.2 ) ;
11953: LD_INT 7
11955: PPUSH
11956: CALL_OW 67
// ComCrawl ( Heike ) ;
11960: LD_EXP 22
11964: PPUSH
11965: CALL_OW 137
// wait ( 0 0$3 ) ;
11969: LD_INT 105
11971: PPUSH
11972: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
11976: LD_EXP 25
11980: PPUSH
11981: LD_INT 82
11983: PPUSH
11984: LD_INT 43
11986: PPUSH
11987: LD_INT 0
11989: PPUSH
11990: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
11994: LD_EXP 23
11998: PPUSH
11999: LD_EXP 25
12003: PPUSH
12004: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
12008: LD_EXP 23
12012: PPUSH
12013: LD_INT 79
12015: PPUSH
12016: LD_INT 32
12018: PPUSH
12019: CALL_OW 111
// wait ( 0 0$1 ) ;
12023: LD_INT 35
12025: PPUSH
12026: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
12030: LD_INT 79
12032: PPUSH
12033: LD_INT 32
12035: PPUSH
12036: LD_INT 2
12038: PPUSH
12039: LD_INT 8
12041: NEG
12042: PPUSH
12043: CALL_OW 330
// wait ( 0 0$3 ) ;
12047: LD_INT 105
12049: PPUSH
12050: CALL_OW 67
// SetLives ( veh , 200 ) ;
12054: LD_VAR 0 4
12058: PPUSH
12059: LD_INT 200
12061: PPUSH
12062: CALL_OW 234
// wait ( 0 0$1 ) ;
12066: LD_INT 35
12068: PPUSH
12069: CALL_OW 67
// SetLives ( mech , 10 ) ;
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 10
12080: PPUSH
12081: CALL_OW 234
// wait ( 0 0$2 ) ;
12085: LD_INT 70
12087: PPUSH
12088: CALL_OW 67
// ComWalk ( Heike ) ;
12092: LD_EXP 22
12096: PPUSH
12097: CALL_OW 138
// wait ( 1 ) ;
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
12108: LD_EXP 22
12112: PPUSH
12113: LD_INT 81
12115: PPUSH
12116: LD_INT 25
12118: PPUSH
12119: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
12123: LD_EXP 22
12127: PPUSH
12128: LD_INT 72
12130: PPUSH
12131: LD_INT 25
12133: PPUSH
12134: CALL_OW 171
// wait ( 0 0$3 ) ;
12138: LD_INT 105
12140: PPUSH
12141: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12145: LD_EXP 23
12149: PPUSH
12150: CALL_OW 121
// wait ( 1 ) ;
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12161: LD_EXP 23
12165: PPUSH
12166: LD_INT 77
12168: PPUSH
12169: LD_INT 28
12171: PPUSH
12172: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12176: LD_EXP 23
12180: PPUSH
12181: LD_EXP 22
12185: PPUSH
12186: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12190: LD_EXP 23
12194: PPUSH
12195: LD_STRING DO-Start-3
12197: PPUSH
12198: CALL_OW 88
// repeat wait ( 3 ) ;
12202: LD_INT 3
12204: PPUSH
12205: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12209: LD_EXP 22
12213: PPUSH
12214: LD_INT 72
12216: PPUSH
12217: LD_INT 25
12219: PPUSH
12220: CALL_OW 307
12224: IFFALSE 12202
// ComHold ( Heike ) ;
12226: LD_EXP 22
12230: PPUSH
12231: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12235: LD_EXP 23
12239: PPUSH
12240: LD_EXP 22
12244: PPUSH
12245: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12249: LD_EXP 22
12253: PPUSH
12254: LD_EXP 23
12258: PPUSH
12259: CALL_OW 112
// wait ( 0 0$1 ) ;
12263: LD_INT 35
12265: PPUSH
12266: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12270: LD_EXP 22
12274: PPUSH
12275: LD_EXP 23
12279: PPUSH
12280: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12284: LD_EXP 22
12288: PPUSH
12289: LD_STRING DH-Start-4
12291: PPUSH
12292: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12296: LD_EXP 23
12300: PPUSH
12301: LD_STRING DO-Start-5
12303: PPUSH
12304: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12308: LD_EXP 22
12312: PPUSH
12313: LD_STRING DH-Start-6
12315: PPUSH
12316: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12320: LD_EXP 23
12324: PPUSH
12325: LD_STRING DO-Start-7
12327: PPUSH
12328: CALL_OW 88
// if Query ( QOmar ) = 2 then
12332: LD_STRING QOmar
12334: PPUSH
12335: CALL_OW 97
12339: PUSH
12340: LD_INT 2
12342: EQUAL
12343: IFFALSE 12648
// begin Say ( Heike , DH-QuestionN-1 ) ;
12345: LD_EXP 22
12349: PPUSH
12350: LD_STRING DH-QuestionN-1
12352: PPUSH
12353: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12357: LD_EXP 22
12361: PPUSH
12362: LD_INT 58
12364: PPUSH
12365: LD_INT 27
12367: PPUSH
12368: CALL_OW 111
// wait ( 0 0$2 ) ;
12372: LD_INT 70
12374: PPUSH
12375: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12379: LD_EXP 23
12383: PPUSH
12384: LD_EXP 25
12388: PPUSH
12389: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12393: LD_INT 79
12395: PPUSH
12396: LD_INT 32
12398: PPUSH
12399: LD_INT 2
12401: PPUSH
12402: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12406: LD_INT 80
12408: PPUSH
12409: LD_INT 27
12411: PPUSH
12412: LD_INT 2
12414: PPUSH
12415: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12419: LD_INT 58
12421: PPUSH
12422: LD_INT 27
12424: PPUSH
12425: CALL_OW 84
// repeat wait ( 3 ) ;
12429: LD_INT 3
12431: PPUSH
12432: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12436: LD_EXP 22
12440: PPUSH
12441: LD_INT 88
12443: PPUSH
12444: LD_INT 27
12446: PPUSH
12447: CALL_OW 297
12451: IFFALSE 12429
// uc_side := 1 ;
12453: LD_ADDR_OWVAR 20
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// uc_nation := nation_american ;
12461: LD_ADDR_OWVAR 21
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// amTroops := [ ] ;
12469: LD_ADDR_VAR 0 5
12473: PUSH
12474: EMPTY
12475: ST_TO_ADDR
// for i := 1 to 3 do
12476: LD_ADDR_VAR 0 2
12480: PUSH
12481: DOUBLE
12482: LD_INT 1
12484: DEC
12485: ST_TO_ADDR
12486: LD_INT 3
12488: PUSH
12489: FOR_TO
12490: IFFALSE 12583
// begin PrepareSoldier ( false , 10 ) ;
12492: LD_INT 0
12494: PPUSH
12495: LD_INT 10
12497: PPUSH
12498: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12502: LD_ADDR_VAR 0 5
12506: PUSH
12507: LD_VAR 0 5
12511: PPUSH
12512: CALL_OW 44
12516: PPUSH
12517: CALL 58146 0 2
12521: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12522: LD_VAR 0 5
12526: PUSH
12527: LD_VAR 0 2
12531: ARRAY
12532: PPUSH
12533: LD_INT 2
12535: PPUSH
12536: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12540: LD_VAR 0 5
12544: PUSH
12545: LD_VAR 0 2
12549: ARRAY
12550: PPUSH
12551: LD_INT 10
12553: PPUSH
12554: LD_INT 0
12556: PPUSH
12557: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12561: LD_VAR 0 5
12565: PUSH
12566: LD_VAR 0 2
12570: ARRAY
12571: PPUSH
12572: LD_EXP 22
12576: PPUSH
12577: CALL_OW 115
// end ;
12581: GO 12489
12583: POP
12584: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12585: LD_EXP 22
12589: PPUSH
12590: LD_VAR 0 5
12594: PUSH
12595: LD_INT 1
12597: ARRAY
12598: PPUSH
12599: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12603: LD_INT 35
12605: PPUSH
12606: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12610: LD_EXP 22
12614: PPUSH
12615: CALL_OW 301
12619: PUSH
12620: LD_EXP 22
12624: PPUSH
12625: CALL_OW 303
12629: OR
12630: IFFALSE 12603
// wait ( 0 0$2 ) ;
12632: LD_INT 70
12634: PPUSH
12635: CALL_OW 67
// YouLost ( Heike ) ;
12639: LD_STRING Heike
12641: PPUSH
12642: CALL_OW 104
// exit ;
12646: GO 13568
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12648: LD_EXP 22
12652: PPUSH
12653: LD_STRING DH-QuestionY-1
12655: PPUSH
12656: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12660: LD_INT 10
12662: PPUSH
12663: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12667: LD_EXP 23
12671: PPUSH
12672: LD_STRING DO-Story-1
12674: PPUSH
12675: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12679: LD_EXP 23
12683: PPUSH
12684: LD_STRING DO-Story-2
12686: PPUSH
12687: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12691: LD_EXP 23
12695: PPUSH
12696: LD_STRING DO-Story-3
12698: PPUSH
12699: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12703: LD_EXP 23
12707: PPUSH
12708: LD_STRING DO-Story-4
12710: PPUSH
12711: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12715: LD_EXP 22
12719: PPUSH
12720: LD_STRING DH-Story-5
12722: PPUSH
12723: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12727: LD_EXP 23
12731: PPUSH
12732: LD_STRING DO-Story-6
12734: PPUSH
12735: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12739: LD_EXP 23
12743: PPUSH
12744: LD_STRING DO-Story-7
12746: PPUSH
12747: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12751: LD_EXP 22
12755: PPUSH
12756: LD_INT 82
12758: PPUSH
12759: LD_INT 44
12761: PPUSH
12762: CALL_OW 111
// AddComHold ( Heike ) ;
12766: LD_EXP 22
12770: PPUSH
12771: CALL_OW 200
// wait ( 0 0$4 ) ;
12775: LD_INT 140
12777: PPUSH
12778: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12782: LD_EXP 23
12786: PPUSH
12787: LD_INT 82
12789: PPUSH
12790: LD_INT 41
12792: PPUSH
12793: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12797: LD_EXP 23
12801: PPUSH
12802: LD_EXP 22
12806: PPUSH
12807: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12811: LD_INT 35
12813: PPUSH
12814: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12818: LD_EXP 22
12822: PPUSH
12823: LD_INT 82
12825: PPUSH
12826: LD_INT 44
12828: PPUSH
12829: CALL_OW 307
12833: IFFALSE 12811
// ComTurnXY ( Heike , 81 , 47 ) ;
12835: LD_EXP 22
12839: PPUSH
12840: LD_INT 81
12842: PPUSH
12843: LD_INT 47
12845: PPUSH
12846: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
12850: LD_EXP 22
12854: PPUSH
12855: LD_STRING DH-Story-8
12857: PPUSH
12858: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
12862: LD_EXP 23
12866: PPUSH
12867: LD_STRING DO-Story-9
12869: PPUSH
12870: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
12874: LD_EXP 23
12878: PPUSH
12879: LD_STRING DO-Story-10
12881: PPUSH
12882: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
12886: LD_EXP 22
12890: PPUSH
12891: LD_EXP 23
12895: PPUSH
12896: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
12900: LD_EXP 22
12904: PPUSH
12905: LD_STRING DH-Story-11
12907: PPUSH
12908: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
12912: LD_EXP 23
12916: PPUSH
12917: LD_EXP 22
12921: PPUSH
12922: CALL_OW 112
// wait ( 0 0$0.3 ) ;
12926: LD_INT 10
12928: PPUSH
12929: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12933: LD_EXP 23
12937: PPUSH
12938: LD_EXP 22
12942: PPUSH
12943: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
12947: LD_EXP 23
12951: PPUSH
12952: LD_STRING DO-Story-12
12954: PPUSH
12955: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
12959: LD_EXP 22
12963: PPUSH
12964: LD_STRING DH-Story-13
12966: PPUSH
12967: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
12971: LD_EXP 23
12975: PPUSH
12976: LD_STRING DO-Story-14
12978: PPUSH
12979: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
12983: LD_EXP 23
12987: PPUSH
12988: LD_STRING DO-Story-15
12990: PPUSH
12991: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
12995: LD_INT 84
12997: PPUSH
12998: LD_INT 48
13000: PPUSH
13001: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
13005: LD_EXP 22
13009: PPUSH
13010: LD_INT 84
13012: PPUSH
13013: LD_INT 48
13015: PPUSH
13016: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
13020: LD_EXP 22
13024: PPUSH
13025: LD_INT 84
13027: PPUSH
13028: LD_INT 49
13030: PPUSH
13031: CALL_OW 178
// wait ( 0 0$1 ) ;
13035: LD_INT 35
13037: PPUSH
13038: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
13042: LD_EXP 23
13046: PPUSH
13047: LD_EXP 22
13051: PPUSH
13052: CALL_OW 112
// wait ( 0 0$1 ) ;
13056: LD_INT 35
13058: PPUSH
13059: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13063: LD_EXP 23
13067: PPUSH
13068: LD_EXP 22
13072: PPUSH
13073: CALL_OW 119
// wait ( 0 0$0.3 ) ;
13077: LD_INT 10
13079: PPUSH
13080: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
13084: LD_EXP 23
13088: PPUSH
13089: LD_STRING DO-Story-16
13091: PPUSH
13092: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
13096: LD_STRING QOmar2
13098: PPUSH
13099: CALL_OW 97
13103: PUSH
13104: LD_INT 2
13106: EQUAL
13107: IFFALSE 13445
// begin ComTurnUnit ( Heike , Omar ) ;
13109: LD_EXP 22
13113: PPUSH
13114: LD_EXP 23
13118: PPUSH
13119: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
13123: LD_EXP 22
13127: PPUSH
13128: LD_STRING DH-QuestionN-1
13130: PPUSH
13131: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
13135: LD_EXP 22
13139: PPUSH
13140: LD_INT 79
13142: PPUSH
13143: LD_INT 57
13145: PPUSH
13146: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13150: LD_EXP 22
13154: PPUSH
13155: LD_INT 68
13157: PPUSH
13158: LD_INT 53
13160: PPUSH
13161: CALL_OW 171
// wait ( 0 0$2 ) ;
13165: LD_INT 70
13167: PPUSH
13168: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13172: LD_EXP 23
13176: PPUSH
13177: LD_EXP 25
13181: PPUSH
13182: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13186: LD_INT 79
13188: PPUSH
13189: LD_INT 32
13191: PPUSH
13192: LD_INT 2
13194: PPUSH
13195: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13199: LD_INT 80
13201: PPUSH
13202: LD_INT 27
13204: PPUSH
13205: LD_INT 2
13207: PPUSH
13208: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13212: LD_INT 68
13214: PPUSH
13215: LD_INT 53
13217: PPUSH
13218: CALL_OW 84
// repeat wait ( 3 ) ;
13222: LD_INT 3
13224: PPUSH
13225: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13229: LD_EXP 22
13233: PPUSH
13234: LD_INT 68
13236: PPUSH
13237: LD_INT 53
13239: PPUSH
13240: CALL_OW 297
13244: PUSH
13245: LD_INT 6
13247: LESS
13248: IFFALSE 13222
// uc_side := 1 ;
13250: LD_ADDR_OWVAR 20
13254: PUSH
13255: LD_INT 1
13257: ST_TO_ADDR
// uc_nation := nation_american ;
13258: LD_ADDR_OWVAR 21
13262: PUSH
13263: LD_INT 1
13265: ST_TO_ADDR
// amTroops := [ ] ;
13266: LD_ADDR_VAR 0 5
13270: PUSH
13271: EMPTY
13272: ST_TO_ADDR
// for i := 1 to 3 do
13273: LD_ADDR_VAR 0 2
13277: PUSH
13278: DOUBLE
13279: LD_INT 1
13281: DEC
13282: ST_TO_ADDR
13283: LD_INT 3
13285: PUSH
13286: FOR_TO
13287: IFFALSE 13380
// begin PrepareSoldier ( false , 10 ) ;
13289: LD_INT 0
13291: PPUSH
13292: LD_INT 10
13294: PPUSH
13295: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13299: LD_ADDR_VAR 0 5
13303: PUSH
13304: LD_VAR 0 5
13308: PPUSH
13309: CALL_OW 44
13313: PPUSH
13314: CALL 58146 0 2
13318: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13319: LD_VAR 0 5
13323: PUSH
13324: LD_VAR 0 2
13328: ARRAY
13329: PPUSH
13330: LD_INT 2
13332: PPUSH
13333: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13337: LD_VAR 0 5
13341: PUSH
13342: LD_VAR 0 2
13346: ARRAY
13347: PPUSH
13348: LD_INT 11
13350: PPUSH
13351: LD_INT 0
13353: PPUSH
13354: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13358: LD_VAR 0 5
13362: PUSH
13363: LD_VAR 0 2
13367: ARRAY
13368: PPUSH
13369: LD_EXP 22
13373: PPUSH
13374: CALL_OW 115
// end ;
13378: GO 13286
13380: POP
13381: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13382: LD_EXP 22
13386: PPUSH
13387: LD_VAR 0 5
13391: PUSH
13392: LD_INT 1
13394: ARRAY
13395: PPUSH
13396: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13400: LD_INT 35
13402: PPUSH
13403: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13407: LD_EXP 22
13411: PPUSH
13412: CALL_OW 301
13416: PUSH
13417: LD_EXP 22
13421: PPUSH
13422: CALL_OW 303
13426: OR
13427: IFFALSE 13400
// wait ( 0 0$2 ) ;
13429: LD_INT 70
13431: PPUSH
13432: CALL_OW 67
// YouLost ( Heike ) ;
13436: LD_STRING Heike
13438: PPUSH
13439: CALL_OW 104
// exit ;
13443: GO 13568
// end ; Say ( Omar , DO-Objective-1 ) ;
13445: LD_EXP 23
13449: PPUSH
13450: LD_STRING DO-Objective-1
13452: PPUSH
13453: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13457: LD_EXP 22
13461: PPUSH
13462: LD_EXP 23
13466: PPUSH
13467: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13471: LD_EXP 22
13475: PPUSH
13476: LD_STRING DH-Objective-2
13478: PPUSH
13479: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13483: LD_EXP 23
13487: PPUSH
13488: LD_STRING DO-Objective-3
13490: PPUSH
13491: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13495: LD_INT 79
13497: PPUSH
13498: LD_INT 32
13500: PPUSH
13501: LD_INT 2
13503: PPUSH
13504: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13508: LD_INT 80
13510: PPUSH
13511: LD_INT 27
13513: PPUSH
13514: LD_INT 2
13516: PPUSH
13517: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13521: LD_EXP 23
13525: PPUSH
13526: LD_INT 2
13528: PPUSH
13529: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13533: LD_EXP 25
13537: PPUSH
13538: LD_INT 2
13540: PPUSH
13541: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13545: LD_STRING O1
13547: PPUSH
13548: CALL_OW 337
// InGameOff ;
13552: CALL_OW 9
// gameActive := true ;
13556: LD_ADDR_EXP 19
13560: PUSH
13561: LD_INT 1
13563: ST_TO_ADDR
// SaveForQuickRestart ;
13564: CALL_OW 22
// end ;
13568: LD_VAR 0 1
13572: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13573: LD_EXP 19
13577: PUSH
13578: LD_EXP 7
13582: NOT
13583: AND
13584: PUSH
13585: LD_INT 4
13587: PPUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PPUSH
13598: CALL_OW 70
13602: AND
13603: IFFALSE 13754
13605: GO 13607
13607: DISABLE
13608: LD_INT 0
13610: PPUSH
// begin spotArabianBase := true ;
13611: LD_ADDR_EXP 7
13615: PUSH
13616: LD_INT 1
13618: ST_TO_ADDR
// DialogueOn ;
13619: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13623: LD_INT 232
13625: PPUSH
13626: LD_INT 101
13628: PPUSH
13629: LD_INT 2
13631: PPUSH
13632: LD_INT 22
13634: NEG
13635: PPUSH
13636: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13640: LD_INT 232
13642: PPUSH
13643: LD_INT 101
13645: PPUSH
13646: LD_INT 2
13648: PPUSH
13649: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13653: LD_INT 232
13655: PPUSH
13656: LD_INT 101
13658: PPUSH
13659: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13663: LD_ADDR_VAR 0 1
13667: PUSH
13668: LD_INT 4
13670: PPUSH
13671: LD_INT 22
13673: PUSH
13674: LD_INT 5
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PPUSH
13681: CALL_OW 70
13685: PUSH
13686: FOR_IN
13687: IFFALSE 13703
// SetSide ( i , 2 ) ;
13689: LD_VAR 0 1
13693: PPUSH
13694: LD_INT 2
13696: PPUSH
13697: CALL_OW 235
13701: GO 13686
13703: POP
13704: POP
// if not spotAmericanBase then
13705: LD_EXP 6
13709: NOT
13710: IFFALSE 13726
// Say ( Omar , DO-ArBase-1a ) else
13712: LD_EXP 23
13716: PPUSH
13717: LD_STRING DO-ArBase-1a
13719: PPUSH
13720: CALL_OW 88
13724: GO 13738
// Say ( Omar , DO-ArBase-1b ) ;
13726: LD_EXP 23
13730: PPUSH
13731: LD_STRING DO-ArBase-1b
13733: PPUSH
13734: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13738: LD_EXP 22
13742: PPUSH
13743: LD_STRING DH-ArBase-2
13745: PPUSH
13746: CALL_OW 88
// DialogueOff ;
13750: CALL_OW 7
// end ;
13754: PPOPN 1
13756: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13757: LD_EXP 19
13761: PUSH
13762: LD_INT 87
13764: PPUSH
13765: CALL_OW 306
13769: PUSH
13770: LD_INT 87
13772: PPUSH
13773: CALL_OW 313
13777: OR
13778: AND
13779: PUSH
13780: LD_EXP 22
13784: PPUSH
13785: CALL_OW 302
13789: AND
13790: PUSH
13791: LD_EXP 23
13795: PPUSH
13796: CALL_OW 302
13800: AND
13801: IFFALSE 14145
13803: GO 13805
13805: DISABLE
// begin DialogueOn ;
13806: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13810: LD_EXP 22
13814: PPUSH
13815: LD_STRING DH-Fac-1
13817: PPUSH
13818: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13822: LD_EXP 23
13826: PPUSH
13827: LD_STRING DOm-Fac-2
13829: PPUSH
13830: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
13834: LD_STRING 03_CargoRecycled
13836: PPUSH
13837: LD_INT 0
13839: PPUSH
13840: CALL_OW 30
13844: IFFALSE 13859
// SetTech ( tech_cargo , 2 , state_researched ) ;
13846: LD_INT 83
13848: PPUSH
13849: LD_INT 2
13851: PPUSH
13852: LD_INT 2
13854: PPUSH
13855: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
13859: LD_STRING 09_Markov
13861: PPUSH
13862: CALL_OW 28
13866: IFFALSE 13981
// begin Say ( Heike , DH-Fac-3a ) ;
13868: LD_EXP 22
13872: PPUSH
13873: LD_STRING DH-Fac-3a
13875: PPUSH
13876: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
13880: LD_INT 69
13882: PPUSH
13883: LD_INT 2
13885: PPUSH
13886: LD_INT 2
13888: PPUSH
13889: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
13893: LD_INT 39
13895: PPUSH
13896: LD_INT 2
13898: PPUSH
13899: LD_INT 2
13901: PPUSH
13902: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
13906: LD_INT 6
13908: PPUSH
13909: LD_INT 2
13911: PPUSH
13912: LD_INT 2
13914: PPUSH
13915: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13919: LD_INT 15
13921: PPUSH
13922: LD_INT 2
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13932: LD_EXP 22
13936: PPUSH
13937: LD_INT 3
13939: PPUSH
13940: CALL_OW 259
13944: PUSH
13945: LD_INT 10
13947: LESS
13948: IFFALSE 13979
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13950: LD_EXP 22
13954: PPUSH
13955: LD_INT 3
13957: PPUSH
13958: LD_EXP 22
13962: PPUSH
13963: LD_INT 3
13965: PPUSH
13966: CALL_OW 259
13970: PUSH
13971: LD_INT 1
13973: PLUS
13974: PPUSH
13975: CALL_OW 237
// end else
13979: GO 14134
// if TestCharacters ( 09_Olaf ) then
13981: LD_STRING 09_Olaf
13983: PPUSH
13984: CALL_OW 28
13988: IFFALSE 14077
// begin Say ( Heike , DH-Fac-3b ) ;
13990: LD_EXP 22
13994: PPUSH
13995: LD_STRING DH-Fac-3b
13997: PPUSH
13998: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14002: LD_INT 6
14004: PPUSH
14005: LD_INT 2
14007: PPUSH
14008: LD_INT 2
14010: PPUSH
14011: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14015: LD_INT 15
14017: PPUSH
14018: LD_INT 2
14020: PPUSH
14021: LD_INT 2
14023: PPUSH
14024: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14028: LD_EXP 22
14032: PPUSH
14033: LD_INT 3
14035: PPUSH
14036: CALL_OW 259
14040: PUSH
14041: LD_INT 10
14043: LESS
14044: IFFALSE 14075
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14046: LD_EXP 22
14050: PPUSH
14051: LD_INT 3
14053: PPUSH
14054: LD_EXP 22
14058: PPUSH
14059: LD_INT 3
14061: PPUSH
14062: CALL_OW 259
14066: PUSH
14067: LD_INT 1
14069: PLUS
14070: PPUSH
14071: CALL_OW 237
// end else
14075: GO 14134
// if GetSkill ( Heike , skill_mechanical ) > 5 then
14077: LD_EXP 22
14081: PPUSH
14082: LD_INT 3
14084: PPUSH
14085: CALL_OW 259
14089: PUSH
14090: LD_INT 5
14092: GREATER
14093: IFFALSE 14122
// begin Say ( Heike , DH-Fac-3c ) ;
14095: LD_EXP 22
14099: PPUSH
14100: LD_STRING DH-Fac-3c
14102: PPUSH
14103: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14107: LD_INT 6
14109: PPUSH
14110: LD_INT 2
14112: PPUSH
14113: LD_INT 2
14115: PPUSH
14116: CALL_OW 322
// end else
14120: GO 14134
// Say ( Heike , DH-Fac-3d ) ;
14122: LD_EXP 22
14126: PPUSH
14127: LD_STRING DH-Fac-3d
14129: PPUSH
14130: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
14134: LD_STRING ARemote
14136: PPUSH
14137: CALL_OW 337
// DialogueOff ;
14141: CALL_OW 7
// end ;
14145: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14146: LD_EXP 19
14150: PUSH
14151: LD_INT 89
14153: PPUSH
14154: CALL_OW 306
14158: PUSH
14159: LD_INT 89
14161: PPUSH
14162: CALL_OW 313
14166: OR
14167: AND
14168: PUSH
14169: LD_EXP 22
14173: PPUSH
14174: CALL_OW 302
14178: AND
14179: PUSH
14180: LD_EXP 23
14184: PPUSH
14185: CALL_OW 302
14189: AND
14190: IFFALSE 14418
14192: GO 14194
14194: DISABLE
// begin DialogueOn ;
14195: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14199: LD_EXP 22
14203: PPUSH
14204: LD_STRING DH-Lab-1
14206: PPUSH
14207: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14211: LD_EXP 23
14215: PPUSH
14216: LD_STRING DOm-Lab-2
14218: PPUSH
14219: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14223: LD_STRING 09_Aviradze
14225: PPUSH
14226: CALL_OW 28
14230: IFFALSE 14285
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14232: LD_INT 1
14234: PPUSH
14235: LD_INT 2
14237: PPUSH
14238: LD_INT 2
14240: PPUSH
14241: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14245: LD_INT 2
14247: PPUSH
14248: LD_INT 2
14250: PPUSH
14251: LD_INT 2
14253: PPUSH
14254: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14258: LD_INT 11
14260: PPUSH
14261: LD_INT 2
14263: PPUSH
14264: LD_INT 2
14266: PPUSH
14267: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14271: LD_EXP 22
14275: PPUSH
14276: LD_STRING DH-Lab-4a
14278: PPUSH
14279: CALL_OW 88
// end else
14283: GO 14297
// Say ( Heike , DH-Lab-4b ) ;
14285: LD_EXP 22
14289: PPUSH
14290: LD_STRING DH-Lab-4b
14292: PPUSH
14293: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14297: LD_STRING 05_DrugsTested
14299: PPUSH
14300: LD_EXP 1
14304: PPUSH
14305: CALL_OW 30
14309: IFFALSE 14336
// begin Say ( Heike , DH-Lab-5a ) ;
14311: LD_EXP 22
14315: PPUSH
14316: LD_STRING DH-Lab-5a
14318: PPUSH
14319: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14323: LD_INT 5
14325: PPUSH
14326: LD_INT 2
14328: PPUSH
14329: LD_INT 1
14331: PPUSH
14332: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14336: LD_STRING 09_ApeBrain
14338: PPUSH
14339: LD_EXP 1
14343: PPUSH
14344: CALL_OW 30
14348: IFFALSE 14387
// begin Say ( Heike , DH-Lab-6a ) ;
14350: LD_EXP 22
14354: PPUSH
14355: LD_STRING DH-Lab-6a
14357: PPUSH
14358: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14362: LD_EXP 23
14366: PPUSH
14367: LD_STRING DOm-Lab-7a
14369: PPUSH
14370: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14374: LD_INT 4
14376: PPUSH
14377: LD_INT 2
14379: PPUSH
14380: LD_INT 1
14382: PPUSH
14383: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14387: LD_STRING 09_ApeNeural
14389: PPUSH
14390: LD_EXP 1
14394: PPUSH
14395: CALL_OW 30
14399: IFFALSE 14414
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14401: LD_INT 3
14403: PPUSH
14404: LD_INT 2
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: CALL_OW 322
// end ; DialogueOff ;
14414: CALL_OW 7
// end ;
14418: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14419: LD_EXP 19
14423: PUSH
14424: LD_INT 22
14426: PUSH
14427: LD_INT 2
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 25
14436: PUSH
14437: LD_INT 12
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PPUSH
14448: CALL_OW 69
14452: AND
14453: IFFALSE 14488
14455: GO 14457
14457: DISABLE
// begin if IsOk ( Heike ) then
14458: LD_EXP 22
14462: PPUSH
14463: CALL_OW 302
14467: IFFALSE 14481
// Say ( Heike , DH-Ape-1 ) ;
14469: LD_EXP 22
14473: PPUSH
14474: LD_STRING DH-Ape-1
14476: PPUSH
14477: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14481: LD_STRING AApes
14483: PPUSH
14484: CALL_OW 337
// end ;
14488: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14489: LD_EXP 19
14493: PUSH
14494: LD_INT 22
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 25
14506: PUSH
14507: LD_INT 15
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PPUSH
14518: CALL_OW 69
14522: PUSH
14523: LD_INT 5
14525: GREATEREQUAL
14526: AND
14527: IFFALSE 14629
14529: GO 14531
14531: DISABLE
// begin hasApes := true ;
14532: LD_ADDR_EXP 16
14536: PUSH
14537: LD_INT 1
14539: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14540: LD_STRING AApesOut
14542: PPUSH
14543: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14547: LD_EXP 22
14551: PPUSH
14552: CALL_OW 302
14556: NOT
14557: PUSH
14558: LD_EXP 23
14562: PPUSH
14563: CALL_OW 302
14567: NOT
14568: OR
14569: IFFALSE 14573
// exit ;
14571: GO 14629
// DialogueOn ;
14573: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14577: LD_EXP 22
14581: PPUSH
14582: LD_STRING DH-ApeArmy-1
14584: PPUSH
14585: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14589: LD_EXP 23
14593: PPUSH
14594: LD_STRING DOm-ApeArmy-2
14596: PPUSH
14597: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14601: LD_EXP 22
14605: PPUSH
14606: LD_STRING DH-ApeArmy-3
14608: PPUSH
14609: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14613: LD_EXP 23
14617: PPUSH
14618: LD_STRING DOm-ApeArmy-4
14620: PPUSH
14621: CALL_OW 88
// DialogueOff ;
14625: CALL_OW 7
// end ;
14629: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14630: LD_EXP 19
14634: PUSH
14635: LD_INT 5
14637: PPUSH
14638: LD_INT 2
14640: PPUSH
14641: CALL_OW 321
14645: PUSH
14646: LD_INT 2
14648: EQUAL
14649: AND
14650: IFFALSE 14686
14652: GO 14654
14654: DISABLE
// begin hasDrugs := true ;
14655: LD_ADDR_EXP 17
14659: PUSH
14660: LD_INT 1
14662: ST_TO_ADDR
// if IsOk ( Heike ) then
14663: LD_EXP 22
14667: PPUSH
14668: CALL_OW 302
14672: IFFALSE 14686
// Say ( Heike , DH-Stim-1 ) ;
14674: LD_EXP 22
14678: PPUSH
14679: LD_STRING DH-Stim-1
14681: PPUSH
14682: CALL_OW 88
// end ;
14686: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14687: LD_EXP 19
14691: PUSH
14692: LD_INT 22
14694: PUSH
14695: LD_INT 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 25
14704: PUSH
14705: LD_INT 17
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 69
14720: AND
14721: IFFALSE 14738
14723: GO 14725
14725: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14726: LD_EXP 22
14730: PPUSH
14731: LD_STRING DH-Kamikadze-1
14733: PPUSH
14734: CALL_OW 88
14738: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14739: LD_EXP 19
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_INT 2
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 31
14756: PUSH
14757: LD_INT 31
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PPUSH
14768: CALL_OW 69
14772: AND
14773: PUSH
14774: LD_EXP 23
14778: PPUSH
14779: CALL_OW 302
14783: AND
14784: PUSH
14785: LD_EXP 22
14789: PPUSH
14790: CALL_OW 302
14794: AND
14795: IFFALSE 14880
14797: GO 14799
14799: DISABLE
// begin InGameOn ;
14800: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14804: LD_EXP 23
14808: PPUSH
14809: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14813: LD_EXP 22
14817: PPUSH
14818: LD_STRING DH-Mastodont-1
14820: PPUSH
14821: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
14825: LD_EXP 23
14829: PPUSH
14830: LD_STRING DOm-Mastodont-2
14832: PPUSH
14833: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
14837: LD_EXP 22
14841: PPUSH
14842: LD_STRING DH-Mastodont-3
14844: PPUSH
14845: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
14849: LD_EXP 23
14853: PPUSH
14854: LD_STRING DOm-Mastodont-4
14856: PPUSH
14857: CALL_OW 88
// hasMastodont := true ;
14861: LD_ADDR_EXP 13
14865: PUSH
14866: LD_INT 1
14868: ST_TO_ADDR
// InGameOff ;
14869: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
14873: LD_STRING ACH_MASTODONTTAME
14875: PPUSH
14876: CALL_OW 543
// end ;
14880: END
// every 0 0$1 trigger gameActive and tigerCounter do
14881: LD_EXP 19
14885: PUSH
14886: LD_EXP 21
14890: AND
14891: IFFALSE 14903
14893: GO 14895
14895: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
14896: LD_STRING ACH_TIGERTAME
14898: PPUSH
14899: CALL_OW 543
14903: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
14904: LD_EXP 19
14908: PUSH
14909: LD_EXP 21
14913: PUSH
14914: LD_INT 1
14916: GREATER
14917: AND
14918: IFFALSE 15022
14920: GO 14922
14922: DISABLE
// begin hasTigers := true ;
14923: LD_ADDR_EXP 15
14927: PUSH
14928: LD_INT 1
14930: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
14931: LD_EXP 23
14935: PPUSH
14936: CALL_OW 302
14940: NOT
14941: PUSH
14942: LD_EXP 22
14946: PPUSH
14947: CALL_OW 302
14951: NOT
14952: OR
14953: IFFALSE 14957
// exit ;
14955: GO 15022
// CenterNowOnUnits ( Omar ) ;
14957: LD_EXP 23
14961: PPUSH
14962: CALL_OW 87
// DialogueOn ;
14966: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
14970: LD_EXP 23
14974: PPUSH
14975: LD_STRING DOm-Tiger-1
14977: PPUSH
14978: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
14982: LD_EXP 22
14986: PPUSH
14987: LD_STRING DH-Tiger-2
14989: PPUSH
14990: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
14994: LD_EXP 23
14998: PPUSH
14999: LD_STRING DOm-Tiger-3
15001: PPUSH
15002: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
15006: LD_EXP 22
15010: PPUSH
15011: LD_STRING DH-Tiger-4
15013: PPUSH
15014: CALL_OW 88
// DialogueOff ;
15018: CALL_OW 7
// end ;
15022: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
15023: LD_EXP 19
15027: PUSH
15028: LD_INT 22
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 50
15040: PUSH
15041: EMPTY
15042: LIST
15043: PUSH
15044: LD_INT 33
15046: PUSH
15047: LD_INT 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: PUSH
15064: LD_INT 3
15066: GREATEREQUAL
15067: AND
15068: IFFALSE 15111
15070: GO 15072
15072: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
15073: LD_STRING ARemoteOut
15075: PPUSH
15076: CALL_OW 337
// hasVehicles := true ;
15080: LD_ADDR_EXP 14
15084: PUSH
15085: LD_INT 1
15087: ST_TO_ADDR
// if IsOk ( Heike ) then
15088: LD_EXP 22
15092: PPUSH
15093: CALL_OW 302
15097: IFFALSE 15111
// Say ( Heike , DH-Mechanic-1 ) ;
15099: LD_EXP 22
15103: PPUSH
15104: LD_STRING DH-Mechanic-1
15106: PPUSH
15107: CALL_OW 88
// end ;
15111: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( 2 , amBaseArea ) ) do
15112: LD_EXP 19
15116: PUSH
15117: LD_INT 29
15119: PPUSH
15120: LD_INT 22
15122: PUSH
15123: LD_INT 2
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PPUSH
15130: CALL_OW 70
15134: PUSH
15135: LD_INT 2
15137: PPUSH
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 294
15145: OR
15146: AND
15147: IFFALSE 15160
15149: GO 15151
15151: DISABLE
// spotAmericanBase := true ;
15152: LD_ADDR_EXP 6
15156: PUSH
15157: LD_INT 1
15159: ST_TO_ADDR
15160: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15161: LD_EXP 19
15165: PUSH
15166: LD_EXP 6
15170: AND
15171: PUSH
15172: LD_EXP 23
15176: PPUSH
15177: CALL_OW 302
15181: AND
15182: PUSH
15183: LD_EXP 22
15187: PPUSH
15188: CALL_OW 302
15192: AND
15193: IFFALSE 15433
15195: GO 15197
15197: DISABLE
// begin DialogueOn ;
15198: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15202: LD_INT 92
15204: PPUSH
15205: LD_INT 129
15207: PPUSH
15208: LD_INT 2
15210: PPUSH
15211: LD_INT 22
15213: NEG
15214: PPUSH
15215: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15219: LD_INT 92
15221: PPUSH
15222: LD_INT 129
15224: PPUSH
15225: LD_INT 2
15227: PPUSH
15228: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15232: LD_INT 92
15234: PPUSH
15235: LD_INT 129
15237: PPUSH
15238: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15242: LD_INT 10
15244: PPUSH
15245: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15249: LD_EXP 23
15253: PPUSH
15254: LD_STRING DO-AmBase-1
15256: PPUSH
15257: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15261: LD_EXP 22
15265: PPUSH
15266: LD_STRING DH-AmBase-2
15268: PPUSH
15269: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15273: LD_EXP 23
15277: PPUSH
15278: LD_STRING DO-AmBase-3
15280: PPUSH
15281: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15285: LD_EXP 22
15289: PPUSH
15290: LD_STRING DH-AmBase-4
15292: PPUSH
15293: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15297: LD_EXP 23
15301: PPUSH
15302: LD_STRING DO-AmBase-5
15304: PPUSH
15305: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15309: LD_EXP 22
15313: PPUSH
15314: LD_STRING DH-AmBase-6
15316: PPUSH
15317: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15321: LD_EXP 23
15325: PPUSH
15326: LD_STRING DO-AmBase-7
15328: PPUSH
15329: CALL_OW 88
// if not spotArabianBase then
15333: LD_EXP 7
15337: NOT
15338: IFFALSE 15354
// begin Say ( Omar , DO-AmBase-8a ) ;
15340: LD_EXP 23
15344: PPUSH
15345: LD_STRING DO-AmBase-8a
15347: PPUSH
15348: CALL_OW 88
// end else
15352: GO 15366
// begin Say ( Omar , DO-AmBase-8b ) ;
15354: LD_EXP 23
15358: PPUSH
15359: LD_STRING DO-AmBase-8b
15361: PPUSH
15362: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15366: LD_EXP 22
15370: PPUSH
15371: CALL_OW 310
15375: IFFALSE 15393
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15377: LD_EXP 22
15381: PPUSH
15382: CALL_OW 310
15386: PPUSH
15387: CALL_OW 87
15391: GO 15402
// CenterNowOnUnits ( Heike ) ;
15393: LD_EXP 22
15397: PPUSH
15398: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15402: LD_EXP 22
15406: PPUSH
15407: LD_STRING DH-AmBase-9
15409: PPUSH
15410: CALL_OW 88
// DialogueOff ;
15414: CALL_OW 7
// spotByAmerican := true ;
15418: LD_ADDR_EXP 8
15422: PUSH
15423: LD_INT 1
15425: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15426: LD_STRING O2
15428: PPUSH
15429: CALL_OW 337
// end ;
15433: END
// function TalkAboutLegion ; begin
15434: LD_INT 0
15436: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15437: LD_EXP 22
15441: PPUSH
15442: LD_STRING DH-Legion-1
15444: PPUSH
15445: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15449: LD_EXP 23
15453: PPUSH
15454: LD_STRING DOm-Legion-2
15456: PPUSH
15457: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15461: LD_EXP 22
15465: PPUSH
15466: LD_STRING DH-Legion-3
15468: PPUSH
15469: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15473: LD_EXP 23
15477: PPUSH
15478: LD_STRING DOm-Legion-4
15480: PPUSH
15481: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15485: LD_EXP 22
15489: PPUSH
15490: LD_STRING DH-Legion-5
15492: PPUSH
15493: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15497: LD_EXP 23
15501: PPUSH
15502: LD_STRING DOm-Legion-6
15504: PPUSH
15505: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15509: LD_EXP 22
15513: PPUSH
15514: LD_STRING DH-Legion-7
15516: PPUSH
15517: CALL_OW 88
// end ;
15521: LD_VAR 0 1
15525: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15526: LD_EXP 19
15530: PUSH
15531: LD_EXP 22
15535: PUSH
15536: LD_EXP 23
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PPUSH
15545: LD_INT 22
15547: PPUSH
15548: CALL 11557 0 2
15552: AND
15553: PUSH
15554: LD_EXP 9
15558: NOT
15559: AND
15560: PUSH
15561: LD_EXP 10
15565: NOT
15566: AND
15567: IFFALSE 16052
15569: GO 15571
15571: DISABLE
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
15576: PPUSH
// begin uc_side := 8 ;
15577: LD_ADDR_OWVAR 20
15581: PUSH
15582: LD_INT 8
15584: ST_TO_ADDR
// uc_nation := nation_american ;
15585: LD_ADDR_OWVAR 21
15589: PUSH
15590: LD_INT 1
15592: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15593: LD_INT 3
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: LD_INT 1
15601: PPUSH
15602: LD_INT 9
15604: PPUSH
15605: LD_INT 90
15607: PPUSH
15608: CALL 25284 0 5
// veh := CreateVehicle ;
15612: LD_ADDR_VAR 0 3
15616: PUSH
15617: CALL_OW 45
15621: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15622: LD_ADDR_EXP 42
15626: PUSH
15627: LD_EXP 42
15631: PPUSH
15632: LD_VAR 0 3
15636: PPUSH
15637: CALL 58146 0 2
15641: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15642: LD_VAR 0 3
15646: PPUSH
15647: LD_INT 2
15649: PPUSH
15650: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15654: LD_VAR 0 3
15658: PPUSH
15659: LD_INT 126
15661: PPUSH
15662: LD_INT 18
15664: PPUSH
15665: LD_INT 0
15667: PPUSH
15668: CALL_OW 48
// uc_nation := nation_arabian ;
15672: LD_ADDR_OWVAR 21
15676: PUSH
15677: LD_INT 2
15679: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15680: LD_INT 0
15682: PPUSH
15683: LD_INT 6
15685: PUSH
15686: LD_INT 7
15688: PUSH
15689: LD_INT 8
15691: PUSH
15692: LD_INT 9
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: PUSH
15701: LD_OWVAR 67
15705: ARRAY
15706: PPUSH
15707: CALL_OW 383
// un := CreateHuman ;
15711: LD_ADDR_VAR 0 2
15715: PUSH
15716: CALL_OW 44
15720: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15721: LD_ADDR_EXP 37
15725: PUSH
15726: LD_EXP 37
15730: PPUSH
15731: LD_VAR 0 2
15735: PPUSH
15736: CALL 58146 0 2
15740: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15741: LD_VAR 0 2
15745: PPUSH
15746: LD_VAR 0 3
15750: PPUSH
15751: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15755: LD_INT 0
15757: PPUSH
15758: LD_INT 6
15760: PUSH
15761: LD_INT 7
15763: PUSH
15764: LD_INT 8
15766: PUSH
15767: LD_INT 9
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: PUSH
15776: LD_OWVAR 67
15780: ARRAY
15781: PPUSH
15782: CALL_OW 381
// for i := 1 to 3 do
15786: LD_ADDR_VAR 0 1
15790: PUSH
15791: DOUBLE
15792: LD_INT 1
15794: DEC
15795: ST_TO_ADDR
15796: LD_INT 3
15798: PUSH
15799: FOR_TO
15800: IFFALSE 15867
// begin un := CreateHuman ;
15802: LD_ADDR_VAR 0 2
15806: PUSH
15807: CALL_OW 44
15811: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15812: LD_ADDR_EXP 37
15816: PUSH
15817: LD_EXP 37
15821: PPUSH
15822: LD_VAR 0 2
15826: PPUSH
15827: CALL 58146 0 2
15831: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_INT 2
15839: PPUSH
15840: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
15844: LD_VAR 0 2
15848: PPUSH
15849: LD_INT 126
15851: PPUSH
15852: LD_INT 18
15854: PPUSH
15855: LD_INT 4
15857: PPUSH
15858: LD_INT 0
15860: PPUSH
15861: CALL_OW 50
// end ;
15865: GO 15799
15867: POP
15868: POP
// wait ( 0 0$01 ) ;
15869: LD_INT 35
15871: PPUSH
15872: CALL_OW 67
// DialogueOn ;
15876: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
15880: LD_INT 126
15882: PPUSH
15883: LD_INT 18
15885: PPUSH
15886: LD_INT 2
15888: PPUSH
15889: LD_INT 16
15891: NEG
15892: PPUSH
15893: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
15897: LD_INT 126
15899: PPUSH
15900: LD_INT 18
15902: PPUSH
15903: CALL_OW 86
// TalkAboutLegion ;
15907: CALL 15434 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
15911: LD_INT 126
15913: PPUSH
15914: LD_INT 18
15916: PPUSH
15917: LD_INT 2
15919: PPUSH
15920: CALL_OW 331
// DialogueOff ;
15924: CALL_OW 7
// spotLegion := true ;
15928: LD_ADDR_EXP 10
15932: PUSH
15933: LD_INT 1
15935: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
15936: LD_EXP 37
15940: PPUSH
15941: LD_INT 164
15943: PPUSH
15944: LD_INT 47
15946: PPUSH
15947: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
15951: LD_EXP 37
15955: PPUSH
15956: LD_INT 179
15958: PPUSH
15959: LD_INT 20
15961: PPUSH
15962: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
15966: LD_INT 35
15968: PPUSH
15969: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
15973: LD_EXP 37
15977: PPUSH
15978: LD_INT 60
15980: PUSH
15981: EMPTY
15982: LIST
15983: PPUSH
15984: CALL_OW 72
15988: NOT
15989: PUSH
15990: LD_EXP 37
15994: PPUSH
15995: LD_INT 50
15997: PUSH
15998: EMPTY
15999: LIST
16000: PPUSH
16001: CALL_OW 72
16005: NOT
16006: OR
16007: IFFALSE 15966
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16009: LD_EXP 37
16013: PPUSH
16014: LD_INT 50
16016: PUSH
16017: EMPTY
16018: LIST
16019: PPUSH
16020: CALL_OW 72
16024: NOT
16025: IFFALSE 16029
// exit ;
16027: GO 16052
// legForces := legForces union legEForces ;
16029: LD_ADDR_EXP 36
16033: PUSH
16034: LD_EXP 36
16038: PUSH
16039: LD_EXP 37
16043: UNION
16044: ST_TO_ADDR
// legEForces := [ ] ;
16045: LD_ADDR_EXP 37
16049: PUSH
16050: EMPTY
16051: ST_TO_ADDR
// end ;
16052: PPOPN 3
16054: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
16055: LD_EXP 19
16059: PUSH
16060: LD_EXP 22
16064: PUSH
16065: LD_EXP 23
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PPUSH
16074: LD_INT 23
16076: PPUSH
16077: CALL 11557 0 2
16081: AND
16082: PUSH
16083: LD_EXP 9
16087: NOT
16088: AND
16089: PUSH
16090: LD_EXP 10
16094: NOT
16095: AND
16096: IFFALSE 16581
16098: GO 16100
16100: DISABLE
16101: LD_INT 0
16103: PPUSH
16104: PPUSH
16105: PPUSH
// begin uc_side := 8 ;
16106: LD_ADDR_OWVAR 20
16110: PUSH
16111: LD_INT 8
16113: ST_TO_ADDR
// uc_nation := nation_american ;
16114: LD_ADDR_OWVAR 21
16118: PUSH
16119: LD_INT 1
16121: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16122: LD_INT 3
16124: PPUSH
16125: LD_INT 1
16127: PPUSH
16128: LD_INT 1
16130: PPUSH
16131: LD_INT 9
16133: PPUSH
16134: LD_INT 90
16136: PPUSH
16137: CALL 25284 0 5
// veh := CreateVehicle ;
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: CALL_OW 45
16150: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16151: LD_ADDR_EXP 42
16155: PUSH
16156: LD_EXP 42
16160: PPUSH
16161: LD_VAR 0 3
16165: PPUSH
16166: CALL 58146 0 2
16170: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16171: LD_VAR 0 3
16175: PPUSH
16176: LD_INT 3
16178: PPUSH
16179: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 224
16190: PPUSH
16191: LD_INT 57
16193: PPUSH
16194: LD_INT 0
16196: PPUSH
16197: CALL_OW 48
// uc_nation := nation_arabian ;
16201: LD_ADDR_OWVAR 21
16205: PUSH
16206: LD_INT 2
16208: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16209: LD_INT 0
16211: PPUSH
16212: LD_INT 6
16214: PUSH
16215: LD_INT 7
16217: PUSH
16218: LD_INT 8
16220: PUSH
16221: LD_INT 9
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: PUSH
16230: LD_OWVAR 67
16234: ARRAY
16235: PPUSH
16236: CALL_OW 383
// un := CreateHuman ;
16240: LD_ADDR_VAR 0 2
16244: PUSH
16245: CALL_OW 44
16249: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16250: LD_ADDR_EXP 37
16254: PUSH
16255: LD_EXP 37
16259: PPUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: CALL 58146 0 2
16269: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: LD_VAR 0 3
16279: PPUSH
16280: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16284: LD_INT 0
16286: PPUSH
16287: LD_INT 6
16289: PUSH
16290: LD_INT 7
16292: PUSH
16293: LD_INT 8
16295: PUSH
16296: LD_INT 9
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: PUSH
16305: LD_OWVAR 67
16309: ARRAY
16310: PPUSH
16311: CALL_OW 381
// for i := 1 to 3 do
16315: LD_ADDR_VAR 0 1
16319: PUSH
16320: DOUBLE
16321: LD_INT 1
16323: DEC
16324: ST_TO_ADDR
16325: LD_INT 3
16327: PUSH
16328: FOR_TO
16329: IFFALSE 16396
// begin un := CreateHuman ;
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: CALL_OW 44
16340: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16341: LD_ADDR_EXP 37
16345: PUSH
16346: LD_EXP 37
16350: PPUSH
16351: LD_VAR 0 2
16355: PPUSH
16356: CALL 58146 0 2
16360: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16361: LD_VAR 0 2
16365: PPUSH
16366: LD_INT 3
16368: PPUSH
16369: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16373: LD_VAR 0 2
16377: PPUSH
16378: LD_INT 224
16380: PPUSH
16381: LD_INT 57
16383: PPUSH
16384: LD_INT 4
16386: PPUSH
16387: LD_INT 0
16389: PPUSH
16390: CALL_OW 50
// end ;
16394: GO 16328
16396: POP
16397: POP
// wait ( 0 0$01 ) ;
16398: LD_INT 35
16400: PPUSH
16401: CALL_OW 67
// DialogueOn ;
16405: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16409: LD_INT 224
16411: PPUSH
16412: LD_INT 57
16414: PPUSH
16415: LD_INT 2
16417: PPUSH
16418: LD_INT 16
16420: NEG
16421: PPUSH
16422: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16426: LD_INT 224
16428: PPUSH
16429: LD_INT 57
16431: PPUSH
16432: CALL_OW 86
// TalkAboutLegion ;
16436: CALL 15434 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16440: LD_INT 224
16442: PPUSH
16443: LD_INT 57
16445: PPUSH
16446: LD_INT 2
16448: PPUSH
16449: CALL_OW 331
// DialogueOff ;
16453: CALL_OW 7
// spotLegion := true ;
16457: LD_ADDR_EXP 10
16461: PUSH
16462: LD_INT 1
16464: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16465: LD_EXP 37
16469: PPUSH
16470: LD_INT 164
16472: PPUSH
16473: LD_INT 47
16475: PPUSH
16476: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16480: LD_EXP 37
16484: PPUSH
16485: LD_INT 179
16487: PPUSH
16488: LD_INT 20
16490: PPUSH
16491: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16495: LD_INT 35
16497: PPUSH
16498: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16502: LD_EXP 37
16506: PPUSH
16507: LD_INT 60
16509: PUSH
16510: EMPTY
16511: LIST
16512: PPUSH
16513: CALL_OW 72
16517: NOT
16518: PUSH
16519: LD_EXP 37
16523: PPUSH
16524: LD_INT 50
16526: PUSH
16527: EMPTY
16528: LIST
16529: PPUSH
16530: CALL_OW 72
16534: NOT
16535: OR
16536: IFFALSE 16495
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16538: LD_EXP 37
16542: PPUSH
16543: LD_INT 50
16545: PUSH
16546: EMPTY
16547: LIST
16548: PPUSH
16549: CALL_OW 72
16553: NOT
16554: IFFALSE 16558
// exit ;
16556: GO 16581
// legForces := legForces union legEForces ;
16558: LD_ADDR_EXP 36
16562: PUSH
16563: LD_EXP 36
16567: PUSH
16568: LD_EXP 37
16572: UNION
16573: ST_TO_ADDR
// legEForces := [ ] ;
16574: LD_ADDR_EXP 37
16578: PUSH
16579: EMPTY
16580: ST_TO_ADDR
// end ;
16581: PPOPN 3
16583: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16584: LD_EXP 19
16588: PUSH
16589: LD_INT 8
16591: PPUSH
16592: LD_EXP 23
16596: PPUSH
16597: CALL_OW 292
16601: PUSH
16602: LD_INT 8
16604: PPUSH
16605: LD_EXP 22
16609: PPUSH
16610: CALL_OW 292
16614: OR
16615: PUSH
16616: LD_EXP 9
16620: OR
16621: AND
16622: PUSH
16623: LD_EXP 22
16627: PPUSH
16628: CALL_OW 302
16632: AND
16633: PUSH
16634: LD_EXP 23
16638: PPUSH
16639: CALL_OW 302
16643: AND
16644: IFFALSE 16785
16646: GO 16648
16648: DISABLE
// begin DialogueOn ;
16649: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16653: LD_EXP 35
16657: PPUSH
16658: LD_STRING DF-Spot-1
16660: PPUSH
16661: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16665: LD_EXP 22
16669: PPUSH
16670: LD_STRING DH-Spot-2
16672: PPUSH
16673: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16677: LD_EXP 35
16681: PPUSH
16682: LD_STRING DF-Spot-3
16684: PPUSH
16685: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16689: LD_EXP 22
16693: PPUSH
16694: LD_STRING DH-Spot-4
16696: PPUSH
16697: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16701: LD_EXP 23
16705: PPUSH
16706: LD_STRING DOm-Spot-5
16708: PPUSH
16709: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16713: LD_EXP 35
16717: PPUSH
16718: LD_STRING DF-Spot-6
16720: PPUSH
16721: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16725: LD_EXP 35
16729: PPUSH
16730: LD_STRING DF-Spot-7
16732: PPUSH
16733: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16737: LD_EXP 35
16741: PPUSH
16742: LD_STRING DF-Spot-8
16744: PPUSH
16745: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16749: LD_EXP 22
16753: PPUSH
16754: LD_STRING DH-Spot-9
16756: PPUSH
16757: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16761: LD_EXP 35
16765: PPUSH
16766: LD_STRING DF-Spot-10
16768: PPUSH
16769: CALL_OW 94
// DialogueOff ;
16773: CALL_OW 7
// spotByLegion := true ;
16777: LD_ADDR_EXP 9
16781: PUSH
16782: LD_INT 1
16784: ST_TO_ADDR
// end ;
16785: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16786: LD_EXP 19
16790: PUSH
16791: LD_EXP 9
16795: PUSH
16796: LD_EXP 10
16800: OR
16801: AND
16802: IFFALSE 16814
16804: GO 16806
16806: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16807: LD_STRING O3
16809: PPUSH
16810: CALL_OW 337
16814: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16815: LD_EXP 19
16819: PUSH
16820: LD_INT 22
16822: PUSH
16823: LD_INT 8
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 21
16832: PUSH
16833: LD_INT 1
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 50
16842: PUSH
16843: EMPTY
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: LIST
16850: PPUSH
16851: CALL_OW 69
16855: PUSH
16856: LD_INT 0
16858: EQUAL
16859: AND
16860: IFFALSE 16958
16862: GO 16864
16864: DISABLE
// begin legScriptActive := false ;
16865: LD_ADDR_EXP 4
16869: PUSH
16870: LD_INT 0
16872: ST_TO_ADDR
// if not americanDestroyed then
16873: LD_EXP 11
16877: NOT
16878: IFFALSE 16887
// SetAchievement ( ACH_REVANGE ) ;
16880: LD_STRING ACH_REVANGE
16882: PPUSH
16883: CALL_OW 543
// legionDestroyed := true ;
16887: LD_ADDR_EXP 12
16891: PUSH
16892: LD_INT 1
16894: ST_TO_ADDR
// DialogueOn ;
16895: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
16899: LD_EXP 35
16903: PPUSH
16904: LD_STRING DF-LegDes-1
16906: PPUSH
16907: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
16911: LD_EXP 22
16915: PPUSH
16916: LD_STRING DH-LegDes-2
16918: PPUSH
16919: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
16923: LD_EXP 35
16927: PPUSH
16928: LD_STRING DF-LegDes-3
16930: PPUSH
16931: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
16935: LD_EXP 22
16939: PPUSH
16940: LD_STRING DH-LegDes-4
16942: PPUSH
16943: CALL_OW 88
// DialogueOff ;
16947: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
16951: LD_STRING O5
16953: PPUSH
16954: CALL_OW 337
// end ;
16958: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
16959: LD_EXP 19
16963: PUSH
16964: LD_EXP 26
16968: PPUSH
16969: LD_INT 21
16971: PUSH
16972: LD_INT 1
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 50
16981: PUSH
16982: EMPTY
16983: LIST
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 72
16993: PUSH
16994: LD_INT 6
16996: LESS
16997: AND
16998: IFFALSE 17246
17000: GO 17002
17002: DISABLE
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
// begin amScriptActive := false ;
17007: LD_ADDR_EXP 3
17011: PUSH
17012: LD_INT 0
17014: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
17015: LD_ADDR_VAR 0 2
17019: PUSH
17020: LD_EXP 26
17024: PPUSH
17025: LD_INT 21
17027: PUSH
17028: LD_INT 1
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 50
17037: PUSH
17038: EMPTY
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PPUSH
17045: CALL_OW 72
17049: ST_TO_ADDR
// for i in tmp do
17050: LD_ADDR_VAR 0 1
17054: PUSH
17055: LD_VAR 0 2
17059: PUSH
17060: FOR_IN
17061: IFFALSE 17089
// begin ComExit ( i ) ;
17063: LD_VAR 0 1
17067: PPUSH
17068: CALL 58544 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
17072: LD_VAR 0 1
17076: PPUSH
17077: LD_INT 63
17079: PPUSH
17080: LD_INT 124
17082: PPUSH
17083: CALL_OW 171
// end ;
17087: GO 17060
17089: POP
17090: POP
// wait ( 0 0$2 ) ;
17091: LD_INT 70
17093: PPUSH
17094: CALL_OW 67
// americanDestroyed := true ;
17098: LD_ADDR_EXP 11
17102: PUSH
17103: LD_INT 1
17105: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17106: LD_INT 35
17108: PPUSH
17109: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
17113: LD_ADDR_VAR 0 2
17117: PUSH
17118: LD_EXP 26
17122: PPUSH
17123: LD_INT 21
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 50
17135: PUSH
17136: EMPTY
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PPUSH
17143: CALL_OW 72
17147: PUSH
17148: LD_EXP 34
17152: PPUSH
17153: LD_INT 50
17155: PUSH
17156: EMPTY
17157: LIST
17158: PPUSH
17159: CALL_OW 72
17163: UNION
17164: ST_TO_ADDR
// for i in tmp do
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_VAR 0 2
17174: PUSH
17175: FOR_IN
17176: IFFALSE 17237
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17178: LD_VAR 0 1
17182: PPUSH
17183: LD_INT 63
17185: PPUSH
17186: LD_INT 124
17188: PPUSH
17189: CALL_OW 307
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: LD_INT 25
17201: PPUSH
17202: CALL_OW 308
17206: OR
17207: IFFALSE 17220
// RemoveUnit ( i ) else
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 64
17218: GO 17235
// ComMoveXY ( i , 63 , 124 ) ;
17220: LD_VAR 0 1
17224: PPUSH
17225: LD_INT 63
17227: PPUSH
17228: LD_INT 124
17230: PPUSH
17231: CALL_OW 111
// end ;
17235: GO 17175
17237: POP
17238: POP
// until not tmp ;
17239: LD_VAR 0 2
17243: NOT
17244: IFFALSE 17106
// end ;
17246: PPOPN 2
17248: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17249: LD_EXP 19
17253: PUSH
17254: LD_EXP 11
17258: AND
17259: PUSH
17260: LD_EXP 22
17264: PPUSH
17265: CALL_OW 302
17269: AND
17270: PUSH
17271: LD_EXP 23
17275: PPUSH
17276: CALL_OW 302
17280: AND
17281: IFFALSE 17771
17283: GO 17285
17285: DISABLE
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
17290: PPUSH
// begin DialogueOn ;
17291: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17295: LD_EXP 22
17299: PPUSH
17300: LD_STRING DH-Victory-1
17302: PPUSH
17303: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17307: LD_EXP 23
17311: PPUSH
17312: LD_STRING DOm-Victory-2
17314: PPUSH
17315: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17319: LD_EXP 23
17323: PPUSH
17324: LD_STRING DOm-Victory-3
17326: PPUSH
17327: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17331: LD_EXP 22
17335: PPUSH
17336: LD_STRING DH-Victory-4
17338: PPUSH
17339: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17343: LD_EXP 23
17347: PPUSH
17348: LD_STRING DOm-Victory-5
17350: PPUSH
17351: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17355: LD_EXP 23
17359: PPUSH
17360: LD_STRING DOm-Victory-6
17362: PPUSH
17363: CALL_OW 88
// DialogueOff ;
17367: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17371: LD_STRING O4
17373: PPUSH
17374: CALL_OW 337
// canFinish := true ;
17378: LD_ADDR_EXP 18
17382: PUSH
17383: LD_INT 1
17385: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17386: LD_INT 24
17388: PPUSH
17389: LD_INT 1
17391: PPUSH
17392: CALL_OW 424
// if not legionDestroyed then
17396: LD_EXP 12
17400: NOT
17401: IFFALSE 17771
// begin uc_nation := nation_arabian ;
17403: LD_ADDR_OWVAR 21
17407: PUSH
17408: LD_INT 2
17410: ST_TO_ADDR
// uc_side := 8 ;
17411: LD_ADDR_OWVAR 20
17415: PUSH
17416: LD_INT 8
17418: ST_TO_ADDR
// for i := 1 to 4 do
17419: LD_ADDR_VAR 0 1
17423: PUSH
17424: DOUBLE
17425: LD_INT 1
17427: DEC
17428: ST_TO_ADDR
17429: LD_INT 4
17431: PUSH
17432: FOR_TO
17433: IFFALSE 17514
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17435: LD_INT 0
17437: PPUSH
17438: LD_INT 8
17440: PUSH
17441: LD_INT 9
17443: PUSH
17444: LD_INT 10
17446: PUSH
17447: LD_INT 10
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PUSH
17456: LD_OWVAR 67
17460: ARRAY
17461: PPUSH
17462: CALL_OW 381
// un := CreateHuman ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: CALL_OW 44
17475: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17476: LD_VAR 0 2
17480: PPUSH
17481: LD_INT 3
17483: PPUSH
17484: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17488: LD_VAR 0 2
17492: PPUSH
17493: LD_INT 26
17495: PPUSH
17496: LD_INT 0
17498: PPUSH
17499: CALL_OW 49
// ComCrawl ( un ) ;
17503: LD_VAR 0 2
17507: PPUSH
17508: CALL_OW 137
// end ;
17512: GO 17432
17514: POP
17515: POP
// for i := 1 to 3 do
17516: LD_ADDR_VAR 0 1
17520: PUSH
17521: DOUBLE
17522: LD_INT 1
17524: DEC
17525: ST_TO_ADDR
17526: LD_INT 3
17528: PUSH
17529: FOR_TO
17530: IFFALSE 17614
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17532: LD_INT 0
17534: PPUSH
17535: LD_INT 8
17537: PUSH
17538: LD_INT 9
17540: PUSH
17541: LD_INT 10
17543: PUSH
17544: LD_INT 10
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: PUSH
17553: LD_OWVAR 67
17557: ARRAY
17558: PPUSH
17559: CALL_OW 381
// un := CreateHuman ;
17563: LD_ADDR_VAR 0 2
17567: PUSH
17568: CALL_OW 44
17572: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_INT 8
17580: PPUSH
17581: CALL_OW 336
// SetDir ( un , 3 ) ;
17585: LD_VAR 0 2
17589: PPUSH
17590: LD_INT 3
17592: PPUSH
17593: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17597: LD_VAR 0 2
17601: PPUSH
17602: LD_INT 26
17604: PPUSH
17605: LD_INT 0
17607: PPUSH
17608: CALL_OW 49
// end ;
17612: GO 17529
17614: POP
17615: POP
// for i := 1 to 2 do
17616: LD_ADDR_VAR 0 1
17620: PUSH
17621: DOUBLE
17622: LD_INT 1
17624: DEC
17625: ST_TO_ADDR
17626: LD_INT 2
17628: PUSH
17629: FOR_TO
17630: IFFALSE 17769
// begin uc_side := 8 ;
17632: LD_ADDR_OWVAR 20
17636: PUSH
17637: LD_INT 8
17639: ST_TO_ADDR
// uc_nation := nation_american ;
17640: LD_ADDR_OWVAR 21
17644: PUSH
17645: LD_INT 1
17647: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17648: LD_INT 4
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: LD_INT 9
17659: PPUSH
17660: LD_INT 90
17662: PPUSH
17663: CALL 25284 0 5
// veh := CreateVehicle ;
17667: LD_ADDR_VAR 0 3
17671: PUSH
17672: CALL_OW 45
17676: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17677: LD_VAR 0 3
17681: PPUSH
17682: LD_INT 3
17684: PPUSH
17685: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17689: LD_VAR 0 3
17693: PPUSH
17694: LD_INT 27
17696: PPUSH
17697: LD_INT 0
17699: PPUSH
17700: CALL_OW 49
// uc_nation := nation_arabian ;
17704: LD_ADDR_OWVAR 21
17708: PUSH
17709: LD_INT 2
17711: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17712: LD_INT 0
17714: PPUSH
17715: LD_INT 8
17717: PUSH
17718: LD_INT 9
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: LD_INT 10
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: PUSH
17733: LD_OWVAR 67
17737: ARRAY
17738: PPUSH
17739: CALL_OW 383
// un := CreateHuman ;
17743: LD_ADDR_VAR 0 2
17747: PUSH
17748: CALL_OW 44
17752: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17753: LD_VAR 0 2
17757: PPUSH
17758: LD_VAR 0 3
17762: PPUSH
17763: CALL_OW 52
// end ;
17767: GO 17629
17769: POP
17770: POP
// end ; end ;
17771: PPOPN 3
17773: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17774: LD_EXP 19
17778: PUSH
17779: LD_EXP 18
17783: AND
17784: PUSH
17785: LD_EXP 23
17789: PUSH
17790: EMPTY
17791: LIST
17792: PPUSH
17793: LD_INT 24
17795: PPUSH
17796: CALL 11557 0 2
17800: AND
17801: PUSH
17802: LD_EXP 22
17806: PUSH
17807: EMPTY
17808: LIST
17809: PPUSH
17810: LD_INT 24
17812: PPUSH
17813: CALL 11557 0 2
17817: AND
17818: IFFALSE 17991
17820: GO 17822
17822: DISABLE
// begin if tick <= 50 50$00 then
17823: LD_OWVAR 1
17827: PUSH
17828: LD_INT 105000
17830: LESSEQUAL
17831: IFFALSE 17840
// SetAchievement ( ACH_HSPEED_10 ) ;
17833: LD_STRING ACH_HSPEED_10
17835: PPUSH
17836: CALL_OW 543
// if legionDestroyed then
17840: LD_EXP 12
17844: IFFALSE 17858
// AddMedal ( med1 , 1 ) else
17846: LD_STRING med1
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: CALL_OW 101
17856: GO 17869
// AddMedal ( med1 , - 1 ) ;
17858: LD_STRING med1
17860: PPUSH
17861: LD_INT 1
17863: NEG
17864: PPUSH
17865: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
17869: LD_OWVAR 1
17873: PUSH
17874: LD_INT 189000
17876: PUSH
17877: LD_INT 168000
17879: PUSH
17880: LD_INT 147000
17882: PUSH
17883: LD_INT 126000
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: PUSH
17892: LD_OWVAR 67
17896: ARRAY
17897: LESSEQUAL
17898: IFFALSE 17912
// AddMedal ( med2 , 1 ) else
17900: LD_STRING med2
17902: PPUSH
17903: LD_INT 1
17905: PPUSH
17906: CALL_OW 101
17910: GO 17923
// AddMedal ( med2 , - 1 ) ;
17912: LD_STRING med2
17914: PPUSH
17915: LD_INT 1
17917: NEG
17918: PPUSH
17919: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasDrugs >= 3 then
17923: LD_EXP 16
17927: PUSH
17928: LD_EXP 14
17932: PLUS
17933: PUSH
17934: LD_EXP 15
17938: PLUS
17939: PUSH
17940: LD_EXP 13
17944: PLUS
17945: PUSH
17946: LD_EXP 17
17950: PLUS
17951: PUSH
17952: LD_INT 3
17954: GREATEREQUAL
17955: IFFALSE 17969
// AddMedal ( med3 , 1 ) else
17957: LD_STRING med3
17959: PPUSH
17960: LD_INT 1
17962: PPUSH
17963: CALL_OW 101
17967: GO 17980
// AddMedal ( med3 , - 1 ) ;
17969: LD_STRING med3
17971: PPUSH
17972: LD_INT 1
17974: NEG
17975: PPUSH
17976: CALL_OW 101
// GiveMedals ( MAIN ) ;
17980: LD_STRING MAIN
17982: PPUSH
17983: CALL_OW 102
// YouWin ;
17987: CALL_OW 103
// end ; end_of_file
17991: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL 78700 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
18001: LD_EXP 5
18005: PUSH
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 255
18015: PUSH
18016: LD_INT 2
18018: EQUAL
18019: AND
18020: PUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 263
18030: PUSH
18031: LD_INT 5
18033: EQUAL
18034: PUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: CALL_OW 257
18044: PUSH
18045: LD_INT 12
18047: PUSH
18048: LD_INT 15
18050: PUSH
18051: LD_INT 16
18053: PUSH
18054: LD_INT 17
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: IN
18063: OR
18064: AND
18065: IFFALSE 18135
// begin apeAmount := Dec ( apeAmount ) ;
18067: LD_ADDR_EXP 5
18071: PUSH
18072: LD_EXP 5
18076: PPUSH
18077: CALL 59529 0 1
18081: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
18082: LD_INT 35
18084: PPUSH
18085: LD_INT 2100
18087: PPUSH
18088: CALL_OW 12
18092: PPUSH
18093: CALL_OW 67
// uc_side := 0 ;
18097: LD_ADDR_OWVAR 20
18101: PUSH
18102: LD_INT 0
18104: ST_TO_ADDR
// uc_nation := nation_nature ;
18105: LD_ADDR_OWVAR 21
18109: PUSH
18110: LD_INT 0
18112: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
18113: LD_INT 0
18115: PPUSH
18116: CALL 54414 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
18120: CALL_OW 44
18124: PPUSH
18125: LD_INT 6
18127: PPUSH
18128: LD_INT 0
18130: PPUSH
18131: CALL_OW 49
// end ; if unit = Heike then
18135: LD_VAR 0 1
18139: PUSH
18140: LD_EXP 22
18144: EQUAL
18145: IFFALSE 18154
// YouLost ( Heike ) ;
18147: LD_STRING Heike
18149: PPUSH
18150: CALL_OW 104
// if unit = Omar then
18154: LD_VAR 0 1
18158: PUSH
18159: LD_EXP 23
18163: EQUAL
18164: IFFALSE 18173
// YouLost ( Omar ) ;
18166: LD_STRING Omar
18168: PPUSH
18169: CALL_OW 104
// if unit in amForces then
18173: LD_VAR 0 1
18177: PUSH
18178: LD_EXP 26
18182: IN
18183: IFFALSE 18201
// amForces := amForces diff unit ;
18185: LD_ADDR_EXP 26
18189: PUSH
18190: LD_EXP 26
18194: PUSH
18195: LD_VAR 0 1
18199: DIFF
18200: ST_TO_ADDR
// if unit in amTanks then
18201: LD_VAR 0 1
18205: PUSH
18206: LD_EXP 31
18210: IN
18211: IFFALSE 18229
// amTanks := amTanks diff unit ;
18213: LD_ADDR_EXP 31
18217: PUSH
18218: LD_EXP 31
18222: PUSH
18223: LD_VAR 0 1
18227: DIFF
18228: ST_TO_ADDR
// if unit in amPatrol then
18229: LD_VAR 0 1
18233: PUSH
18234: LD_EXP 34
18238: IN
18239: IFFALSE 18257
// amPatrol := amPatrol diff unit ;
18241: LD_ADDR_EXP 34
18245: PUSH
18246: LD_EXP 34
18250: PUSH
18251: LD_VAR 0 1
18255: DIFF
18256: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
18257: LD_VAR 0 1
18261: PPUSH
18262: CALL_OW 266
18266: PUSH
18267: LD_INT 32
18269: PUSH
18270: LD_INT 33
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: IN
18277: PUSH
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL_OW 255
18287: PUSH
18288: LD_INT 1
18290: EQUAL
18291: AND
18292: IFFALSE 18355
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18294: LD_ADDR_EXP 30
18298: PUSH
18299: LD_EXP 30
18303: PPUSH
18304: LD_VAR 0 1
18308: PPUSH
18309: CALL_OW 266
18313: PUSH
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 250
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 251
18333: PUSH
18334: LD_VAR 0 1
18338: PPUSH
18339: CALL_OW 254
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: PPUSH
18350: CALL 58146 0 2
18354: ST_TO_ADDR
// if unit in legForces then
18355: LD_VAR 0 1
18359: PUSH
18360: LD_EXP 36
18364: IN
18365: IFFALSE 18383
// legForces := legForces diff unit ;
18367: LD_ADDR_EXP 36
18371: PUSH
18372: LD_EXP 36
18376: PUSH
18377: LD_VAR 0 1
18381: DIFF
18382: ST_TO_ADDR
// if unit in legTanks then
18383: LD_VAR 0 1
18387: PUSH
18388: LD_EXP 42
18392: IN
18393: IFFALSE 18411
// legTanks := legTanks diff unit ;
18395: LD_ADDR_EXP 42
18399: PUSH
18400: LD_EXP 42
18404: PUSH
18405: LD_VAR 0 1
18409: DIFF
18410: ST_TO_ADDR
// if unit in legRTanks then
18411: LD_VAR 0 1
18415: PUSH
18416: LD_EXP 43
18420: IN
18421: IFFALSE 18439
// legRTanks := legRTanks diff unit ;
18423: LD_ADDR_EXP 43
18427: PUSH
18428: LD_EXP 43
18432: PUSH
18433: LD_VAR 0 1
18437: DIFF
18438: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
18439: LD_VAR 0 1
18443: PPUSH
18444: CALL_OW 266
18448: PUSH
18449: LD_INT 32
18451: PUSH
18452: LD_INT 33
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: IN
18459: PUSH
18460: LD_VAR 0 1
18464: PPUSH
18465: CALL_OW 255
18469: PUSH
18470: LD_INT 8
18472: EQUAL
18473: AND
18474: IFFALSE 18537
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18476: LD_ADDR_EXP 41
18480: PUSH
18481: LD_EXP 41
18485: PPUSH
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 266
18495: PUSH
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 250
18505: PUSH
18506: LD_VAR 0 1
18510: PPUSH
18511: CALL_OW 251
18515: PUSH
18516: LD_VAR 0 1
18520: PPUSH
18521: CALL_OW 254
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: PPUSH
18532: CALL 58146 0 2
18536: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18537: LD_VAR 0 1
18541: PPUSH
18542: CALL_OW 264
18546: PUSH
18547: LD_INT 13
18549: EQUAL
18550: PUSH
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL_OW 255
18560: PUSH
18561: LD_INT 1
18563: EQUAL
18564: AND
18565: IFFALSE 18600
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18567: LD_ADDR_EXP 28
18571: PUSH
18572: LD_EXP 28
18576: PPUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: LD_INT 13
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL 58146 0 2
18599: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 264
18609: PUSH
18610: LD_INT 88
18612: EQUAL
18613: PUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 255
18623: PUSH
18624: LD_INT 8
18626: EQUAL
18627: AND
18628: IFFALSE 18663
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18630: LD_ADDR_EXP 39
18634: PUSH
18635: LD_EXP 39
18639: PPUSH
18640: LD_INT 13
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 88
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: PPUSH
18658: CALL 58146 0 2
18662: ST_TO_ADDR
// if unit = amCargo then
18663: LD_VAR 0 1
18667: PUSH
18668: LD_EXP 33
18672: EQUAL
18673: IFFALSE 18716
// begin amCargo := 0 ;
18675: LD_ADDR_EXP 33
18679: PUSH
18680: LD_INT 0
18682: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
18683: LD_ADDR_EXP 28
18687: PUSH
18688: LD_EXP 28
18692: PPUSH
18693: LD_INT 2
18695: PUSH
18696: LD_INT 1
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: LD_INT 12
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: PPUSH
18711: CALL 58146 0 2
18715: ST_TO_ADDR
// end ; if unit = legCargo then
18716: LD_VAR 0 1
18720: PUSH
18721: LD_EXP 44
18725: EQUAL
18726: IFFALSE 18769
// begin legCargo := 0 ;
18728: LD_ADDR_EXP 44
18732: PUSH
18733: LD_INT 0
18735: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
18736: LD_ADDR_EXP 39
18740: PUSH
18741: LD_EXP 39
18745: PPUSH
18746: LD_INT 13
18748: PUSH
18749: LD_INT 1
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: LD_INT 32
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: PPUSH
18764: CALL 58146 0 2
18768: ST_TO_ADDR
// end ; end ;
18769: PPOPN 1
18771: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
18772: LD_ADDR_EXP 21
18776: PUSH
18777: LD_EXP 21
18781: PPUSH
18782: CALL 59507 0 1
18786: ST_TO_ADDR
// end ;
18787: PPOPN 2
18789: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
18790: LD_VAR 0 2
18794: PUSH
18795: LD_INT 3
18797: PUSH
18798: LD_INT 22
18800: PUSH
18801: LD_INT 2
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 25
18814: PUSH
18815: LD_INT 3
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PPUSH
18826: CALL_OW 69
18830: IN
18831: PUSH
18832: LD_VAR 0 1
18836: PPUSH
18837: CALL_OW 266
18841: PUSH
18842: LD_INT 3
18844: EQUAL
18845: AND
18846: PUSH
18847: LD_VAR 0 2
18851: PPUSH
18852: CALL_OW 256
18856: PUSH
18857: LD_INT 1000
18859: LESS
18860: AND
18861: IFFALSE 18887
// begin SetTag ( un , 0 ) ;
18863: LD_VAR 0 2
18867: PPUSH
18868: LD_INT 0
18870: PPUSH
18871: CALL_OW 109
// SetLives ( un , 1000 ) ;
18875: LD_VAR 0 2
18879: PPUSH
18880: LD_INT 1000
18882: PPUSH
18883: CALL_OW 234
// end ; end ;
18887: PPOPN 2
18889: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
18890: LD_INT 0
18892: PPUSH
18893: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
18894: LD_VAR 0 1
18898: PPUSH
18899: LD_VAR 0 2
18903: PPUSH
18904: CALL 78820 0 2
// side := GetSide ( fac ) ;
18908: LD_ADDR_VAR 0 3
18912: PUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: CALL_OW 255
18922: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
18923: LD_ADDR_VAR 0 4
18927: PUSH
18928: LD_VAR 0 1
18932: PPUSH
18933: CALL_OW 264
18937: ST_TO_ADDR
// if side = 1 then
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 1
18945: EQUAL
18946: IFFALSE 19055
// begin amConstructList := Delete ( amConstructList , 1 ) ;
18948: LD_ADDR_EXP 28
18952: PUSH
18953: LD_EXP 28
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: CALL_OW 3
18965: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
18966: LD_VAR 0 4
18970: PUSH
18971: LD_INT 12
18973: EQUAL
18974: PUSH
18975: LD_EXP 33
18979: NOT
18980: AND
18981: IFFALSE 18993
// amCargo := veh ;
18983: LD_ADDR_EXP 33
18987: PUSH
18988: LD_VAR 0 1
18992: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
18993: LD_VAR 0 4
18997: PUSH
18998: LD_INT 12
19000: PUSH
19001: LD_INT 13
19003: PUSH
19004: LD_INT 14
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: IN
19012: IFFALSE 19016
// exit ;
19014: GO 19205
// amTanks := Join ( amTanks , veh ) ;
19016: LD_ADDR_EXP 31
19020: PUSH
19021: LD_EXP 31
19025: PPUSH
19026: LD_VAR 0 1
19030: PPUSH
19031: CALL 58146 0 2
19035: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19036: LD_INT 35
19038: PPUSH
19039: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
19043: LD_VAR 0 1
19047: PPUSH
19048: LD_INT 12
19050: PPUSH
19051: CALL_OW 173
// end ; if side = 8 then
19055: LD_VAR 0 3
19059: PUSH
19060: LD_INT 8
19062: EQUAL
19063: IFFALSE 19205
// begin legConstructList := Delete ( legConstructList , 1 ) ;
19065: LD_ADDR_EXP 39
19069: PUSH
19070: LD_EXP 39
19074: PPUSH
19075: LD_INT 1
19077: PPUSH
19078: CALL_OW 3
19082: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
19083: LD_VAR 0 4
19087: PUSH
19088: LD_INT 32
19090: EQUAL
19091: PUSH
19092: LD_EXP 44
19096: NOT
19097: AND
19098: IFFALSE 19110
// legCargo := veh ;
19100: LD_ADDR_EXP 44
19104: PUSH
19105: LD_VAR 0 1
19109: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
19110: LD_VAR 0 4
19114: PUSH
19115: LD_INT 32
19117: PUSH
19118: LD_INT 88
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: IN
19125: IFFALSE 19129
// exit ;
19127: GO 19205
// if GetControl ( veh ) = control_manual then
19129: LD_VAR 0 1
19133: PPUSH
19134: CALL_OW 263
19138: PUSH
19139: LD_INT 1
19141: EQUAL
19142: IFFALSE 19166
// legTanks := Join ( legTanks , veh ) else
19144: LD_ADDR_EXP 42
19148: PUSH
19149: LD_EXP 42
19153: PPUSH
19154: LD_VAR 0 1
19158: PPUSH
19159: CALL 58146 0 2
19163: ST_TO_ADDR
19164: GO 19186
// legRTanks := Join ( legRTanks , veh ) ;
19166: LD_ADDR_EXP 43
19170: PUSH
19171: LD_EXP 43
19175: PPUSH
19176: LD_VAR 0 1
19180: PPUSH
19181: CALL 58146 0 2
19185: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19186: LD_INT 35
19188: PPUSH
19189: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19193: LD_VAR 0 1
19197: PPUSH
19198: LD_INT 15
19200: PPUSH
19201: CALL_OW 173
// end ; end ;
19205: PPOPN 4
19207: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19208: LD_INT 0
19210: PPUSH
19211: PPUSH
19212: PPUSH
// begin side := GetSide ( driver ) ;
19213: LD_ADDR_VAR 0 7
19217: PUSH
19218: LD_VAR 0 1
19222: PPUSH
19223: CALL_OW 255
19227: ST_TO_ADDR
// if side = 1 and driver in amForces then
19228: LD_VAR 0 7
19232: PUSH
19233: LD_INT 1
19235: EQUAL
19236: PUSH
19237: LD_VAR 0 1
19241: PUSH
19242: LD_EXP 26
19246: IN
19247: AND
19248: IFFALSE 19460
// begin ComMoveToArea ( driver , amBaseArea ) ;
19250: LD_VAR 0 1
19254: PPUSH
19255: LD_INT 1
19257: PPUSH
19258: CALL_OW 113
// SetTag ( driver , tMech ) ;
19262: LD_VAR 0 1
19266: PPUSH
19267: LD_INT 7
19269: PPUSH
19270: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19274: LD_ADDR_VAR 0 6
19278: PUSH
19279: LD_INT 1
19281: PPUSH
19282: LD_INT 22
19284: PUSH
19285: LD_VAR 0 7
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 30
19296: PUSH
19297: LD_INT 3
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 50
19306: PUSH
19307: EMPTY
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 70
19319: ST_TO_ADDR
// if fac then
19320: LD_VAR 0 6
19324: IFFALSE 19346
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 6
19335: PUSH
19336: LD_INT 1
19338: ARRAY
19339: PPUSH
19340: CALL_OW 180
// exit ;
19344: GO 19680
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19346: LD_ADDR_VAR 0 5
19350: PUSH
19351: LD_INT 1
19353: PPUSH
19354: LD_INT 22
19356: PUSH
19357: LD_VAR 0 7
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: LD_INT 30
19371: PUSH
19372: LD_INT 4
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 30
19381: PUSH
19382: LD_INT 5
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 3
19396: PUSH
19397: LD_INT 62
19399: PUSH
19400: EMPTY
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 50
19409: PUSH
19410: EMPTY
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: PPUSH
19419: CALL_OW 70
19423: ST_TO_ADDR
// if arm then
19424: LD_VAR 0 5
19428: IFFALSE 19460
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19430: LD_VAR 0 1
19434: PPUSH
19435: LD_VAR 0 5
19439: PUSH
19440: LD_INT 1
19442: ARRAY
19443: PPUSH
19444: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19448: LD_VAR 0 1
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: CALL_OW 183
// end ; end ; if side = 8 then
19460: LD_VAR 0 7
19464: PUSH
19465: LD_INT 8
19467: EQUAL
19468: IFFALSE 19680
// begin ComMoveToArea ( driver , legBaseArea ) ;
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_INT 2
19477: PPUSH
19478: CALL_OW 113
// SetTag ( driver , tMech ) ;
19482: LD_VAR 0 1
19486: PPUSH
19487: LD_INT 7
19489: PPUSH
19490: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19494: LD_ADDR_VAR 0 6
19498: PUSH
19499: LD_INT 2
19501: PPUSH
19502: LD_INT 22
19504: PUSH
19505: LD_VAR 0 7
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 30
19516: PUSH
19517: LD_INT 3
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 50
19526: PUSH
19527: EMPTY
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: PPUSH
19535: CALL_OW 70
19539: ST_TO_ADDR
// if fac then
19540: LD_VAR 0 6
19544: IFFALSE 19566
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19546: LD_VAR 0 1
19550: PPUSH
19551: LD_VAR 0 6
19555: PUSH
19556: LD_INT 1
19558: ARRAY
19559: PPUSH
19560: CALL_OW 180
// exit ;
19564: GO 19680
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19566: LD_ADDR_VAR 0 5
19570: PUSH
19571: LD_INT 2
19573: PPUSH
19574: LD_INT 22
19576: PUSH
19577: LD_VAR 0 7
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: LD_INT 30
19591: PUSH
19592: LD_INT 4
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 30
19601: PUSH
19602: LD_INT 5
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 3
19616: PUSH
19617: LD_INT 62
19619: PUSH
19620: EMPTY
19621: LIST
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 50
19629: PUSH
19630: EMPTY
19631: LIST
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: PPUSH
19639: CALL_OW 70
19643: ST_TO_ADDR
// if arm then
19644: LD_VAR 0 5
19648: IFFALSE 19680
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19650: LD_VAR 0 1
19654: PPUSH
19655: LD_VAR 0 5
19659: PUSH
19660: LD_INT 1
19662: ARRAY
19663: PPUSH
19664: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19668: LD_VAR 0 1
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 183
// end ; end ; end ;
19680: PPOPN 7
19682: END
// on BuildingComplete ( b ) do var side , type ;
19683: LD_INT 0
19685: PPUSH
19686: PPUSH
// begin side := GetSide ( b ) ;
19687: LD_ADDR_VAR 0 2
19691: PUSH
19692: LD_VAR 0 1
19696: PPUSH
19697: CALL_OW 255
19701: ST_TO_ADDR
// type := GetBType ( b ) ;
19702: LD_ADDR_VAR 0 3
19706: PUSH
19707: LD_VAR 0 1
19711: PPUSH
19712: CALL_OW 266
19716: ST_TO_ADDR
// if side = 1 then
19717: LD_VAR 0 2
19721: PUSH
19722: LD_INT 1
19724: EQUAL
19725: IFFALSE 19775
// begin amBuildings := Delete ( amBuildings , 1 ) ;
19727: LD_ADDR_EXP 30
19731: PUSH
19732: LD_EXP 30
19736: PPUSH
19737: LD_INT 1
19739: PPUSH
19740: CALL_OW 3
19744: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
19745: LD_VAR 0 3
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: LD_INT 4
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: IN
19764: IFFALSE 19775
// ComUpgrade ( b ) ;
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 146
// end ; end ;
19775: PPOPN 3
19777: END
// on ResearchComplete ( tech , lab ) do var side ;
19778: LD_INT 0
19780: PPUSH
// begin side := GetSide ( lab ) ;
19781: LD_ADDR_VAR 0 3
19785: PUSH
19786: LD_VAR 0 2
19790: PPUSH
19791: CALL_OW 255
19795: ST_TO_ADDR
// if side = 1 then
19796: LD_VAR 0 3
19800: PUSH
19801: LD_INT 1
19803: EQUAL
19804: IFFALSE 19822
// amTech := amTech diff tech ;
19806: LD_ADDR_EXP 27
19810: PUSH
19811: LD_EXP 27
19815: PUSH
19816: LD_VAR 0 1
19820: DIFF
19821: ST_TO_ADDR
// end ;
19822: PPOPN 3
19824: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19825: LD_VAR 0 1
19829: PPUSH
19830: CALL 78804 0 1
// end ;
19834: PPOPN 1
19836: END
// on SailEvent ( event ) do begin case event of end ;
19837: LD_VAR 0 1
19841: PUSH
19842: POP
// end ;
19843: PPOPN 1
19845: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
19846: LD_EXP 19
19850: NOT
19851: IFFALSE 19855
// exit ;
19853: GO 19953
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
19855: LD_EXP 8
19859: NOT
19860: PUSH
19861: LD_VAR 0 1
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: LD_INT 1
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: IN
19876: AND
19877: PUSH
19878: LD_VAR 0 2
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: IN
19893: AND
19894: IFFALSE 19904
// spotByAmerican := true ;
19896: LD_ADDR_EXP 8
19900: PUSH
19901: LD_INT 1
19903: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
19904: LD_EXP 9
19908: NOT
19909: PUSH
19910: LD_VAR 0 1
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: LD_INT 8
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: IN
19925: AND
19926: PUSH
19927: LD_VAR 0 2
19931: PUSH
19932: LD_INT 8
19934: PUSH
19935: LD_INT 2
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: IN
19942: AND
19943: IFFALSE 19953
// spotByLegion := true ;
19945: LD_ADDR_EXP 9
19949: PUSH
19950: LD_INT 1
19952: ST_TO_ADDR
// end ; end_of_file
19953: PPOPN 2
19955: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
19956: LD_EXP 7
19960: IFFALSE 20067
19962: GO 19964
19964: DISABLE
19965: LD_INT 0
19967: PPUSH
19968: PPUSH
// begin enable ;
19969: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
19970: LD_INT 35
19972: PPUSH
19973: LD_INT 385
19975: PPUSH
19976: CALL_OW 12
19980: PPUSH
19981: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
19985: LD_ADDR_VAR 0 2
19989: PUSH
19990: LD_INT 16
19992: PUSH
19993: LD_INT 17
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
20000: LD_ADDR_VAR 0 1
20004: PUSH
20005: LD_VAR 0 2
20009: PUSH
20010: LD_INT 1
20012: PPUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: CALL 22546 0 1
20022: PPUSH
20023: CALL_OW 12
20027: ARRAY
20028: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
20029: LD_VAR 0 1
20033: PPUSH
20034: CALL_OW 435
20038: PUSH
20039: LD_INT 4
20041: LESS
20042: IFFALSE 20067
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
20044: LD_INT 1
20046: PPUSH
20047: LD_INT 5
20049: PPUSH
20050: CALL_OW 12
20054: PPUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 55
// end ;
20067: PPOPN 2
20069: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
20070: LD_OWVAR 1
20074: PUSH
20075: LD_INT 10500
20077: PUSH
20078: LD_INT 8400
20080: PUSH
20081: LD_INT 6300
20083: PUSH
20084: LD_INT 5250
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: PUSH
20093: LD_OWVAR 67
20097: ARRAY
20098: LESS
20099: PUSH
20100: LD_EXP 7
20104: AND
20105: IFFALSE 20138
20107: GO 20109
20109: DISABLE
// begin enable ;
20110: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20111: LD_INT 1
20113: PPUSH
20114: LD_INT 5
20116: PPUSH
20117: CALL_OW 12
20121: PPUSH
20122: LD_INT 218
20124: PPUSH
20125: LD_INT 92
20127: PPUSH
20128: LD_INT 11
20130: PPUSH
20131: LD_INT 1
20133: PPUSH
20134: CALL_OW 56
// end ;
20138: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
20139: LD_OWVAR 1
20143: PUSH
20144: LD_INT 12600
20146: PUSH
20147: LD_INT 10500
20149: PUSH
20150: LD_INT 8400
20152: PUSH
20153: LD_INT 7350
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: PUSH
20162: LD_OWVAR 67
20166: ARRAY
20167: GREATER
20168: PUSH
20169: LD_EXP 7
20173: AND
20174: IFFALSE 20226
20176: GO 20178
20178: DISABLE
// begin enable ;
20179: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) then
20180: LD_INT 100
20182: PUSH
20183: LD_INT 10
20185: PUSH
20186: LD_OWVAR 67
20190: MUL
20191: MINUS
20192: PPUSH
20193: CALL_OW 13
20197: IFFALSE 20226
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20199: LD_INT 1
20201: PPUSH
20202: LD_INT 5
20204: PPUSH
20205: CALL_OW 12
20209: PPUSH
20210: LD_INT 218
20212: PPUSH
20213: LD_INT 92
20215: PPUSH
20216: LD_INT 11
20218: PPUSH
20219: LD_INT 1
20221: PPUSH
20222: CALL_OW 56
// end ;
20226: END
// every 0 0$55 trigger IsOk ( amBase ) do
20227: LD_INT 2
20229: PPUSH
20230: CALL_OW 302
20234: IFFALSE 20274
20236: GO 20238
20238: DISABLE
// begin enable ;
20239: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20240: LD_INT 13
20242: PPUSH
20243: CALL_OW 435
20247: PUSH
20248: LD_INT 3
20250: LESS
20251: IFFALSE 20274
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20253: LD_INT 1
20255: PPUSH
20256: LD_INT 5
20258: PPUSH
20259: CALL_OW 12
20263: PPUSH
20264: LD_INT 13
20266: PPUSH
20267: LD_INT 1
20269: PPUSH
20270: CALL_OW 55
// end ;
20274: END
// every 1 1$05 trigger IsOk ( legBase ) do
20275: LD_INT 38
20277: PPUSH
20278: CALL_OW 302
20282: IFFALSE 20322
20284: GO 20286
20286: DISABLE
// begin enable ;
20287: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20288: LD_INT 14
20290: PPUSH
20291: CALL_OW 435
20295: PUSH
20296: LD_INT 3
20298: LESS
20299: IFFALSE 20322
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20301: LD_INT 1
20303: PPUSH
20304: LD_INT 5
20306: PPUSH
20307: CALL_OW 12
20311: PPUSH
20312: LD_INT 14
20314: PPUSH
20315: LD_INT 1
20317: PPUSH
20318: CALL_OW 55
// end ; end_of_file
20322: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20323: LD_EXP 19
20327: PUSH
20328: LD_EXP 23
20332: PPUSH
20333: CALL_OW 257
20337: PUSH
20338: LD_INT 11
20340: NONEQUAL
20341: AND
20342: PUSH
20343: LD_EXP 7
20347: AND
20348: PUSH
20349: LD_INT 85
20351: PPUSH
20352: CALL_OW 302
20356: AND
20357: IFFALSE 20377
20359: GO 20361
20361: DISABLE
// begin Query ( QSheik ) ;
20362: LD_STRING QSheik
20364: PPUSH
20365: CALL_OW 97
// omarCanChangeClass := true ;
20369: LD_ADDR_EXP 20
20373: PUSH
20374: LD_INT 1
20376: ST_TO_ADDR
// end ;
20377: END
// every 0 0$3 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20378: LD_EXP 20
20382: PUSH
20383: LD_EXP 23
20387: PPUSH
20388: CALL_OW 257
20392: PUSH
20393: LD_INT 11
20395: NONEQUAL
20396: AND
20397: PUSH
20398: LD_EXP 23
20402: PPUSH
20403: CALL_OW 310
20407: PUSH
20408: LD_INT 85
20410: EQUAL
20411: AND
20412: IFFALSE 20443
20414: GO 20416
20416: DISABLE
// begin enable ;
20417: ENABLE
// if Query ( QChangeClass ) = 1 then
20418: LD_STRING QChangeClass
20420: PPUSH
20421: CALL_OW 97
20425: PUSH
20426: LD_INT 1
20428: EQUAL
20429: IFFALSE 20443
// SetClass ( Omar , class_desert_warior ) ;
20431: LD_EXP 23
20435: PPUSH
20436: LD_INT 11
20438: PPUSH
20439: CALL_OW 336
// end ; end_of_file
20443: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20444: LD_INT 0
20446: PPUSH
20447: PPUSH
// if exist_mode then
20448: LD_VAR 0 2
20452: IFFALSE 20477
// unit := CreateCharacter ( prefix & ident ) else
20454: LD_ADDR_VAR 0 5
20458: PUSH
20459: LD_VAR 0 3
20463: PUSH
20464: LD_VAR 0 1
20468: STR
20469: PPUSH
20470: CALL_OW 34
20474: ST_TO_ADDR
20475: GO 20492
// unit := NewCharacter ( ident ) ;
20477: LD_ADDR_VAR 0 5
20481: PUSH
20482: LD_VAR 0 1
20486: PPUSH
20487: CALL_OW 25
20491: ST_TO_ADDR
// result := unit ;
20492: LD_ADDR_VAR 0 4
20496: PUSH
20497: LD_VAR 0 5
20501: ST_TO_ADDR
// end ;
20502: LD_VAR 0 4
20506: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
// if not side or not nation then
20511: LD_VAR 0 1
20515: NOT
20516: PUSH
20517: LD_VAR 0 2
20521: NOT
20522: OR
20523: IFFALSE 20527
// exit ;
20525: GO 21295
// case nation of nation_american :
20527: LD_VAR 0 2
20531: PUSH
20532: LD_INT 1
20534: DOUBLE
20535: EQUAL
20536: IFTRUE 20540
20538: GO 20754
20540: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20541: LD_ADDR_VAR 0 4
20545: PUSH
20546: LD_INT 35
20548: PUSH
20549: LD_INT 45
20551: PUSH
20552: LD_INT 46
20554: PUSH
20555: LD_INT 47
20557: PUSH
20558: LD_INT 82
20560: PUSH
20561: LD_INT 83
20563: PUSH
20564: LD_INT 84
20566: PUSH
20567: LD_INT 85
20569: PUSH
20570: LD_INT 86
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: LD_INT 6
20581: PUSH
20582: LD_INT 15
20584: PUSH
20585: LD_INT 16
20587: PUSH
20588: LD_INT 7
20590: PUSH
20591: LD_INT 12
20593: PUSH
20594: LD_INT 13
20596: PUSH
20597: LD_INT 10
20599: PUSH
20600: LD_INT 14
20602: PUSH
20603: LD_INT 20
20605: PUSH
20606: LD_INT 21
20608: PUSH
20609: LD_INT 22
20611: PUSH
20612: LD_INT 25
20614: PUSH
20615: LD_INT 32
20617: PUSH
20618: LD_INT 27
20620: PUSH
20621: LD_INT 36
20623: PUSH
20624: LD_INT 69
20626: PUSH
20627: LD_INT 39
20629: PUSH
20630: LD_INT 34
20632: PUSH
20633: LD_INT 40
20635: PUSH
20636: LD_INT 48
20638: PUSH
20639: LD_INT 49
20641: PUSH
20642: LD_INT 50
20644: PUSH
20645: LD_INT 51
20647: PUSH
20648: LD_INT 52
20650: PUSH
20651: LD_INT 53
20653: PUSH
20654: LD_INT 54
20656: PUSH
20657: LD_INT 55
20659: PUSH
20660: LD_INT 56
20662: PUSH
20663: LD_INT 57
20665: PUSH
20666: LD_INT 58
20668: PUSH
20669: LD_INT 59
20671: PUSH
20672: LD_INT 60
20674: PUSH
20675: LD_INT 61
20677: PUSH
20678: LD_INT 62
20680: PUSH
20681: LD_INT 80
20683: PUSH
20684: LD_INT 82
20686: PUSH
20687: LD_INT 83
20689: PUSH
20690: LD_INT 84
20692: PUSH
20693: LD_INT 85
20695: PUSH
20696: LD_INT 86
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: ST_TO_ADDR
20752: GO 21219
20754: LD_INT 2
20756: DOUBLE
20757: EQUAL
20758: IFTRUE 20762
20760: GO 20988
20762: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20763: LD_ADDR_VAR 0 4
20767: PUSH
20768: LD_INT 35
20770: PUSH
20771: LD_INT 45
20773: PUSH
20774: LD_INT 46
20776: PUSH
20777: LD_INT 47
20779: PUSH
20780: LD_INT 82
20782: PUSH
20783: LD_INT 83
20785: PUSH
20786: LD_INT 84
20788: PUSH
20789: LD_INT 85
20791: PUSH
20792: LD_INT 87
20794: PUSH
20795: LD_INT 70
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 11
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: LD_INT 4
20809: PUSH
20810: LD_INT 5
20812: PUSH
20813: LD_INT 6
20815: PUSH
20816: LD_INT 15
20818: PUSH
20819: LD_INT 18
20821: PUSH
20822: LD_INT 7
20824: PUSH
20825: LD_INT 17
20827: PUSH
20828: LD_INT 8
20830: PUSH
20831: LD_INT 20
20833: PUSH
20834: LD_INT 21
20836: PUSH
20837: LD_INT 22
20839: PUSH
20840: LD_INT 72
20842: PUSH
20843: LD_INT 26
20845: PUSH
20846: LD_INT 69
20848: PUSH
20849: LD_INT 39
20851: PUSH
20852: LD_INT 40
20854: PUSH
20855: LD_INT 41
20857: PUSH
20858: LD_INT 42
20860: PUSH
20861: LD_INT 43
20863: PUSH
20864: LD_INT 48
20866: PUSH
20867: LD_INT 49
20869: PUSH
20870: LD_INT 50
20872: PUSH
20873: LD_INT 51
20875: PUSH
20876: LD_INT 52
20878: PUSH
20879: LD_INT 53
20881: PUSH
20882: LD_INT 54
20884: PUSH
20885: LD_INT 55
20887: PUSH
20888: LD_INT 56
20890: PUSH
20891: LD_INT 60
20893: PUSH
20894: LD_INT 61
20896: PUSH
20897: LD_INT 62
20899: PUSH
20900: LD_INT 66
20902: PUSH
20903: LD_INT 67
20905: PUSH
20906: LD_INT 68
20908: PUSH
20909: LD_INT 81
20911: PUSH
20912: LD_INT 82
20914: PUSH
20915: LD_INT 83
20917: PUSH
20918: LD_INT 84
20920: PUSH
20921: LD_INT 85
20923: PUSH
20924: LD_INT 87
20926: PUSH
20927: LD_INT 88
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: ST_TO_ADDR
20986: GO 21219
20988: LD_INT 3
20990: DOUBLE
20991: EQUAL
20992: IFTRUE 20996
20994: GO 21218
20996: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20997: LD_ADDR_VAR 0 4
21001: PUSH
21002: LD_INT 46
21004: PUSH
21005: LD_INT 47
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: LD_INT 2
21013: PUSH
21014: LD_INT 82
21016: PUSH
21017: LD_INT 83
21019: PUSH
21020: LD_INT 84
21022: PUSH
21023: LD_INT 85
21025: PUSH
21026: LD_INT 86
21028: PUSH
21029: LD_INT 11
21031: PUSH
21032: LD_INT 9
21034: PUSH
21035: LD_INT 20
21037: PUSH
21038: LD_INT 19
21040: PUSH
21041: LD_INT 21
21043: PUSH
21044: LD_INT 24
21046: PUSH
21047: LD_INT 22
21049: PUSH
21050: LD_INT 25
21052: PUSH
21053: LD_INT 28
21055: PUSH
21056: LD_INT 29
21058: PUSH
21059: LD_INT 30
21061: PUSH
21062: LD_INT 31
21064: PUSH
21065: LD_INT 37
21067: PUSH
21068: LD_INT 38
21070: PUSH
21071: LD_INT 32
21073: PUSH
21074: LD_INT 27
21076: PUSH
21077: LD_INT 33
21079: PUSH
21080: LD_INT 69
21082: PUSH
21083: LD_INT 39
21085: PUSH
21086: LD_INT 34
21088: PUSH
21089: LD_INT 40
21091: PUSH
21092: LD_INT 71
21094: PUSH
21095: LD_INT 23
21097: PUSH
21098: LD_INT 44
21100: PUSH
21101: LD_INT 48
21103: PUSH
21104: LD_INT 49
21106: PUSH
21107: LD_INT 50
21109: PUSH
21110: LD_INT 51
21112: PUSH
21113: LD_INT 52
21115: PUSH
21116: LD_INT 53
21118: PUSH
21119: LD_INT 54
21121: PUSH
21122: LD_INT 55
21124: PUSH
21125: LD_INT 56
21127: PUSH
21128: LD_INT 57
21130: PUSH
21131: LD_INT 58
21133: PUSH
21134: LD_INT 59
21136: PUSH
21137: LD_INT 63
21139: PUSH
21140: LD_INT 64
21142: PUSH
21143: LD_INT 65
21145: PUSH
21146: LD_INT 82
21148: PUSH
21149: LD_INT 83
21151: PUSH
21152: LD_INT 84
21154: PUSH
21155: LD_INT 85
21157: PUSH
21158: LD_INT 86
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: ST_TO_ADDR
21216: GO 21219
21218: POP
// if state > - 1 and state < 3 then
21219: LD_VAR 0 3
21223: PUSH
21224: LD_INT 1
21226: NEG
21227: GREATER
21228: PUSH
21229: LD_VAR 0 3
21233: PUSH
21234: LD_INT 3
21236: LESS
21237: AND
21238: IFFALSE 21295
// for i in result do
21240: LD_ADDR_VAR 0 5
21244: PUSH
21245: LD_VAR 0 4
21249: PUSH
21250: FOR_IN
21251: IFFALSE 21293
// if GetTech ( i , side ) <> state then
21253: LD_VAR 0 5
21257: PPUSH
21258: LD_VAR 0 1
21262: PPUSH
21263: CALL_OW 321
21267: PUSH
21268: LD_VAR 0 3
21272: NONEQUAL
21273: IFFALSE 21291
// result := result diff i ;
21275: LD_ADDR_VAR 0 4
21279: PUSH
21280: LD_VAR 0 4
21284: PUSH
21285: LD_VAR 0 5
21289: DIFF
21290: ST_TO_ADDR
21291: GO 21250
21293: POP
21294: POP
// end ;
21295: LD_VAR 0 4
21299: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21300: LD_INT 0
21302: PPUSH
21303: PPUSH
21304: PPUSH
// result := true ;
21305: LD_ADDR_VAR 0 3
21309: PUSH
21310: LD_INT 1
21312: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21313: LD_ADDR_VAR 0 5
21317: PUSH
21318: LD_VAR 0 2
21322: PPUSH
21323: CALL_OW 480
21327: ST_TO_ADDR
// if not tmp then
21328: LD_VAR 0 5
21332: NOT
21333: IFFALSE 21337
// exit ;
21335: GO 21386
// for i in tmp do
21337: LD_ADDR_VAR 0 4
21341: PUSH
21342: LD_VAR 0 5
21346: PUSH
21347: FOR_IN
21348: IFFALSE 21384
// if GetTech ( i , side ) <> state_researched then
21350: LD_VAR 0 4
21354: PPUSH
21355: LD_VAR 0 1
21359: PPUSH
21360: CALL_OW 321
21364: PUSH
21365: LD_INT 2
21367: NONEQUAL
21368: IFFALSE 21382
// begin result := false ;
21370: LD_ADDR_VAR 0 3
21374: PUSH
21375: LD_INT 0
21377: ST_TO_ADDR
// exit ;
21378: POP
21379: POP
21380: GO 21386
// end ;
21382: GO 21347
21384: POP
21385: POP
// end ;
21386: LD_VAR 0 3
21390: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21391: LD_INT 0
21393: PPUSH
21394: PPUSH
21395: PPUSH
21396: PPUSH
21397: PPUSH
21398: PPUSH
21399: PPUSH
21400: PPUSH
21401: PPUSH
21402: PPUSH
21403: PPUSH
21404: PPUSH
21405: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21406: LD_VAR 0 1
21410: NOT
21411: PUSH
21412: LD_VAR 0 1
21416: PPUSH
21417: CALL_OW 257
21421: PUSH
21422: LD_INT 9
21424: NONEQUAL
21425: OR
21426: IFFALSE 21430
// exit ;
21428: GO 22003
// side := GetSide ( unit ) ;
21430: LD_ADDR_VAR 0 9
21434: PUSH
21435: LD_VAR 0 1
21439: PPUSH
21440: CALL_OW 255
21444: ST_TO_ADDR
// tech_space := tech_spacanom ;
21445: LD_ADDR_VAR 0 12
21449: PUSH
21450: LD_INT 29
21452: ST_TO_ADDR
// tech_time := tech_taurad ;
21453: LD_ADDR_VAR 0 13
21457: PUSH
21458: LD_INT 28
21460: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21461: LD_ADDR_VAR 0 11
21465: PUSH
21466: LD_VAR 0 1
21470: PPUSH
21471: CALL_OW 310
21475: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21476: LD_VAR 0 11
21480: PPUSH
21481: CALL_OW 247
21485: PUSH
21486: LD_INT 2
21488: EQUAL
21489: IFFALSE 21493
// exit ;
21491: GO 22003
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21493: LD_ADDR_VAR 0 8
21497: PUSH
21498: LD_INT 81
21500: PUSH
21501: LD_VAR 0 9
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 3
21512: PUSH
21513: LD_INT 21
21515: PUSH
21516: LD_INT 3
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PPUSH
21531: CALL_OW 69
21535: ST_TO_ADDR
// if not tmp then
21536: LD_VAR 0 8
21540: NOT
21541: IFFALSE 21545
// exit ;
21543: GO 22003
// if in_unit then
21545: LD_VAR 0 11
21549: IFFALSE 21573
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21551: LD_ADDR_VAR 0 10
21555: PUSH
21556: LD_VAR 0 8
21560: PPUSH
21561: LD_VAR 0 11
21565: PPUSH
21566: CALL_OW 74
21570: ST_TO_ADDR
21571: GO 21593
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21573: LD_ADDR_VAR 0 10
21577: PUSH
21578: LD_VAR 0 8
21582: PPUSH
21583: LD_VAR 0 1
21587: PPUSH
21588: CALL_OW 74
21592: ST_TO_ADDR
// if not enemy then
21593: LD_VAR 0 10
21597: NOT
21598: IFFALSE 21602
// exit ;
21600: GO 22003
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21602: LD_VAR 0 11
21606: PUSH
21607: LD_VAR 0 11
21611: PPUSH
21612: LD_VAR 0 10
21616: PPUSH
21617: CALL_OW 296
21621: PUSH
21622: LD_INT 13
21624: GREATER
21625: AND
21626: PUSH
21627: LD_VAR 0 1
21631: PPUSH
21632: LD_VAR 0 10
21636: PPUSH
21637: CALL_OW 296
21641: PUSH
21642: LD_INT 12
21644: GREATER
21645: OR
21646: IFFALSE 21650
// exit ;
21648: GO 22003
// missile := [ 1 ] ;
21650: LD_ADDR_VAR 0 14
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21661: LD_VAR 0 9
21665: PPUSH
21666: LD_VAR 0 12
21670: PPUSH
21671: CALL_OW 325
21675: IFFALSE 21704
// missile := Replace ( missile , missile + 1 , 2 ) ;
21677: LD_ADDR_VAR 0 14
21681: PUSH
21682: LD_VAR 0 14
21686: PPUSH
21687: LD_VAR 0 14
21691: PUSH
21692: LD_INT 1
21694: PLUS
21695: PPUSH
21696: LD_INT 2
21698: PPUSH
21699: CALL_OW 1
21703: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21704: LD_VAR 0 9
21708: PPUSH
21709: LD_VAR 0 13
21713: PPUSH
21714: CALL_OW 325
21718: PUSH
21719: LD_VAR 0 10
21723: PPUSH
21724: CALL_OW 255
21728: PPUSH
21729: LD_VAR 0 13
21733: PPUSH
21734: CALL_OW 325
21738: NOT
21739: AND
21740: IFFALSE 21769
// missile := Replace ( missile , missile + 1 , 3 ) ;
21742: LD_ADDR_VAR 0 14
21746: PUSH
21747: LD_VAR 0 14
21751: PPUSH
21752: LD_VAR 0 14
21756: PUSH
21757: LD_INT 1
21759: PLUS
21760: PPUSH
21761: LD_INT 3
21763: PPUSH
21764: CALL_OW 1
21768: ST_TO_ADDR
// if missile < 2 then
21769: LD_VAR 0 14
21773: PUSH
21774: LD_INT 2
21776: LESS
21777: IFFALSE 21781
// exit ;
21779: GO 22003
// x := GetX ( enemy ) ;
21781: LD_ADDR_VAR 0 4
21785: PUSH
21786: LD_VAR 0 10
21790: PPUSH
21791: CALL_OW 250
21795: ST_TO_ADDR
// y := GetY ( enemy ) ;
21796: LD_ADDR_VAR 0 5
21800: PUSH
21801: LD_VAR 0 10
21805: PPUSH
21806: CALL_OW 251
21810: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21811: LD_ADDR_VAR 0 6
21815: PUSH
21816: LD_VAR 0 4
21820: PUSH
21821: LD_INT 1
21823: NEG
21824: PPUSH
21825: LD_INT 1
21827: PPUSH
21828: CALL_OW 12
21832: PLUS
21833: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21834: LD_ADDR_VAR 0 7
21838: PUSH
21839: LD_VAR 0 5
21843: PUSH
21844: LD_INT 1
21846: NEG
21847: PPUSH
21848: LD_INT 1
21850: PPUSH
21851: CALL_OW 12
21855: PLUS
21856: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21857: LD_VAR 0 6
21861: PPUSH
21862: LD_VAR 0 7
21866: PPUSH
21867: CALL_OW 488
21871: NOT
21872: IFFALSE 21894
// begin _x := x ;
21874: LD_ADDR_VAR 0 6
21878: PUSH
21879: LD_VAR 0 4
21883: ST_TO_ADDR
// _y := y ;
21884: LD_ADDR_VAR 0 7
21888: PUSH
21889: LD_VAR 0 5
21893: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21894: LD_ADDR_VAR 0 3
21898: PUSH
21899: LD_INT 1
21901: PPUSH
21902: LD_VAR 0 14
21906: PPUSH
21907: CALL_OW 12
21911: ST_TO_ADDR
// case i of 1 :
21912: LD_VAR 0 3
21916: PUSH
21917: LD_INT 1
21919: DOUBLE
21920: EQUAL
21921: IFTRUE 21925
21923: GO 21942
21925: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21926: LD_VAR 0 1
21930: PPUSH
21931: LD_VAR 0 10
21935: PPUSH
21936: CALL_OW 115
21940: GO 22003
21942: LD_INT 2
21944: DOUBLE
21945: EQUAL
21946: IFTRUE 21950
21948: GO 21972
21950: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21951: LD_VAR 0 1
21955: PPUSH
21956: LD_VAR 0 6
21960: PPUSH
21961: LD_VAR 0 7
21965: PPUSH
21966: CALL_OW 153
21970: GO 22003
21972: LD_INT 3
21974: DOUBLE
21975: EQUAL
21976: IFTRUE 21980
21978: GO 22002
21980: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21981: LD_VAR 0 1
21985: PPUSH
21986: LD_VAR 0 6
21990: PPUSH
21991: LD_VAR 0 7
21995: PPUSH
21996: CALL_OW 154
22000: GO 22003
22002: POP
// end ;
22003: LD_VAR 0 2
22007: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
22012: PPUSH
22013: PPUSH
22014: PPUSH
22015: PPUSH
// if not unit or not building then
22016: LD_VAR 0 1
22020: NOT
22021: PUSH
22022: LD_VAR 0 2
22026: NOT
22027: OR
22028: IFFALSE 22032
// exit ;
22030: GO 22190
// x := GetX ( building ) ;
22032: LD_ADDR_VAR 0 5
22036: PUSH
22037: LD_VAR 0 2
22041: PPUSH
22042: CALL_OW 250
22046: ST_TO_ADDR
// y := GetY ( building ) ;
22047: LD_ADDR_VAR 0 6
22051: PUSH
22052: LD_VAR 0 2
22056: PPUSH
22057: CALL_OW 251
22061: ST_TO_ADDR
// for i = 0 to 5 do
22062: LD_ADDR_VAR 0 4
22066: PUSH
22067: DOUBLE
22068: LD_INT 0
22070: DEC
22071: ST_TO_ADDR
22072: LD_INT 5
22074: PUSH
22075: FOR_TO
22076: IFFALSE 22188
// begin _x := ShiftX ( x , i , 3 ) ;
22078: LD_ADDR_VAR 0 7
22082: PUSH
22083: LD_VAR 0 5
22087: PPUSH
22088: LD_VAR 0 4
22092: PPUSH
22093: LD_INT 3
22095: PPUSH
22096: CALL_OW 272
22100: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22101: LD_ADDR_VAR 0 8
22105: PUSH
22106: LD_VAR 0 6
22110: PPUSH
22111: LD_VAR 0 4
22115: PPUSH
22116: LD_INT 3
22118: PPUSH
22119: CALL_OW 273
22123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22124: LD_VAR 0 7
22128: PPUSH
22129: LD_VAR 0 8
22133: PPUSH
22134: CALL_OW 488
22138: NOT
22139: IFFALSE 22143
// continue ;
22141: GO 22075
// if HexInfo ( _x , _y ) = 0 then
22143: LD_VAR 0 7
22147: PPUSH
22148: LD_VAR 0 8
22152: PPUSH
22153: CALL_OW 428
22157: PUSH
22158: LD_INT 0
22160: EQUAL
22161: IFFALSE 22186
// begin ComMoveXY ( unit , _x , _y ) ;
22163: LD_VAR 0 1
22167: PPUSH
22168: LD_VAR 0 7
22172: PPUSH
22173: LD_VAR 0 8
22177: PPUSH
22178: CALL_OW 111
// exit ;
22182: POP
22183: POP
22184: GO 22190
// end ; end ;
22186: GO 22075
22188: POP
22189: POP
// end ;
22190: LD_VAR 0 3
22194: RET
// export function ScanBase ( side , base_area ) ; begin
22195: LD_INT 0
22197: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22198: LD_ADDR_VAR 0 3
22202: PUSH
22203: LD_VAR 0 2
22207: PPUSH
22208: LD_INT 81
22210: PUSH
22211: LD_VAR 0 1
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PPUSH
22220: CALL_OW 70
22224: ST_TO_ADDR
// end ;
22225: LD_VAR 0 3
22229: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22230: LD_INT 0
22232: PPUSH
22233: PPUSH
22234: PPUSH
22235: PPUSH
// result := false ;
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: LD_INT 0
22243: ST_TO_ADDR
// side := GetSide ( unit ) ;
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: LD_VAR 0 1
22253: PPUSH
22254: CALL_OW 255
22258: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22259: LD_ADDR_VAR 0 4
22263: PUSH
22264: LD_VAR 0 1
22268: PPUSH
22269: CALL_OW 248
22273: ST_TO_ADDR
// case nat of 1 :
22274: LD_VAR 0 4
22278: PUSH
22279: LD_INT 1
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22298
22287: POP
// tech := tech_lassight ; 2 :
22288: LD_ADDR_VAR 0 5
22292: PUSH
22293: LD_INT 12
22295: ST_TO_ADDR
22296: GO 22337
22298: LD_INT 2
22300: DOUBLE
22301: EQUAL
22302: IFTRUE 22306
22304: GO 22317
22306: POP
// tech := tech_mortar ; 3 :
22307: LD_ADDR_VAR 0 5
22311: PUSH
22312: LD_INT 41
22314: ST_TO_ADDR
22315: GO 22337
22317: LD_INT 3
22319: DOUBLE
22320: EQUAL
22321: IFTRUE 22325
22323: GO 22336
22325: POP
// tech := tech_bazooka ; end ;
22326: LD_ADDR_VAR 0 5
22330: PUSH
22331: LD_INT 44
22333: ST_TO_ADDR
22334: GO 22337
22336: POP
// if Researched ( side , tech ) then
22337: LD_VAR 0 3
22341: PPUSH
22342: LD_VAR 0 5
22346: PPUSH
22347: CALL_OW 325
22351: IFFALSE 22378
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_INT 5
22360: PUSH
22361: LD_INT 8
22363: PUSH
22364: LD_INT 9
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: LD_VAR 0 4
22376: ARRAY
22377: ST_TO_ADDR
// end ;
22378: LD_VAR 0 2
22382: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22383: LD_INT 0
22385: PPUSH
22386: PPUSH
22387: PPUSH
// if not mines then
22388: LD_VAR 0 2
22392: NOT
22393: IFFALSE 22397
// exit ;
22395: GO 22541
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22397: LD_ADDR_VAR 0 5
22401: PUSH
22402: LD_INT 81
22404: PUSH
22405: LD_VAR 0 1
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: LD_INT 21
22419: PUSH
22420: LD_INT 3
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PPUSH
22435: CALL_OW 69
22439: ST_TO_ADDR
// for i in mines do
22440: LD_ADDR_VAR 0 4
22444: PUSH
22445: LD_VAR 0 2
22449: PUSH
22450: FOR_IN
22451: IFFALSE 22539
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22453: LD_VAR 0 4
22457: PUSH
22458: LD_INT 1
22460: ARRAY
22461: PPUSH
22462: LD_VAR 0 4
22466: PUSH
22467: LD_INT 2
22469: ARRAY
22470: PPUSH
22471: CALL_OW 458
22475: NOT
22476: IFFALSE 22480
// continue ;
22478: GO 22450
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22480: LD_VAR 0 4
22484: PUSH
22485: LD_INT 1
22487: ARRAY
22488: PPUSH
22489: LD_VAR 0 4
22493: PUSH
22494: LD_INT 2
22496: ARRAY
22497: PPUSH
22498: CALL_OW 428
22502: PUSH
22503: LD_VAR 0 5
22507: IN
22508: IFFALSE 22537
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22510: LD_VAR 0 4
22514: PUSH
22515: LD_INT 1
22517: ARRAY
22518: PPUSH
22519: LD_VAR 0 4
22523: PUSH
22524: LD_INT 2
22526: ARRAY
22527: PPUSH
22528: LD_VAR 0 1
22532: PPUSH
22533: CALL_OW 456
// end ;
22537: GO 22450
22539: POP
22540: POP
// end ;
22541: LD_VAR 0 3
22545: RET
// export function Count ( array ) ; begin
22546: LD_INT 0
22548: PPUSH
// result := array + 0 ;
22549: LD_ADDR_VAR 0 2
22553: PUSH
22554: LD_VAR 0 1
22558: PUSH
22559: LD_INT 0
22561: PLUS
22562: ST_TO_ADDR
// end ;
22563: LD_VAR 0 2
22567: RET
// export function IsEmpty ( building ) ; begin
22568: LD_INT 0
22570: PPUSH
// if not building then
22571: LD_VAR 0 1
22575: NOT
22576: IFFALSE 22580
// exit ;
22578: GO 22623
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22580: LD_ADDR_VAR 0 2
22584: PUSH
22585: LD_VAR 0 1
22589: PUSH
22590: LD_INT 22
22592: PUSH
22593: LD_VAR 0 1
22597: PPUSH
22598: CALL_OW 255
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 58
22609: PUSH
22610: EMPTY
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PPUSH
22617: CALL_OW 69
22621: IN
22622: ST_TO_ADDR
// end ;
22623: LD_VAR 0 2
22627: RET
// export function IsNotFull ( building ) ; var places ; begin
22628: LD_INT 0
22630: PPUSH
22631: PPUSH
// if not building then
22632: LD_VAR 0 1
22636: NOT
22637: IFFALSE 22641
// exit ;
22639: GO 22669
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22641: LD_ADDR_VAR 0 2
22645: PUSH
22646: LD_VAR 0 1
22650: PPUSH
22651: LD_INT 3
22653: PUSH
22654: LD_INT 62
22656: PUSH
22657: EMPTY
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 72
22668: ST_TO_ADDR
// end ;
22669: LD_VAR 0 2
22673: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22674: LD_INT 0
22676: PPUSH
22677: PPUSH
22678: PPUSH
22679: PPUSH
// tmp := [ ] ;
22680: LD_ADDR_VAR 0 3
22684: PUSH
22685: EMPTY
22686: ST_TO_ADDR
// list := [ ] ;
22687: LD_ADDR_VAR 0 5
22691: PUSH
22692: EMPTY
22693: ST_TO_ADDR
// for i = 16 to 25 do
22694: LD_ADDR_VAR 0 4
22698: PUSH
22699: DOUBLE
22700: LD_INT 16
22702: DEC
22703: ST_TO_ADDR
22704: LD_INT 25
22706: PUSH
22707: FOR_TO
22708: IFFALSE 22781
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22710: LD_ADDR_VAR 0 3
22714: PUSH
22715: LD_VAR 0 3
22719: PUSH
22720: LD_INT 22
22722: PUSH
22723: LD_VAR 0 1
22727: PPUSH
22728: CALL_OW 255
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 91
22739: PUSH
22740: LD_VAR 0 1
22744: PUSH
22745: LD_INT 6
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 30
22755: PUSH
22756: LD_VAR 0 4
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: PPUSH
22773: CALL_OW 69
22777: ADD
22778: ST_TO_ADDR
22779: GO 22707
22781: POP
22782: POP
// for i = 1 to tmp do
22783: LD_ADDR_VAR 0 4
22787: PUSH
22788: DOUBLE
22789: LD_INT 1
22791: DEC
22792: ST_TO_ADDR
22793: LD_VAR 0 3
22797: PUSH
22798: FOR_TO
22799: IFFALSE 22887
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22801: LD_ADDR_VAR 0 5
22805: PUSH
22806: LD_VAR 0 5
22810: PUSH
22811: LD_VAR 0 3
22815: PUSH
22816: LD_VAR 0 4
22820: ARRAY
22821: PPUSH
22822: CALL_OW 266
22826: PUSH
22827: LD_VAR 0 3
22831: PUSH
22832: LD_VAR 0 4
22836: ARRAY
22837: PPUSH
22838: CALL_OW 250
22842: PUSH
22843: LD_VAR 0 3
22847: PUSH
22848: LD_VAR 0 4
22852: ARRAY
22853: PPUSH
22854: CALL_OW 251
22858: PUSH
22859: LD_VAR 0 3
22863: PUSH
22864: LD_VAR 0 4
22868: ARRAY
22869: PPUSH
22870: CALL_OW 254
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: ADD
22884: ST_TO_ADDR
22885: GO 22798
22887: POP
22888: POP
// result := list ;
22889: LD_ADDR_VAR 0 2
22893: PUSH
22894: LD_VAR 0 5
22898: ST_TO_ADDR
// end ;
22899: LD_VAR 0 2
22903: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22904: LD_INT 0
22906: PPUSH
22907: PPUSH
22908: PPUSH
22909: PPUSH
22910: PPUSH
22911: PPUSH
22912: PPUSH
// if not factory then
22913: LD_VAR 0 1
22917: NOT
22918: IFFALSE 22922
// exit ;
22920: GO 23515
// if control = control_apeman then
22922: LD_VAR 0 4
22926: PUSH
22927: LD_INT 5
22929: EQUAL
22930: IFFALSE 23039
// begin tmp := UnitsInside ( factory ) ;
22932: LD_ADDR_VAR 0 8
22936: PUSH
22937: LD_VAR 0 1
22941: PPUSH
22942: CALL_OW 313
22946: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22947: LD_VAR 0 8
22951: PPUSH
22952: LD_INT 25
22954: PUSH
22955: LD_INT 12
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PPUSH
22962: CALL_OW 72
22966: NOT
22967: IFFALSE 22977
// control := control_manual ;
22969: LD_ADDR_VAR 0 4
22973: PUSH
22974: LD_INT 1
22976: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22977: LD_ADDR_VAR 0 8
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL 22674 0 1
22991: ST_TO_ADDR
// if tmp then
22992: LD_VAR 0 8
22996: IFFALSE 23039
// begin for i in tmp do
22998: LD_ADDR_VAR 0 7
23002: PUSH
23003: LD_VAR 0 8
23007: PUSH
23008: FOR_IN
23009: IFFALSE 23037
// if i [ 1 ] = b_ext_radio then
23011: LD_VAR 0 7
23015: PUSH
23016: LD_INT 1
23018: ARRAY
23019: PUSH
23020: LD_INT 22
23022: EQUAL
23023: IFFALSE 23035
// begin control := control_remote ;
23025: LD_ADDR_VAR 0 4
23029: PUSH
23030: LD_INT 2
23032: ST_TO_ADDR
// break ;
23033: GO 23037
// end ;
23035: GO 23008
23037: POP
23038: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23039: LD_VAR 0 1
23043: PPUSH
23044: LD_VAR 0 2
23048: PPUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: LD_VAR 0 4
23058: PPUSH
23059: LD_VAR 0 5
23063: PPUSH
23064: CALL_OW 448
23068: IFFALSE 23103
// begin result := [ chassis , engine , control , weapon ] ;
23070: LD_ADDR_VAR 0 6
23074: PUSH
23075: LD_VAR 0 2
23079: PUSH
23080: LD_VAR 0 3
23084: PUSH
23085: LD_VAR 0 4
23089: PUSH
23090: LD_VAR 0 5
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: ST_TO_ADDR
// exit ;
23101: GO 23515
// end ; _chassis := AvailableChassisList ( factory ) ;
23103: LD_ADDR_VAR 0 9
23107: PUSH
23108: LD_VAR 0 1
23112: PPUSH
23113: CALL_OW 475
23117: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23118: LD_ADDR_VAR 0 11
23122: PUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 476
23132: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23133: LD_ADDR_VAR 0 12
23137: PUSH
23138: LD_VAR 0 1
23142: PPUSH
23143: CALL_OW 477
23147: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23148: LD_ADDR_VAR 0 10
23152: PUSH
23153: LD_VAR 0 1
23157: PPUSH
23158: CALL_OW 478
23162: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23163: LD_VAR 0 9
23167: NOT
23168: PUSH
23169: LD_VAR 0 11
23173: NOT
23174: OR
23175: PUSH
23176: LD_VAR 0 12
23180: NOT
23181: OR
23182: PUSH
23183: LD_VAR 0 10
23187: NOT
23188: OR
23189: IFFALSE 23224
// begin result := [ chassis , engine , control , weapon ] ;
23191: LD_ADDR_VAR 0 6
23195: PUSH
23196: LD_VAR 0 2
23200: PUSH
23201: LD_VAR 0 3
23205: PUSH
23206: LD_VAR 0 4
23210: PUSH
23211: LD_VAR 0 5
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: ST_TO_ADDR
// exit ;
23222: GO 23515
// end ; if not chassis in _chassis then
23224: LD_VAR 0 2
23228: PUSH
23229: LD_VAR 0 9
23233: IN
23234: NOT
23235: IFFALSE 23261
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_VAR 0 9
23246: PUSH
23247: LD_INT 1
23249: PPUSH
23250: LD_VAR 0 9
23254: PPUSH
23255: CALL_OW 12
23259: ARRAY
23260: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23261: LD_VAR 0 2
23265: PPUSH
23266: LD_VAR 0 3
23270: PPUSH
23271: CALL 23520 0 2
23275: NOT
23276: IFFALSE 23335
// repeat engine := _engine [ 1 ] ;
23278: LD_ADDR_VAR 0 3
23282: PUSH
23283: LD_VAR 0 11
23287: PUSH
23288: LD_INT 1
23290: ARRAY
23291: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23292: LD_ADDR_VAR 0 11
23296: PUSH
23297: LD_VAR 0 11
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 3
23309: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23310: LD_VAR 0 2
23314: PPUSH
23315: LD_VAR 0 3
23319: PPUSH
23320: CALL 23520 0 2
23324: PUSH
23325: LD_VAR 0 11
23329: PUSH
23330: EMPTY
23331: EQUAL
23332: OR
23333: IFFALSE 23278
// if not control in _control then
23335: LD_VAR 0 4
23339: PUSH
23340: LD_VAR 0 12
23344: IN
23345: NOT
23346: IFFALSE 23372
// control := _control [ rand ( 1 , _control ) ] ;
23348: LD_ADDR_VAR 0 4
23352: PUSH
23353: LD_VAR 0 12
23357: PUSH
23358: LD_INT 1
23360: PPUSH
23361: LD_VAR 0 12
23365: PPUSH
23366: CALL_OW 12
23370: ARRAY
23371: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23372: LD_VAR 0 2
23376: PPUSH
23377: LD_VAR 0 5
23381: PPUSH
23382: CALL 23740 0 2
23386: NOT
23387: IFFALSE 23446
// repeat weapon := _weapon [ 1 ] ;
23389: LD_ADDR_VAR 0 5
23393: PUSH
23394: LD_VAR 0 10
23398: PUSH
23399: LD_INT 1
23401: ARRAY
23402: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23403: LD_ADDR_VAR 0 10
23407: PUSH
23408: LD_VAR 0 10
23412: PPUSH
23413: LD_INT 1
23415: PPUSH
23416: CALL_OW 3
23420: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23421: LD_VAR 0 2
23425: PPUSH
23426: LD_VAR 0 5
23430: PPUSH
23431: CALL 23740 0 2
23435: PUSH
23436: LD_VAR 0 10
23440: PUSH
23441: EMPTY
23442: EQUAL
23443: OR
23444: IFFALSE 23389
// result := [ ] ;
23446: LD_ADDR_VAR 0 6
23450: PUSH
23451: EMPTY
23452: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23453: LD_VAR 0 1
23457: PPUSH
23458: LD_VAR 0 2
23462: PPUSH
23463: LD_VAR 0 3
23467: PPUSH
23468: LD_VAR 0 4
23472: PPUSH
23473: LD_VAR 0 5
23477: PPUSH
23478: CALL_OW 448
23482: IFFALSE 23515
// result := [ chassis , engine , control , weapon ] ;
23484: LD_ADDR_VAR 0 6
23488: PUSH
23489: LD_VAR 0 2
23493: PUSH
23494: LD_VAR 0 3
23498: PUSH
23499: LD_VAR 0 4
23503: PUSH
23504: LD_VAR 0 5
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: ST_TO_ADDR
// end ;
23515: LD_VAR 0 6
23519: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23520: LD_INT 0
23522: PPUSH
// if not chassis or not engine then
23523: LD_VAR 0 1
23527: NOT
23528: PUSH
23529: LD_VAR 0 2
23533: NOT
23534: OR
23535: IFFALSE 23539
// exit ;
23537: GO 23735
// case engine of engine_solar :
23539: LD_VAR 0 2
23543: PUSH
23544: LD_INT 2
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23590
23552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: LD_INT 11
23560: PUSH
23561: LD_INT 12
23563: PUSH
23564: LD_INT 13
23566: PUSH
23567: LD_INT 14
23569: PUSH
23570: LD_INT 1
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: LD_INT 3
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: ST_TO_ADDR
23588: GO 23719
23590: LD_INT 1
23592: DOUBLE
23593: EQUAL
23594: IFTRUE 23598
23596: GO 23660
23598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23599: LD_ADDR_VAR 0 3
23603: PUSH
23604: LD_INT 11
23606: PUSH
23607: LD_INT 12
23609: PUSH
23610: LD_INT 13
23612: PUSH
23613: LD_INT 14
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: LD_INT 3
23624: PUSH
23625: LD_INT 4
23627: PUSH
23628: LD_INT 5
23630: PUSH
23631: LD_INT 21
23633: PUSH
23634: LD_INT 23
23636: PUSH
23637: LD_INT 22
23639: PUSH
23640: LD_INT 24
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: ST_TO_ADDR
23658: GO 23719
23660: LD_INT 3
23662: DOUBLE
23663: EQUAL
23664: IFTRUE 23668
23666: GO 23718
23668: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23669: LD_ADDR_VAR 0 3
23673: PUSH
23674: LD_INT 13
23676: PUSH
23677: LD_INT 14
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: LD_INT 4
23688: PUSH
23689: LD_INT 5
23691: PUSH
23692: LD_INT 21
23694: PUSH
23695: LD_INT 22
23697: PUSH
23698: LD_INT 23
23700: PUSH
23701: LD_INT 24
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: ST_TO_ADDR
23716: GO 23719
23718: POP
// result := ( chassis in result ) ;
23719: LD_ADDR_VAR 0 3
23723: PUSH
23724: LD_VAR 0 1
23728: PUSH
23729: LD_VAR 0 3
23733: IN
23734: ST_TO_ADDR
// end ;
23735: LD_VAR 0 3
23739: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23740: LD_INT 0
23742: PPUSH
// if not chassis or not weapon then
23743: LD_VAR 0 1
23747: NOT
23748: PUSH
23749: LD_VAR 0 2
23753: NOT
23754: OR
23755: IFFALSE 23759
// exit ;
23757: GO 24819
// case weapon of us_machine_gun :
23759: LD_VAR 0 2
23763: PUSH
23764: LD_INT 2
23766: DOUBLE
23767: EQUAL
23768: IFTRUE 23772
23770: GO 23802
23772: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23773: LD_ADDR_VAR 0 3
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 2
23783: PUSH
23784: LD_INT 3
23786: PUSH
23787: LD_INT 4
23789: PUSH
23790: LD_INT 5
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: ST_TO_ADDR
23800: GO 24803
23802: LD_INT 3
23804: DOUBLE
23805: EQUAL
23806: IFTRUE 23810
23808: GO 23840
23810: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23811: LD_ADDR_VAR 0 3
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: LD_INT 3
23824: PUSH
23825: LD_INT 4
23827: PUSH
23828: LD_INT 5
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: ST_TO_ADDR
23838: GO 24803
23840: LD_INT 11
23842: DOUBLE
23843: EQUAL
23844: IFTRUE 23848
23846: GO 23878
23848: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23849: LD_ADDR_VAR 0 3
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: LD_INT 3
23862: PUSH
23863: LD_INT 4
23865: PUSH
23866: LD_INT 5
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: ST_TO_ADDR
23876: GO 24803
23878: LD_INT 4
23880: DOUBLE
23881: EQUAL
23882: IFTRUE 23886
23884: GO 23912
23886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23887: LD_ADDR_VAR 0 3
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: LD_INT 3
23897: PUSH
23898: LD_INT 4
23900: PUSH
23901: LD_INT 5
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 24803
23912: LD_INT 5
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 23946
23920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23921: LD_ADDR_VAR 0 3
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 3
23931: PUSH
23932: LD_INT 4
23934: PUSH
23935: LD_INT 5
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: ST_TO_ADDR
23944: GO 24803
23946: LD_INT 9
23948: DOUBLE
23949: EQUAL
23950: IFTRUE 23954
23952: GO 23980
23954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23955: LD_ADDR_VAR 0 3
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: LD_INT 3
23965: PUSH
23966: LD_INT 4
23968: PUSH
23969: LD_INT 5
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: ST_TO_ADDR
23978: GO 24803
23980: LD_INT 7
23982: DOUBLE
23983: EQUAL
23984: IFTRUE 23988
23986: GO 24014
23988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23989: LD_ADDR_VAR 0 3
23993: PUSH
23994: LD_INT 2
23996: PUSH
23997: LD_INT 3
23999: PUSH
24000: LD_INT 4
24002: PUSH
24003: LD_INT 5
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: ST_TO_ADDR
24012: GO 24803
24014: LD_INT 12
24016: DOUBLE
24017: EQUAL
24018: IFTRUE 24022
24020: GO 24048
24022: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24023: LD_ADDR_VAR 0 3
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: LD_INT 3
24033: PUSH
24034: LD_INT 4
24036: PUSH
24037: LD_INT 5
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: ST_TO_ADDR
24046: GO 24803
24048: LD_INT 13
24050: DOUBLE
24051: EQUAL
24052: IFTRUE 24056
24054: GO 24082
24056: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24057: LD_ADDR_VAR 0 3
24061: PUSH
24062: LD_INT 2
24064: PUSH
24065: LD_INT 3
24067: PUSH
24068: LD_INT 4
24070: PUSH
24071: LD_INT 5
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: ST_TO_ADDR
24080: GO 24803
24082: LD_INT 14
24084: DOUBLE
24085: EQUAL
24086: IFTRUE 24090
24088: GO 24108
24090: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24091: LD_ADDR_VAR 0 3
24095: PUSH
24096: LD_INT 4
24098: PUSH
24099: LD_INT 5
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: ST_TO_ADDR
24106: GO 24803
24108: LD_INT 6
24110: DOUBLE
24111: EQUAL
24112: IFTRUE 24116
24114: GO 24134
24116: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24117: LD_ADDR_VAR 0 3
24121: PUSH
24122: LD_INT 4
24124: PUSH
24125: LD_INT 5
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: ST_TO_ADDR
24132: GO 24803
24134: LD_INT 10
24136: DOUBLE
24137: EQUAL
24138: IFTRUE 24142
24140: GO 24160
24142: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24143: LD_ADDR_VAR 0 3
24147: PUSH
24148: LD_INT 4
24150: PUSH
24151: LD_INT 5
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: ST_TO_ADDR
24158: GO 24803
24160: LD_INT 22
24162: DOUBLE
24163: EQUAL
24164: IFTRUE 24168
24166: GO 24194
24168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24169: LD_ADDR_VAR 0 3
24173: PUSH
24174: LD_INT 11
24176: PUSH
24177: LD_INT 12
24179: PUSH
24180: LD_INT 13
24182: PUSH
24183: LD_INT 14
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: ST_TO_ADDR
24192: GO 24803
24194: LD_INT 23
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24228
24202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24203: LD_ADDR_VAR 0 3
24207: PUSH
24208: LD_INT 11
24210: PUSH
24211: LD_INT 12
24213: PUSH
24214: LD_INT 13
24216: PUSH
24217: LD_INT 14
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: ST_TO_ADDR
24226: GO 24803
24228: LD_INT 24
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24262
24236: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24237: LD_ADDR_VAR 0 3
24241: PUSH
24242: LD_INT 11
24244: PUSH
24245: LD_INT 12
24247: PUSH
24248: LD_INT 13
24250: PUSH
24251: LD_INT 14
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
24260: GO 24803
24262: LD_INT 30
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24296
24270: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: LD_INT 11
24278: PUSH
24279: LD_INT 12
24281: PUSH
24282: LD_INT 13
24284: PUSH
24285: LD_INT 14
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
24294: GO 24803
24296: LD_INT 25
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24322
24304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24305: LD_ADDR_VAR 0 3
24309: PUSH
24310: LD_INT 13
24312: PUSH
24313: LD_INT 14
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: ST_TO_ADDR
24320: GO 24803
24322: LD_INT 27
24324: DOUBLE
24325: EQUAL
24326: IFTRUE 24330
24328: GO 24348
24330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24331: LD_ADDR_VAR 0 3
24335: PUSH
24336: LD_INT 13
24338: PUSH
24339: LD_INT 14
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: ST_TO_ADDR
24346: GO 24803
24348: LD_INT 92
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24382
24356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24357: LD_ADDR_VAR 0 3
24361: PUSH
24362: LD_INT 11
24364: PUSH
24365: LD_INT 12
24367: PUSH
24368: LD_INT 13
24370: PUSH
24371: LD_INT 14
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: ST_TO_ADDR
24380: GO 24803
24382: LD_INT 28
24384: DOUBLE
24385: EQUAL
24386: IFTRUE 24390
24388: GO 24408
24390: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24391: LD_ADDR_VAR 0 3
24395: PUSH
24396: LD_INT 13
24398: PUSH
24399: LD_INT 14
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: ST_TO_ADDR
24406: GO 24803
24408: LD_INT 29
24410: DOUBLE
24411: EQUAL
24412: IFTRUE 24416
24414: GO 24434
24416: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24417: LD_ADDR_VAR 0 3
24421: PUSH
24422: LD_INT 13
24424: PUSH
24425: LD_INT 14
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: ST_TO_ADDR
24432: GO 24803
24434: LD_INT 31
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24460
24442: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 13
24450: PUSH
24451: LD_INT 14
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: ST_TO_ADDR
24458: GO 24803
24460: LD_INT 26
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24486
24468: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24469: LD_ADDR_VAR 0 3
24473: PUSH
24474: LD_INT 13
24476: PUSH
24477: LD_INT 14
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: ST_TO_ADDR
24484: GO 24803
24486: LD_INT 42
24488: DOUBLE
24489: EQUAL
24490: IFTRUE 24494
24492: GO 24520
24494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24495: LD_ADDR_VAR 0 3
24499: PUSH
24500: LD_INT 21
24502: PUSH
24503: LD_INT 22
24505: PUSH
24506: LD_INT 23
24508: PUSH
24509: LD_INT 24
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: ST_TO_ADDR
24518: GO 24803
24520: LD_INT 43
24522: DOUBLE
24523: EQUAL
24524: IFTRUE 24528
24526: GO 24554
24528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24529: LD_ADDR_VAR 0 3
24533: PUSH
24534: LD_INT 21
24536: PUSH
24537: LD_INT 22
24539: PUSH
24540: LD_INT 23
24542: PUSH
24543: LD_INT 24
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: ST_TO_ADDR
24552: GO 24803
24554: LD_INT 44
24556: DOUBLE
24557: EQUAL
24558: IFTRUE 24562
24560: GO 24588
24562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24563: LD_ADDR_VAR 0 3
24567: PUSH
24568: LD_INT 21
24570: PUSH
24571: LD_INT 22
24573: PUSH
24574: LD_INT 23
24576: PUSH
24577: LD_INT 24
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: ST_TO_ADDR
24586: GO 24803
24588: LD_INT 45
24590: DOUBLE
24591: EQUAL
24592: IFTRUE 24596
24594: GO 24622
24596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24597: LD_ADDR_VAR 0 3
24601: PUSH
24602: LD_INT 21
24604: PUSH
24605: LD_INT 22
24607: PUSH
24608: LD_INT 23
24610: PUSH
24611: LD_INT 24
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: ST_TO_ADDR
24620: GO 24803
24622: LD_INT 49
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24656
24630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24631: LD_ADDR_VAR 0 3
24635: PUSH
24636: LD_INT 21
24638: PUSH
24639: LD_INT 22
24641: PUSH
24642: LD_INT 23
24644: PUSH
24645: LD_INT 24
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: ST_TO_ADDR
24654: GO 24803
24656: LD_INT 51
24658: DOUBLE
24659: EQUAL
24660: IFTRUE 24664
24662: GO 24690
24664: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24665: LD_ADDR_VAR 0 3
24669: PUSH
24670: LD_INT 21
24672: PUSH
24673: LD_INT 22
24675: PUSH
24676: LD_INT 23
24678: PUSH
24679: LD_INT 24
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: ST_TO_ADDR
24688: GO 24803
24690: LD_INT 52
24692: DOUBLE
24693: EQUAL
24694: IFTRUE 24698
24696: GO 24724
24698: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24699: LD_ADDR_VAR 0 3
24703: PUSH
24704: LD_INT 21
24706: PUSH
24707: LD_INT 22
24709: PUSH
24710: LD_INT 23
24712: PUSH
24713: LD_INT 24
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: ST_TO_ADDR
24722: GO 24803
24724: LD_INT 53
24726: DOUBLE
24727: EQUAL
24728: IFTRUE 24732
24730: GO 24750
24732: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24733: LD_ADDR_VAR 0 3
24737: PUSH
24738: LD_INT 23
24740: PUSH
24741: LD_INT 24
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: ST_TO_ADDR
24748: GO 24803
24750: LD_INT 46
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24758
24756: GO 24776
24758: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24759: LD_ADDR_VAR 0 3
24763: PUSH
24764: LD_INT 23
24766: PUSH
24767: LD_INT 24
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: ST_TO_ADDR
24774: GO 24803
24776: LD_INT 47
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 24802
24784: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24785: LD_ADDR_VAR 0 3
24789: PUSH
24790: LD_INT 23
24792: PUSH
24793: LD_INT 24
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: ST_TO_ADDR
24800: GO 24803
24802: POP
// result := ( chassis in result ) ;
24803: LD_ADDR_VAR 0 3
24807: PUSH
24808: LD_VAR 0 1
24812: PUSH
24813: LD_VAR 0 3
24817: IN
24818: ST_TO_ADDR
// end ;
24819: LD_VAR 0 3
24823: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24824: LD_INT 0
24826: PPUSH
24827: PPUSH
24828: PPUSH
24829: PPUSH
24830: PPUSH
24831: PPUSH
24832: PPUSH
// result := array ;
24833: LD_ADDR_VAR 0 5
24837: PUSH
24838: LD_VAR 0 1
24842: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24843: LD_VAR 0 1
24847: NOT
24848: PUSH
24849: LD_VAR 0 2
24853: NOT
24854: OR
24855: PUSH
24856: LD_VAR 0 3
24860: NOT
24861: OR
24862: PUSH
24863: LD_VAR 0 2
24867: PUSH
24868: LD_VAR 0 1
24872: GREATER
24873: OR
24874: PUSH
24875: LD_VAR 0 3
24879: PUSH
24880: LD_VAR 0 1
24884: GREATER
24885: OR
24886: IFFALSE 24890
// exit ;
24888: GO 25186
// if direction then
24890: LD_VAR 0 4
24894: IFFALSE 24958
// begin d := 1 ;
24896: LD_ADDR_VAR 0 9
24900: PUSH
24901: LD_INT 1
24903: ST_TO_ADDR
// if i_from > i_to then
24904: LD_VAR 0 2
24908: PUSH
24909: LD_VAR 0 3
24913: GREATER
24914: IFFALSE 24940
// length := ( array - i_from ) + i_to else
24916: LD_ADDR_VAR 0 11
24920: PUSH
24921: LD_VAR 0 1
24925: PUSH
24926: LD_VAR 0 2
24930: MINUS
24931: PUSH
24932: LD_VAR 0 3
24936: PLUS
24937: ST_TO_ADDR
24938: GO 24956
// length := i_to - i_from ;
24940: LD_ADDR_VAR 0 11
24944: PUSH
24945: LD_VAR 0 3
24949: PUSH
24950: LD_VAR 0 2
24954: MINUS
24955: ST_TO_ADDR
// end else
24956: GO 25019
// begin d := - 1 ;
24958: LD_ADDR_VAR 0 9
24962: PUSH
24963: LD_INT 1
24965: NEG
24966: ST_TO_ADDR
// if i_from > i_to then
24967: LD_VAR 0 2
24971: PUSH
24972: LD_VAR 0 3
24976: GREATER
24977: IFFALSE 24997
// length := i_from - i_to else
24979: LD_ADDR_VAR 0 11
24983: PUSH
24984: LD_VAR 0 2
24988: PUSH
24989: LD_VAR 0 3
24993: MINUS
24994: ST_TO_ADDR
24995: GO 25019
// length := ( array - i_to ) + i_from ;
24997: LD_ADDR_VAR 0 11
25001: PUSH
25002: LD_VAR 0 1
25006: PUSH
25007: LD_VAR 0 3
25011: MINUS
25012: PUSH
25013: LD_VAR 0 2
25017: PLUS
25018: ST_TO_ADDR
// end ; if not length then
25019: LD_VAR 0 11
25023: NOT
25024: IFFALSE 25028
// exit ;
25026: GO 25186
// tmp := array ;
25028: LD_ADDR_VAR 0 10
25032: PUSH
25033: LD_VAR 0 1
25037: ST_TO_ADDR
// for i = 1 to length do
25038: LD_ADDR_VAR 0 6
25042: PUSH
25043: DOUBLE
25044: LD_INT 1
25046: DEC
25047: ST_TO_ADDR
25048: LD_VAR 0 11
25052: PUSH
25053: FOR_TO
25054: IFFALSE 25174
// begin for j = 1 to array do
25056: LD_ADDR_VAR 0 7
25060: PUSH
25061: DOUBLE
25062: LD_INT 1
25064: DEC
25065: ST_TO_ADDR
25066: LD_VAR 0 1
25070: PUSH
25071: FOR_TO
25072: IFFALSE 25160
// begin k := j + d ;
25074: LD_ADDR_VAR 0 8
25078: PUSH
25079: LD_VAR 0 7
25083: PUSH
25084: LD_VAR 0 9
25088: PLUS
25089: ST_TO_ADDR
// if k > array then
25090: LD_VAR 0 8
25094: PUSH
25095: LD_VAR 0 1
25099: GREATER
25100: IFFALSE 25110
// k := 1 ;
25102: LD_ADDR_VAR 0 8
25106: PUSH
25107: LD_INT 1
25109: ST_TO_ADDR
// if not k then
25110: LD_VAR 0 8
25114: NOT
25115: IFFALSE 25127
// k := array ;
25117: LD_ADDR_VAR 0 8
25121: PUSH
25122: LD_VAR 0 1
25126: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25127: LD_ADDR_VAR 0 10
25131: PUSH
25132: LD_VAR 0 10
25136: PPUSH
25137: LD_VAR 0 8
25141: PPUSH
25142: LD_VAR 0 1
25146: PUSH
25147: LD_VAR 0 7
25151: ARRAY
25152: PPUSH
25153: CALL_OW 1
25157: ST_TO_ADDR
// end ;
25158: GO 25071
25160: POP
25161: POP
// array := tmp ;
25162: LD_ADDR_VAR 0 1
25166: PUSH
25167: LD_VAR 0 10
25171: ST_TO_ADDR
// end ;
25172: GO 25053
25174: POP
25175: POP
// result := array ;
25176: LD_ADDR_VAR 0 5
25180: PUSH
25181: LD_VAR 0 1
25185: ST_TO_ADDR
// end ;
25186: LD_VAR 0 5
25190: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
// result := 0 ;
25195: LD_ADDR_VAR 0 3
25199: PUSH
25200: LD_INT 0
25202: ST_TO_ADDR
// if not array or not value in array then
25203: LD_VAR 0 1
25207: NOT
25208: PUSH
25209: LD_VAR 0 2
25213: PUSH
25214: LD_VAR 0 1
25218: IN
25219: NOT
25220: OR
25221: IFFALSE 25225
// exit ;
25223: GO 25279
// for i = 1 to array do
25225: LD_ADDR_VAR 0 4
25229: PUSH
25230: DOUBLE
25231: LD_INT 1
25233: DEC
25234: ST_TO_ADDR
25235: LD_VAR 0 1
25239: PUSH
25240: FOR_TO
25241: IFFALSE 25277
// if value = array [ i ] then
25243: LD_VAR 0 2
25247: PUSH
25248: LD_VAR 0 1
25252: PUSH
25253: LD_VAR 0 4
25257: ARRAY
25258: EQUAL
25259: IFFALSE 25275
// begin result := i ;
25261: LD_ADDR_VAR 0 3
25265: PUSH
25266: LD_VAR 0 4
25270: ST_TO_ADDR
// exit ;
25271: POP
25272: POP
25273: GO 25279
// end ;
25275: GO 25240
25277: POP
25278: POP
// end ;
25279: LD_VAR 0 3
25283: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25284: LD_INT 0
25286: PPUSH
// vc_chassis := chassis ;
25287: LD_ADDR_OWVAR 37
25291: PUSH
25292: LD_VAR 0 1
25296: ST_TO_ADDR
// vc_engine := engine ;
25297: LD_ADDR_OWVAR 39
25301: PUSH
25302: LD_VAR 0 2
25306: ST_TO_ADDR
// vc_control := control ;
25307: LD_ADDR_OWVAR 38
25311: PUSH
25312: LD_VAR 0 3
25316: ST_TO_ADDR
// vc_weapon := weapon ;
25317: LD_ADDR_OWVAR 40
25321: PUSH
25322: LD_VAR 0 4
25326: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25327: LD_ADDR_OWVAR 41
25331: PUSH
25332: LD_VAR 0 5
25336: ST_TO_ADDR
// end ;
25337: LD_VAR 0 6
25341: RET
// export function WantPlant ( unit ) ; var task ; begin
25342: LD_INT 0
25344: PPUSH
25345: PPUSH
// result := false ;
25346: LD_ADDR_VAR 0 2
25350: PUSH
25351: LD_INT 0
25353: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25354: LD_ADDR_VAR 0 3
25358: PUSH
25359: LD_VAR 0 1
25363: PPUSH
25364: CALL_OW 437
25368: ST_TO_ADDR
// if task then
25369: LD_VAR 0 3
25373: IFFALSE 25401
// if task [ 1 ] [ 1 ] = p then
25375: LD_VAR 0 3
25379: PUSH
25380: LD_INT 1
25382: ARRAY
25383: PUSH
25384: LD_INT 1
25386: ARRAY
25387: PUSH
25388: LD_STRING p
25390: EQUAL
25391: IFFALSE 25401
// result := true ;
25393: LD_ADDR_VAR 0 2
25397: PUSH
25398: LD_INT 1
25400: ST_TO_ADDR
// end ;
25401: LD_VAR 0 2
25405: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25406: LD_INT 0
25408: PPUSH
25409: PPUSH
25410: PPUSH
25411: PPUSH
// if pos < 1 then
25412: LD_VAR 0 2
25416: PUSH
25417: LD_INT 1
25419: LESS
25420: IFFALSE 25424
// exit ;
25422: GO 25727
// if pos = 1 then
25424: LD_VAR 0 2
25428: PUSH
25429: LD_INT 1
25431: EQUAL
25432: IFFALSE 25465
// result := Replace ( arr , pos [ 1 ] , value ) else
25434: LD_ADDR_VAR 0 4
25438: PUSH
25439: LD_VAR 0 1
25443: PPUSH
25444: LD_VAR 0 2
25448: PUSH
25449: LD_INT 1
25451: ARRAY
25452: PPUSH
25453: LD_VAR 0 3
25457: PPUSH
25458: CALL_OW 1
25462: ST_TO_ADDR
25463: GO 25727
// begin tmp := arr ;
25465: LD_ADDR_VAR 0 6
25469: PUSH
25470: LD_VAR 0 1
25474: ST_TO_ADDR
// s_arr := [ tmp ] ;
25475: LD_ADDR_VAR 0 7
25479: PUSH
25480: LD_VAR 0 6
25484: PUSH
25485: EMPTY
25486: LIST
25487: ST_TO_ADDR
// for i = 1 to pos - 1 do
25488: LD_ADDR_VAR 0 5
25492: PUSH
25493: DOUBLE
25494: LD_INT 1
25496: DEC
25497: ST_TO_ADDR
25498: LD_VAR 0 2
25502: PUSH
25503: LD_INT 1
25505: MINUS
25506: PUSH
25507: FOR_TO
25508: IFFALSE 25553
// begin tmp := tmp [ pos [ i ] ] ;
25510: LD_ADDR_VAR 0 6
25514: PUSH
25515: LD_VAR 0 6
25519: PUSH
25520: LD_VAR 0 2
25524: PUSH
25525: LD_VAR 0 5
25529: ARRAY
25530: ARRAY
25531: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25532: LD_ADDR_VAR 0 7
25536: PUSH
25537: LD_VAR 0 7
25541: PUSH
25542: LD_VAR 0 6
25546: PUSH
25547: EMPTY
25548: LIST
25549: ADD
25550: ST_TO_ADDR
// end ;
25551: GO 25507
25553: POP
25554: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25555: LD_ADDR_VAR 0 6
25559: PUSH
25560: LD_VAR 0 6
25564: PPUSH
25565: LD_VAR 0 2
25569: PUSH
25570: LD_VAR 0 2
25574: ARRAY
25575: PPUSH
25576: LD_VAR 0 3
25580: PPUSH
25581: CALL_OW 1
25585: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25586: LD_ADDR_VAR 0 7
25590: PUSH
25591: LD_VAR 0 7
25595: PPUSH
25596: LD_VAR 0 7
25600: PPUSH
25601: LD_VAR 0 6
25605: PPUSH
25606: CALL_OW 1
25610: ST_TO_ADDR
// for i = s_arr downto 2 do
25611: LD_ADDR_VAR 0 5
25615: PUSH
25616: DOUBLE
25617: LD_VAR 0 7
25621: INC
25622: ST_TO_ADDR
25623: LD_INT 2
25625: PUSH
25626: FOR_DOWNTO
25627: IFFALSE 25711
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25629: LD_ADDR_VAR 0 6
25633: PUSH
25634: LD_VAR 0 7
25638: PUSH
25639: LD_VAR 0 5
25643: PUSH
25644: LD_INT 1
25646: MINUS
25647: ARRAY
25648: PPUSH
25649: LD_VAR 0 2
25653: PUSH
25654: LD_VAR 0 5
25658: PUSH
25659: LD_INT 1
25661: MINUS
25662: ARRAY
25663: PPUSH
25664: LD_VAR 0 7
25668: PUSH
25669: LD_VAR 0 5
25673: ARRAY
25674: PPUSH
25675: CALL_OW 1
25679: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25680: LD_ADDR_VAR 0 7
25684: PUSH
25685: LD_VAR 0 7
25689: PPUSH
25690: LD_VAR 0 5
25694: PUSH
25695: LD_INT 1
25697: MINUS
25698: PPUSH
25699: LD_VAR 0 6
25703: PPUSH
25704: CALL_OW 1
25708: ST_TO_ADDR
// end ;
25709: GO 25626
25711: POP
25712: POP
// result := s_arr [ 1 ] ;
25713: LD_ADDR_VAR 0 4
25717: PUSH
25718: LD_VAR 0 7
25722: PUSH
25723: LD_INT 1
25725: ARRAY
25726: ST_TO_ADDR
// end ; end ;
25727: LD_VAR 0 4
25731: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25732: LD_INT 0
25734: PPUSH
25735: PPUSH
// if not list then
25736: LD_VAR 0 1
25740: NOT
25741: IFFALSE 25745
// exit ;
25743: GO 25836
// i := list [ pos1 ] ;
25745: LD_ADDR_VAR 0 5
25749: PUSH
25750: LD_VAR 0 1
25754: PUSH
25755: LD_VAR 0 2
25759: ARRAY
25760: ST_TO_ADDR
// if not i then
25761: LD_VAR 0 5
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 25836
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25770: LD_ADDR_VAR 0 1
25774: PUSH
25775: LD_VAR 0 1
25779: PPUSH
25780: LD_VAR 0 2
25784: PPUSH
25785: LD_VAR 0 1
25789: PUSH
25790: LD_VAR 0 3
25794: ARRAY
25795: PPUSH
25796: CALL_OW 1
25800: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25801: LD_ADDR_VAR 0 1
25805: PUSH
25806: LD_VAR 0 1
25810: PPUSH
25811: LD_VAR 0 3
25815: PPUSH
25816: LD_VAR 0 5
25820: PPUSH
25821: CALL_OW 1
25825: ST_TO_ADDR
// result := list ;
25826: LD_ADDR_VAR 0 4
25830: PUSH
25831: LD_VAR 0 1
25835: ST_TO_ADDR
// end ;
25836: LD_VAR 0 4
25840: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25841: LD_INT 0
25843: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25844: LD_ADDR_VAR 0 5
25848: PUSH
25849: LD_VAR 0 1
25853: PPUSH
25854: CALL_OW 250
25858: PPUSH
25859: LD_VAR 0 1
25863: PPUSH
25864: CALL_OW 251
25868: PPUSH
25869: LD_VAR 0 2
25873: PPUSH
25874: LD_VAR 0 3
25878: PPUSH
25879: LD_VAR 0 4
25883: PPUSH
25884: CALL 26262 0 5
25888: ST_TO_ADDR
// end ;
25889: LD_VAR 0 5
25893: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
25894: LD_INT 0
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
// if not list or not unit then
25900: LD_VAR 0 2
25904: NOT
25905: PUSH
25906: LD_VAR 0 1
25910: NOT
25911: OR
25912: IFFALSE 25916
// exit ;
25914: GO 26257
// result := [ ] ;
25916: LD_ADDR_VAR 0 5
25920: PUSH
25921: EMPTY
25922: ST_TO_ADDR
// for i in list do
25923: LD_ADDR_VAR 0 6
25927: PUSH
25928: LD_VAR 0 2
25932: PUSH
25933: FOR_IN
25934: IFFALSE 26152
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
25936: LD_ADDR_VAR 0 8
25940: PUSH
25941: LD_VAR 0 1
25945: PPUSH
25946: LD_VAR 0 6
25950: PUSH
25951: LD_INT 1
25953: ARRAY
25954: PPUSH
25955: LD_VAR 0 6
25959: PUSH
25960: LD_INT 2
25962: ARRAY
25963: PPUSH
25964: CALL_OW 297
25968: ST_TO_ADDR
// if not Count ( result ) then
25969: LD_VAR 0 5
25973: PPUSH
25974: CALL 22546 0 1
25978: NOT
25979: IFFALSE 26012
// begin result := Join ( result , [ i , tmp ] ) ;
25981: LD_ADDR_VAR 0 5
25985: PUSH
25986: LD_VAR 0 5
25990: PPUSH
25991: LD_VAR 0 6
25995: PUSH
25996: LD_VAR 0 8
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PPUSH
26005: CALL 58146 0 2
26009: ST_TO_ADDR
// continue ;
26010: GO 25933
// end ; if result [ result ] [ 2 ] <= tmp then
26012: LD_VAR 0 5
26016: PUSH
26017: LD_VAR 0 5
26021: ARRAY
26022: PUSH
26023: LD_INT 2
26025: ARRAY
26026: PUSH
26027: LD_VAR 0 8
26031: LESSEQUAL
26032: IFFALSE 26065
// result := Join ( result , [ i , tmp ] ) else
26034: LD_ADDR_VAR 0 5
26038: PUSH
26039: LD_VAR 0 5
26043: PPUSH
26044: LD_VAR 0 6
26048: PUSH
26049: LD_VAR 0 8
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PPUSH
26058: CALL 58146 0 2
26062: ST_TO_ADDR
26063: GO 26150
// begin for j := 1 to Count ( result ) do
26065: LD_ADDR_VAR 0 7
26069: PUSH
26070: DOUBLE
26071: LD_INT 1
26073: DEC
26074: ST_TO_ADDR
26075: LD_VAR 0 5
26079: PPUSH
26080: CALL 22546 0 1
26084: PUSH
26085: FOR_TO
26086: IFFALSE 26148
// begin if tmp < result [ j ] [ 2 ] then
26088: LD_VAR 0 8
26092: PUSH
26093: LD_VAR 0 5
26097: PUSH
26098: LD_VAR 0 7
26102: ARRAY
26103: PUSH
26104: LD_INT 2
26106: ARRAY
26107: LESS
26108: IFFALSE 26146
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26110: LD_ADDR_VAR 0 5
26114: PUSH
26115: LD_VAR 0 5
26119: PPUSH
26120: LD_VAR 0 7
26124: PPUSH
26125: LD_VAR 0 6
26129: PUSH
26130: LD_VAR 0 8
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PPUSH
26139: CALL_OW 2
26143: ST_TO_ADDR
// break ;
26144: GO 26148
// end ; end ;
26146: GO 26085
26148: POP
26149: POP
// end ; end ;
26150: GO 25933
26152: POP
26153: POP
// if result and not asc then
26154: LD_VAR 0 5
26158: PUSH
26159: LD_VAR 0 3
26163: NOT
26164: AND
26165: IFFALSE 26182
// result := ReverseArray ( result ) ;
26167: LD_ADDR_VAR 0 5
26171: PUSH
26172: LD_VAR 0 5
26176: PPUSH
26177: CALL 53422 0 1
26181: ST_TO_ADDR
// tmp := [ ] ;
26182: LD_ADDR_VAR 0 8
26186: PUSH
26187: EMPTY
26188: ST_TO_ADDR
// if mode then
26189: LD_VAR 0 4
26193: IFFALSE 26257
// begin for i := 1 to result do
26195: LD_ADDR_VAR 0 6
26199: PUSH
26200: DOUBLE
26201: LD_INT 1
26203: DEC
26204: ST_TO_ADDR
26205: LD_VAR 0 5
26209: PUSH
26210: FOR_TO
26211: IFFALSE 26245
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26213: LD_ADDR_VAR 0 8
26217: PUSH
26218: LD_VAR 0 8
26222: PPUSH
26223: LD_VAR 0 5
26227: PUSH
26228: LD_VAR 0 6
26232: ARRAY
26233: PUSH
26234: LD_INT 1
26236: ARRAY
26237: PPUSH
26238: CALL 58146 0 2
26242: ST_TO_ADDR
26243: GO 26210
26245: POP
26246: POP
// result := tmp ;
26247: LD_ADDR_VAR 0 5
26251: PUSH
26252: LD_VAR 0 8
26256: ST_TO_ADDR
// end ; end ;
26257: LD_VAR 0 5
26261: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26262: LD_INT 0
26264: PPUSH
26265: PPUSH
26266: PPUSH
26267: PPUSH
// if not list then
26268: LD_VAR 0 3
26272: NOT
26273: IFFALSE 26277
// exit ;
26275: GO 26665
// result := [ ] ;
26277: LD_ADDR_VAR 0 6
26281: PUSH
26282: EMPTY
26283: ST_TO_ADDR
// for i in list do
26284: LD_ADDR_VAR 0 7
26288: PUSH
26289: LD_VAR 0 3
26293: PUSH
26294: FOR_IN
26295: IFFALSE 26497
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26297: LD_ADDR_VAR 0 9
26301: PUSH
26302: LD_VAR 0 7
26306: PPUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: LD_VAR 0 2
26316: PPUSH
26317: CALL_OW 297
26321: ST_TO_ADDR
// if not result then
26322: LD_VAR 0 6
26326: NOT
26327: IFFALSE 26353
// result := [ [ i , tmp ] ] else
26329: LD_ADDR_VAR 0 6
26333: PUSH
26334: LD_VAR 0 7
26338: PUSH
26339: LD_VAR 0 9
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: ST_TO_ADDR
26351: GO 26495
// begin if result [ result ] [ 2 ] < tmp then
26353: LD_VAR 0 6
26357: PUSH
26358: LD_VAR 0 6
26362: ARRAY
26363: PUSH
26364: LD_INT 2
26366: ARRAY
26367: PUSH
26368: LD_VAR 0 9
26372: LESS
26373: IFFALSE 26415
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26375: LD_ADDR_VAR 0 6
26379: PUSH
26380: LD_VAR 0 6
26384: PPUSH
26385: LD_VAR 0 6
26389: PUSH
26390: LD_INT 1
26392: PLUS
26393: PPUSH
26394: LD_VAR 0 7
26398: PUSH
26399: LD_VAR 0 9
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PPUSH
26408: CALL_OW 2
26412: ST_TO_ADDR
26413: GO 26495
// for j = 1 to result do
26415: LD_ADDR_VAR 0 8
26419: PUSH
26420: DOUBLE
26421: LD_INT 1
26423: DEC
26424: ST_TO_ADDR
26425: LD_VAR 0 6
26429: PUSH
26430: FOR_TO
26431: IFFALSE 26493
// begin if tmp < result [ j ] [ 2 ] then
26433: LD_VAR 0 9
26437: PUSH
26438: LD_VAR 0 6
26442: PUSH
26443: LD_VAR 0 8
26447: ARRAY
26448: PUSH
26449: LD_INT 2
26451: ARRAY
26452: LESS
26453: IFFALSE 26491
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26455: LD_ADDR_VAR 0 6
26459: PUSH
26460: LD_VAR 0 6
26464: PPUSH
26465: LD_VAR 0 8
26469: PPUSH
26470: LD_VAR 0 7
26474: PUSH
26475: LD_VAR 0 9
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 2
26488: ST_TO_ADDR
// break ;
26489: GO 26493
// end ; end ;
26491: GO 26430
26493: POP
26494: POP
// end ; end ;
26495: GO 26294
26497: POP
26498: POP
// if result and not asc then
26499: LD_VAR 0 6
26503: PUSH
26504: LD_VAR 0 4
26508: NOT
26509: AND
26510: IFFALSE 26585
// begin tmp := result ;
26512: LD_ADDR_VAR 0 9
26516: PUSH
26517: LD_VAR 0 6
26521: ST_TO_ADDR
// for i = tmp downto 1 do
26522: LD_ADDR_VAR 0 7
26526: PUSH
26527: DOUBLE
26528: LD_VAR 0 9
26532: INC
26533: ST_TO_ADDR
26534: LD_INT 1
26536: PUSH
26537: FOR_DOWNTO
26538: IFFALSE 26583
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26540: LD_ADDR_VAR 0 6
26544: PUSH
26545: LD_VAR 0 6
26549: PPUSH
26550: LD_VAR 0 9
26554: PUSH
26555: LD_VAR 0 7
26559: MINUS
26560: PUSH
26561: LD_INT 1
26563: PLUS
26564: PPUSH
26565: LD_VAR 0 9
26569: PUSH
26570: LD_VAR 0 7
26574: ARRAY
26575: PPUSH
26576: CALL_OW 1
26580: ST_TO_ADDR
26581: GO 26537
26583: POP
26584: POP
// end ; tmp := [ ] ;
26585: LD_ADDR_VAR 0 9
26589: PUSH
26590: EMPTY
26591: ST_TO_ADDR
// if mode then
26592: LD_VAR 0 5
26596: IFFALSE 26665
// begin for i = 1 to result do
26598: LD_ADDR_VAR 0 7
26602: PUSH
26603: DOUBLE
26604: LD_INT 1
26606: DEC
26607: ST_TO_ADDR
26608: LD_VAR 0 6
26612: PUSH
26613: FOR_TO
26614: IFFALSE 26653
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26616: LD_ADDR_VAR 0 9
26620: PUSH
26621: LD_VAR 0 9
26625: PPUSH
26626: LD_VAR 0 7
26630: PPUSH
26631: LD_VAR 0 6
26635: PUSH
26636: LD_VAR 0 7
26640: ARRAY
26641: PUSH
26642: LD_INT 1
26644: ARRAY
26645: PPUSH
26646: CALL_OW 1
26650: ST_TO_ADDR
26651: GO 26613
26653: POP
26654: POP
// result := tmp ;
26655: LD_ADDR_VAR 0 6
26659: PUSH
26660: LD_VAR 0 9
26664: ST_TO_ADDR
// end ; end ;
26665: LD_VAR 0 6
26669: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26670: LD_INT 0
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26678: LD_ADDR_VAR 0 5
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: ST_TO_ADDR
// if not x or not y then
26700: LD_VAR 0 2
26704: NOT
26705: PUSH
26706: LD_VAR 0 3
26710: NOT
26711: OR
26712: IFFALSE 26716
// exit ;
26714: GO 28366
// if not range then
26716: LD_VAR 0 4
26720: NOT
26721: IFFALSE 26731
// range := 10 ;
26723: LD_ADDR_VAR 0 4
26727: PUSH
26728: LD_INT 10
26730: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26731: LD_ADDR_VAR 0 8
26735: PUSH
26736: LD_INT 81
26738: PUSH
26739: LD_VAR 0 1
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 92
26750: PUSH
26751: LD_VAR 0 2
26755: PUSH
26756: LD_VAR 0 3
26760: PUSH
26761: LD_VAR 0 4
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 3
26774: PUSH
26775: LD_INT 21
26777: PUSH
26778: LD_INT 3
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: PPUSH
26794: CALL_OW 69
26798: ST_TO_ADDR
// if not tmp then
26799: LD_VAR 0 8
26803: NOT
26804: IFFALSE 26808
// exit ;
26806: GO 28366
// for i in tmp do
26808: LD_ADDR_VAR 0 6
26812: PUSH
26813: LD_VAR 0 8
26817: PUSH
26818: FOR_IN
26819: IFFALSE 28341
// begin points := [ 0 , 0 , 0 ] ;
26821: LD_ADDR_VAR 0 9
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: ST_TO_ADDR
// bpoints := 1 ;
26840: LD_ADDR_VAR 0 10
26844: PUSH
26845: LD_INT 1
26847: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26848: LD_VAR 0 6
26852: PPUSH
26853: CALL_OW 247
26857: PUSH
26858: LD_INT 1
26860: DOUBLE
26861: EQUAL
26862: IFTRUE 26866
26864: GO 27444
26866: POP
// begin if GetClass ( i ) = 1 then
26867: LD_VAR 0 6
26871: PPUSH
26872: CALL_OW 257
26876: PUSH
26877: LD_INT 1
26879: EQUAL
26880: IFFALSE 26901
// points := [ 10 , 5 , 3 ] ;
26882: LD_ADDR_VAR 0 9
26886: PUSH
26887: LD_INT 10
26889: PUSH
26890: LD_INT 5
26892: PUSH
26893: LD_INT 3
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26901: LD_VAR 0 6
26905: PPUSH
26906: CALL_OW 257
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: LD_INT 4
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: IN
26925: IFFALSE 26946
// points := [ 3 , 2 , 1 ] ;
26927: LD_ADDR_VAR 0 9
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: LIST
26945: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26946: LD_VAR 0 6
26950: PPUSH
26951: CALL_OW 257
26955: PUSH
26956: LD_INT 5
26958: EQUAL
26959: IFFALSE 26980
// points := [ 130 , 5 , 2 ] ;
26961: LD_ADDR_VAR 0 9
26965: PUSH
26966: LD_INT 130
26968: PUSH
26969: LD_INT 5
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26980: LD_VAR 0 6
26984: PPUSH
26985: CALL_OW 257
26989: PUSH
26990: LD_INT 8
26992: EQUAL
26993: IFFALSE 27014
// points := [ 35 , 35 , 30 ] ;
26995: LD_ADDR_VAR 0 9
26999: PUSH
27000: LD_INT 35
27002: PUSH
27003: LD_INT 35
27005: PUSH
27006: LD_INT 30
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27014: LD_VAR 0 6
27018: PPUSH
27019: CALL_OW 257
27023: PUSH
27024: LD_INT 9
27026: EQUAL
27027: IFFALSE 27048
// points := [ 20 , 55 , 40 ] ;
27029: LD_ADDR_VAR 0 9
27033: PUSH
27034: LD_INT 20
27036: PUSH
27037: LD_INT 55
27039: PUSH
27040: LD_INT 40
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27048: LD_VAR 0 6
27052: PPUSH
27053: CALL_OW 257
27057: PUSH
27058: LD_INT 12
27060: PUSH
27061: LD_INT 16
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: IN
27068: IFFALSE 27089
// points := [ 5 , 3 , 2 ] ;
27070: LD_ADDR_VAR 0 9
27074: PUSH
27075: LD_INT 5
27077: PUSH
27078: LD_INT 3
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27089: LD_VAR 0 6
27093: PPUSH
27094: CALL_OW 257
27098: PUSH
27099: LD_INT 17
27101: EQUAL
27102: IFFALSE 27123
// points := [ 100 , 50 , 75 ] ;
27104: LD_ADDR_VAR 0 9
27108: PUSH
27109: LD_INT 100
27111: PUSH
27112: LD_INT 50
27114: PUSH
27115: LD_INT 75
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27123: LD_VAR 0 6
27127: PPUSH
27128: CALL_OW 257
27132: PUSH
27133: LD_INT 15
27135: EQUAL
27136: IFFALSE 27157
// points := [ 10 , 5 , 3 ] ;
27138: LD_ADDR_VAR 0 9
27142: PUSH
27143: LD_INT 10
27145: PUSH
27146: LD_INT 5
27148: PUSH
27149: LD_INT 3
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: LIST
27156: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27157: LD_VAR 0 6
27161: PPUSH
27162: CALL_OW 257
27166: PUSH
27167: LD_INT 14
27169: EQUAL
27170: IFFALSE 27191
// points := [ 10 , 0 , 0 ] ;
27172: LD_ADDR_VAR 0 9
27176: PUSH
27177: LD_INT 10
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27191: LD_VAR 0 6
27195: PPUSH
27196: CALL_OW 257
27200: PUSH
27201: LD_INT 11
27203: EQUAL
27204: IFFALSE 27225
// points := [ 30 , 10 , 5 ] ;
27206: LD_ADDR_VAR 0 9
27210: PUSH
27211: LD_INT 30
27213: PUSH
27214: LD_INT 10
27216: PUSH
27217: LD_INT 5
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: LIST
27224: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27225: LD_VAR 0 1
27229: PPUSH
27230: LD_INT 5
27232: PPUSH
27233: CALL_OW 321
27237: PUSH
27238: LD_INT 2
27240: EQUAL
27241: IFFALSE 27258
// bpoints := bpoints * 1.8 ;
27243: LD_ADDR_VAR 0 10
27247: PUSH
27248: LD_VAR 0 10
27252: PUSH
27253: LD_REAL  1.80000000000000E+0000
27256: MUL
27257: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27258: LD_VAR 0 6
27262: PPUSH
27263: CALL_OW 257
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 2
27273: PUSH
27274: LD_INT 3
27276: PUSH
27277: LD_INT 4
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: IN
27286: PUSH
27287: LD_VAR 0 1
27291: PPUSH
27292: LD_INT 51
27294: PPUSH
27295: CALL_OW 321
27299: PUSH
27300: LD_INT 2
27302: EQUAL
27303: AND
27304: IFFALSE 27321
// bpoints := bpoints * 1.2 ;
27306: LD_ADDR_VAR 0 10
27310: PUSH
27311: LD_VAR 0 10
27315: PUSH
27316: LD_REAL  1.20000000000000E+0000
27319: MUL
27320: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27321: LD_VAR 0 6
27325: PPUSH
27326: CALL_OW 257
27330: PUSH
27331: LD_INT 5
27333: PUSH
27334: LD_INT 7
27336: PUSH
27337: LD_INT 9
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: IN
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: LD_INT 52
27353: PPUSH
27354: CALL_OW 321
27358: PUSH
27359: LD_INT 2
27361: EQUAL
27362: AND
27363: IFFALSE 27380
// bpoints := bpoints * 1.5 ;
27365: LD_ADDR_VAR 0 10
27369: PUSH
27370: LD_VAR 0 10
27374: PUSH
27375: LD_REAL  1.50000000000000E+0000
27378: MUL
27379: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27380: LD_VAR 0 1
27384: PPUSH
27385: LD_INT 66
27387: PPUSH
27388: CALL_OW 321
27392: PUSH
27393: LD_INT 2
27395: EQUAL
27396: IFFALSE 27413
// bpoints := bpoints * 1.1 ;
27398: LD_ADDR_VAR 0 10
27402: PUSH
27403: LD_VAR 0 10
27407: PUSH
27408: LD_REAL  1.10000000000000E+0000
27411: MUL
27412: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27413: LD_ADDR_VAR 0 10
27417: PUSH
27418: LD_VAR 0 10
27422: PUSH
27423: LD_VAR 0 6
27427: PPUSH
27428: LD_INT 1
27430: PPUSH
27431: CALL_OW 259
27435: PUSH
27436: LD_REAL  1.15000000000000E+0000
27439: MUL
27440: MUL
27441: ST_TO_ADDR
// end ; unit_vehicle :
27442: GO 28270
27444: LD_INT 2
27446: DOUBLE
27447: EQUAL
27448: IFTRUE 27452
27450: GO 28258
27452: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27453: LD_VAR 0 6
27457: PPUSH
27458: CALL_OW 264
27462: PUSH
27463: LD_INT 2
27465: PUSH
27466: LD_INT 42
27468: PUSH
27469: LD_INT 24
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: LIST
27476: IN
27477: IFFALSE 27498
// points := [ 25 , 5 , 3 ] ;
27479: LD_ADDR_VAR 0 9
27483: PUSH
27484: LD_INT 25
27486: PUSH
27487: LD_INT 5
27489: PUSH
27490: LD_INT 3
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27498: LD_VAR 0 6
27502: PPUSH
27503: CALL_OW 264
27507: PUSH
27508: LD_INT 4
27510: PUSH
27511: LD_INT 43
27513: PUSH
27514: LD_INT 25
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: IN
27522: IFFALSE 27543
// points := [ 40 , 15 , 5 ] ;
27524: LD_ADDR_VAR 0 9
27528: PUSH
27529: LD_INT 40
27531: PUSH
27532: LD_INT 15
27534: PUSH
27535: LD_INT 5
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27543: LD_VAR 0 6
27547: PPUSH
27548: CALL_OW 264
27552: PUSH
27553: LD_INT 3
27555: PUSH
27556: LD_INT 23
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: IN
27563: IFFALSE 27584
// points := [ 7 , 25 , 8 ] ;
27565: LD_ADDR_VAR 0 9
27569: PUSH
27570: LD_INT 7
27572: PUSH
27573: LD_INT 25
27575: PUSH
27576: LD_INT 8
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: LIST
27583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27584: LD_VAR 0 6
27588: PPUSH
27589: CALL_OW 264
27593: PUSH
27594: LD_INT 5
27596: PUSH
27597: LD_INT 27
27599: PUSH
27600: LD_INT 44
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: IN
27608: IFFALSE 27629
// points := [ 14 , 50 , 16 ] ;
27610: LD_ADDR_VAR 0 9
27614: PUSH
27615: LD_INT 14
27617: PUSH
27618: LD_INT 50
27620: PUSH
27621: LD_INT 16
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27629: LD_VAR 0 6
27633: PPUSH
27634: CALL_OW 264
27638: PUSH
27639: LD_INT 6
27641: PUSH
27642: LD_INT 46
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: IN
27649: IFFALSE 27670
// points := [ 32 , 120 , 70 ] ;
27651: LD_ADDR_VAR 0 9
27655: PUSH
27656: LD_INT 32
27658: PUSH
27659: LD_INT 120
27661: PUSH
27662: LD_INT 70
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27670: LD_VAR 0 6
27674: PPUSH
27675: CALL_OW 264
27679: PUSH
27680: LD_INT 7
27682: PUSH
27683: LD_INT 28
27685: PUSH
27686: LD_INT 45
27688: PUSH
27689: LD_INT 92
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: IN
27698: IFFALSE 27719
// points := [ 35 , 20 , 45 ] ;
27700: LD_ADDR_VAR 0 9
27704: PUSH
27705: LD_INT 35
27707: PUSH
27708: LD_INT 20
27710: PUSH
27711: LD_INT 45
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27719: LD_VAR 0 6
27723: PPUSH
27724: CALL_OW 264
27728: PUSH
27729: LD_INT 47
27731: PUSH
27732: EMPTY
27733: LIST
27734: IN
27735: IFFALSE 27756
// points := [ 67 , 45 , 75 ] ;
27737: LD_ADDR_VAR 0 9
27741: PUSH
27742: LD_INT 67
27744: PUSH
27745: LD_INT 45
27747: PUSH
27748: LD_INT 75
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27756: LD_VAR 0 6
27760: PPUSH
27761: CALL_OW 264
27765: PUSH
27766: LD_INT 26
27768: PUSH
27769: EMPTY
27770: LIST
27771: IN
27772: IFFALSE 27793
// points := [ 120 , 30 , 80 ] ;
27774: LD_ADDR_VAR 0 9
27778: PUSH
27779: LD_INT 120
27781: PUSH
27782: LD_INT 30
27784: PUSH
27785: LD_INT 80
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27793: LD_VAR 0 6
27797: PPUSH
27798: CALL_OW 264
27802: PUSH
27803: LD_INT 22
27805: PUSH
27806: EMPTY
27807: LIST
27808: IN
27809: IFFALSE 27830
// points := [ 40 , 1 , 1 ] ;
27811: LD_ADDR_VAR 0 9
27815: PUSH
27816: LD_INT 40
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27830: LD_VAR 0 6
27834: PPUSH
27835: CALL_OW 264
27839: PUSH
27840: LD_INT 29
27842: PUSH
27843: EMPTY
27844: LIST
27845: IN
27846: IFFALSE 27867
// points := [ 70 , 200 , 400 ] ;
27848: LD_ADDR_VAR 0 9
27852: PUSH
27853: LD_INT 70
27855: PUSH
27856: LD_INT 200
27858: PUSH
27859: LD_INT 400
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: LIST
27866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27867: LD_VAR 0 6
27871: PPUSH
27872: CALL_OW 264
27876: PUSH
27877: LD_INT 14
27879: PUSH
27880: LD_INT 53
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: IN
27887: IFFALSE 27908
// points := [ 40 , 10 , 20 ] ;
27889: LD_ADDR_VAR 0 9
27893: PUSH
27894: LD_INT 40
27896: PUSH
27897: LD_INT 10
27899: PUSH
27900: LD_INT 20
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27908: LD_VAR 0 6
27912: PPUSH
27913: CALL_OW 264
27917: PUSH
27918: LD_INT 9
27920: PUSH
27921: EMPTY
27922: LIST
27923: IN
27924: IFFALSE 27945
// points := [ 5 , 70 , 20 ] ;
27926: LD_ADDR_VAR 0 9
27930: PUSH
27931: LD_INT 5
27933: PUSH
27934: LD_INT 70
27936: PUSH
27937: LD_INT 20
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: LIST
27944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27945: LD_VAR 0 6
27949: PPUSH
27950: CALL_OW 264
27954: PUSH
27955: LD_INT 10
27957: PUSH
27958: EMPTY
27959: LIST
27960: IN
27961: IFFALSE 27982
// points := [ 35 , 110 , 70 ] ;
27963: LD_ADDR_VAR 0 9
27967: PUSH
27968: LD_INT 35
27970: PUSH
27971: LD_INT 110
27973: PUSH
27974: LD_INT 70
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27982: LD_VAR 0 6
27986: PPUSH
27987: CALL_OW 265
27991: PUSH
27992: LD_INT 25
27994: EQUAL
27995: IFFALSE 28016
// points := [ 80 , 65 , 100 ] ;
27997: LD_ADDR_VAR 0 9
28001: PUSH
28002: LD_INT 80
28004: PUSH
28005: LD_INT 65
28007: PUSH
28008: LD_INT 100
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28016: LD_VAR 0 6
28020: PPUSH
28021: CALL_OW 263
28025: PUSH
28026: LD_INT 1
28028: EQUAL
28029: IFFALSE 28064
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28031: LD_ADDR_VAR 0 10
28035: PUSH
28036: LD_VAR 0 10
28040: PUSH
28041: LD_VAR 0 6
28045: PPUSH
28046: CALL_OW 311
28050: PPUSH
28051: LD_INT 3
28053: PPUSH
28054: CALL_OW 259
28058: PUSH
28059: LD_INT 4
28061: MUL
28062: MUL
28063: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28064: LD_VAR 0 6
28068: PPUSH
28069: CALL_OW 263
28073: PUSH
28074: LD_INT 2
28076: EQUAL
28077: IFFALSE 28128
// begin j := IsControledBy ( i ) ;
28079: LD_ADDR_VAR 0 7
28083: PUSH
28084: LD_VAR 0 6
28088: PPUSH
28089: CALL_OW 312
28093: ST_TO_ADDR
// if j then
28094: LD_VAR 0 7
28098: IFFALSE 28128
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28100: LD_ADDR_VAR 0 10
28104: PUSH
28105: LD_VAR 0 10
28109: PUSH
28110: LD_VAR 0 7
28114: PPUSH
28115: LD_INT 3
28117: PPUSH
28118: CALL_OW 259
28122: PUSH
28123: LD_INT 3
28125: MUL
28126: MUL
28127: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28128: LD_VAR 0 6
28132: PPUSH
28133: CALL_OW 264
28137: PUSH
28138: LD_INT 5
28140: PUSH
28141: LD_INT 6
28143: PUSH
28144: LD_INT 46
28146: PUSH
28147: LD_INT 44
28149: PUSH
28150: LD_INT 47
28152: PUSH
28153: LD_INT 45
28155: PUSH
28156: LD_INT 28
28158: PUSH
28159: LD_INT 7
28161: PUSH
28162: LD_INT 27
28164: PUSH
28165: LD_INT 29
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: IN
28180: PUSH
28181: LD_VAR 0 1
28185: PPUSH
28186: LD_INT 52
28188: PPUSH
28189: CALL_OW 321
28193: PUSH
28194: LD_INT 2
28196: EQUAL
28197: AND
28198: IFFALSE 28215
// bpoints := bpoints * 1.2 ;
28200: LD_ADDR_VAR 0 10
28204: PUSH
28205: LD_VAR 0 10
28209: PUSH
28210: LD_REAL  1.20000000000000E+0000
28213: MUL
28214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28215: LD_VAR 0 6
28219: PPUSH
28220: CALL_OW 264
28224: PUSH
28225: LD_INT 6
28227: PUSH
28228: LD_INT 46
28230: PUSH
28231: LD_INT 47
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: IN
28239: IFFALSE 28256
// bpoints := bpoints * 1.2 ;
28241: LD_ADDR_VAR 0 10
28245: PUSH
28246: LD_VAR 0 10
28250: PUSH
28251: LD_REAL  1.20000000000000E+0000
28254: MUL
28255: ST_TO_ADDR
// end ; unit_building :
28256: GO 28270
28258: LD_INT 3
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28266
28264: GO 28269
28266: POP
// ; end ;
28267: GO 28270
28269: POP
// for j = 1 to 3 do
28270: LD_ADDR_VAR 0 7
28274: PUSH
28275: DOUBLE
28276: LD_INT 1
28278: DEC
28279: ST_TO_ADDR
28280: LD_INT 3
28282: PUSH
28283: FOR_TO
28284: IFFALSE 28337
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28286: LD_ADDR_VAR 0 5
28290: PUSH
28291: LD_VAR 0 5
28295: PPUSH
28296: LD_VAR 0 7
28300: PPUSH
28301: LD_VAR 0 5
28305: PUSH
28306: LD_VAR 0 7
28310: ARRAY
28311: PUSH
28312: LD_VAR 0 9
28316: PUSH
28317: LD_VAR 0 7
28321: ARRAY
28322: PUSH
28323: LD_VAR 0 10
28327: MUL
28328: PLUS
28329: PPUSH
28330: CALL_OW 1
28334: ST_TO_ADDR
28335: GO 28283
28337: POP
28338: POP
// end ;
28339: GO 26818
28341: POP
28342: POP
// result := Replace ( result , 4 , tmp ) ;
28343: LD_ADDR_VAR 0 5
28347: PUSH
28348: LD_VAR 0 5
28352: PPUSH
28353: LD_INT 4
28355: PPUSH
28356: LD_VAR 0 8
28360: PPUSH
28361: CALL_OW 1
28365: ST_TO_ADDR
// end ;
28366: LD_VAR 0 5
28370: RET
// export function DangerAtRange ( unit , range ) ; begin
28371: LD_INT 0
28373: PPUSH
// if not unit then
28374: LD_VAR 0 1
28378: NOT
28379: IFFALSE 28383
// exit ;
28381: GO 28428
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28383: LD_ADDR_VAR 0 3
28387: PUSH
28388: LD_VAR 0 1
28392: PPUSH
28393: CALL_OW 255
28397: PPUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 250
28407: PPUSH
28408: LD_VAR 0 1
28412: PPUSH
28413: CALL_OW 251
28417: PPUSH
28418: LD_VAR 0 2
28422: PPUSH
28423: CALL 26670 0 4
28427: ST_TO_ADDR
// end ;
28428: LD_VAR 0 3
28432: RET
// export function DangerInArea ( side , area ) ; begin
28433: LD_INT 0
28435: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28436: LD_ADDR_VAR 0 3
28440: PUSH
28441: LD_VAR 0 2
28445: PPUSH
28446: LD_INT 81
28448: PUSH
28449: LD_VAR 0 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PPUSH
28458: CALL_OW 70
28462: ST_TO_ADDR
// end ;
28463: LD_VAR 0 3
28467: RET
// export function IsExtension ( b ) ; begin
28468: LD_INT 0
28470: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28471: LD_ADDR_VAR 0 2
28475: PUSH
28476: LD_VAR 0 1
28480: PUSH
28481: LD_INT 23
28483: PUSH
28484: LD_INT 20
28486: PUSH
28487: LD_INT 22
28489: PUSH
28490: LD_INT 17
28492: PUSH
28493: LD_INT 24
28495: PUSH
28496: LD_INT 21
28498: PUSH
28499: LD_INT 19
28501: PUSH
28502: LD_INT 16
28504: PUSH
28505: LD_INT 25
28507: PUSH
28508: LD_INT 18
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: IN
28523: ST_TO_ADDR
// end ;
28524: LD_VAR 0 2
28528: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28529: LD_INT 0
28531: PPUSH
28532: PPUSH
28533: PPUSH
// result := [ ] ;
28534: LD_ADDR_VAR 0 4
28538: PUSH
28539: EMPTY
28540: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28541: LD_ADDR_VAR 0 5
28545: PUSH
28546: LD_VAR 0 2
28550: PPUSH
28551: LD_INT 21
28553: PUSH
28554: LD_INT 3
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PPUSH
28561: CALL_OW 70
28565: ST_TO_ADDR
// if not tmp then
28566: LD_VAR 0 5
28570: NOT
28571: IFFALSE 28575
// exit ;
28573: GO 28639
// if checkLink then
28575: LD_VAR 0 3
28579: IFFALSE 28629
// begin for i in tmp do
28581: LD_ADDR_VAR 0 6
28585: PUSH
28586: LD_VAR 0 5
28590: PUSH
28591: FOR_IN
28592: IFFALSE 28627
// if GetBase ( i ) <> base then
28594: LD_VAR 0 6
28598: PPUSH
28599: CALL_OW 274
28603: PUSH
28604: LD_VAR 0 1
28608: NONEQUAL
28609: IFFALSE 28625
// ComLinkToBase ( base , i ) ;
28611: LD_VAR 0 1
28615: PPUSH
28616: LD_VAR 0 6
28620: PPUSH
28621: CALL_OW 169
28625: GO 28591
28627: POP
28628: POP
// end ; result := tmp ;
28629: LD_ADDR_VAR 0 4
28633: PUSH
28634: LD_VAR 0 5
28638: ST_TO_ADDR
// end ;
28639: LD_VAR 0 4
28643: RET
// export function ComComplete ( units , b ) ; var i ; begin
28644: LD_INT 0
28646: PPUSH
28647: PPUSH
// if not units then
28648: LD_VAR 0 1
28652: NOT
28653: IFFALSE 28657
// exit ;
28655: GO 28747
// for i in units do
28657: LD_ADDR_VAR 0 4
28661: PUSH
28662: LD_VAR 0 1
28666: PUSH
28667: FOR_IN
28668: IFFALSE 28745
// if BuildingStatus ( b ) = bs_build then
28670: LD_VAR 0 2
28674: PPUSH
28675: CALL_OW 461
28679: PUSH
28680: LD_INT 1
28682: EQUAL
28683: IFFALSE 28743
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28685: LD_VAR 0 4
28689: PPUSH
28690: LD_STRING h
28692: PUSH
28693: LD_VAR 0 2
28697: PPUSH
28698: CALL_OW 250
28702: PUSH
28703: LD_VAR 0 2
28707: PPUSH
28708: CALL_OW 251
28712: PUSH
28713: LD_VAR 0 2
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: LD_INT 0
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: PUSH
28736: EMPTY
28737: LIST
28738: PPUSH
28739: CALL_OW 446
28743: GO 28667
28745: POP
28746: POP
// end ;
28747: LD_VAR 0 3
28751: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28752: LD_INT 0
28754: PPUSH
28755: PPUSH
28756: PPUSH
28757: PPUSH
28758: PPUSH
28759: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28760: LD_VAR 0 1
28764: NOT
28765: PUSH
28766: LD_VAR 0 1
28770: PPUSH
28771: CALL_OW 263
28775: PUSH
28776: LD_INT 2
28778: NONEQUAL
28779: OR
28780: IFFALSE 28784
// exit ;
28782: GO 29100
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28784: LD_ADDR_VAR 0 6
28788: PUSH
28789: LD_INT 22
28791: PUSH
28792: LD_VAR 0 1
28796: PPUSH
28797: CALL_OW 255
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: LD_INT 30
28811: PUSH
28812: LD_INT 36
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 34
28821: PUSH
28822: LD_INT 31
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PPUSH
28838: CALL_OW 69
28842: ST_TO_ADDR
// if not tmp then
28843: LD_VAR 0 6
28847: NOT
28848: IFFALSE 28852
// exit ;
28850: GO 29100
// result := [ ] ;
28852: LD_ADDR_VAR 0 2
28856: PUSH
28857: EMPTY
28858: ST_TO_ADDR
// for i in tmp do
28859: LD_ADDR_VAR 0 3
28863: PUSH
28864: LD_VAR 0 6
28868: PUSH
28869: FOR_IN
28870: IFFALSE 28941
// begin t := UnitsInside ( i ) ;
28872: LD_ADDR_VAR 0 4
28876: PUSH
28877: LD_VAR 0 3
28881: PPUSH
28882: CALL_OW 313
28886: ST_TO_ADDR
// if t then
28887: LD_VAR 0 4
28891: IFFALSE 28939
// for j in t do
28893: LD_ADDR_VAR 0 7
28897: PUSH
28898: LD_VAR 0 4
28902: PUSH
28903: FOR_IN
28904: IFFALSE 28937
// result := Replace ( result , result + 1 , j ) ;
28906: LD_ADDR_VAR 0 2
28910: PUSH
28911: LD_VAR 0 2
28915: PPUSH
28916: LD_VAR 0 2
28920: PUSH
28921: LD_INT 1
28923: PLUS
28924: PPUSH
28925: LD_VAR 0 7
28929: PPUSH
28930: CALL_OW 1
28934: ST_TO_ADDR
28935: GO 28903
28937: POP
28938: POP
// end ;
28939: GO 28869
28941: POP
28942: POP
// if not result then
28943: LD_VAR 0 2
28947: NOT
28948: IFFALSE 28952
// exit ;
28950: GO 29100
// mech := result [ 1 ] ;
28952: LD_ADDR_VAR 0 5
28956: PUSH
28957: LD_VAR 0 2
28961: PUSH
28962: LD_INT 1
28964: ARRAY
28965: ST_TO_ADDR
// if result > 1 then
28966: LD_VAR 0 2
28970: PUSH
28971: LD_INT 1
28973: GREATER
28974: IFFALSE 29086
// begin for i = 2 to result do
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: DOUBLE
28982: LD_INT 2
28984: DEC
28985: ST_TO_ADDR
28986: LD_VAR 0 2
28990: PUSH
28991: FOR_TO
28992: IFFALSE 29084
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28994: LD_ADDR_VAR 0 4
28998: PUSH
28999: LD_VAR 0 2
29003: PUSH
29004: LD_VAR 0 3
29008: ARRAY
29009: PPUSH
29010: LD_INT 3
29012: PPUSH
29013: CALL_OW 259
29017: PUSH
29018: LD_VAR 0 2
29022: PUSH
29023: LD_VAR 0 3
29027: ARRAY
29028: PPUSH
29029: CALL_OW 432
29033: MINUS
29034: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29035: LD_VAR 0 4
29039: PUSH
29040: LD_VAR 0 5
29044: PPUSH
29045: LD_INT 3
29047: PPUSH
29048: CALL_OW 259
29052: PUSH
29053: LD_VAR 0 5
29057: PPUSH
29058: CALL_OW 432
29062: MINUS
29063: GREATEREQUAL
29064: IFFALSE 29082
// mech := result [ i ] ;
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_VAR 0 2
29075: PUSH
29076: LD_VAR 0 3
29080: ARRAY
29081: ST_TO_ADDR
// end ;
29082: GO 28991
29084: POP
29085: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29086: LD_VAR 0 1
29090: PPUSH
29091: LD_VAR 0 5
29095: PPUSH
29096: CALL_OW 135
// end ;
29100: LD_VAR 0 2
29104: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29105: LD_INT 0
29107: PPUSH
29108: PPUSH
29109: PPUSH
29110: PPUSH
29111: PPUSH
29112: PPUSH
29113: PPUSH
29114: PPUSH
29115: PPUSH
29116: PPUSH
29117: PPUSH
29118: PPUSH
29119: PPUSH
// result := [ ] ;
29120: LD_ADDR_VAR 0 7
29124: PUSH
29125: EMPTY
29126: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29127: LD_VAR 0 1
29131: PPUSH
29132: CALL_OW 266
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: IN
29147: NOT
29148: IFFALSE 29152
// exit ;
29150: GO 30786
// if name then
29152: LD_VAR 0 3
29156: IFFALSE 29172
// SetBName ( base_dep , name ) ;
29158: LD_VAR 0 1
29162: PPUSH
29163: LD_VAR 0 3
29167: PPUSH
29168: CALL_OW 500
// base := GetBase ( base_dep ) ;
29172: LD_ADDR_VAR 0 15
29176: PUSH
29177: LD_VAR 0 1
29181: PPUSH
29182: CALL_OW 274
29186: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29187: LD_ADDR_VAR 0 16
29191: PUSH
29192: LD_VAR 0 1
29196: PPUSH
29197: CALL_OW 255
29201: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29202: LD_ADDR_VAR 0 17
29206: PUSH
29207: LD_VAR 0 1
29211: PPUSH
29212: CALL_OW 248
29216: ST_TO_ADDR
// if sources then
29217: LD_VAR 0 5
29221: IFFALSE 29268
// for i = 1 to 3 do
29223: LD_ADDR_VAR 0 8
29227: PUSH
29228: DOUBLE
29229: LD_INT 1
29231: DEC
29232: ST_TO_ADDR
29233: LD_INT 3
29235: PUSH
29236: FOR_TO
29237: IFFALSE 29266
// AddResourceType ( base , i , sources [ i ] ) ;
29239: LD_VAR 0 15
29243: PPUSH
29244: LD_VAR 0 8
29248: PPUSH
29249: LD_VAR 0 5
29253: PUSH
29254: LD_VAR 0 8
29258: ARRAY
29259: PPUSH
29260: CALL_OW 276
29264: GO 29236
29266: POP
29267: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29268: LD_ADDR_VAR 0 18
29272: PUSH
29273: LD_VAR 0 15
29277: PPUSH
29278: LD_VAR 0 2
29282: PPUSH
29283: LD_INT 1
29285: PPUSH
29286: CALL 28529 0 3
29290: ST_TO_ADDR
// InitHc ;
29291: CALL_OW 19
// InitUc ;
29295: CALL_OW 18
// uc_side := side ;
29299: LD_ADDR_OWVAR 20
29303: PUSH
29304: LD_VAR 0 16
29308: ST_TO_ADDR
// uc_nation := nation ;
29309: LD_ADDR_OWVAR 21
29313: PUSH
29314: LD_VAR 0 17
29318: ST_TO_ADDR
// if buildings then
29319: LD_VAR 0 18
29323: IFFALSE 30645
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29325: LD_ADDR_VAR 0 19
29329: PUSH
29330: LD_VAR 0 18
29334: PPUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 30
29340: PUSH
29341: LD_INT 29
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 30
29350: PUSH
29351: LD_INT 30
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 72
29367: ST_TO_ADDR
// if tmp then
29368: LD_VAR 0 19
29372: IFFALSE 29420
// for i in tmp do
29374: LD_ADDR_VAR 0 8
29378: PUSH
29379: LD_VAR 0 19
29383: PUSH
29384: FOR_IN
29385: IFFALSE 29418
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29387: LD_VAR 0 8
29391: PPUSH
29392: CALL_OW 250
29396: PPUSH
29397: LD_VAR 0 8
29401: PPUSH
29402: CALL_OW 251
29406: PPUSH
29407: LD_VAR 0 16
29411: PPUSH
29412: CALL_OW 441
29416: GO 29384
29418: POP
29419: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29420: LD_VAR 0 18
29424: PPUSH
29425: LD_INT 2
29427: PUSH
29428: LD_INT 30
29430: PUSH
29431: LD_INT 32
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 30
29440: PUSH
29441: LD_INT 33
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: PPUSH
29453: CALL_OW 72
29457: IFFALSE 29545
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29459: LD_ADDR_VAR 0 8
29463: PUSH
29464: LD_VAR 0 18
29468: PPUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 30
29474: PUSH
29475: LD_INT 32
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 30
29484: PUSH
29485: LD_INT 33
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: LIST
29496: PPUSH
29497: CALL_OW 72
29501: PUSH
29502: FOR_IN
29503: IFFALSE 29543
// begin if not GetBWeapon ( i ) then
29505: LD_VAR 0 8
29509: PPUSH
29510: CALL_OW 269
29514: NOT
29515: IFFALSE 29541
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29517: LD_VAR 0 8
29521: PPUSH
29522: LD_VAR 0 8
29526: PPUSH
29527: LD_VAR 0 2
29531: PPUSH
29532: CALL 30791 0 2
29536: PPUSH
29537: CALL_OW 431
// end ;
29541: GO 29502
29543: POP
29544: POP
// end ; for i = 1 to personel do
29545: LD_ADDR_VAR 0 8
29549: PUSH
29550: DOUBLE
29551: LD_INT 1
29553: DEC
29554: ST_TO_ADDR
29555: LD_VAR 0 6
29559: PUSH
29560: FOR_TO
29561: IFFALSE 30625
// begin if i > 4 then
29563: LD_VAR 0 8
29567: PUSH
29568: LD_INT 4
29570: GREATER
29571: IFFALSE 29575
// break ;
29573: GO 30625
// case i of 1 :
29575: LD_VAR 0 8
29579: PUSH
29580: LD_INT 1
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 29668
29588: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29589: LD_ADDR_VAR 0 12
29593: PUSH
29594: LD_VAR 0 18
29598: PPUSH
29599: LD_INT 22
29601: PUSH
29602: LD_VAR 0 16
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 58
29613: PUSH
29614: EMPTY
29615: LIST
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: LD_INT 30
29622: PUSH
29623: LD_INT 32
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 30
29632: PUSH
29633: LD_INT 4
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 30
29642: PUSH
29643: LD_INT 5
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: PPUSH
29661: CALL_OW 72
29665: ST_TO_ADDR
29666: GO 29890
29668: LD_INT 2
29670: DOUBLE
29671: EQUAL
29672: IFTRUE 29676
29674: GO 29738
29676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29677: LD_ADDR_VAR 0 12
29681: PUSH
29682: LD_VAR 0 18
29686: PPUSH
29687: LD_INT 22
29689: PUSH
29690: LD_VAR 0 16
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 30
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 30
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 72
29735: ST_TO_ADDR
29736: GO 29890
29738: LD_INT 3
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 29808
29746: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29747: LD_ADDR_VAR 0 12
29751: PUSH
29752: LD_VAR 0 18
29756: PPUSH
29757: LD_INT 22
29759: PUSH
29760: LD_VAR 0 16
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 2
29771: PUSH
29772: LD_INT 30
29774: PUSH
29775: LD_INT 2
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 30
29784: PUSH
29785: LD_INT 3
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PPUSH
29801: CALL_OW 72
29805: ST_TO_ADDR
29806: GO 29890
29808: LD_INT 4
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29889
29816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29817: LD_ADDR_VAR 0 12
29821: PUSH
29822: LD_VAR 0 18
29826: PPUSH
29827: LD_INT 22
29829: PUSH
29830: LD_VAR 0 16
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 2
29841: PUSH
29842: LD_INT 30
29844: PUSH
29845: LD_INT 6
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 30
29854: PUSH
29855: LD_INT 7
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 30
29864: PUSH
29865: LD_INT 8
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PPUSH
29882: CALL_OW 72
29886: ST_TO_ADDR
29887: GO 29890
29889: POP
// if i = 1 then
29890: LD_VAR 0 8
29894: PUSH
29895: LD_INT 1
29897: EQUAL
29898: IFFALSE 30009
// begin tmp := [ ] ;
29900: LD_ADDR_VAR 0 19
29904: PUSH
29905: EMPTY
29906: ST_TO_ADDR
// for j in f do
29907: LD_ADDR_VAR 0 9
29911: PUSH
29912: LD_VAR 0 12
29916: PUSH
29917: FOR_IN
29918: IFFALSE 29991
// if GetBType ( j ) = b_bunker then
29920: LD_VAR 0 9
29924: PPUSH
29925: CALL_OW 266
29929: PUSH
29930: LD_INT 32
29932: EQUAL
29933: IFFALSE 29960
// tmp := Insert ( tmp , 1 , j ) else
29935: LD_ADDR_VAR 0 19
29939: PUSH
29940: LD_VAR 0 19
29944: PPUSH
29945: LD_INT 1
29947: PPUSH
29948: LD_VAR 0 9
29952: PPUSH
29953: CALL_OW 2
29957: ST_TO_ADDR
29958: GO 29989
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29960: LD_ADDR_VAR 0 19
29964: PUSH
29965: LD_VAR 0 19
29969: PPUSH
29970: LD_VAR 0 19
29974: PUSH
29975: LD_INT 1
29977: PLUS
29978: PPUSH
29979: LD_VAR 0 9
29983: PPUSH
29984: CALL_OW 2
29988: ST_TO_ADDR
29989: GO 29917
29991: POP
29992: POP
// if tmp then
29993: LD_VAR 0 19
29997: IFFALSE 30009
// f := tmp ;
29999: LD_ADDR_VAR 0 12
30003: PUSH
30004: LD_VAR 0 19
30008: ST_TO_ADDR
// end ; x := personel [ i ] ;
30009: LD_ADDR_VAR 0 13
30013: PUSH
30014: LD_VAR 0 6
30018: PUSH
30019: LD_VAR 0 8
30023: ARRAY
30024: ST_TO_ADDR
// if x = - 1 then
30025: LD_VAR 0 13
30029: PUSH
30030: LD_INT 1
30032: NEG
30033: EQUAL
30034: IFFALSE 30243
// begin for j in f do
30036: LD_ADDR_VAR 0 9
30040: PUSH
30041: LD_VAR 0 12
30045: PUSH
30046: FOR_IN
30047: IFFALSE 30239
// repeat InitHc ;
30049: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30053: LD_VAR 0 9
30057: PPUSH
30058: CALL_OW 266
30062: PUSH
30063: LD_INT 5
30065: EQUAL
30066: IFFALSE 30136
// begin if UnitsInside ( j ) < 3 then
30068: LD_VAR 0 9
30072: PPUSH
30073: CALL_OW 313
30077: PUSH
30078: LD_INT 3
30080: LESS
30081: IFFALSE 30117
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30083: LD_INT 0
30085: PPUSH
30086: LD_INT 5
30088: PUSH
30089: LD_INT 8
30091: PUSH
30092: LD_INT 9
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: LIST
30099: PUSH
30100: LD_VAR 0 17
30104: ARRAY
30105: PPUSH
30106: LD_VAR 0 4
30110: PPUSH
30111: CALL_OW 380
30115: GO 30134
// PrepareHuman ( false , i , skill ) ;
30117: LD_INT 0
30119: PPUSH
30120: LD_VAR 0 8
30124: PPUSH
30125: LD_VAR 0 4
30129: PPUSH
30130: CALL_OW 380
// end else
30134: GO 30153
// PrepareHuman ( false , i , skill ) ;
30136: LD_INT 0
30138: PPUSH
30139: LD_VAR 0 8
30143: PPUSH
30144: LD_VAR 0 4
30148: PPUSH
30149: CALL_OW 380
// un := CreateHuman ;
30153: LD_ADDR_VAR 0 14
30157: PUSH
30158: CALL_OW 44
30162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30163: LD_ADDR_VAR 0 7
30167: PUSH
30168: LD_VAR 0 7
30172: PPUSH
30173: LD_INT 1
30175: PPUSH
30176: LD_VAR 0 14
30180: PPUSH
30181: CALL_OW 2
30185: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30186: LD_VAR 0 14
30190: PPUSH
30191: LD_VAR 0 9
30195: PPUSH
30196: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30200: LD_VAR 0 9
30204: PPUSH
30205: CALL_OW 313
30209: PUSH
30210: LD_INT 6
30212: EQUAL
30213: PUSH
30214: LD_VAR 0 9
30218: PPUSH
30219: CALL_OW 266
30223: PUSH
30224: LD_INT 32
30226: PUSH
30227: LD_INT 31
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: IN
30234: OR
30235: IFFALSE 30049
30237: GO 30046
30239: POP
30240: POP
// end else
30241: GO 30623
// for j = 1 to x do
30243: LD_ADDR_VAR 0 9
30247: PUSH
30248: DOUBLE
30249: LD_INT 1
30251: DEC
30252: ST_TO_ADDR
30253: LD_VAR 0 13
30257: PUSH
30258: FOR_TO
30259: IFFALSE 30621
// begin InitHc ;
30261: CALL_OW 19
// if not f then
30265: LD_VAR 0 12
30269: NOT
30270: IFFALSE 30359
// begin PrepareHuman ( false , i , skill ) ;
30272: LD_INT 0
30274: PPUSH
30275: LD_VAR 0 8
30279: PPUSH
30280: LD_VAR 0 4
30284: PPUSH
30285: CALL_OW 380
// un := CreateHuman ;
30289: LD_ADDR_VAR 0 14
30293: PUSH
30294: CALL_OW 44
30298: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30299: LD_ADDR_VAR 0 7
30303: PUSH
30304: LD_VAR 0 7
30308: PPUSH
30309: LD_INT 1
30311: PPUSH
30312: LD_VAR 0 14
30316: PPUSH
30317: CALL_OW 2
30321: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30322: LD_VAR 0 14
30326: PPUSH
30327: LD_VAR 0 1
30331: PPUSH
30332: CALL_OW 250
30336: PPUSH
30337: LD_VAR 0 1
30341: PPUSH
30342: CALL_OW 251
30346: PPUSH
30347: LD_INT 10
30349: PPUSH
30350: LD_INT 0
30352: PPUSH
30353: CALL_OW 50
// continue ;
30357: GO 30258
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30359: LD_VAR 0 12
30363: PUSH
30364: LD_INT 1
30366: ARRAY
30367: PPUSH
30368: CALL_OW 313
30372: PUSH
30373: LD_VAR 0 12
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: PPUSH
30382: CALL_OW 266
30386: PUSH
30387: LD_INT 32
30389: PUSH
30390: LD_INT 31
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: IN
30397: AND
30398: PUSH
30399: LD_VAR 0 12
30403: PUSH
30404: LD_INT 1
30406: ARRAY
30407: PPUSH
30408: CALL_OW 313
30412: PUSH
30413: LD_INT 6
30415: EQUAL
30416: OR
30417: IFFALSE 30437
// f := Delete ( f , 1 ) ;
30419: LD_ADDR_VAR 0 12
30423: PUSH
30424: LD_VAR 0 12
30428: PPUSH
30429: LD_INT 1
30431: PPUSH
30432: CALL_OW 3
30436: ST_TO_ADDR
// if not f then
30437: LD_VAR 0 12
30441: NOT
30442: IFFALSE 30460
// begin x := x + 2 ;
30444: LD_ADDR_VAR 0 13
30448: PUSH
30449: LD_VAR 0 13
30453: PUSH
30454: LD_INT 2
30456: PLUS
30457: ST_TO_ADDR
// continue ;
30458: GO 30258
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30460: LD_VAR 0 12
30464: PUSH
30465: LD_INT 1
30467: ARRAY
30468: PPUSH
30469: CALL_OW 266
30473: PUSH
30474: LD_INT 5
30476: EQUAL
30477: IFFALSE 30551
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30479: LD_VAR 0 12
30483: PUSH
30484: LD_INT 1
30486: ARRAY
30487: PPUSH
30488: CALL_OW 313
30492: PUSH
30493: LD_INT 3
30495: LESS
30496: IFFALSE 30532
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30498: LD_INT 0
30500: PPUSH
30501: LD_INT 5
30503: PUSH
30504: LD_INT 8
30506: PUSH
30507: LD_INT 9
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: PUSH
30515: LD_VAR 0 17
30519: ARRAY
30520: PPUSH
30521: LD_VAR 0 4
30525: PPUSH
30526: CALL_OW 380
30530: GO 30549
// PrepareHuman ( false , i , skill ) ;
30532: LD_INT 0
30534: PPUSH
30535: LD_VAR 0 8
30539: PPUSH
30540: LD_VAR 0 4
30544: PPUSH
30545: CALL_OW 380
// end else
30549: GO 30568
// PrepareHuman ( false , i , skill ) ;
30551: LD_INT 0
30553: PPUSH
30554: LD_VAR 0 8
30558: PPUSH
30559: LD_VAR 0 4
30563: PPUSH
30564: CALL_OW 380
// un := CreateHuman ;
30568: LD_ADDR_VAR 0 14
30572: PUSH
30573: CALL_OW 44
30577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30578: LD_ADDR_VAR 0 7
30582: PUSH
30583: LD_VAR 0 7
30587: PPUSH
30588: LD_INT 1
30590: PPUSH
30591: LD_VAR 0 14
30595: PPUSH
30596: CALL_OW 2
30600: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30601: LD_VAR 0 14
30605: PPUSH
30606: LD_VAR 0 12
30610: PUSH
30611: LD_INT 1
30613: ARRAY
30614: PPUSH
30615: CALL_OW 52
// end ;
30619: GO 30258
30621: POP
30622: POP
// end ;
30623: GO 29560
30625: POP
30626: POP
// result := result ^ buildings ;
30627: LD_ADDR_VAR 0 7
30631: PUSH
30632: LD_VAR 0 7
30636: PUSH
30637: LD_VAR 0 18
30641: ADD
30642: ST_TO_ADDR
// end else
30643: GO 30786
// begin for i = 1 to personel do
30645: LD_ADDR_VAR 0 8
30649: PUSH
30650: DOUBLE
30651: LD_INT 1
30653: DEC
30654: ST_TO_ADDR
30655: LD_VAR 0 6
30659: PUSH
30660: FOR_TO
30661: IFFALSE 30784
// begin if i > 4 then
30663: LD_VAR 0 8
30667: PUSH
30668: LD_INT 4
30670: GREATER
30671: IFFALSE 30675
// break ;
30673: GO 30784
// x := personel [ i ] ;
30675: LD_ADDR_VAR 0 13
30679: PUSH
30680: LD_VAR 0 6
30684: PUSH
30685: LD_VAR 0 8
30689: ARRAY
30690: ST_TO_ADDR
// if x = - 1 then
30691: LD_VAR 0 13
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: EQUAL
30700: IFFALSE 30704
// continue ;
30702: GO 30660
// PrepareHuman ( false , i , skill ) ;
30704: LD_INT 0
30706: PPUSH
30707: LD_VAR 0 8
30711: PPUSH
30712: LD_VAR 0 4
30716: PPUSH
30717: CALL_OW 380
// un := CreateHuman ;
30721: LD_ADDR_VAR 0 14
30725: PUSH
30726: CALL_OW 44
30730: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30731: LD_VAR 0 14
30735: PPUSH
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 250
30745: PPUSH
30746: LD_VAR 0 1
30750: PPUSH
30751: CALL_OW 251
30755: PPUSH
30756: LD_INT 10
30758: PPUSH
30759: LD_INT 0
30761: PPUSH
30762: CALL_OW 50
// result := result ^ un ;
30766: LD_ADDR_VAR 0 7
30770: PUSH
30771: LD_VAR 0 7
30775: PUSH
30776: LD_VAR 0 14
30780: ADD
30781: ST_TO_ADDR
// end ;
30782: GO 30660
30784: POP
30785: POP
// end ; end ;
30786: LD_VAR 0 7
30790: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30791: LD_INT 0
30793: PPUSH
30794: PPUSH
30795: PPUSH
30796: PPUSH
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
30804: PPUSH
30805: PPUSH
30806: PPUSH
30807: PPUSH
30808: PPUSH
// result := false ;
30809: LD_ADDR_VAR 0 3
30813: PUSH
30814: LD_INT 0
30816: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30817: LD_VAR 0 1
30821: NOT
30822: PUSH
30823: LD_VAR 0 1
30827: PPUSH
30828: CALL_OW 266
30832: PUSH
30833: LD_INT 32
30835: PUSH
30836: LD_INT 33
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: IN
30843: NOT
30844: OR
30845: IFFALSE 30849
// exit ;
30847: GO 31958
// nat := GetNation ( tower ) ;
30849: LD_ADDR_VAR 0 12
30853: PUSH
30854: LD_VAR 0 1
30858: PPUSH
30859: CALL_OW 248
30863: ST_TO_ADDR
// side := GetSide ( tower ) ;
30864: LD_ADDR_VAR 0 16
30868: PUSH
30869: LD_VAR 0 1
30873: PPUSH
30874: CALL_OW 255
30878: ST_TO_ADDR
// x := GetX ( tower ) ;
30879: LD_ADDR_VAR 0 10
30883: PUSH
30884: LD_VAR 0 1
30888: PPUSH
30889: CALL_OW 250
30893: ST_TO_ADDR
// y := GetY ( tower ) ;
30894: LD_ADDR_VAR 0 11
30898: PUSH
30899: LD_VAR 0 1
30903: PPUSH
30904: CALL_OW 251
30908: ST_TO_ADDR
// if not x or not y then
30909: LD_VAR 0 10
30913: NOT
30914: PUSH
30915: LD_VAR 0 11
30919: NOT
30920: OR
30921: IFFALSE 30925
// exit ;
30923: GO 31958
// weapon := 0 ;
30925: LD_ADDR_VAR 0 18
30929: PUSH
30930: LD_INT 0
30932: ST_TO_ADDR
// fac_list := [ ] ;
30933: LD_ADDR_VAR 0 17
30937: PUSH
30938: EMPTY
30939: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30940: LD_ADDR_VAR 0 6
30944: PUSH
30945: LD_VAR 0 1
30949: PPUSH
30950: CALL_OW 274
30954: PPUSH
30955: LD_VAR 0 2
30959: PPUSH
30960: LD_INT 0
30962: PPUSH
30963: CALL 28529 0 3
30967: PPUSH
30968: LD_INT 30
30970: PUSH
30971: LD_INT 3
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PPUSH
30978: CALL_OW 72
30982: ST_TO_ADDR
// if not factories then
30983: LD_VAR 0 6
30987: NOT
30988: IFFALSE 30992
// exit ;
30990: GO 31958
// for i in factories do
30992: LD_ADDR_VAR 0 8
30996: PUSH
30997: LD_VAR 0 6
31001: PUSH
31002: FOR_IN
31003: IFFALSE 31028
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31005: LD_ADDR_VAR 0 17
31009: PUSH
31010: LD_VAR 0 17
31014: PUSH
31015: LD_VAR 0 8
31019: PPUSH
31020: CALL_OW 478
31024: UNION
31025: ST_TO_ADDR
31026: GO 31002
31028: POP
31029: POP
// if not fac_list then
31030: LD_VAR 0 17
31034: NOT
31035: IFFALSE 31039
// exit ;
31037: GO 31958
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31039: LD_ADDR_VAR 0 5
31043: PUSH
31044: LD_INT 4
31046: PUSH
31047: LD_INT 5
31049: PUSH
31050: LD_INT 9
31052: PUSH
31053: LD_INT 10
31055: PUSH
31056: LD_INT 6
31058: PUSH
31059: LD_INT 7
31061: PUSH
31062: LD_INT 11
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 27
31076: PUSH
31077: LD_INT 28
31079: PUSH
31080: LD_INT 26
31082: PUSH
31083: LD_INT 30
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 43
31094: PUSH
31095: LD_INT 44
31097: PUSH
31098: LD_INT 46
31100: PUSH
31101: LD_INT 45
31103: PUSH
31104: LD_INT 47
31106: PUSH
31107: LD_INT 49
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: PUSH
31123: LD_VAR 0 12
31127: ARRAY
31128: ST_TO_ADDR
// list := list isect fac_list ;
31129: LD_ADDR_VAR 0 5
31133: PUSH
31134: LD_VAR 0 5
31138: PUSH
31139: LD_VAR 0 17
31143: ISECT
31144: ST_TO_ADDR
// if not list then
31145: LD_VAR 0 5
31149: NOT
31150: IFFALSE 31154
// exit ;
31152: GO 31958
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31154: LD_VAR 0 12
31158: PUSH
31159: LD_INT 3
31161: EQUAL
31162: PUSH
31163: LD_INT 49
31165: PUSH
31166: LD_VAR 0 5
31170: IN
31171: AND
31172: PUSH
31173: LD_INT 31
31175: PPUSH
31176: LD_VAR 0 16
31180: PPUSH
31181: CALL_OW 321
31185: PUSH
31186: LD_INT 2
31188: EQUAL
31189: AND
31190: IFFALSE 31250
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31192: LD_INT 22
31194: PUSH
31195: LD_VAR 0 16
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 35
31206: PUSH
31207: LD_INT 49
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 91
31216: PUSH
31217: LD_VAR 0 1
31221: PUSH
31222: LD_INT 10
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: PPUSH
31235: CALL_OW 69
31239: NOT
31240: IFFALSE 31250
// weapon := ru_time_lapser ;
31242: LD_ADDR_VAR 0 18
31246: PUSH
31247: LD_INT 49
31249: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31250: LD_VAR 0 12
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: LD_INT 2
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: IN
31265: PUSH
31266: LD_INT 11
31268: PUSH
31269: LD_VAR 0 5
31273: IN
31274: PUSH
31275: LD_INT 30
31277: PUSH
31278: LD_VAR 0 5
31282: IN
31283: OR
31284: AND
31285: PUSH
31286: LD_INT 6
31288: PPUSH
31289: LD_VAR 0 16
31293: PPUSH
31294: CALL_OW 321
31298: PUSH
31299: LD_INT 2
31301: EQUAL
31302: AND
31303: IFFALSE 31468
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31305: LD_INT 22
31307: PUSH
31308: LD_VAR 0 16
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 2
31319: PUSH
31320: LD_INT 35
31322: PUSH
31323: LD_INT 11
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 35
31332: PUSH
31333: LD_INT 30
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 91
31347: PUSH
31348: LD_VAR 0 1
31352: PUSH
31353: LD_INT 18
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: PPUSH
31366: CALL_OW 69
31370: NOT
31371: PUSH
31372: LD_INT 22
31374: PUSH
31375: LD_VAR 0 16
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: LD_INT 30
31389: PUSH
31390: LD_INT 32
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 30
31399: PUSH
31400: LD_INT 33
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 91
31414: PUSH
31415: LD_VAR 0 1
31419: PUSH
31420: LD_INT 12
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: PPUSH
31436: CALL_OW 69
31440: PUSH
31441: LD_INT 2
31443: GREATER
31444: AND
31445: IFFALSE 31468
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31447: LD_ADDR_VAR 0 18
31451: PUSH
31452: LD_INT 11
31454: PUSH
31455: LD_INT 30
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_VAR 0 12
31466: ARRAY
31467: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31468: LD_VAR 0 18
31472: NOT
31473: PUSH
31474: LD_INT 40
31476: PPUSH
31477: LD_VAR 0 16
31481: PPUSH
31482: CALL_OW 321
31486: PUSH
31487: LD_INT 2
31489: EQUAL
31490: AND
31491: PUSH
31492: LD_INT 7
31494: PUSH
31495: LD_VAR 0 5
31499: IN
31500: PUSH
31501: LD_INT 28
31503: PUSH
31504: LD_VAR 0 5
31508: IN
31509: OR
31510: PUSH
31511: LD_INT 45
31513: PUSH
31514: LD_VAR 0 5
31518: IN
31519: OR
31520: AND
31521: IFFALSE 31775
// begin hex := GetHexInfo ( x , y ) ;
31523: LD_ADDR_VAR 0 4
31527: PUSH
31528: LD_VAR 0 10
31532: PPUSH
31533: LD_VAR 0 11
31537: PPUSH
31538: CALL_OW 546
31542: ST_TO_ADDR
// if hex [ 1 ] then
31543: LD_VAR 0 4
31547: PUSH
31548: LD_INT 1
31550: ARRAY
31551: IFFALSE 31555
// exit ;
31553: GO 31958
// height := hex [ 2 ] ;
31555: LD_ADDR_VAR 0 15
31559: PUSH
31560: LD_VAR 0 4
31564: PUSH
31565: LD_INT 2
31567: ARRAY
31568: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31569: LD_ADDR_VAR 0 14
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: LD_INT 5
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
// for i in tmp do
31592: LD_ADDR_VAR 0 8
31596: PUSH
31597: LD_VAR 0 14
31601: PUSH
31602: FOR_IN
31603: IFFALSE 31773
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31605: LD_ADDR_VAR 0 9
31609: PUSH
31610: LD_VAR 0 10
31614: PPUSH
31615: LD_VAR 0 8
31619: PPUSH
31620: LD_INT 5
31622: PPUSH
31623: CALL_OW 272
31627: PUSH
31628: LD_VAR 0 11
31632: PPUSH
31633: LD_VAR 0 8
31637: PPUSH
31638: LD_INT 5
31640: PPUSH
31641: CALL_OW 273
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31650: LD_VAR 0 9
31654: PUSH
31655: LD_INT 1
31657: ARRAY
31658: PPUSH
31659: LD_VAR 0 9
31663: PUSH
31664: LD_INT 2
31666: ARRAY
31667: PPUSH
31668: CALL_OW 488
31672: IFFALSE 31771
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31674: LD_ADDR_VAR 0 4
31678: PUSH
31679: LD_VAR 0 9
31683: PUSH
31684: LD_INT 1
31686: ARRAY
31687: PPUSH
31688: LD_VAR 0 9
31692: PUSH
31693: LD_INT 2
31695: ARRAY
31696: PPUSH
31697: CALL_OW 546
31701: ST_TO_ADDR
// if hex [ 1 ] then
31702: LD_VAR 0 4
31706: PUSH
31707: LD_INT 1
31709: ARRAY
31710: IFFALSE 31714
// continue ;
31712: GO 31602
// h := hex [ 2 ] ;
31714: LD_ADDR_VAR 0 13
31718: PUSH
31719: LD_VAR 0 4
31723: PUSH
31724: LD_INT 2
31726: ARRAY
31727: ST_TO_ADDR
// if h + 7 < height then
31728: LD_VAR 0 13
31732: PUSH
31733: LD_INT 7
31735: PLUS
31736: PUSH
31737: LD_VAR 0 15
31741: LESS
31742: IFFALSE 31771
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31744: LD_ADDR_VAR 0 18
31748: PUSH
31749: LD_INT 7
31751: PUSH
31752: LD_INT 28
31754: PUSH
31755: LD_INT 45
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: LIST
31762: PUSH
31763: LD_VAR 0 12
31767: ARRAY
31768: ST_TO_ADDR
// break ;
31769: GO 31773
// end ; end ; end ;
31771: GO 31602
31773: POP
31774: POP
// end ; if not weapon then
31775: LD_VAR 0 18
31779: NOT
31780: IFFALSE 31840
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31782: LD_ADDR_VAR 0 5
31786: PUSH
31787: LD_VAR 0 5
31791: PUSH
31792: LD_INT 11
31794: PUSH
31795: LD_INT 30
31797: PUSH
31798: LD_INT 49
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: DIFF
31806: ST_TO_ADDR
// if not list then
31807: LD_VAR 0 5
31811: NOT
31812: IFFALSE 31816
// exit ;
31814: GO 31958
// weapon := list [ rand ( 1 , list ) ] ;
31816: LD_ADDR_VAR 0 18
31820: PUSH
31821: LD_VAR 0 5
31825: PUSH
31826: LD_INT 1
31828: PPUSH
31829: LD_VAR 0 5
31833: PPUSH
31834: CALL_OW 12
31838: ARRAY
31839: ST_TO_ADDR
// end ; if weapon then
31840: LD_VAR 0 18
31844: IFFALSE 31958
// begin tmp := CostOfWeapon ( weapon ) ;
31846: LD_ADDR_VAR 0 14
31850: PUSH
31851: LD_VAR 0 18
31855: PPUSH
31856: CALL_OW 451
31860: ST_TO_ADDR
// j := GetBase ( tower ) ;
31861: LD_ADDR_VAR 0 9
31865: PUSH
31866: LD_VAR 0 1
31870: PPUSH
31871: CALL_OW 274
31875: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31876: LD_VAR 0 9
31880: PPUSH
31881: LD_INT 1
31883: PPUSH
31884: CALL_OW 275
31888: PUSH
31889: LD_VAR 0 14
31893: PUSH
31894: LD_INT 1
31896: ARRAY
31897: GREATEREQUAL
31898: PUSH
31899: LD_VAR 0 9
31903: PPUSH
31904: LD_INT 2
31906: PPUSH
31907: CALL_OW 275
31911: PUSH
31912: LD_VAR 0 14
31916: PUSH
31917: LD_INT 2
31919: ARRAY
31920: GREATEREQUAL
31921: AND
31922: PUSH
31923: LD_VAR 0 9
31927: PPUSH
31928: LD_INT 3
31930: PPUSH
31931: CALL_OW 275
31935: PUSH
31936: LD_VAR 0 14
31940: PUSH
31941: LD_INT 3
31943: ARRAY
31944: GREATEREQUAL
31945: AND
31946: IFFALSE 31958
// result := weapon ;
31948: LD_ADDR_VAR 0 3
31952: PUSH
31953: LD_VAR 0 18
31957: ST_TO_ADDR
// end ; end ;
31958: LD_VAR 0 3
31962: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31963: LD_INT 0
31965: PPUSH
31966: PPUSH
// result := true ;
31967: LD_ADDR_VAR 0 3
31971: PUSH
31972: LD_INT 1
31974: ST_TO_ADDR
// if array1 = array2 then
31975: LD_VAR 0 1
31979: PUSH
31980: LD_VAR 0 2
31984: EQUAL
31985: IFFALSE 32045
// begin for i = 1 to array1 do
31987: LD_ADDR_VAR 0 4
31991: PUSH
31992: DOUBLE
31993: LD_INT 1
31995: DEC
31996: ST_TO_ADDR
31997: LD_VAR 0 1
32001: PUSH
32002: FOR_TO
32003: IFFALSE 32041
// if array1 [ i ] <> array2 [ i ] then
32005: LD_VAR 0 1
32009: PUSH
32010: LD_VAR 0 4
32014: ARRAY
32015: PUSH
32016: LD_VAR 0 2
32020: PUSH
32021: LD_VAR 0 4
32025: ARRAY
32026: NONEQUAL
32027: IFFALSE 32039
// begin result := false ;
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_INT 0
32036: ST_TO_ADDR
// break ;
32037: GO 32041
// end ;
32039: GO 32002
32041: POP
32042: POP
// end else
32043: GO 32053
// result := false ;
32045: LD_ADDR_VAR 0 3
32049: PUSH
32050: LD_INT 0
32052: ST_TO_ADDR
// end ;
32053: LD_VAR 0 3
32057: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32058: LD_INT 0
32060: PPUSH
32061: PPUSH
// if not array1 or not array2 then
32062: LD_VAR 0 1
32066: NOT
32067: PUSH
32068: LD_VAR 0 2
32072: NOT
32073: OR
32074: IFFALSE 32078
// exit ;
32076: GO 32142
// result := true ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_INT 1
32085: ST_TO_ADDR
// for i = 1 to array1 do
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: DOUBLE
32092: LD_INT 1
32094: DEC
32095: ST_TO_ADDR
32096: LD_VAR 0 1
32100: PUSH
32101: FOR_TO
32102: IFFALSE 32140
// if array1 [ i ] <> array2 [ i ] then
32104: LD_VAR 0 1
32108: PUSH
32109: LD_VAR 0 4
32113: ARRAY
32114: PUSH
32115: LD_VAR 0 2
32119: PUSH
32120: LD_VAR 0 4
32124: ARRAY
32125: NONEQUAL
32126: IFFALSE 32138
// begin result := false ;
32128: LD_ADDR_VAR 0 3
32132: PUSH
32133: LD_INT 0
32135: ST_TO_ADDR
// break ;
32136: GO 32140
// end ;
32138: GO 32101
32140: POP
32141: POP
// end ;
32142: LD_VAR 0 3
32146: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32147: LD_INT 0
32149: PPUSH
32150: PPUSH
32151: PPUSH
// pom := GetBase ( fac ) ;
32152: LD_ADDR_VAR 0 5
32156: PUSH
32157: LD_VAR 0 1
32161: PPUSH
32162: CALL_OW 274
32166: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32167: LD_ADDR_VAR 0 4
32171: PUSH
32172: LD_VAR 0 2
32176: PUSH
32177: LD_INT 1
32179: ARRAY
32180: PPUSH
32181: LD_VAR 0 2
32185: PUSH
32186: LD_INT 2
32188: ARRAY
32189: PPUSH
32190: LD_VAR 0 2
32194: PUSH
32195: LD_INT 3
32197: ARRAY
32198: PPUSH
32199: LD_VAR 0 2
32203: PUSH
32204: LD_INT 4
32206: ARRAY
32207: PPUSH
32208: CALL_OW 449
32212: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32213: LD_ADDR_VAR 0 3
32217: PUSH
32218: LD_VAR 0 5
32222: PPUSH
32223: LD_INT 1
32225: PPUSH
32226: CALL_OW 275
32230: PUSH
32231: LD_VAR 0 4
32235: PUSH
32236: LD_INT 1
32238: ARRAY
32239: GREATEREQUAL
32240: PUSH
32241: LD_VAR 0 5
32245: PPUSH
32246: LD_INT 2
32248: PPUSH
32249: CALL_OW 275
32253: PUSH
32254: LD_VAR 0 4
32258: PUSH
32259: LD_INT 2
32261: ARRAY
32262: GREATEREQUAL
32263: AND
32264: PUSH
32265: LD_VAR 0 5
32269: PPUSH
32270: LD_INT 3
32272: PPUSH
32273: CALL_OW 275
32277: PUSH
32278: LD_VAR 0 4
32282: PUSH
32283: LD_INT 3
32285: ARRAY
32286: GREATEREQUAL
32287: AND
32288: ST_TO_ADDR
// end ;
32289: LD_VAR 0 3
32293: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32294: LD_INT 0
32296: PPUSH
32297: PPUSH
32298: PPUSH
32299: PPUSH
// pom := GetBase ( building ) ;
32300: LD_ADDR_VAR 0 3
32304: PUSH
32305: LD_VAR 0 1
32309: PPUSH
32310: CALL_OW 274
32314: ST_TO_ADDR
// if not pom then
32315: LD_VAR 0 3
32319: NOT
32320: IFFALSE 32324
// exit ;
32322: GO 32494
// btype := GetBType ( building ) ;
32324: LD_ADDR_VAR 0 5
32328: PUSH
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL_OW 266
32338: ST_TO_ADDR
// if btype = b_armoury then
32339: LD_VAR 0 5
32343: PUSH
32344: LD_INT 4
32346: EQUAL
32347: IFFALSE 32357
// btype := b_barracks ;
32349: LD_ADDR_VAR 0 5
32353: PUSH
32354: LD_INT 5
32356: ST_TO_ADDR
// if btype = b_depot then
32357: LD_VAR 0 5
32361: PUSH
32362: LD_INT 0
32364: EQUAL
32365: IFFALSE 32375
// btype := b_warehouse ;
32367: LD_ADDR_VAR 0 5
32371: PUSH
32372: LD_INT 1
32374: ST_TO_ADDR
// if btype = b_workshop then
32375: LD_VAR 0 5
32379: PUSH
32380: LD_INT 2
32382: EQUAL
32383: IFFALSE 32393
// btype := b_factory ;
32385: LD_ADDR_VAR 0 5
32389: PUSH
32390: LD_INT 3
32392: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32393: LD_ADDR_VAR 0 4
32397: PUSH
32398: LD_VAR 0 5
32402: PPUSH
32403: LD_VAR 0 1
32407: PPUSH
32408: CALL_OW 248
32412: PPUSH
32413: CALL_OW 450
32417: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32418: LD_ADDR_VAR 0 2
32422: PUSH
32423: LD_VAR 0 3
32427: PPUSH
32428: LD_INT 1
32430: PPUSH
32431: CALL_OW 275
32435: PUSH
32436: LD_VAR 0 4
32440: PUSH
32441: LD_INT 1
32443: ARRAY
32444: GREATEREQUAL
32445: PUSH
32446: LD_VAR 0 3
32450: PPUSH
32451: LD_INT 2
32453: PPUSH
32454: CALL_OW 275
32458: PUSH
32459: LD_VAR 0 4
32463: PUSH
32464: LD_INT 2
32466: ARRAY
32467: GREATEREQUAL
32468: AND
32469: PUSH
32470: LD_VAR 0 3
32474: PPUSH
32475: LD_INT 3
32477: PPUSH
32478: CALL_OW 275
32482: PUSH
32483: LD_VAR 0 4
32487: PUSH
32488: LD_INT 3
32490: ARRAY
32491: GREATEREQUAL
32492: AND
32493: ST_TO_ADDR
// end ;
32494: LD_VAR 0 2
32498: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32499: LD_INT 0
32501: PPUSH
32502: PPUSH
32503: PPUSH
// pom := GetBase ( building ) ;
32504: LD_ADDR_VAR 0 4
32508: PUSH
32509: LD_VAR 0 1
32513: PPUSH
32514: CALL_OW 274
32518: ST_TO_ADDR
// if not pom then
32519: LD_VAR 0 4
32523: NOT
32524: IFFALSE 32528
// exit ;
32526: GO 32629
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32528: LD_ADDR_VAR 0 5
32532: PUSH
32533: LD_VAR 0 2
32537: PPUSH
32538: LD_VAR 0 1
32542: PPUSH
32543: CALL_OW 248
32547: PPUSH
32548: CALL_OW 450
32552: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32553: LD_ADDR_VAR 0 3
32557: PUSH
32558: LD_VAR 0 4
32562: PPUSH
32563: LD_INT 1
32565: PPUSH
32566: CALL_OW 275
32570: PUSH
32571: LD_VAR 0 5
32575: PUSH
32576: LD_INT 1
32578: ARRAY
32579: GREATEREQUAL
32580: PUSH
32581: LD_VAR 0 4
32585: PPUSH
32586: LD_INT 2
32588: PPUSH
32589: CALL_OW 275
32593: PUSH
32594: LD_VAR 0 5
32598: PUSH
32599: LD_INT 2
32601: ARRAY
32602: GREATEREQUAL
32603: AND
32604: PUSH
32605: LD_VAR 0 4
32609: PPUSH
32610: LD_INT 3
32612: PPUSH
32613: CALL_OW 275
32617: PUSH
32618: LD_VAR 0 5
32622: PUSH
32623: LD_INT 3
32625: ARRAY
32626: GREATEREQUAL
32627: AND
32628: ST_TO_ADDR
// end ;
32629: LD_VAR 0 3
32633: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32634: LD_INT 0
32636: PPUSH
32637: PPUSH
32638: PPUSH
32639: PPUSH
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
32645: PPUSH
32646: PPUSH
// result := false ;
32647: LD_ADDR_VAR 0 8
32651: PUSH
32652: LD_INT 0
32654: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32655: LD_VAR 0 5
32659: NOT
32660: PUSH
32661: LD_VAR 0 1
32665: NOT
32666: OR
32667: PUSH
32668: LD_VAR 0 2
32672: NOT
32673: OR
32674: PUSH
32675: LD_VAR 0 3
32679: NOT
32680: OR
32681: IFFALSE 32685
// exit ;
32683: GO 33499
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32685: LD_ADDR_VAR 0 14
32689: PUSH
32690: LD_VAR 0 1
32694: PPUSH
32695: LD_VAR 0 2
32699: PPUSH
32700: LD_VAR 0 3
32704: PPUSH
32705: LD_VAR 0 4
32709: PPUSH
32710: LD_VAR 0 5
32714: PUSH
32715: LD_INT 1
32717: ARRAY
32718: PPUSH
32719: CALL_OW 248
32723: PPUSH
32724: LD_INT 0
32726: PPUSH
32727: CALL 34752 0 6
32731: ST_TO_ADDR
// if not hexes then
32732: LD_VAR 0 14
32736: NOT
32737: IFFALSE 32741
// exit ;
32739: GO 33499
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32741: LD_ADDR_VAR 0 17
32745: PUSH
32746: LD_VAR 0 5
32750: PPUSH
32751: LD_INT 22
32753: PUSH
32754: LD_VAR 0 13
32758: PPUSH
32759: CALL_OW 255
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: LD_INT 30
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 30
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PPUSH
32800: CALL_OW 72
32804: ST_TO_ADDR
// for i = 1 to hexes do
32805: LD_ADDR_VAR 0 9
32809: PUSH
32810: DOUBLE
32811: LD_INT 1
32813: DEC
32814: ST_TO_ADDR
32815: LD_VAR 0 14
32819: PUSH
32820: FOR_TO
32821: IFFALSE 33497
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32823: LD_ADDR_VAR 0 13
32827: PUSH
32828: LD_VAR 0 14
32832: PUSH
32833: LD_VAR 0 9
32837: ARRAY
32838: PUSH
32839: LD_INT 1
32841: ARRAY
32842: PPUSH
32843: LD_VAR 0 14
32847: PUSH
32848: LD_VAR 0 9
32852: ARRAY
32853: PUSH
32854: LD_INT 2
32856: ARRAY
32857: PPUSH
32858: CALL_OW 428
32862: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32863: LD_VAR 0 14
32867: PUSH
32868: LD_VAR 0 9
32872: ARRAY
32873: PUSH
32874: LD_INT 1
32876: ARRAY
32877: PPUSH
32878: LD_VAR 0 14
32882: PUSH
32883: LD_VAR 0 9
32887: ARRAY
32888: PUSH
32889: LD_INT 2
32891: ARRAY
32892: PPUSH
32893: CALL_OW 351
32897: PUSH
32898: LD_VAR 0 14
32902: PUSH
32903: LD_VAR 0 9
32907: ARRAY
32908: PUSH
32909: LD_INT 1
32911: ARRAY
32912: PPUSH
32913: LD_VAR 0 14
32917: PUSH
32918: LD_VAR 0 9
32922: ARRAY
32923: PUSH
32924: LD_INT 2
32926: ARRAY
32927: PPUSH
32928: CALL_OW 488
32932: NOT
32933: OR
32934: PUSH
32935: LD_VAR 0 13
32939: PPUSH
32940: CALL_OW 247
32944: PUSH
32945: LD_INT 3
32947: EQUAL
32948: OR
32949: IFFALSE 32955
// exit ;
32951: POP
32952: POP
32953: GO 33499
// if not tmp then
32955: LD_VAR 0 13
32959: NOT
32960: IFFALSE 32964
// continue ;
32962: GO 32820
// result := true ;
32964: LD_ADDR_VAR 0 8
32968: PUSH
32969: LD_INT 1
32971: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32972: LD_VAR 0 6
32976: PUSH
32977: LD_VAR 0 13
32981: PPUSH
32982: CALL_OW 247
32986: PUSH
32987: LD_INT 2
32989: EQUAL
32990: AND
32991: PUSH
32992: LD_VAR 0 13
32996: PPUSH
32997: CALL_OW 263
33001: PUSH
33002: LD_INT 1
33004: EQUAL
33005: AND
33006: IFFALSE 33170
// begin if IsDrivenBy ( tmp ) then
33008: LD_VAR 0 13
33012: PPUSH
33013: CALL_OW 311
33017: IFFALSE 33021
// continue ;
33019: GO 32820
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33021: LD_VAR 0 6
33025: PPUSH
33026: LD_INT 3
33028: PUSH
33029: LD_INT 60
33031: PUSH
33032: EMPTY
33033: LIST
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 3
33041: PUSH
33042: LD_INT 55
33044: PUSH
33045: EMPTY
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PPUSH
33056: CALL_OW 72
33060: IFFALSE 33168
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33062: LD_ADDR_VAR 0 18
33066: PUSH
33067: LD_VAR 0 6
33071: PPUSH
33072: LD_INT 3
33074: PUSH
33075: LD_INT 60
33077: PUSH
33078: EMPTY
33079: LIST
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: LD_INT 55
33090: PUSH
33091: EMPTY
33092: LIST
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PPUSH
33102: CALL_OW 72
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: ST_TO_ADDR
// if IsInUnit ( driver ) then
33111: LD_VAR 0 18
33115: PPUSH
33116: CALL_OW 310
33120: IFFALSE 33131
// ComExit ( driver ) ;
33122: LD_VAR 0 18
33126: PPUSH
33127: CALL 58544 0 1
// AddComEnterUnit ( driver , tmp ) ;
33131: LD_VAR 0 18
33135: PPUSH
33136: LD_VAR 0 13
33140: PPUSH
33141: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33145: LD_VAR 0 18
33149: PPUSH
33150: LD_VAR 0 7
33154: PPUSH
33155: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33159: LD_VAR 0 18
33163: PPUSH
33164: CALL_OW 181
// end ; continue ;
33168: GO 32820
// end ; if not cleaners or not tmp in cleaners then
33170: LD_VAR 0 6
33174: NOT
33175: PUSH
33176: LD_VAR 0 13
33180: PUSH
33181: LD_VAR 0 6
33185: IN
33186: NOT
33187: OR
33188: IFFALSE 33495
// begin if dep then
33190: LD_VAR 0 17
33194: IFFALSE 33330
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33196: LD_ADDR_VAR 0 16
33200: PUSH
33201: LD_VAR 0 17
33205: PUSH
33206: LD_INT 1
33208: ARRAY
33209: PPUSH
33210: CALL_OW 250
33214: PPUSH
33215: LD_VAR 0 17
33219: PUSH
33220: LD_INT 1
33222: ARRAY
33223: PPUSH
33224: CALL_OW 254
33228: PPUSH
33229: LD_INT 5
33231: PPUSH
33232: CALL_OW 272
33236: PUSH
33237: LD_VAR 0 17
33241: PUSH
33242: LD_INT 1
33244: ARRAY
33245: PPUSH
33246: CALL_OW 251
33250: PPUSH
33251: LD_VAR 0 17
33255: PUSH
33256: LD_INT 1
33258: ARRAY
33259: PPUSH
33260: CALL_OW 254
33264: PPUSH
33265: LD_INT 5
33267: PPUSH
33268: CALL_OW 273
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33277: LD_VAR 0 16
33281: PUSH
33282: LD_INT 1
33284: ARRAY
33285: PPUSH
33286: LD_VAR 0 16
33290: PUSH
33291: LD_INT 2
33293: ARRAY
33294: PPUSH
33295: CALL_OW 488
33299: IFFALSE 33330
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33301: LD_VAR 0 13
33305: PPUSH
33306: LD_VAR 0 16
33310: PUSH
33311: LD_INT 1
33313: ARRAY
33314: PPUSH
33315: LD_VAR 0 16
33319: PUSH
33320: LD_INT 2
33322: ARRAY
33323: PPUSH
33324: CALL_OW 111
// continue ;
33328: GO 32820
// end ; end ; r := GetDir ( tmp ) ;
33330: LD_ADDR_VAR 0 15
33334: PUSH
33335: LD_VAR 0 13
33339: PPUSH
33340: CALL_OW 254
33344: ST_TO_ADDR
// if r = 5 then
33345: LD_VAR 0 15
33349: PUSH
33350: LD_INT 5
33352: EQUAL
33353: IFFALSE 33363
// r := 0 ;
33355: LD_ADDR_VAR 0 15
33359: PUSH
33360: LD_INT 0
33362: ST_TO_ADDR
// for j = r to 5 do
33363: LD_ADDR_VAR 0 10
33367: PUSH
33368: DOUBLE
33369: LD_VAR 0 15
33373: DEC
33374: ST_TO_ADDR
33375: LD_INT 5
33377: PUSH
33378: FOR_TO
33379: IFFALSE 33493
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33381: LD_ADDR_VAR 0 11
33385: PUSH
33386: LD_VAR 0 13
33390: PPUSH
33391: CALL_OW 250
33395: PPUSH
33396: LD_VAR 0 10
33400: PPUSH
33401: LD_INT 2
33403: PPUSH
33404: CALL_OW 272
33408: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33409: LD_ADDR_VAR 0 12
33413: PUSH
33414: LD_VAR 0 13
33418: PPUSH
33419: CALL_OW 251
33423: PPUSH
33424: LD_VAR 0 10
33428: PPUSH
33429: LD_INT 2
33431: PPUSH
33432: CALL_OW 273
33436: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33437: LD_VAR 0 11
33441: PPUSH
33442: LD_VAR 0 12
33446: PPUSH
33447: CALL_OW 488
33451: PUSH
33452: LD_VAR 0 11
33456: PPUSH
33457: LD_VAR 0 12
33461: PPUSH
33462: CALL_OW 428
33466: NOT
33467: AND
33468: IFFALSE 33491
// begin ComMoveXY ( tmp , _x , _y ) ;
33470: LD_VAR 0 13
33474: PPUSH
33475: LD_VAR 0 11
33479: PPUSH
33480: LD_VAR 0 12
33484: PPUSH
33485: CALL_OW 111
// break ;
33489: GO 33493
// end ; end ;
33491: GO 33378
33493: POP
33494: POP
// end ; end ;
33495: GO 32820
33497: POP
33498: POP
// end ;
33499: LD_VAR 0 8
33503: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33504: LD_INT 0
33506: PPUSH
// result := true ;
33507: LD_ADDR_VAR 0 3
33511: PUSH
33512: LD_INT 1
33514: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33515: LD_VAR 0 2
33519: PUSH
33520: LD_INT 24
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33534
33526: LD_INT 33
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33534
33532: GO 33559
33534: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33535: LD_ADDR_VAR 0 3
33539: PUSH
33540: LD_INT 32
33542: PPUSH
33543: LD_VAR 0 1
33547: PPUSH
33548: CALL_OW 321
33552: PUSH
33553: LD_INT 2
33555: EQUAL
33556: ST_TO_ADDR
33557: GO 33875
33559: LD_INT 20
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33592
33567: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33568: LD_ADDR_VAR 0 3
33572: PUSH
33573: LD_INT 6
33575: PPUSH
33576: LD_VAR 0 1
33580: PPUSH
33581: CALL_OW 321
33585: PUSH
33586: LD_INT 2
33588: EQUAL
33589: ST_TO_ADDR
33590: GO 33875
33592: LD_INT 22
33594: DOUBLE
33595: EQUAL
33596: IFTRUE 33606
33598: LD_INT 36
33600: DOUBLE
33601: EQUAL
33602: IFTRUE 33606
33604: GO 33631
33606: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33607: LD_ADDR_VAR 0 3
33611: PUSH
33612: LD_INT 15
33614: PPUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 321
33624: PUSH
33625: LD_INT 2
33627: EQUAL
33628: ST_TO_ADDR
33629: GO 33875
33631: LD_INT 30
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33639
33637: GO 33664
33639: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33640: LD_ADDR_VAR 0 3
33644: PUSH
33645: LD_INT 20
33647: PPUSH
33648: LD_VAR 0 1
33652: PPUSH
33653: CALL_OW 321
33657: PUSH
33658: LD_INT 2
33660: EQUAL
33661: ST_TO_ADDR
33662: GO 33875
33664: LD_INT 28
33666: DOUBLE
33667: EQUAL
33668: IFTRUE 33678
33670: LD_INT 21
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33703
33678: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33679: LD_ADDR_VAR 0 3
33683: PUSH
33684: LD_INT 21
33686: PPUSH
33687: LD_VAR 0 1
33691: PPUSH
33692: CALL_OW 321
33696: PUSH
33697: LD_INT 2
33699: EQUAL
33700: ST_TO_ADDR
33701: GO 33875
33703: LD_INT 16
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33711
33709: GO 33736
33711: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33712: LD_ADDR_VAR 0 3
33716: PUSH
33717: LD_INT 84
33719: PPUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 321
33729: PUSH
33730: LD_INT 2
33732: EQUAL
33733: ST_TO_ADDR
33734: GO 33875
33736: LD_INT 19
33738: DOUBLE
33739: EQUAL
33740: IFTRUE 33750
33742: LD_INT 23
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 33775
33750: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33751: LD_ADDR_VAR 0 3
33755: PUSH
33756: LD_INT 83
33758: PPUSH
33759: LD_VAR 0 1
33763: PPUSH
33764: CALL_OW 321
33768: PUSH
33769: LD_INT 2
33771: EQUAL
33772: ST_TO_ADDR
33773: GO 33875
33775: LD_INT 17
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33783
33781: GO 33808
33783: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_INT 39
33791: PPUSH
33792: LD_VAR 0 1
33796: PPUSH
33797: CALL_OW 321
33801: PUSH
33802: LD_INT 2
33804: EQUAL
33805: ST_TO_ADDR
33806: GO 33875
33808: LD_INT 18
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33816
33814: GO 33841
33816: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33817: LD_ADDR_VAR 0 3
33821: PUSH
33822: LD_INT 40
33824: PPUSH
33825: LD_VAR 0 1
33829: PPUSH
33830: CALL_OW 321
33834: PUSH
33835: LD_INT 2
33837: EQUAL
33838: ST_TO_ADDR
33839: GO 33875
33841: LD_INT 27
33843: DOUBLE
33844: EQUAL
33845: IFTRUE 33849
33847: GO 33874
33849: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33850: LD_ADDR_VAR 0 3
33854: PUSH
33855: LD_INT 35
33857: PPUSH
33858: LD_VAR 0 1
33862: PPUSH
33863: CALL_OW 321
33867: PUSH
33868: LD_INT 2
33870: EQUAL
33871: ST_TO_ADDR
33872: GO 33875
33874: POP
// end ;
33875: LD_VAR 0 3
33879: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33880: LD_INT 0
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
// result := false ;
33893: LD_ADDR_VAR 0 6
33897: PUSH
33898: LD_INT 0
33900: ST_TO_ADDR
// if btype = b_depot then
33901: LD_VAR 0 2
33905: PUSH
33906: LD_INT 0
33908: EQUAL
33909: IFFALSE 33921
// begin result := true ;
33911: LD_ADDR_VAR 0 6
33915: PUSH
33916: LD_INT 1
33918: ST_TO_ADDR
// exit ;
33919: GO 34747
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33921: LD_VAR 0 1
33925: NOT
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 266
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: IN
33947: NOT
33948: OR
33949: PUSH
33950: LD_VAR 0 2
33954: NOT
33955: OR
33956: PUSH
33957: LD_VAR 0 5
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 4
33976: PUSH
33977: LD_INT 5
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: IN
33988: NOT
33989: OR
33990: PUSH
33991: LD_VAR 0 3
33995: PPUSH
33996: LD_VAR 0 4
34000: PPUSH
34001: CALL_OW 488
34005: NOT
34006: OR
34007: IFFALSE 34011
// exit ;
34009: GO 34747
// side := GetSide ( depot ) ;
34011: LD_ADDR_VAR 0 9
34015: PUSH
34016: LD_VAR 0 1
34020: PPUSH
34021: CALL_OW 255
34025: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34026: LD_VAR 0 9
34030: PPUSH
34031: LD_VAR 0 2
34035: PPUSH
34036: CALL 33504 0 2
34040: NOT
34041: IFFALSE 34045
// exit ;
34043: GO 34747
// pom := GetBase ( depot ) ;
34045: LD_ADDR_VAR 0 10
34049: PUSH
34050: LD_VAR 0 1
34054: PPUSH
34055: CALL_OW 274
34059: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34060: LD_ADDR_VAR 0 11
34064: PUSH
34065: LD_VAR 0 2
34069: PPUSH
34070: LD_VAR 0 1
34074: PPUSH
34075: CALL_OW 248
34079: PPUSH
34080: CALL_OW 450
34084: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34085: LD_VAR 0 10
34089: PPUSH
34090: LD_INT 1
34092: PPUSH
34093: CALL_OW 275
34097: PUSH
34098: LD_VAR 0 11
34102: PUSH
34103: LD_INT 1
34105: ARRAY
34106: GREATEREQUAL
34107: PUSH
34108: LD_VAR 0 10
34112: PPUSH
34113: LD_INT 2
34115: PPUSH
34116: CALL_OW 275
34120: PUSH
34121: LD_VAR 0 11
34125: PUSH
34126: LD_INT 2
34128: ARRAY
34129: GREATEREQUAL
34130: AND
34131: PUSH
34132: LD_VAR 0 10
34136: PPUSH
34137: LD_INT 3
34139: PPUSH
34140: CALL_OW 275
34144: PUSH
34145: LD_VAR 0 11
34149: PUSH
34150: LD_INT 3
34152: ARRAY
34153: GREATEREQUAL
34154: AND
34155: NOT
34156: IFFALSE 34160
// exit ;
34158: GO 34747
// if GetBType ( depot ) = b_depot then
34160: LD_VAR 0 1
34164: PPUSH
34165: CALL_OW 266
34169: PUSH
34170: LD_INT 0
34172: EQUAL
34173: IFFALSE 34185
// dist := 28 else
34175: LD_ADDR_VAR 0 14
34179: PUSH
34180: LD_INT 28
34182: ST_TO_ADDR
34183: GO 34193
// dist := 36 ;
34185: LD_ADDR_VAR 0 14
34189: PUSH
34190: LD_INT 36
34192: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34193: LD_VAR 0 1
34197: PPUSH
34198: LD_VAR 0 3
34202: PPUSH
34203: LD_VAR 0 4
34207: PPUSH
34208: CALL_OW 297
34212: PUSH
34213: LD_VAR 0 14
34217: GREATER
34218: IFFALSE 34222
// exit ;
34220: GO 34747
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34222: LD_ADDR_VAR 0 12
34226: PUSH
34227: LD_VAR 0 2
34231: PPUSH
34232: LD_VAR 0 3
34236: PPUSH
34237: LD_VAR 0 4
34241: PPUSH
34242: LD_VAR 0 5
34246: PPUSH
34247: LD_VAR 0 1
34251: PPUSH
34252: CALL_OW 248
34256: PPUSH
34257: LD_INT 0
34259: PPUSH
34260: CALL 34752 0 6
34264: ST_TO_ADDR
// if not hexes then
34265: LD_VAR 0 12
34269: NOT
34270: IFFALSE 34274
// exit ;
34272: GO 34747
// hex := GetHexInfo ( x , y ) ;
34274: LD_ADDR_VAR 0 15
34278: PUSH
34279: LD_VAR 0 3
34283: PPUSH
34284: LD_VAR 0 4
34288: PPUSH
34289: CALL_OW 546
34293: ST_TO_ADDR
// if hex [ 1 ] then
34294: LD_VAR 0 15
34298: PUSH
34299: LD_INT 1
34301: ARRAY
34302: IFFALSE 34306
// exit ;
34304: GO 34747
// height := hex [ 2 ] ;
34306: LD_ADDR_VAR 0 13
34310: PUSH
34311: LD_VAR 0 15
34315: PUSH
34316: LD_INT 2
34318: ARRAY
34319: ST_TO_ADDR
// for i = 1 to hexes do
34320: LD_ADDR_VAR 0 7
34324: PUSH
34325: DOUBLE
34326: LD_INT 1
34328: DEC
34329: ST_TO_ADDR
34330: LD_VAR 0 12
34334: PUSH
34335: FOR_TO
34336: IFFALSE 34666
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34338: LD_VAR 0 12
34342: PUSH
34343: LD_VAR 0 7
34347: ARRAY
34348: PUSH
34349: LD_INT 1
34351: ARRAY
34352: PPUSH
34353: LD_VAR 0 12
34357: PUSH
34358: LD_VAR 0 7
34362: ARRAY
34363: PUSH
34364: LD_INT 2
34366: ARRAY
34367: PPUSH
34368: CALL_OW 488
34372: NOT
34373: PUSH
34374: LD_VAR 0 12
34378: PUSH
34379: LD_VAR 0 7
34383: ARRAY
34384: PUSH
34385: LD_INT 1
34387: ARRAY
34388: PPUSH
34389: LD_VAR 0 12
34393: PUSH
34394: LD_VAR 0 7
34398: ARRAY
34399: PUSH
34400: LD_INT 2
34402: ARRAY
34403: PPUSH
34404: CALL_OW 428
34408: PUSH
34409: LD_INT 0
34411: GREATER
34412: OR
34413: PUSH
34414: LD_VAR 0 12
34418: PUSH
34419: LD_VAR 0 7
34423: ARRAY
34424: PUSH
34425: LD_INT 1
34427: ARRAY
34428: PPUSH
34429: LD_VAR 0 12
34433: PUSH
34434: LD_VAR 0 7
34438: ARRAY
34439: PUSH
34440: LD_INT 2
34442: ARRAY
34443: PPUSH
34444: CALL_OW 351
34448: OR
34449: IFFALSE 34455
// exit ;
34451: POP
34452: POP
34453: GO 34747
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34455: LD_ADDR_VAR 0 8
34459: PUSH
34460: LD_VAR 0 12
34464: PUSH
34465: LD_VAR 0 7
34469: ARRAY
34470: PUSH
34471: LD_INT 1
34473: ARRAY
34474: PPUSH
34475: LD_VAR 0 12
34479: PUSH
34480: LD_VAR 0 7
34484: ARRAY
34485: PUSH
34486: LD_INT 2
34488: ARRAY
34489: PPUSH
34490: CALL_OW 546
34494: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34495: LD_VAR 0 8
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: PUSH
34504: LD_VAR 0 8
34508: PUSH
34509: LD_INT 2
34511: ARRAY
34512: PUSH
34513: LD_VAR 0 13
34517: PUSH
34518: LD_INT 2
34520: PLUS
34521: GREATER
34522: OR
34523: PUSH
34524: LD_VAR 0 8
34528: PUSH
34529: LD_INT 2
34531: ARRAY
34532: PUSH
34533: LD_VAR 0 13
34537: PUSH
34538: LD_INT 2
34540: MINUS
34541: LESS
34542: OR
34543: PUSH
34544: LD_VAR 0 8
34548: PUSH
34549: LD_INT 3
34551: ARRAY
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: LD_INT 8
34558: PUSH
34559: LD_INT 9
34561: PUSH
34562: LD_INT 10
34564: PUSH
34565: LD_INT 11
34567: PUSH
34568: LD_INT 12
34570: PUSH
34571: LD_INT 13
34573: PUSH
34574: LD_INT 16
34576: PUSH
34577: LD_INT 17
34579: PUSH
34580: LD_INT 18
34582: PUSH
34583: LD_INT 19
34585: PUSH
34586: LD_INT 20
34588: PUSH
34589: LD_INT 21
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: IN
34607: NOT
34608: OR
34609: PUSH
34610: LD_VAR 0 8
34614: PUSH
34615: LD_INT 5
34617: ARRAY
34618: NOT
34619: OR
34620: PUSH
34621: LD_VAR 0 8
34625: PUSH
34626: LD_INT 6
34628: ARRAY
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: LD_INT 7
34638: PUSH
34639: LD_INT 9
34641: PUSH
34642: LD_INT 10
34644: PUSH
34645: LD_INT 11
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: IN
34656: NOT
34657: OR
34658: IFFALSE 34664
// exit ;
34660: POP
34661: POP
34662: GO 34747
// end ;
34664: GO 34335
34666: POP
34667: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34668: LD_VAR 0 9
34672: PPUSH
34673: LD_VAR 0 3
34677: PPUSH
34678: LD_VAR 0 4
34682: PPUSH
34683: LD_INT 20
34685: PPUSH
34686: CALL 26670 0 4
34690: PUSH
34691: LD_INT 4
34693: ARRAY
34694: IFFALSE 34698
// exit ;
34696: GO 34747
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34698: LD_VAR 0 2
34702: PUSH
34703: LD_INT 29
34705: PUSH
34706: LD_INT 30
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: IN
34713: PUSH
34714: LD_VAR 0 3
34718: PPUSH
34719: LD_VAR 0 4
34723: PPUSH
34724: LD_VAR 0 9
34728: PPUSH
34729: CALL_OW 440
34733: NOT
34734: AND
34735: IFFALSE 34739
// exit ;
34737: GO 34747
// result := true ;
34739: LD_ADDR_VAR 0 6
34743: PUSH
34744: LD_INT 1
34746: ST_TO_ADDR
// end ;
34747: LD_VAR 0 6
34751: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34752: LD_INT 0
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
34764: PPUSH
34765: PPUSH
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
34774: PPUSH
34775: PPUSH
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
34780: PPUSH
34781: PPUSH
34782: PPUSH
34783: PPUSH
34784: PPUSH
34785: PPUSH
34786: PPUSH
34787: PPUSH
34788: PPUSH
34789: PPUSH
34790: PPUSH
34791: PPUSH
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
34798: PPUSH
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
// result = [ ] ;
34812: LD_ADDR_VAR 0 7
34816: PUSH
34817: EMPTY
34818: ST_TO_ADDR
// temp_list = [ ] ;
34819: LD_ADDR_VAR 0 9
34823: PUSH
34824: EMPTY
34825: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34826: LD_VAR 0 4
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: LD_INT 4
34845: PUSH
34846: LD_INT 5
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: IN
34857: NOT
34858: PUSH
34859: LD_VAR 0 1
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: IN
34874: PUSH
34875: LD_VAR 0 5
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: LD_INT 3
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: IN
34894: NOT
34895: AND
34896: OR
34897: IFFALSE 34901
// exit ;
34899: GO 53292
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34901: LD_VAR 0 1
34905: PUSH
34906: LD_INT 6
34908: PUSH
34909: LD_INT 7
34911: PUSH
34912: LD_INT 8
34914: PUSH
34915: LD_INT 13
34917: PUSH
34918: LD_INT 12
34920: PUSH
34921: LD_INT 15
34923: PUSH
34924: LD_INT 11
34926: PUSH
34927: LD_INT 14
34929: PUSH
34930: LD_INT 10
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: IN
34944: IFFALSE 34954
// btype = b_lab ;
34946: LD_ADDR_VAR 0 1
34950: PUSH
34951: LD_INT 6
34953: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34954: LD_VAR 0 6
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: IN
34973: NOT
34974: PUSH
34975: LD_VAR 0 1
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 3
34991: PUSH
34992: LD_INT 6
34994: PUSH
34995: LD_INT 36
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: LD_INT 31
35006: PUSH
35007: LD_INT 32
35009: PUSH
35010: LD_INT 33
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: IN
35026: NOT
35027: PUSH
35028: LD_VAR 0 6
35032: PUSH
35033: LD_INT 1
35035: EQUAL
35036: AND
35037: OR
35038: PUSH
35039: LD_VAR 0 1
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 3
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: IN
35054: NOT
35055: PUSH
35056: LD_VAR 0 6
35060: PUSH
35061: LD_INT 2
35063: EQUAL
35064: AND
35065: OR
35066: IFFALSE 35076
// mode = 0 ;
35068: LD_ADDR_VAR 0 6
35072: PUSH
35073: LD_INT 0
35075: ST_TO_ADDR
// case mode of 0 :
35076: LD_VAR 0 6
35080: PUSH
35081: LD_INT 0
35083: DOUBLE
35084: EQUAL
35085: IFTRUE 35089
35087: GO 46542
35089: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35090: LD_ADDR_VAR 0 11
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 1
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: LD_INT 3
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35283: LD_ADDR_VAR 0 12
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: NEG
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 2
35429: NEG
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 3
35440: NEG
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 3
35451: NEG
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35479: LD_ADDR_VAR 0 13
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: LD_INT 3
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 3
35638: NEG
35639: PUSH
35640: LD_INT 2
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 3
35650: NEG
35651: PUSH
35652: LD_INT 3
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35678: LD_ADDR_VAR 0 14
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 2
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 2
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 2
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: LD_INT 2
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 3
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 3
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35874: LD_ADDR_VAR 0 15
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 2
35997: NEG
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 3
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 3
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36067: LD_ADDR_VAR 0 16
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: NEG
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 2
36202: NEG
36203: PUSH
36204: LD_INT 2
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 3
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 3
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 3
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36260: LD_ADDR_VAR 0 17
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 2
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 2
36436: NEG
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: LD_INT 2
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36490: LD_ADDR_VAR 0 18
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36720: LD_ADDR_VAR 0 19
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 2
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 2
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: LD_INT 2
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: LD_INT 2
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 2
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36950: LD_ADDR_VAR 0 20
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 2
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 2
37137: NEG
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: LD_INT 2
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37180: LD_ADDR_VAR 0 21
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 2
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 2
37367: NEG
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37410: LD_ADDR_VAR 0 22
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 2
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 2
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: LD_INT 2
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37640: LD_ADDR_VAR 0 23
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: LD_INT 2
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 2
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: NEG
37852: PUSH
37853: LD_INT 3
37855: NEG
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: NEG
37864: PUSH
37865: LD_INT 3
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 2
37878: NEG
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37920: LD_ADDR_VAR 0 24
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38196: LD_ADDR_VAR 0 25
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 3
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38470: LD_ADDR_VAR 0 26
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 2
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: LD_INT 3
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38746: LD_ADDR_VAR 0 27
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 1
38766: NEG
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: LD_INT 1
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: LD_INT 2
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: NEG
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: LD_INT 2
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 3
38979: NEG
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 3
38991: NEG
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39026: LD_ADDR_VAR 0 28
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: LD_INT 1
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 0
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: LD_INT 3
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 3
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 3
39261: NEG
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 3
39273: NEG
39274: PUSH
39275: LD_INT 2
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39308: LD_ADDR_VAR 0 29
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: NEG
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: NEG
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: LD_INT 3
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 3
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 3
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: NEG
39553: PUSH
39554: LD_INT 2
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39587: LD_ADDR_VAR 0 30
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 2
39683: NEG
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: LD_INT 3
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 3
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: LD_INT 3
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 3
39830: NEG
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39865: LD_ADDR_VAR 0 31
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 3
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: LD_INT 3
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 3
40108: NEG
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40143: LD_ADDR_VAR 0 32
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: NEG
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: LD_INT 3
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 3
40386: NEG
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40421: LD_ADDR_VAR 0 33
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: LD_INT 3
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 3
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 3
40665: NEG
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40700: LD_ADDR_VAR 0 34
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: LD_INT 3
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 2
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 3
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: LD_INT 3
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 3
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40980: LD_ADDR_VAR 0 35
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41092: LD_ADDR_VAR 0 36
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41204: LD_ADDR_VAR 0 37
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41316: LD_ADDR_VAR 0 38
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41428: LD_ADDR_VAR 0 39
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41540: LD_ADDR_VAR 0 40
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41652: LD_ADDR_VAR 0 41
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 2
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: LD_INT 2
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 3
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 3
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 3
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 3
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: NEG
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 3
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 3
41961: NEG
41962: PUSH
41963: LD_INT 3
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42002: LD_ADDR_VAR 0 42
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 2
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: LD_INT 3
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 3
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 3
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: LD_INT 3
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 3
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 3
42299: NEG
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 3
42311: NEG
42312: PUSH
42313: LD_INT 3
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42352: LD_ADDR_VAR 0 43
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 3
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 3
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42700: LD_ADDR_VAR 0 44
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 0
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: NEG
42891: PUSH
42892: LD_INT 3
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 3
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 3
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 3
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: PUSH
42954: LD_INT 3
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 3
42974: NEG
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 3
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 3
42997: NEG
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 3
43009: NEG
43010: PUSH
43011: LD_INT 3
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43050: LD_ADDR_VAR 0 45
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 1
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 2
43216: NEG
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: LD_INT 3
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: LD_INT 3
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 3
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 3
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: LD_INT 3
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 3
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43400: LD_ADDR_VAR 0 46
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 3
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 3
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 3
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 3
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 3
43696: NEG
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43748: LD_ADDR_VAR 0 47
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43899: LD_ADDR_VAR 0 48
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 2
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44046: LD_ADDR_VAR 0 49
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44190: LD_ADDR_VAR 0 50
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44334: LD_ADDR_VAR 0 51
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 2
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44481: LD_ADDR_VAR 0 52
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44632: LD_ADDR_VAR 0 53
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 2
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44862: LD_ADDR_VAR 0 54
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45092: LD_ADDR_VAR 0 55
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45322: LD_ADDR_VAR 0 56
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45552: LD_ADDR_VAR 0 57
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: LD_INT 2
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45782: LD_ADDR_VAR 0 58
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: LD_INT 2
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46012: LD_ADDR_VAR 0 59
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46100: LD_ADDR_VAR 0 60
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46188: LD_ADDR_VAR 0 61
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46276: LD_ADDR_VAR 0 62
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46364: LD_ADDR_VAR 0 63
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46452: LD_ADDR_VAR 0 64
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// end ; 1 :
46540: GO 52437
46542: LD_INT 1
46544: DOUBLE
46545: EQUAL
46546: IFTRUE 46550
46548: GO 49173
46550: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46551: LD_ADDR_VAR 0 11
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 3
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 3
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46595: LD_ADDR_VAR 0 12
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 3
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 3
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: LIST
46635: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46636: LD_ADDR_VAR 0 13
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 3
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46676: LD_ADDR_VAR 0 14
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: LD_INT 3
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: LIST
46716: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46717: LD_ADDR_VAR 0 15
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 3
46735: NEG
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 3
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46761: LD_ADDR_VAR 0 16
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 3
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 3
46792: NEG
46793: PUSH
46794: LD_INT 3
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46807: LD_ADDR_VAR 0 17
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 3
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 3
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46851: LD_ADDR_VAR 0 18
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 3
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46892: LD_ADDR_VAR 0 19
46896: PUSH
46897: LD_INT 3
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 3
46909: PUSH
46910: LD_INT 3
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 3
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46932: LD_ADDR_VAR 0 20
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46973: LD_ADDR_VAR 0 21
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 3
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47017: LD_ADDR_VAR 0 22
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: LD_INT 3
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: LD_INT 3
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47063: LD_ADDR_VAR 0 23
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 3
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 4
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: LIST
47106: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47107: LD_ADDR_VAR 0 24
47111: PUSH
47112: LD_INT 3
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 4
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: LIST
47147: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47148: LD_ADDR_VAR 0 25
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 4
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 3
47175: PUSH
47176: LD_INT 4
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47188: LD_ADDR_VAR 0 26
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 4
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: LIST
47228: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47229: LD_ADDR_VAR 0 27
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 3
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 4
47258: NEG
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: LIST
47272: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47273: LD_ADDR_VAR 0 28
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: LD_INT 3
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: NEG
47293: PUSH
47294: LD_INT 4
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 4
47304: NEG
47305: PUSH
47306: LD_INT 3
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47319: LD_ADDR_VAR 0 29
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 3
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 4
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 4
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: LD_INT 5
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 5
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 4
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 6
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 6
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 5
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47474: LD_ADDR_VAR 0 30
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 3
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 4
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 4
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 5
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 5
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 5
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 6
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 6
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47617: LD_ADDR_VAR 0 31
47621: PUSH
47622: LD_INT 3
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 4
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 4
47664: PUSH
47665: LD_INT 4
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 3
47674: PUSH
47675: LD_INT 4
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 5
47684: PUSH
47685: LD_INT 4
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 5
47694: PUSH
47695: LD_INT 5
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 4
47704: PUSH
47705: LD_INT 5
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 6
47714: PUSH
47715: LD_INT 5
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 6
47724: PUSH
47725: LD_INT 6
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 5
47734: PUSH
47735: LD_INT 6
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47756: LD_ADDR_VAR 0 32
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 3
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 4
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: LD_INT 5
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: LD_INT 5
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: LD_INT 4
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: LD_INT 6
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 6
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 5
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47899: LD_ADDR_VAR 0 33
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 3
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 3
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 3
47940: NEG
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 4
47951: NEG
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 4
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 4
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 5
47985: NEG
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 5
47996: NEG
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 5
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 6
48019: NEG
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 6
48030: NEG
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48054: LD_ADDR_VAR 0 34
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 3
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: NEG
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 3
48085: NEG
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 3
48097: NEG
48098: PUSH
48099: LD_INT 4
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 4
48109: NEG
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 4
48121: NEG
48122: PUSH
48123: LD_INT 4
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 4
48133: NEG
48134: PUSH
48135: LD_INT 5
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 5
48145: NEG
48146: PUSH
48147: LD_INT 4
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 5
48157: NEG
48158: PUSH
48159: LD_INT 5
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 5
48169: NEG
48170: PUSH
48171: LD_INT 6
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 6
48181: NEG
48182: PUSH
48183: LD_INT 5
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 6
48193: NEG
48194: PUSH
48195: LD_INT 6
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48217: LD_ADDR_VAR 0 41
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 2
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 3
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48261: LD_ADDR_VAR 0 42
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48302: LD_ADDR_VAR 0 43
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 3
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48342: LD_ADDR_VAR 0 44
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48383: LD_ADDR_VAR 0 45
48387: PUSH
48388: LD_INT 2
48390: NEG
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 3
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48427: LD_ADDR_VAR 0 46
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: LD_INT 2
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 3
48458: NEG
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48473: LD_ADDR_VAR 0 47
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: LD_INT 3
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: LD_INT 3
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48506: LD_ADDR_VAR 0 48
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48537: LD_ADDR_VAR 0 49
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48566: LD_ADDR_VAR 0 50
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 3
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48595: LD_ADDR_VAR 0 51
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: LD_INT 2
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48626: LD_ADDR_VAR 0 52
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 3
48645: NEG
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48659: LD_ADDR_VAR 0 53
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 3
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 3
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: LIST
48702: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48703: LD_ADDR_VAR 0 54
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48744: LD_ADDR_VAR 0 55
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 3
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48784: LD_ADDR_VAR 0 56
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48825: LD_ADDR_VAR 0 57
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 3
48843: NEG
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 3
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48869: LD_ADDR_VAR 0 58
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 3
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48915: LD_ADDR_VAR 0 59
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48959: LD_ADDR_VAR 0 60
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49000: LD_ADDR_VAR 0 61
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49040: LD_ADDR_VAR 0 62
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: LIST
49080: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49081: LD_ADDR_VAR 0 63
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: LIST
49124: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49125: LD_ADDR_VAR 0 64
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 2
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: ST_TO_ADDR
// end ; 2 :
49171: GO 52437
49173: LD_INT 2
49175: DOUBLE
49176: EQUAL
49177: IFTRUE 49181
49179: GO 52436
49181: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49182: LD_ADDR_VAR 0 29
49186: PUSH
49187: LD_INT 4
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 4
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 5
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 5
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 4
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 5
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 3
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 4
49302: PUSH
49303: LD_INT 3
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 4
49312: PUSH
49313: LD_INT 4
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 3
49322: PUSH
49323: LD_INT 4
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 4
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 4
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 4
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 4
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 5
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 5
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 4
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 5
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 3
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 3
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 4
49521: NEG
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 4
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 4
49544: NEG
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 4
49567: NEG
49568: PUSH
49569: LD_INT 4
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 4
49579: NEG
49580: PUSH
49581: LD_INT 5
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: LD_INT 4
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: LD_INT 3
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 4
49615: NEG
49616: PUSH
49617: LD_INT 3
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 5
49627: NEG
49628: PUSH
49629: LD_INT 4
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 5
49639: NEG
49640: PUSH
49641: LD_INT 5
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 5
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 5
49663: NEG
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49720: LD_ADDR_VAR 0 30
49724: PUSH
49725: LD_INT 4
49727: PUSH
49728: LD_INT 4
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 4
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 5
49747: PUSH
49748: LD_INT 4
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 5
49757: PUSH
49758: LD_INT 5
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 4
49767: PUSH
49768: LD_INT 5
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: LD_INT 4
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: PUSH
49788: LD_INT 3
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 5
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: LD_INT 5
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 4
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 4
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 4
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 4
49910: NEG
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 4
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 3
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 4
49955: NEG
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 5
49966: NEG
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 5
49977: NEG
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 5
49989: NEG
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 3
50001: NEG
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 3
50012: NEG
50013: PUSH
50014: LD_INT 3
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 3
50024: NEG
50025: PUSH
50026: LD_INT 4
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 4
50072: NEG
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 4
50084: NEG
50085: PUSH
50086: LD_INT 4
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: NEG
50097: PUSH
50098: LD_INT 4
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 4
50108: NEG
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 4
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 5
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 4
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: LD_INT 4
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 5
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 3
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: LD_INT 5
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50267: LD_ADDR_VAR 0 31
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 4
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 4
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 5
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 5
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 4
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 3
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 5
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 4
50423: NEG
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 4
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 4
50446: NEG
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 2
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 4
50469: NEG
50470: PUSH
50471: LD_INT 4
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 4
50481: NEG
50482: PUSH
50483: LD_INT 5
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: NEG
50494: PUSH
50495: LD_INT 4
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: LD_INT 3
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 4
50517: NEG
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 5
50529: NEG
50530: PUSH
50531: LD_INT 4
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 5
50541: NEG
50542: PUSH
50543: LD_INT 5
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: LD_INT 5
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 5
50565: NEG
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 4
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 3
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: LD_INT 4
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: LD_INT 4
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 4
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 4
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 5
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 5
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 4
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 5
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50817: LD_ADDR_VAR 0 32
50821: PUSH
50822: LD_INT 4
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 4
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 3
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 4
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 5
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 5
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 5
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: LD_INT 4
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 4
50986: NEG
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 4
50998: NEG
50999: PUSH
51000: LD_INT 4
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 4
51022: NEG
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 4
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 5
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 4
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 3
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 4
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 5
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: LD_INT 5
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 4
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 3
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 4
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 4
51229: PUSH
51230: LD_INT 4
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 4
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 5
51249: PUSH
51250: LD_INT 4
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 5
51259: PUSH
51260: LD_INT 5
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 4
51269: PUSH
51270: LD_INT 5
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: PUSH
51280: LD_INT 4
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 5
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: LD_INT 5
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51364: LD_ADDR_VAR 0 33
51368: PUSH
51369: LD_INT 4
51371: NEG
51372: PUSH
51373: LD_INT 4
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 4
51383: NEG
51384: PUSH
51385: LD_INT 5
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 3
51395: NEG
51396: PUSH
51397: LD_INT 4
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 4
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 5
51431: NEG
51432: PUSH
51433: LD_INT 4
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 5
51443: NEG
51444: PUSH
51445: LD_INT 5
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: NEG
51456: PUSH
51457: LD_INT 5
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 5
51467: NEG
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 4
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 3
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 4
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 2
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: LD_INT 4
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 4
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 5
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 5
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 4
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 3
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 5
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: LD_INT 2
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 4
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 4
51704: PUSH
51705: LD_INT 4
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: PUSH
51715: LD_INT 4
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: LD_INT 2
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 4
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 4
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 4
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 3
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 4
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 5
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 5
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 4
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: LD_INT 5
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 3
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51902: LD_ADDR_VAR 0 34
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 4
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 5
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 4
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 3
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 3
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 4
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 5
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 3
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: LD_INT 5
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 3
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 4
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 4
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 4
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 4
52104: PUSH
52105: LD_INT 4
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 4
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 5
52124: PUSH
52125: LD_INT 4
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 5
52134: PUSH
52135: LD_INT 5
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 4
52144: PUSH
52145: LD_INT 5
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 3
52154: PUSH
52155: LD_INT 4
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 5
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: LD_INT 5
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: LD_INT 2
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 4
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 4
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: LD_INT 4
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 4
52287: NEG
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 4
52298: NEG
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 4
52332: NEG
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 5
52343: NEG
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 5
52354: NEG
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 5
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: ST_TO_ADDR
// end ; end ;
52434: GO 52437
52436: POP
// case btype of b_depot , b_warehouse :
52437: LD_VAR 0 1
52441: PUSH
52442: LD_INT 0
52444: DOUBLE
52445: EQUAL
52446: IFTRUE 52456
52448: LD_INT 1
52450: DOUBLE
52451: EQUAL
52452: IFTRUE 52456
52454: GO 52657
52456: POP
// case nation of nation_american :
52457: LD_VAR 0 5
52461: PUSH
52462: LD_INT 1
52464: DOUBLE
52465: EQUAL
52466: IFTRUE 52470
52468: GO 52526
52470: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52471: LD_ADDR_VAR 0 9
52475: PUSH
52476: LD_VAR 0 11
52480: PUSH
52481: LD_VAR 0 12
52485: PUSH
52486: LD_VAR 0 13
52490: PUSH
52491: LD_VAR 0 14
52495: PUSH
52496: LD_VAR 0 15
52500: PUSH
52501: LD_VAR 0 16
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: PUSH
52514: LD_VAR 0 4
52518: PUSH
52519: LD_INT 1
52521: PLUS
52522: ARRAY
52523: ST_TO_ADDR
52524: GO 52655
52526: LD_INT 2
52528: DOUBLE
52529: EQUAL
52530: IFTRUE 52534
52532: GO 52590
52534: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52535: LD_ADDR_VAR 0 9
52539: PUSH
52540: LD_VAR 0 17
52544: PUSH
52545: LD_VAR 0 18
52549: PUSH
52550: LD_VAR 0 19
52554: PUSH
52555: LD_VAR 0 20
52559: PUSH
52560: LD_VAR 0 21
52564: PUSH
52565: LD_VAR 0 22
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: PUSH
52578: LD_VAR 0 4
52582: PUSH
52583: LD_INT 1
52585: PLUS
52586: ARRAY
52587: ST_TO_ADDR
52588: GO 52655
52590: LD_INT 3
52592: DOUBLE
52593: EQUAL
52594: IFTRUE 52598
52596: GO 52654
52598: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52599: LD_ADDR_VAR 0 9
52603: PUSH
52604: LD_VAR 0 23
52608: PUSH
52609: LD_VAR 0 24
52613: PUSH
52614: LD_VAR 0 25
52618: PUSH
52619: LD_VAR 0 26
52623: PUSH
52624: LD_VAR 0 27
52628: PUSH
52629: LD_VAR 0 28
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: PUSH
52642: LD_VAR 0 4
52646: PUSH
52647: LD_INT 1
52649: PLUS
52650: ARRAY
52651: ST_TO_ADDR
52652: GO 52655
52654: POP
52655: GO 53210
52657: LD_INT 2
52659: DOUBLE
52660: EQUAL
52661: IFTRUE 52671
52663: LD_INT 3
52665: DOUBLE
52666: EQUAL
52667: IFTRUE 52671
52669: GO 52727
52671: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52672: LD_ADDR_VAR 0 9
52676: PUSH
52677: LD_VAR 0 29
52681: PUSH
52682: LD_VAR 0 30
52686: PUSH
52687: LD_VAR 0 31
52691: PUSH
52692: LD_VAR 0 32
52696: PUSH
52697: LD_VAR 0 33
52701: PUSH
52702: LD_VAR 0 34
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: PUSH
52715: LD_VAR 0 4
52719: PUSH
52720: LD_INT 1
52722: PLUS
52723: ARRAY
52724: ST_TO_ADDR
52725: GO 53210
52727: LD_INT 16
52729: DOUBLE
52730: EQUAL
52731: IFTRUE 52789
52733: LD_INT 17
52735: DOUBLE
52736: EQUAL
52737: IFTRUE 52789
52739: LD_INT 18
52741: DOUBLE
52742: EQUAL
52743: IFTRUE 52789
52745: LD_INT 19
52747: DOUBLE
52748: EQUAL
52749: IFTRUE 52789
52751: LD_INT 22
52753: DOUBLE
52754: EQUAL
52755: IFTRUE 52789
52757: LD_INT 20
52759: DOUBLE
52760: EQUAL
52761: IFTRUE 52789
52763: LD_INT 21
52765: DOUBLE
52766: EQUAL
52767: IFTRUE 52789
52769: LD_INT 23
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52789
52775: LD_INT 24
52777: DOUBLE
52778: EQUAL
52779: IFTRUE 52789
52781: LD_INT 25
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52789
52787: GO 52845
52789: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52790: LD_ADDR_VAR 0 9
52794: PUSH
52795: LD_VAR 0 35
52799: PUSH
52800: LD_VAR 0 36
52804: PUSH
52805: LD_VAR 0 37
52809: PUSH
52810: LD_VAR 0 38
52814: PUSH
52815: LD_VAR 0 39
52819: PUSH
52820: LD_VAR 0 40
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: PUSH
52833: LD_VAR 0 4
52837: PUSH
52838: LD_INT 1
52840: PLUS
52841: ARRAY
52842: ST_TO_ADDR
52843: GO 53210
52845: LD_INT 6
52847: DOUBLE
52848: EQUAL
52849: IFTRUE 52901
52851: LD_INT 7
52853: DOUBLE
52854: EQUAL
52855: IFTRUE 52901
52857: LD_INT 8
52859: DOUBLE
52860: EQUAL
52861: IFTRUE 52901
52863: LD_INT 13
52865: DOUBLE
52866: EQUAL
52867: IFTRUE 52901
52869: LD_INT 12
52871: DOUBLE
52872: EQUAL
52873: IFTRUE 52901
52875: LD_INT 15
52877: DOUBLE
52878: EQUAL
52879: IFTRUE 52901
52881: LD_INT 11
52883: DOUBLE
52884: EQUAL
52885: IFTRUE 52901
52887: LD_INT 14
52889: DOUBLE
52890: EQUAL
52891: IFTRUE 52901
52893: LD_INT 10
52895: DOUBLE
52896: EQUAL
52897: IFTRUE 52901
52899: GO 52957
52901: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52902: LD_ADDR_VAR 0 9
52906: PUSH
52907: LD_VAR 0 41
52911: PUSH
52912: LD_VAR 0 42
52916: PUSH
52917: LD_VAR 0 43
52921: PUSH
52922: LD_VAR 0 44
52926: PUSH
52927: LD_VAR 0 45
52931: PUSH
52932: LD_VAR 0 46
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: PUSH
52945: LD_VAR 0 4
52949: PUSH
52950: LD_INT 1
52952: PLUS
52953: ARRAY
52954: ST_TO_ADDR
52955: GO 53210
52957: LD_INT 36
52959: DOUBLE
52960: EQUAL
52961: IFTRUE 52965
52963: GO 53021
52965: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52966: LD_ADDR_VAR 0 9
52970: PUSH
52971: LD_VAR 0 47
52975: PUSH
52976: LD_VAR 0 48
52980: PUSH
52981: LD_VAR 0 49
52985: PUSH
52986: LD_VAR 0 50
52990: PUSH
52991: LD_VAR 0 51
52995: PUSH
52996: LD_VAR 0 52
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: PUSH
53009: LD_VAR 0 4
53013: PUSH
53014: LD_INT 1
53016: PLUS
53017: ARRAY
53018: ST_TO_ADDR
53019: GO 53210
53021: LD_INT 4
53023: DOUBLE
53024: EQUAL
53025: IFTRUE 53047
53027: LD_INT 5
53029: DOUBLE
53030: EQUAL
53031: IFTRUE 53047
53033: LD_INT 34
53035: DOUBLE
53036: EQUAL
53037: IFTRUE 53047
53039: LD_INT 37
53041: DOUBLE
53042: EQUAL
53043: IFTRUE 53047
53045: GO 53103
53047: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53048: LD_ADDR_VAR 0 9
53052: PUSH
53053: LD_VAR 0 53
53057: PUSH
53058: LD_VAR 0 54
53062: PUSH
53063: LD_VAR 0 55
53067: PUSH
53068: LD_VAR 0 56
53072: PUSH
53073: LD_VAR 0 57
53077: PUSH
53078: LD_VAR 0 58
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: PUSH
53091: LD_VAR 0 4
53095: PUSH
53096: LD_INT 1
53098: PLUS
53099: ARRAY
53100: ST_TO_ADDR
53101: GO 53210
53103: LD_INT 31
53105: DOUBLE
53106: EQUAL
53107: IFTRUE 53153
53109: LD_INT 32
53111: DOUBLE
53112: EQUAL
53113: IFTRUE 53153
53115: LD_INT 33
53117: DOUBLE
53118: EQUAL
53119: IFTRUE 53153
53121: LD_INT 27
53123: DOUBLE
53124: EQUAL
53125: IFTRUE 53153
53127: LD_INT 26
53129: DOUBLE
53130: EQUAL
53131: IFTRUE 53153
53133: LD_INT 28
53135: DOUBLE
53136: EQUAL
53137: IFTRUE 53153
53139: LD_INT 29
53141: DOUBLE
53142: EQUAL
53143: IFTRUE 53153
53145: LD_INT 30
53147: DOUBLE
53148: EQUAL
53149: IFTRUE 53153
53151: GO 53209
53153: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53154: LD_ADDR_VAR 0 9
53158: PUSH
53159: LD_VAR 0 59
53163: PUSH
53164: LD_VAR 0 60
53168: PUSH
53169: LD_VAR 0 61
53173: PUSH
53174: LD_VAR 0 62
53178: PUSH
53179: LD_VAR 0 63
53183: PUSH
53184: LD_VAR 0 64
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: PUSH
53197: LD_VAR 0 4
53201: PUSH
53202: LD_INT 1
53204: PLUS
53205: ARRAY
53206: ST_TO_ADDR
53207: GO 53210
53209: POP
// temp_list2 = [ ] ;
53210: LD_ADDR_VAR 0 10
53214: PUSH
53215: EMPTY
53216: ST_TO_ADDR
// for i in temp_list do
53217: LD_ADDR_VAR 0 8
53221: PUSH
53222: LD_VAR 0 9
53226: PUSH
53227: FOR_IN
53228: IFFALSE 53280
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53230: LD_ADDR_VAR 0 10
53234: PUSH
53235: LD_VAR 0 10
53239: PUSH
53240: LD_VAR 0 8
53244: PUSH
53245: LD_INT 1
53247: ARRAY
53248: PUSH
53249: LD_VAR 0 2
53253: PLUS
53254: PUSH
53255: LD_VAR 0 8
53259: PUSH
53260: LD_INT 2
53262: ARRAY
53263: PUSH
53264: LD_VAR 0 3
53268: PLUS
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: EMPTY
53275: LIST
53276: ADD
53277: ST_TO_ADDR
53278: GO 53227
53280: POP
53281: POP
// result = temp_list2 ;
53282: LD_ADDR_VAR 0 7
53286: PUSH
53287: LD_VAR 0 10
53291: ST_TO_ADDR
// end ;
53292: LD_VAR 0 7
53296: RET
// export function EnemyInRange ( unit , dist ) ; begin
53297: LD_INT 0
53299: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53300: LD_ADDR_VAR 0 3
53304: PUSH
53305: LD_VAR 0 1
53309: PPUSH
53310: CALL_OW 255
53314: PPUSH
53315: LD_VAR 0 1
53319: PPUSH
53320: CALL_OW 250
53324: PPUSH
53325: LD_VAR 0 1
53329: PPUSH
53330: CALL_OW 251
53334: PPUSH
53335: LD_VAR 0 2
53339: PPUSH
53340: CALL 26670 0 4
53344: PUSH
53345: LD_INT 4
53347: ARRAY
53348: ST_TO_ADDR
// end ;
53349: LD_VAR 0 3
53353: RET
// export function PlayerSeeMe ( unit ) ; begin
53354: LD_INT 0
53356: PPUSH
// result := See ( your_side , unit ) ;
53357: LD_ADDR_VAR 0 2
53361: PUSH
53362: LD_OWVAR 2
53366: PPUSH
53367: LD_VAR 0 1
53371: PPUSH
53372: CALL_OW 292
53376: ST_TO_ADDR
// end ;
53377: LD_VAR 0 2
53381: RET
// export function ReverseDir ( unit ) ; begin
53382: LD_INT 0
53384: PPUSH
// if not unit then
53385: LD_VAR 0 1
53389: NOT
53390: IFFALSE 53394
// exit ;
53392: GO 53417
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53394: LD_ADDR_VAR 0 2
53398: PUSH
53399: LD_VAR 0 1
53403: PPUSH
53404: CALL_OW 254
53408: PUSH
53409: LD_INT 3
53411: PLUS
53412: PUSH
53413: LD_INT 6
53415: MOD
53416: ST_TO_ADDR
// end ;
53417: LD_VAR 0 2
53421: RET
// export function ReverseArray ( array ) ; var i ; begin
53422: LD_INT 0
53424: PPUSH
53425: PPUSH
// if not array then
53426: LD_VAR 0 1
53430: NOT
53431: IFFALSE 53435
// exit ;
53433: GO 53490
// result := [ ] ;
53435: LD_ADDR_VAR 0 2
53439: PUSH
53440: EMPTY
53441: ST_TO_ADDR
// for i := array downto 1 do
53442: LD_ADDR_VAR 0 3
53446: PUSH
53447: DOUBLE
53448: LD_VAR 0 1
53452: INC
53453: ST_TO_ADDR
53454: LD_INT 1
53456: PUSH
53457: FOR_DOWNTO
53458: IFFALSE 53488
// result := Join ( result , array [ i ] ) ;
53460: LD_ADDR_VAR 0 2
53464: PUSH
53465: LD_VAR 0 2
53469: PPUSH
53470: LD_VAR 0 1
53474: PUSH
53475: LD_VAR 0 3
53479: ARRAY
53480: PPUSH
53481: CALL 58146 0 2
53485: ST_TO_ADDR
53486: GO 53457
53488: POP
53489: POP
// end ;
53490: LD_VAR 0 2
53494: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53495: LD_INT 0
53497: PPUSH
53498: PPUSH
53499: PPUSH
53500: PPUSH
53501: PPUSH
53502: PPUSH
// if not unit or not hexes then
53503: LD_VAR 0 1
53507: NOT
53508: PUSH
53509: LD_VAR 0 2
53513: NOT
53514: OR
53515: IFFALSE 53519
// exit ;
53517: GO 53642
// dist := 9999 ;
53519: LD_ADDR_VAR 0 5
53523: PUSH
53524: LD_INT 9999
53526: ST_TO_ADDR
// for i = 1 to hexes do
53527: LD_ADDR_VAR 0 4
53531: PUSH
53532: DOUBLE
53533: LD_INT 1
53535: DEC
53536: ST_TO_ADDR
53537: LD_VAR 0 2
53541: PUSH
53542: FOR_TO
53543: IFFALSE 53630
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53545: LD_ADDR_VAR 0 6
53549: PUSH
53550: LD_VAR 0 1
53554: PPUSH
53555: LD_VAR 0 2
53559: PUSH
53560: LD_VAR 0 4
53564: ARRAY
53565: PUSH
53566: LD_INT 1
53568: ARRAY
53569: PPUSH
53570: LD_VAR 0 2
53574: PUSH
53575: LD_VAR 0 4
53579: ARRAY
53580: PUSH
53581: LD_INT 2
53583: ARRAY
53584: PPUSH
53585: CALL_OW 297
53589: ST_TO_ADDR
// if tdist < dist then
53590: LD_VAR 0 6
53594: PUSH
53595: LD_VAR 0 5
53599: LESS
53600: IFFALSE 53628
// begin hex := hexes [ i ] ;
53602: LD_ADDR_VAR 0 8
53606: PUSH
53607: LD_VAR 0 2
53611: PUSH
53612: LD_VAR 0 4
53616: ARRAY
53617: ST_TO_ADDR
// dist := tdist ;
53618: LD_ADDR_VAR 0 5
53622: PUSH
53623: LD_VAR 0 6
53627: ST_TO_ADDR
// end ; end ;
53628: GO 53542
53630: POP
53631: POP
// result := hex ;
53632: LD_ADDR_VAR 0 3
53636: PUSH
53637: LD_VAR 0 8
53641: ST_TO_ADDR
// end ;
53642: LD_VAR 0 3
53646: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53647: LD_INT 0
53649: PPUSH
53650: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53651: LD_VAR 0 1
53655: NOT
53656: PUSH
53657: LD_VAR 0 1
53661: PUSH
53662: LD_INT 21
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 23
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PPUSH
53686: CALL_OW 69
53690: IN
53691: NOT
53692: OR
53693: IFFALSE 53697
// exit ;
53695: GO 53744
// for i = 1 to 3 do
53697: LD_ADDR_VAR 0 3
53701: PUSH
53702: DOUBLE
53703: LD_INT 1
53705: DEC
53706: ST_TO_ADDR
53707: LD_INT 3
53709: PUSH
53710: FOR_TO
53711: IFFALSE 53742
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53713: LD_VAR 0 1
53717: PPUSH
53718: CALL_OW 250
53722: PPUSH
53723: LD_VAR 0 1
53727: PPUSH
53728: CALL_OW 251
53732: PPUSH
53733: LD_INT 1
53735: PPUSH
53736: CALL_OW 453
53740: GO 53710
53742: POP
53743: POP
// end ;
53744: LD_VAR 0 2
53748: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53749: LD_INT 0
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
53755: PPUSH
53756: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53757: LD_VAR 0 1
53761: NOT
53762: PUSH
53763: LD_VAR 0 2
53767: NOT
53768: OR
53769: PUSH
53770: LD_VAR 0 1
53774: PPUSH
53775: CALL_OW 314
53779: OR
53780: IFFALSE 53784
// exit ;
53782: GO 54251
// if GetLives ( i ) < 250 then
53784: LD_VAR 0 4
53788: PPUSH
53789: CALL_OW 256
53793: PUSH
53794: LD_INT 250
53796: LESS
53797: IFFALSE 53810
// begin ComAutodestruct ( i ) ;
53799: LD_VAR 0 4
53803: PPUSH
53804: CALL 53647 0 1
// exit ;
53808: GO 54251
// end ; x := GetX ( enemy_unit ) ;
53810: LD_ADDR_VAR 0 7
53814: PUSH
53815: LD_VAR 0 2
53819: PPUSH
53820: CALL_OW 250
53824: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53825: LD_ADDR_VAR 0 8
53829: PUSH
53830: LD_VAR 0 2
53834: PPUSH
53835: CALL_OW 251
53839: ST_TO_ADDR
// if not x or not y then
53840: LD_VAR 0 7
53844: NOT
53845: PUSH
53846: LD_VAR 0 8
53850: NOT
53851: OR
53852: IFFALSE 53856
// exit ;
53854: GO 54251
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53856: LD_ADDR_VAR 0 6
53860: PUSH
53861: LD_VAR 0 7
53865: PPUSH
53866: LD_INT 0
53868: PPUSH
53869: LD_INT 4
53871: PPUSH
53872: CALL_OW 272
53876: PUSH
53877: LD_VAR 0 8
53881: PPUSH
53882: LD_INT 0
53884: PPUSH
53885: LD_INT 4
53887: PPUSH
53888: CALL_OW 273
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_VAR 0 7
53901: PPUSH
53902: LD_INT 1
53904: PPUSH
53905: LD_INT 4
53907: PPUSH
53908: CALL_OW 272
53912: PUSH
53913: LD_VAR 0 8
53917: PPUSH
53918: LD_INT 1
53920: PPUSH
53921: LD_INT 4
53923: PPUSH
53924: CALL_OW 273
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_VAR 0 7
53937: PPUSH
53938: LD_INT 2
53940: PPUSH
53941: LD_INT 4
53943: PPUSH
53944: CALL_OW 272
53948: PUSH
53949: LD_VAR 0 8
53953: PPUSH
53954: LD_INT 2
53956: PPUSH
53957: LD_INT 4
53959: PPUSH
53960: CALL_OW 273
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_VAR 0 7
53973: PPUSH
53974: LD_INT 3
53976: PPUSH
53977: LD_INT 4
53979: PPUSH
53980: CALL_OW 272
53984: PUSH
53985: LD_VAR 0 8
53989: PPUSH
53990: LD_INT 3
53992: PPUSH
53993: LD_INT 4
53995: PPUSH
53996: CALL_OW 273
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_VAR 0 7
54009: PPUSH
54010: LD_INT 4
54012: PPUSH
54013: LD_INT 4
54015: PPUSH
54016: CALL_OW 272
54020: PUSH
54021: LD_VAR 0 8
54025: PPUSH
54026: LD_INT 4
54028: PPUSH
54029: LD_INT 4
54031: PPUSH
54032: CALL_OW 273
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_VAR 0 7
54045: PPUSH
54046: LD_INT 5
54048: PPUSH
54049: LD_INT 4
54051: PPUSH
54052: CALL_OW 272
54056: PUSH
54057: LD_VAR 0 8
54061: PPUSH
54062: LD_INT 5
54064: PPUSH
54065: LD_INT 4
54067: PPUSH
54068: CALL_OW 273
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// for i = tmp downto 1 do
54085: LD_ADDR_VAR 0 4
54089: PUSH
54090: DOUBLE
54091: LD_VAR 0 6
54095: INC
54096: ST_TO_ADDR
54097: LD_INT 1
54099: PUSH
54100: FOR_DOWNTO
54101: IFFALSE 54202
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54103: LD_VAR 0 6
54107: PUSH
54108: LD_VAR 0 4
54112: ARRAY
54113: PUSH
54114: LD_INT 1
54116: ARRAY
54117: PPUSH
54118: LD_VAR 0 6
54122: PUSH
54123: LD_VAR 0 4
54127: ARRAY
54128: PUSH
54129: LD_INT 2
54131: ARRAY
54132: PPUSH
54133: CALL_OW 488
54137: NOT
54138: PUSH
54139: LD_VAR 0 6
54143: PUSH
54144: LD_VAR 0 4
54148: ARRAY
54149: PUSH
54150: LD_INT 1
54152: ARRAY
54153: PPUSH
54154: LD_VAR 0 6
54158: PUSH
54159: LD_VAR 0 4
54163: ARRAY
54164: PUSH
54165: LD_INT 2
54167: ARRAY
54168: PPUSH
54169: CALL_OW 428
54173: PUSH
54174: LD_INT 0
54176: NONEQUAL
54177: OR
54178: IFFALSE 54200
// tmp := Delete ( tmp , i ) ;
54180: LD_ADDR_VAR 0 6
54184: PUSH
54185: LD_VAR 0 6
54189: PPUSH
54190: LD_VAR 0 4
54194: PPUSH
54195: CALL_OW 3
54199: ST_TO_ADDR
54200: GO 54100
54202: POP
54203: POP
// j := GetClosestHex ( unit , tmp ) ;
54204: LD_ADDR_VAR 0 5
54208: PUSH
54209: LD_VAR 0 1
54213: PPUSH
54214: LD_VAR 0 6
54218: PPUSH
54219: CALL 53495 0 2
54223: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54224: LD_VAR 0 1
54228: PPUSH
54229: LD_VAR 0 5
54233: PUSH
54234: LD_INT 1
54236: ARRAY
54237: PPUSH
54238: LD_VAR 0 5
54242: PUSH
54243: LD_INT 2
54245: ARRAY
54246: PPUSH
54247: CALL_OW 111
// end ;
54251: LD_VAR 0 3
54255: RET
// export function PrepareApemanSoldier ( ) ; begin
54256: LD_INT 0
54258: PPUSH
// uc_nation := 0 ;
54259: LD_ADDR_OWVAR 21
54263: PUSH
54264: LD_INT 0
54266: ST_TO_ADDR
// hc_sex := sex_male ;
54267: LD_ADDR_OWVAR 27
54271: PUSH
54272: LD_INT 1
54274: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54275: LD_ADDR_OWVAR 28
54279: PUSH
54280: LD_INT 15
54282: ST_TO_ADDR
// hc_gallery :=  ;
54283: LD_ADDR_OWVAR 33
54287: PUSH
54288: LD_STRING 
54290: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54291: LD_ADDR_OWVAR 31
54295: PUSH
54296: LD_INT 0
54298: PPUSH
54299: LD_INT 3
54301: PPUSH
54302: CALL_OW 12
54306: PUSH
54307: LD_INT 0
54309: PPUSH
54310: LD_INT 3
54312: PPUSH
54313: CALL_OW 12
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: ST_TO_ADDR
// end ;
54330: LD_VAR 0 1
54334: RET
// export function PrepareApemanEngineer ( ) ; begin
54335: LD_INT 0
54337: PPUSH
// uc_nation := 0 ;
54338: LD_ADDR_OWVAR 21
54342: PUSH
54343: LD_INT 0
54345: ST_TO_ADDR
// hc_sex := sex_male ;
54346: LD_ADDR_OWVAR 27
54350: PUSH
54351: LD_INT 1
54353: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54354: LD_ADDR_OWVAR 28
54358: PUSH
54359: LD_INT 16
54361: ST_TO_ADDR
// hc_gallery :=  ;
54362: LD_ADDR_OWVAR 33
54366: PUSH
54367: LD_STRING 
54369: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54370: LD_ADDR_OWVAR 31
54374: PUSH
54375: LD_INT 0
54377: PPUSH
54378: LD_INT 3
54380: PPUSH
54381: CALL_OW 12
54385: PUSH
54386: LD_INT 0
54388: PPUSH
54389: LD_INT 3
54391: PPUSH
54392: CALL_OW 12
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// end ;
54409: LD_VAR 0 1
54413: RET
// export function PrepareApeman ( agressivity ) ; begin
54414: LD_INT 0
54416: PPUSH
// uc_side := 0 ;
54417: LD_ADDR_OWVAR 20
54421: PUSH
54422: LD_INT 0
54424: ST_TO_ADDR
// uc_nation := 0 ;
54425: LD_ADDR_OWVAR 21
54429: PUSH
54430: LD_INT 0
54432: ST_TO_ADDR
// hc_sex := sex_male ;
54433: LD_ADDR_OWVAR 27
54437: PUSH
54438: LD_INT 1
54440: ST_TO_ADDR
// hc_class := class_apeman ;
54441: LD_ADDR_OWVAR 28
54445: PUSH
54446: LD_INT 12
54448: ST_TO_ADDR
// hc_gallery :=  ;
54449: LD_ADDR_OWVAR 33
54453: PUSH
54454: LD_STRING 
54456: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54457: LD_ADDR_OWVAR 35
54461: PUSH
54462: LD_VAR 0 1
54466: NEG
54467: PPUSH
54468: LD_VAR 0 1
54472: PPUSH
54473: CALL_OW 12
54477: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54478: LD_ADDR_OWVAR 31
54482: PUSH
54483: LD_INT 0
54485: PPUSH
54486: LD_INT 3
54488: PPUSH
54489: CALL_OW 12
54493: PUSH
54494: LD_INT 0
54496: PPUSH
54497: LD_INT 3
54499: PPUSH
54500: CALL_OW 12
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// end ;
54517: LD_VAR 0 2
54521: RET
// export function PrepareTiger ( agressivity ) ; begin
54522: LD_INT 0
54524: PPUSH
// uc_side := 0 ;
54525: LD_ADDR_OWVAR 20
54529: PUSH
54530: LD_INT 0
54532: ST_TO_ADDR
// uc_nation := 0 ;
54533: LD_ADDR_OWVAR 21
54537: PUSH
54538: LD_INT 0
54540: ST_TO_ADDR
// hc_class := class_tiger ;
54541: LD_ADDR_OWVAR 28
54545: PUSH
54546: LD_INT 14
54548: ST_TO_ADDR
// hc_gallery :=  ;
54549: LD_ADDR_OWVAR 33
54553: PUSH
54554: LD_STRING 
54556: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54557: LD_ADDR_OWVAR 35
54561: PUSH
54562: LD_VAR 0 1
54566: NEG
54567: PPUSH
54568: LD_VAR 0 1
54572: PPUSH
54573: CALL_OW 12
54577: ST_TO_ADDR
// end ;
54578: LD_VAR 0 2
54582: RET
// export function PrepareEnchidna ( ) ; begin
54583: LD_INT 0
54585: PPUSH
// uc_side := 0 ;
54586: LD_ADDR_OWVAR 20
54590: PUSH
54591: LD_INT 0
54593: ST_TO_ADDR
// uc_nation := 0 ;
54594: LD_ADDR_OWVAR 21
54598: PUSH
54599: LD_INT 0
54601: ST_TO_ADDR
// hc_class := class_baggie ;
54602: LD_ADDR_OWVAR 28
54606: PUSH
54607: LD_INT 13
54609: ST_TO_ADDR
// hc_gallery :=  ;
54610: LD_ADDR_OWVAR 33
54614: PUSH
54615: LD_STRING 
54617: ST_TO_ADDR
// end ;
54618: LD_VAR 0 1
54622: RET
// export function PrepareFrog ( ) ; begin
54623: LD_INT 0
54625: PPUSH
// uc_side := 0 ;
54626: LD_ADDR_OWVAR 20
54630: PUSH
54631: LD_INT 0
54633: ST_TO_ADDR
// uc_nation := 0 ;
54634: LD_ADDR_OWVAR 21
54638: PUSH
54639: LD_INT 0
54641: ST_TO_ADDR
// hc_class := class_frog ;
54642: LD_ADDR_OWVAR 28
54646: PUSH
54647: LD_INT 19
54649: ST_TO_ADDR
// hc_gallery :=  ;
54650: LD_ADDR_OWVAR 33
54654: PUSH
54655: LD_STRING 
54657: ST_TO_ADDR
// end ;
54658: LD_VAR 0 1
54662: RET
// export function PrepareFish ( ) ; begin
54663: LD_INT 0
54665: PPUSH
// uc_side := 0 ;
54666: LD_ADDR_OWVAR 20
54670: PUSH
54671: LD_INT 0
54673: ST_TO_ADDR
// uc_nation := 0 ;
54674: LD_ADDR_OWVAR 21
54678: PUSH
54679: LD_INT 0
54681: ST_TO_ADDR
// hc_class := class_fish ;
54682: LD_ADDR_OWVAR 28
54686: PUSH
54687: LD_INT 20
54689: ST_TO_ADDR
// hc_gallery :=  ;
54690: LD_ADDR_OWVAR 33
54694: PUSH
54695: LD_STRING 
54697: ST_TO_ADDR
// end ;
54698: LD_VAR 0 1
54702: RET
// export function PrepareBird ( ) ; begin
54703: LD_INT 0
54705: PPUSH
// uc_side := 0 ;
54706: LD_ADDR_OWVAR 20
54710: PUSH
54711: LD_INT 0
54713: ST_TO_ADDR
// uc_nation := 0 ;
54714: LD_ADDR_OWVAR 21
54718: PUSH
54719: LD_INT 0
54721: ST_TO_ADDR
// hc_class := class_phororhacos ;
54722: LD_ADDR_OWVAR 28
54726: PUSH
54727: LD_INT 18
54729: ST_TO_ADDR
// hc_gallery :=  ;
54730: LD_ADDR_OWVAR 33
54734: PUSH
54735: LD_STRING 
54737: ST_TO_ADDR
// end ;
54738: LD_VAR 0 1
54742: RET
// export function PrepareHorse ( ) ; begin
54743: LD_INT 0
54745: PPUSH
// uc_side := 0 ;
54746: LD_ADDR_OWVAR 20
54750: PUSH
54751: LD_INT 0
54753: ST_TO_ADDR
// uc_nation := 0 ;
54754: LD_ADDR_OWVAR 21
54758: PUSH
54759: LD_INT 0
54761: ST_TO_ADDR
// hc_class := class_horse ;
54762: LD_ADDR_OWVAR 28
54766: PUSH
54767: LD_INT 21
54769: ST_TO_ADDR
// hc_gallery :=  ;
54770: LD_ADDR_OWVAR 33
54774: PUSH
54775: LD_STRING 
54777: ST_TO_ADDR
// end ;
54778: LD_VAR 0 1
54782: RET
// export function PrepareMastodont ( ) ; begin
54783: LD_INT 0
54785: PPUSH
// uc_side := 0 ;
54786: LD_ADDR_OWVAR 20
54790: PUSH
54791: LD_INT 0
54793: ST_TO_ADDR
// uc_nation := 0 ;
54794: LD_ADDR_OWVAR 21
54798: PUSH
54799: LD_INT 0
54801: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54802: LD_ADDR_OWVAR 37
54806: PUSH
54807: LD_INT 31
54809: ST_TO_ADDR
// vc_control := control_rider ;
54810: LD_ADDR_OWVAR 38
54814: PUSH
54815: LD_INT 4
54817: ST_TO_ADDR
// end ;
54818: LD_VAR 0 1
54822: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54823: LD_INT 0
54825: PPUSH
54826: PPUSH
54827: PPUSH
// uc_side = 0 ;
54828: LD_ADDR_OWVAR 20
54832: PUSH
54833: LD_INT 0
54835: ST_TO_ADDR
// uc_nation = 0 ;
54836: LD_ADDR_OWVAR 21
54840: PUSH
54841: LD_INT 0
54843: ST_TO_ADDR
// InitHc_All ( ) ;
54844: CALL_OW 584
// InitVc ;
54848: CALL_OW 20
// if mastodonts then
54852: LD_VAR 0 6
54856: IFFALSE 54923
// for i = 1 to mastodonts do
54858: LD_ADDR_VAR 0 11
54862: PUSH
54863: DOUBLE
54864: LD_INT 1
54866: DEC
54867: ST_TO_ADDR
54868: LD_VAR 0 6
54872: PUSH
54873: FOR_TO
54874: IFFALSE 54921
// begin vc_chassis := 31 ;
54876: LD_ADDR_OWVAR 37
54880: PUSH
54881: LD_INT 31
54883: ST_TO_ADDR
// vc_control := control_rider ;
54884: LD_ADDR_OWVAR 38
54888: PUSH
54889: LD_INT 4
54891: ST_TO_ADDR
// animal := CreateVehicle ;
54892: LD_ADDR_VAR 0 12
54896: PUSH
54897: CALL_OW 45
54901: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54902: LD_VAR 0 12
54906: PPUSH
54907: LD_VAR 0 8
54911: PPUSH
54912: LD_INT 0
54914: PPUSH
54915: CALL 57051 0 3
// end ;
54919: GO 54873
54921: POP
54922: POP
// if horses then
54923: LD_VAR 0 5
54927: IFFALSE 54994
// for i = 1 to horses do
54929: LD_ADDR_VAR 0 11
54933: PUSH
54934: DOUBLE
54935: LD_INT 1
54937: DEC
54938: ST_TO_ADDR
54939: LD_VAR 0 5
54943: PUSH
54944: FOR_TO
54945: IFFALSE 54992
// begin hc_class := 21 ;
54947: LD_ADDR_OWVAR 28
54951: PUSH
54952: LD_INT 21
54954: ST_TO_ADDR
// hc_gallery :=  ;
54955: LD_ADDR_OWVAR 33
54959: PUSH
54960: LD_STRING 
54962: ST_TO_ADDR
// animal := CreateHuman ;
54963: LD_ADDR_VAR 0 12
54967: PUSH
54968: CALL_OW 44
54972: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54973: LD_VAR 0 12
54977: PPUSH
54978: LD_VAR 0 8
54982: PPUSH
54983: LD_INT 0
54985: PPUSH
54986: CALL 57051 0 3
// end ;
54990: GO 54944
54992: POP
54993: POP
// if birds then
54994: LD_VAR 0 1
54998: IFFALSE 55065
// for i = 1 to birds do
55000: LD_ADDR_VAR 0 11
55004: PUSH
55005: DOUBLE
55006: LD_INT 1
55008: DEC
55009: ST_TO_ADDR
55010: LD_VAR 0 1
55014: PUSH
55015: FOR_TO
55016: IFFALSE 55063
// begin hc_class := 18 ;
55018: LD_ADDR_OWVAR 28
55022: PUSH
55023: LD_INT 18
55025: ST_TO_ADDR
// hc_gallery =  ;
55026: LD_ADDR_OWVAR 33
55030: PUSH
55031: LD_STRING 
55033: ST_TO_ADDR
// animal := CreateHuman ;
55034: LD_ADDR_VAR 0 12
55038: PUSH
55039: CALL_OW 44
55043: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55044: LD_VAR 0 12
55048: PPUSH
55049: LD_VAR 0 8
55053: PPUSH
55054: LD_INT 0
55056: PPUSH
55057: CALL 57051 0 3
// end ;
55061: GO 55015
55063: POP
55064: POP
// if tigers then
55065: LD_VAR 0 2
55069: IFFALSE 55153
// for i = 1 to tigers do
55071: LD_ADDR_VAR 0 11
55075: PUSH
55076: DOUBLE
55077: LD_INT 1
55079: DEC
55080: ST_TO_ADDR
55081: LD_VAR 0 2
55085: PUSH
55086: FOR_TO
55087: IFFALSE 55151
// begin hc_class = class_tiger ;
55089: LD_ADDR_OWVAR 28
55093: PUSH
55094: LD_INT 14
55096: ST_TO_ADDR
// hc_gallery =  ;
55097: LD_ADDR_OWVAR 33
55101: PUSH
55102: LD_STRING 
55104: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55105: LD_ADDR_OWVAR 35
55109: PUSH
55110: LD_INT 7
55112: NEG
55113: PPUSH
55114: LD_INT 7
55116: PPUSH
55117: CALL_OW 12
55121: ST_TO_ADDR
// animal := CreateHuman ;
55122: LD_ADDR_VAR 0 12
55126: PUSH
55127: CALL_OW 44
55131: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55132: LD_VAR 0 12
55136: PPUSH
55137: LD_VAR 0 8
55141: PPUSH
55142: LD_INT 0
55144: PPUSH
55145: CALL 57051 0 3
// end ;
55149: GO 55086
55151: POP
55152: POP
// if apemans then
55153: LD_VAR 0 3
55157: IFFALSE 55280
// for i = 1 to apemans do
55159: LD_ADDR_VAR 0 11
55163: PUSH
55164: DOUBLE
55165: LD_INT 1
55167: DEC
55168: ST_TO_ADDR
55169: LD_VAR 0 3
55173: PUSH
55174: FOR_TO
55175: IFFALSE 55278
// begin hc_class = class_apeman ;
55177: LD_ADDR_OWVAR 28
55181: PUSH
55182: LD_INT 12
55184: ST_TO_ADDR
// hc_gallery =  ;
55185: LD_ADDR_OWVAR 33
55189: PUSH
55190: LD_STRING 
55192: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55193: LD_ADDR_OWVAR 35
55197: PUSH
55198: LD_INT 2
55200: NEG
55201: PPUSH
55202: LD_INT 2
55204: PPUSH
55205: CALL_OW 12
55209: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55210: LD_ADDR_OWVAR 31
55214: PUSH
55215: LD_INT 1
55217: PPUSH
55218: LD_INT 3
55220: PPUSH
55221: CALL_OW 12
55225: PUSH
55226: LD_INT 1
55228: PPUSH
55229: LD_INT 3
55231: PPUSH
55232: CALL_OW 12
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// animal := CreateHuman ;
55249: LD_ADDR_VAR 0 12
55253: PUSH
55254: CALL_OW 44
55258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55259: LD_VAR 0 12
55263: PPUSH
55264: LD_VAR 0 8
55268: PPUSH
55269: LD_INT 0
55271: PPUSH
55272: CALL 57051 0 3
// end ;
55276: GO 55174
55278: POP
55279: POP
// if enchidnas then
55280: LD_VAR 0 4
55284: IFFALSE 55351
// for i = 1 to enchidnas do
55286: LD_ADDR_VAR 0 11
55290: PUSH
55291: DOUBLE
55292: LD_INT 1
55294: DEC
55295: ST_TO_ADDR
55296: LD_VAR 0 4
55300: PUSH
55301: FOR_TO
55302: IFFALSE 55349
// begin hc_class = 13 ;
55304: LD_ADDR_OWVAR 28
55308: PUSH
55309: LD_INT 13
55311: ST_TO_ADDR
// hc_gallery =  ;
55312: LD_ADDR_OWVAR 33
55316: PUSH
55317: LD_STRING 
55319: ST_TO_ADDR
// animal := CreateHuman ;
55320: LD_ADDR_VAR 0 12
55324: PUSH
55325: CALL_OW 44
55329: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55330: LD_VAR 0 12
55334: PPUSH
55335: LD_VAR 0 8
55339: PPUSH
55340: LD_INT 0
55342: PPUSH
55343: CALL 57051 0 3
// end ;
55347: GO 55301
55349: POP
55350: POP
// if fishes then
55351: LD_VAR 0 7
55355: IFFALSE 55422
// for i = 1 to fishes do
55357: LD_ADDR_VAR 0 11
55361: PUSH
55362: DOUBLE
55363: LD_INT 1
55365: DEC
55366: ST_TO_ADDR
55367: LD_VAR 0 7
55371: PUSH
55372: FOR_TO
55373: IFFALSE 55420
// begin hc_class = 20 ;
55375: LD_ADDR_OWVAR 28
55379: PUSH
55380: LD_INT 20
55382: ST_TO_ADDR
// hc_gallery =  ;
55383: LD_ADDR_OWVAR 33
55387: PUSH
55388: LD_STRING 
55390: ST_TO_ADDR
// animal := CreateHuman ;
55391: LD_ADDR_VAR 0 12
55395: PUSH
55396: CALL_OW 44
55400: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55401: LD_VAR 0 12
55405: PPUSH
55406: LD_VAR 0 9
55410: PPUSH
55411: LD_INT 0
55413: PPUSH
55414: CALL 57051 0 3
// end ;
55418: GO 55372
55420: POP
55421: POP
// end ;
55422: LD_VAR 0 10
55426: RET
// export function WantHeal ( sci , unit ) ; begin
55427: LD_INT 0
55429: PPUSH
// if GetTaskList ( sci ) > 0 then
55430: LD_VAR 0 1
55434: PPUSH
55435: CALL_OW 437
55439: PUSH
55440: LD_INT 0
55442: GREATER
55443: IFFALSE 55513
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55445: LD_VAR 0 1
55449: PPUSH
55450: CALL_OW 437
55454: PUSH
55455: LD_INT 1
55457: ARRAY
55458: PUSH
55459: LD_INT 1
55461: ARRAY
55462: PUSH
55463: LD_STRING l
55465: EQUAL
55466: PUSH
55467: LD_VAR 0 1
55471: PPUSH
55472: CALL_OW 437
55476: PUSH
55477: LD_INT 1
55479: ARRAY
55480: PUSH
55481: LD_INT 4
55483: ARRAY
55484: PUSH
55485: LD_VAR 0 2
55489: EQUAL
55490: AND
55491: IFFALSE 55503
// result := true else
55493: LD_ADDR_VAR 0 3
55497: PUSH
55498: LD_INT 1
55500: ST_TO_ADDR
55501: GO 55511
// result := false ;
55503: LD_ADDR_VAR 0 3
55507: PUSH
55508: LD_INT 0
55510: ST_TO_ADDR
// end else
55511: GO 55521
// result := false ;
55513: LD_ADDR_VAR 0 3
55517: PUSH
55518: LD_INT 0
55520: ST_TO_ADDR
// end ;
55521: LD_VAR 0 3
55525: RET
// export function HealTarget ( sci ) ; begin
55526: LD_INT 0
55528: PPUSH
// if not sci then
55529: LD_VAR 0 1
55533: NOT
55534: IFFALSE 55538
// exit ;
55536: GO 55603
// result := 0 ;
55538: LD_ADDR_VAR 0 2
55542: PUSH
55543: LD_INT 0
55545: ST_TO_ADDR
// if GetTaskList ( sci ) then
55546: LD_VAR 0 1
55550: PPUSH
55551: CALL_OW 437
55555: IFFALSE 55603
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55557: LD_VAR 0 1
55561: PPUSH
55562: CALL_OW 437
55566: PUSH
55567: LD_INT 1
55569: ARRAY
55570: PUSH
55571: LD_INT 1
55573: ARRAY
55574: PUSH
55575: LD_STRING l
55577: EQUAL
55578: IFFALSE 55603
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55580: LD_ADDR_VAR 0 2
55584: PUSH
55585: LD_VAR 0 1
55589: PPUSH
55590: CALL_OW 437
55594: PUSH
55595: LD_INT 1
55597: ARRAY
55598: PUSH
55599: LD_INT 4
55601: ARRAY
55602: ST_TO_ADDR
// end ;
55603: LD_VAR 0 2
55607: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55608: LD_INT 0
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
// if not base_units then
55614: LD_VAR 0 1
55618: NOT
55619: IFFALSE 55623
// exit ;
55621: GO 55710
// result := false ;
55623: LD_ADDR_VAR 0 2
55627: PUSH
55628: LD_INT 0
55630: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55631: LD_ADDR_VAR 0 5
55635: PUSH
55636: LD_VAR 0 1
55640: PPUSH
55641: LD_INT 21
55643: PUSH
55644: LD_INT 3
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PPUSH
55651: CALL_OW 72
55655: ST_TO_ADDR
// if not tmp then
55656: LD_VAR 0 5
55660: NOT
55661: IFFALSE 55665
// exit ;
55663: GO 55710
// for i in tmp do
55665: LD_ADDR_VAR 0 3
55669: PUSH
55670: LD_VAR 0 5
55674: PUSH
55675: FOR_IN
55676: IFFALSE 55708
// begin result := EnemyInRange ( i , 22 ) ;
55678: LD_ADDR_VAR 0 2
55682: PUSH
55683: LD_VAR 0 3
55687: PPUSH
55688: LD_INT 22
55690: PPUSH
55691: CALL 53297 0 2
55695: ST_TO_ADDR
// if result then
55696: LD_VAR 0 2
55700: IFFALSE 55706
// exit ;
55702: POP
55703: POP
55704: GO 55710
// end ;
55706: GO 55675
55708: POP
55709: POP
// end ;
55710: LD_VAR 0 2
55714: RET
// export function FilterByTag ( units , tag ) ; begin
55715: LD_INT 0
55717: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55718: LD_ADDR_VAR 0 3
55722: PUSH
55723: LD_VAR 0 1
55727: PPUSH
55728: LD_INT 120
55730: PUSH
55731: LD_VAR 0 2
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PPUSH
55740: CALL_OW 72
55744: ST_TO_ADDR
// end ;
55745: LD_VAR 0 3
55749: RET
// export function IsDriver ( un ) ; begin
55750: LD_INT 0
55752: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55753: LD_ADDR_VAR 0 2
55757: PUSH
55758: LD_VAR 0 1
55762: PUSH
55763: LD_INT 55
55765: PUSH
55766: EMPTY
55767: LIST
55768: PPUSH
55769: CALL_OW 69
55773: IN
55774: ST_TO_ADDR
// end ;
55775: LD_VAR 0 2
55779: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55780: LD_INT 0
55782: PPUSH
55783: PPUSH
// list := [ ] ;
55784: LD_ADDR_VAR 0 5
55788: PUSH
55789: EMPTY
55790: ST_TO_ADDR
// case d of 0 :
55791: LD_VAR 0 3
55795: PUSH
55796: LD_INT 0
55798: DOUBLE
55799: EQUAL
55800: IFTRUE 55804
55802: GO 55937
55804: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55805: LD_ADDR_VAR 0 5
55809: PUSH
55810: LD_VAR 0 1
55814: PUSH
55815: LD_INT 4
55817: MINUS
55818: PUSH
55819: LD_VAR 0 2
55823: PUSH
55824: LD_INT 4
55826: MINUS
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: PUSH
55836: LD_VAR 0 1
55840: PUSH
55841: LD_INT 3
55843: MINUS
55844: PUSH
55845: LD_VAR 0 2
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: PUSH
55858: LD_VAR 0 1
55862: PUSH
55863: LD_INT 4
55865: PLUS
55866: PUSH
55867: LD_VAR 0 2
55871: PUSH
55872: LD_INT 4
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: PUSH
55880: LD_VAR 0 1
55884: PUSH
55885: LD_INT 3
55887: PLUS
55888: PUSH
55889: LD_VAR 0 2
55893: PUSH
55894: LD_INT 3
55896: PLUS
55897: PUSH
55898: LD_INT 5
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: PUSH
55906: LD_VAR 0 1
55910: PUSH
55911: LD_VAR 0 2
55915: PUSH
55916: LD_INT 4
55918: PLUS
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// end ; 1 :
55935: GO 56635
55937: LD_INT 1
55939: DOUBLE
55940: EQUAL
55941: IFTRUE 55945
55943: GO 56078
55945: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55946: LD_ADDR_VAR 0 5
55950: PUSH
55951: LD_VAR 0 1
55955: PUSH
55956: LD_VAR 0 2
55960: PUSH
55961: LD_INT 4
55963: MINUS
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: LIST
55972: PUSH
55973: LD_VAR 0 1
55977: PUSH
55978: LD_INT 3
55980: MINUS
55981: PUSH
55982: LD_VAR 0 2
55986: PUSH
55987: LD_INT 3
55989: MINUS
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: PUSH
55999: LD_VAR 0 1
56003: PUSH
56004: LD_INT 4
56006: MINUS
56007: PUSH
56008: LD_VAR 0 2
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: PUSH
56021: LD_VAR 0 1
56025: PUSH
56026: LD_VAR 0 2
56030: PUSH
56031: LD_INT 3
56033: PLUS
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: PUSH
56043: LD_VAR 0 1
56047: PUSH
56048: LD_INT 4
56050: PLUS
56051: PUSH
56052: LD_VAR 0 2
56056: PUSH
56057: LD_INT 4
56059: PLUS
56060: PUSH
56061: LD_INT 5
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: ST_TO_ADDR
// end ; 2 :
56076: GO 56635
56078: LD_INT 2
56080: DOUBLE
56081: EQUAL
56082: IFTRUE 56086
56084: GO 56215
56086: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56087: LD_ADDR_VAR 0 5
56091: PUSH
56092: LD_VAR 0 1
56096: PUSH
56097: LD_VAR 0 2
56101: PUSH
56102: LD_INT 3
56104: MINUS
56105: PUSH
56106: LD_INT 3
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: PUSH
56114: LD_VAR 0 1
56118: PUSH
56119: LD_INT 4
56121: PLUS
56122: PUSH
56123: LD_VAR 0 2
56127: PUSH
56128: LD_INT 4
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: PUSH
56136: LD_VAR 0 1
56140: PUSH
56141: LD_VAR 0 2
56145: PUSH
56146: LD_INT 4
56148: PLUS
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: PUSH
56158: LD_VAR 0 1
56162: PUSH
56163: LD_INT 3
56165: MINUS
56166: PUSH
56167: LD_VAR 0 2
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: LD_INT 4
56187: MINUS
56188: PUSH
56189: LD_VAR 0 2
56193: PUSH
56194: LD_INT 4
56196: MINUS
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: ST_TO_ADDR
// end ; 3 :
56213: GO 56635
56215: LD_INT 3
56217: DOUBLE
56218: EQUAL
56219: IFTRUE 56223
56221: GO 56356
56223: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56224: LD_ADDR_VAR 0 5
56228: PUSH
56229: LD_VAR 0 1
56233: PUSH
56234: LD_INT 3
56236: PLUS
56237: PUSH
56238: LD_VAR 0 2
56242: PUSH
56243: LD_INT 4
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: LIST
56250: PUSH
56251: LD_VAR 0 1
56255: PUSH
56256: LD_INT 4
56258: PLUS
56259: PUSH
56260: LD_VAR 0 2
56264: PUSH
56265: LD_INT 4
56267: PLUS
56268: PUSH
56269: LD_INT 5
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: PUSH
56277: LD_VAR 0 1
56281: PUSH
56282: LD_INT 4
56284: MINUS
56285: PUSH
56286: LD_VAR 0 2
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: LD_VAR 0 1
56303: PUSH
56304: LD_VAR 0 2
56308: PUSH
56309: LD_INT 4
56311: MINUS
56312: PUSH
56313: LD_INT 3
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: PUSH
56321: LD_VAR 0 1
56325: PUSH
56326: LD_INT 3
56328: MINUS
56329: PUSH
56330: LD_VAR 0 2
56334: PUSH
56335: LD_INT 3
56337: MINUS
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: ST_TO_ADDR
// end ; 4 :
56354: GO 56635
56356: LD_INT 4
56358: DOUBLE
56359: EQUAL
56360: IFTRUE 56364
56362: GO 56497
56364: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56365: LD_ADDR_VAR 0 5
56369: PUSH
56370: LD_VAR 0 1
56374: PUSH
56375: LD_VAR 0 2
56379: PUSH
56380: LD_INT 4
56382: PLUS
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: PUSH
56392: LD_VAR 0 1
56396: PUSH
56397: LD_INT 3
56399: PLUS
56400: PUSH
56401: LD_VAR 0 2
56405: PUSH
56406: LD_INT 3
56408: PLUS
56409: PUSH
56410: LD_INT 5
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: PUSH
56418: LD_VAR 0 1
56422: PUSH
56423: LD_INT 4
56425: PLUS
56426: PUSH
56427: LD_VAR 0 2
56431: PUSH
56432: LD_INT 4
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: PUSH
56440: LD_VAR 0 1
56444: PUSH
56445: LD_VAR 0 2
56449: PUSH
56450: LD_INT 3
56452: MINUS
56453: PUSH
56454: LD_INT 3
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: PUSH
56462: LD_VAR 0 1
56466: PUSH
56467: LD_INT 4
56469: MINUS
56470: PUSH
56471: LD_VAR 0 2
56475: PUSH
56476: LD_INT 4
56478: MINUS
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: ST_TO_ADDR
// end ; 5 :
56495: GO 56635
56497: LD_INT 5
56499: DOUBLE
56500: EQUAL
56501: IFTRUE 56505
56503: GO 56634
56505: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56506: LD_ADDR_VAR 0 5
56510: PUSH
56511: LD_VAR 0 1
56515: PUSH
56516: LD_INT 4
56518: MINUS
56519: PUSH
56520: LD_VAR 0 2
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: LIST
56532: PUSH
56533: LD_VAR 0 1
56537: PUSH
56538: LD_VAR 0 2
56542: PUSH
56543: LD_INT 4
56545: MINUS
56546: PUSH
56547: LD_INT 3
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: PUSH
56555: LD_VAR 0 1
56559: PUSH
56560: LD_INT 4
56562: PLUS
56563: PUSH
56564: LD_VAR 0 2
56568: PUSH
56569: LD_INT 4
56571: PLUS
56572: PUSH
56573: LD_INT 5
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: PUSH
56581: LD_VAR 0 1
56585: PUSH
56586: LD_INT 3
56588: PLUS
56589: PUSH
56590: LD_VAR 0 2
56594: PUSH
56595: LD_INT 4
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: PUSH
56603: LD_VAR 0 1
56607: PUSH
56608: LD_VAR 0 2
56612: PUSH
56613: LD_INT 3
56615: PLUS
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// end ; end ;
56632: GO 56635
56634: POP
// result := list ;
56635: LD_ADDR_VAR 0 4
56639: PUSH
56640: LD_VAR 0 5
56644: ST_TO_ADDR
// end ;
56645: LD_VAR 0 4
56649: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56650: LD_INT 0
56652: PPUSH
56653: PPUSH
56654: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56655: LD_VAR 0 1
56659: NOT
56660: PUSH
56661: LD_VAR 0 2
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: IN
56684: NOT
56685: OR
56686: IFFALSE 56690
// exit ;
56688: GO 56773
// tmp := [ ] ;
56690: LD_ADDR_VAR 0 5
56694: PUSH
56695: EMPTY
56696: ST_TO_ADDR
// for i in units do
56697: LD_ADDR_VAR 0 4
56701: PUSH
56702: LD_VAR 0 1
56706: PUSH
56707: FOR_IN
56708: IFFALSE 56742
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56710: LD_ADDR_VAR 0 5
56714: PUSH
56715: LD_VAR 0 5
56719: PPUSH
56720: LD_VAR 0 4
56724: PPUSH
56725: LD_VAR 0 2
56729: PPUSH
56730: CALL_OW 259
56734: PPUSH
56735: CALL 58146 0 2
56739: ST_TO_ADDR
56740: GO 56707
56742: POP
56743: POP
// if not tmp then
56744: LD_VAR 0 5
56748: NOT
56749: IFFALSE 56753
// exit ;
56751: GO 56773
// result := SortListByListDesc ( units , tmp ) ;
56753: LD_ADDR_VAR 0 3
56757: PUSH
56758: LD_VAR 0 1
56762: PPUSH
56763: LD_VAR 0 5
56767: PPUSH
56768: CALL_OW 77
56772: ST_TO_ADDR
// end ;
56773: LD_VAR 0 3
56777: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56778: LD_INT 0
56780: PPUSH
56781: PPUSH
56782: PPUSH
// result := false ;
56783: LD_ADDR_VAR 0 3
56787: PUSH
56788: LD_INT 0
56790: ST_TO_ADDR
// if not building then
56791: LD_VAR 0 2
56795: NOT
56796: IFFALSE 56800
// exit ;
56798: GO 56938
// x := GetX ( building ) ;
56800: LD_ADDR_VAR 0 4
56804: PUSH
56805: LD_VAR 0 2
56809: PPUSH
56810: CALL_OW 250
56814: ST_TO_ADDR
// y := GetY ( building ) ;
56815: LD_ADDR_VAR 0 5
56819: PUSH
56820: LD_VAR 0 2
56824: PPUSH
56825: CALL_OW 251
56829: ST_TO_ADDR
// if not x or not y then
56830: LD_VAR 0 4
56834: NOT
56835: PUSH
56836: LD_VAR 0 5
56840: NOT
56841: OR
56842: IFFALSE 56846
// exit ;
56844: GO 56938
// if GetTaskList ( unit ) then
56846: LD_VAR 0 1
56850: PPUSH
56851: CALL_OW 437
56855: IFFALSE 56938
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56857: LD_STRING e
56859: PUSH
56860: LD_VAR 0 1
56864: PPUSH
56865: CALL_OW 437
56869: PUSH
56870: LD_INT 1
56872: ARRAY
56873: PUSH
56874: LD_INT 1
56876: ARRAY
56877: EQUAL
56878: PUSH
56879: LD_VAR 0 4
56883: PUSH
56884: LD_VAR 0 1
56888: PPUSH
56889: CALL_OW 437
56893: PUSH
56894: LD_INT 1
56896: ARRAY
56897: PUSH
56898: LD_INT 2
56900: ARRAY
56901: EQUAL
56902: AND
56903: PUSH
56904: LD_VAR 0 5
56908: PUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 437
56918: PUSH
56919: LD_INT 1
56921: ARRAY
56922: PUSH
56923: LD_INT 3
56925: ARRAY
56926: EQUAL
56927: AND
56928: IFFALSE 56938
// result := true end ;
56930: LD_ADDR_VAR 0 3
56934: PUSH
56935: LD_INT 1
56937: ST_TO_ADDR
// end ;
56938: LD_VAR 0 3
56942: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56943: LD_INT 0
56945: PPUSH
// result := false ;
56946: LD_ADDR_VAR 0 4
56950: PUSH
56951: LD_INT 0
56953: ST_TO_ADDR
// if GetTaskList ( unit ) then
56954: LD_VAR 0 1
56958: PPUSH
56959: CALL_OW 437
56963: IFFALSE 57046
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56965: LD_STRING M
56967: PUSH
56968: LD_VAR 0 1
56972: PPUSH
56973: CALL_OW 437
56977: PUSH
56978: LD_INT 1
56980: ARRAY
56981: PUSH
56982: LD_INT 1
56984: ARRAY
56985: EQUAL
56986: PUSH
56987: LD_VAR 0 2
56991: PUSH
56992: LD_VAR 0 1
56996: PPUSH
56997: CALL_OW 437
57001: PUSH
57002: LD_INT 1
57004: ARRAY
57005: PUSH
57006: LD_INT 2
57008: ARRAY
57009: EQUAL
57010: AND
57011: PUSH
57012: LD_VAR 0 3
57016: PUSH
57017: LD_VAR 0 1
57021: PPUSH
57022: CALL_OW 437
57026: PUSH
57027: LD_INT 1
57029: ARRAY
57030: PUSH
57031: LD_INT 3
57033: ARRAY
57034: EQUAL
57035: AND
57036: IFFALSE 57046
// result := true ;
57038: LD_ADDR_VAR 0 4
57042: PUSH
57043: LD_INT 1
57045: ST_TO_ADDR
// end ; end ;
57046: LD_VAR 0 4
57050: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57051: LD_INT 0
57053: PPUSH
57054: PPUSH
57055: PPUSH
57056: PPUSH
// if not unit or not area then
57057: LD_VAR 0 1
57061: NOT
57062: PUSH
57063: LD_VAR 0 2
57067: NOT
57068: OR
57069: IFFALSE 57073
// exit ;
57071: GO 57249
// tmp := AreaToList ( area , i ) ;
57073: LD_ADDR_VAR 0 6
57077: PUSH
57078: LD_VAR 0 2
57082: PPUSH
57083: LD_VAR 0 5
57087: PPUSH
57088: CALL_OW 517
57092: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57093: LD_ADDR_VAR 0 5
57097: PUSH
57098: DOUBLE
57099: LD_INT 1
57101: DEC
57102: ST_TO_ADDR
57103: LD_VAR 0 6
57107: PUSH
57108: LD_INT 1
57110: ARRAY
57111: PUSH
57112: FOR_TO
57113: IFFALSE 57247
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57115: LD_ADDR_VAR 0 7
57119: PUSH
57120: LD_VAR 0 6
57124: PUSH
57125: LD_INT 1
57127: ARRAY
57128: PUSH
57129: LD_VAR 0 5
57133: ARRAY
57134: PUSH
57135: LD_VAR 0 6
57139: PUSH
57140: LD_INT 2
57142: ARRAY
57143: PUSH
57144: LD_VAR 0 5
57148: ARRAY
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57154: LD_INT 92
57156: PUSH
57157: LD_VAR 0 7
57161: PUSH
57162: LD_INT 1
57164: ARRAY
57165: PUSH
57166: LD_VAR 0 7
57170: PUSH
57171: LD_INT 2
57173: ARRAY
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: PPUSH
57184: CALL_OW 69
57188: PUSH
57189: LD_INT 0
57191: EQUAL
57192: IFFALSE 57245
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57194: LD_VAR 0 1
57198: PPUSH
57199: LD_VAR 0 7
57203: PUSH
57204: LD_INT 1
57206: ARRAY
57207: PPUSH
57208: LD_VAR 0 7
57212: PUSH
57213: LD_INT 2
57215: ARRAY
57216: PPUSH
57217: LD_VAR 0 3
57221: PPUSH
57222: CALL_OW 48
// result := IsPlaced ( unit ) ;
57226: LD_ADDR_VAR 0 4
57230: PUSH
57231: LD_VAR 0 1
57235: PPUSH
57236: CALL_OW 305
57240: ST_TO_ADDR
// exit ;
57241: POP
57242: POP
57243: GO 57249
// end ; end ;
57245: GO 57112
57247: POP
57248: POP
// end ;
57249: LD_VAR 0 4
57253: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57254: LD_INT 0
57256: PPUSH
57257: PPUSH
57258: PPUSH
// if not side or side > 8 then
57259: LD_VAR 0 1
57263: NOT
57264: PUSH
57265: LD_VAR 0 1
57269: PUSH
57270: LD_INT 8
57272: GREATER
57273: OR
57274: IFFALSE 57278
// exit ;
57276: GO 57465
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57278: LD_ADDR_VAR 0 4
57282: PUSH
57283: LD_INT 22
57285: PUSH
57286: LD_VAR 0 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 21
57297: PUSH
57298: LD_INT 3
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PPUSH
57309: CALL_OW 69
57313: ST_TO_ADDR
// if not tmp then
57314: LD_VAR 0 4
57318: NOT
57319: IFFALSE 57323
// exit ;
57321: GO 57465
// enable_addtolog := true ;
57323: LD_ADDR_OWVAR 81
57327: PUSH
57328: LD_INT 1
57330: ST_TO_ADDR
// AddToLog ( [ ) ;
57331: LD_STRING [
57333: PPUSH
57334: CALL_OW 561
// for i in tmp do
57338: LD_ADDR_VAR 0 3
57342: PUSH
57343: LD_VAR 0 4
57347: PUSH
57348: FOR_IN
57349: IFFALSE 57456
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57351: LD_STRING [
57353: PUSH
57354: LD_VAR 0 3
57358: PPUSH
57359: CALL_OW 266
57363: STR
57364: PUSH
57365: LD_STRING , 
57367: STR
57368: PUSH
57369: LD_VAR 0 3
57373: PPUSH
57374: CALL_OW 250
57378: STR
57379: PUSH
57380: LD_STRING , 
57382: STR
57383: PUSH
57384: LD_VAR 0 3
57388: PPUSH
57389: CALL_OW 251
57393: STR
57394: PUSH
57395: LD_STRING , 
57397: STR
57398: PUSH
57399: LD_VAR 0 3
57403: PPUSH
57404: CALL_OW 254
57408: STR
57409: PUSH
57410: LD_STRING , 
57412: STR
57413: PUSH
57414: LD_VAR 0 3
57418: PPUSH
57419: LD_INT 1
57421: PPUSH
57422: CALL_OW 268
57426: STR
57427: PUSH
57428: LD_STRING , 
57430: STR
57431: PUSH
57432: LD_VAR 0 3
57436: PPUSH
57437: LD_INT 2
57439: PPUSH
57440: CALL_OW 268
57444: STR
57445: PUSH
57446: LD_STRING ],
57448: STR
57449: PPUSH
57450: CALL_OW 561
// end ;
57454: GO 57348
57456: POP
57457: POP
// AddToLog ( ]; ) ;
57458: LD_STRING ];
57460: PPUSH
57461: CALL_OW 561
// end ;
57465: LD_VAR 0 2
57469: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57470: LD_INT 0
57472: PPUSH
57473: PPUSH
57474: PPUSH
57475: PPUSH
57476: PPUSH
// if not area or not rate or not max then
57477: LD_VAR 0 1
57481: NOT
57482: PUSH
57483: LD_VAR 0 2
57487: NOT
57488: OR
57489: PUSH
57490: LD_VAR 0 4
57494: NOT
57495: OR
57496: IFFALSE 57500
// exit ;
57498: GO 57689
// while 1 do
57500: LD_INT 1
57502: IFFALSE 57689
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57504: LD_ADDR_VAR 0 9
57508: PUSH
57509: LD_VAR 0 1
57513: PPUSH
57514: LD_INT 1
57516: PPUSH
57517: CALL_OW 287
57521: PUSH
57522: LD_INT 10
57524: MUL
57525: ST_TO_ADDR
// r := rate / 10 ;
57526: LD_ADDR_VAR 0 7
57530: PUSH
57531: LD_VAR 0 2
57535: PUSH
57536: LD_INT 10
57538: DIVREAL
57539: ST_TO_ADDR
// time := 1 1$00 ;
57540: LD_ADDR_VAR 0 8
57544: PUSH
57545: LD_INT 2100
57547: ST_TO_ADDR
// if amount < min then
57548: LD_VAR 0 9
57552: PUSH
57553: LD_VAR 0 3
57557: LESS
57558: IFFALSE 57576
// r := r * 2 else
57560: LD_ADDR_VAR 0 7
57564: PUSH
57565: LD_VAR 0 7
57569: PUSH
57570: LD_INT 2
57572: MUL
57573: ST_TO_ADDR
57574: GO 57602
// if amount > max then
57576: LD_VAR 0 9
57580: PUSH
57581: LD_VAR 0 4
57585: GREATER
57586: IFFALSE 57602
// r := r / 2 ;
57588: LD_ADDR_VAR 0 7
57592: PUSH
57593: LD_VAR 0 7
57597: PUSH
57598: LD_INT 2
57600: DIVREAL
57601: ST_TO_ADDR
// time := time / r ;
57602: LD_ADDR_VAR 0 8
57606: PUSH
57607: LD_VAR 0 8
57611: PUSH
57612: LD_VAR 0 7
57616: DIVREAL
57617: ST_TO_ADDR
// if time < 0 then
57618: LD_VAR 0 8
57622: PUSH
57623: LD_INT 0
57625: LESS
57626: IFFALSE 57643
// time := time * - 1 ;
57628: LD_ADDR_VAR 0 8
57632: PUSH
57633: LD_VAR 0 8
57637: PUSH
57638: LD_INT 1
57640: NEG
57641: MUL
57642: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57643: LD_VAR 0 8
57647: PUSH
57648: LD_INT 35
57650: PPUSH
57651: LD_INT 875
57653: PPUSH
57654: CALL_OW 12
57658: PLUS
57659: PPUSH
57660: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57664: LD_INT 1
57666: PPUSH
57667: LD_INT 5
57669: PPUSH
57670: CALL_OW 12
57674: PPUSH
57675: LD_VAR 0 1
57679: PPUSH
57680: LD_INT 1
57682: PPUSH
57683: CALL_OW 55
// end ;
57687: GO 57500
// end ;
57689: LD_VAR 0 5
57693: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57694: LD_INT 0
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
57700: PPUSH
57701: PPUSH
57702: PPUSH
57703: PPUSH
// if not turrets or not factories then
57704: LD_VAR 0 1
57708: NOT
57709: PUSH
57710: LD_VAR 0 2
57714: NOT
57715: OR
57716: IFFALSE 57720
// exit ;
57718: GO 58027
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57720: LD_ADDR_VAR 0 10
57724: PUSH
57725: LD_INT 5
57727: PUSH
57728: LD_INT 6
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: LD_INT 4
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: LD_INT 5
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 24
57762: PUSH
57763: LD_INT 25
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 23
57772: PUSH
57773: LD_INT 27
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 42
57786: PUSH
57787: LD_INT 43
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 44
57796: PUSH
57797: LD_INT 46
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 45
57806: PUSH
57807: LD_INT 47
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// result := [ ] ;
57824: LD_ADDR_VAR 0 3
57828: PUSH
57829: EMPTY
57830: ST_TO_ADDR
// for i in turrets do
57831: LD_ADDR_VAR 0 4
57835: PUSH
57836: LD_VAR 0 1
57840: PUSH
57841: FOR_IN
57842: IFFALSE 58025
// begin nat := GetNation ( i ) ;
57844: LD_ADDR_VAR 0 7
57848: PUSH
57849: LD_VAR 0 4
57853: PPUSH
57854: CALL_OW 248
57858: ST_TO_ADDR
// weapon := 0 ;
57859: LD_ADDR_VAR 0 8
57863: PUSH
57864: LD_INT 0
57866: ST_TO_ADDR
// if not nat then
57867: LD_VAR 0 7
57871: NOT
57872: IFFALSE 57876
// continue ;
57874: GO 57841
// for j in list [ nat ] do
57876: LD_ADDR_VAR 0 5
57880: PUSH
57881: LD_VAR 0 10
57885: PUSH
57886: LD_VAR 0 7
57890: ARRAY
57891: PUSH
57892: FOR_IN
57893: IFFALSE 57934
// if GetBWeapon ( i ) = j [ 1 ] then
57895: LD_VAR 0 4
57899: PPUSH
57900: CALL_OW 269
57904: PUSH
57905: LD_VAR 0 5
57909: PUSH
57910: LD_INT 1
57912: ARRAY
57913: EQUAL
57914: IFFALSE 57932
// begin weapon := j [ 2 ] ;
57916: LD_ADDR_VAR 0 8
57920: PUSH
57921: LD_VAR 0 5
57925: PUSH
57926: LD_INT 2
57928: ARRAY
57929: ST_TO_ADDR
// break ;
57930: GO 57934
// end ;
57932: GO 57892
57934: POP
57935: POP
// if not weapon then
57936: LD_VAR 0 8
57940: NOT
57941: IFFALSE 57945
// continue ;
57943: GO 57841
// for k in factories do
57945: LD_ADDR_VAR 0 6
57949: PUSH
57950: LD_VAR 0 2
57954: PUSH
57955: FOR_IN
57956: IFFALSE 58021
// begin weapons := AvailableWeaponList ( k ) ;
57958: LD_ADDR_VAR 0 9
57962: PUSH
57963: LD_VAR 0 6
57967: PPUSH
57968: CALL_OW 478
57972: ST_TO_ADDR
// if not weapons then
57973: LD_VAR 0 9
57977: NOT
57978: IFFALSE 57982
// continue ;
57980: GO 57955
// if weapon in weapons then
57982: LD_VAR 0 8
57986: PUSH
57987: LD_VAR 0 9
57991: IN
57992: IFFALSE 58019
// begin result := [ i , weapon ] ;
57994: LD_ADDR_VAR 0 3
57998: PUSH
57999: LD_VAR 0 4
58003: PUSH
58004: LD_VAR 0 8
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: ST_TO_ADDR
// exit ;
58013: POP
58014: POP
58015: POP
58016: POP
58017: GO 58027
// end ; end ;
58019: GO 57955
58021: POP
58022: POP
// end ;
58023: GO 57841
58025: POP
58026: POP
// end ;
58027: LD_VAR 0 3
58031: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58032: LD_INT 0
58034: PPUSH
// if not side or side > 8 then
58035: LD_VAR 0 3
58039: NOT
58040: PUSH
58041: LD_VAR 0 3
58045: PUSH
58046: LD_INT 8
58048: GREATER
58049: OR
58050: IFFALSE 58054
// exit ;
58052: GO 58113
// if not range then
58054: LD_VAR 0 4
58058: NOT
58059: IFFALSE 58070
// range := - 12 ;
58061: LD_ADDR_VAR 0 4
58065: PUSH
58066: LD_INT 12
58068: NEG
58069: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58070: LD_VAR 0 1
58074: PPUSH
58075: LD_VAR 0 2
58079: PPUSH
58080: LD_VAR 0 3
58084: PPUSH
58085: LD_VAR 0 4
58089: PPUSH
58090: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58094: LD_VAR 0 1
58098: PPUSH
58099: LD_VAR 0 2
58103: PPUSH
58104: LD_VAR 0 3
58108: PPUSH
58109: CALL_OW 331
// end ;
58113: LD_VAR 0 5
58117: RET
// export function Video ( mode ) ; begin
58118: LD_INT 0
58120: PPUSH
// ingame_video = mode ;
58121: LD_ADDR_OWVAR 52
58125: PUSH
58126: LD_VAR 0 1
58130: ST_TO_ADDR
// interface_hidden = mode ;
58131: LD_ADDR_OWVAR 54
58135: PUSH
58136: LD_VAR 0 1
58140: ST_TO_ADDR
// end ;
58141: LD_VAR 0 2
58145: RET
// export function Join ( array , element ) ; begin
58146: LD_INT 0
58148: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58149: LD_ADDR_VAR 0 3
58153: PUSH
58154: LD_VAR 0 1
58158: PPUSH
58159: LD_VAR 0 1
58163: PUSH
58164: LD_INT 1
58166: PLUS
58167: PPUSH
58168: LD_VAR 0 2
58172: PPUSH
58173: CALL_OW 1
58177: ST_TO_ADDR
// end ;
58178: LD_VAR 0 3
58182: RET
// export function JoinUnion ( array , element ) ; begin
58183: LD_INT 0
58185: PPUSH
// result := array union element ;
58186: LD_ADDR_VAR 0 3
58190: PUSH
58191: LD_VAR 0 1
58195: PUSH
58196: LD_VAR 0 2
58200: UNION
58201: ST_TO_ADDR
// end ;
58202: LD_VAR 0 3
58206: RET
// export function GetBehemoths ( side ) ; begin
58207: LD_INT 0
58209: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58210: LD_ADDR_VAR 0 2
58214: PUSH
58215: LD_INT 22
58217: PUSH
58218: LD_VAR 0 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 31
58229: PUSH
58230: LD_INT 25
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PPUSH
58241: CALL_OW 69
58245: ST_TO_ADDR
// end ;
58246: LD_VAR 0 2
58250: RET
// export function Shuffle ( array ) ; var i , index ; begin
58251: LD_INT 0
58253: PPUSH
58254: PPUSH
58255: PPUSH
// result := [ ] ;
58256: LD_ADDR_VAR 0 2
58260: PUSH
58261: EMPTY
58262: ST_TO_ADDR
// if not array then
58263: LD_VAR 0 1
58267: NOT
58268: IFFALSE 58272
// exit ;
58270: GO 58371
// Randomize ;
58272: CALL_OW 10
// for i = array downto 1 do
58276: LD_ADDR_VAR 0 3
58280: PUSH
58281: DOUBLE
58282: LD_VAR 0 1
58286: INC
58287: ST_TO_ADDR
58288: LD_INT 1
58290: PUSH
58291: FOR_DOWNTO
58292: IFFALSE 58369
// begin index := rand ( 1 , array ) ;
58294: LD_ADDR_VAR 0 4
58298: PUSH
58299: LD_INT 1
58301: PPUSH
58302: LD_VAR 0 1
58306: PPUSH
58307: CALL_OW 12
58311: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58312: LD_ADDR_VAR 0 2
58316: PUSH
58317: LD_VAR 0 2
58321: PPUSH
58322: LD_VAR 0 2
58326: PUSH
58327: LD_INT 1
58329: PLUS
58330: PPUSH
58331: LD_VAR 0 1
58335: PUSH
58336: LD_VAR 0 4
58340: ARRAY
58341: PPUSH
58342: CALL_OW 2
58346: ST_TO_ADDR
// array := Delete ( array , index ) ;
58347: LD_ADDR_VAR 0 1
58351: PUSH
58352: LD_VAR 0 1
58356: PPUSH
58357: LD_VAR 0 4
58361: PPUSH
58362: CALL_OW 3
58366: ST_TO_ADDR
// end ;
58367: GO 58291
58369: POP
58370: POP
// end ;
58371: LD_VAR 0 2
58375: RET
// export function GetBaseMaterials ( base ) ; begin
58376: LD_INT 0
58378: PPUSH
// result := [ 0 , 0 , 0 ] ;
58379: LD_ADDR_VAR 0 2
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: LIST
58397: ST_TO_ADDR
// if not base then
58398: LD_VAR 0 1
58402: NOT
58403: IFFALSE 58407
// exit ;
58405: GO 58456
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58407: LD_ADDR_VAR 0 2
58411: PUSH
58412: LD_VAR 0 1
58416: PPUSH
58417: LD_INT 1
58419: PPUSH
58420: CALL_OW 275
58424: PUSH
58425: LD_VAR 0 1
58429: PPUSH
58430: LD_INT 2
58432: PPUSH
58433: CALL_OW 275
58437: PUSH
58438: LD_VAR 0 1
58442: PPUSH
58443: LD_INT 3
58445: PPUSH
58446: CALL_OW 275
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: ST_TO_ADDR
// end ;
58456: LD_VAR 0 2
58460: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58461: LD_INT 0
58463: PPUSH
58464: PPUSH
// result := array ;
58465: LD_ADDR_VAR 0 3
58469: PUSH
58470: LD_VAR 0 1
58474: ST_TO_ADDR
// if size >= result then
58475: LD_VAR 0 2
58479: PUSH
58480: LD_VAR 0 3
58484: GREATEREQUAL
58485: IFFALSE 58489
// exit ;
58487: GO 58539
// if size then
58489: LD_VAR 0 2
58493: IFFALSE 58539
// for i := array downto size do
58495: LD_ADDR_VAR 0 4
58499: PUSH
58500: DOUBLE
58501: LD_VAR 0 1
58505: INC
58506: ST_TO_ADDR
58507: LD_VAR 0 2
58511: PUSH
58512: FOR_DOWNTO
58513: IFFALSE 58537
// result := Delete ( result , result ) ;
58515: LD_ADDR_VAR 0 3
58519: PUSH
58520: LD_VAR 0 3
58524: PPUSH
58525: LD_VAR 0 3
58529: PPUSH
58530: CALL_OW 3
58534: ST_TO_ADDR
58535: GO 58512
58537: POP
58538: POP
// end ;
58539: LD_VAR 0 3
58543: RET
// export function ComExit ( unit ) ; var tmp ; begin
58544: LD_INT 0
58546: PPUSH
58547: PPUSH
// if not IsInUnit ( unit ) then
58548: LD_VAR 0 1
58552: PPUSH
58553: CALL_OW 310
58557: NOT
58558: IFFALSE 58562
// exit ;
58560: GO 58622
// tmp := IsInUnit ( unit ) ;
58562: LD_ADDR_VAR 0 3
58566: PUSH
58567: LD_VAR 0 1
58571: PPUSH
58572: CALL_OW 310
58576: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58577: LD_VAR 0 3
58581: PPUSH
58582: CALL_OW 247
58586: PUSH
58587: LD_INT 2
58589: EQUAL
58590: IFFALSE 58603
// ComExitVehicle ( unit ) else
58592: LD_VAR 0 1
58596: PPUSH
58597: CALL_OW 121
58601: GO 58612
// ComExitBuilding ( unit ) ;
58603: LD_VAR 0 1
58607: PPUSH
58608: CALL_OW 122
// result := tmp ;
58612: LD_ADDR_VAR 0 2
58616: PUSH
58617: LD_VAR 0 3
58621: ST_TO_ADDR
// end ;
58622: LD_VAR 0 2
58626: RET
// export function ComExitAll ( units ) ; var i ; begin
58627: LD_INT 0
58629: PPUSH
58630: PPUSH
// if not units then
58631: LD_VAR 0 1
58635: NOT
58636: IFFALSE 58640
// exit ;
58638: GO 58666
// for i in units do
58640: LD_ADDR_VAR 0 3
58644: PUSH
58645: LD_VAR 0 1
58649: PUSH
58650: FOR_IN
58651: IFFALSE 58664
// ComExit ( i ) ;
58653: LD_VAR 0 3
58657: PPUSH
58658: CALL 58544 0 1
58662: GO 58650
58664: POP
58665: POP
// end ;
58666: LD_VAR 0 2
58670: RET
// export function ResetHc ; begin
58671: LD_INT 0
58673: PPUSH
// InitHc ;
58674: CALL_OW 19
// hc_importance := 0 ;
58678: LD_ADDR_OWVAR 32
58682: PUSH
58683: LD_INT 0
58685: ST_TO_ADDR
// end ;
58686: LD_VAR 0 1
58690: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58691: LD_INT 0
58693: PPUSH
58694: PPUSH
58695: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58696: LD_ADDR_VAR 0 6
58700: PUSH
58701: LD_VAR 0 1
58705: PUSH
58706: LD_VAR 0 3
58710: PLUS
58711: PUSH
58712: LD_INT 2
58714: DIV
58715: ST_TO_ADDR
// if _x < 0 then
58716: LD_VAR 0 6
58720: PUSH
58721: LD_INT 0
58723: LESS
58724: IFFALSE 58741
// _x := _x * - 1 ;
58726: LD_ADDR_VAR 0 6
58730: PUSH
58731: LD_VAR 0 6
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: MUL
58740: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58741: LD_ADDR_VAR 0 7
58745: PUSH
58746: LD_VAR 0 2
58750: PUSH
58751: LD_VAR 0 4
58755: PLUS
58756: PUSH
58757: LD_INT 2
58759: DIV
58760: ST_TO_ADDR
// if _y < 0 then
58761: LD_VAR 0 7
58765: PUSH
58766: LD_INT 0
58768: LESS
58769: IFFALSE 58786
// _y := _y * - 1 ;
58771: LD_ADDR_VAR 0 7
58775: PUSH
58776: LD_VAR 0 7
58780: PUSH
58781: LD_INT 1
58783: NEG
58784: MUL
58785: ST_TO_ADDR
// result := [ _x , _y ] ;
58786: LD_ADDR_VAR 0 5
58790: PUSH
58791: LD_VAR 0 6
58795: PUSH
58796: LD_VAR 0 7
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: ST_TO_ADDR
// end ;
58805: LD_VAR 0 5
58809: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58810: LD_INT 0
58812: PPUSH
58813: PPUSH
58814: PPUSH
58815: PPUSH
// task := GetTaskList ( unit ) ;
58816: LD_ADDR_VAR 0 7
58820: PUSH
58821: LD_VAR 0 1
58825: PPUSH
58826: CALL_OW 437
58830: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58831: LD_VAR 0 7
58835: NOT
58836: PUSH
58837: LD_VAR 0 1
58841: PPUSH
58842: LD_VAR 0 2
58846: PPUSH
58847: CALL_OW 308
58851: NOT
58852: AND
58853: IFFALSE 58857
// exit ;
58855: GO 58975
// if IsInArea ( unit , area ) then
58857: LD_VAR 0 1
58861: PPUSH
58862: LD_VAR 0 2
58866: PPUSH
58867: CALL_OW 308
58871: IFFALSE 58889
// begin ComMoveToArea ( unit , goAway ) ;
58873: LD_VAR 0 1
58877: PPUSH
58878: LD_VAR 0 3
58882: PPUSH
58883: CALL_OW 113
// exit ;
58887: GO 58975
// end ; if task [ 1 ] [ 1 ] <> M then
58889: LD_VAR 0 7
58893: PUSH
58894: LD_INT 1
58896: ARRAY
58897: PUSH
58898: LD_INT 1
58900: ARRAY
58901: PUSH
58902: LD_STRING M
58904: NONEQUAL
58905: IFFALSE 58909
// exit ;
58907: GO 58975
// x := task [ 1 ] [ 2 ] ;
58909: LD_ADDR_VAR 0 5
58913: PUSH
58914: LD_VAR 0 7
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PUSH
58923: LD_INT 2
58925: ARRAY
58926: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58927: LD_ADDR_VAR 0 6
58931: PUSH
58932: LD_VAR 0 7
58936: PUSH
58937: LD_INT 1
58939: ARRAY
58940: PUSH
58941: LD_INT 3
58943: ARRAY
58944: ST_TO_ADDR
// if InArea ( x , y , area ) then
58945: LD_VAR 0 5
58949: PPUSH
58950: LD_VAR 0 6
58954: PPUSH
58955: LD_VAR 0 2
58959: PPUSH
58960: CALL_OW 309
58964: IFFALSE 58975
// ComStop ( unit ) ;
58966: LD_VAR 0 1
58970: PPUSH
58971: CALL_OW 141
// end ;
58975: LD_VAR 0 4
58979: RET
// export function Abs ( value ) ; begin
58980: LD_INT 0
58982: PPUSH
// result := value ;
58983: LD_ADDR_VAR 0 2
58987: PUSH
58988: LD_VAR 0 1
58992: ST_TO_ADDR
// if value < 0 then
58993: LD_VAR 0 1
58997: PUSH
58998: LD_INT 0
59000: LESS
59001: IFFALSE 59018
// result := value * - 1 ;
59003: LD_ADDR_VAR 0 2
59007: PUSH
59008: LD_VAR 0 1
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: MUL
59017: ST_TO_ADDR
// end ;
59018: LD_VAR 0 2
59022: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59023: LD_INT 0
59025: PPUSH
59026: PPUSH
59027: PPUSH
59028: PPUSH
59029: PPUSH
59030: PPUSH
59031: PPUSH
59032: PPUSH
// if not unit or not building then
59033: LD_VAR 0 1
59037: NOT
59038: PUSH
59039: LD_VAR 0 2
59043: NOT
59044: OR
59045: IFFALSE 59049
// exit ;
59047: GO 59275
// x := GetX ( building ) ;
59049: LD_ADDR_VAR 0 4
59053: PUSH
59054: LD_VAR 0 2
59058: PPUSH
59059: CALL_OW 250
59063: ST_TO_ADDR
// y := GetY ( building ) ;
59064: LD_ADDR_VAR 0 6
59068: PUSH
59069: LD_VAR 0 2
59073: PPUSH
59074: CALL_OW 251
59078: ST_TO_ADDR
// d := GetDir ( building ) ;
59079: LD_ADDR_VAR 0 8
59083: PUSH
59084: LD_VAR 0 2
59088: PPUSH
59089: CALL_OW 254
59093: ST_TO_ADDR
// r := 4 ;
59094: LD_ADDR_VAR 0 9
59098: PUSH
59099: LD_INT 4
59101: ST_TO_ADDR
// for i := 1 to 5 do
59102: LD_ADDR_VAR 0 10
59106: PUSH
59107: DOUBLE
59108: LD_INT 1
59110: DEC
59111: ST_TO_ADDR
59112: LD_INT 5
59114: PUSH
59115: FOR_TO
59116: IFFALSE 59273
// begin _x := ShiftX ( x , d , r + i ) ;
59118: LD_ADDR_VAR 0 5
59122: PUSH
59123: LD_VAR 0 4
59127: PPUSH
59128: LD_VAR 0 8
59132: PPUSH
59133: LD_VAR 0 9
59137: PUSH
59138: LD_VAR 0 10
59142: PLUS
59143: PPUSH
59144: CALL_OW 272
59148: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59149: LD_ADDR_VAR 0 7
59153: PUSH
59154: LD_VAR 0 6
59158: PPUSH
59159: LD_VAR 0 8
59163: PPUSH
59164: LD_VAR 0 9
59168: PUSH
59169: LD_VAR 0 10
59173: PLUS
59174: PPUSH
59175: CALL_OW 273
59179: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59180: LD_VAR 0 5
59184: PPUSH
59185: LD_VAR 0 7
59189: PPUSH
59190: CALL_OW 488
59194: PUSH
59195: LD_VAR 0 5
59199: PPUSH
59200: LD_VAR 0 7
59204: PPUSH
59205: CALL_OW 428
59209: PPUSH
59210: CALL_OW 247
59214: PUSH
59215: LD_INT 3
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: IN
59225: NOT
59226: AND
59227: IFFALSE 59271
// begin ComMoveXY ( unit , _x , _y ) ;
59229: LD_VAR 0 1
59233: PPUSH
59234: LD_VAR 0 5
59238: PPUSH
59239: LD_VAR 0 7
59243: PPUSH
59244: CALL_OW 111
// result := [ _x , _y ] ;
59248: LD_ADDR_VAR 0 3
59252: PUSH
59253: LD_VAR 0 5
59257: PUSH
59258: LD_VAR 0 7
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: ST_TO_ADDR
// exit ;
59267: POP
59268: POP
59269: GO 59275
// end ; end ;
59271: GO 59115
59273: POP
59274: POP
// end ;
59275: LD_VAR 0 3
59279: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59280: LD_INT 0
59282: PPUSH
59283: PPUSH
59284: PPUSH
// result := 0 ;
59285: LD_ADDR_VAR 0 3
59289: PUSH
59290: LD_INT 0
59292: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59293: LD_VAR 0 1
59297: PUSH
59298: LD_INT 0
59300: LESS
59301: PUSH
59302: LD_VAR 0 1
59306: PUSH
59307: LD_INT 8
59309: GREATER
59310: OR
59311: PUSH
59312: LD_VAR 0 2
59316: PUSH
59317: LD_INT 0
59319: LESS
59320: OR
59321: PUSH
59322: LD_VAR 0 2
59326: PUSH
59327: LD_INT 8
59329: GREATER
59330: OR
59331: IFFALSE 59335
// exit ;
59333: GO 59410
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59335: LD_ADDR_VAR 0 4
59339: PUSH
59340: LD_INT 22
59342: PUSH
59343: LD_VAR 0 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PPUSH
59352: CALL_OW 69
59356: PUSH
59357: FOR_IN
59358: IFFALSE 59408
// begin un := UnitShoot ( i ) ;
59360: LD_ADDR_VAR 0 5
59364: PUSH
59365: LD_VAR 0 4
59369: PPUSH
59370: CALL_OW 504
59374: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59375: LD_VAR 0 5
59379: PPUSH
59380: CALL_OW 255
59384: PUSH
59385: LD_VAR 0 1
59389: EQUAL
59390: IFFALSE 59406
// begin result := un ;
59392: LD_ADDR_VAR 0 3
59396: PUSH
59397: LD_VAR 0 5
59401: ST_TO_ADDR
// exit ;
59402: POP
59403: POP
59404: GO 59410
// end ; end ;
59406: GO 59357
59408: POP
59409: POP
// end ;
59410: LD_VAR 0 3
59414: RET
// export function GetCargoBay ( units ) ; begin
59415: LD_INT 0
59417: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59418: LD_ADDR_VAR 0 2
59422: PUSH
59423: LD_VAR 0 1
59427: PPUSH
59428: LD_INT 2
59430: PUSH
59431: LD_INT 34
59433: PUSH
59434: LD_INT 12
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 34
59443: PUSH
59444: LD_INT 51
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 34
59453: PUSH
59454: LD_INT 32
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 34
59463: PUSH
59464: LD_INT 89
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: PPUSH
59478: CALL_OW 72
59482: ST_TO_ADDR
// end ;
59483: LD_VAR 0 2
59487: RET
// export function Negate ( value ) ; begin
59488: LD_INT 0
59490: PPUSH
// result := not value ;
59491: LD_ADDR_VAR 0 2
59495: PUSH
59496: LD_VAR 0 1
59500: NOT
59501: ST_TO_ADDR
// end ;
59502: LD_VAR 0 2
59506: RET
// export function Inc ( value ) ; begin
59507: LD_INT 0
59509: PPUSH
// result := value + 1 ;
59510: LD_ADDR_VAR 0 2
59514: PUSH
59515: LD_VAR 0 1
59519: PUSH
59520: LD_INT 1
59522: PLUS
59523: ST_TO_ADDR
// end ;
59524: LD_VAR 0 2
59528: RET
// export function Dec ( value ) ; begin
59529: LD_INT 0
59531: PPUSH
// result := value - 1 ;
59532: LD_ADDR_VAR 0 2
59536: PUSH
59537: LD_VAR 0 1
59541: PUSH
59542: LD_INT 1
59544: MINUS
59545: ST_TO_ADDR
// end ;
59546: LD_VAR 0 2
59550: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59551: LD_INT 0
59553: PPUSH
59554: PPUSH
59555: PPUSH
59556: PPUSH
59557: PPUSH
59558: PPUSH
59559: PPUSH
59560: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59561: LD_VAR 0 1
59565: PPUSH
59566: LD_VAR 0 2
59570: PPUSH
59571: CALL_OW 488
59575: NOT
59576: PUSH
59577: LD_VAR 0 3
59581: PPUSH
59582: LD_VAR 0 4
59586: PPUSH
59587: CALL_OW 488
59591: NOT
59592: OR
59593: IFFALSE 59606
// begin result := - 1 ;
59595: LD_ADDR_VAR 0 5
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: ST_TO_ADDR
// exit ;
59604: GO 59841
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59606: LD_ADDR_VAR 0 12
59610: PUSH
59611: LD_VAR 0 1
59615: PPUSH
59616: LD_VAR 0 2
59620: PPUSH
59621: LD_VAR 0 3
59625: PPUSH
59626: LD_VAR 0 4
59630: PPUSH
59631: CALL 58691 0 4
59635: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59636: LD_ADDR_VAR 0 11
59640: PUSH
59641: LD_VAR 0 1
59645: PPUSH
59646: LD_VAR 0 2
59650: PPUSH
59651: LD_VAR 0 12
59655: PUSH
59656: LD_INT 1
59658: ARRAY
59659: PPUSH
59660: LD_VAR 0 12
59664: PUSH
59665: LD_INT 2
59667: ARRAY
59668: PPUSH
59669: CALL_OW 298
59673: ST_TO_ADDR
// distance := 9999 ;
59674: LD_ADDR_VAR 0 10
59678: PUSH
59679: LD_INT 9999
59681: ST_TO_ADDR
// for i := 0 to 5 do
59682: LD_ADDR_VAR 0 6
59686: PUSH
59687: DOUBLE
59688: LD_INT 0
59690: DEC
59691: ST_TO_ADDR
59692: LD_INT 5
59694: PUSH
59695: FOR_TO
59696: IFFALSE 59839
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59698: LD_ADDR_VAR 0 7
59702: PUSH
59703: LD_VAR 0 1
59707: PPUSH
59708: LD_VAR 0 6
59712: PPUSH
59713: LD_VAR 0 11
59717: PPUSH
59718: CALL_OW 272
59722: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59723: LD_ADDR_VAR 0 8
59727: PUSH
59728: LD_VAR 0 2
59732: PPUSH
59733: LD_VAR 0 6
59737: PPUSH
59738: LD_VAR 0 11
59742: PPUSH
59743: CALL_OW 273
59747: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59748: LD_VAR 0 7
59752: PPUSH
59753: LD_VAR 0 8
59757: PPUSH
59758: CALL_OW 488
59762: NOT
59763: IFFALSE 59767
// continue ;
59765: GO 59695
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59767: LD_ADDR_VAR 0 9
59771: PUSH
59772: LD_VAR 0 12
59776: PUSH
59777: LD_INT 1
59779: ARRAY
59780: PPUSH
59781: LD_VAR 0 12
59785: PUSH
59786: LD_INT 2
59788: ARRAY
59789: PPUSH
59790: LD_VAR 0 7
59794: PPUSH
59795: LD_VAR 0 8
59799: PPUSH
59800: CALL_OW 298
59804: ST_TO_ADDR
// if tmp < distance then
59805: LD_VAR 0 9
59809: PUSH
59810: LD_VAR 0 10
59814: LESS
59815: IFFALSE 59837
// begin result := i ;
59817: LD_ADDR_VAR 0 5
59821: PUSH
59822: LD_VAR 0 6
59826: ST_TO_ADDR
// distance := tmp ;
59827: LD_ADDR_VAR 0 10
59831: PUSH
59832: LD_VAR 0 9
59836: ST_TO_ADDR
// end ; end ;
59837: GO 59695
59839: POP
59840: POP
// end ;
59841: LD_VAR 0 5
59845: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59846: LD_INT 0
59848: PPUSH
59849: PPUSH
// if not driver or not IsInUnit ( driver ) then
59850: LD_VAR 0 1
59854: NOT
59855: PUSH
59856: LD_VAR 0 1
59860: PPUSH
59861: CALL_OW 310
59865: NOT
59866: OR
59867: IFFALSE 59871
// exit ;
59869: GO 59961
// vehicle := IsInUnit ( driver ) ;
59871: LD_ADDR_VAR 0 3
59875: PUSH
59876: LD_VAR 0 1
59880: PPUSH
59881: CALL_OW 310
59885: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59886: LD_VAR 0 1
59890: PPUSH
59891: LD_STRING \
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: PUSH
59921: LD_STRING E
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: LD_VAR 0 3
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PPUSH
59957: CALL_OW 446
// end ;
59961: LD_VAR 0 2
59965: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59966: LD_INT 0
59968: PPUSH
59969: PPUSH
// if not driver or not IsInUnit ( driver ) then
59970: LD_VAR 0 1
59974: NOT
59975: PUSH
59976: LD_VAR 0 1
59980: PPUSH
59981: CALL_OW 310
59985: NOT
59986: OR
59987: IFFALSE 59991
// exit ;
59989: GO 60081
// vehicle := IsInUnit ( driver ) ;
59991: LD_ADDR_VAR 0 3
59995: PUSH
59996: LD_VAR 0 1
60000: PPUSH
60001: CALL_OW 310
60005: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60006: LD_VAR 0 1
60010: PPUSH
60011: LD_STRING \
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: PUSH
60041: LD_STRING E
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_VAR 0 3
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 0
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PPUSH
60077: CALL_OW 447
// end ;
60081: LD_VAR 0 2
60085: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60086: LD_INT 0
60088: PPUSH
60089: PPUSH
60090: PPUSH
// tmp := [ ] ;
60091: LD_ADDR_VAR 0 5
60095: PUSH
60096: EMPTY
60097: ST_TO_ADDR
// for i in units do
60098: LD_ADDR_VAR 0 4
60102: PUSH
60103: LD_VAR 0 1
60107: PUSH
60108: FOR_IN
60109: IFFALSE 60147
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60111: LD_ADDR_VAR 0 5
60115: PUSH
60116: LD_VAR 0 5
60120: PPUSH
60121: LD_VAR 0 5
60125: PUSH
60126: LD_INT 1
60128: PLUS
60129: PPUSH
60130: LD_VAR 0 4
60134: PPUSH
60135: CALL_OW 256
60139: PPUSH
60140: CALL_OW 2
60144: ST_TO_ADDR
60145: GO 60108
60147: POP
60148: POP
// if not tmp then
60149: LD_VAR 0 5
60153: NOT
60154: IFFALSE 60158
// exit ;
60156: GO 60206
// if asc then
60158: LD_VAR 0 2
60162: IFFALSE 60186
// result := SortListByListAsc ( units , tmp ) else
60164: LD_ADDR_VAR 0 3
60168: PUSH
60169: LD_VAR 0 1
60173: PPUSH
60174: LD_VAR 0 5
60178: PPUSH
60179: CALL_OW 76
60183: ST_TO_ADDR
60184: GO 60206
// result := SortListByListDesc ( units , tmp ) ;
60186: LD_ADDR_VAR 0 3
60190: PUSH
60191: LD_VAR 0 1
60195: PPUSH
60196: LD_VAR 0 5
60200: PPUSH
60201: CALL_OW 77
60205: ST_TO_ADDR
// end ;
60206: LD_VAR 0 3
60210: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60211: LD_INT 0
60213: PPUSH
60214: PPUSH
// task := GetTaskList ( mech ) ;
60215: LD_ADDR_VAR 0 4
60219: PUSH
60220: LD_VAR 0 1
60224: PPUSH
60225: CALL_OW 437
60229: ST_TO_ADDR
// if not task then
60230: LD_VAR 0 4
60234: NOT
60235: IFFALSE 60239
// exit ;
60237: GO 60281
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60239: LD_ADDR_VAR 0 3
60243: PUSH
60244: LD_VAR 0 4
60248: PUSH
60249: LD_INT 1
60251: ARRAY
60252: PUSH
60253: LD_INT 1
60255: ARRAY
60256: PUSH
60257: LD_STRING r
60259: EQUAL
60260: PUSH
60261: LD_VAR 0 4
60265: PUSH
60266: LD_INT 1
60268: ARRAY
60269: PUSH
60270: LD_INT 4
60272: ARRAY
60273: PUSH
60274: LD_VAR 0 2
60278: EQUAL
60279: AND
60280: ST_TO_ADDR
// end ;
60281: LD_VAR 0 3
60285: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60286: LD_INT 0
60288: PPUSH
// SetDir ( unit , d ) ;
60289: LD_VAR 0 1
60293: PPUSH
60294: LD_VAR 0 4
60298: PPUSH
60299: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60303: LD_VAR 0 1
60307: PPUSH
60308: LD_VAR 0 2
60312: PPUSH
60313: LD_VAR 0 3
60317: PPUSH
60318: LD_VAR 0 5
60322: PPUSH
60323: CALL_OW 48
// end ;
60327: LD_VAR 0 6
60331: RET
// export function ToNaturalNumber ( number ) ; begin
60332: LD_INT 0
60334: PPUSH
// result := number div 1 ;
60335: LD_ADDR_VAR 0 2
60339: PUSH
60340: LD_VAR 0 1
60344: PUSH
60345: LD_INT 1
60347: DIV
60348: ST_TO_ADDR
// if number < 0 then
60349: LD_VAR 0 1
60353: PUSH
60354: LD_INT 0
60356: LESS
60357: IFFALSE 60367
// result := 0 ;
60359: LD_ADDR_VAR 0 2
60363: PUSH
60364: LD_INT 0
60366: ST_TO_ADDR
// end ;
60367: LD_VAR 0 2
60371: RET
// export function SortByClass ( units , class ) ; var un ; begin
60372: LD_INT 0
60374: PPUSH
60375: PPUSH
// if not units or not class then
60376: LD_VAR 0 1
60380: NOT
60381: PUSH
60382: LD_VAR 0 2
60386: NOT
60387: OR
60388: IFFALSE 60392
// exit ;
60390: GO 60487
// result := [ ] ;
60392: LD_ADDR_VAR 0 3
60396: PUSH
60397: EMPTY
60398: ST_TO_ADDR
// for un in units do
60399: LD_ADDR_VAR 0 4
60403: PUSH
60404: LD_VAR 0 1
60408: PUSH
60409: FOR_IN
60410: IFFALSE 60485
// if GetClass ( un ) = class then
60412: LD_VAR 0 4
60416: PPUSH
60417: CALL_OW 257
60421: PUSH
60422: LD_VAR 0 2
60426: EQUAL
60427: IFFALSE 60454
// result := Insert ( result , 1 , un ) else
60429: LD_ADDR_VAR 0 3
60433: PUSH
60434: LD_VAR 0 3
60438: PPUSH
60439: LD_INT 1
60441: PPUSH
60442: LD_VAR 0 4
60446: PPUSH
60447: CALL_OW 2
60451: ST_TO_ADDR
60452: GO 60483
// result := Replace ( result , result + 1 , un ) ;
60454: LD_ADDR_VAR 0 3
60458: PUSH
60459: LD_VAR 0 3
60463: PPUSH
60464: LD_VAR 0 3
60468: PUSH
60469: LD_INT 1
60471: PLUS
60472: PPUSH
60473: LD_VAR 0 4
60477: PPUSH
60478: CALL_OW 1
60482: ST_TO_ADDR
60483: GO 60409
60485: POP
60486: POP
// end ;
60487: LD_VAR 0 3
60491: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60492: LD_INT 0
60494: PPUSH
60495: PPUSH
60496: PPUSH
60497: PPUSH
60498: PPUSH
60499: PPUSH
60500: PPUSH
// result := [ ] ;
60501: LD_ADDR_VAR 0 4
60505: PUSH
60506: EMPTY
60507: ST_TO_ADDR
// if x - r < 0 then
60508: LD_VAR 0 1
60512: PUSH
60513: LD_VAR 0 3
60517: MINUS
60518: PUSH
60519: LD_INT 0
60521: LESS
60522: IFFALSE 60534
// min_x := 0 else
60524: LD_ADDR_VAR 0 8
60528: PUSH
60529: LD_INT 0
60531: ST_TO_ADDR
60532: GO 60550
// min_x := x - r ;
60534: LD_ADDR_VAR 0 8
60538: PUSH
60539: LD_VAR 0 1
60543: PUSH
60544: LD_VAR 0 3
60548: MINUS
60549: ST_TO_ADDR
// if y - r < 0 then
60550: LD_VAR 0 2
60554: PUSH
60555: LD_VAR 0 3
60559: MINUS
60560: PUSH
60561: LD_INT 0
60563: LESS
60564: IFFALSE 60576
// min_y := 0 else
60566: LD_ADDR_VAR 0 7
60570: PUSH
60571: LD_INT 0
60573: ST_TO_ADDR
60574: GO 60592
// min_y := y - r ;
60576: LD_ADDR_VAR 0 7
60580: PUSH
60581: LD_VAR 0 2
60585: PUSH
60586: LD_VAR 0 3
60590: MINUS
60591: ST_TO_ADDR
// max_x := x + r ;
60592: LD_ADDR_VAR 0 9
60596: PUSH
60597: LD_VAR 0 1
60601: PUSH
60602: LD_VAR 0 3
60606: PLUS
60607: ST_TO_ADDR
// max_y := y + r ;
60608: LD_ADDR_VAR 0 10
60612: PUSH
60613: LD_VAR 0 2
60617: PUSH
60618: LD_VAR 0 3
60622: PLUS
60623: ST_TO_ADDR
// for _x = min_x to max_x do
60624: LD_ADDR_VAR 0 5
60628: PUSH
60629: DOUBLE
60630: LD_VAR 0 8
60634: DEC
60635: ST_TO_ADDR
60636: LD_VAR 0 9
60640: PUSH
60641: FOR_TO
60642: IFFALSE 60743
// for _y = min_y to max_y do
60644: LD_ADDR_VAR 0 6
60648: PUSH
60649: DOUBLE
60650: LD_VAR 0 7
60654: DEC
60655: ST_TO_ADDR
60656: LD_VAR 0 10
60660: PUSH
60661: FOR_TO
60662: IFFALSE 60739
// begin if not ValidHex ( _x , _y ) then
60664: LD_VAR 0 5
60668: PPUSH
60669: LD_VAR 0 6
60673: PPUSH
60674: CALL_OW 488
60678: NOT
60679: IFFALSE 60683
// continue ;
60681: GO 60661
// if GetResourceTypeXY ( _x , _y ) then
60683: LD_VAR 0 5
60687: PPUSH
60688: LD_VAR 0 6
60692: PPUSH
60693: CALL_OW 283
60697: IFFALSE 60737
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60699: LD_ADDR_VAR 0 4
60703: PUSH
60704: LD_VAR 0 4
60708: PPUSH
60709: LD_VAR 0 4
60713: PUSH
60714: LD_INT 1
60716: PLUS
60717: PPUSH
60718: LD_VAR 0 5
60722: PUSH
60723: LD_VAR 0 6
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PPUSH
60732: CALL_OW 1
60736: ST_TO_ADDR
// end ;
60737: GO 60661
60739: POP
60740: POP
60741: GO 60641
60743: POP
60744: POP
// end ;
60745: LD_VAR 0 4
60749: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60750: LD_INT 0
60752: PPUSH
60753: PPUSH
60754: PPUSH
60755: PPUSH
60756: PPUSH
60757: PPUSH
60758: PPUSH
60759: PPUSH
// if not units then
60760: LD_VAR 0 1
60764: NOT
60765: IFFALSE 60769
// exit ;
60767: GO 61293
// result := UnitFilter ( units , [ f_ok ] ) ;
60769: LD_ADDR_VAR 0 3
60773: PUSH
60774: LD_VAR 0 1
60778: PPUSH
60779: LD_INT 50
60781: PUSH
60782: EMPTY
60783: LIST
60784: PPUSH
60785: CALL_OW 72
60789: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60790: LD_ADDR_VAR 0 8
60794: PUSH
60795: LD_VAR 0 1
60799: PUSH
60800: LD_INT 1
60802: ARRAY
60803: PPUSH
60804: CALL_OW 255
60808: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60809: LD_ADDR_VAR 0 10
60813: PUSH
60814: LD_INT 29
60816: PUSH
60817: LD_INT 91
60819: PUSH
60820: LD_INT 49
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: ST_TO_ADDR
// if not result then
60828: LD_VAR 0 3
60832: NOT
60833: IFFALSE 60837
// exit ;
60835: GO 61293
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60837: LD_ADDR_VAR 0 5
60841: PUSH
60842: LD_INT 81
60844: PUSH
60845: LD_VAR 0 8
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PPUSH
60854: CALL_OW 69
60858: ST_TO_ADDR
// for i in result do
60859: LD_ADDR_VAR 0 4
60863: PUSH
60864: LD_VAR 0 3
60868: PUSH
60869: FOR_IN
60870: IFFALSE 61291
// begin tag := GetTag ( i ) + 1 ;
60872: LD_ADDR_VAR 0 9
60876: PUSH
60877: LD_VAR 0 4
60881: PPUSH
60882: CALL_OW 110
60886: PUSH
60887: LD_INT 1
60889: PLUS
60890: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60891: LD_ADDR_VAR 0 7
60895: PUSH
60896: LD_VAR 0 4
60900: PPUSH
60901: CALL_OW 250
60905: PPUSH
60906: LD_VAR 0 4
60910: PPUSH
60911: CALL_OW 251
60915: PPUSH
60916: LD_INT 6
60918: PPUSH
60919: CALL 60492 0 3
60923: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60924: LD_VAR 0 4
60928: PPUSH
60929: CALL_OW 247
60933: PUSH
60934: LD_INT 2
60936: EQUAL
60937: PUSH
60938: LD_VAR 0 7
60942: AND
60943: PUSH
60944: LD_VAR 0 4
60948: PPUSH
60949: CALL_OW 264
60953: PUSH
60954: LD_VAR 0 10
60958: IN
60959: NOT
60960: AND
60961: IFFALSE 61000
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60963: LD_VAR 0 4
60967: PPUSH
60968: LD_VAR 0 7
60972: PUSH
60973: LD_INT 1
60975: ARRAY
60976: PUSH
60977: LD_INT 1
60979: ARRAY
60980: PPUSH
60981: LD_VAR 0 7
60985: PUSH
60986: LD_INT 1
60988: ARRAY
60989: PUSH
60990: LD_INT 2
60992: ARRAY
60993: PPUSH
60994: CALL_OW 116
60998: GO 61289
// if path > tag then
61000: LD_VAR 0 2
61004: PUSH
61005: LD_VAR 0 9
61009: GREATER
61010: IFFALSE 61218
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61012: LD_ADDR_VAR 0 6
61016: PUSH
61017: LD_VAR 0 5
61021: PPUSH
61022: LD_INT 91
61024: PUSH
61025: LD_VAR 0 4
61029: PUSH
61030: LD_INT 8
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: LIST
61037: PPUSH
61038: CALL_OW 72
61042: ST_TO_ADDR
// if nearEnemy then
61043: LD_VAR 0 6
61047: IFFALSE 61116
// begin if GetWeapon ( i ) = ru_time_lapser then
61049: LD_VAR 0 4
61053: PPUSH
61054: CALL_OW 264
61058: PUSH
61059: LD_INT 49
61061: EQUAL
61062: IFFALSE 61090
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61064: LD_VAR 0 4
61068: PPUSH
61069: LD_VAR 0 6
61073: PPUSH
61074: LD_VAR 0 4
61078: PPUSH
61079: CALL_OW 74
61083: PPUSH
61084: CALL_OW 112
61088: GO 61114
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61090: LD_VAR 0 4
61094: PPUSH
61095: LD_VAR 0 6
61099: PPUSH
61100: LD_VAR 0 4
61104: PPUSH
61105: CALL_OW 74
61109: PPUSH
61110: CALL 62218 0 2
// end else
61114: GO 61216
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61116: LD_VAR 0 4
61120: PPUSH
61121: LD_VAR 0 2
61125: PUSH
61126: LD_VAR 0 9
61130: ARRAY
61131: PUSH
61132: LD_INT 1
61134: ARRAY
61135: PPUSH
61136: LD_VAR 0 2
61140: PUSH
61141: LD_VAR 0 9
61145: ARRAY
61146: PUSH
61147: LD_INT 2
61149: ARRAY
61150: PPUSH
61151: CALL_OW 297
61155: PUSH
61156: LD_INT 6
61158: GREATER
61159: IFFALSE 61202
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61161: LD_VAR 0 4
61165: PPUSH
61166: LD_VAR 0 2
61170: PUSH
61171: LD_VAR 0 9
61175: ARRAY
61176: PUSH
61177: LD_INT 1
61179: ARRAY
61180: PPUSH
61181: LD_VAR 0 2
61185: PUSH
61186: LD_VAR 0 9
61190: ARRAY
61191: PUSH
61192: LD_INT 2
61194: ARRAY
61195: PPUSH
61196: CALL_OW 114
61200: GO 61216
// SetTag ( i , tag ) ;
61202: LD_VAR 0 4
61206: PPUSH
61207: LD_VAR 0 9
61211: PPUSH
61212: CALL_OW 109
// end else
61216: GO 61289
// if enemy then
61218: LD_VAR 0 5
61222: IFFALSE 61289
// begin if GetWeapon ( i ) = ru_time_lapser then
61224: LD_VAR 0 4
61228: PPUSH
61229: CALL_OW 264
61233: PUSH
61234: LD_INT 49
61236: EQUAL
61237: IFFALSE 61265
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61239: LD_VAR 0 4
61243: PPUSH
61244: LD_VAR 0 5
61248: PPUSH
61249: LD_VAR 0 4
61253: PPUSH
61254: CALL_OW 74
61258: PPUSH
61259: CALL_OW 112
61263: GO 61289
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61265: LD_VAR 0 4
61269: PPUSH
61270: LD_VAR 0 5
61274: PPUSH
61275: LD_VAR 0 4
61279: PPUSH
61280: CALL_OW 74
61284: PPUSH
61285: CALL 62218 0 2
// end ; end ;
61289: GO 60869
61291: POP
61292: POP
// end ;
61293: LD_VAR 0 3
61297: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61298: LD_INT 0
61300: PPUSH
61301: PPUSH
61302: PPUSH
// if not unit or IsInUnit ( unit ) then
61303: LD_VAR 0 1
61307: NOT
61308: PUSH
61309: LD_VAR 0 1
61313: PPUSH
61314: CALL_OW 310
61318: OR
61319: IFFALSE 61323
// exit ;
61321: GO 61414
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61323: LD_ADDR_VAR 0 4
61327: PUSH
61328: LD_VAR 0 1
61332: PPUSH
61333: CALL_OW 250
61337: PPUSH
61338: LD_VAR 0 2
61342: PPUSH
61343: LD_INT 1
61345: PPUSH
61346: CALL_OW 272
61350: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61351: LD_ADDR_VAR 0 5
61355: PUSH
61356: LD_VAR 0 1
61360: PPUSH
61361: CALL_OW 251
61365: PPUSH
61366: LD_VAR 0 2
61370: PPUSH
61371: LD_INT 1
61373: PPUSH
61374: CALL_OW 273
61378: ST_TO_ADDR
// if ValidHex ( x , y ) then
61379: LD_VAR 0 4
61383: PPUSH
61384: LD_VAR 0 5
61388: PPUSH
61389: CALL_OW 488
61393: IFFALSE 61414
// ComTurnXY ( unit , x , y ) ;
61395: LD_VAR 0 1
61399: PPUSH
61400: LD_VAR 0 4
61404: PPUSH
61405: LD_VAR 0 5
61409: PPUSH
61410: CALL_OW 118
// end ;
61414: LD_VAR 0 3
61418: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61419: LD_INT 0
61421: PPUSH
61422: PPUSH
// result := false ;
61423: LD_ADDR_VAR 0 3
61427: PUSH
61428: LD_INT 0
61430: ST_TO_ADDR
// if not units then
61431: LD_VAR 0 2
61435: NOT
61436: IFFALSE 61440
// exit ;
61438: GO 61485
// for i in units do
61440: LD_ADDR_VAR 0 4
61444: PUSH
61445: LD_VAR 0 2
61449: PUSH
61450: FOR_IN
61451: IFFALSE 61483
// if See ( side , i ) then
61453: LD_VAR 0 1
61457: PPUSH
61458: LD_VAR 0 4
61462: PPUSH
61463: CALL_OW 292
61467: IFFALSE 61481
// begin result := true ;
61469: LD_ADDR_VAR 0 3
61473: PUSH
61474: LD_INT 1
61476: ST_TO_ADDR
// exit ;
61477: POP
61478: POP
61479: GO 61485
// end ;
61481: GO 61450
61483: POP
61484: POP
// end ;
61485: LD_VAR 0 3
61489: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61490: LD_INT 0
61492: PPUSH
61493: PPUSH
61494: PPUSH
61495: PPUSH
// if not unit or not points then
61496: LD_VAR 0 1
61500: NOT
61501: PUSH
61502: LD_VAR 0 2
61506: NOT
61507: OR
61508: IFFALSE 61512
// exit ;
61510: GO 61602
// dist := 99999 ;
61512: LD_ADDR_VAR 0 5
61516: PUSH
61517: LD_INT 99999
61519: ST_TO_ADDR
// for i in points do
61520: LD_ADDR_VAR 0 4
61524: PUSH
61525: LD_VAR 0 2
61529: PUSH
61530: FOR_IN
61531: IFFALSE 61600
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61533: LD_ADDR_VAR 0 6
61537: PUSH
61538: LD_VAR 0 1
61542: PPUSH
61543: LD_VAR 0 4
61547: PUSH
61548: LD_INT 1
61550: ARRAY
61551: PPUSH
61552: LD_VAR 0 4
61556: PUSH
61557: LD_INT 2
61559: ARRAY
61560: PPUSH
61561: CALL_OW 297
61565: ST_TO_ADDR
// if tmpDist < dist then
61566: LD_VAR 0 6
61570: PUSH
61571: LD_VAR 0 5
61575: LESS
61576: IFFALSE 61598
// begin result := i ;
61578: LD_ADDR_VAR 0 3
61582: PUSH
61583: LD_VAR 0 4
61587: ST_TO_ADDR
// dist := tmpDist ;
61588: LD_ADDR_VAR 0 5
61592: PUSH
61593: LD_VAR 0 6
61597: ST_TO_ADDR
// end ; end ;
61598: GO 61530
61600: POP
61601: POP
// end ;
61602: LD_VAR 0 3
61606: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61607: LD_INT 0
61609: PPUSH
// uc_side := side ;
61610: LD_ADDR_OWVAR 20
61614: PUSH
61615: LD_VAR 0 1
61619: ST_TO_ADDR
// uc_nation := 3 ;
61620: LD_ADDR_OWVAR 21
61624: PUSH
61625: LD_INT 3
61627: ST_TO_ADDR
// vc_chassis := 25 ;
61628: LD_ADDR_OWVAR 37
61632: PUSH
61633: LD_INT 25
61635: ST_TO_ADDR
// vc_engine := engine_siberite ;
61636: LD_ADDR_OWVAR 39
61640: PUSH
61641: LD_INT 3
61643: ST_TO_ADDR
// vc_control := control_computer ;
61644: LD_ADDR_OWVAR 38
61648: PUSH
61649: LD_INT 3
61651: ST_TO_ADDR
// vc_weapon := 59 ;
61652: LD_ADDR_OWVAR 40
61656: PUSH
61657: LD_INT 59
61659: ST_TO_ADDR
// result := CreateVehicle ;
61660: LD_ADDR_VAR 0 5
61664: PUSH
61665: CALL_OW 45
61669: ST_TO_ADDR
// SetDir ( result , d ) ;
61670: LD_VAR 0 5
61674: PPUSH
61675: LD_VAR 0 4
61679: PPUSH
61680: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61684: LD_VAR 0 5
61688: PPUSH
61689: LD_VAR 0 2
61693: PPUSH
61694: LD_VAR 0 3
61698: PPUSH
61699: LD_INT 0
61701: PPUSH
61702: CALL_OW 48
// end ;
61706: LD_VAR 0 5
61710: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61711: LD_INT 0
61713: PPUSH
61714: PPUSH
61715: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61716: LD_ADDR_VAR 0 2
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 0
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61739: LD_VAR 0 1
61743: NOT
61744: PUSH
61745: LD_VAR 0 1
61749: PPUSH
61750: CALL_OW 264
61754: PUSH
61755: LD_INT 12
61757: PUSH
61758: LD_INT 51
61760: PUSH
61761: LD_INT 32
61763: PUSH
61764: LD_INT 89
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: IN
61773: NOT
61774: OR
61775: IFFALSE 61779
// exit ;
61777: GO 61877
// for i := 1 to 3 do
61779: LD_ADDR_VAR 0 3
61783: PUSH
61784: DOUBLE
61785: LD_INT 1
61787: DEC
61788: ST_TO_ADDR
61789: LD_INT 3
61791: PUSH
61792: FOR_TO
61793: IFFALSE 61875
// begin tmp := GetCargo ( cargo , i ) ;
61795: LD_ADDR_VAR 0 4
61799: PUSH
61800: LD_VAR 0 1
61804: PPUSH
61805: LD_VAR 0 3
61809: PPUSH
61810: CALL_OW 289
61814: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61815: LD_ADDR_VAR 0 2
61819: PUSH
61820: LD_VAR 0 2
61824: PPUSH
61825: LD_VAR 0 3
61829: PPUSH
61830: LD_VAR 0 4
61834: PPUSH
61835: CALL_OW 1
61839: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61840: LD_ADDR_VAR 0 2
61844: PUSH
61845: LD_VAR 0 2
61849: PPUSH
61850: LD_INT 4
61852: PPUSH
61853: LD_VAR 0 2
61857: PUSH
61858: LD_INT 4
61860: ARRAY
61861: PUSH
61862: LD_VAR 0 4
61866: PLUS
61867: PPUSH
61868: CALL_OW 1
61872: ST_TO_ADDR
// end ;
61873: GO 61792
61875: POP
61876: POP
// end ;
61877: LD_VAR 0 2
61881: RET
// export function Length ( array ) ; begin
61882: LD_INT 0
61884: PPUSH
// result := array + 0 ;
61885: LD_ADDR_VAR 0 2
61889: PUSH
61890: LD_VAR 0 1
61894: PUSH
61895: LD_INT 0
61897: PLUS
61898: ST_TO_ADDR
// end ;
61899: LD_VAR 0 2
61903: RET
// export function PrepareArray ( array ) ; begin
61904: LD_INT 0
61906: PPUSH
// result := array diff 0 ;
61907: LD_ADDR_VAR 0 2
61911: PUSH
61912: LD_VAR 0 1
61916: PUSH
61917: LD_INT 0
61919: DIFF
61920: ST_TO_ADDR
// if not result [ 1 ] then
61921: LD_VAR 0 2
61925: PUSH
61926: LD_INT 1
61928: ARRAY
61929: NOT
61930: IFFALSE 61950
// result := Delete ( result , 1 ) ;
61932: LD_ADDR_VAR 0 2
61936: PUSH
61937: LD_VAR 0 2
61941: PPUSH
61942: LD_INT 1
61944: PPUSH
61945: CALL_OW 3
61949: ST_TO_ADDR
// end ;
61950: LD_VAR 0 2
61954: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61955: LD_INT 0
61957: PPUSH
61958: PPUSH
61959: PPUSH
61960: PPUSH
// sibRocketRange := 25 ;
61961: LD_ADDR_VAR 0 6
61965: PUSH
61966: LD_INT 25
61968: ST_TO_ADDR
// result := false ;
61969: LD_ADDR_VAR 0 4
61973: PUSH
61974: LD_INT 0
61976: ST_TO_ADDR
// for i := 0 to 5 do
61977: LD_ADDR_VAR 0 5
61981: PUSH
61982: DOUBLE
61983: LD_INT 0
61985: DEC
61986: ST_TO_ADDR
61987: LD_INT 5
61989: PUSH
61990: FOR_TO
61991: IFFALSE 62058
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61993: LD_VAR 0 1
61997: PPUSH
61998: LD_VAR 0 5
62002: PPUSH
62003: LD_VAR 0 6
62007: PPUSH
62008: CALL_OW 272
62012: PPUSH
62013: LD_VAR 0 2
62017: PPUSH
62018: LD_VAR 0 5
62022: PPUSH
62023: LD_VAR 0 6
62027: PPUSH
62028: CALL_OW 273
62032: PPUSH
62033: LD_VAR 0 3
62037: PPUSH
62038: CALL_OW 309
62042: IFFALSE 62056
// begin result := true ;
62044: LD_ADDR_VAR 0 4
62048: PUSH
62049: LD_INT 1
62051: ST_TO_ADDR
// exit ;
62052: POP
62053: POP
62054: GO 62060
// end ;
62056: GO 61990
62058: POP
62059: POP
// end ;
62060: LD_VAR 0 4
62064: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62065: LD_INT 0
62067: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62068: LD_VAR 0 1
62072: PPUSH
62073: LD_VAR 0 2
62077: PPUSH
62078: LD_INT 0
62080: PPUSH
62081: LD_INT 0
62083: PPUSH
62084: LD_INT 1
62086: PPUSH
62087: LD_INT 0
62089: PPUSH
62090: CALL_OW 587
// end ;
62094: LD_VAR 0 3
62098: RET
// export function CenterOnNow ( unit ) ; begin
62099: LD_INT 0
62101: PPUSH
// result := IsInUnit ( unit ) ;
62102: LD_ADDR_VAR 0 2
62106: PUSH
62107: LD_VAR 0 1
62111: PPUSH
62112: CALL_OW 310
62116: ST_TO_ADDR
// if not result then
62117: LD_VAR 0 2
62121: NOT
62122: IFFALSE 62134
// result := unit ;
62124: LD_ADDR_VAR 0 2
62128: PUSH
62129: LD_VAR 0 1
62133: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62134: LD_VAR 0 1
62138: PPUSH
62139: CALL_OW 87
// end ;
62143: LD_VAR 0 2
62147: RET
// export function ComMoveHex ( unit , hex ) ; begin
62148: LD_INT 0
62150: PPUSH
// if not hex then
62151: LD_VAR 0 2
62155: NOT
62156: IFFALSE 62160
// exit ;
62158: GO 62213
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62160: LD_VAR 0 2
62164: PUSH
62165: LD_INT 1
62167: ARRAY
62168: PPUSH
62169: LD_VAR 0 2
62173: PUSH
62174: LD_INT 2
62176: ARRAY
62177: PPUSH
62178: CALL_OW 428
62182: IFFALSE 62186
// exit ;
62184: GO 62213
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62186: LD_VAR 0 1
62190: PPUSH
62191: LD_VAR 0 2
62195: PUSH
62196: LD_INT 1
62198: ARRAY
62199: PPUSH
62200: LD_VAR 0 2
62204: PUSH
62205: LD_INT 2
62207: ARRAY
62208: PPUSH
62209: CALL_OW 111
// end ;
62213: LD_VAR 0 3
62217: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62218: LD_INT 0
62220: PPUSH
62221: PPUSH
62222: PPUSH
// if not unit or not enemy then
62223: LD_VAR 0 1
62227: NOT
62228: PUSH
62229: LD_VAR 0 2
62233: NOT
62234: OR
62235: IFFALSE 62239
// exit ;
62237: GO 62363
// x := GetX ( enemy ) ;
62239: LD_ADDR_VAR 0 4
62243: PUSH
62244: LD_VAR 0 2
62248: PPUSH
62249: CALL_OW 250
62253: ST_TO_ADDR
// y := GetY ( enemy ) ;
62254: LD_ADDR_VAR 0 5
62258: PUSH
62259: LD_VAR 0 2
62263: PPUSH
62264: CALL_OW 251
62268: ST_TO_ADDR
// if ValidHex ( x , y ) then
62269: LD_VAR 0 4
62273: PPUSH
62274: LD_VAR 0 5
62278: PPUSH
62279: CALL_OW 488
62283: IFFALSE 62363
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
62285: LD_VAR 0 2
62289: PPUSH
62290: CALL_OW 247
62294: PUSH
62295: LD_INT 3
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: IN
62305: PUSH
62306: LD_VAR 0 1
62310: PPUSH
62311: CALL_OW 255
62315: PPUSH
62316: LD_VAR 0 2
62320: PPUSH
62321: CALL_OW 292
62325: AND
62326: IFFALSE 62344
// ComAttackUnit ( unit , enemy ) else
62328: LD_VAR 0 1
62332: PPUSH
62333: LD_VAR 0 2
62337: PPUSH
62338: CALL_OW 115
62342: GO 62363
// ComAgressiveMove ( unit , x , y ) ;
62344: LD_VAR 0 1
62348: PPUSH
62349: LD_VAR 0 4
62353: PPUSH
62354: LD_VAR 0 5
62358: PPUSH
62359: CALL_OW 114
// end ;
62363: LD_VAR 0 3
62367: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
62368: LD_INT 0
62370: PPUSH
62371: PPUSH
62372: PPUSH
// list := AreaToList ( area , 0 ) ;
62373: LD_ADDR_VAR 0 5
62377: PUSH
62378: LD_VAR 0 1
62382: PPUSH
62383: LD_INT 0
62385: PPUSH
62386: CALL_OW 517
62390: ST_TO_ADDR
// if not list then
62391: LD_VAR 0 5
62395: NOT
62396: IFFALSE 62400
// exit ;
62398: GO 62530
// if all then
62400: LD_VAR 0 2
62404: IFFALSE 62492
// begin for i := 1 to list [ 1 ] do
62406: LD_ADDR_VAR 0 4
62410: PUSH
62411: DOUBLE
62412: LD_INT 1
62414: DEC
62415: ST_TO_ADDR
62416: LD_VAR 0 5
62420: PUSH
62421: LD_INT 1
62423: ARRAY
62424: PUSH
62425: FOR_TO
62426: IFFALSE 62488
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62428: LD_ADDR_VAR 0 3
62432: PUSH
62433: LD_VAR 0 3
62437: PPUSH
62438: LD_VAR 0 3
62442: PUSH
62443: LD_INT 1
62445: PLUS
62446: PPUSH
62447: LD_VAR 0 5
62451: PUSH
62452: LD_INT 1
62454: ARRAY
62455: PUSH
62456: LD_VAR 0 4
62460: ARRAY
62461: PUSH
62462: LD_VAR 0 5
62466: PUSH
62467: LD_INT 2
62469: ARRAY
62470: PUSH
62471: LD_VAR 0 4
62475: ARRAY
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PPUSH
62481: CALL_OW 1
62485: ST_TO_ADDR
62486: GO 62425
62488: POP
62489: POP
// exit ;
62490: GO 62530
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
62492: LD_ADDR_VAR 0 3
62496: PUSH
62497: LD_VAR 0 5
62501: PUSH
62502: LD_INT 1
62504: ARRAY
62505: PUSH
62506: LD_INT 1
62508: ARRAY
62509: PUSH
62510: LD_VAR 0 5
62514: PUSH
62515: LD_INT 2
62517: ARRAY
62518: PUSH
62519: LD_INT 1
62521: ARRAY
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: ST_TO_ADDR
// end ;
62530: LD_VAR 0 3
62534: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
62535: LD_INT 0
62537: PPUSH
62538: PPUSH
// list := AreaToList ( area , 0 ) ;
62539: LD_ADDR_VAR 0 4
62543: PUSH
62544: LD_VAR 0 1
62548: PPUSH
62549: LD_INT 0
62551: PPUSH
62552: CALL_OW 517
62556: ST_TO_ADDR
// if not list then
62557: LD_VAR 0 4
62561: NOT
62562: IFFALSE 62566
// exit ;
62564: GO 62607
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
62566: LD_ADDR_VAR 0 3
62570: PUSH
62571: LD_VAR 0 4
62575: PUSH
62576: LD_INT 1
62578: ARRAY
62579: PUSH
62580: LD_INT 1
62582: ARRAY
62583: PUSH
62584: LD_VAR 0 4
62588: PUSH
62589: LD_INT 2
62591: ARRAY
62592: PUSH
62593: LD_INT 1
62595: ARRAY
62596: PUSH
62597: LD_VAR 0 2
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: ST_TO_ADDR
// end ;
62607: LD_VAR 0 3
62611: RET
// export function First ( array ) ; begin
62612: LD_INT 0
62614: PPUSH
// if not array then
62615: LD_VAR 0 1
62619: NOT
62620: IFFALSE 62624
// exit ;
62622: GO 62638
// result := array [ 1 ] ;
62624: LD_ADDR_VAR 0 2
62628: PUSH
62629: LD_VAR 0 1
62633: PUSH
62634: LD_INT 1
62636: ARRAY
62637: ST_TO_ADDR
// end ;
62638: LD_VAR 0 2
62642: RET
// export function Last ( array ) ; begin
62643: LD_INT 0
62645: PPUSH
// if not array then
62646: LD_VAR 0 1
62650: NOT
62651: IFFALSE 62655
// exit ;
62653: GO 62671
// result := array [ array ] ;
62655: LD_ADDR_VAR 0 2
62659: PUSH
62660: LD_VAR 0 1
62664: PUSH
62665: LD_VAR 0 1
62669: ARRAY
62670: ST_TO_ADDR
// end ; end_of_file end_of_file
62671: LD_VAR 0 2
62675: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62676: LD_VAR 0 1
62680: PPUSH
62681: LD_VAR 0 2
62685: PPUSH
62686: LD_VAR 0 3
62690: PPUSH
62691: LD_VAR 0 4
62695: PPUSH
62696: LD_VAR 0 5
62700: PPUSH
62701: LD_VAR 0 6
62705: PPUSH
62706: CALL 62890 0 6
// end ;
62710: PPOPN 6
62712: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62713: LD_INT 0
62715: PPUSH
// begin if not units then
62716: LD_VAR 0 1
62720: NOT
62721: IFFALSE 62725
// exit ;
62723: GO 62725
// end ;
62725: PPOPN 7
62727: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
62728: CALL 62794 0 0
// end ; end_of_file
62732: PPOPN 1
62734: END
// export globalGameSaveCounter ; every 0 0$1 do
62735: GO 62737
62737: DISABLE
// begin enable ;
62738: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62739: LD_STRING updateTimer(
62741: PUSH
62742: LD_OWVAR 1
62746: STR
62747: PUSH
62748: LD_STRING );
62750: STR
62751: PPUSH
62752: CALL_OW 559
// end ;
62756: END
// every 0 0$1 do
62757: GO 62759
62759: DISABLE
// begin globalGameSaveCounter := 0 ;
62760: LD_ADDR_EXP 45
62764: PUSH
62765: LD_INT 0
62767: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
62768: LD_STRING setGameSaveCounter(0)
62770: PPUSH
62771: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
62775: LD_STRING initStreamRollete();
62777: PPUSH
62778: CALL_OW 559
// InitStreamMode ;
62782: CALL 64108 0 0
// DefineStreamItems ( false ) ;
62786: LD_INT 0
62788: PPUSH
62789: CALL 64572 0 1
// end ;
62793: END
// export function SOS_MapStart ( ) ; begin
62794: LD_INT 0
62796: PPUSH
// if streamModeActive then
62797: LD_EXP 46
62801: IFFALSE 62810
// DefineStreamItems ( true ) ;
62803: LD_INT 1
62805: PPUSH
62806: CALL 64572 0 1
// UpdateLuaVariables ( ) ;
62810: CALL 62827 0 0
// UpdateFactoryWaypoints ( ) ;
62814: CALL 77441 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62818: CALL 77698 0 0
// end ;
62822: LD_VAR 0 1
62826: RET
// function UpdateLuaVariables ( ) ; begin
62827: LD_INT 0
62829: PPUSH
// if globalGameSaveCounter then
62830: LD_EXP 45
62834: IFFALSE 62868
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
62836: LD_ADDR_EXP 45
62840: PUSH
62841: LD_EXP 45
62845: PPUSH
62846: CALL 59507 0 1
62850: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62851: LD_STRING setGameSaveCounter(
62853: PUSH
62854: LD_EXP 45
62858: STR
62859: PUSH
62860: LD_STRING )
62862: STR
62863: PPUSH
62864: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62868: LD_STRING setGameDifficulty(
62870: PUSH
62871: LD_OWVAR 67
62875: STR
62876: PUSH
62877: LD_STRING )
62879: STR
62880: PPUSH
62881: CALL_OW 559
// end ;
62885: LD_VAR 0 1
62889: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62890: LD_INT 0
62892: PPUSH
// if p2 = stream_mode then
62893: LD_VAR 0 2
62897: PUSH
62898: LD_INT 100
62900: EQUAL
62901: IFFALSE 63904
// begin if not StreamModeActive then
62903: LD_EXP 46
62907: NOT
62908: IFFALSE 62918
// StreamModeActive := true ;
62910: LD_ADDR_EXP 46
62914: PUSH
62915: LD_INT 1
62917: ST_TO_ADDR
// if p3 = 0 then
62918: LD_VAR 0 3
62922: PUSH
62923: LD_INT 0
62925: EQUAL
62926: IFFALSE 62932
// InitStreamMode ;
62928: CALL 64108 0 0
// if p3 = 1 then
62932: LD_VAR 0 3
62936: PUSH
62937: LD_INT 1
62939: EQUAL
62940: IFFALSE 62950
// sRocket := true ;
62942: LD_ADDR_EXP 51
62946: PUSH
62947: LD_INT 1
62949: ST_TO_ADDR
// if p3 = 2 then
62950: LD_VAR 0 3
62954: PUSH
62955: LD_INT 2
62957: EQUAL
62958: IFFALSE 62968
// sSpeed := true ;
62960: LD_ADDR_EXP 50
62964: PUSH
62965: LD_INT 1
62967: ST_TO_ADDR
// if p3 = 3 then
62968: LD_VAR 0 3
62972: PUSH
62973: LD_INT 3
62975: EQUAL
62976: IFFALSE 62986
// sEngine := true ;
62978: LD_ADDR_EXP 52
62982: PUSH
62983: LD_INT 1
62985: ST_TO_ADDR
// if p3 = 4 then
62986: LD_VAR 0 3
62990: PUSH
62991: LD_INT 4
62993: EQUAL
62994: IFFALSE 63004
// sSpec := true ;
62996: LD_ADDR_EXP 49
63000: PUSH
63001: LD_INT 1
63003: ST_TO_ADDR
// if p3 = 5 then
63004: LD_VAR 0 3
63008: PUSH
63009: LD_INT 5
63011: EQUAL
63012: IFFALSE 63022
// sLevel := true ;
63014: LD_ADDR_EXP 53
63018: PUSH
63019: LD_INT 1
63021: ST_TO_ADDR
// if p3 = 6 then
63022: LD_VAR 0 3
63026: PUSH
63027: LD_INT 6
63029: EQUAL
63030: IFFALSE 63040
// sArmoury := true ;
63032: LD_ADDR_EXP 54
63036: PUSH
63037: LD_INT 1
63039: ST_TO_ADDR
// if p3 = 7 then
63040: LD_VAR 0 3
63044: PUSH
63045: LD_INT 7
63047: EQUAL
63048: IFFALSE 63058
// sRadar := true ;
63050: LD_ADDR_EXP 55
63054: PUSH
63055: LD_INT 1
63057: ST_TO_ADDR
// if p3 = 8 then
63058: LD_VAR 0 3
63062: PUSH
63063: LD_INT 8
63065: EQUAL
63066: IFFALSE 63076
// sBunker := true ;
63068: LD_ADDR_EXP 56
63072: PUSH
63073: LD_INT 1
63075: ST_TO_ADDR
// if p3 = 9 then
63076: LD_VAR 0 3
63080: PUSH
63081: LD_INT 9
63083: EQUAL
63084: IFFALSE 63094
// sHack := true ;
63086: LD_ADDR_EXP 57
63090: PUSH
63091: LD_INT 1
63093: ST_TO_ADDR
// if p3 = 10 then
63094: LD_VAR 0 3
63098: PUSH
63099: LD_INT 10
63101: EQUAL
63102: IFFALSE 63112
// sFire := true ;
63104: LD_ADDR_EXP 58
63108: PUSH
63109: LD_INT 1
63111: ST_TO_ADDR
// if p3 = 11 then
63112: LD_VAR 0 3
63116: PUSH
63117: LD_INT 11
63119: EQUAL
63120: IFFALSE 63130
// sRefresh := true ;
63122: LD_ADDR_EXP 59
63126: PUSH
63127: LD_INT 1
63129: ST_TO_ADDR
// if p3 = 12 then
63130: LD_VAR 0 3
63134: PUSH
63135: LD_INT 12
63137: EQUAL
63138: IFFALSE 63148
// sExp := true ;
63140: LD_ADDR_EXP 60
63144: PUSH
63145: LD_INT 1
63147: ST_TO_ADDR
// if p3 = 13 then
63148: LD_VAR 0 3
63152: PUSH
63153: LD_INT 13
63155: EQUAL
63156: IFFALSE 63166
// sDepot := true ;
63158: LD_ADDR_EXP 61
63162: PUSH
63163: LD_INT 1
63165: ST_TO_ADDR
// if p3 = 14 then
63166: LD_VAR 0 3
63170: PUSH
63171: LD_INT 14
63173: EQUAL
63174: IFFALSE 63184
// sFlag := true ;
63176: LD_ADDR_EXP 62
63180: PUSH
63181: LD_INT 1
63183: ST_TO_ADDR
// if p3 = 15 then
63184: LD_VAR 0 3
63188: PUSH
63189: LD_INT 15
63191: EQUAL
63192: IFFALSE 63202
// sKamikadze := true ;
63194: LD_ADDR_EXP 70
63198: PUSH
63199: LD_INT 1
63201: ST_TO_ADDR
// if p3 = 16 then
63202: LD_VAR 0 3
63206: PUSH
63207: LD_INT 16
63209: EQUAL
63210: IFFALSE 63220
// sTroll := true ;
63212: LD_ADDR_EXP 71
63216: PUSH
63217: LD_INT 1
63219: ST_TO_ADDR
// if p3 = 17 then
63220: LD_VAR 0 3
63224: PUSH
63225: LD_INT 17
63227: EQUAL
63228: IFFALSE 63238
// sSlow := true ;
63230: LD_ADDR_EXP 72
63234: PUSH
63235: LD_INT 1
63237: ST_TO_ADDR
// if p3 = 18 then
63238: LD_VAR 0 3
63242: PUSH
63243: LD_INT 18
63245: EQUAL
63246: IFFALSE 63256
// sLack := true ;
63248: LD_ADDR_EXP 73
63252: PUSH
63253: LD_INT 1
63255: ST_TO_ADDR
// if p3 = 19 then
63256: LD_VAR 0 3
63260: PUSH
63261: LD_INT 19
63263: EQUAL
63264: IFFALSE 63274
// sTank := true ;
63266: LD_ADDR_EXP 75
63270: PUSH
63271: LD_INT 1
63273: ST_TO_ADDR
// if p3 = 20 then
63274: LD_VAR 0 3
63278: PUSH
63279: LD_INT 20
63281: EQUAL
63282: IFFALSE 63292
// sRemote := true ;
63284: LD_ADDR_EXP 76
63288: PUSH
63289: LD_INT 1
63291: ST_TO_ADDR
// if p3 = 21 then
63292: LD_VAR 0 3
63296: PUSH
63297: LD_INT 21
63299: EQUAL
63300: IFFALSE 63310
// sPowell := true ;
63302: LD_ADDR_EXP 77
63306: PUSH
63307: LD_INT 1
63309: ST_TO_ADDR
// if p3 = 22 then
63310: LD_VAR 0 3
63314: PUSH
63315: LD_INT 22
63317: EQUAL
63318: IFFALSE 63328
// sTeleport := true ;
63320: LD_ADDR_EXP 80
63324: PUSH
63325: LD_INT 1
63327: ST_TO_ADDR
// if p3 = 23 then
63328: LD_VAR 0 3
63332: PUSH
63333: LD_INT 23
63335: EQUAL
63336: IFFALSE 63346
// sOilTower := true ;
63338: LD_ADDR_EXP 82
63342: PUSH
63343: LD_INT 1
63345: ST_TO_ADDR
// if p3 = 24 then
63346: LD_VAR 0 3
63350: PUSH
63351: LD_INT 24
63353: EQUAL
63354: IFFALSE 63364
// sShovel := true ;
63356: LD_ADDR_EXP 83
63360: PUSH
63361: LD_INT 1
63363: ST_TO_ADDR
// if p3 = 25 then
63364: LD_VAR 0 3
63368: PUSH
63369: LD_INT 25
63371: EQUAL
63372: IFFALSE 63382
// sSheik := true ;
63374: LD_ADDR_EXP 84
63378: PUSH
63379: LD_INT 1
63381: ST_TO_ADDR
// if p3 = 26 then
63382: LD_VAR 0 3
63386: PUSH
63387: LD_INT 26
63389: EQUAL
63390: IFFALSE 63400
// sEarthquake := true ;
63392: LD_ADDR_EXP 86
63396: PUSH
63397: LD_INT 1
63399: ST_TO_ADDR
// if p3 = 27 then
63400: LD_VAR 0 3
63404: PUSH
63405: LD_INT 27
63407: EQUAL
63408: IFFALSE 63418
// sAI := true ;
63410: LD_ADDR_EXP 87
63414: PUSH
63415: LD_INT 1
63417: ST_TO_ADDR
// if p3 = 28 then
63418: LD_VAR 0 3
63422: PUSH
63423: LD_INT 28
63425: EQUAL
63426: IFFALSE 63436
// sCargo := true ;
63428: LD_ADDR_EXP 90
63432: PUSH
63433: LD_INT 1
63435: ST_TO_ADDR
// if p3 = 29 then
63436: LD_VAR 0 3
63440: PUSH
63441: LD_INT 29
63443: EQUAL
63444: IFFALSE 63454
// sDLaser := true ;
63446: LD_ADDR_EXP 91
63450: PUSH
63451: LD_INT 1
63453: ST_TO_ADDR
// if p3 = 30 then
63454: LD_VAR 0 3
63458: PUSH
63459: LD_INT 30
63461: EQUAL
63462: IFFALSE 63472
// sExchange := true ;
63464: LD_ADDR_EXP 92
63468: PUSH
63469: LD_INT 1
63471: ST_TO_ADDR
// if p3 = 31 then
63472: LD_VAR 0 3
63476: PUSH
63477: LD_INT 31
63479: EQUAL
63480: IFFALSE 63490
// sFac := true ;
63482: LD_ADDR_EXP 93
63486: PUSH
63487: LD_INT 1
63489: ST_TO_ADDR
// if p3 = 32 then
63490: LD_VAR 0 3
63494: PUSH
63495: LD_INT 32
63497: EQUAL
63498: IFFALSE 63508
// sPower := true ;
63500: LD_ADDR_EXP 94
63504: PUSH
63505: LD_INT 1
63507: ST_TO_ADDR
// if p3 = 33 then
63508: LD_VAR 0 3
63512: PUSH
63513: LD_INT 33
63515: EQUAL
63516: IFFALSE 63526
// sRandom := true ;
63518: LD_ADDR_EXP 95
63522: PUSH
63523: LD_INT 1
63525: ST_TO_ADDR
// if p3 = 34 then
63526: LD_VAR 0 3
63530: PUSH
63531: LD_INT 34
63533: EQUAL
63534: IFFALSE 63544
// sShield := true ;
63536: LD_ADDR_EXP 96
63540: PUSH
63541: LD_INT 1
63543: ST_TO_ADDR
// if p3 = 35 then
63544: LD_VAR 0 3
63548: PUSH
63549: LD_INT 35
63551: EQUAL
63552: IFFALSE 63562
// sTime := true ;
63554: LD_ADDR_EXP 97
63558: PUSH
63559: LD_INT 1
63561: ST_TO_ADDR
// if p3 = 36 then
63562: LD_VAR 0 3
63566: PUSH
63567: LD_INT 36
63569: EQUAL
63570: IFFALSE 63580
// sTools := true ;
63572: LD_ADDR_EXP 98
63576: PUSH
63577: LD_INT 1
63579: ST_TO_ADDR
// if p3 = 101 then
63580: LD_VAR 0 3
63584: PUSH
63585: LD_INT 101
63587: EQUAL
63588: IFFALSE 63598
// sSold := true ;
63590: LD_ADDR_EXP 63
63594: PUSH
63595: LD_INT 1
63597: ST_TO_ADDR
// if p3 = 102 then
63598: LD_VAR 0 3
63602: PUSH
63603: LD_INT 102
63605: EQUAL
63606: IFFALSE 63616
// sDiff := true ;
63608: LD_ADDR_EXP 64
63612: PUSH
63613: LD_INT 1
63615: ST_TO_ADDR
// if p3 = 103 then
63616: LD_VAR 0 3
63620: PUSH
63621: LD_INT 103
63623: EQUAL
63624: IFFALSE 63634
// sFog := true ;
63626: LD_ADDR_EXP 67
63630: PUSH
63631: LD_INT 1
63633: ST_TO_ADDR
// if p3 = 104 then
63634: LD_VAR 0 3
63638: PUSH
63639: LD_INT 104
63641: EQUAL
63642: IFFALSE 63652
// sReset := true ;
63644: LD_ADDR_EXP 68
63648: PUSH
63649: LD_INT 1
63651: ST_TO_ADDR
// if p3 = 105 then
63652: LD_VAR 0 3
63656: PUSH
63657: LD_INT 105
63659: EQUAL
63660: IFFALSE 63670
// sSun := true ;
63662: LD_ADDR_EXP 69
63666: PUSH
63667: LD_INT 1
63669: ST_TO_ADDR
// if p3 = 106 then
63670: LD_VAR 0 3
63674: PUSH
63675: LD_INT 106
63677: EQUAL
63678: IFFALSE 63688
// sTiger := true ;
63680: LD_ADDR_EXP 65
63684: PUSH
63685: LD_INT 1
63687: ST_TO_ADDR
// if p3 = 107 then
63688: LD_VAR 0 3
63692: PUSH
63693: LD_INT 107
63695: EQUAL
63696: IFFALSE 63706
// sBomb := true ;
63698: LD_ADDR_EXP 66
63702: PUSH
63703: LD_INT 1
63705: ST_TO_ADDR
// if p3 = 108 then
63706: LD_VAR 0 3
63710: PUSH
63711: LD_INT 108
63713: EQUAL
63714: IFFALSE 63724
// sWound := true ;
63716: LD_ADDR_EXP 74
63720: PUSH
63721: LD_INT 1
63723: ST_TO_ADDR
// if p3 = 109 then
63724: LD_VAR 0 3
63728: PUSH
63729: LD_INT 109
63731: EQUAL
63732: IFFALSE 63742
// sBetray := true ;
63734: LD_ADDR_EXP 78
63738: PUSH
63739: LD_INT 1
63741: ST_TO_ADDR
// if p3 = 110 then
63742: LD_VAR 0 3
63746: PUSH
63747: LD_INT 110
63749: EQUAL
63750: IFFALSE 63760
// sContamin := true ;
63752: LD_ADDR_EXP 79
63756: PUSH
63757: LD_INT 1
63759: ST_TO_ADDR
// if p3 = 111 then
63760: LD_VAR 0 3
63764: PUSH
63765: LD_INT 111
63767: EQUAL
63768: IFFALSE 63778
// sOil := true ;
63770: LD_ADDR_EXP 81
63774: PUSH
63775: LD_INT 1
63777: ST_TO_ADDR
// if p3 = 112 then
63778: LD_VAR 0 3
63782: PUSH
63783: LD_INT 112
63785: EQUAL
63786: IFFALSE 63796
// sStu := true ;
63788: LD_ADDR_EXP 85
63792: PUSH
63793: LD_INT 1
63795: ST_TO_ADDR
// if p3 = 113 then
63796: LD_VAR 0 3
63800: PUSH
63801: LD_INT 113
63803: EQUAL
63804: IFFALSE 63814
// sBazooka := true ;
63806: LD_ADDR_EXP 88
63810: PUSH
63811: LD_INT 1
63813: ST_TO_ADDR
// if p3 = 114 then
63814: LD_VAR 0 3
63818: PUSH
63819: LD_INT 114
63821: EQUAL
63822: IFFALSE 63832
// sMortar := true ;
63824: LD_ADDR_EXP 89
63828: PUSH
63829: LD_INT 1
63831: ST_TO_ADDR
// if p3 = 115 then
63832: LD_VAR 0 3
63836: PUSH
63837: LD_INT 115
63839: EQUAL
63840: IFFALSE 63850
// sRanger := true ;
63842: LD_ADDR_EXP 99
63846: PUSH
63847: LD_INT 1
63849: ST_TO_ADDR
// if p3 = 116 then
63850: LD_VAR 0 3
63854: PUSH
63855: LD_INT 116
63857: EQUAL
63858: IFFALSE 63868
// sComputer := true ;
63860: LD_ADDR_EXP 100
63864: PUSH
63865: LD_INT 1
63867: ST_TO_ADDR
// if p3 = 117 then
63868: LD_VAR 0 3
63872: PUSH
63873: LD_INT 117
63875: EQUAL
63876: IFFALSE 63886
// s30 := true ;
63878: LD_ADDR_EXP 101
63882: PUSH
63883: LD_INT 1
63885: ST_TO_ADDR
// if p3 = 118 then
63886: LD_VAR 0 3
63890: PUSH
63891: LD_INT 118
63893: EQUAL
63894: IFFALSE 63904
// s60 := true ;
63896: LD_ADDR_EXP 102
63900: PUSH
63901: LD_INT 1
63903: ST_TO_ADDR
// end ; if p2 = hack_mode then
63904: LD_VAR 0 2
63908: PUSH
63909: LD_INT 101
63911: EQUAL
63912: IFFALSE 64040
// begin case p3 of 1 :
63914: LD_VAR 0 3
63918: PUSH
63919: LD_INT 1
63921: DOUBLE
63922: EQUAL
63923: IFTRUE 63927
63925: GO 63934
63927: POP
// hHackUnlimitedResources ; 2 :
63928: CALL 76187 0 0
63932: GO 64040
63934: LD_INT 2
63936: DOUBLE
63937: EQUAL
63938: IFTRUE 63942
63940: GO 63949
63942: POP
// hHackSetLevel10 ; 3 :
63943: CALL 76320 0 0
63947: GO 64040
63949: LD_INT 3
63951: DOUBLE
63952: EQUAL
63953: IFTRUE 63957
63955: GO 63964
63957: POP
// hHackSetLevel10YourUnits ; 4 :
63958: CALL 76405 0 0
63962: GO 64040
63964: LD_INT 4
63966: DOUBLE
63967: EQUAL
63968: IFTRUE 63972
63970: GO 63979
63972: POP
// hHackInvincible ; 5 :
63973: CALL 76853 0 0
63977: GO 64040
63979: LD_INT 5
63981: DOUBLE
63982: EQUAL
63983: IFTRUE 63987
63985: GO 63994
63987: POP
// hHackInvisible ; 6 :
63988: CALL 76964 0 0
63992: GO 64040
63994: LD_INT 6
63996: DOUBLE
63997: EQUAL
63998: IFTRUE 64002
64000: GO 64009
64002: POP
// hHackChangeYourSide ; 7 :
64003: CALL 77021 0 0
64007: GO 64040
64009: LD_INT 7
64011: DOUBLE
64012: EQUAL
64013: IFTRUE 64017
64015: GO 64024
64017: POP
// hHackChangeUnitSide ; 8 :
64018: CALL 77063 0 0
64022: GO 64040
64024: LD_INT 8
64026: DOUBLE
64027: EQUAL
64028: IFTRUE 64032
64030: GO 64039
64032: POP
// hHackFog ; end ;
64033: CALL 77164 0 0
64037: GO 64040
64039: POP
// end ; if p2 = game_save_mode then
64040: LD_VAR 0 2
64044: PUSH
64045: LD_INT 102
64047: EQUAL
64048: IFFALSE 64103
// begin if p3 = 1 then
64050: LD_VAR 0 3
64054: PUSH
64055: LD_INT 1
64057: EQUAL
64058: IFFALSE 64070
// globalGameSaveCounter := p4 ;
64060: LD_ADDR_EXP 45
64064: PUSH
64065: LD_VAR 0 4
64069: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
64070: LD_VAR 0 3
64074: PUSH
64075: LD_INT 2
64077: EQUAL
64078: PUSH
64079: LD_EXP 45
64083: AND
64084: IFFALSE 64103
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64086: LD_STRING setGameSaveCounter(
64088: PUSH
64089: LD_EXP 45
64093: STR
64094: PUSH
64095: LD_STRING )
64097: STR
64098: PPUSH
64099: CALL_OW 559
// end ; end ;
64103: LD_VAR 0 7
64107: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
64108: LD_INT 0
64110: PPUSH
// streamModeActive := false ;
64111: LD_ADDR_EXP 46
64115: PUSH
64116: LD_INT 0
64118: ST_TO_ADDR
// normalCounter := 36 ;
64119: LD_ADDR_EXP 47
64123: PUSH
64124: LD_INT 36
64126: ST_TO_ADDR
// hardcoreCounter := 18 ;
64127: LD_ADDR_EXP 48
64131: PUSH
64132: LD_INT 18
64134: ST_TO_ADDR
// sRocket := false ;
64135: LD_ADDR_EXP 51
64139: PUSH
64140: LD_INT 0
64142: ST_TO_ADDR
// sSpeed := false ;
64143: LD_ADDR_EXP 50
64147: PUSH
64148: LD_INT 0
64150: ST_TO_ADDR
// sEngine := false ;
64151: LD_ADDR_EXP 52
64155: PUSH
64156: LD_INT 0
64158: ST_TO_ADDR
// sSpec := false ;
64159: LD_ADDR_EXP 49
64163: PUSH
64164: LD_INT 0
64166: ST_TO_ADDR
// sLevel := false ;
64167: LD_ADDR_EXP 53
64171: PUSH
64172: LD_INT 0
64174: ST_TO_ADDR
// sArmoury := false ;
64175: LD_ADDR_EXP 54
64179: PUSH
64180: LD_INT 0
64182: ST_TO_ADDR
// sRadar := false ;
64183: LD_ADDR_EXP 55
64187: PUSH
64188: LD_INT 0
64190: ST_TO_ADDR
// sBunker := false ;
64191: LD_ADDR_EXP 56
64195: PUSH
64196: LD_INT 0
64198: ST_TO_ADDR
// sHack := false ;
64199: LD_ADDR_EXP 57
64203: PUSH
64204: LD_INT 0
64206: ST_TO_ADDR
// sFire := false ;
64207: LD_ADDR_EXP 58
64211: PUSH
64212: LD_INT 0
64214: ST_TO_ADDR
// sRefresh := false ;
64215: LD_ADDR_EXP 59
64219: PUSH
64220: LD_INT 0
64222: ST_TO_ADDR
// sExp := false ;
64223: LD_ADDR_EXP 60
64227: PUSH
64228: LD_INT 0
64230: ST_TO_ADDR
// sDepot := false ;
64231: LD_ADDR_EXP 61
64235: PUSH
64236: LD_INT 0
64238: ST_TO_ADDR
// sFlag := false ;
64239: LD_ADDR_EXP 62
64243: PUSH
64244: LD_INT 0
64246: ST_TO_ADDR
// sKamikadze := false ;
64247: LD_ADDR_EXP 70
64251: PUSH
64252: LD_INT 0
64254: ST_TO_ADDR
// sTroll := false ;
64255: LD_ADDR_EXP 71
64259: PUSH
64260: LD_INT 0
64262: ST_TO_ADDR
// sSlow := false ;
64263: LD_ADDR_EXP 72
64267: PUSH
64268: LD_INT 0
64270: ST_TO_ADDR
// sLack := false ;
64271: LD_ADDR_EXP 73
64275: PUSH
64276: LD_INT 0
64278: ST_TO_ADDR
// sTank := false ;
64279: LD_ADDR_EXP 75
64283: PUSH
64284: LD_INT 0
64286: ST_TO_ADDR
// sRemote := false ;
64287: LD_ADDR_EXP 76
64291: PUSH
64292: LD_INT 0
64294: ST_TO_ADDR
// sPowell := false ;
64295: LD_ADDR_EXP 77
64299: PUSH
64300: LD_INT 0
64302: ST_TO_ADDR
// sTeleport := false ;
64303: LD_ADDR_EXP 80
64307: PUSH
64308: LD_INT 0
64310: ST_TO_ADDR
// sOilTower := false ;
64311: LD_ADDR_EXP 82
64315: PUSH
64316: LD_INT 0
64318: ST_TO_ADDR
// sShovel := false ;
64319: LD_ADDR_EXP 83
64323: PUSH
64324: LD_INT 0
64326: ST_TO_ADDR
// sSheik := false ;
64327: LD_ADDR_EXP 84
64331: PUSH
64332: LD_INT 0
64334: ST_TO_ADDR
// sEarthquake := false ;
64335: LD_ADDR_EXP 86
64339: PUSH
64340: LD_INT 0
64342: ST_TO_ADDR
// sAI := false ;
64343: LD_ADDR_EXP 87
64347: PUSH
64348: LD_INT 0
64350: ST_TO_ADDR
// sCargo := false ;
64351: LD_ADDR_EXP 90
64355: PUSH
64356: LD_INT 0
64358: ST_TO_ADDR
// sDLaser := false ;
64359: LD_ADDR_EXP 91
64363: PUSH
64364: LD_INT 0
64366: ST_TO_ADDR
// sExchange := false ;
64367: LD_ADDR_EXP 92
64371: PUSH
64372: LD_INT 0
64374: ST_TO_ADDR
// sFac := false ;
64375: LD_ADDR_EXP 93
64379: PUSH
64380: LD_INT 0
64382: ST_TO_ADDR
// sPower := false ;
64383: LD_ADDR_EXP 94
64387: PUSH
64388: LD_INT 0
64390: ST_TO_ADDR
// sRandom := false ;
64391: LD_ADDR_EXP 95
64395: PUSH
64396: LD_INT 0
64398: ST_TO_ADDR
// sShield := false ;
64399: LD_ADDR_EXP 96
64403: PUSH
64404: LD_INT 0
64406: ST_TO_ADDR
// sTime := false ;
64407: LD_ADDR_EXP 97
64411: PUSH
64412: LD_INT 0
64414: ST_TO_ADDR
// sTools := false ;
64415: LD_ADDR_EXP 98
64419: PUSH
64420: LD_INT 0
64422: ST_TO_ADDR
// sSold := false ;
64423: LD_ADDR_EXP 63
64427: PUSH
64428: LD_INT 0
64430: ST_TO_ADDR
// sDiff := false ;
64431: LD_ADDR_EXP 64
64435: PUSH
64436: LD_INT 0
64438: ST_TO_ADDR
// sFog := false ;
64439: LD_ADDR_EXP 67
64443: PUSH
64444: LD_INT 0
64446: ST_TO_ADDR
// sReset := false ;
64447: LD_ADDR_EXP 68
64451: PUSH
64452: LD_INT 0
64454: ST_TO_ADDR
// sSun := false ;
64455: LD_ADDR_EXP 69
64459: PUSH
64460: LD_INT 0
64462: ST_TO_ADDR
// sTiger := false ;
64463: LD_ADDR_EXP 65
64467: PUSH
64468: LD_INT 0
64470: ST_TO_ADDR
// sBomb := false ;
64471: LD_ADDR_EXP 66
64475: PUSH
64476: LD_INT 0
64478: ST_TO_ADDR
// sWound := false ;
64479: LD_ADDR_EXP 74
64483: PUSH
64484: LD_INT 0
64486: ST_TO_ADDR
// sBetray := false ;
64487: LD_ADDR_EXP 78
64491: PUSH
64492: LD_INT 0
64494: ST_TO_ADDR
// sContamin := false ;
64495: LD_ADDR_EXP 79
64499: PUSH
64500: LD_INT 0
64502: ST_TO_ADDR
// sOil := false ;
64503: LD_ADDR_EXP 81
64507: PUSH
64508: LD_INT 0
64510: ST_TO_ADDR
// sStu := false ;
64511: LD_ADDR_EXP 85
64515: PUSH
64516: LD_INT 0
64518: ST_TO_ADDR
// sBazooka := false ;
64519: LD_ADDR_EXP 88
64523: PUSH
64524: LD_INT 0
64526: ST_TO_ADDR
// sMortar := false ;
64527: LD_ADDR_EXP 89
64531: PUSH
64532: LD_INT 0
64534: ST_TO_ADDR
// sRanger := false ;
64535: LD_ADDR_EXP 99
64539: PUSH
64540: LD_INT 0
64542: ST_TO_ADDR
// sComputer := false ;
64543: LD_ADDR_EXP 100
64547: PUSH
64548: LD_INT 0
64550: ST_TO_ADDR
// s30 := false ;
64551: LD_ADDR_EXP 101
64555: PUSH
64556: LD_INT 0
64558: ST_TO_ADDR
// s60 := false ;
64559: LD_ADDR_EXP 102
64563: PUSH
64564: LD_INT 0
64566: ST_TO_ADDR
// end ;
64567: LD_VAR 0 1
64571: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
64572: LD_INT 0
64574: PPUSH
64575: PPUSH
64576: PPUSH
64577: PPUSH
64578: PPUSH
64579: PPUSH
64580: PPUSH
// result := [ ] ;
64581: LD_ADDR_VAR 0 2
64585: PUSH
64586: EMPTY
64587: ST_TO_ADDR
// if campaign_id = 1 then
64588: LD_OWVAR 69
64592: PUSH
64593: LD_INT 1
64595: EQUAL
64596: IFFALSE 67762
// begin case mission_number of 1 :
64598: LD_OWVAR 70
64602: PUSH
64603: LD_INT 1
64605: DOUBLE
64606: EQUAL
64607: IFTRUE 64611
64609: GO 64687
64611: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
64612: LD_ADDR_VAR 0 2
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 4
64622: PUSH
64623: LD_INT 11
64625: PUSH
64626: LD_INT 12
64628: PUSH
64629: LD_INT 15
64631: PUSH
64632: LD_INT 16
64634: PUSH
64635: LD_INT 22
64637: PUSH
64638: LD_INT 23
64640: PUSH
64641: LD_INT 26
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 101
64657: PUSH
64658: LD_INT 102
64660: PUSH
64661: LD_INT 106
64663: PUSH
64664: LD_INT 116
64666: PUSH
64667: LD_INT 117
64669: PUSH
64670: LD_INT 118
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: ST_TO_ADDR
64685: GO 67760
64687: LD_INT 2
64689: DOUBLE
64690: EQUAL
64691: IFTRUE 64695
64693: GO 64779
64695: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
64696: LD_ADDR_VAR 0 2
64700: PUSH
64701: LD_INT 2
64703: PUSH
64704: LD_INT 4
64706: PUSH
64707: LD_INT 11
64709: PUSH
64710: LD_INT 12
64712: PUSH
64713: LD_INT 15
64715: PUSH
64716: LD_INT 16
64718: PUSH
64719: LD_INT 22
64721: PUSH
64722: LD_INT 23
64724: PUSH
64725: LD_INT 26
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 101
64741: PUSH
64742: LD_INT 102
64744: PUSH
64745: LD_INT 105
64747: PUSH
64748: LD_INT 106
64750: PUSH
64751: LD_INT 108
64753: PUSH
64754: LD_INT 116
64756: PUSH
64757: LD_INT 117
64759: PUSH
64760: LD_INT 118
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: ST_TO_ADDR
64777: GO 67760
64779: LD_INT 3
64781: DOUBLE
64782: EQUAL
64783: IFTRUE 64787
64785: GO 64875
64787: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
64788: LD_ADDR_VAR 0 2
64792: PUSH
64793: LD_INT 2
64795: PUSH
64796: LD_INT 4
64798: PUSH
64799: LD_INT 5
64801: PUSH
64802: LD_INT 11
64804: PUSH
64805: LD_INT 12
64807: PUSH
64808: LD_INT 15
64810: PUSH
64811: LD_INT 16
64813: PUSH
64814: LD_INT 22
64816: PUSH
64817: LD_INT 26
64819: PUSH
64820: LD_INT 36
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 101
64837: PUSH
64838: LD_INT 102
64840: PUSH
64841: LD_INT 105
64843: PUSH
64844: LD_INT 106
64846: PUSH
64847: LD_INT 108
64849: PUSH
64850: LD_INT 116
64852: PUSH
64853: LD_INT 117
64855: PUSH
64856: LD_INT 118
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: ST_TO_ADDR
64873: GO 67760
64875: LD_INT 4
64877: DOUBLE
64878: EQUAL
64879: IFTRUE 64883
64881: GO 64979
64883: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
64884: LD_ADDR_VAR 0 2
64888: PUSH
64889: LD_INT 2
64891: PUSH
64892: LD_INT 4
64894: PUSH
64895: LD_INT 5
64897: PUSH
64898: LD_INT 8
64900: PUSH
64901: LD_INT 11
64903: PUSH
64904: LD_INT 12
64906: PUSH
64907: LD_INT 15
64909: PUSH
64910: LD_INT 16
64912: PUSH
64913: LD_INT 22
64915: PUSH
64916: LD_INT 23
64918: PUSH
64919: LD_INT 26
64921: PUSH
64922: LD_INT 36
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 101
64941: PUSH
64942: LD_INT 102
64944: PUSH
64945: LD_INT 105
64947: PUSH
64948: LD_INT 106
64950: PUSH
64951: LD_INT 108
64953: PUSH
64954: LD_INT 116
64956: PUSH
64957: LD_INT 117
64959: PUSH
64960: LD_INT 118
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: ST_TO_ADDR
64977: GO 67760
64979: LD_INT 5
64981: DOUBLE
64982: EQUAL
64983: IFTRUE 64987
64985: GO 65099
64987: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
64988: LD_ADDR_VAR 0 2
64992: PUSH
64993: LD_INT 2
64995: PUSH
64996: LD_INT 4
64998: PUSH
64999: LD_INT 5
65001: PUSH
65002: LD_INT 6
65004: PUSH
65005: LD_INT 8
65007: PUSH
65008: LD_INT 11
65010: PUSH
65011: LD_INT 12
65013: PUSH
65014: LD_INT 15
65016: PUSH
65017: LD_INT 16
65019: PUSH
65020: LD_INT 22
65022: PUSH
65023: LD_INT 23
65025: PUSH
65026: LD_INT 25
65028: PUSH
65029: LD_INT 26
65031: PUSH
65032: LD_INT 36
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 101
65053: PUSH
65054: LD_INT 102
65056: PUSH
65057: LD_INT 105
65059: PUSH
65060: LD_INT 106
65062: PUSH
65063: LD_INT 108
65065: PUSH
65066: LD_INT 109
65068: PUSH
65069: LD_INT 112
65071: PUSH
65072: LD_INT 116
65074: PUSH
65075: LD_INT 117
65077: PUSH
65078: LD_INT 118
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: ST_TO_ADDR
65097: GO 67760
65099: LD_INT 6
65101: DOUBLE
65102: EQUAL
65103: IFTRUE 65107
65105: GO 65239
65107: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
65108: LD_ADDR_VAR 0 2
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: LD_INT 4
65118: PUSH
65119: LD_INT 5
65121: PUSH
65122: LD_INT 6
65124: PUSH
65125: LD_INT 8
65127: PUSH
65128: LD_INT 11
65130: PUSH
65131: LD_INT 12
65133: PUSH
65134: LD_INT 15
65136: PUSH
65137: LD_INT 16
65139: PUSH
65140: LD_INT 20
65142: PUSH
65143: LD_INT 21
65145: PUSH
65146: LD_INT 22
65148: PUSH
65149: LD_INT 23
65151: PUSH
65152: LD_INT 25
65154: PUSH
65155: LD_INT 26
65157: PUSH
65158: LD_INT 30
65160: PUSH
65161: LD_INT 31
65163: PUSH
65164: LD_INT 32
65166: PUSH
65167: LD_INT 36
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 101
65193: PUSH
65194: LD_INT 102
65196: PUSH
65197: LD_INT 105
65199: PUSH
65200: LD_INT 106
65202: PUSH
65203: LD_INT 108
65205: PUSH
65206: LD_INT 109
65208: PUSH
65209: LD_INT 112
65211: PUSH
65212: LD_INT 116
65214: PUSH
65215: LD_INT 117
65217: PUSH
65218: LD_INT 118
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: ST_TO_ADDR
65237: GO 67760
65239: LD_INT 7
65241: DOUBLE
65242: EQUAL
65243: IFTRUE 65247
65245: GO 65359
65247: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
65248: LD_ADDR_VAR 0 2
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: LD_INT 4
65258: PUSH
65259: LD_INT 5
65261: PUSH
65262: LD_INT 7
65264: PUSH
65265: LD_INT 11
65267: PUSH
65268: LD_INT 12
65270: PUSH
65271: LD_INT 15
65273: PUSH
65274: LD_INT 16
65276: PUSH
65277: LD_INT 20
65279: PUSH
65280: LD_INT 21
65282: PUSH
65283: LD_INT 22
65285: PUSH
65286: LD_INT 23
65288: PUSH
65289: LD_INT 25
65291: PUSH
65292: LD_INT 26
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 101
65313: PUSH
65314: LD_INT 102
65316: PUSH
65317: LD_INT 103
65319: PUSH
65320: LD_INT 105
65322: PUSH
65323: LD_INT 106
65325: PUSH
65326: LD_INT 108
65328: PUSH
65329: LD_INT 112
65331: PUSH
65332: LD_INT 116
65334: PUSH
65335: LD_INT 117
65337: PUSH
65338: LD_INT 118
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: ST_TO_ADDR
65357: GO 67760
65359: LD_INT 8
65361: DOUBLE
65362: EQUAL
65363: IFTRUE 65367
65365: GO 65507
65367: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
65368: LD_ADDR_VAR 0 2
65372: PUSH
65373: LD_INT 2
65375: PUSH
65376: LD_INT 4
65378: PUSH
65379: LD_INT 5
65381: PUSH
65382: LD_INT 6
65384: PUSH
65385: LD_INT 7
65387: PUSH
65388: LD_INT 8
65390: PUSH
65391: LD_INT 11
65393: PUSH
65394: LD_INT 12
65396: PUSH
65397: LD_INT 15
65399: PUSH
65400: LD_INT 16
65402: PUSH
65403: LD_INT 20
65405: PUSH
65406: LD_INT 21
65408: PUSH
65409: LD_INT 22
65411: PUSH
65412: LD_INT 23
65414: PUSH
65415: LD_INT 25
65417: PUSH
65418: LD_INT 26
65420: PUSH
65421: LD_INT 30
65423: PUSH
65424: LD_INT 31
65426: PUSH
65427: LD_INT 32
65429: PUSH
65430: LD_INT 36
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 101
65457: PUSH
65458: LD_INT 102
65460: PUSH
65461: LD_INT 103
65463: PUSH
65464: LD_INT 105
65466: PUSH
65467: LD_INT 106
65469: PUSH
65470: LD_INT 108
65472: PUSH
65473: LD_INT 109
65475: PUSH
65476: LD_INT 112
65478: PUSH
65479: LD_INT 116
65481: PUSH
65482: LD_INT 117
65484: PUSH
65485: LD_INT 118
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: ST_TO_ADDR
65505: GO 67760
65507: LD_INT 9
65509: DOUBLE
65510: EQUAL
65511: IFTRUE 65515
65513: GO 65663
65515: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
65516: LD_ADDR_VAR 0 2
65520: PUSH
65521: LD_INT 2
65523: PUSH
65524: LD_INT 4
65526: PUSH
65527: LD_INT 5
65529: PUSH
65530: LD_INT 6
65532: PUSH
65533: LD_INT 7
65535: PUSH
65536: LD_INT 8
65538: PUSH
65539: LD_INT 11
65541: PUSH
65542: LD_INT 12
65544: PUSH
65545: LD_INT 15
65547: PUSH
65548: LD_INT 16
65550: PUSH
65551: LD_INT 20
65553: PUSH
65554: LD_INT 21
65556: PUSH
65557: LD_INT 22
65559: PUSH
65560: LD_INT 23
65562: PUSH
65563: LD_INT 25
65565: PUSH
65566: LD_INT 26
65568: PUSH
65569: LD_INT 28
65571: PUSH
65572: LD_INT 30
65574: PUSH
65575: LD_INT 31
65577: PUSH
65578: LD_INT 32
65580: PUSH
65581: LD_INT 36
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 101
65609: PUSH
65610: LD_INT 102
65612: PUSH
65613: LD_INT 103
65615: PUSH
65616: LD_INT 105
65618: PUSH
65619: LD_INT 106
65621: PUSH
65622: LD_INT 108
65624: PUSH
65625: LD_INT 109
65627: PUSH
65628: LD_INT 112
65630: PUSH
65631: LD_INT 114
65633: PUSH
65634: LD_INT 116
65636: PUSH
65637: LD_INT 117
65639: PUSH
65640: LD_INT 118
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: ST_TO_ADDR
65661: GO 67760
65663: LD_INT 10
65665: DOUBLE
65666: EQUAL
65667: IFTRUE 65671
65669: GO 65867
65671: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
65672: LD_ADDR_VAR 0 2
65676: PUSH
65677: LD_INT 2
65679: PUSH
65680: LD_INT 4
65682: PUSH
65683: LD_INT 5
65685: PUSH
65686: LD_INT 6
65688: PUSH
65689: LD_INT 7
65691: PUSH
65692: LD_INT 8
65694: PUSH
65695: LD_INT 9
65697: PUSH
65698: LD_INT 10
65700: PUSH
65701: LD_INT 11
65703: PUSH
65704: LD_INT 12
65706: PUSH
65707: LD_INT 13
65709: PUSH
65710: LD_INT 14
65712: PUSH
65713: LD_INT 15
65715: PUSH
65716: LD_INT 16
65718: PUSH
65719: LD_INT 17
65721: PUSH
65722: LD_INT 18
65724: PUSH
65725: LD_INT 19
65727: PUSH
65728: LD_INT 20
65730: PUSH
65731: LD_INT 21
65733: PUSH
65734: LD_INT 22
65736: PUSH
65737: LD_INT 23
65739: PUSH
65740: LD_INT 24
65742: PUSH
65743: LD_INT 25
65745: PUSH
65746: LD_INT 26
65748: PUSH
65749: LD_INT 28
65751: PUSH
65752: LD_INT 30
65754: PUSH
65755: LD_INT 31
65757: PUSH
65758: LD_INT 32
65760: PUSH
65761: LD_INT 36
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 101
65797: PUSH
65798: LD_INT 102
65800: PUSH
65801: LD_INT 103
65803: PUSH
65804: LD_INT 104
65806: PUSH
65807: LD_INT 105
65809: PUSH
65810: LD_INT 106
65812: PUSH
65813: LD_INT 107
65815: PUSH
65816: LD_INT 108
65818: PUSH
65819: LD_INT 109
65821: PUSH
65822: LD_INT 110
65824: PUSH
65825: LD_INT 111
65827: PUSH
65828: LD_INT 112
65830: PUSH
65831: LD_INT 114
65833: PUSH
65834: LD_INT 116
65836: PUSH
65837: LD_INT 117
65839: PUSH
65840: LD_INT 118
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: ST_TO_ADDR
65865: GO 67760
65867: LD_INT 11
65869: DOUBLE
65870: EQUAL
65871: IFTRUE 65875
65873: GO 66079
65875: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
65876: LD_ADDR_VAR 0 2
65880: PUSH
65881: LD_INT 2
65883: PUSH
65884: LD_INT 3
65886: PUSH
65887: LD_INT 4
65889: PUSH
65890: LD_INT 5
65892: PUSH
65893: LD_INT 6
65895: PUSH
65896: LD_INT 7
65898: PUSH
65899: LD_INT 8
65901: PUSH
65902: LD_INT 9
65904: PUSH
65905: LD_INT 10
65907: PUSH
65908: LD_INT 11
65910: PUSH
65911: LD_INT 12
65913: PUSH
65914: LD_INT 13
65916: PUSH
65917: LD_INT 14
65919: PUSH
65920: LD_INT 15
65922: PUSH
65923: LD_INT 16
65925: PUSH
65926: LD_INT 17
65928: PUSH
65929: LD_INT 18
65931: PUSH
65932: LD_INT 19
65934: PUSH
65935: LD_INT 20
65937: PUSH
65938: LD_INT 21
65940: PUSH
65941: LD_INT 22
65943: PUSH
65944: LD_INT 23
65946: PUSH
65947: LD_INT 24
65949: PUSH
65950: LD_INT 25
65952: PUSH
65953: LD_INT 26
65955: PUSH
65956: LD_INT 28
65958: PUSH
65959: LD_INT 30
65961: PUSH
65962: LD_INT 31
65964: PUSH
65965: LD_INT 32
65967: PUSH
65968: LD_INT 34
65970: PUSH
65971: LD_INT 36
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 101
66009: PUSH
66010: LD_INT 102
66012: PUSH
66013: LD_INT 103
66015: PUSH
66016: LD_INT 104
66018: PUSH
66019: LD_INT 105
66021: PUSH
66022: LD_INT 106
66024: PUSH
66025: LD_INT 107
66027: PUSH
66028: LD_INT 108
66030: PUSH
66031: LD_INT 109
66033: PUSH
66034: LD_INT 110
66036: PUSH
66037: LD_INT 111
66039: PUSH
66040: LD_INT 112
66042: PUSH
66043: LD_INT 114
66045: PUSH
66046: LD_INT 116
66048: PUSH
66049: LD_INT 117
66051: PUSH
66052: LD_INT 118
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: ST_TO_ADDR
66077: GO 67760
66079: LD_INT 12
66081: DOUBLE
66082: EQUAL
66083: IFTRUE 66087
66085: GO 66307
66087: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
66088: LD_ADDR_VAR 0 2
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: LD_INT 2
66098: PUSH
66099: LD_INT 3
66101: PUSH
66102: LD_INT 4
66104: PUSH
66105: LD_INT 5
66107: PUSH
66108: LD_INT 6
66110: PUSH
66111: LD_INT 7
66113: PUSH
66114: LD_INT 8
66116: PUSH
66117: LD_INT 9
66119: PUSH
66120: LD_INT 10
66122: PUSH
66123: LD_INT 11
66125: PUSH
66126: LD_INT 12
66128: PUSH
66129: LD_INT 13
66131: PUSH
66132: LD_INT 14
66134: PUSH
66135: LD_INT 15
66137: PUSH
66138: LD_INT 16
66140: PUSH
66141: LD_INT 17
66143: PUSH
66144: LD_INT 18
66146: PUSH
66147: LD_INT 19
66149: PUSH
66150: LD_INT 20
66152: PUSH
66153: LD_INT 21
66155: PUSH
66156: LD_INT 22
66158: PUSH
66159: LD_INT 23
66161: PUSH
66162: LD_INT 24
66164: PUSH
66165: LD_INT 25
66167: PUSH
66168: LD_INT 26
66170: PUSH
66171: LD_INT 27
66173: PUSH
66174: LD_INT 28
66176: PUSH
66177: LD_INT 30
66179: PUSH
66180: LD_INT 31
66182: PUSH
66183: LD_INT 32
66185: PUSH
66186: LD_INT 33
66188: PUSH
66189: LD_INT 34
66191: PUSH
66192: LD_INT 36
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: PUSH
66231: LD_INT 101
66233: PUSH
66234: LD_INT 102
66236: PUSH
66237: LD_INT 103
66239: PUSH
66240: LD_INT 104
66242: PUSH
66243: LD_INT 105
66245: PUSH
66246: LD_INT 106
66248: PUSH
66249: LD_INT 107
66251: PUSH
66252: LD_INT 108
66254: PUSH
66255: LD_INT 109
66257: PUSH
66258: LD_INT 110
66260: PUSH
66261: LD_INT 111
66263: PUSH
66264: LD_INT 112
66266: PUSH
66267: LD_INT 113
66269: PUSH
66270: LD_INT 114
66272: PUSH
66273: LD_INT 116
66275: PUSH
66276: LD_INT 117
66278: PUSH
66279: LD_INT 118
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: ST_TO_ADDR
66305: GO 67760
66307: LD_INT 13
66309: DOUBLE
66310: EQUAL
66311: IFTRUE 66315
66313: GO 66523
66315: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
66316: LD_ADDR_VAR 0 2
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: LD_INT 2
66326: PUSH
66327: LD_INT 3
66329: PUSH
66330: LD_INT 4
66332: PUSH
66333: LD_INT 5
66335: PUSH
66336: LD_INT 8
66338: PUSH
66339: LD_INT 9
66341: PUSH
66342: LD_INT 10
66344: PUSH
66345: LD_INT 11
66347: PUSH
66348: LD_INT 12
66350: PUSH
66351: LD_INT 14
66353: PUSH
66354: LD_INT 15
66356: PUSH
66357: LD_INT 16
66359: PUSH
66360: LD_INT 17
66362: PUSH
66363: LD_INT 18
66365: PUSH
66366: LD_INT 19
66368: PUSH
66369: LD_INT 20
66371: PUSH
66372: LD_INT 21
66374: PUSH
66375: LD_INT 22
66377: PUSH
66378: LD_INT 23
66380: PUSH
66381: LD_INT 24
66383: PUSH
66384: LD_INT 25
66386: PUSH
66387: LD_INT 26
66389: PUSH
66390: LD_INT 27
66392: PUSH
66393: LD_INT 28
66395: PUSH
66396: LD_INT 30
66398: PUSH
66399: LD_INT 31
66401: PUSH
66402: LD_INT 32
66404: PUSH
66405: LD_INT 33
66407: PUSH
66408: LD_INT 34
66410: PUSH
66411: LD_INT 36
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 101
66449: PUSH
66450: LD_INT 102
66452: PUSH
66453: LD_INT 103
66455: PUSH
66456: LD_INT 104
66458: PUSH
66459: LD_INT 105
66461: PUSH
66462: LD_INT 106
66464: PUSH
66465: LD_INT 107
66467: PUSH
66468: LD_INT 108
66470: PUSH
66471: LD_INT 109
66473: PUSH
66474: LD_INT 110
66476: PUSH
66477: LD_INT 111
66479: PUSH
66480: LD_INT 112
66482: PUSH
66483: LD_INT 113
66485: PUSH
66486: LD_INT 114
66488: PUSH
66489: LD_INT 116
66491: PUSH
66492: LD_INT 117
66494: PUSH
66495: LD_INT 118
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: ST_TO_ADDR
66521: GO 67760
66523: LD_INT 14
66525: DOUBLE
66526: EQUAL
66527: IFTRUE 66531
66529: GO 66755
66531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
66532: LD_ADDR_VAR 0 2
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: LD_INT 3
66545: PUSH
66546: LD_INT 4
66548: PUSH
66549: LD_INT 5
66551: PUSH
66552: LD_INT 6
66554: PUSH
66555: LD_INT 7
66557: PUSH
66558: LD_INT 8
66560: PUSH
66561: LD_INT 9
66563: PUSH
66564: LD_INT 10
66566: PUSH
66567: LD_INT 11
66569: PUSH
66570: LD_INT 12
66572: PUSH
66573: LD_INT 13
66575: PUSH
66576: LD_INT 14
66578: PUSH
66579: LD_INT 15
66581: PUSH
66582: LD_INT 16
66584: PUSH
66585: LD_INT 17
66587: PUSH
66588: LD_INT 18
66590: PUSH
66591: LD_INT 19
66593: PUSH
66594: LD_INT 20
66596: PUSH
66597: LD_INT 21
66599: PUSH
66600: LD_INT 22
66602: PUSH
66603: LD_INT 23
66605: PUSH
66606: LD_INT 24
66608: PUSH
66609: LD_INT 25
66611: PUSH
66612: LD_INT 26
66614: PUSH
66615: LD_INT 27
66617: PUSH
66618: LD_INT 28
66620: PUSH
66621: LD_INT 29
66623: PUSH
66624: LD_INT 30
66626: PUSH
66627: LD_INT 31
66629: PUSH
66630: LD_INT 32
66632: PUSH
66633: LD_INT 33
66635: PUSH
66636: LD_INT 34
66638: PUSH
66639: LD_INT 36
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 101
66681: PUSH
66682: LD_INT 102
66684: PUSH
66685: LD_INT 103
66687: PUSH
66688: LD_INT 104
66690: PUSH
66691: LD_INT 105
66693: PUSH
66694: LD_INT 106
66696: PUSH
66697: LD_INT 107
66699: PUSH
66700: LD_INT 108
66702: PUSH
66703: LD_INT 109
66705: PUSH
66706: LD_INT 110
66708: PUSH
66709: LD_INT 111
66711: PUSH
66712: LD_INT 112
66714: PUSH
66715: LD_INT 113
66717: PUSH
66718: LD_INT 114
66720: PUSH
66721: LD_INT 116
66723: PUSH
66724: LD_INT 117
66726: PUSH
66727: LD_INT 118
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: ST_TO_ADDR
66753: GO 67760
66755: LD_INT 15
66757: DOUBLE
66758: EQUAL
66759: IFTRUE 66763
66761: GO 66987
66763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
66764: LD_ADDR_VAR 0 2
66768: PUSH
66769: LD_INT 1
66771: PUSH
66772: LD_INT 2
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: LD_INT 4
66780: PUSH
66781: LD_INT 5
66783: PUSH
66784: LD_INT 6
66786: PUSH
66787: LD_INT 7
66789: PUSH
66790: LD_INT 8
66792: PUSH
66793: LD_INT 9
66795: PUSH
66796: LD_INT 10
66798: PUSH
66799: LD_INT 11
66801: PUSH
66802: LD_INT 12
66804: PUSH
66805: LD_INT 13
66807: PUSH
66808: LD_INT 14
66810: PUSH
66811: LD_INT 15
66813: PUSH
66814: LD_INT 16
66816: PUSH
66817: LD_INT 17
66819: PUSH
66820: LD_INT 18
66822: PUSH
66823: LD_INT 19
66825: PUSH
66826: LD_INT 20
66828: PUSH
66829: LD_INT 21
66831: PUSH
66832: LD_INT 22
66834: PUSH
66835: LD_INT 23
66837: PUSH
66838: LD_INT 24
66840: PUSH
66841: LD_INT 25
66843: PUSH
66844: LD_INT 26
66846: PUSH
66847: LD_INT 27
66849: PUSH
66850: LD_INT 28
66852: PUSH
66853: LD_INT 29
66855: PUSH
66856: LD_INT 30
66858: PUSH
66859: LD_INT 31
66861: PUSH
66862: LD_INT 32
66864: PUSH
66865: LD_INT 33
66867: PUSH
66868: LD_INT 34
66870: PUSH
66871: LD_INT 36
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 101
66913: PUSH
66914: LD_INT 102
66916: PUSH
66917: LD_INT 103
66919: PUSH
66920: LD_INT 104
66922: PUSH
66923: LD_INT 105
66925: PUSH
66926: LD_INT 106
66928: PUSH
66929: LD_INT 107
66931: PUSH
66932: LD_INT 108
66934: PUSH
66935: LD_INT 109
66937: PUSH
66938: LD_INT 110
66940: PUSH
66941: LD_INT 111
66943: PUSH
66944: LD_INT 112
66946: PUSH
66947: LD_INT 113
66949: PUSH
66950: LD_INT 114
66952: PUSH
66953: LD_INT 116
66955: PUSH
66956: LD_INT 117
66958: PUSH
66959: LD_INT 118
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: ST_TO_ADDR
66985: GO 67760
66987: LD_INT 16
66989: DOUBLE
66990: EQUAL
66991: IFTRUE 66995
66993: GO 67131
66995: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
66996: LD_ADDR_VAR 0 2
67000: PUSH
67001: LD_INT 2
67003: PUSH
67004: LD_INT 4
67006: PUSH
67007: LD_INT 5
67009: PUSH
67010: LD_INT 7
67012: PUSH
67013: LD_INT 11
67015: PUSH
67016: LD_INT 12
67018: PUSH
67019: LD_INT 15
67021: PUSH
67022: LD_INT 16
67024: PUSH
67025: LD_INT 20
67027: PUSH
67028: LD_INT 21
67030: PUSH
67031: LD_INT 22
67033: PUSH
67034: LD_INT 23
67036: PUSH
67037: LD_INT 25
67039: PUSH
67040: LD_INT 26
67042: PUSH
67043: LD_INT 30
67045: PUSH
67046: LD_INT 31
67048: PUSH
67049: LD_INT 32
67051: PUSH
67052: LD_INT 33
67054: PUSH
67055: LD_INT 34
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 101
67081: PUSH
67082: LD_INT 102
67084: PUSH
67085: LD_INT 103
67087: PUSH
67088: LD_INT 106
67090: PUSH
67091: LD_INT 108
67093: PUSH
67094: LD_INT 112
67096: PUSH
67097: LD_INT 113
67099: PUSH
67100: LD_INT 114
67102: PUSH
67103: LD_INT 116
67105: PUSH
67106: LD_INT 117
67108: PUSH
67109: LD_INT 118
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: ST_TO_ADDR
67129: GO 67760
67131: LD_INT 17
67133: DOUBLE
67134: EQUAL
67135: IFTRUE 67139
67137: GO 67363
67139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
67140: LD_ADDR_VAR 0 2
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 2
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: LD_INT 4
67156: PUSH
67157: LD_INT 5
67159: PUSH
67160: LD_INT 6
67162: PUSH
67163: LD_INT 7
67165: PUSH
67166: LD_INT 8
67168: PUSH
67169: LD_INT 9
67171: PUSH
67172: LD_INT 10
67174: PUSH
67175: LD_INT 11
67177: PUSH
67178: LD_INT 12
67180: PUSH
67181: LD_INT 13
67183: PUSH
67184: LD_INT 14
67186: PUSH
67187: LD_INT 15
67189: PUSH
67190: LD_INT 16
67192: PUSH
67193: LD_INT 17
67195: PUSH
67196: LD_INT 18
67198: PUSH
67199: LD_INT 19
67201: PUSH
67202: LD_INT 20
67204: PUSH
67205: LD_INT 21
67207: PUSH
67208: LD_INT 22
67210: PUSH
67211: LD_INT 23
67213: PUSH
67214: LD_INT 24
67216: PUSH
67217: LD_INT 25
67219: PUSH
67220: LD_INT 26
67222: PUSH
67223: LD_INT 27
67225: PUSH
67226: LD_INT 28
67228: PUSH
67229: LD_INT 29
67231: PUSH
67232: LD_INT 30
67234: PUSH
67235: LD_INT 31
67237: PUSH
67238: LD_INT 32
67240: PUSH
67241: LD_INT 33
67243: PUSH
67244: LD_INT 34
67246: PUSH
67247: LD_INT 36
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 101
67289: PUSH
67290: LD_INT 102
67292: PUSH
67293: LD_INT 103
67295: PUSH
67296: LD_INT 104
67298: PUSH
67299: LD_INT 105
67301: PUSH
67302: LD_INT 106
67304: PUSH
67305: LD_INT 107
67307: PUSH
67308: LD_INT 108
67310: PUSH
67311: LD_INT 109
67313: PUSH
67314: LD_INT 110
67316: PUSH
67317: LD_INT 111
67319: PUSH
67320: LD_INT 112
67322: PUSH
67323: LD_INT 113
67325: PUSH
67326: LD_INT 114
67328: PUSH
67329: LD_INT 116
67331: PUSH
67332: LD_INT 117
67334: PUSH
67335: LD_INT 118
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: ST_TO_ADDR
67361: GO 67760
67363: LD_INT 18
67365: DOUBLE
67366: EQUAL
67367: IFTRUE 67371
67369: GO 67519
67371: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
67372: LD_ADDR_VAR 0 2
67376: PUSH
67377: LD_INT 2
67379: PUSH
67380: LD_INT 4
67382: PUSH
67383: LD_INT 5
67385: PUSH
67386: LD_INT 7
67388: PUSH
67389: LD_INT 11
67391: PUSH
67392: LD_INT 12
67394: PUSH
67395: LD_INT 15
67397: PUSH
67398: LD_INT 16
67400: PUSH
67401: LD_INT 20
67403: PUSH
67404: LD_INT 21
67406: PUSH
67407: LD_INT 22
67409: PUSH
67410: LD_INT 23
67412: PUSH
67413: LD_INT 25
67415: PUSH
67416: LD_INT 26
67418: PUSH
67419: LD_INT 30
67421: PUSH
67422: LD_INT 31
67424: PUSH
67425: LD_INT 32
67427: PUSH
67428: LD_INT 33
67430: PUSH
67431: LD_INT 34
67433: PUSH
67434: LD_INT 35
67436: PUSH
67437: LD_INT 36
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 101
67465: PUSH
67466: LD_INT 102
67468: PUSH
67469: LD_INT 103
67471: PUSH
67472: LD_INT 106
67474: PUSH
67475: LD_INT 108
67477: PUSH
67478: LD_INT 112
67480: PUSH
67481: LD_INT 113
67483: PUSH
67484: LD_INT 114
67486: PUSH
67487: LD_INT 115
67489: PUSH
67490: LD_INT 116
67492: PUSH
67493: LD_INT 117
67495: PUSH
67496: LD_INT 118
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: ST_TO_ADDR
67517: GO 67760
67519: LD_INT 19
67521: DOUBLE
67522: EQUAL
67523: IFTRUE 67527
67525: GO 67759
67527: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
67528: LD_ADDR_VAR 0 2
67532: PUSH
67533: LD_INT 1
67535: PUSH
67536: LD_INT 2
67538: PUSH
67539: LD_INT 3
67541: PUSH
67542: LD_INT 4
67544: PUSH
67545: LD_INT 5
67547: PUSH
67548: LD_INT 6
67550: PUSH
67551: LD_INT 7
67553: PUSH
67554: LD_INT 8
67556: PUSH
67557: LD_INT 9
67559: PUSH
67560: LD_INT 10
67562: PUSH
67563: LD_INT 11
67565: PUSH
67566: LD_INT 12
67568: PUSH
67569: LD_INT 13
67571: PUSH
67572: LD_INT 14
67574: PUSH
67575: LD_INT 15
67577: PUSH
67578: LD_INT 16
67580: PUSH
67581: LD_INT 17
67583: PUSH
67584: LD_INT 18
67586: PUSH
67587: LD_INT 19
67589: PUSH
67590: LD_INT 20
67592: PUSH
67593: LD_INT 21
67595: PUSH
67596: LD_INT 22
67598: PUSH
67599: LD_INT 23
67601: PUSH
67602: LD_INT 24
67604: PUSH
67605: LD_INT 25
67607: PUSH
67608: LD_INT 26
67610: PUSH
67611: LD_INT 27
67613: PUSH
67614: LD_INT 28
67616: PUSH
67617: LD_INT 29
67619: PUSH
67620: LD_INT 30
67622: PUSH
67623: LD_INT 31
67625: PUSH
67626: LD_INT 32
67628: PUSH
67629: LD_INT 33
67631: PUSH
67632: LD_INT 34
67634: PUSH
67635: LD_INT 35
67637: PUSH
67638: LD_INT 36
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 101
67681: PUSH
67682: LD_INT 102
67684: PUSH
67685: LD_INT 103
67687: PUSH
67688: LD_INT 104
67690: PUSH
67691: LD_INT 105
67693: PUSH
67694: LD_INT 106
67696: PUSH
67697: LD_INT 107
67699: PUSH
67700: LD_INT 108
67702: PUSH
67703: LD_INT 109
67705: PUSH
67706: LD_INT 110
67708: PUSH
67709: LD_INT 111
67711: PUSH
67712: LD_INT 112
67714: PUSH
67715: LD_INT 113
67717: PUSH
67718: LD_INT 114
67720: PUSH
67721: LD_INT 115
67723: PUSH
67724: LD_INT 116
67726: PUSH
67727: LD_INT 117
67729: PUSH
67730: LD_INT 118
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: ST_TO_ADDR
67757: GO 67760
67759: POP
// end else
67760: GO 67991
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
67762: LD_ADDR_VAR 0 2
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: LD_INT 2
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: LD_INT 4
67778: PUSH
67779: LD_INT 5
67781: PUSH
67782: LD_INT 6
67784: PUSH
67785: LD_INT 7
67787: PUSH
67788: LD_INT 8
67790: PUSH
67791: LD_INT 9
67793: PUSH
67794: LD_INT 10
67796: PUSH
67797: LD_INT 11
67799: PUSH
67800: LD_INT 12
67802: PUSH
67803: LD_INT 13
67805: PUSH
67806: LD_INT 14
67808: PUSH
67809: LD_INT 15
67811: PUSH
67812: LD_INT 16
67814: PUSH
67815: LD_INT 17
67817: PUSH
67818: LD_INT 18
67820: PUSH
67821: LD_INT 19
67823: PUSH
67824: LD_INT 20
67826: PUSH
67827: LD_INT 21
67829: PUSH
67830: LD_INT 22
67832: PUSH
67833: LD_INT 23
67835: PUSH
67836: LD_INT 24
67838: PUSH
67839: LD_INT 25
67841: PUSH
67842: LD_INT 26
67844: PUSH
67845: LD_INT 27
67847: PUSH
67848: LD_INT 28
67850: PUSH
67851: LD_INT 29
67853: PUSH
67854: LD_INT 30
67856: PUSH
67857: LD_INT 31
67859: PUSH
67860: LD_INT 32
67862: PUSH
67863: LD_INT 33
67865: PUSH
67866: LD_INT 34
67868: PUSH
67869: LD_INT 35
67871: PUSH
67872: LD_INT 36
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 101
67915: PUSH
67916: LD_INT 102
67918: PUSH
67919: LD_INT 103
67921: PUSH
67922: LD_INT 104
67924: PUSH
67925: LD_INT 105
67927: PUSH
67928: LD_INT 106
67930: PUSH
67931: LD_INT 107
67933: PUSH
67934: LD_INT 108
67936: PUSH
67937: LD_INT 109
67939: PUSH
67940: LD_INT 110
67942: PUSH
67943: LD_INT 111
67945: PUSH
67946: LD_INT 112
67948: PUSH
67949: LD_INT 113
67951: PUSH
67952: LD_INT 114
67954: PUSH
67955: LD_INT 115
67957: PUSH
67958: LD_INT 116
67960: PUSH
67961: LD_INT 117
67963: PUSH
67964: LD_INT 118
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: ST_TO_ADDR
// if result then
67991: LD_VAR 0 2
67995: IFFALSE 68781
// begin normal :=  ;
67997: LD_ADDR_VAR 0 5
68001: PUSH
68002: LD_STRING 
68004: ST_TO_ADDR
// hardcore :=  ;
68005: LD_ADDR_VAR 0 6
68009: PUSH
68010: LD_STRING 
68012: ST_TO_ADDR
// active :=  ;
68013: LD_ADDR_VAR 0 7
68017: PUSH
68018: LD_STRING 
68020: ST_TO_ADDR
// for i = 1 to normalCounter do
68021: LD_ADDR_VAR 0 8
68025: PUSH
68026: DOUBLE
68027: LD_INT 1
68029: DEC
68030: ST_TO_ADDR
68031: LD_EXP 47
68035: PUSH
68036: FOR_TO
68037: IFFALSE 68138
// begin tmp := 0 ;
68039: LD_ADDR_VAR 0 3
68043: PUSH
68044: LD_STRING 0
68046: ST_TO_ADDR
// if result [ 1 ] then
68047: LD_VAR 0 2
68051: PUSH
68052: LD_INT 1
68054: ARRAY
68055: IFFALSE 68120
// if result [ 1 ] [ 1 ] = i then
68057: LD_VAR 0 2
68061: PUSH
68062: LD_INT 1
68064: ARRAY
68065: PUSH
68066: LD_INT 1
68068: ARRAY
68069: PUSH
68070: LD_VAR 0 8
68074: EQUAL
68075: IFFALSE 68120
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68077: LD_ADDR_VAR 0 2
68081: PUSH
68082: LD_VAR 0 2
68086: PPUSH
68087: LD_INT 1
68089: PPUSH
68090: LD_VAR 0 2
68094: PUSH
68095: LD_INT 1
68097: ARRAY
68098: PPUSH
68099: LD_INT 1
68101: PPUSH
68102: CALL_OW 3
68106: PPUSH
68107: CALL_OW 1
68111: ST_TO_ADDR
// tmp := 1 ;
68112: LD_ADDR_VAR 0 3
68116: PUSH
68117: LD_STRING 1
68119: ST_TO_ADDR
// end ; normal := normal & tmp ;
68120: LD_ADDR_VAR 0 5
68124: PUSH
68125: LD_VAR 0 5
68129: PUSH
68130: LD_VAR 0 3
68134: STR
68135: ST_TO_ADDR
// end ;
68136: GO 68036
68138: POP
68139: POP
// for i = 1 to hardcoreCounter do
68140: LD_ADDR_VAR 0 8
68144: PUSH
68145: DOUBLE
68146: LD_INT 1
68148: DEC
68149: ST_TO_ADDR
68150: LD_EXP 48
68154: PUSH
68155: FOR_TO
68156: IFFALSE 68261
// begin tmp := 0 ;
68158: LD_ADDR_VAR 0 3
68162: PUSH
68163: LD_STRING 0
68165: ST_TO_ADDR
// if result [ 2 ] then
68166: LD_VAR 0 2
68170: PUSH
68171: LD_INT 2
68173: ARRAY
68174: IFFALSE 68243
// if result [ 2 ] [ 1 ] = 100 + i then
68176: LD_VAR 0 2
68180: PUSH
68181: LD_INT 2
68183: ARRAY
68184: PUSH
68185: LD_INT 1
68187: ARRAY
68188: PUSH
68189: LD_INT 100
68191: PUSH
68192: LD_VAR 0 8
68196: PLUS
68197: EQUAL
68198: IFFALSE 68243
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
68200: LD_ADDR_VAR 0 2
68204: PUSH
68205: LD_VAR 0 2
68209: PPUSH
68210: LD_INT 2
68212: PPUSH
68213: LD_VAR 0 2
68217: PUSH
68218: LD_INT 2
68220: ARRAY
68221: PPUSH
68222: LD_INT 1
68224: PPUSH
68225: CALL_OW 3
68229: PPUSH
68230: CALL_OW 1
68234: ST_TO_ADDR
// tmp := 1 ;
68235: LD_ADDR_VAR 0 3
68239: PUSH
68240: LD_STRING 1
68242: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
68243: LD_ADDR_VAR 0 6
68247: PUSH
68248: LD_VAR 0 6
68252: PUSH
68253: LD_VAR 0 3
68257: STR
68258: ST_TO_ADDR
// end ;
68259: GO 68155
68261: POP
68262: POP
// if isGameLoad then
68263: LD_VAR 0 1
68267: IFFALSE 68742
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
68269: LD_ADDR_VAR 0 4
68273: PUSH
68274: LD_EXP 51
68278: PUSH
68279: LD_EXP 50
68283: PUSH
68284: LD_EXP 52
68288: PUSH
68289: LD_EXP 49
68293: PUSH
68294: LD_EXP 53
68298: PUSH
68299: LD_EXP 54
68303: PUSH
68304: LD_EXP 55
68308: PUSH
68309: LD_EXP 56
68313: PUSH
68314: LD_EXP 57
68318: PUSH
68319: LD_EXP 58
68323: PUSH
68324: LD_EXP 59
68328: PUSH
68329: LD_EXP 60
68333: PUSH
68334: LD_EXP 61
68338: PUSH
68339: LD_EXP 62
68343: PUSH
68344: LD_EXP 70
68348: PUSH
68349: LD_EXP 71
68353: PUSH
68354: LD_EXP 72
68358: PUSH
68359: LD_EXP 73
68363: PUSH
68364: LD_EXP 75
68368: PUSH
68369: LD_EXP 76
68373: PUSH
68374: LD_EXP 77
68378: PUSH
68379: LD_EXP 80
68383: PUSH
68384: LD_EXP 82
68388: PUSH
68389: LD_EXP 83
68393: PUSH
68394: LD_EXP 84
68398: PUSH
68399: LD_EXP 86
68403: PUSH
68404: LD_EXP 87
68408: PUSH
68409: LD_EXP 90
68413: PUSH
68414: LD_EXP 91
68418: PUSH
68419: LD_EXP 92
68423: PUSH
68424: LD_EXP 93
68428: PUSH
68429: LD_EXP 94
68433: PUSH
68434: LD_EXP 95
68438: PUSH
68439: LD_EXP 96
68443: PUSH
68444: LD_EXP 97
68448: PUSH
68449: LD_EXP 98
68453: PUSH
68454: LD_EXP 63
68458: PUSH
68459: LD_EXP 64
68463: PUSH
68464: LD_EXP 67
68468: PUSH
68469: LD_EXP 68
68473: PUSH
68474: LD_EXP 69
68478: PUSH
68479: LD_EXP 65
68483: PUSH
68484: LD_EXP 66
68488: PUSH
68489: LD_EXP 74
68493: PUSH
68494: LD_EXP 78
68498: PUSH
68499: LD_EXP 79
68503: PUSH
68504: LD_EXP 81
68508: PUSH
68509: LD_EXP 85
68513: PUSH
68514: LD_EXP 88
68518: PUSH
68519: LD_EXP 89
68523: PUSH
68524: LD_EXP 99
68528: PUSH
68529: LD_EXP 100
68533: PUSH
68534: LD_EXP 101
68538: PUSH
68539: LD_EXP 102
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: ST_TO_ADDR
// tmp :=  ;
68600: LD_ADDR_VAR 0 3
68604: PUSH
68605: LD_STRING 
68607: ST_TO_ADDR
// for i = 1 to normalCounter do
68608: LD_ADDR_VAR 0 8
68612: PUSH
68613: DOUBLE
68614: LD_INT 1
68616: DEC
68617: ST_TO_ADDR
68618: LD_EXP 47
68622: PUSH
68623: FOR_TO
68624: IFFALSE 68660
// begin if flags [ i ] then
68626: LD_VAR 0 4
68630: PUSH
68631: LD_VAR 0 8
68635: ARRAY
68636: IFFALSE 68658
// tmp := tmp & i & ; ;
68638: LD_ADDR_VAR 0 3
68642: PUSH
68643: LD_VAR 0 3
68647: PUSH
68648: LD_VAR 0 8
68652: STR
68653: PUSH
68654: LD_STRING ;
68656: STR
68657: ST_TO_ADDR
// end ;
68658: GO 68623
68660: POP
68661: POP
// for i = 1 to hardcoreCounter do
68662: LD_ADDR_VAR 0 8
68666: PUSH
68667: DOUBLE
68668: LD_INT 1
68670: DEC
68671: ST_TO_ADDR
68672: LD_EXP 48
68676: PUSH
68677: FOR_TO
68678: IFFALSE 68724
// begin if flags [ normalCounter + i ] then
68680: LD_VAR 0 4
68684: PUSH
68685: LD_EXP 47
68689: PUSH
68690: LD_VAR 0 8
68694: PLUS
68695: ARRAY
68696: IFFALSE 68722
// tmp := tmp & ( 100 + i ) & ; ;
68698: LD_ADDR_VAR 0 3
68702: PUSH
68703: LD_VAR 0 3
68707: PUSH
68708: LD_INT 100
68710: PUSH
68711: LD_VAR 0 8
68715: PLUS
68716: STR
68717: PUSH
68718: LD_STRING ;
68720: STR
68721: ST_TO_ADDR
// end ;
68722: GO 68677
68724: POP
68725: POP
// if tmp then
68726: LD_VAR 0 3
68730: IFFALSE 68742
// active := tmp ;
68732: LD_ADDR_VAR 0 7
68736: PUSH
68737: LD_VAR 0 3
68741: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
68742: LD_STRING getStreamItemsFromMission("
68744: PUSH
68745: LD_VAR 0 5
68749: STR
68750: PUSH
68751: LD_STRING ","
68753: STR
68754: PUSH
68755: LD_VAR 0 6
68759: STR
68760: PUSH
68761: LD_STRING ","
68763: STR
68764: PUSH
68765: LD_VAR 0 7
68769: STR
68770: PUSH
68771: LD_STRING ")
68773: STR
68774: PPUSH
68775: CALL_OW 559
// end else
68779: GO 68788
// ToLua ( getStreamItemsFromMission("","","") ) ;
68781: LD_STRING getStreamItemsFromMission("","","")
68783: PPUSH
68784: CALL_OW 559
// end ;
68788: LD_VAR 0 2
68792: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68793: LD_EXP 46
68797: PUSH
68798: LD_EXP 51
68802: AND
68803: IFFALSE 68927
68805: GO 68807
68807: DISABLE
68808: LD_INT 0
68810: PPUSH
68811: PPUSH
// begin enable ;
68812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68813: LD_ADDR_VAR 0 2
68817: PUSH
68818: LD_INT 22
68820: PUSH
68821: LD_OWVAR 2
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: LD_INT 34
68835: PUSH
68836: LD_INT 7
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 34
68845: PUSH
68846: LD_INT 45
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 34
68855: PUSH
68856: LD_INT 28
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 34
68865: PUSH
68866: LD_INT 47
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PPUSH
68884: CALL_OW 69
68888: ST_TO_ADDR
// if not tmp then
68889: LD_VAR 0 2
68893: NOT
68894: IFFALSE 68898
// exit ;
68896: GO 68927
// for i in tmp do
68898: LD_ADDR_VAR 0 1
68902: PUSH
68903: LD_VAR 0 2
68907: PUSH
68908: FOR_IN
68909: IFFALSE 68925
// begin SetLives ( i , 0 ) ;
68911: LD_VAR 0 1
68915: PPUSH
68916: LD_INT 0
68918: PPUSH
68919: CALL_OW 234
// end ;
68923: GO 68908
68925: POP
68926: POP
// end ;
68927: PPOPN 2
68929: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68930: LD_EXP 46
68934: PUSH
68935: LD_EXP 52
68939: AND
68940: IFFALSE 69024
68942: GO 68944
68944: DISABLE
68945: LD_INT 0
68947: PPUSH
68948: PPUSH
// begin enable ;
68949: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68950: LD_ADDR_VAR 0 2
68954: PUSH
68955: LD_INT 22
68957: PUSH
68958: LD_OWVAR 2
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 32
68969: PUSH
68970: LD_INT 3
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PPUSH
68981: CALL_OW 69
68985: ST_TO_ADDR
// if not tmp then
68986: LD_VAR 0 2
68990: NOT
68991: IFFALSE 68995
// exit ;
68993: GO 69024
// for i in tmp do
68995: LD_ADDR_VAR 0 1
68999: PUSH
69000: LD_VAR 0 2
69004: PUSH
69005: FOR_IN
69006: IFFALSE 69022
// begin SetLives ( i , 0 ) ;
69008: LD_VAR 0 1
69012: PPUSH
69013: LD_INT 0
69015: PPUSH
69016: CALL_OW 234
// end ;
69020: GO 69005
69022: POP
69023: POP
// end ;
69024: PPOPN 2
69026: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
69027: LD_EXP 46
69031: PUSH
69032: LD_EXP 49
69036: AND
69037: IFFALSE 69130
69039: GO 69041
69041: DISABLE
69042: LD_INT 0
69044: PPUSH
// begin enable ;
69045: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
69046: LD_ADDR_VAR 0 1
69050: PUSH
69051: LD_INT 22
69053: PUSH
69054: LD_OWVAR 2
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 2
69065: PUSH
69066: LD_INT 25
69068: PUSH
69069: LD_INT 5
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 25
69078: PUSH
69079: LD_INT 9
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 25
69088: PUSH
69089: LD_INT 8
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PPUSH
69106: CALL_OW 69
69110: PUSH
69111: FOR_IN
69112: IFFALSE 69128
// begin SetClass ( i , 1 ) ;
69114: LD_VAR 0 1
69118: PPUSH
69119: LD_INT 1
69121: PPUSH
69122: CALL_OW 336
// end ;
69126: GO 69111
69128: POP
69129: POP
// end ;
69130: PPOPN 1
69132: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
69133: LD_EXP 46
69137: PUSH
69138: LD_EXP 50
69142: AND
69143: PUSH
69144: LD_OWVAR 65
69148: PUSH
69149: LD_INT 7
69151: LESS
69152: AND
69153: IFFALSE 69167
69155: GO 69157
69157: DISABLE
// begin enable ;
69158: ENABLE
// game_speed := 7 ;
69159: LD_ADDR_OWVAR 65
69163: PUSH
69164: LD_INT 7
69166: ST_TO_ADDR
// end ;
69167: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
69168: LD_EXP 46
69172: PUSH
69173: LD_EXP 53
69177: AND
69178: IFFALSE 69380
69180: GO 69182
69182: DISABLE
69183: LD_INT 0
69185: PPUSH
69186: PPUSH
69187: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69188: LD_ADDR_VAR 0 3
69192: PUSH
69193: LD_INT 81
69195: PUSH
69196: LD_OWVAR 2
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 21
69207: PUSH
69208: LD_INT 1
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PPUSH
69219: CALL_OW 69
69223: ST_TO_ADDR
// if not tmp then
69224: LD_VAR 0 3
69228: NOT
69229: IFFALSE 69233
// exit ;
69231: GO 69380
// if tmp > 5 then
69233: LD_VAR 0 3
69237: PUSH
69238: LD_INT 5
69240: GREATER
69241: IFFALSE 69253
// k := 5 else
69243: LD_ADDR_VAR 0 2
69247: PUSH
69248: LD_INT 5
69250: ST_TO_ADDR
69251: GO 69263
// k := tmp ;
69253: LD_ADDR_VAR 0 2
69257: PUSH
69258: LD_VAR 0 3
69262: ST_TO_ADDR
// for i := 1 to k do
69263: LD_ADDR_VAR 0 1
69267: PUSH
69268: DOUBLE
69269: LD_INT 1
69271: DEC
69272: ST_TO_ADDR
69273: LD_VAR 0 2
69277: PUSH
69278: FOR_TO
69279: IFFALSE 69378
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
69281: LD_VAR 0 3
69285: PUSH
69286: LD_VAR 0 1
69290: ARRAY
69291: PPUSH
69292: LD_VAR 0 1
69296: PUSH
69297: LD_INT 4
69299: MOD
69300: PUSH
69301: LD_INT 1
69303: PLUS
69304: PPUSH
69305: CALL_OW 259
69309: PUSH
69310: LD_INT 10
69312: LESS
69313: IFFALSE 69376
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
69315: LD_VAR 0 3
69319: PUSH
69320: LD_VAR 0 1
69324: ARRAY
69325: PPUSH
69326: LD_VAR 0 1
69330: PUSH
69331: LD_INT 4
69333: MOD
69334: PUSH
69335: LD_INT 1
69337: PLUS
69338: PPUSH
69339: LD_VAR 0 3
69343: PUSH
69344: LD_VAR 0 1
69348: ARRAY
69349: PPUSH
69350: LD_VAR 0 1
69354: PUSH
69355: LD_INT 4
69357: MOD
69358: PUSH
69359: LD_INT 1
69361: PLUS
69362: PPUSH
69363: CALL_OW 259
69367: PUSH
69368: LD_INT 1
69370: PLUS
69371: PPUSH
69372: CALL_OW 237
69376: GO 69278
69378: POP
69379: POP
// end ;
69380: PPOPN 3
69382: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
69383: LD_EXP 46
69387: PUSH
69388: LD_EXP 54
69392: AND
69393: IFFALSE 69413
69395: GO 69397
69397: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
69398: LD_INT 4
69400: PPUSH
69401: LD_OWVAR 2
69405: PPUSH
69406: LD_INT 0
69408: PPUSH
69409: CALL_OW 324
69413: END
// every 0 0$1 trigger StreamModeActive and sShovel do
69414: LD_EXP 46
69418: PUSH
69419: LD_EXP 83
69423: AND
69424: IFFALSE 69444
69426: GO 69428
69428: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69429: LD_INT 19
69431: PPUSH
69432: LD_OWVAR 2
69436: PPUSH
69437: LD_INT 0
69439: PPUSH
69440: CALL_OW 324
69444: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69445: LD_EXP 46
69449: PUSH
69450: LD_EXP 55
69454: AND
69455: IFFALSE 69557
69457: GO 69459
69459: DISABLE
69460: LD_INT 0
69462: PPUSH
69463: PPUSH
// begin enable ;
69464: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69465: LD_ADDR_VAR 0 2
69469: PUSH
69470: LD_INT 22
69472: PUSH
69473: LD_OWVAR 2
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: LD_INT 34
69487: PUSH
69488: LD_INT 11
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 34
69497: PUSH
69498: LD_INT 30
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: LIST
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PPUSH
69514: CALL_OW 69
69518: ST_TO_ADDR
// if not tmp then
69519: LD_VAR 0 2
69523: NOT
69524: IFFALSE 69528
// exit ;
69526: GO 69557
// for i in tmp do
69528: LD_ADDR_VAR 0 1
69532: PUSH
69533: LD_VAR 0 2
69537: PUSH
69538: FOR_IN
69539: IFFALSE 69555
// begin SetLives ( i , 0 ) ;
69541: LD_VAR 0 1
69545: PPUSH
69546: LD_INT 0
69548: PPUSH
69549: CALL_OW 234
// end ;
69553: GO 69538
69555: POP
69556: POP
// end ;
69557: PPOPN 2
69559: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69560: LD_EXP 46
69564: PUSH
69565: LD_EXP 56
69569: AND
69570: IFFALSE 69590
69572: GO 69574
69574: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69575: LD_INT 32
69577: PPUSH
69578: LD_OWVAR 2
69582: PPUSH
69583: LD_INT 0
69585: PPUSH
69586: CALL_OW 324
69590: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69591: LD_EXP 46
69595: PUSH
69596: LD_EXP 57
69600: AND
69601: IFFALSE 69782
69603: GO 69605
69605: DISABLE
69606: LD_INT 0
69608: PPUSH
69609: PPUSH
69610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69611: LD_ADDR_VAR 0 2
69615: PUSH
69616: LD_INT 22
69618: PUSH
69619: LD_OWVAR 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 33
69630: PUSH
69631: LD_INT 3
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PPUSH
69642: CALL_OW 69
69646: ST_TO_ADDR
// if not tmp then
69647: LD_VAR 0 2
69651: NOT
69652: IFFALSE 69656
// exit ;
69654: GO 69782
// side := 0 ;
69656: LD_ADDR_VAR 0 3
69660: PUSH
69661: LD_INT 0
69663: ST_TO_ADDR
// for i := 1 to 8 do
69664: LD_ADDR_VAR 0 1
69668: PUSH
69669: DOUBLE
69670: LD_INT 1
69672: DEC
69673: ST_TO_ADDR
69674: LD_INT 8
69676: PUSH
69677: FOR_TO
69678: IFFALSE 69726
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69680: LD_OWVAR 2
69684: PUSH
69685: LD_VAR 0 1
69689: NONEQUAL
69690: PUSH
69691: LD_OWVAR 2
69695: PPUSH
69696: LD_VAR 0 1
69700: PPUSH
69701: CALL_OW 81
69705: PUSH
69706: LD_INT 2
69708: EQUAL
69709: AND
69710: IFFALSE 69724
// begin side := i ;
69712: LD_ADDR_VAR 0 3
69716: PUSH
69717: LD_VAR 0 1
69721: ST_TO_ADDR
// break ;
69722: GO 69726
// end ;
69724: GO 69677
69726: POP
69727: POP
// if not side then
69728: LD_VAR 0 3
69732: NOT
69733: IFFALSE 69737
// exit ;
69735: GO 69782
// for i := 1 to tmp do
69737: LD_ADDR_VAR 0 1
69741: PUSH
69742: DOUBLE
69743: LD_INT 1
69745: DEC
69746: ST_TO_ADDR
69747: LD_VAR 0 2
69751: PUSH
69752: FOR_TO
69753: IFFALSE 69780
// if Prob ( 60 ) then
69755: LD_INT 60
69757: PPUSH
69758: CALL_OW 13
69762: IFFALSE 69778
// SetSide ( i , side ) ;
69764: LD_VAR 0 1
69768: PPUSH
69769: LD_VAR 0 3
69773: PPUSH
69774: CALL_OW 235
69778: GO 69752
69780: POP
69781: POP
// end ;
69782: PPOPN 3
69784: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69785: LD_EXP 46
69789: PUSH
69790: LD_EXP 59
69794: AND
69795: IFFALSE 69914
69797: GO 69799
69799: DISABLE
69800: LD_INT 0
69802: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69803: LD_ADDR_VAR 0 1
69807: PUSH
69808: LD_INT 22
69810: PUSH
69811: LD_OWVAR 2
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 21
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 3
69832: PUSH
69833: LD_INT 23
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: LIST
69851: PPUSH
69852: CALL_OW 69
69856: PUSH
69857: FOR_IN
69858: IFFALSE 69912
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69860: LD_VAR 0 1
69864: PPUSH
69865: CALL_OW 257
69869: PUSH
69870: LD_INT 1
69872: PUSH
69873: LD_INT 2
69875: PUSH
69876: LD_INT 3
69878: PUSH
69879: LD_INT 4
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: IN
69888: IFFALSE 69910
// SetClass ( un , rand ( 1 , 4 ) ) ;
69890: LD_VAR 0 1
69894: PPUSH
69895: LD_INT 1
69897: PPUSH
69898: LD_INT 4
69900: PPUSH
69901: CALL_OW 12
69905: PPUSH
69906: CALL_OW 336
69910: GO 69857
69912: POP
69913: POP
// end ;
69914: PPOPN 1
69916: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69917: LD_EXP 46
69921: PUSH
69922: LD_EXP 58
69926: AND
69927: IFFALSE 70006
69929: GO 69931
69931: DISABLE
69932: LD_INT 0
69934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69935: LD_ADDR_VAR 0 1
69939: PUSH
69940: LD_INT 22
69942: PUSH
69943: LD_OWVAR 2
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 21
69954: PUSH
69955: LD_INT 3
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PPUSH
69966: CALL_OW 69
69970: ST_TO_ADDR
// if not tmp then
69971: LD_VAR 0 1
69975: NOT
69976: IFFALSE 69980
// exit ;
69978: GO 70006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69980: LD_VAR 0 1
69984: PUSH
69985: LD_INT 1
69987: PPUSH
69988: LD_VAR 0 1
69992: PPUSH
69993: CALL_OW 12
69997: ARRAY
69998: PPUSH
69999: LD_INT 100
70001: PPUSH
70002: CALL_OW 234
// end ;
70006: PPOPN 1
70008: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
70009: LD_EXP 46
70013: PUSH
70014: LD_EXP 60
70018: AND
70019: IFFALSE 70117
70021: GO 70023
70023: DISABLE
70024: LD_INT 0
70026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70027: LD_ADDR_VAR 0 1
70031: PUSH
70032: LD_INT 22
70034: PUSH
70035: LD_OWVAR 2
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 21
70046: PUSH
70047: LD_INT 1
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PPUSH
70058: CALL_OW 69
70062: ST_TO_ADDR
// if not tmp then
70063: LD_VAR 0 1
70067: NOT
70068: IFFALSE 70072
// exit ;
70070: GO 70117
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
70072: LD_VAR 0 1
70076: PUSH
70077: LD_INT 1
70079: PPUSH
70080: LD_VAR 0 1
70084: PPUSH
70085: CALL_OW 12
70089: ARRAY
70090: PPUSH
70091: LD_INT 1
70093: PPUSH
70094: LD_INT 4
70096: PPUSH
70097: CALL_OW 12
70101: PPUSH
70102: LD_INT 3000
70104: PPUSH
70105: LD_INT 9000
70107: PPUSH
70108: CALL_OW 12
70112: PPUSH
70113: CALL_OW 492
// end ;
70117: PPOPN 1
70119: END
// every 0 0$1 trigger StreamModeActive and sDepot do
70120: LD_EXP 46
70124: PUSH
70125: LD_EXP 61
70129: AND
70130: IFFALSE 70150
70132: GO 70134
70134: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
70135: LD_INT 1
70137: PPUSH
70138: LD_OWVAR 2
70142: PPUSH
70143: LD_INT 0
70145: PPUSH
70146: CALL_OW 324
70150: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
70151: LD_EXP 46
70155: PUSH
70156: LD_EXP 62
70160: AND
70161: IFFALSE 70244
70163: GO 70165
70165: DISABLE
70166: LD_INT 0
70168: PPUSH
70169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70170: LD_ADDR_VAR 0 2
70174: PUSH
70175: LD_INT 22
70177: PUSH
70178: LD_OWVAR 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 21
70189: PUSH
70190: LD_INT 3
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PPUSH
70201: CALL_OW 69
70205: ST_TO_ADDR
// if not tmp then
70206: LD_VAR 0 2
70210: NOT
70211: IFFALSE 70215
// exit ;
70213: GO 70244
// for i in tmp do
70215: LD_ADDR_VAR 0 1
70219: PUSH
70220: LD_VAR 0 2
70224: PUSH
70225: FOR_IN
70226: IFFALSE 70242
// SetBLevel ( i , 10 ) ;
70228: LD_VAR 0 1
70232: PPUSH
70233: LD_INT 10
70235: PPUSH
70236: CALL_OW 241
70240: GO 70225
70242: POP
70243: POP
// end ;
70244: PPOPN 2
70246: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
70247: LD_EXP 46
70251: PUSH
70252: LD_EXP 63
70256: AND
70257: IFFALSE 70368
70259: GO 70261
70261: DISABLE
70262: LD_INT 0
70264: PPUSH
70265: PPUSH
70266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70267: LD_ADDR_VAR 0 3
70271: PUSH
70272: LD_INT 22
70274: PUSH
70275: LD_OWVAR 2
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 25
70286: PUSH
70287: LD_INT 1
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PPUSH
70298: CALL_OW 69
70302: ST_TO_ADDR
// if not tmp then
70303: LD_VAR 0 3
70307: NOT
70308: IFFALSE 70312
// exit ;
70310: GO 70368
// un := tmp [ rand ( 1 , tmp ) ] ;
70312: LD_ADDR_VAR 0 2
70316: PUSH
70317: LD_VAR 0 3
70321: PUSH
70322: LD_INT 1
70324: PPUSH
70325: LD_VAR 0 3
70329: PPUSH
70330: CALL_OW 12
70334: ARRAY
70335: ST_TO_ADDR
// if Crawls ( un ) then
70336: LD_VAR 0 2
70340: PPUSH
70341: CALL_OW 318
70345: IFFALSE 70356
// ComWalk ( un ) ;
70347: LD_VAR 0 2
70351: PPUSH
70352: CALL_OW 138
// SetClass ( un , class_sniper ) ;
70356: LD_VAR 0 2
70360: PPUSH
70361: LD_INT 5
70363: PPUSH
70364: CALL_OW 336
// end ;
70368: PPOPN 3
70370: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
70371: LD_EXP 46
70375: PUSH
70376: LD_EXP 64
70380: AND
70381: PUSH
70382: LD_OWVAR 67
70386: PUSH
70387: LD_INT 4
70389: LESS
70390: AND
70391: IFFALSE 70410
70393: GO 70395
70395: DISABLE
// begin Difficulty := Difficulty + 1 ;
70396: LD_ADDR_OWVAR 67
70400: PUSH
70401: LD_OWVAR 67
70405: PUSH
70406: LD_INT 1
70408: PLUS
70409: ST_TO_ADDR
// end ;
70410: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
70411: LD_EXP 46
70415: PUSH
70416: LD_EXP 65
70420: AND
70421: IFFALSE 70524
70423: GO 70425
70425: DISABLE
70426: LD_INT 0
70428: PPUSH
// begin for i := 1 to 5 do
70429: LD_ADDR_VAR 0 1
70433: PUSH
70434: DOUBLE
70435: LD_INT 1
70437: DEC
70438: ST_TO_ADDR
70439: LD_INT 5
70441: PUSH
70442: FOR_TO
70443: IFFALSE 70522
// begin uc_nation := nation_nature ;
70445: LD_ADDR_OWVAR 21
70449: PUSH
70450: LD_INT 0
70452: ST_TO_ADDR
// uc_side := 0 ;
70453: LD_ADDR_OWVAR 20
70457: PUSH
70458: LD_INT 0
70460: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70461: LD_ADDR_OWVAR 29
70465: PUSH
70466: LD_INT 12
70468: PUSH
70469: LD_INT 12
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: ST_TO_ADDR
// hc_agressivity := 20 ;
70476: LD_ADDR_OWVAR 35
70480: PUSH
70481: LD_INT 20
70483: ST_TO_ADDR
// hc_class := class_tiger ;
70484: LD_ADDR_OWVAR 28
70488: PUSH
70489: LD_INT 14
70491: ST_TO_ADDR
// hc_gallery :=  ;
70492: LD_ADDR_OWVAR 33
70496: PUSH
70497: LD_STRING 
70499: ST_TO_ADDR
// hc_name :=  ;
70500: LD_ADDR_OWVAR 26
70504: PUSH
70505: LD_STRING 
70507: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70508: CALL_OW 44
70512: PPUSH
70513: LD_INT 0
70515: PPUSH
70516: CALL_OW 51
// end ;
70520: GO 70442
70522: POP
70523: POP
// end ;
70524: PPOPN 1
70526: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70527: LD_EXP 46
70531: PUSH
70532: LD_EXP 66
70536: AND
70537: IFFALSE 70546
70539: GO 70541
70541: DISABLE
// StreamSibBomb ;
70542: CALL 70547 0 0
70546: END
// export function StreamSibBomb ; var i , x , y ; begin
70547: LD_INT 0
70549: PPUSH
70550: PPUSH
70551: PPUSH
70552: PPUSH
// result := false ;
70553: LD_ADDR_VAR 0 1
70557: PUSH
70558: LD_INT 0
70560: ST_TO_ADDR
// for i := 1 to 16 do
70561: LD_ADDR_VAR 0 2
70565: PUSH
70566: DOUBLE
70567: LD_INT 1
70569: DEC
70570: ST_TO_ADDR
70571: LD_INT 16
70573: PUSH
70574: FOR_TO
70575: IFFALSE 70774
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70577: LD_ADDR_VAR 0 3
70581: PUSH
70582: LD_INT 10
70584: PUSH
70585: LD_INT 20
70587: PUSH
70588: LD_INT 30
70590: PUSH
70591: LD_INT 40
70593: PUSH
70594: LD_INT 50
70596: PUSH
70597: LD_INT 60
70599: PUSH
70600: LD_INT 70
70602: PUSH
70603: LD_INT 80
70605: PUSH
70606: LD_INT 90
70608: PUSH
70609: LD_INT 100
70611: PUSH
70612: LD_INT 110
70614: PUSH
70615: LD_INT 120
70617: PUSH
70618: LD_INT 130
70620: PUSH
70621: LD_INT 140
70623: PUSH
70624: LD_INT 150
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 1
70646: PPUSH
70647: LD_INT 15
70649: PPUSH
70650: CALL_OW 12
70654: ARRAY
70655: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70656: LD_ADDR_VAR 0 4
70660: PUSH
70661: LD_INT 10
70663: PUSH
70664: LD_INT 20
70666: PUSH
70667: LD_INT 30
70669: PUSH
70670: LD_INT 40
70672: PUSH
70673: LD_INT 50
70675: PUSH
70676: LD_INT 60
70678: PUSH
70679: LD_INT 70
70681: PUSH
70682: LD_INT 80
70684: PUSH
70685: LD_INT 90
70687: PUSH
70688: LD_INT 100
70690: PUSH
70691: LD_INT 110
70693: PUSH
70694: LD_INT 120
70696: PUSH
70697: LD_INT 130
70699: PUSH
70700: LD_INT 140
70702: PUSH
70703: LD_INT 150
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 1
70725: PPUSH
70726: LD_INT 15
70728: PPUSH
70729: CALL_OW 12
70733: ARRAY
70734: ST_TO_ADDR
// if ValidHex ( x , y ) then
70735: LD_VAR 0 3
70739: PPUSH
70740: LD_VAR 0 4
70744: PPUSH
70745: CALL_OW 488
70749: IFFALSE 70772
// begin result := [ x , y ] ;
70751: LD_ADDR_VAR 0 1
70755: PUSH
70756: LD_VAR 0 3
70760: PUSH
70761: LD_VAR 0 4
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: ST_TO_ADDR
// break ;
70770: GO 70774
// end ; end ;
70772: GO 70574
70774: POP
70775: POP
// if result then
70776: LD_VAR 0 1
70780: IFFALSE 70840
// begin ToLua ( playSibBomb() ) ;
70782: LD_STRING playSibBomb()
70784: PPUSH
70785: CALL_OW 559
// wait ( 0 0$14 ) ;
70789: LD_INT 490
70791: PPUSH
70792: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70796: LD_VAR 0 1
70800: PUSH
70801: LD_INT 1
70803: ARRAY
70804: PPUSH
70805: LD_VAR 0 1
70809: PUSH
70810: LD_INT 2
70812: ARRAY
70813: PPUSH
70814: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70818: LD_VAR 0 1
70822: PUSH
70823: LD_INT 1
70825: ARRAY
70826: PPUSH
70827: LD_VAR 0 1
70831: PUSH
70832: LD_INT 2
70834: ARRAY
70835: PPUSH
70836: CALL_OW 429
// end ; end ;
70840: LD_VAR 0 1
70844: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70845: LD_EXP 46
70849: PUSH
70850: LD_EXP 68
70854: AND
70855: IFFALSE 70867
70857: GO 70859
70859: DISABLE
// YouLost (  ) ;
70860: LD_STRING 
70862: PPUSH
70863: CALL_OW 104
70867: END
// every 0 0$1 trigger StreamModeActive and sFog do
70868: LD_EXP 46
70872: PUSH
70873: LD_EXP 67
70877: AND
70878: IFFALSE 70892
70880: GO 70882
70882: DISABLE
// FogOff ( your_side ) ;
70883: LD_OWVAR 2
70887: PPUSH
70888: CALL_OW 344
70892: END
// every 0 0$1 trigger StreamModeActive and sSun do
70893: LD_EXP 46
70897: PUSH
70898: LD_EXP 69
70902: AND
70903: IFFALSE 70931
70905: GO 70907
70907: DISABLE
// begin solar_recharge_percent := 0 ;
70908: LD_ADDR_OWVAR 79
70912: PUSH
70913: LD_INT 0
70915: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70916: LD_INT 10500
70918: PPUSH
70919: CALL_OW 67
// solar_recharge_percent := 100 ;
70923: LD_ADDR_OWVAR 79
70927: PUSH
70928: LD_INT 100
70930: ST_TO_ADDR
// end ;
70931: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70932: LD_EXP 46
70936: PUSH
70937: LD_EXP 70
70941: AND
70942: IFFALSE 71181
70944: GO 70946
70946: DISABLE
70947: LD_INT 0
70949: PPUSH
70950: PPUSH
70951: PPUSH
// begin tmp := [ ] ;
70952: LD_ADDR_VAR 0 3
70956: PUSH
70957: EMPTY
70958: ST_TO_ADDR
// for i := 1 to 6 do
70959: LD_ADDR_VAR 0 1
70963: PUSH
70964: DOUBLE
70965: LD_INT 1
70967: DEC
70968: ST_TO_ADDR
70969: LD_INT 6
70971: PUSH
70972: FOR_TO
70973: IFFALSE 71078
// begin uc_nation := nation_nature ;
70975: LD_ADDR_OWVAR 21
70979: PUSH
70980: LD_INT 0
70982: ST_TO_ADDR
// uc_side := 0 ;
70983: LD_ADDR_OWVAR 20
70987: PUSH
70988: LD_INT 0
70990: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70991: LD_ADDR_OWVAR 29
70995: PUSH
70996: LD_INT 12
70998: PUSH
70999: LD_INT 12
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: ST_TO_ADDR
// hc_agressivity := 20 ;
71006: LD_ADDR_OWVAR 35
71010: PUSH
71011: LD_INT 20
71013: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
71014: LD_ADDR_OWVAR 28
71018: PUSH
71019: LD_INT 17
71021: ST_TO_ADDR
// hc_gallery :=  ;
71022: LD_ADDR_OWVAR 33
71026: PUSH
71027: LD_STRING 
71029: ST_TO_ADDR
// hc_name :=  ;
71030: LD_ADDR_OWVAR 26
71034: PUSH
71035: LD_STRING 
71037: ST_TO_ADDR
// un := CreateHuman ;
71038: LD_ADDR_VAR 0 2
71042: PUSH
71043: CALL_OW 44
71047: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
71048: LD_VAR 0 2
71052: PPUSH
71053: LD_INT 1
71055: PPUSH
71056: CALL_OW 51
// tmp := tmp ^ un ;
71060: LD_ADDR_VAR 0 3
71064: PUSH
71065: LD_VAR 0 3
71069: PUSH
71070: LD_VAR 0 2
71074: ADD
71075: ST_TO_ADDR
// end ;
71076: GO 70972
71078: POP
71079: POP
// repeat wait ( 0 0$1 ) ;
71080: LD_INT 35
71082: PPUSH
71083: CALL_OW 67
// for un in tmp do
71087: LD_ADDR_VAR 0 2
71091: PUSH
71092: LD_VAR 0 3
71096: PUSH
71097: FOR_IN
71098: IFFALSE 71172
// begin if IsDead ( un ) then
71100: LD_VAR 0 2
71104: PPUSH
71105: CALL_OW 301
71109: IFFALSE 71129
// begin tmp := tmp diff un ;
71111: LD_ADDR_VAR 0 3
71115: PUSH
71116: LD_VAR 0 3
71120: PUSH
71121: LD_VAR 0 2
71125: DIFF
71126: ST_TO_ADDR
// continue ;
71127: GO 71097
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
71129: LD_VAR 0 2
71133: PPUSH
71134: LD_INT 3
71136: PUSH
71137: LD_INT 22
71139: PUSH
71140: LD_INT 0
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PPUSH
71151: CALL_OW 69
71155: PPUSH
71156: LD_VAR 0 2
71160: PPUSH
71161: CALL_OW 74
71165: PPUSH
71166: CALL_OW 115
// end ;
71170: GO 71097
71172: POP
71173: POP
// until not tmp ;
71174: LD_VAR 0 3
71178: NOT
71179: IFFALSE 71080
// end ;
71181: PPOPN 3
71183: END
// every 0 0$1 trigger StreamModeActive and sTroll do
71184: LD_EXP 46
71188: PUSH
71189: LD_EXP 71
71193: AND
71194: IFFALSE 71248
71196: GO 71198
71198: DISABLE
// begin ToLua ( displayTroll(); ) ;
71199: LD_STRING displayTroll();
71201: PPUSH
71202: CALL_OW 559
// wait ( 3 3$00 ) ;
71206: LD_INT 6300
71208: PPUSH
71209: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71213: LD_STRING hideTroll();
71215: PPUSH
71216: CALL_OW 559
// wait ( 1 1$00 ) ;
71220: LD_INT 2100
71222: PPUSH
71223: CALL_OW 67
// ToLua ( displayTroll(); ) ;
71227: LD_STRING displayTroll();
71229: PPUSH
71230: CALL_OW 559
// wait ( 1 1$00 ) ;
71234: LD_INT 2100
71236: PPUSH
71237: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71241: LD_STRING hideTroll();
71243: PPUSH
71244: CALL_OW 559
// end ;
71248: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
71249: LD_EXP 46
71253: PUSH
71254: LD_EXP 72
71258: AND
71259: IFFALSE 71322
71261: GO 71263
71263: DISABLE
71264: LD_INT 0
71266: PPUSH
// begin p := 0 ;
71267: LD_ADDR_VAR 0 1
71271: PUSH
71272: LD_INT 0
71274: ST_TO_ADDR
// repeat game_speed := 1 ;
71275: LD_ADDR_OWVAR 65
71279: PUSH
71280: LD_INT 1
71282: ST_TO_ADDR
// wait ( 0 0$1 ) ;
71283: LD_INT 35
71285: PPUSH
71286: CALL_OW 67
// p := p + 1 ;
71290: LD_ADDR_VAR 0 1
71294: PUSH
71295: LD_VAR 0 1
71299: PUSH
71300: LD_INT 1
71302: PLUS
71303: ST_TO_ADDR
// until p >= 60 ;
71304: LD_VAR 0 1
71308: PUSH
71309: LD_INT 60
71311: GREATEREQUAL
71312: IFFALSE 71275
// game_speed := 4 ;
71314: LD_ADDR_OWVAR 65
71318: PUSH
71319: LD_INT 4
71321: ST_TO_ADDR
// end ;
71322: PPOPN 1
71324: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
71325: LD_EXP 46
71329: PUSH
71330: LD_EXP 73
71334: AND
71335: IFFALSE 71481
71337: GO 71339
71339: DISABLE
71340: LD_INT 0
71342: PPUSH
71343: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71344: LD_ADDR_VAR 0 1
71348: PUSH
71349: LD_INT 22
71351: PUSH
71352: LD_OWVAR 2
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 2
71363: PUSH
71364: LD_INT 30
71366: PUSH
71367: LD_INT 0
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 30
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: LIST
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PPUSH
71393: CALL_OW 69
71397: ST_TO_ADDR
// if not depot then
71398: LD_VAR 0 1
71402: NOT
71403: IFFALSE 71407
// exit ;
71405: GO 71481
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
71407: LD_ADDR_VAR 0 2
71411: PUSH
71412: LD_VAR 0 1
71416: PUSH
71417: LD_INT 1
71419: PPUSH
71420: LD_VAR 0 1
71424: PPUSH
71425: CALL_OW 12
71429: ARRAY
71430: PPUSH
71431: CALL_OW 274
71435: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71436: LD_VAR 0 2
71440: PPUSH
71441: LD_INT 1
71443: PPUSH
71444: LD_INT 0
71446: PPUSH
71447: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71451: LD_VAR 0 2
71455: PPUSH
71456: LD_INT 2
71458: PPUSH
71459: LD_INT 0
71461: PPUSH
71462: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71466: LD_VAR 0 2
71470: PPUSH
71471: LD_INT 3
71473: PPUSH
71474: LD_INT 0
71476: PPUSH
71477: CALL_OW 277
// end ;
71481: PPOPN 2
71483: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71484: LD_EXP 46
71488: PUSH
71489: LD_EXP 74
71493: AND
71494: IFFALSE 71591
71496: GO 71498
71498: DISABLE
71499: LD_INT 0
71501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71502: LD_ADDR_VAR 0 1
71506: PUSH
71507: LD_INT 22
71509: PUSH
71510: LD_OWVAR 2
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 21
71521: PUSH
71522: LD_INT 1
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 3
71531: PUSH
71532: LD_INT 23
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: LIST
71550: PPUSH
71551: CALL_OW 69
71555: ST_TO_ADDR
// if not tmp then
71556: LD_VAR 0 1
71560: NOT
71561: IFFALSE 71565
// exit ;
71563: GO 71591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71565: LD_VAR 0 1
71569: PUSH
71570: LD_INT 1
71572: PPUSH
71573: LD_VAR 0 1
71577: PPUSH
71578: CALL_OW 12
71582: ARRAY
71583: PPUSH
71584: LD_INT 200
71586: PPUSH
71587: CALL_OW 234
// end ;
71591: PPOPN 1
71593: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71594: LD_EXP 46
71598: PUSH
71599: LD_EXP 75
71603: AND
71604: IFFALSE 71683
71606: GO 71608
71608: DISABLE
71609: LD_INT 0
71611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71612: LD_ADDR_VAR 0 1
71616: PUSH
71617: LD_INT 22
71619: PUSH
71620: LD_OWVAR 2
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 21
71631: PUSH
71632: LD_INT 2
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PPUSH
71643: CALL_OW 69
71647: ST_TO_ADDR
// if not tmp then
71648: LD_VAR 0 1
71652: NOT
71653: IFFALSE 71657
// exit ;
71655: GO 71683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71657: LD_VAR 0 1
71661: PUSH
71662: LD_INT 1
71664: PPUSH
71665: LD_VAR 0 1
71669: PPUSH
71670: CALL_OW 12
71674: ARRAY
71675: PPUSH
71676: LD_INT 60
71678: PPUSH
71679: CALL_OW 234
// end ;
71683: PPOPN 1
71685: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71686: LD_EXP 46
71690: PUSH
71691: LD_EXP 76
71695: AND
71696: IFFALSE 71795
71698: GO 71700
71700: DISABLE
71701: LD_INT 0
71703: PPUSH
71704: PPUSH
// begin enable ;
71705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71706: LD_ADDR_VAR 0 1
71710: PUSH
71711: LD_INT 22
71713: PUSH
71714: LD_OWVAR 2
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 61
71725: PUSH
71726: EMPTY
71727: LIST
71728: PUSH
71729: LD_INT 33
71731: PUSH
71732: LD_INT 2
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: LIST
71743: PPUSH
71744: CALL_OW 69
71748: ST_TO_ADDR
// if not tmp then
71749: LD_VAR 0 1
71753: NOT
71754: IFFALSE 71758
// exit ;
71756: GO 71795
// for i in tmp do
71758: LD_ADDR_VAR 0 2
71762: PUSH
71763: LD_VAR 0 1
71767: PUSH
71768: FOR_IN
71769: IFFALSE 71793
// if IsControledBy ( i ) then
71771: LD_VAR 0 2
71775: PPUSH
71776: CALL_OW 312
71780: IFFALSE 71791
// ComUnlink ( i ) ;
71782: LD_VAR 0 2
71786: PPUSH
71787: CALL_OW 136
71791: GO 71768
71793: POP
71794: POP
// end ;
71795: PPOPN 2
71797: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71798: LD_EXP 46
71802: PUSH
71803: LD_EXP 77
71807: AND
71808: IFFALSE 71948
71810: GO 71812
71812: DISABLE
71813: LD_INT 0
71815: PPUSH
71816: PPUSH
// begin ToLua ( displayPowell(); ) ;
71817: LD_STRING displayPowell();
71819: PPUSH
71820: CALL_OW 559
// uc_side := 0 ;
71824: LD_ADDR_OWVAR 20
71828: PUSH
71829: LD_INT 0
71831: ST_TO_ADDR
// uc_nation := 2 ;
71832: LD_ADDR_OWVAR 21
71836: PUSH
71837: LD_INT 2
71839: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71840: LD_ADDR_OWVAR 37
71844: PUSH
71845: LD_INT 14
71847: ST_TO_ADDR
// vc_engine := engine_siberite ;
71848: LD_ADDR_OWVAR 39
71852: PUSH
71853: LD_INT 3
71855: ST_TO_ADDR
// vc_control := control_apeman ;
71856: LD_ADDR_OWVAR 38
71860: PUSH
71861: LD_INT 5
71863: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71864: LD_ADDR_OWVAR 40
71868: PUSH
71869: LD_INT 29
71871: ST_TO_ADDR
// un := CreateVehicle ;
71872: LD_ADDR_VAR 0 2
71876: PUSH
71877: CALL_OW 45
71881: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71882: LD_VAR 0 2
71886: PPUSH
71887: LD_INT 1
71889: PPUSH
71890: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71894: LD_INT 35
71896: PPUSH
71897: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71901: LD_VAR 0 2
71905: PPUSH
71906: LD_INT 22
71908: PUSH
71909: LD_OWVAR 2
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PPUSH
71918: CALL_OW 69
71922: PPUSH
71923: LD_VAR 0 2
71927: PPUSH
71928: CALL_OW 74
71932: PPUSH
71933: CALL_OW 115
// until IsDead ( un ) ;
71937: LD_VAR 0 2
71941: PPUSH
71942: CALL_OW 301
71946: IFFALSE 71894
// end ;
71948: PPOPN 2
71950: END
// every 0 0$1 trigger StreamModeActive and sStu do
71951: LD_EXP 46
71955: PUSH
71956: LD_EXP 85
71960: AND
71961: IFFALSE 71977
71963: GO 71965
71965: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71966: LD_STRING displayStucuk();
71968: PPUSH
71969: CALL_OW 559
// ResetFog ;
71973: CALL_OW 335
// end ;
71977: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71978: LD_EXP 46
71982: PUSH
71983: LD_EXP 78
71987: AND
71988: IFFALSE 72129
71990: GO 71992
71992: DISABLE
71993: LD_INT 0
71995: PPUSH
71996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71997: LD_ADDR_VAR 0 2
72001: PUSH
72002: LD_INT 22
72004: PUSH
72005: LD_OWVAR 2
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 21
72016: PUSH
72017: LD_INT 1
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PPUSH
72028: CALL_OW 69
72032: ST_TO_ADDR
// if not tmp then
72033: LD_VAR 0 2
72037: NOT
72038: IFFALSE 72042
// exit ;
72040: GO 72129
// un := tmp [ rand ( 1 , tmp ) ] ;
72042: LD_ADDR_VAR 0 1
72046: PUSH
72047: LD_VAR 0 2
72051: PUSH
72052: LD_INT 1
72054: PPUSH
72055: LD_VAR 0 2
72059: PPUSH
72060: CALL_OW 12
72064: ARRAY
72065: ST_TO_ADDR
// SetSide ( un , 0 ) ;
72066: LD_VAR 0 1
72070: PPUSH
72071: LD_INT 0
72073: PPUSH
72074: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72078: LD_VAR 0 1
72082: PPUSH
72083: LD_OWVAR 3
72087: PUSH
72088: LD_VAR 0 1
72092: DIFF
72093: PPUSH
72094: LD_VAR 0 1
72098: PPUSH
72099: CALL_OW 74
72103: PPUSH
72104: CALL_OW 115
// wait ( 0 0$20 ) ;
72108: LD_INT 700
72110: PPUSH
72111: CALL_OW 67
// SetSide ( un , your_side ) ;
72115: LD_VAR 0 1
72119: PPUSH
72120: LD_OWVAR 2
72124: PPUSH
72125: CALL_OW 235
// end ;
72129: PPOPN 2
72131: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
72132: LD_EXP 46
72136: PUSH
72137: LD_EXP 79
72141: AND
72142: IFFALSE 72248
72144: GO 72146
72146: DISABLE
72147: LD_INT 0
72149: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72150: LD_ADDR_VAR 0 1
72154: PUSH
72155: LD_INT 22
72157: PUSH
72158: LD_OWVAR 2
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 2
72169: PUSH
72170: LD_INT 30
72172: PUSH
72173: LD_INT 0
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 30
72182: PUSH
72183: LD_INT 1
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: LIST
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PPUSH
72199: CALL_OW 69
72203: ST_TO_ADDR
// if not depot then
72204: LD_VAR 0 1
72208: NOT
72209: IFFALSE 72213
// exit ;
72211: GO 72248
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
72213: LD_VAR 0 1
72217: PUSH
72218: LD_INT 1
72220: ARRAY
72221: PPUSH
72222: CALL_OW 250
72226: PPUSH
72227: LD_VAR 0 1
72231: PUSH
72232: LD_INT 1
72234: ARRAY
72235: PPUSH
72236: CALL_OW 251
72240: PPUSH
72241: LD_INT 70
72243: PPUSH
72244: CALL_OW 495
// end ;
72248: PPOPN 1
72250: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
72251: LD_EXP 46
72255: PUSH
72256: LD_EXP 80
72260: AND
72261: IFFALSE 72472
72263: GO 72265
72265: DISABLE
72266: LD_INT 0
72268: PPUSH
72269: PPUSH
72270: PPUSH
72271: PPUSH
72272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72273: LD_ADDR_VAR 0 5
72277: PUSH
72278: LD_INT 22
72280: PUSH
72281: LD_OWVAR 2
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 21
72292: PUSH
72293: LD_INT 1
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: PPUSH
72304: CALL_OW 69
72308: ST_TO_ADDR
// if not tmp then
72309: LD_VAR 0 5
72313: NOT
72314: IFFALSE 72318
// exit ;
72316: GO 72472
// for i in tmp do
72318: LD_ADDR_VAR 0 1
72322: PUSH
72323: LD_VAR 0 5
72327: PUSH
72328: FOR_IN
72329: IFFALSE 72470
// begin d := rand ( 0 , 5 ) ;
72331: LD_ADDR_VAR 0 4
72335: PUSH
72336: LD_INT 0
72338: PPUSH
72339: LD_INT 5
72341: PPUSH
72342: CALL_OW 12
72346: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
72347: LD_ADDR_VAR 0 2
72351: PUSH
72352: LD_VAR 0 1
72356: PPUSH
72357: CALL_OW 250
72361: PPUSH
72362: LD_VAR 0 4
72366: PPUSH
72367: LD_INT 3
72369: PPUSH
72370: LD_INT 12
72372: PPUSH
72373: CALL_OW 12
72377: PPUSH
72378: CALL_OW 272
72382: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
72383: LD_ADDR_VAR 0 3
72387: PUSH
72388: LD_VAR 0 1
72392: PPUSH
72393: CALL_OW 251
72397: PPUSH
72398: LD_VAR 0 4
72402: PPUSH
72403: LD_INT 3
72405: PPUSH
72406: LD_INT 12
72408: PPUSH
72409: CALL_OW 12
72413: PPUSH
72414: CALL_OW 273
72418: ST_TO_ADDR
// if ValidHex ( x , y ) then
72419: LD_VAR 0 2
72423: PPUSH
72424: LD_VAR 0 3
72428: PPUSH
72429: CALL_OW 488
72433: IFFALSE 72468
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72435: LD_VAR 0 1
72439: PPUSH
72440: LD_VAR 0 2
72444: PPUSH
72445: LD_VAR 0 3
72449: PPUSH
72450: LD_INT 3
72452: PPUSH
72453: LD_INT 6
72455: PPUSH
72456: CALL_OW 12
72460: PPUSH
72461: LD_INT 1
72463: PPUSH
72464: CALL_OW 483
// end ;
72468: GO 72328
72470: POP
72471: POP
// end ;
72472: PPOPN 5
72474: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72475: LD_EXP 46
72479: PUSH
72480: LD_EXP 81
72484: AND
72485: IFFALSE 72579
72487: GO 72489
72489: DISABLE
72490: LD_INT 0
72492: PPUSH
72493: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72494: LD_ADDR_VAR 0 2
72498: PUSH
72499: LD_INT 22
72501: PUSH
72502: LD_OWVAR 2
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 32
72513: PUSH
72514: LD_INT 1
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 21
72523: PUSH
72524: LD_INT 2
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: LIST
72535: PPUSH
72536: CALL_OW 69
72540: ST_TO_ADDR
// if not tmp then
72541: LD_VAR 0 2
72545: NOT
72546: IFFALSE 72550
// exit ;
72548: GO 72579
// for i in tmp do
72550: LD_ADDR_VAR 0 1
72554: PUSH
72555: LD_VAR 0 2
72559: PUSH
72560: FOR_IN
72561: IFFALSE 72577
// SetFuel ( i , 0 ) ;
72563: LD_VAR 0 1
72567: PPUSH
72568: LD_INT 0
72570: PPUSH
72571: CALL_OW 240
72575: GO 72560
72577: POP
72578: POP
// end ;
72579: PPOPN 2
72581: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72582: LD_EXP 46
72586: PUSH
72587: LD_EXP 82
72591: AND
72592: IFFALSE 72658
72594: GO 72596
72596: DISABLE
72597: LD_INT 0
72599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72600: LD_ADDR_VAR 0 1
72604: PUSH
72605: LD_INT 22
72607: PUSH
72608: LD_OWVAR 2
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 30
72619: PUSH
72620: LD_INT 29
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: EMPTY
72628: LIST
72629: LIST
72630: PPUSH
72631: CALL_OW 69
72635: ST_TO_ADDR
// if not tmp then
72636: LD_VAR 0 1
72640: NOT
72641: IFFALSE 72645
// exit ;
72643: GO 72658
// DestroyUnit ( tmp [ 1 ] ) ;
72645: LD_VAR 0 1
72649: PUSH
72650: LD_INT 1
72652: ARRAY
72653: PPUSH
72654: CALL_OW 65
// end ;
72658: PPOPN 1
72660: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72661: LD_EXP 46
72665: PUSH
72666: LD_EXP 84
72670: AND
72671: IFFALSE 72800
72673: GO 72675
72675: DISABLE
72676: LD_INT 0
72678: PPUSH
// begin uc_side := 0 ;
72679: LD_ADDR_OWVAR 20
72683: PUSH
72684: LD_INT 0
72686: ST_TO_ADDR
// uc_nation := nation_arabian ;
72687: LD_ADDR_OWVAR 21
72691: PUSH
72692: LD_INT 2
72694: ST_TO_ADDR
// hc_gallery :=  ;
72695: LD_ADDR_OWVAR 33
72699: PUSH
72700: LD_STRING 
72702: ST_TO_ADDR
// hc_name :=  ;
72703: LD_ADDR_OWVAR 26
72707: PUSH
72708: LD_STRING 
72710: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72711: LD_INT 1
72713: PPUSH
72714: LD_INT 11
72716: PPUSH
72717: LD_INT 10
72719: PPUSH
72720: CALL_OW 380
// un := CreateHuman ;
72724: LD_ADDR_VAR 0 1
72728: PUSH
72729: CALL_OW 44
72733: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72734: LD_VAR 0 1
72738: PPUSH
72739: LD_INT 1
72741: PPUSH
72742: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72746: LD_INT 35
72748: PPUSH
72749: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72753: LD_VAR 0 1
72757: PPUSH
72758: LD_INT 22
72760: PUSH
72761: LD_OWVAR 2
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PPUSH
72770: CALL_OW 69
72774: PPUSH
72775: LD_VAR 0 1
72779: PPUSH
72780: CALL_OW 74
72784: PPUSH
72785: CALL_OW 115
// until IsDead ( un ) ;
72789: LD_VAR 0 1
72793: PPUSH
72794: CALL_OW 301
72798: IFFALSE 72746
// end ;
72800: PPOPN 1
72802: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72803: LD_EXP 46
72807: PUSH
72808: LD_EXP 86
72812: AND
72813: IFFALSE 72825
72815: GO 72817
72817: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72818: LD_STRING earthquake(getX(game), 0, 32)
72820: PPUSH
72821: CALL_OW 559
72825: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72826: LD_EXP 46
72830: PUSH
72831: LD_EXP 87
72835: AND
72836: IFFALSE 72927
72838: GO 72840
72840: DISABLE
72841: LD_INT 0
72843: PPUSH
// begin enable ;
72844: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72845: LD_ADDR_VAR 0 1
72849: PUSH
72850: LD_INT 22
72852: PUSH
72853: LD_OWVAR 2
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 21
72864: PUSH
72865: LD_INT 2
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 33
72874: PUSH
72875: LD_INT 3
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: LIST
72886: PPUSH
72887: CALL_OW 69
72891: ST_TO_ADDR
// if not tmp then
72892: LD_VAR 0 1
72896: NOT
72897: IFFALSE 72901
// exit ;
72899: GO 72927
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72901: LD_VAR 0 1
72905: PUSH
72906: LD_INT 1
72908: PPUSH
72909: LD_VAR 0 1
72913: PPUSH
72914: CALL_OW 12
72918: ARRAY
72919: PPUSH
72920: LD_INT 1
72922: PPUSH
72923: CALL_OW 234
// end ;
72927: PPOPN 1
72929: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72930: LD_EXP 46
72934: PUSH
72935: LD_EXP 88
72939: AND
72940: IFFALSE 73081
72942: GO 72944
72944: DISABLE
72945: LD_INT 0
72947: PPUSH
72948: PPUSH
72949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72950: LD_ADDR_VAR 0 3
72954: PUSH
72955: LD_INT 22
72957: PUSH
72958: LD_OWVAR 2
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 25
72969: PUSH
72970: LD_INT 1
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PPUSH
72981: CALL_OW 69
72985: ST_TO_ADDR
// if not tmp then
72986: LD_VAR 0 3
72990: NOT
72991: IFFALSE 72995
// exit ;
72993: GO 73081
// un := tmp [ rand ( 1 , tmp ) ] ;
72995: LD_ADDR_VAR 0 2
72999: PUSH
73000: LD_VAR 0 3
73004: PUSH
73005: LD_INT 1
73007: PPUSH
73008: LD_VAR 0 3
73012: PPUSH
73013: CALL_OW 12
73017: ARRAY
73018: ST_TO_ADDR
// if Crawls ( un ) then
73019: LD_VAR 0 2
73023: PPUSH
73024: CALL_OW 318
73028: IFFALSE 73039
// ComWalk ( un ) ;
73030: LD_VAR 0 2
73034: PPUSH
73035: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
73039: LD_VAR 0 2
73043: PPUSH
73044: LD_INT 9
73046: PPUSH
73047: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
73051: LD_INT 28
73053: PPUSH
73054: LD_OWVAR 2
73058: PPUSH
73059: LD_INT 2
73061: PPUSH
73062: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
73066: LD_INT 29
73068: PPUSH
73069: LD_OWVAR 2
73073: PPUSH
73074: LD_INT 2
73076: PPUSH
73077: CALL_OW 322
// end ;
73081: PPOPN 3
73083: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73084: LD_EXP 46
73088: PUSH
73089: LD_EXP 89
73093: AND
73094: IFFALSE 73205
73096: GO 73098
73098: DISABLE
73099: LD_INT 0
73101: PPUSH
73102: PPUSH
73103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73104: LD_ADDR_VAR 0 3
73108: PUSH
73109: LD_INT 22
73111: PUSH
73112: LD_OWVAR 2
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 25
73123: PUSH
73124: LD_INT 1
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PPUSH
73135: CALL_OW 69
73139: ST_TO_ADDR
// if not tmp then
73140: LD_VAR 0 3
73144: NOT
73145: IFFALSE 73149
// exit ;
73147: GO 73205
// un := tmp [ rand ( 1 , tmp ) ] ;
73149: LD_ADDR_VAR 0 2
73153: PUSH
73154: LD_VAR 0 3
73158: PUSH
73159: LD_INT 1
73161: PPUSH
73162: LD_VAR 0 3
73166: PPUSH
73167: CALL_OW 12
73171: ARRAY
73172: ST_TO_ADDR
// if Crawls ( un ) then
73173: LD_VAR 0 2
73177: PPUSH
73178: CALL_OW 318
73182: IFFALSE 73193
// ComWalk ( un ) ;
73184: LD_VAR 0 2
73188: PPUSH
73189: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73193: LD_VAR 0 2
73197: PPUSH
73198: LD_INT 8
73200: PPUSH
73201: CALL_OW 336
// end ;
73205: PPOPN 3
73207: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
73208: LD_EXP 46
73212: PUSH
73213: LD_EXP 90
73217: AND
73218: IFFALSE 73362
73220: GO 73222
73222: DISABLE
73223: LD_INT 0
73225: PPUSH
73226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
73227: LD_ADDR_VAR 0 2
73231: PUSH
73232: LD_INT 22
73234: PUSH
73235: LD_OWVAR 2
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 21
73246: PUSH
73247: LD_INT 2
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: PUSH
73254: LD_INT 2
73256: PUSH
73257: LD_INT 34
73259: PUSH
73260: LD_INT 12
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: LD_INT 34
73269: PUSH
73270: LD_INT 51
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 34
73279: PUSH
73280: LD_INT 32
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: LIST
73297: PPUSH
73298: CALL_OW 69
73302: ST_TO_ADDR
// if not tmp then
73303: LD_VAR 0 2
73307: NOT
73308: IFFALSE 73312
// exit ;
73310: GO 73362
// for i in tmp do
73312: LD_ADDR_VAR 0 1
73316: PUSH
73317: LD_VAR 0 2
73321: PUSH
73322: FOR_IN
73323: IFFALSE 73360
// if GetCargo ( i , mat_artifact ) = 0 then
73325: LD_VAR 0 1
73329: PPUSH
73330: LD_INT 4
73332: PPUSH
73333: CALL_OW 289
73337: PUSH
73338: LD_INT 0
73340: EQUAL
73341: IFFALSE 73358
// SetCargo ( i , mat_siberit , 100 ) ;
73343: LD_VAR 0 1
73347: PPUSH
73348: LD_INT 3
73350: PPUSH
73351: LD_INT 100
73353: PPUSH
73354: CALL_OW 290
73358: GO 73322
73360: POP
73361: POP
// end ;
73362: PPOPN 2
73364: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
73365: LD_EXP 46
73369: PUSH
73370: LD_EXP 91
73374: AND
73375: IFFALSE 73558
73377: GO 73379
73379: DISABLE
73380: LD_INT 0
73382: PPUSH
73383: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73384: LD_ADDR_VAR 0 2
73388: PUSH
73389: LD_INT 22
73391: PUSH
73392: LD_OWVAR 2
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PPUSH
73401: CALL_OW 69
73405: ST_TO_ADDR
// if not tmp then
73406: LD_VAR 0 2
73410: NOT
73411: IFFALSE 73415
// exit ;
73413: GO 73558
// for i := 1 to 2 do
73415: LD_ADDR_VAR 0 1
73419: PUSH
73420: DOUBLE
73421: LD_INT 1
73423: DEC
73424: ST_TO_ADDR
73425: LD_INT 2
73427: PUSH
73428: FOR_TO
73429: IFFALSE 73556
// begin uc_side := your_side ;
73431: LD_ADDR_OWVAR 20
73435: PUSH
73436: LD_OWVAR 2
73440: ST_TO_ADDR
// uc_nation := nation_american ;
73441: LD_ADDR_OWVAR 21
73445: PUSH
73446: LD_INT 1
73448: ST_TO_ADDR
// vc_chassis := us_morphling ;
73449: LD_ADDR_OWVAR 37
73453: PUSH
73454: LD_INT 5
73456: ST_TO_ADDR
// vc_engine := engine_siberite ;
73457: LD_ADDR_OWVAR 39
73461: PUSH
73462: LD_INT 3
73464: ST_TO_ADDR
// vc_control := control_computer ;
73465: LD_ADDR_OWVAR 38
73469: PUSH
73470: LD_INT 3
73472: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73473: LD_ADDR_OWVAR 40
73477: PUSH
73478: LD_INT 10
73480: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73481: LD_VAR 0 2
73485: PUSH
73486: LD_INT 1
73488: ARRAY
73489: PPUSH
73490: CALL_OW 310
73494: NOT
73495: IFFALSE 73542
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73497: CALL_OW 45
73501: PPUSH
73502: LD_VAR 0 2
73506: PUSH
73507: LD_INT 1
73509: ARRAY
73510: PPUSH
73511: CALL_OW 250
73515: PPUSH
73516: LD_VAR 0 2
73520: PUSH
73521: LD_INT 1
73523: ARRAY
73524: PPUSH
73525: CALL_OW 251
73529: PPUSH
73530: LD_INT 12
73532: PPUSH
73533: LD_INT 1
73535: PPUSH
73536: CALL_OW 50
73540: GO 73554
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73542: CALL_OW 45
73546: PPUSH
73547: LD_INT 1
73549: PPUSH
73550: CALL_OW 51
// end ;
73554: GO 73428
73556: POP
73557: POP
// end ;
73558: PPOPN 2
73560: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73561: LD_EXP 46
73565: PUSH
73566: LD_EXP 92
73570: AND
73571: IFFALSE 73793
73573: GO 73575
73575: DISABLE
73576: LD_INT 0
73578: PPUSH
73579: PPUSH
73580: PPUSH
73581: PPUSH
73582: PPUSH
73583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73584: LD_ADDR_VAR 0 6
73588: PUSH
73589: LD_INT 22
73591: PUSH
73592: LD_OWVAR 2
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: PUSH
73601: LD_INT 21
73603: PUSH
73604: LD_INT 1
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: PUSH
73611: LD_INT 3
73613: PUSH
73614: LD_INT 23
73616: PUSH
73617: LD_INT 0
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: LIST
73632: PPUSH
73633: CALL_OW 69
73637: ST_TO_ADDR
// if not tmp then
73638: LD_VAR 0 6
73642: NOT
73643: IFFALSE 73647
// exit ;
73645: GO 73793
// s1 := rand ( 1 , 4 ) ;
73647: LD_ADDR_VAR 0 2
73651: PUSH
73652: LD_INT 1
73654: PPUSH
73655: LD_INT 4
73657: PPUSH
73658: CALL_OW 12
73662: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73663: LD_ADDR_VAR 0 4
73667: PUSH
73668: LD_VAR 0 6
73672: PUSH
73673: LD_INT 1
73675: ARRAY
73676: PPUSH
73677: LD_VAR 0 2
73681: PPUSH
73682: CALL_OW 259
73686: ST_TO_ADDR
// if s1 = 1 then
73687: LD_VAR 0 2
73691: PUSH
73692: LD_INT 1
73694: EQUAL
73695: IFFALSE 73715
// s2 := rand ( 2 , 4 ) else
73697: LD_ADDR_VAR 0 3
73701: PUSH
73702: LD_INT 2
73704: PPUSH
73705: LD_INT 4
73707: PPUSH
73708: CALL_OW 12
73712: ST_TO_ADDR
73713: GO 73723
// s2 := 1 ;
73715: LD_ADDR_VAR 0 3
73719: PUSH
73720: LD_INT 1
73722: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73723: LD_ADDR_VAR 0 5
73727: PUSH
73728: LD_VAR 0 6
73732: PUSH
73733: LD_INT 1
73735: ARRAY
73736: PPUSH
73737: LD_VAR 0 3
73741: PPUSH
73742: CALL_OW 259
73746: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73747: LD_VAR 0 6
73751: PUSH
73752: LD_INT 1
73754: ARRAY
73755: PPUSH
73756: LD_VAR 0 2
73760: PPUSH
73761: LD_VAR 0 5
73765: PPUSH
73766: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73770: LD_VAR 0 6
73774: PUSH
73775: LD_INT 1
73777: ARRAY
73778: PPUSH
73779: LD_VAR 0 3
73783: PPUSH
73784: LD_VAR 0 4
73788: PPUSH
73789: CALL_OW 237
// end ;
73793: PPOPN 6
73795: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73796: LD_EXP 46
73800: PUSH
73801: LD_EXP 93
73805: AND
73806: IFFALSE 73885
73808: GO 73810
73810: DISABLE
73811: LD_INT 0
73813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73814: LD_ADDR_VAR 0 1
73818: PUSH
73819: LD_INT 22
73821: PUSH
73822: LD_OWVAR 2
73826: PUSH
73827: EMPTY
73828: LIST
73829: LIST
73830: PUSH
73831: LD_INT 30
73833: PUSH
73834: LD_INT 3
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PPUSH
73845: CALL_OW 69
73849: ST_TO_ADDR
// if not tmp then
73850: LD_VAR 0 1
73854: NOT
73855: IFFALSE 73859
// exit ;
73857: GO 73885
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73859: LD_VAR 0 1
73863: PUSH
73864: LD_INT 1
73866: PPUSH
73867: LD_VAR 0 1
73871: PPUSH
73872: CALL_OW 12
73876: ARRAY
73877: PPUSH
73878: LD_INT 1
73880: PPUSH
73881: CALL_OW 234
// end ;
73885: PPOPN 1
73887: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73888: LD_EXP 46
73892: PUSH
73893: LD_EXP 94
73897: AND
73898: IFFALSE 74010
73900: GO 73902
73902: DISABLE
73903: LD_INT 0
73905: PPUSH
73906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73907: LD_ADDR_VAR 0 2
73911: PUSH
73912: LD_INT 22
73914: PUSH
73915: LD_OWVAR 2
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: PUSH
73924: LD_INT 2
73926: PUSH
73927: LD_INT 30
73929: PUSH
73930: LD_INT 27
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 30
73939: PUSH
73940: LD_INT 26
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: PUSH
73947: LD_INT 30
73949: PUSH
73950: LD_INT 28
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PPUSH
73967: CALL_OW 69
73971: ST_TO_ADDR
// if not tmp then
73972: LD_VAR 0 2
73976: NOT
73977: IFFALSE 73981
// exit ;
73979: GO 74010
// for i in tmp do
73981: LD_ADDR_VAR 0 1
73985: PUSH
73986: LD_VAR 0 2
73990: PUSH
73991: FOR_IN
73992: IFFALSE 74008
// SetLives ( i , 1 ) ;
73994: LD_VAR 0 1
73998: PPUSH
73999: LD_INT 1
74001: PPUSH
74002: CALL_OW 234
74006: GO 73991
74008: POP
74009: POP
// end ;
74010: PPOPN 2
74012: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
74013: LD_EXP 46
74017: PUSH
74018: LD_EXP 95
74022: AND
74023: IFFALSE 74310
74025: GO 74027
74027: DISABLE
74028: LD_INT 0
74030: PPUSH
74031: PPUSH
74032: PPUSH
// begin i := rand ( 1 , 7 ) ;
74033: LD_ADDR_VAR 0 1
74037: PUSH
74038: LD_INT 1
74040: PPUSH
74041: LD_INT 7
74043: PPUSH
74044: CALL_OW 12
74048: ST_TO_ADDR
// case i of 1 :
74049: LD_VAR 0 1
74053: PUSH
74054: LD_INT 1
74056: DOUBLE
74057: EQUAL
74058: IFTRUE 74062
74060: GO 74072
74062: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
74063: LD_STRING earthquake(getX(game), 0, 32)
74065: PPUSH
74066: CALL_OW 559
74070: GO 74310
74072: LD_INT 2
74074: DOUBLE
74075: EQUAL
74076: IFTRUE 74080
74078: GO 74094
74080: POP
// begin ToLua ( displayStucuk(); ) ;
74081: LD_STRING displayStucuk();
74083: PPUSH
74084: CALL_OW 559
// ResetFog ;
74088: CALL_OW 335
// end ; 3 :
74092: GO 74310
74094: LD_INT 3
74096: DOUBLE
74097: EQUAL
74098: IFTRUE 74102
74100: GO 74206
74102: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74103: LD_ADDR_VAR 0 2
74107: PUSH
74108: LD_INT 22
74110: PUSH
74111: LD_OWVAR 2
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: LD_INT 25
74122: PUSH
74123: LD_INT 1
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PPUSH
74134: CALL_OW 69
74138: ST_TO_ADDR
// if not tmp then
74139: LD_VAR 0 2
74143: NOT
74144: IFFALSE 74148
// exit ;
74146: GO 74310
// un := tmp [ rand ( 1 , tmp ) ] ;
74148: LD_ADDR_VAR 0 3
74152: PUSH
74153: LD_VAR 0 2
74157: PUSH
74158: LD_INT 1
74160: PPUSH
74161: LD_VAR 0 2
74165: PPUSH
74166: CALL_OW 12
74170: ARRAY
74171: ST_TO_ADDR
// if Crawls ( un ) then
74172: LD_VAR 0 3
74176: PPUSH
74177: CALL_OW 318
74181: IFFALSE 74192
// ComWalk ( un ) ;
74183: LD_VAR 0 3
74187: PPUSH
74188: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74192: LD_VAR 0 3
74196: PPUSH
74197: LD_INT 8
74199: PPUSH
74200: CALL_OW 336
// end ; 4 :
74204: GO 74310
74206: LD_INT 4
74208: DOUBLE
74209: EQUAL
74210: IFTRUE 74214
74212: GO 74288
74214: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74215: LD_ADDR_VAR 0 2
74219: PUSH
74220: LD_INT 22
74222: PUSH
74223: LD_OWVAR 2
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 30
74234: PUSH
74235: LD_INT 29
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PPUSH
74246: CALL_OW 69
74250: ST_TO_ADDR
// if not tmp then
74251: LD_VAR 0 2
74255: NOT
74256: IFFALSE 74260
// exit ;
74258: GO 74310
// CenterNowOnUnits ( tmp [ 1 ] ) ;
74260: LD_VAR 0 2
74264: PUSH
74265: LD_INT 1
74267: ARRAY
74268: PPUSH
74269: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
74273: LD_VAR 0 2
74277: PUSH
74278: LD_INT 1
74280: ARRAY
74281: PPUSH
74282: CALL_OW 65
// end ; 5 .. 7 :
74286: GO 74310
74288: LD_INT 5
74290: DOUBLE
74291: GREATEREQUAL
74292: IFFALSE 74300
74294: LD_INT 7
74296: DOUBLE
74297: LESSEQUAL
74298: IFTRUE 74302
74300: GO 74309
74302: POP
// StreamSibBomb ; end ;
74303: CALL 70547 0 0
74307: GO 74310
74309: POP
// end ;
74310: PPOPN 3
74312: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
74313: LD_EXP 46
74317: PUSH
74318: LD_EXP 96
74322: AND
74323: IFFALSE 74479
74325: GO 74327
74327: DISABLE
74328: LD_INT 0
74330: PPUSH
74331: PPUSH
74332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
74333: LD_ADDR_VAR 0 2
74337: PUSH
74338: LD_INT 81
74340: PUSH
74341: LD_OWVAR 2
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 2
74352: PUSH
74353: LD_INT 21
74355: PUSH
74356: LD_INT 1
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 21
74365: PUSH
74366: LD_INT 2
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: LIST
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PPUSH
74382: CALL_OW 69
74386: ST_TO_ADDR
// if not tmp then
74387: LD_VAR 0 2
74391: NOT
74392: IFFALSE 74396
// exit ;
74394: GO 74479
// p := 0 ;
74396: LD_ADDR_VAR 0 3
74400: PUSH
74401: LD_INT 0
74403: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74404: LD_INT 35
74406: PPUSH
74407: CALL_OW 67
// p := p + 1 ;
74411: LD_ADDR_VAR 0 3
74415: PUSH
74416: LD_VAR 0 3
74420: PUSH
74421: LD_INT 1
74423: PLUS
74424: ST_TO_ADDR
// for i in tmp do
74425: LD_ADDR_VAR 0 1
74429: PUSH
74430: LD_VAR 0 2
74434: PUSH
74435: FOR_IN
74436: IFFALSE 74467
// if GetLives ( i ) < 1000 then
74438: LD_VAR 0 1
74442: PPUSH
74443: CALL_OW 256
74447: PUSH
74448: LD_INT 1000
74450: LESS
74451: IFFALSE 74465
// SetLives ( i , 1000 ) ;
74453: LD_VAR 0 1
74457: PPUSH
74458: LD_INT 1000
74460: PPUSH
74461: CALL_OW 234
74465: GO 74435
74467: POP
74468: POP
// until p > 20 ;
74469: LD_VAR 0 3
74473: PUSH
74474: LD_INT 20
74476: GREATER
74477: IFFALSE 74404
// end ;
74479: PPOPN 3
74481: END
// every 0 0$1 trigger StreamModeActive and sTime do
74482: LD_EXP 46
74486: PUSH
74487: LD_EXP 97
74491: AND
74492: IFFALSE 74527
74494: GO 74496
74496: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74497: LD_INT 28
74499: PPUSH
74500: LD_OWVAR 2
74504: PPUSH
74505: LD_INT 2
74507: PPUSH
74508: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74512: LD_INT 30
74514: PPUSH
74515: LD_OWVAR 2
74519: PPUSH
74520: LD_INT 2
74522: PPUSH
74523: CALL_OW 322
// end ;
74527: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74528: LD_EXP 46
74532: PUSH
74533: LD_EXP 98
74537: AND
74538: IFFALSE 74659
74540: GO 74542
74542: DISABLE
74543: LD_INT 0
74545: PPUSH
74546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74547: LD_ADDR_VAR 0 2
74551: PUSH
74552: LD_INT 22
74554: PUSH
74555: LD_OWVAR 2
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 21
74566: PUSH
74567: LD_INT 1
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PUSH
74574: LD_INT 3
74576: PUSH
74577: LD_INT 23
74579: PUSH
74580: LD_INT 0
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: LIST
74595: PPUSH
74596: CALL_OW 69
74600: ST_TO_ADDR
// if not tmp then
74601: LD_VAR 0 2
74605: NOT
74606: IFFALSE 74610
// exit ;
74608: GO 74659
// for i in tmp do
74610: LD_ADDR_VAR 0 1
74614: PUSH
74615: LD_VAR 0 2
74619: PUSH
74620: FOR_IN
74621: IFFALSE 74657
// begin if Crawls ( i ) then
74623: LD_VAR 0 1
74627: PPUSH
74628: CALL_OW 318
74632: IFFALSE 74643
// ComWalk ( i ) ;
74634: LD_VAR 0 1
74638: PPUSH
74639: CALL_OW 138
// SetClass ( i , 2 ) ;
74643: LD_VAR 0 1
74647: PPUSH
74648: LD_INT 2
74650: PPUSH
74651: CALL_OW 336
// end ;
74655: GO 74620
74657: POP
74658: POP
// end ;
74659: PPOPN 2
74661: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74662: LD_EXP 46
74666: PUSH
74667: LD_EXP 99
74671: AND
74672: IFFALSE 74960
74674: GO 74676
74676: DISABLE
74677: LD_INT 0
74679: PPUSH
74680: PPUSH
74681: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74682: LD_OWVAR 2
74686: PPUSH
74687: LD_INT 9
74689: PPUSH
74690: LD_INT 1
74692: PPUSH
74693: LD_INT 1
74695: PPUSH
74696: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74700: LD_INT 9
74702: PPUSH
74703: LD_OWVAR 2
74707: PPUSH
74708: CALL_OW 343
// uc_side := 9 ;
74712: LD_ADDR_OWVAR 20
74716: PUSH
74717: LD_INT 9
74719: ST_TO_ADDR
// uc_nation := 2 ;
74720: LD_ADDR_OWVAR 21
74724: PUSH
74725: LD_INT 2
74727: ST_TO_ADDR
// hc_name := Dark Warrior ;
74728: LD_ADDR_OWVAR 26
74732: PUSH
74733: LD_STRING Dark Warrior
74735: ST_TO_ADDR
// hc_gallery :=  ;
74736: LD_ADDR_OWVAR 33
74740: PUSH
74741: LD_STRING 
74743: ST_TO_ADDR
// hc_noskilllimit := true ;
74744: LD_ADDR_OWVAR 76
74748: PUSH
74749: LD_INT 1
74751: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74752: LD_ADDR_OWVAR 31
74756: PUSH
74757: LD_INT 30
74759: PUSH
74760: LD_INT 30
74762: PUSH
74763: LD_INT 30
74765: PUSH
74766: LD_INT 30
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: ST_TO_ADDR
// un := CreateHuman ;
74775: LD_ADDR_VAR 0 3
74779: PUSH
74780: CALL_OW 44
74784: ST_TO_ADDR
// hc_noskilllimit := false ;
74785: LD_ADDR_OWVAR 76
74789: PUSH
74790: LD_INT 0
74792: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74793: LD_VAR 0 3
74797: PPUSH
74798: LD_INT 1
74800: PPUSH
74801: CALL_OW 51
// ToLua ( playRanger() ) ;
74805: LD_STRING playRanger()
74807: PPUSH
74808: CALL_OW 559
// p := 0 ;
74812: LD_ADDR_VAR 0 2
74816: PUSH
74817: LD_INT 0
74819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74820: LD_INT 35
74822: PPUSH
74823: CALL_OW 67
// p := p + 1 ;
74827: LD_ADDR_VAR 0 2
74831: PUSH
74832: LD_VAR 0 2
74836: PUSH
74837: LD_INT 1
74839: PLUS
74840: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74841: LD_VAR 0 3
74845: PPUSH
74846: CALL_OW 256
74850: PUSH
74851: LD_INT 1000
74853: LESS
74854: IFFALSE 74868
// SetLives ( un , 1000 ) ;
74856: LD_VAR 0 3
74860: PPUSH
74861: LD_INT 1000
74863: PPUSH
74864: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74868: LD_VAR 0 3
74872: PPUSH
74873: LD_INT 81
74875: PUSH
74876: LD_OWVAR 2
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: LD_INT 91
74887: PUSH
74888: LD_VAR 0 3
74892: PUSH
74893: LD_INT 30
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: LIST
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PPUSH
74905: CALL_OW 69
74909: PPUSH
74910: LD_VAR 0 3
74914: PPUSH
74915: CALL_OW 74
74919: PPUSH
74920: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
74924: LD_VAR 0 2
74928: PUSH
74929: LD_INT 80
74931: GREATER
74932: PUSH
74933: LD_VAR 0 3
74937: PPUSH
74938: CALL_OW 301
74942: OR
74943: IFFALSE 74820
// if un then
74945: LD_VAR 0 3
74949: IFFALSE 74960
// RemoveUnit ( un ) ;
74951: LD_VAR 0 3
74955: PPUSH
74956: CALL_OW 64
// end ;
74960: PPOPN 3
74962: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
74963: LD_EXP 100
74967: IFFALSE 75083
74969: GO 74971
74971: DISABLE
74972: LD_INT 0
74974: PPUSH
74975: PPUSH
74976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74977: LD_ADDR_VAR 0 2
74981: PUSH
74982: LD_INT 81
74984: PUSH
74985: LD_OWVAR 2
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 21
74996: PUSH
74997: LD_INT 1
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PPUSH
75008: CALL_OW 69
75012: ST_TO_ADDR
// ToLua ( playComputer() ) ;
75013: LD_STRING playComputer()
75015: PPUSH
75016: CALL_OW 559
// if not tmp then
75020: LD_VAR 0 2
75024: NOT
75025: IFFALSE 75029
// exit ;
75027: GO 75083
// for i in tmp do
75029: LD_ADDR_VAR 0 1
75033: PUSH
75034: LD_VAR 0 2
75038: PUSH
75039: FOR_IN
75040: IFFALSE 75081
// for j := 1 to 4 do
75042: LD_ADDR_VAR 0 3
75046: PUSH
75047: DOUBLE
75048: LD_INT 1
75050: DEC
75051: ST_TO_ADDR
75052: LD_INT 4
75054: PUSH
75055: FOR_TO
75056: IFFALSE 75077
// SetSkill ( i , j , 10 ) ;
75058: LD_VAR 0 1
75062: PPUSH
75063: LD_VAR 0 3
75067: PPUSH
75068: LD_INT 10
75070: PPUSH
75071: CALL_OW 237
75075: GO 75055
75077: POP
75078: POP
75079: GO 75039
75081: POP
75082: POP
// end ;
75083: PPOPN 3
75085: END
// every 0 0$1 trigger s30 do var i , tmp ;
75086: LD_EXP 101
75090: IFFALSE 75159
75092: GO 75094
75094: DISABLE
75095: LD_INT 0
75097: PPUSH
75098: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75099: LD_ADDR_VAR 0 2
75103: PUSH
75104: LD_INT 22
75106: PUSH
75107: LD_OWVAR 2
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: PPUSH
75116: CALL_OW 69
75120: ST_TO_ADDR
// if not tmp then
75121: LD_VAR 0 2
75125: NOT
75126: IFFALSE 75130
// exit ;
75128: GO 75159
// for i in tmp do
75130: LD_ADDR_VAR 0 1
75134: PUSH
75135: LD_VAR 0 2
75139: PUSH
75140: FOR_IN
75141: IFFALSE 75157
// SetLives ( i , 300 ) ;
75143: LD_VAR 0 1
75147: PPUSH
75148: LD_INT 300
75150: PPUSH
75151: CALL_OW 234
75155: GO 75140
75157: POP
75158: POP
// end ;
75159: PPOPN 2
75161: END
// every 0 0$1 trigger s60 do var i , tmp ;
75162: LD_EXP 102
75166: IFFALSE 75235
75168: GO 75170
75170: DISABLE
75171: LD_INT 0
75173: PPUSH
75174: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75175: LD_ADDR_VAR 0 2
75179: PUSH
75180: LD_INT 22
75182: PUSH
75183: LD_OWVAR 2
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PPUSH
75192: CALL_OW 69
75196: ST_TO_ADDR
// if not tmp then
75197: LD_VAR 0 2
75201: NOT
75202: IFFALSE 75206
// exit ;
75204: GO 75235
// for i in tmp do
75206: LD_ADDR_VAR 0 1
75210: PUSH
75211: LD_VAR 0 2
75215: PUSH
75216: FOR_IN
75217: IFFALSE 75233
// SetLives ( i , 600 ) ;
75219: LD_VAR 0 1
75223: PPUSH
75224: LD_INT 600
75226: PPUSH
75227: CALL_OW 234
75231: GO 75216
75233: POP
75234: POP
// end ;
75235: PPOPN 2
75237: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
75238: LD_INT 0
75240: PPUSH
// case cmd of 301 :
75241: LD_VAR 0 1
75245: PUSH
75246: LD_INT 301
75248: DOUBLE
75249: EQUAL
75250: IFTRUE 75254
75252: GO 75286
75254: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
75255: LD_VAR 0 6
75259: PPUSH
75260: LD_VAR 0 7
75264: PPUSH
75265: LD_VAR 0 8
75269: PPUSH
75270: LD_VAR 0 4
75274: PPUSH
75275: LD_VAR 0 5
75279: PPUSH
75280: CALL 76495 0 5
75284: GO 75407
75286: LD_INT 302
75288: DOUBLE
75289: EQUAL
75290: IFTRUE 75294
75292: GO 75331
75294: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
75295: LD_VAR 0 6
75299: PPUSH
75300: LD_VAR 0 7
75304: PPUSH
75305: LD_VAR 0 8
75309: PPUSH
75310: LD_VAR 0 9
75314: PPUSH
75315: LD_VAR 0 4
75319: PPUSH
75320: LD_VAR 0 5
75324: PPUSH
75325: CALL 76586 0 6
75329: GO 75407
75331: LD_INT 303
75333: DOUBLE
75334: EQUAL
75335: IFTRUE 75339
75337: GO 75376
75339: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
75340: LD_VAR 0 6
75344: PPUSH
75345: LD_VAR 0 7
75349: PPUSH
75350: LD_VAR 0 8
75354: PPUSH
75355: LD_VAR 0 9
75359: PPUSH
75360: LD_VAR 0 4
75364: PPUSH
75365: LD_VAR 0 5
75369: PPUSH
75370: CALL 75412 0 6
75374: GO 75407
75376: LD_INT 304
75378: DOUBLE
75379: EQUAL
75380: IFTRUE 75384
75382: GO 75406
75384: POP
// hHackTeleport ( unit , x , y ) ; end ;
75385: LD_VAR 0 2
75389: PPUSH
75390: LD_VAR 0 4
75394: PPUSH
75395: LD_VAR 0 5
75399: PPUSH
75400: CALL 77179 0 3
75404: GO 75407
75406: POP
// end ;
75407: LD_VAR 0 12
75411: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
75412: LD_INT 0
75414: PPUSH
75415: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
75416: LD_VAR 0 1
75420: PUSH
75421: LD_INT 1
75423: LESS
75424: PUSH
75425: LD_VAR 0 1
75429: PUSH
75430: LD_INT 3
75432: GREATER
75433: OR
75434: PUSH
75435: LD_VAR 0 5
75439: PPUSH
75440: LD_VAR 0 6
75444: PPUSH
75445: CALL_OW 428
75449: OR
75450: IFFALSE 75454
// exit ;
75452: GO 76182
// uc_side := your_side ;
75454: LD_ADDR_OWVAR 20
75458: PUSH
75459: LD_OWVAR 2
75463: ST_TO_ADDR
// uc_nation := nation ;
75464: LD_ADDR_OWVAR 21
75468: PUSH
75469: LD_VAR 0 1
75473: ST_TO_ADDR
// bc_level = 1 ;
75474: LD_ADDR_OWVAR 43
75478: PUSH
75479: LD_INT 1
75481: ST_TO_ADDR
// case btype of 1 :
75482: LD_VAR 0 2
75486: PUSH
75487: LD_INT 1
75489: DOUBLE
75490: EQUAL
75491: IFTRUE 75495
75493: GO 75506
75495: POP
// bc_type := b_depot ; 2 :
75496: LD_ADDR_OWVAR 42
75500: PUSH
75501: LD_INT 0
75503: ST_TO_ADDR
75504: GO 76126
75506: LD_INT 2
75508: DOUBLE
75509: EQUAL
75510: IFTRUE 75514
75512: GO 75525
75514: POP
// bc_type := b_warehouse ; 3 :
75515: LD_ADDR_OWVAR 42
75519: PUSH
75520: LD_INT 1
75522: ST_TO_ADDR
75523: GO 76126
75525: LD_INT 3
75527: DOUBLE
75528: EQUAL
75529: IFTRUE 75533
75531: GO 75544
75533: POP
// bc_type := b_lab ; 4 .. 9 :
75534: LD_ADDR_OWVAR 42
75538: PUSH
75539: LD_INT 6
75541: ST_TO_ADDR
75542: GO 76126
75544: LD_INT 4
75546: DOUBLE
75547: GREATEREQUAL
75548: IFFALSE 75556
75550: LD_INT 9
75552: DOUBLE
75553: LESSEQUAL
75554: IFTRUE 75558
75556: GO 75618
75558: POP
// begin bc_type := b_lab_half ;
75559: LD_ADDR_OWVAR 42
75563: PUSH
75564: LD_INT 7
75566: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75567: LD_ADDR_OWVAR 44
75571: PUSH
75572: LD_INT 10
75574: PUSH
75575: LD_INT 11
75577: PUSH
75578: LD_INT 12
75580: PUSH
75581: LD_INT 15
75583: PUSH
75584: LD_INT 14
75586: PUSH
75587: LD_INT 13
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: PUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 3
75605: MINUS
75606: ARRAY
75607: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
75608: LD_ADDR_OWVAR 45
75612: PUSH
75613: LD_INT 9
75615: ST_TO_ADDR
// end ; 10 .. 13 :
75616: GO 76126
75618: LD_INT 10
75620: DOUBLE
75621: GREATEREQUAL
75622: IFFALSE 75630
75624: LD_INT 13
75626: DOUBLE
75627: LESSEQUAL
75628: IFTRUE 75632
75630: GO 75709
75632: POP
// begin bc_type := b_lab_full ;
75633: LD_ADDR_OWVAR 42
75637: PUSH
75638: LD_INT 8
75640: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75641: LD_ADDR_OWVAR 44
75645: PUSH
75646: LD_INT 10
75648: PUSH
75649: LD_INT 12
75651: PUSH
75652: LD_INT 14
75654: PUSH
75655: LD_INT 13
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: PUSH
75664: LD_VAR 0 2
75668: PUSH
75669: LD_INT 9
75671: MINUS
75672: ARRAY
75673: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75674: LD_ADDR_OWVAR 45
75678: PUSH
75679: LD_INT 11
75681: PUSH
75682: LD_INT 15
75684: PUSH
75685: LD_INT 12
75687: PUSH
75688: LD_INT 15
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: LIST
75695: LIST
75696: PUSH
75697: LD_VAR 0 2
75701: PUSH
75702: LD_INT 9
75704: MINUS
75705: ARRAY
75706: ST_TO_ADDR
// end ; 14 :
75707: GO 76126
75709: LD_INT 14
75711: DOUBLE
75712: EQUAL
75713: IFTRUE 75717
75715: GO 75728
75717: POP
// bc_type := b_workshop ; 15 :
75718: LD_ADDR_OWVAR 42
75722: PUSH
75723: LD_INT 2
75725: ST_TO_ADDR
75726: GO 76126
75728: LD_INT 15
75730: DOUBLE
75731: EQUAL
75732: IFTRUE 75736
75734: GO 75747
75736: POP
// bc_type := b_factory ; 16 :
75737: LD_ADDR_OWVAR 42
75741: PUSH
75742: LD_INT 3
75744: ST_TO_ADDR
75745: GO 76126
75747: LD_INT 16
75749: DOUBLE
75750: EQUAL
75751: IFTRUE 75755
75753: GO 75766
75755: POP
// bc_type := b_ext_gun ; 17 :
75756: LD_ADDR_OWVAR 42
75760: PUSH
75761: LD_INT 17
75763: ST_TO_ADDR
75764: GO 76126
75766: LD_INT 17
75768: DOUBLE
75769: EQUAL
75770: IFTRUE 75774
75772: GO 75802
75774: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75775: LD_ADDR_OWVAR 42
75779: PUSH
75780: LD_INT 19
75782: PUSH
75783: LD_INT 23
75785: PUSH
75786: LD_INT 19
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: LIST
75793: PUSH
75794: LD_VAR 0 1
75798: ARRAY
75799: ST_TO_ADDR
75800: GO 76126
75802: LD_INT 18
75804: DOUBLE
75805: EQUAL
75806: IFTRUE 75810
75808: GO 75821
75810: POP
// bc_type := b_ext_radar ; 19 :
75811: LD_ADDR_OWVAR 42
75815: PUSH
75816: LD_INT 20
75818: ST_TO_ADDR
75819: GO 76126
75821: LD_INT 19
75823: DOUBLE
75824: EQUAL
75825: IFTRUE 75829
75827: GO 75840
75829: POP
// bc_type := b_ext_radio ; 20 :
75830: LD_ADDR_OWVAR 42
75834: PUSH
75835: LD_INT 22
75837: ST_TO_ADDR
75838: GO 76126
75840: LD_INT 20
75842: DOUBLE
75843: EQUAL
75844: IFTRUE 75848
75846: GO 75859
75848: POP
// bc_type := b_ext_siberium ; 21 :
75849: LD_ADDR_OWVAR 42
75853: PUSH
75854: LD_INT 21
75856: ST_TO_ADDR
75857: GO 76126
75859: LD_INT 21
75861: DOUBLE
75862: EQUAL
75863: IFTRUE 75867
75865: GO 75878
75867: POP
// bc_type := b_ext_computer ; 22 :
75868: LD_ADDR_OWVAR 42
75872: PUSH
75873: LD_INT 24
75875: ST_TO_ADDR
75876: GO 76126
75878: LD_INT 22
75880: DOUBLE
75881: EQUAL
75882: IFTRUE 75886
75884: GO 75897
75886: POP
// bc_type := b_ext_track ; 23 :
75887: LD_ADDR_OWVAR 42
75891: PUSH
75892: LD_INT 16
75894: ST_TO_ADDR
75895: GO 76126
75897: LD_INT 23
75899: DOUBLE
75900: EQUAL
75901: IFTRUE 75905
75903: GO 75916
75905: POP
// bc_type := b_ext_laser ; 24 :
75906: LD_ADDR_OWVAR 42
75910: PUSH
75911: LD_INT 25
75913: ST_TO_ADDR
75914: GO 76126
75916: LD_INT 24
75918: DOUBLE
75919: EQUAL
75920: IFTRUE 75924
75922: GO 75935
75924: POP
// bc_type := b_control_tower ; 25 :
75925: LD_ADDR_OWVAR 42
75929: PUSH
75930: LD_INT 36
75932: ST_TO_ADDR
75933: GO 76126
75935: LD_INT 25
75937: DOUBLE
75938: EQUAL
75939: IFTRUE 75943
75941: GO 75954
75943: POP
// bc_type := b_breastwork ; 26 :
75944: LD_ADDR_OWVAR 42
75948: PUSH
75949: LD_INT 31
75951: ST_TO_ADDR
75952: GO 76126
75954: LD_INT 26
75956: DOUBLE
75957: EQUAL
75958: IFTRUE 75962
75960: GO 75973
75962: POP
// bc_type := b_bunker ; 27 :
75963: LD_ADDR_OWVAR 42
75967: PUSH
75968: LD_INT 32
75970: ST_TO_ADDR
75971: GO 76126
75973: LD_INT 27
75975: DOUBLE
75976: EQUAL
75977: IFTRUE 75981
75979: GO 75992
75981: POP
// bc_type := b_turret ; 28 :
75982: LD_ADDR_OWVAR 42
75986: PUSH
75987: LD_INT 33
75989: ST_TO_ADDR
75990: GO 76126
75992: LD_INT 28
75994: DOUBLE
75995: EQUAL
75996: IFTRUE 76000
75998: GO 76011
76000: POP
// bc_type := b_armoury ; 29 :
76001: LD_ADDR_OWVAR 42
76005: PUSH
76006: LD_INT 4
76008: ST_TO_ADDR
76009: GO 76126
76011: LD_INT 29
76013: DOUBLE
76014: EQUAL
76015: IFTRUE 76019
76017: GO 76030
76019: POP
// bc_type := b_barracks ; 30 :
76020: LD_ADDR_OWVAR 42
76024: PUSH
76025: LD_INT 5
76027: ST_TO_ADDR
76028: GO 76126
76030: LD_INT 30
76032: DOUBLE
76033: EQUAL
76034: IFTRUE 76038
76036: GO 76049
76038: POP
// bc_type := b_solar_power ; 31 :
76039: LD_ADDR_OWVAR 42
76043: PUSH
76044: LD_INT 27
76046: ST_TO_ADDR
76047: GO 76126
76049: LD_INT 31
76051: DOUBLE
76052: EQUAL
76053: IFTRUE 76057
76055: GO 76068
76057: POP
// bc_type := b_oil_power ; 32 :
76058: LD_ADDR_OWVAR 42
76062: PUSH
76063: LD_INT 26
76065: ST_TO_ADDR
76066: GO 76126
76068: LD_INT 32
76070: DOUBLE
76071: EQUAL
76072: IFTRUE 76076
76074: GO 76087
76076: POP
// bc_type := b_siberite_power ; 33 :
76077: LD_ADDR_OWVAR 42
76081: PUSH
76082: LD_INT 28
76084: ST_TO_ADDR
76085: GO 76126
76087: LD_INT 33
76089: DOUBLE
76090: EQUAL
76091: IFTRUE 76095
76093: GO 76106
76095: POP
// bc_type := b_oil_mine ; 34 :
76096: LD_ADDR_OWVAR 42
76100: PUSH
76101: LD_INT 29
76103: ST_TO_ADDR
76104: GO 76126
76106: LD_INT 34
76108: DOUBLE
76109: EQUAL
76110: IFTRUE 76114
76112: GO 76125
76114: POP
// bc_type := b_siberite_mine ; end ;
76115: LD_ADDR_OWVAR 42
76119: PUSH
76120: LD_INT 30
76122: ST_TO_ADDR
76123: GO 76126
76125: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
76126: LD_ADDR_VAR 0 8
76130: PUSH
76131: LD_VAR 0 5
76135: PPUSH
76136: LD_VAR 0 6
76140: PPUSH
76141: LD_VAR 0 3
76145: PPUSH
76146: CALL_OW 47
76150: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
76151: LD_OWVAR 42
76155: PUSH
76156: LD_INT 32
76158: PUSH
76159: LD_INT 33
76161: PUSH
76162: EMPTY
76163: LIST
76164: LIST
76165: IN
76166: IFFALSE 76182
// PlaceWeaponTurret ( b , weapon ) ;
76168: LD_VAR 0 8
76172: PPUSH
76173: LD_VAR 0 4
76177: PPUSH
76178: CALL_OW 431
// end ;
76182: LD_VAR 0 7
76186: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
76187: LD_INT 0
76189: PPUSH
76190: PPUSH
76191: PPUSH
76192: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76193: LD_ADDR_VAR 0 4
76197: PUSH
76198: LD_INT 22
76200: PUSH
76201: LD_OWVAR 2
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PUSH
76210: LD_INT 2
76212: PUSH
76213: LD_INT 30
76215: PUSH
76216: LD_INT 0
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: LD_INT 30
76225: PUSH
76226: LD_INT 1
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: LIST
76237: PUSH
76238: EMPTY
76239: LIST
76240: LIST
76241: PPUSH
76242: CALL_OW 69
76246: ST_TO_ADDR
// if not tmp then
76247: LD_VAR 0 4
76251: NOT
76252: IFFALSE 76256
// exit ;
76254: GO 76315
// for i in tmp do
76256: LD_ADDR_VAR 0 2
76260: PUSH
76261: LD_VAR 0 4
76265: PUSH
76266: FOR_IN
76267: IFFALSE 76313
// for j = 1 to 3 do
76269: LD_ADDR_VAR 0 3
76273: PUSH
76274: DOUBLE
76275: LD_INT 1
76277: DEC
76278: ST_TO_ADDR
76279: LD_INT 3
76281: PUSH
76282: FOR_TO
76283: IFFALSE 76309
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
76285: LD_VAR 0 2
76289: PPUSH
76290: CALL_OW 274
76294: PPUSH
76295: LD_VAR 0 3
76299: PPUSH
76300: LD_INT 99999
76302: PPUSH
76303: CALL_OW 277
76307: GO 76282
76309: POP
76310: POP
76311: GO 76266
76313: POP
76314: POP
// end ;
76315: LD_VAR 0 1
76319: RET
// export function hHackSetLevel10 ; var i , j ; begin
76320: LD_INT 0
76322: PPUSH
76323: PPUSH
76324: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76325: LD_ADDR_VAR 0 2
76329: PUSH
76330: LD_INT 21
76332: PUSH
76333: LD_INT 1
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PPUSH
76340: CALL_OW 69
76344: PUSH
76345: FOR_IN
76346: IFFALSE 76398
// if IsSelected ( i ) then
76348: LD_VAR 0 2
76352: PPUSH
76353: CALL_OW 306
76357: IFFALSE 76396
// begin for j := 1 to 4 do
76359: LD_ADDR_VAR 0 3
76363: PUSH
76364: DOUBLE
76365: LD_INT 1
76367: DEC
76368: ST_TO_ADDR
76369: LD_INT 4
76371: PUSH
76372: FOR_TO
76373: IFFALSE 76394
// SetSkill ( i , j , 10 ) ;
76375: LD_VAR 0 2
76379: PPUSH
76380: LD_VAR 0 3
76384: PPUSH
76385: LD_INT 10
76387: PPUSH
76388: CALL_OW 237
76392: GO 76372
76394: POP
76395: POP
// end ;
76396: GO 76345
76398: POP
76399: POP
// end ;
76400: LD_VAR 0 1
76404: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
76405: LD_INT 0
76407: PPUSH
76408: PPUSH
76409: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
76410: LD_ADDR_VAR 0 2
76414: PUSH
76415: LD_INT 22
76417: PUSH
76418: LD_OWVAR 2
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: PUSH
76427: LD_INT 21
76429: PUSH
76430: LD_INT 1
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PPUSH
76441: CALL_OW 69
76445: PUSH
76446: FOR_IN
76447: IFFALSE 76488
// begin for j := 1 to 4 do
76449: LD_ADDR_VAR 0 3
76453: PUSH
76454: DOUBLE
76455: LD_INT 1
76457: DEC
76458: ST_TO_ADDR
76459: LD_INT 4
76461: PUSH
76462: FOR_TO
76463: IFFALSE 76484
// SetSkill ( i , j , 10 ) ;
76465: LD_VAR 0 2
76469: PPUSH
76470: LD_VAR 0 3
76474: PPUSH
76475: LD_INT 10
76477: PPUSH
76478: CALL_OW 237
76482: GO 76462
76484: POP
76485: POP
// end ;
76486: GO 76446
76488: POP
76489: POP
// end ;
76490: LD_VAR 0 1
76494: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
76495: LD_INT 0
76497: PPUSH
// uc_side := your_side ;
76498: LD_ADDR_OWVAR 20
76502: PUSH
76503: LD_OWVAR 2
76507: ST_TO_ADDR
// uc_nation := nation ;
76508: LD_ADDR_OWVAR 21
76512: PUSH
76513: LD_VAR 0 1
76517: ST_TO_ADDR
// InitHc ;
76518: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76522: LD_INT 0
76524: PPUSH
76525: LD_VAR 0 2
76529: PPUSH
76530: LD_VAR 0 3
76534: PPUSH
76535: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
76539: LD_VAR 0 4
76543: PPUSH
76544: LD_VAR 0 5
76548: PPUSH
76549: CALL_OW 428
76553: PUSH
76554: LD_INT 0
76556: EQUAL
76557: IFFALSE 76581
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76559: CALL_OW 44
76563: PPUSH
76564: LD_VAR 0 4
76568: PPUSH
76569: LD_VAR 0 5
76573: PPUSH
76574: LD_INT 1
76576: PPUSH
76577: CALL_OW 48
// end ;
76581: LD_VAR 0 6
76585: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76586: LD_INT 0
76588: PPUSH
76589: PPUSH
// uc_side := your_side ;
76590: LD_ADDR_OWVAR 20
76594: PUSH
76595: LD_OWVAR 2
76599: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76600: LD_VAR 0 1
76604: PUSH
76605: LD_INT 1
76607: PUSH
76608: LD_INT 2
76610: PUSH
76611: LD_INT 3
76613: PUSH
76614: LD_INT 4
76616: PUSH
76617: LD_INT 5
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: LIST
76624: LIST
76625: LIST
76626: IN
76627: IFFALSE 76639
// uc_nation := nation_american else
76629: LD_ADDR_OWVAR 21
76633: PUSH
76634: LD_INT 1
76636: ST_TO_ADDR
76637: GO 76682
// if chassis in [ 11 , 12 , 13 , 14 ] then
76639: LD_VAR 0 1
76643: PUSH
76644: LD_INT 11
76646: PUSH
76647: LD_INT 12
76649: PUSH
76650: LD_INT 13
76652: PUSH
76653: LD_INT 14
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: LIST
76660: LIST
76661: IN
76662: IFFALSE 76674
// uc_nation := nation_arabian else
76664: LD_ADDR_OWVAR 21
76668: PUSH
76669: LD_INT 2
76671: ST_TO_ADDR
76672: GO 76682
// uc_nation := nation_russian ;
76674: LD_ADDR_OWVAR 21
76678: PUSH
76679: LD_INT 3
76681: ST_TO_ADDR
// vc_chassis := chassis ;
76682: LD_ADDR_OWVAR 37
76686: PUSH
76687: LD_VAR 0 1
76691: ST_TO_ADDR
// vc_engine := engine ;
76692: LD_ADDR_OWVAR 39
76696: PUSH
76697: LD_VAR 0 2
76701: ST_TO_ADDR
// vc_control := control ;
76702: LD_ADDR_OWVAR 38
76706: PUSH
76707: LD_VAR 0 3
76711: ST_TO_ADDR
// vc_weapon := weapon ;
76712: LD_ADDR_OWVAR 40
76716: PUSH
76717: LD_VAR 0 4
76721: ST_TO_ADDR
// un := CreateVehicle ;
76722: LD_ADDR_VAR 0 8
76726: PUSH
76727: CALL_OW 45
76731: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76732: LD_VAR 0 8
76736: PPUSH
76737: LD_INT 0
76739: PPUSH
76740: LD_INT 5
76742: PPUSH
76743: CALL_OW 12
76747: PPUSH
76748: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76752: LD_VAR 0 8
76756: PPUSH
76757: LD_VAR 0 5
76761: PPUSH
76762: LD_VAR 0 6
76766: PPUSH
76767: LD_INT 1
76769: PPUSH
76770: CALL_OW 48
// end ;
76774: LD_VAR 0 7
76778: RET
// export hInvincible ; every 1 do
76779: GO 76781
76781: DISABLE
// hInvincible := [ ] ;
76782: LD_ADDR_EXP 103
76786: PUSH
76787: EMPTY
76788: ST_TO_ADDR
76789: END
// every 10 do var i ;
76790: GO 76792
76792: DISABLE
76793: LD_INT 0
76795: PPUSH
// begin enable ;
76796: ENABLE
// if not hInvincible then
76797: LD_EXP 103
76801: NOT
76802: IFFALSE 76806
// exit ;
76804: GO 76850
// for i in hInvincible do
76806: LD_ADDR_VAR 0 1
76810: PUSH
76811: LD_EXP 103
76815: PUSH
76816: FOR_IN
76817: IFFALSE 76848
// if GetLives ( i ) < 1000 then
76819: LD_VAR 0 1
76823: PPUSH
76824: CALL_OW 256
76828: PUSH
76829: LD_INT 1000
76831: LESS
76832: IFFALSE 76846
// SetLives ( i , 1000 ) ;
76834: LD_VAR 0 1
76838: PPUSH
76839: LD_INT 1000
76841: PPUSH
76842: CALL_OW 234
76846: GO 76816
76848: POP
76849: POP
// end ;
76850: PPOPN 1
76852: END
// export function hHackInvincible ; var i ; begin
76853: LD_INT 0
76855: PPUSH
76856: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76857: LD_ADDR_VAR 0 2
76861: PUSH
76862: LD_INT 2
76864: PUSH
76865: LD_INT 21
76867: PUSH
76868: LD_INT 1
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: PUSH
76875: LD_INT 21
76877: PUSH
76878: LD_INT 2
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: LIST
76889: PPUSH
76890: CALL_OW 69
76894: PUSH
76895: FOR_IN
76896: IFFALSE 76957
// if IsSelected ( i ) then
76898: LD_VAR 0 2
76902: PPUSH
76903: CALL_OW 306
76907: IFFALSE 76955
// begin if i in hInvincible then
76909: LD_VAR 0 2
76913: PUSH
76914: LD_EXP 103
76918: IN
76919: IFFALSE 76939
// hInvincible := hInvincible diff i else
76921: LD_ADDR_EXP 103
76925: PUSH
76926: LD_EXP 103
76930: PUSH
76931: LD_VAR 0 2
76935: DIFF
76936: ST_TO_ADDR
76937: GO 76955
// hInvincible := hInvincible union i ;
76939: LD_ADDR_EXP 103
76943: PUSH
76944: LD_EXP 103
76948: PUSH
76949: LD_VAR 0 2
76953: UNION
76954: ST_TO_ADDR
// end ;
76955: GO 76895
76957: POP
76958: POP
// end ;
76959: LD_VAR 0 1
76963: RET
// export function hHackInvisible ; var i , j ; begin
76964: LD_INT 0
76966: PPUSH
76967: PPUSH
76968: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76969: LD_ADDR_VAR 0 2
76973: PUSH
76974: LD_INT 21
76976: PUSH
76977: LD_INT 1
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: PPUSH
76984: CALL_OW 69
76988: PUSH
76989: FOR_IN
76990: IFFALSE 77014
// if IsSelected ( i ) then
76992: LD_VAR 0 2
76996: PPUSH
76997: CALL_OW 306
77001: IFFALSE 77012
// ComForceInvisible ( i ) ;
77003: LD_VAR 0 2
77007: PPUSH
77008: CALL_OW 496
77012: GO 76989
77014: POP
77015: POP
// end ;
77016: LD_VAR 0 1
77020: RET
// export function hHackChangeYourSide ; begin
77021: LD_INT 0
77023: PPUSH
// if your_side = 8 then
77024: LD_OWVAR 2
77028: PUSH
77029: LD_INT 8
77031: EQUAL
77032: IFFALSE 77044
// your_side := 0 else
77034: LD_ADDR_OWVAR 2
77038: PUSH
77039: LD_INT 0
77041: ST_TO_ADDR
77042: GO 77058
// your_side := your_side + 1 ;
77044: LD_ADDR_OWVAR 2
77048: PUSH
77049: LD_OWVAR 2
77053: PUSH
77054: LD_INT 1
77056: PLUS
77057: ST_TO_ADDR
// end ;
77058: LD_VAR 0 1
77062: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77063: LD_INT 0
77065: PPUSH
77066: PPUSH
77067: PPUSH
// for i in all_units do
77068: LD_ADDR_VAR 0 2
77072: PUSH
77073: LD_OWVAR 3
77077: PUSH
77078: FOR_IN
77079: IFFALSE 77157
// if IsSelected ( i ) then
77081: LD_VAR 0 2
77085: PPUSH
77086: CALL_OW 306
77090: IFFALSE 77155
// begin j := GetSide ( i ) ;
77092: LD_ADDR_VAR 0 3
77096: PUSH
77097: LD_VAR 0 2
77101: PPUSH
77102: CALL_OW 255
77106: ST_TO_ADDR
// if j = 8 then
77107: LD_VAR 0 3
77111: PUSH
77112: LD_INT 8
77114: EQUAL
77115: IFFALSE 77127
// j := 0 else
77117: LD_ADDR_VAR 0 3
77121: PUSH
77122: LD_INT 0
77124: ST_TO_ADDR
77125: GO 77141
// j := j + 1 ;
77127: LD_ADDR_VAR 0 3
77131: PUSH
77132: LD_VAR 0 3
77136: PUSH
77137: LD_INT 1
77139: PLUS
77140: ST_TO_ADDR
// SetSide ( i , j ) ;
77141: LD_VAR 0 2
77145: PPUSH
77146: LD_VAR 0 3
77150: PPUSH
77151: CALL_OW 235
// end ;
77155: GO 77078
77157: POP
77158: POP
// end ;
77159: LD_VAR 0 1
77163: RET
// export function hHackFog ; begin
77164: LD_INT 0
77166: PPUSH
// FogOff ( true ) ;
77167: LD_INT 1
77169: PPUSH
77170: CALL_OW 344
// end ;
77174: LD_VAR 0 1
77178: RET
// export function hHackTeleport ( unit , x , y ) ; begin
77179: LD_INT 0
77181: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
77182: LD_VAR 0 1
77186: PPUSH
77187: LD_VAR 0 2
77191: PPUSH
77192: LD_VAR 0 3
77196: PPUSH
77197: LD_INT 1
77199: PPUSH
77200: LD_INT 1
77202: PPUSH
77203: CALL_OW 483
// CenterOnXY ( x , y ) ;
77207: LD_VAR 0 2
77211: PPUSH
77212: LD_VAR 0 3
77216: PPUSH
77217: CALL_OW 84
// end ;
77221: LD_VAR 0 4
77225: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
77226: LD_INT 0
77228: PPUSH
77229: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
77230: LD_VAR 0 1
77234: NOT
77235: PUSH
77236: LD_VAR 0 2
77240: PPUSH
77241: LD_VAR 0 3
77245: PPUSH
77246: CALL_OW 488
77250: NOT
77251: OR
77252: PUSH
77253: LD_VAR 0 1
77257: PPUSH
77258: CALL_OW 266
77262: PUSH
77263: LD_INT 3
77265: NONEQUAL
77266: PUSH
77267: LD_VAR 0 1
77271: PPUSH
77272: CALL_OW 247
77276: PUSH
77277: LD_INT 1
77279: EQUAL
77280: NOT
77281: AND
77282: OR
77283: IFFALSE 77287
// exit ;
77285: GO 77436
// if GetType ( factory ) = unit_human then
77287: LD_VAR 0 1
77291: PPUSH
77292: CALL_OW 247
77296: PUSH
77297: LD_INT 1
77299: EQUAL
77300: IFFALSE 77317
// factory := IsInUnit ( factory ) ;
77302: LD_ADDR_VAR 0 1
77306: PUSH
77307: LD_VAR 0 1
77311: PPUSH
77312: CALL_OW 310
77316: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
77317: LD_VAR 0 1
77321: PPUSH
77322: CALL_OW 266
77326: PUSH
77327: LD_INT 3
77329: NONEQUAL
77330: IFFALSE 77334
// exit ;
77332: GO 77436
// if HexInfo ( x , y ) = factory then
77334: LD_VAR 0 2
77338: PPUSH
77339: LD_VAR 0 3
77343: PPUSH
77344: CALL_OW 428
77348: PUSH
77349: LD_VAR 0 1
77353: EQUAL
77354: IFFALSE 77381
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
77356: LD_ADDR_EXP 104
77360: PUSH
77361: LD_EXP 104
77365: PPUSH
77366: LD_VAR 0 1
77370: PPUSH
77371: LD_INT 0
77373: PPUSH
77374: CALL_OW 1
77378: ST_TO_ADDR
77379: GO 77432
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
77381: LD_ADDR_EXP 104
77385: PUSH
77386: LD_EXP 104
77390: PPUSH
77391: LD_VAR 0 1
77395: PPUSH
77396: LD_VAR 0 1
77400: PPUSH
77401: CALL_OW 255
77405: PUSH
77406: LD_VAR 0 1
77410: PUSH
77411: LD_VAR 0 2
77415: PUSH
77416: LD_VAR 0 3
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: PPUSH
77427: CALL_OW 1
77431: ST_TO_ADDR
// UpdateFactoryWaypoints ;
77432: CALL 77441 0 0
// end ;
77436: LD_VAR 0 4
77440: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
77441: LD_INT 0
77443: PPUSH
77444: PPUSH
77445: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
77446: LD_STRING resetFactoryWaypoint();
77448: PPUSH
77449: CALL_OW 559
// if factoryWaypoints then
77453: LD_EXP 104
77457: IFFALSE 77583
// begin list := PrepareArray ( factoryWaypoints ) ;
77459: LD_ADDR_VAR 0 3
77463: PUSH
77464: LD_EXP 104
77468: PPUSH
77469: CALL 61904 0 1
77473: ST_TO_ADDR
// for i := 1 to list do
77474: LD_ADDR_VAR 0 2
77478: PUSH
77479: DOUBLE
77480: LD_INT 1
77482: DEC
77483: ST_TO_ADDR
77484: LD_VAR 0 3
77488: PUSH
77489: FOR_TO
77490: IFFALSE 77581
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77492: LD_STRING setFactoryWaypointXY(
77494: PUSH
77495: LD_VAR 0 3
77499: PUSH
77500: LD_VAR 0 2
77504: ARRAY
77505: PUSH
77506: LD_INT 1
77508: ARRAY
77509: STR
77510: PUSH
77511: LD_STRING ,
77513: STR
77514: PUSH
77515: LD_VAR 0 3
77519: PUSH
77520: LD_VAR 0 2
77524: ARRAY
77525: PUSH
77526: LD_INT 2
77528: ARRAY
77529: STR
77530: PUSH
77531: LD_STRING ,
77533: STR
77534: PUSH
77535: LD_VAR 0 3
77539: PUSH
77540: LD_VAR 0 2
77544: ARRAY
77545: PUSH
77546: LD_INT 3
77548: ARRAY
77549: STR
77550: PUSH
77551: LD_STRING ,
77553: STR
77554: PUSH
77555: LD_VAR 0 3
77559: PUSH
77560: LD_VAR 0 2
77564: ARRAY
77565: PUSH
77566: LD_INT 4
77568: ARRAY
77569: STR
77570: PUSH
77571: LD_STRING )
77573: STR
77574: PPUSH
77575: CALL_OW 559
77579: GO 77489
77581: POP
77582: POP
// end ; end ;
77583: LD_VAR 0 1
77587: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
77588: LD_INT 0
77590: PPUSH
// if HexInfo ( x , y ) = warehouse then
77591: LD_VAR 0 2
77595: PPUSH
77596: LD_VAR 0 3
77600: PPUSH
77601: CALL_OW 428
77605: PUSH
77606: LD_VAR 0 1
77610: EQUAL
77611: IFFALSE 77638
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
77613: LD_ADDR_EXP 105
77617: PUSH
77618: LD_EXP 105
77622: PPUSH
77623: LD_VAR 0 1
77627: PPUSH
77628: LD_INT 0
77630: PPUSH
77631: CALL_OW 1
77635: ST_TO_ADDR
77636: GO 77689
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
77638: LD_ADDR_EXP 105
77642: PUSH
77643: LD_EXP 105
77647: PPUSH
77648: LD_VAR 0 1
77652: PPUSH
77653: LD_VAR 0 1
77657: PPUSH
77658: CALL_OW 255
77662: PUSH
77663: LD_VAR 0 1
77667: PUSH
77668: LD_VAR 0 2
77672: PUSH
77673: LD_VAR 0 3
77677: PUSH
77678: EMPTY
77679: LIST
77680: LIST
77681: LIST
77682: LIST
77683: PPUSH
77684: CALL_OW 1
77688: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
77689: CALL 77698 0 0
// end ;
77693: LD_VAR 0 4
77697: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
77698: LD_INT 0
77700: PPUSH
77701: PPUSH
77702: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
77703: LD_STRING resetWarehouseGatheringPoints();
77705: PPUSH
77706: CALL_OW 559
// if warehouseGatheringPoints then
77710: LD_EXP 105
77714: IFFALSE 77840
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
77716: LD_ADDR_VAR 0 3
77720: PUSH
77721: LD_EXP 105
77725: PPUSH
77726: CALL 61904 0 1
77730: ST_TO_ADDR
// for i := 1 to list do
77731: LD_ADDR_VAR 0 2
77735: PUSH
77736: DOUBLE
77737: LD_INT 1
77739: DEC
77740: ST_TO_ADDR
77741: LD_VAR 0 3
77745: PUSH
77746: FOR_TO
77747: IFFALSE 77838
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77749: LD_STRING setWarehouseGatheringPointXY(
77751: PUSH
77752: LD_VAR 0 3
77756: PUSH
77757: LD_VAR 0 2
77761: ARRAY
77762: PUSH
77763: LD_INT 1
77765: ARRAY
77766: STR
77767: PUSH
77768: LD_STRING ,
77770: STR
77771: PUSH
77772: LD_VAR 0 3
77776: PUSH
77777: LD_VAR 0 2
77781: ARRAY
77782: PUSH
77783: LD_INT 2
77785: ARRAY
77786: STR
77787: PUSH
77788: LD_STRING ,
77790: STR
77791: PUSH
77792: LD_VAR 0 3
77796: PUSH
77797: LD_VAR 0 2
77801: ARRAY
77802: PUSH
77803: LD_INT 3
77805: ARRAY
77806: STR
77807: PUSH
77808: LD_STRING ,
77810: STR
77811: PUSH
77812: LD_VAR 0 3
77816: PUSH
77817: LD_VAR 0 2
77821: ARRAY
77822: PUSH
77823: LD_INT 4
77825: ARRAY
77826: STR
77827: PUSH
77828: LD_STRING )
77830: STR
77831: PPUSH
77832: CALL_OW 559
77836: GO 77746
77838: POP
77839: POP
// end ; end ;
77840: LD_VAR 0 1
77844: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
77845: LD_EXP 105
77849: IFFALSE 78534
77851: GO 77853
77853: DISABLE
77854: LD_INT 0
77856: PPUSH
77857: PPUSH
77858: PPUSH
77859: PPUSH
77860: PPUSH
77861: PPUSH
77862: PPUSH
77863: PPUSH
77864: PPUSH
// begin enable ;
77865: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
77866: LD_ADDR_VAR 0 3
77870: PUSH
77871: LD_EXP 105
77875: PPUSH
77876: CALL 61904 0 1
77880: ST_TO_ADDR
// if not list then
77881: LD_VAR 0 3
77885: NOT
77886: IFFALSE 77890
// exit ;
77888: GO 78534
// for i := 1 to list do
77890: LD_ADDR_VAR 0 1
77894: PUSH
77895: DOUBLE
77896: LD_INT 1
77898: DEC
77899: ST_TO_ADDR
77900: LD_VAR 0 3
77904: PUSH
77905: FOR_TO
77906: IFFALSE 78532
// begin depot := list [ i ] [ 2 ] ;
77908: LD_ADDR_VAR 0 8
77912: PUSH
77913: LD_VAR 0 3
77917: PUSH
77918: LD_VAR 0 1
77922: ARRAY
77923: PUSH
77924: LD_INT 2
77926: ARRAY
77927: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
77928: LD_ADDR_VAR 0 5
77932: PUSH
77933: LD_VAR 0 3
77937: PUSH
77938: LD_VAR 0 1
77942: ARRAY
77943: PUSH
77944: LD_INT 1
77946: ARRAY
77947: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
77948: LD_VAR 0 8
77952: PPUSH
77953: CALL_OW 301
77957: PUSH
77958: LD_VAR 0 5
77962: PUSH
77963: LD_VAR 0 8
77967: PPUSH
77968: CALL_OW 255
77972: NONEQUAL
77973: OR
77974: IFFALSE 78003
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
77976: LD_ADDR_EXP 105
77980: PUSH
77981: LD_EXP 105
77985: PPUSH
77986: LD_VAR 0 8
77990: PPUSH
77991: LD_INT 0
77993: PPUSH
77994: CALL_OW 1
77998: ST_TO_ADDR
// exit ;
77999: POP
78000: POP
78001: GO 78534
// end ; x := list [ i ] [ 3 ] ;
78003: LD_ADDR_VAR 0 6
78007: PUSH
78008: LD_VAR 0 3
78012: PUSH
78013: LD_VAR 0 1
78017: ARRAY
78018: PUSH
78019: LD_INT 3
78021: ARRAY
78022: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
78023: LD_ADDR_VAR 0 7
78027: PUSH
78028: LD_VAR 0 3
78032: PUSH
78033: LD_VAR 0 1
78037: ARRAY
78038: PUSH
78039: LD_INT 4
78041: ARRAY
78042: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
78043: LD_ADDR_VAR 0 9
78047: PUSH
78048: LD_VAR 0 6
78052: PPUSH
78053: LD_VAR 0 7
78057: PPUSH
78058: LD_INT 16
78060: PPUSH
78061: CALL 60492 0 3
78065: ST_TO_ADDR
// if not cratesNearbyPoint then
78066: LD_VAR 0 9
78070: NOT
78071: IFFALSE 78077
// exit ;
78073: POP
78074: POP
78075: GO 78534
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
78077: LD_ADDR_VAR 0 4
78081: PUSH
78082: LD_INT 22
78084: PUSH
78085: LD_VAR 0 5
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: PUSH
78094: LD_INT 3
78096: PUSH
78097: LD_INT 60
78099: PUSH
78100: EMPTY
78101: LIST
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PUSH
78107: LD_INT 91
78109: PUSH
78110: LD_VAR 0 8
78114: PUSH
78115: LD_INT 6
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: LIST
78122: PUSH
78123: LD_INT 2
78125: PUSH
78126: LD_INT 25
78128: PUSH
78129: LD_INT 2
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: PUSH
78136: LD_INT 25
78138: PUSH
78139: LD_INT 16
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: PUSH
78146: EMPTY
78147: LIST
78148: LIST
78149: LIST
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: PPUSH
78157: CALL_OW 69
78161: PUSH
78162: LD_VAR 0 8
78166: PPUSH
78167: CALL_OW 313
78171: PPUSH
78172: LD_INT 3
78174: PUSH
78175: LD_INT 60
78177: PUSH
78178: EMPTY
78179: LIST
78180: PUSH
78181: EMPTY
78182: LIST
78183: LIST
78184: PUSH
78185: LD_INT 2
78187: PUSH
78188: LD_INT 25
78190: PUSH
78191: LD_INT 2
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: PUSH
78198: LD_INT 25
78200: PUSH
78201: LD_INT 16
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: EMPTY
78209: LIST
78210: LIST
78211: LIST
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: PPUSH
78217: CALL_OW 72
78221: UNION
78222: ST_TO_ADDR
// if tmp then
78223: LD_VAR 0 4
78227: IFFALSE 78307
// begin tmp := ShrinkArray ( tmp , 3 ) ;
78229: LD_ADDR_VAR 0 4
78233: PUSH
78234: LD_VAR 0 4
78238: PPUSH
78239: LD_INT 3
78241: PPUSH
78242: CALL 58461 0 2
78246: ST_TO_ADDR
// for j in tmp do
78247: LD_ADDR_VAR 0 2
78251: PUSH
78252: LD_VAR 0 4
78256: PUSH
78257: FOR_IN
78258: IFFALSE 78301
// begin if IsInUnit ( j ) then
78260: LD_VAR 0 2
78264: PPUSH
78265: CALL_OW 310
78269: IFFALSE 78280
// ComExit ( j ) ;
78271: LD_VAR 0 2
78275: PPUSH
78276: CALL 58544 0 1
// AddComCollect ( j , x , y ) ;
78280: LD_VAR 0 2
78284: PPUSH
78285: LD_VAR 0 6
78289: PPUSH
78290: LD_VAR 0 7
78294: PPUSH
78295: CALL_OW 177
// end ;
78299: GO 78257
78301: POP
78302: POP
// exit ;
78303: POP
78304: POP
78305: GO 78534
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
78307: LD_ADDR_VAR 0 4
78311: PUSH
78312: LD_INT 22
78314: PUSH
78315: LD_VAR 0 5
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: PUSH
78324: LD_INT 91
78326: PUSH
78327: LD_VAR 0 8
78331: PUSH
78332: LD_INT 8
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: LIST
78339: PUSH
78340: LD_INT 2
78342: PUSH
78343: LD_INT 34
78345: PUSH
78346: LD_INT 12
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PUSH
78353: LD_INT 34
78355: PUSH
78356: LD_INT 51
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: PUSH
78363: LD_INT 34
78365: PUSH
78366: LD_INT 32
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: PUSH
78373: LD_INT 34
78375: PUSH
78376: LD_INT 89
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: LIST
78387: LIST
78388: LIST
78389: PUSH
78390: EMPTY
78391: LIST
78392: LIST
78393: LIST
78394: PPUSH
78395: CALL_OW 69
78399: ST_TO_ADDR
// if tmp then
78400: LD_VAR 0 4
78404: IFFALSE 78530
// begin for j in tmp do
78406: LD_ADDR_VAR 0 2
78410: PUSH
78411: LD_VAR 0 4
78415: PUSH
78416: FOR_IN
78417: IFFALSE 78528
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
78419: LD_VAR 0 2
78423: PPUSH
78424: CALL_OW 262
78428: PUSH
78429: LD_INT 3
78431: EQUAL
78432: PUSH
78433: LD_VAR 0 2
78437: PPUSH
78438: CALL_OW 261
78442: PUSH
78443: LD_INT 20
78445: GREATER
78446: OR
78447: PUSH
78448: LD_VAR 0 2
78452: PPUSH
78453: CALL_OW 314
78457: NOT
78458: AND
78459: PUSH
78460: LD_VAR 0 2
78464: PPUSH
78465: CALL_OW 263
78469: PUSH
78470: LD_INT 1
78472: NONEQUAL
78473: PUSH
78474: LD_VAR 0 2
78478: PPUSH
78479: CALL_OW 311
78483: OR
78484: AND
78485: IFFALSE 78526
// begin ComCollect ( j , x , y ) ;
78487: LD_VAR 0 2
78491: PPUSH
78492: LD_VAR 0 6
78496: PPUSH
78497: LD_VAR 0 7
78501: PPUSH
78502: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
78506: LD_VAR 0 2
78510: PPUSH
78511: LD_VAR 0 8
78515: PPUSH
78516: CALL_OW 172
// exit ;
78520: POP
78521: POP
78522: POP
78523: POP
78524: GO 78534
// end ;
78526: GO 78416
78528: POP
78529: POP
// end ; end ;
78530: GO 77905
78532: POP
78533: POP
// end ; end_of_file
78534: PPOPN 9
78536: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78537: LD_VAR 0 1
78541: PUSH
78542: LD_INT 200
78544: DOUBLE
78545: GREATEREQUAL
78546: IFFALSE 78554
78548: LD_INT 299
78550: DOUBLE
78551: LESSEQUAL
78552: IFTRUE 78556
78554: GO 78588
78556: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78557: LD_VAR 0 1
78561: PPUSH
78562: LD_VAR 0 2
78566: PPUSH
78567: LD_VAR 0 3
78571: PPUSH
78572: LD_VAR 0 4
78576: PPUSH
78577: LD_VAR 0 5
78581: PPUSH
78582: CALL 79076 0 5
78586: GO 78665
78588: LD_INT 300
78590: DOUBLE
78591: GREATEREQUAL
78592: IFFALSE 78600
78594: LD_INT 399
78596: DOUBLE
78597: LESSEQUAL
78598: IFTRUE 78602
78600: GO 78664
78602: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78603: LD_VAR 0 1
78607: PPUSH
78608: LD_VAR 0 2
78612: PPUSH
78613: LD_VAR 0 3
78617: PPUSH
78618: LD_VAR 0 4
78622: PPUSH
78623: LD_VAR 0 5
78627: PPUSH
78628: LD_VAR 0 6
78632: PPUSH
78633: LD_VAR 0 7
78637: PPUSH
78638: LD_VAR 0 8
78642: PPUSH
78643: LD_VAR 0 9
78647: PPUSH
78648: LD_VAR 0 10
78652: PPUSH
78653: LD_VAR 0 11
78657: PPUSH
78658: CALL 75238 0 11
78662: GO 78665
78664: POP
// end ;
78665: PPOPN 11
78667: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78668: LD_VAR 0 1
78672: PPUSH
78673: LD_VAR 0 2
78677: PPUSH
78678: LD_VAR 0 3
78682: PPUSH
78683: LD_VAR 0 4
78687: PPUSH
78688: LD_VAR 0 5
78692: PPUSH
78693: CALL 78812 0 5
// end ; end_of_file
78697: PPOPN 5
78699: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78700: LD_INT 0
78702: PPUSH
78703: PPUSH
78704: PPUSH
78705: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78706: LD_VAR 0 1
78710: PPUSH
78711: CALL_OW 264
78715: PUSH
78716: LD_INT 91
78718: EQUAL
78719: IFFALSE 78791
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78721: LD_INT 68
78723: PPUSH
78724: LD_VAR 0 1
78728: PPUSH
78729: CALL_OW 255
78733: PPUSH
78734: CALL_OW 321
78738: PUSH
78739: LD_INT 2
78741: EQUAL
78742: IFFALSE 78754
// eff := 70 else
78744: LD_ADDR_VAR 0 4
78748: PUSH
78749: LD_INT 70
78751: ST_TO_ADDR
78752: GO 78762
// eff := 30 ;
78754: LD_ADDR_VAR 0 4
78758: PUSH
78759: LD_INT 30
78761: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78762: LD_VAR 0 1
78766: PPUSH
78767: CALL_OW 250
78771: PPUSH
78772: LD_VAR 0 1
78776: PPUSH
78777: CALL_OW 251
78781: PPUSH
78782: LD_VAR 0 4
78786: PPUSH
78787: CALL_OW 495
// end ; end ;
78791: LD_VAR 0 2
78795: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78796: LD_INT 0
78798: PPUSH
// end ;
78799: LD_VAR 0 4
78803: RET
// export function SOS_Command ( cmd ) ; begin
78804: LD_INT 0
78806: PPUSH
// end ;
78807: LD_VAR 0 2
78811: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
78812: LD_INT 0
78814: PPUSH
// end ;
78815: LD_VAR 0 6
78819: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
78820: LD_INT 0
78822: PPUSH
78823: PPUSH
// if not vehicle or not factory then
78824: LD_VAR 0 1
78828: NOT
78829: PUSH
78830: LD_VAR 0 2
78834: NOT
78835: OR
78836: IFFALSE 78840
// exit ;
78838: GO 79071
// if factoryWaypoints >= factory then
78840: LD_EXP 104
78844: PUSH
78845: LD_VAR 0 2
78849: GREATEREQUAL
78850: IFFALSE 79071
// if factoryWaypoints [ factory ] then
78852: LD_EXP 104
78856: PUSH
78857: LD_VAR 0 2
78861: ARRAY
78862: IFFALSE 79071
// begin if GetControl ( vehicle ) = control_manual then
78864: LD_VAR 0 1
78868: PPUSH
78869: CALL_OW 263
78873: PUSH
78874: LD_INT 1
78876: EQUAL
78877: IFFALSE 78958
// begin driver := IsDrivenBy ( vehicle ) ;
78879: LD_ADDR_VAR 0 4
78883: PUSH
78884: LD_VAR 0 1
78888: PPUSH
78889: CALL_OW 311
78893: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78894: LD_VAR 0 4
78898: PPUSH
78899: LD_EXP 104
78903: PUSH
78904: LD_VAR 0 2
78908: ARRAY
78909: PUSH
78910: LD_INT 3
78912: ARRAY
78913: PPUSH
78914: LD_EXP 104
78918: PUSH
78919: LD_VAR 0 2
78923: ARRAY
78924: PUSH
78925: LD_INT 4
78927: ARRAY
78928: PPUSH
78929: CALL_OW 171
// AddComExitVehicle ( driver ) ;
78933: LD_VAR 0 4
78937: PPUSH
78938: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
78942: LD_VAR 0 4
78946: PPUSH
78947: LD_VAR 0 2
78951: PPUSH
78952: CALL_OW 180
// end else
78956: GO 79071
// if GetControl ( vehicle ) = control_remote then
78958: LD_VAR 0 1
78962: PPUSH
78963: CALL_OW 263
78967: PUSH
78968: LD_INT 2
78970: EQUAL
78971: IFFALSE 79032
// begin wait ( 0 0$2 ) ;
78973: LD_INT 70
78975: PPUSH
78976: CALL_OW 67
// if Connect ( vehicle ) then
78980: LD_VAR 0 1
78984: PPUSH
78985: CALL 28752 0 1
78989: IFFALSE 79030
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78991: LD_VAR 0 1
78995: PPUSH
78996: LD_EXP 104
79000: PUSH
79001: LD_VAR 0 2
79005: ARRAY
79006: PUSH
79007: LD_INT 3
79009: ARRAY
79010: PPUSH
79011: LD_EXP 104
79015: PUSH
79016: LD_VAR 0 2
79020: ARRAY
79021: PUSH
79022: LD_INT 4
79024: ARRAY
79025: PPUSH
79026: CALL_OW 171
// end else
79030: GO 79071
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
79032: LD_VAR 0 1
79036: PPUSH
79037: LD_EXP 104
79041: PUSH
79042: LD_VAR 0 2
79046: ARRAY
79047: PUSH
79048: LD_INT 3
79050: ARRAY
79051: PPUSH
79052: LD_EXP 104
79056: PUSH
79057: LD_VAR 0 2
79061: ARRAY
79062: PUSH
79063: LD_INT 4
79065: ARRAY
79066: PPUSH
79067: CALL_OW 171
// end ; end ;
79071: LD_VAR 0 3
79075: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
79076: LD_INT 0
79078: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
79079: LD_VAR 0 1
79083: PUSH
79084: LD_INT 250
79086: EQUAL
79087: PUSH
79088: LD_VAR 0 2
79092: PPUSH
79093: CALL_OW 264
79097: PUSH
79098: LD_INT 81
79100: EQUAL
79101: AND
79102: IFFALSE 79123
// MinerPlaceMine ( unit , x , y ) ;
79104: LD_VAR 0 2
79108: PPUSH
79109: LD_VAR 0 4
79113: PPUSH
79114: LD_VAR 0 5
79118: PPUSH
79119: CALL 81947 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
79123: LD_VAR 0 1
79127: PUSH
79128: LD_INT 251
79130: EQUAL
79131: PUSH
79132: LD_VAR 0 2
79136: PPUSH
79137: CALL_OW 264
79141: PUSH
79142: LD_INT 81
79144: EQUAL
79145: AND
79146: IFFALSE 79167
// MinerDetonateMine ( unit , x , y ) ;
79148: LD_VAR 0 2
79152: PPUSH
79153: LD_VAR 0 4
79157: PPUSH
79158: LD_VAR 0 5
79162: PPUSH
79163: CALL 82222 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
79167: LD_VAR 0 1
79171: PUSH
79172: LD_INT 252
79174: EQUAL
79175: PUSH
79176: LD_VAR 0 2
79180: PPUSH
79181: CALL_OW 264
79185: PUSH
79186: LD_INT 81
79188: EQUAL
79189: AND
79190: IFFALSE 79211
// MinerCreateMinefield ( unit , x , y ) ;
79192: LD_VAR 0 2
79196: PPUSH
79197: LD_VAR 0 4
79201: PPUSH
79202: LD_VAR 0 5
79206: PPUSH
79207: CALL 82639 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
79211: LD_VAR 0 1
79215: PUSH
79216: LD_INT 253
79218: EQUAL
79219: PUSH
79220: LD_VAR 0 2
79224: PPUSH
79225: CALL_OW 257
79229: PUSH
79230: LD_INT 5
79232: EQUAL
79233: AND
79234: IFFALSE 79255
// ComBinocular ( unit , x , y ) ;
79236: LD_VAR 0 2
79240: PPUSH
79241: LD_VAR 0 4
79245: PPUSH
79246: LD_VAR 0 5
79250: PPUSH
79251: CALL 83008 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
79255: LD_VAR 0 1
79259: PUSH
79260: LD_INT 254
79262: EQUAL
79263: PUSH
79264: LD_VAR 0 2
79268: PPUSH
79269: CALL_OW 264
79273: PUSH
79274: LD_INT 99
79276: EQUAL
79277: AND
79278: PUSH
79279: LD_VAR 0 3
79283: PPUSH
79284: CALL_OW 263
79288: PUSH
79289: LD_INT 3
79291: EQUAL
79292: AND
79293: IFFALSE 79309
// HackDestroyVehicle ( unit , selectedUnit ) ;
79295: LD_VAR 0 2
79299: PPUSH
79300: LD_VAR 0 3
79304: PPUSH
79305: CALL 81311 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
79309: LD_VAR 0 1
79313: PUSH
79314: LD_INT 255
79316: EQUAL
79317: PUSH
79318: LD_VAR 0 2
79322: PPUSH
79323: CALL_OW 264
79327: PUSH
79328: LD_INT 14
79330: PUSH
79331: LD_INT 53
79333: PUSH
79334: EMPTY
79335: LIST
79336: LIST
79337: IN
79338: AND
79339: PUSH
79340: LD_VAR 0 4
79344: PPUSH
79345: LD_VAR 0 5
79349: PPUSH
79350: CALL_OW 488
79354: AND
79355: IFFALSE 79379
// CutTreeXYR ( unit , x , y , 12 ) ;
79357: LD_VAR 0 2
79361: PPUSH
79362: LD_VAR 0 4
79366: PPUSH
79367: LD_VAR 0 5
79371: PPUSH
79372: LD_INT 12
79374: PPUSH
79375: CALL 79474 0 4
// if cmd = 256 then
79379: LD_VAR 0 1
79383: PUSH
79384: LD_INT 256
79386: EQUAL
79387: IFFALSE 79408
// SetFactoryWaypoint ( unit , x , y ) ;
79389: LD_VAR 0 2
79393: PPUSH
79394: LD_VAR 0 4
79398: PPUSH
79399: LD_VAR 0 5
79403: PPUSH
79404: CALL 77226 0 3
// if cmd = 257 then
79408: LD_VAR 0 1
79412: PUSH
79413: LD_INT 257
79415: EQUAL
79416: IFFALSE 79437
// SetWarehouseGatheringPoint ( unit , x , y ) ;
79418: LD_VAR 0 2
79422: PPUSH
79423: LD_VAR 0 4
79427: PPUSH
79428: LD_VAR 0 5
79432: PPUSH
79433: CALL 77588 0 3
// if cmd = 258 then
79437: LD_VAR 0 1
79441: PUSH
79442: LD_INT 258
79444: EQUAL
79445: IFFALSE 79469
// BurnTreeXYR ( unit , x , y , 8 ) ;
79447: LD_VAR 0 2
79451: PPUSH
79452: LD_VAR 0 4
79456: PPUSH
79457: LD_VAR 0 5
79461: PPUSH
79462: LD_INT 8
79464: PPUSH
79465: CALL 79868 0 4
// end ;
79469: LD_VAR 0 6
79473: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79474: LD_INT 0
79476: PPUSH
79477: PPUSH
79478: PPUSH
79479: PPUSH
79480: PPUSH
79481: PPUSH
79482: PPUSH
79483: PPUSH
79484: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
79485: LD_VAR 0 1
79489: PPUSH
79490: CALL_OW 302
79494: NOT
79495: PUSH
79496: LD_VAR 0 2
79500: PPUSH
79501: LD_VAR 0 3
79505: PPUSH
79506: CALL_OW 488
79510: NOT
79511: OR
79512: PUSH
79513: LD_VAR 0 4
79517: NOT
79518: OR
79519: IFFALSE 79523
// exit ;
79521: GO 79863
// list := [ ] ;
79523: LD_ADDR_VAR 0 13
79527: PUSH
79528: EMPTY
79529: ST_TO_ADDR
// if x - r < 0 then
79530: LD_VAR 0 2
79534: PUSH
79535: LD_VAR 0 4
79539: MINUS
79540: PUSH
79541: LD_INT 0
79543: LESS
79544: IFFALSE 79556
// min_x := 0 else
79546: LD_ADDR_VAR 0 7
79550: PUSH
79551: LD_INT 0
79553: ST_TO_ADDR
79554: GO 79572
// min_x := x - r ;
79556: LD_ADDR_VAR 0 7
79560: PUSH
79561: LD_VAR 0 2
79565: PUSH
79566: LD_VAR 0 4
79570: MINUS
79571: ST_TO_ADDR
// if y - r < 0 then
79572: LD_VAR 0 3
79576: PUSH
79577: LD_VAR 0 4
79581: MINUS
79582: PUSH
79583: LD_INT 0
79585: LESS
79586: IFFALSE 79598
// min_y := 0 else
79588: LD_ADDR_VAR 0 8
79592: PUSH
79593: LD_INT 0
79595: ST_TO_ADDR
79596: GO 79614
// min_y := y - r ;
79598: LD_ADDR_VAR 0 8
79602: PUSH
79603: LD_VAR 0 3
79607: PUSH
79608: LD_VAR 0 4
79612: MINUS
79613: ST_TO_ADDR
// max_x := x + r ;
79614: LD_ADDR_VAR 0 9
79618: PUSH
79619: LD_VAR 0 2
79623: PUSH
79624: LD_VAR 0 4
79628: PLUS
79629: ST_TO_ADDR
// max_y := y + r ;
79630: LD_ADDR_VAR 0 10
79634: PUSH
79635: LD_VAR 0 3
79639: PUSH
79640: LD_VAR 0 4
79644: PLUS
79645: ST_TO_ADDR
// for _x = min_x to max_x do
79646: LD_ADDR_VAR 0 11
79650: PUSH
79651: DOUBLE
79652: LD_VAR 0 7
79656: DEC
79657: ST_TO_ADDR
79658: LD_VAR 0 9
79662: PUSH
79663: FOR_TO
79664: IFFALSE 79781
// for _y = min_y to max_y do
79666: LD_ADDR_VAR 0 12
79670: PUSH
79671: DOUBLE
79672: LD_VAR 0 8
79676: DEC
79677: ST_TO_ADDR
79678: LD_VAR 0 10
79682: PUSH
79683: FOR_TO
79684: IFFALSE 79777
// begin if not ValidHex ( _x , _y ) then
79686: LD_VAR 0 11
79690: PPUSH
79691: LD_VAR 0 12
79695: PPUSH
79696: CALL_OW 488
79700: NOT
79701: IFFALSE 79705
// continue ;
79703: GO 79683
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79705: LD_VAR 0 11
79709: PPUSH
79710: LD_VAR 0 12
79714: PPUSH
79715: CALL_OW 351
79719: PUSH
79720: LD_VAR 0 11
79724: PPUSH
79725: LD_VAR 0 12
79729: PPUSH
79730: CALL_OW 554
79734: AND
79735: IFFALSE 79775
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79737: LD_ADDR_VAR 0 13
79741: PUSH
79742: LD_VAR 0 13
79746: PPUSH
79747: LD_VAR 0 13
79751: PUSH
79752: LD_INT 1
79754: PLUS
79755: PPUSH
79756: LD_VAR 0 11
79760: PUSH
79761: LD_VAR 0 12
79765: PUSH
79766: EMPTY
79767: LIST
79768: LIST
79769: PPUSH
79770: CALL_OW 2
79774: ST_TO_ADDR
// end ;
79775: GO 79683
79777: POP
79778: POP
79779: GO 79663
79781: POP
79782: POP
// if not list then
79783: LD_VAR 0 13
79787: NOT
79788: IFFALSE 79792
// exit ;
79790: GO 79863
// for i in list do
79792: LD_ADDR_VAR 0 6
79796: PUSH
79797: LD_VAR 0 13
79801: PUSH
79802: FOR_IN
79803: IFFALSE 79861
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79805: LD_VAR 0 1
79809: PPUSH
79810: LD_STRING M
79812: PUSH
79813: LD_VAR 0 6
79817: PUSH
79818: LD_INT 1
79820: ARRAY
79821: PUSH
79822: LD_VAR 0 6
79826: PUSH
79827: LD_INT 2
79829: ARRAY
79830: PUSH
79831: LD_INT 0
79833: PUSH
79834: LD_INT 0
79836: PUSH
79837: LD_INT 0
79839: PUSH
79840: LD_INT 0
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: LIST
79847: LIST
79848: LIST
79849: LIST
79850: LIST
79851: PUSH
79852: EMPTY
79853: LIST
79854: PPUSH
79855: CALL_OW 447
79859: GO 79802
79861: POP
79862: POP
// end ;
79863: LD_VAR 0 5
79867: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79868: LD_INT 0
79870: PPUSH
79871: PPUSH
79872: PPUSH
79873: PPUSH
79874: PPUSH
79875: PPUSH
79876: PPUSH
79877: PPUSH
79878: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
79879: LD_VAR 0 1
79883: PPUSH
79884: CALL_OW 302
79888: NOT
79889: PUSH
79890: LD_VAR 0 2
79894: PPUSH
79895: LD_VAR 0 3
79899: PPUSH
79900: CALL_OW 488
79904: NOT
79905: OR
79906: PUSH
79907: LD_VAR 0 4
79911: NOT
79912: OR
79913: IFFALSE 79917
// exit ;
79915: GO 80265
// list := [ ] ;
79917: LD_ADDR_VAR 0 13
79921: PUSH
79922: EMPTY
79923: ST_TO_ADDR
// if x - r < 0 then
79924: LD_VAR 0 2
79928: PUSH
79929: LD_VAR 0 4
79933: MINUS
79934: PUSH
79935: LD_INT 0
79937: LESS
79938: IFFALSE 79950
// min_x := 0 else
79940: LD_ADDR_VAR 0 7
79944: PUSH
79945: LD_INT 0
79947: ST_TO_ADDR
79948: GO 79966
// min_x := x - r ;
79950: LD_ADDR_VAR 0 7
79954: PUSH
79955: LD_VAR 0 2
79959: PUSH
79960: LD_VAR 0 4
79964: MINUS
79965: ST_TO_ADDR
// if y - r < 0 then
79966: LD_VAR 0 3
79970: PUSH
79971: LD_VAR 0 4
79975: MINUS
79976: PUSH
79977: LD_INT 0
79979: LESS
79980: IFFALSE 79992
// min_y := 0 else
79982: LD_ADDR_VAR 0 8
79986: PUSH
79987: LD_INT 0
79989: ST_TO_ADDR
79990: GO 80008
// min_y := y - r ;
79992: LD_ADDR_VAR 0 8
79996: PUSH
79997: LD_VAR 0 3
80001: PUSH
80002: LD_VAR 0 4
80006: MINUS
80007: ST_TO_ADDR
// max_x := x + r ;
80008: LD_ADDR_VAR 0 9
80012: PUSH
80013: LD_VAR 0 2
80017: PUSH
80018: LD_VAR 0 4
80022: PLUS
80023: ST_TO_ADDR
// max_y := y + r ;
80024: LD_ADDR_VAR 0 10
80028: PUSH
80029: LD_VAR 0 3
80033: PUSH
80034: LD_VAR 0 4
80038: PLUS
80039: ST_TO_ADDR
// for _x = min_x to max_x do
80040: LD_ADDR_VAR 0 11
80044: PUSH
80045: DOUBLE
80046: LD_VAR 0 7
80050: DEC
80051: ST_TO_ADDR
80052: LD_VAR 0 9
80056: PUSH
80057: FOR_TO
80058: IFFALSE 80175
// for _y = min_y to max_y do
80060: LD_ADDR_VAR 0 12
80064: PUSH
80065: DOUBLE
80066: LD_VAR 0 8
80070: DEC
80071: ST_TO_ADDR
80072: LD_VAR 0 10
80076: PUSH
80077: FOR_TO
80078: IFFALSE 80171
// begin if not ValidHex ( _x , _y ) then
80080: LD_VAR 0 11
80084: PPUSH
80085: LD_VAR 0 12
80089: PPUSH
80090: CALL_OW 488
80094: NOT
80095: IFFALSE 80099
// continue ;
80097: GO 80077
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
80099: LD_VAR 0 11
80103: PPUSH
80104: LD_VAR 0 12
80108: PPUSH
80109: CALL_OW 351
80113: PUSH
80114: LD_VAR 0 11
80118: PPUSH
80119: LD_VAR 0 12
80123: PPUSH
80124: CALL_OW 554
80128: AND
80129: IFFALSE 80169
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
80131: LD_ADDR_VAR 0 13
80135: PUSH
80136: LD_VAR 0 13
80140: PPUSH
80141: LD_VAR 0 13
80145: PUSH
80146: LD_INT 1
80148: PLUS
80149: PPUSH
80150: LD_VAR 0 11
80154: PUSH
80155: LD_VAR 0 12
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: PPUSH
80164: CALL_OW 2
80168: ST_TO_ADDR
// end ;
80169: GO 80077
80171: POP
80172: POP
80173: GO 80057
80175: POP
80176: POP
// if not list then
80177: LD_VAR 0 13
80181: NOT
80182: IFFALSE 80186
// exit ;
80184: GO 80265
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
80186: LD_ADDR_VAR 0 13
80190: PUSH
80191: LD_VAR 0 1
80195: PPUSH
80196: LD_VAR 0 13
80200: PPUSH
80201: LD_INT 1
80203: PPUSH
80204: LD_INT 1
80206: PPUSH
80207: CALL 25894 0 4
80211: ST_TO_ADDR
// ComStop ( flame ) ;
80212: LD_VAR 0 1
80216: PPUSH
80217: CALL_OW 141
// for i in list do
80221: LD_ADDR_VAR 0 6
80225: PUSH
80226: LD_VAR 0 13
80230: PUSH
80231: FOR_IN
80232: IFFALSE 80263
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
80234: LD_VAR 0 1
80238: PPUSH
80239: LD_VAR 0 6
80243: PUSH
80244: LD_INT 1
80246: ARRAY
80247: PPUSH
80248: LD_VAR 0 6
80252: PUSH
80253: LD_INT 2
80255: ARRAY
80256: PPUSH
80257: CALL_OW 176
80261: GO 80231
80263: POP
80264: POP
// end ;
80265: LD_VAR 0 5
80269: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
80270: LD_EXP 107
80274: NOT
80275: IFFALSE 80325
80277: GO 80279
80279: DISABLE
// begin initHack := true ;
80280: LD_ADDR_EXP 107
80284: PUSH
80285: LD_INT 1
80287: ST_TO_ADDR
// hackTanks := [ ] ;
80288: LD_ADDR_EXP 108
80292: PUSH
80293: EMPTY
80294: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
80295: LD_ADDR_EXP 109
80299: PUSH
80300: EMPTY
80301: ST_TO_ADDR
// hackLimit := 3 ;
80302: LD_ADDR_EXP 110
80306: PUSH
80307: LD_INT 3
80309: ST_TO_ADDR
// hackDist := 12 ;
80310: LD_ADDR_EXP 111
80314: PUSH
80315: LD_INT 12
80317: ST_TO_ADDR
// hackCounter := [ ] ;
80318: LD_ADDR_EXP 112
80322: PUSH
80323: EMPTY
80324: ST_TO_ADDR
// end ;
80325: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
80326: LD_EXP 107
80330: PUSH
80331: LD_INT 34
80333: PUSH
80334: LD_INT 99
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: PPUSH
80341: CALL_OW 69
80345: AND
80346: IFFALSE 80599
80348: GO 80350
80350: DISABLE
80351: LD_INT 0
80353: PPUSH
80354: PPUSH
// begin enable ;
80355: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
80356: LD_ADDR_VAR 0 1
80360: PUSH
80361: LD_INT 34
80363: PUSH
80364: LD_INT 99
80366: PUSH
80367: EMPTY
80368: LIST
80369: LIST
80370: PPUSH
80371: CALL_OW 69
80375: PUSH
80376: FOR_IN
80377: IFFALSE 80597
// begin if not i in hackTanks then
80379: LD_VAR 0 1
80383: PUSH
80384: LD_EXP 108
80388: IN
80389: NOT
80390: IFFALSE 80473
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
80392: LD_ADDR_EXP 108
80396: PUSH
80397: LD_EXP 108
80401: PPUSH
80402: LD_EXP 108
80406: PUSH
80407: LD_INT 1
80409: PLUS
80410: PPUSH
80411: LD_VAR 0 1
80415: PPUSH
80416: CALL_OW 1
80420: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
80421: LD_ADDR_EXP 109
80425: PUSH
80426: LD_EXP 109
80430: PPUSH
80431: LD_EXP 109
80435: PUSH
80436: LD_INT 1
80438: PLUS
80439: PPUSH
80440: EMPTY
80441: PPUSH
80442: CALL_OW 1
80446: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
80447: LD_ADDR_EXP 112
80451: PUSH
80452: LD_EXP 112
80456: PPUSH
80457: LD_EXP 112
80461: PUSH
80462: LD_INT 1
80464: PLUS
80465: PPUSH
80466: EMPTY
80467: PPUSH
80468: CALL_OW 1
80472: ST_TO_ADDR
// end ; if not IsOk ( i ) then
80473: LD_VAR 0 1
80477: PPUSH
80478: CALL_OW 302
80482: NOT
80483: IFFALSE 80496
// begin HackUnlinkAll ( i ) ;
80485: LD_VAR 0 1
80489: PPUSH
80490: CALL 80602 0 1
// continue ;
80494: GO 80376
// end ; HackCheckCapturedStatus ( i ) ;
80496: LD_VAR 0 1
80500: PPUSH
80501: CALL 81045 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
80505: LD_ADDR_VAR 0 2
80509: PUSH
80510: LD_INT 81
80512: PUSH
80513: LD_VAR 0 1
80517: PPUSH
80518: CALL_OW 255
80522: PUSH
80523: EMPTY
80524: LIST
80525: LIST
80526: PUSH
80527: LD_INT 33
80529: PUSH
80530: LD_INT 3
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: PUSH
80537: LD_INT 91
80539: PUSH
80540: LD_VAR 0 1
80544: PUSH
80545: LD_EXP 111
80549: PUSH
80550: EMPTY
80551: LIST
80552: LIST
80553: LIST
80554: PUSH
80555: LD_INT 50
80557: PUSH
80558: EMPTY
80559: LIST
80560: PUSH
80561: EMPTY
80562: LIST
80563: LIST
80564: LIST
80565: LIST
80566: PPUSH
80567: CALL_OW 69
80571: ST_TO_ADDR
// if not tmp then
80572: LD_VAR 0 2
80576: NOT
80577: IFFALSE 80581
// continue ;
80579: GO 80376
// HackLink ( i , tmp ) ;
80581: LD_VAR 0 1
80585: PPUSH
80586: LD_VAR 0 2
80590: PPUSH
80591: CALL 80738 0 2
// end ;
80595: GO 80376
80597: POP
80598: POP
// end ;
80599: PPOPN 2
80601: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
80602: LD_INT 0
80604: PPUSH
80605: PPUSH
80606: PPUSH
// if not hack in hackTanks then
80607: LD_VAR 0 1
80611: PUSH
80612: LD_EXP 108
80616: IN
80617: NOT
80618: IFFALSE 80622
// exit ;
80620: GO 80733
// index := GetElementIndex ( hackTanks , hack ) ;
80622: LD_ADDR_VAR 0 4
80626: PUSH
80627: LD_EXP 108
80631: PPUSH
80632: LD_VAR 0 1
80636: PPUSH
80637: CALL 25191 0 2
80641: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80642: LD_EXP 109
80646: PUSH
80647: LD_VAR 0 4
80651: ARRAY
80652: IFFALSE 80733
// begin for i in hackTanksCaptured [ index ] do
80654: LD_ADDR_VAR 0 3
80658: PUSH
80659: LD_EXP 109
80663: PUSH
80664: LD_VAR 0 4
80668: ARRAY
80669: PUSH
80670: FOR_IN
80671: IFFALSE 80697
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80673: LD_VAR 0 3
80677: PUSH
80678: LD_INT 1
80680: ARRAY
80681: PPUSH
80682: LD_VAR 0 3
80686: PUSH
80687: LD_INT 2
80689: ARRAY
80690: PPUSH
80691: CALL_OW 235
80695: GO 80670
80697: POP
80698: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80699: LD_ADDR_EXP 109
80703: PUSH
80704: LD_EXP 109
80708: PPUSH
80709: LD_VAR 0 4
80713: PPUSH
80714: EMPTY
80715: PPUSH
80716: CALL_OW 1
80720: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80721: LD_VAR 0 1
80725: PPUSH
80726: LD_INT 0
80728: PPUSH
80729: CALL_OW 505
// end ; end ;
80733: LD_VAR 0 2
80737: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80738: LD_INT 0
80740: PPUSH
80741: PPUSH
80742: PPUSH
// if not hack in hackTanks or not vehicles then
80743: LD_VAR 0 1
80747: PUSH
80748: LD_EXP 108
80752: IN
80753: NOT
80754: PUSH
80755: LD_VAR 0 2
80759: NOT
80760: OR
80761: IFFALSE 80765
// exit ;
80763: GO 81040
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80765: LD_ADDR_VAR 0 2
80769: PUSH
80770: LD_VAR 0 1
80774: PPUSH
80775: LD_VAR 0 2
80779: PPUSH
80780: LD_INT 1
80782: PPUSH
80783: LD_INT 1
80785: PPUSH
80786: CALL 25841 0 4
80790: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80791: LD_ADDR_VAR 0 5
80795: PUSH
80796: LD_EXP 108
80800: PPUSH
80801: LD_VAR 0 1
80805: PPUSH
80806: CALL 25191 0 2
80810: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80811: LD_EXP 109
80815: PUSH
80816: LD_VAR 0 5
80820: ARRAY
80821: PUSH
80822: LD_EXP 110
80826: LESS
80827: IFFALSE 81016
// begin for i := 1 to vehicles do
80829: LD_ADDR_VAR 0 4
80833: PUSH
80834: DOUBLE
80835: LD_INT 1
80837: DEC
80838: ST_TO_ADDR
80839: LD_VAR 0 2
80843: PUSH
80844: FOR_TO
80845: IFFALSE 81014
// begin if hackTanksCaptured [ index ] = hackLimit then
80847: LD_EXP 109
80851: PUSH
80852: LD_VAR 0 5
80856: ARRAY
80857: PUSH
80858: LD_EXP 110
80862: EQUAL
80863: IFFALSE 80867
// break ;
80865: GO 81014
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80867: LD_ADDR_EXP 112
80871: PUSH
80872: LD_EXP 112
80876: PPUSH
80877: LD_VAR 0 5
80881: PPUSH
80882: LD_EXP 112
80886: PUSH
80887: LD_VAR 0 5
80891: ARRAY
80892: PUSH
80893: LD_INT 1
80895: PLUS
80896: PPUSH
80897: CALL_OW 1
80901: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80902: LD_ADDR_EXP 109
80906: PUSH
80907: LD_EXP 109
80911: PPUSH
80912: LD_VAR 0 5
80916: PUSH
80917: LD_EXP 109
80921: PUSH
80922: LD_VAR 0 5
80926: ARRAY
80927: PUSH
80928: LD_INT 1
80930: PLUS
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: PPUSH
80936: LD_VAR 0 2
80940: PUSH
80941: LD_VAR 0 4
80945: ARRAY
80946: PUSH
80947: LD_VAR 0 2
80951: PUSH
80952: LD_VAR 0 4
80956: ARRAY
80957: PPUSH
80958: CALL_OW 255
80962: PUSH
80963: EMPTY
80964: LIST
80965: LIST
80966: PPUSH
80967: CALL 25406 0 3
80971: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80972: LD_VAR 0 2
80976: PUSH
80977: LD_VAR 0 4
80981: ARRAY
80982: PPUSH
80983: LD_VAR 0 1
80987: PPUSH
80988: CALL_OW 255
80992: PPUSH
80993: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80997: LD_VAR 0 2
81001: PUSH
81002: LD_VAR 0 4
81006: ARRAY
81007: PPUSH
81008: CALL_OW 141
// end ;
81012: GO 80844
81014: POP
81015: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
81016: LD_VAR 0 1
81020: PPUSH
81021: LD_EXP 109
81025: PUSH
81026: LD_VAR 0 5
81030: ARRAY
81031: PUSH
81032: LD_INT 0
81034: PLUS
81035: PPUSH
81036: CALL_OW 505
// end ;
81040: LD_VAR 0 3
81044: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
81045: LD_INT 0
81047: PPUSH
81048: PPUSH
81049: PPUSH
81050: PPUSH
// if not hack in hackTanks then
81051: LD_VAR 0 1
81055: PUSH
81056: LD_EXP 108
81060: IN
81061: NOT
81062: IFFALSE 81066
// exit ;
81064: GO 81306
// index := GetElementIndex ( hackTanks , hack ) ;
81066: LD_ADDR_VAR 0 4
81070: PUSH
81071: LD_EXP 108
81075: PPUSH
81076: LD_VAR 0 1
81080: PPUSH
81081: CALL 25191 0 2
81085: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
81086: LD_ADDR_VAR 0 3
81090: PUSH
81091: DOUBLE
81092: LD_EXP 109
81096: PUSH
81097: LD_VAR 0 4
81101: ARRAY
81102: INC
81103: ST_TO_ADDR
81104: LD_INT 1
81106: PUSH
81107: FOR_DOWNTO
81108: IFFALSE 81280
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
81110: LD_ADDR_VAR 0 5
81114: PUSH
81115: LD_EXP 109
81119: PUSH
81120: LD_VAR 0 4
81124: ARRAY
81125: PUSH
81126: LD_VAR 0 3
81130: ARRAY
81131: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
81132: LD_VAR 0 5
81136: PUSH
81137: LD_INT 1
81139: ARRAY
81140: PPUSH
81141: CALL_OW 302
81145: NOT
81146: PUSH
81147: LD_VAR 0 5
81151: PUSH
81152: LD_INT 1
81154: ARRAY
81155: PPUSH
81156: CALL_OW 255
81160: PUSH
81161: LD_VAR 0 1
81165: PPUSH
81166: CALL_OW 255
81170: NONEQUAL
81171: OR
81172: IFFALSE 81278
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
81174: LD_VAR 0 5
81178: PUSH
81179: LD_INT 1
81181: ARRAY
81182: PPUSH
81183: CALL_OW 305
81187: PUSH
81188: LD_VAR 0 5
81192: PUSH
81193: LD_INT 1
81195: ARRAY
81196: PPUSH
81197: CALL_OW 255
81201: PUSH
81202: LD_VAR 0 1
81206: PPUSH
81207: CALL_OW 255
81211: EQUAL
81212: AND
81213: IFFALSE 81237
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
81215: LD_VAR 0 5
81219: PUSH
81220: LD_INT 1
81222: ARRAY
81223: PPUSH
81224: LD_VAR 0 5
81228: PUSH
81229: LD_INT 2
81231: ARRAY
81232: PPUSH
81233: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
81237: LD_ADDR_EXP 109
81241: PUSH
81242: LD_EXP 109
81246: PPUSH
81247: LD_VAR 0 4
81251: PPUSH
81252: LD_EXP 109
81256: PUSH
81257: LD_VAR 0 4
81261: ARRAY
81262: PPUSH
81263: LD_VAR 0 3
81267: PPUSH
81268: CALL_OW 3
81272: PPUSH
81273: CALL_OW 1
81277: ST_TO_ADDR
// end ; end ;
81278: GO 81107
81280: POP
81281: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
81282: LD_VAR 0 1
81286: PPUSH
81287: LD_EXP 109
81291: PUSH
81292: LD_VAR 0 4
81296: ARRAY
81297: PUSH
81298: LD_INT 0
81300: PLUS
81301: PPUSH
81302: CALL_OW 505
// end ;
81306: LD_VAR 0 2
81310: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
81311: LD_INT 0
81313: PPUSH
81314: PPUSH
81315: PPUSH
81316: PPUSH
// if not hack in hackTanks then
81317: LD_VAR 0 1
81321: PUSH
81322: LD_EXP 108
81326: IN
81327: NOT
81328: IFFALSE 81332
// exit ;
81330: GO 81417
// index := GetElementIndex ( hackTanks , hack ) ;
81332: LD_ADDR_VAR 0 5
81336: PUSH
81337: LD_EXP 108
81341: PPUSH
81342: LD_VAR 0 1
81346: PPUSH
81347: CALL 25191 0 2
81351: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
81352: LD_ADDR_VAR 0 4
81356: PUSH
81357: DOUBLE
81358: LD_INT 1
81360: DEC
81361: ST_TO_ADDR
81362: LD_EXP 109
81366: PUSH
81367: LD_VAR 0 5
81371: ARRAY
81372: PUSH
81373: FOR_TO
81374: IFFALSE 81415
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
81376: LD_EXP 109
81380: PUSH
81381: LD_VAR 0 5
81385: ARRAY
81386: PUSH
81387: LD_VAR 0 4
81391: ARRAY
81392: PUSH
81393: LD_INT 1
81395: ARRAY
81396: PUSH
81397: LD_VAR 0 2
81401: EQUAL
81402: IFFALSE 81413
// KillUnit ( vehicle ) ;
81404: LD_VAR 0 2
81408: PPUSH
81409: CALL_OW 66
81413: GO 81373
81415: POP
81416: POP
// end ;
81417: LD_VAR 0 3
81421: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
81422: LD_EXP 113
81426: NOT
81427: IFFALSE 81462
81429: GO 81431
81431: DISABLE
// begin initMiner := true ;
81432: LD_ADDR_EXP 113
81436: PUSH
81437: LD_INT 1
81439: ST_TO_ADDR
// minersList := [ ] ;
81440: LD_ADDR_EXP 114
81444: PUSH
81445: EMPTY
81446: ST_TO_ADDR
// minerMinesList := [ ] ;
81447: LD_ADDR_EXP 115
81451: PUSH
81452: EMPTY
81453: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
81454: LD_ADDR_EXP 116
81458: PUSH
81459: LD_INT 5
81461: ST_TO_ADDR
// end ;
81462: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
81463: LD_EXP 113
81467: PUSH
81468: LD_INT 34
81470: PUSH
81471: LD_INT 81
81473: PUSH
81474: EMPTY
81475: LIST
81476: LIST
81477: PPUSH
81478: CALL_OW 69
81482: AND
81483: IFFALSE 81944
81485: GO 81487
81487: DISABLE
81488: LD_INT 0
81490: PPUSH
81491: PPUSH
81492: PPUSH
81493: PPUSH
// begin enable ;
81494: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
81495: LD_ADDR_VAR 0 1
81499: PUSH
81500: LD_INT 34
81502: PUSH
81503: LD_INT 81
81505: PUSH
81506: EMPTY
81507: LIST
81508: LIST
81509: PPUSH
81510: CALL_OW 69
81514: PUSH
81515: FOR_IN
81516: IFFALSE 81588
// begin if not i in minersList then
81518: LD_VAR 0 1
81522: PUSH
81523: LD_EXP 114
81527: IN
81528: NOT
81529: IFFALSE 81586
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
81531: LD_ADDR_EXP 114
81535: PUSH
81536: LD_EXP 114
81540: PPUSH
81541: LD_EXP 114
81545: PUSH
81546: LD_INT 1
81548: PLUS
81549: PPUSH
81550: LD_VAR 0 1
81554: PPUSH
81555: CALL_OW 1
81559: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81560: LD_ADDR_EXP 115
81564: PUSH
81565: LD_EXP 115
81569: PPUSH
81570: LD_EXP 115
81574: PUSH
81575: LD_INT 1
81577: PLUS
81578: PPUSH
81579: EMPTY
81580: PPUSH
81581: CALL_OW 1
81585: ST_TO_ADDR
// end end ;
81586: GO 81515
81588: POP
81589: POP
// for i := minerMinesList downto 1 do
81590: LD_ADDR_VAR 0 1
81594: PUSH
81595: DOUBLE
81596: LD_EXP 115
81600: INC
81601: ST_TO_ADDR
81602: LD_INT 1
81604: PUSH
81605: FOR_DOWNTO
81606: IFFALSE 81942
// begin if IsLive ( minersList [ i ] ) then
81608: LD_EXP 114
81612: PUSH
81613: LD_VAR 0 1
81617: ARRAY
81618: PPUSH
81619: CALL_OW 300
81623: IFFALSE 81651
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
81625: LD_EXP 114
81629: PUSH
81630: LD_VAR 0 1
81634: ARRAY
81635: PPUSH
81636: LD_EXP 115
81640: PUSH
81641: LD_VAR 0 1
81645: ARRAY
81646: PPUSH
81647: CALL_OW 505
// if not minerMinesList [ i ] then
81651: LD_EXP 115
81655: PUSH
81656: LD_VAR 0 1
81660: ARRAY
81661: NOT
81662: IFFALSE 81666
// continue ;
81664: GO 81605
// for j := minerMinesList [ i ] downto 1 do
81666: LD_ADDR_VAR 0 2
81670: PUSH
81671: DOUBLE
81672: LD_EXP 115
81676: PUSH
81677: LD_VAR 0 1
81681: ARRAY
81682: INC
81683: ST_TO_ADDR
81684: LD_INT 1
81686: PUSH
81687: FOR_DOWNTO
81688: IFFALSE 81938
// begin side := GetSide ( minersList [ i ] ) ;
81690: LD_ADDR_VAR 0 3
81694: PUSH
81695: LD_EXP 114
81699: PUSH
81700: LD_VAR 0 1
81704: ARRAY
81705: PPUSH
81706: CALL_OW 255
81710: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81711: LD_ADDR_VAR 0 4
81715: PUSH
81716: LD_EXP 115
81720: PUSH
81721: LD_VAR 0 1
81725: ARRAY
81726: PUSH
81727: LD_VAR 0 2
81731: ARRAY
81732: PUSH
81733: LD_INT 1
81735: ARRAY
81736: PPUSH
81737: LD_EXP 115
81741: PUSH
81742: LD_VAR 0 1
81746: ARRAY
81747: PUSH
81748: LD_VAR 0 2
81752: ARRAY
81753: PUSH
81754: LD_INT 2
81756: ARRAY
81757: PPUSH
81758: CALL_OW 428
81762: ST_TO_ADDR
// if not tmp then
81763: LD_VAR 0 4
81767: NOT
81768: IFFALSE 81772
// continue ;
81770: GO 81687
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81772: LD_VAR 0 4
81776: PUSH
81777: LD_INT 81
81779: PUSH
81780: LD_VAR 0 3
81784: PUSH
81785: EMPTY
81786: LIST
81787: LIST
81788: PPUSH
81789: CALL_OW 69
81793: IN
81794: PUSH
81795: LD_EXP 115
81799: PUSH
81800: LD_VAR 0 1
81804: ARRAY
81805: PUSH
81806: LD_VAR 0 2
81810: ARRAY
81811: PUSH
81812: LD_INT 1
81814: ARRAY
81815: PPUSH
81816: LD_EXP 115
81820: PUSH
81821: LD_VAR 0 1
81825: ARRAY
81826: PUSH
81827: LD_VAR 0 2
81831: ARRAY
81832: PUSH
81833: LD_INT 2
81835: ARRAY
81836: PPUSH
81837: CALL_OW 458
81841: AND
81842: IFFALSE 81936
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81844: LD_EXP 115
81848: PUSH
81849: LD_VAR 0 1
81853: ARRAY
81854: PUSH
81855: LD_VAR 0 2
81859: ARRAY
81860: PUSH
81861: LD_INT 1
81863: ARRAY
81864: PPUSH
81865: LD_EXP 115
81869: PUSH
81870: LD_VAR 0 1
81874: ARRAY
81875: PUSH
81876: LD_VAR 0 2
81880: ARRAY
81881: PUSH
81882: LD_INT 2
81884: ARRAY
81885: PPUSH
81886: LD_VAR 0 3
81890: PPUSH
81891: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81895: LD_ADDR_EXP 115
81899: PUSH
81900: LD_EXP 115
81904: PPUSH
81905: LD_VAR 0 1
81909: PPUSH
81910: LD_EXP 115
81914: PUSH
81915: LD_VAR 0 1
81919: ARRAY
81920: PPUSH
81921: LD_VAR 0 2
81925: PPUSH
81926: CALL_OW 3
81930: PPUSH
81931: CALL_OW 1
81935: ST_TO_ADDR
// end ; end ;
81936: GO 81687
81938: POP
81939: POP
// end ;
81940: GO 81605
81942: POP
81943: POP
// end ;
81944: PPOPN 4
81946: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
81947: LD_INT 0
81949: PPUSH
81950: PPUSH
// result := false ;
81951: LD_ADDR_VAR 0 4
81955: PUSH
81956: LD_INT 0
81958: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81959: LD_VAR 0 1
81963: PPUSH
81964: CALL_OW 264
81968: PUSH
81969: LD_INT 81
81971: EQUAL
81972: NOT
81973: IFFALSE 81977
// exit ;
81975: GO 82217
// index := GetElementIndex ( minersList , unit ) ;
81977: LD_ADDR_VAR 0 5
81981: PUSH
81982: LD_EXP 114
81986: PPUSH
81987: LD_VAR 0 1
81991: PPUSH
81992: CALL 25191 0 2
81996: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81997: LD_EXP 115
82001: PUSH
82002: LD_VAR 0 5
82006: ARRAY
82007: PUSH
82008: LD_EXP 116
82012: GREATEREQUAL
82013: IFFALSE 82017
// exit ;
82015: GO 82217
// ComMoveXY ( unit , x , y ) ;
82017: LD_VAR 0 1
82021: PPUSH
82022: LD_VAR 0 2
82026: PPUSH
82027: LD_VAR 0 3
82031: PPUSH
82032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82036: LD_INT 35
82038: PPUSH
82039: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
82043: LD_VAR 0 1
82047: PPUSH
82048: LD_VAR 0 2
82052: PPUSH
82053: LD_VAR 0 3
82057: PPUSH
82058: CALL 56943 0 3
82062: NOT
82063: PUSH
82064: LD_VAR 0 1
82068: PPUSH
82069: CALL_OW 314
82073: AND
82074: IFFALSE 82078
// exit ;
82076: GO 82217
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
82078: LD_VAR 0 2
82082: PPUSH
82083: LD_VAR 0 3
82087: PPUSH
82088: CALL_OW 428
82092: PUSH
82093: LD_VAR 0 1
82097: EQUAL
82098: PUSH
82099: LD_VAR 0 1
82103: PPUSH
82104: CALL_OW 314
82108: NOT
82109: AND
82110: IFFALSE 82036
// PlaySoundXY ( x , y , PlantMine ) ;
82112: LD_VAR 0 2
82116: PPUSH
82117: LD_VAR 0 3
82121: PPUSH
82122: LD_STRING PlantMine
82124: PPUSH
82125: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
82129: LD_VAR 0 2
82133: PPUSH
82134: LD_VAR 0 3
82138: PPUSH
82139: LD_VAR 0 1
82143: PPUSH
82144: CALL_OW 255
82148: PPUSH
82149: LD_INT 0
82151: PPUSH
82152: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
82156: LD_ADDR_EXP 115
82160: PUSH
82161: LD_EXP 115
82165: PPUSH
82166: LD_VAR 0 5
82170: PUSH
82171: LD_EXP 115
82175: PUSH
82176: LD_VAR 0 5
82180: ARRAY
82181: PUSH
82182: LD_INT 1
82184: PLUS
82185: PUSH
82186: EMPTY
82187: LIST
82188: LIST
82189: PPUSH
82190: LD_VAR 0 2
82194: PUSH
82195: LD_VAR 0 3
82199: PUSH
82200: EMPTY
82201: LIST
82202: LIST
82203: PPUSH
82204: CALL 25406 0 3
82208: ST_TO_ADDR
// result := true ;
82209: LD_ADDR_VAR 0 4
82213: PUSH
82214: LD_INT 1
82216: ST_TO_ADDR
// end ;
82217: LD_VAR 0 4
82221: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
82222: LD_INT 0
82224: PPUSH
82225: PPUSH
82226: PPUSH
// if not unit in minersList then
82227: LD_VAR 0 1
82231: PUSH
82232: LD_EXP 114
82236: IN
82237: NOT
82238: IFFALSE 82242
// exit ;
82240: GO 82634
// index := GetElementIndex ( minersList , unit ) ;
82242: LD_ADDR_VAR 0 6
82246: PUSH
82247: LD_EXP 114
82251: PPUSH
82252: LD_VAR 0 1
82256: PPUSH
82257: CALL 25191 0 2
82261: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
82262: LD_ADDR_VAR 0 5
82266: PUSH
82267: DOUBLE
82268: LD_EXP 115
82272: PUSH
82273: LD_VAR 0 6
82277: ARRAY
82278: INC
82279: ST_TO_ADDR
82280: LD_INT 1
82282: PUSH
82283: FOR_DOWNTO
82284: IFFALSE 82445
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
82286: LD_EXP 115
82290: PUSH
82291: LD_VAR 0 6
82295: ARRAY
82296: PUSH
82297: LD_VAR 0 5
82301: ARRAY
82302: PUSH
82303: LD_INT 1
82305: ARRAY
82306: PUSH
82307: LD_VAR 0 2
82311: EQUAL
82312: PUSH
82313: LD_EXP 115
82317: PUSH
82318: LD_VAR 0 6
82322: ARRAY
82323: PUSH
82324: LD_VAR 0 5
82328: ARRAY
82329: PUSH
82330: LD_INT 2
82332: ARRAY
82333: PUSH
82334: LD_VAR 0 3
82338: EQUAL
82339: AND
82340: IFFALSE 82443
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82342: LD_EXP 115
82346: PUSH
82347: LD_VAR 0 6
82351: ARRAY
82352: PUSH
82353: LD_VAR 0 5
82357: ARRAY
82358: PUSH
82359: LD_INT 1
82361: ARRAY
82362: PPUSH
82363: LD_EXP 115
82367: PUSH
82368: LD_VAR 0 6
82372: ARRAY
82373: PUSH
82374: LD_VAR 0 5
82378: ARRAY
82379: PUSH
82380: LD_INT 2
82382: ARRAY
82383: PPUSH
82384: LD_VAR 0 1
82388: PPUSH
82389: CALL_OW 255
82393: PPUSH
82394: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82398: LD_ADDR_EXP 115
82402: PUSH
82403: LD_EXP 115
82407: PPUSH
82408: LD_VAR 0 6
82412: PPUSH
82413: LD_EXP 115
82417: PUSH
82418: LD_VAR 0 6
82422: ARRAY
82423: PPUSH
82424: LD_VAR 0 5
82428: PPUSH
82429: CALL_OW 3
82433: PPUSH
82434: CALL_OW 1
82438: ST_TO_ADDR
// exit ;
82439: POP
82440: POP
82441: GO 82634
// end ; end ;
82443: GO 82283
82445: POP
82446: POP
// for i := minerMinesList [ index ] downto 1 do
82447: LD_ADDR_VAR 0 5
82451: PUSH
82452: DOUBLE
82453: LD_EXP 115
82457: PUSH
82458: LD_VAR 0 6
82462: ARRAY
82463: INC
82464: ST_TO_ADDR
82465: LD_INT 1
82467: PUSH
82468: FOR_DOWNTO
82469: IFFALSE 82632
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
82471: LD_EXP 115
82475: PUSH
82476: LD_VAR 0 6
82480: ARRAY
82481: PUSH
82482: LD_VAR 0 5
82486: ARRAY
82487: PUSH
82488: LD_INT 1
82490: ARRAY
82491: PPUSH
82492: LD_EXP 115
82496: PUSH
82497: LD_VAR 0 6
82501: ARRAY
82502: PUSH
82503: LD_VAR 0 5
82507: ARRAY
82508: PUSH
82509: LD_INT 2
82511: ARRAY
82512: PPUSH
82513: LD_VAR 0 2
82517: PPUSH
82518: LD_VAR 0 3
82522: PPUSH
82523: CALL_OW 298
82527: PUSH
82528: LD_INT 6
82530: LESS
82531: IFFALSE 82630
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82533: LD_EXP 115
82537: PUSH
82538: LD_VAR 0 6
82542: ARRAY
82543: PUSH
82544: LD_VAR 0 5
82548: ARRAY
82549: PUSH
82550: LD_INT 1
82552: ARRAY
82553: PPUSH
82554: LD_EXP 115
82558: PUSH
82559: LD_VAR 0 6
82563: ARRAY
82564: PUSH
82565: LD_VAR 0 5
82569: ARRAY
82570: PUSH
82571: LD_INT 2
82573: ARRAY
82574: PPUSH
82575: LD_VAR 0 1
82579: PPUSH
82580: CALL_OW 255
82584: PPUSH
82585: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82589: LD_ADDR_EXP 115
82593: PUSH
82594: LD_EXP 115
82598: PPUSH
82599: LD_VAR 0 6
82603: PPUSH
82604: LD_EXP 115
82608: PUSH
82609: LD_VAR 0 6
82613: ARRAY
82614: PPUSH
82615: LD_VAR 0 5
82619: PPUSH
82620: CALL_OW 3
82624: PPUSH
82625: CALL_OW 1
82629: ST_TO_ADDR
// end ; end ;
82630: GO 82468
82632: POP
82633: POP
// end ;
82634: LD_VAR 0 4
82638: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82639: LD_INT 0
82641: PPUSH
82642: PPUSH
82643: PPUSH
82644: PPUSH
82645: PPUSH
82646: PPUSH
82647: PPUSH
82648: PPUSH
82649: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82650: LD_VAR 0 1
82654: PPUSH
82655: CALL_OW 264
82659: PUSH
82660: LD_INT 81
82662: EQUAL
82663: NOT
82664: PUSH
82665: LD_VAR 0 1
82669: PUSH
82670: LD_EXP 114
82674: IN
82675: NOT
82676: OR
82677: IFFALSE 82681
// exit ;
82679: GO 83003
// index := GetElementIndex ( minersList , unit ) ;
82681: LD_ADDR_VAR 0 6
82685: PUSH
82686: LD_EXP 114
82690: PPUSH
82691: LD_VAR 0 1
82695: PPUSH
82696: CALL 25191 0 2
82700: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82701: LD_ADDR_VAR 0 8
82705: PUSH
82706: LD_EXP 116
82710: PUSH
82711: LD_EXP 115
82715: PUSH
82716: LD_VAR 0 6
82720: ARRAY
82721: MINUS
82722: ST_TO_ADDR
// if not minesFreeAmount then
82723: LD_VAR 0 8
82727: NOT
82728: IFFALSE 82732
// exit ;
82730: GO 83003
// tmp := [ ] ;
82732: LD_ADDR_VAR 0 7
82736: PUSH
82737: EMPTY
82738: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82739: LD_ADDR_VAR 0 5
82743: PUSH
82744: DOUBLE
82745: LD_INT 1
82747: DEC
82748: ST_TO_ADDR
82749: LD_VAR 0 8
82753: PUSH
82754: FOR_TO
82755: IFFALSE 82950
// begin _d := rand ( 0 , 5 ) ;
82757: LD_ADDR_VAR 0 11
82761: PUSH
82762: LD_INT 0
82764: PPUSH
82765: LD_INT 5
82767: PPUSH
82768: CALL_OW 12
82772: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82773: LD_ADDR_VAR 0 12
82777: PUSH
82778: LD_INT 2
82780: PPUSH
82781: LD_INT 6
82783: PPUSH
82784: CALL_OW 12
82788: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82789: LD_ADDR_VAR 0 9
82793: PUSH
82794: LD_VAR 0 2
82798: PPUSH
82799: LD_VAR 0 11
82803: PPUSH
82804: LD_VAR 0 12
82808: PPUSH
82809: CALL_OW 272
82813: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82814: LD_ADDR_VAR 0 10
82818: PUSH
82819: LD_VAR 0 3
82823: PPUSH
82824: LD_VAR 0 11
82828: PPUSH
82829: LD_VAR 0 12
82833: PPUSH
82834: CALL_OW 273
82838: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82839: LD_VAR 0 9
82843: PPUSH
82844: LD_VAR 0 10
82848: PPUSH
82849: CALL_OW 488
82853: PUSH
82854: LD_VAR 0 9
82858: PUSH
82859: LD_VAR 0 10
82863: PUSH
82864: EMPTY
82865: LIST
82866: LIST
82867: PUSH
82868: LD_VAR 0 7
82872: IN
82873: NOT
82874: AND
82875: PUSH
82876: LD_VAR 0 9
82880: PPUSH
82881: LD_VAR 0 10
82885: PPUSH
82886: CALL_OW 458
82890: NOT
82891: AND
82892: IFFALSE 82934
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82894: LD_ADDR_VAR 0 7
82898: PUSH
82899: LD_VAR 0 7
82903: PPUSH
82904: LD_VAR 0 7
82908: PUSH
82909: LD_INT 1
82911: PLUS
82912: PPUSH
82913: LD_VAR 0 9
82917: PUSH
82918: LD_VAR 0 10
82922: PUSH
82923: EMPTY
82924: LIST
82925: LIST
82926: PPUSH
82927: CALL_OW 1
82931: ST_TO_ADDR
82932: GO 82948
// i := i - 1 ;
82934: LD_ADDR_VAR 0 5
82938: PUSH
82939: LD_VAR 0 5
82943: PUSH
82944: LD_INT 1
82946: MINUS
82947: ST_TO_ADDR
// end ;
82948: GO 82754
82950: POP
82951: POP
// for i in tmp do
82952: LD_ADDR_VAR 0 5
82956: PUSH
82957: LD_VAR 0 7
82961: PUSH
82962: FOR_IN
82963: IFFALSE 83001
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82965: LD_VAR 0 1
82969: PPUSH
82970: LD_VAR 0 5
82974: PUSH
82975: LD_INT 1
82977: ARRAY
82978: PPUSH
82979: LD_VAR 0 5
82983: PUSH
82984: LD_INT 2
82986: ARRAY
82987: PPUSH
82988: CALL 81947 0 3
82992: NOT
82993: IFFALSE 82999
// exit ;
82995: POP
82996: POP
82997: GO 83003
82999: GO 82962
83001: POP
83002: POP
// end ;
83003: LD_VAR 0 4
83007: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
83008: LD_INT 0
83010: PPUSH
83011: PPUSH
83012: PPUSH
83013: PPUSH
83014: PPUSH
83015: PPUSH
83016: PPUSH
// if not GetClass ( unit ) = class_sniper then
83017: LD_VAR 0 1
83021: PPUSH
83022: CALL_OW 257
83026: PUSH
83027: LD_INT 5
83029: EQUAL
83030: NOT
83031: IFFALSE 83035
// exit ;
83033: GO 83423
// dist := 8 ;
83035: LD_ADDR_VAR 0 5
83039: PUSH
83040: LD_INT 8
83042: ST_TO_ADDR
// viewRange := 12 ;
83043: LD_ADDR_VAR 0 7
83047: PUSH
83048: LD_INT 12
83050: ST_TO_ADDR
// side := GetSide ( unit ) ;
83051: LD_ADDR_VAR 0 6
83055: PUSH
83056: LD_VAR 0 1
83060: PPUSH
83061: CALL_OW 255
83065: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
83066: LD_INT 61
83068: PPUSH
83069: LD_VAR 0 6
83073: PPUSH
83074: CALL_OW 321
83078: PUSH
83079: LD_INT 2
83081: EQUAL
83082: IFFALSE 83092
// viewRange := 16 ;
83084: LD_ADDR_VAR 0 7
83088: PUSH
83089: LD_INT 16
83091: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
83092: LD_VAR 0 1
83096: PPUSH
83097: LD_VAR 0 2
83101: PPUSH
83102: LD_VAR 0 3
83106: PPUSH
83107: CALL_OW 297
83111: PUSH
83112: LD_VAR 0 5
83116: GREATER
83117: IFFALSE 83196
// begin ComMoveXY ( unit , x , y ) ;
83119: LD_VAR 0 1
83123: PPUSH
83124: LD_VAR 0 2
83128: PPUSH
83129: LD_VAR 0 3
83133: PPUSH
83134: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83138: LD_INT 35
83140: PPUSH
83141: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
83145: LD_VAR 0 1
83149: PPUSH
83150: LD_VAR 0 2
83154: PPUSH
83155: LD_VAR 0 3
83159: PPUSH
83160: CALL 56943 0 3
83164: NOT
83165: IFFALSE 83169
// exit ;
83167: GO 83423
// until GetDistUnitXY ( unit , x , y ) < dist ;
83169: LD_VAR 0 1
83173: PPUSH
83174: LD_VAR 0 2
83178: PPUSH
83179: LD_VAR 0 3
83183: PPUSH
83184: CALL_OW 297
83188: PUSH
83189: LD_VAR 0 5
83193: LESS
83194: IFFALSE 83138
// end ; ComTurnXY ( unit , x , y ) ;
83196: LD_VAR 0 1
83200: PPUSH
83201: LD_VAR 0 2
83205: PPUSH
83206: LD_VAR 0 3
83210: PPUSH
83211: CALL_OW 118
// wait ( 5 ) ;
83215: LD_INT 5
83217: PPUSH
83218: CALL_OW 67
// _d := GetDir ( unit ) ;
83222: LD_ADDR_VAR 0 10
83226: PUSH
83227: LD_VAR 0 1
83231: PPUSH
83232: CALL_OW 254
83236: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
83237: LD_ADDR_VAR 0 8
83241: PUSH
83242: LD_VAR 0 1
83246: PPUSH
83247: CALL_OW 250
83251: PPUSH
83252: LD_VAR 0 10
83256: PPUSH
83257: LD_VAR 0 5
83261: PPUSH
83262: CALL_OW 272
83266: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
83267: LD_ADDR_VAR 0 9
83271: PUSH
83272: LD_VAR 0 1
83276: PPUSH
83277: CALL_OW 251
83281: PPUSH
83282: LD_VAR 0 10
83286: PPUSH
83287: LD_VAR 0 5
83291: PPUSH
83292: CALL_OW 273
83296: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83297: LD_VAR 0 8
83301: PPUSH
83302: LD_VAR 0 9
83306: PPUSH
83307: CALL_OW 488
83311: NOT
83312: IFFALSE 83316
// exit ;
83314: GO 83423
// ComAnimCustom ( unit , 1 ) ;
83316: LD_VAR 0 1
83320: PPUSH
83321: LD_INT 1
83323: PPUSH
83324: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
83328: LD_VAR 0 8
83332: PPUSH
83333: LD_VAR 0 9
83337: PPUSH
83338: LD_VAR 0 6
83342: PPUSH
83343: LD_VAR 0 7
83347: PPUSH
83348: CALL_OW 330
// repeat wait ( 1 ) ;
83352: LD_INT 1
83354: PPUSH
83355: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
83359: LD_VAR 0 1
83363: PPUSH
83364: CALL_OW 316
83368: PUSH
83369: LD_VAR 0 1
83373: PPUSH
83374: CALL_OW 314
83378: OR
83379: PUSH
83380: LD_VAR 0 1
83384: PPUSH
83385: CALL_OW 302
83389: NOT
83390: OR
83391: PUSH
83392: LD_VAR 0 1
83396: PPUSH
83397: CALL_OW 301
83401: OR
83402: IFFALSE 83352
// RemoveSeeing ( _x , _y , side ) ;
83404: LD_VAR 0 8
83408: PPUSH
83409: LD_VAR 0 9
83413: PPUSH
83414: LD_VAR 0 6
83418: PPUSH
83419: CALL_OW 331
// end ;
83423: LD_VAR 0 4
83427: RET
