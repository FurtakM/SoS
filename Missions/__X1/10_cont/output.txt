// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// CreateNature ;
   8: CALL 10899 0 0
// PrepareArabian ;
  12: CALL 226 0 0
// PrepareAmerican ;
  16: CALL 661 0 0
// PrepareLegion ;
  20: CALL 5701 0 0
// Action ;
  24: CALL 11503 0 0
// end ;
  28: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// prefix := 09_ ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// amScriptActive := true ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 1
  55: ST_TO_ADDR
// legScriptActive := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 16
  71: PUSH
  72: LD_INT 14
  74: PUSH
  75: LD_INT 12
  77: PUSH
  78: LD_INT 10
  80: PUSH
  81: EMPTY
  82: LIST
  83: LIST
  84: LIST
  85: LIST
  86: PUSH
  87: LD_OWVAR 67
  91: ARRAY
  92: ST_TO_ADDR
// spotAmericanBase := false ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// spotArabianBase := false ;
 101: LD_ADDR_EXP 7
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// spotLegion := false ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// spotByAmerican := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// spotByLegion := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// americanDestroyed := false ;
 133: LD_ADDR_EXP 11
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// legionDestroyed := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// hasMastodont := false ;
 149: LD_ADDR_EXP 13
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// hasVehicles := false ;
 157: LD_ADDR_EXP 14
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// hasTigers := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// hasApes := false ;
 173: LD_ADDR_EXP 16
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// hasDrugs := false ;
 181: LD_ADDR_EXP 17
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// canFinish := false ;
 189: LD_ADDR_EXP 18
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// gameActive := false ;
 197: LD_ADDR_EXP 19
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// omarCanChangeClass := false ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// tigerCounter := 0 ;
 213: LD_ADDR_EXP 21
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// end ; end_of_file
 221: LD_VAR 0 1
 225: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
// uc_side := 2 ;
 232: LD_ADDR_OWVAR 20
 236: PUSH
 237: LD_INT 2
 239: ST_TO_ADDR
// uc_nation := nation_arabian ;
 240: LD_ADDR_OWVAR 21
 244: PUSH
 245: LD_INT 2
 247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 248: LD_ADDR_EXP 22
 252: PUSH
 253: LD_STRING Heike
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_EXP 2
 266: PPUSH
 267: CALL 20298 0 3
 271: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 272: LD_INT 14
 274: PPUSH
 275: LD_INT 3
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 27
 283: PPUSH
 284: LD_INT 100
 286: PPUSH
 287: CALL 25138 0 5
// heikeVehicle := CreateVehicle ;
 291: LD_ADDR_EXP 24
 295: PUSH
 296: CALL_OW 45
 300: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 301: LD_EXP 24
 305: PPUSH
 306: LD_INT 4
 308: PPUSH
 309: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 313: LD_EXP 24
 317: PPUSH
 318: LD_INT 118
 320: PPUSH
 321: LD_INT 37
 323: PPUSH
 324: LD_INT 0
 326: PPUSH
 327: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 331: LD_EXP 22
 335: PPUSH
 336: LD_INT 1
 338: PPUSH
 339: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 343: LD_EXP 22
 347: PPUSH
 348: LD_EXP 24
 352: PPUSH
 353: CALL_OW 52
// uc_side := 5 ;
 357: LD_ADDR_OWVAR 20
 361: PUSH
 362: LD_INT 5
 364: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 365: LD_ADDR_EXP 23
 369: PUSH
 370: LD_STRING Omar
 372: PPUSH
 373: CALL_OW 25
 377: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 378: LD_INT 14
 380: PPUSH
 381: LD_INT 3
 383: PPUSH
 384: LD_INT 1
 386: PPUSH
 387: LD_INT 27
 389: PPUSH
 390: LD_INT 100
 392: PPUSH
 393: CALL 25138 0 5
// omarVehicle := CreateVehicle ;
 397: LD_ADDR_EXP 25
 401: PUSH
 402: CALL_OW 45
 406: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 407: LD_EXP 25
 411: PPUSH
 412: LD_INT 0
 414: PPUSH
 415: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 419: LD_ADDR_VAR 0 2
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 5
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 3
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 478
// SetLives ( i , rand ( 300 , 499 ) ) ;
 456: LD_VAR 0 2
 460: PPUSH
 461: LD_INT 300
 463: PPUSH
 464: LD_INT 499
 466: PPUSH
 467: CALL_OW 12
 471: PPUSH
 472: CALL_OW 234
 476: GO 453
 478: POP
 479: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 480: LD_INT 85
 482: PPUSH
 483: CALL_OW 274
 487: PPUSH
 488: LD_INT 1
 490: PPUSH
 491: LD_INT 200
 493: PUSH
 494: LD_INT 20
 496: PUSH
 497: LD_OWVAR 67
 501: MUL
 502: MINUS
 503: PPUSH
 504: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 508: LD_INT 85
 510: PPUSH
 511: CALL_OW 274
 515: PPUSH
 516: LD_INT 2
 518: PPUSH
 519: LD_INT 20
 521: PPUSH
 522: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 526: LD_INT 14
 528: PPUSH
 529: LD_INT 3
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: LD_INT 32
 537: PPUSH
 538: LD_INT 100
 540: PPUSH
 541: CALL 25138 0 5
// veh := CreateVehicle ;
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: CALL_OW 45
 554: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 555: LD_VAR 0 4
 559: PPUSH
 560: LD_INT 4
 562: PPUSH
 563: CALL_OW 233
// SetLives ( veh , 420 ) ;
 567: LD_VAR 0 4
 571: PPUSH
 572: LD_INT 420
 574: PPUSH
 575: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 579: LD_VAR 0 4
 583: PPUSH
 584: LD_INT 193
 586: PPUSH
 587: LD_INT 133
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 597: LD_INT 14
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: LD_INT 1
 605: PPUSH
 606: LD_INT 26
 608: PPUSH
 609: LD_INT 11
 611: PPUSH
 612: CALL 25138 0 5
// veh := CreateVehicle ;
 616: LD_ADDR_VAR 0 4
 620: PUSH
 621: CALL_OW 45
 625: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 626: LD_VAR 0 4
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 638: LD_VAR 0 4
 642: PPUSH
 643: LD_INT 261
 645: PPUSH
 646: LD_INT 115
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 48
// end ; end_of_file
 656: LD_VAR 0 1
 660: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 661: LD_INT 0
 663: PPUSH
 664: PPUSH
 665: PPUSH
 666: PPUSH
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// uc_side := 1 ;
 671: LD_ADDR_OWVAR 20
 675: PUSH
 676: LD_INT 1
 678: ST_TO_ADDR
// uc_nation := nation_american ;
 679: LD_ADDR_OWVAR 21
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// amForces := [ ] ;
 687: LD_ADDR_EXP 26
 691: PUSH
 692: EMPTY
 693: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 694: LD_ADDR_EXP 27
 698: PUSH
 699: LD_INT 1
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 20361 0 3
 712: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 713: LD_ADDR_EXP 28
 717: PUSH
 718: LD_INT 2
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: LD_INT 12
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 13
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 758: LD_ADDR_EXP 29
 762: PUSH
 763: LD_INT 94
 765: PUSH
 766: LD_INT 132
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// amBuildings := [ ] ;
 773: LD_ADDR_EXP 30
 777: PUSH
 778: EMPTY
 779: ST_TO_ADDR
// amTanks := [ ] ;
 780: LD_ADDR_EXP 31
 784: PUSH
 785: EMPTY
 786: ST_TO_ADDR
// amCargo := 0 ;
 787: LD_ADDR_EXP 33
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// amPatrol := [ ] ;
 795: LD_ADDR_EXP 34
 799: PUSH
 800: EMPTY
 801: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 802: LD_ADDR_VAR 0 7
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: LD_INT 121
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 98
 819: PUSH
 820: LD_INT 145
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// for i in sources do
 831: LD_ADDR_VAR 0 2
 835: PUSH
 836: LD_VAR 0 7
 840: PUSH
 841: FOR_IN
 842: IFFALSE 871
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 441
 869: GO 841
 871: POP
 872: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 274
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 550
 886: PPUSH
 887: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 891: LD_INT 2
 893: PPUSH
 894: CALL_OW 274
 898: PPUSH
 899: LD_INT 2
 901: PPUSH
 902: LD_INT 120
 904: PPUSH
 905: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 909: LD_INT 2
 911: PPUSH
 912: CALL_OW 274
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 30
 922: PPUSH
 923: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 927: LD_ADDR_VAR 0 6
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 7
 937: PUSH
 938: LD_INT 8
 940: PUSH
 941: LD_INT 9
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_OWVAR 67
 954: ARRAY
 955: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 956: LD_ADDR_EXP 32
 960: PUSH
 961: LD_STRING Brown
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: LD_STRING 
 969: PPUSH
 970: CALL 20298 0 3
 974: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 975: LD_EXP 32
 979: PPUSH
 980: LD_INT 2
 982: PPUSH
 983: CALL_OW 52
// for i := 1 to 4 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 4
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1525
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1003: LD_ADDR_VAR 0 3
1007: PUSH
1008: DOUBLE
1009: LD_INT 1
1011: DEC
1012: ST_TO_ADDR
1013: LD_INT 6
1015: PUSH
1016: LD_INT 7
1018: PUSH
1019: LD_INT 8
1021: PUSH
1022: LD_INT 9
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_OWVAR 67
1035: ARRAY
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 4
1042: PUSH
1043: LD_INT 5
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_OWVAR 67
1059: ARRAY
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 6
1069: PUSH
1070: LD_INT 7
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_OWVAR 67
1083: ARRAY
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 3
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: LD_INT 3
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: PUSH
1103: LD_OWVAR 67
1107: ARRAY
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PUSH
1121: FOR_TO
1122: IFFALSE 1521
// begin PrepareHuman ( false , i , skill ) ;
1124: LD_INT 0
1126: PPUSH
1127: LD_VAR 0 2
1131: PPUSH
1132: LD_VAR 0 6
1136: PPUSH
1137: CALL_OW 380
// un := CreateHuman ;
1141: LD_ADDR_VAR 0 5
1145: PUSH
1146: CALL_OW 44
1150: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1151: LD_ADDR_EXP 26
1155: PUSH
1156: LD_EXP 26
1160: PPUSH
1161: LD_VAR 0 5
1165: PPUSH
1166: CALL 57989 0 2
1170: ST_TO_ADDR
// case i of 1 :
1171: LD_VAR 0 2
1175: PUSH
1176: LD_INT 1
1178: DOUBLE
1179: EQUAL
1180: IFTRUE 1184
1182: GO 1253
1184: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1185: LD_ADDR_VAR 0 4
1189: PUSH
1190: LD_INT 22
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 2
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 32
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 30
1215: PUSH
1216: LD_INT 5
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: LIST
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: LD_INT 62
1233: PUSH
1234: EMPTY
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PPUSH
1246: CALL_OW 69
1250: ST_TO_ADDR
1251: GO 1432
1253: LD_INT 2
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1290
1261: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_INT 2
1269: PPUSH
1270: LD_INT 3
1272: PUSH
1273: LD_INT 62
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PPUSH
1283: CALL_OW 72
1287: ST_TO_ADDR
1288: GO 1432
1290: LD_INT 3
1292: DOUBLE
1293: EQUAL
1294: IFTRUE 1298
1296: GO 1372
1298: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: LD_INT 22
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 2
1316: PUSH
1317: LD_INT 30
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 30
1329: PUSH
1330: LD_INT 36
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 3
1344: PUSH
1345: LD_INT 62
1347: PUSH
1348: EMPTY
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 69
1364: PPUSH
1365: CALL 53276 0 1
1369: ST_TO_ADDR
1370: GO 1432
1372: LD_INT 4
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1431
1380: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 30
1398: PUSH
1399: LD_INT 8
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: LD_INT 3
1408: PUSH
1409: LD_INT 62
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
1429: GO 1432
1431: POP
// if b then
1432: LD_VAR 0 4
1436: IFFALSE 1498
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1438: LD_VAR 0 4
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PPUSH
1447: CALL_OW 266
1451: PUSH
1452: LD_INT 5
1454: EQUAL
1455: PUSH
1456: LD_INT 60
1458: PPUSH
1459: CALL_OW 13
1463: AND
1464: IFFALSE 1478
// SetClass ( un , class_sniper ) ;
1466: LD_VAR 0 5
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_VAR 0 4
1487: PUSH
1488: LD_INT 1
1490: ARRAY
1491: PPUSH
1492: CALL_OW 52
// end else
1496: GO 1519
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1498: LD_VAR 0 5
1502: PPUSH
1503: LD_INT 92
1505: PPUSH
1506: LD_INT 137
1508: PPUSH
1509: LD_INT 4
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 50
// end ;
1519: GO 1121
1521: POP
1522: POP
1523: GO 1000
1525: POP
1526: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1527: LD_ADDR_VAR 0 8
1531: PUSH
1532: LD_INT 30
1534: PUSH
1535: LD_INT 32
1537: PUSH
1538: LD_INT 36
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1546: LD_ADDR_VAR 0 2
1550: PUSH
1551: DOUBLE
1552: LD_INT 1
1554: DEC
1555: ST_TO_ADDR
1556: LD_VAR 0 8
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1731
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1564: LD_ADDR_VAR 0 3
1568: PUSH
1569: DOUBLE
1570: LD_INT 1
1572: DEC
1573: ST_TO_ADDR
1574: LD_INT 1
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PUSH
1598: FOR_TO
1599: IFFALSE 1727
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1601: LD_INT 0
1603: PPUSH
1604: LD_INT 7
1606: PUSH
1607: LD_INT 8
1609: PUSH
1610: LD_INT 9
1612: PUSH
1613: LD_INT 10
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: LD_OWVAR 67
1626: ARRAY
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 5
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// if j mod 2 = 0 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 2
1649: MOD
1650: PUSH
1651: LD_INT 0
1653: EQUAL
1654: IFFALSE 1668
// SetClass ( un , class_sniper ) ;
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_INT 5
1663: PPUSH
1664: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1668: LD_ADDR_EXP 34
1672: PUSH
1673: LD_EXP 34
1677: PPUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL 57989 0 2
1687: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1688: LD_VAR 0 5
1692: PPUSH
1693: LD_VAR 0 8
1697: PUSH
1698: LD_VAR 0 2
1702: ARRAY
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 49
// SetTag ( un , i ) ;
1711: LD_VAR 0 5
1715: PPUSH
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 109
// end ;
1725: GO 1598
1727: POP
1728: POP
// end ;
1729: GO 1561
1731: POP
1732: POP
// end ;
1733: LD_VAR 0 1
1737: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1738: LD_EXP 3
1742: PUSH
1743: LD_EXP 26
1747: PPUSH
1748: CALL 22400 0 1
1752: AND
1753: IFFALSE 4121
1755: GO 1757
1757: DISABLE
1758: LD_INT 0
1760: PPUSH
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
1765: PPUSH
1766: PPUSH
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
// begin enable ;
1778: ENABLE
// side := 1 ;
1779: LD_ADDR_VAR 0 5
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: LD_INT 22
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 33
1806: PUSH
1807: LD_INT 2
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 50
1816: PUSH
1817: EMPTY
1818: LIST
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 61
1825: PUSH
1826: EMPTY
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_VAR 0 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 50
1863: PUSH
1864: EMPTY
1865: LIST
1866: PUSH
1867: LD_INT 30
1869: PUSH
1870: LD_INT 36
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: CALL 22400 0 1
1891: AND
1892: IFFALSE 1920
// for i in remote do
1894: LD_ADDR_VAR 0 1
1898: PUSH
1899: LD_VAR 0 3
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1918
// Connect ( i ) ;
1907: LD_VAR 0 1
1911: PPUSH
1912: CALL 28606 0 1
1916: GO 1904
1918: POP
1919: POP
// if amTech then
1920: LD_EXP 27
1924: IFFALSE 2080
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1926: LD_ADDR_VAR 0 6
1930: PUSH
1931: LD_INT 22
1933: PUSH
1934: LD_VAR 0 5
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 50
1945: PUSH
1946: EMPTY
1947: LIST
1948: PUSH
1949: LD_INT 2
1951: PUSH
1952: LD_INT 30
1954: PUSH
1955: LD_INT 6
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 30
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 30
1974: PUSH
1975: LD_INT 8
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PPUSH
1993: CALL_OW 69
1997: ST_TO_ADDR
// if lab then
1998: LD_VAR 0 6
2002: IFFALSE 2080
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2004: LD_VAR 0 6
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: CALL_OW 461
2017: PUSH
2018: LD_INT 2
2020: EQUAL
2021: IFFALSE 2080
// begin for i in amTech do
2023: LD_ADDR_VAR 0 1
2027: PUSH
2028: LD_EXP 27
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2078
// if CanBeResearched ( lab [ 1 ] , i ) then
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PPUSH
2045: LD_VAR 0 1
2049: PPUSH
2050: CALL_OW 430
2054: IFFALSE 2076
// begin ComResearch ( lab [ 1 ] , i ) ;
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: LD_VAR 0 1
2069: PPUSH
2070: CALL_OW 124
// break ;
2074: GO 2078
// end ;
2076: GO 2033
2078: POP
2079: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2080: LD_ADDR_VAR 0 16
2084: PUSH
2085: LD_INT 1
2087: PPUSH
2088: LD_INT 22
2090: PUSH
2091: LD_VAR 0 5
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 3
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 50
2112: PUSH
2113: EMPTY
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 70
2125: ST_TO_ADDR
// if fac then
2126: LD_VAR 0 16
2130: IFFALSE 2396
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2132: LD_VAR 0 16
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: CALL_OW 461
2145: PUSH
2146: LD_INT 2
2148: EQUAL
2149: IFFALSE 2396
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2151: LD_ADDR_VAR 0 17
2155: PUSH
2156: LD_INT 1
2158: PPUSH
2159: LD_INT 2
2161: PUSH
2162: LD_INT 30
2164: PUSH
2165: LD_INT 32
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 30
2174: PUSH
2175: LD_INT 33
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 35
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PPUSH
2201: CALL_OW 70
2205: ST_TO_ADDR
// if emptyTowers then
2206: LD_VAR 0 17
2210: IFFALSE 2258
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2212: LD_ADDR_VAR 0 18
2216: PUSH
2217: LD_VAR 0 17
2221: PUSH
2222: LD_INT 1
2224: ARRAY
2225: PPUSH
2226: LD_INT 1
2228: PPUSH
2229: CALL 30645 0 2
2233: ST_TO_ADDR
// if weapon then
2234: LD_VAR 0 18
2238: IFFALSE 2258
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2240: LD_VAR 0 17
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PPUSH
2249: LD_VAR 0 18
2253: PPUSH
2254: CALL_OW 148
// end ; if amConstructList then
2258: LD_EXP 28
2262: IFFALSE 2396
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2264: LD_VAR 0 16
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PPUSH
2273: LD_EXP 28
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: LD_EXP 28
2290: PUSH
2291: LD_INT 1
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: LD_EXP 28
2303: PUSH
2304: LD_INT 1
2306: ARRAY
2307: PUSH
2308: LD_INT 3
2310: ARRAY
2311: PPUSH
2312: LD_EXP 28
2316: PUSH
2317: LD_INT 1
2319: ARRAY
2320: PUSH
2321: LD_INT 4
2323: ARRAY
2324: PPUSH
2325: CALL_OW 448
2329: IFFALSE 2396
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2331: LD_VAR 0 16
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_EXP 28
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 28
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PUSH
2362: LD_INT 2
2364: ARRAY
2365: PPUSH
2366: LD_EXP 28
2370: PUSH
2371: LD_INT 1
2373: ARRAY
2374: PUSH
2375: LD_INT 3
2377: ARRAY
2378: PPUSH
2379: LD_EXP 28
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PUSH
2388: LD_INT 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: LD_INT 1
2403: PPUSH
2404: LD_INT 21
2406: PUSH
2407: LD_INT 3
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 1000
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2454: LD_ADDR_VAR 0 10
2458: PUSH
2459: LD_INT 13
2461: PPUSH
2462: CALL_OW 435
2466: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2467: LD_ADDR_VAR 0 11
2471: PUSH
2472: LD_EXP 26
2476: PPUSH
2477: LD_INT 25
2479: PUSH
2480: LD_INT 4
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 50
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL_OW 72
2501: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2502: LD_ADDR_VAR 0 6
2506: PUSH
2507: LD_INT 1
2509: PPUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 70
2553: ST_TO_ADDR
// if sci then
2554: LD_VAR 0 11
2558: IFFALSE 2717
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2560: LD_ADDR_VAR 0 13
2564: PUSH
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 95
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 120
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PPUSH
2594: CALL_OW 72
2598: ST_TO_ADDR
// if hurtUnits then
2599: LD_VAR 0 13
2603: IFFALSE 2664
// begin for i in sci do
2605: LD_ADDR_VAR 0 1
2609: PUSH
2610: LD_VAR 0 11
2614: PUSH
2615: FOR_IN
2616: IFFALSE 2660
// if IsInUnit ( i ) then
2618: LD_VAR 0 1
2622: PPUSH
2623: CALL_OW 310
2627: IFFALSE 2640
// ComExitBuilding ( i ) else
2629: LD_VAR 0 1
2633: PPUSH
2634: CALL_OW 122
2638: GO 2658
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_VAR 0 13
2649: PUSH
2650: LD_INT 1
2652: ARRAY
2653: PPUSH
2654: CALL_OW 128
2658: GO 2615
2660: POP
2661: POP
// end else
2662: GO 2717
// if lab then
2664: LD_VAR 0 6
2668: IFFALSE 2717
// begin for i in sci do
2670: LD_ADDR_VAR 0 1
2674: PUSH
2675: LD_VAR 0 11
2679: PUSH
2680: FOR_IN
2681: IFFALSE 2715
// if not IsInUnit ( i ) then
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 310
2692: NOT
2693: IFFALSE 2713
// ComEnterUnit ( i , lab [ 1 ] ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 6
2704: PUSH
2705: LD_INT 1
2707: ARRAY
2708: PPUSH
2709: CALL_OW 120
2713: GO 2680
2715: POP
2716: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: LD_EXP 26
2726: PPUSH
2727: LD_INT 25
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 72
2741: ST_TO_ADDR
// if eng then
2742: LD_VAR 0 7
2746: IFFALSE 3521
// begin for i in eng do
2748: LD_ADDR_VAR 0 1
2752: PUSH
2753: LD_VAR 0 7
2757: PUSH
2758: FOR_IN
2759: IFFALSE 3519
// begin tag := GetTag ( i ) ;
2761: LD_ADDR_VAR 0 8
2765: PUSH
2766: LD_VAR 0 1
2770: PPUSH
2771: CALL_OW 110
2775: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2776: LD_VAR 0 1
2780: PPUSH
2781: CALL_OW 256
2785: PUSH
2786: LD_INT 800
2788: LESS
2789: PUSH
2790: LD_VAR 0 8
2794: PUSH
2795: LD_INT 1
2797: NONEQUAL
2798: AND
2799: IFFALSE 2849
// begin SetTag ( i , tHeal ) ;
2801: LD_VAR 0 1
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2813: LD_VAR 0 1
2817: PPUSH
2818: LD_EXP 29
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_EXP 29
2831: PUSH
2832: LD_INT 2
2834: ARRAY
2835: PPUSH
2836: CALL_OW 111
// AddComHold ( i ) ;
2840: LD_VAR 0 1
2844: PPUSH
2845: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2849: LD_VAR 0 8
2853: PUSH
2854: LD_INT 1
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 256
2867: PUSH
2868: LD_INT 1000
2870: EQUAL
2871: AND
2872: IFFALSE 2886
// SetTag ( i , 0 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 109
// if not tag then
2886: LD_VAR 0 8
2890: NOT
2891: IFFALSE 3059
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2893: LD_ADDR_VAR 0 4
2897: PUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 57
2903: PUSH
2904: EMPTY
2905: LIST
2906: PPUSH
2907: CALL_OW 70
2911: ST_TO_ADDR
// if undone then
2912: LD_VAR 0 4
2916: IFFALSE 2938
// begin ComComplete ( i , undone [ 1 ] ) ;
2918: LD_VAR 0 1
2922: PPUSH
2923: LD_VAR 0 4
2927: PUSH
2928: LD_INT 1
2930: ARRAY
2931: PPUSH
2932: CALL 28498 0 2
// continue ;
2936: GO 2758
// end ; if cr or tmp or Count ( amBuildings ) then
2938: LD_VAR 0 10
2942: PUSH
2943: LD_VAR 0 2
2947: OR
2948: PUSH
2949: LD_EXP 30
2953: PPUSH
2954: CALL 22400 0 1
2958: OR
2959: IFFALSE 3035
// begin if IsInUnit ( i ) then
2961: LD_VAR 0 1
2965: PPUSH
2966: CALL_OW 310
2970: IFFALSE 2981
// ComExitBuilding ( i ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: CALL_OW 122
// if tmp then
2981: LD_VAR 0 2
2985: IFFALSE 3001
// SetTag ( i , tRepair ) else
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL_OW 109
2999: GO 3033
// if cr then
3001: LD_VAR 0 10
3005: IFFALSE 3021
// SetTag ( i , tCrates ) else
3007: LD_VAR 0 1
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: CALL_OW 109
3019: GO 3033
// SetTag ( i , tBuild ) ;
3021: LD_VAR 0 1
3025: PPUSH
3026: LD_INT 5
3028: PPUSH
3029: CALL_OW 109
// end else
3033: GO 3059
// if not IsInUnit ( i ) then
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 310
3044: NOT
3045: IFFALSE 3059
// ComEnterUnit ( i , amBase ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 120
// end ; if tag = tRepair then
3059: LD_VAR 0 8
3063: PUSH
3064: LD_INT 3
3066: EQUAL
3067: IFFALSE 3169
// begin if IsInUnit ( i ) then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 310
3078: IFFALSE 3091
// begin ComExitBuilding ( i ) ;
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 122
// continue ;
3089: GO 2758
// end ; if not tmp then
3091: LD_VAR 0 2
3095: NOT
3096: IFFALSE 3112
// begin SetTag ( i , 0 ) ;
3098: LD_VAR 0 1
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: CALL_OW 109
// continue ;
3110: GO 2758
// end ; if not HasTask ( i ) then
3112: LD_VAR 0 1
3116: PPUSH
3117: CALL_OW 314
3121: NOT
3122: IFFALSE 3142
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 2
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 308
3154: NOT
3155: IFFALSE 3169
// ComMoveToArea ( i , amBaseArea ) ;
3157: LD_VAR 0 1
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 113
// end ; if tag = tBuild then
3169: LD_VAR 0 8
3173: PUSH
3174: LD_INT 5
3176: EQUAL
3177: IFFALSE 3372
// begin if IsInUnit ( i ) then
3179: LD_VAR 0 1
3183: PPUSH
3184: CALL_OW 310
3188: IFFALSE 3201
// begin ComExitBuilding ( i ) ;
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 122
// continue ;
3199: GO 2758
// end ; if not Count ( amBuildings ) then
3201: LD_EXP 30
3205: PPUSH
3206: CALL 22400 0 1
3210: NOT
3211: IFFALSE 3229
// begin SetTag ( i , 0 ) ;
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 109
// continue ;
3225: GO 2758
// end else
3227: GO 3266
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3229: LD_INT 2
3231: PPUSH
3232: LD_EXP 30
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: PPUSH
3245: CALL 61908 0 2
3249: NOT
3250: IFFALSE 3266
// begin SetTag ( i , 0 ) ;
3252: LD_VAR 0 1
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 109
// continue ;
3264: GO 2758
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3266: LD_ADDR_VAR 0 4
3270: PUSH
3271: LD_INT 1
3273: PPUSH
3274: LD_INT 57
3276: PUSH
3277: EMPTY
3278: LIST
3279: PPUSH
3280: CALL_OW 70
3284: ST_TO_ADDR
// if undone then
3285: LD_VAR 0 4
3289: IFFALSE 3311
// begin ComComplete ( i , undone [ 1 ] ) ;
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_VAR 0 4
3300: PUSH
3301: LD_INT 1
3303: ARRAY
3304: PPUSH
3305: CALL 28498 0 2
// continue ;
3309: GO 2758
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3311: LD_VAR 0 1
3315: PPUSH
3316: LD_EXP 30
3320: PUSH
3321: LD_INT 1
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_EXP 30
3333: PUSH
3334: LD_INT 1
3336: ARRAY
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: LD_EXP 30
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PUSH
3351: LD_INT 3
3353: ARRAY
3354: PPUSH
3355: LD_EXP 30
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: PUSH
3364: LD_INT 4
3366: ARRAY
3367: PPUSH
3368: CALL_OW 145
// end ; if tag = tCrates then
3372: LD_VAR 0 8
3376: PUSH
3377: LD_INT 2
3379: EQUAL
3380: IFFALSE 3517
// begin if IsInUnit ( i ) then
3382: LD_VAR 0 1
3386: PPUSH
3387: CALL_OW 310
3391: IFFALSE 3404
// begin ComExitBuilding ( i ) ;
3393: LD_VAR 0 1
3397: PPUSH
3398: CALL_OW 122
// continue ;
3402: GO 2758
// end ; if not cr then
3404: LD_VAR 0 10
3408: NOT
3409: IFFALSE 3425
// begin SetTag ( i , 0 ) ;
3411: LD_VAR 0 1
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 109
// continue ;
3423: GO 2758
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3425: LD_VAR 0 1
3429: PPUSH
3430: CALL_OW 314
3434: NOT
3435: PUSH
3436: LD_INT 81
3438: PUSH
3439: LD_VAR 0 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 92
3450: PUSH
3451: LD_VAR 0 10
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: PUSH
3460: LD_VAR 0 10
3464: PUSH
3465: LD_INT 2
3467: ARRAY
3468: PUSH
3469: LD_INT 12
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PPUSH
3482: CALL_OW 69
3486: NOT
3487: AND
3488: IFFALSE 3517
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3490: LD_VAR 0 1
3494: PPUSH
3495: LD_VAR 0 10
3499: PUSH
3500: LD_INT 1
3502: ARRAY
3503: PPUSH
3504: LD_VAR 0 10
3508: PUSH
3509: LD_INT 2
3511: ARRAY
3512: PPUSH
3513: CALL_OW 117
// end ; end ;
3517: GO 2758
3519: POP
3520: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3521: LD_ADDR_VAR 0 12
3525: PUSH
3526: LD_EXP 26
3530: PPUSH
3531: LD_INT 2
3533: PUSH
3534: LD_INT 25
3536: PUSH
3537: LD_INT 1
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 25
3546: PUSH
3547: LD_INT 5
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 50
3561: PUSH
3562: EMPTY
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 72
3573: PUSH
3574: LD_EXP 32
3578: UNION
3579: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3580: LD_ADDR_VAR 0 14
3584: PUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_INT 81
3590: PUSH
3591: LD_VAR 0 5
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 70
3604: ST_TO_ADDR
// if sol then
3605: LD_VAR 0 12
3609: IFFALSE 4121
// begin if enemyInBase then
3611: LD_VAR 0 14
3615: IFFALSE 3760
// begin for i in sol do
3617: LD_ADDR_VAR 0 1
3621: PUSH
3622: LD_VAR 0 12
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3756
// begin tw := IsInUnit ( i ) ;
3630: LD_ADDR_VAR 0 9
3634: PUSH
3635: LD_VAR 0 1
3639: PPUSH
3640: CALL_OW 310
3644: ST_TO_ADDR
// if tw then
3645: LD_VAR 0 9
3649: IFFALSE 3730
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3651: LD_VAR 0 9
3655: PUSH
3656: LD_INT 22
3658: PUSH
3659: LD_VAR 0 5
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 101
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: LD_INT 30
3683: PUSH
3684: LD_INT 32
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 30
3693: PUSH
3694: LD_INT 31
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 69
3715: IN
3716: NOT
3717: IFFALSE 3728
// ComExitBuilding ( i ) ;
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 122
// end else
3728: GO 3754
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3730: LD_VAR 0 1
3734: PPUSH
3735: LD_VAR 0 14
3739: PPUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 74
3749: PPUSH
3750: CALL_OW 115
// end ;
3754: GO 3627
3756: POP
3757: POP
// end else
3758: GO 4121
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3760: LD_ADDR_VAR 0 15
3764: PUSH
3765: LD_INT 1
3767: PPUSH
3768: LD_INT 3
3770: PUSH
3771: LD_INT 62
3773: PUSH
3774: EMPTY
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 32
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 30
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 30
3806: PUSH
3807: LD_INT 5
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 30
3816: PUSH
3817: LD_INT 31
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PPUSH
3835: CALL_OW 70
3839: ST_TO_ADDR
// if empty then
3840: LD_VAR 0 15
3844: IFFALSE 3861
// empty := ReverseArray ( empty ) ;
3846: LD_ADDR_VAR 0 15
3850: PUSH
3851: LD_VAR 0 15
3855: PPUSH
3856: CALL 53276 0 1
3860: ST_TO_ADDR
// for i in sol do
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_VAR 0 12
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4119
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 8
3878: PUSH
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 256
3898: PUSH
3899: LD_INT 1000
3901: LESS
3902: PUSH
3903: LD_VAR 0 8
3907: PUSH
3908: LD_INT 1
3910: NONEQUAL
3911: AND
3912: IFFALSE 3964
// begin SetTag ( i , tHeal ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 1
3921: PPUSH
3922: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3926: LD_VAR 0 1
3930: PPUSH
3931: LD_EXP 29
3935: PUSH
3936: LD_INT 1
3938: ARRAY
3939: PPUSH
3940: LD_EXP 29
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// continue ;
3962: GO 3871
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 256
3973: PUSH
3974: LD_INT 1000
3976: EQUAL
3977: PUSH
3978: LD_VAR 0 8
3982: PUSH
3983: LD_INT 1
3985: EQUAL
3986: AND
3987: IFFALSE 4003
// begin SetTag ( i , 0 ) ;
3989: LD_VAR 0 1
3993: PPUSH
3994: LD_INT 0
3996: PPUSH
3997: CALL_OW 109
// continue ;
4001: GO 3871
// end ; if HasTask ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 314
4012: IFFALSE 4016
// continue ;
4014: GO 3871
// if not IsInUnit ( i ) and not tag and empty then
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 310
4025: NOT
4026: PUSH
4027: LD_VAR 0 8
4031: NOT
4032: AND
4033: PUSH
4034: LD_VAR 0 15
4038: AND
4039: IFFALSE 4117
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 15
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4059: LD_VAR 0 15
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: PPUSH
4068: CALL_OW 266
4072: PUSH
4073: LD_INT 5
4075: EQUAL
4076: PUSH
4077: LD_INT 50
4079: PPUSH
4080: CALL_OW 13
4084: AND
4085: IFFALSE 4099
// AddComChangeProfession ( i , class_sniper ) ;
4087: LD_VAR 0 1
4091: PPUSH
4092: LD_INT 5
4094: PPUSH
4095: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4099: LD_ADDR_VAR 0 15
4103: PUSH
4104: LD_VAR 0 15
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 3
4116: ST_TO_ADDR
// end ; end ;
4117: GO 3871
4119: POP
4120: POP
// end ; end ; end ;
4121: PPOPN 18
4123: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4124: LD_EXP 33
4128: PPUSH
4129: CALL_OW 302
4133: PUSH
4134: LD_EXP 3
4138: AND
4139: IFFALSE 4421
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin enable ;
4148: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 81
4159: PUSH
4160: LD_INT 1
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 50
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 70
4181: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4182: LD_ADDR_VAR 0 1
4186: PUSH
4187: LD_INT 17
4189: PPUSH
4190: CALL_OW 435
4194: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4195: LD_EXP 33
4199: PPUSH
4200: CALL_OW 261
4204: PUSH
4205: LD_INT 10
4207: LESS
4208: PUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 33
4216: PPUSH
4217: CALL_OW 292
4221: NOT
4222: AND
4223: PUSH
4224: LD_EXP 33
4228: PPUSH
4229: CALL_OW 262
4233: PUSH
4234: LD_INT 1
4236: EQUAL
4237: AND
4238: IFFALSE 4252
// SetFuel ( amCargo , 100 ) ;
4240: LD_EXP 33
4244: PPUSH
4245: LD_INT 100
4247: PPUSH
4248: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4252: LD_EXP 33
4256: PPUSH
4257: CALL_OW 314
4261: NOT
4262: PUSH
4263: LD_EXP 33
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 289
4275: PUSH
4276: LD_INT 100
4278: LESS
4279: AND
4280: PUSH
4281: LD_VAR 0 2
4285: NOT
4286: AND
4287: IFFALSE 4353
// begin if cr then
4289: LD_VAR 0 1
4293: IFFALSE 4324
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4295: LD_EXP 33
4299: PPUSH
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: LD_VAR 0 1
4313: PUSH
4314: LD_INT 2
4316: ARRAY
4317: PPUSH
4318: CALL_OW 117
4322: GO 4351
// if not IsInArea ( amCargo , cratesWestArea ) then
4324: LD_EXP 33
4328: PPUSH
4329: LD_INT 17
4331: PPUSH
4332: CALL_OW 308
4336: NOT
4337: IFFALSE 4351
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4339: LD_EXP 33
4343: PPUSH
4344: LD_INT 17
4346: PPUSH
4347: CALL_OW 113
// exit ;
4351: GO 4421
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4353: LD_VAR 0 2
4357: PUSH
4358: LD_EXP 33
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 308
4370: NOT
4371: AND
4372: IFFALSE 4391
// ComMoveXY ( amCargo , 93 , 137 ) else
4374: LD_EXP 33
4378: PPUSH
4379: LD_INT 93
4381: PPUSH
4382: LD_INT 137
4384: PPUSH
4385: CALL_OW 111
4389: GO 4421
// if GetCargo ( amCargo , mat_cans ) = 100 then
4391: LD_EXP 33
4395: PPUSH
4396: LD_INT 1
4398: PPUSH
4399: CALL_OW 289
4403: PUSH
4404: LD_INT 100
4406: EQUAL
4407: IFFALSE 4421
// ComGive ( amCargo , amBase ) ;
4409: LD_EXP 33
4413: PPUSH
4414: LD_INT 2
4416: PPUSH
4417: CALL_OW 161
// end ;
4421: PPOPN 2
4423: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4424: LD_EXP 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 3
4441: PUSH
4442: LD_INT 60
4444: PUSH
4445: EMPTY
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 50
4454: PUSH
4455: EMPTY
4456: LIST
4457: PUSH
4458: LD_INT 34
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: PPUSH
4474: CALL_OW 69
4478: AND
4479: PUSH
4480: LD_INT 22
4482: PUSH
4483: LD_INT 1
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 3
4492: PUSH
4493: LD_INT 24
4495: PUSH
4496: LD_INT 1000
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: LD_INT 3
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: AND
4527: IFFALSE 4760
4529: GO 4531
4531: DISABLE
4532: LD_INT 0
4534: PPUSH
4535: PPUSH
4536: PPUSH
// begin enable ;
4537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 3
4555: PUSH
4556: LD_INT 24
4558: PUSH
4559: LD_INT 1000
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 69
4589: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_INT 1
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 3
4607: PUSH
4608: LD_INT 24
4610: PUSH
4611: LD_INT 600
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4642: LD_ADDR_VAR 0 1
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 60
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 50
4672: PUSH
4673: EMPTY
4674: LIST
4675: PUSH
4676: LD_INT 34
4678: PUSH
4679: LD_INT 13
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 69
4696: PUSH
4697: FOR_IN
4698: IFFALSE 4758
// begin if tmp2 then
4700: LD_VAR 0 3
4704: IFFALSE 4732
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4706: LD_VAR 0 1
4710: PPUSH
4711: LD_VAR 0 3
4715: PPUSH
4716: LD_VAR 0 1
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 130
4730: GO 4756
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4732: LD_VAR 0 1
4736: PPUSH
4737: LD_VAR 0 2
4741: PPUSH
4742: LD_VAR 0 1
4746: PPUSH
4747: CALL_OW 74
4751: PPUSH
4752: CALL_OW 130
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: PPOPN 3
4762: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4763: LD_EXP 34
4767: PUSH
4768: LD_EXP 19
4772: AND
4773: PUSH
4774: LD_EXP 11
4778: NOT
4779: AND
4780: IFFALSE 5105
4782: GO 4784
4784: DISABLE
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
4791: PPUSH
4792: PPUSH
4793: PPUSH
// begin enable ;
4794: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_INT 30
4802: PUSH
4803: LD_INT 31
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 32
4812: PUSH
4813: LD_INT 33
4815: PUSH
4816: LD_INT 34
4818: PUSH
4819: LD_INT 35
4821: PUSH
4822: LD_INT 33
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 36
4834: PUSH
4835: LD_INT 37
4837: PUSH
4838: LD_INT 38
4840: PUSH
4841: LD_INT 39
4843: PUSH
4844: LD_INT 40
4846: PUSH
4847: LD_INT 41
4849: PUSH
4850: LD_INT 42
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
// for i in amPatrol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_EXP 34
4880: PUSH
4881: FOR_IN
4882: IFFALSE 5103
// begin if See ( 2 , i ) then
4884: LD_INT 2
4886: PPUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 292
4896: IFFALSE 4999
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4898: LD_ADDR_VAR 0 7
4902: PUSH
4903: LD_INT 22
4905: PUSH
4906: LD_INT 2
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PPUSH
4913: CALL_OW 69
4917: PPUSH
4918: LD_VAR 0 1
4922: PPUSH
4923: CALL_OW 74
4927: ST_TO_ADDR
// if enemy then
4928: LD_VAR 0 7
4932: IFFALSE 4999
// begin x := GetX ( enemy ) ;
4934: LD_ADDR_VAR 0 4
4938: PUSH
4939: LD_VAR 0 7
4943: PPUSH
4944: CALL_OW 250
4948: ST_TO_ADDR
// y := GetY ( enemy ) ;
4949: LD_ADDR_VAR 0 5
4953: PUSH
4954: LD_VAR 0 7
4958: PPUSH
4959: CALL_OW 251
4963: ST_TO_ADDR
// if ValidHex ( x , y ) then
4964: LD_VAR 0 4
4968: PPUSH
4969: LD_VAR 0 5
4973: PPUSH
4974: CALL_OW 488
4978: IFFALSE 4999
// ComAgressiveMove ( i , x , y ) ;
4980: LD_VAR 0 1
4984: PPUSH
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_VAR 0 5
4994: PPUSH
4995: CALL_OW 114
// end ; end ; if HasTask ( i ) then
4999: LD_VAR 0 1
5003: PPUSH
5004: CALL_OW 314
5008: IFFALSE 5012
// continue ;
5010: GO 4881
// tag := GetTag ( i ) ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_VAR 0 1
5021: PPUSH
5022: CALL_OW 110
5026: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5027: LD_ADDR_VAR 0 2
5031: PUSH
5032: DOUBLE
5033: LD_INT 1
5035: DEC
5036: ST_TO_ADDR
5037: LD_VAR 0 3
5041: PUSH
5042: LD_VAR 0 6
5046: ARRAY
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5099
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 6
5065: ARRAY
5066: PUSH
5067: LD_VAR 0 2
5071: ARRAY
5072: PPUSH
5073: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_INT 175
5084: PPUSH
5085: LD_INT 385
5087: PPUSH
5088: CALL_OW 12
5092: PPUSH
5093: CALL_OW 202
// end ;
5097: GO 5048
5099: POP
5100: POP
// end ;
5101: GO 4881
5103: POP
5104: POP
// end ;
5105: PPOPN 7
5107: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5108: LD_EXP 31
5112: PPUSH
5113: CALL 22400 0 1
5117: PUSH
5118: LD_INT 5
5120: LESS
5121: PUSH
5122: LD_EXP 3
5126: AND
5127: PUSH
5128: LD_EXP 8
5132: AND
5133: PUSH
5134: LD_EXP 7
5138: AND
5139: IFFALSE 5333
5141: GO 5143
5143: DISABLE
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
// begin enable ;
5149: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5150: LD_ADDR_VAR 0 2
5154: PUSH
5155: LD_INT 3
5157: PUSH
5158: LD_INT 9
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 4
5167: PUSH
5168: LD_INT 9
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 4
5177: PUSH
5178: LD_INT 6
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 3
5187: PUSH
5188: LD_INT 5
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 2
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 1
5207: PUSH
5208: LD_INT 2
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
5223: LD_ADDR_VAR 0 1
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 3
5235: PUSH
5236: LD_INT 4
5238: PUSH
5239: LD_INT 5
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5331
// begin part := parts [ rand ( 1 , parts ) ] ;
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_VAR 0 2
5269: PUSH
5270: LD_INT 1
5272: PPUSH
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 12
5282: ARRAY
5283: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5284: LD_ADDR_EXP 28
5288: PUSH
5289: LD_EXP 28
5293: PPUSH
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: PUSH
5303: LD_INT 1
5305: PUSH
5306: LD_INT 2
5308: PUSH
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 2
5316: ARRAY
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: CALL 57989 0 2
5328: ST_TO_ADDR
5329: GO 5257
5331: POP
5332: POP
// end ;
5333: PPOPN 3
5335: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5336: LD_EXP 11
5340: NOT
5341: PUSH
5342: LD_EXP 31
5346: PPUSH
5347: CALL 22400 0 1
5351: AND
5352: PUSH
5353: LD_EXP 8
5357: AND
5358: PUSH
5359: LD_EXP 7
5363: AND
5364: IFFALSE 5698
5366: GO 5368
5368: DISABLE
5369: LD_INT 0
5371: PPUSH
5372: PPUSH
5373: PPUSH
// begin enable ;
5374: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5375: LD_ADDR_VAR 0 2
5379: PUSH
5380: LD_EXP 31
5384: PPUSH
5385: LD_INT 61
5387: PUSH
5388: EMPTY
5389: LIST
5390: PUSH
5391: LD_INT 50
5393: PUSH
5394: EMPTY
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 72
5405: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5406: LD_ADDR_EXP 31
5410: PUSH
5411: LD_EXP 31
5415: PUSH
5416: LD_VAR 0 2
5420: DIFF
5421: ST_TO_ADDR
// if not tmp then
5422: LD_VAR 0 2
5426: NOT
5427: IFFALSE 5431
// exit ;
5429: GO 5698
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5431: LD_ADDR_VAR 0 3
5435: PUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_INT 34
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PPUSH
5451: CALL_OW 72
5455: ST_TO_ADDR
// if tmp2 then
5456: LD_VAR 0 3
5460: IFFALSE 5478
// tmp := tmp diff tmp2 ;
5462: LD_ADDR_VAR 0 2
5466: PUSH
5467: LD_VAR 0 2
5471: PUSH
5472: LD_VAR 0 3
5476: DIFF
5477: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5478: LD_INT 35
5480: PPUSH
5481: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5485: LD_ADDR_VAR 0 2
5489: PUSH
5490: LD_VAR 0 2
5494: PPUSH
5495: LD_INT 50
5497: PUSH
5498: EMPTY
5499: LIST
5500: PPUSH
5501: CALL_OW 72
5505: ST_TO_ADDR
// for i in tmp do
5506: LD_ADDR_VAR 0 1
5510: PUSH
5511: LD_VAR 0 2
5515: PUSH
5516: FOR_IN
5517: IFFALSE 5565
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5519: LD_VAR 0 1
5523: PPUSH
5524: LD_INT 187
5526: PUSH
5527: LD_INT 114
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: LD_INT 203
5536: PUSH
5537: LD_INT 113
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: LD_INT 218
5546: PUSH
5547: LD_INT 108
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL 60593 0 2
5563: GO 5516
5565: POP
5566: POP
// tmp2 := UnitFilter ( tmp2 , [ f_ok ] ) ;
5567: LD_ADDR_VAR 0 3
5571: PUSH
5572: LD_VAR 0 3
5576: PPUSH
5577: LD_INT 50
5579: PUSH
5580: EMPTY
5581: LIST
5582: PPUSH
5583: CALL_OW 72
5587: ST_TO_ADDR
// for i in tmp2 do
5588: LD_ADDR_VAR 0 1
5592: PUSH
5593: LD_VAR 0 3
5597: PUSH
5598: FOR_IN
5599: IFFALSE 5689
// if GetDistUnitXY ( i , 242 , 105 ) > 12 then
5601: LD_VAR 0 1
5605: PPUSH
5606: LD_INT 242
5608: PPUSH
5609: LD_INT 105
5611: PPUSH
5612: CALL_OW 297
5616: PUSH
5617: LD_INT 12
5619: GREATER
5620: IFFALSE 5639
// ComMoveXY ( i , 242 , 105 ) else
5622: LD_VAR 0 1
5626: PPUSH
5627: LD_INT 242
5629: PPUSH
5630: LD_INT 105
5632: PPUSH
5633: CALL_OW 111
5637: GO 5687
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_type , unit_human ] ] ) , i ) ) ;
5639: LD_VAR 0 1
5643: PPUSH
5644: LD_INT 81
5646: PUSH
5647: LD_INT 1
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 21
5656: PUSH
5657: LD_INT 1
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: PPUSH
5668: CALL_OW 69
5672: PPUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: CALL_OW 74
5682: PPUSH
5683: CALL_OW 115
5687: GO 5598
5689: POP
5690: POP
// until not tmp ;
5691: LD_VAR 0 2
5695: NOT
5696: IFFALSE 5478
// end ; end_of_file
5698: PPOPN 3
5700: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5701: LD_INT 0
5703: PPUSH
5704: PPUSH
5705: PPUSH
5706: PPUSH
5707: PPUSH
5708: PPUSH
5709: PPUSH
// uc_side := 8 ;
5710: LD_ADDR_OWVAR 20
5714: PUSH
5715: LD_INT 8
5717: ST_TO_ADDR
// uc_nation := nation_arabian ;
5718: LD_ADDR_OWVAR 21
5722: PUSH
5723: LD_INT 2
5725: ST_TO_ADDR
// legForces := [ ] ;
5726: LD_ADDR_EXP 36
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// legEForces := [ ] ;
5733: LD_ADDR_EXP 37
5737: PUSH
5738: EMPTY
5739: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5740: LD_ADDR_EXP 38
5744: PUSH
5745: LD_INT 8
5747: PPUSH
5748: LD_INT 2
5750: PPUSH
5751: LD_INT 1
5753: PPUSH
5754: CALL 20361 0 3
5758: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5759: LD_ADDR_EXP 39
5763: PUSH
5764: LD_INT 13
5766: PUSH
5767: LD_INT 1
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: LD_INT 32
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5785: LD_ADDR_EXP 40
5789: PUSH
5790: LD_INT 195
5792: PUSH
5793: LD_INT 15
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: ST_TO_ADDR
// legBuildings := [ ] ;
5800: LD_ADDR_EXP 41
5804: PUSH
5805: EMPTY
5806: ST_TO_ADDR
// legTanks := [ ] ;
5807: LD_ADDR_EXP 42
5811: PUSH
5812: EMPTY
5813: ST_TO_ADDR
// legRTanks := [ ] ;
5814: LD_ADDR_EXP 43
5818: PUSH
5819: EMPTY
5820: ST_TO_ADDR
// legCargo := 0 ;
5821: LD_ADDR_EXP 44
5825: PUSH
5826: LD_INT 0
5828: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5829: LD_ADDR_VAR 0 7
5833: PUSH
5834: LD_INT 219
5836: PUSH
5837: LD_INT 31
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PUSH
5844: LD_INT 166
5846: PUSH
5847: LD_INT 31
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: ST_TO_ADDR
// for i in sources do
5858: LD_ADDR_VAR 0 2
5862: PUSH
5863: LD_VAR 0 7
5867: PUSH
5868: FOR_IN
5869: IFFALSE 5898
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 8 ) ;
5871: LD_VAR 0 2
5875: PUSH
5876: LD_INT 1
5878: ARRAY
5879: PPUSH
5880: LD_VAR 0 2
5884: PUSH
5885: LD_INT 2
5887: ARRAY
5888: PPUSH
5889: LD_INT 8
5891: PPUSH
5892: CALL_OW 441
5896: GO 5868
5898: POP
5899: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
5900: LD_INT 38
5902: PPUSH
5903: CALL_OW 274
5907: PPUSH
5908: LD_INT 1
5910: PPUSH
5911: LD_INT 650
5913: PPUSH
5914: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
5918: LD_INT 38
5920: PPUSH
5921: CALL_OW 274
5925: PPUSH
5926: LD_INT 2
5928: PPUSH
5929: LD_INT 120
5931: PPUSH
5932: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
5936: LD_INT 38
5938: PPUSH
5939: CALL_OW 274
5943: PPUSH
5944: LD_INT 3
5946: PPUSH
5947: LD_INT 50
5949: PPUSH
5950: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5954: LD_ADDR_VAR 0 6
5958: PUSH
5959: LD_INT 6
5961: PUSH
5962: LD_INT 7
5964: PUSH
5965: LD_INT 8
5967: PUSH
5968: LD_INT 9
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: PUSH
5977: LD_OWVAR 67
5981: ARRAY
5982: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
5983: LD_ADDR_EXP 35
5987: PUSH
5988: LD_STRING Farmer
5990: PPUSH
5991: LD_INT 0
5993: PPUSH
5994: LD_STRING 
5996: PPUSH
5997: CALL 20298 0 3
6001: ST_TO_ADDR
// for i := 1 to 4 do
6002: LD_ADDR_VAR 0 2
6006: PUSH
6007: DOUBLE
6008: LD_INT 1
6010: DEC
6011: ST_TO_ADDR
6012: LD_INT 4
6014: PUSH
6015: FOR_TO
6016: IFFALSE 6533
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
6018: LD_ADDR_VAR 0 3
6022: PUSH
6023: DOUBLE
6024: LD_INT 1
6026: DEC
6027: ST_TO_ADDR
6028: LD_INT 7
6030: PUSH
6031: LD_INT 8
6033: PUSH
6034: LD_INT 9
6036: PUSH
6037: LD_INT 11
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: LD_OWVAR 67
6050: ARRAY
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 4
6057: PUSH
6058: LD_INT 5
6060: PUSH
6061: LD_INT 5
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: PUSH
6070: LD_OWVAR 67
6074: ARRAY
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: LD_INT 2
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: LD_INT 3
6087: PUSH
6088: LD_INT 3
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: LD_OWVAR 67
6101: ARRAY
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: LD_VAR 0 2
6113: ARRAY
6114: PUSH
6115: FOR_TO
6116: IFFALSE 6529
// begin PrepareHuman ( false , i , skill ) ;
6118: LD_INT 0
6120: PPUSH
6121: LD_VAR 0 2
6125: PPUSH
6126: LD_VAR 0 6
6130: PPUSH
6131: CALL_OW 380
// un := CreateHuman ;
6135: LD_ADDR_VAR 0 5
6139: PUSH
6140: CALL_OW 44
6144: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6145: LD_ADDR_EXP 36
6149: PUSH
6150: LD_EXP 36
6154: PPUSH
6155: LD_VAR 0 5
6159: PPUSH
6160: CALL 57989 0 2
6164: ST_TO_ADDR
// case i of 1 :
6165: LD_VAR 0 2
6169: PUSH
6170: LD_INT 1
6172: DOUBLE
6173: EQUAL
6174: IFTRUE 6178
6176: GO 6247
6178: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6179: LD_ADDR_VAR 0 4
6183: PUSH
6184: LD_INT 22
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 2
6196: PUSH
6197: LD_INT 30
6199: PUSH
6200: LD_INT 32
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 30
6209: PUSH
6210: LD_INT 5
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: LD_INT 62
6227: PUSH
6228: EMPTY
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: PPUSH
6240: CALL_OW 69
6244: ST_TO_ADDR
6245: GO 6426
6247: LD_INT 2
6249: DOUBLE
6250: EQUAL
6251: IFTRUE 6255
6253: GO 6284
6255: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6256: LD_ADDR_VAR 0 4
6260: PUSH
6261: LD_INT 38
6263: PPUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 62
6269: PUSH
6270: EMPTY
6271: LIST
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PPUSH
6277: CALL_OW 72
6281: ST_TO_ADDR
6282: GO 6426
6284: LD_INT 3
6286: DOUBLE
6287: EQUAL
6288: IFTRUE 6292
6290: GO 6366
6292: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6293: LD_ADDR_VAR 0 4
6297: PUSH
6298: LD_INT 22
6300: PUSH
6301: LD_INT 8
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: LD_INT 30
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 30
6323: PUSH
6324: LD_INT 36
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 62
6341: PUSH
6342: EMPTY
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: PPUSH
6354: CALL_OW 69
6358: PPUSH
6359: CALL 53276 0 1
6363: ST_TO_ADDR
6364: GO 6426
6366: LD_INT 4
6368: DOUBLE
6369: EQUAL
6370: IFTRUE 6374
6372: GO 6425
6374: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6375: LD_ADDR_VAR 0 4
6379: PUSH
6380: LD_INT 22
6382: PUSH
6383: LD_INT 8
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 30
6392: PUSH
6393: LD_INT 8
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 3
6402: PUSH
6403: LD_INT 62
6405: PUSH
6406: EMPTY
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 69
6422: ST_TO_ADDR
6423: GO 6426
6425: POP
// if b then
6426: LD_VAR 0 4
6430: IFFALSE 6506
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6432: LD_VAR 0 4
6436: PUSH
6437: LD_INT 1
6439: ARRAY
6440: PPUSH
6441: CALL_OW 266
6445: PUSH
6446: LD_INT 5
6448: EQUAL
6449: IFFALSE 6486
// if Prob ( 50 ) then
6451: LD_INT 50
6453: PPUSH
6454: CALL_OW 13
6458: IFFALSE 6474
// SetClass ( un , class_mortar ) else
6460: LD_VAR 0 5
6464: PPUSH
6465: LD_INT 8
6467: PPUSH
6468: CALL_OW 336
6472: GO 6486
// SetClass ( un , class_sniper ) ;
6474: LD_VAR 0 5
6478: PPUSH
6479: LD_INT 5
6481: PPUSH
6482: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6486: LD_VAR 0 5
6490: PPUSH
6491: LD_VAR 0 4
6495: PUSH
6496: LD_INT 1
6498: ARRAY
6499: PPUSH
6500: CALL_OW 52
// end else
6504: GO 6527
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6506: LD_VAR 0 5
6510: PPUSH
6511: LD_INT 188
6513: PPUSH
6514: LD_INT 21
6516: PPUSH
6517: LD_INT 4
6519: PPUSH
6520: LD_INT 0
6522: PPUSH
6523: CALL_OW 50
// end ;
6527: GO 6115
6529: POP
6530: POP
6531: GO 6015
6533: POP
6534: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6535: LD_ADDR_VAR 0 4
6539: PUSH
6540: LD_INT 22
6542: PUSH
6543: LD_INT 8
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: LD_INT 30
6555: PUSH
6556: LD_INT 32
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 30
6565: PUSH
6566: LD_INT 5
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 3
6580: PUSH
6581: LD_INT 62
6583: PUSH
6584: EMPTY
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PPUSH
6596: CALL_OW 69
6600: ST_TO_ADDR
// if b then
6601: LD_VAR 0 4
6605: IFFALSE 6672
// begin for i in b do
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_VAR 0 4
6616: PUSH
6617: FOR_IN
6618: IFFALSE 6670
// begin PrepareApemanSoldier ( ) ;
6620: CALL 54099 0 0
// un := CreateHuman ;
6624: LD_ADDR_VAR 0 5
6628: PUSH
6629: CALL_OW 44
6633: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6634: LD_ADDR_EXP 36
6638: PUSH
6639: LD_EXP 36
6643: PPUSH
6644: LD_VAR 0 5
6648: PPUSH
6649: CALL 57989 0 2
6653: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6654: LD_VAR 0 5
6658: PPUSH
6659: LD_VAR 0 2
6663: PPUSH
6664: CALL_OW 52
// end ;
6668: GO 6617
6670: POP
6671: POP
// end ; for i := 1 to 2 do
6672: LD_ADDR_VAR 0 2
6676: PUSH
6677: DOUBLE
6678: LD_INT 1
6680: DEC
6681: ST_TO_ADDR
6682: LD_INT 2
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6813
// begin uc_nation := nation_arabian ;
6688: LD_ADDR_OWVAR 21
6692: PUSH
6693: LD_INT 2
6695: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6696: LD_INT 13
6698: PPUSH
6699: LD_INT 2
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: LD_INT 31
6707: PPUSH
6708: LD_INT 100
6710: PPUSH
6711: CALL 25138 0 5
// un := CreateVehicle ;
6715: LD_ADDR_VAR 0 5
6719: PUSH
6720: CALL_OW 45
6724: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6725: LD_VAR 0 5
6729: PPUSH
6730: LD_INT 0
6732: PPUSH
6733: LD_INT 5
6735: PPUSH
6736: CALL_OW 12
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_INT 199
6752: PPUSH
6753: LD_INT 24
6755: PPUSH
6756: LD_INT 4
6758: PPUSH
6759: LD_INT 0
6761: PPUSH
6762: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6766: LD_INT 0
6768: PPUSH
6769: LD_INT 8
6771: PUSH
6772: LD_INT 9
6774: PUSH
6775: LD_INT 10
6777: PUSH
6778: LD_INT 10
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_OWVAR 67
6791: ARRAY
6792: PPUSH
6793: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6797: CALL_OW 44
6801: PPUSH
6802: LD_VAR 0 5
6806: PPUSH
6807: CALL_OW 52
// end ;
6811: GO 6685
6813: POP
6814: POP
// end ;
6815: LD_VAR 0 1
6819: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6820: LD_EXP 4
6824: PUSH
6825: LD_EXP 36
6829: PPUSH
6830: CALL 22400 0 1
6834: AND
6835: IFFALSE 9208
6837: GO 6839
6839: DISABLE
6840: LD_INT 0
6842: PPUSH
6843: PPUSH
6844: PPUSH
6845: PPUSH
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
// begin enable ;
6860: ENABLE
// side := 8 ;
6861: LD_ADDR_VAR 0 5
6865: PUSH
6866: LD_INT 8
6868: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6869: LD_ADDR_VAR 0 3
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_VAR 0 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 33
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 50
6898: PUSH
6899: EMPTY
6900: LIST
6901: PUSH
6902: LD_INT 3
6904: PUSH
6905: LD_INT 61
6907: PUSH
6908: EMPTY
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PPUSH
6921: CALL_OW 69
6925: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
6926: LD_VAR 0 3
6930: PUSH
6931: LD_INT 22
6933: PUSH
6934: LD_VAR 0 5
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 50
6945: PUSH
6946: EMPTY
6947: LIST
6948: PUSH
6949: LD_INT 34
6951: PUSH
6952: LD_INT 31
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: PPUSH
6964: CALL_OW 69
6968: PPUSH
6969: CALL 22400 0 1
6973: AND
6974: IFFALSE 7002
// for i in remote do
6976: LD_ADDR_VAR 0 1
6980: PUSH
6981: LD_VAR 0 3
6985: PUSH
6986: FOR_IN
6987: IFFALSE 7000
// Connect ( i ) ;
6989: LD_VAR 0 1
6993: PPUSH
6994: CALL 28606 0 1
6998: GO 6986
7000: POP
7001: POP
// if legTech then
7002: LD_EXP 38
7006: IFFALSE 7162
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7008: LD_ADDR_VAR 0 6
7012: PUSH
7013: LD_INT 22
7015: PUSH
7016: LD_VAR 0 5
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 50
7027: PUSH
7028: EMPTY
7029: LIST
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: LD_INT 30
7036: PUSH
7037: LD_INT 6
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 30
7046: PUSH
7047: LD_INT 7
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 30
7056: PUSH
7057: LD_INT 8
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 69
7079: ST_TO_ADDR
// if lab then
7080: LD_VAR 0 6
7084: IFFALSE 7162
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7086: LD_VAR 0 6
7090: PUSH
7091: LD_INT 1
7093: ARRAY
7094: PPUSH
7095: CALL_OW 461
7099: PUSH
7100: LD_INT 2
7102: EQUAL
7103: IFFALSE 7162
// begin for i in legTech do
7105: LD_ADDR_VAR 0 1
7109: PUSH
7110: LD_EXP 38
7114: PUSH
7115: FOR_IN
7116: IFFALSE 7160
// if CanBeResearched ( lab [ 1 ] , i ) then
7118: LD_VAR 0 6
7122: PUSH
7123: LD_INT 1
7125: ARRAY
7126: PPUSH
7127: LD_VAR 0 1
7131: PPUSH
7132: CALL_OW 430
7136: IFFALSE 7158
// begin ComResearch ( lab [ 1 ] , i ) ;
7138: LD_VAR 0 6
7142: PUSH
7143: LD_INT 1
7145: ARRAY
7146: PPUSH
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 124
// break ;
7156: GO 7160
// end ;
7158: GO 7115
7160: POP
7161: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7162: LD_ADDR_VAR 0 16
7166: PUSH
7167: LD_INT 2
7169: PPUSH
7170: LD_INT 22
7172: PUSH
7173: LD_VAR 0 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 30
7184: PUSH
7185: LD_INT 3
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: LD_INT 50
7194: PUSH
7195: EMPTY
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 70
7207: ST_TO_ADDR
// if fac then
7208: LD_VAR 0 16
7212: IFFALSE 7478
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7214: LD_VAR 0 16
7218: PUSH
7219: LD_INT 1
7221: ARRAY
7222: PPUSH
7223: CALL_OW 461
7227: PUSH
7228: LD_INT 2
7230: EQUAL
7231: IFFALSE 7478
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7233: LD_ADDR_VAR 0 17
7237: PUSH
7238: LD_INT 2
7240: PPUSH
7241: LD_INT 2
7243: PUSH
7244: LD_INT 30
7246: PUSH
7247: LD_INT 32
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 30
7256: PUSH
7257: LD_INT 33
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 35
7271: PUSH
7272: LD_INT 0
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 70
7287: ST_TO_ADDR
// if emptyTowers then
7288: LD_VAR 0 17
7292: IFFALSE 7340
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7294: LD_ADDR_VAR 0 18
7298: PUSH
7299: LD_VAR 0 17
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: PPUSH
7308: LD_INT 2
7310: PPUSH
7311: CALL 30645 0 2
7315: ST_TO_ADDR
// if weapon then
7316: LD_VAR 0 18
7320: IFFALSE 7340
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7322: LD_VAR 0 17
7326: PUSH
7327: LD_INT 1
7329: ARRAY
7330: PPUSH
7331: LD_VAR 0 18
7335: PPUSH
7336: CALL_OW 148
// end ; if legConstructList then
7340: LD_EXP 39
7344: IFFALSE 7478
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7346: LD_VAR 0 16
7350: PUSH
7351: LD_INT 1
7353: ARRAY
7354: PPUSH
7355: LD_EXP 39
7359: PUSH
7360: LD_INT 1
7362: ARRAY
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: LD_EXP 39
7372: PUSH
7373: LD_INT 1
7375: ARRAY
7376: PUSH
7377: LD_INT 2
7379: ARRAY
7380: PPUSH
7381: LD_EXP 39
7385: PUSH
7386: LD_INT 1
7388: ARRAY
7389: PUSH
7390: LD_INT 3
7392: ARRAY
7393: PPUSH
7394: LD_EXP 39
7398: PUSH
7399: LD_INT 1
7401: ARRAY
7402: PUSH
7403: LD_INT 4
7405: ARRAY
7406: PPUSH
7407: CALL_OW 448
7411: IFFALSE 7478
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7413: LD_VAR 0 16
7417: PUSH
7418: LD_INT 1
7420: ARRAY
7421: PPUSH
7422: LD_EXP 39
7426: PUSH
7427: LD_INT 1
7429: ARRAY
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: LD_EXP 39
7439: PUSH
7440: LD_INT 1
7442: ARRAY
7443: PUSH
7444: LD_INT 2
7446: ARRAY
7447: PPUSH
7448: LD_EXP 39
7452: PUSH
7453: LD_INT 1
7455: ARRAY
7456: PUSH
7457: LD_INT 3
7459: ARRAY
7460: PPUSH
7461: LD_EXP 39
7465: PUSH
7466: LD_INT 1
7468: ARRAY
7469: PUSH
7470: LD_INT 4
7472: ARRAY
7473: PPUSH
7474: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7478: LD_ADDR_VAR 0 2
7482: PUSH
7483: LD_INT 2
7485: PPUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: LD_INT 57
7501: PUSH
7502: EMPTY
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 3
7511: PUSH
7512: LD_INT 24
7514: PUSH
7515: LD_INT 1000
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 70
7535: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7536: LD_ADDR_VAR 0 10
7540: PUSH
7541: LD_INT 14
7543: PPUSH
7544: CALL_OW 435
7548: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7549: LD_ADDR_VAR 0 11
7553: PUSH
7554: LD_EXP 36
7558: PPUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 4
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 50
7571: PUSH
7572: EMPTY
7573: LIST
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 72
7583: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7584: LD_ADDR_VAR 0 6
7588: PUSH
7589: LD_INT 2
7591: PPUSH
7592: LD_INT 2
7594: PUSH
7595: LD_INT 30
7597: PUSH
7598: LD_INT 6
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 30
7607: PUSH
7608: LD_INT 7
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 30
7617: PUSH
7618: LD_INT 8
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 70
7635: ST_TO_ADDR
// if sci then
7636: LD_VAR 0 11
7640: IFFALSE 7799
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7642: LD_ADDR_VAR 0 13
7646: PUSH
7647: LD_EXP 36
7651: PPUSH
7652: LD_INT 95
7654: PUSH
7655: LD_INT 2
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 120
7664: PUSH
7665: LD_INT 1
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 72
7680: ST_TO_ADDR
// if hurtUnits then
7681: LD_VAR 0 13
7685: IFFALSE 7746
// begin for i in sci do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_VAR 0 11
7696: PUSH
7697: FOR_IN
7698: IFFALSE 7742
// if IsInUnit ( i ) then
7700: LD_VAR 0 1
7704: PPUSH
7705: CALL_OW 310
7709: IFFALSE 7722
// ComExitBuilding ( i ) else
7711: LD_VAR 0 1
7715: PPUSH
7716: CALL_OW 122
7720: GO 7740
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7722: LD_VAR 0 1
7726: PPUSH
7727: LD_VAR 0 13
7731: PUSH
7732: LD_INT 1
7734: ARRAY
7735: PPUSH
7736: CALL_OW 128
7740: GO 7697
7742: POP
7743: POP
// end else
7744: GO 7799
// if lab then
7746: LD_VAR 0 6
7750: IFFALSE 7799
// begin for i in sci do
7752: LD_ADDR_VAR 0 1
7756: PUSH
7757: LD_VAR 0 11
7761: PUSH
7762: FOR_IN
7763: IFFALSE 7797
// if not IsInUnit ( i ) then
7765: LD_VAR 0 1
7769: PPUSH
7770: CALL_OW 310
7774: NOT
7775: IFFALSE 7795
// ComEnterUnit ( i , lab [ 1 ] ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_VAR 0 6
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: CALL_OW 120
7795: GO 7762
7797: POP
7798: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
7799: LD_ADDR_VAR 0 7
7803: PUSH
7804: LD_EXP 36
7808: PPUSH
7809: LD_INT 25
7811: PUSH
7812: LD_INT 2
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PPUSH
7819: CALL_OW 72
7823: ST_TO_ADDR
// if eng then
7824: LD_VAR 0 7
7828: IFFALSE 8603
// begin for i in eng do
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_VAR 0 7
7839: PUSH
7840: FOR_IN
7841: IFFALSE 8601
// begin tag := GetTag ( i ) ;
7843: LD_ADDR_VAR 0 8
7847: PUSH
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 110
7857: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 256
7867: PUSH
7868: LD_INT 800
7870: LESS
7871: PUSH
7872: LD_VAR 0 8
7876: PUSH
7877: LD_INT 1
7879: NONEQUAL
7880: AND
7881: IFFALSE 7931
// begin SetTag ( i , tHeal ) ;
7883: LD_VAR 0 1
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7895: LD_VAR 0 1
7899: PPUSH
7900: LD_EXP 40
7904: PUSH
7905: LD_INT 1
7907: ARRAY
7908: PPUSH
7909: LD_EXP 40
7913: PUSH
7914: LD_INT 2
7916: ARRAY
7917: PPUSH
7918: CALL_OW 111
// AddComHold ( i ) ;
7922: LD_VAR 0 1
7926: PPUSH
7927: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7931: LD_VAR 0 8
7935: PUSH
7936: LD_INT 1
7938: EQUAL
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 256
7949: PUSH
7950: LD_INT 1000
7952: EQUAL
7953: AND
7954: IFFALSE 7968
// SetTag ( i , 0 ) ;
7956: LD_VAR 0 1
7960: PPUSH
7961: LD_INT 0
7963: PPUSH
7964: CALL_OW 109
// if not tag then
7968: LD_VAR 0 8
7972: NOT
7973: IFFALSE 8141
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
7975: LD_ADDR_VAR 0 4
7979: PUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_INT 57
7985: PUSH
7986: EMPTY
7987: LIST
7988: PPUSH
7989: CALL_OW 70
7993: ST_TO_ADDR
// if undone then
7994: LD_VAR 0 4
7998: IFFALSE 8020
// begin ComComplete ( i , undone [ 1 ] ) ;
8000: LD_VAR 0 1
8004: PPUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_INT 1
8012: ARRAY
8013: PPUSH
8014: CALL 28498 0 2
// continue ;
8018: GO 7840
// end ; if cr or tmp or Count ( legBuildings ) then
8020: LD_VAR 0 10
8024: PUSH
8025: LD_VAR 0 2
8029: OR
8030: PUSH
8031: LD_EXP 41
8035: PPUSH
8036: CALL 22400 0 1
8040: OR
8041: IFFALSE 8117
// begin if IsInUnit ( i ) then
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 310
8052: IFFALSE 8063
// ComExitBuilding ( i ) ;
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 122
// if tmp then
8063: LD_VAR 0 2
8067: IFFALSE 8083
// SetTag ( i , tRepair ) else
8069: LD_VAR 0 1
8073: PPUSH
8074: LD_INT 3
8076: PPUSH
8077: CALL_OW 109
8081: GO 8115
// if cr then
8083: LD_VAR 0 10
8087: IFFALSE 8103
// SetTag ( i , tCrates ) else
8089: LD_VAR 0 1
8093: PPUSH
8094: LD_INT 2
8096: PPUSH
8097: CALL_OW 109
8101: GO 8115
// SetTag ( i , tBuild ) ;
8103: LD_VAR 0 1
8107: PPUSH
8108: LD_INT 5
8110: PPUSH
8111: CALL_OW 109
// end else
8115: GO 8141
// if not IsInUnit ( i ) then
8117: LD_VAR 0 1
8121: PPUSH
8122: CALL_OW 310
8126: NOT
8127: IFFALSE 8141
// ComEnterUnit ( i , legBase ) ;
8129: LD_VAR 0 1
8133: PPUSH
8134: LD_INT 38
8136: PPUSH
8137: CALL_OW 120
// end ; if tag = tRepair then
8141: LD_VAR 0 8
8145: PUSH
8146: LD_INT 3
8148: EQUAL
8149: IFFALSE 8251
// begin if IsInUnit ( i ) then
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 310
8160: IFFALSE 8173
// begin ComExitBuilding ( i ) ;
8162: LD_VAR 0 1
8166: PPUSH
8167: CALL_OW 122
// continue ;
8171: GO 7840
// end ; if not tmp then
8173: LD_VAR 0 2
8177: NOT
8178: IFFALSE 8194
// begin SetTag ( i , 0 ) ;
8180: LD_VAR 0 1
8184: PPUSH
8185: LD_INT 0
8187: PPUSH
8188: CALL_OW 109
// continue ;
8192: GO 7840
// end ; if not HasTask ( i ) then
8194: LD_VAR 0 1
8198: PPUSH
8199: CALL_OW 314
8203: NOT
8204: IFFALSE 8224
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8206: LD_VAR 0 1
8210: PPUSH
8211: LD_VAR 0 2
8215: PUSH
8216: LD_INT 1
8218: ARRAY
8219: PPUSH
8220: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_INT 2
8231: PPUSH
8232: CALL_OW 308
8236: NOT
8237: IFFALSE 8251
// ComMoveToArea ( i , legBaseArea ) ;
8239: LD_VAR 0 1
8243: PPUSH
8244: LD_INT 2
8246: PPUSH
8247: CALL_OW 113
// end ; if tag = tBuild then
8251: LD_VAR 0 8
8255: PUSH
8256: LD_INT 5
8258: EQUAL
8259: IFFALSE 8454
// begin if IsInUnit ( i ) then
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 310
8270: IFFALSE 8283
// begin ComExitBuilding ( i ) ;
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL_OW 122
// continue ;
8281: GO 7840
// end ; if not Count ( legBuildings ) then
8283: LD_EXP 41
8287: PPUSH
8288: CALL 22400 0 1
8292: NOT
8293: IFFALSE 8311
// begin SetTag ( i , 0 ) ;
8295: LD_VAR 0 1
8299: PPUSH
8300: LD_INT 0
8302: PPUSH
8303: CALL_OW 109
// continue ;
8307: GO 7840
// end else
8309: GO 8348
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8311: LD_INT 38
8313: PPUSH
8314: LD_EXP 41
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PUSH
8323: LD_INT 1
8325: ARRAY
8326: PPUSH
8327: CALL 61908 0 2
8331: NOT
8332: IFFALSE 8348
// begin SetTag ( i , 0 ) ;
8334: LD_VAR 0 1
8338: PPUSH
8339: LD_INT 0
8341: PPUSH
8342: CALL_OW 109
// continue ;
8346: GO 7840
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8348: LD_ADDR_VAR 0 4
8352: PUSH
8353: LD_INT 2
8355: PPUSH
8356: LD_INT 57
8358: PUSH
8359: EMPTY
8360: LIST
8361: PPUSH
8362: CALL_OW 70
8366: ST_TO_ADDR
// if undone then
8367: LD_VAR 0 4
8371: IFFALSE 8393
// begin ComComplete ( i , undone [ 1 ] ) ;
8373: LD_VAR 0 1
8377: PPUSH
8378: LD_VAR 0 4
8382: PUSH
8383: LD_INT 1
8385: ARRAY
8386: PPUSH
8387: CALL 28498 0 2
// continue ;
8391: GO 7840
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8393: LD_VAR 0 1
8397: PPUSH
8398: LD_EXP 41
8402: PUSH
8403: LD_INT 1
8405: ARRAY
8406: PUSH
8407: LD_INT 1
8409: ARRAY
8410: PPUSH
8411: LD_EXP 41
8415: PUSH
8416: LD_INT 1
8418: ARRAY
8419: PUSH
8420: LD_INT 2
8422: ARRAY
8423: PPUSH
8424: LD_EXP 41
8428: PUSH
8429: LD_INT 1
8431: ARRAY
8432: PUSH
8433: LD_INT 3
8435: ARRAY
8436: PPUSH
8437: LD_EXP 41
8441: PUSH
8442: LD_INT 1
8444: ARRAY
8445: PUSH
8446: LD_INT 4
8448: ARRAY
8449: PPUSH
8450: CALL_OW 145
// end ; if tag = tCrates then
8454: LD_VAR 0 8
8458: PUSH
8459: LD_INT 2
8461: EQUAL
8462: IFFALSE 8599
// begin if IsInUnit ( i ) then
8464: LD_VAR 0 1
8468: PPUSH
8469: CALL_OW 310
8473: IFFALSE 8486
// begin ComExitBuilding ( i ) ;
8475: LD_VAR 0 1
8479: PPUSH
8480: CALL_OW 122
// continue ;
8484: GO 7840
// end ; if not cr then
8486: LD_VAR 0 10
8490: NOT
8491: IFFALSE 8507
// begin SetTag ( i , 0 ) ;
8493: LD_VAR 0 1
8497: PPUSH
8498: LD_INT 0
8500: PPUSH
8501: CALL_OW 109
// continue ;
8505: GO 7840
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 314
8516: NOT
8517: PUSH
8518: LD_INT 81
8520: PUSH
8521: LD_VAR 0 5
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 92
8532: PUSH
8533: LD_VAR 0 10
8537: PUSH
8538: LD_INT 1
8540: ARRAY
8541: PUSH
8542: LD_VAR 0 10
8546: PUSH
8547: LD_INT 2
8549: ARRAY
8550: PUSH
8551: LD_INT 12
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: NOT
8569: AND
8570: IFFALSE 8599
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8572: LD_VAR 0 1
8576: PPUSH
8577: LD_VAR 0 10
8581: PUSH
8582: LD_INT 1
8584: ARRAY
8585: PPUSH
8586: LD_VAR 0 10
8590: PUSH
8591: LD_INT 2
8593: ARRAY
8594: PPUSH
8595: CALL_OW 117
// end ; end ;
8599: GO 7840
8601: POP
8602: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8603: LD_ADDR_VAR 0 12
8607: PUSH
8608: LD_EXP 36
8612: PPUSH
8613: LD_INT 2
8615: PUSH
8616: LD_INT 25
8618: PUSH
8619: LD_INT 1
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 25
8628: PUSH
8629: LD_INT 5
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 8
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 50
8654: PUSH
8655: EMPTY
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 72
8666: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8667: LD_ADDR_VAR 0 14
8671: PUSH
8672: LD_INT 2
8674: PPUSH
8675: LD_INT 81
8677: PUSH
8678: LD_VAR 0 5
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 70
8691: ST_TO_ADDR
// if sol then
8692: LD_VAR 0 12
8696: IFFALSE 9208
// begin if enemyInBase then
8698: LD_VAR 0 14
8702: IFFALSE 8847
// begin for i in sol do
8704: LD_ADDR_VAR 0 1
8708: PUSH
8709: LD_VAR 0 12
8713: PUSH
8714: FOR_IN
8715: IFFALSE 8843
// begin tw := IsInUnit ( i ) ;
8717: LD_ADDR_VAR 0 9
8721: PUSH
8722: LD_VAR 0 1
8726: PPUSH
8727: CALL_OW 310
8731: ST_TO_ADDR
// if tw then
8732: LD_VAR 0 9
8736: IFFALSE 8817
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8738: LD_VAR 0 9
8742: PUSH
8743: LD_INT 22
8745: PUSH
8746: LD_VAR 0 5
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 101
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: LD_INT 30
8770: PUSH
8771: LD_INT 32
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 30
8780: PUSH
8781: LD_INT 31
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 69
8802: IN
8803: NOT
8804: IFFALSE 8815
// ComExitBuilding ( i ) ;
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL_OW 122
// end else
8815: GO 8841
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
8817: LD_VAR 0 1
8821: PPUSH
8822: LD_VAR 0 14
8826: PPUSH
8827: LD_VAR 0 1
8831: PPUSH
8832: CALL_OW 74
8836: PPUSH
8837: CALL_OW 115
// end ;
8841: GO 8714
8843: POP
8844: POP
// end else
8845: GO 9208
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8847: LD_ADDR_VAR 0 15
8851: PUSH
8852: LD_INT 2
8854: PPUSH
8855: LD_INT 3
8857: PUSH
8858: LD_INT 62
8860: PUSH
8861: EMPTY
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: LD_INT 2
8870: PUSH
8871: LD_INT 30
8873: PUSH
8874: LD_INT 32
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 30
8883: PUSH
8884: LD_INT 4
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 30
8893: PUSH
8894: LD_INT 5
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: LD_INT 30
8903: PUSH
8904: LD_INT 31
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PPUSH
8922: CALL_OW 70
8926: ST_TO_ADDR
// if empty then
8927: LD_VAR 0 15
8931: IFFALSE 8948
// empty := ReverseArray ( empty ) ;
8933: LD_ADDR_VAR 0 15
8937: PUSH
8938: LD_VAR 0 15
8942: PPUSH
8943: CALL 53276 0 1
8947: ST_TO_ADDR
// for i in sol do
8948: LD_ADDR_VAR 0 1
8952: PUSH
8953: LD_VAR 0 12
8957: PUSH
8958: FOR_IN
8959: IFFALSE 9206
// begin tag := GetTag ( i ) ;
8961: LD_ADDR_VAR 0 8
8965: PUSH
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 110
8975: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8976: LD_VAR 0 1
8980: PPUSH
8981: CALL_OW 256
8985: PUSH
8986: LD_INT 1000
8988: LESS
8989: PUSH
8990: LD_VAR 0 8
8994: PUSH
8995: LD_INT 1
8997: NONEQUAL
8998: AND
8999: IFFALSE 9051
// begin SetTag ( i , tHeal ) ;
9001: LD_VAR 0 1
9005: PPUSH
9006: LD_INT 1
9008: PPUSH
9009: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
9013: LD_VAR 0 1
9017: PPUSH
9018: LD_EXP 40
9022: PUSH
9023: LD_INT 1
9025: ARRAY
9026: PPUSH
9027: LD_EXP 40
9031: PUSH
9032: LD_INT 2
9034: ARRAY
9035: PPUSH
9036: CALL_OW 111
// AddComHold ( i ) ;
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL_OW 200
// continue ;
9049: GO 8958
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL_OW 256
9060: PUSH
9061: LD_INT 1000
9063: EQUAL
9064: PUSH
9065: LD_VAR 0 8
9069: PUSH
9070: LD_INT 1
9072: EQUAL
9073: AND
9074: IFFALSE 9090
// begin SetTag ( i , 0 ) ;
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_INT 0
9083: PPUSH
9084: CALL_OW 109
// continue ;
9088: GO 8958
// end ; if HasTask ( i ) then
9090: LD_VAR 0 1
9094: PPUSH
9095: CALL_OW 314
9099: IFFALSE 9103
// continue ;
9101: GO 8958
// if not IsInUnit ( i ) and not tag and empty then
9103: LD_VAR 0 1
9107: PPUSH
9108: CALL_OW 310
9112: NOT
9113: PUSH
9114: LD_VAR 0 8
9118: NOT
9119: AND
9120: PUSH
9121: LD_VAR 0 15
9125: AND
9126: IFFALSE 9204
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9128: LD_VAR 0 1
9132: PPUSH
9133: LD_VAR 0 15
9137: PUSH
9138: LD_INT 1
9140: ARRAY
9141: PPUSH
9142: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9146: LD_VAR 0 15
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: CALL_OW 266
9159: PUSH
9160: LD_INT 5
9162: EQUAL
9163: PUSH
9164: LD_INT 50
9166: PPUSH
9167: CALL_OW 13
9171: AND
9172: IFFALSE 9186
// AddComChangeProfession ( i , class_mortar ) ;
9174: LD_VAR 0 1
9178: PPUSH
9179: LD_INT 8
9181: PPUSH
9182: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9186: LD_ADDR_VAR 0 15
9190: PUSH
9191: LD_VAR 0 15
9195: PPUSH
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 3
9203: ST_TO_ADDR
// end ; end ;
9204: GO 8958
9206: POP
9207: POP
// end ; end ; end ;
9208: PPOPN 18
9210: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9211: LD_EXP 44
9215: PPUSH
9216: CALL_OW 302
9220: PUSH
9221: LD_EXP 4
9225: AND
9226: PUSH
9227: LD_EXP 9
9231: AND
9232: IFFALSE 9514
9234: GO 9236
9236: DISABLE
9237: LD_INT 0
9239: PPUSH
9240: PPUSH
// begin enable ;
9241: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9242: LD_ADDR_VAR 0 2
9246: PUSH
9247: LD_INT 2
9249: PPUSH
9250: LD_INT 81
9252: PUSH
9253: LD_INT 8
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 50
9262: PUSH
9263: EMPTY
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PPUSH
9270: CALL_OW 70
9274: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9275: LD_ADDR_VAR 0 1
9279: PUSH
9280: LD_INT 16
9282: PPUSH
9283: CALL_OW 435
9287: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9288: LD_EXP 44
9292: PPUSH
9293: CALL_OW 261
9297: PUSH
9298: LD_INT 10
9300: LESS
9301: PUSH
9302: LD_INT 2
9304: PPUSH
9305: LD_EXP 44
9309: PPUSH
9310: CALL_OW 292
9314: NOT
9315: AND
9316: PUSH
9317: LD_EXP 44
9321: PPUSH
9322: CALL_OW 262
9326: PUSH
9327: LD_INT 1
9329: EQUAL
9330: AND
9331: IFFALSE 9345
// SetFuel ( legCargo , 100 ) ;
9333: LD_EXP 44
9337: PPUSH
9338: LD_INT 100
9340: PPUSH
9341: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9345: LD_EXP 44
9349: PPUSH
9350: CALL_OW 314
9354: NOT
9355: PUSH
9356: LD_EXP 44
9360: PPUSH
9361: LD_INT 1
9363: PPUSH
9364: CALL_OW 289
9368: PUSH
9369: LD_INT 100
9371: LESS
9372: AND
9373: PUSH
9374: LD_VAR 0 2
9378: NOT
9379: AND
9380: IFFALSE 9446
// begin if cr then
9382: LD_VAR 0 1
9386: IFFALSE 9417
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9388: LD_EXP 44
9392: PPUSH
9393: LD_VAR 0 1
9397: PUSH
9398: LD_INT 1
9400: ARRAY
9401: PPUSH
9402: LD_VAR 0 1
9406: PUSH
9407: LD_INT 2
9409: ARRAY
9410: PPUSH
9411: CALL_OW 117
9415: GO 9444
// if not IsInArea ( legCargo , cratesNorthArea ) then
9417: LD_EXP 44
9421: PPUSH
9422: LD_INT 16
9424: PPUSH
9425: CALL_OW 308
9429: NOT
9430: IFFALSE 9444
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9432: LD_EXP 44
9436: PPUSH
9437: LD_INT 16
9439: PPUSH
9440: CALL_OW 113
// exit ;
9444: GO 9514
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9446: LD_VAR 0 2
9450: PUSH
9451: LD_EXP 44
9455: PPUSH
9456: LD_INT 2
9458: PPUSH
9459: CALL_OW 308
9463: NOT
9464: AND
9465: IFFALSE 9484
// ComMoveXY ( legCargo , 194 , 17 ) else
9467: LD_EXP 44
9471: PPUSH
9472: LD_INT 194
9474: PPUSH
9475: LD_INT 17
9477: PPUSH
9478: CALL_OW 111
9482: GO 9514
// if GetCargo ( legCargo , mat_cans ) = 100 then
9484: LD_EXP 44
9488: PPUSH
9489: LD_INT 1
9491: PPUSH
9492: CALL_OW 289
9496: PUSH
9497: LD_INT 100
9499: EQUAL
9500: IFFALSE 9514
// ComGive ( legCargo , legBase ) ;
9502: LD_EXP 44
9506: PPUSH
9507: LD_INT 38
9509: PPUSH
9510: CALL_OW 161
// end ;
9514: PPOPN 2
9516: END
// every 12 12$00 trigger Count ( legTanks ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part ;
9517: LD_EXP 42
9521: PPUSH
9522: CALL 22400 0 1
9526: PUSH
9527: LD_INT 5
9529: LESS
9530: PUSH
9531: LD_EXP 4
9535: AND
9536: PUSH
9537: LD_EXP 9
9541: AND
9542: PUSH
9543: LD_EXP 7
9547: AND
9548: IFFALSE 9731
9550: GO 9552
9552: DISABLE
9553: LD_INT 0
9555: PPUSH
9556: PPUSH
9557: PPUSH
// begin enable ;
9558: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9559: LD_ADDR_VAR 0 2
9563: PUSH
9564: LD_INT 13
9566: PUSH
9567: LD_INT 28
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 13
9576: PUSH
9577: LD_INT 27
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 13
9586: PUSH
9587: LD_INT 26
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 14
9596: PUSH
9597: LD_INT 28
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 14
9606: PUSH
9607: LD_INT 25
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: DOUBLE
9627: LD_INT 1
9629: DEC
9630: ST_TO_ADDR
9631: LD_INT 3
9633: PUSH
9634: LD_INT 3
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: LD_INT 4
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: LD_OWVAR 67
9653: ARRAY
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9729
// begin part := parts [ rand ( 1 , parts ) ] ;
9658: LD_ADDR_VAR 0 3
9662: PUSH
9663: LD_VAR 0 2
9667: PUSH
9668: LD_INT 1
9670: PPUSH
9671: LD_VAR 0 2
9675: PPUSH
9676: CALL_OW 12
9680: ARRAY
9681: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
9682: LD_ADDR_EXP 39
9686: PUSH
9687: LD_EXP 39
9691: PPUSH
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: LD_INT 2
9706: PUSH
9707: LD_VAR 0 3
9711: PUSH
9712: LD_INT 2
9714: ARRAY
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PPUSH
9722: CALL 57989 0 2
9726: ST_TO_ADDR
9727: GO 9655
9729: POP
9730: POP
// end ;
9731: PPOPN 3
9733: END
// every 20 20$00 trigger not legionDestroyed and tick <= 60 60$00 do
9734: LD_EXP 12
9738: NOT
9739: PUSH
9740: LD_OWVAR 1
9744: PUSH
9745: LD_INT 126000
9747: LESSEQUAL
9748: AND
9749: IFFALSE 9788
9751: GO 9753
9753: DISABLE
// begin enable ;
9754: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
9755: LD_ADDR_EXP 39
9759: PUSH
9760: LD_EXP 39
9764: PPUSH
9765: LD_INT 14
9767: PUSH
9768: LD_INT 1
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: LD_INT 27
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: PPUSH
9783: CALL 57989 0 2
9787: ST_TO_ADDR
// end ;
9788: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
9789: LD_EXP 42
9793: PUSH
9794: LD_EXP 9
9798: AND
9799: PUSH
9800: LD_EXP 7
9804: AND
9805: IFFALSE 10398
9807: GO 9809
9809: DISABLE
9810: LD_INT 0
9812: PPUSH
9813: PPUSH
9814: PPUSH
// begin enable ;
9815: ENABLE
// if not legTanks then
9816: LD_EXP 42
9820: NOT
9821: IFFALSE 9825
// exit ;
9823: GO 10398
// for i in legTanks do
9825: LD_ADDR_VAR 0 1
9829: PUSH
9830: LD_EXP 42
9834: PUSH
9835: FOR_IN
9836: IFFALSE 10396
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
9838: LD_VAR 0 1
9842: PPUSH
9843: CALL_OW 302
9847: NOT
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 255
9858: PUSH
9859: LD_INT 8
9861: NONEQUAL
9862: OR
9863: IFFALSE 9883
// begin legTanks := legTanks diff i ;
9865: LD_ADDR_EXP 42
9869: PUSH
9870: LD_EXP 42
9874: PUSH
9875: LD_VAR 0 1
9879: DIFF
9880: ST_TO_ADDR
// continue ;
9881: GO 9835
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
9883: LD_VAR 0 1
9887: PPUSH
9888: CALL_OW 110
9892: NOT
9893: PUSH
9894: LD_VAR 0 1
9898: PPUSH
9899: CALL_OW 263
9903: PUSH
9904: LD_INT 2
9906: EQUAL
9907: AND
9908: IFFALSE 9922
// SetTag ( i , tAttack ) ;
9910: LD_VAR 0 1
9914: PPUSH
9915: LD_INT 10
9917: PPUSH
9918: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 110
9931: NOT
9932: PUSH
9933: LD_VAR 0 1
9937: PPUSH
9938: CALL_OW 110
9942: PUSH
9943: LD_INT 0
9945: EQUAL
9946: OR
9947: IFFALSE 10077
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9949: LD_VAR 0 1
9953: PPUSH
9954: CALL_OW 261
9958: PUSH
9959: LD_INT 50
9961: LESS
9962: PUSH
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 262
9972: PUSH
9973: LD_INT 1
9975: EQUAL
9976: AND
9977: IFFALSE 10036
// begin ComMoveXY ( i , 189 , 19 ) ;
9979: LD_VAR 0 1
9983: PPUSH
9984: LD_INT 189
9986: PPUSH
9987: LD_INT 19
9989: PPUSH
9990: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9994: LD_INT 35
9996: PPUSH
9997: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
10001: LD_VAR 0 1
10005: PPUSH
10006: LD_INT 189
10008: PPUSH
10009: LD_INT 19
10011: PPUSH
10012: CALL_OW 297
10016: PUSH
10017: LD_INT 4
10019: LESS
10020: IFFALSE 9994
// SetFuel ( i , 100 ) ;
10022: LD_VAR 0 1
10026: PPUSH
10027: LD_INT 100
10029: PPUSH
10030: CALL_OW 240
// end else
10034: GO 10077
// if not IsInArea ( i , legParkingArea ) then
10036: LD_VAR 0 1
10040: PPUSH
10041: LD_INT 15
10043: PPUSH
10044: CALL_OW 308
10048: NOT
10049: IFFALSE 10065
// ComMoveToArea ( i , legParkingArea ) else
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_INT 15
10058: PPUSH
10059: CALL_OW 113
10063: GO 10077
// SetTag ( i , tParking ) ;
10065: LD_VAR 0 1
10069: PPUSH
10070: LD_INT 9
10072: PPUSH
10073: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
10077: LD_VAR 0 1
10081: PPUSH
10082: CALL_OW 110
10086: PUSH
10087: LD_INT 9
10089: EQUAL
10090: IFFALSE 10220
// begin if GetLives ( i ) < 650 then
10092: LD_VAR 0 1
10096: PPUSH
10097: CALL_OW 256
10101: PUSH
10102: LD_INT 650
10104: LESS
10105: IFFALSE 10197
// begin if not IsDrivenBy ( i ) then
10107: LD_VAR 0 1
10111: PPUSH
10112: CALL_OW 311
10116: NOT
10117: IFFALSE 10121
// continue ;
10119: GO 9835
// mech := IsDrivenBy ( i ) ;
10121: LD_ADDR_VAR 0 2
10125: PUSH
10126: LD_VAR 0 1
10130: PPUSH
10131: CALL_OW 311
10135: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10136: LD_VAR 0 2
10140: PPUSH
10141: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10145: LD_VAR 0 2
10149: PPUSH
10150: LD_VAR 0 1
10154: PPUSH
10155: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10159: LD_INT 35
10161: PPUSH
10162: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10166: LD_VAR 0 1
10170: PPUSH
10171: CALL_OW 256
10175: PUSH
10176: LD_INT 1000
10178: EQUAL
10179: IFFALSE 10159
// ComEnterUnit ( mech , i ) ;
10181: LD_VAR 0 2
10185: PPUSH
10186: LD_VAR 0 1
10190: PPUSH
10191: CALL_OW 120
// end else
10195: GO 10220
// if IsDrivenBy ( i ) then
10197: LD_VAR 0 1
10201: PPUSH
10202: CALL_OW 311
10206: IFFALSE 10220
// SetTag ( i , tAttack ) ;
10208: LD_VAR 0 1
10212: PPUSH
10213: LD_INT 10
10215: PPUSH
10216: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10220: LD_VAR 0 1
10224: PPUSH
10225: CALL_OW 110
10229: PUSH
10230: LD_INT 10
10232: EQUAL
10233: IFFALSE 10394
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10235: LD_ADDR_VAR 0 3
10239: PUSH
10240: LD_INT 2
10242: PPUSH
10243: LD_INT 81
10245: PUSH
10246: LD_INT 8
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PPUSH
10253: CALL_OW 70
10257: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 256
10267: PUSH
10268: LD_INT 650
10270: LESS
10271: PUSH
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 263
10281: PUSH
10282: LD_INT 1
10284: EQUAL
10285: AND
10286: IFFALSE 10311
// begin ComStop ( i ) ;
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 141
// SetTag ( i , 0 ) ;
10297: LD_VAR 0 1
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 109
// continue ;
10309: GO 9835
// end ; if enemy then
10311: LD_VAR 0 3
10315: IFFALSE 10355
// begin if not HasTask ( i ) then
10317: LD_VAR 0 1
10321: PPUSH
10322: CALL_OW 314
10326: NOT
10327: IFFALSE 10353
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10329: LD_VAR 0 1
10333: PPUSH
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 74
10348: PPUSH
10349: CALL 62207 0 2
// end else
10353: GO 10394
// if legTanks then
10355: LD_EXP 42
10359: IFFALSE 10394
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10361: LD_VAR 0 1
10365: PPUSH
10366: LD_INT 200
10368: PUSH
10369: LD_INT 48
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 210
10378: PUSH
10379: LD_INT 74
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PPUSH
10390: CALL 60593 0 2
// end ; end ;
10394: GO 9835
10396: POP
10397: POP
// end ;
10398: PPOPN 3
10400: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10401: LD_EXP 12
10405: NOT
10406: PUSH
10407: LD_EXP 43
10411: PPUSH
10412: CALL 22400 0 1
10416: AND
10417: PUSH
10418: LD_EXP 9
10422: AND
10423: PUSH
10424: LD_EXP 7
10428: AND
10429: IFFALSE 10627
10431: GO 10433
10433: DISABLE
10434: LD_INT 0
10436: PPUSH
10437: PPUSH
10438: PPUSH
// begin enable ;
10439: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10440: LD_ADDR_VAR 0 2
10444: PUSH
10445: LD_EXP 43
10449: PPUSH
10450: LD_INT 61
10452: PUSH
10453: EMPTY
10454: LIST
10455: PUSH
10456: LD_INT 50
10458: PUSH
10459: EMPTY
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 72
10470: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10471: LD_ADDR_EXP 43
10475: PUSH
10476: LD_EXP 43
10480: PUSH
10481: LD_VAR 0 2
10485: DIFF
10486: ST_TO_ADDR
// if not tmp then
10487: LD_VAR 0 2
10491: NOT
10492: IFFALSE 10496
// exit ;
10494: GO 10627
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10496: LD_ADDR_VAR 0 3
10500: PUSH
10501: LD_VAR 0 2
10505: PPUSH
10506: LD_INT 34
10508: PUSH
10509: LD_INT 24
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 72
10520: ST_TO_ADDR
// if tmp2 then
10521: LD_VAR 0 3
10525: IFFALSE 10542
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 241
10534: PPUSH
10535: LD_INT 99
10537: PPUSH
10538: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10542: LD_INT 35
10544: PPUSH
10545: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10549: LD_ADDR_VAR 0 2
10553: PUSH
10554: LD_VAR 0 2
10558: PPUSH
10559: LD_INT 50
10561: PUSH
10562: EMPTY
10563: LIST
10564: PPUSH
10565: CALL_OW 72
10569: ST_TO_ADDR
// for i in tmp do
10570: LD_ADDR_VAR 0 1
10574: PUSH
10575: LD_VAR 0 2
10579: PUSH
10580: FOR_IN
10581: IFFALSE 10618
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10583: LD_VAR 0 1
10587: PPUSH
10588: LD_INT 200
10590: PUSH
10591: LD_INT 48
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 210
10600: PUSH
10601: LD_INT 74
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL 60593 0 2
10616: GO 10580
10618: POP
10619: POP
// until not tmp ;
10620: LD_VAR 0 2
10624: NOT
10625: IFFALSE 10542
// end ;
10627: PPOPN 3
10629: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10630: LD_EXP 9
10634: NOT
10635: IFFALSE 10896
10637: GO 10639
10639: DISABLE
10640: LD_INT 0
10642: PPUSH
10643: PPUSH
10644: PPUSH
10645: PPUSH
// begin uc_side := 8 ;
10646: LD_ADDR_OWVAR 20
10650: PUSH
10651: LD_INT 8
10653: ST_TO_ADDR
// uc_nation := nation_arabian ;
10654: LD_ADDR_OWVAR 21
10658: PUSH
10659: LD_INT 2
10661: ST_TO_ADDR
// for i := 1 to 3 do
10662: LD_ADDR_VAR 0 1
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_INT 3
10674: PUSH
10675: FOR_TO
10676: IFFALSE 10811
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
10678: LD_INT 14
10680: PPUSH
10681: LD_INT 3
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 27
10689: PUSH
10690: LD_INT 25
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_VAR 0 1
10701: PUSH
10702: LD_INT 2
10704: MOD
10705: PUSH
10706: LD_INT 1
10708: PLUS
10709: ARRAY
10710: PPUSH
10711: LD_INT 100
10713: PPUSH
10714: CALL 25138 0 5
// veh := CreateVehicle ;
10718: LD_ADDR_VAR 0 3
10722: PUSH
10723: CALL_OW 45
10727: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10728: LD_VAR 0 3
10732: PPUSH
10733: LD_INT 5
10735: PPUSH
10736: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_INT 44
10747: PPUSH
10748: LD_INT 0
10750: PPUSH
10751: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
10755: LD_INT 0
10757: PPUSH
10758: LD_INT 6
10760: PPUSH
10761: CALL_OW 383
// un := CreateHuman ;
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: CALL_OW 44
10774: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10775: LD_VAR 0 2
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10789: LD_ADDR_VAR 0 4
10793: PUSH
10794: LD_VAR 0 4
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: CALL 57989 0 2
10808: ST_TO_ADDR
// end ;
10809: GO 10675
10811: POP
10812: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
10813: LD_VAR 0 4
10817: PPUSH
10818: LD_INT 219
10820: PPUSH
10821: LD_INT 110
10823: PPUSH
10824: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
10828: LD_VAR 0 4
10832: PPUSH
10833: LD_INT 220
10835: PPUSH
10836: LD_INT 94
10838: PPUSH
10839: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
10843: LD_VAR 0 4
10847: PPUSH
10848: LD_INT 209
10850: PPUSH
10851: LD_INT 66
10853: PPUSH
10854: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
10858: LD_VAR 0 4
10862: PPUSH
10863: LD_INT 189
10865: PPUSH
10866: LD_INT 22
10868: PPUSH
10869: CALL_OW 171
// wait ( 0 0$10 ) ;
10873: LD_INT 350
10875: PPUSH
10876: CALL_OW 67
// legTanks := legTanks union tmp ;
10880: LD_ADDR_EXP 42
10884: PUSH
10885: LD_EXP 42
10889: PUSH
10890: LD_VAR 0 4
10894: UNION
10895: ST_TO_ADDR
// end ; end_of_file
10896: PPOPN 4
10898: END
// export function CreateNature ; var i , areas , amount ; begin
10899: LD_INT 0
10901: PPUSH
10902: PPUSH
10903: PPUSH
10904: PPUSH
// PrepareTiger ( 0 ) ;
10905: LD_INT 0
10907: PPUSH
10908: CALL 54365 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
10912: LD_ADDR_VAR 0 2
10916: PUSH
10917: DOUBLE
10918: LD_INT 1
10920: DEC
10921: ST_TO_ADDR
10922: LD_INT 10
10924: PUSH
10925: LD_INT 8
10927: PUSH
10928: LD_INT 5
10930: PUSH
10931: LD_INT 5
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_OWVAR 67
10944: ARRAY
10945: PUSH
10946: FOR_TO
10947: IFFALSE 10966
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10949: CALL_OW 44
10953: PPUSH
10954: LD_INT 7
10956: PPUSH
10957: LD_INT 0
10959: PPUSH
10960: CALL_OW 49
10964: GO 10946
10966: POP
10967: POP
// PrepareBird ;
10968: CALL 54546 0 0
// for i := 1 to 3 do
10972: LD_ADDR_VAR 0 2
10976: PUSH
10977: DOUBLE
10978: LD_INT 1
10980: DEC
10981: ST_TO_ADDR
10982: LD_INT 3
10984: PUSH
10985: FOR_TO
10986: IFFALSE 11005
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10988: CALL_OW 44
10992: PPUSH
10993: LD_INT 7
10995: PPUSH
10996: LD_INT 0
10998: PPUSH
10999: CALL_OW 49
11003: GO 10985
11005: POP
11006: POP
// PrepareHorse ;
11007: CALL 54586 0 0
// for i := 1 to 3 do
11011: LD_ADDR_VAR 0 2
11015: PUSH
11016: DOUBLE
11017: LD_INT 1
11019: DEC
11020: ST_TO_ADDR
11021: LD_INT 3
11023: PUSH
11024: FOR_TO
11025: IFFALSE 11044
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11027: CALL_OW 44
11031: PPUSH
11032: LD_INT 7
11034: PPUSH
11035: LD_INT 0
11037: PPUSH
11038: CALL_OW 49
11042: GO 11024
11044: POP
11045: POP
// PrepareFrog ;
11046: CALL 54466 0 0
// for i := 1 to 3 do
11050: LD_ADDR_VAR 0 2
11054: PUSH
11055: DOUBLE
11056: LD_INT 1
11058: DEC
11059: ST_TO_ADDR
11060: LD_INT 3
11062: PUSH
11063: FOR_TO
11064: IFFALSE 11083
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11066: CALL_OW 44
11070: PPUSH
11071: LD_INT 8
11073: PPUSH
11074: LD_INT 0
11076: PPUSH
11077: CALL_OW 49
11081: GO 11063
11083: POP
11084: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11085: LD_ADDR_VAR 0 4
11089: PUSH
11090: LD_INT 3
11092: PUSH
11093: LD_INT 2
11095: PUSH
11096: LD_INT 2
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: PUSH
11108: LD_OWVAR 67
11112: ARRAY
11113: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11114: LD_ADDR_VAR 0 3
11118: PUSH
11119: LD_INT 18
11121: PUSH
11122: LD_INT 19
11124: PUSH
11125: LD_INT 20
11127: PUSH
11128: LD_INT 21
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: ST_TO_ADDR
// PrepareMastodont ;
11137: CALL 54626 0 0
// for i := 1 to amount do
11141: LD_ADDR_VAR 0 2
11145: PUSH
11146: DOUBLE
11147: LD_INT 1
11149: DEC
11150: ST_TO_ADDR
11151: LD_VAR 0 4
11155: PUSH
11156: FOR_TO
11157: IFFALSE 11194
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11159: CALL_OW 45
11163: PPUSH
11164: LD_VAR 0 3
11168: PUSH
11169: LD_VAR 0 2
11173: PUSH
11174: LD_INT 1
11176: MINUS
11177: PUSH
11178: LD_OWVAR 67
11182: PLUS
11183: ARRAY
11184: PPUSH
11185: LD_INT 0
11187: PPUSH
11188: CALL_OW 49
11192: GO 11156
11194: POP
11195: POP
// PrepareApeman ( 0 ) ;
11196: LD_INT 0
11198: PPUSH
11199: CALL 54257 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11203: LD_ADDR_OWVAR 31
11207: PUSH
11208: LD_INT 4
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: LD_INT 0
11216: PUSH
11217: LD_INT 0
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11226: LD_ADDR_VAR 0 2
11230: PUSH
11231: DOUBLE
11232: LD_INT 1
11234: DEC
11235: ST_TO_ADDR
11236: LD_INT 9
11238: PUSH
11239: LD_INT 7
11241: PUSH
11242: LD_INT 6
11244: PUSH
11245: LD_INT 5
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: PUSH
11254: LD_OWVAR 67
11258: ARRAY
11259: PUSH
11260: FOR_TO
11261: IFFALSE 11280
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11263: CALL_OW 44
11267: PPUSH
11268: LD_INT 6
11270: PPUSH
11271: LD_INT 0
11273: PPUSH
11274: CALL_OW 49
11278: GO 11260
11280: POP
11281: POP
// for i := 1 to [ 8 , 7 , 6 , 5 ] [ Difficulty ] do
11282: LD_ADDR_VAR 0 2
11286: PUSH
11287: DOUBLE
11288: LD_INT 1
11290: DEC
11291: ST_TO_ADDR
11292: LD_INT 8
11294: PUSH
11295: LD_INT 7
11297: PUSH
11298: LD_INT 6
11300: PUSH
11301: LD_INT 5
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: PUSH
11310: LD_OWVAR 67
11314: ARRAY
11315: PUSH
11316: FOR_TO
11317: IFFALSE 11342
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 8 , false ) ;
11319: CALL_OW 44
11323: PPUSH
11324: LD_INT 274
11326: PPUSH
11327: LD_INT 133
11329: PPUSH
11330: LD_INT 8
11332: PPUSH
11333: LD_INT 0
11335: PPUSH
11336: CALL_OW 50
11340: GO 11316
11342: POP
11343: POP
// for i := 1 to [ 6 , 5 , 4 , 4 ] [ Difficulty ] do
11344: LD_ADDR_VAR 0 2
11348: PUSH
11349: DOUBLE
11350: LD_INT 1
11352: DEC
11353: ST_TO_ADDR
11354: LD_INT 6
11356: PUSH
11357: LD_INT 5
11359: PUSH
11360: LD_INT 4
11362: PUSH
11363: LD_INT 4
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: PUSH
11372: LD_OWVAR 67
11376: ARRAY
11377: PUSH
11378: FOR_TO
11379: IFFALSE 11404
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 8 , false ) ;
11381: CALL_OW 44
11385: PPUSH
11386: LD_INT 208
11388: PPUSH
11389: LD_INT 142
11391: PPUSH
11392: LD_INT 8
11394: PPUSH
11395: LD_INT 0
11397: PPUSH
11398: CALL_OW 50
11402: GO 11378
11404: POP
11405: POP
// end ;
11406: LD_VAR 0 1
11410: RET
// export function AreInArea ( units , area ) ; var i ; begin
11411: LD_INT 0
11413: PPUSH
11414: PPUSH
// result := false ;
11415: LD_ADDR_VAR 0 3
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// if not units then
11423: LD_VAR 0 1
11427: NOT
11428: IFFALSE 11432
// exit ;
11430: GO 11498
// for i in units do
11432: LD_ADDR_VAR 0 4
11436: PUSH
11437: LD_VAR 0 1
11441: PUSH
11442: FOR_IN
11443: IFFALSE 11496
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11445: LD_VAR 0 4
11449: PPUSH
11450: LD_VAR 0 2
11454: PPUSH
11455: CALL_OW 308
11459: PUSH
11460: LD_VAR 0 4
11464: PPUSH
11465: CALL_OW 310
11469: PPUSH
11470: LD_VAR 0 2
11474: PPUSH
11475: CALL_OW 308
11479: OR
11480: IFFALSE 11494
// begin result := true ;
11482: LD_ADDR_VAR 0 3
11486: PUSH
11487: LD_INT 1
11489: ST_TO_ADDR
// exit ;
11490: POP
11491: POP
11492: GO 11498
// end ;
11494: GO 11442
11496: POP
11497: POP
// end ; end_of_file
11498: LD_VAR 0 3
11502: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11503: LD_INT 0
11505: PPUSH
11506: PPUSH
11507: PPUSH
11508: PPUSH
11509: PPUSH
// SaveForQuickRestart ;
11510: CALL_OW 22
// InGameOn ;
11514: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11518: LD_INT 84
11520: PPUSH
11521: LD_INT 28
11523: PPUSH
11524: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11528: LD_INT 2
11530: PPUSH
11531: LD_INT 9
11533: PPUSH
11534: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11538: LD_EXP 22
11542: PPUSH
11543: LD_INT 90
11545: PPUSH
11546: LD_INT 30
11548: PPUSH
11549: CALL_OW 111
// uc_side := 1 ;
11553: LD_ADDR_OWVAR 20
11557: PUSH
11558: LD_INT 1
11560: ST_TO_ADDR
// uc_nation := nation_american ;
11561: LD_ADDR_OWVAR 21
11565: PUSH
11566: LD_INT 1
11568: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11569: LD_INT 3
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: LD_INT 9
11580: PPUSH
11581: LD_INT 66
11583: PPUSH
11584: CALL 25138 0 5
// veh := CreateVehicle ;
11588: LD_ADDR_VAR 0 4
11592: PUSH
11593: CALL_OW 45
11597: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11598: LD_VAR 0 4
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11610: LD_VAR 0 4
11614: PPUSH
11615: LD_INT 80
11617: PPUSH
11618: LD_INT 27
11620: PPUSH
11621: LD_INT 0
11623: PPUSH
11624: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11628: LD_INT 1
11630: PPUSH
11631: LD_INT 8
11633: PPUSH
11634: CALL_OW 383
// mech := CreateHuman ;
11638: LD_ADDR_VAR 0 3
11642: PUSH
11643: CALL_OW 44
11647: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_VAR 0 4
11657: PPUSH
11658: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11662: LD_INT 35
11664: PPUSH
11665: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11669: LD_INT 90
11671: PPUSH
11672: LD_INT 30
11674: PPUSH
11675: CALL_OW 428
11679: IFFALSE 11662
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
11681: LD_INT 80
11683: PPUSH
11684: LD_INT 27
11686: PPUSH
11687: LD_INT 2
11689: PPUSH
11690: LD_INT 6
11692: NEG
11693: PPUSH
11694: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
11698: LD_INT 80
11700: PPUSH
11701: LD_INT 27
11703: PPUSH
11704: CALL_OW 86
// DialogueOn ;
11708: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
11712: LD_EXP 22
11716: PPUSH
11717: LD_STRING DH-Start-1
11719: PPUSH
11720: CALL_OW 88
// DialogueOff ;
11724: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11728: LD_EXP 22
11732: PPUSH
11733: LD_VAR 0 4
11737: PPUSH
11738: CALL_OW 115
// wait ( 0 0$1 ) ;
11742: LD_INT 35
11744: PPUSH
11745: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
11749: LD_EXP 22
11753: PPUSH
11754: CALL_OW 310
11758: PPUSH
11759: LD_INT 200
11761: PPUSH
11762: CALL_OW 234
// wait ( 0 0$0.3 ) ;
11766: LD_INT 10
11768: PPUSH
11769: CALL_OW 67
// DialogueOn ;
11773: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
11777: LD_EXP 22
11781: PPUSH
11782: LD_STRING DH-Start-2
11784: PPUSH
11785: CALL_OW 88
// DialogueOff ;
11789: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11793: LD_EXP 22
11797: PPUSH
11798: LD_VAR 0 4
11802: PPUSH
11803: CALL_OW 115
// wait ( 0 0$0.2 ) ;
11807: LD_INT 7
11809: PPUSH
11810: CALL_OW 67
// ComCrawl ( Heike ) ;
11814: LD_EXP 22
11818: PPUSH
11819: CALL_OW 137
// wait ( 0 0$3 ) ;
11823: LD_INT 105
11825: PPUSH
11826: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
11830: LD_EXP 25
11834: PPUSH
11835: LD_INT 82
11837: PPUSH
11838: LD_INT 43
11840: PPUSH
11841: LD_INT 0
11843: PPUSH
11844: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
11848: LD_EXP 23
11852: PPUSH
11853: LD_EXP 25
11857: PPUSH
11858: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
11862: LD_EXP 23
11866: PPUSH
11867: LD_INT 79
11869: PPUSH
11870: LD_INT 32
11872: PPUSH
11873: CALL_OW 111
// wait ( 0 0$1 ) ;
11877: LD_INT 35
11879: PPUSH
11880: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
11884: LD_INT 79
11886: PPUSH
11887: LD_INT 32
11889: PPUSH
11890: LD_INT 2
11892: PPUSH
11893: LD_INT 8
11895: NEG
11896: PPUSH
11897: CALL_OW 330
// wait ( 0 0$3 ) ;
11901: LD_INT 105
11903: PPUSH
11904: CALL_OW 67
// SetLives ( veh , 200 ) ;
11908: LD_VAR 0 4
11912: PPUSH
11913: LD_INT 200
11915: PPUSH
11916: CALL_OW 234
// wait ( 0 0$1 ) ;
11920: LD_INT 35
11922: PPUSH
11923: CALL_OW 67
// SetLives ( mech , 10 ) ;
11927: LD_VAR 0 3
11931: PPUSH
11932: LD_INT 10
11934: PPUSH
11935: CALL_OW 234
// wait ( 0 0$2 ) ;
11939: LD_INT 70
11941: PPUSH
11942: CALL_OW 67
// ComWalk ( Heike ) ;
11946: LD_EXP 22
11950: PPUSH
11951: CALL_OW 138
// wait ( 1 ) ;
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
11962: LD_EXP 22
11966: PPUSH
11967: LD_INT 81
11969: PPUSH
11970: LD_INT 25
11972: PPUSH
11973: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
11977: LD_EXP 22
11981: PPUSH
11982: LD_INT 72
11984: PPUSH
11985: LD_INT 25
11987: PPUSH
11988: CALL_OW 171
// wait ( 0 0$3 ) ;
11992: LD_INT 105
11994: PPUSH
11995: CALL_OW 67
// ComExitVehicle ( Omar ) ;
11999: LD_EXP 23
12003: PPUSH
12004: CALL_OW 121
// wait ( 1 ) ;
12008: LD_INT 1
12010: PPUSH
12011: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12015: LD_EXP 23
12019: PPUSH
12020: LD_INT 77
12022: PPUSH
12023: LD_INT 28
12025: PPUSH
12026: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12030: LD_EXP 23
12034: PPUSH
12035: LD_EXP 22
12039: PPUSH
12040: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12044: LD_EXP 23
12048: PPUSH
12049: LD_STRING DO-Start-3
12051: PPUSH
12052: CALL_OW 88
// repeat wait ( 3 ) ;
12056: LD_INT 3
12058: PPUSH
12059: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12063: LD_EXP 22
12067: PPUSH
12068: LD_INT 72
12070: PPUSH
12071: LD_INT 25
12073: PPUSH
12074: CALL_OW 307
12078: IFFALSE 12056
// ComHold ( Heike ) ;
12080: LD_EXP 22
12084: PPUSH
12085: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12089: LD_EXP 23
12093: PPUSH
12094: LD_EXP 22
12098: PPUSH
12099: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12103: LD_EXP 22
12107: PPUSH
12108: LD_EXP 23
12112: PPUSH
12113: CALL_OW 112
// wait ( 0 0$1 ) ;
12117: LD_INT 35
12119: PPUSH
12120: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12124: LD_EXP 22
12128: PPUSH
12129: LD_EXP 23
12133: PPUSH
12134: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12138: LD_EXP 22
12142: PPUSH
12143: LD_STRING DH-Start-4
12145: PPUSH
12146: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12150: LD_EXP 23
12154: PPUSH
12155: LD_STRING DO-Start-5
12157: PPUSH
12158: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12162: LD_EXP 22
12166: PPUSH
12167: LD_STRING DH-Start-6
12169: PPUSH
12170: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12174: LD_EXP 23
12178: PPUSH
12179: LD_STRING DO-Start-7
12181: PPUSH
12182: CALL_OW 88
// if Query ( QOmar ) = 2 then
12186: LD_STRING QOmar
12188: PPUSH
12189: CALL_OW 97
12193: PUSH
12194: LD_INT 2
12196: EQUAL
12197: IFFALSE 12502
// begin Say ( Heike , DH-QuestionN-1 ) ;
12199: LD_EXP 22
12203: PPUSH
12204: LD_STRING DH-QuestionN-1
12206: PPUSH
12207: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12211: LD_EXP 22
12215: PPUSH
12216: LD_INT 58
12218: PPUSH
12219: LD_INT 27
12221: PPUSH
12222: CALL_OW 111
// wait ( 0 0$2 ) ;
12226: LD_INT 70
12228: PPUSH
12229: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12233: LD_EXP 23
12237: PPUSH
12238: LD_EXP 25
12242: PPUSH
12243: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12247: LD_INT 79
12249: PPUSH
12250: LD_INT 32
12252: PPUSH
12253: LD_INT 2
12255: PPUSH
12256: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12260: LD_INT 80
12262: PPUSH
12263: LD_INT 27
12265: PPUSH
12266: LD_INT 2
12268: PPUSH
12269: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12273: LD_INT 58
12275: PPUSH
12276: LD_INT 27
12278: PPUSH
12279: CALL_OW 84
// repeat wait ( 3 ) ;
12283: LD_INT 3
12285: PPUSH
12286: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12290: LD_EXP 22
12294: PPUSH
12295: LD_INT 88
12297: PPUSH
12298: LD_INT 27
12300: PPUSH
12301: CALL_OW 297
12305: IFFALSE 12283
// uc_side := 1 ;
12307: LD_ADDR_OWVAR 20
12311: PUSH
12312: LD_INT 1
12314: ST_TO_ADDR
// uc_nation := nation_american ;
12315: LD_ADDR_OWVAR 21
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// amTroops := [ ] ;
12323: LD_ADDR_VAR 0 5
12327: PUSH
12328: EMPTY
12329: ST_TO_ADDR
// for i := 1 to 3 do
12330: LD_ADDR_VAR 0 2
12334: PUSH
12335: DOUBLE
12336: LD_INT 1
12338: DEC
12339: ST_TO_ADDR
12340: LD_INT 3
12342: PUSH
12343: FOR_TO
12344: IFFALSE 12437
// begin PrepareSoldier ( false , 10 ) ;
12346: LD_INT 0
12348: PPUSH
12349: LD_INT 10
12351: PPUSH
12352: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12356: LD_ADDR_VAR 0 5
12360: PUSH
12361: LD_VAR 0 5
12365: PPUSH
12366: CALL_OW 44
12370: PPUSH
12371: CALL 57989 0 2
12375: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12376: LD_VAR 0 5
12380: PUSH
12381: LD_VAR 0 2
12385: ARRAY
12386: PPUSH
12387: LD_INT 2
12389: PPUSH
12390: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12394: LD_VAR 0 5
12398: PUSH
12399: LD_VAR 0 2
12403: ARRAY
12404: PPUSH
12405: LD_INT 10
12407: PPUSH
12408: LD_INT 0
12410: PPUSH
12411: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12415: LD_VAR 0 5
12419: PUSH
12420: LD_VAR 0 2
12424: ARRAY
12425: PPUSH
12426: LD_EXP 22
12430: PPUSH
12431: CALL_OW 115
// end ;
12435: GO 12343
12437: POP
12438: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12439: LD_EXP 22
12443: PPUSH
12444: LD_VAR 0 5
12448: PUSH
12449: LD_INT 1
12451: ARRAY
12452: PPUSH
12453: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12457: LD_INT 35
12459: PPUSH
12460: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12464: LD_EXP 22
12468: PPUSH
12469: CALL_OW 301
12473: PUSH
12474: LD_EXP 22
12478: PPUSH
12479: CALL_OW 303
12483: OR
12484: IFFALSE 12457
// wait ( 0 0$2 ) ;
12486: LD_INT 70
12488: PPUSH
12489: CALL_OW 67
// YouLost ( Heike ) ;
12493: LD_STRING Heike
12495: PPUSH
12496: CALL_OW 104
// exit ;
12500: GO 13422
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12502: LD_EXP 22
12506: PPUSH
12507: LD_STRING DH-QuestionY-1
12509: PPUSH
12510: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12514: LD_INT 10
12516: PPUSH
12517: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12521: LD_EXP 23
12525: PPUSH
12526: LD_STRING DO-Story-1
12528: PPUSH
12529: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12533: LD_EXP 23
12537: PPUSH
12538: LD_STRING DO-Story-2
12540: PPUSH
12541: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12545: LD_EXP 23
12549: PPUSH
12550: LD_STRING DO-Story-3
12552: PPUSH
12553: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12557: LD_EXP 23
12561: PPUSH
12562: LD_STRING DO-Story-4
12564: PPUSH
12565: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12569: LD_EXP 22
12573: PPUSH
12574: LD_STRING DH-Story-5
12576: PPUSH
12577: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12581: LD_EXP 23
12585: PPUSH
12586: LD_STRING DO-Story-6
12588: PPUSH
12589: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12593: LD_EXP 23
12597: PPUSH
12598: LD_STRING DO-Story-7
12600: PPUSH
12601: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12605: LD_EXP 22
12609: PPUSH
12610: LD_INT 82
12612: PPUSH
12613: LD_INT 44
12615: PPUSH
12616: CALL_OW 111
// AddComHold ( Heike ) ;
12620: LD_EXP 22
12624: PPUSH
12625: CALL_OW 200
// wait ( 0 0$4 ) ;
12629: LD_INT 140
12631: PPUSH
12632: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12636: LD_EXP 23
12640: PPUSH
12641: LD_INT 82
12643: PPUSH
12644: LD_INT 41
12646: PPUSH
12647: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12651: LD_EXP 23
12655: PPUSH
12656: LD_EXP 22
12660: PPUSH
12661: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12665: LD_INT 35
12667: PPUSH
12668: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12672: LD_EXP 22
12676: PPUSH
12677: LD_INT 82
12679: PPUSH
12680: LD_INT 44
12682: PPUSH
12683: CALL_OW 307
12687: IFFALSE 12665
// ComTurnXY ( Heike , 81 , 47 ) ;
12689: LD_EXP 22
12693: PPUSH
12694: LD_INT 81
12696: PPUSH
12697: LD_INT 47
12699: PPUSH
12700: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
12704: LD_EXP 22
12708: PPUSH
12709: LD_STRING DH-Story-8
12711: PPUSH
12712: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
12716: LD_EXP 23
12720: PPUSH
12721: LD_STRING DO-Story-9
12723: PPUSH
12724: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
12728: LD_EXP 23
12732: PPUSH
12733: LD_STRING DO-Story-10
12735: PPUSH
12736: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
12740: LD_EXP 22
12744: PPUSH
12745: LD_EXP 23
12749: PPUSH
12750: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
12754: LD_EXP 22
12758: PPUSH
12759: LD_STRING DH-Story-11
12761: PPUSH
12762: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
12766: LD_EXP 23
12770: PPUSH
12771: LD_EXP 22
12775: PPUSH
12776: CALL_OW 112
// wait ( 0 0$0.3 ) ;
12780: LD_INT 10
12782: PPUSH
12783: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12787: LD_EXP 23
12791: PPUSH
12792: LD_EXP 22
12796: PPUSH
12797: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
12801: LD_EXP 23
12805: PPUSH
12806: LD_STRING DO-Story-12
12808: PPUSH
12809: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
12813: LD_EXP 22
12817: PPUSH
12818: LD_STRING DH-Story-13
12820: PPUSH
12821: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
12825: LD_EXP 23
12829: PPUSH
12830: LD_STRING DO-Story-14
12832: PPUSH
12833: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
12837: LD_EXP 23
12841: PPUSH
12842: LD_STRING DO-Story-15
12844: PPUSH
12845: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
12849: LD_INT 84
12851: PPUSH
12852: LD_INT 48
12854: PPUSH
12855: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
12859: LD_EXP 22
12863: PPUSH
12864: LD_INT 84
12866: PPUSH
12867: LD_INT 48
12869: PPUSH
12870: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
12874: LD_EXP 22
12878: PPUSH
12879: LD_INT 84
12881: PPUSH
12882: LD_INT 49
12884: PPUSH
12885: CALL_OW 178
// wait ( 0 0$1 ) ;
12889: LD_INT 35
12891: PPUSH
12892: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
12896: LD_EXP 23
12900: PPUSH
12901: LD_EXP 22
12905: PPUSH
12906: CALL_OW 112
// wait ( 0 0$1 ) ;
12910: LD_INT 35
12912: PPUSH
12913: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12917: LD_EXP 23
12921: PPUSH
12922: LD_EXP 22
12926: PPUSH
12927: CALL_OW 119
// wait ( 0 0$0.3 ) ;
12931: LD_INT 10
12933: PPUSH
12934: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
12938: LD_EXP 23
12942: PPUSH
12943: LD_STRING DO-Story-16
12945: PPUSH
12946: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
12950: LD_STRING QOmar2
12952: PPUSH
12953: CALL_OW 97
12957: PUSH
12958: LD_INT 2
12960: EQUAL
12961: IFFALSE 13299
// begin ComTurnUnit ( Heike , Omar ) ;
12963: LD_EXP 22
12967: PPUSH
12968: LD_EXP 23
12972: PPUSH
12973: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
12977: LD_EXP 22
12981: PPUSH
12982: LD_STRING DH-QuestionN-1
12984: PPUSH
12985: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
12989: LD_EXP 22
12993: PPUSH
12994: LD_INT 79
12996: PPUSH
12997: LD_INT 57
12999: PPUSH
13000: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13004: LD_EXP 22
13008: PPUSH
13009: LD_INT 68
13011: PPUSH
13012: LD_INT 53
13014: PPUSH
13015: CALL_OW 171
// wait ( 0 0$2 ) ;
13019: LD_INT 70
13021: PPUSH
13022: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13026: LD_EXP 23
13030: PPUSH
13031: LD_EXP 25
13035: PPUSH
13036: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13040: LD_INT 79
13042: PPUSH
13043: LD_INT 32
13045: PPUSH
13046: LD_INT 2
13048: PPUSH
13049: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13053: LD_INT 80
13055: PPUSH
13056: LD_INT 27
13058: PPUSH
13059: LD_INT 2
13061: PPUSH
13062: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13066: LD_INT 68
13068: PPUSH
13069: LD_INT 53
13071: PPUSH
13072: CALL_OW 84
// repeat wait ( 3 ) ;
13076: LD_INT 3
13078: PPUSH
13079: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13083: LD_EXP 22
13087: PPUSH
13088: LD_INT 68
13090: PPUSH
13091: LD_INT 53
13093: PPUSH
13094: CALL_OW 297
13098: PUSH
13099: LD_INT 6
13101: LESS
13102: IFFALSE 13076
// uc_side := 1 ;
13104: LD_ADDR_OWVAR 20
13108: PUSH
13109: LD_INT 1
13111: ST_TO_ADDR
// uc_nation := nation_american ;
13112: LD_ADDR_OWVAR 21
13116: PUSH
13117: LD_INT 1
13119: ST_TO_ADDR
// amTroops := [ ] ;
13120: LD_ADDR_VAR 0 5
13124: PUSH
13125: EMPTY
13126: ST_TO_ADDR
// for i := 1 to 3 do
13127: LD_ADDR_VAR 0 2
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_INT 3
13139: PUSH
13140: FOR_TO
13141: IFFALSE 13234
// begin PrepareSoldier ( false , 10 ) ;
13143: LD_INT 0
13145: PPUSH
13146: LD_INT 10
13148: PPUSH
13149: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13153: LD_ADDR_VAR 0 5
13157: PUSH
13158: LD_VAR 0 5
13162: PPUSH
13163: CALL_OW 44
13167: PPUSH
13168: CALL 57989 0 2
13172: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13173: LD_VAR 0 5
13177: PUSH
13178: LD_VAR 0 2
13182: ARRAY
13183: PPUSH
13184: LD_INT 2
13186: PPUSH
13187: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13191: LD_VAR 0 5
13195: PUSH
13196: LD_VAR 0 2
13200: ARRAY
13201: PPUSH
13202: LD_INT 11
13204: PPUSH
13205: LD_INT 0
13207: PPUSH
13208: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13212: LD_VAR 0 5
13216: PUSH
13217: LD_VAR 0 2
13221: ARRAY
13222: PPUSH
13223: LD_EXP 22
13227: PPUSH
13228: CALL_OW 115
// end ;
13232: GO 13140
13234: POP
13235: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13236: LD_EXP 22
13240: PPUSH
13241: LD_VAR 0 5
13245: PUSH
13246: LD_INT 1
13248: ARRAY
13249: PPUSH
13250: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13254: LD_INT 35
13256: PPUSH
13257: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13261: LD_EXP 22
13265: PPUSH
13266: CALL_OW 301
13270: PUSH
13271: LD_EXP 22
13275: PPUSH
13276: CALL_OW 303
13280: OR
13281: IFFALSE 13254
// wait ( 0 0$2 ) ;
13283: LD_INT 70
13285: PPUSH
13286: CALL_OW 67
// YouLost ( Heike ) ;
13290: LD_STRING Heike
13292: PPUSH
13293: CALL_OW 104
// exit ;
13297: GO 13422
// end ; Say ( Omar , DO-Objective-1 ) ;
13299: LD_EXP 23
13303: PPUSH
13304: LD_STRING DO-Objective-1
13306: PPUSH
13307: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13311: LD_EXP 22
13315: PPUSH
13316: LD_EXP 23
13320: PPUSH
13321: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13325: LD_EXP 22
13329: PPUSH
13330: LD_STRING DH-Objective-2
13332: PPUSH
13333: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13337: LD_EXP 23
13341: PPUSH
13342: LD_STRING DO-Objective-3
13344: PPUSH
13345: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13349: LD_INT 79
13351: PPUSH
13352: LD_INT 32
13354: PPUSH
13355: LD_INT 2
13357: PPUSH
13358: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13362: LD_INT 80
13364: PPUSH
13365: LD_INT 27
13367: PPUSH
13368: LD_INT 2
13370: PPUSH
13371: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13375: LD_EXP 23
13379: PPUSH
13380: LD_INT 2
13382: PPUSH
13383: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13387: LD_EXP 25
13391: PPUSH
13392: LD_INT 2
13394: PPUSH
13395: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13399: LD_STRING O1
13401: PPUSH
13402: CALL_OW 337
// InGameOff ;
13406: CALL_OW 9
// gameActive := true ;
13410: LD_ADDR_EXP 19
13414: PUSH
13415: LD_INT 1
13417: ST_TO_ADDR
// SaveForQuickRestart ;
13418: CALL_OW 22
// end ;
13422: LD_VAR 0 1
13426: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13427: LD_EXP 19
13431: PUSH
13432: LD_EXP 7
13436: NOT
13437: AND
13438: PUSH
13439: LD_INT 4
13441: PPUSH
13442: LD_INT 22
13444: PUSH
13445: LD_INT 2
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 70
13456: AND
13457: IFFALSE 13608
13459: GO 13461
13461: DISABLE
13462: LD_INT 0
13464: PPUSH
// begin spotArabianBase := true ;
13465: LD_ADDR_EXP 7
13469: PUSH
13470: LD_INT 1
13472: ST_TO_ADDR
// DialogueOn ;
13473: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13477: LD_INT 232
13479: PPUSH
13480: LD_INT 101
13482: PPUSH
13483: LD_INT 2
13485: PPUSH
13486: LD_INT 22
13488: NEG
13489: PPUSH
13490: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13494: LD_INT 232
13496: PPUSH
13497: LD_INT 101
13499: PPUSH
13500: LD_INT 2
13502: PPUSH
13503: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13507: LD_INT 232
13509: PPUSH
13510: LD_INT 101
13512: PPUSH
13513: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13517: LD_ADDR_VAR 0 1
13521: PUSH
13522: LD_INT 4
13524: PPUSH
13525: LD_INT 22
13527: PUSH
13528: LD_INT 5
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PPUSH
13535: CALL_OW 70
13539: PUSH
13540: FOR_IN
13541: IFFALSE 13557
// SetSide ( i , 2 ) ;
13543: LD_VAR 0 1
13547: PPUSH
13548: LD_INT 2
13550: PPUSH
13551: CALL_OW 235
13555: GO 13540
13557: POP
13558: POP
// if not spotAmericanBase then
13559: LD_EXP 6
13563: NOT
13564: IFFALSE 13580
// Say ( Omar , DO-ArBase-1a ) else
13566: LD_EXP 23
13570: PPUSH
13571: LD_STRING DO-ArBase-1a
13573: PPUSH
13574: CALL_OW 88
13578: GO 13592
// Say ( Omar , DO-ArBase-1b ) ;
13580: LD_EXP 23
13584: PPUSH
13585: LD_STRING DO-ArBase-1b
13587: PPUSH
13588: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13592: LD_EXP 22
13596: PPUSH
13597: LD_STRING DH-ArBase-2
13599: PPUSH
13600: CALL_OW 88
// DialogueOff ;
13604: CALL_OW 7
// end ;
13608: PPOPN 1
13610: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13611: LD_EXP 19
13615: PUSH
13616: LD_INT 87
13618: PPUSH
13619: CALL_OW 306
13623: PUSH
13624: LD_INT 87
13626: PPUSH
13627: CALL_OW 313
13631: OR
13632: AND
13633: PUSH
13634: LD_EXP 22
13638: PPUSH
13639: CALL_OW 302
13643: AND
13644: PUSH
13645: LD_EXP 23
13649: PPUSH
13650: CALL_OW 302
13654: AND
13655: IFFALSE 13999
13657: GO 13659
13659: DISABLE
// begin DialogueOn ;
13660: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13664: LD_EXP 22
13668: PPUSH
13669: LD_STRING DH-Fac-1
13671: PPUSH
13672: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13676: LD_EXP 23
13680: PPUSH
13681: LD_STRING DOm-Fac-2
13683: PPUSH
13684: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
13688: LD_STRING 03_CargoRecycled
13690: PPUSH
13691: LD_INT 0
13693: PPUSH
13694: CALL_OW 30
13698: IFFALSE 13713
// SetTech ( tech_cargo , 2 , state_researched ) ;
13700: LD_INT 83
13702: PPUSH
13703: LD_INT 2
13705: PPUSH
13706: LD_INT 2
13708: PPUSH
13709: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
13713: LD_STRING 09_Markov
13715: PPUSH
13716: CALL_OW 28
13720: IFFALSE 13835
// begin Say ( Heike , DH-Fac-3a ) ;
13722: LD_EXP 22
13726: PPUSH
13727: LD_STRING DH-Fac-3a
13729: PPUSH
13730: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
13734: LD_INT 69
13736: PPUSH
13737: LD_INT 2
13739: PPUSH
13740: LD_INT 2
13742: PPUSH
13743: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
13747: LD_INT 39
13749: PPUSH
13750: LD_INT 2
13752: PPUSH
13753: LD_INT 2
13755: PPUSH
13756: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
13760: LD_INT 6
13762: PPUSH
13763: LD_INT 2
13765: PPUSH
13766: LD_INT 2
13768: PPUSH
13769: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13773: LD_INT 15
13775: PPUSH
13776: LD_INT 2
13778: PPUSH
13779: LD_INT 2
13781: PPUSH
13782: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13786: LD_EXP 22
13790: PPUSH
13791: LD_INT 3
13793: PPUSH
13794: CALL_OW 259
13798: PUSH
13799: LD_INT 10
13801: LESS
13802: IFFALSE 13833
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13804: LD_EXP 22
13808: PPUSH
13809: LD_INT 3
13811: PPUSH
13812: LD_EXP 22
13816: PPUSH
13817: LD_INT 3
13819: PPUSH
13820: CALL_OW 259
13824: PUSH
13825: LD_INT 1
13827: PLUS
13828: PPUSH
13829: CALL_OW 237
// end else
13833: GO 13988
// if TestCharacters ( 09_Olaf ) then
13835: LD_STRING 09_Olaf
13837: PPUSH
13838: CALL_OW 28
13842: IFFALSE 13931
// begin Say ( Heike , DH-Fac-3b ) ;
13844: LD_EXP 22
13848: PPUSH
13849: LD_STRING DH-Fac-3b
13851: PPUSH
13852: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
13856: LD_INT 6
13858: PPUSH
13859: LD_INT 2
13861: PPUSH
13862: LD_INT 2
13864: PPUSH
13865: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13869: LD_INT 15
13871: PPUSH
13872: LD_INT 2
13874: PPUSH
13875: LD_INT 2
13877: PPUSH
13878: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13882: LD_EXP 22
13886: PPUSH
13887: LD_INT 3
13889: PPUSH
13890: CALL_OW 259
13894: PUSH
13895: LD_INT 10
13897: LESS
13898: IFFALSE 13929
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13900: LD_EXP 22
13904: PPUSH
13905: LD_INT 3
13907: PPUSH
13908: LD_EXP 22
13912: PPUSH
13913: LD_INT 3
13915: PPUSH
13916: CALL_OW 259
13920: PUSH
13921: LD_INT 1
13923: PLUS
13924: PPUSH
13925: CALL_OW 237
// end else
13929: GO 13988
// if GetSkill ( Heike , skill_mechanical ) > 5 then
13931: LD_EXP 22
13935: PPUSH
13936: LD_INT 3
13938: PPUSH
13939: CALL_OW 259
13943: PUSH
13944: LD_INT 5
13946: GREATER
13947: IFFALSE 13976
// begin Say ( Heike , DH-Fac-3c ) ;
13949: LD_EXP 22
13953: PPUSH
13954: LD_STRING DH-Fac-3c
13956: PPUSH
13957: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
13961: LD_INT 6
13963: PPUSH
13964: LD_INT 2
13966: PPUSH
13967: LD_INT 2
13969: PPUSH
13970: CALL_OW 322
// end else
13974: GO 13988
// Say ( Heike , DH-Fac-3d ) ;
13976: LD_EXP 22
13980: PPUSH
13981: LD_STRING DH-Fac-3d
13983: PPUSH
13984: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
13988: LD_STRING ARemote
13990: PPUSH
13991: CALL_OW 337
// DialogueOff ;
13995: CALL_OW 7
// end ;
13999: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14000: LD_EXP 19
14004: PUSH
14005: LD_INT 89
14007: PPUSH
14008: CALL_OW 306
14012: PUSH
14013: LD_INT 89
14015: PPUSH
14016: CALL_OW 313
14020: OR
14021: AND
14022: PUSH
14023: LD_EXP 22
14027: PPUSH
14028: CALL_OW 302
14032: AND
14033: PUSH
14034: LD_EXP 23
14038: PPUSH
14039: CALL_OW 302
14043: AND
14044: IFFALSE 14272
14046: GO 14048
14048: DISABLE
// begin DialogueOn ;
14049: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14053: LD_EXP 22
14057: PPUSH
14058: LD_STRING DH-Lab-1
14060: PPUSH
14061: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14065: LD_EXP 23
14069: PPUSH
14070: LD_STRING DOm-Lab-2
14072: PPUSH
14073: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14077: LD_STRING 09_Aviradze
14079: PPUSH
14080: CALL_OW 28
14084: IFFALSE 14139
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14086: LD_INT 1
14088: PPUSH
14089: LD_INT 2
14091: PPUSH
14092: LD_INT 2
14094: PPUSH
14095: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14099: LD_INT 2
14101: PPUSH
14102: LD_INT 2
14104: PPUSH
14105: LD_INT 2
14107: PPUSH
14108: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14112: LD_INT 11
14114: PPUSH
14115: LD_INT 2
14117: PPUSH
14118: LD_INT 2
14120: PPUSH
14121: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14125: LD_EXP 22
14129: PPUSH
14130: LD_STRING DH-Lab-4a
14132: PPUSH
14133: CALL_OW 88
// end else
14137: GO 14151
// Say ( Heike , DH-Lab-4b ) ;
14139: LD_EXP 22
14143: PPUSH
14144: LD_STRING DH-Lab-4b
14146: PPUSH
14147: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14151: LD_STRING 05_DrugsTested
14153: PPUSH
14154: LD_EXP 1
14158: PPUSH
14159: CALL_OW 30
14163: IFFALSE 14190
// begin Say ( Heike , DH-Lab-5a ) ;
14165: LD_EXP 22
14169: PPUSH
14170: LD_STRING DH-Lab-5a
14172: PPUSH
14173: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14177: LD_INT 5
14179: PPUSH
14180: LD_INT 2
14182: PPUSH
14183: LD_INT 1
14185: PPUSH
14186: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14190: LD_STRING 09_ApeBrain
14192: PPUSH
14193: LD_EXP 1
14197: PPUSH
14198: CALL_OW 30
14202: IFFALSE 14241
// begin Say ( Heike , DH-Lab-6a ) ;
14204: LD_EXP 22
14208: PPUSH
14209: LD_STRING DH-Lab-6a
14211: PPUSH
14212: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14216: LD_EXP 23
14220: PPUSH
14221: LD_STRING DOm-Lab-7a
14223: PPUSH
14224: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14228: LD_INT 4
14230: PPUSH
14231: LD_INT 2
14233: PPUSH
14234: LD_INT 1
14236: PPUSH
14237: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14241: LD_STRING 09_ApeNeural
14243: PPUSH
14244: LD_EXP 1
14248: PPUSH
14249: CALL_OW 30
14253: IFFALSE 14268
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 2
14260: PPUSH
14261: LD_INT 1
14263: PPUSH
14264: CALL_OW 322
// end ; DialogueOff ;
14268: CALL_OW 7
// end ;
14272: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14273: LD_EXP 19
14277: PUSH
14278: LD_INT 22
14280: PUSH
14281: LD_INT 2
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 25
14290: PUSH
14291: LD_INT 12
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 69
14306: AND
14307: IFFALSE 14342
14309: GO 14311
14311: DISABLE
// begin if IsOk ( Heike ) then
14312: LD_EXP 22
14316: PPUSH
14317: CALL_OW 302
14321: IFFALSE 14335
// Say ( Heike , DH-Ape-1 ) ;
14323: LD_EXP 22
14327: PPUSH
14328: LD_STRING DH-Ape-1
14330: PPUSH
14331: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14335: LD_STRING AApes
14337: PPUSH
14338: CALL_OW 337
// end ;
14342: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14343: LD_EXP 19
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_INT 2
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 25
14360: PUSH
14361: LD_INT 15
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: PUSH
14377: LD_INT 5
14379: GREATEREQUAL
14380: AND
14381: IFFALSE 14483
14383: GO 14385
14385: DISABLE
// begin hasApes := true ;
14386: LD_ADDR_EXP 16
14390: PUSH
14391: LD_INT 1
14393: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14394: LD_STRING AApesOut
14396: PPUSH
14397: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14401: LD_EXP 22
14405: PPUSH
14406: CALL_OW 302
14410: NOT
14411: PUSH
14412: LD_EXP 23
14416: PPUSH
14417: CALL_OW 302
14421: NOT
14422: OR
14423: IFFALSE 14427
// exit ;
14425: GO 14483
// DialogueOn ;
14427: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14431: LD_EXP 22
14435: PPUSH
14436: LD_STRING DH-ApeArmy-1
14438: PPUSH
14439: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14443: LD_EXP 23
14447: PPUSH
14448: LD_STRING DOm-ApeArmy-2
14450: PPUSH
14451: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14455: LD_EXP 22
14459: PPUSH
14460: LD_STRING DH-ApeArmy-3
14462: PPUSH
14463: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14467: LD_EXP 23
14471: PPUSH
14472: LD_STRING DOm-ApeArmy-4
14474: PPUSH
14475: CALL_OW 88
// DialogueOff ;
14479: CALL_OW 7
// end ;
14483: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14484: LD_EXP 19
14488: PUSH
14489: LD_INT 5
14491: PPUSH
14492: LD_INT 2
14494: PPUSH
14495: CALL_OW 321
14499: PUSH
14500: LD_INT 2
14502: EQUAL
14503: AND
14504: IFFALSE 14540
14506: GO 14508
14508: DISABLE
// begin hasDrugs := true ;
14509: LD_ADDR_EXP 17
14513: PUSH
14514: LD_INT 1
14516: ST_TO_ADDR
// if IsOk ( Heike ) then
14517: LD_EXP 22
14521: PPUSH
14522: CALL_OW 302
14526: IFFALSE 14540
// Say ( Heike , DH-Stim-1 ) ;
14528: LD_EXP 22
14532: PPUSH
14533: LD_STRING DH-Stim-1
14535: PPUSH
14536: CALL_OW 88
// end ;
14540: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14541: LD_EXP 19
14545: PUSH
14546: LD_INT 22
14548: PUSH
14549: LD_INT 2
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 25
14558: PUSH
14559: LD_INT 17
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PPUSH
14570: CALL_OW 69
14574: AND
14575: IFFALSE 14592
14577: GO 14579
14579: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14580: LD_EXP 22
14584: PPUSH
14585: LD_STRING DH-Kamikadze-1
14587: PPUSH
14588: CALL_OW 88
14592: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14593: LD_EXP 19
14597: PUSH
14598: LD_INT 22
14600: PUSH
14601: LD_INT 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 31
14610: PUSH
14611: LD_INT 31
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PPUSH
14622: CALL_OW 69
14626: AND
14627: PUSH
14628: LD_EXP 23
14632: PPUSH
14633: CALL_OW 302
14637: AND
14638: PUSH
14639: LD_EXP 22
14643: PPUSH
14644: CALL_OW 302
14648: AND
14649: IFFALSE 14734
14651: GO 14653
14653: DISABLE
// begin InGameOn ;
14654: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14658: LD_EXP 23
14662: PPUSH
14663: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14667: LD_EXP 22
14671: PPUSH
14672: LD_STRING DH-Mastodont-1
14674: PPUSH
14675: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
14679: LD_EXP 23
14683: PPUSH
14684: LD_STRING DOm-Mastodont-2
14686: PPUSH
14687: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
14691: LD_EXP 22
14695: PPUSH
14696: LD_STRING DH-Mastodont-3
14698: PPUSH
14699: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
14703: LD_EXP 23
14707: PPUSH
14708: LD_STRING DOm-Mastodont-4
14710: PPUSH
14711: CALL_OW 88
// hasMastodont := true ;
14715: LD_ADDR_EXP 13
14719: PUSH
14720: LD_INT 1
14722: ST_TO_ADDR
// InGameOff ;
14723: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
14727: LD_STRING ACH_MASTODONTTAME
14729: PPUSH
14730: CALL_OW 543
// end ;
14734: END
// every 0 0$1 trigger gameActive and tigerCounter do
14735: LD_EXP 19
14739: PUSH
14740: LD_EXP 21
14744: AND
14745: IFFALSE 14757
14747: GO 14749
14749: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
14750: LD_STRING ACH_TIGERTAME
14752: PPUSH
14753: CALL_OW 543
14757: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
14758: LD_EXP 19
14762: PUSH
14763: LD_EXP 21
14767: PUSH
14768: LD_INT 1
14770: GREATER
14771: AND
14772: IFFALSE 14876
14774: GO 14776
14776: DISABLE
// begin hasTigers := true ;
14777: LD_ADDR_EXP 15
14781: PUSH
14782: LD_INT 1
14784: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
14785: LD_EXP 23
14789: PPUSH
14790: CALL_OW 302
14794: NOT
14795: PUSH
14796: LD_EXP 22
14800: PPUSH
14801: CALL_OW 302
14805: NOT
14806: OR
14807: IFFALSE 14811
// exit ;
14809: GO 14876
// CenterNowOnUnits ( Omar ) ;
14811: LD_EXP 23
14815: PPUSH
14816: CALL_OW 87
// DialogueOn ;
14820: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
14824: LD_EXP 23
14828: PPUSH
14829: LD_STRING DOm-Tiger-1
14831: PPUSH
14832: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
14836: LD_EXP 22
14840: PPUSH
14841: LD_STRING DH-Tiger-2
14843: PPUSH
14844: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
14848: LD_EXP 23
14852: PPUSH
14853: LD_STRING DOm-Tiger-3
14855: PPUSH
14856: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
14860: LD_EXP 22
14864: PPUSH
14865: LD_STRING DH-Tiger-4
14867: PPUSH
14868: CALL_OW 88
// DialogueOff ;
14872: CALL_OW 7
// end ;
14876: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
14877: LD_EXP 19
14881: PUSH
14882: LD_INT 22
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 50
14894: PUSH
14895: EMPTY
14896: LIST
14897: PUSH
14898: LD_INT 33
14900: PUSH
14901: LD_INT 2
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 69
14917: PUSH
14918: LD_INT 3
14920: GREATEREQUAL
14921: AND
14922: IFFALSE 14965
14924: GO 14926
14926: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
14927: LD_STRING ARemoteOut
14929: PPUSH
14930: CALL_OW 337
// hasVehicles := true ;
14934: LD_ADDR_EXP 14
14938: PUSH
14939: LD_INT 1
14941: ST_TO_ADDR
// if IsOk ( Heike ) then
14942: LD_EXP 22
14946: PPUSH
14947: CALL_OW 302
14951: IFFALSE 14965
// Say ( Heike , DH-Mechanic-1 ) ;
14953: LD_EXP 22
14957: PPUSH
14958: LD_STRING DH-Mechanic-1
14960: PPUSH
14961: CALL_OW 88
// end ;
14965: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( 2 , amBaseArea ) ) do
14966: LD_EXP 19
14970: PUSH
14971: LD_INT 29
14973: PPUSH
14974: LD_INT 22
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PPUSH
14984: CALL_OW 70
14988: PUSH
14989: LD_INT 2
14991: PPUSH
14992: LD_INT 1
14994: PPUSH
14995: CALL_OW 294
14999: OR
15000: AND
15001: IFFALSE 15014
15003: GO 15005
15005: DISABLE
// spotAmericanBase := true ;
15006: LD_ADDR_EXP 6
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
15014: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15015: LD_EXP 19
15019: PUSH
15020: LD_EXP 6
15024: AND
15025: PUSH
15026: LD_EXP 23
15030: PPUSH
15031: CALL_OW 302
15035: AND
15036: PUSH
15037: LD_EXP 22
15041: PPUSH
15042: CALL_OW 302
15046: AND
15047: IFFALSE 15287
15049: GO 15051
15051: DISABLE
// begin DialogueOn ;
15052: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15056: LD_INT 92
15058: PPUSH
15059: LD_INT 129
15061: PPUSH
15062: LD_INT 2
15064: PPUSH
15065: LD_INT 22
15067: NEG
15068: PPUSH
15069: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15073: LD_INT 92
15075: PPUSH
15076: LD_INT 129
15078: PPUSH
15079: LD_INT 2
15081: PPUSH
15082: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15086: LD_INT 92
15088: PPUSH
15089: LD_INT 129
15091: PPUSH
15092: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15096: LD_INT 10
15098: PPUSH
15099: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15103: LD_EXP 23
15107: PPUSH
15108: LD_STRING DO-AmBase-1
15110: PPUSH
15111: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15115: LD_EXP 22
15119: PPUSH
15120: LD_STRING DH-AmBase-2
15122: PPUSH
15123: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15127: LD_EXP 23
15131: PPUSH
15132: LD_STRING DO-AmBase-3
15134: PPUSH
15135: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15139: LD_EXP 22
15143: PPUSH
15144: LD_STRING DH-AmBase-4
15146: PPUSH
15147: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15151: LD_EXP 23
15155: PPUSH
15156: LD_STRING DO-AmBase-5
15158: PPUSH
15159: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15163: LD_EXP 22
15167: PPUSH
15168: LD_STRING DH-AmBase-6
15170: PPUSH
15171: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15175: LD_EXP 23
15179: PPUSH
15180: LD_STRING DO-AmBase-7
15182: PPUSH
15183: CALL_OW 88
// if not spotArabianBase then
15187: LD_EXP 7
15191: NOT
15192: IFFALSE 15208
// begin Say ( Omar , DO-AmBase-8a ) ;
15194: LD_EXP 23
15198: PPUSH
15199: LD_STRING DO-AmBase-8a
15201: PPUSH
15202: CALL_OW 88
// end else
15206: GO 15220
// begin Say ( Omar , DO-AmBase-8b ) ;
15208: LD_EXP 23
15212: PPUSH
15213: LD_STRING DO-AmBase-8b
15215: PPUSH
15216: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15220: LD_EXP 22
15224: PPUSH
15225: CALL_OW 310
15229: IFFALSE 15247
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15231: LD_EXP 22
15235: PPUSH
15236: CALL_OW 310
15240: PPUSH
15241: CALL_OW 87
15245: GO 15256
// CenterNowOnUnits ( Heike ) ;
15247: LD_EXP 22
15251: PPUSH
15252: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15256: LD_EXP 22
15260: PPUSH
15261: LD_STRING DH-AmBase-9
15263: PPUSH
15264: CALL_OW 88
// DialogueOff ;
15268: CALL_OW 7
// spotByAmerican := true ;
15272: LD_ADDR_EXP 8
15276: PUSH
15277: LD_INT 1
15279: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15280: LD_STRING O2
15282: PPUSH
15283: CALL_OW 337
// end ;
15287: END
// function TalkAboutLegion ; begin
15288: LD_INT 0
15290: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15291: LD_EXP 22
15295: PPUSH
15296: LD_STRING DH-Legion-1
15298: PPUSH
15299: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15303: LD_EXP 23
15307: PPUSH
15308: LD_STRING DOm-Legion-2
15310: PPUSH
15311: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15315: LD_EXP 22
15319: PPUSH
15320: LD_STRING DH-Legion-3
15322: PPUSH
15323: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15327: LD_EXP 23
15331: PPUSH
15332: LD_STRING DOm-Legion-4
15334: PPUSH
15335: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15339: LD_EXP 22
15343: PPUSH
15344: LD_STRING DH-Legion-5
15346: PPUSH
15347: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15351: LD_EXP 23
15355: PPUSH
15356: LD_STRING DOm-Legion-6
15358: PPUSH
15359: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15363: LD_EXP 22
15367: PPUSH
15368: LD_STRING DH-Legion-7
15370: PPUSH
15371: CALL_OW 88
// end ;
15375: LD_VAR 0 1
15379: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15380: LD_EXP 19
15384: PUSH
15385: LD_EXP 22
15389: PUSH
15390: LD_EXP 23
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PPUSH
15399: LD_INT 22
15401: PPUSH
15402: CALL 11411 0 2
15406: AND
15407: PUSH
15408: LD_EXP 9
15412: NOT
15413: AND
15414: PUSH
15415: LD_EXP 10
15419: NOT
15420: AND
15421: IFFALSE 15906
15423: GO 15425
15425: DISABLE
15426: LD_INT 0
15428: PPUSH
15429: PPUSH
15430: PPUSH
// begin uc_side := 8 ;
15431: LD_ADDR_OWVAR 20
15435: PUSH
15436: LD_INT 8
15438: ST_TO_ADDR
// uc_nation := nation_american ;
15439: LD_ADDR_OWVAR 21
15443: PUSH
15444: LD_INT 1
15446: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15447: LD_INT 3
15449: PPUSH
15450: LD_INT 1
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: LD_INT 9
15458: PPUSH
15459: LD_INT 90
15461: PPUSH
15462: CALL 25138 0 5
// veh := CreateVehicle ;
15466: LD_ADDR_VAR 0 3
15470: PUSH
15471: CALL_OW 45
15475: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15476: LD_ADDR_EXP 42
15480: PUSH
15481: LD_EXP 42
15485: PPUSH
15486: LD_VAR 0 3
15490: PPUSH
15491: CALL 57989 0 2
15495: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15496: LD_VAR 0 3
15500: PPUSH
15501: LD_INT 2
15503: PPUSH
15504: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15508: LD_VAR 0 3
15512: PPUSH
15513: LD_INT 126
15515: PPUSH
15516: LD_INT 18
15518: PPUSH
15519: LD_INT 0
15521: PPUSH
15522: CALL_OW 48
// uc_nation := nation_arabian ;
15526: LD_ADDR_OWVAR 21
15530: PUSH
15531: LD_INT 2
15533: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15534: LD_INT 0
15536: PPUSH
15537: LD_INT 6
15539: PUSH
15540: LD_INT 7
15542: PUSH
15543: LD_INT 8
15545: PUSH
15546: LD_INT 9
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: PUSH
15555: LD_OWVAR 67
15559: ARRAY
15560: PPUSH
15561: CALL_OW 383
// un := CreateHuman ;
15565: LD_ADDR_VAR 0 2
15569: PUSH
15570: CALL_OW 44
15574: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15575: LD_ADDR_EXP 37
15579: PUSH
15580: LD_EXP 37
15584: PPUSH
15585: LD_VAR 0 2
15589: PPUSH
15590: CALL 57989 0 2
15594: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: LD_VAR 0 3
15604: PPUSH
15605: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15609: LD_INT 0
15611: PPUSH
15612: LD_INT 6
15614: PUSH
15615: LD_INT 7
15617: PUSH
15618: LD_INT 8
15620: PUSH
15621: LD_INT 9
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: PUSH
15630: LD_OWVAR 67
15634: ARRAY
15635: PPUSH
15636: CALL_OW 381
// for i := 1 to 3 do
15640: LD_ADDR_VAR 0 1
15644: PUSH
15645: DOUBLE
15646: LD_INT 1
15648: DEC
15649: ST_TO_ADDR
15650: LD_INT 3
15652: PUSH
15653: FOR_TO
15654: IFFALSE 15721
// begin un := CreateHuman ;
15656: LD_ADDR_VAR 0 2
15660: PUSH
15661: CALL_OW 44
15665: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15666: LD_ADDR_EXP 37
15670: PUSH
15671: LD_EXP 37
15675: PPUSH
15676: LD_VAR 0 2
15680: PPUSH
15681: CALL 57989 0 2
15685: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15686: LD_VAR 0 2
15690: PPUSH
15691: LD_INT 2
15693: PPUSH
15694: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
15698: LD_VAR 0 2
15702: PPUSH
15703: LD_INT 126
15705: PPUSH
15706: LD_INT 18
15708: PPUSH
15709: LD_INT 4
15711: PPUSH
15712: LD_INT 0
15714: PPUSH
15715: CALL_OW 50
// end ;
15719: GO 15653
15721: POP
15722: POP
// wait ( 0 0$01 ) ;
15723: LD_INT 35
15725: PPUSH
15726: CALL_OW 67
// DialogueOn ;
15730: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
15734: LD_INT 126
15736: PPUSH
15737: LD_INT 18
15739: PPUSH
15740: LD_INT 2
15742: PPUSH
15743: LD_INT 16
15745: NEG
15746: PPUSH
15747: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
15751: LD_INT 126
15753: PPUSH
15754: LD_INT 18
15756: PPUSH
15757: CALL_OW 86
// TalkAboutLegion ;
15761: CALL 15288 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
15765: LD_INT 126
15767: PPUSH
15768: LD_INT 18
15770: PPUSH
15771: LD_INT 2
15773: PPUSH
15774: CALL_OW 331
// DialogueOff ;
15778: CALL_OW 7
// spotLegion := true ;
15782: LD_ADDR_EXP 10
15786: PUSH
15787: LD_INT 1
15789: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
15790: LD_EXP 37
15794: PPUSH
15795: LD_INT 164
15797: PPUSH
15798: LD_INT 47
15800: PPUSH
15801: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
15805: LD_EXP 37
15809: PPUSH
15810: LD_INT 179
15812: PPUSH
15813: LD_INT 20
15815: PPUSH
15816: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
15820: LD_INT 35
15822: PPUSH
15823: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
15827: LD_EXP 37
15831: PPUSH
15832: LD_INT 60
15834: PUSH
15835: EMPTY
15836: LIST
15837: PPUSH
15838: CALL_OW 72
15842: NOT
15843: PUSH
15844: LD_EXP 37
15848: PPUSH
15849: LD_INT 50
15851: PUSH
15852: EMPTY
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: NOT
15860: OR
15861: IFFALSE 15820
// if not UnitFilter ( legEForces , [ f_ok ] ) then
15863: LD_EXP 37
15867: PPUSH
15868: LD_INT 50
15870: PUSH
15871: EMPTY
15872: LIST
15873: PPUSH
15874: CALL_OW 72
15878: NOT
15879: IFFALSE 15883
// exit ;
15881: GO 15906
// legForces := legForces union legEForces ;
15883: LD_ADDR_EXP 36
15887: PUSH
15888: LD_EXP 36
15892: PUSH
15893: LD_EXP 37
15897: UNION
15898: ST_TO_ADDR
// legEForces := [ ] ;
15899: LD_ADDR_EXP 37
15903: PUSH
15904: EMPTY
15905: ST_TO_ADDR
// end ;
15906: PPOPN 3
15908: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15909: LD_EXP 19
15913: PUSH
15914: LD_EXP 22
15918: PUSH
15919: LD_EXP 23
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PPUSH
15928: LD_INT 23
15930: PPUSH
15931: CALL 11411 0 2
15935: AND
15936: PUSH
15937: LD_EXP 9
15941: NOT
15942: AND
15943: PUSH
15944: LD_EXP 10
15948: NOT
15949: AND
15950: IFFALSE 16435
15952: GO 15954
15954: DISABLE
15955: LD_INT 0
15957: PPUSH
15958: PPUSH
15959: PPUSH
// begin uc_side := 8 ;
15960: LD_ADDR_OWVAR 20
15964: PUSH
15965: LD_INT 8
15967: ST_TO_ADDR
// uc_nation := nation_american ;
15968: LD_ADDR_OWVAR 21
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15976: LD_INT 3
15978: PPUSH
15979: LD_INT 1
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_INT 9
15987: PPUSH
15988: LD_INT 90
15990: PPUSH
15991: CALL 25138 0 5
// veh := CreateVehicle ;
15995: LD_ADDR_VAR 0 3
15999: PUSH
16000: CALL_OW 45
16004: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16005: LD_ADDR_EXP 42
16009: PUSH
16010: LD_EXP 42
16014: PPUSH
16015: LD_VAR 0 3
16019: PPUSH
16020: CALL 57989 0 2
16024: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16025: LD_VAR 0 3
16029: PPUSH
16030: LD_INT 3
16032: PPUSH
16033: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16037: LD_VAR 0 3
16041: PPUSH
16042: LD_INT 224
16044: PPUSH
16045: LD_INT 57
16047: PPUSH
16048: LD_INT 0
16050: PPUSH
16051: CALL_OW 48
// uc_nation := nation_arabian ;
16055: LD_ADDR_OWVAR 21
16059: PUSH
16060: LD_INT 2
16062: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16063: LD_INT 0
16065: PPUSH
16066: LD_INT 6
16068: PUSH
16069: LD_INT 7
16071: PUSH
16072: LD_INT 8
16074: PUSH
16075: LD_INT 9
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: PUSH
16084: LD_OWVAR 67
16088: ARRAY
16089: PPUSH
16090: CALL_OW 383
// un := CreateHuman ;
16094: LD_ADDR_VAR 0 2
16098: PUSH
16099: CALL_OW 44
16103: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16104: LD_ADDR_EXP 37
16108: PUSH
16109: LD_EXP 37
16113: PPUSH
16114: LD_VAR 0 2
16118: PPUSH
16119: CALL 57989 0 2
16123: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16124: LD_VAR 0 2
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16138: LD_INT 0
16140: PPUSH
16141: LD_INT 6
16143: PUSH
16144: LD_INT 7
16146: PUSH
16147: LD_INT 8
16149: PUSH
16150: LD_INT 9
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: LD_OWVAR 67
16163: ARRAY
16164: PPUSH
16165: CALL_OW 381
// for i := 1 to 3 do
16169: LD_ADDR_VAR 0 1
16173: PUSH
16174: DOUBLE
16175: LD_INT 1
16177: DEC
16178: ST_TO_ADDR
16179: LD_INT 3
16181: PUSH
16182: FOR_TO
16183: IFFALSE 16250
// begin un := CreateHuman ;
16185: LD_ADDR_VAR 0 2
16189: PUSH
16190: CALL_OW 44
16194: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16195: LD_ADDR_EXP 37
16199: PUSH
16200: LD_EXP 37
16204: PPUSH
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL 57989 0 2
16214: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16215: LD_VAR 0 2
16219: PPUSH
16220: LD_INT 3
16222: PPUSH
16223: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16227: LD_VAR 0 2
16231: PPUSH
16232: LD_INT 224
16234: PPUSH
16235: LD_INT 57
16237: PPUSH
16238: LD_INT 4
16240: PPUSH
16241: LD_INT 0
16243: PPUSH
16244: CALL_OW 50
// end ;
16248: GO 16182
16250: POP
16251: POP
// wait ( 0 0$01 ) ;
16252: LD_INT 35
16254: PPUSH
16255: CALL_OW 67
// DialogueOn ;
16259: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16263: LD_INT 224
16265: PPUSH
16266: LD_INT 57
16268: PPUSH
16269: LD_INT 2
16271: PPUSH
16272: LD_INT 16
16274: NEG
16275: PPUSH
16276: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16280: LD_INT 224
16282: PPUSH
16283: LD_INT 57
16285: PPUSH
16286: CALL_OW 86
// TalkAboutLegion ;
16290: CALL 15288 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16294: LD_INT 224
16296: PPUSH
16297: LD_INT 57
16299: PPUSH
16300: LD_INT 2
16302: PPUSH
16303: CALL_OW 331
// DialogueOff ;
16307: CALL_OW 7
// spotLegion := true ;
16311: LD_ADDR_EXP 10
16315: PUSH
16316: LD_INT 1
16318: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16319: LD_EXP 37
16323: PPUSH
16324: LD_INT 164
16326: PPUSH
16327: LD_INT 47
16329: PPUSH
16330: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16334: LD_EXP 37
16338: PPUSH
16339: LD_INT 179
16341: PPUSH
16342: LD_INT 20
16344: PPUSH
16345: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16349: LD_INT 35
16351: PPUSH
16352: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16356: LD_EXP 37
16360: PPUSH
16361: LD_INT 60
16363: PUSH
16364: EMPTY
16365: LIST
16366: PPUSH
16367: CALL_OW 72
16371: NOT
16372: PUSH
16373: LD_EXP 37
16377: PPUSH
16378: LD_INT 50
16380: PUSH
16381: EMPTY
16382: LIST
16383: PPUSH
16384: CALL_OW 72
16388: NOT
16389: OR
16390: IFFALSE 16349
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16392: LD_EXP 37
16396: PPUSH
16397: LD_INT 50
16399: PUSH
16400: EMPTY
16401: LIST
16402: PPUSH
16403: CALL_OW 72
16407: NOT
16408: IFFALSE 16412
// exit ;
16410: GO 16435
// legForces := legForces union legEForces ;
16412: LD_ADDR_EXP 36
16416: PUSH
16417: LD_EXP 36
16421: PUSH
16422: LD_EXP 37
16426: UNION
16427: ST_TO_ADDR
// legEForces := [ ] ;
16428: LD_ADDR_EXP 37
16432: PUSH
16433: EMPTY
16434: ST_TO_ADDR
// end ;
16435: PPOPN 3
16437: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16438: LD_EXP 19
16442: PUSH
16443: LD_INT 8
16445: PPUSH
16446: LD_EXP 23
16450: PPUSH
16451: CALL_OW 292
16455: PUSH
16456: LD_INT 8
16458: PPUSH
16459: LD_EXP 22
16463: PPUSH
16464: CALL_OW 292
16468: OR
16469: PUSH
16470: LD_EXP 9
16474: OR
16475: AND
16476: PUSH
16477: LD_EXP 22
16481: PPUSH
16482: CALL_OW 302
16486: AND
16487: PUSH
16488: LD_EXP 23
16492: PPUSH
16493: CALL_OW 302
16497: AND
16498: IFFALSE 16639
16500: GO 16502
16502: DISABLE
// begin DialogueOn ;
16503: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16507: LD_EXP 35
16511: PPUSH
16512: LD_STRING DF-Spot-1
16514: PPUSH
16515: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16519: LD_EXP 22
16523: PPUSH
16524: LD_STRING DH-Spot-2
16526: PPUSH
16527: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16531: LD_EXP 35
16535: PPUSH
16536: LD_STRING DF-Spot-3
16538: PPUSH
16539: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16543: LD_EXP 22
16547: PPUSH
16548: LD_STRING DH-Spot-4
16550: PPUSH
16551: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16555: LD_EXP 23
16559: PPUSH
16560: LD_STRING DOm-Spot-5
16562: PPUSH
16563: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16567: LD_EXP 35
16571: PPUSH
16572: LD_STRING DF-Spot-6
16574: PPUSH
16575: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16579: LD_EXP 35
16583: PPUSH
16584: LD_STRING DF-Spot-7
16586: PPUSH
16587: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16591: LD_EXP 35
16595: PPUSH
16596: LD_STRING DF-Spot-8
16598: PPUSH
16599: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16603: LD_EXP 22
16607: PPUSH
16608: LD_STRING DH-Spot-9
16610: PPUSH
16611: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16615: LD_EXP 35
16619: PPUSH
16620: LD_STRING DF-Spot-10
16622: PPUSH
16623: CALL_OW 94
// DialogueOff ;
16627: CALL_OW 7
// spotByLegion := true ;
16631: LD_ADDR_EXP 9
16635: PUSH
16636: LD_INT 1
16638: ST_TO_ADDR
// end ;
16639: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16640: LD_EXP 19
16644: PUSH
16645: LD_EXP 9
16649: PUSH
16650: LD_EXP 10
16654: OR
16655: AND
16656: IFFALSE 16668
16658: GO 16660
16660: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16661: LD_STRING O3
16663: PPUSH
16664: CALL_OW 337
16668: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16669: LD_EXP 19
16673: PUSH
16674: LD_INT 22
16676: PUSH
16677: LD_INT 8
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 21
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 50
16696: PUSH
16697: EMPTY
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL_OW 69
16709: PUSH
16710: LD_INT 0
16712: EQUAL
16713: AND
16714: IFFALSE 16812
16716: GO 16718
16718: DISABLE
// begin legScriptActive := false ;
16719: LD_ADDR_EXP 4
16723: PUSH
16724: LD_INT 0
16726: ST_TO_ADDR
// if not americanDestroyed then
16727: LD_EXP 11
16731: NOT
16732: IFFALSE 16741
// SetAchievement ( ACH_REVANGE ) ;
16734: LD_STRING ACH_REVANGE
16736: PPUSH
16737: CALL_OW 543
// legionDestroyed := true ;
16741: LD_ADDR_EXP 12
16745: PUSH
16746: LD_INT 1
16748: ST_TO_ADDR
// DialogueOn ;
16749: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
16753: LD_EXP 35
16757: PPUSH
16758: LD_STRING DF-LegDes-1
16760: PPUSH
16761: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
16765: LD_EXP 22
16769: PPUSH
16770: LD_STRING DH-LegDes-2
16772: PPUSH
16773: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
16777: LD_EXP 35
16781: PPUSH
16782: LD_STRING DF-LegDes-3
16784: PPUSH
16785: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
16789: LD_EXP 22
16793: PPUSH
16794: LD_STRING DH-LegDes-4
16796: PPUSH
16797: CALL_OW 88
// DialogueOff ;
16801: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
16805: LD_STRING O5
16807: PPUSH
16808: CALL_OW 337
// end ;
16812: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
16813: LD_EXP 19
16817: PUSH
16818: LD_EXP 26
16822: PPUSH
16823: LD_INT 21
16825: PUSH
16826: LD_INT 1
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 50
16835: PUSH
16836: EMPTY
16837: LIST
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PPUSH
16843: CALL_OW 72
16847: PUSH
16848: LD_INT 6
16850: LESS
16851: AND
16852: IFFALSE 17100
16854: GO 16856
16856: DISABLE
16857: LD_INT 0
16859: PPUSH
16860: PPUSH
// begin amScriptActive := false ;
16861: LD_ADDR_EXP 3
16865: PUSH
16866: LD_INT 0
16868: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: LD_EXP 26
16878: PPUSH
16879: LD_INT 21
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 50
16891: PUSH
16892: EMPTY
16893: LIST
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PPUSH
16899: CALL_OW 72
16903: ST_TO_ADDR
// for i in tmp do
16904: LD_ADDR_VAR 0 1
16908: PUSH
16909: LD_VAR 0 2
16913: PUSH
16914: FOR_IN
16915: IFFALSE 16943
// begin ComExit ( i ) ;
16917: LD_VAR 0 1
16921: PPUSH
16922: CALL 58387 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
16926: LD_VAR 0 1
16930: PPUSH
16931: LD_INT 63
16933: PPUSH
16934: LD_INT 124
16936: PPUSH
16937: CALL_OW 171
// end ;
16941: GO 16914
16943: POP
16944: POP
// wait ( 0 0$2 ) ;
16945: LD_INT 70
16947: PPUSH
16948: CALL_OW 67
// americanDestroyed := true ;
16952: LD_ADDR_EXP 11
16956: PUSH
16957: LD_INT 1
16959: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16960: LD_INT 35
16962: PPUSH
16963: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
16967: LD_ADDR_VAR 0 2
16971: PUSH
16972: LD_EXP 26
16976: PPUSH
16977: LD_INT 21
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 50
16989: PUSH
16990: EMPTY
16991: LIST
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PPUSH
16997: CALL_OW 72
17001: PUSH
17002: LD_EXP 34
17006: PPUSH
17007: LD_INT 50
17009: PUSH
17010: EMPTY
17011: LIST
17012: PPUSH
17013: CALL_OW 72
17017: UNION
17018: ST_TO_ADDR
// for i in tmp do
17019: LD_ADDR_VAR 0 1
17023: PUSH
17024: LD_VAR 0 2
17028: PUSH
17029: FOR_IN
17030: IFFALSE 17091
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_INT 63
17039: PPUSH
17040: LD_INT 124
17042: PPUSH
17043: CALL_OW 307
17047: PUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: LD_INT 25
17055: PPUSH
17056: CALL_OW 308
17060: OR
17061: IFFALSE 17074
// RemoveUnit ( i ) else
17063: LD_VAR 0 1
17067: PPUSH
17068: CALL_OW 64
17072: GO 17089
// ComMoveXY ( i , 63 , 124 ) ;
17074: LD_VAR 0 1
17078: PPUSH
17079: LD_INT 63
17081: PPUSH
17082: LD_INT 124
17084: PPUSH
17085: CALL_OW 111
// end ;
17089: GO 17029
17091: POP
17092: POP
// until not tmp ;
17093: LD_VAR 0 2
17097: NOT
17098: IFFALSE 16960
// end ;
17100: PPOPN 2
17102: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17103: LD_EXP 19
17107: PUSH
17108: LD_EXP 11
17112: AND
17113: PUSH
17114: LD_EXP 22
17118: PPUSH
17119: CALL_OW 302
17123: AND
17124: PUSH
17125: LD_EXP 23
17129: PPUSH
17130: CALL_OW 302
17134: AND
17135: IFFALSE 17625
17137: GO 17139
17139: DISABLE
17140: LD_INT 0
17142: PPUSH
17143: PPUSH
17144: PPUSH
// begin DialogueOn ;
17145: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17149: LD_EXP 22
17153: PPUSH
17154: LD_STRING DH-Victory-1
17156: PPUSH
17157: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17161: LD_EXP 23
17165: PPUSH
17166: LD_STRING DOm-Victory-2
17168: PPUSH
17169: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17173: LD_EXP 23
17177: PPUSH
17178: LD_STRING DOm-Victory-3
17180: PPUSH
17181: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17185: LD_EXP 22
17189: PPUSH
17190: LD_STRING DH-Victory-4
17192: PPUSH
17193: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17197: LD_EXP 23
17201: PPUSH
17202: LD_STRING DOm-Victory-5
17204: PPUSH
17205: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17209: LD_EXP 23
17213: PPUSH
17214: LD_STRING DOm-Victory-6
17216: PPUSH
17217: CALL_OW 88
// DialogueOff ;
17221: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17225: LD_STRING O4
17227: PPUSH
17228: CALL_OW 337
// canFinish := true ;
17232: LD_ADDR_EXP 18
17236: PUSH
17237: LD_INT 1
17239: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17240: LD_INT 24
17242: PPUSH
17243: LD_INT 1
17245: PPUSH
17246: CALL_OW 424
// if not legionDestroyed then
17250: LD_EXP 12
17254: NOT
17255: IFFALSE 17625
// begin uc_nation := nation_arabian ;
17257: LD_ADDR_OWVAR 21
17261: PUSH
17262: LD_INT 2
17264: ST_TO_ADDR
// uc_side := 8 ;
17265: LD_ADDR_OWVAR 20
17269: PUSH
17270: LD_INT 8
17272: ST_TO_ADDR
// for i := 1 to 4 do
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: DOUBLE
17279: LD_INT 1
17281: DEC
17282: ST_TO_ADDR
17283: LD_INT 4
17285: PUSH
17286: FOR_TO
17287: IFFALSE 17368
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17289: LD_INT 0
17291: PPUSH
17292: LD_INT 8
17294: PUSH
17295: LD_INT 9
17297: PUSH
17298: LD_INT 10
17300: PUSH
17301: LD_INT 10
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: PUSH
17310: LD_OWVAR 67
17314: ARRAY
17315: PPUSH
17316: CALL_OW 381
// un := CreateHuman ;
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: CALL_OW 44
17329: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17330: LD_VAR 0 2
17334: PPUSH
17335: LD_INT 3
17337: PPUSH
17338: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17342: LD_VAR 0 2
17346: PPUSH
17347: LD_INT 26
17349: PPUSH
17350: LD_INT 0
17352: PPUSH
17353: CALL_OW 49
// ComCrawl ( un ) ;
17357: LD_VAR 0 2
17361: PPUSH
17362: CALL_OW 137
// end ;
17366: GO 17286
17368: POP
17369: POP
// for i := 1 to 3 do
17370: LD_ADDR_VAR 0 1
17374: PUSH
17375: DOUBLE
17376: LD_INT 1
17378: DEC
17379: ST_TO_ADDR
17380: LD_INT 3
17382: PUSH
17383: FOR_TO
17384: IFFALSE 17468
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17386: LD_INT 0
17388: PPUSH
17389: LD_INT 8
17391: PUSH
17392: LD_INT 9
17394: PUSH
17395: LD_INT 10
17397: PUSH
17398: LD_INT 10
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: PUSH
17407: LD_OWVAR 67
17411: ARRAY
17412: PPUSH
17413: CALL_OW 381
// un := CreateHuman ;
17417: LD_ADDR_VAR 0 2
17421: PUSH
17422: CALL_OW 44
17426: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17427: LD_VAR 0 2
17431: PPUSH
17432: LD_INT 8
17434: PPUSH
17435: CALL_OW 336
// SetDir ( un , 3 ) ;
17439: LD_VAR 0 2
17443: PPUSH
17444: LD_INT 3
17446: PPUSH
17447: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17451: LD_VAR 0 2
17455: PPUSH
17456: LD_INT 26
17458: PPUSH
17459: LD_INT 0
17461: PPUSH
17462: CALL_OW 49
// end ;
17466: GO 17383
17468: POP
17469: POP
// for i := 1 to 2 do
17470: LD_ADDR_VAR 0 1
17474: PUSH
17475: DOUBLE
17476: LD_INT 1
17478: DEC
17479: ST_TO_ADDR
17480: LD_INT 2
17482: PUSH
17483: FOR_TO
17484: IFFALSE 17623
// begin uc_side := 8 ;
17486: LD_ADDR_OWVAR 20
17490: PUSH
17491: LD_INT 8
17493: ST_TO_ADDR
// uc_nation := nation_american ;
17494: LD_ADDR_OWVAR 21
17498: PUSH
17499: LD_INT 1
17501: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17502: LD_INT 4
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: LD_INT 1
17510: PPUSH
17511: LD_INT 9
17513: PPUSH
17514: LD_INT 90
17516: PPUSH
17517: CALL 25138 0 5
// veh := CreateVehicle ;
17521: LD_ADDR_VAR 0 3
17525: PUSH
17526: CALL_OW 45
17530: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17531: LD_VAR 0 3
17535: PPUSH
17536: LD_INT 3
17538: PPUSH
17539: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17543: LD_VAR 0 3
17547: PPUSH
17548: LD_INT 27
17550: PPUSH
17551: LD_INT 0
17553: PPUSH
17554: CALL_OW 49
// uc_nation := nation_arabian ;
17558: LD_ADDR_OWVAR 21
17562: PUSH
17563: LD_INT 2
17565: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17566: LD_INT 0
17568: PPUSH
17569: LD_INT 8
17571: PUSH
17572: LD_INT 9
17574: PUSH
17575: LD_INT 10
17577: PUSH
17578: LD_INT 10
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: PUSH
17587: LD_OWVAR 67
17591: ARRAY
17592: PPUSH
17593: CALL_OW 383
// un := CreateHuman ;
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: CALL_OW 44
17606: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17607: LD_VAR 0 2
17611: PPUSH
17612: LD_VAR 0 3
17616: PPUSH
17617: CALL_OW 52
// end ;
17621: GO 17483
17623: POP
17624: POP
// end ; end ;
17625: PPOPN 3
17627: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17628: LD_EXP 19
17632: PUSH
17633: LD_EXP 18
17637: AND
17638: PUSH
17639: LD_EXP 23
17643: PUSH
17644: EMPTY
17645: LIST
17646: PPUSH
17647: LD_INT 24
17649: PPUSH
17650: CALL 11411 0 2
17654: AND
17655: PUSH
17656: LD_EXP 22
17660: PUSH
17661: EMPTY
17662: LIST
17663: PPUSH
17664: LD_INT 24
17666: PPUSH
17667: CALL 11411 0 2
17671: AND
17672: IFFALSE 17845
17674: GO 17676
17676: DISABLE
// begin if tick <= 50 50$00 then
17677: LD_OWVAR 1
17681: PUSH
17682: LD_INT 105000
17684: LESSEQUAL
17685: IFFALSE 17694
// SetAchievement ( ACH_HSPEED_10 ) ;
17687: LD_STRING ACH_HSPEED_10
17689: PPUSH
17690: CALL_OW 543
// if legionDestroyed then
17694: LD_EXP 12
17698: IFFALSE 17712
// AddMedal ( med1 , 1 ) else
17700: LD_STRING med1
17702: PPUSH
17703: LD_INT 1
17705: PPUSH
17706: CALL_OW 101
17710: GO 17723
// AddMedal ( med1 , - 1 ) ;
17712: LD_STRING med1
17714: PPUSH
17715: LD_INT 1
17717: NEG
17718: PPUSH
17719: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
17723: LD_OWVAR 1
17727: PUSH
17728: LD_INT 189000
17730: PUSH
17731: LD_INT 168000
17733: PUSH
17734: LD_INT 147000
17736: PUSH
17737: LD_INT 126000
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: PUSH
17746: LD_OWVAR 67
17750: ARRAY
17751: LESSEQUAL
17752: IFFALSE 17766
// AddMedal ( med2 , 1 ) else
17754: LD_STRING med2
17756: PPUSH
17757: LD_INT 1
17759: PPUSH
17760: CALL_OW 101
17764: GO 17777
// AddMedal ( med2 , - 1 ) ;
17766: LD_STRING med2
17768: PPUSH
17769: LD_INT 1
17771: NEG
17772: PPUSH
17773: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasDrugs >= 3 then
17777: LD_EXP 16
17781: PUSH
17782: LD_EXP 14
17786: PLUS
17787: PUSH
17788: LD_EXP 15
17792: PLUS
17793: PUSH
17794: LD_EXP 13
17798: PLUS
17799: PUSH
17800: LD_EXP 17
17804: PLUS
17805: PUSH
17806: LD_INT 3
17808: GREATEREQUAL
17809: IFFALSE 17823
// AddMedal ( med3 , 1 ) else
17811: LD_STRING med3
17813: PPUSH
17814: LD_INT 1
17816: PPUSH
17817: CALL_OW 101
17821: GO 17834
// AddMedal ( med3 , - 1 ) ;
17823: LD_STRING med3
17825: PPUSH
17826: LD_INT 1
17828: NEG
17829: PPUSH
17830: CALL_OW 101
// GiveMedals ( MAIN ) ;
17834: LD_STRING MAIN
17836: PPUSH
17837: CALL_OW 102
// YouWin ;
17841: CALL_OW 103
// end ; end_of_file
17845: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
17846: LD_VAR 0 1
17850: PPUSH
17851: CALL 79110 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
17855: LD_EXP 5
17859: PUSH
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 255
17869: PUSH
17870: LD_INT 2
17872: EQUAL
17873: AND
17874: PUSH
17875: LD_VAR 0 1
17879: PPUSH
17880: CALL_OW 263
17884: PUSH
17885: LD_INT 5
17887: EQUAL
17888: PUSH
17889: LD_VAR 0 1
17893: PPUSH
17894: CALL_OW 257
17898: PUSH
17899: LD_INT 12
17901: PUSH
17902: LD_INT 15
17904: PUSH
17905: LD_INT 16
17907: PUSH
17908: LD_INT 17
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: IN
17917: OR
17918: AND
17919: IFFALSE 17989
// begin apeAmount := Dec ( apeAmount ) ;
17921: LD_ADDR_EXP 5
17925: PUSH
17926: LD_EXP 5
17930: PPUSH
17931: CALL 59372 0 1
17935: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
17936: LD_INT 35
17938: PPUSH
17939: LD_INT 2100
17941: PPUSH
17942: CALL_OW 12
17946: PPUSH
17947: CALL_OW 67
// uc_side := 0 ;
17951: LD_ADDR_OWVAR 20
17955: PUSH
17956: LD_INT 0
17958: ST_TO_ADDR
// uc_nation := nation_nature ;
17959: LD_ADDR_OWVAR 21
17963: PUSH
17964: LD_INT 0
17966: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
17967: LD_INT 0
17969: PPUSH
17970: CALL 54257 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
17974: CALL_OW 44
17978: PPUSH
17979: LD_INT 6
17981: PPUSH
17982: LD_INT 0
17984: PPUSH
17985: CALL_OW 49
// end ; if unit = Heike then
17989: LD_VAR 0 1
17993: PUSH
17994: LD_EXP 22
17998: EQUAL
17999: IFFALSE 18008
// YouLost ( Heike ) ;
18001: LD_STRING Heike
18003: PPUSH
18004: CALL_OW 104
// if unit = Omar then
18008: LD_VAR 0 1
18012: PUSH
18013: LD_EXP 23
18017: EQUAL
18018: IFFALSE 18027
// YouLost ( Omar ) ;
18020: LD_STRING Omar
18022: PPUSH
18023: CALL_OW 104
// if unit in amForces then
18027: LD_VAR 0 1
18031: PUSH
18032: LD_EXP 26
18036: IN
18037: IFFALSE 18055
// amForces := amForces diff unit ;
18039: LD_ADDR_EXP 26
18043: PUSH
18044: LD_EXP 26
18048: PUSH
18049: LD_VAR 0 1
18053: DIFF
18054: ST_TO_ADDR
// if unit in amTanks then
18055: LD_VAR 0 1
18059: PUSH
18060: LD_EXP 31
18064: IN
18065: IFFALSE 18083
// amTanks := amTanks diff unit ;
18067: LD_ADDR_EXP 31
18071: PUSH
18072: LD_EXP 31
18076: PUSH
18077: LD_VAR 0 1
18081: DIFF
18082: ST_TO_ADDR
// if unit in amPatrol then
18083: LD_VAR 0 1
18087: PUSH
18088: LD_EXP 34
18092: IN
18093: IFFALSE 18111
// amPatrol := amPatrol diff unit ;
18095: LD_ADDR_EXP 34
18099: PUSH
18100: LD_EXP 34
18104: PUSH
18105: LD_VAR 0 1
18109: DIFF
18110: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL_OW 266
18120: PUSH
18121: LD_INT 32
18123: PUSH
18124: LD_INT 33
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: IN
18131: PUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 255
18141: PUSH
18142: LD_INT 1
18144: EQUAL
18145: AND
18146: IFFALSE 18209
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18148: LD_ADDR_EXP 30
18152: PUSH
18153: LD_EXP 30
18157: PPUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: CALL_OW 266
18167: PUSH
18168: LD_VAR 0 1
18172: PPUSH
18173: CALL_OW 250
18177: PUSH
18178: LD_VAR 0 1
18182: PPUSH
18183: CALL_OW 251
18187: PUSH
18188: LD_VAR 0 1
18192: PPUSH
18193: CALL_OW 254
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: PPUSH
18204: CALL 57989 0 2
18208: ST_TO_ADDR
// if unit in legForces then
18209: LD_VAR 0 1
18213: PUSH
18214: LD_EXP 36
18218: IN
18219: IFFALSE 18237
// legForces := legForces diff unit ;
18221: LD_ADDR_EXP 36
18225: PUSH
18226: LD_EXP 36
18230: PUSH
18231: LD_VAR 0 1
18235: DIFF
18236: ST_TO_ADDR
// if unit in legTanks then
18237: LD_VAR 0 1
18241: PUSH
18242: LD_EXP 42
18246: IN
18247: IFFALSE 18265
// legTanks := legTanks diff unit ;
18249: LD_ADDR_EXP 42
18253: PUSH
18254: LD_EXP 42
18258: PUSH
18259: LD_VAR 0 1
18263: DIFF
18264: ST_TO_ADDR
// if unit in legRTanks then
18265: LD_VAR 0 1
18269: PUSH
18270: LD_EXP 43
18274: IN
18275: IFFALSE 18293
// legRTanks := legRTanks diff unit ;
18277: LD_ADDR_EXP 43
18281: PUSH
18282: LD_EXP 43
18286: PUSH
18287: LD_VAR 0 1
18291: DIFF
18292: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 266
18302: PUSH
18303: LD_INT 32
18305: PUSH
18306: LD_INT 33
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: IN
18313: PUSH
18314: LD_VAR 0 1
18318: PPUSH
18319: CALL_OW 255
18323: PUSH
18324: LD_INT 8
18326: EQUAL
18327: AND
18328: IFFALSE 18391
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18330: LD_ADDR_EXP 41
18334: PUSH
18335: LD_EXP 41
18339: PPUSH
18340: LD_VAR 0 1
18344: PPUSH
18345: CALL_OW 266
18349: PUSH
18350: LD_VAR 0 1
18354: PPUSH
18355: CALL_OW 250
18359: PUSH
18360: LD_VAR 0 1
18364: PPUSH
18365: CALL_OW 251
18369: PUSH
18370: LD_VAR 0 1
18374: PPUSH
18375: CALL_OW 254
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL 57989 0 2
18390: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18391: LD_VAR 0 1
18395: PPUSH
18396: CALL_OW 264
18400: PUSH
18401: LD_INT 13
18403: EQUAL
18404: PUSH
18405: LD_VAR 0 1
18409: PPUSH
18410: CALL_OW 255
18414: PUSH
18415: LD_INT 1
18417: EQUAL
18418: AND
18419: IFFALSE 18454
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18421: LD_ADDR_EXP 28
18425: PUSH
18426: LD_EXP 28
18430: PPUSH
18431: LD_INT 2
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: LD_INT 13
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: PPUSH
18449: CALL 57989 0 2
18453: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18454: LD_VAR 0 1
18458: PPUSH
18459: CALL_OW 264
18463: PUSH
18464: LD_INT 88
18466: EQUAL
18467: PUSH
18468: LD_VAR 0 1
18472: PPUSH
18473: CALL_OW 255
18477: PUSH
18478: LD_INT 8
18480: EQUAL
18481: AND
18482: IFFALSE 18517
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18484: LD_ADDR_EXP 39
18488: PUSH
18489: LD_EXP 39
18493: PPUSH
18494: LD_INT 13
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: LD_INT 2
18502: PUSH
18503: LD_INT 88
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: PPUSH
18512: CALL 57989 0 2
18516: ST_TO_ADDR
// if unit = amCargo then
18517: LD_VAR 0 1
18521: PUSH
18522: LD_EXP 33
18526: EQUAL
18527: IFFALSE 18570
// begin amCargo := 0 ;
18529: LD_ADDR_EXP 33
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
18537: LD_ADDR_EXP 28
18541: PUSH
18542: LD_EXP 28
18546: PPUSH
18547: LD_INT 2
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: LD_INT 2
18555: PUSH
18556: LD_INT 12
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: PPUSH
18565: CALL 57989 0 2
18569: ST_TO_ADDR
// end ; if unit = legCargo then
18570: LD_VAR 0 1
18574: PUSH
18575: LD_EXP 44
18579: EQUAL
18580: IFFALSE 18623
// begin legCargo := 0 ;
18582: LD_ADDR_EXP 44
18586: PUSH
18587: LD_INT 0
18589: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
18590: LD_ADDR_EXP 39
18594: PUSH
18595: LD_EXP 39
18599: PPUSH
18600: LD_INT 13
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: LD_INT 32
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: PPUSH
18618: CALL 57989 0 2
18622: ST_TO_ADDR
// end ; end ;
18623: PPOPN 1
18625: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
18626: LD_ADDR_EXP 21
18630: PUSH
18631: LD_EXP 21
18635: PPUSH
18636: CALL 59350 0 1
18640: ST_TO_ADDR
// end ;
18641: PPOPN 2
18643: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
18644: LD_VAR 0 2
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: LD_INT 22
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 25
18668: PUSH
18669: LD_INT 3
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PPUSH
18680: CALL_OW 69
18684: IN
18685: PUSH
18686: LD_VAR 0 1
18690: PPUSH
18691: CALL_OW 266
18695: PUSH
18696: LD_INT 3
18698: EQUAL
18699: AND
18700: PUSH
18701: LD_VAR 0 2
18705: PPUSH
18706: CALL_OW 256
18710: PUSH
18711: LD_INT 1000
18713: LESS
18714: AND
18715: IFFALSE 18741
// begin SetTag ( un , 0 ) ;
18717: LD_VAR 0 2
18721: PPUSH
18722: LD_INT 0
18724: PPUSH
18725: CALL_OW 109
// SetLives ( un , 1000 ) ;
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_INT 1000
18736: PPUSH
18737: CALL_OW 234
// end ; end ;
18741: PPOPN 2
18743: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
18748: LD_VAR 0 1
18752: PPUSH
18753: LD_VAR 0 2
18757: PPUSH
18758: CALL 79230 0 2
// side := GetSide ( fac ) ;
18762: LD_ADDR_VAR 0 3
18766: PUSH
18767: LD_VAR 0 2
18771: PPUSH
18772: CALL_OW 255
18776: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
18777: LD_ADDR_VAR 0 4
18781: PUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL_OW 264
18791: ST_TO_ADDR
// if side = 1 then
18792: LD_VAR 0 3
18796: PUSH
18797: LD_INT 1
18799: EQUAL
18800: IFFALSE 18909
// begin amConstructList := Delete ( amConstructList , 1 ) ;
18802: LD_ADDR_EXP 28
18806: PUSH
18807: LD_EXP 28
18811: PPUSH
18812: LD_INT 1
18814: PPUSH
18815: CALL_OW 3
18819: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
18820: LD_VAR 0 4
18824: PUSH
18825: LD_INT 12
18827: EQUAL
18828: PUSH
18829: LD_EXP 33
18833: NOT
18834: AND
18835: IFFALSE 18847
// amCargo := veh ;
18837: LD_ADDR_EXP 33
18841: PUSH
18842: LD_VAR 0 1
18846: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
18847: LD_VAR 0 4
18851: PUSH
18852: LD_INT 12
18854: PUSH
18855: LD_INT 13
18857: PUSH
18858: LD_INT 14
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: IN
18866: IFFALSE 18870
// exit ;
18868: GO 19059
// amTanks := Join ( amTanks , veh ) ;
18870: LD_ADDR_EXP 31
18874: PUSH
18875: LD_EXP 31
18879: PPUSH
18880: LD_VAR 0 1
18884: PPUSH
18885: CALL 57989 0 2
18889: ST_TO_ADDR
// wait ( 0 0$01 ) ;
18890: LD_INT 35
18892: PPUSH
18893: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
18897: LD_VAR 0 1
18901: PPUSH
18902: LD_INT 12
18904: PPUSH
18905: CALL_OW 173
// end ; if side = 8 then
18909: LD_VAR 0 3
18913: PUSH
18914: LD_INT 8
18916: EQUAL
18917: IFFALSE 19059
// begin legConstructList := Delete ( legConstructList , 1 ) ;
18919: LD_ADDR_EXP 39
18923: PUSH
18924: LD_EXP 39
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 3
18936: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
18937: LD_VAR 0 4
18941: PUSH
18942: LD_INT 32
18944: EQUAL
18945: PUSH
18946: LD_EXP 44
18950: NOT
18951: AND
18952: IFFALSE 18964
// legCargo := veh ;
18954: LD_ADDR_EXP 44
18958: PUSH
18959: LD_VAR 0 1
18963: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
18964: LD_VAR 0 4
18968: PUSH
18969: LD_INT 32
18971: PUSH
18972: LD_INT 88
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: IN
18979: IFFALSE 18983
// exit ;
18981: GO 19059
// if GetControl ( veh ) = control_manual then
18983: LD_VAR 0 1
18987: PPUSH
18988: CALL_OW 263
18992: PUSH
18993: LD_INT 1
18995: EQUAL
18996: IFFALSE 19020
// legTanks := Join ( legTanks , veh ) else
18998: LD_ADDR_EXP 42
19002: PUSH
19003: LD_EXP 42
19007: PPUSH
19008: LD_VAR 0 1
19012: PPUSH
19013: CALL 57989 0 2
19017: ST_TO_ADDR
19018: GO 19040
// legRTanks := Join ( legRTanks , veh ) ;
19020: LD_ADDR_EXP 43
19024: PUSH
19025: LD_EXP 43
19029: PPUSH
19030: LD_VAR 0 1
19034: PPUSH
19035: CALL 57989 0 2
19039: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19040: LD_INT 35
19042: PPUSH
19043: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19047: LD_VAR 0 1
19051: PPUSH
19052: LD_INT 15
19054: PPUSH
19055: CALL_OW 173
// end ; end ;
19059: PPOPN 4
19061: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
19066: PPUSH
// begin side := GetSide ( driver ) ;
19067: LD_ADDR_VAR 0 7
19071: PUSH
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 255
19081: ST_TO_ADDR
// if side = 1 and driver in amForces then
19082: LD_VAR 0 7
19086: PUSH
19087: LD_INT 1
19089: EQUAL
19090: PUSH
19091: LD_VAR 0 1
19095: PUSH
19096: LD_EXP 26
19100: IN
19101: AND
19102: IFFALSE 19314
// begin ComMoveToArea ( driver , amBaseArea ) ;
19104: LD_VAR 0 1
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: CALL_OW 113
// SetTag ( driver , tMech ) ;
19116: LD_VAR 0 1
19120: PPUSH
19121: LD_INT 7
19123: PPUSH
19124: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19128: LD_ADDR_VAR 0 6
19132: PUSH
19133: LD_INT 1
19135: PPUSH
19136: LD_INT 22
19138: PUSH
19139: LD_VAR 0 7
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 30
19150: PUSH
19151: LD_INT 3
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 50
19160: PUSH
19161: EMPTY
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: LIST
19168: PPUSH
19169: CALL_OW 70
19173: ST_TO_ADDR
// if fac then
19174: LD_VAR 0 6
19178: IFFALSE 19200
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19180: LD_VAR 0 1
19184: PPUSH
19185: LD_VAR 0 6
19189: PUSH
19190: LD_INT 1
19192: ARRAY
19193: PPUSH
19194: CALL_OW 180
// exit ;
19198: GO 19534
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19200: LD_ADDR_VAR 0 5
19204: PUSH
19205: LD_INT 1
19207: PPUSH
19208: LD_INT 22
19210: PUSH
19211: LD_VAR 0 7
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 2
19222: PUSH
19223: LD_INT 30
19225: PUSH
19226: LD_INT 4
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 30
19235: PUSH
19236: LD_INT 5
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 3
19250: PUSH
19251: LD_INT 62
19253: PUSH
19254: EMPTY
19255: LIST
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 50
19263: PUSH
19264: EMPTY
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 70
19277: ST_TO_ADDR
// if arm then
19278: LD_VAR 0 5
19282: IFFALSE 19314
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19284: LD_VAR 0 1
19288: PPUSH
19289: LD_VAR 0 5
19293: PUSH
19294: LD_INT 1
19296: ARRAY
19297: PPUSH
19298: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19302: LD_VAR 0 1
19306: PPUSH
19307: LD_INT 1
19309: PPUSH
19310: CALL_OW 183
// end ; end ; if side = 8 then
19314: LD_VAR 0 7
19318: PUSH
19319: LD_INT 8
19321: EQUAL
19322: IFFALSE 19534
// begin ComMoveToArea ( driver , legBaseArea ) ;
19324: LD_VAR 0 1
19328: PPUSH
19329: LD_INT 2
19331: PPUSH
19332: CALL_OW 113
// SetTag ( driver , tMech ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: LD_INT 7
19343: PPUSH
19344: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19348: LD_ADDR_VAR 0 6
19352: PUSH
19353: LD_INT 2
19355: PPUSH
19356: LD_INT 22
19358: PUSH
19359: LD_VAR 0 7
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 3
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 50
19380: PUSH
19381: EMPTY
19382: LIST
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: PPUSH
19389: CALL_OW 70
19393: ST_TO_ADDR
// if fac then
19394: LD_VAR 0 6
19398: IFFALSE 19420
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19400: LD_VAR 0 1
19404: PPUSH
19405: LD_VAR 0 6
19409: PUSH
19410: LD_INT 1
19412: ARRAY
19413: PPUSH
19414: CALL_OW 180
// exit ;
19418: GO 19534
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19420: LD_ADDR_VAR 0 5
19424: PUSH
19425: LD_INT 2
19427: PPUSH
19428: LD_INT 22
19430: PUSH
19431: LD_VAR 0 7
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: LD_INT 30
19445: PUSH
19446: LD_INT 4
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 30
19455: PUSH
19456: LD_INT 5
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: LD_INT 62
19473: PUSH
19474: EMPTY
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 50
19483: PUSH
19484: EMPTY
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: PPUSH
19493: CALL_OW 70
19497: ST_TO_ADDR
// if arm then
19498: LD_VAR 0 5
19502: IFFALSE 19534
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19504: LD_VAR 0 1
19508: PPUSH
19509: LD_VAR 0 5
19513: PUSH
19514: LD_INT 1
19516: ARRAY
19517: PPUSH
19518: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19522: LD_VAR 0 1
19526: PPUSH
19527: LD_INT 1
19529: PPUSH
19530: CALL_OW 183
// end ; end ; end ;
19534: PPOPN 7
19536: END
// on BuildingComplete ( b ) do var side , type ;
19537: LD_INT 0
19539: PPUSH
19540: PPUSH
// begin side := GetSide ( b ) ;
19541: LD_ADDR_VAR 0 2
19545: PUSH
19546: LD_VAR 0 1
19550: PPUSH
19551: CALL_OW 255
19555: ST_TO_ADDR
// type := GetBType ( b ) ;
19556: LD_ADDR_VAR 0 3
19560: PUSH
19561: LD_VAR 0 1
19565: PPUSH
19566: CALL_OW 266
19570: ST_TO_ADDR
// if side = 1 then
19571: LD_VAR 0 2
19575: PUSH
19576: LD_INT 1
19578: EQUAL
19579: IFFALSE 19629
// begin amBuildings := Delete ( amBuildings , 1 ) ;
19581: LD_ADDR_EXP 30
19585: PUSH
19586: LD_EXP 30
19590: PPUSH
19591: LD_INT 1
19593: PPUSH
19594: CALL_OW 3
19598: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
19599: LD_VAR 0 3
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: LD_INT 4
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: IN
19618: IFFALSE 19629
// ComUpgrade ( b ) ;
19620: LD_VAR 0 1
19624: PPUSH
19625: CALL_OW 146
// end ; end ;
19629: PPOPN 3
19631: END
// on ResearchComplete ( tech , lab ) do var side ;
19632: LD_INT 0
19634: PPUSH
// begin side := GetSide ( lab ) ;
19635: LD_ADDR_VAR 0 3
19639: PUSH
19640: LD_VAR 0 2
19644: PPUSH
19645: CALL_OW 255
19649: ST_TO_ADDR
// if side = 1 then
19650: LD_VAR 0 3
19654: PUSH
19655: LD_INT 1
19657: EQUAL
19658: IFFALSE 19676
// amTech := amTech diff tech ;
19660: LD_ADDR_EXP 27
19664: PUSH
19665: LD_EXP 27
19669: PUSH
19670: LD_VAR 0 1
19674: DIFF
19675: ST_TO_ADDR
// end ;
19676: PPOPN 3
19678: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19679: LD_VAR 0 1
19683: PPUSH
19684: CALL 79214 0 1
// end ;
19688: PPOPN 1
19690: END
// on SailEvent ( event ) do begin case event of end ;
19691: LD_VAR 0 1
19695: PUSH
19696: POP
// end ;
19697: PPOPN 1
19699: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
19700: LD_EXP 19
19704: NOT
19705: IFFALSE 19709
// exit ;
19707: GO 19807
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
19709: LD_EXP 8
19713: NOT
19714: PUSH
19715: LD_VAR 0 1
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: IN
19730: AND
19731: PUSH
19732: LD_VAR 0 2
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: IN
19747: AND
19748: IFFALSE 19758
// spotByAmerican := true ;
19750: LD_ADDR_EXP 8
19754: PUSH
19755: LD_INT 1
19757: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
19758: LD_EXP 9
19762: NOT
19763: PUSH
19764: LD_VAR 0 1
19768: PUSH
19769: LD_INT 2
19771: PUSH
19772: LD_INT 8
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: IN
19779: AND
19780: PUSH
19781: LD_VAR 0 2
19785: PUSH
19786: LD_INT 8
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: IN
19796: AND
19797: IFFALSE 19807
// spotByLegion := true ;
19799: LD_ADDR_EXP 9
19803: PUSH
19804: LD_INT 1
19806: ST_TO_ADDR
// end ; end_of_file
19807: PPOPN 2
19809: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
19810: LD_EXP 7
19814: IFFALSE 19921
19816: GO 19818
19818: DISABLE
19819: LD_INT 0
19821: PPUSH
19822: PPUSH
// begin enable ;
19823: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
19824: LD_INT 35
19826: PPUSH
19827: LD_INT 385
19829: PPUSH
19830: CALL_OW 12
19834: PPUSH
19835: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
19839: LD_ADDR_VAR 0 2
19843: PUSH
19844: LD_INT 16
19846: PUSH
19847: LD_INT 17
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
19854: LD_ADDR_VAR 0 1
19858: PUSH
19859: LD_VAR 0 2
19863: PUSH
19864: LD_INT 1
19866: PPUSH
19867: LD_VAR 0 2
19871: PPUSH
19872: CALL 22400 0 1
19876: PPUSH
19877: CALL_OW 12
19881: ARRAY
19882: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
19883: LD_VAR 0 1
19887: PPUSH
19888: CALL_OW 435
19892: PUSH
19893: LD_INT 4
19895: LESS
19896: IFFALSE 19921
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
19898: LD_INT 1
19900: PPUSH
19901: LD_INT 5
19903: PPUSH
19904: CALL_OW 12
19908: PPUSH
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_INT 1
19916: PPUSH
19917: CALL_OW 55
// end ;
19921: PPOPN 2
19923: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
19924: LD_OWVAR 1
19928: PUSH
19929: LD_INT 10500
19931: PUSH
19932: LD_INT 8400
19934: PUSH
19935: LD_INT 6300
19937: PUSH
19938: LD_INT 5250
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: PUSH
19947: LD_OWVAR 67
19951: ARRAY
19952: LESS
19953: PUSH
19954: LD_EXP 7
19958: AND
19959: IFFALSE 19992
19961: GO 19963
19963: DISABLE
// begin enable ;
19964: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
19965: LD_INT 1
19967: PPUSH
19968: LD_INT 5
19970: PPUSH
19971: CALL_OW 12
19975: PPUSH
19976: LD_INT 218
19978: PPUSH
19979: LD_INT 92
19981: PPUSH
19982: LD_INT 11
19984: PPUSH
19985: LD_INT 1
19987: PPUSH
19988: CALL_OW 56
// end ;
19992: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
19993: LD_OWVAR 1
19997: PUSH
19998: LD_INT 12600
20000: PUSH
20001: LD_INT 10500
20003: PUSH
20004: LD_INT 8400
20006: PUSH
20007: LD_INT 7350
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: PUSH
20016: LD_OWVAR 67
20020: ARRAY
20021: GREATER
20022: PUSH
20023: LD_EXP 7
20027: AND
20028: IFFALSE 20080
20030: GO 20032
20032: DISABLE
// begin enable ;
20033: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) then
20034: LD_INT 100
20036: PUSH
20037: LD_INT 10
20039: PUSH
20040: LD_OWVAR 67
20044: MUL
20045: MINUS
20046: PPUSH
20047: CALL_OW 13
20051: IFFALSE 20080
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20053: LD_INT 1
20055: PPUSH
20056: LD_INT 5
20058: PPUSH
20059: CALL_OW 12
20063: PPUSH
20064: LD_INT 218
20066: PPUSH
20067: LD_INT 92
20069: PPUSH
20070: LD_INT 11
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: CALL_OW 56
// end ;
20080: END
// every 0 0$55 trigger IsOk ( amBase ) do
20081: LD_INT 2
20083: PPUSH
20084: CALL_OW 302
20088: IFFALSE 20128
20090: GO 20092
20092: DISABLE
// begin enable ;
20093: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20094: LD_INT 13
20096: PPUSH
20097: CALL_OW 435
20101: PUSH
20102: LD_INT 3
20104: LESS
20105: IFFALSE 20128
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20107: LD_INT 1
20109: PPUSH
20110: LD_INT 5
20112: PPUSH
20113: CALL_OW 12
20117: PPUSH
20118: LD_INT 13
20120: PPUSH
20121: LD_INT 1
20123: PPUSH
20124: CALL_OW 55
// end ;
20128: END
// every 1 1$05 trigger IsOk ( legBase ) do
20129: LD_INT 38
20131: PPUSH
20132: CALL_OW 302
20136: IFFALSE 20176
20138: GO 20140
20140: DISABLE
// begin enable ;
20141: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20142: LD_INT 14
20144: PPUSH
20145: CALL_OW 435
20149: PUSH
20150: LD_INT 3
20152: LESS
20153: IFFALSE 20176
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20155: LD_INT 1
20157: PPUSH
20158: LD_INT 5
20160: PPUSH
20161: CALL_OW 12
20165: PPUSH
20166: LD_INT 14
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: CALL_OW 55
// end ; end_of_file
20176: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20177: LD_EXP 19
20181: PUSH
20182: LD_EXP 23
20186: PPUSH
20187: CALL_OW 257
20191: PUSH
20192: LD_INT 11
20194: NONEQUAL
20195: AND
20196: PUSH
20197: LD_EXP 7
20201: AND
20202: PUSH
20203: LD_INT 85
20205: PPUSH
20206: CALL_OW 302
20210: AND
20211: IFFALSE 20231
20213: GO 20215
20215: DISABLE
// begin Query ( QSheik ) ;
20216: LD_STRING QSheik
20218: PPUSH
20219: CALL_OW 97
// omarCanChangeClass := true ;
20223: LD_ADDR_EXP 20
20227: PUSH
20228: LD_INT 1
20230: ST_TO_ADDR
// end ;
20231: END
// every 0 0$3 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20232: LD_EXP 20
20236: PUSH
20237: LD_EXP 23
20241: PPUSH
20242: CALL_OW 257
20246: PUSH
20247: LD_INT 11
20249: NONEQUAL
20250: AND
20251: PUSH
20252: LD_EXP 23
20256: PPUSH
20257: CALL_OW 310
20261: PUSH
20262: LD_INT 85
20264: EQUAL
20265: AND
20266: IFFALSE 20297
20268: GO 20270
20270: DISABLE
// begin enable ;
20271: ENABLE
// if Query ( QChangeClass ) = 1 then
20272: LD_STRING QChangeClass
20274: PPUSH
20275: CALL_OW 97
20279: PUSH
20280: LD_INT 1
20282: EQUAL
20283: IFFALSE 20297
// SetClass ( Omar , class_desert_warior ) ;
20285: LD_EXP 23
20289: PPUSH
20290: LD_INT 11
20292: PPUSH
20293: CALL_OW 336
// end ; end_of_file
20297: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20298: LD_INT 0
20300: PPUSH
20301: PPUSH
// if exist_mode then
20302: LD_VAR 0 2
20306: IFFALSE 20331
// unit := CreateCharacter ( prefix & ident ) else
20308: LD_ADDR_VAR 0 5
20312: PUSH
20313: LD_VAR 0 3
20317: PUSH
20318: LD_VAR 0 1
20322: STR
20323: PPUSH
20324: CALL_OW 34
20328: ST_TO_ADDR
20329: GO 20346
// unit := NewCharacter ( ident ) ;
20331: LD_ADDR_VAR 0 5
20335: PUSH
20336: LD_VAR 0 1
20340: PPUSH
20341: CALL_OW 25
20345: ST_TO_ADDR
// result := unit ;
20346: LD_ADDR_VAR 0 4
20350: PUSH
20351: LD_VAR 0 5
20355: ST_TO_ADDR
// end ;
20356: LD_VAR 0 4
20360: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20361: LD_INT 0
20363: PPUSH
20364: PPUSH
// if not side or not nation then
20365: LD_VAR 0 1
20369: NOT
20370: PUSH
20371: LD_VAR 0 2
20375: NOT
20376: OR
20377: IFFALSE 20381
// exit ;
20379: GO 21149
// case nation of nation_american :
20381: LD_VAR 0 2
20385: PUSH
20386: LD_INT 1
20388: DOUBLE
20389: EQUAL
20390: IFTRUE 20394
20392: GO 20608
20394: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20395: LD_ADDR_VAR 0 4
20399: PUSH
20400: LD_INT 35
20402: PUSH
20403: LD_INT 45
20405: PUSH
20406: LD_INT 46
20408: PUSH
20409: LD_INT 47
20411: PUSH
20412: LD_INT 82
20414: PUSH
20415: LD_INT 83
20417: PUSH
20418: LD_INT 84
20420: PUSH
20421: LD_INT 85
20423: PUSH
20424: LD_INT 86
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: LD_INT 6
20435: PUSH
20436: LD_INT 15
20438: PUSH
20439: LD_INT 16
20441: PUSH
20442: LD_INT 7
20444: PUSH
20445: LD_INT 12
20447: PUSH
20448: LD_INT 13
20450: PUSH
20451: LD_INT 10
20453: PUSH
20454: LD_INT 14
20456: PUSH
20457: LD_INT 20
20459: PUSH
20460: LD_INT 21
20462: PUSH
20463: LD_INT 22
20465: PUSH
20466: LD_INT 25
20468: PUSH
20469: LD_INT 32
20471: PUSH
20472: LD_INT 27
20474: PUSH
20475: LD_INT 36
20477: PUSH
20478: LD_INT 69
20480: PUSH
20481: LD_INT 39
20483: PUSH
20484: LD_INT 34
20486: PUSH
20487: LD_INT 40
20489: PUSH
20490: LD_INT 48
20492: PUSH
20493: LD_INT 49
20495: PUSH
20496: LD_INT 50
20498: PUSH
20499: LD_INT 51
20501: PUSH
20502: LD_INT 52
20504: PUSH
20505: LD_INT 53
20507: PUSH
20508: LD_INT 54
20510: PUSH
20511: LD_INT 55
20513: PUSH
20514: LD_INT 56
20516: PUSH
20517: LD_INT 57
20519: PUSH
20520: LD_INT 58
20522: PUSH
20523: LD_INT 59
20525: PUSH
20526: LD_INT 60
20528: PUSH
20529: LD_INT 61
20531: PUSH
20532: LD_INT 62
20534: PUSH
20535: LD_INT 80
20537: PUSH
20538: LD_INT 82
20540: PUSH
20541: LD_INT 83
20543: PUSH
20544: LD_INT 84
20546: PUSH
20547: LD_INT 85
20549: PUSH
20550: LD_INT 86
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: ST_TO_ADDR
20606: GO 21073
20608: LD_INT 2
20610: DOUBLE
20611: EQUAL
20612: IFTRUE 20616
20614: GO 20842
20616: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20617: LD_ADDR_VAR 0 4
20621: PUSH
20622: LD_INT 35
20624: PUSH
20625: LD_INT 45
20627: PUSH
20628: LD_INT 46
20630: PUSH
20631: LD_INT 47
20633: PUSH
20634: LD_INT 82
20636: PUSH
20637: LD_INT 83
20639: PUSH
20640: LD_INT 84
20642: PUSH
20643: LD_INT 85
20645: PUSH
20646: LD_INT 87
20648: PUSH
20649: LD_INT 70
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 11
20657: PUSH
20658: LD_INT 3
20660: PUSH
20661: LD_INT 4
20663: PUSH
20664: LD_INT 5
20666: PUSH
20667: LD_INT 6
20669: PUSH
20670: LD_INT 15
20672: PUSH
20673: LD_INT 18
20675: PUSH
20676: LD_INT 7
20678: PUSH
20679: LD_INT 17
20681: PUSH
20682: LD_INT 8
20684: PUSH
20685: LD_INT 20
20687: PUSH
20688: LD_INT 21
20690: PUSH
20691: LD_INT 22
20693: PUSH
20694: LD_INT 72
20696: PUSH
20697: LD_INT 26
20699: PUSH
20700: LD_INT 69
20702: PUSH
20703: LD_INT 39
20705: PUSH
20706: LD_INT 40
20708: PUSH
20709: LD_INT 41
20711: PUSH
20712: LD_INT 42
20714: PUSH
20715: LD_INT 43
20717: PUSH
20718: LD_INT 48
20720: PUSH
20721: LD_INT 49
20723: PUSH
20724: LD_INT 50
20726: PUSH
20727: LD_INT 51
20729: PUSH
20730: LD_INT 52
20732: PUSH
20733: LD_INT 53
20735: PUSH
20736: LD_INT 54
20738: PUSH
20739: LD_INT 55
20741: PUSH
20742: LD_INT 56
20744: PUSH
20745: LD_INT 60
20747: PUSH
20748: LD_INT 61
20750: PUSH
20751: LD_INT 62
20753: PUSH
20754: LD_INT 66
20756: PUSH
20757: LD_INT 67
20759: PUSH
20760: LD_INT 68
20762: PUSH
20763: LD_INT 81
20765: PUSH
20766: LD_INT 82
20768: PUSH
20769: LD_INT 83
20771: PUSH
20772: LD_INT 84
20774: PUSH
20775: LD_INT 85
20777: PUSH
20778: LD_INT 87
20780: PUSH
20781: LD_INT 88
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: ST_TO_ADDR
20840: GO 21073
20842: LD_INT 3
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 21072
20850: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20851: LD_ADDR_VAR 0 4
20855: PUSH
20856: LD_INT 46
20858: PUSH
20859: LD_INT 47
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: LD_INT 82
20870: PUSH
20871: LD_INT 83
20873: PUSH
20874: LD_INT 84
20876: PUSH
20877: LD_INT 85
20879: PUSH
20880: LD_INT 86
20882: PUSH
20883: LD_INT 11
20885: PUSH
20886: LD_INT 9
20888: PUSH
20889: LD_INT 20
20891: PUSH
20892: LD_INT 19
20894: PUSH
20895: LD_INT 21
20897: PUSH
20898: LD_INT 24
20900: PUSH
20901: LD_INT 22
20903: PUSH
20904: LD_INT 25
20906: PUSH
20907: LD_INT 28
20909: PUSH
20910: LD_INT 29
20912: PUSH
20913: LD_INT 30
20915: PUSH
20916: LD_INT 31
20918: PUSH
20919: LD_INT 37
20921: PUSH
20922: LD_INT 38
20924: PUSH
20925: LD_INT 32
20927: PUSH
20928: LD_INT 27
20930: PUSH
20931: LD_INT 33
20933: PUSH
20934: LD_INT 69
20936: PUSH
20937: LD_INT 39
20939: PUSH
20940: LD_INT 34
20942: PUSH
20943: LD_INT 40
20945: PUSH
20946: LD_INT 71
20948: PUSH
20949: LD_INT 23
20951: PUSH
20952: LD_INT 44
20954: PUSH
20955: LD_INT 48
20957: PUSH
20958: LD_INT 49
20960: PUSH
20961: LD_INT 50
20963: PUSH
20964: LD_INT 51
20966: PUSH
20967: LD_INT 52
20969: PUSH
20970: LD_INT 53
20972: PUSH
20973: LD_INT 54
20975: PUSH
20976: LD_INT 55
20978: PUSH
20979: LD_INT 56
20981: PUSH
20982: LD_INT 57
20984: PUSH
20985: LD_INT 58
20987: PUSH
20988: LD_INT 59
20990: PUSH
20991: LD_INT 63
20993: PUSH
20994: LD_INT 64
20996: PUSH
20997: LD_INT 65
20999: PUSH
21000: LD_INT 82
21002: PUSH
21003: LD_INT 83
21005: PUSH
21006: LD_INT 84
21008: PUSH
21009: LD_INT 85
21011: PUSH
21012: LD_INT 86
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: ST_TO_ADDR
21070: GO 21073
21072: POP
// if state > - 1 and state < 3 then
21073: LD_VAR 0 3
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: GREATER
21082: PUSH
21083: LD_VAR 0 3
21087: PUSH
21088: LD_INT 3
21090: LESS
21091: AND
21092: IFFALSE 21149
// for i in result do
21094: LD_ADDR_VAR 0 5
21098: PUSH
21099: LD_VAR 0 4
21103: PUSH
21104: FOR_IN
21105: IFFALSE 21147
// if GetTech ( i , side ) <> state then
21107: LD_VAR 0 5
21111: PPUSH
21112: LD_VAR 0 1
21116: PPUSH
21117: CALL_OW 321
21121: PUSH
21122: LD_VAR 0 3
21126: NONEQUAL
21127: IFFALSE 21145
// result := result diff i ;
21129: LD_ADDR_VAR 0 4
21133: PUSH
21134: LD_VAR 0 4
21138: PUSH
21139: LD_VAR 0 5
21143: DIFF
21144: ST_TO_ADDR
21145: GO 21104
21147: POP
21148: POP
// end ;
21149: LD_VAR 0 4
21153: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21154: LD_INT 0
21156: PPUSH
21157: PPUSH
21158: PPUSH
// result := true ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_INT 1
21166: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21167: LD_ADDR_VAR 0 5
21171: PUSH
21172: LD_VAR 0 2
21176: PPUSH
21177: CALL_OW 480
21181: ST_TO_ADDR
// if not tmp then
21182: LD_VAR 0 5
21186: NOT
21187: IFFALSE 21191
// exit ;
21189: GO 21240
// for i in tmp do
21191: LD_ADDR_VAR 0 4
21195: PUSH
21196: LD_VAR 0 5
21200: PUSH
21201: FOR_IN
21202: IFFALSE 21238
// if GetTech ( i , side ) <> state_researched then
21204: LD_VAR 0 4
21208: PPUSH
21209: LD_VAR 0 1
21213: PPUSH
21214: CALL_OW 321
21218: PUSH
21219: LD_INT 2
21221: NONEQUAL
21222: IFFALSE 21236
// begin result := false ;
21224: LD_ADDR_VAR 0 3
21228: PUSH
21229: LD_INT 0
21231: ST_TO_ADDR
// exit ;
21232: POP
21233: POP
21234: GO 21240
// end ;
21236: GO 21201
21238: POP
21239: POP
// end ;
21240: LD_VAR 0 3
21244: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21245: LD_INT 0
21247: PPUSH
21248: PPUSH
21249: PPUSH
21250: PPUSH
21251: PPUSH
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
21256: PPUSH
21257: PPUSH
21258: PPUSH
21259: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21260: LD_VAR 0 1
21264: NOT
21265: PUSH
21266: LD_VAR 0 1
21270: PPUSH
21271: CALL_OW 257
21275: PUSH
21276: LD_INT 9
21278: NONEQUAL
21279: OR
21280: IFFALSE 21284
// exit ;
21282: GO 21857
// side := GetSide ( unit ) ;
21284: LD_ADDR_VAR 0 9
21288: PUSH
21289: LD_VAR 0 1
21293: PPUSH
21294: CALL_OW 255
21298: ST_TO_ADDR
// tech_space := tech_spacanom ;
21299: LD_ADDR_VAR 0 12
21303: PUSH
21304: LD_INT 29
21306: ST_TO_ADDR
// tech_time := tech_taurad ;
21307: LD_ADDR_VAR 0 13
21311: PUSH
21312: LD_INT 28
21314: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21315: LD_ADDR_VAR 0 11
21319: PUSH
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 310
21329: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21330: LD_VAR 0 11
21334: PPUSH
21335: CALL_OW 247
21339: PUSH
21340: LD_INT 2
21342: EQUAL
21343: IFFALSE 21347
// exit ;
21345: GO 21857
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21347: LD_ADDR_VAR 0 8
21351: PUSH
21352: LD_INT 81
21354: PUSH
21355: LD_VAR 0 9
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 3
21366: PUSH
21367: LD_INT 21
21369: PUSH
21370: LD_INT 3
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PPUSH
21385: CALL_OW 69
21389: ST_TO_ADDR
// if not tmp then
21390: LD_VAR 0 8
21394: NOT
21395: IFFALSE 21399
// exit ;
21397: GO 21857
// if in_unit then
21399: LD_VAR 0 11
21403: IFFALSE 21427
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21405: LD_ADDR_VAR 0 10
21409: PUSH
21410: LD_VAR 0 8
21414: PPUSH
21415: LD_VAR 0 11
21419: PPUSH
21420: CALL_OW 74
21424: ST_TO_ADDR
21425: GO 21447
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21427: LD_ADDR_VAR 0 10
21431: PUSH
21432: LD_VAR 0 8
21436: PPUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 74
21446: ST_TO_ADDR
// if not enemy then
21447: LD_VAR 0 10
21451: NOT
21452: IFFALSE 21456
// exit ;
21454: GO 21857
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21456: LD_VAR 0 11
21460: PUSH
21461: LD_VAR 0 11
21465: PPUSH
21466: LD_VAR 0 10
21470: PPUSH
21471: CALL_OW 296
21475: PUSH
21476: LD_INT 13
21478: GREATER
21479: AND
21480: PUSH
21481: LD_VAR 0 1
21485: PPUSH
21486: LD_VAR 0 10
21490: PPUSH
21491: CALL_OW 296
21495: PUSH
21496: LD_INT 12
21498: GREATER
21499: OR
21500: IFFALSE 21504
// exit ;
21502: GO 21857
// missile := [ 1 ] ;
21504: LD_ADDR_VAR 0 14
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: EMPTY
21513: LIST
21514: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21515: LD_VAR 0 9
21519: PPUSH
21520: LD_VAR 0 12
21524: PPUSH
21525: CALL_OW 325
21529: IFFALSE 21558
// missile := Replace ( missile , missile + 1 , 2 ) ;
21531: LD_ADDR_VAR 0 14
21535: PUSH
21536: LD_VAR 0 14
21540: PPUSH
21541: LD_VAR 0 14
21545: PUSH
21546: LD_INT 1
21548: PLUS
21549: PPUSH
21550: LD_INT 2
21552: PPUSH
21553: CALL_OW 1
21557: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21558: LD_VAR 0 9
21562: PPUSH
21563: LD_VAR 0 13
21567: PPUSH
21568: CALL_OW 325
21572: PUSH
21573: LD_VAR 0 10
21577: PPUSH
21578: CALL_OW 255
21582: PPUSH
21583: LD_VAR 0 13
21587: PPUSH
21588: CALL_OW 325
21592: NOT
21593: AND
21594: IFFALSE 21623
// missile := Replace ( missile , missile + 1 , 3 ) ;
21596: LD_ADDR_VAR 0 14
21600: PUSH
21601: LD_VAR 0 14
21605: PPUSH
21606: LD_VAR 0 14
21610: PUSH
21611: LD_INT 1
21613: PLUS
21614: PPUSH
21615: LD_INT 3
21617: PPUSH
21618: CALL_OW 1
21622: ST_TO_ADDR
// if missile < 2 then
21623: LD_VAR 0 14
21627: PUSH
21628: LD_INT 2
21630: LESS
21631: IFFALSE 21635
// exit ;
21633: GO 21857
// x := GetX ( enemy ) ;
21635: LD_ADDR_VAR 0 4
21639: PUSH
21640: LD_VAR 0 10
21644: PPUSH
21645: CALL_OW 250
21649: ST_TO_ADDR
// y := GetY ( enemy ) ;
21650: LD_ADDR_VAR 0 5
21654: PUSH
21655: LD_VAR 0 10
21659: PPUSH
21660: CALL_OW 251
21664: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21665: LD_ADDR_VAR 0 6
21669: PUSH
21670: LD_VAR 0 4
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PPUSH
21679: LD_INT 1
21681: PPUSH
21682: CALL_OW 12
21686: PLUS
21687: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21688: LD_ADDR_VAR 0 7
21692: PUSH
21693: LD_VAR 0 5
21697: PUSH
21698: LD_INT 1
21700: NEG
21701: PPUSH
21702: LD_INT 1
21704: PPUSH
21705: CALL_OW 12
21709: PLUS
21710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21711: LD_VAR 0 6
21715: PPUSH
21716: LD_VAR 0 7
21720: PPUSH
21721: CALL_OW 488
21725: NOT
21726: IFFALSE 21748
// begin _x := x ;
21728: LD_ADDR_VAR 0 6
21732: PUSH
21733: LD_VAR 0 4
21737: ST_TO_ADDR
// _y := y ;
21738: LD_ADDR_VAR 0 7
21742: PUSH
21743: LD_VAR 0 5
21747: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21748: LD_ADDR_VAR 0 3
21752: PUSH
21753: LD_INT 1
21755: PPUSH
21756: LD_VAR 0 14
21760: PPUSH
21761: CALL_OW 12
21765: ST_TO_ADDR
// case i of 1 :
21766: LD_VAR 0 3
21770: PUSH
21771: LD_INT 1
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21796
21779: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21780: LD_VAR 0 1
21784: PPUSH
21785: LD_VAR 0 10
21789: PPUSH
21790: CALL_OW 115
21794: GO 21857
21796: LD_INT 2
21798: DOUBLE
21799: EQUAL
21800: IFTRUE 21804
21802: GO 21826
21804: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21805: LD_VAR 0 1
21809: PPUSH
21810: LD_VAR 0 6
21814: PPUSH
21815: LD_VAR 0 7
21819: PPUSH
21820: CALL_OW 153
21824: GO 21857
21826: LD_INT 3
21828: DOUBLE
21829: EQUAL
21830: IFTRUE 21834
21832: GO 21856
21834: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21835: LD_VAR 0 1
21839: PPUSH
21840: LD_VAR 0 6
21844: PPUSH
21845: LD_VAR 0 7
21849: PPUSH
21850: CALL_OW 154
21854: GO 21857
21856: POP
// end ;
21857: LD_VAR 0 2
21861: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21862: LD_INT 0
21864: PPUSH
21865: PPUSH
21866: PPUSH
21867: PPUSH
21868: PPUSH
21869: PPUSH
// if not unit or not building then
21870: LD_VAR 0 1
21874: NOT
21875: PUSH
21876: LD_VAR 0 2
21880: NOT
21881: OR
21882: IFFALSE 21886
// exit ;
21884: GO 22044
// x := GetX ( building ) ;
21886: LD_ADDR_VAR 0 5
21890: PUSH
21891: LD_VAR 0 2
21895: PPUSH
21896: CALL_OW 250
21900: ST_TO_ADDR
// y := GetY ( building ) ;
21901: LD_ADDR_VAR 0 6
21905: PUSH
21906: LD_VAR 0 2
21910: PPUSH
21911: CALL_OW 251
21915: ST_TO_ADDR
// for i = 0 to 5 do
21916: LD_ADDR_VAR 0 4
21920: PUSH
21921: DOUBLE
21922: LD_INT 0
21924: DEC
21925: ST_TO_ADDR
21926: LD_INT 5
21928: PUSH
21929: FOR_TO
21930: IFFALSE 22042
// begin _x := ShiftX ( x , i , 3 ) ;
21932: LD_ADDR_VAR 0 7
21936: PUSH
21937: LD_VAR 0 5
21941: PPUSH
21942: LD_VAR 0 4
21946: PPUSH
21947: LD_INT 3
21949: PPUSH
21950: CALL_OW 272
21954: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21955: LD_ADDR_VAR 0 8
21959: PUSH
21960: LD_VAR 0 6
21964: PPUSH
21965: LD_VAR 0 4
21969: PPUSH
21970: LD_INT 3
21972: PPUSH
21973: CALL_OW 273
21977: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21978: LD_VAR 0 7
21982: PPUSH
21983: LD_VAR 0 8
21987: PPUSH
21988: CALL_OW 488
21992: NOT
21993: IFFALSE 21997
// continue ;
21995: GO 21929
// if HexInfo ( _x , _y ) = 0 then
21997: LD_VAR 0 7
22001: PPUSH
22002: LD_VAR 0 8
22006: PPUSH
22007: CALL_OW 428
22011: PUSH
22012: LD_INT 0
22014: EQUAL
22015: IFFALSE 22040
// begin ComMoveXY ( unit , _x , _y ) ;
22017: LD_VAR 0 1
22021: PPUSH
22022: LD_VAR 0 7
22026: PPUSH
22027: LD_VAR 0 8
22031: PPUSH
22032: CALL_OW 111
// exit ;
22036: POP
22037: POP
22038: GO 22044
// end ; end ;
22040: GO 21929
22042: POP
22043: POP
// end ;
22044: LD_VAR 0 3
22048: RET
// export function ScanBase ( side , base_area ) ; begin
22049: LD_INT 0
22051: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22052: LD_ADDR_VAR 0 3
22056: PUSH
22057: LD_VAR 0 2
22061: PPUSH
22062: LD_INT 81
22064: PUSH
22065: LD_VAR 0 1
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PPUSH
22074: CALL_OW 70
22078: ST_TO_ADDR
// end ;
22079: LD_VAR 0 3
22083: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22084: LD_INT 0
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
// result := false ;
22090: LD_ADDR_VAR 0 2
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// side := GetSide ( unit ) ;
22098: LD_ADDR_VAR 0 3
22102: PUSH
22103: LD_VAR 0 1
22107: PPUSH
22108: CALL_OW 255
22112: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22113: LD_ADDR_VAR 0 4
22117: PUSH
22118: LD_VAR 0 1
22122: PPUSH
22123: CALL_OW 248
22127: ST_TO_ADDR
// case nat of 1 :
22128: LD_VAR 0 4
22132: PUSH
22133: LD_INT 1
22135: DOUBLE
22136: EQUAL
22137: IFTRUE 22141
22139: GO 22152
22141: POP
// tech := tech_lassight ; 2 :
22142: LD_ADDR_VAR 0 5
22146: PUSH
22147: LD_INT 12
22149: ST_TO_ADDR
22150: GO 22191
22152: LD_INT 2
22154: DOUBLE
22155: EQUAL
22156: IFTRUE 22160
22158: GO 22171
22160: POP
// tech := tech_mortar ; 3 :
22161: LD_ADDR_VAR 0 5
22165: PUSH
22166: LD_INT 41
22168: ST_TO_ADDR
22169: GO 22191
22171: LD_INT 3
22173: DOUBLE
22174: EQUAL
22175: IFTRUE 22179
22177: GO 22190
22179: POP
// tech := tech_bazooka ; end ;
22180: LD_ADDR_VAR 0 5
22184: PUSH
22185: LD_INT 44
22187: ST_TO_ADDR
22188: GO 22191
22190: POP
// if Researched ( side , tech ) then
22191: LD_VAR 0 3
22195: PPUSH
22196: LD_VAR 0 5
22200: PPUSH
22201: CALL_OW 325
22205: IFFALSE 22232
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22207: LD_ADDR_VAR 0 2
22211: PUSH
22212: LD_INT 5
22214: PUSH
22215: LD_INT 8
22217: PUSH
22218: LD_INT 9
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: PUSH
22226: LD_VAR 0 4
22230: ARRAY
22231: ST_TO_ADDR
// end ;
22232: LD_VAR 0 2
22236: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22237: LD_INT 0
22239: PPUSH
22240: PPUSH
22241: PPUSH
// if not mines then
22242: LD_VAR 0 2
22246: NOT
22247: IFFALSE 22251
// exit ;
22249: GO 22395
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22251: LD_ADDR_VAR 0 5
22255: PUSH
22256: LD_INT 81
22258: PUSH
22259: LD_VAR 0 1
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: LD_INT 21
22273: PUSH
22274: LD_INT 3
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: ST_TO_ADDR
// for i in mines do
22294: LD_ADDR_VAR 0 4
22298: PUSH
22299: LD_VAR 0 2
22303: PUSH
22304: FOR_IN
22305: IFFALSE 22393
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22307: LD_VAR 0 4
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PPUSH
22316: LD_VAR 0 4
22320: PUSH
22321: LD_INT 2
22323: ARRAY
22324: PPUSH
22325: CALL_OW 458
22329: NOT
22330: IFFALSE 22334
// continue ;
22332: GO 22304
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22334: LD_VAR 0 4
22338: PUSH
22339: LD_INT 1
22341: ARRAY
22342: PPUSH
22343: LD_VAR 0 4
22347: PUSH
22348: LD_INT 2
22350: ARRAY
22351: PPUSH
22352: CALL_OW 428
22356: PUSH
22357: LD_VAR 0 5
22361: IN
22362: IFFALSE 22391
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22364: LD_VAR 0 4
22368: PUSH
22369: LD_INT 1
22371: ARRAY
22372: PPUSH
22373: LD_VAR 0 4
22377: PUSH
22378: LD_INT 2
22380: ARRAY
22381: PPUSH
22382: LD_VAR 0 1
22386: PPUSH
22387: CALL_OW 456
// end ;
22391: GO 22304
22393: POP
22394: POP
// end ;
22395: LD_VAR 0 3
22399: RET
// export function Count ( array ) ; begin
22400: LD_INT 0
22402: PPUSH
// result := array + 0 ;
22403: LD_ADDR_VAR 0 2
22407: PUSH
22408: LD_VAR 0 1
22412: PUSH
22413: LD_INT 0
22415: PLUS
22416: ST_TO_ADDR
// end ;
22417: LD_VAR 0 2
22421: RET
// export function IsEmpty ( building ) ; begin
22422: LD_INT 0
22424: PPUSH
// if not building then
22425: LD_VAR 0 1
22429: NOT
22430: IFFALSE 22434
// exit ;
22432: GO 22477
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22434: LD_ADDR_VAR 0 2
22438: PUSH
22439: LD_VAR 0 1
22443: PUSH
22444: LD_INT 22
22446: PUSH
22447: LD_VAR 0 1
22451: PPUSH
22452: CALL_OW 255
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 58
22463: PUSH
22464: EMPTY
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PPUSH
22471: CALL_OW 69
22475: IN
22476: ST_TO_ADDR
// end ;
22477: LD_VAR 0 2
22481: RET
// export function IsNotFull ( building ) ; var places ; begin
22482: LD_INT 0
22484: PPUSH
22485: PPUSH
// if not building then
22486: LD_VAR 0 1
22490: NOT
22491: IFFALSE 22495
// exit ;
22493: GO 22523
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22495: LD_ADDR_VAR 0 2
22499: PUSH
22500: LD_VAR 0 1
22504: PPUSH
22505: LD_INT 3
22507: PUSH
22508: LD_INT 62
22510: PUSH
22511: EMPTY
22512: LIST
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PPUSH
22518: CALL_OW 72
22522: ST_TO_ADDR
// end ;
22523: LD_VAR 0 2
22527: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22528: LD_INT 0
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
// tmp := [ ] ;
22534: LD_ADDR_VAR 0 3
22538: PUSH
22539: EMPTY
22540: ST_TO_ADDR
// list := [ ] ;
22541: LD_ADDR_VAR 0 5
22545: PUSH
22546: EMPTY
22547: ST_TO_ADDR
// for i = 16 to 25 do
22548: LD_ADDR_VAR 0 4
22552: PUSH
22553: DOUBLE
22554: LD_INT 16
22556: DEC
22557: ST_TO_ADDR
22558: LD_INT 25
22560: PUSH
22561: FOR_TO
22562: IFFALSE 22635
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22564: LD_ADDR_VAR 0 3
22568: PUSH
22569: LD_VAR 0 3
22573: PUSH
22574: LD_INT 22
22576: PUSH
22577: LD_VAR 0 1
22581: PPUSH
22582: CALL_OW 255
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 91
22593: PUSH
22594: LD_VAR 0 1
22598: PUSH
22599: LD_INT 6
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 30
22609: PUSH
22610: LD_VAR 0 4
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: PUSH
22624: EMPTY
22625: LIST
22626: PPUSH
22627: CALL_OW 69
22631: ADD
22632: ST_TO_ADDR
22633: GO 22561
22635: POP
22636: POP
// for i = 1 to tmp do
22637: LD_ADDR_VAR 0 4
22641: PUSH
22642: DOUBLE
22643: LD_INT 1
22645: DEC
22646: ST_TO_ADDR
22647: LD_VAR 0 3
22651: PUSH
22652: FOR_TO
22653: IFFALSE 22741
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22655: LD_ADDR_VAR 0 5
22659: PUSH
22660: LD_VAR 0 5
22664: PUSH
22665: LD_VAR 0 3
22669: PUSH
22670: LD_VAR 0 4
22674: ARRAY
22675: PPUSH
22676: CALL_OW 266
22680: PUSH
22681: LD_VAR 0 3
22685: PUSH
22686: LD_VAR 0 4
22690: ARRAY
22691: PPUSH
22692: CALL_OW 250
22696: PUSH
22697: LD_VAR 0 3
22701: PUSH
22702: LD_VAR 0 4
22706: ARRAY
22707: PPUSH
22708: CALL_OW 251
22712: PUSH
22713: LD_VAR 0 3
22717: PUSH
22718: LD_VAR 0 4
22722: ARRAY
22723: PPUSH
22724: CALL_OW 254
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: PUSH
22735: EMPTY
22736: LIST
22737: ADD
22738: ST_TO_ADDR
22739: GO 22652
22741: POP
22742: POP
// result := list ;
22743: LD_ADDR_VAR 0 2
22747: PUSH
22748: LD_VAR 0 5
22752: ST_TO_ADDR
// end ;
22753: LD_VAR 0 2
22757: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22758: LD_INT 0
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
22765: PPUSH
22766: PPUSH
// if not factory then
22767: LD_VAR 0 1
22771: NOT
22772: IFFALSE 22776
// exit ;
22774: GO 23369
// if control = control_apeman then
22776: LD_VAR 0 4
22780: PUSH
22781: LD_INT 5
22783: EQUAL
22784: IFFALSE 22893
// begin tmp := UnitsInside ( factory ) ;
22786: LD_ADDR_VAR 0 8
22790: PUSH
22791: LD_VAR 0 1
22795: PPUSH
22796: CALL_OW 313
22800: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22801: LD_VAR 0 8
22805: PPUSH
22806: LD_INT 25
22808: PUSH
22809: LD_INT 12
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PPUSH
22816: CALL_OW 72
22820: NOT
22821: IFFALSE 22831
// control := control_manual ;
22823: LD_ADDR_VAR 0 4
22827: PUSH
22828: LD_INT 1
22830: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22831: LD_ADDR_VAR 0 8
22835: PUSH
22836: LD_VAR 0 1
22840: PPUSH
22841: CALL 22528 0 1
22845: ST_TO_ADDR
// if tmp then
22846: LD_VAR 0 8
22850: IFFALSE 22893
// begin for i in tmp do
22852: LD_ADDR_VAR 0 7
22856: PUSH
22857: LD_VAR 0 8
22861: PUSH
22862: FOR_IN
22863: IFFALSE 22891
// if i [ 1 ] = b_ext_radio then
22865: LD_VAR 0 7
22869: PUSH
22870: LD_INT 1
22872: ARRAY
22873: PUSH
22874: LD_INT 22
22876: EQUAL
22877: IFFALSE 22889
// begin control := control_remote ;
22879: LD_ADDR_VAR 0 4
22883: PUSH
22884: LD_INT 2
22886: ST_TO_ADDR
// break ;
22887: GO 22891
// end ;
22889: GO 22862
22891: POP
22892: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22893: LD_VAR 0 1
22897: PPUSH
22898: LD_VAR 0 2
22902: PPUSH
22903: LD_VAR 0 3
22907: PPUSH
22908: LD_VAR 0 4
22912: PPUSH
22913: LD_VAR 0 5
22917: PPUSH
22918: CALL_OW 448
22922: IFFALSE 22957
// begin result := [ chassis , engine , control , weapon ] ;
22924: LD_ADDR_VAR 0 6
22928: PUSH
22929: LD_VAR 0 2
22933: PUSH
22934: LD_VAR 0 3
22938: PUSH
22939: LD_VAR 0 4
22943: PUSH
22944: LD_VAR 0 5
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: ST_TO_ADDR
// exit ;
22955: GO 23369
// end ; _chassis := AvailableChassisList ( factory ) ;
22957: LD_ADDR_VAR 0 9
22961: PUSH
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL_OW 475
22971: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22972: LD_ADDR_VAR 0 11
22976: PUSH
22977: LD_VAR 0 1
22981: PPUSH
22982: CALL_OW 476
22986: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22987: LD_ADDR_VAR 0 12
22991: PUSH
22992: LD_VAR 0 1
22996: PPUSH
22997: CALL_OW 477
23001: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23002: LD_ADDR_VAR 0 10
23006: PUSH
23007: LD_VAR 0 1
23011: PPUSH
23012: CALL_OW 478
23016: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23017: LD_VAR 0 9
23021: NOT
23022: PUSH
23023: LD_VAR 0 11
23027: NOT
23028: OR
23029: PUSH
23030: LD_VAR 0 12
23034: NOT
23035: OR
23036: PUSH
23037: LD_VAR 0 10
23041: NOT
23042: OR
23043: IFFALSE 23078
// begin result := [ chassis , engine , control , weapon ] ;
23045: LD_ADDR_VAR 0 6
23049: PUSH
23050: LD_VAR 0 2
23054: PUSH
23055: LD_VAR 0 3
23059: PUSH
23060: LD_VAR 0 4
23064: PUSH
23065: LD_VAR 0 5
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: ST_TO_ADDR
// exit ;
23076: GO 23369
// end ; if not chassis in _chassis then
23078: LD_VAR 0 2
23082: PUSH
23083: LD_VAR 0 9
23087: IN
23088: NOT
23089: IFFALSE 23115
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23091: LD_ADDR_VAR 0 2
23095: PUSH
23096: LD_VAR 0 9
23100: PUSH
23101: LD_INT 1
23103: PPUSH
23104: LD_VAR 0 9
23108: PPUSH
23109: CALL_OW 12
23113: ARRAY
23114: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23115: LD_VAR 0 2
23119: PPUSH
23120: LD_VAR 0 3
23124: PPUSH
23125: CALL 23374 0 2
23129: NOT
23130: IFFALSE 23189
// repeat engine := _engine [ 1 ] ;
23132: LD_ADDR_VAR 0 3
23136: PUSH
23137: LD_VAR 0 11
23141: PUSH
23142: LD_INT 1
23144: ARRAY
23145: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23146: LD_ADDR_VAR 0 11
23150: PUSH
23151: LD_VAR 0 11
23155: PPUSH
23156: LD_INT 1
23158: PPUSH
23159: CALL_OW 3
23163: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23164: LD_VAR 0 2
23168: PPUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: CALL 23374 0 2
23178: PUSH
23179: LD_VAR 0 11
23183: PUSH
23184: EMPTY
23185: EQUAL
23186: OR
23187: IFFALSE 23132
// if not control in _control then
23189: LD_VAR 0 4
23193: PUSH
23194: LD_VAR 0 12
23198: IN
23199: NOT
23200: IFFALSE 23226
// control := _control [ rand ( 1 , _control ) ] ;
23202: LD_ADDR_VAR 0 4
23206: PUSH
23207: LD_VAR 0 12
23211: PUSH
23212: LD_INT 1
23214: PPUSH
23215: LD_VAR 0 12
23219: PPUSH
23220: CALL_OW 12
23224: ARRAY
23225: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23226: LD_VAR 0 2
23230: PPUSH
23231: LD_VAR 0 5
23235: PPUSH
23236: CALL 23594 0 2
23240: NOT
23241: IFFALSE 23300
// repeat weapon := _weapon [ 1 ] ;
23243: LD_ADDR_VAR 0 5
23247: PUSH
23248: LD_VAR 0 10
23252: PUSH
23253: LD_INT 1
23255: ARRAY
23256: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23257: LD_ADDR_VAR 0 10
23261: PUSH
23262: LD_VAR 0 10
23266: PPUSH
23267: LD_INT 1
23269: PPUSH
23270: CALL_OW 3
23274: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23275: LD_VAR 0 2
23279: PPUSH
23280: LD_VAR 0 5
23284: PPUSH
23285: CALL 23594 0 2
23289: PUSH
23290: LD_VAR 0 10
23294: PUSH
23295: EMPTY
23296: EQUAL
23297: OR
23298: IFFALSE 23243
// result := [ ] ;
23300: LD_ADDR_VAR 0 6
23304: PUSH
23305: EMPTY
23306: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23307: LD_VAR 0 1
23311: PPUSH
23312: LD_VAR 0 2
23316: PPUSH
23317: LD_VAR 0 3
23321: PPUSH
23322: LD_VAR 0 4
23326: PPUSH
23327: LD_VAR 0 5
23331: PPUSH
23332: CALL_OW 448
23336: IFFALSE 23369
// result := [ chassis , engine , control , weapon ] ;
23338: LD_ADDR_VAR 0 6
23342: PUSH
23343: LD_VAR 0 2
23347: PUSH
23348: LD_VAR 0 3
23352: PUSH
23353: LD_VAR 0 4
23357: PUSH
23358: LD_VAR 0 5
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: ST_TO_ADDR
// end ;
23369: LD_VAR 0 6
23373: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23374: LD_INT 0
23376: PPUSH
// if not chassis or not engine then
23377: LD_VAR 0 1
23381: NOT
23382: PUSH
23383: LD_VAR 0 2
23387: NOT
23388: OR
23389: IFFALSE 23393
// exit ;
23391: GO 23589
// case engine of engine_solar :
23393: LD_VAR 0 2
23397: PUSH
23398: LD_INT 2
23400: DOUBLE
23401: EQUAL
23402: IFTRUE 23406
23404: GO 23444
23406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23407: LD_ADDR_VAR 0 3
23411: PUSH
23412: LD_INT 11
23414: PUSH
23415: LD_INT 12
23417: PUSH
23418: LD_INT 13
23420: PUSH
23421: LD_INT 14
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: LD_INT 2
23429: PUSH
23430: LD_INT 3
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: ST_TO_ADDR
23442: GO 23573
23444: LD_INT 1
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23452
23450: GO 23514
23452: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23453: LD_ADDR_VAR 0 3
23457: PUSH
23458: LD_INT 11
23460: PUSH
23461: LD_INT 12
23463: PUSH
23464: LD_INT 13
23466: PUSH
23467: LD_INT 14
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 4
23481: PUSH
23482: LD_INT 5
23484: PUSH
23485: LD_INT 21
23487: PUSH
23488: LD_INT 23
23490: PUSH
23491: LD_INT 22
23493: PUSH
23494: LD_INT 24
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: ST_TO_ADDR
23512: GO 23573
23514: LD_INT 3
23516: DOUBLE
23517: EQUAL
23518: IFTRUE 23522
23520: GO 23572
23522: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23523: LD_ADDR_VAR 0 3
23527: PUSH
23528: LD_INT 13
23530: PUSH
23531: LD_INT 14
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: LD_INT 3
23539: PUSH
23540: LD_INT 4
23542: PUSH
23543: LD_INT 5
23545: PUSH
23546: LD_INT 21
23548: PUSH
23549: LD_INT 22
23551: PUSH
23552: LD_INT 23
23554: PUSH
23555: LD_INT 24
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: ST_TO_ADDR
23570: GO 23573
23572: POP
// result := ( chassis in result ) ;
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_VAR 0 1
23582: PUSH
23583: LD_VAR 0 3
23587: IN
23588: ST_TO_ADDR
// end ;
23589: LD_VAR 0 3
23593: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23594: LD_INT 0
23596: PPUSH
// if not chassis or not weapon then
23597: LD_VAR 0 1
23601: NOT
23602: PUSH
23603: LD_VAR 0 2
23607: NOT
23608: OR
23609: IFFALSE 23613
// exit ;
23611: GO 24673
// case weapon of us_machine_gun :
23613: LD_VAR 0 2
23617: PUSH
23618: LD_INT 2
23620: DOUBLE
23621: EQUAL
23622: IFTRUE 23626
23624: GO 23656
23626: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23627: LD_ADDR_VAR 0 3
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 2
23637: PUSH
23638: LD_INT 3
23640: PUSH
23641: LD_INT 4
23643: PUSH
23644: LD_INT 5
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: ST_TO_ADDR
23654: GO 24657
23656: LD_INT 3
23658: DOUBLE
23659: EQUAL
23660: IFTRUE 23664
23662: GO 23694
23664: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23665: LD_ADDR_VAR 0 3
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 3
23678: PUSH
23679: LD_INT 4
23681: PUSH
23682: LD_INT 5
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: ST_TO_ADDR
23692: GO 24657
23694: LD_INT 11
23696: DOUBLE
23697: EQUAL
23698: IFTRUE 23702
23700: GO 23732
23702: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23703: LD_ADDR_VAR 0 3
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: LD_INT 4
23719: PUSH
23720: LD_INT 5
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: ST_TO_ADDR
23730: GO 24657
23732: LD_INT 4
23734: DOUBLE
23735: EQUAL
23736: IFTRUE 23740
23738: GO 23766
23740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23741: LD_ADDR_VAR 0 3
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: LD_INT 3
23751: PUSH
23752: LD_INT 4
23754: PUSH
23755: LD_INT 5
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: ST_TO_ADDR
23764: GO 24657
23766: LD_INT 5
23768: DOUBLE
23769: EQUAL
23770: IFTRUE 23774
23772: GO 23800
23774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23775: LD_ADDR_VAR 0 3
23779: PUSH
23780: LD_INT 2
23782: PUSH
23783: LD_INT 3
23785: PUSH
23786: LD_INT 4
23788: PUSH
23789: LD_INT 5
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: ST_TO_ADDR
23798: GO 24657
23800: LD_INT 9
23802: DOUBLE
23803: EQUAL
23804: IFTRUE 23808
23806: GO 23834
23808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 2
23816: PUSH
23817: LD_INT 3
23819: PUSH
23820: LD_INT 4
23822: PUSH
23823: LD_INT 5
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: ST_TO_ADDR
23832: GO 24657
23834: LD_INT 7
23836: DOUBLE
23837: EQUAL
23838: IFTRUE 23842
23840: GO 23868
23842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: LD_INT 3
23853: PUSH
23854: LD_INT 4
23856: PUSH
23857: LD_INT 5
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: ST_TO_ADDR
23866: GO 24657
23868: LD_INT 12
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 23902
23876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23877: LD_ADDR_VAR 0 3
23881: PUSH
23882: LD_INT 2
23884: PUSH
23885: LD_INT 3
23887: PUSH
23888: LD_INT 4
23890: PUSH
23891: LD_INT 5
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: ST_TO_ADDR
23900: GO 24657
23902: LD_INT 13
23904: DOUBLE
23905: EQUAL
23906: IFTRUE 23910
23908: GO 23936
23910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23911: LD_ADDR_VAR 0 3
23915: PUSH
23916: LD_INT 2
23918: PUSH
23919: LD_INT 3
23921: PUSH
23922: LD_INT 4
23924: PUSH
23925: LD_INT 5
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: ST_TO_ADDR
23934: GO 24657
23936: LD_INT 14
23938: DOUBLE
23939: EQUAL
23940: IFTRUE 23944
23942: GO 23962
23944: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23945: LD_ADDR_VAR 0 3
23949: PUSH
23950: LD_INT 4
23952: PUSH
23953: LD_INT 5
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: ST_TO_ADDR
23960: GO 24657
23962: LD_INT 6
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23970
23968: GO 23988
23970: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23971: LD_ADDR_VAR 0 3
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: LD_INT 5
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: ST_TO_ADDR
23986: GO 24657
23988: LD_INT 10
23990: DOUBLE
23991: EQUAL
23992: IFTRUE 23996
23994: GO 24014
23996: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23997: LD_ADDR_VAR 0 3
24001: PUSH
24002: LD_INT 4
24004: PUSH
24005: LD_INT 5
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: ST_TO_ADDR
24012: GO 24657
24014: LD_INT 22
24016: DOUBLE
24017: EQUAL
24018: IFTRUE 24022
24020: GO 24048
24022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24023: LD_ADDR_VAR 0 3
24027: PUSH
24028: LD_INT 11
24030: PUSH
24031: LD_INT 12
24033: PUSH
24034: LD_INT 13
24036: PUSH
24037: LD_INT 14
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: ST_TO_ADDR
24046: GO 24657
24048: LD_INT 23
24050: DOUBLE
24051: EQUAL
24052: IFTRUE 24056
24054: GO 24082
24056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24057: LD_ADDR_VAR 0 3
24061: PUSH
24062: LD_INT 11
24064: PUSH
24065: LD_INT 12
24067: PUSH
24068: LD_INT 13
24070: PUSH
24071: LD_INT 14
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: ST_TO_ADDR
24080: GO 24657
24082: LD_INT 24
24084: DOUBLE
24085: EQUAL
24086: IFTRUE 24090
24088: GO 24116
24090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24091: LD_ADDR_VAR 0 3
24095: PUSH
24096: LD_INT 11
24098: PUSH
24099: LD_INT 12
24101: PUSH
24102: LD_INT 13
24104: PUSH
24105: LD_INT 14
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: ST_TO_ADDR
24114: GO 24657
24116: LD_INT 30
24118: DOUBLE
24119: EQUAL
24120: IFTRUE 24124
24122: GO 24150
24124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24125: LD_ADDR_VAR 0 3
24129: PUSH
24130: LD_INT 11
24132: PUSH
24133: LD_INT 12
24135: PUSH
24136: LD_INT 13
24138: PUSH
24139: LD_INT 14
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: ST_TO_ADDR
24148: GO 24657
24150: LD_INT 25
24152: DOUBLE
24153: EQUAL
24154: IFTRUE 24158
24156: GO 24176
24158: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24159: LD_ADDR_VAR 0 3
24163: PUSH
24164: LD_INT 13
24166: PUSH
24167: LD_INT 14
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: ST_TO_ADDR
24174: GO 24657
24176: LD_INT 27
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24202
24184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_INT 13
24192: PUSH
24193: LD_INT 14
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: ST_TO_ADDR
24200: GO 24657
24202: LD_INT 92
24204: DOUBLE
24205: EQUAL
24206: IFTRUE 24210
24208: GO 24236
24210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24211: LD_ADDR_VAR 0 3
24215: PUSH
24216: LD_INT 11
24218: PUSH
24219: LD_INT 12
24221: PUSH
24222: LD_INT 13
24224: PUSH
24225: LD_INT 14
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: ST_TO_ADDR
24234: GO 24657
24236: LD_INT 28
24238: DOUBLE
24239: EQUAL
24240: IFTRUE 24244
24242: GO 24262
24244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24245: LD_ADDR_VAR 0 3
24249: PUSH
24250: LD_INT 13
24252: PUSH
24253: LD_INT 14
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: ST_TO_ADDR
24260: GO 24657
24262: LD_INT 29
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24288
24270: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: LD_INT 13
24278: PUSH
24279: LD_INT 14
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: ST_TO_ADDR
24286: GO 24657
24288: LD_INT 31
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24314
24296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24297: LD_ADDR_VAR 0 3
24301: PUSH
24302: LD_INT 13
24304: PUSH
24305: LD_INT 14
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: ST_TO_ADDR
24312: GO 24657
24314: LD_INT 26
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24340
24322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24323: LD_ADDR_VAR 0 3
24327: PUSH
24328: LD_INT 13
24330: PUSH
24331: LD_INT 14
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: ST_TO_ADDR
24338: GO 24657
24340: LD_INT 42
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24374
24348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24349: LD_ADDR_VAR 0 3
24353: PUSH
24354: LD_INT 21
24356: PUSH
24357: LD_INT 22
24359: PUSH
24360: LD_INT 23
24362: PUSH
24363: LD_INT 24
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: ST_TO_ADDR
24372: GO 24657
24374: LD_INT 43
24376: DOUBLE
24377: EQUAL
24378: IFTRUE 24382
24380: GO 24408
24382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24383: LD_ADDR_VAR 0 3
24387: PUSH
24388: LD_INT 21
24390: PUSH
24391: LD_INT 22
24393: PUSH
24394: LD_INT 23
24396: PUSH
24397: LD_INT 24
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: ST_TO_ADDR
24406: GO 24657
24408: LD_INT 44
24410: DOUBLE
24411: EQUAL
24412: IFTRUE 24416
24414: GO 24442
24416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24417: LD_ADDR_VAR 0 3
24421: PUSH
24422: LD_INT 21
24424: PUSH
24425: LD_INT 22
24427: PUSH
24428: LD_INT 23
24430: PUSH
24431: LD_INT 24
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: ST_TO_ADDR
24440: GO 24657
24442: LD_INT 45
24444: DOUBLE
24445: EQUAL
24446: IFTRUE 24450
24448: GO 24476
24450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24451: LD_ADDR_VAR 0 3
24455: PUSH
24456: LD_INT 21
24458: PUSH
24459: LD_INT 22
24461: PUSH
24462: LD_INT 23
24464: PUSH
24465: LD_INT 24
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: ST_TO_ADDR
24474: GO 24657
24476: LD_INT 49
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24510
24484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: LD_INT 21
24492: PUSH
24493: LD_INT 22
24495: PUSH
24496: LD_INT 23
24498: PUSH
24499: LD_INT 24
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: ST_TO_ADDR
24508: GO 24657
24510: LD_INT 51
24512: DOUBLE
24513: EQUAL
24514: IFTRUE 24518
24516: GO 24544
24518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24519: LD_ADDR_VAR 0 3
24523: PUSH
24524: LD_INT 21
24526: PUSH
24527: LD_INT 22
24529: PUSH
24530: LD_INT 23
24532: PUSH
24533: LD_INT 24
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: ST_TO_ADDR
24542: GO 24657
24544: LD_INT 52
24546: DOUBLE
24547: EQUAL
24548: IFTRUE 24552
24550: GO 24578
24552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24553: LD_ADDR_VAR 0 3
24557: PUSH
24558: LD_INT 21
24560: PUSH
24561: LD_INT 22
24563: PUSH
24564: LD_INT 23
24566: PUSH
24567: LD_INT 24
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: ST_TO_ADDR
24576: GO 24657
24578: LD_INT 53
24580: DOUBLE
24581: EQUAL
24582: IFTRUE 24586
24584: GO 24604
24586: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24587: LD_ADDR_VAR 0 3
24591: PUSH
24592: LD_INT 23
24594: PUSH
24595: LD_INT 24
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: ST_TO_ADDR
24602: GO 24657
24604: LD_INT 46
24606: DOUBLE
24607: EQUAL
24608: IFTRUE 24612
24610: GO 24630
24612: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24613: LD_ADDR_VAR 0 3
24617: PUSH
24618: LD_INT 23
24620: PUSH
24621: LD_INT 24
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: ST_TO_ADDR
24628: GO 24657
24630: LD_INT 47
24632: DOUBLE
24633: EQUAL
24634: IFTRUE 24638
24636: GO 24656
24638: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24639: LD_ADDR_VAR 0 3
24643: PUSH
24644: LD_INT 23
24646: PUSH
24647: LD_INT 24
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: ST_TO_ADDR
24654: GO 24657
24656: POP
// result := ( chassis in result ) ;
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: LD_VAR 0 1
24666: PUSH
24667: LD_VAR 0 3
24671: IN
24672: ST_TO_ADDR
// end ;
24673: LD_VAR 0 3
24677: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24678: LD_INT 0
24680: PPUSH
24681: PPUSH
24682: PPUSH
24683: PPUSH
24684: PPUSH
24685: PPUSH
24686: PPUSH
// result := array ;
24687: LD_ADDR_VAR 0 5
24691: PUSH
24692: LD_VAR 0 1
24696: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24697: LD_VAR 0 1
24701: NOT
24702: PUSH
24703: LD_VAR 0 2
24707: NOT
24708: OR
24709: PUSH
24710: LD_VAR 0 3
24714: NOT
24715: OR
24716: PUSH
24717: LD_VAR 0 2
24721: PUSH
24722: LD_VAR 0 1
24726: GREATER
24727: OR
24728: PUSH
24729: LD_VAR 0 3
24733: PUSH
24734: LD_VAR 0 1
24738: GREATER
24739: OR
24740: IFFALSE 24744
// exit ;
24742: GO 25040
// if direction then
24744: LD_VAR 0 4
24748: IFFALSE 24812
// begin d := 1 ;
24750: LD_ADDR_VAR 0 9
24754: PUSH
24755: LD_INT 1
24757: ST_TO_ADDR
// if i_from > i_to then
24758: LD_VAR 0 2
24762: PUSH
24763: LD_VAR 0 3
24767: GREATER
24768: IFFALSE 24794
// length := ( array - i_from ) + i_to else
24770: LD_ADDR_VAR 0 11
24774: PUSH
24775: LD_VAR 0 1
24779: PUSH
24780: LD_VAR 0 2
24784: MINUS
24785: PUSH
24786: LD_VAR 0 3
24790: PLUS
24791: ST_TO_ADDR
24792: GO 24810
// length := i_to - i_from ;
24794: LD_ADDR_VAR 0 11
24798: PUSH
24799: LD_VAR 0 3
24803: PUSH
24804: LD_VAR 0 2
24808: MINUS
24809: ST_TO_ADDR
// end else
24810: GO 24873
// begin d := - 1 ;
24812: LD_ADDR_VAR 0 9
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: ST_TO_ADDR
// if i_from > i_to then
24821: LD_VAR 0 2
24825: PUSH
24826: LD_VAR 0 3
24830: GREATER
24831: IFFALSE 24851
// length := i_from - i_to else
24833: LD_ADDR_VAR 0 11
24837: PUSH
24838: LD_VAR 0 2
24842: PUSH
24843: LD_VAR 0 3
24847: MINUS
24848: ST_TO_ADDR
24849: GO 24873
// length := ( array - i_to ) + i_from ;
24851: LD_ADDR_VAR 0 11
24855: PUSH
24856: LD_VAR 0 1
24860: PUSH
24861: LD_VAR 0 3
24865: MINUS
24866: PUSH
24867: LD_VAR 0 2
24871: PLUS
24872: ST_TO_ADDR
// end ; if not length then
24873: LD_VAR 0 11
24877: NOT
24878: IFFALSE 24882
// exit ;
24880: GO 25040
// tmp := array ;
24882: LD_ADDR_VAR 0 10
24886: PUSH
24887: LD_VAR 0 1
24891: ST_TO_ADDR
// for i = 1 to length do
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: DOUBLE
24898: LD_INT 1
24900: DEC
24901: ST_TO_ADDR
24902: LD_VAR 0 11
24906: PUSH
24907: FOR_TO
24908: IFFALSE 25028
// begin for j = 1 to array do
24910: LD_ADDR_VAR 0 7
24914: PUSH
24915: DOUBLE
24916: LD_INT 1
24918: DEC
24919: ST_TO_ADDR
24920: LD_VAR 0 1
24924: PUSH
24925: FOR_TO
24926: IFFALSE 25014
// begin k := j + d ;
24928: LD_ADDR_VAR 0 8
24932: PUSH
24933: LD_VAR 0 7
24937: PUSH
24938: LD_VAR 0 9
24942: PLUS
24943: ST_TO_ADDR
// if k > array then
24944: LD_VAR 0 8
24948: PUSH
24949: LD_VAR 0 1
24953: GREATER
24954: IFFALSE 24964
// k := 1 ;
24956: LD_ADDR_VAR 0 8
24960: PUSH
24961: LD_INT 1
24963: ST_TO_ADDR
// if not k then
24964: LD_VAR 0 8
24968: NOT
24969: IFFALSE 24981
// k := array ;
24971: LD_ADDR_VAR 0 8
24975: PUSH
24976: LD_VAR 0 1
24980: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24981: LD_ADDR_VAR 0 10
24985: PUSH
24986: LD_VAR 0 10
24990: PPUSH
24991: LD_VAR 0 8
24995: PPUSH
24996: LD_VAR 0 1
25000: PUSH
25001: LD_VAR 0 7
25005: ARRAY
25006: PPUSH
25007: CALL_OW 1
25011: ST_TO_ADDR
// end ;
25012: GO 24925
25014: POP
25015: POP
// array := tmp ;
25016: LD_ADDR_VAR 0 1
25020: PUSH
25021: LD_VAR 0 10
25025: ST_TO_ADDR
// end ;
25026: GO 24907
25028: POP
25029: POP
// result := array ;
25030: LD_ADDR_VAR 0 5
25034: PUSH
25035: LD_VAR 0 1
25039: ST_TO_ADDR
// end ;
25040: LD_VAR 0 5
25044: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25045: LD_INT 0
25047: PPUSH
25048: PPUSH
// result := 0 ;
25049: LD_ADDR_VAR 0 3
25053: PUSH
25054: LD_INT 0
25056: ST_TO_ADDR
// if not array or not value in array then
25057: LD_VAR 0 1
25061: NOT
25062: PUSH
25063: LD_VAR 0 2
25067: PUSH
25068: LD_VAR 0 1
25072: IN
25073: NOT
25074: OR
25075: IFFALSE 25079
// exit ;
25077: GO 25133
// for i = 1 to array do
25079: LD_ADDR_VAR 0 4
25083: PUSH
25084: DOUBLE
25085: LD_INT 1
25087: DEC
25088: ST_TO_ADDR
25089: LD_VAR 0 1
25093: PUSH
25094: FOR_TO
25095: IFFALSE 25131
// if value = array [ i ] then
25097: LD_VAR 0 2
25101: PUSH
25102: LD_VAR 0 1
25106: PUSH
25107: LD_VAR 0 4
25111: ARRAY
25112: EQUAL
25113: IFFALSE 25129
// begin result := i ;
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_VAR 0 4
25124: ST_TO_ADDR
// exit ;
25125: POP
25126: POP
25127: GO 25133
// end ;
25129: GO 25094
25131: POP
25132: POP
// end ;
25133: LD_VAR 0 3
25137: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25138: LD_INT 0
25140: PPUSH
// vc_chassis := chassis ;
25141: LD_ADDR_OWVAR 37
25145: PUSH
25146: LD_VAR 0 1
25150: ST_TO_ADDR
// vc_engine := engine ;
25151: LD_ADDR_OWVAR 39
25155: PUSH
25156: LD_VAR 0 2
25160: ST_TO_ADDR
// vc_control := control ;
25161: LD_ADDR_OWVAR 38
25165: PUSH
25166: LD_VAR 0 3
25170: ST_TO_ADDR
// vc_weapon := weapon ;
25171: LD_ADDR_OWVAR 40
25175: PUSH
25176: LD_VAR 0 4
25180: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25181: LD_ADDR_OWVAR 41
25185: PUSH
25186: LD_VAR 0 5
25190: ST_TO_ADDR
// end ;
25191: LD_VAR 0 6
25195: RET
// export function WantPlant ( unit ) ; var task ; begin
25196: LD_INT 0
25198: PPUSH
25199: PPUSH
// result := false ;
25200: LD_ADDR_VAR 0 2
25204: PUSH
25205: LD_INT 0
25207: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25208: LD_ADDR_VAR 0 3
25212: PUSH
25213: LD_VAR 0 1
25217: PPUSH
25218: CALL_OW 437
25222: ST_TO_ADDR
// if task then
25223: LD_VAR 0 3
25227: IFFALSE 25255
// if task [ 1 ] [ 1 ] = p then
25229: LD_VAR 0 3
25233: PUSH
25234: LD_INT 1
25236: ARRAY
25237: PUSH
25238: LD_INT 1
25240: ARRAY
25241: PUSH
25242: LD_STRING p
25244: EQUAL
25245: IFFALSE 25255
// result := true ;
25247: LD_ADDR_VAR 0 2
25251: PUSH
25252: LD_INT 1
25254: ST_TO_ADDR
// end ;
25255: LD_VAR 0 2
25259: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25260: LD_INT 0
25262: PPUSH
25263: PPUSH
25264: PPUSH
25265: PPUSH
// if pos < 1 then
25266: LD_VAR 0 2
25270: PUSH
25271: LD_INT 1
25273: LESS
25274: IFFALSE 25278
// exit ;
25276: GO 25581
// if pos = 1 then
25278: LD_VAR 0 2
25282: PUSH
25283: LD_INT 1
25285: EQUAL
25286: IFFALSE 25319
// result := Replace ( arr , pos [ 1 ] , value ) else
25288: LD_ADDR_VAR 0 4
25292: PUSH
25293: LD_VAR 0 1
25297: PPUSH
25298: LD_VAR 0 2
25302: PUSH
25303: LD_INT 1
25305: ARRAY
25306: PPUSH
25307: LD_VAR 0 3
25311: PPUSH
25312: CALL_OW 1
25316: ST_TO_ADDR
25317: GO 25581
// begin tmp := arr ;
25319: LD_ADDR_VAR 0 6
25323: PUSH
25324: LD_VAR 0 1
25328: ST_TO_ADDR
// s_arr := [ tmp ] ;
25329: LD_ADDR_VAR 0 7
25333: PUSH
25334: LD_VAR 0 6
25338: PUSH
25339: EMPTY
25340: LIST
25341: ST_TO_ADDR
// for i = 1 to pos - 1 do
25342: LD_ADDR_VAR 0 5
25346: PUSH
25347: DOUBLE
25348: LD_INT 1
25350: DEC
25351: ST_TO_ADDR
25352: LD_VAR 0 2
25356: PUSH
25357: LD_INT 1
25359: MINUS
25360: PUSH
25361: FOR_TO
25362: IFFALSE 25407
// begin tmp := tmp [ pos [ i ] ] ;
25364: LD_ADDR_VAR 0 6
25368: PUSH
25369: LD_VAR 0 6
25373: PUSH
25374: LD_VAR 0 2
25378: PUSH
25379: LD_VAR 0 5
25383: ARRAY
25384: ARRAY
25385: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25386: LD_ADDR_VAR 0 7
25390: PUSH
25391: LD_VAR 0 7
25395: PUSH
25396: LD_VAR 0 6
25400: PUSH
25401: EMPTY
25402: LIST
25403: ADD
25404: ST_TO_ADDR
// end ;
25405: GO 25361
25407: POP
25408: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25409: LD_ADDR_VAR 0 6
25413: PUSH
25414: LD_VAR 0 6
25418: PPUSH
25419: LD_VAR 0 2
25423: PUSH
25424: LD_VAR 0 2
25428: ARRAY
25429: PPUSH
25430: LD_VAR 0 3
25434: PPUSH
25435: CALL_OW 1
25439: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25440: LD_ADDR_VAR 0 7
25444: PUSH
25445: LD_VAR 0 7
25449: PPUSH
25450: LD_VAR 0 7
25454: PPUSH
25455: LD_VAR 0 6
25459: PPUSH
25460: CALL_OW 1
25464: ST_TO_ADDR
// for i = s_arr downto 2 do
25465: LD_ADDR_VAR 0 5
25469: PUSH
25470: DOUBLE
25471: LD_VAR 0 7
25475: INC
25476: ST_TO_ADDR
25477: LD_INT 2
25479: PUSH
25480: FOR_DOWNTO
25481: IFFALSE 25565
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25483: LD_ADDR_VAR 0 6
25487: PUSH
25488: LD_VAR 0 7
25492: PUSH
25493: LD_VAR 0 5
25497: PUSH
25498: LD_INT 1
25500: MINUS
25501: ARRAY
25502: PPUSH
25503: LD_VAR 0 2
25507: PUSH
25508: LD_VAR 0 5
25512: PUSH
25513: LD_INT 1
25515: MINUS
25516: ARRAY
25517: PPUSH
25518: LD_VAR 0 7
25522: PUSH
25523: LD_VAR 0 5
25527: ARRAY
25528: PPUSH
25529: CALL_OW 1
25533: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25534: LD_ADDR_VAR 0 7
25538: PUSH
25539: LD_VAR 0 7
25543: PPUSH
25544: LD_VAR 0 5
25548: PUSH
25549: LD_INT 1
25551: MINUS
25552: PPUSH
25553: LD_VAR 0 6
25557: PPUSH
25558: CALL_OW 1
25562: ST_TO_ADDR
// end ;
25563: GO 25480
25565: POP
25566: POP
// result := s_arr [ 1 ] ;
25567: LD_ADDR_VAR 0 4
25571: PUSH
25572: LD_VAR 0 7
25576: PUSH
25577: LD_INT 1
25579: ARRAY
25580: ST_TO_ADDR
// end ; end ;
25581: LD_VAR 0 4
25585: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25586: LD_INT 0
25588: PPUSH
25589: PPUSH
// if not list then
25590: LD_VAR 0 1
25594: NOT
25595: IFFALSE 25599
// exit ;
25597: GO 25690
// i := list [ pos1 ] ;
25599: LD_ADDR_VAR 0 5
25603: PUSH
25604: LD_VAR 0 1
25608: PUSH
25609: LD_VAR 0 2
25613: ARRAY
25614: ST_TO_ADDR
// if not i then
25615: LD_VAR 0 5
25619: NOT
25620: IFFALSE 25624
// exit ;
25622: GO 25690
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25624: LD_ADDR_VAR 0 1
25628: PUSH
25629: LD_VAR 0 1
25633: PPUSH
25634: LD_VAR 0 2
25638: PPUSH
25639: LD_VAR 0 1
25643: PUSH
25644: LD_VAR 0 3
25648: ARRAY
25649: PPUSH
25650: CALL_OW 1
25654: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25655: LD_ADDR_VAR 0 1
25659: PUSH
25660: LD_VAR 0 1
25664: PPUSH
25665: LD_VAR 0 3
25669: PPUSH
25670: LD_VAR 0 5
25674: PPUSH
25675: CALL_OW 1
25679: ST_TO_ADDR
// result := list ;
25680: LD_ADDR_VAR 0 4
25684: PUSH
25685: LD_VAR 0 1
25689: ST_TO_ADDR
// end ;
25690: LD_VAR 0 4
25694: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25695: LD_INT 0
25697: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25698: LD_ADDR_VAR 0 5
25702: PUSH
25703: LD_VAR 0 1
25707: PPUSH
25708: CALL_OW 250
25712: PPUSH
25713: LD_VAR 0 1
25717: PPUSH
25718: CALL_OW 251
25722: PPUSH
25723: LD_VAR 0 2
25727: PPUSH
25728: LD_VAR 0 3
25732: PPUSH
25733: LD_VAR 0 4
25737: PPUSH
25738: CALL 26116 0 5
25742: ST_TO_ADDR
// end ;
25743: LD_VAR 0 5
25747: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
25748: LD_INT 0
25750: PPUSH
25751: PPUSH
25752: PPUSH
25753: PPUSH
// if not list or not unit then
25754: LD_VAR 0 2
25758: NOT
25759: PUSH
25760: LD_VAR 0 1
25764: NOT
25765: OR
25766: IFFALSE 25770
// exit ;
25768: GO 26111
// result := [ ] ;
25770: LD_ADDR_VAR 0 5
25774: PUSH
25775: EMPTY
25776: ST_TO_ADDR
// for i in list do
25777: LD_ADDR_VAR 0 6
25781: PUSH
25782: LD_VAR 0 2
25786: PUSH
25787: FOR_IN
25788: IFFALSE 26006
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
25790: LD_ADDR_VAR 0 8
25794: PUSH
25795: LD_VAR 0 1
25799: PPUSH
25800: LD_VAR 0 6
25804: PUSH
25805: LD_INT 1
25807: ARRAY
25808: PPUSH
25809: LD_VAR 0 6
25813: PUSH
25814: LD_INT 2
25816: ARRAY
25817: PPUSH
25818: CALL_OW 297
25822: ST_TO_ADDR
// if not Count ( result ) then
25823: LD_VAR 0 5
25827: PPUSH
25828: CALL 22400 0 1
25832: NOT
25833: IFFALSE 25866
// begin result := Join ( result , [ i , tmp ] ) ;
25835: LD_ADDR_VAR 0 5
25839: PUSH
25840: LD_VAR 0 5
25844: PPUSH
25845: LD_VAR 0 6
25849: PUSH
25850: LD_VAR 0 8
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL 57989 0 2
25863: ST_TO_ADDR
// continue ;
25864: GO 25787
// end ; if result [ result ] [ 2 ] <= tmp then
25866: LD_VAR 0 5
25870: PUSH
25871: LD_VAR 0 5
25875: ARRAY
25876: PUSH
25877: LD_INT 2
25879: ARRAY
25880: PUSH
25881: LD_VAR 0 8
25885: LESSEQUAL
25886: IFFALSE 25919
// result := Join ( result , [ i , tmp ] ) else
25888: LD_ADDR_VAR 0 5
25892: PUSH
25893: LD_VAR 0 5
25897: PPUSH
25898: LD_VAR 0 6
25902: PUSH
25903: LD_VAR 0 8
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PPUSH
25912: CALL 57989 0 2
25916: ST_TO_ADDR
25917: GO 26004
// begin for j := 1 to Count ( result ) do
25919: LD_ADDR_VAR 0 7
25923: PUSH
25924: DOUBLE
25925: LD_INT 1
25927: DEC
25928: ST_TO_ADDR
25929: LD_VAR 0 5
25933: PPUSH
25934: CALL 22400 0 1
25938: PUSH
25939: FOR_TO
25940: IFFALSE 26002
// begin if tmp < result [ j ] [ 2 ] then
25942: LD_VAR 0 8
25946: PUSH
25947: LD_VAR 0 5
25951: PUSH
25952: LD_VAR 0 7
25956: ARRAY
25957: PUSH
25958: LD_INT 2
25960: ARRAY
25961: LESS
25962: IFFALSE 26000
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25964: LD_ADDR_VAR 0 5
25968: PUSH
25969: LD_VAR 0 5
25973: PPUSH
25974: LD_VAR 0 7
25978: PPUSH
25979: LD_VAR 0 6
25983: PUSH
25984: LD_VAR 0 8
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PPUSH
25993: CALL_OW 2
25997: ST_TO_ADDR
// break ;
25998: GO 26002
// end ; end ;
26000: GO 25939
26002: POP
26003: POP
// end ; end ;
26004: GO 25787
26006: POP
26007: POP
// if result and not asc then
26008: LD_VAR 0 5
26012: PUSH
26013: LD_VAR 0 3
26017: NOT
26018: AND
26019: IFFALSE 26036
// result := ReverseArray ( result ) ;
26021: LD_ADDR_VAR 0 5
26025: PUSH
26026: LD_VAR 0 5
26030: PPUSH
26031: CALL 53276 0 1
26035: ST_TO_ADDR
// tmp := [ ] ;
26036: LD_ADDR_VAR 0 8
26040: PUSH
26041: EMPTY
26042: ST_TO_ADDR
// if mode then
26043: LD_VAR 0 4
26047: IFFALSE 26111
// begin for i := 1 to result do
26049: LD_ADDR_VAR 0 6
26053: PUSH
26054: DOUBLE
26055: LD_INT 1
26057: DEC
26058: ST_TO_ADDR
26059: LD_VAR 0 5
26063: PUSH
26064: FOR_TO
26065: IFFALSE 26099
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26067: LD_ADDR_VAR 0 8
26071: PUSH
26072: LD_VAR 0 8
26076: PPUSH
26077: LD_VAR 0 5
26081: PUSH
26082: LD_VAR 0 6
26086: ARRAY
26087: PUSH
26088: LD_INT 1
26090: ARRAY
26091: PPUSH
26092: CALL 57989 0 2
26096: ST_TO_ADDR
26097: GO 26064
26099: POP
26100: POP
// result := tmp ;
26101: LD_ADDR_VAR 0 5
26105: PUSH
26106: LD_VAR 0 8
26110: ST_TO_ADDR
// end ; end ;
26111: LD_VAR 0 5
26115: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26116: LD_INT 0
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
// if not list then
26122: LD_VAR 0 3
26126: NOT
26127: IFFALSE 26131
// exit ;
26129: GO 26519
// result := [ ] ;
26131: LD_ADDR_VAR 0 6
26135: PUSH
26136: EMPTY
26137: ST_TO_ADDR
// for i in list do
26138: LD_ADDR_VAR 0 7
26142: PUSH
26143: LD_VAR 0 3
26147: PUSH
26148: FOR_IN
26149: IFFALSE 26351
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26151: LD_ADDR_VAR 0 9
26155: PUSH
26156: LD_VAR 0 7
26160: PPUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: LD_VAR 0 2
26170: PPUSH
26171: CALL_OW 297
26175: ST_TO_ADDR
// if not result then
26176: LD_VAR 0 6
26180: NOT
26181: IFFALSE 26207
// result := [ [ i , tmp ] ] else
26183: LD_ADDR_VAR 0 6
26187: PUSH
26188: LD_VAR 0 7
26192: PUSH
26193: LD_VAR 0 9
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: EMPTY
26203: LIST
26204: ST_TO_ADDR
26205: GO 26349
// begin if result [ result ] [ 2 ] < tmp then
26207: LD_VAR 0 6
26211: PUSH
26212: LD_VAR 0 6
26216: ARRAY
26217: PUSH
26218: LD_INT 2
26220: ARRAY
26221: PUSH
26222: LD_VAR 0 9
26226: LESS
26227: IFFALSE 26269
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26229: LD_ADDR_VAR 0 6
26233: PUSH
26234: LD_VAR 0 6
26238: PPUSH
26239: LD_VAR 0 6
26243: PUSH
26244: LD_INT 1
26246: PLUS
26247: PPUSH
26248: LD_VAR 0 7
26252: PUSH
26253: LD_VAR 0 9
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PPUSH
26262: CALL_OW 2
26266: ST_TO_ADDR
26267: GO 26349
// for j = 1 to result do
26269: LD_ADDR_VAR 0 8
26273: PUSH
26274: DOUBLE
26275: LD_INT 1
26277: DEC
26278: ST_TO_ADDR
26279: LD_VAR 0 6
26283: PUSH
26284: FOR_TO
26285: IFFALSE 26347
// begin if tmp < result [ j ] [ 2 ] then
26287: LD_VAR 0 9
26291: PUSH
26292: LD_VAR 0 6
26296: PUSH
26297: LD_VAR 0 8
26301: ARRAY
26302: PUSH
26303: LD_INT 2
26305: ARRAY
26306: LESS
26307: IFFALSE 26345
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26309: LD_ADDR_VAR 0 6
26313: PUSH
26314: LD_VAR 0 6
26318: PPUSH
26319: LD_VAR 0 8
26323: PPUSH
26324: LD_VAR 0 7
26328: PUSH
26329: LD_VAR 0 9
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PPUSH
26338: CALL_OW 2
26342: ST_TO_ADDR
// break ;
26343: GO 26347
// end ; end ;
26345: GO 26284
26347: POP
26348: POP
// end ; end ;
26349: GO 26148
26351: POP
26352: POP
// if result and not asc then
26353: LD_VAR 0 6
26357: PUSH
26358: LD_VAR 0 4
26362: NOT
26363: AND
26364: IFFALSE 26439
// begin tmp := result ;
26366: LD_ADDR_VAR 0 9
26370: PUSH
26371: LD_VAR 0 6
26375: ST_TO_ADDR
// for i = tmp downto 1 do
26376: LD_ADDR_VAR 0 7
26380: PUSH
26381: DOUBLE
26382: LD_VAR 0 9
26386: INC
26387: ST_TO_ADDR
26388: LD_INT 1
26390: PUSH
26391: FOR_DOWNTO
26392: IFFALSE 26437
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26394: LD_ADDR_VAR 0 6
26398: PUSH
26399: LD_VAR 0 6
26403: PPUSH
26404: LD_VAR 0 9
26408: PUSH
26409: LD_VAR 0 7
26413: MINUS
26414: PUSH
26415: LD_INT 1
26417: PLUS
26418: PPUSH
26419: LD_VAR 0 9
26423: PUSH
26424: LD_VAR 0 7
26428: ARRAY
26429: PPUSH
26430: CALL_OW 1
26434: ST_TO_ADDR
26435: GO 26391
26437: POP
26438: POP
// end ; tmp := [ ] ;
26439: LD_ADDR_VAR 0 9
26443: PUSH
26444: EMPTY
26445: ST_TO_ADDR
// if mode then
26446: LD_VAR 0 5
26450: IFFALSE 26519
// begin for i = 1 to result do
26452: LD_ADDR_VAR 0 7
26456: PUSH
26457: DOUBLE
26458: LD_INT 1
26460: DEC
26461: ST_TO_ADDR
26462: LD_VAR 0 6
26466: PUSH
26467: FOR_TO
26468: IFFALSE 26507
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26470: LD_ADDR_VAR 0 9
26474: PUSH
26475: LD_VAR 0 9
26479: PPUSH
26480: LD_VAR 0 7
26484: PPUSH
26485: LD_VAR 0 6
26489: PUSH
26490: LD_VAR 0 7
26494: ARRAY
26495: PUSH
26496: LD_INT 1
26498: ARRAY
26499: PPUSH
26500: CALL_OW 1
26504: ST_TO_ADDR
26505: GO 26467
26507: POP
26508: POP
// result := tmp ;
26509: LD_ADDR_VAR 0 6
26513: PUSH
26514: LD_VAR 0 9
26518: ST_TO_ADDR
// end ; end ;
26519: LD_VAR 0 6
26523: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26524: LD_INT 0
26526: PPUSH
26527: PPUSH
26528: PPUSH
26529: PPUSH
26530: PPUSH
26531: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26532: LD_ADDR_VAR 0 5
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: EMPTY
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: ST_TO_ADDR
// if not x or not y then
26554: LD_VAR 0 2
26558: NOT
26559: PUSH
26560: LD_VAR 0 3
26564: NOT
26565: OR
26566: IFFALSE 26570
// exit ;
26568: GO 28220
// if not range then
26570: LD_VAR 0 4
26574: NOT
26575: IFFALSE 26585
// range := 10 ;
26577: LD_ADDR_VAR 0 4
26581: PUSH
26582: LD_INT 10
26584: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26585: LD_ADDR_VAR 0 8
26589: PUSH
26590: LD_INT 81
26592: PUSH
26593: LD_VAR 0 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 92
26604: PUSH
26605: LD_VAR 0 2
26609: PUSH
26610: LD_VAR 0 3
26614: PUSH
26615: LD_VAR 0 4
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 3
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 3
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: PPUSH
26648: CALL_OW 69
26652: ST_TO_ADDR
// if not tmp then
26653: LD_VAR 0 8
26657: NOT
26658: IFFALSE 26662
// exit ;
26660: GO 28220
// for i in tmp do
26662: LD_ADDR_VAR 0 6
26666: PUSH
26667: LD_VAR 0 8
26671: PUSH
26672: FOR_IN
26673: IFFALSE 28195
// begin points := [ 0 , 0 , 0 ] ;
26675: LD_ADDR_VAR 0 9
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: LIST
26693: ST_TO_ADDR
// bpoints := 1 ;
26694: LD_ADDR_VAR 0 10
26698: PUSH
26699: LD_INT 1
26701: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26702: LD_VAR 0 6
26706: PPUSH
26707: CALL_OW 247
26711: PUSH
26712: LD_INT 1
26714: DOUBLE
26715: EQUAL
26716: IFTRUE 26720
26718: GO 27298
26720: POP
// begin if GetClass ( i ) = 1 then
26721: LD_VAR 0 6
26725: PPUSH
26726: CALL_OW 257
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: IFFALSE 26755
// points := [ 10 , 5 , 3 ] ;
26736: LD_ADDR_VAR 0 9
26740: PUSH
26741: LD_INT 10
26743: PUSH
26744: LD_INT 5
26746: PUSH
26747: LD_INT 3
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26755: LD_VAR 0 6
26759: PPUSH
26760: CALL_OW 257
26764: PUSH
26765: LD_INT 2
26767: PUSH
26768: LD_INT 3
26770: PUSH
26771: LD_INT 4
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: IN
26779: IFFALSE 26800
// points := [ 3 , 2 , 1 ] ;
26781: LD_ADDR_VAR 0 9
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: LIST
26799: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26800: LD_VAR 0 6
26804: PPUSH
26805: CALL_OW 257
26809: PUSH
26810: LD_INT 5
26812: EQUAL
26813: IFFALSE 26834
// points := [ 130 , 5 , 2 ] ;
26815: LD_ADDR_VAR 0 9
26819: PUSH
26820: LD_INT 130
26822: PUSH
26823: LD_INT 5
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26834: LD_VAR 0 6
26838: PPUSH
26839: CALL_OW 257
26843: PUSH
26844: LD_INT 8
26846: EQUAL
26847: IFFALSE 26868
// points := [ 35 , 35 , 30 ] ;
26849: LD_ADDR_VAR 0 9
26853: PUSH
26854: LD_INT 35
26856: PUSH
26857: LD_INT 35
26859: PUSH
26860: LD_INT 30
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26868: LD_VAR 0 6
26872: PPUSH
26873: CALL_OW 257
26877: PUSH
26878: LD_INT 9
26880: EQUAL
26881: IFFALSE 26902
// points := [ 20 , 55 , 40 ] ;
26883: LD_ADDR_VAR 0 9
26887: PUSH
26888: LD_INT 20
26890: PUSH
26891: LD_INT 55
26893: PUSH
26894: LD_INT 40
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: LIST
26901: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26902: LD_VAR 0 6
26906: PPUSH
26907: CALL_OW 257
26911: PUSH
26912: LD_INT 12
26914: PUSH
26915: LD_INT 16
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: IN
26922: IFFALSE 26943
// points := [ 5 , 3 , 2 ] ;
26924: LD_ADDR_VAR 0 9
26928: PUSH
26929: LD_INT 5
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26943: LD_VAR 0 6
26947: PPUSH
26948: CALL_OW 257
26952: PUSH
26953: LD_INT 17
26955: EQUAL
26956: IFFALSE 26977
// points := [ 100 , 50 , 75 ] ;
26958: LD_ADDR_VAR 0 9
26962: PUSH
26963: LD_INT 100
26965: PUSH
26966: LD_INT 50
26968: PUSH
26969: LD_INT 75
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26977: LD_VAR 0 6
26981: PPUSH
26982: CALL_OW 257
26986: PUSH
26987: LD_INT 15
26989: EQUAL
26990: IFFALSE 27011
// points := [ 10 , 5 , 3 ] ;
26992: LD_ADDR_VAR 0 9
26996: PUSH
26997: LD_INT 10
26999: PUSH
27000: LD_INT 5
27002: PUSH
27003: LD_INT 3
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: LIST
27010: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27011: LD_VAR 0 6
27015: PPUSH
27016: CALL_OW 257
27020: PUSH
27021: LD_INT 14
27023: EQUAL
27024: IFFALSE 27045
// points := [ 10 , 0 , 0 ] ;
27026: LD_ADDR_VAR 0 9
27030: PUSH
27031: LD_INT 10
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27045: LD_VAR 0 6
27049: PPUSH
27050: CALL_OW 257
27054: PUSH
27055: LD_INT 11
27057: EQUAL
27058: IFFALSE 27079
// points := [ 30 , 10 , 5 ] ;
27060: LD_ADDR_VAR 0 9
27064: PUSH
27065: LD_INT 30
27067: PUSH
27068: LD_INT 10
27070: PUSH
27071: LD_INT 5
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: LIST
27078: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27079: LD_VAR 0 1
27083: PPUSH
27084: LD_INT 5
27086: PPUSH
27087: CALL_OW 321
27091: PUSH
27092: LD_INT 2
27094: EQUAL
27095: IFFALSE 27112
// bpoints := bpoints * 1.8 ;
27097: LD_ADDR_VAR 0 10
27101: PUSH
27102: LD_VAR 0 10
27106: PUSH
27107: LD_REAL  1.80000000000000E+0000
27110: MUL
27111: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27112: LD_VAR 0 6
27116: PPUSH
27117: CALL_OW 257
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 3
27130: PUSH
27131: LD_INT 4
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: IN
27140: PUSH
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_INT 51
27148: PPUSH
27149: CALL_OW 321
27153: PUSH
27154: LD_INT 2
27156: EQUAL
27157: AND
27158: IFFALSE 27175
// bpoints := bpoints * 1.2 ;
27160: LD_ADDR_VAR 0 10
27164: PUSH
27165: LD_VAR 0 10
27169: PUSH
27170: LD_REAL  1.20000000000000E+0000
27173: MUL
27174: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27175: LD_VAR 0 6
27179: PPUSH
27180: CALL_OW 257
27184: PUSH
27185: LD_INT 5
27187: PUSH
27188: LD_INT 7
27190: PUSH
27191: LD_INT 9
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: IN
27199: PUSH
27200: LD_VAR 0 1
27204: PPUSH
27205: LD_INT 52
27207: PPUSH
27208: CALL_OW 321
27212: PUSH
27213: LD_INT 2
27215: EQUAL
27216: AND
27217: IFFALSE 27234
// bpoints := bpoints * 1.5 ;
27219: LD_ADDR_VAR 0 10
27223: PUSH
27224: LD_VAR 0 10
27228: PUSH
27229: LD_REAL  1.50000000000000E+0000
27232: MUL
27233: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27234: LD_VAR 0 1
27238: PPUSH
27239: LD_INT 66
27241: PPUSH
27242: CALL_OW 321
27246: PUSH
27247: LD_INT 2
27249: EQUAL
27250: IFFALSE 27267
// bpoints := bpoints * 1.1 ;
27252: LD_ADDR_VAR 0 10
27256: PUSH
27257: LD_VAR 0 10
27261: PUSH
27262: LD_REAL  1.10000000000000E+0000
27265: MUL
27266: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27267: LD_ADDR_VAR 0 10
27271: PUSH
27272: LD_VAR 0 10
27276: PUSH
27277: LD_VAR 0 6
27281: PPUSH
27282: LD_INT 1
27284: PPUSH
27285: CALL_OW 259
27289: PUSH
27290: LD_REAL  1.15000000000000E+0000
27293: MUL
27294: MUL
27295: ST_TO_ADDR
// end ; unit_vehicle :
27296: GO 28124
27298: LD_INT 2
27300: DOUBLE
27301: EQUAL
27302: IFTRUE 27306
27304: GO 28112
27306: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27307: LD_VAR 0 6
27311: PPUSH
27312: CALL_OW 264
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 42
27322: PUSH
27323: LD_INT 24
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: IN
27331: IFFALSE 27352
// points := [ 25 , 5 , 3 ] ;
27333: LD_ADDR_VAR 0 9
27337: PUSH
27338: LD_INT 25
27340: PUSH
27341: LD_INT 5
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27352: LD_VAR 0 6
27356: PPUSH
27357: CALL_OW 264
27361: PUSH
27362: LD_INT 4
27364: PUSH
27365: LD_INT 43
27367: PUSH
27368: LD_INT 25
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: LIST
27375: IN
27376: IFFALSE 27397
// points := [ 40 , 15 , 5 ] ;
27378: LD_ADDR_VAR 0 9
27382: PUSH
27383: LD_INT 40
27385: PUSH
27386: LD_INT 15
27388: PUSH
27389: LD_INT 5
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27397: LD_VAR 0 6
27401: PPUSH
27402: CALL_OW 264
27406: PUSH
27407: LD_INT 3
27409: PUSH
27410: LD_INT 23
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: IN
27417: IFFALSE 27438
// points := [ 7 , 25 , 8 ] ;
27419: LD_ADDR_VAR 0 9
27423: PUSH
27424: LD_INT 7
27426: PUSH
27427: LD_INT 25
27429: PUSH
27430: LD_INT 8
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: LIST
27437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27438: LD_VAR 0 6
27442: PPUSH
27443: CALL_OW 264
27447: PUSH
27448: LD_INT 5
27450: PUSH
27451: LD_INT 27
27453: PUSH
27454: LD_INT 44
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: LIST
27461: IN
27462: IFFALSE 27483
// points := [ 14 , 50 , 16 ] ;
27464: LD_ADDR_VAR 0 9
27468: PUSH
27469: LD_INT 14
27471: PUSH
27472: LD_INT 50
27474: PUSH
27475: LD_INT 16
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27483: LD_VAR 0 6
27487: PPUSH
27488: CALL_OW 264
27492: PUSH
27493: LD_INT 6
27495: PUSH
27496: LD_INT 46
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: IN
27503: IFFALSE 27524
// points := [ 32 , 120 , 70 ] ;
27505: LD_ADDR_VAR 0 9
27509: PUSH
27510: LD_INT 32
27512: PUSH
27513: LD_INT 120
27515: PUSH
27516: LD_INT 70
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27524: LD_VAR 0 6
27528: PPUSH
27529: CALL_OW 264
27533: PUSH
27534: LD_INT 7
27536: PUSH
27537: LD_INT 28
27539: PUSH
27540: LD_INT 45
27542: PUSH
27543: LD_INT 92
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: IN
27552: IFFALSE 27573
// points := [ 35 , 20 , 45 ] ;
27554: LD_ADDR_VAR 0 9
27558: PUSH
27559: LD_INT 35
27561: PUSH
27562: LD_INT 20
27564: PUSH
27565: LD_INT 45
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27573: LD_VAR 0 6
27577: PPUSH
27578: CALL_OW 264
27582: PUSH
27583: LD_INT 47
27585: PUSH
27586: EMPTY
27587: LIST
27588: IN
27589: IFFALSE 27610
// points := [ 67 , 45 , 75 ] ;
27591: LD_ADDR_VAR 0 9
27595: PUSH
27596: LD_INT 67
27598: PUSH
27599: LD_INT 45
27601: PUSH
27602: LD_INT 75
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27610: LD_VAR 0 6
27614: PPUSH
27615: CALL_OW 264
27619: PUSH
27620: LD_INT 26
27622: PUSH
27623: EMPTY
27624: LIST
27625: IN
27626: IFFALSE 27647
// points := [ 120 , 30 , 80 ] ;
27628: LD_ADDR_VAR 0 9
27632: PUSH
27633: LD_INT 120
27635: PUSH
27636: LD_INT 30
27638: PUSH
27639: LD_INT 80
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: LIST
27646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27647: LD_VAR 0 6
27651: PPUSH
27652: CALL_OW 264
27656: PUSH
27657: LD_INT 22
27659: PUSH
27660: EMPTY
27661: LIST
27662: IN
27663: IFFALSE 27684
// points := [ 40 , 1 , 1 ] ;
27665: LD_ADDR_VAR 0 9
27669: PUSH
27670: LD_INT 40
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27684: LD_VAR 0 6
27688: PPUSH
27689: CALL_OW 264
27693: PUSH
27694: LD_INT 29
27696: PUSH
27697: EMPTY
27698: LIST
27699: IN
27700: IFFALSE 27721
// points := [ 70 , 200 , 400 ] ;
27702: LD_ADDR_VAR 0 9
27706: PUSH
27707: LD_INT 70
27709: PUSH
27710: LD_INT 200
27712: PUSH
27713: LD_INT 400
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27721: LD_VAR 0 6
27725: PPUSH
27726: CALL_OW 264
27730: PUSH
27731: LD_INT 14
27733: PUSH
27734: LD_INT 53
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: IN
27741: IFFALSE 27762
// points := [ 40 , 10 , 20 ] ;
27743: LD_ADDR_VAR 0 9
27747: PUSH
27748: LD_INT 40
27750: PUSH
27751: LD_INT 10
27753: PUSH
27754: LD_INT 20
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27762: LD_VAR 0 6
27766: PPUSH
27767: CALL_OW 264
27771: PUSH
27772: LD_INT 9
27774: PUSH
27775: EMPTY
27776: LIST
27777: IN
27778: IFFALSE 27799
// points := [ 5 , 70 , 20 ] ;
27780: LD_ADDR_VAR 0 9
27784: PUSH
27785: LD_INT 5
27787: PUSH
27788: LD_INT 70
27790: PUSH
27791: LD_INT 20
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27799: LD_VAR 0 6
27803: PPUSH
27804: CALL_OW 264
27808: PUSH
27809: LD_INT 10
27811: PUSH
27812: EMPTY
27813: LIST
27814: IN
27815: IFFALSE 27836
// points := [ 35 , 110 , 70 ] ;
27817: LD_ADDR_VAR 0 9
27821: PUSH
27822: LD_INT 35
27824: PUSH
27825: LD_INT 110
27827: PUSH
27828: LD_INT 70
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27836: LD_VAR 0 6
27840: PPUSH
27841: CALL_OW 265
27845: PUSH
27846: LD_INT 25
27848: EQUAL
27849: IFFALSE 27870
// points := [ 80 , 65 , 100 ] ;
27851: LD_ADDR_VAR 0 9
27855: PUSH
27856: LD_INT 80
27858: PUSH
27859: LD_INT 65
27861: PUSH
27862: LD_INT 100
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27870: LD_VAR 0 6
27874: PPUSH
27875: CALL_OW 263
27879: PUSH
27880: LD_INT 1
27882: EQUAL
27883: IFFALSE 27918
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27885: LD_ADDR_VAR 0 10
27889: PUSH
27890: LD_VAR 0 10
27894: PUSH
27895: LD_VAR 0 6
27899: PPUSH
27900: CALL_OW 311
27904: PPUSH
27905: LD_INT 3
27907: PPUSH
27908: CALL_OW 259
27912: PUSH
27913: LD_INT 4
27915: MUL
27916: MUL
27917: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27918: LD_VAR 0 6
27922: PPUSH
27923: CALL_OW 263
27927: PUSH
27928: LD_INT 2
27930: EQUAL
27931: IFFALSE 27982
// begin j := IsControledBy ( i ) ;
27933: LD_ADDR_VAR 0 7
27937: PUSH
27938: LD_VAR 0 6
27942: PPUSH
27943: CALL_OW 312
27947: ST_TO_ADDR
// if j then
27948: LD_VAR 0 7
27952: IFFALSE 27982
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27954: LD_ADDR_VAR 0 10
27958: PUSH
27959: LD_VAR 0 10
27963: PUSH
27964: LD_VAR 0 7
27968: PPUSH
27969: LD_INT 3
27971: PPUSH
27972: CALL_OW 259
27976: PUSH
27977: LD_INT 3
27979: MUL
27980: MUL
27981: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27982: LD_VAR 0 6
27986: PPUSH
27987: CALL_OW 264
27991: PUSH
27992: LD_INT 5
27994: PUSH
27995: LD_INT 6
27997: PUSH
27998: LD_INT 46
28000: PUSH
28001: LD_INT 44
28003: PUSH
28004: LD_INT 47
28006: PUSH
28007: LD_INT 45
28009: PUSH
28010: LD_INT 28
28012: PUSH
28013: LD_INT 7
28015: PUSH
28016: LD_INT 27
28018: PUSH
28019: LD_INT 29
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: IN
28034: PUSH
28035: LD_VAR 0 1
28039: PPUSH
28040: LD_INT 52
28042: PPUSH
28043: CALL_OW 321
28047: PUSH
28048: LD_INT 2
28050: EQUAL
28051: AND
28052: IFFALSE 28069
// bpoints := bpoints * 1.2 ;
28054: LD_ADDR_VAR 0 10
28058: PUSH
28059: LD_VAR 0 10
28063: PUSH
28064: LD_REAL  1.20000000000000E+0000
28067: MUL
28068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28069: LD_VAR 0 6
28073: PPUSH
28074: CALL_OW 264
28078: PUSH
28079: LD_INT 6
28081: PUSH
28082: LD_INT 46
28084: PUSH
28085: LD_INT 47
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: IN
28093: IFFALSE 28110
// bpoints := bpoints * 1.2 ;
28095: LD_ADDR_VAR 0 10
28099: PUSH
28100: LD_VAR 0 10
28104: PUSH
28105: LD_REAL  1.20000000000000E+0000
28108: MUL
28109: ST_TO_ADDR
// end ; unit_building :
28110: GO 28124
28112: LD_INT 3
28114: DOUBLE
28115: EQUAL
28116: IFTRUE 28120
28118: GO 28123
28120: POP
// ; end ;
28121: GO 28124
28123: POP
// for j = 1 to 3 do
28124: LD_ADDR_VAR 0 7
28128: PUSH
28129: DOUBLE
28130: LD_INT 1
28132: DEC
28133: ST_TO_ADDR
28134: LD_INT 3
28136: PUSH
28137: FOR_TO
28138: IFFALSE 28191
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28140: LD_ADDR_VAR 0 5
28144: PUSH
28145: LD_VAR 0 5
28149: PPUSH
28150: LD_VAR 0 7
28154: PPUSH
28155: LD_VAR 0 5
28159: PUSH
28160: LD_VAR 0 7
28164: ARRAY
28165: PUSH
28166: LD_VAR 0 9
28170: PUSH
28171: LD_VAR 0 7
28175: ARRAY
28176: PUSH
28177: LD_VAR 0 10
28181: MUL
28182: PLUS
28183: PPUSH
28184: CALL_OW 1
28188: ST_TO_ADDR
28189: GO 28137
28191: POP
28192: POP
// end ;
28193: GO 26672
28195: POP
28196: POP
// result := Replace ( result , 4 , tmp ) ;
28197: LD_ADDR_VAR 0 5
28201: PUSH
28202: LD_VAR 0 5
28206: PPUSH
28207: LD_INT 4
28209: PPUSH
28210: LD_VAR 0 8
28214: PPUSH
28215: CALL_OW 1
28219: ST_TO_ADDR
// end ;
28220: LD_VAR 0 5
28224: RET
// export function DangerAtRange ( unit , range ) ; begin
28225: LD_INT 0
28227: PPUSH
// if not unit then
28228: LD_VAR 0 1
28232: NOT
28233: IFFALSE 28237
// exit ;
28235: GO 28282
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28237: LD_ADDR_VAR 0 3
28241: PUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 255
28251: PPUSH
28252: LD_VAR 0 1
28256: PPUSH
28257: CALL_OW 250
28261: PPUSH
28262: LD_VAR 0 1
28266: PPUSH
28267: CALL_OW 251
28271: PPUSH
28272: LD_VAR 0 2
28276: PPUSH
28277: CALL 26524 0 4
28281: ST_TO_ADDR
// end ;
28282: LD_VAR 0 3
28286: RET
// export function DangerInArea ( side , area ) ; begin
28287: LD_INT 0
28289: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28290: LD_ADDR_VAR 0 3
28294: PUSH
28295: LD_VAR 0 2
28299: PPUSH
28300: LD_INT 81
28302: PUSH
28303: LD_VAR 0 1
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PPUSH
28312: CALL_OW 70
28316: ST_TO_ADDR
// end ;
28317: LD_VAR 0 3
28321: RET
// export function IsExtension ( b ) ; begin
28322: LD_INT 0
28324: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28325: LD_ADDR_VAR 0 2
28329: PUSH
28330: LD_VAR 0 1
28334: PUSH
28335: LD_INT 23
28337: PUSH
28338: LD_INT 20
28340: PUSH
28341: LD_INT 22
28343: PUSH
28344: LD_INT 17
28346: PUSH
28347: LD_INT 24
28349: PUSH
28350: LD_INT 21
28352: PUSH
28353: LD_INT 19
28355: PUSH
28356: LD_INT 16
28358: PUSH
28359: LD_INT 25
28361: PUSH
28362: LD_INT 18
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: IN
28377: ST_TO_ADDR
// end ;
28378: LD_VAR 0 2
28382: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28383: LD_INT 0
28385: PPUSH
28386: PPUSH
28387: PPUSH
// result := [ ] ;
28388: LD_ADDR_VAR 0 4
28392: PUSH
28393: EMPTY
28394: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28395: LD_ADDR_VAR 0 5
28399: PUSH
28400: LD_VAR 0 2
28404: PPUSH
28405: LD_INT 21
28407: PUSH
28408: LD_INT 3
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PPUSH
28415: CALL_OW 70
28419: ST_TO_ADDR
// if not tmp then
28420: LD_VAR 0 5
28424: NOT
28425: IFFALSE 28429
// exit ;
28427: GO 28493
// if checkLink then
28429: LD_VAR 0 3
28433: IFFALSE 28483
// begin for i in tmp do
28435: LD_ADDR_VAR 0 6
28439: PUSH
28440: LD_VAR 0 5
28444: PUSH
28445: FOR_IN
28446: IFFALSE 28481
// if GetBase ( i ) <> base then
28448: LD_VAR 0 6
28452: PPUSH
28453: CALL_OW 274
28457: PUSH
28458: LD_VAR 0 1
28462: NONEQUAL
28463: IFFALSE 28479
// ComLinkToBase ( base , i ) ;
28465: LD_VAR 0 1
28469: PPUSH
28470: LD_VAR 0 6
28474: PPUSH
28475: CALL_OW 169
28479: GO 28445
28481: POP
28482: POP
// end ; result := tmp ;
28483: LD_ADDR_VAR 0 4
28487: PUSH
28488: LD_VAR 0 5
28492: ST_TO_ADDR
// end ;
28493: LD_VAR 0 4
28497: RET
// export function ComComplete ( units , b ) ; var i ; begin
28498: LD_INT 0
28500: PPUSH
28501: PPUSH
// if not units then
28502: LD_VAR 0 1
28506: NOT
28507: IFFALSE 28511
// exit ;
28509: GO 28601
// for i in units do
28511: LD_ADDR_VAR 0 4
28515: PUSH
28516: LD_VAR 0 1
28520: PUSH
28521: FOR_IN
28522: IFFALSE 28599
// if BuildingStatus ( b ) = bs_build then
28524: LD_VAR 0 2
28528: PPUSH
28529: CALL_OW 461
28533: PUSH
28534: LD_INT 1
28536: EQUAL
28537: IFFALSE 28597
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28539: LD_VAR 0 4
28543: PPUSH
28544: LD_STRING h
28546: PUSH
28547: LD_VAR 0 2
28551: PPUSH
28552: CALL_OW 250
28556: PUSH
28557: LD_VAR 0 2
28561: PPUSH
28562: CALL_OW 251
28566: PUSH
28567: LD_VAR 0 2
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: PUSH
28590: EMPTY
28591: LIST
28592: PPUSH
28593: CALL_OW 446
28597: GO 28521
28599: POP
28600: POP
// end ;
28601: LD_VAR 0 3
28605: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28606: LD_INT 0
28608: PPUSH
28609: PPUSH
28610: PPUSH
28611: PPUSH
28612: PPUSH
28613: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28614: LD_VAR 0 1
28618: NOT
28619: PUSH
28620: LD_VAR 0 1
28624: PPUSH
28625: CALL_OW 263
28629: PUSH
28630: LD_INT 2
28632: NONEQUAL
28633: OR
28634: IFFALSE 28638
// exit ;
28636: GO 28954
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28638: LD_ADDR_VAR 0 6
28642: PUSH
28643: LD_INT 22
28645: PUSH
28646: LD_VAR 0 1
28650: PPUSH
28651: CALL_OW 255
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: LD_INT 30
28665: PUSH
28666: LD_INT 36
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 34
28675: PUSH
28676: LD_INT 31
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PPUSH
28692: CALL_OW 69
28696: ST_TO_ADDR
// if not tmp then
28697: LD_VAR 0 6
28701: NOT
28702: IFFALSE 28706
// exit ;
28704: GO 28954
// result := [ ] ;
28706: LD_ADDR_VAR 0 2
28710: PUSH
28711: EMPTY
28712: ST_TO_ADDR
// for i in tmp do
28713: LD_ADDR_VAR 0 3
28717: PUSH
28718: LD_VAR 0 6
28722: PUSH
28723: FOR_IN
28724: IFFALSE 28795
// begin t := UnitsInside ( i ) ;
28726: LD_ADDR_VAR 0 4
28730: PUSH
28731: LD_VAR 0 3
28735: PPUSH
28736: CALL_OW 313
28740: ST_TO_ADDR
// if t then
28741: LD_VAR 0 4
28745: IFFALSE 28793
// for j in t do
28747: LD_ADDR_VAR 0 7
28751: PUSH
28752: LD_VAR 0 4
28756: PUSH
28757: FOR_IN
28758: IFFALSE 28791
// result := Replace ( result , result + 1 , j ) ;
28760: LD_ADDR_VAR 0 2
28764: PUSH
28765: LD_VAR 0 2
28769: PPUSH
28770: LD_VAR 0 2
28774: PUSH
28775: LD_INT 1
28777: PLUS
28778: PPUSH
28779: LD_VAR 0 7
28783: PPUSH
28784: CALL_OW 1
28788: ST_TO_ADDR
28789: GO 28757
28791: POP
28792: POP
// end ;
28793: GO 28723
28795: POP
28796: POP
// if not result then
28797: LD_VAR 0 2
28801: NOT
28802: IFFALSE 28806
// exit ;
28804: GO 28954
// mech := result [ 1 ] ;
28806: LD_ADDR_VAR 0 5
28810: PUSH
28811: LD_VAR 0 2
28815: PUSH
28816: LD_INT 1
28818: ARRAY
28819: ST_TO_ADDR
// if result > 1 then
28820: LD_VAR 0 2
28824: PUSH
28825: LD_INT 1
28827: GREATER
28828: IFFALSE 28940
// begin for i = 2 to result do
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: DOUBLE
28836: LD_INT 2
28838: DEC
28839: ST_TO_ADDR
28840: LD_VAR 0 2
28844: PUSH
28845: FOR_TO
28846: IFFALSE 28938
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28848: LD_ADDR_VAR 0 4
28852: PUSH
28853: LD_VAR 0 2
28857: PUSH
28858: LD_VAR 0 3
28862: ARRAY
28863: PPUSH
28864: LD_INT 3
28866: PPUSH
28867: CALL_OW 259
28871: PUSH
28872: LD_VAR 0 2
28876: PUSH
28877: LD_VAR 0 3
28881: ARRAY
28882: PPUSH
28883: CALL_OW 432
28887: MINUS
28888: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28889: LD_VAR 0 4
28893: PUSH
28894: LD_VAR 0 5
28898: PPUSH
28899: LD_INT 3
28901: PPUSH
28902: CALL_OW 259
28906: PUSH
28907: LD_VAR 0 5
28911: PPUSH
28912: CALL_OW 432
28916: MINUS
28917: GREATEREQUAL
28918: IFFALSE 28936
// mech := result [ i ] ;
28920: LD_ADDR_VAR 0 5
28924: PUSH
28925: LD_VAR 0 2
28929: PUSH
28930: LD_VAR 0 3
28934: ARRAY
28935: ST_TO_ADDR
// end ;
28936: GO 28845
28938: POP
28939: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28940: LD_VAR 0 1
28944: PPUSH
28945: LD_VAR 0 5
28949: PPUSH
28950: CALL_OW 135
// end ;
28954: LD_VAR 0 2
28958: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28959: LD_INT 0
28961: PPUSH
28962: PPUSH
28963: PPUSH
28964: PPUSH
28965: PPUSH
28966: PPUSH
28967: PPUSH
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
// result := [ ] ;
28974: LD_ADDR_VAR 0 7
28978: PUSH
28979: EMPTY
28980: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28981: LD_VAR 0 1
28985: PPUSH
28986: CALL_OW 266
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: IN
29001: NOT
29002: IFFALSE 29006
// exit ;
29004: GO 30640
// if name then
29006: LD_VAR 0 3
29010: IFFALSE 29026
// SetBName ( base_dep , name ) ;
29012: LD_VAR 0 1
29016: PPUSH
29017: LD_VAR 0 3
29021: PPUSH
29022: CALL_OW 500
// base := GetBase ( base_dep ) ;
29026: LD_ADDR_VAR 0 15
29030: PUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL_OW 274
29040: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29041: LD_ADDR_VAR 0 16
29045: PUSH
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 255
29055: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29056: LD_ADDR_VAR 0 17
29060: PUSH
29061: LD_VAR 0 1
29065: PPUSH
29066: CALL_OW 248
29070: ST_TO_ADDR
// if sources then
29071: LD_VAR 0 5
29075: IFFALSE 29122
// for i = 1 to 3 do
29077: LD_ADDR_VAR 0 8
29081: PUSH
29082: DOUBLE
29083: LD_INT 1
29085: DEC
29086: ST_TO_ADDR
29087: LD_INT 3
29089: PUSH
29090: FOR_TO
29091: IFFALSE 29120
// AddResourceType ( base , i , sources [ i ] ) ;
29093: LD_VAR 0 15
29097: PPUSH
29098: LD_VAR 0 8
29102: PPUSH
29103: LD_VAR 0 5
29107: PUSH
29108: LD_VAR 0 8
29112: ARRAY
29113: PPUSH
29114: CALL_OW 276
29118: GO 29090
29120: POP
29121: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29122: LD_ADDR_VAR 0 18
29126: PUSH
29127: LD_VAR 0 15
29131: PPUSH
29132: LD_VAR 0 2
29136: PPUSH
29137: LD_INT 1
29139: PPUSH
29140: CALL 28383 0 3
29144: ST_TO_ADDR
// InitHc ;
29145: CALL_OW 19
// InitUc ;
29149: CALL_OW 18
// uc_side := side ;
29153: LD_ADDR_OWVAR 20
29157: PUSH
29158: LD_VAR 0 16
29162: ST_TO_ADDR
// uc_nation := nation ;
29163: LD_ADDR_OWVAR 21
29167: PUSH
29168: LD_VAR 0 17
29172: ST_TO_ADDR
// if buildings then
29173: LD_VAR 0 18
29177: IFFALSE 30499
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29179: LD_ADDR_VAR 0 19
29183: PUSH
29184: LD_VAR 0 18
29188: PPUSH
29189: LD_INT 2
29191: PUSH
29192: LD_INT 30
29194: PUSH
29195: LD_INT 29
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 30
29204: PUSH
29205: LD_INT 30
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: PPUSH
29217: CALL_OW 72
29221: ST_TO_ADDR
// if tmp then
29222: LD_VAR 0 19
29226: IFFALSE 29274
// for i in tmp do
29228: LD_ADDR_VAR 0 8
29232: PUSH
29233: LD_VAR 0 19
29237: PUSH
29238: FOR_IN
29239: IFFALSE 29272
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29241: LD_VAR 0 8
29245: PPUSH
29246: CALL_OW 250
29250: PPUSH
29251: LD_VAR 0 8
29255: PPUSH
29256: CALL_OW 251
29260: PPUSH
29261: LD_VAR 0 16
29265: PPUSH
29266: CALL_OW 441
29270: GO 29238
29272: POP
29273: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29274: LD_VAR 0 18
29278: PPUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 30
29284: PUSH
29285: LD_INT 32
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 30
29294: PUSH
29295: LD_INT 33
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: PPUSH
29307: CALL_OW 72
29311: IFFALSE 29399
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29313: LD_ADDR_VAR 0 8
29317: PUSH
29318: LD_VAR 0 18
29322: PPUSH
29323: LD_INT 2
29325: PUSH
29326: LD_INT 30
29328: PUSH
29329: LD_INT 32
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 30
29338: PUSH
29339: LD_INT 33
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: PPUSH
29351: CALL_OW 72
29355: PUSH
29356: FOR_IN
29357: IFFALSE 29397
// begin if not GetBWeapon ( i ) then
29359: LD_VAR 0 8
29363: PPUSH
29364: CALL_OW 269
29368: NOT
29369: IFFALSE 29395
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29371: LD_VAR 0 8
29375: PPUSH
29376: LD_VAR 0 8
29380: PPUSH
29381: LD_VAR 0 2
29385: PPUSH
29386: CALL 30645 0 2
29390: PPUSH
29391: CALL_OW 431
// end ;
29395: GO 29356
29397: POP
29398: POP
// end ; for i = 1 to personel do
29399: LD_ADDR_VAR 0 8
29403: PUSH
29404: DOUBLE
29405: LD_INT 1
29407: DEC
29408: ST_TO_ADDR
29409: LD_VAR 0 6
29413: PUSH
29414: FOR_TO
29415: IFFALSE 30479
// begin if i > 4 then
29417: LD_VAR 0 8
29421: PUSH
29422: LD_INT 4
29424: GREATER
29425: IFFALSE 29429
// break ;
29427: GO 30479
// case i of 1 :
29429: LD_VAR 0 8
29433: PUSH
29434: LD_INT 1
29436: DOUBLE
29437: EQUAL
29438: IFTRUE 29442
29440: GO 29522
29442: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29443: LD_ADDR_VAR 0 12
29447: PUSH
29448: LD_VAR 0 18
29452: PPUSH
29453: LD_INT 22
29455: PUSH
29456: LD_VAR 0 16
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 58
29467: PUSH
29468: EMPTY
29469: LIST
29470: PUSH
29471: LD_INT 2
29473: PUSH
29474: LD_INT 30
29476: PUSH
29477: LD_INT 32
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 30
29486: PUSH
29487: LD_INT 4
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 30
29496: PUSH
29497: LD_INT 5
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: PPUSH
29515: CALL_OW 72
29519: ST_TO_ADDR
29520: GO 29744
29522: LD_INT 2
29524: DOUBLE
29525: EQUAL
29526: IFTRUE 29530
29528: GO 29592
29530: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29531: LD_ADDR_VAR 0 12
29535: PUSH
29536: LD_VAR 0 18
29540: PPUSH
29541: LD_INT 22
29543: PUSH
29544: LD_VAR 0 16
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: LD_INT 30
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 30
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PPUSH
29585: CALL_OW 72
29589: ST_TO_ADDR
29590: GO 29744
29592: LD_INT 3
29594: DOUBLE
29595: EQUAL
29596: IFTRUE 29600
29598: GO 29662
29600: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29601: LD_ADDR_VAR 0 12
29605: PUSH
29606: LD_VAR 0 18
29610: PPUSH
29611: LD_INT 22
29613: PUSH
29614: LD_VAR 0 16
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 30
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 30
29638: PUSH
29639: LD_INT 3
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PPUSH
29655: CALL_OW 72
29659: ST_TO_ADDR
29660: GO 29744
29662: LD_INT 4
29664: DOUBLE
29665: EQUAL
29666: IFTRUE 29670
29668: GO 29743
29670: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29671: LD_ADDR_VAR 0 12
29675: PUSH
29676: LD_VAR 0 18
29680: PPUSH
29681: LD_INT 22
29683: PUSH
29684: LD_VAR 0 16
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: LD_INT 30
29698: PUSH
29699: LD_INT 6
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 30
29708: PUSH
29709: LD_INT 7
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 30
29718: PUSH
29719: LD_INT 8
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PPUSH
29736: CALL_OW 72
29740: ST_TO_ADDR
29741: GO 29744
29743: POP
// if i = 1 then
29744: LD_VAR 0 8
29748: PUSH
29749: LD_INT 1
29751: EQUAL
29752: IFFALSE 29863
// begin tmp := [ ] ;
29754: LD_ADDR_VAR 0 19
29758: PUSH
29759: EMPTY
29760: ST_TO_ADDR
// for j in f do
29761: LD_ADDR_VAR 0 9
29765: PUSH
29766: LD_VAR 0 12
29770: PUSH
29771: FOR_IN
29772: IFFALSE 29845
// if GetBType ( j ) = b_bunker then
29774: LD_VAR 0 9
29778: PPUSH
29779: CALL_OW 266
29783: PUSH
29784: LD_INT 32
29786: EQUAL
29787: IFFALSE 29814
// tmp := Insert ( tmp , 1 , j ) else
29789: LD_ADDR_VAR 0 19
29793: PUSH
29794: LD_VAR 0 19
29798: PPUSH
29799: LD_INT 1
29801: PPUSH
29802: LD_VAR 0 9
29806: PPUSH
29807: CALL_OW 2
29811: ST_TO_ADDR
29812: GO 29843
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29814: LD_ADDR_VAR 0 19
29818: PUSH
29819: LD_VAR 0 19
29823: PPUSH
29824: LD_VAR 0 19
29828: PUSH
29829: LD_INT 1
29831: PLUS
29832: PPUSH
29833: LD_VAR 0 9
29837: PPUSH
29838: CALL_OW 2
29842: ST_TO_ADDR
29843: GO 29771
29845: POP
29846: POP
// if tmp then
29847: LD_VAR 0 19
29851: IFFALSE 29863
// f := tmp ;
29853: LD_ADDR_VAR 0 12
29857: PUSH
29858: LD_VAR 0 19
29862: ST_TO_ADDR
// end ; x := personel [ i ] ;
29863: LD_ADDR_VAR 0 13
29867: PUSH
29868: LD_VAR 0 6
29872: PUSH
29873: LD_VAR 0 8
29877: ARRAY
29878: ST_TO_ADDR
// if x = - 1 then
29879: LD_VAR 0 13
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: EQUAL
29888: IFFALSE 30097
// begin for j in f do
29890: LD_ADDR_VAR 0 9
29894: PUSH
29895: LD_VAR 0 12
29899: PUSH
29900: FOR_IN
29901: IFFALSE 30093
// repeat InitHc ;
29903: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29907: LD_VAR 0 9
29911: PPUSH
29912: CALL_OW 266
29916: PUSH
29917: LD_INT 5
29919: EQUAL
29920: IFFALSE 29990
// begin if UnitsInside ( j ) < 3 then
29922: LD_VAR 0 9
29926: PPUSH
29927: CALL_OW 313
29931: PUSH
29932: LD_INT 3
29934: LESS
29935: IFFALSE 29971
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29937: LD_INT 0
29939: PPUSH
29940: LD_INT 5
29942: PUSH
29943: LD_INT 8
29945: PUSH
29946: LD_INT 9
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: PUSH
29954: LD_VAR 0 17
29958: ARRAY
29959: PPUSH
29960: LD_VAR 0 4
29964: PPUSH
29965: CALL_OW 380
29969: GO 29988
// PrepareHuman ( false , i , skill ) ;
29971: LD_INT 0
29973: PPUSH
29974: LD_VAR 0 8
29978: PPUSH
29979: LD_VAR 0 4
29983: PPUSH
29984: CALL_OW 380
// end else
29988: GO 30007
// PrepareHuman ( false , i , skill ) ;
29990: LD_INT 0
29992: PPUSH
29993: LD_VAR 0 8
29997: PPUSH
29998: LD_VAR 0 4
30002: PPUSH
30003: CALL_OW 380
// un := CreateHuman ;
30007: LD_ADDR_VAR 0 14
30011: PUSH
30012: CALL_OW 44
30016: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30017: LD_ADDR_VAR 0 7
30021: PUSH
30022: LD_VAR 0 7
30026: PPUSH
30027: LD_INT 1
30029: PPUSH
30030: LD_VAR 0 14
30034: PPUSH
30035: CALL_OW 2
30039: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30040: LD_VAR 0 14
30044: PPUSH
30045: LD_VAR 0 9
30049: PPUSH
30050: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30054: LD_VAR 0 9
30058: PPUSH
30059: CALL_OW 313
30063: PUSH
30064: LD_INT 6
30066: EQUAL
30067: PUSH
30068: LD_VAR 0 9
30072: PPUSH
30073: CALL_OW 266
30077: PUSH
30078: LD_INT 32
30080: PUSH
30081: LD_INT 31
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: IN
30088: OR
30089: IFFALSE 29903
30091: GO 29900
30093: POP
30094: POP
// end else
30095: GO 30477
// for j = 1 to x do
30097: LD_ADDR_VAR 0 9
30101: PUSH
30102: DOUBLE
30103: LD_INT 1
30105: DEC
30106: ST_TO_ADDR
30107: LD_VAR 0 13
30111: PUSH
30112: FOR_TO
30113: IFFALSE 30475
// begin InitHc ;
30115: CALL_OW 19
// if not f then
30119: LD_VAR 0 12
30123: NOT
30124: IFFALSE 30213
// begin PrepareHuman ( false , i , skill ) ;
30126: LD_INT 0
30128: PPUSH
30129: LD_VAR 0 8
30133: PPUSH
30134: LD_VAR 0 4
30138: PPUSH
30139: CALL_OW 380
// un := CreateHuman ;
30143: LD_ADDR_VAR 0 14
30147: PUSH
30148: CALL_OW 44
30152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30153: LD_ADDR_VAR 0 7
30157: PUSH
30158: LD_VAR 0 7
30162: PPUSH
30163: LD_INT 1
30165: PPUSH
30166: LD_VAR 0 14
30170: PPUSH
30171: CALL_OW 2
30175: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30176: LD_VAR 0 14
30180: PPUSH
30181: LD_VAR 0 1
30185: PPUSH
30186: CALL_OW 250
30190: PPUSH
30191: LD_VAR 0 1
30195: PPUSH
30196: CALL_OW 251
30200: PPUSH
30201: LD_INT 10
30203: PPUSH
30204: LD_INT 0
30206: PPUSH
30207: CALL_OW 50
// continue ;
30211: GO 30112
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30213: LD_VAR 0 12
30217: PUSH
30218: LD_INT 1
30220: ARRAY
30221: PPUSH
30222: CALL_OW 313
30226: PUSH
30227: LD_VAR 0 12
30231: PUSH
30232: LD_INT 1
30234: ARRAY
30235: PPUSH
30236: CALL_OW 266
30240: PUSH
30241: LD_INT 32
30243: PUSH
30244: LD_INT 31
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: IN
30251: AND
30252: PUSH
30253: LD_VAR 0 12
30257: PUSH
30258: LD_INT 1
30260: ARRAY
30261: PPUSH
30262: CALL_OW 313
30266: PUSH
30267: LD_INT 6
30269: EQUAL
30270: OR
30271: IFFALSE 30291
// f := Delete ( f , 1 ) ;
30273: LD_ADDR_VAR 0 12
30277: PUSH
30278: LD_VAR 0 12
30282: PPUSH
30283: LD_INT 1
30285: PPUSH
30286: CALL_OW 3
30290: ST_TO_ADDR
// if not f then
30291: LD_VAR 0 12
30295: NOT
30296: IFFALSE 30314
// begin x := x + 2 ;
30298: LD_ADDR_VAR 0 13
30302: PUSH
30303: LD_VAR 0 13
30307: PUSH
30308: LD_INT 2
30310: PLUS
30311: ST_TO_ADDR
// continue ;
30312: GO 30112
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30314: LD_VAR 0 12
30318: PUSH
30319: LD_INT 1
30321: ARRAY
30322: PPUSH
30323: CALL_OW 266
30327: PUSH
30328: LD_INT 5
30330: EQUAL
30331: IFFALSE 30405
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30333: LD_VAR 0 12
30337: PUSH
30338: LD_INT 1
30340: ARRAY
30341: PPUSH
30342: CALL_OW 313
30346: PUSH
30347: LD_INT 3
30349: LESS
30350: IFFALSE 30386
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30352: LD_INT 0
30354: PPUSH
30355: LD_INT 5
30357: PUSH
30358: LD_INT 8
30360: PUSH
30361: LD_INT 9
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: PUSH
30369: LD_VAR 0 17
30373: ARRAY
30374: PPUSH
30375: LD_VAR 0 4
30379: PPUSH
30380: CALL_OW 380
30384: GO 30403
// PrepareHuman ( false , i , skill ) ;
30386: LD_INT 0
30388: PPUSH
30389: LD_VAR 0 8
30393: PPUSH
30394: LD_VAR 0 4
30398: PPUSH
30399: CALL_OW 380
// end else
30403: GO 30422
// PrepareHuman ( false , i , skill ) ;
30405: LD_INT 0
30407: PPUSH
30408: LD_VAR 0 8
30412: PPUSH
30413: LD_VAR 0 4
30417: PPUSH
30418: CALL_OW 380
// un := CreateHuman ;
30422: LD_ADDR_VAR 0 14
30426: PUSH
30427: CALL_OW 44
30431: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30432: LD_ADDR_VAR 0 7
30436: PUSH
30437: LD_VAR 0 7
30441: PPUSH
30442: LD_INT 1
30444: PPUSH
30445: LD_VAR 0 14
30449: PPUSH
30450: CALL_OW 2
30454: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30455: LD_VAR 0 14
30459: PPUSH
30460: LD_VAR 0 12
30464: PUSH
30465: LD_INT 1
30467: ARRAY
30468: PPUSH
30469: CALL_OW 52
// end ;
30473: GO 30112
30475: POP
30476: POP
// end ;
30477: GO 29414
30479: POP
30480: POP
// result := result ^ buildings ;
30481: LD_ADDR_VAR 0 7
30485: PUSH
30486: LD_VAR 0 7
30490: PUSH
30491: LD_VAR 0 18
30495: ADD
30496: ST_TO_ADDR
// end else
30497: GO 30640
// begin for i = 1 to personel do
30499: LD_ADDR_VAR 0 8
30503: PUSH
30504: DOUBLE
30505: LD_INT 1
30507: DEC
30508: ST_TO_ADDR
30509: LD_VAR 0 6
30513: PUSH
30514: FOR_TO
30515: IFFALSE 30638
// begin if i > 4 then
30517: LD_VAR 0 8
30521: PUSH
30522: LD_INT 4
30524: GREATER
30525: IFFALSE 30529
// break ;
30527: GO 30638
// x := personel [ i ] ;
30529: LD_ADDR_VAR 0 13
30533: PUSH
30534: LD_VAR 0 6
30538: PUSH
30539: LD_VAR 0 8
30543: ARRAY
30544: ST_TO_ADDR
// if x = - 1 then
30545: LD_VAR 0 13
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: EQUAL
30554: IFFALSE 30558
// continue ;
30556: GO 30514
// PrepareHuman ( false , i , skill ) ;
30558: LD_INT 0
30560: PPUSH
30561: LD_VAR 0 8
30565: PPUSH
30566: LD_VAR 0 4
30570: PPUSH
30571: CALL_OW 380
// un := CreateHuman ;
30575: LD_ADDR_VAR 0 14
30579: PUSH
30580: CALL_OW 44
30584: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30585: LD_VAR 0 14
30589: PPUSH
30590: LD_VAR 0 1
30594: PPUSH
30595: CALL_OW 250
30599: PPUSH
30600: LD_VAR 0 1
30604: PPUSH
30605: CALL_OW 251
30609: PPUSH
30610: LD_INT 10
30612: PPUSH
30613: LD_INT 0
30615: PPUSH
30616: CALL_OW 50
// result := result ^ un ;
30620: LD_ADDR_VAR 0 7
30624: PUSH
30625: LD_VAR 0 7
30629: PUSH
30630: LD_VAR 0 14
30634: ADD
30635: ST_TO_ADDR
// end ;
30636: GO 30514
30638: POP
30639: POP
// end ; end ;
30640: LD_VAR 0 7
30644: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30645: LD_INT 0
30647: PPUSH
30648: PPUSH
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
30660: PPUSH
30661: PPUSH
30662: PPUSH
// result := false ;
30663: LD_ADDR_VAR 0 3
30667: PUSH
30668: LD_INT 0
30670: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30671: LD_VAR 0 1
30675: NOT
30676: PUSH
30677: LD_VAR 0 1
30681: PPUSH
30682: CALL_OW 266
30686: PUSH
30687: LD_INT 32
30689: PUSH
30690: LD_INT 33
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: IN
30697: NOT
30698: OR
30699: IFFALSE 30703
// exit ;
30701: GO 31812
// nat := GetNation ( tower ) ;
30703: LD_ADDR_VAR 0 12
30707: PUSH
30708: LD_VAR 0 1
30712: PPUSH
30713: CALL_OW 248
30717: ST_TO_ADDR
// side := GetSide ( tower ) ;
30718: LD_ADDR_VAR 0 16
30722: PUSH
30723: LD_VAR 0 1
30727: PPUSH
30728: CALL_OW 255
30732: ST_TO_ADDR
// x := GetX ( tower ) ;
30733: LD_ADDR_VAR 0 10
30737: PUSH
30738: LD_VAR 0 1
30742: PPUSH
30743: CALL_OW 250
30747: ST_TO_ADDR
// y := GetY ( tower ) ;
30748: LD_ADDR_VAR 0 11
30752: PUSH
30753: LD_VAR 0 1
30757: PPUSH
30758: CALL_OW 251
30762: ST_TO_ADDR
// if not x or not y then
30763: LD_VAR 0 10
30767: NOT
30768: PUSH
30769: LD_VAR 0 11
30773: NOT
30774: OR
30775: IFFALSE 30779
// exit ;
30777: GO 31812
// weapon := 0 ;
30779: LD_ADDR_VAR 0 18
30783: PUSH
30784: LD_INT 0
30786: ST_TO_ADDR
// fac_list := [ ] ;
30787: LD_ADDR_VAR 0 17
30791: PUSH
30792: EMPTY
30793: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30794: LD_ADDR_VAR 0 6
30798: PUSH
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 274
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_INT 0
30816: PPUSH
30817: CALL 28383 0 3
30821: PPUSH
30822: LD_INT 30
30824: PUSH
30825: LD_INT 3
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PPUSH
30832: CALL_OW 72
30836: ST_TO_ADDR
// if not factories then
30837: LD_VAR 0 6
30841: NOT
30842: IFFALSE 30846
// exit ;
30844: GO 31812
// for i in factories do
30846: LD_ADDR_VAR 0 8
30850: PUSH
30851: LD_VAR 0 6
30855: PUSH
30856: FOR_IN
30857: IFFALSE 30882
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30859: LD_ADDR_VAR 0 17
30863: PUSH
30864: LD_VAR 0 17
30868: PUSH
30869: LD_VAR 0 8
30873: PPUSH
30874: CALL_OW 478
30878: UNION
30879: ST_TO_ADDR
30880: GO 30856
30882: POP
30883: POP
// if not fac_list then
30884: LD_VAR 0 17
30888: NOT
30889: IFFALSE 30893
// exit ;
30891: GO 31812
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30893: LD_ADDR_VAR 0 5
30897: PUSH
30898: LD_INT 4
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: LD_INT 9
30906: PUSH
30907: LD_INT 10
30909: PUSH
30910: LD_INT 6
30912: PUSH
30913: LD_INT 7
30915: PUSH
30916: LD_INT 11
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 27
30930: PUSH
30931: LD_INT 28
30933: PUSH
30934: LD_INT 26
30936: PUSH
30937: LD_INT 30
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 43
30948: PUSH
30949: LD_INT 44
30951: PUSH
30952: LD_INT 46
30954: PUSH
30955: LD_INT 45
30957: PUSH
30958: LD_INT 47
30960: PUSH
30961: LD_INT 49
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: PUSH
30977: LD_VAR 0 12
30981: ARRAY
30982: ST_TO_ADDR
// list := list isect fac_list ;
30983: LD_ADDR_VAR 0 5
30987: PUSH
30988: LD_VAR 0 5
30992: PUSH
30993: LD_VAR 0 17
30997: ISECT
30998: ST_TO_ADDR
// if not list then
30999: LD_VAR 0 5
31003: NOT
31004: IFFALSE 31008
// exit ;
31006: GO 31812
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31008: LD_VAR 0 12
31012: PUSH
31013: LD_INT 3
31015: EQUAL
31016: PUSH
31017: LD_INT 49
31019: PUSH
31020: LD_VAR 0 5
31024: IN
31025: AND
31026: PUSH
31027: LD_INT 31
31029: PPUSH
31030: LD_VAR 0 16
31034: PPUSH
31035: CALL_OW 321
31039: PUSH
31040: LD_INT 2
31042: EQUAL
31043: AND
31044: IFFALSE 31104
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31046: LD_INT 22
31048: PUSH
31049: LD_VAR 0 16
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 35
31060: PUSH
31061: LD_INT 49
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 91
31070: PUSH
31071: LD_VAR 0 1
31075: PUSH
31076: LD_INT 10
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: PPUSH
31089: CALL_OW 69
31093: NOT
31094: IFFALSE 31104
// weapon := ru_time_lapser ;
31096: LD_ADDR_VAR 0 18
31100: PUSH
31101: LD_INT 49
31103: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31104: LD_VAR 0 12
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: IN
31119: PUSH
31120: LD_INT 11
31122: PUSH
31123: LD_VAR 0 5
31127: IN
31128: PUSH
31129: LD_INT 30
31131: PUSH
31132: LD_VAR 0 5
31136: IN
31137: OR
31138: AND
31139: PUSH
31140: LD_INT 6
31142: PPUSH
31143: LD_VAR 0 16
31147: PPUSH
31148: CALL_OW 321
31152: PUSH
31153: LD_INT 2
31155: EQUAL
31156: AND
31157: IFFALSE 31322
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31159: LD_INT 22
31161: PUSH
31162: LD_VAR 0 16
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 35
31176: PUSH
31177: LD_INT 11
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 35
31186: PUSH
31187: LD_INT 30
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 91
31201: PUSH
31202: LD_VAR 0 1
31206: PUSH
31207: LD_INT 18
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: PPUSH
31220: CALL_OW 69
31224: NOT
31225: PUSH
31226: LD_INT 22
31228: PUSH
31229: LD_VAR 0 16
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: LD_INT 30
31243: PUSH
31244: LD_INT 32
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 30
31253: PUSH
31254: LD_INT 33
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 91
31268: PUSH
31269: LD_VAR 0 1
31273: PUSH
31274: LD_INT 12
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: PPUSH
31290: CALL_OW 69
31294: PUSH
31295: LD_INT 2
31297: GREATER
31298: AND
31299: IFFALSE 31322
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31301: LD_ADDR_VAR 0 18
31305: PUSH
31306: LD_INT 11
31308: PUSH
31309: LD_INT 30
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_VAR 0 12
31320: ARRAY
31321: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31322: LD_VAR 0 18
31326: NOT
31327: PUSH
31328: LD_INT 40
31330: PPUSH
31331: LD_VAR 0 16
31335: PPUSH
31336: CALL_OW 321
31340: PUSH
31341: LD_INT 2
31343: EQUAL
31344: AND
31345: PUSH
31346: LD_INT 7
31348: PUSH
31349: LD_VAR 0 5
31353: IN
31354: PUSH
31355: LD_INT 28
31357: PUSH
31358: LD_VAR 0 5
31362: IN
31363: OR
31364: PUSH
31365: LD_INT 45
31367: PUSH
31368: LD_VAR 0 5
31372: IN
31373: OR
31374: AND
31375: IFFALSE 31629
// begin hex := GetHexInfo ( x , y ) ;
31377: LD_ADDR_VAR 0 4
31381: PUSH
31382: LD_VAR 0 10
31386: PPUSH
31387: LD_VAR 0 11
31391: PPUSH
31392: CALL_OW 546
31396: ST_TO_ADDR
// if hex [ 1 ] then
31397: LD_VAR 0 4
31401: PUSH
31402: LD_INT 1
31404: ARRAY
31405: IFFALSE 31409
// exit ;
31407: GO 31812
// height := hex [ 2 ] ;
31409: LD_ADDR_VAR 0 15
31413: PUSH
31414: LD_VAR 0 4
31418: PUSH
31419: LD_INT 2
31421: ARRAY
31422: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31423: LD_ADDR_VAR 0 14
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: LD_INT 5
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: ST_TO_ADDR
// for i in tmp do
31446: LD_ADDR_VAR 0 8
31450: PUSH
31451: LD_VAR 0 14
31455: PUSH
31456: FOR_IN
31457: IFFALSE 31627
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31459: LD_ADDR_VAR 0 9
31463: PUSH
31464: LD_VAR 0 10
31468: PPUSH
31469: LD_VAR 0 8
31473: PPUSH
31474: LD_INT 5
31476: PPUSH
31477: CALL_OW 272
31481: PUSH
31482: LD_VAR 0 11
31486: PPUSH
31487: LD_VAR 0 8
31491: PPUSH
31492: LD_INT 5
31494: PPUSH
31495: CALL_OW 273
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31504: LD_VAR 0 9
31508: PUSH
31509: LD_INT 1
31511: ARRAY
31512: PPUSH
31513: LD_VAR 0 9
31517: PUSH
31518: LD_INT 2
31520: ARRAY
31521: PPUSH
31522: CALL_OW 488
31526: IFFALSE 31625
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31528: LD_ADDR_VAR 0 4
31532: PUSH
31533: LD_VAR 0 9
31537: PUSH
31538: LD_INT 1
31540: ARRAY
31541: PPUSH
31542: LD_VAR 0 9
31546: PUSH
31547: LD_INT 2
31549: ARRAY
31550: PPUSH
31551: CALL_OW 546
31555: ST_TO_ADDR
// if hex [ 1 ] then
31556: LD_VAR 0 4
31560: PUSH
31561: LD_INT 1
31563: ARRAY
31564: IFFALSE 31568
// continue ;
31566: GO 31456
// h := hex [ 2 ] ;
31568: LD_ADDR_VAR 0 13
31572: PUSH
31573: LD_VAR 0 4
31577: PUSH
31578: LD_INT 2
31580: ARRAY
31581: ST_TO_ADDR
// if h + 7 < height then
31582: LD_VAR 0 13
31586: PUSH
31587: LD_INT 7
31589: PLUS
31590: PUSH
31591: LD_VAR 0 15
31595: LESS
31596: IFFALSE 31625
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31598: LD_ADDR_VAR 0 18
31602: PUSH
31603: LD_INT 7
31605: PUSH
31606: LD_INT 28
31608: PUSH
31609: LD_INT 45
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: PUSH
31617: LD_VAR 0 12
31621: ARRAY
31622: ST_TO_ADDR
// break ;
31623: GO 31627
// end ; end ; end ;
31625: GO 31456
31627: POP
31628: POP
// end ; if not weapon then
31629: LD_VAR 0 18
31633: NOT
31634: IFFALSE 31694
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31636: LD_ADDR_VAR 0 5
31640: PUSH
31641: LD_VAR 0 5
31645: PUSH
31646: LD_INT 11
31648: PUSH
31649: LD_INT 30
31651: PUSH
31652: LD_INT 49
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: DIFF
31660: ST_TO_ADDR
// if not list then
31661: LD_VAR 0 5
31665: NOT
31666: IFFALSE 31670
// exit ;
31668: GO 31812
// weapon := list [ rand ( 1 , list ) ] ;
31670: LD_ADDR_VAR 0 18
31674: PUSH
31675: LD_VAR 0 5
31679: PUSH
31680: LD_INT 1
31682: PPUSH
31683: LD_VAR 0 5
31687: PPUSH
31688: CALL_OW 12
31692: ARRAY
31693: ST_TO_ADDR
// end ; if weapon then
31694: LD_VAR 0 18
31698: IFFALSE 31812
// begin tmp := CostOfWeapon ( weapon ) ;
31700: LD_ADDR_VAR 0 14
31704: PUSH
31705: LD_VAR 0 18
31709: PPUSH
31710: CALL_OW 451
31714: ST_TO_ADDR
// j := GetBase ( tower ) ;
31715: LD_ADDR_VAR 0 9
31719: PUSH
31720: LD_VAR 0 1
31724: PPUSH
31725: CALL_OW 274
31729: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31730: LD_VAR 0 9
31734: PPUSH
31735: LD_INT 1
31737: PPUSH
31738: CALL_OW 275
31742: PUSH
31743: LD_VAR 0 14
31747: PUSH
31748: LD_INT 1
31750: ARRAY
31751: GREATEREQUAL
31752: PUSH
31753: LD_VAR 0 9
31757: PPUSH
31758: LD_INT 2
31760: PPUSH
31761: CALL_OW 275
31765: PUSH
31766: LD_VAR 0 14
31770: PUSH
31771: LD_INT 2
31773: ARRAY
31774: GREATEREQUAL
31775: AND
31776: PUSH
31777: LD_VAR 0 9
31781: PPUSH
31782: LD_INT 3
31784: PPUSH
31785: CALL_OW 275
31789: PUSH
31790: LD_VAR 0 14
31794: PUSH
31795: LD_INT 3
31797: ARRAY
31798: GREATEREQUAL
31799: AND
31800: IFFALSE 31812
// result := weapon ;
31802: LD_ADDR_VAR 0 3
31806: PUSH
31807: LD_VAR 0 18
31811: ST_TO_ADDR
// end ; end ;
31812: LD_VAR 0 3
31816: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31817: LD_INT 0
31819: PPUSH
31820: PPUSH
// result := true ;
31821: LD_ADDR_VAR 0 3
31825: PUSH
31826: LD_INT 1
31828: ST_TO_ADDR
// if array1 = array2 then
31829: LD_VAR 0 1
31833: PUSH
31834: LD_VAR 0 2
31838: EQUAL
31839: IFFALSE 31899
// begin for i = 1 to array1 do
31841: LD_ADDR_VAR 0 4
31845: PUSH
31846: DOUBLE
31847: LD_INT 1
31849: DEC
31850: ST_TO_ADDR
31851: LD_VAR 0 1
31855: PUSH
31856: FOR_TO
31857: IFFALSE 31895
// if array1 [ i ] <> array2 [ i ] then
31859: LD_VAR 0 1
31863: PUSH
31864: LD_VAR 0 4
31868: ARRAY
31869: PUSH
31870: LD_VAR 0 2
31874: PUSH
31875: LD_VAR 0 4
31879: ARRAY
31880: NONEQUAL
31881: IFFALSE 31893
// begin result := false ;
31883: LD_ADDR_VAR 0 3
31887: PUSH
31888: LD_INT 0
31890: ST_TO_ADDR
// break ;
31891: GO 31895
// end ;
31893: GO 31856
31895: POP
31896: POP
// end else
31897: GO 31907
// result := false ;
31899: LD_ADDR_VAR 0 3
31903: PUSH
31904: LD_INT 0
31906: ST_TO_ADDR
// end ;
31907: LD_VAR 0 3
31911: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31912: LD_INT 0
31914: PPUSH
31915: PPUSH
// if not array1 or not array2 then
31916: LD_VAR 0 1
31920: NOT
31921: PUSH
31922: LD_VAR 0 2
31926: NOT
31927: OR
31928: IFFALSE 31932
// exit ;
31930: GO 31996
// result := true ;
31932: LD_ADDR_VAR 0 3
31936: PUSH
31937: LD_INT 1
31939: ST_TO_ADDR
// for i = 1 to array1 do
31940: LD_ADDR_VAR 0 4
31944: PUSH
31945: DOUBLE
31946: LD_INT 1
31948: DEC
31949: ST_TO_ADDR
31950: LD_VAR 0 1
31954: PUSH
31955: FOR_TO
31956: IFFALSE 31994
// if array1 [ i ] <> array2 [ i ] then
31958: LD_VAR 0 1
31962: PUSH
31963: LD_VAR 0 4
31967: ARRAY
31968: PUSH
31969: LD_VAR 0 2
31973: PUSH
31974: LD_VAR 0 4
31978: ARRAY
31979: NONEQUAL
31980: IFFALSE 31992
// begin result := false ;
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 0
31989: ST_TO_ADDR
// break ;
31990: GO 31994
// end ;
31992: GO 31955
31994: POP
31995: POP
// end ;
31996: LD_VAR 0 3
32000: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32001: LD_INT 0
32003: PPUSH
32004: PPUSH
32005: PPUSH
// pom := GetBase ( fac ) ;
32006: LD_ADDR_VAR 0 5
32010: PUSH
32011: LD_VAR 0 1
32015: PPUSH
32016: CALL_OW 274
32020: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32021: LD_ADDR_VAR 0 4
32025: PUSH
32026: LD_VAR 0 2
32030: PUSH
32031: LD_INT 1
32033: ARRAY
32034: PPUSH
32035: LD_VAR 0 2
32039: PUSH
32040: LD_INT 2
32042: ARRAY
32043: PPUSH
32044: LD_VAR 0 2
32048: PUSH
32049: LD_INT 3
32051: ARRAY
32052: PPUSH
32053: LD_VAR 0 2
32057: PUSH
32058: LD_INT 4
32060: ARRAY
32061: PPUSH
32062: CALL_OW 449
32066: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32067: LD_ADDR_VAR 0 3
32071: PUSH
32072: LD_VAR 0 5
32076: PPUSH
32077: LD_INT 1
32079: PPUSH
32080: CALL_OW 275
32084: PUSH
32085: LD_VAR 0 4
32089: PUSH
32090: LD_INT 1
32092: ARRAY
32093: GREATEREQUAL
32094: PUSH
32095: LD_VAR 0 5
32099: PPUSH
32100: LD_INT 2
32102: PPUSH
32103: CALL_OW 275
32107: PUSH
32108: LD_VAR 0 4
32112: PUSH
32113: LD_INT 2
32115: ARRAY
32116: GREATEREQUAL
32117: AND
32118: PUSH
32119: LD_VAR 0 5
32123: PPUSH
32124: LD_INT 3
32126: PPUSH
32127: CALL_OW 275
32131: PUSH
32132: LD_VAR 0 4
32136: PUSH
32137: LD_INT 3
32139: ARRAY
32140: GREATEREQUAL
32141: AND
32142: ST_TO_ADDR
// end ;
32143: LD_VAR 0 3
32147: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32148: LD_INT 0
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
// pom := GetBase ( building ) ;
32154: LD_ADDR_VAR 0 3
32158: PUSH
32159: LD_VAR 0 1
32163: PPUSH
32164: CALL_OW 274
32168: ST_TO_ADDR
// if not pom then
32169: LD_VAR 0 3
32173: NOT
32174: IFFALSE 32178
// exit ;
32176: GO 32348
// btype := GetBType ( building ) ;
32178: LD_ADDR_VAR 0 5
32182: PUSH
32183: LD_VAR 0 1
32187: PPUSH
32188: CALL_OW 266
32192: ST_TO_ADDR
// if btype = b_armoury then
32193: LD_VAR 0 5
32197: PUSH
32198: LD_INT 4
32200: EQUAL
32201: IFFALSE 32211
// btype := b_barracks ;
32203: LD_ADDR_VAR 0 5
32207: PUSH
32208: LD_INT 5
32210: ST_TO_ADDR
// if btype = b_depot then
32211: LD_VAR 0 5
32215: PUSH
32216: LD_INT 0
32218: EQUAL
32219: IFFALSE 32229
// btype := b_warehouse ;
32221: LD_ADDR_VAR 0 5
32225: PUSH
32226: LD_INT 1
32228: ST_TO_ADDR
// if btype = b_workshop then
32229: LD_VAR 0 5
32233: PUSH
32234: LD_INT 2
32236: EQUAL
32237: IFFALSE 32247
// btype := b_factory ;
32239: LD_ADDR_VAR 0 5
32243: PUSH
32244: LD_INT 3
32246: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32247: LD_ADDR_VAR 0 4
32251: PUSH
32252: LD_VAR 0 5
32256: PPUSH
32257: LD_VAR 0 1
32261: PPUSH
32262: CALL_OW 248
32266: PPUSH
32267: CALL_OW 450
32271: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32272: LD_ADDR_VAR 0 2
32276: PUSH
32277: LD_VAR 0 3
32281: PPUSH
32282: LD_INT 1
32284: PPUSH
32285: CALL_OW 275
32289: PUSH
32290: LD_VAR 0 4
32294: PUSH
32295: LD_INT 1
32297: ARRAY
32298: GREATEREQUAL
32299: PUSH
32300: LD_VAR 0 3
32304: PPUSH
32305: LD_INT 2
32307: PPUSH
32308: CALL_OW 275
32312: PUSH
32313: LD_VAR 0 4
32317: PUSH
32318: LD_INT 2
32320: ARRAY
32321: GREATEREQUAL
32322: AND
32323: PUSH
32324: LD_VAR 0 3
32328: PPUSH
32329: LD_INT 3
32331: PPUSH
32332: CALL_OW 275
32336: PUSH
32337: LD_VAR 0 4
32341: PUSH
32342: LD_INT 3
32344: ARRAY
32345: GREATEREQUAL
32346: AND
32347: ST_TO_ADDR
// end ;
32348: LD_VAR 0 2
32352: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32353: LD_INT 0
32355: PPUSH
32356: PPUSH
32357: PPUSH
// pom := GetBase ( building ) ;
32358: LD_ADDR_VAR 0 4
32362: PUSH
32363: LD_VAR 0 1
32367: PPUSH
32368: CALL_OW 274
32372: ST_TO_ADDR
// if not pom then
32373: LD_VAR 0 4
32377: NOT
32378: IFFALSE 32382
// exit ;
32380: GO 32483
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32382: LD_ADDR_VAR 0 5
32386: PUSH
32387: LD_VAR 0 2
32391: PPUSH
32392: LD_VAR 0 1
32396: PPUSH
32397: CALL_OW 248
32401: PPUSH
32402: CALL_OW 450
32406: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32407: LD_ADDR_VAR 0 3
32411: PUSH
32412: LD_VAR 0 4
32416: PPUSH
32417: LD_INT 1
32419: PPUSH
32420: CALL_OW 275
32424: PUSH
32425: LD_VAR 0 5
32429: PUSH
32430: LD_INT 1
32432: ARRAY
32433: GREATEREQUAL
32434: PUSH
32435: LD_VAR 0 4
32439: PPUSH
32440: LD_INT 2
32442: PPUSH
32443: CALL_OW 275
32447: PUSH
32448: LD_VAR 0 5
32452: PUSH
32453: LD_INT 2
32455: ARRAY
32456: GREATEREQUAL
32457: AND
32458: PUSH
32459: LD_VAR 0 4
32463: PPUSH
32464: LD_INT 3
32466: PPUSH
32467: CALL_OW 275
32471: PUSH
32472: LD_VAR 0 5
32476: PUSH
32477: LD_INT 3
32479: ARRAY
32480: GREATEREQUAL
32481: AND
32482: ST_TO_ADDR
// end ;
32483: LD_VAR 0 3
32487: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32488: LD_INT 0
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
32498: PPUSH
32499: PPUSH
32500: PPUSH
// result := false ;
32501: LD_ADDR_VAR 0 8
32505: PUSH
32506: LD_INT 0
32508: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32509: LD_VAR 0 5
32513: NOT
32514: PUSH
32515: LD_VAR 0 1
32519: NOT
32520: OR
32521: PUSH
32522: LD_VAR 0 2
32526: NOT
32527: OR
32528: PUSH
32529: LD_VAR 0 3
32533: NOT
32534: OR
32535: IFFALSE 32539
// exit ;
32537: GO 33353
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32539: LD_ADDR_VAR 0 14
32543: PUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: LD_VAR 0 4
32563: PPUSH
32564: LD_VAR 0 5
32568: PUSH
32569: LD_INT 1
32571: ARRAY
32572: PPUSH
32573: CALL_OW 248
32577: PPUSH
32578: LD_INT 0
32580: PPUSH
32581: CALL 34606 0 6
32585: ST_TO_ADDR
// if not hexes then
32586: LD_VAR 0 14
32590: NOT
32591: IFFALSE 32595
// exit ;
32593: GO 33353
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32595: LD_ADDR_VAR 0 17
32599: PUSH
32600: LD_VAR 0 5
32604: PPUSH
32605: LD_INT 22
32607: PUSH
32608: LD_VAR 0 13
32612: PPUSH
32613: CALL_OW 255
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 30
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 30
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PPUSH
32654: CALL_OW 72
32658: ST_TO_ADDR
// for i = 1 to hexes do
32659: LD_ADDR_VAR 0 9
32663: PUSH
32664: DOUBLE
32665: LD_INT 1
32667: DEC
32668: ST_TO_ADDR
32669: LD_VAR 0 14
32673: PUSH
32674: FOR_TO
32675: IFFALSE 33351
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32677: LD_ADDR_VAR 0 13
32681: PUSH
32682: LD_VAR 0 14
32686: PUSH
32687: LD_VAR 0 9
32691: ARRAY
32692: PUSH
32693: LD_INT 1
32695: ARRAY
32696: PPUSH
32697: LD_VAR 0 14
32701: PUSH
32702: LD_VAR 0 9
32706: ARRAY
32707: PUSH
32708: LD_INT 2
32710: ARRAY
32711: PPUSH
32712: CALL_OW 428
32716: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32717: LD_VAR 0 14
32721: PUSH
32722: LD_VAR 0 9
32726: ARRAY
32727: PUSH
32728: LD_INT 1
32730: ARRAY
32731: PPUSH
32732: LD_VAR 0 14
32736: PUSH
32737: LD_VAR 0 9
32741: ARRAY
32742: PUSH
32743: LD_INT 2
32745: ARRAY
32746: PPUSH
32747: CALL_OW 351
32751: PUSH
32752: LD_VAR 0 14
32756: PUSH
32757: LD_VAR 0 9
32761: ARRAY
32762: PUSH
32763: LD_INT 1
32765: ARRAY
32766: PPUSH
32767: LD_VAR 0 14
32771: PUSH
32772: LD_VAR 0 9
32776: ARRAY
32777: PUSH
32778: LD_INT 2
32780: ARRAY
32781: PPUSH
32782: CALL_OW 488
32786: NOT
32787: OR
32788: PUSH
32789: LD_VAR 0 13
32793: PPUSH
32794: CALL_OW 247
32798: PUSH
32799: LD_INT 3
32801: EQUAL
32802: OR
32803: IFFALSE 32809
// exit ;
32805: POP
32806: POP
32807: GO 33353
// if not tmp then
32809: LD_VAR 0 13
32813: NOT
32814: IFFALSE 32818
// continue ;
32816: GO 32674
// result := true ;
32818: LD_ADDR_VAR 0 8
32822: PUSH
32823: LD_INT 1
32825: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32826: LD_VAR 0 6
32830: PUSH
32831: LD_VAR 0 13
32835: PPUSH
32836: CALL_OW 247
32840: PUSH
32841: LD_INT 2
32843: EQUAL
32844: AND
32845: PUSH
32846: LD_VAR 0 13
32850: PPUSH
32851: CALL_OW 263
32855: PUSH
32856: LD_INT 1
32858: EQUAL
32859: AND
32860: IFFALSE 33024
// begin if IsDrivenBy ( tmp ) then
32862: LD_VAR 0 13
32866: PPUSH
32867: CALL_OW 311
32871: IFFALSE 32875
// continue ;
32873: GO 32674
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32875: LD_VAR 0 6
32879: PPUSH
32880: LD_INT 3
32882: PUSH
32883: LD_INT 60
32885: PUSH
32886: EMPTY
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: LD_INT 55
32898: PUSH
32899: EMPTY
32900: LIST
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PPUSH
32910: CALL_OW 72
32914: IFFALSE 33022
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32916: LD_ADDR_VAR 0 18
32920: PUSH
32921: LD_VAR 0 6
32925: PPUSH
32926: LD_INT 3
32928: PUSH
32929: LD_INT 60
32931: PUSH
32932: EMPTY
32933: LIST
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 3
32941: PUSH
32942: LD_INT 55
32944: PUSH
32945: EMPTY
32946: LIST
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PPUSH
32956: CALL_OW 72
32960: PUSH
32961: LD_INT 1
32963: ARRAY
32964: ST_TO_ADDR
// if IsInUnit ( driver ) then
32965: LD_VAR 0 18
32969: PPUSH
32970: CALL_OW 310
32974: IFFALSE 32985
// ComExit ( driver ) ;
32976: LD_VAR 0 18
32980: PPUSH
32981: CALL 58387 0 1
// AddComEnterUnit ( driver , tmp ) ;
32985: LD_VAR 0 18
32989: PPUSH
32990: LD_VAR 0 13
32994: PPUSH
32995: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32999: LD_VAR 0 18
33003: PPUSH
33004: LD_VAR 0 7
33008: PPUSH
33009: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33013: LD_VAR 0 18
33017: PPUSH
33018: CALL_OW 181
// end ; continue ;
33022: GO 32674
// end ; if not cleaners or not tmp in cleaners then
33024: LD_VAR 0 6
33028: NOT
33029: PUSH
33030: LD_VAR 0 13
33034: PUSH
33035: LD_VAR 0 6
33039: IN
33040: NOT
33041: OR
33042: IFFALSE 33349
// begin if dep then
33044: LD_VAR 0 17
33048: IFFALSE 33184
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33050: LD_ADDR_VAR 0 16
33054: PUSH
33055: LD_VAR 0 17
33059: PUSH
33060: LD_INT 1
33062: ARRAY
33063: PPUSH
33064: CALL_OW 250
33068: PPUSH
33069: LD_VAR 0 17
33073: PUSH
33074: LD_INT 1
33076: ARRAY
33077: PPUSH
33078: CALL_OW 254
33082: PPUSH
33083: LD_INT 5
33085: PPUSH
33086: CALL_OW 272
33090: PUSH
33091: LD_VAR 0 17
33095: PUSH
33096: LD_INT 1
33098: ARRAY
33099: PPUSH
33100: CALL_OW 251
33104: PPUSH
33105: LD_VAR 0 17
33109: PUSH
33110: LD_INT 1
33112: ARRAY
33113: PPUSH
33114: CALL_OW 254
33118: PPUSH
33119: LD_INT 5
33121: PPUSH
33122: CALL_OW 273
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33131: LD_VAR 0 16
33135: PUSH
33136: LD_INT 1
33138: ARRAY
33139: PPUSH
33140: LD_VAR 0 16
33144: PUSH
33145: LD_INT 2
33147: ARRAY
33148: PPUSH
33149: CALL_OW 488
33153: IFFALSE 33184
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33155: LD_VAR 0 13
33159: PPUSH
33160: LD_VAR 0 16
33164: PUSH
33165: LD_INT 1
33167: ARRAY
33168: PPUSH
33169: LD_VAR 0 16
33173: PUSH
33174: LD_INT 2
33176: ARRAY
33177: PPUSH
33178: CALL_OW 111
// continue ;
33182: GO 32674
// end ; end ; r := GetDir ( tmp ) ;
33184: LD_ADDR_VAR 0 15
33188: PUSH
33189: LD_VAR 0 13
33193: PPUSH
33194: CALL_OW 254
33198: ST_TO_ADDR
// if r = 5 then
33199: LD_VAR 0 15
33203: PUSH
33204: LD_INT 5
33206: EQUAL
33207: IFFALSE 33217
// r := 0 ;
33209: LD_ADDR_VAR 0 15
33213: PUSH
33214: LD_INT 0
33216: ST_TO_ADDR
// for j = r to 5 do
33217: LD_ADDR_VAR 0 10
33221: PUSH
33222: DOUBLE
33223: LD_VAR 0 15
33227: DEC
33228: ST_TO_ADDR
33229: LD_INT 5
33231: PUSH
33232: FOR_TO
33233: IFFALSE 33347
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33235: LD_ADDR_VAR 0 11
33239: PUSH
33240: LD_VAR 0 13
33244: PPUSH
33245: CALL_OW 250
33249: PPUSH
33250: LD_VAR 0 10
33254: PPUSH
33255: LD_INT 2
33257: PPUSH
33258: CALL_OW 272
33262: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33263: LD_ADDR_VAR 0 12
33267: PUSH
33268: LD_VAR 0 13
33272: PPUSH
33273: CALL_OW 251
33277: PPUSH
33278: LD_VAR 0 10
33282: PPUSH
33283: LD_INT 2
33285: PPUSH
33286: CALL_OW 273
33290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33291: LD_VAR 0 11
33295: PPUSH
33296: LD_VAR 0 12
33300: PPUSH
33301: CALL_OW 488
33305: PUSH
33306: LD_VAR 0 11
33310: PPUSH
33311: LD_VAR 0 12
33315: PPUSH
33316: CALL_OW 428
33320: NOT
33321: AND
33322: IFFALSE 33345
// begin ComMoveXY ( tmp , _x , _y ) ;
33324: LD_VAR 0 13
33328: PPUSH
33329: LD_VAR 0 11
33333: PPUSH
33334: LD_VAR 0 12
33338: PPUSH
33339: CALL_OW 111
// break ;
33343: GO 33347
// end ; end ;
33345: GO 33232
33347: POP
33348: POP
// end ; end ;
33349: GO 32674
33351: POP
33352: POP
// end ;
33353: LD_VAR 0 8
33357: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33358: LD_INT 0
33360: PPUSH
// result := true ;
33361: LD_ADDR_VAR 0 3
33365: PUSH
33366: LD_INT 1
33368: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33369: LD_VAR 0 2
33373: PUSH
33374: LD_INT 24
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33388
33380: LD_INT 33
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33388
33386: GO 33413
33388: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33389: LD_ADDR_VAR 0 3
33393: PUSH
33394: LD_INT 32
33396: PPUSH
33397: LD_VAR 0 1
33401: PPUSH
33402: CALL_OW 321
33406: PUSH
33407: LD_INT 2
33409: EQUAL
33410: ST_TO_ADDR
33411: GO 33729
33413: LD_INT 20
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33421
33419: GO 33446
33421: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: LD_INT 6
33429: PPUSH
33430: LD_VAR 0 1
33434: PPUSH
33435: CALL_OW 321
33439: PUSH
33440: LD_INT 2
33442: EQUAL
33443: ST_TO_ADDR
33444: GO 33729
33446: LD_INT 22
33448: DOUBLE
33449: EQUAL
33450: IFTRUE 33460
33452: LD_INT 36
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33460
33458: GO 33485
33460: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_INT 15
33468: PPUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 321
33478: PUSH
33479: LD_INT 2
33481: EQUAL
33482: ST_TO_ADDR
33483: GO 33729
33485: LD_INT 30
33487: DOUBLE
33488: EQUAL
33489: IFTRUE 33493
33491: GO 33518
33493: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33494: LD_ADDR_VAR 0 3
33498: PUSH
33499: LD_INT 20
33501: PPUSH
33502: LD_VAR 0 1
33506: PPUSH
33507: CALL_OW 321
33511: PUSH
33512: LD_INT 2
33514: EQUAL
33515: ST_TO_ADDR
33516: GO 33729
33518: LD_INT 28
33520: DOUBLE
33521: EQUAL
33522: IFTRUE 33532
33524: LD_INT 21
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33557
33532: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 21
33540: PPUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 321
33550: PUSH
33551: LD_INT 2
33553: EQUAL
33554: ST_TO_ADDR
33555: GO 33729
33557: LD_INT 16
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 33590
33565: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: LD_INT 84
33573: PPUSH
33574: LD_VAR 0 1
33578: PPUSH
33579: CALL_OW 321
33583: PUSH
33584: LD_INT 2
33586: EQUAL
33587: ST_TO_ADDR
33588: GO 33729
33590: LD_INT 19
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33604
33596: LD_INT 23
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33604
33602: GO 33629
33604: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33605: LD_ADDR_VAR 0 3
33609: PUSH
33610: LD_INT 83
33612: PPUSH
33613: LD_VAR 0 1
33617: PPUSH
33618: CALL_OW 321
33622: PUSH
33623: LD_INT 2
33625: EQUAL
33626: ST_TO_ADDR
33627: GO 33729
33629: LD_INT 17
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33637
33635: GO 33662
33637: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33638: LD_ADDR_VAR 0 3
33642: PUSH
33643: LD_INT 39
33645: PPUSH
33646: LD_VAR 0 1
33650: PPUSH
33651: CALL_OW 321
33655: PUSH
33656: LD_INT 2
33658: EQUAL
33659: ST_TO_ADDR
33660: GO 33729
33662: LD_INT 18
33664: DOUBLE
33665: EQUAL
33666: IFTRUE 33670
33668: GO 33695
33670: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33671: LD_ADDR_VAR 0 3
33675: PUSH
33676: LD_INT 40
33678: PPUSH
33679: LD_VAR 0 1
33683: PPUSH
33684: CALL_OW 321
33688: PUSH
33689: LD_INT 2
33691: EQUAL
33692: ST_TO_ADDR
33693: GO 33729
33695: LD_INT 27
33697: DOUBLE
33698: EQUAL
33699: IFTRUE 33703
33701: GO 33728
33703: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33704: LD_ADDR_VAR 0 3
33708: PUSH
33709: LD_INT 35
33711: PPUSH
33712: LD_VAR 0 1
33716: PPUSH
33717: CALL_OW 321
33721: PUSH
33722: LD_INT 2
33724: EQUAL
33725: ST_TO_ADDR
33726: GO 33729
33728: POP
// end ;
33729: LD_VAR 0 3
33733: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33734: LD_INT 0
33736: PPUSH
33737: PPUSH
33738: PPUSH
33739: PPUSH
33740: PPUSH
33741: PPUSH
33742: PPUSH
33743: PPUSH
33744: PPUSH
33745: PPUSH
33746: PPUSH
// result := false ;
33747: LD_ADDR_VAR 0 6
33751: PUSH
33752: LD_INT 0
33754: ST_TO_ADDR
// if btype = b_depot then
33755: LD_VAR 0 2
33759: PUSH
33760: LD_INT 0
33762: EQUAL
33763: IFFALSE 33775
// begin result := true ;
33765: LD_ADDR_VAR 0 6
33769: PUSH
33770: LD_INT 1
33772: ST_TO_ADDR
// exit ;
33773: GO 34601
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33775: LD_VAR 0 1
33779: NOT
33780: PUSH
33781: LD_VAR 0 1
33785: PPUSH
33786: CALL_OW 266
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: IN
33801: NOT
33802: OR
33803: PUSH
33804: LD_VAR 0 2
33808: NOT
33809: OR
33810: PUSH
33811: LD_VAR 0 5
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: LD_INT 4
33830: PUSH
33831: LD_INT 5
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: IN
33842: NOT
33843: OR
33844: PUSH
33845: LD_VAR 0 3
33849: PPUSH
33850: LD_VAR 0 4
33854: PPUSH
33855: CALL_OW 488
33859: NOT
33860: OR
33861: IFFALSE 33865
// exit ;
33863: GO 34601
// side := GetSide ( depot ) ;
33865: LD_ADDR_VAR 0 9
33869: PUSH
33870: LD_VAR 0 1
33874: PPUSH
33875: CALL_OW 255
33879: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33880: LD_VAR 0 9
33884: PPUSH
33885: LD_VAR 0 2
33889: PPUSH
33890: CALL 33358 0 2
33894: NOT
33895: IFFALSE 33899
// exit ;
33897: GO 34601
// pom := GetBase ( depot ) ;
33899: LD_ADDR_VAR 0 10
33903: PUSH
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 274
33913: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33914: LD_ADDR_VAR 0 11
33918: PUSH
33919: LD_VAR 0 2
33923: PPUSH
33924: LD_VAR 0 1
33928: PPUSH
33929: CALL_OW 248
33933: PPUSH
33934: CALL_OW 450
33938: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33939: LD_VAR 0 10
33943: PPUSH
33944: LD_INT 1
33946: PPUSH
33947: CALL_OW 275
33951: PUSH
33952: LD_VAR 0 11
33956: PUSH
33957: LD_INT 1
33959: ARRAY
33960: GREATEREQUAL
33961: PUSH
33962: LD_VAR 0 10
33966: PPUSH
33967: LD_INT 2
33969: PPUSH
33970: CALL_OW 275
33974: PUSH
33975: LD_VAR 0 11
33979: PUSH
33980: LD_INT 2
33982: ARRAY
33983: GREATEREQUAL
33984: AND
33985: PUSH
33986: LD_VAR 0 10
33990: PPUSH
33991: LD_INT 3
33993: PPUSH
33994: CALL_OW 275
33998: PUSH
33999: LD_VAR 0 11
34003: PUSH
34004: LD_INT 3
34006: ARRAY
34007: GREATEREQUAL
34008: AND
34009: NOT
34010: IFFALSE 34014
// exit ;
34012: GO 34601
// if GetBType ( depot ) = b_depot then
34014: LD_VAR 0 1
34018: PPUSH
34019: CALL_OW 266
34023: PUSH
34024: LD_INT 0
34026: EQUAL
34027: IFFALSE 34039
// dist := 28 else
34029: LD_ADDR_VAR 0 14
34033: PUSH
34034: LD_INT 28
34036: ST_TO_ADDR
34037: GO 34047
// dist := 36 ;
34039: LD_ADDR_VAR 0 14
34043: PUSH
34044: LD_INT 36
34046: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34047: LD_VAR 0 1
34051: PPUSH
34052: LD_VAR 0 3
34056: PPUSH
34057: LD_VAR 0 4
34061: PPUSH
34062: CALL_OW 297
34066: PUSH
34067: LD_VAR 0 14
34071: GREATER
34072: IFFALSE 34076
// exit ;
34074: GO 34601
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34076: LD_ADDR_VAR 0 12
34080: PUSH
34081: LD_VAR 0 2
34085: PPUSH
34086: LD_VAR 0 3
34090: PPUSH
34091: LD_VAR 0 4
34095: PPUSH
34096: LD_VAR 0 5
34100: PPUSH
34101: LD_VAR 0 1
34105: PPUSH
34106: CALL_OW 248
34110: PPUSH
34111: LD_INT 0
34113: PPUSH
34114: CALL 34606 0 6
34118: ST_TO_ADDR
// if not hexes then
34119: LD_VAR 0 12
34123: NOT
34124: IFFALSE 34128
// exit ;
34126: GO 34601
// hex := GetHexInfo ( x , y ) ;
34128: LD_ADDR_VAR 0 15
34132: PUSH
34133: LD_VAR 0 3
34137: PPUSH
34138: LD_VAR 0 4
34142: PPUSH
34143: CALL_OW 546
34147: ST_TO_ADDR
// if hex [ 1 ] then
34148: LD_VAR 0 15
34152: PUSH
34153: LD_INT 1
34155: ARRAY
34156: IFFALSE 34160
// exit ;
34158: GO 34601
// height := hex [ 2 ] ;
34160: LD_ADDR_VAR 0 13
34164: PUSH
34165: LD_VAR 0 15
34169: PUSH
34170: LD_INT 2
34172: ARRAY
34173: ST_TO_ADDR
// for i = 1 to hexes do
34174: LD_ADDR_VAR 0 7
34178: PUSH
34179: DOUBLE
34180: LD_INT 1
34182: DEC
34183: ST_TO_ADDR
34184: LD_VAR 0 12
34188: PUSH
34189: FOR_TO
34190: IFFALSE 34520
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34192: LD_VAR 0 12
34196: PUSH
34197: LD_VAR 0 7
34201: ARRAY
34202: PUSH
34203: LD_INT 1
34205: ARRAY
34206: PPUSH
34207: LD_VAR 0 12
34211: PUSH
34212: LD_VAR 0 7
34216: ARRAY
34217: PUSH
34218: LD_INT 2
34220: ARRAY
34221: PPUSH
34222: CALL_OW 488
34226: NOT
34227: PUSH
34228: LD_VAR 0 12
34232: PUSH
34233: LD_VAR 0 7
34237: ARRAY
34238: PUSH
34239: LD_INT 1
34241: ARRAY
34242: PPUSH
34243: LD_VAR 0 12
34247: PUSH
34248: LD_VAR 0 7
34252: ARRAY
34253: PUSH
34254: LD_INT 2
34256: ARRAY
34257: PPUSH
34258: CALL_OW 428
34262: PUSH
34263: LD_INT 0
34265: GREATER
34266: OR
34267: PUSH
34268: LD_VAR 0 12
34272: PUSH
34273: LD_VAR 0 7
34277: ARRAY
34278: PUSH
34279: LD_INT 1
34281: ARRAY
34282: PPUSH
34283: LD_VAR 0 12
34287: PUSH
34288: LD_VAR 0 7
34292: ARRAY
34293: PUSH
34294: LD_INT 2
34296: ARRAY
34297: PPUSH
34298: CALL_OW 351
34302: OR
34303: IFFALSE 34309
// exit ;
34305: POP
34306: POP
34307: GO 34601
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34309: LD_ADDR_VAR 0 8
34313: PUSH
34314: LD_VAR 0 12
34318: PUSH
34319: LD_VAR 0 7
34323: ARRAY
34324: PUSH
34325: LD_INT 1
34327: ARRAY
34328: PPUSH
34329: LD_VAR 0 12
34333: PUSH
34334: LD_VAR 0 7
34338: ARRAY
34339: PUSH
34340: LD_INT 2
34342: ARRAY
34343: PPUSH
34344: CALL_OW 546
34348: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34349: LD_VAR 0 8
34353: PUSH
34354: LD_INT 1
34356: ARRAY
34357: PUSH
34358: LD_VAR 0 8
34362: PUSH
34363: LD_INT 2
34365: ARRAY
34366: PUSH
34367: LD_VAR 0 13
34371: PUSH
34372: LD_INT 2
34374: PLUS
34375: GREATER
34376: OR
34377: PUSH
34378: LD_VAR 0 8
34382: PUSH
34383: LD_INT 2
34385: ARRAY
34386: PUSH
34387: LD_VAR 0 13
34391: PUSH
34392: LD_INT 2
34394: MINUS
34395: LESS
34396: OR
34397: PUSH
34398: LD_VAR 0 8
34402: PUSH
34403: LD_INT 3
34405: ARRAY
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: LD_INT 8
34412: PUSH
34413: LD_INT 9
34415: PUSH
34416: LD_INT 10
34418: PUSH
34419: LD_INT 11
34421: PUSH
34422: LD_INT 12
34424: PUSH
34425: LD_INT 13
34427: PUSH
34428: LD_INT 16
34430: PUSH
34431: LD_INT 17
34433: PUSH
34434: LD_INT 18
34436: PUSH
34437: LD_INT 19
34439: PUSH
34440: LD_INT 20
34442: PUSH
34443: LD_INT 21
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: IN
34461: NOT
34462: OR
34463: PUSH
34464: LD_VAR 0 8
34468: PUSH
34469: LD_INT 5
34471: ARRAY
34472: NOT
34473: OR
34474: PUSH
34475: LD_VAR 0 8
34479: PUSH
34480: LD_INT 6
34482: ARRAY
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: LD_INT 7
34492: PUSH
34493: LD_INT 9
34495: PUSH
34496: LD_INT 10
34498: PUSH
34499: LD_INT 11
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: IN
34510: NOT
34511: OR
34512: IFFALSE 34518
// exit ;
34514: POP
34515: POP
34516: GO 34601
// end ;
34518: GO 34189
34520: POP
34521: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34522: LD_VAR 0 9
34526: PPUSH
34527: LD_VAR 0 3
34531: PPUSH
34532: LD_VAR 0 4
34536: PPUSH
34537: LD_INT 20
34539: PPUSH
34540: CALL 26524 0 4
34544: PUSH
34545: LD_INT 4
34547: ARRAY
34548: IFFALSE 34552
// exit ;
34550: GO 34601
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34552: LD_VAR 0 2
34556: PUSH
34557: LD_INT 29
34559: PUSH
34560: LD_INT 30
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: IN
34567: PUSH
34568: LD_VAR 0 3
34572: PPUSH
34573: LD_VAR 0 4
34577: PPUSH
34578: LD_VAR 0 9
34582: PPUSH
34583: CALL_OW 440
34587: NOT
34588: AND
34589: IFFALSE 34593
// exit ;
34591: GO 34601
// result := true ;
34593: LD_ADDR_VAR 0 6
34597: PUSH
34598: LD_INT 1
34600: ST_TO_ADDR
// end ;
34601: LD_VAR 0 6
34605: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34606: LD_INT 0
34608: PPUSH
34609: PPUSH
34610: PPUSH
34611: PPUSH
34612: PPUSH
34613: PPUSH
34614: PPUSH
34615: PPUSH
34616: PPUSH
34617: PPUSH
34618: PPUSH
34619: PPUSH
34620: PPUSH
34621: PPUSH
34622: PPUSH
34623: PPUSH
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
34631: PPUSH
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
34647: PPUSH
34648: PPUSH
34649: PPUSH
34650: PPUSH
34651: PPUSH
34652: PPUSH
34653: PPUSH
34654: PPUSH
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
34664: PPUSH
34665: PPUSH
// result = [ ] ;
34666: LD_ADDR_VAR 0 7
34670: PUSH
34671: EMPTY
34672: ST_TO_ADDR
// temp_list = [ ] ;
34673: LD_ADDR_VAR 0 9
34677: PUSH
34678: EMPTY
34679: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34680: LD_VAR 0 4
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: LD_INT 2
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: LD_INT 4
34699: PUSH
34700: LD_INT 5
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: IN
34711: NOT
34712: PUSH
34713: LD_VAR 0 1
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: IN
34728: PUSH
34729: LD_VAR 0 5
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: IN
34748: NOT
34749: AND
34750: OR
34751: IFFALSE 34755
// exit ;
34753: GO 53146
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34755: LD_VAR 0 1
34759: PUSH
34760: LD_INT 6
34762: PUSH
34763: LD_INT 7
34765: PUSH
34766: LD_INT 8
34768: PUSH
34769: LD_INT 13
34771: PUSH
34772: LD_INT 12
34774: PUSH
34775: LD_INT 15
34777: PUSH
34778: LD_INT 11
34780: PUSH
34781: LD_INT 14
34783: PUSH
34784: LD_INT 10
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: IN
34798: IFFALSE 34808
// btype = b_lab ;
34800: LD_ADDR_VAR 0 1
34804: PUSH
34805: LD_INT 6
34807: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34808: LD_VAR 0 6
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: IN
34827: NOT
34828: PUSH
34829: LD_VAR 0 1
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: LD_INT 3
34845: PUSH
34846: LD_INT 6
34848: PUSH
34849: LD_INT 36
34851: PUSH
34852: LD_INT 4
34854: PUSH
34855: LD_INT 5
34857: PUSH
34858: LD_INT 31
34860: PUSH
34861: LD_INT 32
34863: PUSH
34864: LD_INT 33
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: IN
34880: NOT
34881: PUSH
34882: LD_VAR 0 6
34886: PUSH
34887: LD_INT 1
34889: EQUAL
34890: AND
34891: OR
34892: PUSH
34893: LD_VAR 0 1
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: IN
34908: NOT
34909: PUSH
34910: LD_VAR 0 6
34914: PUSH
34915: LD_INT 2
34917: EQUAL
34918: AND
34919: OR
34920: IFFALSE 34930
// mode = 0 ;
34922: LD_ADDR_VAR 0 6
34926: PUSH
34927: LD_INT 0
34929: ST_TO_ADDR
// case mode of 0 :
34930: LD_VAR 0 6
34934: PUSH
34935: LD_INT 0
34937: DOUBLE
34938: EQUAL
34939: IFTRUE 34943
34941: GO 46396
34943: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34944: LD_ADDR_VAR 0 11
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: LD_INT 3
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35137: LD_ADDR_VAR 0 12
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 2
35260: NEG
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 3
35294: NEG
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 3
35305: NEG
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35333: LD_ADDR_VAR 0 13
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 1
35391: NEG
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 2
35456: NEG
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 2
35468: NEG
35469: PUSH
35470: LD_INT 2
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: LD_INT 3
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 3
35492: NEG
35493: PUSH
35494: LD_INT 2
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 3
35504: NEG
35505: PUSH
35506: LD_INT 3
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35532: LD_ADDR_VAR 0 14
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 0
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 2
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 3
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 3
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35728: LD_ADDR_VAR 0 15
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: NEG
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 3
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 3
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35921: LD_ADDR_VAR 0 16
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 2
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: LD_INT 1
36048: NEG
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 2
36056: NEG
36057: PUSH
36058: LD_INT 2
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 3
36068: PUSH
36069: LD_INT 2
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 3
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: LD_INT 3
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36114: LD_ADDR_VAR 0 17
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 2
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 2
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 2
36290: NEG
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: NEG
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: NEG
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36344: LD_ADDR_VAR 0 18
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 2
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 2
36479: PUSH
36480: LD_INT 2
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 2
36520: NEG
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: NEG
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: NEG
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36574: LD_ADDR_VAR 0 19
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 2
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 2
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: LD_INT 2
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 2
36761: NEG
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: NEG
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36804: LD_ADDR_VAR 0 20
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: LD_INT 2
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37034: LD_ADDR_VAR 0 21
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 2
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 2
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 2
37221: NEG
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: NEG
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37264: LD_ADDR_VAR 0 22
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 2
37440: NEG
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 2
37451: NEG
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37494: LD_ADDR_VAR 0 23
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: LD_INT 2
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: NEG
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 2
37681: NEG
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: NEG
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: NEG
37706: PUSH
37707: LD_INT 3
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: LD_INT 3
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 2
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37774: LD_ADDR_VAR 0 24
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: LD_INT 2
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 2
37950: NEG
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38050: LD_ADDR_VAR 0 25
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: LD_INT 2
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 2
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 3
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 3
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 3
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38324: LD_ADDR_VAR 0 26
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 2
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 3
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 3
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38600: LD_ADDR_VAR 0 27
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 2
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 1
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: NEG
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: NEG
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: NEG
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 3
38833: NEG
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 3
38845: NEG
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38880: LD_ADDR_VAR 0 28
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: LD_INT 2
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 3
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 3
39127: NEG
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39162: LD_ADDR_VAR 0 29
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 2
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: NEG
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: LD_INT 3
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 3
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 3
39406: NEG
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39441: LD_ADDR_VAR 0 30
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 3
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: LD_INT 3
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: NEG
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39719: LD_ADDR_VAR 0 31
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: LD_INT 3
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 3
39962: NEG
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39997: LD_ADDR_VAR 0 32
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 0
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 3
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: LD_INT 3
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: NEG
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 3
40240: NEG
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40275: LD_ADDR_VAR 0 33
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 3
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 3
40519: NEG
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40554: LD_ADDR_VAR 0 34
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: LD_INT 3
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 3
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 3
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40834: LD_ADDR_VAR 0 35
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40946: LD_ADDR_VAR 0 36
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41058: LD_ADDR_VAR 0 37
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41170: LD_ADDR_VAR 0 38
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41282: LD_ADDR_VAR 0 39
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41394: LD_ADDR_VAR 0 40
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41506: LD_ADDR_VAR 0 41
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 2
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 3
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: LD_INT 3
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 3
41780: NEG
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 3
41791: NEG
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 3
41803: NEG
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 3
41815: NEG
41816: PUSH
41817: LD_INT 3
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41856: LD_ADDR_VAR 0 42
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 2
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: LD_INT 2
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: LD_INT 3
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: LD_INT 3
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 3
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 3
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 3
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 3
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 3
42165: NEG
42166: PUSH
42167: LD_INT 3
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42206: LD_ADDR_VAR 0 43
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 3
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 3
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 1
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 3
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 3
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 3
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 3
42502: NEG
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: NEG
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42554: LD_ADDR_VAR 0 44
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: LD_INT 3
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 3
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 3
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 3
42828: NEG
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 3
42839: NEG
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: LD_INT 2
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: LD_INT 3
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42904: LD_ADDR_VAR 0 45
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: LD_INT 3
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 3
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 3
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 3
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 3
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 3
43201: NEG
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 3
43213: NEG
43214: PUSH
43215: LD_INT 3
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43254: LD_ADDR_VAR 0 46
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 3
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 3
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 3
43550: NEG
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 3
43561: NEG
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43602: LD_ADDR_VAR 0 47
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 1
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 2
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43753: LD_ADDR_VAR 0 48
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43900: LD_ADDR_VAR 0 49
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44044: LD_ADDR_VAR 0 50
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44188: LD_ADDR_VAR 0 51
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44335: LD_ADDR_VAR 0 52
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44486: LD_ADDR_VAR 0 53
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44716: LD_ADDR_VAR 0 54
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 2
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44946: LD_ADDR_VAR 0 55
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45176: LD_ADDR_VAR 0 56
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 2
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45406: LD_ADDR_VAR 0 57
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45636: LD_ADDR_VAR 0 58
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45866: LD_ADDR_VAR 0 59
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 1
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45954: LD_ADDR_VAR 0 60
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46042: LD_ADDR_VAR 0 61
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46130: LD_ADDR_VAR 0 62
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46218: LD_ADDR_VAR 0 63
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46306: LD_ADDR_VAR 0 64
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// end ; 1 :
46394: GO 52291
46396: LD_INT 1
46398: DOUBLE
46399: EQUAL
46400: IFTRUE 46404
46402: GO 49027
46404: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46405: LD_ADDR_VAR 0 11
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 3
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46449: LD_ADDR_VAR 0 12
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 3
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 3
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46490: LD_ADDR_VAR 0 13
46494: PUSH
46495: LD_INT 3
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46530: LD_ADDR_VAR 0 14
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46571: LD_ADDR_VAR 0 15
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: NEG
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46615: LD_ADDR_VAR 0 16
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 3
46634: NEG
46635: PUSH
46636: LD_INT 2
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 3
46646: NEG
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46661: LD_ADDR_VAR 0 17
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 3
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 3
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46705: LD_ADDR_VAR 0 18
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 3
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46746: LD_ADDR_VAR 0 19
46750: PUSH
46751: LD_INT 3
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: LD_INT 3
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46786: LD_ADDR_VAR 0 20
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 3
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 3
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46827: LD_ADDR_VAR 0 21
46831: PUSH
46832: LD_INT 2
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 3
46845: NEG
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: LIST
46870: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46871: LD_ADDR_VAR 0 22
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: NEG
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46917: LD_ADDR_VAR 0 23
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46961: LD_ADDR_VAR 0 24
46965: PUSH
46966: LD_INT 3
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: PUSH
46990: LD_INT 1
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47002: LD_ADDR_VAR 0 25
47006: PUSH
47007: LD_INT 3
47009: PUSH
47010: LD_INT 3
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 4
47019: PUSH
47020: LD_INT 3
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: PUSH
47030: LD_INT 4
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47042: LD_ADDR_VAR 0 26
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 4
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47083: LD_ADDR_VAR 0 27
47087: PUSH
47088: LD_INT 3
47090: NEG
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 3
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 4
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: LIST
47126: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47127: LD_ADDR_VAR 0 28
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: LD_INT 4
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 4
47158: NEG
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47173: LD_ADDR_VAR 0 29
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 3
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: LD_INT 4
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 4
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 3
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 5
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 5
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 4
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: LD_INT 6
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 6
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 5
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47328: LD_ADDR_VAR 0 30
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 3
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 4
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 4
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 4
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 5
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 5
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 5
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 6
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 6
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47471: LD_ADDR_VAR 0 31
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 4
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 4
47518: PUSH
47519: LD_INT 4
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: LD_INT 4
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 5
47538: PUSH
47539: LD_INT 4
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 5
47548: PUSH
47549: LD_INT 5
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 4
47558: PUSH
47559: LD_INT 5
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 6
47568: PUSH
47569: LD_INT 5
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 6
47578: PUSH
47579: LD_INT 6
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 5
47588: PUSH
47589: LD_INT 6
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47610: LD_ADDR_VAR 0 32
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 4
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 4
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 5
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: LD_INT 5
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 4
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: LD_INT 6
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 6
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 5
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47753: LD_ADDR_VAR 0 33
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 3
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 4
47805: NEG
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 4
47816: NEG
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 4
47828: NEG
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 5
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 5
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 5
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 6
47873: NEG
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 6
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47908: LD_ADDR_VAR 0 34
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: NEG
47928: PUSH
47929: LD_INT 2
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: LD_INT 3
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 3
47951: NEG
47952: PUSH
47953: LD_INT 4
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 4
47963: NEG
47964: PUSH
47965: LD_INT 3
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 4
47975: NEG
47976: PUSH
47977: LD_INT 4
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 4
47987: NEG
47988: PUSH
47989: LD_INT 5
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 5
47999: NEG
48000: PUSH
48001: LD_INT 4
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 5
48011: NEG
48012: PUSH
48013: LD_INT 5
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 5
48023: NEG
48024: PUSH
48025: LD_INT 6
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 6
48035: NEG
48036: PUSH
48037: LD_INT 5
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 6
48047: NEG
48048: PUSH
48049: LD_INT 6
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48071: LD_ADDR_VAR 0 41
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48115: LD_ADDR_VAR 0 42
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48156: LD_ADDR_VAR 0 43
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 3
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48196: LD_ADDR_VAR 0 44
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48237: LD_ADDR_VAR 0 45
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: LIST
48280: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48281: LD_ADDR_VAR 0 46
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48327: LD_ADDR_VAR 0 47
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 3
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48360: LD_ADDR_VAR 0 48
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48391: LD_ADDR_VAR 0 49
48395: PUSH
48396: LD_INT 3
48398: PUSH
48399: LD_INT 1
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48420: LD_ADDR_VAR 0 50
48424: PUSH
48425: LD_INT 2
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48449: LD_ADDR_VAR 0 51
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48480: LD_ADDR_VAR 0 52
48484: PUSH
48485: LD_INT 3
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48513: LD_ADDR_VAR 0 53
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 3
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 3
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: LIST
48556: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48557: LD_ADDR_VAR 0 54
48561: PUSH
48562: LD_INT 2
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 3
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48598: LD_ADDR_VAR 0 55
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: PUSH
48626: LD_INT 3
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: LIST
48637: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48638: LD_ADDR_VAR 0 56
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 3
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 3
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48679: LD_ADDR_VAR 0 57
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 3
48697: NEG
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 3
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: LIST
48722: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48723: LD_ADDR_VAR 0 58
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: LD_INT 3
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48769: LD_ADDR_VAR 0 59
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 2
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48813: LD_ADDR_VAR 0 60
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48854: LD_ADDR_VAR 0 61
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 2
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48894: LD_ADDR_VAR 0 62
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 2
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48935: LD_ADDR_VAR 0 63
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: LIST
48978: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48979: LD_ADDR_VAR 0 64
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: LIST
49024: ST_TO_ADDR
// end ; 2 :
49025: GO 52291
49027: LD_INT 2
49029: DOUBLE
49030: EQUAL
49031: IFTRUE 49035
49033: GO 52290
49035: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49036: LD_ADDR_VAR 0 29
49040: PUSH
49041: LD_INT 4
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 4
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 5
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 5
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 4
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 5
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: PUSH
49137: LD_INT 3
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 3
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 4
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 4
49166: PUSH
49167: LD_INT 4
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 3
49176: PUSH
49177: LD_INT 4
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: LD_INT 3
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 4
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 4
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 4
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 3
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 4
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: LD_INT 5
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 5
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 4
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: LD_INT 3
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 5
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 4
49375: NEG
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 4
49386: NEG
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 4
49398: NEG
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 4
49421: NEG
49422: PUSH
49423: LD_INT 4
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 4
49433: NEG
49434: PUSH
49435: LD_INT 5
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: LD_INT 4
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 4
49469: NEG
49470: PUSH
49471: LD_INT 3
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 5
49481: NEG
49482: PUSH
49483: LD_INT 4
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 5
49493: NEG
49494: PUSH
49495: LD_INT 5
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 3
49505: NEG
49506: PUSH
49507: LD_INT 5
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 5
49517: NEG
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49574: LD_ADDR_VAR 0 30
49578: PUSH
49579: LD_INT 4
49581: PUSH
49582: LD_INT 4
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 4
49591: PUSH
49592: LD_INT 3
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 5
49601: PUSH
49602: LD_INT 4
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 5
49611: PUSH
49612: LD_INT 5
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 4
49621: PUSH
49622: LD_INT 5
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: LD_INT 4
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 3
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 5
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: LD_INT 5
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 3
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 4
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 4
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: LD_INT 3
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: LD_INT 4
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 4
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 4
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 4
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 5
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 5
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 5
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: NEG
49867: PUSH
49868: LD_INT 3
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: LD_INT 4
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 3
49914: NEG
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 4
49926: NEG
49927: PUSH
49928: LD_INT 3
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 4
49938: NEG
49939: PUSH
49940: LD_INT 4
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: LD_INT 4
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 4
49962: NEG
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 4
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 5
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 4
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 3
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 3
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: LD_INT 4
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 5
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: LD_INT 3
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: LD_INT 5
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50121: LD_ADDR_VAR 0 31
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 4
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 3
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 4
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 5
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 5
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 4
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 5
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 3
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 3
50266: NEG
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 4
50277: NEG
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 4
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 4
50300: NEG
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: NEG
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 4
50323: NEG
50324: PUSH
50325: LD_INT 4
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 4
50335: NEG
50336: PUSH
50337: LD_INT 5
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 3
50347: NEG
50348: PUSH
50349: LD_INT 4
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 3
50359: NEG
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 4
50371: NEG
50372: PUSH
50373: LD_INT 3
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 5
50383: NEG
50384: PUSH
50385: LD_INT 4
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 5
50395: NEG
50396: PUSH
50397: LD_INT 5
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 3
50407: NEG
50408: PUSH
50409: LD_INT 5
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 5
50419: NEG
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 3
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 4
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 4
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: LD_INT 4
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 4
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 4
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 5
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 5
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 4
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 3
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 5
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50671: LD_ADDR_VAR 0 32
50675: PUSH
50676: LD_INT 4
50678: NEG
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 4
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 4
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 5
50734: NEG
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 5
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 5
50757: NEG
50758: PUSH
50759: LD_INT 2
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 3
50780: NEG
50781: PUSH
50782: LD_INT 3
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: LD_INT 4
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 3
50828: NEG
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 4
50840: NEG
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 4
50852: NEG
50853: PUSH
50854: LD_INT 4
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 4
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 4
50876: NEG
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: LD_INT 4
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 5
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 4
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 5
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: LD_INT 5
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: LD_INT 0
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 4
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 4
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: PUSH
51032: LD_INT 1
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 4
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 4
51083: PUSH
51084: LD_INT 4
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 4
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 5
51103: PUSH
51104: LD_INT 4
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 5
51113: PUSH
51114: LD_INT 5
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 4
51123: PUSH
51124: LD_INT 5
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: LD_INT 4
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 5
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: LD_INT 5
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51218: LD_ADDR_VAR 0 33
51222: PUSH
51223: LD_INT 4
51225: NEG
51226: PUSH
51227: LD_INT 4
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 4
51237: NEG
51238: PUSH
51239: LD_INT 5
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 3
51249: NEG
51250: PUSH
51251: LD_INT 4
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: NEG
51262: PUSH
51263: LD_INT 3
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 4
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 5
51285: NEG
51286: PUSH
51287: LD_INT 4
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 5
51297: NEG
51298: PUSH
51299: LD_INT 5
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: LD_INT 5
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 5
51321: NEG
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 4
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 3
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 4
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 2
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: LD_INT 4
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 4
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 4
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 5
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 4
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 3
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 5
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 3
51528: PUSH
51529: LD_INT 3
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 4
51548: PUSH
51549: LD_INT 3
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 4
51558: PUSH
51559: LD_INT 4
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: PUSH
51569: LD_INT 4
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: LD_INT 3
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 4
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 4
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 4
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 4
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 5
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 5
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: LD_INT 4
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 2
51690: PUSH
51691: LD_INT 5
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: LD_INT 3
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51756: LD_ADDR_VAR 0 34
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 4
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 5
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 4
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 4
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 5
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 5
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 4
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 4
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 3
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 4
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 4
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 5
51978: PUSH
51979: LD_INT 4
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 5
51988: PUSH
51989: LD_INT 5
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: LD_INT 5
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: LD_INT 4
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 5
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: LD_INT 5
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 3
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 4
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 4
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 4
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: NEG
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 4
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 4
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: NEG
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 4
52186: NEG
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 5
52197: NEG
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 5
52208: NEG
52209: PUSH
52210: LD_INT 1
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 5
52220: NEG
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: NEG
52233: PUSH
52234: LD_INT 2
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: ST_TO_ADDR
// end ; end ;
52288: GO 52291
52290: POP
// case btype of b_depot , b_warehouse :
52291: LD_VAR 0 1
52295: PUSH
52296: LD_INT 0
52298: DOUBLE
52299: EQUAL
52300: IFTRUE 52310
52302: LD_INT 1
52304: DOUBLE
52305: EQUAL
52306: IFTRUE 52310
52308: GO 52511
52310: POP
// case nation of nation_american :
52311: LD_VAR 0 5
52315: PUSH
52316: LD_INT 1
52318: DOUBLE
52319: EQUAL
52320: IFTRUE 52324
52322: GO 52380
52324: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52325: LD_ADDR_VAR 0 9
52329: PUSH
52330: LD_VAR 0 11
52334: PUSH
52335: LD_VAR 0 12
52339: PUSH
52340: LD_VAR 0 13
52344: PUSH
52345: LD_VAR 0 14
52349: PUSH
52350: LD_VAR 0 15
52354: PUSH
52355: LD_VAR 0 16
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: PUSH
52368: LD_VAR 0 4
52372: PUSH
52373: LD_INT 1
52375: PLUS
52376: ARRAY
52377: ST_TO_ADDR
52378: GO 52509
52380: LD_INT 2
52382: DOUBLE
52383: EQUAL
52384: IFTRUE 52388
52386: GO 52444
52388: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52389: LD_ADDR_VAR 0 9
52393: PUSH
52394: LD_VAR 0 17
52398: PUSH
52399: LD_VAR 0 18
52403: PUSH
52404: LD_VAR 0 19
52408: PUSH
52409: LD_VAR 0 20
52413: PUSH
52414: LD_VAR 0 21
52418: PUSH
52419: LD_VAR 0 22
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: PUSH
52432: LD_VAR 0 4
52436: PUSH
52437: LD_INT 1
52439: PLUS
52440: ARRAY
52441: ST_TO_ADDR
52442: GO 52509
52444: LD_INT 3
52446: DOUBLE
52447: EQUAL
52448: IFTRUE 52452
52450: GO 52508
52452: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52453: LD_ADDR_VAR 0 9
52457: PUSH
52458: LD_VAR 0 23
52462: PUSH
52463: LD_VAR 0 24
52467: PUSH
52468: LD_VAR 0 25
52472: PUSH
52473: LD_VAR 0 26
52477: PUSH
52478: LD_VAR 0 27
52482: PUSH
52483: LD_VAR 0 28
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: PUSH
52496: LD_VAR 0 4
52500: PUSH
52501: LD_INT 1
52503: PLUS
52504: ARRAY
52505: ST_TO_ADDR
52506: GO 52509
52508: POP
52509: GO 53064
52511: LD_INT 2
52513: DOUBLE
52514: EQUAL
52515: IFTRUE 52525
52517: LD_INT 3
52519: DOUBLE
52520: EQUAL
52521: IFTRUE 52525
52523: GO 52581
52525: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52526: LD_ADDR_VAR 0 9
52530: PUSH
52531: LD_VAR 0 29
52535: PUSH
52536: LD_VAR 0 30
52540: PUSH
52541: LD_VAR 0 31
52545: PUSH
52546: LD_VAR 0 32
52550: PUSH
52551: LD_VAR 0 33
52555: PUSH
52556: LD_VAR 0 34
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: PUSH
52569: LD_VAR 0 4
52573: PUSH
52574: LD_INT 1
52576: PLUS
52577: ARRAY
52578: ST_TO_ADDR
52579: GO 53064
52581: LD_INT 16
52583: DOUBLE
52584: EQUAL
52585: IFTRUE 52643
52587: LD_INT 17
52589: DOUBLE
52590: EQUAL
52591: IFTRUE 52643
52593: LD_INT 18
52595: DOUBLE
52596: EQUAL
52597: IFTRUE 52643
52599: LD_INT 19
52601: DOUBLE
52602: EQUAL
52603: IFTRUE 52643
52605: LD_INT 22
52607: DOUBLE
52608: EQUAL
52609: IFTRUE 52643
52611: LD_INT 20
52613: DOUBLE
52614: EQUAL
52615: IFTRUE 52643
52617: LD_INT 21
52619: DOUBLE
52620: EQUAL
52621: IFTRUE 52643
52623: LD_INT 23
52625: DOUBLE
52626: EQUAL
52627: IFTRUE 52643
52629: LD_INT 24
52631: DOUBLE
52632: EQUAL
52633: IFTRUE 52643
52635: LD_INT 25
52637: DOUBLE
52638: EQUAL
52639: IFTRUE 52643
52641: GO 52699
52643: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52644: LD_ADDR_VAR 0 9
52648: PUSH
52649: LD_VAR 0 35
52653: PUSH
52654: LD_VAR 0 36
52658: PUSH
52659: LD_VAR 0 37
52663: PUSH
52664: LD_VAR 0 38
52668: PUSH
52669: LD_VAR 0 39
52673: PUSH
52674: LD_VAR 0 40
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: PUSH
52687: LD_VAR 0 4
52691: PUSH
52692: LD_INT 1
52694: PLUS
52695: ARRAY
52696: ST_TO_ADDR
52697: GO 53064
52699: LD_INT 6
52701: DOUBLE
52702: EQUAL
52703: IFTRUE 52755
52705: LD_INT 7
52707: DOUBLE
52708: EQUAL
52709: IFTRUE 52755
52711: LD_INT 8
52713: DOUBLE
52714: EQUAL
52715: IFTRUE 52755
52717: LD_INT 13
52719: DOUBLE
52720: EQUAL
52721: IFTRUE 52755
52723: LD_INT 12
52725: DOUBLE
52726: EQUAL
52727: IFTRUE 52755
52729: LD_INT 15
52731: DOUBLE
52732: EQUAL
52733: IFTRUE 52755
52735: LD_INT 11
52737: DOUBLE
52738: EQUAL
52739: IFTRUE 52755
52741: LD_INT 14
52743: DOUBLE
52744: EQUAL
52745: IFTRUE 52755
52747: LD_INT 10
52749: DOUBLE
52750: EQUAL
52751: IFTRUE 52755
52753: GO 52811
52755: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52756: LD_ADDR_VAR 0 9
52760: PUSH
52761: LD_VAR 0 41
52765: PUSH
52766: LD_VAR 0 42
52770: PUSH
52771: LD_VAR 0 43
52775: PUSH
52776: LD_VAR 0 44
52780: PUSH
52781: LD_VAR 0 45
52785: PUSH
52786: LD_VAR 0 46
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: PUSH
52799: LD_VAR 0 4
52803: PUSH
52804: LD_INT 1
52806: PLUS
52807: ARRAY
52808: ST_TO_ADDR
52809: GO 53064
52811: LD_INT 36
52813: DOUBLE
52814: EQUAL
52815: IFTRUE 52819
52817: GO 52875
52819: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52820: LD_ADDR_VAR 0 9
52824: PUSH
52825: LD_VAR 0 47
52829: PUSH
52830: LD_VAR 0 48
52834: PUSH
52835: LD_VAR 0 49
52839: PUSH
52840: LD_VAR 0 50
52844: PUSH
52845: LD_VAR 0 51
52849: PUSH
52850: LD_VAR 0 52
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: PUSH
52863: LD_VAR 0 4
52867: PUSH
52868: LD_INT 1
52870: PLUS
52871: ARRAY
52872: ST_TO_ADDR
52873: GO 53064
52875: LD_INT 4
52877: DOUBLE
52878: EQUAL
52879: IFTRUE 52901
52881: LD_INT 5
52883: DOUBLE
52884: EQUAL
52885: IFTRUE 52901
52887: LD_INT 34
52889: DOUBLE
52890: EQUAL
52891: IFTRUE 52901
52893: LD_INT 37
52895: DOUBLE
52896: EQUAL
52897: IFTRUE 52901
52899: GO 52957
52901: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52902: LD_ADDR_VAR 0 9
52906: PUSH
52907: LD_VAR 0 53
52911: PUSH
52912: LD_VAR 0 54
52916: PUSH
52917: LD_VAR 0 55
52921: PUSH
52922: LD_VAR 0 56
52926: PUSH
52927: LD_VAR 0 57
52931: PUSH
52932: LD_VAR 0 58
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: PUSH
52945: LD_VAR 0 4
52949: PUSH
52950: LD_INT 1
52952: PLUS
52953: ARRAY
52954: ST_TO_ADDR
52955: GO 53064
52957: LD_INT 31
52959: DOUBLE
52960: EQUAL
52961: IFTRUE 53007
52963: LD_INT 32
52965: DOUBLE
52966: EQUAL
52967: IFTRUE 53007
52969: LD_INT 33
52971: DOUBLE
52972: EQUAL
52973: IFTRUE 53007
52975: LD_INT 27
52977: DOUBLE
52978: EQUAL
52979: IFTRUE 53007
52981: LD_INT 26
52983: DOUBLE
52984: EQUAL
52985: IFTRUE 53007
52987: LD_INT 28
52989: DOUBLE
52990: EQUAL
52991: IFTRUE 53007
52993: LD_INT 29
52995: DOUBLE
52996: EQUAL
52997: IFTRUE 53007
52999: LD_INT 30
53001: DOUBLE
53002: EQUAL
53003: IFTRUE 53007
53005: GO 53063
53007: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53008: LD_ADDR_VAR 0 9
53012: PUSH
53013: LD_VAR 0 59
53017: PUSH
53018: LD_VAR 0 60
53022: PUSH
53023: LD_VAR 0 61
53027: PUSH
53028: LD_VAR 0 62
53032: PUSH
53033: LD_VAR 0 63
53037: PUSH
53038: LD_VAR 0 64
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: PUSH
53051: LD_VAR 0 4
53055: PUSH
53056: LD_INT 1
53058: PLUS
53059: ARRAY
53060: ST_TO_ADDR
53061: GO 53064
53063: POP
// temp_list2 = [ ] ;
53064: LD_ADDR_VAR 0 10
53068: PUSH
53069: EMPTY
53070: ST_TO_ADDR
// for i in temp_list do
53071: LD_ADDR_VAR 0 8
53075: PUSH
53076: LD_VAR 0 9
53080: PUSH
53081: FOR_IN
53082: IFFALSE 53134
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53084: LD_ADDR_VAR 0 10
53088: PUSH
53089: LD_VAR 0 10
53093: PUSH
53094: LD_VAR 0 8
53098: PUSH
53099: LD_INT 1
53101: ARRAY
53102: PUSH
53103: LD_VAR 0 2
53107: PLUS
53108: PUSH
53109: LD_VAR 0 8
53113: PUSH
53114: LD_INT 2
53116: ARRAY
53117: PUSH
53118: LD_VAR 0 3
53122: PLUS
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: ADD
53131: ST_TO_ADDR
53132: GO 53081
53134: POP
53135: POP
// result = temp_list2 ;
53136: LD_ADDR_VAR 0 7
53140: PUSH
53141: LD_VAR 0 10
53145: ST_TO_ADDR
// end ;
53146: LD_VAR 0 7
53150: RET
// export function EnemyInRange ( unit , dist ) ; begin
53151: LD_INT 0
53153: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53154: LD_ADDR_VAR 0 3
53158: PUSH
53159: LD_VAR 0 1
53163: PPUSH
53164: CALL_OW 255
53168: PPUSH
53169: LD_VAR 0 1
53173: PPUSH
53174: CALL_OW 250
53178: PPUSH
53179: LD_VAR 0 1
53183: PPUSH
53184: CALL_OW 251
53188: PPUSH
53189: LD_VAR 0 2
53193: PPUSH
53194: CALL 26524 0 4
53198: PUSH
53199: LD_INT 4
53201: ARRAY
53202: ST_TO_ADDR
// end ;
53203: LD_VAR 0 3
53207: RET
// export function PlayerSeeMe ( unit ) ; begin
53208: LD_INT 0
53210: PPUSH
// result := See ( your_side , unit ) ;
53211: LD_ADDR_VAR 0 2
53215: PUSH
53216: LD_OWVAR 2
53220: PPUSH
53221: LD_VAR 0 1
53225: PPUSH
53226: CALL_OW 292
53230: ST_TO_ADDR
// end ;
53231: LD_VAR 0 2
53235: RET
// export function ReverseDir ( unit ) ; begin
53236: LD_INT 0
53238: PPUSH
// if not unit then
53239: LD_VAR 0 1
53243: NOT
53244: IFFALSE 53248
// exit ;
53246: GO 53271
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53248: LD_ADDR_VAR 0 2
53252: PUSH
53253: LD_VAR 0 1
53257: PPUSH
53258: CALL_OW 254
53262: PUSH
53263: LD_INT 3
53265: PLUS
53266: PUSH
53267: LD_INT 6
53269: MOD
53270: ST_TO_ADDR
// end ;
53271: LD_VAR 0 2
53275: RET
// export function ReverseArray ( array ) ; var i ; begin
53276: LD_INT 0
53278: PPUSH
53279: PPUSH
// if not array then
53280: LD_VAR 0 1
53284: NOT
53285: IFFALSE 53289
// exit ;
53287: GO 53344
// result := [ ] ;
53289: LD_ADDR_VAR 0 2
53293: PUSH
53294: EMPTY
53295: ST_TO_ADDR
// for i := array downto 1 do
53296: LD_ADDR_VAR 0 3
53300: PUSH
53301: DOUBLE
53302: LD_VAR 0 1
53306: INC
53307: ST_TO_ADDR
53308: LD_INT 1
53310: PUSH
53311: FOR_DOWNTO
53312: IFFALSE 53342
// result := Join ( result , array [ i ] ) ;
53314: LD_ADDR_VAR 0 2
53318: PUSH
53319: LD_VAR 0 2
53323: PPUSH
53324: LD_VAR 0 1
53328: PUSH
53329: LD_VAR 0 3
53333: ARRAY
53334: PPUSH
53335: CALL 57989 0 2
53339: ST_TO_ADDR
53340: GO 53311
53342: POP
53343: POP
// end ;
53344: LD_VAR 0 2
53348: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53349: LD_INT 0
53351: PPUSH
53352: PPUSH
53353: PPUSH
53354: PPUSH
53355: PPUSH
53356: PPUSH
// if not unit or not hexes then
53357: LD_VAR 0 1
53361: NOT
53362: PUSH
53363: LD_VAR 0 2
53367: NOT
53368: OR
53369: IFFALSE 53373
// exit ;
53371: GO 53496
// dist := 9999 ;
53373: LD_ADDR_VAR 0 5
53377: PUSH
53378: LD_INT 9999
53380: ST_TO_ADDR
// for i = 1 to hexes do
53381: LD_ADDR_VAR 0 4
53385: PUSH
53386: DOUBLE
53387: LD_INT 1
53389: DEC
53390: ST_TO_ADDR
53391: LD_VAR 0 2
53395: PUSH
53396: FOR_TO
53397: IFFALSE 53484
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53399: LD_ADDR_VAR 0 6
53403: PUSH
53404: LD_VAR 0 1
53408: PPUSH
53409: LD_VAR 0 2
53413: PUSH
53414: LD_VAR 0 4
53418: ARRAY
53419: PUSH
53420: LD_INT 1
53422: ARRAY
53423: PPUSH
53424: LD_VAR 0 2
53428: PUSH
53429: LD_VAR 0 4
53433: ARRAY
53434: PUSH
53435: LD_INT 2
53437: ARRAY
53438: PPUSH
53439: CALL_OW 297
53443: ST_TO_ADDR
// if tdist < dist then
53444: LD_VAR 0 6
53448: PUSH
53449: LD_VAR 0 5
53453: LESS
53454: IFFALSE 53482
// begin hex := hexes [ i ] ;
53456: LD_ADDR_VAR 0 8
53460: PUSH
53461: LD_VAR 0 2
53465: PUSH
53466: LD_VAR 0 4
53470: ARRAY
53471: ST_TO_ADDR
// dist := tdist ;
53472: LD_ADDR_VAR 0 5
53476: PUSH
53477: LD_VAR 0 6
53481: ST_TO_ADDR
// end ; end ;
53482: GO 53396
53484: POP
53485: POP
// result := hex ;
53486: LD_ADDR_VAR 0 3
53490: PUSH
53491: LD_VAR 0 8
53495: ST_TO_ADDR
// end ;
53496: LD_VAR 0 3
53500: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53501: LD_INT 0
53503: PPUSH
53504: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53505: LD_VAR 0 1
53509: NOT
53510: PUSH
53511: LD_VAR 0 1
53515: PUSH
53516: LD_INT 21
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 23
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PPUSH
53540: CALL_OW 69
53544: IN
53545: NOT
53546: OR
53547: IFFALSE 53551
// exit ;
53549: GO 53598
// for i = 1 to 3 do
53551: LD_ADDR_VAR 0 3
53555: PUSH
53556: DOUBLE
53557: LD_INT 1
53559: DEC
53560: ST_TO_ADDR
53561: LD_INT 3
53563: PUSH
53564: FOR_TO
53565: IFFALSE 53596
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53567: LD_VAR 0 1
53571: PPUSH
53572: CALL_OW 250
53576: PPUSH
53577: LD_VAR 0 1
53581: PPUSH
53582: CALL_OW 251
53586: PPUSH
53587: LD_INT 1
53589: PPUSH
53590: CALL_OW 453
53594: GO 53564
53596: POP
53597: POP
// end ;
53598: LD_VAR 0 2
53602: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53603: LD_INT 0
53605: PPUSH
53606: PPUSH
53607: PPUSH
53608: PPUSH
53609: PPUSH
53610: PPUSH
// if not unit or not enemy_unit then
53611: LD_VAR 0 1
53615: NOT
53616: PUSH
53617: LD_VAR 0 2
53621: NOT
53622: OR
53623: IFFALSE 53627
// exit ;
53625: GO 54094
// if GetLives ( i ) < 250 then
53627: LD_VAR 0 4
53631: PPUSH
53632: CALL_OW 256
53636: PUSH
53637: LD_INT 250
53639: LESS
53640: IFFALSE 53653
// begin ComAutodestruct ( i ) ;
53642: LD_VAR 0 4
53646: PPUSH
53647: CALL 53501 0 1
// exit ;
53651: GO 54094
// end ; x := GetX ( enemy_unit ) ;
53653: LD_ADDR_VAR 0 7
53657: PUSH
53658: LD_VAR 0 2
53662: PPUSH
53663: CALL_OW 250
53667: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53668: LD_ADDR_VAR 0 8
53672: PUSH
53673: LD_VAR 0 2
53677: PPUSH
53678: CALL_OW 251
53682: ST_TO_ADDR
// if not x or not y then
53683: LD_VAR 0 7
53687: NOT
53688: PUSH
53689: LD_VAR 0 8
53693: NOT
53694: OR
53695: IFFALSE 53699
// exit ;
53697: GO 54094
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53699: LD_ADDR_VAR 0 6
53703: PUSH
53704: LD_VAR 0 7
53708: PPUSH
53709: LD_INT 0
53711: PPUSH
53712: LD_INT 4
53714: PPUSH
53715: CALL_OW 272
53719: PUSH
53720: LD_VAR 0 8
53724: PPUSH
53725: LD_INT 0
53727: PPUSH
53728: LD_INT 4
53730: PPUSH
53731: CALL_OW 273
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_VAR 0 7
53744: PPUSH
53745: LD_INT 1
53747: PPUSH
53748: LD_INT 4
53750: PPUSH
53751: CALL_OW 272
53755: PUSH
53756: LD_VAR 0 8
53760: PPUSH
53761: LD_INT 1
53763: PPUSH
53764: LD_INT 4
53766: PPUSH
53767: CALL_OW 273
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_VAR 0 7
53780: PPUSH
53781: LD_INT 2
53783: PPUSH
53784: LD_INT 4
53786: PPUSH
53787: CALL_OW 272
53791: PUSH
53792: LD_VAR 0 8
53796: PPUSH
53797: LD_INT 2
53799: PPUSH
53800: LD_INT 4
53802: PPUSH
53803: CALL_OW 273
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_VAR 0 7
53816: PPUSH
53817: LD_INT 3
53819: PPUSH
53820: LD_INT 4
53822: PPUSH
53823: CALL_OW 272
53827: PUSH
53828: LD_VAR 0 8
53832: PPUSH
53833: LD_INT 3
53835: PPUSH
53836: LD_INT 4
53838: PPUSH
53839: CALL_OW 273
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_VAR 0 7
53852: PPUSH
53853: LD_INT 4
53855: PPUSH
53856: LD_INT 4
53858: PPUSH
53859: CALL_OW 272
53863: PUSH
53864: LD_VAR 0 8
53868: PPUSH
53869: LD_INT 4
53871: PPUSH
53872: LD_INT 4
53874: PPUSH
53875: CALL_OW 273
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_VAR 0 7
53888: PPUSH
53889: LD_INT 5
53891: PPUSH
53892: LD_INT 4
53894: PPUSH
53895: CALL_OW 272
53899: PUSH
53900: LD_VAR 0 8
53904: PPUSH
53905: LD_INT 5
53907: PPUSH
53908: LD_INT 4
53910: PPUSH
53911: CALL_OW 273
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: ST_TO_ADDR
// for i = tmp downto 1 do
53928: LD_ADDR_VAR 0 4
53932: PUSH
53933: DOUBLE
53934: LD_VAR 0 6
53938: INC
53939: ST_TO_ADDR
53940: LD_INT 1
53942: PUSH
53943: FOR_DOWNTO
53944: IFFALSE 54045
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53946: LD_VAR 0 6
53950: PUSH
53951: LD_VAR 0 4
53955: ARRAY
53956: PUSH
53957: LD_INT 1
53959: ARRAY
53960: PPUSH
53961: LD_VAR 0 6
53965: PUSH
53966: LD_VAR 0 4
53970: ARRAY
53971: PUSH
53972: LD_INT 2
53974: ARRAY
53975: PPUSH
53976: CALL_OW 488
53980: NOT
53981: PUSH
53982: LD_VAR 0 6
53986: PUSH
53987: LD_VAR 0 4
53991: ARRAY
53992: PUSH
53993: LD_INT 1
53995: ARRAY
53996: PPUSH
53997: LD_VAR 0 6
54001: PUSH
54002: LD_VAR 0 4
54006: ARRAY
54007: PUSH
54008: LD_INT 2
54010: ARRAY
54011: PPUSH
54012: CALL_OW 428
54016: PUSH
54017: LD_INT 0
54019: NONEQUAL
54020: OR
54021: IFFALSE 54043
// tmp := Delete ( tmp , i ) ;
54023: LD_ADDR_VAR 0 6
54027: PUSH
54028: LD_VAR 0 6
54032: PPUSH
54033: LD_VAR 0 4
54037: PPUSH
54038: CALL_OW 3
54042: ST_TO_ADDR
54043: GO 53943
54045: POP
54046: POP
// j := GetClosestHex ( unit , tmp ) ;
54047: LD_ADDR_VAR 0 5
54051: PUSH
54052: LD_VAR 0 1
54056: PPUSH
54057: LD_VAR 0 6
54061: PPUSH
54062: CALL 53349 0 2
54066: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54067: LD_VAR 0 1
54071: PPUSH
54072: LD_VAR 0 5
54076: PUSH
54077: LD_INT 1
54079: ARRAY
54080: PPUSH
54081: LD_VAR 0 5
54085: PUSH
54086: LD_INT 2
54088: ARRAY
54089: PPUSH
54090: CALL_OW 111
// end ;
54094: LD_VAR 0 3
54098: RET
// export function PrepareApemanSoldier ( ) ; begin
54099: LD_INT 0
54101: PPUSH
// uc_nation := 0 ;
54102: LD_ADDR_OWVAR 21
54106: PUSH
54107: LD_INT 0
54109: ST_TO_ADDR
// hc_sex := sex_male ;
54110: LD_ADDR_OWVAR 27
54114: PUSH
54115: LD_INT 1
54117: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54118: LD_ADDR_OWVAR 28
54122: PUSH
54123: LD_INT 15
54125: ST_TO_ADDR
// hc_gallery :=  ;
54126: LD_ADDR_OWVAR 33
54130: PUSH
54131: LD_STRING 
54133: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54134: LD_ADDR_OWVAR 31
54138: PUSH
54139: LD_INT 0
54141: PPUSH
54142: LD_INT 3
54144: PPUSH
54145: CALL_OW 12
54149: PUSH
54150: LD_INT 0
54152: PPUSH
54153: LD_INT 3
54155: PPUSH
54156: CALL_OW 12
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// end ;
54173: LD_VAR 0 1
54177: RET
// export function PrepareApemanEngineer ( ) ; begin
54178: LD_INT 0
54180: PPUSH
// uc_nation := 0 ;
54181: LD_ADDR_OWVAR 21
54185: PUSH
54186: LD_INT 0
54188: ST_TO_ADDR
// hc_sex := sex_male ;
54189: LD_ADDR_OWVAR 27
54193: PUSH
54194: LD_INT 1
54196: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54197: LD_ADDR_OWVAR 28
54201: PUSH
54202: LD_INT 16
54204: ST_TO_ADDR
// hc_gallery :=  ;
54205: LD_ADDR_OWVAR 33
54209: PUSH
54210: LD_STRING 
54212: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54213: LD_ADDR_OWVAR 31
54217: PUSH
54218: LD_INT 0
54220: PPUSH
54221: LD_INT 3
54223: PPUSH
54224: CALL_OW 12
54228: PUSH
54229: LD_INT 0
54231: PPUSH
54232: LD_INT 3
54234: PPUSH
54235: CALL_OW 12
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: ST_TO_ADDR
// end ;
54252: LD_VAR 0 1
54256: RET
// export function PrepareApeman ( agressivity ) ; begin
54257: LD_INT 0
54259: PPUSH
// uc_side := 0 ;
54260: LD_ADDR_OWVAR 20
54264: PUSH
54265: LD_INT 0
54267: ST_TO_ADDR
// uc_nation := 0 ;
54268: LD_ADDR_OWVAR 21
54272: PUSH
54273: LD_INT 0
54275: ST_TO_ADDR
// hc_sex := sex_male ;
54276: LD_ADDR_OWVAR 27
54280: PUSH
54281: LD_INT 1
54283: ST_TO_ADDR
// hc_class := class_apeman ;
54284: LD_ADDR_OWVAR 28
54288: PUSH
54289: LD_INT 12
54291: ST_TO_ADDR
// hc_gallery :=  ;
54292: LD_ADDR_OWVAR 33
54296: PUSH
54297: LD_STRING 
54299: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54300: LD_ADDR_OWVAR 35
54304: PUSH
54305: LD_VAR 0 1
54309: NEG
54310: PPUSH
54311: LD_VAR 0 1
54315: PPUSH
54316: CALL_OW 12
54320: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54321: LD_ADDR_OWVAR 31
54325: PUSH
54326: LD_INT 0
54328: PPUSH
54329: LD_INT 3
54331: PPUSH
54332: CALL_OW 12
54336: PUSH
54337: LD_INT 0
54339: PPUSH
54340: LD_INT 3
54342: PPUSH
54343: CALL_OW 12
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 0
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// end ;
54360: LD_VAR 0 2
54364: RET
// export function PrepareTiger ( agressivity ) ; begin
54365: LD_INT 0
54367: PPUSH
// uc_side := 0 ;
54368: LD_ADDR_OWVAR 20
54372: PUSH
54373: LD_INT 0
54375: ST_TO_ADDR
// uc_nation := 0 ;
54376: LD_ADDR_OWVAR 21
54380: PUSH
54381: LD_INT 0
54383: ST_TO_ADDR
// hc_class := class_tiger ;
54384: LD_ADDR_OWVAR 28
54388: PUSH
54389: LD_INT 14
54391: ST_TO_ADDR
// hc_gallery :=  ;
54392: LD_ADDR_OWVAR 33
54396: PUSH
54397: LD_STRING 
54399: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54400: LD_ADDR_OWVAR 35
54404: PUSH
54405: LD_VAR 0 1
54409: NEG
54410: PPUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: CALL_OW 12
54420: ST_TO_ADDR
// end ;
54421: LD_VAR 0 2
54425: RET
// export function PrepareEnchidna ( ) ; begin
54426: LD_INT 0
54428: PPUSH
// uc_side := 0 ;
54429: LD_ADDR_OWVAR 20
54433: PUSH
54434: LD_INT 0
54436: ST_TO_ADDR
// uc_nation := 0 ;
54437: LD_ADDR_OWVAR 21
54441: PUSH
54442: LD_INT 0
54444: ST_TO_ADDR
// hc_class := class_baggie ;
54445: LD_ADDR_OWVAR 28
54449: PUSH
54450: LD_INT 13
54452: ST_TO_ADDR
// hc_gallery :=  ;
54453: LD_ADDR_OWVAR 33
54457: PUSH
54458: LD_STRING 
54460: ST_TO_ADDR
// end ;
54461: LD_VAR 0 1
54465: RET
// export function PrepareFrog ( ) ; begin
54466: LD_INT 0
54468: PPUSH
// uc_side := 0 ;
54469: LD_ADDR_OWVAR 20
54473: PUSH
54474: LD_INT 0
54476: ST_TO_ADDR
// uc_nation := 0 ;
54477: LD_ADDR_OWVAR 21
54481: PUSH
54482: LD_INT 0
54484: ST_TO_ADDR
// hc_class := class_frog ;
54485: LD_ADDR_OWVAR 28
54489: PUSH
54490: LD_INT 19
54492: ST_TO_ADDR
// hc_gallery :=  ;
54493: LD_ADDR_OWVAR 33
54497: PUSH
54498: LD_STRING 
54500: ST_TO_ADDR
// end ;
54501: LD_VAR 0 1
54505: RET
// export function PrepareFish ( ) ; begin
54506: LD_INT 0
54508: PPUSH
// uc_side := 0 ;
54509: LD_ADDR_OWVAR 20
54513: PUSH
54514: LD_INT 0
54516: ST_TO_ADDR
// uc_nation := 0 ;
54517: LD_ADDR_OWVAR 21
54521: PUSH
54522: LD_INT 0
54524: ST_TO_ADDR
// hc_class := class_fish ;
54525: LD_ADDR_OWVAR 28
54529: PUSH
54530: LD_INT 20
54532: ST_TO_ADDR
// hc_gallery :=  ;
54533: LD_ADDR_OWVAR 33
54537: PUSH
54538: LD_STRING 
54540: ST_TO_ADDR
// end ;
54541: LD_VAR 0 1
54545: RET
// export function PrepareBird ( ) ; begin
54546: LD_INT 0
54548: PPUSH
// uc_side := 0 ;
54549: LD_ADDR_OWVAR 20
54553: PUSH
54554: LD_INT 0
54556: ST_TO_ADDR
// uc_nation := 0 ;
54557: LD_ADDR_OWVAR 21
54561: PUSH
54562: LD_INT 0
54564: ST_TO_ADDR
// hc_class := class_phororhacos ;
54565: LD_ADDR_OWVAR 28
54569: PUSH
54570: LD_INT 18
54572: ST_TO_ADDR
// hc_gallery :=  ;
54573: LD_ADDR_OWVAR 33
54577: PUSH
54578: LD_STRING 
54580: ST_TO_ADDR
// end ;
54581: LD_VAR 0 1
54585: RET
// export function PrepareHorse ( ) ; begin
54586: LD_INT 0
54588: PPUSH
// uc_side := 0 ;
54589: LD_ADDR_OWVAR 20
54593: PUSH
54594: LD_INT 0
54596: ST_TO_ADDR
// uc_nation := 0 ;
54597: LD_ADDR_OWVAR 21
54601: PUSH
54602: LD_INT 0
54604: ST_TO_ADDR
// hc_class := class_horse ;
54605: LD_ADDR_OWVAR 28
54609: PUSH
54610: LD_INT 21
54612: ST_TO_ADDR
// hc_gallery :=  ;
54613: LD_ADDR_OWVAR 33
54617: PUSH
54618: LD_STRING 
54620: ST_TO_ADDR
// end ;
54621: LD_VAR 0 1
54625: RET
// export function PrepareMastodont ( ) ; begin
54626: LD_INT 0
54628: PPUSH
// uc_side := 0 ;
54629: LD_ADDR_OWVAR 20
54633: PUSH
54634: LD_INT 0
54636: ST_TO_ADDR
// uc_nation := 0 ;
54637: LD_ADDR_OWVAR 21
54641: PUSH
54642: LD_INT 0
54644: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54645: LD_ADDR_OWVAR 37
54649: PUSH
54650: LD_INT 31
54652: ST_TO_ADDR
// vc_control := control_rider ;
54653: LD_ADDR_OWVAR 38
54657: PUSH
54658: LD_INT 4
54660: ST_TO_ADDR
// end ;
54661: LD_VAR 0 1
54665: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54666: LD_INT 0
54668: PPUSH
54669: PPUSH
54670: PPUSH
// uc_side = 0 ;
54671: LD_ADDR_OWVAR 20
54675: PUSH
54676: LD_INT 0
54678: ST_TO_ADDR
// uc_nation = 0 ;
54679: LD_ADDR_OWVAR 21
54683: PUSH
54684: LD_INT 0
54686: ST_TO_ADDR
// InitHc_All ( ) ;
54687: CALL_OW 584
// InitVc ;
54691: CALL_OW 20
// if mastodonts then
54695: LD_VAR 0 6
54699: IFFALSE 54766
// for i = 1 to mastodonts do
54701: LD_ADDR_VAR 0 11
54705: PUSH
54706: DOUBLE
54707: LD_INT 1
54709: DEC
54710: ST_TO_ADDR
54711: LD_VAR 0 6
54715: PUSH
54716: FOR_TO
54717: IFFALSE 54764
// begin vc_chassis := 31 ;
54719: LD_ADDR_OWVAR 37
54723: PUSH
54724: LD_INT 31
54726: ST_TO_ADDR
// vc_control := control_rider ;
54727: LD_ADDR_OWVAR 38
54731: PUSH
54732: LD_INT 4
54734: ST_TO_ADDR
// animal := CreateVehicle ;
54735: LD_ADDR_VAR 0 12
54739: PUSH
54740: CALL_OW 45
54744: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54745: LD_VAR 0 12
54749: PPUSH
54750: LD_VAR 0 8
54754: PPUSH
54755: LD_INT 0
54757: PPUSH
54758: CALL 56894 0 3
// end ;
54762: GO 54716
54764: POP
54765: POP
// if horses then
54766: LD_VAR 0 5
54770: IFFALSE 54837
// for i = 1 to horses do
54772: LD_ADDR_VAR 0 11
54776: PUSH
54777: DOUBLE
54778: LD_INT 1
54780: DEC
54781: ST_TO_ADDR
54782: LD_VAR 0 5
54786: PUSH
54787: FOR_TO
54788: IFFALSE 54835
// begin hc_class := 21 ;
54790: LD_ADDR_OWVAR 28
54794: PUSH
54795: LD_INT 21
54797: ST_TO_ADDR
// hc_gallery :=  ;
54798: LD_ADDR_OWVAR 33
54802: PUSH
54803: LD_STRING 
54805: ST_TO_ADDR
// animal := CreateHuman ;
54806: LD_ADDR_VAR 0 12
54810: PUSH
54811: CALL_OW 44
54815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54816: LD_VAR 0 12
54820: PPUSH
54821: LD_VAR 0 8
54825: PPUSH
54826: LD_INT 0
54828: PPUSH
54829: CALL 56894 0 3
// end ;
54833: GO 54787
54835: POP
54836: POP
// if birds then
54837: LD_VAR 0 1
54841: IFFALSE 54908
// for i = 1 to birds do
54843: LD_ADDR_VAR 0 11
54847: PUSH
54848: DOUBLE
54849: LD_INT 1
54851: DEC
54852: ST_TO_ADDR
54853: LD_VAR 0 1
54857: PUSH
54858: FOR_TO
54859: IFFALSE 54906
// begin hc_class := 18 ;
54861: LD_ADDR_OWVAR 28
54865: PUSH
54866: LD_INT 18
54868: ST_TO_ADDR
// hc_gallery =  ;
54869: LD_ADDR_OWVAR 33
54873: PUSH
54874: LD_STRING 
54876: ST_TO_ADDR
// animal := CreateHuman ;
54877: LD_ADDR_VAR 0 12
54881: PUSH
54882: CALL_OW 44
54886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54887: LD_VAR 0 12
54891: PPUSH
54892: LD_VAR 0 8
54896: PPUSH
54897: LD_INT 0
54899: PPUSH
54900: CALL 56894 0 3
// end ;
54904: GO 54858
54906: POP
54907: POP
// if tigers then
54908: LD_VAR 0 2
54912: IFFALSE 54996
// for i = 1 to tigers do
54914: LD_ADDR_VAR 0 11
54918: PUSH
54919: DOUBLE
54920: LD_INT 1
54922: DEC
54923: ST_TO_ADDR
54924: LD_VAR 0 2
54928: PUSH
54929: FOR_TO
54930: IFFALSE 54994
// begin hc_class = class_tiger ;
54932: LD_ADDR_OWVAR 28
54936: PUSH
54937: LD_INT 14
54939: ST_TO_ADDR
// hc_gallery =  ;
54940: LD_ADDR_OWVAR 33
54944: PUSH
54945: LD_STRING 
54947: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54948: LD_ADDR_OWVAR 35
54952: PUSH
54953: LD_INT 7
54955: NEG
54956: PPUSH
54957: LD_INT 7
54959: PPUSH
54960: CALL_OW 12
54964: ST_TO_ADDR
// animal := CreateHuman ;
54965: LD_ADDR_VAR 0 12
54969: PUSH
54970: CALL_OW 44
54974: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54975: LD_VAR 0 12
54979: PPUSH
54980: LD_VAR 0 8
54984: PPUSH
54985: LD_INT 0
54987: PPUSH
54988: CALL 56894 0 3
// end ;
54992: GO 54929
54994: POP
54995: POP
// if apemans then
54996: LD_VAR 0 3
55000: IFFALSE 55123
// for i = 1 to apemans do
55002: LD_ADDR_VAR 0 11
55006: PUSH
55007: DOUBLE
55008: LD_INT 1
55010: DEC
55011: ST_TO_ADDR
55012: LD_VAR 0 3
55016: PUSH
55017: FOR_TO
55018: IFFALSE 55121
// begin hc_class = class_apeman ;
55020: LD_ADDR_OWVAR 28
55024: PUSH
55025: LD_INT 12
55027: ST_TO_ADDR
// hc_gallery =  ;
55028: LD_ADDR_OWVAR 33
55032: PUSH
55033: LD_STRING 
55035: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55036: LD_ADDR_OWVAR 35
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PPUSH
55045: LD_INT 2
55047: PPUSH
55048: CALL_OW 12
55052: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55053: LD_ADDR_OWVAR 31
55057: PUSH
55058: LD_INT 1
55060: PPUSH
55061: LD_INT 3
55063: PPUSH
55064: CALL_OW 12
55068: PUSH
55069: LD_INT 1
55071: PPUSH
55072: LD_INT 3
55074: PPUSH
55075: CALL_OW 12
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// animal := CreateHuman ;
55092: LD_ADDR_VAR 0 12
55096: PUSH
55097: CALL_OW 44
55101: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55102: LD_VAR 0 12
55106: PPUSH
55107: LD_VAR 0 8
55111: PPUSH
55112: LD_INT 0
55114: PPUSH
55115: CALL 56894 0 3
// end ;
55119: GO 55017
55121: POP
55122: POP
// if enchidnas then
55123: LD_VAR 0 4
55127: IFFALSE 55194
// for i = 1 to enchidnas do
55129: LD_ADDR_VAR 0 11
55133: PUSH
55134: DOUBLE
55135: LD_INT 1
55137: DEC
55138: ST_TO_ADDR
55139: LD_VAR 0 4
55143: PUSH
55144: FOR_TO
55145: IFFALSE 55192
// begin hc_class = 13 ;
55147: LD_ADDR_OWVAR 28
55151: PUSH
55152: LD_INT 13
55154: ST_TO_ADDR
// hc_gallery =  ;
55155: LD_ADDR_OWVAR 33
55159: PUSH
55160: LD_STRING 
55162: ST_TO_ADDR
// animal := CreateHuman ;
55163: LD_ADDR_VAR 0 12
55167: PUSH
55168: CALL_OW 44
55172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55173: LD_VAR 0 12
55177: PPUSH
55178: LD_VAR 0 8
55182: PPUSH
55183: LD_INT 0
55185: PPUSH
55186: CALL 56894 0 3
// end ;
55190: GO 55144
55192: POP
55193: POP
// if fishes then
55194: LD_VAR 0 7
55198: IFFALSE 55265
// for i = 1 to fishes do
55200: LD_ADDR_VAR 0 11
55204: PUSH
55205: DOUBLE
55206: LD_INT 1
55208: DEC
55209: ST_TO_ADDR
55210: LD_VAR 0 7
55214: PUSH
55215: FOR_TO
55216: IFFALSE 55263
// begin hc_class = 20 ;
55218: LD_ADDR_OWVAR 28
55222: PUSH
55223: LD_INT 20
55225: ST_TO_ADDR
// hc_gallery =  ;
55226: LD_ADDR_OWVAR 33
55230: PUSH
55231: LD_STRING 
55233: ST_TO_ADDR
// animal := CreateHuman ;
55234: LD_ADDR_VAR 0 12
55238: PUSH
55239: CALL_OW 44
55243: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55244: LD_VAR 0 12
55248: PPUSH
55249: LD_VAR 0 9
55253: PPUSH
55254: LD_INT 0
55256: PPUSH
55257: CALL 56894 0 3
// end ;
55261: GO 55215
55263: POP
55264: POP
// end ;
55265: LD_VAR 0 10
55269: RET
// export function WantHeal ( sci , unit ) ; begin
55270: LD_INT 0
55272: PPUSH
// if GetTaskList ( sci ) > 0 then
55273: LD_VAR 0 1
55277: PPUSH
55278: CALL_OW 437
55282: PUSH
55283: LD_INT 0
55285: GREATER
55286: IFFALSE 55356
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55288: LD_VAR 0 1
55292: PPUSH
55293: CALL_OW 437
55297: PUSH
55298: LD_INT 1
55300: ARRAY
55301: PUSH
55302: LD_INT 1
55304: ARRAY
55305: PUSH
55306: LD_STRING l
55308: EQUAL
55309: PUSH
55310: LD_VAR 0 1
55314: PPUSH
55315: CALL_OW 437
55319: PUSH
55320: LD_INT 1
55322: ARRAY
55323: PUSH
55324: LD_INT 4
55326: ARRAY
55327: PUSH
55328: LD_VAR 0 2
55332: EQUAL
55333: AND
55334: IFFALSE 55346
// result := true else
55336: LD_ADDR_VAR 0 3
55340: PUSH
55341: LD_INT 1
55343: ST_TO_ADDR
55344: GO 55354
// result := false ;
55346: LD_ADDR_VAR 0 3
55350: PUSH
55351: LD_INT 0
55353: ST_TO_ADDR
// end else
55354: GO 55364
// result := false ;
55356: LD_ADDR_VAR 0 3
55360: PUSH
55361: LD_INT 0
55363: ST_TO_ADDR
// end ;
55364: LD_VAR 0 3
55368: RET
// export function HealTarget ( sci ) ; begin
55369: LD_INT 0
55371: PPUSH
// if not sci then
55372: LD_VAR 0 1
55376: NOT
55377: IFFALSE 55381
// exit ;
55379: GO 55446
// result := 0 ;
55381: LD_ADDR_VAR 0 2
55385: PUSH
55386: LD_INT 0
55388: ST_TO_ADDR
// if GetTaskList ( sci ) then
55389: LD_VAR 0 1
55393: PPUSH
55394: CALL_OW 437
55398: IFFALSE 55446
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55400: LD_VAR 0 1
55404: PPUSH
55405: CALL_OW 437
55409: PUSH
55410: LD_INT 1
55412: ARRAY
55413: PUSH
55414: LD_INT 1
55416: ARRAY
55417: PUSH
55418: LD_STRING l
55420: EQUAL
55421: IFFALSE 55446
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55423: LD_ADDR_VAR 0 2
55427: PUSH
55428: LD_VAR 0 1
55432: PPUSH
55433: CALL_OW 437
55437: PUSH
55438: LD_INT 1
55440: ARRAY
55441: PUSH
55442: LD_INT 4
55444: ARRAY
55445: ST_TO_ADDR
// end ;
55446: LD_VAR 0 2
55450: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55451: LD_INT 0
55453: PPUSH
55454: PPUSH
55455: PPUSH
55456: PPUSH
// if not base_units then
55457: LD_VAR 0 1
55461: NOT
55462: IFFALSE 55466
// exit ;
55464: GO 55553
// result := false ;
55466: LD_ADDR_VAR 0 2
55470: PUSH
55471: LD_INT 0
55473: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55474: LD_ADDR_VAR 0 5
55478: PUSH
55479: LD_VAR 0 1
55483: PPUSH
55484: LD_INT 21
55486: PUSH
55487: LD_INT 3
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PPUSH
55494: CALL_OW 72
55498: ST_TO_ADDR
// if not tmp then
55499: LD_VAR 0 5
55503: NOT
55504: IFFALSE 55508
// exit ;
55506: GO 55553
// for i in tmp do
55508: LD_ADDR_VAR 0 3
55512: PUSH
55513: LD_VAR 0 5
55517: PUSH
55518: FOR_IN
55519: IFFALSE 55551
// begin result := EnemyInRange ( i , 22 ) ;
55521: LD_ADDR_VAR 0 2
55525: PUSH
55526: LD_VAR 0 3
55530: PPUSH
55531: LD_INT 22
55533: PPUSH
55534: CALL 53151 0 2
55538: ST_TO_ADDR
// if result then
55539: LD_VAR 0 2
55543: IFFALSE 55549
// exit ;
55545: POP
55546: POP
55547: GO 55553
// end ;
55549: GO 55518
55551: POP
55552: POP
// end ;
55553: LD_VAR 0 2
55557: RET
// export function FilterByTag ( units , tag ) ; begin
55558: LD_INT 0
55560: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55561: LD_ADDR_VAR 0 3
55565: PUSH
55566: LD_VAR 0 1
55570: PPUSH
55571: LD_INT 120
55573: PUSH
55574: LD_VAR 0 2
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PPUSH
55583: CALL_OW 72
55587: ST_TO_ADDR
// end ;
55588: LD_VAR 0 3
55592: RET
// export function IsDriver ( un ) ; begin
55593: LD_INT 0
55595: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55596: LD_ADDR_VAR 0 2
55600: PUSH
55601: LD_VAR 0 1
55605: PUSH
55606: LD_INT 55
55608: PUSH
55609: EMPTY
55610: LIST
55611: PPUSH
55612: CALL_OW 69
55616: IN
55617: ST_TO_ADDR
// end ;
55618: LD_VAR 0 2
55622: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55623: LD_INT 0
55625: PPUSH
55626: PPUSH
// list := [ ] ;
55627: LD_ADDR_VAR 0 5
55631: PUSH
55632: EMPTY
55633: ST_TO_ADDR
// case d of 0 :
55634: LD_VAR 0 3
55638: PUSH
55639: LD_INT 0
55641: DOUBLE
55642: EQUAL
55643: IFTRUE 55647
55645: GO 55780
55647: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55648: LD_ADDR_VAR 0 5
55652: PUSH
55653: LD_VAR 0 1
55657: PUSH
55658: LD_INT 4
55660: MINUS
55661: PUSH
55662: LD_VAR 0 2
55666: PUSH
55667: LD_INT 4
55669: MINUS
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: LIST
55678: PUSH
55679: LD_VAR 0 1
55683: PUSH
55684: LD_INT 3
55686: MINUS
55687: PUSH
55688: LD_VAR 0 2
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: PUSH
55701: LD_VAR 0 1
55705: PUSH
55706: LD_INT 4
55708: PLUS
55709: PUSH
55710: LD_VAR 0 2
55714: PUSH
55715: LD_INT 4
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: LIST
55722: PUSH
55723: LD_VAR 0 1
55727: PUSH
55728: LD_INT 3
55730: PLUS
55731: PUSH
55732: LD_VAR 0 2
55736: PUSH
55737: LD_INT 3
55739: PLUS
55740: PUSH
55741: LD_INT 5
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: PUSH
55749: LD_VAR 0 1
55753: PUSH
55754: LD_VAR 0 2
55758: PUSH
55759: LD_INT 4
55761: PLUS
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: ST_TO_ADDR
// end ; 1 :
55778: GO 56478
55780: LD_INT 1
55782: DOUBLE
55783: EQUAL
55784: IFTRUE 55788
55786: GO 55921
55788: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55789: LD_ADDR_VAR 0 5
55793: PUSH
55794: LD_VAR 0 1
55798: PUSH
55799: LD_VAR 0 2
55803: PUSH
55804: LD_INT 4
55806: MINUS
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: PUSH
55816: LD_VAR 0 1
55820: PUSH
55821: LD_INT 3
55823: MINUS
55824: PUSH
55825: LD_VAR 0 2
55829: PUSH
55830: LD_INT 3
55832: MINUS
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: PUSH
55842: LD_VAR 0 1
55846: PUSH
55847: LD_INT 4
55849: MINUS
55850: PUSH
55851: LD_VAR 0 2
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: PUSH
55864: LD_VAR 0 1
55868: PUSH
55869: LD_VAR 0 2
55873: PUSH
55874: LD_INT 3
55876: PLUS
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: LIST
55885: PUSH
55886: LD_VAR 0 1
55890: PUSH
55891: LD_INT 4
55893: PLUS
55894: PUSH
55895: LD_VAR 0 2
55899: PUSH
55900: LD_INT 4
55902: PLUS
55903: PUSH
55904: LD_INT 5
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: LIST
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// end ; 2 :
55919: GO 56478
55921: LD_INT 2
55923: DOUBLE
55924: EQUAL
55925: IFTRUE 55929
55927: GO 56058
55929: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55930: LD_ADDR_VAR 0 5
55934: PUSH
55935: LD_VAR 0 1
55939: PUSH
55940: LD_VAR 0 2
55944: PUSH
55945: LD_INT 3
55947: MINUS
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: PUSH
55957: LD_VAR 0 1
55961: PUSH
55962: LD_INT 4
55964: PLUS
55965: PUSH
55966: LD_VAR 0 2
55970: PUSH
55971: LD_INT 4
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: PUSH
55979: LD_VAR 0 1
55983: PUSH
55984: LD_VAR 0 2
55988: PUSH
55989: LD_INT 4
55991: PLUS
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: PUSH
56001: LD_VAR 0 1
56005: PUSH
56006: LD_INT 3
56008: MINUS
56009: PUSH
56010: LD_VAR 0 2
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: LIST
56022: PUSH
56023: LD_VAR 0 1
56027: PUSH
56028: LD_INT 4
56030: MINUS
56031: PUSH
56032: LD_VAR 0 2
56036: PUSH
56037: LD_INT 4
56039: MINUS
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// end ; 3 :
56056: GO 56478
56058: LD_INT 3
56060: DOUBLE
56061: EQUAL
56062: IFTRUE 56066
56064: GO 56199
56066: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56067: LD_ADDR_VAR 0 5
56071: PUSH
56072: LD_VAR 0 1
56076: PUSH
56077: LD_INT 3
56079: PLUS
56080: PUSH
56081: LD_VAR 0 2
56085: PUSH
56086: LD_INT 4
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: LIST
56093: PUSH
56094: LD_VAR 0 1
56098: PUSH
56099: LD_INT 4
56101: PLUS
56102: PUSH
56103: LD_VAR 0 2
56107: PUSH
56108: LD_INT 4
56110: PLUS
56111: PUSH
56112: LD_INT 5
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: PUSH
56120: LD_VAR 0 1
56124: PUSH
56125: LD_INT 4
56127: MINUS
56128: PUSH
56129: LD_VAR 0 2
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: LIST
56141: PUSH
56142: LD_VAR 0 1
56146: PUSH
56147: LD_VAR 0 2
56151: PUSH
56152: LD_INT 4
56154: MINUS
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: PUSH
56164: LD_VAR 0 1
56168: PUSH
56169: LD_INT 3
56171: MINUS
56172: PUSH
56173: LD_VAR 0 2
56177: PUSH
56178: LD_INT 3
56180: MINUS
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// end ; 4 :
56197: GO 56478
56199: LD_INT 4
56201: DOUBLE
56202: EQUAL
56203: IFTRUE 56207
56205: GO 56340
56207: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56208: LD_ADDR_VAR 0 5
56212: PUSH
56213: LD_VAR 0 1
56217: PUSH
56218: LD_VAR 0 2
56222: PUSH
56223: LD_INT 4
56225: PLUS
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: LIST
56234: PUSH
56235: LD_VAR 0 1
56239: PUSH
56240: LD_INT 3
56242: PLUS
56243: PUSH
56244: LD_VAR 0 2
56248: PUSH
56249: LD_INT 3
56251: PLUS
56252: PUSH
56253: LD_INT 5
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: PUSH
56261: LD_VAR 0 1
56265: PUSH
56266: LD_INT 4
56268: PLUS
56269: PUSH
56270: LD_VAR 0 2
56274: PUSH
56275: LD_INT 4
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: PUSH
56283: LD_VAR 0 1
56287: PUSH
56288: LD_VAR 0 2
56292: PUSH
56293: LD_INT 3
56295: MINUS
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: PUSH
56305: LD_VAR 0 1
56309: PUSH
56310: LD_INT 4
56312: MINUS
56313: PUSH
56314: LD_VAR 0 2
56318: PUSH
56319: LD_INT 4
56321: MINUS
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: LIST
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: ST_TO_ADDR
// end ; 5 :
56338: GO 56478
56340: LD_INT 5
56342: DOUBLE
56343: EQUAL
56344: IFTRUE 56348
56346: GO 56477
56348: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56349: LD_ADDR_VAR 0 5
56353: PUSH
56354: LD_VAR 0 1
56358: PUSH
56359: LD_INT 4
56361: MINUS
56362: PUSH
56363: LD_VAR 0 2
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: LIST
56375: PUSH
56376: LD_VAR 0 1
56380: PUSH
56381: LD_VAR 0 2
56385: PUSH
56386: LD_INT 4
56388: MINUS
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: PUSH
56398: LD_VAR 0 1
56402: PUSH
56403: LD_INT 4
56405: PLUS
56406: PUSH
56407: LD_VAR 0 2
56411: PUSH
56412: LD_INT 4
56414: PLUS
56415: PUSH
56416: LD_INT 5
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: PUSH
56424: LD_VAR 0 1
56428: PUSH
56429: LD_INT 3
56431: PLUS
56432: PUSH
56433: LD_VAR 0 2
56437: PUSH
56438: LD_INT 4
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: PUSH
56446: LD_VAR 0 1
56450: PUSH
56451: LD_VAR 0 2
56455: PUSH
56456: LD_INT 3
56458: PLUS
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: ST_TO_ADDR
// end ; end ;
56475: GO 56478
56477: POP
// result := list ;
56478: LD_ADDR_VAR 0 4
56482: PUSH
56483: LD_VAR 0 5
56487: ST_TO_ADDR
// end ;
56488: LD_VAR 0 4
56492: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56493: LD_INT 0
56495: PPUSH
56496: PPUSH
56497: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56498: LD_VAR 0 1
56502: NOT
56503: PUSH
56504: LD_VAR 0 2
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 2
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: LD_INT 4
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: IN
56527: NOT
56528: OR
56529: IFFALSE 56533
// exit ;
56531: GO 56616
// tmp := [ ] ;
56533: LD_ADDR_VAR 0 5
56537: PUSH
56538: EMPTY
56539: ST_TO_ADDR
// for i in units do
56540: LD_ADDR_VAR 0 4
56544: PUSH
56545: LD_VAR 0 1
56549: PUSH
56550: FOR_IN
56551: IFFALSE 56585
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56553: LD_ADDR_VAR 0 5
56557: PUSH
56558: LD_VAR 0 5
56562: PPUSH
56563: LD_VAR 0 4
56567: PPUSH
56568: LD_VAR 0 2
56572: PPUSH
56573: CALL_OW 259
56577: PPUSH
56578: CALL 57989 0 2
56582: ST_TO_ADDR
56583: GO 56550
56585: POP
56586: POP
// if not tmp then
56587: LD_VAR 0 5
56591: NOT
56592: IFFALSE 56596
// exit ;
56594: GO 56616
// result := SortListByListDesc ( units , tmp ) ;
56596: LD_ADDR_VAR 0 3
56600: PUSH
56601: LD_VAR 0 1
56605: PPUSH
56606: LD_VAR 0 5
56610: PPUSH
56611: CALL_OW 77
56615: ST_TO_ADDR
// end ;
56616: LD_VAR 0 3
56620: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56621: LD_INT 0
56623: PPUSH
56624: PPUSH
56625: PPUSH
// result := false ;
56626: LD_ADDR_VAR 0 3
56630: PUSH
56631: LD_INT 0
56633: ST_TO_ADDR
// if not building then
56634: LD_VAR 0 2
56638: NOT
56639: IFFALSE 56643
// exit ;
56641: GO 56781
// x := GetX ( building ) ;
56643: LD_ADDR_VAR 0 4
56647: PUSH
56648: LD_VAR 0 2
56652: PPUSH
56653: CALL_OW 250
56657: ST_TO_ADDR
// y := GetY ( building ) ;
56658: LD_ADDR_VAR 0 5
56662: PUSH
56663: LD_VAR 0 2
56667: PPUSH
56668: CALL_OW 251
56672: ST_TO_ADDR
// if not x or not y then
56673: LD_VAR 0 4
56677: NOT
56678: PUSH
56679: LD_VAR 0 5
56683: NOT
56684: OR
56685: IFFALSE 56689
// exit ;
56687: GO 56781
// if GetTaskList ( unit ) then
56689: LD_VAR 0 1
56693: PPUSH
56694: CALL_OW 437
56698: IFFALSE 56781
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56700: LD_STRING e
56702: PUSH
56703: LD_VAR 0 1
56707: PPUSH
56708: CALL_OW 437
56712: PUSH
56713: LD_INT 1
56715: ARRAY
56716: PUSH
56717: LD_INT 1
56719: ARRAY
56720: EQUAL
56721: PUSH
56722: LD_VAR 0 4
56726: PUSH
56727: LD_VAR 0 1
56731: PPUSH
56732: CALL_OW 437
56736: PUSH
56737: LD_INT 1
56739: ARRAY
56740: PUSH
56741: LD_INT 2
56743: ARRAY
56744: EQUAL
56745: AND
56746: PUSH
56747: LD_VAR 0 5
56751: PUSH
56752: LD_VAR 0 1
56756: PPUSH
56757: CALL_OW 437
56761: PUSH
56762: LD_INT 1
56764: ARRAY
56765: PUSH
56766: LD_INT 3
56768: ARRAY
56769: EQUAL
56770: AND
56771: IFFALSE 56781
// result := true end ;
56773: LD_ADDR_VAR 0 3
56777: PUSH
56778: LD_INT 1
56780: ST_TO_ADDR
// end ;
56781: LD_VAR 0 3
56785: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56786: LD_INT 0
56788: PPUSH
// result := false ;
56789: LD_ADDR_VAR 0 4
56793: PUSH
56794: LD_INT 0
56796: ST_TO_ADDR
// if GetTaskList ( unit ) then
56797: LD_VAR 0 1
56801: PPUSH
56802: CALL_OW 437
56806: IFFALSE 56889
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56808: LD_STRING M
56810: PUSH
56811: LD_VAR 0 1
56815: PPUSH
56816: CALL_OW 437
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PUSH
56825: LD_INT 1
56827: ARRAY
56828: EQUAL
56829: PUSH
56830: LD_VAR 0 2
56834: PUSH
56835: LD_VAR 0 1
56839: PPUSH
56840: CALL_OW 437
56844: PUSH
56845: LD_INT 1
56847: ARRAY
56848: PUSH
56849: LD_INT 2
56851: ARRAY
56852: EQUAL
56853: AND
56854: PUSH
56855: LD_VAR 0 3
56859: PUSH
56860: LD_VAR 0 1
56864: PPUSH
56865: CALL_OW 437
56869: PUSH
56870: LD_INT 1
56872: ARRAY
56873: PUSH
56874: LD_INT 3
56876: ARRAY
56877: EQUAL
56878: AND
56879: IFFALSE 56889
// result := true ;
56881: LD_ADDR_VAR 0 4
56885: PUSH
56886: LD_INT 1
56888: ST_TO_ADDR
// end ; end ;
56889: LD_VAR 0 4
56893: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56894: LD_INT 0
56896: PPUSH
56897: PPUSH
56898: PPUSH
56899: PPUSH
// if not unit or not area then
56900: LD_VAR 0 1
56904: NOT
56905: PUSH
56906: LD_VAR 0 2
56910: NOT
56911: OR
56912: IFFALSE 56916
// exit ;
56914: GO 57092
// tmp := AreaToList ( area , i ) ;
56916: LD_ADDR_VAR 0 6
56920: PUSH
56921: LD_VAR 0 2
56925: PPUSH
56926: LD_VAR 0 5
56930: PPUSH
56931: CALL_OW 517
56935: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56936: LD_ADDR_VAR 0 5
56940: PUSH
56941: DOUBLE
56942: LD_INT 1
56944: DEC
56945: ST_TO_ADDR
56946: LD_VAR 0 6
56950: PUSH
56951: LD_INT 1
56953: ARRAY
56954: PUSH
56955: FOR_TO
56956: IFFALSE 57090
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56958: LD_ADDR_VAR 0 7
56962: PUSH
56963: LD_VAR 0 6
56967: PUSH
56968: LD_INT 1
56970: ARRAY
56971: PUSH
56972: LD_VAR 0 5
56976: ARRAY
56977: PUSH
56978: LD_VAR 0 6
56982: PUSH
56983: LD_INT 2
56985: ARRAY
56986: PUSH
56987: LD_VAR 0 5
56991: ARRAY
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
56997: LD_INT 92
56999: PUSH
57000: LD_VAR 0 7
57004: PUSH
57005: LD_INT 1
57007: ARRAY
57008: PUSH
57009: LD_VAR 0 7
57013: PUSH
57014: LD_INT 2
57016: ARRAY
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: PPUSH
57027: CALL_OW 69
57031: PUSH
57032: LD_INT 0
57034: EQUAL
57035: IFFALSE 57088
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57037: LD_VAR 0 1
57041: PPUSH
57042: LD_VAR 0 7
57046: PUSH
57047: LD_INT 1
57049: ARRAY
57050: PPUSH
57051: LD_VAR 0 7
57055: PUSH
57056: LD_INT 2
57058: ARRAY
57059: PPUSH
57060: LD_VAR 0 3
57064: PPUSH
57065: CALL_OW 48
// result := IsPlaced ( unit ) ;
57069: LD_ADDR_VAR 0 4
57073: PUSH
57074: LD_VAR 0 1
57078: PPUSH
57079: CALL_OW 305
57083: ST_TO_ADDR
// exit ;
57084: POP
57085: POP
57086: GO 57092
// end ; end ;
57088: GO 56955
57090: POP
57091: POP
// end ;
57092: LD_VAR 0 4
57096: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57097: LD_INT 0
57099: PPUSH
57100: PPUSH
57101: PPUSH
// if not side or side > 8 then
57102: LD_VAR 0 1
57106: NOT
57107: PUSH
57108: LD_VAR 0 1
57112: PUSH
57113: LD_INT 8
57115: GREATER
57116: OR
57117: IFFALSE 57121
// exit ;
57119: GO 57308
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57121: LD_ADDR_VAR 0 4
57125: PUSH
57126: LD_INT 22
57128: PUSH
57129: LD_VAR 0 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 21
57140: PUSH
57141: LD_INT 3
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PPUSH
57152: CALL_OW 69
57156: ST_TO_ADDR
// if not tmp then
57157: LD_VAR 0 4
57161: NOT
57162: IFFALSE 57166
// exit ;
57164: GO 57308
// enable_addtolog := true ;
57166: LD_ADDR_OWVAR 81
57170: PUSH
57171: LD_INT 1
57173: ST_TO_ADDR
// AddToLog ( [ ) ;
57174: LD_STRING [
57176: PPUSH
57177: CALL_OW 561
// for i in tmp do
57181: LD_ADDR_VAR 0 3
57185: PUSH
57186: LD_VAR 0 4
57190: PUSH
57191: FOR_IN
57192: IFFALSE 57299
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57194: LD_STRING [
57196: PUSH
57197: LD_VAR 0 3
57201: PPUSH
57202: CALL_OW 266
57206: STR
57207: PUSH
57208: LD_STRING , 
57210: STR
57211: PUSH
57212: LD_VAR 0 3
57216: PPUSH
57217: CALL_OW 250
57221: STR
57222: PUSH
57223: LD_STRING , 
57225: STR
57226: PUSH
57227: LD_VAR 0 3
57231: PPUSH
57232: CALL_OW 251
57236: STR
57237: PUSH
57238: LD_STRING , 
57240: STR
57241: PUSH
57242: LD_VAR 0 3
57246: PPUSH
57247: CALL_OW 254
57251: STR
57252: PUSH
57253: LD_STRING , 
57255: STR
57256: PUSH
57257: LD_VAR 0 3
57261: PPUSH
57262: LD_INT 1
57264: PPUSH
57265: CALL_OW 268
57269: STR
57270: PUSH
57271: LD_STRING , 
57273: STR
57274: PUSH
57275: LD_VAR 0 3
57279: PPUSH
57280: LD_INT 2
57282: PPUSH
57283: CALL_OW 268
57287: STR
57288: PUSH
57289: LD_STRING ],
57291: STR
57292: PPUSH
57293: CALL_OW 561
// end ;
57297: GO 57191
57299: POP
57300: POP
// AddToLog ( ]; ) ;
57301: LD_STRING ];
57303: PPUSH
57304: CALL_OW 561
// end ;
57308: LD_VAR 0 2
57312: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57313: LD_INT 0
57315: PPUSH
57316: PPUSH
57317: PPUSH
57318: PPUSH
57319: PPUSH
// if not area or not rate or not max then
57320: LD_VAR 0 1
57324: NOT
57325: PUSH
57326: LD_VAR 0 2
57330: NOT
57331: OR
57332: PUSH
57333: LD_VAR 0 4
57337: NOT
57338: OR
57339: IFFALSE 57343
// exit ;
57341: GO 57532
// while 1 do
57343: LD_INT 1
57345: IFFALSE 57532
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57347: LD_ADDR_VAR 0 9
57351: PUSH
57352: LD_VAR 0 1
57356: PPUSH
57357: LD_INT 1
57359: PPUSH
57360: CALL_OW 287
57364: PUSH
57365: LD_INT 10
57367: MUL
57368: ST_TO_ADDR
// r := rate / 10 ;
57369: LD_ADDR_VAR 0 7
57373: PUSH
57374: LD_VAR 0 2
57378: PUSH
57379: LD_INT 10
57381: DIVREAL
57382: ST_TO_ADDR
// time := 1 1$00 ;
57383: LD_ADDR_VAR 0 8
57387: PUSH
57388: LD_INT 2100
57390: ST_TO_ADDR
// if amount < min then
57391: LD_VAR 0 9
57395: PUSH
57396: LD_VAR 0 3
57400: LESS
57401: IFFALSE 57419
// r := r * 2 else
57403: LD_ADDR_VAR 0 7
57407: PUSH
57408: LD_VAR 0 7
57412: PUSH
57413: LD_INT 2
57415: MUL
57416: ST_TO_ADDR
57417: GO 57445
// if amount > max then
57419: LD_VAR 0 9
57423: PUSH
57424: LD_VAR 0 4
57428: GREATER
57429: IFFALSE 57445
// r := r / 2 ;
57431: LD_ADDR_VAR 0 7
57435: PUSH
57436: LD_VAR 0 7
57440: PUSH
57441: LD_INT 2
57443: DIVREAL
57444: ST_TO_ADDR
// time := time / r ;
57445: LD_ADDR_VAR 0 8
57449: PUSH
57450: LD_VAR 0 8
57454: PUSH
57455: LD_VAR 0 7
57459: DIVREAL
57460: ST_TO_ADDR
// if time < 0 then
57461: LD_VAR 0 8
57465: PUSH
57466: LD_INT 0
57468: LESS
57469: IFFALSE 57486
// time := time * - 1 ;
57471: LD_ADDR_VAR 0 8
57475: PUSH
57476: LD_VAR 0 8
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: MUL
57485: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57486: LD_VAR 0 8
57490: PUSH
57491: LD_INT 35
57493: PPUSH
57494: LD_INT 875
57496: PPUSH
57497: CALL_OW 12
57501: PLUS
57502: PPUSH
57503: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57507: LD_INT 1
57509: PPUSH
57510: LD_INT 5
57512: PPUSH
57513: CALL_OW 12
57517: PPUSH
57518: LD_VAR 0 1
57522: PPUSH
57523: LD_INT 1
57525: PPUSH
57526: CALL_OW 55
// end ;
57530: GO 57343
// end ;
57532: LD_VAR 0 5
57536: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57537: LD_INT 0
57539: PPUSH
57540: PPUSH
57541: PPUSH
57542: PPUSH
57543: PPUSH
57544: PPUSH
57545: PPUSH
57546: PPUSH
// if not turrets or not factories then
57547: LD_VAR 0 1
57551: NOT
57552: PUSH
57553: LD_VAR 0 2
57557: NOT
57558: OR
57559: IFFALSE 57563
// exit ;
57561: GO 57870
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57563: LD_ADDR_VAR 0 10
57567: PUSH
57568: LD_INT 5
57570: PUSH
57571: LD_INT 6
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 5
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 24
57605: PUSH
57606: LD_INT 25
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 23
57615: PUSH
57616: LD_INT 27
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 42
57629: PUSH
57630: LD_INT 43
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 44
57639: PUSH
57640: LD_INT 46
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 45
57649: PUSH
57650: LD_INT 47
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// result := [ ] ;
57667: LD_ADDR_VAR 0 3
57671: PUSH
57672: EMPTY
57673: ST_TO_ADDR
// for i in turrets do
57674: LD_ADDR_VAR 0 4
57678: PUSH
57679: LD_VAR 0 1
57683: PUSH
57684: FOR_IN
57685: IFFALSE 57868
// begin nat := GetNation ( i ) ;
57687: LD_ADDR_VAR 0 7
57691: PUSH
57692: LD_VAR 0 4
57696: PPUSH
57697: CALL_OW 248
57701: ST_TO_ADDR
// weapon := 0 ;
57702: LD_ADDR_VAR 0 8
57706: PUSH
57707: LD_INT 0
57709: ST_TO_ADDR
// if not nat then
57710: LD_VAR 0 7
57714: NOT
57715: IFFALSE 57719
// continue ;
57717: GO 57684
// for j in list [ nat ] do
57719: LD_ADDR_VAR 0 5
57723: PUSH
57724: LD_VAR 0 10
57728: PUSH
57729: LD_VAR 0 7
57733: ARRAY
57734: PUSH
57735: FOR_IN
57736: IFFALSE 57777
// if GetBWeapon ( i ) = j [ 1 ] then
57738: LD_VAR 0 4
57742: PPUSH
57743: CALL_OW 269
57747: PUSH
57748: LD_VAR 0 5
57752: PUSH
57753: LD_INT 1
57755: ARRAY
57756: EQUAL
57757: IFFALSE 57775
// begin weapon := j [ 2 ] ;
57759: LD_ADDR_VAR 0 8
57763: PUSH
57764: LD_VAR 0 5
57768: PUSH
57769: LD_INT 2
57771: ARRAY
57772: ST_TO_ADDR
// break ;
57773: GO 57777
// end ;
57775: GO 57735
57777: POP
57778: POP
// if not weapon then
57779: LD_VAR 0 8
57783: NOT
57784: IFFALSE 57788
// continue ;
57786: GO 57684
// for k in factories do
57788: LD_ADDR_VAR 0 6
57792: PUSH
57793: LD_VAR 0 2
57797: PUSH
57798: FOR_IN
57799: IFFALSE 57864
// begin weapons := AvailableWeaponList ( k ) ;
57801: LD_ADDR_VAR 0 9
57805: PUSH
57806: LD_VAR 0 6
57810: PPUSH
57811: CALL_OW 478
57815: ST_TO_ADDR
// if not weapons then
57816: LD_VAR 0 9
57820: NOT
57821: IFFALSE 57825
// continue ;
57823: GO 57798
// if weapon in weapons then
57825: LD_VAR 0 8
57829: PUSH
57830: LD_VAR 0 9
57834: IN
57835: IFFALSE 57862
// begin result := [ i , weapon ] ;
57837: LD_ADDR_VAR 0 3
57841: PUSH
57842: LD_VAR 0 4
57846: PUSH
57847: LD_VAR 0 8
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: ST_TO_ADDR
// exit ;
57856: POP
57857: POP
57858: POP
57859: POP
57860: GO 57870
// end ; end ;
57862: GO 57798
57864: POP
57865: POP
// end ;
57866: GO 57684
57868: POP
57869: POP
// end ;
57870: LD_VAR 0 3
57874: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57875: LD_INT 0
57877: PPUSH
// if not side or side > 8 then
57878: LD_VAR 0 3
57882: NOT
57883: PUSH
57884: LD_VAR 0 3
57888: PUSH
57889: LD_INT 8
57891: GREATER
57892: OR
57893: IFFALSE 57897
// exit ;
57895: GO 57956
// if not range then
57897: LD_VAR 0 4
57901: NOT
57902: IFFALSE 57913
// range := - 12 ;
57904: LD_ADDR_VAR 0 4
57908: PUSH
57909: LD_INT 12
57911: NEG
57912: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57913: LD_VAR 0 1
57917: PPUSH
57918: LD_VAR 0 2
57922: PPUSH
57923: LD_VAR 0 3
57927: PPUSH
57928: LD_VAR 0 4
57932: PPUSH
57933: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57937: LD_VAR 0 1
57941: PPUSH
57942: LD_VAR 0 2
57946: PPUSH
57947: LD_VAR 0 3
57951: PPUSH
57952: CALL_OW 331
// end ;
57956: LD_VAR 0 5
57960: RET
// export function Video ( mode ) ; begin
57961: LD_INT 0
57963: PPUSH
// ingame_video = mode ;
57964: LD_ADDR_OWVAR 52
57968: PUSH
57969: LD_VAR 0 1
57973: ST_TO_ADDR
// interface_hidden = mode ;
57974: LD_ADDR_OWVAR 54
57978: PUSH
57979: LD_VAR 0 1
57983: ST_TO_ADDR
// end ;
57984: LD_VAR 0 2
57988: RET
// export function Join ( array , element ) ; begin
57989: LD_INT 0
57991: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57992: LD_ADDR_VAR 0 3
57996: PUSH
57997: LD_VAR 0 1
58001: PPUSH
58002: LD_VAR 0 1
58006: PUSH
58007: LD_INT 1
58009: PLUS
58010: PPUSH
58011: LD_VAR 0 2
58015: PPUSH
58016: CALL_OW 1
58020: ST_TO_ADDR
// end ;
58021: LD_VAR 0 3
58025: RET
// export function JoinUnion ( array , element ) ; begin
58026: LD_INT 0
58028: PPUSH
// result := array union element ;
58029: LD_ADDR_VAR 0 3
58033: PUSH
58034: LD_VAR 0 1
58038: PUSH
58039: LD_VAR 0 2
58043: UNION
58044: ST_TO_ADDR
// end ;
58045: LD_VAR 0 3
58049: RET
// export function GetBehemoths ( side ) ; begin
58050: LD_INT 0
58052: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58053: LD_ADDR_VAR 0 2
58057: PUSH
58058: LD_INT 22
58060: PUSH
58061: LD_VAR 0 1
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 31
58072: PUSH
58073: LD_INT 25
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PPUSH
58084: CALL_OW 69
58088: ST_TO_ADDR
// end ;
58089: LD_VAR 0 2
58093: RET
// export function Shuffle ( array ) ; var i , index ; begin
58094: LD_INT 0
58096: PPUSH
58097: PPUSH
58098: PPUSH
// result := [ ] ;
58099: LD_ADDR_VAR 0 2
58103: PUSH
58104: EMPTY
58105: ST_TO_ADDR
// if not array then
58106: LD_VAR 0 1
58110: NOT
58111: IFFALSE 58115
// exit ;
58113: GO 58214
// Randomize ;
58115: CALL_OW 10
// for i = array downto 1 do
58119: LD_ADDR_VAR 0 3
58123: PUSH
58124: DOUBLE
58125: LD_VAR 0 1
58129: INC
58130: ST_TO_ADDR
58131: LD_INT 1
58133: PUSH
58134: FOR_DOWNTO
58135: IFFALSE 58212
// begin index := rand ( 1 , array ) ;
58137: LD_ADDR_VAR 0 4
58141: PUSH
58142: LD_INT 1
58144: PPUSH
58145: LD_VAR 0 1
58149: PPUSH
58150: CALL_OW 12
58154: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58155: LD_ADDR_VAR 0 2
58159: PUSH
58160: LD_VAR 0 2
58164: PPUSH
58165: LD_VAR 0 2
58169: PUSH
58170: LD_INT 1
58172: PLUS
58173: PPUSH
58174: LD_VAR 0 1
58178: PUSH
58179: LD_VAR 0 4
58183: ARRAY
58184: PPUSH
58185: CALL_OW 2
58189: ST_TO_ADDR
// array := Delete ( array , index ) ;
58190: LD_ADDR_VAR 0 1
58194: PUSH
58195: LD_VAR 0 1
58199: PPUSH
58200: LD_VAR 0 4
58204: PPUSH
58205: CALL_OW 3
58209: ST_TO_ADDR
// end ;
58210: GO 58134
58212: POP
58213: POP
// end ;
58214: LD_VAR 0 2
58218: RET
// export function GetBaseMaterials ( base ) ; begin
58219: LD_INT 0
58221: PPUSH
// result := [ 0 , 0 , 0 ] ;
58222: LD_ADDR_VAR 0 2
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 0
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// if not base then
58241: LD_VAR 0 1
58245: NOT
58246: IFFALSE 58250
// exit ;
58248: GO 58299
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58250: LD_ADDR_VAR 0 2
58254: PUSH
58255: LD_VAR 0 1
58259: PPUSH
58260: LD_INT 1
58262: PPUSH
58263: CALL_OW 275
58267: PUSH
58268: LD_VAR 0 1
58272: PPUSH
58273: LD_INT 2
58275: PPUSH
58276: CALL_OW 275
58280: PUSH
58281: LD_VAR 0 1
58285: PPUSH
58286: LD_INT 3
58288: PPUSH
58289: CALL_OW 275
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: ST_TO_ADDR
// end ;
58299: LD_VAR 0 2
58303: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58304: LD_INT 0
58306: PPUSH
58307: PPUSH
// result := array ;
58308: LD_ADDR_VAR 0 3
58312: PUSH
58313: LD_VAR 0 1
58317: ST_TO_ADDR
// if size >= result then
58318: LD_VAR 0 2
58322: PUSH
58323: LD_VAR 0 3
58327: GREATEREQUAL
58328: IFFALSE 58332
// exit ;
58330: GO 58382
// if size then
58332: LD_VAR 0 2
58336: IFFALSE 58382
// for i := array downto size do
58338: LD_ADDR_VAR 0 4
58342: PUSH
58343: DOUBLE
58344: LD_VAR 0 1
58348: INC
58349: ST_TO_ADDR
58350: LD_VAR 0 2
58354: PUSH
58355: FOR_DOWNTO
58356: IFFALSE 58380
// result := Delete ( result , result ) ;
58358: LD_ADDR_VAR 0 3
58362: PUSH
58363: LD_VAR 0 3
58367: PPUSH
58368: LD_VAR 0 3
58372: PPUSH
58373: CALL_OW 3
58377: ST_TO_ADDR
58378: GO 58355
58380: POP
58381: POP
// end ;
58382: LD_VAR 0 3
58386: RET
// export function ComExit ( unit ) ; var tmp ; begin
58387: LD_INT 0
58389: PPUSH
58390: PPUSH
// if not IsInUnit ( unit ) then
58391: LD_VAR 0 1
58395: PPUSH
58396: CALL_OW 310
58400: NOT
58401: IFFALSE 58405
// exit ;
58403: GO 58465
// tmp := IsInUnit ( unit ) ;
58405: LD_ADDR_VAR 0 3
58409: PUSH
58410: LD_VAR 0 1
58414: PPUSH
58415: CALL_OW 310
58419: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58420: LD_VAR 0 3
58424: PPUSH
58425: CALL_OW 247
58429: PUSH
58430: LD_INT 2
58432: EQUAL
58433: IFFALSE 58446
// ComExitVehicle ( unit ) else
58435: LD_VAR 0 1
58439: PPUSH
58440: CALL_OW 121
58444: GO 58455
// ComExitBuilding ( unit ) ;
58446: LD_VAR 0 1
58450: PPUSH
58451: CALL_OW 122
// result := tmp ;
58455: LD_ADDR_VAR 0 2
58459: PUSH
58460: LD_VAR 0 3
58464: ST_TO_ADDR
// end ;
58465: LD_VAR 0 2
58469: RET
// export function ComExitAll ( units ) ; var i ; begin
58470: LD_INT 0
58472: PPUSH
58473: PPUSH
// if not units then
58474: LD_VAR 0 1
58478: NOT
58479: IFFALSE 58483
// exit ;
58481: GO 58509
// for i in units do
58483: LD_ADDR_VAR 0 3
58487: PUSH
58488: LD_VAR 0 1
58492: PUSH
58493: FOR_IN
58494: IFFALSE 58507
// ComExit ( i ) ;
58496: LD_VAR 0 3
58500: PPUSH
58501: CALL 58387 0 1
58505: GO 58493
58507: POP
58508: POP
// end ;
58509: LD_VAR 0 2
58513: RET
// export function ResetHc ; begin
58514: LD_INT 0
58516: PPUSH
// InitHc ;
58517: CALL_OW 19
// hc_importance := 0 ;
58521: LD_ADDR_OWVAR 32
58525: PUSH
58526: LD_INT 0
58528: ST_TO_ADDR
// end ;
58529: LD_VAR 0 1
58533: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58534: LD_INT 0
58536: PPUSH
58537: PPUSH
58538: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58539: LD_ADDR_VAR 0 6
58543: PUSH
58544: LD_VAR 0 1
58548: PUSH
58549: LD_VAR 0 3
58553: PLUS
58554: PUSH
58555: LD_INT 2
58557: DIV
58558: ST_TO_ADDR
// if _x < 0 then
58559: LD_VAR 0 6
58563: PUSH
58564: LD_INT 0
58566: LESS
58567: IFFALSE 58584
// _x := _x * - 1 ;
58569: LD_ADDR_VAR 0 6
58573: PUSH
58574: LD_VAR 0 6
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: MUL
58583: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58584: LD_ADDR_VAR 0 7
58588: PUSH
58589: LD_VAR 0 2
58593: PUSH
58594: LD_VAR 0 4
58598: PLUS
58599: PUSH
58600: LD_INT 2
58602: DIV
58603: ST_TO_ADDR
// if _y < 0 then
58604: LD_VAR 0 7
58608: PUSH
58609: LD_INT 0
58611: LESS
58612: IFFALSE 58629
// _y := _y * - 1 ;
58614: LD_ADDR_VAR 0 7
58618: PUSH
58619: LD_VAR 0 7
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: MUL
58628: ST_TO_ADDR
// result := [ _x , _y ] ;
58629: LD_ADDR_VAR 0 5
58633: PUSH
58634: LD_VAR 0 6
58638: PUSH
58639: LD_VAR 0 7
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: ST_TO_ADDR
// end ;
58648: LD_VAR 0 5
58652: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58653: LD_INT 0
58655: PPUSH
58656: PPUSH
58657: PPUSH
58658: PPUSH
// task := GetTaskList ( unit ) ;
58659: LD_ADDR_VAR 0 7
58663: PUSH
58664: LD_VAR 0 1
58668: PPUSH
58669: CALL_OW 437
58673: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58674: LD_VAR 0 7
58678: NOT
58679: PUSH
58680: LD_VAR 0 1
58684: PPUSH
58685: LD_VAR 0 2
58689: PPUSH
58690: CALL_OW 308
58694: NOT
58695: AND
58696: IFFALSE 58700
// exit ;
58698: GO 58818
// if IsInArea ( unit , area ) then
58700: LD_VAR 0 1
58704: PPUSH
58705: LD_VAR 0 2
58709: PPUSH
58710: CALL_OW 308
58714: IFFALSE 58732
// begin ComMoveToArea ( unit , goAway ) ;
58716: LD_VAR 0 1
58720: PPUSH
58721: LD_VAR 0 3
58725: PPUSH
58726: CALL_OW 113
// exit ;
58730: GO 58818
// end ; if task [ 1 ] [ 1 ] <> M then
58732: LD_VAR 0 7
58736: PUSH
58737: LD_INT 1
58739: ARRAY
58740: PUSH
58741: LD_INT 1
58743: ARRAY
58744: PUSH
58745: LD_STRING M
58747: NONEQUAL
58748: IFFALSE 58752
// exit ;
58750: GO 58818
// x := task [ 1 ] [ 2 ] ;
58752: LD_ADDR_VAR 0 5
58756: PUSH
58757: LD_VAR 0 7
58761: PUSH
58762: LD_INT 1
58764: ARRAY
58765: PUSH
58766: LD_INT 2
58768: ARRAY
58769: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58770: LD_ADDR_VAR 0 6
58774: PUSH
58775: LD_VAR 0 7
58779: PUSH
58780: LD_INT 1
58782: ARRAY
58783: PUSH
58784: LD_INT 3
58786: ARRAY
58787: ST_TO_ADDR
// if InArea ( x , y , area ) then
58788: LD_VAR 0 5
58792: PPUSH
58793: LD_VAR 0 6
58797: PPUSH
58798: LD_VAR 0 2
58802: PPUSH
58803: CALL_OW 309
58807: IFFALSE 58818
// ComStop ( unit ) ;
58809: LD_VAR 0 1
58813: PPUSH
58814: CALL_OW 141
// end ;
58818: LD_VAR 0 4
58822: RET
// export function Abs ( value ) ; begin
58823: LD_INT 0
58825: PPUSH
// result := value ;
58826: LD_ADDR_VAR 0 2
58830: PUSH
58831: LD_VAR 0 1
58835: ST_TO_ADDR
// if value < 0 then
58836: LD_VAR 0 1
58840: PUSH
58841: LD_INT 0
58843: LESS
58844: IFFALSE 58861
// result := value * - 1 ;
58846: LD_ADDR_VAR 0 2
58850: PUSH
58851: LD_VAR 0 1
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: MUL
58860: ST_TO_ADDR
// end ;
58861: LD_VAR 0 2
58865: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58866: LD_INT 0
58868: PPUSH
58869: PPUSH
58870: PPUSH
58871: PPUSH
58872: PPUSH
58873: PPUSH
58874: PPUSH
58875: PPUSH
// if not unit or not building then
58876: LD_VAR 0 1
58880: NOT
58881: PUSH
58882: LD_VAR 0 2
58886: NOT
58887: OR
58888: IFFALSE 58892
// exit ;
58890: GO 59118
// x := GetX ( building ) ;
58892: LD_ADDR_VAR 0 4
58896: PUSH
58897: LD_VAR 0 2
58901: PPUSH
58902: CALL_OW 250
58906: ST_TO_ADDR
// y := GetY ( building ) ;
58907: LD_ADDR_VAR 0 6
58911: PUSH
58912: LD_VAR 0 2
58916: PPUSH
58917: CALL_OW 251
58921: ST_TO_ADDR
// d := GetDir ( building ) ;
58922: LD_ADDR_VAR 0 8
58926: PUSH
58927: LD_VAR 0 2
58931: PPUSH
58932: CALL_OW 254
58936: ST_TO_ADDR
// r := 4 ;
58937: LD_ADDR_VAR 0 9
58941: PUSH
58942: LD_INT 4
58944: ST_TO_ADDR
// for i := 1 to 5 do
58945: LD_ADDR_VAR 0 10
58949: PUSH
58950: DOUBLE
58951: LD_INT 1
58953: DEC
58954: ST_TO_ADDR
58955: LD_INT 5
58957: PUSH
58958: FOR_TO
58959: IFFALSE 59116
// begin _x := ShiftX ( x , d , r + i ) ;
58961: LD_ADDR_VAR 0 5
58965: PUSH
58966: LD_VAR 0 4
58970: PPUSH
58971: LD_VAR 0 8
58975: PPUSH
58976: LD_VAR 0 9
58980: PUSH
58981: LD_VAR 0 10
58985: PLUS
58986: PPUSH
58987: CALL_OW 272
58991: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58992: LD_ADDR_VAR 0 7
58996: PUSH
58997: LD_VAR 0 6
59001: PPUSH
59002: LD_VAR 0 8
59006: PPUSH
59007: LD_VAR 0 9
59011: PUSH
59012: LD_VAR 0 10
59016: PLUS
59017: PPUSH
59018: CALL_OW 273
59022: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59023: LD_VAR 0 5
59027: PPUSH
59028: LD_VAR 0 7
59032: PPUSH
59033: CALL_OW 488
59037: PUSH
59038: LD_VAR 0 5
59042: PPUSH
59043: LD_VAR 0 7
59047: PPUSH
59048: CALL_OW 428
59052: PPUSH
59053: CALL_OW 247
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: IN
59068: NOT
59069: AND
59070: IFFALSE 59114
// begin ComMoveXY ( unit , _x , _y ) ;
59072: LD_VAR 0 1
59076: PPUSH
59077: LD_VAR 0 5
59081: PPUSH
59082: LD_VAR 0 7
59086: PPUSH
59087: CALL_OW 111
// result := [ _x , _y ] ;
59091: LD_ADDR_VAR 0 3
59095: PUSH
59096: LD_VAR 0 5
59100: PUSH
59101: LD_VAR 0 7
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// exit ;
59110: POP
59111: POP
59112: GO 59118
// end ; end ;
59114: GO 58958
59116: POP
59117: POP
// end ;
59118: LD_VAR 0 3
59122: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59123: LD_INT 0
59125: PPUSH
59126: PPUSH
59127: PPUSH
// result := 0 ;
59128: LD_ADDR_VAR 0 3
59132: PUSH
59133: LD_INT 0
59135: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59136: LD_VAR 0 1
59140: PUSH
59141: LD_INT 0
59143: LESS
59144: PUSH
59145: LD_VAR 0 1
59149: PUSH
59150: LD_INT 8
59152: GREATER
59153: OR
59154: PUSH
59155: LD_VAR 0 2
59159: PUSH
59160: LD_INT 0
59162: LESS
59163: OR
59164: PUSH
59165: LD_VAR 0 2
59169: PUSH
59170: LD_INT 8
59172: GREATER
59173: OR
59174: IFFALSE 59178
// exit ;
59176: GO 59253
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59178: LD_ADDR_VAR 0 4
59182: PUSH
59183: LD_INT 22
59185: PUSH
59186: LD_VAR 0 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PPUSH
59195: CALL_OW 69
59199: PUSH
59200: FOR_IN
59201: IFFALSE 59251
// begin un := UnitShoot ( i ) ;
59203: LD_ADDR_VAR 0 5
59207: PUSH
59208: LD_VAR 0 4
59212: PPUSH
59213: CALL_OW 504
59217: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59218: LD_VAR 0 5
59222: PPUSH
59223: CALL_OW 255
59227: PUSH
59228: LD_VAR 0 1
59232: EQUAL
59233: IFFALSE 59249
// begin result := un ;
59235: LD_ADDR_VAR 0 3
59239: PUSH
59240: LD_VAR 0 5
59244: ST_TO_ADDR
// exit ;
59245: POP
59246: POP
59247: GO 59253
// end ; end ;
59249: GO 59200
59251: POP
59252: POP
// end ;
59253: LD_VAR 0 3
59257: RET
// export function GetCargoBay ( units ) ; begin
59258: LD_INT 0
59260: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59261: LD_ADDR_VAR 0 2
59265: PUSH
59266: LD_VAR 0 1
59270: PPUSH
59271: LD_INT 2
59273: PUSH
59274: LD_INT 34
59276: PUSH
59277: LD_INT 12
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 34
59286: PUSH
59287: LD_INT 51
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 34
59296: PUSH
59297: LD_INT 32
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 34
59306: PUSH
59307: LD_INT 89
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: PPUSH
59321: CALL_OW 72
59325: ST_TO_ADDR
// end ;
59326: LD_VAR 0 2
59330: RET
// export function Negate ( value ) ; begin
59331: LD_INT 0
59333: PPUSH
// result := not value ;
59334: LD_ADDR_VAR 0 2
59338: PUSH
59339: LD_VAR 0 1
59343: NOT
59344: ST_TO_ADDR
// end ;
59345: LD_VAR 0 2
59349: RET
// export function Inc ( value ) ; begin
59350: LD_INT 0
59352: PPUSH
// result := value + 1 ;
59353: LD_ADDR_VAR 0 2
59357: PUSH
59358: LD_VAR 0 1
59362: PUSH
59363: LD_INT 1
59365: PLUS
59366: ST_TO_ADDR
// end ;
59367: LD_VAR 0 2
59371: RET
// export function Dec ( value ) ; begin
59372: LD_INT 0
59374: PPUSH
// result := value - 1 ;
59375: LD_ADDR_VAR 0 2
59379: PUSH
59380: LD_VAR 0 1
59384: PUSH
59385: LD_INT 1
59387: MINUS
59388: ST_TO_ADDR
// end ;
59389: LD_VAR 0 2
59393: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59394: LD_INT 0
59396: PPUSH
59397: PPUSH
59398: PPUSH
59399: PPUSH
59400: PPUSH
59401: PPUSH
59402: PPUSH
59403: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59404: LD_VAR 0 1
59408: PPUSH
59409: LD_VAR 0 2
59413: PPUSH
59414: CALL_OW 488
59418: NOT
59419: PUSH
59420: LD_VAR 0 3
59424: PPUSH
59425: LD_VAR 0 4
59429: PPUSH
59430: CALL_OW 488
59434: NOT
59435: OR
59436: IFFALSE 59449
// begin result := - 1 ;
59438: LD_ADDR_VAR 0 5
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: ST_TO_ADDR
// exit ;
59447: GO 59684
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59449: LD_ADDR_VAR 0 12
59453: PUSH
59454: LD_VAR 0 1
59458: PPUSH
59459: LD_VAR 0 2
59463: PPUSH
59464: LD_VAR 0 3
59468: PPUSH
59469: LD_VAR 0 4
59473: PPUSH
59474: CALL 58534 0 4
59478: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59479: LD_ADDR_VAR 0 11
59483: PUSH
59484: LD_VAR 0 1
59488: PPUSH
59489: LD_VAR 0 2
59493: PPUSH
59494: LD_VAR 0 12
59498: PUSH
59499: LD_INT 1
59501: ARRAY
59502: PPUSH
59503: LD_VAR 0 12
59507: PUSH
59508: LD_INT 2
59510: ARRAY
59511: PPUSH
59512: CALL_OW 298
59516: ST_TO_ADDR
// distance := 9999 ;
59517: LD_ADDR_VAR 0 10
59521: PUSH
59522: LD_INT 9999
59524: ST_TO_ADDR
// for i := 0 to 5 do
59525: LD_ADDR_VAR 0 6
59529: PUSH
59530: DOUBLE
59531: LD_INT 0
59533: DEC
59534: ST_TO_ADDR
59535: LD_INT 5
59537: PUSH
59538: FOR_TO
59539: IFFALSE 59682
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59541: LD_ADDR_VAR 0 7
59545: PUSH
59546: LD_VAR 0 1
59550: PPUSH
59551: LD_VAR 0 6
59555: PPUSH
59556: LD_VAR 0 11
59560: PPUSH
59561: CALL_OW 272
59565: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59566: LD_ADDR_VAR 0 8
59570: PUSH
59571: LD_VAR 0 2
59575: PPUSH
59576: LD_VAR 0 6
59580: PPUSH
59581: LD_VAR 0 11
59585: PPUSH
59586: CALL_OW 273
59590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59591: LD_VAR 0 7
59595: PPUSH
59596: LD_VAR 0 8
59600: PPUSH
59601: CALL_OW 488
59605: NOT
59606: IFFALSE 59610
// continue ;
59608: GO 59538
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59610: LD_ADDR_VAR 0 9
59614: PUSH
59615: LD_VAR 0 12
59619: PUSH
59620: LD_INT 1
59622: ARRAY
59623: PPUSH
59624: LD_VAR 0 12
59628: PUSH
59629: LD_INT 2
59631: ARRAY
59632: PPUSH
59633: LD_VAR 0 7
59637: PPUSH
59638: LD_VAR 0 8
59642: PPUSH
59643: CALL_OW 298
59647: ST_TO_ADDR
// if tmp < distance then
59648: LD_VAR 0 9
59652: PUSH
59653: LD_VAR 0 10
59657: LESS
59658: IFFALSE 59680
// begin result := i ;
59660: LD_ADDR_VAR 0 5
59664: PUSH
59665: LD_VAR 0 6
59669: ST_TO_ADDR
// distance := tmp ;
59670: LD_ADDR_VAR 0 10
59674: PUSH
59675: LD_VAR 0 9
59679: ST_TO_ADDR
// end ; end ;
59680: GO 59538
59682: POP
59683: POP
// end ;
59684: LD_VAR 0 5
59688: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59689: LD_INT 0
59691: PPUSH
59692: PPUSH
// if not driver or not IsInUnit ( driver ) then
59693: LD_VAR 0 1
59697: NOT
59698: PUSH
59699: LD_VAR 0 1
59703: PPUSH
59704: CALL_OW 310
59708: NOT
59709: OR
59710: IFFALSE 59714
// exit ;
59712: GO 59804
// vehicle := IsInUnit ( driver ) ;
59714: LD_ADDR_VAR 0 3
59718: PUSH
59719: LD_VAR 0 1
59723: PPUSH
59724: CALL_OW 310
59728: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59729: LD_VAR 0 1
59733: PPUSH
59734: LD_STRING \
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: PUSH
59764: LD_STRING E
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_VAR 0 3
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PPUSH
59800: CALL_OW 446
// end ;
59804: LD_VAR 0 2
59808: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
// if not driver or not IsInUnit ( driver ) then
59813: LD_VAR 0 1
59817: NOT
59818: PUSH
59819: LD_VAR 0 1
59823: PPUSH
59824: CALL_OW 310
59828: NOT
59829: OR
59830: IFFALSE 59834
// exit ;
59832: GO 59924
// vehicle := IsInUnit ( driver ) ;
59834: LD_ADDR_VAR 0 3
59838: PUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: CALL_OW 310
59848: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59849: LD_VAR 0 1
59853: PPUSH
59854: LD_STRING \
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: PUSH
59884: LD_STRING E
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_VAR 0 3
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PPUSH
59920: CALL_OW 447
// end ;
59924: LD_VAR 0 2
59928: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59929: LD_INT 0
59931: PPUSH
59932: PPUSH
59933: PPUSH
// tmp := [ ] ;
59934: LD_ADDR_VAR 0 5
59938: PUSH
59939: EMPTY
59940: ST_TO_ADDR
// for i in units do
59941: LD_ADDR_VAR 0 4
59945: PUSH
59946: LD_VAR 0 1
59950: PUSH
59951: FOR_IN
59952: IFFALSE 59990
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59954: LD_ADDR_VAR 0 5
59958: PUSH
59959: LD_VAR 0 5
59963: PPUSH
59964: LD_VAR 0 5
59968: PUSH
59969: LD_INT 1
59971: PLUS
59972: PPUSH
59973: LD_VAR 0 4
59977: PPUSH
59978: CALL_OW 256
59982: PPUSH
59983: CALL_OW 2
59987: ST_TO_ADDR
59988: GO 59951
59990: POP
59991: POP
// if not tmp then
59992: LD_VAR 0 5
59996: NOT
59997: IFFALSE 60001
// exit ;
59999: GO 60049
// if asc then
60001: LD_VAR 0 2
60005: IFFALSE 60029
// result := SortListByListAsc ( units , tmp ) else
60007: LD_ADDR_VAR 0 3
60011: PUSH
60012: LD_VAR 0 1
60016: PPUSH
60017: LD_VAR 0 5
60021: PPUSH
60022: CALL_OW 76
60026: ST_TO_ADDR
60027: GO 60049
// result := SortListByListDesc ( units , tmp ) ;
60029: LD_ADDR_VAR 0 3
60033: PUSH
60034: LD_VAR 0 1
60038: PPUSH
60039: LD_VAR 0 5
60043: PPUSH
60044: CALL_OW 77
60048: ST_TO_ADDR
// end ;
60049: LD_VAR 0 3
60053: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60054: LD_INT 0
60056: PPUSH
60057: PPUSH
// task := GetTaskList ( mech ) ;
60058: LD_ADDR_VAR 0 4
60062: PUSH
60063: LD_VAR 0 1
60067: PPUSH
60068: CALL_OW 437
60072: ST_TO_ADDR
// if not task then
60073: LD_VAR 0 4
60077: NOT
60078: IFFALSE 60082
// exit ;
60080: GO 60124
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60082: LD_ADDR_VAR 0 3
60086: PUSH
60087: LD_VAR 0 4
60091: PUSH
60092: LD_INT 1
60094: ARRAY
60095: PUSH
60096: LD_INT 1
60098: ARRAY
60099: PUSH
60100: LD_STRING r
60102: EQUAL
60103: PUSH
60104: LD_VAR 0 4
60108: PUSH
60109: LD_INT 1
60111: ARRAY
60112: PUSH
60113: LD_INT 4
60115: ARRAY
60116: PUSH
60117: LD_VAR 0 2
60121: EQUAL
60122: AND
60123: ST_TO_ADDR
// end ;
60124: LD_VAR 0 3
60128: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60129: LD_INT 0
60131: PPUSH
// SetDir ( unit , d ) ;
60132: LD_VAR 0 1
60136: PPUSH
60137: LD_VAR 0 4
60141: PPUSH
60142: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60146: LD_VAR 0 1
60150: PPUSH
60151: LD_VAR 0 2
60155: PPUSH
60156: LD_VAR 0 3
60160: PPUSH
60161: LD_VAR 0 5
60165: PPUSH
60166: CALL_OW 48
// end ;
60170: LD_VAR 0 6
60174: RET
// export function ToNaturalNumber ( number ) ; begin
60175: LD_INT 0
60177: PPUSH
// result := number div 1 ;
60178: LD_ADDR_VAR 0 2
60182: PUSH
60183: LD_VAR 0 1
60187: PUSH
60188: LD_INT 1
60190: DIV
60191: ST_TO_ADDR
// if number < 0 then
60192: LD_VAR 0 1
60196: PUSH
60197: LD_INT 0
60199: LESS
60200: IFFALSE 60210
// result := 0 ;
60202: LD_ADDR_VAR 0 2
60206: PUSH
60207: LD_INT 0
60209: ST_TO_ADDR
// end ;
60210: LD_VAR 0 2
60214: RET
// export function SortByClass ( units , class ) ; var un ; begin
60215: LD_INT 0
60217: PPUSH
60218: PPUSH
// if not units or not class then
60219: LD_VAR 0 1
60223: NOT
60224: PUSH
60225: LD_VAR 0 2
60229: NOT
60230: OR
60231: IFFALSE 60235
// exit ;
60233: GO 60330
// result := [ ] ;
60235: LD_ADDR_VAR 0 3
60239: PUSH
60240: EMPTY
60241: ST_TO_ADDR
// for un in units do
60242: LD_ADDR_VAR 0 4
60246: PUSH
60247: LD_VAR 0 1
60251: PUSH
60252: FOR_IN
60253: IFFALSE 60328
// if GetClass ( un ) = class then
60255: LD_VAR 0 4
60259: PPUSH
60260: CALL_OW 257
60264: PUSH
60265: LD_VAR 0 2
60269: EQUAL
60270: IFFALSE 60297
// result := Insert ( result , 1 , un ) else
60272: LD_ADDR_VAR 0 3
60276: PUSH
60277: LD_VAR 0 3
60281: PPUSH
60282: LD_INT 1
60284: PPUSH
60285: LD_VAR 0 4
60289: PPUSH
60290: CALL_OW 2
60294: ST_TO_ADDR
60295: GO 60326
// result := Replace ( result , result + 1 , un ) ;
60297: LD_ADDR_VAR 0 3
60301: PUSH
60302: LD_VAR 0 3
60306: PPUSH
60307: LD_VAR 0 3
60311: PUSH
60312: LD_INT 1
60314: PLUS
60315: PPUSH
60316: LD_VAR 0 4
60320: PPUSH
60321: CALL_OW 1
60325: ST_TO_ADDR
60326: GO 60252
60328: POP
60329: POP
// end ;
60330: LD_VAR 0 3
60334: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60335: LD_INT 0
60337: PPUSH
60338: PPUSH
60339: PPUSH
60340: PPUSH
60341: PPUSH
60342: PPUSH
60343: PPUSH
// result := [ ] ;
60344: LD_ADDR_VAR 0 4
60348: PUSH
60349: EMPTY
60350: ST_TO_ADDR
// if x - r < 0 then
60351: LD_VAR 0 1
60355: PUSH
60356: LD_VAR 0 3
60360: MINUS
60361: PUSH
60362: LD_INT 0
60364: LESS
60365: IFFALSE 60377
// min_x := 0 else
60367: LD_ADDR_VAR 0 8
60371: PUSH
60372: LD_INT 0
60374: ST_TO_ADDR
60375: GO 60393
// min_x := x - r ;
60377: LD_ADDR_VAR 0 8
60381: PUSH
60382: LD_VAR 0 1
60386: PUSH
60387: LD_VAR 0 3
60391: MINUS
60392: ST_TO_ADDR
// if y - r < 0 then
60393: LD_VAR 0 2
60397: PUSH
60398: LD_VAR 0 3
60402: MINUS
60403: PUSH
60404: LD_INT 0
60406: LESS
60407: IFFALSE 60419
// min_y := 0 else
60409: LD_ADDR_VAR 0 7
60413: PUSH
60414: LD_INT 0
60416: ST_TO_ADDR
60417: GO 60435
// min_y := y - r ;
60419: LD_ADDR_VAR 0 7
60423: PUSH
60424: LD_VAR 0 2
60428: PUSH
60429: LD_VAR 0 3
60433: MINUS
60434: ST_TO_ADDR
// max_x := x + r ;
60435: LD_ADDR_VAR 0 9
60439: PUSH
60440: LD_VAR 0 1
60444: PUSH
60445: LD_VAR 0 3
60449: PLUS
60450: ST_TO_ADDR
// max_y := y + r ;
60451: LD_ADDR_VAR 0 10
60455: PUSH
60456: LD_VAR 0 2
60460: PUSH
60461: LD_VAR 0 3
60465: PLUS
60466: ST_TO_ADDR
// for _x = min_x to max_x do
60467: LD_ADDR_VAR 0 5
60471: PUSH
60472: DOUBLE
60473: LD_VAR 0 8
60477: DEC
60478: ST_TO_ADDR
60479: LD_VAR 0 9
60483: PUSH
60484: FOR_TO
60485: IFFALSE 60586
// for _y = min_y to max_y do
60487: LD_ADDR_VAR 0 6
60491: PUSH
60492: DOUBLE
60493: LD_VAR 0 7
60497: DEC
60498: ST_TO_ADDR
60499: LD_VAR 0 10
60503: PUSH
60504: FOR_TO
60505: IFFALSE 60582
// begin if not ValidHex ( _x , _y ) then
60507: LD_VAR 0 5
60511: PPUSH
60512: LD_VAR 0 6
60516: PPUSH
60517: CALL_OW 488
60521: NOT
60522: IFFALSE 60526
// continue ;
60524: GO 60504
// if GetResourceTypeXY ( _x , _y ) then
60526: LD_VAR 0 5
60530: PPUSH
60531: LD_VAR 0 6
60535: PPUSH
60536: CALL_OW 283
60540: IFFALSE 60580
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60542: LD_ADDR_VAR 0 4
60546: PUSH
60547: LD_VAR 0 4
60551: PPUSH
60552: LD_VAR 0 4
60556: PUSH
60557: LD_INT 1
60559: PLUS
60560: PPUSH
60561: LD_VAR 0 5
60565: PUSH
60566: LD_VAR 0 6
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PPUSH
60575: CALL_OW 1
60579: ST_TO_ADDR
// end ;
60580: GO 60504
60582: POP
60583: POP
60584: GO 60484
60586: POP
60587: POP
// end ;
60588: LD_VAR 0 4
60592: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60593: LD_INT 0
60595: PPUSH
60596: PPUSH
60597: PPUSH
60598: PPUSH
60599: PPUSH
60600: PPUSH
60601: PPUSH
60602: PPUSH
// if not units then
60603: LD_VAR 0 1
60607: NOT
60608: IFFALSE 60612
// exit ;
60610: GO 61136
// result := UnitFilter ( units , [ f_ok ] ) ;
60612: LD_ADDR_VAR 0 3
60616: PUSH
60617: LD_VAR 0 1
60621: PPUSH
60622: LD_INT 50
60624: PUSH
60625: EMPTY
60626: LIST
60627: PPUSH
60628: CALL_OW 72
60632: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60633: LD_ADDR_VAR 0 8
60637: PUSH
60638: LD_VAR 0 1
60642: PUSH
60643: LD_INT 1
60645: ARRAY
60646: PPUSH
60647: CALL_OW 255
60651: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60652: LD_ADDR_VAR 0 10
60656: PUSH
60657: LD_INT 29
60659: PUSH
60660: LD_INT 91
60662: PUSH
60663: LD_INT 49
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: LIST
60670: ST_TO_ADDR
// if not result then
60671: LD_VAR 0 3
60675: NOT
60676: IFFALSE 60680
// exit ;
60678: GO 61136
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60680: LD_ADDR_VAR 0 5
60684: PUSH
60685: LD_INT 81
60687: PUSH
60688: LD_VAR 0 8
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PPUSH
60697: CALL_OW 69
60701: ST_TO_ADDR
// for i in result do
60702: LD_ADDR_VAR 0 4
60706: PUSH
60707: LD_VAR 0 3
60711: PUSH
60712: FOR_IN
60713: IFFALSE 61134
// begin tag := GetTag ( i ) + 1 ;
60715: LD_ADDR_VAR 0 9
60719: PUSH
60720: LD_VAR 0 4
60724: PPUSH
60725: CALL_OW 110
60729: PUSH
60730: LD_INT 1
60732: PLUS
60733: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60734: LD_ADDR_VAR 0 7
60738: PUSH
60739: LD_VAR 0 4
60743: PPUSH
60744: CALL_OW 250
60748: PPUSH
60749: LD_VAR 0 4
60753: PPUSH
60754: CALL_OW 251
60758: PPUSH
60759: LD_INT 6
60761: PPUSH
60762: CALL 60335 0 3
60766: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60767: LD_VAR 0 4
60771: PPUSH
60772: CALL_OW 247
60776: PUSH
60777: LD_INT 2
60779: EQUAL
60780: PUSH
60781: LD_VAR 0 7
60785: AND
60786: PUSH
60787: LD_VAR 0 4
60791: PPUSH
60792: CALL_OW 264
60796: PUSH
60797: LD_VAR 0 10
60801: IN
60802: NOT
60803: AND
60804: IFFALSE 60843
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60806: LD_VAR 0 4
60810: PPUSH
60811: LD_VAR 0 7
60815: PUSH
60816: LD_INT 1
60818: ARRAY
60819: PUSH
60820: LD_INT 1
60822: ARRAY
60823: PPUSH
60824: LD_VAR 0 7
60828: PUSH
60829: LD_INT 1
60831: ARRAY
60832: PUSH
60833: LD_INT 2
60835: ARRAY
60836: PPUSH
60837: CALL_OW 116
60841: GO 61132
// if path > tag then
60843: LD_VAR 0 2
60847: PUSH
60848: LD_VAR 0 9
60852: GREATER
60853: IFFALSE 61061
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60855: LD_ADDR_VAR 0 6
60859: PUSH
60860: LD_VAR 0 5
60864: PPUSH
60865: LD_INT 91
60867: PUSH
60868: LD_VAR 0 4
60872: PUSH
60873: LD_INT 8
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: LIST
60880: PPUSH
60881: CALL_OW 72
60885: ST_TO_ADDR
// if nearEnemy then
60886: LD_VAR 0 6
60890: IFFALSE 60959
// begin if GetWeapon ( i ) = ru_time_lapser then
60892: LD_VAR 0 4
60896: PPUSH
60897: CALL_OW 264
60901: PUSH
60902: LD_INT 49
60904: EQUAL
60905: IFFALSE 60933
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60907: LD_VAR 0 4
60911: PPUSH
60912: LD_VAR 0 6
60916: PPUSH
60917: LD_VAR 0 4
60921: PPUSH
60922: CALL_OW 74
60926: PPUSH
60927: CALL_OW 112
60931: GO 60957
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60933: LD_VAR 0 4
60937: PPUSH
60938: LD_VAR 0 6
60942: PPUSH
60943: LD_VAR 0 4
60947: PPUSH
60948: CALL_OW 74
60952: PPUSH
60953: CALL 62207 0 2
// end else
60957: GO 61059
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60959: LD_VAR 0 4
60963: PPUSH
60964: LD_VAR 0 2
60968: PUSH
60969: LD_VAR 0 9
60973: ARRAY
60974: PUSH
60975: LD_INT 1
60977: ARRAY
60978: PPUSH
60979: LD_VAR 0 2
60983: PUSH
60984: LD_VAR 0 9
60988: ARRAY
60989: PUSH
60990: LD_INT 2
60992: ARRAY
60993: PPUSH
60994: CALL_OW 297
60998: PUSH
60999: LD_INT 6
61001: GREATER
61002: IFFALSE 61045
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61004: LD_VAR 0 4
61008: PPUSH
61009: LD_VAR 0 2
61013: PUSH
61014: LD_VAR 0 9
61018: ARRAY
61019: PUSH
61020: LD_INT 1
61022: ARRAY
61023: PPUSH
61024: LD_VAR 0 2
61028: PUSH
61029: LD_VAR 0 9
61033: ARRAY
61034: PUSH
61035: LD_INT 2
61037: ARRAY
61038: PPUSH
61039: CALL_OW 114
61043: GO 61059
// SetTag ( i , tag ) ;
61045: LD_VAR 0 4
61049: PPUSH
61050: LD_VAR 0 9
61054: PPUSH
61055: CALL_OW 109
// end else
61059: GO 61132
// if enemy then
61061: LD_VAR 0 5
61065: IFFALSE 61132
// begin if GetWeapon ( i ) = ru_time_lapser then
61067: LD_VAR 0 4
61071: PPUSH
61072: CALL_OW 264
61076: PUSH
61077: LD_INT 49
61079: EQUAL
61080: IFFALSE 61108
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61082: LD_VAR 0 4
61086: PPUSH
61087: LD_VAR 0 5
61091: PPUSH
61092: LD_VAR 0 4
61096: PPUSH
61097: CALL_OW 74
61101: PPUSH
61102: CALL_OW 112
61106: GO 61132
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61108: LD_VAR 0 4
61112: PPUSH
61113: LD_VAR 0 5
61117: PPUSH
61118: LD_VAR 0 4
61122: PPUSH
61123: CALL_OW 74
61127: PPUSH
61128: CALL 62207 0 2
// end ; end ;
61132: GO 60712
61134: POP
61135: POP
// end ;
61136: LD_VAR 0 3
61140: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61141: LD_INT 0
61143: PPUSH
61144: PPUSH
61145: PPUSH
// if not unit or IsInUnit ( unit ) then
61146: LD_VAR 0 1
61150: NOT
61151: PUSH
61152: LD_VAR 0 1
61156: PPUSH
61157: CALL_OW 310
61161: OR
61162: IFFALSE 61166
// exit ;
61164: GO 61257
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61166: LD_ADDR_VAR 0 4
61170: PUSH
61171: LD_VAR 0 1
61175: PPUSH
61176: CALL_OW 250
61180: PPUSH
61181: LD_VAR 0 2
61185: PPUSH
61186: LD_INT 1
61188: PPUSH
61189: CALL_OW 272
61193: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61194: LD_ADDR_VAR 0 5
61198: PUSH
61199: LD_VAR 0 1
61203: PPUSH
61204: CALL_OW 251
61208: PPUSH
61209: LD_VAR 0 2
61213: PPUSH
61214: LD_INT 1
61216: PPUSH
61217: CALL_OW 273
61221: ST_TO_ADDR
// if ValidHex ( x , y ) then
61222: LD_VAR 0 4
61226: PPUSH
61227: LD_VAR 0 5
61231: PPUSH
61232: CALL_OW 488
61236: IFFALSE 61257
// ComTurnXY ( unit , x , y ) ;
61238: LD_VAR 0 1
61242: PPUSH
61243: LD_VAR 0 4
61247: PPUSH
61248: LD_VAR 0 5
61252: PPUSH
61253: CALL_OW 118
// end ;
61257: LD_VAR 0 3
61261: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61262: LD_INT 0
61264: PPUSH
61265: PPUSH
// result := false ;
61266: LD_ADDR_VAR 0 3
61270: PUSH
61271: LD_INT 0
61273: ST_TO_ADDR
// if not units then
61274: LD_VAR 0 2
61278: NOT
61279: IFFALSE 61283
// exit ;
61281: GO 61328
// for i in units do
61283: LD_ADDR_VAR 0 4
61287: PUSH
61288: LD_VAR 0 2
61292: PUSH
61293: FOR_IN
61294: IFFALSE 61326
// if See ( side , i ) then
61296: LD_VAR 0 1
61300: PPUSH
61301: LD_VAR 0 4
61305: PPUSH
61306: CALL_OW 292
61310: IFFALSE 61324
// begin result := true ;
61312: LD_ADDR_VAR 0 3
61316: PUSH
61317: LD_INT 1
61319: ST_TO_ADDR
// exit ;
61320: POP
61321: POP
61322: GO 61328
// end ;
61324: GO 61293
61326: POP
61327: POP
// end ;
61328: LD_VAR 0 3
61332: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61333: LD_INT 0
61335: PPUSH
61336: PPUSH
61337: PPUSH
61338: PPUSH
// if not unit or not points then
61339: LD_VAR 0 1
61343: NOT
61344: PUSH
61345: LD_VAR 0 2
61349: NOT
61350: OR
61351: IFFALSE 61355
// exit ;
61353: GO 61445
// dist := 99999 ;
61355: LD_ADDR_VAR 0 5
61359: PUSH
61360: LD_INT 99999
61362: ST_TO_ADDR
// for i in points do
61363: LD_ADDR_VAR 0 4
61367: PUSH
61368: LD_VAR 0 2
61372: PUSH
61373: FOR_IN
61374: IFFALSE 61443
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61376: LD_ADDR_VAR 0 6
61380: PUSH
61381: LD_VAR 0 1
61385: PPUSH
61386: LD_VAR 0 4
61390: PUSH
61391: LD_INT 1
61393: ARRAY
61394: PPUSH
61395: LD_VAR 0 4
61399: PUSH
61400: LD_INT 2
61402: ARRAY
61403: PPUSH
61404: CALL_OW 297
61408: ST_TO_ADDR
// if tmpDist < dist then
61409: LD_VAR 0 6
61413: PUSH
61414: LD_VAR 0 5
61418: LESS
61419: IFFALSE 61441
// begin result := i ;
61421: LD_ADDR_VAR 0 3
61425: PUSH
61426: LD_VAR 0 4
61430: ST_TO_ADDR
// dist := tmpDist ;
61431: LD_ADDR_VAR 0 5
61435: PUSH
61436: LD_VAR 0 6
61440: ST_TO_ADDR
// end ; end ;
61441: GO 61373
61443: POP
61444: POP
// end ;
61445: LD_VAR 0 3
61449: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61450: LD_INT 0
61452: PPUSH
// uc_side := side ;
61453: LD_ADDR_OWVAR 20
61457: PUSH
61458: LD_VAR 0 1
61462: ST_TO_ADDR
// uc_nation := 3 ;
61463: LD_ADDR_OWVAR 21
61467: PUSH
61468: LD_INT 3
61470: ST_TO_ADDR
// vc_chassis := 25 ;
61471: LD_ADDR_OWVAR 37
61475: PUSH
61476: LD_INT 25
61478: ST_TO_ADDR
// vc_engine := engine_siberite ;
61479: LD_ADDR_OWVAR 39
61483: PUSH
61484: LD_INT 3
61486: ST_TO_ADDR
// vc_control := control_computer ;
61487: LD_ADDR_OWVAR 38
61491: PUSH
61492: LD_INT 3
61494: ST_TO_ADDR
// vc_weapon := 59 ;
61495: LD_ADDR_OWVAR 40
61499: PUSH
61500: LD_INT 59
61502: ST_TO_ADDR
// result := CreateVehicle ;
61503: LD_ADDR_VAR 0 5
61507: PUSH
61508: CALL_OW 45
61512: ST_TO_ADDR
// SetDir ( result , d ) ;
61513: LD_VAR 0 5
61517: PPUSH
61518: LD_VAR 0 4
61522: PPUSH
61523: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61527: LD_VAR 0 5
61531: PPUSH
61532: LD_VAR 0 2
61536: PPUSH
61537: LD_VAR 0 3
61541: PPUSH
61542: LD_INT 0
61544: PPUSH
61545: CALL_OW 48
// end ;
61549: LD_VAR 0 5
61553: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61554: LD_INT 0
61556: PPUSH
61557: PPUSH
61558: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61559: LD_ADDR_VAR 0 2
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61582: LD_VAR 0 1
61586: NOT
61587: PUSH
61588: LD_VAR 0 1
61592: PPUSH
61593: CALL_OW 264
61597: PUSH
61598: LD_INT 12
61600: PUSH
61601: LD_INT 51
61603: PUSH
61604: LD_INT 32
61606: PUSH
61607: LD_INT 89
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: IN
61616: NOT
61617: OR
61618: IFFALSE 61622
// exit ;
61620: GO 61720
// for i := 1 to 3 do
61622: LD_ADDR_VAR 0 3
61626: PUSH
61627: DOUBLE
61628: LD_INT 1
61630: DEC
61631: ST_TO_ADDR
61632: LD_INT 3
61634: PUSH
61635: FOR_TO
61636: IFFALSE 61718
// begin tmp := GetCargo ( cargo , i ) ;
61638: LD_ADDR_VAR 0 4
61642: PUSH
61643: LD_VAR 0 1
61647: PPUSH
61648: LD_VAR 0 3
61652: PPUSH
61653: CALL_OW 289
61657: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61658: LD_ADDR_VAR 0 2
61662: PUSH
61663: LD_VAR 0 2
61667: PPUSH
61668: LD_VAR 0 3
61672: PPUSH
61673: LD_VAR 0 4
61677: PPUSH
61678: CALL_OW 1
61682: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61683: LD_ADDR_VAR 0 2
61687: PUSH
61688: LD_VAR 0 2
61692: PPUSH
61693: LD_INT 4
61695: PPUSH
61696: LD_VAR 0 2
61700: PUSH
61701: LD_INT 4
61703: ARRAY
61704: PUSH
61705: LD_VAR 0 4
61709: PLUS
61710: PPUSH
61711: CALL_OW 1
61715: ST_TO_ADDR
// end ;
61716: GO 61635
61718: POP
61719: POP
// end ;
61720: LD_VAR 0 2
61724: RET
// export function Length ( array ) ; begin
61725: LD_INT 0
61727: PPUSH
// result := array + 0 ;
61728: LD_ADDR_VAR 0 2
61732: PUSH
61733: LD_VAR 0 1
61737: PUSH
61738: LD_INT 0
61740: PLUS
61741: ST_TO_ADDR
// end ;
61742: LD_VAR 0 2
61746: RET
// export function PrepareArray ( array ) ; begin
61747: LD_INT 0
61749: PPUSH
// result := array diff 0 ;
61750: LD_ADDR_VAR 0 2
61754: PUSH
61755: LD_VAR 0 1
61759: PUSH
61760: LD_INT 0
61762: DIFF
61763: ST_TO_ADDR
// if not result [ 1 ] then
61764: LD_VAR 0 2
61768: PUSH
61769: LD_INT 1
61771: ARRAY
61772: NOT
61773: IFFALSE 61793
// result := Delete ( result , 1 ) ;
61775: LD_ADDR_VAR 0 2
61779: PUSH
61780: LD_VAR 0 2
61784: PPUSH
61785: LD_INT 1
61787: PPUSH
61788: CALL_OW 3
61792: ST_TO_ADDR
// end ;
61793: LD_VAR 0 2
61797: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61798: LD_INT 0
61800: PPUSH
61801: PPUSH
61802: PPUSH
61803: PPUSH
// sibRocketRange := 25 ;
61804: LD_ADDR_VAR 0 6
61808: PUSH
61809: LD_INT 25
61811: ST_TO_ADDR
// result := false ;
61812: LD_ADDR_VAR 0 4
61816: PUSH
61817: LD_INT 0
61819: ST_TO_ADDR
// for i := 0 to 5 do
61820: LD_ADDR_VAR 0 5
61824: PUSH
61825: DOUBLE
61826: LD_INT 0
61828: DEC
61829: ST_TO_ADDR
61830: LD_INT 5
61832: PUSH
61833: FOR_TO
61834: IFFALSE 61901
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61836: LD_VAR 0 1
61840: PPUSH
61841: LD_VAR 0 5
61845: PPUSH
61846: LD_VAR 0 6
61850: PPUSH
61851: CALL_OW 272
61855: PPUSH
61856: LD_VAR 0 2
61860: PPUSH
61861: LD_VAR 0 5
61865: PPUSH
61866: LD_VAR 0 6
61870: PPUSH
61871: CALL_OW 273
61875: PPUSH
61876: LD_VAR 0 3
61880: PPUSH
61881: CALL_OW 309
61885: IFFALSE 61899
// begin result := true ;
61887: LD_ADDR_VAR 0 4
61891: PUSH
61892: LD_INT 1
61894: ST_TO_ADDR
// exit ;
61895: POP
61896: POP
61897: GO 61903
// end ;
61899: GO 61833
61901: POP
61902: POP
// end ;
61903: LD_VAR 0 4
61907: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
61908: LD_INT 0
61910: PPUSH
61911: PPUSH
61912: PPUSH
// if btype = b_depot then
61913: LD_VAR 0 2
61917: PUSH
61918: LD_INT 0
61920: EQUAL
61921: IFFALSE 61933
// begin result := true ;
61923: LD_ADDR_VAR 0 3
61927: PUSH
61928: LD_INT 1
61930: ST_TO_ADDR
// exit ;
61931: GO 62049
// end ; pom := GetBase ( depot ) ;
61933: LD_ADDR_VAR 0 4
61937: PUSH
61938: LD_VAR 0 1
61942: PPUSH
61943: CALL_OW 274
61947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
61948: LD_ADDR_VAR 0 5
61952: PUSH
61953: LD_VAR 0 2
61957: PPUSH
61958: LD_VAR 0 1
61962: PPUSH
61963: CALL_OW 248
61967: PPUSH
61968: CALL_OW 450
61972: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
61973: LD_ADDR_VAR 0 3
61977: PUSH
61978: LD_VAR 0 4
61982: PPUSH
61983: LD_INT 1
61985: PPUSH
61986: CALL_OW 275
61990: PUSH
61991: LD_VAR 0 5
61995: PUSH
61996: LD_INT 1
61998: ARRAY
61999: GREATEREQUAL
62000: PUSH
62001: LD_VAR 0 4
62005: PPUSH
62006: LD_INT 2
62008: PPUSH
62009: CALL_OW 275
62013: PUSH
62014: LD_VAR 0 5
62018: PUSH
62019: LD_INT 2
62021: ARRAY
62022: GREATEREQUAL
62023: AND
62024: PUSH
62025: LD_VAR 0 4
62029: PPUSH
62030: LD_INT 3
62032: PPUSH
62033: CALL_OW 275
62037: PUSH
62038: LD_VAR 0 5
62042: PUSH
62043: LD_INT 3
62045: ARRAY
62046: GREATEREQUAL
62047: AND
62048: ST_TO_ADDR
// end ;
62049: LD_VAR 0 3
62053: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62054: LD_INT 0
62056: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_VAR 0 2
62066: PPUSH
62067: LD_INT 0
62069: PPUSH
62070: LD_INT 0
62072: PPUSH
62073: LD_INT 1
62075: PPUSH
62076: LD_INT 0
62078: PPUSH
62079: CALL_OW 587
// end ;
62083: LD_VAR 0 3
62087: RET
// export function CenterOnNow ( unit ) ; begin
62088: LD_INT 0
62090: PPUSH
// result := IsInUnit ( unit ) ;
62091: LD_ADDR_VAR 0 2
62095: PUSH
62096: LD_VAR 0 1
62100: PPUSH
62101: CALL_OW 310
62105: ST_TO_ADDR
// if not result then
62106: LD_VAR 0 2
62110: NOT
62111: IFFALSE 62123
// result := unit ;
62113: LD_ADDR_VAR 0 2
62117: PUSH
62118: LD_VAR 0 1
62122: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62123: LD_VAR 0 1
62127: PPUSH
62128: CALL_OW 87
// end ;
62132: LD_VAR 0 2
62136: RET
// export function ComMoveHex ( unit , hex ) ; begin
62137: LD_INT 0
62139: PPUSH
// if not hex then
62140: LD_VAR 0 2
62144: NOT
62145: IFFALSE 62149
// exit ;
62147: GO 62202
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62149: LD_VAR 0 2
62153: PUSH
62154: LD_INT 1
62156: ARRAY
62157: PPUSH
62158: LD_VAR 0 2
62162: PUSH
62163: LD_INT 2
62165: ARRAY
62166: PPUSH
62167: CALL_OW 428
62171: IFFALSE 62175
// exit ;
62173: GO 62202
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62175: LD_VAR 0 1
62179: PPUSH
62180: LD_VAR 0 2
62184: PUSH
62185: LD_INT 1
62187: ARRAY
62188: PPUSH
62189: LD_VAR 0 2
62193: PUSH
62194: LD_INT 2
62196: ARRAY
62197: PPUSH
62198: CALL_OW 111
// end ;
62202: LD_VAR 0 3
62206: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62207: LD_INT 0
62209: PPUSH
62210: PPUSH
62211: PPUSH
// if not unit or not enemy then
62212: LD_VAR 0 1
62216: NOT
62217: PUSH
62218: LD_VAR 0 2
62222: NOT
62223: OR
62224: IFFALSE 62228
// exit ;
62226: GO 62352
// x := GetX ( enemy ) ;
62228: LD_ADDR_VAR 0 4
62232: PUSH
62233: LD_VAR 0 2
62237: PPUSH
62238: CALL_OW 250
62242: ST_TO_ADDR
// y := GetY ( enemy ) ;
62243: LD_ADDR_VAR 0 5
62247: PUSH
62248: LD_VAR 0 2
62252: PPUSH
62253: CALL_OW 251
62257: ST_TO_ADDR
// if ValidHex ( x , y ) then
62258: LD_VAR 0 4
62262: PPUSH
62263: LD_VAR 0 5
62267: PPUSH
62268: CALL_OW 488
62272: IFFALSE 62352
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
62274: LD_VAR 0 2
62278: PPUSH
62279: CALL_OW 247
62283: PUSH
62284: LD_INT 3
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: IN
62294: PUSH
62295: LD_VAR 0 1
62299: PPUSH
62300: CALL_OW 255
62304: PPUSH
62305: LD_VAR 0 2
62309: PPUSH
62310: CALL_OW 292
62314: OR
62315: IFFALSE 62333
// ComAttackUnit ( unit , enemy ) else
62317: LD_VAR 0 1
62321: PPUSH
62322: LD_VAR 0 2
62326: PPUSH
62327: CALL_OW 115
62331: GO 62352
// ComAgressiveMove ( unit , x , y ) ;
62333: LD_VAR 0 1
62337: PPUSH
62338: LD_VAR 0 4
62342: PPUSH
62343: LD_VAR 0 5
62347: PPUSH
62348: CALL_OW 114
// end ;
62352: LD_VAR 0 3
62356: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
62357: LD_INT 0
62359: PPUSH
62360: PPUSH
62361: PPUSH
// list := AreaToList ( area , 0 ) ;
62362: LD_ADDR_VAR 0 5
62366: PUSH
62367: LD_VAR 0 1
62371: PPUSH
62372: LD_INT 0
62374: PPUSH
62375: CALL_OW 517
62379: ST_TO_ADDR
// if not list then
62380: LD_VAR 0 5
62384: NOT
62385: IFFALSE 62389
// exit ;
62387: GO 62519
// if all then
62389: LD_VAR 0 2
62393: IFFALSE 62481
// begin for i := 1 to list [ 1 ] do
62395: LD_ADDR_VAR 0 4
62399: PUSH
62400: DOUBLE
62401: LD_INT 1
62403: DEC
62404: ST_TO_ADDR
62405: LD_VAR 0 5
62409: PUSH
62410: LD_INT 1
62412: ARRAY
62413: PUSH
62414: FOR_TO
62415: IFFALSE 62477
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62417: LD_ADDR_VAR 0 3
62421: PUSH
62422: LD_VAR 0 3
62426: PPUSH
62427: LD_VAR 0 3
62431: PUSH
62432: LD_INT 1
62434: PLUS
62435: PPUSH
62436: LD_VAR 0 5
62440: PUSH
62441: LD_INT 1
62443: ARRAY
62444: PUSH
62445: LD_VAR 0 4
62449: ARRAY
62450: PUSH
62451: LD_VAR 0 5
62455: PUSH
62456: LD_INT 2
62458: ARRAY
62459: PUSH
62460: LD_VAR 0 4
62464: ARRAY
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PPUSH
62470: CALL_OW 1
62474: ST_TO_ADDR
62475: GO 62414
62477: POP
62478: POP
// exit ;
62479: GO 62519
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
62481: LD_ADDR_VAR 0 3
62485: PUSH
62486: LD_VAR 0 5
62490: PUSH
62491: LD_INT 1
62493: ARRAY
62494: PUSH
62495: LD_INT 1
62497: ARRAY
62498: PUSH
62499: LD_VAR 0 5
62503: PUSH
62504: LD_INT 2
62506: ARRAY
62507: PUSH
62508: LD_INT 1
62510: ARRAY
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: ST_TO_ADDR
// end ;
62519: LD_VAR 0 3
62523: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
62524: LD_INT 0
62526: PPUSH
62527: PPUSH
// list := AreaToList ( area , 0 ) ;
62528: LD_ADDR_VAR 0 4
62532: PUSH
62533: LD_VAR 0 1
62537: PPUSH
62538: LD_INT 0
62540: PPUSH
62541: CALL_OW 517
62545: ST_TO_ADDR
// if not list then
62546: LD_VAR 0 4
62550: NOT
62551: IFFALSE 62555
// exit ;
62553: GO 62596
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
62555: LD_ADDR_VAR 0 3
62559: PUSH
62560: LD_VAR 0 4
62564: PUSH
62565: LD_INT 1
62567: ARRAY
62568: PUSH
62569: LD_INT 1
62571: ARRAY
62572: PUSH
62573: LD_VAR 0 4
62577: PUSH
62578: LD_INT 2
62580: ARRAY
62581: PUSH
62582: LD_INT 1
62584: ARRAY
62585: PUSH
62586: LD_VAR 0 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: ST_TO_ADDR
// end ;
62596: LD_VAR 0 3
62600: RET
// export function First ( array ) ; begin
62601: LD_INT 0
62603: PPUSH
// if not array then
62604: LD_VAR 0 1
62608: NOT
62609: IFFALSE 62613
// exit ;
62611: GO 62627
// result := array [ 1 ] ;
62613: LD_ADDR_VAR 0 2
62617: PUSH
62618: LD_VAR 0 1
62622: PUSH
62623: LD_INT 1
62625: ARRAY
62626: ST_TO_ADDR
// end ;
62627: LD_VAR 0 2
62631: RET
// export function Last ( array ) ; begin
62632: LD_INT 0
62634: PPUSH
// if not array then
62635: LD_VAR 0 1
62639: NOT
62640: IFFALSE 62644
// exit ;
62642: GO 62660
// result := array [ array ] ;
62644: LD_ADDR_VAR 0 2
62648: PUSH
62649: LD_VAR 0 1
62653: PUSH
62654: LD_VAR 0 1
62658: ARRAY
62659: ST_TO_ADDR
// end ;
62660: LD_VAR 0 2
62664: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
62665: LD_INT 0
62667: PPUSH
62668: PPUSH
// result := [ ] ;
62669: LD_ADDR_VAR 0 5
62673: PUSH
62674: EMPTY
62675: ST_TO_ADDR
// if not array then
62676: LD_VAR 0 1
62680: NOT
62681: IFFALSE 62685
// exit ;
62683: GO 62797
// for i := 1 to array do
62685: LD_ADDR_VAR 0 6
62689: PUSH
62690: DOUBLE
62691: LD_INT 1
62693: DEC
62694: ST_TO_ADDR
62695: LD_VAR 0 1
62699: PUSH
62700: FOR_TO
62701: IFFALSE 62795
// if array [ i ] [ index ] = value then
62703: LD_VAR 0 1
62707: PUSH
62708: LD_VAR 0 6
62712: ARRAY
62713: PUSH
62714: LD_VAR 0 2
62718: ARRAY
62719: PUSH
62720: LD_VAR 0 3
62724: EQUAL
62725: IFFALSE 62793
// begin if indexColumn then
62727: LD_VAR 0 4
62731: IFFALSE 62767
// result := Join ( result , array [ i ] [ indexColumn ] ) else
62733: LD_ADDR_VAR 0 5
62737: PUSH
62738: LD_VAR 0 5
62742: PPUSH
62743: LD_VAR 0 1
62747: PUSH
62748: LD_VAR 0 6
62752: ARRAY
62753: PUSH
62754: LD_VAR 0 4
62758: ARRAY
62759: PPUSH
62760: CALL 57989 0 2
62764: ST_TO_ADDR
62765: GO 62793
// result := Join ( result , array [ i ] ) ;
62767: LD_ADDR_VAR 0 5
62771: PUSH
62772: LD_VAR 0 5
62776: PPUSH
62777: LD_VAR 0 1
62781: PUSH
62782: LD_VAR 0 6
62786: ARRAY
62787: PPUSH
62788: CALL 57989 0 2
62792: ST_TO_ADDR
// end ;
62793: GO 62700
62795: POP
62796: POP
// end ;
62797: LD_VAR 0 5
62801: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
62802: LD_INT 0
62804: PPUSH
// if not vehicles or not parkingPoint then
62805: LD_VAR 0 1
62809: NOT
62810: PUSH
62811: LD_VAR 0 2
62815: NOT
62816: OR
62817: IFFALSE 62821
// exit ;
62819: GO 62919
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
62821: LD_ADDR_VAR 0 1
62825: PUSH
62826: LD_VAR 0 1
62830: PPUSH
62831: LD_INT 50
62833: PUSH
62834: EMPTY
62835: LIST
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: LD_INT 92
62842: PUSH
62843: LD_VAR 0 2
62847: PUSH
62848: LD_INT 1
62850: ARRAY
62851: PUSH
62852: LD_VAR 0 2
62856: PUSH
62857: LD_INT 2
62859: ARRAY
62860: PUSH
62861: LD_INT 8
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PPUSH
62878: CALL_OW 72
62882: ST_TO_ADDR
// if not vehicles then
62883: LD_VAR 0 1
62887: NOT
62888: IFFALSE 62892
// exit ;
62890: GO 62919
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
62892: LD_VAR 0 1
62896: PPUSH
62897: LD_VAR 0 2
62901: PUSH
62902: LD_INT 1
62904: ARRAY
62905: PPUSH
62906: LD_VAR 0 2
62910: PUSH
62911: LD_INT 2
62913: ARRAY
62914: PPUSH
62915: CALL_OW 111
// end ;
62919: LD_VAR 0 3
62923: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
62924: LD_INT 0
62926: PPUSH
62927: PPUSH
62928: PPUSH
// if not side or not area then
62929: LD_VAR 0 1
62933: NOT
62934: PUSH
62935: LD_VAR 0 2
62939: NOT
62940: OR
62941: IFFALSE 62945
// exit ;
62943: GO 63064
// tmp := AreaToList ( area , 0 ) ;
62945: LD_ADDR_VAR 0 5
62949: PUSH
62950: LD_VAR 0 2
62954: PPUSH
62955: LD_INT 0
62957: PPUSH
62958: CALL_OW 517
62962: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
62963: LD_ADDR_VAR 0 4
62967: PUSH
62968: DOUBLE
62969: LD_INT 1
62971: DEC
62972: ST_TO_ADDR
62973: LD_VAR 0 5
62977: PUSH
62978: LD_INT 1
62980: ARRAY
62981: PUSH
62982: FOR_TO
62983: IFFALSE 63062
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
62985: LD_VAR 0 5
62989: PUSH
62990: LD_INT 1
62992: ARRAY
62993: PUSH
62994: LD_VAR 0 4
62998: ARRAY
62999: PPUSH
63000: LD_VAR 0 5
63004: PUSH
63005: LD_INT 2
63007: ARRAY
63008: PUSH
63009: LD_VAR 0 4
63013: ARRAY
63014: PPUSH
63015: CALL_OW 351
63019: IFFALSE 63060
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63021: LD_VAR 0 5
63025: PUSH
63026: LD_INT 1
63028: ARRAY
63029: PUSH
63030: LD_VAR 0 4
63034: ARRAY
63035: PPUSH
63036: LD_VAR 0 5
63040: PUSH
63041: LD_INT 2
63043: ARRAY
63044: PUSH
63045: LD_VAR 0 4
63049: ARRAY
63050: PPUSH
63051: LD_VAR 0 1
63055: PPUSH
63056: CALL_OW 244
// end ;
63060: GO 62982
63062: POP
63063: POP
// end ; end_of_file end_of_file
63064: LD_VAR 0 3
63068: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63069: LD_VAR 0 1
63073: PPUSH
63074: LD_VAR 0 2
63078: PPUSH
63079: LD_VAR 0 3
63083: PPUSH
63084: LD_VAR 0 4
63088: PPUSH
63089: LD_VAR 0 5
63093: PPUSH
63094: LD_VAR 0 6
63098: PPUSH
63099: CALL 63300 0 6
// end ;
63103: PPOPN 6
63105: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63106: LD_INT 0
63108: PPUSH
// begin if not units then
63109: LD_VAR 0 1
63113: NOT
63114: IFFALSE 63118
// exit ;
63116: GO 63118
// end ;
63118: PPOPN 7
63120: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63121: CALL 63187 0 0
// end ; end_of_file
63125: PPOPN 1
63127: END
// export globalGameSaveCounter ; every 0 0$1 do
63128: GO 63130
63130: DISABLE
// begin enable ;
63131: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63132: LD_STRING updateTimer(
63134: PUSH
63135: LD_OWVAR 1
63139: STR
63140: PUSH
63141: LD_STRING );
63143: STR
63144: PPUSH
63145: CALL_OW 559
// end ;
63149: END
// every 0 0$1 do
63150: GO 63152
63152: DISABLE
// begin globalGameSaveCounter := 0 ;
63153: LD_ADDR_EXP 45
63157: PUSH
63158: LD_INT 0
63160: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
63161: LD_STRING setGameSaveCounter(0)
63163: PPUSH
63164: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
63168: LD_STRING initStreamRollete();
63170: PPUSH
63171: CALL_OW 559
// InitStreamMode ;
63175: CALL 64518 0 0
// DefineStreamItems ( false ) ;
63179: LD_INT 0
63181: PPUSH
63182: CALL 64982 0 1
// end ;
63186: END
// export function SOS_MapStart ( ) ; begin
63187: LD_INT 0
63189: PPUSH
// if streamModeActive then
63190: LD_EXP 46
63194: IFFALSE 63203
// DefineStreamItems ( true ) ;
63196: LD_INT 1
63198: PPUSH
63199: CALL 64982 0 1
// UpdateLuaVariables ( ) ;
63203: CALL 63220 0 0
// UpdateFactoryWaypoints ( ) ;
63207: CALL 77851 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63211: CALL 78108 0 0
// end ;
63215: LD_VAR 0 1
63219: RET
// function UpdateLuaVariables ( ) ; begin
63220: LD_INT 0
63222: PPUSH
// if globalGameSaveCounter then
63223: LD_EXP 45
63227: IFFALSE 63261
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
63229: LD_ADDR_EXP 45
63233: PUSH
63234: LD_EXP 45
63238: PPUSH
63239: CALL 59350 0 1
63243: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63244: LD_STRING setGameSaveCounter(
63246: PUSH
63247: LD_EXP 45
63251: STR
63252: PUSH
63253: LD_STRING )
63255: STR
63256: PPUSH
63257: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63261: LD_STRING setGameDifficulty(
63263: PUSH
63264: LD_OWVAR 67
63268: STR
63269: PUSH
63270: LD_STRING )
63272: STR
63273: PPUSH
63274: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63278: LD_STRING displayDifficulty(
63280: PUSH
63281: LD_OWVAR 67
63285: STR
63286: PUSH
63287: LD_STRING )
63289: STR
63290: PPUSH
63291: CALL_OW 559
// end ;
63295: LD_VAR 0 1
63299: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63300: LD_INT 0
63302: PPUSH
// if p2 = stream_mode then
63303: LD_VAR 0 2
63307: PUSH
63308: LD_INT 100
63310: EQUAL
63311: IFFALSE 64314
// begin if not StreamModeActive then
63313: LD_EXP 46
63317: NOT
63318: IFFALSE 63328
// StreamModeActive := true ;
63320: LD_ADDR_EXP 46
63324: PUSH
63325: LD_INT 1
63327: ST_TO_ADDR
// if p3 = 0 then
63328: LD_VAR 0 3
63332: PUSH
63333: LD_INT 0
63335: EQUAL
63336: IFFALSE 63342
// InitStreamMode ;
63338: CALL 64518 0 0
// if p3 = 1 then
63342: LD_VAR 0 3
63346: PUSH
63347: LD_INT 1
63349: EQUAL
63350: IFFALSE 63360
// sRocket := true ;
63352: LD_ADDR_EXP 51
63356: PUSH
63357: LD_INT 1
63359: ST_TO_ADDR
// if p3 = 2 then
63360: LD_VAR 0 3
63364: PUSH
63365: LD_INT 2
63367: EQUAL
63368: IFFALSE 63378
// sSpeed := true ;
63370: LD_ADDR_EXP 50
63374: PUSH
63375: LD_INT 1
63377: ST_TO_ADDR
// if p3 = 3 then
63378: LD_VAR 0 3
63382: PUSH
63383: LD_INT 3
63385: EQUAL
63386: IFFALSE 63396
// sEngine := true ;
63388: LD_ADDR_EXP 52
63392: PUSH
63393: LD_INT 1
63395: ST_TO_ADDR
// if p3 = 4 then
63396: LD_VAR 0 3
63400: PUSH
63401: LD_INT 4
63403: EQUAL
63404: IFFALSE 63414
// sSpec := true ;
63406: LD_ADDR_EXP 49
63410: PUSH
63411: LD_INT 1
63413: ST_TO_ADDR
// if p3 = 5 then
63414: LD_VAR 0 3
63418: PUSH
63419: LD_INT 5
63421: EQUAL
63422: IFFALSE 63432
// sLevel := true ;
63424: LD_ADDR_EXP 53
63428: PUSH
63429: LD_INT 1
63431: ST_TO_ADDR
// if p3 = 6 then
63432: LD_VAR 0 3
63436: PUSH
63437: LD_INT 6
63439: EQUAL
63440: IFFALSE 63450
// sArmoury := true ;
63442: LD_ADDR_EXP 54
63446: PUSH
63447: LD_INT 1
63449: ST_TO_ADDR
// if p3 = 7 then
63450: LD_VAR 0 3
63454: PUSH
63455: LD_INT 7
63457: EQUAL
63458: IFFALSE 63468
// sRadar := true ;
63460: LD_ADDR_EXP 55
63464: PUSH
63465: LD_INT 1
63467: ST_TO_ADDR
// if p3 = 8 then
63468: LD_VAR 0 3
63472: PUSH
63473: LD_INT 8
63475: EQUAL
63476: IFFALSE 63486
// sBunker := true ;
63478: LD_ADDR_EXP 56
63482: PUSH
63483: LD_INT 1
63485: ST_TO_ADDR
// if p3 = 9 then
63486: LD_VAR 0 3
63490: PUSH
63491: LD_INT 9
63493: EQUAL
63494: IFFALSE 63504
// sHack := true ;
63496: LD_ADDR_EXP 57
63500: PUSH
63501: LD_INT 1
63503: ST_TO_ADDR
// if p3 = 10 then
63504: LD_VAR 0 3
63508: PUSH
63509: LD_INT 10
63511: EQUAL
63512: IFFALSE 63522
// sFire := true ;
63514: LD_ADDR_EXP 58
63518: PUSH
63519: LD_INT 1
63521: ST_TO_ADDR
// if p3 = 11 then
63522: LD_VAR 0 3
63526: PUSH
63527: LD_INT 11
63529: EQUAL
63530: IFFALSE 63540
// sRefresh := true ;
63532: LD_ADDR_EXP 59
63536: PUSH
63537: LD_INT 1
63539: ST_TO_ADDR
// if p3 = 12 then
63540: LD_VAR 0 3
63544: PUSH
63545: LD_INT 12
63547: EQUAL
63548: IFFALSE 63558
// sExp := true ;
63550: LD_ADDR_EXP 60
63554: PUSH
63555: LD_INT 1
63557: ST_TO_ADDR
// if p3 = 13 then
63558: LD_VAR 0 3
63562: PUSH
63563: LD_INT 13
63565: EQUAL
63566: IFFALSE 63576
// sDepot := true ;
63568: LD_ADDR_EXP 61
63572: PUSH
63573: LD_INT 1
63575: ST_TO_ADDR
// if p3 = 14 then
63576: LD_VAR 0 3
63580: PUSH
63581: LD_INT 14
63583: EQUAL
63584: IFFALSE 63594
// sFlag := true ;
63586: LD_ADDR_EXP 62
63590: PUSH
63591: LD_INT 1
63593: ST_TO_ADDR
// if p3 = 15 then
63594: LD_VAR 0 3
63598: PUSH
63599: LD_INT 15
63601: EQUAL
63602: IFFALSE 63612
// sKamikadze := true ;
63604: LD_ADDR_EXP 70
63608: PUSH
63609: LD_INT 1
63611: ST_TO_ADDR
// if p3 = 16 then
63612: LD_VAR 0 3
63616: PUSH
63617: LD_INT 16
63619: EQUAL
63620: IFFALSE 63630
// sTroll := true ;
63622: LD_ADDR_EXP 71
63626: PUSH
63627: LD_INT 1
63629: ST_TO_ADDR
// if p3 = 17 then
63630: LD_VAR 0 3
63634: PUSH
63635: LD_INT 17
63637: EQUAL
63638: IFFALSE 63648
// sSlow := true ;
63640: LD_ADDR_EXP 72
63644: PUSH
63645: LD_INT 1
63647: ST_TO_ADDR
// if p3 = 18 then
63648: LD_VAR 0 3
63652: PUSH
63653: LD_INT 18
63655: EQUAL
63656: IFFALSE 63666
// sLack := true ;
63658: LD_ADDR_EXP 73
63662: PUSH
63663: LD_INT 1
63665: ST_TO_ADDR
// if p3 = 19 then
63666: LD_VAR 0 3
63670: PUSH
63671: LD_INT 19
63673: EQUAL
63674: IFFALSE 63684
// sTank := true ;
63676: LD_ADDR_EXP 75
63680: PUSH
63681: LD_INT 1
63683: ST_TO_ADDR
// if p3 = 20 then
63684: LD_VAR 0 3
63688: PUSH
63689: LD_INT 20
63691: EQUAL
63692: IFFALSE 63702
// sRemote := true ;
63694: LD_ADDR_EXP 76
63698: PUSH
63699: LD_INT 1
63701: ST_TO_ADDR
// if p3 = 21 then
63702: LD_VAR 0 3
63706: PUSH
63707: LD_INT 21
63709: EQUAL
63710: IFFALSE 63720
// sPowell := true ;
63712: LD_ADDR_EXP 77
63716: PUSH
63717: LD_INT 1
63719: ST_TO_ADDR
// if p3 = 22 then
63720: LD_VAR 0 3
63724: PUSH
63725: LD_INT 22
63727: EQUAL
63728: IFFALSE 63738
// sTeleport := true ;
63730: LD_ADDR_EXP 80
63734: PUSH
63735: LD_INT 1
63737: ST_TO_ADDR
// if p3 = 23 then
63738: LD_VAR 0 3
63742: PUSH
63743: LD_INT 23
63745: EQUAL
63746: IFFALSE 63756
// sOilTower := true ;
63748: LD_ADDR_EXP 82
63752: PUSH
63753: LD_INT 1
63755: ST_TO_ADDR
// if p3 = 24 then
63756: LD_VAR 0 3
63760: PUSH
63761: LD_INT 24
63763: EQUAL
63764: IFFALSE 63774
// sShovel := true ;
63766: LD_ADDR_EXP 83
63770: PUSH
63771: LD_INT 1
63773: ST_TO_ADDR
// if p3 = 25 then
63774: LD_VAR 0 3
63778: PUSH
63779: LD_INT 25
63781: EQUAL
63782: IFFALSE 63792
// sSheik := true ;
63784: LD_ADDR_EXP 84
63788: PUSH
63789: LD_INT 1
63791: ST_TO_ADDR
// if p3 = 26 then
63792: LD_VAR 0 3
63796: PUSH
63797: LD_INT 26
63799: EQUAL
63800: IFFALSE 63810
// sEarthquake := true ;
63802: LD_ADDR_EXP 86
63806: PUSH
63807: LD_INT 1
63809: ST_TO_ADDR
// if p3 = 27 then
63810: LD_VAR 0 3
63814: PUSH
63815: LD_INT 27
63817: EQUAL
63818: IFFALSE 63828
// sAI := true ;
63820: LD_ADDR_EXP 87
63824: PUSH
63825: LD_INT 1
63827: ST_TO_ADDR
// if p3 = 28 then
63828: LD_VAR 0 3
63832: PUSH
63833: LD_INT 28
63835: EQUAL
63836: IFFALSE 63846
// sCargo := true ;
63838: LD_ADDR_EXP 90
63842: PUSH
63843: LD_INT 1
63845: ST_TO_ADDR
// if p3 = 29 then
63846: LD_VAR 0 3
63850: PUSH
63851: LD_INT 29
63853: EQUAL
63854: IFFALSE 63864
// sDLaser := true ;
63856: LD_ADDR_EXP 91
63860: PUSH
63861: LD_INT 1
63863: ST_TO_ADDR
// if p3 = 30 then
63864: LD_VAR 0 3
63868: PUSH
63869: LD_INT 30
63871: EQUAL
63872: IFFALSE 63882
// sExchange := true ;
63874: LD_ADDR_EXP 92
63878: PUSH
63879: LD_INT 1
63881: ST_TO_ADDR
// if p3 = 31 then
63882: LD_VAR 0 3
63886: PUSH
63887: LD_INT 31
63889: EQUAL
63890: IFFALSE 63900
// sFac := true ;
63892: LD_ADDR_EXP 93
63896: PUSH
63897: LD_INT 1
63899: ST_TO_ADDR
// if p3 = 32 then
63900: LD_VAR 0 3
63904: PUSH
63905: LD_INT 32
63907: EQUAL
63908: IFFALSE 63918
// sPower := true ;
63910: LD_ADDR_EXP 94
63914: PUSH
63915: LD_INT 1
63917: ST_TO_ADDR
// if p3 = 33 then
63918: LD_VAR 0 3
63922: PUSH
63923: LD_INT 33
63925: EQUAL
63926: IFFALSE 63936
// sRandom := true ;
63928: LD_ADDR_EXP 95
63932: PUSH
63933: LD_INT 1
63935: ST_TO_ADDR
// if p3 = 34 then
63936: LD_VAR 0 3
63940: PUSH
63941: LD_INT 34
63943: EQUAL
63944: IFFALSE 63954
// sShield := true ;
63946: LD_ADDR_EXP 96
63950: PUSH
63951: LD_INT 1
63953: ST_TO_ADDR
// if p3 = 35 then
63954: LD_VAR 0 3
63958: PUSH
63959: LD_INT 35
63961: EQUAL
63962: IFFALSE 63972
// sTime := true ;
63964: LD_ADDR_EXP 97
63968: PUSH
63969: LD_INT 1
63971: ST_TO_ADDR
// if p3 = 36 then
63972: LD_VAR 0 3
63976: PUSH
63977: LD_INT 36
63979: EQUAL
63980: IFFALSE 63990
// sTools := true ;
63982: LD_ADDR_EXP 98
63986: PUSH
63987: LD_INT 1
63989: ST_TO_ADDR
// if p3 = 101 then
63990: LD_VAR 0 3
63994: PUSH
63995: LD_INT 101
63997: EQUAL
63998: IFFALSE 64008
// sSold := true ;
64000: LD_ADDR_EXP 63
64004: PUSH
64005: LD_INT 1
64007: ST_TO_ADDR
// if p3 = 102 then
64008: LD_VAR 0 3
64012: PUSH
64013: LD_INT 102
64015: EQUAL
64016: IFFALSE 64026
// sDiff := true ;
64018: LD_ADDR_EXP 64
64022: PUSH
64023: LD_INT 1
64025: ST_TO_ADDR
// if p3 = 103 then
64026: LD_VAR 0 3
64030: PUSH
64031: LD_INT 103
64033: EQUAL
64034: IFFALSE 64044
// sFog := true ;
64036: LD_ADDR_EXP 67
64040: PUSH
64041: LD_INT 1
64043: ST_TO_ADDR
// if p3 = 104 then
64044: LD_VAR 0 3
64048: PUSH
64049: LD_INT 104
64051: EQUAL
64052: IFFALSE 64062
// sReset := true ;
64054: LD_ADDR_EXP 68
64058: PUSH
64059: LD_INT 1
64061: ST_TO_ADDR
// if p3 = 105 then
64062: LD_VAR 0 3
64066: PUSH
64067: LD_INT 105
64069: EQUAL
64070: IFFALSE 64080
// sSun := true ;
64072: LD_ADDR_EXP 69
64076: PUSH
64077: LD_INT 1
64079: ST_TO_ADDR
// if p3 = 106 then
64080: LD_VAR 0 3
64084: PUSH
64085: LD_INT 106
64087: EQUAL
64088: IFFALSE 64098
// sTiger := true ;
64090: LD_ADDR_EXP 65
64094: PUSH
64095: LD_INT 1
64097: ST_TO_ADDR
// if p3 = 107 then
64098: LD_VAR 0 3
64102: PUSH
64103: LD_INT 107
64105: EQUAL
64106: IFFALSE 64116
// sBomb := true ;
64108: LD_ADDR_EXP 66
64112: PUSH
64113: LD_INT 1
64115: ST_TO_ADDR
// if p3 = 108 then
64116: LD_VAR 0 3
64120: PUSH
64121: LD_INT 108
64123: EQUAL
64124: IFFALSE 64134
// sWound := true ;
64126: LD_ADDR_EXP 74
64130: PUSH
64131: LD_INT 1
64133: ST_TO_ADDR
// if p3 = 109 then
64134: LD_VAR 0 3
64138: PUSH
64139: LD_INT 109
64141: EQUAL
64142: IFFALSE 64152
// sBetray := true ;
64144: LD_ADDR_EXP 78
64148: PUSH
64149: LD_INT 1
64151: ST_TO_ADDR
// if p3 = 110 then
64152: LD_VAR 0 3
64156: PUSH
64157: LD_INT 110
64159: EQUAL
64160: IFFALSE 64170
// sContamin := true ;
64162: LD_ADDR_EXP 79
64166: PUSH
64167: LD_INT 1
64169: ST_TO_ADDR
// if p3 = 111 then
64170: LD_VAR 0 3
64174: PUSH
64175: LD_INT 111
64177: EQUAL
64178: IFFALSE 64188
// sOil := true ;
64180: LD_ADDR_EXP 81
64184: PUSH
64185: LD_INT 1
64187: ST_TO_ADDR
// if p3 = 112 then
64188: LD_VAR 0 3
64192: PUSH
64193: LD_INT 112
64195: EQUAL
64196: IFFALSE 64206
// sStu := true ;
64198: LD_ADDR_EXP 85
64202: PUSH
64203: LD_INT 1
64205: ST_TO_ADDR
// if p3 = 113 then
64206: LD_VAR 0 3
64210: PUSH
64211: LD_INT 113
64213: EQUAL
64214: IFFALSE 64224
// sBazooka := true ;
64216: LD_ADDR_EXP 88
64220: PUSH
64221: LD_INT 1
64223: ST_TO_ADDR
// if p3 = 114 then
64224: LD_VAR 0 3
64228: PUSH
64229: LD_INT 114
64231: EQUAL
64232: IFFALSE 64242
// sMortar := true ;
64234: LD_ADDR_EXP 89
64238: PUSH
64239: LD_INT 1
64241: ST_TO_ADDR
// if p3 = 115 then
64242: LD_VAR 0 3
64246: PUSH
64247: LD_INT 115
64249: EQUAL
64250: IFFALSE 64260
// sRanger := true ;
64252: LD_ADDR_EXP 99
64256: PUSH
64257: LD_INT 1
64259: ST_TO_ADDR
// if p3 = 116 then
64260: LD_VAR 0 3
64264: PUSH
64265: LD_INT 116
64267: EQUAL
64268: IFFALSE 64278
// sComputer := true ;
64270: LD_ADDR_EXP 100
64274: PUSH
64275: LD_INT 1
64277: ST_TO_ADDR
// if p3 = 117 then
64278: LD_VAR 0 3
64282: PUSH
64283: LD_INT 117
64285: EQUAL
64286: IFFALSE 64296
// s30 := true ;
64288: LD_ADDR_EXP 101
64292: PUSH
64293: LD_INT 1
64295: ST_TO_ADDR
// if p3 = 118 then
64296: LD_VAR 0 3
64300: PUSH
64301: LD_INT 118
64303: EQUAL
64304: IFFALSE 64314
// s60 := true ;
64306: LD_ADDR_EXP 102
64310: PUSH
64311: LD_INT 1
64313: ST_TO_ADDR
// end ; if p2 = hack_mode then
64314: LD_VAR 0 2
64318: PUSH
64319: LD_INT 101
64321: EQUAL
64322: IFFALSE 64450
// begin case p3 of 1 :
64324: LD_VAR 0 3
64328: PUSH
64329: LD_INT 1
64331: DOUBLE
64332: EQUAL
64333: IFTRUE 64337
64335: GO 64344
64337: POP
// hHackUnlimitedResources ; 2 :
64338: CALL 76597 0 0
64342: GO 64450
64344: LD_INT 2
64346: DOUBLE
64347: EQUAL
64348: IFTRUE 64352
64350: GO 64359
64352: POP
// hHackSetLevel10 ; 3 :
64353: CALL 76730 0 0
64357: GO 64450
64359: LD_INT 3
64361: DOUBLE
64362: EQUAL
64363: IFTRUE 64367
64365: GO 64374
64367: POP
// hHackSetLevel10YourUnits ; 4 :
64368: CALL 76815 0 0
64372: GO 64450
64374: LD_INT 4
64376: DOUBLE
64377: EQUAL
64378: IFTRUE 64382
64380: GO 64389
64382: POP
// hHackInvincible ; 5 :
64383: CALL 77263 0 0
64387: GO 64450
64389: LD_INT 5
64391: DOUBLE
64392: EQUAL
64393: IFTRUE 64397
64395: GO 64404
64397: POP
// hHackInvisible ; 6 :
64398: CALL 77374 0 0
64402: GO 64450
64404: LD_INT 6
64406: DOUBLE
64407: EQUAL
64408: IFTRUE 64412
64410: GO 64419
64412: POP
// hHackChangeYourSide ; 7 :
64413: CALL 77431 0 0
64417: GO 64450
64419: LD_INT 7
64421: DOUBLE
64422: EQUAL
64423: IFTRUE 64427
64425: GO 64434
64427: POP
// hHackChangeUnitSide ; 8 :
64428: CALL 77473 0 0
64432: GO 64450
64434: LD_INT 8
64436: DOUBLE
64437: EQUAL
64438: IFTRUE 64442
64440: GO 64449
64442: POP
// hHackFog ; end ;
64443: CALL 77574 0 0
64447: GO 64450
64449: POP
// end ; if p2 = game_save_mode then
64450: LD_VAR 0 2
64454: PUSH
64455: LD_INT 102
64457: EQUAL
64458: IFFALSE 64513
// begin if p3 = 1 then
64460: LD_VAR 0 3
64464: PUSH
64465: LD_INT 1
64467: EQUAL
64468: IFFALSE 64480
// globalGameSaveCounter := p4 ;
64470: LD_ADDR_EXP 45
64474: PUSH
64475: LD_VAR 0 4
64479: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
64480: LD_VAR 0 3
64484: PUSH
64485: LD_INT 2
64487: EQUAL
64488: PUSH
64489: LD_EXP 45
64493: AND
64494: IFFALSE 64513
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64496: LD_STRING setGameSaveCounter(
64498: PUSH
64499: LD_EXP 45
64503: STR
64504: PUSH
64505: LD_STRING )
64507: STR
64508: PPUSH
64509: CALL_OW 559
// end ; end ;
64513: LD_VAR 0 7
64517: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
64518: LD_INT 0
64520: PPUSH
// streamModeActive := false ;
64521: LD_ADDR_EXP 46
64525: PUSH
64526: LD_INT 0
64528: ST_TO_ADDR
// normalCounter := 36 ;
64529: LD_ADDR_EXP 47
64533: PUSH
64534: LD_INT 36
64536: ST_TO_ADDR
// hardcoreCounter := 18 ;
64537: LD_ADDR_EXP 48
64541: PUSH
64542: LD_INT 18
64544: ST_TO_ADDR
// sRocket := false ;
64545: LD_ADDR_EXP 51
64549: PUSH
64550: LD_INT 0
64552: ST_TO_ADDR
// sSpeed := false ;
64553: LD_ADDR_EXP 50
64557: PUSH
64558: LD_INT 0
64560: ST_TO_ADDR
// sEngine := false ;
64561: LD_ADDR_EXP 52
64565: PUSH
64566: LD_INT 0
64568: ST_TO_ADDR
// sSpec := false ;
64569: LD_ADDR_EXP 49
64573: PUSH
64574: LD_INT 0
64576: ST_TO_ADDR
// sLevel := false ;
64577: LD_ADDR_EXP 53
64581: PUSH
64582: LD_INT 0
64584: ST_TO_ADDR
// sArmoury := false ;
64585: LD_ADDR_EXP 54
64589: PUSH
64590: LD_INT 0
64592: ST_TO_ADDR
// sRadar := false ;
64593: LD_ADDR_EXP 55
64597: PUSH
64598: LD_INT 0
64600: ST_TO_ADDR
// sBunker := false ;
64601: LD_ADDR_EXP 56
64605: PUSH
64606: LD_INT 0
64608: ST_TO_ADDR
// sHack := false ;
64609: LD_ADDR_EXP 57
64613: PUSH
64614: LD_INT 0
64616: ST_TO_ADDR
// sFire := false ;
64617: LD_ADDR_EXP 58
64621: PUSH
64622: LD_INT 0
64624: ST_TO_ADDR
// sRefresh := false ;
64625: LD_ADDR_EXP 59
64629: PUSH
64630: LD_INT 0
64632: ST_TO_ADDR
// sExp := false ;
64633: LD_ADDR_EXP 60
64637: PUSH
64638: LD_INT 0
64640: ST_TO_ADDR
// sDepot := false ;
64641: LD_ADDR_EXP 61
64645: PUSH
64646: LD_INT 0
64648: ST_TO_ADDR
// sFlag := false ;
64649: LD_ADDR_EXP 62
64653: PUSH
64654: LD_INT 0
64656: ST_TO_ADDR
// sKamikadze := false ;
64657: LD_ADDR_EXP 70
64661: PUSH
64662: LD_INT 0
64664: ST_TO_ADDR
// sTroll := false ;
64665: LD_ADDR_EXP 71
64669: PUSH
64670: LD_INT 0
64672: ST_TO_ADDR
// sSlow := false ;
64673: LD_ADDR_EXP 72
64677: PUSH
64678: LD_INT 0
64680: ST_TO_ADDR
// sLack := false ;
64681: LD_ADDR_EXP 73
64685: PUSH
64686: LD_INT 0
64688: ST_TO_ADDR
// sTank := false ;
64689: LD_ADDR_EXP 75
64693: PUSH
64694: LD_INT 0
64696: ST_TO_ADDR
// sRemote := false ;
64697: LD_ADDR_EXP 76
64701: PUSH
64702: LD_INT 0
64704: ST_TO_ADDR
// sPowell := false ;
64705: LD_ADDR_EXP 77
64709: PUSH
64710: LD_INT 0
64712: ST_TO_ADDR
// sTeleport := false ;
64713: LD_ADDR_EXP 80
64717: PUSH
64718: LD_INT 0
64720: ST_TO_ADDR
// sOilTower := false ;
64721: LD_ADDR_EXP 82
64725: PUSH
64726: LD_INT 0
64728: ST_TO_ADDR
// sShovel := false ;
64729: LD_ADDR_EXP 83
64733: PUSH
64734: LD_INT 0
64736: ST_TO_ADDR
// sSheik := false ;
64737: LD_ADDR_EXP 84
64741: PUSH
64742: LD_INT 0
64744: ST_TO_ADDR
// sEarthquake := false ;
64745: LD_ADDR_EXP 86
64749: PUSH
64750: LD_INT 0
64752: ST_TO_ADDR
// sAI := false ;
64753: LD_ADDR_EXP 87
64757: PUSH
64758: LD_INT 0
64760: ST_TO_ADDR
// sCargo := false ;
64761: LD_ADDR_EXP 90
64765: PUSH
64766: LD_INT 0
64768: ST_TO_ADDR
// sDLaser := false ;
64769: LD_ADDR_EXP 91
64773: PUSH
64774: LD_INT 0
64776: ST_TO_ADDR
// sExchange := false ;
64777: LD_ADDR_EXP 92
64781: PUSH
64782: LD_INT 0
64784: ST_TO_ADDR
// sFac := false ;
64785: LD_ADDR_EXP 93
64789: PUSH
64790: LD_INT 0
64792: ST_TO_ADDR
// sPower := false ;
64793: LD_ADDR_EXP 94
64797: PUSH
64798: LD_INT 0
64800: ST_TO_ADDR
// sRandom := false ;
64801: LD_ADDR_EXP 95
64805: PUSH
64806: LD_INT 0
64808: ST_TO_ADDR
// sShield := false ;
64809: LD_ADDR_EXP 96
64813: PUSH
64814: LD_INT 0
64816: ST_TO_ADDR
// sTime := false ;
64817: LD_ADDR_EXP 97
64821: PUSH
64822: LD_INT 0
64824: ST_TO_ADDR
// sTools := false ;
64825: LD_ADDR_EXP 98
64829: PUSH
64830: LD_INT 0
64832: ST_TO_ADDR
// sSold := false ;
64833: LD_ADDR_EXP 63
64837: PUSH
64838: LD_INT 0
64840: ST_TO_ADDR
// sDiff := false ;
64841: LD_ADDR_EXP 64
64845: PUSH
64846: LD_INT 0
64848: ST_TO_ADDR
// sFog := false ;
64849: LD_ADDR_EXP 67
64853: PUSH
64854: LD_INT 0
64856: ST_TO_ADDR
// sReset := false ;
64857: LD_ADDR_EXP 68
64861: PUSH
64862: LD_INT 0
64864: ST_TO_ADDR
// sSun := false ;
64865: LD_ADDR_EXP 69
64869: PUSH
64870: LD_INT 0
64872: ST_TO_ADDR
// sTiger := false ;
64873: LD_ADDR_EXP 65
64877: PUSH
64878: LD_INT 0
64880: ST_TO_ADDR
// sBomb := false ;
64881: LD_ADDR_EXP 66
64885: PUSH
64886: LD_INT 0
64888: ST_TO_ADDR
// sWound := false ;
64889: LD_ADDR_EXP 74
64893: PUSH
64894: LD_INT 0
64896: ST_TO_ADDR
// sBetray := false ;
64897: LD_ADDR_EXP 78
64901: PUSH
64902: LD_INT 0
64904: ST_TO_ADDR
// sContamin := false ;
64905: LD_ADDR_EXP 79
64909: PUSH
64910: LD_INT 0
64912: ST_TO_ADDR
// sOil := false ;
64913: LD_ADDR_EXP 81
64917: PUSH
64918: LD_INT 0
64920: ST_TO_ADDR
// sStu := false ;
64921: LD_ADDR_EXP 85
64925: PUSH
64926: LD_INT 0
64928: ST_TO_ADDR
// sBazooka := false ;
64929: LD_ADDR_EXP 88
64933: PUSH
64934: LD_INT 0
64936: ST_TO_ADDR
// sMortar := false ;
64937: LD_ADDR_EXP 89
64941: PUSH
64942: LD_INT 0
64944: ST_TO_ADDR
// sRanger := false ;
64945: LD_ADDR_EXP 99
64949: PUSH
64950: LD_INT 0
64952: ST_TO_ADDR
// sComputer := false ;
64953: LD_ADDR_EXP 100
64957: PUSH
64958: LD_INT 0
64960: ST_TO_ADDR
// s30 := false ;
64961: LD_ADDR_EXP 101
64965: PUSH
64966: LD_INT 0
64968: ST_TO_ADDR
// s60 := false ;
64969: LD_ADDR_EXP 102
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// end ;
64977: LD_VAR 0 1
64981: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
64982: LD_INT 0
64984: PPUSH
64985: PPUSH
64986: PPUSH
64987: PPUSH
64988: PPUSH
64989: PPUSH
64990: PPUSH
// result := [ ] ;
64991: LD_ADDR_VAR 0 2
64995: PUSH
64996: EMPTY
64997: ST_TO_ADDR
// if campaign_id = 1 then
64998: LD_OWVAR 69
65002: PUSH
65003: LD_INT 1
65005: EQUAL
65006: IFFALSE 68172
// begin case mission_number of 1 :
65008: LD_OWVAR 70
65012: PUSH
65013: LD_INT 1
65015: DOUBLE
65016: EQUAL
65017: IFTRUE 65021
65019: GO 65097
65021: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
65022: LD_ADDR_VAR 0 2
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: LD_INT 4
65032: PUSH
65033: LD_INT 11
65035: PUSH
65036: LD_INT 12
65038: PUSH
65039: LD_INT 15
65041: PUSH
65042: LD_INT 16
65044: PUSH
65045: LD_INT 22
65047: PUSH
65048: LD_INT 23
65050: PUSH
65051: LD_INT 26
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 101
65067: PUSH
65068: LD_INT 102
65070: PUSH
65071: LD_INT 106
65073: PUSH
65074: LD_INT 116
65076: PUSH
65077: LD_INT 117
65079: PUSH
65080: LD_INT 118
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: ST_TO_ADDR
65095: GO 68170
65097: LD_INT 2
65099: DOUBLE
65100: EQUAL
65101: IFTRUE 65105
65103: GO 65189
65105: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
65106: LD_ADDR_VAR 0 2
65110: PUSH
65111: LD_INT 2
65113: PUSH
65114: LD_INT 4
65116: PUSH
65117: LD_INT 11
65119: PUSH
65120: LD_INT 12
65122: PUSH
65123: LD_INT 15
65125: PUSH
65126: LD_INT 16
65128: PUSH
65129: LD_INT 22
65131: PUSH
65132: LD_INT 23
65134: PUSH
65135: LD_INT 26
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 101
65151: PUSH
65152: LD_INT 102
65154: PUSH
65155: LD_INT 105
65157: PUSH
65158: LD_INT 106
65160: PUSH
65161: LD_INT 108
65163: PUSH
65164: LD_INT 116
65166: PUSH
65167: LD_INT 117
65169: PUSH
65170: LD_INT 118
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: ST_TO_ADDR
65187: GO 68170
65189: LD_INT 3
65191: DOUBLE
65192: EQUAL
65193: IFTRUE 65197
65195: GO 65285
65197: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
65198: LD_ADDR_VAR 0 2
65202: PUSH
65203: LD_INT 2
65205: PUSH
65206: LD_INT 4
65208: PUSH
65209: LD_INT 5
65211: PUSH
65212: LD_INT 11
65214: PUSH
65215: LD_INT 12
65217: PUSH
65218: LD_INT 15
65220: PUSH
65221: LD_INT 16
65223: PUSH
65224: LD_INT 22
65226: PUSH
65227: LD_INT 26
65229: PUSH
65230: LD_INT 36
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 101
65247: PUSH
65248: LD_INT 102
65250: PUSH
65251: LD_INT 105
65253: PUSH
65254: LD_INT 106
65256: PUSH
65257: LD_INT 108
65259: PUSH
65260: LD_INT 116
65262: PUSH
65263: LD_INT 117
65265: PUSH
65266: LD_INT 118
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: ST_TO_ADDR
65283: GO 68170
65285: LD_INT 4
65287: DOUBLE
65288: EQUAL
65289: IFTRUE 65293
65291: GO 65389
65293: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
65294: LD_ADDR_VAR 0 2
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: LD_INT 4
65304: PUSH
65305: LD_INT 5
65307: PUSH
65308: LD_INT 8
65310: PUSH
65311: LD_INT 11
65313: PUSH
65314: LD_INT 12
65316: PUSH
65317: LD_INT 15
65319: PUSH
65320: LD_INT 16
65322: PUSH
65323: LD_INT 22
65325: PUSH
65326: LD_INT 23
65328: PUSH
65329: LD_INT 26
65331: PUSH
65332: LD_INT 36
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 101
65351: PUSH
65352: LD_INT 102
65354: PUSH
65355: LD_INT 105
65357: PUSH
65358: LD_INT 106
65360: PUSH
65361: LD_INT 108
65363: PUSH
65364: LD_INT 116
65366: PUSH
65367: LD_INT 117
65369: PUSH
65370: LD_INT 118
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: ST_TO_ADDR
65387: GO 68170
65389: LD_INT 5
65391: DOUBLE
65392: EQUAL
65393: IFTRUE 65397
65395: GO 65509
65397: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
65398: LD_ADDR_VAR 0 2
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 4
65408: PUSH
65409: LD_INT 5
65411: PUSH
65412: LD_INT 6
65414: PUSH
65415: LD_INT 8
65417: PUSH
65418: LD_INT 11
65420: PUSH
65421: LD_INT 12
65423: PUSH
65424: LD_INT 15
65426: PUSH
65427: LD_INT 16
65429: PUSH
65430: LD_INT 22
65432: PUSH
65433: LD_INT 23
65435: PUSH
65436: LD_INT 25
65438: PUSH
65439: LD_INT 26
65441: PUSH
65442: LD_INT 36
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 101
65463: PUSH
65464: LD_INT 102
65466: PUSH
65467: LD_INT 105
65469: PUSH
65470: LD_INT 106
65472: PUSH
65473: LD_INT 108
65475: PUSH
65476: LD_INT 109
65478: PUSH
65479: LD_INT 112
65481: PUSH
65482: LD_INT 116
65484: PUSH
65485: LD_INT 117
65487: PUSH
65488: LD_INT 118
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: ST_TO_ADDR
65507: GO 68170
65509: LD_INT 6
65511: DOUBLE
65512: EQUAL
65513: IFTRUE 65517
65515: GO 65649
65517: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
65518: LD_ADDR_VAR 0 2
65522: PUSH
65523: LD_INT 2
65525: PUSH
65526: LD_INT 4
65528: PUSH
65529: LD_INT 5
65531: PUSH
65532: LD_INT 6
65534: PUSH
65535: LD_INT 8
65537: PUSH
65538: LD_INT 11
65540: PUSH
65541: LD_INT 12
65543: PUSH
65544: LD_INT 15
65546: PUSH
65547: LD_INT 16
65549: PUSH
65550: LD_INT 20
65552: PUSH
65553: LD_INT 21
65555: PUSH
65556: LD_INT 22
65558: PUSH
65559: LD_INT 23
65561: PUSH
65562: LD_INT 25
65564: PUSH
65565: LD_INT 26
65567: PUSH
65568: LD_INT 30
65570: PUSH
65571: LD_INT 31
65573: PUSH
65574: LD_INT 32
65576: PUSH
65577: LD_INT 36
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 101
65603: PUSH
65604: LD_INT 102
65606: PUSH
65607: LD_INT 105
65609: PUSH
65610: LD_INT 106
65612: PUSH
65613: LD_INT 108
65615: PUSH
65616: LD_INT 109
65618: PUSH
65619: LD_INT 112
65621: PUSH
65622: LD_INT 116
65624: PUSH
65625: LD_INT 117
65627: PUSH
65628: LD_INT 118
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: ST_TO_ADDR
65647: GO 68170
65649: LD_INT 7
65651: DOUBLE
65652: EQUAL
65653: IFTRUE 65657
65655: GO 65769
65657: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
65658: LD_ADDR_VAR 0 2
65662: PUSH
65663: LD_INT 2
65665: PUSH
65666: LD_INT 4
65668: PUSH
65669: LD_INT 5
65671: PUSH
65672: LD_INT 7
65674: PUSH
65675: LD_INT 11
65677: PUSH
65678: LD_INT 12
65680: PUSH
65681: LD_INT 15
65683: PUSH
65684: LD_INT 16
65686: PUSH
65687: LD_INT 20
65689: PUSH
65690: LD_INT 21
65692: PUSH
65693: LD_INT 22
65695: PUSH
65696: LD_INT 23
65698: PUSH
65699: LD_INT 25
65701: PUSH
65702: LD_INT 26
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 101
65723: PUSH
65724: LD_INT 102
65726: PUSH
65727: LD_INT 103
65729: PUSH
65730: LD_INT 105
65732: PUSH
65733: LD_INT 106
65735: PUSH
65736: LD_INT 108
65738: PUSH
65739: LD_INT 112
65741: PUSH
65742: LD_INT 116
65744: PUSH
65745: LD_INT 117
65747: PUSH
65748: LD_INT 118
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: ST_TO_ADDR
65767: GO 68170
65769: LD_INT 8
65771: DOUBLE
65772: EQUAL
65773: IFTRUE 65777
65775: GO 65917
65777: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
65778: LD_ADDR_VAR 0 2
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: LD_INT 4
65788: PUSH
65789: LD_INT 5
65791: PUSH
65792: LD_INT 6
65794: PUSH
65795: LD_INT 7
65797: PUSH
65798: LD_INT 8
65800: PUSH
65801: LD_INT 11
65803: PUSH
65804: LD_INT 12
65806: PUSH
65807: LD_INT 15
65809: PUSH
65810: LD_INT 16
65812: PUSH
65813: LD_INT 20
65815: PUSH
65816: LD_INT 21
65818: PUSH
65819: LD_INT 22
65821: PUSH
65822: LD_INT 23
65824: PUSH
65825: LD_INT 25
65827: PUSH
65828: LD_INT 26
65830: PUSH
65831: LD_INT 30
65833: PUSH
65834: LD_INT 31
65836: PUSH
65837: LD_INT 32
65839: PUSH
65840: LD_INT 36
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 101
65867: PUSH
65868: LD_INT 102
65870: PUSH
65871: LD_INT 103
65873: PUSH
65874: LD_INT 105
65876: PUSH
65877: LD_INT 106
65879: PUSH
65880: LD_INT 108
65882: PUSH
65883: LD_INT 109
65885: PUSH
65886: LD_INT 112
65888: PUSH
65889: LD_INT 116
65891: PUSH
65892: LD_INT 117
65894: PUSH
65895: LD_INT 118
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: ST_TO_ADDR
65915: GO 68170
65917: LD_INT 9
65919: DOUBLE
65920: EQUAL
65921: IFTRUE 65925
65923: GO 66073
65925: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
65926: LD_ADDR_VAR 0 2
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: LD_INT 4
65936: PUSH
65937: LD_INT 5
65939: PUSH
65940: LD_INT 6
65942: PUSH
65943: LD_INT 7
65945: PUSH
65946: LD_INT 8
65948: PUSH
65949: LD_INT 11
65951: PUSH
65952: LD_INT 12
65954: PUSH
65955: LD_INT 15
65957: PUSH
65958: LD_INT 16
65960: PUSH
65961: LD_INT 20
65963: PUSH
65964: LD_INT 21
65966: PUSH
65967: LD_INT 22
65969: PUSH
65970: LD_INT 23
65972: PUSH
65973: LD_INT 25
65975: PUSH
65976: LD_INT 26
65978: PUSH
65979: LD_INT 28
65981: PUSH
65982: LD_INT 30
65984: PUSH
65985: LD_INT 31
65987: PUSH
65988: LD_INT 32
65990: PUSH
65991: LD_INT 36
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 101
66019: PUSH
66020: LD_INT 102
66022: PUSH
66023: LD_INT 103
66025: PUSH
66026: LD_INT 105
66028: PUSH
66029: LD_INT 106
66031: PUSH
66032: LD_INT 108
66034: PUSH
66035: LD_INT 109
66037: PUSH
66038: LD_INT 112
66040: PUSH
66041: LD_INT 114
66043: PUSH
66044: LD_INT 116
66046: PUSH
66047: LD_INT 117
66049: PUSH
66050: LD_INT 118
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: ST_TO_ADDR
66071: GO 68170
66073: LD_INT 10
66075: DOUBLE
66076: EQUAL
66077: IFTRUE 66081
66079: GO 66277
66081: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
66082: LD_ADDR_VAR 0 2
66086: PUSH
66087: LD_INT 2
66089: PUSH
66090: LD_INT 4
66092: PUSH
66093: LD_INT 5
66095: PUSH
66096: LD_INT 6
66098: PUSH
66099: LD_INT 7
66101: PUSH
66102: LD_INT 8
66104: PUSH
66105: LD_INT 9
66107: PUSH
66108: LD_INT 10
66110: PUSH
66111: LD_INT 11
66113: PUSH
66114: LD_INT 12
66116: PUSH
66117: LD_INT 13
66119: PUSH
66120: LD_INT 14
66122: PUSH
66123: LD_INT 15
66125: PUSH
66126: LD_INT 16
66128: PUSH
66129: LD_INT 17
66131: PUSH
66132: LD_INT 18
66134: PUSH
66135: LD_INT 19
66137: PUSH
66138: LD_INT 20
66140: PUSH
66141: LD_INT 21
66143: PUSH
66144: LD_INT 22
66146: PUSH
66147: LD_INT 23
66149: PUSH
66150: LD_INT 24
66152: PUSH
66153: LD_INT 25
66155: PUSH
66156: LD_INT 26
66158: PUSH
66159: LD_INT 28
66161: PUSH
66162: LD_INT 30
66164: PUSH
66165: LD_INT 31
66167: PUSH
66168: LD_INT 32
66170: PUSH
66171: LD_INT 36
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 101
66207: PUSH
66208: LD_INT 102
66210: PUSH
66211: LD_INT 103
66213: PUSH
66214: LD_INT 104
66216: PUSH
66217: LD_INT 105
66219: PUSH
66220: LD_INT 106
66222: PUSH
66223: LD_INT 107
66225: PUSH
66226: LD_INT 108
66228: PUSH
66229: LD_INT 109
66231: PUSH
66232: LD_INT 110
66234: PUSH
66235: LD_INT 111
66237: PUSH
66238: LD_INT 112
66240: PUSH
66241: LD_INT 114
66243: PUSH
66244: LD_INT 116
66246: PUSH
66247: LD_INT 117
66249: PUSH
66250: LD_INT 118
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: ST_TO_ADDR
66275: GO 68170
66277: LD_INT 11
66279: DOUBLE
66280: EQUAL
66281: IFTRUE 66285
66283: GO 66489
66285: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
66286: LD_ADDR_VAR 0 2
66290: PUSH
66291: LD_INT 2
66293: PUSH
66294: LD_INT 3
66296: PUSH
66297: LD_INT 4
66299: PUSH
66300: LD_INT 5
66302: PUSH
66303: LD_INT 6
66305: PUSH
66306: LD_INT 7
66308: PUSH
66309: LD_INT 8
66311: PUSH
66312: LD_INT 9
66314: PUSH
66315: LD_INT 10
66317: PUSH
66318: LD_INT 11
66320: PUSH
66321: LD_INT 12
66323: PUSH
66324: LD_INT 13
66326: PUSH
66327: LD_INT 14
66329: PUSH
66330: LD_INT 15
66332: PUSH
66333: LD_INT 16
66335: PUSH
66336: LD_INT 17
66338: PUSH
66339: LD_INT 18
66341: PUSH
66342: LD_INT 19
66344: PUSH
66345: LD_INT 20
66347: PUSH
66348: LD_INT 21
66350: PUSH
66351: LD_INT 22
66353: PUSH
66354: LD_INT 23
66356: PUSH
66357: LD_INT 24
66359: PUSH
66360: LD_INT 25
66362: PUSH
66363: LD_INT 26
66365: PUSH
66366: LD_INT 28
66368: PUSH
66369: LD_INT 30
66371: PUSH
66372: LD_INT 31
66374: PUSH
66375: LD_INT 32
66377: PUSH
66378: LD_INT 34
66380: PUSH
66381: LD_INT 36
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 101
66419: PUSH
66420: LD_INT 102
66422: PUSH
66423: LD_INT 103
66425: PUSH
66426: LD_INT 104
66428: PUSH
66429: LD_INT 105
66431: PUSH
66432: LD_INT 106
66434: PUSH
66435: LD_INT 107
66437: PUSH
66438: LD_INT 108
66440: PUSH
66441: LD_INT 109
66443: PUSH
66444: LD_INT 110
66446: PUSH
66447: LD_INT 111
66449: PUSH
66450: LD_INT 112
66452: PUSH
66453: LD_INT 114
66455: PUSH
66456: LD_INT 116
66458: PUSH
66459: LD_INT 117
66461: PUSH
66462: LD_INT 118
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: ST_TO_ADDR
66487: GO 68170
66489: LD_INT 12
66491: DOUBLE
66492: EQUAL
66493: IFTRUE 66497
66495: GO 66717
66497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
66498: LD_ADDR_VAR 0 2
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: LD_INT 2
66508: PUSH
66509: LD_INT 3
66511: PUSH
66512: LD_INT 4
66514: PUSH
66515: LD_INT 5
66517: PUSH
66518: LD_INT 6
66520: PUSH
66521: LD_INT 7
66523: PUSH
66524: LD_INT 8
66526: PUSH
66527: LD_INT 9
66529: PUSH
66530: LD_INT 10
66532: PUSH
66533: LD_INT 11
66535: PUSH
66536: LD_INT 12
66538: PUSH
66539: LD_INT 13
66541: PUSH
66542: LD_INT 14
66544: PUSH
66545: LD_INT 15
66547: PUSH
66548: LD_INT 16
66550: PUSH
66551: LD_INT 17
66553: PUSH
66554: LD_INT 18
66556: PUSH
66557: LD_INT 19
66559: PUSH
66560: LD_INT 20
66562: PUSH
66563: LD_INT 21
66565: PUSH
66566: LD_INT 22
66568: PUSH
66569: LD_INT 23
66571: PUSH
66572: LD_INT 24
66574: PUSH
66575: LD_INT 25
66577: PUSH
66578: LD_INT 26
66580: PUSH
66581: LD_INT 27
66583: PUSH
66584: LD_INT 28
66586: PUSH
66587: LD_INT 30
66589: PUSH
66590: LD_INT 31
66592: PUSH
66593: LD_INT 32
66595: PUSH
66596: LD_INT 33
66598: PUSH
66599: LD_INT 34
66601: PUSH
66602: LD_INT 36
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 101
66643: PUSH
66644: LD_INT 102
66646: PUSH
66647: LD_INT 103
66649: PUSH
66650: LD_INT 104
66652: PUSH
66653: LD_INT 105
66655: PUSH
66656: LD_INT 106
66658: PUSH
66659: LD_INT 107
66661: PUSH
66662: LD_INT 108
66664: PUSH
66665: LD_INT 109
66667: PUSH
66668: LD_INT 110
66670: PUSH
66671: LD_INT 111
66673: PUSH
66674: LD_INT 112
66676: PUSH
66677: LD_INT 113
66679: PUSH
66680: LD_INT 114
66682: PUSH
66683: LD_INT 116
66685: PUSH
66686: LD_INT 117
66688: PUSH
66689: LD_INT 118
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: ST_TO_ADDR
66715: GO 68170
66717: LD_INT 13
66719: DOUBLE
66720: EQUAL
66721: IFTRUE 66725
66723: GO 66933
66725: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
66726: LD_ADDR_VAR 0 2
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: LD_INT 2
66736: PUSH
66737: LD_INT 3
66739: PUSH
66740: LD_INT 4
66742: PUSH
66743: LD_INT 5
66745: PUSH
66746: LD_INT 8
66748: PUSH
66749: LD_INT 9
66751: PUSH
66752: LD_INT 10
66754: PUSH
66755: LD_INT 11
66757: PUSH
66758: LD_INT 12
66760: PUSH
66761: LD_INT 14
66763: PUSH
66764: LD_INT 15
66766: PUSH
66767: LD_INT 16
66769: PUSH
66770: LD_INT 17
66772: PUSH
66773: LD_INT 18
66775: PUSH
66776: LD_INT 19
66778: PUSH
66779: LD_INT 20
66781: PUSH
66782: LD_INT 21
66784: PUSH
66785: LD_INT 22
66787: PUSH
66788: LD_INT 23
66790: PUSH
66791: LD_INT 24
66793: PUSH
66794: LD_INT 25
66796: PUSH
66797: LD_INT 26
66799: PUSH
66800: LD_INT 27
66802: PUSH
66803: LD_INT 28
66805: PUSH
66806: LD_INT 30
66808: PUSH
66809: LD_INT 31
66811: PUSH
66812: LD_INT 32
66814: PUSH
66815: LD_INT 33
66817: PUSH
66818: LD_INT 34
66820: PUSH
66821: LD_INT 36
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 101
66859: PUSH
66860: LD_INT 102
66862: PUSH
66863: LD_INT 103
66865: PUSH
66866: LD_INT 104
66868: PUSH
66869: LD_INT 105
66871: PUSH
66872: LD_INT 106
66874: PUSH
66875: LD_INT 107
66877: PUSH
66878: LD_INT 108
66880: PUSH
66881: LD_INT 109
66883: PUSH
66884: LD_INT 110
66886: PUSH
66887: LD_INT 111
66889: PUSH
66890: LD_INT 112
66892: PUSH
66893: LD_INT 113
66895: PUSH
66896: LD_INT 114
66898: PUSH
66899: LD_INT 116
66901: PUSH
66902: LD_INT 117
66904: PUSH
66905: LD_INT 118
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: ST_TO_ADDR
66931: GO 68170
66933: LD_INT 14
66935: DOUBLE
66936: EQUAL
66937: IFTRUE 66941
66939: GO 67165
66941: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
66942: LD_ADDR_VAR 0 2
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: LD_INT 4
66958: PUSH
66959: LD_INT 5
66961: PUSH
66962: LD_INT 6
66964: PUSH
66965: LD_INT 7
66967: PUSH
66968: LD_INT 8
66970: PUSH
66971: LD_INT 9
66973: PUSH
66974: LD_INT 10
66976: PUSH
66977: LD_INT 11
66979: PUSH
66980: LD_INT 12
66982: PUSH
66983: LD_INT 13
66985: PUSH
66986: LD_INT 14
66988: PUSH
66989: LD_INT 15
66991: PUSH
66992: LD_INT 16
66994: PUSH
66995: LD_INT 17
66997: PUSH
66998: LD_INT 18
67000: PUSH
67001: LD_INT 19
67003: PUSH
67004: LD_INT 20
67006: PUSH
67007: LD_INT 21
67009: PUSH
67010: LD_INT 22
67012: PUSH
67013: LD_INT 23
67015: PUSH
67016: LD_INT 24
67018: PUSH
67019: LD_INT 25
67021: PUSH
67022: LD_INT 26
67024: PUSH
67025: LD_INT 27
67027: PUSH
67028: LD_INT 28
67030: PUSH
67031: LD_INT 29
67033: PUSH
67034: LD_INT 30
67036: PUSH
67037: LD_INT 31
67039: PUSH
67040: LD_INT 32
67042: PUSH
67043: LD_INT 33
67045: PUSH
67046: LD_INT 34
67048: PUSH
67049: LD_INT 36
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 101
67091: PUSH
67092: LD_INT 102
67094: PUSH
67095: LD_INT 103
67097: PUSH
67098: LD_INT 104
67100: PUSH
67101: LD_INT 105
67103: PUSH
67104: LD_INT 106
67106: PUSH
67107: LD_INT 107
67109: PUSH
67110: LD_INT 108
67112: PUSH
67113: LD_INT 109
67115: PUSH
67116: LD_INT 110
67118: PUSH
67119: LD_INT 111
67121: PUSH
67122: LD_INT 112
67124: PUSH
67125: LD_INT 113
67127: PUSH
67128: LD_INT 114
67130: PUSH
67131: LD_INT 116
67133: PUSH
67134: LD_INT 117
67136: PUSH
67137: LD_INT 118
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: ST_TO_ADDR
67163: GO 68170
67165: LD_INT 15
67167: DOUBLE
67168: EQUAL
67169: IFTRUE 67173
67171: GO 67397
67173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
67174: LD_ADDR_VAR 0 2
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: LD_INT 2
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: LD_INT 4
67190: PUSH
67191: LD_INT 5
67193: PUSH
67194: LD_INT 6
67196: PUSH
67197: LD_INT 7
67199: PUSH
67200: LD_INT 8
67202: PUSH
67203: LD_INT 9
67205: PUSH
67206: LD_INT 10
67208: PUSH
67209: LD_INT 11
67211: PUSH
67212: LD_INT 12
67214: PUSH
67215: LD_INT 13
67217: PUSH
67218: LD_INT 14
67220: PUSH
67221: LD_INT 15
67223: PUSH
67224: LD_INT 16
67226: PUSH
67227: LD_INT 17
67229: PUSH
67230: LD_INT 18
67232: PUSH
67233: LD_INT 19
67235: PUSH
67236: LD_INT 20
67238: PUSH
67239: LD_INT 21
67241: PUSH
67242: LD_INT 22
67244: PUSH
67245: LD_INT 23
67247: PUSH
67248: LD_INT 24
67250: PUSH
67251: LD_INT 25
67253: PUSH
67254: LD_INT 26
67256: PUSH
67257: LD_INT 27
67259: PUSH
67260: LD_INT 28
67262: PUSH
67263: LD_INT 29
67265: PUSH
67266: LD_INT 30
67268: PUSH
67269: LD_INT 31
67271: PUSH
67272: LD_INT 32
67274: PUSH
67275: LD_INT 33
67277: PUSH
67278: LD_INT 34
67280: PUSH
67281: LD_INT 36
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 101
67323: PUSH
67324: LD_INT 102
67326: PUSH
67327: LD_INT 103
67329: PUSH
67330: LD_INT 104
67332: PUSH
67333: LD_INT 105
67335: PUSH
67336: LD_INT 106
67338: PUSH
67339: LD_INT 107
67341: PUSH
67342: LD_INT 108
67344: PUSH
67345: LD_INT 109
67347: PUSH
67348: LD_INT 110
67350: PUSH
67351: LD_INT 111
67353: PUSH
67354: LD_INT 112
67356: PUSH
67357: LD_INT 113
67359: PUSH
67360: LD_INT 114
67362: PUSH
67363: LD_INT 116
67365: PUSH
67366: LD_INT 117
67368: PUSH
67369: LD_INT 118
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: ST_TO_ADDR
67395: GO 68170
67397: LD_INT 16
67399: DOUBLE
67400: EQUAL
67401: IFTRUE 67405
67403: GO 67541
67405: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
67406: LD_ADDR_VAR 0 2
67410: PUSH
67411: LD_INT 2
67413: PUSH
67414: LD_INT 4
67416: PUSH
67417: LD_INT 5
67419: PUSH
67420: LD_INT 7
67422: PUSH
67423: LD_INT 11
67425: PUSH
67426: LD_INT 12
67428: PUSH
67429: LD_INT 15
67431: PUSH
67432: LD_INT 16
67434: PUSH
67435: LD_INT 20
67437: PUSH
67438: LD_INT 21
67440: PUSH
67441: LD_INT 22
67443: PUSH
67444: LD_INT 23
67446: PUSH
67447: LD_INT 25
67449: PUSH
67450: LD_INT 26
67452: PUSH
67453: LD_INT 30
67455: PUSH
67456: LD_INT 31
67458: PUSH
67459: LD_INT 32
67461: PUSH
67462: LD_INT 33
67464: PUSH
67465: LD_INT 34
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 101
67491: PUSH
67492: LD_INT 102
67494: PUSH
67495: LD_INT 103
67497: PUSH
67498: LD_INT 106
67500: PUSH
67501: LD_INT 108
67503: PUSH
67504: LD_INT 112
67506: PUSH
67507: LD_INT 113
67509: PUSH
67510: LD_INT 114
67512: PUSH
67513: LD_INT 116
67515: PUSH
67516: LD_INT 117
67518: PUSH
67519: LD_INT 118
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: ST_TO_ADDR
67539: GO 68170
67541: LD_INT 17
67543: DOUBLE
67544: EQUAL
67545: IFTRUE 67549
67547: GO 67773
67549: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
67550: LD_ADDR_VAR 0 2
67554: PUSH
67555: LD_INT 1
67557: PUSH
67558: LD_INT 2
67560: PUSH
67561: LD_INT 3
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: LD_INT 5
67569: PUSH
67570: LD_INT 6
67572: PUSH
67573: LD_INT 7
67575: PUSH
67576: LD_INT 8
67578: PUSH
67579: LD_INT 9
67581: PUSH
67582: LD_INT 10
67584: PUSH
67585: LD_INT 11
67587: PUSH
67588: LD_INT 12
67590: PUSH
67591: LD_INT 13
67593: PUSH
67594: LD_INT 14
67596: PUSH
67597: LD_INT 15
67599: PUSH
67600: LD_INT 16
67602: PUSH
67603: LD_INT 17
67605: PUSH
67606: LD_INT 18
67608: PUSH
67609: LD_INT 19
67611: PUSH
67612: LD_INT 20
67614: PUSH
67615: LD_INT 21
67617: PUSH
67618: LD_INT 22
67620: PUSH
67621: LD_INT 23
67623: PUSH
67624: LD_INT 24
67626: PUSH
67627: LD_INT 25
67629: PUSH
67630: LD_INT 26
67632: PUSH
67633: LD_INT 27
67635: PUSH
67636: LD_INT 28
67638: PUSH
67639: LD_INT 29
67641: PUSH
67642: LD_INT 30
67644: PUSH
67645: LD_INT 31
67647: PUSH
67648: LD_INT 32
67650: PUSH
67651: LD_INT 33
67653: PUSH
67654: LD_INT 34
67656: PUSH
67657: LD_INT 36
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 101
67699: PUSH
67700: LD_INT 102
67702: PUSH
67703: LD_INT 103
67705: PUSH
67706: LD_INT 104
67708: PUSH
67709: LD_INT 105
67711: PUSH
67712: LD_INT 106
67714: PUSH
67715: LD_INT 107
67717: PUSH
67718: LD_INT 108
67720: PUSH
67721: LD_INT 109
67723: PUSH
67724: LD_INT 110
67726: PUSH
67727: LD_INT 111
67729: PUSH
67730: LD_INT 112
67732: PUSH
67733: LD_INT 113
67735: PUSH
67736: LD_INT 114
67738: PUSH
67739: LD_INT 116
67741: PUSH
67742: LD_INT 117
67744: PUSH
67745: LD_INT 118
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: ST_TO_ADDR
67771: GO 68170
67773: LD_INT 18
67775: DOUBLE
67776: EQUAL
67777: IFTRUE 67781
67779: GO 67929
67781: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
67782: LD_ADDR_VAR 0 2
67786: PUSH
67787: LD_INT 2
67789: PUSH
67790: LD_INT 4
67792: PUSH
67793: LD_INT 5
67795: PUSH
67796: LD_INT 7
67798: PUSH
67799: LD_INT 11
67801: PUSH
67802: LD_INT 12
67804: PUSH
67805: LD_INT 15
67807: PUSH
67808: LD_INT 16
67810: PUSH
67811: LD_INT 20
67813: PUSH
67814: LD_INT 21
67816: PUSH
67817: LD_INT 22
67819: PUSH
67820: LD_INT 23
67822: PUSH
67823: LD_INT 25
67825: PUSH
67826: LD_INT 26
67828: PUSH
67829: LD_INT 30
67831: PUSH
67832: LD_INT 31
67834: PUSH
67835: LD_INT 32
67837: PUSH
67838: LD_INT 33
67840: PUSH
67841: LD_INT 34
67843: PUSH
67844: LD_INT 35
67846: PUSH
67847: LD_INT 36
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 101
67875: PUSH
67876: LD_INT 102
67878: PUSH
67879: LD_INT 103
67881: PUSH
67882: LD_INT 106
67884: PUSH
67885: LD_INT 108
67887: PUSH
67888: LD_INT 112
67890: PUSH
67891: LD_INT 113
67893: PUSH
67894: LD_INT 114
67896: PUSH
67897: LD_INT 115
67899: PUSH
67900: LD_INT 116
67902: PUSH
67903: LD_INT 117
67905: PUSH
67906: LD_INT 118
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: ST_TO_ADDR
67927: GO 68170
67929: LD_INT 19
67931: DOUBLE
67932: EQUAL
67933: IFTRUE 67937
67935: GO 68169
67937: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
67938: LD_ADDR_VAR 0 2
67942: PUSH
67943: LD_INT 1
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: LD_INT 3
67951: PUSH
67952: LD_INT 4
67954: PUSH
67955: LD_INT 5
67957: PUSH
67958: LD_INT 6
67960: PUSH
67961: LD_INT 7
67963: PUSH
67964: LD_INT 8
67966: PUSH
67967: LD_INT 9
67969: PUSH
67970: LD_INT 10
67972: PUSH
67973: LD_INT 11
67975: PUSH
67976: LD_INT 12
67978: PUSH
67979: LD_INT 13
67981: PUSH
67982: LD_INT 14
67984: PUSH
67985: LD_INT 15
67987: PUSH
67988: LD_INT 16
67990: PUSH
67991: LD_INT 17
67993: PUSH
67994: LD_INT 18
67996: PUSH
67997: LD_INT 19
67999: PUSH
68000: LD_INT 20
68002: PUSH
68003: LD_INT 21
68005: PUSH
68006: LD_INT 22
68008: PUSH
68009: LD_INT 23
68011: PUSH
68012: LD_INT 24
68014: PUSH
68015: LD_INT 25
68017: PUSH
68018: LD_INT 26
68020: PUSH
68021: LD_INT 27
68023: PUSH
68024: LD_INT 28
68026: PUSH
68027: LD_INT 29
68029: PUSH
68030: LD_INT 30
68032: PUSH
68033: LD_INT 31
68035: PUSH
68036: LD_INT 32
68038: PUSH
68039: LD_INT 33
68041: PUSH
68042: LD_INT 34
68044: PUSH
68045: LD_INT 35
68047: PUSH
68048: LD_INT 36
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 101
68091: PUSH
68092: LD_INT 102
68094: PUSH
68095: LD_INT 103
68097: PUSH
68098: LD_INT 104
68100: PUSH
68101: LD_INT 105
68103: PUSH
68104: LD_INT 106
68106: PUSH
68107: LD_INT 107
68109: PUSH
68110: LD_INT 108
68112: PUSH
68113: LD_INT 109
68115: PUSH
68116: LD_INT 110
68118: PUSH
68119: LD_INT 111
68121: PUSH
68122: LD_INT 112
68124: PUSH
68125: LD_INT 113
68127: PUSH
68128: LD_INT 114
68130: PUSH
68131: LD_INT 115
68133: PUSH
68134: LD_INT 116
68136: PUSH
68137: LD_INT 117
68139: PUSH
68140: LD_INT 118
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: ST_TO_ADDR
68167: GO 68170
68169: POP
// end else
68170: GO 68401
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
68172: LD_ADDR_VAR 0 2
68176: PUSH
68177: LD_INT 1
68179: PUSH
68180: LD_INT 2
68182: PUSH
68183: LD_INT 3
68185: PUSH
68186: LD_INT 4
68188: PUSH
68189: LD_INT 5
68191: PUSH
68192: LD_INT 6
68194: PUSH
68195: LD_INT 7
68197: PUSH
68198: LD_INT 8
68200: PUSH
68201: LD_INT 9
68203: PUSH
68204: LD_INT 10
68206: PUSH
68207: LD_INT 11
68209: PUSH
68210: LD_INT 12
68212: PUSH
68213: LD_INT 13
68215: PUSH
68216: LD_INT 14
68218: PUSH
68219: LD_INT 15
68221: PUSH
68222: LD_INT 16
68224: PUSH
68225: LD_INT 17
68227: PUSH
68228: LD_INT 18
68230: PUSH
68231: LD_INT 19
68233: PUSH
68234: LD_INT 20
68236: PUSH
68237: LD_INT 21
68239: PUSH
68240: LD_INT 22
68242: PUSH
68243: LD_INT 23
68245: PUSH
68246: LD_INT 24
68248: PUSH
68249: LD_INT 25
68251: PUSH
68252: LD_INT 26
68254: PUSH
68255: LD_INT 27
68257: PUSH
68258: LD_INT 28
68260: PUSH
68261: LD_INT 29
68263: PUSH
68264: LD_INT 30
68266: PUSH
68267: LD_INT 31
68269: PUSH
68270: LD_INT 32
68272: PUSH
68273: LD_INT 33
68275: PUSH
68276: LD_INT 34
68278: PUSH
68279: LD_INT 35
68281: PUSH
68282: LD_INT 36
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 101
68325: PUSH
68326: LD_INT 102
68328: PUSH
68329: LD_INT 103
68331: PUSH
68332: LD_INT 104
68334: PUSH
68335: LD_INT 105
68337: PUSH
68338: LD_INT 106
68340: PUSH
68341: LD_INT 107
68343: PUSH
68344: LD_INT 108
68346: PUSH
68347: LD_INT 109
68349: PUSH
68350: LD_INT 110
68352: PUSH
68353: LD_INT 111
68355: PUSH
68356: LD_INT 112
68358: PUSH
68359: LD_INT 113
68361: PUSH
68362: LD_INT 114
68364: PUSH
68365: LD_INT 115
68367: PUSH
68368: LD_INT 116
68370: PUSH
68371: LD_INT 117
68373: PUSH
68374: LD_INT 118
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: PUSH
68397: EMPTY
68398: LIST
68399: LIST
68400: ST_TO_ADDR
// if result then
68401: LD_VAR 0 2
68405: IFFALSE 69191
// begin normal :=  ;
68407: LD_ADDR_VAR 0 5
68411: PUSH
68412: LD_STRING 
68414: ST_TO_ADDR
// hardcore :=  ;
68415: LD_ADDR_VAR 0 6
68419: PUSH
68420: LD_STRING 
68422: ST_TO_ADDR
// active :=  ;
68423: LD_ADDR_VAR 0 7
68427: PUSH
68428: LD_STRING 
68430: ST_TO_ADDR
// for i = 1 to normalCounter do
68431: LD_ADDR_VAR 0 8
68435: PUSH
68436: DOUBLE
68437: LD_INT 1
68439: DEC
68440: ST_TO_ADDR
68441: LD_EXP 47
68445: PUSH
68446: FOR_TO
68447: IFFALSE 68548
// begin tmp := 0 ;
68449: LD_ADDR_VAR 0 3
68453: PUSH
68454: LD_STRING 0
68456: ST_TO_ADDR
// if result [ 1 ] then
68457: LD_VAR 0 2
68461: PUSH
68462: LD_INT 1
68464: ARRAY
68465: IFFALSE 68530
// if result [ 1 ] [ 1 ] = i then
68467: LD_VAR 0 2
68471: PUSH
68472: LD_INT 1
68474: ARRAY
68475: PUSH
68476: LD_INT 1
68478: ARRAY
68479: PUSH
68480: LD_VAR 0 8
68484: EQUAL
68485: IFFALSE 68530
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
68487: LD_ADDR_VAR 0 2
68491: PUSH
68492: LD_VAR 0 2
68496: PPUSH
68497: LD_INT 1
68499: PPUSH
68500: LD_VAR 0 2
68504: PUSH
68505: LD_INT 1
68507: ARRAY
68508: PPUSH
68509: LD_INT 1
68511: PPUSH
68512: CALL_OW 3
68516: PPUSH
68517: CALL_OW 1
68521: ST_TO_ADDR
// tmp := 1 ;
68522: LD_ADDR_VAR 0 3
68526: PUSH
68527: LD_STRING 1
68529: ST_TO_ADDR
// end ; normal := normal & tmp ;
68530: LD_ADDR_VAR 0 5
68534: PUSH
68535: LD_VAR 0 5
68539: PUSH
68540: LD_VAR 0 3
68544: STR
68545: ST_TO_ADDR
// end ;
68546: GO 68446
68548: POP
68549: POP
// for i = 1 to hardcoreCounter do
68550: LD_ADDR_VAR 0 8
68554: PUSH
68555: DOUBLE
68556: LD_INT 1
68558: DEC
68559: ST_TO_ADDR
68560: LD_EXP 48
68564: PUSH
68565: FOR_TO
68566: IFFALSE 68671
// begin tmp := 0 ;
68568: LD_ADDR_VAR 0 3
68572: PUSH
68573: LD_STRING 0
68575: ST_TO_ADDR
// if result [ 2 ] then
68576: LD_VAR 0 2
68580: PUSH
68581: LD_INT 2
68583: ARRAY
68584: IFFALSE 68653
// if result [ 2 ] [ 1 ] = 100 + i then
68586: LD_VAR 0 2
68590: PUSH
68591: LD_INT 2
68593: ARRAY
68594: PUSH
68595: LD_INT 1
68597: ARRAY
68598: PUSH
68599: LD_INT 100
68601: PUSH
68602: LD_VAR 0 8
68606: PLUS
68607: EQUAL
68608: IFFALSE 68653
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
68610: LD_ADDR_VAR 0 2
68614: PUSH
68615: LD_VAR 0 2
68619: PPUSH
68620: LD_INT 2
68622: PPUSH
68623: LD_VAR 0 2
68627: PUSH
68628: LD_INT 2
68630: ARRAY
68631: PPUSH
68632: LD_INT 1
68634: PPUSH
68635: CALL_OW 3
68639: PPUSH
68640: CALL_OW 1
68644: ST_TO_ADDR
// tmp := 1 ;
68645: LD_ADDR_VAR 0 3
68649: PUSH
68650: LD_STRING 1
68652: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
68653: LD_ADDR_VAR 0 6
68657: PUSH
68658: LD_VAR 0 6
68662: PUSH
68663: LD_VAR 0 3
68667: STR
68668: ST_TO_ADDR
// end ;
68669: GO 68565
68671: POP
68672: POP
// if isGameLoad then
68673: LD_VAR 0 1
68677: IFFALSE 69152
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
68679: LD_ADDR_VAR 0 4
68683: PUSH
68684: LD_EXP 51
68688: PUSH
68689: LD_EXP 50
68693: PUSH
68694: LD_EXP 52
68698: PUSH
68699: LD_EXP 49
68703: PUSH
68704: LD_EXP 53
68708: PUSH
68709: LD_EXP 54
68713: PUSH
68714: LD_EXP 55
68718: PUSH
68719: LD_EXP 56
68723: PUSH
68724: LD_EXP 57
68728: PUSH
68729: LD_EXP 58
68733: PUSH
68734: LD_EXP 59
68738: PUSH
68739: LD_EXP 60
68743: PUSH
68744: LD_EXP 61
68748: PUSH
68749: LD_EXP 62
68753: PUSH
68754: LD_EXP 70
68758: PUSH
68759: LD_EXP 71
68763: PUSH
68764: LD_EXP 72
68768: PUSH
68769: LD_EXP 73
68773: PUSH
68774: LD_EXP 75
68778: PUSH
68779: LD_EXP 76
68783: PUSH
68784: LD_EXP 77
68788: PUSH
68789: LD_EXP 80
68793: PUSH
68794: LD_EXP 82
68798: PUSH
68799: LD_EXP 83
68803: PUSH
68804: LD_EXP 84
68808: PUSH
68809: LD_EXP 86
68813: PUSH
68814: LD_EXP 87
68818: PUSH
68819: LD_EXP 90
68823: PUSH
68824: LD_EXP 91
68828: PUSH
68829: LD_EXP 92
68833: PUSH
68834: LD_EXP 93
68838: PUSH
68839: LD_EXP 94
68843: PUSH
68844: LD_EXP 95
68848: PUSH
68849: LD_EXP 96
68853: PUSH
68854: LD_EXP 97
68858: PUSH
68859: LD_EXP 98
68863: PUSH
68864: LD_EXP 63
68868: PUSH
68869: LD_EXP 64
68873: PUSH
68874: LD_EXP 67
68878: PUSH
68879: LD_EXP 68
68883: PUSH
68884: LD_EXP 69
68888: PUSH
68889: LD_EXP 65
68893: PUSH
68894: LD_EXP 66
68898: PUSH
68899: LD_EXP 74
68903: PUSH
68904: LD_EXP 78
68908: PUSH
68909: LD_EXP 79
68913: PUSH
68914: LD_EXP 81
68918: PUSH
68919: LD_EXP 85
68923: PUSH
68924: LD_EXP 88
68928: PUSH
68929: LD_EXP 89
68933: PUSH
68934: LD_EXP 99
68938: PUSH
68939: LD_EXP 100
68943: PUSH
68944: LD_EXP 101
68948: PUSH
68949: LD_EXP 102
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: ST_TO_ADDR
// tmp :=  ;
69010: LD_ADDR_VAR 0 3
69014: PUSH
69015: LD_STRING 
69017: ST_TO_ADDR
// for i = 1 to normalCounter do
69018: LD_ADDR_VAR 0 8
69022: PUSH
69023: DOUBLE
69024: LD_INT 1
69026: DEC
69027: ST_TO_ADDR
69028: LD_EXP 47
69032: PUSH
69033: FOR_TO
69034: IFFALSE 69070
// begin if flags [ i ] then
69036: LD_VAR 0 4
69040: PUSH
69041: LD_VAR 0 8
69045: ARRAY
69046: IFFALSE 69068
// tmp := tmp & i & ; ;
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: LD_VAR 0 3
69057: PUSH
69058: LD_VAR 0 8
69062: STR
69063: PUSH
69064: LD_STRING ;
69066: STR
69067: ST_TO_ADDR
// end ;
69068: GO 69033
69070: POP
69071: POP
// for i = 1 to hardcoreCounter do
69072: LD_ADDR_VAR 0 8
69076: PUSH
69077: DOUBLE
69078: LD_INT 1
69080: DEC
69081: ST_TO_ADDR
69082: LD_EXP 48
69086: PUSH
69087: FOR_TO
69088: IFFALSE 69134
// begin if flags [ normalCounter + i ] then
69090: LD_VAR 0 4
69094: PUSH
69095: LD_EXP 47
69099: PUSH
69100: LD_VAR 0 8
69104: PLUS
69105: ARRAY
69106: IFFALSE 69132
// tmp := tmp & ( 100 + i ) & ; ;
69108: LD_ADDR_VAR 0 3
69112: PUSH
69113: LD_VAR 0 3
69117: PUSH
69118: LD_INT 100
69120: PUSH
69121: LD_VAR 0 8
69125: PLUS
69126: STR
69127: PUSH
69128: LD_STRING ;
69130: STR
69131: ST_TO_ADDR
// end ;
69132: GO 69087
69134: POP
69135: POP
// if tmp then
69136: LD_VAR 0 3
69140: IFFALSE 69152
// active := tmp ;
69142: LD_ADDR_VAR 0 7
69146: PUSH
69147: LD_VAR 0 3
69151: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
69152: LD_STRING getStreamItemsFromMission("
69154: PUSH
69155: LD_VAR 0 5
69159: STR
69160: PUSH
69161: LD_STRING ","
69163: STR
69164: PUSH
69165: LD_VAR 0 6
69169: STR
69170: PUSH
69171: LD_STRING ","
69173: STR
69174: PUSH
69175: LD_VAR 0 7
69179: STR
69180: PUSH
69181: LD_STRING ")
69183: STR
69184: PPUSH
69185: CALL_OW 559
// end else
69189: GO 69198
// ToLua ( getStreamItemsFromMission("","","") ) ;
69191: LD_STRING getStreamItemsFromMission("","","")
69193: PPUSH
69194: CALL_OW 559
// end ;
69198: LD_VAR 0 2
69202: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69203: LD_EXP 46
69207: PUSH
69208: LD_EXP 51
69212: AND
69213: IFFALSE 69337
69215: GO 69217
69217: DISABLE
69218: LD_INT 0
69220: PPUSH
69221: PPUSH
// begin enable ;
69222: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69223: LD_ADDR_VAR 0 2
69227: PUSH
69228: LD_INT 22
69230: PUSH
69231: LD_OWVAR 2
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: PUSH
69240: LD_INT 2
69242: PUSH
69243: LD_INT 34
69245: PUSH
69246: LD_INT 7
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 34
69255: PUSH
69256: LD_INT 45
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 34
69265: PUSH
69266: LD_INT 28
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 34
69275: PUSH
69276: LD_INT 47
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PPUSH
69294: CALL_OW 69
69298: ST_TO_ADDR
// if not tmp then
69299: LD_VAR 0 2
69303: NOT
69304: IFFALSE 69308
// exit ;
69306: GO 69337
// for i in tmp do
69308: LD_ADDR_VAR 0 1
69312: PUSH
69313: LD_VAR 0 2
69317: PUSH
69318: FOR_IN
69319: IFFALSE 69335
// begin SetLives ( i , 0 ) ;
69321: LD_VAR 0 1
69325: PPUSH
69326: LD_INT 0
69328: PPUSH
69329: CALL_OW 234
// end ;
69333: GO 69318
69335: POP
69336: POP
// end ;
69337: PPOPN 2
69339: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
69340: LD_EXP 46
69344: PUSH
69345: LD_EXP 52
69349: AND
69350: IFFALSE 69434
69352: GO 69354
69354: DISABLE
69355: LD_INT 0
69357: PPUSH
69358: PPUSH
// begin enable ;
69359: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
69360: LD_ADDR_VAR 0 2
69364: PUSH
69365: LD_INT 22
69367: PUSH
69368: LD_OWVAR 2
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 32
69379: PUSH
69380: LD_INT 3
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PPUSH
69391: CALL_OW 69
69395: ST_TO_ADDR
// if not tmp then
69396: LD_VAR 0 2
69400: NOT
69401: IFFALSE 69405
// exit ;
69403: GO 69434
// for i in tmp do
69405: LD_ADDR_VAR 0 1
69409: PUSH
69410: LD_VAR 0 2
69414: PUSH
69415: FOR_IN
69416: IFFALSE 69432
// begin SetLives ( i , 0 ) ;
69418: LD_VAR 0 1
69422: PPUSH
69423: LD_INT 0
69425: PPUSH
69426: CALL_OW 234
// end ;
69430: GO 69415
69432: POP
69433: POP
// end ;
69434: PPOPN 2
69436: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
69437: LD_EXP 46
69441: PUSH
69442: LD_EXP 49
69446: AND
69447: IFFALSE 69540
69449: GO 69451
69451: DISABLE
69452: LD_INT 0
69454: PPUSH
// begin enable ;
69455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
69456: LD_ADDR_VAR 0 1
69460: PUSH
69461: LD_INT 22
69463: PUSH
69464: LD_OWVAR 2
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 2
69475: PUSH
69476: LD_INT 25
69478: PUSH
69479: LD_INT 5
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 25
69488: PUSH
69489: LD_INT 9
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 25
69498: PUSH
69499: LD_INT 8
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PPUSH
69516: CALL_OW 69
69520: PUSH
69521: FOR_IN
69522: IFFALSE 69538
// begin SetClass ( i , 1 ) ;
69524: LD_VAR 0 1
69528: PPUSH
69529: LD_INT 1
69531: PPUSH
69532: CALL_OW 336
// end ;
69536: GO 69521
69538: POP
69539: POP
// end ;
69540: PPOPN 1
69542: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
69543: LD_EXP 46
69547: PUSH
69548: LD_EXP 50
69552: AND
69553: PUSH
69554: LD_OWVAR 65
69558: PUSH
69559: LD_INT 7
69561: LESS
69562: AND
69563: IFFALSE 69577
69565: GO 69567
69567: DISABLE
// begin enable ;
69568: ENABLE
// game_speed := 7 ;
69569: LD_ADDR_OWVAR 65
69573: PUSH
69574: LD_INT 7
69576: ST_TO_ADDR
// end ;
69577: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
69578: LD_EXP 46
69582: PUSH
69583: LD_EXP 53
69587: AND
69588: IFFALSE 69790
69590: GO 69592
69592: DISABLE
69593: LD_INT 0
69595: PPUSH
69596: PPUSH
69597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69598: LD_ADDR_VAR 0 3
69602: PUSH
69603: LD_INT 81
69605: PUSH
69606: LD_OWVAR 2
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 21
69617: PUSH
69618: LD_INT 1
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PPUSH
69629: CALL_OW 69
69633: ST_TO_ADDR
// if not tmp then
69634: LD_VAR 0 3
69638: NOT
69639: IFFALSE 69643
// exit ;
69641: GO 69790
// if tmp > 5 then
69643: LD_VAR 0 3
69647: PUSH
69648: LD_INT 5
69650: GREATER
69651: IFFALSE 69663
// k := 5 else
69653: LD_ADDR_VAR 0 2
69657: PUSH
69658: LD_INT 5
69660: ST_TO_ADDR
69661: GO 69673
// k := tmp ;
69663: LD_ADDR_VAR 0 2
69667: PUSH
69668: LD_VAR 0 3
69672: ST_TO_ADDR
// for i := 1 to k do
69673: LD_ADDR_VAR 0 1
69677: PUSH
69678: DOUBLE
69679: LD_INT 1
69681: DEC
69682: ST_TO_ADDR
69683: LD_VAR 0 2
69687: PUSH
69688: FOR_TO
69689: IFFALSE 69788
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
69691: LD_VAR 0 3
69695: PUSH
69696: LD_VAR 0 1
69700: ARRAY
69701: PPUSH
69702: LD_VAR 0 1
69706: PUSH
69707: LD_INT 4
69709: MOD
69710: PUSH
69711: LD_INT 1
69713: PLUS
69714: PPUSH
69715: CALL_OW 259
69719: PUSH
69720: LD_INT 10
69722: LESS
69723: IFFALSE 69786
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
69725: LD_VAR 0 3
69729: PUSH
69730: LD_VAR 0 1
69734: ARRAY
69735: PPUSH
69736: LD_VAR 0 1
69740: PUSH
69741: LD_INT 4
69743: MOD
69744: PUSH
69745: LD_INT 1
69747: PLUS
69748: PPUSH
69749: LD_VAR 0 3
69753: PUSH
69754: LD_VAR 0 1
69758: ARRAY
69759: PPUSH
69760: LD_VAR 0 1
69764: PUSH
69765: LD_INT 4
69767: MOD
69768: PUSH
69769: LD_INT 1
69771: PLUS
69772: PPUSH
69773: CALL_OW 259
69777: PUSH
69778: LD_INT 1
69780: PLUS
69781: PPUSH
69782: CALL_OW 237
69786: GO 69688
69788: POP
69789: POP
// end ;
69790: PPOPN 3
69792: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
69793: LD_EXP 46
69797: PUSH
69798: LD_EXP 54
69802: AND
69803: IFFALSE 69823
69805: GO 69807
69807: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
69808: LD_INT 4
69810: PPUSH
69811: LD_OWVAR 2
69815: PPUSH
69816: LD_INT 0
69818: PPUSH
69819: CALL_OW 324
69823: END
// every 0 0$1 trigger StreamModeActive and sShovel do
69824: LD_EXP 46
69828: PUSH
69829: LD_EXP 83
69833: AND
69834: IFFALSE 69854
69836: GO 69838
69838: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69839: LD_INT 19
69841: PPUSH
69842: LD_OWVAR 2
69846: PPUSH
69847: LD_INT 0
69849: PPUSH
69850: CALL_OW 324
69854: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69855: LD_EXP 46
69859: PUSH
69860: LD_EXP 55
69864: AND
69865: IFFALSE 69967
69867: GO 69869
69869: DISABLE
69870: LD_INT 0
69872: PPUSH
69873: PPUSH
// begin enable ;
69874: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69875: LD_ADDR_VAR 0 2
69879: PUSH
69880: LD_INT 22
69882: PUSH
69883: LD_OWVAR 2
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 2
69894: PUSH
69895: LD_INT 34
69897: PUSH
69898: LD_INT 11
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 34
69907: PUSH
69908: LD_INT 30
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: LIST
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PPUSH
69924: CALL_OW 69
69928: ST_TO_ADDR
// if not tmp then
69929: LD_VAR 0 2
69933: NOT
69934: IFFALSE 69938
// exit ;
69936: GO 69967
// for i in tmp do
69938: LD_ADDR_VAR 0 1
69942: PUSH
69943: LD_VAR 0 2
69947: PUSH
69948: FOR_IN
69949: IFFALSE 69965
// begin SetLives ( i , 0 ) ;
69951: LD_VAR 0 1
69955: PPUSH
69956: LD_INT 0
69958: PPUSH
69959: CALL_OW 234
// end ;
69963: GO 69948
69965: POP
69966: POP
// end ;
69967: PPOPN 2
69969: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69970: LD_EXP 46
69974: PUSH
69975: LD_EXP 56
69979: AND
69980: IFFALSE 70000
69982: GO 69984
69984: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69985: LD_INT 32
69987: PPUSH
69988: LD_OWVAR 2
69992: PPUSH
69993: LD_INT 0
69995: PPUSH
69996: CALL_OW 324
70000: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70001: LD_EXP 46
70005: PUSH
70006: LD_EXP 57
70010: AND
70011: IFFALSE 70192
70013: GO 70015
70015: DISABLE
70016: LD_INT 0
70018: PPUSH
70019: PPUSH
70020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70021: LD_ADDR_VAR 0 2
70025: PUSH
70026: LD_INT 22
70028: PUSH
70029: LD_OWVAR 2
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 33
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PPUSH
70052: CALL_OW 69
70056: ST_TO_ADDR
// if not tmp then
70057: LD_VAR 0 2
70061: NOT
70062: IFFALSE 70066
// exit ;
70064: GO 70192
// side := 0 ;
70066: LD_ADDR_VAR 0 3
70070: PUSH
70071: LD_INT 0
70073: ST_TO_ADDR
// for i := 1 to 8 do
70074: LD_ADDR_VAR 0 1
70078: PUSH
70079: DOUBLE
70080: LD_INT 1
70082: DEC
70083: ST_TO_ADDR
70084: LD_INT 8
70086: PUSH
70087: FOR_TO
70088: IFFALSE 70136
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70090: LD_OWVAR 2
70094: PUSH
70095: LD_VAR 0 1
70099: NONEQUAL
70100: PUSH
70101: LD_OWVAR 2
70105: PPUSH
70106: LD_VAR 0 1
70110: PPUSH
70111: CALL_OW 81
70115: PUSH
70116: LD_INT 2
70118: EQUAL
70119: AND
70120: IFFALSE 70134
// begin side := i ;
70122: LD_ADDR_VAR 0 3
70126: PUSH
70127: LD_VAR 0 1
70131: ST_TO_ADDR
// break ;
70132: GO 70136
// end ;
70134: GO 70087
70136: POP
70137: POP
// if not side then
70138: LD_VAR 0 3
70142: NOT
70143: IFFALSE 70147
// exit ;
70145: GO 70192
// for i := 1 to tmp do
70147: LD_ADDR_VAR 0 1
70151: PUSH
70152: DOUBLE
70153: LD_INT 1
70155: DEC
70156: ST_TO_ADDR
70157: LD_VAR 0 2
70161: PUSH
70162: FOR_TO
70163: IFFALSE 70190
// if Prob ( 60 ) then
70165: LD_INT 60
70167: PPUSH
70168: CALL_OW 13
70172: IFFALSE 70188
// SetSide ( i , side ) ;
70174: LD_VAR 0 1
70178: PPUSH
70179: LD_VAR 0 3
70183: PPUSH
70184: CALL_OW 235
70188: GO 70162
70190: POP
70191: POP
// end ;
70192: PPOPN 3
70194: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70195: LD_EXP 46
70199: PUSH
70200: LD_EXP 59
70204: AND
70205: IFFALSE 70324
70207: GO 70209
70209: DISABLE
70210: LD_INT 0
70212: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70213: LD_ADDR_VAR 0 1
70217: PUSH
70218: LD_INT 22
70220: PUSH
70221: LD_OWVAR 2
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 21
70232: PUSH
70233: LD_INT 1
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 3
70242: PUSH
70243: LD_INT 23
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: LIST
70261: PPUSH
70262: CALL_OW 69
70266: PUSH
70267: FOR_IN
70268: IFFALSE 70322
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70270: LD_VAR 0 1
70274: PPUSH
70275: CALL_OW 257
70279: PUSH
70280: LD_INT 1
70282: PUSH
70283: LD_INT 2
70285: PUSH
70286: LD_INT 3
70288: PUSH
70289: LD_INT 4
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: IN
70298: IFFALSE 70320
// SetClass ( un , rand ( 1 , 4 ) ) ;
70300: LD_VAR 0 1
70304: PPUSH
70305: LD_INT 1
70307: PPUSH
70308: LD_INT 4
70310: PPUSH
70311: CALL_OW 12
70315: PPUSH
70316: CALL_OW 336
70320: GO 70267
70322: POP
70323: POP
// end ;
70324: PPOPN 1
70326: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
70327: LD_EXP 46
70331: PUSH
70332: LD_EXP 58
70336: AND
70337: IFFALSE 70416
70339: GO 70341
70341: DISABLE
70342: LD_INT 0
70344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70345: LD_ADDR_VAR 0 1
70349: PUSH
70350: LD_INT 22
70352: PUSH
70353: LD_OWVAR 2
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 21
70364: PUSH
70365: LD_INT 3
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PPUSH
70376: CALL_OW 69
70380: ST_TO_ADDR
// if not tmp then
70381: LD_VAR 0 1
70385: NOT
70386: IFFALSE 70390
// exit ;
70388: GO 70416
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
70390: LD_VAR 0 1
70394: PUSH
70395: LD_INT 1
70397: PPUSH
70398: LD_VAR 0 1
70402: PPUSH
70403: CALL_OW 12
70407: ARRAY
70408: PPUSH
70409: LD_INT 100
70411: PPUSH
70412: CALL_OW 234
// end ;
70416: PPOPN 1
70418: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
70419: LD_EXP 46
70423: PUSH
70424: LD_EXP 60
70428: AND
70429: IFFALSE 70527
70431: GO 70433
70433: DISABLE
70434: LD_INT 0
70436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70437: LD_ADDR_VAR 0 1
70441: PUSH
70442: LD_INT 22
70444: PUSH
70445: LD_OWVAR 2
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 21
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PPUSH
70468: CALL_OW 69
70472: ST_TO_ADDR
// if not tmp then
70473: LD_VAR 0 1
70477: NOT
70478: IFFALSE 70482
// exit ;
70480: GO 70527
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
70482: LD_VAR 0 1
70486: PUSH
70487: LD_INT 1
70489: PPUSH
70490: LD_VAR 0 1
70494: PPUSH
70495: CALL_OW 12
70499: ARRAY
70500: PPUSH
70501: LD_INT 1
70503: PPUSH
70504: LD_INT 4
70506: PPUSH
70507: CALL_OW 12
70511: PPUSH
70512: LD_INT 3000
70514: PPUSH
70515: LD_INT 9000
70517: PPUSH
70518: CALL_OW 12
70522: PPUSH
70523: CALL_OW 492
// end ;
70527: PPOPN 1
70529: END
// every 0 0$1 trigger StreamModeActive and sDepot do
70530: LD_EXP 46
70534: PUSH
70535: LD_EXP 61
70539: AND
70540: IFFALSE 70560
70542: GO 70544
70544: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
70545: LD_INT 1
70547: PPUSH
70548: LD_OWVAR 2
70552: PPUSH
70553: LD_INT 0
70555: PPUSH
70556: CALL_OW 324
70560: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
70561: LD_EXP 46
70565: PUSH
70566: LD_EXP 62
70570: AND
70571: IFFALSE 70654
70573: GO 70575
70575: DISABLE
70576: LD_INT 0
70578: PPUSH
70579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
70580: LD_ADDR_VAR 0 2
70584: PUSH
70585: LD_INT 22
70587: PUSH
70588: LD_OWVAR 2
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 21
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PPUSH
70611: CALL_OW 69
70615: ST_TO_ADDR
// if not tmp then
70616: LD_VAR 0 2
70620: NOT
70621: IFFALSE 70625
// exit ;
70623: GO 70654
// for i in tmp do
70625: LD_ADDR_VAR 0 1
70629: PUSH
70630: LD_VAR 0 2
70634: PUSH
70635: FOR_IN
70636: IFFALSE 70652
// SetBLevel ( i , 10 ) ;
70638: LD_VAR 0 1
70642: PPUSH
70643: LD_INT 10
70645: PPUSH
70646: CALL_OW 241
70650: GO 70635
70652: POP
70653: POP
// end ;
70654: PPOPN 2
70656: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
70657: LD_EXP 46
70661: PUSH
70662: LD_EXP 63
70666: AND
70667: IFFALSE 70778
70669: GO 70671
70671: DISABLE
70672: LD_INT 0
70674: PPUSH
70675: PPUSH
70676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70677: LD_ADDR_VAR 0 3
70681: PUSH
70682: LD_INT 22
70684: PUSH
70685: LD_OWVAR 2
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 25
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PPUSH
70708: CALL_OW 69
70712: ST_TO_ADDR
// if not tmp then
70713: LD_VAR 0 3
70717: NOT
70718: IFFALSE 70722
// exit ;
70720: GO 70778
// un := tmp [ rand ( 1 , tmp ) ] ;
70722: LD_ADDR_VAR 0 2
70726: PUSH
70727: LD_VAR 0 3
70731: PUSH
70732: LD_INT 1
70734: PPUSH
70735: LD_VAR 0 3
70739: PPUSH
70740: CALL_OW 12
70744: ARRAY
70745: ST_TO_ADDR
// if Crawls ( un ) then
70746: LD_VAR 0 2
70750: PPUSH
70751: CALL_OW 318
70755: IFFALSE 70766
// ComWalk ( un ) ;
70757: LD_VAR 0 2
70761: PPUSH
70762: CALL_OW 138
// SetClass ( un , class_sniper ) ;
70766: LD_VAR 0 2
70770: PPUSH
70771: LD_INT 5
70773: PPUSH
70774: CALL_OW 336
// end ;
70778: PPOPN 3
70780: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
70781: LD_EXP 46
70785: PUSH
70786: LD_EXP 64
70790: AND
70791: PUSH
70792: LD_OWVAR 67
70796: PUSH
70797: LD_INT 4
70799: LESS
70800: AND
70801: IFFALSE 70820
70803: GO 70805
70805: DISABLE
// begin Difficulty := Difficulty + 1 ;
70806: LD_ADDR_OWVAR 67
70810: PUSH
70811: LD_OWVAR 67
70815: PUSH
70816: LD_INT 1
70818: PLUS
70819: ST_TO_ADDR
// end ;
70820: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
70821: LD_EXP 46
70825: PUSH
70826: LD_EXP 65
70830: AND
70831: IFFALSE 70934
70833: GO 70835
70835: DISABLE
70836: LD_INT 0
70838: PPUSH
// begin for i := 1 to 5 do
70839: LD_ADDR_VAR 0 1
70843: PUSH
70844: DOUBLE
70845: LD_INT 1
70847: DEC
70848: ST_TO_ADDR
70849: LD_INT 5
70851: PUSH
70852: FOR_TO
70853: IFFALSE 70932
// begin uc_nation := nation_nature ;
70855: LD_ADDR_OWVAR 21
70859: PUSH
70860: LD_INT 0
70862: ST_TO_ADDR
// uc_side := 0 ;
70863: LD_ADDR_OWVAR 20
70867: PUSH
70868: LD_INT 0
70870: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70871: LD_ADDR_OWVAR 29
70875: PUSH
70876: LD_INT 12
70878: PUSH
70879: LD_INT 12
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: ST_TO_ADDR
// hc_agressivity := 20 ;
70886: LD_ADDR_OWVAR 35
70890: PUSH
70891: LD_INT 20
70893: ST_TO_ADDR
// hc_class := class_tiger ;
70894: LD_ADDR_OWVAR 28
70898: PUSH
70899: LD_INT 14
70901: ST_TO_ADDR
// hc_gallery :=  ;
70902: LD_ADDR_OWVAR 33
70906: PUSH
70907: LD_STRING 
70909: ST_TO_ADDR
// hc_name :=  ;
70910: LD_ADDR_OWVAR 26
70914: PUSH
70915: LD_STRING 
70917: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70918: CALL_OW 44
70922: PPUSH
70923: LD_INT 0
70925: PPUSH
70926: CALL_OW 51
// end ;
70930: GO 70852
70932: POP
70933: POP
// end ;
70934: PPOPN 1
70936: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70937: LD_EXP 46
70941: PUSH
70942: LD_EXP 66
70946: AND
70947: IFFALSE 70956
70949: GO 70951
70951: DISABLE
// StreamSibBomb ;
70952: CALL 70957 0 0
70956: END
// export function StreamSibBomb ; var i , x , y ; begin
70957: LD_INT 0
70959: PPUSH
70960: PPUSH
70961: PPUSH
70962: PPUSH
// result := false ;
70963: LD_ADDR_VAR 0 1
70967: PUSH
70968: LD_INT 0
70970: ST_TO_ADDR
// for i := 1 to 16 do
70971: LD_ADDR_VAR 0 2
70975: PUSH
70976: DOUBLE
70977: LD_INT 1
70979: DEC
70980: ST_TO_ADDR
70981: LD_INT 16
70983: PUSH
70984: FOR_TO
70985: IFFALSE 71184
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70987: LD_ADDR_VAR 0 3
70991: PUSH
70992: LD_INT 10
70994: PUSH
70995: LD_INT 20
70997: PUSH
70998: LD_INT 30
71000: PUSH
71001: LD_INT 40
71003: PUSH
71004: LD_INT 50
71006: PUSH
71007: LD_INT 60
71009: PUSH
71010: LD_INT 70
71012: PUSH
71013: LD_INT 80
71015: PUSH
71016: LD_INT 90
71018: PUSH
71019: LD_INT 100
71021: PUSH
71022: LD_INT 110
71024: PUSH
71025: LD_INT 120
71027: PUSH
71028: LD_INT 130
71030: PUSH
71031: LD_INT 140
71033: PUSH
71034: LD_INT 150
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 1
71056: PPUSH
71057: LD_INT 15
71059: PPUSH
71060: CALL_OW 12
71064: ARRAY
71065: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71066: LD_ADDR_VAR 0 4
71070: PUSH
71071: LD_INT 10
71073: PUSH
71074: LD_INT 20
71076: PUSH
71077: LD_INT 30
71079: PUSH
71080: LD_INT 40
71082: PUSH
71083: LD_INT 50
71085: PUSH
71086: LD_INT 60
71088: PUSH
71089: LD_INT 70
71091: PUSH
71092: LD_INT 80
71094: PUSH
71095: LD_INT 90
71097: PUSH
71098: LD_INT 100
71100: PUSH
71101: LD_INT 110
71103: PUSH
71104: LD_INT 120
71106: PUSH
71107: LD_INT 130
71109: PUSH
71110: LD_INT 140
71112: PUSH
71113: LD_INT 150
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 1
71135: PPUSH
71136: LD_INT 15
71138: PPUSH
71139: CALL_OW 12
71143: ARRAY
71144: ST_TO_ADDR
// if ValidHex ( x , y ) then
71145: LD_VAR 0 3
71149: PPUSH
71150: LD_VAR 0 4
71154: PPUSH
71155: CALL_OW 488
71159: IFFALSE 71182
// begin result := [ x , y ] ;
71161: LD_ADDR_VAR 0 1
71165: PUSH
71166: LD_VAR 0 3
71170: PUSH
71171: LD_VAR 0 4
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: ST_TO_ADDR
// break ;
71180: GO 71184
// end ; end ;
71182: GO 70984
71184: POP
71185: POP
// if result then
71186: LD_VAR 0 1
71190: IFFALSE 71250
// begin ToLua ( playSibBomb() ) ;
71192: LD_STRING playSibBomb()
71194: PPUSH
71195: CALL_OW 559
// wait ( 0 0$14 ) ;
71199: LD_INT 490
71201: PPUSH
71202: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71206: LD_VAR 0 1
71210: PUSH
71211: LD_INT 1
71213: ARRAY
71214: PPUSH
71215: LD_VAR 0 1
71219: PUSH
71220: LD_INT 2
71222: ARRAY
71223: PPUSH
71224: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71228: LD_VAR 0 1
71232: PUSH
71233: LD_INT 1
71235: ARRAY
71236: PPUSH
71237: LD_VAR 0 1
71241: PUSH
71242: LD_INT 2
71244: ARRAY
71245: PPUSH
71246: CALL_OW 429
// end ; end ;
71250: LD_VAR 0 1
71254: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71255: LD_EXP 46
71259: PUSH
71260: LD_EXP 68
71264: AND
71265: IFFALSE 71277
71267: GO 71269
71269: DISABLE
// YouLost (  ) ;
71270: LD_STRING 
71272: PPUSH
71273: CALL_OW 104
71277: END
// every 0 0$1 trigger StreamModeActive and sFog do
71278: LD_EXP 46
71282: PUSH
71283: LD_EXP 67
71287: AND
71288: IFFALSE 71302
71290: GO 71292
71292: DISABLE
// FogOff ( your_side ) ;
71293: LD_OWVAR 2
71297: PPUSH
71298: CALL_OW 344
71302: END
// every 0 0$1 trigger StreamModeActive and sSun do
71303: LD_EXP 46
71307: PUSH
71308: LD_EXP 69
71312: AND
71313: IFFALSE 71341
71315: GO 71317
71317: DISABLE
// begin solar_recharge_percent := 0 ;
71318: LD_ADDR_OWVAR 79
71322: PUSH
71323: LD_INT 0
71325: ST_TO_ADDR
// wait ( 5 5$00 ) ;
71326: LD_INT 10500
71328: PPUSH
71329: CALL_OW 67
// solar_recharge_percent := 100 ;
71333: LD_ADDR_OWVAR 79
71337: PUSH
71338: LD_INT 100
71340: ST_TO_ADDR
// end ;
71341: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
71342: LD_EXP 46
71346: PUSH
71347: LD_EXP 70
71351: AND
71352: IFFALSE 71591
71354: GO 71356
71356: DISABLE
71357: LD_INT 0
71359: PPUSH
71360: PPUSH
71361: PPUSH
// begin tmp := [ ] ;
71362: LD_ADDR_VAR 0 3
71366: PUSH
71367: EMPTY
71368: ST_TO_ADDR
// for i := 1 to 6 do
71369: LD_ADDR_VAR 0 1
71373: PUSH
71374: DOUBLE
71375: LD_INT 1
71377: DEC
71378: ST_TO_ADDR
71379: LD_INT 6
71381: PUSH
71382: FOR_TO
71383: IFFALSE 71488
// begin uc_nation := nation_nature ;
71385: LD_ADDR_OWVAR 21
71389: PUSH
71390: LD_INT 0
71392: ST_TO_ADDR
// uc_side := 0 ;
71393: LD_ADDR_OWVAR 20
71397: PUSH
71398: LD_INT 0
71400: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71401: LD_ADDR_OWVAR 29
71405: PUSH
71406: LD_INT 12
71408: PUSH
71409: LD_INT 12
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: ST_TO_ADDR
// hc_agressivity := 20 ;
71416: LD_ADDR_OWVAR 35
71420: PUSH
71421: LD_INT 20
71423: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
71424: LD_ADDR_OWVAR 28
71428: PUSH
71429: LD_INT 17
71431: ST_TO_ADDR
// hc_gallery :=  ;
71432: LD_ADDR_OWVAR 33
71436: PUSH
71437: LD_STRING 
71439: ST_TO_ADDR
// hc_name :=  ;
71440: LD_ADDR_OWVAR 26
71444: PUSH
71445: LD_STRING 
71447: ST_TO_ADDR
// un := CreateHuman ;
71448: LD_ADDR_VAR 0 2
71452: PUSH
71453: CALL_OW 44
71457: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
71458: LD_VAR 0 2
71462: PPUSH
71463: LD_INT 1
71465: PPUSH
71466: CALL_OW 51
// tmp := tmp ^ un ;
71470: LD_ADDR_VAR 0 3
71474: PUSH
71475: LD_VAR 0 3
71479: PUSH
71480: LD_VAR 0 2
71484: ADD
71485: ST_TO_ADDR
// end ;
71486: GO 71382
71488: POP
71489: POP
// repeat wait ( 0 0$1 ) ;
71490: LD_INT 35
71492: PPUSH
71493: CALL_OW 67
// for un in tmp do
71497: LD_ADDR_VAR 0 2
71501: PUSH
71502: LD_VAR 0 3
71506: PUSH
71507: FOR_IN
71508: IFFALSE 71582
// begin if IsDead ( un ) then
71510: LD_VAR 0 2
71514: PPUSH
71515: CALL_OW 301
71519: IFFALSE 71539
// begin tmp := tmp diff un ;
71521: LD_ADDR_VAR 0 3
71525: PUSH
71526: LD_VAR 0 3
71530: PUSH
71531: LD_VAR 0 2
71535: DIFF
71536: ST_TO_ADDR
// continue ;
71537: GO 71507
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
71539: LD_VAR 0 2
71543: PPUSH
71544: LD_INT 3
71546: PUSH
71547: LD_INT 22
71549: PUSH
71550: LD_INT 0
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PPUSH
71561: CALL_OW 69
71565: PPUSH
71566: LD_VAR 0 2
71570: PPUSH
71571: CALL_OW 74
71575: PPUSH
71576: CALL_OW 115
// end ;
71580: GO 71507
71582: POP
71583: POP
// until not tmp ;
71584: LD_VAR 0 3
71588: NOT
71589: IFFALSE 71490
// end ;
71591: PPOPN 3
71593: END
// every 0 0$1 trigger StreamModeActive and sTroll do
71594: LD_EXP 46
71598: PUSH
71599: LD_EXP 71
71603: AND
71604: IFFALSE 71658
71606: GO 71608
71608: DISABLE
// begin ToLua ( displayTroll(); ) ;
71609: LD_STRING displayTroll();
71611: PPUSH
71612: CALL_OW 559
// wait ( 3 3$00 ) ;
71616: LD_INT 6300
71618: PPUSH
71619: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71623: LD_STRING hideTroll();
71625: PPUSH
71626: CALL_OW 559
// wait ( 1 1$00 ) ;
71630: LD_INT 2100
71632: PPUSH
71633: CALL_OW 67
// ToLua ( displayTroll(); ) ;
71637: LD_STRING displayTroll();
71639: PPUSH
71640: CALL_OW 559
// wait ( 1 1$00 ) ;
71644: LD_INT 2100
71646: PPUSH
71647: CALL_OW 67
// ToLua ( hideTroll(); ) ;
71651: LD_STRING hideTroll();
71653: PPUSH
71654: CALL_OW 559
// end ;
71658: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
71659: LD_EXP 46
71663: PUSH
71664: LD_EXP 72
71668: AND
71669: IFFALSE 71732
71671: GO 71673
71673: DISABLE
71674: LD_INT 0
71676: PPUSH
// begin p := 0 ;
71677: LD_ADDR_VAR 0 1
71681: PUSH
71682: LD_INT 0
71684: ST_TO_ADDR
// repeat game_speed := 1 ;
71685: LD_ADDR_OWVAR 65
71689: PUSH
71690: LD_INT 1
71692: ST_TO_ADDR
// wait ( 0 0$1 ) ;
71693: LD_INT 35
71695: PPUSH
71696: CALL_OW 67
// p := p + 1 ;
71700: LD_ADDR_VAR 0 1
71704: PUSH
71705: LD_VAR 0 1
71709: PUSH
71710: LD_INT 1
71712: PLUS
71713: ST_TO_ADDR
// until p >= 60 ;
71714: LD_VAR 0 1
71718: PUSH
71719: LD_INT 60
71721: GREATEREQUAL
71722: IFFALSE 71685
// game_speed := 4 ;
71724: LD_ADDR_OWVAR 65
71728: PUSH
71729: LD_INT 4
71731: ST_TO_ADDR
// end ;
71732: PPOPN 1
71734: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
71735: LD_EXP 46
71739: PUSH
71740: LD_EXP 73
71744: AND
71745: IFFALSE 71891
71747: GO 71749
71749: DISABLE
71750: LD_INT 0
71752: PPUSH
71753: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71754: LD_ADDR_VAR 0 1
71758: PUSH
71759: LD_INT 22
71761: PUSH
71762: LD_OWVAR 2
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 2
71773: PUSH
71774: LD_INT 30
71776: PUSH
71777: LD_INT 0
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PUSH
71784: LD_INT 30
71786: PUSH
71787: LD_INT 1
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: LIST
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PPUSH
71803: CALL_OW 69
71807: ST_TO_ADDR
// if not depot then
71808: LD_VAR 0 1
71812: NOT
71813: IFFALSE 71817
// exit ;
71815: GO 71891
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
71817: LD_ADDR_VAR 0 2
71821: PUSH
71822: LD_VAR 0 1
71826: PUSH
71827: LD_INT 1
71829: PPUSH
71830: LD_VAR 0 1
71834: PPUSH
71835: CALL_OW 12
71839: ARRAY
71840: PPUSH
71841: CALL_OW 274
71845: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71846: LD_VAR 0 2
71850: PPUSH
71851: LD_INT 1
71853: PPUSH
71854: LD_INT 0
71856: PPUSH
71857: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71861: LD_VAR 0 2
71865: PPUSH
71866: LD_INT 2
71868: PPUSH
71869: LD_INT 0
71871: PPUSH
71872: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71876: LD_VAR 0 2
71880: PPUSH
71881: LD_INT 3
71883: PPUSH
71884: LD_INT 0
71886: PPUSH
71887: CALL_OW 277
// end ;
71891: PPOPN 2
71893: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71894: LD_EXP 46
71898: PUSH
71899: LD_EXP 74
71903: AND
71904: IFFALSE 72001
71906: GO 71908
71908: DISABLE
71909: LD_INT 0
71911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71912: LD_ADDR_VAR 0 1
71916: PUSH
71917: LD_INT 22
71919: PUSH
71920: LD_OWVAR 2
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 21
71931: PUSH
71932: LD_INT 1
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 3
71941: PUSH
71942: LD_INT 23
71944: PUSH
71945: LD_INT 0
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: LIST
71960: PPUSH
71961: CALL_OW 69
71965: ST_TO_ADDR
// if not tmp then
71966: LD_VAR 0 1
71970: NOT
71971: IFFALSE 71975
// exit ;
71973: GO 72001
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71975: LD_VAR 0 1
71979: PUSH
71980: LD_INT 1
71982: PPUSH
71983: LD_VAR 0 1
71987: PPUSH
71988: CALL_OW 12
71992: ARRAY
71993: PPUSH
71994: LD_INT 200
71996: PPUSH
71997: CALL_OW 234
// end ;
72001: PPOPN 1
72003: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72004: LD_EXP 46
72008: PUSH
72009: LD_EXP 75
72013: AND
72014: IFFALSE 72093
72016: GO 72018
72018: DISABLE
72019: LD_INT 0
72021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72022: LD_ADDR_VAR 0 1
72026: PUSH
72027: LD_INT 22
72029: PUSH
72030: LD_OWVAR 2
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 21
72041: PUSH
72042: LD_INT 2
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PPUSH
72053: CALL_OW 69
72057: ST_TO_ADDR
// if not tmp then
72058: LD_VAR 0 1
72062: NOT
72063: IFFALSE 72067
// exit ;
72065: GO 72093
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72067: LD_VAR 0 1
72071: PUSH
72072: LD_INT 1
72074: PPUSH
72075: LD_VAR 0 1
72079: PPUSH
72080: CALL_OW 12
72084: ARRAY
72085: PPUSH
72086: LD_INT 60
72088: PPUSH
72089: CALL_OW 234
// end ;
72093: PPOPN 1
72095: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72096: LD_EXP 46
72100: PUSH
72101: LD_EXP 76
72105: AND
72106: IFFALSE 72205
72108: GO 72110
72110: DISABLE
72111: LD_INT 0
72113: PPUSH
72114: PPUSH
// begin enable ;
72115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72116: LD_ADDR_VAR 0 1
72120: PUSH
72121: LD_INT 22
72123: PUSH
72124: LD_OWVAR 2
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 61
72135: PUSH
72136: EMPTY
72137: LIST
72138: PUSH
72139: LD_INT 33
72141: PUSH
72142: LD_INT 2
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: LIST
72153: PPUSH
72154: CALL_OW 69
72158: ST_TO_ADDR
// if not tmp then
72159: LD_VAR 0 1
72163: NOT
72164: IFFALSE 72168
// exit ;
72166: GO 72205
// for i in tmp do
72168: LD_ADDR_VAR 0 2
72172: PUSH
72173: LD_VAR 0 1
72177: PUSH
72178: FOR_IN
72179: IFFALSE 72203
// if IsControledBy ( i ) then
72181: LD_VAR 0 2
72185: PPUSH
72186: CALL_OW 312
72190: IFFALSE 72201
// ComUnlink ( i ) ;
72192: LD_VAR 0 2
72196: PPUSH
72197: CALL_OW 136
72201: GO 72178
72203: POP
72204: POP
// end ;
72205: PPOPN 2
72207: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72208: LD_EXP 46
72212: PUSH
72213: LD_EXP 77
72217: AND
72218: IFFALSE 72358
72220: GO 72222
72222: DISABLE
72223: LD_INT 0
72225: PPUSH
72226: PPUSH
// begin ToLua ( displayPowell(); ) ;
72227: LD_STRING displayPowell();
72229: PPUSH
72230: CALL_OW 559
// uc_side := 0 ;
72234: LD_ADDR_OWVAR 20
72238: PUSH
72239: LD_INT 0
72241: ST_TO_ADDR
// uc_nation := 2 ;
72242: LD_ADDR_OWVAR 21
72246: PUSH
72247: LD_INT 2
72249: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72250: LD_ADDR_OWVAR 37
72254: PUSH
72255: LD_INT 14
72257: ST_TO_ADDR
// vc_engine := engine_siberite ;
72258: LD_ADDR_OWVAR 39
72262: PUSH
72263: LD_INT 3
72265: ST_TO_ADDR
// vc_control := control_apeman ;
72266: LD_ADDR_OWVAR 38
72270: PUSH
72271: LD_INT 5
72273: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72274: LD_ADDR_OWVAR 40
72278: PUSH
72279: LD_INT 29
72281: ST_TO_ADDR
// un := CreateVehicle ;
72282: LD_ADDR_VAR 0 2
72286: PUSH
72287: CALL_OW 45
72291: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72292: LD_VAR 0 2
72296: PPUSH
72297: LD_INT 1
72299: PPUSH
72300: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72304: LD_INT 35
72306: PPUSH
72307: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72311: LD_VAR 0 2
72315: PPUSH
72316: LD_INT 22
72318: PUSH
72319: LD_OWVAR 2
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PPUSH
72328: CALL_OW 69
72332: PPUSH
72333: LD_VAR 0 2
72337: PPUSH
72338: CALL_OW 74
72342: PPUSH
72343: CALL_OW 115
// until IsDead ( un ) ;
72347: LD_VAR 0 2
72351: PPUSH
72352: CALL_OW 301
72356: IFFALSE 72304
// end ;
72358: PPOPN 2
72360: END
// every 0 0$1 trigger StreamModeActive and sStu do
72361: LD_EXP 46
72365: PUSH
72366: LD_EXP 85
72370: AND
72371: IFFALSE 72387
72373: GO 72375
72375: DISABLE
// begin ToLua ( displayStucuk(); ) ;
72376: LD_STRING displayStucuk();
72378: PPUSH
72379: CALL_OW 559
// ResetFog ;
72383: CALL_OW 335
// end ;
72387: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
72388: LD_EXP 46
72392: PUSH
72393: LD_EXP 78
72397: AND
72398: IFFALSE 72539
72400: GO 72402
72402: DISABLE
72403: LD_INT 0
72405: PPUSH
72406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72407: LD_ADDR_VAR 0 2
72411: PUSH
72412: LD_INT 22
72414: PUSH
72415: LD_OWVAR 2
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 21
72426: PUSH
72427: LD_INT 1
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PPUSH
72438: CALL_OW 69
72442: ST_TO_ADDR
// if not tmp then
72443: LD_VAR 0 2
72447: NOT
72448: IFFALSE 72452
// exit ;
72450: GO 72539
// un := tmp [ rand ( 1 , tmp ) ] ;
72452: LD_ADDR_VAR 0 1
72456: PUSH
72457: LD_VAR 0 2
72461: PUSH
72462: LD_INT 1
72464: PPUSH
72465: LD_VAR 0 2
72469: PPUSH
72470: CALL_OW 12
72474: ARRAY
72475: ST_TO_ADDR
// SetSide ( un , 0 ) ;
72476: LD_VAR 0 1
72480: PPUSH
72481: LD_INT 0
72483: PPUSH
72484: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
72488: LD_VAR 0 1
72492: PPUSH
72493: LD_OWVAR 3
72497: PUSH
72498: LD_VAR 0 1
72502: DIFF
72503: PPUSH
72504: LD_VAR 0 1
72508: PPUSH
72509: CALL_OW 74
72513: PPUSH
72514: CALL_OW 115
// wait ( 0 0$20 ) ;
72518: LD_INT 700
72520: PPUSH
72521: CALL_OW 67
// SetSide ( un , your_side ) ;
72525: LD_VAR 0 1
72529: PPUSH
72530: LD_OWVAR 2
72534: PPUSH
72535: CALL_OW 235
// end ;
72539: PPOPN 2
72541: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
72542: LD_EXP 46
72546: PUSH
72547: LD_EXP 79
72551: AND
72552: IFFALSE 72658
72554: GO 72556
72556: DISABLE
72557: LD_INT 0
72559: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72560: LD_ADDR_VAR 0 1
72564: PUSH
72565: LD_INT 22
72567: PUSH
72568: LD_OWVAR 2
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 2
72579: PUSH
72580: LD_INT 30
72582: PUSH
72583: LD_INT 0
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 30
72592: PUSH
72593: LD_INT 1
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: LIST
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PPUSH
72609: CALL_OW 69
72613: ST_TO_ADDR
// if not depot then
72614: LD_VAR 0 1
72618: NOT
72619: IFFALSE 72623
// exit ;
72621: GO 72658
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
72623: LD_VAR 0 1
72627: PUSH
72628: LD_INT 1
72630: ARRAY
72631: PPUSH
72632: CALL_OW 250
72636: PPUSH
72637: LD_VAR 0 1
72641: PUSH
72642: LD_INT 1
72644: ARRAY
72645: PPUSH
72646: CALL_OW 251
72650: PPUSH
72651: LD_INT 70
72653: PPUSH
72654: CALL_OW 495
// end ;
72658: PPOPN 1
72660: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
72661: LD_EXP 46
72665: PUSH
72666: LD_EXP 80
72670: AND
72671: IFFALSE 72882
72673: GO 72675
72675: DISABLE
72676: LD_INT 0
72678: PPUSH
72679: PPUSH
72680: PPUSH
72681: PPUSH
72682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
72683: LD_ADDR_VAR 0 5
72687: PUSH
72688: LD_INT 22
72690: PUSH
72691: LD_OWVAR 2
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 21
72702: PUSH
72703: LD_INT 1
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PPUSH
72714: CALL_OW 69
72718: ST_TO_ADDR
// if not tmp then
72719: LD_VAR 0 5
72723: NOT
72724: IFFALSE 72728
// exit ;
72726: GO 72882
// for i in tmp do
72728: LD_ADDR_VAR 0 1
72732: PUSH
72733: LD_VAR 0 5
72737: PUSH
72738: FOR_IN
72739: IFFALSE 72880
// begin d := rand ( 0 , 5 ) ;
72741: LD_ADDR_VAR 0 4
72745: PUSH
72746: LD_INT 0
72748: PPUSH
72749: LD_INT 5
72751: PPUSH
72752: CALL_OW 12
72756: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
72757: LD_ADDR_VAR 0 2
72761: PUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: CALL_OW 250
72771: PPUSH
72772: LD_VAR 0 4
72776: PPUSH
72777: LD_INT 3
72779: PPUSH
72780: LD_INT 12
72782: PPUSH
72783: CALL_OW 12
72787: PPUSH
72788: CALL_OW 272
72792: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
72793: LD_ADDR_VAR 0 3
72797: PUSH
72798: LD_VAR 0 1
72802: PPUSH
72803: CALL_OW 251
72807: PPUSH
72808: LD_VAR 0 4
72812: PPUSH
72813: LD_INT 3
72815: PPUSH
72816: LD_INT 12
72818: PPUSH
72819: CALL_OW 12
72823: PPUSH
72824: CALL_OW 273
72828: ST_TO_ADDR
// if ValidHex ( x , y ) then
72829: LD_VAR 0 2
72833: PPUSH
72834: LD_VAR 0 3
72838: PPUSH
72839: CALL_OW 488
72843: IFFALSE 72878
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72845: LD_VAR 0 1
72849: PPUSH
72850: LD_VAR 0 2
72854: PPUSH
72855: LD_VAR 0 3
72859: PPUSH
72860: LD_INT 3
72862: PPUSH
72863: LD_INT 6
72865: PPUSH
72866: CALL_OW 12
72870: PPUSH
72871: LD_INT 1
72873: PPUSH
72874: CALL_OW 483
// end ;
72878: GO 72738
72880: POP
72881: POP
// end ;
72882: PPOPN 5
72884: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72885: LD_EXP 46
72889: PUSH
72890: LD_EXP 81
72894: AND
72895: IFFALSE 72989
72897: GO 72899
72899: DISABLE
72900: LD_INT 0
72902: PPUSH
72903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72904: LD_ADDR_VAR 0 2
72908: PUSH
72909: LD_INT 22
72911: PUSH
72912: LD_OWVAR 2
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 32
72923: PUSH
72924: LD_INT 1
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 21
72933: PUSH
72934: LD_INT 2
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: LIST
72945: PPUSH
72946: CALL_OW 69
72950: ST_TO_ADDR
// if not tmp then
72951: LD_VAR 0 2
72955: NOT
72956: IFFALSE 72960
// exit ;
72958: GO 72989
// for i in tmp do
72960: LD_ADDR_VAR 0 1
72964: PUSH
72965: LD_VAR 0 2
72969: PUSH
72970: FOR_IN
72971: IFFALSE 72987
// SetFuel ( i , 0 ) ;
72973: LD_VAR 0 1
72977: PPUSH
72978: LD_INT 0
72980: PPUSH
72981: CALL_OW 240
72985: GO 72970
72987: POP
72988: POP
// end ;
72989: PPOPN 2
72991: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72992: LD_EXP 46
72996: PUSH
72997: LD_EXP 82
73001: AND
73002: IFFALSE 73068
73004: GO 73006
73006: DISABLE
73007: LD_INT 0
73009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73010: LD_ADDR_VAR 0 1
73014: PUSH
73015: LD_INT 22
73017: PUSH
73018: LD_OWVAR 2
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 30
73029: PUSH
73030: LD_INT 29
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PPUSH
73041: CALL_OW 69
73045: ST_TO_ADDR
// if not tmp then
73046: LD_VAR 0 1
73050: NOT
73051: IFFALSE 73055
// exit ;
73053: GO 73068
// DestroyUnit ( tmp [ 1 ] ) ;
73055: LD_VAR 0 1
73059: PUSH
73060: LD_INT 1
73062: ARRAY
73063: PPUSH
73064: CALL_OW 65
// end ;
73068: PPOPN 1
73070: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73071: LD_EXP 46
73075: PUSH
73076: LD_EXP 84
73080: AND
73081: IFFALSE 73210
73083: GO 73085
73085: DISABLE
73086: LD_INT 0
73088: PPUSH
// begin uc_side := 0 ;
73089: LD_ADDR_OWVAR 20
73093: PUSH
73094: LD_INT 0
73096: ST_TO_ADDR
// uc_nation := nation_arabian ;
73097: LD_ADDR_OWVAR 21
73101: PUSH
73102: LD_INT 2
73104: ST_TO_ADDR
// hc_gallery :=  ;
73105: LD_ADDR_OWVAR 33
73109: PUSH
73110: LD_STRING 
73112: ST_TO_ADDR
// hc_name :=  ;
73113: LD_ADDR_OWVAR 26
73117: PUSH
73118: LD_STRING 
73120: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73121: LD_INT 1
73123: PPUSH
73124: LD_INT 11
73126: PPUSH
73127: LD_INT 10
73129: PPUSH
73130: CALL_OW 380
// un := CreateHuman ;
73134: LD_ADDR_VAR 0 1
73138: PUSH
73139: CALL_OW 44
73143: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73144: LD_VAR 0 1
73148: PPUSH
73149: LD_INT 1
73151: PPUSH
73152: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73156: LD_INT 35
73158: PPUSH
73159: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73163: LD_VAR 0 1
73167: PPUSH
73168: LD_INT 22
73170: PUSH
73171: LD_OWVAR 2
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PPUSH
73180: CALL_OW 69
73184: PPUSH
73185: LD_VAR 0 1
73189: PPUSH
73190: CALL_OW 74
73194: PPUSH
73195: CALL_OW 115
// until IsDead ( un ) ;
73199: LD_VAR 0 1
73203: PPUSH
73204: CALL_OW 301
73208: IFFALSE 73156
// end ;
73210: PPOPN 1
73212: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73213: LD_EXP 46
73217: PUSH
73218: LD_EXP 86
73222: AND
73223: IFFALSE 73235
73225: GO 73227
73227: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73228: LD_STRING earthquake(getX(game), 0, 32)
73230: PPUSH
73231: CALL_OW 559
73235: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73236: LD_EXP 46
73240: PUSH
73241: LD_EXP 87
73245: AND
73246: IFFALSE 73337
73248: GO 73250
73250: DISABLE
73251: LD_INT 0
73253: PPUSH
// begin enable ;
73254: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73255: LD_ADDR_VAR 0 1
73259: PUSH
73260: LD_INT 22
73262: PUSH
73263: LD_OWVAR 2
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 21
73274: PUSH
73275: LD_INT 2
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 33
73284: PUSH
73285: LD_INT 3
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: LIST
73296: PPUSH
73297: CALL_OW 69
73301: ST_TO_ADDR
// if not tmp then
73302: LD_VAR 0 1
73306: NOT
73307: IFFALSE 73311
// exit ;
73309: GO 73337
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73311: LD_VAR 0 1
73315: PUSH
73316: LD_INT 1
73318: PPUSH
73319: LD_VAR 0 1
73323: PPUSH
73324: CALL_OW 12
73328: ARRAY
73329: PPUSH
73330: LD_INT 1
73332: PPUSH
73333: CALL_OW 234
// end ;
73337: PPOPN 1
73339: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
73340: LD_EXP 46
73344: PUSH
73345: LD_EXP 88
73349: AND
73350: IFFALSE 73491
73352: GO 73354
73354: DISABLE
73355: LD_INT 0
73357: PPUSH
73358: PPUSH
73359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73360: LD_ADDR_VAR 0 3
73364: PUSH
73365: LD_INT 22
73367: PUSH
73368: LD_OWVAR 2
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PUSH
73377: LD_INT 25
73379: PUSH
73380: LD_INT 1
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PPUSH
73391: CALL_OW 69
73395: ST_TO_ADDR
// if not tmp then
73396: LD_VAR 0 3
73400: NOT
73401: IFFALSE 73405
// exit ;
73403: GO 73491
// un := tmp [ rand ( 1 , tmp ) ] ;
73405: LD_ADDR_VAR 0 2
73409: PUSH
73410: LD_VAR 0 3
73414: PUSH
73415: LD_INT 1
73417: PPUSH
73418: LD_VAR 0 3
73422: PPUSH
73423: CALL_OW 12
73427: ARRAY
73428: ST_TO_ADDR
// if Crawls ( un ) then
73429: LD_VAR 0 2
73433: PPUSH
73434: CALL_OW 318
73438: IFFALSE 73449
// ComWalk ( un ) ;
73440: LD_VAR 0 2
73444: PPUSH
73445: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
73449: LD_VAR 0 2
73453: PPUSH
73454: LD_INT 9
73456: PPUSH
73457: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
73461: LD_INT 28
73463: PPUSH
73464: LD_OWVAR 2
73468: PPUSH
73469: LD_INT 2
73471: PPUSH
73472: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
73476: LD_INT 29
73478: PPUSH
73479: LD_OWVAR 2
73483: PPUSH
73484: LD_INT 2
73486: PPUSH
73487: CALL_OW 322
// end ;
73491: PPOPN 3
73493: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
73494: LD_EXP 46
73498: PUSH
73499: LD_EXP 89
73503: AND
73504: IFFALSE 73615
73506: GO 73508
73508: DISABLE
73509: LD_INT 0
73511: PPUSH
73512: PPUSH
73513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73514: LD_ADDR_VAR 0 3
73518: PUSH
73519: LD_INT 22
73521: PUSH
73522: LD_OWVAR 2
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 25
73533: PUSH
73534: LD_INT 1
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PPUSH
73545: CALL_OW 69
73549: ST_TO_ADDR
// if not tmp then
73550: LD_VAR 0 3
73554: NOT
73555: IFFALSE 73559
// exit ;
73557: GO 73615
// un := tmp [ rand ( 1 , tmp ) ] ;
73559: LD_ADDR_VAR 0 2
73563: PUSH
73564: LD_VAR 0 3
73568: PUSH
73569: LD_INT 1
73571: PPUSH
73572: LD_VAR 0 3
73576: PPUSH
73577: CALL_OW 12
73581: ARRAY
73582: ST_TO_ADDR
// if Crawls ( un ) then
73583: LD_VAR 0 2
73587: PPUSH
73588: CALL_OW 318
73592: IFFALSE 73603
// ComWalk ( un ) ;
73594: LD_VAR 0 2
73598: PPUSH
73599: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73603: LD_VAR 0 2
73607: PPUSH
73608: LD_INT 8
73610: PPUSH
73611: CALL_OW 336
// end ;
73615: PPOPN 3
73617: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
73618: LD_EXP 46
73622: PUSH
73623: LD_EXP 90
73627: AND
73628: IFFALSE 73772
73630: GO 73632
73632: DISABLE
73633: LD_INT 0
73635: PPUSH
73636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
73637: LD_ADDR_VAR 0 2
73641: PUSH
73642: LD_INT 22
73644: PUSH
73645: LD_OWVAR 2
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 21
73656: PUSH
73657: LD_INT 2
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 2
73666: PUSH
73667: LD_INT 34
73669: PUSH
73670: LD_INT 12
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 34
73679: PUSH
73680: LD_INT 51
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 34
73689: PUSH
73690: LD_INT 32
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: LIST
73707: PPUSH
73708: CALL_OW 69
73712: ST_TO_ADDR
// if not tmp then
73713: LD_VAR 0 2
73717: NOT
73718: IFFALSE 73722
// exit ;
73720: GO 73772
// for i in tmp do
73722: LD_ADDR_VAR 0 1
73726: PUSH
73727: LD_VAR 0 2
73731: PUSH
73732: FOR_IN
73733: IFFALSE 73770
// if GetCargo ( i , mat_artifact ) = 0 then
73735: LD_VAR 0 1
73739: PPUSH
73740: LD_INT 4
73742: PPUSH
73743: CALL_OW 289
73747: PUSH
73748: LD_INT 0
73750: EQUAL
73751: IFFALSE 73768
// SetCargo ( i , mat_siberit , 100 ) ;
73753: LD_VAR 0 1
73757: PPUSH
73758: LD_INT 3
73760: PPUSH
73761: LD_INT 100
73763: PPUSH
73764: CALL_OW 290
73768: GO 73732
73770: POP
73771: POP
// end ;
73772: PPOPN 2
73774: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
73775: LD_EXP 46
73779: PUSH
73780: LD_EXP 91
73784: AND
73785: IFFALSE 73968
73787: GO 73789
73789: DISABLE
73790: LD_INT 0
73792: PPUSH
73793: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73794: LD_ADDR_VAR 0 2
73798: PUSH
73799: LD_INT 22
73801: PUSH
73802: LD_OWVAR 2
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PPUSH
73811: CALL_OW 69
73815: ST_TO_ADDR
// if not tmp then
73816: LD_VAR 0 2
73820: NOT
73821: IFFALSE 73825
// exit ;
73823: GO 73968
// for i := 1 to 2 do
73825: LD_ADDR_VAR 0 1
73829: PUSH
73830: DOUBLE
73831: LD_INT 1
73833: DEC
73834: ST_TO_ADDR
73835: LD_INT 2
73837: PUSH
73838: FOR_TO
73839: IFFALSE 73966
// begin uc_side := your_side ;
73841: LD_ADDR_OWVAR 20
73845: PUSH
73846: LD_OWVAR 2
73850: ST_TO_ADDR
// uc_nation := nation_american ;
73851: LD_ADDR_OWVAR 21
73855: PUSH
73856: LD_INT 1
73858: ST_TO_ADDR
// vc_chassis := us_morphling ;
73859: LD_ADDR_OWVAR 37
73863: PUSH
73864: LD_INT 5
73866: ST_TO_ADDR
// vc_engine := engine_siberite ;
73867: LD_ADDR_OWVAR 39
73871: PUSH
73872: LD_INT 3
73874: ST_TO_ADDR
// vc_control := control_computer ;
73875: LD_ADDR_OWVAR 38
73879: PUSH
73880: LD_INT 3
73882: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73883: LD_ADDR_OWVAR 40
73887: PUSH
73888: LD_INT 10
73890: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73891: LD_VAR 0 2
73895: PUSH
73896: LD_INT 1
73898: ARRAY
73899: PPUSH
73900: CALL_OW 310
73904: NOT
73905: IFFALSE 73952
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73907: CALL_OW 45
73911: PPUSH
73912: LD_VAR 0 2
73916: PUSH
73917: LD_INT 1
73919: ARRAY
73920: PPUSH
73921: CALL_OW 250
73925: PPUSH
73926: LD_VAR 0 2
73930: PUSH
73931: LD_INT 1
73933: ARRAY
73934: PPUSH
73935: CALL_OW 251
73939: PPUSH
73940: LD_INT 12
73942: PPUSH
73943: LD_INT 1
73945: PPUSH
73946: CALL_OW 50
73950: GO 73964
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73952: CALL_OW 45
73956: PPUSH
73957: LD_INT 1
73959: PPUSH
73960: CALL_OW 51
// end ;
73964: GO 73838
73966: POP
73967: POP
// end ;
73968: PPOPN 2
73970: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73971: LD_EXP 46
73975: PUSH
73976: LD_EXP 92
73980: AND
73981: IFFALSE 74203
73983: GO 73985
73985: DISABLE
73986: LD_INT 0
73988: PPUSH
73989: PPUSH
73990: PPUSH
73991: PPUSH
73992: PPUSH
73993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73994: LD_ADDR_VAR 0 6
73998: PUSH
73999: LD_INT 22
74001: PUSH
74002: LD_OWVAR 2
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 21
74013: PUSH
74014: LD_INT 1
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 3
74023: PUSH
74024: LD_INT 23
74026: PUSH
74027: LD_INT 0
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: LIST
74042: PPUSH
74043: CALL_OW 69
74047: ST_TO_ADDR
// if not tmp then
74048: LD_VAR 0 6
74052: NOT
74053: IFFALSE 74057
// exit ;
74055: GO 74203
// s1 := rand ( 1 , 4 ) ;
74057: LD_ADDR_VAR 0 2
74061: PUSH
74062: LD_INT 1
74064: PPUSH
74065: LD_INT 4
74067: PPUSH
74068: CALL_OW 12
74072: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74073: LD_ADDR_VAR 0 4
74077: PUSH
74078: LD_VAR 0 6
74082: PUSH
74083: LD_INT 1
74085: ARRAY
74086: PPUSH
74087: LD_VAR 0 2
74091: PPUSH
74092: CALL_OW 259
74096: ST_TO_ADDR
// if s1 = 1 then
74097: LD_VAR 0 2
74101: PUSH
74102: LD_INT 1
74104: EQUAL
74105: IFFALSE 74125
// s2 := rand ( 2 , 4 ) else
74107: LD_ADDR_VAR 0 3
74111: PUSH
74112: LD_INT 2
74114: PPUSH
74115: LD_INT 4
74117: PPUSH
74118: CALL_OW 12
74122: ST_TO_ADDR
74123: GO 74133
// s2 := 1 ;
74125: LD_ADDR_VAR 0 3
74129: PUSH
74130: LD_INT 1
74132: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74133: LD_ADDR_VAR 0 5
74137: PUSH
74138: LD_VAR 0 6
74142: PUSH
74143: LD_INT 1
74145: ARRAY
74146: PPUSH
74147: LD_VAR 0 3
74151: PPUSH
74152: CALL_OW 259
74156: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74157: LD_VAR 0 6
74161: PUSH
74162: LD_INT 1
74164: ARRAY
74165: PPUSH
74166: LD_VAR 0 2
74170: PPUSH
74171: LD_VAR 0 5
74175: PPUSH
74176: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74180: LD_VAR 0 6
74184: PUSH
74185: LD_INT 1
74187: ARRAY
74188: PPUSH
74189: LD_VAR 0 3
74193: PPUSH
74194: LD_VAR 0 4
74198: PPUSH
74199: CALL_OW 237
// end ;
74203: PPOPN 6
74205: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74206: LD_EXP 46
74210: PUSH
74211: LD_EXP 93
74215: AND
74216: IFFALSE 74295
74218: GO 74220
74220: DISABLE
74221: LD_INT 0
74223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74224: LD_ADDR_VAR 0 1
74228: PUSH
74229: LD_INT 22
74231: PUSH
74232: LD_OWVAR 2
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 30
74243: PUSH
74244: LD_INT 3
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: PPUSH
74255: CALL_OW 69
74259: ST_TO_ADDR
// if not tmp then
74260: LD_VAR 0 1
74264: NOT
74265: IFFALSE 74269
// exit ;
74267: GO 74295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74269: LD_VAR 0 1
74273: PUSH
74274: LD_INT 1
74276: PPUSH
74277: LD_VAR 0 1
74281: PPUSH
74282: CALL_OW 12
74286: ARRAY
74287: PPUSH
74288: LD_INT 1
74290: PPUSH
74291: CALL_OW 234
// end ;
74295: PPOPN 1
74297: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74298: LD_EXP 46
74302: PUSH
74303: LD_EXP 94
74307: AND
74308: IFFALSE 74420
74310: GO 74312
74312: DISABLE
74313: LD_INT 0
74315: PPUSH
74316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
74317: LD_ADDR_VAR 0 2
74321: PUSH
74322: LD_INT 22
74324: PUSH
74325: LD_OWVAR 2
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: LD_INT 2
74336: PUSH
74337: LD_INT 30
74339: PUSH
74340: LD_INT 27
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: LD_INT 30
74349: PUSH
74350: LD_INT 26
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: LD_INT 30
74359: PUSH
74360: LD_INT 28
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PPUSH
74377: CALL_OW 69
74381: ST_TO_ADDR
// if not tmp then
74382: LD_VAR 0 2
74386: NOT
74387: IFFALSE 74391
// exit ;
74389: GO 74420
// for i in tmp do
74391: LD_ADDR_VAR 0 1
74395: PUSH
74396: LD_VAR 0 2
74400: PUSH
74401: FOR_IN
74402: IFFALSE 74418
// SetLives ( i , 1 ) ;
74404: LD_VAR 0 1
74408: PPUSH
74409: LD_INT 1
74411: PPUSH
74412: CALL_OW 234
74416: GO 74401
74418: POP
74419: POP
// end ;
74420: PPOPN 2
74422: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
74423: LD_EXP 46
74427: PUSH
74428: LD_EXP 95
74432: AND
74433: IFFALSE 74720
74435: GO 74437
74437: DISABLE
74438: LD_INT 0
74440: PPUSH
74441: PPUSH
74442: PPUSH
// begin i := rand ( 1 , 7 ) ;
74443: LD_ADDR_VAR 0 1
74447: PUSH
74448: LD_INT 1
74450: PPUSH
74451: LD_INT 7
74453: PPUSH
74454: CALL_OW 12
74458: ST_TO_ADDR
// case i of 1 :
74459: LD_VAR 0 1
74463: PUSH
74464: LD_INT 1
74466: DOUBLE
74467: EQUAL
74468: IFTRUE 74472
74470: GO 74482
74472: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
74473: LD_STRING earthquake(getX(game), 0, 32)
74475: PPUSH
74476: CALL_OW 559
74480: GO 74720
74482: LD_INT 2
74484: DOUBLE
74485: EQUAL
74486: IFTRUE 74490
74488: GO 74504
74490: POP
// begin ToLua ( displayStucuk(); ) ;
74491: LD_STRING displayStucuk();
74493: PPUSH
74494: CALL_OW 559
// ResetFog ;
74498: CALL_OW 335
// end ; 3 :
74502: GO 74720
74504: LD_INT 3
74506: DOUBLE
74507: EQUAL
74508: IFTRUE 74512
74510: GO 74616
74512: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74513: LD_ADDR_VAR 0 2
74517: PUSH
74518: LD_INT 22
74520: PUSH
74521: LD_OWVAR 2
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 25
74532: PUSH
74533: LD_INT 1
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: PPUSH
74544: CALL_OW 69
74548: ST_TO_ADDR
// if not tmp then
74549: LD_VAR 0 2
74553: NOT
74554: IFFALSE 74558
// exit ;
74556: GO 74720
// un := tmp [ rand ( 1 , tmp ) ] ;
74558: LD_ADDR_VAR 0 3
74562: PUSH
74563: LD_VAR 0 2
74567: PUSH
74568: LD_INT 1
74570: PPUSH
74571: LD_VAR 0 2
74575: PPUSH
74576: CALL_OW 12
74580: ARRAY
74581: ST_TO_ADDR
// if Crawls ( un ) then
74582: LD_VAR 0 3
74586: PPUSH
74587: CALL_OW 318
74591: IFFALSE 74602
// ComWalk ( un ) ;
74593: LD_VAR 0 3
74597: PPUSH
74598: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74602: LD_VAR 0 3
74606: PPUSH
74607: LD_INT 8
74609: PPUSH
74610: CALL_OW 336
// end ; 4 :
74614: GO 74720
74616: LD_INT 4
74618: DOUBLE
74619: EQUAL
74620: IFTRUE 74624
74622: GO 74698
74624: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74625: LD_ADDR_VAR 0 2
74629: PUSH
74630: LD_INT 22
74632: PUSH
74633: LD_OWVAR 2
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: LD_INT 30
74644: PUSH
74645: LD_INT 29
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: EMPTY
74653: LIST
74654: LIST
74655: PPUSH
74656: CALL_OW 69
74660: ST_TO_ADDR
// if not tmp then
74661: LD_VAR 0 2
74665: NOT
74666: IFFALSE 74670
// exit ;
74668: GO 74720
// CenterNowOnUnits ( tmp [ 1 ] ) ;
74670: LD_VAR 0 2
74674: PUSH
74675: LD_INT 1
74677: ARRAY
74678: PPUSH
74679: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
74683: LD_VAR 0 2
74687: PUSH
74688: LD_INT 1
74690: ARRAY
74691: PPUSH
74692: CALL_OW 65
// end ; 5 .. 7 :
74696: GO 74720
74698: LD_INT 5
74700: DOUBLE
74701: GREATEREQUAL
74702: IFFALSE 74710
74704: LD_INT 7
74706: DOUBLE
74707: LESSEQUAL
74708: IFTRUE 74712
74710: GO 74719
74712: POP
// StreamSibBomb ; end ;
74713: CALL 70957 0 0
74717: GO 74720
74719: POP
// end ;
74720: PPOPN 3
74722: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
74723: LD_EXP 46
74727: PUSH
74728: LD_EXP 96
74732: AND
74733: IFFALSE 74889
74735: GO 74737
74737: DISABLE
74738: LD_INT 0
74740: PPUSH
74741: PPUSH
74742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
74743: LD_ADDR_VAR 0 2
74747: PUSH
74748: LD_INT 81
74750: PUSH
74751: LD_OWVAR 2
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 2
74762: PUSH
74763: LD_INT 21
74765: PUSH
74766: LD_INT 1
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: PUSH
74773: LD_INT 21
74775: PUSH
74776: LD_INT 2
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: LIST
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PPUSH
74792: CALL_OW 69
74796: ST_TO_ADDR
// if not tmp then
74797: LD_VAR 0 2
74801: NOT
74802: IFFALSE 74806
// exit ;
74804: GO 74889
// p := 0 ;
74806: LD_ADDR_VAR 0 3
74810: PUSH
74811: LD_INT 0
74813: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74814: LD_INT 35
74816: PPUSH
74817: CALL_OW 67
// p := p + 1 ;
74821: LD_ADDR_VAR 0 3
74825: PUSH
74826: LD_VAR 0 3
74830: PUSH
74831: LD_INT 1
74833: PLUS
74834: ST_TO_ADDR
// for i in tmp do
74835: LD_ADDR_VAR 0 1
74839: PUSH
74840: LD_VAR 0 2
74844: PUSH
74845: FOR_IN
74846: IFFALSE 74877
// if GetLives ( i ) < 1000 then
74848: LD_VAR 0 1
74852: PPUSH
74853: CALL_OW 256
74857: PUSH
74858: LD_INT 1000
74860: LESS
74861: IFFALSE 74875
// SetLives ( i , 1000 ) ;
74863: LD_VAR 0 1
74867: PPUSH
74868: LD_INT 1000
74870: PPUSH
74871: CALL_OW 234
74875: GO 74845
74877: POP
74878: POP
// until p > 20 ;
74879: LD_VAR 0 3
74883: PUSH
74884: LD_INT 20
74886: GREATER
74887: IFFALSE 74814
// end ;
74889: PPOPN 3
74891: END
// every 0 0$1 trigger StreamModeActive and sTime do
74892: LD_EXP 46
74896: PUSH
74897: LD_EXP 97
74901: AND
74902: IFFALSE 74937
74904: GO 74906
74906: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74907: LD_INT 28
74909: PPUSH
74910: LD_OWVAR 2
74914: PPUSH
74915: LD_INT 2
74917: PPUSH
74918: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74922: LD_INT 30
74924: PPUSH
74925: LD_OWVAR 2
74929: PPUSH
74930: LD_INT 2
74932: PPUSH
74933: CALL_OW 322
// end ;
74937: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74938: LD_EXP 46
74942: PUSH
74943: LD_EXP 98
74947: AND
74948: IFFALSE 75069
74950: GO 74952
74952: DISABLE
74953: LD_INT 0
74955: PPUSH
74956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74957: LD_ADDR_VAR 0 2
74961: PUSH
74962: LD_INT 22
74964: PUSH
74965: LD_OWVAR 2
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: PUSH
74974: LD_INT 21
74976: PUSH
74977: LD_INT 1
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: PUSH
74984: LD_INT 3
74986: PUSH
74987: LD_INT 23
74989: PUSH
74990: LD_INT 0
74992: PUSH
74993: EMPTY
74994: LIST
74995: LIST
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: LIST
75005: PPUSH
75006: CALL_OW 69
75010: ST_TO_ADDR
// if not tmp then
75011: LD_VAR 0 2
75015: NOT
75016: IFFALSE 75020
// exit ;
75018: GO 75069
// for i in tmp do
75020: LD_ADDR_VAR 0 1
75024: PUSH
75025: LD_VAR 0 2
75029: PUSH
75030: FOR_IN
75031: IFFALSE 75067
// begin if Crawls ( i ) then
75033: LD_VAR 0 1
75037: PPUSH
75038: CALL_OW 318
75042: IFFALSE 75053
// ComWalk ( i ) ;
75044: LD_VAR 0 1
75048: PPUSH
75049: CALL_OW 138
// SetClass ( i , 2 ) ;
75053: LD_VAR 0 1
75057: PPUSH
75058: LD_INT 2
75060: PPUSH
75061: CALL_OW 336
// end ;
75065: GO 75030
75067: POP
75068: POP
// end ;
75069: PPOPN 2
75071: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75072: LD_EXP 46
75076: PUSH
75077: LD_EXP 99
75081: AND
75082: IFFALSE 75370
75084: GO 75086
75086: DISABLE
75087: LD_INT 0
75089: PPUSH
75090: PPUSH
75091: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75092: LD_OWVAR 2
75096: PPUSH
75097: LD_INT 9
75099: PPUSH
75100: LD_INT 1
75102: PPUSH
75103: LD_INT 1
75105: PPUSH
75106: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75110: LD_INT 9
75112: PPUSH
75113: LD_OWVAR 2
75117: PPUSH
75118: CALL_OW 343
// uc_side := 9 ;
75122: LD_ADDR_OWVAR 20
75126: PUSH
75127: LD_INT 9
75129: ST_TO_ADDR
// uc_nation := 2 ;
75130: LD_ADDR_OWVAR 21
75134: PUSH
75135: LD_INT 2
75137: ST_TO_ADDR
// hc_name := Dark Warrior ;
75138: LD_ADDR_OWVAR 26
75142: PUSH
75143: LD_STRING Dark Warrior
75145: ST_TO_ADDR
// hc_gallery :=  ;
75146: LD_ADDR_OWVAR 33
75150: PUSH
75151: LD_STRING 
75153: ST_TO_ADDR
// hc_noskilllimit := true ;
75154: LD_ADDR_OWVAR 76
75158: PUSH
75159: LD_INT 1
75161: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75162: LD_ADDR_OWVAR 31
75166: PUSH
75167: LD_INT 30
75169: PUSH
75170: LD_INT 30
75172: PUSH
75173: LD_INT 30
75175: PUSH
75176: LD_INT 30
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: ST_TO_ADDR
// un := CreateHuman ;
75185: LD_ADDR_VAR 0 3
75189: PUSH
75190: CALL_OW 44
75194: ST_TO_ADDR
// hc_noskilllimit := false ;
75195: LD_ADDR_OWVAR 76
75199: PUSH
75200: LD_INT 0
75202: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75203: LD_VAR 0 3
75207: PPUSH
75208: LD_INT 1
75210: PPUSH
75211: CALL_OW 51
// ToLua ( playRanger() ) ;
75215: LD_STRING playRanger()
75217: PPUSH
75218: CALL_OW 559
// p := 0 ;
75222: LD_ADDR_VAR 0 2
75226: PUSH
75227: LD_INT 0
75229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75230: LD_INT 35
75232: PPUSH
75233: CALL_OW 67
// p := p + 1 ;
75237: LD_ADDR_VAR 0 2
75241: PUSH
75242: LD_VAR 0 2
75246: PUSH
75247: LD_INT 1
75249: PLUS
75250: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75251: LD_VAR 0 3
75255: PPUSH
75256: CALL_OW 256
75260: PUSH
75261: LD_INT 1000
75263: LESS
75264: IFFALSE 75278
// SetLives ( un , 1000 ) ;
75266: LD_VAR 0 3
75270: PPUSH
75271: LD_INT 1000
75273: PPUSH
75274: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75278: LD_VAR 0 3
75282: PPUSH
75283: LD_INT 81
75285: PUSH
75286: LD_OWVAR 2
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 91
75297: PUSH
75298: LD_VAR 0 3
75302: PUSH
75303: LD_INT 30
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: LIST
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PPUSH
75315: CALL_OW 69
75319: PPUSH
75320: LD_VAR 0 3
75324: PPUSH
75325: CALL_OW 74
75329: PPUSH
75330: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
75334: LD_VAR 0 2
75338: PUSH
75339: LD_INT 80
75341: GREATER
75342: PUSH
75343: LD_VAR 0 3
75347: PPUSH
75348: CALL_OW 301
75352: OR
75353: IFFALSE 75230
// if un then
75355: LD_VAR 0 3
75359: IFFALSE 75370
// RemoveUnit ( un ) ;
75361: LD_VAR 0 3
75365: PPUSH
75366: CALL_OW 64
// end ;
75370: PPOPN 3
75372: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
75373: LD_EXP 100
75377: IFFALSE 75493
75379: GO 75381
75381: DISABLE
75382: LD_INT 0
75384: PPUSH
75385: PPUSH
75386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75387: LD_ADDR_VAR 0 2
75391: PUSH
75392: LD_INT 81
75394: PUSH
75395: LD_OWVAR 2
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 21
75406: PUSH
75407: LD_INT 1
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: PPUSH
75418: CALL_OW 69
75422: ST_TO_ADDR
// ToLua ( playComputer() ) ;
75423: LD_STRING playComputer()
75425: PPUSH
75426: CALL_OW 559
// if not tmp then
75430: LD_VAR 0 2
75434: NOT
75435: IFFALSE 75439
// exit ;
75437: GO 75493
// for i in tmp do
75439: LD_ADDR_VAR 0 1
75443: PUSH
75444: LD_VAR 0 2
75448: PUSH
75449: FOR_IN
75450: IFFALSE 75491
// for j := 1 to 4 do
75452: LD_ADDR_VAR 0 3
75456: PUSH
75457: DOUBLE
75458: LD_INT 1
75460: DEC
75461: ST_TO_ADDR
75462: LD_INT 4
75464: PUSH
75465: FOR_TO
75466: IFFALSE 75487
// SetSkill ( i , j , 10 ) ;
75468: LD_VAR 0 1
75472: PPUSH
75473: LD_VAR 0 3
75477: PPUSH
75478: LD_INT 10
75480: PPUSH
75481: CALL_OW 237
75485: GO 75465
75487: POP
75488: POP
75489: GO 75449
75491: POP
75492: POP
// end ;
75493: PPOPN 3
75495: END
// every 0 0$1 trigger s30 do var i , tmp ;
75496: LD_EXP 101
75500: IFFALSE 75569
75502: GO 75504
75504: DISABLE
75505: LD_INT 0
75507: PPUSH
75508: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75509: LD_ADDR_VAR 0 2
75513: PUSH
75514: LD_INT 22
75516: PUSH
75517: LD_OWVAR 2
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PPUSH
75526: CALL_OW 69
75530: ST_TO_ADDR
// if not tmp then
75531: LD_VAR 0 2
75535: NOT
75536: IFFALSE 75540
// exit ;
75538: GO 75569
// for i in tmp do
75540: LD_ADDR_VAR 0 1
75544: PUSH
75545: LD_VAR 0 2
75549: PUSH
75550: FOR_IN
75551: IFFALSE 75567
// SetLives ( i , 300 ) ;
75553: LD_VAR 0 1
75557: PPUSH
75558: LD_INT 300
75560: PPUSH
75561: CALL_OW 234
75565: GO 75550
75567: POP
75568: POP
// end ;
75569: PPOPN 2
75571: END
// every 0 0$1 trigger s60 do var i , tmp ;
75572: LD_EXP 102
75576: IFFALSE 75645
75578: GO 75580
75580: DISABLE
75581: LD_INT 0
75583: PPUSH
75584: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
75585: LD_ADDR_VAR 0 2
75589: PUSH
75590: LD_INT 22
75592: PUSH
75593: LD_OWVAR 2
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: PPUSH
75602: CALL_OW 69
75606: ST_TO_ADDR
// if not tmp then
75607: LD_VAR 0 2
75611: NOT
75612: IFFALSE 75616
// exit ;
75614: GO 75645
// for i in tmp do
75616: LD_ADDR_VAR 0 1
75620: PUSH
75621: LD_VAR 0 2
75625: PUSH
75626: FOR_IN
75627: IFFALSE 75643
// SetLives ( i , 600 ) ;
75629: LD_VAR 0 1
75633: PPUSH
75634: LD_INT 600
75636: PPUSH
75637: CALL_OW 234
75641: GO 75626
75643: POP
75644: POP
// end ;
75645: PPOPN 2
75647: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
75648: LD_INT 0
75650: PPUSH
// case cmd of 301 :
75651: LD_VAR 0 1
75655: PUSH
75656: LD_INT 301
75658: DOUBLE
75659: EQUAL
75660: IFTRUE 75664
75662: GO 75696
75664: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
75665: LD_VAR 0 6
75669: PPUSH
75670: LD_VAR 0 7
75674: PPUSH
75675: LD_VAR 0 8
75679: PPUSH
75680: LD_VAR 0 4
75684: PPUSH
75685: LD_VAR 0 5
75689: PPUSH
75690: CALL 76905 0 5
75694: GO 75817
75696: LD_INT 302
75698: DOUBLE
75699: EQUAL
75700: IFTRUE 75704
75702: GO 75741
75704: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
75705: LD_VAR 0 6
75709: PPUSH
75710: LD_VAR 0 7
75714: PPUSH
75715: LD_VAR 0 8
75719: PPUSH
75720: LD_VAR 0 9
75724: PPUSH
75725: LD_VAR 0 4
75729: PPUSH
75730: LD_VAR 0 5
75734: PPUSH
75735: CALL 76996 0 6
75739: GO 75817
75741: LD_INT 303
75743: DOUBLE
75744: EQUAL
75745: IFTRUE 75749
75747: GO 75786
75749: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
75750: LD_VAR 0 6
75754: PPUSH
75755: LD_VAR 0 7
75759: PPUSH
75760: LD_VAR 0 8
75764: PPUSH
75765: LD_VAR 0 9
75769: PPUSH
75770: LD_VAR 0 4
75774: PPUSH
75775: LD_VAR 0 5
75779: PPUSH
75780: CALL 75822 0 6
75784: GO 75817
75786: LD_INT 304
75788: DOUBLE
75789: EQUAL
75790: IFTRUE 75794
75792: GO 75816
75794: POP
// hHackTeleport ( unit , x , y ) ; end ;
75795: LD_VAR 0 2
75799: PPUSH
75800: LD_VAR 0 4
75804: PPUSH
75805: LD_VAR 0 5
75809: PPUSH
75810: CALL 77589 0 3
75814: GO 75817
75816: POP
// end ;
75817: LD_VAR 0 12
75821: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
75822: LD_INT 0
75824: PPUSH
75825: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
75826: LD_VAR 0 1
75830: PUSH
75831: LD_INT 1
75833: LESS
75834: PUSH
75835: LD_VAR 0 1
75839: PUSH
75840: LD_INT 3
75842: GREATER
75843: OR
75844: PUSH
75845: LD_VAR 0 5
75849: PPUSH
75850: LD_VAR 0 6
75854: PPUSH
75855: CALL_OW 428
75859: OR
75860: IFFALSE 75864
// exit ;
75862: GO 76592
// uc_side := your_side ;
75864: LD_ADDR_OWVAR 20
75868: PUSH
75869: LD_OWVAR 2
75873: ST_TO_ADDR
// uc_nation := nation ;
75874: LD_ADDR_OWVAR 21
75878: PUSH
75879: LD_VAR 0 1
75883: ST_TO_ADDR
// bc_level = 1 ;
75884: LD_ADDR_OWVAR 43
75888: PUSH
75889: LD_INT 1
75891: ST_TO_ADDR
// case btype of 1 :
75892: LD_VAR 0 2
75896: PUSH
75897: LD_INT 1
75899: DOUBLE
75900: EQUAL
75901: IFTRUE 75905
75903: GO 75916
75905: POP
// bc_type := b_depot ; 2 :
75906: LD_ADDR_OWVAR 42
75910: PUSH
75911: LD_INT 0
75913: ST_TO_ADDR
75914: GO 76536
75916: LD_INT 2
75918: DOUBLE
75919: EQUAL
75920: IFTRUE 75924
75922: GO 75935
75924: POP
// bc_type := b_warehouse ; 3 :
75925: LD_ADDR_OWVAR 42
75929: PUSH
75930: LD_INT 1
75932: ST_TO_ADDR
75933: GO 76536
75935: LD_INT 3
75937: DOUBLE
75938: EQUAL
75939: IFTRUE 75943
75941: GO 75954
75943: POP
// bc_type := b_lab ; 4 .. 9 :
75944: LD_ADDR_OWVAR 42
75948: PUSH
75949: LD_INT 6
75951: ST_TO_ADDR
75952: GO 76536
75954: LD_INT 4
75956: DOUBLE
75957: GREATEREQUAL
75958: IFFALSE 75966
75960: LD_INT 9
75962: DOUBLE
75963: LESSEQUAL
75964: IFTRUE 75968
75966: GO 76028
75968: POP
// begin bc_type := b_lab_half ;
75969: LD_ADDR_OWVAR 42
75973: PUSH
75974: LD_INT 7
75976: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75977: LD_ADDR_OWVAR 44
75981: PUSH
75982: LD_INT 10
75984: PUSH
75985: LD_INT 11
75987: PUSH
75988: LD_INT 12
75990: PUSH
75991: LD_INT 15
75993: PUSH
75994: LD_INT 14
75996: PUSH
75997: LD_INT 13
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: PUSH
76008: LD_VAR 0 2
76012: PUSH
76013: LD_INT 3
76015: MINUS
76016: ARRAY
76017: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
76018: LD_ADDR_OWVAR 45
76022: PUSH
76023: LD_INT 9
76025: ST_TO_ADDR
// end ; 10 .. 13 :
76026: GO 76536
76028: LD_INT 10
76030: DOUBLE
76031: GREATEREQUAL
76032: IFFALSE 76040
76034: LD_INT 13
76036: DOUBLE
76037: LESSEQUAL
76038: IFTRUE 76042
76040: GO 76119
76042: POP
// begin bc_type := b_lab_full ;
76043: LD_ADDR_OWVAR 42
76047: PUSH
76048: LD_INT 8
76050: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76051: LD_ADDR_OWVAR 44
76055: PUSH
76056: LD_INT 10
76058: PUSH
76059: LD_INT 12
76061: PUSH
76062: LD_INT 14
76064: PUSH
76065: LD_INT 13
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: PUSH
76074: LD_VAR 0 2
76078: PUSH
76079: LD_INT 9
76081: MINUS
76082: ARRAY
76083: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76084: LD_ADDR_OWVAR 45
76088: PUSH
76089: LD_INT 11
76091: PUSH
76092: LD_INT 15
76094: PUSH
76095: LD_INT 12
76097: PUSH
76098: LD_INT 15
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: PUSH
76107: LD_VAR 0 2
76111: PUSH
76112: LD_INT 9
76114: MINUS
76115: ARRAY
76116: ST_TO_ADDR
// end ; 14 :
76117: GO 76536
76119: LD_INT 14
76121: DOUBLE
76122: EQUAL
76123: IFTRUE 76127
76125: GO 76138
76127: POP
// bc_type := b_workshop ; 15 :
76128: LD_ADDR_OWVAR 42
76132: PUSH
76133: LD_INT 2
76135: ST_TO_ADDR
76136: GO 76536
76138: LD_INT 15
76140: DOUBLE
76141: EQUAL
76142: IFTRUE 76146
76144: GO 76157
76146: POP
// bc_type := b_factory ; 16 :
76147: LD_ADDR_OWVAR 42
76151: PUSH
76152: LD_INT 3
76154: ST_TO_ADDR
76155: GO 76536
76157: LD_INT 16
76159: DOUBLE
76160: EQUAL
76161: IFTRUE 76165
76163: GO 76176
76165: POP
// bc_type := b_ext_gun ; 17 :
76166: LD_ADDR_OWVAR 42
76170: PUSH
76171: LD_INT 17
76173: ST_TO_ADDR
76174: GO 76536
76176: LD_INT 17
76178: DOUBLE
76179: EQUAL
76180: IFTRUE 76184
76182: GO 76212
76184: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76185: LD_ADDR_OWVAR 42
76189: PUSH
76190: LD_INT 19
76192: PUSH
76193: LD_INT 23
76195: PUSH
76196: LD_INT 19
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: LIST
76203: PUSH
76204: LD_VAR 0 1
76208: ARRAY
76209: ST_TO_ADDR
76210: GO 76536
76212: LD_INT 18
76214: DOUBLE
76215: EQUAL
76216: IFTRUE 76220
76218: GO 76231
76220: POP
// bc_type := b_ext_radar ; 19 :
76221: LD_ADDR_OWVAR 42
76225: PUSH
76226: LD_INT 20
76228: ST_TO_ADDR
76229: GO 76536
76231: LD_INT 19
76233: DOUBLE
76234: EQUAL
76235: IFTRUE 76239
76237: GO 76250
76239: POP
// bc_type := b_ext_radio ; 20 :
76240: LD_ADDR_OWVAR 42
76244: PUSH
76245: LD_INT 22
76247: ST_TO_ADDR
76248: GO 76536
76250: LD_INT 20
76252: DOUBLE
76253: EQUAL
76254: IFTRUE 76258
76256: GO 76269
76258: POP
// bc_type := b_ext_siberium ; 21 :
76259: LD_ADDR_OWVAR 42
76263: PUSH
76264: LD_INT 21
76266: ST_TO_ADDR
76267: GO 76536
76269: LD_INT 21
76271: DOUBLE
76272: EQUAL
76273: IFTRUE 76277
76275: GO 76288
76277: POP
// bc_type := b_ext_computer ; 22 :
76278: LD_ADDR_OWVAR 42
76282: PUSH
76283: LD_INT 24
76285: ST_TO_ADDR
76286: GO 76536
76288: LD_INT 22
76290: DOUBLE
76291: EQUAL
76292: IFTRUE 76296
76294: GO 76307
76296: POP
// bc_type := b_ext_track ; 23 :
76297: LD_ADDR_OWVAR 42
76301: PUSH
76302: LD_INT 16
76304: ST_TO_ADDR
76305: GO 76536
76307: LD_INT 23
76309: DOUBLE
76310: EQUAL
76311: IFTRUE 76315
76313: GO 76326
76315: POP
// bc_type := b_ext_laser ; 24 :
76316: LD_ADDR_OWVAR 42
76320: PUSH
76321: LD_INT 25
76323: ST_TO_ADDR
76324: GO 76536
76326: LD_INT 24
76328: DOUBLE
76329: EQUAL
76330: IFTRUE 76334
76332: GO 76345
76334: POP
// bc_type := b_control_tower ; 25 :
76335: LD_ADDR_OWVAR 42
76339: PUSH
76340: LD_INT 36
76342: ST_TO_ADDR
76343: GO 76536
76345: LD_INT 25
76347: DOUBLE
76348: EQUAL
76349: IFTRUE 76353
76351: GO 76364
76353: POP
// bc_type := b_breastwork ; 26 :
76354: LD_ADDR_OWVAR 42
76358: PUSH
76359: LD_INT 31
76361: ST_TO_ADDR
76362: GO 76536
76364: LD_INT 26
76366: DOUBLE
76367: EQUAL
76368: IFTRUE 76372
76370: GO 76383
76372: POP
// bc_type := b_bunker ; 27 :
76373: LD_ADDR_OWVAR 42
76377: PUSH
76378: LD_INT 32
76380: ST_TO_ADDR
76381: GO 76536
76383: LD_INT 27
76385: DOUBLE
76386: EQUAL
76387: IFTRUE 76391
76389: GO 76402
76391: POP
// bc_type := b_turret ; 28 :
76392: LD_ADDR_OWVAR 42
76396: PUSH
76397: LD_INT 33
76399: ST_TO_ADDR
76400: GO 76536
76402: LD_INT 28
76404: DOUBLE
76405: EQUAL
76406: IFTRUE 76410
76408: GO 76421
76410: POP
// bc_type := b_armoury ; 29 :
76411: LD_ADDR_OWVAR 42
76415: PUSH
76416: LD_INT 4
76418: ST_TO_ADDR
76419: GO 76536
76421: LD_INT 29
76423: DOUBLE
76424: EQUAL
76425: IFTRUE 76429
76427: GO 76440
76429: POP
// bc_type := b_barracks ; 30 :
76430: LD_ADDR_OWVAR 42
76434: PUSH
76435: LD_INT 5
76437: ST_TO_ADDR
76438: GO 76536
76440: LD_INT 30
76442: DOUBLE
76443: EQUAL
76444: IFTRUE 76448
76446: GO 76459
76448: POP
// bc_type := b_solar_power ; 31 :
76449: LD_ADDR_OWVAR 42
76453: PUSH
76454: LD_INT 27
76456: ST_TO_ADDR
76457: GO 76536
76459: LD_INT 31
76461: DOUBLE
76462: EQUAL
76463: IFTRUE 76467
76465: GO 76478
76467: POP
// bc_type := b_oil_power ; 32 :
76468: LD_ADDR_OWVAR 42
76472: PUSH
76473: LD_INT 26
76475: ST_TO_ADDR
76476: GO 76536
76478: LD_INT 32
76480: DOUBLE
76481: EQUAL
76482: IFTRUE 76486
76484: GO 76497
76486: POP
// bc_type := b_siberite_power ; 33 :
76487: LD_ADDR_OWVAR 42
76491: PUSH
76492: LD_INT 28
76494: ST_TO_ADDR
76495: GO 76536
76497: LD_INT 33
76499: DOUBLE
76500: EQUAL
76501: IFTRUE 76505
76503: GO 76516
76505: POP
// bc_type := b_oil_mine ; 34 :
76506: LD_ADDR_OWVAR 42
76510: PUSH
76511: LD_INT 29
76513: ST_TO_ADDR
76514: GO 76536
76516: LD_INT 34
76518: DOUBLE
76519: EQUAL
76520: IFTRUE 76524
76522: GO 76535
76524: POP
// bc_type := b_siberite_mine ; end ;
76525: LD_ADDR_OWVAR 42
76529: PUSH
76530: LD_INT 30
76532: ST_TO_ADDR
76533: GO 76536
76535: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
76536: LD_ADDR_VAR 0 8
76540: PUSH
76541: LD_VAR 0 5
76545: PPUSH
76546: LD_VAR 0 6
76550: PPUSH
76551: LD_VAR 0 3
76555: PPUSH
76556: CALL_OW 47
76560: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
76561: LD_OWVAR 42
76565: PUSH
76566: LD_INT 32
76568: PUSH
76569: LD_INT 33
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: IN
76576: IFFALSE 76592
// PlaceWeaponTurret ( b , weapon ) ;
76578: LD_VAR 0 8
76582: PPUSH
76583: LD_VAR 0 4
76587: PPUSH
76588: CALL_OW 431
// end ;
76592: LD_VAR 0 7
76596: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
76597: LD_INT 0
76599: PPUSH
76600: PPUSH
76601: PPUSH
76602: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76603: LD_ADDR_VAR 0 4
76607: PUSH
76608: LD_INT 22
76610: PUSH
76611: LD_OWVAR 2
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: PUSH
76620: LD_INT 2
76622: PUSH
76623: LD_INT 30
76625: PUSH
76626: LD_INT 0
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 30
76635: PUSH
76636: LD_INT 1
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: LIST
76647: PUSH
76648: EMPTY
76649: LIST
76650: LIST
76651: PPUSH
76652: CALL_OW 69
76656: ST_TO_ADDR
// if not tmp then
76657: LD_VAR 0 4
76661: NOT
76662: IFFALSE 76666
// exit ;
76664: GO 76725
// for i in tmp do
76666: LD_ADDR_VAR 0 2
76670: PUSH
76671: LD_VAR 0 4
76675: PUSH
76676: FOR_IN
76677: IFFALSE 76723
// for j = 1 to 3 do
76679: LD_ADDR_VAR 0 3
76683: PUSH
76684: DOUBLE
76685: LD_INT 1
76687: DEC
76688: ST_TO_ADDR
76689: LD_INT 3
76691: PUSH
76692: FOR_TO
76693: IFFALSE 76719
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
76695: LD_VAR 0 2
76699: PPUSH
76700: CALL_OW 274
76704: PPUSH
76705: LD_VAR 0 3
76709: PPUSH
76710: LD_INT 99999
76712: PPUSH
76713: CALL_OW 277
76717: GO 76692
76719: POP
76720: POP
76721: GO 76676
76723: POP
76724: POP
// end ;
76725: LD_VAR 0 1
76729: RET
// export function hHackSetLevel10 ; var i , j ; begin
76730: LD_INT 0
76732: PPUSH
76733: PPUSH
76734: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76735: LD_ADDR_VAR 0 2
76739: PUSH
76740: LD_INT 21
76742: PUSH
76743: LD_INT 1
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: PPUSH
76750: CALL_OW 69
76754: PUSH
76755: FOR_IN
76756: IFFALSE 76808
// if IsSelected ( i ) then
76758: LD_VAR 0 2
76762: PPUSH
76763: CALL_OW 306
76767: IFFALSE 76806
// begin for j := 1 to 4 do
76769: LD_ADDR_VAR 0 3
76773: PUSH
76774: DOUBLE
76775: LD_INT 1
76777: DEC
76778: ST_TO_ADDR
76779: LD_INT 4
76781: PUSH
76782: FOR_TO
76783: IFFALSE 76804
// SetSkill ( i , j , 10 ) ;
76785: LD_VAR 0 2
76789: PPUSH
76790: LD_VAR 0 3
76794: PPUSH
76795: LD_INT 10
76797: PPUSH
76798: CALL_OW 237
76802: GO 76782
76804: POP
76805: POP
// end ;
76806: GO 76755
76808: POP
76809: POP
// end ;
76810: LD_VAR 0 1
76814: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
76815: LD_INT 0
76817: PPUSH
76818: PPUSH
76819: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
76820: LD_ADDR_VAR 0 2
76824: PUSH
76825: LD_INT 22
76827: PUSH
76828: LD_OWVAR 2
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PUSH
76837: LD_INT 21
76839: PUSH
76840: LD_INT 1
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: PPUSH
76851: CALL_OW 69
76855: PUSH
76856: FOR_IN
76857: IFFALSE 76898
// begin for j := 1 to 4 do
76859: LD_ADDR_VAR 0 3
76863: PUSH
76864: DOUBLE
76865: LD_INT 1
76867: DEC
76868: ST_TO_ADDR
76869: LD_INT 4
76871: PUSH
76872: FOR_TO
76873: IFFALSE 76894
// SetSkill ( i , j , 10 ) ;
76875: LD_VAR 0 2
76879: PPUSH
76880: LD_VAR 0 3
76884: PPUSH
76885: LD_INT 10
76887: PPUSH
76888: CALL_OW 237
76892: GO 76872
76894: POP
76895: POP
// end ;
76896: GO 76856
76898: POP
76899: POP
// end ;
76900: LD_VAR 0 1
76904: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
76905: LD_INT 0
76907: PPUSH
// uc_side := your_side ;
76908: LD_ADDR_OWVAR 20
76912: PUSH
76913: LD_OWVAR 2
76917: ST_TO_ADDR
// uc_nation := nation ;
76918: LD_ADDR_OWVAR 21
76922: PUSH
76923: LD_VAR 0 1
76927: ST_TO_ADDR
// InitHc ;
76928: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76932: LD_INT 0
76934: PPUSH
76935: LD_VAR 0 2
76939: PPUSH
76940: LD_VAR 0 3
76944: PPUSH
76945: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
76949: LD_VAR 0 4
76953: PPUSH
76954: LD_VAR 0 5
76958: PPUSH
76959: CALL_OW 428
76963: PUSH
76964: LD_INT 0
76966: EQUAL
76967: IFFALSE 76991
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76969: CALL_OW 44
76973: PPUSH
76974: LD_VAR 0 4
76978: PPUSH
76979: LD_VAR 0 5
76983: PPUSH
76984: LD_INT 1
76986: PPUSH
76987: CALL_OW 48
// end ;
76991: LD_VAR 0 6
76995: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76996: LD_INT 0
76998: PPUSH
76999: PPUSH
// uc_side := your_side ;
77000: LD_ADDR_OWVAR 20
77004: PUSH
77005: LD_OWVAR 2
77009: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77010: LD_VAR 0 1
77014: PUSH
77015: LD_INT 1
77017: PUSH
77018: LD_INT 2
77020: PUSH
77021: LD_INT 3
77023: PUSH
77024: LD_INT 4
77026: PUSH
77027: LD_INT 5
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: IN
77037: IFFALSE 77049
// uc_nation := nation_american else
77039: LD_ADDR_OWVAR 21
77043: PUSH
77044: LD_INT 1
77046: ST_TO_ADDR
77047: GO 77092
// if chassis in [ 11 , 12 , 13 , 14 ] then
77049: LD_VAR 0 1
77053: PUSH
77054: LD_INT 11
77056: PUSH
77057: LD_INT 12
77059: PUSH
77060: LD_INT 13
77062: PUSH
77063: LD_INT 14
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: IN
77072: IFFALSE 77084
// uc_nation := nation_arabian else
77074: LD_ADDR_OWVAR 21
77078: PUSH
77079: LD_INT 2
77081: ST_TO_ADDR
77082: GO 77092
// uc_nation := nation_russian ;
77084: LD_ADDR_OWVAR 21
77088: PUSH
77089: LD_INT 3
77091: ST_TO_ADDR
// vc_chassis := chassis ;
77092: LD_ADDR_OWVAR 37
77096: PUSH
77097: LD_VAR 0 1
77101: ST_TO_ADDR
// vc_engine := engine ;
77102: LD_ADDR_OWVAR 39
77106: PUSH
77107: LD_VAR 0 2
77111: ST_TO_ADDR
// vc_control := control ;
77112: LD_ADDR_OWVAR 38
77116: PUSH
77117: LD_VAR 0 3
77121: ST_TO_ADDR
// vc_weapon := weapon ;
77122: LD_ADDR_OWVAR 40
77126: PUSH
77127: LD_VAR 0 4
77131: ST_TO_ADDR
// un := CreateVehicle ;
77132: LD_ADDR_VAR 0 8
77136: PUSH
77137: CALL_OW 45
77141: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77142: LD_VAR 0 8
77146: PPUSH
77147: LD_INT 0
77149: PPUSH
77150: LD_INT 5
77152: PPUSH
77153: CALL_OW 12
77157: PPUSH
77158: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77162: LD_VAR 0 8
77166: PPUSH
77167: LD_VAR 0 5
77171: PPUSH
77172: LD_VAR 0 6
77176: PPUSH
77177: LD_INT 1
77179: PPUSH
77180: CALL_OW 48
// end ;
77184: LD_VAR 0 7
77188: RET
// export hInvincible ; every 1 do
77189: GO 77191
77191: DISABLE
// hInvincible := [ ] ;
77192: LD_ADDR_EXP 103
77196: PUSH
77197: EMPTY
77198: ST_TO_ADDR
77199: END
// every 10 do var i ;
77200: GO 77202
77202: DISABLE
77203: LD_INT 0
77205: PPUSH
// begin enable ;
77206: ENABLE
// if not hInvincible then
77207: LD_EXP 103
77211: NOT
77212: IFFALSE 77216
// exit ;
77214: GO 77260
// for i in hInvincible do
77216: LD_ADDR_VAR 0 1
77220: PUSH
77221: LD_EXP 103
77225: PUSH
77226: FOR_IN
77227: IFFALSE 77258
// if GetLives ( i ) < 1000 then
77229: LD_VAR 0 1
77233: PPUSH
77234: CALL_OW 256
77238: PUSH
77239: LD_INT 1000
77241: LESS
77242: IFFALSE 77256
// SetLives ( i , 1000 ) ;
77244: LD_VAR 0 1
77248: PPUSH
77249: LD_INT 1000
77251: PPUSH
77252: CALL_OW 234
77256: GO 77226
77258: POP
77259: POP
// end ;
77260: PPOPN 1
77262: END
// export function hHackInvincible ; var i ; begin
77263: LD_INT 0
77265: PPUSH
77266: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77267: LD_ADDR_VAR 0 2
77271: PUSH
77272: LD_INT 2
77274: PUSH
77275: LD_INT 21
77277: PUSH
77278: LD_INT 1
77280: PUSH
77281: EMPTY
77282: LIST
77283: LIST
77284: PUSH
77285: LD_INT 21
77287: PUSH
77288: LD_INT 2
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: LIST
77299: PPUSH
77300: CALL_OW 69
77304: PUSH
77305: FOR_IN
77306: IFFALSE 77367
// if IsSelected ( i ) then
77308: LD_VAR 0 2
77312: PPUSH
77313: CALL_OW 306
77317: IFFALSE 77365
// begin if i in hInvincible then
77319: LD_VAR 0 2
77323: PUSH
77324: LD_EXP 103
77328: IN
77329: IFFALSE 77349
// hInvincible := hInvincible diff i else
77331: LD_ADDR_EXP 103
77335: PUSH
77336: LD_EXP 103
77340: PUSH
77341: LD_VAR 0 2
77345: DIFF
77346: ST_TO_ADDR
77347: GO 77365
// hInvincible := hInvincible union i ;
77349: LD_ADDR_EXP 103
77353: PUSH
77354: LD_EXP 103
77358: PUSH
77359: LD_VAR 0 2
77363: UNION
77364: ST_TO_ADDR
// end ;
77365: GO 77305
77367: POP
77368: POP
// end ;
77369: LD_VAR 0 1
77373: RET
// export function hHackInvisible ; var i , j ; begin
77374: LD_INT 0
77376: PPUSH
77377: PPUSH
77378: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77379: LD_ADDR_VAR 0 2
77383: PUSH
77384: LD_INT 21
77386: PUSH
77387: LD_INT 1
77389: PUSH
77390: EMPTY
77391: LIST
77392: LIST
77393: PPUSH
77394: CALL_OW 69
77398: PUSH
77399: FOR_IN
77400: IFFALSE 77424
// if IsSelected ( i ) then
77402: LD_VAR 0 2
77406: PPUSH
77407: CALL_OW 306
77411: IFFALSE 77422
// ComForceInvisible ( i ) ;
77413: LD_VAR 0 2
77417: PPUSH
77418: CALL_OW 496
77422: GO 77399
77424: POP
77425: POP
// end ;
77426: LD_VAR 0 1
77430: RET
// export function hHackChangeYourSide ; begin
77431: LD_INT 0
77433: PPUSH
// if your_side = 8 then
77434: LD_OWVAR 2
77438: PUSH
77439: LD_INT 8
77441: EQUAL
77442: IFFALSE 77454
// your_side := 0 else
77444: LD_ADDR_OWVAR 2
77448: PUSH
77449: LD_INT 0
77451: ST_TO_ADDR
77452: GO 77468
// your_side := your_side + 1 ;
77454: LD_ADDR_OWVAR 2
77458: PUSH
77459: LD_OWVAR 2
77463: PUSH
77464: LD_INT 1
77466: PLUS
77467: ST_TO_ADDR
// end ;
77468: LD_VAR 0 1
77472: RET
// export function hHackChangeUnitSide ; var i , j ; begin
77473: LD_INT 0
77475: PPUSH
77476: PPUSH
77477: PPUSH
// for i in all_units do
77478: LD_ADDR_VAR 0 2
77482: PUSH
77483: LD_OWVAR 3
77487: PUSH
77488: FOR_IN
77489: IFFALSE 77567
// if IsSelected ( i ) then
77491: LD_VAR 0 2
77495: PPUSH
77496: CALL_OW 306
77500: IFFALSE 77565
// begin j := GetSide ( i ) ;
77502: LD_ADDR_VAR 0 3
77506: PUSH
77507: LD_VAR 0 2
77511: PPUSH
77512: CALL_OW 255
77516: ST_TO_ADDR
// if j = 8 then
77517: LD_VAR 0 3
77521: PUSH
77522: LD_INT 8
77524: EQUAL
77525: IFFALSE 77537
// j := 0 else
77527: LD_ADDR_VAR 0 3
77531: PUSH
77532: LD_INT 0
77534: ST_TO_ADDR
77535: GO 77551
// j := j + 1 ;
77537: LD_ADDR_VAR 0 3
77541: PUSH
77542: LD_VAR 0 3
77546: PUSH
77547: LD_INT 1
77549: PLUS
77550: ST_TO_ADDR
// SetSide ( i , j ) ;
77551: LD_VAR 0 2
77555: PPUSH
77556: LD_VAR 0 3
77560: PPUSH
77561: CALL_OW 235
// end ;
77565: GO 77488
77567: POP
77568: POP
// end ;
77569: LD_VAR 0 1
77573: RET
// export function hHackFog ; begin
77574: LD_INT 0
77576: PPUSH
// FogOff ( true ) ;
77577: LD_INT 1
77579: PPUSH
77580: CALL_OW 344
// end ;
77584: LD_VAR 0 1
77588: RET
// export function hHackTeleport ( unit , x , y ) ; begin
77589: LD_INT 0
77591: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
77592: LD_VAR 0 1
77596: PPUSH
77597: LD_VAR 0 2
77601: PPUSH
77602: LD_VAR 0 3
77606: PPUSH
77607: LD_INT 1
77609: PPUSH
77610: LD_INT 1
77612: PPUSH
77613: CALL_OW 483
// CenterOnXY ( x , y ) ;
77617: LD_VAR 0 2
77621: PPUSH
77622: LD_VAR 0 3
77626: PPUSH
77627: CALL_OW 84
// end ;
77631: LD_VAR 0 4
77635: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
77636: LD_INT 0
77638: PPUSH
77639: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
77640: LD_VAR 0 1
77644: NOT
77645: PUSH
77646: LD_VAR 0 2
77650: PPUSH
77651: LD_VAR 0 3
77655: PPUSH
77656: CALL_OW 488
77660: NOT
77661: OR
77662: PUSH
77663: LD_VAR 0 1
77667: PPUSH
77668: CALL_OW 266
77672: PUSH
77673: LD_INT 3
77675: NONEQUAL
77676: PUSH
77677: LD_VAR 0 1
77681: PPUSH
77682: CALL_OW 247
77686: PUSH
77687: LD_INT 1
77689: EQUAL
77690: NOT
77691: AND
77692: OR
77693: IFFALSE 77697
// exit ;
77695: GO 77846
// if GetType ( factory ) = unit_human then
77697: LD_VAR 0 1
77701: PPUSH
77702: CALL_OW 247
77706: PUSH
77707: LD_INT 1
77709: EQUAL
77710: IFFALSE 77727
// factory := IsInUnit ( factory ) ;
77712: LD_ADDR_VAR 0 1
77716: PUSH
77717: LD_VAR 0 1
77721: PPUSH
77722: CALL_OW 310
77726: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
77727: LD_VAR 0 1
77731: PPUSH
77732: CALL_OW 266
77736: PUSH
77737: LD_INT 3
77739: NONEQUAL
77740: IFFALSE 77744
// exit ;
77742: GO 77846
// if HexInfo ( x , y ) = factory then
77744: LD_VAR 0 2
77748: PPUSH
77749: LD_VAR 0 3
77753: PPUSH
77754: CALL_OW 428
77758: PUSH
77759: LD_VAR 0 1
77763: EQUAL
77764: IFFALSE 77791
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
77766: LD_ADDR_EXP 104
77770: PUSH
77771: LD_EXP 104
77775: PPUSH
77776: LD_VAR 0 1
77780: PPUSH
77781: LD_INT 0
77783: PPUSH
77784: CALL_OW 1
77788: ST_TO_ADDR
77789: GO 77842
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
77791: LD_ADDR_EXP 104
77795: PUSH
77796: LD_EXP 104
77800: PPUSH
77801: LD_VAR 0 1
77805: PPUSH
77806: LD_VAR 0 1
77810: PPUSH
77811: CALL_OW 255
77815: PUSH
77816: LD_VAR 0 1
77820: PUSH
77821: LD_VAR 0 2
77825: PUSH
77826: LD_VAR 0 3
77830: PUSH
77831: EMPTY
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: PPUSH
77837: CALL_OW 1
77841: ST_TO_ADDR
// UpdateFactoryWaypoints ;
77842: CALL 77851 0 0
// end ;
77846: LD_VAR 0 4
77850: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
77851: LD_INT 0
77853: PPUSH
77854: PPUSH
77855: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
77856: LD_STRING resetFactoryWaypoint();
77858: PPUSH
77859: CALL_OW 559
// if factoryWaypoints then
77863: LD_EXP 104
77867: IFFALSE 77993
// begin list := PrepareArray ( factoryWaypoints ) ;
77869: LD_ADDR_VAR 0 3
77873: PUSH
77874: LD_EXP 104
77878: PPUSH
77879: CALL 61747 0 1
77883: ST_TO_ADDR
// for i := 1 to list do
77884: LD_ADDR_VAR 0 2
77888: PUSH
77889: DOUBLE
77890: LD_INT 1
77892: DEC
77893: ST_TO_ADDR
77894: LD_VAR 0 3
77898: PUSH
77899: FOR_TO
77900: IFFALSE 77991
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77902: LD_STRING setFactoryWaypointXY(
77904: PUSH
77905: LD_VAR 0 3
77909: PUSH
77910: LD_VAR 0 2
77914: ARRAY
77915: PUSH
77916: LD_INT 1
77918: ARRAY
77919: STR
77920: PUSH
77921: LD_STRING ,
77923: STR
77924: PUSH
77925: LD_VAR 0 3
77929: PUSH
77930: LD_VAR 0 2
77934: ARRAY
77935: PUSH
77936: LD_INT 2
77938: ARRAY
77939: STR
77940: PUSH
77941: LD_STRING ,
77943: STR
77944: PUSH
77945: LD_VAR 0 3
77949: PUSH
77950: LD_VAR 0 2
77954: ARRAY
77955: PUSH
77956: LD_INT 3
77958: ARRAY
77959: STR
77960: PUSH
77961: LD_STRING ,
77963: STR
77964: PUSH
77965: LD_VAR 0 3
77969: PUSH
77970: LD_VAR 0 2
77974: ARRAY
77975: PUSH
77976: LD_INT 4
77978: ARRAY
77979: STR
77980: PUSH
77981: LD_STRING )
77983: STR
77984: PPUSH
77985: CALL_OW 559
77989: GO 77899
77991: POP
77992: POP
// end ; end ;
77993: LD_VAR 0 1
77997: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
77998: LD_INT 0
78000: PPUSH
// if HexInfo ( x , y ) = warehouse then
78001: LD_VAR 0 2
78005: PPUSH
78006: LD_VAR 0 3
78010: PPUSH
78011: CALL_OW 428
78015: PUSH
78016: LD_VAR 0 1
78020: EQUAL
78021: IFFALSE 78048
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
78023: LD_ADDR_EXP 105
78027: PUSH
78028: LD_EXP 105
78032: PPUSH
78033: LD_VAR 0 1
78037: PPUSH
78038: LD_INT 0
78040: PPUSH
78041: CALL_OW 1
78045: ST_TO_ADDR
78046: GO 78099
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
78048: LD_ADDR_EXP 105
78052: PUSH
78053: LD_EXP 105
78057: PPUSH
78058: LD_VAR 0 1
78062: PPUSH
78063: LD_VAR 0 1
78067: PPUSH
78068: CALL_OW 255
78072: PUSH
78073: LD_VAR 0 1
78077: PUSH
78078: LD_VAR 0 2
78082: PUSH
78083: LD_VAR 0 3
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: PPUSH
78094: CALL_OW 1
78098: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
78099: CALL 78108 0 0
// end ;
78103: LD_VAR 0 4
78107: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
78108: LD_INT 0
78110: PPUSH
78111: PPUSH
78112: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
78113: LD_STRING resetWarehouseGatheringPoints();
78115: PPUSH
78116: CALL_OW 559
// if warehouseGatheringPoints then
78120: LD_EXP 105
78124: IFFALSE 78250
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
78126: LD_ADDR_VAR 0 3
78130: PUSH
78131: LD_EXP 105
78135: PPUSH
78136: CALL 61747 0 1
78140: ST_TO_ADDR
// for i := 1 to list do
78141: LD_ADDR_VAR 0 2
78145: PUSH
78146: DOUBLE
78147: LD_INT 1
78149: DEC
78150: ST_TO_ADDR
78151: LD_VAR 0 3
78155: PUSH
78156: FOR_TO
78157: IFFALSE 78248
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78159: LD_STRING setWarehouseGatheringPointXY(
78161: PUSH
78162: LD_VAR 0 3
78166: PUSH
78167: LD_VAR 0 2
78171: ARRAY
78172: PUSH
78173: LD_INT 1
78175: ARRAY
78176: STR
78177: PUSH
78178: LD_STRING ,
78180: STR
78181: PUSH
78182: LD_VAR 0 3
78186: PUSH
78187: LD_VAR 0 2
78191: ARRAY
78192: PUSH
78193: LD_INT 2
78195: ARRAY
78196: STR
78197: PUSH
78198: LD_STRING ,
78200: STR
78201: PUSH
78202: LD_VAR 0 3
78206: PUSH
78207: LD_VAR 0 2
78211: ARRAY
78212: PUSH
78213: LD_INT 3
78215: ARRAY
78216: STR
78217: PUSH
78218: LD_STRING ,
78220: STR
78221: PUSH
78222: LD_VAR 0 3
78226: PUSH
78227: LD_VAR 0 2
78231: ARRAY
78232: PUSH
78233: LD_INT 4
78235: ARRAY
78236: STR
78237: PUSH
78238: LD_STRING )
78240: STR
78241: PPUSH
78242: CALL_OW 559
78246: GO 78156
78248: POP
78249: POP
// end ; end ;
78250: LD_VAR 0 1
78254: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
78255: LD_EXP 105
78259: IFFALSE 78944
78261: GO 78263
78263: DISABLE
78264: LD_INT 0
78266: PPUSH
78267: PPUSH
78268: PPUSH
78269: PPUSH
78270: PPUSH
78271: PPUSH
78272: PPUSH
78273: PPUSH
78274: PPUSH
// begin enable ;
78275: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
78276: LD_ADDR_VAR 0 3
78280: PUSH
78281: LD_EXP 105
78285: PPUSH
78286: CALL 61747 0 1
78290: ST_TO_ADDR
// if not list then
78291: LD_VAR 0 3
78295: NOT
78296: IFFALSE 78300
// exit ;
78298: GO 78944
// for i := 1 to list do
78300: LD_ADDR_VAR 0 1
78304: PUSH
78305: DOUBLE
78306: LD_INT 1
78308: DEC
78309: ST_TO_ADDR
78310: LD_VAR 0 3
78314: PUSH
78315: FOR_TO
78316: IFFALSE 78942
// begin depot := list [ i ] [ 2 ] ;
78318: LD_ADDR_VAR 0 8
78322: PUSH
78323: LD_VAR 0 3
78327: PUSH
78328: LD_VAR 0 1
78332: ARRAY
78333: PUSH
78334: LD_INT 2
78336: ARRAY
78337: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
78338: LD_ADDR_VAR 0 5
78342: PUSH
78343: LD_VAR 0 3
78347: PUSH
78348: LD_VAR 0 1
78352: ARRAY
78353: PUSH
78354: LD_INT 1
78356: ARRAY
78357: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
78358: LD_VAR 0 8
78362: PPUSH
78363: CALL_OW 301
78367: PUSH
78368: LD_VAR 0 5
78372: PUSH
78373: LD_VAR 0 8
78377: PPUSH
78378: CALL_OW 255
78382: NONEQUAL
78383: OR
78384: IFFALSE 78413
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
78386: LD_ADDR_EXP 105
78390: PUSH
78391: LD_EXP 105
78395: PPUSH
78396: LD_VAR 0 8
78400: PPUSH
78401: LD_INT 0
78403: PPUSH
78404: CALL_OW 1
78408: ST_TO_ADDR
// exit ;
78409: POP
78410: POP
78411: GO 78944
// end ; x := list [ i ] [ 3 ] ;
78413: LD_ADDR_VAR 0 6
78417: PUSH
78418: LD_VAR 0 3
78422: PUSH
78423: LD_VAR 0 1
78427: ARRAY
78428: PUSH
78429: LD_INT 3
78431: ARRAY
78432: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
78433: LD_ADDR_VAR 0 7
78437: PUSH
78438: LD_VAR 0 3
78442: PUSH
78443: LD_VAR 0 1
78447: ARRAY
78448: PUSH
78449: LD_INT 4
78451: ARRAY
78452: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
78453: LD_ADDR_VAR 0 9
78457: PUSH
78458: LD_VAR 0 6
78462: PPUSH
78463: LD_VAR 0 7
78467: PPUSH
78468: LD_INT 16
78470: PPUSH
78471: CALL 60335 0 3
78475: ST_TO_ADDR
// if not cratesNearbyPoint then
78476: LD_VAR 0 9
78480: NOT
78481: IFFALSE 78487
// exit ;
78483: POP
78484: POP
78485: GO 78944
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
78487: LD_ADDR_VAR 0 4
78491: PUSH
78492: LD_INT 22
78494: PUSH
78495: LD_VAR 0 5
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: PUSH
78504: LD_INT 3
78506: PUSH
78507: LD_INT 60
78509: PUSH
78510: EMPTY
78511: LIST
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: PUSH
78517: LD_INT 91
78519: PUSH
78520: LD_VAR 0 8
78524: PUSH
78525: LD_INT 6
78527: PUSH
78528: EMPTY
78529: LIST
78530: LIST
78531: LIST
78532: PUSH
78533: LD_INT 2
78535: PUSH
78536: LD_INT 25
78538: PUSH
78539: LD_INT 2
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: PUSH
78546: LD_INT 25
78548: PUSH
78549: LD_INT 16
78551: PUSH
78552: EMPTY
78553: LIST
78554: LIST
78555: PUSH
78556: EMPTY
78557: LIST
78558: LIST
78559: LIST
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: LIST
78565: LIST
78566: PPUSH
78567: CALL_OW 69
78571: PUSH
78572: LD_VAR 0 8
78576: PPUSH
78577: CALL_OW 313
78581: PPUSH
78582: LD_INT 3
78584: PUSH
78585: LD_INT 60
78587: PUSH
78588: EMPTY
78589: LIST
78590: PUSH
78591: EMPTY
78592: LIST
78593: LIST
78594: PUSH
78595: LD_INT 2
78597: PUSH
78598: LD_INT 25
78600: PUSH
78601: LD_INT 2
78603: PUSH
78604: EMPTY
78605: LIST
78606: LIST
78607: PUSH
78608: LD_INT 25
78610: PUSH
78611: LD_INT 16
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: PUSH
78618: EMPTY
78619: LIST
78620: LIST
78621: LIST
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PPUSH
78627: CALL_OW 72
78631: UNION
78632: ST_TO_ADDR
// if tmp then
78633: LD_VAR 0 4
78637: IFFALSE 78717
// begin tmp := ShrinkArray ( tmp , 3 ) ;
78639: LD_ADDR_VAR 0 4
78643: PUSH
78644: LD_VAR 0 4
78648: PPUSH
78649: LD_INT 3
78651: PPUSH
78652: CALL 58304 0 2
78656: ST_TO_ADDR
// for j in tmp do
78657: LD_ADDR_VAR 0 2
78661: PUSH
78662: LD_VAR 0 4
78666: PUSH
78667: FOR_IN
78668: IFFALSE 78711
// begin if IsInUnit ( j ) then
78670: LD_VAR 0 2
78674: PPUSH
78675: CALL_OW 310
78679: IFFALSE 78690
// ComExit ( j ) ;
78681: LD_VAR 0 2
78685: PPUSH
78686: CALL 58387 0 1
// AddComCollect ( j , x , y ) ;
78690: LD_VAR 0 2
78694: PPUSH
78695: LD_VAR 0 6
78699: PPUSH
78700: LD_VAR 0 7
78704: PPUSH
78705: CALL_OW 177
// end ;
78709: GO 78667
78711: POP
78712: POP
// exit ;
78713: POP
78714: POP
78715: GO 78944
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
78717: LD_ADDR_VAR 0 4
78721: PUSH
78722: LD_INT 22
78724: PUSH
78725: LD_VAR 0 5
78729: PUSH
78730: EMPTY
78731: LIST
78732: LIST
78733: PUSH
78734: LD_INT 91
78736: PUSH
78737: LD_VAR 0 8
78741: PUSH
78742: LD_INT 8
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: LIST
78749: PUSH
78750: LD_INT 2
78752: PUSH
78753: LD_INT 34
78755: PUSH
78756: LD_INT 12
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: LD_INT 34
78765: PUSH
78766: LD_INT 51
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PUSH
78773: LD_INT 34
78775: PUSH
78776: LD_INT 32
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: PUSH
78783: LD_INT 34
78785: PUSH
78786: LD_INT 89
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: PUSH
78800: EMPTY
78801: LIST
78802: LIST
78803: LIST
78804: PPUSH
78805: CALL_OW 69
78809: ST_TO_ADDR
// if tmp then
78810: LD_VAR 0 4
78814: IFFALSE 78940
// begin for j in tmp do
78816: LD_ADDR_VAR 0 2
78820: PUSH
78821: LD_VAR 0 4
78825: PUSH
78826: FOR_IN
78827: IFFALSE 78938
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
78829: LD_VAR 0 2
78833: PPUSH
78834: CALL_OW 262
78838: PUSH
78839: LD_INT 3
78841: EQUAL
78842: PUSH
78843: LD_VAR 0 2
78847: PPUSH
78848: CALL_OW 261
78852: PUSH
78853: LD_INT 20
78855: GREATER
78856: OR
78857: PUSH
78858: LD_VAR 0 2
78862: PPUSH
78863: CALL_OW 314
78867: NOT
78868: AND
78869: PUSH
78870: LD_VAR 0 2
78874: PPUSH
78875: CALL_OW 263
78879: PUSH
78880: LD_INT 1
78882: NONEQUAL
78883: PUSH
78884: LD_VAR 0 2
78888: PPUSH
78889: CALL_OW 311
78893: OR
78894: AND
78895: IFFALSE 78936
// begin ComCollect ( j , x , y ) ;
78897: LD_VAR 0 2
78901: PPUSH
78902: LD_VAR 0 6
78906: PPUSH
78907: LD_VAR 0 7
78911: PPUSH
78912: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
78916: LD_VAR 0 2
78920: PPUSH
78921: LD_VAR 0 8
78925: PPUSH
78926: CALL_OW 172
// exit ;
78930: POP
78931: POP
78932: POP
78933: POP
78934: GO 78944
// end ;
78936: GO 78826
78938: POP
78939: POP
// end ; end ;
78940: GO 78315
78942: POP
78943: POP
// end ; end_of_file
78944: PPOPN 9
78946: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78947: LD_VAR 0 1
78951: PUSH
78952: LD_INT 200
78954: DOUBLE
78955: GREATEREQUAL
78956: IFFALSE 78964
78958: LD_INT 299
78960: DOUBLE
78961: LESSEQUAL
78962: IFTRUE 78966
78964: GO 78998
78966: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78967: LD_VAR 0 1
78971: PPUSH
78972: LD_VAR 0 2
78976: PPUSH
78977: LD_VAR 0 3
78981: PPUSH
78982: LD_VAR 0 4
78986: PPUSH
78987: LD_VAR 0 5
78991: PPUSH
78992: CALL 79486 0 5
78996: GO 79075
78998: LD_INT 300
79000: DOUBLE
79001: GREATEREQUAL
79002: IFFALSE 79010
79004: LD_INT 399
79006: DOUBLE
79007: LESSEQUAL
79008: IFTRUE 79012
79010: GO 79074
79012: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79013: LD_VAR 0 1
79017: PPUSH
79018: LD_VAR 0 2
79022: PPUSH
79023: LD_VAR 0 3
79027: PPUSH
79028: LD_VAR 0 4
79032: PPUSH
79033: LD_VAR 0 5
79037: PPUSH
79038: LD_VAR 0 6
79042: PPUSH
79043: LD_VAR 0 7
79047: PPUSH
79048: LD_VAR 0 8
79052: PPUSH
79053: LD_VAR 0 9
79057: PPUSH
79058: LD_VAR 0 10
79062: PPUSH
79063: LD_VAR 0 11
79067: PPUSH
79068: CALL 75648 0 11
79072: GO 79075
79074: POP
// end ;
79075: PPOPN 11
79077: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79078: LD_VAR 0 1
79082: PPUSH
79083: LD_VAR 0 2
79087: PPUSH
79088: LD_VAR 0 3
79092: PPUSH
79093: LD_VAR 0 4
79097: PPUSH
79098: LD_VAR 0 5
79102: PPUSH
79103: CALL 79222 0 5
// end ; end_of_file
79107: PPOPN 5
79109: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
79110: LD_INT 0
79112: PPUSH
79113: PPUSH
79114: PPUSH
79115: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
79116: LD_VAR 0 1
79120: PPUSH
79121: CALL_OW 264
79125: PUSH
79126: LD_INT 91
79128: EQUAL
79129: IFFALSE 79201
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
79131: LD_INT 68
79133: PPUSH
79134: LD_VAR 0 1
79138: PPUSH
79139: CALL_OW 255
79143: PPUSH
79144: CALL_OW 321
79148: PUSH
79149: LD_INT 2
79151: EQUAL
79152: IFFALSE 79164
// eff := 70 else
79154: LD_ADDR_VAR 0 4
79158: PUSH
79159: LD_INT 70
79161: ST_TO_ADDR
79162: GO 79172
// eff := 30 ;
79164: LD_ADDR_VAR 0 4
79168: PUSH
79169: LD_INT 30
79171: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
79172: LD_VAR 0 1
79176: PPUSH
79177: CALL_OW 250
79181: PPUSH
79182: LD_VAR 0 1
79186: PPUSH
79187: CALL_OW 251
79191: PPUSH
79192: LD_VAR 0 4
79196: PPUSH
79197: CALL_OW 495
// end ; end ;
79201: LD_VAR 0 2
79205: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
79206: LD_INT 0
79208: PPUSH
// end ;
79209: LD_VAR 0 4
79213: RET
// export function SOS_Command ( cmd ) ; begin
79214: LD_INT 0
79216: PPUSH
// end ;
79217: LD_VAR 0 2
79221: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
79222: LD_INT 0
79224: PPUSH
// end ;
79225: LD_VAR 0 6
79229: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
79230: LD_INT 0
79232: PPUSH
79233: PPUSH
// if not vehicle or not factory then
79234: LD_VAR 0 1
79238: NOT
79239: PUSH
79240: LD_VAR 0 2
79244: NOT
79245: OR
79246: IFFALSE 79250
// exit ;
79248: GO 79481
// if factoryWaypoints >= factory then
79250: LD_EXP 104
79254: PUSH
79255: LD_VAR 0 2
79259: GREATEREQUAL
79260: IFFALSE 79481
// if factoryWaypoints [ factory ] then
79262: LD_EXP 104
79266: PUSH
79267: LD_VAR 0 2
79271: ARRAY
79272: IFFALSE 79481
// begin if GetControl ( vehicle ) = control_manual then
79274: LD_VAR 0 1
79278: PPUSH
79279: CALL_OW 263
79283: PUSH
79284: LD_INT 1
79286: EQUAL
79287: IFFALSE 79368
// begin driver := IsDrivenBy ( vehicle ) ;
79289: LD_ADDR_VAR 0 4
79293: PUSH
79294: LD_VAR 0 1
79298: PPUSH
79299: CALL_OW 311
79303: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
79304: LD_VAR 0 4
79308: PPUSH
79309: LD_EXP 104
79313: PUSH
79314: LD_VAR 0 2
79318: ARRAY
79319: PUSH
79320: LD_INT 3
79322: ARRAY
79323: PPUSH
79324: LD_EXP 104
79328: PUSH
79329: LD_VAR 0 2
79333: ARRAY
79334: PUSH
79335: LD_INT 4
79337: ARRAY
79338: PPUSH
79339: CALL_OW 171
// AddComExitVehicle ( driver ) ;
79343: LD_VAR 0 4
79347: PPUSH
79348: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
79352: LD_VAR 0 4
79356: PPUSH
79357: LD_VAR 0 2
79361: PPUSH
79362: CALL_OW 180
// end else
79366: GO 79481
// if GetControl ( vehicle ) = control_remote then
79368: LD_VAR 0 1
79372: PPUSH
79373: CALL_OW 263
79377: PUSH
79378: LD_INT 2
79380: EQUAL
79381: IFFALSE 79442
// begin wait ( 0 0$2 ) ;
79383: LD_INT 70
79385: PPUSH
79386: CALL_OW 67
// if Connect ( vehicle ) then
79390: LD_VAR 0 1
79394: PPUSH
79395: CALL 28606 0 1
79399: IFFALSE 79440
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
79401: LD_VAR 0 1
79405: PPUSH
79406: LD_EXP 104
79410: PUSH
79411: LD_VAR 0 2
79415: ARRAY
79416: PUSH
79417: LD_INT 3
79419: ARRAY
79420: PPUSH
79421: LD_EXP 104
79425: PUSH
79426: LD_VAR 0 2
79430: ARRAY
79431: PUSH
79432: LD_INT 4
79434: ARRAY
79435: PPUSH
79436: CALL_OW 171
// end else
79440: GO 79481
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
79442: LD_VAR 0 1
79446: PPUSH
79447: LD_EXP 104
79451: PUSH
79452: LD_VAR 0 2
79456: ARRAY
79457: PUSH
79458: LD_INT 3
79460: ARRAY
79461: PPUSH
79462: LD_EXP 104
79466: PUSH
79467: LD_VAR 0 2
79471: ARRAY
79472: PUSH
79473: LD_INT 4
79475: ARRAY
79476: PPUSH
79477: CALL_OW 171
// end ; end ;
79481: LD_VAR 0 3
79485: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
79486: LD_INT 0
79488: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
79489: LD_VAR 0 1
79493: PUSH
79494: LD_INT 250
79496: EQUAL
79497: PUSH
79498: LD_VAR 0 2
79502: PPUSH
79503: CALL_OW 264
79507: PUSH
79508: LD_INT 81
79510: EQUAL
79511: AND
79512: IFFALSE 79533
// MinerPlaceMine ( unit , x , y ) ;
79514: LD_VAR 0 2
79518: PPUSH
79519: LD_VAR 0 4
79523: PPUSH
79524: LD_VAR 0 5
79528: PPUSH
79529: CALL 82523 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
79533: LD_VAR 0 1
79537: PUSH
79538: LD_INT 251
79540: EQUAL
79541: PUSH
79542: LD_VAR 0 2
79546: PPUSH
79547: CALL_OW 264
79551: PUSH
79552: LD_INT 81
79554: EQUAL
79555: AND
79556: IFFALSE 79577
// MinerDetonateMine ( unit , x , y ) ;
79558: LD_VAR 0 2
79562: PPUSH
79563: LD_VAR 0 4
79567: PPUSH
79568: LD_VAR 0 5
79572: PPUSH
79573: CALL 82798 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
79577: LD_VAR 0 1
79581: PUSH
79582: LD_INT 252
79584: EQUAL
79585: PUSH
79586: LD_VAR 0 2
79590: PPUSH
79591: CALL_OW 264
79595: PUSH
79596: LD_INT 81
79598: EQUAL
79599: AND
79600: IFFALSE 79621
// MinerCreateMinefield ( unit , x , y ) ;
79602: LD_VAR 0 2
79606: PPUSH
79607: LD_VAR 0 4
79611: PPUSH
79612: LD_VAR 0 5
79616: PPUSH
79617: CALL 83215 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
79621: LD_VAR 0 1
79625: PUSH
79626: LD_INT 253
79628: EQUAL
79629: PUSH
79630: LD_VAR 0 2
79634: PPUSH
79635: CALL_OW 257
79639: PUSH
79640: LD_INT 5
79642: EQUAL
79643: AND
79644: IFFALSE 79665
// ComBinocular ( unit , x , y ) ;
79646: LD_VAR 0 2
79650: PPUSH
79651: LD_VAR 0 4
79655: PPUSH
79656: LD_VAR 0 5
79660: PPUSH
79661: CALL 83584 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
79665: LD_VAR 0 1
79669: PUSH
79670: LD_INT 254
79672: EQUAL
79673: PUSH
79674: LD_VAR 0 2
79678: PPUSH
79679: CALL_OW 264
79683: PUSH
79684: LD_INT 99
79686: EQUAL
79687: AND
79688: PUSH
79689: LD_VAR 0 3
79693: PPUSH
79694: CALL_OW 263
79698: PUSH
79699: LD_INT 3
79701: EQUAL
79702: AND
79703: IFFALSE 79719
// HackDestroyVehicle ( unit , selectedUnit ) ;
79705: LD_VAR 0 2
79709: PPUSH
79710: LD_VAR 0 3
79714: PPUSH
79715: CALL 81887 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
79719: LD_VAR 0 1
79723: PUSH
79724: LD_INT 255
79726: EQUAL
79727: PUSH
79728: LD_VAR 0 2
79732: PPUSH
79733: CALL_OW 264
79737: PUSH
79738: LD_INT 14
79740: PUSH
79741: LD_INT 53
79743: PUSH
79744: EMPTY
79745: LIST
79746: LIST
79747: IN
79748: AND
79749: PUSH
79750: LD_VAR 0 4
79754: PPUSH
79755: LD_VAR 0 5
79759: PPUSH
79760: CALL_OW 488
79764: AND
79765: IFFALSE 79789
// CutTreeXYR ( unit , x , y , 12 ) ;
79767: LD_VAR 0 2
79771: PPUSH
79772: LD_VAR 0 4
79776: PPUSH
79777: LD_VAR 0 5
79781: PPUSH
79782: LD_INT 12
79784: PPUSH
79785: CALL 79884 0 4
// if cmd = 256 then
79789: LD_VAR 0 1
79793: PUSH
79794: LD_INT 256
79796: EQUAL
79797: IFFALSE 79818
// SetFactoryWaypoint ( unit , x , y ) ;
79799: LD_VAR 0 2
79803: PPUSH
79804: LD_VAR 0 4
79808: PPUSH
79809: LD_VAR 0 5
79813: PPUSH
79814: CALL 77636 0 3
// if cmd = 257 then
79818: LD_VAR 0 1
79822: PUSH
79823: LD_INT 257
79825: EQUAL
79826: IFFALSE 79847
// SetWarehouseGatheringPoint ( unit , x , y ) ;
79828: LD_VAR 0 2
79832: PPUSH
79833: LD_VAR 0 4
79837: PPUSH
79838: LD_VAR 0 5
79842: PPUSH
79843: CALL 77998 0 3
// if cmd = 258 then
79847: LD_VAR 0 1
79851: PUSH
79852: LD_INT 258
79854: EQUAL
79855: IFFALSE 79879
// BurnTreeXYR ( unit , x , y , 8 ) ;
79857: LD_VAR 0 2
79861: PPUSH
79862: LD_VAR 0 4
79866: PPUSH
79867: LD_VAR 0 5
79871: PPUSH
79872: LD_INT 8
79874: PPUSH
79875: CALL 80278 0 4
// end ;
79879: LD_VAR 0 6
79883: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79884: LD_INT 0
79886: PPUSH
79887: PPUSH
79888: PPUSH
79889: PPUSH
79890: PPUSH
79891: PPUSH
79892: PPUSH
79893: PPUSH
79894: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
79895: LD_VAR 0 1
79899: PPUSH
79900: CALL_OW 302
79904: NOT
79905: PUSH
79906: LD_VAR 0 2
79910: PPUSH
79911: LD_VAR 0 3
79915: PPUSH
79916: CALL_OW 488
79920: NOT
79921: OR
79922: PUSH
79923: LD_VAR 0 4
79927: NOT
79928: OR
79929: IFFALSE 79933
// exit ;
79931: GO 80273
// list := [ ] ;
79933: LD_ADDR_VAR 0 13
79937: PUSH
79938: EMPTY
79939: ST_TO_ADDR
// if x - r < 0 then
79940: LD_VAR 0 2
79944: PUSH
79945: LD_VAR 0 4
79949: MINUS
79950: PUSH
79951: LD_INT 0
79953: LESS
79954: IFFALSE 79966
// min_x := 0 else
79956: LD_ADDR_VAR 0 7
79960: PUSH
79961: LD_INT 0
79963: ST_TO_ADDR
79964: GO 79982
// min_x := x - r ;
79966: LD_ADDR_VAR 0 7
79970: PUSH
79971: LD_VAR 0 2
79975: PUSH
79976: LD_VAR 0 4
79980: MINUS
79981: ST_TO_ADDR
// if y - r < 0 then
79982: LD_VAR 0 3
79986: PUSH
79987: LD_VAR 0 4
79991: MINUS
79992: PUSH
79993: LD_INT 0
79995: LESS
79996: IFFALSE 80008
// min_y := 0 else
79998: LD_ADDR_VAR 0 8
80002: PUSH
80003: LD_INT 0
80005: ST_TO_ADDR
80006: GO 80024
// min_y := y - r ;
80008: LD_ADDR_VAR 0 8
80012: PUSH
80013: LD_VAR 0 3
80017: PUSH
80018: LD_VAR 0 4
80022: MINUS
80023: ST_TO_ADDR
// max_x := x + r ;
80024: LD_ADDR_VAR 0 9
80028: PUSH
80029: LD_VAR 0 2
80033: PUSH
80034: LD_VAR 0 4
80038: PLUS
80039: ST_TO_ADDR
// max_y := y + r ;
80040: LD_ADDR_VAR 0 10
80044: PUSH
80045: LD_VAR 0 3
80049: PUSH
80050: LD_VAR 0 4
80054: PLUS
80055: ST_TO_ADDR
// for _x = min_x to max_x do
80056: LD_ADDR_VAR 0 11
80060: PUSH
80061: DOUBLE
80062: LD_VAR 0 7
80066: DEC
80067: ST_TO_ADDR
80068: LD_VAR 0 9
80072: PUSH
80073: FOR_TO
80074: IFFALSE 80191
// for _y = min_y to max_y do
80076: LD_ADDR_VAR 0 12
80080: PUSH
80081: DOUBLE
80082: LD_VAR 0 8
80086: DEC
80087: ST_TO_ADDR
80088: LD_VAR 0 10
80092: PUSH
80093: FOR_TO
80094: IFFALSE 80187
// begin if not ValidHex ( _x , _y ) then
80096: LD_VAR 0 11
80100: PPUSH
80101: LD_VAR 0 12
80105: PPUSH
80106: CALL_OW 488
80110: NOT
80111: IFFALSE 80115
// continue ;
80113: GO 80093
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
80115: LD_VAR 0 11
80119: PPUSH
80120: LD_VAR 0 12
80124: PPUSH
80125: CALL_OW 351
80129: PUSH
80130: LD_VAR 0 11
80134: PPUSH
80135: LD_VAR 0 12
80139: PPUSH
80140: CALL_OW 554
80144: AND
80145: IFFALSE 80185
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
80147: LD_ADDR_VAR 0 13
80151: PUSH
80152: LD_VAR 0 13
80156: PPUSH
80157: LD_VAR 0 13
80161: PUSH
80162: LD_INT 1
80164: PLUS
80165: PPUSH
80166: LD_VAR 0 11
80170: PUSH
80171: LD_VAR 0 12
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: PPUSH
80180: CALL_OW 2
80184: ST_TO_ADDR
// end ;
80185: GO 80093
80187: POP
80188: POP
80189: GO 80073
80191: POP
80192: POP
// if not list then
80193: LD_VAR 0 13
80197: NOT
80198: IFFALSE 80202
// exit ;
80200: GO 80273
// for i in list do
80202: LD_ADDR_VAR 0 6
80206: PUSH
80207: LD_VAR 0 13
80211: PUSH
80212: FOR_IN
80213: IFFALSE 80271
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
80215: LD_VAR 0 1
80219: PPUSH
80220: LD_STRING M
80222: PUSH
80223: LD_VAR 0 6
80227: PUSH
80228: LD_INT 1
80230: ARRAY
80231: PUSH
80232: LD_VAR 0 6
80236: PUSH
80237: LD_INT 2
80239: ARRAY
80240: PUSH
80241: LD_INT 0
80243: PUSH
80244: LD_INT 0
80246: PUSH
80247: LD_INT 0
80249: PUSH
80250: LD_INT 0
80252: PUSH
80253: EMPTY
80254: LIST
80255: LIST
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: PUSH
80262: EMPTY
80263: LIST
80264: PPUSH
80265: CALL_OW 447
80269: GO 80212
80271: POP
80272: POP
// end ;
80273: LD_VAR 0 5
80277: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
80278: LD_INT 0
80280: PPUSH
80281: PPUSH
80282: PPUSH
80283: PPUSH
80284: PPUSH
80285: PPUSH
80286: PPUSH
80287: PPUSH
80288: PPUSH
80289: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
80290: LD_VAR 0 1
80294: PPUSH
80295: CALL_OW 302
80299: NOT
80300: PUSH
80301: LD_VAR 0 2
80305: PPUSH
80306: LD_VAR 0 3
80310: PPUSH
80311: CALL_OW 488
80315: NOT
80316: OR
80317: PUSH
80318: LD_VAR 0 4
80322: NOT
80323: OR
80324: IFFALSE 80328
// exit ;
80326: GO 80841
// list := [ ] ;
80328: LD_ADDR_VAR 0 13
80332: PUSH
80333: EMPTY
80334: ST_TO_ADDR
// if x - r < 0 then
80335: LD_VAR 0 2
80339: PUSH
80340: LD_VAR 0 4
80344: MINUS
80345: PUSH
80346: LD_INT 0
80348: LESS
80349: IFFALSE 80361
// min_x := 0 else
80351: LD_ADDR_VAR 0 7
80355: PUSH
80356: LD_INT 0
80358: ST_TO_ADDR
80359: GO 80377
// min_x := x - r ;
80361: LD_ADDR_VAR 0 7
80365: PUSH
80366: LD_VAR 0 2
80370: PUSH
80371: LD_VAR 0 4
80375: MINUS
80376: ST_TO_ADDR
// if y - r < 0 then
80377: LD_VAR 0 3
80381: PUSH
80382: LD_VAR 0 4
80386: MINUS
80387: PUSH
80388: LD_INT 0
80390: LESS
80391: IFFALSE 80403
// min_y := 0 else
80393: LD_ADDR_VAR 0 8
80397: PUSH
80398: LD_INT 0
80400: ST_TO_ADDR
80401: GO 80419
// min_y := y - r ;
80403: LD_ADDR_VAR 0 8
80407: PUSH
80408: LD_VAR 0 3
80412: PUSH
80413: LD_VAR 0 4
80417: MINUS
80418: ST_TO_ADDR
// max_x := x + r ;
80419: LD_ADDR_VAR 0 9
80423: PUSH
80424: LD_VAR 0 2
80428: PUSH
80429: LD_VAR 0 4
80433: PLUS
80434: ST_TO_ADDR
// max_y := y + r ;
80435: LD_ADDR_VAR 0 10
80439: PUSH
80440: LD_VAR 0 3
80444: PUSH
80445: LD_VAR 0 4
80449: PLUS
80450: ST_TO_ADDR
// for _x = min_x to max_x do
80451: LD_ADDR_VAR 0 11
80455: PUSH
80456: DOUBLE
80457: LD_VAR 0 7
80461: DEC
80462: ST_TO_ADDR
80463: LD_VAR 0 9
80467: PUSH
80468: FOR_TO
80469: IFFALSE 80586
// for _y = min_y to max_y do
80471: LD_ADDR_VAR 0 12
80475: PUSH
80476: DOUBLE
80477: LD_VAR 0 8
80481: DEC
80482: ST_TO_ADDR
80483: LD_VAR 0 10
80487: PUSH
80488: FOR_TO
80489: IFFALSE 80582
// begin if not ValidHex ( _x , _y ) then
80491: LD_VAR 0 11
80495: PPUSH
80496: LD_VAR 0 12
80500: PPUSH
80501: CALL_OW 488
80505: NOT
80506: IFFALSE 80510
// continue ;
80508: GO 80488
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
80510: LD_VAR 0 11
80514: PPUSH
80515: LD_VAR 0 12
80519: PPUSH
80520: CALL_OW 351
80524: PUSH
80525: LD_VAR 0 11
80529: PPUSH
80530: LD_VAR 0 12
80534: PPUSH
80535: CALL_OW 554
80539: AND
80540: IFFALSE 80580
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
80542: LD_ADDR_VAR 0 13
80546: PUSH
80547: LD_VAR 0 13
80551: PPUSH
80552: LD_VAR 0 13
80556: PUSH
80557: LD_INT 1
80559: PLUS
80560: PPUSH
80561: LD_VAR 0 11
80565: PUSH
80566: LD_VAR 0 12
80570: PUSH
80571: EMPTY
80572: LIST
80573: LIST
80574: PPUSH
80575: CALL_OW 2
80579: ST_TO_ADDR
// end ;
80580: GO 80488
80582: POP
80583: POP
80584: GO 80468
80586: POP
80587: POP
// if not list then
80588: LD_VAR 0 13
80592: NOT
80593: IFFALSE 80597
// exit ;
80595: GO 80841
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
80597: LD_ADDR_VAR 0 13
80601: PUSH
80602: LD_VAR 0 1
80606: PPUSH
80607: LD_VAR 0 13
80611: PPUSH
80612: LD_INT 1
80614: PPUSH
80615: LD_INT 1
80617: PPUSH
80618: CALL 25748 0 4
80622: ST_TO_ADDR
// ComStop ( flame ) ;
80623: LD_VAR 0 1
80627: PPUSH
80628: CALL_OW 141
// for i in list do
80632: LD_ADDR_VAR 0 6
80636: PUSH
80637: LD_VAR 0 13
80641: PUSH
80642: FOR_IN
80643: IFFALSE 80674
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
80645: LD_VAR 0 1
80649: PPUSH
80650: LD_VAR 0 6
80654: PUSH
80655: LD_INT 1
80657: ARRAY
80658: PPUSH
80659: LD_VAR 0 6
80663: PUSH
80664: LD_INT 2
80666: ARRAY
80667: PPUSH
80668: CALL_OW 176
80672: GO 80642
80674: POP
80675: POP
// repeat wait ( 0 0$1 ) ;
80676: LD_INT 35
80678: PPUSH
80679: CALL_OW 67
// task := GetTaskList ( flame ) ;
80683: LD_ADDR_VAR 0 14
80687: PUSH
80688: LD_VAR 0 1
80692: PPUSH
80693: CALL_OW 437
80697: ST_TO_ADDR
// if not task then
80698: LD_VAR 0 14
80702: NOT
80703: IFFALSE 80707
// exit ;
80705: GO 80841
// if task [ 1 ] [ 1 ] <> | then
80707: LD_VAR 0 14
80711: PUSH
80712: LD_INT 1
80714: ARRAY
80715: PUSH
80716: LD_INT 1
80718: ARRAY
80719: PUSH
80720: LD_STRING |
80722: NONEQUAL
80723: IFFALSE 80727
// exit ;
80725: GO 80841
// _x := task [ 1 ] [ 2 ] ;
80727: LD_ADDR_VAR 0 11
80731: PUSH
80732: LD_VAR 0 14
80736: PUSH
80737: LD_INT 1
80739: ARRAY
80740: PUSH
80741: LD_INT 2
80743: ARRAY
80744: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
80745: LD_ADDR_VAR 0 12
80749: PUSH
80750: LD_VAR 0 14
80754: PUSH
80755: LD_INT 1
80757: ARRAY
80758: PUSH
80759: LD_INT 3
80761: ARRAY
80762: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
80763: LD_VAR 0 11
80767: PPUSH
80768: LD_VAR 0 12
80772: PPUSH
80773: CALL_OW 351
80777: NOT
80778: PUSH
80779: LD_VAR 0 11
80783: PPUSH
80784: LD_VAR 0 12
80788: PPUSH
80789: CALL_OW 554
80793: NOT
80794: OR
80795: IFFALSE 80829
// begin task := Delete ( task , 1 ) ;
80797: LD_ADDR_VAR 0 14
80801: PUSH
80802: LD_VAR 0 14
80806: PPUSH
80807: LD_INT 1
80809: PPUSH
80810: CALL_OW 3
80814: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
80815: LD_VAR 0 1
80819: PPUSH
80820: LD_VAR 0 14
80824: PPUSH
80825: CALL_OW 446
// end ; until not HasTask ( flame ) ;
80829: LD_VAR 0 1
80833: PPUSH
80834: CALL_OW 314
80838: NOT
80839: IFFALSE 80676
// end ;
80841: LD_VAR 0 5
80845: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
80846: LD_EXP 107
80850: NOT
80851: IFFALSE 80901
80853: GO 80855
80855: DISABLE
// begin initHack := true ;
80856: LD_ADDR_EXP 107
80860: PUSH
80861: LD_INT 1
80863: ST_TO_ADDR
// hackTanks := [ ] ;
80864: LD_ADDR_EXP 108
80868: PUSH
80869: EMPTY
80870: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
80871: LD_ADDR_EXP 109
80875: PUSH
80876: EMPTY
80877: ST_TO_ADDR
// hackLimit := 3 ;
80878: LD_ADDR_EXP 110
80882: PUSH
80883: LD_INT 3
80885: ST_TO_ADDR
// hackDist := 12 ;
80886: LD_ADDR_EXP 111
80890: PUSH
80891: LD_INT 12
80893: ST_TO_ADDR
// hackCounter := [ ] ;
80894: LD_ADDR_EXP 112
80898: PUSH
80899: EMPTY
80900: ST_TO_ADDR
// end ;
80901: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
80902: LD_EXP 107
80906: PUSH
80907: LD_INT 34
80909: PUSH
80910: LD_INT 99
80912: PUSH
80913: EMPTY
80914: LIST
80915: LIST
80916: PPUSH
80917: CALL_OW 69
80921: AND
80922: IFFALSE 81175
80924: GO 80926
80926: DISABLE
80927: LD_INT 0
80929: PPUSH
80930: PPUSH
// begin enable ;
80931: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
80932: LD_ADDR_VAR 0 1
80936: PUSH
80937: LD_INT 34
80939: PUSH
80940: LD_INT 99
80942: PUSH
80943: EMPTY
80944: LIST
80945: LIST
80946: PPUSH
80947: CALL_OW 69
80951: PUSH
80952: FOR_IN
80953: IFFALSE 81173
// begin if not i in hackTanks then
80955: LD_VAR 0 1
80959: PUSH
80960: LD_EXP 108
80964: IN
80965: NOT
80966: IFFALSE 81049
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
80968: LD_ADDR_EXP 108
80972: PUSH
80973: LD_EXP 108
80977: PPUSH
80978: LD_EXP 108
80982: PUSH
80983: LD_INT 1
80985: PLUS
80986: PPUSH
80987: LD_VAR 0 1
80991: PPUSH
80992: CALL_OW 1
80996: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
80997: LD_ADDR_EXP 109
81001: PUSH
81002: LD_EXP 109
81006: PPUSH
81007: LD_EXP 109
81011: PUSH
81012: LD_INT 1
81014: PLUS
81015: PPUSH
81016: EMPTY
81017: PPUSH
81018: CALL_OW 1
81022: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
81023: LD_ADDR_EXP 112
81027: PUSH
81028: LD_EXP 112
81032: PPUSH
81033: LD_EXP 112
81037: PUSH
81038: LD_INT 1
81040: PLUS
81041: PPUSH
81042: EMPTY
81043: PPUSH
81044: CALL_OW 1
81048: ST_TO_ADDR
// end ; if not IsOk ( i ) then
81049: LD_VAR 0 1
81053: PPUSH
81054: CALL_OW 302
81058: NOT
81059: IFFALSE 81072
// begin HackUnlinkAll ( i ) ;
81061: LD_VAR 0 1
81065: PPUSH
81066: CALL 81178 0 1
// continue ;
81070: GO 80952
// end ; HackCheckCapturedStatus ( i ) ;
81072: LD_VAR 0 1
81076: PPUSH
81077: CALL 81621 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
81081: LD_ADDR_VAR 0 2
81085: PUSH
81086: LD_INT 81
81088: PUSH
81089: LD_VAR 0 1
81093: PPUSH
81094: CALL_OW 255
81098: PUSH
81099: EMPTY
81100: LIST
81101: LIST
81102: PUSH
81103: LD_INT 33
81105: PUSH
81106: LD_INT 3
81108: PUSH
81109: EMPTY
81110: LIST
81111: LIST
81112: PUSH
81113: LD_INT 91
81115: PUSH
81116: LD_VAR 0 1
81120: PUSH
81121: LD_EXP 111
81125: PUSH
81126: EMPTY
81127: LIST
81128: LIST
81129: LIST
81130: PUSH
81131: LD_INT 50
81133: PUSH
81134: EMPTY
81135: LIST
81136: PUSH
81137: EMPTY
81138: LIST
81139: LIST
81140: LIST
81141: LIST
81142: PPUSH
81143: CALL_OW 69
81147: ST_TO_ADDR
// if not tmp then
81148: LD_VAR 0 2
81152: NOT
81153: IFFALSE 81157
// continue ;
81155: GO 80952
// HackLink ( i , tmp ) ;
81157: LD_VAR 0 1
81161: PPUSH
81162: LD_VAR 0 2
81166: PPUSH
81167: CALL 81314 0 2
// end ;
81171: GO 80952
81173: POP
81174: POP
// end ;
81175: PPOPN 2
81177: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
81178: LD_INT 0
81180: PPUSH
81181: PPUSH
81182: PPUSH
// if not hack in hackTanks then
81183: LD_VAR 0 1
81187: PUSH
81188: LD_EXP 108
81192: IN
81193: NOT
81194: IFFALSE 81198
// exit ;
81196: GO 81309
// index := GetElementIndex ( hackTanks , hack ) ;
81198: LD_ADDR_VAR 0 4
81202: PUSH
81203: LD_EXP 108
81207: PPUSH
81208: LD_VAR 0 1
81212: PPUSH
81213: CALL 25045 0 2
81217: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
81218: LD_EXP 109
81222: PUSH
81223: LD_VAR 0 4
81227: ARRAY
81228: IFFALSE 81309
// begin for i in hackTanksCaptured [ index ] do
81230: LD_ADDR_VAR 0 3
81234: PUSH
81235: LD_EXP 109
81239: PUSH
81240: LD_VAR 0 4
81244: ARRAY
81245: PUSH
81246: FOR_IN
81247: IFFALSE 81273
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
81249: LD_VAR 0 3
81253: PUSH
81254: LD_INT 1
81256: ARRAY
81257: PPUSH
81258: LD_VAR 0 3
81262: PUSH
81263: LD_INT 2
81265: ARRAY
81266: PPUSH
81267: CALL_OW 235
81271: GO 81246
81273: POP
81274: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
81275: LD_ADDR_EXP 109
81279: PUSH
81280: LD_EXP 109
81284: PPUSH
81285: LD_VAR 0 4
81289: PPUSH
81290: EMPTY
81291: PPUSH
81292: CALL_OW 1
81296: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
81297: LD_VAR 0 1
81301: PPUSH
81302: LD_INT 0
81304: PPUSH
81305: CALL_OW 505
// end ; end ;
81309: LD_VAR 0 2
81313: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
81314: LD_INT 0
81316: PPUSH
81317: PPUSH
81318: PPUSH
// if not hack in hackTanks or not vehicles then
81319: LD_VAR 0 1
81323: PUSH
81324: LD_EXP 108
81328: IN
81329: NOT
81330: PUSH
81331: LD_VAR 0 2
81335: NOT
81336: OR
81337: IFFALSE 81341
// exit ;
81339: GO 81616
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
81341: LD_ADDR_VAR 0 2
81345: PUSH
81346: LD_VAR 0 1
81350: PPUSH
81351: LD_VAR 0 2
81355: PPUSH
81356: LD_INT 1
81358: PPUSH
81359: LD_INT 1
81361: PPUSH
81362: CALL 25695 0 4
81366: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
81367: LD_ADDR_VAR 0 5
81371: PUSH
81372: LD_EXP 108
81376: PPUSH
81377: LD_VAR 0 1
81381: PPUSH
81382: CALL 25045 0 2
81386: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
81387: LD_EXP 109
81391: PUSH
81392: LD_VAR 0 5
81396: ARRAY
81397: PUSH
81398: LD_EXP 110
81402: LESS
81403: IFFALSE 81592
// begin for i := 1 to vehicles do
81405: LD_ADDR_VAR 0 4
81409: PUSH
81410: DOUBLE
81411: LD_INT 1
81413: DEC
81414: ST_TO_ADDR
81415: LD_VAR 0 2
81419: PUSH
81420: FOR_TO
81421: IFFALSE 81590
// begin if hackTanksCaptured [ index ] = hackLimit then
81423: LD_EXP 109
81427: PUSH
81428: LD_VAR 0 5
81432: ARRAY
81433: PUSH
81434: LD_EXP 110
81438: EQUAL
81439: IFFALSE 81443
// break ;
81441: GO 81590
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
81443: LD_ADDR_EXP 112
81447: PUSH
81448: LD_EXP 112
81452: PPUSH
81453: LD_VAR 0 5
81457: PPUSH
81458: LD_EXP 112
81462: PUSH
81463: LD_VAR 0 5
81467: ARRAY
81468: PUSH
81469: LD_INT 1
81471: PLUS
81472: PPUSH
81473: CALL_OW 1
81477: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
81478: LD_ADDR_EXP 109
81482: PUSH
81483: LD_EXP 109
81487: PPUSH
81488: LD_VAR 0 5
81492: PUSH
81493: LD_EXP 109
81497: PUSH
81498: LD_VAR 0 5
81502: ARRAY
81503: PUSH
81504: LD_INT 1
81506: PLUS
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: PPUSH
81512: LD_VAR 0 2
81516: PUSH
81517: LD_VAR 0 4
81521: ARRAY
81522: PUSH
81523: LD_VAR 0 2
81527: PUSH
81528: LD_VAR 0 4
81532: ARRAY
81533: PPUSH
81534: CALL_OW 255
81538: PUSH
81539: EMPTY
81540: LIST
81541: LIST
81542: PPUSH
81543: CALL 25260 0 3
81547: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
81548: LD_VAR 0 2
81552: PUSH
81553: LD_VAR 0 4
81557: ARRAY
81558: PPUSH
81559: LD_VAR 0 1
81563: PPUSH
81564: CALL_OW 255
81568: PPUSH
81569: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
81573: LD_VAR 0 2
81577: PUSH
81578: LD_VAR 0 4
81582: ARRAY
81583: PPUSH
81584: CALL_OW 141
// end ;
81588: GO 81420
81590: POP
81591: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
81592: LD_VAR 0 1
81596: PPUSH
81597: LD_EXP 109
81601: PUSH
81602: LD_VAR 0 5
81606: ARRAY
81607: PUSH
81608: LD_INT 0
81610: PLUS
81611: PPUSH
81612: CALL_OW 505
// end ;
81616: LD_VAR 0 3
81620: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
81621: LD_INT 0
81623: PPUSH
81624: PPUSH
81625: PPUSH
81626: PPUSH
// if not hack in hackTanks then
81627: LD_VAR 0 1
81631: PUSH
81632: LD_EXP 108
81636: IN
81637: NOT
81638: IFFALSE 81642
// exit ;
81640: GO 81882
// index := GetElementIndex ( hackTanks , hack ) ;
81642: LD_ADDR_VAR 0 4
81646: PUSH
81647: LD_EXP 108
81651: PPUSH
81652: LD_VAR 0 1
81656: PPUSH
81657: CALL 25045 0 2
81661: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
81662: LD_ADDR_VAR 0 3
81666: PUSH
81667: DOUBLE
81668: LD_EXP 109
81672: PUSH
81673: LD_VAR 0 4
81677: ARRAY
81678: INC
81679: ST_TO_ADDR
81680: LD_INT 1
81682: PUSH
81683: FOR_DOWNTO
81684: IFFALSE 81856
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
81686: LD_ADDR_VAR 0 5
81690: PUSH
81691: LD_EXP 109
81695: PUSH
81696: LD_VAR 0 4
81700: ARRAY
81701: PUSH
81702: LD_VAR 0 3
81706: ARRAY
81707: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
81708: LD_VAR 0 5
81712: PUSH
81713: LD_INT 1
81715: ARRAY
81716: PPUSH
81717: CALL_OW 302
81721: NOT
81722: PUSH
81723: LD_VAR 0 5
81727: PUSH
81728: LD_INT 1
81730: ARRAY
81731: PPUSH
81732: CALL_OW 255
81736: PUSH
81737: LD_VAR 0 1
81741: PPUSH
81742: CALL_OW 255
81746: NONEQUAL
81747: OR
81748: IFFALSE 81854
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
81750: LD_VAR 0 5
81754: PUSH
81755: LD_INT 1
81757: ARRAY
81758: PPUSH
81759: CALL_OW 305
81763: PUSH
81764: LD_VAR 0 5
81768: PUSH
81769: LD_INT 1
81771: ARRAY
81772: PPUSH
81773: CALL_OW 255
81777: PUSH
81778: LD_VAR 0 1
81782: PPUSH
81783: CALL_OW 255
81787: EQUAL
81788: AND
81789: IFFALSE 81813
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
81791: LD_VAR 0 5
81795: PUSH
81796: LD_INT 1
81798: ARRAY
81799: PPUSH
81800: LD_VAR 0 5
81804: PUSH
81805: LD_INT 2
81807: ARRAY
81808: PPUSH
81809: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
81813: LD_ADDR_EXP 109
81817: PUSH
81818: LD_EXP 109
81822: PPUSH
81823: LD_VAR 0 4
81827: PPUSH
81828: LD_EXP 109
81832: PUSH
81833: LD_VAR 0 4
81837: ARRAY
81838: PPUSH
81839: LD_VAR 0 3
81843: PPUSH
81844: CALL_OW 3
81848: PPUSH
81849: CALL_OW 1
81853: ST_TO_ADDR
// end ; end ;
81854: GO 81683
81856: POP
81857: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
81858: LD_VAR 0 1
81862: PPUSH
81863: LD_EXP 109
81867: PUSH
81868: LD_VAR 0 4
81872: ARRAY
81873: PUSH
81874: LD_INT 0
81876: PLUS
81877: PPUSH
81878: CALL_OW 505
// end ;
81882: LD_VAR 0 2
81886: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
81887: LD_INT 0
81889: PPUSH
81890: PPUSH
81891: PPUSH
81892: PPUSH
// if not hack in hackTanks then
81893: LD_VAR 0 1
81897: PUSH
81898: LD_EXP 108
81902: IN
81903: NOT
81904: IFFALSE 81908
// exit ;
81906: GO 81993
// index := GetElementIndex ( hackTanks , hack ) ;
81908: LD_ADDR_VAR 0 5
81912: PUSH
81913: LD_EXP 108
81917: PPUSH
81918: LD_VAR 0 1
81922: PPUSH
81923: CALL 25045 0 2
81927: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
81928: LD_ADDR_VAR 0 4
81932: PUSH
81933: DOUBLE
81934: LD_INT 1
81936: DEC
81937: ST_TO_ADDR
81938: LD_EXP 109
81942: PUSH
81943: LD_VAR 0 5
81947: ARRAY
81948: PUSH
81949: FOR_TO
81950: IFFALSE 81991
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
81952: LD_EXP 109
81956: PUSH
81957: LD_VAR 0 5
81961: ARRAY
81962: PUSH
81963: LD_VAR 0 4
81967: ARRAY
81968: PUSH
81969: LD_INT 1
81971: ARRAY
81972: PUSH
81973: LD_VAR 0 2
81977: EQUAL
81978: IFFALSE 81989
// KillUnit ( vehicle ) ;
81980: LD_VAR 0 2
81984: PPUSH
81985: CALL_OW 66
81989: GO 81949
81991: POP
81992: POP
// end ;
81993: LD_VAR 0 3
81997: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
81998: LD_EXP 113
82002: NOT
82003: IFFALSE 82038
82005: GO 82007
82007: DISABLE
// begin initMiner := true ;
82008: LD_ADDR_EXP 113
82012: PUSH
82013: LD_INT 1
82015: ST_TO_ADDR
// minersList := [ ] ;
82016: LD_ADDR_EXP 114
82020: PUSH
82021: EMPTY
82022: ST_TO_ADDR
// minerMinesList := [ ] ;
82023: LD_ADDR_EXP 115
82027: PUSH
82028: EMPTY
82029: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
82030: LD_ADDR_EXP 116
82034: PUSH
82035: LD_INT 5
82037: ST_TO_ADDR
// end ;
82038: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
82039: LD_EXP 113
82043: PUSH
82044: LD_INT 34
82046: PUSH
82047: LD_INT 81
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: PPUSH
82054: CALL_OW 69
82058: AND
82059: IFFALSE 82520
82061: GO 82063
82063: DISABLE
82064: LD_INT 0
82066: PPUSH
82067: PPUSH
82068: PPUSH
82069: PPUSH
// begin enable ;
82070: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
82071: LD_ADDR_VAR 0 1
82075: PUSH
82076: LD_INT 34
82078: PUSH
82079: LD_INT 81
82081: PUSH
82082: EMPTY
82083: LIST
82084: LIST
82085: PPUSH
82086: CALL_OW 69
82090: PUSH
82091: FOR_IN
82092: IFFALSE 82164
// begin if not i in minersList then
82094: LD_VAR 0 1
82098: PUSH
82099: LD_EXP 114
82103: IN
82104: NOT
82105: IFFALSE 82162
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
82107: LD_ADDR_EXP 114
82111: PUSH
82112: LD_EXP 114
82116: PPUSH
82117: LD_EXP 114
82121: PUSH
82122: LD_INT 1
82124: PLUS
82125: PPUSH
82126: LD_VAR 0 1
82130: PPUSH
82131: CALL_OW 1
82135: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
82136: LD_ADDR_EXP 115
82140: PUSH
82141: LD_EXP 115
82145: PPUSH
82146: LD_EXP 115
82150: PUSH
82151: LD_INT 1
82153: PLUS
82154: PPUSH
82155: EMPTY
82156: PPUSH
82157: CALL_OW 1
82161: ST_TO_ADDR
// end end ;
82162: GO 82091
82164: POP
82165: POP
// for i := minerMinesList downto 1 do
82166: LD_ADDR_VAR 0 1
82170: PUSH
82171: DOUBLE
82172: LD_EXP 115
82176: INC
82177: ST_TO_ADDR
82178: LD_INT 1
82180: PUSH
82181: FOR_DOWNTO
82182: IFFALSE 82518
// begin if IsLive ( minersList [ i ] ) then
82184: LD_EXP 114
82188: PUSH
82189: LD_VAR 0 1
82193: ARRAY
82194: PPUSH
82195: CALL_OW 300
82199: IFFALSE 82227
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
82201: LD_EXP 114
82205: PUSH
82206: LD_VAR 0 1
82210: ARRAY
82211: PPUSH
82212: LD_EXP 115
82216: PUSH
82217: LD_VAR 0 1
82221: ARRAY
82222: PPUSH
82223: CALL_OW 505
// if not minerMinesList [ i ] then
82227: LD_EXP 115
82231: PUSH
82232: LD_VAR 0 1
82236: ARRAY
82237: NOT
82238: IFFALSE 82242
// continue ;
82240: GO 82181
// for j := minerMinesList [ i ] downto 1 do
82242: LD_ADDR_VAR 0 2
82246: PUSH
82247: DOUBLE
82248: LD_EXP 115
82252: PUSH
82253: LD_VAR 0 1
82257: ARRAY
82258: INC
82259: ST_TO_ADDR
82260: LD_INT 1
82262: PUSH
82263: FOR_DOWNTO
82264: IFFALSE 82514
// begin side := GetSide ( minersList [ i ] ) ;
82266: LD_ADDR_VAR 0 3
82270: PUSH
82271: LD_EXP 114
82275: PUSH
82276: LD_VAR 0 1
82280: ARRAY
82281: PPUSH
82282: CALL_OW 255
82286: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
82287: LD_ADDR_VAR 0 4
82291: PUSH
82292: LD_EXP 115
82296: PUSH
82297: LD_VAR 0 1
82301: ARRAY
82302: PUSH
82303: LD_VAR 0 2
82307: ARRAY
82308: PUSH
82309: LD_INT 1
82311: ARRAY
82312: PPUSH
82313: LD_EXP 115
82317: PUSH
82318: LD_VAR 0 1
82322: ARRAY
82323: PUSH
82324: LD_VAR 0 2
82328: ARRAY
82329: PUSH
82330: LD_INT 2
82332: ARRAY
82333: PPUSH
82334: CALL_OW 428
82338: ST_TO_ADDR
// if not tmp then
82339: LD_VAR 0 4
82343: NOT
82344: IFFALSE 82348
// continue ;
82346: GO 82263
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
82348: LD_VAR 0 4
82352: PUSH
82353: LD_INT 81
82355: PUSH
82356: LD_VAR 0 3
82360: PUSH
82361: EMPTY
82362: LIST
82363: LIST
82364: PPUSH
82365: CALL_OW 69
82369: IN
82370: PUSH
82371: LD_EXP 115
82375: PUSH
82376: LD_VAR 0 1
82380: ARRAY
82381: PUSH
82382: LD_VAR 0 2
82386: ARRAY
82387: PUSH
82388: LD_INT 1
82390: ARRAY
82391: PPUSH
82392: LD_EXP 115
82396: PUSH
82397: LD_VAR 0 1
82401: ARRAY
82402: PUSH
82403: LD_VAR 0 2
82407: ARRAY
82408: PUSH
82409: LD_INT 2
82411: ARRAY
82412: PPUSH
82413: CALL_OW 458
82417: AND
82418: IFFALSE 82512
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
82420: LD_EXP 115
82424: PUSH
82425: LD_VAR 0 1
82429: ARRAY
82430: PUSH
82431: LD_VAR 0 2
82435: ARRAY
82436: PUSH
82437: LD_INT 1
82439: ARRAY
82440: PPUSH
82441: LD_EXP 115
82445: PUSH
82446: LD_VAR 0 1
82450: ARRAY
82451: PUSH
82452: LD_VAR 0 2
82456: ARRAY
82457: PUSH
82458: LD_INT 2
82460: ARRAY
82461: PPUSH
82462: LD_VAR 0 3
82466: PPUSH
82467: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
82471: LD_ADDR_EXP 115
82475: PUSH
82476: LD_EXP 115
82480: PPUSH
82481: LD_VAR 0 1
82485: PPUSH
82486: LD_EXP 115
82490: PUSH
82491: LD_VAR 0 1
82495: ARRAY
82496: PPUSH
82497: LD_VAR 0 2
82501: PPUSH
82502: CALL_OW 3
82506: PPUSH
82507: CALL_OW 1
82511: ST_TO_ADDR
// end ; end ;
82512: GO 82263
82514: POP
82515: POP
// end ;
82516: GO 82181
82518: POP
82519: POP
// end ;
82520: PPOPN 4
82522: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
82523: LD_INT 0
82525: PPUSH
82526: PPUSH
// result := false ;
82527: LD_ADDR_VAR 0 4
82531: PUSH
82532: LD_INT 0
82534: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
82535: LD_VAR 0 1
82539: PPUSH
82540: CALL_OW 264
82544: PUSH
82545: LD_INT 81
82547: EQUAL
82548: NOT
82549: IFFALSE 82553
// exit ;
82551: GO 82793
// index := GetElementIndex ( minersList , unit ) ;
82553: LD_ADDR_VAR 0 5
82557: PUSH
82558: LD_EXP 114
82562: PPUSH
82563: LD_VAR 0 1
82567: PPUSH
82568: CALL 25045 0 2
82572: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
82573: LD_EXP 115
82577: PUSH
82578: LD_VAR 0 5
82582: ARRAY
82583: PUSH
82584: LD_EXP 116
82588: GREATEREQUAL
82589: IFFALSE 82593
// exit ;
82591: GO 82793
// ComMoveXY ( unit , x , y ) ;
82593: LD_VAR 0 1
82597: PPUSH
82598: LD_VAR 0 2
82602: PPUSH
82603: LD_VAR 0 3
82607: PPUSH
82608: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82612: LD_INT 35
82614: PPUSH
82615: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
82619: LD_VAR 0 1
82623: PPUSH
82624: LD_VAR 0 2
82628: PPUSH
82629: LD_VAR 0 3
82633: PPUSH
82634: CALL 56786 0 3
82638: NOT
82639: PUSH
82640: LD_VAR 0 1
82644: PPUSH
82645: CALL_OW 314
82649: AND
82650: IFFALSE 82654
// exit ;
82652: GO 82793
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
82654: LD_VAR 0 2
82658: PPUSH
82659: LD_VAR 0 3
82663: PPUSH
82664: CALL_OW 428
82668: PUSH
82669: LD_VAR 0 1
82673: EQUAL
82674: PUSH
82675: LD_VAR 0 1
82679: PPUSH
82680: CALL_OW 314
82684: NOT
82685: AND
82686: IFFALSE 82612
// PlaySoundXY ( x , y , PlantMine ) ;
82688: LD_VAR 0 2
82692: PPUSH
82693: LD_VAR 0 3
82697: PPUSH
82698: LD_STRING PlantMine
82700: PPUSH
82701: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
82705: LD_VAR 0 2
82709: PPUSH
82710: LD_VAR 0 3
82714: PPUSH
82715: LD_VAR 0 1
82719: PPUSH
82720: CALL_OW 255
82724: PPUSH
82725: LD_INT 0
82727: PPUSH
82728: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
82732: LD_ADDR_EXP 115
82736: PUSH
82737: LD_EXP 115
82741: PPUSH
82742: LD_VAR 0 5
82746: PUSH
82747: LD_EXP 115
82751: PUSH
82752: LD_VAR 0 5
82756: ARRAY
82757: PUSH
82758: LD_INT 1
82760: PLUS
82761: PUSH
82762: EMPTY
82763: LIST
82764: LIST
82765: PPUSH
82766: LD_VAR 0 2
82770: PUSH
82771: LD_VAR 0 3
82775: PUSH
82776: EMPTY
82777: LIST
82778: LIST
82779: PPUSH
82780: CALL 25260 0 3
82784: ST_TO_ADDR
// result := true ;
82785: LD_ADDR_VAR 0 4
82789: PUSH
82790: LD_INT 1
82792: ST_TO_ADDR
// end ;
82793: LD_VAR 0 4
82797: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
82798: LD_INT 0
82800: PPUSH
82801: PPUSH
82802: PPUSH
// if not unit in minersList then
82803: LD_VAR 0 1
82807: PUSH
82808: LD_EXP 114
82812: IN
82813: NOT
82814: IFFALSE 82818
// exit ;
82816: GO 83210
// index := GetElementIndex ( minersList , unit ) ;
82818: LD_ADDR_VAR 0 6
82822: PUSH
82823: LD_EXP 114
82827: PPUSH
82828: LD_VAR 0 1
82832: PPUSH
82833: CALL 25045 0 2
82837: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
82838: LD_ADDR_VAR 0 5
82842: PUSH
82843: DOUBLE
82844: LD_EXP 115
82848: PUSH
82849: LD_VAR 0 6
82853: ARRAY
82854: INC
82855: ST_TO_ADDR
82856: LD_INT 1
82858: PUSH
82859: FOR_DOWNTO
82860: IFFALSE 83021
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
82862: LD_EXP 115
82866: PUSH
82867: LD_VAR 0 6
82871: ARRAY
82872: PUSH
82873: LD_VAR 0 5
82877: ARRAY
82878: PUSH
82879: LD_INT 1
82881: ARRAY
82882: PUSH
82883: LD_VAR 0 2
82887: EQUAL
82888: PUSH
82889: LD_EXP 115
82893: PUSH
82894: LD_VAR 0 6
82898: ARRAY
82899: PUSH
82900: LD_VAR 0 5
82904: ARRAY
82905: PUSH
82906: LD_INT 2
82908: ARRAY
82909: PUSH
82910: LD_VAR 0 3
82914: EQUAL
82915: AND
82916: IFFALSE 83019
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82918: LD_EXP 115
82922: PUSH
82923: LD_VAR 0 6
82927: ARRAY
82928: PUSH
82929: LD_VAR 0 5
82933: ARRAY
82934: PUSH
82935: LD_INT 1
82937: ARRAY
82938: PPUSH
82939: LD_EXP 115
82943: PUSH
82944: LD_VAR 0 6
82948: ARRAY
82949: PUSH
82950: LD_VAR 0 5
82954: ARRAY
82955: PUSH
82956: LD_INT 2
82958: ARRAY
82959: PPUSH
82960: LD_VAR 0 1
82964: PPUSH
82965: CALL_OW 255
82969: PPUSH
82970: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82974: LD_ADDR_EXP 115
82978: PUSH
82979: LD_EXP 115
82983: PPUSH
82984: LD_VAR 0 6
82988: PPUSH
82989: LD_EXP 115
82993: PUSH
82994: LD_VAR 0 6
82998: ARRAY
82999: PPUSH
83000: LD_VAR 0 5
83004: PPUSH
83005: CALL_OW 3
83009: PPUSH
83010: CALL_OW 1
83014: ST_TO_ADDR
// exit ;
83015: POP
83016: POP
83017: GO 83210
// end ; end ;
83019: GO 82859
83021: POP
83022: POP
// for i := minerMinesList [ index ] downto 1 do
83023: LD_ADDR_VAR 0 5
83027: PUSH
83028: DOUBLE
83029: LD_EXP 115
83033: PUSH
83034: LD_VAR 0 6
83038: ARRAY
83039: INC
83040: ST_TO_ADDR
83041: LD_INT 1
83043: PUSH
83044: FOR_DOWNTO
83045: IFFALSE 83208
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
83047: LD_EXP 115
83051: PUSH
83052: LD_VAR 0 6
83056: ARRAY
83057: PUSH
83058: LD_VAR 0 5
83062: ARRAY
83063: PUSH
83064: LD_INT 1
83066: ARRAY
83067: PPUSH
83068: LD_EXP 115
83072: PUSH
83073: LD_VAR 0 6
83077: ARRAY
83078: PUSH
83079: LD_VAR 0 5
83083: ARRAY
83084: PUSH
83085: LD_INT 2
83087: ARRAY
83088: PPUSH
83089: LD_VAR 0 2
83093: PPUSH
83094: LD_VAR 0 3
83098: PPUSH
83099: CALL_OW 298
83103: PUSH
83104: LD_INT 6
83106: LESS
83107: IFFALSE 83206
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
83109: LD_EXP 115
83113: PUSH
83114: LD_VAR 0 6
83118: ARRAY
83119: PUSH
83120: LD_VAR 0 5
83124: ARRAY
83125: PUSH
83126: LD_INT 1
83128: ARRAY
83129: PPUSH
83130: LD_EXP 115
83134: PUSH
83135: LD_VAR 0 6
83139: ARRAY
83140: PUSH
83141: LD_VAR 0 5
83145: ARRAY
83146: PUSH
83147: LD_INT 2
83149: ARRAY
83150: PPUSH
83151: LD_VAR 0 1
83155: PPUSH
83156: CALL_OW 255
83160: PPUSH
83161: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
83165: LD_ADDR_EXP 115
83169: PUSH
83170: LD_EXP 115
83174: PPUSH
83175: LD_VAR 0 6
83179: PPUSH
83180: LD_EXP 115
83184: PUSH
83185: LD_VAR 0 6
83189: ARRAY
83190: PPUSH
83191: LD_VAR 0 5
83195: PPUSH
83196: CALL_OW 3
83200: PPUSH
83201: CALL_OW 1
83205: ST_TO_ADDR
// end ; end ;
83206: GO 83044
83208: POP
83209: POP
// end ;
83210: LD_VAR 0 4
83214: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
83215: LD_INT 0
83217: PPUSH
83218: PPUSH
83219: PPUSH
83220: PPUSH
83221: PPUSH
83222: PPUSH
83223: PPUSH
83224: PPUSH
83225: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
83226: LD_VAR 0 1
83230: PPUSH
83231: CALL_OW 264
83235: PUSH
83236: LD_INT 81
83238: EQUAL
83239: NOT
83240: PUSH
83241: LD_VAR 0 1
83245: PUSH
83246: LD_EXP 114
83250: IN
83251: NOT
83252: OR
83253: IFFALSE 83257
// exit ;
83255: GO 83579
// index := GetElementIndex ( minersList , unit ) ;
83257: LD_ADDR_VAR 0 6
83261: PUSH
83262: LD_EXP 114
83266: PPUSH
83267: LD_VAR 0 1
83271: PPUSH
83272: CALL 25045 0 2
83276: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
83277: LD_ADDR_VAR 0 8
83281: PUSH
83282: LD_EXP 116
83286: PUSH
83287: LD_EXP 115
83291: PUSH
83292: LD_VAR 0 6
83296: ARRAY
83297: MINUS
83298: ST_TO_ADDR
// if not minesFreeAmount then
83299: LD_VAR 0 8
83303: NOT
83304: IFFALSE 83308
// exit ;
83306: GO 83579
// tmp := [ ] ;
83308: LD_ADDR_VAR 0 7
83312: PUSH
83313: EMPTY
83314: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
83315: LD_ADDR_VAR 0 5
83319: PUSH
83320: DOUBLE
83321: LD_INT 1
83323: DEC
83324: ST_TO_ADDR
83325: LD_VAR 0 8
83329: PUSH
83330: FOR_TO
83331: IFFALSE 83526
// begin _d := rand ( 0 , 5 ) ;
83333: LD_ADDR_VAR 0 11
83337: PUSH
83338: LD_INT 0
83340: PPUSH
83341: LD_INT 5
83343: PPUSH
83344: CALL_OW 12
83348: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
83349: LD_ADDR_VAR 0 12
83353: PUSH
83354: LD_INT 2
83356: PPUSH
83357: LD_INT 6
83359: PPUSH
83360: CALL_OW 12
83364: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
83365: LD_ADDR_VAR 0 9
83369: PUSH
83370: LD_VAR 0 2
83374: PPUSH
83375: LD_VAR 0 11
83379: PPUSH
83380: LD_VAR 0 12
83384: PPUSH
83385: CALL_OW 272
83389: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
83390: LD_ADDR_VAR 0 10
83394: PUSH
83395: LD_VAR 0 3
83399: PPUSH
83400: LD_VAR 0 11
83404: PPUSH
83405: LD_VAR 0 12
83409: PPUSH
83410: CALL_OW 273
83414: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
83415: LD_VAR 0 9
83419: PPUSH
83420: LD_VAR 0 10
83424: PPUSH
83425: CALL_OW 488
83429: PUSH
83430: LD_VAR 0 9
83434: PUSH
83435: LD_VAR 0 10
83439: PUSH
83440: EMPTY
83441: LIST
83442: LIST
83443: PUSH
83444: LD_VAR 0 7
83448: IN
83449: NOT
83450: AND
83451: PUSH
83452: LD_VAR 0 9
83456: PPUSH
83457: LD_VAR 0 10
83461: PPUSH
83462: CALL_OW 458
83466: NOT
83467: AND
83468: IFFALSE 83510
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
83470: LD_ADDR_VAR 0 7
83474: PUSH
83475: LD_VAR 0 7
83479: PPUSH
83480: LD_VAR 0 7
83484: PUSH
83485: LD_INT 1
83487: PLUS
83488: PPUSH
83489: LD_VAR 0 9
83493: PUSH
83494: LD_VAR 0 10
83498: PUSH
83499: EMPTY
83500: LIST
83501: LIST
83502: PPUSH
83503: CALL_OW 1
83507: ST_TO_ADDR
83508: GO 83524
// i := i - 1 ;
83510: LD_ADDR_VAR 0 5
83514: PUSH
83515: LD_VAR 0 5
83519: PUSH
83520: LD_INT 1
83522: MINUS
83523: ST_TO_ADDR
// end ;
83524: GO 83330
83526: POP
83527: POP
// for i in tmp do
83528: LD_ADDR_VAR 0 5
83532: PUSH
83533: LD_VAR 0 7
83537: PUSH
83538: FOR_IN
83539: IFFALSE 83577
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
83541: LD_VAR 0 1
83545: PPUSH
83546: LD_VAR 0 5
83550: PUSH
83551: LD_INT 1
83553: ARRAY
83554: PPUSH
83555: LD_VAR 0 5
83559: PUSH
83560: LD_INT 2
83562: ARRAY
83563: PPUSH
83564: CALL 82523 0 3
83568: NOT
83569: IFFALSE 83575
// exit ;
83571: POP
83572: POP
83573: GO 83579
83575: GO 83538
83577: POP
83578: POP
// end ;
83579: LD_VAR 0 4
83583: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
83584: LD_INT 0
83586: PPUSH
83587: PPUSH
83588: PPUSH
83589: PPUSH
83590: PPUSH
83591: PPUSH
83592: PPUSH
// if not GetClass ( unit ) = class_sniper then
83593: LD_VAR 0 1
83597: PPUSH
83598: CALL_OW 257
83602: PUSH
83603: LD_INT 5
83605: EQUAL
83606: NOT
83607: IFFALSE 83611
// exit ;
83609: GO 83999
// dist := 8 ;
83611: LD_ADDR_VAR 0 5
83615: PUSH
83616: LD_INT 8
83618: ST_TO_ADDR
// viewRange := 12 ;
83619: LD_ADDR_VAR 0 7
83623: PUSH
83624: LD_INT 12
83626: ST_TO_ADDR
// side := GetSide ( unit ) ;
83627: LD_ADDR_VAR 0 6
83631: PUSH
83632: LD_VAR 0 1
83636: PPUSH
83637: CALL_OW 255
83641: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
83642: LD_INT 61
83644: PPUSH
83645: LD_VAR 0 6
83649: PPUSH
83650: CALL_OW 321
83654: PUSH
83655: LD_INT 2
83657: EQUAL
83658: IFFALSE 83668
// viewRange := 16 ;
83660: LD_ADDR_VAR 0 7
83664: PUSH
83665: LD_INT 16
83667: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
83668: LD_VAR 0 1
83672: PPUSH
83673: LD_VAR 0 2
83677: PPUSH
83678: LD_VAR 0 3
83682: PPUSH
83683: CALL_OW 297
83687: PUSH
83688: LD_VAR 0 5
83692: GREATER
83693: IFFALSE 83772
// begin ComMoveXY ( unit , x , y ) ;
83695: LD_VAR 0 1
83699: PPUSH
83700: LD_VAR 0 2
83704: PPUSH
83705: LD_VAR 0 3
83709: PPUSH
83710: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83714: LD_INT 35
83716: PPUSH
83717: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
83721: LD_VAR 0 1
83725: PPUSH
83726: LD_VAR 0 2
83730: PPUSH
83731: LD_VAR 0 3
83735: PPUSH
83736: CALL 56786 0 3
83740: NOT
83741: IFFALSE 83745
// exit ;
83743: GO 83999
// until GetDistUnitXY ( unit , x , y ) < dist ;
83745: LD_VAR 0 1
83749: PPUSH
83750: LD_VAR 0 2
83754: PPUSH
83755: LD_VAR 0 3
83759: PPUSH
83760: CALL_OW 297
83764: PUSH
83765: LD_VAR 0 5
83769: LESS
83770: IFFALSE 83714
// end ; ComTurnXY ( unit , x , y ) ;
83772: LD_VAR 0 1
83776: PPUSH
83777: LD_VAR 0 2
83781: PPUSH
83782: LD_VAR 0 3
83786: PPUSH
83787: CALL_OW 118
// wait ( 5 ) ;
83791: LD_INT 5
83793: PPUSH
83794: CALL_OW 67
// _d := GetDir ( unit ) ;
83798: LD_ADDR_VAR 0 10
83802: PUSH
83803: LD_VAR 0 1
83807: PPUSH
83808: CALL_OW 254
83812: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
83813: LD_ADDR_VAR 0 8
83817: PUSH
83818: LD_VAR 0 1
83822: PPUSH
83823: CALL_OW 250
83827: PPUSH
83828: LD_VAR 0 10
83832: PPUSH
83833: LD_VAR 0 5
83837: PPUSH
83838: CALL_OW 272
83842: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
83843: LD_ADDR_VAR 0 9
83847: PUSH
83848: LD_VAR 0 1
83852: PPUSH
83853: CALL_OW 251
83857: PPUSH
83858: LD_VAR 0 10
83862: PPUSH
83863: LD_VAR 0 5
83867: PPUSH
83868: CALL_OW 273
83872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83873: LD_VAR 0 8
83877: PPUSH
83878: LD_VAR 0 9
83882: PPUSH
83883: CALL_OW 488
83887: NOT
83888: IFFALSE 83892
// exit ;
83890: GO 83999
// ComAnimCustom ( unit , 1 ) ;
83892: LD_VAR 0 1
83896: PPUSH
83897: LD_INT 1
83899: PPUSH
83900: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
83904: LD_VAR 0 8
83908: PPUSH
83909: LD_VAR 0 9
83913: PPUSH
83914: LD_VAR 0 6
83918: PPUSH
83919: LD_VAR 0 7
83923: PPUSH
83924: CALL_OW 330
// repeat wait ( 1 ) ;
83928: LD_INT 1
83930: PPUSH
83931: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
83935: LD_VAR 0 1
83939: PPUSH
83940: CALL_OW 316
83944: PUSH
83945: LD_VAR 0 1
83949: PPUSH
83950: CALL_OW 314
83954: OR
83955: PUSH
83956: LD_VAR 0 1
83960: PPUSH
83961: CALL_OW 302
83965: NOT
83966: OR
83967: PUSH
83968: LD_VAR 0 1
83972: PPUSH
83973: CALL_OW 301
83977: OR
83978: IFFALSE 83928
// RemoveSeeing ( _x , _y , side ) ;
83980: LD_VAR 0 8
83984: PPUSH
83985: LD_VAR 0 9
83989: PPUSH
83990: LD_VAR 0 6
83994: PPUSH
83995: CALL_OW 331
// end ;
83999: LD_VAR 0 4
84003: RET
