// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// CreateNature ;
   8: CALL 10920 0 0
// PrepareArabian ;
  12: CALL 226 0 0
// PrepareAmerican ;
  16: CALL 661 0 0
// PrepareLegion ;
  20: CALL 5576 0 0
// Action ;
  24: CALL 11524 0 0
// end ;
  28: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := false ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// prefix := 09_ ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// amScriptActive := true ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 1
  55: ST_TO_ADDR
// legScriptActive := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 16
  71: PUSH
  72: LD_INT 14
  74: PUSH
  75: LD_INT 12
  77: PUSH
  78: LD_INT 10
  80: PUSH
  81: EMPTY
  82: LIST
  83: LIST
  84: LIST
  85: LIST
  86: PUSH
  87: LD_OWVAR 67
  91: ARRAY
  92: ST_TO_ADDR
// spotAmericanBase := false ;
  93: LD_ADDR_EXP 6
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// spotArabianBase := false ;
 101: LD_ADDR_EXP 7
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// spotLegion := false ;
 109: LD_ADDR_EXP 10
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// spotByAmerican := false ;
 117: LD_ADDR_EXP 8
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// spotByLegion := false ;
 125: LD_ADDR_EXP 9
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// americanDestroyed := false ;
 133: LD_ADDR_EXP 11
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// legionDestroyed := false ;
 141: LD_ADDR_EXP 12
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// hasMastodont := false ;
 149: LD_ADDR_EXP 13
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// hasVehicles := false ;
 157: LD_ADDR_EXP 14
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// hasTigers := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// hasApes := false ;
 173: LD_ADDR_EXP 16
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// hasDrugs := false ;
 181: LD_ADDR_EXP 17
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// canFinish := false ;
 189: LD_ADDR_EXP 18
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// gameActive := false ;
 197: LD_ADDR_EXP 19
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// omarCanChangeClass := false ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// tigerCounter := 0 ;
 213: LD_ADDR_EXP 21
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// end ; end_of_file
 221: LD_VAR 0 1
 225: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
// uc_side := 2 ;
 232: LD_ADDR_OWVAR 20
 236: PUSH
 237: LD_INT 2
 239: ST_TO_ADDR
// uc_nation := nation_arabian ;
 240: LD_ADDR_OWVAR 21
 244: PUSH
 245: LD_INT 2
 247: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 248: LD_ADDR_EXP 22
 252: PUSH
 253: LD_STRING Heike
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_EXP 2
 266: PPUSH
 267: CALL 20325 0 3
 271: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 272: LD_INT 14
 274: PPUSH
 275: LD_INT 3
 277: PPUSH
 278: LD_INT 1
 280: PPUSH
 281: LD_INT 27
 283: PPUSH
 284: LD_INT 100
 286: PPUSH
 287: CALL 25165 0 5
// heikeVehicle := CreateVehicle ;
 291: LD_ADDR_EXP 24
 295: PUSH
 296: CALL_OW 45
 300: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 301: LD_EXP 24
 305: PPUSH
 306: LD_INT 4
 308: PPUSH
 309: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 313: LD_EXP 24
 317: PPUSH
 318: LD_INT 118
 320: PPUSH
 321: LD_INT 37
 323: PPUSH
 324: LD_INT 0
 326: PPUSH
 327: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 331: LD_EXP 22
 335: PPUSH
 336: LD_INT 1
 338: PPUSH
 339: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 343: LD_EXP 22
 347: PPUSH
 348: LD_EXP 24
 352: PPUSH
 353: CALL_OW 52
// uc_side := 5 ;
 357: LD_ADDR_OWVAR 20
 361: PUSH
 362: LD_INT 5
 364: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 365: LD_ADDR_EXP 23
 369: PUSH
 370: LD_STRING Omar
 372: PPUSH
 373: CALL_OW 25
 377: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 378: LD_INT 14
 380: PPUSH
 381: LD_INT 3
 383: PPUSH
 384: LD_INT 1
 386: PPUSH
 387: LD_INT 27
 389: PPUSH
 390: LD_INT 100
 392: PPUSH
 393: CALL 25165 0 5
// omarVehicle := CreateVehicle ;
 397: LD_ADDR_EXP 25
 401: PUSH
 402: CALL_OW 45
 406: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 407: LD_EXP 25
 411: PPUSH
 412: LD_INT 0
 414: PPUSH
 415: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 419: LD_ADDR_VAR 0 2
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 5
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 3
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 478
// SetLives ( i , rand ( 300 , 499 ) ) ;
 456: LD_VAR 0 2
 460: PPUSH
 461: LD_INT 300
 463: PPUSH
 464: LD_INT 499
 466: PPUSH
 467: CALL_OW 12
 471: PPUSH
 472: CALL_OW 234
 476: GO 453
 478: POP
 479: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 480: LD_INT 85
 482: PPUSH
 483: CALL_OW 274
 487: PPUSH
 488: LD_INT 1
 490: PPUSH
 491: LD_INT 200
 493: PUSH
 494: LD_INT 20
 496: PUSH
 497: LD_OWVAR 67
 501: MUL
 502: MINUS
 503: PPUSH
 504: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 508: LD_INT 85
 510: PPUSH
 511: CALL_OW 274
 515: PPUSH
 516: LD_INT 2
 518: PPUSH
 519: LD_INT 20
 521: PPUSH
 522: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 526: LD_INT 14
 528: PPUSH
 529: LD_INT 3
 531: PPUSH
 532: LD_INT 1
 534: PPUSH
 535: LD_INT 32
 537: PPUSH
 538: LD_INT 100
 540: PPUSH
 541: CALL 25165 0 5
// veh := CreateVehicle ;
 545: LD_ADDR_VAR 0 4
 549: PUSH
 550: CALL_OW 45
 554: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 555: LD_VAR 0 4
 559: PPUSH
 560: LD_INT 4
 562: PPUSH
 563: CALL_OW 233
// SetLives ( veh , 420 ) ;
 567: LD_VAR 0 4
 571: PPUSH
 572: LD_INT 420
 574: PPUSH
 575: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 579: LD_VAR 0 4
 583: PPUSH
 584: LD_INT 193
 586: PPUSH
 587: LD_INT 133
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 597: LD_INT 14
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: LD_INT 1
 605: PPUSH
 606: LD_INT 26
 608: PPUSH
 609: LD_INT 11
 611: PPUSH
 612: CALL 25165 0 5
// veh := CreateVehicle ;
 616: LD_ADDR_VAR 0 4
 620: PUSH
 621: CALL_OW 45
 625: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 626: LD_VAR 0 4
 630: PPUSH
 631: LD_INT 0
 633: PPUSH
 634: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 638: LD_VAR 0 4
 642: PPUSH
 643: LD_INT 261
 645: PPUSH
 646: LD_INT 115
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL_OW 48
// end ; end_of_file
 656: LD_VAR 0 1
 660: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 661: LD_INT 0
 663: PPUSH
 664: PPUSH
 665: PPUSH
 666: PPUSH
 667: PPUSH
 668: PPUSH
 669: PPUSH
 670: PPUSH
// uc_side := 1 ;
 671: LD_ADDR_OWVAR 20
 675: PUSH
 676: LD_INT 1
 678: ST_TO_ADDR
// uc_nation := nation_american ;
 679: LD_ADDR_OWVAR 21
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// amForces := [ ] ;
 687: LD_ADDR_EXP 26
 691: PUSH
 692: EMPTY
 693: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 694: LD_ADDR_EXP 27
 698: PUSH
 699: LD_INT 1
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 20388 0 3
 712: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 713: LD_ADDR_EXP 28
 717: PUSH
 718: LD_INT 2
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: LD_INT 12
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 13
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 758: LD_ADDR_EXP 29
 762: PUSH
 763: LD_INT 94
 765: PUSH
 766: LD_INT 132
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// amBuildings := [ ] ;
 773: LD_ADDR_EXP 30
 777: PUSH
 778: EMPTY
 779: ST_TO_ADDR
// amTanks := [ ] ;
 780: LD_ADDR_EXP 31
 784: PUSH
 785: EMPTY
 786: ST_TO_ADDR
// amCargo := 0 ;
 787: LD_ADDR_EXP 33
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// amPatrol := [ ] ;
 795: LD_ADDR_EXP 34
 799: PUSH
 800: EMPTY
 801: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 802: LD_ADDR_VAR 0 7
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: LD_INT 121
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 98
 819: PUSH
 820: LD_INT 145
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// for i in sources do
 831: LD_ADDR_VAR 0 2
 835: PUSH
 836: LD_VAR 0 7
 840: PUSH
 841: FOR_IN
 842: IFFALSE 871
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 844: LD_VAR 0 2
 848: PUSH
 849: LD_INT 1
 851: ARRAY
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 2
 860: ARRAY
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 441
 869: GO 841
 871: POP
 872: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 873: LD_INT 2
 875: PPUSH
 876: CALL_OW 274
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 550
 886: PPUSH
 887: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 891: LD_INT 2
 893: PPUSH
 894: CALL_OW 274
 898: PPUSH
 899: LD_INT 2
 901: PPUSH
 902: LD_INT 120
 904: PPUSH
 905: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 909: LD_INT 2
 911: PPUSH
 912: CALL_OW 274
 916: PPUSH
 917: LD_INT 3
 919: PPUSH
 920: LD_INT 30
 922: PPUSH
 923: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 927: LD_ADDR_VAR 0 6
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 7
 937: PUSH
 938: LD_INT 8
 940: PUSH
 941: LD_INT 9
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_OWVAR 67
 954: ARRAY
 955: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 956: LD_ADDR_EXP 32
 960: PUSH
 961: LD_STRING Brown
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: LD_STRING 
 969: PPUSH
 970: CALL 20325 0 3
 974: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 975: LD_EXP 32
 979: PPUSH
 980: LD_INT 2
 982: PPUSH
 983: CALL_OW 52
// for i := 1 to 4 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 4
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1525
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1003: LD_ADDR_VAR 0 3
1007: PUSH
1008: DOUBLE
1009: LD_INT 1
1011: DEC
1012: ST_TO_ADDR
1013: LD_INT 6
1015: PUSH
1016: LD_INT 7
1018: PUSH
1019: LD_INT 8
1021: PUSH
1022: LD_INT 9
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_OWVAR 67
1035: ARRAY
1036: PUSH
1037: LD_INT 3
1039: PUSH
1040: LD_INT 4
1042: PUSH
1043: LD_INT 5
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_OWVAR 67
1059: ARRAY
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 6
1069: PUSH
1070: LD_INT 7
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_OWVAR 67
1083: ARRAY
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 3
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: LD_INT 3
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: PUSH
1103: LD_OWVAR 67
1107: ARRAY
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: PUSH
1121: FOR_TO
1122: IFFALSE 1521
// begin PrepareHuman ( false , i , skill ) ;
1124: LD_INT 0
1126: PPUSH
1127: LD_VAR 0 2
1131: PPUSH
1132: LD_VAR 0 6
1136: PPUSH
1137: CALL_OW 380
// un := CreateHuman ;
1141: LD_ADDR_VAR 0 5
1145: PUSH
1146: CALL_OW 44
1150: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1151: LD_ADDR_EXP 26
1155: PUSH
1156: LD_EXP 26
1160: PPUSH
1161: LD_VAR 0 5
1165: PPUSH
1166: CALL 58027 0 2
1170: ST_TO_ADDR
// case i of 1 :
1171: LD_VAR 0 2
1175: PUSH
1176: LD_INT 1
1178: DOUBLE
1179: EQUAL
1180: IFTRUE 1184
1182: GO 1253
1184: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1185: LD_ADDR_VAR 0 4
1189: PUSH
1190: LD_INT 22
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 2
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 32
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 30
1215: PUSH
1216: LD_INT 5
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: LIST
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: LD_INT 62
1233: PUSH
1234: EMPTY
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PPUSH
1246: CALL_OW 69
1250: ST_TO_ADDR
1251: GO 1432
1253: LD_INT 2
1255: DOUBLE
1256: EQUAL
1257: IFTRUE 1261
1259: GO 1290
1261: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1262: LD_ADDR_VAR 0 4
1266: PUSH
1267: LD_INT 2
1269: PPUSH
1270: LD_INT 3
1272: PUSH
1273: LD_INT 62
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PPUSH
1283: CALL_OW 72
1287: ST_TO_ADDR
1288: GO 1432
1290: LD_INT 3
1292: DOUBLE
1293: EQUAL
1294: IFTRUE 1298
1296: GO 1372
1298: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1299: LD_ADDR_VAR 0 4
1303: PUSH
1304: LD_INT 22
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 2
1316: PUSH
1317: LD_INT 30
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 30
1329: PUSH
1330: LD_INT 36
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 3
1344: PUSH
1345: LD_INT 62
1347: PUSH
1348: EMPTY
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 69
1364: PPUSH
1365: CALL 53303 0 1
1369: ST_TO_ADDR
1370: GO 1432
1372: LD_INT 4
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1431
1380: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 30
1398: PUSH
1399: LD_INT 8
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: LD_INT 3
1408: PUSH
1409: LD_INT 62
1411: PUSH
1412: EMPTY
1413: LIST
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
1429: GO 1432
1431: POP
// if b then
1432: LD_VAR 0 4
1436: IFFALSE 1498
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1438: LD_VAR 0 4
1442: PUSH
1443: LD_INT 1
1445: ARRAY
1446: PPUSH
1447: CALL_OW 266
1451: PUSH
1452: LD_INT 5
1454: EQUAL
1455: PUSH
1456: LD_INT 60
1458: PPUSH
1459: CALL_OW 13
1463: AND
1464: IFFALSE 1478
// SetClass ( un , class_sniper ) ;
1466: LD_VAR 0 5
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1478: LD_VAR 0 5
1482: PPUSH
1483: LD_VAR 0 4
1487: PUSH
1488: LD_INT 1
1490: ARRAY
1491: PPUSH
1492: CALL_OW 52
// end else
1496: GO 1519
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1498: LD_VAR 0 5
1502: PPUSH
1503: LD_INT 92
1505: PPUSH
1506: LD_INT 137
1508: PPUSH
1509: LD_INT 4
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 50
// end ;
1519: GO 1121
1521: POP
1522: POP
1523: GO 1000
1525: POP
1526: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1527: LD_ADDR_VAR 0 8
1531: PUSH
1532: LD_INT 30
1534: PUSH
1535: LD_INT 32
1537: PUSH
1538: LD_INT 36
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1546: LD_ADDR_VAR 0 2
1550: PUSH
1551: DOUBLE
1552: LD_INT 1
1554: DEC
1555: ST_TO_ADDR
1556: LD_VAR 0 8
1560: PUSH
1561: FOR_TO
1562: IFFALSE 1731
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1564: LD_ADDR_VAR 0 3
1568: PUSH
1569: DOUBLE
1570: LD_INT 1
1572: DEC
1573: ST_TO_ADDR
1574: LD_INT 1
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 3
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: PUSH
1598: FOR_TO
1599: IFFALSE 1727
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1601: LD_INT 0
1603: PPUSH
1604: LD_INT 7
1606: PUSH
1607: LD_INT 8
1609: PUSH
1610: LD_INT 9
1612: PUSH
1613: LD_INT 10
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: LD_OWVAR 67
1626: ARRAY
1627: PPUSH
1628: CALL_OW 381
// un := CreateHuman ;
1632: LD_ADDR_VAR 0 5
1636: PUSH
1637: CALL_OW 44
1641: ST_TO_ADDR
// if j mod 2 = 0 then
1642: LD_VAR 0 3
1646: PUSH
1647: LD_INT 2
1649: MOD
1650: PUSH
1651: LD_INT 0
1653: EQUAL
1654: IFFALSE 1668
// SetClass ( un , class_sniper ) ;
1656: LD_VAR 0 5
1660: PPUSH
1661: LD_INT 5
1663: PPUSH
1664: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1668: LD_ADDR_EXP 34
1672: PUSH
1673: LD_EXP 34
1677: PPUSH
1678: LD_VAR 0 5
1682: PPUSH
1683: CALL 58027 0 2
1687: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1688: LD_VAR 0 5
1692: PPUSH
1693: LD_VAR 0 8
1697: PUSH
1698: LD_VAR 0 2
1702: ARRAY
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 49
// SetTag ( un , i ) ;
1711: LD_VAR 0 5
1715: PPUSH
1716: LD_VAR 0 2
1720: PPUSH
1721: CALL_OW 109
// end ;
1725: GO 1598
1727: POP
1728: POP
// end ;
1729: GO 1561
1731: POP
1732: POP
// end ;
1733: LD_VAR 0 1
1737: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1738: LD_EXP 3
1742: PUSH
1743: LD_EXP 26
1747: PPUSH
1748: CALL 22427 0 1
1752: AND
1753: IFFALSE 4121
1755: GO 1757
1757: DISABLE
1758: LD_INT 0
1760: PPUSH
1761: PPUSH
1762: PPUSH
1763: PPUSH
1764: PPUSH
1765: PPUSH
1766: PPUSH
1767: PPUSH
1768: PPUSH
1769: PPUSH
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
// begin enable ;
1778: ENABLE
// side := 1 ;
1779: LD_ADDR_VAR 0 5
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1787: LD_ADDR_VAR 0 3
1791: PUSH
1792: LD_INT 22
1794: PUSH
1795: LD_VAR 0 5
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 33
1806: PUSH
1807: LD_INT 2
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 50
1816: PUSH
1817: EMPTY
1818: LIST
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: LD_INT 61
1825: PUSH
1826: EMPTY
1827: LIST
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: PPUSH
1839: CALL_OW 69
1843: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 22
1851: PUSH
1852: LD_VAR 0 5
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 50
1863: PUSH
1864: EMPTY
1865: LIST
1866: PUSH
1867: LD_INT 30
1869: PUSH
1870: LD_INT 36
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: CALL 22427 0 1
1891: AND
1892: IFFALSE 1920
// for i in remote do
1894: LD_ADDR_VAR 0 1
1898: PUSH
1899: LD_VAR 0 3
1903: PUSH
1904: FOR_IN
1905: IFFALSE 1918
// Connect ( i ) ;
1907: LD_VAR 0 1
1911: PPUSH
1912: CALL 28633 0 1
1916: GO 1904
1918: POP
1919: POP
// if amTech then
1920: LD_EXP 27
1924: IFFALSE 2080
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1926: LD_ADDR_VAR 0 6
1930: PUSH
1931: LD_INT 22
1933: PUSH
1934: LD_VAR 0 5
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 50
1945: PUSH
1946: EMPTY
1947: LIST
1948: PUSH
1949: LD_INT 2
1951: PUSH
1952: LD_INT 30
1954: PUSH
1955: LD_INT 6
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 30
1964: PUSH
1965: LD_INT 7
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 30
1974: PUSH
1975: LD_INT 8
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PPUSH
1993: CALL_OW 69
1997: ST_TO_ADDR
// if lab then
1998: LD_VAR 0 6
2002: IFFALSE 2080
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2004: LD_VAR 0 6
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: CALL_OW 461
2017: PUSH
2018: LD_INT 2
2020: EQUAL
2021: IFFALSE 2080
// begin for i in amTech do
2023: LD_ADDR_VAR 0 1
2027: PUSH
2028: LD_EXP 27
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2078
// if CanBeResearched ( lab [ 1 ] , i ) then
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PPUSH
2045: LD_VAR 0 1
2049: PPUSH
2050: CALL_OW 430
2054: IFFALSE 2076
// begin ComResearch ( lab [ 1 ] , i ) ;
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: LD_VAR 0 1
2069: PPUSH
2070: CALL_OW 124
// break ;
2074: GO 2078
// end ;
2076: GO 2033
2078: POP
2079: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2080: LD_ADDR_VAR 0 16
2084: PUSH
2085: LD_INT 1
2087: PPUSH
2088: LD_INT 22
2090: PUSH
2091: LD_VAR 0 5
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 3
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 50
2112: PUSH
2113: EMPTY
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 70
2125: ST_TO_ADDR
// if fac then
2126: LD_VAR 0 16
2130: IFFALSE 2396
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2132: LD_VAR 0 16
2136: PUSH
2137: LD_INT 1
2139: ARRAY
2140: PPUSH
2141: CALL_OW 461
2145: PUSH
2146: LD_INT 2
2148: EQUAL
2149: IFFALSE 2396
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2151: LD_ADDR_VAR 0 17
2155: PUSH
2156: LD_INT 1
2158: PPUSH
2159: LD_INT 2
2161: PUSH
2162: LD_INT 30
2164: PUSH
2165: LD_INT 32
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 30
2174: PUSH
2175: LD_INT 33
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 35
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PPUSH
2201: CALL_OW 70
2205: ST_TO_ADDR
// if emptyTowers then
2206: LD_VAR 0 17
2210: IFFALSE 2258
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2212: LD_ADDR_VAR 0 18
2216: PUSH
2217: LD_VAR 0 17
2221: PUSH
2222: LD_INT 1
2224: ARRAY
2225: PPUSH
2226: LD_INT 1
2228: PPUSH
2229: CALL 30672 0 2
2233: ST_TO_ADDR
// if weapon then
2234: LD_VAR 0 18
2238: IFFALSE 2258
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2240: LD_VAR 0 17
2244: PUSH
2245: LD_INT 1
2247: ARRAY
2248: PPUSH
2249: LD_VAR 0 18
2253: PPUSH
2254: CALL_OW 148
// end ; if amConstructList then
2258: LD_EXP 28
2262: IFFALSE 2396
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2264: LD_VAR 0 16
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PPUSH
2273: LD_EXP 28
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PUSH
2282: LD_INT 1
2284: ARRAY
2285: PPUSH
2286: LD_EXP 28
2290: PUSH
2291: LD_INT 1
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: LD_EXP 28
2303: PUSH
2304: LD_INT 1
2306: ARRAY
2307: PUSH
2308: LD_INT 3
2310: ARRAY
2311: PPUSH
2312: LD_EXP 28
2316: PUSH
2317: LD_INT 1
2319: ARRAY
2320: PUSH
2321: LD_INT 4
2323: ARRAY
2324: PPUSH
2325: CALL_OW 448
2329: IFFALSE 2396
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2331: LD_VAR 0 16
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_EXP 28
2344: PUSH
2345: LD_INT 1
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 28
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PUSH
2362: LD_INT 2
2364: ARRAY
2365: PPUSH
2366: LD_EXP 28
2370: PUSH
2371: LD_INT 1
2373: ARRAY
2374: PUSH
2375: LD_INT 3
2377: ARRAY
2378: PPUSH
2379: LD_EXP 28
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PUSH
2388: LD_INT 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: LD_INT 1
2403: PPUSH
2404: LD_INT 21
2406: PUSH
2407: LD_INT 3
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 3
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 1000
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2454: LD_ADDR_VAR 0 10
2458: PUSH
2459: LD_INT 13
2461: PPUSH
2462: CALL_OW 435
2466: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2467: LD_ADDR_VAR 0 11
2471: PUSH
2472: LD_EXP 26
2476: PPUSH
2477: LD_INT 25
2479: PUSH
2480: LD_INT 4
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 50
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL_OW 72
2501: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2502: LD_ADDR_VAR 0 6
2506: PUSH
2507: LD_INT 1
2509: PPUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 30
2515: PUSH
2516: LD_INT 6
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: LD_INT 30
2525: PUSH
2526: LD_INT 7
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 30
2535: PUSH
2536: LD_INT 8
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: PPUSH
2549: CALL_OW 70
2553: ST_TO_ADDR
// if sci then
2554: LD_VAR 0 11
2558: IFFALSE 2717
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2560: LD_ADDR_VAR 0 13
2564: PUSH
2565: LD_EXP 26
2569: PPUSH
2570: LD_INT 95
2572: PUSH
2573: LD_INT 1
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 120
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PPUSH
2594: CALL_OW 72
2598: ST_TO_ADDR
// if hurtUnits then
2599: LD_VAR 0 13
2603: IFFALSE 2664
// begin for i in sci do
2605: LD_ADDR_VAR 0 1
2609: PUSH
2610: LD_VAR 0 11
2614: PUSH
2615: FOR_IN
2616: IFFALSE 2660
// if IsInUnit ( i ) then
2618: LD_VAR 0 1
2622: PPUSH
2623: CALL_OW 310
2627: IFFALSE 2640
// ComExitBuilding ( i ) else
2629: LD_VAR 0 1
2633: PPUSH
2634: CALL_OW 122
2638: GO 2658
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2640: LD_VAR 0 1
2644: PPUSH
2645: LD_VAR 0 13
2649: PUSH
2650: LD_INT 1
2652: ARRAY
2653: PPUSH
2654: CALL_OW 128
2658: GO 2615
2660: POP
2661: POP
// end else
2662: GO 2717
// if lab then
2664: LD_VAR 0 6
2668: IFFALSE 2717
// begin for i in sci do
2670: LD_ADDR_VAR 0 1
2674: PUSH
2675: LD_VAR 0 11
2679: PUSH
2680: FOR_IN
2681: IFFALSE 2715
// if not IsInUnit ( i ) then
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL_OW 310
2692: NOT
2693: IFFALSE 2713
// ComEnterUnit ( i , lab [ 1 ] ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 6
2704: PUSH
2705: LD_INT 1
2707: ARRAY
2708: PPUSH
2709: CALL_OW 120
2713: GO 2680
2715: POP
2716: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2717: LD_ADDR_VAR 0 7
2721: PUSH
2722: LD_EXP 26
2726: PPUSH
2727: LD_INT 25
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 72
2741: ST_TO_ADDR
// if eng then
2742: LD_VAR 0 7
2746: IFFALSE 3521
// begin for i in eng do
2748: LD_ADDR_VAR 0 1
2752: PUSH
2753: LD_VAR 0 7
2757: PUSH
2758: FOR_IN
2759: IFFALSE 3519
// begin tag := GetTag ( i ) ;
2761: LD_ADDR_VAR 0 8
2765: PUSH
2766: LD_VAR 0 1
2770: PPUSH
2771: CALL_OW 110
2775: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2776: LD_VAR 0 1
2780: PPUSH
2781: CALL_OW 256
2785: PUSH
2786: LD_INT 800
2788: LESS
2789: PUSH
2790: LD_VAR 0 8
2794: PUSH
2795: LD_INT 1
2797: NONEQUAL
2798: AND
2799: IFFALSE 2849
// begin SetTag ( i , tHeal ) ;
2801: LD_VAR 0 1
2805: PPUSH
2806: LD_INT 1
2808: PPUSH
2809: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2813: LD_VAR 0 1
2817: PPUSH
2818: LD_EXP 29
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: PPUSH
2827: LD_EXP 29
2831: PUSH
2832: LD_INT 2
2834: ARRAY
2835: PPUSH
2836: CALL_OW 111
// AddComHold ( i ) ;
2840: LD_VAR 0 1
2844: PPUSH
2845: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2849: LD_VAR 0 8
2853: PUSH
2854: LD_INT 1
2856: EQUAL
2857: PUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 256
2867: PUSH
2868: LD_INT 1000
2870: EQUAL
2871: AND
2872: IFFALSE 2886
// SetTag ( i , 0 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 109
// if not tag then
2886: LD_VAR 0 8
2890: NOT
2891: IFFALSE 3059
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2893: LD_ADDR_VAR 0 4
2897: PUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 57
2903: PUSH
2904: EMPTY
2905: LIST
2906: PPUSH
2907: CALL_OW 70
2911: ST_TO_ADDR
// if undone then
2912: LD_VAR 0 4
2916: IFFALSE 2938
// begin ComComplete ( i , undone [ 1 ] ) ;
2918: LD_VAR 0 1
2922: PPUSH
2923: LD_VAR 0 4
2927: PUSH
2928: LD_INT 1
2930: ARRAY
2931: PPUSH
2932: CALL 28525 0 2
// continue ;
2936: GO 2758
// end ; if cr or tmp or Count ( amBuildings ) then
2938: LD_VAR 0 10
2942: PUSH
2943: LD_VAR 0 2
2947: OR
2948: PUSH
2949: LD_EXP 30
2953: PPUSH
2954: CALL 22427 0 1
2958: OR
2959: IFFALSE 3035
// begin if IsInUnit ( i ) then
2961: LD_VAR 0 1
2965: PPUSH
2966: CALL_OW 310
2970: IFFALSE 2981
// ComExitBuilding ( i ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: CALL_OW 122
// if tmp then
2981: LD_VAR 0 2
2985: IFFALSE 3001
// SetTag ( i , tRepair ) else
2987: LD_VAR 0 1
2991: PPUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL_OW 109
2999: GO 3033
// if cr then
3001: LD_VAR 0 10
3005: IFFALSE 3021
// SetTag ( i , tCrates ) else
3007: LD_VAR 0 1
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: CALL_OW 109
3019: GO 3033
// SetTag ( i , tBuild ) ;
3021: LD_VAR 0 1
3025: PPUSH
3026: LD_INT 5
3028: PPUSH
3029: CALL_OW 109
// end else
3033: GO 3059
// if not IsInUnit ( i ) then
3035: LD_VAR 0 1
3039: PPUSH
3040: CALL_OW 310
3044: NOT
3045: IFFALSE 3059
// ComEnterUnit ( i , amBase ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 2
3054: PPUSH
3055: CALL_OW 120
// end ; if tag = tRepair then
3059: LD_VAR 0 8
3063: PUSH
3064: LD_INT 3
3066: EQUAL
3067: IFFALSE 3169
// begin if IsInUnit ( i ) then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 310
3078: IFFALSE 3091
// begin ComExitBuilding ( i ) ;
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL_OW 122
// continue ;
3089: GO 2758
// end ; if not tmp then
3091: LD_VAR 0 2
3095: NOT
3096: IFFALSE 3112
// begin SetTag ( i , 0 ) ;
3098: LD_VAR 0 1
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: CALL_OW 109
// continue ;
3110: GO 2758
// end ; if not HasTask ( i ) then
3112: LD_VAR 0 1
3116: PPUSH
3117: CALL_OW 314
3121: NOT
3122: IFFALSE 3142
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3124: LD_VAR 0 1
3128: PPUSH
3129: LD_VAR 0 2
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 308
3154: NOT
3155: IFFALSE 3169
// ComMoveToArea ( i , amBaseArea ) ;
3157: LD_VAR 0 1
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: CALL_OW 113
// end ; if tag = tBuild then
3169: LD_VAR 0 8
3173: PUSH
3174: LD_INT 5
3176: EQUAL
3177: IFFALSE 3372
// begin if IsInUnit ( i ) then
3179: LD_VAR 0 1
3183: PPUSH
3184: CALL_OW 310
3188: IFFALSE 3201
// begin ComExitBuilding ( i ) ;
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 122
// continue ;
3199: GO 2758
// end ; if not Count ( amBuildings ) then
3201: LD_EXP 30
3205: PPUSH
3206: CALL 22427 0 1
3210: NOT
3211: IFFALSE 3229
// begin SetTag ( i , 0 ) ;
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_INT 0
3220: PPUSH
3221: CALL_OW 109
// continue ;
3225: GO 2758
// end else
3227: GO 3266
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3229: LD_INT 2
3231: PPUSH
3232: LD_EXP 30
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: PPUSH
3245: CALL 10774 0 2
3249: NOT
3250: IFFALSE 3266
// begin SetTag ( i , 0 ) ;
3252: LD_VAR 0 1
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 109
// continue ;
3264: GO 2758
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3266: LD_ADDR_VAR 0 4
3270: PUSH
3271: LD_INT 1
3273: PPUSH
3274: LD_INT 57
3276: PUSH
3277: EMPTY
3278: LIST
3279: PPUSH
3280: CALL_OW 70
3284: ST_TO_ADDR
// if undone then
3285: LD_VAR 0 4
3289: IFFALSE 3311
// begin ComComplete ( i , undone [ 1 ] ) ;
3291: LD_VAR 0 1
3295: PPUSH
3296: LD_VAR 0 4
3300: PUSH
3301: LD_INT 1
3303: ARRAY
3304: PPUSH
3305: CALL 28525 0 2
// continue ;
3309: GO 2758
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3311: LD_VAR 0 1
3315: PPUSH
3316: LD_EXP 30
3320: PUSH
3321: LD_INT 1
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PPUSH
3329: LD_EXP 30
3333: PUSH
3334: LD_INT 1
3336: ARRAY
3337: PUSH
3338: LD_INT 2
3340: ARRAY
3341: PPUSH
3342: LD_EXP 30
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PUSH
3351: LD_INT 3
3353: ARRAY
3354: PPUSH
3355: LD_EXP 30
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: PUSH
3364: LD_INT 4
3366: ARRAY
3367: PPUSH
3368: CALL_OW 145
// end ; if tag = tCrates then
3372: LD_VAR 0 8
3376: PUSH
3377: LD_INT 2
3379: EQUAL
3380: IFFALSE 3517
// begin if IsInUnit ( i ) then
3382: LD_VAR 0 1
3386: PPUSH
3387: CALL_OW 310
3391: IFFALSE 3404
// begin ComExitBuilding ( i ) ;
3393: LD_VAR 0 1
3397: PPUSH
3398: CALL_OW 122
// continue ;
3402: GO 2758
// end ; if not cr then
3404: LD_VAR 0 10
3408: NOT
3409: IFFALSE 3425
// begin SetTag ( i , 0 ) ;
3411: LD_VAR 0 1
3415: PPUSH
3416: LD_INT 0
3418: PPUSH
3419: CALL_OW 109
// continue ;
3423: GO 2758
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3425: LD_VAR 0 1
3429: PPUSH
3430: CALL_OW 314
3434: NOT
3435: PUSH
3436: LD_INT 81
3438: PUSH
3439: LD_VAR 0 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 92
3450: PUSH
3451: LD_VAR 0 10
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: PUSH
3460: LD_VAR 0 10
3464: PUSH
3465: LD_INT 2
3467: ARRAY
3468: PUSH
3469: LD_INT 12
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PPUSH
3482: CALL_OW 69
3486: NOT
3487: AND
3488: IFFALSE 3517
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3490: LD_VAR 0 1
3494: PPUSH
3495: LD_VAR 0 10
3499: PUSH
3500: LD_INT 1
3502: ARRAY
3503: PPUSH
3504: LD_VAR 0 10
3508: PUSH
3509: LD_INT 2
3511: ARRAY
3512: PPUSH
3513: CALL_OW 117
// end ; end ;
3517: GO 2758
3519: POP
3520: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3521: LD_ADDR_VAR 0 12
3525: PUSH
3526: LD_EXP 26
3530: PPUSH
3531: LD_INT 2
3533: PUSH
3534: LD_INT 25
3536: PUSH
3537: LD_INT 1
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 25
3546: PUSH
3547: LD_INT 5
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 50
3561: PUSH
3562: EMPTY
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 72
3573: PUSH
3574: LD_EXP 32
3578: UNION
3579: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3580: LD_ADDR_VAR 0 14
3584: PUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_INT 81
3590: PUSH
3591: LD_VAR 0 5
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 70
3604: ST_TO_ADDR
// if sol then
3605: LD_VAR 0 12
3609: IFFALSE 4121
// begin if enemyInBase then
3611: LD_VAR 0 14
3615: IFFALSE 3760
// begin for i in sol do
3617: LD_ADDR_VAR 0 1
3621: PUSH
3622: LD_VAR 0 12
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3756
// begin tw := IsInUnit ( i ) ;
3630: LD_ADDR_VAR 0 9
3634: PUSH
3635: LD_VAR 0 1
3639: PPUSH
3640: CALL_OW 310
3644: ST_TO_ADDR
// if tw then
3645: LD_VAR 0 9
3649: IFFALSE 3730
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3651: LD_VAR 0 9
3655: PUSH
3656: LD_INT 22
3658: PUSH
3659: LD_VAR 0 5
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 101
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: LD_INT 30
3683: PUSH
3684: LD_INT 32
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 30
3693: PUSH
3694: LD_INT 31
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 69
3715: IN
3716: NOT
3717: IFFALSE 3728
// ComExitBuilding ( i ) ;
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 122
// end else
3728: GO 3754
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3730: LD_VAR 0 1
3734: PPUSH
3735: LD_VAR 0 14
3739: PPUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 74
3749: PPUSH
3750: CALL_OW 115
// end ;
3754: GO 3627
3756: POP
3757: POP
// end else
3758: GO 4121
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3760: LD_ADDR_VAR 0 15
3764: PUSH
3765: LD_INT 1
3767: PPUSH
3768: LD_INT 3
3770: PUSH
3771: LD_INT 62
3773: PUSH
3774: EMPTY
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: LD_INT 30
3786: PUSH
3787: LD_INT 32
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 30
3796: PUSH
3797: LD_INT 4
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 30
3806: PUSH
3807: LD_INT 5
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 30
3816: PUSH
3817: LD_INT 31
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PPUSH
3835: CALL_OW 70
3839: ST_TO_ADDR
// if empty then
3840: LD_VAR 0 15
3844: IFFALSE 3861
// empty := ReverseArray ( empty ) ;
3846: LD_ADDR_VAR 0 15
3850: PUSH
3851: LD_VAR 0 15
3855: PPUSH
3856: CALL 53303 0 1
3860: ST_TO_ADDR
// for i in sol do
3861: LD_ADDR_VAR 0 1
3865: PUSH
3866: LD_VAR 0 12
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4119
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 8
3878: PUSH
3879: LD_VAR 0 1
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 256
3898: PUSH
3899: LD_INT 1000
3901: LESS
3902: PUSH
3903: LD_VAR 0 8
3907: PUSH
3908: LD_INT 1
3910: NONEQUAL
3911: AND
3912: IFFALSE 3964
// begin SetTag ( i , tHeal ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 1
3921: PPUSH
3922: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3926: LD_VAR 0 1
3930: PPUSH
3931: LD_EXP 29
3935: PUSH
3936: LD_INT 1
3938: ARRAY
3939: PPUSH
3940: LD_EXP 29
3944: PUSH
3945: LD_INT 2
3947: ARRAY
3948: PPUSH
3949: CALL_OW 111
// AddComHold ( i ) ;
3953: LD_VAR 0 1
3957: PPUSH
3958: CALL_OW 200
// continue ;
3962: GO 3871
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3964: LD_VAR 0 1
3968: PPUSH
3969: CALL_OW 256
3973: PUSH
3974: LD_INT 1000
3976: EQUAL
3977: PUSH
3978: LD_VAR 0 8
3982: PUSH
3983: LD_INT 1
3985: EQUAL
3986: AND
3987: IFFALSE 4003
// begin SetTag ( i , 0 ) ;
3989: LD_VAR 0 1
3993: PPUSH
3994: LD_INT 0
3996: PPUSH
3997: CALL_OW 109
// continue ;
4001: GO 3871
// end ; if HasTask ( i ) then
4003: LD_VAR 0 1
4007: PPUSH
4008: CALL_OW 314
4012: IFFALSE 4016
// continue ;
4014: GO 3871
// if not IsInUnit ( i ) and not tag and empty then
4016: LD_VAR 0 1
4020: PPUSH
4021: CALL_OW 310
4025: NOT
4026: PUSH
4027: LD_VAR 0 8
4031: NOT
4032: AND
4033: PUSH
4034: LD_VAR 0 15
4038: AND
4039: IFFALSE 4117
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4041: LD_VAR 0 1
4045: PPUSH
4046: LD_VAR 0 15
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PPUSH
4055: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4059: LD_VAR 0 15
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: PPUSH
4068: CALL_OW 266
4072: PUSH
4073: LD_INT 5
4075: EQUAL
4076: PUSH
4077: LD_INT 50
4079: PPUSH
4080: CALL_OW 13
4084: AND
4085: IFFALSE 4099
// AddComChangeProfession ( i , class_sniper ) ;
4087: LD_VAR 0 1
4091: PPUSH
4092: LD_INT 5
4094: PPUSH
4095: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4099: LD_ADDR_VAR 0 15
4103: PUSH
4104: LD_VAR 0 15
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 3
4116: ST_TO_ADDR
// end ; end ;
4117: GO 3871
4119: POP
4120: POP
// end ; end ; end ;
4121: PPOPN 18
4123: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4124: LD_EXP 33
4128: PPUSH
4129: CALL_OW 302
4133: PUSH
4134: LD_EXP 3
4138: AND
4139: IFFALSE 4421
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin enable ;
4148: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4149: LD_ADDR_VAR 0 2
4153: PUSH
4154: LD_INT 1
4156: PPUSH
4157: LD_INT 81
4159: PUSH
4160: LD_INT 1
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 50
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 70
4181: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4182: LD_ADDR_VAR 0 1
4186: PUSH
4187: LD_INT 17
4189: PPUSH
4190: CALL_OW 435
4194: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4195: LD_EXP 33
4199: PPUSH
4200: CALL_OW 261
4204: PUSH
4205: LD_INT 10
4207: LESS
4208: PUSH
4209: LD_INT 2
4211: PPUSH
4212: LD_EXP 33
4216: PPUSH
4217: CALL_OW 292
4221: NOT
4222: AND
4223: PUSH
4224: LD_EXP 33
4228: PPUSH
4229: CALL_OW 262
4233: PUSH
4234: LD_INT 1
4236: EQUAL
4237: AND
4238: IFFALSE 4252
// SetFuel ( amCargo , 100 ) ;
4240: LD_EXP 33
4244: PPUSH
4245: LD_INT 100
4247: PPUSH
4248: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4252: LD_EXP 33
4256: PPUSH
4257: CALL_OW 314
4261: NOT
4262: PUSH
4263: LD_EXP 33
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 289
4275: PUSH
4276: LD_INT 100
4278: LESS
4279: AND
4280: PUSH
4281: LD_VAR 0 2
4285: NOT
4286: AND
4287: IFFALSE 4353
// begin if cr then
4289: LD_VAR 0 1
4293: IFFALSE 4324
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4295: LD_EXP 33
4299: PPUSH
4300: LD_VAR 0 1
4304: PUSH
4305: LD_INT 1
4307: ARRAY
4308: PPUSH
4309: LD_VAR 0 1
4313: PUSH
4314: LD_INT 2
4316: ARRAY
4317: PPUSH
4318: CALL_OW 117
4322: GO 4351
// if not IsInArea ( amCargo , cratesWestArea ) then
4324: LD_EXP 33
4328: PPUSH
4329: LD_INT 17
4331: PPUSH
4332: CALL_OW 308
4336: NOT
4337: IFFALSE 4351
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4339: LD_EXP 33
4343: PPUSH
4344: LD_INT 17
4346: PPUSH
4347: CALL_OW 113
// exit ;
4351: GO 4421
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4353: LD_VAR 0 2
4357: PUSH
4358: LD_EXP 33
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 308
4370: NOT
4371: AND
4372: IFFALSE 4391
// ComMoveXY ( amCargo , 93 , 137 ) else
4374: LD_EXP 33
4378: PPUSH
4379: LD_INT 93
4381: PPUSH
4382: LD_INT 137
4384: PPUSH
4385: CALL_OW 111
4389: GO 4421
// if GetCargo ( amCargo , mat_cans ) = 100 then
4391: LD_EXP 33
4395: PPUSH
4396: LD_INT 1
4398: PPUSH
4399: CALL_OW 289
4403: PUSH
4404: LD_INT 100
4406: EQUAL
4407: IFFALSE 4421
// ComGive ( amCargo , amBase ) ;
4409: LD_EXP 33
4413: PPUSH
4414: LD_INT 2
4416: PPUSH
4417: CALL_OW 161
// end ;
4421: PPOPN 2
4423: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4424: LD_EXP 3
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: LD_INT 3
4441: PUSH
4442: LD_INT 60
4444: PUSH
4445: EMPTY
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 50
4454: PUSH
4455: EMPTY
4456: LIST
4457: PUSH
4458: LD_INT 34
4460: PUSH
4461: LD_INT 13
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: PPUSH
4474: CALL_OW 69
4478: AND
4479: PUSH
4480: LD_INT 22
4482: PUSH
4483: LD_INT 1
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 3
4492: PUSH
4493: LD_INT 24
4495: PUSH
4496: LD_INT 1000
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: LD_INT 3
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: PPUSH
4522: CALL_OW 69
4526: AND
4527: IFFALSE 4760
4529: GO 4531
4531: DISABLE
4532: LD_INT 0
4534: PPUSH
4535: PPUSH
4536: PPUSH
// begin enable ;
4537: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4538: LD_ADDR_VAR 0 2
4542: PUSH
4543: LD_INT 22
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 3
4555: PUSH
4556: LD_INT 24
4558: PUSH
4559: LD_INT 1000
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: PPUSH
4585: CALL_OW 69
4589: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_INT 1
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 3
4607: PUSH
4608: LD_INT 24
4610: PUSH
4611: LD_INT 600
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 21
4624: PUSH
4625: LD_INT 3
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PPUSH
4637: CALL_OW 69
4641: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4642: LD_ADDR_VAR 0 1
4646: PUSH
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 60
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 50
4672: PUSH
4673: EMPTY
4674: LIST
4675: PUSH
4676: LD_INT 34
4678: PUSH
4679: LD_INT 13
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 69
4696: PUSH
4697: FOR_IN
4698: IFFALSE 4758
// begin if tmp2 then
4700: LD_VAR 0 3
4704: IFFALSE 4732
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4706: LD_VAR 0 1
4710: PPUSH
4711: LD_VAR 0 3
4715: PPUSH
4716: LD_VAR 0 1
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 130
4730: GO 4756
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4732: LD_VAR 0 1
4736: PPUSH
4737: LD_VAR 0 2
4741: PPUSH
4742: LD_VAR 0 1
4746: PPUSH
4747: CALL_OW 74
4751: PPUSH
4752: CALL_OW 130
// end ;
4756: GO 4697
4758: POP
4759: POP
// end ;
4760: PPOPN 3
4762: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4763: LD_EXP 34
4767: PUSH
4768: LD_EXP 19
4772: AND
4773: PUSH
4774: LD_EXP 11
4778: NOT
4779: AND
4780: IFFALSE 5105
4782: GO 4784
4784: DISABLE
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
4791: PPUSH
4792: PPUSH
4793: PPUSH
// begin enable ;
4794: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4795: LD_ADDR_VAR 0 3
4799: PUSH
4800: LD_INT 30
4802: PUSH
4803: LD_INT 31
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 32
4812: PUSH
4813: LD_INT 33
4815: PUSH
4816: LD_INT 34
4818: PUSH
4819: LD_INT 35
4821: PUSH
4822: LD_INT 33
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 36
4834: PUSH
4835: LD_INT 37
4837: PUSH
4838: LD_INT 38
4840: PUSH
4841: LD_INT 39
4843: PUSH
4844: LD_INT 40
4846: PUSH
4847: LD_INT 41
4849: PUSH
4850: LD_INT 42
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
// for i in amPatrol do
4871: LD_ADDR_VAR 0 1
4875: PUSH
4876: LD_EXP 34
4880: PUSH
4881: FOR_IN
4882: IFFALSE 5103
// begin if See ( 2 , i ) then
4884: LD_INT 2
4886: PPUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 292
4896: IFFALSE 4999
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4898: LD_ADDR_VAR 0 7
4902: PUSH
4903: LD_INT 22
4905: PUSH
4906: LD_INT 2
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PPUSH
4913: CALL_OW 69
4917: PPUSH
4918: LD_VAR 0 1
4922: PPUSH
4923: CALL_OW 74
4927: ST_TO_ADDR
// if enemy then
4928: LD_VAR 0 7
4932: IFFALSE 4999
// begin x := GetX ( enemy ) ;
4934: LD_ADDR_VAR 0 4
4938: PUSH
4939: LD_VAR 0 7
4943: PPUSH
4944: CALL_OW 250
4948: ST_TO_ADDR
// y := GetY ( enemy ) ;
4949: LD_ADDR_VAR 0 5
4953: PUSH
4954: LD_VAR 0 7
4958: PPUSH
4959: CALL_OW 251
4963: ST_TO_ADDR
// if ValidHex ( x , y ) then
4964: LD_VAR 0 4
4968: PPUSH
4969: LD_VAR 0 5
4973: PPUSH
4974: CALL_OW 488
4978: IFFALSE 4999
// ComAgressiveMove ( i , x , y ) ;
4980: LD_VAR 0 1
4984: PPUSH
4985: LD_VAR 0 4
4989: PPUSH
4990: LD_VAR 0 5
4994: PPUSH
4995: CALL_OW 114
// end ; end ; if HasTask ( i ) then
4999: LD_VAR 0 1
5003: PPUSH
5004: CALL_OW 314
5008: IFFALSE 5012
// continue ;
5010: GO 4881
// tag := GetTag ( i ) ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_VAR 0 1
5021: PPUSH
5022: CALL_OW 110
5026: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5027: LD_ADDR_VAR 0 2
5031: PUSH
5032: DOUBLE
5033: LD_INT 1
5035: DEC
5036: ST_TO_ADDR
5037: LD_VAR 0 3
5041: PUSH
5042: LD_VAR 0 6
5046: ARRAY
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5099
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5051: LD_VAR 0 1
5055: PPUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 6
5065: ARRAY
5066: PUSH
5067: LD_VAR 0 2
5071: ARRAY
5072: PPUSH
5073: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_INT 175
5084: PPUSH
5085: LD_INT 385
5087: PPUSH
5088: CALL_OW 12
5092: PPUSH
5093: CALL_OW 202
// end ;
5097: GO 5048
5099: POP
5100: POP
// end ;
5101: GO 4881
5103: POP
5104: POP
// end ;
5105: PPOPN 7
5107: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5108: LD_EXP 31
5112: PPUSH
5113: CALL 22427 0 1
5117: PUSH
5118: LD_INT 5
5120: LESS
5121: PUSH
5122: LD_EXP 3
5126: AND
5127: PUSH
5128: LD_EXP 8
5132: AND
5133: PUSH
5134: LD_EXP 7
5138: AND
5139: IFFALSE 5333
5141: GO 5143
5143: DISABLE
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
// begin enable ;
5149: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5150: LD_ADDR_VAR 0 2
5154: PUSH
5155: LD_INT 3
5157: PUSH
5158: LD_INT 9
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 4
5167: PUSH
5168: LD_INT 9
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: LD_INT 4
5177: PUSH
5178: LD_INT 6
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_INT 3
5187: PUSH
5188: LD_INT 5
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: PUSH
5195: LD_INT 2
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 1
5207: PUSH
5208: LD_INT 2
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
5223: LD_ADDR_VAR 0 1
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 3
5235: PUSH
5236: LD_INT 4
5238: PUSH
5239: LD_INT 5
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: PUSH
5257: FOR_TO
5258: IFFALSE 5331
// begin part := parts [ rand ( 1 , parts ) ] ;
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: LD_VAR 0 2
5269: PUSH
5270: LD_INT 1
5272: PPUSH
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 12
5282: ARRAY
5283: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5284: LD_ADDR_EXP 28
5288: PUSH
5289: LD_EXP 28
5293: PPUSH
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: PUSH
5303: LD_INT 1
5305: PUSH
5306: LD_INT 2
5308: PUSH
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 2
5316: ARRAY
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: CALL 58027 0 2
5328: ST_TO_ADDR
5329: GO 5257
5331: POP
5332: POP
// end ;
5333: PPOPN 3
5335: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5336: LD_EXP 11
5340: NOT
5341: PUSH
5342: LD_EXP 31
5346: PPUSH
5347: CALL 22427 0 1
5351: AND
5352: PUSH
5353: LD_EXP 8
5357: AND
5358: PUSH
5359: LD_EXP 7
5363: AND
5364: IFFALSE 5573
5366: GO 5368
5368: DISABLE
5369: LD_INT 0
5371: PPUSH
5372: PPUSH
5373: PPUSH
// begin enable ;
5374: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5375: LD_ADDR_VAR 0 2
5379: PUSH
5380: LD_EXP 31
5384: PPUSH
5385: LD_INT 61
5387: PUSH
5388: EMPTY
5389: LIST
5390: PUSH
5391: LD_INT 50
5393: PUSH
5394: EMPTY
5395: LIST
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: CALL_OW 72
5405: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5406: LD_ADDR_EXP 31
5410: PUSH
5411: LD_EXP 31
5415: PUSH
5416: LD_VAR 0 2
5420: DIFF
5421: ST_TO_ADDR
// if not tmp then
5422: LD_VAR 0 2
5426: NOT
5427: IFFALSE 5431
// exit ;
5429: GO 5573
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5431: LD_ADDR_VAR 0 3
5435: PUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_INT 34
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PPUSH
5451: CALL_OW 72
5455: ST_TO_ADDR
// if tmp2 then
5456: LD_VAR 0 3
5460: IFFALSE 5477
// ComMoveXY ( tmp2 , 241 , 99 ) ;
5462: LD_VAR 0 3
5466: PPUSH
5467: LD_INT 241
5469: PPUSH
5470: LD_INT 99
5472: PPUSH
5473: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5477: LD_INT 35
5479: PPUSH
5480: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5484: LD_ADDR_VAR 0 2
5488: PUSH
5489: LD_VAR 0 2
5493: PPUSH
5494: LD_INT 50
5496: PUSH
5497: EMPTY
5498: LIST
5499: PPUSH
5500: CALL_OW 72
5504: ST_TO_ADDR
// for i in tmp do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_VAR 0 2
5514: PUSH
5515: FOR_IN
5516: IFFALSE 5564
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: LD_INT 187
5525: PUSH
5526: LD_INT 114
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 203
5535: PUSH
5536: LD_INT 113
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 218
5545: PUSH
5546: LD_INT 108
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: PPUSH
5558: CALL 60631 0 2
5562: GO 5515
5564: POP
5565: POP
// until not tmp ;
5566: LD_VAR 0 2
5570: NOT
5571: IFFALSE 5477
// end ; end_of_file
5573: PPOPN 3
5575: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5576: LD_INT 0
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
5584: PPUSH
// uc_side := 8 ;
5585: LD_ADDR_OWVAR 20
5589: PUSH
5590: LD_INT 8
5592: ST_TO_ADDR
// uc_nation := nation_arabian ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_INT 2
5600: ST_TO_ADDR
// legForces := [ ] ;
5601: LD_ADDR_EXP 36
5605: PUSH
5606: EMPTY
5607: ST_TO_ADDR
// legEForces := [ ] ;
5608: LD_ADDR_EXP 37
5612: PUSH
5613: EMPTY
5614: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5615: LD_ADDR_EXP 38
5619: PUSH
5620: LD_INT 8
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: LD_INT 1
5628: PPUSH
5629: CALL 20388 0 3
5633: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5634: LD_ADDR_EXP 39
5638: PUSH
5639: LD_INT 13
5641: PUSH
5642: LD_INT 1
5644: PUSH
5645: LD_INT 2
5647: PUSH
5648: LD_INT 32
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: PUSH
5657: EMPTY
5658: LIST
5659: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5660: LD_ADDR_EXP 40
5664: PUSH
5665: LD_INT 195
5667: PUSH
5668: LD_INT 15
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: ST_TO_ADDR
// legBuildings := [ ] ;
5675: LD_ADDR_EXP 41
5679: PUSH
5680: EMPTY
5681: ST_TO_ADDR
// legTanks := [ ] ;
5682: LD_ADDR_EXP 42
5686: PUSH
5687: EMPTY
5688: ST_TO_ADDR
// legRTanks := [ ] ;
5689: LD_ADDR_EXP 43
5693: PUSH
5694: EMPTY
5695: ST_TO_ADDR
// legCargo := 0 ;
5696: LD_ADDR_EXP 44
5700: PUSH
5701: LD_INT 0
5703: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5704: LD_ADDR_VAR 0 7
5708: PUSH
5709: LD_INT 219
5711: PUSH
5712: LD_INT 31
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: LD_INT 166
5721: PUSH
5722: LD_INT 31
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: ST_TO_ADDR
// for i in sources do
5733: LD_ADDR_VAR 0 2
5737: PUSH
5738: LD_VAR 0 7
5742: PUSH
5743: FOR_IN
5744: IFFALSE 5773
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
5746: LD_VAR 0 2
5750: PUSH
5751: LD_INT 1
5753: ARRAY
5754: PPUSH
5755: LD_VAR 0 2
5759: PUSH
5760: LD_INT 2
5762: ARRAY
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL_OW 441
5771: GO 5743
5773: POP
5774: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
5775: LD_INT 38
5777: PPUSH
5778: CALL_OW 274
5782: PPUSH
5783: LD_INT 1
5785: PPUSH
5786: LD_INT 650
5788: PPUSH
5789: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
5793: LD_INT 38
5795: PPUSH
5796: CALL_OW 274
5800: PPUSH
5801: LD_INT 2
5803: PPUSH
5804: LD_INT 120
5806: PPUSH
5807: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
5811: LD_INT 38
5813: PPUSH
5814: CALL_OW 274
5818: PPUSH
5819: LD_INT 3
5821: PPUSH
5822: LD_INT 50
5824: PPUSH
5825: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
5829: LD_ADDR_VAR 0 6
5833: PUSH
5834: LD_INT 6
5836: PUSH
5837: LD_INT 7
5839: PUSH
5840: LD_INT 8
5842: PUSH
5843: LD_INT 9
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: PUSH
5852: LD_OWVAR 67
5856: ARRAY
5857: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
5858: LD_ADDR_EXP 35
5862: PUSH
5863: LD_STRING Farmer
5865: PPUSH
5866: LD_INT 0
5868: PPUSH
5869: LD_STRING 
5871: PPUSH
5872: CALL 20325 0 3
5876: ST_TO_ADDR
// for i := 1 to 4 do
5877: LD_ADDR_VAR 0 2
5881: PUSH
5882: DOUBLE
5883: LD_INT 1
5885: DEC
5886: ST_TO_ADDR
5887: LD_INT 4
5889: PUSH
5890: FOR_TO
5891: IFFALSE 6408
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: DOUBLE
5899: LD_INT 1
5901: DEC
5902: ST_TO_ADDR
5903: LD_INT 7
5905: PUSH
5906: LD_INT 8
5908: PUSH
5909: LD_INT 9
5911: PUSH
5912: LD_INT 11
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: PUSH
5921: LD_OWVAR 67
5925: ARRAY
5926: PUSH
5927: LD_INT 3
5929: PUSH
5930: LD_INT 4
5932: PUSH
5933: LD_INT 5
5935: PUSH
5936: LD_INT 5
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: PUSH
5945: LD_OWVAR 67
5949: ARRAY
5950: PUSH
5951: LD_INT 3
5953: PUSH
5954: LD_INT 2
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: LD_INT 3
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: PUSH
5972: LD_OWVAR 67
5976: ARRAY
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: PUSH
5984: LD_VAR 0 2
5988: ARRAY
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6404
// begin PrepareHuman ( false , i , skill ) ;
5993: LD_INT 0
5995: PPUSH
5996: LD_VAR 0 2
6000: PPUSH
6001: LD_VAR 0 6
6005: PPUSH
6006: CALL_OW 380
// un := CreateHuman ;
6010: LD_ADDR_VAR 0 5
6014: PUSH
6015: CALL_OW 44
6019: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6020: LD_ADDR_EXP 36
6024: PUSH
6025: LD_EXP 36
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 58027 0 2
6039: ST_TO_ADDR
// case i of 1 :
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 1
6047: DOUBLE
6048: EQUAL
6049: IFTRUE 6053
6051: GO 6122
6053: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6054: LD_ADDR_VAR 0 4
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_INT 8
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 2
6071: PUSH
6072: LD_INT 30
6074: PUSH
6075: LD_INT 32
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 30
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 62
6102: PUSH
6103: EMPTY
6104: LIST
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: PPUSH
6115: CALL_OW 69
6119: ST_TO_ADDR
6120: GO 6301
6122: LD_INT 2
6124: DOUBLE
6125: EQUAL
6126: IFTRUE 6130
6128: GO 6159
6130: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6131: LD_ADDR_VAR 0 4
6135: PUSH
6136: LD_INT 38
6138: PPUSH
6139: LD_INT 3
6141: PUSH
6142: LD_INT 62
6144: PUSH
6145: EMPTY
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 72
6156: ST_TO_ADDR
6157: GO 6301
6159: LD_INT 3
6161: DOUBLE
6162: EQUAL
6163: IFTRUE 6167
6165: GO 6241
6167: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6168: LD_ADDR_VAR 0 4
6172: PUSH
6173: LD_INT 22
6175: PUSH
6176: LD_INT 8
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 3
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 30
6198: PUSH
6199: LD_INT 36
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: LD_INT 62
6216: PUSH
6217: EMPTY
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: PPUSH
6229: CALL_OW 69
6233: PPUSH
6234: CALL 53303 0 1
6238: ST_TO_ADDR
6239: GO 6301
6241: LD_INT 4
6243: DOUBLE
6244: EQUAL
6245: IFTRUE 6249
6247: GO 6300
6249: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6250: LD_ADDR_VAR 0 4
6254: PUSH
6255: LD_INT 22
6257: PUSH
6258: LD_INT 8
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 30
6267: PUSH
6268: LD_INT 8
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: LD_INT 62
6280: PUSH
6281: EMPTY
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 69
6297: ST_TO_ADDR
6298: GO 6301
6300: POP
// if b then
6301: LD_VAR 0 4
6305: IFFALSE 6381
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6307: LD_VAR 0 4
6311: PUSH
6312: LD_INT 1
6314: ARRAY
6315: PPUSH
6316: CALL_OW 266
6320: PUSH
6321: LD_INT 5
6323: EQUAL
6324: IFFALSE 6361
// if Prob ( 50 ) then
6326: LD_INT 50
6328: PPUSH
6329: CALL_OW 13
6333: IFFALSE 6349
// SetClass ( un , class_mortar ) else
6335: LD_VAR 0 5
6339: PPUSH
6340: LD_INT 8
6342: PPUSH
6343: CALL_OW 336
6347: GO 6361
// SetClass ( un , class_sniper ) ;
6349: LD_VAR 0 5
6353: PPUSH
6354: LD_INT 5
6356: PPUSH
6357: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6361: LD_VAR 0 5
6365: PPUSH
6366: LD_VAR 0 4
6370: PUSH
6371: LD_INT 1
6373: ARRAY
6374: PPUSH
6375: CALL_OW 52
// end else
6379: GO 6402
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6381: LD_VAR 0 5
6385: PPUSH
6386: LD_INT 188
6388: PPUSH
6389: LD_INT 21
6391: PPUSH
6392: LD_INT 4
6394: PPUSH
6395: LD_INT 0
6397: PPUSH
6398: CALL_OW 50
// end ;
6402: GO 5990
6404: POP
6405: POP
6406: GO 5890
6408: POP
6409: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6410: LD_ADDR_VAR 0 4
6414: PUSH
6415: LD_INT 22
6417: PUSH
6418: LD_INT 8
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: LD_INT 30
6430: PUSH
6431: LD_INT 32
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 30
6440: PUSH
6441: LD_INT 5
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: PUSH
6453: LD_INT 3
6455: PUSH
6456: LD_INT 62
6458: PUSH
6459: EMPTY
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: PPUSH
6471: CALL_OW 69
6475: ST_TO_ADDR
// if b then
6476: LD_VAR 0 4
6480: IFFALSE 6547
// begin for i in b do
6482: LD_ADDR_VAR 0 2
6486: PUSH
6487: LD_VAR 0 4
6491: PUSH
6492: FOR_IN
6493: IFFALSE 6545
// begin PrepareApemanSoldier ( ) ;
6495: CALL 54137 0 0
// un := CreateHuman ;
6499: LD_ADDR_VAR 0 5
6503: PUSH
6504: CALL_OW 44
6508: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6509: LD_ADDR_EXP 36
6513: PUSH
6514: LD_EXP 36
6518: PPUSH
6519: LD_VAR 0 5
6523: PPUSH
6524: CALL 58027 0 2
6528: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6529: LD_VAR 0 5
6533: PPUSH
6534: LD_VAR 0 2
6538: PPUSH
6539: CALL_OW 52
// end ;
6543: GO 6492
6545: POP
6546: POP
// end ; for i := 1 to 2 do
6547: LD_ADDR_VAR 0 2
6551: PUSH
6552: DOUBLE
6553: LD_INT 1
6555: DEC
6556: ST_TO_ADDR
6557: LD_INT 2
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6688
// begin uc_nation := nation_arabian ;
6563: LD_ADDR_OWVAR 21
6567: PUSH
6568: LD_INT 2
6570: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6571: LD_INT 13
6573: PPUSH
6574: LD_INT 2
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: LD_INT 31
6582: PPUSH
6583: LD_INT 100
6585: PPUSH
6586: CALL 25165 0 5
// un := CreateVehicle ;
6590: LD_ADDR_VAR 0 5
6594: PUSH
6595: CALL_OW 45
6599: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6600: LD_VAR 0 5
6604: PPUSH
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 5
6610: PPUSH
6611: CALL_OW 12
6615: PPUSH
6616: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6620: LD_VAR 0 5
6624: PPUSH
6625: LD_INT 199
6627: PPUSH
6628: LD_INT 24
6630: PPUSH
6631: LD_INT 4
6633: PPUSH
6634: LD_INT 0
6636: PPUSH
6637: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6641: LD_INT 0
6643: PPUSH
6644: LD_INT 8
6646: PUSH
6647: LD_INT 9
6649: PUSH
6650: LD_INT 10
6652: PUSH
6653: LD_INT 10
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PUSH
6662: LD_OWVAR 67
6666: ARRAY
6667: PPUSH
6668: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6672: CALL_OW 44
6676: PPUSH
6677: LD_VAR 0 5
6681: PPUSH
6682: CALL_OW 52
// end ;
6686: GO 6560
6688: POP
6689: POP
// end ;
6690: LD_VAR 0 1
6694: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6695: LD_EXP 4
6699: PUSH
6700: LD_EXP 36
6704: PPUSH
6705: CALL 22427 0 1
6709: AND
6710: IFFALSE 9083
6712: GO 6714
6714: DISABLE
6715: LD_INT 0
6717: PPUSH
6718: PPUSH
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
6725: PPUSH
6726: PPUSH
6727: PPUSH
6728: PPUSH
6729: PPUSH
6730: PPUSH
6731: PPUSH
6732: PPUSH
6733: PPUSH
6734: PPUSH
// begin enable ;
6735: ENABLE
// side := 8 ;
6736: LD_ADDR_VAR 0 5
6740: PUSH
6741: LD_INT 8
6743: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_VAR 0 5
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 33
6763: PUSH
6764: LD_INT 2
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 50
6773: PUSH
6774: EMPTY
6775: LIST
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 61
6782: PUSH
6783: EMPTY
6784: LIST
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: PPUSH
6796: CALL_OW 69
6800: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
6801: LD_VAR 0 3
6805: PUSH
6806: LD_INT 22
6808: PUSH
6809: LD_VAR 0 5
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: LD_INT 50
6820: PUSH
6821: EMPTY
6822: LIST
6823: PUSH
6824: LD_INT 34
6826: PUSH
6827: LD_INT 31
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: PPUSH
6839: CALL_OW 69
6843: PPUSH
6844: CALL 22427 0 1
6848: AND
6849: IFFALSE 6877
// for i in remote do
6851: LD_ADDR_VAR 0 1
6855: PUSH
6856: LD_VAR 0 3
6860: PUSH
6861: FOR_IN
6862: IFFALSE 6875
// Connect ( i ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL 28633 0 1
6873: GO 6861
6875: POP
6876: POP
// if legTech then
6877: LD_EXP 38
6881: IFFALSE 7037
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6883: LD_ADDR_VAR 0 6
6887: PUSH
6888: LD_INT 22
6890: PUSH
6891: LD_VAR 0 5
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 50
6902: PUSH
6903: EMPTY
6904: LIST
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: LD_INT 30
6911: PUSH
6912: LD_INT 6
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 30
6921: PUSH
6922: LD_INT 7
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 30
6931: PUSH
6932: LD_INT 8
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: ST_TO_ADDR
// if lab then
6955: LD_VAR 0 6
6959: IFFALSE 7037
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6961: LD_VAR 0 6
6965: PUSH
6966: LD_INT 1
6968: ARRAY
6969: PPUSH
6970: CALL_OW 461
6974: PUSH
6975: LD_INT 2
6977: EQUAL
6978: IFFALSE 7037
// begin for i in legTech do
6980: LD_ADDR_VAR 0 1
6984: PUSH
6985: LD_EXP 38
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7035
// if CanBeResearched ( lab [ 1 ] , i ) then
6993: LD_VAR 0 6
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 430
7011: IFFALSE 7033
// begin ComResearch ( lab [ 1 ] , i ) ;
7013: LD_VAR 0 6
7017: PUSH
7018: LD_INT 1
7020: ARRAY
7021: PPUSH
7022: LD_VAR 0 1
7026: PPUSH
7027: CALL_OW 124
// break ;
7031: GO 7035
// end ;
7033: GO 6990
7035: POP
7036: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7037: LD_ADDR_VAR 0 16
7041: PUSH
7042: LD_INT 2
7044: PPUSH
7045: LD_INT 22
7047: PUSH
7048: LD_VAR 0 5
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 30
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 50
7069: PUSH
7070: EMPTY
7071: LIST
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PPUSH
7078: CALL_OW 70
7082: ST_TO_ADDR
// if fac then
7083: LD_VAR 0 16
7087: IFFALSE 7353
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7089: LD_VAR 0 16
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: CALL_OW 461
7102: PUSH
7103: LD_INT 2
7105: EQUAL
7106: IFFALSE 7353
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7108: LD_ADDR_VAR 0 17
7112: PUSH
7113: LD_INT 2
7115: PPUSH
7116: LD_INT 2
7118: PUSH
7119: LD_INT 30
7121: PUSH
7122: LD_INT 32
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 30
7131: PUSH
7132: LD_INT 33
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: LD_INT 35
7146: PUSH
7147: LD_INT 0
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PPUSH
7158: CALL_OW 70
7162: ST_TO_ADDR
// if emptyTowers then
7163: LD_VAR 0 17
7167: IFFALSE 7215
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7169: LD_ADDR_VAR 0 18
7173: PUSH
7174: LD_VAR 0 17
7178: PUSH
7179: LD_INT 1
7181: ARRAY
7182: PPUSH
7183: LD_INT 2
7185: PPUSH
7186: CALL 30672 0 2
7190: ST_TO_ADDR
// if weapon then
7191: LD_VAR 0 18
7195: IFFALSE 7215
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7197: LD_VAR 0 17
7201: PUSH
7202: LD_INT 1
7204: ARRAY
7205: PPUSH
7206: LD_VAR 0 18
7210: PPUSH
7211: CALL_OW 148
// end ; if legConstructList then
7215: LD_EXP 39
7219: IFFALSE 7353
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7221: LD_VAR 0 16
7225: PUSH
7226: LD_INT 1
7228: ARRAY
7229: PPUSH
7230: LD_EXP 39
7234: PUSH
7235: LD_INT 1
7237: ARRAY
7238: PUSH
7239: LD_INT 1
7241: ARRAY
7242: PPUSH
7243: LD_EXP 39
7247: PUSH
7248: LD_INT 1
7250: ARRAY
7251: PUSH
7252: LD_INT 2
7254: ARRAY
7255: PPUSH
7256: LD_EXP 39
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PUSH
7265: LD_INT 3
7267: ARRAY
7268: PPUSH
7269: LD_EXP 39
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PUSH
7278: LD_INT 4
7280: ARRAY
7281: PPUSH
7282: CALL_OW 448
7286: IFFALSE 7353
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7288: LD_VAR 0 16
7292: PUSH
7293: LD_INT 1
7295: ARRAY
7296: PPUSH
7297: LD_EXP 39
7301: PUSH
7302: LD_INT 1
7304: ARRAY
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: LD_EXP 39
7314: PUSH
7315: LD_INT 1
7317: ARRAY
7318: PUSH
7319: LD_INT 2
7321: ARRAY
7322: PPUSH
7323: LD_EXP 39
7327: PUSH
7328: LD_INT 1
7330: ARRAY
7331: PUSH
7332: LD_INT 3
7334: ARRAY
7335: PPUSH
7336: LD_EXP 39
7340: PUSH
7341: LD_INT 1
7343: ARRAY
7344: PUSH
7345: LD_INT 4
7347: ARRAY
7348: PPUSH
7349: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7353: LD_ADDR_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: PPUSH
7361: LD_INT 21
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: LD_INT 57
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: LD_INT 24
7389: PUSH
7390: LD_INT 1000
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: LIST
7405: PPUSH
7406: CALL_OW 70
7410: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7411: LD_ADDR_VAR 0 10
7415: PUSH
7416: LD_INT 14
7418: PPUSH
7419: CALL_OW 435
7423: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7424: LD_ADDR_VAR 0 11
7428: PUSH
7429: LD_EXP 36
7433: PPUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 4
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 50
7446: PUSH
7447: EMPTY
7448: LIST
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PPUSH
7454: CALL_OW 72
7458: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7459: LD_ADDR_VAR 0 6
7463: PUSH
7464: LD_INT 2
7466: PPUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 30
7472: PUSH
7473: LD_INT 6
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 30
7482: PUSH
7483: LD_INT 7
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 30
7492: PUSH
7493: LD_INT 8
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: PPUSH
7506: CALL_OW 70
7510: ST_TO_ADDR
// if sci then
7511: LD_VAR 0 11
7515: IFFALSE 7674
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7517: LD_ADDR_VAR 0 13
7521: PUSH
7522: LD_EXP 36
7526: PPUSH
7527: LD_INT 95
7529: PUSH
7530: LD_INT 2
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 120
7539: PUSH
7540: LD_INT 1
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PPUSH
7551: CALL_OW 72
7555: ST_TO_ADDR
// if hurtUnits then
7556: LD_VAR 0 13
7560: IFFALSE 7621
// begin for i in sci do
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: LD_VAR 0 11
7571: PUSH
7572: FOR_IN
7573: IFFALSE 7617
// if IsInUnit ( i ) then
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 310
7584: IFFALSE 7597
// ComExitBuilding ( i ) else
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 122
7595: GO 7615
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7597: LD_VAR 0 1
7601: PPUSH
7602: LD_VAR 0 13
7606: PUSH
7607: LD_INT 1
7609: ARRAY
7610: PPUSH
7611: CALL_OW 128
7615: GO 7572
7617: POP
7618: POP
// end else
7619: GO 7674
// if lab then
7621: LD_VAR 0 6
7625: IFFALSE 7674
// begin for i in sci do
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: LD_VAR 0 11
7636: PUSH
7637: FOR_IN
7638: IFFALSE 7672
// if not IsInUnit ( i ) then
7640: LD_VAR 0 1
7644: PPUSH
7645: CALL_OW 310
7649: NOT
7650: IFFALSE 7670
// ComEnterUnit ( i , lab [ 1 ] ) ;
7652: LD_VAR 0 1
7656: PPUSH
7657: LD_VAR 0 6
7661: PUSH
7662: LD_INT 1
7664: ARRAY
7665: PPUSH
7666: CALL_OW 120
7670: GO 7637
7672: POP
7673: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
7674: LD_ADDR_VAR 0 7
7678: PUSH
7679: LD_EXP 36
7683: PPUSH
7684: LD_INT 25
7686: PUSH
7687: LD_INT 2
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PPUSH
7694: CALL_OW 72
7698: ST_TO_ADDR
// if eng then
7699: LD_VAR 0 7
7703: IFFALSE 8478
// begin for i in eng do
7705: LD_ADDR_VAR 0 1
7709: PUSH
7710: LD_VAR 0 7
7714: PUSH
7715: FOR_IN
7716: IFFALSE 8476
// begin tag := GetTag ( i ) ;
7718: LD_ADDR_VAR 0 8
7722: PUSH
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 110
7732: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
7733: LD_VAR 0 1
7737: PPUSH
7738: CALL_OW 256
7742: PUSH
7743: LD_INT 800
7745: LESS
7746: PUSH
7747: LD_VAR 0 8
7751: PUSH
7752: LD_INT 1
7754: NONEQUAL
7755: AND
7756: IFFALSE 7806
// begin SetTag ( i , tHeal ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 1
7765: PPUSH
7766: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_EXP 40
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: PPUSH
7784: LD_EXP 40
7788: PUSH
7789: LD_INT 2
7791: ARRAY
7792: PPUSH
7793: CALL_OW 111
// AddComHold ( i ) ;
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7806: LD_VAR 0 8
7810: PUSH
7811: LD_INT 1
7813: EQUAL
7814: PUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 256
7824: PUSH
7825: LD_INT 1000
7827: EQUAL
7828: AND
7829: IFFALSE 7843
// SetTag ( i , 0 ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_INT 0
7838: PPUSH
7839: CALL_OW 109
// if not tag then
7843: LD_VAR 0 8
7847: NOT
7848: IFFALSE 8016
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
7850: LD_ADDR_VAR 0 4
7854: PUSH
7855: LD_INT 2
7857: PPUSH
7858: LD_INT 57
7860: PUSH
7861: EMPTY
7862: LIST
7863: PPUSH
7864: CALL_OW 70
7868: ST_TO_ADDR
// if undone then
7869: LD_VAR 0 4
7873: IFFALSE 7895
// begin ComComplete ( i , undone [ 1 ] ) ;
7875: LD_VAR 0 1
7879: PPUSH
7880: LD_VAR 0 4
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PPUSH
7889: CALL 28525 0 2
// continue ;
7893: GO 7715
// end ; if cr or tmp or Count ( legBuildings ) then
7895: LD_VAR 0 10
7899: PUSH
7900: LD_VAR 0 2
7904: OR
7905: PUSH
7906: LD_EXP 41
7910: PPUSH
7911: CALL 22427 0 1
7915: OR
7916: IFFALSE 7992
// begin if IsInUnit ( i ) then
7918: LD_VAR 0 1
7922: PPUSH
7923: CALL_OW 310
7927: IFFALSE 7938
// ComExitBuilding ( i ) ;
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL_OW 122
// if tmp then
7938: LD_VAR 0 2
7942: IFFALSE 7958
// SetTag ( i , tRepair ) else
7944: LD_VAR 0 1
7948: PPUSH
7949: LD_INT 3
7951: PPUSH
7952: CALL_OW 109
7956: GO 7990
// if cr then
7958: LD_VAR 0 10
7962: IFFALSE 7978
// SetTag ( i , tCrates ) else
7964: LD_VAR 0 1
7968: PPUSH
7969: LD_INT 2
7971: PPUSH
7972: CALL_OW 109
7976: GO 7990
// SetTag ( i , tBuild ) ;
7978: LD_VAR 0 1
7982: PPUSH
7983: LD_INT 5
7985: PPUSH
7986: CALL_OW 109
// end else
7990: GO 8016
// if not IsInUnit ( i ) then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 310
8001: NOT
8002: IFFALSE 8016
// ComEnterUnit ( i , legBase ) ;
8004: LD_VAR 0 1
8008: PPUSH
8009: LD_INT 38
8011: PPUSH
8012: CALL_OW 120
// end ; if tag = tRepair then
8016: LD_VAR 0 8
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8126
// begin if IsInUnit ( i ) then
8026: LD_VAR 0 1
8030: PPUSH
8031: CALL_OW 310
8035: IFFALSE 8048
// begin ComExitBuilding ( i ) ;
8037: LD_VAR 0 1
8041: PPUSH
8042: CALL_OW 122
// continue ;
8046: GO 7715
// end ; if not tmp then
8048: LD_VAR 0 2
8052: NOT
8053: IFFALSE 8069
// begin SetTag ( i , 0 ) ;
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 109
// continue ;
8067: GO 7715
// end ; if not HasTask ( i ) then
8069: LD_VAR 0 1
8073: PPUSH
8074: CALL_OW 314
8078: NOT
8079: IFFALSE 8099
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8081: LD_VAR 0 1
8085: PPUSH
8086: LD_VAR 0 2
8090: PUSH
8091: LD_INT 1
8093: ARRAY
8094: PPUSH
8095: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8099: LD_VAR 0 1
8103: PPUSH
8104: LD_INT 2
8106: PPUSH
8107: CALL_OW 308
8111: NOT
8112: IFFALSE 8126
// ComMoveToArea ( i , legBaseArea ) ;
8114: LD_VAR 0 1
8118: PPUSH
8119: LD_INT 2
8121: PPUSH
8122: CALL_OW 113
// end ; if tag = tBuild then
8126: LD_VAR 0 8
8130: PUSH
8131: LD_INT 5
8133: EQUAL
8134: IFFALSE 8329
// begin if IsInUnit ( i ) then
8136: LD_VAR 0 1
8140: PPUSH
8141: CALL_OW 310
8145: IFFALSE 8158
// begin ComExitBuilding ( i ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: CALL_OW 122
// continue ;
8156: GO 7715
// end ; if not Count ( legBuildings ) then
8158: LD_EXP 41
8162: PPUSH
8163: CALL 22427 0 1
8167: NOT
8168: IFFALSE 8186
// begin SetTag ( i , 0 ) ;
8170: LD_VAR 0 1
8174: PPUSH
8175: LD_INT 0
8177: PPUSH
8178: CALL_OW 109
// continue ;
8182: GO 7715
// end else
8184: GO 8223
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8186: LD_INT 38
8188: PPUSH
8189: LD_EXP 41
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PUSH
8198: LD_INT 1
8200: ARRAY
8201: PPUSH
8202: CALL 10774 0 2
8206: NOT
8207: IFFALSE 8223
// begin SetTag ( i , 0 ) ;
8209: LD_VAR 0 1
8213: PPUSH
8214: LD_INT 0
8216: PPUSH
8217: CALL_OW 109
// continue ;
8221: GO 7715
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8223: LD_ADDR_VAR 0 4
8227: PUSH
8228: LD_INT 2
8230: PPUSH
8231: LD_INT 57
8233: PUSH
8234: EMPTY
8235: LIST
8236: PPUSH
8237: CALL_OW 70
8241: ST_TO_ADDR
// if undone then
8242: LD_VAR 0 4
8246: IFFALSE 8268
// begin ComComplete ( i , undone [ 1 ] ) ;
8248: LD_VAR 0 1
8252: PPUSH
8253: LD_VAR 0 4
8257: PUSH
8258: LD_INT 1
8260: ARRAY
8261: PPUSH
8262: CALL 28525 0 2
// continue ;
8266: GO 7715
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8268: LD_VAR 0 1
8272: PPUSH
8273: LD_EXP 41
8277: PUSH
8278: LD_INT 1
8280: ARRAY
8281: PUSH
8282: LD_INT 1
8284: ARRAY
8285: PPUSH
8286: LD_EXP 41
8290: PUSH
8291: LD_INT 1
8293: ARRAY
8294: PUSH
8295: LD_INT 2
8297: ARRAY
8298: PPUSH
8299: LD_EXP 41
8303: PUSH
8304: LD_INT 1
8306: ARRAY
8307: PUSH
8308: LD_INT 3
8310: ARRAY
8311: PPUSH
8312: LD_EXP 41
8316: PUSH
8317: LD_INT 1
8319: ARRAY
8320: PUSH
8321: LD_INT 4
8323: ARRAY
8324: PPUSH
8325: CALL_OW 145
// end ; if tag = tCrates then
8329: LD_VAR 0 8
8333: PUSH
8334: LD_INT 2
8336: EQUAL
8337: IFFALSE 8474
// begin if IsInUnit ( i ) then
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 310
8348: IFFALSE 8361
// begin ComExitBuilding ( i ) ;
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 122
// continue ;
8359: GO 7715
// end ; if not cr then
8361: LD_VAR 0 10
8365: NOT
8366: IFFALSE 8382
// begin SetTag ( i , 0 ) ;
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_INT 0
8375: PPUSH
8376: CALL_OW 109
// continue ;
8380: GO 7715
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 314
8391: NOT
8392: PUSH
8393: LD_INT 81
8395: PUSH
8396: LD_VAR 0 5
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 92
8407: PUSH
8408: LD_VAR 0 10
8412: PUSH
8413: LD_INT 1
8415: ARRAY
8416: PUSH
8417: LD_VAR 0 10
8421: PUSH
8422: LD_INT 2
8424: ARRAY
8425: PUSH
8426: LD_INT 12
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 69
8443: NOT
8444: AND
8445: IFFALSE 8474
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8447: LD_VAR 0 1
8451: PPUSH
8452: LD_VAR 0 10
8456: PUSH
8457: LD_INT 1
8459: ARRAY
8460: PPUSH
8461: LD_VAR 0 10
8465: PUSH
8466: LD_INT 2
8468: ARRAY
8469: PPUSH
8470: CALL_OW 117
// end ; end ;
8474: GO 7715
8476: POP
8477: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8478: LD_ADDR_VAR 0 12
8482: PUSH
8483: LD_EXP 36
8487: PPUSH
8488: LD_INT 2
8490: PUSH
8491: LD_INT 25
8493: PUSH
8494: LD_INT 1
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 5
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 8
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 50
8529: PUSH
8530: EMPTY
8531: LIST
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PPUSH
8537: CALL_OW 72
8541: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8542: LD_ADDR_VAR 0 14
8546: PUSH
8547: LD_INT 2
8549: PPUSH
8550: LD_INT 81
8552: PUSH
8553: LD_VAR 0 5
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 70
8566: ST_TO_ADDR
// if sol then
8567: LD_VAR 0 12
8571: IFFALSE 9083
// begin if enemyInBase then
8573: LD_VAR 0 14
8577: IFFALSE 8722
// begin for i in sol do
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: LD_VAR 0 12
8588: PUSH
8589: FOR_IN
8590: IFFALSE 8718
// begin tw := IsInUnit ( i ) ;
8592: LD_ADDR_VAR 0 9
8596: PUSH
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 310
8606: ST_TO_ADDR
// if tw then
8607: LD_VAR 0 9
8611: IFFALSE 8692
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8613: LD_VAR 0 9
8617: PUSH
8618: LD_INT 22
8620: PUSH
8621: LD_VAR 0 5
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 101
8632: PUSH
8633: LD_INT 2
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: LD_INT 30
8645: PUSH
8646: LD_INT 32
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 30
8655: PUSH
8656: LD_INT 31
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PPUSH
8673: CALL_OW 69
8677: IN
8678: NOT
8679: IFFALSE 8690
// ComExitBuilding ( i ) ;
8681: LD_VAR 0 1
8685: PPUSH
8686: CALL_OW 122
// end else
8690: GO 8716
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
8692: LD_VAR 0 1
8696: PPUSH
8697: LD_VAR 0 14
8701: PPUSH
8702: LD_VAR 0 1
8706: PPUSH
8707: CALL_OW 74
8711: PPUSH
8712: CALL_OW 115
// end ;
8716: GO 8589
8718: POP
8719: POP
// end else
8720: GO 9083
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
8722: LD_ADDR_VAR 0 15
8726: PUSH
8727: LD_INT 2
8729: PPUSH
8730: LD_INT 3
8732: PUSH
8733: LD_INT 62
8735: PUSH
8736: EMPTY
8737: LIST
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 2
8745: PUSH
8746: LD_INT 30
8748: PUSH
8749: LD_INT 32
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 30
8758: PUSH
8759: LD_INT 4
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 30
8768: PUSH
8769: LD_INT 5
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 30
8778: PUSH
8779: LD_INT 31
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL_OW 70
8801: ST_TO_ADDR
// if empty then
8802: LD_VAR 0 15
8806: IFFALSE 8823
// empty := ReverseArray ( empty ) ;
8808: LD_ADDR_VAR 0 15
8812: PUSH
8813: LD_VAR 0 15
8817: PPUSH
8818: CALL 53303 0 1
8822: ST_TO_ADDR
// for i in sol do
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: LD_VAR 0 12
8832: PUSH
8833: FOR_IN
8834: IFFALSE 9081
// begin tag := GetTag ( i ) ;
8836: LD_ADDR_VAR 0 8
8840: PUSH
8841: LD_VAR 0 1
8845: PPUSH
8846: CALL_OW 110
8850: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
8851: LD_VAR 0 1
8855: PPUSH
8856: CALL_OW 256
8860: PUSH
8861: LD_INT 1000
8863: LESS
8864: PUSH
8865: LD_VAR 0 8
8869: PUSH
8870: LD_INT 1
8872: NONEQUAL
8873: AND
8874: IFFALSE 8926
// begin SetTag ( i , tHeal ) ;
8876: LD_VAR 0 1
8880: PPUSH
8881: LD_INT 1
8883: PPUSH
8884: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8888: LD_VAR 0 1
8892: PPUSH
8893: LD_EXP 40
8897: PUSH
8898: LD_INT 1
8900: ARRAY
8901: PPUSH
8902: LD_EXP 40
8906: PUSH
8907: LD_INT 2
8909: ARRAY
8910: PPUSH
8911: CALL_OW 111
// AddComHold ( i ) ;
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 200
// continue ;
8924: GO 8833
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL_OW 256
8935: PUSH
8936: LD_INT 1000
8938: EQUAL
8939: PUSH
8940: LD_VAR 0 8
8944: PUSH
8945: LD_INT 1
8947: EQUAL
8948: AND
8949: IFFALSE 8965
// begin SetTag ( i , 0 ) ;
8951: LD_VAR 0 1
8955: PPUSH
8956: LD_INT 0
8958: PPUSH
8959: CALL_OW 109
// continue ;
8963: GO 8833
// end ; if HasTask ( i ) then
8965: LD_VAR 0 1
8969: PPUSH
8970: CALL_OW 314
8974: IFFALSE 8978
// continue ;
8976: GO 8833
// if not IsInUnit ( i ) and not tag and empty then
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 310
8987: NOT
8988: PUSH
8989: LD_VAR 0 8
8993: NOT
8994: AND
8995: PUSH
8996: LD_VAR 0 15
9000: AND
9001: IFFALSE 9079
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9003: LD_VAR 0 1
9007: PPUSH
9008: LD_VAR 0 15
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PPUSH
9017: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9021: LD_VAR 0 15
9025: PUSH
9026: LD_INT 1
9028: ARRAY
9029: PPUSH
9030: CALL_OW 266
9034: PUSH
9035: LD_INT 5
9037: EQUAL
9038: PUSH
9039: LD_INT 50
9041: PPUSH
9042: CALL_OW 13
9046: AND
9047: IFFALSE 9061
// AddComChangeProfession ( i , class_mortar ) ;
9049: LD_VAR 0 1
9053: PPUSH
9054: LD_INT 8
9056: PPUSH
9057: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9061: LD_ADDR_VAR 0 15
9065: PUSH
9066: LD_VAR 0 15
9070: PPUSH
9071: LD_INT 1
9073: PPUSH
9074: CALL_OW 3
9078: ST_TO_ADDR
// end ; end ;
9079: GO 8833
9081: POP
9082: POP
// end ; end ; end ;
9083: PPOPN 18
9085: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9086: LD_EXP 44
9090: PPUSH
9091: CALL_OW 302
9095: PUSH
9096: LD_EXP 4
9100: AND
9101: PUSH
9102: LD_EXP 9
9106: AND
9107: IFFALSE 9389
9109: GO 9111
9111: DISABLE
9112: LD_INT 0
9114: PPUSH
9115: PPUSH
// begin enable ;
9116: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9117: LD_ADDR_VAR 0 2
9121: PUSH
9122: LD_INT 2
9124: PPUSH
9125: LD_INT 81
9127: PUSH
9128: LD_INT 8
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: LD_INT 50
9137: PUSH
9138: EMPTY
9139: LIST
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PPUSH
9145: CALL_OW 70
9149: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9150: LD_ADDR_VAR 0 1
9154: PUSH
9155: LD_INT 16
9157: PPUSH
9158: CALL_OW 435
9162: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9163: LD_EXP 44
9167: PPUSH
9168: CALL_OW 261
9172: PUSH
9173: LD_INT 10
9175: LESS
9176: PUSH
9177: LD_INT 2
9179: PPUSH
9180: LD_EXP 44
9184: PPUSH
9185: CALL_OW 292
9189: NOT
9190: AND
9191: PUSH
9192: LD_EXP 44
9196: PPUSH
9197: CALL_OW 262
9201: PUSH
9202: LD_INT 1
9204: EQUAL
9205: AND
9206: IFFALSE 9220
// SetFuel ( legCargo , 100 ) ;
9208: LD_EXP 44
9212: PPUSH
9213: LD_INT 100
9215: PPUSH
9216: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9220: LD_EXP 44
9224: PPUSH
9225: CALL_OW 314
9229: NOT
9230: PUSH
9231: LD_EXP 44
9235: PPUSH
9236: LD_INT 1
9238: PPUSH
9239: CALL_OW 289
9243: PUSH
9244: LD_INT 100
9246: LESS
9247: AND
9248: PUSH
9249: LD_VAR 0 2
9253: NOT
9254: AND
9255: IFFALSE 9321
// begin if cr then
9257: LD_VAR 0 1
9261: IFFALSE 9292
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9263: LD_EXP 44
9267: PPUSH
9268: LD_VAR 0 1
9272: PUSH
9273: LD_INT 1
9275: ARRAY
9276: PPUSH
9277: LD_VAR 0 1
9281: PUSH
9282: LD_INT 2
9284: ARRAY
9285: PPUSH
9286: CALL_OW 117
9290: GO 9319
// if not IsInArea ( legCargo , cratesNorthArea ) then
9292: LD_EXP 44
9296: PPUSH
9297: LD_INT 16
9299: PPUSH
9300: CALL_OW 308
9304: NOT
9305: IFFALSE 9319
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9307: LD_EXP 44
9311: PPUSH
9312: LD_INT 16
9314: PPUSH
9315: CALL_OW 113
// exit ;
9319: GO 9389
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9321: LD_VAR 0 2
9325: PUSH
9326: LD_EXP 44
9330: PPUSH
9331: LD_INT 2
9333: PPUSH
9334: CALL_OW 308
9338: NOT
9339: AND
9340: IFFALSE 9359
// ComMoveXY ( legCargo , 194 , 17 ) else
9342: LD_EXP 44
9346: PPUSH
9347: LD_INT 194
9349: PPUSH
9350: LD_INT 17
9352: PPUSH
9353: CALL_OW 111
9357: GO 9389
// if GetCargo ( legCargo , mat_cans ) = 100 then
9359: LD_EXP 44
9363: PPUSH
9364: LD_INT 1
9366: PPUSH
9367: CALL_OW 289
9371: PUSH
9372: LD_INT 100
9374: EQUAL
9375: IFFALSE 9389
// ComGive ( legCargo , legBase ) ;
9377: LD_EXP 44
9381: PPUSH
9382: LD_INT 38
9384: PPUSH
9385: CALL_OW 161
// end ;
9389: PPOPN 2
9391: END
// every 12 12$00 trigger Count ( legTanks ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part ;
9392: LD_EXP 42
9396: PPUSH
9397: CALL 22427 0 1
9401: PUSH
9402: LD_INT 5
9404: LESS
9405: PUSH
9406: LD_EXP 4
9410: AND
9411: PUSH
9412: LD_EXP 9
9416: AND
9417: PUSH
9418: LD_EXP 7
9422: AND
9423: IFFALSE 9606
9425: GO 9427
9427: DISABLE
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
// begin enable ;
9433: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9434: LD_ADDR_VAR 0 2
9438: PUSH
9439: LD_INT 13
9441: PUSH
9442: LD_INT 28
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 13
9451: PUSH
9452: LD_INT 27
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 13
9461: PUSH
9462: LD_INT 26
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 14
9471: PUSH
9472: LD_INT 28
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 14
9481: PUSH
9482: LD_INT 25
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
9496: LD_ADDR_VAR 0 1
9500: PUSH
9501: DOUBLE
9502: LD_INT 1
9504: DEC
9505: ST_TO_ADDR
9506: LD_INT 3
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: LD_INT 4
9514: PUSH
9515: LD_INT 4
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: PUSH
9524: LD_OWVAR 67
9528: ARRAY
9529: PUSH
9530: FOR_TO
9531: IFFALSE 9604
// begin part := parts [ rand ( 1 , parts ) ] ;
9533: LD_ADDR_VAR 0 3
9537: PUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_INT 1
9545: PPUSH
9546: LD_VAR 0 2
9550: PPUSH
9551: CALL_OW 12
9555: ARRAY
9556: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
9557: LD_ADDR_EXP 39
9561: PUSH
9562: LD_EXP 39
9566: PPUSH
9567: LD_VAR 0 3
9571: PUSH
9572: LD_INT 1
9574: ARRAY
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: LD_VAR 0 3
9586: PUSH
9587: LD_INT 2
9589: ARRAY
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: PPUSH
9597: CALL 58027 0 2
9601: ST_TO_ADDR
9602: GO 9530
9604: POP
9605: POP
// end ;
9606: PPOPN 3
9608: END
// every 20 20$00 trigger not legionDestroyed and tick <= 60 60$00 do
9609: LD_EXP 12
9613: NOT
9614: PUSH
9615: LD_OWVAR 1
9619: PUSH
9620: LD_INT 126000
9622: LESSEQUAL
9623: AND
9624: IFFALSE 9663
9626: GO 9628
9628: DISABLE
// begin enable ;
9629: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
9630: LD_ADDR_EXP 39
9634: PUSH
9635: LD_EXP 39
9639: PPUSH
9640: LD_INT 14
9642: PUSH
9643: LD_INT 1
9645: PUSH
9646: LD_INT 1
9648: PUSH
9649: LD_INT 27
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL 58027 0 2
9662: ST_TO_ADDR
// end ;
9663: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
9664: LD_EXP 42
9668: PUSH
9669: LD_EXP 9
9673: AND
9674: PUSH
9675: LD_EXP 7
9679: AND
9680: IFFALSE 10273
9682: GO 9684
9684: DISABLE
9685: LD_INT 0
9687: PPUSH
9688: PPUSH
9689: PPUSH
// begin enable ;
9690: ENABLE
// if not legTanks then
9691: LD_EXP 42
9695: NOT
9696: IFFALSE 9700
// exit ;
9698: GO 10273
// for i in legTanks do
9700: LD_ADDR_VAR 0 1
9704: PUSH
9705: LD_EXP 42
9709: PUSH
9710: FOR_IN
9711: IFFALSE 10271
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 302
9722: NOT
9723: PUSH
9724: LD_VAR 0 1
9728: PPUSH
9729: CALL_OW 255
9733: PUSH
9734: LD_INT 8
9736: NONEQUAL
9737: OR
9738: IFFALSE 9758
// begin legTanks := legTanks diff i ;
9740: LD_ADDR_EXP 42
9744: PUSH
9745: LD_EXP 42
9749: PUSH
9750: LD_VAR 0 1
9754: DIFF
9755: ST_TO_ADDR
// continue ;
9756: GO 9710
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
9758: LD_VAR 0 1
9762: PPUSH
9763: CALL_OW 110
9767: NOT
9768: PUSH
9769: LD_VAR 0 1
9773: PPUSH
9774: CALL_OW 263
9778: PUSH
9779: LD_INT 2
9781: EQUAL
9782: AND
9783: IFFALSE 9797
// SetTag ( i , tAttack ) ;
9785: LD_VAR 0 1
9789: PPUSH
9790: LD_INT 10
9792: PPUSH
9793: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
9797: LD_VAR 0 1
9801: PPUSH
9802: CALL_OW 110
9806: NOT
9807: PUSH
9808: LD_VAR 0 1
9812: PPUSH
9813: CALL_OW 110
9817: PUSH
9818: LD_INT 0
9820: EQUAL
9821: OR
9822: IFFALSE 9952
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
9824: LD_VAR 0 1
9828: PPUSH
9829: CALL_OW 261
9833: PUSH
9834: LD_INT 50
9836: LESS
9837: PUSH
9838: LD_VAR 0 1
9842: PPUSH
9843: CALL_OW 262
9847: PUSH
9848: LD_INT 1
9850: EQUAL
9851: AND
9852: IFFALSE 9911
// begin ComMoveXY ( i , 189 , 19 ) ;
9854: LD_VAR 0 1
9858: PPUSH
9859: LD_INT 189
9861: PPUSH
9862: LD_INT 19
9864: PPUSH
9865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9869: LD_INT 35
9871: PPUSH
9872: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
9876: LD_VAR 0 1
9880: PPUSH
9881: LD_INT 189
9883: PPUSH
9884: LD_INT 19
9886: PPUSH
9887: CALL_OW 297
9891: PUSH
9892: LD_INT 4
9894: LESS
9895: IFFALSE 9869
// SetFuel ( i , 100 ) ;
9897: LD_VAR 0 1
9901: PPUSH
9902: LD_INT 100
9904: PPUSH
9905: CALL_OW 240
// end else
9909: GO 9952
// if not IsInArea ( i , legParkingArea ) then
9911: LD_VAR 0 1
9915: PPUSH
9916: LD_INT 15
9918: PPUSH
9919: CALL_OW 308
9923: NOT
9924: IFFALSE 9940
// ComMoveToArea ( i , legParkingArea ) else
9926: LD_VAR 0 1
9930: PPUSH
9931: LD_INT 15
9933: PPUSH
9934: CALL_OW 113
9938: GO 9952
// SetTag ( i , tParking ) ;
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_INT 9
9947: PPUSH
9948: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
9952: LD_VAR 0 1
9956: PPUSH
9957: CALL_OW 110
9961: PUSH
9962: LD_INT 9
9964: EQUAL
9965: IFFALSE 10095
// begin if GetLives ( i ) < 650 then
9967: LD_VAR 0 1
9971: PPUSH
9972: CALL_OW 256
9976: PUSH
9977: LD_INT 650
9979: LESS
9980: IFFALSE 10072
// begin if not IsDrivenBy ( i ) then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 311
9991: NOT
9992: IFFALSE 9996
// continue ;
9994: GO 9710
// mech := IsDrivenBy ( i ) ;
9996: LD_ADDR_VAR 0 2
10000: PUSH
10001: LD_VAR 0 1
10005: PPUSH
10006: CALL_OW 311
10010: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10011: LD_VAR 0 2
10015: PPUSH
10016: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10020: LD_VAR 0 2
10024: PPUSH
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10034: LD_INT 35
10036: PPUSH
10037: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 256
10050: PUSH
10051: LD_INT 1000
10053: EQUAL
10054: IFFALSE 10034
// ComEnterUnit ( mech , i ) ;
10056: LD_VAR 0 2
10060: PPUSH
10061: LD_VAR 0 1
10065: PPUSH
10066: CALL_OW 120
// end else
10070: GO 10095
// if IsDrivenBy ( i ) then
10072: LD_VAR 0 1
10076: PPUSH
10077: CALL_OW 311
10081: IFFALSE 10095
// SetTag ( i , tAttack ) ;
10083: LD_VAR 0 1
10087: PPUSH
10088: LD_INT 10
10090: PPUSH
10091: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 110
10104: PUSH
10105: LD_INT 10
10107: EQUAL
10108: IFFALSE 10269
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10110: LD_ADDR_VAR 0 3
10114: PUSH
10115: LD_INT 2
10117: PPUSH
10118: LD_INT 81
10120: PUSH
10121: LD_INT 8
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PPUSH
10128: CALL_OW 70
10132: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10133: LD_VAR 0 1
10137: PPUSH
10138: CALL_OW 256
10142: PUSH
10143: LD_INT 650
10145: LESS
10146: PUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 263
10156: PUSH
10157: LD_INT 1
10159: EQUAL
10160: AND
10161: IFFALSE 10186
// begin ComStop ( i ) ;
10163: LD_VAR 0 1
10167: PPUSH
10168: CALL_OW 141
// SetTag ( i , 0 ) ;
10172: LD_VAR 0 1
10176: PPUSH
10177: LD_INT 0
10179: PPUSH
10180: CALL_OW 109
// continue ;
10184: GO 9710
// end ; if enemy then
10186: LD_VAR 0 3
10190: IFFALSE 10230
// begin if not HasTask ( i ) then
10192: LD_VAR 0 1
10196: PPUSH
10197: CALL_OW 314
10201: NOT
10202: IFFALSE 10228
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10204: LD_VAR 0 1
10208: PPUSH
10209: LD_VAR 0 3
10213: PPUSH
10214: LD_VAR 0 1
10218: PPUSH
10219: CALL_OW 74
10223: PPUSH
10224: CALL 62099 0 2
// end else
10228: GO 10269
// if legTanks then
10230: LD_EXP 42
10234: IFFALSE 10269
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10236: LD_VAR 0 1
10240: PPUSH
10241: LD_INT 200
10243: PUSH
10244: LD_INT 48
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 210
10253: PUSH
10254: LD_INT 74
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL 60631 0 2
// end ; end ;
10269: GO 9710
10271: POP
10272: POP
// end ;
10273: PPOPN 3
10275: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10276: LD_EXP 12
10280: NOT
10281: PUSH
10282: LD_EXP 43
10286: PPUSH
10287: CALL 22427 0 1
10291: AND
10292: PUSH
10293: LD_EXP 9
10297: AND
10298: PUSH
10299: LD_EXP 7
10303: AND
10304: IFFALSE 10502
10306: GO 10308
10308: DISABLE
10309: LD_INT 0
10311: PPUSH
10312: PPUSH
10313: PPUSH
// begin enable ;
10314: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10315: LD_ADDR_VAR 0 2
10319: PUSH
10320: LD_EXP 43
10324: PPUSH
10325: LD_INT 61
10327: PUSH
10328: EMPTY
10329: LIST
10330: PUSH
10331: LD_INT 50
10333: PUSH
10334: EMPTY
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PPUSH
10341: CALL_OW 72
10345: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10346: LD_ADDR_EXP 43
10350: PUSH
10351: LD_EXP 43
10355: PUSH
10356: LD_VAR 0 2
10360: DIFF
10361: ST_TO_ADDR
// if not tmp then
10362: LD_VAR 0 2
10366: NOT
10367: IFFALSE 10371
// exit ;
10369: GO 10502
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10371: LD_ADDR_VAR 0 3
10375: PUSH
10376: LD_VAR 0 2
10380: PPUSH
10381: LD_INT 34
10383: PUSH
10384: LD_INT 24
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 72
10395: ST_TO_ADDR
// if tmp2 then
10396: LD_VAR 0 3
10400: IFFALSE 10417
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 241
10409: PPUSH
10410: LD_INT 99
10412: PPUSH
10413: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10417: LD_INT 35
10419: PPUSH
10420: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10424: LD_ADDR_VAR 0 2
10428: PUSH
10429: LD_VAR 0 2
10433: PPUSH
10434: LD_INT 50
10436: PUSH
10437: EMPTY
10438: LIST
10439: PPUSH
10440: CALL_OW 72
10444: ST_TO_ADDR
// for i in tmp do
10445: LD_ADDR_VAR 0 1
10449: PUSH
10450: LD_VAR 0 2
10454: PUSH
10455: FOR_IN
10456: IFFALSE 10493
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10458: LD_VAR 0 1
10462: PPUSH
10463: LD_INT 200
10465: PUSH
10466: LD_INT 48
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 210
10475: PUSH
10476: LD_INT 74
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL 60631 0 2
10491: GO 10455
10493: POP
10494: POP
// until not tmp ;
10495: LD_VAR 0 2
10499: NOT
10500: IFFALSE 10417
// end ;
10502: PPOPN 3
10504: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10505: LD_EXP 9
10509: NOT
10510: IFFALSE 10771
10512: GO 10514
10514: DISABLE
10515: LD_INT 0
10517: PPUSH
10518: PPUSH
10519: PPUSH
10520: PPUSH
// begin uc_side := 8 ;
10521: LD_ADDR_OWVAR 20
10525: PUSH
10526: LD_INT 8
10528: ST_TO_ADDR
// uc_nation := nation_arabian ;
10529: LD_ADDR_OWVAR 21
10533: PUSH
10534: LD_INT 2
10536: ST_TO_ADDR
// for i := 1 to 3 do
10537: LD_ADDR_VAR 0 1
10541: PUSH
10542: DOUBLE
10543: LD_INT 1
10545: DEC
10546: ST_TO_ADDR
10547: LD_INT 3
10549: PUSH
10550: FOR_TO
10551: IFFALSE 10686
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
10553: LD_INT 14
10555: PPUSH
10556: LD_INT 3
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: LD_INT 27
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_VAR 0 1
10576: PUSH
10577: LD_INT 2
10579: MOD
10580: PUSH
10581: LD_INT 1
10583: PLUS
10584: ARRAY
10585: PPUSH
10586: LD_INT 100
10588: PPUSH
10589: CALL 25165 0 5
// veh := CreateVehicle ;
10593: LD_ADDR_VAR 0 3
10597: PUSH
10598: CALL_OW 45
10602: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10603: LD_VAR 0 3
10607: PPUSH
10608: LD_INT 5
10610: PPUSH
10611: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
10615: LD_VAR 0 3
10619: PPUSH
10620: LD_INT 44
10622: PPUSH
10623: LD_INT 0
10625: PPUSH
10626: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
10630: LD_INT 0
10632: PPUSH
10633: LD_INT 6
10635: PPUSH
10636: CALL_OW 383
// un := CreateHuman ;
10640: LD_ADDR_VAR 0 2
10644: PUSH
10645: CALL_OW 44
10649: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10650: LD_VAR 0 2
10654: PPUSH
10655: LD_VAR 0 3
10659: PPUSH
10660: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10664: LD_ADDR_VAR 0 4
10668: PUSH
10669: LD_VAR 0 4
10673: PPUSH
10674: LD_VAR 0 3
10678: PPUSH
10679: CALL 58027 0 2
10683: ST_TO_ADDR
// end ;
10684: GO 10550
10686: POP
10687: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
10688: LD_VAR 0 4
10692: PPUSH
10693: LD_INT 219
10695: PPUSH
10696: LD_INT 110
10698: PPUSH
10699: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
10703: LD_VAR 0 4
10707: PPUSH
10708: LD_INT 220
10710: PPUSH
10711: LD_INT 94
10713: PPUSH
10714: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
10718: LD_VAR 0 4
10722: PPUSH
10723: LD_INT 209
10725: PPUSH
10726: LD_INT 66
10728: PPUSH
10729: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
10733: LD_VAR 0 4
10737: PPUSH
10738: LD_INT 189
10740: PPUSH
10741: LD_INT 22
10743: PPUSH
10744: CALL_OW 171
// wait ( 0 0$10 ) ;
10748: LD_INT 350
10750: PPUSH
10751: CALL_OW 67
// legTanks := legTanks union tmp ;
10755: LD_ADDR_EXP 42
10759: PUSH
10760: LD_EXP 42
10764: PUSH
10765: LD_VAR 0 4
10769: UNION
10770: ST_TO_ADDR
// end ; end_of_file
10771: PPOPN 4
10773: END
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
10774: LD_INT 0
10776: PPUSH
10777: PPUSH
10778: PPUSH
// if btype = b_depot then
10779: LD_VAR 0 2
10783: PUSH
10784: LD_INT 0
10786: EQUAL
10787: IFFALSE 10799
// begin result := true ;
10789: LD_ADDR_VAR 0 3
10793: PUSH
10794: LD_INT 1
10796: ST_TO_ADDR
// exit ;
10797: GO 10915
// end ; pom := GetBase ( depot ) ;
10799: LD_ADDR_VAR 0 4
10803: PUSH
10804: LD_VAR 0 1
10808: PPUSH
10809: CALL_OW 274
10813: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
10814: LD_ADDR_VAR 0 5
10818: PUSH
10819: LD_VAR 0 2
10823: PPUSH
10824: LD_VAR 0 1
10828: PPUSH
10829: CALL_OW 248
10833: PPUSH
10834: CALL_OW 450
10838: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
10839: LD_ADDR_VAR 0 3
10843: PUSH
10844: LD_VAR 0 4
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 275
10856: PUSH
10857: LD_VAR 0 5
10861: PUSH
10862: LD_INT 1
10864: ARRAY
10865: GREATEREQUAL
10866: PUSH
10867: LD_VAR 0 4
10871: PPUSH
10872: LD_INT 2
10874: PPUSH
10875: CALL_OW 275
10879: PUSH
10880: LD_VAR 0 5
10884: PUSH
10885: LD_INT 2
10887: ARRAY
10888: GREATEREQUAL
10889: AND
10890: PUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: LD_INT 3
10898: PPUSH
10899: CALL_OW 275
10903: PUSH
10904: LD_VAR 0 5
10908: PUSH
10909: LD_INT 3
10911: ARRAY
10912: GREATEREQUAL
10913: AND
10914: ST_TO_ADDR
// end ;
10915: LD_VAR 0 3
10919: RET
// export function CreateNature ; var i , areas , amount ; begin
10920: LD_INT 0
10922: PPUSH
10923: PPUSH
10924: PPUSH
10925: PPUSH
// PrepareTiger ( 0 ) ;
10926: LD_INT 0
10928: PPUSH
10929: CALL 54403 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
10933: LD_ADDR_VAR 0 2
10937: PUSH
10938: DOUBLE
10939: LD_INT 1
10941: DEC
10942: ST_TO_ADDR
10943: LD_INT 10
10945: PUSH
10946: LD_INT 8
10948: PUSH
10949: LD_INT 5
10951: PUSH
10952: LD_INT 5
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: LD_OWVAR 67
10965: ARRAY
10966: PUSH
10967: FOR_TO
10968: IFFALSE 10987
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
10970: CALL_OW 44
10974: PPUSH
10975: LD_INT 7
10977: PPUSH
10978: LD_INT 0
10980: PPUSH
10981: CALL_OW 49
10985: GO 10967
10987: POP
10988: POP
// PrepareBird ;
10989: CALL 54584 0 0
// for i := 1 to 3 do
10993: LD_ADDR_VAR 0 2
10997: PUSH
10998: DOUBLE
10999: LD_INT 1
11001: DEC
11002: ST_TO_ADDR
11003: LD_INT 3
11005: PUSH
11006: FOR_TO
11007: IFFALSE 11026
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11009: CALL_OW 44
11013: PPUSH
11014: LD_INT 7
11016: PPUSH
11017: LD_INT 0
11019: PPUSH
11020: CALL_OW 49
11024: GO 11006
11026: POP
11027: POP
// PrepareHorse ;
11028: CALL 54624 0 0
// for i := 1 to 3 do
11032: LD_ADDR_VAR 0 2
11036: PUSH
11037: DOUBLE
11038: LD_INT 1
11040: DEC
11041: ST_TO_ADDR
11042: LD_INT 3
11044: PUSH
11045: FOR_TO
11046: IFFALSE 11065
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11048: CALL_OW 44
11052: PPUSH
11053: LD_INT 7
11055: PPUSH
11056: LD_INT 0
11058: PPUSH
11059: CALL_OW 49
11063: GO 11045
11065: POP
11066: POP
// PrepareFrog ;
11067: CALL 54504 0 0
// for i := 1 to 3 do
11071: LD_ADDR_VAR 0 2
11075: PUSH
11076: DOUBLE
11077: LD_INT 1
11079: DEC
11080: ST_TO_ADDR
11081: LD_INT 3
11083: PUSH
11084: FOR_TO
11085: IFFALSE 11104
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11087: CALL_OW 44
11091: PPUSH
11092: LD_INT 8
11094: PPUSH
11095: LD_INT 0
11097: PPUSH
11098: CALL_OW 49
11102: GO 11084
11104: POP
11105: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11106: LD_ADDR_VAR 0 4
11110: PUSH
11111: LD_INT 3
11113: PUSH
11114: LD_INT 2
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: LD_INT 1
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: PUSH
11129: LD_OWVAR 67
11133: ARRAY
11134: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_INT 18
11142: PUSH
11143: LD_INT 19
11145: PUSH
11146: LD_INT 20
11148: PUSH
11149: LD_INT 21
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: ST_TO_ADDR
// PrepareMastodont ;
11158: CALL 54664 0 0
// for i := 1 to amount do
11162: LD_ADDR_VAR 0 2
11166: PUSH
11167: DOUBLE
11168: LD_INT 1
11170: DEC
11171: ST_TO_ADDR
11172: LD_VAR 0 4
11176: PUSH
11177: FOR_TO
11178: IFFALSE 11215
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11180: CALL_OW 45
11184: PPUSH
11185: LD_VAR 0 3
11189: PUSH
11190: LD_VAR 0 2
11194: PUSH
11195: LD_INT 1
11197: MINUS
11198: PUSH
11199: LD_OWVAR 67
11203: PLUS
11204: ARRAY
11205: PPUSH
11206: LD_INT 0
11208: PPUSH
11209: CALL_OW 49
11213: GO 11177
11215: POP
11216: POP
// PrepareApeman ( 0 ) ;
11217: LD_INT 0
11219: PPUSH
11220: CALL 54295 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11224: LD_ADDR_OWVAR 31
11228: PUSH
11229: LD_INT 4
11231: PUSH
11232: LD_INT 2
11234: PUSH
11235: LD_INT 0
11237: PUSH
11238: LD_INT 0
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11247: LD_ADDR_VAR 0 2
11251: PUSH
11252: DOUBLE
11253: LD_INT 1
11255: DEC
11256: ST_TO_ADDR
11257: LD_INT 9
11259: PUSH
11260: LD_INT 7
11262: PUSH
11263: LD_INT 6
11265: PUSH
11266: LD_INT 5
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: PUSH
11275: LD_OWVAR 67
11279: ARRAY
11280: PUSH
11281: FOR_TO
11282: IFFALSE 11301
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11284: CALL_OW 44
11288: PPUSH
11289: LD_INT 6
11291: PPUSH
11292: LD_INT 0
11294: PPUSH
11295: CALL_OW 49
11299: GO 11281
11301: POP
11302: POP
// for i := 1 to [ 7 , 6 , 5 , 4 ] [ Difficulty ] do
11303: LD_ADDR_VAR 0 2
11307: PUSH
11308: DOUBLE
11309: LD_INT 1
11311: DEC
11312: ST_TO_ADDR
11313: LD_INT 7
11315: PUSH
11316: LD_INT 6
11318: PUSH
11319: LD_INT 5
11321: PUSH
11322: LD_INT 4
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: PUSH
11331: LD_OWVAR 67
11335: ARRAY
11336: PUSH
11337: FOR_TO
11338: IFFALSE 11363
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 6 , false ) ;
11340: CALL_OW 44
11344: PPUSH
11345: LD_INT 274
11347: PPUSH
11348: LD_INT 133
11350: PPUSH
11351: LD_INT 6
11353: PPUSH
11354: LD_INT 0
11356: PPUSH
11357: CALL_OW 50
11361: GO 11337
11363: POP
11364: POP
// for i := 1 to [ 4 , 4 , 3 , 3 ] [ Difficulty ] do
11365: LD_ADDR_VAR 0 2
11369: PUSH
11370: DOUBLE
11371: LD_INT 1
11373: DEC
11374: ST_TO_ADDR
11375: LD_INT 4
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: LD_INT 3
11383: PUSH
11384: LD_INT 3
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: LD_OWVAR 67
11397: ARRAY
11398: PUSH
11399: FOR_TO
11400: IFFALSE 11425
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 6 , false ) ;
11402: CALL_OW 44
11406: PPUSH
11407: LD_INT 208
11409: PPUSH
11410: LD_INT 142
11412: PPUSH
11413: LD_INT 6
11415: PPUSH
11416: LD_INT 0
11418: PPUSH
11419: CALL_OW 50
11423: GO 11399
11425: POP
11426: POP
// end ;
11427: LD_VAR 0 1
11431: RET
// export function AreInArea ( units , area ) ; var i ; begin
11432: LD_INT 0
11434: PPUSH
11435: PPUSH
// result := false ;
11436: LD_ADDR_VAR 0 3
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// if not units then
11444: LD_VAR 0 1
11448: NOT
11449: IFFALSE 11453
// exit ;
11451: GO 11519
// for i in units do
11453: LD_ADDR_VAR 0 4
11457: PUSH
11458: LD_VAR 0 1
11462: PUSH
11463: FOR_IN
11464: IFFALSE 11517
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11466: LD_VAR 0 4
11470: PPUSH
11471: LD_VAR 0 2
11475: PPUSH
11476: CALL_OW 308
11480: PUSH
11481: LD_VAR 0 4
11485: PPUSH
11486: CALL_OW 310
11490: PPUSH
11491: LD_VAR 0 2
11495: PPUSH
11496: CALL_OW 308
11500: OR
11501: IFFALSE 11515
// begin result := true ;
11503: LD_ADDR_VAR 0 3
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
// exit ;
11511: POP
11512: POP
11513: GO 11519
// end ;
11515: GO 11463
11517: POP
11518: POP
// end ; end_of_file
11519: LD_VAR 0 3
11523: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11524: LD_INT 0
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
// SaveForQuickRestart ;
11531: CALL_OW 22
// InGameOn ;
11535: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11539: LD_INT 84
11541: PPUSH
11542: LD_INT 28
11544: PPUSH
11545: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11549: LD_INT 2
11551: PPUSH
11552: LD_INT 9
11554: PPUSH
11555: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11559: LD_EXP 22
11563: PPUSH
11564: LD_INT 90
11566: PPUSH
11567: LD_INT 30
11569: PPUSH
11570: CALL_OW 111
// uc_side := 1 ;
11574: LD_ADDR_OWVAR 20
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// uc_nation := nation_american ;
11582: LD_ADDR_OWVAR 21
11586: PUSH
11587: LD_INT 1
11589: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11590: LD_INT 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: LD_INT 1
11598: PPUSH
11599: LD_INT 9
11601: PPUSH
11602: LD_INT 66
11604: PPUSH
11605: CALL 25165 0 5
// veh := CreateVehicle ;
11609: LD_ADDR_VAR 0 4
11613: PUSH
11614: CALL_OW 45
11618: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11619: LD_VAR 0 4
11623: PPUSH
11624: LD_INT 1
11626: PPUSH
11627: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11631: LD_VAR 0 4
11635: PPUSH
11636: LD_INT 80
11638: PPUSH
11639: LD_INT 27
11641: PPUSH
11642: LD_INT 0
11644: PPUSH
11645: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11649: LD_INT 1
11651: PPUSH
11652: LD_INT 8
11654: PPUSH
11655: CALL_OW 383
// mech := CreateHuman ;
11659: LD_ADDR_VAR 0 3
11663: PUSH
11664: CALL_OW 44
11668: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_VAR 0 4
11678: PPUSH
11679: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11683: LD_INT 35
11685: PPUSH
11686: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11690: LD_INT 90
11692: PPUSH
11693: LD_INT 30
11695: PPUSH
11696: CALL_OW 428
11700: IFFALSE 11683
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
11702: LD_INT 80
11704: PPUSH
11705: LD_INT 27
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: LD_INT 6
11713: NEG
11714: PPUSH
11715: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
11719: LD_INT 80
11721: PPUSH
11722: LD_INT 27
11724: PPUSH
11725: CALL_OW 86
// DialogueOn ;
11729: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
11733: LD_EXP 22
11737: PPUSH
11738: LD_STRING DH-Start-1
11740: PPUSH
11741: CALL_OW 88
// DialogueOff ;
11745: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11749: LD_EXP 22
11753: PPUSH
11754: LD_VAR 0 4
11758: PPUSH
11759: CALL_OW 115
// wait ( 0 0$1 ) ;
11763: LD_INT 35
11765: PPUSH
11766: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
11770: LD_EXP 22
11774: PPUSH
11775: CALL_OW 310
11779: PPUSH
11780: LD_INT 200
11782: PPUSH
11783: CALL_OW 234
// wait ( 0 0$0.3 ) ;
11787: LD_INT 10
11789: PPUSH
11790: CALL_OW 67
// DialogueOn ;
11794: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
11798: LD_EXP 22
11802: PPUSH
11803: LD_STRING DH-Start-2
11805: PPUSH
11806: CALL_OW 88
// DialogueOff ;
11810: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
11814: LD_EXP 22
11818: PPUSH
11819: LD_VAR 0 4
11823: PPUSH
11824: CALL_OW 115
// wait ( 0 0$0.2 ) ;
11828: LD_INT 7
11830: PPUSH
11831: CALL_OW 67
// ComCrawl ( Heike ) ;
11835: LD_EXP 22
11839: PPUSH
11840: CALL_OW 137
// wait ( 0 0$3 ) ;
11844: LD_INT 105
11846: PPUSH
11847: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
11851: LD_EXP 25
11855: PPUSH
11856: LD_INT 82
11858: PPUSH
11859: LD_INT 43
11861: PPUSH
11862: LD_INT 0
11864: PPUSH
11865: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
11869: LD_EXP 23
11873: PPUSH
11874: LD_EXP 25
11878: PPUSH
11879: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
11883: LD_EXP 23
11887: PPUSH
11888: LD_INT 79
11890: PPUSH
11891: LD_INT 32
11893: PPUSH
11894: CALL_OW 111
// wait ( 0 0$1 ) ;
11898: LD_INT 35
11900: PPUSH
11901: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
11905: LD_INT 79
11907: PPUSH
11908: LD_INT 32
11910: PPUSH
11911: LD_INT 2
11913: PPUSH
11914: LD_INT 8
11916: NEG
11917: PPUSH
11918: CALL_OW 330
// wait ( 0 0$3 ) ;
11922: LD_INT 105
11924: PPUSH
11925: CALL_OW 67
// SetLives ( veh , 200 ) ;
11929: LD_VAR 0 4
11933: PPUSH
11934: LD_INT 200
11936: PPUSH
11937: CALL_OW 234
// wait ( 0 0$1 ) ;
11941: LD_INT 35
11943: PPUSH
11944: CALL_OW 67
// SetLives ( mech , 10 ) ;
11948: LD_VAR 0 3
11952: PPUSH
11953: LD_INT 10
11955: PPUSH
11956: CALL_OW 234
// wait ( 0 0$2 ) ;
11960: LD_INT 70
11962: PPUSH
11963: CALL_OW 67
// ComWalk ( Heike ) ;
11967: LD_EXP 22
11971: PPUSH
11972: CALL_OW 138
// wait ( 1 ) ;
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
11983: LD_EXP 22
11987: PPUSH
11988: LD_INT 81
11990: PPUSH
11991: LD_INT 25
11993: PPUSH
11994: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
11998: LD_EXP 22
12002: PPUSH
12003: LD_INT 72
12005: PPUSH
12006: LD_INT 25
12008: PPUSH
12009: CALL_OW 171
// wait ( 0 0$3 ) ;
12013: LD_INT 105
12015: PPUSH
12016: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12020: LD_EXP 23
12024: PPUSH
12025: CALL_OW 121
// wait ( 1 ) ;
12029: LD_INT 1
12031: PPUSH
12032: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12036: LD_EXP 23
12040: PPUSH
12041: LD_INT 77
12043: PPUSH
12044: LD_INT 28
12046: PPUSH
12047: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12051: LD_EXP 23
12055: PPUSH
12056: LD_EXP 22
12060: PPUSH
12061: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12065: LD_EXP 23
12069: PPUSH
12070: LD_STRING DO-Start-3
12072: PPUSH
12073: CALL_OW 88
// repeat wait ( 3 ) ;
12077: LD_INT 3
12079: PPUSH
12080: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12084: LD_EXP 22
12088: PPUSH
12089: LD_INT 72
12091: PPUSH
12092: LD_INT 25
12094: PPUSH
12095: CALL_OW 307
12099: IFFALSE 12077
// ComHold ( Heike ) ;
12101: LD_EXP 22
12105: PPUSH
12106: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12110: LD_EXP 23
12114: PPUSH
12115: LD_EXP 22
12119: PPUSH
12120: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12124: LD_EXP 22
12128: PPUSH
12129: LD_EXP 23
12133: PPUSH
12134: CALL_OW 112
// wait ( 0 0$1 ) ;
12138: LD_INT 35
12140: PPUSH
12141: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12145: LD_EXP 22
12149: PPUSH
12150: LD_EXP 23
12154: PPUSH
12155: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12159: LD_EXP 22
12163: PPUSH
12164: LD_STRING DH-Start-4
12166: PPUSH
12167: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12171: LD_EXP 23
12175: PPUSH
12176: LD_STRING DO-Start-5
12178: PPUSH
12179: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12183: LD_EXP 22
12187: PPUSH
12188: LD_STRING DH-Start-6
12190: PPUSH
12191: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12195: LD_EXP 23
12199: PPUSH
12200: LD_STRING DO-Start-7
12202: PPUSH
12203: CALL_OW 88
// if Query ( QOmar ) = 2 then
12207: LD_STRING QOmar
12209: PPUSH
12210: CALL_OW 97
12214: PUSH
12215: LD_INT 2
12217: EQUAL
12218: IFFALSE 12523
// begin Say ( Heike , DH-QuestionN-1 ) ;
12220: LD_EXP 22
12224: PPUSH
12225: LD_STRING DH-QuestionN-1
12227: PPUSH
12228: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12232: LD_EXP 22
12236: PPUSH
12237: LD_INT 58
12239: PPUSH
12240: LD_INT 27
12242: PPUSH
12243: CALL_OW 111
// wait ( 0 0$2 ) ;
12247: LD_INT 70
12249: PPUSH
12250: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12254: LD_EXP 23
12258: PPUSH
12259: LD_EXP 25
12263: PPUSH
12264: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12268: LD_INT 79
12270: PPUSH
12271: LD_INT 32
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12281: LD_INT 80
12283: PPUSH
12284: LD_INT 27
12286: PPUSH
12287: LD_INT 2
12289: PPUSH
12290: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12294: LD_INT 58
12296: PPUSH
12297: LD_INT 27
12299: PPUSH
12300: CALL_OW 84
// repeat wait ( 3 ) ;
12304: LD_INT 3
12306: PPUSH
12307: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12311: LD_EXP 22
12315: PPUSH
12316: LD_INT 88
12318: PPUSH
12319: LD_INT 27
12321: PPUSH
12322: CALL_OW 297
12326: IFFALSE 12304
// uc_side := 1 ;
12328: LD_ADDR_OWVAR 20
12332: PUSH
12333: LD_INT 1
12335: ST_TO_ADDR
// uc_nation := nation_american ;
12336: LD_ADDR_OWVAR 21
12340: PUSH
12341: LD_INT 1
12343: ST_TO_ADDR
// amTroops := [ ] ;
12344: LD_ADDR_VAR 0 5
12348: PUSH
12349: EMPTY
12350: ST_TO_ADDR
// for i := 1 to 3 do
12351: LD_ADDR_VAR 0 2
12355: PUSH
12356: DOUBLE
12357: LD_INT 1
12359: DEC
12360: ST_TO_ADDR
12361: LD_INT 3
12363: PUSH
12364: FOR_TO
12365: IFFALSE 12458
// begin PrepareSoldier ( false , 10 ) ;
12367: LD_INT 0
12369: PPUSH
12370: LD_INT 10
12372: PPUSH
12373: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12377: LD_ADDR_VAR 0 5
12381: PUSH
12382: LD_VAR 0 5
12386: PPUSH
12387: CALL_OW 44
12391: PPUSH
12392: CALL 58027 0 2
12396: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12397: LD_VAR 0 5
12401: PUSH
12402: LD_VAR 0 2
12406: ARRAY
12407: PPUSH
12408: LD_INT 2
12410: PPUSH
12411: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12415: LD_VAR 0 5
12419: PUSH
12420: LD_VAR 0 2
12424: ARRAY
12425: PPUSH
12426: LD_INT 10
12428: PPUSH
12429: LD_INT 0
12431: PPUSH
12432: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12436: LD_VAR 0 5
12440: PUSH
12441: LD_VAR 0 2
12445: ARRAY
12446: PPUSH
12447: LD_EXP 22
12451: PPUSH
12452: CALL_OW 115
// end ;
12456: GO 12364
12458: POP
12459: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12460: LD_EXP 22
12464: PPUSH
12465: LD_VAR 0 5
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12478: LD_INT 35
12480: PPUSH
12481: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12485: LD_EXP 22
12489: PPUSH
12490: CALL_OW 301
12494: PUSH
12495: LD_EXP 22
12499: PPUSH
12500: CALL_OW 303
12504: OR
12505: IFFALSE 12478
// wait ( 0 0$2 ) ;
12507: LD_INT 70
12509: PPUSH
12510: CALL_OW 67
// YouLost ( Heike ) ;
12514: LD_STRING Heike
12516: PPUSH
12517: CALL_OW 104
// exit ;
12521: GO 13443
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12523: LD_EXP 22
12527: PPUSH
12528: LD_STRING DH-QuestionY-1
12530: PPUSH
12531: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12535: LD_INT 10
12537: PPUSH
12538: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12542: LD_EXP 23
12546: PPUSH
12547: LD_STRING DO-Story-1
12549: PPUSH
12550: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12554: LD_EXP 23
12558: PPUSH
12559: LD_STRING DO-Story-2
12561: PPUSH
12562: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12566: LD_EXP 23
12570: PPUSH
12571: LD_STRING DO-Story-3
12573: PPUSH
12574: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12578: LD_EXP 23
12582: PPUSH
12583: LD_STRING DO-Story-4
12585: PPUSH
12586: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12590: LD_EXP 22
12594: PPUSH
12595: LD_STRING DH-Story-5
12597: PPUSH
12598: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12602: LD_EXP 23
12606: PPUSH
12607: LD_STRING DO-Story-6
12609: PPUSH
12610: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12614: LD_EXP 23
12618: PPUSH
12619: LD_STRING DO-Story-7
12621: PPUSH
12622: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12626: LD_EXP 22
12630: PPUSH
12631: LD_INT 82
12633: PPUSH
12634: LD_INT 44
12636: PPUSH
12637: CALL_OW 111
// AddComHold ( Heike ) ;
12641: LD_EXP 22
12645: PPUSH
12646: CALL_OW 200
// wait ( 0 0$4 ) ;
12650: LD_INT 140
12652: PPUSH
12653: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12657: LD_EXP 23
12661: PPUSH
12662: LD_INT 82
12664: PPUSH
12665: LD_INT 41
12667: PPUSH
12668: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12672: LD_EXP 23
12676: PPUSH
12677: LD_EXP 22
12681: PPUSH
12682: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12686: LD_INT 35
12688: PPUSH
12689: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12693: LD_EXP 22
12697: PPUSH
12698: LD_INT 82
12700: PPUSH
12701: LD_INT 44
12703: PPUSH
12704: CALL_OW 307
12708: IFFALSE 12686
// ComTurnXY ( Heike , 81 , 47 ) ;
12710: LD_EXP 22
12714: PPUSH
12715: LD_INT 81
12717: PPUSH
12718: LD_INT 47
12720: PPUSH
12721: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
12725: LD_EXP 22
12729: PPUSH
12730: LD_STRING DH-Story-8
12732: PPUSH
12733: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
12737: LD_EXP 23
12741: PPUSH
12742: LD_STRING DO-Story-9
12744: PPUSH
12745: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
12749: LD_EXP 23
12753: PPUSH
12754: LD_STRING DO-Story-10
12756: PPUSH
12757: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
12761: LD_EXP 22
12765: PPUSH
12766: LD_EXP 23
12770: PPUSH
12771: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
12775: LD_EXP 22
12779: PPUSH
12780: LD_STRING DH-Story-11
12782: PPUSH
12783: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
12787: LD_EXP 23
12791: PPUSH
12792: LD_EXP 22
12796: PPUSH
12797: CALL_OW 112
// wait ( 0 0$0.3 ) ;
12801: LD_INT 10
12803: PPUSH
12804: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12808: LD_EXP 23
12812: PPUSH
12813: LD_EXP 22
12817: PPUSH
12818: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
12822: LD_EXP 23
12826: PPUSH
12827: LD_STRING DO-Story-12
12829: PPUSH
12830: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
12834: LD_EXP 22
12838: PPUSH
12839: LD_STRING DH-Story-13
12841: PPUSH
12842: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
12846: LD_EXP 23
12850: PPUSH
12851: LD_STRING DO-Story-14
12853: PPUSH
12854: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
12858: LD_EXP 23
12862: PPUSH
12863: LD_STRING DO-Story-15
12865: PPUSH
12866: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
12870: LD_INT 84
12872: PPUSH
12873: LD_INT 48
12875: PPUSH
12876: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
12880: LD_EXP 22
12884: PPUSH
12885: LD_INT 84
12887: PPUSH
12888: LD_INT 48
12890: PPUSH
12891: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
12895: LD_EXP 22
12899: PPUSH
12900: LD_INT 84
12902: PPUSH
12903: LD_INT 49
12905: PPUSH
12906: CALL_OW 178
// wait ( 0 0$1 ) ;
12910: LD_INT 35
12912: PPUSH
12913: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
12917: LD_EXP 23
12921: PPUSH
12922: LD_EXP 22
12926: PPUSH
12927: CALL_OW 112
// wait ( 0 0$1 ) ;
12931: LD_INT 35
12933: PPUSH
12934: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
12938: LD_EXP 23
12942: PPUSH
12943: LD_EXP 22
12947: PPUSH
12948: CALL_OW 119
// wait ( 0 0$0.3 ) ;
12952: LD_INT 10
12954: PPUSH
12955: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
12959: LD_EXP 23
12963: PPUSH
12964: LD_STRING DO-Story-16
12966: PPUSH
12967: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
12971: LD_STRING QOmar2
12973: PPUSH
12974: CALL_OW 97
12978: PUSH
12979: LD_INT 2
12981: EQUAL
12982: IFFALSE 13320
// begin ComTurnUnit ( Heike , Omar ) ;
12984: LD_EXP 22
12988: PPUSH
12989: LD_EXP 23
12993: PPUSH
12994: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
12998: LD_EXP 22
13002: PPUSH
13003: LD_STRING DH-QuestionN-1
13005: PPUSH
13006: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
13010: LD_EXP 22
13014: PPUSH
13015: LD_INT 79
13017: PPUSH
13018: LD_INT 57
13020: PPUSH
13021: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13025: LD_EXP 22
13029: PPUSH
13030: LD_INT 68
13032: PPUSH
13033: LD_INT 53
13035: PPUSH
13036: CALL_OW 171
// wait ( 0 0$2 ) ;
13040: LD_INT 70
13042: PPUSH
13043: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13047: LD_EXP 23
13051: PPUSH
13052: LD_EXP 25
13056: PPUSH
13057: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13061: LD_INT 79
13063: PPUSH
13064: LD_INT 32
13066: PPUSH
13067: LD_INT 2
13069: PPUSH
13070: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13074: LD_INT 80
13076: PPUSH
13077: LD_INT 27
13079: PPUSH
13080: LD_INT 2
13082: PPUSH
13083: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13087: LD_INT 68
13089: PPUSH
13090: LD_INT 53
13092: PPUSH
13093: CALL_OW 84
// repeat wait ( 3 ) ;
13097: LD_INT 3
13099: PPUSH
13100: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13104: LD_EXP 22
13108: PPUSH
13109: LD_INT 68
13111: PPUSH
13112: LD_INT 53
13114: PPUSH
13115: CALL_OW 297
13119: PUSH
13120: LD_INT 6
13122: LESS
13123: IFFALSE 13097
// uc_side := 1 ;
13125: LD_ADDR_OWVAR 20
13129: PUSH
13130: LD_INT 1
13132: ST_TO_ADDR
// uc_nation := nation_american ;
13133: LD_ADDR_OWVAR 21
13137: PUSH
13138: LD_INT 1
13140: ST_TO_ADDR
// amTroops := [ ] ;
13141: LD_ADDR_VAR 0 5
13145: PUSH
13146: EMPTY
13147: ST_TO_ADDR
// for i := 1 to 3 do
13148: LD_ADDR_VAR 0 2
13152: PUSH
13153: DOUBLE
13154: LD_INT 1
13156: DEC
13157: ST_TO_ADDR
13158: LD_INT 3
13160: PUSH
13161: FOR_TO
13162: IFFALSE 13255
// begin PrepareSoldier ( false , 10 ) ;
13164: LD_INT 0
13166: PPUSH
13167: LD_INT 10
13169: PPUSH
13170: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13174: LD_ADDR_VAR 0 5
13178: PUSH
13179: LD_VAR 0 5
13183: PPUSH
13184: CALL_OW 44
13188: PPUSH
13189: CALL 58027 0 2
13193: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13194: LD_VAR 0 5
13198: PUSH
13199: LD_VAR 0 2
13203: ARRAY
13204: PPUSH
13205: LD_INT 2
13207: PPUSH
13208: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13212: LD_VAR 0 5
13216: PUSH
13217: LD_VAR 0 2
13221: ARRAY
13222: PPUSH
13223: LD_INT 11
13225: PPUSH
13226: LD_INT 0
13228: PPUSH
13229: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13233: LD_VAR 0 5
13237: PUSH
13238: LD_VAR 0 2
13242: ARRAY
13243: PPUSH
13244: LD_EXP 22
13248: PPUSH
13249: CALL_OW 115
// end ;
13253: GO 13161
13255: POP
13256: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13257: LD_EXP 22
13261: PPUSH
13262: LD_VAR 0 5
13266: PUSH
13267: LD_INT 1
13269: ARRAY
13270: PPUSH
13271: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13275: LD_INT 35
13277: PPUSH
13278: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13282: LD_EXP 22
13286: PPUSH
13287: CALL_OW 301
13291: PUSH
13292: LD_EXP 22
13296: PPUSH
13297: CALL_OW 303
13301: OR
13302: IFFALSE 13275
// wait ( 0 0$2 ) ;
13304: LD_INT 70
13306: PPUSH
13307: CALL_OW 67
// YouLost ( Heike ) ;
13311: LD_STRING Heike
13313: PPUSH
13314: CALL_OW 104
// exit ;
13318: GO 13443
// end ; Say ( Omar , DO-Objective-1 ) ;
13320: LD_EXP 23
13324: PPUSH
13325: LD_STRING DO-Objective-1
13327: PPUSH
13328: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13332: LD_EXP 22
13336: PPUSH
13337: LD_EXP 23
13341: PPUSH
13342: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13346: LD_EXP 22
13350: PPUSH
13351: LD_STRING DH-Objective-2
13353: PPUSH
13354: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13358: LD_EXP 23
13362: PPUSH
13363: LD_STRING DO-Objective-3
13365: PPUSH
13366: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13370: LD_INT 79
13372: PPUSH
13373: LD_INT 32
13375: PPUSH
13376: LD_INT 2
13378: PPUSH
13379: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13383: LD_INT 80
13385: PPUSH
13386: LD_INT 27
13388: PPUSH
13389: LD_INT 2
13391: PPUSH
13392: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13396: LD_EXP 23
13400: PPUSH
13401: LD_INT 2
13403: PPUSH
13404: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13408: LD_EXP 25
13412: PPUSH
13413: LD_INT 2
13415: PPUSH
13416: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13420: LD_STRING O1
13422: PPUSH
13423: CALL_OW 337
// InGameOff ;
13427: CALL_OW 9
// gameActive := true ;
13431: LD_ADDR_EXP 19
13435: PUSH
13436: LD_INT 1
13438: ST_TO_ADDR
// SaveForQuickRestart ;
13439: CALL_OW 22
// end ;
13443: LD_VAR 0 1
13447: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13448: LD_EXP 19
13452: PUSH
13453: LD_EXP 7
13457: NOT
13458: AND
13459: PUSH
13460: LD_INT 4
13462: PPUSH
13463: LD_INT 22
13465: PUSH
13466: LD_INT 2
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL_OW 70
13477: AND
13478: IFFALSE 13629
13480: GO 13482
13482: DISABLE
13483: LD_INT 0
13485: PPUSH
// begin spotArabianBase := true ;
13486: LD_ADDR_EXP 7
13490: PUSH
13491: LD_INT 1
13493: ST_TO_ADDR
// DialogueOn ;
13494: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13498: LD_INT 232
13500: PPUSH
13501: LD_INT 101
13503: PPUSH
13504: LD_INT 2
13506: PPUSH
13507: LD_INT 22
13509: NEG
13510: PPUSH
13511: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13515: LD_INT 232
13517: PPUSH
13518: LD_INT 101
13520: PPUSH
13521: LD_INT 2
13523: PPUSH
13524: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13528: LD_INT 232
13530: PPUSH
13531: LD_INT 101
13533: PPUSH
13534: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13538: LD_ADDR_VAR 0 1
13542: PUSH
13543: LD_INT 4
13545: PPUSH
13546: LD_INT 22
13548: PUSH
13549: LD_INT 5
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 70
13560: PUSH
13561: FOR_IN
13562: IFFALSE 13578
// SetSide ( i , 2 ) ;
13564: LD_VAR 0 1
13568: PPUSH
13569: LD_INT 2
13571: PPUSH
13572: CALL_OW 235
13576: GO 13561
13578: POP
13579: POP
// if not spotAmericanBase then
13580: LD_EXP 6
13584: NOT
13585: IFFALSE 13601
// Say ( Omar , DO-ArBase-1a ) else
13587: LD_EXP 23
13591: PPUSH
13592: LD_STRING DO-ArBase-1a
13594: PPUSH
13595: CALL_OW 88
13599: GO 13613
// Say ( Omar , DO-ArBase-1b ) ;
13601: LD_EXP 23
13605: PPUSH
13606: LD_STRING DO-ArBase-1b
13608: PPUSH
13609: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13613: LD_EXP 22
13617: PPUSH
13618: LD_STRING DH-ArBase-2
13620: PPUSH
13621: CALL_OW 88
// DialogueOff ;
13625: CALL_OW 7
// end ;
13629: PPOPN 1
13631: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13632: LD_EXP 19
13636: PUSH
13637: LD_INT 87
13639: PPUSH
13640: CALL_OW 306
13644: PUSH
13645: LD_INT 87
13647: PPUSH
13648: CALL_OW 313
13652: OR
13653: AND
13654: PUSH
13655: LD_EXP 22
13659: PPUSH
13660: CALL_OW 302
13664: AND
13665: PUSH
13666: LD_EXP 23
13670: PPUSH
13671: CALL_OW 302
13675: AND
13676: IFFALSE 14020
13678: GO 13680
13680: DISABLE
// begin DialogueOn ;
13681: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13685: LD_EXP 22
13689: PPUSH
13690: LD_STRING DH-Fac-1
13692: PPUSH
13693: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13697: LD_EXP 23
13701: PPUSH
13702: LD_STRING DOm-Fac-2
13704: PPUSH
13705: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
13709: LD_STRING 03_CargoRecycled
13711: PPUSH
13712: LD_INT 0
13714: PPUSH
13715: CALL_OW 30
13719: IFFALSE 13734
// SetTech ( tech_cargo , 2 , state_researched ) ;
13721: LD_INT 83
13723: PPUSH
13724: LD_INT 2
13726: PPUSH
13727: LD_INT 2
13729: PPUSH
13730: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
13734: LD_STRING 09_Markov
13736: PPUSH
13737: CALL_OW 28
13741: IFFALSE 13856
// begin Say ( Heike , DH-Fac-3a ) ;
13743: LD_EXP 22
13747: PPUSH
13748: LD_STRING DH-Fac-3a
13750: PPUSH
13751: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
13755: LD_INT 69
13757: PPUSH
13758: LD_INT 2
13760: PPUSH
13761: LD_INT 2
13763: PPUSH
13764: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
13768: LD_INT 39
13770: PPUSH
13771: LD_INT 2
13773: PPUSH
13774: LD_INT 2
13776: PPUSH
13777: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
13781: LD_INT 6
13783: PPUSH
13784: LD_INT 2
13786: PPUSH
13787: LD_INT 2
13789: PPUSH
13790: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13794: LD_INT 15
13796: PPUSH
13797: LD_INT 2
13799: PPUSH
13800: LD_INT 2
13802: PPUSH
13803: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13807: LD_EXP 22
13811: PPUSH
13812: LD_INT 3
13814: PPUSH
13815: CALL_OW 259
13819: PUSH
13820: LD_INT 10
13822: LESS
13823: IFFALSE 13854
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13825: LD_EXP 22
13829: PPUSH
13830: LD_INT 3
13832: PPUSH
13833: LD_EXP 22
13837: PPUSH
13838: LD_INT 3
13840: PPUSH
13841: CALL_OW 259
13845: PUSH
13846: LD_INT 1
13848: PLUS
13849: PPUSH
13850: CALL_OW 237
// end else
13854: GO 14009
// if TestCharacters ( 09_Olaf ) then
13856: LD_STRING 09_Olaf
13858: PPUSH
13859: CALL_OW 28
13863: IFFALSE 13952
// begin Say ( Heike , DH-Fac-3b ) ;
13865: LD_EXP 22
13869: PPUSH
13870: LD_STRING DH-Fac-3b
13872: PPUSH
13873: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
13877: LD_INT 6
13879: PPUSH
13880: LD_INT 2
13882: PPUSH
13883: LD_INT 2
13885: PPUSH
13886: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
13890: LD_INT 15
13892: PPUSH
13893: LD_INT 2
13895: PPUSH
13896: LD_INT 2
13898: PPUSH
13899: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
13903: LD_EXP 22
13907: PPUSH
13908: LD_INT 3
13910: PPUSH
13911: CALL_OW 259
13915: PUSH
13916: LD_INT 10
13918: LESS
13919: IFFALSE 13950
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
13921: LD_EXP 22
13925: PPUSH
13926: LD_INT 3
13928: PPUSH
13929: LD_EXP 22
13933: PPUSH
13934: LD_INT 3
13936: PPUSH
13937: CALL_OW 259
13941: PUSH
13942: LD_INT 1
13944: PLUS
13945: PPUSH
13946: CALL_OW 237
// end else
13950: GO 14009
// if GetSkill ( Heike , skill_mechanical ) > 5 then
13952: LD_EXP 22
13956: PPUSH
13957: LD_INT 3
13959: PPUSH
13960: CALL_OW 259
13964: PUSH
13965: LD_INT 5
13967: GREATER
13968: IFFALSE 13997
// begin Say ( Heike , DH-Fac-3c ) ;
13970: LD_EXP 22
13974: PPUSH
13975: LD_STRING DH-Fac-3c
13977: PPUSH
13978: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
13982: LD_INT 6
13984: PPUSH
13985: LD_INT 2
13987: PPUSH
13988: LD_INT 2
13990: PPUSH
13991: CALL_OW 322
// end else
13995: GO 14009
// Say ( Heike , DH-Fac-3d ) ;
13997: LD_EXP 22
14001: PPUSH
14002: LD_STRING DH-Fac-3d
14004: PPUSH
14005: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
14009: LD_STRING ARemote
14011: PPUSH
14012: CALL_OW 337
// DialogueOff ;
14016: CALL_OW 7
// end ;
14020: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14021: LD_EXP 19
14025: PUSH
14026: LD_INT 89
14028: PPUSH
14029: CALL_OW 306
14033: PUSH
14034: LD_INT 89
14036: PPUSH
14037: CALL_OW 313
14041: OR
14042: AND
14043: PUSH
14044: LD_EXP 22
14048: PPUSH
14049: CALL_OW 302
14053: AND
14054: PUSH
14055: LD_EXP 23
14059: PPUSH
14060: CALL_OW 302
14064: AND
14065: IFFALSE 14293
14067: GO 14069
14069: DISABLE
// begin DialogueOn ;
14070: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14074: LD_EXP 22
14078: PPUSH
14079: LD_STRING DH-Lab-1
14081: PPUSH
14082: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14086: LD_EXP 23
14090: PPUSH
14091: LD_STRING DOm-Lab-2
14093: PPUSH
14094: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14098: LD_STRING 09_Aviradze
14100: PPUSH
14101: CALL_OW 28
14105: IFFALSE 14160
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14107: LD_INT 1
14109: PPUSH
14110: LD_INT 2
14112: PPUSH
14113: LD_INT 2
14115: PPUSH
14116: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14120: LD_INT 2
14122: PPUSH
14123: LD_INT 2
14125: PPUSH
14126: LD_INT 2
14128: PPUSH
14129: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14133: LD_INT 11
14135: PPUSH
14136: LD_INT 2
14138: PPUSH
14139: LD_INT 2
14141: PPUSH
14142: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14146: LD_EXP 22
14150: PPUSH
14151: LD_STRING DH-Lab-4a
14153: PPUSH
14154: CALL_OW 88
// end else
14158: GO 14172
// Say ( Heike , DH-Lab-4b ) ;
14160: LD_EXP 22
14164: PPUSH
14165: LD_STRING DH-Lab-4b
14167: PPUSH
14168: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14172: LD_STRING 05_DrugsTested
14174: PPUSH
14175: LD_EXP 1
14179: PPUSH
14180: CALL_OW 30
14184: IFFALSE 14211
// begin Say ( Heike , DH-Lab-5a ) ;
14186: LD_EXP 22
14190: PPUSH
14191: LD_STRING DH-Lab-5a
14193: PPUSH
14194: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14198: LD_INT 5
14200: PPUSH
14201: LD_INT 2
14203: PPUSH
14204: LD_INT 1
14206: PPUSH
14207: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14211: LD_STRING 09_ApeBrain
14213: PPUSH
14214: LD_EXP 1
14218: PPUSH
14219: CALL_OW 30
14223: IFFALSE 14262
// begin Say ( Heike , DH-Lab-6a ) ;
14225: LD_EXP 22
14229: PPUSH
14230: LD_STRING DH-Lab-6a
14232: PPUSH
14233: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14237: LD_EXP 23
14241: PPUSH
14242: LD_STRING DOm-Lab-7a
14244: PPUSH
14245: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14249: LD_INT 4
14251: PPUSH
14252: LD_INT 2
14254: PPUSH
14255: LD_INT 1
14257: PPUSH
14258: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14262: LD_STRING 09_ApeNeural
14264: PPUSH
14265: LD_EXP 1
14269: PPUSH
14270: CALL_OW 30
14274: IFFALSE 14289
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14276: LD_INT 3
14278: PPUSH
14279: LD_INT 2
14281: PPUSH
14282: LD_INT 1
14284: PPUSH
14285: CALL_OW 322
// end ; DialogueOff ;
14289: CALL_OW 7
// end ;
14293: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14294: LD_EXP 19
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 25
14311: PUSH
14312: LD_INT 12
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: AND
14328: IFFALSE 14363
14330: GO 14332
14332: DISABLE
// begin if IsOk ( Heike ) then
14333: LD_EXP 22
14337: PPUSH
14338: CALL_OW 302
14342: IFFALSE 14356
// Say ( Heike , DH-Ape-1 ) ;
14344: LD_EXP 22
14348: PPUSH
14349: LD_STRING DH-Ape-1
14351: PPUSH
14352: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14356: LD_STRING AApes
14358: PPUSH
14359: CALL_OW 337
// end ;
14363: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14364: LD_EXP 19
14368: PUSH
14369: LD_INT 22
14371: PUSH
14372: LD_INT 2
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 25
14381: PUSH
14382: LD_INT 15
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 69
14397: PUSH
14398: LD_INT 5
14400: GREATEREQUAL
14401: AND
14402: IFFALSE 14504
14404: GO 14406
14406: DISABLE
// begin hasApes := true ;
14407: LD_ADDR_EXP 16
14411: PUSH
14412: LD_INT 1
14414: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14415: LD_STRING AApesOut
14417: PPUSH
14418: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14422: LD_EXP 22
14426: PPUSH
14427: CALL_OW 302
14431: NOT
14432: PUSH
14433: LD_EXP 23
14437: PPUSH
14438: CALL_OW 302
14442: NOT
14443: OR
14444: IFFALSE 14448
// exit ;
14446: GO 14504
// DialogueOn ;
14448: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14452: LD_EXP 22
14456: PPUSH
14457: LD_STRING DH-ApeArmy-1
14459: PPUSH
14460: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14464: LD_EXP 23
14468: PPUSH
14469: LD_STRING DOm-ApeArmy-2
14471: PPUSH
14472: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14476: LD_EXP 22
14480: PPUSH
14481: LD_STRING DH-ApeArmy-3
14483: PPUSH
14484: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14488: LD_EXP 23
14492: PPUSH
14493: LD_STRING DOm-ApeArmy-4
14495: PPUSH
14496: CALL_OW 88
// DialogueOff ;
14500: CALL_OW 7
// end ;
14504: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14505: LD_EXP 19
14509: PUSH
14510: LD_INT 5
14512: PPUSH
14513: LD_INT 2
14515: PPUSH
14516: CALL_OW 321
14520: PUSH
14521: LD_INT 2
14523: EQUAL
14524: AND
14525: IFFALSE 14561
14527: GO 14529
14529: DISABLE
// begin hasDrugs := true ;
14530: LD_ADDR_EXP 17
14534: PUSH
14535: LD_INT 1
14537: ST_TO_ADDR
// if IsOk ( Heike ) then
14538: LD_EXP 22
14542: PPUSH
14543: CALL_OW 302
14547: IFFALSE 14561
// Say ( Heike , DH-Stim-1 ) ;
14549: LD_EXP 22
14553: PPUSH
14554: LD_STRING DH-Stim-1
14556: PPUSH
14557: CALL_OW 88
// end ;
14561: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14562: LD_EXP 19
14566: PUSH
14567: LD_INT 22
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 25
14579: PUSH
14580: LD_INT 17
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PPUSH
14591: CALL_OW 69
14595: AND
14596: IFFALSE 14613
14598: GO 14600
14600: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14601: LD_EXP 22
14605: PPUSH
14606: LD_STRING DH-Kamikadze-1
14608: PPUSH
14609: CALL_OW 88
14613: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14614: LD_EXP 19
14618: PUSH
14619: LD_INT 22
14621: PUSH
14622: LD_INT 2
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 31
14631: PUSH
14632: LD_INT 31
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PPUSH
14643: CALL_OW 69
14647: AND
14648: PUSH
14649: LD_EXP 23
14653: PPUSH
14654: CALL_OW 302
14658: AND
14659: PUSH
14660: LD_EXP 22
14664: PPUSH
14665: CALL_OW 302
14669: AND
14670: IFFALSE 14755
14672: GO 14674
14674: DISABLE
// begin InGameOn ;
14675: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14679: LD_EXP 23
14683: PPUSH
14684: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14688: LD_EXP 22
14692: PPUSH
14693: LD_STRING DH-Mastodont-1
14695: PPUSH
14696: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
14700: LD_EXP 23
14704: PPUSH
14705: LD_STRING DOm-Mastodont-2
14707: PPUSH
14708: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
14712: LD_EXP 22
14716: PPUSH
14717: LD_STRING DH-Mastodont-3
14719: PPUSH
14720: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
14724: LD_EXP 23
14728: PPUSH
14729: LD_STRING DOm-Mastodont-4
14731: PPUSH
14732: CALL_OW 88
// hasMastodont := true ;
14736: LD_ADDR_EXP 13
14740: PUSH
14741: LD_INT 1
14743: ST_TO_ADDR
// InGameOff ;
14744: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
14748: LD_STRING ACH_MASTODONTTAME
14750: PPUSH
14751: CALL_OW 543
// end ;
14755: END
// every 0 0$1 trigger gameActive and tigerCounter do
14756: LD_EXP 19
14760: PUSH
14761: LD_EXP 21
14765: AND
14766: IFFALSE 14778
14768: GO 14770
14770: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
14771: LD_STRING ACH_TIGERTAME
14773: PPUSH
14774: CALL_OW 543
14778: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
14779: LD_EXP 19
14783: PUSH
14784: LD_EXP 21
14788: PUSH
14789: LD_INT 1
14791: GREATER
14792: AND
14793: IFFALSE 14897
14795: GO 14797
14797: DISABLE
// begin hasTigers := true ;
14798: LD_ADDR_EXP 15
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
14806: LD_EXP 23
14810: PPUSH
14811: CALL_OW 302
14815: NOT
14816: PUSH
14817: LD_EXP 22
14821: PPUSH
14822: CALL_OW 302
14826: NOT
14827: OR
14828: IFFALSE 14832
// exit ;
14830: GO 14897
// CenterNowOnUnits ( Omar ) ;
14832: LD_EXP 23
14836: PPUSH
14837: CALL_OW 87
// DialogueOn ;
14841: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
14845: LD_EXP 23
14849: PPUSH
14850: LD_STRING DOm-Tiger-1
14852: PPUSH
14853: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
14857: LD_EXP 22
14861: PPUSH
14862: LD_STRING DH-Tiger-2
14864: PPUSH
14865: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
14869: LD_EXP 23
14873: PPUSH
14874: LD_STRING DOm-Tiger-3
14876: PPUSH
14877: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
14881: LD_EXP 22
14885: PPUSH
14886: LD_STRING DH-Tiger-4
14888: PPUSH
14889: CALL_OW 88
// DialogueOff ;
14893: CALL_OW 7
// end ;
14897: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
14898: LD_EXP 19
14902: PUSH
14903: LD_INT 22
14905: PUSH
14906: LD_INT 2
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 50
14915: PUSH
14916: EMPTY
14917: LIST
14918: PUSH
14919: LD_INT 33
14921: PUSH
14922: LD_INT 2
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: LIST
14933: PPUSH
14934: CALL_OW 69
14938: PUSH
14939: LD_INT 3
14941: GREATEREQUAL
14942: AND
14943: IFFALSE 14986
14945: GO 14947
14947: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
14948: LD_STRING ARemoteOut
14950: PPUSH
14951: CALL_OW 337
// hasVehicles := true ;
14955: LD_ADDR_EXP 14
14959: PUSH
14960: LD_INT 1
14962: ST_TO_ADDR
// if IsOk ( Heike ) then
14963: LD_EXP 22
14967: PPUSH
14968: CALL_OW 302
14972: IFFALSE 14986
// Say ( Heike , DH-Mechanic-1 ) ;
14974: LD_EXP 22
14978: PPUSH
14979: LD_STRING DH-Mechanic-1
14981: PPUSH
14982: CALL_OW 88
// end ;
14986: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( amBaseArea , 2 ) ) do
14987: LD_EXP 19
14991: PUSH
14992: LD_INT 29
14994: PPUSH
14995: LD_INT 22
14997: PUSH
14998: LD_INT 2
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PPUSH
15005: CALL_OW 70
15009: PUSH
15010: LD_INT 1
15012: PPUSH
15013: LD_INT 2
15015: PPUSH
15016: CALL_OW 294
15020: OR
15021: AND
15022: IFFALSE 15035
15024: GO 15026
15026: DISABLE
// spotAmericanBase := true ;
15027: LD_ADDR_EXP 6
15031: PUSH
15032: LD_INT 1
15034: ST_TO_ADDR
15035: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15036: LD_EXP 19
15040: PUSH
15041: LD_EXP 6
15045: AND
15046: PUSH
15047: LD_EXP 23
15051: PPUSH
15052: CALL_OW 302
15056: AND
15057: PUSH
15058: LD_EXP 22
15062: PPUSH
15063: CALL_OW 302
15067: AND
15068: IFFALSE 15308
15070: GO 15072
15072: DISABLE
// begin DialogueOn ;
15073: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15077: LD_INT 92
15079: PPUSH
15080: LD_INT 129
15082: PPUSH
15083: LD_INT 2
15085: PPUSH
15086: LD_INT 22
15088: NEG
15089: PPUSH
15090: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15094: LD_INT 92
15096: PPUSH
15097: LD_INT 129
15099: PPUSH
15100: LD_INT 2
15102: PPUSH
15103: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15107: LD_INT 92
15109: PPUSH
15110: LD_INT 129
15112: PPUSH
15113: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15117: LD_INT 10
15119: PPUSH
15120: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15124: LD_EXP 23
15128: PPUSH
15129: LD_STRING DO-AmBase-1
15131: PPUSH
15132: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15136: LD_EXP 22
15140: PPUSH
15141: LD_STRING DH-AmBase-2
15143: PPUSH
15144: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15148: LD_EXP 23
15152: PPUSH
15153: LD_STRING DO-AmBase-3
15155: PPUSH
15156: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15160: LD_EXP 22
15164: PPUSH
15165: LD_STRING DH-AmBase-4
15167: PPUSH
15168: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15172: LD_EXP 23
15176: PPUSH
15177: LD_STRING DO-AmBase-5
15179: PPUSH
15180: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15184: LD_EXP 22
15188: PPUSH
15189: LD_STRING DH-AmBase-6
15191: PPUSH
15192: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15196: LD_EXP 23
15200: PPUSH
15201: LD_STRING DO-AmBase-7
15203: PPUSH
15204: CALL_OW 88
// if not spotArabianBase then
15208: LD_EXP 7
15212: NOT
15213: IFFALSE 15229
// begin Say ( Omar , DO-AmBase-8a ) ;
15215: LD_EXP 23
15219: PPUSH
15220: LD_STRING DO-AmBase-8a
15222: PPUSH
15223: CALL_OW 88
// end else
15227: GO 15241
// begin Say ( Omar , DO-AmBase-8b ) ;
15229: LD_EXP 23
15233: PPUSH
15234: LD_STRING DO-AmBase-8b
15236: PPUSH
15237: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15241: LD_EXP 22
15245: PPUSH
15246: CALL_OW 310
15250: IFFALSE 15268
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15252: LD_EXP 22
15256: PPUSH
15257: CALL_OW 310
15261: PPUSH
15262: CALL_OW 87
15266: GO 15277
// CenterNowOnUnits ( Heike ) ;
15268: LD_EXP 22
15272: PPUSH
15273: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15277: LD_EXP 22
15281: PPUSH
15282: LD_STRING DH-AmBase-9
15284: PPUSH
15285: CALL_OW 88
// DialogueOff ;
15289: CALL_OW 7
// spotByAmerican := true ;
15293: LD_ADDR_EXP 8
15297: PUSH
15298: LD_INT 1
15300: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15301: LD_STRING O2
15303: PPUSH
15304: CALL_OW 337
// end ;
15308: END
// function TalkAboutLegion ; begin
15309: LD_INT 0
15311: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15312: LD_EXP 22
15316: PPUSH
15317: LD_STRING DH-Legion-1
15319: PPUSH
15320: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15324: LD_EXP 23
15328: PPUSH
15329: LD_STRING DOm-Legion-2
15331: PPUSH
15332: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15336: LD_EXP 22
15340: PPUSH
15341: LD_STRING DH-Legion-3
15343: PPUSH
15344: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15348: LD_EXP 23
15352: PPUSH
15353: LD_STRING DOm-Legion-4
15355: PPUSH
15356: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15360: LD_EXP 22
15364: PPUSH
15365: LD_STRING DH-Legion-5
15367: PPUSH
15368: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15372: LD_EXP 23
15376: PPUSH
15377: LD_STRING DOm-Legion-6
15379: PPUSH
15380: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15384: LD_EXP 22
15388: PPUSH
15389: LD_STRING DH-Legion-7
15391: PPUSH
15392: CALL_OW 88
// end ;
15396: LD_VAR 0 1
15400: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15401: LD_EXP 19
15405: PUSH
15406: LD_EXP 22
15410: PUSH
15411: LD_EXP 23
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PPUSH
15420: LD_INT 22
15422: PPUSH
15423: CALL 11432 0 2
15427: AND
15428: PUSH
15429: LD_EXP 9
15433: NOT
15434: AND
15435: PUSH
15436: LD_EXP 10
15440: NOT
15441: AND
15442: IFFALSE 15927
15444: GO 15446
15446: DISABLE
15447: LD_INT 0
15449: PPUSH
15450: PPUSH
15451: PPUSH
// begin uc_side := 8 ;
15452: LD_ADDR_OWVAR 20
15456: PUSH
15457: LD_INT 8
15459: ST_TO_ADDR
// uc_nation := nation_american ;
15460: LD_ADDR_OWVAR 21
15464: PUSH
15465: LD_INT 1
15467: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15468: LD_INT 3
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: LD_INT 9
15479: PPUSH
15480: LD_INT 90
15482: PPUSH
15483: CALL 25165 0 5
// veh := CreateVehicle ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: CALL_OW 45
15496: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15497: LD_ADDR_EXP 42
15501: PUSH
15502: LD_EXP 42
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: CALL 58027 0 2
15516: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 2
15524: PPUSH
15525: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15529: LD_VAR 0 3
15533: PPUSH
15534: LD_INT 126
15536: PPUSH
15537: LD_INT 18
15539: PPUSH
15540: LD_INT 0
15542: PPUSH
15543: CALL_OW 48
// uc_nation := nation_arabian ;
15547: LD_ADDR_OWVAR 21
15551: PUSH
15552: LD_INT 2
15554: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15555: LD_INT 0
15557: PPUSH
15558: LD_INT 6
15560: PUSH
15561: LD_INT 7
15563: PUSH
15564: LD_INT 8
15566: PUSH
15567: LD_INT 9
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: PUSH
15576: LD_OWVAR 67
15580: ARRAY
15581: PPUSH
15582: CALL_OW 383
// un := CreateHuman ;
15586: LD_ADDR_VAR 0 2
15590: PUSH
15591: CALL_OW 44
15595: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15596: LD_ADDR_EXP 37
15600: PUSH
15601: LD_EXP 37
15605: PPUSH
15606: LD_VAR 0 2
15610: PPUSH
15611: CALL 58027 0 2
15615: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15616: LD_VAR 0 2
15620: PPUSH
15621: LD_VAR 0 3
15625: PPUSH
15626: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15630: LD_INT 0
15632: PPUSH
15633: LD_INT 6
15635: PUSH
15636: LD_INT 7
15638: PUSH
15639: LD_INT 8
15641: PUSH
15642: LD_INT 9
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: PUSH
15651: LD_OWVAR 67
15655: ARRAY
15656: PPUSH
15657: CALL_OW 381
// for i := 1 to 3 do
15661: LD_ADDR_VAR 0 1
15665: PUSH
15666: DOUBLE
15667: LD_INT 1
15669: DEC
15670: ST_TO_ADDR
15671: LD_INT 3
15673: PUSH
15674: FOR_TO
15675: IFFALSE 15742
// begin un := CreateHuman ;
15677: LD_ADDR_VAR 0 2
15681: PUSH
15682: CALL_OW 44
15686: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15687: LD_ADDR_EXP 37
15691: PUSH
15692: LD_EXP 37
15696: PPUSH
15697: LD_VAR 0 2
15701: PPUSH
15702: CALL 58027 0 2
15706: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15707: LD_VAR 0 2
15711: PPUSH
15712: LD_INT 2
15714: PPUSH
15715: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
15719: LD_VAR 0 2
15723: PPUSH
15724: LD_INT 126
15726: PPUSH
15727: LD_INT 18
15729: PPUSH
15730: LD_INT 4
15732: PPUSH
15733: LD_INT 0
15735: PPUSH
15736: CALL_OW 50
// end ;
15740: GO 15674
15742: POP
15743: POP
// wait ( 0 0$01 ) ;
15744: LD_INT 35
15746: PPUSH
15747: CALL_OW 67
// DialogueOn ;
15751: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
15755: LD_INT 126
15757: PPUSH
15758: LD_INT 18
15760: PPUSH
15761: LD_INT 2
15763: PPUSH
15764: LD_INT 16
15766: NEG
15767: PPUSH
15768: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
15772: LD_INT 126
15774: PPUSH
15775: LD_INT 18
15777: PPUSH
15778: CALL_OW 86
// TalkAboutLegion ;
15782: CALL 15309 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
15786: LD_INT 126
15788: PPUSH
15789: LD_INT 18
15791: PPUSH
15792: LD_INT 2
15794: PPUSH
15795: CALL_OW 331
// DialogueOff ;
15799: CALL_OW 7
// spotLegion := true ;
15803: LD_ADDR_EXP 10
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
15811: LD_EXP 37
15815: PPUSH
15816: LD_INT 164
15818: PPUSH
15819: LD_INT 47
15821: PPUSH
15822: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
15826: LD_EXP 37
15830: PPUSH
15831: LD_INT 179
15833: PPUSH
15834: LD_INT 20
15836: PPUSH
15837: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
15841: LD_INT 35
15843: PPUSH
15844: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
15848: LD_EXP 37
15852: PPUSH
15853: LD_INT 60
15855: PUSH
15856: EMPTY
15857: LIST
15858: PPUSH
15859: CALL_OW 72
15863: NOT
15864: PUSH
15865: LD_EXP 37
15869: PPUSH
15870: LD_INT 50
15872: PUSH
15873: EMPTY
15874: LIST
15875: PPUSH
15876: CALL_OW 72
15880: NOT
15881: OR
15882: IFFALSE 15841
// if not UnitFilter ( legEForces , [ f_ok ] ) then
15884: LD_EXP 37
15888: PPUSH
15889: LD_INT 50
15891: PUSH
15892: EMPTY
15893: LIST
15894: PPUSH
15895: CALL_OW 72
15899: NOT
15900: IFFALSE 15904
// exit ;
15902: GO 15927
// legForces := legForces union legEForces ;
15904: LD_ADDR_EXP 36
15908: PUSH
15909: LD_EXP 36
15913: PUSH
15914: LD_EXP 37
15918: UNION
15919: ST_TO_ADDR
// legEForces := [ ] ;
15920: LD_ADDR_EXP 37
15924: PUSH
15925: EMPTY
15926: ST_TO_ADDR
// end ;
15927: PPOPN 3
15929: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15930: LD_EXP 19
15934: PUSH
15935: LD_EXP 22
15939: PUSH
15940: LD_EXP 23
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PPUSH
15949: LD_INT 23
15951: PPUSH
15952: CALL 11432 0 2
15956: AND
15957: PUSH
15958: LD_EXP 9
15962: NOT
15963: AND
15964: PUSH
15965: LD_EXP 10
15969: NOT
15970: AND
15971: IFFALSE 16456
15973: GO 15975
15975: DISABLE
15976: LD_INT 0
15978: PPUSH
15979: PPUSH
15980: PPUSH
// begin uc_side := 8 ;
15981: LD_ADDR_OWVAR 20
15985: PUSH
15986: LD_INT 8
15988: ST_TO_ADDR
// uc_nation := nation_american ;
15989: LD_ADDR_OWVAR 21
15993: PUSH
15994: LD_INT 1
15996: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15997: LD_INT 3
15999: PPUSH
16000: LD_INT 1
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: LD_INT 9
16008: PPUSH
16009: LD_INT 90
16011: PPUSH
16012: CALL 25165 0 5
// veh := CreateVehicle ;
16016: LD_ADDR_VAR 0 3
16020: PUSH
16021: CALL_OW 45
16025: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16026: LD_ADDR_EXP 42
16030: PUSH
16031: LD_EXP 42
16035: PPUSH
16036: LD_VAR 0 3
16040: PPUSH
16041: CALL 58027 0 2
16045: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16046: LD_VAR 0 3
16050: PPUSH
16051: LD_INT 3
16053: PPUSH
16054: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16058: LD_VAR 0 3
16062: PPUSH
16063: LD_INT 224
16065: PPUSH
16066: LD_INT 57
16068: PPUSH
16069: LD_INT 0
16071: PPUSH
16072: CALL_OW 48
// uc_nation := nation_arabian ;
16076: LD_ADDR_OWVAR 21
16080: PUSH
16081: LD_INT 2
16083: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16084: LD_INT 0
16086: PPUSH
16087: LD_INT 6
16089: PUSH
16090: LD_INT 7
16092: PUSH
16093: LD_INT 8
16095: PUSH
16096: LD_INT 9
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: PUSH
16105: LD_OWVAR 67
16109: ARRAY
16110: PPUSH
16111: CALL_OW 383
// un := CreateHuman ;
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: CALL_OW 44
16124: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16125: LD_ADDR_EXP 37
16129: PUSH
16130: LD_EXP 37
16134: PPUSH
16135: LD_VAR 0 2
16139: PPUSH
16140: CALL 58027 0 2
16144: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16145: LD_VAR 0 2
16149: PPUSH
16150: LD_VAR 0 3
16154: PPUSH
16155: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16159: LD_INT 0
16161: PPUSH
16162: LD_INT 6
16164: PUSH
16165: LD_INT 7
16167: PUSH
16168: LD_INT 8
16170: PUSH
16171: LD_INT 9
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: PUSH
16180: LD_OWVAR 67
16184: ARRAY
16185: PPUSH
16186: CALL_OW 381
// for i := 1 to 3 do
16190: LD_ADDR_VAR 0 1
16194: PUSH
16195: DOUBLE
16196: LD_INT 1
16198: DEC
16199: ST_TO_ADDR
16200: LD_INT 3
16202: PUSH
16203: FOR_TO
16204: IFFALSE 16271
// begin un := CreateHuman ;
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: CALL_OW 44
16215: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16216: LD_ADDR_EXP 37
16220: PUSH
16221: LD_EXP 37
16225: PPUSH
16226: LD_VAR 0 2
16230: PPUSH
16231: CALL 58027 0 2
16235: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16236: LD_VAR 0 2
16240: PPUSH
16241: LD_INT 3
16243: PPUSH
16244: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16248: LD_VAR 0 2
16252: PPUSH
16253: LD_INT 224
16255: PPUSH
16256: LD_INT 57
16258: PPUSH
16259: LD_INT 4
16261: PPUSH
16262: LD_INT 0
16264: PPUSH
16265: CALL_OW 50
// end ;
16269: GO 16203
16271: POP
16272: POP
// wait ( 0 0$01 ) ;
16273: LD_INT 35
16275: PPUSH
16276: CALL_OW 67
// DialogueOn ;
16280: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16284: LD_INT 224
16286: PPUSH
16287: LD_INT 57
16289: PPUSH
16290: LD_INT 2
16292: PPUSH
16293: LD_INT 16
16295: NEG
16296: PPUSH
16297: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16301: LD_INT 224
16303: PPUSH
16304: LD_INT 57
16306: PPUSH
16307: CALL_OW 86
// TalkAboutLegion ;
16311: CALL 15309 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16315: LD_INT 224
16317: PPUSH
16318: LD_INT 57
16320: PPUSH
16321: LD_INT 2
16323: PPUSH
16324: CALL_OW 331
// DialogueOff ;
16328: CALL_OW 7
// spotLegion := true ;
16332: LD_ADDR_EXP 10
16336: PUSH
16337: LD_INT 1
16339: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16340: LD_EXP 37
16344: PPUSH
16345: LD_INT 164
16347: PPUSH
16348: LD_INT 47
16350: PPUSH
16351: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16355: LD_EXP 37
16359: PPUSH
16360: LD_INT 179
16362: PPUSH
16363: LD_INT 20
16365: PPUSH
16366: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16370: LD_INT 35
16372: PPUSH
16373: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16377: LD_EXP 37
16381: PPUSH
16382: LD_INT 60
16384: PUSH
16385: EMPTY
16386: LIST
16387: PPUSH
16388: CALL_OW 72
16392: NOT
16393: PUSH
16394: LD_EXP 37
16398: PPUSH
16399: LD_INT 50
16401: PUSH
16402: EMPTY
16403: LIST
16404: PPUSH
16405: CALL_OW 72
16409: NOT
16410: OR
16411: IFFALSE 16370
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16413: LD_EXP 37
16417: PPUSH
16418: LD_INT 50
16420: PUSH
16421: EMPTY
16422: LIST
16423: PPUSH
16424: CALL_OW 72
16428: NOT
16429: IFFALSE 16433
// exit ;
16431: GO 16456
// legForces := legForces union legEForces ;
16433: LD_ADDR_EXP 36
16437: PUSH
16438: LD_EXP 36
16442: PUSH
16443: LD_EXP 37
16447: UNION
16448: ST_TO_ADDR
// legEForces := [ ] ;
16449: LD_ADDR_EXP 37
16453: PUSH
16454: EMPTY
16455: ST_TO_ADDR
// end ;
16456: PPOPN 3
16458: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16459: LD_EXP 19
16463: PUSH
16464: LD_INT 8
16466: PPUSH
16467: LD_EXP 23
16471: PPUSH
16472: CALL_OW 292
16476: PUSH
16477: LD_INT 8
16479: PPUSH
16480: LD_EXP 22
16484: PPUSH
16485: CALL_OW 292
16489: OR
16490: PUSH
16491: LD_EXP 9
16495: OR
16496: AND
16497: PUSH
16498: LD_EXP 22
16502: PPUSH
16503: CALL_OW 302
16507: AND
16508: PUSH
16509: LD_EXP 23
16513: PPUSH
16514: CALL_OW 302
16518: AND
16519: IFFALSE 16660
16521: GO 16523
16523: DISABLE
// begin DialogueOn ;
16524: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16528: LD_EXP 35
16532: PPUSH
16533: LD_STRING DF-Spot-1
16535: PPUSH
16536: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16540: LD_EXP 22
16544: PPUSH
16545: LD_STRING DH-Spot-2
16547: PPUSH
16548: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16552: LD_EXP 35
16556: PPUSH
16557: LD_STRING DF-Spot-3
16559: PPUSH
16560: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16564: LD_EXP 22
16568: PPUSH
16569: LD_STRING DH-Spot-4
16571: PPUSH
16572: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16576: LD_EXP 23
16580: PPUSH
16581: LD_STRING DOm-Spot-5
16583: PPUSH
16584: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16588: LD_EXP 35
16592: PPUSH
16593: LD_STRING DF-Spot-6
16595: PPUSH
16596: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16600: LD_EXP 35
16604: PPUSH
16605: LD_STRING DF-Spot-7
16607: PPUSH
16608: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16612: LD_EXP 35
16616: PPUSH
16617: LD_STRING DF-Spot-8
16619: PPUSH
16620: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16624: LD_EXP 22
16628: PPUSH
16629: LD_STRING DH-Spot-9
16631: PPUSH
16632: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16636: LD_EXP 35
16640: PPUSH
16641: LD_STRING DF-Spot-10
16643: PPUSH
16644: CALL_OW 94
// DialogueOff ;
16648: CALL_OW 7
// spotByLegion := true ;
16652: LD_ADDR_EXP 9
16656: PUSH
16657: LD_INT 1
16659: ST_TO_ADDR
// end ;
16660: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16661: LD_EXP 19
16665: PUSH
16666: LD_EXP 9
16670: PUSH
16671: LD_EXP 10
16675: OR
16676: AND
16677: IFFALSE 16689
16679: GO 16681
16681: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16682: LD_STRING O3
16684: PPUSH
16685: CALL_OW 337
16689: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16690: LD_EXP 19
16694: PUSH
16695: LD_INT 22
16697: PUSH
16698: LD_INT 8
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 21
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 50
16717: PUSH
16718: EMPTY
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL_OW 69
16730: PUSH
16731: LD_INT 0
16733: EQUAL
16734: AND
16735: IFFALSE 16833
16737: GO 16739
16739: DISABLE
// begin legScriptActive := false ;
16740: LD_ADDR_EXP 4
16744: PUSH
16745: LD_INT 0
16747: ST_TO_ADDR
// if not americanDestroyed then
16748: LD_EXP 11
16752: NOT
16753: IFFALSE 16762
// SetAchievement ( ACH_REVANGE ) ;
16755: LD_STRING ACH_REVANGE
16757: PPUSH
16758: CALL_OW 543
// legionDestroyed := true ;
16762: LD_ADDR_EXP 12
16766: PUSH
16767: LD_INT 1
16769: ST_TO_ADDR
// DialogueOn ;
16770: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
16774: LD_EXP 35
16778: PPUSH
16779: LD_STRING DF-LegDes-1
16781: PPUSH
16782: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
16786: LD_EXP 22
16790: PPUSH
16791: LD_STRING DH-LegDes-2
16793: PPUSH
16794: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
16798: LD_EXP 35
16802: PPUSH
16803: LD_STRING DF-LegDes-3
16805: PPUSH
16806: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
16810: LD_EXP 22
16814: PPUSH
16815: LD_STRING DH-LegDes-4
16817: PPUSH
16818: CALL_OW 88
// DialogueOff ;
16822: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
16826: LD_STRING O5
16828: PPUSH
16829: CALL_OW 337
// end ;
16833: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
16834: LD_EXP 19
16838: PUSH
16839: LD_EXP 26
16843: PPUSH
16844: LD_INT 21
16846: PUSH
16847: LD_INT 1
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 50
16856: PUSH
16857: EMPTY
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 72
16868: PUSH
16869: LD_INT 6
16871: LESS
16872: AND
16873: IFFALSE 17121
16875: GO 16877
16877: DISABLE
16878: LD_INT 0
16880: PPUSH
16881: PPUSH
// begin amScriptActive := false ;
16882: LD_ADDR_EXP 3
16886: PUSH
16887: LD_INT 0
16889: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16890: LD_ADDR_VAR 0 2
16894: PUSH
16895: LD_EXP 26
16899: PPUSH
16900: LD_INT 21
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 50
16912: PUSH
16913: EMPTY
16914: LIST
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 72
16924: ST_TO_ADDR
// for i in tmp do
16925: LD_ADDR_VAR 0 1
16929: PUSH
16930: LD_VAR 0 2
16934: PUSH
16935: FOR_IN
16936: IFFALSE 16964
// begin ComExit ( i ) ;
16938: LD_VAR 0 1
16942: PPUSH
16943: CALL 58425 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
16947: LD_VAR 0 1
16951: PPUSH
16952: LD_INT 63
16954: PPUSH
16955: LD_INT 124
16957: PPUSH
16958: CALL_OW 171
// end ;
16962: GO 16935
16964: POP
16965: POP
// wait ( 0 0$2 ) ;
16966: LD_INT 70
16968: PPUSH
16969: CALL_OW 67
// americanDestroyed := true ;
16973: LD_ADDR_EXP 11
16977: PUSH
16978: LD_INT 1
16980: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16981: LD_INT 35
16983: PPUSH
16984: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
16988: LD_ADDR_VAR 0 2
16992: PUSH
16993: LD_EXP 26
16997: PPUSH
16998: LD_INT 21
17000: PUSH
17001: LD_INT 1
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 50
17010: PUSH
17011: EMPTY
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 72
17022: PUSH
17023: LD_EXP 34
17027: PPUSH
17028: LD_INT 50
17030: PUSH
17031: EMPTY
17032: LIST
17033: PPUSH
17034: CALL_OW 72
17038: UNION
17039: ST_TO_ADDR
// for i in tmp do
17040: LD_ADDR_VAR 0 1
17044: PUSH
17045: LD_VAR 0 2
17049: PUSH
17050: FOR_IN
17051: IFFALSE 17112
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17053: LD_VAR 0 1
17057: PPUSH
17058: LD_INT 63
17060: PPUSH
17061: LD_INT 124
17063: PPUSH
17064: CALL_OW 307
17068: PUSH
17069: LD_VAR 0 1
17073: PPUSH
17074: LD_INT 25
17076: PPUSH
17077: CALL_OW 308
17081: OR
17082: IFFALSE 17095
// RemoveUnit ( i ) else
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 64
17093: GO 17110
// ComMoveXY ( i , 63 , 124 ) ;
17095: LD_VAR 0 1
17099: PPUSH
17100: LD_INT 63
17102: PPUSH
17103: LD_INT 124
17105: PPUSH
17106: CALL_OW 111
// end ;
17110: GO 17050
17112: POP
17113: POP
// until not tmp ;
17114: LD_VAR 0 2
17118: NOT
17119: IFFALSE 16981
// end ;
17121: PPOPN 2
17123: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17124: LD_EXP 19
17128: PUSH
17129: LD_EXP 11
17133: AND
17134: PUSH
17135: LD_EXP 22
17139: PPUSH
17140: CALL_OW 302
17144: AND
17145: PUSH
17146: LD_EXP 23
17150: PPUSH
17151: CALL_OW 302
17155: AND
17156: IFFALSE 17646
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
17165: PPUSH
// begin DialogueOn ;
17166: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17170: LD_EXP 22
17174: PPUSH
17175: LD_STRING DH-Victory-1
17177: PPUSH
17178: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17182: LD_EXP 23
17186: PPUSH
17187: LD_STRING DOm-Victory-2
17189: PPUSH
17190: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17194: LD_EXP 23
17198: PPUSH
17199: LD_STRING DOm-Victory-3
17201: PPUSH
17202: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17206: LD_EXP 22
17210: PPUSH
17211: LD_STRING DH-Victory-4
17213: PPUSH
17214: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17218: LD_EXP 23
17222: PPUSH
17223: LD_STRING DOm-Victory-5
17225: PPUSH
17226: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17230: LD_EXP 23
17234: PPUSH
17235: LD_STRING DOm-Victory-6
17237: PPUSH
17238: CALL_OW 88
// DialogueOff ;
17242: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17246: LD_STRING O4
17248: PPUSH
17249: CALL_OW 337
// canFinish := true ;
17253: LD_ADDR_EXP 18
17257: PUSH
17258: LD_INT 1
17260: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17261: LD_INT 24
17263: PPUSH
17264: LD_INT 1
17266: PPUSH
17267: CALL_OW 424
// if not legionDestroyed then
17271: LD_EXP 12
17275: NOT
17276: IFFALSE 17646
// begin uc_nation := nation_arabian ;
17278: LD_ADDR_OWVAR 21
17282: PUSH
17283: LD_INT 2
17285: ST_TO_ADDR
// uc_side := 8 ;
17286: LD_ADDR_OWVAR 20
17290: PUSH
17291: LD_INT 8
17293: ST_TO_ADDR
// for i := 1 to 4 do
17294: LD_ADDR_VAR 0 1
17298: PUSH
17299: DOUBLE
17300: LD_INT 1
17302: DEC
17303: ST_TO_ADDR
17304: LD_INT 4
17306: PUSH
17307: FOR_TO
17308: IFFALSE 17389
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17310: LD_INT 0
17312: PPUSH
17313: LD_INT 8
17315: PUSH
17316: LD_INT 9
17318: PUSH
17319: LD_INT 10
17321: PUSH
17322: LD_INT 10
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: PUSH
17331: LD_OWVAR 67
17335: ARRAY
17336: PPUSH
17337: CALL_OW 381
// un := CreateHuman ;
17341: LD_ADDR_VAR 0 2
17345: PUSH
17346: CALL_OW 44
17350: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17351: LD_VAR 0 2
17355: PPUSH
17356: LD_INT 3
17358: PPUSH
17359: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_INT 26
17370: PPUSH
17371: LD_INT 0
17373: PPUSH
17374: CALL_OW 49
// ComCrawl ( un ) ;
17378: LD_VAR 0 2
17382: PPUSH
17383: CALL_OW 137
// end ;
17387: GO 17307
17389: POP
17390: POP
// for i := 1 to 3 do
17391: LD_ADDR_VAR 0 1
17395: PUSH
17396: DOUBLE
17397: LD_INT 1
17399: DEC
17400: ST_TO_ADDR
17401: LD_INT 3
17403: PUSH
17404: FOR_TO
17405: IFFALSE 17489
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17407: LD_INT 0
17409: PPUSH
17410: LD_INT 8
17412: PUSH
17413: LD_INT 9
17415: PUSH
17416: LD_INT 10
17418: PUSH
17419: LD_INT 10
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: PUSH
17428: LD_OWVAR 67
17432: ARRAY
17433: PPUSH
17434: CALL_OW 381
// un := CreateHuman ;
17438: LD_ADDR_VAR 0 2
17442: PUSH
17443: CALL_OW 44
17447: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17448: LD_VAR 0 2
17452: PPUSH
17453: LD_INT 8
17455: PPUSH
17456: CALL_OW 336
// SetDir ( un , 3 ) ;
17460: LD_VAR 0 2
17464: PPUSH
17465: LD_INT 3
17467: PPUSH
17468: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17472: LD_VAR 0 2
17476: PPUSH
17477: LD_INT 26
17479: PPUSH
17480: LD_INT 0
17482: PPUSH
17483: CALL_OW 49
// end ;
17487: GO 17404
17489: POP
17490: POP
// for i := 1 to 2 do
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: DOUBLE
17497: LD_INT 1
17499: DEC
17500: ST_TO_ADDR
17501: LD_INT 2
17503: PUSH
17504: FOR_TO
17505: IFFALSE 17644
// begin uc_side := 8 ;
17507: LD_ADDR_OWVAR 20
17511: PUSH
17512: LD_INT 8
17514: ST_TO_ADDR
// uc_nation := nation_american ;
17515: LD_ADDR_OWVAR 21
17519: PUSH
17520: LD_INT 1
17522: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17523: LD_INT 4
17525: PPUSH
17526: LD_INT 1
17528: PPUSH
17529: LD_INT 1
17531: PPUSH
17532: LD_INT 9
17534: PPUSH
17535: LD_INT 90
17537: PPUSH
17538: CALL 25165 0 5
// veh := CreateVehicle ;
17542: LD_ADDR_VAR 0 3
17546: PUSH
17547: CALL_OW 45
17551: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17552: LD_VAR 0 3
17556: PPUSH
17557: LD_INT 3
17559: PPUSH
17560: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17564: LD_VAR 0 3
17568: PPUSH
17569: LD_INT 27
17571: PPUSH
17572: LD_INT 0
17574: PPUSH
17575: CALL_OW 49
// uc_nation := nation_arabian ;
17579: LD_ADDR_OWVAR 21
17583: PUSH
17584: LD_INT 2
17586: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17587: LD_INT 0
17589: PPUSH
17590: LD_INT 8
17592: PUSH
17593: LD_INT 9
17595: PUSH
17596: LD_INT 10
17598: PUSH
17599: LD_INT 10
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: LD_OWVAR 67
17612: ARRAY
17613: PPUSH
17614: CALL_OW 383
// un := CreateHuman ;
17618: LD_ADDR_VAR 0 2
17622: PUSH
17623: CALL_OW 44
17627: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17628: LD_VAR 0 2
17632: PPUSH
17633: LD_VAR 0 3
17637: PPUSH
17638: CALL_OW 52
// end ;
17642: GO 17504
17644: POP
17645: POP
// end ; end ;
17646: PPOPN 3
17648: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17649: LD_EXP 19
17653: PUSH
17654: LD_EXP 18
17658: AND
17659: PUSH
17660: LD_EXP 23
17664: PUSH
17665: EMPTY
17666: LIST
17667: PPUSH
17668: LD_INT 24
17670: PPUSH
17671: CALL 11432 0 2
17675: AND
17676: PUSH
17677: LD_EXP 22
17681: PUSH
17682: EMPTY
17683: LIST
17684: PPUSH
17685: LD_INT 24
17687: PPUSH
17688: CALL 11432 0 2
17692: AND
17693: IFFALSE 17872
17695: GO 17697
17697: DISABLE
// begin if tick <= 50 50$00 then
17698: LD_OWVAR 1
17702: PUSH
17703: LD_INT 105000
17705: LESSEQUAL
17706: IFFALSE 17715
// SetAchievement ( ACH_HSPEED_10 ) ;
17708: LD_STRING ACH_HSPEED_10
17710: PPUSH
17711: CALL_OW 543
// if legionDestroyed then
17715: LD_EXP 12
17719: IFFALSE 17733
// AddMedal ( med1 , 1 ) else
17721: LD_STRING med1
17723: PPUSH
17724: LD_INT 1
17726: PPUSH
17727: CALL_OW 101
17731: GO 17744
// AddMedal ( med1 , - 1 ) ;
17733: LD_STRING med1
17735: PPUSH
17736: LD_INT 1
17738: NEG
17739: PPUSH
17740: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
17744: LD_OWVAR 1
17748: PUSH
17749: LD_INT 189000
17751: PUSH
17752: LD_INT 168000
17754: PUSH
17755: LD_INT 147000
17757: PUSH
17758: LD_INT 126000
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: PUSH
17767: LD_OWVAR 67
17771: ARRAY
17772: LESSEQUAL
17773: IFFALSE 17787
// AddMedal ( med2 , 1 ) else
17775: LD_STRING med2
17777: PPUSH
17778: LD_INT 1
17780: PPUSH
17781: CALL_OW 101
17785: GO 17798
// AddMedal ( med2 , - 1 ) ;
17787: LD_STRING med2
17789: PPUSH
17790: LD_INT 1
17792: NEG
17793: PPUSH
17794: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasApes + hasDrugs >= 3 then
17798: LD_EXP 16
17802: PUSH
17803: LD_EXP 14
17807: PLUS
17808: PUSH
17809: LD_EXP 15
17813: PLUS
17814: PUSH
17815: LD_EXP 13
17819: PLUS
17820: PUSH
17821: LD_EXP 16
17825: PLUS
17826: PUSH
17827: LD_EXP 17
17831: PLUS
17832: PUSH
17833: LD_INT 3
17835: GREATEREQUAL
17836: IFFALSE 17850
// AddMedal ( med3 , 1 ) else
17838: LD_STRING med3
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: CALL_OW 101
17848: GO 17861
// AddMedal ( med3 , - 1 ) ;
17850: LD_STRING med3
17852: PPUSH
17853: LD_INT 1
17855: NEG
17856: PPUSH
17857: CALL_OW 101
// GiveMedals ( MAIN ) ;
17861: LD_STRING MAIN
17863: PPUSH
17864: CALL_OW 102
// YouWin ;
17868: CALL_OW 103
// end ; end_of_file
17872: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
17873: LD_VAR 0 1
17877: PPUSH
17878: CALL 78273 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
17882: LD_EXP 5
17886: PUSH
17887: LD_VAR 0 1
17891: PPUSH
17892: CALL_OW 255
17896: PUSH
17897: LD_INT 2
17899: EQUAL
17900: AND
17901: PUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 263
17911: PUSH
17912: LD_INT 5
17914: EQUAL
17915: PUSH
17916: LD_VAR 0 1
17920: PPUSH
17921: CALL_OW 257
17925: PUSH
17926: LD_INT 12
17928: PUSH
17929: LD_INT 15
17931: PUSH
17932: LD_INT 16
17934: PUSH
17935: LD_INT 17
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: IN
17944: OR
17945: AND
17946: IFFALSE 18016
// begin apeAmount := Dec ( apeAmount ) ;
17948: LD_ADDR_EXP 5
17952: PUSH
17953: LD_EXP 5
17957: PPUSH
17958: CALL 59410 0 1
17962: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
17963: LD_INT 35
17965: PPUSH
17966: LD_INT 2100
17968: PPUSH
17969: CALL_OW 12
17973: PPUSH
17974: CALL_OW 67
// uc_side := 0 ;
17978: LD_ADDR_OWVAR 20
17982: PUSH
17983: LD_INT 0
17985: ST_TO_ADDR
// uc_nation := nation_nature ;
17986: LD_ADDR_OWVAR 21
17990: PUSH
17991: LD_INT 0
17993: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
17994: LD_INT 0
17996: PPUSH
17997: CALL 54295 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
18001: CALL_OW 44
18005: PPUSH
18006: LD_INT 6
18008: PPUSH
18009: LD_INT 0
18011: PPUSH
18012: CALL_OW 49
// end ; if unit = Heike then
18016: LD_VAR 0 1
18020: PUSH
18021: LD_EXP 22
18025: EQUAL
18026: IFFALSE 18035
// YouLost ( Heike ) ;
18028: LD_STRING Heike
18030: PPUSH
18031: CALL_OW 104
// if unit = Omar then
18035: LD_VAR 0 1
18039: PUSH
18040: LD_EXP 23
18044: EQUAL
18045: IFFALSE 18054
// YouLost ( Omar ) ;
18047: LD_STRING Omar
18049: PPUSH
18050: CALL_OW 104
// if unit in amForces then
18054: LD_VAR 0 1
18058: PUSH
18059: LD_EXP 26
18063: IN
18064: IFFALSE 18082
// amForces := amForces diff unit ;
18066: LD_ADDR_EXP 26
18070: PUSH
18071: LD_EXP 26
18075: PUSH
18076: LD_VAR 0 1
18080: DIFF
18081: ST_TO_ADDR
// if unit in amTanks then
18082: LD_VAR 0 1
18086: PUSH
18087: LD_EXP 31
18091: IN
18092: IFFALSE 18110
// amTanks := amTanks diff unit ;
18094: LD_ADDR_EXP 31
18098: PUSH
18099: LD_EXP 31
18103: PUSH
18104: LD_VAR 0 1
18108: DIFF
18109: ST_TO_ADDR
// if unit in amPatrol then
18110: LD_VAR 0 1
18114: PUSH
18115: LD_EXP 34
18119: IN
18120: IFFALSE 18138
// amPatrol := amPatrol diff unit ;
18122: LD_ADDR_EXP 34
18126: PUSH
18127: LD_EXP 34
18131: PUSH
18132: LD_VAR 0 1
18136: DIFF
18137: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 1 then
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 266
18147: PUSH
18148: LD_INT 32
18150: PUSH
18151: LD_INT 33
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: IN
18158: PUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 255
18168: PUSH
18169: LD_INT 1
18171: EQUAL
18172: AND
18173: IFFALSE 18236
// amBuildings := Join ( amBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18175: LD_ADDR_EXP 30
18179: PUSH
18180: LD_EXP 30
18184: PPUSH
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 266
18194: PUSH
18195: LD_VAR 0 1
18199: PPUSH
18200: CALL_OW 250
18204: PUSH
18205: LD_VAR 0 1
18209: PPUSH
18210: CALL_OW 251
18214: PUSH
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 254
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: PPUSH
18231: CALL 58027 0 2
18235: ST_TO_ADDR
// if unit in legForces then
18236: LD_VAR 0 1
18240: PUSH
18241: LD_EXP 36
18245: IN
18246: IFFALSE 18264
// legForces := legForces diff unit ;
18248: LD_ADDR_EXP 36
18252: PUSH
18253: LD_EXP 36
18257: PUSH
18258: LD_VAR 0 1
18262: DIFF
18263: ST_TO_ADDR
// if unit in legTanks then
18264: LD_VAR 0 1
18268: PUSH
18269: LD_EXP 42
18273: IN
18274: IFFALSE 18292
// legTanks := legTanks diff unit ;
18276: LD_ADDR_EXP 42
18280: PUSH
18281: LD_EXP 42
18285: PUSH
18286: LD_VAR 0 1
18290: DIFF
18291: ST_TO_ADDR
// if unit in legRTanks then
18292: LD_VAR 0 1
18296: PUSH
18297: LD_EXP 43
18301: IN
18302: IFFALSE 18320
// legRTanks := legRTanks diff unit ;
18304: LD_ADDR_EXP 43
18308: PUSH
18309: LD_EXP 43
18313: PUSH
18314: LD_VAR 0 1
18318: DIFF
18319: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 8 then
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 266
18329: PUSH
18330: LD_INT 32
18332: PUSH
18333: LD_INT 33
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: IN
18340: PUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 255
18350: PUSH
18351: LD_INT 8
18353: EQUAL
18354: AND
18355: IFFALSE 18418
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18357: LD_ADDR_EXP 41
18361: PUSH
18362: LD_EXP 41
18366: PPUSH
18367: LD_VAR 0 1
18371: PPUSH
18372: CALL_OW 266
18376: PUSH
18377: LD_VAR 0 1
18381: PPUSH
18382: CALL_OW 250
18386: PUSH
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 251
18396: PUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 254
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: PPUSH
18413: CALL 58027 0 2
18417: ST_TO_ADDR
// if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18418: LD_VAR 0 1
18422: PPUSH
18423: CALL_OW 264
18427: PUSH
18428: LD_INT 13
18430: EQUAL
18431: PUSH
18432: LD_VAR 0 1
18436: PPUSH
18437: CALL_OW 255
18441: PUSH
18442: LD_INT 1
18444: EQUAL
18445: AND
18446: IFFALSE 18481
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18448: LD_ADDR_EXP 28
18452: PUSH
18453: LD_EXP 28
18457: PPUSH
18458: LD_INT 2
18460: PUSH
18461: LD_INT 1
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: LD_INT 13
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: PPUSH
18476: CALL 58027 0 2
18480: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18481: LD_VAR 0 1
18485: PPUSH
18486: CALL_OW 264
18490: PUSH
18491: LD_INT 88
18493: EQUAL
18494: PUSH
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL_OW 255
18504: PUSH
18505: LD_INT 8
18507: EQUAL
18508: AND
18509: IFFALSE 18544
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18511: LD_ADDR_EXP 39
18515: PUSH
18516: LD_EXP 39
18520: PPUSH
18521: LD_INT 13
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 88
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: PPUSH
18539: CALL 58027 0 2
18543: ST_TO_ADDR
// if unit = amCargo then
18544: LD_VAR 0 1
18548: PUSH
18549: LD_EXP 33
18553: EQUAL
18554: IFFALSE 18597
// begin amCargo := 0 ;
18556: LD_ADDR_EXP 33
18560: PUSH
18561: LD_INT 0
18563: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
18564: LD_ADDR_EXP 28
18568: PUSH
18569: LD_EXP 28
18573: PPUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 12
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL 58027 0 2
18596: ST_TO_ADDR
// end ; if unit = legCargo then
18597: LD_VAR 0 1
18601: PUSH
18602: LD_EXP 44
18606: EQUAL
18607: IFFALSE 18650
// begin legCargo := 0 ;
18609: LD_ADDR_EXP 44
18613: PUSH
18614: LD_INT 0
18616: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
18617: LD_ADDR_EXP 39
18621: PUSH
18622: LD_EXP 39
18626: PPUSH
18627: LD_INT 13
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 32
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: PPUSH
18645: CALL 58027 0 2
18649: ST_TO_ADDR
// end ; end ;
18650: PPOPN 1
18652: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
18653: LD_ADDR_EXP 21
18657: PUSH
18658: LD_EXP 21
18662: PPUSH
18663: CALL 59388 0 1
18667: ST_TO_ADDR
// end ;
18668: PPOPN 2
18670: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
18671: LD_VAR 0 2
18675: PUSH
18676: LD_INT 3
18678: PUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 25
18695: PUSH
18696: LD_INT 3
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 69
18711: IN
18712: PUSH
18713: LD_VAR 0 1
18717: PPUSH
18718: CALL_OW 266
18722: PUSH
18723: LD_INT 3
18725: EQUAL
18726: AND
18727: PUSH
18728: LD_VAR 0 2
18732: PPUSH
18733: CALL_OW 256
18737: PUSH
18738: LD_INT 1000
18740: LESS
18741: AND
18742: IFFALSE 18768
// begin SetTag ( un , 0 ) ;
18744: LD_VAR 0 2
18748: PPUSH
18749: LD_INT 0
18751: PPUSH
18752: CALL_OW 109
// SetLives ( un , 1000 ) ;
18756: LD_VAR 0 2
18760: PPUSH
18761: LD_INT 1000
18763: PPUSH
18764: CALL_OW 234
// end ; end ;
18768: PPOPN 2
18770: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
18771: LD_INT 0
18773: PPUSH
18774: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
18775: LD_VAR 0 1
18779: PPUSH
18780: LD_VAR 0 2
18784: PPUSH
18785: CALL 78393 0 2
// side := GetSide ( fac ) ;
18789: LD_ADDR_VAR 0 3
18793: PUSH
18794: LD_VAR 0 2
18798: PPUSH
18799: CALL_OW 255
18803: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
18804: LD_ADDR_VAR 0 4
18808: PUSH
18809: LD_VAR 0 1
18813: PPUSH
18814: CALL_OW 264
18818: ST_TO_ADDR
// if side = 1 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 1
18826: EQUAL
18827: IFFALSE 18936
// begin amConstructList := Delete ( amConstructList , 1 ) ;
18829: LD_ADDR_EXP 28
18833: PUSH
18834: LD_EXP 28
18838: PPUSH
18839: LD_INT 1
18841: PPUSH
18842: CALL_OW 3
18846: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
18847: LD_VAR 0 4
18851: PUSH
18852: LD_INT 12
18854: EQUAL
18855: PUSH
18856: LD_EXP 33
18860: NOT
18861: AND
18862: IFFALSE 18874
// amCargo := veh ;
18864: LD_ADDR_EXP 33
18868: PUSH
18869: LD_VAR 0 1
18873: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
18874: LD_VAR 0 4
18878: PUSH
18879: LD_INT 12
18881: PUSH
18882: LD_INT 13
18884: PUSH
18885: LD_INT 14
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: IN
18893: IFFALSE 18897
// exit ;
18895: GO 19086
// amTanks := Join ( amTanks , veh ) ;
18897: LD_ADDR_EXP 31
18901: PUSH
18902: LD_EXP 31
18906: PPUSH
18907: LD_VAR 0 1
18911: PPUSH
18912: CALL 58027 0 2
18916: ST_TO_ADDR
// wait ( 0 0$01 ) ;
18917: LD_INT 35
18919: PPUSH
18920: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
18924: LD_VAR 0 1
18928: PPUSH
18929: LD_INT 12
18931: PPUSH
18932: CALL_OW 173
// end ; if side = 8 then
18936: LD_VAR 0 3
18940: PUSH
18941: LD_INT 8
18943: EQUAL
18944: IFFALSE 19086
// begin legConstructList := Delete ( legConstructList , 1 ) ;
18946: LD_ADDR_EXP 39
18950: PUSH
18951: LD_EXP 39
18955: PPUSH
18956: LD_INT 1
18958: PPUSH
18959: CALL_OW 3
18963: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
18964: LD_VAR 0 4
18968: PUSH
18969: LD_INT 32
18971: EQUAL
18972: PUSH
18973: LD_EXP 44
18977: NOT
18978: AND
18979: IFFALSE 18991
// legCargo := veh ;
18981: LD_ADDR_EXP 44
18985: PUSH
18986: LD_VAR 0 1
18990: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
18991: LD_VAR 0 4
18995: PUSH
18996: LD_INT 32
18998: PUSH
18999: LD_INT 88
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: IN
19006: IFFALSE 19010
// exit ;
19008: GO 19086
// if GetControl ( veh ) = control_manual then
19010: LD_VAR 0 1
19014: PPUSH
19015: CALL_OW 263
19019: PUSH
19020: LD_INT 1
19022: EQUAL
19023: IFFALSE 19047
// legTanks := Join ( legTanks , veh ) else
19025: LD_ADDR_EXP 42
19029: PUSH
19030: LD_EXP 42
19034: PPUSH
19035: LD_VAR 0 1
19039: PPUSH
19040: CALL 58027 0 2
19044: ST_TO_ADDR
19045: GO 19067
// legRTanks := Join ( legRTanks , veh ) ;
19047: LD_ADDR_EXP 43
19051: PUSH
19052: LD_EXP 43
19056: PPUSH
19057: LD_VAR 0 1
19061: PPUSH
19062: CALL 58027 0 2
19066: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19067: LD_INT 35
19069: PPUSH
19070: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19074: LD_VAR 0 1
19078: PPUSH
19079: LD_INT 15
19081: PPUSH
19082: CALL_OW 173
// end ; end ;
19086: PPOPN 4
19088: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19089: LD_INT 0
19091: PPUSH
19092: PPUSH
19093: PPUSH
// begin side := GetSide ( driver ) ;
19094: LD_ADDR_VAR 0 7
19098: PUSH
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 255
19108: ST_TO_ADDR
// if side = 1 and driver in amForces then
19109: LD_VAR 0 7
19113: PUSH
19114: LD_INT 1
19116: EQUAL
19117: PUSH
19118: LD_VAR 0 1
19122: PUSH
19123: LD_EXP 26
19127: IN
19128: AND
19129: IFFALSE 19341
// begin ComMoveToArea ( driver , amBaseArea ) ;
19131: LD_VAR 0 1
19135: PPUSH
19136: LD_INT 1
19138: PPUSH
19139: CALL_OW 113
// SetTag ( driver , tMech ) ;
19143: LD_VAR 0 1
19147: PPUSH
19148: LD_INT 7
19150: PPUSH
19151: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19155: LD_ADDR_VAR 0 6
19159: PUSH
19160: LD_INT 1
19162: PPUSH
19163: LD_INT 22
19165: PUSH
19166: LD_VAR 0 7
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 30
19177: PUSH
19178: LD_INT 3
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 50
19187: PUSH
19188: EMPTY
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 70
19200: ST_TO_ADDR
// if fac then
19201: LD_VAR 0 6
19205: IFFALSE 19227
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_VAR 0 6
19216: PUSH
19217: LD_INT 1
19219: ARRAY
19220: PPUSH
19221: CALL_OW 180
// exit ;
19225: GO 19561
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19227: LD_ADDR_VAR 0 5
19231: PUSH
19232: LD_INT 1
19234: PPUSH
19235: LD_INT 22
19237: PUSH
19238: LD_VAR 0 7
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: LD_INT 30
19252: PUSH
19253: LD_INT 4
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 30
19262: PUSH
19263: LD_INT 5
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 3
19277: PUSH
19278: LD_INT 62
19280: PUSH
19281: EMPTY
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 50
19290: PUSH
19291: EMPTY
19292: LIST
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PPUSH
19300: CALL_OW 70
19304: ST_TO_ADDR
// if arm then
19305: LD_VAR 0 5
19309: IFFALSE 19341
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19311: LD_VAR 0 1
19315: PPUSH
19316: LD_VAR 0 5
19320: PUSH
19321: LD_INT 1
19323: ARRAY
19324: PPUSH
19325: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19329: LD_VAR 0 1
19333: PPUSH
19334: LD_INT 1
19336: PPUSH
19337: CALL_OW 183
// end ; end ; if side = 8 then
19341: LD_VAR 0 7
19345: PUSH
19346: LD_INT 8
19348: EQUAL
19349: IFFALSE 19561
// begin ComMoveToArea ( driver , legBaseArea ) ;
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_INT 2
19358: PPUSH
19359: CALL_OW 113
// SetTag ( driver , tMech ) ;
19363: LD_VAR 0 1
19367: PPUSH
19368: LD_INT 7
19370: PPUSH
19371: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19375: LD_ADDR_VAR 0 6
19379: PUSH
19380: LD_INT 2
19382: PPUSH
19383: LD_INT 22
19385: PUSH
19386: LD_VAR 0 7
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 30
19397: PUSH
19398: LD_INT 3
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 50
19407: PUSH
19408: EMPTY
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: LIST
19415: PPUSH
19416: CALL_OW 70
19420: ST_TO_ADDR
// if fac then
19421: LD_VAR 0 6
19425: IFFALSE 19447
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19427: LD_VAR 0 1
19431: PPUSH
19432: LD_VAR 0 6
19436: PUSH
19437: LD_INT 1
19439: ARRAY
19440: PPUSH
19441: CALL_OW 180
// exit ;
19445: GO 19561
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19447: LD_ADDR_VAR 0 5
19451: PUSH
19452: LD_INT 2
19454: PPUSH
19455: LD_INT 22
19457: PUSH
19458: LD_VAR 0 7
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: LD_INT 30
19472: PUSH
19473: LD_INT 4
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 30
19482: PUSH
19483: LD_INT 5
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 3
19497: PUSH
19498: LD_INT 62
19500: PUSH
19501: EMPTY
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 50
19510: PUSH
19511: EMPTY
19512: LIST
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: PPUSH
19520: CALL_OW 70
19524: ST_TO_ADDR
// if arm then
19525: LD_VAR 0 5
19529: IFFALSE 19561
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19531: LD_VAR 0 1
19535: PPUSH
19536: LD_VAR 0 5
19540: PUSH
19541: LD_INT 1
19543: ARRAY
19544: PPUSH
19545: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19549: LD_VAR 0 1
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: CALL_OW 183
// end ; end ; end ;
19561: PPOPN 7
19563: END
// on BuildingComplete ( b ) do var side , type ;
19564: LD_INT 0
19566: PPUSH
19567: PPUSH
// begin side := GetSide ( b ) ;
19568: LD_ADDR_VAR 0 2
19572: PUSH
19573: LD_VAR 0 1
19577: PPUSH
19578: CALL_OW 255
19582: ST_TO_ADDR
// type := GetBType ( b ) ;
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: LD_VAR 0 1
19592: PPUSH
19593: CALL_OW 266
19597: ST_TO_ADDR
// if side = 1 then
19598: LD_VAR 0 2
19602: PUSH
19603: LD_INT 1
19605: EQUAL
19606: IFFALSE 19656
// begin amBuildings := Delete ( amBuildings , 1 ) ;
19608: LD_ADDR_EXP 30
19612: PUSH
19613: LD_EXP 30
19617: PPUSH
19618: LD_INT 1
19620: PPUSH
19621: CALL_OW 3
19625: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 0
19633: PUSH
19634: LD_INT 4
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: LIST
19644: IN
19645: IFFALSE 19656
// ComUpgrade ( b ) ;
19647: LD_VAR 0 1
19651: PPUSH
19652: CALL_OW 146
// end ; end ;
19656: PPOPN 3
19658: END
// on ResearchComplete ( tech , lab ) do var side ;
19659: LD_INT 0
19661: PPUSH
// begin side := GetSide ( lab ) ;
19662: LD_ADDR_VAR 0 3
19666: PUSH
19667: LD_VAR 0 2
19671: PPUSH
19672: CALL_OW 255
19676: ST_TO_ADDR
// if side = 1 then
19677: LD_VAR 0 3
19681: PUSH
19682: LD_INT 1
19684: EQUAL
19685: IFFALSE 19703
// amTech := amTech diff tech ;
19687: LD_ADDR_EXP 27
19691: PUSH
19692: LD_EXP 27
19696: PUSH
19697: LD_VAR 0 1
19701: DIFF
19702: ST_TO_ADDR
// end ;
19703: PPOPN 3
19705: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19706: LD_VAR 0 1
19710: PPUSH
19711: CALL 78377 0 1
// end ;
19715: PPOPN 1
19717: END
// on SailEvent ( event ) do begin case event of end ;
19718: LD_VAR 0 1
19722: PUSH
19723: POP
// end ;
19724: PPOPN 1
19726: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
19727: LD_EXP 19
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 19834
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
19736: LD_EXP 8
19740: NOT
19741: PUSH
19742: LD_VAR 0 1
19746: PUSH
19747: LD_INT 2
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: IN
19757: AND
19758: PUSH
19759: LD_VAR 0 2
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: IN
19774: AND
19775: IFFALSE 19785
// spotByAmerican := true ;
19777: LD_ADDR_EXP 8
19781: PUSH
19782: LD_INT 1
19784: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
19785: LD_EXP 9
19789: NOT
19790: PUSH
19791: LD_VAR 0 1
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 8
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: IN
19806: AND
19807: PUSH
19808: LD_VAR 0 2
19812: PUSH
19813: LD_INT 8
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: IN
19823: AND
19824: IFFALSE 19834
// spotByLegion := true ;
19826: LD_ADDR_EXP 9
19830: PUSH
19831: LD_INT 1
19833: ST_TO_ADDR
// end ; end_of_file
19834: PPOPN 2
19836: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
19837: LD_EXP 7
19841: IFFALSE 19948
19843: GO 19845
19845: DISABLE
19846: LD_INT 0
19848: PPUSH
19849: PPUSH
// begin enable ;
19850: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
19851: LD_INT 35
19853: PPUSH
19854: LD_INT 385
19856: PPUSH
19857: CALL_OW 12
19861: PPUSH
19862: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
19866: LD_ADDR_VAR 0 2
19870: PUSH
19871: LD_INT 16
19873: PUSH
19874: LD_INT 17
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
19881: LD_ADDR_VAR 0 1
19885: PUSH
19886: LD_VAR 0 2
19890: PUSH
19891: LD_INT 1
19893: PPUSH
19894: LD_VAR 0 2
19898: PPUSH
19899: CALL 22427 0 1
19903: PPUSH
19904: CALL_OW 12
19908: ARRAY
19909: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 435
19919: PUSH
19920: LD_INT 4
19922: LESS
19923: IFFALSE 19948
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
19925: LD_INT 1
19927: PPUSH
19928: LD_INT 5
19930: PPUSH
19931: CALL_OW 12
19935: PPUSH
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: CALL_OW 55
// end ;
19948: PPOPN 2
19950: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
19951: LD_OWVAR 1
19955: PUSH
19956: LD_INT 10500
19958: PUSH
19959: LD_INT 8400
19961: PUSH
19962: LD_INT 6300
19964: PUSH
19965: LD_INT 5250
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: LD_OWVAR 67
19978: ARRAY
19979: LESS
19980: PUSH
19981: LD_EXP 7
19985: AND
19986: IFFALSE 20019
19988: GO 19990
19990: DISABLE
// begin enable ;
19991: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
19992: LD_INT 1
19994: PPUSH
19995: LD_INT 5
19997: PPUSH
19998: CALL_OW 12
20002: PPUSH
20003: LD_INT 218
20005: PPUSH
20006: LD_INT 92
20008: PPUSH
20009: LD_INT 11
20011: PPUSH
20012: LD_INT 1
20014: PPUSH
20015: CALL_OW 56
// end ;
20019: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
20020: LD_OWVAR 1
20024: PUSH
20025: LD_INT 12600
20027: PUSH
20028: LD_INT 10500
20030: PUSH
20031: LD_INT 8400
20033: PUSH
20034: LD_INT 7350
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: PUSH
20043: LD_OWVAR 67
20047: ARRAY
20048: GREATER
20049: PUSH
20050: LD_EXP 7
20054: AND
20055: IFFALSE 20107
20057: GO 20059
20059: DISABLE
// begin enable ;
20060: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) then
20061: LD_INT 100
20063: PUSH
20064: LD_INT 10
20066: PUSH
20067: LD_OWVAR 67
20071: MUL
20072: MINUS
20073: PPUSH
20074: CALL_OW 13
20078: IFFALSE 20107
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20080: LD_INT 1
20082: PPUSH
20083: LD_INT 5
20085: PPUSH
20086: CALL_OW 12
20090: PPUSH
20091: LD_INT 218
20093: PPUSH
20094: LD_INT 92
20096: PPUSH
20097: LD_INT 11
20099: PPUSH
20100: LD_INT 1
20102: PPUSH
20103: CALL_OW 56
// end ;
20107: END
// every 0 0$55 trigger IsOk ( amBase ) do
20108: LD_INT 2
20110: PPUSH
20111: CALL_OW 302
20115: IFFALSE 20155
20117: GO 20119
20119: DISABLE
// begin enable ;
20120: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20121: LD_INT 13
20123: PPUSH
20124: CALL_OW 435
20128: PUSH
20129: LD_INT 3
20131: LESS
20132: IFFALSE 20155
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20134: LD_INT 1
20136: PPUSH
20137: LD_INT 5
20139: PPUSH
20140: CALL_OW 12
20144: PPUSH
20145: LD_INT 13
20147: PPUSH
20148: LD_INT 1
20150: PPUSH
20151: CALL_OW 55
// end ;
20155: END
// every 1 1$05 trigger IsOk ( legBase ) do
20156: LD_INT 38
20158: PPUSH
20159: CALL_OW 302
20163: IFFALSE 20203
20165: GO 20167
20167: DISABLE
// begin enable ;
20168: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20169: LD_INT 14
20171: PPUSH
20172: CALL_OW 435
20176: PUSH
20177: LD_INT 3
20179: LESS
20180: IFFALSE 20203
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20182: LD_INT 1
20184: PPUSH
20185: LD_INT 5
20187: PPUSH
20188: CALL_OW 12
20192: PPUSH
20193: LD_INT 14
20195: PPUSH
20196: LD_INT 1
20198: PPUSH
20199: CALL_OW 55
// end ; end_of_file
20203: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20204: LD_EXP 19
20208: PUSH
20209: LD_EXP 23
20213: PPUSH
20214: CALL_OW 257
20218: PUSH
20219: LD_INT 11
20221: NONEQUAL
20222: AND
20223: PUSH
20224: LD_EXP 7
20228: AND
20229: PUSH
20230: LD_INT 85
20232: PPUSH
20233: CALL_OW 302
20237: AND
20238: IFFALSE 20258
20240: GO 20242
20242: DISABLE
// begin Query ( QSheik ) ;
20243: LD_STRING QSheik
20245: PPUSH
20246: CALL_OW 97
// omarCanChangeClass := true ;
20250: LD_ADDR_EXP 20
20254: PUSH
20255: LD_INT 1
20257: ST_TO_ADDR
// end ;
20258: END
// every 0 0$2 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20259: LD_EXP 20
20263: PUSH
20264: LD_EXP 23
20268: PPUSH
20269: CALL_OW 257
20273: PUSH
20274: LD_INT 11
20276: NONEQUAL
20277: AND
20278: PUSH
20279: LD_EXP 23
20283: PPUSH
20284: CALL_OW 310
20288: PUSH
20289: LD_INT 85
20291: EQUAL
20292: AND
20293: IFFALSE 20324
20295: GO 20297
20297: DISABLE
// begin enable ;
20298: ENABLE
// if Query ( QChangeClass ) = 1 then
20299: LD_STRING QChangeClass
20301: PPUSH
20302: CALL_OW 97
20306: PUSH
20307: LD_INT 1
20309: EQUAL
20310: IFFALSE 20324
// SetClass ( Omar , class_desert_warior ) ;
20312: LD_EXP 23
20316: PPUSH
20317: LD_INT 11
20319: PPUSH
20320: CALL_OW 336
// end ; end_of_file
20324: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20325: LD_INT 0
20327: PPUSH
20328: PPUSH
// if exist_mode then
20329: LD_VAR 0 2
20333: IFFALSE 20358
// unit := CreateCharacter ( prefix & ident ) else
20335: LD_ADDR_VAR 0 5
20339: PUSH
20340: LD_VAR 0 3
20344: PUSH
20345: LD_VAR 0 1
20349: STR
20350: PPUSH
20351: CALL_OW 34
20355: ST_TO_ADDR
20356: GO 20373
// unit := NewCharacter ( ident ) ;
20358: LD_ADDR_VAR 0 5
20362: PUSH
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 25
20372: ST_TO_ADDR
// result := unit ;
20373: LD_ADDR_VAR 0 4
20377: PUSH
20378: LD_VAR 0 5
20382: ST_TO_ADDR
// end ;
20383: LD_VAR 0 4
20387: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20388: LD_INT 0
20390: PPUSH
20391: PPUSH
// if not side or not nation then
20392: LD_VAR 0 1
20396: NOT
20397: PUSH
20398: LD_VAR 0 2
20402: NOT
20403: OR
20404: IFFALSE 20408
// exit ;
20406: GO 21176
// case nation of nation_american :
20408: LD_VAR 0 2
20412: PUSH
20413: LD_INT 1
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20635
20421: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20422: LD_ADDR_VAR 0 4
20426: PUSH
20427: LD_INT 35
20429: PUSH
20430: LD_INT 45
20432: PUSH
20433: LD_INT 46
20435: PUSH
20436: LD_INT 47
20438: PUSH
20439: LD_INT 82
20441: PUSH
20442: LD_INT 83
20444: PUSH
20445: LD_INT 84
20447: PUSH
20448: LD_INT 85
20450: PUSH
20451: LD_INT 86
20453: PUSH
20454: LD_INT 1
20456: PUSH
20457: LD_INT 2
20459: PUSH
20460: LD_INT 6
20462: PUSH
20463: LD_INT 15
20465: PUSH
20466: LD_INT 16
20468: PUSH
20469: LD_INT 7
20471: PUSH
20472: LD_INT 12
20474: PUSH
20475: LD_INT 13
20477: PUSH
20478: LD_INT 10
20480: PUSH
20481: LD_INT 14
20483: PUSH
20484: LD_INT 20
20486: PUSH
20487: LD_INT 21
20489: PUSH
20490: LD_INT 22
20492: PUSH
20493: LD_INT 25
20495: PUSH
20496: LD_INT 32
20498: PUSH
20499: LD_INT 27
20501: PUSH
20502: LD_INT 36
20504: PUSH
20505: LD_INT 69
20507: PUSH
20508: LD_INT 39
20510: PUSH
20511: LD_INT 34
20513: PUSH
20514: LD_INT 40
20516: PUSH
20517: LD_INT 48
20519: PUSH
20520: LD_INT 49
20522: PUSH
20523: LD_INT 50
20525: PUSH
20526: LD_INT 51
20528: PUSH
20529: LD_INT 52
20531: PUSH
20532: LD_INT 53
20534: PUSH
20535: LD_INT 54
20537: PUSH
20538: LD_INT 55
20540: PUSH
20541: LD_INT 56
20543: PUSH
20544: LD_INT 57
20546: PUSH
20547: LD_INT 58
20549: PUSH
20550: LD_INT 59
20552: PUSH
20553: LD_INT 60
20555: PUSH
20556: LD_INT 61
20558: PUSH
20559: LD_INT 62
20561: PUSH
20562: LD_INT 80
20564: PUSH
20565: LD_INT 82
20567: PUSH
20568: LD_INT 83
20570: PUSH
20571: LD_INT 84
20573: PUSH
20574: LD_INT 85
20576: PUSH
20577: LD_INT 86
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: ST_TO_ADDR
20633: GO 21100
20635: LD_INT 2
20637: DOUBLE
20638: EQUAL
20639: IFTRUE 20643
20641: GO 20869
20643: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20644: LD_ADDR_VAR 0 4
20648: PUSH
20649: LD_INT 35
20651: PUSH
20652: LD_INT 45
20654: PUSH
20655: LD_INT 46
20657: PUSH
20658: LD_INT 47
20660: PUSH
20661: LD_INT 82
20663: PUSH
20664: LD_INT 83
20666: PUSH
20667: LD_INT 84
20669: PUSH
20670: LD_INT 85
20672: PUSH
20673: LD_INT 87
20675: PUSH
20676: LD_INT 70
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: LD_INT 11
20684: PUSH
20685: LD_INT 3
20687: PUSH
20688: LD_INT 4
20690: PUSH
20691: LD_INT 5
20693: PUSH
20694: LD_INT 6
20696: PUSH
20697: LD_INT 15
20699: PUSH
20700: LD_INT 18
20702: PUSH
20703: LD_INT 7
20705: PUSH
20706: LD_INT 17
20708: PUSH
20709: LD_INT 8
20711: PUSH
20712: LD_INT 20
20714: PUSH
20715: LD_INT 21
20717: PUSH
20718: LD_INT 22
20720: PUSH
20721: LD_INT 72
20723: PUSH
20724: LD_INT 26
20726: PUSH
20727: LD_INT 69
20729: PUSH
20730: LD_INT 39
20732: PUSH
20733: LD_INT 40
20735: PUSH
20736: LD_INT 41
20738: PUSH
20739: LD_INT 42
20741: PUSH
20742: LD_INT 43
20744: PUSH
20745: LD_INT 48
20747: PUSH
20748: LD_INT 49
20750: PUSH
20751: LD_INT 50
20753: PUSH
20754: LD_INT 51
20756: PUSH
20757: LD_INT 52
20759: PUSH
20760: LD_INT 53
20762: PUSH
20763: LD_INT 54
20765: PUSH
20766: LD_INT 55
20768: PUSH
20769: LD_INT 56
20771: PUSH
20772: LD_INT 60
20774: PUSH
20775: LD_INT 61
20777: PUSH
20778: LD_INT 62
20780: PUSH
20781: LD_INT 66
20783: PUSH
20784: LD_INT 67
20786: PUSH
20787: LD_INT 68
20789: PUSH
20790: LD_INT 81
20792: PUSH
20793: LD_INT 82
20795: PUSH
20796: LD_INT 83
20798: PUSH
20799: LD_INT 84
20801: PUSH
20802: LD_INT 85
20804: PUSH
20805: LD_INT 87
20807: PUSH
20808: LD_INT 88
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: ST_TO_ADDR
20867: GO 21100
20869: LD_INT 3
20871: DOUBLE
20872: EQUAL
20873: IFTRUE 20877
20875: GO 21099
20877: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20878: LD_ADDR_VAR 0 4
20882: PUSH
20883: LD_INT 46
20885: PUSH
20886: LD_INT 47
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 82
20897: PUSH
20898: LD_INT 83
20900: PUSH
20901: LD_INT 84
20903: PUSH
20904: LD_INT 85
20906: PUSH
20907: LD_INT 86
20909: PUSH
20910: LD_INT 11
20912: PUSH
20913: LD_INT 9
20915: PUSH
20916: LD_INT 20
20918: PUSH
20919: LD_INT 19
20921: PUSH
20922: LD_INT 21
20924: PUSH
20925: LD_INT 24
20927: PUSH
20928: LD_INT 22
20930: PUSH
20931: LD_INT 25
20933: PUSH
20934: LD_INT 28
20936: PUSH
20937: LD_INT 29
20939: PUSH
20940: LD_INT 30
20942: PUSH
20943: LD_INT 31
20945: PUSH
20946: LD_INT 37
20948: PUSH
20949: LD_INT 38
20951: PUSH
20952: LD_INT 32
20954: PUSH
20955: LD_INT 27
20957: PUSH
20958: LD_INT 33
20960: PUSH
20961: LD_INT 69
20963: PUSH
20964: LD_INT 39
20966: PUSH
20967: LD_INT 34
20969: PUSH
20970: LD_INT 40
20972: PUSH
20973: LD_INT 71
20975: PUSH
20976: LD_INT 23
20978: PUSH
20979: LD_INT 44
20981: PUSH
20982: LD_INT 48
20984: PUSH
20985: LD_INT 49
20987: PUSH
20988: LD_INT 50
20990: PUSH
20991: LD_INT 51
20993: PUSH
20994: LD_INT 52
20996: PUSH
20997: LD_INT 53
20999: PUSH
21000: LD_INT 54
21002: PUSH
21003: LD_INT 55
21005: PUSH
21006: LD_INT 56
21008: PUSH
21009: LD_INT 57
21011: PUSH
21012: LD_INT 58
21014: PUSH
21015: LD_INT 59
21017: PUSH
21018: LD_INT 63
21020: PUSH
21021: LD_INT 64
21023: PUSH
21024: LD_INT 65
21026: PUSH
21027: LD_INT 82
21029: PUSH
21030: LD_INT 83
21032: PUSH
21033: LD_INT 84
21035: PUSH
21036: LD_INT 85
21038: PUSH
21039: LD_INT 86
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: ST_TO_ADDR
21097: GO 21100
21099: POP
// if state > - 1 and state < 3 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 1
21107: NEG
21108: GREATER
21109: PUSH
21110: LD_VAR 0 3
21114: PUSH
21115: LD_INT 3
21117: LESS
21118: AND
21119: IFFALSE 21176
// for i in result do
21121: LD_ADDR_VAR 0 5
21125: PUSH
21126: LD_VAR 0 4
21130: PUSH
21131: FOR_IN
21132: IFFALSE 21174
// if GetTech ( i , side ) <> state then
21134: LD_VAR 0 5
21138: PPUSH
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 321
21148: PUSH
21149: LD_VAR 0 3
21153: NONEQUAL
21154: IFFALSE 21172
// result := result diff i ;
21156: LD_ADDR_VAR 0 4
21160: PUSH
21161: LD_VAR 0 4
21165: PUSH
21166: LD_VAR 0 5
21170: DIFF
21171: ST_TO_ADDR
21172: GO 21131
21174: POP
21175: POP
// end ;
21176: LD_VAR 0 4
21180: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21181: LD_INT 0
21183: PPUSH
21184: PPUSH
21185: PPUSH
// result := true ;
21186: LD_ADDR_VAR 0 3
21190: PUSH
21191: LD_INT 1
21193: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21194: LD_ADDR_VAR 0 5
21198: PUSH
21199: LD_VAR 0 2
21203: PPUSH
21204: CALL_OW 480
21208: ST_TO_ADDR
// if not tmp then
21209: LD_VAR 0 5
21213: NOT
21214: IFFALSE 21218
// exit ;
21216: GO 21267
// for i in tmp do
21218: LD_ADDR_VAR 0 4
21222: PUSH
21223: LD_VAR 0 5
21227: PUSH
21228: FOR_IN
21229: IFFALSE 21265
// if GetTech ( i , side ) <> state_researched then
21231: LD_VAR 0 4
21235: PPUSH
21236: LD_VAR 0 1
21240: PPUSH
21241: CALL_OW 321
21245: PUSH
21246: LD_INT 2
21248: NONEQUAL
21249: IFFALSE 21263
// begin result := false ;
21251: LD_ADDR_VAR 0 3
21255: PUSH
21256: LD_INT 0
21258: ST_TO_ADDR
// exit ;
21259: POP
21260: POP
21261: GO 21267
// end ;
21263: GO 21228
21265: POP
21266: POP
// end ;
21267: LD_VAR 0 3
21271: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21272: LD_INT 0
21274: PPUSH
21275: PPUSH
21276: PPUSH
21277: PPUSH
21278: PPUSH
21279: PPUSH
21280: PPUSH
21281: PPUSH
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
21286: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21287: LD_VAR 0 1
21291: NOT
21292: PUSH
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 257
21302: PUSH
21303: LD_INT 9
21305: NONEQUAL
21306: OR
21307: IFFALSE 21311
// exit ;
21309: GO 21884
// side := GetSide ( unit ) ;
21311: LD_ADDR_VAR 0 9
21315: PUSH
21316: LD_VAR 0 1
21320: PPUSH
21321: CALL_OW 255
21325: ST_TO_ADDR
// tech_space := tech_spacanom ;
21326: LD_ADDR_VAR 0 12
21330: PUSH
21331: LD_INT 29
21333: ST_TO_ADDR
// tech_time := tech_taurad ;
21334: LD_ADDR_VAR 0 13
21338: PUSH
21339: LD_INT 28
21341: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21342: LD_ADDR_VAR 0 11
21346: PUSH
21347: LD_VAR 0 1
21351: PPUSH
21352: CALL_OW 310
21356: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21357: LD_VAR 0 11
21361: PPUSH
21362: CALL_OW 247
21366: PUSH
21367: LD_INT 2
21369: EQUAL
21370: IFFALSE 21374
// exit ;
21372: GO 21884
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21374: LD_ADDR_VAR 0 8
21378: PUSH
21379: LD_INT 81
21381: PUSH
21382: LD_VAR 0 9
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 3
21393: PUSH
21394: LD_INT 21
21396: PUSH
21397: LD_INT 3
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PPUSH
21412: CALL_OW 69
21416: ST_TO_ADDR
// if not tmp then
21417: LD_VAR 0 8
21421: NOT
21422: IFFALSE 21426
// exit ;
21424: GO 21884
// if in_unit then
21426: LD_VAR 0 11
21430: IFFALSE 21454
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21432: LD_ADDR_VAR 0 10
21436: PUSH
21437: LD_VAR 0 8
21441: PPUSH
21442: LD_VAR 0 11
21446: PPUSH
21447: CALL_OW 74
21451: ST_TO_ADDR
21452: GO 21474
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21454: LD_ADDR_VAR 0 10
21458: PUSH
21459: LD_VAR 0 8
21463: PPUSH
21464: LD_VAR 0 1
21468: PPUSH
21469: CALL_OW 74
21473: ST_TO_ADDR
// if not enemy then
21474: LD_VAR 0 10
21478: NOT
21479: IFFALSE 21483
// exit ;
21481: GO 21884
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21483: LD_VAR 0 11
21487: PUSH
21488: LD_VAR 0 11
21492: PPUSH
21493: LD_VAR 0 10
21497: PPUSH
21498: CALL_OW 296
21502: PUSH
21503: LD_INT 13
21505: GREATER
21506: AND
21507: PUSH
21508: LD_VAR 0 1
21512: PPUSH
21513: LD_VAR 0 10
21517: PPUSH
21518: CALL_OW 296
21522: PUSH
21523: LD_INT 12
21525: GREATER
21526: OR
21527: IFFALSE 21531
// exit ;
21529: GO 21884
// missile := [ 1 ] ;
21531: LD_ADDR_VAR 0 14
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21542: LD_VAR 0 9
21546: PPUSH
21547: LD_VAR 0 12
21551: PPUSH
21552: CALL_OW 325
21556: IFFALSE 21585
// missile := Replace ( missile , missile + 1 , 2 ) ;
21558: LD_ADDR_VAR 0 14
21562: PUSH
21563: LD_VAR 0 14
21567: PPUSH
21568: LD_VAR 0 14
21572: PUSH
21573: LD_INT 1
21575: PLUS
21576: PPUSH
21577: LD_INT 2
21579: PPUSH
21580: CALL_OW 1
21584: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21585: LD_VAR 0 9
21589: PPUSH
21590: LD_VAR 0 13
21594: PPUSH
21595: CALL_OW 325
21599: PUSH
21600: LD_VAR 0 10
21604: PPUSH
21605: CALL_OW 255
21609: PPUSH
21610: LD_VAR 0 13
21614: PPUSH
21615: CALL_OW 325
21619: NOT
21620: AND
21621: IFFALSE 21650
// missile := Replace ( missile , missile + 1 , 3 ) ;
21623: LD_ADDR_VAR 0 14
21627: PUSH
21628: LD_VAR 0 14
21632: PPUSH
21633: LD_VAR 0 14
21637: PUSH
21638: LD_INT 1
21640: PLUS
21641: PPUSH
21642: LD_INT 3
21644: PPUSH
21645: CALL_OW 1
21649: ST_TO_ADDR
// if missile < 2 then
21650: LD_VAR 0 14
21654: PUSH
21655: LD_INT 2
21657: LESS
21658: IFFALSE 21662
// exit ;
21660: GO 21884
// x := GetX ( enemy ) ;
21662: LD_ADDR_VAR 0 4
21666: PUSH
21667: LD_VAR 0 10
21671: PPUSH
21672: CALL_OW 250
21676: ST_TO_ADDR
// y := GetY ( enemy ) ;
21677: LD_ADDR_VAR 0 5
21681: PUSH
21682: LD_VAR 0 10
21686: PPUSH
21687: CALL_OW 251
21691: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21692: LD_ADDR_VAR 0 6
21696: PUSH
21697: LD_VAR 0 4
21701: PUSH
21702: LD_INT 1
21704: NEG
21705: PPUSH
21706: LD_INT 1
21708: PPUSH
21709: CALL_OW 12
21713: PLUS
21714: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21715: LD_ADDR_VAR 0 7
21719: PUSH
21720: LD_VAR 0 5
21724: PUSH
21725: LD_INT 1
21727: NEG
21728: PPUSH
21729: LD_INT 1
21731: PPUSH
21732: CALL_OW 12
21736: PLUS
21737: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21738: LD_VAR 0 6
21742: PPUSH
21743: LD_VAR 0 7
21747: PPUSH
21748: CALL_OW 488
21752: NOT
21753: IFFALSE 21775
// begin _x := x ;
21755: LD_ADDR_VAR 0 6
21759: PUSH
21760: LD_VAR 0 4
21764: ST_TO_ADDR
// _y := y ;
21765: LD_ADDR_VAR 0 7
21769: PUSH
21770: LD_VAR 0 5
21774: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21775: LD_ADDR_VAR 0 3
21779: PUSH
21780: LD_INT 1
21782: PPUSH
21783: LD_VAR 0 14
21787: PPUSH
21788: CALL_OW 12
21792: ST_TO_ADDR
// case i of 1 :
21793: LD_VAR 0 3
21797: PUSH
21798: LD_INT 1
21800: DOUBLE
21801: EQUAL
21802: IFTRUE 21806
21804: GO 21823
21806: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21807: LD_VAR 0 1
21811: PPUSH
21812: LD_VAR 0 10
21816: PPUSH
21817: CALL_OW 115
21821: GO 21884
21823: LD_INT 2
21825: DOUBLE
21826: EQUAL
21827: IFTRUE 21831
21829: GO 21853
21831: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21832: LD_VAR 0 1
21836: PPUSH
21837: LD_VAR 0 6
21841: PPUSH
21842: LD_VAR 0 7
21846: PPUSH
21847: CALL_OW 153
21851: GO 21884
21853: LD_INT 3
21855: DOUBLE
21856: EQUAL
21857: IFTRUE 21861
21859: GO 21883
21861: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21862: LD_VAR 0 1
21866: PPUSH
21867: LD_VAR 0 6
21871: PPUSH
21872: LD_VAR 0 7
21876: PPUSH
21877: CALL_OW 154
21881: GO 21884
21883: POP
// end ;
21884: LD_VAR 0 2
21888: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
// if not unit or not building then
21897: LD_VAR 0 1
21901: NOT
21902: PUSH
21903: LD_VAR 0 2
21907: NOT
21908: OR
21909: IFFALSE 21913
// exit ;
21911: GO 22071
// x := GetX ( building ) ;
21913: LD_ADDR_VAR 0 5
21917: PUSH
21918: LD_VAR 0 2
21922: PPUSH
21923: CALL_OW 250
21927: ST_TO_ADDR
// y := GetY ( building ) ;
21928: LD_ADDR_VAR 0 6
21932: PUSH
21933: LD_VAR 0 2
21937: PPUSH
21938: CALL_OW 251
21942: ST_TO_ADDR
// for i = 0 to 5 do
21943: LD_ADDR_VAR 0 4
21947: PUSH
21948: DOUBLE
21949: LD_INT 0
21951: DEC
21952: ST_TO_ADDR
21953: LD_INT 5
21955: PUSH
21956: FOR_TO
21957: IFFALSE 22069
// begin _x := ShiftX ( x , i , 3 ) ;
21959: LD_ADDR_VAR 0 7
21963: PUSH
21964: LD_VAR 0 5
21968: PPUSH
21969: LD_VAR 0 4
21973: PPUSH
21974: LD_INT 3
21976: PPUSH
21977: CALL_OW 272
21981: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21982: LD_ADDR_VAR 0 8
21986: PUSH
21987: LD_VAR 0 6
21991: PPUSH
21992: LD_VAR 0 4
21996: PPUSH
21997: LD_INT 3
21999: PPUSH
22000: CALL_OW 273
22004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22005: LD_VAR 0 7
22009: PPUSH
22010: LD_VAR 0 8
22014: PPUSH
22015: CALL_OW 488
22019: NOT
22020: IFFALSE 22024
// continue ;
22022: GO 21956
// if HexInfo ( _x , _y ) = 0 then
22024: LD_VAR 0 7
22028: PPUSH
22029: LD_VAR 0 8
22033: PPUSH
22034: CALL_OW 428
22038: PUSH
22039: LD_INT 0
22041: EQUAL
22042: IFFALSE 22067
// begin ComMoveXY ( unit , _x , _y ) ;
22044: LD_VAR 0 1
22048: PPUSH
22049: LD_VAR 0 7
22053: PPUSH
22054: LD_VAR 0 8
22058: PPUSH
22059: CALL_OW 111
// exit ;
22063: POP
22064: POP
22065: GO 22071
// end ; end ;
22067: GO 21956
22069: POP
22070: POP
// end ;
22071: LD_VAR 0 3
22075: RET
// export function ScanBase ( side , base_area ) ; begin
22076: LD_INT 0
22078: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22079: LD_ADDR_VAR 0 3
22083: PUSH
22084: LD_VAR 0 2
22088: PPUSH
22089: LD_INT 81
22091: PUSH
22092: LD_VAR 0 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL_OW 70
22105: ST_TO_ADDR
// end ;
22106: LD_VAR 0 3
22110: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22111: LD_INT 0
22113: PPUSH
22114: PPUSH
22115: PPUSH
22116: PPUSH
// result := false ;
22117: LD_ADDR_VAR 0 2
22121: PUSH
22122: LD_INT 0
22124: ST_TO_ADDR
// side := GetSide ( unit ) ;
22125: LD_ADDR_VAR 0 3
22129: PUSH
22130: LD_VAR 0 1
22134: PPUSH
22135: CALL_OW 255
22139: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22140: LD_ADDR_VAR 0 4
22144: PUSH
22145: LD_VAR 0 1
22149: PPUSH
22150: CALL_OW 248
22154: ST_TO_ADDR
// case nat of 1 :
22155: LD_VAR 0 4
22159: PUSH
22160: LD_INT 1
22162: DOUBLE
22163: EQUAL
22164: IFTRUE 22168
22166: GO 22179
22168: POP
// tech := tech_lassight ; 2 :
22169: LD_ADDR_VAR 0 5
22173: PUSH
22174: LD_INT 12
22176: ST_TO_ADDR
22177: GO 22218
22179: LD_INT 2
22181: DOUBLE
22182: EQUAL
22183: IFTRUE 22187
22185: GO 22198
22187: POP
// tech := tech_mortar ; 3 :
22188: LD_ADDR_VAR 0 5
22192: PUSH
22193: LD_INT 41
22195: ST_TO_ADDR
22196: GO 22218
22198: LD_INT 3
22200: DOUBLE
22201: EQUAL
22202: IFTRUE 22206
22204: GO 22217
22206: POP
// tech := tech_bazooka ; end ;
22207: LD_ADDR_VAR 0 5
22211: PUSH
22212: LD_INT 44
22214: ST_TO_ADDR
22215: GO 22218
22217: POP
// if Researched ( side , tech ) then
22218: LD_VAR 0 3
22222: PPUSH
22223: LD_VAR 0 5
22227: PPUSH
22228: CALL_OW 325
22232: IFFALSE 22259
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22234: LD_ADDR_VAR 0 2
22238: PUSH
22239: LD_INT 5
22241: PUSH
22242: LD_INT 8
22244: PUSH
22245: LD_INT 9
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: PUSH
22253: LD_VAR 0 4
22257: ARRAY
22258: ST_TO_ADDR
// end ;
22259: LD_VAR 0 2
22263: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22264: LD_INT 0
22266: PPUSH
22267: PPUSH
22268: PPUSH
// if not mines then
22269: LD_VAR 0 2
22273: NOT
22274: IFFALSE 22278
// exit ;
22276: GO 22422
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22278: LD_ADDR_VAR 0 5
22282: PUSH
22283: LD_INT 81
22285: PUSH
22286: LD_VAR 0 1
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 3
22297: PUSH
22298: LD_INT 21
22300: PUSH
22301: LD_INT 3
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PPUSH
22316: CALL_OW 69
22320: ST_TO_ADDR
// for i in mines do
22321: LD_ADDR_VAR 0 4
22325: PUSH
22326: LD_VAR 0 2
22330: PUSH
22331: FOR_IN
22332: IFFALSE 22420
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22334: LD_VAR 0 4
22338: PUSH
22339: LD_INT 1
22341: ARRAY
22342: PPUSH
22343: LD_VAR 0 4
22347: PUSH
22348: LD_INT 2
22350: ARRAY
22351: PPUSH
22352: CALL_OW 458
22356: NOT
22357: IFFALSE 22361
// continue ;
22359: GO 22331
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22361: LD_VAR 0 4
22365: PUSH
22366: LD_INT 1
22368: ARRAY
22369: PPUSH
22370: LD_VAR 0 4
22374: PUSH
22375: LD_INT 2
22377: ARRAY
22378: PPUSH
22379: CALL_OW 428
22383: PUSH
22384: LD_VAR 0 5
22388: IN
22389: IFFALSE 22418
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22391: LD_VAR 0 4
22395: PUSH
22396: LD_INT 1
22398: ARRAY
22399: PPUSH
22400: LD_VAR 0 4
22404: PUSH
22405: LD_INT 2
22407: ARRAY
22408: PPUSH
22409: LD_VAR 0 1
22413: PPUSH
22414: CALL_OW 456
// end ;
22418: GO 22331
22420: POP
22421: POP
// end ;
22422: LD_VAR 0 3
22426: RET
// export function Count ( array ) ; begin
22427: LD_INT 0
22429: PPUSH
// result := array + 0 ;
22430: LD_ADDR_VAR 0 2
22434: PUSH
22435: LD_VAR 0 1
22439: PUSH
22440: LD_INT 0
22442: PLUS
22443: ST_TO_ADDR
// end ;
22444: LD_VAR 0 2
22448: RET
// export function IsEmpty ( building ) ; begin
22449: LD_INT 0
22451: PPUSH
// if not building then
22452: LD_VAR 0 1
22456: NOT
22457: IFFALSE 22461
// exit ;
22459: GO 22504
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: LD_VAR 0 1
22470: PUSH
22471: LD_INT 22
22473: PUSH
22474: LD_VAR 0 1
22478: PPUSH
22479: CALL_OW 255
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 58
22490: PUSH
22491: EMPTY
22492: LIST
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PPUSH
22498: CALL_OW 69
22502: IN
22503: ST_TO_ADDR
// end ;
22504: LD_VAR 0 2
22508: RET
// export function IsNotFull ( building ) ; var places ; begin
22509: LD_INT 0
22511: PPUSH
22512: PPUSH
// if not building then
22513: LD_VAR 0 1
22517: NOT
22518: IFFALSE 22522
// exit ;
22520: GO 22550
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22522: LD_ADDR_VAR 0 2
22526: PUSH
22527: LD_VAR 0 1
22531: PPUSH
22532: LD_INT 3
22534: PUSH
22535: LD_INT 62
22537: PUSH
22538: EMPTY
22539: LIST
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PPUSH
22545: CALL_OW 72
22549: ST_TO_ADDR
// end ;
22550: LD_VAR 0 2
22554: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22555: LD_INT 0
22557: PPUSH
22558: PPUSH
22559: PPUSH
22560: PPUSH
// tmp := [ ] ;
22561: LD_ADDR_VAR 0 3
22565: PUSH
22566: EMPTY
22567: ST_TO_ADDR
// list := [ ] ;
22568: LD_ADDR_VAR 0 5
22572: PUSH
22573: EMPTY
22574: ST_TO_ADDR
// for i = 16 to 25 do
22575: LD_ADDR_VAR 0 4
22579: PUSH
22580: DOUBLE
22581: LD_INT 16
22583: DEC
22584: ST_TO_ADDR
22585: LD_INT 25
22587: PUSH
22588: FOR_TO
22589: IFFALSE 22662
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22591: LD_ADDR_VAR 0 3
22595: PUSH
22596: LD_VAR 0 3
22600: PUSH
22601: LD_INT 22
22603: PUSH
22604: LD_VAR 0 1
22608: PPUSH
22609: CALL_OW 255
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 91
22620: PUSH
22621: LD_VAR 0 1
22625: PUSH
22626: LD_INT 6
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 30
22636: PUSH
22637: LD_VAR 0 4
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: PPUSH
22654: CALL_OW 69
22658: ADD
22659: ST_TO_ADDR
22660: GO 22588
22662: POP
22663: POP
// for i = 1 to tmp do
22664: LD_ADDR_VAR 0 4
22668: PUSH
22669: DOUBLE
22670: LD_INT 1
22672: DEC
22673: ST_TO_ADDR
22674: LD_VAR 0 3
22678: PUSH
22679: FOR_TO
22680: IFFALSE 22768
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22682: LD_ADDR_VAR 0 5
22686: PUSH
22687: LD_VAR 0 5
22691: PUSH
22692: LD_VAR 0 3
22696: PUSH
22697: LD_VAR 0 4
22701: ARRAY
22702: PPUSH
22703: CALL_OW 266
22707: PUSH
22708: LD_VAR 0 3
22712: PUSH
22713: LD_VAR 0 4
22717: ARRAY
22718: PPUSH
22719: CALL_OW 250
22723: PUSH
22724: LD_VAR 0 3
22728: PUSH
22729: LD_VAR 0 4
22733: ARRAY
22734: PPUSH
22735: CALL_OW 251
22739: PUSH
22740: LD_VAR 0 3
22744: PUSH
22745: LD_VAR 0 4
22749: ARRAY
22750: PPUSH
22751: CALL_OW 254
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: ADD
22765: ST_TO_ADDR
22766: GO 22679
22768: POP
22769: POP
// result := list ;
22770: LD_ADDR_VAR 0 2
22774: PUSH
22775: LD_VAR 0 5
22779: ST_TO_ADDR
// end ;
22780: LD_VAR 0 2
22784: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22785: LD_INT 0
22787: PPUSH
22788: PPUSH
22789: PPUSH
22790: PPUSH
22791: PPUSH
22792: PPUSH
22793: PPUSH
// if not factory then
22794: LD_VAR 0 1
22798: NOT
22799: IFFALSE 22803
// exit ;
22801: GO 23396
// if control = control_apeman then
22803: LD_VAR 0 4
22807: PUSH
22808: LD_INT 5
22810: EQUAL
22811: IFFALSE 22920
// begin tmp := UnitsInside ( factory ) ;
22813: LD_ADDR_VAR 0 8
22817: PUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 313
22827: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22828: LD_VAR 0 8
22832: PPUSH
22833: LD_INT 25
22835: PUSH
22836: LD_INT 12
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 72
22847: NOT
22848: IFFALSE 22858
// control := control_manual ;
22850: LD_ADDR_VAR 0 4
22854: PUSH
22855: LD_INT 1
22857: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22858: LD_ADDR_VAR 0 8
22862: PUSH
22863: LD_VAR 0 1
22867: PPUSH
22868: CALL 22555 0 1
22872: ST_TO_ADDR
// if tmp then
22873: LD_VAR 0 8
22877: IFFALSE 22920
// begin for i in tmp do
22879: LD_ADDR_VAR 0 7
22883: PUSH
22884: LD_VAR 0 8
22888: PUSH
22889: FOR_IN
22890: IFFALSE 22918
// if i [ 1 ] = b_ext_radio then
22892: LD_VAR 0 7
22896: PUSH
22897: LD_INT 1
22899: ARRAY
22900: PUSH
22901: LD_INT 22
22903: EQUAL
22904: IFFALSE 22916
// begin control := control_remote ;
22906: LD_ADDR_VAR 0 4
22910: PUSH
22911: LD_INT 2
22913: ST_TO_ADDR
// break ;
22914: GO 22918
// end ;
22916: GO 22889
22918: POP
22919: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22920: LD_VAR 0 1
22924: PPUSH
22925: LD_VAR 0 2
22929: PPUSH
22930: LD_VAR 0 3
22934: PPUSH
22935: LD_VAR 0 4
22939: PPUSH
22940: LD_VAR 0 5
22944: PPUSH
22945: CALL_OW 448
22949: IFFALSE 22984
// begin result := [ chassis , engine , control , weapon ] ;
22951: LD_ADDR_VAR 0 6
22955: PUSH
22956: LD_VAR 0 2
22960: PUSH
22961: LD_VAR 0 3
22965: PUSH
22966: LD_VAR 0 4
22970: PUSH
22971: LD_VAR 0 5
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: ST_TO_ADDR
// exit ;
22982: GO 23396
// end ; _chassis := AvailableChassisList ( factory ) ;
22984: LD_ADDR_VAR 0 9
22988: PUSH
22989: LD_VAR 0 1
22993: PPUSH
22994: CALL_OW 475
22998: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22999: LD_ADDR_VAR 0 11
23003: PUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 476
23013: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23014: LD_ADDR_VAR 0 12
23018: PUSH
23019: LD_VAR 0 1
23023: PPUSH
23024: CALL_OW 477
23028: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23029: LD_ADDR_VAR 0 10
23033: PUSH
23034: LD_VAR 0 1
23038: PPUSH
23039: CALL_OW 478
23043: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23044: LD_VAR 0 9
23048: NOT
23049: PUSH
23050: LD_VAR 0 11
23054: NOT
23055: OR
23056: PUSH
23057: LD_VAR 0 12
23061: NOT
23062: OR
23063: PUSH
23064: LD_VAR 0 10
23068: NOT
23069: OR
23070: IFFALSE 23105
// begin result := [ chassis , engine , control , weapon ] ;
23072: LD_ADDR_VAR 0 6
23076: PUSH
23077: LD_VAR 0 2
23081: PUSH
23082: LD_VAR 0 3
23086: PUSH
23087: LD_VAR 0 4
23091: PUSH
23092: LD_VAR 0 5
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: ST_TO_ADDR
// exit ;
23103: GO 23396
// end ; if not chassis in _chassis then
23105: LD_VAR 0 2
23109: PUSH
23110: LD_VAR 0 9
23114: IN
23115: NOT
23116: IFFALSE 23142
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23118: LD_ADDR_VAR 0 2
23122: PUSH
23123: LD_VAR 0 9
23127: PUSH
23128: LD_INT 1
23130: PPUSH
23131: LD_VAR 0 9
23135: PPUSH
23136: CALL_OW 12
23140: ARRAY
23141: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23142: LD_VAR 0 2
23146: PPUSH
23147: LD_VAR 0 3
23151: PPUSH
23152: CALL 23401 0 2
23156: NOT
23157: IFFALSE 23216
// repeat engine := _engine [ 1 ] ;
23159: LD_ADDR_VAR 0 3
23163: PUSH
23164: LD_VAR 0 11
23168: PUSH
23169: LD_INT 1
23171: ARRAY
23172: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23173: LD_ADDR_VAR 0 11
23177: PUSH
23178: LD_VAR 0 11
23182: PPUSH
23183: LD_INT 1
23185: PPUSH
23186: CALL_OW 3
23190: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23191: LD_VAR 0 2
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: CALL 23401 0 2
23205: PUSH
23206: LD_VAR 0 11
23210: PUSH
23211: EMPTY
23212: EQUAL
23213: OR
23214: IFFALSE 23159
// if not control in _control then
23216: LD_VAR 0 4
23220: PUSH
23221: LD_VAR 0 12
23225: IN
23226: NOT
23227: IFFALSE 23253
// control := _control [ rand ( 1 , _control ) ] ;
23229: LD_ADDR_VAR 0 4
23233: PUSH
23234: LD_VAR 0 12
23238: PUSH
23239: LD_INT 1
23241: PPUSH
23242: LD_VAR 0 12
23246: PPUSH
23247: CALL_OW 12
23251: ARRAY
23252: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23253: LD_VAR 0 2
23257: PPUSH
23258: LD_VAR 0 5
23262: PPUSH
23263: CALL 23621 0 2
23267: NOT
23268: IFFALSE 23327
// repeat weapon := _weapon [ 1 ] ;
23270: LD_ADDR_VAR 0 5
23274: PUSH
23275: LD_VAR 0 10
23279: PUSH
23280: LD_INT 1
23282: ARRAY
23283: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23284: LD_ADDR_VAR 0 10
23288: PUSH
23289: LD_VAR 0 10
23293: PPUSH
23294: LD_INT 1
23296: PPUSH
23297: CALL_OW 3
23301: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23302: LD_VAR 0 2
23306: PPUSH
23307: LD_VAR 0 5
23311: PPUSH
23312: CALL 23621 0 2
23316: PUSH
23317: LD_VAR 0 10
23321: PUSH
23322: EMPTY
23323: EQUAL
23324: OR
23325: IFFALSE 23270
// result := [ ] ;
23327: LD_ADDR_VAR 0 6
23331: PUSH
23332: EMPTY
23333: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23334: LD_VAR 0 1
23338: PPUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_VAR 0 4
23353: PPUSH
23354: LD_VAR 0 5
23358: PPUSH
23359: CALL_OW 448
23363: IFFALSE 23396
// result := [ chassis , engine , control , weapon ] ;
23365: LD_ADDR_VAR 0 6
23369: PUSH
23370: LD_VAR 0 2
23374: PUSH
23375: LD_VAR 0 3
23379: PUSH
23380: LD_VAR 0 4
23384: PUSH
23385: LD_VAR 0 5
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: ST_TO_ADDR
// end ;
23396: LD_VAR 0 6
23400: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23401: LD_INT 0
23403: PPUSH
// if not chassis or not engine then
23404: LD_VAR 0 1
23408: NOT
23409: PUSH
23410: LD_VAR 0 2
23414: NOT
23415: OR
23416: IFFALSE 23420
// exit ;
23418: GO 23616
// case engine of engine_solar :
23420: LD_VAR 0 2
23424: PUSH
23425: LD_INT 2
23427: DOUBLE
23428: EQUAL
23429: IFTRUE 23433
23431: GO 23471
23433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23434: LD_ADDR_VAR 0 3
23438: PUSH
23439: LD_INT 11
23441: PUSH
23442: LD_INT 12
23444: PUSH
23445: LD_INT 13
23447: PUSH
23448: LD_INT 14
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 3
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: ST_TO_ADDR
23469: GO 23600
23471: LD_INT 1
23473: DOUBLE
23474: EQUAL
23475: IFTRUE 23479
23477: GO 23541
23479: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23480: LD_ADDR_VAR 0 3
23484: PUSH
23485: LD_INT 11
23487: PUSH
23488: LD_INT 12
23490: PUSH
23491: LD_INT 13
23493: PUSH
23494: LD_INT 14
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: LD_INT 4
23508: PUSH
23509: LD_INT 5
23511: PUSH
23512: LD_INT 21
23514: PUSH
23515: LD_INT 23
23517: PUSH
23518: LD_INT 22
23520: PUSH
23521: LD_INT 24
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: ST_TO_ADDR
23539: GO 23600
23541: LD_INT 3
23543: DOUBLE
23544: EQUAL
23545: IFTRUE 23549
23547: GO 23599
23549: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23550: LD_ADDR_VAR 0 3
23554: PUSH
23555: LD_INT 13
23557: PUSH
23558: LD_INT 14
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: LD_INT 4
23569: PUSH
23570: LD_INT 5
23572: PUSH
23573: LD_INT 21
23575: PUSH
23576: LD_INT 22
23578: PUSH
23579: LD_INT 23
23581: PUSH
23582: LD_INT 24
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: ST_TO_ADDR
23597: GO 23600
23599: POP
// result := ( chassis in result ) ;
23600: LD_ADDR_VAR 0 3
23604: PUSH
23605: LD_VAR 0 1
23609: PUSH
23610: LD_VAR 0 3
23614: IN
23615: ST_TO_ADDR
// end ;
23616: LD_VAR 0 3
23620: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23621: LD_INT 0
23623: PPUSH
// if not chassis or not weapon then
23624: LD_VAR 0 1
23628: NOT
23629: PUSH
23630: LD_VAR 0 2
23634: NOT
23635: OR
23636: IFFALSE 23640
// exit ;
23638: GO 24700
// case weapon of us_machine_gun :
23640: LD_VAR 0 2
23644: PUSH
23645: LD_INT 2
23647: DOUBLE
23648: EQUAL
23649: IFTRUE 23653
23651: GO 23683
23653: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23654: LD_ADDR_VAR 0 3
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: LD_INT 3
23667: PUSH
23668: LD_INT 4
23670: PUSH
23671: LD_INT 5
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: ST_TO_ADDR
23681: GO 24684
23683: LD_INT 3
23685: DOUBLE
23686: EQUAL
23687: IFTRUE 23691
23689: GO 23721
23691: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23692: LD_ADDR_VAR 0 3
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: LD_INT 2
23702: PUSH
23703: LD_INT 3
23705: PUSH
23706: LD_INT 4
23708: PUSH
23709: LD_INT 5
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: ST_TO_ADDR
23719: GO 24684
23721: LD_INT 11
23723: DOUBLE
23724: EQUAL
23725: IFTRUE 23729
23727: GO 23759
23729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23730: LD_ADDR_VAR 0 3
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 3
23743: PUSH
23744: LD_INT 4
23746: PUSH
23747: LD_INT 5
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: ST_TO_ADDR
23757: GO 24684
23759: LD_INT 4
23761: DOUBLE
23762: EQUAL
23763: IFTRUE 23767
23765: GO 23793
23767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23768: LD_ADDR_VAR 0 3
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: LD_INT 3
23778: PUSH
23779: LD_INT 4
23781: PUSH
23782: LD_INT 5
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: ST_TO_ADDR
23791: GO 24684
23793: LD_INT 5
23795: DOUBLE
23796: EQUAL
23797: IFTRUE 23801
23799: GO 23827
23801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23802: LD_ADDR_VAR 0 3
23806: PUSH
23807: LD_INT 2
23809: PUSH
23810: LD_INT 3
23812: PUSH
23813: LD_INT 4
23815: PUSH
23816: LD_INT 5
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: ST_TO_ADDR
23825: GO 24684
23827: LD_INT 9
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23835
23833: GO 23861
23835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23836: LD_ADDR_VAR 0 3
23840: PUSH
23841: LD_INT 2
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: LD_INT 4
23849: PUSH
23850: LD_INT 5
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: ST_TO_ADDR
23859: GO 24684
23861: LD_INT 7
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23869
23867: GO 23895
23869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23870: LD_ADDR_VAR 0 3
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 3
23880: PUSH
23881: LD_INT 4
23883: PUSH
23884: LD_INT 5
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: ST_TO_ADDR
23893: GO 24684
23895: LD_INT 12
23897: DOUBLE
23898: EQUAL
23899: IFTRUE 23903
23901: GO 23929
23903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23904: LD_ADDR_VAR 0 3
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 3
23914: PUSH
23915: LD_INT 4
23917: PUSH
23918: LD_INT 5
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: ST_TO_ADDR
23927: GO 24684
23929: LD_INT 13
23931: DOUBLE
23932: EQUAL
23933: IFTRUE 23937
23935: GO 23963
23937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23938: LD_ADDR_VAR 0 3
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 3
23948: PUSH
23949: LD_INT 4
23951: PUSH
23952: LD_INT 5
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: ST_TO_ADDR
23961: GO 24684
23963: LD_INT 14
23965: DOUBLE
23966: EQUAL
23967: IFTRUE 23971
23969: GO 23989
23971: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23972: LD_ADDR_VAR 0 3
23976: PUSH
23977: LD_INT 4
23979: PUSH
23980: LD_INT 5
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: ST_TO_ADDR
23987: GO 24684
23989: LD_INT 6
23991: DOUBLE
23992: EQUAL
23993: IFTRUE 23997
23995: GO 24015
23997: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23998: LD_ADDR_VAR 0 3
24002: PUSH
24003: LD_INT 4
24005: PUSH
24006: LD_INT 5
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: ST_TO_ADDR
24013: GO 24684
24015: LD_INT 10
24017: DOUBLE
24018: EQUAL
24019: IFTRUE 24023
24021: GO 24041
24023: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24024: LD_ADDR_VAR 0 3
24028: PUSH
24029: LD_INT 4
24031: PUSH
24032: LD_INT 5
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: ST_TO_ADDR
24039: GO 24684
24041: LD_INT 22
24043: DOUBLE
24044: EQUAL
24045: IFTRUE 24049
24047: GO 24075
24049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24050: LD_ADDR_VAR 0 3
24054: PUSH
24055: LD_INT 11
24057: PUSH
24058: LD_INT 12
24060: PUSH
24061: LD_INT 13
24063: PUSH
24064: LD_INT 14
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: ST_TO_ADDR
24073: GO 24684
24075: LD_INT 23
24077: DOUBLE
24078: EQUAL
24079: IFTRUE 24083
24081: GO 24109
24083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24084: LD_ADDR_VAR 0 3
24088: PUSH
24089: LD_INT 11
24091: PUSH
24092: LD_INT 12
24094: PUSH
24095: LD_INT 13
24097: PUSH
24098: LD_INT 14
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: ST_TO_ADDR
24107: GO 24684
24109: LD_INT 24
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24143
24117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24118: LD_ADDR_VAR 0 3
24122: PUSH
24123: LD_INT 11
24125: PUSH
24126: LD_INT 12
24128: PUSH
24129: LD_INT 13
24131: PUSH
24132: LD_INT 14
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: ST_TO_ADDR
24141: GO 24684
24143: LD_INT 30
24145: DOUBLE
24146: EQUAL
24147: IFTRUE 24151
24149: GO 24177
24151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24152: LD_ADDR_VAR 0 3
24156: PUSH
24157: LD_INT 11
24159: PUSH
24160: LD_INT 12
24162: PUSH
24163: LD_INT 13
24165: PUSH
24166: LD_INT 14
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: ST_TO_ADDR
24175: GO 24684
24177: LD_INT 25
24179: DOUBLE
24180: EQUAL
24181: IFTRUE 24185
24183: GO 24203
24185: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24186: LD_ADDR_VAR 0 3
24190: PUSH
24191: LD_INT 13
24193: PUSH
24194: LD_INT 14
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: ST_TO_ADDR
24201: GO 24684
24203: LD_INT 27
24205: DOUBLE
24206: EQUAL
24207: IFTRUE 24211
24209: GO 24229
24211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24212: LD_ADDR_VAR 0 3
24216: PUSH
24217: LD_INT 13
24219: PUSH
24220: LD_INT 14
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: ST_TO_ADDR
24227: GO 24684
24229: LD_INT 92
24231: DOUBLE
24232: EQUAL
24233: IFTRUE 24237
24235: GO 24263
24237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24238: LD_ADDR_VAR 0 3
24242: PUSH
24243: LD_INT 11
24245: PUSH
24246: LD_INT 12
24248: PUSH
24249: LD_INT 13
24251: PUSH
24252: LD_INT 14
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: ST_TO_ADDR
24261: GO 24684
24263: LD_INT 28
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24289
24271: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24272: LD_ADDR_VAR 0 3
24276: PUSH
24277: LD_INT 13
24279: PUSH
24280: LD_INT 14
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: ST_TO_ADDR
24287: GO 24684
24289: LD_INT 29
24291: DOUBLE
24292: EQUAL
24293: IFTRUE 24297
24295: GO 24315
24297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: LD_INT 13
24305: PUSH
24306: LD_INT 14
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: ST_TO_ADDR
24313: GO 24684
24315: LD_INT 31
24317: DOUBLE
24318: EQUAL
24319: IFTRUE 24323
24321: GO 24341
24323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24324: LD_ADDR_VAR 0 3
24328: PUSH
24329: LD_INT 13
24331: PUSH
24332: LD_INT 14
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: ST_TO_ADDR
24339: GO 24684
24341: LD_INT 26
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24367
24349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24350: LD_ADDR_VAR 0 3
24354: PUSH
24355: LD_INT 13
24357: PUSH
24358: LD_INT 14
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: ST_TO_ADDR
24365: GO 24684
24367: LD_INT 42
24369: DOUBLE
24370: EQUAL
24371: IFTRUE 24375
24373: GO 24401
24375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24376: LD_ADDR_VAR 0 3
24380: PUSH
24381: LD_INT 21
24383: PUSH
24384: LD_INT 22
24386: PUSH
24387: LD_INT 23
24389: PUSH
24390: LD_INT 24
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: ST_TO_ADDR
24399: GO 24684
24401: LD_INT 43
24403: DOUBLE
24404: EQUAL
24405: IFTRUE 24409
24407: GO 24435
24409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24410: LD_ADDR_VAR 0 3
24414: PUSH
24415: LD_INT 21
24417: PUSH
24418: LD_INT 22
24420: PUSH
24421: LD_INT 23
24423: PUSH
24424: LD_INT 24
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: ST_TO_ADDR
24433: GO 24684
24435: LD_INT 44
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24469
24443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24444: LD_ADDR_VAR 0 3
24448: PUSH
24449: LD_INT 21
24451: PUSH
24452: LD_INT 22
24454: PUSH
24455: LD_INT 23
24457: PUSH
24458: LD_INT 24
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: ST_TO_ADDR
24467: GO 24684
24469: LD_INT 45
24471: DOUBLE
24472: EQUAL
24473: IFTRUE 24477
24475: GO 24503
24477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24478: LD_ADDR_VAR 0 3
24482: PUSH
24483: LD_INT 21
24485: PUSH
24486: LD_INT 22
24488: PUSH
24489: LD_INT 23
24491: PUSH
24492: LD_INT 24
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: ST_TO_ADDR
24501: GO 24684
24503: LD_INT 49
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24537
24511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24512: LD_ADDR_VAR 0 3
24516: PUSH
24517: LD_INT 21
24519: PUSH
24520: LD_INT 22
24522: PUSH
24523: LD_INT 23
24525: PUSH
24526: LD_INT 24
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: ST_TO_ADDR
24535: GO 24684
24537: LD_INT 51
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24571
24545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24546: LD_ADDR_VAR 0 3
24550: PUSH
24551: LD_INT 21
24553: PUSH
24554: LD_INT 22
24556: PUSH
24557: LD_INT 23
24559: PUSH
24560: LD_INT 24
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: ST_TO_ADDR
24569: GO 24684
24571: LD_INT 52
24573: DOUBLE
24574: EQUAL
24575: IFTRUE 24579
24577: GO 24605
24579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24580: LD_ADDR_VAR 0 3
24584: PUSH
24585: LD_INT 21
24587: PUSH
24588: LD_INT 22
24590: PUSH
24591: LD_INT 23
24593: PUSH
24594: LD_INT 24
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: ST_TO_ADDR
24603: GO 24684
24605: LD_INT 53
24607: DOUBLE
24608: EQUAL
24609: IFTRUE 24613
24611: GO 24631
24613: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24614: LD_ADDR_VAR 0 3
24618: PUSH
24619: LD_INT 23
24621: PUSH
24622: LD_INT 24
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: ST_TO_ADDR
24629: GO 24684
24631: LD_INT 46
24633: DOUBLE
24634: EQUAL
24635: IFTRUE 24639
24637: GO 24657
24639: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24640: LD_ADDR_VAR 0 3
24644: PUSH
24645: LD_INT 23
24647: PUSH
24648: LD_INT 24
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: ST_TO_ADDR
24655: GO 24684
24657: LD_INT 47
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24665
24663: GO 24683
24665: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: LD_INT 23
24673: PUSH
24674: LD_INT 24
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: ST_TO_ADDR
24681: GO 24684
24683: POP
// result := ( chassis in result ) ;
24684: LD_ADDR_VAR 0 3
24688: PUSH
24689: LD_VAR 0 1
24693: PUSH
24694: LD_VAR 0 3
24698: IN
24699: ST_TO_ADDR
// end ;
24700: LD_VAR 0 3
24704: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24705: LD_INT 0
24707: PPUSH
24708: PPUSH
24709: PPUSH
24710: PPUSH
24711: PPUSH
24712: PPUSH
24713: PPUSH
// result := array ;
24714: LD_ADDR_VAR 0 5
24718: PUSH
24719: LD_VAR 0 1
24723: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24724: LD_VAR 0 1
24728: NOT
24729: PUSH
24730: LD_VAR 0 2
24734: NOT
24735: OR
24736: PUSH
24737: LD_VAR 0 3
24741: NOT
24742: OR
24743: PUSH
24744: LD_VAR 0 2
24748: PUSH
24749: LD_VAR 0 1
24753: GREATER
24754: OR
24755: PUSH
24756: LD_VAR 0 3
24760: PUSH
24761: LD_VAR 0 1
24765: GREATER
24766: OR
24767: IFFALSE 24771
// exit ;
24769: GO 25067
// if direction then
24771: LD_VAR 0 4
24775: IFFALSE 24839
// begin d := 1 ;
24777: LD_ADDR_VAR 0 9
24781: PUSH
24782: LD_INT 1
24784: ST_TO_ADDR
// if i_from > i_to then
24785: LD_VAR 0 2
24789: PUSH
24790: LD_VAR 0 3
24794: GREATER
24795: IFFALSE 24821
// length := ( array - i_from ) + i_to else
24797: LD_ADDR_VAR 0 11
24801: PUSH
24802: LD_VAR 0 1
24806: PUSH
24807: LD_VAR 0 2
24811: MINUS
24812: PUSH
24813: LD_VAR 0 3
24817: PLUS
24818: ST_TO_ADDR
24819: GO 24837
// length := i_to - i_from ;
24821: LD_ADDR_VAR 0 11
24825: PUSH
24826: LD_VAR 0 3
24830: PUSH
24831: LD_VAR 0 2
24835: MINUS
24836: ST_TO_ADDR
// end else
24837: GO 24900
// begin d := - 1 ;
24839: LD_ADDR_VAR 0 9
24843: PUSH
24844: LD_INT 1
24846: NEG
24847: ST_TO_ADDR
// if i_from > i_to then
24848: LD_VAR 0 2
24852: PUSH
24853: LD_VAR 0 3
24857: GREATER
24858: IFFALSE 24878
// length := i_from - i_to else
24860: LD_ADDR_VAR 0 11
24864: PUSH
24865: LD_VAR 0 2
24869: PUSH
24870: LD_VAR 0 3
24874: MINUS
24875: ST_TO_ADDR
24876: GO 24900
// length := ( array - i_to ) + i_from ;
24878: LD_ADDR_VAR 0 11
24882: PUSH
24883: LD_VAR 0 1
24887: PUSH
24888: LD_VAR 0 3
24892: MINUS
24893: PUSH
24894: LD_VAR 0 2
24898: PLUS
24899: ST_TO_ADDR
// end ; if not length then
24900: LD_VAR 0 11
24904: NOT
24905: IFFALSE 24909
// exit ;
24907: GO 25067
// tmp := array ;
24909: LD_ADDR_VAR 0 10
24913: PUSH
24914: LD_VAR 0 1
24918: ST_TO_ADDR
// for i = 1 to length do
24919: LD_ADDR_VAR 0 6
24923: PUSH
24924: DOUBLE
24925: LD_INT 1
24927: DEC
24928: ST_TO_ADDR
24929: LD_VAR 0 11
24933: PUSH
24934: FOR_TO
24935: IFFALSE 25055
// begin for j = 1 to array do
24937: LD_ADDR_VAR 0 7
24941: PUSH
24942: DOUBLE
24943: LD_INT 1
24945: DEC
24946: ST_TO_ADDR
24947: LD_VAR 0 1
24951: PUSH
24952: FOR_TO
24953: IFFALSE 25041
// begin k := j + d ;
24955: LD_ADDR_VAR 0 8
24959: PUSH
24960: LD_VAR 0 7
24964: PUSH
24965: LD_VAR 0 9
24969: PLUS
24970: ST_TO_ADDR
// if k > array then
24971: LD_VAR 0 8
24975: PUSH
24976: LD_VAR 0 1
24980: GREATER
24981: IFFALSE 24991
// k := 1 ;
24983: LD_ADDR_VAR 0 8
24987: PUSH
24988: LD_INT 1
24990: ST_TO_ADDR
// if not k then
24991: LD_VAR 0 8
24995: NOT
24996: IFFALSE 25008
// k := array ;
24998: LD_ADDR_VAR 0 8
25002: PUSH
25003: LD_VAR 0 1
25007: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25008: LD_ADDR_VAR 0 10
25012: PUSH
25013: LD_VAR 0 10
25017: PPUSH
25018: LD_VAR 0 8
25022: PPUSH
25023: LD_VAR 0 1
25027: PUSH
25028: LD_VAR 0 7
25032: ARRAY
25033: PPUSH
25034: CALL_OW 1
25038: ST_TO_ADDR
// end ;
25039: GO 24952
25041: POP
25042: POP
// array := tmp ;
25043: LD_ADDR_VAR 0 1
25047: PUSH
25048: LD_VAR 0 10
25052: ST_TO_ADDR
// end ;
25053: GO 24934
25055: POP
25056: POP
// result := array ;
25057: LD_ADDR_VAR 0 5
25061: PUSH
25062: LD_VAR 0 1
25066: ST_TO_ADDR
// end ;
25067: LD_VAR 0 5
25071: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25072: LD_INT 0
25074: PPUSH
25075: PPUSH
// result := 0 ;
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_INT 0
25083: ST_TO_ADDR
// if not array or not value in array then
25084: LD_VAR 0 1
25088: NOT
25089: PUSH
25090: LD_VAR 0 2
25094: PUSH
25095: LD_VAR 0 1
25099: IN
25100: NOT
25101: OR
25102: IFFALSE 25106
// exit ;
25104: GO 25160
// for i = 1 to array do
25106: LD_ADDR_VAR 0 4
25110: PUSH
25111: DOUBLE
25112: LD_INT 1
25114: DEC
25115: ST_TO_ADDR
25116: LD_VAR 0 1
25120: PUSH
25121: FOR_TO
25122: IFFALSE 25158
// if value = array [ i ] then
25124: LD_VAR 0 2
25128: PUSH
25129: LD_VAR 0 1
25133: PUSH
25134: LD_VAR 0 4
25138: ARRAY
25139: EQUAL
25140: IFFALSE 25156
// begin result := i ;
25142: LD_ADDR_VAR 0 3
25146: PUSH
25147: LD_VAR 0 4
25151: ST_TO_ADDR
// exit ;
25152: POP
25153: POP
25154: GO 25160
// end ;
25156: GO 25121
25158: POP
25159: POP
// end ;
25160: LD_VAR 0 3
25164: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25165: LD_INT 0
25167: PPUSH
// vc_chassis := chassis ;
25168: LD_ADDR_OWVAR 37
25172: PUSH
25173: LD_VAR 0 1
25177: ST_TO_ADDR
// vc_engine := engine ;
25178: LD_ADDR_OWVAR 39
25182: PUSH
25183: LD_VAR 0 2
25187: ST_TO_ADDR
// vc_control := control ;
25188: LD_ADDR_OWVAR 38
25192: PUSH
25193: LD_VAR 0 3
25197: ST_TO_ADDR
// vc_weapon := weapon ;
25198: LD_ADDR_OWVAR 40
25202: PUSH
25203: LD_VAR 0 4
25207: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25208: LD_ADDR_OWVAR 41
25212: PUSH
25213: LD_VAR 0 5
25217: ST_TO_ADDR
// end ;
25218: LD_VAR 0 6
25222: RET
// export function WantPlant ( unit ) ; var task ; begin
25223: LD_INT 0
25225: PPUSH
25226: PPUSH
// result := false ;
25227: LD_ADDR_VAR 0 2
25231: PUSH
25232: LD_INT 0
25234: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_VAR 0 1
25244: PPUSH
25245: CALL_OW 437
25249: ST_TO_ADDR
// if task then
25250: LD_VAR 0 3
25254: IFFALSE 25282
// if task [ 1 ] [ 1 ] = p then
25256: LD_VAR 0 3
25260: PUSH
25261: LD_INT 1
25263: ARRAY
25264: PUSH
25265: LD_INT 1
25267: ARRAY
25268: PUSH
25269: LD_STRING p
25271: EQUAL
25272: IFFALSE 25282
// result := true ;
25274: LD_ADDR_VAR 0 2
25278: PUSH
25279: LD_INT 1
25281: ST_TO_ADDR
// end ;
25282: LD_VAR 0 2
25286: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25287: LD_INT 0
25289: PPUSH
25290: PPUSH
25291: PPUSH
25292: PPUSH
// if pos < 1 then
25293: LD_VAR 0 2
25297: PUSH
25298: LD_INT 1
25300: LESS
25301: IFFALSE 25305
// exit ;
25303: GO 25608
// if pos = 1 then
25305: LD_VAR 0 2
25309: PUSH
25310: LD_INT 1
25312: EQUAL
25313: IFFALSE 25346
// result := Replace ( arr , pos [ 1 ] , value ) else
25315: LD_ADDR_VAR 0 4
25319: PUSH
25320: LD_VAR 0 1
25324: PPUSH
25325: LD_VAR 0 2
25329: PUSH
25330: LD_INT 1
25332: ARRAY
25333: PPUSH
25334: LD_VAR 0 3
25338: PPUSH
25339: CALL_OW 1
25343: ST_TO_ADDR
25344: GO 25608
// begin tmp := arr ;
25346: LD_ADDR_VAR 0 6
25350: PUSH
25351: LD_VAR 0 1
25355: ST_TO_ADDR
// s_arr := [ tmp ] ;
25356: LD_ADDR_VAR 0 7
25360: PUSH
25361: LD_VAR 0 6
25365: PUSH
25366: EMPTY
25367: LIST
25368: ST_TO_ADDR
// for i = 1 to pos - 1 do
25369: LD_ADDR_VAR 0 5
25373: PUSH
25374: DOUBLE
25375: LD_INT 1
25377: DEC
25378: ST_TO_ADDR
25379: LD_VAR 0 2
25383: PUSH
25384: LD_INT 1
25386: MINUS
25387: PUSH
25388: FOR_TO
25389: IFFALSE 25434
// begin tmp := tmp [ pos [ i ] ] ;
25391: LD_ADDR_VAR 0 6
25395: PUSH
25396: LD_VAR 0 6
25400: PUSH
25401: LD_VAR 0 2
25405: PUSH
25406: LD_VAR 0 5
25410: ARRAY
25411: ARRAY
25412: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25413: LD_ADDR_VAR 0 7
25417: PUSH
25418: LD_VAR 0 7
25422: PUSH
25423: LD_VAR 0 6
25427: PUSH
25428: EMPTY
25429: LIST
25430: ADD
25431: ST_TO_ADDR
// end ;
25432: GO 25388
25434: POP
25435: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25436: LD_ADDR_VAR 0 6
25440: PUSH
25441: LD_VAR 0 6
25445: PPUSH
25446: LD_VAR 0 2
25450: PUSH
25451: LD_VAR 0 2
25455: ARRAY
25456: PPUSH
25457: LD_VAR 0 3
25461: PPUSH
25462: CALL_OW 1
25466: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25467: LD_ADDR_VAR 0 7
25471: PUSH
25472: LD_VAR 0 7
25476: PPUSH
25477: LD_VAR 0 7
25481: PPUSH
25482: LD_VAR 0 6
25486: PPUSH
25487: CALL_OW 1
25491: ST_TO_ADDR
// for i = s_arr downto 2 do
25492: LD_ADDR_VAR 0 5
25496: PUSH
25497: DOUBLE
25498: LD_VAR 0 7
25502: INC
25503: ST_TO_ADDR
25504: LD_INT 2
25506: PUSH
25507: FOR_DOWNTO
25508: IFFALSE 25592
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25510: LD_ADDR_VAR 0 6
25514: PUSH
25515: LD_VAR 0 7
25519: PUSH
25520: LD_VAR 0 5
25524: PUSH
25525: LD_INT 1
25527: MINUS
25528: ARRAY
25529: PPUSH
25530: LD_VAR 0 2
25534: PUSH
25535: LD_VAR 0 5
25539: PUSH
25540: LD_INT 1
25542: MINUS
25543: ARRAY
25544: PPUSH
25545: LD_VAR 0 7
25549: PUSH
25550: LD_VAR 0 5
25554: ARRAY
25555: PPUSH
25556: CALL_OW 1
25560: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25561: LD_ADDR_VAR 0 7
25565: PUSH
25566: LD_VAR 0 7
25570: PPUSH
25571: LD_VAR 0 5
25575: PUSH
25576: LD_INT 1
25578: MINUS
25579: PPUSH
25580: LD_VAR 0 6
25584: PPUSH
25585: CALL_OW 1
25589: ST_TO_ADDR
// end ;
25590: GO 25507
25592: POP
25593: POP
// result := s_arr [ 1 ] ;
25594: LD_ADDR_VAR 0 4
25598: PUSH
25599: LD_VAR 0 7
25603: PUSH
25604: LD_INT 1
25606: ARRAY
25607: ST_TO_ADDR
// end ; end ;
25608: LD_VAR 0 4
25612: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25613: LD_INT 0
25615: PPUSH
25616: PPUSH
// if not list then
25617: LD_VAR 0 1
25621: NOT
25622: IFFALSE 25626
// exit ;
25624: GO 25717
// i := list [ pos1 ] ;
25626: LD_ADDR_VAR 0 5
25630: PUSH
25631: LD_VAR 0 1
25635: PUSH
25636: LD_VAR 0 2
25640: ARRAY
25641: ST_TO_ADDR
// if not i then
25642: LD_VAR 0 5
25646: NOT
25647: IFFALSE 25651
// exit ;
25649: GO 25717
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25651: LD_ADDR_VAR 0 1
25655: PUSH
25656: LD_VAR 0 1
25660: PPUSH
25661: LD_VAR 0 2
25665: PPUSH
25666: LD_VAR 0 1
25670: PUSH
25671: LD_VAR 0 3
25675: ARRAY
25676: PPUSH
25677: CALL_OW 1
25681: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25682: LD_ADDR_VAR 0 1
25686: PUSH
25687: LD_VAR 0 1
25691: PPUSH
25692: LD_VAR 0 3
25696: PPUSH
25697: LD_VAR 0 5
25701: PPUSH
25702: CALL_OW 1
25706: ST_TO_ADDR
// result := list ;
25707: LD_ADDR_VAR 0 4
25711: PUSH
25712: LD_VAR 0 1
25716: ST_TO_ADDR
// end ;
25717: LD_VAR 0 4
25721: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25722: LD_INT 0
25724: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25725: LD_ADDR_VAR 0 5
25729: PUSH
25730: LD_VAR 0 1
25734: PPUSH
25735: CALL_OW 250
25739: PPUSH
25740: LD_VAR 0 1
25744: PPUSH
25745: CALL_OW 251
25749: PPUSH
25750: LD_VAR 0 2
25754: PPUSH
25755: LD_VAR 0 3
25759: PPUSH
25760: LD_VAR 0 4
25764: PPUSH
25765: CALL 26143 0 5
25769: ST_TO_ADDR
// end ;
25770: LD_VAR 0 5
25774: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
25775: LD_INT 0
25777: PPUSH
25778: PPUSH
25779: PPUSH
25780: PPUSH
// if not list or not unit then
25781: LD_VAR 0 2
25785: NOT
25786: PUSH
25787: LD_VAR 0 1
25791: NOT
25792: OR
25793: IFFALSE 25797
// exit ;
25795: GO 26138
// result := [ ] ;
25797: LD_ADDR_VAR 0 5
25801: PUSH
25802: EMPTY
25803: ST_TO_ADDR
// for i in list do
25804: LD_ADDR_VAR 0 6
25808: PUSH
25809: LD_VAR 0 2
25813: PUSH
25814: FOR_IN
25815: IFFALSE 26033
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
25817: LD_ADDR_VAR 0 8
25821: PUSH
25822: LD_VAR 0 1
25826: PPUSH
25827: LD_VAR 0 6
25831: PUSH
25832: LD_INT 1
25834: ARRAY
25835: PPUSH
25836: LD_VAR 0 6
25840: PUSH
25841: LD_INT 2
25843: ARRAY
25844: PPUSH
25845: CALL_OW 297
25849: ST_TO_ADDR
// if not Count ( result ) then
25850: LD_VAR 0 5
25854: PPUSH
25855: CALL 22427 0 1
25859: NOT
25860: IFFALSE 25893
// begin result := Join ( result , [ i , tmp ] ) ;
25862: LD_ADDR_VAR 0 5
25866: PUSH
25867: LD_VAR 0 5
25871: PPUSH
25872: LD_VAR 0 6
25876: PUSH
25877: LD_VAR 0 8
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PPUSH
25886: CALL 58027 0 2
25890: ST_TO_ADDR
// continue ;
25891: GO 25814
// end ; if result [ result ] [ 2 ] <= tmp then
25893: LD_VAR 0 5
25897: PUSH
25898: LD_VAR 0 5
25902: ARRAY
25903: PUSH
25904: LD_INT 2
25906: ARRAY
25907: PUSH
25908: LD_VAR 0 8
25912: LESSEQUAL
25913: IFFALSE 25946
// result := Join ( result , [ i , tmp ] ) else
25915: LD_ADDR_VAR 0 5
25919: PUSH
25920: LD_VAR 0 5
25924: PPUSH
25925: LD_VAR 0 6
25929: PUSH
25930: LD_VAR 0 8
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PPUSH
25939: CALL 58027 0 2
25943: ST_TO_ADDR
25944: GO 26031
// begin for j := 1 to Count ( result ) do
25946: LD_ADDR_VAR 0 7
25950: PUSH
25951: DOUBLE
25952: LD_INT 1
25954: DEC
25955: ST_TO_ADDR
25956: LD_VAR 0 5
25960: PPUSH
25961: CALL 22427 0 1
25965: PUSH
25966: FOR_TO
25967: IFFALSE 26029
// begin if tmp < result [ j ] [ 2 ] then
25969: LD_VAR 0 8
25973: PUSH
25974: LD_VAR 0 5
25978: PUSH
25979: LD_VAR 0 7
25983: ARRAY
25984: PUSH
25985: LD_INT 2
25987: ARRAY
25988: LESS
25989: IFFALSE 26027
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25991: LD_ADDR_VAR 0 5
25995: PUSH
25996: LD_VAR 0 5
26000: PPUSH
26001: LD_VAR 0 7
26005: PPUSH
26006: LD_VAR 0 6
26010: PUSH
26011: LD_VAR 0 8
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PPUSH
26020: CALL_OW 2
26024: ST_TO_ADDR
// break ;
26025: GO 26029
// end ; end ;
26027: GO 25966
26029: POP
26030: POP
// end ; end ;
26031: GO 25814
26033: POP
26034: POP
// if result and not asc then
26035: LD_VAR 0 5
26039: PUSH
26040: LD_VAR 0 3
26044: NOT
26045: AND
26046: IFFALSE 26063
// result := ReverseArray ( result ) ;
26048: LD_ADDR_VAR 0 5
26052: PUSH
26053: LD_VAR 0 5
26057: PPUSH
26058: CALL 53303 0 1
26062: ST_TO_ADDR
// tmp := [ ] ;
26063: LD_ADDR_VAR 0 8
26067: PUSH
26068: EMPTY
26069: ST_TO_ADDR
// if mode then
26070: LD_VAR 0 4
26074: IFFALSE 26138
// begin for i := 1 to result do
26076: LD_ADDR_VAR 0 6
26080: PUSH
26081: DOUBLE
26082: LD_INT 1
26084: DEC
26085: ST_TO_ADDR
26086: LD_VAR 0 5
26090: PUSH
26091: FOR_TO
26092: IFFALSE 26126
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26094: LD_ADDR_VAR 0 8
26098: PUSH
26099: LD_VAR 0 8
26103: PPUSH
26104: LD_VAR 0 5
26108: PUSH
26109: LD_VAR 0 6
26113: ARRAY
26114: PUSH
26115: LD_INT 1
26117: ARRAY
26118: PPUSH
26119: CALL 58027 0 2
26123: ST_TO_ADDR
26124: GO 26091
26126: POP
26127: POP
// result := tmp ;
26128: LD_ADDR_VAR 0 5
26132: PUSH
26133: LD_VAR 0 8
26137: ST_TO_ADDR
// end ; end ;
26138: LD_VAR 0 5
26142: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26143: LD_INT 0
26145: PPUSH
26146: PPUSH
26147: PPUSH
26148: PPUSH
// if not list then
26149: LD_VAR 0 3
26153: NOT
26154: IFFALSE 26158
// exit ;
26156: GO 26546
// result := [ ] ;
26158: LD_ADDR_VAR 0 6
26162: PUSH
26163: EMPTY
26164: ST_TO_ADDR
// for i in list do
26165: LD_ADDR_VAR 0 7
26169: PUSH
26170: LD_VAR 0 3
26174: PUSH
26175: FOR_IN
26176: IFFALSE 26378
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26178: LD_ADDR_VAR 0 9
26182: PUSH
26183: LD_VAR 0 7
26187: PPUSH
26188: LD_VAR 0 1
26192: PPUSH
26193: LD_VAR 0 2
26197: PPUSH
26198: CALL_OW 297
26202: ST_TO_ADDR
// if not result then
26203: LD_VAR 0 6
26207: NOT
26208: IFFALSE 26234
// result := [ [ i , tmp ] ] else
26210: LD_ADDR_VAR 0 6
26214: PUSH
26215: LD_VAR 0 7
26219: PUSH
26220: LD_VAR 0 9
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: ST_TO_ADDR
26232: GO 26376
// begin if result [ result ] [ 2 ] < tmp then
26234: LD_VAR 0 6
26238: PUSH
26239: LD_VAR 0 6
26243: ARRAY
26244: PUSH
26245: LD_INT 2
26247: ARRAY
26248: PUSH
26249: LD_VAR 0 9
26253: LESS
26254: IFFALSE 26296
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26256: LD_ADDR_VAR 0 6
26260: PUSH
26261: LD_VAR 0 6
26265: PPUSH
26266: LD_VAR 0 6
26270: PUSH
26271: LD_INT 1
26273: PLUS
26274: PPUSH
26275: LD_VAR 0 7
26279: PUSH
26280: LD_VAR 0 9
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PPUSH
26289: CALL_OW 2
26293: ST_TO_ADDR
26294: GO 26376
// for j = 1 to result do
26296: LD_ADDR_VAR 0 8
26300: PUSH
26301: DOUBLE
26302: LD_INT 1
26304: DEC
26305: ST_TO_ADDR
26306: LD_VAR 0 6
26310: PUSH
26311: FOR_TO
26312: IFFALSE 26374
// begin if tmp < result [ j ] [ 2 ] then
26314: LD_VAR 0 9
26318: PUSH
26319: LD_VAR 0 6
26323: PUSH
26324: LD_VAR 0 8
26328: ARRAY
26329: PUSH
26330: LD_INT 2
26332: ARRAY
26333: LESS
26334: IFFALSE 26372
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26336: LD_ADDR_VAR 0 6
26340: PUSH
26341: LD_VAR 0 6
26345: PPUSH
26346: LD_VAR 0 8
26350: PPUSH
26351: LD_VAR 0 7
26355: PUSH
26356: LD_VAR 0 9
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PPUSH
26365: CALL_OW 2
26369: ST_TO_ADDR
// break ;
26370: GO 26374
// end ; end ;
26372: GO 26311
26374: POP
26375: POP
// end ; end ;
26376: GO 26175
26378: POP
26379: POP
// if result and not asc then
26380: LD_VAR 0 6
26384: PUSH
26385: LD_VAR 0 4
26389: NOT
26390: AND
26391: IFFALSE 26466
// begin tmp := result ;
26393: LD_ADDR_VAR 0 9
26397: PUSH
26398: LD_VAR 0 6
26402: ST_TO_ADDR
// for i = tmp downto 1 do
26403: LD_ADDR_VAR 0 7
26407: PUSH
26408: DOUBLE
26409: LD_VAR 0 9
26413: INC
26414: ST_TO_ADDR
26415: LD_INT 1
26417: PUSH
26418: FOR_DOWNTO
26419: IFFALSE 26464
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26421: LD_ADDR_VAR 0 6
26425: PUSH
26426: LD_VAR 0 6
26430: PPUSH
26431: LD_VAR 0 9
26435: PUSH
26436: LD_VAR 0 7
26440: MINUS
26441: PUSH
26442: LD_INT 1
26444: PLUS
26445: PPUSH
26446: LD_VAR 0 9
26450: PUSH
26451: LD_VAR 0 7
26455: ARRAY
26456: PPUSH
26457: CALL_OW 1
26461: ST_TO_ADDR
26462: GO 26418
26464: POP
26465: POP
// end ; tmp := [ ] ;
26466: LD_ADDR_VAR 0 9
26470: PUSH
26471: EMPTY
26472: ST_TO_ADDR
// if mode then
26473: LD_VAR 0 5
26477: IFFALSE 26546
// begin for i = 1 to result do
26479: LD_ADDR_VAR 0 7
26483: PUSH
26484: DOUBLE
26485: LD_INT 1
26487: DEC
26488: ST_TO_ADDR
26489: LD_VAR 0 6
26493: PUSH
26494: FOR_TO
26495: IFFALSE 26534
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26497: LD_ADDR_VAR 0 9
26501: PUSH
26502: LD_VAR 0 9
26506: PPUSH
26507: LD_VAR 0 7
26511: PPUSH
26512: LD_VAR 0 6
26516: PUSH
26517: LD_VAR 0 7
26521: ARRAY
26522: PUSH
26523: LD_INT 1
26525: ARRAY
26526: PPUSH
26527: CALL_OW 1
26531: ST_TO_ADDR
26532: GO 26494
26534: POP
26535: POP
// result := tmp ;
26536: LD_ADDR_VAR 0 6
26540: PUSH
26541: LD_VAR 0 9
26545: ST_TO_ADDR
// end ; end ;
26546: LD_VAR 0 6
26550: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26551: LD_INT 0
26553: PPUSH
26554: PPUSH
26555: PPUSH
26556: PPUSH
26557: PPUSH
26558: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26559: LD_ADDR_VAR 0 5
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: EMPTY
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: ST_TO_ADDR
// if not x or not y then
26581: LD_VAR 0 2
26585: NOT
26586: PUSH
26587: LD_VAR 0 3
26591: NOT
26592: OR
26593: IFFALSE 26597
// exit ;
26595: GO 28247
// if not range then
26597: LD_VAR 0 4
26601: NOT
26602: IFFALSE 26612
// range := 10 ;
26604: LD_ADDR_VAR 0 4
26608: PUSH
26609: LD_INT 10
26611: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26612: LD_ADDR_VAR 0 8
26616: PUSH
26617: LD_INT 81
26619: PUSH
26620: LD_VAR 0 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 92
26631: PUSH
26632: LD_VAR 0 2
26636: PUSH
26637: LD_VAR 0 3
26641: PUSH
26642: LD_VAR 0 4
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 3
26655: PUSH
26656: LD_INT 21
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: LIST
26674: PPUSH
26675: CALL_OW 69
26679: ST_TO_ADDR
// if not tmp then
26680: LD_VAR 0 8
26684: NOT
26685: IFFALSE 26689
// exit ;
26687: GO 28247
// for i in tmp do
26689: LD_ADDR_VAR 0 6
26693: PUSH
26694: LD_VAR 0 8
26698: PUSH
26699: FOR_IN
26700: IFFALSE 28222
// begin points := [ 0 , 0 , 0 ] ;
26702: LD_ADDR_VAR 0 9
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: ST_TO_ADDR
// bpoints := 1 ;
26721: LD_ADDR_VAR 0 10
26725: PUSH
26726: LD_INT 1
26728: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26729: LD_VAR 0 6
26733: PPUSH
26734: CALL_OW 247
26738: PUSH
26739: LD_INT 1
26741: DOUBLE
26742: EQUAL
26743: IFTRUE 26747
26745: GO 27325
26747: POP
// begin if GetClass ( i ) = 1 then
26748: LD_VAR 0 6
26752: PPUSH
26753: CALL_OW 257
26757: PUSH
26758: LD_INT 1
26760: EQUAL
26761: IFFALSE 26782
// points := [ 10 , 5 , 3 ] ;
26763: LD_ADDR_VAR 0 9
26767: PUSH
26768: LD_INT 10
26770: PUSH
26771: LD_INT 5
26773: PUSH
26774: LD_INT 3
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: LIST
26781: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26782: LD_VAR 0 6
26786: PPUSH
26787: CALL_OW 257
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: LD_INT 3
26797: PUSH
26798: LD_INT 4
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: IN
26806: IFFALSE 26827
// points := [ 3 , 2 , 1 ] ;
26808: LD_ADDR_VAR 0 9
26812: PUSH
26813: LD_INT 3
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26827: LD_VAR 0 6
26831: PPUSH
26832: CALL_OW 257
26836: PUSH
26837: LD_INT 5
26839: EQUAL
26840: IFFALSE 26861
// points := [ 130 , 5 , 2 ] ;
26842: LD_ADDR_VAR 0 9
26846: PUSH
26847: LD_INT 130
26849: PUSH
26850: LD_INT 5
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: LIST
26860: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26861: LD_VAR 0 6
26865: PPUSH
26866: CALL_OW 257
26870: PUSH
26871: LD_INT 8
26873: EQUAL
26874: IFFALSE 26895
// points := [ 35 , 35 , 30 ] ;
26876: LD_ADDR_VAR 0 9
26880: PUSH
26881: LD_INT 35
26883: PUSH
26884: LD_INT 35
26886: PUSH
26887: LD_INT 30
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26895: LD_VAR 0 6
26899: PPUSH
26900: CALL_OW 257
26904: PUSH
26905: LD_INT 9
26907: EQUAL
26908: IFFALSE 26929
// points := [ 20 , 55 , 40 ] ;
26910: LD_ADDR_VAR 0 9
26914: PUSH
26915: LD_INT 20
26917: PUSH
26918: LD_INT 55
26920: PUSH
26921: LD_INT 40
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: LIST
26928: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26929: LD_VAR 0 6
26933: PPUSH
26934: CALL_OW 257
26938: PUSH
26939: LD_INT 12
26941: PUSH
26942: LD_INT 16
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: IN
26949: IFFALSE 26970
// points := [ 5 , 3 , 2 ] ;
26951: LD_ADDR_VAR 0 9
26955: PUSH
26956: LD_INT 5
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: LIST
26969: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26970: LD_VAR 0 6
26974: PPUSH
26975: CALL_OW 257
26979: PUSH
26980: LD_INT 17
26982: EQUAL
26983: IFFALSE 27004
// points := [ 100 , 50 , 75 ] ;
26985: LD_ADDR_VAR 0 9
26989: PUSH
26990: LD_INT 100
26992: PUSH
26993: LD_INT 50
26995: PUSH
26996: LD_INT 75
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27004: LD_VAR 0 6
27008: PPUSH
27009: CALL_OW 257
27013: PUSH
27014: LD_INT 15
27016: EQUAL
27017: IFFALSE 27038
// points := [ 10 , 5 , 3 ] ;
27019: LD_ADDR_VAR 0 9
27023: PUSH
27024: LD_INT 10
27026: PUSH
27027: LD_INT 5
27029: PUSH
27030: LD_INT 3
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27038: LD_VAR 0 6
27042: PPUSH
27043: CALL_OW 257
27047: PUSH
27048: LD_INT 14
27050: EQUAL
27051: IFFALSE 27072
// points := [ 10 , 0 , 0 ] ;
27053: LD_ADDR_VAR 0 9
27057: PUSH
27058: LD_INT 10
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27072: LD_VAR 0 6
27076: PPUSH
27077: CALL_OW 257
27081: PUSH
27082: LD_INT 11
27084: EQUAL
27085: IFFALSE 27106
// points := [ 30 , 10 , 5 ] ;
27087: LD_ADDR_VAR 0 9
27091: PUSH
27092: LD_INT 30
27094: PUSH
27095: LD_INT 10
27097: PUSH
27098: LD_INT 5
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: LIST
27105: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27106: LD_VAR 0 1
27110: PPUSH
27111: LD_INT 5
27113: PPUSH
27114: CALL_OW 321
27118: PUSH
27119: LD_INT 2
27121: EQUAL
27122: IFFALSE 27139
// bpoints := bpoints * 1.8 ;
27124: LD_ADDR_VAR 0 10
27128: PUSH
27129: LD_VAR 0 10
27133: PUSH
27134: LD_REAL  1.80000000000000E+0000
27137: MUL
27138: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27139: LD_VAR 0 6
27143: PPUSH
27144: CALL_OW 257
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: LD_INT 3
27157: PUSH
27158: LD_INT 4
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: IN
27167: PUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: LD_INT 51
27175: PPUSH
27176: CALL_OW 321
27180: PUSH
27181: LD_INT 2
27183: EQUAL
27184: AND
27185: IFFALSE 27202
// bpoints := bpoints * 1.2 ;
27187: LD_ADDR_VAR 0 10
27191: PUSH
27192: LD_VAR 0 10
27196: PUSH
27197: LD_REAL  1.20000000000000E+0000
27200: MUL
27201: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27202: LD_VAR 0 6
27206: PPUSH
27207: CALL_OW 257
27211: PUSH
27212: LD_INT 5
27214: PUSH
27215: LD_INT 7
27217: PUSH
27218: LD_INT 9
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: IN
27226: PUSH
27227: LD_VAR 0 1
27231: PPUSH
27232: LD_INT 52
27234: PPUSH
27235: CALL_OW 321
27239: PUSH
27240: LD_INT 2
27242: EQUAL
27243: AND
27244: IFFALSE 27261
// bpoints := bpoints * 1.5 ;
27246: LD_ADDR_VAR 0 10
27250: PUSH
27251: LD_VAR 0 10
27255: PUSH
27256: LD_REAL  1.50000000000000E+0000
27259: MUL
27260: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27261: LD_VAR 0 1
27265: PPUSH
27266: LD_INT 66
27268: PPUSH
27269: CALL_OW 321
27273: PUSH
27274: LD_INT 2
27276: EQUAL
27277: IFFALSE 27294
// bpoints := bpoints * 1.1 ;
27279: LD_ADDR_VAR 0 10
27283: PUSH
27284: LD_VAR 0 10
27288: PUSH
27289: LD_REAL  1.10000000000000E+0000
27292: MUL
27293: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27294: LD_ADDR_VAR 0 10
27298: PUSH
27299: LD_VAR 0 10
27303: PUSH
27304: LD_VAR 0 6
27308: PPUSH
27309: LD_INT 1
27311: PPUSH
27312: CALL_OW 259
27316: PUSH
27317: LD_REAL  1.15000000000000E+0000
27320: MUL
27321: MUL
27322: ST_TO_ADDR
// end ; unit_vehicle :
27323: GO 28151
27325: LD_INT 2
27327: DOUBLE
27328: EQUAL
27329: IFTRUE 27333
27331: GO 28139
27333: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27334: LD_VAR 0 6
27338: PPUSH
27339: CALL_OW 264
27343: PUSH
27344: LD_INT 2
27346: PUSH
27347: LD_INT 42
27349: PUSH
27350: LD_INT 24
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: LIST
27357: IN
27358: IFFALSE 27379
// points := [ 25 , 5 , 3 ] ;
27360: LD_ADDR_VAR 0 9
27364: PUSH
27365: LD_INT 25
27367: PUSH
27368: LD_INT 5
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27379: LD_VAR 0 6
27383: PPUSH
27384: CALL_OW 264
27388: PUSH
27389: LD_INT 4
27391: PUSH
27392: LD_INT 43
27394: PUSH
27395: LD_INT 25
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: IN
27403: IFFALSE 27424
// points := [ 40 , 15 , 5 ] ;
27405: LD_ADDR_VAR 0 9
27409: PUSH
27410: LD_INT 40
27412: PUSH
27413: LD_INT 15
27415: PUSH
27416: LD_INT 5
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27424: LD_VAR 0 6
27428: PPUSH
27429: CALL_OW 264
27433: PUSH
27434: LD_INT 3
27436: PUSH
27437: LD_INT 23
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: IN
27444: IFFALSE 27465
// points := [ 7 , 25 , 8 ] ;
27446: LD_ADDR_VAR 0 9
27450: PUSH
27451: LD_INT 7
27453: PUSH
27454: LD_INT 25
27456: PUSH
27457: LD_INT 8
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27465: LD_VAR 0 6
27469: PPUSH
27470: CALL_OW 264
27474: PUSH
27475: LD_INT 5
27477: PUSH
27478: LD_INT 27
27480: PUSH
27481: LD_INT 44
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: LIST
27488: IN
27489: IFFALSE 27510
// points := [ 14 , 50 , 16 ] ;
27491: LD_ADDR_VAR 0 9
27495: PUSH
27496: LD_INT 14
27498: PUSH
27499: LD_INT 50
27501: PUSH
27502: LD_INT 16
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27510: LD_VAR 0 6
27514: PPUSH
27515: CALL_OW 264
27519: PUSH
27520: LD_INT 6
27522: PUSH
27523: LD_INT 46
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: IN
27530: IFFALSE 27551
// points := [ 32 , 120 , 70 ] ;
27532: LD_ADDR_VAR 0 9
27536: PUSH
27537: LD_INT 32
27539: PUSH
27540: LD_INT 120
27542: PUSH
27543: LD_INT 70
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27551: LD_VAR 0 6
27555: PPUSH
27556: CALL_OW 264
27560: PUSH
27561: LD_INT 7
27563: PUSH
27564: LD_INT 28
27566: PUSH
27567: LD_INT 45
27569: PUSH
27570: LD_INT 92
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: IN
27579: IFFALSE 27600
// points := [ 35 , 20 , 45 ] ;
27581: LD_ADDR_VAR 0 9
27585: PUSH
27586: LD_INT 35
27588: PUSH
27589: LD_INT 20
27591: PUSH
27592: LD_INT 45
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27600: LD_VAR 0 6
27604: PPUSH
27605: CALL_OW 264
27609: PUSH
27610: LD_INT 47
27612: PUSH
27613: EMPTY
27614: LIST
27615: IN
27616: IFFALSE 27637
// points := [ 67 , 45 , 75 ] ;
27618: LD_ADDR_VAR 0 9
27622: PUSH
27623: LD_INT 67
27625: PUSH
27626: LD_INT 45
27628: PUSH
27629: LD_INT 75
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27637: LD_VAR 0 6
27641: PPUSH
27642: CALL_OW 264
27646: PUSH
27647: LD_INT 26
27649: PUSH
27650: EMPTY
27651: LIST
27652: IN
27653: IFFALSE 27674
// points := [ 120 , 30 , 80 ] ;
27655: LD_ADDR_VAR 0 9
27659: PUSH
27660: LD_INT 120
27662: PUSH
27663: LD_INT 30
27665: PUSH
27666: LD_INT 80
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: LIST
27673: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27674: LD_VAR 0 6
27678: PPUSH
27679: CALL_OW 264
27683: PUSH
27684: LD_INT 22
27686: PUSH
27687: EMPTY
27688: LIST
27689: IN
27690: IFFALSE 27711
// points := [ 40 , 1 , 1 ] ;
27692: LD_ADDR_VAR 0 9
27696: PUSH
27697: LD_INT 40
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27711: LD_VAR 0 6
27715: PPUSH
27716: CALL_OW 264
27720: PUSH
27721: LD_INT 29
27723: PUSH
27724: EMPTY
27725: LIST
27726: IN
27727: IFFALSE 27748
// points := [ 70 , 200 , 400 ] ;
27729: LD_ADDR_VAR 0 9
27733: PUSH
27734: LD_INT 70
27736: PUSH
27737: LD_INT 200
27739: PUSH
27740: LD_INT 400
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27748: LD_VAR 0 6
27752: PPUSH
27753: CALL_OW 264
27757: PUSH
27758: LD_INT 14
27760: PUSH
27761: LD_INT 53
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: IN
27768: IFFALSE 27789
// points := [ 40 , 10 , 20 ] ;
27770: LD_ADDR_VAR 0 9
27774: PUSH
27775: LD_INT 40
27777: PUSH
27778: LD_INT 10
27780: PUSH
27781: LD_INT 20
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27789: LD_VAR 0 6
27793: PPUSH
27794: CALL_OW 264
27798: PUSH
27799: LD_INT 9
27801: PUSH
27802: EMPTY
27803: LIST
27804: IN
27805: IFFALSE 27826
// points := [ 5 , 70 , 20 ] ;
27807: LD_ADDR_VAR 0 9
27811: PUSH
27812: LD_INT 5
27814: PUSH
27815: LD_INT 70
27817: PUSH
27818: LD_INT 20
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27826: LD_VAR 0 6
27830: PPUSH
27831: CALL_OW 264
27835: PUSH
27836: LD_INT 10
27838: PUSH
27839: EMPTY
27840: LIST
27841: IN
27842: IFFALSE 27863
// points := [ 35 , 110 , 70 ] ;
27844: LD_ADDR_VAR 0 9
27848: PUSH
27849: LD_INT 35
27851: PUSH
27852: LD_INT 110
27854: PUSH
27855: LD_INT 70
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: LIST
27862: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27863: LD_VAR 0 6
27867: PPUSH
27868: CALL_OW 265
27872: PUSH
27873: LD_INT 25
27875: EQUAL
27876: IFFALSE 27897
// points := [ 80 , 65 , 100 ] ;
27878: LD_ADDR_VAR 0 9
27882: PUSH
27883: LD_INT 80
27885: PUSH
27886: LD_INT 65
27888: PUSH
27889: LD_INT 100
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27897: LD_VAR 0 6
27901: PPUSH
27902: CALL_OW 263
27906: PUSH
27907: LD_INT 1
27909: EQUAL
27910: IFFALSE 27945
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27912: LD_ADDR_VAR 0 10
27916: PUSH
27917: LD_VAR 0 10
27921: PUSH
27922: LD_VAR 0 6
27926: PPUSH
27927: CALL_OW 311
27931: PPUSH
27932: LD_INT 3
27934: PPUSH
27935: CALL_OW 259
27939: PUSH
27940: LD_INT 4
27942: MUL
27943: MUL
27944: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27945: LD_VAR 0 6
27949: PPUSH
27950: CALL_OW 263
27954: PUSH
27955: LD_INT 2
27957: EQUAL
27958: IFFALSE 28009
// begin j := IsControledBy ( i ) ;
27960: LD_ADDR_VAR 0 7
27964: PUSH
27965: LD_VAR 0 6
27969: PPUSH
27970: CALL_OW 312
27974: ST_TO_ADDR
// if j then
27975: LD_VAR 0 7
27979: IFFALSE 28009
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27981: LD_ADDR_VAR 0 10
27985: PUSH
27986: LD_VAR 0 10
27990: PUSH
27991: LD_VAR 0 7
27995: PPUSH
27996: LD_INT 3
27998: PPUSH
27999: CALL_OW 259
28003: PUSH
28004: LD_INT 3
28006: MUL
28007: MUL
28008: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28009: LD_VAR 0 6
28013: PPUSH
28014: CALL_OW 264
28018: PUSH
28019: LD_INT 5
28021: PUSH
28022: LD_INT 6
28024: PUSH
28025: LD_INT 46
28027: PUSH
28028: LD_INT 44
28030: PUSH
28031: LD_INT 47
28033: PUSH
28034: LD_INT 45
28036: PUSH
28037: LD_INT 28
28039: PUSH
28040: LD_INT 7
28042: PUSH
28043: LD_INT 27
28045: PUSH
28046: LD_INT 29
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: IN
28061: PUSH
28062: LD_VAR 0 1
28066: PPUSH
28067: LD_INT 52
28069: PPUSH
28070: CALL_OW 321
28074: PUSH
28075: LD_INT 2
28077: EQUAL
28078: AND
28079: IFFALSE 28096
// bpoints := bpoints * 1.2 ;
28081: LD_ADDR_VAR 0 10
28085: PUSH
28086: LD_VAR 0 10
28090: PUSH
28091: LD_REAL  1.20000000000000E+0000
28094: MUL
28095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28096: LD_VAR 0 6
28100: PPUSH
28101: CALL_OW 264
28105: PUSH
28106: LD_INT 6
28108: PUSH
28109: LD_INT 46
28111: PUSH
28112: LD_INT 47
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: LIST
28119: IN
28120: IFFALSE 28137
// bpoints := bpoints * 1.2 ;
28122: LD_ADDR_VAR 0 10
28126: PUSH
28127: LD_VAR 0 10
28131: PUSH
28132: LD_REAL  1.20000000000000E+0000
28135: MUL
28136: ST_TO_ADDR
// end ; unit_building :
28137: GO 28151
28139: LD_INT 3
28141: DOUBLE
28142: EQUAL
28143: IFTRUE 28147
28145: GO 28150
28147: POP
// ; end ;
28148: GO 28151
28150: POP
// for j = 1 to 3 do
28151: LD_ADDR_VAR 0 7
28155: PUSH
28156: DOUBLE
28157: LD_INT 1
28159: DEC
28160: ST_TO_ADDR
28161: LD_INT 3
28163: PUSH
28164: FOR_TO
28165: IFFALSE 28218
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28167: LD_ADDR_VAR 0 5
28171: PUSH
28172: LD_VAR 0 5
28176: PPUSH
28177: LD_VAR 0 7
28181: PPUSH
28182: LD_VAR 0 5
28186: PUSH
28187: LD_VAR 0 7
28191: ARRAY
28192: PUSH
28193: LD_VAR 0 9
28197: PUSH
28198: LD_VAR 0 7
28202: ARRAY
28203: PUSH
28204: LD_VAR 0 10
28208: MUL
28209: PLUS
28210: PPUSH
28211: CALL_OW 1
28215: ST_TO_ADDR
28216: GO 28164
28218: POP
28219: POP
// end ;
28220: GO 26699
28222: POP
28223: POP
// result := Replace ( result , 4 , tmp ) ;
28224: LD_ADDR_VAR 0 5
28228: PUSH
28229: LD_VAR 0 5
28233: PPUSH
28234: LD_INT 4
28236: PPUSH
28237: LD_VAR 0 8
28241: PPUSH
28242: CALL_OW 1
28246: ST_TO_ADDR
// end ;
28247: LD_VAR 0 5
28251: RET
// export function DangerAtRange ( unit , range ) ; begin
28252: LD_INT 0
28254: PPUSH
// if not unit then
28255: LD_VAR 0 1
28259: NOT
28260: IFFALSE 28264
// exit ;
28262: GO 28309
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28264: LD_ADDR_VAR 0 3
28268: PUSH
28269: LD_VAR 0 1
28273: PPUSH
28274: CALL_OW 255
28278: PPUSH
28279: LD_VAR 0 1
28283: PPUSH
28284: CALL_OW 250
28288: PPUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 251
28298: PPUSH
28299: LD_VAR 0 2
28303: PPUSH
28304: CALL 26551 0 4
28308: ST_TO_ADDR
// end ;
28309: LD_VAR 0 3
28313: RET
// export function DangerInArea ( side , area ) ; begin
28314: LD_INT 0
28316: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: LD_VAR 0 2
28326: PPUSH
28327: LD_INT 81
28329: PUSH
28330: LD_VAR 0 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PPUSH
28339: CALL_OW 70
28343: ST_TO_ADDR
// end ;
28344: LD_VAR 0 3
28348: RET
// export function IsExtension ( b ) ; begin
28349: LD_INT 0
28351: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28352: LD_ADDR_VAR 0 2
28356: PUSH
28357: LD_VAR 0 1
28361: PUSH
28362: LD_INT 23
28364: PUSH
28365: LD_INT 20
28367: PUSH
28368: LD_INT 22
28370: PUSH
28371: LD_INT 17
28373: PUSH
28374: LD_INT 24
28376: PUSH
28377: LD_INT 21
28379: PUSH
28380: LD_INT 19
28382: PUSH
28383: LD_INT 16
28385: PUSH
28386: LD_INT 25
28388: PUSH
28389: LD_INT 18
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: IN
28404: ST_TO_ADDR
// end ;
28405: LD_VAR 0 2
28409: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28410: LD_INT 0
28412: PPUSH
28413: PPUSH
28414: PPUSH
// result := [ ] ;
28415: LD_ADDR_VAR 0 4
28419: PUSH
28420: EMPTY
28421: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28422: LD_ADDR_VAR 0 5
28426: PUSH
28427: LD_VAR 0 2
28431: PPUSH
28432: LD_INT 21
28434: PUSH
28435: LD_INT 3
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PPUSH
28442: CALL_OW 70
28446: ST_TO_ADDR
// if not tmp then
28447: LD_VAR 0 5
28451: NOT
28452: IFFALSE 28456
// exit ;
28454: GO 28520
// if checkLink then
28456: LD_VAR 0 3
28460: IFFALSE 28510
// begin for i in tmp do
28462: LD_ADDR_VAR 0 6
28466: PUSH
28467: LD_VAR 0 5
28471: PUSH
28472: FOR_IN
28473: IFFALSE 28508
// if GetBase ( i ) <> base then
28475: LD_VAR 0 6
28479: PPUSH
28480: CALL_OW 274
28484: PUSH
28485: LD_VAR 0 1
28489: NONEQUAL
28490: IFFALSE 28506
// ComLinkToBase ( base , i ) ;
28492: LD_VAR 0 1
28496: PPUSH
28497: LD_VAR 0 6
28501: PPUSH
28502: CALL_OW 169
28506: GO 28472
28508: POP
28509: POP
// end ; result := tmp ;
28510: LD_ADDR_VAR 0 4
28514: PUSH
28515: LD_VAR 0 5
28519: ST_TO_ADDR
// end ;
28520: LD_VAR 0 4
28524: RET
// export function ComComplete ( units , b ) ; var i ; begin
28525: LD_INT 0
28527: PPUSH
28528: PPUSH
// if not units then
28529: LD_VAR 0 1
28533: NOT
28534: IFFALSE 28538
// exit ;
28536: GO 28628
// for i in units do
28538: LD_ADDR_VAR 0 4
28542: PUSH
28543: LD_VAR 0 1
28547: PUSH
28548: FOR_IN
28549: IFFALSE 28626
// if BuildingStatus ( b ) = bs_build then
28551: LD_VAR 0 2
28555: PPUSH
28556: CALL_OW 461
28560: PUSH
28561: LD_INT 1
28563: EQUAL
28564: IFFALSE 28624
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28566: LD_VAR 0 4
28570: PPUSH
28571: LD_STRING h
28573: PUSH
28574: LD_VAR 0 2
28578: PPUSH
28579: CALL_OW 250
28583: PUSH
28584: LD_VAR 0 2
28588: PPUSH
28589: CALL_OW 251
28593: PUSH
28594: LD_VAR 0 2
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: PPUSH
28620: CALL_OW 446
28624: GO 28548
28626: POP
28627: POP
// end ;
28628: LD_VAR 0 3
28632: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28633: LD_INT 0
28635: PPUSH
28636: PPUSH
28637: PPUSH
28638: PPUSH
28639: PPUSH
28640: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28641: LD_VAR 0 1
28645: NOT
28646: PUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 263
28656: PUSH
28657: LD_INT 2
28659: NONEQUAL
28660: OR
28661: IFFALSE 28665
// exit ;
28663: GO 28981
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28665: LD_ADDR_VAR 0 6
28669: PUSH
28670: LD_INT 22
28672: PUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 255
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 30
28692: PUSH
28693: LD_INT 36
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 34
28702: PUSH
28703: LD_INT 31
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PPUSH
28719: CALL_OW 69
28723: ST_TO_ADDR
// if not tmp then
28724: LD_VAR 0 6
28728: NOT
28729: IFFALSE 28733
// exit ;
28731: GO 28981
// result := [ ] ;
28733: LD_ADDR_VAR 0 2
28737: PUSH
28738: EMPTY
28739: ST_TO_ADDR
// for i in tmp do
28740: LD_ADDR_VAR 0 3
28744: PUSH
28745: LD_VAR 0 6
28749: PUSH
28750: FOR_IN
28751: IFFALSE 28822
// begin t := UnitsInside ( i ) ;
28753: LD_ADDR_VAR 0 4
28757: PUSH
28758: LD_VAR 0 3
28762: PPUSH
28763: CALL_OW 313
28767: ST_TO_ADDR
// if t then
28768: LD_VAR 0 4
28772: IFFALSE 28820
// for j in t do
28774: LD_ADDR_VAR 0 7
28778: PUSH
28779: LD_VAR 0 4
28783: PUSH
28784: FOR_IN
28785: IFFALSE 28818
// result := Replace ( result , result + 1 , j ) ;
28787: LD_ADDR_VAR 0 2
28791: PUSH
28792: LD_VAR 0 2
28796: PPUSH
28797: LD_VAR 0 2
28801: PUSH
28802: LD_INT 1
28804: PLUS
28805: PPUSH
28806: LD_VAR 0 7
28810: PPUSH
28811: CALL_OW 1
28815: ST_TO_ADDR
28816: GO 28784
28818: POP
28819: POP
// end ;
28820: GO 28750
28822: POP
28823: POP
// if not result then
28824: LD_VAR 0 2
28828: NOT
28829: IFFALSE 28833
// exit ;
28831: GO 28981
// mech := result [ 1 ] ;
28833: LD_ADDR_VAR 0 5
28837: PUSH
28838: LD_VAR 0 2
28842: PUSH
28843: LD_INT 1
28845: ARRAY
28846: ST_TO_ADDR
// if result > 1 then
28847: LD_VAR 0 2
28851: PUSH
28852: LD_INT 1
28854: GREATER
28855: IFFALSE 28967
// begin for i = 2 to result do
28857: LD_ADDR_VAR 0 3
28861: PUSH
28862: DOUBLE
28863: LD_INT 2
28865: DEC
28866: ST_TO_ADDR
28867: LD_VAR 0 2
28871: PUSH
28872: FOR_TO
28873: IFFALSE 28965
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28875: LD_ADDR_VAR 0 4
28879: PUSH
28880: LD_VAR 0 2
28884: PUSH
28885: LD_VAR 0 3
28889: ARRAY
28890: PPUSH
28891: LD_INT 3
28893: PPUSH
28894: CALL_OW 259
28898: PUSH
28899: LD_VAR 0 2
28903: PUSH
28904: LD_VAR 0 3
28908: ARRAY
28909: PPUSH
28910: CALL_OW 432
28914: MINUS
28915: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28916: LD_VAR 0 4
28920: PUSH
28921: LD_VAR 0 5
28925: PPUSH
28926: LD_INT 3
28928: PPUSH
28929: CALL_OW 259
28933: PUSH
28934: LD_VAR 0 5
28938: PPUSH
28939: CALL_OW 432
28943: MINUS
28944: GREATEREQUAL
28945: IFFALSE 28963
// mech := result [ i ] ;
28947: LD_ADDR_VAR 0 5
28951: PUSH
28952: LD_VAR 0 2
28956: PUSH
28957: LD_VAR 0 3
28961: ARRAY
28962: ST_TO_ADDR
// end ;
28963: GO 28872
28965: POP
28966: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28967: LD_VAR 0 1
28971: PPUSH
28972: LD_VAR 0 5
28976: PPUSH
28977: CALL_OW 135
// end ;
28981: LD_VAR 0 2
28985: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28986: LD_INT 0
28988: PPUSH
28989: PPUSH
28990: PPUSH
28991: PPUSH
28992: PPUSH
28993: PPUSH
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
28998: PPUSH
28999: PPUSH
29000: PPUSH
// result := [ ] ;
29001: LD_ADDR_VAR 0 7
29005: PUSH
29006: EMPTY
29007: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29008: LD_VAR 0 1
29012: PPUSH
29013: CALL_OW 266
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: IN
29028: NOT
29029: IFFALSE 29033
// exit ;
29031: GO 30667
// if name then
29033: LD_VAR 0 3
29037: IFFALSE 29053
// SetBName ( base_dep , name ) ;
29039: LD_VAR 0 1
29043: PPUSH
29044: LD_VAR 0 3
29048: PPUSH
29049: CALL_OW 500
// base := GetBase ( base_dep ) ;
29053: LD_ADDR_VAR 0 15
29057: PUSH
29058: LD_VAR 0 1
29062: PPUSH
29063: CALL_OW 274
29067: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29068: LD_ADDR_VAR 0 16
29072: PUSH
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL_OW 255
29082: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29083: LD_ADDR_VAR 0 17
29087: PUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 248
29097: ST_TO_ADDR
// if sources then
29098: LD_VAR 0 5
29102: IFFALSE 29149
// for i = 1 to 3 do
29104: LD_ADDR_VAR 0 8
29108: PUSH
29109: DOUBLE
29110: LD_INT 1
29112: DEC
29113: ST_TO_ADDR
29114: LD_INT 3
29116: PUSH
29117: FOR_TO
29118: IFFALSE 29147
// AddResourceType ( base , i , sources [ i ] ) ;
29120: LD_VAR 0 15
29124: PPUSH
29125: LD_VAR 0 8
29129: PPUSH
29130: LD_VAR 0 5
29134: PUSH
29135: LD_VAR 0 8
29139: ARRAY
29140: PPUSH
29141: CALL_OW 276
29145: GO 29117
29147: POP
29148: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29149: LD_ADDR_VAR 0 18
29153: PUSH
29154: LD_VAR 0 15
29158: PPUSH
29159: LD_VAR 0 2
29163: PPUSH
29164: LD_INT 1
29166: PPUSH
29167: CALL 28410 0 3
29171: ST_TO_ADDR
// InitHc ;
29172: CALL_OW 19
// InitUc ;
29176: CALL_OW 18
// uc_side := side ;
29180: LD_ADDR_OWVAR 20
29184: PUSH
29185: LD_VAR 0 16
29189: ST_TO_ADDR
// uc_nation := nation ;
29190: LD_ADDR_OWVAR 21
29194: PUSH
29195: LD_VAR 0 17
29199: ST_TO_ADDR
// if buildings then
29200: LD_VAR 0 18
29204: IFFALSE 30526
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29206: LD_ADDR_VAR 0 19
29210: PUSH
29211: LD_VAR 0 18
29215: PPUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 30
29221: PUSH
29222: LD_INT 29
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 30
29231: PUSH
29232: LD_INT 30
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 72
29248: ST_TO_ADDR
// if tmp then
29249: LD_VAR 0 19
29253: IFFALSE 29301
// for i in tmp do
29255: LD_ADDR_VAR 0 8
29259: PUSH
29260: LD_VAR 0 19
29264: PUSH
29265: FOR_IN
29266: IFFALSE 29299
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29268: LD_VAR 0 8
29272: PPUSH
29273: CALL_OW 250
29277: PPUSH
29278: LD_VAR 0 8
29282: PPUSH
29283: CALL_OW 251
29287: PPUSH
29288: LD_VAR 0 16
29292: PPUSH
29293: CALL_OW 441
29297: GO 29265
29299: POP
29300: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29301: LD_VAR 0 18
29305: PPUSH
29306: LD_INT 2
29308: PUSH
29309: LD_INT 30
29311: PUSH
29312: LD_INT 32
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 30
29321: PUSH
29322: LD_INT 33
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: PPUSH
29334: CALL_OW 72
29338: IFFALSE 29426
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29340: LD_ADDR_VAR 0 8
29344: PUSH
29345: LD_VAR 0 18
29349: PPUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 30
29355: PUSH
29356: LD_INT 32
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 30
29365: PUSH
29366: LD_INT 33
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: PPUSH
29378: CALL_OW 72
29382: PUSH
29383: FOR_IN
29384: IFFALSE 29424
// begin if not GetBWeapon ( i ) then
29386: LD_VAR 0 8
29390: PPUSH
29391: CALL_OW 269
29395: NOT
29396: IFFALSE 29422
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29398: LD_VAR 0 8
29402: PPUSH
29403: LD_VAR 0 8
29407: PPUSH
29408: LD_VAR 0 2
29412: PPUSH
29413: CALL 30672 0 2
29417: PPUSH
29418: CALL_OW 431
// end ;
29422: GO 29383
29424: POP
29425: POP
// end ; for i = 1 to personel do
29426: LD_ADDR_VAR 0 8
29430: PUSH
29431: DOUBLE
29432: LD_INT 1
29434: DEC
29435: ST_TO_ADDR
29436: LD_VAR 0 6
29440: PUSH
29441: FOR_TO
29442: IFFALSE 30506
// begin if i > 4 then
29444: LD_VAR 0 8
29448: PUSH
29449: LD_INT 4
29451: GREATER
29452: IFFALSE 29456
// break ;
29454: GO 30506
// case i of 1 :
29456: LD_VAR 0 8
29460: PUSH
29461: LD_INT 1
29463: DOUBLE
29464: EQUAL
29465: IFTRUE 29469
29467: GO 29549
29469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29470: LD_ADDR_VAR 0 12
29474: PUSH
29475: LD_VAR 0 18
29479: PPUSH
29480: LD_INT 22
29482: PUSH
29483: LD_VAR 0 16
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 58
29494: PUSH
29495: EMPTY
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: PUSH
29501: LD_INT 30
29503: PUSH
29504: LD_INT 32
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 30
29513: PUSH
29514: LD_INT 4
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 30
29523: PUSH
29524: LD_INT 5
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: PPUSH
29542: CALL_OW 72
29546: ST_TO_ADDR
29547: GO 29771
29549: LD_INT 2
29551: DOUBLE
29552: EQUAL
29553: IFTRUE 29557
29555: GO 29619
29557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29558: LD_ADDR_VAR 0 12
29562: PUSH
29563: LD_VAR 0 18
29567: PPUSH
29568: LD_INT 22
29570: PUSH
29571: LD_VAR 0 16
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 30
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 30
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PPUSH
29612: CALL_OW 72
29616: ST_TO_ADDR
29617: GO 29771
29619: LD_INT 3
29621: DOUBLE
29622: EQUAL
29623: IFTRUE 29627
29625: GO 29689
29627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29628: LD_ADDR_VAR 0 12
29632: PUSH
29633: LD_VAR 0 18
29637: PPUSH
29638: LD_INT 22
29640: PUSH
29641: LD_VAR 0 16
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 30
29655: PUSH
29656: LD_INT 2
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 30
29665: PUSH
29666: LD_INT 3
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PPUSH
29682: CALL_OW 72
29686: ST_TO_ADDR
29687: GO 29771
29689: LD_INT 4
29691: DOUBLE
29692: EQUAL
29693: IFTRUE 29697
29695: GO 29770
29697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29698: LD_ADDR_VAR 0 12
29702: PUSH
29703: LD_VAR 0 18
29707: PPUSH
29708: LD_INT 22
29710: PUSH
29711: LD_VAR 0 16
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 30
29725: PUSH
29726: LD_INT 6
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 30
29735: PUSH
29736: LD_INT 7
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 30
29745: PUSH
29746: LD_INT 8
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PPUSH
29763: CALL_OW 72
29767: ST_TO_ADDR
29768: GO 29771
29770: POP
// if i = 1 then
29771: LD_VAR 0 8
29775: PUSH
29776: LD_INT 1
29778: EQUAL
29779: IFFALSE 29890
// begin tmp := [ ] ;
29781: LD_ADDR_VAR 0 19
29785: PUSH
29786: EMPTY
29787: ST_TO_ADDR
// for j in f do
29788: LD_ADDR_VAR 0 9
29792: PUSH
29793: LD_VAR 0 12
29797: PUSH
29798: FOR_IN
29799: IFFALSE 29872
// if GetBType ( j ) = b_bunker then
29801: LD_VAR 0 9
29805: PPUSH
29806: CALL_OW 266
29810: PUSH
29811: LD_INT 32
29813: EQUAL
29814: IFFALSE 29841
// tmp := Insert ( tmp , 1 , j ) else
29816: LD_ADDR_VAR 0 19
29820: PUSH
29821: LD_VAR 0 19
29825: PPUSH
29826: LD_INT 1
29828: PPUSH
29829: LD_VAR 0 9
29833: PPUSH
29834: CALL_OW 2
29838: ST_TO_ADDR
29839: GO 29870
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29841: LD_ADDR_VAR 0 19
29845: PUSH
29846: LD_VAR 0 19
29850: PPUSH
29851: LD_VAR 0 19
29855: PUSH
29856: LD_INT 1
29858: PLUS
29859: PPUSH
29860: LD_VAR 0 9
29864: PPUSH
29865: CALL_OW 2
29869: ST_TO_ADDR
29870: GO 29798
29872: POP
29873: POP
// if tmp then
29874: LD_VAR 0 19
29878: IFFALSE 29890
// f := tmp ;
29880: LD_ADDR_VAR 0 12
29884: PUSH
29885: LD_VAR 0 19
29889: ST_TO_ADDR
// end ; x := personel [ i ] ;
29890: LD_ADDR_VAR 0 13
29894: PUSH
29895: LD_VAR 0 6
29899: PUSH
29900: LD_VAR 0 8
29904: ARRAY
29905: ST_TO_ADDR
// if x = - 1 then
29906: LD_VAR 0 13
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: EQUAL
29915: IFFALSE 30124
// begin for j in f do
29917: LD_ADDR_VAR 0 9
29921: PUSH
29922: LD_VAR 0 12
29926: PUSH
29927: FOR_IN
29928: IFFALSE 30120
// repeat InitHc ;
29930: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29934: LD_VAR 0 9
29938: PPUSH
29939: CALL_OW 266
29943: PUSH
29944: LD_INT 5
29946: EQUAL
29947: IFFALSE 30017
// begin if UnitsInside ( j ) < 3 then
29949: LD_VAR 0 9
29953: PPUSH
29954: CALL_OW 313
29958: PUSH
29959: LD_INT 3
29961: LESS
29962: IFFALSE 29998
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29964: LD_INT 0
29966: PPUSH
29967: LD_INT 5
29969: PUSH
29970: LD_INT 8
29972: PUSH
29973: LD_INT 9
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: PUSH
29981: LD_VAR 0 17
29985: ARRAY
29986: PPUSH
29987: LD_VAR 0 4
29991: PPUSH
29992: CALL_OW 380
29996: GO 30015
// PrepareHuman ( false , i , skill ) ;
29998: LD_INT 0
30000: PPUSH
30001: LD_VAR 0 8
30005: PPUSH
30006: LD_VAR 0 4
30010: PPUSH
30011: CALL_OW 380
// end else
30015: GO 30034
// PrepareHuman ( false , i , skill ) ;
30017: LD_INT 0
30019: PPUSH
30020: LD_VAR 0 8
30024: PPUSH
30025: LD_VAR 0 4
30029: PPUSH
30030: CALL_OW 380
// un := CreateHuman ;
30034: LD_ADDR_VAR 0 14
30038: PUSH
30039: CALL_OW 44
30043: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30044: LD_ADDR_VAR 0 7
30048: PUSH
30049: LD_VAR 0 7
30053: PPUSH
30054: LD_INT 1
30056: PPUSH
30057: LD_VAR 0 14
30061: PPUSH
30062: CALL_OW 2
30066: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30067: LD_VAR 0 14
30071: PPUSH
30072: LD_VAR 0 9
30076: PPUSH
30077: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30081: LD_VAR 0 9
30085: PPUSH
30086: CALL_OW 313
30090: PUSH
30091: LD_INT 6
30093: EQUAL
30094: PUSH
30095: LD_VAR 0 9
30099: PPUSH
30100: CALL_OW 266
30104: PUSH
30105: LD_INT 32
30107: PUSH
30108: LD_INT 31
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: IN
30115: OR
30116: IFFALSE 29930
30118: GO 29927
30120: POP
30121: POP
// end else
30122: GO 30504
// for j = 1 to x do
30124: LD_ADDR_VAR 0 9
30128: PUSH
30129: DOUBLE
30130: LD_INT 1
30132: DEC
30133: ST_TO_ADDR
30134: LD_VAR 0 13
30138: PUSH
30139: FOR_TO
30140: IFFALSE 30502
// begin InitHc ;
30142: CALL_OW 19
// if not f then
30146: LD_VAR 0 12
30150: NOT
30151: IFFALSE 30240
// begin PrepareHuman ( false , i , skill ) ;
30153: LD_INT 0
30155: PPUSH
30156: LD_VAR 0 8
30160: PPUSH
30161: LD_VAR 0 4
30165: PPUSH
30166: CALL_OW 380
// un := CreateHuman ;
30170: LD_ADDR_VAR 0 14
30174: PUSH
30175: CALL_OW 44
30179: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30180: LD_ADDR_VAR 0 7
30184: PUSH
30185: LD_VAR 0 7
30189: PPUSH
30190: LD_INT 1
30192: PPUSH
30193: LD_VAR 0 14
30197: PPUSH
30198: CALL_OW 2
30202: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30203: LD_VAR 0 14
30207: PPUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL_OW 250
30217: PPUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 251
30227: PPUSH
30228: LD_INT 10
30230: PPUSH
30231: LD_INT 0
30233: PPUSH
30234: CALL_OW 50
// continue ;
30238: GO 30139
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30240: LD_VAR 0 12
30244: PUSH
30245: LD_INT 1
30247: ARRAY
30248: PPUSH
30249: CALL_OW 313
30253: PUSH
30254: LD_VAR 0 12
30258: PUSH
30259: LD_INT 1
30261: ARRAY
30262: PPUSH
30263: CALL_OW 266
30267: PUSH
30268: LD_INT 32
30270: PUSH
30271: LD_INT 31
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: IN
30278: AND
30279: PUSH
30280: LD_VAR 0 12
30284: PUSH
30285: LD_INT 1
30287: ARRAY
30288: PPUSH
30289: CALL_OW 313
30293: PUSH
30294: LD_INT 6
30296: EQUAL
30297: OR
30298: IFFALSE 30318
// f := Delete ( f , 1 ) ;
30300: LD_ADDR_VAR 0 12
30304: PUSH
30305: LD_VAR 0 12
30309: PPUSH
30310: LD_INT 1
30312: PPUSH
30313: CALL_OW 3
30317: ST_TO_ADDR
// if not f then
30318: LD_VAR 0 12
30322: NOT
30323: IFFALSE 30341
// begin x := x + 2 ;
30325: LD_ADDR_VAR 0 13
30329: PUSH
30330: LD_VAR 0 13
30334: PUSH
30335: LD_INT 2
30337: PLUS
30338: ST_TO_ADDR
// continue ;
30339: GO 30139
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30341: LD_VAR 0 12
30345: PUSH
30346: LD_INT 1
30348: ARRAY
30349: PPUSH
30350: CALL_OW 266
30354: PUSH
30355: LD_INT 5
30357: EQUAL
30358: IFFALSE 30432
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30360: LD_VAR 0 12
30364: PUSH
30365: LD_INT 1
30367: ARRAY
30368: PPUSH
30369: CALL_OW 313
30373: PUSH
30374: LD_INT 3
30376: LESS
30377: IFFALSE 30413
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30379: LD_INT 0
30381: PPUSH
30382: LD_INT 5
30384: PUSH
30385: LD_INT 8
30387: PUSH
30388: LD_INT 9
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: PUSH
30396: LD_VAR 0 17
30400: ARRAY
30401: PPUSH
30402: LD_VAR 0 4
30406: PPUSH
30407: CALL_OW 380
30411: GO 30430
// PrepareHuman ( false , i , skill ) ;
30413: LD_INT 0
30415: PPUSH
30416: LD_VAR 0 8
30420: PPUSH
30421: LD_VAR 0 4
30425: PPUSH
30426: CALL_OW 380
// end else
30430: GO 30449
// PrepareHuman ( false , i , skill ) ;
30432: LD_INT 0
30434: PPUSH
30435: LD_VAR 0 8
30439: PPUSH
30440: LD_VAR 0 4
30444: PPUSH
30445: CALL_OW 380
// un := CreateHuman ;
30449: LD_ADDR_VAR 0 14
30453: PUSH
30454: CALL_OW 44
30458: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30459: LD_ADDR_VAR 0 7
30463: PUSH
30464: LD_VAR 0 7
30468: PPUSH
30469: LD_INT 1
30471: PPUSH
30472: LD_VAR 0 14
30476: PPUSH
30477: CALL_OW 2
30481: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30482: LD_VAR 0 14
30486: PPUSH
30487: LD_VAR 0 12
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PPUSH
30496: CALL_OW 52
// end ;
30500: GO 30139
30502: POP
30503: POP
// end ;
30504: GO 29441
30506: POP
30507: POP
// result := result ^ buildings ;
30508: LD_ADDR_VAR 0 7
30512: PUSH
30513: LD_VAR 0 7
30517: PUSH
30518: LD_VAR 0 18
30522: ADD
30523: ST_TO_ADDR
// end else
30524: GO 30667
// begin for i = 1 to personel do
30526: LD_ADDR_VAR 0 8
30530: PUSH
30531: DOUBLE
30532: LD_INT 1
30534: DEC
30535: ST_TO_ADDR
30536: LD_VAR 0 6
30540: PUSH
30541: FOR_TO
30542: IFFALSE 30665
// begin if i > 4 then
30544: LD_VAR 0 8
30548: PUSH
30549: LD_INT 4
30551: GREATER
30552: IFFALSE 30556
// break ;
30554: GO 30665
// x := personel [ i ] ;
30556: LD_ADDR_VAR 0 13
30560: PUSH
30561: LD_VAR 0 6
30565: PUSH
30566: LD_VAR 0 8
30570: ARRAY
30571: ST_TO_ADDR
// if x = - 1 then
30572: LD_VAR 0 13
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: EQUAL
30581: IFFALSE 30585
// continue ;
30583: GO 30541
// PrepareHuman ( false , i , skill ) ;
30585: LD_INT 0
30587: PPUSH
30588: LD_VAR 0 8
30592: PPUSH
30593: LD_VAR 0 4
30597: PPUSH
30598: CALL_OW 380
// un := CreateHuman ;
30602: LD_ADDR_VAR 0 14
30606: PUSH
30607: CALL_OW 44
30611: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30612: LD_VAR 0 14
30616: PPUSH
30617: LD_VAR 0 1
30621: PPUSH
30622: CALL_OW 250
30626: PPUSH
30627: LD_VAR 0 1
30631: PPUSH
30632: CALL_OW 251
30636: PPUSH
30637: LD_INT 10
30639: PPUSH
30640: LD_INT 0
30642: PPUSH
30643: CALL_OW 50
// result := result ^ un ;
30647: LD_ADDR_VAR 0 7
30651: PUSH
30652: LD_VAR 0 7
30656: PUSH
30657: LD_VAR 0 14
30661: ADD
30662: ST_TO_ADDR
// end ;
30663: GO 30541
30665: POP
30666: POP
// end ; end ;
30667: LD_VAR 0 7
30671: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30672: LD_INT 0
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
// result := false ;
30690: LD_ADDR_VAR 0 3
30694: PUSH
30695: LD_INT 0
30697: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30698: LD_VAR 0 1
30702: NOT
30703: PUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 266
30713: PUSH
30714: LD_INT 32
30716: PUSH
30717: LD_INT 33
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: IN
30724: NOT
30725: OR
30726: IFFALSE 30730
// exit ;
30728: GO 31839
// nat := GetNation ( tower ) ;
30730: LD_ADDR_VAR 0 12
30734: PUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: CALL_OW 248
30744: ST_TO_ADDR
// side := GetSide ( tower ) ;
30745: LD_ADDR_VAR 0 16
30749: PUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 255
30759: ST_TO_ADDR
// x := GetX ( tower ) ;
30760: LD_ADDR_VAR 0 10
30764: PUSH
30765: LD_VAR 0 1
30769: PPUSH
30770: CALL_OW 250
30774: ST_TO_ADDR
// y := GetY ( tower ) ;
30775: LD_ADDR_VAR 0 11
30779: PUSH
30780: LD_VAR 0 1
30784: PPUSH
30785: CALL_OW 251
30789: ST_TO_ADDR
// if not x or not y then
30790: LD_VAR 0 10
30794: NOT
30795: PUSH
30796: LD_VAR 0 11
30800: NOT
30801: OR
30802: IFFALSE 30806
// exit ;
30804: GO 31839
// weapon := 0 ;
30806: LD_ADDR_VAR 0 18
30810: PUSH
30811: LD_INT 0
30813: ST_TO_ADDR
// fac_list := [ ] ;
30814: LD_ADDR_VAR 0 17
30818: PUSH
30819: EMPTY
30820: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30821: LD_ADDR_VAR 0 6
30825: PUSH
30826: LD_VAR 0 1
30830: PPUSH
30831: CALL_OW 274
30835: PPUSH
30836: LD_VAR 0 2
30840: PPUSH
30841: LD_INT 0
30843: PPUSH
30844: CALL 28410 0 3
30848: PPUSH
30849: LD_INT 30
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PPUSH
30859: CALL_OW 72
30863: ST_TO_ADDR
// if not factories then
30864: LD_VAR 0 6
30868: NOT
30869: IFFALSE 30873
// exit ;
30871: GO 31839
// for i in factories do
30873: LD_ADDR_VAR 0 8
30877: PUSH
30878: LD_VAR 0 6
30882: PUSH
30883: FOR_IN
30884: IFFALSE 30909
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30886: LD_ADDR_VAR 0 17
30890: PUSH
30891: LD_VAR 0 17
30895: PUSH
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 478
30905: UNION
30906: ST_TO_ADDR
30907: GO 30883
30909: POP
30910: POP
// if not fac_list then
30911: LD_VAR 0 17
30915: NOT
30916: IFFALSE 30920
// exit ;
30918: GO 31839
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30920: LD_ADDR_VAR 0 5
30924: PUSH
30925: LD_INT 4
30927: PUSH
30928: LD_INT 5
30930: PUSH
30931: LD_INT 9
30933: PUSH
30934: LD_INT 10
30936: PUSH
30937: LD_INT 6
30939: PUSH
30940: LD_INT 7
30942: PUSH
30943: LD_INT 11
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 27
30957: PUSH
30958: LD_INT 28
30960: PUSH
30961: LD_INT 26
30963: PUSH
30964: LD_INT 30
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 43
30975: PUSH
30976: LD_INT 44
30978: PUSH
30979: LD_INT 46
30981: PUSH
30982: LD_INT 45
30984: PUSH
30985: LD_INT 47
30987: PUSH
30988: LD_INT 49
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: LIST
31003: PUSH
31004: LD_VAR 0 12
31008: ARRAY
31009: ST_TO_ADDR
// list := list isect fac_list ;
31010: LD_ADDR_VAR 0 5
31014: PUSH
31015: LD_VAR 0 5
31019: PUSH
31020: LD_VAR 0 17
31024: ISECT
31025: ST_TO_ADDR
// if not list then
31026: LD_VAR 0 5
31030: NOT
31031: IFFALSE 31035
// exit ;
31033: GO 31839
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31035: LD_VAR 0 12
31039: PUSH
31040: LD_INT 3
31042: EQUAL
31043: PUSH
31044: LD_INT 49
31046: PUSH
31047: LD_VAR 0 5
31051: IN
31052: AND
31053: PUSH
31054: LD_INT 31
31056: PPUSH
31057: LD_VAR 0 16
31061: PPUSH
31062: CALL_OW 321
31066: PUSH
31067: LD_INT 2
31069: EQUAL
31070: AND
31071: IFFALSE 31131
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31073: LD_INT 22
31075: PUSH
31076: LD_VAR 0 16
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 35
31087: PUSH
31088: LD_INT 49
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 91
31097: PUSH
31098: LD_VAR 0 1
31102: PUSH
31103: LD_INT 10
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: PPUSH
31116: CALL_OW 69
31120: NOT
31121: IFFALSE 31131
// weapon := ru_time_lapser ;
31123: LD_ADDR_VAR 0 18
31127: PUSH
31128: LD_INT 49
31130: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31131: LD_VAR 0 12
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: IN
31146: PUSH
31147: LD_INT 11
31149: PUSH
31150: LD_VAR 0 5
31154: IN
31155: PUSH
31156: LD_INT 30
31158: PUSH
31159: LD_VAR 0 5
31163: IN
31164: OR
31165: AND
31166: PUSH
31167: LD_INT 6
31169: PPUSH
31170: LD_VAR 0 16
31174: PPUSH
31175: CALL_OW 321
31179: PUSH
31180: LD_INT 2
31182: EQUAL
31183: AND
31184: IFFALSE 31349
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31186: LD_INT 22
31188: PUSH
31189: LD_VAR 0 16
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: LD_INT 35
31203: PUSH
31204: LD_INT 11
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 35
31213: PUSH
31214: LD_INT 30
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 91
31228: PUSH
31229: LD_VAR 0 1
31233: PUSH
31234: LD_INT 18
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: PPUSH
31247: CALL_OW 69
31251: NOT
31252: PUSH
31253: LD_INT 22
31255: PUSH
31256: LD_VAR 0 16
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: LD_INT 30
31270: PUSH
31271: LD_INT 32
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 30
31280: PUSH
31281: LD_INT 33
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: LIST
31292: PUSH
31293: LD_INT 91
31295: PUSH
31296: LD_VAR 0 1
31300: PUSH
31301: LD_INT 12
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: LIST
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: LIST
31313: PUSH
31314: EMPTY
31315: LIST
31316: PPUSH
31317: CALL_OW 69
31321: PUSH
31322: LD_INT 2
31324: GREATER
31325: AND
31326: IFFALSE 31349
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31328: LD_ADDR_VAR 0 18
31332: PUSH
31333: LD_INT 11
31335: PUSH
31336: LD_INT 30
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_VAR 0 12
31347: ARRAY
31348: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31349: LD_VAR 0 18
31353: NOT
31354: PUSH
31355: LD_INT 40
31357: PPUSH
31358: LD_VAR 0 16
31362: PPUSH
31363: CALL_OW 321
31367: PUSH
31368: LD_INT 2
31370: EQUAL
31371: AND
31372: PUSH
31373: LD_INT 7
31375: PUSH
31376: LD_VAR 0 5
31380: IN
31381: PUSH
31382: LD_INT 28
31384: PUSH
31385: LD_VAR 0 5
31389: IN
31390: OR
31391: PUSH
31392: LD_INT 45
31394: PUSH
31395: LD_VAR 0 5
31399: IN
31400: OR
31401: AND
31402: IFFALSE 31656
// begin hex := GetHexInfo ( x , y ) ;
31404: LD_ADDR_VAR 0 4
31408: PUSH
31409: LD_VAR 0 10
31413: PPUSH
31414: LD_VAR 0 11
31418: PPUSH
31419: CALL_OW 546
31423: ST_TO_ADDR
// if hex [ 1 ] then
31424: LD_VAR 0 4
31428: PUSH
31429: LD_INT 1
31431: ARRAY
31432: IFFALSE 31436
// exit ;
31434: GO 31839
// height := hex [ 2 ] ;
31436: LD_ADDR_VAR 0 15
31440: PUSH
31441: LD_VAR 0 4
31445: PUSH
31446: LD_INT 2
31448: ARRAY
31449: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31450: LD_ADDR_VAR 0 14
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 5
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: ST_TO_ADDR
// for i in tmp do
31473: LD_ADDR_VAR 0 8
31477: PUSH
31478: LD_VAR 0 14
31482: PUSH
31483: FOR_IN
31484: IFFALSE 31654
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31486: LD_ADDR_VAR 0 9
31490: PUSH
31491: LD_VAR 0 10
31495: PPUSH
31496: LD_VAR 0 8
31500: PPUSH
31501: LD_INT 5
31503: PPUSH
31504: CALL_OW 272
31508: PUSH
31509: LD_VAR 0 11
31513: PPUSH
31514: LD_VAR 0 8
31518: PPUSH
31519: LD_INT 5
31521: PPUSH
31522: CALL_OW 273
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31531: LD_VAR 0 9
31535: PUSH
31536: LD_INT 1
31538: ARRAY
31539: PPUSH
31540: LD_VAR 0 9
31544: PUSH
31545: LD_INT 2
31547: ARRAY
31548: PPUSH
31549: CALL_OW 488
31553: IFFALSE 31652
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31555: LD_ADDR_VAR 0 4
31559: PUSH
31560: LD_VAR 0 9
31564: PUSH
31565: LD_INT 1
31567: ARRAY
31568: PPUSH
31569: LD_VAR 0 9
31573: PUSH
31574: LD_INT 2
31576: ARRAY
31577: PPUSH
31578: CALL_OW 546
31582: ST_TO_ADDR
// if hex [ 1 ] then
31583: LD_VAR 0 4
31587: PUSH
31588: LD_INT 1
31590: ARRAY
31591: IFFALSE 31595
// continue ;
31593: GO 31483
// h := hex [ 2 ] ;
31595: LD_ADDR_VAR 0 13
31599: PUSH
31600: LD_VAR 0 4
31604: PUSH
31605: LD_INT 2
31607: ARRAY
31608: ST_TO_ADDR
// if h + 7 < height then
31609: LD_VAR 0 13
31613: PUSH
31614: LD_INT 7
31616: PLUS
31617: PUSH
31618: LD_VAR 0 15
31622: LESS
31623: IFFALSE 31652
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31625: LD_ADDR_VAR 0 18
31629: PUSH
31630: LD_INT 7
31632: PUSH
31633: LD_INT 28
31635: PUSH
31636: LD_INT 45
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: PUSH
31644: LD_VAR 0 12
31648: ARRAY
31649: ST_TO_ADDR
// break ;
31650: GO 31654
// end ; end ; end ;
31652: GO 31483
31654: POP
31655: POP
// end ; if not weapon then
31656: LD_VAR 0 18
31660: NOT
31661: IFFALSE 31721
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31663: LD_ADDR_VAR 0 5
31667: PUSH
31668: LD_VAR 0 5
31672: PUSH
31673: LD_INT 11
31675: PUSH
31676: LD_INT 30
31678: PUSH
31679: LD_INT 49
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: DIFF
31687: ST_TO_ADDR
// if not list then
31688: LD_VAR 0 5
31692: NOT
31693: IFFALSE 31697
// exit ;
31695: GO 31839
// weapon := list [ rand ( 1 , list ) ] ;
31697: LD_ADDR_VAR 0 18
31701: PUSH
31702: LD_VAR 0 5
31706: PUSH
31707: LD_INT 1
31709: PPUSH
31710: LD_VAR 0 5
31714: PPUSH
31715: CALL_OW 12
31719: ARRAY
31720: ST_TO_ADDR
// end ; if weapon then
31721: LD_VAR 0 18
31725: IFFALSE 31839
// begin tmp := CostOfWeapon ( weapon ) ;
31727: LD_ADDR_VAR 0 14
31731: PUSH
31732: LD_VAR 0 18
31736: PPUSH
31737: CALL_OW 451
31741: ST_TO_ADDR
// j := GetBase ( tower ) ;
31742: LD_ADDR_VAR 0 9
31746: PUSH
31747: LD_VAR 0 1
31751: PPUSH
31752: CALL_OW 274
31756: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31757: LD_VAR 0 9
31761: PPUSH
31762: LD_INT 1
31764: PPUSH
31765: CALL_OW 275
31769: PUSH
31770: LD_VAR 0 14
31774: PUSH
31775: LD_INT 1
31777: ARRAY
31778: GREATEREQUAL
31779: PUSH
31780: LD_VAR 0 9
31784: PPUSH
31785: LD_INT 2
31787: PPUSH
31788: CALL_OW 275
31792: PUSH
31793: LD_VAR 0 14
31797: PUSH
31798: LD_INT 2
31800: ARRAY
31801: GREATEREQUAL
31802: AND
31803: PUSH
31804: LD_VAR 0 9
31808: PPUSH
31809: LD_INT 3
31811: PPUSH
31812: CALL_OW 275
31816: PUSH
31817: LD_VAR 0 14
31821: PUSH
31822: LD_INT 3
31824: ARRAY
31825: GREATEREQUAL
31826: AND
31827: IFFALSE 31839
// result := weapon ;
31829: LD_ADDR_VAR 0 3
31833: PUSH
31834: LD_VAR 0 18
31838: ST_TO_ADDR
// end ; end ;
31839: LD_VAR 0 3
31843: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31844: LD_INT 0
31846: PPUSH
31847: PPUSH
// result := true ;
31848: LD_ADDR_VAR 0 3
31852: PUSH
31853: LD_INT 1
31855: ST_TO_ADDR
// if array1 = array2 then
31856: LD_VAR 0 1
31860: PUSH
31861: LD_VAR 0 2
31865: EQUAL
31866: IFFALSE 31926
// begin for i = 1 to array1 do
31868: LD_ADDR_VAR 0 4
31872: PUSH
31873: DOUBLE
31874: LD_INT 1
31876: DEC
31877: ST_TO_ADDR
31878: LD_VAR 0 1
31882: PUSH
31883: FOR_TO
31884: IFFALSE 31922
// if array1 [ i ] <> array2 [ i ] then
31886: LD_VAR 0 1
31890: PUSH
31891: LD_VAR 0 4
31895: ARRAY
31896: PUSH
31897: LD_VAR 0 2
31901: PUSH
31902: LD_VAR 0 4
31906: ARRAY
31907: NONEQUAL
31908: IFFALSE 31920
// begin result := false ;
31910: LD_ADDR_VAR 0 3
31914: PUSH
31915: LD_INT 0
31917: ST_TO_ADDR
// break ;
31918: GO 31922
// end ;
31920: GO 31883
31922: POP
31923: POP
// end else
31924: GO 31934
// result := false ;
31926: LD_ADDR_VAR 0 3
31930: PUSH
31931: LD_INT 0
31933: ST_TO_ADDR
// end ;
31934: LD_VAR 0 3
31938: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31939: LD_INT 0
31941: PPUSH
31942: PPUSH
// if not array1 or not array2 then
31943: LD_VAR 0 1
31947: NOT
31948: PUSH
31949: LD_VAR 0 2
31953: NOT
31954: OR
31955: IFFALSE 31959
// exit ;
31957: GO 32023
// result := true ;
31959: LD_ADDR_VAR 0 3
31963: PUSH
31964: LD_INT 1
31966: ST_TO_ADDR
// for i = 1 to array1 do
31967: LD_ADDR_VAR 0 4
31971: PUSH
31972: DOUBLE
31973: LD_INT 1
31975: DEC
31976: ST_TO_ADDR
31977: LD_VAR 0 1
31981: PUSH
31982: FOR_TO
31983: IFFALSE 32021
// if array1 [ i ] <> array2 [ i ] then
31985: LD_VAR 0 1
31989: PUSH
31990: LD_VAR 0 4
31994: ARRAY
31995: PUSH
31996: LD_VAR 0 2
32000: PUSH
32001: LD_VAR 0 4
32005: ARRAY
32006: NONEQUAL
32007: IFFALSE 32019
// begin result := false ;
32009: LD_ADDR_VAR 0 3
32013: PUSH
32014: LD_INT 0
32016: ST_TO_ADDR
// break ;
32017: GO 32021
// end ;
32019: GO 31982
32021: POP
32022: POP
// end ;
32023: LD_VAR 0 3
32027: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32028: LD_INT 0
32030: PPUSH
32031: PPUSH
32032: PPUSH
// pom := GetBase ( fac ) ;
32033: LD_ADDR_VAR 0 5
32037: PUSH
32038: LD_VAR 0 1
32042: PPUSH
32043: CALL_OW 274
32047: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32048: LD_ADDR_VAR 0 4
32052: PUSH
32053: LD_VAR 0 2
32057: PUSH
32058: LD_INT 1
32060: ARRAY
32061: PPUSH
32062: LD_VAR 0 2
32066: PUSH
32067: LD_INT 2
32069: ARRAY
32070: PPUSH
32071: LD_VAR 0 2
32075: PUSH
32076: LD_INT 3
32078: ARRAY
32079: PPUSH
32080: LD_VAR 0 2
32084: PUSH
32085: LD_INT 4
32087: ARRAY
32088: PPUSH
32089: CALL_OW 449
32093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32094: LD_ADDR_VAR 0 3
32098: PUSH
32099: LD_VAR 0 5
32103: PPUSH
32104: LD_INT 1
32106: PPUSH
32107: CALL_OW 275
32111: PUSH
32112: LD_VAR 0 4
32116: PUSH
32117: LD_INT 1
32119: ARRAY
32120: GREATEREQUAL
32121: PUSH
32122: LD_VAR 0 5
32126: PPUSH
32127: LD_INT 2
32129: PPUSH
32130: CALL_OW 275
32134: PUSH
32135: LD_VAR 0 4
32139: PUSH
32140: LD_INT 2
32142: ARRAY
32143: GREATEREQUAL
32144: AND
32145: PUSH
32146: LD_VAR 0 5
32150: PPUSH
32151: LD_INT 3
32153: PPUSH
32154: CALL_OW 275
32158: PUSH
32159: LD_VAR 0 4
32163: PUSH
32164: LD_INT 3
32166: ARRAY
32167: GREATEREQUAL
32168: AND
32169: ST_TO_ADDR
// end ;
32170: LD_VAR 0 3
32174: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32175: LD_INT 0
32177: PPUSH
32178: PPUSH
32179: PPUSH
32180: PPUSH
// pom := GetBase ( building ) ;
32181: LD_ADDR_VAR 0 3
32185: PUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: CALL_OW 274
32195: ST_TO_ADDR
// if not pom then
32196: LD_VAR 0 3
32200: NOT
32201: IFFALSE 32205
// exit ;
32203: GO 32375
// btype := GetBType ( building ) ;
32205: LD_ADDR_VAR 0 5
32209: PUSH
32210: LD_VAR 0 1
32214: PPUSH
32215: CALL_OW 266
32219: ST_TO_ADDR
// if btype = b_armoury then
32220: LD_VAR 0 5
32224: PUSH
32225: LD_INT 4
32227: EQUAL
32228: IFFALSE 32238
// btype := b_barracks ;
32230: LD_ADDR_VAR 0 5
32234: PUSH
32235: LD_INT 5
32237: ST_TO_ADDR
// if btype = b_depot then
32238: LD_VAR 0 5
32242: PUSH
32243: LD_INT 0
32245: EQUAL
32246: IFFALSE 32256
// btype := b_warehouse ;
32248: LD_ADDR_VAR 0 5
32252: PUSH
32253: LD_INT 1
32255: ST_TO_ADDR
// if btype = b_workshop then
32256: LD_VAR 0 5
32260: PUSH
32261: LD_INT 2
32263: EQUAL
32264: IFFALSE 32274
// btype := b_factory ;
32266: LD_ADDR_VAR 0 5
32270: PUSH
32271: LD_INT 3
32273: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32274: LD_ADDR_VAR 0 4
32278: PUSH
32279: LD_VAR 0 5
32283: PPUSH
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 248
32293: PPUSH
32294: CALL_OW 450
32298: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32299: LD_ADDR_VAR 0 2
32303: PUSH
32304: LD_VAR 0 3
32308: PPUSH
32309: LD_INT 1
32311: PPUSH
32312: CALL_OW 275
32316: PUSH
32317: LD_VAR 0 4
32321: PUSH
32322: LD_INT 1
32324: ARRAY
32325: GREATEREQUAL
32326: PUSH
32327: LD_VAR 0 3
32331: PPUSH
32332: LD_INT 2
32334: PPUSH
32335: CALL_OW 275
32339: PUSH
32340: LD_VAR 0 4
32344: PUSH
32345: LD_INT 2
32347: ARRAY
32348: GREATEREQUAL
32349: AND
32350: PUSH
32351: LD_VAR 0 3
32355: PPUSH
32356: LD_INT 3
32358: PPUSH
32359: CALL_OW 275
32363: PUSH
32364: LD_VAR 0 4
32368: PUSH
32369: LD_INT 3
32371: ARRAY
32372: GREATEREQUAL
32373: AND
32374: ST_TO_ADDR
// end ;
32375: LD_VAR 0 2
32379: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32380: LD_INT 0
32382: PPUSH
32383: PPUSH
32384: PPUSH
// pom := GetBase ( building ) ;
32385: LD_ADDR_VAR 0 4
32389: PUSH
32390: LD_VAR 0 1
32394: PPUSH
32395: CALL_OW 274
32399: ST_TO_ADDR
// if not pom then
32400: LD_VAR 0 4
32404: NOT
32405: IFFALSE 32409
// exit ;
32407: GO 32510
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32409: LD_ADDR_VAR 0 5
32413: PUSH
32414: LD_VAR 0 2
32418: PPUSH
32419: LD_VAR 0 1
32423: PPUSH
32424: CALL_OW 248
32428: PPUSH
32429: CALL_OW 450
32433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32434: LD_ADDR_VAR 0 3
32438: PUSH
32439: LD_VAR 0 4
32443: PPUSH
32444: LD_INT 1
32446: PPUSH
32447: CALL_OW 275
32451: PUSH
32452: LD_VAR 0 5
32456: PUSH
32457: LD_INT 1
32459: ARRAY
32460: GREATEREQUAL
32461: PUSH
32462: LD_VAR 0 4
32466: PPUSH
32467: LD_INT 2
32469: PPUSH
32470: CALL_OW 275
32474: PUSH
32475: LD_VAR 0 5
32479: PUSH
32480: LD_INT 2
32482: ARRAY
32483: GREATEREQUAL
32484: AND
32485: PUSH
32486: LD_VAR 0 4
32490: PPUSH
32491: LD_INT 3
32493: PPUSH
32494: CALL_OW 275
32498: PUSH
32499: LD_VAR 0 5
32503: PUSH
32504: LD_INT 3
32506: ARRAY
32507: GREATEREQUAL
32508: AND
32509: ST_TO_ADDR
// end ;
32510: LD_VAR 0 3
32514: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
32519: PPUSH
32520: PPUSH
32521: PPUSH
32522: PPUSH
32523: PPUSH
32524: PPUSH
32525: PPUSH
32526: PPUSH
32527: PPUSH
// result := false ;
32528: LD_ADDR_VAR 0 8
32532: PUSH
32533: LD_INT 0
32535: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32536: LD_VAR 0 5
32540: NOT
32541: PUSH
32542: LD_VAR 0 1
32546: NOT
32547: OR
32548: PUSH
32549: LD_VAR 0 2
32553: NOT
32554: OR
32555: PUSH
32556: LD_VAR 0 3
32560: NOT
32561: OR
32562: IFFALSE 32566
// exit ;
32564: GO 33380
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32566: LD_ADDR_VAR 0 14
32570: PUSH
32571: LD_VAR 0 1
32575: PPUSH
32576: LD_VAR 0 2
32580: PPUSH
32581: LD_VAR 0 3
32585: PPUSH
32586: LD_VAR 0 4
32590: PPUSH
32591: LD_VAR 0 5
32595: PUSH
32596: LD_INT 1
32598: ARRAY
32599: PPUSH
32600: CALL_OW 248
32604: PPUSH
32605: LD_INT 0
32607: PPUSH
32608: CALL 34633 0 6
32612: ST_TO_ADDR
// if not hexes then
32613: LD_VAR 0 14
32617: NOT
32618: IFFALSE 32622
// exit ;
32620: GO 33380
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32622: LD_ADDR_VAR 0 17
32626: PUSH
32627: LD_VAR 0 5
32631: PPUSH
32632: LD_INT 22
32634: PUSH
32635: LD_VAR 0 13
32639: PPUSH
32640: CALL_OW 255
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: LD_INT 30
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 30
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PPUSH
32681: CALL_OW 72
32685: ST_TO_ADDR
// for i = 1 to hexes do
32686: LD_ADDR_VAR 0 9
32690: PUSH
32691: DOUBLE
32692: LD_INT 1
32694: DEC
32695: ST_TO_ADDR
32696: LD_VAR 0 14
32700: PUSH
32701: FOR_TO
32702: IFFALSE 33378
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32704: LD_ADDR_VAR 0 13
32708: PUSH
32709: LD_VAR 0 14
32713: PUSH
32714: LD_VAR 0 9
32718: ARRAY
32719: PUSH
32720: LD_INT 1
32722: ARRAY
32723: PPUSH
32724: LD_VAR 0 14
32728: PUSH
32729: LD_VAR 0 9
32733: ARRAY
32734: PUSH
32735: LD_INT 2
32737: ARRAY
32738: PPUSH
32739: CALL_OW 428
32743: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32744: LD_VAR 0 14
32748: PUSH
32749: LD_VAR 0 9
32753: ARRAY
32754: PUSH
32755: LD_INT 1
32757: ARRAY
32758: PPUSH
32759: LD_VAR 0 14
32763: PUSH
32764: LD_VAR 0 9
32768: ARRAY
32769: PUSH
32770: LD_INT 2
32772: ARRAY
32773: PPUSH
32774: CALL_OW 351
32778: PUSH
32779: LD_VAR 0 14
32783: PUSH
32784: LD_VAR 0 9
32788: ARRAY
32789: PUSH
32790: LD_INT 1
32792: ARRAY
32793: PPUSH
32794: LD_VAR 0 14
32798: PUSH
32799: LD_VAR 0 9
32803: ARRAY
32804: PUSH
32805: LD_INT 2
32807: ARRAY
32808: PPUSH
32809: CALL_OW 488
32813: NOT
32814: OR
32815: PUSH
32816: LD_VAR 0 13
32820: PPUSH
32821: CALL_OW 247
32825: PUSH
32826: LD_INT 3
32828: EQUAL
32829: OR
32830: IFFALSE 32836
// exit ;
32832: POP
32833: POP
32834: GO 33380
// if not tmp then
32836: LD_VAR 0 13
32840: NOT
32841: IFFALSE 32845
// continue ;
32843: GO 32701
// result := true ;
32845: LD_ADDR_VAR 0 8
32849: PUSH
32850: LD_INT 1
32852: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32853: LD_VAR 0 6
32857: PUSH
32858: LD_VAR 0 13
32862: PPUSH
32863: CALL_OW 247
32867: PUSH
32868: LD_INT 2
32870: EQUAL
32871: AND
32872: PUSH
32873: LD_VAR 0 13
32877: PPUSH
32878: CALL_OW 263
32882: PUSH
32883: LD_INT 1
32885: EQUAL
32886: AND
32887: IFFALSE 33051
// begin if IsDrivenBy ( tmp ) then
32889: LD_VAR 0 13
32893: PPUSH
32894: CALL_OW 311
32898: IFFALSE 32902
// continue ;
32900: GO 32701
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32902: LD_VAR 0 6
32906: PPUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 60
32912: PUSH
32913: EMPTY
32914: LIST
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: LD_INT 55
32925: PUSH
32926: EMPTY
32927: LIST
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PPUSH
32937: CALL_OW 72
32941: IFFALSE 33049
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32943: LD_ADDR_VAR 0 18
32947: PUSH
32948: LD_VAR 0 6
32952: PPUSH
32953: LD_INT 3
32955: PUSH
32956: LD_INT 60
32958: PUSH
32959: EMPTY
32960: LIST
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 3
32968: PUSH
32969: LD_INT 55
32971: PUSH
32972: EMPTY
32973: LIST
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PPUSH
32983: CALL_OW 72
32987: PUSH
32988: LD_INT 1
32990: ARRAY
32991: ST_TO_ADDR
// if IsInUnit ( driver ) then
32992: LD_VAR 0 18
32996: PPUSH
32997: CALL_OW 310
33001: IFFALSE 33012
// ComExit ( driver ) ;
33003: LD_VAR 0 18
33007: PPUSH
33008: CALL 58425 0 1
// AddComEnterUnit ( driver , tmp ) ;
33012: LD_VAR 0 18
33016: PPUSH
33017: LD_VAR 0 13
33021: PPUSH
33022: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33026: LD_VAR 0 18
33030: PPUSH
33031: LD_VAR 0 7
33035: PPUSH
33036: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33040: LD_VAR 0 18
33044: PPUSH
33045: CALL_OW 181
// end ; continue ;
33049: GO 32701
// end ; if not cleaners or not tmp in cleaners then
33051: LD_VAR 0 6
33055: NOT
33056: PUSH
33057: LD_VAR 0 13
33061: PUSH
33062: LD_VAR 0 6
33066: IN
33067: NOT
33068: OR
33069: IFFALSE 33376
// begin if dep then
33071: LD_VAR 0 17
33075: IFFALSE 33211
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33077: LD_ADDR_VAR 0 16
33081: PUSH
33082: LD_VAR 0 17
33086: PUSH
33087: LD_INT 1
33089: ARRAY
33090: PPUSH
33091: CALL_OW 250
33095: PPUSH
33096: LD_VAR 0 17
33100: PUSH
33101: LD_INT 1
33103: ARRAY
33104: PPUSH
33105: CALL_OW 254
33109: PPUSH
33110: LD_INT 5
33112: PPUSH
33113: CALL_OW 272
33117: PUSH
33118: LD_VAR 0 17
33122: PUSH
33123: LD_INT 1
33125: ARRAY
33126: PPUSH
33127: CALL_OW 251
33131: PPUSH
33132: LD_VAR 0 17
33136: PUSH
33137: LD_INT 1
33139: ARRAY
33140: PPUSH
33141: CALL_OW 254
33145: PPUSH
33146: LD_INT 5
33148: PPUSH
33149: CALL_OW 273
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33158: LD_VAR 0 16
33162: PUSH
33163: LD_INT 1
33165: ARRAY
33166: PPUSH
33167: LD_VAR 0 16
33171: PUSH
33172: LD_INT 2
33174: ARRAY
33175: PPUSH
33176: CALL_OW 488
33180: IFFALSE 33211
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33182: LD_VAR 0 13
33186: PPUSH
33187: LD_VAR 0 16
33191: PUSH
33192: LD_INT 1
33194: ARRAY
33195: PPUSH
33196: LD_VAR 0 16
33200: PUSH
33201: LD_INT 2
33203: ARRAY
33204: PPUSH
33205: CALL_OW 111
// continue ;
33209: GO 32701
// end ; end ; r := GetDir ( tmp ) ;
33211: LD_ADDR_VAR 0 15
33215: PUSH
33216: LD_VAR 0 13
33220: PPUSH
33221: CALL_OW 254
33225: ST_TO_ADDR
// if r = 5 then
33226: LD_VAR 0 15
33230: PUSH
33231: LD_INT 5
33233: EQUAL
33234: IFFALSE 33244
// r := 0 ;
33236: LD_ADDR_VAR 0 15
33240: PUSH
33241: LD_INT 0
33243: ST_TO_ADDR
// for j = r to 5 do
33244: LD_ADDR_VAR 0 10
33248: PUSH
33249: DOUBLE
33250: LD_VAR 0 15
33254: DEC
33255: ST_TO_ADDR
33256: LD_INT 5
33258: PUSH
33259: FOR_TO
33260: IFFALSE 33374
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33262: LD_ADDR_VAR 0 11
33266: PUSH
33267: LD_VAR 0 13
33271: PPUSH
33272: CALL_OW 250
33276: PPUSH
33277: LD_VAR 0 10
33281: PPUSH
33282: LD_INT 2
33284: PPUSH
33285: CALL_OW 272
33289: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33290: LD_ADDR_VAR 0 12
33294: PUSH
33295: LD_VAR 0 13
33299: PPUSH
33300: CALL_OW 251
33304: PPUSH
33305: LD_VAR 0 10
33309: PPUSH
33310: LD_INT 2
33312: PPUSH
33313: CALL_OW 273
33317: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33318: LD_VAR 0 11
33322: PPUSH
33323: LD_VAR 0 12
33327: PPUSH
33328: CALL_OW 488
33332: PUSH
33333: LD_VAR 0 11
33337: PPUSH
33338: LD_VAR 0 12
33342: PPUSH
33343: CALL_OW 428
33347: NOT
33348: AND
33349: IFFALSE 33372
// begin ComMoveXY ( tmp , _x , _y ) ;
33351: LD_VAR 0 13
33355: PPUSH
33356: LD_VAR 0 11
33360: PPUSH
33361: LD_VAR 0 12
33365: PPUSH
33366: CALL_OW 111
// break ;
33370: GO 33374
// end ; end ;
33372: GO 33259
33374: POP
33375: POP
// end ; end ;
33376: GO 32701
33378: POP
33379: POP
// end ;
33380: LD_VAR 0 8
33384: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33385: LD_INT 0
33387: PPUSH
// result := true ;
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_INT 1
33395: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33396: LD_VAR 0 2
33400: PUSH
33401: LD_INT 24
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33415
33407: LD_INT 33
33409: DOUBLE
33410: EQUAL
33411: IFTRUE 33415
33413: GO 33440
33415: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33416: LD_ADDR_VAR 0 3
33420: PUSH
33421: LD_INT 32
33423: PPUSH
33424: LD_VAR 0 1
33428: PPUSH
33429: CALL_OW 321
33433: PUSH
33434: LD_INT 2
33436: EQUAL
33437: ST_TO_ADDR
33438: GO 33756
33440: LD_INT 20
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33473
33448: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33449: LD_ADDR_VAR 0 3
33453: PUSH
33454: LD_INT 6
33456: PPUSH
33457: LD_VAR 0 1
33461: PPUSH
33462: CALL_OW 321
33466: PUSH
33467: LD_INT 2
33469: EQUAL
33470: ST_TO_ADDR
33471: GO 33756
33473: LD_INT 22
33475: DOUBLE
33476: EQUAL
33477: IFTRUE 33487
33479: LD_INT 36
33481: DOUBLE
33482: EQUAL
33483: IFTRUE 33487
33485: GO 33512
33487: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33488: LD_ADDR_VAR 0 3
33492: PUSH
33493: LD_INT 15
33495: PPUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL_OW 321
33505: PUSH
33506: LD_INT 2
33508: EQUAL
33509: ST_TO_ADDR
33510: GO 33756
33512: LD_INT 30
33514: DOUBLE
33515: EQUAL
33516: IFTRUE 33520
33518: GO 33545
33520: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33521: LD_ADDR_VAR 0 3
33525: PUSH
33526: LD_INT 20
33528: PPUSH
33529: LD_VAR 0 1
33533: PPUSH
33534: CALL_OW 321
33538: PUSH
33539: LD_INT 2
33541: EQUAL
33542: ST_TO_ADDR
33543: GO 33756
33545: LD_INT 28
33547: DOUBLE
33548: EQUAL
33549: IFTRUE 33559
33551: LD_INT 21
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33559
33557: GO 33584
33559: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_INT 21
33567: PPUSH
33568: LD_VAR 0 1
33572: PPUSH
33573: CALL_OW 321
33577: PUSH
33578: LD_INT 2
33580: EQUAL
33581: ST_TO_ADDR
33582: GO 33756
33584: LD_INT 16
33586: DOUBLE
33587: EQUAL
33588: IFTRUE 33592
33590: GO 33617
33592: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33593: LD_ADDR_VAR 0 3
33597: PUSH
33598: LD_INT 84
33600: PPUSH
33601: LD_VAR 0 1
33605: PPUSH
33606: CALL_OW 321
33610: PUSH
33611: LD_INT 2
33613: EQUAL
33614: ST_TO_ADDR
33615: GO 33756
33617: LD_INT 19
33619: DOUBLE
33620: EQUAL
33621: IFTRUE 33631
33623: LD_INT 23
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33631
33629: GO 33656
33631: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33632: LD_ADDR_VAR 0 3
33636: PUSH
33637: LD_INT 83
33639: PPUSH
33640: LD_VAR 0 1
33644: PPUSH
33645: CALL_OW 321
33649: PUSH
33650: LD_INT 2
33652: EQUAL
33653: ST_TO_ADDR
33654: GO 33756
33656: LD_INT 17
33658: DOUBLE
33659: EQUAL
33660: IFTRUE 33664
33662: GO 33689
33664: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33665: LD_ADDR_VAR 0 3
33669: PUSH
33670: LD_INT 39
33672: PPUSH
33673: LD_VAR 0 1
33677: PPUSH
33678: CALL_OW 321
33682: PUSH
33683: LD_INT 2
33685: EQUAL
33686: ST_TO_ADDR
33687: GO 33756
33689: LD_INT 18
33691: DOUBLE
33692: EQUAL
33693: IFTRUE 33697
33695: GO 33722
33697: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33698: LD_ADDR_VAR 0 3
33702: PUSH
33703: LD_INT 40
33705: PPUSH
33706: LD_VAR 0 1
33710: PPUSH
33711: CALL_OW 321
33715: PUSH
33716: LD_INT 2
33718: EQUAL
33719: ST_TO_ADDR
33720: GO 33756
33722: LD_INT 27
33724: DOUBLE
33725: EQUAL
33726: IFTRUE 33730
33728: GO 33755
33730: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33731: LD_ADDR_VAR 0 3
33735: PUSH
33736: LD_INT 35
33738: PPUSH
33739: LD_VAR 0 1
33743: PPUSH
33744: CALL_OW 321
33748: PUSH
33749: LD_INT 2
33751: EQUAL
33752: ST_TO_ADDR
33753: GO 33756
33755: POP
// end ;
33756: LD_VAR 0 3
33760: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33761: LD_INT 0
33763: PPUSH
33764: PPUSH
33765: PPUSH
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
33771: PPUSH
33772: PPUSH
33773: PPUSH
// result := false ;
33774: LD_ADDR_VAR 0 6
33778: PUSH
33779: LD_INT 0
33781: ST_TO_ADDR
// if btype = b_depot then
33782: LD_VAR 0 2
33786: PUSH
33787: LD_INT 0
33789: EQUAL
33790: IFFALSE 33802
// begin result := true ;
33792: LD_ADDR_VAR 0 6
33796: PUSH
33797: LD_INT 1
33799: ST_TO_ADDR
// exit ;
33800: GO 34628
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33802: LD_VAR 0 1
33806: NOT
33807: PUSH
33808: LD_VAR 0 1
33812: PPUSH
33813: CALL_OW 266
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: IN
33828: NOT
33829: OR
33830: PUSH
33831: LD_VAR 0 2
33835: NOT
33836: OR
33837: PUSH
33838: LD_VAR 0 5
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: LD_INT 3
33854: PUSH
33855: LD_INT 4
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: IN
33869: NOT
33870: OR
33871: PUSH
33872: LD_VAR 0 3
33876: PPUSH
33877: LD_VAR 0 4
33881: PPUSH
33882: CALL_OW 488
33886: NOT
33887: OR
33888: IFFALSE 33892
// exit ;
33890: GO 34628
// side := GetSide ( depot ) ;
33892: LD_ADDR_VAR 0 9
33896: PUSH
33897: LD_VAR 0 1
33901: PPUSH
33902: CALL_OW 255
33906: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33907: LD_VAR 0 9
33911: PPUSH
33912: LD_VAR 0 2
33916: PPUSH
33917: CALL 33385 0 2
33921: NOT
33922: IFFALSE 33926
// exit ;
33924: GO 34628
// pom := GetBase ( depot ) ;
33926: LD_ADDR_VAR 0 10
33930: PUSH
33931: LD_VAR 0 1
33935: PPUSH
33936: CALL_OW 274
33940: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33941: LD_ADDR_VAR 0 11
33945: PUSH
33946: LD_VAR 0 2
33950: PPUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: CALL_OW 248
33960: PPUSH
33961: CALL_OW 450
33965: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33966: LD_VAR 0 10
33970: PPUSH
33971: LD_INT 1
33973: PPUSH
33974: CALL_OW 275
33978: PUSH
33979: LD_VAR 0 11
33983: PUSH
33984: LD_INT 1
33986: ARRAY
33987: GREATEREQUAL
33988: PUSH
33989: LD_VAR 0 10
33993: PPUSH
33994: LD_INT 2
33996: PPUSH
33997: CALL_OW 275
34001: PUSH
34002: LD_VAR 0 11
34006: PUSH
34007: LD_INT 2
34009: ARRAY
34010: GREATEREQUAL
34011: AND
34012: PUSH
34013: LD_VAR 0 10
34017: PPUSH
34018: LD_INT 3
34020: PPUSH
34021: CALL_OW 275
34025: PUSH
34026: LD_VAR 0 11
34030: PUSH
34031: LD_INT 3
34033: ARRAY
34034: GREATEREQUAL
34035: AND
34036: NOT
34037: IFFALSE 34041
// exit ;
34039: GO 34628
// if GetBType ( depot ) = b_depot then
34041: LD_VAR 0 1
34045: PPUSH
34046: CALL_OW 266
34050: PUSH
34051: LD_INT 0
34053: EQUAL
34054: IFFALSE 34066
// dist := 28 else
34056: LD_ADDR_VAR 0 14
34060: PUSH
34061: LD_INT 28
34063: ST_TO_ADDR
34064: GO 34074
// dist := 36 ;
34066: LD_ADDR_VAR 0 14
34070: PUSH
34071: LD_INT 36
34073: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34074: LD_VAR 0 1
34078: PPUSH
34079: LD_VAR 0 3
34083: PPUSH
34084: LD_VAR 0 4
34088: PPUSH
34089: CALL_OW 297
34093: PUSH
34094: LD_VAR 0 14
34098: GREATER
34099: IFFALSE 34103
// exit ;
34101: GO 34628
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34103: LD_ADDR_VAR 0 12
34107: PUSH
34108: LD_VAR 0 2
34112: PPUSH
34113: LD_VAR 0 3
34117: PPUSH
34118: LD_VAR 0 4
34122: PPUSH
34123: LD_VAR 0 5
34127: PPUSH
34128: LD_VAR 0 1
34132: PPUSH
34133: CALL_OW 248
34137: PPUSH
34138: LD_INT 0
34140: PPUSH
34141: CALL 34633 0 6
34145: ST_TO_ADDR
// if not hexes then
34146: LD_VAR 0 12
34150: NOT
34151: IFFALSE 34155
// exit ;
34153: GO 34628
// hex := GetHexInfo ( x , y ) ;
34155: LD_ADDR_VAR 0 15
34159: PUSH
34160: LD_VAR 0 3
34164: PPUSH
34165: LD_VAR 0 4
34169: PPUSH
34170: CALL_OW 546
34174: ST_TO_ADDR
// if hex [ 1 ] then
34175: LD_VAR 0 15
34179: PUSH
34180: LD_INT 1
34182: ARRAY
34183: IFFALSE 34187
// exit ;
34185: GO 34628
// height := hex [ 2 ] ;
34187: LD_ADDR_VAR 0 13
34191: PUSH
34192: LD_VAR 0 15
34196: PUSH
34197: LD_INT 2
34199: ARRAY
34200: ST_TO_ADDR
// for i = 1 to hexes do
34201: LD_ADDR_VAR 0 7
34205: PUSH
34206: DOUBLE
34207: LD_INT 1
34209: DEC
34210: ST_TO_ADDR
34211: LD_VAR 0 12
34215: PUSH
34216: FOR_TO
34217: IFFALSE 34547
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34219: LD_VAR 0 12
34223: PUSH
34224: LD_VAR 0 7
34228: ARRAY
34229: PUSH
34230: LD_INT 1
34232: ARRAY
34233: PPUSH
34234: LD_VAR 0 12
34238: PUSH
34239: LD_VAR 0 7
34243: ARRAY
34244: PUSH
34245: LD_INT 2
34247: ARRAY
34248: PPUSH
34249: CALL_OW 488
34253: NOT
34254: PUSH
34255: LD_VAR 0 12
34259: PUSH
34260: LD_VAR 0 7
34264: ARRAY
34265: PUSH
34266: LD_INT 1
34268: ARRAY
34269: PPUSH
34270: LD_VAR 0 12
34274: PUSH
34275: LD_VAR 0 7
34279: ARRAY
34280: PUSH
34281: LD_INT 2
34283: ARRAY
34284: PPUSH
34285: CALL_OW 428
34289: PUSH
34290: LD_INT 0
34292: GREATER
34293: OR
34294: PUSH
34295: LD_VAR 0 12
34299: PUSH
34300: LD_VAR 0 7
34304: ARRAY
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: PPUSH
34310: LD_VAR 0 12
34314: PUSH
34315: LD_VAR 0 7
34319: ARRAY
34320: PUSH
34321: LD_INT 2
34323: ARRAY
34324: PPUSH
34325: CALL_OW 351
34329: OR
34330: IFFALSE 34336
// exit ;
34332: POP
34333: POP
34334: GO 34628
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34336: LD_ADDR_VAR 0 8
34340: PUSH
34341: LD_VAR 0 12
34345: PUSH
34346: LD_VAR 0 7
34350: ARRAY
34351: PUSH
34352: LD_INT 1
34354: ARRAY
34355: PPUSH
34356: LD_VAR 0 12
34360: PUSH
34361: LD_VAR 0 7
34365: ARRAY
34366: PUSH
34367: LD_INT 2
34369: ARRAY
34370: PPUSH
34371: CALL_OW 546
34375: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34376: LD_VAR 0 8
34380: PUSH
34381: LD_INT 1
34383: ARRAY
34384: PUSH
34385: LD_VAR 0 8
34389: PUSH
34390: LD_INT 2
34392: ARRAY
34393: PUSH
34394: LD_VAR 0 13
34398: PUSH
34399: LD_INT 2
34401: PLUS
34402: GREATER
34403: OR
34404: PUSH
34405: LD_VAR 0 8
34409: PUSH
34410: LD_INT 2
34412: ARRAY
34413: PUSH
34414: LD_VAR 0 13
34418: PUSH
34419: LD_INT 2
34421: MINUS
34422: LESS
34423: OR
34424: PUSH
34425: LD_VAR 0 8
34429: PUSH
34430: LD_INT 3
34432: ARRAY
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 8
34439: PUSH
34440: LD_INT 9
34442: PUSH
34443: LD_INT 10
34445: PUSH
34446: LD_INT 11
34448: PUSH
34449: LD_INT 12
34451: PUSH
34452: LD_INT 13
34454: PUSH
34455: LD_INT 16
34457: PUSH
34458: LD_INT 17
34460: PUSH
34461: LD_INT 18
34463: PUSH
34464: LD_INT 19
34466: PUSH
34467: LD_INT 20
34469: PUSH
34470: LD_INT 21
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: IN
34488: NOT
34489: OR
34490: PUSH
34491: LD_VAR 0 8
34495: PUSH
34496: LD_INT 5
34498: ARRAY
34499: NOT
34500: OR
34501: PUSH
34502: LD_VAR 0 8
34506: PUSH
34507: LD_INT 6
34509: ARRAY
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: LD_INT 7
34519: PUSH
34520: LD_INT 9
34522: PUSH
34523: LD_INT 10
34525: PUSH
34526: LD_INT 11
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: IN
34537: NOT
34538: OR
34539: IFFALSE 34545
// exit ;
34541: POP
34542: POP
34543: GO 34628
// end ;
34545: GO 34216
34547: POP
34548: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34549: LD_VAR 0 9
34553: PPUSH
34554: LD_VAR 0 3
34558: PPUSH
34559: LD_VAR 0 4
34563: PPUSH
34564: LD_INT 20
34566: PPUSH
34567: CALL 26551 0 4
34571: PUSH
34572: LD_INT 4
34574: ARRAY
34575: IFFALSE 34579
// exit ;
34577: GO 34628
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34579: LD_VAR 0 2
34583: PUSH
34584: LD_INT 29
34586: PUSH
34587: LD_INT 30
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: IN
34594: PUSH
34595: LD_VAR 0 3
34599: PPUSH
34600: LD_VAR 0 4
34604: PPUSH
34605: LD_VAR 0 9
34609: PPUSH
34610: CALL_OW 440
34614: NOT
34615: AND
34616: IFFALSE 34620
// exit ;
34618: GO 34628
// result := true ;
34620: LD_ADDR_VAR 0 6
34624: PUSH
34625: LD_INT 1
34627: ST_TO_ADDR
// end ;
34628: LD_VAR 0 6
34632: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34633: LD_INT 0
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
34647: PPUSH
34648: PPUSH
34649: PPUSH
34650: PPUSH
34651: PPUSH
34652: PPUSH
34653: PPUSH
34654: PPUSH
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
34664: PPUSH
34665: PPUSH
34666: PPUSH
34667: PPUSH
34668: PPUSH
34669: PPUSH
34670: PPUSH
34671: PPUSH
34672: PPUSH
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
34683: PPUSH
34684: PPUSH
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
34689: PPUSH
34690: PPUSH
34691: PPUSH
34692: PPUSH
// result = [ ] ;
34693: LD_ADDR_VAR 0 7
34697: PUSH
34698: EMPTY
34699: ST_TO_ADDR
// temp_list = [ ] ;
34700: LD_ADDR_VAR 0 9
34704: PUSH
34705: EMPTY
34706: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34707: LD_VAR 0 4
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: LD_INT 3
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: LD_INT 5
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: IN
34738: NOT
34739: PUSH
34740: LD_VAR 0 1
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: IN
34755: PUSH
34756: LD_VAR 0 5
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: IN
34775: NOT
34776: AND
34777: OR
34778: IFFALSE 34782
// exit ;
34780: GO 53173
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34782: LD_VAR 0 1
34786: PUSH
34787: LD_INT 6
34789: PUSH
34790: LD_INT 7
34792: PUSH
34793: LD_INT 8
34795: PUSH
34796: LD_INT 13
34798: PUSH
34799: LD_INT 12
34801: PUSH
34802: LD_INT 15
34804: PUSH
34805: LD_INT 11
34807: PUSH
34808: LD_INT 14
34810: PUSH
34811: LD_INT 10
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: IN
34825: IFFALSE 34835
// btype = b_lab ;
34827: LD_ADDR_VAR 0 1
34831: PUSH
34832: LD_INT 6
34834: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34835: LD_VAR 0 6
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: LIST
34853: IN
34854: NOT
34855: PUSH
34856: LD_VAR 0 1
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: LD_INT 3
34872: PUSH
34873: LD_INT 6
34875: PUSH
34876: LD_INT 36
34878: PUSH
34879: LD_INT 4
34881: PUSH
34882: LD_INT 5
34884: PUSH
34885: LD_INT 31
34887: PUSH
34888: LD_INT 32
34890: PUSH
34891: LD_INT 33
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: IN
34907: NOT
34908: PUSH
34909: LD_VAR 0 6
34913: PUSH
34914: LD_INT 1
34916: EQUAL
34917: AND
34918: OR
34919: PUSH
34920: LD_VAR 0 1
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: IN
34935: NOT
34936: PUSH
34937: LD_VAR 0 6
34941: PUSH
34942: LD_INT 2
34944: EQUAL
34945: AND
34946: OR
34947: IFFALSE 34957
// mode = 0 ;
34949: LD_ADDR_VAR 0 6
34953: PUSH
34954: LD_INT 0
34956: ST_TO_ADDR
// case mode of 0 :
34957: LD_VAR 0 6
34961: PUSH
34962: LD_INT 0
34964: DOUBLE
34965: EQUAL
34966: IFTRUE 34970
34968: GO 46423
34970: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34971: LD_ADDR_VAR 0 11
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 1
35040: NEG
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: LD_INT 2
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 2
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 3
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 3
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35164: LD_ADDR_VAR 0 12
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: NEG
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 2
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: NEG
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 2
35298: NEG
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: NEG
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: NEG
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 3
35332: NEG
35333: PUSH
35334: LD_INT 1
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35360: LD_ADDR_VAR 0 13
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: NEG
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 2
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: LD_INT 2
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: NEG
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: LD_INT 2
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: NEG
35508: PUSH
35509: LD_INT 3
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 3
35519: NEG
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 3
35531: NEG
35532: PUSH
35533: LD_INT 3
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35559: LD_ADDR_VAR 0 14
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 2
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 2
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: LD_INT 2
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: LD_INT 3
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: LD_INT 3
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35755: LD_ADDR_VAR 0 15
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 2
35878: NEG
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 2
35889: NEG
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 3
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35948: LD_ADDR_VAR 0 16
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 2
36083: NEG
36084: PUSH
36085: LD_INT 2
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 3
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: LD_INT 3
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36141: LD_ADDR_VAR 0 17
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: NEG
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: LD_INT 2
36237: NEG
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 2
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36371: LD_ADDR_VAR 0 18
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: LD_INT 2
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 2
36506: PUSH
36507: LD_INT 2
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: LD_INT 2
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 2
36558: NEG
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: LD_INT 2
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36601: LD_ADDR_VAR 0 19
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 2
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: LD_INT 1
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 2
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: LD_INT 2
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: LD_INT 2
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: LD_INT 0
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36831: LD_ADDR_VAR 0 20
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 2
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: LD_INT 2
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37061: LD_ADDR_VAR 0 21
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37291: LD_ADDR_VAR 0 22
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: NEG
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: LD_INT 2
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37521: LD_ADDR_VAR 0 23
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: LD_INT 2
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 2
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: LD_INT 2
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: LD_INT 3
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: LD_INT 3
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 2
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37801: LD_ADDR_VAR 0 24
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 2
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 2
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 2
38000: NEG
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 3
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 3
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38077: LD_ADDR_VAR 0 25
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: LD_INT 2
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: LD_INT 2
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 3
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 3
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 3
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 3
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38351: LD_ADDR_VAR 0 26
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 0
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: LD_INT 2
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: LD_INT 2
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38627: LD_ADDR_VAR 0 27
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: NEG
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: LD_INT 2
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 3
38872: NEG
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38907: LD_ADDR_VAR 0 28
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: NEG
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: LD_INT 3
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 3
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 3
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 3
39154: NEG
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39189: LD_ADDR_VAR 0 29
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 2
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: LD_INT 2
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: LD_INT 3
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 3
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39468: LD_ADDR_VAR 0 30
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 2
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: LD_INT 3
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: LD_INT 3
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 3
39711: NEG
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39746: LD_ADDR_VAR 0 31
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: LD_INT 2
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: LD_INT 3
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 3
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 3
39989: NEG
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40024: LD_ADDR_VAR 0 32
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 3
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 3
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: LD_INT 3
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40302: LD_ADDR_VAR 0 33
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 3
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 3
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 3
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 3
40546: NEG
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40581: LD_ADDR_VAR 0 34
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: LD_INT 2
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 3
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: NEG
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40861: LD_ADDR_VAR 0 35
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40973: LD_ADDR_VAR 0 36
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: LD_INT 2
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41085: LD_ADDR_VAR 0 37
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41197: LD_ADDR_VAR 0 38
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41309: LD_ADDR_VAR 0 39
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41421: LD_ADDR_VAR 0 40
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41533: LD_ADDR_VAR 0 41
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: LD_INT 3
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: LD_INT 2
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 3
41776: PUSH
41777: LD_INT 3
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: LD_INT 3
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 3
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 3
41830: NEG
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 3
41842: NEG
41843: PUSH
41844: LD_INT 3
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41883: LD_ADDR_VAR 0 42
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 3
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 3
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 3
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 3
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 3
42180: NEG
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 3
42192: NEG
42193: PUSH
42194: LD_INT 3
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42233: LD_ADDR_VAR 0 43
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 3
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 3
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 3
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 2
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 3
42529: NEG
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42581: LD_ADDR_VAR 0 44
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 3
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: LD_INT 3
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: LD_INT 3
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 3
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 3
42890: NEG
42891: PUSH
42892: LD_INT 3
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42931: LD_ADDR_VAR 0 45
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 1
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 3
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 3
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: LD_INT 3
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 3
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 3
43228: NEG
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: NEG
43241: PUSH
43242: LD_INT 3
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43281: LD_ADDR_VAR 0 46
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: LD_INT 0
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 3
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 3
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 3
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 3
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 3
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 3
43577: NEG
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 3
43588: NEG
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43629: LD_ADDR_VAR 0 47
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: LD_INT 2
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43780: LD_ADDR_VAR 0 48
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43927: LD_ADDR_VAR 0 49
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44071: LD_ADDR_VAR 0 50
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44215: LD_ADDR_VAR 0 51
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44362: LD_ADDR_VAR 0 52
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44513: LD_ADDR_VAR 0 53
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44743: LD_ADDR_VAR 0 54
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 2
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44973: LD_ADDR_VAR 0 55
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: LD_INT 2
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45203: LD_ADDR_VAR 0 56
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45433: LD_ADDR_VAR 0 57
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45663: LD_ADDR_VAR 0 58
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45893: LD_ADDR_VAR 0 59
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45981: LD_ADDR_VAR 0 60
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46069: LD_ADDR_VAR 0 61
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46157: LD_ADDR_VAR 0 62
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46245: LD_ADDR_VAR 0 63
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46333: LD_ADDR_VAR 0 64
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: ST_TO_ADDR
// end ; 1 :
46421: GO 52318
46423: LD_INT 1
46425: DOUBLE
46426: EQUAL
46427: IFTRUE 46431
46429: GO 49054
46431: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46432: LD_ADDR_VAR 0 11
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 3
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46476: LD_ADDR_VAR 0 12
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 3
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46517: LD_ADDR_VAR 0 13
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46557: LD_ADDR_VAR 0 14
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46598: LD_ADDR_VAR 0 15
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 3
46616: NEG
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 3
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: LIST
46641: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46642: LD_ADDR_VAR 0 16
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46688: LD_ADDR_VAR 0 17
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46732: LD_ADDR_VAR 0 18
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 3
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46773: LD_ADDR_VAR 0 19
46777: PUSH
46778: LD_INT 3
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46813: LD_ADDR_VAR 0 20
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: LIST
46853: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46854: LD_ADDR_VAR 0 21
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 3
46872: NEG
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46898: LD_ADDR_VAR 0 22
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 3
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 3
46917: NEG
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: LD_INT 3
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46944: LD_ADDR_VAR 0 23
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 4
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46988: LD_ADDR_VAR 0 24
46992: PUSH
46993: LD_INT 3
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 3
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 4
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: LIST
47028: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47029: LD_ADDR_VAR 0 25
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 4
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 4
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47069: LD_ADDR_VAR 0 26
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47110: LD_ADDR_VAR 0 27
47114: PUSH
47115: LD_INT 3
47117: NEG
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 3
47128: NEG
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 4
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47154: LD_ADDR_VAR 0 28
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: LD_INT 3
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 3
47173: NEG
47174: PUSH
47175: LD_INT 4
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 4
47185: NEG
47186: PUSH
47187: LD_INT 3
47189: NEG
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47200: LD_ADDR_VAR 0 29
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: LD_INT 3
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 4
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_INT 4
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 5
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 5
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 4
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 6
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 6
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 5
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47355: LD_ADDR_VAR 0 30
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 3
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 3
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 4
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 4
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 4
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 5
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 5
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 5
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 6
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 6
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47498: LD_ADDR_VAR 0 31
47502: PUSH
47503: LD_INT 3
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: PUSH
47516: LD_INT 3
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 4
47535: PUSH
47536: LD_INT 3
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 4
47545: PUSH
47546: LD_INT 4
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: LD_INT 4
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 5
47565: PUSH
47566: LD_INT 4
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 5
47575: PUSH
47576: LD_INT 5
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 4
47585: PUSH
47586: LD_INT 5
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 6
47595: PUSH
47596: LD_INT 5
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 6
47605: PUSH
47606: LD_INT 6
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 5
47615: PUSH
47616: LD_INT 6
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47637: LD_ADDR_VAR 0 32
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 4
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 5
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 4
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 6
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 6
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47780: LD_ADDR_VAR 0 33
47784: PUSH
47785: LD_INT 2
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 3
47798: NEG
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 3
47809: NEG
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 4
47832: NEG
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 4
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 4
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 5
47866: NEG
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 5
47877: NEG
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 5
47889: NEG
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 6
47900: NEG
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 6
47911: NEG
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47935: LD_ADDR_VAR 0 34
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 3
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 3
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: LD_INT 4
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 4
47990: NEG
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 4
48002: NEG
48003: PUSH
48004: LD_INT 4
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 4
48014: NEG
48015: PUSH
48016: LD_INT 5
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 5
48026: NEG
48027: PUSH
48028: LD_INT 4
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 5
48038: NEG
48039: PUSH
48040: LD_INT 5
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 5
48050: NEG
48051: PUSH
48052: LD_INT 6
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 6
48062: NEG
48063: PUSH
48064: LD_INT 5
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 6
48074: NEG
48075: PUSH
48076: LD_INT 6
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48098: LD_ADDR_VAR 0 41
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: LD_INT 3
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: LIST
48141: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48142: LD_ADDR_VAR 0 42
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48183: LD_ADDR_VAR 0 43
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48223: LD_ADDR_VAR 0 44
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: LD_INT 3
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48264: LD_ADDR_VAR 0 45
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48308: LD_ADDR_VAR 0 46
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: LD_INT 3
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 3
48339: NEG
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48354: LD_ADDR_VAR 0 47
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 3
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48387: LD_ADDR_VAR 0 48
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48418: LD_ADDR_VAR 0 49
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48447: LD_ADDR_VAR 0 50
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48476: LD_ADDR_VAR 0 51
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48507: LD_ADDR_VAR 0 52
48511: PUSH
48512: LD_INT 3
48514: NEG
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48540: LD_ADDR_VAR 0 53
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 3
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: LIST
48583: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48584: LD_ADDR_VAR 0 54
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 3
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48625: LD_ADDR_VAR 0 55
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: LD_INT 3
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 3
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48665: LD_ADDR_VAR 0 56
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48706: LD_ADDR_VAR 0 57
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 3
48724: NEG
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 3
48735: NEG
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48750: LD_ADDR_VAR 0 58
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 3
48769: NEG
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48796: LD_ADDR_VAR 0 59
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: LIST
48839: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48840: LD_ADDR_VAR 0 60
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48881: LD_ADDR_VAR 0 61
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48921: LD_ADDR_VAR 0 62
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48962: LD_ADDR_VAR 0 63
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49006: LD_ADDR_VAR 0 64
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// end ; 2 :
49052: GO 52318
49054: LD_INT 2
49056: DOUBLE
49057: EQUAL
49058: IFTRUE 49062
49060: GO 52317
49062: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49063: LD_ADDR_VAR 0 29
49067: PUSH
49068: LD_INT 4
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 4
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 5
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 5
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 4
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 3
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 5
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: LD_INT 3
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 4
49183: PUSH
49184: LD_INT 3
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 4
49193: PUSH
49194: LD_INT 4
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: LD_INT 4
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 4
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 4
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 4
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 5
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: LD_INT 5
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: LD_INT 4
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: LD_INT 5
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 3
49346: NEG
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 3
49357: NEG
49358: PUSH
49359: LD_INT 1
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 3
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 4
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 4
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 4
49425: NEG
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 4
49448: NEG
49449: PUSH
49450: LD_INT 4
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 4
49460: NEG
49461: PUSH
49462: LD_INT 5
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: LD_INT 4
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: LD_INT 3
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 4
49496: NEG
49497: PUSH
49498: LD_INT 3
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 5
49508: NEG
49509: PUSH
49510: LD_INT 4
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 5
49520: NEG
49521: PUSH
49522: LD_INT 5
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: LD_INT 5
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 5
49544: NEG
49545: PUSH
49546: LD_INT 3
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49601: LD_ADDR_VAR 0 30
49605: PUSH
49606: LD_INT 4
49608: PUSH
49609: LD_INT 4
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 4
49618: PUSH
49619: LD_INT 3
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 5
49628: PUSH
49629: LD_INT 4
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 5
49638: PUSH
49639: LD_INT 5
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 4
49648: PUSH
49649: LD_INT 5
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: LD_INT 4
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: LD_INT 3
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 5
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: LD_INT 5
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 3
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 4
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 4
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 3
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 4
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 4
49791: NEG
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 4
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 4
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 5
49847: NEG
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 5
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 5
49870: NEG
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 3
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 3
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 3
49905: NEG
49906: PUSH
49907: LD_INT 4
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: NEG
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 3
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 4
49953: NEG
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 4
49965: NEG
49966: PUSH
49967: LD_INT 4
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 4
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 4
49989: NEG
49990: PUSH
49991: LD_INT 2
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 4
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 5
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 4
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: LD_INT 4
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 5
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: LD_INT 5
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50148: LD_ADDR_VAR 0 31
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: LD_INT 4
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 3
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 4
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 5
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 5
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 4
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: LD_INT 5
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 3
50248: NEG
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 3
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 4
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 4
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 4
50327: NEG
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: NEG
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 4
50350: NEG
50351: PUSH
50352: LD_INT 4
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 4
50362: NEG
50363: PUSH
50364: LD_INT 5
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: LD_INT 4
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 4
50398: NEG
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 5
50410: NEG
50411: PUSH
50412: LD_INT 4
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 5
50422: NEG
50423: PUSH
50424: LD_INT 5
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 3
50434: NEG
50435: PUSH
50436: LD_INT 5
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 5
50446: NEG
50447: PUSH
50448: LD_INT 3
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 4
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 3
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 2
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: LD_INT 3
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 4
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 4
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 4
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 4
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 5
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 5
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 4
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 3
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 5
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50698: LD_ADDR_VAR 0 32
50702: PUSH
50703: LD_INT 4
50705: NEG
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 4
50716: NEG
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 4
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 5
50761: NEG
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 5
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 5
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 3
50796: NEG
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: NEG
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: LD_INT 4
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 3
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 4
50867: NEG
50868: PUSH
50869: LD_INT 3
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 4
50879: NEG
50880: PUSH
50881: LD_INT 4
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: LD_INT 4
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 4
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 4
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 5
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 4
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 4
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 5
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: LD_INT 3
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: LD_INT 5
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 4
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 4
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 1
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 4
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 4
51110: PUSH
51111: LD_INT 4
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 4
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 5
51130: PUSH
51131: LD_INT 4
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 5
51140: PUSH
51141: LD_INT 5
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 4
51150: PUSH
51151: LD_INT 5
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: LD_INT 4
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 3
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 5
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: LD_INT 5
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51245: LD_ADDR_VAR 0 33
51249: PUSH
51250: LD_INT 4
51252: NEG
51253: PUSH
51254: LD_INT 4
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 4
51264: NEG
51265: PUSH
51266: LD_INT 5
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: LD_INT 4
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 3
51288: NEG
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 4
51300: NEG
51301: PUSH
51302: LD_INT 3
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 5
51312: NEG
51313: PUSH
51314: LD_INT 4
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 5
51324: NEG
51325: PUSH
51326: LD_INT 5
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: LD_INT 5
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 5
51348: NEG
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 4
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: LD_INT 4
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 4
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 4
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 4
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 5
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 5
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 4
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 3
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 1
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 5
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 3
51555: PUSH
51556: LD_INT 3
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 4
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: LD_INT 4
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: LD_INT 4
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: LD_INT 5
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 5
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 4
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 5
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51783: LD_ADDR_VAR 0 34
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 4
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 5
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: LD_INT 4
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 4
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 5
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 5
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 4
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 4
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 3
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 4
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 4
51985: PUSH
51986: LD_INT 4
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 4
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 5
52005: PUSH
52006: LD_INT 4
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 5
52015: PUSH
52016: LD_INT 5
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: LD_INT 5
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: LD_INT 4
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 5
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: LD_INT 5
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 4
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 3
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 4
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 4
52168: NEG
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 4
52179: NEG
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 3
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 4
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 5
52224: NEG
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 5
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 5
52247: NEG
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: ST_TO_ADDR
// end ; end ;
52315: GO 52318
52317: POP
// case btype of b_depot , b_warehouse :
52318: LD_VAR 0 1
52322: PUSH
52323: LD_INT 0
52325: DOUBLE
52326: EQUAL
52327: IFTRUE 52337
52329: LD_INT 1
52331: DOUBLE
52332: EQUAL
52333: IFTRUE 52337
52335: GO 52538
52337: POP
// case nation of nation_american :
52338: LD_VAR 0 5
52342: PUSH
52343: LD_INT 1
52345: DOUBLE
52346: EQUAL
52347: IFTRUE 52351
52349: GO 52407
52351: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52352: LD_ADDR_VAR 0 9
52356: PUSH
52357: LD_VAR 0 11
52361: PUSH
52362: LD_VAR 0 12
52366: PUSH
52367: LD_VAR 0 13
52371: PUSH
52372: LD_VAR 0 14
52376: PUSH
52377: LD_VAR 0 15
52381: PUSH
52382: LD_VAR 0 16
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: PUSH
52395: LD_VAR 0 4
52399: PUSH
52400: LD_INT 1
52402: PLUS
52403: ARRAY
52404: ST_TO_ADDR
52405: GO 52536
52407: LD_INT 2
52409: DOUBLE
52410: EQUAL
52411: IFTRUE 52415
52413: GO 52471
52415: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52416: LD_ADDR_VAR 0 9
52420: PUSH
52421: LD_VAR 0 17
52425: PUSH
52426: LD_VAR 0 18
52430: PUSH
52431: LD_VAR 0 19
52435: PUSH
52436: LD_VAR 0 20
52440: PUSH
52441: LD_VAR 0 21
52445: PUSH
52446: LD_VAR 0 22
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: PUSH
52459: LD_VAR 0 4
52463: PUSH
52464: LD_INT 1
52466: PLUS
52467: ARRAY
52468: ST_TO_ADDR
52469: GO 52536
52471: LD_INT 3
52473: DOUBLE
52474: EQUAL
52475: IFTRUE 52479
52477: GO 52535
52479: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52480: LD_ADDR_VAR 0 9
52484: PUSH
52485: LD_VAR 0 23
52489: PUSH
52490: LD_VAR 0 24
52494: PUSH
52495: LD_VAR 0 25
52499: PUSH
52500: LD_VAR 0 26
52504: PUSH
52505: LD_VAR 0 27
52509: PUSH
52510: LD_VAR 0 28
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: PUSH
52523: LD_VAR 0 4
52527: PUSH
52528: LD_INT 1
52530: PLUS
52531: ARRAY
52532: ST_TO_ADDR
52533: GO 52536
52535: POP
52536: GO 53091
52538: LD_INT 2
52540: DOUBLE
52541: EQUAL
52542: IFTRUE 52552
52544: LD_INT 3
52546: DOUBLE
52547: EQUAL
52548: IFTRUE 52552
52550: GO 52608
52552: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52553: LD_ADDR_VAR 0 9
52557: PUSH
52558: LD_VAR 0 29
52562: PUSH
52563: LD_VAR 0 30
52567: PUSH
52568: LD_VAR 0 31
52572: PUSH
52573: LD_VAR 0 32
52577: PUSH
52578: LD_VAR 0 33
52582: PUSH
52583: LD_VAR 0 34
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: PUSH
52596: LD_VAR 0 4
52600: PUSH
52601: LD_INT 1
52603: PLUS
52604: ARRAY
52605: ST_TO_ADDR
52606: GO 53091
52608: LD_INT 16
52610: DOUBLE
52611: EQUAL
52612: IFTRUE 52670
52614: LD_INT 17
52616: DOUBLE
52617: EQUAL
52618: IFTRUE 52670
52620: LD_INT 18
52622: DOUBLE
52623: EQUAL
52624: IFTRUE 52670
52626: LD_INT 19
52628: DOUBLE
52629: EQUAL
52630: IFTRUE 52670
52632: LD_INT 22
52634: DOUBLE
52635: EQUAL
52636: IFTRUE 52670
52638: LD_INT 20
52640: DOUBLE
52641: EQUAL
52642: IFTRUE 52670
52644: LD_INT 21
52646: DOUBLE
52647: EQUAL
52648: IFTRUE 52670
52650: LD_INT 23
52652: DOUBLE
52653: EQUAL
52654: IFTRUE 52670
52656: LD_INT 24
52658: DOUBLE
52659: EQUAL
52660: IFTRUE 52670
52662: LD_INT 25
52664: DOUBLE
52665: EQUAL
52666: IFTRUE 52670
52668: GO 52726
52670: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52671: LD_ADDR_VAR 0 9
52675: PUSH
52676: LD_VAR 0 35
52680: PUSH
52681: LD_VAR 0 36
52685: PUSH
52686: LD_VAR 0 37
52690: PUSH
52691: LD_VAR 0 38
52695: PUSH
52696: LD_VAR 0 39
52700: PUSH
52701: LD_VAR 0 40
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: PUSH
52714: LD_VAR 0 4
52718: PUSH
52719: LD_INT 1
52721: PLUS
52722: ARRAY
52723: ST_TO_ADDR
52724: GO 53091
52726: LD_INT 6
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52782
52732: LD_INT 7
52734: DOUBLE
52735: EQUAL
52736: IFTRUE 52782
52738: LD_INT 8
52740: DOUBLE
52741: EQUAL
52742: IFTRUE 52782
52744: LD_INT 13
52746: DOUBLE
52747: EQUAL
52748: IFTRUE 52782
52750: LD_INT 12
52752: DOUBLE
52753: EQUAL
52754: IFTRUE 52782
52756: LD_INT 15
52758: DOUBLE
52759: EQUAL
52760: IFTRUE 52782
52762: LD_INT 11
52764: DOUBLE
52765: EQUAL
52766: IFTRUE 52782
52768: LD_INT 14
52770: DOUBLE
52771: EQUAL
52772: IFTRUE 52782
52774: LD_INT 10
52776: DOUBLE
52777: EQUAL
52778: IFTRUE 52782
52780: GO 52838
52782: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52783: LD_ADDR_VAR 0 9
52787: PUSH
52788: LD_VAR 0 41
52792: PUSH
52793: LD_VAR 0 42
52797: PUSH
52798: LD_VAR 0 43
52802: PUSH
52803: LD_VAR 0 44
52807: PUSH
52808: LD_VAR 0 45
52812: PUSH
52813: LD_VAR 0 46
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: PUSH
52826: LD_VAR 0 4
52830: PUSH
52831: LD_INT 1
52833: PLUS
52834: ARRAY
52835: ST_TO_ADDR
52836: GO 53091
52838: LD_INT 36
52840: DOUBLE
52841: EQUAL
52842: IFTRUE 52846
52844: GO 52902
52846: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52847: LD_ADDR_VAR 0 9
52851: PUSH
52852: LD_VAR 0 47
52856: PUSH
52857: LD_VAR 0 48
52861: PUSH
52862: LD_VAR 0 49
52866: PUSH
52867: LD_VAR 0 50
52871: PUSH
52872: LD_VAR 0 51
52876: PUSH
52877: LD_VAR 0 52
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: PUSH
52890: LD_VAR 0 4
52894: PUSH
52895: LD_INT 1
52897: PLUS
52898: ARRAY
52899: ST_TO_ADDR
52900: GO 53091
52902: LD_INT 4
52904: DOUBLE
52905: EQUAL
52906: IFTRUE 52928
52908: LD_INT 5
52910: DOUBLE
52911: EQUAL
52912: IFTRUE 52928
52914: LD_INT 34
52916: DOUBLE
52917: EQUAL
52918: IFTRUE 52928
52920: LD_INT 37
52922: DOUBLE
52923: EQUAL
52924: IFTRUE 52928
52926: GO 52984
52928: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52929: LD_ADDR_VAR 0 9
52933: PUSH
52934: LD_VAR 0 53
52938: PUSH
52939: LD_VAR 0 54
52943: PUSH
52944: LD_VAR 0 55
52948: PUSH
52949: LD_VAR 0 56
52953: PUSH
52954: LD_VAR 0 57
52958: PUSH
52959: LD_VAR 0 58
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: PUSH
52972: LD_VAR 0 4
52976: PUSH
52977: LD_INT 1
52979: PLUS
52980: ARRAY
52981: ST_TO_ADDR
52982: GO 53091
52984: LD_INT 31
52986: DOUBLE
52987: EQUAL
52988: IFTRUE 53034
52990: LD_INT 32
52992: DOUBLE
52993: EQUAL
52994: IFTRUE 53034
52996: LD_INT 33
52998: DOUBLE
52999: EQUAL
53000: IFTRUE 53034
53002: LD_INT 27
53004: DOUBLE
53005: EQUAL
53006: IFTRUE 53034
53008: LD_INT 26
53010: DOUBLE
53011: EQUAL
53012: IFTRUE 53034
53014: LD_INT 28
53016: DOUBLE
53017: EQUAL
53018: IFTRUE 53034
53020: LD_INT 29
53022: DOUBLE
53023: EQUAL
53024: IFTRUE 53034
53026: LD_INT 30
53028: DOUBLE
53029: EQUAL
53030: IFTRUE 53034
53032: GO 53090
53034: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53035: LD_ADDR_VAR 0 9
53039: PUSH
53040: LD_VAR 0 59
53044: PUSH
53045: LD_VAR 0 60
53049: PUSH
53050: LD_VAR 0 61
53054: PUSH
53055: LD_VAR 0 62
53059: PUSH
53060: LD_VAR 0 63
53064: PUSH
53065: LD_VAR 0 64
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: PUSH
53078: LD_VAR 0 4
53082: PUSH
53083: LD_INT 1
53085: PLUS
53086: ARRAY
53087: ST_TO_ADDR
53088: GO 53091
53090: POP
// temp_list2 = [ ] ;
53091: LD_ADDR_VAR 0 10
53095: PUSH
53096: EMPTY
53097: ST_TO_ADDR
// for i in temp_list do
53098: LD_ADDR_VAR 0 8
53102: PUSH
53103: LD_VAR 0 9
53107: PUSH
53108: FOR_IN
53109: IFFALSE 53161
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53111: LD_ADDR_VAR 0 10
53115: PUSH
53116: LD_VAR 0 10
53120: PUSH
53121: LD_VAR 0 8
53125: PUSH
53126: LD_INT 1
53128: ARRAY
53129: PUSH
53130: LD_VAR 0 2
53134: PLUS
53135: PUSH
53136: LD_VAR 0 8
53140: PUSH
53141: LD_INT 2
53143: ARRAY
53144: PUSH
53145: LD_VAR 0 3
53149: PLUS
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: EMPTY
53156: LIST
53157: ADD
53158: ST_TO_ADDR
53159: GO 53108
53161: POP
53162: POP
// result = temp_list2 ;
53163: LD_ADDR_VAR 0 7
53167: PUSH
53168: LD_VAR 0 10
53172: ST_TO_ADDR
// end ;
53173: LD_VAR 0 7
53177: RET
// export function EnemyInRange ( unit , dist ) ; begin
53178: LD_INT 0
53180: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53181: LD_ADDR_VAR 0 3
53185: PUSH
53186: LD_VAR 0 1
53190: PPUSH
53191: CALL_OW 255
53195: PPUSH
53196: LD_VAR 0 1
53200: PPUSH
53201: CALL_OW 250
53205: PPUSH
53206: LD_VAR 0 1
53210: PPUSH
53211: CALL_OW 251
53215: PPUSH
53216: LD_VAR 0 2
53220: PPUSH
53221: CALL 26551 0 4
53225: PUSH
53226: LD_INT 4
53228: ARRAY
53229: ST_TO_ADDR
// end ;
53230: LD_VAR 0 3
53234: RET
// export function PlayerSeeMe ( unit ) ; begin
53235: LD_INT 0
53237: PPUSH
// result := See ( your_side , unit ) ;
53238: LD_ADDR_VAR 0 2
53242: PUSH
53243: LD_OWVAR 2
53247: PPUSH
53248: LD_VAR 0 1
53252: PPUSH
53253: CALL_OW 292
53257: ST_TO_ADDR
// end ;
53258: LD_VAR 0 2
53262: RET
// export function ReverseDir ( unit ) ; begin
53263: LD_INT 0
53265: PPUSH
// if not unit then
53266: LD_VAR 0 1
53270: NOT
53271: IFFALSE 53275
// exit ;
53273: GO 53298
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53275: LD_ADDR_VAR 0 2
53279: PUSH
53280: LD_VAR 0 1
53284: PPUSH
53285: CALL_OW 254
53289: PUSH
53290: LD_INT 3
53292: PLUS
53293: PUSH
53294: LD_INT 6
53296: MOD
53297: ST_TO_ADDR
// end ;
53298: LD_VAR 0 2
53302: RET
// export function ReverseArray ( array ) ; var i ; begin
53303: LD_INT 0
53305: PPUSH
53306: PPUSH
// if not array then
53307: LD_VAR 0 1
53311: NOT
53312: IFFALSE 53316
// exit ;
53314: GO 53371
// result := [ ] ;
53316: LD_ADDR_VAR 0 2
53320: PUSH
53321: EMPTY
53322: ST_TO_ADDR
// for i := array downto 1 do
53323: LD_ADDR_VAR 0 3
53327: PUSH
53328: DOUBLE
53329: LD_VAR 0 1
53333: INC
53334: ST_TO_ADDR
53335: LD_INT 1
53337: PUSH
53338: FOR_DOWNTO
53339: IFFALSE 53369
// result := Join ( result , array [ i ] ) ;
53341: LD_ADDR_VAR 0 2
53345: PUSH
53346: LD_VAR 0 2
53350: PPUSH
53351: LD_VAR 0 1
53355: PUSH
53356: LD_VAR 0 3
53360: ARRAY
53361: PPUSH
53362: CALL 58027 0 2
53366: ST_TO_ADDR
53367: GO 53338
53369: POP
53370: POP
// end ;
53371: LD_VAR 0 2
53375: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53376: LD_INT 0
53378: PPUSH
53379: PPUSH
53380: PPUSH
53381: PPUSH
53382: PPUSH
53383: PPUSH
// if not unit or not hexes then
53384: LD_VAR 0 1
53388: NOT
53389: PUSH
53390: LD_VAR 0 2
53394: NOT
53395: OR
53396: IFFALSE 53400
// exit ;
53398: GO 53523
// dist := 9999 ;
53400: LD_ADDR_VAR 0 5
53404: PUSH
53405: LD_INT 9999
53407: ST_TO_ADDR
// for i = 1 to hexes do
53408: LD_ADDR_VAR 0 4
53412: PUSH
53413: DOUBLE
53414: LD_INT 1
53416: DEC
53417: ST_TO_ADDR
53418: LD_VAR 0 2
53422: PUSH
53423: FOR_TO
53424: IFFALSE 53511
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53426: LD_ADDR_VAR 0 6
53430: PUSH
53431: LD_VAR 0 1
53435: PPUSH
53436: LD_VAR 0 2
53440: PUSH
53441: LD_VAR 0 4
53445: ARRAY
53446: PUSH
53447: LD_INT 1
53449: ARRAY
53450: PPUSH
53451: LD_VAR 0 2
53455: PUSH
53456: LD_VAR 0 4
53460: ARRAY
53461: PUSH
53462: LD_INT 2
53464: ARRAY
53465: PPUSH
53466: CALL_OW 297
53470: ST_TO_ADDR
// if tdist < dist then
53471: LD_VAR 0 6
53475: PUSH
53476: LD_VAR 0 5
53480: LESS
53481: IFFALSE 53509
// begin hex := hexes [ i ] ;
53483: LD_ADDR_VAR 0 8
53487: PUSH
53488: LD_VAR 0 2
53492: PUSH
53493: LD_VAR 0 4
53497: ARRAY
53498: ST_TO_ADDR
// dist := tdist ;
53499: LD_ADDR_VAR 0 5
53503: PUSH
53504: LD_VAR 0 6
53508: ST_TO_ADDR
// end ; end ;
53509: GO 53423
53511: POP
53512: POP
// result := hex ;
53513: LD_ADDR_VAR 0 3
53517: PUSH
53518: LD_VAR 0 8
53522: ST_TO_ADDR
// end ;
53523: LD_VAR 0 3
53527: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53528: LD_INT 0
53530: PPUSH
53531: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53532: LD_VAR 0 1
53536: NOT
53537: PUSH
53538: LD_VAR 0 1
53542: PUSH
53543: LD_INT 21
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 23
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PPUSH
53567: CALL_OW 69
53571: IN
53572: NOT
53573: OR
53574: IFFALSE 53578
// exit ;
53576: GO 53625
// for i = 1 to 3 do
53578: LD_ADDR_VAR 0 3
53582: PUSH
53583: DOUBLE
53584: LD_INT 1
53586: DEC
53587: ST_TO_ADDR
53588: LD_INT 3
53590: PUSH
53591: FOR_TO
53592: IFFALSE 53623
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53594: LD_VAR 0 1
53598: PPUSH
53599: CALL_OW 250
53603: PPUSH
53604: LD_VAR 0 1
53608: PPUSH
53609: CALL_OW 251
53613: PPUSH
53614: LD_INT 1
53616: PPUSH
53617: CALL_OW 453
53621: GO 53591
53623: POP
53624: POP
// end ;
53625: LD_VAR 0 2
53629: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53630: LD_INT 0
53632: PPUSH
53633: PPUSH
53634: PPUSH
53635: PPUSH
53636: PPUSH
53637: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53638: LD_VAR 0 1
53642: NOT
53643: PUSH
53644: LD_VAR 0 2
53648: NOT
53649: OR
53650: PUSH
53651: LD_VAR 0 1
53655: PPUSH
53656: CALL_OW 314
53660: OR
53661: IFFALSE 53665
// exit ;
53663: GO 54132
// if GetLives ( i ) < 250 then
53665: LD_VAR 0 4
53669: PPUSH
53670: CALL_OW 256
53674: PUSH
53675: LD_INT 250
53677: LESS
53678: IFFALSE 53691
// begin ComAutodestruct ( i ) ;
53680: LD_VAR 0 4
53684: PPUSH
53685: CALL 53528 0 1
// exit ;
53689: GO 54132
// end ; x := GetX ( enemy_unit ) ;
53691: LD_ADDR_VAR 0 7
53695: PUSH
53696: LD_VAR 0 2
53700: PPUSH
53701: CALL_OW 250
53705: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53706: LD_ADDR_VAR 0 8
53710: PUSH
53711: LD_VAR 0 2
53715: PPUSH
53716: CALL_OW 251
53720: ST_TO_ADDR
// if not x or not y then
53721: LD_VAR 0 7
53725: NOT
53726: PUSH
53727: LD_VAR 0 8
53731: NOT
53732: OR
53733: IFFALSE 53737
// exit ;
53735: GO 54132
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53737: LD_ADDR_VAR 0 6
53741: PUSH
53742: LD_VAR 0 7
53746: PPUSH
53747: LD_INT 0
53749: PPUSH
53750: LD_INT 4
53752: PPUSH
53753: CALL_OW 272
53757: PUSH
53758: LD_VAR 0 8
53762: PPUSH
53763: LD_INT 0
53765: PPUSH
53766: LD_INT 4
53768: PPUSH
53769: CALL_OW 273
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_VAR 0 7
53782: PPUSH
53783: LD_INT 1
53785: PPUSH
53786: LD_INT 4
53788: PPUSH
53789: CALL_OW 272
53793: PUSH
53794: LD_VAR 0 8
53798: PPUSH
53799: LD_INT 1
53801: PPUSH
53802: LD_INT 4
53804: PPUSH
53805: CALL_OW 273
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_VAR 0 7
53818: PPUSH
53819: LD_INT 2
53821: PPUSH
53822: LD_INT 4
53824: PPUSH
53825: CALL_OW 272
53829: PUSH
53830: LD_VAR 0 8
53834: PPUSH
53835: LD_INT 2
53837: PPUSH
53838: LD_INT 4
53840: PPUSH
53841: CALL_OW 273
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_VAR 0 7
53854: PPUSH
53855: LD_INT 3
53857: PPUSH
53858: LD_INT 4
53860: PPUSH
53861: CALL_OW 272
53865: PUSH
53866: LD_VAR 0 8
53870: PPUSH
53871: LD_INT 3
53873: PPUSH
53874: LD_INT 4
53876: PPUSH
53877: CALL_OW 273
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_VAR 0 7
53890: PPUSH
53891: LD_INT 4
53893: PPUSH
53894: LD_INT 4
53896: PPUSH
53897: CALL_OW 272
53901: PUSH
53902: LD_VAR 0 8
53906: PPUSH
53907: LD_INT 4
53909: PPUSH
53910: LD_INT 4
53912: PPUSH
53913: CALL_OW 273
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_VAR 0 7
53926: PPUSH
53927: LD_INT 5
53929: PPUSH
53930: LD_INT 4
53932: PPUSH
53933: CALL_OW 272
53937: PUSH
53938: LD_VAR 0 8
53942: PPUSH
53943: LD_INT 5
53945: PPUSH
53946: LD_INT 4
53948: PPUSH
53949: CALL_OW 273
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// for i = tmp downto 1 do
53966: LD_ADDR_VAR 0 4
53970: PUSH
53971: DOUBLE
53972: LD_VAR 0 6
53976: INC
53977: ST_TO_ADDR
53978: LD_INT 1
53980: PUSH
53981: FOR_DOWNTO
53982: IFFALSE 54083
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53984: LD_VAR 0 6
53988: PUSH
53989: LD_VAR 0 4
53993: ARRAY
53994: PUSH
53995: LD_INT 1
53997: ARRAY
53998: PPUSH
53999: LD_VAR 0 6
54003: PUSH
54004: LD_VAR 0 4
54008: ARRAY
54009: PUSH
54010: LD_INT 2
54012: ARRAY
54013: PPUSH
54014: CALL_OW 488
54018: NOT
54019: PUSH
54020: LD_VAR 0 6
54024: PUSH
54025: LD_VAR 0 4
54029: ARRAY
54030: PUSH
54031: LD_INT 1
54033: ARRAY
54034: PPUSH
54035: LD_VAR 0 6
54039: PUSH
54040: LD_VAR 0 4
54044: ARRAY
54045: PUSH
54046: LD_INT 2
54048: ARRAY
54049: PPUSH
54050: CALL_OW 428
54054: PUSH
54055: LD_INT 0
54057: NONEQUAL
54058: OR
54059: IFFALSE 54081
// tmp := Delete ( tmp , i ) ;
54061: LD_ADDR_VAR 0 6
54065: PUSH
54066: LD_VAR 0 6
54070: PPUSH
54071: LD_VAR 0 4
54075: PPUSH
54076: CALL_OW 3
54080: ST_TO_ADDR
54081: GO 53981
54083: POP
54084: POP
// j := GetClosestHex ( unit , tmp ) ;
54085: LD_ADDR_VAR 0 5
54089: PUSH
54090: LD_VAR 0 1
54094: PPUSH
54095: LD_VAR 0 6
54099: PPUSH
54100: CALL 53376 0 2
54104: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54105: LD_VAR 0 1
54109: PPUSH
54110: LD_VAR 0 5
54114: PUSH
54115: LD_INT 1
54117: ARRAY
54118: PPUSH
54119: LD_VAR 0 5
54123: PUSH
54124: LD_INT 2
54126: ARRAY
54127: PPUSH
54128: CALL_OW 111
// end ;
54132: LD_VAR 0 3
54136: RET
// export function PrepareApemanSoldier ( ) ; begin
54137: LD_INT 0
54139: PPUSH
// uc_nation := 0 ;
54140: LD_ADDR_OWVAR 21
54144: PUSH
54145: LD_INT 0
54147: ST_TO_ADDR
// hc_sex := sex_male ;
54148: LD_ADDR_OWVAR 27
54152: PUSH
54153: LD_INT 1
54155: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54156: LD_ADDR_OWVAR 28
54160: PUSH
54161: LD_INT 15
54163: ST_TO_ADDR
// hc_gallery :=  ;
54164: LD_ADDR_OWVAR 33
54168: PUSH
54169: LD_STRING 
54171: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54172: LD_ADDR_OWVAR 31
54176: PUSH
54177: LD_INT 0
54179: PPUSH
54180: LD_INT 3
54182: PPUSH
54183: CALL_OW 12
54187: PUSH
54188: LD_INT 0
54190: PPUSH
54191: LD_INT 3
54193: PPUSH
54194: CALL_OW 12
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: ST_TO_ADDR
// end ;
54211: LD_VAR 0 1
54215: RET
// export function PrepareApemanEngineer ( ) ; begin
54216: LD_INT 0
54218: PPUSH
// uc_nation := 0 ;
54219: LD_ADDR_OWVAR 21
54223: PUSH
54224: LD_INT 0
54226: ST_TO_ADDR
// hc_sex := sex_male ;
54227: LD_ADDR_OWVAR 27
54231: PUSH
54232: LD_INT 1
54234: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54235: LD_ADDR_OWVAR 28
54239: PUSH
54240: LD_INT 16
54242: ST_TO_ADDR
// hc_gallery :=  ;
54243: LD_ADDR_OWVAR 33
54247: PUSH
54248: LD_STRING 
54250: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54251: LD_ADDR_OWVAR 31
54255: PUSH
54256: LD_INT 0
54258: PPUSH
54259: LD_INT 3
54261: PPUSH
54262: CALL_OW 12
54266: PUSH
54267: LD_INT 0
54269: PPUSH
54270: LD_INT 3
54272: PPUSH
54273: CALL_OW 12
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: ST_TO_ADDR
// end ;
54290: LD_VAR 0 1
54294: RET
// export function PrepareApeman ( agressivity ) ; begin
54295: LD_INT 0
54297: PPUSH
// uc_side := 0 ;
54298: LD_ADDR_OWVAR 20
54302: PUSH
54303: LD_INT 0
54305: ST_TO_ADDR
// uc_nation := 0 ;
54306: LD_ADDR_OWVAR 21
54310: PUSH
54311: LD_INT 0
54313: ST_TO_ADDR
// hc_sex := sex_male ;
54314: LD_ADDR_OWVAR 27
54318: PUSH
54319: LD_INT 1
54321: ST_TO_ADDR
// hc_class := class_apeman ;
54322: LD_ADDR_OWVAR 28
54326: PUSH
54327: LD_INT 12
54329: ST_TO_ADDR
// hc_gallery :=  ;
54330: LD_ADDR_OWVAR 33
54334: PUSH
54335: LD_STRING 
54337: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54338: LD_ADDR_OWVAR 35
54342: PUSH
54343: LD_VAR 0 1
54347: NEG
54348: PPUSH
54349: LD_VAR 0 1
54353: PPUSH
54354: CALL_OW 12
54358: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54359: LD_ADDR_OWVAR 31
54363: PUSH
54364: LD_INT 0
54366: PPUSH
54367: LD_INT 3
54369: PPUSH
54370: CALL_OW 12
54374: PUSH
54375: LD_INT 0
54377: PPUSH
54378: LD_INT 3
54380: PPUSH
54381: CALL_OW 12
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: ST_TO_ADDR
// end ;
54398: LD_VAR 0 2
54402: RET
// export function PrepareTiger ( agressivity ) ; begin
54403: LD_INT 0
54405: PPUSH
// uc_side := 0 ;
54406: LD_ADDR_OWVAR 20
54410: PUSH
54411: LD_INT 0
54413: ST_TO_ADDR
// uc_nation := 0 ;
54414: LD_ADDR_OWVAR 21
54418: PUSH
54419: LD_INT 0
54421: ST_TO_ADDR
// hc_class := class_tiger ;
54422: LD_ADDR_OWVAR 28
54426: PUSH
54427: LD_INT 14
54429: ST_TO_ADDR
// hc_gallery :=  ;
54430: LD_ADDR_OWVAR 33
54434: PUSH
54435: LD_STRING 
54437: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54438: LD_ADDR_OWVAR 35
54442: PUSH
54443: LD_VAR 0 1
54447: NEG
54448: PPUSH
54449: LD_VAR 0 1
54453: PPUSH
54454: CALL_OW 12
54458: ST_TO_ADDR
// end ;
54459: LD_VAR 0 2
54463: RET
// export function PrepareEnchidna ( ) ; begin
54464: LD_INT 0
54466: PPUSH
// uc_side := 0 ;
54467: LD_ADDR_OWVAR 20
54471: PUSH
54472: LD_INT 0
54474: ST_TO_ADDR
// uc_nation := 0 ;
54475: LD_ADDR_OWVAR 21
54479: PUSH
54480: LD_INT 0
54482: ST_TO_ADDR
// hc_class := class_baggie ;
54483: LD_ADDR_OWVAR 28
54487: PUSH
54488: LD_INT 13
54490: ST_TO_ADDR
// hc_gallery :=  ;
54491: LD_ADDR_OWVAR 33
54495: PUSH
54496: LD_STRING 
54498: ST_TO_ADDR
// end ;
54499: LD_VAR 0 1
54503: RET
// export function PrepareFrog ( ) ; begin
54504: LD_INT 0
54506: PPUSH
// uc_side := 0 ;
54507: LD_ADDR_OWVAR 20
54511: PUSH
54512: LD_INT 0
54514: ST_TO_ADDR
// uc_nation := 0 ;
54515: LD_ADDR_OWVAR 21
54519: PUSH
54520: LD_INT 0
54522: ST_TO_ADDR
// hc_class := class_frog ;
54523: LD_ADDR_OWVAR 28
54527: PUSH
54528: LD_INT 19
54530: ST_TO_ADDR
// hc_gallery :=  ;
54531: LD_ADDR_OWVAR 33
54535: PUSH
54536: LD_STRING 
54538: ST_TO_ADDR
// end ;
54539: LD_VAR 0 1
54543: RET
// export function PrepareFish ( ) ; begin
54544: LD_INT 0
54546: PPUSH
// uc_side := 0 ;
54547: LD_ADDR_OWVAR 20
54551: PUSH
54552: LD_INT 0
54554: ST_TO_ADDR
// uc_nation := 0 ;
54555: LD_ADDR_OWVAR 21
54559: PUSH
54560: LD_INT 0
54562: ST_TO_ADDR
// hc_class := class_fish ;
54563: LD_ADDR_OWVAR 28
54567: PUSH
54568: LD_INT 20
54570: ST_TO_ADDR
// hc_gallery :=  ;
54571: LD_ADDR_OWVAR 33
54575: PUSH
54576: LD_STRING 
54578: ST_TO_ADDR
// end ;
54579: LD_VAR 0 1
54583: RET
// export function PrepareBird ( ) ; begin
54584: LD_INT 0
54586: PPUSH
// uc_side := 0 ;
54587: LD_ADDR_OWVAR 20
54591: PUSH
54592: LD_INT 0
54594: ST_TO_ADDR
// uc_nation := 0 ;
54595: LD_ADDR_OWVAR 21
54599: PUSH
54600: LD_INT 0
54602: ST_TO_ADDR
// hc_class := class_phororhacos ;
54603: LD_ADDR_OWVAR 28
54607: PUSH
54608: LD_INT 18
54610: ST_TO_ADDR
// hc_gallery :=  ;
54611: LD_ADDR_OWVAR 33
54615: PUSH
54616: LD_STRING 
54618: ST_TO_ADDR
// end ;
54619: LD_VAR 0 1
54623: RET
// export function PrepareHorse ( ) ; begin
54624: LD_INT 0
54626: PPUSH
// uc_side := 0 ;
54627: LD_ADDR_OWVAR 20
54631: PUSH
54632: LD_INT 0
54634: ST_TO_ADDR
// uc_nation := 0 ;
54635: LD_ADDR_OWVAR 21
54639: PUSH
54640: LD_INT 0
54642: ST_TO_ADDR
// hc_class := class_horse ;
54643: LD_ADDR_OWVAR 28
54647: PUSH
54648: LD_INT 21
54650: ST_TO_ADDR
// hc_gallery :=  ;
54651: LD_ADDR_OWVAR 33
54655: PUSH
54656: LD_STRING 
54658: ST_TO_ADDR
// end ;
54659: LD_VAR 0 1
54663: RET
// export function PrepareMastodont ( ) ; begin
54664: LD_INT 0
54666: PPUSH
// uc_side := 0 ;
54667: LD_ADDR_OWVAR 20
54671: PUSH
54672: LD_INT 0
54674: ST_TO_ADDR
// uc_nation := 0 ;
54675: LD_ADDR_OWVAR 21
54679: PUSH
54680: LD_INT 0
54682: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54683: LD_ADDR_OWVAR 37
54687: PUSH
54688: LD_INT 31
54690: ST_TO_ADDR
// vc_control := control_rider ;
54691: LD_ADDR_OWVAR 38
54695: PUSH
54696: LD_INT 4
54698: ST_TO_ADDR
// end ;
54699: LD_VAR 0 1
54703: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54704: LD_INT 0
54706: PPUSH
54707: PPUSH
54708: PPUSH
// uc_side = 0 ;
54709: LD_ADDR_OWVAR 20
54713: PUSH
54714: LD_INT 0
54716: ST_TO_ADDR
// uc_nation = 0 ;
54717: LD_ADDR_OWVAR 21
54721: PUSH
54722: LD_INT 0
54724: ST_TO_ADDR
// InitHc_All ( ) ;
54725: CALL_OW 584
// InitVc ;
54729: CALL_OW 20
// if mastodonts then
54733: LD_VAR 0 6
54737: IFFALSE 54804
// for i = 1 to mastodonts do
54739: LD_ADDR_VAR 0 11
54743: PUSH
54744: DOUBLE
54745: LD_INT 1
54747: DEC
54748: ST_TO_ADDR
54749: LD_VAR 0 6
54753: PUSH
54754: FOR_TO
54755: IFFALSE 54802
// begin vc_chassis := 31 ;
54757: LD_ADDR_OWVAR 37
54761: PUSH
54762: LD_INT 31
54764: ST_TO_ADDR
// vc_control := control_rider ;
54765: LD_ADDR_OWVAR 38
54769: PUSH
54770: LD_INT 4
54772: ST_TO_ADDR
// animal := CreateVehicle ;
54773: LD_ADDR_VAR 0 12
54777: PUSH
54778: CALL_OW 45
54782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54783: LD_VAR 0 12
54787: PPUSH
54788: LD_VAR 0 8
54792: PPUSH
54793: LD_INT 0
54795: PPUSH
54796: CALL 56932 0 3
// end ;
54800: GO 54754
54802: POP
54803: POP
// if horses then
54804: LD_VAR 0 5
54808: IFFALSE 54875
// for i = 1 to horses do
54810: LD_ADDR_VAR 0 11
54814: PUSH
54815: DOUBLE
54816: LD_INT 1
54818: DEC
54819: ST_TO_ADDR
54820: LD_VAR 0 5
54824: PUSH
54825: FOR_TO
54826: IFFALSE 54873
// begin hc_class := 21 ;
54828: LD_ADDR_OWVAR 28
54832: PUSH
54833: LD_INT 21
54835: ST_TO_ADDR
// hc_gallery :=  ;
54836: LD_ADDR_OWVAR 33
54840: PUSH
54841: LD_STRING 
54843: ST_TO_ADDR
// animal := CreateHuman ;
54844: LD_ADDR_VAR 0 12
54848: PUSH
54849: CALL_OW 44
54853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54854: LD_VAR 0 12
54858: PPUSH
54859: LD_VAR 0 8
54863: PPUSH
54864: LD_INT 0
54866: PPUSH
54867: CALL 56932 0 3
// end ;
54871: GO 54825
54873: POP
54874: POP
// if birds then
54875: LD_VAR 0 1
54879: IFFALSE 54946
// for i = 1 to birds do
54881: LD_ADDR_VAR 0 11
54885: PUSH
54886: DOUBLE
54887: LD_INT 1
54889: DEC
54890: ST_TO_ADDR
54891: LD_VAR 0 1
54895: PUSH
54896: FOR_TO
54897: IFFALSE 54944
// begin hc_class := 18 ;
54899: LD_ADDR_OWVAR 28
54903: PUSH
54904: LD_INT 18
54906: ST_TO_ADDR
// hc_gallery =  ;
54907: LD_ADDR_OWVAR 33
54911: PUSH
54912: LD_STRING 
54914: ST_TO_ADDR
// animal := CreateHuman ;
54915: LD_ADDR_VAR 0 12
54919: PUSH
54920: CALL_OW 44
54924: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54925: LD_VAR 0 12
54929: PPUSH
54930: LD_VAR 0 8
54934: PPUSH
54935: LD_INT 0
54937: PPUSH
54938: CALL 56932 0 3
// end ;
54942: GO 54896
54944: POP
54945: POP
// if tigers then
54946: LD_VAR 0 2
54950: IFFALSE 55034
// for i = 1 to tigers do
54952: LD_ADDR_VAR 0 11
54956: PUSH
54957: DOUBLE
54958: LD_INT 1
54960: DEC
54961: ST_TO_ADDR
54962: LD_VAR 0 2
54966: PUSH
54967: FOR_TO
54968: IFFALSE 55032
// begin hc_class = class_tiger ;
54970: LD_ADDR_OWVAR 28
54974: PUSH
54975: LD_INT 14
54977: ST_TO_ADDR
// hc_gallery =  ;
54978: LD_ADDR_OWVAR 33
54982: PUSH
54983: LD_STRING 
54985: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54986: LD_ADDR_OWVAR 35
54990: PUSH
54991: LD_INT 7
54993: NEG
54994: PPUSH
54995: LD_INT 7
54997: PPUSH
54998: CALL_OW 12
55002: ST_TO_ADDR
// animal := CreateHuman ;
55003: LD_ADDR_VAR 0 12
55007: PUSH
55008: CALL_OW 44
55012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55013: LD_VAR 0 12
55017: PPUSH
55018: LD_VAR 0 8
55022: PPUSH
55023: LD_INT 0
55025: PPUSH
55026: CALL 56932 0 3
// end ;
55030: GO 54967
55032: POP
55033: POP
// if apemans then
55034: LD_VAR 0 3
55038: IFFALSE 55161
// for i = 1 to apemans do
55040: LD_ADDR_VAR 0 11
55044: PUSH
55045: DOUBLE
55046: LD_INT 1
55048: DEC
55049: ST_TO_ADDR
55050: LD_VAR 0 3
55054: PUSH
55055: FOR_TO
55056: IFFALSE 55159
// begin hc_class = class_apeman ;
55058: LD_ADDR_OWVAR 28
55062: PUSH
55063: LD_INT 12
55065: ST_TO_ADDR
// hc_gallery =  ;
55066: LD_ADDR_OWVAR 33
55070: PUSH
55071: LD_STRING 
55073: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55074: LD_ADDR_OWVAR 35
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PPUSH
55083: LD_INT 2
55085: PPUSH
55086: CALL_OW 12
55090: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55091: LD_ADDR_OWVAR 31
55095: PUSH
55096: LD_INT 1
55098: PPUSH
55099: LD_INT 3
55101: PPUSH
55102: CALL_OW 12
55106: PUSH
55107: LD_INT 1
55109: PPUSH
55110: LD_INT 3
55112: PPUSH
55113: CALL_OW 12
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// animal := CreateHuman ;
55130: LD_ADDR_VAR 0 12
55134: PUSH
55135: CALL_OW 44
55139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55140: LD_VAR 0 12
55144: PPUSH
55145: LD_VAR 0 8
55149: PPUSH
55150: LD_INT 0
55152: PPUSH
55153: CALL 56932 0 3
// end ;
55157: GO 55055
55159: POP
55160: POP
// if enchidnas then
55161: LD_VAR 0 4
55165: IFFALSE 55232
// for i = 1 to enchidnas do
55167: LD_ADDR_VAR 0 11
55171: PUSH
55172: DOUBLE
55173: LD_INT 1
55175: DEC
55176: ST_TO_ADDR
55177: LD_VAR 0 4
55181: PUSH
55182: FOR_TO
55183: IFFALSE 55230
// begin hc_class = 13 ;
55185: LD_ADDR_OWVAR 28
55189: PUSH
55190: LD_INT 13
55192: ST_TO_ADDR
// hc_gallery =  ;
55193: LD_ADDR_OWVAR 33
55197: PUSH
55198: LD_STRING 
55200: ST_TO_ADDR
// animal := CreateHuman ;
55201: LD_ADDR_VAR 0 12
55205: PUSH
55206: CALL_OW 44
55210: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55211: LD_VAR 0 12
55215: PPUSH
55216: LD_VAR 0 8
55220: PPUSH
55221: LD_INT 0
55223: PPUSH
55224: CALL 56932 0 3
// end ;
55228: GO 55182
55230: POP
55231: POP
// if fishes then
55232: LD_VAR 0 7
55236: IFFALSE 55303
// for i = 1 to fishes do
55238: LD_ADDR_VAR 0 11
55242: PUSH
55243: DOUBLE
55244: LD_INT 1
55246: DEC
55247: ST_TO_ADDR
55248: LD_VAR 0 7
55252: PUSH
55253: FOR_TO
55254: IFFALSE 55301
// begin hc_class = 20 ;
55256: LD_ADDR_OWVAR 28
55260: PUSH
55261: LD_INT 20
55263: ST_TO_ADDR
// hc_gallery =  ;
55264: LD_ADDR_OWVAR 33
55268: PUSH
55269: LD_STRING 
55271: ST_TO_ADDR
// animal := CreateHuman ;
55272: LD_ADDR_VAR 0 12
55276: PUSH
55277: CALL_OW 44
55281: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55282: LD_VAR 0 12
55286: PPUSH
55287: LD_VAR 0 9
55291: PPUSH
55292: LD_INT 0
55294: PPUSH
55295: CALL 56932 0 3
// end ;
55299: GO 55253
55301: POP
55302: POP
// end ;
55303: LD_VAR 0 10
55307: RET
// export function WantHeal ( sci , unit ) ; begin
55308: LD_INT 0
55310: PPUSH
// if GetTaskList ( sci ) > 0 then
55311: LD_VAR 0 1
55315: PPUSH
55316: CALL_OW 437
55320: PUSH
55321: LD_INT 0
55323: GREATER
55324: IFFALSE 55394
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55326: LD_VAR 0 1
55330: PPUSH
55331: CALL_OW 437
55335: PUSH
55336: LD_INT 1
55338: ARRAY
55339: PUSH
55340: LD_INT 1
55342: ARRAY
55343: PUSH
55344: LD_STRING l
55346: EQUAL
55347: PUSH
55348: LD_VAR 0 1
55352: PPUSH
55353: CALL_OW 437
55357: PUSH
55358: LD_INT 1
55360: ARRAY
55361: PUSH
55362: LD_INT 4
55364: ARRAY
55365: PUSH
55366: LD_VAR 0 2
55370: EQUAL
55371: AND
55372: IFFALSE 55384
// result := true else
55374: LD_ADDR_VAR 0 3
55378: PUSH
55379: LD_INT 1
55381: ST_TO_ADDR
55382: GO 55392
// result := false ;
55384: LD_ADDR_VAR 0 3
55388: PUSH
55389: LD_INT 0
55391: ST_TO_ADDR
// end else
55392: GO 55402
// result := false ;
55394: LD_ADDR_VAR 0 3
55398: PUSH
55399: LD_INT 0
55401: ST_TO_ADDR
// end ;
55402: LD_VAR 0 3
55406: RET
// export function HealTarget ( sci ) ; begin
55407: LD_INT 0
55409: PPUSH
// if not sci then
55410: LD_VAR 0 1
55414: NOT
55415: IFFALSE 55419
// exit ;
55417: GO 55484
// result := 0 ;
55419: LD_ADDR_VAR 0 2
55423: PUSH
55424: LD_INT 0
55426: ST_TO_ADDR
// if GetTaskList ( sci ) then
55427: LD_VAR 0 1
55431: PPUSH
55432: CALL_OW 437
55436: IFFALSE 55484
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55438: LD_VAR 0 1
55442: PPUSH
55443: CALL_OW 437
55447: PUSH
55448: LD_INT 1
55450: ARRAY
55451: PUSH
55452: LD_INT 1
55454: ARRAY
55455: PUSH
55456: LD_STRING l
55458: EQUAL
55459: IFFALSE 55484
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55461: LD_ADDR_VAR 0 2
55465: PUSH
55466: LD_VAR 0 1
55470: PPUSH
55471: CALL_OW 437
55475: PUSH
55476: LD_INT 1
55478: ARRAY
55479: PUSH
55480: LD_INT 4
55482: ARRAY
55483: ST_TO_ADDR
// end ;
55484: LD_VAR 0 2
55488: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55489: LD_INT 0
55491: PPUSH
55492: PPUSH
55493: PPUSH
55494: PPUSH
// if not base_units then
55495: LD_VAR 0 1
55499: NOT
55500: IFFALSE 55504
// exit ;
55502: GO 55591
// result := false ;
55504: LD_ADDR_VAR 0 2
55508: PUSH
55509: LD_INT 0
55511: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55512: LD_ADDR_VAR 0 5
55516: PUSH
55517: LD_VAR 0 1
55521: PPUSH
55522: LD_INT 21
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PPUSH
55532: CALL_OW 72
55536: ST_TO_ADDR
// if not tmp then
55537: LD_VAR 0 5
55541: NOT
55542: IFFALSE 55546
// exit ;
55544: GO 55591
// for i in tmp do
55546: LD_ADDR_VAR 0 3
55550: PUSH
55551: LD_VAR 0 5
55555: PUSH
55556: FOR_IN
55557: IFFALSE 55589
// begin result := EnemyInRange ( i , 22 ) ;
55559: LD_ADDR_VAR 0 2
55563: PUSH
55564: LD_VAR 0 3
55568: PPUSH
55569: LD_INT 22
55571: PPUSH
55572: CALL 53178 0 2
55576: ST_TO_ADDR
// if result then
55577: LD_VAR 0 2
55581: IFFALSE 55587
// exit ;
55583: POP
55584: POP
55585: GO 55591
// end ;
55587: GO 55556
55589: POP
55590: POP
// end ;
55591: LD_VAR 0 2
55595: RET
// export function FilterByTag ( units , tag ) ; begin
55596: LD_INT 0
55598: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55599: LD_ADDR_VAR 0 3
55603: PUSH
55604: LD_VAR 0 1
55608: PPUSH
55609: LD_INT 120
55611: PUSH
55612: LD_VAR 0 2
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PPUSH
55621: CALL_OW 72
55625: ST_TO_ADDR
// end ;
55626: LD_VAR 0 3
55630: RET
// export function IsDriver ( un ) ; begin
55631: LD_INT 0
55633: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55634: LD_ADDR_VAR 0 2
55638: PUSH
55639: LD_VAR 0 1
55643: PUSH
55644: LD_INT 55
55646: PUSH
55647: EMPTY
55648: LIST
55649: PPUSH
55650: CALL_OW 69
55654: IN
55655: ST_TO_ADDR
// end ;
55656: LD_VAR 0 2
55660: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55661: LD_INT 0
55663: PPUSH
55664: PPUSH
// list := [ ] ;
55665: LD_ADDR_VAR 0 5
55669: PUSH
55670: EMPTY
55671: ST_TO_ADDR
// case d of 0 :
55672: LD_VAR 0 3
55676: PUSH
55677: LD_INT 0
55679: DOUBLE
55680: EQUAL
55681: IFTRUE 55685
55683: GO 55818
55685: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55686: LD_ADDR_VAR 0 5
55690: PUSH
55691: LD_VAR 0 1
55695: PUSH
55696: LD_INT 4
55698: MINUS
55699: PUSH
55700: LD_VAR 0 2
55704: PUSH
55705: LD_INT 4
55707: MINUS
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: PUSH
55717: LD_VAR 0 1
55721: PUSH
55722: LD_INT 3
55724: MINUS
55725: PUSH
55726: LD_VAR 0 2
55730: PUSH
55731: LD_INT 1
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: PUSH
55739: LD_VAR 0 1
55743: PUSH
55744: LD_INT 4
55746: PLUS
55747: PUSH
55748: LD_VAR 0 2
55752: PUSH
55753: LD_INT 4
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: PUSH
55761: LD_VAR 0 1
55765: PUSH
55766: LD_INT 3
55768: PLUS
55769: PUSH
55770: LD_VAR 0 2
55774: PUSH
55775: LD_INT 3
55777: PLUS
55778: PUSH
55779: LD_INT 5
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: LIST
55786: PUSH
55787: LD_VAR 0 1
55791: PUSH
55792: LD_VAR 0 2
55796: PUSH
55797: LD_INT 4
55799: PLUS
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: ST_TO_ADDR
// end ; 1 :
55816: GO 56516
55818: LD_INT 1
55820: DOUBLE
55821: EQUAL
55822: IFTRUE 55826
55824: GO 55959
55826: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55827: LD_ADDR_VAR 0 5
55831: PUSH
55832: LD_VAR 0 1
55836: PUSH
55837: LD_VAR 0 2
55841: PUSH
55842: LD_INT 4
55844: MINUS
55845: PUSH
55846: LD_INT 3
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: PUSH
55854: LD_VAR 0 1
55858: PUSH
55859: LD_INT 3
55861: MINUS
55862: PUSH
55863: LD_VAR 0 2
55867: PUSH
55868: LD_INT 3
55870: MINUS
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: PUSH
55880: LD_VAR 0 1
55884: PUSH
55885: LD_INT 4
55887: MINUS
55888: PUSH
55889: LD_VAR 0 2
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: LIST
55901: PUSH
55902: LD_VAR 0 1
55906: PUSH
55907: LD_VAR 0 2
55911: PUSH
55912: LD_INT 3
55914: PLUS
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: PUSH
55924: LD_VAR 0 1
55928: PUSH
55929: LD_INT 4
55931: PLUS
55932: PUSH
55933: LD_VAR 0 2
55937: PUSH
55938: LD_INT 4
55940: PLUS
55941: PUSH
55942: LD_INT 5
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: ST_TO_ADDR
// end ; 2 :
55957: GO 56516
55959: LD_INT 2
55961: DOUBLE
55962: EQUAL
55963: IFTRUE 55967
55965: GO 56096
55967: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55968: LD_ADDR_VAR 0 5
55972: PUSH
55973: LD_VAR 0 1
55977: PUSH
55978: LD_VAR 0 2
55982: PUSH
55983: LD_INT 3
55985: MINUS
55986: PUSH
55987: LD_INT 3
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: PUSH
55995: LD_VAR 0 1
55999: PUSH
56000: LD_INT 4
56002: PLUS
56003: PUSH
56004: LD_VAR 0 2
56008: PUSH
56009: LD_INT 4
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: PUSH
56017: LD_VAR 0 1
56021: PUSH
56022: LD_VAR 0 2
56026: PUSH
56027: LD_INT 4
56029: PLUS
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: PUSH
56039: LD_VAR 0 1
56043: PUSH
56044: LD_INT 3
56046: MINUS
56047: PUSH
56048: LD_VAR 0 2
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: PUSH
56061: LD_VAR 0 1
56065: PUSH
56066: LD_INT 4
56068: MINUS
56069: PUSH
56070: LD_VAR 0 2
56074: PUSH
56075: LD_INT 4
56077: MINUS
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: ST_TO_ADDR
// end ; 3 :
56094: GO 56516
56096: LD_INT 3
56098: DOUBLE
56099: EQUAL
56100: IFTRUE 56104
56102: GO 56237
56104: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56105: LD_ADDR_VAR 0 5
56109: PUSH
56110: LD_VAR 0 1
56114: PUSH
56115: LD_INT 3
56117: PLUS
56118: PUSH
56119: LD_VAR 0 2
56123: PUSH
56124: LD_INT 4
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: LIST
56131: PUSH
56132: LD_VAR 0 1
56136: PUSH
56137: LD_INT 4
56139: PLUS
56140: PUSH
56141: LD_VAR 0 2
56145: PUSH
56146: LD_INT 4
56148: PLUS
56149: PUSH
56150: LD_INT 5
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: PUSH
56158: LD_VAR 0 1
56162: PUSH
56163: LD_INT 4
56165: MINUS
56166: PUSH
56167: LD_VAR 0 2
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: LD_VAR 0 2
56189: PUSH
56190: LD_INT 4
56192: MINUS
56193: PUSH
56194: LD_INT 3
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: PUSH
56202: LD_VAR 0 1
56206: PUSH
56207: LD_INT 3
56209: MINUS
56210: PUSH
56211: LD_VAR 0 2
56215: PUSH
56216: LD_INT 3
56218: MINUS
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: ST_TO_ADDR
// end ; 4 :
56235: GO 56516
56237: LD_INT 4
56239: DOUBLE
56240: EQUAL
56241: IFTRUE 56245
56243: GO 56378
56245: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56246: LD_ADDR_VAR 0 5
56250: PUSH
56251: LD_VAR 0 1
56255: PUSH
56256: LD_VAR 0 2
56260: PUSH
56261: LD_INT 4
56263: PLUS
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: PUSH
56273: LD_VAR 0 1
56277: PUSH
56278: LD_INT 3
56280: PLUS
56281: PUSH
56282: LD_VAR 0 2
56286: PUSH
56287: LD_INT 3
56289: PLUS
56290: PUSH
56291: LD_INT 5
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: PUSH
56299: LD_VAR 0 1
56303: PUSH
56304: LD_INT 4
56306: PLUS
56307: PUSH
56308: LD_VAR 0 2
56312: PUSH
56313: LD_INT 4
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: PUSH
56321: LD_VAR 0 1
56325: PUSH
56326: LD_VAR 0 2
56330: PUSH
56331: LD_INT 3
56333: MINUS
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: PUSH
56343: LD_VAR 0 1
56347: PUSH
56348: LD_INT 4
56350: MINUS
56351: PUSH
56352: LD_VAR 0 2
56356: PUSH
56357: LD_INT 4
56359: MINUS
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: ST_TO_ADDR
// end ; 5 :
56376: GO 56516
56378: LD_INT 5
56380: DOUBLE
56381: EQUAL
56382: IFTRUE 56386
56384: GO 56515
56386: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56387: LD_ADDR_VAR 0 5
56391: PUSH
56392: LD_VAR 0 1
56396: PUSH
56397: LD_INT 4
56399: MINUS
56400: PUSH
56401: LD_VAR 0 2
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: LIST
56413: PUSH
56414: LD_VAR 0 1
56418: PUSH
56419: LD_VAR 0 2
56423: PUSH
56424: LD_INT 4
56426: MINUS
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: PUSH
56436: LD_VAR 0 1
56440: PUSH
56441: LD_INT 4
56443: PLUS
56444: PUSH
56445: LD_VAR 0 2
56449: PUSH
56450: LD_INT 4
56452: PLUS
56453: PUSH
56454: LD_INT 5
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: PUSH
56462: LD_VAR 0 1
56466: PUSH
56467: LD_INT 3
56469: PLUS
56470: PUSH
56471: LD_VAR 0 2
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: PUSH
56484: LD_VAR 0 1
56488: PUSH
56489: LD_VAR 0 2
56493: PUSH
56494: LD_INT 3
56496: PLUS
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: ST_TO_ADDR
// end ; end ;
56513: GO 56516
56515: POP
// result := list ;
56516: LD_ADDR_VAR 0 4
56520: PUSH
56521: LD_VAR 0 5
56525: ST_TO_ADDR
// end ;
56526: LD_VAR 0 4
56530: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56531: LD_INT 0
56533: PPUSH
56534: PPUSH
56535: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56536: LD_VAR 0 1
56540: NOT
56541: PUSH
56542: LD_VAR 0 2
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: LD_INT 4
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: IN
56565: NOT
56566: OR
56567: IFFALSE 56571
// exit ;
56569: GO 56654
// tmp := [ ] ;
56571: LD_ADDR_VAR 0 5
56575: PUSH
56576: EMPTY
56577: ST_TO_ADDR
// for i in units do
56578: LD_ADDR_VAR 0 4
56582: PUSH
56583: LD_VAR 0 1
56587: PUSH
56588: FOR_IN
56589: IFFALSE 56623
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56591: LD_ADDR_VAR 0 5
56595: PUSH
56596: LD_VAR 0 5
56600: PPUSH
56601: LD_VAR 0 4
56605: PPUSH
56606: LD_VAR 0 2
56610: PPUSH
56611: CALL_OW 259
56615: PPUSH
56616: CALL 58027 0 2
56620: ST_TO_ADDR
56621: GO 56588
56623: POP
56624: POP
// if not tmp then
56625: LD_VAR 0 5
56629: NOT
56630: IFFALSE 56634
// exit ;
56632: GO 56654
// result := SortListByListDesc ( units , tmp ) ;
56634: LD_ADDR_VAR 0 3
56638: PUSH
56639: LD_VAR 0 1
56643: PPUSH
56644: LD_VAR 0 5
56648: PPUSH
56649: CALL_OW 77
56653: ST_TO_ADDR
// end ;
56654: LD_VAR 0 3
56658: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56659: LD_INT 0
56661: PPUSH
56662: PPUSH
56663: PPUSH
// result := false ;
56664: LD_ADDR_VAR 0 3
56668: PUSH
56669: LD_INT 0
56671: ST_TO_ADDR
// if not building then
56672: LD_VAR 0 2
56676: NOT
56677: IFFALSE 56681
// exit ;
56679: GO 56819
// x := GetX ( building ) ;
56681: LD_ADDR_VAR 0 4
56685: PUSH
56686: LD_VAR 0 2
56690: PPUSH
56691: CALL_OW 250
56695: ST_TO_ADDR
// y := GetY ( building ) ;
56696: LD_ADDR_VAR 0 5
56700: PUSH
56701: LD_VAR 0 2
56705: PPUSH
56706: CALL_OW 251
56710: ST_TO_ADDR
// if not x or not y then
56711: LD_VAR 0 4
56715: NOT
56716: PUSH
56717: LD_VAR 0 5
56721: NOT
56722: OR
56723: IFFALSE 56727
// exit ;
56725: GO 56819
// if GetTaskList ( unit ) then
56727: LD_VAR 0 1
56731: PPUSH
56732: CALL_OW 437
56736: IFFALSE 56819
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56738: LD_STRING e
56740: PUSH
56741: LD_VAR 0 1
56745: PPUSH
56746: CALL_OW 437
56750: PUSH
56751: LD_INT 1
56753: ARRAY
56754: PUSH
56755: LD_INT 1
56757: ARRAY
56758: EQUAL
56759: PUSH
56760: LD_VAR 0 4
56764: PUSH
56765: LD_VAR 0 1
56769: PPUSH
56770: CALL_OW 437
56774: PUSH
56775: LD_INT 1
56777: ARRAY
56778: PUSH
56779: LD_INT 2
56781: ARRAY
56782: EQUAL
56783: AND
56784: PUSH
56785: LD_VAR 0 5
56789: PUSH
56790: LD_VAR 0 1
56794: PPUSH
56795: CALL_OW 437
56799: PUSH
56800: LD_INT 1
56802: ARRAY
56803: PUSH
56804: LD_INT 3
56806: ARRAY
56807: EQUAL
56808: AND
56809: IFFALSE 56819
// result := true end ;
56811: LD_ADDR_VAR 0 3
56815: PUSH
56816: LD_INT 1
56818: ST_TO_ADDR
// end ;
56819: LD_VAR 0 3
56823: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56824: LD_INT 0
56826: PPUSH
// result := false ;
56827: LD_ADDR_VAR 0 4
56831: PUSH
56832: LD_INT 0
56834: ST_TO_ADDR
// if GetTaskList ( unit ) then
56835: LD_VAR 0 1
56839: PPUSH
56840: CALL_OW 437
56844: IFFALSE 56927
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56846: LD_STRING M
56848: PUSH
56849: LD_VAR 0 1
56853: PPUSH
56854: CALL_OW 437
56858: PUSH
56859: LD_INT 1
56861: ARRAY
56862: PUSH
56863: LD_INT 1
56865: ARRAY
56866: EQUAL
56867: PUSH
56868: LD_VAR 0 2
56872: PUSH
56873: LD_VAR 0 1
56877: PPUSH
56878: CALL_OW 437
56882: PUSH
56883: LD_INT 1
56885: ARRAY
56886: PUSH
56887: LD_INT 2
56889: ARRAY
56890: EQUAL
56891: AND
56892: PUSH
56893: LD_VAR 0 3
56897: PUSH
56898: LD_VAR 0 1
56902: PPUSH
56903: CALL_OW 437
56907: PUSH
56908: LD_INT 1
56910: ARRAY
56911: PUSH
56912: LD_INT 3
56914: ARRAY
56915: EQUAL
56916: AND
56917: IFFALSE 56927
// result := true ;
56919: LD_ADDR_VAR 0 4
56923: PUSH
56924: LD_INT 1
56926: ST_TO_ADDR
// end ; end ;
56927: LD_VAR 0 4
56931: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56932: LD_INT 0
56934: PPUSH
56935: PPUSH
56936: PPUSH
56937: PPUSH
// if not unit or not area then
56938: LD_VAR 0 1
56942: NOT
56943: PUSH
56944: LD_VAR 0 2
56948: NOT
56949: OR
56950: IFFALSE 56954
// exit ;
56952: GO 57130
// tmp := AreaToList ( area , i ) ;
56954: LD_ADDR_VAR 0 6
56958: PUSH
56959: LD_VAR 0 2
56963: PPUSH
56964: LD_VAR 0 5
56968: PPUSH
56969: CALL_OW 517
56973: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56974: LD_ADDR_VAR 0 5
56978: PUSH
56979: DOUBLE
56980: LD_INT 1
56982: DEC
56983: ST_TO_ADDR
56984: LD_VAR 0 6
56988: PUSH
56989: LD_INT 1
56991: ARRAY
56992: PUSH
56993: FOR_TO
56994: IFFALSE 57128
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56996: LD_ADDR_VAR 0 7
57000: PUSH
57001: LD_VAR 0 6
57005: PUSH
57006: LD_INT 1
57008: ARRAY
57009: PUSH
57010: LD_VAR 0 5
57014: ARRAY
57015: PUSH
57016: LD_VAR 0 6
57020: PUSH
57021: LD_INT 2
57023: ARRAY
57024: PUSH
57025: LD_VAR 0 5
57029: ARRAY
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57035: LD_INT 92
57037: PUSH
57038: LD_VAR 0 7
57042: PUSH
57043: LD_INT 1
57045: ARRAY
57046: PUSH
57047: LD_VAR 0 7
57051: PUSH
57052: LD_INT 2
57054: ARRAY
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: PPUSH
57065: CALL_OW 69
57069: PUSH
57070: LD_INT 0
57072: EQUAL
57073: IFFALSE 57126
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57075: LD_VAR 0 1
57079: PPUSH
57080: LD_VAR 0 7
57084: PUSH
57085: LD_INT 1
57087: ARRAY
57088: PPUSH
57089: LD_VAR 0 7
57093: PUSH
57094: LD_INT 2
57096: ARRAY
57097: PPUSH
57098: LD_VAR 0 3
57102: PPUSH
57103: CALL_OW 48
// result := IsPlaced ( unit ) ;
57107: LD_ADDR_VAR 0 4
57111: PUSH
57112: LD_VAR 0 1
57116: PPUSH
57117: CALL_OW 305
57121: ST_TO_ADDR
// exit ;
57122: POP
57123: POP
57124: GO 57130
// end ; end ;
57126: GO 56993
57128: POP
57129: POP
// end ;
57130: LD_VAR 0 4
57134: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57135: LD_INT 0
57137: PPUSH
57138: PPUSH
57139: PPUSH
// if not side or side > 8 then
57140: LD_VAR 0 1
57144: NOT
57145: PUSH
57146: LD_VAR 0 1
57150: PUSH
57151: LD_INT 8
57153: GREATER
57154: OR
57155: IFFALSE 57159
// exit ;
57157: GO 57346
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57159: LD_ADDR_VAR 0 4
57163: PUSH
57164: LD_INT 22
57166: PUSH
57167: LD_VAR 0 1
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 21
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PPUSH
57190: CALL_OW 69
57194: ST_TO_ADDR
// if not tmp then
57195: LD_VAR 0 4
57199: NOT
57200: IFFALSE 57204
// exit ;
57202: GO 57346
// enable_addtolog := true ;
57204: LD_ADDR_OWVAR 81
57208: PUSH
57209: LD_INT 1
57211: ST_TO_ADDR
// AddToLog ( [ ) ;
57212: LD_STRING [
57214: PPUSH
57215: CALL_OW 561
// for i in tmp do
57219: LD_ADDR_VAR 0 3
57223: PUSH
57224: LD_VAR 0 4
57228: PUSH
57229: FOR_IN
57230: IFFALSE 57337
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57232: LD_STRING [
57234: PUSH
57235: LD_VAR 0 3
57239: PPUSH
57240: CALL_OW 266
57244: STR
57245: PUSH
57246: LD_STRING , 
57248: STR
57249: PUSH
57250: LD_VAR 0 3
57254: PPUSH
57255: CALL_OW 250
57259: STR
57260: PUSH
57261: LD_STRING , 
57263: STR
57264: PUSH
57265: LD_VAR 0 3
57269: PPUSH
57270: CALL_OW 251
57274: STR
57275: PUSH
57276: LD_STRING , 
57278: STR
57279: PUSH
57280: LD_VAR 0 3
57284: PPUSH
57285: CALL_OW 254
57289: STR
57290: PUSH
57291: LD_STRING , 
57293: STR
57294: PUSH
57295: LD_VAR 0 3
57299: PPUSH
57300: LD_INT 1
57302: PPUSH
57303: CALL_OW 268
57307: STR
57308: PUSH
57309: LD_STRING , 
57311: STR
57312: PUSH
57313: LD_VAR 0 3
57317: PPUSH
57318: LD_INT 2
57320: PPUSH
57321: CALL_OW 268
57325: STR
57326: PUSH
57327: LD_STRING ],
57329: STR
57330: PPUSH
57331: CALL_OW 561
// end ;
57335: GO 57229
57337: POP
57338: POP
// AddToLog ( ]; ) ;
57339: LD_STRING ];
57341: PPUSH
57342: CALL_OW 561
// end ;
57346: LD_VAR 0 2
57350: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57351: LD_INT 0
57353: PPUSH
57354: PPUSH
57355: PPUSH
57356: PPUSH
57357: PPUSH
// if not area or not rate or not max then
57358: LD_VAR 0 1
57362: NOT
57363: PUSH
57364: LD_VAR 0 2
57368: NOT
57369: OR
57370: PUSH
57371: LD_VAR 0 4
57375: NOT
57376: OR
57377: IFFALSE 57381
// exit ;
57379: GO 57570
// while 1 do
57381: LD_INT 1
57383: IFFALSE 57570
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57385: LD_ADDR_VAR 0 9
57389: PUSH
57390: LD_VAR 0 1
57394: PPUSH
57395: LD_INT 1
57397: PPUSH
57398: CALL_OW 287
57402: PUSH
57403: LD_INT 10
57405: MUL
57406: ST_TO_ADDR
// r := rate / 10 ;
57407: LD_ADDR_VAR 0 7
57411: PUSH
57412: LD_VAR 0 2
57416: PUSH
57417: LD_INT 10
57419: DIVREAL
57420: ST_TO_ADDR
// time := 1 1$00 ;
57421: LD_ADDR_VAR 0 8
57425: PUSH
57426: LD_INT 2100
57428: ST_TO_ADDR
// if amount < min then
57429: LD_VAR 0 9
57433: PUSH
57434: LD_VAR 0 3
57438: LESS
57439: IFFALSE 57457
// r := r * 2 else
57441: LD_ADDR_VAR 0 7
57445: PUSH
57446: LD_VAR 0 7
57450: PUSH
57451: LD_INT 2
57453: MUL
57454: ST_TO_ADDR
57455: GO 57483
// if amount > max then
57457: LD_VAR 0 9
57461: PUSH
57462: LD_VAR 0 4
57466: GREATER
57467: IFFALSE 57483
// r := r / 2 ;
57469: LD_ADDR_VAR 0 7
57473: PUSH
57474: LD_VAR 0 7
57478: PUSH
57479: LD_INT 2
57481: DIVREAL
57482: ST_TO_ADDR
// time := time / r ;
57483: LD_ADDR_VAR 0 8
57487: PUSH
57488: LD_VAR 0 8
57492: PUSH
57493: LD_VAR 0 7
57497: DIVREAL
57498: ST_TO_ADDR
// if time < 0 then
57499: LD_VAR 0 8
57503: PUSH
57504: LD_INT 0
57506: LESS
57507: IFFALSE 57524
// time := time * - 1 ;
57509: LD_ADDR_VAR 0 8
57513: PUSH
57514: LD_VAR 0 8
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: MUL
57523: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57524: LD_VAR 0 8
57528: PUSH
57529: LD_INT 35
57531: PPUSH
57532: LD_INT 875
57534: PPUSH
57535: CALL_OW 12
57539: PLUS
57540: PPUSH
57541: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57545: LD_INT 1
57547: PPUSH
57548: LD_INT 5
57550: PPUSH
57551: CALL_OW 12
57555: PPUSH
57556: LD_VAR 0 1
57560: PPUSH
57561: LD_INT 1
57563: PPUSH
57564: CALL_OW 55
// end ;
57568: GO 57381
// end ;
57570: LD_VAR 0 5
57574: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57575: LD_INT 0
57577: PPUSH
57578: PPUSH
57579: PPUSH
57580: PPUSH
57581: PPUSH
57582: PPUSH
57583: PPUSH
57584: PPUSH
// if not turrets or not factories then
57585: LD_VAR 0 1
57589: NOT
57590: PUSH
57591: LD_VAR 0 2
57595: NOT
57596: OR
57597: IFFALSE 57601
// exit ;
57599: GO 57908
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57601: LD_ADDR_VAR 0 10
57605: PUSH
57606: LD_INT 5
57608: PUSH
57609: LD_INT 6
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: LD_INT 4
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: LD_INT 5
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 24
57643: PUSH
57644: LD_INT 25
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 23
57653: PUSH
57654: LD_INT 27
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 42
57667: PUSH
57668: LD_INT 43
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 44
57677: PUSH
57678: LD_INT 46
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 45
57687: PUSH
57688: LD_INT 47
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: LIST
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: ST_TO_ADDR
// result := [ ] ;
57705: LD_ADDR_VAR 0 3
57709: PUSH
57710: EMPTY
57711: ST_TO_ADDR
// for i in turrets do
57712: LD_ADDR_VAR 0 4
57716: PUSH
57717: LD_VAR 0 1
57721: PUSH
57722: FOR_IN
57723: IFFALSE 57906
// begin nat := GetNation ( i ) ;
57725: LD_ADDR_VAR 0 7
57729: PUSH
57730: LD_VAR 0 4
57734: PPUSH
57735: CALL_OW 248
57739: ST_TO_ADDR
// weapon := 0 ;
57740: LD_ADDR_VAR 0 8
57744: PUSH
57745: LD_INT 0
57747: ST_TO_ADDR
// if not nat then
57748: LD_VAR 0 7
57752: NOT
57753: IFFALSE 57757
// continue ;
57755: GO 57722
// for j in list [ nat ] do
57757: LD_ADDR_VAR 0 5
57761: PUSH
57762: LD_VAR 0 10
57766: PUSH
57767: LD_VAR 0 7
57771: ARRAY
57772: PUSH
57773: FOR_IN
57774: IFFALSE 57815
// if GetBWeapon ( i ) = j [ 1 ] then
57776: LD_VAR 0 4
57780: PPUSH
57781: CALL_OW 269
57785: PUSH
57786: LD_VAR 0 5
57790: PUSH
57791: LD_INT 1
57793: ARRAY
57794: EQUAL
57795: IFFALSE 57813
// begin weapon := j [ 2 ] ;
57797: LD_ADDR_VAR 0 8
57801: PUSH
57802: LD_VAR 0 5
57806: PUSH
57807: LD_INT 2
57809: ARRAY
57810: ST_TO_ADDR
// break ;
57811: GO 57815
// end ;
57813: GO 57773
57815: POP
57816: POP
// if not weapon then
57817: LD_VAR 0 8
57821: NOT
57822: IFFALSE 57826
// continue ;
57824: GO 57722
// for k in factories do
57826: LD_ADDR_VAR 0 6
57830: PUSH
57831: LD_VAR 0 2
57835: PUSH
57836: FOR_IN
57837: IFFALSE 57902
// begin weapons := AvailableWeaponList ( k ) ;
57839: LD_ADDR_VAR 0 9
57843: PUSH
57844: LD_VAR 0 6
57848: PPUSH
57849: CALL_OW 478
57853: ST_TO_ADDR
// if not weapons then
57854: LD_VAR 0 9
57858: NOT
57859: IFFALSE 57863
// continue ;
57861: GO 57836
// if weapon in weapons then
57863: LD_VAR 0 8
57867: PUSH
57868: LD_VAR 0 9
57872: IN
57873: IFFALSE 57900
// begin result := [ i , weapon ] ;
57875: LD_ADDR_VAR 0 3
57879: PUSH
57880: LD_VAR 0 4
57884: PUSH
57885: LD_VAR 0 8
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: ST_TO_ADDR
// exit ;
57894: POP
57895: POP
57896: POP
57897: POP
57898: GO 57908
// end ; end ;
57900: GO 57836
57902: POP
57903: POP
// end ;
57904: GO 57722
57906: POP
57907: POP
// end ;
57908: LD_VAR 0 3
57912: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57913: LD_INT 0
57915: PPUSH
// if not side or side > 8 then
57916: LD_VAR 0 3
57920: NOT
57921: PUSH
57922: LD_VAR 0 3
57926: PUSH
57927: LD_INT 8
57929: GREATER
57930: OR
57931: IFFALSE 57935
// exit ;
57933: GO 57994
// if not range then
57935: LD_VAR 0 4
57939: NOT
57940: IFFALSE 57951
// range := - 12 ;
57942: LD_ADDR_VAR 0 4
57946: PUSH
57947: LD_INT 12
57949: NEG
57950: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57951: LD_VAR 0 1
57955: PPUSH
57956: LD_VAR 0 2
57960: PPUSH
57961: LD_VAR 0 3
57965: PPUSH
57966: LD_VAR 0 4
57970: PPUSH
57971: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57975: LD_VAR 0 1
57979: PPUSH
57980: LD_VAR 0 2
57984: PPUSH
57985: LD_VAR 0 3
57989: PPUSH
57990: CALL_OW 331
// end ;
57994: LD_VAR 0 5
57998: RET
// export function Video ( mode ) ; begin
57999: LD_INT 0
58001: PPUSH
// ingame_video = mode ;
58002: LD_ADDR_OWVAR 52
58006: PUSH
58007: LD_VAR 0 1
58011: ST_TO_ADDR
// interface_hidden = mode ;
58012: LD_ADDR_OWVAR 54
58016: PUSH
58017: LD_VAR 0 1
58021: ST_TO_ADDR
// end ;
58022: LD_VAR 0 2
58026: RET
// export function Join ( array , element ) ; begin
58027: LD_INT 0
58029: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58030: LD_ADDR_VAR 0 3
58034: PUSH
58035: LD_VAR 0 1
58039: PPUSH
58040: LD_VAR 0 1
58044: PUSH
58045: LD_INT 1
58047: PLUS
58048: PPUSH
58049: LD_VAR 0 2
58053: PPUSH
58054: CALL_OW 1
58058: ST_TO_ADDR
// end ;
58059: LD_VAR 0 3
58063: RET
// export function JoinUnion ( array , element ) ; begin
58064: LD_INT 0
58066: PPUSH
// result := array union element ;
58067: LD_ADDR_VAR 0 3
58071: PUSH
58072: LD_VAR 0 1
58076: PUSH
58077: LD_VAR 0 2
58081: UNION
58082: ST_TO_ADDR
// end ;
58083: LD_VAR 0 3
58087: RET
// export function GetBehemoths ( side ) ; begin
58088: LD_INT 0
58090: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58091: LD_ADDR_VAR 0 2
58095: PUSH
58096: LD_INT 22
58098: PUSH
58099: LD_VAR 0 1
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 31
58110: PUSH
58111: LD_INT 25
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PPUSH
58122: CALL_OW 69
58126: ST_TO_ADDR
// end ;
58127: LD_VAR 0 2
58131: RET
// export function Shuffle ( array ) ; var i , index ; begin
58132: LD_INT 0
58134: PPUSH
58135: PPUSH
58136: PPUSH
// result := [ ] ;
58137: LD_ADDR_VAR 0 2
58141: PUSH
58142: EMPTY
58143: ST_TO_ADDR
// if not array then
58144: LD_VAR 0 1
58148: NOT
58149: IFFALSE 58153
// exit ;
58151: GO 58252
// Randomize ;
58153: CALL_OW 10
// for i = array downto 1 do
58157: LD_ADDR_VAR 0 3
58161: PUSH
58162: DOUBLE
58163: LD_VAR 0 1
58167: INC
58168: ST_TO_ADDR
58169: LD_INT 1
58171: PUSH
58172: FOR_DOWNTO
58173: IFFALSE 58250
// begin index := rand ( 1 , array ) ;
58175: LD_ADDR_VAR 0 4
58179: PUSH
58180: LD_INT 1
58182: PPUSH
58183: LD_VAR 0 1
58187: PPUSH
58188: CALL_OW 12
58192: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58193: LD_ADDR_VAR 0 2
58197: PUSH
58198: LD_VAR 0 2
58202: PPUSH
58203: LD_VAR 0 2
58207: PUSH
58208: LD_INT 1
58210: PLUS
58211: PPUSH
58212: LD_VAR 0 1
58216: PUSH
58217: LD_VAR 0 4
58221: ARRAY
58222: PPUSH
58223: CALL_OW 2
58227: ST_TO_ADDR
// array := Delete ( array , index ) ;
58228: LD_ADDR_VAR 0 1
58232: PUSH
58233: LD_VAR 0 1
58237: PPUSH
58238: LD_VAR 0 4
58242: PPUSH
58243: CALL_OW 3
58247: ST_TO_ADDR
// end ;
58248: GO 58172
58250: POP
58251: POP
// end ;
58252: LD_VAR 0 2
58256: RET
// export function GetBaseMaterials ( base ) ; begin
58257: LD_INT 0
58259: PPUSH
// result := [ 0 , 0 , 0 ] ;
58260: LD_ADDR_VAR 0 2
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// if not base then
58279: LD_VAR 0 1
58283: NOT
58284: IFFALSE 58288
// exit ;
58286: GO 58337
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58288: LD_ADDR_VAR 0 2
58292: PUSH
58293: LD_VAR 0 1
58297: PPUSH
58298: LD_INT 1
58300: PPUSH
58301: CALL_OW 275
58305: PUSH
58306: LD_VAR 0 1
58310: PPUSH
58311: LD_INT 2
58313: PPUSH
58314: CALL_OW 275
58318: PUSH
58319: LD_VAR 0 1
58323: PPUSH
58324: LD_INT 3
58326: PPUSH
58327: CALL_OW 275
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: ST_TO_ADDR
// end ;
58337: LD_VAR 0 2
58341: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58342: LD_INT 0
58344: PPUSH
58345: PPUSH
// result := array ;
58346: LD_ADDR_VAR 0 3
58350: PUSH
58351: LD_VAR 0 1
58355: ST_TO_ADDR
// if size >= result then
58356: LD_VAR 0 2
58360: PUSH
58361: LD_VAR 0 3
58365: GREATEREQUAL
58366: IFFALSE 58370
// exit ;
58368: GO 58420
// if size then
58370: LD_VAR 0 2
58374: IFFALSE 58420
// for i := array downto size do
58376: LD_ADDR_VAR 0 4
58380: PUSH
58381: DOUBLE
58382: LD_VAR 0 1
58386: INC
58387: ST_TO_ADDR
58388: LD_VAR 0 2
58392: PUSH
58393: FOR_DOWNTO
58394: IFFALSE 58418
// result := Delete ( result , result ) ;
58396: LD_ADDR_VAR 0 3
58400: PUSH
58401: LD_VAR 0 3
58405: PPUSH
58406: LD_VAR 0 3
58410: PPUSH
58411: CALL_OW 3
58415: ST_TO_ADDR
58416: GO 58393
58418: POP
58419: POP
// end ;
58420: LD_VAR 0 3
58424: RET
// export function ComExit ( unit ) ; var tmp ; begin
58425: LD_INT 0
58427: PPUSH
58428: PPUSH
// if not IsInUnit ( unit ) then
58429: LD_VAR 0 1
58433: PPUSH
58434: CALL_OW 310
58438: NOT
58439: IFFALSE 58443
// exit ;
58441: GO 58503
// tmp := IsInUnit ( unit ) ;
58443: LD_ADDR_VAR 0 3
58447: PUSH
58448: LD_VAR 0 1
58452: PPUSH
58453: CALL_OW 310
58457: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58458: LD_VAR 0 3
58462: PPUSH
58463: CALL_OW 247
58467: PUSH
58468: LD_INT 2
58470: EQUAL
58471: IFFALSE 58484
// ComExitVehicle ( unit ) else
58473: LD_VAR 0 1
58477: PPUSH
58478: CALL_OW 121
58482: GO 58493
// ComExitBuilding ( unit ) ;
58484: LD_VAR 0 1
58488: PPUSH
58489: CALL_OW 122
// result := tmp ;
58493: LD_ADDR_VAR 0 2
58497: PUSH
58498: LD_VAR 0 3
58502: ST_TO_ADDR
// end ;
58503: LD_VAR 0 2
58507: RET
// export function ComExitAll ( units ) ; var i ; begin
58508: LD_INT 0
58510: PPUSH
58511: PPUSH
// if not units then
58512: LD_VAR 0 1
58516: NOT
58517: IFFALSE 58521
// exit ;
58519: GO 58547
// for i in units do
58521: LD_ADDR_VAR 0 3
58525: PUSH
58526: LD_VAR 0 1
58530: PUSH
58531: FOR_IN
58532: IFFALSE 58545
// ComExit ( i ) ;
58534: LD_VAR 0 3
58538: PPUSH
58539: CALL 58425 0 1
58543: GO 58531
58545: POP
58546: POP
// end ;
58547: LD_VAR 0 2
58551: RET
// export function ResetHc ; begin
58552: LD_INT 0
58554: PPUSH
// InitHc ;
58555: CALL_OW 19
// hc_importance := 0 ;
58559: LD_ADDR_OWVAR 32
58563: PUSH
58564: LD_INT 0
58566: ST_TO_ADDR
// end ;
58567: LD_VAR 0 1
58571: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58572: LD_INT 0
58574: PPUSH
58575: PPUSH
58576: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58577: LD_ADDR_VAR 0 6
58581: PUSH
58582: LD_VAR 0 1
58586: PUSH
58587: LD_VAR 0 3
58591: PLUS
58592: PUSH
58593: LD_INT 2
58595: DIV
58596: ST_TO_ADDR
// if _x < 0 then
58597: LD_VAR 0 6
58601: PUSH
58602: LD_INT 0
58604: LESS
58605: IFFALSE 58622
// _x := _x * - 1 ;
58607: LD_ADDR_VAR 0 6
58611: PUSH
58612: LD_VAR 0 6
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: MUL
58621: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58622: LD_ADDR_VAR 0 7
58626: PUSH
58627: LD_VAR 0 2
58631: PUSH
58632: LD_VAR 0 4
58636: PLUS
58637: PUSH
58638: LD_INT 2
58640: DIV
58641: ST_TO_ADDR
// if _y < 0 then
58642: LD_VAR 0 7
58646: PUSH
58647: LD_INT 0
58649: LESS
58650: IFFALSE 58667
// _y := _y * - 1 ;
58652: LD_ADDR_VAR 0 7
58656: PUSH
58657: LD_VAR 0 7
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: MUL
58666: ST_TO_ADDR
// result := [ _x , _y ] ;
58667: LD_ADDR_VAR 0 5
58671: PUSH
58672: LD_VAR 0 6
58676: PUSH
58677: LD_VAR 0 7
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: ST_TO_ADDR
// end ;
58686: LD_VAR 0 5
58690: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58691: LD_INT 0
58693: PPUSH
58694: PPUSH
58695: PPUSH
58696: PPUSH
// task := GetTaskList ( unit ) ;
58697: LD_ADDR_VAR 0 7
58701: PUSH
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL_OW 437
58711: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58712: LD_VAR 0 7
58716: NOT
58717: PUSH
58718: LD_VAR 0 1
58722: PPUSH
58723: LD_VAR 0 2
58727: PPUSH
58728: CALL_OW 308
58732: NOT
58733: AND
58734: IFFALSE 58738
// exit ;
58736: GO 58856
// if IsInArea ( unit , area ) then
58738: LD_VAR 0 1
58742: PPUSH
58743: LD_VAR 0 2
58747: PPUSH
58748: CALL_OW 308
58752: IFFALSE 58770
// begin ComMoveToArea ( unit , goAway ) ;
58754: LD_VAR 0 1
58758: PPUSH
58759: LD_VAR 0 3
58763: PPUSH
58764: CALL_OW 113
// exit ;
58768: GO 58856
// end ; if task [ 1 ] [ 1 ] <> M then
58770: LD_VAR 0 7
58774: PUSH
58775: LD_INT 1
58777: ARRAY
58778: PUSH
58779: LD_INT 1
58781: ARRAY
58782: PUSH
58783: LD_STRING M
58785: NONEQUAL
58786: IFFALSE 58790
// exit ;
58788: GO 58856
// x := task [ 1 ] [ 2 ] ;
58790: LD_ADDR_VAR 0 5
58794: PUSH
58795: LD_VAR 0 7
58799: PUSH
58800: LD_INT 1
58802: ARRAY
58803: PUSH
58804: LD_INT 2
58806: ARRAY
58807: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58808: LD_ADDR_VAR 0 6
58812: PUSH
58813: LD_VAR 0 7
58817: PUSH
58818: LD_INT 1
58820: ARRAY
58821: PUSH
58822: LD_INT 3
58824: ARRAY
58825: ST_TO_ADDR
// if InArea ( x , y , area ) then
58826: LD_VAR 0 5
58830: PPUSH
58831: LD_VAR 0 6
58835: PPUSH
58836: LD_VAR 0 2
58840: PPUSH
58841: CALL_OW 309
58845: IFFALSE 58856
// ComStop ( unit ) ;
58847: LD_VAR 0 1
58851: PPUSH
58852: CALL_OW 141
// end ;
58856: LD_VAR 0 4
58860: RET
// export function Abs ( value ) ; begin
58861: LD_INT 0
58863: PPUSH
// result := value ;
58864: LD_ADDR_VAR 0 2
58868: PUSH
58869: LD_VAR 0 1
58873: ST_TO_ADDR
// if value < 0 then
58874: LD_VAR 0 1
58878: PUSH
58879: LD_INT 0
58881: LESS
58882: IFFALSE 58899
// result := value * - 1 ;
58884: LD_ADDR_VAR 0 2
58888: PUSH
58889: LD_VAR 0 1
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: MUL
58898: ST_TO_ADDR
// end ;
58899: LD_VAR 0 2
58903: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58904: LD_INT 0
58906: PPUSH
58907: PPUSH
58908: PPUSH
58909: PPUSH
58910: PPUSH
58911: PPUSH
58912: PPUSH
58913: PPUSH
// if not unit or not building then
58914: LD_VAR 0 1
58918: NOT
58919: PUSH
58920: LD_VAR 0 2
58924: NOT
58925: OR
58926: IFFALSE 58930
// exit ;
58928: GO 59156
// x := GetX ( building ) ;
58930: LD_ADDR_VAR 0 4
58934: PUSH
58935: LD_VAR 0 2
58939: PPUSH
58940: CALL_OW 250
58944: ST_TO_ADDR
// y := GetY ( building ) ;
58945: LD_ADDR_VAR 0 6
58949: PUSH
58950: LD_VAR 0 2
58954: PPUSH
58955: CALL_OW 251
58959: ST_TO_ADDR
// d := GetDir ( building ) ;
58960: LD_ADDR_VAR 0 8
58964: PUSH
58965: LD_VAR 0 2
58969: PPUSH
58970: CALL_OW 254
58974: ST_TO_ADDR
// r := 4 ;
58975: LD_ADDR_VAR 0 9
58979: PUSH
58980: LD_INT 4
58982: ST_TO_ADDR
// for i := 1 to 5 do
58983: LD_ADDR_VAR 0 10
58987: PUSH
58988: DOUBLE
58989: LD_INT 1
58991: DEC
58992: ST_TO_ADDR
58993: LD_INT 5
58995: PUSH
58996: FOR_TO
58997: IFFALSE 59154
// begin _x := ShiftX ( x , d , r + i ) ;
58999: LD_ADDR_VAR 0 5
59003: PUSH
59004: LD_VAR 0 4
59008: PPUSH
59009: LD_VAR 0 8
59013: PPUSH
59014: LD_VAR 0 9
59018: PUSH
59019: LD_VAR 0 10
59023: PLUS
59024: PPUSH
59025: CALL_OW 272
59029: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59030: LD_ADDR_VAR 0 7
59034: PUSH
59035: LD_VAR 0 6
59039: PPUSH
59040: LD_VAR 0 8
59044: PPUSH
59045: LD_VAR 0 9
59049: PUSH
59050: LD_VAR 0 10
59054: PLUS
59055: PPUSH
59056: CALL_OW 273
59060: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59061: LD_VAR 0 5
59065: PPUSH
59066: LD_VAR 0 7
59070: PPUSH
59071: CALL_OW 488
59075: PUSH
59076: LD_VAR 0 5
59080: PPUSH
59081: LD_VAR 0 7
59085: PPUSH
59086: CALL_OW 428
59090: PPUSH
59091: CALL_OW 247
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: IN
59106: NOT
59107: AND
59108: IFFALSE 59152
// begin ComMoveXY ( unit , _x , _y ) ;
59110: LD_VAR 0 1
59114: PPUSH
59115: LD_VAR 0 5
59119: PPUSH
59120: LD_VAR 0 7
59124: PPUSH
59125: CALL_OW 111
// result := [ _x , _y ] ;
59129: LD_ADDR_VAR 0 3
59133: PUSH
59134: LD_VAR 0 5
59138: PUSH
59139: LD_VAR 0 7
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: ST_TO_ADDR
// exit ;
59148: POP
59149: POP
59150: GO 59156
// end ; end ;
59152: GO 58996
59154: POP
59155: POP
// end ;
59156: LD_VAR 0 3
59160: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59161: LD_INT 0
59163: PPUSH
59164: PPUSH
59165: PPUSH
// result := 0 ;
59166: LD_ADDR_VAR 0 3
59170: PUSH
59171: LD_INT 0
59173: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59174: LD_VAR 0 1
59178: PUSH
59179: LD_INT 0
59181: LESS
59182: PUSH
59183: LD_VAR 0 1
59187: PUSH
59188: LD_INT 8
59190: GREATER
59191: OR
59192: PUSH
59193: LD_VAR 0 2
59197: PUSH
59198: LD_INT 0
59200: LESS
59201: OR
59202: PUSH
59203: LD_VAR 0 2
59207: PUSH
59208: LD_INT 8
59210: GREATER
59211: OR
59212: IFFALSE 59216
// exit ;
59214: GO 59291
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59216: LD_ADDR_VAR 0 4
59220: PUSH
59221: LD_INT 22
59223: PUSH
59224: LD_VAR 0 2
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PPUSH
59233: CALL_OW 69
59237: PUSH
59238: FOR_IN
59239: IFFALSE 59289
// begin un := UnitShoot ( i ) ;
59241: LD_ADDR_VAR 0 5
59245: PUSH
59246: LD_VAR 0 4
59250: PPUSH
59251: CALL_OW 504
59255: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59256: LD_VAR 0 5
59260: PPUSH
59261: CALL_OW 255
59265: PUSH
59266: LD_VAR 0 1
59270: EQUAL
59271: IFFALSE 59287
// begin result := un ;
59273: LD_ADDR_VAR 0 3
59277: PUSH
59278: LD_VAR 0 5
59282: ST_TO_ADDR
// exit ;
59283: POP
59284: POP
59285: GO 59291
// end ; end ;
59287: GO 59238
59289: POP
59290: POP
// end ;
59291: LD_VAR 0 3
59295: RET
// export function GetCargoBay ( units ) ; begin
59296: LD_INT 0
59298: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59299: LD_ADDR_VAR 0 2
59303: PUSH
59304: LD_VAR 0 1
59308: PPUSH
59309: LD_INT 2
59311: PUSH
59312: LD_INT 34
59314: PUSH
59315: LD_INT 12
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 34
59324: PUSH
59325: LD_INT 51
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 34
59334: PUSH
59335: LD_INT 32
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 34
59344: PUSH
59345: LD_INT 89
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: PPUSH
59359: CALL_OW 72
59363: ST_TO_ADDR
// end ;
59364: LD_VAR 0 2
59368: RET
// export function Negate ( value ) ; begin
59369: LD_INT 0
59371: PPUSH
// result := not value ;
59372: LD_ADDR_VAR 0 2
59376: PUSH
59377: LD_VAR 0 1
59381: NOT
59382: ST_TO_ADDR
// end ;
59383: LD_VAR 0 2
59387: RET
// export function Inc ( value ) ; begin
59388: LD_INT 0
59390: PPUSH
// result := value + 1 ;
59391: LD_ADDR_VAR 0 2
59395: PUSH
59396: LD_VAR 0 1
59400: PUSH
59401: LD_INT 1
59403: PLUS
59404: ST_TO_ADDR
// end ;
59405: LD_VAR 0 2
59409: RET
// export function Dec ( value ) ; begin
59410: LD_INT 0
59412: PPUSH
// result := value - 1 ;
59413: LD_ADDR_VAR 0 2
59417: PUSH
59418: LD_VAR 0 1
59422: PUSH
59423: LD_INT 1
59425: MINUS
59426: ST_TO_ADDR
// end ;
59427: LD_VAR 0 2
59431: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59432: LD_INT 0
59434: PPUSH
59435: PPUSH
59436: PPUSH
59437: PPUSH
59438: PPUSH
59439: PPUSH
59440: PPUSH
59441: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59442: LD_VAR 0 1
59446: PPUSH
59447: LD_VAR 0 2
59451: PPUSH
59452: CALL_OW 488
59456: NOT
59457: PUSH
59458: LD_VAR 0 3
59462: PPUSH
59463: LD_VAR 0 4
59467: PPUSH
59468: CALL_OW 488
59472: NOT
59473: OR
59474: IFFALSE 59487
// begin result := - 1 ;
59476: LD_ADDR_VAR 0 5
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: ST_TO_ADDR
// exit ;
59485: GO 59722
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59487: LD_ADDR_VAR 0 12
59491: PUSH
59492: LD_VAR 0 1
59496: PPUSH
59497: LD_VAR 0 2
59501: PPUSH
59502: LD_VAR 0 3
59506: PPUSH
59507: LD_VAR 0 4
59511: PPUSH
59512: CALL 58572 0 4
59516: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59517: LD_ADDR_VAR 0 11
59521: PUSH
59522: LD_VAR 0 1
59526: PPUSH
59527: LD_VAR 0 2
59531: PPUSH
59532: LD_VAR 0 12
59536: PUSH
59537: LD_INT 1
59539: ARRAY
59540: PPUSH
59541: LD_VAR 0 12
59545: PUSH
59546: LD_INT 2
59548: ARRAY
59549: PPUSH
59550: CALL_OW 298
59554: ST_TO_ADDR
// distance := 9999 ;
59555: LD_ADDR_VAR 0 10
59559: PUSH
59560: LD_INT 9999
59562: ST_TO_ADDR
// for i := 0 to 5 do
59563: LD_ADDR_VAR 0 6
59567: PUSH
59568: DOUBLE
59569: LD_INT 0
59571: DEC
59572: ST_TO_ADDR
59573: LD_INT 5
59575: PUSH
59576: FOR_TO
59577: IFFALSE 59720
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59579: LD_ADDR_VAR 0 7
59583: PUSH
59584: LD_VAR 0 1
59588: PPUSH
59589: LD_VAR 0 6
59593: PPUSH
59594: LD_VAR 0 11
59598: PPUSH
59599: CALL_OW 272
59603: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59604: LD_ADDR_VAR 0 8
59608: PUSH
59609: LD_VAR 0 2
59613: PPUSH
59614: LD_VAR 0 6
59618: PPUSH
59619: LD_VAR 0 11
59623: PPUSH
59624: CALL_OW 273
59628: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59629: LD_VAR 0 7
59633: PPUSH
59634: LD_VAR 0 8
59638: PPUSH
59639: CALL_OW 488
59643: NOT
59644: IFFALSE 59648
// continue ;
59646: GO 59576
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59648: LD_ADDR_VAR 0 9
59652: PUSH
59653: LD_VAR 0 12
59657: PUSH
59658: LD_INT 1
59660: ARRAY
59661: PPUSH
59662: LD_VAR 0 12
59666: PUSH
59667: LD_INT 2
59669: ARRAY
59670: PPUSH
59671: LD_VAR 0 7
59675: PPUSH
59676: LD_VAR 0 8
59680: PPUSH
59681: CALL_OW 298
59685: ST_TO_ADDR
// if tmp < distance then
59686: LD_VAR 0 9
59690: PUSH
59691: LD_VAR 0 10
59695: LESS
59696: IFFALSE 59718
// begin result := i ;
59698: LD_ADDR_VAR 0 5
59702: PUSH
59703: LD_VAR 0 6
59707: ST_TO_ADDR
// distance := tmp ;
59708: LD_ADDR_VAR 0 10
59712: PUSH
59713: LD_VAR 0 9
59717: ST_TO_ADDR
// end ; end ;
59718: GO 59576
59720: POP
59721: POP
// end ;
59722: LD_VAR 0 5
59726: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59727: LD_INT 0
59729: PPUSH
59730: PPUSH
// if not driver or not IsInUnit ( driver ) then
59731: LD_VAR 0 1
59735: NOT
59736: PUSH
59737: LD_VAR 0 1
59741: PPUSH
59742: CALL_OW 310
59746: NOT
59747: OR
59748: IFFALSE 59752
// exit ;
59750: GO 59842
// vehicle := IsInUnit ( driver ) ;
59752: LD_ADDR_VAR 0 3
59756: PUSH
59757: LD_VAR 0 1
59761: PPUSH
59762: CALL_OW 310
59766: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59767: LD_VAR 0 1
59771: PPUSH
59772: LD_STRING \
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: PUSH
59802: LD_STRING E
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_VAR 0 3
59815: PUSH
59816: LD_INT 0
59818: PUSH
59819: LD_INT 0
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PPUSH
59838: CALL_OW 446
// end ;
59842: LD_VAR 0 2
59846: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59847: LD_INT 0
59849: PPUSH
59850: PPUSH
// if not driver or not IsInUnit ( driver ) then
59851: LD_VAR 0 1
59855: NOT
59856: PUSH
59857: LD_VAR 0 1
59861: PPUSH
59862: CALL_OW 310
59866: NOT
59867: OR
59868: IFFALSE 59872
// exit ;
59870: GO 59962
// vehicle := IsInUnit ( driver ) ;
59872: LD_ADDR_VAR 0 3
59876: PUSH
59877: LD_VAR 0 1
59881: PPUSH
59882: CALL_OW 310
59886: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59887: LD_VAR 0 1
59891: PPUSH
59892: LD_STRING \
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: PUSH
59922: LD_STRING E
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_VAR 0 3
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PPUSH
59958: CALL_OW 447
// end ;
59962: LD_VAR 0 2
59966: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59967: LD_INT 0
59969: PPUSH
59970: PPUSH
59971: PPUSH
// tmp := [ ] ;
59972: LD_ADDR_VAR 0 5
59976: PUSH
59977: EMPTY
59978: ST_TO_ADDR
// for i in units do
59979: LD_ADDR_VAR 0 4
59983: PUSH
59984: LD_VAR 0 1
59988: PUSH
59989: FOR_IN
59990: IFFALSE 60028
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59992: LD_ADDR_VAR 0 5
59996: PUSH
59997: LD_VAR 0 5
60001: PPUSH
60002: LD_VAR 0 5
60006: PUSH
60007: LD_INT 1
60009: PLUS
60010: PPUSH
60011: LD_VAR 0 4
60015: PPUSH
60016: CALL_OW 256
60020: PPUSH
60021: CALL_OW 2
60025: ST_TO_ADDR
60026: GO 59989
60028: POP
60029: POP
// if not tmp then
60030: LD_VAR 0 5
60034: NOT
60035: IFFALSE 60039
// exit ;
60037: GO 60087
// if asc then
60039: LD_VAR 0 2
60043: IFFALSE 60067
// result := SortListByListAsc ( units , tmp ) else
60045: LD_ADDR_VAR 0 3
60049: PUSH
60050: LD_VAR 0 1
60054: PPUSH
60055: LD_VAR 0 5
60059: PPUSH
60060: CALL_OW 76
60064: ST_TO_ADDR
60065: GO 60087
// result := SortListByListDesc ( units , tmp ) ;
60067: LD_ADDR_VAR 0 3
60071: PUSH
60072: LD_VAR 0 1
60076: PPUSH
60077: LD_VAR 0 5
60081: PPUSH
60082: CALL_OW 77
60086: ST_TO_ADDR
// end ;
60087: LD_VAR 0 3
60091: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60092: LD_INT 0
60094: PPUSH
60095: PPUSH
// task := GetTaskList ( mech ) ;
60096: LD_ADDR_VAR 0 4
60100: PUSH
60101: LD_VAR 0 1
60105: PPUSH
60106: CALL_OW 437
60110: ST_TO_ADDR
// if not task then
60111: LD_VAR 0 4
60115: NOT
60116: IFFALSE 60120
// exit ;
60118: GO 60162
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60120: LD_ADDR_VAR 0 3
60124: PUSH
60125: LD_VAR 0 4
60129: PUSH
60130: LD_INT 1
60132: ARRAY
60133: PUSH
60134: LD_INT 1
60136: ARRAY
60137: PUSH
60138: LD_STRING r
60140: EQUAL
60141: PUSH
60142: LD_VAR 0 4
60146: PUSH
60147: LD_INT 1
60149: ARRAY
60150: PUSH
60151: LD_INT 4
60153: ARRAY
60154: PUSH
60155: LD_VAR 0 2
60159: EQUAL
60160: AND
60161: ST_TO_ADDR
// end ;
60162: LD_VAR 0 3
60166: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60167: LD_INT 0
60169: PPUSH
// SetDir ( unit , d ) ;
60170: LD_VAR 0 1
60174: PPUSH
60175: LD_VAR 0 4
60179: PPUSH
60180: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60184: LD_VAR 0 1
60188: PPUSH
60189: LD_VAR 0 2
60193: PPUSH
60194: LD_VAR 0 3
60198: PPUSH
60199: LD_VAR 0 5
60203: PPUSH
60204: CALL_OW 48
// end ;
60208: LD_VAR 0 6
60212: RET
// export function ToNaturalNumber ( number ) ; begin
60213: LD_INT 0
60215: PPUSH
// result := number div 1 ;
60216: LD_ADDR_VAR 0 2
60220: PUSH
60221: LD_VAR 0 1
60225: PUSH
60226: LD_INT 1
60228: DIV
60229: ST_TO_ADDR
// if number < 0 then
60230: LD_VAR 0 1
60234: PUSH
60235: LD_INT 0
60237: LESS
60238: IFFALSE 60248
// result := 0 ;
60240: LD_ADDR_VAR 0 2
60244: PUSH
60245: LD_INT 0
60247: ST_TO_ADDR
// end ;
60248: LD_VAR 0 2
60252: RET
// export function SortByClass ( units , class ) ; var un ; begin
60253: LD_INT 0
60255: PPUSH
60256: PPUSH
// if not units or not class then
60257: LD_VAR 0 1
60261: NOT
60262: PUSH
60263: LD_VAR 0 2
60267: NOT
60268: OR
60269: IFFALSE 60273
// exit ;
60271: GO 60368
// result := [ ] ;
60273: LD_ADDR_VAR 0 3
60277: PUSH
60278: EMPTY
60279: ST_TO_ADDR
// for un in units do
60280: LD_ADDR_VAR 0 4
60284: PUSH
60285: LD_VAR 0 1
60289: PUSH
60290: FOR_IN
60291: IFFALSE 60366
// if GetClass ( un ) = class then
60293: LD_VAR 0 4
60297: PPUSH
60298: CALL_OW 257
60302: PUSH
60303: LD_VAR 0 2
60307: EQUAL
60308: IFFALSE 60335
// result := Insert ( result , 1 , un ) else
60310: LD_ADDR_VAR 0 3
60314: PUSH
60315: LD_VAR 0 3
60319: PPUSH
60320: LD_INT 1
60322: PPUSH
60323: LD_VAR 0 4
60327: PPUSH
60328: CALL_OW 2
60332: ST_TO_ADDR
60333: GO 60364
// result := Replace ( result , result + 1 , un ) ;
60335: LD_ADDR_VAR 0 3
60339: PUSH
60340: LD_VAR 0 3
60344: PPUSH
60345: LD_VAR 0 3
60349: PUSH
60350: LD_INT 1
60352: PLUS
60353: PPUSH
60354: LD_VAR 0 4
60358: PPUSH
60359: CALL_OW 1
60363: ST_TO_ADDR
60364: GO 60290
60366: POP
60367: POP
// end ;
60368: LD_VAR 0 3
60372: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60373: LD_INT 0
60375: PPUSH
60376: PPUSH
60377: PPUSH
60378: PPUSH
60379: PPUSH
60380: PPUSH
60381: PPUSH
// result := [ ] ;
60382: LD_ADDR_VAR 0 4
60386: PUSH
60387: EMPTY
60388: ST_TO_ADDR
// if x - r < 0 then
60389: LD_VAR 0 1
60393: PUSH
60394: LD_VAR 0 3
60398: MINUS
60399: PUSH
60400: LD_INT 0
60402: LESS
60403: IFFALSE 60415
// min_x := 0 else
60405: LD_ADDR_VAR 0 8
60409: PUSH
60410: LD_INT 0
60412: ST_TO_ADDR
60413: GO 60431
// min_x := x - r ;
60415: LD_ADDR_VAR 0 8
60419: PUSH
60420: LD_VAR 0 1
60424: PUSH
60425: LD_VAR 0 3
60429: MINUS
60430: ST_TO_ADDR
// if y - r < 0 then
60431: LD_VAR 0 2
60435: PUSH
60436: LD_VAR 0 3
60440: MINUS
60441: PUSH
60442: LD_INT 0
60444: LESS
60445: IFFALSE 60457
// min_y := 0 else
60447: LD_ADDR_VAR 0 7
60451: PUSH
60452: LD_INT 0
60454: ST_TO_ADDR
60455: GO 60473
// min_y := y - r ;
60457: LD_ADDR_VAR 0 7
60461: PUSH
60462: LD_VAR 0 2
60466: PUSH
60467: LD_VAR 0 3
60471: MINUS
60472: ST_TO_ADDR
// max_x := x + r ;
60473: LD_ADDR_VAR 0 9
60477: PUSH
60478: LD_VAR 0 1
60482: PUSH
60483: LD_VAR 0 3
60487: PLUS
60488: ST_TO_ADDR
// max_y := y + r ;
60489: LD_ADDR_VAR 0 10
60493: PUSH
60494: LD_VAR 0 2
60498: PUSH
60499: LD_VAR 0 3
60503: PLUS
60504: ST_TO_ADDR
// for _x = min_x to max_x do
60505: LD_ADDR_VAR 0 5
60509: PUSH
60510: DOUBLE
60511: LD_VAR 0 8
60515: DEC
60516: ST_TO_ADDR
60517: LD_VAR 0 9
60521: PUSH
60522: FOR_TO
60523: IFFALSE 60624
// for _y = min_y to max_y do
60525: LD_ADDR_VAR 0 6
60529: PUSH
60530: DOUBLE
60531: LD_VAR 0 7
60535: DEC
60536: ST_TO_ADDR
60537: LD_VAR 0 10
60541: PUSH
60542: FOR_TO
60543: IFFALSE 60620
// begin if not ValidHex ( _x , _y ) then
60545: LD_VAR 0 5
60549: PPUSH
60550: LD_VAR 0 6
60554: PPUSH
60555: CALL_OW 488
60559: NOT
60560: IFFALSE 60564
// continue ;
60562: GO 60542
// if GetResourceTypeXY ( _x , _y ) then
60564: LD_VAR 0 5
60568: PPUSH
60569: LD_VAR 0 6
60573: PPUSH
60574: CALL_OW 283
60578: IFFALSE 60618
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60580: LD_ADDR_VAR 0 4
60584: PUSH
60585: LD_VAR 0 4
60589: PPUSH
60590: LD_VAR 0 4
60594: PUSH
60595: LD_INT 1
60597: PLUS
60598: PPUSH
60599: LD_VAR 0 5
60603: PUSH
60604: LD_VAR 0 6
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PPUSH
60613: CALL_OW 1
60617: ST_TO_ADDR
// end ;
60618: GO 60542
60620: POP
60621: POP
60622: GO 60522
60624: POP
60625: POP
// end ;
60626: LD_VAR 0 4
60630: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60631: LD_INT 0
60633: PPUSH
60634: PPUSH
60635: PPUSH
60636: PPUSH
60637: PPUSH
60638: PPUSH
60639: PPUSH
60640: PPUSH
// if not units then
60641: LD_VAR 0 1
60645: NOT
60646: IFFALSE 60650
// exit ;
60648: GO 61174
// result := UnitFilter ( units , [ f_ok ] ) ;
60650: LD_ADDR_VAR 0 3
60654: PUSH
60655: LD_VAR 0 1
60659: PPUSH
60660: LD_INT 50
60662: PUSH
60663: EMPTY
60664: LIST
60665: PPUSH
60666: CALL_OW 72
60670: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60671: LD_ADDR_VAR 0 8
60675: PUSH
60676: LD_VAR 0 1
60680: PUSH
60681: LD_INT 1
60683: ARRAY
60684: PPUSH
60685: CALL_OW 255
60689: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60690: LD_ADDR_VAR 0 10
60694: PUSH
60695: LD_INT 29
60697: PUSH
60698: LD_INT 91
60700: PUSH
60701: LD_INT 49
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// if not result then
60709: LD_VAR 0 3
60713: NOT
60714: IFFALSE 60718
// exit ;
60716: GO 61174
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60718: LD_ADDR_VAR 0 5
60722: PUSH
60723: LD_INT 81
60725: PUSH
60726: LD_VAR 0 8
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PPUSH
60735: CALL_OW 69
60739: ST_TO_ADDR
// for i in result do
60740: LD_ADDR_VAR 0 4
60744: PUSH
60745: LD_VAR 0 3
60749: PUSH
60750: FOR_IN
60751: IFFALSE 61172
// begin tag := GetTag ( i ) + 1 ;
60753: LD_ADDR_VAR 0 9
60757: PUSH
60758: LD_VAR 0 4
60762: PPUSH
60763: CALL_OW 110
60767: PUSH
60768: LD_INT 1
60770: PLUS
60771: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60772: LD_ADDR_VAR 0 7
60776: PUSH
60777: LD_VAR 0 4
60781: PPUSH
60782: CALL_OW 250
60786: PPUSH
60787: LD_VAR 0 4
60791: PPUSH
60792: CALL_OW 251
60796: PPUSH
60797: LD_INT 6
60799: PPUSH
60800: CALL 60373 0 3
60804: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60805: LD_VAR 0 4
60809: PPUSH
60810: CALL_OW 247
60814: PUSH
60815: LD_INT 2
60817: EQUAL
60818: PUSH
60819: LD_VAR 0 7
60823: AND
60824: PUSH
60825: LD_VAR 0 4
60829: PPUSH
60830: CALL_OW 264
60834: PUSH
60835: LD_VAR 0 10
60839: IN
60840: NOT
60841: AND
60842: IFFALSE 60881
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60844: LD_VAR 0 4
60848: PPUSH
60849: LD_VAR 0 7
60853: PUSH
60854: LD_INT 1
60856: ARRAY
60857: PUSH
60858: LD_INT 1
60860: ARRAY
60861: PPUSH
60862: LD_VAR 0 7
60866: PUSH
60867: LD_INT 1
60869: ARRAY
60870: PUSH
60871: LD_INT 2
60873: ARRAY
60874: PPUSH
60875: CALL_OW 116
60879: GO 61170
// if path > tag then
60881: LD_VAR 0 2
60885: PUSH
60886: LD_VAR 0 9
60890: GREATER
60891: IFFALSE 61099
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60893: LD_ADDR_VAR 0 6
60897: PUSH
60898: LD_VAR 0 5
60902: PPUSH
60903: LD_INT 91
60905: PUSH
60906: LD_VAR 0 4
60910: PUSH
60911: LD_INT 8
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: PPUSH
60919: CALL_OW 72
60923: ST_TO_ADDR
// if nearEnemy then
60924: LD_VAR 0 6
60928: IFFALSE 60997
// begin if GetWeapon ( i ) = ru_time_lapser then
60930: LD_VAR 0 4
60934: PPUSH
60935: CALL_OW 264
60939: PUSH
60940: LD_INT 49
60942: EQUAL
60943: IFFALSE 60971
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60945: LD_VAR 0 4
60949: PPUSH
60950: LD_VAR 0 6
60954: PPUSH
60955: LD_VAR 0 4
60959: PPUSH
60960: CALL_OW 74
60964: PPUSH
60965: CALL_OW 112
60969: GO 60995
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60971: LD_VAR 0 4
60975: PPUSH
60976: LD_VAR 0 6
60980: PPUSH
60981: LD_VAR 0 4
60985: PPUSH
60986: CALL_OW 74
60990: PPUSH
60991: CALL 62099 0 2
// end else
60995: GO 61097
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60997: LD_VAR 0 4
61001: PPUSH
61002: LD_VAR 0 2
61006: PUSH
61007: LD_VAR 0 9
61011: ARRAY
61012: PUSH
61013: LD_INT 1
61015: ARRAY
61016: PPUSH
61017: LD_VAR 0 2
61021: PUSH
61022: LD_VAR 0 9
61026: ARRAY
61027: PUSH
61028: LD_INT 2
61030: ARRAY
61031: PPUSH
61032: CALL_OW 297
61036: PUSH
61037: LD_INT 6
61039: GREATER
61040: IFFALSE 61083
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61042: LD_VAR 0 4
61046: PPUSH
61047: LD_VAR 0 2
61051: PUSH
61052: LD_VAR 0 9
61056: ARRAY
61057: PUSH
61058: LD_INT 1
61060: ARRAY
61061: PPUSH
61062: LD_VAR 0 2
61066: PUSH
61067: LD_VAR 0 9
61071: ARRAY
61072: PUSH
61073: LD_INT 2
61075: ARRAY
61076: PPUSH
61077: CALL_OW 114
61081: GO 61097
// SetTag ( i , tag ) ;
61083: LD_VAR 0 4
61087: PPUSH
61088: LD_VAR 0 9
61092: PPUSH
61093: CALL_OW 109
// end else
61097: GO 61170
// if enemy then
61099: LD_VAR 0 5
61103: IFFALSE 61170
// begin if GetWeapon ( i ) = ru_time_lapser then
61105: LD_VAR 0 4
61109: PPUSH
61110: CALL_OW 264
61114: PUSH
61115: LD_INT 49
61117: EQUAL
61118: IFFALSE 61146
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61120: LD_VAR 0 4
61124: PPUSH
61125: LD_VAR 0 5
61129: PPUSH
61130: LD_VAR 0 4
61134: PPUSH
61135: CALL_OW 74
61139: PPUSH
61140: CALL_OW 112
61144: GO 61170
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61146: LD_VAR 0 4
61150: PPUSH
61151: LD_VAR 0 5
61155: PPUSH
61156: LD_VAR 0 4
61160: PPUSH
61161: CALL_OW 74
61165: PPUSH
61166: CALL 62099 0 2
// end ; end ;
61170: GO 60750
61172: POP
61173: POP
// end ;
61174: LD_VAR 0 3
61178: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61179: LD_INT 0
61181: PPUSH
61182: PPUSH
61183: PPUSH
// if not unit or IsInUnit ( unit ) then
61184: LD_VAR 0 1
61188: NOT
61189: PUSH
61190: LD_VAR 0 1
61194: PPUSH
61195: CALL_OW 310
61199: OR
61200: IFFALSE 61204
// exit ;
61202: GO 61295
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61204: LD_ADDR_VAR 0 4
61208: PUSH
61209: LD_VAR 0 1
61213: PPUSH
61214: CALL_OW 250
61218: PPUSH
61219: LD_VAR 0 2
61223: PPUSH
61224: LD_INT 1
61226: PPUSH
61227: CALL_OW 272
61231: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61232: LD_ADDR_VAR 0 5
61236: PUSH
61237: LD_VAR 0 1
61241: PPUSH
61242: CALL_OW 251
61246: PPUSH
61247: LD_VAR 0 2
61251: PPUSH
61252: LD_INT 1
61254: PPUSH
61255: CALL_OW 273
61259: ST_TO_ADDR
// if ValidHex ( x , y ) then
61260: LD_VAR 0 4
61264: PPUSH
61265: LD_VAR 0 5
61269: PPUSH
61270: CALL_OW 488
61274: IFFALSE 61295
// ComTurnXY ( unit , x , y ) ;
61276: LD_VAR 0 1
61280: PPUSH
61281: LD_VAR 0 4
61285: PPUSH
61286: LD_VAR 0 5
61290: PPUSH
61291: CALL_OW 118
// end ;
61295: LD_VAR 0 3
61299: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61300: LD_INT 0
61302: PPUSH
61303: PPUSH
// result := false ;
61304: LD_ADDR_VAR 0 3
61308: PUSH
61309: LD_INT 0
61311: ST_TO_ADDR
// if not units then
61312: LD_VAR 0 2
61316: NOT
61317: IFFALSE 61321
// exit ;
61319: GO 61366
// for i in units do
61321: LD_ADDR_VAR 0 4
61325: PUSH
61326: LD_VAR 0 2
61330: PUSH
61331: FOR_IN
61332: IFFALSE 61364
// if See ( side , i ) then
61334: LD_VAR 0 1
61338: PPUSH
61339: LD_VAR 0 4
61343: PPUSH
61344: CALL_OW 292
61348: IFFALSE 61362
// begin result := true ;
61350: LD_ADDR_VAR 0 3
61354: PUSH
61355: LD_INT 1
61357: ST_TO_ADDR
// exit ;
61358: POP
61359: POP
61360: GO 61366
// end ;
61362: GO 61331
61364: POP
61365: POP
// end ;
61366: LD_VAR 0 3
61370: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61371: LD_INT 0
61373: PPUSH
61374: PPUSH
61375: PPUSH
61376: PPUSH
// if not unit or not points then
61377: LD_VAR 0 1
61381: NOT
61382: PUSH
61383: LD_VAR 0 2
61387: NOT
61388: OR
61389: IFFALSE 61393
// exit ;
61391: GO 61483
// dist := 99999 ;
61393: LD_ADDR_VAR 0 5
61397: PUSH
61398: LD_INT 99999
61400: ST_TO_ADDR
// for i in points do
61401: LD_ADDR_VAR 0 4
61405: PUSH
61406: LD_VAR 0 2
61410: PUSH
61411: FOR_IN
61412: IFFALSE 61481
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61414: LD_ADDR_VAR 0 6
61418: PUSH
61419: LD_VAR 0 1
61423: PPUSH
61424: LD_VAR 0 4
61428: PUSH
61429: LD_INT 1
61431: ARRAY
61432: PPUSH
61433: LD_VAR 0 4
61437: PUSH
61438: LD_INT 2
61440: ARRAY
61441: PPUSH
61442: CALL_OW 297
61446: ST_TO_ADDR
// if tmpDist < dist then
61447: LD_VAR 0 6
61451: PUSH
61452: LD_VAR 0 5
61456: LESS
61457: IFFALSE 61479
// begin result := i ;
61459: LD_ADDR_VAR 0 3
61463: PUSH
61464: LD_VAR 0 4
61468: ST_TO_ADDR
// dist := tmpDist ;
61469: LD_ADDR_VAR 0 5
61473: PUSH
61474: LD_VAR 0 6
61478: ST_TO_ADDR
// end ; end ;
61479: GO 61411
61481: POP
61482: POP
// end ;
61483: LD_VAR 0 3
61487: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61488: LD_INT 0
61490: PPUSH
// uc_side := side ;
61491: LD_ADDR_OWVAR 20
61495: PUSH
61496: LD_VAR 0 1
61500: ST_TO_ADDR
// uc_nation := 3 ;
61501: LD_ADDR_OWVAR 21
61505: PUSH
61506: LD_INT 3
61508: ST_TO_ADDR
// vc_chassis := 25 ;
61509: LD_ADDR_OWVAR 37
61513: PUSH
61514: LD_INT 25
61516: ST_TO_ADDR
// vc_engine := engine_siberite ;
61517: LD_ADDR_OWVAR 39
61521: PUSH
61522: LD_INT 3
61524: ST_TO_ADDR
// vc_control := control_computer ;
61525: LD_ADDR_OWVAR 38
61529: PUSH
61530: LD_INT 3
61532: ST_TO_ADDR
// vc_weapon := 59 ;
61533: LD_ADDR_OWVAR 40
61537: PUSH
61538: LD_INT 59
61540: ST_TO_ADDR
// result := CreateVehicle ;
61541: LD_ADDR_VAR 0 5
61545: PUSH
61546: CALL_OW 45
61550: ST_TO_ADDR
// SetDir ( result , d ) ;
61551: LD_VAR 0 5
61555: PPUSH
61556: LD_VAR 0 4
61560: PPUSH
61561: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61565: LD_VAR 0 5
61569: PPUSH
61570: LD_VAR 0 2
61574: PPUSH
61575: LD_VAR 0 3
61579: PPUSH
61580: LD_INT 0
61582: PPUSH
61583: CALL_OW 48
// end ;
61587: LD_VAR 0 5
61591: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61592: LD_INT 0
61594: PPUSH
61595: PPUSH
61596: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61597: LD_ADDR_VAR 0 2
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61620: LD_VAR 0 1
61624: NOT
61625: PUSH
61626: LD_VAR 0 1
61630: PPUSH
61631: CALL_OW 264
61635: PUSH
61636: LD_INT 12
61638: PUSH
61639: LD_INT 51
61641: PUSH
61642: LD_INT 32
61644: PUSH
61645: LD_INT 89
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: IN
61654: NOT
61655: OR
61656: IFFALSE 61660
// exit ;
61658: GO 61758
// for i := 1 to 3 do
61660: LD_ADDR_VAR 0 3
61664: PUSH
61665: DOUBLE
61666: LD_INT 1
61668: DEC
61669: ST_TO_ADDR
61670: LD_INT 3
61672: PUSH
61673: FOR_TO
61674: IFFALSE 61756
// begin tmp := GetCargo ( cargo , i ) ;
61676: LD_ADDR_VAR 0 4
61680: PUSH
61681: LD_VAR 0 1
61685: PPUSH
61686: LD_VAR 0 3
61690: PPUSH
61691: CALL_OW 289
61695: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61696: LD_ADDR_VAR 0 2
61700: PUSH
61701: LD_VAR 0 2
61705: PPUSH
61706: LD_VAR 0 3
61710: PPUSH
61711: LD_VAR 0 4
61715: PPUSH
61716: CALL_OW 1
61720: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61721: LD_ADDR_VAR 0 2
61725: PUSH
61726: LD_VAR 0 2
61730: PPUSH
61731: LD_INT 4
61733: PPUSH
61734: LD_VAR 0 2
61738: PUSH
61739: LD_INT 4
61741: ARRAY
61742: PUSH
61743: LD_VAR 0 4
61747: PLUS
61748: PPUSH
61749: CALL_OW 1
61753: ST_TO_ADDR
// end ;
61754: GO 61673
61756: POP
61757: POP
// end ;
61758: LD_VAR 0 2
61762: RET
// export function Length ( array ) ; begin
61763: LD_INT 0
61765: PPUSH
// result := array + 0 ;
61766: LD_ADDR_VAR 0 2
61770: PUSH
61771: LD_VAR 0 1
61775: PUSH
61776: LD_INT 0
61778: PLUS
61779: ST_TO_ADDR
// end ;
61780: LD_VAR 0 2
61784: RET
// export function PrepareArray ( array ) ; begin
61785: LD_INT 0
61787: PPUSH
// result := array diff 0 ;
61788: LD_ADDR_VAR 0 2
61792: PUSH
61793: LD_VAR 0 1
61797: PUSH
61798: LD_INT 0
61800: DIFF
61801: ST_TO_ADDR
// if not result [ 1 ] then
61802: LD_VAR 0 2
61806: PUSH
61807: LD_INT 1
61809: ARRAY
61810: NOT
61811: IFFALSE 61831
// result := Delete ( result , 1 ) ;
61813: LD_ADDR_VAR 0 2
61817: PUSH
61818: LD_VAR 0 2
61822: PPUSH
61823: LD_INT 1
61825: PPUSH
61826: CALL_OW 3
61830: ST_TO_ADDR
// end ;
61831: LD_VAR 0 2
61835: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61836: LD_INT 0
61838: PPUSH
61839: PPUSH
61840: PPUSH
61841: PPUSH
// sibRocketRange := 25 ;
61842: LD_ADDR_VAR 0 6
61846: PUSH
61847: LD_INT 25
61849: ST_TO_ADDR
// result := false ;
61850: LD_ADDR_VAR 0 4
61854: PUSH
61855: LD_INT 0
61857: ST_TO_ADDR
// for i := 0 to 5 do
61858: LD_ADDR_VAR 0 5
61862: PUSH
61863: DOUBLE
61864: LD_INT 0
61866: DEC
61867: ST_TO_ADDR
61868: LD_INT 5
61870: PUSH
61871: FOR_TO
61872: IFFALSE 61939
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61874: LD_VAR 0 1
61878: PPUSH
61879: LD_VAR 0 5
61883: PPUSH
61884: LD_VAR 0 6
61888: PPUSH
61889: CALL_OW 272
61893: PPUSH
61894: LD_VAR 0 2
61898: PPUSH
61899: LD_VAR 0 5
61903: PPUSH
61904: LD_VAR 0 6
61908: PPUSH
61909: CALL_OW 273
61913: PPUSH
61914: LD_VAR 0 3
61918: PPUSH
61919: CALL_OW 309
61923: IFFALSE 61937
// begin result := true ;
61925: LD_ADDR_VAR 0 4
61929: PUSH
61930: LD_INT 1
61932: ST_TO_ADDR
// exit ;
61933: POP
61934: POP
61935: GO 61941
// end ;
61937: GO 61871
61939: POP
61940: POP
// end ;
61941: LD_VAR 0 4
61945: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61946: LD_INT 0
61948: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61949: LD_VAR 0 1
61953: PPUSH
61954: LD_VAR 0 2
61958: PPUSH
61959: LD_INT 0
61961: PPUSH
61962: LD_INT 0
61964: PPUSH
61965: LD_INT 1
61967: PPUSH
61968: LD_INT 0
61970: PPUSH
61971: CALL_OW 587
// end ;
61975: LD_VAR 0 3
61979: RET
// export function CenterOnNow ( unit ) ; begin
61980: LD_INT 0
61982: PPUSH
// result := IsInUnit ( unit ) ;
61983: LD_ADDR_VAR 0 2
61987: PUSH
61988: LD_VAR 0 1
61992: PPUSH
61993: CALL_OW 310
61997: ST_TO_ADDR
// if not result then
61998: LD_VAR 0 2
62002: NOT
62003: IFFALSE 62015
// result := unit ;
62005: LD_ADDR_VAR 0 2
62009: PUSH
62010: LD_VAR 0 1
62014: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62015: LD_VAR 0 1
62019: PPUSH
62020: CALL_OW 87
// end ;
62024: LD_VAR 0 2
62028: RET
// export function ComMoveHex ( unit , hex ) ; begin
62029: LD_INT 0
62031: PPUSH
// if not hex then
62032: LD_VAR 0 2
62036: NOT
62037: IFFALSE 62041
// exit ;
62039: GO 62094
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62041: LD_VAR 0 2
62045: PUSH
62046: LD_INT 1
62048: ARRAY
62049: PPUSH
62050: LD_VAR 0 2
62054: PUSH
62055: LD_INT 2
62057: ARRAY
62058: PPUSH
62059: CALL_OW 428
62063: IFFALSE 62067
// exit ;
62065: GO 62094
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62067: LD_VAR 0 1
62071: PPUSH
62072: LD_VAR 0 2
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: PPUSH
62081: LD_VAR 0 2
62085: PUSH
62086: LD_INT 2
62088: ARRAY
62089: PPUSH
62090: CALL_OW 111
// end ;
62094: LD_VAR 0 3
62098: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62099: LD_INT 0
62101: PPUSH
62102: PPUSH
62103: PPUSH
// if not unit or not enemy then
62104: LD_VAR 0 1
62108: NOT
62109: PUSH
62110: LD_VAR 0 2
62114: NOT
62115: OR
62116: IFFALSE 62120
// exit ;
62118: GO 62244
// x := GetX ( enemy ) ;
62120: LD_ADDR_VAR 0 4
62124: PUSH
62125: LD_VAR 0 2
62129: PPUSH
62130: CALL_OW 250
62134: ST_TO_ADDR
// y := GetY ( enemy ) ;
62135: LD_ADDR_VAR 0 5
62139: PUSH
62140: LD_VAR 0 2
62144: PPUSH
62145: CALL_OW 251
62149: ST_TO_ADDR
// if ValidHex ( x , y ) then
62150: LD_VAR 0 4
62154: PPUSH
62155: LD_VAR 0 5
62159: PPUSH
62160: CALL_OW 488
62164: IFFALSE 62244
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
62166: LD_VAR 0 2
62170: PPUSH
62171: CALL_OW 247
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: LD_INT 2
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: IN
62186: PUSH
62187: LD_VAR 0 1
62191: PPUSH
62192: CALL_OW 255
62196: PPUSH
62197: LD_VAR 0 2
62201: PPUSH
62202: CALL_OW 292
62206: AND
62207: IFFALSE 62225
// ComAttackUnit ( unit , enemy ) else
62209: LD_VAR 0 1
62213: PPUSH
62214: LD_VAR 0 2
62218: PPUSH
62219: CALL_OW 115
62223: GO 62244
// ComAgressiveMove ( unit , x , y ) ;
62225: LD_VAR 0 1
62229: PPUSH
62230: LD_VAR 0 4
62234: PPUSH
62235: LD_VAR 0 5
62239: PPUSH
62240: CALL_OW 114
// end ; end_of_file end_of_file
62244: LD_VAR 0 3
62248: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62249: LD_VAR 0 1
62253: PPUSH
62254: LD_VAR 0 2
62258: PPUSH
62259: LD_VAR 0 3
62263: PPUSH
62264: LD_VAR 0 4
62268: PPUSH
62269: LD_VAR 0 5
62273: PPUSH
62274: LD_VAR 0 6
62278: PPUSH
62279: CALL 62463 0 6
// end ;
62283: PPOPN 6
62285: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62286: LD_INT 0
62288: PPUSH
// begin if not units then
62289: LD_VAR 0 1
62293: NOT
62294: IFFALSE 62298
// exit ;
62296: GO 62298
// end ;
62298: PPOPN 7
62300: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
62301: CALL 62367 0 0
// end ; end_of_file
62305: PPOPN 1
62307: END
// export globalGameSaveCounter ; every 0 0$1 do
62308: GO 62310
62310: DISABLE
// begin enable ;
62311: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62312: LD_STRING updateTimer(
62314: PUSH
62315: LD_OWVAR 1
62319: STR
62320: PUSH
62321: LD_STRING );
62323: STR
62324: PPUSH
62325: CALL_OW 559
// end ;
62329: END
// every 0 0$1 do
62330: GO 62332
62332: DISABLE
// begin globalGameSaveCounter := 0 ;
62333: LD_ADDR_EXP 45
62337: PUSH
62338: LD_INT 0
62340: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
62341: LD_STRING setGameSaveCounter(0)
62343: PPUSH
62344: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
62348: LD_STRING initStreamRollete();
62350: PPUSH
62351: CALL_OW 559
// InitStreamMode ;
62355: CALL 63681 0 0
// DefineStreamItems ( false ) ;
62359: LD_INT 0
62361: PPUSH
62362: CALL 64145 0 1
// end ;
62366: END
// export function SOS_MapStart ( ) ; begin
62367: LD_INT 0
62369: PPUSH
// if streamModeActive then
62370: LD_EXP 46
62374: IFFALSE 62383
// DefineStreamItems ( true ) ;
62376: LD_INT 1
62378: PPUSH
62379: CALL 64145 0 1
// UpdateLuaVariables ( ) ;
62383: CALL 62400 0 0
// UpdateFactoryWaypoints ( ) ;
62387: CALL 77014 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62391: CALL 77271 0 0
// end ;
62395: LD_VAR 0 1
62399: RET
// function UpdateLuaVariables ( ) ; begin
62400: LD_INT 0
62402: PPUSH
// if globalGameSaveCounter then
62403: LD_EXP 45
62407: IFFALSE 62441
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
62409: LD_ADDR_EXP 45
62413: PUSH
62414: LD_EXP 45
62418: PPUSH
62419: CALL 59388 0 1
62423: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62424: LD_STRING setGameSaveCounter(
62426: PUSH
62427: LD_EXP 45
62431: STR
62432: PUSH
62433: LD_STRING )
62435: STR
62436: PPUSH
62437: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62441: LD_STRING setGameDifficulty(
62443: PUSH
62444: LD_OWVAR 67
62448: STR
62449: PUSH
62450: LD_STRING )
62452: STR
62453: PPUSH
62454: CALL_OW 559
// end ;
62458: LD_VAR 0 1
62462: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62463: LD_INT 0
62465: PPUSH
// if p2 = stream_mode then
62466: LD_VAR 0 2
62470: PUSH
62471: LD_INT 100
62473: EQUAL
62474: IFFALSE 63477
// begin if not StreamModeActive then
62476: LD_EXP 46
62480: NOT
62481: IFFALSE 62491
// StreamModeActive := true ;
62483: LD_ADDR_EXP 46
62487: PUSH
62488: LD_INT 1
62490: ST_TO_ADDR
// if p3 = 0 then
62491: LD_VAR 0 3
62495: PUSH
62496: LD_INT 0
62498: EQUAL
62499: IFFALSE 62505
// InitStreamMode ;
62501: CALL 63681 0 0
// if p3 = 1 then
62505: LD_VAR 0 3
62509: PUSH
62510: LD_INT 1
62512: EQUAL
62513: IFFALSE 62523
// sRocket := true ;
62515: LD_ADDR_EXP 51
62519: PUSH
62520: LD_INT 1
62522: ST_TO_ADDR
// if p3 = 2 then
62523: LD_VAR 0 3
62527: PUSH
62528: LD_INT 2
62530: EQUAL
62531: IFFALSE 62541
// sSpeed := true ;
62533: LD_ADDR_EXP 50
62537: PUSH
62538: LD_INT 1
62540: ST_TO_ADDR
// if p3 = 3 then
62541: LD_VAR 0 3
62545: PUSH
62546: LD_INT 3
62548: EQUAL
62549: IFFALSE 62559
// sEngine := true ;
62551: LD_ADDR_EXP 52
62555: PUSH
62556: LD_INT 1
62558: ST_TO_ADDR
// if p3 = 4 then
62559: LD_VAR 0 3
62563: PUSH
62564: LD_INT 4
62566: EQUAL
62567: IFFALSE 62577
// sSpec := true ;
62569: LD_ADDR_EXP 49
62573: PUSH
62574: LD_INT 1
62576: ST_TO_ADDR
// if p3 = 5 then
62577: LD_VAR 0 3
62581: PUSH
62582: LD_INT 5
62584: EQUAL
62585: IFFALSE 62595
// sLevel := true ;
62587: LD_ADDR_EXP 53
62591: PUSH
62592: LD_INT 1
62594: ST_TO_ADDR
// if p3 = 6 then
62595: LD_VAR 0 3
62599: PUSH
62600: LD_INT 6
62602: EQUAL
62603: IFFALSE 62613
// sArmoury := true ;
62605: LD_ADDR_EXP 54
62609: PUSH
62610: LD_INT 1
62612: ST_TO_ADDR
// if p3 = 7 then
62613: LD_VAR 0 3
62617: PUSH
62618: LD_INT 7
62620: EQUAL
62621: IFFALSE 62631
// sRadar := true ;
62623: LD_ADDR_EXP 55
62627: PUSH
62628: LD_INT 1
62630: ST_TO_ADDR
// if p3 = 8 then
62631: LD_VAR 0 3
62635: PUSH
62636: LD_INT 8
62638: EQUAL
62639: IFFALSE 62649
// sBunker := true ;
62641: LD_ADDR_EXP 56
62645: PUSH
62646: LD_INT 1
62648: ST_TO_ADDR
// if p3 = 9 then
62649: LD_VAR 0 3
62653: PUSH
62654: LD_INT 9
62656: EQUAL
62657: IFFALSE 62667
// sHack := true ;
62659: LD_ADDR_EXP 57
62663: PUSH
62664: LD_INT 1
62666: ST_TO_ADDR
// if p3 = 10 then
62667: LD_VAR 0 3
62671: PUSH
62672: LD_INT 10
62674: EQUAL
62675: IFFALSE 62685
// sFire := true ;
62677: LD_ADDR_EXP 58
62681: PUSH
62682: LD_INT 1
62684: ST_TO_ADDR
// if p3 = 11 then
62685: LD_VAR 0 3
62689: PUSH
62690: LD_INT 11
62692: EQUAL
62693: IFFALSE 62703
// sRefresh := true ;
62695: LD_ADDR_EXP 59
62699: PUSH
62700: LD_INT 1
62702: ST_TO_ADDR
// if p3 = 12 then
62703: LD_VAR 0 3
62707: PUSH
62708: LD_INT 12
62710: EQUAL
62711: IFFALSE 62721
// sExp := true ;
62713: LD_ADDR_EXP 60
62717: PUSH
62718: LD_INT 1
62720: ST_TO_ADDR
// if p3 = 13 then
62721: LD_VAR 0 3
62725: PUSH
62726: LD_INT 13
62728: EQUAL
62729: IFFALSE 62739
// sDepot := true ;
62731: LD_ADDR_EXP 61
62735: PUSH
62736: LD_INT 1
62738: ST_TO_ADDR
// if p3 = 14 then
62739: LD_VAR 0 3
62743: PUSH
62744: LD_INT 14
62746: EQUAL
62747: IFFALSE 62757
// sFlag := true ;
62749: LD_ADDR_EXP 62
62753: PUSH
62754: LD_INT 1
62756: ST_TO_ADDR
// if p3 = 15 then
62757: LD_VAR 0 3
62761: PUSH
62762: LD_INT 15
62764: EQUAL
62765: IFFALSE 62775
// sKamikadze := true ;
62767: LD_ADDR_EXP 70
62771: PUSH
62772: LD_INT 1
62774: ST_TO_ADDR
// if p3 = 16 then
62775: LD_VAR 0 3
62779: PUSH
62780: LD_INT 16
62782: EQUAL
62783: IFFALSE 62793
// sTroll := true ;
62785: LD_ADDR_EXP 71
62789: PUSH
62790: LD_INT 1
62792: ST_TO_ADDR
// if p3 = 17 then
62793: LD_VAR 0 3
62797: PUSH
62798: LD_INT 17
62800: EQUAL
62801: IFFALSE 62811
// sSlow := true ;
62803: LD_ADDR_EXP 72
62807: PUSH
62808: LD_INT 1
62810: ST_TO_ADDR
// if p3 = 18 then
62811: LD_VAR 0 3
62815: PUSH
62816: LD_INT 18
62818: EQUAL
62819: IFFALSE 62829
// sLack := true ;
62821: LD_ADDR_EXP 73
62825: PUSH
62826: LD_INT 1
62828: ST_TO_ADDR
// if p3 = 19 then
62829: LD_VAR 0 3
62833: PUSH
62834: LD_INT 19
62836: EQUAL
62837: IFFALSE 62847
// sTank := true ;
62839: LD_ADDR_EXP 75
62843: PUSH
62844: LD_INT 1
62846: ST_TO_ADDR
// if p3 = 20 then
62847: LD_VAR 0 3
62851: PUSH
62852: LD_INT 20
62854: EQUAL
62855: IFFALSE 62865
// sRemote := true ;
62857: LD_ADDR_EXP 76
62861: PUSH
62862: LD_INT 1
62864: ST_TO_ADDR
// if p3 = 21 then
62865: LD_VAR 0 3
62869: PUSH
62870: LD_INT 21
62872: EQUAL
62873: IFFALSE 62883
// sPowell := true ;
62875: LD_ADDR_EXP 77
62879: PUSH
62880: LD_INT 1
62882: ST_TO_ADDR
// if p3 = 22 then
62883: LD_VAR 0 3
62887: PUSH
62888: LD_INT 22
62890: EQUAL
62891: IFFALSE 62901
// sTeleport := true ;
62893: LD_ADDR_EXP 80
62897: PUSH
62898: LD_INT 1
62900: ST_TO_ADDR
// if p3 = 23 then
62901: LD_VAR 0 3
62905: PUSH
62906: LD_INT 23
62908: EQUAL
62909: IFFALSE 62919
// sOilTower := true ;
62911: LD_ADDR_EXP 82
62915: PUSH
62916: LD_INT 1
62918: ST_TO_ADDR
// if p3 = 24 then
62919: LD_VAR 0 3
62923: PUSH
62924: LD_INT 24
62926: EQUAL
62927: IFFALSE 62937
// sShovel := true ;
62929: LD_ADDR_EXP 83
62933: PUSH
62934: LD_INT 1
62936: ST_TO_ADDR
// if p3 = 25 then
62937: LD_VAR 0 3
62941: PUSH
62942: LD_INT 25
62944: EQUAL
62945: IFFALSE 62955
// sSheik := true ;
62947: LD_ADDR_EXP 84
62951: PUSH
62952: LD_INT 1
62954: ST_TO_ADDR
// if p3 = 26 then
62955: LD_VAR 0 3
62959: PUSH
62960: LD_INT 26
62962: EQUAL
62963: IFFALSE 62973
// sEarthquake := true ;
62965: LD_ADDR_EXP 86
62969: PUSH
62970: LD_INT 1
62972: ST_TO_ADDR
// if p3 = 27 then
62973: LD_VAR 0 3
62977: PUSH
62978: LD_INT 27
62980: EQUAL
62981: IFFALSE 62991
// sAI := true ;
62983: LD_ADDR_EXP 87
62987: PUSH
62988: LD_INT 1
62990: ST_TO_ADDR
// if p3 = 28 then
62991: LD_VAR 0 3
62995: PUSH
62996: LD_INT 28
62998: EQUAL
62999: IFFALSE 63009
// sCargo := true ;
63001: LD_ADDR_EXP 90
63005: PUSH
63006: LD_INT 1
63008: ST_TO_ADDR
// if p3 = 29 then
63009: LD_VAR 0 3
63013: PUSH
63014: LD_INT 29
63016: EQUAL
63017: IFFALSE 63027
// sDLaser := true ;
63019: LD_ADDR_EXP 91
63023: PUSH
63024: LD_INT 1
63026: ST_TO_ADDR
// if p3 = 30 then
63027: LD_VAR 0 3
63031: PUSH
63032: LD_INT 30
63034: EQUAL
63035: IFFALSE 63045
// sExchange := true ;
63037: LD_ADDR_EXP 92
63041: PUSH
63042: LD_INT 1
63044: ST_TO_ADDR
// if p3 = 31 then
63045: LD_VAR 0 3
63049: PUSH
63050: LD_INT 31
63052: EQUAL
63053: IFFALSE 63063
// sFac := true ;
63055: LD_ADDR_EXP 93
63059: PUSH
63060: LD_INT 1
63062: ST_TO_ADDR
// if p3 = 32 then
63063: LD_VAR 0 3
63067: PUSH
63068: LD_INT 32
63070: EQUAL
63071: IFFALSE 63081
// sPower := true ;
63073: LD_ADDR_EXP 94
63077: PUSH
63078: LD_INT 1
63080: ST_TO_ADDR
// if p3 = 33 then
63081: LD_VAR 0 3
63085: PUSH
63086: LD_INT 33
63088: EQUAL
63089: IFFALSE 63099
// sRandom := true ;
63091: LD_ADDR_EXP 95
63095: PUSH
63096: LD_INT 1
63098: ST_TO_ADDR
// if p3 = 34 then
63099: LD_VAR 0 3
63103: PUSH
63104: LD_INT 34
63106: EQUAL
63107: IFFALSE 63117
// sShield := true ;
63109: LD_ADDR_EXP 96
63113: PUSH
63114: LD_INT 1
63116: ST_TO_ADDR
// if p3 = 35 then
63117: LD_VAR 0 3
63121: PUSH
63122: LD_INT 35
63124: EQUAL
63125: IFFALSE 63135
// sTime := true ;
63127: LD_ADDR_EXP 97
63131: PUSH
63132: LD_INT 1
63134: ST_TO_ADDR
// if p3 = 36 then
63135: LD_VAR 0 3
63139: PUSH
63140: LD_INT 36
63142: EQUAL
63143: IFFALSE 63153
// sTools := true ;
63145: LD_ADDR_EXP 98
63149: PUSH
63150: LD_INT 1
63152: ST_TO_ADDR
// if p3 = 101 then
63153: LD_VAR 0 3
63157: PUSH
63158: LD_INT 101
63160: EQUAL
63161: IFFALSE 63171
// sSold := true ;
63163: LD_ADDR_EXP 63
63167: PUSH
63168: LD_INT 1
63170: ST_TO_ADDR
// if p3 = 102 then
63171: LD_VAR 0 3
63175: PUSH
63176: LD_INT 102
63178: EQUAL
63179: IFFALSE 63189
// sDiff := true ;
63181: LD_ADDR_EXP 64
63185: PUSH
63186: LD_INT 1
63188: ST_TO_ADDR
// if p3 = 103 then
63189: LD_VAR 0 3
63193: PUSH
63194: LD_INT 103
63196: EQUAL
63197: IFFALSE 63207
// sFog := true ;
63199: LD_ADDR_EXP 67
63203: PUSH
63204: LD_INT 1
63206: ST_TO_ADDR
// if p3 = 104 then
63207: LD_VAR 0 3
63211: PUSH
63212: LD_INT 104
63214: EQUAL
63215: IFFALSE 63225
// sReset := true ;
63217: LD_ADDR_EXP 68
63221: PUSH
63222: LD_INT 1
63224: ST_TO_ADDR
// if p3 = 105 then
63225: LD_VAR 0 3
63229: PUSH
63230: LD_INT 105
63232: EQUAL
63233: IFFALSE 63243
// sSun := true ;
63235: LD_ADDR_EXP 69
63239: PUSH
63240: LD_INT 1
63242: ST_TO_ADDR
// if p3 = 106 then
63243: LD_VAR 0 3
63247: PUSH
63248: LD_INT 106
63250: EQUAL
63251: IFFALSE 63261
// sTiger := true ;
63253: LD_ADDR_EXP 65
63257: PUSH
63258: LD_INT 1
63260: ST_TO_ADDR
// if p3 = 107 then
63261: LD_VAR 0 3
63265: PUSH
63266: LD_INT 107
63268: EQUAL
63269: IFFALSE 63279
// sBomb := true ;
63271: LD_ADDR_EXP 66
63275: PUSH
63276: LD_INT 1
63278: ST_TO_ADDR
// if p3 = 108 then
63279: LD_VAR 0 3
63283: PUSH
63284: LD_INT 108
63286: EQUAL
63287: IFFALSE 63297
// sWound := true ;
63289: LD_ADDR_EXP 74
63293: PUSH
63294: LD_INT 1
63296: ST_TO_ADDR
// if p3 = 109 then
63297: LD_VAR 0 3
63301: PUSH
63302: LD_INT 109
63304: EQUAL
63305: IFFALSE 63315
// sBetray := true ;
63307: LD_ADDR_EXP 78
63311: PUSH
63312: LD_INT 1
63314: ST_TO_ADDR
// if p3 = 110 then
63315: LD_VAR 0 3
63319: PUSH
63320: LD_INT 110
63322: EQUAL
63323: IFFALSE 63333
// sContamin := true ;
63325: LD_ADDR_EXP 79
63329: PUSH
63330: LD_INT 1
63332: ST_TO_ADDR
// if p3 = 111 then
63333: LD_VAR 0 3
63337: PUSH
63338: LD_INT 111
63340: EQUAL
63341: IFFALSE 63351
// sOil := true ;
63343: LD_ADDR_EXP 81
63347: PUSH
63348: LD_INT 1
63350: ST_TO_ADDR
// if p3 = 112 then
63351: LD_VAR 0 3
63355: PUSH
63356: LD_INT 112
63358: EQUAL
63359: IFFALSE 63369
// sStu := true ;
63361: LD_ADDR_EXP 85
63365: PUSH
63366: LD_INT 1
63368: ST_TO_ADDR
// if p3 = 113 then
63369: LD_VAR 0 3
63373: PUSH
63374: LD_INT 113
63376: EQUAL
63377: IFFALSE 63387
// sBazooka := true ;
63379: LD_ADDR_EXP 88
63383: PUSH
63384: LD_INT 1
63386: ST_TO_ADDR
// if p3 = 114 then
63387: LD_VAR 0 3
63391: PUSH
63392: LD_INT 114
63394: EQUAL
63395: IFFALSE 63405
// sMortar := true ;
63397: LD_ADDR_EXP 89
63401: PUSH
63402: LD_INT 1
63404: ST_TO_ADDR
// if p3 = 115 then
63405: LD_VAR 0 3
63409: PUSH
63410: LD_INT 115
63412: EQUAL
63413: IFFALSE 63423
// sRanger := true ;
63415: LD_ADDR_EXP 99
63419: PUSH
63420: LD_INT 1
63422: ST_TO_ADDR
// if p3 = 116 then
63423: LD_VAR 0 3
63427: PUSH
63428: LD_INT 116
63430: EQUAL
63431: IFFALSE 63441
// sComputer := true ;
63433: LD_ADDR_EXP 100
63437: PUSH
63438: LD_INT 1
63440: ST_TO_ADDR
// if p3 = 117 then
63441: LD_VAR 0 3
63445: PUSH
63446: LD_INT 117
63448: EQUAL
63449: IFFALSE 63459
// s30 := true ;
63451: LD_ADDR_EXP 101
63455: PUSH
63456: LD_INT 1
63458: ST_TO_ADDR
// if p3 = 118 then
63459: LD_VAR 0 3
63463: PUSH
63464: LD_INT 118
63466: EQUAL
63467: IFFALSE 63477
// s60 := true ;
63469: LD_ADDR_EXP 102
63473: PUSH
63474: LD_INT 1
63476: ST_TO_ADDR
// end ; if p2 = hack_mode then
63477: LD_VAR 0 2
63481: PUSH
63482: LD_INT 101
63484: EQUAL
63485: IFFALSE 63613
// begin case p3 of 1 :
63487: LD_VAR 0 3
63491: PUSH
63492: LD_INT 1
63494: DOUBLE
63495: EQUAL
63496: IFTRUE 63500
63498: GO 63507
63500: POP
// hHackUnlimitedResources ; 2 :
63501: CALL 75760 0 0
63505: GO 63613
63507: LD_INT 2
63509: DOUBLE
63510: EQUAL
63511: IFTRUE 63515
63513: GO 63522
63515: POP
// hHackSetLevel10 ; 3 :
63516: CALL 75893 0 0
63520: GO 63613
63522: LD_INT 3
63524: DOUBLE
63525: EQUAL
63526: IFTRUE 63530
63528: GO 63537
63530: POP
// hHackSetLevel10YourUnits ; 4 :
63531: CALL 75978 0 0
63535: GO 63613
63537: LD_INT 4
63539: DOUBLE
63540: EQUAL
63541: IFTRUE 63545
63543: GO 63552
63545: POP
// hHackInvincible ; 5 :
63546: CALL 76426 0 0
63550: GO 63613
63552: LD_INT 5
63554: DOUBLE
63555: EQUAL
63556: IFTRUE 63560
63558: GO 63567
63560: POP
// hHackInvisible ; 6 :
63561: CALL 76537 0 0
63565: GO 63613
63567: LD_INT 6
63569: DOUBLE
63570: EQUAL
63571: IFTRUE 63575
63573: GO 63582
63575: POP
// hHackChangeYourSide ; 7 :
63576: CALL 76594 0 0
63580: GO 63613
63582: LD_INT 7
63584: DOUBLE
63585: EQUAL
63586: IFTRUE 63590
63588: GO 63597
63590: POP
// hHackChangeUnitSide ; 8 :
63591: CALL 76636 0 0
63595: GO 63613
63597: LD_INT 8
63599: DOUBLE
63600: EQUAL
63601: IFTRUE 63605
63603: GO 63612
63605: POP
// hHackFog ; end ;
63606: CALL 76737 0 0
63610: GO 63613
63612: POP
// end ; if p2 = game_save_mode then
63613: LD_VAR 0 2
63617: PUSH
63618: LD_INT 102
63620: EQUAL
63621: IFFALSE 63676
// begin if p3 = 1 then
63623: LD_VAR 0 3
63627: PUSH
63628: LD_INT 1
63630: EQUAL
63631: IFFALSE 63643
// globalGameSaveCounter := p4 ;
63633: LD_ADDR_EXP 45
63637: PUSH
63638: LD_VAR 0 4
63642: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
63643: LD_VAR 0 3
63647: PUSH
63648: LD_INT 2
63650: EQUAL
63651: PUSH
63652: LD_EXP 45
63656: AND
63657: IFFALSE 63676
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63659: LD_STRING setGameSaveCounter(
63661: PUSH
63662: LD_EXP 45
63666: STR
63667: PUSH
63668: LD_STRING )
63670: STR
63671: PPUSH
63672: CALL_OW 559
// end ; end ;
63676: LD_VAR 0 7
63680: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
63681: LD_INT 0
63683: PPUSH
// streamModeActive := false ;
63684: LD_ADDR_EXP 46
63688: PUSH
63689: LD_INT 0
63691: ST_TO_ADDR
// normalCounter := 36 ;
63692: LD_ADDR_EXP 47
63696: PUSH
63697: LD_INT 36
63699: ST_TO_ADDR
// hardcoreCounter := 18 ;
63700: LD_ADDR_EXP 48
63704: PUSH
63705: LD_INT 18
63707: ST_TO_ADDR
// sRocket := false ;
63708: LD_ADDR_EXP 51
63712: PUSH
63713: LD_INT 0
63715: ST_TO_ADDR
// sSpeed := false ;
63716: LD_ADDR_EXP 50
63720: PUSH
63721: LD_INT 0
63723: ST_TO_ADDR
// sEngine := false ;
63724: LD_ADDR_EXP 52
63728: PUSH
63729: LD_INT 0
63731: ST_TO_ADDR
// sSpec := false ;
63732: LD_ADDR_EXP 49
63736: PUSH
63737: LD_INT 0
63739: ST_TO_ADDR
// sLevel := false ;
63740: LD_ADDR_EXP 53
63744: PUSH
63745: LD_INT 0
63747: ST_TO_ADDR
// sArmoury := false ;
63748: LD_ADDR_EXP 54
63752: PUSH
63753: LD_INT 0
63755: ST_TO_ADDR
// sRadar := false ;
63756: LD_ADDR_EXP 55
63760: PUSH
63761: LD_INT 0
63763: ST_TO_ADDR
// sBunker := false ;
63764: LD_ADDR_EXP 56
63768: PUSH
63769: LD_INT 0
63771: ST_TO_ADDR
// sHack := false ;
63772: LD_ADDR_EXP 57
63776: PUSH
63777: LD_INT 0
63779: ST_TO_ADDR
// sFire := false ;
63780: LD_ADDR_EXP 58
63784: PUSH
63785: LD_INT 0
63787: ST_TO_ADDR
// sRefresh := false ;
63788: LD_ADDR_EXP 59
63792: PUSH
63793: LD_INT 0
63795: ST_TO_ADDR
// sExp := false ;
63796: LD_ADDR_EXP 60
63800: PUSH
63801: LD_INT 0
63803: ST_TO_ADDR
// sDepot := false ;
63804: LD_ADDR_EXP 61
63808: PUSH
63809: LD_INT 0
63811: ST_TO_ADDR
// sFlag := false ;
63812: LD_ADDR_EXP 62
63816: PUSH
63817: LD_INT 0
63819: ST_TO_ADDR
// sKamikadze := false ;
63820: LD_ADDR_EXP 70
63824: PUSH
63825: LD_INT 0
63827: ST_TO_ADDR
// sTroll := false ;
63828: LD_ADDR_EXP 71
63832: PUSH
63833: LD_INT 0
63835: ST_TO_ADDR
// sSlow := false ;
63836: LD_ADDR_EXP 72
63840: PUSH
63841: LD_INT 0
63843: ST_TO_ADDR
// sLack := false ;
63844: LD_ADDR_EXP 73
63848: PUSH
63849: LD_INT 0
63851: ST_TO_ADDR
// sTank := false ;
63852: LD_ADDR_EXP 75
63856: PUSH
63857: LD_INT 0
63859: ST_TO_ADDR
// sRemote := false ;
63860: LD_ADDR_EXP 76
63864: PUSH
63865: LD_INT 0
63867: ST_TO_ADDR
// sPowell := false ;
63868: LD_ADDR_EXP 77
63872: PUSH
63873: LD_INT 0
63875: ST_TO_ADDR
// sTeleport := false ;
63876: LD_ADDR_EXP 80
63880: PUSH
63881: LD_INT 0
63883: ST_TO_ADDR
// sOilTower := false ;
63884: LD_ADDR_EXP 82
63888: PUSH
63889: LD_INT 0
63891: ST_TO_ADDR
// sShovel := false ;
63892: LD_ADDR_EXP 83
63896: PUSH
63897: LD_INT 0
63899: ST_TO_ADDR
// sSheik := false ;
63900: LD_ADDR_EXP 84
63904: PUSH
63905: LD_INT 0
63907: ST_TO_ADDR
// sEarthquake := false ;
63908: LD_ADDR_EXP 86
63912: PUSH
63913: LD_INT 0
63915: ST_TO_ADDR
// sAI := false ;
63916: LD_ADDR_EXP 87
63920: PUSH
63921: LD_INT 0
63923: ST_TO_ADDR
// sCargo := false ;
63924: LD_ADDR_EXP 90
63928: PUSH
63929: LD_INT 0
63931: ST_TO_ADDR
// sDLaser := false ;
63932: LD_ADDR_EXP 91
63936: PUSH
63937: LD_INT 0
63939: ST_TO_ADDR
// sExchange := false ;
63940: LD_ADDR_EXP 92
63944: PUSH
63945: LD_INT 0
63947: ST_TO_ADDR
// sFac := false ;
63948: LD_ADDR_EXP 93
63952: PUSH
63953: LD_INT 0
63955: ST_TO_ADDR
// sPower := false ;
63956: LD_ADDR_EXP 94
63960: PUSH
63961: LD_INT 0
63963: ST_TO_ADDR
// sRandom := false ;
63964: LD_ADDR_EXP 95
63968: PUSH
63969: LD_INT 0
63971: ST_TO_ADDR
// sShield := false ;
63972: LD_ADDR_EXP 96
63976: PUSH
63977: LD_INT 0
63979: ST_TO_ADDR
// sTime := false ;
63980: LD_ADDR_EXP 97
63984: PUSH
63985: LD_INT 0
63987: ST_TO_ADDR
// sTools := false ;
63988: LD_ADDR_EXP 98
63992: PUSH
63993: LD_INT 0
63995: ST_TO_ADDR
// sSold := false ;
63996: LD_ADDR_EXP 63
64000: PUSH
64001: LD_INT 0
64003: ST_TO_ADDR
// sDiff := false ;
64004: LD_ADDR_EXP 64
64008: PUSH
64009: LD_INT 0
64011: ST_TO_ADDR
// sFog := false ;
64012: LD_ADDR_EXP 67
64016: PUSH
64017: LD_INT 0
64019: ST_TO_ADDR
// sReset := false ;
64020: LD_ADDR_EXP 68
64024: PUSH
64025: LD_INT 0
64027: ST_TO_ADDR
// sSun := false ;
64028: LD_ADDR_EXP 69
64032: PUSH
64033: LD_INT 0
64035: ST_TO_ADDR
// sTiger := false ;
64036: LD_ADDR_EXP 65
64040: PUSH
64041: LD_INT 0
64043: ST_TO_ADDR
// sBomb := false ;
64044: LD_ADDR_EXP 66
64048: PUSH
64049: LD_INT 0
64051: ST_TO_ADDR
// sWound := false ;
64052: LD_ADDR_EXP 74
64056: PUSH
64057: LD_INT 0
64059: ST_TO_ADDR
// sBetray := false ;
64060: LD_ADDR_EXP 78
64064: PUSH
64065: LD_INT 0
64067: ST_TO_ADDR
// sContamin := false ;
64068: LD_ADDR_EXP 79
64072: PUSH
64073: LD_INT 0
64075: ST_TO_ADDR
// sOil := false ;
64076: LD_ADDR_EXP 81
64080: PUSH
64081: LD_INT 0
64083: ST_TO_ADDR
// sStu := false ;
64084: LD_ADDR_EXP 85
64088: PUSH
64089: LD_INT 0
64091: ST_TO_ADDR
// sBazooka := false ;
64092: LD_ADDR_EXP 88
64096: PUSH
64097: LD_INT 0
64099: ST_TO_ADDR
// sMortar := false ;
64100: LD_ADDR_EXP 89
64104: PUSH
64105: LD_INT 0
64107: ST_TO_ADDR
// sRanger := false ;
64108: LD_ADDR_EXP 99
64112: PUSH
64113: LD_INT 0
64115: ST_TO_ADDR
// sComputer := false ;
64116: LD_ADDR_EXP 100
64120: PUSH
64121: LD_INT 0
64123: ST_TO_ADDR
// s30 := false ;
64124: LD_ADDR_EXP 101
64128: PUSH
64129: LD_INT 0
64131: ST_TO_ADDR
// s60 := false ;
64132: LD_ADDR_EXP 102
64136: PUSH
64137: LD_INT 0
64139: ST_TO_ADDR
// end ;
64140: LD_VAR 0 1
64144: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
64145: LD_INT 0
64147: PPUSH
64148: PPUSH
64149: PPUSH
64150: PPUSH
64151: PPUSH
64152: PPUSH
64153: PPUSH
// result := [ ] ;
64154: LD_ADDR_VAR 0 2
64158: PUSH
64159: EMPTY
64160: ST_TO_ADDR
// if campaign_id = 1 then
64161: LD_OWVAR 69
64165: PUSH
64166: LD_INT 1
64168: EQUAL
64169: IFFALSE 67335
// begin case mission_number of 1 :
64171: LD_OWVAR 70
64175: PUSH
64176: LD_INT 1
64178: DOUBLE
64179: EQUAL
64180: IFTRUE 64184
64182: GO 64260
64184: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
64185: LD_ADDR_VAR 0 2
64189: PUSH
64190: LD_INT 2
64192: PUSH
64193: LD_INT 4
64195: PUSH
64196: LD_INT 11
64198: PUSH
64199: LD_INT 12
64201: PUSH
64202: LD_INT 15
64204: PUSH
64205: LD_INT 16
64207: PUSH
64208: LD_INT 22
64210: PUSH
64211: LD_INT 23
64213: PUSH
64214: LD_INT 26
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 101
64230: PUSH
64231: LD_INT 102
64233: PUSH
64234: LD_INT 106
64236: PUSH
64237: LD_INT 116
64239: PUSH
64240: LD_INT 117
64242: PUSH
64243: LD_INT 118
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: ST_TO_ADDR
64258: GO 67333
64260: LD_INT 2
64262: DOUBLE
64263: EQUAL
64264: IFTRUE 64268
64266: GO 64352
64268: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
64269: LD_ADDR_VAR 0 2
64273: PUSH
64274: LD_INT 2
64276: PUSH
64277: LD_INT 4
64279: PUSH
64280: LD_INT 11
64282: PUSH
64283: LD_INT 12
64285: PUSH
64286: LD_INT 15
64288: PUSH
64289: LD_INT 16
64291: PUSH
64292: LD_INT 22
64294: PUSH
64295: LD_INT 23
64297: PUSH
64298: LD_INT 26
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 101
64314: PUSH
64315: LD_INT 102
64317: PUSH
64318: LD_INT 105
64320: PUSH
64321: LD_INT 106
64323: PUSH
64324: LD_INT 108
64326: PUSH
64327: LD_INT 116
64329: PUSH
64330: LD_INT 117
64332: PUSH
64333: LD_INT 118
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: ST_TO_ADDR
64350: GO 67333
64352: LD_INT 3
64354: DOUBLE
64355: EQUAL
64356: IFTRUE 64360
64358: GO 64448
64360: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
64361: LD_ADDR_VAR 0 2
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: LD_INT 4
64371: PUSH
64372: LD_INT 5
64374: PUSH
64375: LD_INT 11
64377: PUSH
64378: LD_INT 12
64380: PUSH
64381: LD_INT 15
64383: PUSH
64384: LD_INT 16
64386: PUSH
64387: LD_INT 22
64389: PUSH
64390: LD_INT 26
64392: PUSH
64393: LD_INT 36
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 101
64410: PUSH
64411: LD_INT 102
64413: PUSH
64414: LD_INT 105
64416: PUSH
64417: LD_INT 106
64419: PUSH
64420: LD_INT 108
64422: PUSH
64423: LD_INT 116
64425: PUSH
64426: LD_INT 117
64428: PUSH
64429: LD_INT 118
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: ST_TO_ADDR
64446: GO 67333
64448: LD_INT 4
64450: DOUBLE
64451: EQUAL
64452: IFTRUE 64456
64454: GO 64552
64456: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
64457: LD_ADDR_VAR 0 2
64461: PUSH
64462: LD_INT 2
64464: PUSH
64465: LD_INT 4
64467: PUSH
64468: LD_INT 5
64470: PUSH
64471: LD_INT 8
64473: PUSH
64474: LD_INT 11
64476: PUSH
64477: LD_INT 12
64479: PUSH
64480: LD_INT 15
64482: PUSH
64483: LD_INT 16
64485: PUSH
64486: LD_INT 22
64488: PUSH
64489: LD_INT 23
64491: PUSH
64492: LD_INT 26
64494: PUSH
64495: LD_INT 36
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 101
64514: PUSH
64515: LD_INT 102
64517: PUSH
64518: LD_INT 105
64520: PUSH
64521: LD_INT 106
64523: PUSH
64524: LD_INT 108
64526: PUSH
64527: LD_INT 116
64529: PUSH
64530: LD_INT 117
64532: PUSH
64533: LD_INT 118
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: ST_TO_ADDR
64550: GO 67333
64552: LD_INT 5
64554: DOUBLE
64555: EQUAL
64556: IFTRUE 64560
64558: GO 64672
64560: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
64561: LD_ADDR_VAR 0 2
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: LD_INT 4
64571: PUSH
64572: LD_INT 5
64574: PUSH
64575: LD_INT 6
64577: PUSH
64578: LD_INT 8
64580: PUSH
64581: LD_INT 11
64583: PUSH
64584: LD_INT 12
64586: PUSH
64587: LD_INT 15
64589: PUSH
64590: LD_INT 16
64592: PUSH
64593: LD_INT 22
64595: PUSH
64596: LD_INT 23
64598: PUSH
64599: LD_INT 25
64601: PUSH
64602: LD_INT 26
64604: PUSH
64605: LD_INT 36
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 101
64626: PUSH
64627: LD_INT 102
64629: PUSH
64630: LD_INT 105
64632: PUSH
64633: LD_INT 106
64635: PUSH
64636: LD_INT 108
64638: PUSH
64639: LD_INT 109
64641: PUSH
64642: LD_INT 112
64644: PUSH
64645: LD_INT 116
64647: PUSH
64648: LD_INT 117
64650: PUSH
64651: LD_INT 118
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: ST_TO_ADDR
64670: GO 67333
64672: LD_INT 6
64674: DOUBLE
64675: EQUAL
64676: IFTRUE 64680
64678: GO 64812
64680: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
64681: LD_ADDR_VAR 0 2
64685: PUSH
64686: LD_INT 2
64688: PUSH
64689: LD_INT 4
64691: PUSH
64692: LD_INT 5
64694: PUSH
64695: LD_INT 6
64697: PUSH
64698: LD_INT 8
64700: PUSH
64701: LD_INT 11
64703: PUSH
64704: LD_INT 12
64706: PUSH
64707: LD_INT 15
64709: PUSH
64710: LD_INT 16
64712: PUSH
64713: LD_INT 20
64715: PUSH
64716: LD_INT 21
64718: PUSH
64719: LD_INT 22
64721: PUSH
64722: LD_INT 23
64724: PUSH
64725: LD_INT 25
64727: PUSH
64728: LD_INT 26
64730: PUSH
64731: LD_INT 30
64733: PUSH
64734: LD_INT 31
64736: PUSH
64737: LD_INT 32
64739: PUSH
64740: LD_INT 36
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 101
64766: PUSH
64767: LD_INT 102
64769: PUSH
64770: LD_INT 105
64772: PUSH
64773: LD_INT 106
64775: PUSH
64776: LD_INT 108
64778: PUSH
64779: LD_INT 109
64781: PUSH
64782: LD_INT 112
64784: PUSH
64785: LD_INT 116
64787: PUSH
64788: LD_INT 117
64790: PUSH
64791: LD_INT 118
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: ST_TO_ADDR
64810: GO 67333
64812: LD_INT 7
64814: DOUBLE
64815: EQUAL
64816: IFTRUE 64820
64818: GO 64932
64820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
64821: LD_ADDR_VAR 0 2
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: LD_INT 4
64831: PUSH
64832: LD_INT 5
64834: PUSH
64835: LD_INT 7
64837: PUSH
64838: LD_INT 11
64840: PUSH
64841: LD_INT 12
64843: PUSH
64844: LD_INT 15
64846: PUSH
64847: LD_INT 16
64849: PUSH
64850: LD_INT 20
64852: PUSH
64853: LD_INT 21
64855: PUSH
64856: LD_INT 22
64858: PUSH
64859: LD_INT 23
64861: PUSH
64862: LD_INT 25
64864: PUSH
64865: LD_INT 26
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 101
64886: PUSH
64887: LD_INT 102
64889: PUSH
64890: LD_INT 103
64892: PUSH
64893: LD_INT 105
64895: PUSH
64896: LD_INT 106
64898: PUSH
64899: LD_INT 108
64901: PUSH
64902: LD_INT 112
64904: PUSH
64905: LD_INT 116
64907: PUSH
64908: LD_INT 117
64910: PUSH
64911: LD_INT 118
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: ST_TO_ADDR
64930: GO 67333
64932: LD_INT 8
64934: DOUBLE
64935: EQUAL
64936: IFTRUE 64940
64938: GO 65080
64940: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
64941: LD_ADDR_VAR 0 2
64945: PUSH
64946: LD_INT 2
64948: PUSH
64949: LD_INT 4
64951: PUSH
64952: LD_INT 5
64954: PUSH
64955: LD_INT 6
64957: PUSH
64958: LD_INT 7
64960: PUSH
64961: LD_INT 8
64963: PUSH
64964: LD_INT 11
64966: PUSH
64967: LD_INT 12
64969: PUSH
64970: LD_INT 15
64972: PUSH
64973: LD_INT 16
64975: PUSH
64976: LD_INT 20
64978: PUSH
64979: LD_INT 21
64981: PUSH
64982: LD_INT 22
64984: PUSH
64985: LD_INT 23
64987: PUSH
64988: LD_INT 25
64990: PUSH
64991: LD_INT 26
64993: PUSH
64994: LD_INT 30
64996: PUSH
64997: LD_INT 31
64999: PUSH
65000: LD_INT 32
65002: PUSH
65003: LD_INT 36
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 101
65030: PUSH
65031: LD_INT 102
65033: PUSH
65034: LD_INT 103
65036: PUSH
65037: LD_INT 105
65039: PUSH
65040: LD_INT 106
65042: PUSH
65043: LD_INT 108
65045: PUSH
65046: LD_INT 109
65048: PUSH
65049: LD_INT 112
65051: PUSH
65052: LD_INT 116
65054: PUSH
65055: LD_INT 117
65057: PUSH
65058: LD_INT 118
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: ST_TO_ADDR
65078: GO 67333
65080: LD_INT 9
65082: DOUBLE
65083: EQUAL
65084: IFTRUE 65088
65086: GO 65236
65088: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
65089: LD_ADDR_VAR 0 2
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: LD_INT 4
65099: PUSH
65100: LD_INT 5
65102: PUSH
65103: LD_INT 6
65105: PUSH
65106: LD_INT 7
65108: PUSH
65109: LD_INT 8
65111: PUSH
65112: LD_INT 11
65114: PUSH
65115: LD_INT 12
65117: PUSH
65118: LD_INT 15
65120: PUSH
65121: LD_INT 16
65123: PUSH
65124: LD_INT 20
65126: PUSH
65127: LD_INT 21
65129: PUSH
65130: LD_INT 22
65132: PUSH
65133: LD_INT 23
65135: PUSH
65136: LD_INT 25
65138: PUSH
65139: LD_INT 26
65141: PUSH
65142: LD_INT 28
65144: PUSH
65145: LD_INT 30
65147: PUSH
65148: LD_INT 31
65150: PUSH
65151: LD_INT 32
65153: PUSH
65154: LD_INT 36
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 101
65182: PUSH
65183: LD_INT 102
65185: PUSH
65186: LD_INT 103
65188: PUSH
65189: LD_INT 105
65191: PUSH
65192: LD_INT 106
65194: PUSH
65195: LD_INT 108
65197: PUSH
65198: LD_INT 109
65200: PUSH
65201: LD_INT 112
65203: PUSH
65204: LD_INT 114
65206: PUSH
65207: LD_INT 116
65209: PUSH
65210: LD_INT 117
65212: PUSH
65213: LD_INT 118
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: ST_TO_ADDR
65234: GO 67333
65236: LD_INT 10
65238: DOUBLE
65239: EQUAL
65240: IFTRUE 65244
65242: GO 65440
65244: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
65245: LD_ADDR_VAR 0 2
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: LD_INT 4
65255: PUSH
65256: LD_INT 5
65258: PUSH
65259: LD_INT 6
65261: PUSH
65262: LD_INT 7
65264: PUSH
65265: LD_INT 8
65267: PUSH
65268: LD_INT 9
65270: PUSH
65271: LD_INT 10
65273: PUSH
65274: LD_INT 11
65276: PUSH
65277: LD_INT 12
65279: PUSH
65280: LD_INT 13
65282: PUSH
65283: LD_INT 14
65285: PUSH
65286: LD_INT 15
65288: PUSH
65289: LD_INT 16
65291: PUSH
65292: LD_INT 17
65294: PUSH
65295: LD_INT 18
65297: PUSH
65298: LD_INT 19
65300: PUSH
65301: LD_INT 20
65303: PUSH
65304: LD_INT 21
65306: PUSH
65307: LD_INT 22
65309: PUSH
65310: LD_INT 23
65312: PUSH
65313: LD_INT 24
65315: PUSH
65316: LD_INT 25
65318: PUSH
65319: LD_INT 26
65321: PUSH
65322: LD_INT 28
65324: PUSH
65325: LD_INT 30
65327: PUSH
65328: LD_INT 31
65330: PUSH
65331: LD_INT 32
65333: PUSH
65334: LD_INT 36
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 101
65370: PUSH
65371: LD_INT 102
65373: PUSH
65374: LD_INT 103
65376: PUSH
65377: LD_INT 104
65379: PUSH
65380: LD_INT 105
65382: PUSH
65383: LD_INT 106
65385: PUSH
65386: LD_INT 107
65388: PUSH
65389: LD_INT 108
65391: PUSH
65392: LD_INT 109
65394: PUSH
65395: LD_INT 110
65397: PUSH
65398: LD_INT 111
65400: PUSH
65401: LD_INT 112
65403: PUSH
65404: LD_INT 114
65406: PUSH
65407: LD_INT 116
65409: PUSH
65410: LD_INT 117
65412: PUSH
65413: LD_INT 118
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: ST_TO_ADDR
65438: GO 67333
65440: LD_INT 11
65442: DOUBLE
65443: EQUAL
65444: IFTRUE 65448
65446: GO 65652
65448: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
65449: LD_ADDR_VAR 0 2
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: LD_INT 3
65459: PUSH
65460: LD_INT 4
65462: PUSH
65463: LD_INT 5
65465: PUSH
65466: LD_INT 6
65468: PUSH
65469: LD_INT 7
65471: PUSH
65472: LD_INT 8
65474: PUSH
65475: LD_INT 9
65477: PUSH
65478: LD_INT 10
65480: PUSH
65481: LD_INT 11
65483: PUSH
65484: LD_INT 12
65486: PUSH
65487: LD_INT 13
65489: PUSH
65490: LD_INT 14
65492: PUSH
65493: LD_INT 15
65495: PUSH
65496: LD_INT 16
65498: PUSH
65499: LD_INT 17
65501: PUSH
65502: LD_INT 18
65504: PUSH
65505: LD_INT 19
65507: PUSH
65508: LD_INT 20
65510: PUSH
65511: LD_INT 21
65513: PUSH
65514: LD_INT 22
65516: PUSH
65517: LD_INT 23
65519: PUSH
65520: LD_INT 24
65522: PUSH
65523: LD_INT 25
65525: PUSH
65526: LD_INT 26
65528: PUSH
65529: LD_INT 28
65531: PUSH
65532: LD_INT 30
65534: PUSH
65535: LD_INT 31
65537: PUSH
65538: LD_INT 32
65540: PUSH
65541: LD_INT 34
65543: PUSH
65544: LD_INT 36
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 101
65582: PUSH
65583: LD_INT 102
65585: PUSH
65586: LD_INT 103
65588: PUSH
65589: LD_INT 104
65591: PUSH
65592: LD_INT 105
65594: PUSH
65595: LD_INT 106
65597: PUSH
65598: LD_INT 107
65600: PUSH
65601: LD_INT 108
65603: PUSH
65604: LD_INT 109
65606: PUSH
65607: LD_INT 110
65609: PUSH
65610: LD_INT 111
65612: PUSH
65613: LD_INT 112
65615: PUSH
65616: LD_INT 114
65618: PUSH
65619: LD_INT 116
65621: PUSH
65622: LD_INT 117
65624: PUSH
65625: LD_INT 118
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: ST_TO_ADDR
65650: GO 67333
65652: LD_INT 12
65654: DOUBLE
65655: EQUAL
65656: IFTRUE 65660
65658: GO 65880
65660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
65661: LD_ADDR_VAR 0 2
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: LD_INT 2
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: LD_INT 4
65677: PUSH
65678: LD_INT 5
65680: PUSH
65681: LD_INT 6
65683: PUSH
65684: LD_INT 7
65686: PUSH
65687: LD_INT 8
65689: PUSH
65690: LD_INT 9
65692: PUSH
65693: LD_INT 10
65695: PUSH
65696: LD_INT 11
65698: PUSH
65699: LD_INT 12
65701: PUSH
65702: LD_INT 13
65704: PUSH
65705: LD_INT 14
65707: PUSH
65708: LD_INT 15
65710: PUSH
65711: LD_INT 16
65713: PUSH
65714: LD_INT 17
65716: PUSH
65717: LD_INT 18
65719: PUSH
65720: LD_INT 19
65722: PUSH
65723: LD_INT 20
65725: PUSH
65726: LD_INT 21
65728: PUSH
65729: LD_INT 22
65731: PUSH
65732: LD_INT 23
65734: PUSH
65735: LD_INT 24
65737: PUSH
65738: LD_INT 25
65740: PUSH
65741: LD_INT 26
65743: PUSH
65744: LD_INT 27
65746: PUSH
65747: LD_INT 28
65749: PUSH
65750: LD_INT 30
65752: PUSH
65753: LD_INT 31
65755: PUSH
65756: LD_INT 32
65758: PUSH
65759: LD_INT 33
65761: PUSH
65762: LD_INT 34
65764: PUSH
65765: LD_INT 36
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 101
65806: PUSH
65807: LD_INT 102
65809: PUSH
65810: LD_INT 103
65812: PUSH
65813: LD_INT 104
65815: PUSH
65816: LD_INT 105
65818: PUSH
65819: LD_INT 106
65821: PUSH
65822: LD_INT 107
65824: PUSH
65825: LD_INT 108
65827: PUSH
65828: LD_INT 109
65830: PUSH
65831: LD_INT 110
65833: PUSH
65834: LD_INT 111
65836: PUSH
65837: LD_INT 112
65839: PUSH
65840: LD_INT 113
65842: PUSH
65843: LD_INT 114
65845: PUSH
65846: LD_INT 116
65848: PUSH
65849: LD_INT 117
65851: PUSH
65852: LD_INT 118
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: ST_TO_ADDR
65878: GO 67333
65880: LD_INT 13
65882: DOUBLE
65883: EQUAL
65884: IFTRUE 65888
65886: GO 66096
65888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
65889: LD_ADDR_VAR 0 2
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: LD_INT 2
65899: PUSH
65900: LD_INT 3
65902: PUSH
65903: LD_INT 4
65905: PUSH
65906: LD_INT 5
65908: PUSH
65909: LD_INT 8
65911: PUSH
65912: LD_INT 9
65914: PUSH
65915: LD_INT 10
65917: PUSH
65918: LD_INT 11
65920: PUSH
65921: LD_INT 12
65923: PUSH
65924: LD_INT 14
65926: PUSH
65927: LD_INT 15
65929: PUSH
65930: LD_INT 16
65932: PUSH
65933: LD_INT 17
65935: PUSH
65936: LD_INT 18
65938: PUSH
65939: LD_INT 19
65941: PUSH
65942: LD_INT 20
65944: PUSH
65945: LD_INT 21
65947: PUSH
65948: LD_INT 22
65950: PUSH
65951: LD_INT 23
65953: PUSH
65954: LD_INT 24
65956: PUSH
65957: LD_INT 25
65959: PUSH
65960: LD_INT 26
65962: PUSH
65963: LD_INT 27
65965: PUSH
65966: LD_INT 28
65968: PUSH
65969: LD_INT 30
65971: PUSH
65972: LD_INT 31
65974: PUSH
65975: LD_INT 32
65977: PUSH
65978: LD_INT 33
65980: PUSH
65981: LD_INT 34
65983: PUSH
65984: LD_INT 36
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 101
66022: PUSH
66023: LD_INT 102
66025: PUSH
66026: LD_INT 103
66028: PUSH
66029: LD_INT 104
66031: PUSH
66032: LD_INT 105
66034: PUSH
66035: LD_INT 106
66037: PUSH
66038: LD_INT 107
66040: PUSH
66041: LD_INT 108
66043: PUSH
66044: LD_INT 109
66046: PUSH
66047: LD_INT 110
66049: PUSH
66050: LD_INT 111
66052: PUSH
66053: LD_INT 112
66055: PUSH
66056: LD_INT 113
66058: PUSH
66059: LD_INT 114
66061: PUSH
66062: LD_INT 116
66064: PUSH
66065: LD_INT 117
66067: PUSH
66068: LD_INT 118
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: ST_TO_ADDR
66094: GO 67333
66096: LD_INT 14
66098: DOUBLE
66099: EQUAL
66100: IFTRUE 66104
66102: GO 66328
66104: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
66105: LD_ADDR_VAR 0 2
66109: PUSH
66110: LD_INT 1
66112: PUSH
66113: LD_INT 2
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: LD_INT 4
66121: PUSH
66122: LD_INT 5
66124: PUSH
66125: LD_INT 6
66127: PUSH
66128: LD_INT 7
66130: PUSH
66131: LD_INT 8
66133: PUSH
66134: LD_INT 9
66136: PUSH
66137: LD_INT 10
66139: PUSH
66140: LD_INT 11
66142: PUSH
66143: LD_INT 12
66145: PUSH
66146: LD_INT 13
66148: PUSH
66149: LD_INT 14
66151: PUSH
66152: LD_INT 15
66154: PUSH
66155: LD_INT 16
66157: PUSH
66158: LD_INT 17
66160: PUSH
66161: LD_INT 18
66163: PUSH
66164: LD_INT 19
66166: PUSH
66167: LD_INT 20
66169: PUSH
66170: LD_INT 21
66172: PUSH
66173: LD_INT 22
66175: PUSH
66176: LD_INT 23
66178: PUSH
66179: LD_INT 24
66181: PUSH
66182: LD_INT 25
66184: PUSH
66185: LD_INT 26
66187: PUSH
66188: LD_INT 27
66190: PUSH
66191: LD_INT 28
66193: PUSH
66194: LD_INT 29
66196: PUSH
66197: LD_INT 30
66199: PUSH
66200: LD_INT 31
66202: PUSH
66203: LD_INT 32
66205: PUSH
66206: LD_INT 33
66208: PUSH
66209: LD_INT 34
66211: PUSH
66212: LD_INT 36
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 101
66254: PUSH
66255: LD_INT 102
66257: PUSH
66258: LD_INT 103
66260: PUSH
66261: LD_INT 104
66263: PUSH
66264: LD_INT 105
66266: PUSH
66267: LD_INT 106
66269: PUSH
66270: LD_INT 107
66272: PUSH
66273: LD_INT 108
66275: PUSH
66276: LD_INT 109
66278: PUSH
66279: LD_INT 110
66281: PUSH
66282: LD_INT 111
66284: PUSH
66285: LD_INT 112
66287: PUSH
66288: LD_INT 113
66290: PUSH
66291: LD_INT 114
66293: PUSH
66294: LD_INT 116
66296: PUSH
66297: LD_INT 117
66299: PUSH
66300: LD_INT 118
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: ST_TO_ADDR
66326: GO 67333
66328: LD_INT 15
66330: DOUBLE
66331: EQUAL
66332: IFTRUE 66336
66334: GO 66560
66336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
66337: LD_ADDR_VAR 0 2
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: LD_INT 2
66347: PUSH
66348: LD_INT 3
66350: PUSH
66351: LD_INT 4
66353: PUSH
66354: LD_INT 5
66356: PUSH
66357: LD_INT 6
66359: PUSH
66360: LD_INT 7
66362: PUSH
66363: LD_INT 8
66365: PUSH
66366: LD_INT 9
66368: PUSH
66369: LD_INT 10
66371: PUSH
66372: LD_INT 11
66374: PUSH
66375: LD_INT 12
66377: PUSH
66378: LD_INT 13
66380: PUSH
66381: LD_INT 14
66383: PUSH
66384: LD_INT 15
66386: PUSH
66387: LD_INT 16
66389: PUSH
66390: LD_INT 17
66392: PUSH
66393: LD_INT 18
66395: PUSH
66396: LD_INT 19
66398: PUSH
66399: LD_INT 20
66401: PUSH
66402: LD_INT 21
66404: PUSH
66405: LD_INT 22
66407: PUSH
66408: LD_INT 23
66410: PUSH
66411: LD_INT 24
66413: PUSH
66414: LD_INT 25
66416: PUSH
66417: LD_INT 26
66419: PUSH
66420: LD_INT 27
66422: PUSH
66423: LD_INT 28
66425: PUSH
66426: LD_INT 29
66428: PUSH
66429: LD_INT 30
66431: PUSH
66432: LD_INT 31
66434: PUSH
66435: LD_INT 32
66437: PUSH
66438: LD_INT 33
66440: PUSH
66441: LD_INT 34
66443: PUSH
66444: LD_INT 36
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 101
66486: PUSH
66487: LD_INT 102
66489: PUSH
66490: LD_INT 103
66492: PUSH
66493: LD_INT 104
66495: PUSH
66496: LD_INT 105
66498: PUSH
66499: LD_INT 106
66501: PUSH
66502: LD_INT 107
66504: PUSH
66505: LD_INT 108
66507: PUSH
66508: LD_INT 109
66510: PUSH
66511: LD_INT 110
66513: PUSH
66514: LD_INT 111
66516: PUSH
66517: LD_INT 112
66519: PUSH
66520: LD_INT 113
66522: PUSH
66523: LD_INT 114
66525: PUSH
66526: LD_INT 116
66528: PUSH
66529: LD_INT 117
66531: PUSH
66532: LD_INT 118
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: LIST
66551: LIST
66552: LIST
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: ST_TO_ADDR
66558: GO 67333
66560: LD_INT 16
66562: DOUBLE
66563: EQUAL
66564: IFTRUE 66568
66566: GO 66704
66568: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
66569: LD_ADDR_VAR 0 2
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: LD_INT 4
66579: PUSH
66580: LD_INT 5
66582: PUSH
66583: LD_INT 7
66585: PUSH
66586: LD_INT 11
66588: PUSH
66589: LD_INT 12
66591: PUSH
66592: LD_INT 15
66594: PUSH
66595: LD_INT 16
66597: PUSH
66598: LD_INT 20
66600: PUSH
66601: LD_INT 21
66603: PUSH
66604: LD_INT 22
66606: PUSH
66607: LD_INT 23
66609: PUSH
66610: LD_INT 25
66612: PUSH
66613: LD_INT 26
66615: PUSH
66616: LD_INT 30
66618: PUSH
66619: LD_INT 31
66621: PUSH
66622: LD_INT 32
66624: PUSH
66625: LD_INT 33
66627: PUSH
66628: LD_INT 34
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 101
66654: PUSH
66655: LD_INT 102
66657: PUSH
66658: LD_INT 103
66660: PUSH
66661: LD_INT 106
66663: PUSH
66664: LD_INT 108
66666: PUSH
66667: LD_INT 112
66669: PUSH
66670: LD_INT 113
66672: PUSH
66673: LD_INT 114
66675: PUSH
66676: LD_INT 116
66678: PUSH
66679: LD_INT 117
66681: PUSH
66682: LD_INT 118
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: ST_TO_ADDR
66702: GO 67333
66704: LD_INT 17
66706: DOUBLE
66707: EQUAL
66708: IFTRUE 66712
66710: GO 66936
66712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
66713: LD_ADDR_VAR 0 2
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: LD_INT 2
66723: PUSH
66724: LD_INT 3
66726: PUSH
66727: LD_INT 4
66729: PUSH
66730: LD_INT 5
66732: PUSH
66733: LD_INT 6
66735: PUSH
66736: LD_INT 7
66738: PUSH
66739: LD_INT 8
66741: PUSH
66742: LD_INT 9
66744: PUSH
66745: LD_INT 10
66747: PUSH
66748: LD_INT 11
66750: PUSH
66751: LD_INT 12
66753: PUSH
66754: LD_INT 13
66756: PUSH
66757: LD_INT 14
66759: PUSH
66760: LD_INT 15
66762: PUSH
66763: LD_INT 16
66765: PUSH
66766: LD_INT 17
66768: PUSH
66769: LD_INT 18
66771: PUSH
66772: LD_INT 19
66774: PUSH
66775: LD_INT 20
66777: PUSH
66778: LD_INT 21
66780: PUSH
66781: LD_INT 22
66783: PUSH
66784: LD_INT 23
66786: PUSH
66787: LD_INT 24
66789: PUSH
66790: LD_INT 25
66792: PUSH
66793: LD_INT 26
66795: PUSH
66796: LD_INT 27
66798: PUSH
66799: LD_INT 28
66801: PUSH
66802: LD_INT 29
66804: PUSH
66805: LD_INT 30
66807: PUSH
66808: LD_INT 31
66810: PUSH
66811: LD_INT 32
66813: PUSH
66814: LD_INT 33
66816: PUSH
66817: LD_INT 34
66819: PUSH
66820: LD_INT 36
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 101
66862: PUSH
66863: LD_INT 102
66865: PUSH
66866: LD_INT 103
66868: PUSH
66869: LD_INT 104
66871: PUSH
66872: LD_INT 105
66874: PUSH
66875: LD_INT 106
66877: PUSH
66878: LD_INT 107
66880: PUSH
66881: LD_INT 108
66883: PUSH
66884: LD_INT 109
66886: PUSH
66887: LD_INT 110
66889: PUSH
66890: LD_INT 111
66892: PUSH
66893: LD_INT 112
66895: PUSH
66896: LD_INT 113
66898: PUSH
66899: LD_INT 114
66901: PUSH
66902: LD_INT 116
66904: PUSH
66905: LD_INT 117
66907: PUSH
66908: LD_INT 118
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: ST_TO_ADDR
66934: GO 67333
66936: LD_INT 18
66938: DOUBLE
66939: EQUAL
66940: IFTRUE 66944
66942: GO 67092
66944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
66945: LD_ADDR_VAR 0 2
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: LD_INT 4
66955: PUSH
66956: LD_INT 5
66958: PUSH
66959: LD_INT 7
66961: PUSH
66962: LD_INT 11
66964: PUSH
66965: LD_INT 12
66967: PUSH
66968: LD_INT 15
66970: PUSH
66971: LD_INT 16
66973: PUSH
66974: LD_INT 20
66976: PUSH
66977: LD_INT 21
66979: PUSH
66980: LD_INT 22
66982: PUSH
66983: LD_INT 23
66985: PUSH
66986: LD_INT 25
66988: PUSH
66989: LD_INT 26
66991: PUSH
66992: LD_INT 30
66994: PUSH
66995: LD_INT 31
66997: PUSH
66998: LD_INT 32
67000: PUSH
67001: LD_INT 33
67003: PUSH
67004: LD_INT 34
67006: PUSH
67007: LD_INT 35
67009: PUSH
67010: LD_INT 36
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 101
67038: PUSH
67039: LD_INT 102
67041: PUSH
67042: LD_INT 103
67044: PUSH
67045: LD_INT 106
67047: PUSH
67048: LD_INT 108
67050: PUSH
67051: LD_INT 112
67053: PUSH
67054: LD_INT 113
67056: PUSH
67057: LD_INT 114
67059: PUSH
67060: LD_INT 115
67062: PUSH
67063: LD_INT 116
67065: PUSH
67066: LD_INT 117
67068: PUSH
67069: LD_INT 118
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: ST_TO_ADDR
67090: GO 67333
67092: LD_INT 19
67094: DOUBLE
67095: EQUAL
67096: IFTRUE 67100
67098: GO 67332
67100: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
67101: LD_ADDR_VAR 0 2
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: LD_INT 2
67111: PUSH
67112: LD_INT 3
67114: PUSH
67115: LD_INT 4
67117: PUSH
67118: LD_INT 5
67120: PUSH
67121: LD_INT 6
67123: PUSH
67124: LD_INT 7
67126: PUSH
67127: LD_INT 8
67129: PUSH
67130: LD_INT 9
67132: PUSH
67133: LD_INT 10
67135: PUSH
67136: LD_INT 11
67138: PUSH
67139: LD_INT 12
67141: PUSH
67142: LD_INT 13
67144: PUSH
67145: LD_INT 14
67147: PUSH
67148: LD_INT 15
67150: PUSH
67151: LD_INT 16
67153: PUSH
67154: LD_INT 17
67156: PUSH
67157: LD_INT 18
67159: PUSH
67160: LD_INT 19
67162: PUSH
67163: LD_INT 20
67165: PUSH
67166: LD_INT 21
67168: PUSH
67169: LD_INT 22
67171: PUSH
67172: LD_INT 23
67174: PUSH
67175: LD_INT 24
67177: PUSH
67178: LD_INT 25
67180: PUSH
67181: LD_INT 26
67183: PUSH
67184: LD_INT 27
67186: PUSH
67187: LD_INT 28
67189: PUSH
67190: LD_INT 29
67192: PUSH
67193: LD_INT 30
67195: PUSH
67196: LD_INT 31
67198: PUSH
67199: LD_INT 32
67201: PUSH
67202: LD_INT 33
67204: PUSH
67205: LD_INT 34
67207: PUSH
67208: LD_INT 35
67210: PUSH
67211: LD_INT 36
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 101
67254: PUSH
67255: LD_INT 102
67257: PUSH
67258: LD_INT 103
67260: PUSH
67261: LD_INT 104
67263: PUSH
67264: LD_INT 105
67266: PUSH
67267: LD_INT 106
67269: PUSH
67270: LD_INT 107
67272: PUSH
67273: LD_INT 108
67275: PUSH
67276: LD_INT 109
67278: PUSH
67279: LD_INT 110
67281: PUSH
67282: LD_INT 111
67284: PUSH
67285: LD_INT 112
67287: PUSH
67288: LD_INT 113
67290: PUSH
67291: LD_INT 114
67293: PUSH
67294: LD_INT 115
67296: PUSH
67297: LD_INT 116
67299: PUSH
67300: LD_INT 117
67302: PUSH
67303: LD_INT 118
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: ST_TO_ADDR
67330: GO 67333
67332: POP
// end else
67333: GO 67564
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
67335: LD_ADDR_VAR 0 2
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: LD_INT 2
67345: PUSH
67346: LD_INT 3
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: LD_INT 5
67354: PUSH
67355: LD_INT 6
67357: PUSH
67358: LD_INT 7
67360: PUSH
67361: LD_INT 8
67363: PUSH
67364: LD_INT 9
67366: PUSH
67367: LD_INT 10
67369: PUSH
67370: LD_INT 11
67372: PUSH
67373: LD_INT 12
67375: PUSH
67376: LD_INT 13
67378: PUSH
67379: LD_INT 14
67381: PUSH
67382: LD_INT 15
67384: PUSH
67385: LD_INT 16
67387: PUSH
67388: LD_INT 17
67390: PUSH
67391: LD_INT 18
67393: PUSH
67394: LD_INT 19
67396: PUSH
67397: LD_INT 20
67399: PUSH
67400: LD_INT 21
67402: PUSH
67403: LD_INT 22
67405: PUSH
67406: LD_INT 23
67408: PUSH
67409: LD_INT 24
67411: PUSH
67412: LD_INT 25
67414: PUSH
67415: LD_INT 26
67417: PUSH
67418: LD_INT 27
67420: PUSH
67421: LD_INT 28
67423: PUSH
67424: LD_INT 29
67426: PUSH
67427: LD_INT 30
67429: PUSH
67430: LD_INT 31
67432: PUSH
67433: LD_INT 32
67435: PUSH
67436: LD_INT 33
67438: PUSH
67439: LD_INT 34
67441: PUSH
67442: LD_INT 35
67444: PUSH
67445: LD_INT 36
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 101
67488: PUSH
67489: LD_INT 102
67491: PUSH
67492: LD_INT 103
67494: PUSH
67495: LD_INT 104
67497: PUSH
67498: LD_INT 105
67500: PUSH
67501: LD_INT 106
67503: PUSH
67504: LD_INT 107
67506: PUSH
67507: LD_INT 108
67509: PUSH
67510: LD_INT 109
67512: PUSH
67513: LD_INT 110
67515: PUSH
67516: LD_INT 111
67518: PUSH
67519: LD_INT 112
67521: PUSH
67522: LD_INT 113
67524: PUSH
67525: LD_INT 114
67527: PUSH
67528: LD_INT 115
67530: PUSH
67531: LD_INT 116
67533: PUSH
67534: LD_INT 117
67536: PUSH
67537: LD_INT 118
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: ST_TO_ADDR
// if result then
67564: LD_VAR 0 2
67568: IFFALSE 68354
// begin normal :=  ;
67570: LD_ADDR_VAR 0 5
67574: PUSH
67575: LD_STRING 
67577: ST_TO_ADDR
// hardcore :=  ;
67578: LD_ADDR_VAR 0 6
67582: PUSH
67583: LD_STRING 
67585: ST_TO_ADDR
// active :=  ;
67586: LD_ADDR_VAR 0 7
67590: PUSH
67591: LD_STRING 
67593: ST_TO_ADDR
// for i = 1 to normalCounter do
67594: LD_ADDR_VAR 0 8
67598: PUSH
67599: DOUBLE
67600: LD_INT 1
67602: DEC
67603: ST_TO_ADDR
67604: LD_EXP 47
67608: PUSH
67609: FOR_TO
67610: IFFALSE 67711
// begin tmp := 0 ;
67612: LD_ADDR_VAR 0 3
67616: PUSH
67617: LD_STRING 0
67619: ST_TO_ADDR
// if result [ 1 ] then
67620: LD_VAR 0 2
67624: PUSH
67625: LD_INT 1
67627: ARRAY
67628: IFFALSE 67693
// if result [ 1 ] [ 1 ] = i then
67630: LD_VAR 0 2
67634: PUSH
67635: LD_INT 1
67637: ARRAY
67638: PUSH
67639: LD_INT 1
67641: ARRAY
67642: PUSH
67643: LD_VAR 0 8
67647: EQUAL
67648: IFFALSE 67693
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
67650: LD_ADDR_VAR 0 2
67654: PUSH
67655: LD_VAR 0 2
67659: PPUSH
67660: LD_INT 1
67662: PPUSH
67663: LD_VAR 0 2
67667: PUSH
67668: LD_INT 1
67670: ARRAY
67671: PPUSH
67672: LD_INT 1
67674: PPUSH
67675: CALL_OW 3
67679: PPUSH
67680: CALL_OW 1
67684: ST_TO_ADDR
// tmp := 1 ;
67685: LD_ADDR_VAR 0 3
67689: PUSH
67690: LD_STRING 1
67692: ST_TO_ADDR
// end ; normal := normal & tmp ;
67693: LD_ADDR_VAR 0 5
67697: PUSH
67698: LD_VAR 0 5
67702: PUSH
67703: LD_VAR 0 3
67707: STR
67708: ST_TO_ADDR
// end ;
67709: GO 67609
67711: POP
67712: POP
// for i = 1 to hardcoreCounter do
67713: LD_ADDR_VAR 0 8
67717: PUSH
67718: DOUBLE
67719: LD_INT 1
67721: DEC
67722: ST_TO_ADDR
67723: LD_EXP 48
67727: PUSH
67728: FOR_TO
67729: IFFALSE 67834
// begin tmp := 0 ;
67731: LD_ADDR_VAR 0 3
67735: PUSH
67736: LD_STRING 0
67738: ST_TO_ADDR
// if result [ 2 ] then
67739: LD_VAR 0 2
67743: PUSH
67744: LD_INT 2
67746: ARRAY
67747: IFFALSE 67816
// if result [ 2 ] [ 1 ] = 100 + i then
67749: LD_VAR 0 2
67753: PUSH
67754: LD_INT 2
67756: ARRAY
67757: PUSH
67758: LD_INT 1
67760: ARRAY
67761: PUSH
67762: LD_INT 100
67764: PUSH
67765: LD_VAR 0 8
67769: PLUS
67770: EQUAL
67771: IFFALSE 67816
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
67773: LD_ADDR_VAR 0 2
67777: PUSH
67778: LD_VAR 0 2
67782: PPUSH
67783: LD_INT 2
67785: PPUSH
67786: LD_VAR 0 2
67790: PUSH
67791: LD_INT 2
67793: ARRAY
67794: PPUSH
67795: LD_INT 1
67797: PPUSH
67798: CALL_OW 3
67802: PPUSH
67803: CALL_OW 1
67807: ST_TO_ADDR
// tmp := 1 ;
67808: LD_ADDR_VAR 0 3
67812: PUSH
67813: LD_STRING 1
67815: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
67816: LD_ADDR_VAR 0 6
67820: PUSH
67821: LD_VAR 0 6
67825: PUSH
67826: LD_VAR 0 3
67830: STR
67831: ST_TO_ADDR
// end ;
67832: GO 67728
67834: POP
67835: POP
// if isGameLoad then
67836: LD_VAR 0 1
67840: IFFALSE 68315
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
67842: LD_ADDR_VAR 0 4
67846: PUSH
67847: LD_EXP 51
67851: PUSH
67852: LD_EXP 50
67856: PUSH
67857: LD_EXP 52
67861: PUSH
67862: LD_EXP 49
67866: PUSH
67867: LD_EXP 53
67871: PUSH
67872: LD_EXP 54
67876: PUSH
67877: LD_EXP 55
67881: PUSH
67882: LD_EXP 56
67886: PUSH
67887: LD_EXP 57
67891: PUSH
67892: LD_EXP 58
67896: PUSH
67897: LD_EXP 59
67901: PUSH
67902: LD_EXP 60
67906: PUSH
67907: LD_EXP 61
67911: PUSH
67912: LD_EXP 62
67916: PUSH
67917: LD_EXP 70
67921: PUSH
67922: LD_EXP 71
67926: PUSH
67927: LD_EXP 72
67931: PUSH
67932: LD_EXP 73
67936: PUSH
67937: LD_EXP 75
67941: PUSH
67942: LD_EXP 76
67946: PUSH
67947: LD_EXP 77
67951: PUSH
67952: LD_EXP 80
67956: PUSH
67957: LD_EXP 82
67961: PUSH
67962: LD_EXP 83
67966: PUSH
67967: LD_EXP 84
67971: PUSH
67972: LD_EXP 86
67976: PUSH
67977: LD_EXP 87
67981: PUSH
67982: LD_EXP 90
67986: PUSH
67987: LD_EXP 91
67991: PUSH
67992: LD_EXP 92
67996: PUSH
67997: LD_EXP 93
68001: PUSH
68002: LD_EXP 94
68006: PUSH
68007: LD_EXP 95
68011: PUSH
68012: LD_EXP 96
68016: PUSH
68017: LD_EXP 97
68021: PUSH
68022: LD_EXP 98
68026: PUSH
68027: LD_EXP 63
68031: PUSH
68032: LD_EXP 64
68036: PUSH
68037: LD_EXP 67
68041: PUSH
68042: LD_EXP 68
68046: PUSH
68047: LD_EXP 69
68051: PUSH
68052: LD_EXP 65
68056: PUSH
68057: LD_EXP 66
68061: PUSH
68062: LD_EXP 74
68066: PUSH
68067: LD_EXP 78
68071: PUSH
68072: LD_EXP 79
68076: PUSH
68077: LD_EXP 81
68081: PUSH
68082: LD_EXP 85
68086: PUSH
68087: LD_EXP 88
68091: PUSH
68092: LD_EXP 89
68096: PUSH
68097: LD_EXP 99
68101: PUSH
68102: LD_EXP 100
68106: PUSH
68107: LD_EXP 101
68111: PUSH
68112: LD_EXP 102
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: ST_TO_ADDR
// tmp :=  ;
68173: LD_ADDR_VAR 0 3
68177: PUSH
68178: LD_STRING 
68180: ST_TO_ADDR
// for i = 1 to normalCounter do
68181: LD_ADDR_VAR 0 8
68185: PUSH
68186: DOUBLE
68187: LD_INT 1
68189: DEC
68190: ST_TO_ADDR
68191: LD_EXP 47
68195: PUSH
68196: FOR_TO
68197: IFFALSE 68233
// begin if flags [ i ] then
68199: LD_VAR 0 4
68203: PUSH
68204: LD_VAR 0 8
68208: ARRAY
68209: IFFALSE 68231
// tmp := tmp & i & ; ;
68211: LD_ADDR_VAR 0 3
68215: PUSH
68216: LD_VAR 0 3
68220: PUSH
68221: LD_VAR 0 8
68225: STR
68226: PUSH
68227: LD_STRING ;
68229: STR
68230: ST_TO_ADDR
// end ;
68231: GO 68196
68233: POP
68234: POP
// for i = 1 to hardcoreCounter do
68235: LD_ADDR_VAR 0 8
68239: PUSH
68240: DOUBLE
68241: LD_INT 1
68243: DEC
68244: ST_TO_ADDR
68245: LD_EXP 48
68249: PUSH
68250: FOR_TO
68251: IFFALSE 68297
// begin if flags [ normalCounter + i ] then
68253: LD_VAR 0 4
68257: PUSH
68258: LD_EXP 47
68262: PUSH
68263: LD_VAR 0 8
68267: PLUS
68268: ARRAY
68269: IFFALSE 68295
// tmp := tmp & ( 100 + i ) & ; ;
68271: LD_ADDR_VAR 0 3
68275: PUSH
68276: LD_VAR 0 3
68280: PUSH
68281: LD_INT 100
68283: PUSH
68284: LD_VAR 0 8
68288: PLUS
68289: STR
68290: PUSH
68291: LD_STRING ;
68293: STR
68294: ST_TO_ADDR
// end ;
68295: GO 68250
68297: POP
68298: POP
// if tmp then
68299: LD_VAR 0 3
68303: IFFALSE 68315
// active := tmp ;
68305: LD_ADDR_VAR 0 7
68309: PUSH
68310: LD_VAR 0 3
68314: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
68315: LD_STRING getStreamItemsFromMission("
68317: PUSH
68318: LD_VAR 0 5
68322: STR
68323: PUSH
68324: LD_STRING ","
68326: STR
68327: PUSH
68328: LD_VAR 0 6
68332: STR
68333: PUSH
68334: LD_STRING ","
68336: STR
68337: PUSH
68338: LD_VAR 0 7
68342: STR
68343: PUSH
68344: LD_STRING ")
68346: STR
68347: PPUSH
68348: CALL_OW 559
// end else
68352: GO 68361
// ToLua ( getStreamItemsFromMission("","","") ) ;
68354: LD_STRING getStreamItemsFromMission("","","")
68356: PPUSH
68357: CALL_OW 559
// end ;
68361: LD_VAR 0 2
68365: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
68366: LD_EXP 46
68370: PUSH
68371: LD_EXP 51
68375: AND
68376: IFFALSE 68500
68378: GO 68380
68380: DISABLE
68381: LD_INT 0
68383: PPUSH
68384: PPUSH
// begin enable ;
68385: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
68386: LD_ADDR_VAR 0 2
68390: PUSH
68391: LD_INT 22
68393: PUSH
68394: LD_OWVAR 2
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: LD_INT 34
68408: PUSH
68409: LD_INT 7
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 34
68418: PUSH
68419: LD_INT 45
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 34
68428: PUSH
68429: LD_INT 28
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 34
68438: PUSH
68439: LD_INT 47
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PPUSH
68457: CALL_OW 69
68461: ST_TO_ADDR
// if not tmp then
68462: LD_VAR 0 2
68466: NOT
68467: IFFALSE 68471
// exit ;
68469: GO 68500
// for i in tmp do
68471: LD_ADDR_VAR 0 1
68475: PUSH
68476: LD_VAR 0 2
68480: PUSH
68481: FOR_IN
68482: IFFALSE 68498
// begin SetLives ( i , 0 ) ;
68484: LD_VAR 0 1
68488: PPUSH
68489: LD_INT 0
68491: PPUSH
68492: CALL_OW 234
// end ;
68496: GO 68481
68498: POP
68499: POP
// end ;
68500: PPOPN 2
68502: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
68503: LD_EXP 46
68507: PUSH
68508: LD_EXP 52
68512: AND
68513: IFFALSE 68597
68515: GO 68517
68517: DISABLE
68518: LD_INT 0
68520: PPUSH
68521: PPUSH
// begin enable ;
68522: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
68523: LD_ADDR_VAR 0 2
68527: PUSH
68528: LD_INT 22
68530: PUSH
68531: LD_OWVAR 2
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 32
68542: PUSH
68543: LD_INT 3
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PPUSH
68554: CALL_OW 69
68558: ST_TO_ADDR
// if not tmp then
68559: LD_VAR 0 2
68563: NOT
68564: IFFALSE 68568
// exit ;
68566: GO 68597
// for i in tmp do
68568: LD_ADDR_VAR 0 1
68572: PUSH
68573: LD_VAR 0 2
68577: PUSH
68578: FOR_IN
68579: IFFALSE 68595
// begin SetLives ( i , 0 ) ;
68581: LD_VAR 0 1
68585: PPUSH
68586: LD_INT 0
68588: PPUSH
68589: CALL_OW 234
// end ;
68593: GO 68578
68595: POP
68596: POP
// end ;
68597: PPOPN 2
68599: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
68600: LD_EXP 46
68604: PUSH
68605: LD_EXP 49
68609: AND
68610: IFFALSE 68703
68612: GO 68614
68614: DISABLE
68615: LD_INT 0
68617: PPUSH
// begin enable ;
68618: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
68619: LD_ADDR_VAR 0 1
68623: PUSH
68624: LD_INT 22
68626: PUSH
68627: LD_OWVAR 2
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: LD_INT 25
68641: PUSH
68642: LD_INT 5
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 25
68651: PUSH
68652: LD_INT 9
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 25
68661: PUSH
68662: LD_INT 8
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: PUSH
68675: EMPTY
68676: LIST
68677: LIST
68678: PPUSH
68679: CALL_OW 69
68683: PUSH
68684: FOR_IN
68685: IFFALSE 68701
// begin SetClass ( i , 1 ) ;
68687: LD_VAR 0 1
68691: PPUSH
68692: LD_INT 1
68694: PPUSH
68695: CALL_OW 336
// end ;
68699: GO 68684
68701: POP
68702: POP
// end ;
68703: PPOPN 1
68705: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
68706: LD_EXP 46
68710: PUSH
68711: LD_EXP 50
68715: AND
68716: PUSH
68717: LD_OWVAR 65
68721: PUSH
68722: LD_INT 7
68724: LESS
68725: AND
68726: IFFALSE 68740
68728: GO 68730
68730: DISABLE
// begin enable ;
68731: ENABLE
// game_speed := 7 ;
68732: LD_ADDR_OWVAR 65
68736: PUSH
68737: LD_INT 7
68739: ST_TO_ADDR
// end ;
68740: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
68741: LD_EXP 46
68745: PUSH
68746: LD_EXP 53
68750: AND
68751: IFFALSE 68953
68753: GO 68755
68755: DISABLE
68756: LD_INT 0
68758: PPUSH
68759: PPUSH
68760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68761: LD_ADDR_VAR 0 3
68765: PUSH
68766: LD_INT 81
68768: PUSH
68769: LD_OWVAR 2
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 21
68780: PUSH
68781: LD_INT 1
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PPUSH
68792: CALL_OW 69
68796: ST_TO_ADDR
// if not tmp then
68797: LD_VAR 0 3
68801: NOT
68802: IFFALSE 68806
// exit ;
68804: GO 68953
// if tmp > 5 then
68806: LD_VAR 0 3
68810: PUSH
68811: LD_INT 5
68813: GREATER
68814: IFFALSE 68826
// k := 5 else
68816: LD_ADDR_VAR 0 2
68820: PUSH
68821: LD_INT 5
68823: ST_TO_ADDR
68824: GO 68836
// k := tmp ;
68826: LD_ADDR_VAR 0 2
68830: PUSH
68831: LD_VAR 0 3
68835: ST_TO_ADDR
// for i := 1 to k do
68836: LD_ADDR_VAR 0 1
68840: PUSH
68841: DOUBLE
68842: LD_INT 1
68844: DEC
68845: ST_TO_ADDR
68846: LD_VAR 0 2
68850: PUSH
68851: FOR_TO
68852: IFFALSE 68951
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
68854: LD_VAR 0 3
68858: PUSH
68859: LD_VAR 0 1
68863: ARRAY
68864: PPUSH
68865: LD_VAR 0 1
68869: PUSH
68870: LD_INT 4
68872: MOD
68873: PUSH
68874: LD_INT 1
68876: PLUS
68877: PPUSH
68878: CALL_OW 259
68882: PUSH
68883: LD_INT 10
68885: LESS
68886: IFFALSE 68949
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
68888: LD_VAR 0 3
68892: PUSH
68893: LD_VAR 0 1
68897: ARRAY
68898: PPUSH
68899: LD_VAR 0 1
68903: PUSH
68904: LD_INT 4
68906: MOD
68907: PUSH
68908: LD_INT 1
68910: PLUS
68911: PPUSH
68912: LD_VAR 0 3
68916: PUSH
68917: LD_VAR 0 1
68921: ARRAY
68922: PPUSH
68923: LD_VAR 0 1
68927: PUSH
68928: LD_INT 4
68930: MOD
68931: PUSH
68932: LD_INT 1
68934: PLUS
68935: PPUSH
68936: CALL_OW 259
68940: PUSH
68941: LD_INT 1
68943: PLUS
68944: PPUSH
68945: CALL_OW 237
68949: GO 68851
68951: POP
68952: POP
// end ;
68953: PPOPN 3
68955: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
68956: LD_EXP 46
68960: PUSH
68961: LD_EXP 54
68965: AND
68966: IFFALSE 68986
68968: GO 68970
68970: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
68971: LD_INT 4
68973: PPUSH
68974: LD_OWVAR 2
68978: PPUSH
68979: LD_INT 0
68981: PPUSH
68982: CALL_OW 324
68986: END
// every 0 0$1 trigger StreamModeActive and sShovel do
68987: LD_EXP 46
68991: PUSH
68992: LD_EXP 83
68996: AND
68997: IFFALSE 69017
68999: GO 69001
69001: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
69002: LD_INT 19
69004: PPUSH
69005: LD_OWVAR 2
69009: PPUSH
69010: LD_INT 0
69012: PPUSH
69013: CALL_OW 324
69017: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
69018: LD_EXP 46
69022: PUSH
69023: LD_EXP 55
69027: AND
69028: IFFALSE 69130
69030: GO 69032
69032: DISABLE
69033: LD_INT 0
69035: PPUSH
69036: PPUSH
// begin enable ;
69037: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
69038: LD_ADDR_VAR 0 2
69042: PUSH
69043: LD_INT 22
69045: PUSH
69046: LD_OWVAR 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: LD_INT 34
69060: PUSH
69061: LD_INT 11
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 34
69070: PUSH
69071: LD_INT 30
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: LIST
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PPUSH
69087: CALL_OW 69
69091: ST_TO_ADDR
// if not tmp then
69092: LD_VAR 0 2
69096: NOT
69097: IFFALSE 69101
// exit ;
69099: GO 69130
// for i in tmp do
69101: LD_ADDR_VAR 0 1
69105: PUSH
69106: LD_VAR 0 2
69110: PUSH
69111: FOR_IN
69112: IFFALSE 69128
// begin SetLives ( i , 0 ) ;
69114: LD_VAR 0 1
69118: PPUSH
69119: LD_INT 0
69121: PPUSH
69122: CALL_OW 234
// end ;
69126: GO 69111
69128: POP
69129: POP
// end ;
69130: PPOPN 2
69132: END
// every 0 0$1 trigger StreamModeActive and sBunker do
69133: LD_EXP 46
69137: PUSH
69138: LD_EXP 56
69142: AND
69143: IFFALSE 69163
69145: GO 69147
69147: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
69148: LD_INT 32
69150: PPUSH
69151: LD_OWVAR 2
69155: PPUSH
69156: LD_INT 0
69158: PPUSH
69159: CALL_OW 324
69163: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
69164: LD_EXP 46
69168: PUSH
69169: LD_EXP 57
69173: AND
69174: IFFALSE 69355
69176: GO 69178
69178: DISABLE
69179: LD_INT 0
69181: PPUSH
69182: PPUSH
69183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
69184: LD_ADDR_VAR 0 2
69188: PUSH
69189: LD_INT 22
69191: PUSH
69192: LD_OWVAR 2
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 33
69203: PUSH
69204: LD_INT 3
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PPUSH
69215: CALL_OW 69
69219: ST_TO_ADDR
// if not tmp then
69220: LD_VAR 0 2
69224: NOT
69225: IFFALSE 69229
// exit ;
69227: GO 69355
// side := 0 ;
69229: LD_ADDR_VAR 0 3
69233: PUSH
69234: LD_INT 0
69236: ST_TO_ADDR
// for i := 1 to 8 do
69237: LD_ADDR_VAR 0 1
69241: PUSH
69242: DOUBLE
69243: LD_INT 1
69245: DEC
69246: ST_TO_ADDR
69247: LD_INT 8
69249: PUSH
69250: FOR_TO
69251: IFFALSE 69299
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
69253: LD_OWVAR 2
69257: PUSH
69258: LD_VAR 0 1
69262: NONEQUAL
69263: PUSH
69264: LD_OWVAR 2
69268: PPUSH
69269: LD_VAR 0 1
69273: PPUSH
69274: CALL_OW 81
69278: PUSH
69279: LD_INT 2
69281: EQUAL
69282: AND
69283: IFFALSE 69297
// begin side := i ;
69285: LD_ADDR_VAR 0 3
69289: PUSH
69290: LD_VAR 0 1
69294: ST_TO_ADDR
// break ;
69295: GO 69299
// end ;
69297: GO 69250
69299: POP
69300: POP
// if not side then
69301: LD_VAR 0 3
69305: NOT
69306: IFFALSE 69310
// exit ;
69308: GO 69355
// for i := 1 to tmp do
69310: LD_ADDR_VAR 0 1
69314: PUSH
69315: DOUBLE
69316: LD_INT 1
69318: DEC
69319: ST_TO_ADDR
69320: LD_VAR 0 2
69324: PUSH
69325: FOR_TO
69326: IFFALSE 69353
// if Prob ( 60 ) then
69328: LD_INT 60
69330: PPUSH
69331: CALL_OW 13
69335: IFFALSE 69351
// SetSide ( i , side ) ;
69337: LD_VAR 0 1
69341: PPUSH
69342: LD_VAR 0 3
69346: PPUSH
69347: CALL_OW 235
69351: GO 69325
69353: POP
69354: POP
// end ;
69355: PPOPN 3
69357: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
69358: LD_EXP 46
69362: PUSH
69363: LD_EXP 59
69367: AND
69368: IFFALSE 69487
69370: GO 69372
69372: DISABLE
69373: LD_INT 0
69375: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
69376: LD_ADDR_VAR 0 1
69380: PUSH
69381: LD_INT 22
69383: PUSH
69384: LD_OWVAR 2
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 21
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 3
69405: PUSH
69406: LD_INT 23
69408: PUSH
69409: LD_INT 0
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: LIST
69424: PPUSH
69425: CALL_OW 69
69429: PUSH
69430: FOR_IN
69431: IFFALSE 69485
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
69433: LD_VAR 0 1
69437: PPUSH
69438: CALL_OW 257
69442: PUSH
69443: LD_INT 1
69445: PUSH
69446: LD_INT 2
69448: PUSH
69449: LD_INT 3
69451: PUSH
69452: LD_INT 4
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: IN
69461: IFFALSE 69483
// SetClass ( un , rand ( 1 , 4 ) ) ;
69463: LD_VAR 0 1
69467: PPUSH
69468: LD_INT 1
69470: PPUSH
69471: LD_INT 4
69473: PPUSH
69474: CALL_OW 12
69478: PPUSH
69479: CALL_OW 336
69483: GO 69430
69485: POP
69486: POP
// end ;
69487: PPOPN 1
69489: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
69490: LD_EXP 46
69494: PUSH
69495: LD_EXP 58
69499: AND
69500: IFFALSE 69579
69502: GO 69504
69504: DISABLE
69505: LD_INT 0
69507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69508: LD_ADDR_VAR 0 1
69512: PUSH
69513: LD_INT 22
69515: PUSH
69516: LD_OWVAR 2
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 21
69527: PUSH
69528: LD_INT 3
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PPUSH
69539: CALL_OW 69
69543: ST_TO_ADDR
// if not tmp then
69544: LD_VAR 0 1
69548: NOT
69549: IFFALSE 69553
// exit ;
69551: GO 69579
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
69553: LD_VAR 0 1
69557: PUSH
69558: LD_INT 1
69560: PPUSH
69561: LD_VAR 0 1
69565: PPUSH
69566: CALL_OW 12
69570: ARRAY
69571: PPUSH
69572: LD_INT 100
69574: PPUSH
69575: CALL_OW 234
// end ;
69579: PPOPN 1
69581: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
69582: LD_EXP 46
69586: PUSH
69587: LD_EXP 60
69591: AND
69592: IFFALSE 69690
69594: GO 69596
69596: DISABLE
69597: LD_INT 0
69599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69600: LD_ADDR_VAR 0 1
69604: PUSH
69605: LD_INT 22
69607: PUSH
69608: LD_OWVAR 2
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 21
69619: PUSH
69620: LD_INT 1
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PPUSH
69631: CALL_OW 69
69635: ST_TO_ADDR
// if not tmp then
69636: LD_VAR 0 1
69640: NOT
69641: IFFALSE 69645
// exit ;
69643: GO 69690
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
69645: LD_VAR 0 1
69649: PUSH
69650: LD_INT 1
69652: PPUSH
69653: LD_VAR 0 1
69657: PPUSH
69658: CALL_OW 12
69662: ARRAY
69663: PPUSH
69664: LD_INT 1
69666: PPUSH
69667: LD_INT 4
69669: PPUSH
69670: CALL_OW 12
69674: PPUSH
69675: LD_INT 3000
69677: PPUSH
69678: LD_INT 9000
69680: PPUSH
69681: CALL_OW 12
69685: PPUSH
69686: CALL_OW 492
// end ;
69690: PPOPN 1
69692: END
// every 0 0$1 trigger StreamModeActive and sDepot do
69693: LD_EXP 46
69697: PUSH
69698: LD_EXP 61
69702: AND
69703: IFFALSE 69723
69705: GO 69707
69707: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
69708: LD_INT 1
69710: PPUSH
69711: LD_OWVAR 2
69715: PPUSH
69716: LD_INT 0
69718: PPUSH
69719: CALL_OW 324
69723: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
69724: LD_EXP 46
69728: PUSH
69729: LD_EXP 62
69733: AND
69734: IFFALSE 69817
69736: GO 69738
69738: DISABLE
69739: LD_INT 0
69741: PPUSH
69742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
69743: LD_ADDR_VAR 0 2
69747: PUSH
69748: LD_INT 22
69750: PUSH
69751: LD_OWVAR 2
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 21
69762: PUSH
69763: LD_INT 3
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PPUSH
69774: CALL_OW 69
69778: ST_TO_ADDR
// if not tmp then
69779: LD_VAR 0 2
69783: NOT
69784: IFFALSE 69788
// exit ;
69786: GO 69817
// for i in tmp do
69788: LD_ADDR_VAR 0 1
69792: PUSH
69793: LD_VAR 0 2
69797: PUSH
69798: FOR_IN
69799: IFFALSE 69815
// SetBLevel ( i , 10 ) ;
69801: LD_VAR 0 1
69805: PPUSH
69806: LD_INT 10
69808: PPUSH
69809: CALL_OW 241
69813: GO 69798
69815: POP
69816: POP
// end ;
69817: PPOPN 2
69819: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
69820: LD_EXP 46
69824: PUSH
69825: LD_EXP 63
69829: AND
69830: IFFALSE 69941
69832: GO 69834
69834: DISABLE
69835: LD_INT 0
69837: PPUSH
69838: PPUSH
69839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69840: LD_ADDR_VAR 0 3
69844: PUSH
69845: LD_INT 22
69847: PUSH
69848: LD_OWVAR 2
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 25
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PPUSH
69871: CALL_OW 69
69875: ST_TO_ADDR
// if not tmp then
69876: LD_VAR 0 3
69880: NOT
69881: IFFALSE 69885
// exit ;
69883: GO 69941
// un := tmp [ rand ( 1 , tmp ) ] ;
69885: LD_ADDR_VAR 0 2
69889: PUSH
69890: LD_VAR 0 3
69894: PUSH
69895: LD_INT 1
69897: PPUSH
69898: LD_VAR 0 3
69902: PPUSH
69903: CALL_OW 12
69907: ARRAY
69908: ST_TO_ADDR
// if Crawls ( un ) then
69909: LD_VAR 0 2
69913: PPUSH
69914: CALL_OW 318
69918: IFFALSE 69929
// ComWalk ( un ) ;
69920: LD_VAR 0 2
69924: PPUSH
69925: CALL_OW 138
// SetClass ( un , class_sniper ) ;
69929: LD_VAR 0 2
69933: PPUSH
69934: LD_INT 5
69936: PPUSH
69937: CALL_OW 336
// end ;
69941: PPOPN 3
69943: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
69944: LD_EXP 46
69948: PUSH
69949: LD_EXP 64
69953: AND
69954: PUSH
69955: LD_OWVAR 67
69959: PUSH
69960: LD_INT 4
69962: LESS
69963: AND
69964: IFFALSE 69983
69966: GO 69968
69968: DISABLE
// begin Difficulty := Difficulty + 1 ;
69969: LD_ADDR_OWVAR 67
69973: PUSH
69974: LD_OWVAR 67
69978: PUSH
69979: LD_INT 1
69981: PLUS
69982: ST_TO_ADDR
// end ;
69983: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
69984: LD_EXP 46
69988: PUSH
69989: LD_EXP 65
69993: AND
69994: IFFALSE 70097
69996: GO 69998
69998: DISABLE
69999: LD_INT 0
70001: PPUSH
// begin for i := 1 to 5 do
70002: LD_ADDR_VAR 0 1
70006: PUSH
70007: DOUBLE
70008: LD_INT 1
70010: DEC
70011: ST_TO_ADDR
70012: LD_INT 5
70014: PUSH
70015: FOR_TO
70016: IFFALSE 70095
// begin uc_nation := nation_nature ;
70018: LD_ADDR_OWVAR 21
70022: PUSH
70023: LD_INT 0
70025: ST_TO_ADDR
// uc_side := 0 ;
70026: LD_ADDR_OWVAR 20
70030: PUSH
70031: LD_INT 0
70033: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70034: LD_ADDR_OWVAR 29
70038: PUSH
70039: LD_INT 12
70041: PUSH
70042: LD_INT 12
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: ST_TO_ADDR
// hc_agressivity := 20 ;
70049: LD_ADDR_OWVAR 35
70053: PUSH
70054: LD_INT 20
70056: ST_TO_ADDR
// hc_class := class_tiger ;
70057: LD_ADDR_OWVAR 28
70061: PUSH
70062: LD_INT 14
70064: ST_TO_ADDR
// hc_gallery :=  ;
70065: LD_ADDR_OWVAR 33
70069: PUSH
70070: LD_STRING 
70072: ST_TO_ADDR
// hc_name :=  ;
70073: LD_ADDR_OWVAR 26
70077: PUSH
70078: LD_STRING 
70080: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
70081: CALL_OW 44
70085: PPUSH
70086: LD_INT 0
70088: PPUSH
70089: CALL_OW 51
// end ;
70093: GO 70015
70095: POP
70096: POP
// end ;
70097: PPOPN 1
70099: END
// every 0 0$1 trigger StreamModeActive and sBomb do
70100: LD_EXP 46
70104: PUSH
70105: LD_EXP 66
70109: AND
70110: IFFALSE 70119
70112: GO 70114
70114: DISABLE
// StreamSibBomb ;
70115: CALL 70120 0 0
70119: END
// export function StreamSibBomb ; var i , x , y ; begin
70120: LD_INT 0
70122: PPUSH
70123: PPUSH
70124: PPUSH
70125: PPUSH
// result := false ;
70126: LD_ADDR_VAR 0 1
70130: PUSH
70131: LD_INT 0
70133: ST_TO_ADDR
// for i := 1 to 16 do
70134: LD_ADDR_VAR 0 2
70138: PUSH
70139: DOUBLE
70140: LD_INT 1
70142: DEC
70143: ST_TO_ADDR
70144: LD_INT 16
70146: PUSH
70147: FOR_TO
70148: IFFALSE 70347
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70150: LD_ADDR_VAR 0 3
70154: PUSH
70155: LD_INT 10
70157: PUSH
70158: LD_INT 20
70160: PUSH
70161: LD_INT 30
70163: PUSH
70164: LD_INT 40
70166: PUSH
70167: LD_INT 50
70169: PUSH
70170: LD_INT 60
70172: PUSH
70173: LD_INT 70
70175: PUSH
70176: LD_INT 80
70178: PUSH
70179: LD_INT 90
70181: PUSH
70182: LD_INT 100
70184: PUSH
70185: LD_INT 110
70187: PUSH
70188: LD_INT 120
70190: PUSH
70191: LD_INT 130
70193: PUSH
70194: LD_INT 140
70196: PUSH
70197: LD_INT 150
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 1
70219: PPUSH
70220: LD_INT 15
70222: PPUSH
70223: CALL_OW 12
70227: ARRAY
70228: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
70229: LD_ADDR_VAR 0 4
70233: PUSH
70234: LD_INT 10
70236: PUSH
70237: LD_INT 20
70239: PUSH
70240: LD_INT 30
70242: PUSH
70243: LD_INT 40
70245: PUSH
70246: LD_INT 50
70248: PUSH
70249: LD_INT 60
70251: PUSH
70252: LD_INT 70
70254: PUSH
70255: LD_INT 80
70257: PUSH
70258: LD_INT 90
70260: PUSH
70261: LD_INT 100
70263: PUSH
70264: LD_INT 110
70266: PUSH
70267: LD_INT 120
70269: PUSH
70270: LD_INT 130
70272: PUSH
70273: LD_INT 140
70275: PUSH
70276: LD_INT 150
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 1
70298: PPUSH
70299: LD_INT 15
70301: PPUSH
70302: CALL_OW 12
70306: ARRAY
70307: ST_TO_ADDR
// if ValidHex ( x , y ) then
70308: LD_VAR 0 3
70312: PPUSH
70313: LD_VAR 0 4
70317: PPUSH
70318: CALL_OW 488
70322: IFFALSE 70345
// begin result := [ x , y ] ;
70324: LD_ADDR_VAR 0 1
70328: PUSH
70329: LD_VAR 0 3
70333: PUSH
70334: LD_VAR 0 4
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: ST_TO_ADDR
// break ;
70343: GO 70347
// end ; end ;
70345: GO 70147
70347: POP
70348: POP
// if result then
70349: LD_VAR 0 1
70353: IFFALSE 70413
// begin ToLua ( playSibBomb() ) ;
70355: LD_STRING playSibBomb()
70357: PPUSH
70358: CALL_OW 559
// wait ( 0 0$14 ) ;
70362: LD_INT 490
70364: PPUSH
70365: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
70369: LD_VAR 0 1
70373: PUSH
70374: LD_INT 1
70376: ARRAY
70377: PPUSH
70378: LD_VAR 0 1
70382: PUSH
70383: LD_INT 2
70385: ARRAY
70386: PPUSH
70387: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
70391: LD_VAR 0 1
70395: PUSH
70396: LD_INT 1
70398: ARRAY
70399: PPUSH
70400: LD_VAR 0 1
70404: PUSH
70405: LD_INT 2
70407: ARRAY
70408: PPUSH
70409: CALL_OW 429
// end ; end ;
70413: LD_VAR 0 1
70417: RET
// every 0 0$1 trigger StreamModeActive and sReset do
70418: LD_EXP 46
70422: PUSH
70423: LD_EXP 68
70427: AND
70428: IFFALSE 70440
70430: GO 70432
70432: DISABLE
// YouLost (  ) ;
70433: LD_STRING 
70435: PPUSH
70436: CALL_OW 104
70440: END
// every 0 0$1 trigger StreamModeActive and sFog do
70441: LD_EXP 46
70445: PUSH
70446: LD_EXP 67
70450: AND
70451: IFFALSE 70465
70453: GO 70455
70455: DISABLE
// FogOff ( your_side ) ;
70456: LD_OWVAR 2
70460: PPUSH
70461: CALL_OW 344
70465: END
// every 0 0$1 trigger StreamModeActive and sSun do
70466: LD_EXP 46
70470: PUSH
70471: LD_EXP 69
70475: AND
70476: IFFALSE 70504
70478: GO 70480
70480: DISABLE
// begin solar_recharge_percent := 0 ;
70481: LD_ADDR_OWVAR 79
70485: PUSH
70486: LD_INT 0
70488: ST_TO_ADDR
// wait ( 5 5$00 ) ;
70489: LD_INT 10500
70491: PPUSH
70492: CALL_OW 67
// solar_recharge_percent := 100 ;
70496: LD_ADDR_OWVAR 79
70500: PUSH
70501: LD_INT 100
70503: ST_TO_ADDR
// end ;
70504: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
70505: LD_EXP 46
70509: PUSH
70510: LD_EXP 70
70514: AND
70515: IFFALSE 70754
70517: GO 70519
70519: DISABLE
70520: LD_INT 0
70522: PPUSH
70523: PPUSH
70524: PPUSH
// begin tmp := [ ] ;
70525: LD_ADDR_VAR 0 3
70529: PUSH
70530: EMPTY
70531: ST_TO_ADDR
// for i := 1 to 6 do
70532: LD_ADDR_VAR 0 1
70536: PUSH
70537: DOUBLE
70538: LD_INT 1
70540: DEC
70541: ST_TO_ADDR
70542: LD_INT 6
70544: PUSH
70545: FOR_TO
70546: IFFALSE 70651
// begin uc_nation := nation_nature ;
70548: LD_ADDR_OWVAR 21
70552: PUSH
70553: LD_INT 0
70555: ST_TO_ADDR
// uc_side := 0 ;
70556: LD_ADDR_OWVAR 20
70560: PUSH
70561: LD_INT 0
70563: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
70564: LD_ADDR_OWVAR 29
70568: PUSH
70569: LD_INT 12
70571: PUSH
70572: LD_INT 12
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: ST_TO_ADDR
// hc_agressivity := 20 ;
70579: LD_ADDR_OWVAR 35
70583: PUSH
70584: LD_INT 20
70586: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
70587: LD_ADDR_OWVAR 28
70591: PUSH
70592: LD_INT 17
70594: ST_TO_ADDR
// hc_gallery :=  ;
70595: LD_ADDR_OWVAR 33
70599: PUSH
70600: LD_STRING 
70602: ST_TO_ADDR
// hc_name :=  ;
70603: LD_ADDR_OWVAR 26
70607: PUSH
70608: LD_STRING 
70610: ST_TO_ADDR
// un := CreateHuman ;
70611: LD_ADDR_VAR 0 2
70615: PUSH
70616: CALL_OW 44
70620: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
70621: LD_VAR 0 2
70625: PPUSH
70626: LD_INT 1
70628: PPUSH
70629: CALL_OW 51
// tmp := tmp ^ un ;
70633: LD_ADDR_VAR 0 3
70637: PUSH
70638: LD_VAR 0 3
70642: PUSH
70643: LD_VAR 0 2
70647: ADD
70648: ST_TO_ADDR
// end ;
70649: GO 70545
70651: POP
70652: POP
// repeat wait ( 0 0$1 ) ;
70653: LD_INT 35
70655: PPUSH
70656: CALL_OW 67
// for un in tmp do
70660: LD_ADDR_VAR 0 2
70664: PUSH
70665: LD_VAR 0 3
70669: PUSH
70670: FOR_IN
70671: IFFALSE 70745
// begin if IsDead ( un ) then
70673: LD_VAR 0 2
70677: PPUSH
70678: CALL_OW 301
70682: IFFALSE 70702
// begin tmp := tmp diff un ;
70684: LD_ADDR_VAR 0 3
70688: PUSH
70689: LD_VAR 0 3
70693: PUSH
70694: LD_VAR 0 2
70698: DIFF
70699: ST_TO_ADDR
// continue ;
70700: GO 70670
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
70702: LD_VAR 0 2
70706: PPUSH
70707: LD_INT 3
70709: PUSH
70710: LD_INT 22
70712: PUSH
70713: LD_INT 0
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PPUSH
70724: CALL_OW 69
70728: PPUSH
70729: LD_VAR 0 2
70733: PPUSH
70734: CALL_OW 74
70738: PPUSH
70739: CALL_OW 115
// end ;
70743: GO 70670
70745: POP
70746: POP
// until not tmp ;
70747: LD_VAR 0 3
70751: NOT
70752: IFFALSE 70653
// end ;
70754: PPOPN 3
70756: END
// every 0 0$1 trigger StreamModeActive and sTroll do
70757: LD_EXP 46
70761: PUSH
70762: LD_EXP 71
70766: AND
70767: IFFALSE 70821
70769: GO 70771
70771: DISABLE
// begin ToLua ( displayTroll(); ) ;
70772: LD_STRING displayTroll();
70774: PPUSH
70775: CALL_OW 559
// wait ( 3 3$00 ) ;
70779: LD_INT 6300
70781: PPUSH
70782: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70786: LD_STRING hideTroll();
70788: PPUSH
70789: CALL_OW 559
// wait ( 1 1$00 ) ;
70793: LD_INT 2100
70795: PPUSH
70796: CALL_OW 67
// ToLua ( displayTroll(); ) ;
70800: LD_STRING displayTroll();
70802: PPUSH
70803: CALL_OW 559
// wait ( 1 1$00 ) ;
70807: LD_INT 2100
70809: PPUSH
70810: CALL_OW 67
// ToLua ( hideTroll(); ) ;
70814: LD_STRING hideTroll();
70816: PPUSH
70817: CALL_OW 559
// end ;
70821: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
70822: LD_EXP 46
70826: PUSH
70827: LD_EXP 72
70831: AND
70832: IFFALSE 70895
70834: GO 70836
70836: DISABLE
70837: LD_INT 0
70839: PPUSH
// begin p := 0 ;
70840: LD_ADDR_VAR 0 1
70844: PUSH
70845: LD_INT 0
70847: ST_TO_ADDR
// repeat game_speed := 1 ;
70848: LD_ADDR_OWVAR 65
70852: PUSH
70853: LD_INT 1
70855: ST_TO_ADDR
// wait ( 0 0$1 ) ;
70856: LD_INT 35
70858: PPUSH
70859: CALL_OW 67
// p := p + 1 ;
70863: LD_ADDR_VAR 0 1
70867: PUSH
70868: LD_VAR 0 1
70872: PUSH
70873: LD_INT 1
70875: PLUS
70876: ST_TO_ADDR
// until p >= 60 ;
70877: LD_VAR 0 1
70881: PUSH
70882: LD_INT 60
70884: GREATEREQUAL
70885: IFFALSE 70848
// game_speed := 4 ;
70887: LD_ADDR_OWVAR 65
70891: PUSH
70892: LD_INT 4
70894: ST_TO_ADDR
// end ;
70895: PPOPN 1
70897: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
70898: LD_EXP 46
70902: PUSH
70903: LD_EXP 73
70907: AND
70908: IFFALSE 71054
70910: GO 70912
70912: DISABLE
70913: LD_INT 0
70915: PPUSH
70916: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70917: LD_ADDR_VAR 0 1
70921: PUSH
70922: LD_INT 22
70924: PUSH
70925: LD_OWVAR 2
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 2
70936: PUSH
70937: LD_INT 30
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 30
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: LIST
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PPUSH
70966: CALL_OW 69
70970: ST_TO_ADDR
// if not depot then
70971: LD_VAR 0 1
70975: NOT
70976: IFFALSE 70980
// exit ;
70978: GO 71054
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
70980: LD_ADDR_VAR 0 2
70984: PUSH
70985: LD_VAR 0 1
70989: PUSH
70990: LD_INT 1
70992: PPUSH
70993: LD_VAR 0 1
70997: PPUSH
70998: CALL_OW 12
71002: ARRAY
71003: PPUSH
71004: CALL_OW 274
71008: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
71009: LD_VAR 0 2
71013: PPUSH
71014: LD_INT 1
71016: PPUSH
71017: LD_INT 0
71019: PPUSH
71020: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
71024: LD_VAR 0 2
71028: PPUSH
71029: LD_INT 2
71031: PPUSH
71032: LD_INT 0
71034: PPUSH
71035: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
71039: LD_VAR 0 2
71043: PPUSH
71044: LD_INT 3
71046: PPUSH
71047: LD_INT 0
71049: PPUSH
71050: CALL_OW 277
// end ;
71054: PPOPN 2
71056: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
71057: LD_EXP 46
71061: PUSH
71062: LD_EXP 74
71066: AND
71067: IFFALSE 71164
71069: GO 71071
71071: DISABLE
71072: LD_INT 0
71074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71075: LD_ADDR_VAR 0 1
71079: PUSH
71080: LD_INT 22
71082: PUSH
71083: LD_OWVAR 2
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 21
71094: PUSH
71095: LD_INT 1
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 3
71104: PUSH
71105: LD_INT 23
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: LIST
71123: PPUSH
71124: CALL_OW 69
71128: ST_TO_ADDR
// if not tmp then
71129: LD_VAR 0 1
71133: NOT
71134: IFFALSE 71138
// exit ;
71136: GO 71164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
71138: LD_VAR 0 1
71142: PUSH
71143: LD_INT 1
71145: PPUSH
71146: LD_VAR 0 1
71150: PPUSH
71151: CALL_OW 12
71155: ARRAY
71156: PPUSH
71157: LD_INT 200
71159: PPUSH
71160: CALL_OW 234
// end ;
71164: PPOPN 1
71166: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
71167: LD_EXP 46
71171: PUSH
71172: LD_EXP 75
71176: AND
71177: IFFALSE 71256
71179: GO 71181
71181: DISABLE
71182: LD_INT 0
71184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
71185: LD_ADDR_VAR 0 1
71189: PUSH
71190: LD_INT 22
71192: PUSH
71193: LD_OWVAR 2
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 21
71204: PUSH
71205: LD_INT 2
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PPUSH
71216: CALL_OW 69
71220: ST_TO_ADDR
// if not tmp then
71221: LD_VAR 0 1
71225: NOT
71226: IFFALSE 71230
// exit ;
71228: GO 71256
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
71230: LD_VAR 0 1
71234: PUSH
71235: LD_INT 1
71237: PPUSH
71238: LD_VAR 0 1
71242: PPUSH
71243: CALL_OW 12
71247: ARRAY
71248: PPUSH
71249: LD_INT 60
71251: PPUSH
71252: CALL_OW 234
// end ;
71256: PPOPN 1
71258: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
71259: LD_EXP 46
71263: PUSH
71264: LD_EXP 76
71268: AND
71269: IFFALSE 71368
71271: GO 71273
71273: DISABLE
71274: LD_INT 0
71276: PPUSH
71277: PPUSH
// begin enable ;
71278: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
71279: LD_ADDR_VAR 0 1
71283: PUSH
71284: LD_INT 22
71286: PUSH
71287: LD_OWVAR 2
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 61
71298: PUSH
71299: EMPTY
71300: LIST
71301: PUSH
71302: LD_INT 33
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: LIST
71316: PPUSH
71317: CALL_OW 69
71321: ST_TO_ADDR
// if not tmp then
71322: LD_VAR 0 1
71326: NOT
71327: IFFALSE 71331
// exit ;
71329: GO 71368
// for i in tmp do
71331: LD_ADDR_VAR 0 2
71335: PUSH
71336: LD_VAR 0 1
71340: PUSH
71341: FOR_IN
71342: IFFALSE 71366
// if IsControledBy ( i ) then
71344: LD_VAR 0 2
71348: PPUSH
71349: CALL_OW 312
71353: IFFALSE 71364
// ComUnlink ( i ) ;
71355: LD_VAR 0 2
71359: PPUSH
71360: CALL_OW 136
71364: GO 71341
71366: POP
71367: POP
// end ;
71368: PPOPN 2
71370: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
71371: LD_EXP 46
71375: PUSH
71376: LD_EXP 77
71380: AND
71381: IFFALSE 71521
71383: GO 71385
71385: DISABLE
71386: LD_INT 0
71388: PPUSH
71389: PPUSH
// begin ToLua ( displayPowell(); ) ;
71390: LD_STRING displayPowell();
71392: PPUSH
71393: CALL_OW 559
// uc_side := 0 ;
71397: LD_ADDR_OWVAR 20
71401: PUSH
71402: LD_INT 0
71404: ST_TO_ADDR
// uc_nation := 2 ;
71405: LD_ADDR_OWVAR 21
71409: PUSH
71410: LD_INT 2
71412: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
71413: LD_ADDR_OWVAR 37
71417: PUSH
71418: LD_INT 14
71420: ST_TO_ADDR
// vc_engine := engine_siberite ;
71421: LD_ADDR_OWVAR 39
71425: PUSH
71426: LD_INT 3
71428: ST_TO_ADDR
// vc_control := control_apeman ;
71429: LD_ADDR_OWVAR 38
71433: PUSH
71434: LD_INT 5
71436: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
71437: LD_ADDR_OWVAR 40
71441: PUSH
71442: LD_INT 29
71444: ST_TO_ADDR
// un := CreateVehicle ;
71445: LD_ADDR_VAR 0 2
71449: PUSH
71450: CALL_OW 45
71454: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71455: LD_VAR 0 2
71459: PPUSH
71460: LD_INT 1
71462: PPUSH
71463: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71467: LD_INT 35
71469: PPUSH
71470: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71474: LD_VAR 0 2
71478: PPUSH
71479: LD_INT 22
71481: PUSH
71482: LD_OWVAR 2
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PPUSH
71491: CALL_OW 69
71495: PPUSH
71496: LD_VAR 0 2
71500: PPUSH
71501: CALL_OW 74
71505: PPUSH
71506: CALL_OW 115
// until IsDead ( un ) ;
71510: LD_VAR 0 2
71514: PPUSH
71515: CALL_OW 301
71519: IFFALSE 71467
// end ;
71521: PPOPN 2
71523: END
// every 0 0$1 trigger StreamModeActive and sStu do
71524: LD_EXP 46
71528: PUSH
71529: LD_EXP 85
71533: AND
71534: IFFALSE 71550
71536: GO 71538
71538: DISABLE
// begin ToLua ( displayStucuk(); ) ;
71539: LD_STRING displayStucuk();
71541: PPUSH
71542: CALL_OW 559
// ResetFog ;
71546: CALL_OW 335
// end ;
71550: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
71551: LD_EXP 46
71555: PUSH
71556: LD_EXP 78
71560: AND
71561: IFFALSE 71702
71563: GO 71565
71565: DISABLE
71566: LD_INT 0
71568: PPUSH
71569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71570: LD_ADDR_VAR 0 2
71574: PUSH
71575: LD_INT 22
71577: PUSH
71578: LD_OWVAR 2
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 21
71589: PUSH
71590: LD_INT 1
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PPUSH
71601: CALL_OW 69
71605: ST_TO_ADDR
// if not tmp then
71606: LD_VAR 0 2
71610: NOT
71611: IFFALSE 71615
// exit ;
71613: GO 71702
// un := tmp [ rand ( 1 , tmp ) ] ;
71615: LD_ADDR_VAR 0 1
71619: PUSH
71620: LD_VAR 0 2
71624: PUSH
71625: LD_INT 1
71627: PPUSH
71628: LD_VAR 0 2
71632: PPUSH
71633: CALL_OW 12
71637: ARRAY
71638: ST_TO_ADDR
// SetSide ( un , 0 ) ;
71639: LD_VAR 0 1
71643: PPUSH
71644: LD_INT 0
71646: PPUSH
71647: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
71651: LD_VAR 0 1
71655: PPUSH
71656: LD_OWVAR 3
71660: PUSH
71661: LD_VAR 0 1
71665: DIFF
71666: PPUSH
71667: LD_VAR 0 1
71671: PPUSH
71672: CALL_OW 74
71676: PPUSH
71677: CALL_OW 115
// wait ( 0 0$20 ) ;
71681: LD_INT 700
71683: PPUSH
71684: CALL_OW 67
// SetSide ( un , your_side ) ;
71688: LD_VAR 0 1
71692: PPUSH
71693: LD_OWVAR 2
71697: PPUSH
71698: CALL_OW 235
// end ;
71702: PPOPN 2
71704: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
71705: LD_EXP 46
71709: PUSH
71710: LD_EXP 79
71714: AND
71715: IFFALSE 71821
71717: GO 71719
71719: DISABLE
71720: LD_INT 0
71722: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71723: LD_ADDR_VAR 0 1
71727: PUSH
71728: LD_INT 22
71730: PUSH
71731: LD_OWVAR 2
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 2
71742: PUSH
71743: LD_INT 30
71745: PUSH
71746: LD_INT 0
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 30
71755: PUSH
71756: LD_INT 1
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: LIST
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PPUSH
71772: CALL_OW 69
71776: ST_TO_ADDR
// if not depot then
71777: LD_VAR 0 1
71781: NOT
71782: IFFALSE 71786
// exit ;
71784: GO 71821
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
71786: LD_VAR 0 1
71790: PUSH
71791: LD_INT 1
71793: ARRAY
71794: PPUSH
71795: CALL_OW 250
71799: PPUSH
71800: LD_VAR 0 1
71804: PUSH
71805: LD_INT 1
71807: ARRAY
71808: PPUSH
71809: CALL_OW 251
71813: PPUSH
71814: LD_INT 70
71816: PPUSH
71817: CALL_OW 495
// end ;
71821: PPOPN 1
71823: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
71824: LD_EXP 46
71828: PUSH
71829: LD_EXP 80
71833: AND
71834: IFFALSE 72045
71836: GO 71838
71838: DISABLE
71839: LD_INT 0
71841: PPUSH
71842: PPUSH
71843: PPUSH
71844: PPUSH
71845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71846: LD_ADDR_VAR 0 5
71850: PUSH
71851: LD_INT 22
71853: PUSH
71854: LD_OWVAR 2
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 21
71865: PUSH
71866: LD_INT 1
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PPUSH
71877: CALL_OW 69
71881: ST_TO_ADDR
// if not tmp then
71882: LD_VAR 0 5
71886: NOT
71887: IFFALSE 71891
// exit ;
71889: GO 72045
// for i in tmp do
71891: LD_ADDR_VAR 0 1
71895: PUSH
71896: LD_VAR 0 5
71900: PUSH
71901: FOR_IN
71902: IFFALSE 72043
// begin d := rand ( 0 , 5 ) ;
71904: LD_ADDR_VAR 0 4
71908: PUSH
71909: LD_INT 0
71911: PPUSH
71912: LD_INT 5
71914: PPUSH
71915: CALL_OW 12
71919: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
71920: LD_ADDR_VAR 0 2
71924: PUSH
71925: LD_VAR 0 1
71929: PPUSH
71930: CALL_OW 250
71934: PPUSH
71935: LD_VAR 0 4
71939: PPUSH
71940: LD_INT 3
71942: PPUSH
71943: LD_INT 12
71945: PPUSH
71946: CALL_OW 12
71950: PPUSH
71951: CALL_OW 272
71955: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
71956: LD_ADDR_VAR 0 3
71960: PUSH
71961: LD_VAR 0 1
71965: PPUSH
71966: CALL_OW 251
71970: PPUSH
71971: LD_VAR 0 4
71975: PPUSH
71976: LD_INT 3
71978: PPUSH
71979: LD_INT 12
71981: PPUSH
71982: CALL_OW 12
71986: PPUSH
71987: CALL_OW 273
71991: ST_TO_ADDR
// if ValidHex ( x , y ) then
71992: LD_VAR 0 2
71996: PPUSH
71997: LD_VAR 0 3
72001: PPUSH
72002: CALL_OW 488
72006: IFFALSE 72041
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
72008: LD_VAR 0 1
72012: PPUSH
72013: LD_VAR 0 2
72017: PPUSH
72018: LD_VAR 0 3
72022: PPUSH
72023: LD_INT 3
72025: PPUSH
72026: LD_INT 6
72028: PPUSH
72029: CALL_OW 12
72033: PPUSH
72034: LD_INT 1
72036: PPUSH
72037: CALL_OW 483
// end ;
72041: GO 71901
72043: POP
72044: POP
// end ;
72045: PPOPN 5
72047: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
72048: LD_EXP 46
72052: PUSH
72053: LD_EXP 81
72057: AND
72058: IFFALSE 72152
72060: GO 72062
72062: DISABLE
72063: LD_INT 0
72065: PPUSH
72066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
72067: LD_ADDR_VAR 0 2
72071: PUSH
72072: LD_INT 22
72074: PUSH
72075: LD_OWVAR 2
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 32
72086: PUSH
72087: LD_INT 1
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 21
72096: PUSH
72097: LD_INT 2
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: LIST
72108: PPUSH
72109: CALL_OW 69
72113: ST_TO_ADDR
// if not tmp then
72114: LD_VAR 0 2
72118: NOT
72119: IFFALSE 72123
// exit ;
72121: GO 72152
// for i in tmp do
72123: LD_ADDR_VAR 0 1
72127: PUSH
72128: LD_VAR 0 2
72132: PUSH
72133: FOR_IN
72134: IFFALSE 72150
// SetFuel ( i , 0 ) ;
72136: LD_VAR 0 1
72140: PPUSH
72141: LD_INT 0
72143: PPUSH
72144: CALL_OW 240
72148: GO 72133
72150: POP
72151: POP
// end ;
72152: PPOPN 2
72154: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
72155: LD_EXP 46
72159: PUSH
72160: LD_EXP 82
72164: AND
72165: IFFALSE 72231
72167: GO 72169
72169: DISABLE
72170: LD_INT 0
72172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72173: LD_ADDR_VAR 0 1
72177: PUSH
72178: LD_INT 22
72180: PUSH
72181: LD_OWVAR 2
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 30
72192: PUSH
72193: LD_INT 29
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PPUSH
72204: CALL_OW 69
72208: ST_TO_ADDR
// if not tmp then
72209: LD_VAR 0 1
72213: NOT
72214: IFFALSE 72218
// exit ;
72216: GO 72231
// DestroyUnit ( tmp [ 1 ] ) ;
72218: LD_VAR 0 1
72222: PUSH
72223: LD_INT 1
72225: ARRAY
72226: PPUSH
72227: CALL_OW 65
// end ;
72231: PPOPN 1
72233: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
72234: LD_EXP 46
72238: PUSH
72239: LD_EXP 84
72243: AND
72244: IFFALSE 72373
72246: GO 72248
72248: DISABLE
72249: LD_INT 0
72251: PPUSH
// begin uc_side := 0 ;
72252: LD_ADDR_OWVAR 20
72256: PUSH
72257: LD_INT 0
72259: ST_TO_ADDR
// uc_nation := nation_arabian ;
72260: LD_ADDR_OWVAR 21
72264: PUSH
72265: LD_INT 2
72267: ST_TO_ADDR
// hc_gallery :=  ;
72268: LD_ADDR_OWVAR 33
72272: PUSH
72273: LD_STRING 
72275: ST_TO_ADDR
// hc_name :=  ;
72276: LD_ADDR_OWVAR 26
72280: PUSH
72281: LD_STRING 
72283: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
72284: LD_INT 1
72286: PPUSH
72287: LD_INT 11
72289: PPUSH
72290: LD_INT 10
72292: PPUSH
72293: CALL_OW 380
// un := CreateHuman ;
72297: LD_ADDR_VAR 0 1
72301: PUSH
72302: CALL_OW 44
72306: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72307: LD_VAR 0 1
72311: PPUSH
72312: LD_INT 1
72314: PPUSH
72315: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72319: LD_INT 35
72321: PPUSH
72322: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72326: LD_VAR 0 1
72330: PPUSH
72331: LD_INT 22
72333: PUSH
72334: LD_OWVAR 2
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PPUSH
72343: CALL_OW 69
72347: PPUSH
72348: LD_VAR 0 1
72352: PPUSH
72353: CALL_OW 74
72357: PPUSH
72358: CALL_OW 115
// until IsDead ( un ) ;
72362: LD_VAR 0 1
72366: PPUSH
72367: CALL_OW 301
72371: IFFALSE 72319
// end ;
72373: PPOPN 1
72375: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
72376: LD_EXP 46
72380: PUSH
72381: LD_EXP 86
72385: AND
72386: IFFALSE 72398
72388: GO 72390
72390: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
72391: LD_STRING earthquake(getX(game), 0, 32)
72393: PPUSH
72394: CALL_OW 559
72398: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
72399: LD_EXP 46
72403: PUSH
72404: LD_EXP 87
72408: AND
72409: IFFALSE 72500
72411: GO 72413
72413: DISABLE
72414: LD_INT 0
72416: PPUSH
// begin enable ;
72417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
72418: LD_ADDR_VAR 0 1
72422: PUSH
72423: LD_INT 22
72425: PUSH
72426: LD_OWVAR 2
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 21
72437: PUSH
72438: LD_INT 2
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 33
72447: PUSH
72448: LD_INT 3
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: LIST
72459: PPUSH
72460: CALL_OW 69
72464: ST_TO_ADDR
// if not tmp then
72465: LD_VAR 0 1
72469: NOT
72470: IFFALSE 72474
// exit ;
72472: GO 72500
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72474: LD_VAR 0 1
72478: PUSH
72479: LD_INT 1
72481: PPUSH
72482: LD_VAR 0 1
72486: PPUSH
72487: CALL_OW 12
72491: ARRAY
72492: PPUSH
72493: LD_INT 1
72495: PPUSH
72496: CALL_OW 234
// end ;
72500: PPOPN 1
72502: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
72503: LD_EXP 46
72507: PUSH
72508: LD_EXP 88
72512: AND
72513: IFFALSE 72654
72515: GO 72517
72517: DISABLE
72518: LD_INT 0
72520: PPUSH
72521: PPUSH
72522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72523: LD_ADDR_VAR 0 3
72527: PUSH
72528: LD_INT 22
72530: PUSH
72531: LD_OWVAR 2
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 25
72542: PUSH
72543: LD_INT 1
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PPUSH
72554: CALL_OW 69
72558: ST_TO_ADDR
// if not tmp then
72559: LD_VAR 0 3
72563: NOT
72564: IFFALSE 72568
// exit ;
72566: GO 72654
// un := tmp [ rand ( 1 , tmp ) ] ;
72568: LD_ADDR_VAR 0 2
72572: PUSH
72573: LD_VAR 0 3
72577: PUSH
72578: LD_INT 1
72580: PPUSH
72581: LD_VAR 0 3
72585: PPUSH
72586: CALL_OW 12
72590: ARRAY
72591: ST_TO_ADDR
// if Crawls ( un ) then
72592: LD_VAR 0 2
72596: PPUSH
72597: CALL_OW 318
72601: IFFALSE 72612
// ComWalk ( un ) ;
72603: LD_VAR 0 2
72607: PPUSH
72608: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
72612: LD_VAR 0 2
72616: PPUSH
72617: LD_INT 9
72619: PPUSH
72620: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
72624: LD_INT 28
72626: PPUSH
72627: LD_OWVAR 2
72631: PPUSH
72632: LD_INT 2
72634: PPUSH
72635: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
72639: LD_INT 29
72641: PPUSH
72642: LD_OWVAR 2
72646: PPUSH
72647: LD_INT 2
72649: PPUSH
72650: CALL_OW 322
// end ;
72654: PPOPN 3
72656: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
72657: LD_EXP 46
72661: PUSH
72662: LD_EXP 89
72666: AND
72667: IFFALSE 72778
72669: GO 72671
72671: DISABLE
72672: LD_INT 0
72674: PPUSH
72675: PPUSH
72676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72677: LD_ADDR_VAR 0 3
72681: PUSH
72682: LD_INT 22
72684: PUSH
72685: LD_OWVAR 2
72689: PUSH
72690: EMPTY
72691: LIST
72692: LIST
72693: PUSH
72694: LD_INT 25
72696: PUSH
72697: LD_INT 1
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PPUSH
72708: CALL_OW 69
72712: ST_TO_ADDR
// if not tmp then
72713: LD_VAR 0 3
72717: NOT
72718: IFFALSE 72722
// exit ;
72720: GO 72778
// un := tmp [ rand ( 1 , tmp ) ] ;
72722: LD_ADDR_VAR 0 2
72726: PUSH
72727: LD_VAR 0 3
72731: PUSH
72732: LD_INT 1
72734: PPUSH
72735: LD_VAR 0 3
72739: PPUSH
72740: CALL_OW 12
72744: ARRAY
72745: ST_TO_ADDR
// if Crawls ( un ) then
72746: LD_VAR 0 2
72750: PPUSH
72751: CALL_OW 318
72755: IFFALSE 72766
// ComWalk ( un ) ;
72757: LD_VAR 0 2
72761: PPUSH
72762: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72766: LD_VAR 0 2
72770: PPUSH
72771: LD_INT 8
72773: PPUSH
72774: CALL_OW 336
// end ;
72778: PPOPN 3
72780: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
72781: LD_EXP 46
72785: PUSH
72786: LD_EXP 90
72790: AND
72791: IFFALSE 72935
72793: GO 72795
72795: DISABLE
72796: LD_INT 0
72798: PPUSH
72799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
72800: LD_ADDR_VAR 0 2
72804: PUSH
72805: LD_INT 22
72807: PUSH
72808: LD_OWVAR 2
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 21
72819: PUSH
72820: LD_INT 2
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 2
72829: PUSH
72830: LD_INT 34
72832: PUSH
72833: LD_INT 12
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 34
72842: PUSH
72843: LD_INT 51
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 34
72852: PUSH
72853: LD_INT 32
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: LIST
72870: PPUSH
72871: CALL_OW 69
72875: ST_TO_ADDR
// if not tmp then
72876: LD_VAR 0 2
72880: NOT
72881: IFFALSE 72885
// exit ;
72883: GO 72935
// for i in tmp do
72885: LD_ADDR_VAR 0 1
72889: PUSH
72890: LD_VAR 0 2
72894: PUSH
72895: FOR_IN
72896: IFFALSE 72933
// if GetCargo ( i , mat_artifact ) = 0 then
72898: LD_VAR 0 1
72902: PPUSH
72903: LD_INT 4
72905: PPUSH
72906: CALL_OW 289
72910: PUSH
72911: LD_INT 0
72913: EQUAL
72914: IFFALSE 72931
// SetCargo ( i , mat_siberit , 100 ) ;
72916: LD_VAR 0 1
72920: PPUSH
72921: LD_INT 3
72923: PPUSH
72924: LD_INT 100
72926: PPUSH
72927: CALL_OW 290
72931: GO 72895
72933: POP
72934: POP
// end ;
72935: PPOPN 2
72937: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
72938: LD_EXP 46
72942: PUSH
72943: LD_EXP 91
72947: AND
72948: IFFALSE 73131
72950: GO 72952
72952: DISABLE
72953: LD_INT 0
72955: PPUSH
72956: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72957: LD_ADDR_VAR 0 2
72961: PUSH
72962: LD_INT 22
72964: PUSH
72965: LD_OWVAR 2
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PPUSH
72974: CALL_OW 69
72978: ST_TO_ADDR
// if not tmp then
72979: LD_VAR 0 2
72983: NOT
72984: IFFALSE 72988
// exit ;
72986: GO 73131
// for i := 1 to 2 do
72988: LD_ADDR_VAR 0 1
72992: PUSH
72993: DOUBLE
72994: LD_INT 1
72996: DEC
72997: ST_TO_ADDR
72998: LD_INT 2
73000: PUSH
73001: FOR_TO
73002: IFFALSE 73129
// begin uc_side := your_side ;
73004: LD_ADDR_OWVAR 20
73008: PUSH
73009: LD_OWVAR 2
73013: ST_TO_ADDR
// uc_nation := nation_american ;
73014: LD_ADDR_OWVAR 21
73018: PUSH
73019: LD_INT 1
73021: ST_TO_ADDR
// vc_chassis := us_morphling ;
73022: LD_ADDR_OWVAR 37
73026: PUSH
73027: LD_INT 5
73029: ST_TO_ADDR
// vc_engine := engine_siberite ;
73030: LD_ADDR_OWVAR 39
73034: PUSH
73035: LD_INT 3
73037: ST_TO_ADDR
// vc_control := control_computer ;
73038: LD_ADDR_OWVAR 38
73042: PUSH
73043: LD_INT 3
73045: ST_TO_ADDR
// vc_weapon := us_double_laser ;
73046: LD_ADDR_OWVAR 40
73050: PUSH
73051: LD_INT 10
73053: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
73054: LD_VAR 0 2
73058: PUSH
73059: LD_INT 1
73061: ARRAY
73062: PPUSH
73063: CALL_OW 310
73067: NOT
73068: IFFALSE 73115
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
73070: CALL_OW 45
73074: PPUSH
73075: LD_VAR 0 2
73079: PUSH
73080: LD_INT 1
73082: ARRAY
73083: PPUSH
73084: CALL_OW 250
73088: PPUSH
73089: LD_VAR 0 2
73093: PUSH
73094: LD_INT 1
73096: ARRAY
73097: PPUSH
73098: CALL_OW 251
73102: PPUSH
73103: LD_INT 12
73105: PPUSH
73106: LD_INT 1
73108: PPUSH
73109: CALL_OW 50
73113: GO 73127
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
73115: CALL_OW 45
73119: PPUSH
73120: LD_INT 1
73122: PPUSH
73123: CALL_OW 51
// end ;
73127: GO 73001
73129: POP
73130: POP
// end ;
73131: PPOPN 2
73133: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
73134: LD_EXP 46
73138: PUSH
73139: LD_EXP 92
73143: AND
73144: IFFALSE 73366
73146: GO 73148
73148: DISABLE
73149: LD_INT 0
73151: PPUSH
73152: PPUSH
73153: PPUSH
73154: PPUSH
73155: PPUSH
73156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73157: LD_ADDR_VAR 0 6
73161: PUSH
73162: LD_INT 22
73164: PUSH
73165: LD_OWVAR 2
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 21
73176: PUSH
73177: LD_INT 1
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 3
73186: PUSH
73187: LD_INT 23
73189: PUSH
73190: LD_INT 0
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: LIST
73205: PPUSH
73206: CALL_OW 69
73210: ST_TO_ADDR
// if not tmp then
73211: LD_VAR 0 6
73215: NOT
73216: IFFALSE 73220
// exit ;
73218: GO 73366
// s1 := rand ( 1 , 4 ) ;
73220: LD_ADDR_VAR 0 2
73224: PUSH
73225: LD_INT 1
73227: PPUSH
73228: LD_INT 4
73230: PPUSH
73231: CALL_OW 12
73235: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
73236: LD_ADDR_VAR 0 4
73240: PUSH
73241: LD_VAR 0 6
73245: PUSH
73246: LD_INT 1
73248: ARRAY
73249: PPUSH
73250: LD_VAR 0 2
73254: PPUSH
73255: CALL_OW 259
73259: ST_TO_ADDR
// if s1 = 1 then
73260: LD_VAR 0 2
73264: PUSH
73265: LD_INT 1
73267: EQUAL
73268: IFFALSE 73288
// s2 := rand ( 2 , 4 ) else
73270: LD_ADDR_VAR 0 3
73274: PUSH
73275: LD_INT 2
73277: PPUSH
73278: LD_INT 4
73280: PPUSH
73281: CALL_OW 12
73285: ST_TO_ADDR
73286: GO 73296
// s2 := 1 ;
73288: LD_ADDR_VAR 0 3
73292: PUSH
73293: LD_INT 1
73295: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
73296: LD_ADDR_VAR 0 5
73300: PUSH
73301: LD_VAR 0 6
73305: PUSH
73306: LD_INT 1
73308: ARRAY
73309: PPUSH
73310: LD_VAR 0 3
73314: PPUSH
73315: CALL_OW 259
73319: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
73320: LD_VAR 0 6
73324: PUSH
73325: LD_INT 1
73327: ARRAY
73328: PPUSH
73329: LD_VAR 0 2
73333: PPUSH
73334: LD_VAR 0 5
73338: PPUSH
73339: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
73343: LD_VAR 0 6
73347: PUSH
73348: LD_INT 1
73350: ARRAY
73351: PPUSH
73352: LD_VAR 0 3
73356: PPUSH
73357: LD_VAR 0 4
73361: PPUSH
73362: CALL_OW 237
// end ;
73366: PPOPN 6
73368: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
73369: LD_EXP 46
73373: PUSH
73374: LD_EXP 93
73378: AND
73379: IFFALSE 73458
73381: GO 73383
73383: DISABLE
73384: LD_INT 0
73386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
73387: LD_ADDR_VAR 0 1
73391: PUSH
73392: LD_INT 22
73394: PUSH
73395: LD_OWVAR 2
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 30
73406: PUSH
73407: LD_INT 3
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PPUSH
73418: CALL_OW 69
73422: ST_TO_ADDR
// if not tmp then
73423: LD_VAR 0 1
73427: NOT
73428: IFFALSE 73432
// exit ;
73430: GO 73458
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73432: LD_VAR 0 1
73436: PUSH
73437: LD_INT 1
73439: PPUSH
73440: LD_VAR 0 1
73444: PPUSH
73445: CALL_OW 12
73449: ARRAY
73450: PPUSH
73451: LD_INT 1
73453: PPUSH
73454: CALL_OW 234
// end ;
73458: PPOPN 1
73460: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
73461: LD_EXP 46
73465: PUSH
73466: LD_EXP 94
73470: AND
73471: IFFALSE 73583
73473: GO 73475
73475: DISABLE
73476: LD_INT 0
73478: PPUSH
73479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
73480: LD_ADDR_VAR 0 2
73484: PUSH
73485: LD_INT 22
73487: PUSH
73488: LD_OWVAR 2
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 2
73499: PUSH
73500: LD_INT 30
73502: PUSH
73503: LD_INT 27
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: PUSH
73510: LD_INT 30
73512: PUSH
73513: LD_INT 26
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 30
73522: PUSH
73523: LD_INT 28
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: LIST
73534: LIST
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PPUSH
73540: CALL_OW 69
73544: ST_TO_ADDR
// if not tmp then
73545: LD_VAR 0 2
73549: NOT
73550: IFFALSE 73554
// exit ;
73552: GO 73583
// for i in tmp do
73554: LD_ADDR_VAR 0 1
73558: PUSH
73559: LD_VAR 0 2
73563: PUSH
73564: FOR_IN
73565: IFFALSE 73581
// SetLives ( i , 1 ) ;
73567: LD_VAR 0 1
73571: PPUSH
73572: LD_INT 1
73574: PPUSH
73575: CALL_OW 234
73579: GO 73564
73581: POP
73582: POP
// end ;
73583: PPOPN 2
73585: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
73586: LD_EXP 46
73590: PUSH
73591: LD_EXP 95
73595: AND
73596: IFFALSE 73883
73598: GO 73600
73600: DISABLE
73601: LD_INT 0
73603: PPUSH
73604: PPUSH
73605: PPUSH
// begin i := rand ( 1 , 7 ) ;
73606: LD_ADDR_VAR 0 1
73610: PUSH
73611: LD_INT 1
73613: PPUSH
73614: LD_INT 7
73616: PPUSH
73617: CALL_OW 12
73621: ST_TO_ADDR
// case i of 1 :
73622: LD_VAR 0 1
73626: PUSH
73627: LD_INT 1
73629: DOUBLE
73630: EQUAL
73631: IFTRUE 73635
73633: GO 73645
73635: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
73636: LD_STRING earthquake(getX(game), 0, 32)
73638: PPUSH
73639: CALL_OW 559
73643: GO 73883
73645: LD_INT 2
73647: DOUBLE
73648: EQUAL
73649: IFTRUE 73653
73651: GO 73667
73653: POP
// begin ToLua ( displayStucuk(); ) ;
73654: LD_STRING displayStucuk();
73656: PPUSH
73657: CALL_OW 559
// ResetFog ;
73661: CALL_OW 335
// end ; 3 :
73665: GO 73883
73667: LD_INT 3
73669: DOUBLE
73670: EQUAL
73671: IFTRUE 73675
73673: GO 73779
73675: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73676: LD_ADDR_VAR 0 2
73680: PUSH
73681: LD_INT 22
73683: PUSH
73684: LD_OWVAR 2
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 25
73695: PUSH
73696: LD_INT 1
73698: PUSH
73699: EMPTY
73700: LIST
73701: LIST
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PPUSH
73707: CALL_OW 69
73711: ST_TO_ADDR
// if not tmp then
73712: LD_VAR 0 2
73716: NOT
73717: IFFALSE 73721
// exit ;
73719: GO 73883
// un := tmp [ rand ( 1 , tmp ) ] ;
73721: LD_ADDR_VAR 0 3
73725: PUSH
73726: LD_VAR 0 2
73730: PUSH
73731: LD_INT 1
73733: PPUSH
73734: LD_VAR 0 2
73738: PPUSH
73739: CALL_OW 12
73743: ARRAY
73744: ST_TO_ADDR
// if Crawls ( un ) then
73745: LD_VAR 0 3
73749: PPUSH
73750: CALL_OW 318
73754: IFFALSE 73765
// ComWalk ( un ) ;
73756: LD_VAR 0 3
73760: PPUSH
73761: CALL_OW 138
// SetClass ( un , class_mortar ) ;
73765: LD_VAR 0 3
73769: PPUSH
73770: LD_INT 8
73772: PPUSH
73773: CALL_OW 336
// end ; 4 :
73777: GO 73883
73779: LD_INT 4
73781: DOUBLE
73782: EQUAL
73783: IFTRUE 73787
73785: GO 73861
73787: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73788: LD_ADDR_VAR 0 2
73792: PUSH
73793: LD_INT 22
73795: PUSH
73796: LD_OWVAR 2
73800: PUSH
73801: EMPTY
73802: LIST
73803: LIST
73804: PUSH
73805: LD_INT 30
73807: PUSH
73808: LD_INT 29
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PPUSH
73819: CALL_OW 69
73823: ST_TO_ADDR
// if not tmp then
73824: LD_VAR 0 2
73828: NOT
73829: IFFALSE 73833
// exit ;
73831: GO 73883
// CenterNowOnUnits ( tmp [ 1 ] ) ;
73833: LD_VAR 0 2
73837: PUSH
73838: LD_INT 1
73840: ARRAY
73841: PPUSH
73842: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
73846: LD_VAR 0 2
73850: PUSH
73851: LD_INT 1
73853: ARRAY
73854: PPUSH
73855: CALL_OW 65
// end ; 5 .. 7 :
73859: GO 73883
73861: LD_INT 5
73863: DOUBLE
73864: GREATEREQUAL
73865: IFFALSE 73873
73867: LD_INT 7
73869: DOUBLE
73870: LESSEQUAL
73871: IFTRUE 73875
73873: GO 73882
73875: POP
// StreamSibBomb ; end ;
73876: CALL 70120 0 0
73880: GO 73883
73882: POP
// end ;
73883: PPOPN 3
73885: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
73886: LD_EXP 46
73890: PUSH
73891: LD_EXP 96
73895: AND
73896: IFFALSE 74052
73898: GO 73900
73900: DISABLE
73901: LD_INT 0
73903: PPUSH
73904: PPUSH
73905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
73906: LD_ADDR_VAR 0 2
73910: PUSH
73911: LD_INT 81
73913: PUSH
73914: LD_OWVAR 2
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 2
73925: PUSH
73926: LD_INT 21
73928: PUSH
73929: LD_INT 1
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 21
73938: PUSH
73939: LD_INT 2
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: LIST
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PPUSH
73955: CALL_OW 69
73959: ST_TO_ADDR
// if not tmp then
73960: LD_VAR 0 2
73964: NOT
73965: IFFALSE 73969
// exit ;
73967: GO 74052
// p := 0 ;
73969: LD_ADDR_VAR 0 3
73973: PUSH
73974: LD_INT 0
73976: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73977: LD_INT 35
73979: PPUSH
73980: CALL_OW 67
// p := p + 1 ;
73984: LD_ADDR_VAR 0 3
73988: PUSH
73989: LD_VAR 0 3
73993: PUSH
73994: LD_INT 1
73996: PLUS
73997: ST_TO_ADDR
// for i in tmp do
73998: LD_ADDR_VAR 0 1
74002: PUSH
74003: LD_VAR 0 2
74007: PUSH
74008: FOR_IN
74009: IFFALSE 74040
// if GetLives ( i ) < 1000 then
74011: LD_VAR 0 1
74015: PPUSH
74016: CALL_OW 256
74020: PUSH
74021: LD_INT 1000
74023: LESS
74024: IFFALSE 74038
// SetLives ( i , 1000 ) ;
74026: LD_VAR 0 1
74030: PPUSH
74031: LD_INT 1000
74033: PPUSH
74034: CALL_OW 234
74038: GO 74008
74040: POP
74041: POP
// until p > 20 ;
74042: LD_VAR 0 3
74046: PUSH
74047: LD_INT 20
74049: GREATER
74050: IFFALSE 73977
// end ;
74052: PPOPN 3
74054: END
// every 0 0$1 trigger StreamModeActive and sTime do
74055: LD_EXP 46
74059: PUSH
74060: LD_EXP 97
74064: AND
74065: IFFALSE 74100
74067: GO 74069
74069: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
74070: LD_INT 28
74072: PPUSH
74073: LD_OWVAR 2
74077: PPUSH
74078: LD_INT 2
74080: PPUSH
74081: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
74085: LD_INT 30
74087: PPUSH
74088: LD_OWVAR 2
74092: PPUSH
74093: LD_INT 2
74095: PPUSH
74096: CALL_OW 322
// end ;
74100: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
74101: LD_EXP 46
74105: PUSH
74106: LD_EXP 98
74110: AND
74111: IFFALSE 74232
74113: GO 74115
74115: DISABLE
74116: LD_INT 0
74118: PPUSH
74119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74120: LD_ADDR_VAR 0 2
74124: PUSH
74125: LD_INT 22
74127: PUSH
74128: LD_OWVAR 2
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: LD_INT 21
74139: PUSH
74140: LD_INT 1
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 3
74149: PUSH
74150: LD_INT 23
74152: PUSH
74153: LD_INT 0
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: LIST
74168: PPUSH
74169: CALL_OW 69
74173: ST_TO_ADDR
// if not tmp then
74174: LD_VAR 0 2
74178: NOT
74179: IFFALSE 74183
// exit ;
74181: GO 74232
// for i in tmp do
74183: LD_ADDR_VAR 0 1
74187: PUSH
74188: LD_VAR 0 2
74192: PUSH
74193: FOR_IN
74194: IFFALSE 74230
// begin if Crawls ( i ) then
74196: LD_VAR 0 1
74200: PPUSH
74201: CALL_OW 318
74205: IFFALSE 74216
// ComWalk ( i ) ;
74207: LD_VAR 0 1
74211: PPUSH
74212: CALL_OW 138
// SetClass ( i , 2 ) ;
74216: LD_VAR 0 1
74220: PPUSH
74221: LD_INT 2
74223: PPUSH
74224: CALL_OW 336
// end ;
74228: GO 74193
74230: POP
74231: POP
// end ;
74232: PPOPN 2
74234: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
74235: LD_EXP 46
74239: PUSH
74240: LD_EXP 99
74244: AND
74245: IFFALSE 74533
74247: GO 74249
74249: DISABLE
74250: LD_INT 0
74252: PPUSH
74253: PPUSH
74254: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
74255: LD_OWVAR 2
74259: PPUSH
74260: LD_INT 9
74262: PPUSH
74263: LD_INT 1
74265: PPUSH
74266: LD_INT 1
74268: PPUSH
74269: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
74273: LD_INT 9
74275: PPUSH
74276: LD_OWVAR 2
74280: PPUSH
74281: CALL_OW 343
// uc_side := 9 ;
74285: LD_ADDR_OWVAR 20
74289: PUSH
74290: LD_INT 9
74292: ST_TO_ADDR
// uc_nation := 2 ;
74293: LD_ADDR_OWVAR 21
74297: PUSH
74298: LD_INT 2
74300: ST_TO_ADDR
// hc_name := Dark Warrior ;
74301: LD_ADDR_OWVAR 26
74305: PUSH
74306: LD_STRING Dark Warrior
74308: ST_TO_ADDR
// hc_gallery :=  ;
74309: LD_ADDR_OWVAR 33
74313: PUSH
74314: LD_STRING 
74316: ST_TO_ADDR
// hc_noskilllimit := true ;
74317: LD_ADDR_OWVAR 76
74321: PUSH
74322: LD_INT 1
74324: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
74325: LD_ADDR_OWVAR 31
74329: PUSH
74330: LD_INT 30
74332: PUSH
74333: LD_INT 30
74335: PUSH
74336: LD_INT 30
74338: PUSH
74339: LD_INT 30
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: ST_TO_ADDR
// un := CreateHuman ;
74348: LD_ADDR_VAR 0 3
74352: PUSH
74353: CALL_OW 44
74357: ST_TO_ADDR
// hc_noskilllimit := false ;
74358: LD_ADDR_OWVAR 76
74362: PUSH
74363: LD_INT 0
74365: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74366: LD_VAR 0 3
74370: PPUSH
74371: LD_INT 1
74373: PPUSH
74374: CALL_OW 51
// ToLua ( playRanger() ) ;
74378: LD_STRING playRanger()
74380: PPUSH
74381: CALL_OW 559
// p := 0 ;
74385: LD_ADDR_VAR 0 2
74389: PUSH
74390: LD_INT 0
74392: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74393: LD_INT 35
74395: PPUSH
74396: CALL_OW 67
// p := p + 1 ;
74400: LD_ADDR_VAR 0 2
74404: PUSH
74405: LD_VAR 0 2
74409: PUSH
74410: LD_INT 1
74412: PLUS
74413: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
74414: LD_VAR 0 3
74418: PPUSH
74419: CALL_OW 256
74423: PUSH
74424: LD_INT 1000
74426: LESS
74427: IFFALSE 74441
// SetLives ( un , 1000 ) ;
74429: LD_VAR 0 3
74433: PPUSH
74434: LD_INT 1000
74436: PPUSH
74437: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
74441: LD_VAR 0 3
74445: PPUSH
74446: LD_INT 81
74448: PUSH
74449: LD_OWVAR 2
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 91
74460: PUSH
74461: LD_VAR 0 3
74465: PUSH
74466: LD_INT 30
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: LIST
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PPUSH
74478: CALL_OW 69
74482: PPUSH
74483: LD_VAR 0 3
74487: PPUSH
74488: CALL_OW 74
74492: PPUSH
74493: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
74497: LD_VAR 0 2
74501: PUSH
74502: LD_INT 80
74504: GREATER
74505: PUSH
74506: LD_VAR 0 3
74510: PPUSH
74511: CALL_OW 301
74515: OR
74516: IFFALSE 74393
// if un then
74518: LD_VAR 0 3
74522: IFFALSE 74533
// RemoveUnit ( un ) ;
74524: LD_VAR 0 3
74528: PPUSH
74529: CALL_OW 64
// end ;
74533: PPOPN 3
74535: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
74536: LD_EXP 100
74540: IFFALSE 74656
74542: GO 74544
74544: DISABLE
74545: LD_INT 0
74547: PPUSH
74548: PPUSH
74549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74550: LD_ADDR_VAR 0 2
74554: PUSH
74555: LD_INT 81
74557: PUSH
74558: LD_OWVAR 2
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 21
74569: PUSH
74570: LD_INT 1
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: PPUSH
74581: CALL_OW 69
74585: ST_TO_ADDR
// ToLua ( playComputer() ) ;
74586: LD_STRING playComputer()
74588: PPUSH
74589: CALL_OW 559
// if not tmp then
74593: LD_VAR 0 2
74597: NOT
74598: IFFALSE 74602
// exit ;
74600: GO 74656
// for i in tmp do
74602: LD_ADDR_VAR 0 1
74606: PUSH
74607: LD_VAR 0 2
74611: PUSH
74612: FOR_IN
74613: IFFALSE 74654
// for j := 1 to 4 do
74615: LD_ADDR_VAR 0 3
74619: PUSH
74620: DOUBLE
74621: LD_INT 1
74623: DEC
74624: ST_TO_ADDR
74625: LD_INT 4
74627: PUSH
74628: FOR_TO
74629: IFFALSE 74650
// SetSkill ( i , j , 10 ) ;
74631: LD_VAR 0 1
74635: PPUSH
74636: LD_VAR 0 3
74640: PPUSH
74641: LD_INT 10
74643: PPUSH
74644: CALL_OW 237
74648: GO 74628
74650: POP
74651: POP
74652: GO 74612
74654: POP
74655: POP
// end ;
74656: PPOPN 3
74658: END
// every 0 0$1 trigger s30 do var i , tmp ;
74659: LD_EXP 101
74663: IFFALSE 74732
74665: GO 74667
74667: DISABLE
74668: LD_INT 0
74670: PPUSH
74671: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74672: LD_ADDR_VAR 0 2
74676: PUSH
74677: LD_INT 22
74679: PUSH
74680: LD_OWVAR 2
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PPUSH
74689: CALL_OW 69
74693: ST_TO_ADDR
// if not tmp then
74694: LD_VAR 0 2
74698: NOT
74699: IFFALSE 74703
// exit ;
74701: GO 74732
// for i in tmp do
74703: LD_ADDR_VAR 0 1
74707: PUSH
74708: LD_VAR 0 2
74712: PUSH
74713: FOR_IN
74714: IFFALSE 74730
// SetLives ( i , 300 ) ;
74716: LD_VAR 0 1
74720: PPUSH
74721: LD_INT 300
74723: PPUSH
74724: CALL_OW 234
74728: GO 74713
74730: POP
74731: POP
// end ;
74732: PPOPN 2
74734: END
// every 0 0$1 trigger s60 do var i , tmp ;
74735: LD_EXP 102
74739: IFFALSE 74808
74741: GO 74743
74743: DISABLE
74744: LD_INT 0
74746: PPUSH
74747: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74748: LD_ADDR_VAR 0 2
74752: PUSH
74753: LD_INT 22
74755: PUSH
74756: LD_OWVAR 2
74760: PUSH
74761: EMPTY
74762: LIST
74763: LIST
74764: PPUSH
74765: CALL_OW 69
74769: ST_TO_ADDR
// if not tmp then
74770: LD_VAR 0 2
74774: NOT
74775: IFFALSE 74779
// exit ;
74777: GO 74808
// for i in tmp do
74779: LD_ADDR_VAR 0 1
74783: PUSH
74784: LD_VAR 0 2
74788: PUSH
74789: FOR_IN
74790: IFFALSE 74806
// SetLives ( i , 600 ) ;
74792: LD_VAR 0 1
74796: PPUSH
74797: LD_INT 600
74799: PPUSH
74800: CALL_OW 234
74804: GO 74789
74806: POP
74807: POP
// end ;
74808: PPOPN 2
74810: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74811: LD_INT 0
74813: PPUSH
// case cmd of 301 :
74814: LD_VAR 0 1
74818: PUSH
74819: LD_INT 301
74821: DOUBLE
74822: EQUAL
74823: IFTRUE 74827
74825: GO 74859
74827: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
74828: LD_VAR 0 6
74832: PPUSH
74833: LD_VAR 0 7
74837: PPUSH
74838: LD_VAR 0 8
74842: PPUSH
74843: LD_VAR 0 4
74847: PPUSH
74848: LD_VAR 0 5
74852: PPUSH
74853: CALL 76068 0 5
74857: GO 74980
74859: LD_INT 302
74861: DOUBLE
74862: EQUAL
74863: IFTRUE 74867
74865: GO 74904
74867: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
74868: LD_VAR 0 6
74872: PPUSH
74873: LD_VAR 0 7
74877: PPUSH
74878: LD_VAR 0 8
74882: PPUSH
74883: LD_VAR 0 9
74887: PPUSH
74888: LD_VAR 0 4
74892: PPUSH
74893: LD_VAR 0 5
74897: PPUSH
74898: CALL 76159 0 6
74902: GO 74980
74904: LD_INT 303
74906: DOUBLE
74907: EQUAL
74908: IFTRUE 74912
74910: GO 74949
74912: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
74913: LD_VAR 0 6
74917: PPUSH
74918: LD_VAR 0 7
74922: PPUSH
74923: LD_VAR 0 8
74927: PPUSH
74928: LD_VAR 0 9
74932: PPUSH
74933: LD_VAR 0 4
74937: PPUSH
74938: LD_VAR 0 5
74942: PPUSH
74943: CALL 74985 0 6
74947: GO 74980
74949: LD_INT 304
74951: DOUBLE
74952: EQUAL
74953: IFTRUE 74957
74955: GO 74979
74957: POP
// hHackTeleport ( unit , x , y ) ; end ;
74958: LD_VAR 0 2
74962: PPUSH
74963: LD_VAR 0 4
74967: PPUSH
74968: LD_VAR 0 5
74972: PPUSH
74973: CALL 76752 0 3
74977: GO 74980
74979: POP
// end ;
74980: LD_VAR 0 12
74984: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
74985: LD_INT 0
74987: PPUSH
74988: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
74989: LD_VAR 0 1
74993: PUSH
74994: LD_INT 1
74996: LESS
74997: PUSH
74998: LD_VAR 0 1
75002: PUSH
75003: LD_INT 3
75005: GREATER
75006: OR
75007: PUSH
75008: LD_VAR 0 5
75012: PPUSH
75013: LD_VAR 0 6
75017: PPUSH
75018: CALL_OW 428
75022: OR
75023: IFFALSE 75027
// exit ;
75025: GO 75755
// uc_side := your_side ;
75027: LD_ADDR_OWVAR 20
75031: PUSH
75032: LD_OWVAR 2
75036: ST_TO_ADDR
// uc_nation := nation ;
75037: LD_ADDR_OWVAR 21
75041: PUSH
75042: LD_VAR 0 1
75046: ST_TO_ADDR
// bc_level = 1 ;
75047: LD_ADDR_OWVAR 43
75051: PUSH
75052: LD_INT 1
75054: ST_TO_ADDR
// case btype of 1 :
75055: LD_VAR 0 2
75059: PUSH
75060: LD_INT 1
75062: DOUBLE
75063: EQUAL
75064: IFTRUE 75068
75066: GO 75079
75068: POP
// bc_type := b_depot ; 2 :
75069: LD_ADDR_OWVAR 42
75073: PUSH
75074: LD_INT 0
75076: ST_TO_ADDR
75077: GO 75699
75079: LD_INT 2
75081: DOUBLE
75082: EQUAL
75083: IFTRUE 75087
75085: GO 75098
75087: POP
// bc_type := b_warehouse ; 3 :
75088: LD_ADDR_OWVAR 42
75092: PUSH
75093: LD_INT 1
75095: ST_TO_ADDR
75096: GO 75699
75098: LD_INT 3
75100: DOUBLE
75101: EQUAL
75102: IFTRUE 75106
75104: GO 75117
75106: POP
// bc_type := b_lab ; 4 .. 9 :
75107: LD_ADDR_OWVAR 42
75111: PUSH
75112: LD_INT 6
75114: ST_TO_ADDR
75115: GO 75699
75117: LD_INT 4
75119: DOUBLE
75120: GREATEREQUAL
75121: IFFALSE 75129
75123: LD_INT 9
75125: DOUBLE
75126: LESSEQUAL
75127: IFTRUE 75131
75129: GO 75191
75131: POP
// begin bc_type := b_lab_half ;
75132: LD_ADDR_OWVAR 42
75136: PUSH
75137: LD_INT 7
75139: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
75140: LD_ADDR_OWVAR 44
75144: PUSH
75145: LD_INT 10
75147: PUSH
75148: LD_INT 11
75150: PUSH
75151: LD_INT 12
75153: PUSH
75154: LD_INT 15
75156: PUSH
75157: LD_INT 14
75159: PUSH
75160: LD_INT 13
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: PUSH
75171: LD_VAR 0 2
75175: PUSH
75176: LD_INT 3
75178: MINUS
75179: ARRAY
75180: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
75181: LD_ADDR_OWVAR 45
75185: PUSH
75186: LD_INT 9
75188: ST_TO_ADDR
// end ; 10 .. 13 :
75189: GO 75699
75191: LD_INT 10
75193: DOUBLE
75194: GREATEREQUAL
75195: IFFALSE 75203
75197: LD_INT 13
75199: DOUBLE
75200: LESSEQUAL
75201: IFTRUE 75205
75203: GO 75282
75205: POP
// begin bc_type := b_lab_full ;
75206: LD_ADDR_OWVAR 42
75210: PUSH
75211: LD_INT 8
75213: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
75214: LD_ADDR_OWVAR 44
75218: PUSH
75219: LD_INT 10
75221: PUSH
75222: LD_INT 12
75224: PUSH
75225: LD_INT 14
75227: PUSH
75228: LD_INT 13
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: PUSH
75237: LD_VAR 0 2
75241: PUSH
75242: LD_INT 9
75244: MINUS
75245: ARRAY
75246: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
75247: LD_ADDR_OWVAR 45
75251: PUSH
75252: LD_INT 11
75254: PUSH
75255: LD_INT 15
75257: PUSH
75258: LD_INT 12
75260: PUSH
75261: LD_INT 15
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: PUSH
75270: LD_VAR 0 2
75274: PUSH
75275: LD_INT 9
75277: MINUS
75278: ARRAY
75279: ST_TO_ADDR
// end ; 14 :
75280: GO 75699
75282: LD_INT 14
75284: DOUBLE
75285: EQUAL
75286: IFTRUE 75290
75288: GO 75301
75290: POP
// bc_type := b_workshop ; 15 :
75291: LD_ADDR_OWVAR 42
75295: PUSH
75296: LD_INT 2
75298: ST_TO_ADDR
75299: GO 75699
75301: LD_INT 15
75303: DOUBLE
75304: EQUAL
75305: IFTRUE 75309
75307: GO 75320
75309: POP
// bc_type := b_factory ; 16 :
75310: LD_ADDR_OWVAR 42
75314: PUSH
75315: LD_INT 3
75317: ST_TO_ADDR
75318: GO 75699
75320: LD_INT 16
75322: DOUBLE
75323: EQUAL
75324: IFTRUE 75328
75326: GO 75339
75328: POP
// bc_type := b_ext_gun ; 17 :
75329: LD_ADDR_OWVAR 42
75333: PUSH
75334: LD_INT 17
75336: ST_TO_ADDR
75337: GO 75699
75339: LD_INT 17
75341: DOUBLE
75342: EQUAL
75343: IFTRUE 75347
75345: GO 75375
75347: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
75348: LD_ADDR_OWVAR 42
75352: PUSH
75353: LD_INT 19
75355: PUSH
75356: LD_INT 23
75358: PUSH
75359: LD_INT 19
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: LIST
75366: PUSH
75367: LD_VAR 0 1
75371: ARRAY
75372: ST_TO_ADDR
75373: GO 75699
75375: LD_INT 18
75377: DOUBLE
75378: EQUAL
75379: IFTRUE 75383
75381: GO 75394
75383: POP
// bc_type := b_ext_radar ; 19 :
75384: LD_ADDR_OWVAR 42
75388: PUSH
75389: LD_INT 20
75391: ST_TO_ADDR
75392: GO 75699
75394: LD_INT 19
75396: DOUBLE
75397: EQUAL
75398: IFTRUE 75402
75400: GO 75413
75402: POP
// bc_type := b_ext_radio ; 20 :
75403: LD_ADDR_OWVAR 42
75407: PUSH
75408: LD_INT 22
75410: ST_TO_ADDR
75411: GO 75699
75413: LD_INT 20
75415: DOUBLE
75416: EQUAL
75417: IFTRUE 75421
75419: GO 75432
75421: POP
// bc_type := b_ext_siberium ; 21 :
75422: LD_ADDR_OWVAR 42
75426: PUSH
75427: LD_INT 21
75429: ST_TO_ADDR
75430: GO 75699
75432: LD_INT 21
75434: DOUBLE
75435: EQUAL
75436: IFTRUE 75440
75438: GO 75451
75440: POP
// bc_type := b_ext_computer ; 22 :
75441: LD_ADDR_OWVAR 42
75445: PUSH
75446: LD_INT 24
75448: ST_TO_ADDR
75449: GO 75699
75451: LD_INT 22
75453: DOUBLE
75454: EQUAL
75455: IFTRUE 75459
75457: GO 75470
75459: POP
// bc_type := b_ext_track ; 23 :
75460: LD_ADDR_OWVAR 42
75464: PUSH
75465: LD_INT 16
75467: ST_TO_ADDR
75468: GO 75699
75470: LD_INT 23
75472: DOUBLE
75473: EQUAL
75474: IFTRUE 75478
75476: GO 75489
75478: POP
// bc_type := b_ext_laser ; 24 :
75479: LD_ADDR_OWVAR 42
75483: PUSH
75484: LD_INT 25
75486: ST_TO_ADDR
75487: GO 75699
75489: LD_INT 24
75491: DOUBLE
75492: EQUAL
75493: IFTRUE 75497
75495: GO 75508
75497: POP
// bc_type := b_control_tower ; 25 :
75498: LD_ADDR_OWVAR 42
75502: PUSH
75503: LD_INT 36
75505: ST_TO_ADDR
75506: GO 75699
75508: LD_INT 25
75510: DOUBLE
75511: EQUAL
75512: IFTRUE 75516
75514: GO 75527
75516: POP
// bc_type := b_breastwork ; 26 :
75517: LD_ADDR_OWVAR 42
75521: PUSH
75522: LD_INT 31
75524: ST_TO_ADDR
75525: GO 75699
75527: LD_INT 26
75529: DOUBLE
75530: EQUAL
75531: IFTRUE 75535
75533: GO 75546
75535: POP
// bc_type := b_bunker ; 27 :
75536: LD_ADDR_OWVAR 42
75540: PUSH
75541: LD_INT 32
75543: ST_TO_ADDR
75544: GO 75699
75546: LD_INT 27
75548: DOUBLE
75549: EQUAL
75550: IFTRUE 75554
75552: GO 75565
75554: POP
// bc_type := b_turret ; 28 :
75555: LD_ADDR_OWVAR 42
75559: PUSH
75560: LD_INT 33
75562: ST_TO_ADDR
75563: GO 75699
75565: LD_INT 28
75567: DOUBLE
75568: EQUAL
75569: IFTRUE 75573
75571: GO 75584
75573: POP
// bc_type := b_armoury ; 29 :
75574: LD_ADDR_OWVAR 42
75578: PUSH
75579: LD_INT 4
75581: ST_TO_ADDR
75582: GO 75699
75584: LD_INT 29
75586: DOUBLE
75587: EQUAL
75588: IFTRUE 75592
75590: GO 75603
75592: POP
// bc_type := b_barracks ; 30 :
75593: LD_ADDR_OWVAR 42
75597: PUSH
75598: LD_INT 5
75600: ST_TO_ADDR
75601: GO 75699
75603: LD_INT 30
75605: DOUBLE
75606: EQUAL
75607: IFTRUE 75611
75609: GO 75622
75611: POP
// bc_type := b_solar_power ; 31 :
75612: LD_ADDR_OWVAR 42
75616: PUSH
75617: LD_INT 27
75619: ST_TO_ADDR
75620: GO 75699
75622: LD_INT 31
75624: DOUBLE
75625: EQUAL
75626: IFTRUE 75630
75628: GO 75641
75630: POP
// bc_type := b_oil_power ; 32 :
75631: LD_ADDR_OWVAR 42
75635: PUSH
75636: LD_INT 26
75638: ST_TO_ADDR
75639: GO 75699
75641: LD_INT 32
75643: DOUBLE
75644: EQUAL
75645: IFTRUE 75649
75647: GO 75660
75649: POP
// bc_type := b_siberite_power ; 33 :
75650: LD_ADDR_OWVAR 42
75654: PUSH
75655: LD_INT 28
75657: ST_TO_ADDR
75658: GO 75699
75660: LD_INT 33
75662: DOUBLE
75663: EQUAL
75664: IFTRUE 75668
75666: GO 75679
75668: POP
// bc_type := b_oil_mine ; 34 :
75669: LD_ADDR_OWVAR 42
75673: PUSH
75674: LD_INT 29
75676: ST_TO_ADDR
75677: GO 75699
75679: LD_INT 34
75681: DOUBLE
75682: EQUAL
75683: IFTRUE 75687
75685: GO 75698
75687: POP
// bc_type := b_siberite_mine ; end ;
75688: LD_ADDR_OWVAR 42
75692: PUSH
75693: LD_INT 30
75695: ST_TO_ADDR
75696: GO 75699
75698: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
75699: LD_ADDR_VAR 0 8
75703: PUSH
75704: LD_VAR 0 5
75708: PPUSH
75709: LD_VAR 0 6
75713: PPUSH
75714: LD_VAR 0 3
75718: PPUSH
75719: CALL_OW 47
75723: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
75724: LD_OWVAR 42
75728: PUSH
75729: LD_INT 32
75731: PUSH
75732: LD_INT 33
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: IN
75739: IFFALSE 75755
// PlaceWeaponTurret ( b , weapon ) ;
75741: LD_VAR 0 8
75745: PPUSH
75746: LD_VAR 0 4
75750: PPUSH
75751: CALL_OW 431
// end ;
75755: LD_VAR 0 7
75759: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
75760: LD_INT 0
75762: PPUSH
75763: PPUSH
75764: PPUSH
75765: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75766: LD_ADDR_VAR 0 4
75770: PUSH
75771: LD_INT 22
75773: PUSH
75774: LD_OWVAR 2
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 2
75785: PUSH
75786: LD_INT 30
75788: PUSH
75789: LD_INT 0
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 30
75798: PUSH
75799: LD_INT 1
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: LIST
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PPUSH
75815: CALL_OW 69
75819: ST_TO_ADDR
// if not tmp then
75820: LD_VAR 0 4
75824: NOT
75825: IFFALSE 75829
// exit ;
75827: GO 75888
// for i in tmp do
75829: LD_ADDR_VAR 0 2
75833: PUSH
75834: LD_VAR 0 4
75838: PUSH
75839: FOR_IN
75840: IFFALSE 75886
// for j = 1 to 3 do
75842: LD_ADDR_VAR 0 3
75846: PUSH
75847: DOUBLE
75848: LD_INT 1
75850: DEC
75851: ST_TO_ADDR
75852: LD_INT 3
75854: PUSH
75855: FOR_TO
75856: IFFALSE 75882
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
75858: LD_VAR 0 2
75862: PPUSH
75863: CALL_OW 274
75867: PPUSH
75868: LD_VAR 0 3
75872: PPUSH
75873: LD_INT 99999
75875: PPUSH
75876: CALL_OW 277
75880: GO 75855
75882: POP
75883: POP
75884: GO 75839
75886: POP
75887: POP
// end ;
75888: LD_VAR 0 1
75892: RET
// export function hHackSetLevel10 ; var i , j ; begin
75893: LD_INT 0
75895: PPUSH
75896: PPUSH
75897: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75898: LD_ADDR_VAR 0 2
75902: PUSH
75903: LD_INT 21
75905: PUSH
75906: LD_INT 1
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PPUSH
75913: CALL_OW 69
75917: PUSH
75918: FOR_IN
75919: IFFALSE 75971
// if IsSelected ( i ) then
75921: LD_VAR 0 2
75925: PPUSH
75926: CALL_OW 306
75930: IFFALSE 75969
// begin for j := 1 to 4 do
75932: LD_ADDR_VAR 0 3
75936: PUSH
75937: DOUBLE
75938: LD_INT 1
75940: DEC
75941: ST_TO_ADDR
75942: LD_INT 4
75944: PUSH
75945: FOR_TO
75946: IFFALSE 75967
// SetSkill ( i , j , 10 ) ;
75948: LD_VAR 0 2
75952: PPUSH
75953: LD_VAR 0 3
75957: PPUSH
75958: LD_INT 10
75960: PPUSH
75961: CALL_OW 237
75965: GO 75945
75967: POP
75968: POP
// end ;
75969: GO 75918
75971: POP
75972: POP
// end ;
75973: LD_VAR 0 1
75977: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
75978: LD_INT 0
75980: PPUSH
75981: PPUSH
75982: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
75983: LD_ADDR_VAR 0 2
75987: PUSH
75988: LD_INT 22
75990: PUSH
75991: LD_OWVAR 2
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: PUSH
76000: LD_INT 21
76002: PUSH
76003: LD_INT 1
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: PPUSH
76014: CALL_OW 69
76018: PUSH
76019: FOR_IN
76020: IFFALSE 76061
// begin for j := 1 to 4 do
76022: LD_ADDR_VAR 0 3
76026: PUSH
76027: DOUBLE
76028: LD_INT 1
76030: DEC
76031: ST_TO_ADDR
76032: LD_INT 4
76034: PUSH
76035: FOR_TO
76036: IFFALSE 76057
// SetSkill ( i , j , 10 ) ;
76038: LD_VAR 0 2
76042: PPUSH
76043: LD_VAR 0 3
76047: PPUSH
76048: LD_INT 10
76050: PPUSH
76051: CALL_OW 237
76055: GO 76035
76057: POP
76058: POP
// end ;
76059: GO 76019
76061: POP
76062: POP
// end ;
76063: LD_VAR 0 1
76067: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
76068: LD_INT 0
76070: PPUSH
// uc_side := your_side ;
76071: LD_ADDR_OWVAR 20
76075: PUSH
76076: LD_OWVAR 2
76080: ST_TO_ADDR
// uc_nation := nation ;
76081: LD_ADDR_OWVAR 21
76085: PUSH
76086: LD_VAR 0 1
76090: ST_TO_ADDR
// InitHc ;
76091: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
76095: LD_INT 0
76097: PPUSH
76098: LD_VAR 0 2
76102: PPUSH
76103: LD_VAR 0 3
76107: PPUSH
76108: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
76112: LD_VAR 0 4
76116: PPUSH
76117: LD_VAR 0 5
76121: PPUSH
76122: CALL_OW 428
76126: PUSH
76127: LD_INT 0
76129: EQUAL
76130: IFFALSE 76154
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
76132: CALL_OW 44
76136: PPUSH
76137: LD_VAR 0 4
76141: PPUSH
76142: LD_VAR 0 5
76146: PPUSH
76147: LD_INT 1
76149: PPUSH
76150: CALL_OW 48
// end ;
76154: LD_VAR 0 6
76158: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
76159: LD_INT 0
76161: PPUSH
76162: PPUSH
// uc_side := your_side ;
76163: LD_ADDR_OWVAR 20
76167: PUSH
76168: LD_OWVAR 2
76172: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
76173: LD_VAR 0 1
76177: PUSH
76178: LD_INT 1
76180: PUSH
76181: LD_INT 2
76183: PUSH
76184: LD_INT 3
76186: PUSH
76187: LD_INT 4
76189: PUSH
76190: LD_INT 5
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: IN
76200: IFFALSE 76212
// uc_nation := nation_american else
76202: LD_ADDR_OWVAR 21
76206: PUSH
76207: LD_INT 1
76209: ST_TO_ADDR
76210: GO 76255
// if chassis in [ 11 , 12 , 13 , 14 ] then
76212: LD_VAR 0 1
76216: PUSH
76217: LD_INT 11
76219: PUSH
76220: LD_INT 12
76222: PUSH
76223: LD_INT 13
76225: PUSH
76226: LD_INT 14
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: IN
76235: IFFALSE 76247
// uc_nation := nation_arabian else
76237: LD_ADDR_OWVAR 21
76241: PUSH
76242: LD_INT 2
76244: ST_TO_ADDR
76245: GO 76255
// uc_nation := nation_russian ;
76247: LD_ADDR_OWVAR 21
76251: PUSH
76252: LD_INT 3
76254: ST_TO_ADDR
// vc_chassis := chassis ;
76255: LD_ADDR_OWVAR 37
76259: PUSH
76260: LD_VAR 0 1
76264: ST_TO_ADDR
// vc_engine := engine ;
76265: LD_ADDR_OWVAR 39
76269: PUSH
76270: LD_VAR 0 2
76274: ST_TO_ADDR
// vc_control := control ;
76275: LD_ADDR_OWVAR 38
76279: PUSH
76280: LD_VAR 0 3
76284: ST_TO_ADDR
// vc_weapon := weapon ;
76285: LD_ADDR_OWVAR 40
76289: PUSH
76290: LD_VAR 0 4
76294: ST_TO_ADDR
// un := CreateVehicle ;
76295: LD_ADDR_VAR 0 8
76299: PUSH
76300: CALL_OW 45
76304: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
76305: LD_VAR 0 8
76309: PPUSH
76310: LD_INT 0
76312: PPUSH
76313: LD_INT 5
76315: PPUSH
76316: CALL_OW 12
76320: PPUSH
76321: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
76325: LD_VAR 0 8
76329: PPUSH
76330: LD_VAR 0 5
76334: PPUSH
76335: LD_VAR 0 6
76339: PPUSH
76340: LD_INT 1
76342: PPUSH
76343: CALL_OW 48
// end ;
76347: LD_VAR 0 7
76351: RET
// export hInvincible ; every 1 do
76352: GO 76354
76354: DISABLE
// hInvincible := [ ] ;
76355: LD_ADDR_EXP 103
76359: PUSH
76360: EMPTY
76361: ST_TO_ADDR
76362: END
// every 10 do var i ;
76363: GO 76365
76365: DISABLE
76366: LD_INT 0
76368: PPUSH
// begin enable ;
76369: ENABLE
// if not hInvincible then
76370: LD_EXP 103
76374: NOT
76375: IFFALSE 76379
// exit ;
76377: GO 76423
// for i in hInvincible do
76379: LD_ADDR_VAR 0 1
76383: PUSH
76384: LD_EXP 103
76388: PUSH
76389: FOR_IN
76390: IFFALSE 76421
// if GetLives ( i ) < 1000 then
76392: LD_VAR 0 1
76396: PPUSH
76397: CALL_OW 256
76401: PUSH
76402: LD_INT 1000
76404: LESS
76405: IFFALSE 76419
// SetLives ( i , 1000 ) ;
76407: LD_VAR 0 1
76411: PPUSH
76412: LD_INT 1000
76414: PPUSH
76415: CALL_OW 234
76419: GO 76389
76421: POP
76422: POP
// end ;
76423: PPOPN 1
76425: END
// export function hHackInvincible ; var i ; begin
76426: LD_INT 0
76428: PPUSH
76429: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
76430: LD_ADDR_VAR 0 2
76434: PUSH
76435: LD_INT 2
76437: PUSH
76438: LD_INT 21
76440: PUSH
76441: LD_INT 1
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: LD_INT 21
76450: PUSH
76451: LD_INT 2
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: LIST
76462: PPUSH
76463: CALL_OW 69
76467: PUSH
76468: FOR_IN
76469: IFFALSE 76530
// if IsSelected ( i ) then
76471: LD_VAR 0 2
76475: PPUSH
76476: CALL_OW 306
76480: IFFALSE 76528
// begin if i in hInvincible then
76482: LD_VAR 0 2
76486: PUSH
76487: LD_EXP 103
76491: IN
76492: IFFALSE 76512
// hInvincible := hInvincible diff i else
76494: LD_ADDR_EXP 103
76498: PUSH
76499: LD_EXP 103
76503: PUSH
76504: LD_VAR 0 2
76508: DIFF
76509: ST_TO_ADDR
76510: GO 76528
// hInvincible := hInvincible union i ;
76512: LD_ADDR_EXP 103
76516: PUSH
76517: LD_EXP 103
76521: PUSH
76522: LD_VAR 0 2
76526: UNION
76527: ST_TO_ADDR
// end ;
76528: GO 76468
76530: POP
76531: POP
// end ;
76532: LD_VAR 0 1
76536: RET
// export function hHackInvisible ; var i , j ; begin
76537: LD_INT 0
76539: PPUSH
76540: PPUSH
76541: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
76542: LD_ADDR_VAR 0 2
76546: PUSH
76547: LD_INT 21
76549: PUSH
76550: LD_INT 1
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PPUSH
76557: CALL_OW 69
76561: PUSH
76562: FOR_IN
76563: IFFALSE 76587
// if IsSelected ( i ) then
76565: LD_VAR 0 2
76569: PPUSH
76570: CALL_OW 306
76574: IFFALSE 76585
// ComForceInvisible ( i ) ;
76576: LD_VAR 0 2
76580: PPUSH
76581: CALL_OW 496
76585: GO 76562
76587: POP
76588: POP
// end ;
76589: LD_VAR 0 1
76593: RET
// export function hHackChangeYourSide ; begin
76594: LD_INT 0
76596: PPUSH
// if your_side = 8 then
76597: LD_OWVAR 2
76601: PUSH
76602: LD_INT 8
76604: EQUAL
76605: IFFALSE 76617
// your_side := 0 else
76607: LD_ADDR_OWVAR 2
76611: PUSH
76612: LD_INT 0
76614: ST_TO_ADDR
76615: GO 76631
// your_side := your_side + 1 ;
76617: LD_ADDR_OWVAR 2
76621: PUSH
76622: LD_OWVAR 2
76626: PUSH
76627: LD_INT 1
76629: PLUS
76630: ST_TO_ADDR
// end ;
76631: LD_VAR 0 1
76635: RET
// export function hHackChangeUnitSide ; var i , j ; begin
76636: LD_INT 0
76638: PPUSH
76639: PPUSH
76640: PPUSH
// for i in all_units do
76641: LD_ADDR_VAR 0 2
76645: PUSH
76646: LD_OWVAR 3
76650: PUSH
76651: FOR_IN
76652: IFFALSE 76730
// if IsSelected ( i ) then
76654: LD_VAR 0 2
76658: PPUSH
76659: CALL_OW 306
76663: IFFALSE 76728
// begin j := GetSide ( i ) ;
76665: LD_ADDR_VAR 0 3
76669: PUSH
76670: LD_VAR 0 2
76674: PPUSH
76675: CALL_OW 255
76679: ST_TO_ADDR
// if j = 8 then
76680: LD_VAR 0 3
76684: PUSH
76685: LD_INT 8
76687: EQUAL
76688: IFFALSE 76700
// j := 0 else
76690: LD_ADDR_VAR 0 3
76694: PUSH
76695: LD_INT 0
76697: ST_TO_ADDR
76698: GO 76714
// j := j + 1 ;
76700: LD_ADDR_VAR 0 3
76704: PUSH
76705: LD_VAR 0 3
76709: PUSH
76710: LD_INT 1
76712: PLUS
76713: ST_TO_ADDR
// SetSide ( i , j ) ;
76714: LD_VAR 0 2
76718: PPUSH
76719: LD_VAR 0 3
76723: PPUSH
76724: CALL_OW 235
// end ;
76728: GO 76651
76730: POP
76731: POP
// end ;
76732: LD_VAR 0 1
76736: RET
// export function hHackFog ; begin
76737: LD_INT 0
76739: PPUSH
// FogOff ( true ) ;
76740: LD_INT 1
76742: PPUSH
76743: CALL_OW 344
// end ;
76747: LD_VAR 0 1
76751: RET
// export function hHackTeleport ( unit , x , y ) ; begin
76752: LD_INT 0
76754: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
76755: LD_VAR 0 1
76759: PPUSH
76760: LD_VAR 0 2
76764: PPUSH
76765: LD_VAR 0 3
76769: PPUSH
76770: LD_INT 1
76772: PPUSH
76773: LD_INT 1
76775: PPUSH
76776: CALL_OW 483
// CenterOnXY ( x , y ) ;
76780: LD_VAR 0 2
76784: PPUSH
76785: LD_VAR 0 3
76789: PPUSH
76790: CALL_OW 84
// end ;
76794: LD_VAR 0 4
76798: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
76799: LD_INT 0
76801: PPUSH
76802: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
76803: LD_VAR 0 1
76807: NOT
76808: PUSH
76809: LD_VAR 0 2
76813: PPUSH
76814: LD_VAR 0 3
76818: PPUSH
76819: CALL_OW 488
76823: NOT
76824: OR
76825: PUSH
76826: LD_VAR 0 1
76830: PPUSH
76831: CALL_OW 266
76835: PUSH
76836: LD_INT 3
76838: NONEQUAL
76839: PUSH
76840: LD_VAR 0 1
76844: PPUSH
76845: CALL_OW 247
76849: PUSH
76850: LD_INT 1
76852: EQUAL
76853: NOT
76854: AND
76855: OR
76856: IFFALSE 76860
// exit ;
76858: GO 77009
// if GetType ( factory ) = unit_human then
76860: LD_VAR 0 1
76864: PPUSH
76865: CALL_OW 247
76869: PUSH
76870: LD_INT 1
76872: EQUAL
76873: IFFALSE 76890
// factory := IsInUnit ( factory ) ;
76875: LD_ADDR_VAR 0 1
76879: PUSH
76880: LD_VAR 0 1
76884: PPUSH
76885: CALL_OW 310
76889: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
76890: LD_VAR 0 1
76894: PPUSH
76895: CALL_OW 266
76899: PUSH
76900: LD_INT 3
76902: NONEQUAL
76903: IFFALSE 76907
// exit ;
76905: GO 77009
// if HexInfo ( x , y ) = factory then
76907: LD_VAR 0 2
76911: PPUSH
76912: LD_VAR 0 3
76916: PPUSH
76917: CALL_OW 428
76921: PUSH
76922: LD_VAR 0 1
76926: EQUAL
76927: IFFALSE 76954
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
76929: LD_ADDR_EXP 104
76933: PUSH
76934: LD_EXP 104
76938: PPUSH
76939: LD_VAR 0 1
76943: PPUSH
76944: LD_INT 0
76946: PPUSH
76947: CALL_OW 1
76951: ST_TO_ADDR
76952: GO 77005
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
76954: LD_ADDR_EXP 104
76958: PUSH
76959: LD_EXP 104
76963: PPUSH
76964: LD_VAR 0 1
76968: PPUSH
76969: LD_VAR 0 1
76973: PPUSH
76974: CALL_OW 255
76978: PUSH
76979: LD_VAR 0 1
76983: PUSH
76984: LD_VAR 0 2
76988: PUSH
76989: LD_VAR 0 3
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: PPUSH
77000: CALL_OW 1
77004: ST_TO_ADDR
// UpdateFactoryWaypoints ;
77005: CALL 77014 0 0
// end ;
77009: LD_VAR 0 4
77013: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
77014: LD_INT 0
77016: PPUSH
77017: PPUSH
77018: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
77019: LD_STRING resetFactoryWaypoint();
77021: PPUSH
77022: CALL_OW 559
// if factoryWaypoints then
77026: LD_EXP 104
77030: IFFALSE 77156
// begin list := PrepareArray ( factoryWaypoints ) ;
77032: LD_ADDR_VAR 0 3
77036: PUSH
77037: LD_EXP 104
77041: PPUSH
77042: CALL 61785 0 1
77046: ST_TO_ADDR
// for i := 1 to list do
77047: LD_ADDR_VAR 0 2
77051: PUSH
77052: DOUBLE
77053: LD_INT 1
77055: DEC
77056: ST_TO_ADDR
77057: LD_VAR 0 3
77061: PUSH
77062: FOR_TO
77063: IFFALSE 77154
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77065: LD_STRING setFactoryWaypointXY(
77067: PUSH
77068: LD_VAR 0 3
77072: PUSH
77073: LD_VAR 0 2
77077: ARRAY
77078: PUSH
77079: LD_INT 1
77081: ARRAY
77082: STR
77083: PUSH
77084: LD_STRING ,
77086: STR
77087: PUSH
77088: LD_VAR 0 3
77092: PUSH
77093: LD_VAR 0 2
77097: ARRAY
77098: PUSH
77099: LD_INT 2
77101: ARRAY
77102: STR
77103: PUSH
77104: LD_STRING ,
77106: STR
77107: PUSH
77108: LD_VAR 0 3
77112: PUSH
77113: LD_VAR 0 2
77117: ARRAY
77118: PUSH
77119: LD_INT 3
77121: ARRAY
77122: STR
77123: PUSH
77124: LD_STRING ,
77126: STR
77127: PUSH
77128: LD_VAR 0 3
77132: PUSH
77133: LD_VAR 0 2
77137: ARRAY
77138: PUSH
77139: LD_INT 4
77141: ARRAY
77142: STR
77143: PUSH
77144: LD_STRING )
77146: STR
77147: PPUSH
77148: CALL_OW 559
77152: GO 77062
77154: POP
77155: POP
// end ; end ;
77156: LD_VAR 0 1
77160: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
77161: LD_INT 0
77163: PPUSH
// if HexInfo ( x , y ) = warehouse then
77164: LD_VAR 0 2
77168: PPUSH
77169: LD_VAR 0 3
77173: PPUSH
77174: CALL_OW 428
77178: PUSH
77179: LD_VAR 0 1
77183: EQUAL
77184: IFFALSE 77211
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
77186: LD_ADDR_EXP 105
77190: PUSH
77191: LD_EXP 105
77195: PPUSH
77196: LD_VAR 0 1
77200: PPUSH
77201: LD_INT 0
77203: PPUSH
77204: CALL_OW 1
77208: ST_TO_ADDR
77209: GO 77262
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
77211: LD_ADDR_EXP 105
77215: PUSH
77216: LD_EXP 105
77220: PPUSH
77221: LD_VAR 0 1
77225: PPUSH
77226: LD_VAR 0 1
77230: PPUSH
77231: CALL_OW 255
77235: PUSH
77236: LD_VAR 0 1
77240: PUSH
77241: LD_VAR 0 2
77245: PUSH
77246: LD_VAR 0 3
77250: PUSH
77251: EMPTY
77252: LIST
77253: LIST
77254: LIST
77255: LIST
77256: PPUSH
77257: CALL_OW 1
77261: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
77262: CALL 77271 0 0
// end ;
77266: LD_VAR 0 4
77270: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
77271: LD_INT 0
77273: PPUSH
77274: PPUSH
77275: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
77276: LD_STRING resetWarehouseGatheringPoints();
77278: PPUSH
77279: CALL_OW 559
// if warehouseGatheringPoints then
77283: LD_EXP 105
77287: IFFALSE 77413
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
77289: LD_ADDR_VAR 0 3
77293: PUSH
77294: LD_EXP 105
77298: PPUSH
77299: CALL 61785 0 1
77303: ST_TO_ADDR
// for i := 1 to list do
77304: LD_ADDR_VAR 0 2
77308: PUSH
77309: DOUBLE
77310: LD_INT 1
77312: DEC
77313: ST_TO_ADDR
77314: LD_VAR 0 3
77318: PUSH
77319: FOR_TO
77320: IFFALSE 77411
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
77322: LD_STRING setWarehouseGatheringPointXY(
77324: PUSH
77325: LD_VAR 0 3
77329: PUSH
77330: LD_VAR 0 2
77334: ARRAY
77335: PUSH
77336: LD_INT 1
77338: ARRAY
77339: STR
77340: PUSH
77341: LD_STRING ,
77343: STR
77344: PUSH
77345: LD_VAR 0 3
77349: PUSH
77350: LD_VAR 0 2
77354: ARRAY
77355: PUSH
77356: LD_INT 2
77358: ARRAY
77359: STR
77360: PUSH
77361: LD_STRING ,
77363: STR
77364: PUSH
77365: LD_VAR 0 3
77369: PUSH
77370: LD_VAR 0 2
77374: ARRAY
77375: PUSH
77376: LD_INT 3
77378: ARRAY
77379: STR
77380: PUSH
77381: LD_STRING ,
77383: STR
77384: PUSH
77385: LD_VAR 0 3
77389: PUSH
77390: LD_VAR 0 2
77394: ARRAY
77395: PUSH
77396: LD_INT 4
77398: ARRAY
77399: STR
77400: PUSH
77401: LD_STRING )
77403: STR
77404: PPUSH
77405: CALL_OW 559
77409: GO 77319
77411: POP
77412: POP
// end ; end ;
77413: LD_VAR 0 1
77417: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
77418: LD_EXP 105
77422: IFFALSE 78107
77424: GO 77426
77426: DISABLE
77427: LD_INT 0
77429: PPUSH
77430: PPUSH
77431: PPUSH
77432: PPUSH
77433: PPUSH
77434: PPUSH
77435: PPUSH
77436: PPUSH
77437: PPUSH
// begin enable ;
77438: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
77439: LD_ADDR_VAR 0 3
77443: PUSH
77444: LD_EXP 105
77448: PPUSH
77449: CALL 61785 0 1
77453: ST_TO_ADDR
// if not list then
77454: LD_VAR 0 3
77458: NOT
77459: IFFALSE 77463
// exit ;
77461: GO 78107
// for i := 1 to list do
77463: LD_ADDR_VAR 0 1
77467: PUSH
77468: DOUBLE
77469: LD_INT 1
77471: DEC
77472: ST_TO_ADDR
77473: LD_VAR 0 3
77477: PUSH
77478: FOR_TO
77479: IFFALSE 78105
// begin depot := list [ i ] [ 2 ] ;
77481: LD_ADDR_VAR 0 8
77485: PUSH
77486: LD_VAR 0 3
77490: PUSH
77491: LD_VAR 0 1
77495: ARRAY
77496: PUSH
77497: LD_INT 2
77499: ARRAY
77500: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
77501: LD_ADDR_VAR 0 5
77505: PUSH
77506: LD_VAR 0 3
77510: PUSH
77511: LD_VAR 0 1
77515: ARRAY
77516: PUSH
77517: LD_INT 1
77519: ARRAY
77520: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
77521: LD_VAR 0 8
77525: PPUSH
77526: CALL_OW 301
77530: PUSH
77531: LD_VAR 0 5
77535: PUSH
77536: LD_VAR 0 8
77540: PPUSH
77541: CALL_OW 255
77545: NONEQUAL
77546: OR
77547: IFFALSE 77576
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
77549: LD_ADDR_EXP 105
77553: PUSH
77554: LD_EXP 105
77558: PPUSH
77559: LD_VAR 0 8
77563: PPUSH
77564: LD_INT 0
77566: PPUSH
77567: CALL_OW 1
77571: ST_TO_ADDR
// exit ;
77572: POP
77573: POP
77574: GO 78107
// end ; x := list [ i ] [ 3 ] ;
77576: LD_ADDR_VAR 0 6
77580: PUSH
77581: LD_VAR 0 3
77585: PUSH
77586: LD_VAR 0 1
77590: ARRAY
77591: PUSH
77592: LD_INT 3
77594: ARRAY
77595: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
77596: LD_ADDR_VAR 0 7
77600: PUSH
77601: LD_VAR 0 3
77605: PUSH
77606: LD_VAR 0 1
77610: ARRAY
77611: PUSH
77612: LD_INT 4
77614: ARRAY
77615: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
77616: LD_ADDR_VAR 0 9
77620: PUSH
77621: LD_VAR 0 6
77625: PPUSH
77626: LD_VAR 0 7
77630: PPUSH
77631: LD_INT 16
77633: PPUSH
77634: CALL 60373 0 3
77638: ST_TO_ADDR
// if not cratesNearbyPoint then
77639: LD_VAR 0 9
77643: NOT
77644: IFFALSE 77650
// exit ;
77646: POP
77647: POP
77648: GO 78107
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
77650: LD_ADDR_VAR 0 4
77654: PUSH
77655: LD_INT 22
77657: PUSH
77658: LD_VAR 0 5
77662: PUSH
77663: EMPTY
77664: LIST
77665: LIST
77666: PUSH
77667: LD_INT 3
77669: PUSH
77670: LD_INT 60
77672: PUSH
77673: EMPTY
77674: LIST
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: LD_INT 91
77682: PUSH
77683: LD_VAR 0 8
77687: PUSH
77688: LD_INT 6
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: LIST
77695: PUSH
77696: LD_INT 2
77698: PUSH
77699: LD_INT 25
77701: PUSH
77702: LD_INT 2
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: LD_INT 25
77711: PUSH
77712: LD_INT 16
77714: PUSH
77715: EMPTY
77716: LIST
77717: LIST
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: LIST
77723: PUSH
77724: EMPTY
77725: LIST
77726: LIST
77727: LIST
77728: LIST
77729: PPUSH
77730: CALL_OW 69
77734: PUSH
77735: LD_VAR 0 8
77739: PPUSH
77740: CALL_OW 313
77744: PPUSH
77745: LD_INT 3
77747: PUSH
77748: LD_INT 60
77750: PUSH
77751: EMPTY
77752: LIST
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PUSH
77758: LD_INT 2
77760: PUSH
77761: LD_INT 25
77763: PUSH
77764: LD_INT 2
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 25
77773: PUSH
77774: LD_INT 16
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: LIST
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PPUSH
77790: CALL_OW 72
77794: UNION
77795: ST_TO_ADDR
// if tmp then
77796: LD_VAR 0 4
77800: IFFALSE 77880
// begin tmp := ShrinkArray ( tmp , 3 ) ;
77802: LD_ADDR_VAR 0 4
77806: PUSH
77807: LD_VAR 0 4
77811: PPUSH
77812: LD_INT 3
77814: PPUSH
77815: CALL 58342 0 2
77819: ST_TO_ADDR
// for j in tmp do
77820: LD_ADDR_VAR 0 2
77824: PUSH
77825: LD_VAR 0 4
77829: PUSH
77830: FOR_IN
77831: IFFALSE 77874
// begin if IsInUnit ( j ) then
77833: LD_VAR 0 2
77837: PPUSH
77838: CALL_OW 310
77842: IFFALSE 77853
// ComExit ( j ) ;
77844: LD_VAR 0 2
77848: PPUSH
77849: CALL 58425 0 1
// AddComCollect ( j , x , y ) ;
77853: LD_VAR 0 2
77857: PPUSH
77858: LD_VAR 0 6
77862: PPUSH
77863: LD_VAR 0 7
77867: PPUSH
77868: CALL_OW 177
// end ;
77872: GO 77830
77874: POP
77875: POP
// exit ;
77876: POP
77877: POP
77878: GO 78107
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77880: LD_ADDR_VAR 0 4
77884: PUSH
77885: LD_INT 22
77887: PUSH
77888: LD_VAR 0 5
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: PUSH
77897: LD_INT 91
77899: PUSH
77900: LD_VAR 0 8
77904: PUSH
77905: LD_INT 8
77907: PUSH
77908: EMPTY
77909: LIST
77910: LIST
77911: LIST
77912: PUSH
77913: LD_INT 2
77915: PUSH
77916: LD_INT 34
77918: PUSH
77919: LD_INT 12
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PUSH
77926: LD_INT 34
77928: PUSH
77929: LD_INT 51
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 34
77938: PUSH
77939: LD_INT 32
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: LD_INT 34
77948: PUSH
77949: LD_INT 89
77951: PUSH
77952: EMPTY
77953: LIST
77954: LIST
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: LIST
77967: PPUSH
77968: CALL_OW 69
77972: ST_TO_ADDR
// if tmp then
77973: LD_VAR 0 4
77977: IFFALSE 78103
// begin for j in tmp do
77979: LD_ADDR_VAR 0 2
77983: PUSH
77984: LD_VAR 0 4
77988: PUSH
77989: FOR_IN
77990: IFFALSE 78101
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77992: LD_VAR 0 2
77996: PPUSH
77997: CALL_OW 262
78001: PUSH
78002: LD_INT 3
78004: EQUAL
78005: PUSH
78006: LD_VAR 0 2
78010: PPUSH
78011: CALL_OW 261
78015: PUSH
78016: LD_INT 20
78018: GREATER
78019: OR
78020: PUSH
78021: LD_VAR 0 2
78025: PPUSH
78026: CALL_OW 314
78030: NOT
78031: AND
78032: PUSH
78033: LD_VAR 0 2
78037: PPUSH
78038: CALL_OW 263
78042: PUSH
78043: LD_INT 1
78045: NONEQUAL
78046: PUSH
78047: LD_VAR 0 2
78051: PPUSH
78052: CALL_OW 311
78056: OR
78057: AND
78058: IFFALSE 78099
// begin ComCollect ( j , x , y ) ;
78060: LD_VAR 0 2
78064: PPUSH
78065: LD_VAR 0 6
78069: PPUSH
78070: LD_VAR 0 7
78074: PPUSH
78075: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
78079: LD_VAR 0 2
78083: PPUSH
78084: LD_VAR 0 8
78088: PPUSH
78089: CALL_OW 172
// exit ;
78093: POP
78094: POP
78095: POP
78096: POP
78097: GO 78107
// end ;
78099: GO 77989
78101: POP
78102: POP
// end ; end ;
78103: GO 77478
78105: POP
78106: POP
// end ; end_of_file
78107: PPOPN 9
78109: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78110: LD_VAR 0 1
78114: PUSH
78115: LD_INT 200
78117: DOUBLE
78118: GREATEREQUAL
78119: IFFALSE 78127
78121: LD_INT 299
78123: DOUBLE
78124: LESSEQUAL
78125: IFTRUE 78129
78127: GO 78161
78129: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78130: LD_VAR 0 1
78134: PPUSH
78135: LD_VAR 0 2
78139: PPUSH
78140: LD_VAR 0 3
78144: PPUSH
78145: LD_VAR 0 4
78149: PPUSH
78150: LD_VAR 0 5
78154: PPUSH
78155: CALL 78649 0 5
78159: GO 78238
78161: LD_INT 300
78163: DOUBLE
78164: GREATEREQUAL
78165: IFFALSE 78173
78167: LD_INT 399
78169: DOUBLE
78170: LESSEQUAL
78171: IFTRUE 78175
78173: GO 78237
78175: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78176: LD_VAR 0 1
78180: PPUSH
78181: LD_VAR 0 2
78185: PPUSH
78186: LD_VAR 0 3
78190: PPUSH
78191: LD_VAR 0 4
78195: PPUSH
78196: LD_VAR 0 5
78200: PPUSH
78201: LD_VAR 0 6
78205: PPUSH
78206: LD_VAR 0 7
78210: PPUSH
78211: LD_VAR 0 8
78215: PPUSH
78216: LD_VAR 0 9
78220: PPUSH
78221: LD_VAR 0 10
78225: PPUSH
78226: LD_VAR 0 11
78230: PPUSH
78231: CALL 74811 0 11
78235: GO 78238
78237: POP
// end ;
78238: PPOPN 11
78240: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78241: LD_VAR 0 1
78245: PPUSH
78246: LD_VAR 0 2
78250: PPUSH
78251: LD_VAR 0 3
78255: PPUSH
78256: LD_VAR 0 4
78260: PPUSH
78261: LD_VAR 0 5
78265: PPUSH
78266: CALL 78385 0 5
// end ; end_of_file
78270: PPOPN 5
78272: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78273: LD_INT 0
78275: PPUSH
78276: PPUSH
78277: PPUSH
78278: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78279: LD_VAR 0 1
78283: PPUSH
78284: CALL_OW 264
78288: PUSH
78289: LD_INT 91
78291: EQUAL
78292: IFFALSE 78364
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78294: LD_INT 68
78296: PPUSH
78297: LD_VAR 0 1
78301: PPUSH
78302: CALL_OW 255
78306: PPUSH
78307: CALL_OW 321
78311: PUSH
78312: LD_INT 2
78314: EQUAL
78315: IFFALSE 78327
// eff := 70 else
78317: LD_ADDR_VAR 0 4
78321: PUSH
78322: LD_INT 70
78324: ST_TO_ADDR
78325: GO 78335
// eff := 30 ;
78327: LD_ADDR_VAR 0 4
78331: PUSH
78332: LD_INT 30
78334: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78335: LD_VAR 0 1
78339: PPUSH
78340: CALL_OW 250
78344: PPUSH
78345: LD_VAR 0 1
78349: PPUSH
78350: CALL_OW 251
78354: PPUSH
78355: LD_VAR 0 4
78359: PPUSH
78360: CALL_OW 495
// end ; end ;
78364: LD_VAR 0 2
78368: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78369: LD_INT 0
78371: PPUSH
// end ;
78372: LD_VAR 0 4
78376: RET
// export function SOS_Command ( cmd ) ; begin
78377: LD_INT 0
78379: PPUSH
// end ;
78380: LD_VAR 0 2
78384: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
78385: LD_INT 0
78387: PPUSH
// end ;
78388: LD_VAR 0 6
78392: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
78393: LD_INT 0
78395: PPUSH
78396: PPUSH
// if not vehicle or not factory then
78397: LD_VAR 0 1
78401: NOT
78402: PUSH
78403: LD_VAR 0 2
78407: NOT
78408: OR
78409: IFFALSE 78413
// exit ;
78411: GO 78644
// if factoryWaypoints >= factory then
78413: LD_EXP 104
78417: PUSH
78418: LD_VAR 0 2
78422: GREATEREQUAL
78423: IFFALSE 78644
// if factoryWaypoints [ factory ] then
78425: LD_EXP 104
78429: PUSH
78430: LD_VAR 0 2
78434: ARRAY
78435: IFFALSE 78644
// begin if GetControl ( vehicle ) = control_manual then
78437: LD_VAR 0 1
78441: PPUSH
78442: CALL_OW 263
78446: PUSH
78447: LD_INT 1
78449: EQUAL
78450: IFFALSE 78531
// begin driver := IsDrivenBy ( vehicle ) ;
78452: LD_ADDR_VAR 0 4
78456: PUSH
78457: LD_VAR 0 1
78461: PPUSH
78462: CALL_OW 311
78466: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78467: LD_VAR 0 4
78471: PPUSH
78472: LD_EXP 104
78476: PUSH
78477: LD_VAR 0 2
78481: ARRAY
78482: PUSH
78483: LD_INT 3
78485: ARRAY
78486: PPUSH
78487: LD_EXP 104
78491: PUSH
78492: LD_VAR 0 2
78496: ARRAY
78497: PUSH
78498: LD_INT 4
78500: ARRAY
78501: PPUSH
78502: CALL_OW 171
// AddComExitVehicle ( driver ) ;
78506: LD_VAR 0 4
78510: PPUSH
78511: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
78515: LD_VAR 0 4
78519: PPUSH
78520: LD_VAR 0 2
78524: PPUSH
78525: CALL_OW 180
// end else
78529: GO 78644
// if GetControl ( vehicle ) = control_remote then
78531: LD_VAR 0 1
78535: PPUSH
78536: CALL_OW 263
78540: PUSH
78541: LD_INT 2
78543: EQUAL
78544: IFFALSE 78605
// begin wait ( 0 0$2 ) ;
78546: LD_INT 70
78548: PPUSH
78549: CALL_OW 67
// if Connect ( vehicle ) then
78553: LD_VAR 0 1
78557: PPUSH
78558: CALL 28633 0 1
78562: IFFALSE 78603
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78564: LD_VAR 0 1
78568: PPUSH
78569: LD_EXP 104
78573: PUSH
78574: LD_VAR 0 2
78578: ARRAY
78579: PUSH
78580: LD_INT 3
78582: ARRAY
78583: PPUSH
78584: LD_EXP 104
78588: PUSH
78589: LD_VAR 0 2
78593: ARRAY
78594: PUSH
78595: LD_INT 4
78597: ARRAY
78598: PPUSH
78599: CALL_OW 171
// end else
78603: GO 78644
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
78605: LD_VAR 0 1
78609: PPUSH
78610: LD_EXP 104
78614: PUSH
78615: LD_VAR 0 2
78619: ARRAY
78620: PUSH
78621: LD_INT 3
78623: ARRAY
78624: PPUSH
78625: LD_EXP 104
78629: PUSH
78630: LD_VAR 0 2
78634: ARRAY
78635: PUSH
78636: LD_INT 4
78638: ARRAY
78639: PPUSH
78640: CALL_OW 171
// end ; end ;
78644: LD_VAR 0 3
78648: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78649: LD_INT 0
78651: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78652: LD_VAR 0 1
78656: PUSH
78657: LD_INT 250
78659: EQUAL
78660: PUSH
78661: LD_VAR 0 2
78665: PPUSH
78666: CALL_OW 264
78670: PUSH
78671: LD_INT 81
78673: EQUAL
78674: AND
78675: IFFALSE 78696
// MinerPlaceMine ( unit , x , y ) ;
78677: LD_VAR 0 2
78681: PPUSH
78682: LD_VAR 0 4
78686: PPUSH
78687: LD_VAR 0 5
78691: PPUSH
78692: CALL 81520 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78696: LD_VAR 0 1
78700: PUSH
78701: LD_INT 251
78703: EQUAL
78704: PUSH
78705: LD_VAR 0 2
78709: PPUSH
78710: CALL_OW 264
78714: PUSH
78715: LD_INT 81
78717: EQUAL
78718: AND
78719: IFFALSE 78740
// MinerDetonateMine ( unit , x , y ) ;
78721: LD_VAR 0 2
78725: PPUSH
78726: LD_VAR 0 4
78730: PPUSH
78731: LD_VAR 0 5
78735: PPUSH
78736: CALL 81795 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78740: LD_VAR 0 1
78744: PUSH
78745: LD_INT 252
78747: EQUAL
78748: PUSH
78749: LD_VAR 0 2
78753: PPUSH
78754: CALL_OW 264
78758: PUSH
78759: LD_INT 81
78761: EQUAL
78762: AND
78763: IFFALSE 78784
// MinerCreateMinefield ( unit , x , y ) ;
78765: LD_VAR 0 2
78769: PPUSH
78770: LD_VAR 0 4
78774: PPUSH
78775: LD_VAR 0 5
78779: PPUSH
78780: CALL 82212 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78784: LD_VAR 0 1
78788: PUSH
78789: LD_INT 253
78791: EQUAL
78792: PUSH
78793: LD_VAR 0 2
78797: PPUSH
78798: CALL_OW 257
78802: PUSH
78803: LD_INT 5
78805: EQUAL
78806: AND
78807: IFFALSE 78828
// ComBinocular ( unit , x , y ) ;
78809: LD_VAR 0 2
78813: PPUSH
78814: LD_VAR 0 4
78818: PPUSH
78819: LD_VAR 0 5
78823: PPUSH
78824: CALL 82581 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78828: LD_VAR 0 1
78832: PUSH
78833: LD_INT 254
78835: EQUAL
78836: PUSH
78837: LD_VAR 0 2
78841: PPUSH
78842: CALL_OW 264
78846: PUSH
78847: LD_INT 99
78849: EQUAL
78850: AND
78851: PUSH
78852: LD_VAR 0 3
78856: PPUSH
78857: CALL_OW 263
78861: PUSH
78862: LD_INT 3
78864: EQUAL
78865: AND
78866: IFFALSE 78882
// HackDestroyVehicle ( unit , selectedUnit ) ;
78868: LD_VAR 0 2
78872: PPUSH
78873: LD_VAR 0 3
78877: PPUSH
78878: CALL 80884 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78882: LD_VAR 0 1
78886: PUSH
78887: LD_INT 255
78889: EQUAL
78890: PUSH
78891: LD_VAR 0 2
78895: PPUSH
78896: CALL_OW 264
78900: PUSH
78901: LD_INT 14
78903: PUSH
78904: LD_INT 53
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: IN
78911: AND
78912: PUSH
78913: LD_VAR 0 4
78917: PPUSH
78918: LD_VAR 0 5
78922: PPUSH
78923: CALL_OW 488
78927: AND
78928: IFFALSE 78952
// CutTreeXYR ( unit , x , y , 12 ) ;
78930: LD_VAR 0 2
78934: PPUSH
78935: LD_VAR 0 4
78939: PPUSH
78940: LD_VAR 0 5
78944: PPUSH
78945: LD_INT 12
78947: PPUSH
78948: CALL 79047 0 4
// if cmd = 256 then
78952: LD_VAR 0 1
78956: PUSH
78957: LD_INT 256
78959: EQUAL
78960: IFFALSE 78981
// SetFactoryWaypoint ( unit , x , y ) ;
78962: LD_VAR 0 2
78966: PPUSH
78967: LD_VAR 0 4
78971: PPUSH
78972: LD_VAR 0 5
78976: PPUSH
78977: CALL 76799 0 3
// if cmd = 257 then
78981: LD_VAR 0 1
78985: PUSH
78986: LD_INT 257
78988: EQUAL
78989: IFFALSE 79010
// SetWarehouseGatheringPoint ( unit , x , y ) ;
78991: LD_VAR 0 2
78995: PPUSH
78996: LD_VAR 0 4
79000: PPUSH
79001: LD_VAR 0 5
79005: PPUSH
79006: CALL 77161 0 3
// if cmd = 258 then
79010: LD_VAR 0 1
79014: PUSH
79015: LD_INT 258
79017: EQUAL
79018: IFFALSE 79042
// BurnTreeXYR ( unit , x , y , 8 ) ;
79020: LD_VAR 0 2
79024: PPUSH
79025: LD_VAR 0 4
79029: PPUSH
79030: LD_VAR 0 5
79034: PPUSH
79035: LD_INT 8
79037: PPUSH
79038: CALL 79441 0 4
// end ;
79042: LD_VAR 0 6
79046: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79047: LD_INT 0
79049: PPUSH
79050: PPUSH
79051: PPUSH
79052: PPUSH
79053: PPUSH
79054: PPUSH
79055: PPUSH
79056: PPUSH
79057: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
79058: LD_VAR 0 1
79062: PPUSH
79063: CALL_OW 302
79067: NOT
79068: PUSH
79069: LD_VAR 0 2
79073: PPUSH
79074: LD_VAR 0 3
79078: PPUSH
79079: CALL_OW 488
79083: NOT
79084: OR
79085: PUSH
79086: LD_VAR 0 4
79090: NOT
79091: OR
79092: IFFALSE 79096
// exit ;
79094: GO 79436
// list := [ ] ;
79096: LD_ADDR_VAR 0 13
79100: PUSH
79101: EMPTY
79102: ST_TO_ADDR
// if x - r < 0 then
79103: LD_VAR 0 2
79107: PUSH
79108: LD_VAR 0 4
79112: MINUS
79113: PUSH
79114: LD_INT 0
79116: LESS
79117: IFFALSE 79129
// min_x := 0 else
79119: LD_ADDR_VAR 0 7
79123: PUSH
79124: LD_INT 0
79126: ST_TO_ADDR
79127: GO 79145
// min_x := x - r ;
79129: LD_ADDR_VAR 0 7
79133: PUSH
79134: LD_VAR 0 2
79138: PUSH
79139: LD_VAR 0 4
79143: MINUS
79144: ST_TO_ADDR
// if y - r < 0 then
79145: LD_VAR 0 3
79149: PUSH
79150: LD_VAR 0 4
79154: MINUS
79155: PUSH
79156: LD_INT 0
79158: LESS
79159: IFFALSE 79171
// min_y := 0 else
79161: LD_ADDR_VAR 0 8
79165: PUSH
79166: LD_INT 0
79168: ST_TO_ADDR
79169: GO 79187
// min_y := y - r ;
79171: LD_ADDR_VAR 0 8
79175: PUSH
79176: LD_VAR 0 3
79180: PUSH
79181: LD_VAR 0 4
79185: MINUS
79186: ST_TO_ADDR
// max_x := x + r ;
79187: LD_ADDR_VAR 0 9
79191: PUSH
79192: LD_VAR 0 2
79196: PUSH
79197: LD_VAR 0 4
79201: PLUS
79202: ST_TO_ADDR
// max_y := y + r ;
79203: LD_ADDR_VAR 0 10
79207: PUSH
79208: LD_VAR 0 3
79212: PUSH
79213: LD_VAR 0 4
79217: PLUS
79218: ST_TO_ADDR
// for _x = min_x to max_x do
79219: LD_ADDR_VAR 0 11
79223: PUSH
79224: DOUBLE
79225: LD_VAR 0 7
79229: DEC
79230: ST_TO_ADDR
79231: LD_VAR 0 9
79235: PUSH
79236: FOR_TO
79237: IFFALSE 79354
// for _y = min_y to max_y do
79239: LD_ADDR_VAR 0 12
79243: PUSH
79244: DOUBLE
79245: LD_VAR 0 8
79249: DEC
79250: ST_TO_ADDR
79251: LD_VAR 0 10
79255: PUSH
79256: FOR_TO
79257: IFFALSE 79350
// begin if not ValidHex ( _x , _y ) then
79259: LD_VAR 0 11
79263: PPUSH
79264: LD_VAR 0 12
79268: PPUSH
79269: CALL_OW 488
79273: NOT
79274: IFFALSE 79278
// continue ;
79276: GO 79256
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79278: LD_VAR 0 11
79282: PPUSH
79283: LD_VAR 0 12
79287: PPUSH
79288: CALL_OW 351
79292: PUSH
79293: LD_VAR 0 11
79297: PPUSH
79298: LD_VAR 0 12
79302: PPUSH
79303: CALL_OW 554
79307: AND
79308: IFFALSE 79348
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79310: LD_ADDR_VAR 0 13
79314: PUSH
79315: LD_VAR 0 13
79319: PPUSH
79320: LD_VAR 0 13
79324: PUSH
79325: LD_INT 1
79327: PLUS
79328: PPUSH
79329: LD_VAR 0 11
79333: PUSH
79334: LD_VAR 0 12
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: PPUSH
79343: CALL_OW 2
79347: ST_TO_ADDR
// end ;
79348: GO 79256
79350: POP
79351: POP
79352: GO 79236
79354: POP
79355: POP
// if not list then
79356: LD_VAR 0 13
79360: NOT
79361: IFFALSE 79365
// exit ;
79363: GO 79436
// for i in list do
79365: LD_ADDR_VAR 0 6
79369: PUSH
79370: LD_VAR 0 13
79374: PUSH
79375: FOR_IN
79376: IFFALSE 79434
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79378: LD_VAR 0 1
79382: PPUSH
79383: LD_STRING M
79385: PUSH
79386: LD_VAR 0 6
79390: PUSH
79391: LD_INT 1
79393: ARRAY
79394: PUSH
79395: LD_VAR 0 6
79399: PUSH
79400: LD_INT 2
79402: ARRAY
79403: PUSH
79404: LD_INT 0
79406: PUSH
79407: LD_INT 0
79409: PUSH
79410: LD_INT 0
79412: PUSH
79413: LD_INT 0
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: LIST
79420: LIST
79421: LIST
79422: LIST
79423: LIST
79424: PUSH
79425: EMPTY
79426: LIST
79427: PPUSH
79428: CALL_OW 447
79432: GO 79375
79434: POP
79435: POP
// end ;
79436: LD_VAR 0 5
79440: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
79441: LD_INT 0
79443: PPUSH
79444: PPUSH
79445: PPUSH
79446: PPUSH
79447: PPUSH
79448: PPUSH
79449: PPUSH
79450: PPUSH
79451: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
79452: LD_VAR 0 1
79456: PPUSH
79457: CALL_OW 302
79461: NOT
79462: PUSH
79463: LD_VAR 0 2
79467: PPUSH
79468: LD_VAR 0 3
79472: PPUSH
79473: CALL_OW 488
79477: NOT
79478: OR
79479: PUSH
79480: LD_VAR 0 4
79484: NOT
79485: OR
79486: IFFALSE 79490
// exit ;
79488: GO 79838
// list := [ ] ;
79490: LD_ADDR_VAR 0 13
79494: PUSH
79495: EMPTY
79496: ST_TO_ADDR
// if x - r < 0 then
79497: LD_VAR 0 2
79501: PUSH
79502: LD_VAR 0 4
79506: MINUS
79507: PUSH
79508: LD_INT 0
79510: LESS
79511: IFFALSE 79523
// min_x := 0 else
79513: LD_ADDR_VAR 0 7
79517: PUSH
79518: LD_INT 0
79520: ST_TO_ADDR
79521: GO 79539
// min_x := x - r ;
79523: LD_ADDR_VAR 0 7
79527: PUSH
79528: LD_VAR 0 2
79532: PUSH
79533: LD_VAR 0 4
79537: MINUS
79538: ST_TO_ADDR
// if y - r < 0 then
79539: LD_VAR 0 3
79543: PUSH
79544: LD_VAR 0 4
79548: MINUS
79549: PUSH
79550: LD_INT 0
79552: LESS
79553: IFFALSE 79565
// min_y := 0 else
79555: LD_ADDR_VAR 0 8
79559: PUSH
79560: LD_INT 0
79562: ST_TO_ADDR
79563: GO 79581
// min_y := y - r ;
79565: LD_ADDR_VAR 0 8
79569: PUSH
79570: LD_VAR 0 3
79574: PUSH
79575: LD_VAR 0 4
79579: MINUS
79580: ST_TO_ADDR
// max_x := x + r ;
79581: LD_ADDR_VAR 0 9
79585: PUSH
79586: LD_VAR 0 2
79590: PUSH
79591: LD_VAR 0 4
79595: PLUS
79596: ST_TO_ADDR
// max_y := y + r ;
79597: LD_ADDR_VAR 0 10
79601: PUSH
79602: LD_VAR 0 3
79606: PUSH
79607: LD_VAR 0 4
79611: PLUS
79612: ST_TO_ADDR
// for _x = min_x to max_x do
79613: LD_ADDR_VAR 0 11
79617: PUSH
79618: DOUBLE
79619: LD_VAR 0 7
79623: DEC
79624: ST_TO_ADDR
79625: LD_VAR 0 9
79629: PUSH
79630: FOR_TO
79631: IFFALSE 79748
// for _y = min_y to max_y do
79633: LD_ADDR_VAR 0 12
79637: PUSH
79638: DOUBLE
79639: LD_VAR 0 8
79643: DEC
79644: ST_TO_ADDR
79645: LD_VAR 0 10
79649: PUSH
79650: FOR_TO
79651: IFFALSE 79744
// begin if not ValidHex ( _x , _y ) then
79653: LD_VAR 0 11
79657: PPUSH
79658: LD_VAR 0 12
79662: PPUSH
79663: CALL_OW 488
79667: NOT
79668: IFFALSE 79672
// continue ;
79670: GO 79650
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79672: LD_VAR 0 11
79676: PPUSH
79677: LD_VAR 0 12
79681: PPUSH
79682: CALL_OW 351
79686: PUSH
79687: LD_VAR 0 11
79691: PPUSH
79692: LD_VAR 0 12
79696: PPUSH
79697: CALL_OW 554
79701: AND
79702: IFFALSE 79742
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79704: LD_ADDR_VAR 0 13
79708: PUSH
79709: LD_VAR 0 13
79713: PPUSH
79714: LD_VAR 0 13
79718: PUSH
79719: LD_INT 1
79721: PLUS
79722: PPUSH
79723: LD_VAR 0 11
79727: PUSH
79728: LD_VAR 0 12
79732: PUSH
79733: EMPTY
79734: LIST
79735: LIST
79736: PPUSH
79737: CALL_OW 2
79741: ST_TO_ADDR
// end ;
79742: GO 79650
79744: POP
79745: POP
79746: GO 79630
79748: POP
79749: POP
// if not list then
79750: LD_VAR 0 13
79754: NOT
79755: IFFALSE 79759
// exit ;
79757: GO 79838
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
79759: LD_ADDR_VAR 0 13
79763: PUSH
79764: LD_VAR 0 1
79768: PPUSH
79769: LD_VAR 0 13
79773: PPUSH
79774: LD_INT 1
79776: PPUSH
79777: LD_INT 1
79779: PPUSH
79780: CALL 25775 0 4
79784: ST_TO_ADDR
// ComStop ( flame ) ;
79785: LD_VAR 0 1
79789: PPUSH
79790: CALL_OW 141
// for i in list do
79794: LD_ADDR_VAR 0 6
79798: PUSH
79799: LD_VAR 0 13
79803: PUSH
79804: FOR_IN
79805: IFFALSE 79836
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
79807: LD_VAR 0 1
79811: PPUSH
79812: LD_VAR 0 6
79816: PUSH
79817: LD_INT 1
79819: ARRAY
79820: PPUSH
79821: LD_VAR 0 6
79825: PUSH
79826: LD_INT 2
79828: ARRAY
79829: PPUSH
79830: CALL_OW 176
79834: GO 79804
79836: POP
79837: POP
// end ;
79838: LD_VAR 0 5
79842: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79843: LD_EXP 107
79847: NOT
79848: IFFALSE 79898
79850: GO 79852
79852: DISABLE
// begin initHack := true ;
79853: LD_ADDR_EXP 107
79857: PUSH
79858: LD_INT 1
79860: ST_TO_ADDR
// hackTanks := [ ] ;
79861: LD_ADDR_EXP 108
79865: PUSH
79866: EMPTY
79867: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79868: LD_ADDR_EXP 109
79872: PUSH
79873: EMPTY
79874: ST_TO_ADDR
// hackLimit := 3 ;
79875: LD_ADDR_EXP 110
79879: PUSH
79880: LD_INT 3
79882: ST_TO_ADDR
// hackDist := 12 ;
79883: LD_ADDR_EXP 111
79887: PUSH
79888: LD_INT 12
79890: ST_TO_ADDR
// hackCounter := [ ] ;
79891: LD_ADDR_EXP 112
79895: PUSH
79896: EMPTY
79897: ST_TO_ADDR
// end ;
79898: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79899: LD_EXP 107
79903: PUSH
79904: LD_INT 34
79906: PUSH
79907: LD_INT 99
79909: PUSH
79910: EMPTY
79911: LIST
79912: LIST
79913: PPUSH
79914: CALL_OW 69
79918: AND
79919: IFFALSE 80172
79921: GO 79923
79923: DISABLE
79924: LD_INT 0
79926: PPUSH
79927: PPUSH
// begin enable ;
79928: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79929: LD_ADDR_VAR 0 1
79933: PUSH
79934: LD_INT 34
79936: PUSH
79937: LD_INT 99
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PPUSH
79944: CALL_OW 69
79948: PUSH
79949: FOR_IN
79950: IFFALSE 80170
// begin if not i in hackTanks then
79952: LD_VAR 0 1
79956: PUSH
79957: LD_EXP 108
79961: IN
79962: NOT
79963: IFFALSE 80046
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79965: LD_ADDR_EXP 108
79969: PUSH
79970: LD_EXP 108
79974: PPUSH
79975: LD_EXP 108
79979: PUSH
79980: LD_INT 1
79982: PLUS
79983: PPUSH
79984: LD_VAR 0 1
79988: PPUSH
79989: CALL_OW 1
79993: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79994: LD_ADDR_EXP 109
79998: PUSH
79999: LD_EXP 109
80003: PPUSH
80004: LD_EXP 109
80008: PUSH
80009: LD_INT 1
80011: PLUS
80012: PPUSH
80013: EMPTY
80014: PPUSH
80015: CALL_OW 1
80019: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
80020: LD_ADDR_EXP 112
80024: PUSH
80025: LD_EXP 112
80029: PPUSH
80030: LD_EXP 112
80034: PUSH
80035: LD_INT 1
80037: PLUS
80038: PPUSH
80039: EMPTY
80040: PPUSH
80041: CALL_OW 1
80045: ST_TO_ADDR
// end ; if not IsOk ( i ) then
80046: LD_VAR 0 1
80050: PPUSH
80051: CALL_OW 302
80055: NOT
80056: IFFALSE 80069
// begin HackUnlinkAll ( i ) ;
80058: LD_VAR 0 1
80062: PPUSH
80063: CALL 80175 0 1
// continue ;
80067: GO 79949
// end ; HackCheckCapturedStatus ( i ) ;
80069: LD_VAR 0 1
80073: PPUSH
80074: CALL 80618 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
80078: LD_ADDR_VAR 0 2
80082: PUSH
80083: LD_INT 81
80085: PUSH
80086: LD_VAR 0 1
80090: PPUSH
80091: CALL_OW 255
80095: PUSH
80096: EMPTY
80097: LIST
80098: LIST
80099: PUSH
80100: LD_INT 33
80102: PUSH
80103: LD_INT 3
80105: PUSH
80106: EMPTY
80107: LIST
80108: LIST
80109: PUSH
80110: LD_INT 91
80112: PUSH
80113: LD_VAR 0 1
80117: PUSH
80118: LD_EXP 111
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: LIST
80127: PUSH
80128: LD_INT 50
80130: PUSH
80131: EMPTY
80132: LIST
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: LIST
80138: LIST
80139: PPUSH
80140: CALL_OW 69
80144: ST_TO_ADDR
// if not tmp then
80145: LD_VAR 0 2
80149: NOT
80150: IFFALSE 80154
// continue ;
80152: GO 79949
// HackLink ( i , tmp ) ;
80154: LD_VAR 0 1
80158: PPUSH
80159: LD_VAR 0 2
80163: PPUSH
80164: CALL 80311 0 2
// end ;
80168: GO 79949
80170: POP
80171: POP
// end ;
80172: PPOPN 2
80174: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
80175: LD_INT 0
80177: PPUSH
80178: PPUSH
80179: PPUSH
// if not hack in hackTanks then
80180: LD_VAR 0 1
80184: PUSH
80185: LD_EXP 108
80189: IN
80190: NOT
80191: IFFALSE 80195
// exit ;
80193: GO 80306
// index := GetElementIndex ( hackTanks , hack ) ;
80195: LD_ADDR_VAR 0 4
80199: PUSH
80200: LD_EXP 108
80204: PPUSH
80205: LD_VAR 0 1
80209: PPUSH
80210: CALL 25072 0 2
80214: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80215: LD_EXP 109
80219: PUSH
80220: LD_VAR 0 4
80224: ARRAY
80225: IFFALSE 80306
// begin for i in hackTanksCaptured [ index ] do
80227: LD_ADDR_VAR 0 3
80231: PUSH
80232: LD_EXP 109
80236: PUSH
80237: LD_VAR 0 4
80241: ARRAY
80242: PUSH
80243: FOR_IN
80244: IFFALSE 80270
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80246: LD_VAR 0 3
80250: PUSH
80251: LD_INT 1
80253: ARRAY
80254: PPUSH
80255: LD_VAR 0 3
80259: PUSH
80260: LD_INT 2
80262: ARRAY
80263: PPUSH
80264: CALL_OW 235
80268: GO 80243
80270: POP
80271: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80272: LD_ADDR_EXP 109
80276: PUSH
80277: LD_EXP 109
80281: PPUSH
80282: LD_VAR 0 4
80286: PPUSH
80287: EMPTY
80288: PPUSH
80289: CALL_OW 1
80293: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80294: LD_VAR 0 1
80298: PPUSH
80299: LD_INT 0
80301: PPUSH
80302: CALL_OW 505
// end ; end ;
80306: LD_VAR 0 2
80310: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80311: LD_INT 0
80313: PPUSH
80314: PPUSH
80315: PPUSH
// if not hack in hackTanks or not vehicles then
80316: LD_VAR 0 1
80320: PUSH
80321: LD_EXP 108
80325: IN
80326: NOT
80327: PUSH
80328: LD_VAR 0 2
80332: NOT
80333: OR
80334: IFFALSE 80338
// exit ;
80336: GO 80613
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80338: LD_ADDR_VAR 0 2
80342: PUSH
80343: LD_VAR 0 1
80347: PPUSH
80348: LD_VAR 0 2
80352: PPUSH
80353: LD_INT 1
80355: PPUSH
80356: LD_INT 1
80358: PPUSH
80359: CALL 25722 0 4
80363: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80364: LD_ADDR_VAR 0 5
80368: PUSH
80369: LD_EXP 108
80373: PPUSH
80374: LD_VAR 0 1
80378: PPUSH
80379: CALL 25072 0 2
80383: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80384: LD_EXP 109
80388: PUSH
80389: LD_VAR 0 5
80393: ARRAY
80394: PUSH
80395: LD_EXP 110
80399: LESS
80400: IFFALSE 80589
// begin for i := 1 to vehicles do
80402: LD_ADDR_VAR 0 4
80406: PUSH
80407: DOUBLE
80408: LD_INT 1
80410: DEC
80411: ST_TO_ADDR
80412: LD_VAR 0 2
80416: PUSH
80417: FOR_TO
80418: IFFALSE 80587
// begin if hackTanksCaptured [ index ] = hackLimit then
80420: LD_EXP 109
80424: PUSH
80425: LD_VAR 0 5
80429: ARRAY
80430: PUSH
80431: LD_EXP 110
80435: EQUAL
80436: IFFALSE 80440
// break ;
80438: GO 80587
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80440: LD_ADDR_EXP 112
80444: PUSH
80445: LD_EXP 112
80449: PPUSH
80450: LD_VAR 0 5
80454: PPUSH
80455: LD_EXP 112
80459: PUSH
80460: LD_VAR 0 5
80464: ARRAY
80465: PUSH
80466: LD_INT 1
80468: PLUS
80469: PPUSH
80470: CALL_OW 1
80474: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80475: LD_ADDR_EXP 109
80479: PUSH
80480: LD_EXP 109
80484: PPUSH
80485: LD_VAR 0 5
80489: PUSH
80490: LD_EXP 109
80494: PUSH
80495: LD_VAR 0 5
80499: ARRAY
80500: PUSH
80501: LD_INT 1
80503: PLUS
80504: PUSH
80505: EMPTY
80506: LIST
80507: LIST
80508: PPUSH
80509: LD_VAR 0 2
80513: PUSH
80514: LD_VAR 0 4
80518: ARRAY
80519: PUSH
80520: LD_VAR 0 2
80524: PUSH
80525: LD_VAR 0 4
80529: ARRAY
80530: PPUSH
80531: CALL_OW 255
80535: PUSH
80536: EMPTY
80537: LIST
80538: LIST
80539: PPUSH
80540: CALL 25287 0 3
80544: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80545: LD_VAR 0 2
80549: PUSH
80550: LD_VAR 0 4
80554: ARRAY
80555: PPUSH
80556: LD_VAR 0 1
80560: PPUSH
80561: CALL_OW 255
80565: PPUSH
80566: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80570: LD_VAR 0 2
80574: PUSH
80575: LD_VAR 0 4
80579: ARRAY
80580: PPUSH
80581: CALL_OW 141
// end ;
80585: GO 80417
80587: POP
80588: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80589: LD_VAR 0 1
80593: PPUSH
80594: LD_EXP 109
80598: PUSH
80599: LD_VAR 0 5
80603: ARRAY
80604: PUSH
80605: LD_INT 0
80607: PLUS
80608: PPUSH
80609: CALL_OW 505
// end ;
80613: LD_VAR 0 3
80617: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80618: LD_INT 0
80620: PPUSH
80621: PPUSH
80622: PPUSH
80623: PPUSH
// if not hack in hackTanks then
80624: LD_VAR 0 1
80628: PUSH
80629: LD_EXP 108
80633: IN
80634: NOT
80635: IFFALSE 80639
// exit ;
80637: GO 80879
// index := GetElementIndex ( hackTanks , hack ) ;
80639: LD_ADDR_VAR 0 4
80643: PUSH
80644: LD_EXP 108
80648: PPUSH
80649: LD_VAR 0 1
80653: PPUSH
80654: CALL 25072 0 2
80658: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80659: LD_ADDR_VAR 0 3
80663: PUSH
80664: DOUBLE
80665: LD_EXP 109
80669: PUSH
80670: LD_VAR 0 4
80674: ARRAY
80675: INC
80676: ST_TO_ADDR
80677: LD_INT 1
80679: PUSH
80680: FOR_DOWNTO
80681: IFFALSE 80853
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80683: LD_ADDR_VAR 0 5
80687: PUSH
80688: LD_EXP 109
80692: PUSH
80693: LD_VAR 0 4
80697: ARRAY
80698: PUSH
80699: LD_VAR 0 3
80703: ARRAY
80704: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80705: LD_VAR 0 5
80709: PUSH
80710: LD_INT 1
80712: ARRAY
80713: PPUSH
80714: CALL_OW 302
80718: NOT
80719: PUSH
80720: LD_VAR 0 5
80724: PUSH
80725: LD_INT 1
80727: ARRAY
80728: PPUSH
80729: CALL_OW 255
80733: PUSH
80734: LD_VAR 0 1
80738: PPUSH
80739: CALL_OW 255
80743: NONEQUAL
80744: OR
80745: IFFALSE 80851
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80747: LD_VAR 0 5
80751: PUSH
80752: LD_INT 1
80754: ARRAY
80755: PPUSH
80756: CALL_OW 305
80760: PUSH
80761: LD_VAR 0 5
80765: PUSH
80766: LD_INT 1
80768: ARRAY
80769: PPUSH
80770: CALL_OW 255
80774: PUSH
80775: LD_VAR 0 1
80779: PPUSH
80780: CALL_OW 255
80784: EQUAL
80785: AND
80786: IFFALSE 80810
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80788: LD_VAR 0 5
80792: PUSH
80793: LD_INT 1
80795: ARRAY
80796: PPUSH
80797: LD_VAR 0 5
80801: PUSH
80802: LD_INT 2
80804: ARRAY
80805: PPUSH
80806: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80810: LD_ADDR_EXP 109
80814: PUSH
80815: LD_EXP 109
80819: PPUSH
80820: LD_VAR 0 4
80824: PPUSH
80825: LD_EXP 109
80829: PUSH
80830: LD_VAR 0 4
80834: ARRAY
80835: PPUSH
80836: LD_VAR 0 3
80840: PPUSH
80841: CALL_OW 3
80845: PPUSH
80846: CALL_OW 1
80850: ST_TO_ADDR
// end ; end ;
80851: GO 80680
80853: POP
80854: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80855: LD_VAR 0 1
80859: PPUSH
80860: LD_EXP 109
80864: PUSH
80865: LD_VAR 0 4
80869: ARRAY
80870: PUSH
80871: LD_INT 0
80873: PLUS
80874: PPUSH
80875: CALL_OW 505
// end ;
80879: LD_VAR 0 2
80883: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80884: LD_INT 0
80886: PPUSH
80887: PPUSH
80888: PPUSH
80889: PPUSH
// if not hack in hackTanks then
80890: LD_VAR 0 1
80894: PUSH
80895: LD_EXP 108
80899: IN
80900: NOT
80901: IFFALSE 80905
// exit ;
80903: GO 80990
// index := GetElementIndex ( hackTanks , hack ) ;
80905: LD_ADDR_VAR 0 5
80909: PUSH
80910: LD_EXP 108
80914: PPUSH
80915: LD_VAR 0 1
80919: PPUSH
80920: CALL 25072 0 2
80924: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80925: LD_ADDR_VAR 0 4
80929: PUSH
80930: DOUBLE
80931: LD_INT 1
80933: DEC
80934: ST_TO_ADDR
80935: LD_EXP 109
80939: PUSH
80940: LD_VAR 0 5
80944: ARRAY
80945: PUSH
80946: FOR_TO
80947: IFFALSE 80988
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80949: LD_EXP 109
80953: PUSH
80954: LD_VAR 0 5
80958: ARRAY
80959: PUSH
80960: LD_VAR 0 4
80964: ARRAY
80965: PUSH
80966: LD_INT 1
80968: ARRAY
80969: PUSH
80970: LD_VAR 0 2
80974: EQUAL
80975: IFFALSE 80986
// KillUnit ( vehicle ) ;
80977: LD_VAR 0 2
80981: PPUSH
80982: CALL_OW 66
80986: GO 80946
80988: POP
80989: POP
// end ;
80990: LD_VAR 0 3
80994: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80995: LD_EXP 113
80999: NOT
81000: IFFALSE 81035
81002: GO 81004
81004: DISABLE
// begin initMiner := true ;
81005: LD_ADDR_EXP 113
81009: PUSH
81010: LD_INT 1
81012: ST_TO_ADDR
// minersList := [ ] ;
81013: LD_ADDR_EXP 114
81017: PUSH
81018: EMPTY
81019: ST_TO_ADDR
// minerMinesList := [ ] ;
81020: LD_ADDR_EXP 115
81024: PUSH
81025: EMPTY
81026: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
81027: LD_ADDR_EXP 116
81031: PUSH
81032: LD_INT 5
81034: ST_TO_ADDR
// end ;
81035: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
81036: LD_EXP 113
81040: PUSH
81041: LD_INT 34
81043: PUSH
81044: LD_INT 81
81046: PUSH
81047: EMPTY
81048: LIST
81049: LIST
81050: PPUSH
81051: CALL_OW 69
81055: AND
81056: IFFALSE 81517
81058: GO 81060
81060: DISABLE
81061: LD_INT 0
81063: PPUSH
81064: PPUSH
81065: PPUSH
81066: PPUSH
// begin enable ;
81067: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
81068: LD_ADDR_VAR 0 1
81072: PUSH
81073: LD_INT 34
81075: PUSH
81076: LD_INT 81
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: PPUSH
81083: CALL_OW 69
81087: PUSH
81088: FOR_IN
81089: IFFALSE 81161
// begin if not i in minersList then
81091: LD_VAR 0 1
81095: PUSH
81096: LD_EXP 114
81100: IN
81101: NOT
81102: IFFALSE 81159
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
81104: LD_ADDR_EXP 114
81108: PUSH
81109: LD_EXP 114
81113: PPUSH
81114: LD_EXP 114
81118: PUSH
81119: LD_INT 1
81121: PLUS
81122: PPUSH
81123: LD_VAR 0 1
81127: PPUSH
81128: CALL_OW 1
81132: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81133: LD_ADDR_EXP 115
81137: PUSH
81138: LD_EXP 115
81142: PPUSH
81143: LD_EXP 115
81147: PUSH
81148: LD_INT 1
81150: PLUS
81151: PPUSH
81152: EMPTY
81153: PPUSH
81154: CALL_OW 1
81158: ST_TO_ADDR
// end end ;
81159: GO 81088
81161: POP
81162: POP
// for i := minerMinesList downto 1 do
81163: LD_ADDR_VAR 0 1
81167: PUSH
81168: DOUBLE
81169: LD_EXP 115
81173: INC
81174: ST_TO_ADDR
81175: LD_INT 1
81177: PUSH
81178: FOR_DOWNTO
81179: IFFALSE 81515
// begin if IsLive ( minersList [ i ] ) then
81181: LD_EXP 114
81185: PUSH
81186: LD_VAR 0 1
81190: ARRAY
81191: PPUSH
81192: CALL_OW 300
81196: IFFALSE 81224
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
81198: LD_EXP 114
81202: PUSH
81203: LD_VAR 0 1
81207: ARRAY
81208: PPUSH
81209: LD_EXP 115
81213: PUSH
81214: LD_VAR 0 1
81218: ARRAY
81219: PPUSH
81220: CALL_OW 505
// if not minerMinesList [ i ] then
81224: LD_EXP 115
81228: PUSH
81229: LD_VAR 0 1
81233: ARRAY
81234: NOT
81235: IFFALSE 81239
// continue ;
81237: GO 81178
// for j := minerMinesList [ i ] downto 1 do
81239: LD_ADDR_VAR 0 2
81243: PUSH
81244: DOUBLE
81245: LD_EXP 115
81249: PUSH
81250: LD_VAR 0 1
81254: ARRAY
81255: INC
81256: ST_TO_ADDR
81257: LD_INT 1
81259: PUSH
81260: FOR_DOWNTO
81261: IFFALSE 81511
// begin side := GetSide ( minersList [ i ] ) ;
81263: LD_ADDR_VAR 0 3
81267: PUSH
81268: LD_EXP 114
81272: PUSH
81273: LD_VAR 0 1
81277: ARRAY
81278: PPUSH
81279: CALL_OW 255
81283: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81284: LD_ADDR_VAR 0 4
81288: PUSH
81289: LD_EXP 115
81293: PUSH
81294: LD_VAR 0 1
81298: ARRAY
81299: PUSH
81300: LD_VAR 0 2
81304: ARRAY
81305: PUSH
81306: LD_INT 1
81308: ARRAY
81309: PPUSH
81310: LD_EXP 115
81314: PUSH
81315: LD_VAR 0 1
81319: ARRAY
81320: PUSH
81321: LD_VAR 0 2
81325: ARRAY
81326: PUSH
81327: LD_INT 2
81329: ARRAY
81330: PPUSH
81331: CALL_OW 428
81335: ST_TO_ADDR
// if not tmp then
81336: LD_VAR 0 4
81340: NOT
81341: IFFALSE 81345
// continue ;
81343: GO 81260
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81345: LD_VAR 0 4
81349: PUSH
81350: LD_INT 81
81352: PUSH
81353: LD_VAR 0 3
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: PPUSH
81362: CALL_OW 69
81366: IN
81367: PUSH
81368: LD_EXP 115
81372: PUSH
81373: LD_VAR 0 1
81377: ARRAY
81378: PUSH
81379: LD_VAR 0 2
81383: ARRAY
81384: PUSH
81385: LD_INT 1
81387: ARRAY
81388: PPUSH
81389: LD_EXP 115
81393: PUSH
81394: LD_VAR 0 1
81398: ARRAY
81399: PUSH
81400: LD_VAR 0 2
81404: ARRAY
81405: PUSH
81406: LD_INT 2
81408: ARRAY
81409: PPUSH
81410: CALL_OW 458
81414: AND
81415: IFFALSE 81509
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81417: LD_EXP 115
81421: PUSH
81422: LD_VAR 0 1
81426: ARRAY
81427: PUSH
81428: LD_VAR 0 2
81432: ARRAY
81433: PUSH
81434: LD_INT 1
81436: ARRAY
81437: PPUSH
81438: LD_EXP 115
81442: PUSH
81443: LD_VAR 0 1
81447: ARRAY
81448: PUSH
81449: LD_VAR 0 2
81453: ARRAY
81454: PUSH
81455: LD_INT 2
81457: ARRAY
81458: PPUSH
81459: LD_VAR 0 3
81463: PPUSH
81464: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81468: LD_ADDR_EXP 115
81472: PUSH
81473: LD_EXP 115
81477: PPUSH
81478: LD_VAR 0 1
81482: PPUSH
81483: LD_EXP 115
81487: PUSH
81488: LD_VAR 0 1
81492: ARRAY
81493: PPUSH
81494: LD_VAR 0 2
81498: PPUSH
81499: CALL_OW 3
81503: PPUSH
81504: CALL_OW 1
81508: ST_TO_ADDR
// end ; end ;
81509: GO 81260
81511: POP
81512: POP
// end ;
81513: GO 81178
81515: POP
81516: POP
// end ;
81517: PPOPN 4
81519: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
81520: LD_INT 0
81522: PPUSH
81523: PPUSH
// result := false ;
81524: LD_ADDR_VAR 0 4
81528: PUSH
81529: LD_INT 0
81531: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81532: LD_VAR 0 1
81536: PPUSH
81537: CALL_OW 264
81541: PUSH
81542: LD_INT 81
81544: EQUAL
81545: NOT
81546: IFFALSE 81550
// exit ;
81548: GO 81790
// index := GetElementIndex ( minersList , unit ) ;
81550: LD_ADDR_VAR 0 5
81554: PUSH
81555: LD_EXP 114
81559: PPUSH
81560: LD_VAR 0 1
81564: PPUSH
81565: CALL 25072 0 2
81569: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81570: LD_EXP 115
81574: PUSH
81575: LD_VAR 0 5
81579: ARRAY
81580: PUSH
81581: LD_EXP 116
81585: GREATEREQUAL
81586: IFFALSE 81590
// exit ;
81588: GO 81790
// ComMoveXY ( unit , x , y ) ;
81590: LD_VAR 0 1
81594: PPUSH
81595: LD_VAR 0 2
81599: PPUSH
81600: LD_VAR 0 3
81604: PPUSH
81605: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81609: LD_INT 35
81611: PPUSH
81612: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81616: LD_VAR 0 1
81620: PPUSH
81621: LD_VAR 0 2
81625: PPUSH
81626: LD_VAR 0 3
81630: PPUSH
81631: CALL 56824 0 3
81635: NOT
81636: PUSH
81637: LD_VAR 0 1
81641: PPUSH
81642: CALL_OW 314
81646: AND
81647: IFFALSE 81651
// exit ;
81649: GO 81790
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81651: LD_VAR 0 2
81655: PPUSH
81656: LD_VAR 0 3
81660: PPUSH
81661: CALL_OW 428
81665: PUSH
81666: LD_VAR 0 1
81670: EQUAL
81671: PUSH
81672: LD_VAR 0 1
81676: PPUSH
81677: CALL_OW 314
81681: NOT
81682: AND
81683: IFFALSE 81609
// PlaySoundXY ( x , y , PlantMine ) ;
81685: LD_VAR 0 2
81689: PPUSH
81690: LD_VAR 0 3
81694: PPUSH
81695: LD_STRING PlantMine
81697: PPUSH
81698: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
81702: LD_VAR 0 2
81706: PPUSH
81707: LD_VAR 0 3
81711: PPUSH
81712: LD_VAR 0 1
81716: PPUSH
81717: CALL_OW 255
81721: PPUSH
81722: LD_INT 0
81724: PPUSH
81725: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81729: LD_ADDR_EXP 115
81733: PUSH
81734: LD_EXP 115
81738: PPUSH
81739: LD_VAR 0 5
81743: PUSH
81744: LD_EXP 115
81748: PUSH
81749: LD_VAR 0 5
81753: ARRAY
81754: PUSH
81755: LD_INT 1
81757: PLUS
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: PPUSH
81763: LD_VAR 0 2
81767: PUSH
81768: LD_VAR 0 3
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: PPUSH
81777: CALL 25287 0 3
81781: ST_TO_ADDR
// result := true ;
81782: LD_ADDR_VAR 0 4
81786: PUSH
81787: LD_INT 1
81789: ST_TO_ADDR
// end ;
81790: LD_VAR 0 4
81794: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81795: LD_INT 0
81797: PPUSH
81798: PPUSH
81799: PPUSH
// if not unit in minersList then
81800: LD_VAR 0 1
81804: PUSH
81805: LD_EXP 114
81809: IN
81810: NOT
81811: IFFALSE 81815
// exit ;
81813: GO 82207
// index := GetElementIndex ( minersList , unit ) ;
81815: LD_ADDR_VAR 0 6
81819: PUSH
81820: LD_EXP 114
81824: PPUSH
81825: LD_VAR 0 1
81829: PPUSH
81830: CALL 25072 0 2
81834: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81835: LD_ADDR_VAR 0 5
81839: PUSH
81840: DOUBLE
81841: LD_EXP 115
81845: PUSH
81846: LD_VAR 0 6
81850: ARRAY
81851: INC
81852: ST_TO_ADDR
81853: LD_INT 1
81855: PUSH
81856: FOR_DOWNTO
81857: IFFALSE 82018
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
81859: LD_EXP 115
81863: PUSH
81864: LD_VAR 0 6
81868: ARRAY
81869: PUSH
81870: LD_VAR 0 5
81874: ARRAY
81875: PUSH
81876: LD_INT 1
81878: ARRAY
81879: PUSH
81880: LD_VAR 0 2
81884: EQUAL
81885: PUSH
81886: LD_EXP 115
81890: PUSH
81891: LD_VAR 0 6
81895: ARRAY
81896: PUSH
81897: LD_VAR 0 5
81901: ARRAY
81902: PUSH
81903: LD_INT 2
81905: ARRAY
81906: PUSH
81907: LD_VAR 0 3
81911: EQUAL
81912: AND
81913: IFFALSE 82016
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81915: LD_EXP 115
81919: PUSH
81920: LD_VAR 0 6
81924: ARRAY
81925: PUSH
81926: LD_VAR 0 5
81930: ARRAY
81931: PUSH
81932: LD_INT 1
81934: ARRAY
81935: PPUSH
81936: LD_EXP 115
81940: PUSH
81941: LD_VAR 0 6
81945: ARRAY
81946: PUSH
81947: LD_VAR 0 5
81951: ARRAY
81952: PUSH
81953: LD_INT 2
81955: ARRAY
81956: PPUSH
81957: LD_VAR 0 1
81961: PPUSH
81962: CALL_OW 255
81966: PPUSH
81967: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81971: LD_ADDR_EXP 115
81975: PUSH
81976: LD_EXP 115
81980: PPUSH
81981: LD_VAR 0 6
81985: PPUSH
81986: LD_EXP 115
81990: PUSH
81991: LD_VAR 0 6
81995: ARRAY
81996: PPUSH
81997: LD_VAR 0 5
82001: PPUSH
82002: CALL_OW 3
82006: PPUSH
82007: CALL_OW 1
82011: ST_TO_ADDR
// exit ;
82012: POP
82013: POP
82014: GO 82207
// end ; end ;
82016: GO 81856
82018: POP
82019: POP
// for i := minerMinesList [ index ] downto 1 do
82020: LD_ADDR_VAR 0 5
82024: PUSH
82025: DOUBLE
82026: LD_EXP 115
82030: PUSH
82031: LD_VAR 0 6
82035: ARRAY
82036: INC
82037: ST_TO_ADDR
82038: LD_INT 1
82040: PUSH
82041: FOR_DOWNTO
82042: IFFALSE 82205
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
82044: LD_EXP 115
82048: PUSH
82049: LD_VAR 0 6
82053: ARRAY
82054: PUSH
82055: LD_VAR 0 5
82059: ARRAY
82060: PUSH
82061: LD_INT 1
82063: ARRAY
82064: PPUSH
82065: LD_EXP 115
82069: PUSH
82070: LD_VAR 0 6
82074: ARRAY
82075: PUSH
82076: LD_VAR 0 5
82080: ARRAY
82081: PUSH
82082: LD_INT 2
82084: ARRAY
82085: PPUSH
82086: LD_VAR 0 2
82090: PPUSH
82091: LD_VAR 0 3
82095: PPUSH
82096: CALL_OW 298
82100: PUSH
82101: LD_INT 6
82103: LESS
82104: IFFALSE 82203
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82106: LD_EXP 115
82110: PUSH
82111: LD_VAR 0 6
82115: ARRAY
82116: PUSH
82117: LD_VAR 0 5
82121: ARRAY
82122: PUSH
82123: LD_INT 1
82125: ARRAY
82126: PPUSH
82127: LD_EXP 115
82131: PUSH
82132: LD_VAR 0 6
82136: ARRAY
82137: PUSH
82138: LD_VAR 0 5
82142: ARRAY
82143: PUSH
82144: LD_INT 2
82146: ARRAY
82147: PPUSH
82148: LD_VAR 0 1
82152: PPUSH
82153: CALL_OW 255
82157: PPUSH
82158: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82162: LD_ADDR_EXP 115
82166: PUSH
82167: LD_EXP 115
82171: PPUSH
82172: LD_VAR 0 6
82176: PPUSH
82177: LD_EXP 115
82181: PUSH
82182: LD_VAR 0 6
82186: ARRAY
82187: PPUSH
82188: LD_VAR 0 5
82192: PPUSH
82193: CALL_OW 3
82197: PPUSH
82198: CALL_OW 1
82202: ST_TO_ADDR
// end ; end ;
82203: GO 82041
82205: POP
82206: POP
// end ;
82207: LD_VAR 0 4
82211: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82212: LD_INT 0
82214: PPUSH
82215: PPUSH
82216: PPUSH
82217: PPUSH
82218: PPUSH
82219: PPUSH
82220: PPUSH
82221: PPUSH
82222: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82223: LD_VAR 0 1
82227: PPUSH
82228: CALL_OW 264
82232: PUSH
82233: LD_INT 81
82235: EQUAL
82236: NOT
82237: PUSH
82238: LD_VAR 0 1
82242: PUSH
82243: LD_EXP 114
82247: IN
82248: NOT
82249: OR
82250: IFFALSE 82254
// exit ;
82252: GO 82576
// index := GetElementIndex ( minersList , unit ) ;
82254: LD_ADDR_VAR 0 6
82258: PUSH
82259: LD_EXP 114
82263: PPUSH
82264: LD_VAR 0 1
82268: PPUSH
82269: CALL 25072 0 2
82273: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82274: LD_ADDR_VAR 0 8
82278: PUSH
82279: LD_EXP 116
82283: PUSH
82284: LD_EXP 115
82288: PUSH
82289: LD_VAR 0 6
82293: ARRAY
82294: MINUS
82295: ST_TO_ADDR
// if not minesFreeAmount then
82296: LD_VAR 0 8
82300: NOT
82301: IFFALSE 82305
// exit ;
82303: GO 82576
// tmp := [ ] ;
82305: LD_ADDR_VAR 0 7
82309: PUSH
82310: EMPTY
82311: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82312: LD_ADDR_VAR 0 5
82316: PUSH
82317: DOUBLE
82318: LD_INT 1
82320: DEC
82321: ST_TO_ADDR
82322: LD_VAR 0 8
82326: PUSH
82327: FOR_TO
82328: IFFALSE 82523
// begin _d := rand ( 0 , 5 ) ;
82330: LD_ADDR_VAR 0 11
82334: PUSH
82335: LD_INT 0
82337: PPUSH
82338: LD_INT 5
82340: PPUSH
82341: CALL_OW 12
82345: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82346: LD_ADDR_VAR 0 12
82350: PUSH
82351: LD_INT 2
82353: PPUSH
82354: LD_INT 6
82356: PPUSH
82357: CALL_OW 12
82361: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82362: LD_ADDR_VAR 0 9
82366: PUSH
82367: LD_VAR 0 2
82371: PPUSH
82372: LD_VAR 0 11
82376: PPUSH
82377: LD_VAR 0 12
82381: PPUSH
82382: CALL_OW 272
82386: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82387: LD_ADDR_VAR 0 10
82391: PUSH
82392: LD_VAR 0 3
82396: PPUSH
82397: LD_VAR 0 11
82401: PPUSH
82402: LD_VAR 0 12
82406: PPUSH
82407: CALL_OW 273
82411: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82412: LD_VAR 0 9
82416: PPUSH
82417: LD_VAR 0 10
82421: PPUSH
82422: CALL_OW 488
82426: PUSH
82427: LD_VAR 0 9
82431: PUSH
82432: LD_VAR 0 10
82436: PUSH
82437: EMPTY
82438: LIST
82439: LIST
82440: PUSH
82441: LD_VAR 0 7
82445: IN
82446: NOT
82447: AND
82448: PUSH
82449: LD_VAR 0 9
82453: PPUSH
82454: LD_VAR 0 10
82458: PPUSH
82459: CALL_OW 458
82463: NOT
82464: AND
82465: IFFALSE 82507
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82467: LD_ADDR_VAR 0 7
82471: PUSH
82472: LD_VAR 0 7
82476: PPUSH
82477: LD_VAR 0 7
82481: PUSH
82482: LD_INT 1
82484: PLUS
82485: PPUSH
82486: LD_VAR 0 9
82490: PUSH
82491: LD_VAR 0 10
82495: PUSH
82496: EMPTY
82497: LIST
82498: LIST
82499: PPUSH
82500: CALL_OW 1
82504: ST_TO_ADDR
82505: GO 82521
// i := i - 1 ;
82507: LD_ADDR_VAR 0 5
82511: PUSH
82512: LD_VAR 0 5
82516: PUSH
82517: LD_INT 1
82519: MINUS
82520: ST_TO_ADDR
// end ;
82521: GO 82327
82523: POP
82524: POP
// for i in tmp do
82525: LD_ADDR_VAR 0 5
82529: PUSH
82530: LD_VAR 0 7
82534: PUSH
82535: FOR_IN
82536: IFFALSE 82574
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82538: LD_VAR 0 1
82542: PPUSH
82543: LD_VAR 0 5
82547: PUSH
82548: LD_INT 1
82550: ARRAY
82551: PPUSH
82552: LD_VAR 0 5
82556: PUSH
82557: LD_INT 2
82559: ARRAY
82560: PPUSH
82561: CALL 81520 0 3
82565: NOT
82566: IFFALSE 82572
// exit ;
82568: POP
82569: POP
82570: GO 82576
82572: GO 82535
82574: POP
82575: POP
// end ;
82576: LD_VAR 0 4
82580: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
82581: LD_INT 0
82583: PPUSH
82584: PPUSH
82585: PPUSH
82586: PPUSH
82587: PPUSH
82588: PPUSH
82589: PPUSH
// if not GetClass ( unit ) = class_sniper then
82590: LD_VAR 0 1
82594: PPUSH
82595: CALL_OW 257
82599: PUSH
82600: LD_INT 5
82602: EQUAL
82603: NOT
82604: IFFALSE 82608
// exit ;
82606: GO 82996
// dist := 8 ;
82608: LD_ADDR_VAR 0 5
82612: PUSH
82613: LD_INT 8
82615: ST_TO_ADDR
// viewRange := 12 ;
82616: LD_ADDR_VAR 0 7
82620: PUSH
82621: LD_INT 12
82623: ST_TO_ADDR
// side := GetSide ( unit ) ;
82624: LD_ADDR_VAR 0 6
82628: PUSH
82629: LD_VAR 0 1
82633: PPUSH
82634: CALL_OW 255
82638: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82639: LD_INT 61
82641: PPUSH
82642: LD_VAR 0 6
82646: PPUSH
82647: CALL_OW 321
82651: PUSH
82652: LD_INT 2
82654: EQUAL
82655: IFFALSE 82665
// viewRange := 16 ;
82657: LD_ADDR_VAR 0 7
82661: PUSH
82662: LD_INT 16
82664: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82665: LD_VAR 0 1
82669: PPUSH
82670: LD_VAR 0 2
82674: PPUSH
82675: LD_VAR 0 3
82679: PPUSH
82680: CALL_OW 297
82684: PUSH
82685: LD_VAR 0 5
82689: GREATER
82690: IFFALSE 82769
// begin ComMoveXY ( unit , x , y ) ;
82692: LD_VAR 0 1
82696: PPUSH
82697: LD_VAR 0 2
82701: PPUSH
82702: LD_VAR 0 3
82706: PPUSH
82707: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82711: LD_INT 35
82713: PPUSH
82714: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82718: LD_VAR 0 1
82722: PPUSH
82723: LD_VAR 0 2
82727: PPUSH
82728: LD_VAR 0 3
82732: PPUSH
82733: CALL 56824 0 3
82737: NOT
82738: IFFALSE 82742
// exit ;
82740: GO 82996
// until GetDistUnitXY ( unit , x , y ) < dist ;
82742: LD_VAR 0 1
82746: PPUSH
82747: LD_VAR 0 2
82751: PPUSH
82752: LD_VAR 0 3
82756: PPUSH
82757: CALL_OW 297
82761: PUSH
82762: LD_VAR 0 5
82766: LESS
82767: IFFALSE 82711
// end ; ComTurnXY ( unit , x , y ) ;
82769: LD_VAR 0 1
82773: PPUSH
82774: LD_VAR 0 2
82778: PPUSH
82779: LD_VAR 0 3
82783: PPUSH
82784: CALL_OW 118
// wait ( 5 ) ;
82788: LD_INT 5
82790: PPUSH
82791: CALL_OW 67
// _d := GetDir ( unit ) ;
82795: LD_ADDR_VAR 0 10
82799: PUSH
82800: LD_VAR 0 1
82804: PPUSH
82805: CALL_OW 254
82809: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
82810: LD_ADDR_VAR 0 8
82814: PUSH
82815: LD_VAR 0 1
82819: PPUSH
82820: CALL_OW 250
82824: PPUSH
82825: LD_VAR 0 10
82829: PPUSH
82830: LD_VAR 0 5
82834: PPUSH
82835: CALL_OW 272
82839: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
82840: LD_ADDR_VAR 0 9
82844: PUSH
82845: LD_VAR 0 1
82849: PPUSH
82850: CALL_OW 251
82854: PPUSH
82855: LD_VAR 0 10
82859: PPUSH
82860: LD_VAR 0 5
82864: PPUSH
82865: CALL_OW 273
82869: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82870: LD_VAR 0 8
82874: PPUSH
82875: LD_VAR 0 9
82879: PPUSH
82880: CALL_OW 488
82884: NOT
82885: IFFALSE 82889
// exit ;
82887: GO 82996
// ComAnimCustom ( unit , 1 ) ;
82889: LD_VAR 0 1
82893: PPUSH
82894: LD_INT 1
82896: PPUSH
82897: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82901: LD_VAR 0 8
82905: PPUSH
82906: LD_VAR 0 9
82910: PPUSH
82911: LD_VAR 0 6
82915: PPUSH
82916: LD_VAR 0 7
82920: PPUSH
82921: CALL_OW 330
// repeat wait ( 1 ) ;
82925: LD_INT 1
82927: PPUSH
82928: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
82932: LD_VAR 0 1
82936: PPUSH
82937: CALL_OW 316
82941: PUSH
82942: LD_VAR 0 1
82946: PPUSH
82947: CALL_OW 314
82951: OR
82952: PUSH
82953: LD_VAR 0 1
82957: PPUSH
82958: CALL_OW 302
82962: NOT
82963: OR
82964: PUSH
82965: LD_VAR 0 1
82969: PPUSH
82970: CALL_OW 301
82974: OR
82975: IFFALSE 82925
// RemoveSeeing ( _x , _y , side ) ;
82977: LD_VAR 0 8
82981: PPUSH
82982: LD_VAR 0 9
82986: PPUSH
82987: LD_VAR 0 6
82991: PPUSH
82992: CALL_OW 331
// end ;
82996: LD_VAR 0 4
83000: RET
