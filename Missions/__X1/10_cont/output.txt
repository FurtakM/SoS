// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// CreateNature ;
   8: CALL 11222 0 0
// PrepareArabian ;
  12: CALL 247 0 0
// PrepareAmerican ;
  16: CALL 682 0 0
// PrepareLegion ;
  20: CALL 5842 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 11826 0 0
// end ;
  41: END
// export debug , prefix , amScriptActive , legScriptActive , apeAmount , spotAmericanBase , spotArabianBase , spotByAmerican , spotByLegion , spotLegion , americanDestroyed , legionDestroyed , hasMastodont , hasVehicles , hasTigers , hasApes , hasDrugs , canFinish , gameActive , omarCanChangeClass , tigerCounter , americanWave ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 09_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 09_
  60: ST_TO_ADDR
// amScriptActive := true ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// legScriptActive := true ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// apeAmount := [ 16 , 14 , 12 , 10 ] [ Difficulty ] ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 16
  84: PUSH
  85: LD_INT 14
  87: PUSH
  88: LD_INT 12
  90: PUSH
  91: LD_INT 10
  93: PUSH
  94: EMPTY
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: LD_OWVAR 67
 104: ARRAY
 105: ST_TO_ADDR
// spotAmericanBase := false ;
 106: LD_ADDR_EXP 6
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// spotArabianBase := false ;
 114: LD_ADDR_EXP 7
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// spotLegion := false ;
 122: LD_ADDR_EXP 10
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// spotByAmerican := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// spotByLegion := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// americanDestroyed := false ;
 146: LD_ADDR_EXP 11
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// legionDestroyed := false ;
 154: LD_ADDR_EXP 12
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasMastodont := false ;
 162: LD_ADDR_EXP 13
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasVehicles := false ;
 170: LD_ADDR_EXP 14
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// hasTigers := false ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// hasApes := false ;
 186: LD_ADDR_EXP 16
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasDrugs := false ;
 194: LD_ADDR_EXP 17
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// canFinish := false ;
 202: LD_ADDR_EXP 18
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// gameActive := false ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// omarCanChangeClass := false ;
 218: LD_ADDR_EXP 20
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// tigerCounter := 0 ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// americanWave := 0 ;
 234: LD_ADDR_EXP 22
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// end ; end_of_file
 242: LD_VAR 0 1
 246: RET
// export Heike , Omar ; export heikeVehicle , omarVehicle ; export function PrepareArabian ; var i , tmp , veh ; begin
 247: LD_INT 0
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
// uc_side := 2 ;
 253: LD_ADDR_OWVAR 20
 257: PUSH
 258: LD_INT 2
 260: ST_TO_ADDR
// uc_nation := nation_arabian ;
 261: LD_ADDR_OWVAR 21
 265: PUSH
 266: LD_INT 2
 268: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 269: LD_ADDR_EXP 23
 273: PUSH
 274: LD_STRING Heike
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_EXP 2
 287: PPUSH
 288: CALL 20870 0 3
 292: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 293: LD_INT 14
 295: PPUSH
 296: LD_INT 3
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 27
 304: PPUSH
 305: LD_INT 100
 307: PPUSH
 308: CALL 25794 0 5
// heikeVehicle := CreateVehicle ;
 312: LD_ADDR_EXP 25
 316: PUSH
 317: CALL_OW 45
 321: ST_TO_ADDR
// SetDir ( heikeVehicle , 4 ) ;
 322: LD_EXP 25
 326: PPUSH
 327: LD_INT 4
 329: PPUSH
 330: CALL_OW 233
// PlaceUnitXY ( heikeVehicle , 118 , 37 , false ) ;
 334: LD_EXP 25
 338: PPUSH
 339: LD_INT 118
 341: PPUSH
 342: LD_INT 37
 344: PPUSH
 345: LD_INT 0
 347: PPUSH
 348: CALL_OW 48
// SetClass ( Heike , class_soldier ) ;
 352: LD_EXP 23
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 336
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
 364: LD_EXP 23
 368: PPUSH
 369: LD_EXP 25
 373: PPUSH
 374: CALL_OW 52
// uc_side := 5 ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_INT 5
 385: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 386: LD_ADDR_EXP 24
 390: PUSH
 391: LD_STRING Omar
 393: PPUSH
 394: CALL_OW 25
 398: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_gun , 100 ) ;
 399: LD_INT 14
 401: PPUSH
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 27
 410: PPUSH
 411: LD_INT 100
 413: PPUSH
 414: CALL 25794 0 5
// omarVehicle := CreateVehicle ;
 418: LD_ADDR_EXP 26
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// SetDir ( omarVehicle , 0 ) ;
 428: LD_EXP 26
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 233
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
 440: LD_ADDR_VAR 0 2
 444: PUSH
 445: LD_INT 22
 447: PUSH
 448: LD_INT 5
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 21
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: PUSH
 474: FOR_IN
 475: IFFALSE 499
// SetLives ( i , rand ( 300 , 499 ) ) ;
 477: LD_VAR 0 2
 481: PPUSH
 482: LD_INT 300
 484: PPUSH
 485: LD_INT 499
 487: PPUSH
 488: CALL_OW 12
 492: PPUSH
 493: CALL_OW 234
 497: GO 474
 499: POP
 500: POP
// SetResourceType ( GetBase ( arBase ) , mat_cans , 200 - ( 20 * Difficulty ) ) ;
 501: LD_INT 85
 503: PPUSH
 504: CALL_OW 274
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 200
 514: PUSH
 515: LD_INT 20
 517: PUSH
 518: LD_OWVAR 67
 522: MUL
 523: MINUS
 524: PPUSH
 525: CALL_OW 277
// SetResourceType ( GetBase ( arBase ) , mat_oil , 20 ) ;
 529: LD_INT 85
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 2
 539: PPUSH
 540: LD_INT 20
 542: PPUSH
 543: CALL_OW 277
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_cargo_bay , 100 ) ;
 547: LD_INT 14
 549: PPUSH
 550: LD_INT 3
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: LD_INT 32
 558: PPUSH
 559: LD_INT 100
 561: PPUSH
 562: CALL 25794 0 5
// veh := CreateVehicle ;
 566: LD_ADDR_VAR 0 4
 570: PUSH
 571: CALL_OW 45
 575: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
 576: LD_VAR 0 4
 580: PPUSH
 581: LD_INT 4
 583: PPUSH
 584: CALL_OW 233
// SetLives ( veh , 420 ) ;
 588: LD_VAR 0 4
 592: PPUSH
 593: LD_INT 420
 595: PPUSH
 596: CALL_OW 234
// PlaceUnitXY ( veh , 193 , 133 , false ) ;
 600: LD_VAR 0 4
 604: PPUSH
 605: LD_INT 193
 607: PPUSH
 608: LD_INT 133
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 11 ) ;
 618: LD_INT 14
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: LD_INT 26
 629: PPUSH
 630: LD_INT 11
 632: PPUSH
 633: CALL 25794 0 5
// veh := CreateVehicle ;
 637: LD_ADDR_VAR 0 4
 641: PUSH
 642: CALL_OW 45
 646: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
 647: LD_VAR 0 4
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 233
// PlaceUnitXY ( veh , 261 , 115 , false ) ;
 659: LD_VAR 0 4
 663: PPUSH
 664: LD_INT 261
 666: PPUSH
 667: LD_INT 115
 669: PPUSH
 670: LD_INT 0
 672: PPUSH
 673: CALL_OW 48
// end ; end_of_file
 677: LD_VAR 0 1
 681: RET
// export amForces , amTech , amConstructList , amHealPoint , amBuildings , amTanks , amCommander , amCargo , amPatrol ; export function PrepareAmerican ; var i , j , b , un , skill , sources , patrolSpawnArea ; begin
 682: LD_INT 0
 684: PPUSH
 685: PPUSH
 686: PPUSH
 687: PPUSH
 688: PPUSH
 689: PPUSH
 690: PPUSH
 691: PPUSH
// uc_side := 1 ;
 692: LD_ADDR_OWVAR 20
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// uc_nation := nation_american ;
 700: LD_ADDR_OWVAR 21
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// amForces := [ ] ;
 708: LD_ADDR_EXP 27
 712: PUSH
 713: EMPTY
 714: ST_TO_ADDR
// amTech := GetTechNation ( 1 , nation_american , state_enabled ) ;
 715: LD_ADDR_EXP 28
 719: PUSH
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 1
 725: PPUSH
 726: LD_INT 1
 728: PPUSH
 729: CALL 21017 0 3
 733: ST_TO_ADDR
// amConstructList := [ [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] , [ us_medium_tracked , engine_combustion , control_remote , us_crane ] ] ;
 734: LD_ADDR_EXP 29
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 12
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: LD_INT 2
 765: PUSH
 766: LD_INT 13
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: ST_TO_ADDR
// amHealPoint := [ 94 , 132 ] ;
 779: LD_ADDR_EXP 30
 783: PUSH
 784: LD_INT 94
 786: PUSH
 787: LD_INT 132
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// amBuildings := [ ] ;
 794: LD_ADDR_EXP 31
 798: PUSH
 799: EMPTY
 800: ST_TO_ADDR
// amTanks := [ ] ;
 801: LD_ADDR_EXP 32
 805: PUSH
 806: EMPTY
 807: ST_TO_ADDR
// amCargo := 0 ;
 808: LD_ADDR_EXP 34
 812: PUSH
 813: LD_INT 0
 815: ST_TO_ADDR
// amPatrol := [ ] ;
 816: LD_ADDR_EXP 35
 820: PUSH
 821: EMPTY
 822: ST_TO_ADDR
// sources := [ [ 77 , 121 ] , [ 98 , 145 ] ] ;
 823: LD_ADDR_VAR 0 7
 827: PUSH
 828: LD_INT 77
 830: PUSH
 831: LD_INT 121
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 98
 840: PUSH
 841: LD_INT 145
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// for i in sources do
 852: LD_ADDR_VAR 0 2
 856: PUSH
 857: LD_VAR 0 7
 861: PUSH
 862: FOR_IN
 863: IFFALSE 892
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 1 ) ;
 865: LD_VAR 0 2
 869: PUSH
 870: LD_INT 1
 872: ARRAY
 873: PPUSH
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: CALL_OW 441
 890: GO 862
 892: POP
 893: POP
// SetResourceType ( GetBase ( amBase ) , mat_cans , 550 ) ;
 894: LD_INT 2
 896: PPUSH
 897: CALL_OW 274
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: LD_INT 550
 907: PPUSH
 908: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_oil , 120 ) ;
 912: LD_INT 2
 914: PPUSH
 915: CALL_OW 274
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 120
 925: PPUSH
 926: CALL_OW 277
// SetResourceType ( GetBase ( amBase ) , mat_siberit , 30 ) ;
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 274
 937: PPUSH
 938: LD_INT 3
 940: PPUSH
 941: LD_INT 30
 943: PPUSH
 944: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
 948: LD_ADDR_VAR 0 6
 952: PUSH
 953: LD_INT 6
 955: PUSH
 956: LD_INT 7
 958: PUSH
 959: LD_INT 8
 961: PUSH
 962: LD_INT 9
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: PUSH
 971: LD_OWVAR 67
 975: ARRAY
 976: ST_TO_ADDR
// amCommander := PrepareUnit ( Brown , false ,  ) ;
 977: LD_ADDR_EXP 33
 981: PUSH
 982: LD_STRING Brown
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: LD_STRING 
 990: PPUSH
 991: CALL 20870 0 3
 995: ST_TO_ADDR
// PlaceHumanInUnit ( amCommander , amBase ) ;
 996: LD_EXP 33
1000: PPUSH
1001: LD_INT 2
1003: PPUSH
1004: CALL_OW 52
// for i := 1 to 4 do
1008: LD_ADDR_VAR 0 2
1012: PUSH
1013: DOUBLE
1014: LD_INT 1
1016: DEC
1017: ST_TO_ADDR
1018: LD_INT 4
1020: PUSH
1021: FOR_TO
1022: IFFALSE 1546
// for j := 1 to [ [ 6 , 7 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , [ 5 , 5 , 6 , 7 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
1024: LD_ADDR_VAR 0 3
1028: PUSH
1029: DOUBLE
1030: LD_INT 1
1032: DEC
1033: ST_TO_ADDR
1034: LD_INT 6
1036: PUSH
1037: LD_INT 7
1039: PUSH
1040: LD_INT 8
1042: PUSH
1043: LD_INT 9
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_OWVAR 67
1056: ARRAY
1057: PUSH
1058: LD_INT 3
1060: PUSH
1061: LD_INT 4
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 5
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_OWVAR 67
1080: ARRAY
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: LD_INT 5
1087: PUSH
1088: LD_INT 6
1090: PUSH
1091: LD_INT 7
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_OWVAR 67
1104: ARRAY
1105: PUSH
1106: LD_INT 2
1108: PUSH
1109: LD_INT 3
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_OWVAR 67
1128: ARRAY
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: LD_VAR 0 2
1140: ARRAY
1141: PUSH
1142: FOR_TO
1143: IFFALSE 1542
// begin PrepareHuman ( false , i , skill ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_VAR 0 6
1157: PPUSH
1158: CALL_OW 380
// un := CreateHuman ;
1162: LD_ADDR_VAR 0 5
1166: PUSH
1167: CALL_OW 44
1171: ST_TO_ADDR
// amForces := Join ( amForces , un ) ;
1172: LD_ADDR_EXP 27
1176: PUSH
1177: LD_EXP 27
1181: PPUSH
1182: LD_VAR 0 5
1186: PPUSH
1187: CALL 58665 0 2
1191: ST_TO_ADDR
// case i of 1 :
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 1
1199: DOUBLE
1200: EQUAL
1201: IFTRUE 1205
1203: GO 1274
1205: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_INT 22
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: LD_INT 30
1226: PUSH
1227: LD_INT 32
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 5
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 3
1251: PUSH
1252: LD_INT 62
1254: PUSH
1255: EMPTY
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PPUSH
1267: CALL_OW 69
1271: ST_TO_ADDR
1272: GO 1453
1274: LD_INT 2
1276: DOUBLE
1277: EQUAL
1278: IFTRUE 1282
1280: GO 1311
1282: POP
// b := UnitFilter ( amBase , [ f_not , [ f_full ] ] ) ; 3 :
1283: LD_ADDR_VAR 0 4
1287: PUSH
1288: LD_INT 2
1290: PPUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 62
1296: PUSH
1297: EMPTY
1298: LIST
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PPUSH
1304: CALL_OW 72
1308: ST_TO_ADDR
1309: GO 1453
1311: LD_INT 3
1313: DOUBLE
1314: EQUAL
1315: IFTRUE 1319
1317: GO 1393
1319: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
1320: LD_ADDR_VAR 0 4
1324: PUSH
1325: LD_INT 22
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: LD_INT 2
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 3
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 30
1350: PUSH
1351: LD_INT 36
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 3
1365: PUSH
1366: LD_INT 62
1368: PUSH
1369: EMPTY
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: LIST
1380: PPUSH
1381: CALL_OW 69
1385: PPUSH
1386: CALL 53932 0 1
1390: ST_TO_ADDR
1391: GO 1453
1393: LD_INT 4
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1452
1401: POP
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: LD_INT 1
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 30
1419: PUSH
1420: LD_INT 8
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 3
1429: PUSH
1430: LD_INT 62
1432: PUSH
1433: EMPTY
1434: LIST
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: PPUSH
1445: CALL_OW 69
1449: ST_TO_ADDR
1450: GO 1453
1452: POP
// if b then
1453: LD_VAR 0 4
1457: IFFALSE 1519
// begin if GetBType ( b [ 1 ] ) = b_barracks and Prob ( 60 ) then
1459: LD_VAR 0 4
1463: PUSH
1464: LD_INT 1
1466: ARRAY
1467: PPUSH
1468: CALL_OW 266
1472: PUSH
1473: LD_INT 5
1475: EQUAL
1476: PUSH
1477: LD_INT 60
1479: PPUSH
1480: CALL_OW 13
1484: AND
1485: IFFALSE 1499
// SetClass ( un , class_sniper ) ;
1487: LD_VAR 0 5
1491: PPUSH
1492: LD_INT 5
1494: PPUSH
1495: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
1499: LD_VAR 0 5
1503: PPUSH
1504: LD_VAR 0 4
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: CALL_OW 52
// end else
1517: GO 1540
// PlaceUnitXYR ( un , 92 , 137 , 4 , false ) ;
1519: LD_VAR 0 5
1523: PPUSH
1524: LD_INT 92
1526: PPUSH
1527: LD_INT 137
1529: PPUSH
1530: LD_INT 4
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: CALL_OW 50
// end ;
1540: GO 1142
1542: POP
1543: POP
1544: GO 1021
1546: POP
1547: POP
// patrolSpawnArea := [ patrol1aArea , patrol2aArea , patrol3aArea ] ;
1548: LD_ADDR_VAR 0 8
1552: PUSH
1553: LD_INT 30
1555: PUSH
1556: LD_INT 32
1558: PUSH
1559: LD_INT 36
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: ST_TO_ADDR
// for i := 1 to patrolSpawnArea do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: DOUBLE
1573: LD_INT 1
1575: DEC
1576: ST_TO_ADDR
1577: LD_VAR 0 8
1581: PUSH
1582: FOR_TO
1583: IFFALSE 1752
// begin for j := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1585: LD_ADDR_VAR 0 3
1589: PUSH
1590: DOUBLE
1591: LD_INT 1
1593: DEC
1594: ST_TO_ADDR
1595: LD_INT 1
1597: PUSH
1598: LD_INT 2
1600: PUSH
1601: LD_INT 2
1603: PUSH
1604: LD_INT 3
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_OWVAR 67
1617: ARRAY
1618: PUSH
1619: FOR_TO
1620: IFFALSE 1748
// begin PrepareSoldier ( false , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_INT 7
1627: PUSH
1628: LD_INT 8
1630: PUSH
1631: LD_INT 9
1633: PUSH
1634: LD_INT 10
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_OWVAR 67
1647: ARRAY
1648: PPUSH
1649: CALL_OW 381
// un := CreateHuman ;
1653: LD_ADDR_VAR 0 5
1657: PUSH
1658: CALL_OW 44
1662: ST_TO_ADDR
// if j mod 2 = 0 then
1663: LD_VAR 0 3
1667: PUSH
1668: LD_INT 2
1670: MOD
1671: PUSH
1672: LD_INT 0
1674: EQUAL
1675: IFFALSE 1689
// SetClass ( un , class_sniper ) ;
1677: LD_VAR 0 5
1681: PPUSH
1682: LD_INT 5
1684: PPUSH
1685: CALL_OW 336
// amPatrol := Join ( amPatrol , un ) ;
1689: LD_ADDR_EXP 35
1693: PUSH
1694: LD_EXP 35
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: CALL 58665 0 2
1708: ST_TO_ADDR
// PlaceUnitArea ( un , patrolSpawnArea [ i ] , false ) ;
1709: LD_VAR 0 5
1713: PPUSH
1714: LD_VAR 0 8
1718: PUSH
1719: LD_VAR 0 2
1723: ARRAY
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// SetTag ( un , i ) ;
1732: LD_VAR 0 5
1736: PPUSH
1737: LD_VAR 0 2
1741: PPUSH
1742: CALL_OW 109
// end ;
1746: GO 1619
1748: POP
1749: POP
// end ;
1750: GO 1582
1752: POP
1753: POP
// end ;
1754: LD_VAR 0 1
1758: RET
// every 0 0$2 trigger amScriptActive and Count ( amForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
1759: LD_EXP 3
1763: PUSH
1764: LD_EXP 27
1768: PPUSH
1769: CALL 23056 0 1
1773: AND
1774: IFFALSE 4181
1776: GO 1778
1778: DISABLE
1779: LD_INT 0
1781: PPUSH
1782: PPUSH
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
1787: PPUSH
1788: PPUSH
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
// begin enable ;
1799: ENABLE
// side := 1 ;
1800: LD_ADDR_VAR 0 5
1804: PUSH
1805: LD_INT 1
1807: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: LD_VAR 0 5
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PUSH
1825: LD_INT 33
1827: PUSH
1828: LD_INT 2
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 50
1837: PUSH
1838: EMPTY
1839: LIST
1840: PUSH
1841: LD_INT 3
1843: PUSH
1844: LD_INT 61
1846: PUSH
1847: EMPTY
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PPUSH
1860: CALL_OW 69
1864: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_btype , b_control_tower ] ] ) ) then
1865: LD_VAR 0 3
1869: PUSH
1870: LD_INT 22
1872: PUSH
1873: LD_VAR 0 5
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 50
1884: PUSH
1885: EMPTY
1886: LIST
1887: PUSH
1888: LD_INT 30
1890: PUSH
1891: LD_INT 36
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: LIST
1902: PPUSH
1903: CALL_OW 69
1907: PPUSH
1908: CALL 23056 0 1
1912: AND
1913: IFFALSE 1941
// for i in remote do
1915: LD_ADDR_VAR 0 1
1919: PUSH
1920: LD_VAR 0 3
1924: PUSH
1925: FOR_IN
1926: IFFALSE 1939
// Connect ( i ) ;
1928: LD_VAR 0 1
1932: PPUSH
1933: CALL 29262 0 1
1937: GO 1925
1939: POP
1940: POP
// if amTech then
1941: LD_EXP 28
1945: IFFALSE 2101
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1947: LD_ADDR_VAR 0 6
1951: PUSH
1952: LD_INT 22
1954: PUSH
1955: LD_VAR 0 5
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 50
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 30
1975: PUSH
1976: LD_INT 6
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 30
1985: PUSH
1986: LD_INT 7
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 30
1995: PUSH
1996: LD_INT 8
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: PPUSH
2014: CALL_OW 69
2018: ST_TO_ADDR
// if lab then
2019: LD_VAR 0 6
2023: IFFALSE 2101
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
2025: LD_VAR 0 6
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: PPUSH
2034: CALL_OW 461
2038: PUSH
2039: LD_INT 2
2041: EQUAL
2042: IFFALSE 2101
// begin for i in amTech do
2044: LD_ADDR_VAR 0 1
2048: PUSH
2049: LD_EXP 28
2053: PUSH
2054: FOR_IN
2055: IFFALSE 2099
// if CanBeResearched ( lab [ 1 ] , i ) then
2057: LD_VAR 0 6
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: LD_VAR 0 1
2070: PPUSH
2071: CALL_OW 430
2075: IFFALSE 2097
// begin ComResearch ( lab [ 1 ] , i ) ;
2077: LD_VAR 0 6
2081: PUSH
2082: LD_INT 1
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 1
2090: PPUSH
2091: CALL_OW 124
// break ;
2095: GO 2099
// end ;
2097: GO 2054
2099: POP
2100: POP
// end ; end ; end ; fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2101: LD_ADDR_VAR 0 16
2105: PUSH
2106: LD_INT 1
2108: PPUSH
2109: LD_INT 22
2111: PUSH
2112: LD_VAR 0 5
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: LD_INT 30
2123: PUSH
2124: LD_INT 3
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 50
2133: PUSH
2134: EMPTY
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PPUSH
2142: CALL_OW 70
2146: ST_TO_ADDR
// if fac then
2147: LD_VAR 0 16
2151: IFFALSE 2417
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2153: LD_VAR 0 16
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: CALL_OW 461
2166: PUSH
2167: LD_INT 2
2169: EQUAL
2170: IFFALSE 2417
// begin emptyTowers := FilterUnitsInArea ( amBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2172: LD_ADDR_VAR 0 17
2176: PUSH
2177: LD_INT 1
2179: PPUSH
2180: LD_INT 2
2182: PUSH
2183: LD_INT 30
2185: PUSH
2186: LD_INT 32
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 30
2195: PUSH
2196: LD_INT 33
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 35
2210: PUSH
2211: LD_INT 0
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PPUSH
2222: CALL_OW 70
2226: ST_TO_ADDR
// if emptyTowers then
2227: LD_VAR 0 17
2231: IFFALSE 2279
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , amBaseArea ) ;
2233: LD_ADDR_VAR 0 18
2237: PUSH
2238: LD_VAR 0 17
2242: PUSH
2243: LD_INT 1
2245: ARRAY
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: CALL 31301 0 2
2254: ST_TO_ADDR
// if weapon then
2255: LD_VAR 0 18
2259: IFFALSE 2279
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2261: LD_VAR 0 17
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_VAR 0 18
2274: PPUSH
2275: CALL_OW 148
// end ; if amConstructList then
2279: LD_EXP 29
2283: IFFALSE 2417
// if CanBeConstructed ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) then
2285: LD_VAR 0 16
2289: PUSH
2290: LD_INT 1
2292: ARRAY
2293: PPUSH
2294: LD_EXP 29
2298: PUSH
2299: LD_INT 1
2301: ARRAY
2302: PUSH
2303: LD_INT 1
2305: ARRAY
2306: PPUSH
2307: LD_EXP 29
2311: PUSH
2312: LD_INT 1
2314: ARRAY
2315: PUSH
2316: LD_INT 2
2318: ARRAY
2319: PPUSH
2320: LD_EXP 29
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PUSH
2329: LD_INT 3
2331: ARRAY
2332: PPUSH
2333: LD_EXP 29
2337: PUSH
2338: LD_INT 1
2340: ARRAY
2341: PUSH
2342: LD_INT 4
2344: ARRAY
2345: PPUSH
2346: CALL_OW 448
2350: IFFALSE 2417
// ComConstruct ( fac [ 1 ] , amConstructList [ 1 ] [ 1 ] , amConstructList [ 1 ] [ 2 ] , amConstructList [ 1 ] [ 3 ] , amConstructList [ 1 ] [ 4 ] ) ;
2352: LD_VAR 0 16
2356: PUSH
2357: LD_INT 1
2359: ARRAY
2360: PPUSH
2361: LD_EXP 29
2365: PUSH
2366: LD_INT 1
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 29
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PUSH
2383: LD_INT 2
2385: ARRAY
2386: PPUSH
2387: LD_EXP 29
2391: PUSH
2392: LD_INT 1
2394: ARRAY
2395: PUSH
2396: LD_INT 3
2398: ARRAY
2399: PPUSH
2400: LD_EXP 29
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PUSH
2409: LD_INT 4
2411: ARRAY
2412: PPUSH
2413: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( amBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2417: LD_ADDR_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: PPUSH
2425: LD_INT 21
2427: PUSH
2428: LD_INT 3
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 3
2437: PUSH
2438: LD_INT 57
2440: PUSH
2441: EMPTY
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: LD_INT 24
2453: PUSH
2454: LD_INT 1000
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: LIST
2469: PPUSH
2470: CALL_OW 70
2474: ST_TO_ADDR
// cr := GetListOfCratesInArea ( amCratesArea ) ;
2475: LD_ADDR_VAR 0 10
2479: PUSH
2480: LD_INT 13
2482: PPUSH
2483: CALL_OW 435
2487: ST_TO_ADDR
// sci := UnitFilter ( amForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
2488: LD_ADDR_VAR 0 11
2492: PUSH
2493: LD_EXP 27
2497: PPUSH
2498: LD_INT 25
2500: PUSH
2501: LD_INT 4
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 50
2510: PUSH
2511: EMPTY
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 72
2522: ST_TO_ADDR
// lab := FilterUnitsInArea ( amBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2523: LD_ADDR_VAR 0 6
2527: PUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 2
2533: PUSH
2534: LD_INT 30
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 30
2546: PUSH
2547: LD_INT 7
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 30
2556: PUSH
2557: LD_INT 8
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 70
2574: ST_TO_ADDR
// if sci then
2575: LD_VAR 0 11
2579: IFFALSE 2738
// begin hurtUnits := UnitFilter ( amForces , [ [ f_inarea , amBaseArea ] , [ f_tag , tHeal ] ] ) ;
2581: LD_ADDR_VAR 0 13
2585: PUSH
2586: LD_EXP 27
2590: PPUSH
2591: LD_INT 95
2593: PUSH
2594: LD_INT 1
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 120
2603: PUSH
2604: LD_INT 1
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PPUSH
2615: CALL_OW 72
2619: ST_TO_ADDR
// if hurtUnits then
2620: LD_VAR 0 13
2624: IFFALSE 2685
// begin for i in sci do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_VAR 0 11
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2681
// if IsInUnit ( i ) then
2639: LD_VAR 0 1
2643: PPUSH
2644: CALL_OW 310
2648: IFFALSE 2661
// ComExitBuilding ( i ) else
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL_OW 122
2659: GO 2679
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2661: LD_VAR 0 1
2665: PPUSH
2666: LD_VAR 0 13
2670: PUSH
2671: LD_INT 1
2673: ARRAY
2674: PPUSH
2675: CALL_OW 128
2679: GO 2636
2681: POP
2682: POP
// end else
2683: GO 2738
// if lab then
2685: LD_VAR 0 6
2689: IFFALSE 2738
// begin for i in sci do
2691: LD_ADDR_VAR 0 1
2695: PUSH
2696: LD_VAR 0 11
2700: PUSH
2701: FOR_IN
2702: IFFALSE 2736
// if not IsInUnit ( i ) then
2704: LD_VAR 0 1
2708: PPUSH
2709: CALL_OW 310
2713: NOT
2714: IFFALSE 2734
// ComEnterUnit ( i , lab [ 1 ] ) ;
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 6
2725: PUSH
2726: LD_INT 1
2728: ARRAY
2729: PPUSH
2730: CALL_OW 120
2734: GO 2701
2736: POP
2737: POP
// end ; end ; eng := UnitFilter ( amForces , [ f_class , 2 ] ) ;
2738: LD_ADDR_VAR 0 7
2742: PUSH
2743: LD_EXP 27
2747: PPUSH
2748: LD_INT 25
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PPUSH
2758: CALL_OW 72
2762: ST_TO_ADDR
// if eng then
2763: LD_VAR 0 7
2767: IFFALSE 3542
// begin for i in eng do
2769: LD_ADDR_VAR 0 1
2773: PUSH
2774: LD_VAR 0 7
2778: PUSH
2779: FOR_IN
2780: IFFALSE 3540
// begin tag := GetTag ( i ) ;
2782: LD_ADDR_VAR 0 8
2786: PUSH
2787: LD_VAR 0 1
2791: PPUSH
2792: CALL_OW 110
2796: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
2797: LD_VAR 0 1
2801: PPUSH
2802: CALL_OW 256
2806: PUSH
2807: LD_INT 800
2809: LESS
2810: PUSH
2811: LD_VAR 0 8
2815: PUSH
2816: LD_INT 1
2818: NONEQUAL
2819: AND
2820: IFFALSE 2870
// begin SetTag ( i , tHeal ) ;
2822: LD_VAR 0 1
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
2834: LD_VAR 0 1
2838: PPUSH
2839: LD_EXP 30
2843: PUSH
2844: LD_INT 1
2846: ARRAY
2847: PPUSH
2848: LD_EXP 30
2852: PUSH
2853: LD_INT 2
2855: ARRAY
2856: PPUSH
2857: CALL_OW 111
// AddComHold ( i ) ;
2861: LD_VAR 0 1
2865: PPUSH
2866: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2870: LD_VAR 0 8
2874: PUSH
2875: LD_INT 1
2877: EQUAL
2878: PUSH
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL_OW 256
2888: PUSH
2889: LD_INT 1000
2891: EQUAL
2892: AND
2893: IFFALSE 2907
// SetTag ( i , 0 ) ;
2895: LD_VAR 0 1
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 109
// if not tag then
2907: LD_VAR 0 8
2911: NOT
2912: IFFALSE 3080
// begin undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
2914: LD_ADDR_VAR 0 4
2918: PUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 57
2924: PUSH
2925: EMPTY
2926: LIST
2927: PPUSH
2928: CALL_OW 70
2932: ST_TO_ADDR
// if undone then
2933: LD_VAR 0 4
2937: IFFALSE 2959
// begin ComComplete ( i , undone [ 1 ] ) ;
2939: LD_VAR 0 1
2943: PPUSH
2944: LD_VAR 0 4
2948: PUSH
2949: LD_INT 1
2951: ARRAY
2952: PPUSH
2953: CALL 29154 0 2
// continue ;
2957: GO 2779
// end ; if cr or tmp or Count ( amBuildings ) then
2959: LD_VAR 0 10
2963: PUSH
2964: LD_VAR 0 2
2968: OR
2969: PUSH
2970: LD_EXP 31
2974: PPUSH
2975: CALL 23056 0 1
2979: OR
2980: IFFALSE 3056
// begin if IsInUnit ( i ) then
2982: LD_VAR 0 1
2986: PPUSH
2987: CALL_OW 310
2991: IFFALSE 3002
// ComExitBuilding ( i ) ;
2993: LD_VAR 0 1
2997: PPUSH
2998: CALL_OW 122
// if tmp then
3002: LD_VAR 0 2
3006: IFFALSE 3022
// SetTag ( i , tRepair ) else
3008: LD_VAR 0 1
3012: PPUSH
3013: LD_INT 3
3015: PPUSH
3016: CALL_OW 109
3020: GO 3054
// if cr then
3022: LD_VAR 0 10
3026: IFFALSE 3042
// SetTag ( i , tCrates ) else
3028: LD_VAR 0 1
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: CALL_OW 109
3040: GO 3054
// SetTag ( i , tBuild ) ;
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_INT 5
3049: PPUSH
3050: CALL_OW 109
// end else
3054: GO 3080
// if not IsInUnit ( i ) then
3056: LD_VAR 0 1
3060: PPUSH
3061: CALL_OW 310
3065: NOT
3066: IFFALSE 3080
// ComEnterUnit ( i , amBase ) ;
3068: LD_VAR 0 1
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 120
// end ; if tag = tRepair then
3080: LD_VAR 0 8
3084: PUSH
3085: LD_INT 3
3087: EQUAL
3088: IFFALSE 3190
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// begin ComExitBuilding ( i ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
// continue ;
3110: GO 2779
// end ; if not tmp then
3112: LD_VAR 0 2
3116: NOT
3117: IFFALSE 3133
// begin SetTag ( i , 0 ) ;
3119: LD_VAR 0 1
3123: PPUSH
3124: LD_INT 0
3126: PPUSH
3127: CALL_OW 109
// continue ;
3131: GO 2779
// end ; if not HasTask ( i ) then
3133: LD_VAR 0 1
3137: PPUSH
3138: CALL_OW 314
3142: NOT
3143: IFFALSE 3163
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_VAR 0 2
3154: PUSH
3155: LD_INT 1
3157: ARRAY
3158: PPUSH
3159: CALL_OW 130
// if not IsInArea ( i , amBaseArea ) then
3163: LD_VAR 0 1
3167: PPUSH
3168: LD_INT 1
3170: PPUSH
3171: CALL_OW 308
3175: NOT
3176: IFFALSE 3190
// ComMoveToArea ( i , amBaseArea ) ;
3178: LD_VAR 0 1
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: CALL_OW 113
// end ; if tag = tBuild then
3190: LD_VAR 0 8
3194: PUSH
3195: LD_INT 5
3197: EQUAL
3198: IFFALSE 3393
// begin if IsInUnit ( i ) then
3200: LD_VAR 0 1
3204: PPUSH
3205: CALL_OW 310
3209: IFFALSE 3222
// begin ComExitBuilding ( i ) ;
3211: LD_VAR 0 1
3215: PPUSH
3216: CALL_OW 122
// continue ;
3220: GO 2779
// end ; if not Count ( amBuildings ) then
3222: LD_EXP 31
3226: PPUSH
3227: CALL 23056 0 1
3231: NOT
3232: IFFALSE 3250
// begin SetTag ( i , 0 ) ;
3234: LD_VAR 0 1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 109
// continue ;
3246: GO 2779
// end else
3248: GO 3287
// if not CanBeBuiltOnlyResources ( amBase , amBuildings [ 1 ] [ 1 ] ) then
3250: LD_INT 2
3252: PPUSH
3253: LD_EXP 31
3257: PUSH
3258: LD_INT 1
3260: ARRAY
3261: PUSH
3262: LD_INT 1
3264: ARRAY
3265: PPUSH
3266: CALL 62594 0 2
3270: NOT
3271: IFFALSE 3287
// begin SetTag ( i , 0 ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 109
// continue ;
3285: GO 2779
// end ; undone := FilterUnitsInArea ( amBaseArea , [ f_constructed ] ) ;
3287: LD_ADDR_VAR 0 4
3291: PUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 57
3297: PUSH
3298: EMPTY
3299: LIST
3300: PPUSH
3301: CALL_OW 70
3305: ST_TO_ADDR
// if undone then
3306: LD_VAR 0 4
3310: IFFALSE 3332
// begin ComComplete ( i , undone [ 1 ] ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_VAR 0 4
3321: PUSH
3322: LD_INT 1
3324: ARRAY
3325: PPUSH
3326: CALL 29154 0 2
// continue ;
3330: GO 2779
// end ; ComBuild ( i , amBuildings [ 1 ] [ 1 ] , amBuildings [ 1 ] [ 2 ] , amBuildings [ 1 ] [ 3 ] , amBuildings [ 1 ] [ 4 ] ) ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_EXP 31
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: LD_EXP 31
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PUSH
3359: LD_INT 2
3361: ARRAY
3362: PPUSH
3363: LD_EXP 31
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PUSH
3372: LD_INT 3
3374: ARRAY
3375: PPUSH
3376: LD_EXP 31
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PUSH
3385: LD_INT 4
3387: ARRAY
3388: PPUSH
3389: CALL_OW 145
// end ; if tag = tCrates then
3393: LD_VAR 0 8
3397: PUSH
3398: LD_INT 2
3400: EQUAL
3401: IFFALSE 3538
// begin if IsInUnit ( i ) then
3403: LD_VAR 0 1
3407: PPUSH
3408: CALL_OW 310
3412: IFFALSE 3425
// begin ComExitBuilding ( i ) ;
3414: LD_VAR 0 1
3418: PPUSH
3419: CALL_OW 122
// continue ;
3423: GO 2779
// end ; if not cr then
3425: LD_VAR 0 10
3429: NOT
3430: IFFALSE 3446
// begin SetTag ( i , 0 ) ;
3432: LD_VAR 0 1
3436: PPUSH
3437: LD_INT 0
3439: PPUSH
3440: CALL_OW 109
// continue ;
3444: GO 2779
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 314
3455: NOT
3456: PUSH
3457: LD_INT 81
3459: PUSH
3460: LD_VAR 0 5
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 92
3471: PUSH
3472: LD_VAR 0 10
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PUSH
3481: LD_VAR 0 10
3485: PUSH
3486: LD_INT 2
3488: ARRAY
3489: PUSH
3490: LD_INT 12
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: NOT
3508: AND
3509: IFFALSE 3538
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_VAR 0 10
3520: PUSH
3521: LD_INT 1
3523: ARRAY
3524: PPUSH
3525: LD_VAR 0 10
3529: PUSH
3530: LD_INT 2
3532: ARRAY
3533: PPUSH
3534: CALL_OW 117
// end ; end ;
3538: GO 2779
3540: POP
3541: POP
// end ; sol := UnitFilter ( amForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] , [ f_ok ] ] ) union amCommander ;
3542: LD_ADDR_VAR 0 12
3546: PUSH
3547: LD_EXP 27
3551: PPUSH
3552: LD_INT 2
3554: PUSH
3555: LD_INT 25
3557: PUSH
3558: LD_INT 1
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: LD_INT 25
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 50
3582: PUSH
3583: EMPTY
3584: LIST
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 72
3594: PUSH
3595: LD_EXP 33
3599: UNION
3600: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( amBaseArea , [ f_enemy , side ] ) ;
3601: LD_ADDR_VAR 0 14
3605: PUSH
3606: LD_INT 1
3608: PPUSH
3609: LD_INT 81
3611: PUSH
3612: LD_VAR 0 5
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: PPUSH
3621: CALL_OW 70
3625: ST_TO_ADDR
// if sol then
3626: LD_VAR 0 12
3630: IFFALSE 4181
// begin if enemyInBase then
3632: LD_VAR 0 14
3636: IFFALSE 3781
// begin for i in sol do
3638: LD_ADDR_VAR 0 1
3642: PUSH
3643: LD_VAR 0 12
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3777
// begin tw := IsInUnit ( i ) ;
3651: LD_ADDR_VAR 0 9
3655: PUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 310
3665: ST_TO_ADDR
// if tw then
3666: LD_VAR 0 9
3670: IFFALSE 3751
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
3672: LD_VAR 0 9
3676: PUSH
3677: LD_INT 22
3679: PUSH
3680: LD_VAR 0 5
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: LD_INT 101
3691: PUSH
3692: LD_INT 2
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 2
3701: PUSH
3702: LD_INT 30
3704: PUSH
3705: LD_INT 32
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 30
3714: PUSH
3715: LD_INT 31
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 69
3736: IN
3737: NOT
3738: IFFALSE 3749
// ComExitBuilding ( i ) ;
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 122
// end else
3749: GO 3775
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
3751: LD_VAR 0 1
3755: PPUSH
3756: LD_VAR 0 14
3760: PPUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 74
3770: PPUSH
3771: CALL_OW 115
// end ;
3775: GO 3648
3777: POP
3778: POP
// end else
3779: GO 4181
// begin empty := FilterUnitsInArea ( amBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
3781: LD_ADDR_VAR 0 15
3785: PUSH
3786: LD_INT 1
3788: PPUSH
3789: LD_INT 3
3791: PUSH
3792: LD_INT 62
3794: PUSH
3795: EMPTY
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: LD_INT 30
3807: PUSH
3808: LD_INT 32
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 30
3817: PUSH
3818: LD_INT 4
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 30
3827: PUSH
3828: LD_INT 5
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 30
3837: PUSH
3838: LD_INT 31
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 70
3860: ST_TO_ADDR
// if empty then
3861: LD_VAR 0 15
3865: IFFALSE 3882
// empty := ReverseArray ( empty ) ;
3867: LD_ADDR_VAR 0 15
3871: PUSH
3872: LD_VAR 0 15
3876: PPUSH
3877: CALL 53932 0 1
3881: ST_TO_ADDR
// for i in sol do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 12
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4179
// begin tag := GetTag ( i ) ;
3895: LD_ADDR_VAR 0 8
3899: PUSH
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL_OW 110
3909: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
3910: LD_VAR 0 1
3914: PPUSH
3915: CALL_OW 256
3919: PUSH
3920: LD_INT 1000
3922: LESS
3923: PUSH
3924: LD_VAR 0 8
3928: PUSH
3929: LD_INT 1
3931: NONEQUAL
3932: AND
3933: IFFALSE 3985
// begin SetTag ( i , tHeal ) ;
3935: LD_VAR 0 1
3939: PPUSH
3940: LD_INT 1
3942: PPUSH
3943: CALL_OW 109
// ComMoveXY ( i , amHealPoint [ 1 ] , amHealPoint [ 2 ] ) ;
3947: LD_VAR 0 1
3951: PPUSH
3952: LD_EXP 30
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: LD_EXP 30
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: PPUSH
3970: CALL_OW 111
// AddComHold ( i ) ;
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 200
// continue ;
3983: GO 3892
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
3985: LD_VAR 0 1
3989: PPUSH
3990: CALL_OW 256
3994: PUSH
3995: LD_INT 1000
3997: EQUAL
3998: PUSH
3999: LD_VAR 0 8
4003: PUSH
4004: LD_INT 1
4006: EQUAL
4007: AND
4008: IFFALSE 4024
// begin SetTag ( i , 0 ) ;
4010: LD_VAR 0 1
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 109
// continue ;
4022: GO 3892
// end ; if not IsInArea ( i , amBaseArea ) and not IsInUnit ( i ) then
4024: LD_VAR 0 1
4028: PPUSH
4029: LD_INT 1
4031: PPUSH
4032: CALL_OW 308
4036: NOT
4037: PUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 310
4047: NOT
4048: AND
4049: IFFALSE 4063
// ComMoveToArea ( i , amBaseArea ) ;
4051: LD_VAR 0 1
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 113
// if HasTask ( i ) then
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 314
4072: IFFALSE 4076
// continue ;
4074: GO 3892
// if not IsInUnit ( i ) and not tag and empty then
4076: LD_VAR 0 1
4080: PPUSH
4081: CALL_OW 310
4085: NOT
4086: PUSH
4087: LD_VAR 0 8
4091: NOT
4092: AND
4093: PUSH
4094: LD_VAR 0 15
4098: AND
4099: IFFALSE 4177
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4101: LD_VAR 0 1
4105: PPUSH
4106: LD_VAR 0 15
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: PPUSH
4115: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
4119: LD_VAR 0 15
4123: PUSH
4124: LD_INT 1
4126: ARRAY
4127: PPUSH
4128: CALL_OW 266
4132: PUSH
4133: LD_INT 5
4135: EQUAL
4136: PUSH
4137: LD_INT 50
4139: PPUSH
4140: CALL_OW 13
4144: AND
4145: IFFALSE 4159
// AddComChangeProfession ( i , class_sniper ) ;
4147: LD_VAR 0 1
4151: PPUSH
4152: LD_INT 5
4154: PPUSH
4155: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
4159: LD_ADDR_VAR 0 15
4163: PUSH
4164: LD_VAR 0 15
4168: PPUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL_OW 3
4176: ST_TO_ADDR
// end ; end ;
4177: GO 3892
4179: POP
4180: POP
// end ; end ; end ;
4181: PPOPN 18
4183: END
// every 0 0$2 trigger IsOk ( amCargo ) and amScriptActive do var cr , enemyInArea ;
4184: LD_EXP 34
4188: PPUSH
4189: CALL_OW 302
4193: PUSH
4194: LD_EXP 3
4198: AND
4199: IFFALSE 4481
4201: GO 4203
4203: DISABLE
4204: LD_INT 0
4206: PPUSH
4207: PPUSH
// begin enable ;
4208: ENABLE
// enemyInArea := FilterUnitsInArea ( amBaseArea , [ [ f_enemy , 1 ] , [ f_ok ] ] ) ;
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: LD_INT 1
4216: PPUSH
4217: LD_INT 81
4219: PUSH
4220: LD_INT 1
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: LD_INT 50
4229: PUSH
4230: EMPTY
4231: LIST
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PPUSH
4237: CALL_OW 70
4241: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesWestArea ) ;
4242: LD_ADDR_VAR 0 1
4246: PUSH
4247: LD_INT 17
4249: PPUSH
4250: CALL_OW 435
4254: ST_TO_ADDR
// if GetFuel ( amCargo ) < 10 and not See ( 2 , amCargo ) and GetEngine ( amCargo ) = engine_combustion then
4255: LD_EXP 34
4259: PPUSH
4260: CALL_OW 261
4264: PUSH
4265: LD_INT 10
4267: LESS
4268: PUSH
4269: LD_INT 2
4271: PPUSH
4272: LD_EXP 34
4276: PPUSH
4277: CALL_OW 292
4281: NOT
4282: AND
4283: PUSH
4284: LD_EXP 34
4288: PPUSH
4289: CALL_OW 262
4293: PUSH
4294: LD_INT 1
4296: EQUAL
4297: AND
4298: IFFALSE 4312
// SetFuel ( amCargo , 100 ) ;
4300: LD_EXP 34
4304: PPUSH
4305: LD_INT 100
4307: PPUSH
4308: CALL_OW 240
// if not HasTask ( amCargo ) and GetCargo ( amCargo , mat_cans ) < 100 and not enemyInArea then
4312: LD_EXP 34
4316: PPUSH
4317: CALL_OW 314
4321: NOT
4322: PUSH
4323: LD_EXP 34
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 289
4335: PUSH
4336: LD_INT 100
4338: LESS
4339: AND
4340: PUSH
4341: LD_VAR 0 2
4345: NOT
4346: AND
4347: IFFALSE 4413
// begin if cr then
4349: LD_VAR 0 1
4353: IFFALSE 4384
// ComCollect ( amCargo , cr [ 1 ] , cr [ 2 ] ) else
4355: LD_EXP 34
4359: PPUSH
4360: LD_VAR 0 1
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: PPUSH
4369: LD_VAR 0 1
4373: PUSH
4374: LD_INT 2
4376: ARRAY
4377: PPUSH
4378: CALL_OW 117
4382: GO 4411
// if not IsInArea ( amCargo , cratesWestArea ) then
4384: LD_EXP 34
4388: PPUSH
4389: LD_INT 17
4391: PPUSH
4392: CALL_OW 308
4396: NOT
4397: IFFALSE 4411
// ComMoveToArea ( amCargo , cratesWestArea ) ;
4399: LD_EXP 34
4403: PPUSH
4404: LD_INT 17
4406: PPUSH
4407: CALL_OW 113
// exit ;
4411: GO 4481
// end ; if enemyInArea and not IsInArea ( amCargo , amBaseArea ) then
4413: LD_VAR 0 2
4417: PUSH
4418: LD_EXP 34
4422: PPUSH
4423: LD_INT 1
4425: PPUSH
4426: CALL_OW 308
4430: NOT
4431: AND
4432: IFFALSE 4451
// ComMoveXY ( amCargo , 93 , 137 ) else
4434: LD_EXP 34
4438: PPUSH
4439: LD_INT 93
4441: PPUSH
4442: LD_INT 137
4444: PPUSH
4445: CALL_OW 111
4449: GO 4481
// if GetCargo ( amCargo , mat_cans ) = 100 then
4451: LD_EXP 34
4455: PPUSH
4456: LD_INT 1
4458: PPUSH
4459: CALL_OW 289
4463: PUSH
4464: LD_INT 100
4466: EQUAL
4467: IFFALSE 4481
// ComGive ( amCargo , amBase ) ;
4469: LD_EXP 34
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 161
// end ;
4481: PPOPN 2
4483: END
// every 0 0$2 trigger amScriptActive and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) do var i , tmp , tmp2 ;
4484: LD_EXP 3
4488: PUSH
4489: LD_INT 22
4491: PUSH
4492: LD_INT 1
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 3
4501: PUSH
4502: LD_INT 60
4504: PUSH
4505: EMPTY
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 50
4514: PUSH
4515: EMPTY
4516: LIST
4517: PUSH
4518: LD_INT 34
4520: PUSH
4521: LD_INT 13
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: PPUSH
4534: CALL_OW 69
4538: AND
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 24
4555: PUSH
4556: LD_INT 1000
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 21
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: PPUSH
4582: CALL_OW 69
4586: AND
4587: IFFALSE 4820
4589: GO 4591
4591: DISABLE
4592: LD_INT 0
4594: PPUSH
4595: PPUSH
4596: PPUSH
// begin enable ;
4597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4598: LD_ADDR_VAR 0 2
4602: PUSH
4603: LD_INT 22
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PUSH
4613: LD_INT 3
4615: PUSH
4616: LD_INT 24
4618: PUSH
4619: LD_INT 1000
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 21
4632: PUSH
4633: LD_INT 3
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: PPUSH
4645: CALL_OW 69
4649: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 600 ] ] , [ f_type , unit_building ] ] ) ;
4650: LD_ADDR_VAR 0 3
4654: PUSH
4655: LD_INT 22
4657: PUSH
4658: LD_INT 1
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 3
4667: PUSH
4668: LD_INT 24
4670: PUSH
4671: LD_INT 600
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PPUSH
4697: CALL_OW 69
4701: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_hastask ] ] , [ f_ok ] , [ f_weapon , us_crane ] ] ) do
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: LD_INT 22
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: LD_INT 60
4722: PUSH
4723: EMPTY
4724: LIST
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PUSH
4730: LD_INT 50
4732: PUSH
4733: EMPTY
4734: LIST
4735: PUSH
4736: LD_INT 34
4738: PUSH
4739: LD_INT 13
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: PPUSH
4752: CALL_OW 69
4756: PUSH
4757: FOR_IN
4758: IFFALSE 4818
// begin if tmp2 then
4760: LD_VAR 0 3
4764: IFFALSE 4792
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp2 , i ) ) else
4766: LD_VAR 0 1
4770: PPUSH
4771: LD_VAR 0 3
4775: PPUSH
4776: LD_VAR 0 1
4780: PPUSH
4781: CALL_OW 74
4785: PPUSH
4786: CALL_OW 130
4790: GO 4816
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
4792: LD_VAR 0 1
4796: PPUSH
4797: LD_VAR 0 2
4801: PPUSH
4802: LD_VAR 0 1
4806: PPUSH
4807: CALL_OW 74
4811: PPUSH
4812: CALL_OW 130
// end ;
4816: GO 4757
4818: POP
4819: POP
// end ;
4820: PPOPN 3
4822: END
// every 0 0$2 trigger amPatrol and gameActive and not americanDestroyed do var i , j , points , x , y , tag , enemy ;
4823: LD_EXP 35
4827: PUSH
4828: LD_EXP 19
4832: AND
4833: PUSH
4834: LD_EXP 11
4838: NOT
4839: AND
4840: IFFALSE 5165
4842: GO 4844
4844: DISABLE
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
// begin enable ;
4854: ENABLE
// points := [ [ patrol1aArea , patrol1bArea ] , [ patrol2aArea , patrol2bArea , patrol2cArea , patrol2dArea , patrol2bArea ] , [ patrol3aArea , patrol3bArea , patrol3cArea , patrol3dArea , patrol3eArea , patrol3fArea , patrol3gArea , patrol3hArea ] ] ;
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_INT 30
4862: PUSH
4863: LD_INT 31
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: LD_INT 33
4875: PUSH
4876: LD_INT 34
4878: PUSH
4879: LD_INT 35
4881: PUSH
4882: LD_INT 33
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 36
4894: PUSH
4895: LD_INT 37
4897: PUSH
4898: LD_INT 38
4900: PUSH
4901: LD_INT 39
4903: PUSH
4904: LD_INT 40
4906: PUSH
4907: LD_INT 41
4909: PUSH
4910: LD_INT 42
4912: PUSH
4913: LD_INT 43
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// for i in amPatrol do
4931: LD_ADDR_VAR 0 1
4935: PUSH
4936: LD_EXP 35
4940: PUSH
4941: FOR_IN
4942: IFFALSE 5163
// begin if See ( 2 , i ) then
4944: LD_INT 2
4946: PPUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 292
4956: IFFALSE 5059
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ;
4958: LD_ADDR_VAR 0 7
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 2
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PPUSH
4973: CALL_OW 69
4977: PPUSH
4978: LD_VAR 0 1
4982: PPUSH
4983: CALL_OW 74
4987: ST_TO_ADDR
// if enemy then
4988: LD_VAR 0 7
4992: IFFALSE 5059
// begin x := GetX ( enemy ) ;
4994: LD_ADDR_VAR 0 4
4998: PUSH
4999: LD_VAR 0 7
5003: PPUSH
5004: CALL_OW 250
5008: ST_TO_ADDR
// y := GetY ( enemy ) ;
5009: LD_ADDR_VAR 0 5
5013: PUSH
5014: LD_VAR 0 7
5018: PPUSH
5019: CALL_OW 251
5023: ST_TO_ADDR
// if ValidHex ( x , y ) then
5024: LD_VAR 0 4
5028: PPUSH
5029: LD_VAR 0 5
5033: PPUSH
5034: CALL_OW 488
5038: IFFALSE 5059
// ComAgressiveMove ( i , x , y ) ;
5040: LD_VAR 0 1
5044: PPUSH
5045: LD_VAR 0 4
5049: PPUSH
5050: LD_VAR 0 5
5054: PPUSH
5055: CALL_OW 114
// end ; end ; if HasTask ( i ) then
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 314
5068: IFFALSE 5072
// continue ;
5070: GO 4941
// tag := GetTag ( i ) ;
5072: LD_ADDR_VAR 0 6
5076: PUSH
5077: LD_VAR 0 1
5081: PPUSH
5082: CALL_OW 110
5086: ST_TO_ADDR
// for j := 1 to points [ tag ] do
5087: LD_ADDR_VAR 0 2
5091: PUSH
5092: DOUBLE
5093: LD_INT 1
5095: DEC
5096: ST_TO_ADDR
5097: LD_VAR 0 3
5101: PUSH
5102: LD_VAR 0 6
5106: ARRAY
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5159
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
5111: LD_VAR 0 1
5115: PPUSH
5116: LD_VAR 0 3
5120: PUSH
5121: LD_VAR 0 6
5125: ARRAY
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: CALL_OW 173
// AddComWait ( i , rand ( 0 0$5 , 0 0$11 ) ) ;
5137: LD_VAR 0 1
5141: PPUSH
5142: LD_INT 175
5144: PPUSH
5145: LD_INT 385
5147: PPUSH
5148: CALL_OW 12
5152: PPUSH
5153: CALL_OW 202
// end ;
5157: GO 5108
5159: POP
5160: POP
// end ;
5161: GO 4941
5163: POP
5164: POP
// end ;
5165: PPOPN 7
5167: END
// every 10 10$00 trigger Count ( amTanks ) < 5 and amScriptActive and spotByAmerican and spotArabianBase do var i , parts , part ;
5168: LD_EXP 32
5172: PPUSH
5173: CALL 23056 0 1
5177: PUSH
5178: LD_INT 5
5180: LESS
5181: PUSH
5182: LD_EXP 3
5186: AND
5187: PUSH
5188: LD_EXP 8
5192: AND
5193: PUSH
5194: LD_EXP 7
5198: AND
5199: IFFALSE 5459
5201: GO 5203
5203: DISABLE
5204: LD_INT 0
5206: PPUSH
5207: PPUSH
5208: PPUSH
// begin enable ;
5209: ENABLE
// parts := [ [ us_medium_tracked , us_laser ] , [ us_heavy_tracked , us_laser ] , [ us_heavy_tracked , us_heavy_gun ] , [ us_medium_tracked , us_double_gun ] , [ us_medium_wheeled , us_gatling_gun ] , [ us_light_wheeled , us_machine_gun ] ] ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_INT 3
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 4
5227: PUSH
5228: LD_INT 9
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 4
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 3
5247: PUSH
5248: LD_INT 5
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 2
5257: PUSH
5258: LD_INT 4
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: LD_INT 2
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: ST_TO_ADDR
// if americanWave > [ 5 , 6 , 7 , 8 ] [ Difficulty ] then
5283: LD_EXP 22
5287: PUSH
5288: LD_INT 5
5290: PUSH
5291: LD_INT 6
5293: PUSH
5294: LD_INT 7
5296: PUSH
5297: LD_INT 8
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: PUSH
5306: LD_OWVAR 67
5310: ARRAY
5311: GREATER
5312: IFFALSE 5343
// americanWave := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
5314: LD_ADDR_EXP 22
5318: PUSH
5319: LD_INT 5
5321: PUSH
5322: LD_INT 6
5324: PUSH
5325: LD_INT 7
5327: PUSH
5328: LD_INT 8
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: PUSH
5337: LD_OWVAR 67
5341: ARRAY
5342: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + americanWave do
5343: LD_ADDR_VAR 0 1
5347: PUSH
5348: DOUBLE
5349: LD_INT 1
5351: DEC
5352: ST_TO_ADDR
5353: LD_INT 3
5355: PUSH
5356: LD_INT 4
5358: PUSH
5359: LD_INT 5
5361: PUSH
5362: LD_INT 6
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_OWVAR 67
5375: ARRAY
5376: PUSH
5377: LD_EXP 22
5381: PLUS
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5457
// begin part := parts [ rand ( 1 , parts ) ] ;
5386: LD_ADDR_VAR 0 3
5390: PUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 1
5398: PPUSH
5399: LD_VAR 0 2
5403: PPUSH
5404: CALL_OW 12
5408: ARRAY
5409: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
5410: LD_ADDR_EXP 29
5414: PUSH
5415: LD_EXP 29
5419: PPUSH
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 1
5427: ARRAY
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: LD_INT 2
5434: PUSH
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 2
5442: ARRAY
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: PPUSH
5450: CALL 58665 0 2
5454: ST_TO_ADDR
5455: GO 5383
5457: POP
5458: POP
// end ;
5459: PPOPN 3
5461: END
// every 3 3$00 trigger not americanDestroyed and Count ( amTanks ) and spotByAmerican and spotArabianBase do var i , tmp , tmp2 ;
5462: LD_EXP 11
5466: NOT
5467: PUSH
5468: LD_EXP 32
5472: PPUSH
5473: CALL 23056 0 1
5477: AND
5478: PUSH
5479: LD_EXP 8
5483: AND
5484: PUSH
5485: LD_EXP 7
5489: AND
5490: IFFALSE 5839
5492: GO 5494
5494: DISABLE
5495: LD_INT 0
5497: PPUSH
5498: PPUSH
5499: PPUSH
// begin enable ;
5500: ENABLE
// tmp := UnitFilter ( amTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
5501: LD_ADDR_VAR 0 2
5505: PUSH
5506: LD_EXP 32
5510: PPUSH
5511: LD_INT 61
5513: PUSH
5514: EMPTY
5515: LIST
5516: PUSH
5517: LD_INT 50
5519: PUSH
5520: EMPTY
5521: LIST
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PPUSH
5527: CALL_OW 72
5531: ST_TO_ADDR
// amTanks := amTanks diff tmp ;
5532: LD_ADDR_EXP 32
5536: PUSH
5537: LD_EXP 32
5541: PUSH
5542: LD_VAR 0 2
5546: DIFF
5547: ST_TO_ADDR
// if not tmp then
5548: LD_VAR 0 2
5552: NOT
5553: IFFALSE 5557
// exit ;
5555: GO 5839
// tmp2 := UnitFilter ( tmp , [ f_weapon , us_machine_gun ] ) ;
5557: LD_ADDR_VAR 0 3
5561: PUSH
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_INT 34
5569: PUSH
5570: LD_INT 2
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PPUSH
5577: CALL_OW 72
5581: ST_TO_ADDR
// if tmp2 then
5582: LD_VAR 0 3
5586: IFFALSE 5604
// tmp := tmp diff tmp2 ;
5588: LD_ADDR_VAR 0 2
5592: PUSH
5593: LD_VAR 0 2
5597: PUSH
5598: LD_VAR 0 3
5602: DIFF
5603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5604: LD_INT 35
5606: PPUSH
5607: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
5611: LD_ADDR_VAR 0 2
5615: PUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: LD_INT 50
5623: PUSH
5624: EMPTY
5625: LIST
5626: PPUSH
5627: CALL_OW 72
5631: ST_TO_ADDR
// for i in tmp do
5632: LD_ADDR_VAR 0 1
5636: PUSH
5637: LD_VAR 0 2
5641: PUSH
5642: FOR_IN
5643: IFFALSE 5691
// AgressiveMove ( i , [ [ 187 , 114 ] , [ 203 , 113 ] , [ 218 , 108 ] ] ) ;
5645: LD_VAR 0 1
5649: PPUSH
5650: LD_INT 187
5652: PUSH
5653: LD_INT 114
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 203
5662: PUSH
5663: LD_INT 113
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 218
5672: PUSH
5673: LD_INT 108
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: PPUSH
5685: CALL 61275 0 2
5689: GO 5642
5691: POP
5692: POP
// tmp2 := UnitFilter ( tmp2 , [ f_ok ] ) ;
5693: LD_ADDR_VAR 0 3
5697: PUSH
5698: LD_VAR 0 3
5702: PPUSH
5703: LD_INT 50
5705: PUSH
5706: EMPTY
5707: LIST
5708: PPUSH
5709: CALL_OW 72
5713: ST_TO_ADDR
// for i in tmp2 do
5714: LD_ADDR_VAR 0 1
5718: PUSH
5719: LD_VAR 0 3
5723: PUSH
5724: FOR_IN
5725: IFFALSE 5815
// if GetDistUnitXY ( i , 242 , 105 ) > 12 then
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 242
5734: PPUSH
5735: LD_INT 105
5737: PPUSH
5738: CALL_OW 297
5742: PUSH
5743: LD_INT 12
5745: GREATER
5746: IFFALSE 5765
// ComMoveXY ( i , 242 , 105 ) else
5748: LD_VAR 0 1
5752: PPUSH
5753: LD_INT 242
5755: PPUSH
5756: LD_INT 105
5758: PPUSH
5759: CALL_OW 111
5763: GO 5813
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 1 ] , [ f_type , unit_human ] ] ) , i ) ) ;
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_INT 81
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 21
5782: PUSH
5783: LD_INT 1
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: PPUSH
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 74
5808: PPUSH
5809: CALL_OW 115
5813: GO 5724
5815: POP
5816: POP
// until not tmp ;
5817: LD_VAR 0 2
5821: NOT
5822: IFFALSE 5604
// americanWave := Inc ( americanWave ) ;
5824: LD_ADDR_EXP 22
5828: PUSH
5829: LD_EXP 22
5833: PPUSH
5834: CALL 60026 0 1
5838: ST_TO_ADDR
// end ; end_of_file
5839: PPOPN 3
5841: END
// export Farmer ; export legForces , legEForces , legTech , legConstructList , legHealPoint , legBuildings , legTanks , legRTanks , legCargo ; export function PrepareLegion ; var i , j , b , un , skill , sources ; begin
5842: LD_INT 0
5844: PPUSH
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
// uc_side := 8 ;
5851: LD_ADDR_OWVAR 20
5855: PUSH
5856: LD_INT 8
5858: ST_TO_ADDR
// uc_nation := nation_arabian ;
5859: LD_ADDR_OWVAR 21
5863: PUSH
5864: LD_INT 2
5866: ST_TO_ADDR
// legForces := [ ] ;
5867: LD_ADDR_EXP 37
5871: PUSH
5872: EMPTY
5873: ST_TO_ADDR
// legEForces := [ ] ;
5874: LD_ADDR_EXP 38
5878: PUSH
5879: EMPTY
5880: ST_TO_ADDR
// legTech := GetTechNation ( 8 , nation_arabian , state_enabled ) ;
5881: LD_ADDR_EXP 39
5885: PUSH
5886: LD_INT 8
5888: PPUSH
5889: LD_INT 2
5891: PPUSH
5892: LD_INT 1
5894: PPUSH
5895: CALL 21017 0 3
5899: ST_TO_ADDR
// legConstructList := [ [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ;
5900: LD_ADDR_EXP 40
5904: PUSH
5905: LD_INT 13
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: LD_INT 32
5916: PUSH
5917: EMPTY
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ST_TO_ADDR
// legHealPoint := [ 195 , 15 ] ;
5926: LD_ADDR_EXP 41
5930: PUSH
5931: LD_INT 195
5933: PUSH
5934: LD_INT 15
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: ST_TO_ADDR
// legBuildings := [ ] ;
5941: LD_ADDR_EXP 42
5945: PUSH
5946: EMPTY
5947: ST_TO_ADDR
// legTanks := [ ] ;
5948: LD_ADDR_EXP 43
5952: PUSH
5953: EMPTY
5954: ST_TO_ADDR
// legRTanks := [ ] ;
5955: LD_ADDR_EXP 44
5959: PUSH
5960: EMPTY
5961: ST_TO_ADDR
// legCargo := 0 ;
5962: LD_ADDR_EXP 45
5966: PUSH
5967: LD_INT 0
5969: ST_TO_ADDR
// sources := [ [ 219 , 31 ] , [ 166 , 31 ] ] ;
5970: LD_ADDR_VAR 0 7
5974: PUSH
5975: LD_INT 219
5977: PUSH
5978: LD_INT 31
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 166
5987: PUSH
5988: LD_INT 31
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: ST_TO_ADDR
// for i in sources do
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_VAR 0 7
6008: PUSH
6009: FOR_IN
6010: IFFALSE 6039
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 8 ) ;
6012: LD_VAR 0 2
6016: PUSH
6017: LD_INT 1
6019: ARRAY
6020: PPUSH
6021: LD_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: ARRAY
6029: PPUSH
6030: LD_INT 8
6032: PPUSH
6033: CALL_OW 441
6037: GO 6009
6039: POP
6040: POP
// SetResourceType ( GetBase ( legBase ) , mat_cans , 650 ) ;
6041: LD_INT 38
6043: PPUSH
6044: CALL_OW 274
6048: PPUSH
6049: LD_INT 1
6051: PPUSH
6052: LD_INT 650
6054: PPUSH
6055: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_oil , 120 ) ;
6059: LD_INT 38
6061: PPUSH
6062: CALL_OW 274
6066: PPUSH
6067: LD_INT 2
6069: PPUSH
6070: LD_INT 120
6072: PPUSH
6073: CALL_OW 277
// SetResourceType ( GetBase ( legBase ) , mat_siberit , 50 ) ;
6077: LD_INT 38
6079: PPUSH
6080: CALL_OW 274
6084: PPUSH
6085: LD_INT 3
6087: PPUSH
6088: LD_INT 50
6090: PPUSH
6091: CALL_OW 277
// skill := [ 6 , 7 , 8 , 9 ] [ Difficulty ] ;
6095: LD_ADDR_VAR 0 6
6099: PUSH
6100: LD_INT 6
6102: PUSH
6103: LD_INT 7
6105: PUSH
6106: LD_INT 8
6108: PUSH
6109: LD_INT 9
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: LD_OWVAR 67
6122: ARRAY
6123: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
6124: LD_ADDR_EXP 36
6128: PUSH
6129: LD_STRING Farmer
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: LD_STRING 
6137: PPUSH
6138: CALL 20870 0 3
6142: ST_TO_ADDR
// for i := 1 to 4 do
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: DOUBLE
6149: LD_INT 1
6151: DEC
6152: ST_TO_ADDR
6153: LD_INT 4
6155: PUSH
6156: FOR_TO
6157: IFFALSE 6674
// for j := 1 to [ [ 7 , 8 , 9 , 11 ] [ Difficulty ] , [ 3 , 4 , 5 , 5 ] [ Difficulty ] , 3 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
6159: LD_ADDR_VAR 0 3
6163: PUSH
6164: DOUBLE
6165: LD_INT 1
6167: DEC
6168: ST_TO_ADDR
6169: LD_INT 7
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: LD_INT 11
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: PUSH
6187: LD_OWVAR 67
6191: ARRAY
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: LD_INT 4
6198: PUSH
6199: LD_INT 5
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_OWVAR 67
6215: ARRAY
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 3
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: PUSH
6238: LD_OWVAR 67
6242: ARRAY
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_VAR 0 2
6254: ARRAY
6255: PUSH
6256: FOR_TO
6257: IFFALSE 6670
// begin PrepareHuman ( false , i , skill ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_VAR 0 2
6266: PPUSH
6267: LD_VAR 0 6
6271: PPUSH
6272: CALL_OW 380
// un := CreateHuman ;
6276: LD_ADDR_VAR 0 5
6280: PUSH
6281: CALL_OW 44
6285: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6286: LD_ADDR_EXP 37
6290: PUSH
6291: LD_EXP 37
6295: PPUSH
6296: LD_VAR 0 5
6300: PPUSH
6301: CALL 58665 0 2
6305: ST_TO_ADDR
// case i of 1 :
6306: LD_VAR 0 2
6310: PUSH
6311: LD_INT 1
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6388
6319: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ; 2 :
6320: LD_ADDR_VAR 0 4
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_INT 8
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: LD_INT 30
6340: PUSH
6341: LD_INT 32
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 30
6350: PUSH
6351: LD_INT 5
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 62
6368: PUSH
6369: EMPTY
6370: LIST
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: LIST
6380: PPUSH
6381: CALL_OW 69
6385: ST_TO_ADDR
6386: GO 6567
6388: LD_INT 2
6390: DOUBLE
6391: EQUAL
6392: IFTRUE 6396
6394: GO 6425
6396: POP
// b := UnitFilter ( legBase , [ f_not , [ f_full ] ] ) ; 3 :
6397: LD_ADDR_VAR 0 4
6401: PUSH
6402: LD_INT 38
6404: PPUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 62
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 72
6422: ST_TO_ADDR
6423: GO 6567
6425: LD_INT 3
6427: DOUBLE
6428: EQUAL
6429: IFTRUE 6433
6431: GO 6507
6433: POP
// b := ReverseArray ( FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_control_tower ] ] , [ f_not , [ f_full ] ] ] ) ) ; 4 :
6434: LD_ADDR_VAR 0 4
6438: PUSH
6439: LD_INT 22
6441: PUSH
6442: LD_INT 8
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 2
6451: PUSH
6452: LD_INT 30
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 30
6464: PUSH
6465: LD_INT 36
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 62
6482: PUSH
6483: EMPTY
6484: LIST
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: PPUSH
6500: CALL 53932 0 1
6504: ST_TO_ADDR
6505: GO 6567
6507: LD_INT 4
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6566
6515: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_lab_full ] , [ f_not , [ f_full ] ] ] ) ; end ;
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: LD_INT 22
6523: PUSH
6524: LD_INT 8
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 30
6533: PUSH
6534: LD_INT 8
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 62
6546: PUSH
6547: EMPTY
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: ST_TO_ADDR
6564: GO 6567
6566: POP
// if b then
6567: LD_VAR 0 4
6571: IFFALSE 6647
// begin if GetBType ( b [ 1 ] ) = b_barracks then
6573: LD_VAR 0 4
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: PPUSH
6582: CALL_OW 266
6586: PUSH
6587: LD_INT 5
6589: EQUAL
6590: IFFALSE 6627
// if Prob ( 50 ) then
6592: LD_INT 50
6594: PPUSH
6595: CALL_OW 13
6599: IFFALSE 6615
// SetClass ( un , class_mortar ) else
6601: LD_VAR 0 5
6605: PPUSH
6606: LD_INT 8
6608: PPUSH
6609: CALL_OW 336
6613: GO 6627
// SetClass ( un , class_sniper ) ;
6615: LD_VAR 0 5
6619: PPUSH
6620: LD_INT 5
6622: PPUSH
6623: CALL_OW 336
// PlaceHumanInUnit ( un , b [ 1 ] ) ;
6627: LD_VAR 0 5
6631: PPUSH
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 1
6639: ARRAY
6640: PPUSH
6641: CALL_OW 52
// end else
6645: GO 6668
// PlaceUnitXYR ( un , 188 , 21 , 4 , false ) ;
6647: LD_VAR 0 5
6651: PPUSH
6652: LD_INT 188
6654: PPUSH
6655: LD_INT 21
6657: PPUSH
6658: LD_INT 4
6660: PPUSH
6661: LD_INT 0
6663: PPUSH
6664: CALL_OW 50
// end ;
6668: GO 6256
6670: POP
6671: POP
6672: GO 6156
6674: POP
6675: POP
// b := FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] ] ) ;
6676: LD_ADDR_VAR 0 4
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_INT 8
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 30
6696: PUSH
6697: LD_INT 32
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 30
6706: PUSH
6707: LD_INT 5
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 62
6724: PUSH
6725: EMPTY
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: PPUSH
6737: CALL_OW 69
6741: ST_TO_ADDR
// if b then
6742: LD_VAR 0 4
6746: IFFALSE 6813
// begin for i in b do
6748: LD_ADDR_VAR 0 2
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: FOR_IN
6759: IFFALSE 6811
// begin PrepareApemanSoldier ( ) ;
6761: CALL 54755 0 0
// un := CreateHuman ;
6765: LD_ADDR_VAR 0 5
6769: PUSH
6770: CALL_OW 44
6774: ST_TO_ADDR
// legForces := Join ( legForces , un ) ;
6775: LD_ADDR_EXP 37
6779: PUSH
6780: LD_EXP 37
6784: PPUSH
6785: LD_VAR 0 5
6789: PPUSH
6790: CALL 58665 0 2
6794: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6795: LD_VAR 0 5
6799: PPUSH
6800: LD_VAR 0 2
6804: PPUSH
6805: CALL_OW 52
// end ;
6809: GO 6758
6811: POP
6812: POP
// end ; for i := 1 to 2 do
6813: LD_ADDR_VAR 0 2
6817: PUSH
6818: DOUBLE
6819: LD_INT 1
6821: DEC
6822: ST_TO_ADDR
6823: LD_INT 2
6825: PUSH
6826: FOR_TO
6827: IFFALSE 6954
// begin uc_nation := nation_arabian ;
6829: LD_ADDR_OWVAR 21
6833: PUSH
6834: LD_INT 2
6836: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_solar , control_manual , ar_control_tower , 100 ) ;
6837: LD_INT 13
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 31
6848: PPUSH
6849: LD_INT 100
6851: PPUSH
6852: CALL 25794 0 5
// un := CreateVehicle ;
6856: LD_ADDR_VAR 0 5
6860: PUSH
6861: CALL_OW 45
6865: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 0
6873: PPUSH
6874: LD_INT 5
6876: PPUSH
6877: CALL_OW 12
6881: PPUSH
6882: CALL_OW 233
// PlaceUnitXYR ( un , 199 , 24 , 4 , false ) ;
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 199
6893: PPUSH
6894: LD_INT 24
6896: PPUSH
6897: LD_INT 4
6899: PPUSH
6900: LD_INT 0
6902: PPUSH
6903: CALL_OW 50
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
6907: LD_INT 0
6909: PPUSH
6910: LD_INT 8
6912: PUSH
6913: LD_INT 9
6915: PUSH
6916: LD_INT 10
6918: PUSH
6919: LD_INT 10
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: LD_OWVAR 67
6932: ARRAY
6933: PPUSH
6934: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
6938: CALL_OW 44
6942: PPUSH
6943: LD_VAR 0 5
6947: PPUSH
6948: CALL_OW 52
// end ;
6952: GO 6826
6954: POP
6955: POP
// end ;
6956: LD_VAR 0 1
6960: RET
// every 0 0$2 trigger legScriptActive and Count ( legForces ) do var i , tmp , remote , undone , side , lab , eng , tag , tw , cr , sci , mech , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
6961: LD_EXP 4
6965: PUSH
6966: LD_EXP 37
6970: PPUSH
6971: CALL 23056 0 1
6975: AND
6976: IFFALSE 9499
6978: GO 6980
6980: DISABLE
6981: LD_INT 0
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
// begin enable ;
7002: ENABLE
// side := 8 ;
7003: LD_ADDR_VAR 0 5
7007: PUSH
7008: LD_INT 8
7010: ST_TO_ADDR
// remote := FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 5
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 33
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 50
7040: PUSH
7041: EMPTY
7042: LIST
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 61
7049: PUSH
7050: EMPTY
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: ST_TO_ADDR
// if remote and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ) then
7068: LD_VAR 0 3
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_VAR 0 5
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 50
7087: PUSH
7088: EMPTY
7089: LIST
7090: PUSH
7091: LD_INT 34
7093: PUSH
7094: LD_INT 31
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: PPUSH
7111: CALL 23056 0 1
7115: AND
7116: IFFALSE 7144
// for i in remote do
7118: LD_ADDR_VAR 0 1
7122: PUSH
7123: LD_VAR 0 3
7127: PUSH
7128: FOR_IN
7129: IFFALSE 7142
// Connect ( i ) ;
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL 29262 0 1
7140: GO 7128
7142: POP
7143: POP
// if legTech then
7144: LD_EXP 39
7148: IFFALSE 7304
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7150: LD_ADDR_VAR 0 6
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_VAR 0 5
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 50
7169: PUSH
7170: EMPTY
7171: LIST
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: LD_INT 30
7178: PUSH
7179: LD_INT 6
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 30
7188: PUSH
7189: LD_INT 7
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 30
7198: PUSH
7199: LD_INT 8
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: ST_TO_ADDR
// if lab then
7222: LD_VAR 0 6
7226: IFFALSE 7304
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7228: LD_VAR 0 6
7232: PUSH
7233: LD_INT 1
7235: ARRAY
7236: PPUSH
7237: CALL_OW 461
7241: PUSH
7242: LD_INT 2
7244: EQUAL
7245: IFFALSE 7304
// begin for i in legTech do
7247: LD_ADDR_VAR 0 1
7251: PUSH
7252: LD_EXP 39
7256: PUSH
7257: FOR_IN
7258: IFFALSE 7302
// if CanBeResearched ( lab [ 1 ] , i ) then
7260: LD_VAR 0 6
7264: PUSH
7265: LD_INT 1
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 430
7278: IFFALSE 7300
// begin ComResearch ( lab [ 1 ] , i ) ;
7280: LD_VAR 0 6
7284: PUSH
7285: LD_INT 1
7287: ARRAY
7288: PPUSH
7289: LD_VAR 0 1
7293: PPUSH
7294: CALL_OW 124
// break ;
7298: GO 7302
// end ;
7300: GO 7257
7302: POP
7303: POP
// end ; end ; end ; fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7304: LD_ADDR_VAR 0 17
7308: PUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 22
7314: PUSH
7315: LD_VAR 0 5
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 3
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 50
7336: PUSH
7337: EMPTY
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 70
7349: ST_TO_ADDR
// if fac then
7350: LD_VAR 0 17
7354: IFFALSE 7730
// begin mech := UnitFilter ( legForces , [ [ f_tag , tMech ] , [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) ;
7356: LD_ADDR_VAR 0 12
7360: PUSH
7361: LD_EXP 37
7365: PPUSH
7366: LD_INT 120
7368: PUSH
7369: LD_INT 7
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: LD_INT 54
7391: PUSH
7392: EMPTY
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_INT 55
7404: PUSH
7405: EMPTY
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 72
7422: ST_TO_ADDR
// if mech and UnitsInside ( fac [ 1 ] ) < 6 then
7423: LD_VAR 0 12
7427: PUSH
7428: LD_VAR 0 17
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PPUSH
7437: CALL_OW 313
7441: PUSH
7442: LD_INT 6
7444: LESS
7445: AND
7446: IFFALSE 7466
// ComEnterUnit ( mech , fac [ 1 ] ) ;
7448: LD_VAR 0 12
7452: PPUSH
7453: LD_VAR 0 17
7457: PUSH
7458: LD_INT 1
7460: ARRAY
7461: PPUSH
7462: CALL_OW 120
// if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7466: LD_VAR 0 17
7470: PUSH
7471: LD_INT 1
7473: ARRAY
7474: PPUSH
7475: CALL_OW 461
7479: PUSH
7480: LD_INT 2
7482: EQUAL
7483: IFFALSE 7730
// begin emptyTowers := FilterUnitsInArea ( legBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7485: LD_ADDR_VAR 0 18
7489: PUSH
7490: LD_INT 2
7492: PPUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 30
7498: PUSH
7499: LD_INT 32
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 30
7508: PUSH
7509: LD_INT 33
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 35
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 70
7539: ST_TO_ADDR
// if emptyTowers then
7540: LD_VAR 0 18
7544: IFFALSE 7592
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , legBaseArea ) ;
7546: LD_ADDR_VAR 0 19
7550: PUSH
7551: LD_VAR 0 18
7555: PUSH
7556: LD_INT 1
7558: ARRAY
7559: PPUSH
7560: LD_INT 2
7562: PPUSH
7563: CALL 31301 0 2
7567: ST_TO_ADDR
// if weapon then
7568: LD_VAR 0 19
7572: IFFALSE 7592
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7574: LD_VAR 0 18
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: LD_VAR 0 19
7587: PPUSH
7588: CALL_OW 148
// end ; if legConstructList then
7592: LD_EXP 40
7596: IFFALSE 7730
// if CanBeConstructed ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) then
7598: LD_VAR 0 17
7602: PUSH
7603: LD_INT 1
7605: ARRAY
7606: PPUSH
7607: LD_EXP 40
7611: PUSH
7612: LD_INT 1
7614: ARRAY
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_EXP 40
7624: PUSH
7625: LD_INT 1
7627: ARRAY
7628: PUSH
7629: LD_INT 2
7631: ARRAY
7632: PPUSH
7633: LD_EXP 40
7637: PUSH
7638: LD_INT 1
7640: ARRAY
7641: PUSH
7642: LD_INT 3
7644: ARRAY
7645: PPUSH
7646: LD_EXP 40
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PUSH
7655: LD_INT 4
7657: ARRAY
7658: PPUSH
7659: CALL_OW 448
7663: IFFALSE 7730
// ComConstruct ( fac [ 1 ] , legConstructList [ 1 ] [ 1 ] , legConstructList [ 1 ] [ 2 ] , legConstructList [ 1 ] [ 3 ] , legConstructList [ 1 ] [ 4 ] ) ;
7665: LD_VAR 0 17
7669: PUSH
7670: LD_INT 1
7672: ARRAY
7673: PPUSH
7674: LD_EXP 40
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: PUSH
7683: LD_INT 1
7685: ARRAY
7686: PPUSH
7687: LD_EXP 40
7691: PUSH
7692: LD_INT 1
7694: ARRAY
7695: PUSH
7696: LD_INT 2
7698: ARRAY
7699: PPUSH
7700: LD_EXP 40
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PUSH
7709: LD_INT 3
7711: ARRAY
7712: PPUSH
7713: LD_EXP 40
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: PUSH
7722: LD_INT 4
7724: ARRAY
7725: PPUSH
7726: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( legBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 2
7737: PPUSH
7738: LD_INT 21
7740: PUSH
7741: LD_INT 3
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 3
7750: PUSH
7751: LD_INT 57
7753: PUSH
7754: EMPTY
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 3
7763: PUSH
7764: LD_INT 24
7766: PUSH
7767: LD_INT 1000
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 70
7787: ST_TO_ADDR
// cr := GetListOfCratesInArea ( legCratesArea ) ;
7788: LD_ADDR_VAR 0 10
7792: PUSH
7793: LD_INT 14
7795: PPUSH
7796: CALL_OW 435
7800: ST_TO_ADDR
// sci := UnitFilter ( legForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
7801: LD_ADDR_VAR 0 11
7805: PUSH
7806: LD_EXP 37
7810: PPUSH
7811: LD_INT 25
7813: PUSH
7814: LD_INT 4
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 50
7823: PUSH
7824: EMPTY
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 72
7835: ST_TO_ADDR
// lab := FilterUnitsInArea ( legBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7836: LD_ADDR_VAR 0 6
7840: PUSH
7841: LD_INT 2
7843: PPUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 30
7849: PUSH
7850: LD_INT 6
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 30
7859: PUSH
7860: LD_INT 7
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 30
7869: PUSH
7870: LD_INT 8
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PPUSH
7883: CALL_OW 70
7887: ST_TO_ADDR
// if sci then
7888: LD_VAR 0 11
7892: IFFALSE 8051
// begin hurtUnits := UnitFilter ( legForces , [ [ f_inarea , legBaseArea ] , [ f_tag , tHeal ] ] ) ;
7894: LD_ADDR_VAR 0 14
7898: PUSH
7899: LD_EXP 37
7903: PPUSH
7904: LD_INT 95
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 120
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 72
7932: ST_TO_ADDR
// if hurtUnits then
7933: LD_VAR 0 14
7937: IFFALSE 7998
// begin for i in sci do
7939: LD_ADDR_VAR 0 1
7943: PUSH
7944: LD_VAR 0 11
7948: PUSH
7949: FOR_IN
7950: IFFALSE 7994
// if IsInUnit ( i ) then
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 310
7961: IFFALSE 7974
// ComExitBuilding ( i ) else
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 122
7972: GO 7992
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_VAR 0 14
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: CALL_OW 128
7992: GO 7949
7994: POP
7995: POP
// end else
7996: GO 8051
// if lab then
7998: LD_VAR 0 6
8002: IFFALSE 8051
// begin for i in sci do
8004: LD_ADDR_VAR 0 1
8008: PUSH
8009: LD_VAR 0 11
8013: PUSH
8014: FOR_IN
8015: IFFALSE 8049
// if not IsInUnit ( i ) then
8017: LD_VAR 0 1
8021: PPUSH
8022: CALL_OW 310
8026: NOT
8027: IFFALSE 8047
// ComEnterUnit ( i , lab [ 1 ] ) ;
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_VAR 0 6
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: CALL_OW 120
8047: GO 8014
8049: POP
8050: POP
// end ; end ; eng := UnitFilter ( legForces , [ f_class , 2 ] ) ;
8051: LD_ADDR_VAR 0 7
8055: PUSH
8056: LD_EXP 37
8060: PPUSH
8061: LD_INT 25
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 72
8075: ST_TO_ADDR
// if eng then
8076: LD_VAR 0 7
8080: IFFALSE 8855
// begin for i in eng do
8082: LD_ADDR_VAR 0 1
8086: PUSH
8087: LD_VAR 0 7
8091: PUSH
8092: FOR_IN
8093: IFFALSE 8853
// begin tag := GetTag ( i ) ;
8095: LD_ADDR_VAR 0 8
8099: PUSH
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 110
8109: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
8110: LD_VAR 0 1
8114: PPUSH
8115: CALL_OW 256
8119: PUSH
8120: LD_INT 800
8122: LESS
8123: PUSH
8124: LD_VAR 0 8
8128: PUSH
8129: LD_INT 1
8131: NONEQUAL
8132: AND
8133: IFFALSE 8183
// begin SetTag ( i , tHeal ) ;
8135: LD_VAR 0 1
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_EXP 41
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: LD_EXP 41
8165: PUSH
8166: LD_INT 2
8168: ARRAY
8169: PPUSH
8170: CALL_OW 111
// AddComHold ( i ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8183: LD_VAR 0 8
8187: PUSH
8188: LD_INT 1
8190: EQUAL
8191: PUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 256
8201: PUSH
8202: LD_INT 1000
8204: EQUAL
8205: AND
8206: IFFALSE 8220
// SetTag ( i , 0 ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_INT 0
8215: PPUSH
8216: CALL_OW 109
// if not tag then
8220: LD_VAR 0 8
8224: NOT
8225: IFFALSE 8393
// begin undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8227: LD_ADDR_VAR 0 4
8231: PUSH
8232: LD_INT 2
8234: PPUSH
8235: LD_INT 57
8237: PUSH
8238: EMPTY
8239: LIST
8240: PPUSH
8241: CALL_OW 70
8245: ST_TO_ADDR
// if undone then
8246: LD_VAR 0 4
8250: IFFALSE 8272
// begin ComComplete ( i , undone [ 1 ] ) ;
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_VAR 0 4
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: PPUSH
8266: CALL 29154 0 2
// continue ;
8270: GO 8092
// end ; if cr or tmp or Count ( legBuildings ) then
8272: LD_VAR 0 10
8276: PUSH
8277: LD_VAR 0 2
8281: OR
8282: PUSH
8283: LD_EXP 42
8287: PPUSH
8288: CALL 23056 0 1
8292: OR
8293: IFFALSE 8369
// begin if IsInUnit ( i ) then
8295: LD_VAR 0 1
8299: PPUSH
8300: CALL_OW 310
8304: IFFALSE 8315
// ComExitBuilding ( i ) ;
8306: LD_VAR 0 1
8310: PPUSH
8311: CALL_OW 122
// if tmp then
8315: LD_VAR 0 2
8319: IFFALSE 8335
// SetTag ( i , tRepair ) else
8321: LD_VAR 0 1
8325: PPUSH
8326: LD_INT 3
8328: PPUSH
8329: CALL_OW 109
8333: GO 8367
// if cr then
8335: LD_VAR 0 10
8339: IFFALSE 8355
// SetTag ( i , tCrates ) else
8341: LD_VAR 0 1
8345: PPUSH
8346: LD_INT 2
8348: PPUSH
8349: CALL_OW 109
8353: GO 8367
// SetTag ( i , tBuild ) ;
8355: LD_VAR 0 1
8359: PPUSH
8360: LD_INT 5
8362: PPUSH
8363: CALL_OW 109
// end else
8367: GO 8393
// if not IsInUnit ( i ) then
8369: LD_VAR 0 1
8373: PPUSH
8374: CALL_OW 310
8378: NOT
8379: IFFALSE 8393
// ComEnterUnit ( i , legBase ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_INT 38
8388: PPUSH
8389: CALL_OW 120
// end ; if tag = tRepair then
8393: LD_VAR 0 8
8397: PUSH
8398: LD_INT 3
8400: EQUAL
8401: IFFALSE 8503
// begin if IsInUnit ( i ) then
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 310
8412: IFFALSE 8425
// begin ComExitBuilding ( i ) ;
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 122
// continue ;
8423: GO 8092
// end ; if not tmp then
8425: LD_VAR 0 2
8429: NOT
8430: IFFALSE 8446
// begin SetTag ( i , 0 ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 0
8439: PPUSH
8440: CALL_OW 109
// continue ;
8444: GO 8092
// end ; if not HasTask ( i ) then
8446: LD_VAR 0 1
8450: PPUSH
8451: CALL_OW 314
8455: NOT
8456: IFFALSE 8476
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8458: LD_VAR 0 1
8462: PPUSH
8463: LD_VAR 0 2
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: PPUSH
8472: CALL_OW 130
// if not IsInArea ( i , legBaseArea ) then
8476: LD_VAR 0 1
8480: PPUSH
8481: LD_INT 2
8483: PPUSH
8484: CALL_OW 308
8488: NOT
8489: IFFALSE 8503
// ComMoveToArea ( i , legBaseArea ) ;
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_INT 2
8498: PPUSH
8499: CALL_OW 113
// end ; if tag = tBuild then
8503: LD_VAR 0 8
8507: PUSH
8508: LD_INT 5
8510: EQUAL
8511: IFFALSE 8706
// begin if IsInUnit ( i ) then
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 310
8522: IFFALSE 8535
// begin ComExitBuilding ( i ) ;
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 122
// continue ;
8533: GO 8092
// end ; if not Count ( legBuildings ) then
8535: LD_EXP 42
8539: PPUSH
8540: CALL 23056 0 1
8544: NOT
8545: IFFALSE 8563
// begin SetTag ( i , 0 ) ;
8547: LD_VAR 0 1
8551: PPUSH
8552: LD_INT 0
8554: PPUSH
8555: CALL_OW 109
// continue ;
8559: GO 8092
// end else
8561: GO 8600
// if not CanBeBuiltOnlyResources ( legBase , legBuildings [ 1 ] [ 1 ] ) then
8563: LD_INT 38
8565: PPUSH
8566: LD_EXP 42
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PUSH
8575: LD_INT 1
8577: ARRAY
8578: PPUSH
8579: CALL 62594 0 2
8583: NOT
8584: IFFALSE 8600
// begin SetTag ( i , 0 ) ;
8586: LD_VAR 0 1
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: CALL_OW 109
// continue ;
8598: GO 8092
// end ; undone := FilterUnitsInArea ( legBaseArea , [ f_constructed ] ) ;
8600: LD_ADDR_VAR 0 4
8604: PUSH
8605: LD_INT 2
8607: PPUSH
8608: LD_INT 57
8610: PUSH
8611: EMPTY
8612: LIST
8613: PPUSH
8614: CALL_OW 70
8618: ST_TO_ADDR
// if undone then
8619: LD_VAR 0 4
8623: IFFALSE 8645
// begin ComComplete ( i , undone [ 1 ] ) ;
8625: LD_VAR 0 1
8629: PPUSH
8630: LD_VAR 0 4
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL 29154 0 2
// continue ;
8643: GO 8092
// end ; ComBuild ( i , legBuildings [ 1 ] [ 1 ] , legBuildings [ 1 ] [ 2 ] , legBuildings [ 1 ] [ 3 ] , legBuildings [ 1 ] [ 4 ] ) ;
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_EXP 42
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_EXP 42
8667: PUSH
8668: LD_INT 1
8670: ARRAY
8671: PUSH
8672: LD_INT 2
8674: ARRAY
8675: PPUSH
8676: LD_EXP 42
8680: PUSH
8681: LD_INT 1
8683: ARRAY
8684: PUSH
8685: LD_INT 3
8687: ARRAY
8688: PPUSH
8689: LD_EXP 42
8693: PUSH
8694: LD_INT 1
8696: ARRAY
8697: PUSH
8698: LD_INT 4
8700: ARRAY
8701: PPUSH
8702: CALL_OW 145
// end ; if tag = tCrates then
8706: LD_VAR 0 8
8710: PUSH
8711: LD_INT 2
8713: EQUAL
8714: IFFALSE 8851
// begin if IsInUnit ( i ) then
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 310
8725: IFFALSE 8738
// begin ComExitBuilding ( i ) ;
8727: LD_VAR 0 1
8731: PPUSH
8732: CALL_OW 122
// continue ;
8736: GO 8092
// end ; if not cr then
8738: LD_VAR 0 10
8742: NOT
8743: IFFALSE 8759
// begin SetTag ( i , 0 ) ;
8745: LD_VAR 0 1
8749: PPUSH
8750: LD_INT 0
8752: PPUSH
8753: CALL_OW 109
// continue ;
8757: GO 8092
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8759: LD_VAR 0 1
8763: PPUSH
8764: CALL_OW 314
8768: NOT
8769: PUSH
8770: LD_INT 81
8772: PUSH
8773: LD_VAR 0 5
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 92
8784: PUSH
8785: LD_VAR 0 10
8789: PUSH
8790: LD_INT 1
8792: ARRAY
8793: PUSH
8794: LD_VAR 0 10
8798: PUSH
8799: LD_INT 2
8801: ARRAY
8802: PUSH
8803: LD_INT 12
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PPUSH
8816: CALL_OW 69
8820: NOT
8821: AND
8822: IFFALSE 8851
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8824: LD_VAR 0 1
8828: PPUSH
8829: LD_VAR 0 10
8833: PUSH
8834: LD_INT 1
8836: ARRAY
8837: PPUSH
8838: LD_VAR 0 10
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 117
// end ; end ;
8851: GO 8092
8853: POP
8854: POP
// end ; sol := UnitFilter ( legForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] ] , [ f_ok ] ] ) ;
8855: LD_ADDR_VAR 0 13
8859: PUSH
8860: LD_EXP 37
8864: PPUSH
8865: LD_INT 2
8867: PUSH
8868: LD_INT 25
8870: PUSH
8871: LD_INT 1
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 25
8880: PUSH
8881: LD_INT 5
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 25
8890: PUSH
8891: LD_INT 8
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 50
8906: PUSH
8907: EMPTY
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 72
8918: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( legBaseArea , [ f_enemy , side ] ) ;
8919: LD_ADDR_VAR 0 15
8923: PUSH
8924: LD_INT 2
8926: PPUSH
8927: LD_INT 81
8929: PUSH
8930: LD_VAR 0 5
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PPUSH
8939: CALL_OW 70
8943: ST_TO_ADDR
// if sol then
8944: LD_VAR 0 13
8948: IFFALSE 9499
// begin if enemyInBase then
8950: LD_VAR 0 15
8954: IFFALSE 9099
// begin for i in sol do
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: LD_VAR 0 13
8965: PUSH
8966: FOR_IN
8967: IFFALSE 9095
// begin tw := IsInUnit ( i ) ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 310
8983: ST_TO_ADDR
// if tw then
8984: LD_VAR 0 9
8988: IFFALSE 9069
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
8990: LD_VAR 0 9
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_VAR 0 5
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 101
9009: PUSH
9010: LD_INT 2
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 2
9019: PUSH
9020: LD_INT 30
9022: PUSH
9023: LD_INT 32
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 30
9032: PUSH
9033: LD_INT 31
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 69
9054: IN
9055: NOT
9056: IFFALSE 9067
// ComExitBuilding ( i ) ;
9058: LD_VAR 0 1
9062: PPUSH
9063: CALL_OW 122
// end else
9067: GO 9093
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_VAR 0 15
9078: PPUSH
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 74
9088: PPUSH
9089: CALL_OW 115
// end ;
9093: GO 8966
9095: POP
9096: POP
// end else
9097: GO 9499
// begin empty := FilterUnitsInArea ( legBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9099: LD_ADDR_VAR 0 16
9103: PUSH
9104: LD_INT 2
9106: PPUSH
9107: LD_INT 3
9109: PUSH
9110: LD_INT 62
9112: PUSH
9113: EMPTY
9114: LIST
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 2
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 32
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 30
9135: PUSH
9136: LD_INT 4
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: LD_INT 30
9145: PUSH
9146: LD_INT 5
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 30
9155: PUSH
9156: LD_INT 31
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PPUSH
9174: CALL_OW 70
9178: ST_TO_ADDR
// if empty then
9179: LD_VAR 0 16
9183: IFFALSE 9200
// empty := ReverseArray ( empty ) ;
9185: LD_ADDR_VAR 0 16
9189: PUSH
9190: LD_VAR 0 16
9194: PPUSH
9195: CALL 53932 0 1
9199: ST_TO_ADDR
// for i in sol do
9200: LD_ADDR_VAR 0 1
9204: PUSH
9205: LD_VAR 0 13
9209: PUSH
9210: FOR_IN
9211: IFFALSE 9497
// begin tag := GetTag ( i ) ;
9213: LD_ADDR_VAR 0 8
9217: PUSH
9218: LD_VAR 0 1
9222: PPUSH
9223: CALL_OW 110
9227: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9228: LD_VAR 0 1
9232: PPUSH
9233: CALL_OW 256
9237: PUSH
9238: LD_INT 1000
9240: LESS
9241: PUSH
9242: LD_VAR 0 8
9246: PUSH
9247: LD_INT 1
9249: NONEQUAL
9250: AND
9251: IFFALSE 9303
// begin SetTag ( i , tHeal ) ;
9253: LD_VAR 0 1
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 109
// ComMoveXY ( i , legHealPoint [ 1 ] , legHealPoint [ 2 ] ) ;
9265: LD_VAR 0 1
9269: PPUSH
9270: LD_EXP 41
9274: PUSH
9275: LD_INT 1
9277: ARRAY
9278: PPUSH
9279: LD_EXP 41
9283: PUSH
9284: LD_INT 2
9286: ARRAY
9287: PPUSH
9288: CALL_OW 111
// AddComHold ( i ) ;
9292: LD_VAR 0 1
9296: PPUSH
9297: CALL_OW 200
// continue ;
9301: GO 9210
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 256
9312: PUSH
9313: LD_INT 1000
9315: EQUAL
9316: PUSH
9317: LD_VAR 0 8
9321: PUSH
9322: LD_INT 1
9324: EQUAL
9325: AND
9326: IFFALSE 9342
// begin SetTag ( i , 0 ) ;
9328: LD_VAR 0 1
9332: PPUSH
9333: LD_INT 0
9335: PPUSH
9336: CALL_OW 109
// continue ;
9340: GO 9210
// end ; if not IsInArea ( i , legBaseArea ) and not IsInUnit ( i ) then
9342: LD_VAR 0 1
9346: PPUSH
9347: LD_INT 2
9349: PPUSH
9350: CALL_OW 308
9354: NOT
9355: PUSH
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 310
9365: NOT
9366: AND
9367: IFFALSE 9381
// ComMoveToArea ( i , legBaseArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 2
9376: PPUSH
9377: CALL_OW 113
// if HasTask ( i ) then
9381: LD_VAR 0 1
9385: PPUSH
9386: CALL_OW 314
9390: IFFALSE 9394
// continue ;
9392: GO 9210
// if not IsInUnit ( i ) and not tag and empty then
9394: LD_VAR 0 1
9398: PPUSH
9399: CALL_OW 310
9403: NOT
9404: PUSH
9405: LD_VAR 0 8
9409: NOT
9410: AND
9411: PUSH
9412: LD_VAR 0 16
9416: AND
9417: IFFALSE 9495
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_VAR 0 16
9428: PUSH
9429: LD_INT 1
9431: ARRAY
9432: PPUSH
9433: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
9437: LD_VAR 0 16
9441: PUSH
9442: LD_INT 1
9444: ARRAY
9445: PPUSH
9446: CALL_OW 266
9450: PUSH
9451: LD_INT 5
9453: EQUAL
9454: PUSH
9455: LD_INT 50
9457: PPUSH
9458: CALL_OW 13
9462: AND
9463: IFFALSE 9477
// AddComChangeProfession ( i , class_mortar ) ;
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_INT 8
9472: PPUSH
9473: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
9477: LD_ADDR_VAR 0 16
9481: PUSH
9482: LD_VAR 0 16
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: CALL_OW 3
9494: ST_TO_ADDR
// end ; end ;
9495: GO 9210
9497: POP
9498: POP
// end ; end ; end ;
9499: PPOPN 19
9501: END
// every 0 0$2 trigger IsOk ( legCargo ) and legScriptActive and spotByLegion do var cr , enemyInArea ;
9502: LD_EXP 45
9506: PPUSH
9507: CALL_OW 302
9511: PUSH
9512: LD_EXP 4
9516: AND
9517: PUSH
9518: LD_EXP 9
9522: AND
9523: IFFALSE 9805
9525: GO 9527
9527: DISABLE
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
// begin enable ;
9532: ENABLE
// enemyInArea := FilterUnitsInArea ( legBaseArea , [ [ f_enemy , 8 ] , [ f_ok ] ] ) ;
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: LD_INT 2
9540: PPUSH
9541: LD_INT 81
9543: PUSH
9544: LD_INT 8
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 50
9553: PUSH
9554: EMPTY
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 70
9565: ST_TO_ADDR
// cr := GetListOfCratesInArea ( cratesNorthArea ) ;
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: LD_INT 16
9573: PPUSH
9574: CALL_OW 435
9578: ST_TO_ADDR
// if GetFuel ( legCargo ) < 10 and not See ( 2 , legCargo ) and GetEngine ( legCargo ) = engine_combustion then
9579: LD_EXP 45
9583: PPUSH
9584: CALL_OW 261
9588: PUSH
9589: LD_INT 10
9591: LESS
9592: PUSH
9593: LD_INT 2
9595: PPUSH
9596: LD_EXP 45
9600: PPUSH
9601: CALL_OW 292
9605: NOT
9606: AND
9607: PUSH
9608: LD_EXP 45
9612: PPUSH
9613: CALL_OW 262
9617: PUSH
9618: LD_INT 1
9620: EQUAL
9621: AND
9622: IFFALSE 9636
// SetFuel ( legCargo , 100 ) ;
9624: LD_EXP 45
9628: PPUSH
9629: LD_INT 100
9631: PPUSH
9632: CALL_OW 240
// if not HasTask ( legCargo ) and GetCargo ( legCargo , mat_cans ) < 100 and not enemyInArea then
9636: LD_EXP 45
9640: PPUSH
9641: CALL_OW 314
9645: NOT
9646: PUSH
9647: LD_EXP 45
9651: PPUSH
9652: LD_INT 1
9654: PPUSH
9655: CALL_OW 289
9659: PUSH
9660: LD_INT 100
9662: LESS
9663: AND
9664: PUSH
9665: LD_VAR 0 2
9669: NOT
9670: AND
9671: IFFALSE 9737
// begin if cr then
9673: LD_VAR 0 1
9677: IFFALSE 9708
// ComCollect ( legCargo , cr [ 1 ] , cr [ 2 ] ) else
9679: LD_EXP 45
9683: PPUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: LD_VAR 0 1
9697: PUSH
9698: LD_INT 2
9700: ARRAY
9701: PPUSH
9702: CALL_OW 117
9706: GO 9735
// if not IsInArea ( legCargo , cratesNorthArea ) then
9708: LD_EXP 45
9712: PPUSH
9713: LD_INT 16
9715: PPUSH
9716: CALL_OW 308
9720: NOT
9721: IFFALSE 9735
// ComMoveToArea ( legCargo , cratesNorthArea ) ;
9723: LD_EXP 45
9727: PPUSH
9728: LD_INT 16
9730: PPUSH
9731: CALL_OW 113
// exit ;
9735: GO 9805
// end ; if enemyInArea and not IsInArea ( legCargo , legBaseArea ) then
9737: LD_VAR 0 2
9741: PUSH
9742: LD_EXP 45
9746: PPUSH
9747: LD_INT 2
9749: PPUSH
9750: CALL_OW 308
9754: NOT
9755: AND
9756: IFFALSE 9775
// ComMoveXY ( legCargo , 194 , 17 ) else
9758: LD_EXP 45
9762: PPUSH
9763: LD_INT 194
9765: PPUSH
9766: LD_INT 17
9768: PPUSH
9769: CALL_OW 111
9773: GO 9805
// if GetCargo ( legCargo , mat_cans ) = 100 then
9775: LD_EXP 45
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: CALL_OW 289
9787: PUSH
9788: LD_INT 100
9790: EQUAL
9791: IFFALSE 9805
// ComGive ( legCargo , legBase ) ;
9793: LD_EXP 45
9797: PPUSH
9798: LD_INT 38
9800: PPUSH
9801: CALL_OW 161
// end ;
9805: PPOPN 2
9807: END
// every 6 6$00 trigger Count ( UnitFilter ( legRTanks , [ f_ok ] ) ) < 5 and legScriptActive and spotByLegion and spotArabianBase do var i , parts , part , level ;
9808: LD_EXP 44
9812: PPUSH
9813: LD_INT 50
9815: PUSH
9816: EMPTY
9817: LIST
9818: PPUSH
9819: CALL_OW 72
9823: PPUSH
9824: CALL 23056 0 1
9828: PUSH
9829: LD_INT 5
9831: LESS
9832: PUSH
9833: LD_EXP 4
9837: AND
9838: PUSH
9839: LD_EXP 9
9843: AND
9844: PUSH
9845: LD_EXP 7
9849: AND
9850: IFFALSE 10054
9852: GO 9854
9854: DISABLE
9855: LD_INT 0
9857: PPUSH
9858: PPUSH
9859: PPUSH
9860: PPUSH
// begin enable ;
9861: ENABLE
// parts := [ [ ar_medium_trike , ar_rocket_launcher ] , [ ar_medium_trike , ar_gun ] , [ ar_medium_trike , ar_flame_thrower ] , [ ar_half_tracked , ar_rocket_launcher ] , [ ar_half_tracked , ar_gatling_gun ] ] ;
9862: LD_ADDR_VAR 0 2
9866: PUSH
9867: LD_INT 13
9869: PUSH
9870: LD_INT 28
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 13
9879: PUSH
9880: LD_INT 27
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 13
9889: PUSH
9890: LD_INT 26
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 14
9899: PUSH
9900: LD_INT 28
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 14
9909: PUSH
9910: LD_INT 25
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: ST_TO_ADDR
// level := tick div 60 60$00 ;
9924: LD_ADDR_VAR 0 4
9928: PUSH
9929: LD_OWVAR 1
9933: PUSH
9934: LD_INT 126000
9936: DIV
9937: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] + level do
9938: LD_ADDR_VAR 0 1
9942: PUSH
9943: DOUBLE
9944: LD_INT 1
9946: DEC
9947: ST_TO_ADDR
9948: LD_INT 3
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: LD_INT 4
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: LD_OWVAR 67
9970: ARRAY
9971: PUSH
9972: LD_VAR 0 4
9976: PLUS
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10052
// begin part := parts [ rand ( 1 , parts ) ] ;
9981: LD_ADDR_VAR 0 3
9985: PUSH
9986: LD_VAR 0 2
9990: PUSH
9991: LD_INT 1
9993: PPUSH
9994: LD_VAR 0 2
9998: PPUSH
9999: CALL_OW 12
10003: ARRAY
10004: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ part [ 1 ] , engine_combustion , control_remote , part [ 2 ] ] ) end ;
10005: LD_ADDR_EXP 40
10009: PUSH
10010: LD_EXP 40
10014: PPUSH
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: PUSH
10024: LD_INT 1
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_INT 2
10037: ARRAY
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL 58665 0 2
10049: ST_TO_ADDR
10050: GO 9978
10052: POP
10053: POP
// end ;
10054: PPOPN 4
10056: END
// every 20 20$00 trigger not legionDestroyed and tick <= 80 80$00 do
10057: LD_EXP 12
10061: NOT
10062: PUSH
10063: LD_OWVAR 1
10067: PUSH
10068: LD_INT 168000
10070: LESSEQUAL
10071: AND
10072: IFFALSE 10111
10074: GO 10076
10076: DISABLE
// begin enable ;
10077: ENABLE
// legConstructList := Join ( legConstructList , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ) ;
10078: LD_ADDR_EXP 40
10082: PUSH
10083: LD_EXP 40
10087: PPUSH
10088: LD_INT 14
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: LD_INT 27
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: PPUSH
10106: CALL 58665 0 2
10110: ST_TO_ADDR
// end ;
10111: END
// every 0 0$1 trigger legTanks and spotByLegion and spotArabianBase do var i , mech , enemy ;
10112: LD_EXP 43
10116: PUSH
10117: LD_EXP 9
10121: AND
10122: PUSH
10123: LD_EXP 7
10127: AND
10128: IFFALSE 10721
10130: GO 10132
10132: DISABLE
10133: LD_INT 0
10135: PPUSH
10136: PPUSH
10137: PPUSH
// begin enable ;
10138: ENABLE
// if not legTanks then
10139: LD_EXP 43
10143: NOT
10144: IFFALSE 10148
// exit ;
10146: GO 10721
// for i in legTanks do
10148: LD_ADDR_VAR 0 1
10152: PUSH
10153: LD_EXP 43
10157: PUSH
10158: FOR_IN
10159: IFFALSE 10719
// begin if not IsOk ( i ) or GetSide ( i ) <> 8 then
10161: LD_VAR 0 1
10165: PPUSH
10166: CALL_OW 302
10170: NOT
10171: PUSH
10172: LD_VAR 0 1
10176: PPUSH
10177: CALL_OW 255
10181: PUSH
10182: LD_INT 8
10184: NONEQUAL
10185: OR
10186: IFFALSE 10206
// begin legTanks := legTanks diff i ;
10188: LD_ADDR_EXP 43
10192: PUSH
10193: LD_EXP 43
10197: PUSH
10198: LD_VAR 0 1
10202: DIFF
10203: ST_TO_ADDR
// continue ;
10204: GO 10158
// end ; if not GetTag ( i ) and GetControl ( i ) = control_remote then
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 110
10215: NOT
10216: PUSH
10217: LD_VAR 0 1
10221: PPUSH
10222: CALL_OW 263
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: AND
10231: IFFALSE 10245
// SetTag ( i , tAttack ) ;
10233: LD_VAR 0 1
10237: PPUSH
10238: LD_INT 10
10240: PPUSH
10241: CALL_OW 109
// if not GetTag ( i ) or GetTag ( i ) = 0 then
10245: LD_VAR 0 1
10249: PPUSH
10250: CALL_OW 110
10254: NOT
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 110
10265: PUSH
10266: LD_INT 0
10268: EQUAL
10269: OR
10270: IFFALSE 10400
// begin if GetFuel ( i ) < 50 and GetEngine ( i ) = engine_combustion then
10272: LD_VAR 0 1
10276: PPUSH
10277: CALL_OW 261
10281: PUSH
10282: LD_INT 50
10284: LESS
10285: PUSH
10286: LD_VAR 0 1
10290: PPUSH
10291: CALL_OW 262
10295: PUSH
10296: LD_INT 1
10298: EQUAL
10299: AND
10300: IFFALSE 10359
// begin ComMoveXY ( i , 189 , 19 ) ;
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_INT 189
10309: PPUSH
10310: LD_INT 19
10312: PPUSH
10313: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10317: LD_INT 35
10319: PPUSH
10320: CALL_OW 67
// until GetDistUnitXY ( i , 189 , 19 ) < 4 ;
10324: LD_VAR 0 1
10328: PPUSH
10329: LD_INT 189
10331: PPUSH
10332: LD_INT 19
10334: PPUSH
10335: CALL_OW 297
10339: PUSH
10340: LD_INT 4
10342: LESS
10343: IFFALSE 10317
// SetFuel ( i , 100 ) ;
10345: LD_VAR 0 1
10349: PPUSH
10350: LD_INT 100
10352: PPUSH
10353: CALL_OW 240
// end else
10357: GO 10400
// if not IsInArea ( i , legParkingArea ) then
10359: LD_VAR 0 1
10363: PPUSH
10364: LD_INT 15
10366: PPUSH
10367: CALL_OW 308
10371: NOT
10372: IFFALSE 10388
// ComMoveToArea ( i , legParkingArea ) else
10374: LD_VAR 0 1
10378: PPUSH
10379: LD_INT 15
10381: PPUSH
10382: CALL_OW 113
10386: GO 10400
// SetTag ( i , tParking ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_INT 9
10395: PPUSH
10396: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
10400: LD_VAR 0 1
10404: PPUSH
10405: CALL_OW 110
10409: PUSH
10410: LD_INT 9
10412: EQUAL
10413: IFFALSE 10543
// begin if GetLives ( i ) < 650 then
10415: LD_VAR 0 1
10419: PPUSH
10420: CALL_OW 256
10424: PUSH
10425: LD_INT 650
10427: LESS
10428: IFFALSE 10520
// begin if not IsDrivenBy ( i ) then
10430: LD_VAR 0 1
10434: PPUSH
10435: CALL_OW 311
10439: NOT
10440: IFFALSE 10444
// continue ;
10442: GO 10158
// mech := IsDrivenBy ( i ) ;
10444: LD_ADDR_VAR 0 2
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 311
10458: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10459: LD_VAR 0 2
10463: PPUSH
10464: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10468: LD_VAR 0 2
10472: PPUSH
10473: LD_VAR 0 1
10477: PPUSH
10478: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10482: LD_INT 35
10484: PPUSH
10485: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10489: LD_VAR 0 1
10493: PPUSH
10494: CALL_OW 256
10498: PUSH
10499: LD_INT 1000
10501: EQUAL
10502: IFFALSE 10482
// ComEnterUnit ( mech , i ) ;
10504: LD_VAR 0 2
10508: PPUSH
10509: LD_VAR 0 1
10513: PPUSH
10514: CALL_OW 120
// end else
10518: GO 10543
// if IsDrivenBy ( i ) then
10520: LD_VAR 0 1
10524: PPUSH
10525: CALL_OW 311
10529: IFFALSE 10543
// SetTag ( i , tAttack ) ;
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_INT 10
10538: PPUSH
10539: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
10543: LD_VAR 0 1
10547: PPUSH
10548: CALL_OW 110
10552: PUSH
10553: LD_INT 10
10555: EQUAL
10556: IFFALSE 10717
// begin enemy := FilterUnitsInArea ( legBaseArea , [ f_enemy , 8 ] ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_INT 2
10565: PPUSH
10566: LD_INT 81
10568: PUSH
10569: LD_INT 8
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PPUSH
10576: CALL_OW 70
10580: ST_TO_ADDR
// if GetLives ( i ) < 650 and GetControl ( i ) = control_manual then
10581: LD_VAR 0 1
10585: PPUSH
10586: CALL_OW 256
10590: PUSH
10591: LD_INT 650
10593: LESS
10594: PUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 263
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: AND
10609: IFFALSE 10634
// begin ComStop ( i ) ;
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 141
// SetTag ( i , 0 ) ;
10620: LD_VAR 0 1
10624: PPUSH
10625: LD_INT 0
10627: PPUSH
10628: CALL_OW 109
// continue ;
10632: GO 10158
// end ; if enemy then
10634: LD_VAR 0 3
10638: IFFALSE 10678
// begin if not HasTask ( i ) then
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 314
10649: NOT
10650: IFFALSE 10676
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10652: LD_VAR 0 1
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_VAR 0 1
10666: PPUSH
10667: CALL_OW 74
10671: PPUSH
10672: CALL 62893 0 2
// end else
10676: GO 10717
// if legTanks then
10678: LD_EXP 43
10682: IFFALSE 10717
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10684: LD_VAR 0 1
10688: PPUSH
10689: LD_INT 200
10691: PUSH
10692: LD_INT 48
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 210
10701: PUSH
10702: LD_INT 74
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PPUSH
10713: CALL 61275 0 2
// end ; end ;
10717: GO 10158
10719: POP
10720: POP
// end ;
10721: PPOPN 3
10723: END
// every 3 3$00 trigger not legionDestroyed and Count ( legRTanks ) and spotByLegion and spotArabianBase do var i , tmp , tmp2 ;
10724: LD_EXP 12
10728: NOT
10729: PUSH
10730: LD_EXP 44
10734: PPUSH
10735: CALL 23056 0 1
10739: AND
10740: PUSH
10741: LD_EXP 9
10745: AND
10746: PUSH
10747: LD_EXP 7
10751: AND
10752: IFFALSE 10950
10754: GO 10756
10756: DISABLE
10757: LD_INT 0
10759: PPUSH
10760: PPUSH
10761: PPUSH
// begin enable ;
10762: ENABLE
// tmp := UnitFilter ( legRTanks , [ [ f_linked ] , [ f_ok ] ] ) ;
10763: LD_ADDR_VAR 0 2
10767: PUSH
10768: LD_EXP 44
10772: PPUSH
10773: LD_INT 61
10775: PUSH
10776: EMPTY
10777: LIST
10778: PUSH
10779: LD_INT 50
10781: PUSH
10782: EMPTY
10783: LIST
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 72
10793: ST_TO_ADDR
// legRTanks := legRTanks diff tmp ;
10794: LD_ADDR_EXP 44
10798: PUSH
10799: LD_EXP 44
10803: PUSH
10804: LD_VAR 0 2
10808: DIFF
10809: ST_TO_ADDR
// if not tmp then
10810: LD_VAR 0 2
10814: NOT
10815: IFFALSE 10819
// exit ;
10817: GO 10950
// tmp2 := UnitFilter ( tmp , [ f_weapon , ar_double_machine_gun ] ) ;
10819: LD_ADDR_VAR 0 3
10823: PUSH
10824: LD_VAR 0 2
10828: PPUSH
10829: LD_INT 34
10831: PUSH
10832: LD_INT 24
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 72
10843: ST_TO_ADDR
// if tmp2 then
10844: LD_VAR 0 3
10848: IFFALSE 10865
// ComMoveXY ( tmp2 , 241 , 99 ) ;
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 241
10857: PPUSH
10858: LD_INT 99
10860: PPUSH
10861: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10865: LD_INT 35
10867: PPUSH
10868: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10872: LD_ADDR_VAR 0 2
10876: PUSH
10877: LD_VAR 0 2
10881: PPUSH
10882: LD_INT 50
10884: PUSH
10885: EMPTY
10886: LIST
10887: PPUSH
10888: CALL_OW 72
10892: ST_TO_ADDR
// for i in tmp do
10893: LD_ADDR_VAR 0 1
10897: PUSH
10898: LD_VAR 0 2
10902: PUSH
10903: FOR_IN
10904: IFFALSE 10941
// AgressiveMove ( i , [ [ 200 , 48 ] , [ 210 , 74 ] ] ) ;
10906: LD_VAR 0 1
10910: PPUSH
10911: LD_INT 200
10913: PUSH
10914: LD_INT 48
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 210
10923: PUSH
10924: LD_INT 74
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL 61275 0 2
10939: GO 10903
10941: POP
10942: POP
// until not tmp ;
10943: LD_VAR 0 2
10947: NOT
10948: IFFALSE 10865
// end ;
10950: PPOPN 3
10952: END
// every 35 35$0 trigger not spotByLegion do var i , un , veh , tmp ;
10953: LD_EXP 9
10957: NOT
10958: IFFALSE 11219
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
10968: PPUSH
// begin uc_side := 8 ;
10969: LD_ADDR_OWVAR 20
10973: PUSH
10974: LD_INT 8
10976: ST_TO_ADDR
// uc_nation := nation_arabian ;
10977: LD_ADDR_OWVAR 21
10981: PUSH
10982: LD_INT 2
10984: ST_TO_ADDR
// for i := 1 to 3 do
10985: LD_ADDR_VAR 0 1
10989: PUSH
10990: DOUBLE
10991: LD_INT 1
10993: DEC
10994: ST_TO_ADDR
10995: LD_INT 3
10997: PUSH
10998: FOR_TO
10999: IFFALSE 11134
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
11001: LD_INT 14
11003: PPUSH
11004: LD_INT 3
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: LD_INT 27
11012: PUSH
11013: LD_INT 25
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_VAR 0 1
11024: PUSH
11025: LD_INT 2
11027: MOD
11028: PUSH
11029: LD_INT 1
11031: PLUS
11032: ARRAY
11033: PPUSH
11034: LD_INT 100
11036: PPUSH
11037: CALL 25794 0 5
// veh := CreateVehicle ;
11041: LD_ADDR_VAR 0 3
11045: PUSH
11046: CALL_OW 45
11050: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_INT 5
11058: PPUSH
11059: CALL_OW 233
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 44
11070: PPUSH
11071: LD_INT 0
11073: PPUSH
11074: CALL_OW 49
// PrepareMechanic ( false , 6 ) ;
11078: LD_INT 0
11080: PPUSH
11081: LD_INT 6
11083: PPUSH
11084: CALL_OW 383
// un := CreateHuman ;
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: CALL_OW 44
11097: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
11112: LD_ADDR_VAR 0 4
11116: PUSH
11117: LD_VAR 0 4
11121: PPUSH
11122: LD_VAR 0 3
11126: PPUSH
11127: CALL 58665 0 2
11131: ST_TO_ADDR
// end ;
11132: GO 10998
11134: POP
11135: POP
// ComMoveXY ( tmp , 219 , 110 ) ;
11136: LD_VAR 0 4
11140: PPUSH
11141: LD_INT 219
11143: PPUSH
11144: LD_INT 110
11146: PPUSH
11147: CALL_OW 111
// AddComMoveXY ( tmp , 220 , 94 ) ;
11151: LD_VAR 0 4
11155: PPUSH
11156: LD_INT 220
11158: PPUSH
11159: LD_INT 94
11161: PPUSH
11162: CALL_OW 171
// AddComMoveXY ( tmp , 209 , 66 ) ;
11166: LD_VAR 0 4
11170: PPUSH
11171: LD_INT 209
11173: PPUSH
11174: LD_INT 66
11176: PPUSH
11177: CALL_OW 171
// AddComMoveXY ( tmp , 189 , 22 ) ;
11181: LD_VAR 0 4
11185: PPUSH
11186: LD_INT 189
11188: PPUSH
11189: LD_INT 22
11191: PPUSH
11192: CALL_OW 171
// wait ( 0 0$10 ) ;
11196: LD_INT 350
11198: PPUSH
11199: CALL_OW 67
// legTanks := legTanks union tmp ;
11203: LD_ADDR_EXP 43
11207: PUSH
11208: LD_EXP 43
11212: PUSH
11213: LD_VAR 0 4
11217: UNION
11218: ST_TO_ADDR
// end ; end_of_file
11219: PPOPN 4
11221: END
// export function CreateNature ; var i , areas , amount ; begin
11222: LD_INT 0
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
// PrepareTiger ( 0 ) ;
11228: LD_INT 0
11230: PPUSH
11231: CALL 55041 0 1
// for i := 1 to [ 10 , 8 , 5 , 5 ] [ Difficulty ] do
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: DOUBLE
11241: LD_INT 1
11243: DEC
11244: ST_TO_ADDR
11245: LD_INT 10
11247: PUSH
11248: LD_INT 8
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: LD_INT 5
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: LD_OWVAR 67
11267: ARRAY
11268: PUSH
11269: FOR_TO
11270: IFFALSE 11289
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11272: CALL_OW 44
11276: PPUSH
11277: LD_INT 7
11279: PPUSH
11280: LD_INT 0
11282: PPUSH
11283: CALL_OW 49
11287: GO 11269
11289: POP
11290: POP
// PrepareBird ;
11291: CALL 55222 0 0
// for i := 1 to 3 do
11295: LD_ADDR_VAR 0 2
11299: PUSH
11300: DOUBLE
11301: LD_INT 1
11303: DEC
11304: ST_TO_ADDR
11305: LD_INT 3
11307: PUSH
11308: FOR_TO
11309: IFFALSE 11328
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11311: CALL_OW 44
11315: PPUSH
11316: LD_INT 7
11318: PPUSH
11319: LD_INT 0
11321: PPUSH
11322: CALL_OW 49
11326: GO 11308
11328: POP
11329: POP
// PrepareHorse ;
11330: CALL 55262 0 0
// for i := 1 to 3 do
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: DOUBLE
11340: LD_INT 1
11342: DEC
11343: ST_TO_ADDR
11344: LD_INT 3
11346: PUSH
11347: FOR_TO
11348: IFFALSE 11367
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
11350: CALL_OW 44
11354: PPUSH
11355: LD_INT 7
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 49
11365: GO 11347
11367: POP
11368: POP
// PrepareFrog ;
11369: CALL 55142 0 0
// for i := 1 to 3 do
11373: LD_ADDR_VAR 0 2
11377: PUSH
11378: DOUBLE
11379: LD_INT 1
11381: DEC
11382: ST_TO_ADDR
11383: LD_INT 3
11385: PUSH
11386: FOR_TO
11387: IFFALSE 11406
// PlaceUnitArea ( CreateHuman , frogArea , false ) ;
11389: CALL_OW 44
11393: PPUSH
11394: LD_INT 8
11396: PPUSH
11397: LD_INT 0
11399: PPUSH
11400: CALL_OW 49
11404: GO 11386
11406: POP
11407: POP
// amount := [ 3 , 2 , 2 , 1 ] [ Difficulty ] ;
11408: LD_ADDR_VAR 0 4
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 2
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 1
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: LD_OWVAR 67
11435: ARRAY
11436: ST_TO_ADDR
// areas := [ mastodont1Area , mastodont2Area , mastodont3Area , mastodont4Area ] ;
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: LD_INT 18
11444: PUSH
11445: LD_INT 19
11447: PUSH
11448: LD_INT 20
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: ST_TO_ADDR
// PrepareMastodont ;
11460: CALL 55302 0 0
// for i := 1 to amount do
11464: LD_ADDR_VAR 0 2
11468: PUSH
11469: DOUBLE
11470: LD_INT 1
11472: DEC
11473: ST_TO_ADDR
11474: LD_VAR 0 4
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11517
// PlaceUnitArea ( CreateVehicle , areas [ ( i - 1 ) + Difficulty ] , false ) ;
11482: CALL_OW 45
11486: PPUSH
11487: LD_VAR 0 3
11491: PUSH
11492: LD_VAR 0 2
11496: PUSH
11497: LD_INT 1
11499: MINUS
11500: PUSH
11501: LD_OWVAR 67
11505: PLUS
11506: ARRAY
11507: PPUSH
11508: LD_INT 0
11510: PPUSH
11511: CALL_OW 49
11515: GO 11479
11517: POP
11518: POP
// PrepareApeman ( 0 ) ;
11519: LD_INT 0
11521: PPUSH
11522: CALL 54913 0 1
// hc_skills := [ 4 , 2 , 0 , 0 ] ;
11526: LD_ADDR_OWVAR 31
11530: PUSH
11531: LD_INT 4
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: LD_INT 0
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: ST_TO_ADDR
// for i := 1 to [ 9 , 7 , 6 , 5 ] [ Difficulty ] do
11549: LD_ADDR_VAR 0 2
11553: PUSH
11554: DOUBLE
11555: LD_INT 1
11557: DEC
11558: ST_TO_ADDR
11559: LD_INT 9
11561: PUSH
11562: LD_INT 7
11564: PUSH
11565: LD_INT 6
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: LD_OWVAR 67
11581: ARRAY
11582: PUSH
11583: FOR_TO
11584: IFFALSE 11603
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
11586: CALL_OW 44
11590: PPUSH
11591: LD_INT 6
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 49
11601: GO 11583
11603: POP
11604: POP
// for i := 1 to [ 8 , 7 , 6 , 5 ] [ Difficulty ] do
11605: LD_ADDR_VAR 0 2
11609: PUSH
11610: DOUBLE
11611: LD_INT 1
11613: DEC
11614: ST_TO_ADDR
11615: LD_INT 8
11617: PUSH
11618: LD_INT 7
11620: PUSH
11621: LD_INT 6
11623: PUSH
11624: LD_INT 5
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_OWVAR 67
11637: ARRAY
11638: PUSH
11639: FOR_TO
11640: IFFALSE 11665
// PlaceUnitXYR ( CreateHuman , 274 , 133 , 8 , false ) ;
11642: CALL_OW 44
11646: PPUSH
11647: LD_INT 274
11649: PPUSH
11650: LD_INT 133
11652: PPUSH
11653: LD_INT 8
11655: PPUSH
11656: LD_INT 0
11658: PPUSH
11659: CALL_OW 50
11663: GO 11639
11665: POP
11666: POP
// for i := 1 to [ 6 , 5 , 4 , 4 ] [ Difficulty ] do
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: DOUBLE
11673: LD_INT 1
11675: DEC
11676: ST_TO_ADDR
11677: LD_INT 6
11679: PUSH
11680: LD_INT 5
11682: PUSH
11683: LD_INT 4
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_OWVAR 67
11699: ARRAY
11700: PUSH
11701: FOR_TO
11702: IFFALSE 11727
// PlaceUnitXYR ( CreateHuman , 208 , 142 , 8 , false ) ;
11704: CALL_OW 44
11708: PPUSH
11709: LD_INT 208
11711: PPUSH
11712: LD_INT 142
11714: PPUSH
11715: LD_INT 8
11717: PPUSH
11718: LD_INT 0
11720: PPUSH
11721: CALL_OW 50
11725: GO 11701
11727: POP
11728: POP
// end ;
11729: LD_VAR 0 1
11733: RET
// export function AreInArea ( units , area ) ; var i ; begin
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
// result := false ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 0
11745: ST_TO_ADDR
// if not units then
11746: LD_VAR 0 1
11750: NOT
11751: IFFALSE 11755
// exit ;
11753: GO 11821
// for i in units do
11755: LD_ADDR_VAR 0 4
11759: PUSH
11760: LD_VAR 0 1
11764: PUSH
11765: FOR_IN
11766: IFFALSE 11819
// if IsInArea ( i , area ) or IsInArea ( IsInUnit ( i ) , area ) then
11768: LD_VAR 0 4
11772: PPUSH
11773: LD_VAR 0 2
11777: PPUSH
11778: CALL_OW 308
11782: PUSH
11783: LD_VAR 0 4
11787: PPUSH
11788: CALL_OW 310
11792: PPUSH
11793: LD_VAR 0 2
11797: PPUSH
11798: CALL_OW 308
11802: OR
11803: IFFALSE 11817
// begin result := true ;
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// exit ;
11813: POP
11814: POP
11815: GO 11821
// end ;
11817: GO 11765
11819: POP
11820: POP
// end ; end_of_file
11821: LD_VAR 0 3
11825: RET
// export function Action ; var i , mech , veh , amTroops ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
// SaveForQuickRestart ;
11833: CALL_OW 22
// InGameOn ;
11837: CALL_OW 8
// CenterNowOnXY ( 84 , 28 ) ;
11841: LD_INT 84
11843: PPUSH
11844: LD_INT 28
11846: PPUSH
11847: CALL_OW 86
// RevealFogArea ( 2 , heikeVisibleRoadArea ) ;
11851: LD_INT 2
11853: PPUSH
11854: LD_INT 9
11856: PPUSH
11857: CALL_OW 332
// ComMoveXY ( Heike , 90 , 30 ) ;
11861: LD_EXP 23
11865: PPUSH
11866: LD_INT 90
11868: PPUSH
11869: LD_INT 30
11871: PPUSH
11872: CALL_OW 111
// uc_side := 1 ;
11876: LD_ADDR_OWVAR 20
11880: PUSH
11881: LD_INT 1
11883: ST_TO_ADDR
// uc_nation := nation_american ;
11884: LD_ADDR_OWVAR 21
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 66 ) ;
11892: LD_INT 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_INT 9
11903: PPUSH
11904: LD_INT 66
11906: PPUSH
11907: CALL 25794 0 5
// veh := CreateVehicle ;
11911: LD_ADDR_VAR 0 4
11915: PUSH
11916: CALL_OW 45
11920: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11921: LD_VAR 0 4
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL_OW 233
// PlaceUnitXY ( veh , 80 , 27 , false ) ;
11933: LD_VAR 0 4
11937: PPUSH
11938: LD_INT 80
11940: PPUSH
11941: LD_INT 27
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 48
// PrepareMechanic ( sex_male , 8 ) ;
11951: LD_INT 1
11953: PPUSH
11954: LD_INT 8
11956: PPUSH
11957: CALL_OW 383
// mech := CreateHuman ;
11961: LD_ADDR_VAR 0 3
11965: PUSH
11966: CALL_OW 44
11970: ST_TO_ADDR
// PlaceHumanInUnit ( mech , veh ) ;
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: CALL_OW 52
// repeat wait ( 0 0$1 ) ;
11985: LD_INT 35
11987: PPUSH
11988: CALL_OW 67
// until HexInfo ( 90 , 30 ) ;
11992: LD_INT 90
11994: PPUSH
11995: LD_INT 30
11997: PPUSH
11998: CALL_OW 428
12002: IFFALSE 11985
// PlaceSeeing ( 80 , 27 , 2 , - 6 ) ;
12004: LD_INT 80
12006: PPUSH
12007: LD_INT 27
12009: PPUSH
12010: LD_INT 2
12012: PPUSH
12013: LD_INT 6
12015: NEG
12016: PPUSH
12017: CALL_OW 330
// CenterNowOnXY ( 80 , 27 ) ;
12021: LD_INT 80
12023: PPUSH
12024: LD_INT 27
12026: PPUSH
12027: CALL_OW 86
// DialogueOn ;
12031: CALL_OW 6
// Say ( Heike , DH-Start-1 ) ;
12035: LD_EXP 23
12039: PPUSH
12040: LD_STRING DH-Start-1
12042: PPUSH
12043: CALL_OW 88
// DialogueOff ;
12047: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12051: LD_EXP 23
12055: PPUSH
12056: LD_VAR 0 4
12060: PPUSH
12061: CALL_OW 115
// wait ( 0 0$1 ) ;
12065: LD_INT 35
12067: PPUSH
12068: CALL_OW 67
// SetLives ( IsInUnit ( Heike ) , 200 ) ;
12072: LD_EXP 23
12076: PPUSH
12077: CALL_OW 310
12081: PPUSH
12082: LD_INT 200
12084: PPUSH
12085: CALL_OW 234
// wait ( 0 0$0.3 ) ;
12089: LD_INT 10
12091: PPUSH
12092: CALL_OW 67
// DialogueOn ;
12096: CALL_OW 6
// Say ( Heike , DH-Start-2 ) ;
12100: LD_EXP 23
12104: PPUSH
12105: LD_STRING DH-Start-2
12107: PPUSH
12108: CALL_OW 88
// DialogueOff ;
12112: CALL_OW 7
// ComAttackUnit ( Heike , veh ) ;
12116: LD_EXP 23
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: CALL_OW 115
// wait ( 0 0$0.2 ) ;
12130: LD_INT 7
12132: PPUSH
12133: CALL_OW 67
// ComCrawl ( Heike ) ;
12137: LD_EXP 23
12141: PPUSH
12142: CALL_OW 137
// wait ( 0 0$3 ) ;
12146: LD_INT 105
12148: PPUSH
12149: CALL_OW 67
// PlaceUnitXY ( omarVehicle , 82 , 43 , false ) ;
12153: LD_EXP 26
12157: PPUSH
12158: LD_INT 82
12160: PPUSH
12161: LD_INT 43
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 48
// PlaceHumanInUnit ( Omar , omarVehicle ) ;
12171: LD_EXP 24
12175: PPUSH
12176: LD_EXP 26
12180: PPUSH
12181: CALL_OW 52
// ComMoveXY ( Omar , 79 , 32 ) ;
12185: LD_EXP 24
12189: PPUSH
12190: LD_INT 79
12192: PPUSH
12193: LD_INT 32
12195: PPUSH
12196: CALL_OW 111
// wait ( 0 0$1 ) ;
12200: LD_INT 35
12202: PPUSH
12203: CALL_OW 67
// PlaceSeeing ( 79 , 32 , 2 , - 8 ) ;
12207: LD_INT 79
12209: PPUSH
12210: LD_INT 32
12212: PPUSH
12213: LD_INT 2
12215: PPUSH
12216: LD_INT 8
12218: NEG
12219: PPUSH
12220: CALL_OW 330
// wait ( 0 0$3 ) ;
12224: LD_INT 105
12226: PPUSH
12227: CALL_OW 67
// SetLives ( veh , 200 ) ;
12231: LD_VAR 0 4
12235: PPUSH
12236: LD_INT 200
12238: PPUSH
12239: CALL_OW 234
// wait ( 0 0$1 ) ;
12243: LD_INT 35
12245: PPUSH
12246: CALL_OW 67
// SetLives ( mech , 10 ) ;
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 10
12257: PPUSH
12258: CALL_OW 234
// wait ( 0 0$2 ) ;
12262: LD_INT 70
12264: PPUSH
12265: CALL_OW 67
// ComWalk ( Heike ) ;
12269: LD_EXP 23
12273: PPUSH
12274: CALL_OW 138
// wait ( 1 ) ;
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 67
// ComMoveXY ( Heike , 81 , 25 ) ;
12285: LD_EXP 23
12289: PPUSH
12290: LD_INT 81
12292: PPUSH
12293: LD_INT 25
12295: PPUSH
12296: CALL_OW 111
// AddComMoveXY ( Heike , 72 , 25 ) ;
12300: LD_EXP 23
12304: PPUSH
12305: LD_INT 72
12307: PPUSH
12308: LD_INT 25
12310: PPUSH
12311: CALL_OW 171
// wait ( 0 0$3 ) ;
12315: LD_INT 105
12317: PPUSH
12318: CALL_OW 67
// ComExitVehicle ( Omar ) ;
12322: LD_EXP 24
12326: PPUSH
12327: CALL_OW 121
// wait ( 1 ) ;
12331: LD_INT 1
12333: PPUSH
12334: CALL_OW 67
// ComMoveXY ( Omar , 77 , 28 ) ;
12338: LD_EXP 24
12342: PPUSH
12343: LD_INT 77
12345: PPUSH
12346: LD_INT 28
12348: PPUSH
12349: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12353: LD_EXP 24
12357: PPUSH
12358: LD_EXP 23
12362: PPUSH
12363: CALL_OW 179
// Say ( Omar , DO-Start-3 ) ;
12367: LD_EXP 24
12371: PPUSH
12372: LD_STRING DO-Start-3
12374: PPUSH
12375: CALL_OW 88
// repeat wait ( 3 ) ;
12379: LD_INT 3
12381: PPUSH
12382: CALL_OW 67
// until IsAt ( Heike , 72 , 25 ) ;
12386: LD_EXP 23
12390: PPUSH
12391: LD_INT 72
12393: PPUSH
12394: LD_INT 25
12396: PPUSH
12397: CALL_OW 307
12401: IFFALSE 12379
// ComHold ( Heike ) ;
12403: LD_EXP 23
12407: PPUSH
12408: CALL_OW 140
// ComTurnUnit ( Omar , Heike ) ;
12412: LD_EXP 24
12416: PPUSH
12417: LD_EXP 23
12421: PPUSH
12422: CALL_OW 119
// ComMoveUnit ( Heike , Omar ) ;
12426: LD_EXP 23
12430: PPUSH
12431: LD_EXP 24
12435: PPUSH
12436: CALL_OW 112
// wait ( 0 0$1 ) ;
12440: LD_INT 35
12442: PPUSH
12443: CALL_OW 67
// ComTurnUnit ( Heike , Omar ) ;
12447: LD_EXP 23
12451: PPUSH
12452: LD_EXP 24
12456: PPUSH
12457: CALL_OW 119
// Say ( Heike , DH-Start-4 ) ;
12461: LD_EXP 23
12465: PPUSH
12466: LD_STRING DH-Start-4
12468: PPUSH
12469: CALL_OW 88
// Say ( Omar , DO-Start-5 ) ;
12473: LD_EXP 24
12477: PPUSH
12478: LD_STRING DO-Start-5
12480: PPUSH
12481: CALL_OW 88
// Say ( Heike , DH-Start-6 ) ;
12485: LD_EXP 23
12489: PPUSH
12490: LD_STRING DH-Start-6
12492: PPUSH
12493: CALL_OW 88
// Say ( Omar , DO-Start-7 ) ;
12497: LD_EXP 24
12501: PPUSH
12502: LD_STRING DO-Start-7
12504: PPUSH
12505: CALL_OW 88
// if Query ( QOmar ) = 2 then
12509: LD_STRING QOmar
12511: PPUSH
12512: CALL_OW 97
12516: PUSH
12517: LD_INT 2
12519: EQUAL
12520: IFFALSE 12825
// begin Say ( Heike , DH-QuestionN-1 ) ;
12522: LD_EXP 23
12526: PPUSH
12527: LD_STRING DH-QuestionN-1
12529: PPUSH
12530: CALL_OW 88
// ComMoveXY ( Heike , 58 , 27 ) ;
12534: LD_EXP 23
12538: PPUSH
12539: LD_INT 58
12541: PPUSH
12542: LD_INT 27
12544: PPUSH
12545: CALL_OW 111
// wait ( 0 0$2 ) ;
12549: LD_INT 70
12551: PPUSH
12552: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
12556: LD_EXP 24
12560: PPUSH
12561: LD_EXP 26
12565: PPUSH
12566: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
12570: LD_INT 79
12572: PPUSH
12573: LD_INT 32
12575: PPUSH
12576: LD_INT 2
12578: PPUSH
12579: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
12583: LD_INT 80
12585: PPUSH
12586: LD_INT 27
12588: PPUSH
12589: LD_INT 2
12591: PPUSH
12592: CALL_OW 331
// CenterOnXY ( 58 , 27 ) ;
12596: LD_INT 58
12598: PPUSH
12599: LD_INT 27
12601: PPUSH
12602: CALL_OW 84
// repeat wait ( 3 ) ;
12606: LD_INT 3
12608: PPUSH
12609: CALL_OW 67
// until GetDistUnitXY ( Heike , 88 , 27 ) ;
12613: LD_EXP 23
12617: PPUSH
12618: LD_INT 88
12620: PPUSH
12621: LD_INT 27
12623: PPUSH
12624: CALL_OW 297
12628: IFFALSE 12606
// uc_side := 1 ;
12630: LD_ADDR_OWVAR 20
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// uc_nation := nation_american ;
12638: LD_ADDR_OWVAR 21
12642: PUSH
12643: LD_INT 1
12645: ST_TO_ADDR
// amTroops := [ ] ;
12646: LD_ADDR_VAR 0 5
12650: PUSH
12651: EMPTY
12652: ST_TO_ADDR
// for i := 1 to 3 do
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: DOUBLE
12659: LD_INT 1
12661: DEC
12662: ST_TO_ADDR
12663: LD_INT 3
12665: PUSH
12666: FOR_TO
12667: IFFALSE 12760
// begin PrepareSoldier ( false , 10 ) ;
12669: LD_INT 0
12671: PPUSH
12672: LD_INT 10
12674: PPUSH
12675: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
12679: LD_ADDR_VAR 0 5
12683: PUSH
12684: LD_VAR 0 5
12688: PPUSH
12689: CALL_OW 44
12693: PPUSH
12694: CALL 58665 0 2
12698: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
12699: LD_VAR 0 5
12703: PUSH
12704: LD_VAR 0 2
12708: ARRAY
12709: PPUSH
12710: LD_INT 2
12712: PPUSH
12713: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrapArea , false ) ;
12717: LD_VAR 0 5
12721: PUSH
12722: LD_VAR 0 2
12726: ARRAY
12727: PPUSH
12728: LD_INT 10
12730: PPUSH
12731: LD_INT 0
12733: PPUSH
12734: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
12738: LD_VAR 0 5
12742: PUSH
12743: LD_VAR 0 2
12747: ARRAY
12748: PPUSH
12749: LD_EXP 23
12753: PPUSH
12754: CALL_OW 115
// end ;
12758: GO 12666
12760: POP
12761: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
12762: LD_EXP 23
12766: PPUSH
12767: LD_VAR 0 5
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
12780: LD_INT 35
12782: PPUSH
12783: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
12787: LD_EXP 23
12791: PPUSH
12792: CALL_OW 301
12796: PUSH
12797: LD_EXP 23
12801: PPUSH
12802: CALL_OW 303
12806: OR
12807: IFFALSE 12780
// wait ( 0 0$2 ) ;
12809: LD_INT 70
12811: PPUSH
12812: CALL_OW 67
// YouLost ( Heike ) ;
12816: LD_STRING Heike
12818: PPUSH
12819: CALL_OW 104
// exit ;
12823: GO 13745
// end ; Say ( Heike , DH-QuestionY-1 ) ;
12825: LD_EXP 23
12829: PPUSH
12830: LD_STRING DH-QuestionY-1
12832: PPUSH
12833: CALL_OW 88
// wait ( 0 0$0.3 ) ;
12837: LD_INT 10
12839: PPUSH
12840: CALL_OW 67
// Say ( Omar , DO-Story-1 ) ;
12844: LD_EXP 24
12848: PPUSH
12849: LD_STRING DO-Story-1
12851: PPUSH
12852: CALL_OW 88
// Say ( Omar , DO-Story-2 ) ;
12856: LD_EXP 24
12860: PPUSH
12861: LD_STRING DO-Story-2
12863: PPUSH
12864: CALL_OW 88
// Say ( Omar , DO-Story-3 ) ;
12868: LD_EXP 24
12872: PPUSH
12873: LD_STRING DO-Story-3
12875: PPUSH
12876: CALL_OW 88
// Say ( Omar , DO-Story-4 ) ;
12880: LD_EXP 24
12884: PPUSH
12885: LD_STRING DO-Story-4
12887: PPUSH
12888: CALL_OW 88
// Say ( Heike , DH-Story-5 ) ;
12892: LD_EXP 23
12896: PPUSH
12897: LD_STRING DH-Story-5
12899: PPUSH
12900: CALL_OW 88
// Say ( Omar , DO-Story-6 ) ;
12904: LD_EXP 24
12908: PPUSH
12909: LD_STRING DO-Story-6
12911: PPUSH
12912: CALL_OW 88
// Say ( Omar , DO-Story-7 ) ;
12916: LD_EXP 24
12920: PPUSH
12921: LD_STRING DO-Story-7
12923: PPUSH
12924: CALL_OW 88
// ComMoveXY ( Heike , 82 , 44 ) ;
12928: LD_EXP 23
12932: PPUSH
12933: LD_INT 82
12935: PPUSH
12936: LD_INT 44
12938: PPUSH
12939: CALL_OW 111
// AddComHold ( Heike ) ;
12943: LD_EXP 23
12947: PPUSH
12948: CALL_OW 200
// wait ( 0 0$4 ) ;
12952: LD_INT 140
12954: PPUSH
12955: CALL_OW 67
// ComMoveXY ( Omar , 82 , 41 ) ;
12959: LD_EXP 24
12963: PPUSH
12964: LD_INT 82
12966: PPUSH
12967: LD_INT 41
12969: PPUSH
12970: CALL_OW 111
// AddComTurnUnit ( Omar , Heike ) ;
12974: LD_EXP 24
12978: PPUSH
12979: LD_EXP 23
12983: PPUSH
12984: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
12988: LD_INT 35
12990: PPUSH
12991: CALL_OW 67
// until IsAt ( Heike , 82 , 44 ) ;
12995: LD_EXP 23
12999: PPUSH
13000: LD_INT 82
13002: PPUSH
13003: LD_INT 44
13005: PPUSH
13006: CALL_OW 307
13010: IFFALSE 12988
// ComTurnXY ( Heike , 81 , 47 ) ;
13012: LD_EXP 23
13016: PPUSH
13017: LD_INT 81
13019: PPUSH
13020: LD_INT 47
13022: PPUSH
13023: CALL_OW 118
// Say ( Heike , DH-Story-8 ) ;
13027: LD_EXP 23
13031: PPUSH
13032: LD_STRING DH-Story-8
13034: PPUSH
13035: CALL_OW 88
// Say ( Omar , DO-Story-9 ) ;
13039: LD_EXP 24
13043: PPUSH
13044: LD_STRING DO-Story-9
13046: PPUSH
13047: CALL_OW 88
// Say ( Omar , DO-Story-10 ) ;
13051: LD_EXP 24
13055: PPUSH
13056: LD_STRING DO-Story-10
13058: PPUSH
13059: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13063: LD_EXP 23
13067: PPUSH
13068: LD_EXP 24
13072: PPUSH
13073: CALL_OW 119
// Say ( Heike , DH-Story-11 ) ;
13077: LD_EXP 23
13081: PPUSH
13082: LD_STRING DH-Story-11
13084: PPUSH
13085: CALL_OW 88
// ComMoveUnit ( Omar , Heike ) ;
13089: LD_EXP 24
13093: PPUSH
13094: LD_EXP 23
13098: PPUSH
13099: CALL_OW 112
// wait ( 0 0$0.3 ) ;
13103: LD_INT 10
13105: PPUSH
13106: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13110: LD_EXP 24
13114: PPUSH
13115: LD_EXP 23
13119: PPUSH
13120: CALL_OW 119
// Say ( Omar , DO-Story-12 ) ;
13124: LD_EXP 24
13128: PPUSH
13129: LD_STRING DO-Story-12
13131: PPUSH
13132: CALL_OW 88
// Say ( Heike , DH-Story-13 ) ;
13136: LD_EXP 23
13140: PPUSH
13141: LD_STRING DH-Story-13
13143: PPUSH
13144: CALL_OW 88
// Say ( Omar , DO-Story-14 ) ;
13148: LD_EXP 24
13152: PPUSH
13153: LD_STRING DO-Story-14
13155: PPUSH
13156: CALL_OW 88
// Say ( Omar , DO-Story-15 ) ;
13160: LD_EXP 24
13164: PPUSH
13165: LD_STRING DO-Story-15
13167: PPUSH
13168: CALL_OW 88
// CenterOnXY ( 84 , 48 ) ;
13172: LD_INT 84
13174: PPUSH
13175: LD_INT 48
13177: PPUSH
13178: CALL_OW 84
// ComMoveXY ( Heike , 84 , 48 ) ;
13182: LD_EXP 23
13186: PPUSH
13187: LD_INT 84
13189: PPUSH
13190: LD_INT 48
13192: PPUSH
13193: CALL_OW 111
// AddComTurnXY ( Heike , 84 , 49 ) ;
13197: LD_EXP 23
13201: PPUSH
13202: LD_INT 84
13204: PPUSH
13205: LD_INT 49
13207: PPUSH
13208: CALL_OW 178
// wait ( 0 0$1 ) ;
13212: LD_INT 35
13214: PPUSH
13215: CALL_OW 67
// ComMoveUnit ( Omar , Heike ) ;
13219: LD_EXP 24
13223: PPUSH
13224: LD_EXP 23
13228: PPUSH
13229: CALL_OW 112
// wait ( 0 0$1 ) ;
13233: LD_INT 35
13235: PPUSH
13236: CALL_OW 67
// ComTurnUnit ( Omar , Heike ) ;
13240: LD_EXP 24
13244: PPUSH
13245: LD_EXP 23
13249: PPUSH
13250: CALL_OW 119
// wait ( 0 0$0.3 ) ;
13254: LD_INT 10
13256: PPUSH
13257: CALL_OW 67
// Say ( Omar , DO-Story-16 ) ;
13261: LD_EXP 24
13265: PPUSH
13266: LD_STRING DO-Story-16
13268: PPUSH
13269: CALL_OW 88
// if Query ( QOmar2 ) = 2 then
13273: LD_STRING QOmar2
13275: PPUSH
13276: CALL_OW 97
13280: PUSH
13281: LD_INT 2
13283: EQUAL
13284: IFFALSE 13622
// begin ComTurnUnit ( Heike , Omar ) ;
13286: LD_EXP 23
13290: PPUSH
13291: LD_EXP 24
13295: PPUSH
13296: CALL_OW 119
// Say ( Heike , DH-QuestionN-1 ) ;
13300: LD_EXP 23
13304: PPUSH
13305: LD_STRING DH-QuestionN-1
13307: PPUSH
13308: CALL_OW 88
// ComMoveXY ( Heike , 79 , 57 ) ;
13312: LD_EXP 23
13316: PPUSH
13317: LD_INT 79
13319: PPUSH
13320: LD_INT 57
13322: PPUSH
13323: CALL_OW 111
// AddComMoveXY ( Heike , 68 , 53 ) ;
13327: LD_EXP 23
13331: PPUSH
13332: LD_INT 68
13334: PPUSH
13335: LD_INT 53
13337: PPUSH
13338: CALL_OW 171
// wait ( 0 0$2 ) ;
13342: LD_INT 70
13344: PPUSH
13345: CALL_OW 67
// ComEnterUnit ( Omar , omarVehicle ) ;
13349: LD_EXP 24
13353: PPUSH
13354: LD_EXP 26
13358: PPUSH
13359: CALL_OW 120
// RemoveSeeing ( 79 , 32 , 2 ) ;
13363: LD_INT 79
13365: PPUSH
13366: LD_INT 32
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13376: LD_INT 80
13378: PPUSH
13379: LD_INT 27
13381: PPUSH
13382: LD_INT 2
13384: PPUSH
13385: CALL_OW 331
// CenterOnXY ( 68 , 53 ) ;
13389: LD_INT 68
13391: PPUSH
13392: LD_INT 53
13394: PPUSH
13395: CALL_OW 84
// repeat wait ( 3 ) ;
13399: LD_INT 3
13401: PPUSH
13402: CALL_OW 67
// until GetDistUnitXY ( Heike , 68 , 53 ) < 6 ;
13406: LD_EXP 23
13410: PPUSH
13411: LD_INT 68
13413: PPUSH
13414: LD_INT 53
13416: PPUSH
13417: CALL_OW 297
13421: PUSH
13422: LD_INT 6
13424: LESS
13425: IFFALSE 13399
// uc_side := 1 ;
13427: LD_ADDR_OWVAR 20
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// uc_nation := nation_american ;
13435: LD_ADDR_OWVAR 21
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// amTroops := [ ] ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: EMPTY
13449: ST_TO_ADDR
// for i := 1 to 3 do
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: DOUBLE
13456: LD_INT 1
13458: DEC
13459: ST_TO_ADDR
13460: LD_INT 3
13462: PUSH
13463: FOR_TO
13464: IFFALSE 13557
// begin PrepareSoldier ( false , 10 ) ;
13466: LD_INT 0
13468: PPUSH
13469: LD_INT 10
13471: PPUSH
13472: CALL_OW 381
// amTroops := Join ( amTroops , CreateHuman ) ;
13476: LD_ADDR_VAR 0 5
13480: PUSH
13481: LD_VAR 0 5
13485: PPUSH
13486: CALL_OW 44
13490: PPUSH
13491: CALL 58665 0 2
13495: ST_TO_ADDR
// SetDir ( amTroops [ i ] , 2 ) ;
13496: LD_VAR 0 5
13500: PUSH
13501: LD_VAR 0 2
13505: ARRAY
13506: PPUSH
13507: LD_INT 2
13509: PPUSH
13510: CALL_OW 233
// PlaceUnitArea ( amTroops [ i ] , heikeTrap2Area , false ) ;
13514: LD_VAR 0 5
13518: PUSH
13519: LD_VAR 0 2
13523: ARRAY
13524: PPUSH
13525: LD_INT 11
13527: PPUSH
13528: LD_INT 0
13530: PPUSH
13531: CALL_OW 49
// ComAttackUnit ( amTroops [ i ] , Heike ) ;
13535: LD_VAR 0 5
13539: PUSH
13540: LD_VAR 0 2
13544: ARRAY
13545: PPUSH
13546: LD_EXP 23
13550: PPUSH
13551: CALL_OW 115
// end ;
13555: GO 13463
13557: POP
13558: POP
// ComAttackUnit ( Heike , amTroops [ 1 ] ) ;
13559: LD_EXP 23
13563: PPUSH
13564: LD_VAR 0 5
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PPUSH
13573: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
13577: LD_INT 35
13579: PPUSH
13580: CALL_OW 67
// until IsDead ( Heike ) or IsDying ( Heike ) ;
13584: LD_EXP 23
13588: PPUSH
13589: CALL_OW 301
13593: PUSH
13594: LD_EXP 23
13598: PPUSH
13599: CALL_OW 303
13603: OR
13604: IFFALSE 13577
// wait ( 0 0$2 ) ;
13606: LD_INT 70
13608: PPUSH
13609: CALL_OW 67
// YouLost ( Heike ) ;
13613: LD_STRING Heike
13615: PPUSH
13616: CALL_OW 104
// exit ;
13620: GO 13745
// end ; Say ( Omar , DO-Objective-1 ) ;
13622: LD_EXP 24
13626: PPUSH
13627: LD_STRING DO-Objective-1
13629: PPUSH
13630: CALL_OW 88
// ComTurnUnit ( Heike , Omar ) ;
13634: LD_EXP 23
13638: PPUSH
13639: LD_EXP 24
13643: PPUSH
13644: CALL_OW 119
// Say ( Heike , DH-Objective-2 ) ;
13648: LD_EXP 23
13652: PPUSH
13653: LD_STRING DH-Objective-2
13655: PPUSH
13656: CALL_OW 88
// Say ( Omar , DO-Objective-3 ) ;
13660: LD_EXP 24
13664: PPUSH
13665: LD_STRING DO-Objective-3
13667: PPUSH
13668: CALL_OW 88
// RemoveSeeing ( 79 , 32 , 2 ) ;
13672: LD_INT 79
13674: PPUSH
13675: LD_INT 32
13677: PPUSH
13678: LD_INT 2
13680: PPUSH
13681: CALL_OW 331
// RemoveSeeing ( 80 , 27 , 2 ) ;
13685: LD_INT 80
13687: PPUSH
13688: LD_INT 27
13690: PPUSH
13691: LD_INT 2
13693: PPUSH
13694: CALL_OW 331
// SetSide ( Omar , 2 ) ;
13698: LD_EXP 24
13702: PPUSH
13703: LD_INT 2
13705: PPUSH
13706: CALL_OW 235
// SetSide ( omarVehicle , 2 ) ;
13710: LD_EXP 26
13714: PPUSH
13715: LD_INT 2
13717: PPUSH
13718: CALL_OW 235
// ChangeMissionObjectives ( O1 ) ;
13722: LD_STRING O1
13724: PPUSH
13725: CALL_OW 337
// InGameOff ;
13729: CALL_OW 9
// gameActive := true ;
13733: LD_ADDR_EXP 19
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// SaveForQuickRestart ;
13741: CALL_OW 22
// end ;
13745: LD_VAR 0 1
13749: RET
// every 0 0$2 trigger gameActive and not spotArabianBase and FilterUnitsInArea ( arBaseArea , [ f_side , 2 ] ) do var i ;
13750: LD_EXP 19
13754: PUSH
13755: LD_EXP 7
13759: NOT
13760: AND
13761: PUSH
13762: LD_INT 4
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 2
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 70
13779: AND
13780: IFFALSE 13931
13782: GO 13784
13784: DISABLE
13785: LD_INT 0
13787: PPUSH
// begin spotArabianBase := true ;
13788: LD_ADDR_EXP 7
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// DialogueOn ;
13796: CALL_OW 6
// PlaceSeeing ( 232 , 101 , 2 , - 22 ) ;
13800: LD_INT 232
13802: PPUSH
13803: LD_INT 101
13805: PPUSH
13806: LD_INT 2
13808: PPUSH
13809: LD_INT 22
13811: NEG
13812: PPUSH
13813: CALL_OW 330
// RemoveSeeing ( 232 , 101 , 2 ) ;
13817: LD_INT 232
13819: PPUSH
13820: LD_INT 101
13822: PPUSH
13823: LD_INT 2
13825: PPUSH
13826: CALL_OW 331
// CenterNowOnXY ( 232 , 101 ) ;
13830: LD_INT 232
13832: PPUSH
13833: LD_INT 101
13835: PPUSH
13836: CALL_OW 86
// for i in FilterUnitsInArea ( arBaseArea , [ f_side , 5 ] ) do
13840: LD_ADDR_VAR 0 1
13844: PUSH
13845: LD_INT 4
13847: PPUSH
13848: LD_INT 22
13850: PUSH
13851: LD_INT 5
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PPUSH
13858: CALL_OW 70
13862: PUSH
13863: FOR_IN
13864: IFFALSE 13880
// SetSide ( i , 2 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 2
13873: PPUSH
13874: CALL_OW 235
13878: GO 13863
13880: POP
13881: POP
// if not spotAmericanBase then
13882: LD_EXP 6
13886: NOT
13887: IFFALSE 13903
// Say ( Omar , DO-ArBase-1a ) else
13889: LD_EXP 24
13893: PPUSH
13894: LD_STRING DO-ArBase-1a
13896: PPUSH
13897: CALL_OW 88
13901: GO 13915
// Say ( Omar , DO-ArBase-1b ) ;
13903: LD_EXP 24
13907: PPUSH
13908: LD_STRING DO-ArBase-1b
13910: PPUSH
13911: CALL_OW 88
// Say ( Heike , DH-ArBase-2 ) ;
13915: LD_EXP 23
13919: PPUSH
13920: LD_STRING DH-ArBase-2
13922: PPUSH
13923: CALL_OW 88
// DialogueOff ;
13927: CALL_OW 7
// end ;
13931: PPOPN 1
13933: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arFac ) or UnitsInside ( arFac ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
13934: LD_EXP 19
13938: PUSH
13939: LD_INT 87
13941: PPUSH
13942: CALL_OW 306
13946: PUSH
13947: LD_INT 87
13949: PPUSH
13950: CALL_OW 313
13954: OR
13955: AND
13956: PUSH
13957: LD_EXP 23
13961: PPUSH
13962: CALL_OW 302
13966: AND
13967: PUSH
13968: LD_EXP 24
13972: PPUSH
13973: CALL_OW 302
13977: AND
13978: IFFALSE 14322
13980: GO 13982
13982: DISABLE
// begin DialogueOn ;
13983: CALL_OW 6
// Say ( Heike , DH-Fac-1 ) ;
13987: LD_EXP 23
13991: PPUSH
13992: LD_STRING DH-Fac-1
13994: PPUSH
13995: CALL_OW 88
// Say ( Omar , DOm-Fac-2 ) ;
13999: LD_EXP 24
14003: PPUSH
14004: LD_STRING DOm-Fac-2
14006: PPUSH
14007: CALL_OW 88
// if LoadVariable ( 03_CargoRecycled , false ) then
14011: LD_STRING 03_CargoRecycled
14013: PPUSH
14014: LD_INT 0
14016: PPUSH
14017: CALL_OW 30
14021: IFFALSE 14036
// SetTech ( tech_cargo , 2 , state_researched ) ;
14023: LD_INT 83
14025: PPUSH
14026: LD_INT 2
14028: PPUSH
14029: LD_INT 2
14031: PPUSH
14032: CALL_OW 322
// if TestCharacters ( 09_Markov ) then
14036: LD_STRING 09_Markov
14038: PPUSH
14039: CALL_OW 28
14043: IFFALSE 14158
// begin Say ( Heike , DH-Fac-3a ) ;
14045: LD_EXP 23
14049: PPUSH
14050: LD_STRING DH-Fac-3a
14052: PPUSH
14053: CALL_OW 88
// SetTech ( tech_gatling , 2 , state_researched ) ;
14057: LD_INT 69
14059: PPUSH
14060: LD_INT 2
14062: PPUSH
14063: LD_INT 2
14065: PPUSH
14066: CALL_OW 322
// SetTech ( tech_gun , 2 , state_researched ) ;
14070: LD_INT 39
14072: PPUSH
14073: LD_INT 2
14075: PPUSH
14076: LD_INT 2
14078: PPUSH
14079: CALL_OW 322
// SetTech ( tech_radar , 2 , state_researched ) ;
14083: LD_INT 6
14085: PPUSH
14086: LD_INT 2
14088: PPUSH
14089: LD_INT 2
14091: PPUSH
14092: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14096: LD_INT 15
14098: PPUSH
14099: LD_INT 2
14101: PPUSH
14102: LD_INT 2
14104: PPUSH
14105: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14109: LD_EXP 23
14113: PPUSH
14114: LD_INT 3
14116: PPUSH
14117: CALL_OW 259
14121: PUSH
14122: LD_INT 10
14124: LESS
14125: IFFALSE 14156
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14127: LD_EXP 23
14131: PPUSH
14132: LD_INT 3
14134: PPUSH
14135: LD_EXP 23
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 259
14147: PUSH
14148: LD_INT 1
14150: PLUS
14151: PPUSH
14152: CALL_OW 237
// end else
14156: GO 14311
// if TestCharacters ( 09_Olaf ) then
14158: LD_STRING 09_Olaf
14160: PPUSH
14161: CALL_OW 28
14165: IFFALSE 14254
// begin Say ( Heike , DH-Fac-3b ) ;
14167: LD_EXP 23
14171: PPUSH
14172: LD_STRING DH-Fac-3b
14174: PPUSH
14175: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14179: LD_INT 6
14181: PPUSH
14182: LD_INT 2
14184: PPUSH
14185: LD_INT 2
14187: PPUSH
14188: CALL_OW 322
// SetTech ( tech_remCont , 2 , state_researched ) ;
14192: LD_INT 15
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: LD_INT 2
14200: PPUSH
14201: CALL_OW 322
// if GetSkill ( Heike , 3 ) < 10 then
14205: LD_EXP 23
14209: PPUSH
14210: LD_INT 3
14212: PPUSH
14213: CALL_OW 259
14217: PUSH
14218: LD_INT 10
14220: LESS
14221: IFFALSE 14252
// SetSkill ( Heike , 3 , GetSkill ( Heike , 3 ) + 1 ) ;
14223: LD_EXP 23
14227: PPUSH
14228: LD_INT 3
14230: PPUSH
14231: LD_EXP 23
14235: PPUSH
14236: LD_INT 3
14238: PPUSH
14239: CALL_OW 259
14243: PUSH
14244: LD_INT 1
14246: PLUS
14247: PPUSH
14248: CALL_OW 237
// end else
14252: GO 14311
// if GetSkill ( Heike , skill_mechanical ) > 5 then
14254: LD_EXP 23
14258: PPUSH
14259: LD_INT 3
14261: PPUSH
14262: CALL_OW 259
14266: PUSH
14267: LD_INT 5
14269: GREATER
14270: IFFALSE 14299
// begin Say ( Heike , DH-Fac-3c ) ;
14272: LD_EXP 23
14276: PPUSH
14277: LD_STRING DH-Fac-3c
14279: PPUSH
14280: CALL_OW 88
// SetTech ( tech_radar , 2 , state_researched ) ;
14284: LD_INT 6
14286: PPUSH
14287: LD_INT 2
14289: PPUSH
14290: LD_INT 2
14292: PPUSH
14293: CALL_OW 322
// end else
14297: GO 14311
// Say ( Heike , DH-Fac-3d ) ;
14299: LD_EXP 23
14303: PPUSH
14304: LD_STRING DH-Fac-3d
14306: PPUSH
14307: CALL_OW 88
// ChangeMissionObjectives ( ARemote ) ;
14311: LD_STRING ARemote
14313: PPUSH
14314: CALL_OW 337
// DialogueOff ;
14318: CALL_OW 7
// end ;
14322: END
// every 0 0$1 trigger gameActive and ( IsSelected ( arLab ) or UnitsInside ( arLab ) ) and IsOk ( Heike ) and IsOk ( Omar ) do
14323: LD_EXP 19
14327: PUSH
14328: LD_INT 89
14330: PPUSH
14331: CALL_OW 306
14335: PUSH
14336: LD_INT 89
14338: PPUSH
14339: CALL_OW 313
14343: OR
14344: AND
14345: PUSH
14346: LD_EXP 23
14350: PPUSH
14351: CALL_OW 302
14355: AND
14356: PUSH
14357: LD_EXP 24
14361: PPUSH
14362: CALL_OW 302
14366: AND
14367: IFFALSE 14595
14369: GO 14371
14371: DISABLE
// begin DialogueOn ;
14372: CALL_OW 6
// Say ( Heike , DH-Lab-1 ) ;
14376: LD_EXP 23
14380: PPUSH
14381: LD_STRING DH-Lab-1
14383: PPUSH
14384: CALL_OW 88
// Say ( Omar , DOm-Lab-2 ) ;
14388: LD_EXP 24
14392: PPUSH
14393: LD_STRING DOm-Lab-2
14395: PPUSH
14396: CALL_OW 88
// if TestCharacters ( 09_Aviradze ) then
14400: LD_STRING 09_Aviradze
14402: PPUSH
14403: CALL_OW 28
14407: IFFALSE 14462
// begin SetTech ( tech_apelang , 2 , state_researched ) ;
14409: LD_INT 1
14411: PPUSH
14412: LD_INT 2
14414: PPUSH
14415: LD_INT 2
14417: PPUSH
14418: CALL_OW 322
// SetTech ( tech_apepsych , 2 , state_researched ) ;
14422: LD_INT 2
14424: PPUSH
14425: LD_INT 2
14427: PPUSH
14428: LD_INT 2
14430: PPUSH
14431: CALL_OW 322
// SetTech ( tech_apeagres , 2 , state_researched ) ;
14435: LD_INT 11
14437: PPUSH
14438: LD_INT 2
14440: PPUSH
14441: LD_INT 2
14443: PPUSH
14444: CALL_OW 322
// Say ( Heike , DH-Lab-4a ) ;
14448: LD_EXP 23
14452: PPUSH
14453: LD_STRING DH-Lab-4a
14455: PPUSH
14456: CALL_OW 88
// end else
14460: GO 14474
// Say ( Heike , DH-Lab-4b ) ;
14462: LD_EXP 23
14466: PPUSH
14467: LD_STRING DH-Lab-4b
14469: PPUSH
14470: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
14474: LD_STRING 05_DrugsTested
14476: PPUSH
14477: LD_EXP 1
14481: PPUSH
14482: CALL_OW 30
14486: IFFALSE 14513
// begin Say ( Heike , DH-Lab-5a ) ;
14488: LD_EXP 23
14492: PPUSH
14493: LD_STRING DH-Lab-5a
14495: PPUSH
14496: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_enabled ) ;
14500: LD_INT 5
14502: PPUSH
14503: LD_INT 2
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 322
// end ; if LoadVariable ( 09_ApeBrain , debug ) then
14513: LD_STRING 09_ApeBrain
14515: PPUSH
14516: LD_EXP 1
14520: PPUSH
14521: CALL_OW 30
14525: IFFALSE 14564
// begin Say ( Heike , DH-Lab-6a ) ;
14527: LD_EXP 23
14531: PPUSH
14532: LD_STRING DH-Lab-6a
14534: PPUSH
14535: CALL_OW 88
// Say ( Omar , DOm-Lab-7a ) ;
14539: LD_EXP 24
14543: PPUSH
14544: LD_STRING DOm-Lab-7a
14546: PPUSH
14547: CALL_OW 88
// SetTech ( tech_apeBrain , 2 , state_enabled ) ;
14551: LD_INT 4
14553: PPUSH
14554: LD_INT 2
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// end ; if LoadVariable ( 09_ApeNeural , debug ) then
14564: LD_STRING 09_ApeNeural
14566: PPUSH
14567: LD_EXP 1
14571: PPUSH
14572: CALL_OW 30
14576: IFFALSE 14591
// begin SetTech ( tech_apeNeural , 2 , state_enabled ) ;
14578: LD_INT 3
14580: PPUSH
14581: LD_INT 2
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: CALL_OW 322
// end ; DialogueOff ;
14591: CALL_OW 7
// end ;
14595: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) do
14596: LD_EXP 19
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 25
14613: PUSH
14614: LD_INT 12
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 69
14629: AND
14630: IFFALSE 14665
14632: GO 14634
14634: DISABLE
// begin if IsOk ( Heike ) then
14635: LD_EXP 23
14639: PPUSH
14640: CALL_OW 302
14644: IFFALSE 14658
// Say ( Heike , DH-Ape-1 ) ;
14646: LD_EXP 23
14650: PPUSH
14651: LD_STRING DH-Ape-1
14653: PPUSH
14654: CALL_OW 88
// ChangeMissionObjectives ( AApes ) ;
14658: LD_STRING AApes
14660: PPUSH
14661: CALL_OW 337
// end ;
14665: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_soldier ] ] ) >= 5 do
14666: LD_EXP 19
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_INT 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 25
14683: PUSH
14684: LD_INT 15
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 69
14699: PUSH
14700: LD_INT 5
14702: GREATEREQUAL
14703: AND
14704: IFFALSE 14806
14706: GO 14708
14708: DISABLE
// begin hasApes := true ;
14709: LD_ADDR_EXP 16
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// ChangeMissionObjectives ( AApesOut ) ;
14717: LD_STRING AApesOut
14719: PPUSH
14720: CALL_OW 337
// if not IsOk ( Heike ) or not IsOk ( Omar ) then
14724: LD_EXP 23
14728: PPUSH
14729: CALL_OW 302
14733: NOT
14734: PUSH
14735: LD_EXP 24
14739: PPUSH
14740: CALL_OW 302
14744: NOT
14745: OR
14746: IFFALSE 14750
// exit ;
14748: GO 14806
// DialogueOn ;
14750: CALL_OW 6
// Say ( Heike , DH-ApeArmy-1 ) ;
14754: LD_EXP 23
14758: PPUSH
14759: LD_STRING DH-ApeArmy-1
14761: PPUSH
14762: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-2 ) ;
14766: LD_EXP 24
14770: PPUSH
14771: LD_STRING DOm-ApeArmy-2
14773: PPUSH
14774: CALL_OW 88
// Say ( Heike , DH-ApeArmy-3 ) ;
14778: LD_EXP 23
14782: PPUSH
14783: LD_STRING DH-ApeArmy-3
14785: PPUSH
14786: CALL_OW 88
// Say ( Omar , DOm-ApeArmy-4 ) ;
14790: LD_EXP 24
14794: PPUSH
14795: LD_STRING DOm-ApeArmy-4
14797: PPUSH
14798: CALL_OW 88
// DialogueOff ;
14802: CALL_OW 7
// end ;
14806: END
// every 0 0$1 trigger gameActive and GetTech ( tech_stimdrugs , 2 ) = state_researched do
14807: LD_EXP 19
14811: PUSH
14812: LD_INT 5
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL_OW 321
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: AND
14827: IFFALSE 14863
14829: GO 14831
14831: DISABLE
// begin hasDrugs := true ;
14832: LD_ADDR_EXP 17
14836: PUSH
14837: LD_INT 1
14839: ST_TO_ADDR
// if IsOk ( Heike ) then
14840: LD_EXP 23
14844: PPUSH
14845: CALL_OW 302
14849: IFFALSE 14863
// Say ( Heike , DH-Stim-1 ) ;
14851: LD_EXP 23
14855: PPUSH
14856: LD_STRING DH-Stim-1
14858: PPUSH
14859: CALL_OW 88
// end ;
14863: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman_kamikaze ] ] ) do
14864: LD_EXP 19
14868: PUSH
14869: LD_INT 22
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 17
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: AND
14898: IFFALSE 14915
14900: GO 14902
14902: DISABLE
// Say ( Heike , DH-Kamikadze-1 ) ;
14903: LD_EXP 23
14907: PPUSH
14908: LD_STRING DH-Kamikadze-1
14910: PPUSH
14911: CALL_OW 88
14915: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_chassis , class_mastodont ] ] ) and IsOk ( Omar ) and IsOk ( Heike ) do
14916: LD_EXP 19
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 31
14933: PUSH
14934: LD_INT 31
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: AND
14950: PUSH
14951: LD_EXP 24
14955: PPUSH
14956: CALL_OW 302
14960: AND
14961: PUSH
14962: LD_EXP 23
14966: PPUSH
14967: CALL_OW 302
14971: AND
14972: IFFALSE 15057
14974: GO 14976
14976: DISABLE
// begin InGameOn ;
14977: CALL_OW 8
// CenterNowOnUnits ( Omar ) ;
14981: LD_EXP 24
14985: PPUSH
14986: CALL_OW 87
// Say ( Heike , DH-Mastodont-1 ) ;
14990: LD_EXP 23
14994: PPUSH
14995: LD_STRING DH-Mastodont-1
14997: PPUSH
14998: CALL_OW 88
// Say ( Omar , DOm-Mastodont-2 ) ;
15002: LD_EXP 24
15006: PPUSH
15007: LD_STRING DOm-Mastodont-2
15009: PPUSH
15010: CALL_OW 88
// Say ( Heike , DH-Mastodont-3 ) ;
15014: LD_EXP 23
15018: PPUSH
15019: LD_STRING DH-Mastodont-3
15021: PPUSH
15022: CALL_OW 88
// Say ( Omar , DOm-Mastodont-4 ) ;
15026: LD_EXP 24
15030: PPUSH
15031: LD_STRING DOm-Mastodont-4
15033: PPUSH
15034: CALL_OW 88
// hasMastodont := true ;
15038: LD_ADDR_EXP 13
15042: PUSH
15043: LD_INT 1
15045: ST_TO_ADDR
// InGameOff ;
15046: CALL_OW 9
// SetAchievement ( ACH_MASTODONTTAME ) ;
15050: LD_STRING ACH_MASTODONTTAME
15052: PPUSH
15053: CALL_OW 543
// end ;
15057: END
// every 0 0$1 trigger gameActive and tigerCounter do
15058: LD_EXP 19
15062: PUSH
15063: LD_EXP 21
15067: AND
15068: IFFALSE 15080
15070: GO 15072
15072: DISABLE
// SetAchievement ( ACH_TIGERTAME ) ;
15073: LD_STRING ACH_TIGERTAME
15075: PPUSH
15076: CALL_OW 543
15080: END
// every 0 0$1 trigger gameActive and tigerCounter > 1 do
15081: LD_EXP 19
15085: PUSH
15086: LD_EXP 21
15090: PUSH
15091: LD_INT 1
15093: GREATER
15094: AND
15095: IFFALSE 15199
15097: GO 15099
15099: DISABLE
// begin hasTigers := true ;
15100: LD_ADDR_EXP 15
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// if not IsOk ( Omar ) or not IsOk ( Heike ) then
15108: LD_EXP 24
15112: PPUSH
15113: CALL_OW 302
15117: NOT
15118: PUSH
15119: LD_EXP 23
15123: PPUSH
15124: CALL_OW 302
15128: NOT
15129: OR
15130: IFFALSE 15134
// exit ;
15132: GO 15199
// CenterNowOnUnits ( Omar ) ;
15134: LD_EXP 24
15138: PPUSH
15139: CALL_OW 87
// DialogueOn ;
15143: CALL_OW 6
// Say ( Omar , DOm-Tiger-1 ) ;
15147: LD_EXP 24
15151: PPUSH
15152: LD_STRING DOm-Tiger-1
15154: PPUSH
15155: CALL_OW 88
// Say ( Heike , DH-Tiger-2 ) ;
15159: LD_EXP 23
15163: PPUSH
15164: LD_STRING DH-Tiger-2
15166: PPUSH
15167: CALL_OW 88
// Say ( Omar , DOm-Tiger-3 ) ;
15171: LD_EXP 24
15175: PPUSH
15176: LD_STRING DOm-Tiger-3
15178: PPUSH
15179: CALL_OW 88
// Say ( Heike , DH-Tiger-4 ) ;
15183: LD_EXP 23
15187: PPUSH
15188: LD_STRING DH-Tiger-4
15190: PPUSH
15191: CALL_OW 88
// DialogueOff ;
15195: CALL_OW 7
// end ;
15199: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_control , control_remote ] ] ) >= 3 do
15200: LD_EXP 19
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 50
15217: PUSH
15218: EMPTY
15219: LIST
15220: PUSH
15221: LD_INT 33
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: PPUSH
15236: CALL_OW 69
15240: PUSH
15241: LD_INT 3
15243: GREATEREQUAL
15244: AND
15245: IFFALSE 15288
15247: GO 15249
15249: DISABLE
// begin ChangeMissionObjectives ( ARemoteOut ) ;
15250: LD_STRING ARemoteOut
15252: PPUSH
15253: CALL_OW 337
// hasVehicles := true ;
15257: LD_ADDR_EXP 14
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
// if IsOk ( Heike ) then
15265: LD_EXP 23
15269: PPUSH
15270: CALL_OW 302
15274: IFFALSE 15288
// Say ( Heike , DH-Mechanic-1 ) ;
15276: LD_EXP 23
15280: PPUSH
15281: LD_STRING DH-Mechanic-1
15283: PPUSH
15284: CALL_OW 88
// end ;
15288: END
// every 0 0$1 trigger gameActive and ( FilterUnitsInArea ( amBaseOuterArea , [ f_side , 2 ] ) or SeeArea ( 2 , amBaseArea ) ) do
15289: LD_EXP 19
15293: PUSH
15294: LD_INT 29
15296: PPUSH
15297: LD_INT 22
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 70
15311: PUSH
15312: LD_INT 2
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 294
15322: OR
15323: AND
15324: IFFALSE 15337
15326: GO 15328
15328: DISABLE
// spotAmericanBase := true ;
15329: LD_ADDR_EXP 6
15333: PUSH
15334: LD_INT 1
15336: ST_TO_ADDR
15337: END
// every 0 0$2 trigger gameActive and spotAmericanBase and IsOk ( Omar ) and IsOk ( Heike ) do
15338: LD_EXP 19
15342: PUSH
15343: LD_EXP 6
15347: AND
15348: PUSH
15349: LD_EXP 24
15353: PPUSH
15354: CALL_OW 302
15358: AND
15359: PUSH
15360: LD_EXP 23
15364: PPUSH
15365: CALL_OW 302
15369: AND
15370: IFFALSE 15610
15372: GO 15374
15374: DISABLE
// begin DialogueOn ;
15375: CALL_OW 6
// PlaceSeeing ( 92 , 129 , 2 , - 22 ) ;
15379: LD_INT 92
15381: PPUSH
15382: LD_INT 129
15384: PPUSH
15385: LD_INT 2
15387: PPUSH
15388: LD_INT 22
15390: NEG
15391: PPUSH
15392: CALL_OW 330
// RemoveSeeing ( 92 , 129 , 2 ) ;
15396: LD_INT 92
15398: PPUSH
15399: LD_INT 129
15401: PPUSH
15402: LD_INT 2
15404: PPUSH
15405: CALL_OW 331
// CenterNowOnXY ( 92 , 129 ) ;
15409: LD_INT 92
15411: PPUSH
15412: LD_INT 129
15414: PPUSH
15415: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
15419: LD_INT 10
15421: PPUSH
15422: CALL_OW 68
// Say ( Omar , DO-AmBase-1 ) ;
15426: LD_EXP 24
15430: PPUSH
15431: LD_STRING DO-AmBase-1
15433: PPUSH
15434: CALL_OW 88
// Say ( Heike , DH-AmBase-2 ) ;
15438: LD_EXP 23
15442: PPUSH
15443: LD_STRING DH-AmBase-2
15445: PPUSH
15446: CALL_OW 88
// Say ( Omar , DO-AmBase-3 ) ;
15450: LD_EXP 24
15454: PPUSH
15455: LD_STRING DO-AmBase-3
15457: PPUSH
15458: CALL_OW 88
// Say ( Heike , DH-AmBase-4 ) ;
15462: LD_EXP 23
15466: PPUSH
15467: LD_STRING DH-AmBase-4
15469: PPUSH
15470: CALL_OW 88
// Say ( Omar , DO-AmBase-5 ) ;
15474: LD_EXP 24
15478: PPUSH
15479: LD_STRING DO-AmBase-5
15481: PPUSH
15482: CALL_OW 88
// Say ( Heike , DH-AmBase-6 ) ;
15486: LD_EXP 23
15490: PPUSH
15491: LD_STRING DH-AmBase-6
15493: PPUSH
15494: CALL_OW 88
// Say ( Omar , DO-AmBase-7 ) ;
15498: LD_EXP 24
15502: PPUSH
15503: LD_STRING DO-AmBase-7
15505: PPUSH
15506: CALL_OW 88
// if not spotArabianBase then
15510: LD_EXP 7
15514: NOT
15515: IFFALSE 15531
// begin Say ( Omar , DO-AmBase-8a ) ;
15517: LD_EXP 24
15521: PPUSH
15522: LD_STRING DO-AmBase-8a
15524: PPUSH
15525: CALL_OW 88
// end else
15529: GO 15543
// begin Say ( Omar , DO-AmBase-8b ) ;
15531: LD_EXP 24
15535: PPUSH
15536: LD_STRING DO-AmBase-8b
15538: PPUSH
15539: CALL_OW 88
// end ; if IsInUnit ( Heike ) then
15543: LD_EXP 23
15547: PPUSH
15548: CALL_OW 310
15552: IFFALSE 15570
// CenterNowOnUnits ( IsInUnit ( Heike ) ) else
15554: LD_EXP 23
15558: PPUSH
15559: CALL_OW 310
15563: PPUSH
15564: CALL_OW 87
15568: GO 15579
// CenterNowOnUnits ( Heike ) ;
15570: LD_EXP 23
15574: PPUSH
15575: CALL_OW 87
// Say ( Heike , DH-AmBase-9 ) ;
15579: LD_EXP 23
15583: PPUSH
15584: LD_STRING DH-AmBase-9
15586: PPUSH
15587: CALL_OW 88
// DialogueOff ;
15591: CALL_OW 7
// spotByAmerican := true ;
15595: LD_ADDR_EXP 8
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// ChangeMissionObjectives ( O2 ) ;
15603: LD_STRING O2
15605: PPUSH
15606: CALL_OW 337
// end ;
15610: END
// function TalkAboutLegion ; begin
15611: LD_INT 0
15613: PPUSH
// Say ( Heike , DH-Legion-1 ) ;
15614: LD_EXP 23
15618: PPUSH
15619: LD_STRING DH-Legion-1
15621: PPUSH
15622: CALL_OW 88
// Say ( Omar , DOm-Legion-2 ) ;
15626: LD_EXP 24
15630: PPUSH
15631: LD_STRING DOm-Legion-2
15633: PPUSH
15634: CALL_OW 88
// Say ( Heike , DH-Legion-3 ) ;
15638: LD_EXP 23
15642: PPUSH
15643: LD_STRING DH-Legion-3
15645: PPUSH
15646: CALL_OW 88
// Say ( Omar , DOm-Legion-4 ) ;
15650: LD_EXP 24
15654: PPUSH
15655: LD_STRING DOm-Legion-4
15657: PPUSH
15658: CALL_OW 88
// Say ( Heike , DH-Legion-5 ) ;
15662: LD_EXP 23
15666: PPUSH
15667: LD_STRING DH-Legion-5
15669: PPUSH
15670: CALL_OW 88
// Say ( Omar , DOm-Legion-6 ) ;
15674: LD_EXP 24
15678: PPUSH
15679: LD_STRING DOm-Legion-6
15681: PPUSH
15682: CALL_OW 88
// Say ( Heike , DH-Legion-7 ) ;
15686: LD_EXP 23
15690: PPUSH
15691: LD_STRING DH-Legion-7
15693: PPUSH
15694: CALL_OW 88
// end ;
15698: LD_VAR 0 1
15702: RET
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotNorthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
15703: LD_EXP 19
15707: PUSH
15708: LD_EXP 23
15712: PUSH
15713: LD_EXP 24
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PPUSH
15722: LD_INT 22
15724: PPUSH
15725: CALL 11734 0 2
15729: AND
15730: PUSH
15731: LD_EXP 9
15735: NOT
15736: AND
15737: PUSH
15738: LD_EXP 10
15742: NOT
15743: AND
15744: IFFALSE 16229
15746: GO 15748
15748: DISABLE
15749: LD_INT 0
15751: PPUSH
15752: PPUSH
15753: PPUSH
// begin uc_side := 8 ;
15754: LD_ADDR_OWVAR 20
15758: PUSH
15759: LD_INT 8
15761: ST_TO_ADDR
// uc_nation := nation_american ;
15762: LD_ADDR_OWVAR 21
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
15770: LD_INT 3
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 9
15781: PPUSH
15782: LD_INT 90
15784: PPUSH
15785: CALL 25794 0 5
// veh := CreateVehicle ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: CALL_OW 45
15798: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
15799: LD_ADDR_EXP 43
15803: PUSH
15804: LD_EXP 43
15808: PPUSH
15809: LD_VAR 0 3
15813: PPUSH
15814: CALL 58665 0 2
15818: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 2
15826: PPUSH
15827: CALL_OW 233
// PlaceUnitXY ( veh , 126 , 18 , false ) ;
15831: LD_VAR 0 3
15835: PPUSH
15836: LD_INT 126
15838: PPUSH
15839: LD_INT 18
15841: PPUSH
15842: LD_INT 0
15844: PPUSH
15845: CALL_OW 48
// uc_nation := nation_arabian ;
15849: LD_ADDR_OWVAR 21
15853: PUSH
15854: LD_INT 2
15856: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15857: LD_INT 0
15859: PPUSH
15860: LD_INT 6
15862: PUSH
15863: LD_INT 7
15865: PUSH
15866: LD_INT 8
15868: PUSH
15869: LD_INT 9
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: PUSH
15878: LD_OWVAR 67
15882: ARRAY
15883: PPUSH
15884: CALL_OW 383
// un := CreateHuman ;
15888: LD_ADDR_VAR 0 2
15892: PUSH
15893: CALL_OW 44
15897: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15898: LD_ADDR_EXP 38
15902: PUSH
15903: LD_EXP 38
15907: PPUSH
15908: LD_VAR 0 2
15912: PPUSH
15913: CALL 58665 0 2
15917: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15918: LD_VAR 0 2
15922: PPUSH
15923: LD_VAR 0 3
15927: PPUSH
15928: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
15932: LD_INT 0
15934: PPUSH
15935: LD_INT 6
15937: PUSH
15938: LD_INT 7
15940: PUSH
15941: LD_INT 8
15943: PUSH
15944: LD_INT 9
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: PUSH
15953: LD_OWVAR 67
15957: ARRAY
15958: PPUSH
15959: CALL_OW 381
// for i := 1 to 3 do
15963: LD_ADDR_VAR 0 1
15967: PUSH
15968: DOUBLE
15969: LD_INT 1
15971: DEC
15972: ST_TO_ADDR
15973: LD_INT 3
15975: PUSH
15976: FOR_TO
15977: IFFALSE 16044
// begin un := CreateHuman ;
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: CALL_OW 44
15988: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
15989: LD_ADDR_EXP 38
15993: PUSH
15994: LD_EXP 38
15998: PPUSH
15999: LD_VAR 0 2
16003: PPUSH
16004: CALL 58665 0 2
16008: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16009: LD_VAR 0 2
16013: PPUSH
16014: LD_INT 2
16016: PPUSH
16017: CALL_OW 233
// PlaceUnitXYR ( un , 126 , 18 , 4 , false ) ;
16021: LD_VAR 0 2
16025: PPUSH
16026: LD_INT 126
16028: PPUSH
16029: LD_INT 18
16031: PPUSH
16032: LD_INT 4
16034: PPUSH
16035: LD_INT 0
16037: PPUSH
16038: CALL_OW 50
// end ;
16042: GO 15976
16044: POP
16045: POP
// wait ( 0 0$01 ) ;
16046: LD_INT 35
16048: PPUSH
16049: CALL_OW 67
// DialogueOn ;
16053: CALL_OW 6
// PlaceSeeing ( 126 , 18 , 2 , - 16 ) ;
16057: LD_INT 126
16059: PPUSH
16060: LD_INT 18
16062: PPUSH
16063: LD_INT 2
16065: PPUSH
16066: LD_INT 16
16068: NEG
16069: PPUSH
16070: CALL_OW 330
// CenterNowOnXY ( 126 , 18 ) ;
16074: LD_INT 126
16076: PPUSH
16077: LD_INT 18
16079: PPUSH
16080: CALL_OW 86
// TalkAboutLegion ;
16084: CALL 15611 0 0
// RemoveSeeing ( 126 , 18 , 2 ) ;
16088: LD_INT 126
16090: PPUSH
16091: LD_INT 18
16093: PPUSH
16094: LD_INT 2
16096: PPUSH
16097: CALL_OW 331
// DialogueOff ;
16101: CALL_OW 7
// spotLegion := true ;
16105: LD_ADDR_EXP 10
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16113: LD_EXP 38
16117: PPUSH
16118: LD_INT 164
16120: PPUSH
16121: LD_INT 47
16123: PPUSH
16124: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16128: LD_EXP 38
16132: PPUSH
16133: LD_INT 179
16135: PPUSH
16136: LD_INT 20
16138: PPUSH
16139: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16143: LD_INT 35
16145: PPUSH
16146: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16150: LD_EXP 38
16154: PPUSH
16155: LD_INT 60
16157: PUSH
16158: EMPTY
16159: LIST
16160: PPUSH
16161: CALL_OW 72
16165: NOT
16166: PUSH
16167: LD_EXP 38
16171: PPUSH
16172: LD_INT 50
16174: PUSH
16175: EMPTY
16176: LIST
16177: PPUSH
16178: CALL_OW 72
16182: NOT
16183: OR
16184: IFFALSE 16143
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16186: LD_EXP 38
16190: PPUSH
16191: LD_INT 50
16193: PUSH
16194: EMPTY
16195: LIST
16196: PPUSH
16197: CALL_OW 72
16201: NOT
16202: IFFALSE 16206
// exit ;
16204: GO 16229
// legForces := legForces union legEForces ;
16206: LD_ADDR_EXP 37
16210: PUSH
16211: LD_EXP 37
16215: PUSH
16216: LD_EXP 38
16220: UNION
16221: ST_TO_ADDR
// legEForces := [ ] ;
16222: LD_ADDR_EXP 38
16226: PUSH
16227: EMPTY
16228: ST_TO_ADDR
// end ;
16229: PPOPN 3
16231: END
// every 0 0$2 trigger gameActive and AreInArea ( [ Heike , Omar ] , legSpotSouthArea ) and not spotByLegion and not spotLegion do var i , un , veh ;
16232: LD_EXP 19
16236: PUSH
16237: LD_EXP 23
16241: PUSH
16242: LD_EXP 24
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: LD_INT 23
16253: PPUSH
16254: CALL 11734 0 2
16258: AND
16259: PUSH
16260: LD_EXP 9
16264: NOT
16265: AND
16266: PUSH
16267: LD_EXP 10
16271: NOT
16272: AND
16273: IFFALSE 16758
16275: GO 16277
16277: DISABLE
16278: LD_INT 0
16280: PPUSH
16281: PPUSH
16282: PPUSH
// begin uc_side := 8 ;
16283: LD_ADDR_OWVAR 20
16287: PUSH
16288: LD_INT 8
16290: ST_TO_ADDR
// uc_nation := nation_american ;
16291: LD_ADDR_OWVAR 21
16295: PUSH
16296: LD_INT 1
16298: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
16299: LD_INT 3
16301: PPUSH
16302: LD_INT 1
16304: PPUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_INT 9
16310: PPUSH
16311: LD_INT 90
16313: PPUSH
16314: CALL 25794 0 5
// veh := CreateVehicle ;
16318: LD_ADDR_VAR 0 3
16322: PUSH
16323: CALL_OW 45
16327: ST_TO_ADDR
// legTanks := Join ( legTanks , veh ) ;
16328: LD_ADDR_EXP 43
16332: PUSH
16333: LD_EXP 43
16337: PPUSH
16338: LD_VAR 0 3
16342: PPUSH
16343: CALL 58665 0 2
16347: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
16348: LD_VAR 0 3
16352: PPUSH
16353: LD_INT 3
16355: PPUSH
16356: CALL_OW 233
// PlaceUnitXY ( veh , 224 , 57 , false ) ;
16360: LD_VAR 0 3
16364: PPUSH
16365: LD_INT 224
16367: PPUSH
16368: LD_INT 57
16370: PPUSH
16371: LD_INT 0
16373: PPUSH
16374: CALL_OW 48
// uc_nation := nation_arabian ;
16378: LD_ADDR_OWVAR 21
16382: PUSH
16383: LD_INT 2
16385: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16386: LD_INT 0
16388: PPUSH
16389: LD_INT 6
16391: PUSH
16392: LD_INT 7
16394: PUSH
16395: LD_INT 8
16397: PUSH
16398: LD_INT 9
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: PUSH
16407: LD_OWVAR 67
16411: ARRAY
16412: PPUSH
16413: CALL_OW 383
// un := CreateHuman ;
16417: LD_ADDR_VAR 0 2
16421: PUSH
16422: CALL_OW 44
16426: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16427: LD_ADDR_EXP 38
16431: PUSH
16432: LD_EXP 38
16436: PPUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL 58665 0 2
16446: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16447: LD_VAR 0 2
16451: PPUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: CALL_OW 52
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
16461: LD_INT 0
16463: PPUSH
16464: LD_INT 6
16466: PUSH
16467: LD_INT 7
16469: PUSH
16470: LD_INT 8
16472: PUSH
16473: LD_INT 9
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_OWVAR 67
16486: ARRAY
16487: PPUSH
16488: CALL_OW 381
// for i := 1 to 3 do
16492: LD_ADDR_VAR 0 1
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_INT 3
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16573
// begin un := CreateHuman ;
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: CALL_OW 44
16517: ST_TO_ADDR
// legEForces := Join ( legEForces , un ) ;
16518: LD_ADDR_EXP 38
16522: PUSH
16523: LD_EXP 38
16527: PPUSH
16528: LD_VAR 0 2
16532: PPUSH
16533: CALL 58665 0 2
16537: ST_TO_ADDR
// SetDir ( un , 3 ) ;
16538: LD_VAR 0 2
16542: PPUSH
16543: LD_INT 3
16545: PPUSH
16546: CALL_OW 233
// PlaceUnitXYR ( un , 224 , 57 , 4 , false ) ;
16550: LD_VAR 0 2
16554: PPUSH
16555: LD_INT 224
16557: PPUSH
16558: LD_INT 57
16560: PPUSH
16561: LD_INT 4
16563: PPUSH
16564: LD_INT 0
16566: PPUSH
16567: CALL_OW 50
// end ;
16571: GO 16505
16573: POP
16574: POP
// wait ( 0 0$01 ) ;
16575: LD_INT 35
16577: PPUSH
16578: CALL_OW 67
// DialogueOn ;
16582: CALL_OW 6
// PlaceSeeing ( 224 , 57 , 2 , - 16 ) ;
16586: LD_INT 224
16588: PPUSH
16589: LD_INT 57
16591: PPUSH
16592: LD_INT 2
16594: PPUSH
16595: LD_INT 16
16597: NEG
16598: PPUSH
16599: CALL_OW 330
// CenterNowOnXY ( 224 , 57 ) ;
16603: LD_INT 224
16605: PPUSH
16606: LD_INT 57
16608: PPUSH
16609: CALL_OW 86
// TalkAboutLegion ;
16613: CALL 15611 0 0
// RemoveSeeing ( 224 , 57 , 2 ) ;
16617: LD_INT 224
16619: PPUSH
16620: LD_INT 57
16622: PPUSH
16623: LD_INT 2
16625: PPUSH
16626: CALL_OW 331
// DialogueOff ;
16630: CALL_OW 7
// spotLegion := true ;
16634: LD_ADDR_EXP 10
16638: PUSH
16639: LD_INT 1
16641: ST_TO_ADDR
// ComAgressiveMove ( legEForces , 164 , 47 ) ;
16642: LD_EXP 38
16646: PPUSH
16647: LD_INT 164
16649: PPUSH
16650: LD_INT 47
16652: PPUSH
16653: CALL_OW 114
// AddComAgressiveMove ( legEForces , 179 , 20 ) ;
16657: LD_EXP 38
16661: PPUSH
16662: LD_INT 179
16664: PPUSH
16665: LD_INT 20
16667: PPUSH
16668: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
16672: LD_INT 35
16674: PPUSH
16675: CALL_OW 67
// until not UnitFilter ( legEForces , [ f_hastask ] ) or not UnitFilter ( legEForces , [ f_ok ] ) ;
16679: LD_EXP 38
16683: PPUSH
16684: LD_INT 60
16686: PUSH
16687: EMPTY
16688: LIST
16689: PPUSH
16690: CALL_OW 72
16694: NOT
16695: PUSH
16696: LD_EXP 38
16700: PPUSH
16701: LD_INT 50
16703: PUSH
16704: EMPTY
16705: LIST
16706: PPUSH
16707: CALL_OW 72
16711: NOT
16712: OR
16713: IFFALSE 16672
// if not UnitFilter ( legEForces , [ f_ok ] ) then
16715: LD_EXP 38
16719: PPUSH
16720: LD_INT 50
16722: PUSH
16723: EMPTY
16724: LIST
16725: PPUSH
16726: CALL_OW 72
16730: NOT
16731: IFFALSE 16735
// exit ;
16733: GO 16758
// legForces := legForces union legEForces ;
16735: LD_ADDR_EXP 37
16739: PUSH
16740: LD_EXP 37
16744: PUSH
16745: LD_EXP 38
16749: UNION
16750: ST_TO_ADDR
// legEForces := [ ] ;
16751: LD_ADDR_EXP 38
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// end ;
16758: PPOPN 3
16760: END
// every 0 0$1 trigger gameActive and ( See ( 8 , Omar ) or See ( 8 , Heike ) or spotByLegion ) and IsOk ( Heike ) and IsOk ( Omar ) do
16761: LD_EXP 19
16765: PUSH
16766: LD_INT 8
16768: PPUSH
16769: LD_EXP 24
16773: PPUSH
16774: CALL_OW 292
16778: PUSH
16779: LD_INT 8
16781: PPUSH
16782: LD_EXP 23
16786: PPUSH
16787: CALL_OW 292
16791: OR
16792: PUSH
16793: LD_EXP 9
16797: OR
16798: AND
16799: PUSH
16800: LD_EXP 23
16804: PPUSH
16805: CALL_OW 302
16809: AND
16810: PUSH
16811: LD_EXP 24
16815: PPUSH
16816: CALL_OW 302
16820: AND
16821: IFFALSE 16962
16823: GO 16825
16825: DISABLE
// begin DialogueOn ;
16826: CALL_OW 6
// SayRadio ( Farmer , DF-Spot-1 ) ;
16830: LD_EXP 36
16834: PPUSH
16835: LD_STRING DF-Spot-1
16837: PPUSH
16838: CALL_OW 94
// Say ( Heike , DH-Spot-2 ) ;
16842: LD_EXP 23
16846: PPUSH
16847: LD_STRING DH-Spot-2
16849: PPUSH
16850: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-3 ) ;
16854: LD_EXP 36
16858: PPUSH
16859: LD_STRING DF-Spot-3
16861: PPUSH
16862: CALL_OW 94
// Say ( Heike , DH-Spot-4 ) ;
16866: LD_EXP 23
16870: PPUSH
16871: LD_STRING DH-Spot-4
16873: PPUSH
16874: CALL_OW 88
// Say ( Omar , DOm-Spot-5 ) ;
16878: LD_EXP 24
16882: PPUSH
16883: LD_STRING DOm-Spot-5
16885: PPUSH
16886: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-6 ) ;
16890: LD_EXP 36
16894: PPUSH
16895: LD_STRING DF-Spot-6
16897: PPUSH
16898: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-7 ) ;
16902: LD_EXP 36
16906: PPUSH
16907: LD_STRING DF-Spot-7
16909: PPUSH
16910: CALL_OW 94
// SayRadio ( Farmer , DF-Spot-8 ) ;
16914: LD_EXP 36
16918: PPUSH
16919: LD_STRING DF-Spot-8
16921: PPUSH
16922: CALL_OW 94
// Say ( Heike , DH-Spot-9 ) ;
16926: LD_EXP 23
16930: PPUSH
16931: LD_STRING DH-Spot-9
16933: PPUSH
16934: CALL_OW 88
// SayRadio ( Farmer , DF-Spot-10 ) ;
16938: LD_EXP 36
16942: PPUSH
16943: LD_STRING DF-Spot-10
16945: PPUSH
16946: CALL_OW 94
// DialogueOff ;
16950: CALL_OW 7
// spotByLegion := true ;
16954: LD_ADDR_EXP 9
16958: PUSH
16959: LD_INT 1
16961: ST_TO_ADDR
// end ;
16962: END
// every 0 0$1 trigger gameActive and ( spotByLegion or spotLegion ) do
16963: LD_EXP 19
16967: PUSH
16968: LD_EXP 9
16972: PUSH
16973: LD_EXP 10
16977: OR
16978: AND
16979: IFFALSE 16991
16981: GO 16983
16983: DISABLE
// ChangeMissionObjectives ( O3 ) ;
16984: LD_STRING O3
16986: PPUSH
16987: CALL_OW 337
16991: END
// every 0 0$1 trigger gameActive and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 do
16992: LD_EXP 19
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 8
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 50
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: PUSH
17033: LD_INT 0
17035: EQUAL
17036: AND
17037: IFFALSE 17135
17039: GO 17041
17041: DISABLE
// begin legScriptActive := false ;
17042: LD_ADDR_EXP 4
17046: PUSH
17047: LD_INT 0
17049: ST_TO_ADDR
// if not americanDestroyed then
17050: LD_EXP 11
17054: NOT
17055: IFFALSE 17064
// SetAchievement ( ACH_REVANGE ) ;
17057: LD_STRING ACH_REVANGE
17059: PPUSH
17060: CALL_OW 543
// legionDestroyed := true ;
17064: LD_ADDR_EXP 12
17068: PUSH
17069: LD_INT 1
17071: ST_TO_ADDR
// DialogueOn ;
17072: CALL_OW 6
// SayRadio ( Farmer , DF-LegDes-1 ) ;
17076: LD_EXP 36
17080: PPUSH
17081: LD_STRING DF-LegDes-1
17083: PPUSH
17084: CALL_OW 94
// Say ( Heike , DH-LegDes-2 ) ;
17088: LD_EXP 23
17092: PPUSH
17093: LD_STRING DH-LegDes-2
17095: PPUSH
17096: CALL_OW 88
// SayRadio ( Farmer , DF-LegDes-3 ) ;
17100: LD_EXP 36
17104: PPUSH
17105: LD_STRING DF-LegDes-3
17107: PPUSH
17108: CALL_OW 94
// Say ( Heike , DH-LegDes-4 ) ;
17112: LD_EXP 23
17116: PPUSH
17117: LD_STRING DH-LegDes-4
17119: PPUSH
17120: CALL_OW 88
// DialogueOff ;
17124: CALL_OW 7
// ChangeMissionObjectives ( O5 ) ;
17128: LD_STRING O5
17130: PPUSH
17131: CALL_OW 337
// end ;
17135: END
// every 0 0$1 trigger gameActive and UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) < 6 do var i , tmp ;
17136: LD_EXP 19
17140: PUSH
17141: LD_EXP 27
17145: PPUSH
17146: LD_INT 21
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 50
17158: PUSH
17159: EMPTY
17160: LIST
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PPUSH
17166: CALL_OW 72
17170: PUSH
17171: LD_INT 6
17173: LESS
17174: AND
17175: IFFALSE 17423
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
17183: PPUSH
// begin amScriptActive := false ;
17184: LD_ADDR_EXP 3
17188: PUSH
17189: LD_INT 0
17191: ST_TO_ADDR
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
17192: LD_ADDR_VAR 0 2
17196: PUSH
17197: LD_EXP 27
17201: PPUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 50
17214: PUSH
17215: EMPTY
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL_OW 72
17226: ST_TO_ADDR
// for i in tmp do
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_VAR 0 2
17236: PUSH
17237: FOR_IN
17238: IFFALSE 17266
// begin ComExit ( i ) ;
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL 59063 0 1
// AddComMoveXY ( i , 63 , 124 ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 63
17256: PPUSH
17257: LD_INT 124
17259: PPUSH
17260: CALL_OW 171
// end ;
17264: GO 17237
17266: POP
17267: POP
// wait ( 0 0$2 ) ;
17268: LD_INT 70
17270: PPUSH
17271: CALL_OW 67
// americanDestroyed := true ;
17275: LD_ADDR_EXP 11
17279: PUSH
17280: LD_INT 1
17282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17283: LD_INT 35
17285: PPUSH
17286: CALL_OW 67
// tmp := UnitFilter ( amForces , [ [ f_type , unit_human ] , [ f_ok ] ] ) union UnitFilter ( amPatrol , [ f_ok ] ) ;
17290: LD_ADDR_VAR 0 2
17294: PUSH
17295: LD_EXP 27
17299: PPUSH
17300: LD_INT 21
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 50
17312: PUSH
17313: EMPTY
17314: LIST
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PPUSH
17320: CALL_OW 72
17324: PUSH
17325: LD_EXP 35
17329: PPUSH
17330: LD_INT 50
17332: PUSH
17333: EMPTY
17334: LIST
17335: PPUSH
17336: CALL_OW 72
17340: UNION
17341: ST_TO_ADDR
// for i in tmp do
17342: LD_ADDR_VAR 0 1
17346: PUSH
17347: LD_VAR 0 2
17351: PUSH
17352: FOR_IN
17353: IFFALSE 17414
// begin if IsAt ( i , 63 , 124 ) or IsInArea ( i , amEscapeArea ) then
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_INT 63
17362: PPUSH
17363: LD_INT 124
17365: PPUSH
17366: CALL_OW 307
17370: PUSH
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_INT 25
17378: PPUSH
17379: CALL_OW 308
17383: OR
17384: IFFALSE 17397
// RemoveUnit ( i ) else
17386: LD_VAR 0 1
17390: PPUSH
17391: CALL_OW 64
17395: GO 17412
// ComMoveXY ( i , 63 , 124 ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_INT 63
17404: PPUSH
17405: LD_INT 124
17407: PPUSH
17408: CALL_OW 111
// end ;
17412: GO 17352
17414: POP
17415: POP
// until not tmp ;
17416: LD_VAR 0 2
17420: NOT
17421: IFFALSE 17283
// end ;
17423: PPOPN 2
17425: END
// every 0 0$1 trigger gameActive and americanDestroyed and IsOk ( Heike ) and IsOk ( Omar ) do var i , un , veh ;
17426: LD_EXP 19
17430: PUSH
17431: LD_EXP 11
17435: AND
17436: PUSH
17437: LD_EXP 23
17441: PPUSH
17442: CALL_OW 302
17446: AND
17447: PUSH
17448: LD_EXP 24
17452: PPUSH
17453: CALL_OW 302
17457: AND
17458: IFFALSE 17948
17460: GO 17462
17462: DISABLE
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// begin DialogueOn ;
17468: CALL_OW 6
// Say ( Heike , DH-Victory-1 ) ;
17472: LD_EXP 23
17476: PPUSH
17477: LD_STRING DH-Victory-1
17479: PPUSH
17480: CALL_OW 88
// Say ( Omar , DOm-Victory-2 ) ;
17484: LD_EXP 24
17488: PPUSH
17489: LD_STRING DOm-Victory-2
17491: PPUSH
17492: CALL_OW 88
// Say ( Omar , DOm-Victory-3 ) ;
17496: LD_EXP 24
17500: PPUSH
17501: LD_STRING DOm-Victory-3
17503: PPUSH
17504: CALL_OW 88
// Say ( Heike , DH-Victory-4 ) ;
17508: LD_EXP 23
17512: PPUSH
17513: LD_STRING DH-Victory-4
17515: PPUSH
17516: CALL_OW 88
// Say ( Omar , DOm-Victory-5 ) ;
17520: LD_EXP 24
17524: PPUSH
17525: LD_STRING DOm-Victory-5
17527: PPUSH
17528: CALL_OW 88
// Say ( Omar , DOm-Victory-6 ) ;
17532: LD_EXP 24
17536: PPUSH
17537: LD_STRING DOm-Victory-6
17539: PPUSH
17540: CALL_OW 88
// DialogueOff ;
17544: CALL_OW 7
// ChangeMissionObjectives ( O4 ) ;
17548: LD_STRING O4
17550: PPUSH
17551: CALL_OW 337
// canFinish := true ;
17555: LD_ADDR_EXP 18
17559: PUSH
17560: LD_INT 1
17562: ST_TO_ADDR
// SetAreaMapShow ( finalArea , 1 ) ;
17563: LD_INT 24
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 424
// if not legionDestroyed then
17573: LD_EXP 12
17577: NOT
17578: IFFALSE 17948
// begin uc_nation := nation_arabian ;
17580: LD_ADDR_OWVAR 21
17584: PUSH
17585: LD_INT 2
17587: ST_TO_ADDR
// uc_side := 8 ;
17588: LD_ADDR_OWVAR 20
17592: PUSH
17593: LD_INT 8
17595: ST_TO_ADDR
// for i := 1 to 4 do
17596: LD_ADDR_VAR 0 1
17600: PUSH
17601: DOUBLE
17602: LD_INT 1
17604: DEC
17605: ST_TO_ADDR
17606: LD_INT 4
17608: PUSH
17609: FOR_TO
17610: IFFALSE 17691
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17612: LD_INT 0
17614: PPUSH
17615: LD_INT 8
17617: PUSH
17618: LD_INT 9
17620: PUSH
17621: LD_INT 10
17623: PUSH
17624: LD_INT 10
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: PUSH
17633: LD_OWVAR 67
17637: ARRAY
17638: PPUSH
17639: CALL_OW 381
// un := CreateHuman ;
17643: LD_ADDR_VAR 0 2
17647: PUSH
17648: CALL_OW 44
17652: ST_TO_ADDR
// SetDir ( un , 3 ) ;
17653: LD_VAR 0 2
17657: PPUSH
17658: LD_INT 3
17660: PPUSH
17661: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17665: LD_VAR 0 2
17669: PPUSH
17670: LD_INT 26
17672: PPUSH
17673: LD_INT 0
17675: PPUSH
17676: CALL_OW 49
// ComCrawl ( un ) ;
17680: LD_VAR 0 2
17684: PPUSH
17685: CALL_OW 137
// end ;
17689: GO 17609
17691: POP
17692: POP
// for i := 1 to 3 do
17693: LD_ADDR_VAR 0 1
17697: PUSH
17698: DOUBLE
17699: LD_INT 1
17701: DEC
17702: ST_TO_ADDR
17703: LD_INT 3
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17791
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17709: LD_INT 0
17711: PPUSH
17712: LD_INT 8
17714: PUSH
17715: LD_INT 9
17717: PUSH
17718: LD_INT 10
17720: PUSH
17721: LD_INT 10
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: PUSH
17730: LD_OWVAR 67
17734: ARRAY
17735: PPUSH
17736: CALL_OW 381
// un := CreateHuman ;
17740: LD_ADDR_VAR 0 2
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// SetClass ( un , class_mortar ) ;
17750: LD_VAR 0 2
17754: PPUSH
17755: LD_INT 8
17757: PPUSH
17758: CALL_OW 336
// SetDir ( un , 3 ) ;
17762: LD_VAR 0 2
17766: PPUSH
17767: LD_INT 3
17769: PPUSH
17770: CALL_OW 233
// PlaceUnitArea ( un , legDefArea , false ) ;
17774: LD_VAR 0 2
17778: PPUSH
17779: LD_INT 26
17781: PPUSH
17782: LD_INT 0
17784: PPUSH
17785: CALL_OW 49
// end ;
17789: GO 17706
17791: POP
17792: POP
// for i := 1 to 2 do
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: DOUBLE
17799: LD_INT 1
17801: DEC
17802: ST_TO_ADDR
17803: LD_INT 2
17805: PUSH
17806: FOR_TO
17807: IFFALSE 17946
// begin uc_side := 8 ;
17809: LD_ADDR_OWVAR 20
17813: PUSH
17814: LD_INT 8
17816: ST_TO_ADDR
// uc_nation := nation_american ;
17817: LD_ADDR_OWVAR 21
17821: PUSH
17822: LD_INT 1
17824: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_manual , us_laser , 90 ) ;
17825: LD_INT 4
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: LD_INT 9
17836: PPUSH
17837: LD_INT 90
17839: PPUSH
17840: CALL 25794 0 5
// veh := CreateVehicle ;
17844: LD_ADDR_VAR 0 3
17848: PUSH
17849: CALL_OW 45
17853: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_INT 3
17861: PPUSH
17862: CALL_OW 233
// PlaceUnitArea ( veh , legVDefArea , false ) ;
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 27
17873: PPUSH
17874: LD_INT 0
17876: PPUSH
17877: CALL_OW 49
// uc_nation := nation_arabian ;
17881: LD_ADDR_OWVAR 21
17885: PUSH
17886: LD_INT 2
17888: ST_TO_ADDR
// PrepareMechanic ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
17889: LD_INT 0
17891: PPUSH
17892: LD_INT 8
17894: PUSH
17895: LD_INT 9
17897: PUSH
17898: LD_INT 10
17900: PUSH
17901: LD_INT 10
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: PUSH
17910: LD_OWVAR 67
17914: ARRAY
17915: PPUSH
17916: CALL_OW 383
// un := CreateHuman ;
17920: LD_ADDR_VAR 0 2
17924: PUSH
17925: CALL_OW 44
17929: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17930: LD_VAR 0 2
17934: PPUSH
17935: LD_VAR 0 3
17939: PPUSH
17940: CALL_OW 52
// end ;
17944: GO 17806
17946: POP
17947: POP
// end ; end ;
17948: PPOPN 3
17950: END
// every 0 0$1 trigger gameActive and canFinish and AreInArea ( [ Omar ] , finalArea ) and AreInArea ( [ Heike ] , finalArea ) do
17951: LD_EXP 19
17955: PUSH
17956: LD_EXP 18
17960: AND
17961: PUSH
17962: LD_EXP 24
17966: PUSH
17967: EMPTY
17968: LIST
17969: PPUSH
17970: LD_INT 24
17972: PPUSH
17973: CALL 11734 0 2
17977: AND
17978: PUSH
17979: LD_EXP 23
17983: PUSH
17984: EMPTY
17985: LIST
17986: PPUSH
17987: LD_INT 24
17989: PPUSH
17990: CALL 11734 0 2
17994: AND
17995: IFFALSE 18168
17997: GO 17999
17999: DISABLE
// begin if tick <= 50 50$00 then
18000: LD_OWVAR 1
18004: PUSH
18005: LD_INT 105000
18007: LESSEQUAL
18008: IFFALSE 18017
// SetAchievement ( ACH_HSPEED_10 ) ;
18010: LD_STRING ACH_HSPEED_10
18012: PPUSH
18013: CALL_OW 543
// if legionDestroyed then
18017: LD_EXP 12
18021: IFFALSE 18035
// AddMedal ( med1 , 1 ) else
18023: LD_STRING med1
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 101
18033: GO 18046
// AddMedal ( med1 , - 1 ) ;
18035: LD_STRING med1
18037: PPUSH
18038: LD_INT 1
18040: NEG
18041: PPUSH
18042: CALL_OW 101
// if tick <= [ 90 90$00 , 80 80$00 , 70 70$00 , 60 60$00 ] [ Difficulty ] then
18046: LD_OWVAR 1
18050: PUSH
18051: LD_INT 189000
18053: PUSH
18054: LD_INT 168000
18056: PUSH
18057: LD_INT 147000
18059: PUSH
18060: LD_INT 126000
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: LD_OWVAR 67
18073: ARRAY
18074: LESSEQUAL
18075: IFFALSE 18089
// AddMedal ( med2 , 1 ) else
18077: LD_STRING med2
18079: PPUSH
18080: LD_INT 1
18082: PPUSH
18083: CALL_OW 101
18087: GO 18100
// AddMedal ( med2 , - 1 ) ;
18089: LD_STRING med2
18091: PPUSH
18092: LD_INT 1
18094: NEG
18095: PPUSH
18096: CALL_OW 101
// if hasApes + hasVehicles + hasTigers + hasMastodont + hasDrugs >= 3 then
18100: LD_EXP 16
18104: PUSH
18105: LD_EXP 14
18109: PLUS
18110: PUSH
18111: LD_EXP 15
18115: PLUS
18116: PUSH
18117: LD_EXP 13
18121: PLUS
18122: PUSH
18123: LD_EXP 17
18127: PLUS
18128: PUSH
18129: LD_INT 3
18131: GREATEREQUAL
18132: IFFALSE 18146
// AddMedal ( med3 , 1 ) else
18134: LD_STRING med3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 101
18144: GO 18157
// AddMedal ( med3 , - 1 ) ;
18146: LD_STRING med3
18148: PPUSH
18149: LD_INT 1
18151: NEG
18152: PPUSH
18153: CALL_OW 101
// GiveMedals ( MAIN ) ;
18157: LD_STRING MAIN
18159: PPUSH
18160: CALL_OW 102
// YouWin ;
18164: CALL_OW 103
// end ; end_of_file
18168: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL 79924 0 1
// if apeAmount and GetSide ( unit ) = 2 and ( GetControl ( unit ) = control_apeman or GetClass ( unit ) in [ class_apeman , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] ) then
18178: LD_EXP 5
18182: PUSH
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 255
18192: PUSH
18193: LD_INT 2
18195: EQUAL
18196: AND
18197: PUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 263
18207: PUSH
18208: LD_INT 5
18210: EQUAL
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 257
18221: PUSH
18222: LD_INT 12
18224: PUSH
18225: LD_INT 15
18227: PUSH
18228: LD_INT 16
18230: PUSH
18231: LD_INT 17
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: IN
18240: OR
18241: AND
18242: IFFALSE 18312
// begin apeAmount := Dec ( apeAmount ) ;
18244: LD_ADDR_EXP 5
18248: PUSH
18249: LD_EXP 5
18253: PPUSH
18254: CALL 60048 0 1
18258: ST_TO_ADDR
// wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
18259: LD_INT 35
18261: PPUSH
18262: LD_INT 2100
18264: PPUSH
18265: CALL_OW 12
18269: PPUSH
18270: CALL_OW 67
// uc_side := 0 ;
18274: LD_ADDR_OWVAR 20
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// uc_nation := nation_nature ;
18282: LD_ADDR_OWVAR 21
18286: PUSH
18287: LD_INT 0
18289: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
18290: LD_INT 0
18292: PPUSH
18293: CALL 54913 0 1
// PlaceUnitArea ( CreateHuman , apeArea , false ) ;
18297: CALL_OW 44
18301: PPUSH
18302: LD_INT 6
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: CALL_OW 49
// end ; if unit = Heike then
18312: LD_VAR 0 1
18316: PUSH
18317: LD_EXP 23
18321: EQUAL
18322: IFFALSE 18331
// YouLost ( Heike ) ;
18324: LD_STRING Heike
18326: PPUSH
18327: CALL_OW 104
// if unit = Omar then
18331: LD_VAR 0 1
18335: PUSH
18336: LD_EXP 24
18340: EQUAL
18341: IFFALSE 18350
// YouLost ( Omar ) ;
18343: LD_STRING Omar
18345: PPUSH
18346: CALL_OW 104
// if unit in amForces then
18350: LD_VAR 0 1
18354: PUSH
18355: LD_EXP 27
18359: IN
18360: IFFALSE 18378
// amForces := amForces diff unit ;
18362: LD_ADDR_EXP 27
18366: PUSH
18367: LD_EXP 27
18371: PUSH
18372: LD_VAR 0 1
18376: DIFF
18377: ST_TO_ADDR
// if unit in amTanks then
18378: LD_VAR 0 1
18382: PUSH
18383: LD_EXP 32
18387: IN
18388: IFFALSE 18406
// amTanks := amTanks diff unit ;
18390: LD_ADDR_EXP 32
18394: PUSH
18395: LD_EXP 32
18399: PUSH
18400: LD_VAR 0 1
18404: DIFF
18405: ST_TO_ADDR
// if unit in amPatrol then
18406: LD_VAR 0 1
18410: PUSH
18411: LD_EXP 35
18415: IN
18416: IFFALSE 18434
// amPatrol := amPatrol diff unit ;
18418: LD_ADDR_EXP 35
18422: PUSH
18423: LD_EXP 35
18427: PUSH
18428: LD_VAR 0 1
18432: DIFF
18433: ST_TO_ADDR
// if GetSide ( unit ) = 1 then
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 255
18443: PUSH
18444: LD_INT 1
18446: EQUAL
18447: IFFALSE 18601
// begin if GetBType ( unit ) in [ b_bunker , b_turret ] then
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 266
18458: PUSH
18459: LD_INT 32
18461: PUSH
18462: LD_INT 33
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: IN
18469: IFFALSE 18525
// amBuildings := Join ( amBuildings , [ b_turret , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18471: LD_ADDR_EXP 31
18475: PUSH
18476: LD_EXP 31
18480: PPUSH
18481: LD_INT 33
18483: PUSH
18484: LD_VAR 0 1
18488: PPUSH
18489: CALL_OW 250
18493: PUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL_OW 251
18503: PUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 254
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL 58665 0 2
18524: ST_TO_ADDR
// if GetBType ( unit ) in [ b_armoury , b_barracks ] then
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 266
18534: PUSH
18535: LD_INT 4
18537: PUSH
18538: LD_INT 5
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: IN
18545: IFFALSE 18601
// amBuildings := Join ( amBuildings , [ b_armoury , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18547: LD_ADDR_EXP 31
18551: PUSH
18552: LD_EXP 31
18556: PPUSH
18557: LD_INT 4
18559: PUSH
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL_OW 250
18569: PUSH
18570: LD_VAR 0 1
18574: PPUSH
18575: CALL_OW 251
18579: PUSH
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 254
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: PPUSH
18596: CALL 58665 0 2
18600: ST_TO_ADDR
// end ; if unit in legForces then
18601: LD_VAR 0 1
18605: PUSH
18606: LD_EXP 37
18610: IN
18611: IFFALSE 18629
// legForces := legForces diff unit ;
18613: LD_ADDR_EXP 37
18617: PUSH
18618: LD_EXP 37
18622: PUSH
18623: LD_VAR 0 1
18627: DIFF
18628: ST_TO_ADDR
// if unit in legTanks then
18629: LD_VAR 0 1
18633: PUSH
18634: LD_EXP 43
18638: IN
18639: IFFALSE 18657
// legTanks := legTanks diff unit ;
18641: LD_ADDR_EXP 43
18645: PUSH
18646: LD_EXP 43
18650: PUSH
18651: LD_VAR 0 1
18655: DIFF
18656: ST_TO_ADDR
// if unit in legRTanks then
18657: LD_VAR 0 1
18661: PUSH
18662: LD_EXP 44
18666: IN
18667: IFFALSE 18685
// legRTanks := legRTanks diff unit ;
18669: LD_ADDR_EXP 44
18673: PUSH
18674: LD_EXP 44
18678: PUSH
18679: LD_VAR 0 1
18683: DIFF
18684: ST_TO_ADDR
// if GetSide ( unit ) = 8 then
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 255
18694: PUSH
18695: LD_INT 8
18697: EQUAL
18698: IFFALSE 18859
// begin if GetBType ( unit ) in [ b_bunker , b_turret ] then
18700: LD_VAR 0 1
18704: PPUSH
18705: CALL_OW 266
18709: PUSH
18710: LD_INT 32
18712: PUSH
18713: LD_INT 33
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: IN
18720: IFFALSE 18783
// legBuildings := Join ( legBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18722: LD_ADDR_EXP 42
18726: PUSH
18727: LD_EXP 42
18731: PPUSH
18732: LD_VAR 0 1
18736: PPUSH
18737: CALL_OW 266
18741: PUSH
18742: LD_VAR 0 1
18746: PPUSH
18747: CALL_OW 250
18751: PUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 251
18761: PUSH
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 254
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: PPUSH
18778: CALL 58665 0 2
18782: ST_TO_ADDR
// if GetBType ( unit ) in [ b_armoury , b_barracks ] then
18783: LD_VAR 0 1
18787: PPUSH
18788: CALL_OW 266
18792: PUSH
18793: LD_INT 4
18795: PUSH
18796: LD_INT 5
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: IN
18803: IFFALSE 18859
// legBuildings := Join ( legBuildings , [ b_armoury , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
18805: LD_ADDR_EXP 42
18809: PUSH
18810: LD_EXP 42
18814: PPUSH
18815: LD_INT 4
18817: PUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL_OW 250
18827: PUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 251
18837: PUSH
18838: LD_VAR 0 1
18842: PPUSH
18843: CALL_OW 254
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: PPUSH
18854: CALL 58665 0 2
18858: ST_TO_ADDR
// end ; if GetWeapon ( unit ) = us_crane and GetSide ( unit ) = 1 then
18859: LD_VAR 0 1
18863: PPUSH
18864: CALL_OW 264
18868: PUSH
18869: LD_INT 13
18871: EQUAL
18872: PUSH
18873: LD_VAR 0 1
18877: PPUSH
18878: CALL_OW 255
18882: PUSH
18883: LD_INT 1
18885: EQUAL
18886: AND
18887: IFFALSE 18922
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_crane ] ) ;
18889: LD_ADDR_EXP 29
18893: PUSH
18894: LD_EXP 29
18898: PPUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: LD_INT 2
18907: PUSH
18908: LD_INT 13
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: PPUSH
18917: CALL 58665 0 2
18921: ST_TO_ADDR
// if GetWeapon ( unit ) = ar_crane and GetSide ( unit ) = 8 then
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 264
18931: PUSH
18932: LD_INT 88
18934: EQUAL
18935: PUSH
18936: LD_VAR 0 1
18940: PPUSH
18941: CALL_OW 255
18945: PUSH
18946: LD_INT 8
18948: EQUAL
18949: AND
18950: IFFALSE 18985
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ) ;
18952: LD_ADDR_EXP 40
18956: PUSH
18957: LD_EXP 40
18961: PPUSH
18962: LD_INT 13
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: LD_INT 2
18970: PUSH
18971: LD_INT 88
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: PPUSH
18980: CALL 58665 0 2
18984: ST_TO_ADDR
// if unit = amCargo then
18985: LD_VAR 0 1
18989: PUSH
18990: LD_EXP 34
18994: EQUAL
18995: IFFALSE 19038
// begin amCargo := 0 ;
18997: LD_ADDR_EXP 34
19001: PUSH
19002: LD_INT 0
19004: ST_TO_ADDR
// amConstructList := Join ( amConstructList , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ) ;
19005: LD_ADDR_EXP 29
19009: PUSH
19010: LD_EXP 29
19014: PPUSH
19015: LD_INT 2
19017: PUSH
19018: LD_INT 1
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 12
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL 58665 0 2
19037: ST_TO_ADDR
// end ; if unit = legCargo then
19038: LD_VAR 0 1
19042: PUSH
19043: LD_EXP 45
19047: EQUAL
19048: IFFALSE 19091
// begin legCargo := 0 ;
19050: LD_ADDR_EXP 45
19054: PUSH
19055: LD_INT 0
19057: ST_TO_ADDR
// legConstructList := Join ( legConstructList , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
19058: LD_ADDR_EXP 40
19062: PUSH
19063: LD_EXP 40
19067: PPUSH
19068: LD_INT 13
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 32
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL 58665 0 2
19090: ST_TO_ADDR
// end ; end ;
19091: PPOPN 1
19093: END
// on TigerTamed ( tiger , sheik ) do begin tigerCounter := Inc ( tigerCounter ) ;
19094: LD_ADDR_EXP 21
19098: PUSH
19099: LD_EXP 21
19103: PPUSH
19104: CALL 60026 0 1
19108: ST_TO_ADDR
// end ;
19109: PPOPN 2
19111: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
19112: LD_VAR 0 2
19116: PUSH
19117: LD_INT 3
19119: PUSH
19120: LD_INT 22
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 25
19136: PUSH
19137: LD_INT 3
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PPUSH
19148: CALL_OW 69
19152: IN
19153: PUSH
19154: LD_VAR 0 1
19158: PPUSH
19159: CALL_OW 266
19163: PUSH
19164: LD_INT 3
19166: EQUAL
19167: AND
19168: PUSH
19169: LD_VAR 0 2
19173: PPUSH
19174: CALL_OW 256
19178: PUSH
19179: LD_INT 1000
19181: LESS
19182: AND
19183: IFFALSE 19209
// begin SetTag ( un , 0 ) ;
19185: LD_VAR 0 2
19189: PPUSH
19190: LD_INT 0
19192: PPUSH
19193: CALL_OW 109
// SetLives ( un , 1000 ) ;
19197: LD_VAR 0 2
19201: PPUSH
19202: LD_INT 1000
19204: PPUSH
19205: CALL_OW 234
// end ; end ;
19209: PPOPN 2
19211: END
// on VehicleConstructed ( veh , fac ) do var side , weapon ;
19212: LD_INT 0
19214: PPUSH
19215: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: CALL 79982 0 2
// side := GetSide ( fac ) ;
19230: LD_ADDR_VAR 0 3
19234: PUSH
19235: LD_VAR 0 2
19239: PPUSH
19240: CALL_OW 255
19244: ST_TO_ADDR
// weapon := GetWeapon ( veh ) ;
19245: LD_ADDR_VAR 0 4
19249: PUSH
19250: LD_VAR 0 1
19254: PPUSH
19255: CALL_OW 264
19259: ST_TO_ADDR
// if side = 1 then
19260: LD_VAR 0 3
19264: PUSH
19265: LD_INT 1
19267: EQUAL
19268: IFFALSE 19377
// begin amConstructList := Delete ( amConstructList , 1 ) ;
19270: LD_ADDR_EXP 29
19274: PUSH
19275: LD_EXP 29
19279: PPUSH
19280: LD_INT 1
19282: PPUSH
19283: CALL_OW 3
19287: ST_TO_ADDR
// if weapon = us_cargo_bay and not amCargo then
19288: LD_VAR 0 4
19292: PUSH
19293: LD_INT 12
19295: EQUAL
19296: PUSH
19297: LD_EXP 34
19301: NOT
19302: AND
19303: IFFALSE 19315
// amCargo := veh ;
19305: LD_ADDR_EXP 34
19309: PUSH
19310: LD_VAR 0 1
19314: ST_TO_ADDR
// if weapon in [ us_cargo_bay , us_crane , us_bulldozer ] then
19315: LD_VAR 0 4
19319: PUSH
19320: LD_INT 12
19322: PUSH
19323: LD_INT 13
19325: PUSH
19326: LD_INT 14
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: IN
19334: IFFALSE 19338
// exit ;
19336: GO 19527
// amTanks := Join ( amTanks , veh ) ;
19338: LD_ADDR_EXP 32
19342: PUSH
19343: LD_EXP 32
19347: PPUSH
19348: LD_VAR 0 1
19352: PPUSH
19353: CALL 58665 0 2
19357: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19358: LD_INT 35
19360: PPUSH
19361: CALL_OW 67
// AddComMoveToArea ( veh , amParkingArea ) ;
19365: LD_VAR 0 1
19369: PPUSH
19370: LD_INT 12
19372: PPUSH
19373: CALL_OW 173
// end ; if side = 8 then
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 8
19384: EQUAL
19385: IFFALSE 19527
// begin legConstructList := Delete ( legConstructList , 1 ) ;
19387: LD_ADDR_EXP 40
19391: PUSH
19392: LD_EXP 40
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL_OW 3
19404: ST_TO_ADDR
// if weapon = ar_cargo_bay and not legCargo then
19405: LD_VAR 0 4
19409: PUSH
19410: LD_INT 32
19412: EQUAL
19413: PUSH
19414: LD_EXP 45
19418: NOT
19419: AND
19420: IFFALSE 19432
// legCargo := veh ;
19422: LD_ADDR_EXP 45
19426: PUSH
19427: LD_VAR 0 1
19431: ST_TO_ADDR
// if weapon in [ ar_cargo_bay , ar_crane ] then
19432: LD_VAR 0 4
19436: PUSH
19437: LD_INT 32
19439: PUSH
19440: LD_INT 88
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: IN
19447: IFFALSE 19451
// exit ;
19449: GO 19527
// if GetControl ( veh ) = control_manual then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 263
19460: PUSH
19461: LD_INT 1
19463: EQUAL
19464: IFFALSE 19488
// legTanks := Join ( legTanks , veh ) else
19466: LD_ADDR_EXP 43
19470: PUSH
19471: LD_EXP 43
19475: PPUSH
19476: LD_VAR 0 1
19480: PPUSH
19481: CALL 58665 0 2
19485: ST_TO_ADDR
19486: GO 19508
// legRTanks := Join ( legRTanks , veh ) ;
19488: LD_ADDR_EXP 44
19492: PUSH
19493: LD_EXP 44
19497: PPUSH
19498: LD_VAR 0 1
19502: PPUSH
19503: CALL 58665 0 2
19507: ST_TO_ADDR
// wait ( 0 0$01 ) ;
19508: LD_INT 35
19510: PPUSH
19511: CALL_OW 67
// AddComMoveToArea ( veh , legParkingArea ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 15
19522: PPUSH
19523: CALL_OW 173
// end ; end ;
19527: PPOPN 4
19529: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
19530: LD_INT 0
19532: PPUSH
19533: PPUSH
19534: PPUSH
// begin side := GetSide ( driver ) ;
19535: LD_ADDR_VAR 0 7
19539: PUSH
19540: LD_VAR 0 1
19544: PPUSH
19545: CALL_OW 255
19549: ST_TO_ADDR
// if side = 1 and driver in amForces then
19550: LD_VAR 0 7
19554: PUSH
19555: LD_INT 1
19557: EQUAL
19558: PUSH
19559: LD_VAR 0 1
19563: PUSH
19564: LD_EXP 27
19568: IN
19569: AND
19570: IFFALSE 19782
// begin ComMoveToArea ( driver , amBaseArea ) ;
19572: LD_VAR 0 1
19576: PPUSH
19577: LD_INT 1
19579: PPUSH
19580: CALL_OW 113
// SetTag ( driver , tMech ) ;
19584: LD_VAR 0 1
19588: PPUSH
19589: LD_INT 7
19591: PPUSH
19592: CALL_OW 109
// fac := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19596: LD_ADDR_VAR 0 6
19600: PUSH
19601: LD_INT 1
19603: PPUSH
19604: LD_INT 22
19606: PUSH
19607: LD_VAR 0 7
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 30
19618: PUSH
19619: LD_INT 3
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 50
19628: PUSH
19629: EMPTY
19630: LIST
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: LIST
19636: PPUSH
19637: CALL_OW 70
19641: ST_TO_ADDR
// if fac then
19642: LD_VAR 0 6
19646: IFFALSE 19668
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19648: LD_VAR 0 1
19652: PPUSH
19653: LD_VAR 0 6
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PPUSH
19662: CALL_OW 180
// exit ;
19666: GO 20035
// end ; arm := FilterUnitsInArea ( amBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19668: LD_ADDR_VAR 0 5
19672: PUSH
19673: LD_INT 1
19675: PPUSH
19676: LD_INT 22
19678: PUSH
19679: LD_VAR 0 7
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 2
19690: PUSH
19691: LD_INT 30
19693: PUSH
19694: LD_INT 4
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 5
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 3
19718: PUSH
19719: LD_INT 62
19721: PUSH
19722: EMPTY
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 50
19731: PUSH
19732: EMPTY
19733: LIST
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: PPUSH
19741: CALL_OW 70
19745: ST_TO_ADDR
// if arm then
19746: LD_VAR 0 5
19750: IFFALSE 19782
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
19752: LD_VAR 0 1
19756: PPUSH
19757: LD_VAR 0 5
19761: PUSH
19762: LD_INT 1
19764: ARRAY
19765: PPUSH
19766: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
19770: LD_VAR 0 1
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 183
// end ; end ; if side = 8 then
19782: LD_VAR 0 7
19786: PUSH
19787: LD_INT 8
19789: EQUAL
19790: IFFALSE 20035
// begin ComMoveToArea ( driver , legBaseArea ) ;
19792: LD_VAR 0 1
19796: PPUSH
19797: LD_INT 2
19799: PPUSH
19800: CALL_OW 113
// if not driver in legForces then
19804: LD_VAR 0 1
19808: PUSH
19809: LD_EXP 37
19813: IN
19814: NOT
19815: IFFALSE 19837
// legForces := Join ( legForces , driver ) ;
19817: LD_ADDR_EXP 37
19821: PUSH
19822: LD_EXP 37
19826: PPUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL 58665 0 2
19836: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
19837: LD_VAR 0 1
19841: PPUSH
19842: LD_INT 7
19844: PPUSH
19845: CALL_OW 109
// fac := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
19849: LD_ADDR_VAR 0 6
19853: PUSH
19854: LD_INT 2
19856: PPUSH
19857: LD_INT 22
19859: PUSH
19860: LD_VAR 0 7
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 30
19871: PUSH
19872: LD_INT 3
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 50
19881: PUSH
19882: EMPTY
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: LIST
19889: PPUSH
19890: CALL_OW 70
19894: ST_TO_ADDR
// if fac then
19895: LD_VAR 0 6
19899: IFFALSE 19921
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
19901: LD_VAR 0 1
19905: PPUSH
19906: LD_VAR 0 6
19910: PUSH
19911: LD_INT 1
19913: ARRAY
19914: PPUSH
19915: CALL_OW 180
// exit ;
19919: GO 20035
// end ; arm := FilterUnitsInArea ( legBaseArea , [ [ f_side , side ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
19921: LD_ADDR_VAR 0 5
19925: PUSH
19926: LD_INT 2
19928: PPUSH
19929: LD_INT 22
19931: PUSH
19932: LD_VAR 0 7
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 30
19946: PUSH
19947: LD_INT 4
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 30
19956: PUSH
19957: LD_INT 5
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 3
19971: PUSH
19972: LD_INT 62
19974: PUSH
19975: EMPTY
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 50
19984: PUSH
19985: EMPTY
19986: LIST
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: PPUSH
19994: CALL_OW 70
19998: ST_TO_ADDR
// if arm then
19999: LD_VAR 0 5
20003: IFFALSE 20035
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
20005: LD_VAR 0 1
20009: PPUSH
20010: LD_VAR 0 5
20014: PUSH
20015: LD_INT 1
20017: ARRAY
20018: PPUSH
20019: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
20023: LD_VAR 0 1
20027: PPUSH
20028: LD_INT 1
20030: PPUSH
20031: CALL_OW 183
// end ; end ; end ;
20035: PPOPN 7
20037: END
// on BuildingComplete ( b ) do var side , type ;
20038: LD_INT 0
20040: PPUSH
20041: PPUSH
// begin side := GetSide ( b ) ;
20042: LD_ADDR_VAR 0 2
20046: PUSH
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 255
20056: ST_TO_ADDR
// type := GetBType ( b ) ;
20057: LD_ADDR_VAR 0 3
20061: PUSH
20062: LD_VAR 0 1
20066: PPUSH
20067: CALL_OW 266
20071: ST_TO_ADDR
// if side = 1 then
20072: LD_VAR 0 2
20076: PUSH
20077: LD_INT 1
20079: EQUAL
20080: IFFALSE 20130
// begin amBuildings := Delete ( amBuildings , 1 ) ;
20082: LD_ADDR_EXP 31
20086: PUSH
20087: LD_EXP 31
20091: PPUSH
20092: LD_INT 1
20094: PPUSH
20095: CALL_OW 3
20099: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
20100: LD_VAR 0 3
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 4
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: IN
20119: IFFALSE 20130
// ComUpgrade ( b ) ;
20121: LD_VAR 0 1
20125: PPUSH
20126: CALL_OW 146
// end ; if side = 8 then
20130: LD_VAR 0 2
20134: PUSH
20135: LD_INT 8
20137: EQUAL
20138: IFFALSE 20188
// begin legBuildings := Delete ( legBuildings , 1 ) ;
20140: LD_ADDR_EXP 42
20144: PUSH
20145: LD_EXP 42
20149: PPUSH
20150: LD_INT 1
20152: PPUSH
20153: CALL_OW 3
20157: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
20158: LD_VAR 0 3
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: LD_INT 4
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: IN
20177: IFFALSE 20188
// ComUpgrade ( b ) ;
20179: LD_VAR 0 1
20183: PPUSH
20184: CALL_OW 146
// end ; end ;
20188: PPOPN 3
20190: END
// on ResearchComplete ( tech , lab ) do var side ;
20191: LD_INT 0
20193: PPUSH
// begin side := GetSide ( lab ) ;
20194: LD_ADDR_VAR 0 3
20198: PUSH
20199: LD_VAR 0 2
20203: PPUSH
20204: CALL_OW 255
20208: ST_TO_ADDR
// if side = 1 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 1
20216: EQUAL
20217: IFFALSE 20235
// amTech := amTech diff tech ;
20219: LD_ADDR_EXP 28
20223: PUSH
20224: LD_EXP 28
20228: PUSH
20229: LD_VAR 0 1
20233: DIFF
20234: ST_TO_ADDR
// end ;
20235: PPOPN 3
20237: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
20238: LD_VAR 0 1
20242: PPUSH
20243: CALL 79966 0 1
// end ;
20247: PPOPN 1
20249: END
// on SailEvent ( event ) do begin case event of end ;
20250: LD_VAR 0 1
20254: PUSH
20255: POP
// end ;
20256: PPOPN 1
20258: END
// on Contact ( s1 , s2 ) do begin if not gameActive then
20259: LD_EXP 19
20263: NOT
20264: IFFALSE 20268
// exit ;
20266: GO 20366
// if not spotByAmerican and s1 in [ 2 , 1 ] and s2 in [ 1 , 2 ] then
20268: LD_EXP 8
20272: NOT
20273: PUSH
20274: LD_VAR 0 1
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: IN
20289: AND
20290: PUSH
20291: LD_VAR 0 2
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: IN
20306: AND
20307: IFFALSE 20317
// spotByAmerican := true ;
20309: LD_ADDR_EXP 8
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if not spotByLegion and s1 in [ 2 , 8 ] and s2 in [ 8 , 2 ] then
20317: LD_EXP 9
20321: NOT
20322: PUSH
20323: LD_VAR 0 1
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: LD_INT 8
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: IN
20338: AND
20339: PUSH
20340: LD_VAR 0 2
20344: PUSH
20345: LD_INT 8
20347: PUSH
20348: LD_INT 2
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: IN
20355: AND
20356: IFFALSE 20366
// spotByLegion := true ;
20358: LD_ADDR_EXP 9
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// end ; end_of_file
20366: PPOPN 2
20368: END
// every 1 1$05 + 0 0$20 trigger spotArabianBase do var i , tmp ;
20369: LD_EXP 7
20373: IFFALSE 20480
20375: GO 20377
20377: DISABLE
20378: LD_INT 0
20380: PPUSH
20381: PPUSH
// begin enable ;
20382: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
20383: LD_INT 35
20385: PPUSH
20386: LD_INT 385
20388: PPUSH
20389: CALL_OW 12
20393: PPUSH
20394: CALL_OW 67
// tmp := [ cratesNorthArea , cratesWestArea ] ;
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_INT 16
20405: PUSH
20406: LD_INT 17
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
20413: LD_ADDR_VAR 0 1
20417: PUSH
20418: LD_VAR 0 2
20422: PUSH
20423: LD_INT 1
20425: PPUSH
20426: LD_VAR 0 2
20430: PPUSH
20431: CALL 23056 0 1
20435: PPUSH
20436: CALL_OW 12
20440: ARRAY
20441: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 4 then
20442: LD_VAR 0 1
20446: PPUSH
20447: CALL_OW 435
20451: PUSH
20452: LD_INT 4
20454: LESS
20455: IFFALSE 20480
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
20457: LD_INT 1
20459: PPUSH
20460: LD_INT 5
20462: PPUSH
20463: CALL_OW 12
20467: PPUSH
20468: LD_VAR 0 1
20472: PPUSH
20473: LD_INT 1
20475: PPUSH
20476: CALL_OW 55
// end ;
20480: PPOPN 2
20482: END
// every 0 0$25 trigger tick < [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] and spotArabianBase do
20483: LD_OWVAR 1
20487: PUSH
20488: LD_INT 10500
20490: PUSH
20491: LD_INT 8400
20493: PUSH
20494: LD_INT 6300
20496: PUSH
20497: LD_INT 5250
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: PUSH
20506: LD_OWVAR 67
20510: ARRAY
20511: LESS
20512: PUSH
20513: LD_EXP 7
20517: AND
20518: IFFALSE 20551
20520: GO 20522
20522: DISABLE
// begin enable ;
20523: ENABLE
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20524: LD_INT 1
20526: PPUSH
20527: LD_INT 5
20529: PPUSH
20530: CALL_OW 12
20534: PPUSH
20535: LD_INT 218
20537: PPUSH
20538: LD_INT 92
20540: PPUSH
20541: LD_INT 11
20543: PPUSH
20544: LD_INT 1
20546: PPUSH
20547: CALL_OW 56
// end ;
20551: END
// every 0 0$45 trigger tick > [ 6 6$00 , 5 5$00 , 4 4$00 , 3 3$30 ] [ Difficulty ] and spotArabianBase do
20552: LD_OWVAR 1
20556: PUSH
20557: LD_INT 12600
20559: PUSH
20560: LD_INT 10500
20562: PUSH
20563: LD_INT 8400
20565: PUSH
20566: LD_INT 7350
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: PUSH
20575: LD_OWVAR 67
20579: ARRAY
20580: GREATER
20581: PUSH
20582: LD_EXP 7
20586: AND
20587: IFFALSE 20652
20589: GO 20591
20591: DISABLE
// begin enable ;
20592: ENABLE
// if Prob ( 100 - ( 10 * Difficulty ) ) and GetListOfCratesInArea ( arBaseArea ) < 12 then
20593: LD_INT 100
20595: PUSH
20596: LD_INT 10
20598: PUSH
20599: LD_OWVAR 67
20603: MUL
20604: MINUS
20605: PPUSH
20606: CALL_OW 13
20610: PUSH
20611: LD_INT 4
20613: PPUSH
20614: CALL_OW 435
20618: PUSH
20619: LD_INT 12
20621: LESS
20622: AND
20623: IFFALSE 20652
// CreateCratesXYR ( rand ( 1 , 5 ) , 218 , 92 , 11 , true ) ;
20625: LD_INT 1
20627: PPUSH
20628: LD_INT 5
20630: PPUSH
20631: CALL_OW 12
20635: PPUSH
20636: LD_INT 218
20638: PPUSH
20639: LD_INT 92
20641: PPUSH
20642: LD_INT 11
20644: PPUSH
20645: LD_INT 1
20647: PPUSH
20648: CALL_OW 56
// end ;
20652: END
// every 0 0$55 trigger IsOk ( amBase ) do
20653: LD_INT 2
20655: PPUSH
20656: CALL_OW 302
20660: IFFALSE 20700
20662: GO 20664
20664: DISABLE
// begin enable ;
20665: ENABLE
// if GetListOfCratesInArea ( amCratesArea ) < 3 then
20666: LD_INT 13
20668: PPUSH
20669: CALL_OW 435
20673: PUSH
20674: LD_INT 3
20676: LESS
20677: IFFALSE 20700
// CreateCratesArea ( rand ( 1 , 5 ) , amCratesArea , true ) ;
20679: LD_INT 1
20681: PPUSH
20682: LD_INT 5
20684: PPUSH
20685: CALL_OW 12
20689: PPUSH
20690: LD_INT 13
20692: PPUSH
20693: LD_INT 1
20695: PPUSH
20696: CALL_OW 55
// end ;
20700: END
// every 1 1$05 trigger IsOk ( legBase ) do
20701: LD_INT 38
20703: PPUSH
20704: CALL_OW 302
20708: IFFALSE 20748
20710: GO 20712
20712: DISABLE
// begin enable ;
20713: ENABLE
// if GetListOfCratesInArea ( legCratesArea ) < 3 then
20714: LD_INT 14
20716: PPUSH
20717: CALL_OW 435
20721: PUSH
20722: LD_INT 3
20724: LESS
20725: IFFALSE 20748
// CreateCratesArea ( rand ( 1 , 5 ) , legCratesArea , true ) ;
20727: LD_INT 1
20729: PPUSH
20730: LD_INT 5
20732: PPUSH
20733: CALL_OW 12
20737: PPUSH
20738: LD_INT 14
20740: PPUSH
20741: LD_INT 1
20743: PPUSH
20744: CALL_OW 55
// end ; end_of_file
20748: END
// every 0 0$1 trigger gameActive and GetClass ( Omar ) <> class_desert_warior and spotArabianBase and IsOk ( arBase ) do
20749: LD_EXP 19
20753: PUSH
20754: LD_EXP 24
20758: PPUSH
20759: CALL_OW 257
20763: PUSH
20764: LD_INT 11
20766: NONEQUAL
20767: AND
20768: PUSH
20769: LD_EXP 7
20773: AND
20774: PUSH
20775: LD_INT 85
20777: PPUSH
20778: CALL_OW 302
20782: AND
20783: IFFALSE 20803
20785: GO 20787
20787: DISABLE
// begin Query ( QSheik ) ;
20788: LD_STRING QSheik
20790: PPUSH
20791: CALL_OW 97
// omarCanChangeClass := true ;
20795: LD_ADDR_EXP 20
20799: PUSH
20800: LD_INT 1
20802: ST_TO_ADDR
// end ;
20803: END
// every 0 0$3 trigger omarCanChangeClass and GetClass ( Omar ) <> class_desert_warior and IsInUnit ( Omar ) = arBase do
20804: LD_EXP 20
20808: PUSH
20809: LD_EXP 24
20813: PPUSH
20814: CALL_OW 257
20818: PUSH
20819: LD_INT 11
20821: NONEQUAL
20822: AND
20823: PUSH
20824: LD_EXP 24
20828: PPUSH
20829: CALL_OW 310
20833: PUSH
20834: LD_INT 85
20836: EQUAL
20837: AND
20838: IFFALSE 20869
20840: GO 20842
20842: DISABLE
// begin enable ;
20843: ENABLE
// if Query ( QChangeClass ) = 1 then
20844: LD_STRING QChangeClass
20846: PPUSH
20847: CALL_OW 97
20851: PUSH
20852: LD_INT 1
20854: EQUAL
20855: IFFALSE 20869
// SetClass ( Omar , class_desert_warior ) ;
20857: LD_EXP 24
20861: PPUSH
20862: LD_INT 11
20864: PPUSH
20865: CALL_OW 336
// end ; end_of_file
20869: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20870: LD_INT 0
20872: PPUSH
20873: PPUSH
// if exist_mode then
20874: LD_VAR 0 2
20878: IFFALSE 20924
// begin unit := CreateCharacter ( prefix & ident ) ;
20880: LD_ADDR_VAR 0 5
20884: PUSH
20885: LD_VAR 0 3
20889: PUSH
20890: LD_VAR 0 1
20894: STR
20895: PPUSH
20896: CALL_OW 34
20900: ST_TO_ADDR
// if unit then
20901: LD_VAR 0 5
20905: IFFALSE 20922
// DeleteCharacters ( prefix & ident ) ;
20907: LD_VAR 0 3
20911: PUSH
20912: LD_VAR 0 1
20916: STR
20917: PPUSH
20918: CALL_OW 40
// end else
20922: GO 20939
// unit := NewCharacter ( ident ) ;
20924: LD_ADDR_VAR 0 5
20928: PUSH
20929: LD_VAR 0 1
20933: PPUSH
20934: CALL_OW 25
20938: ST_TO_ADDR
// result := unit ;
20939: LD_ADDR_VAR 0 4
20943: PUSH
20944: LD_VAR 0 5
20948: ST_TO_ADDR
// end ;
20949: LD_VAR 0 4
20953: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
20954: LD_INT 0
20956: PPUSH
20957: PPUSH
// if exist_mode then
20958: LD_VAR 0 2
20962: IFFALSE 20987
// unit := CreateCharacter ( prefix & ident ) else
20964: LD_ADDR_VAR 0 5
20968: PUSH
20969: LD_VAR 0 3
20973: PUSH
20974: LD_VAR 0 1
20978: STR
20979: PPUSH
20980: CALL_OW 34
20984: ST_TO_ADDR
20985: GO 21002
// unit := NewCharacter ( ident ) ;
20987: LD_ADDR_VAR 0 5
20991: PUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL_OW 25
21001: ST_TO_ADDR
// result := unit ;
21002: LD_ADDR_VAR 0 4
21006: PUSH
21007: LD_VAR 0 5
21011: ST_TO_ADDR
// end ;
21012: LD_VAR 0 4
21016: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21017: LD_INT 0
21019: PPUSH
21020: PPUSH
// if not side or not nation then
21021: LD_VAR 0 1
21025: NOT
21026: PUSH
21027: LD_VAR 0 2
21031: NOT
21032: OR
21033: IFFALSE 21037
// exit ;
21035: GO 21805
// case nation of nation_american :
21037: LD_VAR 0 2
21041: PUSH
21042: LD_INT 1
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21264
21050: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21051: LD_ADDR_VAR 0 4
21055: PUSH
21056: LD_INT 35
21058: PUSH
21059: LD_INT 45
21061: PUSH
21062: LD_INT 46
21064: PUSH
21065: LD_INT 47
21067: PUSH
21068: LD_INT 82
21070: PUSH
21071: LD_INT 83
21073: PUSH
21074: LD_INT 84
21076: PUSH
21077: LD_INT 85
21079: PUSH
21080: LD_INT 86
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: LD_INT 6
21091: PUSH
21092: LD_INT 15
21094: PUSH
21095: LD_INT 16
21097: PUSH
21098: LD_INT 7
21100: PUSH
21101: LD_INT 12
21103: PUSH
21104: LD_INT 13
21106: PUSH
21107: LD_INT 10
21109: PUSH
21110: LD_INT 14
21112: PUSH
21113: LD_INT 20
21115: PUSH
21116: LD_INT 21
21118: PUSH
21119: LD_INT 22
21121: PUSH
21122: LD_INT 25
21124: PUSH
21125: LD_INT 32
21127: PUSH
21128: LD_INT 27
21130: PUSH
21131: LD_INT 36
21133: PUSH
21134: LD_INT 69
21136: PUSH
21137: LD_INT 39
21139: PUSH
21140: LD_INT 34
21142: PUSH
21143: LD_INT 40
21145: PUSH
21146: LD_INT 48
21148: PUSH
21149: LD_INT 49
21151: PUSH
21152: LD_INT 50
21154: PUSH
21155: LD_INT 51
21157: PUSH
21158: LD_INT 52
21160: PUSH
21161: LD_INT 53
21163: PUSH
21164: LD_INT 54
21166: PUSH
21167: LD_INT 55
21169: PUSH
21170: LD_INT 56
21172: PUSH
21173: LD_INT 57
21175: PUSH
21176: LD_INT 58
21178: PUSH
21179: LD_INT 59
21181: PUSH
21182: LD_INT 60
21184: PUSH
21185: LD_INT 61
21187: PUSH
21188: LD_INT 62
21190: PUSH
21191: LD_INT 80
21193: PUSH
21194: LD_INT 82
21196: PUSH
21197: LD_INT 83
21199: PUSH
21200: LD_INT 84
21202: PUSH
21203: LD_INT 85
21205: PUSH
21206: LD_INT 86
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: ST_TO_ADDR
21262: GO 21729
21264: LD_INT 2
21266: DOUBLE
21267: EQUAL
21268: IFTRUE 21272
21270: GO 21498
21272: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21273: LD_ADDR_VAR 0 4
21277: PUSH
21278: LD_INT 35
21280: PUSH
21281: LD_INT 45
21283: PUSH
21284: LD_INT 46
21286: PUSH
21287: LD_INT 47
21289: PUSH
21290: LD_INT 82
21292: PUSH
21293: LD_INT 83
21295: PUSH
21296: LD_INT 84
21298: PUSH
21299: LD_INT 85
21301: PUSH
21302: LD_INT 87
21304: PUSH
21305: LD_INT 70
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: LD_INT 11
21313: PUSH
21314: LD_INT 3
21316: PUSH
21317: LD_INT 4
21319: PUSH
21320: LD_INT 5
21322: PUSH
21323: LD_INT 6
21325: PUSH
21326: LD_INT 15
21328: PUSH
21329: LD_INT 18
21331: PUSH
21332: LD_INT 7
21334: PUSH
21335: LD_INT 17
21337: PUSH
21338: LD_INT 8
21340: PUSH
21341: LD_INT 20
21343: PUSH
21344: LD_INT 21
21346: PUSH
21347: LD_INT 22
21349: PUSH
21350: LD_INT 72
21352: PUSH
21353: LD_INT 26
21355: PUSH
21356: LD_INT 69
21358: PUSH
21359: LD_INT 39
21361: PUSH
21362: LD_INT 40
21364: PUSH
21365: LD_INT 41
21367: PUSH
21368: LD_INT 42
21370: PUSH
21371: LD_INT 43
21373: PUSH
21374: LD_INT 48
21376: PUSH
21377: LD_INT 49
21379: PUSH
21380: LD_INT 50
21382: PUSH
21383: LD_INT 51
21385: PUSH
21386: LD_INT 52
21388: PUSH
21389: LD_INT 53
21391: PUSH
21392: LD_INT 54
21394: PUSH
21395: LD_INT 55
21397: PUSH
21398: LD_INT 56
21400: PUSH
21401: LD_INT 60
21403: PUSH
21404: LD_INT 61
21406: PUSH
21407: LD_INT 62
21409: PUSH
21410: LD_INT 66
21412: PUSH
21413: LD_INT 67
21415: PUSH
21416: LD_INT 68
21418: PUSH
21419: LD_INT 81
21421: PUSH
21422: LD_INT 82
21424: PUSH
21425: LD_INT 83
21427: PUSH
21428: LD_INT 84
21430: PUSH
21431: LD_INT 85
21433: PUSH
21434: LD_INT 87
21436: PUSH
21437: LD_INT 88
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: ST_TO_ADDR
21496: GO 21729
21498: LD_INT 3
21500: DOUBLE
21501: EQUAL
21502: IFTRUE 21506
21504: GO 21728
21506: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21507: LD_ADDR_VAR 0 4
21511: PUSH
21512: LD_INT 46
21514: PUSH
21515: LD_INT 47
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: LD_INT 82
21526: PUSH
21527: LD_INT 83
21529: PUSH
21530: LD_INT 84
21532: PUSH
21533: LD_INT 85
21535: PUSH
21536: LD_INT 86
21538: PUSH
21539: LD_INT 11
21541: PUSH
21542: LD_INT 9
21544: PUSH
21545: LD_INT 20
21547: PUSH
21548: LD_INT 19
21550: PUSH
21551: LD_INT 21
21553: PUSH
21554: LD_INT 24
21556: PUSH
21557: LD_INT 22
21559: PUSH
21560: LD_INT 25
21562: PUSH
21563: LD_INT 28
21565: PUSH
21566: LD_INT 29
21568: PUSH
21569: LD_INT 30
21571: PUSH
21572: LD_INT 31
21574: PUSH
21575: LD_INT 37
21577: PUSH
21578: LD_INT 38
21580: PUSH
21581: LD_INT 32
21583: PUSH
21584: LD_INT 27
21586: PUSH
21587: LD_INT 33
21589: PUSH
21590: LD_INT 69
21592: PUSH
21593: LD_INT 39
21595: PUSH
21596: LD_INT 34
21598: PUSH
21599: LD_INT 40
21601: PUSH
21602: LD_INT 71
21604: PUSH
21605: LD_INT 23
21607: PUSH
21608: LD_INT 44
21610: PUSH
21611: LD_INT 48
21613: PUSH
21614: LD_INT 49
21616: PUSH
21617: LD_INT 50
21619: PUSH
21620: LD_INT 51
21622: PUSH
21623: LD_INT 52
21625: PUSH
21626: LD_INT 53
21628: PUSH
21629: LD_INT 54
21631: PUSH
21632: LD_INT 55
21634: PUSH
21635: LD_INT 56
21637: PUSH
21638: LD_INT 57
21640: PUSH
21641: LD_INT 58
21643: PUSH
21644: LD_INT 59
21646: PUSH
21647: LD_INT 63
21649: PUSH
21650: LD_INT 64
21652: PUSH
21653: LD_INT 65
21655: PUSH
21656: LD_INT 82
21658: PUSH
21659: LD_INT 83
21661: PUSH
21662: LD_INT 84
21664: PUSH
21665: LD_INT 85
21667: PUSH
21668: LD_INT 86
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: ST_TO_ADDR
21726: GO 21729
21728: POP
// if state > - 1 and state < 3 then
21729: LD_VAR 0 3
21733: PUSH
21734: LD_INT 1
21736: NEG
21737: GREATER
21738: PUSH
21739: LD_VAR 0 3
21743: PUSH
21744: LD_INT 3
21746: LESS
21747: AND
21748: IFFALSE 21805
// for i in result do
21750: LD_ADDR_VAR 0 5
21754: PUSH
21755: LD_VAR 0 4
21759: PUSH
21760: FOR_IN
21761: IFFALSE 21803
// if GetTech ( i , side ) <> state then
21763: LD_VAR 0 5
21767: PPUSH
21768: LD_VAR 0 1
21772: PPUSH
21773: CALL_OW 321
21777: PUSH
21778: LD_VAR 0 3
21782: NONEQUAL
21783: IFFALSE 21801
// result := result diff i ;
21785: LD_ADDR_VAR 0 4
21789: PUSH
21790: LD_VAR 0 4
21794: PUSH
21795: LD_VAR 0 5
21799: DIFF
21800: ST_TO_ADDR
21801: GO 21760
21803: POP
21804: POP
// end ;
21805: LD_VAR 0 4
21809: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21810: LD_INT 0
21812: PPUSH
21813: PPUSH
21814: PPUSH
// result := true ;
21815: LD_ADDR_VAR 0 3
21819: PUSH
21820: LD_INT 1
21822: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21823: LD_ADDR_VAR 0 5
21827: PUSH
21828: LD_VAR 0 2
21832: PPUSH
21833: CALL_OW 480
21837: ST_TO_ADDR
// if not tmp then
21838: LD_VAR 0 5
21842: NOT
21843: IFFALSE 21847
// exit ;
21845: GO 21896
// for i in tmp do
21847: LD_ADDR_VAR 0 4
21851: PUSH
21852: LD_VAR 0 5
21856: PUSH
21857: FOR_IN
21858: IFFALSE 21894
// if GetTech ( i , side ) <> state_researched then
21860: LD_VAR 0 4
21864: PPUSH
21865: LD_VAR 0 1
21869: PPUSH
21870: CALL_OW 321
21874: PUSH
21875: LD_INT 2
21877: NONEQUAL
21878: IFFALSE 21892
// begin result := false ;
21880: LD_ADDR_VAR 0 3
21884: PUSH
21885: LD_INT 0
21887: ST_TO_ADDR
// exit ;
21888: POP
21889: POP
21890: GO 21896
// end ;
21892: GO 21857
21894: POP
21895: POP
// end ;
21896: LD_VAR 0 3
21900: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21901: LD_INT 0
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
21913: PPUSH
21914: PPUSH
21915: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21916: LD_VAR 0 1
21920: NOT
21921: PUSH
21922: LD_VAR 0 1
21926: PPUSH
21927: CALL_OW 257
21931: PUSH
21932: LD_INT 9
21934: NONEQUAL
21935: OR
21936: IFFALSE 21940
// exit ;
21938: GO 22513
// side := GetSide ( unit ) ;
21940: LD_ADDR_VAR 0 9
21944: PUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 255
21954: ST_TO_ADDR
// tech_space := tech_spacanom ;
21955: LD_ADDR_VAR 0 12
21959: PUSH
21960: LD_INT 29
21962: ST_TO_ADDR
// tech_time := tech_taurad ;
21963: LD_ADDR_VAR 0 13
21967: PUSH
21968: LD_INT 28
21970: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21971: LD_ADDR_VAR 0 11
21975: PUSH
21976: LD_VAR 0 1
21980: PPUSH
21981: CALL_OW 310
21985: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21986: LD_VAR 0 11
21990: PPUSH
21991: CALL_OW 247
21995: PUSH
21996: LD_INT 2
21998: EQUAL
21999: IFFALSE 22003
// exit ;
22001: GO 22513
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22003: LD_ADDR_VAR 0 8
22007: PUSH
22008: LD_INT 81
22010: PUSH
22011: LD_VAR 0 9
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 3
22022: PUSH
22023: LD_INT 21
22025: PUSH
22026: LD_INT 3
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PPUSH
22041: CALL_OW 69
22045: ST_TO_ADDR
// if not tmp then
22046: LD_VAR 0 8
22050: NOT
22051: IFFALSE 22055
// exit ;
22053: GO 22513
// if in_unit then
22055: LD_VAR 0 11
22059: IFFALSE 22083
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22061: LD_ADDR_VAR 0 10
22065: PUSH
22066: LD_VAR 0 8
22070: PPUSH
22071: LD_VAR 0 11
22075: PPUSH
22076: CALL_OW 74
22080: ST_TO_ADDR
22081: GO 22103
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22083: LD_ADDR_VAR 0 10
22087: PUSH
22088: LD_VAR 0 8
22092: PPUSH
22093: LD_VAR 0 1
22097: PPUSH
22098: CALL_OW 74
22102: ST_TO_ADDR
// if not enemy then
22103: LD_VAR 0 10
22107: NOT
22108: IFFALSE 22112
// exit ;
22110: GO 22513
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22112: LD_VAR 0 11
22116: PUSH
22117: LD_VAR 0 11
22121: PPUSH
22122: LD_VAR 0 10
22126: PPUSH
22127: CALL_OW 296
22131: PUSH
22132: LD_INT 13
22134: GREATER
22135: AND
22136: PUSH
22137: LD_VAR 0 1
22141: PPUSH
22142: LD_VAR 0 10
22146: PPUSH
22147: CALL_OW 296
22151: PUSH
22152: LD_INT 12
22154: GREATER
22155: OR
22156: IFFALSE 22160
// exit ;
22158: GO 22513
// missile := [ 1 ] ;
22160: LD_ADDR_VAR 0 14
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: EMPTY
22169: LIST
22170: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22171: LD_VAR 0 9
22175: PPUSH
22176: LD_VAR 0 12
22180: PPUSH
22181: CALL_OW 325
22185: IFFALSE 22214
// missile := Replace ( missile , missile + 1 , 2 ) ;
22187: LD_ADDR_VAR 0 14
22191: PUSH
22192: LD_VAR 0 14
22196: PPUSH
22197: LD_VAR 0 14
22201: PUSH
22202: LD_INT 1
22204: PLUS
22205: PPUSH
22206: LD_INT 2
22208: PPUSH
22209: CALL_OW 1
22213: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22214: LD_VAR 0 9
22218: PPUSH
22219: LD_VAR 0 13
22223: PPUSH
22224: CALL_OW 325
22228: PUSH
22229: LD_VAR 0 10
22233: PPUSH
22234: CALL_OW 255
22238: PPUSH
22239: LD_VAR 0 13
22243: PPUSH
22244: CALL_OW 325
22248: NOT
22249: AND
22250: IFFALSE 22279
// missile := Replace ( missile , missile + 1 , 3 ) ;
22252: LD_ADDR_VAR 0 14
22256: PUSH
22257: LD_VAR 0 14
22261: PPUSH
22262: LD_VAR 0 14
22266: PUSH
22267: LD_INT 1
22269: PLUS
22270: PPUSH
22271: LD_INT 3
22273: PPUSH
22274: CALL_OW 1
22278: ST_TO_ADDR
// if missile < 2 then
22279: LD_VAR 0 14
22283: PUSH
22284: LD_INT 2
22286: LESS
22287: IFFALSE 22291
// exit ;
22289: GO 22513
// x := GetX ( enemy ) ;
22291: LD_ADDR_VAR 0 4
22295: PUSH
22296: LD_VAR 0 10
22300: PPUSH
22301: CALL_OW 250
22305: ST_TO_ADDR
// y := GetY ( enemy ) ;
22306: LD_ADDR_VAR 0 5
22310: PUSH
22311: LD_VAR 0 10
22315: PPUSH
22316: CALL_OW 251
22320: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22321: LD_ADDR_VAR 0 6
22325: PUSH
22326: LD_VAR 0 4
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: CALL_OW 12
22342: PLUS
22343: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22344: LD_ADDR_VAR 0 7
22348: PUSH
22349: LD_VAR 0 5
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PPUSH
22358: LD_INT 1
22360: PPUSH
22361: CALL_OW 12
22365: PLUS
22366: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22367: LD_VAR 0 6
22371: PPUSH
22372: LD_VAR 0 7
22376: PPUSH
22377: CALL_OW 488
22381: NOT
22382: IFFALSE 22404
// begin _x := x ;
22384: LD_ADDR_VAR 0 6
22388: PUSH
22389: LD_VAR 0 4
22393: ST_TO_ADDR
// _y := y ;
22394: LD_ADDR_VAR 0 7
22398: PUSH
22399: LD_VAR 0 5
22403: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22404: LD_ADDR_VAR 0 3
22408: PUSH
22409: LD_INT 1
22411: PPUSH
22412: LD_VAR 0 14
22416: PPUSH
22417: CALL_OW 12
22421: ST_TO_ADDR
// case i of 1 :
22422: LD_VAR 0 3
22426: PUSH
22427: LD_INT 1
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22452
22435: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22436: LD_VAR 0 1
22440: PPUSH
22441: LD_VAR 0 10
22445: PPUSH
22446: CALL_OW 115
22450: GO 22513
22452: LD_INT 2
22454: DOUBLE
22455: EQUAL
22456: IFTRUE 22460
22458: GO 22482
22460: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22461: LD_VAR 0 1
22465: PPUSH
22466: LD_VAR 0 6
22470: PPUSH
22471: LD_VAR 0 7
22475: PPUSH
22476: CALL_OW 153
22480: GO 22513
22482: LD_INT 3
22484: DOUBLE
22485: EQUAL
22486: IFTRUE 22490
22488: GO 22512
22490: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22491: LD_VAR 0 1
22495: PPUSH
22496: LD_VAR 0 6
22500: PPUSH
22501: LD_VAR 0 7
22505: PPUSH
22506: CALL_OW 154
22510: GO 22513
22512: POP
// end ;
22513: LD_VAR 0 2
22517: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22518: LD_INT 0
22520: PPUSH
22521: PPUSH
22522: PPUSH
22523: PPUSH
22524: PPUSH
22525: PPUSH
// if not unit or not building then
22526: LD_VAR 0 1
22530: NOT
22531: PUSH
22532: LD_VAR 0 2
22536: NOT
22537: OR
22538: IFFALSE 22542
// exit ;
22540: GO 22700
// x := GetX ( building ) ;
22542: LD_ADDR_VAR 0 5
22546: PUSH
22547: LD_VAR 0 2
22551: PPUSH
22552: CALL_OW 250
22556: ST_TO_ADDR
// y := GetY ( building ) ;
22557: LD_ADDR_VAR 0 6
22561: PUSH
22562: LD_VAR 0 2
22566: PPUSH
22567: CALL_OW 251
22571: ST_TO_ADDR
// for i = 0 to 5 do
22572: LD_ADDR_VAR 0 4
22576: PUSH
22577: DOUBLE
22578: LD_INT 0
22580: DEC
22581: ST_TO_ADDR
22582: LD_INT 5
22584: PUSH
22585: FOR_TO
22586: IFFALSE 22698
// begin _x := ShiftX ( x , i , 3 ) ;
22588: LD_ADDR_VAR 0 7
22592: PUSH
22593: LD_VAR 0 5
22597: PPUSH
22598: LD_VAR 0 4
22602: PPUSH
22603: LD_INT 3
22605: PPUSH
22606: CALL_OW 272
22610: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22611: LD_ADDR_VAR 0 8
22615: PUSH
22616: LD_VAR 0 6
22620: PPUSH
22621: LD_VAR 0 4
22625: PPUSH
22626: LD_INT 3
22628: PPUSH
22629: CALL_OW 273
22633: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22634: LD_VAR 0 7
22638: PPUSH
22639: LD_VAR 0 8
22643: PPUSH
22644: CALL_OW 488
22648: NOT
22649: IFFALSE 22653
// continue ;
22651: GO 22585
// if HexInfo ( _x , _y ) = 0 then
22653: LD_VAR 0 7
22657: PPUSH
22658: LD_VAR 0 8
22662: PPUSH
22663: CALL_OW 428
22667: PUSH
22668: LD_INT 0
22670: EQUAL
22671: IFFALSE 22696
// begin ComMoveXY ( unit , _x , _y ) ;
22673: LD_VAR 0 1
22677: PPUSH
22678: LD_VAR 0 7
22682: PPUSH
22683: LD_VAR 0 8
22687: PPUSH
22688: CALL_OW 111
// exit ;
22692: POP
22693: POP
22694: GO 22700
// end ; end ;
22696: GO 22585
22698: POP
22699: POP
// end ;
22700: LD_VAR 0 3
22704: RET
// export function ScanBase ( side , base_area ) ; begin
22705: LD_INT 0
22707: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22708: LD_ADDR_VAR 0 3
22712: PUSH
22713: LD_VAR 0 2
22717: PPUSH
22718: LD_INT 81
22720: PUSH
22721: LD_VAR 0 1
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PPUSH
22730: CALL_OW 70
22734: ST_TO_ADDR
// end ;
22735: LD_VAR 0 3
22739: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22740: LD_INT 0
22742: PPUSH
22743: PPUSH
22744: PPUSH
22745: PPUSH
// result := false ;
22746: LD_ADDR_VAR 0 2
22750: PUSH
22751: LD_INT 0
22753: ST_TO_ADDR
// side := GetSide ( unit ) ;
22754: LD_ADDR_VAR 0 3
22758: PUSH
22759: LD_VAR 0 1
22763: PPUSH
22764: CALL_OW 255
22768: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22769: LD_ADDR_VAR 0 4
22773: PUSH
22774: LD_VAR 0 1
22778: PPUSH
22779: CALL_OW 248
22783: ST_TO_ADDR
// case nat of 1 :
22784: LD_VAR 0 4
22788: PUSH
22789: LD_INT 1
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22808
22797: POP
// tech := tech_lassight ; 2 :
22798: LD_ADDR_VAR 0 5
22802: PUSH
22803: LD_INT 12
22805: ST_TO_ADDR
22806: GO 22847
22808: LD_INT 2
22810: DOUBLE
22811: EQUAL
22812: IFTRUE 22816
22814: GO 22827
22816: POP
// tech := tech_mortar ; 3 :
22817: LD_ADDR_VAR 0 5
22821: PUSH
22822: LD_INT 41
22824: ST_TO_ADDR
22825: GO 22847
22827: LD_INT 3
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22846
22835: POP
// tech := tech_bazooka ; end ;
22836: LD_ADDR_VAR 0 5
22840: PUSH
22841: LD_INT 44
22843: ST_TO_ADDR
22844: GO 22847
22846: POP
// if Researched ( side , tech ) then
22847: LD_VAR 0 3
22851: PPUSH
22852: LD_VAR 0 5
22856: PPUSH
22857: CALL_OW 325
22861: IFFALSE 22888
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22863: LD_ADDR_VAR 0 2
22867: PUSH
22868: LD_INT 5
22870: PUSH
22871: LD_INT 8
22873: PUSH
22874: LD_INT 9
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: PUSH
22882: LD_VAR 0 4
22886: ARRAY
22887: ST_TO_ADDR
// end ;
22888: LD_VAR 0 2
22892: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22893: LD_INT 0
22895: PPUSH
22896: PPUSH
22897: PPUSH
// if not mines then
22898: LD_VAR 0 2
22902: NOT
22903: IFFALSE 22907
// exit ;
22905: GO 23051
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22907: LD_ADDR_VAR 0 5
22911: PUSH
22912: LD_INT 81
22914: PUSH
22915: LD_VAR 0 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 3
22926: PUSH
22927: LD_INT 21
22929: PUSH
22930: LD_INT 3
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PPUSH
22945: CALL_OW 69
22949: ST_TO_ADDR
// for i in mines do
22950: LD_ADDR_VAR 0 4
22954: PUSH
22955: LD_VAR 0 2
22959: PUSH
22960: FOR_IN
22961: IFFALSE 23049
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22963: LD_VAR 0 4
22967: PUSH
22968: LD_INT 1
22970: ARRAY
22971: PPUSH
22972: LD_VAR 0 4
22976: PUSH
22977: LD_INT 2
22979: ARRAY
22980: PPUSH
22981: CALL_OW 458
22985: NOT
22986: IFFALSE 22990
// continue ;
22988: GO 22960
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22990: LD_VAR 0 4
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: PPUSH
22999: LD_VAR 0 4
23003: PUSH
23004: LD_INT 2
23006: ARRAY
23007: PPUSH
23008: CALL_OW 428
23012: PUSH
23013: LD_VAR 0 5
23017: IN
23018: IFFALSE 23047
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23020: LD_VAR 0 4
23024: PUSH
23025: LD_INT 1
23027: ARRAY
23028: PPUSH
23029: LD_VAR 0 4
23033: PUSH
23034: LD_INT 2
23036: ARRAY
23037: PPUSH
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 456
// end ;
23047: GO 22960
23049: POP
23050: POP
// end ;
23051: LD_VAR 0 3
23055: RET
// export function Count ( array ) ; begin
23056: LD_INT 0
23058: PPUSH
// result := array + 0 ;
23059: LD_ADDR_VAR 0 2
23063: PUSH
23064: LD_VAR 0 1
23068: PUSH
23069: LD_INT 0
23071: PLUS
23072: ST_TO_ADDR
// end ;
23073: LD_VAR 0 2
23077: RET
// export function IsEmpty ( building ) ; begin
23078: LD_INT 0
23080: PPUSH
// if not building then
23081: LD_VAR 0 1
23085: NOT
23086: IFFALSE 23090
// exit ;
23088: GO 23133
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23090: LD_ADDR_VAR 0 2
23094: PUSH
23095: LD_VAR 0 1
23099: PUSH
23100: LD_INT 22
23102: PUSH
23103: LD_VAR 0 1
23107: PPUSH
23108: CALL_OW 255
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 58
23119: PUSH
23120: EMPTY
23121: LIST
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PPUSH
23127: CALL_OW 69
23131: IN
23132: ST_TO_ADDR
// end ;
23133: LD_VAR 0 2
23137: RET
// export function IsNotFull ( building ) ; var places ; begin
23138: LD_INT 0
23140: PPUSH
23141: PPUSH
// if not building then
23142: LD_VAR 0 1
23146: NOT
23147: IFFALSE 23151
// exit ;
23149: GO 23179
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: LD_VAR 0 1
23160: PPUSH
23161: LD_INT 3
23163: PUSH
23164: LD_INT 62
23166: PUSH
23167: EMPTY
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PPUSH
23174: CALL_OW 72
23178: ST_TO_ADDR
// end ;
23179: LD_VAR 0 2
23183: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23184: LD_INT 0
23186: PPUSH
23187: PPUSH
23188: PPUSH
23189: PPUSH
// tmp := [ ] ;
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: EMPTY
23196: ST_TO_ADDR
// list := [ ] ;
23197: LD_ADDR_VAR 0 5
23201: PUSH
23202: EMPTY
23203: ST_TO_ADDR
// for i = 16 to 25 do
23204: LD_ADDR_VAR 0 4
23208: PUSH
23209: DOUBLE
23210: LD_INT 16
23212: DEC
23213: ST_TO_ADDR
23214: LD_INT 25
23216: PUSH
23217: FOR_TO
23218: IFFALSE 23291
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23220: LD_ADDR_VAR 0 3
23224: PUSH
23225: LD_VAR 0 3
23229: PUSH
23230: LD_INT 22
23232: PUSH
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 255
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 91
23249: PUSH
23250: LD_VAR 0 1
23254: PUSH
23255: LD_INT 6
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 30
23265: PUSH
23266: LD_VAR 0 4
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: PPUSH
23283: CALL_OW 69
23287: ADD
23288: ST_TO_ADDR
23289: GO 23217
23291: POP
23292: POP
// for i = 1 to tmp do
23293: LD_ADDR_VAR 0 4
23297: PUSH
23298: DOUBLE
23299: LD_INT 1
23301: DEC
23302: ST_TO_ADDR
23303: LD_VAR 0 3
23307: PUSH
23308: FOR_TO
23309: IFFALSE 23397
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23311: LD_ADDR_VAR 0 5
23315: PUSH
23316: LD_VAR 0 5
23320: PUSH
23321: LD_VAR 0 3
23325: PUSH
23326: LD_VAR 0 4
23330: ARRAY
23331: PPUSH
23332: CALL_OW 266
23336: PUSH
23337: LD_VAR 0 3
23341: PUSH
23342: LD_VAR 0 4
23346: ARRAY
23347: PPUSH
23348: CALL_OW 250
23352: PUSH
23353: LD_VAR 0 3
23357: PUSH
23358: LD_VAR 0 4
23362: ARRAY
23363: PPUSH
23364: CALL_OW 251
23368: PUSH
23369: LD_VAR 0 3
23373: PUSH
23374: LD_VAR 0 4
23378: ARRAY
23379: PPUSH
23380: CALL_OW 254
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: ADD
23394: ST_TO_ADDR
23395: GO 23308
23397: POP
23398: POP
// result := list ;
23399: LD_ADDR_VAR 0 2
23403: PUSH
23404: LD_VAR 0 5
23408: ST_TO_ADDR
// end ;
23409: LD_VAR 0 2
23413: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23414: LD_INT 0
23416: PPUSH
23417: PPUSH
23418: PPUSH
23419: PPUSH
23420: PPUSH
23421: PPUSH
23422: PPUSH
// if not factory then
23423: LD_VAR 0 1
23427: NOT
23428: IFFALSE 23432
// exit ;
23430: GO 24025
// if control = control_apeman then
23432: LD_VAR 0 4
23436: PUSH
23437: LD_INT 5
23439: EQUAL
23440: IFFALSE 23549
// begin tmp := UnitsInside ( factory ) ;
23442: LD_ADDR_VAR 0 8
23446: PUSH
23447: LD_VAR 0 1
23451: PPUSH
23452: CALL_OW 313
23456: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23457: LD_VAR 0 8
23461: PPUSH
23462: LD_INT 25
23464: PUSH
23465: LD_INT 12
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PPUSH
23472: CALL_OW 72
23476: NOT
23477: IFFALSE 23487
// control := control_manual ;
23479: LD_ADDR_VAR 0 4
23483: PUSH
23484: LD_INT 1
23486: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23487: LD_ADDR_VAR 0 8
23491: PUSH
23492: LD_VAR 0 1
23496: PPUSH
23497: CALL 23184 0 1
23501: ST_TO_ADDR
// if tmp then
23502: LD_VAR 0 8
23506: IFFALSE 23549
// begin for i in tmp do
23508: LD_ADDR_VAR 0 7
23512: PUSH
23513: LD_VAR 0 8
23517: PUSH
23518: FOR_IN
23519: IFFALSE 23547
// if i [ 1 ] = b_ext_radio then
23521: LD_VAR 0 7
23525: PUSH
23526: LD_INT 1
23528: ARRAY
23529: PUSH
23530: LD_INT 22
23532: EQUAL
23533: IFFALSE 23545
// begin control := control_remote ;
23535: LD_ADDR_VAR 0 4
23539: PUSH
23540: LD_INT 2
23542: ST_TO_ADDR
// break ;
23543: GO 23547
// end ;
23545: GO 23518
23547: POP
23548: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23549: LD_VAR 0 1
23553: PPUSH
23554: LD_VAR 0 2
23558: PPUSH
23559: LD_VAR 0 3
23563: PPUSH
23564: LD_VAR 0 4
23568: PPUSH
23569: LD_VAR 0 5
23573: PPUSH
23574: CALL_OW 448
23578: IFFALSE 23613
// begin result := [ chassis , engine , control , weapon ] ;
23580: LD_ADDR_VAR 0 6
23584: PUSH
23585: LD_VAR 0 2
23589: PUSH
23590: LD_VAR 0 3
23594: PUSH
23595: LD_VAR 0 4
23599: PUSH
23600: LD_VAR 0 5
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: ST_TO_ADDR
// exit ;
23611: GO 24025
// end ; _chassis := AvailableChassisList ( factory ) ;
23613: LD_ADDR_VAR 0 9
23617: PUSH
23618: LD_VAR 0 1
23622: PPUSH
23623: CALL_OW 475
23627: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23628: LD_ADDR_VAR 0 11
23632: PUSH
23633: LD_VAR 0 1
23637: PPUSH
23638: CALL_OW 476
23642: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23643: LD_ADDR_VAR 0 12
23647: PUSH
23648: LD_VAR 0 1
23652: PPUSH
23653: CALL_OW 477
23657: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23658: LD_ADDR_VAR 0 10
23662: PUSH
23663: LD_VAR 0 1
23667: PPUSH
23668: CALL_OW 478
23672: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23673: LD_VAR 0 9
23677: NOT
23678: PUSH
23679: LD_VAR 0 11
23683: NOT
23684: OR
23685: PUSH
23686: LD_VAR 0 12
23690: NOT
23691: OR
23692: PUSH
23693: LD_VAR 0 10
23697: NOT
23698: OR
23699: IFFALSE 23734
// begin result := [ chassis , engine , control , weapon ] ;
23701: LD_ADDR_VAR 0 6
23705: PUSH
23706: LD_VAR 0 2
23710: PUSH
23711: LD_VAR 0 3
23715: PUSH
23716: LD_VAR 0 4
23720: PUSH
23721: LD_VAR 0 5
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: ST_TO_ADDR
// exit ;
23732: GO 24025
// end ; if not chassis in _chassis then
23734: LD_VAR 0 2
23738: PUSH
23739: LD_VAR 0 9
23743: IN
23744: NOT
23745: IFFALSE 23771
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23747: LD_ADDR_VAR 0 2
23751: PUSH
23752: LD_VAR 0 9
23756: PUSH
23757: LD_INT 1
23759: PPUSH
23760: LD_VAR 0 9
23764: PPUSH
23765: CALL_OW 12
23769: ARRAY
23770: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23771: LD_VAR 0 2
23775: PPUSH
23776: LD_VAR 0 3
23780: PPUSH
23781: CALL 24030 0 2
23785: NOT
23786: IFFALSE 23845
// repeat engine := _engine [ 1 ] ;
23788: LD_ADDR_VAR 0 3
23792: PUSH
23793: LD_VAR 0 11
23797: PUSH
23798: LD_INT 1
23800: ARRAY
23801: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23802: LD_ADDR_VAR 0 11
23806: PUSH
23807: LD_VAR 0 11
23811: PPUSH
23812: LD_INT 1
23814: PPUSH
23815: CALL_OW 3
23819: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23820: LD_VAR 0 2
23824: PPUSH
23825: LD_VAR 0 3
23829: PPUSH
23830: CALL 24030 0 2
23834: PUSH
23835: LD_VAR 0 11
23839: PUSH
23840: EMPTY
23841: EQUAL
23842: OR
23843: IFFALSE 23788
// if not control in _control then
23845: LD_VAR 0 4
23849: PUSH
23850: LD_VAR 0 12
23854: IN
23855: NOT
23856: IFFALSE 23882
// control := _control [ rand ( 1 , _control ) ] ;
23858: LD_ADDR_VAR 0 4
23862: PUSH
23863: LD_VAR 0 12
23867: PUSH
23868: LD_INT 1
23870: PPUSH
23871: LD_VAR 0 12
23875: PPUSH
23876: CALL_OW 12
23880: ARRAY
23881: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23882: LD_VAR 0 2
23886: PPUSH
23887: LD_VAR 0 5
23891: PPUSH
23892: CALL 24250 0 2
23896: NOT
23897: IFFALSE 23956
// repeat weapon := _weapon [ 1 ] ;
23899: LD_ADDR_VAR 0 5
23903: PUSH
23904: LD_VAR 0 10
23908: PUSH
23909: LD_INT 1
23911: ARRAY
23912: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23913: LD_ADDR_VAR 0 10
23917: PUSH
23918: LD_VAR 0 10
23922: PPUSH
23923: LD_INT 1
23925: PPUSH
23926: CALL_OW 3
23930: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23931: LD_VAR 0 2
23935: PPUSH
23936: LD_VAR 0 5
23940: PPUSH
23941: CALL 24250 0 2
23945: PUSH
23946: LD_VAR 0 10
23950: PUSH
23951: EMPTY
23952: EQUAL
23953: OR
23954: IFFALSE 23899
// result := [ ] ;
23956: LD_ADDR_VAR 0 6
23960: PUSH
23961: EMPTY
23962: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23963: LD_VAR 0 1
23967: PPUSH
23968: LD_VAR 0 2
23972: PPUSH
23973: LD_VAR 0 3
23977: PPUSH
23978: LD_VAR 0 4
23982: PPUSH
23983: LD_VAR 0 5
23987: PPUSH
23988: CALL_OW 448
23992: IFFALSE 24025
// result := [ chassis , engine , control , weapon ] ;
23994: LD_ADDR_VAR 0 6
23998: PUSH
23999: LD_VAR 0 2
24003: PUSH
24004: LD_VAR 0 3
24008: PUSH
24009: LD_VAR 0 4
24013: PUSH
24014: LD_VAR 0 5
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: ST_TO_ADDR
// end ;
24025: LD_VAR 0 6
24029: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24030: LD_INT 0
24032: PPUSH
// if not chassis or not engine then
24033: LD_VAR 0 1
24037: NOT
24038: PUSH
24039: LD_VAR 0 2
24043: NOT
24044: OR
24045: IFFALSE 24049
// exit ;
24047: GO 24245
// case engine of engine_solar :
24049: LD_VAR 0 2
24053: PUSH
24054: LD_INT 2
24056: DOUBLE
24057: EQUAL
24058: IFTRUE 24062
24060: GO 24100
24062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24063: LD_ADDR_VAR 0 3
24067: PUSH
24068: LD_INT 11
24070: PUSH
24071: LD_INT 12
24073: PUSH
24074: LD_INT 13
24076: PUSH
24077: LD_INT 14
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: LD_INT 3
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: ST_TO_ADDR
24098: GO 24229
24100: LD_INT 1
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24170
24108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24109: LD_ADDR_VAR 0 3
24113: PUSH
24114: LD_INT 11
24116: PUSH
24117: LD_INT 12
24119: PUSH
24120: LD_INT 13
24122: PUSH
24123: LD_INT 14
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 3
24134: PUSH
24135: LD_INT 4
24137: PUSH
24138: LD_INT 5
24140: PUSH
24141: LD_INT 21
24143: PUSH
24144: LD_INT 23
24146: PUSH
24147: LD_INT 22
24149: PUSH
24150: LD_INT 24
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: ST_TO_ADDR
24168: GO 24229
24170: LD_INT 3
24172: DOUBLE
24173: EQUAL
24174: IFTRUE 24178
24176: GO 24228
24178: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24179: LD_ADDR_VAR 0 3
24183: PUSH
24184: LD_INT 13
24186: PUSH
24187: LD_INT 14
24189: PUSH
24190: LD_INT 2
24192: PUSH
24193: LD_INT 3
24195: PUSH
24196: LD_INT 4
24198: PUSH
24199: LD_INT 5
24201: PUSH
24202: LD_INT 21
24204: PUSH
24205: LD_INT 22
24207: PUSH
24208: LD_INT 23
24210: PUSH
24211: LD_INT 24
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: ST_TO_ADDR
24226: GO 24229
24228: POP
// result := ( chassis in result ) ;
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: LD_VAR 0 1
24238: PUSH
24239: LD_VAR 0 3
24243: IN
24244: ST_TO_ADDR
// end ;
24245: LD_VAR 0 3
24249: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24250: LD_INT 0
24252: PPUSH
// if not chassis or not weapon then
24253: LD_VAR 0 1
24257: NOT
24258: PUSH
24259: LD_VAR 0 2
24263: NOT
24264: OR
24265: IFFALSE 24269
// exit ;
24267: GO 25329
// case weapon of us_machine_gun :
24269: LD_VAR 0 2
24273: PUSH
24274: LD_INT 2
24276: DOUBLE
24277: EQUAL
24278: IFTRUE 24282
24280: GO 24312
24282: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24283: LD_ADDR_VAR 0 3
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: LD_INT 4
24299: PUSH
24300: LD_INT 5
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: ST_TO_ADDR
24310: GO 25313
24312: LD_INT 3
24314: DOUBLE
24315: EQUAL
24316: IFTRUE 24320
24318: GO 24350
24320: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24321: LD_ADDR_VAR 0 3
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: LD_INT 3
24334: PUSH
24335: LD_INT 4
24337: PUSH
24338: LD_INT 5
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: ST_TO_ADDR
24348: GO 25313
24350: LD_INT 11
24352: DOUBLE
24353: EQUAL
24354: IFTRUE 24358
24356: GO 24388
24358: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24359: LD_ADDR_VAR 0 3
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 2
24369: PUSH
24370: LD_INT 3
24372: PUSH
24373: LD_INT 4
24375: PUSH
24376: LD_INT 5
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: ST_TO_ADDR
24386: GO 25313
24388: LD_INT 4
24390: DOUBLE
24391: EQUAL
24392: IFTRUE 24396
24394: GO 24422
24396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24397: LD_ADDR_VAR 0 3
24401: PUSH
24402: LD_INT 2
24404: PUSH
24405: LD_INT 3
24407: PUSH
24408: LD_INT 4
24410: PUSH
24411: LD_INT 5
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: ST_TO_ADDR
24420: GO 25313
24422: LD_INT 5
24424: DOUBLE
24425: EQUAL
24426: IFTRUE 24430
24428: GO 24456
24430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24431: LD_ADDR_VAR 0 3
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: LD_INT 3
24441: PUSH
24442: LD_INT 4
24444: PUSH
24445: LD_INT 5
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: ST_TO_ADDR
24454: GO 25313
24456: LD_INT 9
24458: DOUBLE
24459: EQUAL
24460: IFTRUE 24464
24462: GO 24490
24464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24465: LD_ADDR_VAR 0 3
24469: PUSH
24470: LD_INT 2
24472: PUSH
24473: LD_INT 3
24475: PUSH
24476: LD_INT 4
24478: PUSH
24479: LD_INT 5
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: ST_TO_ADDR
24488: GO 25313
24490: LD_INT 7
24492: DOUBLE
24493: EQUAL
24494: IFTRUE 24498
24496: GO 24524
24498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24499: LD_ADDR_VAR 0 3
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: LD_INT 4
24512: PUSH
24513: LD_INT 5
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: ST_TO_ADDR
24522: GO 25313
24524: LD_INT 12
24526: DOUBLE
24527: EQUAL
24528: IFTRUE 24532
24530: GO 24558
24532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24533: LD_ADDR_VAR 0 3
24537: PUSH
24538: LD_INT 2
24540: PUSH
24541: LD_INT 3
24543: PUSH
24544: LD_INT 4
24546: PUSH
24547: LD_INT 5
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: ST_TO_ADDR
24556: GO 25313
24558: LD_INT 13
24560: DOUBLE
24561: EQUAL
24562: IFTRUE 24566
24564: GO 24592
24566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24567: LD_ADDR_VAR 0 3
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: LD_INT 3
24577: PUSH
24578: LD_INT 4
24580: PUSH
24581: LD_INT 5
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: ST_TO_ADDR
24590: GO 25313
24592: LD_INT 14
24594: DOUBLE
24595: EQUAL
24596: IFTRUE 24600
24598: GO 24618
24600: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24601: LD_ADDR_VAR 0 3
24605: PUSH
24606: LD_INT 4
24608: PUSH
24609: LD_INT 5
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: ST_TO_ADDR
24616: GO 25313
24618: LD_INT 6
24620: DOUBLE
24621: EQUAL
24622: IFTRUE 24626
24624: GO 24644
24626: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24627: LD_ADDR_VAR 0 3
24631: PUSH
24632: LD_INT 4
24634: PUSH
24635: LD_INT 5
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: ST_TO_ADDR
24642: GO 25313
24644: LD_INT 10
24646: DOUBLE
24647: EQUAL
24648: IFTRUE 24652
24650: GO 24670
24652: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_INT 4
24660: PUSH
24661: LD_INT 5
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: ST_TO_ADDR
24668: GO 25313
24670: LD_INT 22
24672: DOUBLE
24673: EQUAL
24674: IFTRUE 24678
24676: GO 24704
24678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24679: LD_ADDR_VAR 0 3
24683: PUSH
24684: LD_INT 11
24686: PUSH
24687: LD_INT 12
24689: PUSH
24690: LD_INT 13
24692: PUSH
24693: LD_INT 14
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: ST_TO_ADDR
24702: GO 25313
24704: LD_INT 23
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 24738
24712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24713: LD_ADDR_VAR 0 3
24717: PUSH
24718: LD_INT 11
24720: PUSH
24721: LD_INT 12
24723: PUSH
24724: LD_INT 13
24726: PUSH
24727: LD_INT 14
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: ST_TO_ADDR
24736: GO 25313
24738: LD_INT 24
24740: DOUBLE
24741: EQUAL
24742: IFTRUE 24746
24744: GO 24772
24746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24747: LD_ADDR_VAR 0 3
24751: PUSH
24752: LD_INT 11
24754: PUSH
24755: LD_INT 12
24757: PUSH
24758: LD_INT 13
24760: PUSH
24761: LD_INT 14
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: ST_TO_ADDR
24770: GO 25313
24772: LD_INT 30
24774: DOUBLE
24775: EQUAL
24776: IFTRUE 24780
24778: GO 24806
24780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24781: LD_ADDR_VAR 0 3
24785: PUSH
24786: LD_INT 11
24788: PUSH
24789: LD_INT 12
24791: PUSH
24792: LD_INT 13
24794: PUSH
24795: LD_INT 14
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
24804: GO 25313
24806: LD_INT 25
24808: DOUBLE
24809: EQUAL
24810: IFTRUE 24814
24812: GO 24832
24814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24815: LD_ADDR_VAR 0 3
24819: PUSH
24820: LD_INT 13
24822: PUSH
24823: LD_INT 14
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: ST_TO_ADDR
24830: GO 25313
24832: LD_INT 27
24834: DOUBLE
24835: EQUAL
24836: IFTRUE 24840
24838: GO 24858
24840: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24841: LD_ADDR_VAR 0 3
24845: PUSH
24846: LD_INT 13
24848: PUSH
24849: LD_INT 14
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: ST_TO_ADDR
24856: GO 25313
24858: LD_INT 92
24860: DOUBLE
24861: EQUAL
24862: IFTRUE 24866
24864: GO 24892
24866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24867: LD_ADDR_VAR 0 3
24871: PUSH
24872: LD_INT 11
24874: PUSH
24875: LD_INT 12
24877: PUSH
24878: LD_INT 13
24880: PUSH
24881: LD_INT 14
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: ST_TO_ADDR
24890: GO 25313
24892: LD_INT 28
24894: DOUBLE
24895: EQUAL
24896: IFTRUE 24900
24898: GO 24918
24900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24901: LD_ADDR_VAR 0 3
24905: PUSH
24906: LD_INT 13
24908: PUSH
24909: LD_INT 14
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: ST_TO_ADDR
24916: GO 25313
24918: LD_INT 29
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 24944
24926: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_INT 13
24934: PUSH
24935: LD_INT 14
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: ST_TO_ADDR
24942: GO 25313
24944: LD_INT 31
24946: DOUBLE
24947: EQUAL
24948: IFTRUE 24952
24950: GO 24970
24952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24953: LD_ADDR_VAR 0 3
24957: PUSH
24958: LD_INT 13
24960: PUSH
24961: LD_INT 14
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: ST_TO_ADDR
24968: GO 25313
24970: LD_INT 26
24972: DOUBLE
24973: EQUAL
24974: IFTRUE 24978
24976: GO 24996
24978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24979: LD_ADDR_VAR 0 3
24983: PUSH
24984: LD_INT 13
24986: PUSH
24987: LD_INT 14
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: ST_TO_ADDR
24994: GO 25313
24996: LD_INT 42
24998: DOUBLE
24999: EQUAL
25000: IFTRUE 25004
25002: GO 25030
25004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25005: LD_ADDR_VAR 0 3
25009: PUSH
25010: LD_INT 21
25012: PUSH
25013: LD_INT 22
25015: PUSH
25016: LD_INT 23
25018: PUSH
25019: LD_INT 24
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: ST_TO_ADDR
25028: GO 25313
25030: LD_INT 43
25032: DOUBLE
25033: EQUAL
25034: IFTRUE 25038
25036: GO 25064
25038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25039: LD_ADDR_VAR 0 3
25043: PUSH
25044: LD_INT 21
25046: PUSH
25047: LD_INT 22
25049: PUSH
25050: LD_INT 23
25052: PUSH
25053: LD_INT 24
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: ST_TO_ADDR
25062: GO 25313
25064: LD_INT 44
25066: DOUBLE
25067: EQUAL
25068: IFTRUE 25072
25070: GO 25098
25072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25073: LD_ADDR_VAR 0 3
25077: PUSH
25078: LD_INT 21
25080: PUSH
25081: LD_INT 22
25083: PUSH
25084: LD_INT 23
25086: PUSH
25087: LD_INT 24
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: ST_TO_ADDR
25096: GO 25313
25098: LD_INT 45
25100: DOUBLE
25101: EQUAL
25102: IFTRUE 25106
25104: GO 25132
25106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25107: LD_ADDR_VAR 0 3
25111: PUSH
25112: LD_INT 21
25114: PUSH
25115: LD_INT 22
25117: PUSH
25118: LD_INT 23
25120: PUSH
25121: LD_INT 24
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: ST_TO_ADDR
25130: GO 25313
25132: LD_INT 49
25134: DOUBLE
25135: EQUAL
25136: IFTRUE 25140
25138: GO 25166
25140: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25141: LD_ADDR_VAR 0 3
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 22
25151: PUSH
25152: LD_INT 23
25154: PUSH
25155: LD_INT 24
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: ST_TO_ADDR
25164: GO 25313
25166: LD_INT 51
25168: DOUBLE
25169: EQUAL
25170: IFTRUE 25174
25172: GO 25200
25174: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_INT 21
25182: PUSH
25183: LD_INT 22
25185: PUSH
25186: LD_INT 23
25188: PUSH
25189: LD_INT 24
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
25198: GO 25313
25200: LD_INT 52
25202: DOUBLE
25203: EQUAL
25204: IFTRUE 25208
25206: GO 25234
25208: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: LD_INT 21
25216: PUSH
25217: LD_INT 22
25219: PUSH
25220: LD_INT 23
25222: PUSH
25223: LD_INT 24
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: ST_TO_ADDR
25232: GO 25313
25234: LD_INT 53
25236: DOUBLE
25237: EQUAL
25238: IFTRUE 25242
25240: GO 25260
25242: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25243: LD_ADDR_VAR 0 3
25247: PUSH
25248: LD_INT 23
25250: PUSH
25251: LD_INT 24
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: ST_TO_ADDR
25258: GO 25313
25260: LD_INT 46
25262: DOUBLE
25263: EQUAL
25264: IFTRUE 25268
25266: GO 25286
25268: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25269: LD_ADDR_VAR 0 3
25273: PUSH
25274: LD_INT 23
25276: PUSH
25277: LD_INT 24
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: ST_TO_ADDR
25284: GO 25313
25286: LD_INT 47
25288: DOUBLE
25289: EQUAL
25290: IFTRUE 25294
25292: GO 25312
25294: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25295: LD_ADDR_VAR 0 3
25299: PUSH
25300: LD_INT 23
25302: PUSH
25303: LD_INT 24
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: ST_TO_ADDR
25310: GO 25313
25312: POP
// result := ( chassis in result ) ;
25313: LD_ADDR_VAR 0 3
25317: PUSH
25318: LD_VAR 0 1
25322: PUSH
25323: LD_VAR 0 3
25327: IN
25328: ST_TO_ADDR
// end ;
25329: LD_VAR 0 3
25333: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25334: LD_INT 0
25336: PPUSH
25337: PPUSH
25338: PPUSH
25339: PPUSH
25340: PPUSH
25341: PPUSH
25342: PPUSH
// result := array ;
25343: LD_ADDR_VAR 0 5
25347: PUSH
25348: LD_VAR 0 1
25352: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25353: LD_VAR 0 1
25357: NOT
25358: PUSH
25359: LD_VAR 0 2
25363: NOT
25364: OR
25365: PUSH
25366: LD_VAR 0 3
25370: NOT
25371: OR
25372: PUSH
25373: LD_VAR 0 2
25377: PUSH
25378: LD_VAR 0 1
25382: GREATER
25383: OR
25384: PUSH
25385: LD_VAR 0 3
25389: PUSH
25390: LD_VAR 0 1
25394: GREATER
25395: OR
25396: IFFALSE 25400
// exit ;
25398: GO 25696
// if direction then
25400: LD_VAR 0 4
25404: IFFALSE 25468
// begin d := 1 ;
25406: LD_ADDR_VAR 0 9
25410: PUSH
25411: LD_INT 1
25413: ST_TO_ADDR
// if i_from > i_to then
25414: LD_VAR 0 2
25418: PUSH
25419: LD_VAR 0 3
25423: GREATER
25424: IFFALSE 25450
// length := ( array - i_from ) + i_to else
25426: LD_ADDR_VAR 0 11
25430: PUSH
25431: LD_VAR 0 1
25435: PUSH
25436: LD_VAR 0 2
25440: MINUS
25441: PUSH
25442: LD_VAR 0 3
25446: PLUS
25447: ST_TO_ADDR
25448: GO 25466
// length := i_to - i_from ;
25450: LD_ADDR_VAR 0 11
25454: PUSH
25455: LD_VAR 0 3
25459: PUSH
25460: LD_VAR 0 2
25464: MINUS
25465: ST_TO_ADDR
// end else
25466: GO 25529
// begin d := - 1 ;
25468: LD_ADDR_VAR 0 9
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: ST_TO_ADDR
// if i_from > i_to then
25477: LD_VAR 0 2
25481: PUSH
25482: LD_VAR 0 3
25486: GREATER
25487: IFFALSE 25507
// length := i_from - i_to else
25489: LD_ADDR_VAR 0 11
25493: PUSH
25494: LD_VAR 0 2
25498: PUSH
25499: LD_VAR 0 3
25503: MINUS
25504: ST_TO_ADDR
25505: GO 25529
// length := ( array - i_to ) + i_from ;
25507: LD_ADDR_VAR 0 11
25511: PUSH
25512: LD_VAR 0 1
25516: PUSH
25517: LD_VAR 0 3
25521: MINUS
25522: PUSH
25523: LD_VAR 0 2
25527: PLUS
25528: ST_TO_ADDR
// end ; if not length then
25529: LD_VAR 0 11
25533: NOT
25534: IFFALSE 25538
// exit ;
25536: GO 25696
// tmp := array ;
25538: LD_ADDR_VAR 0 10
25542: PUSH
25543: LD_VAR 0 1
25547: ST_TO_ADDR
// for i = 1 to length do
25548: LD_ADDR_VAR 0 6
25552: PUSH
25553: DOUBLE
25554: LD_INT 1
25556: DEC
25557: ST_TO_ADDR
25558: LD_VAR 0 11
25562: PUSH
25563: FOR_TO
25564: IFFALSE 25684
// begin for j = 1 to array do
25566: LD_ADDR_VAR 0 7
25570: PUSH
25571: DOUBLE
25572: LD_INT 1
25574: DEC
25575: ST_TO_ADDR
25576: LD_VAR 0 1
25580: PUSH
25581: FOR_TO
25582: IFFALSE 25670
// begin k := j + d ;
25584: LD_ADDR_VAR 0 8
25588: PUSH
25589: LD_VAR 0 7
25593: PUSH
25594: LD_VAR 0 9
25598: PLUS
25599: ST_TO_ADDR
// if k > array then
25600: LD_VAR 0 8
25604: PUSH
25605: LD_VAR 0 1
25609: GREATER
25610: IFFALSE 25620
// k := 1 ;
25612: LD_ADDR_VAR 0 8
25616: PUSH
25617: LD_INT 1
25619: ST_TO_ADDR
// if not k then
25620: LD_VAR 0 8
25624: NOT
25625: IFFALSE 25637
// k := array ;
25627: LD_ADDR_VAR 0 8
25631: PUSH
25632: LD_VAR 0 1
25636: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25637: LD_ADDR_VAR 0 10
25641: PUSH
25642: LD_VAR 0 10
25646: PPUSH
25647: LD_VAR 0 8
25651: PPUSH
25652: LD_VAR 0 1
25656: PUSH
25657: LD_VAR 0 7
25661: ARRAY
25662: PPUSH
25663: CALL_OW 1
25667: ST_TO_ADDR
// end ;
25668: GO 25581
25670: POP
25671: POP
// array := tmp ;
25672: LD_ADDR_VAR 0 1
25676: PUSH
25677: LD_VAR 0 10
25681: ST_TO_ADDR
// end ;
25682: GO 25563
25684: POP
25685: POP
// result := array ;
25686: LD_ADDR_VAR 0 5
25690: PUSH
25691: LD_VAR 0 1
25695: ST_TO_ADDR
// end ;
25696: LD_VAR 0 5
25700: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25701: LD_INT 0
25703: PPUSH
25704: PPUSH
// result := 0 ;
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_INT 0
25712: ST_TO_ADDR
// if not array or not value in array then
25713: LD_VAR 0 1
25717: NOT
25718: PUSH
25719: LD_VAR 0 2
25723: PUSH
25724: LD_VAR 0 1
25728: IN
25729: NOT
25730: OR
25731: IFFALSE 25735
// exit ;
25733: GO 25789
// for i = 1 to array do
25735: LD_ADDR_VAR 0 4
25739: PUSH
25740: DOUBLE
25741: LD_INT 1
25743: DEC
25744: ST_TO_ADDR
25745: LD_VAR 0 1
25749: PUSH
25750: FOR_TO
25751: IFFALSE 25787
// if value = array [ i ] then
25753: LD_VAR 0 2
25757: PUSH
25758: LD_VAR 0 1
25762: PUSH
25763: LD_VAR 0 4
25767: ARRAY
25768: EQUAL
25769: IFFALSE 25785
// begin result := i ;
25771: LD_ADDR_VAR 0 3
25775: PUSH
25776: LD_VAR 0 4
25780: ST_TO_ADDR
// exit ;
25781: POP
25782: POP
25783: GO 25789
// end ;
25785: GO 25750
25787: POP
25788: POP
// end ;
25789: LD_VAR 0 3
25793: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25794: LD_INT 0
25796: PPUSH
// vc_chassis := chassis ;
25797: LD_ADDR_OWVAR 37
25801: PUSH
25802: LD_VAR 0 1
25806: ST_TO_ADDR
// vc_engine := engine ;
25807: LD_ADDR_OWVAR 39
25811: PUSH
25812: LD_VAR 0 2
25816: ST_TO_ADDR
// vc_control := control ;
25817: LD_ADDR_OWVAR 38
25821: PUSH
25822: LD_VAR 0 3
25826: ST_TO_ADDR
// vc_weapon := weapon ;
25827: LD_ADDR_OWVAR 40
25831: PUSH
25832: LD_VAR 0 4
25836: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25837: LD_ADDR_OWVAR 41
25841: PUSH
25842: LD_VAR 0 5
25846: ST_TO_ADDR
// end ;
25847: LD_VAR 0 6
25851: RET
// export function WantPlant ( unit ) ; var task ; begin
25852: LD_INT 0
25854: PPUSH
25855: PPUSH
// result := false ;
25856: LD_ADDR_VAR 0 2
25860: PUSH
25861: LD_INT 0
25863: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25864: LD_ADDR_VAR 0 3
25868: PUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 437
25878: ST_TO_ADDR
// if task then
25879: LD_VAR 0 3
25883: IFFALSE 25911
// if task [ 1 ] [ 1 ] = p then
25885: LD_VAR 0 3
25889: PUSH
25890: LD_INT 1
25892: ARRAY
25893: PUSH
25894: LD_INT 1
25896: ARRAY
25897: PUSH
25898: LD_STRING p
25900: EQUAL
25901: IFFALSE 25911
// result := true ;
25903: LD_ADDR_VAR 0 2
25907: PUSH
25908: LD_INT 1
25910: ST_TO_ADDR
// end ;
25911: LD_VAR 0 2
25915: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
25921: PPUSH
// if pos < 1 then
25922: LD_VAR 0 2
25926: PUSH
25927: LD_INT 1
25929: LESS
25930: IFFALSE 25934
// exit ;
25932: GO 26237
// if pos = 1 then
25934: LD_VAR 0 2
25938: PUSH
25939: LD_INT 1
25941: EQUAL
25942: IFFALSE 25975
// result := Replace ( arr , pos [ 1 ] , value ) else
25944: LD_ADDR_VAR 0 4
25948: PUSH
25949: LD_VAR 0 1
25953: PPUSH
25954: LD_VAR 0 2
25958: PUSH
25959: LD_INT 1
25961: ARRAY
25962: PPUSH
25963: LD_VAR 0 3
25967: PPUSH
25968: CALL_OW 1
25972: ST_TO_ADDR
25973: GO 26237
// begin tmp := arr ;
25975: LD_ADDR_VAR 0 6
25979: PUSH
25980: LD_VAR 0 1
25984: ST_TO_ADDR
// s_arr := [ tmp ] ;
25985: LD_ADDR_VAR 0 7
25989: PUSH
25990: LD_VAR 0 6
25994: PUSH
25995: EMPTY
25996: LIST
25997: ST_TO_ADDR
// for i = 1 to pos - 1 do
25998: LD_ADDR_VAR 0 5
26002: PUSH
26003: DOUBLE
26004: LD_INT 1
26006: DEC
26007: ST_TO_ADDR
26008: LD_VAR 0 2
26012: PUSH
26013: LD_INT 1
26015: MINUS
26016: PUSH
26017: FOR_TO
26018: IFFALSE 26063
// begin tmp := tmp [ pos [ i ] ] ;
26020: LD_ADDR_VAR 0 6
26024: PUSH
26025: LD_VAR 0 6
26029: PUSH
26030: LD_VAR 0 2
26034: PUSH
26035: LD_VAR 0 5
26039: ARRAY
26040: ARRAY
26041: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26042: LD_ADDR_VAR 0 7
26046: PUSH
26047: LD_VAR 0 7
26051: PUSH
26052: LD_VAR 0 6
26056: PUSH
26057: EMPTY
26058: LIST
26059: ADD
26060: ST_TO_ADDR
// end ;
26061: GO 26017
26063: POP
26064: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26065: LD_ADDR_VAR 0 6
26069: PUSH
26070: LD_VAR 0 6
26074: PPUSH
26075: LD_VAR 0 2
26079: PUSH
26080: LD_VAR 0 2
26084: ARRAY
26085: PPUSH
26086: LD_VAR 0 3
26090: PPUSH
26091: CALL_OW 1
26095: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26096: LD_ADDR_VAR 0 7
26100: PUSH
26101: LD_VAR 0 7
26105: PPUSH
26106: LD_VAR 0 7
26110: PPUSH
26111: LD_VAR 0 6
26115: PPUSH
26116: CALL_OW 1
26120: ST_TO_ADDR
// for i = s_arr downto 2 do
26121: LD_ADDR_VAR 0 5
26125: PUSH
26126: DOUBLE
26127: LD_VAR 0 7
26131: INC
26132: ST_TO_ADDR
26133: LD_INT 2
26135: PUSH
26136: FOR_DOWNTO
26137: IFFALSE 26221
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26139: LD_ADDR_VAR 0 6
26143: PUSH
26144: LD_VAR 0 7
26148: PUSH
26149: LD_VAR 0 5
26153: PUSH
26154: LD_INT 1
26156: MINUS
26157: ARRAY
26158: PPUSH
26159: LD_VAR 0 2
26163: PUSH
26164: LD_VAR 0 5
26168: PUSH
26169: LD_INT 1
26171: MINUS
26172: ARRAY
26173: PPUSH
26174: LD_VAR 0 7
26178: PUSH
26179: LD_VAR 0 5
26183: ARRAY
26184: PPUSH
26185: CALL_OW 1
26189: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26190: LD_ADDR_VAR 0 7
26194: PUSH
26195: LD_VAR 0 7
26199: PPUSH
26200: LD_VAR 0 5
26204: PUSH
26205: LD_INT 1
26207: MINUS
26208: PPUSH
26209: LD_VAR 0 6
26213: PPUSH
26214: CALL_OW 1
26218: ST_TO_ADDR
// end ;
26219: GO 26136
26221: POP
26222: POP
// result := s_arr [ 1 ] ;
26223: LD_ADDR_VAR 0 4
26227: PUSH
26228: LD_VAR 0 7
26232: PUSH
26233: LD_INT 1
26235: ARRAY
26236: ST_TO_ADDR
// end ; end ;
26237: LD_VAR 0 4
26241: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26242: LD_INT 0
26244: PPUSH
26245: PPUSH
// if not list then
26246: LD_VAR 0 1
26250: NOT
26251: IFFALSE 26255
// exit ;
26253: GO 26346
// i := list [ pos1 ] ;
26255: LD_ADDR_VAR 0 5
26259: PUSH
26260: LD_VAR 0 1
26264: PUSH
26265: LD_VAR 0 2
26269: ARRAY
26270: ST_TO_ADDR
// if not i then
26271: LD_VAR 0 5
26275: NOT
26276: IFFALSE 26280
// exit ;
26278: GO 26346
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26280: LD_ADDR_VAR 0 1
26284: PUSH
26285: LD_VAR 0 1
26289: PPUSH
26290: LD_VAR 0 2
26294: PPUSH
26295: LD_VAR 0 1
26299: PUSH
26300: LD_VAR 0 3
26304: ARRAY
26305: PPUSH
26306: CALL_OW 1
26310: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26311: LD_ADDR_VAR 0 1
26315: PUSH
26316: LD_VAR 0 1
26320: PPUSH
26321: LD_VAR 0 3
26325: PPUSH
26326: LD_VAR 0 5
26330: PPUSH
26331: CALL_OW 1
26335: ST_TO_ADDR
// result := list ;
26336: LD_ADDR_VAR 0 4
26340: PUSH
26341: LD_VAR 0 1
26345: ST_TO_ADDR
// end ;
26346: LD_VAR 0 4
26350: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26351: LD_INT 0
26353: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26354: LD_ADDR_VAR 0 5
26358: PUSH
26359: LD_VAR 0 1
26363: PPUSH
26364: CALL_OW 250
26368: PPUSH
26369: LD_VAR 0 1
26373: PPUSH
26374: CALL_OW 251
26378: PPUSH
26379: LD_VAR 0 2
26383: PPUSH
26384: LD_VAR 0 3
26388: PPUSH
26389: LD_VAR 0 4
26393: PPUSH
26394: CALL 26772 0 5
26398: ST_TO_ADDR
// end ;
26399: LD_VAR 0 5
26403: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26404: LD_INT 0
26406: PPUSH
26407: PPUSH
26408: PPUSH
26409: PPUSH
// if not list or not unit then
26410: LD_VAR 0 2
26414: NOT
26415: PUSH
26416: LD_VAR 0 1
26420: NOT
26421: OR
26422: IFFALSE 26426
// exit ;
26424: GO 26767
// result := [ ] ;
26426: LD_ADDR_VAR 0 5
26430: PUSH
26431: EMPTY
26432: ST_TO_ADDR
// for i in list do
26433: LD_ADDR_VAR 0 6
26437: PUSH
26438: LD_VAR 0 2
26442: PUSH
26443: FOR_IN
26444: IFFALSE 26662
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26446: LD_ADDR_VAR 0 8
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: LD_VAR 0 6
26460: PUSH
26461: LD_INT 1
26463: ARRAY
26464: PPUSH
26465: LD_VAR 0 6
26469: PUSH
26470: LD_INT 2
26472: ARRAY
26473: PPUSH
26474: CALL_OW 297
26478: ST_TO_ADDR
// if not Count ( result ) then
26479: LD_VAR 0 5
26483: PPUSH
26484: CALL 23056 0 1
26488: NOT
26489: IFFALSE 26522
// begin result := Join ( result , [ i , tmp ] ) ;
26491: LD_ADDR_VAR 0 5
26495: PUSH
26496: LD_VAR 0 5
26500: PPUSH
26501: LD_VAR 0 6
26505: PUSH
26506: LD_VAR 0 8
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL 58665 0 2
26519: ST_TO_ADDR
// continue ;
26520: GO 26443
// end ; if result [ result ] [ 2 ] <= tmp then
26522: LD_VAR 0 5
26526: PUSH
26527: LD_VAR 0 5
26531: ARRAY
26532: PUSH
26533: LD_INT 2
26535: ARRAY
26536: PUSH
26537: LD_VAR 0 8
26541: LESSEQUAL
26542: IFFALSE 26575
// result := Join ( result , [ i , tmp ] ) else
26544: LD_ADDR_VAR 0 5
26548: PUSH
26549: LD_VAR 0 5
26553: PPUSH
26554: LD_VAR 0 6
26558: PUSH
26559: LD_VAR 0 8
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PPUSH
26568: CALL 58665 0 2
26572: ST_TO_ADDR
26573: GO 26660
// begin for j := 1 to Count ( result ) do
26575: LD_ADDR_VAR 0 7
26579: PUSH
26580: DOUBLE
26581: LD_INT 1
26583: DEC
26584: ST_TO_ADDR
26585: LD_VAR 0 5
26589: PPUSH
26590: CALL 23056 0 1
26594: PUSH
26595: FOR_TO
26596: IFFALSE 26658
// begin if tmp < result [ j ] [ 2 ] then
26598: LD_VAR 0 8
26602: PUSH
26603: LD_VAR 0 5
26607: PUSH
26608: LD_VAR 0 7
26612: ARRAY
26613: PUSH
26614: LD_INT 2
26616: ARRAY
26617: LESS
26618: IFFALSE 26656
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26620: LD_ADDR_VAR 0 5
26624: PUSH
26625: LD_VAR 0 5
26629: PPUSH
26630: LD_VAR 0 7
26634: PPUSH
26635: LD_VAR 0 6
26639: PUSH
26640: LD_VAR 0 8
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PPUSH
26649: CALL_OW 2
26653: ST_TO_ADDR
// break ;
26654: GO 26658
// end ; end ;
26656: GO 26595
26658: POP
26659: POP
// end ; end ;
26660: GO 26443
26662: POP
26663: POP
// if result and not asc then
26664: LD_VAR 0 5
26668: PUSH
26669: LD_VAR 0 3
26673: NOT
26674: AND
26675: IFFALSE 26692
// result := ReverseArray ( result ) ;
26677: LD_ADDR_VAR 0 5
26681: PUSH
26682: LD_VAR 0 5
26686: PPUSH
26687: CALL 53932 0 1
26691: ST_TO_ADDR
// tmp := [ ] ;
26692: LD_ADDR_VAR 0 8
26696: PUSH
26697: EMPTY
26698: ST_TO_ADDR
// if mode then
26699: LD_VAR 0 4
26703: IFFALSE 26767
// begin for i := 1 to result do
26705: LD_ADDR_VAR 0 6
26709: PUSH
26710: DOUBLE
26711: LD_INT 1
26713: DEC
26714: ST_TO_ADDR
26715: LD_VAR 0 5
26719: PUSH
26720: FOR_TO
26721: IFFALSE 26755
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26723: LD_ADDR_VAR 0 8
26727: PUSH
26728: LD_VAR 0 8
26732: PPUSH
26733: LD_VAR 0 5
26737: PUSH
26738: LD_VAR 0 6
26742: ARRAY
26743: PUSH
26744: LD_INT 1
26746: ARRAY
26747: PPUSH
26748: CALL 58665 0 2
26752: ST_TO_ADDR
26753: GO 26720
26755: POP
26756: POP
// result := tmp ;
26757: LD_ADDR_VAR 0 5
26761: PUSH
26762: LD_VAR 0 8
26766: ST_TO_ADDR
// end ; end ;
26767: LD_VAR 0 5
26771: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26772: LD_INT 0
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
// if not list then
26778: LD_VAR 0 3
26782: NOT
26783: IFFALSE 26787
// exit ;
26785: GO 27175
// result := [ ] ;
26787: LD_ADDR_VAR 0 6
26791: PUSH
26792: EMPTY
26793: ST_TO_ADDR
// for i in list do
26794: LD_ADDR_VAR 0 7
26798: PUSH
26799: LD_VAR 0 3
26803: PUSH
26804: FOR_IN
26805: IFFALSE 27007
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26807: LD_ADDR_VAR 0 9
26811: PUSH
26812: LD_VAR 0 7
26816: PPUSH
26817: LD_VAR 0 1
26821: PPUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: CALL_OW 297
26831: ST_TO_ADDR
// if not result then
26832: LD_VAR 0 6
26836: NOT
26837: IFFALSE 26863
// result := [ [ i , tmp ] ] else
26839: LD_ADDR_VAR 0 6
26843: PUSH
26844: LD_VAR 0 7
26848: PUSH
26849: LD_VAR 0 9
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: ST_TO_ADDR
26861: GO 27005
// begin if result [ result ] [ 2 ] <= tmp then
26863: LD_VAR 0 6
26867: PUSH
26868: LD_VAR 0 6
26872: ARRAY
26873: PUSH
26874: LD_INT 2
26876: ARRAY
26877: PUSH
26878: LD_VAR 0 9
26882: LESSEQUAL
26883: IFFALSE 26925
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26885: LD_ADDR_VAR 0 6
26889: PUSH
26890: LD_VAR 0 6
26894: PPUSH
26895: LD_VAR 0 6
26899: PUSH
26900: LD_INT 1
26902: PLUS
26903: PPUSH
26904: LD_VAR 0 7
26908: PUSH
26909: LD_VAR 0 9
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PPUSH
26918: CALL_OW 2
26922: ST_TO_ADDR
26923: GO 27005
// for j := 1 to result do
26925: LD_ADDR_VAR 0 8
26929: PUSH
26930: DOUBLE
26931: LD_INT 1
26933: DEC
26934: ST_TO_ADDR
26935: LD_VAR 0 6
26939: PUSH
26940: FOR_TO
26941: IFFALSE 27003
// begin if tmp < result [ j ] [ 2 ] then
26943: LD_VAR 0 9
26947: PUSH
26948: LD_VAR 0 6
26952: PUSH
26953: LD_VAR 0 8
26957: ARRAY
26958: PUSH
26959: LD_INT 2
26961: ARRAY
26962: LESS
26963: IFFALSE 27001
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26965: LD_ADDR_VAR 0 6
26969: PUSH
26970: LD_VAR 0 6
26974: PPUSH
26975: LD_VAR 0 8
26979: PPUSH
26980: LD_VAR 0 7
26984: PUSH
26985: LD_VAR 0 9
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PPUSH
26994: CALL_OW 2
26998: ST_TO_ADDR
// break ;
26999: GO 27003
// end ; end ;
27001: GO 26940
27003: POP
27004: POP
// end ; end ;
27005: GO 26804
27007: POP
27008: POP
// if result and not asc then
27009: LD_VAR 0 6
27013: PUSH
27014: LD_VAR 0 4
27018: NOT
27019: AND
27020: IFFALSE 27095
// begin tmp := result ;
27022: LD_ADDR_VAR 0 9
27026: PUSH
27027: LD_VAR 0 6
27031: ST_TO_ADDR
// for i = tmp downto 1 do
27032: LD_ADDR_VAR 0 7
27036: PUSH
27037: DOUBLE
27038: LD_VAR 0 9
27042: INC
27043: ST_TO_ADDR
27044: LD_INT 1
27046: PUSH
27047: FOR_DOWNTO
27048: IFFALSE 27093
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27050: LD_ADDR_VAR 0 6
27054: PUSH
27055: LD_VAR 0 6
27059: PPUSH
27060: LD_VAR 0 9
27064: PUSH
27065: LD_VAR 0 7
27069: MINUS
27070: PUSH
27071: LD_INT 1
27073: PLUS
27074: PPUSH
27075: LD_VAR 0 9
27079: PUSH
27080: LD_VAR 0 7
27084: ARRAY
27085: PPUSH
27086: CALL_OW 1
27090: ST_TO_ADDR
27091: GO 27047
27093: POP
27094: POP
// end ; tmp := [ ] ;
27095: LD_ADDR_VAR 0 9
27099: PUSH
27100: EMPTY
27101: ST_TO_ADDR
// if mode then
27102: LD_VAR 0 5
27106: IFFALSE 27175
// begin for i = 1 to result do
27108: LD_ADDR_VAR 0 7
27112: PUSH
27113: DOUBLE
27114: LD_INT 1
27116: DEC
27117: ST_TO_ADDR
27118: LD_VAR 0 6
27122: PUSH
27123: FOR_TO
27124: IFFALSE 27163
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27126: LD_ADDR_VAR 0 9
27130: PUSH
27131: LD_VAR 0 9
27135: PPUSH
27136: LD_VAR 0 7
27140: PPUSH
27141: LD_VAR 0 6
27145: PUSH
27146: LD_VAR 0 7
27150: ARRAY
27151: PUSH
27152: LD_INT 1
27154: ARRAY
27155: PPUSH
27156: CALL_OW 1
27160: ST_TO_ADDR
27161: GO 27123
27163: POP
27164: POP
// result := tmp ;
27165: LD_ADDR_VAR 0 6
27169: PUSH
27170: LD_VAR 0 9
27174: ST_TO_ADDR
// end ; end ;
27175: LD_VAR 0 6
27179: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27180: LD_INT 0
27182: PPUSH
27183: PPUSH
27184: PPUSH
27185: PPUSH
27186: PPUSH
27187: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27188: LD_ADDR_VAR 0 5
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: EMPTY
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: ST_TO_ADDR
// if not x or not y then
27210: LD_VAR 0 2
27214: NOT
27215: PUSH
27216: LD_VAR 0 3
27220: NOT
27221: OR
27222: IFFALSE 27226
// exit ;
27224: GO 28876
// if not range then
27226: LD_VAR 0 4
27230: NOT
27231: IFFALSE 27241
// range := 10 ;
27233: LD_ADDR_VAR 0 4
27237: PUSH
27238: LD_INT 10
27240: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27241: LD_ADDR_VAR 0 8
27245: PUSH
27246: LD_INT 81
27248: PUSH
27249: LD_VAR 0 1
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 92
27260: PUSH
27261: LD_VAR 0 2
27265: PUSH
27266: LD_VAR 0 3
27270: PUSH
27271: LD_VAR 0 4
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 3
27284: PUSH
27285: LD_INT 21
27287: PUSH
27288: LD_INT 3
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: PPUSH
27304: CALL_OW 69
27308: ST_TO_ADDR
// if not tmp then
27309: LD_VAR 0 8
27313: NOT
27314: IFFALSE 27318
// exit ;
27316: GO 28876
// for i in tmp do
27318: LD_ADDR_VAR 0 6
27322: PUSH
27323: LD_VAR 0 8
27327: PUSH
27328: FOR_IN
27329: IFFALSE 28851
// begin points := [ 0 , 0 , 0 ] ;
27331: LD_ADDR_VAR 0 9
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: ST_TO_ADDR
// bpoints := 1 ;
27350: LD_ADDR_VAR 0 10
27354: PUSH
27355: LD_INT 1
27357: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27358: LD_VAR 0 6
27362: PPUSH
27363: CALL_OW 247
27367: PUSH
27368: LD_INT 1
27370: DOUBLE
27371: EQUAL
27372: IFTRUE 27376
27374: GO 27954
27376: POP
// begin if GetClass ( i ) = 1 then
27377: LD_VAR 0 6
27381: PPUSH
27382: CALL_OW 257
27386: PUSH
27387: LD_INT 1
27389: EQUAL
27390: IFFALSE 27411
// points := [ 10 , 5 , 3 ] ;
27392: LD_ADDR_VAR 0 9
27396: PUSH
27397: LD_INT 10
27399: PUSH
27400: LD_INT 5
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27411: LD_VAR 0 6
27415: PPUSH
27416: CALL_OW 257
27420: PUSH
27421: LD_INT 2
27423: PUSH
27424: LD_INT 3
27426: PUSH
27427: LD_INT 4
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: IN
27435: IFFALSE 27456
// points := [ 3 , 2 , 1 ] ;
27437: LD_ADDR_VAR 0 9
27441: PUSH
27442: LD_INT 3
27444: PUSH
27445: LD_INT 2
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: LIST
27455: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27456: LD_VAR 0 6
27460: PPUSH
27461: CALL_OW 257
27465: PUSH
27466: LD_INT 5
27468: EQUAL
27469: IFFALSE 27490
// points := [ 130 , 5 , 2 ] ;
27471: LD_ADDR_VAR 0 9
27475: PUSH
27476: LD_INT 130
27478: PUSH
27479: LD_INT 5
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27490: LD_VAR 0 6
27494: PPUSH
27495: CALL_OW 257
27499: PUSH
27500: LD_INT 8
27502: EQUAL
27503: IFFALSE 27524
// points := [ 35 , 35 , 30 ] ;
27505: LD_ADDR_VAR 0 9
27509: PUSH
27510: LD_INT 35
27512: PUSH
27513: LD_INT 35
27515: PUSH
27516: LD_INT 30
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27524: LD_VAR 0 6
27528: PPUSH
27529: CALL_OW 257
27533: PUSH
27534: LD_INT 9
27536: EQUAL
27537: IFFALSE 27558
// points := [ 20 , 55 , 40 ] ;
27539: LD_ADDR_VAR 0 9
27543: PUSH
27544: LD_INT 20
27546: PUSH
27547: LD_INT 55
27549: PUSH
27550: LD_INT 40
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27558: LD_VAR 0 6
27562: PPUSH
27563: CALL_OW 257
27567: PUSH
27568: LD_INT 12
27570: PUSH
27571: LD_INT 16
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: IN
27578: IFFALSE 27599
// points := [ 5 , 3 , 2 ] ;
27580: LD_ADDR_VAR 0 9
27584: PUSH
27585: LD_INT 5
27587: PUSH
27588: LD_INT 3
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27599: LD_VAR 0 6
27603: PPUSH
27604: CALL_OW 257
27608: PUSH
27609: LD_INT 17
27611: EQUAL
27612: IFFALSE 27633
// points := [ 100 , 50 , 75 ] ;
27614: LD_ADDR_VAR 0 9
27618: PUSH
27619: LD_INT 100
27621: PUSH
27622: LD_INT 50
27624: PUSH
27625: LD_INT 75
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27633: LD_VAR 0 6
27637: PPUSH
27638: CALL_OW 257
27642: PUSH
27643: LD_INT 15
27645: EQUAL
27646: IFFALSE 27667
// points := [ 10 , 5 , 3 ] ;
27648: LD_ADDR_VAR 0 9
27652: PUSH
27653: LD_INT 10
27655: PUSH
27656: LD_INT 5
27658: PUSH
27659: LD_INT 3
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27667: LD_VAR 0 6
27671: PPUSH
27672: CALL_OW 257
27676: PUSH
27677: LD_INT 14
27679: EQUAL
27680: IFFALSE 27701
// points := [ 10 , 0 , 0 ] ;
27682: LD_ADDR_VAR 0 9
27686: PUSH
27687: LD_INT 10
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: LIST
27700: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27701: LD_VAR 0 6
27705: PPUSH
27706: CALL_OW 257
27710: PUSH
27711: LD_INT 11
27713: EQUAL
27714: IFFALSE 27735
// points := [ 30 , 10 , 5 ] ;
27716: LD_ADDR_VAR 0 9
27720: PUSH
27721: LD_INT 30
27723: PUSH
27724: LD_INT 10
27726: PUSH
27727: LD_INT 5
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27735: LD_VAR 0 1
27739: PPUSH
27740: LD_INT 5
27742: PPUSH
27743: CALL_OW 321
27747: PUSH
27748: LD_INT 2
27750: EQUAL
27751: IFFALSE 27768
// bpoints := bpoints * 1.8 ;
27753: LD_ADDR_VAR 0 10
27757: PUSH
27758: LD_VAR 0 10
27762: PUSH
27763: LD_REAL  1.80000000000000E+0000
27766: MUL
27767: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27768: LD_VAR 0 6
27772: PPUSH
27773: CALL_OW 257
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: LD_INT 4
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: IN
27796: PUSH
27797: LD_VAR 0 1
27801: PPUSH
27802: LD_INT 51
27804: PPUSH
27805: CALL_OW 321
27809: PUSH
27810: LD_INT 2
27812: EQUAL
27813: AND
27814: IFFALSE 27831
// bpoints := bpoints * 1.2 ;
27816: LD_ADDR_VAR 0 10
27820: PUSH
27821: LD_VAR 0 10
27825: PUSH
27826: LD_REAL  1.20000000000000E+0000
27829: MUL
27830: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27831: LD_VAR 0 6
27835: PPUSH
27836: CALL_OW 257
27840: PUSH
27841: LD_INT 5
27843: PUSH
27844: LD_INT 7
27846: PUSH
27847: LD_INT 9
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: IN
27855: PUSH
27856: LD_VAR 0 1
27860: PPUSH
27861: LD_INT 52
27863: PPUSH
27864: CALL_OW 321
27868: PUSH
27869: LD_INT 2
27871: EQUAL
27872: AND
27873: IFFALSE 27890
// bpoints := bpoints * 1.5 ;
27875: LD_ADDR_VAR 0 10
27879: PUSH
27880: LD_VAR 0 10
27884: PUSH
27885: LD_REAL  1.50000000000000E+0000
27888: MUL
27889: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27890: LD_VAR 0 1
27894: PPUSH
27895: LD_INT 66
27897: PPUSH
27898: CALL_OW 321
27902: PUSH
27903: LD_INT 2
27905: EQUAL
27906: IFFALSE 27923
// bpoints := bpoints * 1.1 ;
27908: LD_ADDR_VAR 0 10
27912: PUSH
27913: LD_VAR 0 10
27917: PUSH
27918: LD_REAL  1.10000000000000E+0000
27921: MUL
27922: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27923: LD_ADDR_VAR 0 10
27927: PUSH
27928: LD_VAR 0 10
27932: PUSH
27933: LD_VAR 0 6
27937: PPUSH
27938: LD_INT 1
27940: PPUSH
27941: CALL_OW 259
27945: PUSH
27946: LD_REAL  1.15000000000000E+0000
27949: MUL
27950: MUL
27951: ST_TO_ADDR
// end ; unit_vehicle :
27952: GO 28780
27954: LD_INT 2
27956: DOUBLE
27957: EQUAL
27958: IFTRUE 27962
27960: GO 28768
27962: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27963: LD_VAR 0 6
27967: PPUSH
27968: CALL_OW 264
27972: PUSH
27973: LD_INT 2
27975: PUSH
27976: LD_INT 42
27978: PUSH
27979: LD_INT 24
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: LIST
27986: IN
27987: IFFALSE 28008
// points := [ 25 , 5 , 3 ] ;
27989: LD_ADDR_VAR 0 9
27993: PUSH
27994: LD_INT 25
27996: PUSH
27997: LD_INT 5
27999: PUSH
28000: LD_INT 3
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28008: LD_VAR 0 6
28012: PPUSH
28013: CALL_OW 264
28017: PUSH
28018: LD_INT 4
28020: PUSH
28021: LD_INT 43
28023: PUSH
28024: LD_INT 25
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: IN
28032: IFFALSE 28053
// points := [ 40 , 15 , 5 ] ;
28034: LD_ADDR_VAR 0 9
28038: PUSH
28039: LD_INT 40
28041: PUSH
28042: LD_INT 15
28044: PUSH
28045: LD_INT 5
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28053: LD_VAR 0 6
28057: PPUSH
28058: CALL_OW 264
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: LD_INT 23
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: IN
28073: IFFALSE 28094
// points := [ 7 , 25 , 8 ] ;
28075: LD_ADDR_VAR 0 9
28079: PUSH
28080: LD_INT 7
28082: PUSH
28083: LD_INT 25
28085: PUSH
28086: LD_INT 8
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28094: LD_VAR 0 6
28098: PPUSH
28099: CALL_OW 264
28103: PUSH
28104: LD_INT 5
28106: PUSH
28107: LD_INT 27
28109: PUSH
28110: LD_INT 44
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: IN
28118: IFFALSE 28139
// points := [ 14 , 50 , 16 ] ;
28120: LD_ADDR_VAR 0 9
28124: PUSH
28125: LD_INT 14
28127: PUSH
28128: LD_INT 50
28130: PUSH
28131: LD_INT 16
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: LIST
28138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28139: LD_VAR 0 6
28143: PPUSH
28144: CALL_OW 264
28148: PUSH
28149: LD_INT 6
28151: PUSH
28152: LD_INT 46
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: IN
28159: IFFALSE 28180
// points := [ 32 , 120 , 70 ] ;
28161: LD_ADDR_VAR 0 9
28165: PUSH
28166: LD_INT 32
28168: PUSH
28169: LD_INT 120
28171: PUSH
28172: LD_INT 70
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28180: LD_VAR 0 6
28184: PPUSH
28185: CALL_OW 264
28189: PUSH
28190: LD_INT 7
28192: PUSH
28193: LD_INT 28
28195: PUSH
28196: LD_INT 45
28198: PUSH
28199: LD_INT 92
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: IN
28208: IFFALSE 28229
// points := [ 35 , 20 , 45 ] ;
28210: LD_ADDR_VAR 0 9
28214: PUSH
28215: LD_INT 35
28217: PUSH
28218: LD_INT 20
28220: PUSH
28221: LD_INT 45
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28229: LD_VAR 0 6
28233: PPUSH
28234: CALL_OW 264
28238: PUSH
28239: LD_INT 47
28241: PUSH
28242: EMPTY
28243: LIST
28244: IN
28245: IFFALSE 28266
// points := [ 67 , 45 , 75 ] ;
28247: LD_ADDR_VAR 0 9
28251: PUSH
28252: LD_INT 67
28254: PUSH
28255: LD_INT 45
28257: PUSH
28258: LD_INT 75
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28266: LD_VAR 0 6
28270: PPUSH
28271: CALL_OW 264
28275: PUSH
28276: LD_INT 26
28278: PUSH
28279: EMPTY
28280: LIST
28281: IN
28282: IFFALSE 28303
// points := [ 120 , 30 , 80 ] ;
28284: LD_ADDR_VAR 0 9
28288: PUSH
28289: LD_INT 120
28291: PUSH
28292: LD_INT 30
28294: PUSH
28295: LD_INT 80
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28303: LD_VAR 0 6
28307: PPUSH
28308: CALL_OW 264
28312: PUSH
28313: LD_INT 22
28315: PUSH
28316: EMPTY
28317: LIST
28318: IN
28319: IFFALSE 28340
// points := [ 40 , 1 , 1 ] ;
28321: LD_ADDR_VAR 0 9
28325: PUSH
28326: LD_INT 40
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28340: LD_VAR 0 6
28344: PPUSH
28345: CALL_OW 264
28349: PUSH
28350: LD_INT 29
28352: PUSH
28353: EMPTY
28354: LIST
28355: IN
28356: IFFALSE 28377
// points := [ 70 , 200 , 400 ] ;
28358: LD_ADDR_VAR 0 9
28362: PUSH
28363: LD_INT 70
28365: PUSH
28366: LD_INT 200
28368: PUSH
28369: LD_INT 400
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: LIST
28376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28377: LD_VAR 0 6
28381: PPUSH
28382: CALL_OW 264
28386: PUSH
28387: LD_INT 14
28389: PUSH
28390: LD_INT 53
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: IN
28397: IFFALSE 28418
// points := [ 40 , 10 , 20 ] ;
28399: LD_ADDR_VAR 0 9
28403: PUSH
28404: LD_INT 40
28406: PUSH
28407: LD_INT 10
28409: PUSH
28410: LD_INT 20
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28418: LD_VAR 0 6
28422: PPUSH
28423: CALL_OW 264
28427: PUSH
28428: LD_INT 9
28430: PUSH
28431: EMPTY
28432: LIST
28433: IN
28434: IFFALSE 28455
// points := [ 5 , 70 , 20 ] ;
28436: LD_ADDR_VAR 0 9
28440: PUSH
28441: LD_INT 5
28443: PUSH
28444: LD_INT 70
28446: PUSH
28447: LD_INT 20
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28455: LD_VAR 0 6
28459: PPUSH
28460: CALL_OW 264
28464: PUSH
28465: LD_INT 10
28467: PUSH
28468: EMPTY
28469: LIST
28470: IN
28471: IFFALSE 28492
// points := [ 35 , 110 , 70 ] ;
28473: LD_ADDR_VAR 0 9
28477: PUSH
28478: LD_INT 35
28480: PUSH
28481: LD_INT 110
28483: PUSH
28484: LD_INT 70
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28492: LD_VAR 0 6
28496: PPUSH
28497: CALL_OW 265
28501: PUSH
28502: LD_INT 25
28504: EQUAL
28505: IFFALSE 28526
// points := [ 80 , 65 , 100 ] ;
28507: LD_ADDR_VAR 0 9
28511: PUSH
28512: LD_INT 80
28514: PUSH
28515: LD_INT 65
28517: PUSH
28518: LD_INT 100
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28526: LD_VAR 0 6
28530: PPUSH
28531: CALL_OW 263
28535: PUSH
28536: LD_INT 1
28538: EQUAL
28539: IFFALSE 28574
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28541: LD_ADDR_VAR 0 10
28545: PUSH
28546: LD_VAR 0 10
28550: PUSH
28551: LD_VAR 0 6
28555: PPUSH
28556: CALL_OW 311
28560: PPUSH
28561: LD_INT 3
28563: PPUSH
28564: CALL_OW 259
28568: PUSH
28569: LD_INT 4
28571: MUL
28572: MUL
28573: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28574: LD_VAR 0 6
28578: PPUSH
28579: CALL_OW 263
28583: PUSH
28584: LD_INT 2
28586: EQUAL
28587: IFFALSE 28638
// begin j := IsControledBy ( i ) ;
28589: LD_ADDR_VAR 0 7
28593: PUSH
28594: LD_VAR 0 6
28598: PPUSH
28599: CALL_OW 312
28603: ST_TO_ADDR
// if j then
28604: LD_VAR 0 7
28608: IFFALSE 28638
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28610: LD_ADDR_VAR 0 10
28614: PUSH
28615: LD_VAR 0 10
28619: PUSH
28620: LD_VAR 0 7
28624: PPUSH
28625: LD_INT 3
28627: PPUSH
28628: CALL_OW 259
28632: PUSH
28633: LD_INT 3
28635: MUL
28636: MUL
28637: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28638: LD_VAR 0 6
28642: PPUSH
28643: CALL_OW 264
28647: PUSH
28648: LD_INT 5
28650: PUSH
28651: LD_INT 6
28653: PUSH
28654: LD_INT 46
28656: PUSH
28657: LD_INT 44
28659: PUSH
28660: LD_INT 47
28662: PUSH
28663: LD_INT 45
28665: PUSH
28666: LD_INT 28
28668: PUSH
28669: LD_INT 7
28671: PUSH
28672: LD_INT 27
28674: PUSH
28675: LD_INT 29
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: IN
28690: PUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: LD_INT 52
28698: PPUSH
28699: CALL_OW 321
28703: PUSH
28704: LD_INT 2
28706: EQUAL
28707: AND
28708: IFFALSE 28725
// bpoints := bpoints * 1.2 ;
28710: LD_ADDR_VAR 0 10
28714: PUSH
28715: LD_VAR 0 10
28719: PUSH
28720: LD_REAL  1.20000000000000E+0000
28723: MUL
28724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28725: LD_VAR 0 6
28729: PPUSH
28730: CALL_OW 264
28734: PUSH
28735: LD_INT 6
28737: PUSH
28738: LD_INT 46
28740: PUSH
28741: LD_INT 47
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: IN
28749: IFFALSE 28766
// bpoints := bpoints * 1.2 ;
28751: LD_ADDR_VAR 0 10
28755: PUSH
28756: LD_VAR 0 10
28760: PUSH
28761: LD_REAL  1.20000000000000E+0000
28764: MUL
28765: ST_TO_ADDR
// end ; unit_building :
28766: GO 28780
28768: LD_INT 3
28770: DOUBLE
28771: EQUAL
28772: IFTRUE 28776
28774: GO 28779
28776: POP
// ; end ;
28777: GO 28780
28779: POP
// for j = 1 to 3 do
28780: LD_ADDR_VAR 0 7
28784: PUSH
28785: DOUBLE
28786: LD_INT 1
28788: DEC
28789: ST_TO_ADDR
28790: LD_INT 3
28792: PUSH
28793: FOR_TO
28794: IFFALSE 28847
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28796: LD_ADDR_VAR 0 5
28800: PUSH
28801: LD_VAR 0 5
28805: PPUSH
28806: LD_VAR 0 7
28810: PPUSH
28811: LD_VAR 0 5
28815: PUSH
28816: LD_VAR 0 7
28820: ARRAY
28821: PUSH
28822: LD_VAR 0 9
28826: PUSH
28827: LD_VAR 0 7
28831: ARRAY
28832: PUSH
28833: LD_VAR 0 10
28837: MUL
28838: PLUS
28839: PPUSH
28840: CALL_OW 1
28844: ST_TO_ADDR
28845: GO 28793
28847: POP
28848: POP
// end ;
28849: GO 27328
28851: POP
28852: POP
// result := Replace ( result , 4 , tmp ) ;
28853: LD_ADDR_VAR 0 5
28857: PUSH
28858: LD_VAR 0 5
28862: PPUSH
28863: LD_INT 4
28865: PPUSH
28866: LD_VAR 0 8
28870: PPUSH
28871: CALL_OW 1
28875: ST_TO_ADDR
// end ;
28876: LD_VAR 0 5
28880: RET
// export function DangerAtRange ( unit , range ) ; begin
28881: LD_INT 0
28883: PPUSH
// if not unit then
28884: LD_VAR 0 1
28888: NOT
28889: IFFALSE 28893
// exit ;
28891: GO 28938
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28893: LD_ADDR_VAR 0 3
28897: PUSH
28898: LD_VAR 0 1
28902: PPUSH
28903: CALL_OW 255
28907: PPUSH
28908: LD_VAR 0 1
28912: PPUSH
28913: CALL_OW 250
28917: PPUSH
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 251
28927: PPUSH
28928: LD_VAR 0 2
28932: PPUSH
28933: CALL 27180 0 4
28937: ST_TO_ADDR
// end ;
28938: LD_VAR 0 3
28942: RET
// export function DangerInArea ( side , area ) ; begin
28943: LD_INT 0
28945: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28946: LD_ADDR_VAR 0 3
28950: PUSH
28951: LD_VAR 0 2
28955: PPUSH
28956: LD_INT 81
28958: PUSH
28959: LD_VAR 0 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PPUSH
28968: CALL_OW 70
28972: ST_TO_ADDR
// end ;
28973: LD_VAR 0 3
28977: RET
// export function IsExtension ( b ) ; begin
28978: LD_INT 0
28980: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28981: LD_ADDR_VAR 0 2
28985: PUSH
28986: LD_VAR 0 1
28990: PUSH
28991: LD_INT 23
28993: PUSH
28994: LD_INT 20
28996: PUSH
28997: LD_INT 22
28999: PUSH
29000: LD_INT 17
29002: PUSH
29003: LD_INT 24
29005: PUSH
29006: LD_INT 21
29008: PUSH
29009: LD_INT 19
29011: PUSH
29012: LD_INT 16
29014: PUSH
29015: LD_INT 25
29017: PUSH
29018: LD_INT 18
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: IN
29033: ST_TO_ADDR
// end ;
29034: LD_VAR 0 2
29038: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
29043: PPUSH
// result := [ ] ;
29044: LD_ADDR_VAR 0 4
29048: PUSH
29049: EMPTY
29050: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29051: LD_ADDR_VAR 0 5
29055: PUSH
29056: LD_VAR 0 2
29060: PPUSH
29061: LD_INT 21
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PPUSH
29071: CALL_OW 70
29075: ST_TO_ADDR
// if not tmp then
29076: LD_VAR 0 5
29080: NOT
29081: IFFALSE 29085
// exit ;
29083: GO 29149
// if checkLink then
29085: LD_VAR 0 3
29089: IFFALSE 29139
// begin for i in tmp do
29091: LD_ADDR_VAR 0 6
29095: PUSH
29096: LD_VAR 0 5
29100: PUSH
29101: FOR_IN
29102: IFFALSE 29137
// if GetBase ( i ) <> base then
29104: LD_VAR 0 6
29108: PPUSH
29109: CALL_OW 274
29113: PUSH
29114: LD_VAR 0 1
29118: NONEQUAL
29119: IFFALSE 29135
// ComLinkToBase ( base , i ) ;
29121: LD_VAR 0 1
29125: PPUSH
29126: LD_VAR 0 6
29130: PPUSH
29131: CALL_OW 169
29135: GO 29101
29137: POP
29138: POP
// end ; result := tmp ;
29139: LD_ADDR_VAR 0 4
29143: PUSH
29144: LD_VAR 0 5
29148: ST_TO_ADDR
// end ;
29149: LD_VAR 0 4
29153: RET
// export function ComComplete ( units , b ) ; var i ; begin
29154: LD_INT 0
29156: PPUSH
29157: PPUSH
// if not units then
29158: LD_VAR 0 1
29162: NOT
29163: IFFALSE 29167
// exit ;
29165: GO 29257
// for i in units do
29167: LD_ADDR_VAR 0 4
29171: PUSH
29172: LD_VAR 0 1
29176: PUSH
29177: FOR_IN
29178: IFFALSE 29255
// if BuildingStatus ( b ) = bs_build then
29180: LD_VAR 0 2
29184: PPUSH
29185: CALL_OW 461
29189: PUSH
29190: LD_INT 1
29192: EQUAL
29193: IFFALSE 29253
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29195: LD_VAR 0 4
29199: PPUSH
29200: LD_STRING h
29202: PUSH
29203: LD_VAR 0 2
29207: PPUSH
29208: CALL_OW 250
29212: PUSH
29213: LD_VAR 0 2
29217: PPUSH
29218: CALL_OW 251
29222: PUSH
29223: LD_VAR 0 2
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: PPUSH
29249: CALL_OW 446
29253: GO 29177
29255: POP
29256: POP
// end ;
29257: LD_VAR 0 3
29261: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29262: LD_INT 0
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29270: LD_VAR 0 1
29274: NOT
29275: PUSH
29276: LD_VAR 0 1
29280: PPUSH
29281: CALL_OW 263
29285: PUSH
29286: LD_INT 2
29288: NONEQUAL
29289: OR
29290: IFFALSE 29294
// exit ;
29292: GO 29610
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29294: LD_ADDR_VAR 0 6
29298: PUSH
29299: LD_INT 22
29301: PUSH
29302: LD_VAR 0 1
29306: PPUSH
29307: CALL_OW 255
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: LD_INT 30
29321: PUSH
29322: LD_INT 36
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 34
29331: PUSH
29332: LD_INT 31
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL_OW 69
29352: ST_TO_ADDR
// if not tmp then
29353: LD_VAR 0 6
29357: NOT
29358: IFFALSE 29362
// exit ;
29360: GO 29610
// result := [ ] ;
29362: LD_ADDR_VAR 0 2
29366: PUSH
29367: EMPTY
29368: ST_TO_ADDR
// for i in tmp do
29369: LD_ADDR_VAR 0 3
29373: PUSH
29374: LD_VAR 0 6
29378: PUSH
29379: FOR_IN
29380: IFFALSE 29451
// begin t := UnitsInside ( i ) ;
29382: LD_ADDR_VAR 0 4
29386: PUSH
29387: LD_VAR 0 3
29391: PPUSH
29392: CALL_OW 313
29396: ST_TO_ADDR
// if t then
29397: LD_VAR 0 4
29401: IFFALSE 29449
// for j in t do
29403: LD_ADDR_VAR 0 7
29407: PUSH
29408: LD_VAR 0 4
29412: PUSH
29413: FOR_IN
29414: IFFALSE 29447
// result := Replace ( result , result + 1 , j ) ;
29416: LD_ADDR_VAR 0 2
29420: PUSH
29421: LD_VAR 0 2
29425: PPUSH
29426: LD_VAR 0 2
29430: PUSH
29431: LD_INT 1
29433: PLUS
29434: PPUSH
29435: LD_VAR 0 7
29439: PPUSH
29440: CALL_OW 1
29444: ST_TO_ADDR
29445: GO 29413
29447: POP
29448: POP
// end ;
29449: GO 29379
29451: POP
29452: POP
// if not result then
29453: LD_VAR 0 2
29457: NOT
29458: IFFALSE 29462
// exit ;
29460: GO 29610
// mech := result [ 1 ] ;
29462: LD_ADDR_VAR 0 5
29466: PUSH
29467: LD_VAR 0 2
29471: PUSH
29472: LD_INT 1
29474: ARRAY
29475: ST_TO_ADDR
// if result > 1 then
29476: LD_VAR 0 2
29480: PUSH
29481: LD_INT 1
29483: GREATER
29484: IFFALSE 29596
// begin for i = 2 to result do
29486: LD_ADDR_VAR 0 3
29490: PUSH
29491: DOUBLE
29492: LD_INT 2
29494: DEC
29495: ST_TO_ADDR
29496: LD_VAR 0 2
29500: PUSH
29501: FOR_TO
29502: IFFALSE 29594
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29504: LD_ADDR_VAR 0 4
29508: PUSH
29509: LD_VAR 0 2
29513: PUSH
29514: LD_VAR 0 3
29518: ARRAY
29519: PPUSH
29520: LD_INT 3
29522: PPUSH
29523: CALL_OW 259
29527: PUSH
29528: LD_VAR 0 2
29532: PUSH
29533: LD_VAR 0 3
29537: ARRAY
29538: PPUSH
29539: CALL_OW 432
29543: MINUS
29544: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29545: LD_VAR 0 4
29549: PUSH
29550: LD_VAR 0 5
29554: PPUSH
29555: LD_INT 3
29557: PPUSH
29558: CALL_OW 259
29562: PUSH
29563: LD_VAR 0 5
29567: PPUSH
29568: CALL_OW 432
29572: MINUS
29573: GREATEREQUAL
29574: IFFALSE 29592
// mech := result [ i ] ;
29576: LD_ADDR_VAR 0 5
29580: PUSH
29581: LD_VAR 0 2
29585: PUSH
29586: LD_VAR 0 3
29590: ARRAY
29591: ST_TO_ADDR
// end ;
29592: GO 29501
29594: POP
29595: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29596: LD_VAR 0 1
29600: PPUSH
29601: LD_VAR 0 5
29605: PPUSH
29606: CALL_OW 135
// end ;
29610: LD_VAR 0 2
29614: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29615: LD_INT 0
29617: PPUSH
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
// result := [ ] ;
29630: LD_ADDR_VAR 0 7
29634: PUSH
29635: EMPTY
29636: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29637: LD_VAR 0 1
29641: PPUSH
29642: CALL_OW 266
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: IN
29657: NOT
29658: IFFALSE 29662
// exit ;
29660: GO 31296
// if name then
29662: LD_VAR 0 3
29666: IFFALSE 29682
// SetBName ( base_dep , name ) ;
29668: LD_VAR 0 1
29672: PPUSH
29673: LD_VAR 0 3
29677: PPUSH
29678: CALL_OW 500
// base := GetBase ( base_dep ) ;
29682: LD_ADDR_VAR 0 15
29686: PUSH
29687: LD_VAR 0 1
29691: PPUSH
29692: CALL_OW 274
29696: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29697: LD_ADDR_VAR 0 16
29701: PUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 255
29711: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29712: LD_ADDR_VAR 0 17
29716: PUSH
29717: LD_VAR 0 1
29721: PPUSH
29722: CALL_OW 248
29726: ST_TO_ADDR
// if sources then
29727: LD_VAR 0 5
29731: IFFALSE 29778
// for i = 1 to 3 do
29733: LD_ADDR_VAR 0 8
29737: PUSH
29738: DOUBLE
29739: LD_INT 1
29741: DEC
29742: ST_TO_ADDR
29743: LD_INT 3
29745: PUSH
29746: FOR_TO
29747: IFFALSE 29776
// AddResourceType ( base , i , sources [ i ] ) ;
29749: LD_VAR 0 15
29753: PPUSH
29754: LD_VAR 0 8
29758: PPUSH
29759: LD_VAR 0 5
29763: PUSH
29764: LD_VAR 0 8
29768: ARRAY
29769: PPUSH
29770: CALL_OW 276
29774: GO 29746
29776: POP
29777: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29778: LD_ADDR_VAR 0 18
29782: PUSH
29783: LD_VAR 0 15
29787: PPUSH
29788: LD_VAR 0 2
29792: PPUSH
29793: LD_INT 1
29795: PPUSH
29796: CALL 29039 0 3
29800: ST_TO_ADDR
// InitHc ;
29801: CALL_OW 19
// InitUc ;
29805: CALL_OW 18
// uc_side := side ;
29809: LD_ADDR_OWVAR 20
29813: PUSH
29814: LD_VAR 0 16
29818: ST_TO_ADDR
// uc_nation := nation ;
29819: LD_ADDR_OWVAR 21
29823: PUSH
29824: LD_VAR 0 17
29828: ST_TO_ADDR
// if buildings then
29829: LD_VAR 0 18
29833: IFFALSE 31155
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29835: LD_ADDR_VAR 0 19
29839: PUSH
29840: LD_VAR 0 18
29844: PPUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 30
29850: PUSH
29851: LD_INT 29
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 30
29860: PUSH
29861: LD_INT 30
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: PPUSH
29873: CALL_OW 72
29877: ST_TO_ADDR
// if tmp then
29878: LD_VAR 0 19
29882: IFFALSE 29930
// for i in tmp do
29884: LD_ADDR_VAR 0 8
29888: PUSH
29889: LD_VAR 0 19
29893: PUSH
29894: FOR_IN
29895: IFFALSE 29928
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29897: LD_VAR 0 8
29901: PPUSH
29902: CALL_OW 250
29906: PPUSH
29907: LD_VAR 0 8
29911: PPUSH
29912: CALL_OW 251
29916: PPUSH
29917: LD_VAR 0 16
29921: PPUSH
29922: CALL_OW 441
29926: GO 29894
29928: POP
29929: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29930: LD_VAR 0 18
29934: PPUSH
29935: LD_INT 2
29937: PUSH
29938: LD_INT 30
29940: PUSH
29941: LD_INT 32
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 30
29950: PUSH
29951: LD_INT 33
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: PPUSH
29963: CALL_OW 72
29967: IFFALSE 30055
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29969: LD_ADDR_VAR 0 8
29973: PUSH
29974: LD_VAR 0 18
29978: PPUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 30
29984: PUSH
29985: LD_INT 32
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 30
29994: PUSH
29995: LD_INT 33
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: PPUSH
30007: CALL_OW 72
30011: PUSH
30012: FOR_IN
30013: IFFALSE 30053
// begin if not GetBWeapon ( i ) then
30015: LD_VAR 0 8
30019: PPUSH
30020: CALL_OW 269
30024: NOT
30025: IFFALSE 30051
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30027: LD_VAR 0 8
30031: PPUSH
30032: LD_VAR 0 8
30036: PPUSH
30037: LD_VAR 0 2
30041: PPUSH
30042: CALL 31301 0 2
30046: PPUSH
30047: CALL_OW 431
// end ;
30051: GO 30012
30053: POP
30054: POP
// end ; for i = 1 to personel do
30055: LD_ADDR_VAR 0 8
30059: PUSH
30060: DOUBLE
30061: LD_INT 1
30063: DEC
30064: ST_TO_ADDR
30065: LD_VAR 0 6
30069: PUSH
30070: FOR_TO
30071: IFFALSE 31135
// begin if i > 4 then
30073: LD_VAR 0 8
30077: PUSH
30078: LD_INT 4
30080: GREATER
30081: IFFALSE 30085
// break ;
30083: GO 31135
// case i of 1 :
30085: LD_VAR 0 8
30089: PUSH
30090: LD_INT 1
30092: DOUBLE
30093: EQUAL
30094: IFTRUE 30098
30096: GO 30178
30098: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30099: LD_ADDR_VAR 0 12
30103: PUSH
30104: LD_VAR 0 18
30108: PPUSH
30109: LD_INT 22
30111: PUSH
30112: LD_VAR 0 16
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 58
30123: PUSH
30124: EMPTY
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 30
30132: PUSH
30133: LD_INT 32
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 30
30142: PUSH
30143: LD_INT 4
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 30
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: LIST
30170: PPUSH
30171: CALL_OW 72
30175: ST_TO_ADDR
30176: GO 30400
30178: LD_INT 2
30180: DOUBLE
30181: EQUAL
30182: IFTRUE 30186
30184: GO 30248
30186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30187: LD_ADDR_VAR 0 12
30191: PUSH
30192: LD_VAR 0 18
30196: PPUSH
30197: LD_INT 22
30199: PUSH
30200: LD_VAR 0 16
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 2
30211: PUSH
30212: LD_INT 30
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 30
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: LIST
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PPUSH
30241: CALL_OW 72
30245: ST_TO_ADDR
30246: GO 30400
30248: LD_INT 3
30250: DOUBLE
30251: EQUAL
30252: IFTRUE 30256
30254: GO 30318
30256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30257: LD_ADDR_VAR 0 12
30261: PUSH
30262: LD_VAR 0 18
30266: PPUSH
30267: LD_INT 22
30269: PUSH
30270: LD_VAR 0 16
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: LD_INT 30
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 30
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PPUSH
30311: CALL_OW 72
30315: ST_TO_ADDR
30316: GO 30400
30318: LD_INT 4
30320: DOUBLE
30321: EQUAL
30322: IFTRUE 30326
30324: GO 30399
30326: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30327: LD_ADDR_VAR 0 12
30331: PUSH
30332: LD_VAR 0 18
30336: PPUSH
30337: LD_INT 22
30339: PUSH
30340: LD_VAR 0 16
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: LD_INT 30
30354: PUSH
30355: LD_INT 6
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 30
30364: PUSH
30365: LD_INT 7
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 30
30374: PUSH
30375: LD_INT 8
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PPUSH
30392: CALL_OW 72
30396: ST_TO_ADDR
30397: GO 30400
30399: POP
// if i = 1 then
30400: LD_VAR 0 8
30404: PUSH
30405: LD_INT 1
30407: EQUAL
30408: IFFALSE 30519
// begin tmp := [ ] ;
30410: LD_ADDR_VAR 0 19
30414: PUSH
30415: EMPTY
30416: ST_TO_ADDR
// for j in f do
30417: LD_ADDR_VAR 0 9
30421: PUSH
30422: LD_VAR 0 12
30426: PUSH
30427: FOR_IN
30428: IFFALSE 30501
// if GetBType ( j ) = b_bunker then
30430: LD_VAR 0 9
30434: PPUSH
30435: CALL_OW 266
30439: PUSH
30440: LD_INT 32
30442: EQUAL
30443: IFFALSE 30470
// tmp := Insert ( tmp , 1 , j ) else
30445: LD_ADDR_VAR 0 19
30449: PUSH
30450: LD_VAR 0 19
30454: PPUSH
30455: LD_INT 1
30457: PPUSH
30458: LD_VAR 0 9
30462: PPUSH
30463: CALL_OW 2
30467: ST_TO_ADDR
30468: GO 30499
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30470: LD_ADDR_VAR 0 19
30474: PUSH
30475: LD_VAR 0 19
30479: PPUSH
30480: LD_VAR 0 19
30484: PUSH
30485: LD_INT 1
30487: PLUS
30488: PPUSH
30489: LD_VAR 0 9
30493: PPUSH
30494: CALL_OW 2
30498: ST_TO_ADDR
30499: GO 30427
30501: POP
30502: POP
// if tmp then
30503: LD_VAR 0 19
30507: IFFALSE 30519
// f := tmp ;
30509: LD_ADDR_VAR 0 12
30513: PUSH
30514: LD_VAR 0 19
30518: ST_TO_ADDR
// end ; x := personel [ i ] ;
30519: LD_ADDR_VAR 0 13
30523: PUSH
30524: LD_VAR 0 6
30528: PUSH
30529: LD_VAR 0 8
30533: ARRAY
30534: ST_TO_ADDR
// if x = - 1 then
30535: LD_VAR 0 13
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: EQUAL
30544: IFFALSE 30753
// begin for j in f do
30546: LD_ADDR_VAR 0 9
30550: PUSH
30551: LD_VAR 0 12
30555: PUSH
30556: FOR_IN
30557: IFFALSE 30749
// repeat InitHc ;
30559: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30563: LD_VAR 0 9
30567: PPUSH
30568: CALL_OW 266
30572: PUSH
30573: LD_INT 5
30575: EQUAL
30576: IFFALSE 30646
// begin if UnitsInside ( j ) < 3 then
30578: LD_VAR 0 9
30582: PPUSH
30583: CALL_OW 313
30587: PUSH
30588: LD_INT 3
30590: LESS
30591: IFFALSE 30627
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30593: LD_INT 0
30595: PPUSH
30596: LD_INT 5
30598: PUSH
30599: LD_INT 8
30601: PUSH
30602: LD_INT 9
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: LIST
30609: PUSH
30610: LD_VAR 0 17
30614: ARRAY
30615: PPUSH
30616: LD_VAR 0 4
30620: PPUSH
30621: CALL_OW 380
30625: GO 30644
// PrepareHuman ( false , i , skill ) ;
30627: LD_INT 0
30629: PPUSH
30630: LD_VAR 0 8
30634: PPUSH
30635: LD_VAR 0 4
30639: PPUSH
30640: CALL_OW 380
// end else
30644: GO 30663
// PrepareHuman ( false , i , skill ) ;
30646: LD_INT 0
30648: PPUSH
30649: LD_VAR 0 8
30653: PPUSH
30654: LD_VAR 0 4
30658: PPUSH
30659: CALL_OW 380
// un := CreateHuman ;
30663: LD_ADDR_VAR 0 14
30667: PUSH
30668: CALL_OW 44
30672: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30673: LD_ADDR_VAR 0 7
30677: PUSH
30678: LD_VAR 0 7
30682: PPUSH
30683: LD_INT 1
30685: PPUSH
30686: LD_VAR 0 14
30690: PPUSH
30691: CALL_OW 2
30695: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30696: LD_VAR 0 14
30700: PPUSH
30701: LD_VAR 0 9
30705: PPUSH
30706: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30710: LD_VAR 0 9
30714: PPUSH
30715: CALL_OW 313
30719: PUSH
30720: LD_INT 6
30722: EQUAL
30723: PUSH
30724: LD_VAR 0 9
30728: PPUSH
30729: CALL_OW 266
30733: PUSH
30734: LD_INT 32
30736: PUSH
30737: LD_INT 31
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: IN
30744: OR
30745: IFFALSE 30559
30747: GO 30556
30749: POP
30750: POP
// end else
30751: GO 31133
// for j = 1 to x do
30753: LD_ADDR_VAR 0 9
30757: PUSH
30758: DOUBLE
30759: LD_INT 1
30761: DEC
30762: ST_TO_ADDR
30763: LD_VAR 0 13
30767: PUSH
30768: FOR_TO
30769: IFFALSE 31131
// begin InitHc ;
30771: CALL_OW 19
// if not f then
30775: LD_VAR 0 12
30779: NOT
30780: IFFALSE 30869
// begin PrepareHuman ( false , i , skill ) ;
30782: LD_INT 0
30784: PPUSH
30785: LD_VAR 0 8
30789: PPUSH
30790: LD_VAR 0 4
30794: PPUSH
30795: CALL_OW 380
// un := CreateHuman ;
30799: LD_ADDR_VAR 0 14
30803: PUSH
30804: CALL_OW 44
30808: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30809: LD_ADDR_VAR 0 7
30813: PUSH
30814: LD_VAR 0 7
30818: PPUSH
30819: LD_INT 1
30821: PPUSH
30822: LD_VAR 0 14
30826: PPUSH
30827: CALL_OW 2
30831: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30832: LD_VAR 0 14
30836: PPUSH
30837: LD_VAR 0 1
30841: PPUSH
30842: CALL_OW 250
30846: PPUSH
30847: LD_VAR 0 1
30851: PPUSH
30852: CALL_OW 251
30856: PPUSH
30857: LD_INT 10
30859: PPUSH
30860: LD_INT 0
30862: PPUSH
30863: CALL_OW 50
// continue ;
30867: GO 30768
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30869: LD_VAR 0 12
30873: PUSH
30874: LD_INT 1
30876: ARRAY
30877: PPUSH
30878: CALL_OW 313
30882: PUSH
30883: LD_VAR 0 12
30887: PUSH
30888: LD_INT 1
30890: ARRAY
30891: PPUSH
30892: CALL_OW 266
30896: PUSH
30897: LD_INT 32
30899: PUSH
30900: LD_INT 31
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: IN
30907: AND
30908: PUSH
30909: LD_VAR 0 12
30913: PUSH
30914: LD_INT 1
30916: ARRAY
30917: PPUSH
30918: CALL_OW 313
30922: PUSH
30923: LD_INT 6
30925: EQUAL
30926: OR
30927: IFFALSE 30947
// f := Delete ( f , 1 ) ;
30929: LD_ADDR_VAR 0 12
30933: PUSH
30934: LD_VAR 0 12
30938: PPUSH
30939: LD_INT 1
30941: PPUSH
30942: CALL_OW 3
30946: ST_TO_ADDR
// if not f then
30947: LD_VAR 0 12
30951: NOT
30952: IFFALSE 30970
// begin x := x + 2 ;
30954: LD_ADDR_VAR 0 13
30958: PUSH
30959: LD_VAR 0 13
30963: PUSH
30964: LD_INT 2
30966: PLUS
30967: ST_TO_ADDR
// continue ;
30968: GO 30768
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30970: LD_VAR 0 12
30974: PUSH
30975: LD_INT 1
30977: ARRAY
30978: PPUSH
30979: CALL_OW 266
30983: PUSH
30984: LD_INT 5
30986: EQUAL
30987: IFFALSE 31061
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30989: LD_VAR 0 12
30993: PUSH
30994: LD_INT 1
30996: ARRAY
30997: PPUSH
30998: CALL_OW 313
31002: PUSH
31003: LD_INT 3
31005: LESS
31006: IFFALSE 31042
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31008: LD_INT 0
31010: PPUSH
31011: LD_INT 5
31013: PUSH
31014: LD_INT 8
31016: PUSH
31017: LD_INT 9
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: PUSH
31025: LD_VAR 0 17
31029: ARRAY
31030: PPUSH
31031: LD_VAR 0 4
31035: PPUSH
31036: CALL_OW 380
31040: GO 31059
// PrepareHuman ( false , i , skill ) ;
31042: LD_INT 0
31044: PPUSH
31045: LD_VAR 0 8
31049: PPUSH
31050: LD_VAR 0 4
31054: PPUSH
31055: CALL_OW 380
// end else
31059: GO 31078
// PrepareHuman ( false , i , skill ) ;
31061: LD_INT 0
31063: PPUSH
31064: LD_VAR 0 8
31068: PPUSH
31069: LD_VAR 0 4
31073: PPUSH
31074: CALL_OW 380
// un := CreateHuman ;
31078: LD_ADDR_VAR 0 14
31082: PUSH
31083: CALL_OW 44
31087: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31088: LD_ADDR_VAR 0 7
31092: PUSH
31093: LD_VAR 0 7
31097: PPUSH
31098: LD_INT 1
31100: PPUSH
31101: LD_VAR 0 14
31105: PPUSH
31106: CALL_OW 2
31110: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31111: LD_VAR 0 14
31115: PPUSH
31116: LD_VAR 0 12
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: PPUSH
31125: CALL_OW 52
// end ;
31129: GO 30768
31131: POP
31132: POP
// end ;
31133: GO 30070
31135: POP
31136: POP
// result := result ^ buildings ;
31137: LD_ADDR_VAR 0 7
31141: PUSH
31142: LD_VAR 0 7
31146: PUSH
31147: LD_VAR 0 18
31151: ADD
31152: ST_TO_ADDR
// end else
31153: GO 31296
// begin for i = 1 to personel do
31155: LD_ADDR_VAR 0 8
31159: PUSH
31160: DOUBLE
31161: LD_INT 1
31163: DEC
31164: ST_TO_ADDR
31165: LD_VAR 0 6
31169: PUSH
31170: FOR_TO
31171: IFFALSE 31294
// begin if i > 4 then
31173: LD_VAR 0 8
31177: PUSH
31178: LD_INT 4
31180: GREATER
31181: IFFALSE 31185
// break ;
31183: GO 31294
// x := personel [ i ] ;
31185: LD_ADDR_VAR 0 13
31189: PUSH
31190: LD_VAR 0 6
31194: PUSH
31195: LD_VAR 0 8
31199: ARRAY
31200: ST_TO_ADDR
// if x = - 1 then
31201: LD_VAR 0 13
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: EQUAL
31210: IFFALSE 31214
// continue ;
31212: GO 31170
// PrepareHuman ( false , i , skill ) ;
31214: LD_INT 0
31216: PPUSH
31217: LD_VAR 0 8
31221: PPUSH
31222: LD_VAR 0 4
31226: PPUSH
31227: CALL_OW 380
// un := CreateHuman ;
31231: LD_ADDR_VAR 0 14
31235: PUSH
31236: CALL_OW 44
31240: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31241: LD_VAR 0 14
31245: PPUSH
31246: LD_VAR 0 1
31250: PPUSH
31251: CALL_OW 250
31255: PPUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 251
31265: PPUSH
31266: LD_INT 10
31268: PPUSH
31269: LD_INT 0
31271: PPUSH
31272: CALL_OW 50
// result := result ^ un ;
31276: LD_ADDR_VAR 0 7
31280: PUSH
31281: LD_VAR 0 7
31285: PUSH
31286: LD_VAR 0 14
31290: ADD
31291: ST_TO_ADDR
// end ;
31292: GO 31170
31294: POP
31295: POP
// end ; end ;
31296: LD_VAR 0 7
31300: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31301: LD_INT 0
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
// result := false ;
31319: LD_ADDR_VAR 0 3
31323: PUSH
31324: LD_INT 0
31326: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31327: LD_VAR 0 1
31331: NOT
31332: PUSH
31333: LD_VAR 0 1
31337: PPUSH
31338: CALL_OW 266
31342: PUSH
31343: LD_INT 32
31345: PUSH
31346: LD_INT 33
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: IN
31353: NOT
31354: OR
31355: IFFALSE 31359
// exit ;
31357: GO 32468
// nat := GetNation ( tower ) ;
31359: LD_ADDR_VAR 0 12
31363: PUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: CALL_OW 248
31373: ST_TO_ADDR
// side := GetSide ( tower ) ;
31374: LD_ADDR_VAR 0 16
31378: PUSH
31379: LD_VAR 0 1
31383: PPUSH
31384: CALL_OW 255
31388: ST_TO_ADDR
// x := GetX ( tower ) ;
31389: LD_ADDR_VAR 0 10
31393: PUSH
31394: LD_VAR 0 1
31398: PPUSH
31399: CALL_OW 250
31403: ST_TO_ADDR
// y := GetY ( tower ) ;
31404: LD_ADDR_VAR 0 11
31408: PUSH
31409: LD_VAR 0 1
31413: PPUSH
31414: CALL_OW 251
31418: ST_TO_ADDR
// if not x or not y then
31419: LD_VAR 0 10
31423: NOT
31424: PUSH
31425: LD_VAR 0 11
31429: NOT
31430: OR
31431: IFFALSE 31435
// exit ;
31433: GO 32468
// weapon := 0 ;
31435: LD_ADDR_VAR 0 18
31439: PUSH
31440: LD_INT 0
31442: ST_TO_ADDR
// fac_list := [ ] ;
31443: LD_ADDR_VAR 0 17
31447: PUSH
31448: EMPTY
31449: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31450: LD_ADDR_VAR 0 6
31454: PUSH
31455: LD_VAR 0 1
31459: PPUSH
31460: CALL_OW 274
31464: PPUSH
31465: LD_VAR 0 2
31469: PPUSH
31470: LD_INT 0
31472: PPUSH
31473: CALL 29039 0 3
31477: PPUSH
31478: LD_INT 30
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PPUSH
31488: CALL_OW 72
31492: ST_TO_ADDR
// if not factories then
31493: LD_VAR 0 6
31497: NOT
31498: IFFALSE 31502
// exit ;
31500: GO 32468
// for i in factories do
31502: LD_ADDR_VAR 0 8
31506: PUSH
31507: LD_VAR 0 6
31511: PUSH
31512: FOR_IN
31513: IFFALSE 31538
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31515: LD_ADDR_VAR 0 17
31519: PUSH
31520: LD_VAR 0 17
31524: PUSH
31525: LD_VAR 0 8
31529: PPUSH
31530: CALL_OW 478
31534: UNION
31535: ST_TO_ADDR
31536: GO 31512
31538: POP
31539: POP
// if not fac_list then
31540: LD_VAR 0 17
31544: NOT
31545: IFFALSE 31549
// exit ;
31547: GO 32468
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31549: LD_ADDR_VAR 0 5
31553: PUSH
31554: LD_INT 4
31556: PUSH
31557: LD_INT 5
31559: PUSH
31560: LD_INT 9
31562: PUSH
31563: LD_INT 10
31565: PUSH
31566: LD_INT 6
31568: PUSH
31569: LD_INT 7
31571: PUSH
31572: LD_INT 11
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 27
31586: PUSH
31587: LD_INT 28
31589: PUSH
31590: LD_INT 26
31592: PUSH
31593: LD_INT 30
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 43
31604: PUSH
31605: LD_INT 44
31607: PUSH
31608: LD_INT 46
31610: PUSH
31611: LD_INT 45
31613: PUSH
31614: LD_INT 47
31616: PUSH
31617: LD_INT 49
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: LIST
31632: PUSH
31633: LD_VAR 0 12
31637: ARRAY
31638: ST_TO_ADDR
// list := list isect fac_list ;
31639: LD_ADDR_VAR 0 5
31643: PUSH
31644: LD_VAR 0 5
31648: PUSH
31649: LD_VAR 0 17
31653: ISECT
31654: ST_TO_ADDR
// if not list then
31655: LD_VAR 0 5
31659: NOT
31660: IFFALSE 31664
// exit ;
31662: GO 32468
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31664: LD_VAR 0 12
31668: PUSH
31669: LD_INT 3
31671: EQUAL
31672: PUSH
31673: LD_INT 49
31675: PUSH
31676: LD_VAR 0 5
31680: IN
31681: AND
31682: PUSH
31683: LD_INT 31
31685: PPUSH
31686: LD_VAR 0 16
31690: PPUSH
31691: CALL_OW 321
31695: PUSH
31696: LD_INT 2
31698: EQUAL
31699: AND
31700: IFFALSE 31760
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31702: LD_INT 22
31704: PUSH
31705: LD_VAR 0 16
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 35
31716: PUSH
31717: LD_INT 49
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 91
31726: PUSH
31727: LD_VAR 0 1
31731: PUSH
31732: LD_INT 10
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: LIST
31744: PPUSH
31745: CALL_OW 69
31749: NOT
31750: IFFALSE 31760
// weapon := ru_time_lapser ;
31752: LD_ADDR_VAR 0 18
31756: PUSH
31757: LD_INT 49
31759: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31760: LD_VAR 0 12
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: IN
31775: PUSH
31776: LD_INT 11
31778: PUSH
31779: LD_VAR 0 5
31783: IN
31784: PUSH
31785: LD_INT 30
31787: PUSH
31788: LD_VAR 0 5
31792: IN
31793: OR
31794: AND
31795: PUSH
31796: LD_INT 6
31798: PPUSH
31799: LD_VAR 0 16
31803: PPUSH
31804: CALL_OW 321
31808: PUSH
31809: LD_INT 2
31811: EQUAL
31812: AND
31813: IFFALSE 31978
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31815: LD_INT 22
31817: PUSH
31818: LD_VAR 0 16
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 2
31829: PUSH
31830: LD_INT 35
31832: PUSH
31833: LD_INT 11
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 35
31842: PUSH
31843: LD_INT 30
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 91
31857: PUSH
31858: LD_VAR 0 1
31862: PUSH
31863: LD_INT 18
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: PPUSH
31876: CALL_OW 69
31880: NOT
31881: PUSH
31882: LD_INT 22
31884: PUSH
31885: LD_VAR 0 16
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 30
31899: PUSH
31900: LD_INT 32
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 30
31909: PUSH
31910: LD_INT 33
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 91
31924: PUSH
31925: LD_VAR 0 1
31929: PUSH
31930: LD_INT 12
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: PPUSH
31946: CALL_OW 69
31950: PUSH
31951: LD_INT 2
31953: GREATER
31954: AND
31955: IFFALSE 31978
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31957: LD_ADDR_VAR 0 18
31961: PUSH
31962: LD_INT 11
31964: PUSH
31965: LD_INT 30
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_VAR 0 12
31976: ARRAY
31977: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31978: LD_VAR 0 18
31982: NOT
31983: PUSH
31984: LD_INT 40
31986: PPUSH
31987: LD_VAR 0 16
31991: PPUSH
31992: CALL_OW 321
31996: PUSH
31997: LD_INT 2
31999: EQUAL
32000: AND
32001: PUSH
32002: LD_INT 7
32004: PUSH
32005: LD_VAR 0 5
32009: IN
32010: PUSH
32011: LD_INT 28
32013: PUSH
32014: LD_VAR 0 5
32018: IN
32019: OR
32020: PUSH
32021: LD_INT 45
32023: PUSH
32024: LD_VAR 0 5
32028: IN
32029: OR
32030: AND
32031: IFFALSE 32285
// begin hex := GetHexInfo ( x , y ) ;
32033: LD_ADDR_VAR 0 4
32037: PUSH
32038: LD_VAR 0 10
32042: PPUSH
32043: LD_VAR 0 11
32047: PPUSH
32048: CALL_OW 546
32052: ST_TO_ADDR
// if hex [ 1 ] then
32053: LD_VAR 0 4
32057: PUSH
32058: LD_INT 1
32060: ARRAY
32061: IFFALSE 32065
// exit ;
32063: GO 32468
// height := hex [ 2 ] ;
32065: LD_ADDR_VAR 0 15
32069: PUSH
32070: LD_VAR 0 4
32074: PUSH
32075: LD_INT 2
32077: ARRAY
32078: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32079: LD_ADDR_VAR 0 14
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: LD_INT 5
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// for i in tmp do
32102: LD_ADDR_VAR 0 8
32106: PUSH
32107: LD_VAR 0 14
32111: PUSH
32112: FOR_IN
32113: IFFALSE 32283
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32115: LD_ADDR_VAR 0 9
32119: PUSH
32120: LD_VAR 0 10
32124: PPUSH
32125: LD_VAR 0 8
32129: PPUSH
32130: LD_INT 5
32132: PPUSH
32133: CALL_OW 272
32137: PUSH
32138: LD_VAR 0 11
32142: PPUSH
32143: LD_VAR 0 8
32147: PPUSH
32148: LD_INT 5
32150: PPUSH
32151: CALL_OW 273
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32160: LD_VAR 0 9
32164: PUSH
32165: LD_INT 1
32167: ARRAY
32168: PPUSH
32169: LD_VAR 0 9
32173: PUSH
32174: LD_INT 2
32176: ARRAY
32177: PPUSH
32178: CALL_OW 488
32182: IFFALSE 32281
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32184: LD_ADDR_VAR 0 4
32188: PUSH
32189: LD_VAR 0 9
32193: PUSH
32194: LD_INT 1
32196: ARRAY
32197: PPUSH
32198: LD_VAR 0 9
32202: PUSH
32203: LD_INT 2
32205: ARRAY
32206: PPUSH
32207: CALL_OW 546
32211: ST_TO_ADDR
// if hex [ 1 ] then
32212: LD_VAR 0 4
32216: PUSH
32217: LD_INT 1
32219: ARRAY
32220: IFFALSE 32224
// continue ;
32222: GO 32112
// h := hex [ 2 ] ;
32224: LD_ADDR_VAR 0 13
32228: PUSH
32229: LD_VAR 0 4
32233: PUSH
32234: LD_INT 2
32236: ARRAY
32237: ST_TO_ADDR
// if h + 7 < height then
32238: LD_VAR 0 13
32242: PUSH
32243: LD_INT 7
32245: PLUS
32246: PUSH
32247: LD_VAR 0 15
32251: LESS
32252: IFFALSE 32281
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32254: LD_ADDR_VAR 0 18
32258: PUSH
32259: LD_INT 7
32261: PUSH
32262: LD_INT 28
32264: PUSH
32265: LD_INT 45
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: LIST
32272: PUSH
32273: LD_VAR 0 12
32277: ARRAY
32278: ST_TO_ADDR
// break ;
32279: GO 32283
// end ; end ; end ;
32281: GO 32112
32283: POP
32284: POP
// end ; if not weapon then
32285: LD_VAR 0 18
32289: NOT
32290: IFFALSE 32350
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32292: LD_ADDR_VAR 0 5
32296: PUSH
32297: LD_VAR 0 5
32301: PUSH
32302: LD_INT 11
32304: PUSH
32305: LD_INT 30
32307: PUSH
32308: LD_INT 49
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: DIFF
32316: ST_TO_ADDR
// if not list then
32317: LD_VAR 0 5
32321: NOT
32322: IFFALSE 32326
// exit ;
32324: GO 32468
// weapon := list [ rand ( 1 , list ) ] ;
32326: LD_ADDR_VAR 0 18
32330: PUSH
32331: LD_VAR 0 5
32335: PUSH
32336: LD_INT 1
32338: PPUSH
32339: LD_VAR 0 5
32343: PPUSH
32344: CALL_OW 12
32348: ARRAY
32349: ST_TO_ADDR
// end ; if weapon then
32350: LD_VAR 0 18
32354: IFFALSE 32468
// begin tmp := CostOfWeapon ( weapon ) ;
32356: LD_ADDR_VAR 0 14
32360: PUSH
32361: LD_VAR 0 18
32365: PPUSH
32366: CALL_OW 451
32370: ST_TO_ADDR
// j := GetBase ( tower ) ;
32371: LD_ADDR_VAR 0 9
32375: PUSH
32376: LD_VAR 0 1
32380: PPUSH
32381: CALL_OW 274
32385: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32386: LD_VAR 0 9
32390: PPUSH
32391: LD_INT 1
32393: PPUSH
32394: CALL_OW 275
32398: PUSH
32399: LD_VAR 0 14
32403: PUSH
32404: LD_INT 1
32406: ARRAY
32407: GREATEREQUAL
32408: PUSH
32409: LD_VAR 0 9
32413: PPUSH
32414: LD_INT 2
32416: PPUSH
32417: CALL_OW 275
32421: PUSH
32422: LD_VAR 0 14
32426: PUSH
32427: LD_INT 2
32429: ARRAY
32430: GREATEREQUAL
32431: AND
32432: PUSH
32433: LD_VAR 0 9
32437: PPUSH
32438: LD_INT 3
32440: PPUSH
32441: CALL_OW 275
32445: PUSH
32446: LD_VAR 0 14
32450: PUSH
32451: LD_INT 3
32453: ARRAY
32454: GREATEREQUAL
32455: AND
32456: IFFALSE 32468
// result := weapon ;
32458: LD_ADDR_VAR 0 3
32462: PUSH
32463: LD_VAR 0 18
32467: ST_TO_ADDR
// end ; end ;
32468: LD_VAR 0 3
32472: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32473: LD_INT 0
32475: PPUSH
32476: PPUSH
// result := true ;
32477: LD_ADDR_VAR 0 3
32481: PUSH
32482: LD_INT 1
32484: ST_TO_ADDR
// if array1 = array2 then
32485: LD_VAR 0 1
32489: PUSH
32490: LD_VAR 0 2
32494: EQUAL
32495: IFFALSE 32555
// begin for i = 1 to array1 do
32497: LD_ADDR_VAR 0 4
32501: PUSH
32502: DOUBLE
32503: LD_INT 1
32505: DEC
32506: ST_TO_ADDR
32507: LD_VAR 0 1
32511: PUSH
32512: FOR_TO
32513: IFFALSE 32551
// if array1 [ i ] <> array2 [ i ] then
32515: LD_VAR 0 1
32519: PUSH
32520: LD_VAR 0 4
32524: ARRAY
32525: PUSH
32526: LD_VAR 0 2
32530: PUSH
32531: LD_VAR 0 4
32535: ARRAY
32536: NONEQUAL
32537: IFFALSE 32549
// begin result := false ;
32539: LD_ADDR_VAR 0 3
32543: PUSH
32544: LD_INT 0
32546: ST_TO_ADDR
// break ;
32547: GO 32551
// end ;
32549: GO 32512
32551: POP
32552: POP
// end else
32553: GO 32563
// result := false ;
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 0
32562: ST_TO_ADDR
// end ;
32563: LD_VAR 0 3
32567: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32568: LD_INT 0
32570: PPUSH
32571: PPUSH
// if not array1 or not array2 then
32572: LD_VAR 0 1
32576: NOT
32577: PUSH
32578: LD_VAR 0 2
32582: NOT
32583: OR
32584: IFFALSE 32588
// exit ;
32586: GO 32652
// result := true ;
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: LD_INT 1
32595: ST_TO_ADDR
// for i = 1 to array1 do
32596: LD_ADDR_VAR 0 4
32600: PUSH
32601: DOUBLE
32602: LD_INT 1
32604: DEC
32605: ST_TO_ADDR
32606: LD_VAR 0 1
32610: PUSH
32611: FOR_TO
32612: IFFALSE 32650
// if array1 [ i ] <> array2 [ i ] then
32614: LD_VAR 0 1
32618: PUSH
32619: LD_VAR 0 4
32623: ARRAY
32624: PUSH
32625: LD_VAR 0 2
32629: PUSH
32630: LD_VAR 0 4
32634: ARRAY
32635: NONEQUAL
32636: IFFALSE 32648
// begin result := false ;
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_INT 0
32645: ST_TO_ADDR
// break ;
32646: GO 32650
// end ;
32648: GO 32611
32650: POP
32651: POP
// end ;
32652: LD_VAR 0 3
32656: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32657: LD_INT 0
32659: PPUSH
32660: PPUSH
32661: PPUSH
// pom := GetBase ( fac ) ;
32662: LD_ADDR_VAR 0 5
32666: PUSH
32667: LD_VAR 0 1
32671: PPUSH
32672: CALL_OW 274
32676: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32677: LD_ADDR_VAR 0 4
32681: PUSH
32682: LD_VAR 0 2
32686: PUSH
32687: LD_INT 1
32689: ARRAY
32690: PPUSH
32691: LD_VAR 0 2
32695: PUSH
32696: LD_INT 2
32698: ARRAY
32699: PPUSH
32700: LD_VAR 0 2
32704: PUSH
32705: LD_INT 3
32707: ARRAY
32708: PPUSH
32709: LD_VAR 0 2
32713: PUSH
32714: LD_INT 4
32716: ARRAY
32717: PPUSH
32718: CALL_OW 449
32722: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32723: LD_ADDR_VAR 0 3
32727: PUSH
32728: LD_VAR 0 5
32732: PPUSH
32733: LD_INT 1
32735: PPUSH
32736: CALL_OW 275
32740: PUSH
32741: LD_VAR 0 4
32745: PUSH
32746: LD_INT 1
32748: ARRAY
32749: GREATEREQUAL
32750: PUSH
32751: LD_VAR 0 5
32755: PPUSH
32756: LD_INT 2
32758: PPUSH
32759: CALL_OW 275
32763: PUSH
32764: LD_VAR 0 4
32768: PUSH
32769: LD_INT 2
32771: ARRAY
32772: GREATEREQUAL
32773: AND
32774: PUSH
32775: LD_VAR 0 5
32779: PPUSH
32780: LD_INT 3
32782: PPUSH
32783: CALL_OW 275
32787: PUSH
32788: LD_VAR 0 4
32792: PUSH
32793: LD_INT 3
32795: ARRAY
32796: GREATEREQUAL
32797: AND
32798: ST_TO_ADDR
// end ;
32799: LD_VAR 0 3
32803: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32804: LD_INT 0
32806: PPUSH
32807: PPUSH
32808: PPUSH
32809: PPUSH
// pom := GetBase ( building ) ;
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: LD_VAR 0 1
32819: PPUSH
32820: CALL_OW 274
32824: ST_TO_ADDR
// if not pom then
32825: LD_VAR 0 3
32829: NOT
32830: IFFALSE 32834
// exit ;
32832: GO 33004
// btype := GetBType ( building ) ;
32834: LD_ADDR_VAR 0 5
32838: PUSH
32839: LD_VAR 0 1
32843: PPUSH
32844: CALL_OW 266
32848: ST_TO_ADDR
// if btype = b_armoury then
32849: LD_VAR 0 5
32853: PUSH
32854: LD_INT 4
32856: EQUAL
32857: IFFALSE 32867
// btype := b_barracks ;
32859: LD_ADDR_VAR 0 5
32863: PUSH
32864: LD_INT 5
32866: ST_TO_ADDR
// if btype = b_depot then
32867: LD_VAR 0 5
32871: PUSH
32872: LD_INT 0
32874: EQUAL
32875: IFFALSE 32885
// btype := b_warehouse ;
32877: LD_ADDR_VAR 0 5
32881: PUSH
32882: LD_INT 1
32884: ST_TO_ADDR
// if btype = b_workshop then
32885: LD_VAR 0 5
32889: PUSH
32890: LD_INT 2
32892: EQUAL
32893: IFFALSE 32903
// btype := b_factory ;
32895: LD_ADDR_VAR 0 5
32899: PUSH
32900: LD_INT 3
32902: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32903: LD_ADDR_VAR 0 4
32907: PUSH
32908: LD_VAR 0 5
32912: PPUSH
32913: LD_VAR 0 1
32917: PPUSH
32918: CALL_OW 248
32922: PPUSH
32923: CALL_OW 450
32927: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32928: LD_ADDR_VAR 0 2
32932: PUSH
32933: LD_VAR 0 3
32937: PPUSH
32938: LD_INT 1
32940: PPUSH
32941: CALL_OW 275
32945: PUSH
32946: LD_VAR 0 4
32950: PUSH
32951: LD_INT 1
32953: ARRAY
32954: GREATEREQUAL
32955: PUSH
32956: LD_VAR 0 3
32960: PPUSH
32961: LD_INT 2
32963: PPUSH
32964: CALL_OW 275
32968: PUSH
32969: LD_VAR 0 4
32973: PUSH
32974: LD_INT 2
32976: ARRAY
32977: GREATEREQUAL
32978: AND
32979: PUSH
32980: LD_VAR 0 3
32984: PPUSH
32985: LD_INT 3
32987: PPUSH
32988: CALL_OW 275
32992: PUSH
32993: LD_VAR 0 4
32997: PUSH
32998: LD_INT 3
33000: ARRAY
33001: GREATEREQUAL
33002: AND
33003: ST_TO_ADDR
// end ;
33004: LD_VAR 0 2
33008: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33009: LD_INT 0
33011: PPUSH
33012: PPUSH
33013: PPUSH
// pom := GetBase ( building ) ;
33014: LD_ADDR_VAR 0 4
33018: PUSH
33019: LD_VAR 0 1
33023: PPUSH
33024: CALL_OW 274
33028: ST_TO_ADDR
// if not pom then
33029: LD_VAR 0 4
33033: NOT
33034: IFFALSE 33038
// exit ;
33036: GO 33139
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33038: LD_ADDR_VAR 0 5
33042: PUSH
33043: LD_VAR 0 2
33047: PPUSH
33048: LD_VAR 0 1
33052: PPUSH
33053: CALL_OW 248
33057: PPUSH
33058: CALL_OW 450
33062: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33063: LD_ADDR_VAR 0 3
33067: PUSH
33068: LD_VAR 0 4
33072: PPUSH
33073: LD_INT 1
33075: PPUSH
33076: CALL_OW 275
33080: PUSH
33081: LD_VAR 0 5
33085: PUSH
33086: LD_INT 1
33088: ARRAY
33089: GREATEREQUAL
33090: PUSH
33091: LD_VAR 0 4
33095: PPUSH
33096: LD_INT 2
33098: PPUSH
33099: CALL_OW 275
33103: PUSH
33104: LD_VAR 0 5
33108: PUSH
33109: LD_INT 2
33111: ARRAY
33112: GREATEREQUAL
33113: AND
33114: PUSH
33115: LD_VAR 0 4
33119: PPUSH
33120: LD_INT 3
33122: PPUSH
33123: CALL_OW 275
33127: PUSH
33128: LD_VAR 0 5
33132: PUSH
33133: LD_INT 3
33135: ARRAY
33136: GREATEREQUAL
33137: AND
33138: ST_TO_ADDR
// end ;
33139: LD_VAR 0 3
33143: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33144: LD_INT 0
33146: PPUSH
33147: PPUSH
33148: PPUSH
33149: PPUSH
33150: PPUSH
33151: PPUSH
33152: PPUSH
33153: PPUSH
33154: PPUSH
33155: PPUSH
33156: PPUSH
// result := false ;
33157: LD_ADDR_VAR 0 8
33161: PUSH
33162: LD_INT 0
33164: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33165: LD_VAR 0 5
33169: NOT
33170: PUSH
33171: LD_VAR 0 1
33175: NOT
33176: OR
33177: PUSH
33178: LD_VAR 0 2
33182: NOT
33183: OR
33184: PUSH
33185: LD_VAR 0 3
33189: NOT
33190: OR
33191: IFFALSE 33195
// exit ;
33193: GO 34009
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33195: LD_ADDR_VAR 0 14
33199: PUSH
33200: LD_VAR 0 1
33204: PPUSH
33205: LD_VAR 0 2
33209: PPUSH
33210: LD_VAR 0 3
33214: PPUSH
33215: LD_VAR 0 4
33219: PPUSH
33220: LD_VAR 0 5
33224: PUSH
33225: LD_INT 1
33227: ARRAY
33228: PPUSH
33229: CALL_OW 248
33233: PPUSH
33234: LD_INT 0
33236: PPUSH
33237: CALL 35262 0 6
33241: ST_TO_ADDR
// if not hexes then
33242: LD_VAR 0 14
33246: NOT
33247: IFFALSE 33251
// exit ;
33249: GO 34009
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33251: LD_ADDR_VAR 0 17
33255: PUSH
33256: LD_VAR 0 5
33260: PPUSH
33261: LD_INT 22
33263: PUSH
33264: LD_VAR 0 13
33268: PPUSH
33269: CALL_OW 255
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: LD_INT 30
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 30
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: LIST
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PPUSH
33310: CALL_OW 72
33314: ST_TO_ADDR
// for i = 1 to hexes do
33315: LD_ADDR_VAR 0 9
33319: PUSH
33320: DOUBLE
33321: LD_INT 1
33323: DEC
33324: ST_TO_ADDR
33325: LD_VAR 0 14
33329: PUSH
33330: FOR_TO
33331: IFFALSE 34007
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33333: LD_ADDR_VAR 0 13
33337: PUSH
33338: LD_VAR 0 14
33342: PUSH
33343: LD_VAR 0 9
33347: ARRAY
33348: PUSH
33349: LD_INT 1
33351: ARRAY
33352: PPUSH
33353: LD_VAR 0 14
33357: PUSH
33358: LD_VAR 0 9
33362: ARRAY
33363: PUSH
33364: LD_INT 2
33366: ARRAY
33367: PPUSH
33368: CALL_OW 428
33372: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33373: LD_VAR 0 14
33377: PUSH
33378: LD_VAR 0 9
33382: ARRAY
33383: PUSH
33384: LD_INT 1
33386: ARRAY
33387: PPUSH
33388: LD_VAR 0 14
33392: PUSH
33393: LD_VAR 0 9
33397: ARRAY
33398: PUSH
33399: LD_INT 2
33401: ARRAY
33402: PPUSH
33403: CALL_OW 351
33407: PUSH
33408: LD_VAR 0 14
33412: PUSH
33413: LD_VAR 0 9
33417: ARRAY
33418: PUSH
33419: LD_INT 1
33421: ARRAY
33422: PPUSH
33423: LD_VAR 0 14
33427: PUSH
33428: LD_VAR 0 9
33432: ARRAY
33433: PUSH
33434: LD_INT 2
33436: ARRAY
33437: PPUSH
33438: CALL_OW 488
33442: NOT
33443: OR
33444: PUSH
33445: LD_VAR 0 13
33449: PPUSH
33450: CALL_OW 247
33454: PUSH
33455: LD_INT 3
33457: EQUAL
33458: OR
33459: IFFALSE 33465
// exit ;
33461: POP
33462: POP
33463: GO 34009
// if not tmp then
33465: LD_VAR 0 13
33469: NOT
33470: IFFALSE 33474
// continue ;
33472: GO 33330
// result := true ;
33474: LD_ADDR_VAR 0 8
33478: PUSH
33479: LD_INT 1
33481: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33482: LD_VAR 0 6
33486: PUSH
33487: LD_VAR 0 13
33491: PPUSH
33492: CALL_OW 247
33496: PUSH
33497: LD_INT 2
33499: EQUAL
33500: AND
33501: PUSH
33502: LD_VAR 0 13
33506: PPUSH
33507: CALL_OW 263
33511: PUSH
33512: LD_INT 1
33514: EQUAL
33515: AND
33516: IFFALSE 33680
// begin if IsDrivenBy ( tmp ) then
33518: LD_VAR 0 13
33522: PPUSH
33523: CALL_OW 311
33527: IFFALSE 33531
// continue ;
33529: GO 33330
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33531: LD_VAR 0 6
33535: PPUSH
33536: LD_INT 3
33538: PUSH
33539: LD_INT 60
33541: PUSH
33542: EMPTY
33543: LIST
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 3
33551: PUSH
33552: LD_INT 55
33554: PUSH
33555: EMPTY
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PPUSH
33566: CALL_OW 72
33570: IFFALSE 33678
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33572: LD_ADDR_VAR 0 18
33576: PUSH
33577: LD_VAR 0 6
33581: PPUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 60
33587: PUSH
33588: EMPTY
33589: LIST
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: LD_INT 55
33600: PUSH
33601: EMPTY
33602: LIST
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PPUSH
33612: CALL_OW 72
33616: PUSH
33617: LD_INT 1
33619: ARRAY
33620: ST_TO_ADDR
// if IsInUnit ( driver ) then
33621: LD_VAR 0 18
33625: PPUSH
33626: CALL_OW 310
33630: IFFALSE 33641
// ComExit ( driver ) ;
33632: LD_VAR 0 18
33636: PPUSH
33637: CALL 59063 0 1
// AddComEnterUnit ( driver , tmp ) ;
33641: LD_VAR 0 18
33645: PPUSH
33646: LD_VAR 0 13
33650: PPUSH
33651: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33655: LD_VAR 0 18
33659: PPUSH
33660: LD_VAR 0 7
33664: PPUSH
33665: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33669: LD_VAR 0 18
33673: PPUSH
33674: CALL_OW 181
// end ; continue ;
33678: GO 33330
// end ; if not cleaners or not tmp in cleaners then
33680: LD_VAR 0 6
33684: NOT
33685: PUSH
33686: LD_VAR 0 13
33690: PUSH
33691: LD_VAR 0 6
33695: IN
33696: NOT
33697: OR
33698: IFFALSE 34005
// begin if dep then
33700: LD_VAR 0 17
33704: IFFALSE 33840
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33706: LD_ADDR_VAR 0 16
33710: PUSH
33711: LD_VAR 0 17
33715: PUSH
33716: LD_INT 1
33718: ARRAY
33719: PPUSH
33720: CALL_OW 250
33724: PPUSH
33725: LD_VAR 0 17
33729: PUSH
33730: LD_INT 1
33732: ARRAY
33733: PPUSH
33734: CALL_OW 254
33738: PPUSH
33739: LD_INT 5
33741: PPUSH
33742: CALL_OW 272
33746: PUSH
33747: LD_VAR 0 17
33751: PUSH
33752: LD_INT 1
33754: ARRAY
33755: PPUSH
33756: CALL_OW 251
33760: PPUSH
33761: LD_VAR 0 17
33765: PUSH
33766: LD_INT 1
33768: ARRAY
33769: PPUSH
33770: CALL_OW 254
33774: PPUSH
33775: LD_INT 5
33777: PPUSH
33778: CALL_OW 273
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33787: LD_VAR 0 16
33791: PUSH
33792: LD_INT 1
33794: ARRAY
33795: PPUSH
33796: LD_VAR 0 16
33800: PUSH
33801: LD_INT 2
33803: ARRAY
33804: PPUSH
33805: CALL_OW 488
33809: IFFALSE 33840
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33811: LD_VAR 0 13
33815: PPUSH
33816: LD_VAR 0 16
33820: PUSH
33821: LD_INT 1
33823: ARRAY
33824: PPUSH
33825: LD_VAR 0 16
33829: PUSH
33830: LD_INT 2
33832: ARRAY
33833: PPUSH
33834: CALL_OW 111
// continue ;
33838: GO 33330
// end ; end ; r := GetDir ( tmp ) ;
33840: LD_ADDR_VAR 0 15
33844: PUSH
33845: LD_VAR 0 13
33849: PPUSH
33850: CALL_OW 254
33854: ST_TO_ADDR
// if r = 5 then
33855: LD_VAR 0 15
33859: PUSH
33860: LD_INT 5
33862: EQUAL
33863: IFFALSE 33873
// r := 0 ;
33865: LD_ADDR_VAR 0 15
33869: PUSH
33870: LD_INT 0
33872: ST_TO_ADDR
// for j = r to 5 do
33873: LD_ADDR_VAR 0 10
33877: PUSH
33878: DOUBLE
33879: LD_VAR 0 15
33883: DEC
33884: ST_TO_ADDR
33885: LD_INT 5
33887: PUSH
33888: FOR_TO
33889: IFFALSE 34003
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33891: LD_ADDR_VAR 0 11
33895: PUSH
33896: LD_VAR 0 13
33900: PPUSH
33901: CALL_OW 250
33905: PPUSH
33906: LD_VAR 0 10
33910: PPUSH
33911: LD_INT 2
33913: PPUSH
33914: CALL_OW 272
33918: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33919: LD_ADDR_VAR 0 12
33923: PUSH
33924: LD_VAR 0 13
33928: PPUSH
33929: CALL_OW 251
33933: PPUSH
33934: LD_VAR 0 10
33938: PPUSH
33939: LD_INT 2
33941: PPUSH
33942: CALL_OW 273
33946: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33947: LD_VAR 0 11
33951: PPUSH
33952: LD_VAR 0 12
33956: PPUSH
33957: CALL_OW 488
33961: PUSH
33962: LD_VAR 0 11
33966: PPUSH
33967: LD_VAR 0 12
33971: PPUSH
33972: CALL_OW 428
33976: NOT
33977: AND
33978: IFFALSE 34001
// begin ComMoveXY ( tmp , _x , _y ) ;
33980: LD_VAR 0 13
33984: PPUSH
33985: LD_VAR 0 11
33989: PPUSH
33990: LD_VAR 0 12
33994: PPUSH
33995: CALL_OW 111
// break ;
33999: GO 34003
// end ; end ;
34001: GO 33888
34003: POP
34004: POP
// end ; end ;
34005: GO 33330
34007: POP
34008: POP
// end ;
34009: LD_VAR 0 8
34013: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34014: LD_INT 0
34016: PPUSH
// result := true ;
34017: LD_ADDR_VAR 0 3
34021: PUSH
34022: LD_INT 1
34024: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34025: LD_VAR 0 2
34029: PUSH
34030: LD_INT 24
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34044
34036: LD_INT 33
34038: DOUBLE
34039: EQUAL
34040: IFTRUE 34044
34042: GO 34069
34044: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34045: LD_ADDR_VAR 0 3
34049: PUSH
34050: LD_INT 32
34052: PPUSH
34053: LD_VAR 0 1
34057: PPUSH
34058: CALL_OW 321
34062: PUSH
34063: LD_INT 2
34065: EQUAL
34066: ST_TO_ADDR
34067: GO 34385
34069: LD_INT 20
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34077
34075: GO 34102
34077: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34078: LD_ADDR_VAR 0 3
34082: PUSH
34083: LD_INT 6
34085: PPUSH
34086: LD_VAR 0 1
34090: PPUSH
34091: CALL_OW 321
34095: PUSH
34096: LD_INT 2
34098: EQUAL
34099: ST_TO_ADDR
34100: GO 34385
34102: LD_INT 22
34104: DOUBLE
34105: EQUAL
34106: IFTRUE 34116
34108: LD_INT 36
34110: DOUBLE
34111: EQUAL
34112: IFTRUE 34116
34114: GO 34141
34116: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34117: LD_ADDR_VAR 0 3
34121: PUSH
34122: LD_INT 15
34124: PPUSH
34125: LD_VAR 0 1
34129: PPUSH
34130: CALL_OW 321
34134: PUSH
34135: LD_INT 2
34137: EQUAL
34138: ST_TO_ADDR
34139: GO 34385
34141: LD_INT 30
34143: DOUBLE
34144: EQUAL
34145: IFTRUE 34149
34147: GO 34174
34149: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34150: LD_ADDR_VAR 0 3
34154: PUSH
34155: LD_INT 20
34157: PPUSH
34158: LD_VAR 0 1
34162: PPUSH
34163: CALL_OW 321
34167: PUSH
34168: LD_INT 2
34170: EQUAL
34171: ST_TO_ADDR
34172: GO 34385
34174: LD_INT 28
34176: DOUBLE
34177: EQUAL
34178: IFTRUE 34188
34180: LD_INT 21
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34213
34188: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34189: LD_ADDR_VAR 0 3
34193: PUSH
34194: LD_INT 21
34196: PPUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 321
34206: PUSH
34207: LD_INT 2
34209: EQUAL
34210: ST_TO_ADDR
34211: GO 34385
34213: LD_INT 16
34215: DOUBLE
34216: EQUAL
34217: IFTRUE 34221
34219: GO 34246
34221: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34222: LD_ADDR_VAR 0 3
34226: PUSH
34227: LD_INT 84
34229: PPUSH
34230: LD_VAR 0 1
34234: PPUSH
34235: CALL_OW 321
34239: PUSH
34240: LD_INT 2
34242: EQUAL
34243: ST_TO_ADDR
34244: GO 34385
34246: LD_INT 19
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34260
34252: LD_INT 23
34254: DOUBLE
34255: EQUAL
34256: IFTRUE 34260
34258: GO 34285
34260: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34261: LD_ADDR_VAR 0 3
34265: PUSH
34266: LD_INT 83
34268: PPUSH
34269: LD_VAR 0 1
34273: PPUSH
34274: CALL_OW 321
34278: PUSH
34279: LD_INT 2
34281: EQUAL
34282: ST_TO_ADDR
34283: GO 34385
34285: LD_INT 17
34287: DOUBLE
34288: EQUAL
34289: IFTRUE 34293
34291: GO 34318
34293: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34294: LD_ADDR_VAR 0 3
34298: PUSH
34299: LD_INT 39
34301: PPUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: CALL_OW 321
34311: PUSH
34312: LD_INT 2
34314: EQUAL
34315: ST_TO_ADDR
34316: GO 34385
34318: LD_INT 18
34320: DOUBLE
34321: EQUAL
34322: IFTRUE 34326
34324: GO 34351
34326: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34327: LD_ADDR_VAR 0 3
34331: PUSH
34332: LD_INT 40
34334: PPUSH
34335: LD_VAR 0 1
34339: PPUSH
34340: CALL_OW 321
34344: PUSH
34345: LD_INT 2
34347: EQUAL
34348: ST_TO_ADDR
34349: GO 34385
34351: LD_INT 27
34353: DOUBLE
34354: EQUAL
34355: IFTRUE 34359
34357: GO 34384
34359: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34360: LD_ADDR_VAR 0 3
34364: PUSH
34365: LD_INT 35
34367: PPUSH
34368: LD_VAR 0 1
34372: PPUSH
34373: CALL_OW 321
34377: PUSH
34378: LD_INT 2
34380: EQUAL
34381: ST_TO_ADDR
34382: GO 34385
34384: POP
// end ;
34385: LD_VAR 0 3
34389: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34390: LD_INT 0
34392: PPUSH
34393: PPUSH
34394: PPUSH
34395: PPUSH
34396: PPUSH
34397: PPUSH
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
34402: PPUSH
// result := false ;
34403: LD_ADDR_VAR 0 6
34407: PUSH
34408: LD_INT 0
34410: ST_TO_ADDR
// if btype = b_depot then
34411: LD_VAR 0 2
34415: PUSH
34416: LD_INT 0
34418: EQUAL
34419: IFFALSE 34431
// begin result := true ;
34421: LD_ADDR_VAR 0 6
34425: PUSH
34426: LD_INT 1
34428: ST_TO_ADDR
// exit ;
34429: GO 35257
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34431: LD_VAR 0 1
34435: NOT
34436: PUSH
34437: LD_VAR 0 1
34441: PPUSH
34442: CALL_OW 266
34446: PUSH
34447: LD_INT 0
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: IN
34457: NOT
34458: OR
34459: PUSH
34460: LD_VAR 0 2
34464: NOT
34465: OR
34466: PUSH
34467: LD_VAR 0 5
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: LD_INT 5
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: IN
34498: NOT
34499: OR
34500: PUSH
34501: LD_VAR 0 3
34505: PPUSH
34506: LD_VAR 0 4
34510: PPUSH
34511: CALL_OW 488
34515: NOT
34516: OR
34517: IFFALSE 34521
// exit ;
34519: GO 35257
// side := GetSide ( depot ) ;
34521: LD_ADDR_VAR 0 9
34525: PUSH
34526: LD_VAR 0 1
34530: PPUSH
34531: CALL_OW 255
34535: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34536: LD_VAR 0 9
34540: PPUSH
34541: LD_VAR 0 2
34545: PPUSH
34546: CALL 34014 0 2
34550: NOT
34551: IFFALSE 34555
// exit ;
34553: GO 35257
// pom := GetBase ( depot ) ;
34555: LD_ADDR_VAR 0 10
34559: PUSH
34560: LD_VAR 0 1
34564: PPUSH
34565: CALL_OW 274
34569: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34570: LD_ADDR_VAR 0 11
34574: PUSH
34575: LD_VAR 0 2
34579: PPUSH
34580: LD_VAR 0 1
34584: PPUSH
34585: CALL_OW 248
34589: PPUSH
34590: CALL_OW 450
34594: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34595: LD_VAR 0 10
34599: PPUSH
34600: LD_INT 1
34602: PPUSH
34603: CALL_OW 275
34607: PUSH
34608: LD_VAR 0 11
34612: PUSH
34613: LD_INT 1
34615: ARRAY
34616: GREATEREQUAL
34617: PUSH
34618: LD_VAR 0 10
34622: PPUSH
34623: LD_INT 2
34625: PPUSH
34626: CALL_OW 275
34630: PUSH
34631: LD_VAR 0 11
34635: PUSH
34636: LD_INT 2
34638: ARRAY
34639: GREATEREQUAL
34640: AND
34641: PUSH
34642: LD_VAR 0 10
34646: PPUSH
34647: LD_INT 3
34649: PPUSH
34650: CALL_OW 275
34654: PUSH
34655: LD_VAR 0 11
34659: PUSH
34660: LD_INT 3
34662: ARRAY
34663: GREATEREQUAL
34664: AND
34665: NOT
34666: IFFALSE 34670
// exit ;
34668: GO 35257
// if GetBType ( depot ) = b_depot then
34670: LD_VAR 0 1
34674: PPUSH
34675: CALL_OW 266
34679: PUSH
34680: LD_INT 0
34682: EQUAL
34683: IFFALSE 34695
// dist := 28 else
34685: LD_ADDR_VAR 0 14
34689: PUSH
34690: LD_INT 28
34692: ST_TO_ADDR
34693: GO 34703
// dist := 36 ;
34695: LD_ADDR_VAR 0 14
34699: PUSH
34700: LD_INT 36
34702: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34703: LD_VAR 0 1
34707: PPUSH
34708: LD_VAR 0 3
34712: PPUSH
34713: LD_VAR 0 4
34717: PPUSH
34718: CALL_OW 297
34722: PUSH
34723: LD_VAR 0 14
34727: GREATER
34728: IFFALSE 34732
// exit ;
34730: GO 35257
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34732: LD_ADDR_VAR 0 12
34736: PUSH
34737: LD_VAR 0 2
34741: PPUSH
34742: LD_VAR 0 3
34746: PPUSH
34747: LD_VAR 0 4
34751: PPUSH
34752: LD_VAR 0 5
34756: PPUSH
34757: LD_VAR 0 1
34761: PPUSH
34762: CALL_OW 248
34766: PPUSH
34767: LD_INT 0
34769: PPUSH
34770: CALL 35262 0 6
34774: ST_TO_ADDR
// if not hexes then
34775: LD_VAR 0 12
34779: NOT
34780: IFFALSE 34784
// exit ;
34782: GO 35257
// hex := GetHexInfo ( x , y ) ;
34784: LD_ADDR_VAR 0 15
34788: PUSH
34789: LD_VAR 0 3
34793: PPUSH
34794: LD_VAR 0 4
34798: PPUSH
34799: CALL_OW 546
34803: ST_TO_ADDR
// if hex [ 1 ] then
34804: LD_VAR 0 15
34808: PUSH
34809: LD_INT 1
34811: ARRAY
34812: IFFALSE 34816
// exit ;
34814: GO 35257
// height := hex [ 2 ] ;
34816: LD_ADDR_VAR 0 13
34820: PUSH
34821: LD_VAR 0 15
34825: PUSH
34826: LD_INT 2
34828: ARRAY
34829: ST_TO_ADDR
// for i = 1 to hexes do
34830: LD_ADDR_VAR 0 7
34834: PUSH
34835: DOUBLE
34836: LD_INT 1
34838: DEC
34839: ST_TO_ADDR
34840: LD_VAR 0 12
34844: PUSH
34845: FOR_TO
34846: IFFALSE 35176
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34848: LD_VAR 0 12
34852: PUSH
34853: LD_VAR 0 7
34857: ARRAY
34858: PUSH
34859: LD_INT 1
34861: ARRAY
34862: PPUSH
34863: LD_VAR 0 12
34867: PUSH
34868: LD_VAR 0 7
34872: ARRAY
34873: PUSH
34874: LD_INT 2
34876: ARRAY
34877: PPUSH
34878: CALL_OW 488
34882: NOT
34883: PUSH
34884: LD_VAR 0 12
34888: PUSH
34889: LD_VAR 0 7
34893: ARRAY
34894: PUSH
34895: LD_INT 1
34897: ARRAY
34898: PPUSH
34899: LD_VAR 0 12
34903: PUSH
34904: LD_VAR 0 7
34908: ARRAY
34909: PUSH
34910: LD_INT 2
34912: ARRAY
34913: PPUSH
34914: CALL_OW 428
34918: PUSH
34919: LD_INT 0
34921: GREATER
34922: OR
34923: PUSH
34924: LD_VAR 0 12
34928: PUSH
34929: LD_VAR 0 7
34933: ARRAY
34934: PUSH
34935: LD_INT 1
34937: ARRAY
34938: PPUSH
34939: LD_VAR 0 12
34943: PUSH
34944: LD_VAR 0 7
34948: ARRAY
34949: PUSH
34950: LD_INT 2
34952: ARRAY
34953: PPUSH
34954: CALL_OW 351
34958: OR
34959: IFFALSE 34965
// exit ;
34961: POP
34962: POP
34963: GO 35257
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34965: LD_ADDR_VAR 0 8
34969: PUSH
34970: LD_VAR 0 12
34974: PUSH
34975: LD_VAR 0 7
34979: ARRAY
34980: PUSH
34981: LD_INT 1
34983: ARRAY
34984: PPUSH
34985: LD_VAR 0 12
34989: PUSH
34990: LD_VAR 0 7
34994: ARRAY
34995: PUSH
34996: LD_INT 2
34998: ARRAY
34999: PPUSH
35000: CALL_OW 546
35004: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35005: LD_VAR 0 8
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: PUSH
35014: LD_VAR 0 8
35018: PUSH
35019: LD_INT 2
35021: ARRAY
35022: PUSH
35023: LD_VAR 0 13
35027: PUSH
35028: LD_INT 2
35030: PLUS
35031: GREATER
35032: OR
35033: PUSH
35034: LD_VAR 0 8
35038: PUSH
35039: LD_INT 2
35041: ARRAY
35042: PUSH
35043: LD_VAR 0 13
35047: PUSH
35048: LD_INT 2
35050: MINUS
35051: LESS
35052: OR
35053: PUSH
35054: LD_VAR 0 8
35058: PUSH
35059: LD_INT 3
35061: ARRAY
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 8
35068: PUSH
35069: LD_INT 9
35071: PUSH
35072: LD_INT 10
35074: PUSH
35075: LD_INT 11
35077: PUSH
35078: LD_INT 12
35080: PUSH
35081: LD_INT 13
35083: PUSH
35084: LD_INT 16
35086: PUSH
35087: LD_INT 17
35089: PUSH
35090: LD_INT 18
35092: PUSH
35093: LD_INT 19
35095: PUSH
35096: LD_INT 20
35098: PUSH
35099: LD_INT 21
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: IN
35117: NOT
35118: OR
35119: PUSH
35120: LD_VAR 0 8
35124: PUSH
35125: LD_INT 5
35127: ARRAY
35128: NOT
35129: OR
35130: PUSH
35131: LD_VAR 0 8
35135: PUSH
35136: LD_INT 6
35138: ARRAY
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 7
35148: PUSH
35149: LD_INT 9
35151: PUSH
35152: LD_INT 10
35154: PUSH
35155: LD_INT 11
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: IN
35166: NOT
35167: OR
35168: IFFALSE 35174
// exit ;
35170: POP
35171: POP
35172: GO 35257
// end ;
35174: GO 34845
35176: POP
35177: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35178: LD_VAR 0 9
35182: PPUSH
35183: LD_VAR 0 3
35187: PPUSH
35188: LD_VAR 0 4
35192: PPUSH
35193: LD_INT 20
35195: PPUSH
35196: CALL 27180 0 4
35200: PUSH
35201: LD_INT 4
35203: ARRAY
35204: IFFALSE 35208
// exit ;
35206: GO 35257
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35208: LD_VAR 0 2
35212: PUSH
35213: LD_INT 29
35215: PUSH
35216: LD_INT 30
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: IN
35223: PUSH
35224: LD_VAR 0 3
35228: PPUSH
35229: LD_VAR 0 4
35233: PPUSH
35234: LD_VAR 0 9
35238: PPUSH
35239: CALL_OW 440
35243: NOT
35244: AND
35245: IFFALSE 35249
// exit ;
35247: GO 35257
// result := true ;
35249: LD_ADDR_VAR 0 6
35253: PUSH
35254: LD_INT 1
35256: ST_TO_ADDR
// end ;
35257: LD_VAR 0 6
35261: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35262: LD_INT 0
35264: PPUSH
35265: PPUSH
35266: PPUSH
35267: PPUSH
35268: PPUSH
35269: PPUSH
35270: PPUSH
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
35292: PPUSH
35293: PPUSH
35294: PPUSH
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
35303: PPUSH
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
35316: PPUSH
35317: PPUSH
35318: PPUSH
35319: PPUSH
35320: PPUSH
35321: PPUSH
// result = [ ] ;
35322: LD_ADDR_VAR 0 7
35326: PUSH
35327: EMPTY
35328: ST_TO_ADDR
// temp_list = [ ] ;
35329: LD_ADDR_VAR 0 9
35333: PUSH
35334: EMPTY
35335: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35336: LD_VAR 0 4
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: LD_INT 4
35355: PUSH
35356: LD_INT 5
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: IN
35367: NOT
35368: PUSH
35369: LD_VAR 0 1
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: IN
35384: PUSH
35385: LD_VAR 0 5
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: IN
35404: NOT
35405: AND
35406: OR
35407: IFFALSE 35411
// exit ;
35409: GO 53802
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35411: LD_VAR 0 1
35415: PUSH
35416: LD_INT 6
35418: PUSH
35419: LD_INT 7
35421: PUSH
35422: LD_INT 8
35424: PUSH
35425: LD_INT 13
35427: PUSH
35428: LD_INT 12
35430: PUSH
35431: LD_INT 15
35433: PUSH
35434: LD_INT 11
35436: PUSH
35437: LD_INT 14
35439: PUSH
35440: LD_INT 10
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: IN
35454: IFFALSE 35464
// btype = b_lab ;
35456: LD_ADDR_VAR 0 1
35460: PUSH
35461: LD_INT 6
35463: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35464: LD_VAR 0 6
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: IN
35483: NOT
35484: PUSH
35485: LD_VAR 0 1
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: LD_INT 3
35501: PUSH
35502: LD_INT 6
35504: PUSH
35505: LD_INT 36
35507: PUSH
35508: LD_INT 4
35510: PUSH
35511: LD_INT 5
35513: PUSH
35514: LD_INT 31
35516: PUSH
35517: LD_INT 32
35519: PUSH
35520: LD_INT 33
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: IN
35536: NOT
35537: PUSH
35538: LD_VAR 0 6
35542: PUSH
35543: LD_INT 1
35545: EQUAL
35546: AND
35547: OR
35548: PUSH
35549: LD_VAR 0 1
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: IN
35564: NOT
35565: PUSH
35566: LD_VAR 0 6
35570: PUSH
35571: LD_INT 2
35573: EQUAL
35574: AND
35575: OR
35576: IFFALSE 35586
// mode = 0 ;
35578: LD_ADDR_VAR 0 6
35582: PUSH
35583: LD_INT 0
35585: ST_TO_ADDR
// case mode of 0 :
35586: LD_VAR 0 6
35590: PUSH
35591: LD_INT 0
35593: DOUBLE
35594: EQUAL
35595: IFTRUE 35599
35597: GO 47052
35599: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35600: LD_ADDR_VAR 0 11
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: LD_INT 2
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 2
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 3
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 3
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 2
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35793: LD_ADDR_VAR 0 12
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 2
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: NEG
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 2
35927: NEG
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 3
35950: NEG
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 3
35961: NEG
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35989: LD_ADDR_VAR 0 13
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 2
36112: NEG
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: LD_INT 2
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 2
36136: NEG
36137: PUSH
36138: LD_INT 3
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 3
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 3
36160: NEG
36161: PUSH
36162: LD_INT 3
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36188: LD_ADDR_VAR 0 14
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: LD_INT 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: LD_INT 2
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 3
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 3
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 2
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36384: LD_ADDR_VAR 0 15
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 1
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: NEG
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 2
36507: NEG
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: NEG
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 3
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 3
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36577: LD_ADDR_VAR 0 16
36581: PUSH
36582: LD_INT 0
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: LD_INT 2
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 2
36712: NEG
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 3
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36770: LD_ADDR_VAR 0 17
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 0
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: LD_INT 0
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 2
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: NEG
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37000: LD_ADDR_VAR 0 18
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: LD_INT 2
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37230: LD_ADDR_VAR 0 19
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: LD_INT 1
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 2
37365: PUSH
37366: LD_INT 2
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 2
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 2
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 2
37406: NEG
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: NEG
37430: PUSH
37431: LD_INT 2
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37460: LD_ADDR_VAR 0 20
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 2
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: PUSH
37586: LD_INT 1
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: NEG
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: NEG
37660: PUSH
37661: LD_INT 2
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37690: LD_ADDR_VAR 0 21
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 2
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37920: LD_ADDR_VAR 0 22
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38150: LD_ADDR_VAR 0 23
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: LD_INT 2
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 2
38361: NEG
38362: PUSH
38363: LD_INT 3
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: LD_INT 3
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38430: LD_ADDR_VAR 0 24
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: NEG
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: LD_INT 2
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 3
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38706: LD_ADDR_VAR 0 25
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: LD_INT 2
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 2
38882: NEG
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: NEG
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38980: LD_ADDR_VAR 0 26
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: LD_INT 2
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 3
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: LD_INT 3
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39256: LD_ADDR_VAR 0 27
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: LD_INT 2
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 3
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 3
39501: NEG
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39536: LD_ADDR_VAR 0 28
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: NEG
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: NEG
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 3
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 3
39783: NEG
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39818: LD_ADDR_VAR 0 29
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: NEG
40009: PUSH
40010: LD_INT 3
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 3
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: NEG
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40097: LD_ADDR_VAR 0 30
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 3
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 3
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: LD_INT 1
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 3
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40375: LD_ADDR_VAR 0 31
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 3
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 2
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 3
40618: NEG
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40653: LD_ADDR_VAR 0 32
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: LD_INT 2
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 3
40896: NEG
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40931: LD_ADDR_VAR 0 33
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: LD_INT 3
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 3
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 3
41175: NEG
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41210: LD_ADDR_VAR 0 34
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 3
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 3
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: LD_INT 3
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 3
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41490: LD_ADDR_VAR 0 35
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 2
41581: NEG
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41602: LD_ADDR_VAR 0 36
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41714: LD_ADDR_VAR 0 37
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 1
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41826: LD_ADDR_VAR 0 38
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41938: LD_ADDR_VAR 0 39
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42050: LD_ADDR_VAR 0 40
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42162: LD_ADDR_VAR 0 41
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: LD_INT 3
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 3
42395: PUSH
42396: LD_INT 2
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 3
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 3
42436: NEG
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 3
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 3
42459: NEG
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 3
42471: NEG
42472: PUSH
42473: LD_INT 3
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42512: LD_ADDR_VAR 0 42
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: LD_INT 3
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 3
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 3
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 3
42758: PUSH
42759: LD_INT 3
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 3
42809: NEG
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 3
42821: NEG
42822: PUSH
42823: LD_INT 3
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42862: LD_ADDR_VAR 0 43
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: LD_INT 3
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 3
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 3
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 3
43158: NEG
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 3
43169: NEG
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43210: LD_ADDR_VAR 0 44
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: LD_INT 2
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: LD_INT 3
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 3
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 3
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 3
43484: NEG
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 3
43495: NEG
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 3
43507: NEG
43508: PUSH
43509: LD_INT 2
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: LD_INT 3
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43560: LD_ADDR_VAR 0 45
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 2
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 3
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 3
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 3
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 3
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 3
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 3
43869: NEG
43870: PUSH
43871: LD_INT 3
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43910: LD_ADDR_VAR 0 46
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 3
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 3
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 3
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 3
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 3
44206: NEG
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44258: LD_ADDR_VAR 0 47
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44409: LD_ADDR_VAR 0 48
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 0
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44556: LD_ADDR_VAR 0 49
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44700: LD_ADDR_VAR 0 50
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44844: LD_ADDR_VAR 0 51
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44991: LD_ADDR_VAR 0 52
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45142: LD_ADDR_VAR 0 53
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 2
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45372: LD_ADDR_VAR 0 54
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45602: LD_ADDR_VAR 0 55
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45832: LD_ADDR_VAR 0 56
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: NEG
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46062: LD_ADDR_VAR 0 57
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46292: LD_ADDR_VAR 0 58
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46522: LD_ADDR_VAR 0 59
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46610: LD_ADDR_VAR 0 60
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46698: LD_ADDR_VAR 0 61
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46786: LD_ADDR_VAR 0 62
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46874: LD_ADDR_VAR 0 63
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46962: LD_ADDR_VAR 0 64
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: ST_TO_ADDR
// end ; 1 :
47050: GO 52947
47052: LD_INT 1
47054: DOUBLE
47055: EQUAL
47056: IFTRUE 47060
47058: GO 49683
47060: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47061: LD_ADDR_VAR 0 11
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 3
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 3
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47105: LD_ADDR_VAR 0 12
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 3
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: LIST
47145: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47146: LD_ADDR_VAR 0 13
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: LD_INT 2
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: PUSH
47164: LD_INT 3
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: LD_INT 3
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: LIST
47185: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47186: LD_ADDR_VAR 0 14
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47227: LD_ADDR_VAR 0 15
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47271: LD_ADDR_VAR 0 16
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 3
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 3
47290: NEG
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 3
47302: NEG
47303: PUSH
47304: LD_INT 3
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47317: LD_ADDR_VAR 0 17
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47361: LD_ADDR_VAR 0 18
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47402: LD_ADDR_VAR 0 19
47406: PUSH
47407: LD_INT 3
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: LD_INT 3
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47442: LD_ADDR_VAR 0 20
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 3
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47483: LD_ADDR_VAR 0 21
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 3
47501: NEG
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47527: LD_ADDR_VAR 0 22
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 3
47546: NEG
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 3
47558: NEG
47559: PUSH
47560: LD_INT 3
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47573: LD_ADDR_VAR 0 23
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 3
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: LD_INT 4
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: LIST
47616: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47617: LD_ADDR_VAR 0 24
47621: PUSH
47622: LD_INT 3
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 4
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47658: LD_ADDR_VAR 0 25
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 3
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 4
47675: PUSH
47676: LD_INT 3
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47698: LD_ADDR_VAR 0 26
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: LD_INT 3
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 4
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: LIST
47738: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47739: LD_ADDR_VAR 0 27
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 4
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47783: LD_ADDR_VAR 0 28
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 3
47802: NEG
47803: PUSH
47804: LD_INT 4
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 4
47814: NEG
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47829: LD_ADDR_VAR 0 29
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 3
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 3
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: NEG
47871: PUSH
47872: LD_INT 4
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 4
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: LD_INT 3
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: LD_INT 5
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 5
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 4
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 6
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 6
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 5
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47984: LD_ADDR_VAR 0 30
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 3
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 4
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 4
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 4
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 5
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 5
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 5
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 6
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 6
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48127: LD_ADDR_VAR 0 31
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 4
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 4
48174: PUSH
48175: LD_INT 4
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 3
48184: PUSH
48185: LD_INT 4
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 5
48194: PUSH
48195: LD_INT 4
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 5
48204: PUSH
48205: LD_INT 5
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 4
48214: PUSH
48215: LD_INT 5
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 6
48224: PUSH
48225: LD_INT 5
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 6
48234: PUSH
48235: LD_INT 6
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 5
48244: PUSH
48245: LD_INT 6
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48266: LD_ADDR_VAR 0 32
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: LD_INT 3
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: LD_INT 4
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 4
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 5
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 5
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: LD_INT 4
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 6
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 6
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 5
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48409: LD_ADDR_VAR 0 33
48413: PUSH
48414: LD_INT 2
48416: NEG
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 3
48427: NEG
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 4
48461: NEG
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 4
48472: NEG
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 4
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 5
48495: NEG
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 5
48506: NEG
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 5
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 6
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 6
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48564: LD_ADDR_VAR 0 34
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: LD_INT 3
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 3
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: LD_INT 4
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 4
48619: NEG
48620: PUSH
48621: LD_INT 3
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 4
48631: NEG
48632: PUSH
48633: LD_INT 4
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 4
48643: NEG
48644: PUSH
48645: LD_INT 5
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 5
48655: NEG
48656: PUSH
48657: LD_INT 4
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 5
48667: NEG
48668: PUSH
48669: LD_INT 5
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 5
48679: NEG
48680: PUSH
48681: LD_INT 6
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 6
48691: NEG
48692: PUSH
48693: LD_INT 5
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 6
48703: NEG
48704: PUSH
48705: LD_INT 6
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48727: LD_ADDR_VAR 0 41
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 2
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48771: LD_ADDR_VAR 0 42
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: LIST
48811: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48812: LD_ADDR_VAR 0 43
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48852: LD_ADDR_VAR 0 44
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48893: LD_ADDR_VAR 0 45
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: LIST
48936: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48937: LD_ADDR_VAR 0 46
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: NEG
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: LIST
48982: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48983: LD_ADDR_VAR 0 47
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 3
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49016: LD_ADDR_VAR 0 48
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49047: LD_ADDR_VAR 0 49
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49076: LD_ADDR_VAR 0 50
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49105: LD_ADDR_VAR 0 51
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49136: LD_ADDR_VAR 0 52
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49169: LD_ADDR_VAR 0 53
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 3
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: LIST
49212: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49213: LD_ADDR_VAR 0 54
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 3
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 3
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: LIST
49253: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49254: LD_ADDR_VAR 0 55
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 3
49271: PUSH
49272: LD_INT 3
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 3
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49294: LD_ADDR_VAR 0 56
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 3
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49335: LD_ADDR_VAR 0 57
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 3
49353: NEG
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49379: LD_ADDR_VAR 0 58
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: LD_INT 3
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 3
49398: NEG
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: NEG
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49425: LD_ADDR_VAR 0 59
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: LIST
49468: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49469: LD_ADDR_VAR 0 60
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: LIST
49509: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49510: LD_ADDR_VAR 0 61
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49550: LD_ADDR_VAR 0 62
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49591: LD_ADDR_VAR 0 63
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49635: LD_ADDR_VAR 0 64
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: ST_TO_ADDR
// end ; 2 :
49681: GO 52947
49683: LD_INT 2
49685: DOUBLE
49686: EQUAL
49687: IFTRUE 49691
49689: GO 52946
49691: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49692: LD_ADDR_VAR 0 29
49696: PUSH
49697: LD_INT 4
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 4
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 5
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 5
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 4
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 3
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 3
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 5
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 3
49792: PUSH
49793: LD_INT 3
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 4
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 4
49822: PUSH
49823: LD_INT 4
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: PUSH
49833: LD_INT 4
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 4
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 4
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 3
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 4
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: LD_INT 5
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 5
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 4
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 5
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 3
49975: NEG
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 3
49986: NEG
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 4
50031: NEG
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 4
50054: NEG
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 4
50077: NEG
50078: PUSH
50079: LD_INT 4
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 4
50089: NEG
50090: PUSH
50091: LD_INT 5
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: LD_INT 4
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 4
50125: NEG
50126: PUSH
50127: LD_INT 3
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 5
50137: NEG
50138: PUSH
50139: LD_INT 4
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 5
50149: NEG
50150: PUSH
50151: LD_INT 5
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 3
50161: NEG
50162: PUSH
50163: LD_INT 5
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 5
50173: NEG
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50230: LD_ADDR_VAR 0 30
50234: PUSH
50235: LD_INT 4
50237: PUSH
50238: LD_INT 4
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 4
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 5
50257: PUSH
50258: LD_INT 4
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 5
50267: PUSH
50268: LD_INT 5
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 4
50277: PUSH
50278: LD_INT 5
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: LD_INT 4
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 5
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: LD_INT 5
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 4
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 4
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 3
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 4
50420: NEG
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 4
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 4
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 5
50476: NEG
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 5
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 5
50499: NEG
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 3
50534: NEG
50535: PUSH
50536: LD_INT 4
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 3
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 2
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 4
50582: NEG
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 4
50594: NEG
50595: PUSH
50596: LD_INT 4
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 4
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 4
50618: NEG
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: LD_INT 4
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 5
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 4
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 3
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 4
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 5
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 5
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50777: LD_ADDR_VAR 0 31
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 4
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 4
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 5
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 5
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 4
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 5
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 3
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 3
50877: NEG
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 4
50933: NEG
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 4
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 4
50956: NEG
50957: PUSH
50958: LD_INT 2
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 4
50979: NEG
50980: PUSH
50981: LD_INT 4
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 4
50991: NEG
50992: PUSH
50993: LD_INT 5
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 3
51003: NEG
51004: PUSH
51005: LD_INT 4
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 3
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 4
51027: NEG
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 5
51039: NEG
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 5
51051: NEG
51052: PUSH
51053: LD_INT 5
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: LD_INT 5
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 5
51075: NEG
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 3
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 4
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 3
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 4
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: LD_INT 4
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 4
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 5
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 5
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 4
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 5
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51327: LD_ADDR_VAR 0 32
51331: PUSH
51332: LD_INT 4
51334: NEG
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 4
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: NEG
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 4
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 5
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 5
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 5
51413: NEG
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 3
51448: NEG
51449: PUSH
51450: LD_INT 4
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 3
51484: NEG
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 4
51496: NEG
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 4
51508: NEG
51509: PUSH
51510: LD_INT 4
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 4
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 4
51532: NEG
51533: PUSH
51534: LD_INT 2
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 4
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 5
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 4
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 4
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 5
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 3
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: LD_INT 5
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 4
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 4
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 4
51729: PUSH
51730: LD_INT 2
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 4
51739: PUSH
51740: LD_INT 4
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 5
51759: PUSH
51760: LD_INT 4
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 5
51769: PUSH
51770: LD_INT 5
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 4
51779: PUSH
51780: LD_INT 5
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 3
51789: PUSH
51790: LD_INT 4
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: PUSH
51800: LD_INT 3
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 5
51809: PUSH
51810: LD_INT 3
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 5
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51874: LD_ADDR_VAR 0 33
51878: PUSH
51879: LD_INT 4
51881: NEG
51882: PUSH
51883: LD_INT 4
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 4
51893: NEG
51894: PUSH
51895: LD_INT 5
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: NEG
51906: PUSH
51907: LD_INT 4
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 3
51917: NEG
51918: PUSH
51919: LD_INT 3
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 4
51929: NEG
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 5
51941: NEG
51942: PUSH
51943: LD_INT 4
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 5
51953: NEG
51954: PUSH
51955: LD_INT 5
51957: NEG
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: NEG
51966: PUSH
51967: LD_INT 5
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 5
51977: NEG
51978: PUSH
51979: LD_INT 3
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 4
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: LD_INT 4
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 4
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 4
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 5
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 5
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 4
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 3
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 5
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 4
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 4
52214: PUSH
52215: LD_INT 4
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: LD_INT 4
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 2
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: LD_INT 2
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 4
52254: PUSH
52255: LD_INT 2
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 4
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 3
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 4
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 5
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 5
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 4
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 5
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52412: LD_ADDR_VAR 0 34
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: LD_INT 4
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 5
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: LD_INT 4
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: LD_INT 4
52478: NEG
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 5
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: LD_INT 5
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 4
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 4
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 4
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 4
52614: PUSH
52615: LD_INT 4
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 4
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 5
52634: PUSH
52635: LD_INT 4
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 5
52644: PUSH
52645: LD_INT 5
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 4
52654: PUSH
52655: LD_INT 5
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: LD_INT 4
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 5
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: LD_INT 5
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 4
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 4
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: NEG
52787: PUSH
52788: LD_INT 2
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 4
52797: NEG
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 4
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 4
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 5
52853: NEG
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 5
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 5
52876: NEG
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 3
52888: NEG
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: ST_TO_ADDR
// end ; end ;
52944: GO 52947
52946: POP
// case btype of b_depot , b_warehouse :
52947: LD_VAR 0 1
52951: PUSH
52952: LD_INT 0
52954: DOUBLE
52955: EQUAL
52956: IFTRUE 52966
52958: LD_INT 1
52960: DOUBLE
52961: EQUAL
52962: IFTRUE 52966
52964: GO 53167
52966: POP
// case nation of nation_american :
52967: LD_VAR 0 5
52971: PUSH
52972: LD_INT 1
52974: DOUBLE
52975: EQUAL
52976: IFTRUE 52980
52978: GO 53036
52980: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52981: LD_ADDR_VAR 0 9
52985: PUSH
52986: LD_VAR 0 11
52990: PUSH
52991: LD_VAR 0 12
52995: PUSH
52996: LD_VAR 0 13
53000: PUSH
53001: LD_VAR 0 14
53005: PUSH
53006: LD_VAR 0 15
53010: PUSH
53011: LD_VAR 0 16
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: PUSH
53024: LD_VAR 0 4
53028: PUSH
53029: LD_INT 1
53031: PLUS
53032: ARRAY
53033: ST_TO_ADDR
53034: GO 53165
53036: LD_INT 2
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53044
53042: GO 53100
53044: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53045: LD_ADDR_VAR 0 9
53049: PUSH
53050: LD_VAR 0 17
53054: PUSH
53055: LD_VAR 0 18
53059: PUSH
53060: LD_VAR 0 19
53064: PUSH
53065: LD_VAR 0 20
53069: PUSH
53070: LD_VAR 0 21
53074: PUSH
53075: LD_VAR 0 22
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: PUSH
53088: LD_VAR 0 4
53092: PUSH
53093: LD_INT 1
53095: PLUS
53096: ARRAY
53097: ST_TO_ADDR
53098: GO 53165
53100: LD_INT 3
53102: DOUBLE
53103: EQUAL
53104: IFTRUE 53108
53106: GO 53164
53108: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53109: LD_ADDR_VAR 0 9
53113: PUSH
53114: LD_VAR 0 23
53118: PUSH
53119: LD_VAR 0 24
53123: PUSH
53124: LD_VAR 0 25
53128: PUSH
53129: LD_VAR 0 26
53133: PUSH
53134: LD_VAR 0 27
53138: PUSH
53139: LD_VAR 0 28
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: PUSH
53152: LD_VAR 0 4
53156: PUSH
53157: LD_INT 1
53159: PLUS
53160: ARRAY
53161: ST_TO_ADDR
53162: GO 53165
53164: POP
53165: GO 53720
53167: LD_INT 2
53169: DOUBLE
53170: EQUAL
53171: IFTRUE 53181
53173: LD_INT 3
53175: DOUBLE
53176: EQUAL
53177: IFTRUE 53181
53179: GO 53237
53181: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53182: LD_ADDR_VAR 0 9
53186: PUSH
53187: LD_VAR 0 29
53191: PUSH
53192: LD_VAR 0 30
53196: PUSH
53197: LD_VAR 0 31
53201: PUSH
53202: LD_VAR 0 32
53206: PUSH
53207: LD_VAR 0 33
53211: PUSH
53212: LD_VAR 0 34
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: PUSH
53225: LD_VAR 0 4
53229: PUSH
53230: LD_INT 1
53232: PLUS
53233: ARRAY
53234: ST_TO_ADDR
53235: GO 53720
53237: LD_INT 16
53239: DOUBLE
53240: EQUAL
53241: IFTRUE 53299
53243: LD_INT 17
53245: DOUBLE
53246: EQUAL
53247: IFTRUE 53299
53249: LD_INT 18
53251: DOUBLE
53252: EQUAL
53253: IFTRUE 53299
53255: LD_INT 19
53257: DOUBLE
53258: EQUAL
53259: IFTRUE 53299
53261: LD_INT 22
53263: DOUBLE
53264: EQUAL
53265: IFTRUE 53299
53267: LD_INT 20
53269: DOUBLE
53270: EQUAL
53271: IFTRUE 53299
53273: LD_INT 21
53275: DOUBLE
53276: EQUAL
53277: IFTRUE 53299
53279: LD_INT 23
53281: DOUBLE
53282: EQUAL
53283: IFTRUE 53299
53285: LD_INT 24
53287: DOUBLE
53288: EQUAL
53289: IFTRUE 53299
53291: LD_INT 25
53293: DOUBLE
53294: EQUAL
53295: IFTRUE 53299
53297: GO 53355
53299: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53300: LD_ADDR_VAR 0 9
53304: PUSH
53305: LD_VAR 0 35
53309: PUSH
53310: LD_VAR 0 36
53314: PUSH
53315: LD_VAR 0 37
53319: PUSH
53320: LD_VAR 0 38
53324: PUSH
53325: LD_VAR 0 39
53329: PUSH
53330: LD_VAR 0 40
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: PUSH
53343: LD_VAR 0 4
53347: PUSH
53348: LD_INT 1
53350: PLUS
53351: ARRAY
53352: ST_TO_ADDR
53353: GO 53720
53355: LD_INT 6
53357: DOUBLE
53358: EQUAL
53359: IFTRUE 53411
53361: LD_INT 7
53363: DOUBLE
53364: EQUAL
53365: IFTRUE 53411
53367: LD_INT 8
53369: DOUBLE
53370: EQUAL
53371: IFTRUE 53411
53373: LD_INT 13
53375: DOUBLE
53376: EQUAL
53377: IFTRUE 53411
53379: LD_INT 12
53381: DOUBLE
53382: EQUAL
53383: IFTRUE 53411
53385: LD_INT 15
53387: DOUBLE
53388: EQUAL
53389: IFTRUE 53411
53391: LD_INT 11
53393: DOUBLE
53394: EQUAL
53395: IFTRUE 53411
53397: LD_INT 14
53399: DOUBLE
53400: EQUAL
53401: IFTRUE 53411
53403: LD_INT 10
53405: DOUBLE
53406: EQUAL
53407: IFTRUE 53411
53409: GO 53467
53411: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53412: LD_ADDR_VAR 0 9
53416: PUSH
53417: LD_VAR 0 41
53421: PUSH
53422: LD_VAR 0 42
53426: PUSH
53427: LD_VAR 0 43
53431: PUSH
53432: LD_VAR 0 44
53436: PUSH
53437: LD_VAR 0 45
53441: PUSH
53442: LD_VAR 0 46
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: PUSH
53455: LD_VAR 0 4
53459: PUSH
53460: LD_INT 1
53462: PLUS
53463: ARRAY
53464: ST_TO_ADDR
53465: GO 53720
53467: LD_INT 36
53469: DOUBLE
53470: EQUAL
53471: IFTRUE 53475
53473: GO 53531
53475: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53476: LD_ADDR_VAR 0 9
53480: PUSH
53481: LD_VAR 0 47
53485: PUSH
53486: LD_VAR 0 48
53490: PUSH
53491: LD_VAR 0 49
53495: PUSH
53496: LD_VAR 0 50
53500: PUSH
53501: LD_VAR 0 51
53505: PUSH
53506: LD_VAR 0 52
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: PUSH
53519: LD_VAR 0 4
53523: PUSH
53524: LD_INT 1
53526: PLUS
53527: ARRAY
53528: ST_TO_ADDR
53529: GO 53720
53531: LD_INT 4
53533: DOUBLE
53534: EQUAL
53535: IFTRUE 53557
53537: LD_INT 5
53539: DOUBLE
53540: EQUAL
53541: IFTRUE 53557
53543: LD_INT 34
53545: DOUBLE
53546: EQUAL
53547: IFTRUE 53557
53549: LD_INT 37
53551: DOUBLE
53552: EQUAL
53553: IFTRUE 53557
53555: GO 53613
53557: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53558: LD_ADDR_VAR 0 9
53562: PUSH
53563: LD_VAR 0 53
53567: PUSH
53568: LD_VAR 0 54
53572: PUSH
53573: LD_VAR 0 55
53577: PUSH
53578: LD_VAR 0 56
53582: PUSH
53583: LD_VAR 0 57
53587: PUSH
53588: LD_VAR 0 58
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: PUSH
53601: LD_VAR 0 4
53605: PUSH
53606: LD_INT 1
53608: PLUS
53609: ARRAY
53610: ST_TO_ADDR
53611: GO 53720
53613: LD_INT 31
53615: DOUBLE
53616: EQUAL
53617: IFTRUE 53663
53619: LD_INT 32
53621: DOUBLE
53622: EQUAL
53623: IFTRUE 53663
53625: LD_INT 33
53627: DOUBLE
53628: EQUAL
53629: IFTRUE 53663
53631: LD_INT 27
53633: DOUBLE
53634: EQUAL
53635: IFTRUE 53663
53637: LD_INT 26
53639: DOUBLE
53640: EQUAL
53641: IFTRUE 53663
53643: LD_INT 28
53645: DOUBLE
53646: EQUAL
53647: IFTRUE 53663
53649: LD_INT 29
53651: DOUBLE
53652: EQUAL
53653: IFTRUE 53663
53655: LD_INT 30
53657: DOUBLE
53658: EQUAL
53659: IFTRUE 53663
53661: GO 53719
53663: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53664: LD_ADDR_VAR 0 9
53668: PUSH
53669: LD_VAR 0 59
53673: PUSH
53674: LD_VAR 0 60
53678: PUSH
53679: LD_VAR 0 61
53683: PUSH
53684: LD_VAR 0 62
53688: PUSH
53689: LD_VAR 0 63
53693: PUSH
53694: LD_VAR 0 64
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: PUSH
53707: LD_VAR 0 4
53711: PUSH
53712: LD_INT 1
53714: PLUS
53715: ARRAY
53716: ST_TO_ADDR
53717: GO 53720
53719: POP
// temp_list2 = [ ] ;
53720: LD_ADDR_VAR 0 10
53724: PUSH
53725: EMPTY
53726: ST_TO_ADDR
// for i in temp_list do
53727: LD_ADDR_VAR 0 8
53731: PUSH
53732: LD_VAR 0 9
53736: PUSH
53737: FOR_IN
53738: IFFALSE 53790
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53740: LD_ADDR_VAR 0 10
53744: PUSH
53745: LD_VAR 0 10
53749: PUSH
53750: LD_VAR 0 8
53754: PUSH
53755: LD_INT 1
53757: ARRAY
53758: PUSH
53759: LD_VAR 0 2
53763: PLUS
53764: PUSH
53765: LD_VAR 0 8
53769: PUSH
53770: LD_INT 2
53772: ARRAY
53773: PUSH
53774: LD_VAR 0 3
53778: PLUS
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: EMPTY
53785: LIST
53786: ADD
53787: ST_TO_ADDR
53788: GO 53737
53790: POP
53791: POP
// result = temp_list2 ;
53792: LD_ADDR_VAR 0 7
53796: PUSH
53797: LD_VAR 0 10
53801: ST_TO_ADDR
// end ;
53802: LD_VAR 0 7
53806: RET
// export function EnemyInRange ( unit , dist ) ; begin
53807: LD_INT 0
53809: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53810: LD_ADDR_VAR 0 3
53814: PUSH
53815: LD_VAR 0 1
53819: PPUSH
53820: CALL_OW 255
53824: PPUSH
53825: LD_VAR 0 1
53829: PPUSH
53830: CALL_OW 250
53834: PPUSH
53835: LD_VAR 0 1
53839: PPUSH
53840: CALL_OW 251
53844: PPUSH
53845: LD_VAR 0 2
53849: PPUSH
53850: CALL 27180 0 4
53854: PUSH
53855: LD_INT 4
53857: ARRAY
53858: ST_TO_ADDR
// end ;
53859: LD_VAR 0 3
53863: RET
// export function PlayerSeeMe ( unit ) ; begin
53864: LD_INT 0
53866: PPUSH
// result := See ( your_side , unit ) ;
53867: LD_ADDR_VAR 0 2
53871: PUSH
53872: LD_OWVAR 2
53876: PPUSH
53877: LD_VAR 0 1
53881: PPUSH
53882: CALL_OW 292
53886: ST_TO_ADDR
// end ;
53887: LD_VAR 0 2
53891: RET
// export function ReverseDir ( unit ) ; begin
53892: LD_INT 0
53894: PPUSH
// if not unit then
53895: LD_VAR 0 1
53899: NOT
53900: IFFALSE 53904
// exit ;
53902: GO 53927
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53904: LD_ADDR_VAR 0 2
53908: PUSH
53909: LD_VAR 0 1
53913: PPUSH
53914: CALL_OW 254
53918: PUSH
53919: LD_INT 3
53921: PLUS
53922: PUSH
53923: LD_INT 6
53925: MOD
53926: ST_TO_ADDR
// end ;
53927: LD_VAR 0 2
53931: RET
// export function ReverseArray ( array ) ; var i ; begin
53932: LD_INT 0
53934: PPUSH
53935: PPUSH
// if not array then
53936: LD_VAR 0 1
53940: NOT
53941: IFFALSE 53945
// exit ;
53943: GO 54000
// result := [ ] ;
53945: LD_ADDR_VAR 0 2
53949: PUSH
53950: EMPTY
53951: ST_TO_ADDR
// for i := array downto 1 do
53952: LD_ADDR_VAR 0 3
53956: PUSH
53957: DOUBLE
53958: LD_VAR 0 1
53962: INC
53963: ST_TO_ADDR
53964: LD_INT 1
53966: PUSH
53967: FOR_DOWNTO
53968: IFFALSE 53998
// result := Join ( result , array [ i ] ) ;
53970: LD_ADDR_VAR 0 2
53974: PUSH
53975: LD_VAR 0 2
53979: PPUSH
53980: LD_VAR 0 1
53984: PUSH
53985: LD_VAR 0 3
53989: ARRAY
53990: PPUSH
53991: CALL 58665 0 2
53995: ST_TO_ADDR
53996: GO 53967
53998: POP
53999: POP
// end ;
54000: LD_VAR 0 2
54004: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54005: LD_INT 0
54007: PPUSH
54008: PPUSH
54009: PPUSH
54010: PPUSH
54011: PPUSH
54012: PPUSH
// if not unit or not hexes then
54013: LD_VAR 0 1
54017: NOT
54018: PUSH
54019: LD_VAR 0 2
54023: NOT
54024: OR
54025: IFFALSE 54029
// exit ;
54027: GO 54152
// dist := 9999 ;
54029: LD_ADDR_VAR 0 5
54033: PUSH
54034: LD_INT 9999
54036: ST_TO_ADDR
// for i = 1 to hexes do
54037: LD_ADDR_VAR 0 4
54041: PUSH
54042: DOUBLE
54043: LD_INT 1
54045: DEC
54046: ST_TO_ADDR
54047: LD_VAR 0 2
54051: PUSH
54052: FOR_TO
54053: IFFALSE 54140
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54055: LD_ADDR_VAR 0 6
54059: PUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_VAR 0 2
54069: PUSH
54070: LD_VAR 0 4
54074: ARRAY
54075: PUSH
54076: LD_INT 1
54078: ARRAY
54079: PPUSH
54080: LD_VAR 0 2
54084: PUSH
54085: LD_VAR 0 4
54089: ARRAY
54090: PUSH
54091: LD_INT 2
54093: ARRAY
54094: PPUSH
54095: CALL_OW 297
54099: ST_TO_ADDR
// if tdist < dist then
54100: LD_VAR 0 6
54104: PUSH
54105: LD_VAR 0 5
54109: LESS
54110: IFFALSE 54138
// begin hex := hexes [ i ] ;
54112: LD_ADDR_VAR 0 8
54116: PUSH
54117: LD_VAR 0 2
54121: PUSH
54122: LD_VAR 0 4
54126: ARRAY
54127: ST_TO_ADDR
// dist := tdist ;
54128: LD_ADDR_VAR 0 5
54132: PUSH
54133: LD_VAR 0 6
54137: ST_TO_ADDR
// end ; end ;
54138: GO 54052
54140: POP
54141: POP
// result := hex ;
54142: LD_ADDR_VAR 0 3
54146: PUSH
54147: LD_VAR 0 8
54151: ST_TO_ADDR
// end ;
54152: LD_VAR 0 3
54156: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54157: LD_INT 0
54159: PPUSH
54160: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54161: LD_VAR 0 1
54165: NOT
54166: PUSH
54167: LD_VAR 0 1
54171: PUSH
54172: LD_INT 21
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 23
54184: PUSH
54185: LD_INT 2
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PPUSH
54196: CALL_OW 69
54200: IN
54201: NOT
54202: OR
54203: IFFALSE 54207
// exit ;
54205: GO 54254
// for i = 1 to 3 do
54207: LD_ADDR_VAR 0 3
54211: PUSH
54212: DOUBLE
54213: LD_INT 1
54215: DEC
54216: ST_TO_ADDR
54217: LD_INT 3
54219: PUSH
54220: FOR_TO
54221: IFFALSE 54252
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54223: LD_VAR 0 1
54227: PPUSH
54228: CALL_OW 250
54232: PPUSH
54233: LD_VAR 0 1
54237: PPUSH
54238: CALL_OW 251
54242: PPUSH
54243: LD_INT 1
54245: PPUSH
54246: CALL_OW 453
54250: GO 54220
54252: POP
54253: POP
// end ;
54254: LD_VAR 0 2
54258: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54259: LD_INT 0
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
// if not unit or not enemy_unit then
54267: LD_VAR 0 1
54271: NOT
54272: PUSH
54273: LD_VAR 0 2
54277: NOT
54278: OR
54279: IFFALSE 54283
// exit ;
54281: GO 54750
// if GetLives ( i ) < 250 then
54283: LD_VAR 0 4
54287: PPUSH
54288: CALL_OW 256
54292: PUSH
54293: LD_INT 250
54295: LESS
54296: IFFALSE 54309
// begin ComAutodestruct ( i ) ;
54298: LD_VAR 0 4
54302: PPUSH
54303: CALL 54157 0 1
// exit ;
54307: GO 54750
// end ; x := GetX ( enemy_unit ) ;
54309: LD_ADDR_VAR 0 7
54313: PUSH
54314: LD_VAR 0 2
54318: PPUSH
54319: CALL_OW 250
54323: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54324: LD_ADDR_VAR 0 8
54328: PUSH
54329: LD_VAR 0 2
54333: PPUSH
54334: CALL_OW 251
54338: ST_TO_ADDR
// if not x or not y then
54339: LD_VAR 0 7
54343: NOT
54344: PUSH
54345: LD_VAR 0 8
54349: NOT
54350: OR
54351: IFFALSE 54355
// exit ;
54353: GO 54750
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54355: LD_ADDR_VAR 0 6
54359: PUSH
54360: LD_VAR 0 7
54364: PPUSH
54365: LD_INT 0
54367: PPUSH
54368: LD_INT 4
54370: PPUSH
54371: CALL_OW 272
54375: PUSH
54376: LD_VAR 0 8
54380: PPUSH
54381: LD_INT 0
54383: PPUSH
54384: LD_INT 4
54386: PPUSH
54387: CALL_OW 273
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_VAR 0 7
54400: PPUSH
54401: LD_INT 1
54403: PPUSH
54404: LD_INT 4
54406: PPUSH
54407: CALL_OW 272
54411: PUSH
54412: LD_VAR 0 8
54416: PPUSH
54417: LD_INT 1
54419: PPUSH
54420: LD_INT 4
54422: PPUSH
54423: CALL_OW 273
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_VAR 0 7
54436: PPUSH
54437: LD_INT 2
54439: PPUSH
54440: LD_INT 4
54442: PPUSH
54443: CALL_OW 272
54447: PUSH
54448: LD_VAR 0 8
54452: PPUSH
54453: LD_INT 2
54455: PPUSH
54456: LD_INT 4
54458: PPUSH
54459: CALL_OW 273
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_VAR 0 7
54472: PPUSH
54473: LD_INT 3
54475: PPUSH
54476: LD_INT 4
54478: PPUSH
54479: CALL_OW 272
54483: PUSH
54484: LD_VAR 0 8
54488: PPUSH
54489: LD_INT 3
54491: PPUSH
54492: LD_INT 4
54494: PPUSH
54495: CALL_OW 273
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_VAR 0 7
54508: PPUSH
54509: LD_INT 4
54511: PPUSH
54512: LD_INT 4
54514: PPUSH
54515: CALL_OW 272
54519: PUSH
54520: LD_VAR 0 8
54524: PPUSH
54525: LD_INT 4
54527: PPUSH
54528: LD_INT 4
54530: PPUSH
54531: CALL_OW 273
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_VAR 0 7
54544: PPUSH
54545: LD_INT 5
54547: PPUSH
54548: LD_INT 4
54550: PPUSH
54551: CALL_OW 272
54555: PUSH
54556: LD_VAR 0 8
54560: PPUSH
54561: LD_INT 5
54563: PPUSH
54564: LD_INT 4
54566: PPUSH
54567: CALL_OW 273
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: ST_TO_ADDR
// for i = tmp downto 1 do
54584: LD_ADDR_VAR 0 4
54588: PUSH
54589: DOUBLE
54590: LD_VAR 0 6
54594: INC
54595: ST_TO_ADDR
54596: LD_INT 1
54598: PUSH
54599: FOR_DOWNTO
54600: IFFALSE 54701
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54602: LD_VAR 0 6
54606: PUSH
54607: LD_VAR 0 4
54611: ARRAY
54612: PUSH
54613: LD_INT 1
54615: ARRAY
54616: PPUSH
54617: LD_VAR 0 6
54621: PUSH
54622: LD_VAR 0 4
54626: ARRAY
54627: PUSH
54628: LD_INT 2
54630: ARRAY
54631: PPUSH
54632: CALL_OW 488
54636: NOT
54637: PUSH
54638: LD_VAR 0 6
54642: PUSH
54643: LD_VAR 0 4
54647: ARRAY
54648: PUSH
54649: LD_INT 1
54651: ARRAY
54652: PPUSH
54653: LD_VAR 0 6
54657: PUSH
54658: LD_VAR 0 4
54662: ARRAY
54663: PUSH
54664: LD_INT 2
54666: ARRAY
54667: PPUSH
54668: CALL_OW 428
54672: PUSH
54673: LD_INT 0
54675: NONEQUAL
54676: OR
54677: IFFALSE 54699
// tmp := Delete ( tmp , i ) ;
54679: LD_ADDR_VAR 0 6
54683: PUSH
54684: LD_VAR 0 6
54688: PPUSH
54689: LD_VAR 0 4
54693: PPUSH
54694: CALL_OW 3
54698: ST_TO_ADDR
54699: GO 54599
54701: POP
54702: POP
// j := GetClosestHex ( unit , tmp ) ;
54703: LD_ADDR_VAR 0 5
54707: PUSH
54708: LD_VAR 0 1
54712: PPUSH
54713: LD_VAR 0 6
54717: PPUSH
54718: CALL 54005 0 2
54722: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54723: LD_VAR 0 1
54727: PPUSH
54728: LD_VAR 0 5
54732: PUSH
54733: LD_INT 1
54735: ARRAY
54736: PPUSH
54737: LD_VAR 0 5
54741: PUSH
54742: LD_INT 2
54744: ARRAY
54745: PPUSH
54746: CALL_OW 111
// end ;
54750: LD_VAR 0 3
54754: RET
// export function PrepareApemanSoldier ( ) ; begin
54755: LD_INT 0
54757: PPUSH
// uc_nation := 0 ;
54758: LD_ADDR_OWVAR 21
54762: PUSH
54763: LD_INT 0
54765: ST_TO_ADDR
// hc_sex := sex_male ;
54766: LD_ADDR_OWVAR 27
54770: PUSH
54771: LD_INT 1
54773: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54774: LD_ADDR_OWVAR 28
54778: PUSH
54779: LD_INT 15
54781: ST_TO_ADDR
// hc_gallery :=  ;
54782: LD_ADDR_OWVAR 33
54786: PUSH
54787: LD_STRING 
54789: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54790: LD_ADDR_OWVAR 31
54794: PUSH
54795: LD_INT 0
54797: PPUSH
54798: LD_INT 3
54800: PPUSH
54801: CALL_OW 12
54805: PUSH
54806: LD_INT 0
54808: PPUSH
54809: LD_INT 3
54811: PPUSH
54812: CALL_OW 12
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: ST_TO_ADDR
// end ;
54829: LD_VAR 0 1
54833: RET
// export function PrepareApemanEngineer ( ) ; begin
54834: LD_INT 0
54836: PPUSH
// uc_nation := 0 ;
54837: LD_ADDR_OWVAR 21
54841: PUSH
54842: LD_INT 0
54844: ST_TO_ADDR
// hc_sex := sex_male ;
54845: LD_ADDR_OWVAR 27
54849: PUSH
54850: LD_INT 1
54852: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54853: LD_ADDR_OWVAR 28
54857: PUSH
54858: LD_INT 16
54860: ST_TO_ADDR
// hc_gallery :=  ;
54861: LD_ADDR_OWVAR 33
54865: PUSH
54866: LD_STRING 
54868: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54869: LD_ADDR_OWVAR 31
54873: PUSH
54874: LD_INT 0
54876: PPUSH
54877: LD_INT 3
54879: PPUSH
54880: CALL_OW 12
54884: PUSH
54885: LD_INT 0
54887: PPUSH
54888: LD_INT 3
54890: PPUSH
54891: CALL_OW 12
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: ST_TO_ADDR
// end ;
54908: LD_VAR 0 1
54912: RET
// export function PrepareApeman ( agressivity ) ; begin
54913: LD_INT 0
54915: PPUSH
// uc_side := 0 ;
54916: LD_ADDR_OWVAR 20
54920: PUSH
54921: LD_INT 0
54923: ST_TO_ADDR
// uc_nation := 0 ;
54924: LD_ADDR_OWVAR 21
54928: PUSH
54929: LD_INT 0
54931: ST_TO_ADDR
// hc_sex := sex_male ;
54932: LD_ADDR_OWVAR 27
54936: PUSH
54937: LD_INT 1
54939: ST_TO_ADDR
// hc_class := class_apeman ;
54940: LD_ADDR_OWVAR 28
54944: PUSH
54945: LD_INT 12
54947: ST_TO_ADDR
// hc_gallery :=  ;
54948: LD_ADDR_OWVAR 33
54952: PUSH
54953: LD_STRING 
54955: ST_TO_ADDR
// if agressivity = 0 then
54956: LD_VAR 0 1
54960: PUSH
54961: LD_INT 0
54963: EQUAL
54964: IFFALSE 54976
// hc_agressivity := 0 else
54966: LD_ADDR_OWVAR 35
54970: PUSH
54971: LD_INT 0
54973: ST_TO_ADDR
54974: GO 54997
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54976: LD_ADDR_OWVAR 35
54980: PUSH
54981: LD_VAR 0 1
54985: NEG
54986: PPUSH
54987: LD_VAR 0 1
54991: PPUSH
54992: CALL_OW 12
54996: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54997: LD_ADDR_OWVAR 31
55001: PUSH
55002: LD_INT 0
55004: PPUSH
55005: LD_INT 3
55007: PPUSH
55008: CALL_OW 12
55012: PUSH
55013: LD_INT 0
55015: PPUSH
55016: LD_INT 3
55018: PPUSH
55019: CALL_OW 12
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: ST_TO_ADDR
// end ;
55036: LD_VAR 0 2
55040: RET
// export function PrepareTiger ( agressivity ) ; begin
55041: LD_INT 0
55043: PPUSH
// uc_side := 0 ;
55044: LD_ADDR_OWVAR 20
55048: PUSH
55049: LD_INT 0
55051: ST_TO_ADDR
// uc_nation := 0 ;
55052: LD_ADDR_OWVAR 21
55056: PUSH
55057: LD_INT 0
55059: ST_TO_ADDR
// hc_class := class_tiger ;
55060: LD_ADDR_OWVAR 28
55064: PUSH
55065: LD_INT 14
55067: ST_TO_ADDR
// hc_gallery :=  ;
55068: LD_ADDR_OWVAR 33
55072: PUSH
55073: LD_STRING 
55075: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55076: LD_ADDR_OWVAR 35
55080: PUSH
55081: LD_VAR 0 1
55085: NEG
55086: PPUSH
55087: LD_VAR 0 1
55091: PPUSH
55092: CALL_OW 12
55096: ST_TO_ADDR
// end ;
55097: LD_VAR 0 2
55101: RET
// export function PrepareEnchidna ( ) ; begin
55102: LD_INT 0
55104: PPUSH
// uc_side := 0 ;
55105: LD_ADDR_OWVAR 20
55109: PUSH
55110: LD_INT 0
55112: ST_TO_ADDR
// uc_nation := 0 ;
55113: LD_ADDR_OWVAR 21
55117: PUSH
55118: LD_INT 0
55120: ST_TO_ADDR
// hc_class := class_baggie ;
55121: LD_ADDR_OWVAR 28
55125: PUSH
55126: LD_INT 13
55128: ST_TO_ADDR
// hc_gallery :=  ;
55129: LD_ADDR_OWVAR 33
55133: PUSH
55134: LD_STRING 
55136: ST_TO_ADDR
// end ;
55137: LD_VAR 0 1
55141: RET
// export function PrepareFrog ( ) ; begin
55142: LD_INT 0
55144: PPUSH
// uc_side := 0 ;
55145: LD_ADDR_OWVAR 20
55149: PUSH
55150: LD_INT 0
55152: ST_TO_ADDR
// uc_nation := 0 ;
55153: LD_ADDR_OWVAR 21
55157: PUSH
55158: LD_INT 0
55160: ST_TO_ADDR
// hc_class := class_frog ;
55161: LD_ADDR_OWVAR 28
55165: PUSH
55166: LD_INT 19
55168: ST_TO_ADDR
// hc_gallery :=  ;
55169: LD_ADDR_OWVAR 33
55173: PUSH
55174: LD_STRING 
55176: ST_TO_ADDR
// end ;
55177: LD_VAR 0 1
55181: RET
// export function PrepareFish ( ) ; begin
55182: LD_INT 0
55184: PPUSH
// uc_side := 0 ;
55185: LD_ADDR_OWVAR 20
55189: PUSH
55190: LD_INT 0
55192: ST_TO_ADDR
// uc_nation := 0 ;
55193: LD_ADDR_OWVAR 21
55197: PUSH
55198: LD_INT 0
55200: ST_TO_ADDR
// hc_class := class_fish ;
55201: LD_ADDR_OWVAR 28
55205: PUSH
55206: LD_INT 20
55208: ST_TO_ADDR
// hc_gallery :=  ;
55209: LD_ADDR_OWVAR 33
55213: PUSH
55214: LD_STRING 
55216: ST_TO_ADDR
// end ;
55217: LD_VAR 0 1
55221: RET
// export function PrepareBird ( ) ; begin
55222: LD_INT 0
55224: PPUSH
// uc_side := 0 ;
55225: LD_ADDR_OWVAR 20
55229: PUSH
55230: LD_INT 0
55232: ST_TO_ADDR
// uc_nation := 0 ;
55233: LD_ADDR_OWVAR 21
55237: PUSH
55238: LD_INT 0
55240: ST_TO_ADDR
// hc_class := class_phororhacos ;
55241: LD_ADDR_OWVAR 28
55245: PUSH
55246: LD_INT 18
55248: ST_TO_ADDR
// hc_gallery :=  ;
55249: LD_ADDR_OWVAR 33
55253: PUSH
55254: LD_STRING 
55256: ST_TO_ADDR
// end ;
55257: LD_VAR 0 1
55261: RET
// export function PrepareHorse ( ) ; begin
55262: LD_INT 0
55264: PPUSH
// uc_side := 0 ;
55265: LD_ADDR_OWVAR 20
55269: PUSH
55270: LD_INT 0
55272: ST_TO_ADDR
// uc_nation := 0 ;
55273: LD_ADDR_OWVAR 21
55277: PUSH
55278: LD_INT 0
55280: ST_TO_ADDR
// hc_class := class_horse ;
55281: LD_ADDR_OWVAR 28
55285: PUSH
55286: LD_INT 21
55288: ST_TO_ADDR
// hc_gallery :=  ;
55289: LD_ADDR_OWVAR 33
55293: PUSH
55294: LD_STRING 
55296: ST_TO_ADDR
// end ;
55297: LD_VAR 0 1
55301: RET
// export function PrepareMastodont ( ) ; begin
55302: LD_INT 0
55304: PPUSH
// uc_side := 0 ;
55305: LD_ADDR_OWVAR 20
55309: PUSH
55310: LD_INT 0
55312: ST_TO_ADDR
// uc_nation := 0 ;
55313: LD_ADDR_OWVAR 21
55317: PUSH
55318: LD_INT 0
55320: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55321: LD_ADDR_OWVAR 37
55325: PUSH
55326: LD_INT 31
55328: ST_TO_ADDR
// vc_control := control_rider ;
55329: LD_ADDR_OWVAR 38
55333: PUSH
55334: LD_INT 4
55336: ST_TO_ADDR
// end ;
55337: LD_VAR 0 1
55341: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55342: LD_INT 0
55344: PPUSH
55345: PPUSH
55346: PPUSH
// uc_side = 0 ;
55347: LD_ADDR_OWVAR 20
55351: PUSH
55352: LD_INT 0
55354: ST_TO_ADDR
// uc_nation = 0 ;
55355: LD_ADDR_OWVAR 21
55359: PUSH
55360: LD_INT 0
55362: ST_TO_ADDR
// InitHc_All ( ) ;
55363: CALL_OW 584
// InitVc ;
55367: CALL_OW 20
// if mastodonts then
55371: LD_VAR 0 6
55375: IFFALSE 55442
// for i = 1 to mastodonts do
55377: LD_ADDR_VAR 0 11
55381: PUSH
55382: DOUBLE
55383: LD_INT 1
55385: DEC
55386: ST_TO_ADDR
55387: LD_VAR 0 6
55391: PUSH
55392: FOR_TO
55393: IFFALSE 55440
// begin vc_chassis := 31 ;
55395: LD_ADDR_OWVAR 37
55399: PUSH
55400: LD_INT 31
55402: ST_TO_ADDR
// vc_control := control_rider ;
55403: LD_ADDR_OWVAR 38
55407: PUSH
55408: LD_INT 4
55410: ST_TO_ADDR
// animal := CreateVehicle ;
55411: LD_ADDR_VAR 0 12
55415: PUSH
55416: CALL_OW 45
55420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55421: LD_VAR 0 12
55425: PPUSH
55426: LD_VAR 0 8
55430: PPUSH
55431: LD_INT 0
55433: PPUSH
55434: CALL 57570 0 3
// end ;
55438: GO 55392
55440: POP
55441: POP
// if horses then
55442: LD_VAR 0 5
55446: IFFALSE 55513
// for i = 1 to horses do
55448: LD_ADDR_VAR 0 11
55452: PUSH
55453: DOUBLE
55454: LD_INT 1
55456: DEC
55457: ST_TO_ADDR
55458: LD_VAR 0 5
55462: PUSH
55463: FOR_TO
55464: IFFALSE 55511
// begin hc_class := 21 ;
55466: LD_ADDR_OWVAR 28
55470: PUSH
55471: LD_INT 21
55473: ST_TO_ADDR
// hc_gallery :=  ;
55474: LD_ADDR_OWVAR 33
55478: PUSH
55479: LD_STRING 
55481: ST_TO_ADDR
// animal := CreateHuman ;
55482: LD_ADDR_VAR 0 12
55486: PUSH
55487: CALL_OW 44
55491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55492: LD_VAR 0 12
55496: PPUSH
55497: LD_VAR 0 8
55501: PPUSH
55502: LD_INT 0
55504: PPUSH
55505: CALL 57570 0 3
// end ;
55509: GO 55463
55511: POP
55512: POP
// if birds then
55513: LD_VAR 0 1
55517: IFFALSE 55584
// for i = 1 to birds do
55519: LD_ADDR_VAR 0 11
55523: PUSH
55524: DOUBLE
55525: LD_INT 1
55527: DEC
55528: ST_TO_ADDR
55529: LD_VAR 0 1
55533: PUSH
55534: FOR_TO
55535: IFFALSE 55582
// begin hc_class := 18 ;
55537: LD_ADDR_OWVAR 28
55541: PUSH
55542: LD_INT 18
55544: ST_TO_ADDR
// hc_gallery =  ;
55545: LD_ADDR_OWVAR 33
55549: PUSH
55550: LD_STRING 
55552: ST_TO_ADDR
// animal := CreateHuman ;
55553: LD_ADDR_VAR 0 12
55557: PUSH
55558: CALL_OW 44
55562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55563: LD_VAR 0 12
55567: PPUSH
55568: LD_VAR 0 8
55572: PPUSH
55573: LD_INT 0
55575: PPUSH
55576: CALL 57570 0 3
// end ;
55580: GO 55534
55582: POP
55583: POP
// if tigers then
55584: LD_VAR 0 2
55588: IFFALSE 55672
// for i = 1 to tigers do
55590: LD_ADDR_VAR 0 11
55594: PUSH
55595: DOUBLE
55596: LD_INT 1
55598: DEC
55599: ST_TO_ADDR
55600: LD_VAR 0 2
55604: PUSH
55605: FOR_TO
55606: IFFALSE 55670
// begin hc_class = class_tiger ;
55608: LD_ADDR_OWVAR 28
55612: PUSH
55613: LD_INT 14
55615: ST_TO_ADDR
// hc_gallery =  ;
55616: LD_ADDR_OWVAR 33
55620: PUSH
55621: LD_STRING 
55623: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55624: LD_ADDR_OWVAR 35
55628: PUSH
55629: LD_INT 7
55631: NEG
55632: PPUSH
55633: LD_INT 7
55635: PPUSH
55636: CALL_OW 12
55640: ST_TO_ADDR
// animal := CreateHuman ;
55641: LD_ADDR_VAR 0 12
55645: PUSH
55646: CALL_OW 44
55650: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55651: LD_VAR 0 12
55655: PPUSH
55656: LD_VAR 0 8
55660: PPUSH
55661: LD_INT 0
55663: PPUSH
55664: CALL 57570 0 3
// end ;
55668: GO 55605
55670: POP
55671: POP
// if apemans then
55672: LD_VAR 0 3
55676: IFFALSE 55799
// for i = 1 to apemans do
55678: LD_ADDR_VAR 0 11
55682: PUSH
55683: DOUBLE
55684: LD_INT 1
55686: DEC
55687: ST_TO_ADDR
55688: LD_VAR 0 3
55692: PUSH
55693: FOR_TO
55694: IFFALSE 55797
// begin hc_class = class_apeman ;
55696: LD_ADDR_OWVAR 28
55700: PUSH
55701: LD_INT 12
55703: ST_TO_ADDR
// hc_gallery =  ;
55704: LD_ADDR_OWVAR 33
55708: PUSH
55709: LD_STRING 
55711: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55712: LD_ADDR_OWVAR 35
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PPUSH
55721: LD_INT 2
55723: PPUSH
55724: CALL_OW 12
55728: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55729: LD_ADDR_OWVAR 31
55733: PUSH
55734: LD_INT 1
55736: PPUSH
55737: LD_INT 3
55739: PPUSH
55740: CALL_OW 12
55744: PUSH
55745: LD_INT 1
55747: PPUSH
55748: LD_INT 3
55750: PPUSH
55751: CALL_OW 12
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: ST_TO_ADDR
// animal := CreateHuman ;
55768: LD_ADDR_VAR 0 12
55772: PUSH
55773: CALL_OW 44
55777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55778: LD_VAR 0 12
55782: PPUSH
55783: LD_VAR 0 8
55787: PPUSH
55788: LD_INT 0
55790: PPUSH
55791: CALL 57570 0 3
// end ;
55795: GO 55693
55797: POP
55798: POP
// if enchidnas then
55799: LD_VAR 0 4
55803: IFFALSE 55870
// for i = 1 to enchidnas do
55805: LD_ADDR_VAR 0 11
55809: PUSH
55810: DOUBLE
55811: LD_INT 1
55813: DEC
55814: ST_TO_ADDR
55815: LD_VAR 0 4
55819: PUSH
55820: FOR_TO
55821: IFFALSE 55868
// begin hc_class = 13 ;
55823: LD_ADDR_OWVAR 28
55827: PUSH
55828: LD_INT 13
55830: ST_TO_ADDR
// hc_gallery =  ;
55831: LD_ADDR_OWVAR 33
55835: PUSH
55836: LD_STRING 
55838: ST_TO_ADDR
// animal := CreateHuman ;
55839: LD_ADDR_VAR 0 12
55843: PUSH
55844: CALL_OW 44
55848: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55849: LD_VAR 0 12
55853: PPUSH
55854: LD_VAR 0 8
55858: PPUSH
55859: LD_INT 0
55861: PPUSH
55862: CALL 57570 0 3
// end ;
55866: GO 55820
55868: POP
55869: POP
// if fishes then
55870: LD_VAR 0 7
55874: IFFALSE 55941
// for i = 1 to fishes do
55876: LD_ADDR_VAR 0 11
55880: PUSH
55881: DOUBLE
55882: LD_INT 1
55884: DEC
55885: ST_TO_ADDR
55886: LD_VAR 0 7
55890: PUSH
55891: FOR_TO
55892: IFFALSE 55939
// begin hc_class = 20 ;
55894: LD_ADDR_OWVAR 28
55898: PUSH
55899: LD_INT 20
55901: ST_TO_ADDR
// hc_gallery =  ;
55902: LD_ADDR_OWVAR 33
55906: PUSH
55907: LD_STRING 
55909: ST_TO_ADDR
// animal := CreateHuman ;
55910: LD_ADDR_VAR 0 12
55914: PUSH
55915: CALL_OW 44
55919: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55920: LD_VAR 0 12
55924: PPUSH
55925: LD_VAR 0 9
55929: PPUSH
55930: LD_INT 0
55932: PPUSH
55933: CALL 57570 0 3
// end ;
55937: GO 55891
55939: POP
55940: POP
// end ;
55941: LD_VAR 0 10
55945: RET
// export function WantHeal ( sci , unit ) ; begin
55946: LD_INT 0
55948: PPUSH
// if GetTaskList ( sci ) > 0 then
55949: LD_VAR 0 1
55953: PPUSH
55954: CALL_OW 437
55958: PUSH
55959: LD_INT 0
55961: GREATER
55962: IFFALSE 56032
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55964: LD_VAR 0 1
55968: PPUSH
55969: CALL_OW 437
55973: PUSH
55974: LD_INT 1
55976: ARRAY
55977: PUSH
55978: LD_INT 1
55980: ARRAY
55981: PUSH
55982: LD_STRING l
55984: EQUAL
55985: PUSH
55986: LD_VAR 0 1
55990: PPUSH
55991: CALL_OW 437
55995: PUSH
55996: LD_INT 1
55998: ARRAY
55999: PUSH
56000: LD_INT 4
56002: ARRAY
56003: PUSH
56004: LD_VAR 0 2
56008: EQUAL
56009: AND
56010: IFFALSE 56022
// result := true else
56012: LD_ADDR_VAR 0 3
56016: PUSH
56017: LD_INT 1
56019: ST_TO_ADDR
56020: GO 56030
// result := false ;
56022: LD_ADDR_VAR 0 3
56026: PUSH
56027: LD_INT 0
56029: ST_TO_ADDR
// end else
56030: GO 56040
// result := false ;
56032: LD_ADDR_VAR 0 3
56036: PUSH
56037: LD_INT 0
56039: ST_TO_ADDR
// end ;
56040: LD_VAR 0 3
56044: RET
// export function HealTarget ( sci ) ; begin
56045: LD_INT 0
56047: PPUSH
// if not sci then
56048: LD_VAR 0 1
56052: NOT
56053: IFFALSE 56057
// exit ;
56055: GO 56122
// result := 0 ;
56057: LD_ADDR_VAR 0 2
56061: PUSH
56062: LD_INT 0
56064: ST_TO_ADDR
// if GetTaskList ( sci ) then
56065: LD_VAR 0 1
56069: PPUSH
56070: CALL_OW 437
56074: IFFALSE 56122
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56076: LD_VAR 0 1
56080: PPUSH
56081: CALL_OW 437
56085: PUSH
56086: LD_INT 1
56088: ARRAY
56089: PUSH
56090: LD_INT 1
56092: ARRAY
56093: PUSH
56094: LD_STRING l
56096: EQUAL
56097: IFFALSE 56122
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56099: LD_ADDR_VAR 0 2
56103: PUSH
56104: LD_VAR 0 1
56108: PPUSH
56109: CALL_OW 437
56113: PUSH
56114: LD_INT 1
56116: ARRAY
56117: PUSH
56118: LD_INT 4
56120: ARRAY
56121: ST_TO_ADDR
// end ;
56122: LD_VAR 0 2
56126: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56127: LD_INT 0
56129: PPUSH
56130: PPUSH
56131: PPUSH
56132: PPUSH
// if not base_units then
56133: LD_VAR 0 1
56137: NOT
56138: IFFALSE 56142
// exit ;
56140: GO 56229
// result := false ;
56142: LD_ADDR_VAR 0 2
56146: PUSH
56147: LD_INT 0
56149: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56150: LD_ADDR_VAR 0 5
56154: PUSH
56155: LD_VAR 0 1
56159: PPUSH
56160: LD_INT 21
56162: PUSH
56163: LD_INT 3
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PPUSH
56170: CALL_OW 72
56174: ST_TO_ADDR
// if not tmp then
56175: LD_VAR 0 5
56179: NOT
56180: IFFALSE 56184
// exit ;
56182: GO 56229
// for i in tmp do
56184: LD_ADDR_VAR 0 3
56188: PUSH
56189: LD_VAR 0 5
56193: PUSH
56194: FOR_IN
56195: IFFALSE 56227
// begin result := EnemyInRange ( i , 22 ) ;
56197: LD_ADDR_VAR 0 2
56201: PUSH
56202: LD_VAR 0 3
56206: PPUSH
56207: LD_INT 22
56209: PPUSH
56210: CALL 53807 0 2
56214: ST_TO_ADDR
// if result then
56215: LD_VAR 0 2
56219: IFFALSE 56225
// exit ;
56221: POP
56222: POP
56223: GO 56229
// end ;
56225: GO 56194
56227: POP
56228: POP
// end ;
56229: LD_VAR 0 2
56233: RET
// export function FilterByTag ( units , tag ) ; begin
56234: LD_INT 0
56236: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56237: LD_ADDR_VAR 0 3
56241: PUSH
56242: LD_VAR 0 1
56246: PPUSH
56247: LD_INT 120
56249: PUSH
56250: LD_VAR 0 2
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PPUSH
56259: CALL_OW 72
56263: ST_TO_ADDR
// end ;
56264: LD_VAR 0 3
56268: RET
// export function IsDriver ( un ) ; begin
56269: LD_INT 0
56271: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56272: LD_ADDR_VAR 0 2
56276: PUSH
56277: LD_VAR 0 1
56281: PUSH
56282: LD_INT 55
56284: PUSH
56285: EMPTY
56286: LIST
56287: PPUSH
56288: CALL_OW 69
56292: IN
56293: ST_TO_ADDR
// end ;
56294: LD_VAR 0 2
56298: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56299: LD_INT 0
56301: PPUSH
56302: PPUSH
// list := [ ] ;
56303: LD_ADDR_VAR 0 5
56307: PUSH
56308: EMPTY
56309: ST_TO_ADDR
// case d of 0 :
56310: LD_VAR 0 3
56314: PUSH
56315: LD_INT 0
56317: DOUBLE
56318: EQUAL
56319: IFTRUE 56323
56321: GO 56456
56323: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56324: LD_ADDR_VAR 0 5
56328: PUSH
56329: LD_VAR 0 1
56333: PUSH
56334: LD_INT 4
56336: MINUS
56337: PUSH
56338: LD_VAR 0 2
56342: PUSH
56343: LD_INT 4
56345: MINUS
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: PUSH
56355: LD_VAR 0 1
56359: PUSH
56360: LD_INT 3
56362: MINUS
56363: PUSH
56364: LD_VAR 0 2
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: PUSH
56377: LD_VAR 0 1
56381: PUSH
56382: LD_INT 4
56384: PLUS
56385: PUSH
56386: LD_VAR 0 2
56390: PUSH
56391: LD_INT 4
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: PUSH
56399: LD_VAR 0 1
56403: PUSH
56404: LD_INT 3
56406: PLUS
56407: PUSH
56408: LD_VAR 0 2
56412: PUSH
56413: LD_INT 3
56415: PLUS
56416: PUSH
56417: LD_INT 5
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: PUSH
56425: LD_VAR 0 1
56429: PUSH
56430: LD_VAR 0 2
56434: PUSH
56435: LD_INT 4
56437: PLUS
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// end ; 1 :
56454: GO 57154
56456: LD_INT 1
56458: DOUBLE
56459: EQUAL
56460: IFTRUE 56464
56462: GO 56597
56464: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56465: LD_ADDR_VAR 0 5
56469: PUSH
56470: LD_VAR 0 1
56474: PUSH
56475: LD_VAR 0 2
56479: PUSH
56480: LD_INT 4
56482: MINUS
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: LIST
56491: PUSH
56492: LD_VAR 0 1
56496: PUSH
56497: LD_INT 3
56499: MINUS
56500: PUSH
56501: LD_VAR 0 2
56505: PUSH
56506: LD_INT 3
56508: MINUS
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: PUSH
56518: LD_VAR 0 1
56522: PUSH
56523: LD_INT 4
56525: MINUS
56526: PUSH
56527: LD_VAR 0 2
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: PUSH
56540: LD_VAR 0 1
56544: PUSH
56545: LD_VAR 0 2
56549: PUSH
56550: LD_INT 3
56552: PLUS
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: LIST
56561: PUSH
56562: LD_VAR 0 1
56566: PUSH
56567: LD_INT 4
56569: PLUS
56570: PUSH
56571: LD_VAR 0 2
56575: PUSH
56576: LD_INT 4
56578: PLUS
56579: PUSH
56580: LD_INT 5
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: ST_TO_ADDR
// end ; 2 :
56595: GO 57154
56597: LD_INT 2
56599: DOUBLE
56600: EQUAL
56601: IFTRUE 56605
56603: GO 56734
56605: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56606: LD_ADDR_VAR 0 5
56610: PUSH
56611: LD_VAR 0 1
56615: PUSH
56616: LD_VAR 0 2
56620: PUSH
56621: LD_INT 3
56623: MINUS
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: PUSH
56633: LD_VAR 0 1
56637: PUSH
56638: LD_INT 4
56640: PLUS
56641: PUSH
56642: LD_VAR 0 2
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: LIST
56654: PUSH
56655: LD_VAR 0 1
56659: PUSH
56660: LD_VAR 0 2
56664: PUSH
56665: LD_INT 4
56667: PLUS
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: PUSH
56677: LD_VAR 0 1
56681: PUSH
56682: LD_INT 3
56684: MINUS
56685: PUSH
56686: LD_VAR 0 2
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: PUSH
56699: LD_VAR 0 1
56703: PUSH
56704: LD_INT 4
56706: MINUS
56707: PUSH
56708: LD_VAR 0 2
56712: PUSH
56713: LD_INT 4
56715: MINUS
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: LIST
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: ST_TO_ADDR
// end ; 3 :
56732: GO 57154
56734: LD_INT 3
56736: DOUBLE
56737: EQUAL
56738: IFTRUE 56742
56740: GO 56875
56742: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56743: LD_ADDR_VAR 0 5
56747: PUSH
56748: LD_VAR 0 1
56752: PUSH
56753: LD_INT 3
56755: PLUS
56756: PUSH
56757: LD_VAR 0 2
56761: PUSH
56762: LD_INT 4
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: LIST
56769: PUSH
56770: LD_VAR 0 1
56774: PUSH
56775: LD_INT 4
56777: PLUS
56778: PUSH
56779: LD_VAR 0 2
56783: PUSH
56784: LD_INT 4
56786: PLUS
56787: PUSH
56788: LD_INT 5
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: PUSH
56796: LD_VAR 0 1
56800: PUSH
56801: LD_INT 4
56803: MINUS
56804: PUSH
56805: LD_VAR 0 2
56809: PUSH
56810: LD_INT 1
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: PUSH
56818: LD_VAR 0 1
56822: PUSH
56823: LD_VAR 0 2
56827: PUSH
56828: LD_INT 4
56830: MINUS
56831: PUSH
56832: LD_INT 3
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: PUSH
56840: LD_VAR 0 1
56844: PUSH
56845: LD_INT 3
56847: MINUS
56848: PUSH
56849: LD_VAR 0 2
56853: PUSH
56854: LD_INT 3
56856: MINUS
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: ST_TO_ADDR
// end ; 4 :
56873: GO 57154
56875: LD_INT 4
56877: DOUBLE
56878: EQUAL
56879: IFTRUE 56883
56881: GO 57016
56883: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56884: LD_ADDR_VAR 0 5
56888: PUSH
56889: LD_VAR 0 1
56893: PUSH
56894: LD_VAR 0 2
56898: PUSH
56899: LD_INT 4
56901: PLUS
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: PUSH
56911: LD_VAR 0 1
56915: PUSH
56916: LD_INT 3
56918: PLUS
56919: PUSH
56920: LD_VAR 0 2
56924: PUSH
56925: LD_INT 3
56927: PLUS
56928: PUSH
56929: LD_INT 5
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: PUSH
56937: LD_VAR 0 1
56941: PUSH
56942: LD_INT 4
56944: PLUS
56945: PUSH
56946: LD_VAR 0 2
56950: PUSH
56951: LD_INT 4
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: PUSH
56959: LD_VAR 0 1
56963: PUSH
56964: LD_VAR 0 2
56968: PUSH
56969: LD_INT 3
56971: MINUS
56972: PUSH
56973: LD_INT 3
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: PUSH
56981: LD_VAR 0 1
56985: PUSH
56986: LD_INT 4
56988: MINUS
56989: PUSH
56990: LD_VAR 0 2
56994: PUSH
56995: LD_INT 4
56997: MINUS
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: LIST
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// end ; 5 :
57014: GO 57154
57016: LD_INT 5
57018: DOUBLE
57019: EQUAL
57020: IFTRUE 57024
57022: GO 57153
57024: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57025: LD_ADDR_VAR 0 5
57029: PUSH
57030: LD_VAR 0 1
57034: PUSH
57035: LD_INT 4
57037: MINUS
57038: PUSH
57039: LD_VAR 0 2
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: PUSH
57052: LD_VAR 0 1
57056: PUSH
57057: LD_VAR 0 2
57061: PUSH
57062: LD_INT 4
57064: MINUS
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: PUSH
57074: LD_VAR 0 1
57078: PUSH
57079: LD_INT 4
57081: PLUS
57082: PUSH
57083: LD_VAR 0 2
57087: PUSH
57088: LD_INT 4
57090: PLUS
57091: PUSH
57092: LD_INT 5
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: LIST
57099: PUSH
57100: LD_VAR 0 1
57104: PUSH
57105: LD_INT 3
57107: PLUS
57108: PUSH
57109: LD_VAR 0 2
57113: PUSH
57114: LD_INT 4
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: PUSH
57122: LD_VAR 0 1
57126: PUSH
57127: LD_VAR 0 2
57131: PUSH
57132: LD_INT 3
57134: PLUS
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: LIST
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: ST_TO_ADDR
// end ; end ;
57151: GO 57154
57153: POP
// result := list ;
57154: LD_ADDR_VAR 0 4
57158: PUSH
57159: LD_VAR 0 5
57163: ST_TO_ADDR
// end ;
57164: LD_VAR 0 4
57168: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57169: LD_INT 0
57171: PPUSH
57172: PPUSH
57173: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57174: LD_VAR 0 1
57178: NOT
57179: PUSH
57180: LD_VAR 0 2
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 3
57193: PUSH
57194: LD_INT 4
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: IN
57203: NOT
57204: OR
57205: IFFALSE 57209
// exit ;
57207: GO 57292
// tmp := [ ] ;
57209: LD_ADDR_VAR 0 5
57213: PUSH
57214: EMPTY
57215: ST_TO_ADDR
// for i in units do
57216: LD_ADDR_VAR 0 4
57220: PUSH
57221: LD_VAR 0 1
57225: PUSH
57226: FOR_IN
57227: IFFALSE 57261
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57229: LD_ADDR_VAR 0 5
57233: PUSH
57234: LD_VAR 0 5
57238: PPUSH
57239: LD_VAR 0 4
57243: PPUSH
57244: LD_VAR 0 2
57248: PPUSH
57249: CALL_OW 259
57253: PPUSH
57254: CALL 58665 0 2
57258: ST_TO_ADDR
57259: GO 57226
57261: POP
57262: POP
// if not tmp then
57263: LD_VAR 0 5
57267: NOT
57268: IFFALSE 57272
// exit ;
57270: GO 57292
// result := SortListByListDesc ( units , tmp ) ;
57272: LD_ADDR_VAR 0 3
57276: PUSH
57277: LD_VAR 0 1
57281: PPUSH
57282: LD_VAR 0 5
57286: PPUSH
57287: CALL_OW 77
57291: ST_TO_ADDR
// end ;
57292: LD_VAR 0 3
57296: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57297: LD_INT 0
57299: PPUSH
57300: PPUSH
57301: PPUSH
// result := false ;
57302: LD_ADDR_VAR 0 3
57306: PUSH
57307: LD_INT 0
57309: ST_TO_ADDR
// if not building then
57310: LD_VAR 0 2
57314: NOT
57315: IFFALSE 57319
// exit ;
57317: GO 57457
// x := GetX ( building ) ;
57319: LD_ADDR_VAR 0 4
57323: PUSH
57324: LD_VAR 0 2
57328: PPUSH
57329: CALL_OW 250
57333: ST_TO_ADDR
// y := GetY ( building ) ;
57334: LD_ADDR_VAR 0 5
57338: PUSH
57339: LD_VAR 0 2
57343: PPUSH
57344: CALL_OW 251
57348: ST_TO_ADDR
// if not x or not y then
57349: LD_VAR 0 4
57353: NOT
57354: PUSH
57355: LD_VAR 0 5
57359: NOT
57360: OR
57361: IFFALSE 57365
// exit ;
57363: GO 57457
// if GetTaskList ( unit ) then
57365: LD_VAR 0 1
57369: PPUSH
57370: CALL_OW 437
57374: IFFALSE 57457
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57376: LD_STRING e
57378: PUSH
57379: LD_VAR 0 1
57383: PPUSH
57384: CALL_OW 437
57388: PUSH
57389: LD_INT 1
57391: ARRAY
57392: PUSH
57393: LD_INT 1
57395: ARRAY
57396: EQUAL
57397: PUSH
57398: LD_VAR 0 4
57402: PUSH
57403: LD_VAR 0 1
57407: PPUSH
57408: CALL_OW 437
57412: PUSH
57413: LD_INT 1
57415: ARRAY
57416: PUSH
57417: LD_INT 2
57419: ARRAY
57420: EQUAL
57421: AND
57422: PUSH
57423: LD_VAR 0 5
57427: PUSH
57428: LD_VAR 0 1
57432: PPUSH
57433: CALL_OW 437
57437: PUSH
57438: LD_INT 1
57440: ARRAY
57441: PUSH
57442: LD_INT 3
57444: ARRAY
57445: EQUAL
57446: AND
57447: IFFALSE 57457
// result := true end ;
57449: LD_ADDR_VAR 0 3
57453: PUSH
57454: LD_INT 1
57456: ST_TO_ADDR
// end ;
57457: LD_VAR 0 3
57461: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57462: LD_INT 0
57464: PPUSH
// result := false ;
57465: LD_ADDR_VAR 0 4
57469: PUSH
57470: LD_INT 0
57472: ST_TO_ADDR
// if GetTaskList ( unit ) then
57473: LD_VAR 0 1
57477: PPUSH
57478: CALL_OW 437
57482: IFFALSE 57565
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57484: LD_STRING M
57486: PUSH
57487: LD_VAR 0 1
57491: PPUSH
57492: CALL_OW 437
57496: PUSH
57497: LD_INT 1
57499: ARRAY
57500: PUSH
57501: LD_INT 1
57503: ARRAY
57504: EQUAL
57505: PUSH
57506: LD_VAR 0 2
57510: PUSH
57511: LD_VAR 0 1
57515: PPUSH
57516: CALL_OW 437
57520: PUSH
57521: LD_INT 1
57523: ARRAY
57524: PUSH
57525: LD_INT 2
57527: ARRAY
57528: EQUAL
57529: AND
57530: PUSH
57531: LD_VAR 0 3
57535: PUSH
57536: LD_VAR 0 1
57540: PPUSH
57541: CALL_OW 437
57545: PUSH
57546: LD_INT 1
57548: ARRAY
57549: PUSH
57550: LD_INT 3
57552: ARRAY
57553: EQUAL
57554: AND
57555: IFFALSE 57565
// result := true ;
57557: LD_ADDR_VAR 0 4
57561: PUSH
57562: LD_INT 1
57564: ST_TO_ADDR
// end ; end ;
57565: LD_VAR 0 4
57569: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57570: LD_INT 0
57572: PPUSH
57573: PPUSH
57574: PPUSH
57575: PPUSH
// if not unit or not area then
57576: LD_VAR 0 1
57580: NOT
57581: PUSH
57582: LD_VAR 0 2
57586: NOT
57587: OR
57588: IFFALSE 57592
// exit ;
57590: GO 57768
// tmp := AreaToList ( area , i ) ;
57592: LD_ADDR_VAR 0 6
57596: PUSH
57597: LD_VAR 0 2
57601: PPUSH
57602: LD_VAR 0 5
57606: PPUSH
57607: CALL_OW 517
57611: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57612: LD_ADDR_VAR 0 5
57616: PUSH
57617: DOUBLE
57618: LD_INT 1
57620: DEC
57621: ST_TO_ADDR
57622: LD_VAR 0 6
57626: PUSH
57627: LD_INT 1
57629: ARRAY
57630: PUSH
57631: FOR_TO
57632: IFFALSE 57766
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57634: LD_ADDR_VAR 0 7
57638: PUSH
57639: LD_VAR 0 6
57643: PUSH
57644: LD_INT 1
57646: ARRAY
57647: PUSH
57648: LD_VAR 0 5
57652: ARRAY
57653: PUSH
57654: LD_VAR 0 6
57658: PUSH
57659: LD_INT 2
57661: ARRAY
57662: PUSH
57663: LD_VAR 0 5
57667: ARRAY
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57673: LD_INT 92
57675: PUSH
57676: LD_VAR 0 7
57680: PUSH
57681: LD_INT 1
57683: ARRAY
57684: PUSH
57685: LD_VAR 0 7
57689: PUSH
57690: LD_INT 2
57692: ARRAY
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: PPUSH
57703: CALL_OW 69
57707: PUSH
57708: LD_INT 0
57710: EQUAL
57711: IFFALSE 57764
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57713: LD_VAR 0 1
57717: PPUSH
57718: LD_VAR 0 7
57722: PUSH
57723: LD_INT 1
57725: ARRAY
57726: PPUSH
57727: LD_VAR 0 7
57731: PUSH
57732: LD_INT 2
57734: ARRAY
57735: PPUSH
57736: LD_VAR 0 3
57740: PPUSH
57741: CALL_OW 48
// result := IsPlaced ( unit ) ;
57745: LD_ADDR_VAR 0 4
57749: PUSH
57750: LD_VAR 0 1
57754: PPUSH
57755: CALL_OW 305
57759: ST_TO_ADDR
// exit ;
57760: POP
57761: POP
57762: GO 57768
// end ; end ;
57764: GO 57631
57766: POP
57767: POP
// end ;
57768: LD_VAR 0 4
57772: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57773: LD_INT 0
57775: PPUSH
57776: PPUSH
57777: PPUSH
// if not side or side > 8 then
57778: LD_VAR 0 1
57782: NOT
57783: PUSH
57784: LD_VAR 0 1
57788: PUSH
57789: LD_INT 8
57791: GREATER
57792: OR
57793: IFFALSE 57797
// exit ;
57795: GO 57984
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57797: LD_ADDR_VAR 0 4
57801: PUSH
57802: LD_INT 22
57804: PUSH
57805: LD_VAR 0 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 21
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PPUSH
57828: CALL_OW 69
57832: ST_TO_ADDR
// if not tmp then
57833: LD_VAR 0 4
57837: NOT
57838: IFFALSE 57842
// exit ;
57840: GO 57984
// enable_addtolog := true ;
57842: LD_ADDR_OWVAR 81
57846: PUSH
57847: LD_INT 1
57849: ST_TO_ADDR
// AddToLog ( [ ) ;
57850: LD_STRING [
57852: PPUSH
57853: CALL_OW 561
// for i in tmp do
57857: LD_ADDR_VAR 0 3
57861: PUSH
57862: LD_VAR 0 4
57866: PUSH
57867: FOR_IN
57868: IFFALSE 57975
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57870: LD_STRING [
57872: PUSH
57873: LD_VAR 0 3
57877: PPUSH
57878: CALL_OW 266
57882: STR
57883: PUSH
57884: LD_STRING , 
57886: STR
57887: PUSH
57888: LD_VAR 0 3
57892: PPUSH
57893: CALL_OW 250
57897: STR
57898: PUSH
57899: LD_STRING , 
57901: STR
57902: PUSH
57903: LD_VAR 0 3
57907: PPUSH
57908: CALL_OW 251
57912: STR
57913: PUSH
57914: LD_STRING , 
57916: STR
57917: PUSH
57918: LD_VAR 0 3
57922: PPUSH
57923: CALL_OW 254
57927: STR
57928: PUSH
57929: LD_STRING , 
57931: STR
57932: PUSH
57933: LD_VAR 0 3
57937: PPUSH
57938: LD_INT 1
57940: PPUSH
57941: CALL_OW 268
57945: STR
57946: PUSH
57947: LD_STRING , 
57949: STR
57950: PUSH
57951: LD_VAR 0 3
57955: PPUSH
57956: LD_INT 2
57958: PPUSH
57959: CALL_OW 268
57963: STR
57964: PUSH
57965: LD_STRING ],
57967: STR
57968: PPUSH
57969: CALL_OW 561
// end ;
57973: GO 57867
57975: POP
57976: POP
// AddToLog ( ]; ) ;
57977: LD_STRING ];
57979: PPUSH
57980: CALL_OW 561
// end ;
57984: LD_VAR 0 2
57988: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57989: LD_INT 0
57991: PPUSH
57992: PPUSH
57993: PPUSH
57994: PPUSH
57995: PPUSH
// if not area or not rate or not max then
57996: LD_VAR 0 1
58000: NOT
58001: PUSH
58002: LD_VAR 0 2
58006: NOT
58007: OR
58008: PUSH
58009: LD_VAR 0 4
58013: NOT
58014: OR
58015: IFFALSE 58019
// exit ;
58017: GO 58208
// while 1 do
58019: LD_INT 1
58021: IFFALSE 58208
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58023: LD_ADDR_VAR 0 9
58027: PUSH
58028: LD_VAR 0 1
58032: PPUSH
58033: LD_INT 1
58035: PPUSH
58036: CALL_OW 287
58040: PUSH
58041: LD_INT 10
58043: MUL
58044: ST_TO_ADDR
// r := rate / 10 ;
58045: LD_ADDR_VAR 0 7
58049: PUSH
58050: LD_VAR 0 2
58054: PUSH
58055: LD_INT 10
58057: DIVREAL
58058: ST_TO_ADDR
// time := 1 1$00 ;
58059: LD_ADDR_VAR 0 8
58063: PUSH
58064: LD_INT 2100
58066: ST_TO_ADDR
// if amount < min then
58067: LD_VAR 0 9
58071: PUSH
58072: LD_VAR 0 3
58076: LESS
58077: IFFALSE 58095
// r := r * 2 else
58079: LD_ADDR_VAR 0 7
58083: PUSH
58084: LD_VAR 0 7
58088: PUSH
58089: LD_INT 2
58091: MUL
58092: ST_TO_ADDR
58093: GO 58121
// if amount > max then
58095: LD_VAR 0 9
58099: PUSH
58100: LD_VAR 0 4
58104: GREATER
58105: IFFALSE 58121
// r := r / 2 ;
58107: LD_ADDR_VAR 0 7
58111: PUSH
58112: LD_VAR 0 7
58116: PUSH
58117: LD_INT 2
58119: DIVREAL
58120: ST_TO_ADDR
// time := time / r ;
58121: LD_ADDR_VAR 0 8
58125: PUSH
58126: LD_VAR 0 8
58130: PUSH
58131: LD_VAR 0 7
58135: DIVREAL
58136: ST_TO_ADDR
// if time < 0 then
58137: LD_VAR 0 8
58141: PUSH
58142: LD_INT 0
58144: LESS
58145: IFFALSE 58162
// time := time * - 1 ;
58147: LD_ADDR_VAR 0 8
58151: PUSH
58152: LD_VAR 0 8
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: MUL
58161: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58162: LD_VAR 0 8
58166: PUSH
58167: LD_INT 35
58169: PPUSH
58170: LD_INT 875
58172: PPUSH
58173: CALL_OW 12
58177: PLUS
58178: PPUSH
58179: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58183: LD_INT 1
58185: PPUSH
58186: LD_INT 5
58188: PPUSH
58189: CALL_OW 12
58193: PPUSH
58194: LD_VAR 0 1
58198: PPUSH
58199: LD_INT 1
58201: PPUSH
58202: CALL_OW 55
// end ;
58206: GO 58019
// end ;
58208: LD_VAR 0 5
58212: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58213: LD_INT 0
58215: PPUSH
58216: PPUSH
58217: PPUSH
58218: PPUSH
58219: PPUSH
58220: PPUSH
58221: PPUSH
58222: PPUSH
// if not turrets or not factories then
58223: LD_VAR 0 1
58227: NOT
58228: PUSH
58229: LD_VAR 0 2
58233: NOT
58234: OR
58235: IFFALSE 58239
// exit ;
58237: GO 58546
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58239: LD_ADDR_VAR 0 10
58243: PUSH
58244: LD_INT 5
58246: PUSH
58247: LD_INT 6
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 4
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 3
58266: PUSH
58267: LD_INT 5
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 24
58281: PUSH
58282: LD_INT 25
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 23
58291: PUSH
58292: LD_INT 27
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 42
58305: PUSH
58306: LD_INT 43
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 44
58315: PUSH
58316: LD_INT 46
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 45
58325: PUSH
58326: LD_INT 47
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: LIST
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: LIST
58342: ST_TO_ADDR
// result := [ ] ;
58343: LD_ADDR_VAR 0 3
58347: PUSH
58348: EMPTY
58349: ST_TO_ADDR
// for i in turrets do
58350: LD_ADDR_VAR 0 4
58354: PUSH
58355: LD_VAR 0 1
58359: PUSH
58360: FOR_IN
58361: IFFALSE 58544
// begin nat := GetNation ( i ) ;
58363: LD_ADDR_VAR 0 7
58367: PUSH
58368: LD_VAR 0 4
58372: PPUSH
58373: CALL_OW 248
58377: ST_TO_ADDR
// weapon := 0 ;
58378: LD_ADDR_VAR 0 8
58382: PUSH
58383: LD_INT 0
58385: ST_TO_ADDR
// if not nat then
58386: LD_VAR 0 7
58390: NOT
58391: IFFALSE 58395
// continue ;
58393: GO 58360
// for j in list [ nat ] do
58395: LD_ADDR_VAR 0 5
58399: PUSH
58400: LD_VAR 0 10
58404: PUSH
58405: LD_VAR 0 7
58409: ARRAY
58410: PUSH
58411: FOR_IN
58412: IFFALSE 58453
// if GetBWeapon ( i ) = j [ 1 ] then
58414: LD_VAR 0 4
58418: PPUSH
58419: CALL_OW 269
58423: PUSH
58424: LD_VAR 0 5
58428: PUSH
58429: LD_INT 1
58431: ARRAY
58432: EQUAL
58433: IFFALSE 58451
// begin weapon := j [ 2 ] ;
58435: LD_ADDR_VAR 0 8
58439: PUSH
58440: LD_VAR 0 5
58444: PUSH
58445: LD_INT 2
58447: ARRAY
58448: ST_TO_ADDR
// break ;
58449: GO 58453
// end ;
58451: GO 58411
58453: POP
58454: POP
// if not weapon then
58455: LD_VAR 0 8
58459: NOT
58460: IFFALSE 58464
// continue ;
58462: GO 58360
// for k in factories do
58464: LD_ADDR_VAR 0 6
58468: PUSH
58469: LD_VAR 0 2
58473: PUSH
58474: FOR_IN
58475: IFFALSE 58540
// begin weapons := AvailableWeaponList ( k ) ;
58477: LD_ADDR_VAR 0 9
58481: PUSH
58482: LD_VAR 0 6
58486: PPUSH
58487: CALL_OW 478
58491: ST_TO_ADDR
// if not weapons then
58492: LD_VAR 0 9
58496: NOT
58497: IFFALSE 58501
// continue ;
58499: GO 58474
// if weapon in weapons then
58501: LD_VAR 0 8
58505: PUSH
58506: LD_VAR 0 9
58510: IN
58511: IFFALSE 58538
// begin result := [ i , weapon ] ;
58513: LD_ADDR_VAR 0 3
58517: PUSH
58518: LD_VAR 0 4
58522: PUSH
58523: LD_VAR 0 8
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: ST_TO_ADDR
// exit ;
58532: POP
58533: POP
58534: POP
58535: POP
58536: GO 58546
// end ; end ;
58538: GO 58474
58540: POP
58541: POP
// end ;
58542: GO 58360
58544: POP
58545: POP
// end ;
58546: LD_VAR 0 3
58550: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58551: LD_INT 0
58553: PPUSH
// if not side or side > 8 then
58554: LD_VAR 0 3
58558: NOT
58559: PUSH
58560: LD_VAR 0 3
58564: PUSH
58565: LD_INT 8
58567: GREATER
58568: OR
58569: IFFALSE 58573
// exit ;
58571: GO 58632
// if not range then
58573: LD_VAR 0 4
58577: NOT
58578: IFFALSE 58589
// range := - 12 ;
58580: LD_ADDR_VAR 0 4
58584: PUSH
58585: LD_INT 12
58587: NEG
58588: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58589: LD_VAR 0 1
58593: PPUSH
58594: LD_VAR 0 2
58598: PPUSH
58599: LD_VAR 0 3
58603: PPUSH
58604: LD_VAR 0 4
58608: PPUSH
58609: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58613: LD_VAR 0 1
58617: PPUSH
58618: LD_VAR 0 2
58622: PPUSH
58623: LD_VAR 0 3
58627: PPUSH
58628: CALL_OW 331
// end ;
58632: LD_VAR 0 5
58636: RET
// export function Video ( mode ) ; begin
58637: LD_INT 0
58639: PPUSH
// ingame_video = mode ;
58640: LD_ADDR_OWVAR 52
58644: PUSH
58645: LD_VAR 0 1
58649: ST_TO_ADDR
// interface_hidden = mode ;
58650: LD_ADDR_OWVAR 54
58654: PUSH
58655: LD_VAR 0 1
58659: ST_TO_ADDR
// end ;
58660: LD_VAR 0 2
58664: RET
// export function Join ( array , element ) ; begin
58665: LD_INT 0
58667: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58668: LD_ADDR_VAR 0 3
58672: PUSH
58673: LD_VAR 0 1
58677: PPUSH
58678: LD_VAR 0 1
58682: PUSH
58683: LD_INT 1
58685: PLUS
58686: PPUSH
58687: LD_VAR 0 2
58691: PPUSH
58692: CALL_OW 1
58696: ST_TO_ADDR
// end ;
58697: LD_VAR 0 3
58701: RET
// export function JoinUnion ( array , element ) ; begin
58702: LD_INT 0
58704: PPUSH
// result := array union element ;
58705: LD_ADDR_VAR 0 3
58709: PUSH
58710: LD_VAR 0 1
58714: PUSH
58715: LD_VAR 0 2
58719: UNION
58720: ST_TO_ADDR
// end ;
58721: LD_VAR 0 3
58725: RET
// export function GetBehemoths ( side ) ; begin
58726: LD_INT 0
58728: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58729: LD_ADDR_VAR 0 2
58733: PUSH
58734: LD_INT 22
58736: PUSH
58737: LD_VAR 0 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 31
58748: PUSH
58749: LD_INT 25
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PPUSH
58760: CALL_OW 69
58764: ST_TO_ADDR
// end ;
58765: LD_VAR 0 2
58769: RET
// export function Shuffle ( array ) ; var i , index ; begin
58770: LD_INT 0
58772: PPUSH
58773: PPUSH
58774: PPUSH
// result := [ ] ;
58775: LD_ADDR_VAR 0 2
58779: PUSH
58780: EMPTY
58781: ST_TO_ADDR
// if not array then
58782: LD_VAR 0 1
58786: NOT
58787: IFFALSE 58791
// exit ;
58789: GO 58890
// Randomize ;
58791: CALL_OW 10
// for i = array downto 1 do
58795: LD_ADDR_VAR 0 3
58799: PUSH
58800: DOUBLE
58801: LD_VAR 0 1
58805: INC
58806: ST_TO_ADDR
58807: LD_INT 1
58809: PUSH
58810: FOR_DOWNTO
58811: IFFALSE 58888
// begin index := rand ( 1 , array ) ;
58813: LD_ADDR_VAR 0 4
58817: PUSH
58818: LD_INT 1
58820: PPUSH
58821: LD_VAR 0 1
58825: PPUSH
58826: CALL_OW 12
58830: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58831: LD_ADDR_VAR 0 2
58835: PUSH
58836: LD_VAR 0 2
58840: PPUSH
58841: LD_VAR 0 2
58845: PUSH
58846: LD_INT 1
58848: PLUS
58849: PPUSH
58850: LD_VAR 0 1
58854: PUSH
58855: LD_VAR 0 4
58859: ARRAY
58860: PPUSH
58861: CALL_OW 2
58865: ST_TO_ADDR
// array := Delete ( array , index ) ;
58866: LD_ADDR_VAR 0 1
58870: PUSH
58871: LD_VAR 0 1
58875: PPUSH
58876: LD_VAR 0 4
58880: PPUSH
58881: CALL_OW 3
58885: ST_TO_ADDR
// end ;
58886: GO 58810
58888: POP
58889: POP
// end ;
58890: LD_VAR 0 2
58894: RET
// export function GetBaseMaterials ( base ) ; begin
58895: LD_INT 0
58897: PPUSH
// result := [ 0 , 0 , 0 ] ;
58898: LD_ADDR_VAR 0 2
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// if not base then
58917: LD_VAR 0 1
58921: NOT
58922: IFFALSE 58926
// exit ;
58924: GO 58975
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58926: LD_ADDR_VAR 0 2
58930: PUSH
58931: LD_VAR 0 1
58935: PPUSH
58936: LD_INT 1
58938: PPUSH
58939: CALL_OW 275
58943: PUSH
58944: LD_VAR 0 1
58948: PPUSH
58949: LD_INT 2
58951: PPUSH
58952: CALL_OW 275
58956: PUSH
58957: LD_VAR 0 1
58961: PPUSH
58962: LD_INT 3
58964: PPUSH
58965: CALL_OW 275
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: LIST
58974: ST_TO_ADDR
// end ;
58975: LD_VAR 0 2
58979: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58980: LD_INT 0
58982: PPUSH
58983: PPUSH
// result := array ;
58984: LD_ADDR_VAR 0 3
58988: PUSH
58989: LD_VAR 0 1
58993: ST_TO_ADDR
// if size >= result then
58994: LD_VAR 0 2
58998: PUSH
58999: LD_VAR 0 3
59003: GREATEREQUAL
59004: IFFALSE 59008
// exit ;
59006: GO 59058
// if size then
59008: LD_VAR 0 2
59012: IFFALSE 59058
// for i := array downto size do
59014: LD_ADDR_VAR 0 4
59018: PUSH
59019: DOUBLE
59020: LD_VAR 0 1
59024: INC
59025: ST_TO_ADDR
59026: LD_VAR 0 2
59030: PUSH
59031: FOR_DOWNTO
59032: IFFALSE 59056
// result := Delete ( result , result ) ;
59034: LD_ADDR_VAR 0 3
59038: PUSH
59039: LD_VAR 0 3
59043: PPUSH
59044: LD_VAR 0 3
59048: PPUSH
59049: CALL_OW 3
59053: ST_TO_ADDR
59054: GO 59031
59056: POP
59057: POP
// end ;
59058: LD_VAR 0 3
59062: RET
// export function ComExit ( unit ) ; var tmp ; begin
59063: LD_INT 0
59065: PPUSH
59066: PPUSH
// if not IsInUnit ( unit ) then
59067: LD_VAR 0 1
59071: PPUSH
59072: CALL_OW 310
59076: NOT
59077: IFFALSE 59081
// exit ;
59079: GO 59141
// tmp := IsInUnit ( unit ) ;
59081: LD_ADDR_VAR 0 3
59085: PUSH
59086: LD_VAR 0 1
59090: PPUSH
59091: CALL_OW 310
59095: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59096: LD_VAR 0 3
59100: PPUSH
59101: CALL_OW 247
59105: PUSH
59106: LD_INT 2
59108: EQUAL
59109: IFFALSE 59122
// ComExitVehicle ( unit ) else
59111: LD_VAR 0 1
59115: PPUSH
59116: CALL_OW 121
59120: GO 59131
// ComExitBuilding ( unit ) ;
59122: LD_VAR 0 1
59126: PPUSH
59127: CALL_OW 122
// result := tmp ;
59131: LD_ADDR_VAR 0 2
59135: PUSH
59136: LD_VAR 0 3
59140: ST_TO_ADDR
// end ;
59141: LD_VAR 0 2
59145: RET
// export function ComExitAll ( units ) ; var i ; begin
59146: LD_INT 0
59148: PPUSH
59149: PPUSH
// if not units then
59150: LD_VAR 0 1
59154: NOT
59155: IFFALSE 59159
// exit ;
59157: GO 59185
// for i in units do
59159: LD_ADDR_VAR 0 3
59163: PUSH
59164: LD_VAR 0 1
59168: PUSH
59169: FOR_IN
59170: IFFALSE 59183
// ComExit ( i ) ;
59172: LD_VAR 0 3
59176: PPUSH
59177: CALL 59063 0 1
59181: GO 59169
59183: POP
59184: POP
// end ;
59185: LD_VAR 0 2
59189: RET
// export function ResetHc ; begin
59190: LD_INT 0
59192: PPUSH
// InitHc ;
59193: CALL_OW 19
// hc_importance := 0 ;
59197: LD_ADDR_OWVAR 32
59201: PUSH
59202: LD_INT 0
59204: ST_TO_ADDR
// end ;
59205: LD_VAR 0 1
59209: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59210: LD_INT 0
59212: PPUSH
59213: PPUSH
59214: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59215: LD_ADDR_VAR 0 6
59219: PUSH
59220: LD_VAR 0 1
59224: PUSH
59225: LD_VAR 0 3
59229: PLUS
59230: PUSH
59231: LD_INT 2
59233: DIV
59234: ST_TO_ADDR
// if _x < 0 then
59235: LD_VAR 0 6
59239: PUSH
59240: LD_INT 0
59242: LESS
59243: IFFALSE 59260
// _x := _x * - 1 ;
59245: LD_ADDR_VAR 0 6
59249: PUSH
59250: LD_VAR 0 6
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: MUL
59259: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59260: LD_ADDR_VAR 0 7
59264: PUSH
59265: LD_VAR 0 2
59269: PUSH
59270: LD_VAR 0 4
59274: PLUS
59275: PUSH
59276: LD_INT 2
59278: DIV
59279: ST_TO_ADDR
// if _y < 0 then
59280: LD_VAR 0 7
59284: PUSH
59285: LD_INT 0
59287: LESS
59288: IFFALSE 59305
// _y := _y * - 1 ;
59290: LD_ADDR_VAR 0 7
59294: PUSH
59295: LD_VAR 0 7
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: MUL
59304: ST_TO_ADDR
// result := [ _x , _y ] ;
59305: LD_ADDR_VAR 0 5
59309: PUSH
59310: LD_VAR 0 6
59314: PUSH
59315: LD_VAR 0 7
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: ST_TO_ADDR
// end ;
59324: LD_VAR 0 5
59328: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59329: LD_INT 0
59331: PPUSH
59332: PPUSH
59333: PPUSH
59334: PPUSH
// task := GetTaskList ( unit ) ;
59335: LD_ADDR_VAR 0 7
59339: PUSH
59340: LD_VAR 0 1
59344: PPUSH
59345: CALL_OW 437
59349: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59350: LD_VAR 0 7
59354: NOT
59355: PUSH
59356: LD_VAR 0 1
59360: PPUSH
59361: LD_VAR 0 2
59365: PPUSH
59366: CALL_OW 308
59370: NOT
59371: AND
59372: IFFALSE 59376
// exit ;
59374: GO 59494
// if IsInArea ( unit , area ) then
59376: LD_VAR 0 1
59380: PPUSH
59381: LD_VAR 0 2
59385: PPUSH
59386: CALL_OW 308
59390: IFFALSE 59408
// begin ComMoveToArea ( unit , goAway ) ;
59392: LD_VAR 0 1
59396: PPUSH
59397: LD_VAR 0 3
59401: PPUSH
59402: CALL_OW 113
// exit ;
59406: GO 59494
// end ; if task [ 1 ] [ 1 ] <> M then
59408: LD_VAR 0 7
59412: PUSH
59413: LD_INT 1
59415: ARRAY
59416: PUSH
59417: LD_INT 1
59419: ARRAY
59420: PUSH
59421: LD_STRING M
59423: NONEQUAL
59424: IFFALSE 59428
// exit ;
59426: GO 59494
// x := task [ 1 ] [ 2 ] ;
59428: LD_ADDR_VAR 0 5
59432: PUSH
59433: LD_VAR 0 7
59437: PUSH
59438: LD_INT 1
59440: ARRAY
59441: PUSH
59442: LD_INT 2
59444: ARRAY
59445: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59446: LD_ADDR_VAR 0 6
59450: PUSH
59451: LD_VAR 0 7
59455: PUSH
59456: LD_INT 1
59458: ARRAY
59459: PUSH
59460: LD_INT 3
59462: ARRAY
59463: ST_TO_ADDR
// if InArea ( x , y , area ) then
59464: LD_VAR 0 5
59468: PPUSH
59469: LD_VAR 0 6
59473: PPUSH
59474: LD_VAR 0 2
59478: PPUSH
59479: CALL_OW 309
59483: IFFALSE 59494
// ComStop ( unit ) ;
59485: LD_VAR 0 1
59489: PPUSH
59490: CALL_OW 141
// end ;
59494: LD_VAR 0 4
59498: RET
// export function Abs ( value ) ; begin
59499: LD_INT 0
59501: PPUSH
// result := value ;
59502: LD_ADDR_VAR 0 2
59506: PUSH
59507: LD_VAR 0 1
59511: ST_TO_ADDR
// if value < 0 then
59512: LD_VAR 0 1
59516: PUSH
59517: LD_INT 0
59519: LESS
59520: IFFALSE 59537
// result := value * - 1 ;
59522: LD_ADDR_VAR 0 2
59526: PUSH
59527: LD_VAR 0 1
59531: PUSH
59532: LD_INT 1
59534: NEG
59535: MUL
59536: ST_TO_ADDR
// end ;
59537: LD_VAR 0 2
59541: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59542: LD_INT 0
59544: PPUSH
59545: PPUSH
59546: PPUSH
59547: PPUSH
59548: PPUSH
59549: PPUSH
59550: PPUSH
59551: PPUSH
// if not unit or not building then
59552: LD_VAR 0 1
59556: NOT
59557: PUSH
59558: LD_VAR 0 2
59562: NOT
59563: OR
59564: IFFALSE 59568
// exit ;
59566: GO 59794
// x := GetX ( building ) ;
59568: LD_ADDR_VAR 0 4
59572: PUSH
59573: LD_VAR 0 2
59577: PPUSH
59578: CALL_OW 250
59582: ST_TO_ADDR
// y := GetY ( building ) ;
59583: LD_ADDR_VAR 0 6
59587: PUSH
59588: LD_VAR 0 2
59592: PPUSH
59593: CALL_OW 251
59597: ST_TO_ADDR
// d := GetDir ( building ) ;
59598: LD_ADDR_VAR 0 8
59602: PUSH
59603: LD_VAR 0 2
59607: PPUSH
59608: CALL_OW 254
59612: ST_TO_ADDR
// r := 4 ;
59613: LD_ADDR_VAR 0 9
59617: PUSH
59618: LD_INT 4
59620: ST_TO_ADDR
// for i := 1 to 5 do
59621: LD_ADDR_VAR 0 10
59625: PUSH
59626: DOUBLE
59627: LD_INT 1
59629: DEC
59630: ST_TO_ADDR
59631: LD_INT 5
59633: PUSH
59634: FOR_TO
59635: IFFALSE 59792
// begin _x := ShiftX ( x , d , r + i ) ;
59637: LD_ADDR_VAR 0 5
59641: PUSH
59642: LD_VAR 0 4
59646: PPUSH
59647: LD_VAR 0 8
59651: PPUSH
59652: LD_VAR 0 9
59656: PUSH
59657: LD_VAR 0 10
59661: PLUS
59662: PPUSH
59663: CALL_OW 272
59667: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59668: LD_ADDR_VAR 0 7
59672: PUSH
59673: LD_VAR 0 6
59677: PPUSH
59678: LD_VAR 0 8
59682: PPUSH
59683: LD_VAR 0 9
59687: PUSH
59688: LD_VAR 0 10
59692: PLUS
59693: PPUSH
59694: CALL_OW 273
59698: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59699: LD_VAR 0 5
59703: PPUSH
59704: LD_VAR 0 7
59708: PPUSH
59709: CALL_OW 488
59713: PUSH
59714: LD_VAR 0 5
59718: PPUSH
59719: LD_VAR 0 7
59723: PPUSH
59724: CALL_OW 428
59728: PPUSH
59729: CALL_OW 247
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: LD_INT 2
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: IN
59744: NOT
59745: AND
59746: IFFALSE 59790
// begin ComMoveXY ( unit , _x , _y ) ;
59748: LD_VAR 0 1
59752: PPUSH
59753: LD_VAR 0 5
59757: PPUSH
59758: LD_VAR 0 7
59762: PPUSH
59763: CALL_OW 111
// result := [ _x , _y ] ;
59767: LD_ADDR_VAR 0 3
59771: PUSH
59772: LD_VAR 0 5
59776: PUSH
59777: LD_VAR 0 7
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: ST_TO_ADDR
// exit ;
59786: POP
59787: POP
59788: GO 59794
// end ; end ;
59790: GO 59634
59792: POP
59793: POP
// end ;
59794: LD_VAR 0 3
59798: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59799: LD_INT 0
59801: PPUSH
59802: PPUSH
59803: PPUSH
// result := 0 ;
59804: LD_ADDR_VAR 0 3
59808: PUSH
59809: LD_INT 0
59811: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59812: LD_VAR 0 1
59816: PUSH
59817: LD_INT 0
59819: LESS
59820: PUSH
59821: LD_VAR 0 1
59825: PUSH
59826: LD_INT 8
59828: GREATER
59829: OR
59830: PUSH
59831: LD_VAR 0 2
59835: PUSH
59836: LD_INT 0
59838: LESS
59839: OR
59840: PUSH
59841: LD_VAR 0 2
59845: PUSH
59846: LD_INT 8
59848: GREATER
59849: OR
59850: IFFALSE 59854
// exit ;
59852: GO 59929
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59854: LD_ADDR_VAR 0 4
59858: PUSH
59859: LD_INT 22
59861: PUSH
59862: LD_VAR 0 2
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PPUSH
59871: CALL_OW 69
59875: PUSH
59876: FOR_IN
59877: IFFALSE 59927
// begin un := UnitShoot ( i ) ;
59879: LD_ADDR_VAR 0 5
59883: PUSH
59884: LD_VAR 0 4
59888: PPUSH
59889: CALL_OW 504
59893: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59894: LD_VAR 0 5
59898: PPUSH
59899: CALL_OW 255
59903: PUSH
59904: LD_VAR 0 1
59908: EQUAL
59909: IFFALSE 59925
// begin result := un ;
59911: LD_ADDR_VAR 0 3
59915: PUSH
59916: LD_VAR 0 5
59920: ST_TO_ADDR
// exit ;
59921: POP
59922: POP
59923: GO 59929
// end ; end ;
59925: GO 59876
59927: POP
59928: POP
// end ;
59929: LD_VAR 0 3
59933: RET
// export function GetCargoBay ( units ) ; begin
59934: LD_INT 0
59936: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59937: LD_ADDR_VAR 0 2
59941: PUSH
59942: LD_VAR 0 1
59946: PPUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 34
59952: PUSH
59953: LD_INT 12
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 34
59962: PUSH
59963: LD_INT 51
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 34
59972: PUSH
59973: LD_INT 32
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 34
59982: PUSH
59983: LD_INT 89
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: PPUSH
59997: CALL_OW 72
60001: ST_TO_ADDR
// end ;
60002: LD_VAR 0 2
60006: RET
// export function Negate ( value ) ; begin
60007: LD_INT 0
60009: PPUSH
// result := not value ;
60010: LD_ADDR_VAR 0 2
60014: PUSH
60015: LD_VAR 0 1
60019: NOT
60020: ST_TO_ADDR
// end ;
60021: LD_VAR 0 2
60025: RET
// export function Inc ( value ) ; begin
60026: LD_INT 0
60028: PPUSH
// result := value + 1 ;
60029: LD_ADDR_VAR 0 2
60033: PUSH
60034: LD_VAR 0 1
60038: PUSH
60039: LD_INT 1
60041: PLUS
60042: ST_TO_ADDR
// end ;
60043: LD_VAR 0 2
60047: RET
// export function Dec ( value ) ; begin
60048: LD_INT 0
60050: PPUSH
// result := value - 1 ;
60051: LD_ADDR_VAR 0 2
60055: PUSH
60056: LD_VAR 0 1
60060: PUSH
60061: LD_INT 1
60063: MINUS
60064: ST_TO_ADDR
// end ;
60065: LD_VAR 0 2
60069: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60070: LD_INT 0
60072: PPUSH
60073: PPUSH
60074: PPUSH
60075: PPUSH
60076: PPUSH
60077: PPUSH
60078: PPUSH
60079: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60080: LD_VAR 0 1
60084: PPUSH
60085: LD_VAR 0 2
60089: PPUSH
60090: CALL_OW 488
60094: NOT
60095: PUSH
60096: LD_VAR 0 3
60100: PPUSH
60101: LD_VAR 0 4
60105: PPUSH
60106: CALL_OW 488
60110: NOT
60111: OR
60112: IFFALSE 60125
// begin result := - 1 ;
60114: LD_ADDR_VAR 0 5
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: ST_TO_ADDR
// exit ;
60123: GO 60360
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60125: LD_ADDR_VAR 0 12
60129: PUSH
60130: LD_VAR 0 1
60134: PPUSH
60135: LD_VAR 0 2
60139: PPUSH
60140: LD_VAR 0 3
60144: PPUSH
60145: LD_VAR 0 4
60149: PPUSH
60150: CALL 59210 0 4
60154: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60155: LD_ADDR_VAR 0 11
60159: PUSH
60160: LD_VAR 0 1
60164: PPUSH
60165: LD_VAR 0 2
60169: PPUSH
60170: LD_VAR 0 12
60174: PUSH
60175: LD_INT 1
60177: ARRAY
60178: PPUSH
60179: LD_VAR 0 12
60183: PUSH
60184: LD_INT 2
60186: ARRAY
60187: PPUSH
60188: CALL_OW 298
60192: ST_TO_ADDR
// distance := 9999 ;
60193: LD_ADDR_VAR 0 10
60197: PUSH
60198: LD_INT 9999
60200: ST_TO_ADDR
// for i := 0 to 5 do
60201: LD_ADDR_VAR 0 6
60205: PUSH
60206: DOUBLE
60207: LD_INT 0
60209: DEC
60210: ST_TO_ADDR
60211: LD_INT 5
60213: PUSH
60214: FOR_TO
60215: IFFALSE 60358
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60217: LD_ADDR_VAR 0 7
60221: PUSH
60222: LD_VAR 0 1
60226: PPUSH
60227: LD_VAR 0 6
60231: PPUSH
60232: LD_VAR 0 11
60236: PPUSH
60237: CALL_OW 272
60241: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60242: LD_ADDR_VAR 0 8
60246: PUSH
60247: LD_VAR 0 2
60251: PPUSH
60252: LD_VAR 0 6
60256: PPUSH
60257: LD_VAR 0 11
60261: PPUSH
60262: CALL_OW 273
60266: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60267: LD_VAR 0 7
60271: PPUSH
60272: LD_VAR 0 8
60276: PPUSH
60277: CALL_OW 488
60281: NOT
60282: IFFALSE 60286
// continue ;
60284: GO 60214
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60286: LD_ADDR_VAR 0 9
60290: PUSH
60291: LD_VAR 0 12
60295: PUSH
60296: LD_INT 1
60298: ARRAY
60299: PPUSH
60300: LD_VAR 0 12
60304: PUSH
60305: LD_INT 2
60307: ARRAY
60308: PPUSH
60309: LD_VAR 0 7
60313: PPUSH
60314: LD_VAR 0 8
60318: PPUSH
60319: CALL_OW 298
60323: ST_TO_ADDR
// if tmp < distance then
60324: LD_VAR 0 9
60328: PUSH
60329: LD_VAR 0 10
60333: LESS
60334: IFFALSE 60356
// begin result := i ;
60336: LD_ADDR_VAR 0 5
60340: PUSH
60341: LD_VAR 0 6
60345: ST_TO_ADDR
// distance := tmp ;
60346: LD_ADDR_VAR 0 10
60350: PUSH
60351: LD_VAR 0 9
60355: ST_TO_ADDR
// end ; end ;
60356: GO 60214
60358: POP
60359: POP
// end ;
60360: LD_VAR 0 5
60364: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60365: LD_INT 0
60367: PPUSH
60368: PPUSH
// if not driver or not IsInUnit ( driver ) then
60369: LD_VAR 0 1
60373: NOT
60374: PUSH
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL_OW 310
60384: NOT
60385: OR
60386: IFFALSE 60390
// exit ;
60388: GO 60480
// vehicle := IsInUnit ( driver ) ;
60390: LD_ADDR_VAR 0 3
60394: PUSH
60395: LD_VAR 0 1
60399: PPUSH
60400: CALL_OW 310
60404: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60405: LD_VAR 0 1
60409: PPUSH
60410: LD_STRING \
60412: PUSH
60413: LD_INT 0
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: PUSH
60440: LD_STRING E
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_VAR 0 3
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PPUSH
60476: CALL_OW 446
// end ;
60480: LD_VAR 0 2
60484: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60485: LD_INT 0
60487: PPUSH
60488: PPUSH
// if not driver or not IsInUnit ( driver ) then
60489: LD_VAR 0 1
60493: NOT
60494: PUSH
60495: LD_VAR 0 1
60499: PPUSH
60500: CALL_OW 310
60504: NOT
60505: OR
60506: IFFALSE 60510
// exit ;
60508: GO 60600
// vehicle := IsInUnit ( driver ) ;
60510: LD_ADDR_VAR 0 3
60514: PUSH
60515: LD_VAR 0 1
60519: PPUSH
60520: CALL_OW 310
60524: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60525: LD_VAR 0 1
60529: PPUSH
60530: LD_STRING \
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: PUSH
60560: LD_STRING E
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_VAR 0 3
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PPUSH
60596: CALL_OW 447
// end ;
60600: LD_VAR 0 2
60604: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60605: LD_INT 0
60607: PPUSH
60608: PPUSH
60609: PPUSH
// tmp := [ ] ;
60610: LD_ADDR_VAR 0 5
60614: PUSH
60615: EMPTY
60616: ST_TO_ADDR
// for i in units do
60617: LD_ADDR_VAR 0 4
60621: PUSH
60622: LD_VAR 0 1
60626: PUSH
60627: FOR_IN
60628: IFFALSE 60666
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60630: LD_ADDR_VAR 0 5
60634: PUSH
60635: LD_VAR 0 5
60639: PPUSH
60640: LD_VAR 0 5
60644: PUSH
60645: LD_INT 1
60647: PLUS
60648: PPUSH
60649: LD_VAR 0 4
60653: PPUSH
60654: CALL_OW 256
60658: PPUSH
60659: CALL_OW 2
60663: ST_TO_ADDR
60664: GO 60627
60666: POP
60667: POP
// if not tmp then
60668: LD_VAR 0 5
60672: NOT
60673: IFFALSE 60677
// exit ;
60675: GO 60725
// if asc then
60677: LD_VAR 0 2
60681: IFFALSE 60705
// result := SortListByListAsc ( units , tmp ) else
60683: LD_ADDR_VAR 0 3
60687: PUSH
60688: LD_VAR 0 1
60692: PPUSH
60693: LD_VAR 0 5
60697: PPUSH
60698: CALL_OW 76
60702: ST_TO_ADDR
60703: GO 60725
// result := SortListByListDesc ( units , tmp ) ;
60705: LD_ADDR_VAR 0 3
60709: PUSH
60710: LD_VAR 0 1
60714: PPUSH
60715: LD_VAR 0 5
60719: PPUSH
60720: CALL_OW 77
60724: ST_TO_ADDR
// end ;
60725: LD_VAR 0 3
60729: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60730: LD_INT 0
60732: PPUSH
60733: PPUSH
// task := GetTaskList ( mech ) ;
60734: LD_ADDR_VAR 0 4
60738: PUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL_OW 437
60748: ST_TO_ADDR
// if not task then
60749: LD_VAR 0 4
60753: NOT
60754: IFFALSE 60758
// exit ;
60756: GO 60800
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60758: LD_ADDR_VAR 0 3
60762: PUSH
60763: LD_VAR 0 4
60767: PUSH
60768: LD_INT 1
60770: ARRAY
60771: PUSH
60772: LD_INT 1
60774: ARRAY
60775: PUSH
60776: LD_STRING r
60778: EQUAL
60779: PUSH
60780: LD_VAR 0 4
60784: PUSH
60785: LD_INT 1
60787: ARRAY
60788: PUSH
60789: LD_INT 4
60791: ARRAY
60792: PUSH
60793: LD_VAR 0 2
60797: EQUAL
60798: AND
60799: ST_TO_ADDR
// end ;
60800: LD_VAR 0 3
60804: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60805: LD_INT 0
60807: PPUSH
// SetDir ( unit , d ) ;
60808: LD_VAR 0 1
60812: PPUSH
60813: LD_VAR 0 4
60817: PPUSH
60818: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
60822: LD_ADDR_VAR 0 6
60826: PUSH
60827: LD_VAR 0 1
60831: PPUSH
60832: LD_VAR 0 2
60836: PPUSH
60837: LD_VAR 0 3
60841: PPUSH
60842: LD_VAR 0 5
60846: PPUSH
60847: CALL_OW 48
60851: ST_TO_ADDR
// end ;
60852: LD_VAR 0 6
60856: RET
// export function ToNaturalNumber ( number ) ; begin
60857: LD_INT 0
60859: PPUSH
// result := number div 1 ;
60860: LD_ADDR_VAR 0 2
60864: PUSH
60865: LD_VAR 0 1
60869: PUSH
60870: LD_INT 1
60872: DIV
60873: ST_TO_ADDR
// if number < 0 then
60874: LD_VAR 0 1
60878: PUSH
60879: LD_INT 0
60881: LESS
60882: IFFALSE 60892
// result := 0 ;
60884: LD_ADDR_VAR 0 2
60888: PUSH
60889: LD_INT 0
60891: ST_TO_ADDR
// end ;
60892: LD_VAR 0 2
60896: RET
// export function SortByClass ( units , class ) ; var un ; begin
60897: LD_INT 0
60899: PPUSH
60900: PPUSH
// if not units or not class then
60901: LD_VAR 0 1
60905: NOT
60906: PUSH
60907: LD_VAR 0 2
60911: NOT
60912: OR
60913: IFFALSE 60917
// exit ;
60915: GO 61012
// result := [ ] ;
60917: LD_ADDR_VAR 0 3
60921: PUSH
60922: EMPTY
60923: ST_TO_ADDR
// for un in units do
60924: LD_ADDR_VAR 0 4
60928: PUSH
60929: LD_VAR 0 1
60933: PUSH
60934: FOR_IN
60935: IFFALSE 61010
// if GetClass ( un ) = class then
60937: LD_VAR 0 4
60941: PPUSH
60942: CALL_OW 257
60946: PUSH
60947: LD_VAR 0 2
60951: EQUAL
60952: IFFALSE 60979
// result := Insert ( result , 1 , un ) else
60954: LD_ADDR_VAR 0 3
60958: PUSH
60959: LD_VAR 0 3
60963: PPUSH
60964: LD_INT 1
60966: PPUSH
60967: LD_VAR 0 4
60971: PPUSH
60972: CALL_OW 2
60976: ST_TO_ADDR
60977: GO 61008
// result := Replace ( result , result + 1 , un ) ;
60979: LD_ADDR_VAR 0 3
60983: PUSH
60984: LD_VAR 0 3
60988: PPUSH
60989: LD_VAR 0 3
60993: PUSH
60994: LD_INT 1
60996: PLUS
60997: PPUSH
60998: LD_VAR 0 4
61002: PPUSH
61003: CALL_OW 1
61007: ST_TO_ADDR
61008: GO 60934
61010: POP
61011: POP
// end ;
61012: LD_VAR 0 3
61016: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61017: LD_INT 0
61019: PPUSH
61020: PPUSH
61021: PPUSH
61022: PPUSH
61023: PPUSH
61024: PPUSH
61025: PPUSH
// result := [ ] ;
61026: LD_ADDR_VAR 0 4
61030: PUSH
61031: EMPTY
61032: ST_TO_ADDR
// if x - r < 0 then
61033: LD_VAR 0 1
61037: PUSH
61038: LD_VAR 0 3
61042: MINUS
61043: PUSH
61044: LD_INT 0
61046: LESS
61047: IFFALSE 61059
// min_x := 0 else
61049: LD_ADDR_VAR 0 8
61053: PUSH
61054: LD_INT 0
61056: ST_TO_ADDR
61057: GO 61075
// min_x := x - r ;
61059: LD_ADDR_VAR 0 8
61063: PUSH
61064: LD_VAR 0 1
61068: PUSH
61069: LD_VAR 0 3
61073: MINUS
61074: ST_TO_ADDR
// if y - r < 0 then
61075: LD_VAR 0 2
61079: PUSH
61080: LD_VAR 0 3
61084: MINUS
61085: PUSH
61086: LD_INT 0
61088: LESS
61089: IFFALSE 61101
// min_y := 0 else
61091: LD_ADDR_VAR 0 7
61095: PUSH
61096: LD_INT 0
61098: ST_TO_ADDR
61099: GO 61117
// min_y := y - r ;
61101: LD_ADDR_VAR 0 7
61105: PUSH
61106: LD_VAR 0 2
61110: PUSH
61111: LD_VAR 0 3
61115: MINUS
61116: ST_TO_ADDR
// max_x := x + r ;
61117: LD_ADDR_VAR 0 9
61121: PUSH
61122: LD_VAR 0 1
61126: PUSH
61127: LD_VAR 0 3
61131: PLUS
61132: ST_TO_ADDR
// max_y := y + r ;
61133: LD_ADDR_VAR 0 10
61137: PUSH
61138: LD_VAR 0 2
61142: PUSH
61143: LD_VAR 0 3
61147: PLUS
61148: ST_TO_ADDR
// for _x = min_x to max_x do
61149: LD_ADDR_VAR 0 5
61153: PUSH
61154: DOUBLE
61155: LD_VAR 0 8
61159: DEC
61160: ST_TO_ADDR
61161: LD_VAR 0 9
61165: PUSH
61166: FOR_TO
61167: IFFALSE 61268
// for _y = min_y to max_y do
61169: LD_ADDR_VAR 0 6
61173: PUSH
61174: DOUBLE
61175: LD_VAR 0 7
61179: DEC
61180: ST_TO_ADDR
61181: LD_VAR 0 10
61185: PUSH
61186: FOR_TO
61187: IFFALSE 61264
// begin if not ValidHex ( _x , _y ) then
61189: LD_VAR 0 5
61193: PPUSH
61194: LD_VAR 0 6
61198: PPUSH
61199: CALL_OW 488
61203: NOT
61204: IFFALSE 61208
// continue ;
61206: GO 61186
// if GetResourceTypeXY ( _x , _y ) then
61208: LD_VAR 0 5
61212: PPUSH
61213: LD_VAR 0 6
61217: PPUSH
61218: CALL_OW 283
61222: IFFALSE 61262
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61224: LD_ADDR_VAR 0 4
61228: PUSH
61229: LD_VAR 0 4
61233: PPUSH
61234: LD_VAR 0 4
61238: PUSH
61239: LD_INT 1
61241: PLUS
61242: PPUSH
61243: LD_VAR 0 5
61247: PUSH
61248: LD_VAR 0 6
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PPUSH
61257: CALL_OW 1
61261: ST_TO_ADDR
// end ;
61262: GO 61186
61264: POP
61265: POP
61266: GO 61166
61268: POP
61269: POP
// end ;
61270: LD_VAR 0 4
61274: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61275: LD_INT 0
61277: PPUSH
61278: PPUSH
61279: PPUSH
61280: PPUSH
61281: PPUSH
61282: PPUSH
61283: PPUSH
61284: PPUSH
// if not units then
61285: LD_VAR 0 1
61289: NOT
61290: IFFALSE 61294
// exit ;
61292: GO 61822
// result := UnitFilter ( units , [ f_ok ] ) ;
61294: LD_ADDR_VAR 0 3
61298: PUSH
61299: LD_VAR 0 1
61303: PPUSH
61304: LD_INT 50
61306: PUSH
61307: EMPTY
61308: LIST
61309: PPUSH
61310: CALL_OW 72
61314: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61315: LD_ADDR_VAR 0 8
61319: PUSH
61320: LD_VAR 0 1
61324: PUSH
61325: LD_INT 1
61327: ARRAY
61328: PPUSH
61329: CALL_OW 255
61333: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61334: LD_ADDR_VAR 0 10
61338: PUSH
61339: LD_INT 29
61341: PUSH
61342: LD_INT 91
61344: PUSH
61345: LD_INT 49
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: ST_TO_ADDR
// if not result then
61353: LD_VAR 0 3
61357: NOT
61358: IFFALSE 61362
// exit ;
61360: GO 61822
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61362: LD_ADDR_VAR 0 5
61366: PUSH
61367: LD_INT 81
61369: PUSH
61370: LD_VAR 0 8
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PPUSH
61379: CALL_OW 69
61383: ST_TO_ADDR
// for i in result do
61384: LD_ADDR_VAR 0 4
61388: PUSH
61389: LD_VAR 0 3
61393: PUSH
61394: FOR_IN
61395: IFFALSE 61820
// begin tag := GetTag ( i ) + 1 ;
61397: LD_ADDR_VAR 0 9
61401: PUSH
61402: LD_VAR 0 4
61406: PPUSH
61407: CALL_OW 110
61411: PUSH
61412: LD_INT 1
61414: PLUS
61415: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61416: LD_ADDR_VAR 0 7
61420: PUSH
61421: LD_VAR 0 4
61425: PPUSH
61426: CALL_OW 250
61430: PPUSH
61431: LD_VAR 0 4
61435: PPUSH
61436: CALL_OW 251
61440: PPUSH
61441: LD_INT 4
61443: PPUSH
61444: CALL 61017 0 3
61448: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61449: LD_VAR 0 4
61453: PPUSH
61454: CALL_OW 247
61458: PUSH
61459: LD_INT 2
61461: EQUAL
61462: PUSH
61463: LD_VAR 0 7
61467: PUSH
61468: LD_INT 2
61470: GREATER
61471: AND
61472: PUSH
61473: LD_VAR 0 4
61477: PPUSH
61478: CALL_OW 264
61482: PUSH
61483: LD_VAR 0 10
61487: IN
61488: NOT
61489: AND
61490: IFFALSE 61529
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61492: LD_VAR 0 4
61496: PPUSH
61497: LD_VAR 0 7
61501: PUSH
61502: LD_INT 1
61504: ARRAY
61505: PUSH
61506: LD_INT 1
61508: ARRAY
61509: PPUSH
61510: LD_VAR 0 7
61514: PUSH
61515: LD_INT 1
61517: ARRAY
61518: PUSH
61519: LD_INT 2
61521: ARRAY
61522: PPUSH
61523: CALL_OW 116
61527: GO 61818
// if path > tag then
61529: LD_VAR 0 2
61533: PUSH
61534: LD_VAR 0 9
61538: GREATER
61539: IFFALSE 61747
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61541: LD_ADDR_VAR 0 6
61545: PUSH
61546: LD_VAR 0 5
61550: PPUSH
61551: LD_INT 91
61553: PUSH
61554: LD_VAR 0 4
61558: PUSH
61559: LD_INT 8
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: LIST
61566: PPUSH
61567: CALL_OW 72
61571: ST_TO_ADDR
// if nearEnemy then
61572: LD_VAR 0 6
61576: IFFALSE 61645
// begin if GetWeapon ( i ) = ru_time_lapser then
61578: LD_VAR 0 4
61582: PPUSH
61583: CALL_OW 264
61587: PUSH
61588: LD_INT 49
61590: EQUAL
61591: IFFALSE 61619
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61593: LD_VAR 0 4
61597: PPUSH
61598: LD_VAR 0 6
61602: PPUSH
61603: LD_VAR 0 4
61607: PPUSH
61608: CALL_OW 74
61612: PPUSH
61613: CALL_OW 112
61617: GO 61643
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61619: LD_VAR 0 4
61623: PPUSH
61624: LD_VAR 0 6
61628: PPUSH
61629: LD_VAR 0 4
61633: PPUSH
61634: CALL_OW 74
61638: PPUSH
61639: CALL 62893 0 2
// end else
61643: GO 61745
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61645: LD_VAR 0 4
61649: PPUSH
61650: LD_VAR 0 2
61654: PUSH
61655: LD_VAR 0 9
61659: ARRAY
61660: PUSH
61661: LD_INT 1
61663: ARRAY
61664: PPUSH
61665: LD_VAR 0 2
61669: PUSH
61670: LD_VAR 0 9
61674: ARRAY
61675: PUSH
61676: LD_INT 2
61678: ARRAY
61679: PPUSH
61680: CALL_OW 297
61684: PUSH
61685: LD_INT 6
61687: GREATER
61688: IFFALSE 61731
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61690: LD_VAR 0 4
61694: PPUSH
61695: LD_VAR 0 2
61699: PUSH
61700: LD_VAR 0 9
61704: ARRAY
61705: PUSH
61706: LD_INT 1
61708: ARRAY
61709: PPUSH
61710: LD_VAR 0 2
61714: PUSH
61715: LD_VAR 0 9
61719: ARRAY
61720: PUSH
61721: LD_INT 2
61723: ARRAY
61724: PPUSH
61725: CALL_OW 114
61729: GO 61745
// SetTag ( i , tag ) ;
61731: LD_VAR 0 4
61735: PPUSH
61736: LD_VAR 0 9
61740: PPUSH
61741: CALL_OW 109
// end else
61745: GO 61818
// if enemy then
61747: LD_VAR 0 5
61751: IFFALSE 61818
// begin if GetWeapon ( i ) = ru_time_lapser then
61753: LD_VAR 0 4
61757: PPUSH
61758: CALL_OW 264
61762: PUSH
61763: LD_INT 49
61765: EQUAL
61766: IFFALSE 61794
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61768: LD_VAR 0 4
61772: PPUSH
61773: LD_VAR 0 5
61777: PPUSH
61778: LD_VAR 0 4
61782: PPUSH
61783: CALL_OW 74
61787: PPUSH
61788: CALL_OW 112
61792: GO 61818
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61794: LD_VAR 0 4
61798: PPUSH
61799: LD_VAR 0 5
61803: PPUSH
61804: LD_VAR 0 4
61808: PPUSH
61809: CALL_OW 74
61813: PPUSH
61814: CALL 62893 0 2
// end ; end ;
61818: GO 61394
61820: POP
61821: POP
// end ;
61822: LD_VAR 0 3
61826: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61827: LD_INT 0
61829: PPUSH
61830: PPUSH
61831: PPUSH
// if not unit or IsInUnit ( unit ) then
61832: LD_VAR 0 1
61836: NOT
61837: PUSH
61838: LD_VAR 0 1
61842: PPUSH
61843: CALL_OW 310
61847: OR
61848: IFFALSE 61852
// exit ;
61850: GO 61943
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61852: LD_ADDR_VAR 0 4
61856: PUSH
61857: LD_VAR 0 1
61861: PPUSH
61862: CALL_OW 250
61866: PPUSH
61867: LD_VAR 0 2
61871: PPUSH
61872: LD_INT 1
61874: PPUSH
61875: CALL_OW 272
61879: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61880: LD_ADDR_VAR 0 5
61884: PUSH
61885: LD_VAR 0 1
61889: PPUSH
61890: CALL_OW 251
61894: PPUSH
61895: LD_VAR 0 2
61899: PPUSH
61900: LD_INT 1
61902: PPUSH
61903: CALL_OW 273
61907: ST_TO_ADDR
// if ValidHex ( x , y ) then
61908: LD_VAR 0 4
61912: PPUSH
61913: LD_VAR 0 5
61917: PPUSH
61918: CALL_OW 488
61922: IFFALSE 61943
// ComTurnXY ( unit , x , y ) ;
61924: LD_VAR 0 1
61928: PPUSH
61929: LD_VAR 0 4
61933: PPUSH
61934: LD_VAR 0 5
61938: PPUSH
61939: CALL_OW 118
// end ;
61943: LD_VAR 0 3
61947: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61948: LD_INT 0
61950: PPUSH
61951: PPUSH
// result := false ;
61952: LD_ADDR_VAR 0 3
61956: PUSH
61957: LD_INT 0
61959: ST_TO_ADDR
// if not units then
61960: LD_VAR 0 2
61964: NOT
61965: IFFALSE 61969
// exit ;
61967: GO 62014
// for i in units do
61969: LD_ADDR_VAR 0 4
61973: PUSH
61974: LD_VAR 0 2
61978: PUSH
61979: FOR_IN
61980: IFFALSE 62012
// if See ( side , i ) then
61982: LD_VAR 0 1
61986: PPUSH
61987: LD_VAR 0 4
61991: PPUSH
61992: CALL_OW 292
61996: IFFALSE 62010
// begin result := true ;
61998: LD_ADDR_VAR 0 3
62002: PUSH
62003: LD_INT 1
62005: ST_TO_ADDR
// exit ;
62006: POP
62007: POP
62008: GO 62014
// end ;
62010: GO 61979
62012: POP
62013: POP
// end ;
62014: LD_VAR 0 3
62018: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62019: LD_INT 0
62021: PPUSH
62022: PPUSH
62023: PPUSH
62024: PPUSH
// if not unit or not points then
62025: LD_VAR 0 1
62029: NOT
62030: PUSH
62031: LD_VAR 0 2
62035: NOT
62036: OR
62037: IFFALSE 62041
// exit ;
62039: GO 62131
// dist := 99999 ;
62041: LD_ADDR_VAR 0 5
62045: PUSH
62046: LD_INT 99999
62048: ST_TO_ADDR
// for i in points do
62049: LD_ADDR_VAR 0 4
62053: PUSH
62054: LD_VAR 0 2
62058: PUSH
62059: FOR_IN
62060: IFFALSE 62129
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62062: LD_ADDR_VAR 0 6
62066: PUSH
62067: LD_VAR 0 1
62071: PPUSH
62072: LD_VAR 0 4
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: PPUSH
62081: LD_VAR 0 4
62085: PUSH
62086: LD_INT 2
62088: ARRAY
62089: PPUSH
62090: CALL_OW 297
62094: ST_TO_ADDR
// if tmpDist < dist then
62095: LD_VAR 0 6
62099: PUSH
62100: LD_VAR 0 5
62104: LESS
62105: IFFALSE 62127
// begin result := i ;
62107: LD_ADDR_VAR 0 3
62111: PUSH
62112: LD_VAR 0 4
62116: ST_TO_ADDR
// dist := tmpDist ;
62117: LD_ADDR_VAR 0 5
62121: PUSH
62122: LD_VAR 0 6
62126: ST_TO_ADDR
// end ; end ;
62127: GO 62059
62129: POP
62130: POP
// end ;
62131: LD_VAR 0 3
62135: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62136: LD_INT 0
62138: PPUSH
// uc_side := side ;
62139: LD_ADDR_OWVAR 20
62143: PUSH
62144: LD_VAR 0 1
62148: ST_TO_ADDR
// uc_nation := 3 ;
62149: LD_ADDR_OWVAR 21
62153: PUSH
62154: LD_INT 3
62156: ST_TO_ADDR
// vc_chassis := 25 ;
62157: LD_ADDR_OWVAR 37
62161: PUSH
62162: LD_INT 25
62164: ST_TO_ADDR
// vc_engine := engine_siberite ;
62165: LD_ADDR_OWVAR 39
62169: PUSH
62170: LD_INT 3
62172: ST_TO_ADDR
// vc_control := control_computer ;
62173: LD_ADDR_OWVAR 38
62177: PUSH
62178: LD_INT 3
62180: ST_TO_ADDR
// vc_weapon := 59 ;
62181: LD_ADDR_OWVAR 40
62185: PUSH
62186: LD_INT 59
62188: ST_TO_ADDR
// result := CreateVehicle ;
62189: LD_ADDR_VAR 0 5
62193: PUSH
62194: CALL_OW 45
62198: ST_TO_ADDR
// SetDir ( result , d ) ;
62199: LD_VAR 0 5
62203: PPUSH
62204: LD_VAR 0 4
62208: PPUSH
62209: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62213: LD_VAR 0 5
62217: PPUSH
62218: LD_VAR 0 2
62222: PPUSH
62223: LD_VAR 0 3
62227: PPUSH
62228: LD_INT 0
62230: PPUSH
62231: CALL_OW 48
// end ;
62235: LD_VAR 0 5
62239: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62240: LD_INT 0
62242: PPUSH
62243: PPUSH
62244: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62245: LD_ADDR_VAR 0 2
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 0
62255: PUSH
62256: LD_INT 0
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62268: LD_VAR 0 1
62272: NOT
62273: PUSH
62274: LD_VAR 0 1
62278: PPUSH
62279: CALL_OW 264
62283: PUSH
62284: LD_INT 12
62286: PUSH
62287: LD_INT 51
62289: PUSH
62290: LD_INT 32
62292: PUSH
62293: LD_INT 89
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: IN
62302: NOT
62303: OR
62304: IFFALSE 62308
// exit ;
62306: GO 62406
// for i := 1 to 3 do
62308: LD_ADDR_VAR 0 3
62312: PUSH
62313: DOUBLE
62314: LD_INT 1
62316: DEC
62317: ST_TO_ADDR
62318: LD_INT 3
62320: PUSH
62321: FOR_TO
62322: IFFALSE 62404
// begin tmp := GetCargo ( cargo , i ) ;
62324: LD_ADDR_VAR 0 4
62328: PUSH
62329: LD_VAR 0 1
62333: PPUSH
62334: LD_VAR 0 3
62338: PPUSH
62339: CALL_OW 289
62343: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62344: LD_ADDR_VAR 0 2
62348: PUSH
62349: LD_VAR 0 2
62353: PPUSH
62354: LD_VAR 0 3
62358: PPUSH
62359: LD_VAR 0 4
62363: PPUSH
62364: CALL_OW 1
62368: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62369: LD_ADDR_VAR 0 2
62373: PUSH
62374: LD_VAR 0 2
62378: PPUSH
62379: LD_INT 4
62381: PPUSH
62382: LD_VAR 0 2
62386: PUSH
62387: LD_INT 4
62389: ARRAY
62390: PUSH
62391: LD_VAR 0 4
62395: PLUS
62396: PPUSH
62397: CALL_OW 1
62401: ST_TO_ADDR
// end ;
62402: GO 62321
62404: POP
62405: POP
// end ;
62406: LD_VAR 0 2
62410: RET
// export function Length ( array ) ; begin
62411: LD_INT 0
62413: PPUSH
// result := array + 0 ;
62414: LD_ADDR_VAR 0 2
62418: PUSH
62419: LD_VAR 0 1
62423: PUSH
62424: LD_INT 0
62426: PLUS
62427: ST_TO_ADDR
// end ;
62428: LD_VAR 0 2
62432: RET
// export function PrepareArray ( array ) ; begin
62433: LD_INT 0
62435: PPUSH
// result := array diff 0 ;
62436: LD_ADDR_VAR 0 2
62440: PUSH
62441: LD_VAR 0 1
62445: PUSH
62446: LD_INT 0
62448: DIFF
62449: ST_TO_ADDR
// if not result [ 1 ] then
62450: LD_VAR 0 2
62454: PUSH
62455: LD_INT 1
62457: ARRAY
62458: NOT
62459: IFFALSE 62479
// result := Delete ( result , 1 ) ;
62461: LD_ADDR_VAR 0 2
62465: PUSH
62466: LD_VAR 0 2
62470: PPUSH
62471: LD_INT 1
62473: PPUSH
62474: CALL_OW 3
62478: ST_TO_ADDR
// end ;
62479: LD_VAR 0 2
62483: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62484: LD_INT 0
62486: PPUSH
62487: PPUSH
62488: PPUSH
62489: PPUSH
// sibRocketRange := 25 ;
62490: LD_ADDR_VAR 0 6
62494: PUSH
62495: LD_INT 25
62497: ST_TO_ADDR
// result := false ;
62498: LD_ADDR_VAR 0 4
62502: PUSH
62503: LD_INT 0
62505: ST_TO_ADDR
// for i := 0 to 5 do
62506: LD_ADDR_VAR 0 5
62510: PUSH
62511: DOUBLE
62512: LD_INT 0
62514: DEC
62515: ST_TO_ADDR
62516: LD_INT 5
62518: PUSH
62519: FOR_TO
62520: IFFALSE 62587
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62522: LD_VAR 0 1
62526: PPUSH
62527: LD_VAR 0 5
62531: PPUSH
62532: LD_VAR 0 6
62536: PPUSH
62537: CALL_OW 272
62541: PPUSH
62542: LD_VAR 0 2
62546: PPUSH
62547: LD_VAR 0 5
62551: PPUSH
62552: LD_VAR 0 6
62556: PPUSH
62557: CALL_OW 273
62561: PPUSH
62562: LD_VAR 0 3
62566: PPUSH
62567: CALL_OW 309
62571: IFFALSE 62585
// begin result := true ;
62573: LD_ADDR_VAR 0 4
62577: PUSH
62578: LD_INT 1
62580: ST_TO_ADDR
// exit ;
62581: POP
62582: POP
62583: GO 62589
// end ;
62585: GO 62519
62587: POP
62588: POP
// end ;
62589: LD_VAR 0 4
62593: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62594: LD_INT 0
62596: PPUSH
62597: PPUSH
62598: PPUSH
// if btype = b_depot then
62599: LD_VAR 0 2
62603: PUSH
62604: LD_INT 0
62606: EQUAL
62607: IFFALSE 62619
// begin result := true ;
62609: LD_ADDR_VAR 0 3
62613: PUSH
62614: LD_INT 1
62616: ST_TO_ADDR
// exit ;
62617: GO 62735
// end ; pom := GetBase ( depot ) ;
62619: LD_ADDR_VAR 0 4
62623: PUSH
62624: LD_VAR 0 1
62628: PPUSH
62629: CALL_OW 274
62633: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62634: LD_ADDR_VAR 0 5
62638: PUSH
62639: LD_VAR 0 2
62643: PPUSH
62644: LD_VAR 0 1
62648: PPUSH
62649: CALL_OW 248
62653: PPUSH
62654: CALL_OW 450
62658: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62659: LD_ADDR_VAR 0 3
62663: PUSH
62664: LD_VAR 0 4
62668: PPUSH
62669: LD_INT 1
62671: PPUSH
62672: CALL_OW 275
62676: PUSH
62677: LD_VAR 0 5
62681: PUSH
62682: LD_INT 1
62684: ARRAY
62685: GREATEREQUAL
62686: PUSH
62687: LD_VAR 0 4
62691: PPUSH
62692: LD_INT 2
62694: PPUSH
62695: CALL_OW 275
62699: PUSH
62700: LD_VAR 0 5
62704: PUSH
62705: LD_INT 2
62707: ARRAY
62708: GREATEREQUAL
62709: AND
62710: PUSH
62711: LD_VAR 0 4
62715: PPUSH
62716: LD_INT 3
62718: PPUSH
62719: CALL_OW 275
62723: PUSH
62724: LD_VAR 0 5
62728: PUSH
62729: LD_INT 3
62731: ARRAY
62732: GREATEREQUAL
62733: AND
62734: ST_TO_ADDR
// end ;
62735: LD_VAR 0 3
62739: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62740: LD_INT 0
62742: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62743: LD_VAR 0 1
62747: PPUSH
62748: LD_VAR 0 2
62752: PPUSH
62753: LD_INT 0
62755: PPUSH
62756: LD_INT 0
62758: PPUSH
62759: LD_INT 1
62761: PPUSH
62762: LD_INT 0
62764: PPUSH
62765: CALL_OW 587
// end ;
62769: LD_VAR 0 3
62773: RET
// export function CenterOnNow ( unit ) ; begin
62774: LD_INT 0
62776: PPUSH
// result := IsInUnit ( unit ) ;
62777: LD_ADDR_VAR 0 2
62781: PUSH
62782: LD_VAR 0 1
62786: PPUSH
62787: CALL_OW 310
62791: ST_TO_ADDR
// if not result then
62792: LD_VAR 0 2
62796: NOT
62797: IFFALSE 62809
// result := unit ;
62799: LD_ADDR_VAR 0 2
62803: PUSH
62804: LD_VAR 0 1
62808: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62809: LD_VAR 0 1
62813: PPUSH
62814: CALL_OW 87
// end ;
62818: LD_VAR 0 2
62822: RET
// export function ComMoveHex ( unit , hex ) ; begin
62823: LD_INT 0
62825: PPUSH
// if not hex then
62826: LD_VAR 0 2
62830: NOT
62831: IFFALSE 62835
// exit ;
62833: GO 62888
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62835: LD_VAR 0 2
62839: PUSH
62840: LD_INT 1
62842: ARRAY
62843: PPUSH
62844: LD_VAR 0 2
62848: PUSH
62849: LD_INT 2
62851: ARRAY
62852: PPUSH
62853: CALL_OW 428
62857: IFFALSE 62861
// exit ;
62859: GO 62888
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62861: LD_VAR 0 1
62865: PPUSH
62866: LD_VAR 0 2
62870: PUSH
62871: LD_INT 1
62873: ARRAY
62874: PPUSH
62875: LD_VAR 0 2
62879: PUSH
62880: LD_INT 2
62882: ARRAY
62883: PPUSH
62884: CALL_OW 111
// end ;
62888: LD_VAR 0 3
62892: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62893: LD_INT 0
62895: PPUSH
62896: PPUSH
62897: PPUSH
// if not unit or not enemy then
62898: LD_VAR 0 1
62902: NOT
62903: PUSH
62904: LD_VAR 0 2
62908: NOT
62909: OR
62910: IFFALSE 62914
// exit ;
62912: GO 63038
// x := GetX ( enemy ) ;
62914: LD_ADDR_VAR 0 4
62918: PUSH
62919: LD_VAR 0 2
62923: PPUSH
62924: CALL_OW 250
62928: ST_TO_ADDR
// y := GetY ( enemy ) ;
62929: LD_ADDR_VAR 0 5
62933: PUSH
62934: LD_VAR 0 2
62938: PPUSH
62939: CALL_OW 251
62943: ST_TO_ADDR
// if ValidHex ( x , y ) then
62944: LD_VAR 0 4
62948: PPUSH
62949: LD_VAR 0 5
62953: PPUSH
62954: CALL_OW 488
62958: IFFALSE 63038
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
62960: LD_VAR 0 2
62964: PPUSH
62965: CALL_OW 247
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: LD_INT 2
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: IN
62980: PUSH
62981: LD_VAR 0 1
62985: PPUSH
62986: CALL_OW 255
62990: PPUSH
62991: LD_VAR 0 2
62995: PPUSH
62996: CALL_OW 292
63000: OR
63001: IFFALSE 63019
// ComAttackUnit ( unit , enemy ) else
63003: LD_VAR 0 1
63007: PPUSH
63008: LD_VAR 0 2
63012: PPUSH
63013: CALL_OW 115
63017: GO 63038
// ComAgressiveMove ( unit , x , y ) ;
63019: LD_VAR 0 1
63023: PPUSH
63024: LD_VAR 0 4
63028: PPUSH
63029: LD_VAR 0 5
63033: PPUSH
63034: CALL_OW 114
// end ;
63038: LD_VAR 0 3
63042: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63043: LD_INT 0
63045: PPUSH
63046: PPUSH
63047: PPUSH
// list := AreaToList ( area , 0 ) ;
63048: LD_ADDR_VAR 0 5
63052: PUSH
63053: LD_VAR 0 1
63057: PPUSH
63058: LD_INT 0
63060: PPUSH
63061: CALL_OW 517
63065: ST_TO_ADDR
// if not list then
63066: LD_VAR 0 5
63070: NOT
63071: IFFALSE 63075
// exit ;
63073: GO 63205
// if all then
63075: LD_VAR 0 2
63079: IFFALSE 63167
// begin for i := 1 to list [ 1 ] do
63081: LD_ADDR_VAR 0 4
63085: PUSH
63086: DOUBLE
63087: LD_INT 1
63089: DEC
63090: ST_TO_ADDR
63091: LD_VAR 0 5
63095: PUSH
63096: LD_INT 1
63098: ARRAY
63099: PUSH
63100: FOR_TO
63101: IFFALSE 63163
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63103: LD_ADDR_VAR 0 3
63107: PUSH
63108: LD_VAR 0 3
63112: PPUSH
63113: LD_VAR 0 3
63117: PUSH
63118: LD_INT 1
63120: PLUS
63121: PPUSH
63122: LD_VAR 0 5
63126: PUSH
63127: LD_INT 1
63129: ARRAY
63130: PUSH
63131: LD_VAR 0 4
63135: ARRAY
63136: PUSH
63137: LD_VAR 0 5
63141: PUSH
63142: LD_INT 2
63144: ARRAY
63145: PUSH
63146: LD_VAR 0 4
63150: ARRAY
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PPUSH
63156: CALL_OW 1
63160: ST_TO_ADDR
63161: GO 63100
63163: POP
63164: POP
// exit ;
63165: GO 63205
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63167: LD_ADDR_VAR 0 3
63171: PUSH
63172: LD_VAR 0 5
63176: PUSH
63177: LD_INT 1
63179: ARRAY
63180: PUSH
63181: LD_INT 1
63183: ARRAY
63184: PUSH
63185: LD_VAR 0 5
63189: PUSH
63190: LD_INT 2
63192: ARRAY
63193: PUSH
63194: LD_INT 1
63196: ARRAY
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: EMPTY
63203: LIST
63204: ST_TO_ADDR
// end ;
63205: LD_VAR 0 3
63209: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63210: LD_INT 0
63212: PPUSH
63213: PPUSH
// list := AreaToList ( area , 0 ) ;
63214: LD_ADDR_VAR 0 4
63218: PUSH
63219: LD_VAR 0 1
63223: PPUSH
63224: LD_INT 0
63226: PPUSH
63227: CALL_OW 517
63231: ST_TO_ADDR
// if not list then
63232: LD_VAR 0 4
63236: NOT
63237: IFFALSE 63241
// exit ;
63239: GO 63282
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63241: LD_ADDR_VAR 0 3
63245: PUSH
63246: LD_VAR 0 4
63250: PUSH
63251: LD_INT 1
63253: ARRAY
63254: PUSH
63255: LD_INT 1
63257: ARRAY
63258: PUSH
63259: LD_VAR 0 4
63263: PUSH
63264: LD_INT 2
63266: ARRAY
63267: PUSH
63268: LD_INT 1
63270: ARRAY
63271: PUSH
63272: LD_VAR 0 2
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: LIST
63281: ST_TO_ADDR
// end ;
63282: LD_VAR 0 3
63286: RET
// export function First ( array ) ; begin
63287: LD_INT 0
63289: PPUSH
// if not array then
63290: LD_VAR 0 1
63294: NOT
63295: IFFALSE 63299
// exit ;
63297: GO 63313
// result := array [ 1 ] ;
63299: LD_ADDR_VAR 0 2
63303: PUSH
63304: LD_VAR 0 1
63308: PUSH
63309: LD_INT 1
63311: ARRAY
63312: ST_TO_ADDR
// end ;
63313: LD_VAR 0 2
63317: RET
// export function Last ( array ) ; begin
63318: LD_INT 0
63320: PPUSH
// if not array then
63321: LD_VAR 0 1
63325: NOT
63326: IFFALSE 63330
// exit ;
63328: GO 63346
// result := array [ array ] ;
63330: LD_ADDR_VAR 0 2
63334: PUSH
63335: LD_VAR 0 1
63339: PUSH
63340: LD_VAR 0 1
63344: ARRAY
63345: ST_TO_ADDR
// end ;
63346: LD_VAR 0 2
63350: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63351: LD_INT 0
63353: PPUSH
63354: PPUSH
// result := [ ] ;
63355: LD_ADDR_VAR 0 5
63359: PUSH
63360: EMPTY
63361: ST_TO_ADDR
// if not array then
63362: LD_VAR 0 1
63366: NOT
63367: IFFALSE 63371
// exit ;
63369: GO 63483
// for i := 1 to array do
63371: LD_ADDR_VAR 0 6
63375: PUSH
63376: DOUBLE
63377: LD_INT 1
63379: DEC
63380: ST_TO_ADDR
63381: LD_VAR 0 1
63385: PUSH
63386: FOR_TO
63387: IFFALSE 63481
// if array [ i ] [ index ] = value then
63389: LD_VAR 0 1
63393: PUSH
63394: LD_VAR 0 6
63398: ARRAY
63399: PUSH
63400: LD_VAR 0 2
63404: ARRAY
63405: PUSH
63406: LD_VAR 0 3
63410: EQUAL
63411: IFFALSE 63479
// begin if indexColumn then
63413: LD_VAR 0 4
63417: IFFALSE 63453
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63419: LD_ADDR_VAR 0 5
63423: PUSH
63424: LD_VAR 0 5
63428: PPUSH
63429: LD_VAR 0 1
63433: PUSH
63434: LD_VAR 0 6
63438: ARRAY
63439: PUSH
63440: LD_VAR 0 4
63444: ARRAY
63445: PPUSH
63446: CALL 58665 0 2
63450: ST_TO_ADDR
63451: GO 63479
// result := Join ( result , array [ i ] ) ;
63453: LD_ADDR_VAR 0 5
63457: PUSH
63458: LD_VAR 0 5
63462: PPUSH
63463: LD_VAR 0 1
63467: PUSH
63468: LD_VAR 0 6
63472: ARRAY
63473: PPUSH
63474: CALL 58665 0 2
63478: ST_TO_ADDR
// end ;
63479: GO 63386
63481: POP
63482: POP
// end ;
63483: LD_VAR 0 5
63487: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63488: LD_INT 0
63490: PPUSH
// if not vehicles or not parkingPoint then
63491: LD_VAR 0 1
63495: NOT
63496: PUSH
63497: LD_VAR 0 2
63501: NOT
63502: OR
63503: IFFALSE 63507
// exit ;
63505: GO 63605
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63507: LD_ADDR_VAR 0 1
63511: PUSH
63512: LD_VAR 0 1
63516: PPUSH
63517: LD_INT 50
63519: PUSH
63520: EMPTY
63521: LIST
63522: PUSH
63523: LD_INT 3
63525: PUSH
63526: LD_INT 92
63528: PUSH
63529: LD_VAR 0 2
63533: PUSH
63534: LD_INT 1
63536: ARRAY
63537: PUSH
63538: LD_VAR 0 2
63542: PUSH
63543: LD_INT 2
63545: ARRAY
63546: PUSH
63547: LD_INT 8
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PPUSH
63564: CALL_OW 72
63568: ST_TO_ADDR
// if not vehicles then
63569: LD_VAR 0 1
63573: NOT
63574: IFFALSE 63578
// exit ;
63576: GO 63605
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63578: LD_VAR 0 1
63582: PPUSH
63583: LD_VAR 0 2
63587: PUSH
63588: LD_INT 1
63590: ARRAY
63591: PPUSH
63592: LD_VAR 0 2
63596: PUSH
63597: LD_INT 2
63599: ARRAY
63600: PPUSH
63601: CALL_OW 111
// end ;
63605: LD_VAR 0 3
63609: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63610: LD_INT 0
63612: PPUSH
63613: PPUSH
63614: PPUSH
// if not side or not area then
63615: LD_VAR 0 1
63619: NOT
63620: PUSH
63621: LD_VAR 0 2
63625: NOT
63626: OR
63627: IFFALSE 63631
// exit ;
63629: GO 63750
// tmp := AreaToList ( area , 0 ) ;
63631: LD_ADDR_VAR 0 5
63635: PUSH
63636: LD_VAR 0 2
63640: PPUSH
63641: LD_INT 0
63643: PPUSH
63644: CALL_OW 517
63648: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63649: LD_ADDR_VAR 0 4
63653: PUSH
63654: DOUBLE
63655: LD_INT 1
63657: DEC
63658: ST_TO_ADDR
63659: LD_VAR 0 5
63663: PUSH
63664: LD_INT 1
63666: ARRAY
63667: PUSH
63668: FOR_TO
63669: IFFALSE 63748
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63671: LD_VAR 0 5
63675: PUSH
63676: LD_INT 1
63678: ARRAY
63679: PUSH
63680: LD_VAR 0 4
63684: ARRAY
63685: PPUSH
63686: LD_VAR 0 5
63690: PUSH
63691: LD_INT 2
63693: ARRAY
63694: PUSH
63695: LD_VAR 0 4
63699: ARRAY
63700: PPUSH
63701: CALL_OW 351
63705: IFFALSE 63746
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63707: LD_VAR 0 5
63711: PUSH
63712: LD_INT 1
63714: ARRAY
63715: PUSH
63716: LD_VAR 0 4
63720: ARRAY
63721: PPUSH
63722: LD_VAR 0 5
63726: PUSH
63727: LD_INT 2
63729: ARRAY
63730: PUSH
63731: LD_VAR 0 4
63735: ARRAY
63736: PPUSH
63737: LD_VAR 0 1
63741: PPUSH
63742: CALL_OW 244
// end ;
63746: GO 63668
63748: POP
63749: POP
// end ; end_of_file end_of_file
63750: LD_VAR 0 3
63754: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63755: LD_VAR 0 1
63759: PPUSH
63760: LD_VAR 0 2
63764: PPUSH
63765: LD_VAR 0 3
63769: PPUSH
63770: LD_VAR 0 4
63774: PPUSH
63775: LD_VAR 0 5
63779: PPUSH
63780: LD_VAR 0 6
63784: PPUSH
63785: CALL 63986 0 6
// end ;
63789: PPOPN 6
63791: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63792: LD_INT 0
63794: PPUSH
// begin if not units then
63795: LD_VAR 0 1
63799: NOT
63800: IFFALSE 63804
// exit ;
63802: GO 63804
// end ;
63804: PPOPN 7
63806: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63807: CALL 63873 0 0
// end ; end_of_file
63811: PPOPN 1
63813: END
// export globalGameSaveCounter ; every 0 0$1 do
63814: GO 63816
63816: DISABLE
// begin enable ;
63817: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63818: LD_STRING updateTimer(
63820: PUSH
63821: LD_OWVAR 1
63825: STR
63826: PUSH
63827: LD_STRING );
63829: STR
63830: PPUSH
63831: CALL_OW 559
// end ;
63835: END
// every 0 0$1 do
63836: GO 63838
63838: DISABLE
// begin globalGameSaveCounter := 0 ;
63839: LD_ADDR_EXP 46
63843: PUSH
63844: LD_INT 0
63846: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
63847: LD_STRING setGameSaveCounter(0)
63849: PPUSH
63850: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
63854: LD_STRING initStreamRollete();
63856: PPUSH
63857: CALL_OW 559
// InitStreamMode ;
63861: CALL 65204 0 0
// DefineStreamItems ( false ) ;
63865: LD_INT 0
63867: PPUSH
63868: CALL 65668 0 1
// end ;
63872: END
// export function SOS_MapStart ( ) ; begin
63873: LD_INT 0
63875: PPUSH
// if streamModeActive then
63876: LD_EXP 47
63880: IFFALSE 63889
// DefineStreamItems ( true ) ;
63882: LD_INT 1
63884: PPUSH
63885: CALL 65668 0 1
// UpdateLuaVariables ( ) ;
63889: CALL 63906 0 0
// UpdateFactoryWaypoints ( ) ;
63893: CALL 78670 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63897: CALL 78922 0 0
// end ;
63901: LD_VAR 0 1
63905: RET
// function UpdateLuaVariables ( ) ; begin
63906: LD_INT 0
63908: PPUSH
// if globalGameSaveCounter then
63909: LD_EXP 46
63913: IFFALSE 63947
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
63915: LD_ADDR_EXP 46
63919: PUSH
63920: LD_EXP 46
63924: PPUSH
63925: CALL 60026 0 1
63929: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
63930: LD_STRING setGameSaveCounter(
63932: PUSH
63933: LD_EXP 46
63937: STR
63938: PUSH
63939: LD_STRING )
63941: STR
63942: PPUSH
63943: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63947: LD_STRING setGameDifficulty(
63949: PUSH
63950: LD_OWVAR 67
63954: STR
63955: PUSH
63956: LD_STRING )
63958: STR
63959: PPUSH
63960: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63964: LD_STRING displayDifficulty(
63966: PUSH
63967: LD_OWVAR 67
63971: STR
63972: PUSH
63973: LD_STRING )
63975: STR
63976: PPUSH
63977: CALL_OW 559
// end ;
63981: LD_VAR 0 1
63985: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63986: LD_INT 0
63988: PPUSH
// if p2 = stream_mode then
63989: LD_VAR 0 2
63993: PUSH
63994: LD_INT 100
63996: EQUAL
63997: IFFALSE 65000
// begin if not StreamModeActive then
63999: LD_EXP 47
64003: NOT
64004: IFFALSE 64014
// StreamModeActive := true ;
64006: LD_ADDR_EXP 47
64010: PUSH
64011: LD_INT 1
64013: ST_TO_ADDR
// if p3 = 0 then
64014: LD_VAR 0 3
64018: PUSH
64019: LD_INT 0
64021: EQUAL
64022: IFFALSE 64028
// InitStreamMode ;
64024: CALL 65204 0 0
// if p3 = 1 then
64028: LD_VAR 0 3
64032: PUSH
64033: LD_INT 1
64035: EQUAL
64036: IFFALSE 64046
// sRocket := true ;
64038: LD_ADDR_EXP 52
64042: PUSH
64043: LD_INT 1
64045: ST_TO_ADDR
// if p3 = 2 then
64046: LD_VAR 0 3
64050: PUSH
64051: LD_INT 2
64053: EQUAL
64054: IFFALSE 64064
// sSpeed := true ;
64056: LD_ADDR_EXP 51
64060: PUSH
64061: LD_INT 1
64063: ST_TO_ADDR
// if p3 = 3 then
64064: LD_VAR 0 3
64068: PUSH
64069: LD_INT 3
64071: EQUAL
64072: IFFALSE 64082
// sEngine := true ;
64074: LD_ADDR_EXP 53
64078: PUSH
64079: LD_INT 1
64081: ST_TO_ADDR
// if p3 = 4 then
64082: LD_VAR 0 3
64086: PUSH
64087: LD_INT 4
64089: EQUAL
64090: IFFALSE 64100
// sSpec := true ;
64092: LD_ADDR_EXP 50
64096: PUSH
64097: LD_INT 1
64099: ST_TO_ADDR
// if p3 = 5 then
64100: LD_VAR 0 3
64104: PUSH
64105: LD_INT 5
64107: EQUAL
64108: IFFALSE 64118
// sLevel := true ;
64110: LD_ADDR_EXP 54
64114: PUSH
64115: LD_INT 1
64117: ST_TO_ADDR
// if p3 = 6 then
64118: LD_VAR 0 3
64122: PUSH
64123: LD_INT 6
64125: EQUAL
64126: IFFALSE 64136
// sArmoury := true ;
64128: LD_ADDR_EXP 55
64132: PUSH
64133: LD_INT 1
64135: ST_TO_ADDR
// if p3 = 7 then
64136: LD_VAR 0 3
64140: PUSH
64141: LD_INT 7
64143: EQUAL
64144: IFFALSE 64154
// sRadar := true ;
64146: LD_ADDR_EXP 56
64150: PUSH
64151: LD_INT 1
64153: ST_TO_ADDR
// if p3 = 8 then
64154: LD_VAR 0 3
64158: PUSH
64159: LD_INT 8
64161: EQUAL
64162: IFFALSE 64172
// sBunker := true ;
64164: LD_ADDR_EXP 57
64168: PUSH
64169: LD_INT 1
64171: ST_TO_ADDR
// if p3 = 9 then
64172: LD_VAR 0 3
64176: PUSH
64177: LD_INT 9
64179: EQUAL
64180: IFFALSE 64190
// sHack := true ;
64182: LD_ADDR_EXP 58
64186: PUSH
64187: LD_INT 1
64189: ST_TO_ADDR
// if p3 = 10 then
64190: LD_VAR 0 3
64194: PUSH
64195: LD_INT 10
64197: EQUAL
64198: IFFALSE 64208
// sFire := true ;
64200: LD_ADDR_EXP 59
64204: PUSH
64205: LD_INT 1
64207: ST_TO_ADDR
// if p3 = 11 then
64208: LD_VAR 0 3
64212: PUSH
64213: LD_INT 11
64215: EQUAL
64216: IFFALSE 64226
// sRefresh := true ;
64218: LD_ADDR_EXP 60
64222: PUSH
64223: LD_INT 1
64225: ST_TO_ADDR
// if p3 = 12 then
64226: LD_VAR 0 3
64230: PUSH
64231: LD_INT 12
64233: EQUAL
64234: IFFALSE 64244
// sExp := true ;
64236: LD_ADDR_EXP 61
64240: PUSH
64241: LD_INT 1
64243: ST_TO_ADDR
// if p3 = 13 then
64244: LD_VAR 0 3
64248: PUSH
64249: LD_INT 13
64251: EQUAL
64252: IFFALSE 64262
// sDepot := true ;
64254: LD_ADDR_EXP 62
64258: PUSH
64259: LD_INT 1
64261: ST_TO_ADDR
// if p3 = 14 then
64262: LD_VAR 0 3
64266: PUSH
64267: LD_INT 14
64269: EQUAL
64270: IFFALSE 64280
// sFlag := true ;
64272: LD_ADDR_EXP 63
64276: PUSH
64277: LD_INT 1
64279: ST_TO_ADDR
// if p3 = 15 then
64280: LD_VAR 0 3
64284: PUSH
64285: LD_INT 15
64287: EQUAL
64288: IFFALSE 64298
// sKamikadze := true ;
64290: LD_ADDR_EXP 71
64294: PUSH
64295: LD_INT 1
64297: ST_TO_ADDR
// if p3 = 16 then
64298: LD_VAR 0 3
64302: PUSH
64303: LD_INT 16
64305: EQUAL
64306: IFFALSE 64316
// sTroll := true ;
64308: LD_ADDR_EXP 72
64312: PUSH
64313: LD_INT 1
64315: ST_TO_ADDR
// if p3 = 17 then
64316: LD_VAR 0 3
64320: PUSH
64321: LD_INT 17
64323: EQUAL
64324: IFFALSE 64334
// sSlow := true ;
64326: LD_ADDR_EXP 73
64330: PUSH
64331: LD_INT 1
64333: ST_TO_ADDR
// if p3 = 18 then
64334: LD_VAR 0 3
64338: PUSH
64339: LD_INT 18
64341: EQUAL
64342: IFFALSE 64352
// sLack := true ;
64344: LD_ADDR_EXP 74
64348: PUSH
64349: LD_INT 1
64351: ST_TO_ADDR
// if p3 = 19 then
64352: LD_VAR 0 3
64356: PUSH
64357: LD_INT 19
64359: EQUAL
64360: IFFALSE 64370
// sTank := true ;
64362: LD_ADDR_EXP 76
64366: PUSH
64367: LD_INT 1
64369: ST_TO_ADDR
// if p3 = 20 then
64370: LD_VAR 0 3
64374: PUSH
64375: LD_INT 20
64377: EQUAL
64378: IFFALSE 64388
// sRemote := true ;
64380: LD_ADDR_EXP 77
64384: PUSH
64385: LD_INT 1
64387: ST_TO_ADDR
// if p3 = 21 then
64388: LD_VAR 0 3
64392: PUSH
64393: LD_INT 21
64395: EQUAL
64396: IFFALSE 64406
// sPowell := true ;
64398: LD_ADDR_EXP 78
64402: PUSH
64403: LD_INT 1
64405: ST_TO_ADDR
// if p3 = 22 then
64406: LD_VAR 0 3
64410: PUSH
64411: LD_INT 22
64413: EQUAL
64414: IFFALSE 64424
// sTeleport := true ;
64416: LD_ADDR_EXP 81
64420: PUSH
64421: LD_INT 1
64423: ST_TO_ADDR
// if p3 = 23 then
64424: LD_VAR 0 3
64428: PUSH
64429: LD_INT 23
64431: EQUAL
64432: IFFALSE 64442
// sOilTower := true ;
64434: LD_ADDR_EXP 83
64438: PUSH
64439: LD_INT 1
64441: ST_TO_ADDR
// if p3 = 24 then
64442: LD_VAR 0 3
64446: PUSH
64447: LD_INT 24
64449: EQUAL
64450: IFFALSE 64460
// sShovel := true ;
64452: LD_ADDR_EXP 84
64456: PUSH
64457: LD_INT 1
64459: ST_TO_ADDR
// if p3 = 25 then
64460: LD_VAR 0 3
64464: PUSH
64465: LD_INT 25
64467: EQUAL
64468: IFFALSE 64478
// sSheik := true ;
64470: LD_ADDR_EXP 85
64474: PUSH
64475: LD_INT 1
64477: ST_TO_ADDR
// if p3 = 26 then
64478: LD_VAR 0 3
64482: PUSH
64483: LD_INT 26
64485: EQUAL
64486: IFFALSE 64496
// sEarthquake := true ;
64488: LD_ADDR_EXP 87
64492: PUSH
64493: LD_INT 1
64495: ST_TO_ADDR
// if p3 = 27 then
64496: LD_VAR 0 3
64500: PUSH
64501: LD_INT 27
64503: EQUAL
64504: IFFALSE 64514
// sAI := true ;
64506: LD_ADDR_EXP 88
64510: PUSH
64511: LD_INT 1
64513: ST_TO_ADDR
// if p3 = 28 then
64514: LD_VAR 0 3
64518: PUSH
64519: LD_INT 28
64521: EQUAL
64522: IFFALSE 64532
// sCargo := true ;
64524: LD_ADDR_EXP 91
64528: PUSH
64529: LD_INT 1
64531: ST_TO_ADDR
// if p3 = 29 then
64532: LD_VAR 0 3
64536: PUSH
64537: LD_INT 29
64539: EQUAL
64540: IFFALSE 64550
// sDLaser := true ;
64542: LD_ADDR_EXP 92
64546: PUSH
64547: LD_INT 1
64549: ST_TO_ADDR
// if p3 = 30 then
64550: LD_VAR 0 3
64554: PUSH
64555: LD_INT 30
64557: EQUAL
64558: IFFALSE 64568
// sExchange := true ;
64560: LD_ADDR_EXP 93
64564: PUSH
64565: LD_INT 1
64567: ST_TO_ADDR
// if p3 = 31 then
64568: LD_VAR 0 3
64572: PUSH
64573: LD_INT 31
64575: EQUAL
64576: IFFALSE 64586
// sFac := true ;
64578: LD_ADDR_EXP 94
64582: PUSH
64583: LD_INT 1
64585: ST_TO_ADDR
// if p3 = 32 then
64586: LD_VAR 0 3
64590: PUSH
64591: LD_INT 32
64593: EQUAL
64594: IFFALSE 64604
// sPower := true ;
64596: LD_ADDR_EXP 95
64600: PUSH
64601: LD_INT 1
64603: ST_TO_ADDR
// if p3 = 33 then
64604: LD_VAR 0 3
64608: PUSH
64609: LD_INT 33
64611: EQUAL
64612: IFFALSE 64622
// sRandom := true ;
64614: LD_ADDR_EXP 96
64618: PUSH
64619: LD_INT 1
64621: ST_TO_ADDR
// if p3 = 34 then
64622: LD_VAR 0 3
64626: PUSH
64627: LD_INT 34
64629: EQUAL
64630: IFFALSE 64640
// sShield := true ;
64632: LD_ADDR_EXP 97
64636: PUSH
64637: LD_INT 1
64639: ST_TO_ADDR
// if p3 = 35 then
64640: LD_VAR 0 3
64644: PUSH
64645: LD_INT 35
64647: EQUAL
64648: IFFALSE 64658
// sTime := true ;
64650: LD_ADDR_EXP 98
64654: PUSH
64655: LD_INT 1
64657: ST_TO_ADDR
// if p3 = 36 then
64658: LD_VAR 0 3
64662: PUSH
64663: LD_INT 36
64665: EQUAL
64666: IFFALSE 64676
// sTools := true ;
64668: LD_ADDR_EXP 99
64672: PUSH
64673: LD_INT 1
64675: ST_TO_ADDR
// if p3 = 101 then
64676: LD_VAR 0 3
64680: PUSH
64681: LD_INT 101
64683: EQUAL
64684: IFFALSE 64694
// sSold := true ;
64686: LD_ADDR_EXP 64
64690: PUSH
64691: LD_INT 1
64693: ST_TO_ADDR
// if p3 = 102 then
64694: LD_VAR 0 3
64698: PUSH
64699: LD_INT 102
64701: EQUAL
64702: IFFALSE 64712
// sDiff := true ;
64704: LD_ADDR_EXP 65
64708: PUSH
64709: LD_INT 1
64711: ST_TO_ADDR
// if p3 = 103 then
64712: LD_VAR 0 3
64716: PUSH
64717: LD_INT 103
64719: EQUAL
64720: IFFALSE 64730
// sFog := true ;
64722: LD_ADDR_EXP 68
64726: PUSH
64727: LD_INT 1
64729: ST_TO_ADDR
// if p3 = 104 then
64730: LD_VAR 0 3
64734: PUSH
64735: LD_INT 104
64737: EQUAL
64738: IFFALSE 64748
// sReset := true ;
64740: LD_ADDR_EXP 69
64744: PUSH
64745: LD_INT 1
64747: ST_TO_ADDR
// if p3 = 105 then
64748: LD_VAR 0 3
64752: PUSH
64753: LD_INT 105
64755: EQUAL
64756: IFFALSE 64766
// sSun := true ;
64758: LD_ADDR_EXP 70
64762: PUSH
64763: LD_INT 1
64765: ST_TO_ADDR
// if p3 = 106 then
64766: LD_VAR 0 3
64770: PUSH
64771: LD_INT 106
64773: EQUAL
64774: IFFALSE 64784
// sTiger := true ;
64776: LD_ADDR_EXP 66
64780: PUSH
64781: LD_INT 1
64783: ST_TO_ADDR
// if p3 = 107 then
64784: LD_VAR 0 3
64788: PUSH
64789: LD_INT 107
64791: EQUAL
64792: IFFALSE 64802
// sBomb := true ;
64794: LD_ADDR_EXP 67
64798: PUSH
64799: LD_INT 1
64801: ST_TO_ADDR
// if p3 = 108 then
64802: LD_VAR 0 3
64806: PUSH
64807: LD_INT 108
64809: EQUAL
64810: IFFALSE 64820
// sWound := true ;
64812: LD_ADDR_EXP 75
64816: PUSH
64817: LD_INT 1
64819: ST_TO_ADDR
// if p3 = 109 then
64820: LD_VAR 0 3
64824: PUSH
64825: LD_INT 109
64827: EQUAL
64828: IFFALSE 64838
// sBetray := true ;
64830: LD_ADDR_EXP 79
64834: PUSH
64835: LD_INT 1
64837: ST_TO_ADDR
// if p3 = 110 then
64838: LD_VAR 0 3
64842: PUSH
64843: LD_INT 110
64845: EQUAL
64846: IFFALSE 64856
// sContamin := true ;
64848: LD_ADDR_EXP 80
64852: PUSH
64853: LD_INT 1
64855: ST_TO_ADDR
// if p3 = 111 then
64856: LD_VAR 0 3
64860: PUSH
64861: LD_INT 111
64863: EQUAL
64864: IFFALSE 64874
// sOil := true ;
64866: LD_ADDR_EXP 82
64870: PUSH
64871: LD_INT 1
64873: ST_TO_ADDR
// if p3 = 112 then
64874: LD_VAR 0 3
64878: PUSH
64879: LD_INT 112
64881: EQUAL
64882: IFFALSE 64892
// sStu := true ;
64884: LD_ADDR_EXP 86
64888: PUSH
64889: LD_INT 1
64891: ST_TO_ADDR
// if p3 = 113 then
64892: LD_VAR 0 3
64896: PUSH
64897: LD_INT 113
64899: EQUAL
64900: IFFALSE 64910
// sBazooka := true ;
64902: LD_ADDR_EXP 89
64906: PUSH
64907: LD_INT 1
64909: ST_TO_ADDR
// if p3 = 114 then
64910: LD_VAR 0 3
64914: PUSH
64915: LD_INT 114
64917: EQUAL
64918: IFFALSE 64928
// sMortar := true ;
64920: LD_ADDR_EXP 90
64924: PUSH
64925: LD_INT 1
64927: ST_TO_ADDR
// if p3 = 115 then
64928: LD_VAR 0 3
64932: PUSH
64933: LD_INT 115
64935: EQUAL
64936: IFFALSE 64946
// sRanger := true ;
64938: LD_ADDR_EXP 100
64942: PUSH
64943: LD_INT 1
64945: ST_TO_ADDR
// if p3 = 116 then
64946: LD_VAR 0 3
64950: PUSH
64951: LD_INT 116
64953: EQUAL
64954: IFFALSE 64964
// sComputer := true ;
64956: LD_ADDR_EXP 101
64960: PUSH
64961: LD_INT 1
64963: ST_TO_ADDR
// if p3 = 117 then
64964: LD_VAR 0 3
64968: PUSH
64969: LD_INT 117
64971: EQUAL
64972: IFFALSE 64982
// s30 := true ;
64974: LD_ADDR_EXP 102
64978: PUSH
64979: LD_INT 1
64981: ST_TO_ADDR
// if p3 = 118 then
64982: LD_VAR 0 3
64986: PUSH
64987: LD_INT 118
64989: EQUAL
64990: IFFALSE 65000
// s60 := true ;
64992: LD_ADDR_EXP 103
64996: PUSH
64997: LD_INT 1
64999: ST_TO_ADDR
// end ; if p2 = hack_mode then
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 101
65007: EQUAL
65008: IFFALSE 65136
// begin case p3 of 1 :
65010: LD_VAR 0 3
65014: PUSH
65015: LD_INT 1
65017: DOUBLE
65018: EQUAL
65019: IFTRUE 65023
65021: GO 65030
65023: POP
// hHackUnlimitedResources ; 2 :
65024: CALL 77283 0 0
65028: GO 65136
65030: LD_INT 2
65032: DOUBLE
65033: EQUAL
65034: IFTRUE 65038
65036: GO 65045
65038: POP
// hHackSetLevel10 ; 3 :
65039: CALL 77416 0 0
65043: GO 65136
65045: LD_INT 3
65047: DOUBLE
65048: EQUAL
65049: IFTRUE 65053
65051: GO 65060
65053: POP
// hHackSetLevel10YourUnits ; 4 :
65054: CALL 77501 0 0
65058: GO 65136
65060: LD_INT 4
65062: DOUBLE
65063: EQUAL
65064: IFTRUE 65068
65066: GO 65075
65068: POP
// hHackInvincible ; 5 :
65069: CALL 77949 0 0
65073: GO 65136
65075: LD_INT 5
65077: DOUBLE
65078: EQUAL
65079: IFTRUE 65083
65081: GO 65090
65083: POP
// hHackInvisible ; 6 :
65084: CALL 78060 0 0
65088: GO 65136
65090: LD_INT 6
65092: DOUBLE
65093: EQUAL
65094: IFTRUE 65098
65096: GO 65105
65098: POP
// hHackChangeYourSide ; 7 :
65099: CALL 78117 0 0
65103: GO 65136
65105: LD_INT 7
65107: DOUBLE
65108: EQUAL
65109: IFTRUE 65113
65111: GO 65120
65113: POP
// hHackChangeUnitSide ; 8 :
65114: CALL 78159 0 0
65118: GO 65136
65120: LD_INT 8
65122: DOUBLE
65123: EQUAL
65124: IFTRUE 65128
65126: GO 65135
65128: POP
// hHackFog ; end ;
65129: CALL 78260 0 0
65133: GO 65136
65135: POP
// end ; if p2 = game_save_mode then
65136: LD_VAR 0 2
65140: PUSH
65141: LD_INT 102
65143: EQUAL
65144: IFFALSE 65199
// begin if p3 = 1 then
65146: LD_VAR 0 3
65150: PUSH
65151: LD_INT 1
65153: EQUAL
65154: IFFALSE 65166
// globalGameSaveCounter := p4 ;
65156: LD_ADDR_EXP 46
65160: PUSH
65161: LD_VAR 0 4
65165: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
65166: LD_VAR 0 3
65170: PUSH
65171: LD_INT 2
65173: EQUAL
65174: PUSH
65175: LD_EXP 46
65179: AND
65180: IFFALSE 65199
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65182: LD_STRING setGameSaveCounter(
65184: PUSH
65185: LD_EXP 46
65189: STR
65190: PUSH
65191: LD_STRING )
65193: STR
65194: PPUSH
65195: CALL_OW 559
// end ; end ;
65199: LD_VAR 0 7
65203: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65204: LD_INT 0
65206: PPUSH
// streamModeActive := false ;
65207: LD_ADDR_EXP 47
65211: PUSH
65212: LD_INT 0
65214: ST_TO_ADDR
// normalCounter := 36 ;
65215: LD_ADDR_EXP 48
65219: PUSH
65220: LD_INT 36
65222: ST_TO_ADDR
// hardcoreCounter := 18 ;
65223: LD_ADDR_EXP 49
65227: PUSH
65228: LD_INT 18
65230: ST_TO_ADDR
// sRocket := false ;
65231: LD_ADDR_EXP 52
65235: PUSH
65236: LD_INT 0
65238: ST_TO_ADDR
// sSpeed := false ;
65239: LD_ADDR_EXP 51
65243: PUSH
65244: LD_INT 0
65246: ST_TO_ADDR
// sEngine := false ;
65247: LD_ADDR_EXP 53
65251: PUSH
65252: LD_INT 0
65254: ST_TO_ADDR
// sSpec := false ;
65255: LD_ADDR_EXP 50
65259: PUSH
65260: LD_INT 0
65262: ST_TO_ADDR
// sLevel := false ;
65263: LD_ADDR_EXP 54
65267: PUSH
65268: LD_INT 0
65270: ST_TO_ADDR
// sArmoury := false ;
65271: LD_ADDR_EXP 55
65275: PUSH
65276: LD_INT 0
65278: ST_TO_ADDR
// sRadar := false ;
65279: LD_ADDR_EXP 56
65283: PUSH
65284: LD_INT 0
65286: ST_TO_ADDR
// sBunker := false ;
65287: LD_ADDR_EXP 57
65291: PUSH
65292: LD_INT 0
65294: ST_TO_ADDR
// sHack := false ;
65295: LD_ADDR_EXP 58
65299: PUSH
65300: LD_INT 0
65302: ST_TO_ADDR
// sFire := false ;
65303: LD_ADDR_EXP 59
65307: PUSH
65308: LD_INT 0
65310: ST_TO_ADDR
// sRefresh := false ;
65311: LD_ADDR_EXP 60
65315: PUSH
65316: LD_INT 0
65318: ST_TO_ADDR
// sExp := false ;
65319: LD_ADDR_EXP 61
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// sDepot := false ;
65327: LD_ADDR_EXP 62
65331: PUSH
65332: LD_INT 0
65334: ST_TO_ADDR
// sFlag := false ;
65335: LD_ADDR_EXP 63
65339: PUSH
65340: LD_INT 0
65342: ST_TO_ADDR
// sKamikadze := false ;
65343: LD_ADDR_EXP 71
65347: PUSH
65348: LD_INT 0
65350: ST_TO_ADDR
// sTroll := false ;
65351: LD_ADDR_EXP 72
65355: PUSH
65356: LD_INT 0
65358: ST_TO_ADDR
// sSlow := false ;
65359: LD_ADDR_EXP 73
65363: PUSH
65364: LD_INT 0
65366: ST_TO_ADDR
// sLack := false ;
65367: LD_ADDR_EXP 74
65371: PUSH
65372: LD_INT 0
65374: ST_TO_ADDR
// sTank := false ;
65375: LD_ADDR_EXP 76
65379: PUSH
65380: LD_INT 0
65382: ST_TO_ADDR
// sRemote := false ;
65383: LD_ADDR_EXP 77
65387: PUSH
65388: LD_INT 0
65390: ST_TO_ADDR
// sPowell := false ;
65391: LD_ADDR_EXP 78
65395: PUSH
65396: LD_INT 0
65398: ST_TO_ADDR
// sTeleport := false ;
65399: LD_ADDR_EXP 81
65403: PUSH
65404: LD_INT 0
65406: ST_TO_ADDR
// sOilTower := false ;
65407: LD_ADDR_EXP 83
65411: PUSH
65412: LD_INT 0
65414: ST_TO_ADDR
// sShovel := false ;
65415: LD_ADDR_EXP 84
65419: PUSH
65420: LD_INT 0
65422: ST_TO_ADDR
// sSheik := false ;
65423: LD_ADDR_EXP 85
65427: PUSH
65428: LD_INT 0
65430: ST_TO_ADDR
// sEarthquake := false ;
65431: LD_ADDR_EXP 87
65435: PUSH
65436: LD_INT 0
65438: ST_TO_ADDR
// sAI := false ;
65439: LD_ADDR_EXP 88
65443: PUSH
65444: LD_INT 0
65446: ST_TO_ADDR
// sCargo := false ;
65447: LD_ADDR_EXP 91
65451: PUSH
65452: LD_INT 0
65454: ST_TO_ADDR
// sDLaser := false ;
65455: LD_ADDR_EXP 92
65459: PUSH
65460: LD_INT 0
65462: ST_TO_ADDR
// sExchange := false ;
65463: LD_ADDR_EXP 93
65467: PUSH
65468: LD_INT 0
65470: ST_TO_ADDR
// sFac := false ;
65471: LD_ADDR_EXP 94
65475: PUSH
65476: LD_INT 0
65478: ST_TO_ADDR
// sPower := false ;
65479: LD_ADDR_EXP 95
65483: PUSH
65484: LD_INT 0
65486: ST_TO_ADDR
// sRandom := false ;
65487: LD_ADDR_EXP 96
65491: PUSH
65492: LD_INT 0
65494: ST_TO_ADDR
// sShield := false ;
65495: LD_ADDR_EXP 97
65499: PUSH
65500: LD_INT 0
65502: ST_TO_ADDR
// sTime := false ;
65503: LD_ADDR_EXP 98
65507: PUSH
65508: LD_INT 0
65510: ST_TO_ADDR
// sTools := false ;
65511: LD_ADDR_EXP 99
65515: PUSH
65516: LD_INT 0
65518: ST_TO_ADDR
// sSold := false ;
65519: LD_ADDR_EXP 64
65523: PUSH
65524: LD_INT 0
65526: ST_TO_ADDR
// sDiff := false ;
65527: LD_ADDR_EXP 65
65531: PUSH
65532: LD_INT 0
65534: ST_TO_ADDR
// sFog := false ;
65535: LD_ADDR_EXP 68
65539: PUSH
65540: LD_INT 0
65542: ST_TO_ADDR
// sReset := false ;
65543: LD_ADDR_EXP 69
65547: PUSH
65548: LD_INT 0
65550: ST_TO_ADDR
// sSun := false ;
65551: LD_ADDR_EXP 70
65555: PUSH
65556: LD_INT 0
65558: ST_TO_ADDR
// sTiger := false ;
65559: LD_ADDR_EXP 66
65563: PUSH
65564: LD_INT 0
65566: ST_TO_ADDR
// sBomb := false ;
65567: LD_ADDR_EXP 67
65571: PUSH
65572: LD_INT 0
65574: ST_TO_ADDR
// sWound := false ;
65575: LD_ADDR_EXP 75
65579: PUSH
65580: LD_INT 0
65582: ST_TO_ADDR
// sBetray := false ;
65583: LD_ADDR_EXP 79
65587: PUSH
65588: LD_INT 0
65590: ST_TO_ADDR
// sContamin := false ;
65591: LD_ADDR_EXP 80
65595: PUSH
65596: LD_INT 0
65598: ST_TO_ADDR
// sOil := false ;
65599: LD_ADDR_EXP 82
65603: PUSH
65604: LD_INT 0
65606: ST_TO_ADDR
// sStu := false ;
65607: LD_ADDR_EXP 86
65611: PUSH
65612: LD_INT 0
65614: ST_TO_ADDR
// sBazooka := false ;
65615: LD_ADDR_EXP 89
65619: PUSH
65620: LD_INT 0
65622: ST_TO_ADDR
// sMortar := false ;
65623: LD_ADDR_EXP 90
65627: PUSH
65628: LD_INT 0
65630: ST_TO_ADDR
// sRanger := false ;
65631: LD_ADDR_EXP 100
65635: PUSH
65636: LD_INT 0
65638: ST_TO_ADDR
// sComputer := false ;
65639: LD_ADDR_EXP 101
65643: PUSH
65644: LD_INT 0
65646: ST_TO_ADDR
// s30 := false ;
65647: LD_ADDR_EXP 102
65651: PUSH
65652: LD_INT 0
65654: ST_TO_ADDR
// s60 := false ;
65655: LD_ADDR_EXP 103
65659: PUSH
65660: LD_INT 0
65662: ST_TO_ADDR
// end ;
65663: LD_VAR 0 1
65667: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
65668: LD_INT 0
65670: PPUSH
65671: PPUSH
65672: PPUSH
65673: PPUSH
65674: PPUSH
65675: PPUSH
65676: PPUSH
// result := [ ] ;
65677: LD_ADDR_VAR 0 2
65681: PUSH
65682: EMPTY
65683: ST_TO_ADDR
// if campaign_id = 1 then
65684: LD_OWVAR 69
65688: PUSH
65689: LD_INT 1
65691: EQUAL
65692: IFFALSE 68858
// begin case mission_number of 1 :
65694: LD_OWVAR 70
65698: PUSH
65699: LD_INT 1
65701: DOUBLE
65702: EQUAL
65703: IFTRUE 65707
65705: GO 65783
65707: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
65708: LD_ADDR_VAR 0 2
65712: PUSH
65713: LD_INT 2
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: LD_INT 11
65721: PUSH
65722: LD_INT 12
65724: PUSH
65725: LD_INT 15
65727: PUSH
65728: LD_INT 16
65730: PUSH
65731: LD_INT 22
65733: PUSH
65734: LD_INT 23
65736: PUSH
65737: LD_INT 26
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 101
65753: PUSH
65754: LD_INT 102
65756: PUSH
65757: LD_INT 106
65759: PUSH
65760: LD_INT 116
65762: PUSH
65763: LD_INT 117
65765: PUSH
65766: LD_INT 118
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: ST_TO_ADDR
65781: GO 68856
65783: LD_INT 2
65785: DOUBLE
65786: EQUAL
65787: IFTRUE 65791
65789: GO 65875
65791: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
65792: LD_ADDR_VAR 0 2
65796: PUSH
65797: LD_INT 2
65799: PUSH
65800: LD_INT 4
65802: PUSH
65803: LD_INT 11
65805: PUSH
65806: LD_INT 12
65808: PUSH
65809: LD_INT 15
65811: PUSH
65812: LD_INT 16
65814: PUSH
65815: LD_INT 22
65817: PUSH
65818: LD_INT 23
65820: PUSH
65821: LD_INT 26
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 101
65837: PUSH
65838: LD_INT 102
65840: PUSH
65841: LD_INT 105
65843: PUSH
65844: LD_INT 106
65846: PUSH
65847: LD_INT 108
65849: PUSH
65850: LD_INT 116
65852: PUSH
65853: LD_INT 117
65855: PUSH
65856: LD_INT 118
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: ST_TO_ADDR
65873: GO 68856
65875: LD_INT 3
65877: DOUBLE
65878: EQUAL
65879: IFTRUE 65883
65881: GO 65971
65883: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
65884: LD_ADDR_VAR 0 2
65888: PUSH
65889: LD_INT 2
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: LD_INT 5
65897: PUSH
65898: LD_INT 11
65900: PUSH
65901: LD_INT 12
65903: PUSH
65904: LD_INT 15
65906: PUSH
65907: LD_INT 16
65909: PUSH
65910: LD_INT 22
65912: PUSH
65913: LD_INT 26
65915: PUSH
65916: LD_INT 36
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 101
65933: PUSH
65934: LD_INT 102
65936: PUSH
65937: LD_INT 105
65939: PUSH
65940: LD_INT 106
65942: PUSH
65943: LD_INT 108
65945: PUSH
65946: LD_INT 116
65948: PUSH
65949: LD_INT 117
65951: PUSH
65952: LD_INT 118
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: ST_TO_ADDR
65969: GO 68856
65971: LD_INT 4
65973: DOUBLE
65974: EQUAL
65975: IFTRUE 65979
65977: GO 66075
65979: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
65980: LD_ADDR_VAR 0 2
65984: PUSH
65985: LD_INT 2
65987: PUSH
65988: LD_INT 4
65990: PUSH
65991: LD_INT 5
65993: PUSH
65994: LD_INT 8
65996: PUSH
65997: LD_INT 11
65999: PUSH
66000: LD_INT 12
66002: PUSH
66003: LD_INT 15
66005: PUSH
66006: LD_INT 16
66008: PUSH
66009: LD_INT 22
66011: PUSH
66012: LD_INT 23
66014: PUSH
66015: LD_INT 26
66017: PUSH
66018: LD_INT 36
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 101
66037: PUSH
66038: LD_INT 102
66040: PUSH
66041: LD_INT 105
66043: PUSH
66044: LD_INT 106
66046: PUSH
66047: LD_INT 108
66049: PUSH
66050: LD_INT 116
66052: PUSH
66053: LD_INT 117
66055: PUSH
66056: LD_INT 118
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: ST_TO_ADDR
66073: GO 68856
66075: LD_INT 5
66077: DOUBLE
66078: EQUAL
66079: IFTRUE 66083
66081: GO 66195
66083: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
66084: LD_ADDR_VAR 0 2
66088: PUSH
66089: LD_INT 2
66091: PUSH
66092: LD_INT 4
66094: PUSH
66095: LD_INT 5
66097: PUSH
66098: LD_INT 6
66100: PUSH
66101: LD_INT 8
66103: PUSH
66104: LD_INT 11
66106: PUSH
66107: LD_INT 12
66109: PUSH
66110: LD_INT 15
66112: PUSH
66113: LD_INT 16
66115: PUSH
66116: LD_INT 22
66118: PUSH
66119: LD_INT 23
66121: PUSH
66122: LD_INT 25
66124: PUSH
66125: LD_INT 26
66127: PUSH
66128: LD_INT 36
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 101
66149: PUSH
66150: LD_INT 102
66152: PUSH
66153: LD_INT 105
66155: PUSH
66156: LD_INT 106
66158: PUSH
66159: LD_INT 108
66161: PUSH
66162: LD_INT 109
66164: PUSH
66165: LD_INT 112
66167: PUSH
66168: LD_INT 116
66170: PUSH
66171: LD_INT 117
66173: PUSH
66174: LD_INT 118
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: ST_TO_ADDR
66193: GO 68856
66195: LD_INT 6
66197: DOUBLE
66198: EQUAL
66199: IFTRUE 66203
66201: GO 66335
66203: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66204: LD_ADDR_VAR 0 2
66208: PUSH
66209: LD_INT 2
66211: PUSH
66212: LD_INT 4
66214: PUSH
66215: LD_INT 5
66217: PUSH
66218: LD_INT 6
66220: PUSH
66221: LD_INT 8
66223: PUSH
66224: LD_INT 11
66226: PUSH
66227: LD_INT 12
66229: PUSH
66230: LD_INT 15
66232: PUSH
66233: LD_INT 16
66235: PUSH
66236: LD_INT 20
66238: PUSH
66239: LD_INT 21
66241: PUSH
66242: LD_INT 22
66244: PUSH
66245: LD_INT 23
66247: PUSH
66248: LD_INT 25
66250: PUSH
66251: LD_INT 26
66253: PUSH
66254: LD_INT 30
66256: PUSH
66257: LD_INT 31
66259: PUSH
66260: LD_INT 32
66262: PUSH
66263: LD_INT 36
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 101
66289: PUSH
66290: LD_INT 102
66292: PUSH
66293: LD_INT 105
66295: PUSH
66296: LD_INT 106
66298: PUSH
66299: LD_INT 108
66301: PUSH
66302: LD_INT 109
66304: PUSH
66305: LD_INT 112
66307: PUSH
66308: LD_INT 116
66310: PUSH
66311: LD_INT 117
66313: PUSH
66314: LD_INT 118
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: ST_TO_ADDR
66333: GO 68856
66335: LD_INT 7
66337: DOUBLE
66338: EQUAL
66339: IFTRUE 66343
66341: GO 66455
66343: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66344: LD_ADDR_VAR 0 2
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: LD_INT 4
66354: PUSH
66355: LD_INT 5
66357: PUSH
66358: LD_INT 7
66360: PUSH
66361: LD_INT 11
66363: PUSH
66364: LD_INT 12
66366: PUSH
66367: LD_INT 15
66369: PUSH
66370: LD_INT 16
66372: PUSH
66373: LD_INT 20
66375: PUSH
66376: LD_INT 21
66378: PUSH
66379: LD_INT 22
66381: PUSH
66382: LD_INT 23
66384: PUSH
66385: LD_INT 25
66387: PUSH
66388: LD_INT 26
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 101
66409: PUSH
66410: LD_INT 102
66412: PUSH
66413: LD_INT 103
66415: PUSH
66416: LD_INT 105
66418: PUSH
66419: LD_INT 106
66421: PUSH
66422: LD_INT 108
66424: PUSH
66425: LD_INT 112
66427: PUSH
66428: LD_INT 116
66430: PUSH
66431: LD_INT 117
66433: PUSH
66434: LD_INT 118
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: ST_TO_ADDR
66453: GO 68856
66455: LD_INT 8
66457: DOUBLE
66458: EQUAL
66459: IFTRUE 66463
66461: GO 66603
66463: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66464: LD_ADDR_VAR 0 2
66468: PUSH
66469: LD_INT 2
66471: PUSH
66472: LD_INT 4
66474: PUSH
66475: LD_INT 5
66477: PUSH
66478: LD_INT 6
66480: PUSH
66481: LD_INT 7
66483: PUSH
66484: LD_INT 8
66486: PUSH
66487: LD_INT 11
66489: PUSH
66490: LD_INT 12
66492: PUSH
66493: LD_INT 15
66495: PUSH
66496: LD_INT 16
66498: PUSH
66499: LD_INT 20
66501: PUSH
66502: LD_INT 21
66504: PUSH
66505: LD_INT 22
66507: PUSH
66508: LD_INT 23
66510: PUSH
66511: LD_INT 25
66513: PUSH
66514: LD_INT 26
66516: PUSH
66517: LD_INT 30
66519: PUSH
66520: LD_INT 31
66522: PUSH
66523: LD_INT 32
66525: PUSH
66526: LD_INT 36
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: LIST
66539: LIST
66540: LIST
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 101
66553: PUSH
66554: LD_INT 102
66556: PUSH
66557: LD_INT 103
66559: PUSH
66560: LD_INT 105
66562: PUSH
66563: LD_INT 106
66565: PUSH
66566: LD_INT 108
66568: PUSH
66569: LD_INT 109
66571: PUSH
66572: LD_INT 112
66574: PUSH
66575: LD_INT 116
66577: PUSH
66578: LD_INT 117
66580: PUSH
66581: LD_INT 118
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: ST_TO_ADDR
66601: GO 68856
66603: LD_INT 9
66605: DOUBLE
66606: EQUAL
66607: IFTRUE 66611
66609: GO 66759
66611: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
66612: LD_ADDR_VAR 0 2
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: LD_INT 4
66622: PUSH
66623: LD_INT 5
66625: PUSH
66626: LD_INT 6
66628: PUSH
66629: LD_INT 7
66631: PUSH
66632: LD_INT 8
66634: PUSH
66635: LD_INT 11
66637: PUSH
66638: LD_INT 12
66640: PUSH
66641: LD_INT 15
66643: PUSH
66644: LD_INT 16
66646: PUSH
66647: LD_INT 20
66649: PUSH
66650: LD_INT 21
66652: PUSH
66653: LD_INT 22
66655: PUSH
66656: LD_INT 23
66658: PUSH
66659: LD_INT 25
66661: PUSH
66662: LD_INT 26
66664: PUSH
66665: LD_INT 28
66667: PUSH
66668: LD_INT 30
66670: PUSH
66671: LD_INT 31
66673: PUSH
66674: LD_INT 32
66676: PUSH
66677: LD_INT 36
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 101
66705: PUSH
66706: LD_INT 102
66708: PUSH
66709: LD_INT 103
66711: PUSH
66712: LD_INT 105
66714: PUSH
66715: LD_INT 106
66717: PUSH
66718: LD_INT 108
66720: PUSH
66721: LD_INT 109
66723: PUSH
66724: LD_INT 112
66726: PUSH
66727: LD_INT 114
66729: PUSH
66730: LD_INT 116
66732: PUSH
66733: LD_INT 117
66735: PUSH
66736: LD_INT 118
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: ST_TO_ADDR
66757: GO 68856
66759: LD_INT 10
66761: DOUBLE
66762: EQUAL
66763: IFTRUE 66767
66765: GO 66963
66767: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
66768: LD_ADDR_VAR 0 2
66772: PUSH
66773: LD_INT 2
66775: PUSH
66776: LD_INT 4
66778: PUSH
66779: LD_INT 5
66781: PUSH
66782: LD_INT 6
66784: PUSH
66785: LD_INT 7
66787: PUSH
66788: LD_INT 8
66790: PUSH
66791: LD_INT 9
66793: PUSH
66794: LD_INT 10
66796: PUSH
66797: LD_INT 11
66799: PUSH
66800: LD_INT 12
66802: PUSH
66803: LD_INT 13
66805: PUSH
66806: LD_INT 14
66808: PUSH
66809: LD_INT 15
66811: PUSH
66812: LD_INT 16
66814: PUSH
66815: LD_INT 17
66817: PUSH
66818: LD_INT 18
66820: PUSH
66821: LD_INT 19
66823: PUSH
66824: LD_INT 20
66826: PUSH
66827: LD_INT 21
66829: PUSH
66830: LD_INT 22
66832: PUSH
66833: LD_INT 23
66835: PUSH
66836: LD_INT 24
66838: PUSH
66839: LD_INT 25
66841: PUSH
66842: LD_INT 26
66844: PUSH
66845: LD_INT 28
66847: PUSH
66848: LD_INT 30
66850: PUSH
66851: LD_INT 31
66853: PUSH
66854: LD_INT 32
66856: PUSH
66857: LD_INT 36
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 101
66893: PUSH
66894: LD_INT 102
66896: PUSH
66897: LD_INT 103
66899: PUSH
66900: LD_INT 104
66902: PUSH
66903: LD_INT 105
66905: PUSH
66906: LD_INT 106
66908: PUSH
66909: LD_INT 107
66911: PUSH
66912: LD_INT 108
66914: PUSH
66915: LD_INT 109
66917: PUSH
66918: LD_INT 110
66920: PUSH
66921: LD_INT 111
66923: PUSH
66924: LD_INT 112
66926: PUSH
66927: LD_INT 114
66929: PUSH
66930: LD_INT 116
66932: PUSH
66933: LD_INT 117
66935: PUSH
66936: LD_INT 118
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: ST_TO_ADDR
66961: GO 68856
66963: LD_INT 11
66965: DOUBLE
66966: EQUAL
66967: IFTRUE 66971
66969: GO 67175
66971: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
66972: LD_ADDR_VAR 0 2
66976: PUSH
66977: LD_INT 2
66979: PUSH
66980: LD_INT 3
66982: PUSH
66983: LD_INT 4
66985: PUSH
66986: LD_INT 5
66988: PUSH
66989: LD_INT 6
66991: PUSH
66992: LD_INT 7
66994: PUSH
66995: LD_INT 8
66997: PUSH
66998: LD_INT 9
67000: PUSH
67001: LD_INT 10
67003: PUSH
67004: LD_INT 11
67006: PUSH
67007: LD_INT 12
67009: PUSH
67010: LD_INT 13
67012: PUSH
67013: LD_INT 14
67015: PUSH
67016: LD_INT 15
67018: PUSH
67019: LD_INT 16
67021: PUSH
67022: LD_INT 17
67024: PUSH
67025: LD_INT 18
67027: PUSH
67028: LD_INT 19
67030: PUSH
67031: LD_INT 20
67033: PUSH
67034: LD_INT 21
67036: PUSH
67037: LD_INT 22
67039: PUSH
67040: LD_INT 23
67042: PUSH
67043: LD_INT 24
67045: PUSH
67046: LD_INT 25
67048: PUSH
67049: LD_INT 26
67051: PUSH
67052: LD_INT 28
67054: PUSH
67055: LD_INT 30
67057: PUSH
67058: LD_INT 31
67060: PUSH
67061: LD_INT 32
67063: PUSH
67064: LD_INT 34
67066: PUSH
67067: LD_INT 36
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 101
67105: PUSH
67106: LD_INT 102
67108: PUSH
67109: LD_INT 103
67111: PUSH
67112: LD_INT 104
67114: PUSH
67115: LD_INT 105
67117: PUSH
67118: LD_INT 106
67120: PUSH
67121: LD_INT 107
67123: PUSH
67124: LD_INT 108
67126: PUSH
67127: LD_INT 109
67129: PUSH
67130: LD_INT 110
67132: PUSH
67133: LD_INT 111
67135: PUSH
67136: LD_INT 112
67138: PUSH
67139: LD_INT 114
67141: PUSH
67142: LD_INT 116
67144: PUSH
67145: LD_INT 117
67147: PUSH
67148: LD_INT 118
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: ST_TO_ADDR
67173: GO 68856
67175: LD_INT 12
67177: DOUBLE
67178: EQUAL
67179: IFTRUE 67183
67181: GO 67403
67183: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
67184: LD_ADDR_VAR 0 2
67188: PUSH
67189: LD_INT 1
67191: PUSH
67192: LD_INT 2
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: LD_INT 4
67200: PUSH
67201: LD_INT 5
67203: PUSH
67204: LD_INT 6
67206: PUSH
67207: LD_INT 7
67209: PUSH
67210: LD_INT 8
67212: PUSH
67213: LD_INT 9
67215: PUSH
67216: LD_INT 10
67218: PUSH
67219: LD_INT 11
67221: PUSH
67222: LD_INT 12
67224: PUSH
67225: LD_INT 13
67227: PUSH
67228: LD_INT 14
67230: PUSH
67231: LD_INT 15
67233: PUSH
67234: LD_INT 16
67236: PUSH
67237: LD_INT 17
67239: PUSH
67240: LD_INT 18
67242: PUSH
67243: LD_INT 19
67245: PUSH
67246: LD_INT 20
67248: PUSH
67249: LD_INT 21
67251: PUSH
67252: LD_INT 22
67254: PUSH
67255: LD_INT 23
67257: PUSH
67258: LD_INT 24
67260: PUSH
67261: LD_INT 25
67263: PUSH
67264: LD_INT 26
67266: PUSH
67267: LD_INT 27
67269: PUSH
67270: LD_INT 28
67272: PUSH
67273: LD_INT 30
67275: PUSH
67276: LD_INT 31
67278: PUSH
67279: LD_INT 32
67281: PUSH
67282: LD_INT 33
67284: PUSH
67285: LD_INT 34
67287: PUSH
67288: LD_INT 36
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 101
67329: PUSH
67330: LD_INT 102
67332: PUSH
67333: LD_INT 103
67335: PUSH
67336: LD_INT 104
67338: PUSH
67339: LD_INT 105
67341: PUSH
67342: LD_INT 106
67344: PUSH
67345: LD_INT 107
67347: PUSH
67348: LD_INT 108
67350: PUSH
67351: LD_INT 109
67353: PUSH
67354: LD_INT 110
67356: PUSH
67357: LD_INT 111
67359: PUSH
67360: LD_INT 112
67362: PUSH
67363: LD_INT 113
67365: PUSH
67366: LD_INT 114
67368: PUSH
67369: LD_INT 116
67371: PUSH
67372: LD_INT 117
67374: PUSH
67375: LD_INT 118
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: ST_TO_ADDR
67401: GO 68856
67403: LD_INT 13
67405: DOUBLE
67406: EQUAL
67407: IFTRUE 67411
67409: GO 67619
67411: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67412: LD_ADDR_VAR 0 2
67416: PUSH
67417: LD_INT 1
67419: PUSH
67420: LD_INT 2
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: LD_INT 4
67428: PUSH
67429: LD_INT 5
67431: PUSH
67432: LD_INT 8
67434: PUSH
67435: LD_INT 9
67437: PUSH
67438: LD_INT 10
67440: PUSH
67441: LD_INT 11
67443: PUSH
67444: LD_INT 12
67446: PUSH
67447: LD_INT 14
67449: PUSH
67450: LD_INT 15
67452: PUSH
67453: LD_INT 16
67455: PUSH
67456: LD_INT 17
67458: PUSH
67459: LD_INT 18
67461: PUSH
67462: LD_INT 19
67464: PUSH
67465: LD_INT 20
67467: PUSH
67468: LD_INT 21
67470: PUSH
67471: LD_INT 22
67473: PUSH
67474: LD_INT 23
67476: PUSH
67477: LD_INT 24
67479: PUSH
67480: LD_INT 25
67482: PUSH
67483: LD_INT 26
67485: PUSH
67486: LD_INT 27
67488: PUSH
67489: LD_INT 28
67491: PUSH
67492: LD_INT 30
67494: PUSH
67495: LD_INT 31
67497: PUSH
67498: LD_INT 32
67500: PUSH
67501: LD_INT 33
67503: PUSH
67504: LD_INT 34
67506: PUSH
67507: LD_INT 36
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 101
67545: PUSH
67546: LD_INT 102
67548: PUSH
67549: LD_INT 103
67551: PUSH
67552: LD_INT 104
67554: PUSH
67555: LD_INT 105
67557: PUSH
67558: LD_INT 106
67560: PUSH
67561: LD_INT 107
67563: PUSH
67564: LD_INT 108
67566: PUSH
67567: LD_INT 109
67569: PUSH
67570: LD_INT 110
67572: PUSH
67573: LD_INT 111
67575: PUSH
67576: LD_INT 112
67578: PUSH
67579: LD_INT 113
67581: PUSH
67582: LD_INT 114
67584: PUSH
67585: LD_INT 116
67587: PUSH
67588: LD_INT 117
67590: PUSH
67591: LD_INT 118
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: ST_TO_ADDR
67617: GO 68856
67619: LD_INT 14
67621: DOUBLE
67622: EQUAL
67623: IFTRUE 67627
67625: GO 67851
67627: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
67628: LD_ADDR_VAR 0 2
67632: PUSH
67633: LD_INT 1
67635: PUSH
67636: LD_INT 2
67638: PUSH
67639: LD_INT 3
67641: PUSH
67642: LD_INT 4
67644: PUSH
67645: LD_INT 5
67647: PUSH
67648: LD_INT 6
67650: PUSH
67651: LD_INT 7
67653: PUSH
67654: LD_INT 8
67656: PUSH
67657: LD_INT 9
67659: PUSH
67660: LD_INT 10
67662: PUSH
67663: LD_INT 11
67665: PUSH
67666: LD_INT 12
67668: PUSH
67669: LD_INT 13
67671: PUSH
67672: LD_INT 14
67674: PUSH
67675: LD_INT 15
67677: PUSH
67678: LD_INT 16
67680: PUSH
67681: LD_INT 17
67683: PUSH
67684: LD_INT 18
67686: PUSH
67687: LD_INT 19
67689: PUSH
67690: LD_INT 20
67692: PUSH
67693: LD_INT 21
67695: PUSH
67696: LD_INT 22
67698: PUSH
67699: LD_INT 23
67701: PUSH
67702: LD_INT 24
67704: PUSH
67705: LD_INT 25
67707: PUSH
67708: LD_INT 26
67710: PUSH
67711: LD_INT 27
67713: PUSH
67714: LD_INT 28
67716: PUSH
67717: LD_INT 29
67719: PUSH
67720: LD_INT 30
67722: PUSH
67723: LD_INT 31
67725: PUSH
67726: LD_INT 32
67728: PUSH
67729: LD_INT 33
67731: PUSH
67732: LD_INT 34
67734: PUSH
67735: LD_INT 36
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 101
67777: PUSH
67778: LD_INT 102
67780: PUSH
67781: LD_INT 103
67783: PUSH
67784: LD_INT 104
67786: PUSH
67787: LD_INT 105
67789: PUSH
67790: LD_INT 106
67792: PUSH
67793: LD_INT 107
67795: PUSH
67796: LD_INT 108
67798: PUSH
67799: LD_INT 109
67801: PUSH
67802: LD_INT 110
67804: PUSH
67805: LD_INT 111
67807: PUSH
67808: LD_INT 112
67810: PUSH
67811: LD_INT 113
67813: PUSH
67814: LD_INT 114
67816: PUSH
67817: LD_INT 116
67819: PUSH
67820: LD_INT 117
67822: PUSH
67823: LD_INT 118
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: ST_TO_ADDR
67849: GO 68856
67851: LD_INT 15
67853: DOUBLE
67854: EQUAL
67855: IFTRUE 67859
67857: GO 68083
67859: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
67860: LD_ADDR_VAR 0 2
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: LD_INT 2
67870: PUSH
67871: LD_INT 3
67873: PUSH
67874: LD_INT 4
67876: PUSH
67877: LD_INT 5
67879: PUSH
67880: LD_INT 6
67882: PUSH
67883: LD_INT 7
67885: PUSH
67886: LD_INT 8
67888: PUSH
67889: LD_INT 9
67891: PUSH
67892: LD_INT 10
67894: PUSH
67895: LD_INT 11
67897: PUSH
67898: LD_INT 12
67900: PUSH
67901: LD_INT 13
67903: PUSH
67904: LD_INT 14
67906: PUSH
67907: LD_INT 15
67909: PUSH
67910: LD_INT 16
67912: PUSH
67913: LD_INT 17
67915: PUSH
67916: LD_INT 18
67918: PUSH
67919: LD_INT 19
67921: PUSH
67922: LD_INT 20
67924: PUSH
67925: LD_INT 21
67927: PUSH
67928: LD_INT 22
67930: PUSH
67931: LD_INT 23
67933: PUSH
67934: LD_INT 24
67936: PUSH
67937: LD_INT 25
67939: PUSH
67940: LD_INT 26
67942: PUSH
67943: LD_INT 27
67945: PUSH
67946: LD_INT 28
67948: PUSH
67949: LD_INT 29
67951: PUSH
67952: LD_INT 30
67954: PUSH
67955: LD_INT 31
67957: PUSH
67958: LD_INT 32
67960: PUSH
67961: LD_INT 33
67963: PUSH
67964: LD_INT 34
67966: PUSH
67967: LD_INT 36
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 101
68009: PUSH
68010: LD_INT 102
68012: PUSH
68013: LD_INT 103
68015: PUSH
68016: LD_INT 104
68018: PUSH
68019: LD_INT 105
68021: PUSH
68022: LD_INT 106
68024: PUSH
68025: LD_INT 107
68027: PUSH
68028: LD_INT 108
68030: PUSH
68031: LD_INT 109
68033: PUSH
68034: LD_INT 110
68036: PUSH
68037: LD_INT 111
68039: PUSH
68040: LD_INT 112
68042: PUSH
68043: LD_INT 113
68045: PUSH
68046: LD_INT 114
68048: PUSH
68049: LD_INT 116
68051: PUSH
68052: LD_INT 117
68054: PUSH
68055: LD_INT 118
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: ST_TO_ADDR
68081: GO 68856
68083: LD_INT 16
68085: DOUBLE
68086: EQUAL
68087: IFTRUE 68091
68089: GO 68227
68091: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
68092: LD_ADDR_VAR 0 2
68096: PUSH
68097: LD_INT 2
68099: PUSH
68100: LD_INT 4
68102: PUSH
68103: LD_INT 5
68105: PUSH
68106: LD_INT 7
68108: PUSH
68109: LD_INT 11
68111: PUSH
68112: LD_INT 12
68114: PUSH
68115: LD_INT 15
68117: PUSH
68118: LD_INT 16
68120: PUSH
68121: LD_INT 20
68123: PUSH
68124: LD_INT 21
68126: PUSH
68127: LD_INT 22
68129: PUSH
68130: LD_INT 23
68132: PUSH
68133: LD_INT 25
68135: PUSH
68136: LD_INT 26
68138: PUSH
68139: LD_INT 30
68141: PUSH
68142: LD_INT 31
68144: PUSH
68145: LD_INT 32
68147: PUSH
68148: LD_INT 33
68150: PUSH
68151: LD_INT 34
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 101
68177: PUSH
68178: LD_INT 102
68180: PUSH
68181: LD_INT 103
68183: PUSH
68184: LD_INT 106
68186: PUSH
68187: LD_INT 108
68189: PUSH
68190: LD_INT 112
68192: PUSH
68193: LD_INT 113
68195: PUSH
68196: LD_INT 114
68198: PUSH
68199: LD_INT 116
68201: PUSH
68202: LD_INT 117
68204: PUSH
68205: LD_INT 118
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: ST_TO_ADDR
68225: GO 68856
68227: LD_INT 17
68229: DOUBLE
68230: EQUAL
68231: IFTRUE 68235
68233: GO 68459
68235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68236: LD_ADDR_VAR 0 2
68240: PUSH
68241: LD_INT 1
68243: PUSH
68244: LD_INT 2
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: LD_INT 4
68252: PUSH
68253: LD_INT 5
68255: PUSH
68256: LD_INT 6
68258: PUSH
68259: LD_INT 7
68261: PUSH
68262: LD_INT 8
68264: PUSH
68265: LD_INT 9
68267: PUSH
68268: LD_INT 10
68270: PUSH
68271: LD_INT 11
68273: PUSH
68274: LD_INT 12
68276: PUSH
68277: LD_INT 13
68279: PUSH
68280: LD_INT 14
68282: PUSH
68283: LD_INT 15
68285: PUSH
68286: LD_INT 16
68288: PUSH
68289: LD_INT 17
68291: PUSH
68292: LD_INT 18
68294: PUSH
68295: LD_INT 19
68297: PUSH
68298: LD_INT 20
68300: PUSH
68301: LD_INT 21
68303: PUSH
68304: LD_INT 22
68306: PUSH
68307: LD_INT 23
68309: PUSH
68310: LD_INT 24
68312: PUSH
68313: LD_INT 25
68315: PUSH
68316: LD_INT 26
68318: PUSH
68319: LD_INT 27
68321: PUSH
68322: LD_INT 28
68324: PUSH
68325: LD_INT 29
68327: PUSH
68328: LD_INT 30
68330: PUSH
68331: LD_INT 31
68333: PUSH
68334: LD_INT 32
68336: PUSH
68337: LD_INT 33
68339: PUSH
68340: LD_INT 34
68342: PUSH
68343: LD_INT 36
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 101
68385: PUSH
68386: LD_INT 102
68388: PUSH
68389: LD_INT 103
68391: PUSH
68392: LD_INT 104
68394: PUSH
68395: LD_INT 105
68397: PUSH
68398: LD_INT 106
68400: PUSH
68401: LD_INT 107
68403: PUSH
68404: LD_INT 108
68406: PUSH
68407: LD_INT 109
68409: PUSH
68410: LD_INT 110
68412: PUSH
68413: LD_INT 111
68415: PUSH
68416: LD_INT 112
68418: PUSH
68419: LD_INT 113
68421: PUSH
68422: LD_INT 114
68424: PUSH
68425: LD_INT 116
68427: PUSH
68428: LD_INT 117
68430: PUSH
68431: LD_INT 118
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: ST_TO_ADDR
68457: GO 68856
68459: LD_INT 18
68461: DOUBLE
68462: EQUAL
68463: IFTRUE 68467
68465: GO 68615
68467: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68468: LD_ADDR_VAR 0 2
68472: PUSH
68473: LD_INT 2
68475: PUSH
68476: LD_INT 4
68478: PUSH
68479: LD_INT 5
68481: PUSH
68482: LD_INT 7
68484: PUSH
68485: LD_INT 11
68487: PUSH
68488: LD_INT 12
68490: PUSH
68491: LD_INT 15
68493: PUSH
68494: LD_INT 16
68496: PUSH
68497: LD_INT 20
68499: PUSH
68500: LD_INT 21
68502: PUSH
68503: LD_INT 22
68505: PUSH
68506: LD_INT 23
68508: PUSH
68509: LD_INT 25
68511: PUSH
68512: LD_INT 26
68514: PUSH
68515: LD_INT 30
68517: PUSH
68518: LD_INT 31
68520: PUSH
68521: LD_INT 32
68523: PUSH
68524: LD_INT 33
68526: PUSH
68527: LD_INT 34
68529: PUSH
68530: LD_INT 35
68532: PUSH
68533: LD_INT 36
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 101
68561: PUSH
68562: LD_INT 102
68564: PUSH
68565: LD_INT 103
68567: PUSH
68568: LD_INT 106
68570: PUSH
68571: LD_INT 108
68573: PUSH
68574: LD_INT 112
68576: PUSH
68577: LD_INT 113
68579: PUSH
68580: LD_INT 114
68582: PUSH
68583: LD_INT 115
68585: PUSH
68586: LD_INT 116
68588: PUSH
68589: LD_INT 117
68591: PUSH
68592: LD_INT 118
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: LIST
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: ST_TO_ADDR
68613: GO 68856
68615: LD_INT 19
68617: DOUBLE
68618: EQUAL
68619: IFTRUE 68623
68621: GO 68855
68623: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
68624: LD_ADDR_VAR 0 2
68628: PUSH
68629: LD_INT 1
68631: PUSH
68632: LD_INT 2
68634: PUSH
68635: LD_INT 3
68637: PUSH
68638: LD_INT 4
68640: PUSH
68641: LD_INT 5
68643: PUSH
68644: LD_INT 6
68646: PUSH
68647: LD_INT 7
68649: PUSH
68650: LD_INT 8
68652: PUSH
68653: LD_INT 9
68655: PUSH
68656: LD_INT 10
68658: PUSH
68659: LD_INT 11
68661: PUSH
68662: LD_INT 12
68664: PUSH
68665: LD_INT 13
68667: PUSH
68668: LD_INT 14
68670: PUSH
68671: LD_INT 15
68673: PUSH
68674: LD_INT 16
68676: PUSH
68677: LD_INT 17
68679: PUSH
68680: LD_INT 18
68682: PUSH
68683: LD_INT 19
68685: PUSH
68686: LD_INT 20
68688: PUSH
68689: LD_INT 21
68691: PUSH
68692: LD_INT 22
68694: PUSH
68695: LD_INT 23
68697: PUSH
68698: LD_INT 24
68700: PUSH
68701: LD_INT 25
68703: PUSH
68704: LD_INT 26
68706: PUSH
68707: LD_INT 27
68709: PUSH
68710: LD_INT 28
68712: PUSH
68713: LD_INT 29
68715: PUSH
68716: LD_INT 30
68718: PUSH
68719: LD_INT 31
68721: PUSH
68722: LD_INT 32
68724: PUSH
68725: LD_INT 33
68727: PUSH
68728: LD_INT 34
68730: PUSH
68731: LD_INT 35
68733: PUSH
68734: LD_INT 36
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 101
68777: PUSH
68778: LD_INT 102
68780: PUSH
68781: LD_INT 103
68783: PUSH
68784: LD_INT 104
68786: PUSH
68787: LD_INT 105
68789: PUSH
68790: LD_INT 106
68792: PUSH
68793: LD_INT 107
68795: PUSH
68796: LD_INT 108
68798: PUSH
68799: LD_INT 109
68801: PUSH
68802: LD_INT 110
68804: PUSH
68805: LD_INT 111
68807: PUSH
68808: LD_INT 112
68810: PUSH
68811: LD_INT 113
68813: PUSH
68814: LD_INT 114
68816: PUSH
68817: LD_INT 115
68819: PUSH
68820: LD_INT 116
68822: PUSH
68823: LD_INT 117
68825: PUSH
68826: LD_INT 118
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: ST_TO_ADDR
68853: GO 68856
68855: POP
// end else
68856: GO 69087
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
68858: LD_ADDR_VAR 0 2
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: LD_INT 2
68868: PUSH
68869: LD_INT 3
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: LD_INT 5
68877: PUSH
68878: LD_INT 6
68880: PUSH
68881: LD_INT 7
68883: PUSH
68884: LD_INT 8
68886: PUSH
68887: LD_INT 9
68889: PUSH
68890: LD_INT 10
68892: PUSH
68893: LD_INT 11
68895: PUSH
68896: LD_INT 12
68898: PUSH
68899: LD_INT 13
68901: PUSH
68902: LD_INT 14
68904: PUSH
68905: LD_INT 15
68907: PUSH
68908: LD_INT 16
68910: PUSH
68911: LD_INT 17
68913: PUSH
68914: LD_INT 18
68916: PUSH
68917: LD_INT 19
68919: PUSH
68920: LD_INT 20
68922: PUSH
68923: LD_INT 21
68925: PUSH
68926: LD_INT 22
68928: PUSH
68929: LD_INT 23
68931: PUSH
68932: LD_INT 24
68934: PUSH
68935: LD_INT 25
68937: PUSH
68938: LD_INT 26
68940: PUSH
68941: LD_INT 27
68943: PUSH
68944: LD_INT 28
68946: PUSH
68947: LD_INT 29
68949: PUSH
68950: LD_INT 30
68952: PUSH
68953: LD_INT 31
68955: PUSH
68956: LD_INT 32
68958: PUSH
68959: LD_INT 33
68961: PUSH
68962: LD_INT 34
68964: PUSH
68965: LD_INT 35
68967: PUSH
68968: LD_INT 36
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 101
69011: PUSH
69012: LD_INT 102
69014: PUSH
69015: LD_INT 103
69017: PUSH
69018: LD_INT 104
69020: PUSH
69021: LD_INT 105
69023: PUSH
69024: LD_INT 106
69026: PUSH
69027: LD_INT 107
69029: PUSH
69030: LD_INT 108
69032: PUSH
69033: LD_INT 109
69035: PUSH
69036: LD_INT 110
69038: PUSH
69039: LD_INT 111
69041: PUSH
69042: LD_INT 112
69044: PUSH
69045: LD_INT 113
69047: PUSH
69048: LD_INT 114
69050: PUSH
69051: LD_INT 115
69053: PUSH
69054: LD_INT 116
69056: PUSH
69057: LD_INT 117
69059: PUSH
69060: LD_INT 118
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: LIST
69074: LIST
69075: LIST
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: ST_TO_ADDR
// if result then
69087: LD_VAR 0 2
69091: IFFALSE 69877
// begin normal :=  ;
69093: LD_ADDR_VAR 0 5
69097: PUSH
69098: LD_STRING 
69100: ST_TO_ADDR
// hardcore :=  ;
69101: LD_ADDR_VAR 0 6
69105: PUSH
69106: LD_STRING 
69108: ST_TO_ADDR
// active :=  ;
69109: LD_ADDR_VAR 0 7
69113: PUSH
69114: LD_STRING 
69116: ST_TO_ADDR
// for i = 1 to normalCounter do
69117: LD_ADDR_VAR 0 8
69121: PUSH
69122: DOUBLE
69123: LD_INT 1
69125: DEC
69126: ST_TO_ADDR
69127: LD_EXP 48
69131: PUSH
69132: FOR_TO
69133: IFFALSE 69234
// begin tmp := 0 ;
69135: LD_ADDR_VAR 0 3
69139: PUSH
69140: LD_STRING 0
69142: ST_TO_ADDR
// if result [ 1 ] then
69143: LD_VAR 0 2
69147: PUSH
69148: LD_INT 1
69150: ARRAY
69151: IFFALSE 69216
// if result [ 1 ] [ 1 ] = i then
69153: LD_VAR 0 2
69157: PUSH
69158: LD_INT 1
69160: ARRAY
69161: PUSH
69162: LD_INT 1
69164: ARRAY
69165: PUSH
69166: LD_VAR 0 8
69170: EQUAL
69171: IFFALSE 69216
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69173: LD_ADDR_VAR 0 2
69177: PUSH
69178: LD_VAR 0 2
69182: PPUSH
69183: LD_INT 1
69185: PPUSH
69186: LD_VAR 0 2
69190: PUSH
69191: LD_INT 1
69193: ARRAY
69194: PPUSH
69195: LD_INT 1
69197: PPUSH
69198: CALL_OW 3
69202: PPUSH
69203: CALL_OW 1
69207: ST_TO_ADDR
// tmp := 1 ;
69208: LD_ADDR_VAR 0 3
69212: PUSH
69213: LD_STRING 1
69215: ST_TO_ADDR
// end ; normal := normal & tmp ;
69216: LD_ADDR_VAR 0 5
69220: PUSH
69221: LD_VAR 0 5
69225: PUSH
69226: LD_VAR 0 3
69230: STR
69231: ST_TO_ADDR
// end ;
69232: GO 69132
69234: POP
69235: POP
// for i = 1 to hardcoreCounter do
69236: LD_ADDR_VAR 0 8
69240: PUSH
69241: DOUBLE
69242: LD_INT 1
69244: DEC
69245: ST_TO_ADDR
69246: LD_EXP 49
69250: PUSH
69251: FOR_TO
69252: IFFALSE 69357
// begin tmp := 0 ;
69254: LD_ADDR_VAR 0 3
69258: PUSH
69259: LD_STRING 0
69261: ST_TO_ADDR
// if result [ 2 ] then
69262: LD_VAR 0 2
69266: PUSH
69267: LD_INT 2
69269: ARRAY
69270: IFFALSE 69339
// if result [ 2 ] [ 1 ] = 100 + i then
69272: LD_VAR 0 2
69276: PUSH
69277: LD_INT 2
69279: ARRAY
69280: PUSH
69281: LD_INT 1
69283: ARRAY
69284: PUSH
69285: LD_INT 100
69287: PUSH
69288: LD_VAR 0 8
69292: PLUS
69293: EQUAL
69294: IFFALSE 69339
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69296: LD_ADDR_VAR 0 2
69300: PUSH
69301: LD_VAR 0 2
69305: PPUSH
69306: LD_INT 2
69308: PPUSH
69309: LD_VAR 0 2
69313: PUSH
69314: LD_INT 2
69316: ARRAY
69317: PPUSH
69318: LD_INT 1
69320: PPUSH
69321: CALL_OW 3
69325: PPUSH
69326: CALL_OW 1
69330: ST_TO_ADDR
// tmp := 1 ;
69331: LD_ADDR_VAR 0 3
69335: PUSH
69336: LD_STRING 1
69338: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69339: LD_ADDR_VAR 0 6
69343: PUSH
69344: LD_VAR 0 6
69348: PUSH
69349: LD_VAR 0 3
69353: STR
69354: ST_TO_ADDR
// end ;
69355: GO 69251
69357: POP
69358: POP
// if isGameLoad then
69359: LD_VAR 0 1
69363: IFFALSE 69838
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69365: LD_ADDR_VAR 0 4
69369: PUSH
69370: LD_EXP 52
69374: PUSH
69375: LD_EXP 51
69379: PUSH
69380: LD_EXP 53
69384: PUSH
69385: LD_EXP 50
69389: PUSH
69390: LD_EXP 54
69394: PUSH
69395: LD_EXP 55
69399: PUSH
69400: LD_EXP 56
69404: PUSH
69405: LD_EXP 57
69409: PUSH
69410: LD_EXP 58
69414: PUSH
69415: LD_EXP 59
69419: PUSH
69420: LD_EXP 60
69424: PUSH
69425: LD_EXP 61
69429: PUSH
69430: LD_EXP 62
69434: PUSH
69435: LD_EXP 63
69439: PUSH
69440: LD_EXP 71
69444: PUSH
69445: LD_EXP 72
69449: PUSH
69450: LD_EXP 73
69454: PUSH
69455: LD_EXP 74
69459: PUSH
69460: LD_EXP 76
69464: PUSH
69465: LD_EXP 77
69469: PUSH
69470: LD_EXP 78
69474: PUSH
69475: LD_EXP 81
69479: PUSH
69480: LD_EXP 83
69484: PUSH
69485: LD_EXP 84
69489: PUSH
69490: LD_EXP 85
69494: PUSH
69495: LD_EXP 87
69499: PUSH
69500: LD_EXP 88
69504: PUSH
69505: LD_EXP 91
69509: PUSH
69510: LD_EXP 92
69514: PUSH
69515: LD_EXP 93
69519: PUSH
69520: LD_EXP 94
69524: PUSH
69525: LD_EXP 95
69529: PUSH
69530: LD_EXP 96
69534: PUSH
69535: LD_EXP 97
69539: PUSH
69540: LD_EXP 98
69544: PUSH
69545: LD_EXP 99
69549: PUSH
69550: LD_EXP 64
69554: PUSH
69555: LD_EXP 65
69559: PUSH
69560: LD_EXP 68
69564: PUSH
69565: LD_EXP 69
69569: PUSH
69570: LD_EXP 70
69574: PUSH
69575: LD_EXP 66
69579: PUSH
69580: LD_EXP 67
69584: PUSH
69585: LD_EXP 75
69589: PUSH
69590: LD_EXP 79
69594: PUSH
69595: LD_EXP 80
69599: PUSH
69600: LD_EXP 82
69604: PUSH
69605: LD_EXP 86
69609: PUSH
69610: LD_EXP 89
69614: PUSH
69615: LD_EXP 90
69619: PUSH
69620: LD_EXP 100
69624: PUSH
69625: LD_EXP 101
69629: PUSH
69630: LD_EXP 102
69634: PUSH
69635: LD_EXP 103
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: ST_TO_ADDR
// tmp :=  ;
69696: LD_ADDR_VAR 0 3
69700: PUSH
69701: LD_STRING 
69703: ST_TO_ADDR
// for i = 1 to normalCounter do
69704: LD_ADDR_VAR 0 8
69708: PUSH
69709: DOUBLE
69710: LD_INT 1
69712: DEC
69713: ST_TO_ADDR
69714: LD_EXP 48
69718: PUSH
69719: FOR_TO
69720: IFFALSE 69756
// begin if flags [ i ] then
69722: LD_VAR 0 4
69726: PUSH
69727: LD_VAR 0 8
69731: ARRAY
69732: IFFALSE 69754
// tmp := tmp & i & ; ;
69734: LD_ADDR_VAR 0 3
69738: PUSH
69739: LD_VAR 0 3
69743: PUSH
69744: LD_VAR 0 8
69748: STR
69749: PUSH
69750: LD_STRING ;
69752: STR
69753: ST_TO_ADDR
// end ;
69754: GO 69719
69756: POP
69757: POP
// for i = 1 to hardcoreCounter do
69758: LD_ADDR_VAR 0 8
69762: PUSH
69763: DOUBLE
69764: LD_INT 1
69766: DEC
69767: ST_TO_ADDR
69768: LD_EXP 49
69772: PUSH
69773: FOR_TO
69774: IFFALSE 69820
// begin if flags [ normalCounter + i ] then
69776: LD_VAR 0 4
69780: PUSH
69781: LD_EXP 48
69785: PUSH
69786: LD_VAR 0 8
69790: PLUS
69791: ARRAY
69792: IFFALSE 69818
// tmp := tmp & ( 100 + i ) & ; ;
69794: LD_ADDR_VAR 0 3
69798: PUSH
69799: LD_VAR 0 3
69803: PUSH
69804: LD_INT 100
69806: PUSH
69807: LD_VAR 0 8
69811: PLUS
69812: STR
69813: PUSH
69814: LD_STRING ;
69816: STR
69817: ST_TO_ADDR
// end ;
69818: GO 69773
69820: POP
69821: POP
// if tmp then
69822: LD_VAR 0 3
69826: IFFALSE 69838
// active := tmp ;
69828: LD_ADDR_VAR 0 7
69832: PUSH
69833: LD_VAR 0 3
69837: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
69838: LD_STRING getStreamItemsFromMission("
69840: PUSH
69841: LD_VAR 0 5
69845: STR
69846: PUSH
69847: LD_STRING ","
69849: STR
69850: PUSH
69851: LD_VAR 0 6
69855: STR
69856: PUSH
69857: LD_STRING ","
69859: STR
69860: PUSH
69861: LD_VAR 0 7
69865: STR
69866: PUSH
69867: LD_STRING ")
69869: STR
69870: PPUSH
69871: CALL_OW 559
// end else
69875: GO 69884
// ToLua ( getStreamItemsFromMission("","","") ) ;
69877: LD_STRING getStreamItemsFromMission("","","")
69879: PPUSH
69880: CALL_OW 559
// end ;
69884: LD_VAR 0 2
69888: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
69889: LD_EXP 47
69893: PUSH
69894: LD_EXP 52
69898: AND
69899: IFFALSE 70023
69901: GO 69903
69903: DISABLE
69904: LD_INT 0
69906: PPUSH
69907: PPUSH
// begin enable ;
69908: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
69909: LD_ADDR_VAR 0 2
69913: PUSH
69914: LD_INT 22
69916: PUSH
69917: LD_OWVAR 2
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 2
69928: PUSH
69929: LD_INT 34
69931: PUSH
69932: LD_INT 7
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 34
69941: PUSH
69942: LD_INT 45
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 34
69951: PUSH
69952: LD_INT 28
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 34
69961: PUSH
69962: LD_INT 47
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PPUSH
69980: CALL_OW 69
69984: ST_TO_ADDR
// if not tmp then
69985: LD_VAR 0 2
69989: NOT
69990: IFFALSE 69994
// exit ;
69992: GO 70023
// for i in tmp do
69994: LD_ADDR_VAR 0 1
69998: PUSH
69999: LD_VAR 0 2
70003: PUSH
70004: FOR_IN
70005: IFFALSE 70021
// begin SetLives ( i , 0 ) ;
70007: LD_VAR 0 1
70011: PPUSH
70012: LD_INT 0
70014: PPUSH
70015: CALL_OW 234
// end ;
70019: GO 70004
70021: POP
70022: POP
// end ;
70023: PPOPN 2
70025: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70026: LD_EXP 47
70030: PUSH
70031: LD_EXP 53
70035: AND
70036: IFFALSE 70120
70038: GO 70040
70040: DISABLE
70041: LD_INT 0
70043: PPUSH
70044: PPUSH
// begin enable ;
70045: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70046: LD_ADDR_VAR 0 2
70050: PUSH
70051: LD_INT 22
70053: PUSH
70054: LD_OWVAR 2
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 32
70065: PUSH
70066: LD_INT 3
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PPUSH
70077: CALL_OW 69
70081: ST_TO_ADDR
// if not tmp then
70082: LD_VAR 0 2
70086: NOT
70087: IFFALSE 70091
// exit ;
70089: GO 70120
// for i in tmp do
70091: LD_ADDR_VAR 0 1
70095: PUSH
70096: LD_VAR 0 2
70100: PUSH
70101: FOR_IN
70102: IFFALSE 70118
// begin SetLives ( i , 0 ) ;
70104: LD_VAR 0 1
70108: PPUSH
70109: LD_INT 0
70111: PPUSH
70112: CALL_OW 234
// end ;
70116: GO 70101
70118: POP
70119: POP
// end ;
70120: PPOPN 2
70122: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70123: LD_EXP 47
70127: PUSH
70128: LD_EXP 50
70132: AND
70133: IFFALSE 70226
70135: GO 70137
70137: DISABLE
70138: LD_INT 0
70140: PPUSH
// begin enable ;
70141: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70142: LD_ADDR_VAR 0 1
70146: PUSH
70147: LD_INT 22
70149: PUSH
70150: LD_OWVAR 2
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 2
70161: PUSH
70162: LD_INT 25
70164: PUSH
70165: LD_INT 5
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 25
70174: PUSH
70175: LD_INT 9
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 25
70184: PUSH
70185: LD_INT 8
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PPUSH
70202: CALL_OW 69
70206: PUSH
70207: FOR_IN
70208: IFFALSE 70224
// begin SetClass ( i , 1 ) ;
70210: LD_VAR 0 1
70214: PPUSH
70215: LD_INT 1
70217: PPUSH
70218: CALL_OW 336
// end ;
70222: GO 70207
70224: POP
70225: POP
// end ;
70226: PPOPN 1
70228: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70229: LD_EXP 47
70233: PUSH
70234: LD_EXP 51
70238: AND
70239: PUSH
70240: LD_OWVAR 65
70244: PUSH
70245: LD_INT 7
70247: LESS
70248: AND
70249: IFFALSE 70263
70251: GO 70253
70253: DISABLE
// begin enable ;
70254: ENABLE
// game_speed := 7 ;
70255: LD_ADDR_OWVAR 65
70259: PUSH
70260: LD_INT 7
70262: ST_TO_ADDR
// end ;
70263: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70264: LD_EXP 47
70268: PUSH
70269: LD_EXP 54
70273: AND
70274: IFFALSE 70476
70276: GO 70278
70278: DISABLE
70279: LD_INT 0
70281: PPUSH
70282: PPUSH
70283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70284: LD_ADDR_VAR 0 3
70288: PUSH
70289: LD_INT 81
70291: PUSH
70292: LD_OWVAR 2
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 21
70303: PUSH
70304: LD_INT 1
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PPUSH
70315: CALL_OW 69
70319: ST_TO_ADDR
// if not tmp then
70320: LD_VAR 0 3
70324: NOT
70325: IFFALSE 70329
// exit ;
70327: GO 70476
// if tmp > 5 then
70329: LD_VAR 0 3
70333: PUSH
70334: LD_INT 5
70336: GREATER
70337: IFFALSE 70349
// k := 5 else
70339: LD_ADDR_VAR 0 2
70343: PUSH
70344: LD_INT 5
70346: ST_TO_ADDR
70347: GO 70359
// k := tmp ;
70349: LD_ADDR_VAR 0 2
70353: PUSH
70354: LD_VAR 0 3
70358: ST_TO_ADDR
// for i := 1 to k do
70359: LD_ADDR_VAR 0 1
70363: PUSH
70364: DOUBLE
70365: LD_INT 1
70367: DEC
70368: ST_TO_ADDR
70369: LD_VAR 0 2
70373: PUSH
70374: FOR_TO
70375: IFFALSE 70474
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70377: LD_VAR 0 3
70381: PUSH
70382: LD_VAR 0 1
70386: ARRAY
70387: PPUSH
70388: LD_VAR 0 1
70392: PUSH
70393: LD_INT 4
70395: MOD
70396: PUSH
70397: LD_INT 1
70399: PLUS
70400: PPUSH
70401: CALL_OW 259
70405: PUSH
70406: LD_INT 10
70408: LESS
70409: IFFALSE 70472
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70411: LD_VAR 0 3
70415: PUSH
70416: LD_VAR 0 1
70420: ARRAY
70421: PPUSH
70422: LD_VAR 0 1
70426: PUSH
70427: LD_INT 4
70429: MOD
70430: PUSH
70431: LD_INT 1
70433: PLUS
70434: PPUSH
70435: LD_VAR 0 3
70439: PUSH
70440: LD_VAR 0 1
70444: ARRAY
70445: PPUSH
70446: LD_VAR 0 1
70450: PUSH
70451: LD_INT 4
70453: MOD
70454: PUSH
70455: LD_INT 1
70457: PLUS
70458: PPUSH
70459: CALL_OW 259
70463: PUSH
70464: LD_INT 1
70466: PLUS
70467: PPUSH
70468: CALL_OW 237
70472: GO 70374
70474: POP
70475: POP
// end ;
70476: PPOPN 3
70478: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70479: LD_EXP 47
70483: PUSH
70484: LD_EXP 55
70488: AND
70489: IFFALSE 70509
70491: GO 70493
70493: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70494: LD_INT 4
70496: PPUSH
70497: LD_OWVAR 2
70501: PPUSH
70502: LD_INT 0
70504: PPUSH
70505: CALL_OW 324
70509: END
// every 0 0$1 trigger StreamModeActive and sShovel do
70510: LD_EXP 47
70514: PUSH
70515: LD_EXP 84
70519: AND
70520: IFFALSE 70540
70522: GO 70524
70524: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
70525: LD_INT 19
70527: PPUSH
70528: LD_OWVAR 2
70532: PPUSH
70533: LD_INT 0
70535: PPUSH
70536: CALL_OW 324
70540: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
70541: LD_EXP 47
70545: PUSH
70546: LD_EXP 56
70550: AND
70551: IFFALSE 70653
70553: GO 70555
70555: DISABLE
70556: LD_INT 0
70558: PPUSH
70559: PPUSH
// begin enable ;
70560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
70561: LD_ADDR_VAR 0 2
70565: PUSH
70566: LD_INT 22
70568: PUSH
70569: LD_OWVAR 2
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 2
70580: PUSH
70581: LD_INT 34
70583: PUSH
70584: LD_INT 11
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 34
70593: PUSH
70594: LD_INT 30
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: LIST
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PPUSH
70610: CALL_OW 69
70614: ST_TO_ADDR
// if not tmp then
70615: LD_VAR 0 2
70619: NOT
70620: IFFALSE 70624
// exit ;
70622: GO 70653
// for i in tmp do
70624: LD_ADDR_VAR 0 1
70628: PUSH
70629: LD_VAR 0 2
70633: PUSH
70634: FOR_IN
70635: IFFALSE 70651
// begin SetLives ( i , 0 ) ;
70637: LD_VAR 0 1
70641: PPUSH
70642: LD_INT 0
70644: PPUSH
70645: CALL_OW 234
// end ;
70649: GO 70634
70651: POP
70652: POP
// end ;
70653: PPOPN 2
70655: END
// every 0 0$1 trigger StreamModeActive and sBunker do
70656: LD_EXP 47
70660: PUSH
70661: LD_EXP 57
70665: AND
70666: IFFALSE 70686
70668: GO 70670
70670: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
70671: LD_INT 32
70673: PPUSH
70674: LD_OWVAR 2
70678: PPUSH
70679: LD_INT 0
70681: PPUSH
70682: CALL_OW 324
70686: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
70687: LD_EXP 47
70691: PUSH
70692: LD_EXP 58
70696: AND
70697: IFFALSE 70878
70699: GO 70701
70701: DISABLE
70702: LD_INT 0
70704: PPUSH
70705: PPUSH
70706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
70707: LD_ADDR_VAR 0 2
70711: PUSH
70712: LD_INT 22
70714: PUSH
70715: LD_OWVAR 2
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 33
70726: PUSH
70727: LD_INT 3
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PPUSH
70738: CALL_OW 69
70742: ST_TO_ADDR
// if not tmp then
70743: LD_VAR 0 2
70747: NOT
70748: IFFALSE 70752
// exit ;
70750: GO 70878
// side := 0 ;
70752: LD_ADDR_VAR 0 3
70756: PUSH
70757: LD_INT 0
70759: ST_TO_ADDR
// for i := 1 to 8 do
70760: LD_ADDR_VAR 0 1
70764: PUSH
70765: DOUBLE
70766: LD_INT 1
70768: DEC
70769: ST_TO_ADDR
70770: LD_INT 8
70772: PUSH
70773: FOR_TO
70774: IFFALSE 70822
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
70776: LD_OWVAR 2
70780: PUSH
70781: LD_VAR 0 1
70785: NONEQUAL
70786: PUSH
70787: LD_OWVAR 2
70791: PPUSH
70792: LD_VAR 0 1
70796: PPUSH
70797: CALL_OW 81
70801: PUSH
70802: LD_INT 2
70804: EQUAL
70805: AND
70806: IFFALSE 70820
// begin side := i ;
70808: LD_ADDR_VAR 0 3
70812: PUSH
70813: LD_VAR 0 1
70817: ST_TO_ADDR
// break ;
70818: GO 70822
// end ;
70820: GO 70773
70822: POP
70823: POP
// if not side then
70824: LD_VAR 0 3
70828: NOT
70829: IFFALSE 70833
// exit ;
70831: GO 70878
// for i := 1 to tmp do
70833: LD_ADDR_VAR 0 1
70837: PUSH
70838: DOUBLE
70839: LD_INT 1
70841: DEC
70842: ST_TO_ADDR
70843: LD_VAR 0 2
70847: PUSH
70848: FOR_TO
70849: IFFALSE 70876
// if Prob ( 60 ) then
70851: LD_INT 60
70853: PPUSH
70854: CALL_OW 13
70858: IFFALSE 70874
// SetSide ( i , side ) ;
70860: LD_VAR 0 1
70864: PPUSH
70865: LD_VAR 0 3
70869: PPUSH
70870: CALL_OW 235
70874: GO 70848
70876: POP
70877: POP
// end ;
70878: PPOPN 3
70880: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
70881: LD_EXP 47
70885: PUSH
70886: LD_EXP 60
70890: AND
70891: IFFALSE 71010
70893: GO 70895
70895: DISABLE
70896: LD_INT 0
70898: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
70899: LD_ADDR_VAR 0 1
70903: PUSH
70904: LD_INT 22
70906: PUSH
70907: LD_OWVAR 2
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 21
70918: PUSH
70919: LD_INT 1
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: LD_INT 23
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: LIST
70947: PPUSH
70948: CALL_OW 69
70952: PUSH
70953: FOR_IN
70954: IFFALSE 71008
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
70956: LD_VAR 0 1
70960: PPUSH
70961: CALL_OW 257
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: LD_INT 2
70971: PUSH
70972: LD_INT 3
70974: PUSH
70975: LD_INT 4
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: IN
70984: IFFALSE 71006
// SetClass ( un , rand ( 1 , 4 ) ) ;
70986: LD_VAR 0 1
70990: PPUSH
70991: LD_INT 1
70993: PPUSH
70994: LD_INT 4
70996: PPUSH
70997: CALL_OW 12
71001: PPUSH
71002: CALL_OW 336
71006: GO 70953
71008: POP
71009: POP
// end ;
71010: PPOPN 1
71012: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71013: LD_EXP 47
71017: PUSH
71018: LD_EXP 59
71022: AND
71023: IFFALSE 71102
71025: GO 71027
71027: DISABLE
71028: LD_INT 0
71030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71031: LD_ADDR_VAR 0 1
71035: PUSH
71036: LD_INT 22
71038: PUSH
71039: LD_OWVAR 2
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 21
71050: PUSH
71051: LD_INT 3
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PPUSH
71062: CALL_OW 69
71066: ST_TO_ADDR
// if not tmp then
71067: LD_VAR 0 1
71071: NOT
71072: IFFALSE 71076
// exit ;
71074: GO 71102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71076: LD_VAR 0 1
71080: PUSH
71081: LD_INT 1
71083: PPUSH
71084: LD_VAR 0 1
71088: PPUSH
71089: CALL_OW 12
71093: ARRAY
71094: PPUSH
71095: LD_INT 100
71097: PPUSH
71098: CALL_OW 234
// end ;
71102: PPOPN 1
71104: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71105: LD_EXP 47
71109: PUSH
71110: LD_EXP 61
71114: AND
71115: IFFALSE 71213
71117: GO 71119
71119: DISABLE
71120: LD_INT 0
71122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71123: LD_ADDR_VAR 0 1
71127: PUSH
71128: LD_INT 22
71130: PUSH
71131: LD_OWVAR 2
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 21
71142: PUSH
71143: LD_INT 1
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PPUSH
71154: CALL_OW 69
71158: ST_TO_ADDR
// if not tmp then
71159: LD_VAR 0 1
71163: NOT
71164: IFFALSE 71168
// exit ;
71166: GO 71213
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71168: LD_VAR 0 1
71172: PUSH
71173: LD_INT 1
71175: PPUSH
71176: LD_VAR 0 1
71180: PPUSH
71181: CALL_OW 12
71185: ARRAY
71186: PPUSH
71187: LD_INT 1
71189: PPUSH
71190: LD_INT 4
71192: PPUSH
71193: CALL_OW 12
71197: PPUSH
71198: LD_INT 3000
71200: PPUSH
71201: LD_INT 9000
71203: PPUSH
71204: CALL_OW 12
71208: PPUSH
71209: CALL_OW 492
// end ;
71213: PPOPN 1
71215: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71216: LD_EXP 47
71220: PUSH
71221: LD_EXP 62
71225: AND
71226: IFFALSE 71246
71228: GO 71230
71230: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71231: LD_INT 1
71233: PPUSH
71234: LD_OWVAR 2
71238: PPUSH
71239: LD_INT 0
71241: PPUSH
71242: CALL_OW 324
71246: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71247: LD_EXP 47
71251: PUSH
71252: LD_EXP 63
71256: AND
71257: IFFALSE 71340
71259: GO 71261
71261: DISABLE
71262: LD_INT 0
71264: PPUSH
71265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71266: LD_ADDR_VAR 0 2
71270: PUSH
71271: LD_INT 22
71273: PUSH
71274: LD_OWVAR 2
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: LD_INT 21
71285: PUSH
71286: LD_INT 3
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PPUSH
71297: CALL_OW 69
71301: ST_TO_ADDR
// if not tmp then
71302: LD_VAR 0 2
71306: NOT
71307: IFFALSE 71311
// exit ;
71309: GO 71340
// for i in tmp do
71311: LD_ADDR_VAR 0 1
71315: PUSH
71316: LD_VAR 0 2
71320: PUSH
71321: FOR_IN
71322: IFFALSE 71338
// SetBLevel ( i , 10 ) ;
71324: LD_VAR 0 1
71328: PPUSH
71329: LD_INT 10
71331: PPUSH
71332: CALL_OW 241
71336: GO 71321
71338: POP
71339: POP
// end ;
71340: PPOPN 2
71342: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71343: LD_EXP 47
71347: PUSH
71348: LD_EXP 64
71352: AND
71353: IFFALSE 71464
71355: GO 71357
71357: DISABLE
71358: LD_INT 0
71360: PPUSH
71361: PPUSH
71362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71363: LD_ADDR_VAR 0 3
71367: PUSH
71368: LD_INT 22
71370: PUSH
71371: LD_OWVAR 2
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 25
71382: PUSH
71383: LD_INT 1
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PPUSH
71394: CALL_OW 69
71398: ST_TO_ADDR
// if not tmp then
71399: LD_VAR 0 3
71403: NOT
71404: IFFALSE 71408
// exit ;
71406: GO 71464
// un := tmp [ rand ( 1 , tmp ) ] ;
71408: LD_ADDR_VAR 0 2
71412: PUSH
71413: LD_VAR 0 3
71417: PUSH
71418: LD_INT 1
71420: PPUSH
71421: LD_VAR 0 3
71425: PPUSH
71426: CALL_OW 12
71430: ARRAY
71431: ST_TO_ADDR
// if Crawls ( un ) then
71432: LD_VAR 0 2
71436: PPUSH
71437: CALL_OW 318
71441: IFFALSE 71452
// ComWalk ( un ) ;
71443: LD_VAR 0 2
71447: PPUSH
71448: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71452: LD_VAR 0 2
71456: PPUSH
71457: LD_INT 5
71459: PPUSH
71460: CALL_OW 336
// end ;
71464: PPOPN 3
71466: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71467: LD_EXP 47
71471: PUSH
71472: LD_EXP 65
71476: AND
71477: PUSH
71478: LD_OWVAR 67
71482: PUSH
71483: LD_INT 4
71485: LESS
71486: AND
71487: IFFALSE 71506
71489: GO 71491
71491: DISABLE
// begin Difficulty := Difficulty + 1 ;
71492: LD_ADDR_OWVAR 67
71496: PUSH
71497: LD_OWVAR 67
71501: PUSH
71502: LD_INT 1
71504: PLUS
71505: ST_TO_ADDR
// end ;
71506: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
71507: LD_EXP 47
71511: PUSH
71512: LD_EXP 66
71516: AND
71517: IFFALSE 71620
71519: GO 71521
71521: DISABLE
71522: LD_INT 0
71524: PPUSH
// begin for i := 1 to 5 do
71525: LD_ADDR_VAR 0 1
71529: PUSH
71530: DOUBLE
71531: LD_INT 1
71533: DEC
71534: ST_TO_ADDR
71535: LD_INT 5
71537: PUSH
71538: FOR_TO
71539: IFFALSE 71618
// begin uc_nation := nation_nature ;
71541: LD_ADDR_OWVAR 21
71545: PUSH
71546: LD_INT 0
71548: ST_TO_ADDR
// uc_side := 0 ;
71549: LD_ADDR_OWVAR 20
71553: PUSH
71554: LD_INT 0
71556: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
71557: LD_ADDR_OWVAR 29
71561: PUSH
71562: LD_INT 12
71564: PUSH
71565: LD_INT 12
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: ST_TO_ADDR
// hc_agressivity := 20 ;
71572: LD_ADDR_OWVAR 35
71576: PUSH
71577: LD_INT 20
71579: ST_TO_ADDR
// hc_class := class_tiger ;
71580: LD_ADDR_OWVAR 28
71584: PUSH
71585: LD_INT 14
71587: ST_TO_ADDR
// hc_gallery :=  ;
71588: LD_ADDR_OWVAR 33
71592: PUSH
71593: LD_STRING 
71595: ST_TO_ADDR
// hc_name :=  ;
71596: LD_ADDR_OWVAR 26
71600: PUSH
71601: LD_STRING 
71603: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
71604: CALL_OW 44
71608: PPUSH
71609: LD_INT 0
71611: PPUSH
71612: CALL_OW 51
// end ;
71616: GO 71538
71618: POP
71619: POP
// end ;
71620: PPOPN 1
71622: END
// every 0 0$1 trigger StreamModeActive and sBomb do
71623: LD_EXP 47
71627: PUSH
71628: LD_EXP 67
71632: AND
71633: IFFALSE 71642
71635: GO 71637
71637: DISABLE
// StreamSibBomb ;
71638: CALL 71643 0 0
71642: END
// export function StreamSibBomb ; var i , x , y ; begin
71643: LD_INT 0
71645: PPUSH
71646: PPUSH
71647: PPUSH
71648: PPUSH
// result := false ;
71649: LD_ADDR_VAR 0 1
71653: PUSH
71654: LD_INT 0
71656: ST_TO_ADDR
// for i := 1 to 16 do
71657: LD_ADDR_VAR 0 2
71661: PUSH
71662: DOUBLE
71663: LD_INT 1
71665: DEC
71666: ST_TO_ADDR
71667: LD_INT 16
71669: PUSH
71670: FOR_TO
71671: IFFALSE 71870
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71673: LD_ADDR_VAR 0 3
71677: PUSH
71678: LD_INT 10
71680: PUSH
71681: LD_INT 20
71683: PUSH
71684: LD_INT 30
71686: PUSH
71687: LD_INT 40
71689: PUSH
71690: LD_INT 50
71692: PUSH
71693: LD_INT 60
71695: PUSH
71696: LD_INT 70
71698: PUSH
71699: LD_INT 80
71701: PUSH
71702: LD_INT 90
71704: PUSH
71705: LD_INT 100
71707: PUSH
71708: LD_INT 110
71710: PUSH
71711: LD_INT 120
71713: PUSH
71714: LD_INT 130
71716: PUSH
71717: LD_INT 140
71719: PUSH
71720: LD_INT 150
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 1
71742: PPUSH
71743: LD_INT 15
71745: PPUSH
71746: CALL_OW 12
71750: ARRAY
71751: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
71752: LD_ADDR_VAR 0 4
71756: PUSH
71757: LD_INT 10
71759: PUSH
71760: LD_INT 20
71762: PUSH
71763: LD_INT 30
71765: PUSH
71766: LD_INT 40
71768: PUSH
71769: LD_INT 50
71771: PUSH
71772: LD_INT 60
71774: PUSH
71775: LD_INT 70
71777: PUSH
71778: LD_INT 80
71780: PUSH
71781: LD_INT 90
71783: PUSH
71784: LD_INT 100
71786: PUSH
71787: LD_INT 110
71789: PUSH
71790: LD_INT 120
71792: PUSH
71793: LD_INT 130
71795: PUSH
71796: LD_INT 140
71798: PUSH
71799: LD_INT 150
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 1
71821: PPUSH
71822: LD_INT 15
71824: PPUSH
71825: CALL_OW 12
71829: ARRAY
71830: ST_TO_ADDR
// if ValidHex ( x , y ) then
71831: LD_VAR 0 3
71835: PPUSH
71836: LD_VAR 0 4
71840: PPUSH
71841: CALL_OW 488
71845: IFFALSE 71868
// begin result := [ x , y ] ;
71847: LD_ADDR_VAR 0 1
71851: PUSH
71852: LD_VAR 0 3
71856: PUSH
71857: LD_VAR 0 4
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: ST_TO_ADDR
// break ;
71866: GO 71870
// end ; end ;
71868: GO 71670
71870: POP
71871: POP
// if result then
71872: LD_VAR 0 1
71876: IFFALSE 71936
// begin ToLua ( playSibBomb() ) ;
71878: LD_STRING playSibBomb()
71880: PPUSH
71881: CALL_OW 559
// wait ( 0 0$14 ) ;
71885: LD_INT 490
71887: PPUSH
71888: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
71892: LD_VAR 0 1
71896: PUSH
71897: LD_INT 1
71899: ARRAY
71900: PPUSH
71901: LD_VAR 0 1
71905: PUSH
71906: LD_INT 2
71908: ARRAY
71909: PPUSH
71910: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
71914: LD_VAR 0 1
71918: PUSH
71919: LD_INT 1
71921: ARRAY
71922: PPUSH
71923: LD_VAR 0 1
71927: PUSH
71928: LD_INT 2
71930: ARRAY
71931: PPUSH
71932: CALL_OW 429
// end ; end ;
71936: LD_VAR 0 1
71940: RET
// every 0 0$1 trigger StreamModeActive and sReset do
71941: LD_EXP 47
71945: PUSH
71946: LD_EXP 69
71950: AND
71951: IFFALSE 71963
71953: GO 71955
71955: DISABLE
// YouLost (  ) ;
71956: LD_STRING 
71958: PPUSH
71959: CALL_OW 104
71963: END
// every 0 0$1 trigger StreamModeActive and sFog do
71964: LD_EXP 47
71968: PUSH
71969: LD_EXP 68
71973: AND
71974: IFFALSE 71988
71976: GO 71978
71978: DISABLE
// FogOff ( your_side ) ;
71979: LD_OWVAR 2
71983: PPUSH
71984: CALL_OW 344
71988: END
// every 0 0$1 trigger StreamModeActive and sSun do
71989: LD_EXP 47
71993: PUSH
71994: LD_EXP 70
71998: AND
71999: IFFALSE 72027
72001: GO 72003
72003: DISABLE
// begin solar_recharge_percent := 0 ;
72004: LD_ADDR_OWVAR 79
72008: PUSH
72009: LD_INT 0
72011: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72012: LD_INT 10500
72014: PPUSH
72015: CALL_OW 67
// solar_recharge_percent := 100 ;
72019: LD_ADDR_OWVAR 79
72023: PUSH
72024: LD_INT 100
72026: ST_TO_ADDR
// end ;
72027: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
72028: LD_EXP 47
72032: PUSH
72033: LD_EXP 71
72037: AND
72038: IFFALSE 72277
72040: GO 72042
72042: DISABLE
72043: LD_INT 0
72045: PPUSH
72046: PPUSH
72047: PPUSH
// begin tmp := [ ] ;
72048: LD_ADDR_VAR 0 3
72052: PUSH
72053: EMPTY
72054: ST_TO_ADDR
// for i := 1 to 6 do
72055: LD_ADDR_VAR 0 1
72059: PUSH
72060: DOUBLE
72061: LD_INT 1
72063: DEC
72064: ST_TO_ADDR
72065: LD_INT 6
72067: PUSH
72068: FOR_TO
72069: IFFALSE 72174
// begin uc_nation := nation_nature ;
72071: LD_ADDR_OWVAR 21
72075: PUSH
72076: LD_INT 0
72078: ST_TO_ADDR
// uc_side := 0 ;
72079: LD_ADDR_OWVAR 20
72083: PUSH
72084: LD_INT 0
72086: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72087: LD_ADDR_OWVAR 29
72091: PUSH
72092: LD_INT 12
72094: PUSH
72095: LD_INT 12
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: ST_TO_ADDR
// hc_agressivity := 20 ;
72102: LD_ADDR_OWVAR 35
72106: PUSH
72107: LD_INT 20
72109: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72110: LD_ADDR_OWVAR 28
72114: PUSH
72115: LD_INT 17
72117: ST_TO_ADDR
// hc_gallery :=  ;
72118: LD_ADDR_OWVAR 33
72122: PUSH
72123: LD_STRING 
72125: ST_TO_ADDR
// hc_name :=  ;
72126: LD_ADDR_OWVAR 26
72130: PUSH
72131: LD_STRING 
72133: ST_TO_ADDR
// un := CreateHuman ;
72134: LD_ADDR_VAR 0 2
72138: PUSH
72139: CALL_OW 44
72143: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72144: LD_VAR 0 2
72148: PPUSH
72149: LD_INT 1
72151: PPUSH
72152: CALL_OW 51
// tmp := tmp ^ un ;
72156: LD_ADDR_VAR 0 3
72160: PUSH
72161: LD_VAR 0 3
72165: PUSH
72166: LD_VAR 0 2
72170: ADD
72171: ST_TO_ADDR
// end ;
72172: GO 72068
72174: POP
72175: POP
// repeat wait ( 0 0$1 ) ;
72176: LD_INT 35
72178: PPUSH
72179: CALL_OW 67
// for un in tmp do
72183: LD_ADDR_VAR 0 2
72187: PUSH
72188: LD_VAR 0 3
72192: PUSH
72193: FOR_IN
72194: IFFALSE 72268
// begin if IsDead ( un ) then
72196: LD_VAR 0 2
72200: PPUSH
72201: CALL_OW 301
72205: IFFALSE 72225
// begin tmp := tmp diff un ;
72207: LD_ADDR_VAR 0 3
72211: PUSH
72212: LD_VAR 0 3
72216: PUSH
72217: LD_VAR 0 2
72221: DIFF
72222: ST_TO_ADDR
// continue ;
72223: GO 72193
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72225: LD_VAR 0 2
72229: PPUSH
72230: LD_INT 3
72232: PUSH
72233: LD_INT 22
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PPUSH
72247: CALL_OW 69
72251: PPUSH
72252: LD_VAR 0 2
72256: PPUSH
72257: CALL_OW 74
72261: PPUSH
72262: CALL_OW 115
// end ;
72266: GO 72193
72268: POP
72269: POP
// until not tmp ;
72270: LD_VAR 0 3
72274: NOT
72275: IFFALSE 72176
// end ;
72277: PPOPN 3
72279: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72280: LD_EXP 47
72284: PUSH
72285: LD_EXP 72
72289: AND
72290: IFFALSE 72344
72292: GO 72294
72294: DISABLE
// begin ToLua ( displayTroll(); ) ;
72295: LD_STRING displayTroll();
72297: PPUSH
72298: CALL_OW 559
// wait ( 3 3$00 ) ;
72302: LD_INT 6300
72304: PPUSH
72305: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72309: LD_STRING hideTroll();
72311: PPUSH
72312: CALL_OW 559
// wait ( 1 1$00 ) ;
72316: LD_INT 2100
72318: PPUSH
72319: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72323: LD_STRING displayTroll();
72325: PPUSH
72326: CALL_OW 559
// wait ( 1 1$00 ) ;
72330: LD_INT 2100
72332: PPUSH
72333: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72337: LD_STRING hideTroll();
72339: PPUSH
72340: CALL_OW 559
// end ;
72344: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72345: LD_EXP 47
72349: PUSH
72350: LD_EXP 73
72354: AND
72355: IFFALSE 72418
72357: GO 72359
72359: DISABLE
72360: LD_INT 0
72362: PPUSH
// begin p := 0 ;
72363: LD_ADDR_VAR 0 1
72367: PUSH
72368: LD_INT 0
72370: ST_TO_ADDR
// repeat game_speed := 1 ;
72371: LD_ADDR_OWVAR 65
72375: PUSH
72376: LD_INT 1
72378: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72379: LD_INT 35
72381: PPUSH
72382: CALL_OW 67
// p := p + 1 ;
72386: LD_ADDR_VAR 0 1
72390: PUSH
72391: LD_VAR 0 1
72395: PUSH
72396: LD_INT 1
72398: PLUS
72399: ST_TO_ADDR
// until p >= 60 ;
72400: LD_VAR 0 1
72404: PUSH
72405: LD_INT 60
72407: GREATEREQUAL
72408: IFFALSE 72371
// game_speed := 4 ;
72410: LD_ADDR_OWVAR 65
72414: PUSH
72415: LD_INT 4
72417: ST_TO_ADDR
// end ;
72418: PPOPN 1
72420: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72421: LD_EXP 47
72425: PUSH
72426: LD_EXP 74
72430: AND
72431: IFFALSE 72577
72433: GO 72435
72435: DISABLE
72436: LD_INT 0
72438: PPUSH
72439: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72440: LD_ADDR_VAR 0 1
72444: PUSH
72445: LD_INT 22
72447: PUSH
72448: LD_OWVAR 2
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 2
72459: PUSH
72460: LD_INT 30
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 30
72472: PUSH
72473: LD_INT 1
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: LIST
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PPUSH
72489: CALL_OW 69
72493: ST_TO_ADDR
// if not depot then
72494: LD_VAR 0 1
72498: NOT
72499: IFFALSE 72503
// exit ;
72501: GO 72577
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
72503: LD_ADDR_VAR 0 2
72507: PUSH
72508: LD_VAR 0 1
72512: PUSH
72513: LD_INT 1
72515: PPUSH
72516: LD_VAR 0 1
72520: PPUSH
72521: CALL_OW 12
72525: ARRAY
72526: PPUSH
72527: CALL_OW 274
72531: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
72532: LD_VAR 0 2
72536: PPUSH
72537: LD_INT 1
72539: PPUSH
72540: LD_INT 0
72542: PPUSH
72543: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
72547: LD_VAR 0 2
72551: PPUSH
72552: LD_INT 2
72554: PPUSH
72555: LD_INT 0
72557: PPUSH
72558: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
72562: LD_VAR 0 2
72566: PPUSH
72567: LD_INT 3
72569: PPUSH
72570: LD_INT 0
72572: PPUSH
72573: CALL_OW 277
// end ;
72577: PPOPN 2
72579: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
72580: LD_EXP 47
72584: PUSH
72585: LD_EXP 75
72589: AND
72590: IFFALSE 72687
72592: GO 72594
72594: DISABLE
72595: LD_INT 0
72597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72598: LD_ADDR_VAR 0 1
72602: PUSH
72603: LD_INT 22
72605: PUSH
72606: LD_OWVAR 2
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 21
72617: PUSH
72618: LD_INT 1
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 3
72627: PUSH
72628: LD_INT 23
72630: PUSH
72631: LD_INT 0
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: LIST
72646: PPUSH
72647: CALL_OW 69
72651: ST_TO_ADDR
// if not tmp then
72652: LD_VAR 0 1
72656: NOT
72657: IFFALSE 72661
// exit ;
72659: GO 72687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
72661: LD_VAR 0 1
72665: PUSH
72666: LD_INT 1
72668: PPUSH
72669: LD_VAR 0 1
72673: PPUSH
72674: CALL_OW 12
72678: ARRAY
72679: PPUSH
72680: LD_INT 200
72682: PPUSH
72683: CALL_OW 234
// end ;
72687: PPOPN 1
72689: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
72690: LD_EXP 47
72694: PUSH
72695: LD_EXP 76
72699: AND
72700: IFFALSE 72779
72702: GO 72704
72704: DISABLE
72705: LD_INT 0
72707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
72708: LD_ADDR_VAR 0 1
72712: PUSH
72713: LD_INT 22
72715: PUSH
72716: LD_OWVAR 2
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 21
72727: PUSH
72728: LD_INT 2
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PPUSH
72739: CALL_OW 69
72743: ST_TO_ADDR
// if not tmp then
72744: LD_VAR 0 1
72748: NOT
72749: IFFALSE 72753
// exit ;
72751: GO 72779
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
72753: LD_VAR 0 1
72757: PUSH
72758: LD_INT 1
72760: PPUSH
72761: LD_VAR 0 1
72765: PPUSH
72766: CALL_OW 12
72770: ARRAY
72771: PPUSH
72772: LD_INT 60
72774: PPUSH
72775: CALL_OW 234
// end ;
72779: PPOPN 1
72781: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
72782: LD_EXP 47
72786: PUSH
72787: LD_EXP 77
72791: AND
72792: IFFALSE 72891
72794: GO 72796
72796: DISABLE
72797: LD_INT 0
72799: PPUSH
72800: PPUSH
// begin enable ;
72801: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
72802: LD_ADDR_VAR 0 1
72806: PUSH
72807: LD_INT 22
72809: PUSH
72810: LD_OWVAR 2
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 61
72821: PUSH
72822: EMPTY
72823: LIST
72824: PUSH
72825: LD_INT 33
72827: PUSH
72828: LD_INT 2
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: LIST
72839: PPUSH
72840: CALL_OW 69
72844: ST_TO_ADDR
// if not tmp then
72845: LD_VAR 0 1
72849: NOT
72850: IFFALSE 72854
// exit ;
72852: GO 72891
// for i in tmp do
72854: LD_ADDR_VAR 0 2
72858: PUSH
72859: LD_VAR 0 1
72863: PUSH
72864: FOR_IN
72865: IFFALSE 72889
// if IsControledBy ( i ) then
72867: LD_VAR 0 2
72871: PPUSH
72872: CALL_OW 312
72876: IFFALSE 72887
// ComUnlink ( i ) ;
72878: LD_VAR 0 2
72882: PPUSH
72883: CALL_OW 136
72887: GO 72864
72889: POP
72890: POP
// end ;
72891: PPOPN 2
72893: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
72894: LD_EXP 47
72898: PUSH
72899: LD_EXP 78
72903: AND
72904: IFFALSE 73044
72906: GO 72908
72908: DISABLE
72909: LD_INT 0
72911: PPUSH
72912: PPUSH
// begin ToLua ( displayPowell(); ) ;
72913: LD_STRING displayPowell();
72915: PPUSH
72916: CALL_OW 559
// uc_side := 0 ;
72920: LD_ADDR_OWVAR 20
72924: PUSH
72925: LD_INT 0
72927: ST_TO_ADDR
// uc_nation := 2 ;
72928: LD_ADDR_OWVAR 21
72932: PUSH
72933: LD_INT 2
72935: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
72936: LD_ADDR_OWVAR 37
72940: PUSH
72941: LD_INT 14
72943: ST_TO_ADDR
// vc_engine := engine_siberite ;
72944: LD_ADDR_OWVAR 39
72948: PUSH
72949: LD_INT 3
72951: ST_TO_ADDR
// vc_control := control_apeman ;
72952: LD_ADDR_OWVAR 38
72956: PUSH
72957: LD_INT 5
72959: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
72960: LD_ADDR_OWVAR 40
72964: PUSH
72965: LD_INT 29
72967: ST_TO_ADDR
// un := CreateVehicle ;
72968: LD_ADDR_VAR 0 2
72972: PUSH
72973: CALL_OW 45
72977: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
72978: LD_VAR 0 2
72982: PPUSH
72983: LD_INT 1
72985: PPUSH
72986: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
72990: LD_INT 35
72992: PPUSH
72993: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
72997: LD_VAR 0 2
73001: PPUSH
73002: LD_INT 22
73004: PUSH
73005: LD_OWVAR 2
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PPUSH
73014: CALL_OW 69
73018: PPUSH
73019: LD_VAR 0 2
73023: PPUSH
73024: CALL_OW 74
73028: PPUSH
73029: CALL_OW 115
// until IsDead ( un ) ;
73033: LD_VAR 0 2
73037: PPUSH
73038: CALL_OW 301
73042: IFFALSE 72990
// end ;
73044: PPOPN 2
73046: END
// every 0 0$1 trigger StreamModeActive and sStu do
73047: LD_EXP 47
73051: PUSH
73052: LD_EXP 86
73056: AND
73057: IFFALSE 73073
73059: GO 73061
73061: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73062: LD_STRING displayStucuk();
73064: PPUSH
73065: CALL_OW 559
// ResetFog ;
73069: CALL_OW 335
// end ;
73073: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73074: LD_EXP 47
73078: PUSH
73079: LD_EXP 79
73083: AND
73084: IFFALSE 73225
73086: GO 73088
73088: DISABLE
73089: LD_INT 0
73091: PPUSH
73092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73093: LD_ADDR_VAR 0 2
73097: PUSH
73098: LD_INT 22
73100: PUSH
73101: LD_OWVAR 2
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 21
73112: PUSH
73113: LD_INT 1
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PPUSH
73124: CALL_OW 69
73128: ST_TO_ADDR
// if not tmp then
73129: LD_VAR 0 2
73133: NOT
73134: IFFALSE 73138
// exit ;
73136: GO 73225
// un := tmp [ rand ( 1 , tmp ) ] ;
73138: LD_ADDR_VAR 0 1
73142: PUSH
73143: LD_VAR 0 2
73147: PUSH
73148: LD_INT 1
73150: PPUSH
73151: LD_VAR 0 2
73155: PPUSH
73156: CALL_OW 12
73160: ARRAY
73161: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73162: LD_VAR 0 1
73166: PPUSH
73167: LD_INT 0
73169: PPUSH
73170: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73174: LD_VAR 0 1
73178: PPUSH
73179: LD_OWVAR 3
73183: PUSH
73184: LD_VAR 0 1
73188: DIFF
73189: PPUSH
73190: LD_VAR 0 1
73194: PPUSH
73195: CALL_OW 74
73199: PPUSH
73200: CALL_OW 115
// wait ( 0 0$20 ) ;
73204: LD_INT 700
73206: PPUSH
73207: CALL_OW 67
// SetSide ( un , your_side ) ;
73211: LD_VAR 0 1
73215: PPUSH
73216: LD_OWVAR 2
73220: PPUSH
73221: CALL_OW 235
// end ;
73225: PPOPN 2
73227: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73228: LD_EXP 47
73232: PUSH
73233: LD_EXP 80
73237: AND
73238: IFFALSE 73344
73240: GO 73242
73242: DISABLE
73243: LD_INT 0
73245: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73246: LD_ADDR_VAR 0 1
73250: PUSH
73251: LD_INT 22
73253: PUSH
73254: LD_OWVAR 2
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 2
73265: PUSH
73266: LD_INT 30
73268: PUSH
73269: LD_INT 0
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 30
73278: PUSH
73279: LD_INT 1
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: LIST
73290: PUSH
73291: EMPTY
73292: LIST
73293: LIST
73294: PPUSH
73295: CALL_OW 69
73299: ST_TO_ADDR
// if not depot then
73300: LD_VAR 0 1
73304: NOT
73305: IFFALSE 73309
// exit ;
73307: GO 73344
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73309: LD_VAR 0 1
73313: PUSH
73314: LD_INT 1
73316: ARRAY
73317: PPUSH
73318: CALL_OW 250
73322: PPUSH
73323: LD_VAR 0 1
73327: PUSH
73328: LD_INT 1
73330: ARRAY
73331: PPUSH
73332: CALL_OW 251
73336: PPUSH
73337: LD_INT 70
73339: PPUSH
73340: CALL_OW 495
// end ;
73344: PPOPN 1
73346: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73347: LD_EXP 47
73351: PUSH
73352: LD_EXP 81
73356: AND
73357: IFFALSE 73568
73359: GO 73361
73361: DISABLE
73362: LD_INT 0
73364: PPUSH
73365: PPUSH
73366: PPUSH
73367: PPUSH
73368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73369: LD_ADDR_VAR 0 5
73373: PUSH
73374: LD_INT 22
73376: PUSH
73377: LD_OWVAR 2
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 21
73388: PUSH
73389: LD_INT 1
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PPUSH
73400: CALL_OW 69
73404: ST_TO_ADDR
// if not tmp then
73405: LD_VAR 0 5
73409: NOT
73410: IFFALSE 73414
// exit ;
73412: GO 73568
// for i in tmp do
73414: LD_ADDR_VAR 0 1
73418: PUSH
73419: LD_VAR 0 5
73423: PUSH
73424: FOR_IN
73425: IFFALSE 73566
// begin d := rand ( 0 , 5 ) ;
73427: LD_ADDR_VAR 0 4
73431: PUSH
73432: LD_INT 0
73434: PPUSH
73435: LD_INT 5
73437: PPUSH
73438: CALL_OW 12
73442: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73443: LD_ADDR_VAR 0 2
73447: PUSH
73448: LD_VAR 0 1
73452: PPUSH
73453: CALL_OW 250
73457: PPUSH
73458: LD_VAR 0 4
73462: PPUSH
73463: LD_INT 3
73465: PPUSH
73466: LD_INT 12
73468: PPUSH
73469: CALL_OW 12
73473: PPUSH
73474: CALL_OW 272
73478: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73479: LD_ADDR_VAR 0 3
73483: PUSH
73484: LD_VAR 0 1
73488: PPUSH
73489: CALL_OW 251
73493: PPUSH
73494: LD_VAR 0 4
73498: PPUSH
73499: LD_INT 3
73501: PPUSH
73502: LD_INT 12
73504: PPUSH
73505: CALL_OW 12
73509: PPUSH
73510: CALL_OW 273
73514: ST_TO_ADDR
// if ValidHex ( x , y ) then
73515: LD_VAR 0 2
73519: PPUSH
73520: LD_VAR 0 3
73524: PPUSH
73525: CALL_OW 488
73529: IFFALSE 73564
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
73531: LD_VAR 0 1
73535: PPUSH
73536: LD_VAR 0 2
73540: PPUSH
73541: LD_VAR 0 3
73545: PPUSH
73546: LD_INT 3
73548: PPUSH
73549: LD_INT 6
73551: PPUSH
73552: CALL_OW 12
73556: PPUSH
73557: LD_INT 1
73559: PPUSH
73560: CALL_OW 483
// end ;
73564: GO 73424
73566: POP
73567: POP
// end ;
73568: PPOPN 5
73570: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
73571: LD_EXP 47
73575: PUSH
73576: LD_EXP 82
73580: AND
73581: IFFALSE 73675
73583: GO 73585
73585: DISABLE
73586: LD_INT 0
73588: PPUSH
73589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
73590: LD_ADDR_VAR 0 2
73594: PUSH
73595: LD_INT 22
73597: PUSH
73598: LD_OWVAR 2
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 32
73609: PUSH
73610: LD_INT 1
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_INT 21
73619: PUSH
73620: LD_INT 2
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: LIST
73631: PPUSH
73632: CALL_OW 69
73636: ST_TO_ADDR
// if not tmp then
73637: LD_VAR 0 2
73641: NOT
73642: IFFALSE 73646
// exit ;
73644: GO 73675
// for i in tmp do
73646: LD_ADDR_VAR 0 1
73650: PUSH
73651: LD_VAR 0 2
73655: PUSH
73656: FOR_IN
73657: IFFALSE 73673
// SetFuel ( i , 0 ) ;
73659: LD_VAR 0 1
73663: PPUSH
73664: LD_INT 0
73666: PPUSH
73667: CALL_OW 240
73671: GO 73656
73673: POP
73674: POP
// end ;
73675: PPOPN 2
73677: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
73678: LD_EXP 47
73682: PUSH
73683: LD_EXP 83
73687: AND
73688: IFFALSE 73754
73690: GO 73692
73692: DISABLE
73693: LD_INT 0
73695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
73696: LD_ADDR_VAR 0 1
73700: PUSH
73701: LD_INT 22
73703: PUSH
73704: LD_OWVAR 2
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: PUSH
73713: LD_INT 30
73715: PUSH
73716: LD_INT 29
73718: PUSH
73719: EMPTY
73720: LIST
73721: LIST
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PPUSH
73727: CALL_OW 69
73731: ST_TO_ADDR
// if not tmp then
73732: LD_VAR 0 1
73736: NOT
73737: IFFALSE 73741
// exit ;
73739: GO 73754
// DestroyUnit ( tmp [ 1 ] ) ;
73741: LD_VAR 0 1
73745: PUSH
73746: LD_INT 1
73748: ARRAY
73749: PPUSH
73750: CALL_OW 65
// end ;
73754: PPOPN 1
73756: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
73757: LD_EXP 47
73761: PUSH
73762: LD_EXP 85
73766: AND
73767: IFFALSE 73896
73769: GO 73771
73771: DISABLE
73772: LD_INT 0
73774: PPUSH
// begin uc_side := 0 ;
73775: LD_ADDR_OWVAR 20
73779: PUSH
73780: LD_INT 0
73782: ST_TO_ADDR
// uc_nation := nation_arabian ;
73783: LD_ADDR_OWVAR 21
73787: PUSH
73788: LD_INT 2
73790: ST_TO_ADDR
// hc_gallery :=  ;
73791: LD_ADDR_OWVAR 33
73795: PUSH
73796: LD_STRING 
73798: ST_TO_ADDR
// hc_name :=  ;
73799: LD_ADDR_OWVAR 26
73803: PUSH
73804: LD_STRING 
73806: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
73807: LD_INT 1
73809: PPUSH
73810: LD_INT 11
73812: PPUSH
73813: LD_INT 10
73815: PPUSH
73816: CALL_OW 380
// un := CreateHuman ;
73820: LD_ADDR_VAR 0 1
73824: PUSH
73825: CALL_OW 44
73829: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73830: LD_VAR 0 1
73834: PPUSH
73835: LD_INT 1
73837: PPUSH
73838: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73842: LD_INT 35
73844: PPUSH
73845: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73849: LD_VAR 0 1
73853: PPUSH
73854: LD_INT 22
73856: PUSH
73857: LD_OWVAR 2
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PPUSH
73866: CALL_OW 69
73870: PPUSH
73871: LD_VAR 0 1
73875: PPUSH
73876: CALL_OW 74
73880: PPUSH
73881: CALL_OW 115
// until IsDead ( un ) ;
73885: LD_VAR 0 1
73889: PPUSH
73890: CALL_OW 301
73894: IFFALSE 73842
// end ;
73896: PPOPN 1
73898: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
73899: LD_EXP 47
73903: PUSH
73904: LD_EXP 87
73908: AND
73909: IFFALSE 73921
73911: GO 73913
73913: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
73914: LD_STRING earthquake(getX(game), 0, 32)
73916: PPUSH
73917: CALL_OW 559
73921: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
73922: LD_EXP 47
73926: PUSH
73927: LD_EXP 88
73931: AND
73932: IFFALSE 74023
73934: GO 73936
73936: DISABLE
73937: LD_INT 0
73939: PPUSH
// begin enable ;
73940: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
73941: LD_ADDR_VAR 0 1
73945: PUSH
73946: LD_INT 22
73948: PUSH
73949: LD_OWVAR 2
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 21
73960: PUSH
73961: LD_INT 2
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 33
73970: PUSH
73971: LD_INT 3
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: LIST
73982: PPUSH
73983: CALL_OW 69
73987: ST_TO_ADDR
// if not tmp then
73988: LD_VAR 0 1
73992: NOT
73993: IFFALSE 73997
// exit ;
73995: GO 74023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
73997: LD_VAR 0 1
74001: PUSH
74002: LD_INT 1
74004: PPUSH
74005: LD_VAR 0 1
74009: PPUSH
74010: CALL_OW 12
74014: ARRAY
74015: PPUSH
74016: LD_INT 1
74018: PPUSH
74019: CALL_OW 234
// end ;
74023: PPOPN 1
74025: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
74026: LD_EXP 47
74030: PUSH
74031: LD_EXP 89
74035: AND
74036: IFFALSE 74177
74038: GO 74040
74040: DISABLE
74041: LD_INT 0
74043: PPUSH
74044: PPUSH
74045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74046: LD_ADDR_VAR 0 3
74050: PUSH
74051: LD_INT 22
74053: PUSH
74054: LD_OWVAR 2
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PUSH
74063: LD_INT 25
74065: PUSH
74066: LD_INT 1
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PPUSH
74077: CALL_OW 69
74081: ST_TO_ADDR
// if not tmp then
74082: LD_VAR 0 3
74086: NOT
74087: IFFALSE 74091
// exit ;
74089: GO 74177
// un := tmp [ rand ( 1 , tmp ) ] ;
74091: LD_ADDR_VAR 0 2
74095: PUSH
74096: LD_VAR 0 3
74100: PUSH
74101: LD_INT 1
74103: PPUSH
74104: LD_VAR 0 3
74108: PPUSH
74109: CALL_OW 12
74113: ARRAY
74114: ST_TO_ADDR
// if Crawls ( un ) then
74115: LD_VAR 0 2
74119: PPUSH
74120: CALL_OW 318
74124: IFFALSE 74135
// ComWalk ( un ) ;
74126: LD_VAR 0 2
74130: PPUSH
74131: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74135: LD_VAR 0 2
74139: PPUSH
74140: LD_INT 9
74142: PPUSH
74143: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74147: LD_INT 28
74149: PPUSH
74150: LD_OWVAR 2
74154: PPUSH
74155: LD_INT 2
74157: PPUSH
74158: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74162: LD_INT 29
74164: PPUSH
74165: LD_OWVAR 2
74169: PPUSH
74170: LD_INT 2
74172: PPUSH
74173: CALL_OW 322
// end ;
74177: PPOPN 3
74179: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74180: LD_EXP 47
74184: PUSH
74185: LD_EXP 90
74189: AND
74190: IFFALSE 74301
74192: GO 74194
74194: DISABLE
74195: LD_INT 0
74197: PPUSH
74198: PPUSH
74199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74200: LD_ADDR_VAR 0 3
74204: PUSH
74205: LD_INT 22
74207: PUSH
74208: LD_OWVAR 2
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 25
74219: PUSH
74220: LD_INT 1
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PPUSH
74231: CALL_OW 69
74235: ST_TO_ADDR
// if not tmp then
74236: LD_VAR 0 3
74240: NOT
74241: IFFALSE 74245
// exit ;
74243: GO 74301
// un := tmp [ rand ( 1 , tmp ) ] ;
74245: LD_ADDR_VAR 0 2
74249: PUSH
74250: LD_VAR 0 3
74254: PUSH
74255: LD_INT 1
74257: PPUSH
74258: LD_VAR 0 3
74262: PPUSH
74263: CALL_OW 12
74267: ARRAY
74268: ST_TO_ADDR
// if Crawls ( un ) then
74269: LD_VAR 0 2
74273: PPUSH
74274: CALL_OW 318
74278: IFFALSE 74289
// ComWalk ( un ) ;
74280: LD_VAR 0 2
74284: PPUSH
74285: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74289: LD_VAR 0 2
74293: PPUSH
74294: LD_INT 8
74296: PPUSH
74297: CALL_OW 336
// end ;
74301: PPOPN 3
74303: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74304: LD_EXP 47
74308: PUSH
74309: LD_EXP 91
74313: AND
74314: IFFALSE 74458
74316: GO 74318
74318: DISABLE
74319: LD_INT 0
74321: PPUSH
74322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74323: LD_ADDR_VAR 0 2
74327: PUSH
74328: LD_INT 22
74330: PUSH
74331: LD_OWVAR 2
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 21
74342: PUSH
74343: LD_INT 2
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 2
74352: PUSH
74353: LD_INT 34
74355: PUSH
74356: LD_INT 12
74358: PUSH
74359: EMPTY
74360: LIST
74361: LIST
74362: PUSH
74363: LD_INT 34
74365: PUSH
74366: LD_INT 51
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 34
74375: PUSH
74376: LD_INT 32
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: LIST
74393: PPUSH
74394: CALL_OW 69
74398: ST_TO_ADDR
// if not tmp then
74399: LD_VAR 0 2
74403: NOT
74404: IFFALSE 74408
// exit ;
74406: GO 74458
// for i in tmp do
74408: LD_ADDR_VAR 0 1
74412: PUSH
74413: LD_VAR 0 2
74417: PUSH
74418: FOR_IN
74419: IFFALSE 74456
// if GetCargo ( i , mat_artifact ) = 0 then
74421: LD_VAR 0 1
74425: PPUSH
74426: LD_INT 4
74428: PPUSH
74429: CALL_OW 289
74433: PUSH
74434: LD_INT 0
74436: EQUAL
74437: IFFALSE 74454
// SetCargo ( i , mat_siberit , 100 ) ;
74439: LD_VAR 0 1
74443: PPUSH
74444: LD_INT 3
74446: PPUSH
74447: LD_INT 100
74449: PPUSH
74450: CALL_OW 290
74454: GO 74418
74456: POP
74457: POP
// end ;
74458: PPOPN 2
74460: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74461: LD_EXP 47
74465: PUSH
74466: LD_EXP 92
74470: AND
74471: IFFALSE 74654
74473: GO 74475
74475: DISABLE
74476: LD_INT 0
74478: PPUSH
74479: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74480: LD_ADDR_VAR 0 2
74484: PUSH
74485: LD_INT 22
74487: PUSH
74488: LD_OWVAR 2
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: PPUSH
74497: CALL_OW 69
74501: ST_TO_ADDR
// if not tmp then
74502: LD_VAR 0 2
74506: NOT
74507: IFFALSE 74511
// exit ;
74509: GO 74654
// for i := 1 to 2 do
74511: LD_ADDR_VAR 0 1
74515: PUSH
74516: DOUBLE
74517: LD_INT 1
74519: DEC
74520: ST_TO_ADDR
74521: LD_INT 2
74523: PUSH
74524: FOR_TO
74525: IFFALSE 74652
// begin uc_side := your_side ;
74527: LD_ADDR_OWVAR 20
74531: PUSH
74532: LD_OWVAR 2
74536: ST_TO_ADDR
// uc_nation := nation_american ;
74537: LD_ADDR_OWVAR 21
74541: PUSH
74542: LD_INT 1
74544: ST_TO_ADDR
// vc_chassis := us_morphling ;
74545: LD_ADDR_OWVAR 37
74549: PUSH
74550: LD_INT 5
74552: ST_TO_ADDR
// vc_engine := engine_siberite ;
74553: LD_ADDR_OWVAR 39
74557: PUSH
74558: LD_INT 3
74560: ST_TO_ADDR
// vc_control := control_computer ;
74561: LD_ADDR_OWVAR 38
74565: PUSH
74566: LD_INT 3
74568: ST_TO_ADDR
// vc_weapon := us_double_laser ;
74569: LD_ADDR_OWVAR 40
74573: PUSH
74574: LD_INT 10
74576: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
74577: LD_VAR 0 2
74581: PUSH
74582: LD_INT 1
74584: ARRAY
74585: PPUSH
74586: CALL_OW 310
74590: NOT
74591: IFFALSE 74638
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
74593: CALL_OW 45
74597: PPUSH
74598: LD_VAR 0 2
74602: PUSH
74603: LD_INT 1
74605: ARRAY
74606: PPUSH
74607: CALL_OW 250
74611: PPUSH
74612: LD_VAR 0 2
74616: PUSH
74617: LD_INT 1
74619: ARRAY
74620: PPUSH
74621: CALL_OW 251
74625: PPUSH
74626: LD_INT 12
74628: PPUSH
74629: LD_INT 1
74631: PPUSH
74632: CALL_OW 50
74636: GO 74650
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
74638: CALL_OW 45
74642: PPUSH
74643: LD_INT 1
74645: PPUSH
74646: CALL_OW 51
// end ;
74650: GO 74524
74652: POP
74653: POP
// end ;
74654: PPOPN 2
74656: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
74657: LD_EXP 47
74661: PUSH
74662: LD_EXP 93
74666: AND
74667: IFFALSE 74889
74669: GO 74671
74671: DISABLE
74672: LD_INT 0
74674: PPUSH
74675: PPUSH
74676: PPUSH
74677: PPUSH
74678: PPUSH
74679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
74680: LD_ADDR_VAR 0 6
74684: PUSH
74685: LD_INT 22
74687: PUSH
74688: LD_OWVAR 2
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 21
74699: PUSH
74700: LD_INT 1
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_INT 3
74709: PUSH
74710: LD_INT 23
74712: PUSH
74713: LD_INT 0
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: LIST
74728: PPUSH
74729: CALL_OW 69
74733: ST_TO_ADDR
// if not tmp then
74734: LD_VAR 0 6
74738: NOT
74739: IFFALSE 74743
// exit ;
74741: GO 74889
// s1 := rand ( 1 , 4 ) ;
74743: LD_ADDR_VAR 0 2
74747: PUSH
74748: LD_INT 1
74750: PPUSH
74751: LD_INT 4
74753: PPUSH
74754: CALL_OW 12
74758: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
74759: LD_ADDR_VAR 0 4
74763: PUSH
74764: LD_VAR 0 6
74768: PUSH
74769: LD_INT 1
74771: ARRAY
74772: PPUSH
74773: LD_VAR 0 2
74777: PPUSH
74778: CALL_OW 259
74782: ST_TO_ADDR
// if s1 = 1 then
74783: LD_VAR 0 2
74787: PUSH
74788: LD_INT 1
74790: EQUAL
74791: IFFALSE 74811
// s2 := rand ( 2 , 4 ) else
74793: LD_ADDR_VAR 0 3
74797: PUSH
74798: LD_INT 2
74800: PPUSH
74801: LD_INT 4
74803: PPUSH
74804: CALL_OW 12
74808: ST_TO_ADDR
74809: GO 74819
// s2 := 1 ;
74811: LD_ADDR_VAR 0 3
74815: PUSH
74816: LD_INT 1
74818: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
74819: LD_ADDR_VAR 0 5
74823: PUSH
74824: LD_VAR 0 6
74828: PUSH
74829: LD_INT 1
74831: ARRAY
74832: PPUSH
74833: LD_VAR 0 3
74837: PPUSH
74838: CALL_OW 259
74842: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
74843: LD_VAR 0 6
74847: PUSH
74848: LD_INT 1
74850: ARRAY
74851: PPUSH
74852: LD_VAR 0 2
74856: PPUSH
74857: LD_VAR 0 5
74861: PPUSH
74862: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
74866: LD_VAR 0 6
74870: PUSH
74871: LD_INT 1
74873: ARRAY
74874: PPUSH
74875: LD_VAR 0 3
74879: PPUSH
74880: LD_VAR 0 4
74884: PPUSH
74885: CALL_OW 237
// end ;
74889: PPOPN 6
74891: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
74892: LD_EXP 47
74896: PUSH
74897: LD_EXP 94
74901: AND
74902: IFFALSE 74981
74904: GO 74906
74906: DISABLE
74907: LD_INT 0
74909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
74910: LD_ADDR_VAR 0 1
74914: PUSH
74915: LD_INT 22
74917: PUSH
74918: LD_OWVAR 2
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 30
74929: PUSH
74930: LD_INT 3
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: PPUSH
74941: CALL_OW 69
74945: ST_TO_ADDR
// if not tmp then
74946: LD_VAR 0 1
74950: NOT
74951: IFFALSE 74955
// exit ;
74953: GO 74981
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74955: LD_VAR 0 1
74959: PUSH
74960: LD_INT 1
74962: PPUSH
74963: LD_VAR 0 1
74967: PPUSH
74968: CALL_OW 12
74972: ARRAY
74973: PPUSH
74974: LD_INT 1
74976: PPUSH
74977: CALL_OW 234
// end ;
74981: PPOPN 1
74983: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
74984: LD_EXP 47
74988: PUSH
74989: LD_EXP 95
74993: AND
74994: IFFALSE 75106
74996: GO 74998
74998: DISABLE
74999: LD_INT 0
75001: PPUSH
75002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75003: LD_ADDR_VAR 0 2
75007: PUSH
75008: LD_INT 22
75010: PUSH
75011: LD_OWVAR 2
75015: PUSH
75016: EMPTY
75017: LIST
75018: LIST
75019: PUSH
75020: LD_INT 2
75022: PUSH
75023: LD_INT 30
75025: PUSH
75026: LD_INT 27
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: PUSH
75033: LD_INT 30
75035: PUSH
75036: LD_INT 26
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: PUSH
75043: LD_INT 30
75045: PUSH
75046: LD_INT 28
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PPUSH
75063: CALL_OW 69
75067: ST_TO_ADDR
// if not tmp then
75068: LD_VAR 0 2
75072: NOT
75073: IFFALSE 75077
// exit ;
75075: GO 75106
// for i in tmp do
75077: LD_ADDR_VAR 0 1
75081: PUSH
75082: LD_VAR 0 2
75086: PUSH
75087: FOR_IN
75088: IFFALSE 75104
// SetLives ( i , 1 ) ;
75090: LD_VAR 0 1
75094: PPUSH
75095: LD_INT 1
75097: PPUSH
75098: CALL_OW 234
75102: GO 75087
75104: POP
75105: POP
// end ;
75106: PPOPN 2
75108: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75109: LD_EXP 47
75113: PUSH
75114: LD_EXP 96
75118: AND
75119: IFFALSE 75406
75121: GO 75123
75123: DISABLE
75124: LD_INT 0
75126: PPUSH
75127: PPUSH
75128: PPUSH
// begin i := rand ( 1 , 7 ) ;
75129: LD_ADDR_VAR 0 1
75133: PUSH
75134: LD_INT 1
75136: PPUSH
75137: LD_INT 7
75139: PPUSH
75140: CALL_OW 12
75144: ST_TO_ADDR
// case i of 1 :
75145: LD_VAR 0 1
75149: PUSH
75150: LD_INT 1
75152: DOUBLE
75153: EQUAL
75154: IFTRUE 75158
75156: GO 75168
75158: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75159: LD_STRING earthquake(getX(game), 0, 32)
75161: PPUSH
75162: CALL_OW 559
75166: GO 75406
75168: LD_INT 2
75170: DOUBLE
75171: EQUAL
75172: IFTRUE 75176
75174: GO 75190
75176: POP
// begin ToLua ( displayStucuk(); ) ;
75177: LD_STRING displayStucuk();
75179: PPUSH
75180: CALL_OW 559
// ResetFog ;
75184: CALL_OW 335
// end ; 3 :
75188: GO 75406
75190: LD_INT 3
75192: DOUBLE
75193: EQUAL
75194: IFTRUE 75198
75196: GO 75302
75198: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75199: LD_ADDR_VAR 0 2
75203: PUSH
75204: LD_INT 22
75206: PUSH
75207: LD_OWVAR 2
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: LD_INT 25
75218: PUSH
75219: LD_INT 1
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PPUSH
75230: CALL_OW 69
75234: ST_TO_ADDR
// if not tmp then
75235: LD_VAR 0 2
75239: NOT
75240: IFFALSE 75244
// exit ;
75242: GO 75406
// un := tmp [ rand ( 1 , tmp ) ] ;
75244: LD_ADDR_VAR 0 3
75248: PUSH
75249: LD_VAR 0 2
75253: PUSH
75254: LD_INT 1
75256: PPUSH
75257: LD_VAR 0 2
75261: PPUSH
75262: CALL_OW 12
75266: ARRAY
75267: ST_TO_ADDR
// if Crawls ( un ) then
75268: LD_VAR 0 3
75272: PPUSH
75273: CALL_OW 318
75277: IFFALSE 75288
// ComWalk ( un ) ;
75279: LD_VAR 0 3
75283: PPUSH
75284: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75288: LD_VAR 0 3
75292: PPUSH
75293: LD_INT 8
75295: PPUSH
75296: CALL_OW 336
// end ; 4 :
75300: GO 75406
75302: LD_INT 4
75304: DOUBLE
75305: EQUAL
75306: IFTRUE 75310
75308: GO 75384
75310: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75311: LD_ADDR_VAR 0 2
75315: PUSH
75316: LD_INT 22
75318: PUSH
75319: LD_OWVAR 2
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 30
75330: PUSH
75331: LD_INT 29
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PPUSH
75342: CALL_OW 69
75346: ST_TO_ADDR
// if not tmp then
75347: LD_VAR 0 2
75351: NOT
75352: IFFALSE 75356
// exit ;
75354: GO 75406
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75356: LD_VAR 0 2
75360: PUSH
75361: LD_INT 1
75363: ARRAY
75364: PPUSH
75365: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75369: LD_VAR 0 2
75373: PUSH
75374: LD_INT 1
75376: ARRAY
75377: PPUSH
75378: CALL_OW 65
// end ; 5 .. 7 :
75382: GO 75406
75384: LD_INT 5
75386: DOUBLE
75387: GREATEREQUAL
75388: IFFALSE 75396
75390: LD_INT 7
75392: DOUBLE
75393: LESSEQUAL
75394: IFTRUE 75398
75396: GO 75405
75398: POP
// StreamSibBomb ; end ;
75399: CALL 71643 0 0
75403: GO 75406
75405: POP
// end ;
75406: PPOPN 3
75408: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75409: LD_EXP 47
75413: PUSH
75414: LD_EXP 97
75418: AND
75419: IFFALSE 75575
75421: GO 75423
75423: DISABLE
75424: LD_INT 0
75426: PPUSH
75427: PPUSH
75428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75429: LD_ADDR_VAR 0 2
75433: PUSH
75434: LD_INT 81
75436: PUSH
75437: LD_OWVAR 2
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 2
75448: PUSH
75449: LD_INT 21
75451: PUSH
75452: LD_INT 1
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: PUSH
75459: LD_INT 21
75461: PUSH
75462: LD_INT 2
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: PUSH
75469: EMPTY
75470: LIST
75471: LIST
75472: LIST
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: PPUSH
75478: CALL_OW 69
75482: ST_TO_ADDR
// if not tmp then
75483: LD_VAR 0 2
75487: NOT
75488: IFFALSE 75492
// exit ;
75490: GO 75575
// p := 0 ;
75492: LD_ADDR_VAR 0 3
75496: PUSH
75497: LD_INT 0
75499: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75500: LD_INT 35
75502: PPUSH
75503: CALL_OW 67
// p := p + 1 ;
75507: LD_ADDR_VAR 0 3
75511: PUSH
75512: LD_VAR 0 3
75516: PUSH
75517: LD_INT 1
75519: PLUS
75520: ST_TO_ADDR
// for i in tmp do
75521: LD_ADDR_VAR 0 1
75525: PUSH
75526: LD_VAR 0 2
75530: PUSH
75531: FOR_IN
75532: IFFALSE 75563
// if GetLives ( i ) < 1000 then
75534: LD_VAR 0 1
75538: PPUSH
75539: CALL_OW 256
75543: PUSH
75544: LD_INT 1000
75546: LESS
75547: IFFALSE 75561
// SetLives ( i , 1000 ) ;
75549: LD_VAR 0 1
75553: PPUSH
75554: LD_INT 1000
75556: PPUSH
75557: CALL_OW 234
75561: GO 75531
75563: POP
75564: POP
// until p > 20 ;
75565: LD_VAR 0 3
75569: PUSH
75570: LD_INT 20
75572: GREATER
75573: IFFALSE 75500
// end ;
75575: PPOPN 3
75577: END
// every 0 0$1 trigger StreamModeActive and sTime do
75578: LD_EXP 47
75582: PUSH
75583: LD_EXP 98
75587: AND
75588: IFFALSE 75623
75590: GO 75592
75592: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
75593: LD_INT 28
75595: PPUSH
75596: LD_OWVAR 2
75600: PPUSH
75601: LD_INT 2
75603: PPUSH
75604: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
75608: LD_INT 30
75610: PPUSH
75611: LD_OWVAR 2
75615: PPUSH
75616: LD_INT 2
75618: PPUSH
75619: CALL_OW 322
// end ;
75623: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
75624: LD_EXP 47
75628: PUSH
75629: LD_EXP 99
75633: AND
75634: IFFALSE 75755
75636: GO 75638
75638: DISABLE
75639: LD_INT 0
75641: PPUSH
75642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75643: LD_ADDR_VAR 0 2
75647: PUSH
75648: LD_INT 22
75650: PUSH
75651: LD_OWVAR 2
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: PUSH
75660: LD_INT 21
75662: PUSH
75663: LD_INT 1
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 3
75672: PUSH
75673: LD_INT 23
75675: PUSH
75676: LD_INT 0
75678: PUSH
75679: EMPTY
75680: LIST
75681: LIST
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: LIST
75691: PPUSH
75692: CALL_OW 69
75696: ST_TO_ADDR
// if not tmp then
75697: LD_VAR 0 2
75701: NOT
75702: IFFALSE 75706
// exit ;
75704: GO 75755
// for i in tmp do
75706: LD_ADDR_VAR 0 1
75710: PUSH
75711: LD_VAR 0 2
75715: PUSH
75716: FOR_IN
75717: IFFALSE 75753
// begin if Crawls ( i ) then
75719: LD_VAR 0 1
75723: PPUSH
75724: CALL_OW 318
75728: IFFALSE 75739
// ComWalk ( i ) ;
75730: LD_VAR 0 1
75734: PPUSH
75735: CALL_OW 138
// SetClass ( i , 2 ) ;
75739: LD_VAR 0 1
75743: PPUSH
75744: LD_INT 2
75746: PPUSH
75747: CALL_OW 336
// end ;
75751: GO 75716
75753: POP
75754: POP
// end ;
75755: PPOPN 2
75757: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
75758: LD_EXP 47
75762: PUSH
75763: LD_EXP 100
75767: AND
75768: IFFALSE 76056
75770: GO 75772
75772: DISABLE
75773: LD_INT 0
75775: PPUSH
75776: PPUSH
75777: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
75778: LD_OWVAR 2
75782: PPUSH
75783: LD_INT 9
75785: PPUSH
75786: LD_INT 1
75788: PPUSH
75789: LD_INT 1
75791: PPUSH
75792: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
75796: LD_INT 9
75798: PPUSH
75799: LD_OWVAR 2
75803: PPUSH
75804: CALL_OW 343
// uc_side := 9 ;
75808: LD_ADDR_OWVAR 20
75812: PUSH
75813: LD_INT 9
75815: ST_TO_ADDR
// uc_nation := 2 ;
75816: LD_ADDR_OWVAR 21
75820: PUSH
75821: LD_INT 2
75823: ST_TO_ADDR
// hc_name := Dark Warrior ;
75824: LD_ADDR_OWVAR 26
75828: PUSH
75829: LD_STRING Dark Warrior
75831: ST_TO_ADDR
// hc_gallery :=  ;
75832: LD_ADDR_OWVAR 33
75836: PUSH
75837: LD_STRING 
75839: ST_TO_ADDR
// hc_noskilllimit := true ;
75840: LD_ADDR_OWVAR 76
75844: PUSH
75845: LD_INT 1
75847: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
75848: LD_ADDR_OWVAR 31
75852: PUSH
75853: LD_INT 30
75855: PUSH
75856: LD_INT 30
75858: PUSH
75859: LD_INT 30
75861: PUSH
75862: LD_INT 30
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: ST_TO_ADDR
// un := CreateHuman ;
75871: LD_ADDR_VAR 0 3
75875: PUSH
75876: CALL_OW 44
75880: ST_TO_ADDR
// hc_noskilllimit := false ;
75881: LD_ADDR_OWVAR 76
75885: PUSH
75886: LD_INT 0
75888: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75889: LD_VAR 0 3
75893: PPUSH
75894: LD_INT 1
75896: PPUSH
75897: CALL_OW 51
// ToLua ( playRanger() ) ;
75901: LD_STRING playRanger()
75903: PPUSH
75904: CALL_OW 559
// p := 0 ;
75908: LD_ADDR_VAR 0 2
75912: PUSH
75913: LD_INT 0
75915: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75916: LD_INT 35
75918: PPUSH
75919: CALL_OW 67
// p := p + 1 ;
75923: LD_ADDR_VAR 0 2
75927: PUSH
75928: LD_VAR 0 2
75932: PUSH
75933: LD_INT 1
75935: PLUS
75936: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
75937: LD_VAR 0 3
75941: PPUSH
75942: CALL_OW 256
75946: PUSH
75947: LD_INT 1000
75949: LESS
75950: IFFALSE 75964
// SetLives ( un , 1000 ) ;
75952: LD_VAR 0 3
75956: PPUSH
75957: LD_INT 1000
75959: PPUSH
75960: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
75964: LD_VAR 0 3
75968: PPUSH
75969: LD_INT 81
75971: PUSH
75972: LD_OWVAR 2
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: PUSH
75981: LD_INT 91
75983: PUSH
75984: LD_VAR 0 3
75988: PUSH
75989: LD_INT 30
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: LIST
75996: PUSH
75997: EMPTY
75998: LIST
75999: LIST
76000: PPUSH
76001: CALL_OW 69
76005: PPUSH
76006: LD_VAR 0 3
76010: PPUSH
76011: CALL_OW 74
76015: PPUSH
76016: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
76020: LD_VAR 0 2
76024: PUSH
76025: LD_INT 80
76027: GREATER
76028: PUSH
76029: LD_VAR 0 3
76033: PPUSH
76034: CALL_OW 301
76038: OR
76039: IFFALSE 75916
// if un then
76041: LD_VAR 0 3
76045: IFFALSE 76056
// RemoveUnit ( un ) ;
76047: LD_VAR 0 3
76051: PPUSH
76052: CALL_OW 64
// end ;
76056: PPOPN 3
76058: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
76059: LD_EXP 101
76063: IFFALSE 76179
76065: GO 76067
76067: DISABLE
76068: LD_INT 0
76070: PPUSH
76071: PPUSH
76072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76073: LD_ADDR_VAR 0 2
76077: PUSH
76078: LD_INT 81
76080: PUSH
76081: LD_OWVAR 2
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: LD_INT 21
76092: PUSH
76093: LD_INT 1
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PPUSH
76104: CALL_OW 69
76108: ST_TO_ADDR
// ToLua ( playComputer() ) ;
76109: LD_STRING playComputer()
76111: PPUSH
76112: CALL_OW 559
// if not tmp then
76116: LD_VAR 0 2
76120: NOT
76121: IFFALSE 76125
// exit ;
76123: GO 76179
// for i in tmp do
76125: LD_ADDR_VAR 0 1
76129: PUSH
76130: LD_VAR 0 2
76134: PUSH
76135: FOR_IN
76136: IFFALSE 76177
// for j := 1 to 4 do
76138: LD_ADDR_VAR 0 3
76142: PUSH
76143: DOUBLE
76144: LD_INT 1
76146: DEC
76147: ST_TO_ADDR
76148: LD_INT 4
76150: PUSH
76151: FOR_TO
76152: IFFALSE 76173
// SetSkill ( i , j , 10 ) ;
76154: LD_VAR 0 1
76158: PPUSH
76159: LD_VAR 0 3
76163: PPUSH
76164: LD_INT 10
76166: PPUSH
76167: CALL_OW 237
76171: GO 76151
76173: POP
76174: POP
76175: GO 76135
76177: POP
76178: POP
// end ;
76179: PPOPN 3
76181: END
// every 0 0$1 trigger s30 do var i , tmp ;
76182: LD_EXP 102
76186: IFFALSE 76255
76188: GO 76190
76190: DISABLE
76191: LD_INT 0
76193: PPUSH
76194: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76195: LD_ADDR_VAR 0 2
76199: PUSH
76200: LD_INT 22
76202: PUSH
76203: LD_OWVAR 2
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: PPUSH
76212: CALL_OW 69
76216: ST_TO_ADDR
// if not tmp then
76217: LD_VAR 0 2
76221: NOT
76222: IFFALSE 76226
// exit ;
76224: GO 76255
// for i in tmp do
76226: LD_ADDR_VAR 0 1
76230: PUSH
76231: LD_VAR 0 2
76235: PUSH
76236: FOR_IN
76237: IFFALSE 76253
// SetLives ( i , 300 ) ;
76239: LD_VAR 0 1
76243: PPUSH
76244: LD_INT 300
76246: PPUSH
76247: CALL_OW 234
76251: GO 76236
76253: POP
76254: POP
// end ;
76255: PPOPN 2
76257: END
// every 0 0$1 trigger s60 do var i , tmp ;
76258: LD_EXP 103
76262: IFFALSE 76331
76264: GO 76266
76266: DISABLE
76267: LD_INT 0
76269: PPUSH
76270: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76271: LD_ADDR_VAR 0 2
76275: PUSH
76276: LD_INT 22
76278: PUSH
76279: LD_OWVAR 2
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: PPUSH
76288: CALL_OW 69
76292: ST_TO_ADDR
// if not tmp then
76293: LD_VAR 0 2
76297: NOT
76298: IFFALSE 76302
// exit ;
76300: GO 76331
// for i in tmp do
76302: LD_ADDR_VAR 0 1
76306: PUSH
76307: LD_VAR 0 2
76311: PUSH
76312: FOR_IN
76313: IFFALSE 76329
// SetLives ( i , 600 ) ;
76315: LD_VAR 0 1
76319: PPUSH
76320: LD_INT 600
76322: PPUSH
76323: CALL_OW 234
76327: GO 76312
76329: POP
76330: POP
// end ;
76331: PPOPN 2
76333: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76334: LD_INT 0
76336: PPUSH
// case cmd of 301 :
76337: LD_VAR 0 1
76341: PUSH
76342: LD_INT 301
76344: DOUBLE
76345: EQUAL
76346: IFTRUE 76350
76348: GO 76382
76350: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76351: LD_VAR 0 6
76355: PPUSH
76356: LD_VAR 0 7
76360: PPUSH
76361: LD_VAR 0 8
76365: PPUSH
76366: LD_VAR 0 4
76370: PPUSH
76371: LD_VAR 0 5
76375: PPUSH
76376: CALL 77591 0 5
76380: GO 76503
76382: LD_INT 302
76384: DOUBLE
76385: EQUAL
76386: IFTRUE 76390
76388: GO 76427
76390: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76391: LD_VAR 0 6
76395: PPUSH
76396: LD_VAR 0 7
76400: PPUSH
76401: LD_VAR 0 8
76405: PPUSH
76406: LD_VAR 0 9
76410: PPUSH
76411: LD_VAR 0 4
76415: PPUSH
76416: LD_VAR 0 5
76420: PPUSH
76421: CALL 77682 0 6
76425: GO 76503
76427: LD_INT 303
76429: DOUBLE
76430: EQUAL
76431: IFTRUE 76435
76433: GO 76472
76435: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76436: LD_VAR 0 6
76440: PPUSH
76441: LD_VAR 0 7
76445: PPUSH
76446: LD_VAR 0 8
76450: PPUSH
76451: LD_VAR 0 9
76455: PPUSH
76456: LD_VAR 0 4
76460: PPUSH
76461: LD_VAR 0 5
76465: PPUSH
76466: CALL 76508 0 6
76470: GO 76503
76472: LD_INT 304
76474: DOUBLE
76475: EQUAL
76476: IFTRUE 76480
76478: GO 76502
76480: POP
// hHackTeleport ( unit , x , y ) ; end ;
76481: LD_VAR 0 2
76485: PPUSH
76486: LD_VAR 0 4
76490: PPUSH
76491: LD_VAR 0 5
76495: PPUSH
76496: CALL 78275 0 3
76500: GO 76503
76502: POP
// end ;
76503: LD_VAR 0 12
76507: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
76508: LD_INT 0
76510: PPUSH
76511: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
76512: LD_VAR 0 1
76516: PUSH
76517: LD_INT 1
76519: LESS
76520: PUSH
76521: LD_VAR 0 1
76525: PUSH
76526: LD_INT 3
76528: GREATER
76529: OR
76530: PUSH
76531: LD_VAR 0 5
76535: PPUSH
76536: LD_VAR 0 6
76540: PPUSH
76541: CALL_OW 428
76545: OR
76546: IFFALSE 76550
// exit ;
76548: GO 77278
// uc_side := your_side ;
76550: LD_ADDR_OWVAR 20
76554: PUSH
76555: LD_OWVAR 2
76559: ST_TO_ADDR
// uc_nation := nation ;
76560: LD_ADDR_OWVAR 21
76564: PUSH
76565: LD_VAR 0 1
76569: ST_TO_ADDR
// bc_level = 1 ;
76570: LD_ADDR_OWVAR 43
76574: PUSH
76575: LD_INT 1
76577: ST_TO_ADDR
// case btype of 1 :
76578: LD_VAR 0 2
76582: PUSH
76583: LD_INT 1
76585: DOUBLE
76586: EQUAL
76587: IFTRUE 76591
76589: GO 76602
76591: POP
// bc_type := b_depot ; 2 :
76592: LD_ADDR_OWVAR 42
76596: PUSH
76597: LD_INT 0
76599: ST_TO_ADDR
76600: GO 77222
76602: LD_INT 2
76604: DOUBLE
76605: EQUAL
76606: IFTRUE 76610
76608: GO 76621
76610: POP
// bc_type := b_warehouse ; 3 :
76611: LD_ADDR_OWVAR 42
76615: PUSH
76616: LD_INT 1
76618: ST_TO_ADDR
76619: GO 77222
76621: LD_INT 3
76623: DOUBLE
76624: EQUAL
76625: IFTRUE 76629
76627: GO 76640
76629: POP
// bc_type := b_lab ; 4 .. 9 :
76630: LD_ADDR_OWVAR 42
76634: PUSH
76635: LD_INT 6
76637: ST_TO_ADDR
76638: GO 77222
76640: LD_INT 4
76642: DOUBLE
76643: GREATEREQUAL
76644: IFFALSE 76652
76646: LD_INT 9
76648: DOUBLE
76649: LESSEQUAL
76650: IFTRUE 76654
76652: GO 76714
76654: POP
// begin bc_type := b_lab_half ;
76655: LD_ADDR_OWVAR 42
76659: PUSH
76660: LD_INT 7
76662: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
76663: LD_ADDR_OWVAR 44
76667: PUSH
76668: LD_INT 10
76670: PUSH
76671: LD_INT 11
76673: PUSH
76674: LD_INT 12
76676: PUSH
76677: LD_INT 15
76679: PUSH
76680: LD_INT 14
76682: PUSH
76683: LD_INT 13
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: PUSH
76694: LD_VAR 0 2
76698: PUSH
76699: LD_INT 3
76701: MINUS
76702: ARRAY
76703: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
76704: LD_ADDR_OWVAR 45
76708: PUSH
76709: LD_INT 9
76711: ST_TO_ADDR
// end ; 10 .. 13 :
76712: GO 77222
76714: LD_INT 10
76716: DOUBLE
76717: GREATEREQUAL
76718: IFFALSE 76726
76720: LD_INT 13
76722: DOUBLE
76723: LESSEQUAL
76724: IFTRUE 76728
76726: GO 76805
76728: POP
// begin bc_type := b_lab_full ;
76729: LD_ADDR_OWVAR 42
76733: PUSH
76734: LD_INT 8
76736: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
76737: LD_ADDR_OWVAR 44
76741: PUSH
76742: LD_INT 10
76744: PUSH
76745: LD_INT 12
76747: PUSH
76748: LD_INT 14
76750: PUSH
76751: LD_INT 13
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: PUSH
76760: LD_VAR 0 2
76764: PUSH
76765: LD_INT 9
76767: MINUS
76768: ARRAY
76769: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
76770: LD_ADDR_OWVAR 45
76774: PUSH
76775: LD_INT 11
76777: PUSH
76778: LD_INT 15
76780: PUSH
76781: LD_INT 12
76783: PUSH
76784: LD_INT 15
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: PUSH
76793: LD_VAR 0 2
76797: PUSH
76798: LD_INT 9
76800: MINUS
76801: ARRAY
76802: ST_TO_ADDR
// end ; 14 :
76803: GO 77222
76805: LD_INT 14
76807: DOUBLE
76808: EQUAL
76809: IFTRUE 76813
76811: GO 76824
76813: POP
// bc_type := b_workshop ; 15 :
76814: LD_ADDR_OWVAR 42
76818: PUSH
76819: LD_INT 2
76821: ST_TO_ADDR
76822: GO 77222
76824: LD_INT 15
76826: DOUBLE
76827: EQUAL
76828: IFTRUE 76832
76830: GO 76843
76832: POP
// bc_type := b_factory ; 16 :
76833: LD_ADDR_OWVAR 42
76837: PUSH
76838: LD_INT 3
76840: ST_TO_ADDR
76841: GO 77222
76843: LD_INT 16
76845: DOUBLE
76846: EQUAL
76847: IFTRUE 76851
76849: GO 76862
76851: POP
// bc_type := b_ext_gun ; 17 :
76852: LD_ADDR_OWVAR 42
76856: PUSH
76857: LD_INT 17
76859: ST_TO_ADDR
76860: GO 77222
76862: LD_INT 17
76864: DOUBLE
76865: EQUAL
76866: IFTRUE 76870
76868: GO 76898
76870: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
76871: LD_ADDR_OWVAR 42
76875: PUSH
76876: LD_INT 19
76878: PUSH
76879: LD_INT 23
76881: PUSH
76882: LD_INT 19
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: LIST
76889: PUSH
76890: LD_VAR 0 1
76894: ARRAY
76895: ST_TO_ADDR
76896: GO 77222
76898: LD_INT 18
76900: DOUBLE
76901: EQUAL
76902: IFTRUE 76906
76904: GO 76917
76906: POP
// bc_type := b_ext_radar ; 19 :
76907: LD_ADDR_OWVAR 42
76911: PUSH
76912: LD_INT 20
76914: ST_TO_ADDR
76915: GO 77222
76917: LD_INT 19
76919: DOUBLE
76920: EQUAL
76921: IFTRUE 76925
76923: GO 76936
76925: POP
// bc_type := b_ext_radio ; 20 :
76926: LD_ADDR_OWVAR 42
76930: PUSH
76931: LD_INT 22
76933: ST_TO_ADDR
76934: GO 77222
76936: LD_INT 20
76938: DOUBLE
76939: EQUAL
76940: IFTRUE 76944
76942: GO 76955
76944: POP
// bc_type := b_ext_siberium ; 21 :
76945: LD_ADDR_OWVAR 42
76949: PUSH
76950: LD_INT 21
76952: ST_TO_ADDR
76953: GO 77222
76955: LD_INT 21
76957: DOUBLE
76958: EQUAL
76959: IFTRUE 76963
76961: GO 76974
76963: POP
// bc_type := b_ext_computer ; 22 :
76964: LD_ADDR_OWVAR 42
76968: PUSH
76969: LD_INT 24
76971: ST_TO_ADDR
76972: GO 77222
76974: LD_INT 22
76976: DOUBLE
76977: EQUAL
76978: IFTRUE 76982
76980: GO 76993
76982: POP
// bc_type := b_ext_track ; 23 :
76983: LD_ADDR_OWVAR 42
76987: PUSH
76988: LD_INT 16
76990: ST_TO_ADDR
76991: GO 77222
76993: LD_INT 23
76995: DOUBLE
76996: EQUAL
76997: IFTRUE 77001
76999: GO 77012
77001: POP
// bc_type := b_ext_laser ; 24 :
77002: LD_ADDR_OWVAR 42
77006: PUSH
77007: LD_INT 25
77009: ST_TO_ADDR
77010: GO 77222
77012: LD_INT 24
77014: DOUBLE
77015: EQUAL
77016: IFTRUE 77020
77018: GO 77031
77020: POP
// bc_type := b_control_tower ; 25 :
77021: LD_ADDR_OWVAR 42
77025: PUSH
77026: LD_INT 36
77028: ST_TO_ADDR
77029: GO 77222
77031: LD_INT 25
77033: DOUBLE
77034: EQUAL
77035: IFTRUE 77039
77037: GO 77050
77039: POP
// bc_type := b_breastwork ; 26 :
77040: LD_ADDR_OWVAR 42
77044: PUSH
77045: LD_INT 31
77047: ST_TO_ADDR
77048: GO 77222
77050: LD_INT 26
77052: DOUBLE
77053: EQUAL
77054: IFTRUE 77058
77056: GO 77069
77058: POP
// bc_type := b_bunker ; 27 :
77059: LD_ADDR_OWVAR 42
77063: PUSH
77064: LD_INT 32
77066: ST_TO_ADDR
77067: GO 77222
77069: LD_INT 27
77071: DOUBLE
77072: EQUAL
77073: IFTRUE 77077
77075: GO 77088
77077: POP
// bc_type := b_turret ; 28 :
77078: LD_ADDR_OWVAR 42
77082: PUSH
77083: LD_INT 33
77085: ST_TO_ADDR
77086: GO 77222
77088: LD_INT 28
77090: DOUBLE
77091: EQUAL
77092: IFTRUE 77096
77094: GO 77107
77096: POP
// bc_type := b_armoury ; 29 :
77097: LD_ADDR_OWVAR 42
77101: PUSH
77102: LD_INT 4
77104: ST_TO_ADDR
77105: GO 77222
77107: LD_INT 29
77109: DOUBLE
77110: EQUAL
77111: IFTRUE 77115
77113: GO 77126
77115: POP
// bc_type := b_barracks ; 30 :
77116: LD_ADDR_OWVAR 42
77120: PUSH
77121: LD_INT 5
77123: ST_TO_ADDR
77124: GO 77222
77126: LD_INT 30
77128: DOUBLE
77129: EQUAL
77130: IFTRUE 77134
77132: GO 77145
77134: POP
// bc_type := b_solar_power ; 31 :
77135: LD_ADDR_OWVAR 42
77139: PUSH
77140: LD_INT 27
77142: ST_TO_ADDR
77143: GO 77222
77145: LD_INT 31
77147: DOUBLE
77148: EQUAL
77149: IFTRUE 77153
77151: GO 77164
77153: POP
// bc_type := b_oil_power ; 32 :
77154: LD_ADDR_OWVAR 42
77158: PUSH
77159: LD_INT 26
77161: ST_TO_ADDR
77162: GO 77222
77164: LD_INT 32
77166: DOUBLE
77167: EQUAL
77168: IFTRUE 77172
77170: GO 77183
77172: POP
// bc_type := b_siberite_power ; 33 :
77173: LD_ADDR_OWVAR 42
77177: PUSH
77178: LD_INT 28
77180: ST_TO_ADDR
77181: GO 77222
77183: LD_INT 33
77185: DOUBLE
77186: EQUAL
77187: IFTRUE 77191
77189: GO 77202
77191: POP
// bc_type := b_oil_mine ; 34 :
77192: LD_ADDR_OWVAR 42
77196: PUSH
77197: LD_INT 29
77199: ST_TO_ADDR
77200: GO 77222
77202: LD_INT 34
77204: DOUBLE
77205: EQUAL
77206: IFTRUE 77210
77208: GO 77221
77210: POP
// bc_type := b_siberite_mine ; end ;
77211: LD_ADDR_OWVAR 42
77215: PUSH
77216: LD_INT 30
77218: ST_TO_ADDR
77219: GO 77222
77221: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77222: LD_ADDR_VAR 0 8
77226: PUSH
77227: LD_VAR 0 5
77231: PPUSH
77232: LD_VAR 0 6
77236: PPUSH
77237: LD_VAR 0 3
77241: PPUSH
77242: CALL_OW 47
77246: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77247: LD_OWVAR 42
77251: PUSH
77252: LD_INT 32
77254: PUSH
77255: LD_INT 33
77257: PUSH
77258: EMPTY
77259: LIST
77260: LIST
77261: IN
77262: IFFALSE 77278
// PlaceWeaponTurret ( b , weapon ) ;
77264: LD_VAR 0 8
77268: PPUSH
77269: LD_VAR 0 4
77273: PPUSH
77274: CALL_OW 431
// end ;
77278: LD_VAR 0 7
77282: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77283: LD_INT 0
77285: PPUSH
77286: PPUSH
77287: PPUSH
77288: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77289: LD_ADDR_VAR 0 4
77293: PUSH
77294: LD_INT 22
77296: PUSH
77297: LD_OWVAR 2
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: PUSH
77306: LD_INT 2
77308: PUSH
77309: LD_INT 30
77311: PUSH
77312: LD_INT 0
77314: PUSH
77315: EMPTY
77316: LIST
77317: LIST
77318: PUSH
77319: LD_INT 30
77321: PUSH
77322: LD_INT 1
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: LIST
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: PPUSH
77338: CALL_OW 69
77342: ST_TO_ADDR
// if not tmp then
77343: LD_VAR 0 4
77347: NOT
77348: IFFALSE 77352
// exit ;
77350: GO 77411
// for i in tmp do
77352: LD_ADDR_VAR 0 2
77356: PUSH
77357: LD_VAR 0 4
77361: PUSH
77362: FOR_IN
77363: IFFALSE 77409
// for j = 1 to 3 do
77365: LD_ADDR_VAR 0 3
77369: PUSH
77370: DOUBLE
77371: LD_INT 1
77373: DEC
77374: ST_TO_ADDR
77375: LD_INT 3
77377: PUSH
77378: FOR_TO
77379: IFFALSE 77405
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77381: LD_VAR 0 2
77385: PPUSH
77386: CALL_OW 274
77390: PPUSH
77391: LD_VAR 0 3
77395: PPUSH
77396: LD_INT 99999
77398: PPUSH
77399: CALL_OW 277
77403: GO 77378
77405: POP
77406: POP
77407: GO 77362
77409: POP
77410: POP
// end ;
77411: LD_VAR 0 1
77415: RET
// export function hHackSetLevel10 ; var i , j ; begin
77416: LD_INT 0
77418: PPUSH
77419: PPUSH
77420: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77421: LD_ADDR_VAR 0 2
77425: PUSH
77426: LD_INT 21
77428: PUSH
77429: LD_INT 1
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: PPUSH
77436: CALL_OW 69
77440: PUSH
77441: FOR_IN
77442: IFFALSE 77494
// if IsSelected ( i ) then
77444: LD_VAR 0 2
77448: PPUSH
77449: CALL_OW 306
77453: IFFALSE 77492
// begin for j := 1 to 4 do
77455: LD_ADDR_VAR 0 3
77459: PUSH
77460: DOUBLE
77461: LD_INT 1
77463: DEC
77464: ST_TO_ADDR
77465: LD_INT 4
77467: PUSH
77468: FOR_TO
77469: IFFALSE 77490
// SetSkill ( i , j , 10 ) ;
77471: LD_VAR 0 2
77475: PPUSH
77476: LD_VAR 0 3
77480: PPUSH
77481: LD_INT 10
77483: PPUSH
77484: CALL_OW 237
77488: GO 77468
77490: POP
77491: POP
// end ;
77492: GO 77441
77494: POP
77495: POP
// end ;
77496: LD_VAR 0 1
77500: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77501: LD_INT 0
77503: PPUSH
77504: PPUSH
77505: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
77506: LD_ADDR_VAR 0 2
77510: PUSH
77511: LD_INT 22
77513: PUSH
77514: LD_OWVAR 2
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PUSH
77523: LD_INT 21
77525: PUSH
77526: LD_INT 1
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: EMPTY
77534: LIST
77535: LIST
77536: PPUSH
77537: CALL_OW 69
77541: PUSH
77542: FOR_IN
77543: IFFALSE 77584
// begin for j := 1 to 4 do
77545: LD_ADDR_VAR 0 3
77549: PUSH
77550: DOUBLE
77551: LD_INT 1
77553: DEC
77554: ST_TO_ADDR
77555: LD_INT 4
77557: PUSH
77558: FOR_TO
77559: IFFALSE 77580
// SetSkill ( i , j , 10 ) ;
77561: LD_VAR 0 2
77565: PPUSH
77566: LD_VAR 0 3
77570: PPUSH
77571: LD_INT 10
77573: PPUSH
77574: CALL_OW 237
77578: GO 77558
77580: POP
77581: POP
// end ;
77582: GO 77542
77584: POP
77585: POP
// end ;
77586: LD_VAR 0 1
77590: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
77591: LD_INT 0
77593: PPUSH
// uc_side := your_side ;
77594: LD_ADDR_OWVAR 20
77598: PUSH
77599: LD_OWVAR 2
77603: ST_TO_ADDR
// uc_nation := nation ;
77604: LD_ADDR_OWVAR 21
77608: PUSH
77609: LD_VAR 0 1
77613: ST_TO_ADDR
// InitHc ;
77614: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
77618: LD_INT 0
77620: PPUSH
77621: LD_VAR 0 2
77625: PPUSH
77626: LD_VAR 0 3
77630: PPUSH
77631: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
77635: LD_VAR 0 4
77639: PPUSH
77640: LD_VAR 0 5
77644: PPUSH
77645: CALL_OW 428
77649: PUSH
77650: LD_INT 0
77652: EQUAL
77653: IFFALSE 77677
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
77655: CALL_OW 44
77659: PPUSH
77660: LD_VAR 0 4
77664: PPUSH
77665: LD_VAR 0 5
77669: PPUSH
77670: LD_INT 1
77672: PPUSH
77673: CALL_OW 48
// end ;
77677: LD_VAR 0 6
77681: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
77682: LD_INT 0
77684: PPUSH
77685: PPUSH
// uc_side := your_side ;
77686: LD_ADDR_OWVAR 20
77690: PUSH
77691: LD_OWVAR 2
77695: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
77696: LD_VAR 0 1
77700: PUSH
77701: LD_INT 1
77703: PUSH
77704: LD_INT 2
77706: PUSH
77707: LD_INT 3
77709: PUSH
77710: LD_INT 4
77712: PUSH
77713: LD_INT 5
77715: PUSH
77716: EMPTY
77717: LIST
77718: LIST
77719: LIST
77720: LIST
77721: LIST
77722: IN
77723: IFFALSE 77735
// uc_nation := nation_american else
77725: LD_ADDR_OWVAR 21
77729: PUSH
77730: LD_INT 1
77732: ST_TO_ADDR
77733: GO 77778
// if chassis in [ 11 , 12 , 13 , 14 ] then
77735: LD_VAR 0 1
77739: PUSH
77740: LD_INT 11
77742: PUSH
77743: LD_INT 12
77745: PUSH
77746: LD_INT 13
77748: PUSH
77749: LD_INT 14
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: LIST
77756: LIST
77757: IN
77758: IFFALSE 77770
// uc_nation := nation_arabian else
77760: LD_ADDR_OWVAR 21
77764: PUSH
77765: LD_INT 2
77767: ST_TO_ADDR
77768: GO 77778
// uc_nation := nation_russian ;
77770: LD_ADDR_OWVAR 21
77774: PUSH
77775: LD_INT 3
77777: ST_TO_ADDR
// vc_chassis := chassis ;
77778: LD_ADDR_OWVAR 37
77782: PUSH
77783: LD_VAR 0 1
77787: ST_TO_ADDR
// vc_engine := engine ;
77788: LD_ADDR_OWVAR 39
77792: PUSH
77793: LD_VAR 0 2
77797: ST_TO_ADDR
// vc_control := control ;
77798: LD_ADDR_OWVAR 38
77802: PUSH
77803: LD_VAR 0 3
77807: ST_TO_ADDR
// vc_weapon := weapon ;
77808: LD_ADDR_OWVAR 40
77812: PUSH
77813: LD_VAR 0 4
77817: ST_TO_ADDR
// un := CreateVehicle ;
77818: LD_ADDR_VAR 0 8
77822: PUSH
77823: CALL_OW 45
77827: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
77828: LD_VAR 0 8
77832: PPUSH
77833: LD_INT 0
77835: PPUSH
77836: LD_INT 5
77838: PPUSH
77839: CALL_OW 12
77843: PPUSH
77844: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
77848: LD_VAR 0 8
77852: PPUSH
77853: LD_VAR 0 5
77857: PPUSH
77858: LD_VAR 0 6
77862: PPUSH
77863: LD_INT 1
77865: PPUSH
77866: CALL_OW 48
// end ;
77870: LD_VAR 0 7
77874: RET
// export hInvincible ; every 1 do
77875: GO 77877
77877: DISABLE
// hInvincible := [ ] ;
77878: LD_ADDR_EXP 104
77882: PUSH
77883: EMPTY
77884: ST_TO_ADDR
77885: END
// every 10 do var i ;
77886: GO 77888
77888: DISABLE
77889: LD_INT 0
77891: PPUSH
// begin enable ;
77892: ENABLE
// if not hInvincible then
77893: LD_EXP 104
77897: NOT
77898: IFFALSE 77902
// exit ;
77900: GO 77946
// for i in hInvincible do
77902: LD_ADDR_VAR 0 1
77906: PUSH
77907: LD_EXP 104
77911: PUSH
77912: FOR_IN
77913: IFFALSE 77944
// if GetLives ( i ) < 1000 then
77915: LD_VAR 0 1
77919: PPUSH
77920: CALL_OW 256
77924: PUSH
77925: LD_INT 1000
77927: LESS
77928: IFFALSE 77942
// SetLives ( i , 1000 ) ;
77930: LD_VAR 0 1
77934: PPUSH
77935: LD_INT 1000
77937: PPUSH
77938: CALL_OW 234
77942: GO 77912
77944: POP
77945: POP
// end ;
77946: PPOPN 1
77948: END
// export function hHackInvincible ; var i ; begin
77949: LD_INT 0
77951: PPUSH
77952: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
77953: LD_ADDR_VAR 0 2
77957: PUSH
77958: LD_INT 2
77960: PUSH
77961: LD_INT 21
77963: PUSH
77964: LD_INT 1
77966: PUSH
77967: EMPTY
77968: LIST
77969: LIST
77970: PUSH
77971: LD_INT 21
77973: PUSH
77974: LD_INT 2
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: LIST
77985: PPUSH
77986: CALL_OW 69
77990: PUSH
77991: FOR_IN
77992: IFFALSE 78053
// if IsSelected ( i ) then
77994: LD_VAR 0 2
77998: PPUSH
77999: CALL_OW 306
78003: IFFALSE 78051
// begin if i in hInvincible then
78005: LD_VAR 0 2
78009: PUSH
78010: LD_EXP 104
78014: IN
78015: IFFALSE 78035
// hInvincible := hInvincible diff i else
78017: LD_ADDR_EXP 104
78021: PUSH
78022: LD_EXP 104
78026: PUSH
78027: LD_VAR 0 2
78031: DIFF
78032: ST_TO_ADDR
78033: GO 78051
// hInvincible := hInvincible union i ;
78035: LD_ADDR_EXP 104
78039: PUSH
78040: LD_EXP 104
78044: PUSH
78045: LD_VAR 0 2
78049: UNION
78050: ST_TO_ADDR
// end ;
78051: GO 77991
78053: POP
78054: POP
// end ;
78055: LD_VAR 0 1
78059: RET
// export function hHackInvisible ; var i , j ; begin
78060: LD_INT 0
78062: PPUSH
78063: PPUSH
78064: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78065: LD_ADDR_VAR 0 2
78069: PUSH
78070: LD_INT 21
78072: PUSH
78073: LD_INT 1
78075: PUSH
78076: EMPTY
78077: LIST
78078: LIST
78079: PPUSH
78080: CALL_OW 69
78084: PUSH
78085: FOR_IN
78086: IFFALSE 78110
// if IsSelected ( i ) then
78088: LD_VAR 0 2
78092: PPUSH
78093: CALL_OW 306
78097: IFFALSE 78108
// ComForceInvisible ( i ) ;
78099: LD_VAR 0 2
78103: PPUSH
78104: CALL_OW 496
78108: GO 78085
78110: POP
78111: POP
// end ;
78112: LD_VAR 0 1
78116: RET
// export function hHackChangeYourSide ; begin
78117: LD_INT 0
78119: PPUSH
// if your_side = 8 then
78120: LD_OWVAR 2
78124: PUSH
78125: LD_INT 8
78127: EQUAL
78128: IFFALSE 78140
// your_side := 0 else
78130: LD_ADDR_OWVAR 2
78134: PUSH
78135: LD_INT 0
78137: ST_TO_ADDR
78138: GO 78154
// your_side := your_side + 1 ;
78140: LD_ADDR_OWVAR 2
78144: PUSH
78145: LD_OWVAR 2
78149: PUSH
78150: LD_INT 1
78152: PLUS
78153: ST_TO_ADDR
// end ;
78154: LD_VAR 0 1
78158: RET
// export function hHackChangeUnitSide ; var i , j ; begin
78159: LD_INT 0
78161: PPUSH
78162: PPUSH
78163: PPUSH
// for i in all_units do
78164: LD_ADDR_VAR 0 2
78168: PUSH
78169: LD_OWVAR 3
78173: PUSH
78174: FOR_IN
78175: IFFALSE 78253
// if IsSelected ( i ) then
78177: LD_VAR 0 2
78181: PPUSH
78182: CALL_OW 306
78186: IFFALSE 78251
// begin j := GetSide ( i ) ;
78188: LD_ADDR_VAR 0 3
78192: PUSH
78193: LD_VAR 0 2
78197: PPUSH
78198: CALL_OW 255
78202: ST_TO_ADDR
// if j = 8 then
78203: LD_VAR 0 3
78207: PUSH
78208: LD_INT 8
78210: EQUAL
78211: IFFALSE 78223
// j := 0 else
78213: LD_ADDR_VAR 0 3
78217: PUSH
78218: LD_INT 0
78220: ST_TO_ADDR
78221: GO 78237
// j := j + 1 ;
78223: LD_ADDR_VAR 0 3
78227: PUSH
78228: LD_VAR 0 3
78232: PUSH
78233: LD_INT 1
78235: PLUS
78236: ST_TO_ADDR
// SetSide ( i , j ) ;
78237: LD_VAR 0 2
78241: PPUSH
78242: LD_VAR 0 3
78246: PPUSH
78247: CALL_OW 235
// end ;
78251: GO 78174
78253: POP
78254: POP
// end ;
78255: LD_VAR 0 1
78259: RET
// export function hHackFog ; begin
78260: LD_INT 0
78262: PPUSH
// FogOff ( true ) ;
78263: LD_INT 1
78265: PPUSH
78266: CALL_OW 344
// end ;
78270: LD_VAR 0 1
78274: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78275: LD_INT 0
78277: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78278: LD_VAR 0 1
78282: PPUSH
78283: LD_VAR 0 2
78287: PPUSH
78288: LD_VAR 0 3
78292: PPUSH
78293: LD_INT 1
78295: PPUSH
78296: LD_INT 1
78298: PPUSH
78299: CALL_OW 483
// CenterOnXY ( x , y ) ;
78303: LD_VAR 0 2
78307: PPUSH
78308: LD_VAR 0 3
78312: PPUSH
78313: CALL_OW 84
// end ;
78317: LD_VAR 0 4
78321: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78322: LD_INT 0
78324: PPUSH
78325: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78326: LD_VAR 0 1
78330: NOT
78331: PUSH
78332: LD_VAR 0 2
78336: PPUSH
78337: LD_VAR 0 3
78341: PPUSH
78342: CALL_OW 488
78346: NOT
78347: OR
78348: PUSH
78349: LD_VAR 0 1
78353: PPUSH
78354: CALL_OW 266
78358: PUSH
78359: LD_INT 3
78361: NONEQUAL
78362: PUSH
78363: LD_VAR 0 1
78367: PPUSH
78368: CALL_OW 247
78372: PUSH
78373: LD_INT 1
78375: EQUAL
78376: NOT
78377: AND
78378: OR
78379: IFFALSE 78383
// exit ;
78381: GO 78665
// if GetType ( factory ) = unit_human then
78383: LD_VAR 0 1
78387: PPUSH
78388: CALL_OW 247
78392: PUSH
78393: LD_INT 1
78395: EQUAL
78396: IFFALSE 78413
// factory := IsInUnit ( factory ) ;
78398: LD_ADDR_VAR 0 1
78402: PUSH
78403: LD_VAR 0 1
78407: PPUSH
78408: CALL_OW 310
78412: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78413: LD_VAR 0 1
78417: PPUSH
78418: CALL_OW 266
78422: PUSH
78423: LD_INT 3
78425: NONEQUAL
78426: IFFALSE 78430
// exit ;
78428: GO 78665
// for i := 1 to Count ( factoryWaypoints ) do
78430: LD_ADDR_VAR 0 5
78434: PUSH
78435: DOUBLE
78436: LD_INT 1
78438: DEC
78439: ST_TO_ADDR
78440: LD_EXP 105
78444: PPUSH
78445: CALL 23056 0 1
78449: PUSH
78450: FOR_TO
78451: IFFALSE 78613
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
78453: LD_VAR 0 2
78457: PPUSH
78458: LD_VAR 0 3
78462: PPUSH
78463: CALL_OW 428
78467: PUSH
78468: LD_EXP 105
78472: PUSH
78473: LD_VAR 0 5
78477: ARRAY
78478: PUSH
78479: LD_INT 2
78481: ARRAY
78482: EQUAL
78483: IFFALSE 78515
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
78485: LD_ADDR_EXP 105
78489: PUSH
78490: LD_EXP 105
78494: PPUSH
78495: LD_VAR 0 5
78499: PPUSH
78500: CALL_OW 3
78504: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78505: CALL 78670 0 0
// exit ;
78509: POP
78510: POP
78511: GO 78665
// end else
78513: GO 78611
// if factory = factoryWaypoints [ i ] [ 2 ] then
78515: LD_VAR 0 1
78519: PUSH
78520: LD_EXP 105
78524: PUSH
78525: LD_VAR 0 5
78529: ARRAY
78530: PUSH
78531: LD_INT 2
78533: ARRAY
78534: EQUAL
78535: IFFALSE 78611
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
78537: LD_ADDR_EXP 105
78541: PUSH
78542: LD_EXP 105
78546: PPUSH
78547: LD_VAR 0 5
78551: PPUSH
78552: CALL_OW 3
78556: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
78557: LD_ADDR_EXP 105
78561: PUSH
78562: LD_EXP 105
78566: PPUSH
78567: LD_VAR 0 1
78571: PPUSH
78572: CALL_OW 255
78576: PUSH
78577: LD_VAR 0 1
78581: PUSH
78582: LD_VAR 0 2
78586: PUSH
78587: LD_VAR 0 3
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: LIST
78596: LIST
78597: PPUSH
78598: CALL 58665 0 2
78602: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78603: CALL 78670 0 0
// exit ;
78607: POP
78608: POP
78609: GO 78665
// end ; end ;
78611: GO 78450
78613: POP
78614: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
78615: LD_ADDR_EXP 105
78619: PUSH
78620: LD_EXP 105
78624: PPUSH
78625: LD_VAR 0 1
78629: PPUSH
78630: CALL_OW 255
78634: PUSH
78635: LD_VAR 0 1
78639: PUSH
78640: LD_VAR 0 2
78644: PUSH
78645: LD_VAR 0 3
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: LIST
78654: LIST
78655: PPUSH
78656: CALL 58665 0 2
78660: ST_TO_ADDR
// UpdateFactoryWaypoints ;
78661: CALL 78670 0 0
// end ;
78665: LD_VAR 0 4
78669: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
78670: LD_INT 0
78672: PPUSH
78673: PPUSH
78674: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
78675: LD_STRING resetFactoryWaypoint();
78677: PPUSH
78678: CALL_OW 559
// if factoryWaypoints then
78682: LD_EXP 105
78686: IFFALSE 78807
// begin list := factoryWaypoints ;
78688: LD_ADDR_VAR 0 3
78692: PUSH
78693: LD_EXP 105
78697: ST_TO_ADDR
// for i := 1 to list do
78698: LD_ADDR_VAR 0 2
78702: PUSH
78703: DOUBLE
78704: LD_INT 1
78706: DEC
78707: ST_TO_ADDR
78708: LD_VAR 0 3
78712: PUSH
78713: FOR_TO
78714: IFFALSE 78805
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78716: LD_STRING setFactoryWaypointXY(
78718: PUSH
78719: LD_VAR 0 3
78723: PUSH
78724: LD_VAR 0 2
78728: ARRAY
78729: PUSH
78730: LD_INT 1
78732: ARRAY
78733: STR
78734: PUSH
78735: LD_STRING ,
78737: STR
78738: PUSH
78739: LD_VAR 0 3
78743: PUSH
78744: LD_VAR 0 2
78748: ARRAY
78749: PUSH
78750: LD_INT 2
78752: ARRAY
78753: STR
78754: PUSH
78755: LD_STRING ,
78757: STR
78758: PUSH
78759: LD_VAR 0 3
78763: PUSH
78764: LD_VAR 0 2
78768: ARRAY
78769: PUSH
78770: LD_INT 3
78772: ARRAY
78773: STR
78774: PUSH
78775: LD_STRING ,
78777: STR
78778: PUSH
78779: LD_VAR 0 3
78783: PUSH
78784: LD_VAR 0 2
78788: ARRAY
78789: PUSH
78790: LD_INT 4
78792: ARRAY
78793: STR
78794: PUSH
78795: LD_STRING )
78797: STR
78798: PPUSH
78799: CALL_OW 559
78803: GO 78713
78805: POP
78806: POP
// end ; end ;
78807: LD_VAR 0 1
78811: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
78812: LD_INT 0
78814: PPUSH
// if HexInfo ( x , y ) = warehouse then
78815: LD_VAR 0 2
78819: PPUSH
78820: LD_VAR 0 3
78824: PPUSH
78825: CALL_OW 428
78829: PUSH
78830: LD_VAR 0 1
78834: EQUAL
78835: IFFALSE 78862
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
78837: LD_ADDR_EXP 107
78841: PUSH
78842: LD_EXP 107
78846: PPUSH
78847: LD_VAR 0 1
78851: PPUSH
78852: LD_INT 0
78854: PPUSH
78855: CALL_OW 1
78859: ST_TO_ADDR
78860: GO 78913
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
78862: LD_ADDR_EXP 107
78866: PUSH
78867: LD_EXP 107
78871: PPUSH
78872: LD_VAR 0 1
78876: PPUSH
78877: LD_VAR 0 1
78881: PPUSH
78882: CALL_OW 255
78886: PUSH
78887: LD_VAR 0 1
78891: PUSH
78892: LD_VAR 0 2
78896: PUSH
78897: LD_VAR 0 3
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: LIST
78906: LIST
78907: PPUSH
78908: CALL_OW 1
78912: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
78913: CALL 78922 0 0
// end ;
78917: LD_VAR 0 4
78921: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
78922: LD_INT 0
78924: PPUSH
78925: PPUSH
78926: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
78927: LD_STRING resetWarehouseGatheringPoints();
78929: PPUSH
78930: CALL_OW 559
// if warehouseGatheringPoints then
78934: LD_EXP 107
78938: IFFALSE 79064
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
78940: LD_ADDR_VAR 0 3
78944: PUSH
78945: LD_EXP 107
78949: PPUSH
78950: CALL 62433 0 1
78954: ST_TO_ADDR
// for i := 1 to list do
78955: LD_ADDR_VAR 0 2
78959: PUSH
78960: DOUBLE
78961: LD_INT 1
78963: DEC
78964: ST_TO_ADDR
78965: LD_VAR 0 3
78969: PUSH
78970: FOR_TO
78971: IFFALSE 79062
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
78973: LD_STRING setWarehouseGatheringPointXY(
78975: PUSH
78976: LD_VAR 0 3
78980: PUSH
78981: LD_VAR 0 2
78985: ARRAY
78986: PUSH
78987: LD_INT 1
78989: ARRAY
78990: STR
78991: PUSH
78992: LD_STRING ,
78994: STR
78995: PUSH
78996: LD_VAR 0 3
79000: PUSH
79001: LD_VAR 0 2
79005: ARRAY
79006: PUSH
79007: LD_INT 2
79009: ARRAY
79010: STR
79011: PUSH
79012: LD_STRING ,
79014: STR
79015: PUSH
79016: LD_VAR 0 3
79020: PUSH
79021: LD_VAR 0 2
79025: ARRAY
79026: PUSH
79027: LD_INT 3
79029: ARRAY
79030: STR
79031: PUSH
79032: LD_STRING ,
79034: STR
79035: PUSH
79036: LD_VAR 0 3
79040: PUSH
79041: LD_VAR 0 2
79045: ARRAY
79046: PUSH
79047: LD_INT 4
79049: ARRAY
79050: STR
79051: PUSH
79052: LD_STRING )
79054: STR
79055: PPUSH
79056: CALL_OW 559
79060: GO 78970
79062: POP
79063: POP
// end ; end ;
79064: LD_VAR 0 1
79068: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
79069: LD_EXP 107
79073: IFFALSE 79758
79075: GO 79077
79077: DISABLE
79078: LD_INT 0
79080: PPUSH
79081: PPUSH
79082: PPUSH
79083: PPUSH
79084: PPUSH
79085: PPUSH
79086: PPUSH
79087: PPUSH
79088: PPUSH
// begin enable ;
79089: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
79090: LD_ADDR_VAR 0 3
79094: PUSH
79095: LD_EXP 107
79099: PPUSH
79100: CALL 62433 0 1
79104: ST_TO_ADDR
// if not list then
79105: LD_VAR 0 3
79109: NOT
79110: IFFALSE 79114
// exit ;
79112: GO 79758
// for i := 1 to list do
79114: LD_ADDR_VAR 0 1
79118: PUSH
79119: DOUBLE
79120: LD_INT 1
79122: DEC
79123: ST_TO_ADDR
79124: LD_VAR 0 3
79128: PUSH
79129: FOR_TO
79130: IFFALSE 79756
// begin depot := list [ i ] [ 2 ] ;
79132: LD_ADDR_VAR 0 8
79136: PUSH
79137: LD_VAR 0 3
79141: PUSH
79142: LD_VAR 0 1
79146: ARRAY
79147: PUSH
79148: LD_INT 2
79150: ARRAY
79151: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
79152: LD_ADDR_VAR 0 5
79156: PUSH
79157: LD_VAR 0 3
79161: PUSH
79162: LD_VAR 0 1
79166: ARRAY
79167: PUSH
79168: LD_INT 1
79170: ARRAY
79171: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
79172: LD_VAR 0 8
79176: PPUSH
79177: CALL_OW 301
79181: PUSH
79182: LD_VAR 0 5
79186: PUSH
79187: LD_VAR 0 8
79191: PPUSH
79192: CALL_OW 255
79196: NONEQUAL
79197: OR
79198: IFFALSE 79227
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
79200: LD_ADDR_EXP 107
79204: PUSH
79205: LD_EXP 107
79209: PPUSH
79210: LD_VAR 0 8
79214: PPUSH
79215: LD_INT 0
79217: PPUSH
79218: CALL_OW 1
79222: ST_TO_ADDR
// exit ;
79223: POP
79224: POP
79225: GO 79758
// end ; x := list [ i ] [ 3 ] ;
79227: LD_ADDR_VAR 0 6
79231: PUSH
79232: LD_VAR 0 3
79236: PUSH
79237: LD_VAR 0 1
79241: ARRAY
79242: PUSH
79243: LD_INT 3
79245: ARRAY
79246: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79247: LD_ADDR_VAR 0 7
79251: PUSH
79252: LD_VAR 0 3
79256: PUSH
79257: LD_VAR 0 1
79261: ARRAY
79262: PUSH
79263: LD_INT 4
79265: ARRAY
79266: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79267: LD_ADDR_VAR 0 9
79271: PUSH
79272: LD_VAR 0 6
79276: PPUSH
79277: LD_VAR 0 7
79281: PPUSH
79282: LD_INT 16
79284: PPUSH
79285: CALL 61017 0 3
79289: ST_TO_ADDR
// if not cratesNearbyPoint then
79290: LD_VAR 0 9
79294: NOT
79295: IFFALSE 79301
// exit ;
79297: POP
79298: POP
79299: GO 79758
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79301: LD_ADDR_VAR 0 4
79305: PUSH
79306: LD_INT 22
79308: PUSH
79309: LD_VAR 0 5
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: PUSH
79318: LD_INT 3
79320: PUSH
79321: LD_INT 60
79323: PUSH
79324: EMPTY
79325: LIST
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: PUSH
79331: LD_INT 91
79333: PUSH
79334: LD_VAR 0 8
79338: PUSH
79339: LD_INT 6
79341: PUSH
79342: EMPTY
79343: LIST
79344: LIST
79345: LIST
79346: PUSH
79347: LD_INT 2
79349: PUSH
79350: LD_INT 25
79352: PUSH
79353: LD_INT 2
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: LD_INT 25
79362: PUSH
79363: LD_INT 16
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: LIST
79374: PUSH
79375: EMPTY
79376: LIST
79377: LIST
79378: LIST
79379: LIST
79380: PPUSH
79381: CALL_OW 69
79385: PUSH
79386: LD_VAR 0 8
79390: PPUSH
79391: CALL_OW 313
79395: PPUSH
79396: LD_INT 3
79398: PUSH
79399: LD_INT 60
79401: PUSH
79402: EMPTY
79403: LIST
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: PUSH
79409: LD_INT 2
79411: PUSH
79412: LD_INT 25
79414: PUSH
79415: LD_INT 2
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: PUSH
79422: LD_INT 25
79424: PUSH
79425: LD_INT 16
79427: PUSH
79428: EMPTY
79429: LIST
79430: LIST
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: LIST
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: PPUSH
79441: CALL_OW 72
79445: UNION
79446: ST_TO_ADDR
// if tmp then
79447: LD_VAR 0 4
79451: IFFALSE 79531
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79453: LD_ADDR_VAR 0 4
79457: PUSH
79458: LD_VAR 0 4
79462: PPUSH
79463: LD_INT 3
79465: PPUSH
79466: CALL 58980 0 2
79470: ST_TO_ADDR
// for j in tmp do
79471: LD_ADDR_VAR 0 2
79475: PUSH
79476: LD_VAR 0 4
79480: PUSH
79481: FOR_IN
79482: IFFALSE 79525
// begin if IsInUnit ( j ) then
79484: LD_VAR 0 2
79488: PPUSH
79489: CALL_OW 310
79493: IFFALSE 79504
// ComExit ( j ) ;
79495: LD_VAR 0 2
79499: PPUSH
79500: CALL 59063 0 1
// AddComCollect ( j , x , y ) ;
79504: LD_VAR 0 2
79508: PPUSH
79509: LD_VAR 0 6
79513: PPUSH
79514: LD_VAR 0 7
79518: PPUSH
79519: CALL_OW 177
// end ;
79523: GO 79481
79525: POP
79526: POP
// exit ;
79527: POP
79528: POP
79529: GO 79758
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79531: LD_ADDR_VAR 0 4
79535: PUSH
79536: LD_INT 22
79538: PUSH
79539: LD_VAR 0 5
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PUSH
79548: LD_INT 91
79550: PUSH
79551: LD_VAR 0 8
79555: PUSH
79556: LD_INT 8
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: LIST
79563: PUSH
79564: LD_INT 2
79566: PUSH
79567: LD_INT 34
79569: PUSH
79570: LD_INT 12
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: PUSH
79577: LD_INT 34
79579: PUSH
79580: LD_INT 51
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 34
79589: PUSH
79590: LD_INT 32
79592: PUSH
79593: EMPTY
79594: LIST
79595: LIST
79596: PUSH
79597: LD_INT 34
79599: PUSH
79600: LD_INT 89
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: LIST
79611: LIST
79612: LIST
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: LIST
79618: PPUSH
79619: CALL_OW 69
79623: ST_TO_ADDR
// if tmp then
79624: LD_VAR 0 4
79628: IFFALSE 79754
// begin for j in tmp do
79630: LD_ADDR_VAR 0 2
79634: PUSH
79635: LD_VAR 0 4
79639: PUSH
79640: FOR_IN
79641: IFFALSE 79752
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
79643: LD_VAR 0 2
79647: PPUSH
79648: CALL_OW 262
79652: PUSH
79653: LD_INT 3
79655: EQUAL
79656: PUSH
79657: LD_VAR 0 2
79661: PPUSH
79662: CALL_OW 261
79666: PUSH
79667: LD_INT 20
79669: GREATER
79670: OR
79671: PUSH
79672: LD_VAR 0 2
79676: PPUSH
79677: CALL_OW 314
79681: NOT
79682: AND
79683: PUSH
79684: LD_VAR 0 2
79688: PPUSH
79689: CALL_OW 263
79693: PUSH
79694: LD_INT 1
79696: NONEQUAL
79697: PUSH
79698: LD_VAR 0 2
79702: PPUSH
79703: CALL_OW 311
79707: OR
79708: AND
79709: IFFALSE 79750
// begin ComCollect ( j , x , y ) ;
79711: LD_VAR 0 2
79715: PPUSH
79716: LD_VAR 0 6
79720: PPUSH
79721: LD_VAR 0 7
79725: PPUSH
79726: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
79730: LD_VAR 0 2
79734: PPUSH
79735: LD_VAR 0 8
79739: PPUSH
79740: CALL_OW 172
// exit ;
79744: POP
79745: POP
79746: POP
79747: POP
79748: GO 79758
// end ;
79750: GO 79640
79752: POP
79753: POP
// end ; end ;
79754: GO 79129
79756: POP
79757: POP
// end ; end_of_file
79758: PPOPN 9
79760: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79761: LD_VAR 0 1
79765: PUSH
79766: LD_INT 200
79768: DOUBLE
79769: GREATEREQUAL
79770: IFFALSE 79778
79772: LD_INT 299
79774: DOUBLE
79775: LESSEQUAL
79776: IFTRUE 79780
79778: GO 79812
79780: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79781: LD_VAR 0 1
79785: PPUSH
79786: LD_VAR 0 2
79790: PPUSH
79791: LD_VAR 0 3
79795: PPUSH
79796: LD_VAR 0 4
79800: PPUSH
79801: LD_VAR 0 5
79805: PPUSH
79806: CALL 80589 0 5
79810: GO 79889
79812: LD_INT 300
79814: DOUBLE
79815: GREATEREQUAL
79816: IFFALSE 79824
79818: LD_INT 399
79820: DOUBLE
79821: LESSEQUAL
79822: IFTRUE 79826
79824: GO 79888
79826: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79827: LD_VAR 0 1
79831: PPUSH
79832: LD_VAR 0 2
79836: PPUSH
79837: LD_VAR 0 3
79841: PPUSH
79842: LD_VAR 0 4
79846: PPUSH
79847: LD_VAR 0 5
79851: PPUSH
79852: LD_VAR 0 6
79856: PPUSH
79857: LD_VAR 0 7
79861: PPUSH
79862: LD_VAR 0 8
79866: PPUSH
79867: LD_VAR 0 9
79871: PPUSH
79872: LD_VAR 0 10
79876: PPUSH
79877: LD_VAR 0 11
79881: PPUSH
79882: CALL 76334 0 11
79886: GO 79889
79888: POP
// end ;
79889: PPOPN 11
79891: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79892: LD_VAR 0 1
79896: PPUSH
79897: LD_VAR 0 2
79901: PPUSH
79902: LD_VAR 0 3
79906: PPUSH
79907: LD_VAR 0 4
79911: PPUSH
79912: LD_VAR 0 5
79916: PPUSH
79917: CALL 79974 0 5
// end ; end_of_file
79921: PPOPN 5
79923: END
// export function SOS_UnitDestroyed ( un ) ; begin
79924: LD_INT 0
79926: PPUSH
// ComRadiation ( un ) ;
79927: LD_VAR 0 1
79931: PPUSH
79932: CALL 80993 0 1
// end ;
79936: LD_VAR 0 2
79940: RET
// export function SOS_UnitKamikazed ( un ) ; begin
79941: LD_INT 0
79943: PPUSH
// ComRadiation ( un ) ;
79944: LD_VAR 0 1
79948: PPUSH
79949: CALL 80993 0 1
// end ;
79953: LD_VAR 0 2
79957: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
79958: LD_INT 0
79960: PPUSH
// end ;
79961: LD_VAR 0 4
79965: RET
// export function SOS_Command ( cmd ) ; begin
79966: LD_INT 0
79968: PPUSH
// end ;
79969: LD_VAR 0 2
79973: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
79974: LD_INT 0
79976: PPUSH
// end ;
79977: LD_VAR 0 6
79981: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
79982: LD_INT 0
79984: PPUSH
79985: PPUSH
79986: PPUSH
79987: PPUSH
// if not vehicle or not factory then
79988: LD_VAR 0 1
79992: NOT
79993: PUSH
79994: LD_VAR 0 2
79998: NOT
79999: OR
80000: IFFALSE 80004
// exit ;
80002: GO 80584
// if not factoryWaypoints then
80004: LD_EXP 105
80008: NOT
80009: IFFALSE 80013
// exit ;
80011: GO 80584
// for i := 1 to Count ( factoryWaypoints ) do
80013: LD_ADDR_VAR 0 4
80017: PUSH
80018: DOUBLE
80019: LD_INT 1
80021: DEC
80022: ST_TO_ADDR
80023: LD_EXP 105
80027: PPUSH
80028: CALL 23056 0 1
80032: PUSH
80033: FOR_TO
80034: IFFALSE 80582
// if factoryWaypoints [ i ] [ 2 ] = factory then
80036: LD_EXP 105
80040: PUSH
80041: LD_VAR 0 4
80045: ARRAY
80046: PUSH
80047: LD_INT 2
80049: ARRAY
80050: PUSH
80051: LD_VAR 0 2
80055: EQUAL
80056: IFFALSE 80580
// begin if GetControl ( vehicle ) = control_manual then
80058: LD_VAR 0 1
80062: PPUSH
80063: CALL_OW 263
80067: PUSH
80068: LD_INT 1
80070: EQUAL
80071: IFFALSE 80433
// begin driver := IsDrivenBy ( vehicle ) ;
80073: LD_ADDR_VAR 0 5
80077: PUSH
80078: LD_VAR 0 1
80082: PPUSH
80083: CALL_OW 311
80087: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
80088: LD_VAR 0 5
80092: PUSH
80093: LD_EXP 106
80097: IN
80098: PUSH
80099: LD_VAR 0 1
80103: PUSH
80104: LD_EXP 106
80108: IN
80109: OR
80110: IFFALSE 80116
// exit ;
80112: POP
80113: POP
80114: GO 80584
// if not HasTask ( driver ) then
80116: LD_VAR 0 5
80120: PPUSH
80121: CALL_OW 314
80125: NOT
80126: IFFALSE 80431
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
80128: LD_ADDR_EXP 106
80132: PUSH
80133: LD_EXP 106
80137: PPUSH
80138: LD_VAR 0 5
80142: PPUSH
80143: CALL 58665 0 2
80147: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
80148: LD_ADDR_EXP 106
80152: PUSH
80153: LD_EXP 106
80157: PPUSH
80158: LD_VAR 0 1
80162: PPUSH
80163: CALL 58665 0 2
80167: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80168: LD_ADDR_VAR 0 6
80172: PUSH
80173: LD_EXP 105
80177: PUSH
80178: LD_VAR 0 4
80182: ARRAY
80183: PUSH
80184: LD_INT 3
80186: ARRAY
80187: PPUSH
80188: LD_EXP 105
80192: PUSH
80193: LD_VAR 0 4
80197: ARRAY
80198: PUSH
80199: LD_INT 4
80201: ARRAY
80202: PPUSH
80203: CALL_OW 428
80207: ST_TO_ADDR
// if hex then
80208: LD_VAR 0 6
80212: IFFALSE 80230
// ComMoveUnit ( driver , hex ) else
80214: LD_VAR 0 5
80218: PPUSH
80219: LD_VAR 0 6
80223: PPUSH
80224: CALL_OW 112
80228: GO 80314
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
80230: LD_VAR 0 1
80234: PPUSH
80235: LD_EXP 105
80239: PUSH
80240: LD_VAR 0 4
80244: ARRAY
80245: PUSH
80246: LD_INT 3
80248: ARRAY
80249: PPUSH
80250: LD_EXP 105
80254: PUSH
80255: LD_VAR 0 4
80259: ARRAY
80260: PUSH
80261: LD_INT 4
80263: ARRAY
80264: PPUSH
80265: CALL_OW 297
80269: PUSH
80270: LD_INT 0
80272: GREATER
80273: IFFALSE 80314
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80275: LD_VAR 0 5
80279: PPUSH
80280: LD_EXP 105
80284: PUSH
80285: LD_VAR 0 4
80289: ARRAY
80290: PUSH
80291: LD_INT 3
80293: ARRAY
80294: PPUSH
80295: LD_EXP 105
80299: PUSH
80300: LD_VAR 0 4
80304: ARRAY
80305: PUSH
80306: LD_INT 4
80308: ARRAY
80309: PPUSH
80310: CALL_OW 111
// AddComExitVehicle ( driver ) ;
80314: LD_VAR 0 5
80318: PPUSH
80319: CALL_OW 181
// if Multiplayer then
80323: LD_OWVAR 4
80327: IFFALSE 80376
// begin repeat wait ( 10 ) ;
80329: LD_INT 10
80331: PPUSH
80332: CALL_OW 67
// until not IsInUnit ( driver ) ;
80336: LD_VAR 0 5
80340: PPUSH
80341: CALL_OW 310
80345: NOT
80346: IFFALSE 80329
// if not HasTask ( driver ) then
80348: LD_VAR 0 5
80352: PPUSH
80353: CALL_OW 314
80357: NOT
80358: IFFALSE 80374
// ComEnterUnit ( driver , factory ) ;
80360: LD_VAR 0 5
80364: PPUSH
80365: LD_VAR 0 2
80369: PPUSH
80370: CALL_OW 120
// end else
80374: GO 80390
// AddComEnterUnit ( driver , factory ) ;
80376: LD_VAR 0 5
80380: PPUSH
80381: LD_VAR 0 2
80385: PPUSH
80386: CALL_OW 180
// wait ( 0 0$1 ) ;
80390: LD_INT 35
80392: PPUSH
80393: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
80397: LD_ADDR_EXP 106
80401: PUSH
80402: LD_EXP 106
80406: PUSH
80407: LD_VAR 0 5
80411: DIFF
80412: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
80413: LD_ADDR_EXP 106
80417: PUSH
80418: LD_EXP 106
80422: PUSH
80423: LD_VAR 0 1
80427: DIFF
80428: ST_TO_ADDR
// break ;
80429: GO 80582
// end ; end else
80431: GO 80580
// if GetControl ( vehicle ) = control_remote then
80433: LD_VAR 0 1
80437: PPUSH
80438: CALL_OW 263
80442: PUSH
80443: LD_INT 2
80445: EQUAL
80446: IFFALSE 80532
// begin wait ( 0 0$2 ) ;
80448: LD_INT 70
80450: PPUSH
80451: CALL_OW 67
// repeat wait ( 10 ) ;
80455: LD_INT 10
80457: PPUSH
80458: CALL_OW 67
// Connect ( vehicle ) ;
80462: LD_VAR 0 1
80466: PPUSH
80467: CALL 29262 0 1
// until IsControledBy ( vehicle ) ;
80471: LD_VAR 0 1
80475: PPUSH
80476: CALL_OW 312
80480: IFFALSE 80455
// wait ( 10 ) ;
80482: LD_INT 10
80484: PPUSH
80485: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80489: LD_VAR 0 1
80493: PPUSH
80494: LD_EXP 105
80498: PUSH
80499: LD_VAR 0 4
80503: ARRAY
80504: PUSH
80505: LD_INT 3
80507: ARRAY
80508: PPUSH
80509: LD_EXP 105
80513: PUSH
80514: LD_VAR 0 4
80518: ARRAY
80519: PUSH
80520: LD_INT 4
80522: ARRAY
80523: PPUSH
80524: CALL_OW 111
// break ;
80528: GO 80582
// end else
80530: GO 80580
// begin wait ( 0 0$3 ) ;
80532: LD_INT 105
80534: PPUSH
80535: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
80539: LD_VAR 0 1
80543: PPUSH
80544: LD_EXP 105
80548: PUSH
80549: LD_VAR 0 4
80553: ARRAY
80554: PUSH
80555: LD_INT 3
80557: ARRAY
80558: PPUSH
80559: LD_EXP 105
80563: PUSH
80564: LD_VAR 0 4
80568: ARRAY
80569: PUSH
80570: LD_INT 4
80572: ARRAY
80573: PPUSH
80574: CALL_OW 111
// break ;
80578: GO 80582
// end ; end ;
80580: GO 80033
80582: POP
80583: POP
// end ;
80584: LD_VAR 0 3
80588: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
80589: LD_INT 0
80591: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
80592: LD_VAR 0 1
80596: PUSH
80597: LD_INT 250
80599: EQUAL
80600: PUSH
80601: LD_VAR 0 2
80605: PPUSH
80606: CALL_OW 264
80610: PUSH
80611: LD_INT 81
80613: EQUAL
80614: AND
80615: IFFALSE 80636
// MinerPlaceMine ( unit , x , y ) ;
80617: LD_VAR 0 2
80621: PPUSH
80622: LD_VAR 0 4
80626: PPUSH
80627: LD_VAR 0 5
80631: PPUSH
80632: CALL 83728 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
80636: LD_VAR 0 1
80640: PUSH
80641: LD_INT 251
80643: EQUAL
80644: PUSH
80645: LD_VAR 0 2
80649: PPUSH
80650: CALL_OW 264
80654: PUSH
80655: LD_INT 81
80657: EQUAL
80658: AND
80659: IFFALSE 80680
// MinerDetonateMine ( unit , x , y ) ;
80661: LD_VAR 0 2
80665: PPUSH
80666: LD_VAR 0 4
80670: PPUSH
80671: LD_VAR 0 5
80675: PPUSH
80676: CALL 84003 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
80680: LD_VAR 0 1
80684: PUSH
80685: LD_INT 252
80687: EQUAL
80688: PUSH
80689: LD_VAR 0 2
80693: PPUSH
80694: CALL_OW 264
80698: PUSH
80699: LD_INT 81
80701: EQUAL
80702: AND
80703: IFFALSE 80724
// MinerCreateMinefield ( unit , x , y ) ;
80705: LD_VAR 0 2
80709: PPUSH
80710: LD_VAR 0 4
80714: PPUSH
80715: LD_VAR 0 5
80719: PPUSH
80720: CALL 84420 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
80724: LD_VAR 0 1
80728: PUSH
80729: LD_INT 253
80731: EQUAL
80732: PUSH
80733: LD_VAR 0 2
80737: PPUSH
80738: CALL_OW 257
80742: PUSH
80743: LD_INT 5
80745: EQUAL
80746: AND
80747: IFFALSE 80768
// ComBinocular ( unit , x , y ) ;
80749: LD_VAR 0 2
80753: PPUSH
80754: LD_VAR 0 4
80758: PPUSH
80759: LD_VAR 0 5
80763: PPUSH
80764: CALL 84789 0 3
// if selectedUnit then
80768: LD_VAR 0 3
80772: IFFALSE 80828
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
80774: LD_VAR 0 1
80778: PUSH
80779: LD_INT 254
80781: EQUAL
80782: PUSH
80783: LD_VAR 0 2
80787: PPUSH
80788: CALL_OW 264
80792: PUSH
80793: LD_INT 99
80795: EQUAL
80796: AND
80797: PUSH
80798: LD_VAR 0 3
80802: PPUSH
80803: CALL_OW 263
80807: PUSH
80808: LD_INT 3
80810: EQUAL
80811: AND
80812: IFFALSE 80828
// HackDestroyVehicle ( unit , selectedUnit ) ;
80814: LD_VAR 0 2
80818: PPUSH
80819: LD_VAR 0 3
80823: PPUSH
80824: CALL 83092 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
80828: LD_VAR 0 1
80832: PUSH
80833: LD_INT 255
80835: EQUAL
80836: PUSH
80837: LD_VAR 0 2
80841: PPUSH
80842: CALL_OW 264
80846: PUSH
80847: LD_INT 14
80849: PUSH
80850: LD_INT 53
80852: PUSH
80853: EMPTY
80854: LIST
80855: LIST
80856: IN
80857: AND
80858: PUSH
80859: LD_VAR 0 4
80863: PPUSH
80864: LD_VAR 0 5
80868: PPUSH
80869: CALL_OW 488
80873: AND
80874: IFFALSE 80898
// CutTreeXYR ( unit , x , y , 12 ) ;
80876: LD_VAR 0 2
80880: PPUSH
80881: LD_VAR 0 4
80885: PPUSH
80886: LD_VAR 0 5
80890: PPUSH
80891: LD_INT 12
80893: PPUSH
80894: CALL 81089 0 4
// if cmd = 256 then
80898: LD_VAR 0 1
80902: PUSH
80903: LD_INT 256
80905: EQUAL
80906: IFFALSE 80927
// SetFactoryWaypoint ( unit , x , y ) ;
80908: LD_VAR 0 2
80912: PPUSH
80913: LD_VAR 0 4
80917: PPUSH
80918: LD_VAR 0 5
80922: PPUSH
80923: CALL 78322 0 3
// if cmd = 257 then
80927: LD_VAR 0 1
80931: PUSH
80932: LD_INT 257
80934: EQUAL
80935: IFFALSE 80956
// SetWarehouseGatheringPoint ( unit , x , y ) ;
80937: LD_VAR 0 2
80941: PPUSH
80942: LD_VAR 0 4
80946: PPUSH
80947: LD_VAR 0 5
80951: PPUSH
80952: CALL 78812 0 3
// if cmd = 258 then
80956: LD_VAR 0 1
80960: PUSH
80961: LD_INT 258
80963: EQUAL
80964: IFFALSE 80988
// BurnTreeXYR ( unit , x , y , 8 ) ;
80966: LD_VAR 0 2
80970: PPUSH
80971: LD_VAR 0 4
80975: PPUSH
80976: LD_VAR 0 5
80980: PPUSH
80981: LD_INT 8
80983: PPUSH
80984: CALL 81483 0 4
// end ;
80988: LD_VAR 0 6
80992: RET
// export function ComRadiation ( un ) ; var eff ; begin
80993: LD_INT 0
80995: PPUSH
80996: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
80997: LD_VAR 0 1
81001: PPUSH
81002: CALL_OW 264
81006: PUSH
81007: LD_INT 91
81009: NONEQUAL
81010: IFFALSE 81014
// exit ;
81012: GO 81084
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
81014: LD_INT 68
81016: PPUSH
81017: LD_VAR 0 1
81021: PPUSH
81022: CALL_OW 255
81026: PPUSH
81027: CALL_OW 321
81031: PUSH
81032: LD_INT 2
81034: EQUAL
81035: IFFALSE 81047
// eff := 50 else
81037: LD_ADDR_VAR 0 3
81041: PUSH
81042: LD_INT 50
81044: ST_TO_ADDR
81045: GO 81055
// eff := 25 ;
81047: LD_ADDR_VAR 0 3
81051: PUSH
81052: LD_INT 25
81054: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
81055: LD_VAR 0 1
81059: PPUSH
81060: CALL_OW 250
81064: PPUSH
81065: LD_VAR 0 1
81069: PPUSH
81070: CALL_OW 251
81074: PPUSH
81075: LD_VAR 0 3
81079: PPUSH
81080: CALL_OW 495
// end ;
81084: LD_VAR 0 2
81088: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
81089: LD_INT 0
81091: PPUSH
81092: PPUSH
81093: PPUSH
81094: PPUSH
81095: PPUSH
81096: PPUSH
81097: PPUSH
81098: PPUSH
81099: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
81100: LD_VAR 0 1
81104: PPUSH
81105: CALL_OW 302
81109: NOT
81110: PUSH
81111: LD_VAR 0 2
81115: PPUSH
81116: LD_VAR 0 3
81120: PPUSH
81121: CALL_OW 488
81125: NOT
81126: OR
81127: PUSH
81128: LD_VAR 0 4
81132: NOT
81133: OR
81134: IFFALSE 81138
// exit ;
81136: GO 81478
// list := [ ] ;
81138: LD_ADDR_VAR 0 13
81142: PUSH
81143: EMPTY
81144: ST_TO_ADDR
// if x - r < 0 then
81145: LD_VAR 0 2
81149: PUSH
81150: LD_VAR 0 4
81154: MINUS
81155: PUSH
81156: LD_INT 0
81158: LESS
81159: IFFALSE 81171
// min_x := 0 else
81161: LD_ADDR_VAR 0 7
81165: PUSH
81166: LD_INT 0
81168: ST_TO_ADDR
81169: GO 81187
// min_x := x - r ;
81171: LD_ADDR_VAR 0 7
81175: PUSH
81176: LD_VAR 0 2
81180: PUSH
81181: LD_VAR 0 4
81185: MINUS
81186: ST_TO_ADDR
// if y - r < 0 then
81187: LD_VAR 0 3
81191: PUSH
81192: LD_VAR 0 4
81196: MINUS
81197: PUSH
81198: LD_INT 0
81200: LESS
81201: IFFALSE 81213
// min_y := 0 else
81203: LD_ADDR_VAR 0 8
81207: PUSH
81208: LD_INT 0
81210: ST_TO_ADDR
81211: GO 81229
// min_y := y - r ;
81213: LD_ADDR_VAR 0 8
81217: PUSH
81218: LD_VAR 0 3
81222: PUSH
81223: LD_VAR 0 4
81227: MINUS
81228: ST_TO_ADDR
// max_x := x + r ;
81229: LD_ADDR_VAR 0 9
81233: PUSH
81234: LD_VAR 0 2
81238: PUSH
81239: LD_VAR 0 4
81243: PLUS
81244: ST_TO_ADDR
// max_y := y + r ;
81245: LD_ADDR_VAR 0 10
81249: PUSH
81250: LD_VAR 0 3
81254: PUSH
81255: LD_VAR 0 4
81259: PLUS
81260: ST_TO_ADDR
// for _x = min_x to max_x do
81261: LD_ADDR_VAR 0 11
81265: PUSH
81266: DOUBLE
81267: LD_VAR 0 7
81271: DEC
81272: ST_TO_ADDR
81273: LD_VAR 0 9
81277: PUSH
81278: FOR_TO
81279: IFFALSE 81396
// for _y = min_y to max_y do
81281: LD_ADDR_VAR 0 12
81285: PUSH
81286: DOUBLE
81287: LD_VAR 0 8
81291: DEC
81292: ST_TO_ADDR
81293: LD_VAR 0 10
81297: PUSH
81298: FOR_TO
81299: IFFALSE 81392
// begin if not ValidHex ( _x , _y ) then
81301: LD_VAR 0 11
81305: PPUSH
81306: LD_VAR 0 12
81310: PPUSH
81311: CALL_OW 488
81315: NOT
81316: IFFALSE 81320
// continue ;
81318: GO 81298
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
81320: LD_VAR 0 11
81324: PPUSH
81325: LD_VAR 0 12
81329: PPUSH
81330: CALL_OW 351
81334: PUSH
81335: LD_VAR 0 11
81339: PPUSH
81340: LD_VAR 0 12
81344: PPUSH
81345: CALL_OW 554
81349: AND
81350: IFFALSE 81390
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81352: LD_ADDR_VAR 0 13
81356: PUSH
81357: LD_VAR 0 13
81361: PPUSH
81362: LD_VAR 0 13
81366: PUSH
81367: LD_INT 1
81369: PLUS
81370: PPUSH
81371: LD_VAR 0 11
81375: PUSH
81376: LD_VAR 0 12
81380: PUSH
81381: EMPTY
81382: LIST
81383: LIST
81384: PPUSH
81385: CALL_OW 2
81389: ST_TO_ADDR
// end ;
81390: GO 81298
81392: POP
81393: POP
81394: GO 81278
81396: POP
81397: POP
// if not list then
81398: LD_VAR 0 13
81402: NOT
81403: IFFALSE 81407
// exit ;
81405: GO 81478
// for i in list do
81407: LD_ADDR_VAR 0 6
81411: PUSH
81412: LD_VAR 0 13
81416: PUSH
81417: FOR_IN
81418: IFFALSE 81476
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
81420: LD_VAR 0 1
81424: PPUSH
81425: LD_STRING M
81427: PUSH
81428: LD_VAR 0 6
81432: PUSH
81433: LD_INT 1
81435: ARRAY
81436: PUSH
81437: LD_VAR 0 6
81441: PUSH
81442: LD_INT 2
81444: ARRAY
81445: PUSH
81446: LD_INT 0
81448: PUSH
81449: LD_INT 0
81451: PUSH
81452: LD_INT 0
81454: PUSH
81455: LD_INT 0
81457: PUSH
81458: EMPTY
81459: LIST
81460: LIST
81461: LIST
81462: LIST
81463: LIST
81464: LIST
81465: LIST
81466: PUSH
81467: EMPTY
81468: LIST
81469: PPUSH
81470: CALL_OW 447
81474: GO 81417
81476: POP
81477: POP
// end ;
81478: LD_VAR 0 5
81482: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
81483: LD_INT 0
81485: PPUSH
81486: PPUSH
81487: PPUSH
81488: PPUSH
81489: PPUSH
81490: PPUSH
81491: PPUSH
81492: PPUSH
81493: PPUSH
81494: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
81495: LD_VAR 0 1
81499: PPUSH
81500: CALL_OW 302
81504: NOT
81505: PUSH
81506: LD_VAR 0 2
81510: PPUSH
81511: LD_VAR 0 3
81515: PPUSH
81516: CALL_OW 488
81520: NOT
81521: OR
81522: PUSH
81523: LD_VAR 0 4
81527: NOT
81528: OR
81529: IFFALSE 81533
// exit ;
81531: GO 82046
// list := [ ] ;
81533: LD_ADDR_VAR 0 13
81537: PUSH
81538: EMPTY
81539: ST_TO_ADDR
// if x - r < 0 then
81540: LD_VAR 0 2
81544: PUSH
81545: LD_VAR 0 4
81549: MINUS
81550: PUSH
81551: LD_INT 0
81553: LESS
81554: IFFALSE 81566
// min_x := 0 else
81556: LD_ADDR_VAR 0 7
81560: PUSH
81561: LD_INT 0
81563: ST_TO_ADDR
81564: GO 81582
// min_x := x - r ;
81566: LD_ADDR_VAR 0 7
81570: PUSH
81571: LD_VAR 0 2
81575: PUSH
81576: LD_VAR 0 4
81580: MINUS
81581: ST_TO_ADDR
// if y - r < 0 then
81582: LD_VAR 0 3
81586: PUSH
81587: LD_VAR 0 4
81591: MINUS
81592: PUSH
81593: LD_INT 0
81595: LESS
81596: IFFALSE 81608
// min_y := 0 else
81598: LD_ADDR_VAR 0 8
81602: PUSH
81603: LD_INT 0
81605: ST_TO_ADDR
81606: GO 81624
// min_y := y - r ;
81608: LD_ADDR_VAR 0 8
81612: PUSH
81613: LD_VAR 0 3
81617: PUSH
81618: LD_VAR 0 4
81622: MINUS
81623: ST_TO_ADDR
// max_x := x + r ;
81624: LD_ADDR_VAR 0 9
81628: PUSH
81629: LD_VAR 0 2
81633: PUSH
81634: LD_VAR 0 4
81638: PLUS
81639: ST_TO_ADDR
// max_y := y + r ;
81640: LD_ADDR_VAR 0 10
81644: PUSH
81645: LD_VAR 0 3
81649: PUSH
81650: LD_VAR 0 4
81654: PLUS
81655: ST_TO_ADDR
// for _x = min_x to max_x do
81656: LD_ADDR_VAR 0 11
81660: PUSH
81661: DOUBLE
81662: LD_VAR 0 7
81666: DEC
81667: ST_TO_ADDR
81668: LD_VAR 0 9
81672: PUSH
81673: FOR_TO
81674: IFFALSE 81791
// for _y = min_y to max_y do
81676: LD_ADDR_VAR 0 12
81680: PUSH
81681: DOUBLE
81682: LD_VAR 0 8
81686: DEC
81687: ST_TO_ADDR
81688: LD_VAR 0 10
81692: PUSH
81693: FOR_TO
81694: IFFALSE 81787
// begin if not ValidHex ( _x , _y ) then
81696: LD_VAR 0 11
81700: PPUSH
81701: LD_VAR 0 12
81705: PPUSH
81706: CALL_OW 488
81710: NOT
81711: IFFALSE 81715
// continue ;
81713: GO 81693
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
81715: LD_VAR 0 11
81719: PPUSH
81720: LD_VAR 0 12
81724: PPUSH
81725: CALL_OW 351
81729: PUSH
81730: LD_VAR 0 11
81734: PPUSH
81735: LD_VAR 0 12
81739: PPUSH
81740: CALL_OW 554
81744: AND
81745: IFFALSE 81785
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
81747: LD_ADDR_VAR 0 13
81751: PUSH
81752: LD_VAR 0 13
81756: PPUSH
81757: LD_VAR 0 13
81761: PUSH
81762: LD_INT 1
81764: PLUS
81765: PPUSH
81766: LD_VAR 0 11
81770: PUSH
81771: LD_VAR 0 12
81775: PUSH
81776: EMPTY
81777: LIST
81778: LIST
81779: PPUSH
81780: CALL_OW 2
81784: ST_TO_ADDR
// end ;
81785: GO 81693
81787: POP
81788: POP
81789: GO 81673
81791: POP
81792: POP
// if not list then
81793: LD_VAR 0 13
81797: NOT
81798: IFFALSE 81802
// exit ;
81800: GO 82046
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
81802: LD_ADDR_VAR 0 13
81806: PUSH
81807: LD_VAR 0 1
81811: PPUSH
81812: LD_VAR 0 13
81816: PPUSH
81817: LD_INT 1
81819: PPUSH
81820: LD_INT 1
81822: PPUSH
81823: CALL 26404 0 4
81827: ST_TO_ADDR
// ComStop ( flame ) ;
81828: LD_VAR 0 1
81832: PPUSH
81833: CALL_OW 141
// for i in list do
81837: LD_ADDR_VAR 0 6
81841: PUSH
81842: LD_VAR 0 13
81846: PUSH
81847: FOR_IN
81848: IFFALSE 81879
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
81850: LD_VAR 0 1
81854: PPUSH
81855: LD_VAR 0 6
81859: PUSH
81860: LD_INT 1
81862: ARRAY
81863: PPUSH
81864: LD_VAR 0 6
81868: PUSH
81869: LD_INT 2
81871: ARRAY
81872: PPUSH
81873: CALL_OW 176
81877: GO 81847
81879: POP
81880: POP
// repeat wait ( 0 0$1 ) ;
81881: LD_INT 35
81883: PPUSH
81884: CALL_OW 67
// task := GetTaskList ( flame ) ;
81888: LD_ADDR_VAR 0 14
81892: PUSH
81893: LD_VAR 0 1
81897: PPUSH
81898: CALL_OW 437
81902: ST_TO_ADDR
// if not task then
81903: LD_VAR 0 14
81907: NOT
81908: IFFALSE 81912
// exit ;
81910: GO 82046
// if task [ 1 ] [ 1 ] <> | then
81912: LD_VAR 0 14
81916: PUSH
81917: LD_INT 1
81919: ARRAY
81920: PUSH
81921: LD_INT 1
81923: ARRAY
81924: PUSH
81925: LD_STRING |
81927: NONEQUAL
81928: IFFALSE 81932
// exit ;
81930: GO 82046
// _x := task [ 1 ] [ 2 ] ;
81932: LD_ADDR_VAR 0 11
81936: PUSH
81937: LD_VAR 0 14
81941: PUSH
81942: LD_INT 1
81944: ARRAY
81945: PUSH
81946: LD_INT 2
81948: ARRAY
81949: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
81950: LD_ADDR_VAR 0 12
81954: PUSH
81955: LD_VAR 0 14
81959: PUSH
81960: LD_INT 1
81962: ARRAY
81963: PUSH
81964: LD_INT 3
81966: ARRAY
81967: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
81968: LD_VAR 0 11
81972: PPUSH
81973: LD_VAR 0 12
81977: PPUSH
81978: CALL_OW 351
81982: NOT
81983: PUSH
81984: LD_VAR 0 11
81988: PPUSH
81989: LD_VAR 0 12
81993: PPUSH
81994: CALL_OW 554
81998: NOT
81999: OR
82000: IFFALSE 82034
// begin task := Delete ( task , 1 ) ;
82002: LD_ADDR_VAR 0 14
82006: PUSH
82007: LD_VAR 0 14
82011: PPUSH
82012: LD_INT 1
82014: PPUSH
82015: CALL_OW 3
82019: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
82020: LD_VAR 0 1
82024: PPUSH
82025: LD_VAR 0 14
82029: PPUSH
82030: CALL_OW 446
// end ; until not HasTask ( flame ) ;
82034: LD_VAR 0 1
82038: PPUSH
82039: CALL_OW 314
82043: NOT
82044: IFFALSE 81881
// end ;
82046: LD_VAR 0 5
82050: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
82051: LD_EXP 109
82055: NOT
82056: IFFALSE 82106
82058: GO 82060
82060: DISABLE
// begin initHack := true ;
82061: LD_ADDR_EXP 109
82065: PUSH
82066: LD_INT 1
82068: ST_TO_ADDR
// hackTanks := [ ] ;
82069: LD_ADDR_EXP 110
82073: PUSH
82074: EMPTY
82075: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
82076: LD_ADDR_EXP 111
82080: PUSH
82081: EMPTY
82082: ST_TO_ADDR
// hackLimit := 3 ;
82083: LD_ADDR_EXP 112
82087: PUSH
82088: LD_INT 3
82090: ST_TO_ADDR
// hackDist := 12 ;
82091: LD_ADDR_EXP 113
82095: PUSH
82096: LD_INT 12
82098: ST_TO_ADDR
// hackCounter := [ ] ;
82099: LD_ADDR_EXP 114
82103: PUSH
82104: EMPTY
82105: ST_TO_ADDR
// end ;
82106: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
82107: LD_EXP 109
82111: PUSH
82112: LD_INT 34
82114: PUSH
82115: LD_INT 99
82117: PUSH
82118: EMPTY
82119: LIST
82120: LIST
82121: PPUSH
82122: CALL_OW 69
82126: AND
82127: IFFALSE 82380
82129: GO 82131
82131: DISABLE
82132: LD_INT 0
82134: PPUSH
82135: PPUSH
// begin enable ;
82136: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
82137: LD_ADDR_VAR 0 1
82141: PUSH
82142: LD_INT 34
82144: PUSH
82145: LD_INT 99
82147: PUSH
82148: EMPTY
82149: LIST
82150: LIST
82151: PPUSH
82152: CALL_OW 69
82156: PUSH
82157: FOR_IN
82158: IFFALSE 82378
// begin if not i in hackTanks then
82160: LD_VAR 0 1
82164: PUSH
82165: LD_EXP 110
82169: IN
82170: NOT
82171: IFFALSE 82254
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
82173: LD_ADDR_EXP 110
82177: PUSH
82178: LD_EXP 110
82182: PPUSH
82183: LD_EXP 110
82187: PUSH
82188: LD_INT 1
82190: PLUS
82191: PPUSH
82192: LD_VAR 0 1
82196: PPUSH
82197: CALL_OW 1
82201: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
82202: LD_ADDR_EXP 111
82206: PUSH
82207: LD_EXP 111
82211: PPUSH
82212: LD_EXP 111
82216: PUSH
82217: LD_INT 1
82219: PLUS
82220: PPUSH
82221: EMPTY
82222: PPUSH
82223: CALL_OW 1
82227: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
82228: LD_ADDR_EXP 114
82232: PUSH
82233: LD_EXP 114
82237: PPUSH
82238: LD_EXP 114
82242: PUSH
82243: LD_INT 1
82245: PLUS
82246: PPUSH
82247: EMPTY
82248: PPUSH
82249: CALL_OW 1
82253: ST_TO_ADDR
// end ; if not IsOk ( i ) then
82254: LD_VAR 0 1
82258: PPUSH
82259: CALL_OW 302
82263: NOT
82264: IFFALSE 82277
// begin HackUnlinkAll ( i ) ;
82266: LD_VAR 0 1
82270: PPUSH
82271: CALL 82383 0 1
// continue ;
82275: GO 82157
// end ; HackCheckCapturedStatus ( i ) ;
82277: LD_VAR 0 1
82281: PPUSH
82282: CALL 82826 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
82286: LD_ADDR_VAR 0 2
82290: PUSH
82291: LD_INT 81
82293: PUSH
82294: LD_VAR 0 1
82298: PPUSH
82299: CALL_OW 255
82303: PUSH
82304: EMPTY
82305: LIST
82306: LIST
82307: PUSH
82308: LD_INT 33
82310: PUSH
82311: LD_INT 3
82313: PUSH
82314: EMPTY
82315: LIST
82316: LIST
82317: PUSH
82318: LD_INT 91
82320: PUSH
82321: LD_VAR 0 1
82325: PUSH
82326: LD_EXP 113
82330: PUSH
82331: EMPTY
82332: LIST
82333: LIST
82334: LIST
82335: PUSH
82336: LD_INT 50
82338: PUSH
82339: EMPTY
82340: LIST
82341: PUSH
82342: EMPTY
82343: LIST
82344: LIST
82345: LIST
82346: LIST
82347: PPUSH
82348: CALL_OW 69
82352: ST_TO_ADDR
// if not tmp then
82353: LD_VAR 0 2
82357: NOT
82358: IFFALSE 82362
// continue ;
82360: GO 82157
// HackLink ( i , tmp ) ;
82362: LD_VAR 0 1
82366: PPUSH
82367: LD_VAR 0 2
82371: PPUSH
82372: CALL 82519 0 2
// end ;
82376: GO 82157
82378: POP
82379: POP
// end ;
82380: PPOPN 2
82382: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
82383: LD_INT 0
82385: PPUSH
82386: PPUSH
82387: PPUSH
// if not hack in hackTanks then
82388: LD_VAR 0 1
82392: PUSH
82393: LD_EXP 110
82397: IN
82398: NOT
82399: IFFALSE 82403
// exit ;
82401: GO 82514
// index := GetElementIndex ( hackTanks , hack ) ;
82403: LD_ADDR_VAR 0 4
82407: PUSH
82408: LD_EXP 110
82412: PPUSH
82413: LD_VAR 0 1
82417: PPUSH
82418: CALL 25701 0 2
82422: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
82423: LD_EXP 111
82427: PUSH
82428: LD_VAR 0 4
82432: ARRAY
82433: IFFALSE 82514
// begin for i in hackTanksCaptured [ index ] do
82435: LD_ADDR_VAR 0 3
82439: PUSH
82440: LD_EXP 111
82444: PUSH
82445: LD_VAR 0 4
82449: ARRAY
82450: PUSH
82451: FOR_IN
82452: IFFALSE 82478
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
82454: LD_VAR 0 3
82458: PUSH
82459: LD_INT 1
82461: ARRAY
82462: PPUSH
82463: LD_VAR 0 3
82467: PUSH
82468: LD_INT 2
82470: ARRAY
82471: PPUSH
82472: CALL_OW 235
82476: GO 82451
82478: POP
82479: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
82480: LD_ADDR_EXP 111
82484: PUSH
82485: LD_EXP 111
82489: PPUSH
82490: LD_VAR 0 4
82494: PPUSH
82495: EMPTY
82496: PPUSH
82497: CALL_OW 1
82501: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
82502: LD_VAR 0 1
82506: PPUSH
82507: LD_INT 0
82509: PPUSH
82510: CALL_OW 505
// end ; end ;
82514: LD_VAR 0 2
82518: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
82519: LD_INT 0
82521: PPUSH
82522: PPUSH
82523: PPUSH
// if not hack in hackTanks or not vehicles then
82524: LD_VAR 0 1
82528: PUSH
82529: LD_EXP 110
82533: IN
82534: NOT
82535: PUSH
82536: LD_VAR 0 2
82540: NOT
82541: OR
82542: IFFALSE 82546
// exit ;
82544: GO 82821
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
82546: LD_ADDR_VAR 0 2
82550: PUSH
82551: LD_VAR 0 1
82555: PPUSH
82556: LD_VAR 0 2
82560: PPUSH
82561: LD_INT 1
82563: PPUSH
82564: LD_INT 1
82566: PPUSH
82567: CALL 26351 0 4
82571: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
82572: LD_ADDR_VAR 0 5
82576: PUSH
82577: LD_EXP 110
82581: PPUSH
82582: LD_VAR 0 1
82586: PPUSH
82587: CALL 25701 0 2
82591: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
82592: LD_EXP 111
82596: PUSH
82597: LD_VAR 0 5
82601: ARRAY
82602: PUSH
82603: LD_EXP 112
82607: LESS
82608: IFFALSE 82797
// begin for i := 1 to vehicles do
82610: LD_ADDR_VAR 0 4
82614: PUSH
82615: DOUBLE
82616: LD_INT 1
82618: DEC
82619: ST_TO_ADDR
82620: LD_VAR 0 2
82624: PUSH
82625: FOR_TO
82626: IFFALSE 82795
// begin if hackTanksCaptured [ index ] = hackLimit then
82628: LD_EXP 111
82632: PUSH
82633: LD_VAR 0 5
82637: ARRAY
82638: PUSH
82639: LD_EXP 112
82643: EQUAL
82644: IFFALSE 82648
// break ;
82646: GO 82795
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
82648: LD_ADDR_EXP 114
82652: PUSH
82653: LD_EXP 114
82657: PPUSH
82658: LD_VAR 0 5
82662: PPUSH
82663: LD_EXP 114
82667: PUSH
82668: LD_VAR 0 5
82672: ARRAY
82673: PUSH
82674: LD_INT 1
82676: PLUS
82677: PPUSH
82678: CALL_OW 1
82682: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
82683: LD_ADDR_EXP 111
82687: PUSH
82688: LD_EXP 111
82692: PPUSH
82693: LD_VAR 0 5
82697: PUSH
82698: LD_EXP 111
82702: PUSH
82703: LD_VAR 0 5
82707: ARRAY
82708: PUSH
82709: LD_INT 1
82711: PLUS
82712: PUSH
82713: EMPTY
82714: LIST
82715: LIST
82716: PPUSH
82717: LD_VAR 0 2
82721: PUSH
82722: LD_VAR 0 4
82726: ARRAY
82727: PUSH
82728: LD_VAR 0 2
82732: PUSH
82733: LD_VAR 0 4
82737: ARRAY
82738: PPUSH
82739: CALL_OW 255
82743: PUSH
82744: EMPTY
82745: LIST
82746: LIST
82747: PPUSH
82748: CALL 25916 0 3
82752: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
82753: LD_VAR 0 2
82757: PUSH
82758: LD_VAR 0 4
82762: ARRAY
82763: PPUSH
82764: LD_VAR 0 1
82768: PPUSH
82769: CALL_OW 255
82773: PPUSH
82774: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
82778: LD_VAR 0 2
82782: PUSH
82783: LD_VAR 0 4
82787: ARRAY
82788: PPUSH
82789: CALL_OW 141
// end ;
82793: GO 82625
82795: POP
82796: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
82797: LD_VAR 0 1
82801: PPUSH
82802: LD_EXP 111
82806: PUSH
82807: LD_VAR 0 5
82811: ARRAY
82812: PUSH
82813: LD_INT 0
82815: PLUS
82816: PPUSH
82817: CALL_OW 505
// end ;
82821: LD_VAR 0 3
82825: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
82826: LD_INT 0
82828: PPUSH
82829: PPUSH
82830: PPUSH
82831: PPUSH
// if not hack in hackTanks then
82832: LD_VAR 0 1
82836: PUSH
82837: LD_EXP 110
82841: IN
82842: NOT
82843: IFFALSE 82847
// exit ;
82845: GO 83087
// index := GetElementIndex ( hackTanks , hack ) ;
82847: LD_ADDR_VAR 0 4
82851: PUSH
82852: LD_EXP 110
82856: PPUSH
82857: LD_VAR 0 1
82861: PPUSH
82862: CALL 25701 0 2
82866: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
82867: LD_ADDR_VAR 0 3
82871: PUSH
82872: DOUBLE
82873: LD_EXP 111
82877: PUSH
82878: LD_VAR 0 4
82882: ARRAY
82883: INC
82884: ST_TO_ADDR
82885: LD_INT 1
82887: PUSH
82888: FOR_DOWNTO
82889: IFFALSE 83061
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
82891: LD_ADDR_VAR 0 5
82895: PUSH
82896: LD_EXP 111
82900: PUSH
82901: LD_VAR 0 4
82905: ARRAY
82906: PUSH
82907: LD_VAR 0 3
82911: ARRAY
82912: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
82913: LD_VAR 0 5
82917: PUSH
82918: LD_INT 1
82920: ARRAY
82921: PPUSH
82922: CALL_OW 302
82926: NOT
82927: PUSH
82928: LD_VAR 0 5
82932: PUSH
82933: LD_INT 1
82935: ARRAY
82936: PPUSH
82937: CALL_OW 255
82941: PUSH
82942: LD_VAR 0 1
82946: PPUSH
82947: CALL_OW 255
82951: NONEQUAL
82952: OR
82953: IFFALSE 83059
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
82955: LD_VAR 0 5
82959: PUSH
82960: LD_INT 1
82962: ARRAY
82963: PPUSH
82964: CALL_OW 305
82968: PUSH
82969: LD_VAR 0 5
82973: PUSH
82974: LD_INT 1
82976: ARRAY
82977: PPUSH
82978: CALL_OW 255
82982: PUSH
82983: LD_VAR 0 1
82987: PPUSH
82988: CALL_OW 255
82992: EQUAL
82993: AND
82994: IFFALSE 83018
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
82996: LD_VAR 0 5
83000: PUSH
83001: LD_INT 1
83003: ARRAY
83004: PPUSH
83005: LD_VAR 0 5
83009: PUSH
83010: LD_INT 2
83012: ARRAY
83013: PPUSH
83014: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
83018: LD_ADDR_EXP 111
83022: PUSH
83023: LD_EXP 111
83027: PPUSH
83028: LD_VAR 0 4
83032: PPUSH
83033: LD_EXP 111
83037: PUSH
83038: LD_VAR 0 4
83042: ARRAY
83043: PPUSH
83044: LD_VAR 0 3
83048: PPUSH
83049: CALL_OW 3
83053: PPUSH
83054: CALL_OW 1
83058: ST_TO_ADDR
// end ; end ;
83059: GO 82888
83061: POP
83062: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
83063: LD_VAR 0 1
83067: PPUSH
83068: LD_EXP 111
83072: PUSH
83073: LD_VAR 0 4
83077: ARRAY
83078: PUSH
83079: LD_INT 0
83081: PLUS
83082: PPUSH
83083: CALL_OW 505
// end ;
83087: LD_VAR 0 2
83091: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
83092: LD_INT 0
83094: PPUSH
83095: PPUSH
83096: PPUSH
83097: PPUSH
// if not hack in hackTanks then
83098: LD_VAR 0 1
83102: PUSH
83103: LD_EXP 110
83107: IN
83108: NOT
83109: IFFALSE 83113
// exit ;
83111: GO 83198
// index := GetElementIndex ( hackTanks , hack ) ;
83113: LD_ADDR_VAR 0 5
83117: PUSH
83118: LD_EXP 110
83122: PPUSH
83123: LD_VAR 0 1
83127: PPUSH
83128: CALL 25701 0 2
83132: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
83133: LD_ADDR_VAR 0 4
83137: PUSH
83138: DOUBLE
83139: LD_INT 1
83141: DEC
83142: ST_TO_ADDR
83143: LD_EXP 111
83147: PUSH
83148: LD_VAR 0 5
83152: ARRAY
83153: PUSH
83154: FOR_TO
83155: IFFALSE 83196
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
83157: LD_EXP 111
83161: PUSH
83162: LD_VAR 0 5
83166: ARRAY
83167: PUSH
83168: LD_VAR 0 4
83172: ARRAY
83173: PUSH
83174: LD_INT 1
83176: ARRAY
83177: PUSH
83178: LD_VAR 0 2
83182: EQUAL
83183: IFFALSE 83194
// KillUnit ( vehicle ) ;
83185: LD_VAR 0 2
83189: PPUSH
83190: CALL_OW 66
83194: GO 83154
83196: POP
83197: POP
// end ;
83198: LD_VAR 0 3
83202: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
83203: LD_EXP 115
83207: NOT
83208: IFFALSE 83243
83210: GO 83212
83212: DISABLE
// begin initMiner := true ;
83213: LD_ADDR_EXP 115
83217: PUSH
83218: LD_INT 1
83220: ST_TO_ADDR
// minersList := [ ] ;
83221: LD_ADDR_EXP 116
83225: PUSH
83226: EMPTY
83227: ST_TO_ADDR
// minerMinesList := [ ] ;
83228: LD_ADDR_EXP 117
83232: PUSH
83233: EMPTY
83234: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
83235: LD_ADDR_EXP 118
83239: PUSH
83240: LD_INT 5
83242: ST_TO_ADDR
// end ;
83243: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
83244: LD_EXP 115
83248: PUSH
83249: LD_INT 34
83251: PUSH
83252: LD_INT 81
83254: PUSH
83255: EMPTY
83256: LIST
83257: LIST
83258: PPUSH
83259: CALL_OW 69
83263: AND
83264: IFFALSE 83725
83266: GO 83268
83268: DISABLE
83269: LD_INT 0
83271: PPUSH
83272: PPUSH
83273: PPUSH
83274: PPUSH
// begin enable ;
83275: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
83276: LD_ADDR_VAR 0 1
83280: PUSH
83281: LD_INT 34
83283: PUSH
83284: LD_INT 81
83286: PUSH
83287: EMPTY
83288: LIST
83289: LIST
83290: PPUSH
83291: CALL_OW 69
83295: PUSH
83296: FOR_IN
83297: IFFALSE 83369
// begin if not i in minersList then
83299: LD_VAR 0 1
83303: PUSH
83304: LD_EXP 116
83308: IN
83309: NOT
83310: IFFALSE 83367
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
83312: LD_ADDR_EXP 116
83316: PUSH
83317: LD_EXP 116
83321: PPUSH
83322: LD_EXP 116
83326: PUSH
83327: LD_INT 1
83329: PLUS
83330: PPUSH
83331: LD_VAR 0 1
83335: PPUSH
83336: CALL_OW 1
83340: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
83341: LD_ADDR_EXP 117
83345: PUSH
83346: LD_EXP 117
83350: PPUSH
83351: LD_EXP 117
83355: PUSH
83356: LD_INT 1
83358: PLUS
83359: PPUSH
83360: EMPTY
83361: PPUSH
83362: CALL_OW 1
83366: ST_TO_ADDR
// end end ;
83367: GO 83296
83369: POP
83370: POP
// for i := minerMinesList downto 1 do
83371: LD_ADDR_VAR 0 1
83375: PUSH
83376: DOUBLE
83377: LD_EXP 117
83381: INC
83382: ST_TO_ADDR
83383: LD_INT 1
83385: PUSH
83386: FOR_DOWNTO
83387: IFFALSE 83723
// begin if IsLive ( minersList [ i ] ) then
83389: LD_EXP 116
83393: PUSH
83394: LD_VAR 0 1
83398: ARRAY
83399: PPUSH
83400: CALL_OW 300
83404: IFFALSE 83432
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
83406: LD_EXP 116
83410: PUSH
83411: LD_VAR 0 1
83415: ARRAY
83416: PPUSH
83417: LD_EXP 117
83421: PUSH
83422: LD_VAR 0 1
83426: ARRAY
83427: PPUSH
83428: CALL_OW 505
// if not minerMinesList [ i ] then
83432: LD_EXP 117
83436: PUSH
83437: LD_VAR 0 1
83441: ARRAY
83442: NOT
83443: IFFALSE 83447
// continue ;
83445: GO 83386
// for j := minerMinesList [ i ] downto 1 do
83447: LD_ADDR_VAR 0 2
83451: PUSH
83452: DOUBLE
83453: LD_EXP 117
83457: PUSH
83458: LD_VAR 0 1
83462: ARRAY
83463: INC
83464: ST_TO_ADDR
83465: LD_INT 1
83467: PUSH
83468: FOR_DOWNTO
83469: IFFALSE 83719
// begin side := GetSide ( minersList [ i ] ) ;
83471: LD_ADDR_VAR 0 3
83475: PUSH
83476: LD_EXP 116
83480: PUSH
83481: LD_VAR 0 1
83485: ARRAY
83486: PPUSH
83487: CALL_OW 255
83491: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
83492: LD_ADDR_VAR 0 4
83496: PUSH
83497: LD_EXP 117
83501: PUSH
83502: LD_VAR 0 1
83506: ARRAY
83507: PUSH
83508: LD_VAR 0 2
83512: ARRAY
83513: PUSH
83514: LD_INT 1
83516: ARRAY
83517: PPUSH
83518: LD_EXP 117
83522: PUSH
83523: LD_VAR 0 1
83527: ARRAY
83528: PUSH
83529: LD_VAR 0 2
83533: ARRAY
83534: PUSH
83535: LD_INT 2
83537: ARRAY
83538: PPUSH
83539: CALL_OW 428
83543: ST_TO_ADDR
// if not tmp then
83544: LD_VAR 0 4
83548: NOT
83549: IFFALSE 83553
// continue ;
83551: GO 83468
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
83553: LD_VAR 0 4
83557: PUSH
83558: LD_INT 81
83560: PUSH
83561: LD_VAR 0 3
83565: PUSH
83566: EMPTY
83567: LIST
83568: LIST
83569: PPUSH
83570: CALL_OW 69
83574: IN
83575: PUSH
83576: LD_EXP 117
83580: PUSH
83581: LD_VAR 0 1
83585: ARRAY
83586: PUSH
83587: LD_VAR 0 2
83591: ARRAY
83592: PUSH
83593: LD_INT 1
83595: ARRAY
83596: PPUSH
83597: LD_EXP 117
83601: PUSH
83602: LD_VAR 0 1
83606: ARRAY
83607: PUSH
83608: LD_VAR 0 2
83612: ARRAY
83613: PUSH
83614: LD_INT 2
83616: ARRAY
83617: PPUSH
83618: CALL_OW 458
83622: AND
83623: IFFALSE 83717
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
83625: LD_EXP 117
83629: PUSH
83630: LD_VAR 0 1
83634: ARRAY
83635: PUSH
83636: LD_VAR 0 2
83640: ARRAY
83641: PUSH
83642: LD_INT 1
83644: ARRAY
83645: PPUSH
83646: LD_EXP 117
83650: PUSH
83651: LD_VAR 0 1
83655: ARRAY
83656: PUSH
83657: LD_VAR 0 2
83661: ARRAY
83662: PUSH
83663: LD_INT 2
83665: ARRAY
83666: PPUSH
83667: LD_VAR 0 3
83671: PPUSH
83672: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
83676: LD_ADDR_EXP 117
83680: PUSH
83681: LD_EXP 117
83685: PPUSH
83686: LD_VAR 0 1
83690: PPUSH
83691: LD_EXP 117
83695: PUSH
83696: LD_VAR 0 1
83700: ARRAY
83701: PPUSH
83702: LD_VAR 0 2
83706: PPUSH
83707: CALL_OW 3
83711: PPUSH
83712: CALL_OW 1
83716: ST_TO_ADDR
// end ; end ;
83717: GO 83468
83719: POP
83720: POP
// end ;
83721: GO 83386
83723: POP
83724: POP
// end ;
83725: PPOPN 4
83727: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
83728: LD_INT 0
83730: PPUSH
83731: PPUSH
// result := false ;
83732: LD_ADDR_VAR 0 4
83736: PUSH
83737: LD_INT 0
83739: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
83740: LD_VAR 0 1
83744: PPUSH
83745: CALL_OW 264
83749: PUSH
83750: LD_INT 81
83752: EQUAL
83753: NOT
83754: IFFALSE 83758
// exit ;
83756: GO 83998
// index := GetElementIndex ( minersList , unit ) ;
83758: LD_ADDR_VAR 0 5
83762: PUSH
83763: LD_EXP 116
83767: PPUSH
83768: LD_VAR 0 1
83772: PPUSH
83773: CALL 25701 0 2
83777: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
83778: LD_EXP 117
83782: PUSH
83783: LD_VAR 0 5
83787: ARRAY
83788: PUSH
83789: LD_EXP 118
83793: GREATEREQUAL
83794: IFFALSE 83798
// exit ;
83796: GO 83998
// ComMoveXY ( unit , x , y ) ;
83798: LD_VAR 0 1
83802: PPUSH
83803: LD_VAR 0 2
83807: PPUSH
83808: LD_VAR 0 3
83812: PPUSH
83813: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
83817: LD_INT 35
83819: PPUSH
83820: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
83824: LD_VAR 0 1
83828: PPUSH
83829: LD_VAR 0 2
83833: PPUSH
83834: LD_VAR 0 3
83838: PPUSH
83839: CALL 57462 0 3
83843: NOT
83844: PUSH
83845: LD_VAR 0 1
83849: PPUSH
83850: CALL_OW 314
83854: AND
83855: IFFALSE 83859
// exit ;
83857: GO 83998
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
83859: LD_VAR 0 2
83863: PPUSH
83864: LD_VAR 0 3
83868: PPUSH
83869: CALL_OW 428
83873: PUSH
83874: LD_VAR 0 1
83878: EQUAL
83879: PUSH
83880: LD_VAR 0 1
83884: PPUSH
83885: CALL_OW 314
83889: NOT
83890: AND
83891: IFFALSE 83817
// PlaySoundXY ( x , y , PlantMine ) ;
83893: LD_VAR 0 2
83897: PPUSH
83898: LD_VAR 0 3
83902: PPUSH
83903: LD_STRING PlantMine
83905: PPUSH
83906: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
83910: LD_VAR 0 2
83914: PPUSH
83915: LD_VAR 0 3
83919: PPUSH
83920: LD_VAR 0 1
83924: PPUSH
83925: CALL_OW 255
83929: PPUSH
83930: LD_INT 0
83932: PPUSH
83933: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
83937: LD_ADDR_EXP 117
83941: PUSH
83942: LD_EXP 117
83946: PPUSH
83947: LD_VAR 0 5
83951: PUSH
83952: LD_EXP 117
83956: PUSH
83957: LD_VAR 0 5
83961: ARRAY
83962: PUSH
83963: LD_INT 1
83965: PLUS
83966: PUSH
83967: EMPTY
83968: LIST
83969: LIST
83970: PPUSH
83971: LD_VAR 0 2
83975: PUSH
83976: LD_VAR 0 3
83980: PUSH
83981: EMPTY
83982: LIST
83983: LIST
83984: PPUSH
83985: CALL 25916 0 3
83989: ST_TO_ADDR
// result := true ;
83990: LD_ADDR_VAR 0 4
83994: PUSH
83995: LD_INT 1
83997: ST_TO_ADDR
// end ;
83998: LD_VAR 0 4
84002: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
84003: LD_INT 0
84005: PPUSH
84006: PPUSH
84007: PPUSH
// if not unit in minersList then
84008: LD_VAR 0 1
84012: PUSH
84013: LD_EXP 116
84017: IN
84018: NOT
84019: IFFALSE 84023
// exit ;
84021: GO 84415
// index := GetElementIndex ( minersList , unit ) ;
84023: LD_ADDR_VAR 0 6
84027: PUSH
84028: LD_EXP 116
84032: PPUSH
84033: LD_VAR 0 1
84037: PPUSH
84038: CALL 25701 0 2
84042: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
84043: LD_ADDR_VAR 0 5
84047: PUSH
84048: DOUBLE
84049: LD_EXP 117
84053: PUSH
84054: LD_VAR 0 6
84058: ARRAY
84059: INC
84060: ST_TO_ADDR
84061: LD_INT 1
84063: PUSH
84064: FOR_DOWNTO
84065: IFFALSE 84226
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
84067: LD_EXP 117
84071: PUSH
84072: LD_VAR 0 6
84076: ARRAY
84077: PUSH
84078: LD_VAR 0 5
84082: ARRAY
84083: PUSH
84084: LD_INT 1
84086: ARRAY
84087: PUSH
84088: LD_VAR 0 2
84092: EQUAL
84093: PUSH
84094: LD_EXP 117
84098: PUSH
84099: LD_VAR 0 6
84103: ARRAY
84104: PUSH
84105: LD_VAR 0 5
84109: ARRAY
84110: PUSH
84111: LD_INT 2
84113: ARRAY
84114: PUSH
84115: LD_VAR 0 3
84119: EQUAL
84120: AND
84121: IFFALSE 84224
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84123: LD_EXP 117
84127: PUSH
84128: LD_VAR 0 6
84132: ARRAY
84133: PUSH
84134: LD_VAR 0 5
84138: ARRAY
84139: PUSH
84140: LD_INT 1
84142: ARRAY
84143: PPUSH
84144: LD_EXP 117
84148: PUSH
84149: LD_VAR 0 6
84153: ARRAY
84154: PUSH
84155: LD_VAR 0 5
84159: ARRAY
84160: PUSH
84161: LD_INT 2
84163: ARRAY
84164: PPUSH
84165: LD_VAR 0 1
84169: PPUSH
84170: CALL_OW 255
84174: PPUSH
84175: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84179: LD_ADDR_EXP 117
84183: PUSH
84184: LD_EXP 117
84188: PPUSH
84189: LD_VAR 0 6
84193: PPUSH
84194: LD_EXP 117
84198: PUSH
84199: LD_VAR 0 6
84203: ARRAY
84204: PPUSH
84205: LD_VAR 0 5
84209: PPUSH
84210: CALL_OW 3
84214: PPUSH
84215: CALL_OW 1
84219: ST_TO_ADDR
// exit ;
84220: POP
84221: POP
84222: GO 84415
// end ; end ;
84224: GO 84064
84226: POP
84227: POP
// for i := minerMinesList [ index ] downto 1 do
84228: LD_ADDR_VAR 0 5
84232: PUSH
84233: DOUBLE
84234: LD_EXP 117
84238: PUSH
84239: LD_VAR 0 6
84243: ARRAY
84244: INC
84245: ST_TO_ADDR
84246: LD_INT 1
84248: PUSH
84249: FOR_DOWNTO
84250: IFFALSE 84413
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
84252: LD_EXP 117
84256: PUSH
84257: LD_VAR 0 6
84261: ARRAY
84262: PUSH
84263: LD_VAR 0 5
84267: ARRAY
84268: PUSH
84269: LD_INT 1
84271: ARRAY
84272: PPUSH
84273: LD_EXP 117
84277: PUSH
84278: LD_VAR 0 6
84282: ARRAY
84283: PUSH
84284: LD_VAR 0 5
84288: ARRAY
84289: PUSH
84290: LD_INT 2
84292: ARRAY
84293: PPUSH
84294: LD_VAR 0 2
84298: PPUSH
84299: LD_VAR 0 3
84303: PPUSH
84304: CALL_OW 298
84308: PUSH
84309: LD_INT 6
84311: LESS
84312: IFFALSE 84411
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84314: LD_EXP 117
84318: PUSH
84319: LD_VAR 0 6
84323: ARRAY
84324: PUSH
84325: LD_VAR 0 5
84329: ARRAY
84330: PUSH
84331: LD_INT 1
84333: ARRAY
84334: PPUSH
84335: LD_EXP 117
84339: PUSH
84340: LD_VAR 0 6
84344: ARRAY
84345: PUSH
84346: LD_VAR 0 5
84350: ARRAY
84351: PUSH
84352: LD_INT 2
84354: ARRAY
84355: PPUSH
84356: LD_VAR 0 1
84360: PPUSH
84361: CALL_OW 255
84365: PPUSH
84366: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84370: LD_ADDR_EXP 117
84374: PUSH
84375: LD_EXP 117
84379: PPUSH
84380: LD_VAR 0 6
84384: PPUSH
84385: LD_EXP 117
84389: PUSH
84390: LD_VAR 0 6
84394: ARRAY
84395: PPUSH
84396: LD_VAR 0 5
84400: PPUSH
84401: CALL_OW 3
84405: PPUSH
84406: CALL_OW 1
84410: ST_TO_ADDR
// end ; end ;
84411: GO 84249
84413: POP
84414: POP
// end ;
84415: LD_VAR 0 4
84419: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
84420: LD_INT 0
84422: PPUSH
84423: PPUSH
84424: PPUSH
84425: PPUSH
84426: PPUSH
84427: PPUSH
84428: PPUSH
84429: PPUSH
84430: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
84431: LD_VAR 0 1
84435: PPUSH
84436: CALL_OW 264
84440: PUSH
84441: LD_INT 81
84443: EQUAL
84444: NOT
84445: PUSH
84446: LD_VAR 0 1
84450: PUSH
84451: LD_EXP 116
84455: IN
84456: NOT
84457: OR
84458: IFFALSE 84462
// exit ;
84460: GO 84784
// index := GetElementIndex ( minersList , unit ) ;
84462: LD_ADDR_VAR 0 6
84466: PUSH
84467: LD_EXP 116
84471: PPUSH
84472: LD_VAR 0 1
84476: PPUSH
84477: CALL 25701 0 2
84481: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
84482: LD_ADDR_VAR 0 8
84486: PUSH
84487: LD_EXP 118
84491: PUSH
84492: LD_EXP 117
84496: PUSH
84497: LD_VAR 0 6
84501: ARRAY
84502: MINUS
84503: ST_TO_ADDR
// if not minesFreeAmount then
84504: LD_VAR 0 8
84508: NOT
84509: IFFALSE 84513
// exit ;
84511: GO 84784
// tmp := [ ] ;
84513: LD_ADDR_VAR 0 7
84517: PUSH
84518: EMPTY
84519: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
84520: LD_ADDR_VAR 0 5
84524: PUSH
84525: DOUBLE
84526: LD_INT 1
84528: DEC
84529: ST_TO_ADDR
84530: LD_VAR 0 8
84534: PUSH
84535: FOR_TO
84536: IFFALSE 84731
// begin _d := rand ( 0 , 5 ) ;
84538: LD_ADDR_VAR 0 11
84542: PUSH
84543: LD_INT 0
84545: PPUSH
84546: LD_INT 5
84548: PPUSH
84549: CALL_OW 12
84553: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
84554: LD_ADDR_VAR 0 12
84558: PUSH
84559: LD_INT 2
84561: PPUSH
84562: LD_INT 6
84564: PPUSH
84565: CALL_OW 12
84569: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
84570: LD_ADDR_VAR 0 9
84574: PUSH
84575: LD_VAR 0 2
84579: PPUSH
84580: LD_VAR 0 11
84584: PPUSH
84585: LD_VAR 0 12
84589: PPUSH
84590: CALL_OW 272
84594: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
84595: LD_ADDR_VAR 0 10
84599: PUSH
84600: LD_VAR 0 3
84604: PPUSH
84605: LD_VAR 0 11
84609: PPUSH
84610: LD_VAR 0 12
84614: PPUSH
84615: CALL_OW 273
84619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
84620: LD_VAR 0 9
84624: PPUSH
84625: LD_VAR 0 10
84629: PPUSH
84630: CALL_OW 488
84634: PUSH
84635: LD_VAR 0 9
84639: PUSH
84640: LD_VAR 0 10
84644: PUSH
84645: EMPTY
84646: LIST
84647: LIST
84648: PUSH
84649: LD_VAR 0 7
84653: IN
84654: NOT
84655: AND
84656: PUSH
84657: LD_VAR 0 9
84661: PPUSH
84662: LD_VAR 0 10
84666: PPUSH
84667: CALL_OW 458
84671: NOT
84672: AND
84673: IFFALSE 84715
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
84675: LD_ADDR_VAR 0 7
84679: PUSH
84680: LD_VAR 0 7
84684: PPUSH
84685: LD_VAR 0 7
84689: PUSH
84690: LD_INT 1
84692: PLUS
84693: PPUSH
84694: LD_VAR 0 9
84698: PUSH
84699: LD_VAR 0 10
84703: PUSH
84704: EMPTY
84705: LIST
84706: LIST
84707: PPUSH
84708: CALL_OW 1
84712: ST_TO_ADDR
84713: GO 84729
// i := i - 1 ;
84715: LD_ADDR_VAR 0 5
84719: PUSH
84720: LD_VAR 0 5
84724: PUSH
84725: LD_INT 1
84727: MINUS
84728: ST_TO_ADDR
// end ;
84729: GO 84535
84731: POP
84732: POP
// for i in tmp do
84733: LD_ADDR_VAR 0 5
84737: PUSH
84738: LD_VAR 0 7
84742: PUSH
84743: FOR_IN
84744: IFFALSE 84782
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
84746: LD_VAR 0 1
84750: PPUSH
84751: LD_VAR 0 5
84755: PUSH
84756: LD_INT 1
84758: ARRAY
84759: PPUSH
84760: LD_VAR 0 5
84764: PUSH
84765: LD_INT 2
84767: ARRAY
84768: PPUSH
84769: CALL 83728 0 3
84773: NOT
84774: IFFALSE 84780
// exit ;
84776: POP
84777: POP
84778: GO 84784
84780: GO 84743
84782: POP
84783: POP
// end ;
84784: LD_VAR 0 4
84788: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
84789: LD_INT 0
84791: PPUSH
84792: PPUSH
84793: PPUSH
84794: PPUSH
84795: PPUSH
84796: PPUSH
84797: PPUSH
84798: PPUSH
84799: PPUSH
// if GetClass ( unit ) <> class_sniper then
84800: LD_VAR 0 1
84804: PPUSH
84805: CALL_OW 257
84809: PUSH
84810: LD_INT 5
84812: NONEQUAL
84813: IFFALSE 84817
// exit ;
84815: GO 85283
// dist := 8 ;
84817: LD_ADDR_VAR 0 5
84821: PUSH
84822: LD_INT 8
84824: ST_TO_ADDR
// viewRange := 12 ;
84825: LD_ADDR_VAR 0 8
84829: PUSH
84830: LD_INT 12
84832: ST_TO_ADDR
// side := GetSide ( unit ) ;
84833: LD_ADDR_VAR 0 6
84837: PUSH
84838: LD_VAR 0 1
84842: PPUSH
84843: CALL_OW 255
84847: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
84848: LD_INT 61
84850: PPUSH
84851: LD_VAR 0 6
84855: PPUSH
84856: CALL_OW 321
84860: PUSH
84861: LD_INT 2
84863: EQUAL
84864: IFFALSE 84874
// viewRange := 16 ;
84866: LD_ADDR_VAR 0 8
84870: PUSH
84871: LD_INT 16
84873: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
84874: LD_VAR 0 1
84878: PPUSH
84879: LD_VAR 0 2
84883: PPUSH
84884: LD_VAR 0 3
84888: PPUSH
84889: CALL_OW 297
84893: PUSH
84894: LD_VAR 0 5
84898: GREATER
84899: IFFALSE 84978
// begin ComMoveXY ( unit , x , y ) ;
84901: LD_VAR 0 1
84905: PPUSH
84906: LD_VAR 0 2
84910: PPUSH
84911: LD_VAR 0 3
84915: PPUSH
84916: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84920: LD_INT 35
84922: PPUSH
84923: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
84927: LD_VAR 0 1
84931: PPUSH
84932: LD_VAR 0 2
84936: PPUSH
84937: LD_VAR 0 3
84941: PPUSH
84942: CALL 57462 0 3
84946: NOT
84947: IFFALSE 84951
// exit ;
84949: GO 85283
// until GetDistUnitXY ( unit , x , y ) < dist ;
84951: LD_VAR 0 1
84955: PPUSH
84956: LD_VAR 0 2
84960: PPUSH
84961: LD_VAR 0 3
84965: PPUSH
84966: CALL_OW 297
84970: PUSH
84971: LD_VAR 0 5
84975: LESS
84976: IFFALSE 84920
// end ; ComTurnXY ( unit , x , y ) ;
84978: LD_VAR 0 1
84982: PPUSH
84983: LD_VAR 0 2
84987: PPUSH
84988: LD_VAR 0 3
84992: PPUSH
84993: CALL_OW 118
// repeat if Multiplayer then
84997: LD_OWVAR 4
85001: IFFALSE 85012
// wait ( 35 ) else
85003: LD_INT 35
85005: PPUSH
85006: CALL_OW 67
85010: GO 85019
// wait ( 5 ) ;
85012: LD_INT 5
85014: PPUSH
85015: CALL_OW 67
// _d := GetDir ( unit ) ;
85019: LD_ADDR_VAR 0 11
85023: PUSH
85024: LD_VAR 0 1
85028: PPUSH
85029: CALL_OW 254
85033: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
85034: LD_ADDR_VAR 0 7
85038: PUSH
85039: LD_VAR 0 1
85043: PPUSH
85044: CALL_OW 250
85048: PPUSH
85049: LD_VAR 0 1
85053: PPUSH
85054: CALL_OW 251
85058: PPUSH
85059: LD_VAR 0 2
85063: PPUSH
85064: LD_VAR 0 3
85068: PPUSH
85069: CALL 60070 0 4
85073: ST_TO_ADDR
// until dir = _d ;
85074: LD_VAR 0 7
85078: PUSH
85079: LD_VAR 0 11
85083: EQUAL
85084: IFFALSE 84997
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
85086: LD_ADDR_VAR 0 9
85090: PUSH
85091: LD_VAR 0 1
85095: PPUSH
85096: CALL_OW 250
85100: PPUSH
85101: LD_VAR 0 7
85105: PPUSH
85106: LD_VAR 0 5
85110: PPUSH
85111: CALL_OW 272
85115: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
85116: LD_ADDR_VAR 0 10
85120: PUSH
85121: LD_VAR 0 1
85125: PPUSH
85126: CALL_OW 251
85130: PPUSH
85131: LD_VAR 0 7
85135: PPUSH
85136: LD_VAR 0 5
85140: PPUSH
85141: CALL_OW 273
85145: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
85146: LD_VAR 0 9
85150: PPUSH
85151: LD_VAR 0 10
85155: PPUSH
85156: CALL_OW 488
85160: NOT
85161: IFFALSE 85165
// exit ;
85163: GO 85283
// ComAnimCustom ( unit , 1 ) ;
85165: LD_VAR 0 1
85169: PPUSH
85170: LD_INT 1
85172: PPUSH
85173: CALL_OW 592
// p := 0 ;
85177: LD_ADDR_VAR 0 12
85181: PUSH
85182: LD_INT 0
85184: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
85185: LD_VAR 0 9
85189: PPUSH
85190: LD_VAR 0 10
85194: PPUSH
85195: LD_VAR 0 6
85199: PPUSH
85200: LD_VAR 0 8
85204: PPUSH
85205: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
85209: LD_INT 35
85211: PPUSH
85212: CALL_OW 67
// p := Inc ( p ) ;
85216: LD_ADDR_VAR 0 12
85220: PUSH
85221: LD_VAR 0 12
85225: PPUSH
85226: CALL 60026 0 1
85230: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
85231: LD_VAR 0 12
85235: PUSH
85236: LD_INT 3
85238: EQUAL
85239: PUSH
85240: LD_VAR 0 1
85244: PPUSH
85245: CALL_OW 302
85249: NOT
85250: OR
85251: PUSH
85252: LD_VAR 0 1
85256: PPUSH
85257: CALL_OW 301
85261: OR
85262: IFFALSE 85209
// RemoveSeeing ( _x , _y , side ) ;
85264: LD_VAR 0 9
85268: PPUSH
85269: LD_VAR 0 10
85273: PPUSH
85274: LD_VAR 0 6
85278: PPUSH
85279: CALL_OW 331
// end ;
85283: LD_VAR 0 4
85287: RET
